{
  "sha": "0c1bcd23274e9f465dc43eda4fc467150631f824",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGMxYmNkMjMyNzRlOWY0NjVkYzQzZWRhNGZjNDY3MTUwNjMxZjgyNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-28T19:28:26Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-28T19:28:26Z"
    },
    "message": "gdb: convert obj_section macros to methods\n\nConvert these three macros to methods of obj_section.  The problem fixed\nby the following patch is caused by an out of bound access of the\nobjfile::section_offsets vector.  Since this is deep in macros, we don't\nget a clear backtrace and it's difficult to debug.  Changing that to\nmethods means we can step in them and break on them.\n\nBecause their implementation requires knowing about struct objfile, move\nstruct obj_section below struct objfile in objfiles.h.\n\nThe obj_section_offset was used in one place as an lvalue to set\noffsets, in machoread.c.  Replace that with a set_offset method.\n\nAdd the objfile::section_offset and objfile::set_section_offset methods\nto improve encapsulation (reduce other objects poking into struct\nobjfile's internals).\n\ngdb/ChangeLog:\n\n\t* objfiles.h (struct obj_section): Move down.\n\t<offset, set_offset, addr, endaddr>: New.\n\t(obj_section_offset, obj_section_addr, obj_section_endaddr),\n\treplace all users to use obj_section methods.\n\t(struct objfile) <section_offset, set_section_offset>: New.\n\nChange-Id: I97e8fcae93ab2353fbdadcb4a5ec10d7949a7334",
    "tree": {
      "sha": "a7ebad33d064631f80c6b016da5cb3e2df3eedae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a7ebad33d064631f80c6b016da5cb3e2df3eedae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c1bcd23274e9f465dc43eda4fc467150631f824",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c1bcd23274e9f465dc43eda4fc467150631f824",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c1bcd23274e9f465dc43eda4fc467150631f824",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c1bcd23274e9f465dc43eda4fc467150631f824/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f07fad95a949b070e51a18276b8f1e03cf86490f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f07fad95a949b070e51a18276b8f1e03cf86490f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f07fad95a949b070e51a18276b8f1e03cf86490f"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 134,
    "deletions": 102
  },
  "files": [
    {
      "sha": "48a58e039846cf1136e6d77db9e2fbe3afd7f58d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -1,3 +1,19 @@\n+2021-06-28  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* objfiles.h (struct obj_section): Move down.\n+\t<offset, set_offset, addr, endaddr>: New.\n+\t(obj_section_offset, obj_section_addr, obj_section_endaddr),\n+\treplace all users to use obj_section methods.\n+\t(struct objfile) <section_offset, set_section_offset>: New.\n+\n+2021-06-28  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* objfiles.h (struct obj_section): Move down.\n+\t<offset, set_offset, addr, endaddr>: New.\n+\t(obj_section_offset, obj_section_addr, obj_section_endaddr),\n+\treplace all users to use obj_section methods.\n+\t(struct objfile) <section_offset, set_section_offset>: New.\n+\n 2021-06-28  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* .flake8: New."
    },
    {
      "sha": "09b38e59e9e50b8cecc031afeae2b7d80906b1af",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -395,8 +395,7 @@ arm_find_mapping_symbol (CORE_ADDR memaddr, CORE_ADDR *start)\n \t      data->section_maps_sorted[section_idx] = true;\n \t    }\n \n-\t  struct arm_mapping_symbol map_key\n-\t    = { memaddr - obj_section_addr (sec), 0 };\n+\t  arm_mapping_symbol map_key = { memaddr - sec->addr (), 0 };\n \t  arm_mapping_symbol_vec::const_iterator it\n \t    = std::lower_bound (map.begin (), map.end (), map_key);\n \n@@ -409,7 +408,7 @@ arm_find_mapping_symbol (CORE_ADDR memaddr, CORE_ADDR *start)\n \t      if (it->value == map_key.value)\n \t\t{\n \t\t  if (start)\n-\t\t    *start = it->value + obj_section_addr (sec);\n+\t\t    *start = it->value + sec->addr ();\n \t\t  return it->type;\n \t\t}\n \t    }\n@@ -420,7 +419,7 @@ arm_find_mapping_symbol (CORE_ADDR memaddr, CORE_ADDR *start)\n \t\t= it - 1;\n \n \t      if (start)\n-\t\t*start = prev_it->value + obj_section_addr (sec);\n+\t\t*start = prev_it->value + sec->addr ();\n \t      return prev_it->type;\n \t    }\n \t}\n@@ -2218,7 +2217,7 @@ arm_exidx_new_objfile (struct objfile *objfile)\n \t\t\t  NULL\n \t\t\t};\n \n-\t\t      CORE_ADDR pc = pers + obj_section_offset (pers_sec);\n+\t\t      CORE_ADDR pc = pers + pers_sec->offset ();\n \t\t      int k;\n \n \t\t      for (k = 0; personality[k]; k++)\n@@ -2303,7 +2302,7 @@ arm_find_exidx_entry (CORE_ADDR memaddr, CORE_ADDR *start)\n   if (sec != NULL)\n     {\n       struct arm_exidx_data *data;\n-      struct arm_exidx_entry map_key = { memaddr - obj_section_addr (sec), 0 };\n+      struct arm_exidx_entry map_key = { memaddr - sec->addr (), 0 };\n \n       data = arm_exidx_data_key.get (sec->objfile->obfd);\n       if (data != NULL)\n@@ -2323,7 +2322,7 @@ arm_find_exidx_entry (CORE_ADDR memaddr, CORE_ADDR *start)\n \t\t  if (idx->addr == map_key.addr)\n \t\t    {\n \t\t      if (start)\n-\t\t\t*start = idx->addr + obj_section_addr (sec);\n+\t\t\t*start = idx->addr + sec->addr ();\n \t\t      return idx->entry;\n \t\t    }\n \t\t}\n@@ -2332,7 +2331,7 @@ arm_find_exidx_entry (CORE_ADDR memaddr, CORE_ADDR *start)\n \t\t{\n \t\t  idx = idx - 1;\n \t\t  if (start)\n-\t\t    *start = idx->addr + obj_section_addr (sec);\n+\t\t    *start = idx->addr + sec->addr ();\n \t\t  return idx->entry;\n \t\t}\n \t    }"
    },
    {
      "sha": "35bf7bd450668e9969f51c7cfaa74d27ffbf569a",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -636,8 +636,7 @@ program_space::add_target_sections (struct objfile *objfile)\n       if (bfd_section_size (osect->the_bfd_section) == 0)\n \tcontinue;\n \n-      m_target_sections.emplace_back (obj_section_addr (osect),\n-\t\t\t\t      obj_section_endaddr (osect),\n+      m_target_sections.emplace_back (osect->addr (), osect->endaddr (),\n \t\t\t\t      osect->the_bfd_section, (void *) objfile);\n     }\n }"
    },
    {
      "sha": "8e504f3008a8371b869289985ecf50ac0f039751",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -404,8 +404,8 @@ gcore_create_callback (CORE_ADDR vaddr, unsigned long size, int read,\n \t    bfd *abfd = objfile->obfd;\n \t    asection *asec = objsec->the_bfd_section;\n \t    bfd_vma align = (bfd_vma) 1 << bfd_section_alignment (asec);\n-\t    bfd_vma start = obj_section_addr (objsec) & -align;\n-\t    bfd_vma end = (obj_section_endaddr (objsec) + align - 1) & -align;\n+\t    bfd_vma start = objsec->addr () & -align;\n+\t    bfd_vma end = (objsec->endaddr () + align - 1) & -align;\n \n \t    /* Match if either the entire memory region lies inside the\n \t       section (i.e. a mapping covering some pages of a large\n@@ -479,7 +479,7 @@ objfile_find_memory_regions (struct target_ops *self,\n \t    int size = bfd_section_size (isec);\n \t    int ret;\n \n-\t    ret = (*func) (obj_section_addr (objsec), size, \n+\t    ret = (*func) (objsec->addr (), size,\n \t\t\t   1, /* All sections will be readable.  */\n \t\t\t   (flags & SEC_READONLY) == 0, /* Writable.  */\n \t\t\t   (flags & SEC_CODE) != 0, /* Executable.  */"
    },
    {
      "sha": "c68aaf1f490fd5c1a8e34f2b9aceb068bcdabab8",
      "filename": "gdb/hppa-bsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/hppa-bsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/hppa-bsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-bsd-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -64,8 +64,8 @@ hppabsd_find_global_pointer (struct gdbarch *gdbarch, struct value *function)\n \n       if (sec < faddr_sec->objfile->sections_end)\n \t{\n-\t  CORE_ADDR addr = obj_section_addr (sec);\n-\t  CORE_ADDR endaddr = obj_section_endaddr (sec);\n+\t  CORE_ADDR addr = sec->addr ();\n+\t  CORE_ADDR endaddr = sec->endaddr ();\n \n \t  while (addr < endaddr)\n \t    {"
    },
    {
      "sha": "cea6768a1dd336d08704ca10f97427f1478ed1c1",
      "filename": "gdb/hppa-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/hppa-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/hppa-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-linux-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -371,8 +371,8 @@ hppa_linux_find_global_pointer (struct gdbarch *gdbarch,\n \t{\n \t  CORE_ADDR addr, endaddr;\n \n-\t  addr = obj_section_addr (osect);\n-\t  endaddr = obj_section_endaddr (osect);\n+\t  addr = osect->addr ();\n+\t  endaddr = osect->endaddr ();\n \n \t  while (addr < endaddr)\n \t    {"
    },
    {
      "sha": "ffb3394f71d417ac60adac73464878b77d485720",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -943,11 +943,7 @@ hppa64_convert_code_addr_to_fptr (struct gdbarch *gdbarch, CORE_ADDR code)\n \n   if (opd < sec->objfile->sections_end)\n     {\n-      CORE_ADDR addr;\n-\n-      for (addr = obj_section_addr (opd);\n-\t   addr < obj_section_endaddr (opd);\n-\t   addr += 2 * 8)\n+      for (CORE_ADDR addr = opd->addr (); addr < opd->endaddr (); addr += 2 * 8)\n \t{\n \t  ULONGEST opdaddr;\n \t  gdb_byte tmp[8];"
    },
    {
      "sha": "895808ac08b9753604e41b7f20ba4582e644d4d2",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -2859,7 +2859,7 @@ ia64_get_dyn_info_list (unw_addr_space_t as,\n       void *buf = NULL;\n \n       text_sec = objfile->sections + SECT_OFF_TEXT (objfile);\n-      ip = obj_section_addr (text_sec);\n+      ip = text_sec->addr ();\n       ret = ia64_find_unwind_table (objfile, ip, &di, &buf);\n       if (ret >= 0)\n \t{\n@@ -3432,10 +3432,8 @@ ia64_find_global_pointer_from_dynamic_section (struct gdbarch *gdbarch,\n \n       if (osect < faddr_sect->objfile->sections_end)\n \t{\n-\t  CORE_ADDR addr, endaddr;\n-\n-\t  addr = obj_section_addr (osect);\n-\t  endaddr = obj_section_endaddr (osect);\n+\t  CORE_ADDR addr = osect->addr ();\n+\t  CORE_ADDR endaddr = osect->endaddr ();\n \n \t  while (addr < endaddr)\n \t    {\n@@ -3515,10 +3513,8 @@ find_extant_func_descr (struct gdbarch *gdbarch, CORE_ADDR faddr)\n \n       if (osect < faddr_sect->objfile->sections_end)\n \t{\n-\t  CORE_ADDR addr, endaddr;\n-\n-\t  addr = obj_section_addr (osect);\n-\t  endaddr = obj_section_endaddr (osect);\n+\t  CORE_ADDR addr = osect->addr ();\n+\t  CORE_ADDR endaddr = osect->endaddr ();\n \n \t  while (addr < endaddr)\n \t    {"
    },
    {
      "sha": "a0f0307d529364f04a9bf660c0cc61da96b87765",
      "filename": "gdb/machoread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/machoread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/machoread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/machoread.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -926,7 +926,7 @@ macho_symfile_offsets (struct objfile *objfile,\n \n \t  if (bfd_sect_name == addrs[i].name)\n \t    {\n-\t      obj_section_offset (osect) = addrs[i].addr;\n+\t      osect->set_offset (addrs[i].addr);\n \t      break;\n \t    }\n \t}"
    },
    {
      "sha": "4637fcbc86cdbfabbbc482019afbbffc5e670bda",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -319,8 +319,7 @@ print_objfile_section_info (bfd *abfd, struct obj_section *asect,\n \n       print_section_index (abfd, asect->the_bfd_section, index_digits);\n       maint_print_section_info (name, flags,\n-\t\t\t\tobj_section_addr (asect),\n-\t\t\t\tobj_section_endaddr (asect),\n+\t\t\t\tasect->addr (), asect->endaddr (),\n \t\t\t\tasect->the_bfd_section->filepos,\n \t\t\t\taddr_size);\n     }"
    },
    {
      "sha": "33560e3c41c17d0cbb97121638fdac19cd071f7d",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -687,9 +687,9 @@ frob_address (struct objfile *objfile, CORE_ADDR *pc)\n \n   ALL_OBJFILE_OSECTIONS (objfile, iter)\n     {\n-      if (*pc >= obj_section_addr (iter) && *pc < obj_section_endaddr (iter))\n+      if (*pc >= iter->addr () && *pc < iter->endaddr ())\n \t{\n-\t  *pc -= obj_section_offset (iter);\n+\t  *pc -= iter->offset ();\n \t  return 1;\n \t}\n     }\n@@ -1616,12 +1616,12 @@ minimal_symbol_upper_bound (struct bound_minimal_symbol minsym)\n   obj_section = minsym.obj_section ();\n   if (iter != past_the_end\n       && (MSYMBOL_VALUE_ADDRESS (minsym.objfile, iter)\n-\t  < obj_section_endaddr (obj_section)))\n+\t  < obj_section->endaddr ()))\n     result = MSYMBOL_VALUE_ADDRESS (minsym.objfile, iter);\n   else\n     /* We got the start address from the last msymbol in the objfile.\n        So the end address is the end of the section.  */\n-    result = obj_section_endaddr (obj_section);\n+    result = obj_section->endaddr ();\n \n   return result;\n }"
    },
    {
      "sha": "b65fa8820cae218cd9ae6e43431d12f1a08753de",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -729,7 +729,7 @@ objfile_relocate1 (struct objfile *objfile,\n       int idx = s - objfile->sections;\n \n       exec_set_section_address (bfd_get_filename (objfile->obfd), idx,\n-\t\t\t\tobj_section_addr (s));\n+\t\t\t\ts->addr ());\n     }\n \n   /* Data changed.  */\n@@ -899,8 +899,8 @@ have_minimal_symbols (void)\n static bool\n sort_cmp (const struct obj_section *sect1, const obj_section *sect2)\n {\n-  const CORE_ADDR sect1_addr = obj_section_addr (sect1);\n-  const CORE_ADDR sect2_addr = obj_section_addr (sect2);\n+  const CORE_ADDR sect1_addr = sect1->addr ();\n+  const CORE_ADDR sect2_addr = sect2->addr ();\n \n   if (sect1_addr < sect2_addr)\n     return true;\n@@ -982,7 +982,7 @@ sort_cmp (const struct obj_section *sect1, const obj_section *sect2)\n static struct obj_section *\n preferred_obj_section (struct obj_section *a, struct obj_section *b)\n {\n-  gdb_assert (obj_section_addr (a) == obj_section_addr (b));\n+  gdb_assert (a->addr () == b->addr ());\n   gdb_assert ((a->objfile->separate_debug_objfile == b->objfile)\n \t      || (b->objfile->separate_debug_objfile == a->objfile));\n   gdb_assert ((a->objfile->separate_debug_objfile_backlink == b->objfile)\n@@ -1030,8 +1030,8 @@ filter_debuginfo_sections (struct obj_section **map, int map_size)\n       struct obj_section *const sect2 = map[i + 1];\n       const struct objfile *const objfile1 = sect1->objfile;\n       const struct objfile *const objfile2 = sect2->objfile;\n-      const CORE_ADDR sect1_addr = obj_section_addr (sect1);\n-      const CORE_ADDR sect2_addr = obj_section_addr (sect2);\n+      const CORE_ADDR sect1_addr = sect1->addr ();\n+      const CORE_ADDR sect2_addr = sect2->addr ();\n \n       if (sect1_addr == sect2_addr\n \t  && (objfile1->separate_debug_objfile == objfile2\n@@ -1075,9 +1075,9 @@ filter_overlapping_sections (struct obj_section **map, int map_size)\n \t{\n \t  struct obj_section *const sect1 = map[i];\n \t  struct obj_section *const sect2 = map[k];\n-\t  const CORE_ADDR sect1_addr = obj_section_addr (sect1);\n-\t  const CORE_ADDR sect2_addr = obj_section_addr (sect2);\n-\t  const CORE_ADDR sect1_endaddr = obj_section_endaddr (sect1);\n+\t  const CORE_ADDR sect1_addr = sect1->addr ();\n+\t  const CORE_ADDR sect2_addr = sect2->addr ();\n+\t  const CORE_ADDR sect1_endaddr = sect1->endaddr ();\n \n \t  gdb_assert (sect1_addr <= sect2_addr);\n \n@@ -1093,7 +1093,7 @@ filter_overlapping_sections (struct obj_section **map, int map_size)\n \t      const struct bfd_section *const bfds1 = sect1->the_bfd_section;\n \t      const struct bfd_section *const bfds2 = sect2->the_bfd_section;\n \n-\t      const CORE_ADDR sect2_endaddr = obj_section_endaddr (sect2);\n+\t      const CORE_ADDR sect2_endaddr = sect2->endaddr ();\n \n \t      struct gdbarch *const gdbarch = objf1->arch ();\n \n@@ -1184,9 +1184,9 @@ bsearch_cmp (const void *key, const void *elt)\n   const CORE_ADDR pc = *(CORE_ADDR *) key;\n   const struct obj_section *section = *(const struct obj_section **) elt;\n \n-  if (pc < obj_section_addr (section))\n+  if (pc < section->addr ())\n     return -1;\n-  if (pc < obj_section_endaddr (section))\n+  if (pc < section->endaddr ())\n     return 0;\n   return 1;\n }\n@@ -1289,8 +1289,7 @@ is_addr_in_objfile (CORE_ADDR addr, const struct objfile *objfile)\n       if (section_is_overlay (osect) && !section_is_mapped (osect))\n \tcontinue;\n \n-      if (obj_section_addr (osect) <= addr\n-\t  && addr < obj_section_endaddr (osect))\n+      if (osect->addr () <= addr && addr < osect->endaddr ())\n \treturn true;\n     }\n   return false;"
    },
    {
      "sha": "766c4b409dfcc18e6bd855366fbf96de81dc29d0",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 62,
      "deletions": 31,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -127,37 +127,6 @@ struct entry_info\n   unsigned initialized : 1;\n };\n \n-/* Sections in an objfile.  The section offsets are stored in the\n-   OBJFILE.  */\n-\n-struct obj_section\n-{\n-  /* BFD section pointer */\n-  struct bfd_section *the_bfd_section;\n-\n-  /* Objfile this section is part of.  */\n-  struct objfile *objfile;\n-\n-  /* True if this \"overlay section\" is mapped into an \"overlay region\".  */\n-  int ovly_mapped;\n-};\n-\n-/* Relocation offset applied to S.  */\n-#define obj_section_offset(s)\t\t\t\t\t\t\\\n-  (((s)->objfile->section_offsets)[gdb_bfd_section_index ((s)->objfile->obfd, (s)->the_bfd_section)])\n-\n-/* The memory address of section S (vma + offset).  */\n-#define obj_section_addr(s)\t\t\t\t      \t\t\\\n-  (bfd_section_vma (s->the_bfd_section)\t\t\t\t\t\\\n-   + obj_section_offset (s))\n-\n-/* The one-passed-the-end memory address of section S\n-   (vma + size + offset).  */\n-#define obj_section_endaddr(s)\t\t\t\t\t\t\\\n-  (bfd_section_vma (s->the_bfd_section)\t\t\t\t\t\\\n-   + bfd_section_size ((s)->the_bfd_section)\t\t\t\t\\\n-   + obj_section_offset (s))\n-\n #define ALL_OBJFILE_OSECTIONS(objfile, osect)\t\\\n   for (osect = objfile->sections; osect < objfile->sections_end; osect++) \\\n     if (osect->the_bfd_section == NULL)\t\t\t\t\t\\\n@@ -664,6 +633,27 @@ struct objfile\n   /* See quick_symbol_functions.  */\n   void require_partial_symbols (bool verbose);\n \n+  /* Return the relocation offset applied to SECTION.  */\n+  CORE_ADDR section_offset (bfd_section *section) const\n+  {\n+    /* The section's owner can be nullptr if it is one of the _bfd_std_section\n+       section.  */\n+    gdb_assert (section->owner == nullptr || section->owner == this->obfd);\n+\n+    int idx = gdb_bfd_section_index (this->obfd, section);\n+    return this->section_offsets[idx];\n+  }\n+\n+  /* Set the relocation offset applied to SECTION.  */\n+  void set_section_offset (bfd_section *section, CORE_ADDR offset)\n+  {\n+    /* The section's owner can be nullptr if it is one of the _bfd_std_section\n+       section.  */\n+    gdb_assert (section->owner == nullptr || section->owner == this->obfd);\n+\n+    int idx = gdb_bfd_section_index (this->obfd, section);\n+    this->section_offsets[idx] = offset;\n+  }\n \n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized\n@@ -836,6 +826,47 @@ struct objfile_deleter\n \n typedef std::unique_ptr<objfile, objfile_deleter> objfile_up;\n \n+\n+/* Sections in an objfile.  The section offsets are stored in the\n+   OBJFILE.  */\n+\n+struct obj_section\n+{\n+  /* Relocation offset applied to the section.  */\n+  CORE_ADDR offset () const\n+  {\n+    return this->objfile->section_offset (this->the_bfd_section);\n+  }\n+\n+  /* Set the relocation offset applied to the section.  */\n+  void set_offset (CORE_ADDR offset)\n+  {\n+    this->objfile->set_section_offset (this->the_bfd_section, offset);\n+  }\n+\n+  /* The memory address of the section (vma + offset).  */\n+  CORE_ADDR addr () const\n+  {\n+    return bfd_section_vma (this->the_bfd_section) + this->offset ();\n+  }\n+\n+  /* The one-passed-the-end memory address of the section\n+     (vma + size + offset).  */\n+  CORE_ADDR endaddr () const\n+  {\n+    return this->addr () + bfd_section_size (this->the_bfd_section);\n+  }\n+\n+  /* BFD section pointer */\n+  struct bfd_section *the_bfd_section;\n+\n+  /* Objfile this section is part of.  */\n+  struct objfile *objfile;\n+\n+  /* True if this \"overlay section\" is mapped into an \"overlay region\".  */\n+  int ovly_mapped;\n+};\n+\n /* Declarations for functions defined in objfiles.c */\n \n extern int entry_point_address_query (CORE_ADDR *entry_p);"
    },
    {
      "sha": "3cd42f817f5164a13d2b2cbe794d4744f81b14ac",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -1525,8 +1525,7 @@ info_symbol_command (const char *arg, int from_tty)\n \n \tsect_addr = overlay_mapped_address (addr, osect);\n \n-\tif (obj_section_addr (osect) <= sect_addr\n-\t    && sect_addr < obj_section_endaddr (osect)\n+\tif (osect->addr () <= sect_addr && sect_addr < osect->endaddr ()\n \t    && (msymbol\n \t\t= lookup_minimal_symbol_by_pc_section (sect_addr,\n \t\t\t\t\t\t       osect).minsym))"
    },
    {
      "sha": "772cf23d9a0951c64e6844e5d6ad5c70e46cf664",
      "filename": "gdb/solib-aix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/solib-aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/solib-aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-aix.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -685,8 +685,7 @@ solib_aix_get_toc_value (CORE_ADDR pc)\n \t     \"(%s has no data section)\"),\n \t   core_addr_to_string (pc), objfile_name (pc_osect->objfile));\n \n-  result = (obj_section_addr (data_osect)\n-\t    + xcoff_get_toc_offset (pc_osect->objfile));\n+  result = data_osect->addr () + xcoff_get_toc_offset (pc_osect->objfile);\n \n   solib_aix_debug_printf (\"pc=%s -> %s\", core_addr_to_string (pc),\n \t\t\t  core_addr_to_string (result));"
    },
    {
      "sha": "803467dd48968755adf00cc332eef40731aac803",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -925,7 +925,7 @@ dsbt_relocate_main_executable (void)\n       osect_idx = osect - objf->sections;\n \n       /* Current address of section.  */\n-      addr = obj_section_addr (osect);\n+      addr = osect->addr ();\n       /* Offset from where this section started.  */\n       offset = objf->section_offsets[osect_idx];\n       /* Original address prior to any past relocations.  */"
    },
    {
      "sha": "c0b546ba68f5e68dd563c0116e781df4bbdf9f1e",
      "filename": "gdb/solib-frv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/solib-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/solib-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-frv.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -797,7 +797,7 @@ frv_relocate_main_executable (void)\n       osect_idx = osect - objf->sections;\n \n       /* Current address of section.  */\n-      addr = obj_section_addr (osect);\n+      addr = osect->addr ();\n       /* Offset from where this section started.  */\n       offset = objf->section_offsets[osect_idx];\n       /* Original address prior to any past relocations.  */"
    },
    {
      "sha": "0eb48d04d5bee7ef01480d501468b4a7b0729684",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -3012,7 +3012,7 @@ pc_in_unmapped_range (CORE_ADDR pc, struct obj_section *section)\n \n       /* We assume the LMA is relocated by the same offset as the VMA.  */\n       bfd_vma size = bfd_section_size (bfd_section);\n-      CORE_ADDR offset = obj_section_offset (section);\n+      CORE_ADDR offset = section->offset ();\n \n       if (bfd_section_lma (bfd_section) + offset <= pc\n \t  && pc < bfd_section_lma (bfd_section) + offset + size)\n@@ -3030,8 +3030,8 @@ pc_in_mapped_range (CORE_ADDR pc, struct obj_section *section)\n {\n   if (section_is_overlay (section))\n     {\n-      if (obj_section_addr (section) <= pc\n-\t  && pc < obj_section_endaddr (section))\n+      if (section->addr () <= pc\n+\t  && pc < section->endaddr ())\n \treturn 1;\n     }\n \n@@ -3044,10 +3044,10 @@ pc_in_mapped_range (CORE_ADDR pc, struct obj_section *section)\n static int\n sections_overlap (struct obj_section *a, struct obj_section *b)\n {\n-  CORE_ADDR a_start = obj_section_addr (a);\n-  CORE_ADDR a_end = obj_section_endaddr (a);\n-  CORE_ADDR b_start = obj_section_addr (b);\n-  CORE_ADDR b_end = obj_section_endaddr (b);\n+  CORE_ADDR a_start = a->addr ();\n+  CORE_ADDR a_end = a->endaddr ();\n+  CORE_ADDR b_start = b->addr ();\n+  CORE_ADDR b_end = b->endaddr ();\n \n   return (a_start < b_end && b_start < a_end);\n }"
    },
    {
      "sha": "6a9c3dce6af074a682dc37e3b384b6aeeb688a5e",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -1698,8 +1698,7 @@ fixup_section (struct general_symbol_info *ginfo,\n \t  if (fallback == -1)\n \t    fallback = idx;\n \n-\t  if (obj_section_addr (s) - offset <= addr\n-\t      && addr < obj_section_endaddr (s) - offset)\n+\t  if (s->addr () - offset <= addr && addr < s->endaddr () - offset)\n \t    {\n \t      ginfo->set_section_index (idx);\n \t      return;"
    },
    {
      "sha": "73ed1d8d8481815cb37d5925c252d06651c124e0",
      "filename": "gdb/tilegx-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/tilegx-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/tilegx-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tilegx-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -747,7 +747,7 @@ tilegx_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)\n   s = find_pc_section (start_pc);\n   end_pc = start_pc + 8 * TILEGX_BUNDLE_SIZE_IN_BYTES;\n   if (s != NULL)\n-    end_pc = std::min (end_pc, obj_section_endaddr (s));\n+    end_pc = std::min (end_pc, s->endaddr ());\n \n   /* Otherwise, try to skip prologue the hard way.  */\n   return tilegx_analyze_prologue (gdbarch,"
    },
    {
      "sha": "ad4f4a3d7d0a1695dae4d9f71df910bd3db518a1",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -178,7 +178,7 @@ tui_find_backward_disassembly_start_address (CORE_ADDR addr)\n      section.  */\n   struct obj_section *section = find_pc_section (addr);\n   if (section != NULL)\n-    return obj_section_addr (section);\n+    return section->addr ();\n \n   return addr;\n }"
    },
    {
      "sha": "834c8f0c8759930f9ea5eb33e39c6c9eae0a7a4d",
      "filename": "gdb/xstormy16-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/xstormy16-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c1bcd23274e9f465dc43eda4fc467150631f824/gdb/xstormy16-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xstormy16-tdep.c?ref=0c1bcd23274e9f465dc43eda4fc467150631f824",
      "patch": "@@ -562,8 +562,8 @@ xstormy16_find_jmp_table_entry (struct gdbarch *gdbarch, CORE_ADDR faddr)\n \t{\n \t  CORE_ADDR addr, endaddr;\n \n-\t  addr = obj_section_addr (osect);\n-\t  endaddr = obj_section_endaddr (osect);\n+\t  addr = osect->addr ();\n+\t  endaddr = osect->endaddr ();\n \n \t  for (; addr < endaddr; addr += 2 * xstormy16_inst_size)\n \t    {"
    }
  ]
}