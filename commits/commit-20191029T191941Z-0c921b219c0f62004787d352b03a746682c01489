{
  "sha": "0c921b219c0f62004787d352b03a746682c01489",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGM5MjFiMjE5YzBmNjIwMDQ3ODdkMzUyYjAzYTc0NjY4MmMwMTQ4OQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-22T22:25:50Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-29T19:19:41Z"
    },
    "message": "Only make a nullterminated string if we need to\n\nAs of 7bb43059820c5febb4509b15202a93efde442bc6, we no longer need\na nullterminated linkage_name to look up the entry in the hash table.\n\nSo this patch makes it so we only make the copy if the entry was\nnot found.\n\nBy auditing all callers of symbol_set_names, I found out that all cases\nwhere the string may not be nullterminated already pass true for COPY_NAME.\nSo here, I am documenting that as a requirement and am removing the code\nthat relies on undefined behavior in symbol_set_names (it accessed the string\npast the provided length to check for nulltermination). Note that the Ada\ncase at the beginning of symbol_set_names was already relying on this.\n\ngdb/ChangeLog:\n\n2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n\n\t* symtab.h (symbol_set_names): Document that copy_name must be\n\tset to true for non-nullterminated strings.\n\t* symtab.c (symbol_set_names): Only make a nullterminated copy of\n\tlinkage_name if the entry was not found and we need to demangle.\n\nChange-Id: I183302e1f51483ff6dff0fd5c3b0f32f0f04a5d2",
    "tree": {
      "sha": "6a69ea0a2e591c1421f3b0721a396b81f288775d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a69ea0a2e591c1421f3b0721a396b81f288775d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c921b219c0f62004787d352b03a746682c01489",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c921b219c0f62004787d352b03a746682c01489",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c921b219c0f62004787d352b03a746682c01489",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c921b219c0f62004787d352b03a746682c01489/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "35e65c49df7d8fac3c0a32fa0d696988a9de675d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35e65c49df7d8fac3c0a32fa0d696988a9de675d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/35e65c49df7d8fac3c0a32fa0d696988a9de675d"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 28,
    "deletions": 19
  },
  "files": [
    {
      "sha": "1c4e47c78b5c72e003a9c6e0d72b58223518be57",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c921b219c0f62004787d352b03a746682c01489/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c921b219c0f62004787d352b03a746682c01489/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0c921b219c0f62004787d352b03a746682c01489",
      "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* symtab.h (symbol_set_names): Document that copy_name must be\n+\tset to true for non-nullterminated strings.\n+\t* symtab.c (symbol_set_names): Only make a nullterminated copy of\n+\tlinkage_name if the entry was not found and we need to demangle.\n+\n 2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n \n \t* Makefile.in (HFILES_NO_SRCDIR): Add gdb_binary_search.h."
    },
    {
      "sha": "a6a9dc9c6eba8a8774e9189bf6e0de5a60ea4b9c",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c921b219c0f62004787d352b03a746682c01489/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c921b219c0f62004787d352b03a746682c01489/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=0c921b219c0f62004787d352b03a746682c01489",
      "patch": "@@ -832,8 +832,6 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t\t  struct objfile_per_bfd_storage *per_bfd)\n {\n   struct demangled_name_entry **slot;\n-  /* A 0-terminated copy of the linkage name.  */\n-  const char *linkage_name_copy;\n \n   if (gsymbol->language == language_ada)\n     {\n@@ -858,20 +856,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n   if (per_bfd->demangled_names_hash == NULL)\n     create_demangled_names_hash (per_bfd);\n \n-  if (linkage_name[len] != '\\0')\n-    {\n-      char *alloc_name;\n-\n-      alloc_name = (char *) alloca (len + 1);\n-      memcpy (alloc_name, linkage_name, len);\n-      alloc_name[len] = '\\0';\n-\n-      linkage_name_copy = alloc_name;\n-    }\n-  else\n-    linkage_name_copy = linkage_name;\n-\n-  struct demangled_name_entry entry (gdb::string_view (linkage_name_copy, len));\n+  struct demangled_name_entry entry (gdb::string_view (linkage_name, len));\n   slot = ((struct demangled_name_entry **)\n \t  htab_find_slot (per_bfd->demangled_names_hash.get (),\n \t\t\t  &entry, INSERT));\n@@ -882,6 +867,21 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t This happens to, e.g., main.init (__go_init_main).  Cope.  */\n       || (gsymbol->language == language_go && (*slot)->demangled == nullptr))\n     {\n+      /* A 0-terminated copy of the linkage name.  Callers must set COPY_NAME\n+         to true if the string might not be nullterminated.  We have to make\n+         this copy because demangling needs a nullterminated string.  */\n+      const char *linkage_name_copy;\n+      if (copy_name)\n+\t{\n+\t  char *alloc_name = (char *) alloca (len + 1);\n+\t  memcpy (alloc_name, linkage_name, len);\n+\t  alloc_name[len] = '\\0';\n+\n+\t  linkage_name_copy = alloc_name;\n+\t}\n+      else\n+\tlinkage_name_copy = linkage_name;\n+\n       gdb::unique_xmalloc_ptr<char> demangled_name_ptr\n \t(symbol_find_demangled_name (gsymbol, linkage_name_copy));\n \n@@ -894,7 +894,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t It turns out that it is actually important to still save such\n \t an entry in the hash table, because storing this name gives\n \t us better bcache hit rates for partial symbols.  */\n-      if (!copy_name && linkage_name_copy == linkage_name)\n+      if (!copy_name)\n \t{\n \t  *slot\n \t    = ((struct demangled_name_entry *)\n@@ -912,7 +912,8 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t       obstack_alloc (&per_bfd->storage_obstack,\n \t\t\t      sizeof (demangled_name_entry) + len + 1));\n \t  char *mangled_ptr = reinterpret_cast<char *> (*slot + 1);\n-\t  strcpy (mangled_ptr, linkage_name_copy);\n+\t  memcpy (mangled_ptr, linkage_name, len);\n+\t  mangled_ptr [len] = '\\0';\n \t  new (*slot) demangled_name_entry\n \t    (gdb::string_view (mangled_ptr, len));\n \t}"
    },
    {
      "sha": "131a74d4bae497c993296844dccdaf818ab87bf1",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c921b219c0f62004787d352b03a746682c01489/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c921b219c0f62004787d352b03a746682c01489/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=0c921b219c0f62004787d352b03a746682c01489",
      "patch": "@@ -504,7 +504,8 @@ extern void symbol_set_language (struct general_symbol_info *symbol,\n   (symbol)->ginfo.name = (linkage_name)\n \n /* Set the linkage and natural names of a symbol, by demangling\n-   the linkage name.  */\n+   the linkage name.  If linkage_name may not be nullterminated,\n+   copy_name must be set to true.  */\n #define SYMBOL_SET_NAMES(symbol,linkage_name,len,copy_name,objfile)\t\\\n   symbol_set_names (&(symbol)->ginfo, linkage_name, len, copy_name, \\\n \t\t    (objfile)->per_bfd)"
    }
  ]
}