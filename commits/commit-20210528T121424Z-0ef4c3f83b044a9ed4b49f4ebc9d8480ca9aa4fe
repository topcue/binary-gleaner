{
  "sha": "0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGVmNGMzZjgzYjA0NGE5ZWQ0YjQ5ZjRlYmM5ZDg0ODBjYTlhYTRmZQ==",
  "commit": {
    "author": {
      "name": "Yoshinori Sato",
      "email": "ysato@users.sourceforge.jp",
      "date": "2021-05-21T13:40:04Z"
    },
    "committer": {
      "name": "Yoshinori Sato",
      "email": "ysato@users.sourceforge.jp",
      "date": "2021-05-28T12:14:24Z"
    },
    "message": "sim: h8300 Fixed different behavior in preinc/predec.\n\n* sim-main.h (h8_typecodes): Add operand type OP_REG_DEC, OP_REG_INC.\n* compile.c (decode): Rewrite oprand type for specific case.\n(fetch_1): Add handling OP_REG_DEC and OP_REG_INC.\n(step_once): Fix operand fetch order.",
    "tree": {
      "sha": "661d91ebb556bb7ab3f8a36c3e97bec72dbb9ffd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/661d91ebb556bb7ab3f8a36c3e97bec72dbb9ffd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/comments",
  "author": {
    "login": "ysat0",
    "id": 390647,
    "node_id": "MDQ6VXNlcjM5MDY0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/390647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ysat0",
    "html_url": "https://github.com/ysat0",
    "followers_url": "https://api.github.com/users/ysat0/followers",
    "following_url": "https://api.github.com/users/ysat0/following{/other_user}",
    "gists_url": "https://api.github.com/users/ysat0/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ysat0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ysat0/subscriptions",
    "organizations_url": "https://api.github.com/users/ysat0/orgs",
    "repos_url": "https://api.github.com/users/ysat0/repos",
    "events_url": "https://api.github.com/users/ysat0/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ysat0/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ysat0",
    "id": 390647,
    "node_id": "MDQ6VXNlcjM5MDY0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/390647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ysat0",
    "html_url": "https://github.com/ysat0",
    "followers_url": "https://api.github.com/users/ysat0/followers",
    "following_url": "https://api.github.com/users/ysat0/following{/other_user}",
    "gists_url": "https://api.github.com/users/ysat0/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ysat0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ysat0/subscriptions",
    "organizations_url": "https://api.github.com/users/ysat0/orgs",
    "repos_url": "https://api.github.com/users/ysat0/repos",
    "events_url": "https://api.github.com/users/ysat0/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ysat0/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3633d4fb4469f5bc4e6e1593b65c7fc93d3805bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3633d4fb4469f5bc4e6e1593b65c7fc93d3805bb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3633d4fb4469f5bc4e6e1593b65c7fc93d3805bb"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 60,
    "deletions": 3
  },
  "files": [
    {
      "sha": "c07a592963b788cc3cff17fced5071c9c92c947e",
      "filename": "sim/h8300/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/sim/h8300/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/sim/h8300/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/ChangeLog?ref=0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
      "patch": "@@ -1,3 +1,10 @@\n+2021-05-28  Yoshinori Sato  <ysato@users.sourceforge.jp>\n+\n+\t* sim-main.h (h8_typecodes): Add operand type OP_REG_DEC, OP_REG_INC.\n+\t* compile.c (decode): Rewrite oprand type for specific case.\n+\t(fetch_1): Add handling OP_REG_DEC and OP_REG_INC.\n+\t(step_once): Fix operand fetch order.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (SIM_HAVE_COMMON_SIM_STATE): Delete."
    },
    {
      "sha": "01e9766790c8b6dd64068006c9d240d8bd0d9a80",
      "filename": "sim/h8300/compile.c",
      "status": "modified",
      "additions": 50,
      "deletions": 2,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/sim/h8300/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/sim/h8300/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/compile.c?ref=0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
      "patch": "@@ -1100,6 +1100,35 @@ decode (SIM_DESC sd, int addr, unsigned char *data, decoded_inst *dst)\n \t\t      /* End of Processing for system calls.  */\n \t\t    }\n \n+\t\t  /* Use same register is specified for source\n+\t\t     and destination.\n+\t\t     The value of source will be the value after\n+\t\t     address calculation.  */\n+\t\t  if (OP_KIND (dst->opcode) != O_CMP &&\n+\t\t      OP_KIND (dst->src.type) == OP_REG &&\n+\t\t      (dst->src.reg & 7) == dst->dst.reg) {\n+\t\t    switch (OP_KIND (dst->dst.type))\n+\t\t      {\n+\t\t      case OP_POSTDEC:\n+\t\t\tdst->src.type = X (OP_REG_DEC,\n+\t\t\t\t\t   OP_SIZE (dst->dst.type));\n+\t\t\tbreak;\n+\t\t      case OP_POSTINC:\n+\t\t\tdst->src.type = X (OP_REG_INC,\n+\t\t\t\t\t   OP_SIZE (dst->dst.type));\n+\t\t\tbreak;\n+\t\t      case OP_PREINC:\n+\t\t\tif (OP_KIND (dst->opcode) == O_MOV)\n+\t\t\t  dst->src.type = X (OP_REG_INC,\n+\t\t\t\t\t     OP_SIZE (dst->dst.type));\n+\t\t\tbreak;\n+\t\t      case OP_PREDEC:\n+\t\t\tif (OP_KIND (dst->opcode) == O_MOV)\n+\t\t\t  dst->src.type = X (OP_REG_DEC,\n+\t\t\t\t\t     OP_SIZE (dst->dst.type));\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n \t\t  dst->next_pc = addr + len / 2;\n \t\t  return;\n \t\t}\n@@ -1370,6 +1399,25 @@ fetch_1 (SIM_DESC sd, ea_type *arg, int *val, int twice)\n       *val = abs;\n       break;\n \n+    case X (OP_REG_DEC, SB):\t/* Register direct, affected decrement byte.  */\n+      *val = GET_B_REG (rn) - 1;\n+      break;\n+    case X (OP_REG_DEC, SW):\t/* Register direct, affected decrement word.  */\n+      *val = GET_W_REG (rn) - 2;\n+      break;\n+    case X (OP_REG_DEC, SL):\t/* Register direct, affected decrement long.  */\n+      *val = GET_L_REG (rn) - 4;\n+      break;\n+    case X (OP_REG_INC, SB):\t/* Register direct, affected increment byte.  */\n+      *val = GET_B_REG (rn) + 1;\n+      break;\n+    case X (OP_REG_INC, SW):\t/* Register direct, affected increment word.  */\n+      *val = GET_W_REG (rn) + 2;\n+      break;\n+    case X (OP_REG_INC, SL):\t/* Register direct, affected increment long.  */\n+      *val = GET_L_REG (rn) + 4;\n+      break;\n+\n     case X (OP_MEM, SB):\t/* Why isn't this implemented?  */\n     default:\n       sim_engine_halt (sd, cpu, NULL, NULL_CIA, sim_stopped, SIM_SIGSEGV);\n@@ -1981,7 +2029,7 @@ step_once (SIM_DESC sd, SIM_CPU *cpu)\n \n \tcase O (O_AND, SB):\t\t/* and.b */\n \t  /* Fetch rd and ea.  */\n-\t  if (fetch (sd, &code->src, &ea) || fetch2 (sd, &code->dst, &rd)) \n+\t  if (fetch2 (sd, &code->dst, &rd) || fetch (sd, &code->src, &ea))\n \t    goto end;\n \t  res = rd & ea;\n \t  goto log8;\n@@ -2002,7 +2050,7 @@ step_once (SIM_DESC sd, SIM_CPU *cpu)\n \n \tcase O (O_OR, SB):\t\t/* or.b */\n \t  /* Fetch rd and ea.  */\n-\t  if (fetch (sd, &code->src, &ea) || fetch2 (sd, &code->dst, &rd)) \n+\t  if (fetch2 (sd, &code->dst, &rd) || fetch (sd, &code->src, &ea))\n \t    goto end;\n \t  res = rd | ea;\n \t  goto log8;"
    },
    {
      "sha": "f27ba6827381de580e6b413e735bbb2e1a17d4c4",
      "filename": "sim/h8300/sim-main.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/sim/h8300/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe/sim/h8300/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/sim-main.h?ref=0ef4c3f83b044a9ed4b49f4ebc9d8480ca9aa4fe",
      "patch": "@@ -82,7 +82,9 @@ enum h8_typecodes {\n   /* FIXME: memory indirect?  */\n   OP_INDEXB,\t\t/* Byte index mode */\n   OP_INDEXW,\t\t/* Word index mode */\n-  OP_INDEXL\t\t/* Long index mode */\n+  OP_INDEXL,\t\t/* Long index mode */\n+  OP_REG_DEC,\t\t/* Register direct. affect address decrement. */\n+  OP_REG_INC,\t\t/* Register direct. affect address increment. */\n };\n \n #include \"sim-basics.h\""
    }
  ]
}