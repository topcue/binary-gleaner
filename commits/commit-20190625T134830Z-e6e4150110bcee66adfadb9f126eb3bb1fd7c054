{
  "sha": "e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTZlNDE1MDExMGJjZWU2NmFkZmFkYjlmMTI2ZWIzYmIxZmQ3YzA1NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T19:46:18Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:30Z"
    },
    "message": "Remove struct tui_source_info\n\nThe tui_source_info struct is used as a member of the \"detail\" union\nin tui_win_info, and this member of the union is only used by source\nand disassembly windows.  This patch removes tui_source_info and moves\nits members directly to tui_source_window_base.  This simplifies the\ncode by removing a layer of references from many places.  In a few\nspots, a new cast was needed, but most of these will be removed by the\nend of the series.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.c (tui_update_source_window)\n\t(tui_refill_source_window)\n\t(tui_source_window_base::do_scroll_horizontal)\n\t(tui_update_breakpoint_info, tui_set_exec_info_content)\n\t(tui_show_exec_info_content, tui_erase_exec_info_content)\n\t(tui_clear_exec_info_content): Update.\n\t* tui/tui-wingeneral.c (make_all_visible, tui_refresh_all):\n\tUpdate.\n\t* tui/tui-win.c (make_invisible_and_set_new_height)\n\t(make_visible_with_new_height): Update.\n\t* tui/tui-source.c (tui_set_source_content)\n\t(tui_show_symtab_source): Update.\n\t* tui/tui-layout.c (extract_display_start_addr)\n\t(show_source_disasm_command, show_data)\n\t(make_source_or_disasm_window)\n\t(show_source_or_disasm_and_command): Update.\n\t* tui/tui-disasm.c (tui_set_disassem_content): Simplify.\n\t(tui_disasm_window::do_scroll_vertical): Remove shadowing\n\t\"gdbarch\".\n\t* tui/tui-data.h (struct tui_source_info): Remove.  Move contents\n\tto tui_source_window_base.\n\t(struct tui_win_info) <detail>: Remove source_info member.\n\t(struct tui_source_window_base) <has_locator>: Inline.\n\tMove contents from tui_source_info; rename has_locator member to\n\tm_has_locator.\n\t(TUI_SRC_WIN, TUI_DISASM_WIN): Add casts.\n\t* tui/tui-data.c (tui_source_window_base::has_locator): Move to\n\theader file.\n\t(tui_source_window_base::clear_detail, ~tui_source_window_base):\n\tSimplify.\n\t(tui_free_all_source_wins_content): Cast to\n\ttui_source_window_base.",
    "tree": {
      "sha": "53ef1cbb7494fb2317a04d2da24cf5f185f0778c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/53ef1cbb7494fb2317a04d2da24cf5f185f0778c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44f0e208eb32a7ac469cef2b6760f72534abac09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44f0e208eb32a7ac469cef2b6760f72534abac09",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/44f0e208eb32a7ac469cef2b6760f72534abac09"
    }
  ],
  "stats": {
    "total": 258,
    "additions": 147,
    "deletions": 111
  },
  "files": [
    {
      "sha": "3fd6bc73dbd416406bdbe6b651c5bc0ee2c3a0f3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -1,3 +1,38 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.c (tui_update_source_window)\n+\t(tui_refill_source_window)\n+\t(tui_source_window_base::do_scroll_horizontal)\n+\t(tui_update_breakpoint_info, tui_set_exec_info_content)\n+\t(tui_show_exec_info_content, tui_erase_exec_info_content)\n+\t(tui_clear_exec_info_content): Update.\n+\t* tui/tui-wingeneral.c (make_all_visible, tui_refresh_all):\n+\tUpdate.\n+\t* tui/tui-win.c (make_invisible_and_set_new_height)\n+\t(make_visible_with_new_height): Update.\n+\t* tui/tui-source.c (tui_set_source_content)\n+\t(tui_show_symtab_source): Update.\n+\t* tui/tui-layout.c (extract_display_start_addr)\n+\t(show_source_disasm_command, show_data)\n+\t(make_source_or_disasm_window)\n+\t(show_source_or_disasm_and_command): Update.\n+\t* tui/tui-disasm.c (tui_set_disassem_content): Simplify.\n+\t(tui_disasm_window::do_scroll_vertical): Remove shadowing\n+\t\"gdbarch\".\n+\t* tui/tui-data.h (struct tui_source_info): Remove.  Move contents\n+\tto tui_source_window_base.\n+\t(struct tui_win_info) <detail>: Remove source_info member.\n+\t(struct tui_source_window_base) <has_locator>: Inline.\n+\tMove contents from tui_source_info; rename has_locator member to\n+\tm_has_locator.\n+\t(TUI_SRC_WIN, TUI_DISASM_WIN): Add casts.\n+\t* tui/tui-data.c (tui_source_window_base::has_locator): Move to\n+\theader file.\n+\t(tui_source_window_base::clear_detail, ~tui_source_window_base):\n+\tSimplify.\n+\t(tui_free_all_source_wins_content): Cast to\n+\ttui_source_window_base.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (make_invisible_and_set_new_height)"
    },
    {
      "sha": "f15cf314f019a80fdd013ebea31656b33a1b688c",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 10,
      "deletions": 26,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -75,14 +75,6 @@ tui_win_is_auxillary (enum tui_win_type win_type)\n   return (win_type > MAX_MAJOR_WINDOWS);\n }\n \n-/* See tui-data.h.  */\n-\n-bool\n-tui_source_window_base::has_locator () const\n-{\n-  return detail.source_info.has_locator;\n-}\n-\n void\n tui_set_win_highlight (struct tui_win_info *win_info, \n \t\t       int highlight)\n@@ -179,10 +171,10 @@ tui_add_to_source_windows (struct tui_win_info *win_info)\n void\n tui_source_window_base::clear_detail ()\n {\n-  detail.source_info.gdbarch = NULL;\n-  detail.source_info.start_line_or_addr.loa = LOA_ADDRESS;\n-  detail.source_info.start_line_or_addr.u.addr = 0;\n-  detail.source_info.horizontal_offset = 0;\n+  gdbarch = NULL;\n+  start_line_or_addr.loa = LOA_ADDRESS;\n+  start_line_or_addr.u.addr = 0;\n+  horizontal_offset = 0;\n }\n \n /* See tui-data.h.  */\n@@ -499,13 +491,8 @@ tui_source_window_base::tui_source_window_base (enum tui_win_type type)\n   : tui_win_info (type)\n {\n   gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n-  detail.source_info.execution_info = NULL;\n-  detail.source_info.has_locator = false;\n-  detail.source_info.horizontal_offset = 0;\n-  detail.source_info.gdbarch = NULL;\n-  detail.source_info.start_line_or_addr.loa = LOA_ADDRESS;\n-  detail.source_info.start_line_or_addr.u.addr = 0;\n-  detail.source_info.fullname = NULL;\n+  start_line_or_addr.loa = LOA_ADDRESS;\n+  start_line_or_addr.u.addr = 0;\n }\n \n tui_data_window::tui_data_window ()\n@@ -613,12 +600,8 @@ tui_add_content_elements (struct tui_gen_win_info *win_info,\n \n tui_source_window_base::~tui_source_window_base ()\n {\n-  if (detail.source_info.fullname)\n-    {\n-      xfree (detail.source_info.fullname);\n-      detail.source_info.fullname = NULL;\n-    }\n-  struct tui_gen_win_info *generic_win = detail.source_info.execution_info;\n+  xfree (fullname);\n+  struct tui_gen_win_info *generic_win = execution_info;\n   if (generic_win != NULL)\n     {\n       tui_delete_win (generic_win->handle);\n@@ -665,7 +648,8 @@ tui_free_all_source_wins_content ()\n   for (tui_win_info *win_info : tui_source_windows ())\n     {\n       tui_free_win_content (&(win_info->generic));\n-      tui_free_win_content (win_info->detail.source_info.execution_info);\n+      tui_source_window_base *base = (tui_source_window_base *) win_info;\n+      tui_free_win_content (base->execution_info);\n     }\n }\n "
    },
    {
      "sha": "4aef2f58ae093aee810eb4eeb01d58242fc0a7fd",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 20,
      "deletions": 21,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -238,23 +238,6 @@ struct tui_data_info\n };\n \n \n-struct tui_source_info\n-{\n-  /* Does the locator belong to this window?  */\n-  bool has_locator;\n-  /* Execution information window.  */\n-  struct tui_gen_win_info *execution_info;\n-  int horizontal_offset;\t/* Used for horizontal scroll.  */\n-  struct tui_line_or_address start_line_or_addr;\n-\n-  /* It is the resolved form as returned by symtab_to_fullname.  */\n-  char *fullname;\n-\n-  /* Architecture associated with code at this location.  */\n-  struct gdbarch *gdbarch;\n-};\n-\n-\n struct tui_command_info\n {\n   int start_line;\n@@ -303,7 +286,6 @@ struct tui_win_info\n   struct tui_gen_win_info generic;\t/* General window information.  */\n   union\n   {\n-    struct tui_source_info source_info;\n     struct tui_data_info data_display_info;\n     struct tui_command_info command_info;\n   }\n@@ -334,7 +316,24 @@ struct tui_source_window_base : public tui_win_info\n   void clear_detail () override;\n \n   /* Return true if this window has the locator.  */\n-  bool has_locator () const override;\n+  bool has_locator () const override\n+  {\n+    return m_has_locator;\n+  }\n+\n+  /* Does the locator belong to this window?  */\n+  bool m_has_locator = false;\n+  /* Execution information window.  */\n+  struct tui_gen_win_info *execution_info = nullptr;\n+  /* Used for horizontal scroll.  */\n+  int horizontal_offset = 0;\n+  struct tui_line_or_address start_line_or_addr;\n+\n+  /* It is the resolved form as returned by symtab_to_fullname.  */\n+  char *fullname = nullptr;\n+\n+  /* Architecture associated with code at this location.  */\n+  struct gdbarch *gdbarch = nullptr;\n };\n \n /* A TUI source window.  */\n@@ -418,8 +417,8 @@ extern void tui_set_win_highlight (struct tui_win_info *win_info,\n /* Global Data.  */\n extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n \n-#define TUI_SRC_WIN     tui_win_list[SRC_WIN]\n-#define TUI_DISASM_WIN\ttui_win_list[DISASSEM_WIN]\n+#define TUI_SRC_WIN     ((tui_source_window_base *) tui_win_list[SRC_WIN])\n+#define TUI_DISASM_WIN\t((tui_source_window_base *) tui_win_list[DISASSEM_WIN])\n #define TUI_DATA_WIN    tui_win_list[DATA_WIN]\n #define TUI_CMD_WIN     tui_win_list[CMD_WIN]\n "
    },
    {
      "sha": "8dd156d09079094e50b5e9ccf6c579bb8d17a752",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -167,7 +167,7 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n {\n   enum tui_status ret = TUI_FAILURE;\n   int i;\n-  int offset = TUI_DISASM_WIN->detail.source_info.horizontal_offset;\n+  int offset = TUI_DISASM_WIN->horizontal_offset;\n   int max_lines, line_width;\n   CORE_ADDR cur_pc;\n   struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n@@ -184,9 +184,10 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n   if (ret != TUI_SUCCESS)\n     return ret;\n \n-  TUI_DISASM_WIN->detail.source_info.gdbarch = gdbarch;\n-  TUI_DISASM_WIN->detail.source_info.start_line_or_addr.loa = LOA_ADDRESS;\n-  TUI_DISASM_WIN->detail.source_info.start_line_or_addr.u.addr = pc;\n+  tui_source_window_base *base = TUI_DISASM_WIN;\n+  base->gdbarch = gdbarch;\n+  base->start_line_or_addr.loa = LOA_ADDRESS;\n+  base->start_line_or_addr.u.addr = pc;\n   cur_pc = locator->content[0]->which_element.locator.addr;\n \n   /* Window size, excluding highlight box.  */\n@@ -378,7 +379,6 @@ tui_disasm_window::do_scroll_vertical\n {\n   if (generic.content != NULL)\n     {\n-      struct gdbarch *gdbarch = detail.source_info.gdbarch;\n       CORE_ADDR pc;\n       tui_win_content content;\n       struct tui_line_or_address val;"
    },
    {
      "sha": "55d737ab315b0cb461a19c03a33ec7a78a16c92d",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 39,
      "deletions": 31,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -468,17 +468,17 @@ extract_display_start_addr (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n     {\n     case SRC_COMMAND:\n     case SRC_DATA_COMMAND:\n-      gdbarch = TUI_SRC_WIN->detail.source_info.gdbarch;\n+      gdbarch = TUI_SRC_WIN->gdbarch;\n       find_line_pc (cursal.symtab,\n-\t\t    TUI_SRC_WIN->detail.source_info.start_line_or_addr.u.line_no,\n+\t\t    TUI_SRC_WIN->start_line_or_addr.u.line_no,\n \t\t    &pc);\n       addr = pc;\n       break;\n     case DISASSEM_COMMAND:\n     case SRC_DISASSEM_COMMAND:\n     case DISASSEM_DATA_COMMAND:\n-      gdbarch = TUI_DISASM_WIN->detail.source_info.gdbarch;\n-      addr = TUI_DISASM_WIN->detail.source_info.start_line_or_addr.u.addr;\n+      gdbarch = TUI_DISASM_WIN->gdbarch;\n+      addr = TUI_DISASM_WIN->start_line_or_addr.u.addr;\n       break;\n     default:\n       addr = 0;\n@@ -622,33 +622,34 @@ show_source_disasm_command (void)\n       asm_height = tui_term_height () - (src_height + cmd_height);\n \n       if (TUI_SRC_WIN == NULL)\n-\tTUI_SRC_WIN = make_source_window (src_height, 0);\n+\ttui_win_list[SRC_WIN] = make_source_window (src_height, 0);\n       else\n \t{\n \t  init_gen_win_info (&TUI_SRC_WIN->generic,\n \t\t\t     TUI_SRC_WIN->generic.type,\n \t\t\t     src_height,\n \t\t\t     TUI_SRC_WIN->generic.width,\n-\t\t\t     TUI_SRC_WIN->detail.source_info.execution_info->width,\n+\t\t\t     TUI_SRC_WIN->execution_info->width,\n \t\t\t     0);\n \t  TUI_SRC_WIN->can_highlight = TRUE;\n-\t  init_gen_win_info (TUI_SRC_WIN->detail.source_info.execution_info,\n+\t  init_gen_win_info (TUI_SRC_WIN->execution_info,\n \t\t\t     EXEC_INFO_WIN,\n \t\t\t     src_height,\n \t\t\t     3,\n \t\t\t     0,\n \t\t\t     0);\n \t  tui_make_visible (&TUI_SRC_WIN->generic);\n-\t  tui_make_visible (TUI_SRC_WIN->detail.source_info.execution_info);\n-\t  TUI_SRC_WIN->detail.source_info.has_locator = false;\n+\t  tui_make_visible (TUI_SRC_WIN->execution_info);\n+\t  TUI_SRC_WIN->m_has_locator = false;\n \t}\n \n       struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n \n       tui_show_source_content (TUI_SRC_WIN);\n       if (TUI_DISASM_WIN == NULL)\n \t{\n-\t  TUI_DISASM_WIN = make_disasm_window (asm_height, src_height - 1);\n+\t  tui_win_list[DISASSEM_WIN]\n+\t    = make_disasm_window (asm_height, src_height - 1);\n \t  locator\n \t    = ((struct tui_gen_win_info *)\n \t       init_and_make_win (locator,\n@@ -667,25 +668,25 @@ show_source_disasm_command (void)\n \t\t\t     tui_term_width (),\n \t\t\t     0,\n \t\t\t     (src_height + asm_height) - 1);\n-\t  TUI_DISASM_WIN->detail.source_info.has_locator = true;\n+\t  TUI_DISASM_WIN->m_has_locator = true;\n \t  init_gen_win_info (&TUI_DISASM_WIN->generic,\n \t\t\t     TUI_DISASM_WIN->generic.type,\n \t\t\t     asm_height,\n \t\t\t     TUI_DISASM_WIN->generic.width,\n-\t\t\t     TUI_DISASM_WIN->detail.source_info.execution_info->width,\n+\t\t\t     TUI_DISASM_WIN->execution_info->width,\n \t\t\t     src_height - 1);\n-\t  init_gen_win_info (TUI_DISASM_WIN->detail.source_info.execution_info,\n+\t  init_gen_win_info (TUI_DISASM_WIN->execution_info,\n \t\t\t     EXEC_INFO_WIN,\n \t\t\t     asm_height,\n \t\t\t     3,\n \t\t\t     0,\n \t\t\t     src_height - 1);\n \t  TUI_DISASM_WIN->can_highlight = TRUE;\n \t  tui_make_visible (&TUI_DISASM_WIN->generic);\n-\t  tui_make_visible (TUI_DISASM_WIN->detail.source_info.execution_info);\n+\t  tui_make_visible (TUI_DISASM_WIN->execution_info);\n \t}\n-      TUI_SRC_WIN->detail.source_info.has_locator = false;\n-      TUI_DISASM_WIN->detail.source_info.has_locator = true;\n+      TUI_SRC_WIN->m_has_locator = false;\n+      TUI_DISASM_WIN->m_has_locator = true;\n       tui_make_visible (locator);\n       tui_show_locator_content ();\n       tui_show_source_content (TUI_DISASM_WIN);\n@@ -731,6 +732,8 @@ show_data (enum tui_layout_type new_layout)\n     win_type = SRC_WIN;\n   else\n     win_type = DISASSEM_WIN;\n+\n+  tui_source_window_base *base;\n   if (tui_win_list[win_type] == NULL)\n     {\n       if (win_type == SRC_WIN)\n@@ -748,31 +751,33 @@ show_data (enum tui_layout_type new_layout)\n \t\t\t      0,\n \t\t\t      total_height - 1,\n \t\t\t      DONT_BOX_WINDOW));\n+      base = (tui_source_window_base *) tui_win_list[win_type];\n     }\n   else\n     {\n+      base = (tui_source_window_base *) tui_win_list[win_type];\n       init_gen_win_info (&tui_win_list[win_type]->generic,\n \t\t\t tui_win_list[win_type]->generic.type,\n \t\t\t src_height,\n \t\t\t tui_win_list[win_type]->generic.width,\n-\t\t\t tui_win_list[win_type]->detail.source_info.execution_info->width,\n+\t\t\t base->execution_info->width,\n \t\t\t data_height - 1);\n-      init_gen_win_info (tui_win_list[win_type]->detail.source_info.execution_info,\n+      init_gen_win_info (base->execution_info,\n \t\t\t EXEC_INFO_WIN,\n \t\t\t src_height,\n \t\t\t 3,\n \t\t\t 0,\n \t\t\t data_height - 1);\n       tui_make_visible (&tui_win_list[win_type]->generic);\n-      tui_make_visible (tui_win_list[win_type]->detail.source_info.execution_info);\n+      tui_make_visible (base->execution_info);\n       init_gen_win_info (locator,\n \t\t\t LOCATOR_WIN,\n \t\t\t 2 /* 1 */ ,\n \t\t\t tui_term_width (),\n \t\t\t 0,\n \t\t\t total_height - 1);\n     }\n-  tui_win_list[win_type]->detail.source_info.has_locator = true;\n+  base->m_has_locator = true;\n   tui_make_visible (locator);\n   tui_show_locator_content ();\n   tui_add_to_source_windows (tui_win_list[win_type]);\n@@ -865,16 +870,16 @@ make_source_or_disasm_window (enum tui_win_type type,\n \t\t\t  DONT_BOX_WINDOW));\n \n   /* Now create the source window.  */\n-  struct tui_win_info *result\n-    = ((struct tui_win_info *)\n+  struct tui_source_window_base *result\n+    = ((struct tui_source_window_base *)\n        init_and_make_win (NULL,\n \t\t\t  type,\n \t\t\t  height,\n \t\t\t  tui_term_width () - execution_info->width,\n \t\t\t  execution_info->width,\n \t\t\t  origin_y,\n \t\t\t  BOX_WINDOW));\n-  result->detail.source_info.execution_info = execution_info;\n+  result->execution_info = execution_info;\n   return result;\n }\n \n@@ -896,10 +901,11 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n       src_height = tui_term_height () - cmd_height;\n \n       if (layout_type == SRC_COMMAND)\n-\twin_info_ptr = &TUI_SRC_WIN;\n+\twin_info_ptr = &tui_win_list[SRC_WIN];\n       else\n-\twin_info_ptr = &TUI_DISASM_WIN;\n+\twin_info_ptr = &tui_win_list[DISASSEM_WIN];\n \n+      tui_source_window_base *base;\n       if ((*win_info_ptr) == NULL)\n \t{\n \t  if (layout_type == SRC_COMMAND)\n@@ -915,35 +921,37 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t\t\t\t  0,\n \t\t\t\t  src_height - 1,\n \t\t\t\t  DONT_BOX_WINDOW));\n+\t  base = (tui_source_window_base *) *win_info_ptr;\n \t}\n       else\n \t{\n+\t  base = (tui_source_window_base *) *win_info_ptr;\n \t  init_gen_win_info (locator,\n \t\t\t     LOCATOR_WIN,\n \t\t\t     2 /* 1 */ ,\n \t\t\t     tui_term_width (),\n \t\t\t     0,\n \t\t\t     src_height - 1);\n-\t  (*win_info_ptr)->detail.source_info.has_locator = true;\n+\t  base->m_has_locator = true;\n \t  init_gen_win_info (&(*win_info_ptr)->generic,\n \t\t\t     (*win_info_ptr)->generic.type,\n \t\t\t     src_height - 1,\n \t\t\t     (*win_info_ptr)->generic.width,\n-\t\t\t     (*win_info_ptr)->detail.source_info.execution_info->width,\n+\t\t\t     base->execution_info->width,\n \t\t\t     0);\n-\t  init_gen_win_info ((*win_info_ptr)->detail.source_info.execution_info,\n+\t  init_gen_win_info (base->execution_info,\n \t\t\t     EXEC_INFO_WIN,\n \t\t\t     src_height - 1,\n \t\t\t     3,\n \t\t\t     0,\n \t\t\t     0);\n-\t  (*win_info_ptr)->can_highlight = TRUE;\n+\t  base->can_highlight = TRUE;\n \t  tui_make_visible (&(*win_info_ptr)->generic);\n-\t  tui_make_visible ((*win_info_ptr)->detail.source_info.execution_info);\n+\t  tui_make_visible (base->execution_info);\n \t}\n       if ((*win_info_ptr) != NULL)\n \t{\n-\t  (*win_info_ptr)->detail.source_info.has_locator = true;\n+\t  base->m_has_locator = true;\n \t  tui_make_visible (locator);\n \t  tui_show_locator_content ();\n \t  tui_show_source_content (*win_info_ptr);"
    },
    {
      "sha": "ac3f225e1b1e0be6c6e9f7b28afb42ef80ebd821",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -159,8 +159,8 @@ tui_set_source_content (struct symtab *s,\n \t      int cur_line_no, cur_line;\n \t      struct tui_gen_win_info *locator\n \t\t= tui_locator_win_info_ptr ();\n-\t      struct tui_source_info *src\n-\t\t= &TUI_SRC_WIN->detail.source_info;\n+\t      struct tui_source_window_base *src\n+\t\t= (struct tui_source_window_base *) TUI_SRC_WIN;\n \t      const char *s_filename = symtab_to_filename_for_display (s);\n \n \t      if (TUI_SRC_WIN->generic.title)\n@@ -289,7 +289,7 @@ tui_show_symtab_source (struct gdbarch *gdbarch, struct symtab *s,\n \t\t\tstruct tui_line_or_address line, \n \t\t\tint noerror)\n {\n-  TUI_SRC_WIN->detail.source_info.horizontal_offset = 0;\n+  TUI_SRC_WIN->horizontal_offset = 0;\n   tui_update_source_window_as_is (TUI_SRC_WIN, gdbarch, s, line, noerror);\n }\n "
    },
    {
      "sha": "9c4f9ad57790a9db80651b95b8751724274e6423",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -1268,11 +1268,13 @@ make_invisible_and_set_new_height (struct tui_win_info *win_info,\n     win_info->generic.viewport_height--;\n \n   /* Now deal with the auxillary windows associated with win_info.  */\n+  tui_source_window_base *base;\n   switch (win_info->generic.type)\n     {\n     case SRC_WIN:\n     case DISASSEM_WIN:\n-      gen_win_info = win_info->detail.source_info.execution_info;\n+      base = (tui_source_window_base *) win_info;\n+      gen_win_info = base->execution_info;\n       tui_make_invisible (gen_win_info);\n       gen_win_info->height = height;\n       gen_win_info->origin.y = win_info->generic.origin.y;\n@@ -1316,20 +1318,22 @@ make_visible_with_new_height (struct tui_win_info *win_info)\n \n   tui_make_visible (&win_info->generic);\n   tui_check_and_display_highlight_if_needed (win_info);\n+  tui_source_window_base *base;\n   switch (win_info->generic.type)\n     {\n     case SRC_WIN:\n     case DISASSEM_WIN:\n-      tui_free_win_content (win_info->detail.source_info.execution_info);\n-      tui_make_visible (win_info->detail.source_info.execution_info);\n+      base = (tui_source_window_base *) win_info;\n+      tui_free_win_content (base->execution_info);\n+      tui_make_visible (base->execution_info);\n       if (win_info->generic.content != NULL)\n \t{\n-\t  struct gdbarch *gdbarch = win_info->detail.source_info.gdbarch;\n+\t  struct gdbarch *gdbarch = base->gdbarch;\n \t  struct tui_line_or_address line_or_addr;\n \t  struct symtab_and_line cursal\n \t    = get_current_source_symtab_and_line ();\n \n-\t  line_or_addr = win_info->detail.source_info.start_line_or_addr;\n+\t  line_or_addr = base->start_line_or_addr;\n \t  tui_free_win_content (&win_info->generic);\n \t  tui_update_source_window (win_info, gdbarch,\n \t\t\t\t    cursal.symtab, line_or_addr, TRUE);"
    },
    {
      "sha": "542881779fa5c3c459962dda05d654aacf4dd019",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -225,8 +225,11 @@ make_all_visible (int visible)\n \t  && ((tui_win_list[i])->generic.type) != CMD_WIN)\n \t{\n \t  if (tui_win_is_source_type ((tui_win_list[i])->generic.type))\n-\t    make_visible ((tui_win_list[i])->detail.source_info.execution_info,\n-\t\t\t  visible);\n+\t    {\n+\t      tui_source_window_base *base\n+\t\t= (tui_source_window_base *) tui_win_list[i];\n+\t      make_visible (base->execution_info, visible);\n+\t    }\n \t  make_visible (&tui_win_list[i]->generic, visible);\n \t}\n     }\n@@ -260,8 +263,10 @@ tui_refresh_all (struct tui_win_info **list)\n \t{\n \t  if (type == SRC_WIN || type == DISASSEM_WIN)\n \t    {\n-\t      touchwin (list[type]->detail.source_info.execution_info->handle);\n-\t      tui_refresh_win (list[type]->detail.source_info.execution_info);\n+\t      tui_source_window_base *base\n+\t\t= (tui_source_window_base *) list[type];\n+\t      touchwin (base->execution_info->handle);\n+\t      tui_refresh_win (base->execution_info);\n \t    }\n \t  touchwin (list[type]->generic.handle);\n \t  tui_refresh_win (&list[type]->generic);"
    },
    {
      "sha": "fa9e544f206c299c90a2f1e8ed69dcea68b8d4eb",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 17,
      "deletions": 16,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e4150110bcee66adfadb9f126eb3bb1fd7c054/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=e6e4150110bcee66adfadb9f126eb3bb1fd7c054",
      "patch": "@@ -75,7 +75,8 @@ tui_update_source_window (struct tui_win_info *win_info,\n \t\t\t  struct tui_line_or_address line_or_addr,\n \t\t\t  int noerror)\n {\n-  win_info->detail.source_info.horizontal_offset = 0;\n+  tui_source_window_base *base = (tui_source_window_base *) win_info;\n+  base->horizontal_offset = 0;\n   tui_update_source_window_as_is (win_info, gdbarch, s, line_or_addr, noerror);\n \n   return;\n@@ -324,8 +325,9 @@ tui_refill_source_window (struct tui_win_info *win_info)\n \t   : cursal.symtab);\n     }\n \n+  tui_source_window_base *base = (tui_source_window_base *) win_info;\n   tui_update_source_window_as_is (win_info,\n-\t\t\t\t  win_info->detail.source_info.gdbarch,\n+\t\t\t\t  base->gdbarch,\n \t\t\t\t  s,\n \t\t\t\t  win_info->generic.content[0]\n \t\t\t\t    ->which_element.source.line_or_addr,\n@@ -343,16 +345,14 @@ tui_source_window_base::do_scroll_horizontal\n       int offset;\n \n       if (direction == LEFT_SCROLL)\n-\toffset = detail.source_info.horizontal_offset\n-\t  + num_to_scroll;\n+\toffset = horizontal_offset + num_to_scroll;\n       else\n \t{\n-\t  offset = detail.source_info.horizontal_offset\n-\t    - num_to_scroll;\n+\t  offset = horizontal_offset - num_to_scroll;\n \t  if (offset < 0)\n \t    offset = 0;\n \t}\n-      detail.source_info.horizontal_offset = offset;\n+      horizontal_offset = offset;\n       tui_refill_source_window (this);\n     }\n }\n@@ -425,7 +425,7 @@ tui_update_breakpoint_info (struct tui_win_info *win,\n {\n   int i;\n   int need_refresh = 0;\n-  struct tui_source_info *src = &win->detail.source_info;\n+  tui_source_window_base *src = (tui_source_window_base *) win;\n \n   for (i = 0; i < win->generic.content_size; i++)\n     {\n@@ -494,10 +494,10 @@ tui_set_exec_info_content (struct tui_win_info *win_info)\n {\n   enum tui_status ret = TUI_SUCCESS;\n \n-  if (win_info->detail.source_info.execution_info != NULL)\n+  tui_source_window_base *base = (tui_source_window_base *) win_info;\n+  if (base->execution_info != NULL)\n     {\n-      struct tui_gen_win_info *exec_info_ptr\n-\t= win_info->detail.source_info.execution_info;\n+      struct tui_gen_win_info *exec_info_ptr = base->execution_info;\n \n       if (exec_info_ptr->content == NULL)\n \texec_info_ptr->content =\n@@ -551,8 +551,8 @@ tui_set_exec_info_content (struct tui_win_info *win_info)\n void\n tui_show_exec_info_content (struct tui_win_info *win_info)\n {\n-  struct tui_gen_win_info *exec_info\n-    = win_info->detail.source_info.execution_info;\n+  tui_source_window_base *base = (tui_source_window_base *) win_info;\n+  struct tui_gen_win_info *exec_info = base->execution_info;\n   int cur_line;\n \n   werase (exec_info->handle);\n@@ -571,8 +571,8 @@ tui_show_exec_info_content (struct tui_win_info *win_info)\n void\n tui_erase_exec_info_content (struct tui_win_info *win_info)\n {\n-  struct tui_gen_win_info *exec_info\n-    = win_info->detail.source_info.execution_info;\n+  tui_source_window_base *base = (tui_source_window_base *) win_info;\n+  struct tui_gen_win_info *exec_info = base->execution_info;\n \n   werase (exec_info->handle);\n   tui_refresh_win (exec_info);\n@@ -581,7 +581,8 @@ tui_erase_exec_info_content (struct tui_win_info *win_info)\n void\n tui_clear_exec_info_content (struct tui_win_info *win_info)\n {\n-  win_info->detail.source_info.execution_info->content_in_use = FALSE;\n+  tui_source_window_base *base = (tui_source_window_base *) win_info;\n+  base->execution_info->content_in_use = FALSE;\n   tui_erase_exec_info_content (win_info);\n \n   return;"
    }
  ]
}