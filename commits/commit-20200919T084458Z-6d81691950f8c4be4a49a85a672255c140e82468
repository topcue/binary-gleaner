{
  "sha": "6d81691950f8c4be4a49a85a672255c140e82468",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmQ4MTY5MTk1MGY4YzRiZTRhNDlhODVhNjcyMjU1YzE0MGU4MjQ2OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-07T15:27:16Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-19T08:44:58Z"
    },
    "message": "gdb/fortran: Move Fortran expression handling into f-lang.c\n\nThe Fortran specific OP_F77_UNDETERMINED_ARGLIST is currently handled\nin the generic expression handling code.  There's no reason why this\nshould be the case, so this commit moves handling of this into Fortran\nspecific files.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* eval.c: Remove 'f-lang.h' include.\n\t(value_f90_subarray): Moved to f-lang.c.\n\t(eval_call): Renamed to...\n\t(evaluate_subexp_do_call): ...this, is no longer static, header\n\tcomment moved into header file.\n\t(evaluate_funcall): Update call to eval_call.\n\t(skip_undetermined_arglist): Moved to f-lang.c.\n\t(fortran_value_subarray): Likewise.\n\t(evaluate_subexp_standard): OP_F77_UNDETERMINED_ARGLIST handling\n\tmoved to evaluate_subexp_f.\n\t(calc_f77_array_dims): Moved to f-lang.c\n\t* expprint.c (print_subexp_funcall): New function.\n\t(print_subexp_standard): OP_F77_UNDETERMINED_ARGLIST handling\n\tmoved to print_subexp_f, OP_FUNCALL uses new function.\n\t(dump_subexp_body_funcall): New function.\n\t(dump_subexp_body_standard): OP_F77_UNDETERMINED_ARGLIST handling\n\tmoved to dump_subexp_f, OP_FUNCALL uses new function.\n\t* expression.h (evaluate_subexp_do_call): Declare.\n\t* f-lang.c (value_f90_subarray): Moved from eval.c.\n\t(skip_undetermined_arglist): Likewise.\n\t(calc_f77_array_dims): Likewise.\n\t(fortran_value_subarray): Likewise.\n\t(evaluate_subexp_f): Add OP_F77_UNDETERMINED_ARGLIST support.\n\t(operator_length_f): Likewise.\n\t(print_subexp_f): Likewise.\n\t(dump_subexp_body_f): Likewise.\n\t* fortran-operator.def (OP_F77_UNDETERMINED_ARGLIST): Move\n\tdeclaration of this operation to here.\n\t* parse.c (operator_length_standard): OP_F77_UNDETERMINED_ARGLIST\n\tsupport moved to operator_length_f.\n\t* parser-defs.h (dump_subexp_body_funcall): Declare.\n\t(print_subexp_funcall): Declare.\n\t* std-operator.def (OP_F77_UNDETERMINED_ARGLIST): Moved to\n\tfortran-operator.def.",
    "tree": {
      "sha": "66e445599cf0dbd55335407b53133901c35fefbe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66e445599cf0dbd55335407b53133901c35fefbe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6d81691950f8c4be4a49a85a672255c140e82468",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d81691950f8c4be4a49a85a672255c140e82468",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6d81691950f8c4be4a49a85a672255c140e82468",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d81691950f8c4be4a49a85a672255c140e82468/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c37706a511209f6a92d887812c14e860c3bd0a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c37706a511209f6a92d887812c14e860c3bd0a0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c37706a511209f6a92d887812c14e860c3bd0a0"
    }
  ],
  "stats": {
    "total": 587,
    "additions": 339,
    "deletions": 248
  },
  "files": [
    {
      "sha": "ce820507e3c011032f733c4014b5e295dcad20b9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -1,3 +1,40 @@\n+2020-09-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* eval.c: Remove 'f-lang.h' include.\n+\t(value_f90_subarray): Moved to f-lang.c.\n+\t(eval_call): Renamed to...\n+\t(evaluate_subexp_do_call): ...this, is no longer static, header\n+\tcomment moved into header file.\n+\t(evaluate_funcall): Update call to eval_call.\n+\t(skip_undetermined_arglist): Moved to f-lang.c.\n+\t(fortran_value_subarray): Likewise.\n+\t(evaluate_subexp_standard): OP_F77_UNDETERMINED_ARGLIST handling\n+\tmoved to evaluate_subexp_f.\n+\t(calc_f77_array_dims): Moved to f-lang.c\n+\t* expprint.c (print_subexp_funcall): New function.\n+\t(print_subexp_standard): OP_F77_UNDETERMINED_ARGLIST handling\n+\tmoved to print_subexp_f, OP_FUNCALL uses new function.\n+\t(dump_subexp_body_funcall): New function.\n+\t(dump_subexp_body_standard): OP_F77_UNDETERMINED_ARGLIST handling\n+\tmoved to dump_subexp_f, OP_FUNCALL uses new function.\n+\t* expression.h (evaluate_subexp_do_call): Declare.\n+\t* f-lang.c (value_f90_subarray): Moved from eval.c.\n+\t(skip_undetermined_arglist): Likewise.\n+\t(calc_f77_array_dims): Likewise.\n+\t(fortran_value_subarray): Likewise.\n+\t(evaluate_subexp_f): Add OP_F77_UNDETERMINED_ARGLIST support.\n+\t(operator_length_f): Likewise.\n+\t(print_subexp_f): Likewise.\n+\t(dump_subexp_body_f): Likewise.\n+\t* fortran-operator.def (OP_F77_UNDETERMINED_ARGLIST): Move\n+\tdeclaration of this operation to here.\n+\t* parse.c (operator_length_standard): OP_F77_UNDETERMINED_ARGLIST\n+\tsupport moved to operator_length_f.\n+\t* parser-defs.h (dump_subexp_body_funcall): Declare.\n+\t(print_subexp_funcall): Declare.\n+\t* std-operator.def (OP_F77_UNDETERMINED_ARGLIST): Moved to\n+\tfortran-operator.def.\n+\n 2020-09-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* eval.c (fortran_value_subarray): New function, content is taken"
    },
    {
      "sha": "2a1fd98caed60ae4e2c34fbd142cff536b615309",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 8,
      "deletions": 215,
      "changes": 223,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -26,7 +26,6 @@\n #include \"frame.h\"\n #include \"gdbthread.h\"\n #include \"language.h\"\t\t/* For CAST_IS_CONVERSION.  */\n-#include \"f-lang.h\"\t\t/* For array bound stuff.  */\n #include \"cp-abi.h\"\n #include \"infcall.h\"\n #include \"objc-lang.h\"\n@@ -371,32 +370,6 @@ init_array_element (struct value *array, struct value *element,\n   return index;\n }\n \n-static struct value *\n-value_f90_subarray (struct value *array,\n-\t\t    struct expression *exp, int *pos, enum noside noside)\n-{\n-  int pc = (*pos) + 1;\n-  LONGEST low_bound, high_bound;\n-  struct type *range = check_typedef (value_type (array)->index_type ());\n-  enum range_type range_type\n-    = (enum range_type) longest_to_int (exp->elts[pc].longconst);\n- \n-  *pos += 3;\n-\n-  if (range_type == LOW_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n-    low_bound = range->bounds ()->low.const_val ();\n-  else\n-    low_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n-\n-  if (range_type == HIGH_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n-    high_bound = range->bounds ()->high.const_val ();\n-  else\n-    high_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n-\n-  return value_slice (array, low_bound, high_bound - low_bound + 1);\n-}\n-\n-\n /* Promote value ARG1 as appropriate before performing a unary operation\n    on this argument.\n    If the result is not appropriate for any particular language then it\n@@ -749,17 +722,13 @@ eval_skip_value (expression *exp)\n   return value_from_longest (builtin_type (exp->gdbarch)->builtin_int, 1);\n }\n \n-/* Evaluate a function call.  The function to be called is in\n-   ARGVEC[0] and the arguments passed to the function are in\n-   ARGVEC[1..NARGS].  FUNCTION_NAME is the name of the function, if\n-   known.  DEFAULT_RETURN_TYPE is used as the function's return type\n-   if the return type is unknown.  */\n+/* See expression.h.  */\n \n-static value *\n-eval_call (expression *exp, enum noside noside,\n-\t   int nargs, value **argvec,\n-\t   const char *function_name,\n-\t   type *default_return_type)\n+value *\n+evaluate_subexp_do_call (expression *exp, enum noside noside,\n+\t\t\t int nargs, value **argvec,\n+\t\t\t const char *function_name,\n+\t\t\t type *default_return_type)\n {\n   if (argvec[0] == NULL)\n     error (_(\"Cannot evaluate function -- may be inlined\"));\n@@ -1230,20 +1199,8 @@ evaluate_funcall (type *expect_type, expression *exp, int *pos,\n       /* Nothing to be done; argvec already correctly set up.  */\n     }\n \n-  return eval_call (exp, noside, nargs, argvec, var_func_name, expect_type);\n-}\n-\n-/* Helper for skipping all the arguments in an undetermined argument list.\n-   This function was designed for use in the OP_F77_UNDETERMINED_ARGLIST\n-   case of evaluate_subexp_standard as multiple, but not all, code paths\n-   require a generic skip.  */\n-\n-static void\n-skip_undetermined_arglist (int nargs, struct expression *exp, int *pos,\n-\t\t\t   enum noside noside)\n-{\n-  for (int i = 0; i < nargs; ++i)\n-    evaluate_subexp (nullptr, exp, pos, noside);\n+  return evaluate_subexp_do_call (exp, noside, nargs, argvec,\n+\t\t\t\t  var_func_name, expect_type);\n }\n \n /* Return true if type is integral or reference to integral */\n@@ -1260,67 +1217,6 @@ is_integral_or_integral_reference (struct type *type)\n \t  && is_integral_type (TYPE_TARGET_TYPE (type)));\n }\n \n-/* Called from evaluate_subexp_standard to perform array indexing, and\n-   sub-range extraction, for Fortran.  As well as arrays this function\n-   also handles strings as they can be treated like arrays of characters.\n-   ARRAY is the array or string being accessed.  EXP, POS, and NOSIDE are\n-   as for evaluate_subexp_standard, and NARGS is the number of arguments\n-   in this access (e.g. 'array (1,2,3)' would be NARGS 3).  */\n-\n-static struct value *\n-fortran_value_subarray (struct value *array, struct expression *exp,\n-\t\t\tint *pos, int nargs, enum noside noside)\n-{\n-  if (exp->elts[*pos].opcode == OP_RANGE)\n-    return value_f90_subarray (array, exp, pos, noside);\n-\n-  if (noside == EVAL_SKIP)\n-    {\n-      skip_undetermined_arglist (nargs, exp, pos, noside);\n-      /* Return the dummy value with the correct type.  */\n-      return array;\n-    }\n-\n-  LONGEST subscript_array[MAX_FORTRAN_DIMS];\n-  int ndimensions = 1;\n-  struct type *type = check_typedef (value_type (array));\n-\n-  if (nargs > MAX_FORTRAN_DIMS)\n-    error (_(\"Too many subscripts for F77 (%d Max)\"), MAX_FORTRAN_DIMS);\n-\n-  ndimensions = calc_f77_array_dims (type);\n-\n-  if (nargs != ndimensions)\n-    error (_(\"Wrong number of subscripts\"));\n-\n-  gdb_assert (nargs > 0);\n-\n-  /* Now that we know we have a legal array subscript expression let us\n-     actually find out where this element exists in the array.  */\n-\n-  /* Take array indices left to right.  */\n-  for (int i = 0; i < nargs; i++)\n-    {\n-      /* Evaluate each subscript; it must be a legal integer in F77.  */\n-      value *arg2 = evaluate_subexp_with_coercion (exp, pos, noside);\n-\n-      /* Fill in the subscript array.  */\n-      subscript_array[i] = value_as_long (arg2);\n-    }\n-\n-  /* Internal type of array is arranged right to left.  */\n-  for (int i = nargs; i > 0; i--)\n-    {\n-      struct type *array_type = check_typedef (value_type (array));\n-      LONGEST index = subscript_array[i - 1];\n-\n-      array = value_subscripted_rvalue (array, index,\n-\t\t\t\t\tf77_get_lowerbound (array_type));\n-    }\n-\n-  return array;\n-}\n-\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -1335,7 +1231,6 @@ evaluate_subexp_standard (struct type *expect_type,\n   struct type *type;\n   int nargs;\n   struct value **argvec;\n-  int code;\n   int ix;\n   long mem_offset;\n   struct type **arg_types;\n@@ -1976,84 +1871,6 @@ evaluate_subexp_standard (struct type *expect_type,\n     case OP_FUNCALL:\n       return evaluate_funcall (expect_type, exp, pos, noside);\n \n-    case OP_F77_UNDETERMINED_ARGLIST:\n-\n-      /* Remember that in F77, functions, substring ops and \n-         array subscript operations cannot be disambiguated \n-         at parse time.  We have made all array subscript operations, \n-         substring operations as well as function calls  come here \n-         and we now have to discover what the heck this thing actually was.\n-         If it is a function, we process just as if we got an OP_FUNCALL.  */\n-\n-      nargs = longest_to_int (exp->elts[pc + 1].longconst);\n-      (*pos) += 2;\n-\n-      /* First determine the type code we are dealing with.  */\n-      arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n-      type = check_typedef (value_type (arg1));\n-      code = type->code ();\n-\n-      if (code == TYPE_CODE_PTR)\n-\t{\n-\t  /* Fortran always passes variable to subroutines as pointer.\n-\t     So we need to look into its target type to see if it is\n-\t     array, string or function.  If it is, we need to switch\n-\t     to the target value the original one points to.  */ \n-\t  struct type *target_type = check_typedef (TYPE_TARGET_TYPE (type));\n-\n-\t  if (target_type->code () == TYPE_CODE_ARRAY\n-\t      || target_type->code () == TYPE_CODE_STRING\n-\t      || target_type->code () == TYPE_CODE_FUNC)\n-\t    {\n-\t      arg1 = value_ind (arg1);\n-\t      type = check_typedef (value_type (arg1));\n-\t      code = type->code ();\n-\t    }\n-\t} \n-\n-      switch (code)\n-\t{\n-\tcase TYPE_CODE_ARRAY:\n-\tcase TYPE_CODE_STRING:\n-\t  return fortran_value_subarray (arg1, exp, pos, nargs, noside);\n-\n-\tcase TYPE_CODE_PTR:\n-\tcase TYPE_CODE_FUNC:\n-\tcase TYPE_CODE_INTERNAL_FUNCTION:\n-\t  /* It's a function call.  */\n-\t  /* Allocate arg vector, including space for the function to be\n-\t     called in argvec[0] and a terminating NULL.  */\n-\t  argvec = (struct value **)\n-\t    alloca (sizeof (struct value *) * (nargs + 2));\n-\t  argvec[0] = arg1;\n-\t  tem = 1;\n-\t  for (; tem <= nargs; tem++)\n-\t    {\n-\t      argvec[tem] = evaluate_subexp_with_coercion (exp, pos, noside);\n-\t      /* Arguments in Fortran are passed by address.  Coerce the\n-\t\t arguments here rather than in value_arg_coerce as otherwise\n-\t\t the call to malloc to place the non-lvalue parameters in\n-\t\t target memory is hit by this Fortran specific logic.  This\n-\t\t results in malloc being called with a pointer to an integer\n-\t\t followed by an attempt to malloc the arguments to malloc in\n-\t\t target memory.  Infinite recursion ensues.  */\n-\t      if (code == TYPE_CODE_PTR || code == TYPE_CODE_FUNC)\n-\t\t{\n-\t\t  bool is_artificial\n-\t\t    = TYPE_FIELD_ARTIFICIAL (value_type (arg1), tem - 1);\n-\t\t  argvec[tem] = fortran_argument_convert (argvec[tem],\n-\t\t\t\t\t\t\t  is_artificial);\n-\t\t}\n-\t    }\n-\t  argvec[tem] = 0;\t/* signal end of arglist */\n-\t  if (noside == EVAL_SKIP)\n-\t    return eval_skip_value (exp);\n-\t  return eval_call (exp, noside, nargs, argvec, NULL, expect_type);\n-\n-\tdefault:\n-\t  error (_(\"Cannot perform substring on this type\"));\n-\t}\n-\n     case OP_COMPLEX:\n       /* We have a complex number, There should be 2 floating \n          point numbers that compose it.  */\n@@ -3346,27 +3163,3 @@ parse_and_eval_type (char *p, int length)\n     error (_(\"Internal error in eval_type.\"));\n   return expr->elts[1].type;\n }\n-\n-/* Return the number of dimensions for a Fortran array or string.  */\n-\n-int\n-calc_f77_array_dims (struct type *array_type)\n-{\n-  int ndimen = 1;\n-  struct type *tmp_type;\n-\n-  if ((array_type->code () == TYPE_CODE_STRING))\n-    return 1;\n-\n-  if ((array_type->code () != TYPE_CODE_ARRAY))\n-    error (_(\"Can't get dimensions for a non-array type\"));\n-\n-  tmp_type = array_type;\n-\n-  while ((tmp_type = TYPE_TARGET_TYPE (tmp_type)))\n-    {\n-      if (tmp_type->code () == TYPE_CODE_ARRAY)\n-\t++ndimen;\n-    }\n-  return ndimen;\n-}"
    },
    {
      "sha": "d7d7c871bddd022e248f7620550eb3dbd9ae3cb4",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 37,
      "deletions": 24,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -54,6 +54,25 @@ print_subexp (struct expression *exp, int *pos,\n \t\t\t\t\t\t       prec);\n }\n \n+/* See parser-defs.h.  */\n+\n+void\n+print_subexp_funcall (struct expression *exp, int *pos,\n+\t\t      struct ui_file *stream)\n+{\n+  (*pos) += 2;\n+  unsigned nargs = longest_to_int (exp->elts[*pos].longconst);\n+  print_subexp (exp, pos, stream, PREC_SUFFIX);\n+  fputs_filtered (\" (\", stream);\n+  for (unsigned tem = 0; tem < nargs; tem++)\n+    {\n+      if (tem != 0)\n+\tfputs_filtered (\", \", stream);\n+      print_subexp (exp, pos, stream, PREC_ABOVE_COMMA);\n+    }\n+  fputs_filtered (\")\", stream);\n+}\n+\n /* Standard implementation of print_subexp for use in language_defn\n    vectors.  */\n void\n@@ -188,18 +207,7 @@ print_subexp_standard (struct expression *exp, int *pos,\n       return;\n \n     case OP_FUNCALL:\n-    case OP_F77_UNDETERMINED_ARGLIST:\n-      (*pos) += 2;\n-      nargs = longest_to_int (exp->elts[pc + 1].longconst);\n-      print_subexp (exp, pos, stream, PREC_SUFFIX);\n-      fputs_filtered (\" (\", stream);\n-      for (tem = 0; tem < nargs; tem++)\n-\t{\n-\t  if (tem != 0)\n-\t    fputs_filtered (\", \", stream);\n-\t  print_subexp (exp, pos, stream, PREC_ABOVE_COMMA);\n-\t}\n-      fputs_filtered (\")\", stream);\n+      print_subexp_funcall (exp, pos, stream);\n       return;\n \n     case OP_NAME:\n@@ -798,6 +806,22 @@ dump_subexp_body (struct expression *exp, struct ui_file *stream, int elt)\n \t\t\t\t\t\t\t\t  elt);\n }\n \n+/* See parser-defs.h.  */\n+\n+int\n+dump_subexp_body_funcall (struct expression *exp,\n+\t\t\t  struct ui_file *stream, int elt)\n+{\n+  int nargs = longest_to_int (exp->elts[elt].longconst);\n+  fprintf_filtered (stream, \"Number of args: %d\", nargs);\n+  elt += 2;\n+\n+  for (int i = 1; i <= nargs + 1; i++)\n+    elt = dump_subexp (exp, stream, elt);\n+\n+  return elt;\n+}\n+\n /* Default value for subexp_body in exp_descriptor vector.  */\n \n int\n@@ -933,18 +957,7 @@ dump_subexp_body_standard (struct expression *exp,\n       elt += 2;\n       break;\n     case OP_FUNCALL:\n-    case OP_F77_UNDETERMINED_ARGLIST:\n-      {\n-\tint i, nargs;\n-\n-\tnargs = longest_to_int (exp->elts[elt].longconst);\n-\n-\tfprintf_filtered (stream, \"Number of args: %d\", nargs);\n-\telt += 2;\n-\n-\tfor (i = 1; i <= nargs + 1; i++)\n-\t  elt = dump_subexp (exp, stream, elt);\n-      }\n+      elt = dump_subexp_body_funcall (exp, stream, elt);\n       break;\n     case OP_ARRAY:\n       {"
    },
    {
      "sha": "5af10f05db186803daeca037efee204116220bc9",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -155,6 +155,18 @@ enum noside\n extern struct value *evaluate_subexp_standard\n   (struct type *, struct expression *, int *, enum noside);\n \n+/* Evaluate a function call.  The function to be called is in ARGVEC[0] and\n+   the arguments passed to the function are in ARGVEC[1..NARGS].\n+   FUNCTION_NAME is the name of the function, if known.\n+   DEFAULT_RETURN_TYPE is used as the function's return type if the return\n+   type is unknown.  */\n+\n+extern struct value *evaluate_subexp_do_call (expression *exp,\n+\t\t\t\t\t      enum noside noside,\n+\t\t\t\t\t      int nargs, value **argvec,\n+\t\t\t\t\t      const char *function_name,\n+\t\t\t\t\t      type *default_return_type);\n+\n /* From expprint.c */\n \n extern void print_expression (struct expression *, struct ui_file *);"
    },
    {
      "sha": "e13097baee453be7d98a8444991ba65efe5a0a17",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 221,
      "deletions": 0,
      "changes": 221,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -114,6 +114,134 @@ enum f_primitive_types {\n   nr_f_primitive_types\n };\n \n+/* Called from fortran_value_subarray to take a slice of an array or a\n+   string.  ARRAY is the array or string to be accessed.  EXP, POS, and\n+   NOSIDE are as for evaluate_subexp_standard.  Return a value that is a\n+   slice of the array.  */\n+\n+static struct value *\n+value_f90_subarray (struct value *array,\n+\t\t    struct expression *exp, int *pos, enum noside noside)\n+{\n+  int pc = (*pos) + 1;\n+  LONGEST low_bound, high_bound;\n+  struct type *range = check_typedef (value_type (array)->index_type ());\n+  enum range_type range_type\n+    = (enum range_type) longest_to_int (exp->elts[pc].longconst);\n+\n+  *pos += 3;\n+\n+  if (range_type == LOW_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n+    low_bound = range->bounds ()->low.const_val ();\n+  else\n+    low_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n+\n+  if (range_type == HIGH_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n+    high_bound = range->bounds ()->high.const_val ();\n+  else\n+    high_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n+\n+  return value_slice (array, low_bound, high_bound - low_bound + 1);\n+}\n+\n+/* Helper for skipping all the arguments in an undetermined argument list.\n+   This function was designed for use in the OP_F77_UNDETERMINED_ARGLIST\n+   case of evaluate_subexp_standard as multiple, but not all, code paths\n+   require a generic skip.  */\n+\n+static void\n+skip_undetermined_arglist (int nargs, struct expression *exp, int *pos,\n+\t\t\t   enum noside noside)\n+{\n+  for (int i = 0; i < nargs; ++i)\n+    evaluate_subexp (nullptr, exp, pos, noside);\n+}\n+\n+/* Return the number of dimensions for a Fortran array or string.  */\n+\n+int\n+calc_f77_array_dims (struct type *array_type)\n+{\n+  int ndimen = 1;\n+  struct type *tmp_type;\n+\n+  if ((array_type->code () == TYPE_CODE_STRING))\n+    return 1;\n+\n+  if ((array_type->code () != TYPE_CODE_ARRAY))\n+    error (_(\"Can't get dimensions for a non-array type\"));\n+\n+  tmp_type = array_type;\n+\n+  while ((tmp_type = TYPE_TARGET_TYPE (tmp_type)))\n+    {\n+      if (tmp_type->code () == TYPE_CODE_ARRAY)\n+\t++ndimen;\n+    }\n+  return ndimen;\n+}\n+\n+/* Called from evaluate_subexp_standard to perform array indexing, and\n+   sub-range extraction, for Fortran.  As well as arrays this function\n+   also handles strings as they can be treated like arrays of characters.\n+   ARRAY is the array or string being accessed.  EXP, POS, and NOSIDE are\n+   as for evaluate_subexp_standard, and NARGS is the number of arguments\n+   in this access (e.g. 'array (1,2,3)' would be NARGS 3).  */\n+\n+static struct value *\n+fortran_value_subarray (struct value *array, struct expression *exp,\n+\t\t\tint *pos, int nargs, enum noside noside)\n+{\n+  if (exp->elts[*pos].opcode == OP_RANGE)\n+    return value_f90_subarray (array, exp, pos, noside);\n+\n+  if (noside == EVAL_SKIP)\n+    {\n+      skip_undetermined_arglist (nargs, exp, pos, noside);\n+      /* Return the dummy value with the correct type.  */\n+      return array;\n+    }\n+\n+  LONGEST subscript_array[MAX_FORTRAN_DIMS];\n+  int ndimensions = 1;\n+  struct type *type = check_typedef (value_type (array));\n+\n+  if (nargs > MAX_FORTRAN_DIMS)\n+    error (_(\"Too many subscripts for F77 (%d Max)\"), MAX_FORTRAN_DIMS);\n+\n+  ndimensions = calc_f77_array_dims (type);\n+\n+  if (nargs != ndimensions)\n+    error (_(\"Wrong number of subscripts\"));\n+\n+  gdb_assert (nargs > 0);\n+\n+  /* Now that we know we have a legal array subscript expression let us\n+     actually find out where this element exists in the array.  */\n+\n+  /* Take array indices left to right.  */\n+  for (int i = 0; i < nargs; i++)\n+    {\n+      /* Evaluate each subscript; it must be a legal integer in F77.  */\n+      value *arg2 = evaluate_subexp_with_coercion (exp, pos, noside);\n+\n+      /* Fill in the subscript array.  */\n+      subscript_array[i] = value_as_long (arg2);\n+    }\n+\n+  /* Internal type of array is arranged right to left.  */\n+  for (int i = nargs; i > 0; i--)\n+    {\n+      struct type *array_type = check_typedef (value_type (array));\n+      LONGEST index = subscript_array[i - 1];\n+\n+      array = value_subscripted_rvalue (array, index,\n+\t\t\t\t\tf77_get_lowerbound (array_type));\n+    }\n+\n+  return array;\n+}\n+\n /* Special expression evaluation cases for Fortran.  */\n \n static struct value *\n@@ -285,6 +413,87 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \t\t\t\t   TYPE_LENGTH (type));\n       return value_from_longest (builtin_type (exp->gdbarch)->builtin_int,\n \t\t\t\t TYPE_LENGTH (TYPE_TARGET_TYPE (type)));\n+\n+\n+    case OP_F77_UNDETERMINED_ARGLIST:\n+      /* Remember that in F77, functions, substring ops and array subscript\n+         operations cannot be disambiguated at parse time.  We have made\n+         all array subscript operations, substring operations as well as\n+         function calls come here and we now have to discover what the heck\n+         this thing actually was.  If it is a function, we process just as\n+         if we got an OP_FUNCALL.  */\n+      int nargs = longest_to_int (exp->elts[pc + 1].longconst);\n+      (*pos) += 2;\n+\n+      /* First determine the type code we are dealing with.  */\n+      arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n+      type = check_typedef (value_type (arg1));\n+      enum type_code code = type->code ();\n+\n+      if (code == TYPE_CODE_PTR)\n+\t{\n+\t  /* Fortran always passes variable to subroutines as pointer.\n+\t     So we need to look into its target type to see if it is\n+\t     array, string or function.  If it is, we need to switch\n+\t     to the target value the original one points to.  */\n+\t  struct type *target_type = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+\t  if (target_type->code () == TYPE_CODE_ARRAY\n+\t      || target_type->code () == TYPE_CODE_STRING\n+\t      || target_type->code () == TYPE_CODE_FUNC)\n+\t    {\n+\t      arg1 = value_ind (arg1);\n+\t      type = check_typedef (value_type (arg1));\n+\t      code = type->code ();\n+\t    }\n+\t}\n+\n+      switch (code)\n+\t{\n+\tcase TYPE_CODE_ARRAY:\n+\tcase TYPE_CODE_STRING:\n+\t  return fortran_value_subarray (arg1, exp, pos, nargs, noside);\n+\n+\tcase TYPE_CODE_PTR:\n+\tcase TYPE_CODE_FUNC:\n+\tcase TYPE_CODE_INTERNAL_FUNCTION:\n+\t  {\n+\t    /* It's a function call.  Allocate arg vector, including\n+\t    space for the function to be called in argvec[0] and a\n+\t    termination NULL.  */\n+\t    struct value **argvec = (struct value **)\n+\t      alloca (sizeof (struct value *) * (nargs + 2));\n+\t    argvec[0] = arg1;\n+\t    int tem = 1;\n+\t    for (; tem <= nargs; tem++)\n+\t      {\n+\t\targvec[tem] = evaluate_subexp_with_coercion (exp, pos, noside);\n+\t\t/* Arguments in Fortran are passed by address.  Coerce the\n+\t\t   arguments here rather than in value_arg_coerce as\n+\t\t   otherwise the call to malloc to place the non-lvalue\n+\t\t   parameters in target memory is hit by this Fortran\n+\t\t   specific logic.  This results in malloc being called\n+\t\t   with a pointer to an integer followed by an attempt to\n+\t\t   malloc the arguments to malloc in target memory.\n+\t\t   Infinite recursion ensues.  */\n+\t\tif (code == TYPE_CODE_PTR || code == TYPE_CODE_FUNC)\n+\t\t  {\n+\t\t    bool is_artificial\n+\t\t      = TYPE_FIELD_ARTIFICIAL (value_type (arg1), tem - 1);\n+\t\t    argvec[tem] = fortran_argument_convert (argvec[tem],\n+\t\t\t\t\t\t\t    is_artificial);\n+\t\t  }\n+\t      }\n+\t    argvec[tem] = 0;\t/* signal end of arglist */\n+\t    if (noside == EVAL_SKIP)\n+\t      return eval_skip_value (exp);\n+\t    return evaluate_subexp_do_call (exp, noside, nargs, argvec, NULL,\n+\t\t\t\t\t    expect_type);\n+\t  }\n+\n+\tdefault:\n+\t  error (_(\"Cannot perform substring on this type\"));\n+\t}\n     }\n \n   /* Should be unreachable.  */\n@@ -318,6 +527,11 @@ operator_length_f (const struct expression *exp, int pc, int *oplenp,\n       oplen = 1;\n       args = 2;\n       break;\n+\n+    case OP_F77_UNDETERMINED_ARGLIST:\n+      oplen = 3;\n+      args = 1 + longest_to_int (exp->elts[pc - 2].longconst);\n+      break;\n     }\n \n   *oplenp = oplen;\n@@ -390,6 +604,10 @@ print_subexp_f (struct expression *exp, int *pos,\n     case BINOP_FORTRAN_MODULO:\n       print_binop_subexp_f (exp, pos, stream, prec, \"MODULO\");\n       return;\n+\n+    case OP_F77_UNDETERMINED_ARGLIST:\n+      print_subexp_funcall (exp, pos, stream);\n+      return;\n     }\n }\n \n@@ -432,6 +650,9 @@ dump_subexp_body_f (struct expression *exp,\n     case BINOP_FORTRAN_MODULO:\n       operator_length_f (exp, (elt + 1), &oplen, &nargs);\n       break;\n+\n+    case OP_F77_UNDETERMINED_ARGLIST:\n+      return dump_subexp_body_funcall (exp, stream, elt);\n     }\n \n   elt += oplen;"
    },
    {
      "sha": "bfdbc40171186b6d52e794325555f7933f6489da",
      "filename": "gdb/fortran-operator.def",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/fortran-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/fortran-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fortran-operator.def?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -17,6 +17,14 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+/* This is EXACTLY like OP_FUNCALL but is semantically different.\n+   In F77, array subscript expressions, substring expressions and\n+   function calls are all exactly the same syntactically.  They\n+   may only be disambiguated at runtime.  Thus this operator,\n+   which indicates that we have found something of the form\n+   <name> ( <stuff> ).  */\n+OP (OP_F77_UNDETERMINED_ARGLIST)\n+\n /* Single operand builtins.  */\n OP (UNOP_FORTRAN_KIND)\n OP (UNOP_FORTRAN_FLOOR)"
    },
    {
      "sha": "6b9541bfdc2cf8441889dfd5fc5cc62263132e48",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -817,7 +817,6 @@ operator_length_standard (const struct expression *expr, int endpos,\n       break;\n \n     case OP_FUNCALL:\n-    case OP_F77_UNDETERMINED_ARGLIST:\n       oplen = 3;\n       args = 1 + longest_to_int (expr->elts[endpos - 2].longconst);\n       break;"
    },
    {
      "sha": "bc6fc2f9ba37e891bfedcc4fe585bf18eb5cdd89",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -338,6 +338,13 @@ extern int dump_subexp (struct expression *, struct ui_file *, int);\n extern int dump_subexp_body_standard (struct expression *, \n \t\t\t\t      struct ui_file *, int);\n \n+/* Dump (to STREAM) a function call like expression at position ELT in the\n+   expression array EXP.  Return a new value for ELT just after the\n+   function call expression.  */\n+\n+extern int dump_subexp_body_funcall (struct expression *exp,\n+\t\t\t\t     struct ui_file *stream, int elt);\n+\n extern void operator_length (const struct expression *, int, int *, int *);\n \n extern void operator_length_standard (const struct expression *, int, int *,\n@@ -440,6 +447,15 @@ extern void print_subexp (struct expression *, int *, struct ui_file *,\n extern void print_subexp_standard (struct expression *, int *, \n \t\t\t\t   struct ui_file *, enum precedence);\n \n+/* Print a function call like expression to STREAM.  This is called as a\n+   helper function by which point the expression node identifying this as a\n+   function call has already been stripped off and POS should point to the\n+   number of function call arguments.  EXP is the object containing the\n+   list of expression elements.  */\n+\n+extern void print_subexp_funcall (struct expression *exp, int *pos,\n+\t\t\t\t  struct ui_file *stream);\n+\n /* Function used to avoid direct calls to fprintf\n    in the code generated by the bison parser.  */\n "
    },
    {
      "sha": "6f90875f477654ad5016802fd02f0d44cf528218",
      "filename": "gdb/std-operator.def",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d81691950f8c4be4a49a85a672255c140e82468/gdb/std-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d81691950f8c4be4a49a85a672255c140e82468/gdb/std-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/std-operator.def?ref=6d81691950f8c4be4a49a85a672255c140e82468",
      "patch": "@@ -168,14 +168,6 @@ OP (OP_FUNCALL)\n    pointer.  This is an Objective C message.  */\n OP (OP_OBJC_MSGCALL)\n \n-/* This is EXACTLY like OP_FUNCALL but is semantically different.\n-   In F77, array subscript expressions, substring expressions and\n-   function calls are all exactly the same syntactically.  They\n-   may only be disambiguated at runtime.  Thus this operator,\n-   which indicates that we have found something of the form\n-   <name> ( <stuff> ).  */\n-OP (OP_F77_UNDETERMINED_ARGLIST)\n-\n /* OP_COMPLEX takes a type in the following element, followed by another\n    OP_COMPLEX, making three exp_elements.  It is followed by two double\n    args, and converts them into a complex number of the given type.  */"
    }
  ]
}