{
  "sha": "330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzMwZjFkMzgyNWRhYTBkOWU4ZDZjNTRmNGZjZjZmYTU4MDBlNTY2NA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-09T16:07:47Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-09T17:27:51Z"
    },
    "message": "gdb: rank an lvalue argument incompatible for an rvalue parameter\n\nPassing an lvalue argument to a function that takes an rvalue parameter\nis not allowed per C++ rules.  Consider this function:\n\n    int g (int &&x) { return x; }\n\nCalling g as in\n\n    int i = 5;\n    int j = g (i);\n\nis illegal.  For instance, GCC 9.2.1 yields\n\n~~~\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:6:14: error: cannot bind rvalue reference of type \u2018int&&\u2019 to\nlvalue of type \u2018int\u2019\n    6 |   int j = g (i);\n      |              ^\n~~~\n\nGDB currently allows this function call:\n\n~~~\n(gdb) print g(i)\n$1 = 5\n~~~\n\nFix this by ranking an lvalue argument incompatible with an rvalue\nparameter.  The behavior after this patch is:\n\n~~~\n(gdb) print g(i)\nCannot resolve function g to any overloaded instance\n~~~\n\nTested with GCC 9.2.1.\n\ngdb/ChangeLog:\n2019-12-09  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* gdbtypes.c (rank_one_type): Return INCOMPATIBLE_TYPE_BADNESS\n\twhen ranking an lvalue argument for an rvalue parameter.\n\ngdb/testsuite/ChangeLog:\n2019-12-09  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* gdb.cp/rvalue-ref-overload.cc (g): New function that takes\n\tan rvalue parameter.\n\t* gdb.cp/rvalue-ref-overload.exp: Test calling it with an lvalue\n\tparameter.\n\nChange-Id: I4a6dfc7dac63efa1e3b9f8f391e4b736fbdccdc1",
    "tree": {
      "sha": "af9082e08796d7fc0de30d257f67d91a30f6da49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/af9082e08796d7fc0de30d257f67d91a30f6da49"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b43315e206362a09ae70da71a6631bb5e2770554",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b43315e206362a09ae70da71a6631bb5e2770554",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b43315e206362a09ae70da71a6631bb5e2770554"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 30,
    "deletions": 5
  },
  "files": [
    {
      "sha": "329080e645cbc025f8ad3c2f4d1697188bcd1594",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-09  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* gdbtypes.c (rank_one_type): Return INCOMPATIBLE_TYPE_BADNESS\n+\twhen ranking an lvalue argument for an rvalue parameter.\n+\n 2019-12-08  Wataru Ashihara  <wataash@wataash.com>\n \n \t* darwin-nat.c (darwin_nat_target::create_inferior): Fix"
    },
    {
      "sha": "0896f7189fdcdfdd1043ff5e4d6c212a4bd90f89",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "patch": "@@ -4303,12 +4303,9 @@ rank_one_type (struct type *parm, struct type *arg, struct value *value)\n \t}\n       else\n \t{\n-\t  /* Lvalues should prefer lvalue overloads.  */\n+\t  /* It's illegal to pass an lvalue as an rvalue.  */\n \t  if (TYPE_CODE (parm) == TYPE_CODE_RVALUE_REF)\n-\t    {\n-\t      rank.subrank = REFERENCE_CONVERSION_RVALUE;\n-\t      return sum_ranks (rank, REFERENCE_CONVERSION_BADNESS);\n-\t    }\n+\t    return INCOMPATIBLE_TYPE_BADNESS;\n \t}\n     }\n "
    },
    {
      "sha": "123344ffd8e1f6b9f5112a40e01f77e77886883c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-09  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* gdb.cp/rvalue-ref-overload.cc (g): New function that takes\n+\tan rvalue parameter.\n+\t* gdb.cp/rvalue-ref-overload.exp: Test calling it with an lvalue\n+\tparameter.\n+\n 2019-12-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.mi/mi-fortran-modules.exp: Add patterns to skip system"
    },
    {
      "sha": "30634a9c36c44d333a228c0d578503ebb5740266",
      "filename": "gdb/testsuite/gdb.cp/rvalue-ref-overload.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/testsuite/gdb.cp/rvalue-ref-overload.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/testsuite/gdb.cp/rvalue-ref-overload.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/rvalue-ref-overload.cc?ref=330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "patch": "@@ -62,6 +62,12 @@ f (int &&x)\n   return 3;\n }\n \n+static int\n+g (int &&x)\n+{\n+  return x;\n+}\n+\n int\n main ()\n {\n@@ -78,6 +84,12 @@ main ()\n   int test_const // = 3\n     = foo_rr_instance1.overloadConst (arg);\n \n+  /* The statement below is illegal: cannot bind rvalue reference of\n+     type 'int&&' to lvalue of type 'int'.\n+\n+     result = g (i); */\n+  result = g (5); // this is OK\n+\n   marker1 (); // marker1-returns-here\n   return result;\n }"
    },
    {
      "sha": "cac3d4ba5887cabba63375390c6867dc44d15e8d",
      "filename": "gdb/testsuite/gdb.cp/rvalue-ref-overload.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/testsuite/gdb.cp/rvalue-ref-overload.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664/gdb/testsuite/gdb.cp/rvalue-ref-overload.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/rvalue-ref-overload.exp?ref=330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "patch": "@@ -66,3 +66,7 @@ gdb_test \"print f (ci)\" \"2\" \"lvalue reference to const overload\"\n \n setup_kfail \"c++/15372\" \"*-*-*\"\n gdb_test \"print f (3)\" \"3\" \"rvalue reference overload\"\n+\n+gdb_test \"print g (i)\" \\\n+    \"Cannot resolve function g to any overloaded instance\" \\\n+    \"passing lvalue arg to rvalue parameter\""
    }
  ]
}