{
  "sha": "41fc454c915057d9c5536617370c5eb2a5f71323",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDFmYzQ1NGM5MTUwNTdkOWM1NTM2NjE3MzcwYzVlYjJhNWY3MTMyMw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-03T15:57:48Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-03T15:58:30Z"
    },
    "message": "Make gdb::option::complete_options save processed arguments too\n\nCurrently, gdb::option::complete_options just discards any processed\noption argument, because no completer needs that data.\n\nWhen completing \"pipe -d XXX gdbcmd XXX\" however, the completer needs\nto know about -d's argument (XXX), in order to know where input is\nalready past the gdb command and the delimiter.\n\nIn this commit, the fix for that is the factoring out of the\nsave_option_value_in_ctx function and calling it in complete_options.\n\nFor testing, this makes \"maint show test-options-completion-result\"\nshow the processed options too, like what the \"maint test-options\"\nsubcommands output when run.  Then, of course, gdb.base/options.exp is\nadjusted.\n\nDoing this exposed a couple latent bugs, which is what the other gdb\nchanges in the patch are for:\n\n - in the var_enum case, without the change, we'd end up with a null\n   enum argument, and print:\n\n     \"-enum (null)\"\n\n - The get_ulongest change is necessary to avoid advancing PP in a\n   case where we end up throwing an error, e.g., when parsing \"11x\".\n   Without the change the operand pointer shown by \"maint show\n   test-options-completion-result\" would be left pointing at \"x\"\n   instead of \"11x\".\n\ngdb/ChangeLog:\n2019-07-03  Pedro Alves  <palves@redhat.com>\n\n\t* cli/cli-option.c (parse_option) <var_enum>: Don't return an\n\toption_value with a null enumeration.\n\t(complete_options): Save the option values in the context.\n\t(save_option_value_in_ctx): New, factored out from ...\n\t(process_options): ... here.\n\t* cli/cli-utils.c (get_ulongest): Don't advance PP until the end\n\tof the function.\n\t* maint-test-options.c (test_options_opts::dump): New, factored\n\tout from ...\n\t(maintenance_test_options_command_mode): ... here.\n\t(maintenance_test_options_command_completion_result): Delete.\n\t(maintenance_test_options_command_completion_text): Update\n\tcomment.\n\t(maintenance_show_test_options_completion_result): Change\n\tprototype.  Just print\n\tmaintenance_test_options_command_completion_text.\n\t(save_completion_result): New.\n\t(maintenance_test_options_completer_mode): Pass options context to\n\tcomplete_options, and then save a dump.\n\t(_initialize_maint_test_options): Use add_cmd to install \"maint\n\tshow test-options-completion-result\".\n\ngdb/testsuite/ChangeLog:\n2019-07-03  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/options.exp (test-misc, test-flag, test-boolean)\n\t(test-uinteger, test-enum): Adjust res_test_gdb_... calls to pass\n\tthe expected output in the success.",
    "tree": {
      "sha": "e4c833f477121ca24ce4b069c857374eb2603437",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e4c833f477121ca24ce4b069c857374eb2603437"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/41fc454c915057d9c5536617370c5eb2a5f71323",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41fc454c915057d9c5536617370c5eb2a5f71323",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/41fc454c915057d9c5536617370c5eb2a5f71323",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41fc454c915057d9c5536617370c5eb2a5f71323/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b2b2a2159876fa8db57ce017b949cafc6f1a32df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2b2a2159876fa8db57ce017b949cafc6f1a32df",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b2b2a2159876fa8db57ce017b949cafc6f1a32df"
    }
  ],
  "stats": {
    "total": 330,
    "additions": 225,
    "deletions": 105
  },
  "files": [
    {
      "sha": "43f0ef14cec43bd880f6ee6f9290757ad0a2742c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=41fc454c915057d9c5536617370c5eb2a5f71323",
      "patch": "@@ -1,3 +1,27 @@\n+2019-07-03  Pedro Alves  <palves@redhat.com>\n+\n+\t* cli/cli-option.c (parse_option) <var_enum>: Don't return an\n+\toption_value with a null enumeration.\n+\t(complete_options): Save the option values in the context.\n+\t(save_option_value_in_ctx): New, factored out from ...\n+\t(process_options): ... here.\n+\t* cli/cli-utils.c (get_ulongest): Don't advance PP until the end\n+\tof the function.\n+\t* maint-test-options.c (test_options_opts::dump): New, factored\n+\tout from ...\n+\t(maintenance_test_options_command_mode): ... here.\n+\t(maintenance_test_options_command_completion_result): Delete.\n+\t(maintenance_test_options_command_completion_text): Update\n+\tcomment.\n+\t(maintenance_show_test_options_completion_result): Change\n+\tprototype.  Just print\n+\tmaintenance_test_options_command_completion_text.\n+\t(save_completion_result): New.\n+\t(maintenance_test_options_completer_mode): Pass options context to\n+\tcomplete_options, and then save a dump.\n+\t(_initialize_maint_test_options): Use add_cmd to install \"maint\n+\tshow test-options-completion-result\".\n+\n 2019-07-03  Pedro Alves  <palves@redhat.com>\n \n \t* NEWS (New commands): Mention \"with\" and \"maint with\"."
    },
    {
      "sha": "8f2844610b56d55ae95be5d08beb2cd0910a59c2",
      "filename": "gdb/cli/cli-option.c",
      "status": "modified",
      "additions": 43,
      "deletions": 27,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/cli/cli-option.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/cli/cli-option.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-option.c?ref=41fc454c915057d9c5536617370c5eb2a5f71323",
      "patch": "@@ -58,6 +58,8 @@ struct option_def_and_value\n   gdb::optional<option_value> value;\n };\n \n+static void save_option_value_in_ctx (gdb::optional<option_def_and_value> &ov);\n+\n /* Info passed around when handling completion.  */\n struct parse_option_completion_info\n {\n@@ -349,11 +351,12 @@ parse_option (gdb::array_view<const option_def_group> options_group,\n \t      {\n \t\tcomplete_on_enum (completion->tracker,\n \t\t\t\t  match->enums, *args, *args);\n-\t\t*args = after_arg;\n+\t\tif (completion->tracker.have_completions ())\n+\t\t  return {};\n \n-\t\toption_value val;\n-\t\tval.enumeration = nullptr;\n-\t\treturn option_def_and_value {*match, match_ctx, val};\n+\t\t/* If we don't have completions, let the\n+\t\t   non-completion path throw on invalid enum value\n+\t\t   below, so that completion processing stops.  */\n \t      }\n \t  }\n \n@@ -456,6 +459,11 @@ complete_options (completion_tracker &tracker,\n \t\t    (*args - text);\n \t\t  return true;\n \t\t}\n+\n+\t      /* If the caller passed in a context, then it is\n+\t\t interested in the option argument values.  */\n+\t      if (ov && ov->ctx != nullptr)\n+\t\tsave_option_value_in_ctx (ov);\n \t    }\n \t  else\n \t    {\n@@ -499,6 +507,36 @@ complete_options (completion_tracker &tracker,\n   return false;\n }\n \n+/* Save the parsed value in the option's context.  */\n+\n+static void\n+save_option_value_in_ctx (gdb::optional<option_def_and_value> &ov)\n+{\n+  switch (ov->option.type)\n+    {\n+    case var_boolean:\n+      {\n+\tbool value = ov->value.has_value () ? ov->value->boolean : true;\n+\t*ov->option.var_address.boolean (ov->option, ov->ctx) = value;\n+      }\n+      break;\n+    case var_uinteger:\n+      *ov->option.var_address.uinteger (ov->option, ov->ctx)\n+\t= ov->value->uinteger;\n+      break;\n+    case var_zuinteger_unlimited:\n+      *ov->option.var_address.integer (ov->option, ov->ctx)\n+\t= ov->value->integer;\n+      break;\n+    case var_enum:\n+      *ov->option.var_address.enumeration (ov->option, ov->ctx)\n+\t= ov->value->enumeration;\n+      break;\n+    default:\n+      gdb_assert_not_reached (\"unhandled option type\");\n+    }\n+}\n+\n /* See cli-option.h.  */\n \n bool\n@@ -534,29 +572,7 @@ process_options (const char **args,\n \n       processed_any = true;\n \n-      switch (ov->option.type)\n-\t{\n-\tcase var_boolean:\n-\t  {\n-\t    bool value = ov->value.has_value () ? ov->value->boolean : true;\n-\t    *ov->option.var_address.boolean (ov->option, ov->ctx) = value;\n-\t  }\n-\t  break;\n-\tcase var_uinteger:\n-\t  *ov->option.var_address.uinteger (ov->option, ov->ctx)\n-\t    = ov->value->uinteger;\n-\t  break;\n-\tcase var_zuinteger_unlimited:\n-\t  *ov->option.var_address.integer (ov->option, ov->ctx)\n-\t    = ov->value->integer;\n-\t  break;\n-\tcase var_enum:\n-\t  *ov->option.var_address.enumeration (ov->option, ov->ctx)\n-\t    = ov->value->enumeration;\n-\t  break;\n-\tdefault:\n-\t  gdb_assert_not_reached (\"unhandled option type\");\n-\t}\n+      save_option_value_in_ctx (ov);\n     }\n }\n "
    },
    {
      "sha": "333a86a81b9c3b9ba226347fa42a474c1c4baca4",
      "filename": "gdb/cli/cli-utils.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/cli/cli-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/cli/cli-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.c?ref=41fc454c915057d9c5536617370c5eb2a5f71323",
      "patch": "@@ -60,13 +60,14 @@ get_ulongest (const char **pp, int trailer)\n     }\n   else\n     {\n-      retval = strtoulst (p, pp, 0);\n-      if (p == *pp)\n+      const char *end = p;\n+      retval = strtoulst (p, &end, 0);\n+      if (p == end)\n \t{\n \t  /* There is no number here.  (e.g. \"cond a == b\").  */\n \t  error (_(\"Expected integer at: %s\"), p);\n \t}\n-      p = *pp;\n+      p = end;\n     }\n \n   if (!(isspace (*p) || *p == '\\0' || *p == trailer))"
    },
    {
      "sha": "7e7ef6e799261386af045e13b0ac20f76ba91d50",
      "filename": "gdb/maint-test-options.c",
      "status": "modified",
      "additions": 67,
      "deletions": 46,
      "changes": 113,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/maint-test-options.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/maint-test-options.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint-test-options.c?ref=41fc454c915057d9c5536617370c5eb2a5f71323",
      "patch": "@@ -133,6 +133,27 @@ struct test_options_opts\n   const char *enum_opt = test_options_enum_values_xxx;\n   unsigned int uint_opt = 0;\n   int zuint_unl_opt = 0;\n+\n+  /* Dump the options to FILE.  ARGS is the remainder unprocessed\n+     arguments.  */\n+  void dump (ui_file *file, const char *args) const\n+  {\n+    fprintf_unfiltered (file,\n+\t\t\t_(\"-flag %d -xx1 %d -xx2 %d -bool %d \"\n+\t\t\t  \"-enum %s -uint %s -zuint-unl %s -- %s\\n\"),\n+\t\t\tflag_opt,\n+\t\t\txx1_opt,\n+\t\t\txx2_opt,\n+\t\t\tboolean_opt,\n+\t\t\tenum_opt,\n+\t\t\t(uint_opt == UINT_MAX\n+\t\t\t ? \"unlimited\"\n+\t\t\t : pulongest (uint_opt)),\n+\t\t\t(zuint_unl_opt == -1\n+\t\t\t ? \"unlimited\"\n+\t\t\t : plongest (zuint_unl_opt)),\n+\t\t\targs);\n+  }\n };\n \n /* Option definitions for the \"maintenance test-options\" commands.  */\n@@ -226,46 +247,48 @@ maintenance_test_options_command_mode (const char *args,\n   else\n     args = skip_spaces (args);\n \n-  printf_unfiltered (_(\"-flag %d -xx1 %d -xx2 %d -bool %d \"\n-\t\t       \"-enum %s -uint %s -zuint-unl %s -- %s\\n\"),\n-\t\t     opts.flag_opt,\n-\t\t     opts.xx1_opt,\n-\t\t     opts.xx2_opt,\n-\t\t     opts.boolean_opt,\n-\t\t     opts.enum_opt,\n-\t\t     (opts.uint_opt == UINT_MAX\n-\t\t      ? \"unlimited\"\n-\t\t      : pulongest (opts.uint_opt)),\n-\t\t     (opts.zuint_unl_opt == -1\n-\t\t      ? \"unlimited\"\n-\t\t      : plongest (opts.zuint_unl_opt)),\n-\t\t     args);\n+  opts.dump (gdb_stdout, args);\n }\n \n-/* Variables used by the \"maintenance show\n-   test-options-completion-result\" command.  These variables are\n-   stored by the completer of the \"maint test-options\"\n-   subcommands.  */\n+/* Variable used by the \"maintenance show\n+   test-options-completion-result\" command.  This variable is stored\n+   by the completer of the \"maint test-options\" subcommands.\n \n-/* The result of gdb::option::complete_options.  */\n-static int maintenance_test_options_command_completion_result;\n-/* The text at the word point after gdb::option::complete_options\n-   returns.  */\n+   If the completer returned false, this includes the text at the word\n+   point after gdb::option::complete_options returns.  If true, then\n+   this includes a dump of the processed options.  */\n static std::string maintenance_test_options_command_completion_text;\n \n /* The \"maintenance show test-options-completion-result\" command.  */\n \n static void\n-maintenance_show_test_options_completion_result\n-  (struct ui_file *file, int from_tty,\n-   struct cmd_list_element *c, const char *value)\n+maintenance_show_test_options_completion_result (const char *args,\n+\t\t\t\t\t\t int from_tty)\n {\n-  if (maintenance_test_options_command_completion_result)\n-    fprintf_filtered (file, \"1\\n\");\n+  puts_filtered (maintenance_test_options_command_completion_text.c_str ());\n+}\n+\n+/* Save the completion result in the global variables read by the\n+   \"maintenance test-options require-delimiter\" command.  */\n+\n+static void\n+save_completion_result (const test_options_opts &opts, bool res,\n+\t\t\tconst char *text)\n+{\n+  if (res)\n+    {\n+      string_file stream;\n+\n+      stream.puts (\"1 \");\n+      opts.dump (&stream, text);\n+      maintenance_test_options_command_completion_text\n+\t= std::move (stream.string ());\n+    }\n   else\n-    fprintf_filtered\n-      (file, _(\"0 %s\\n\"),\n-       maintenance_test_options_command_completion_text.c_str ());\n+    {\n+      maintenance_test_options_command_completion_text\n+\t= string_printf (\"0 %s\\n\", text);\n+    }\n }\n \n /* Implementation of completer for the \"maintenance test-options\n@@ -278,17 +301,19 @@ maintenance_test_options_completer_mode (completion_tracker &tracker,\n \t\t\t\t\t const char *text,\n \t\t\t\t\t gdb::option::process_options_mode mode)\n {\n+  test_options_opts opts;\n+\n   try\n     {\n-      maintenance_test_options_command_completion_result\n-\t= gdb::option::complete_options\n-\t   (tracker, &text, mode,\n-\t    make_test_options_options_def_group (nullptr));\n-      maintenance_test_options_command_completion_text = text;\n+      bool res = (gdb::option::complete_options\n+\t\t  (tracker, &text, mode,\n+\t\t   make_test_options_options_def_group (&opts)));\n+\n+      save_completion_result (opts, res, text);\n     }\n   catch (const gdb_exception_error &ex)\n     {\n-      maintenance_test_options_command_completion_result = 1;\n+      save_completion_result (opts, true, text);\n       throw;\n     }\n }\n@@ -445,17 +470,13 @@ Options:\\n\\\n   set_cmd_completer_handle_brkchars\n     (cmd, maintenance_test_options_unknown_is_operand_command_completer);\n \n-  add_setshow_zinteger_cmd (\"test-options-completion-result\", class_maintenance,\n-\t\t\t    &maintenance_test_options_command_completion_result,\n-\t\t\t    _(\"\\\n-Set maintenance test-options completion result.\"), _(\"\\\n-Show maintenance test-options completion result.\"), _(\"\\\n-Show the results of completing\\n\\\n+  add_cmd (\"test-options-completion-result\", class_maintenance,\n+\t   maintenance_show_test_options_completion_result,\n+\t   _(\"\\\n+Show maintenance test-options completion result.\\n\\\n+Shows the results of completing\\n\\\n \\\"maint test-options require-delimiter\\\",\\n\\\n \\\"maint test-options unknown-is-error\\\", or\\n\\\n \\\"maint test-options unknown-is-operand\\\".\"),\n-\t\t\t    NULL,\n-\t\t\t    maintenance_show_test_options_completion_result,\n-\t\t\t    &maintenance_set_cmdlist,\n-\t\t\t    &maintenance_show_cmdlist);\n+\t   &maintenance_show_cmdlist);\n }"
    },
    {
      "sha": "209f15f9c352c17c9947d1476d31a85600cfc311",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=41fc454c915057d9c5536617370c5eb2a5f71323",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-03  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/options.exp (test-misc, test-flag, test-boolean)\n+\t(test-uinteger, test-enum): Adjust res_test_gdb_... calls to pass\n+\tthe expected output in the success.\n+\n 2019-07-03  Pedro Alves  <palves@redhat.com>\n \n \t* lib/completion-support.exp (test_gdb_complete_tab_multiple):"
    },
    {
      "sha": "1a652b3c9dc0ed358509264c6653713e80d638ad",
      "filename": "gdb/testsuite/gdb.base/options.exp",
      "status": "modified",
      "additions": 81,
      "deletions": 29,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/testsuite/gdb.base/options.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41fc454c915057d9c5536617370c5eb2a5f71323/gdb/testsuite/gdb.base/options.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/options.exp?ref=41fc454c915057d9c5536617370c5eb2a5f71323",
      "patch": "@@ -486,21 +486,27 @@ proc_with_prefix test-misc {variant} {\n     }\n \n     # Completing at \"-\" should list all options.\n-    res_test_gdb_complete_multiple \"1\" \"$cmd \" \"-\" \"\" $all_options\n+    res_test_gdb_complete_multiple \\\n+\t\"1 [expect_none \"-\"]\" \\\n+\t\"$cmd \" \"-\" \"\" $all_options\n \n     # Now with a double dash.\n     gdb_test \"$cmd --\" [expect_none \"\"]\n \n     # \"--\" is recognized by options completer, gdb auto-appends a\n     # space.\n-    test_completer_recognizes 1 \"$cmd --\"\n+    test_completer_recognizes \\\n+\t\"1 [expect_none \"--\"]\" \\\n+\t\"$cmd --\"\n \n     # Now with a double dash, plus a dash as operand.\n     gdb_test \"$cmd -- -\" [expect_none \"-\"]\n     res_test_gdb_complete_none \"0 -\" \"$cmd -- -\"\n \n     # Completing an unambiguous option just appends an empty space.\n-    test_completer_recognizes 1 \"$cmd -flag\"\n+    test_completer_recognizes \\\n+\t\"1 [expect_none \"-flag\"]\" \\\n+\t\"$cmd -flag\"\n \n     # Try running an ambiguous option.\n     if {$variant == \"require-delimiter\"} {\n@@ -540,10 +546,14 @@ proc_with_prefix test-flag {variant} {\n     set cmd [make_cmd $variant]\n \n     # Completing a flag just appends a space.\n-    test_completer_recognizes 1 \"$cmd -flag\"\n+    test_completer_recognizes \\\n+\t\"1 [expect_none \"-flag\"]\" \\\n+\t\"$cmd -flag\"\n \n     # Add a dash, and all options should be shown.\n-    test_gdb_complete_multiple \"$cmd  -flag \" \"-\" \"\" $all_options\n+    res_test_gdb_complete_multiple \\\n+\t\"1 [expect_flag \"-\"]\" \\\n+\t\"$cmd  -flag \" \"-\" \"\" $all_options\n \n     # Basic smoke tests of accepted / not accepted values.\n \n@@ -582,7 +592,9 @@ proc_with_prefix test-flag {variant} {\n     # \"on/off\".\n \n     if {$variant == \"require-delimiter\"} {\n-\tres_test_gdb_complete_none \"1\" \"$cmd -flag o\"\n+\tres_test_gdb_complete_none \\\n+\t    \"1 [expect_flag \"o\"]\" \\\n+\t    \"$cmd -flag o\"\n \n \tgdb_test \"$cmd -flag o\" [expect_none \"-flag o\"]\n     } else {\n@@ -612,7 +624,9 @@ proc_with_prefix test-boolean {variant} {\n     #   E.g., \"frame apply all -past-main COMMAND\".\n \n     if {$variant == \"require-delimiter\"} {\n-\tres_test_gdb_complete_multiple 1 \"$cmd -bool \" \"\" \"\" {\n+\tres_test_gdb_complete_multiple \\\n+\t    \"1 [expect_none \"\"]\" \\\n+\t    \"$cmd -bool \" \"\" \"\" {\n \t    \"-bool\"\n \t    \"-enum\"\n \t    \"-flag\"\n@@ -628,7 +642,9 @@ proc_with_prefix test-boolean {variant} {\n     }\n \n     # Add another dash, and \"on/off\" are no longer offered:\n-    res_test_gdb_complete_multiple 1 \"$cmd -bool \" \"-\" \"\"  $all_options\n+    res_test_gdb_complete_multiple \\\n+\t\"1 [expect_bool \"-\"]\" \\\n+\t\"$cmd -bool \" \"-\" \"\"  $all_options\n \n     # Basic smoke tests of accepted / not accepted values.\n \n@@ -643,20 +659,25 @@ proc_with_prefix test-boolean {variant} {\n     # However, the completer does recognize them if you start typing\n     # the boolean value.\n     foreach value {\"0\" \"1\"} {\n-\ttest_completer_recognizes 1 \"$cmd -bool $value\"\n+\ttest_completer_recognizes \\\n+\t    \"1 [expect_none \"\"]\" \\\n+\t    \"$cmd -bool $value\"\n     }\n     foreach value {\"of\" \"off\"} {\n-\tres_test_gdb_complete_unique 1 \\\n+\tres_test_gdb_complete_unique \\\n+\t    \"1 [expect_none \"\"]\" \\\n \t    \"$cmd -bool $value\" \\\n \t    \"$cmd -bool off\"\n     }\n     foreach value {\"y\" \"ye\" \"yes\"} {\n-\tres_test_gdb_complete_unique 1 \\\n+\tres_test_gdb_complete_unique \\\n+\t    \"1 [expect_none \"\"]\" \\\n \t    \"$cmd -bool $value\" \\\n \t    \"$cmd -bool yes\"\n     }\n     foreach value {\"n\" \"no\"} {\n-\tres_test_gdb_complete_unique 1 \\\n+\tres_test_gdb_complete_unique \\\n+\t    \"1 [expect_none \"\"]\" \\\n \t    \"$cmd -bool $value\" \\\n \t    \"$cmd -bool no\"\n     }\n@@ -668,7 +689,8 @@ proc_with_prefix test-boolean {variant} {\n \t\"enabl\"\n \t\"enable\"\n     } {\n-\tres_test_gdb_complete_unique 1 \\\n+\tres_test_gdb_complete_unique \\\n+\t    \"1 [expect_none \"\"]\" \\\n \t    \"$cmd -bool $value\" \\\n \t    \"$cmd -bool enable\"\n     }\n@@ -681,13 +703,16 @@ proc_with_prefix test-boolean {variant} {\n \t\"disabl\"\n \t\"disable\"\n     } {\n-\tres_test_gdb_complete_unique 1 \\\n+\tres_test_gdb_complete_unique \\\n+\t    \"1 [expect_none \"\"]\" \\\n \t    \"$cmd -bool $value\" \\\n \t    \"$cmd -bool disable\"\n     }\n \n     if {$variant == \"require-delimiter\"} {\n-\tres_test_gdb_complete_none \"1\" \"$cmd -bool xxx\"\n+\tres_test_gdb_complete_none \\\n+\t    \"1 [expect_none \"xxx\"]\" \\\n+\t    \"$cmd -bool xxx\"\n     } else {\n \tres_test_gdb_complete_none \"0 xxx\" \"$cmd -bool xxx\"\n     }\n@@ -763,7 +788,9 @@ proc_with_prefix test-boolean {variant} {\n     # Completing after a boolean option + \"o\" does list \"on/off\",\n     # though.\n     if {$variant == \"require-delimiter\"} {\n-\tres_test_gdb_complete_multiple 1 \"$cmd -bool \" \"o\" \"\" {\n+\tres_test_gdb_complete_multiple \\\n+\t    \"1 [expect_none \"o\"]\" \\\n+\t    \"$cmd -bool \" \"o\" \"\" {\n \t    \"off\"\n \t    \"on\"\n \t}\n@@ -783,17 +810,22 @@ proc_with_prefix test-uinteger {variant option} {\n     set cmd \"[make_cmd $variant] -$option\"\n \n     # Test completing a uinteger option:\n-    res_test_gdb_complete_multiple 1 \"$cmd \" \"\" \"\" {\n+    res_test_gdb_complete_multiple \\\n+\t\"1 [expect_none \"\"]\" \\\n+\t\"$cmd \" \"\" \"\" {\n \t\"NUMBER\"\n \t\"unlimited\"\n     }\n \n     # NUMBER above is just a placeholder, make sure we don't complete\n     # it as a valid option.\n-    res_test_gdb_complete_none 1 \"$cmd NU\"\n+    res_test_gdb_complete_none \\\n+\t\"1 [expect_none \"NU\"]\" \\\n+\t\"$cmd NU\"\n \n     # \"unlimited\" is valid though.\n-    res_test_gdb_complete_unique 1 \\\n+    res_test_gdb_complete_unique \\\n+\t\"1 [expect_none \"u\"]\" \\\n \t\"$cmd u\" \\\n \t\"$cmd unlimited\"\n \n@@ -815,24 +847,34 @@ proc_with_prefix test-uinteger {variant option} {\n \n     # Don't offer completions until we're past the\n     # -uinteger/-zuinteger-unlimited argument.\n-    res_test_gdb_complete_none 1 \"$cmd 1\"\n+    res_test_gdb_complete_none \\\n+\t\"1 [expect_none \"\"]\" \\\n+\t\"$cmd 1\"\n \n     # A number of invalid values.\n     foreach value {\"x\" \"x \" \"1a\" \"1a \" \"1-\" \"1- \" \"unlimitedx\"} {\n-\tres_test_gdb_complete_none 1 \"$cmd $value\"\n+\tres_test_gdb_complete_none \\\n+\t    \"1 [expect_none $value]\" \\\n+\t    \"$cmd $value\"\n     }\n \n     # Try \"-1\".\n     if {$option == \"uinteger\"} {\n \t# -1 is invalid uinteger.\n \tforeach value {\"-1\" \"-1 \"} {\n-\t    res_test_gdb_complete_none 1 \"$cmd $value\"\n+\t    res_test_gdb_complete_none \\\n+\t\t\"1 [expect_none \"\"]\" \\\n+\t\t\"$cmd $value\"\n \t}\n     } else {\n \t# -1 is valid for zuinteger-unlimited.\n-\tres_test_gdb_complete_none 1 \"$cmd -1\"\n+\tres_test_gdb_complete_none \\\n+\t    \"1 [expect_none \"\"]\" \\\n+\t    \"$cmd -1\"\n \tif {$variant == \"require-delimiter\"} {\n-\t    res_test_gdb_complete_multiple 1 \"$cmd -1 \" \"\" \"-\" $all_options\n+\t    res_test_gdb_complete_multiple \\\n+\t\t\"1 [expect_integer $option \"unlimited\" \"\"]\" \\\n+\t\t\"$cmd -1 \" \"\" \"-\" $all_options\n \t} else {\n \t    res_test_gdb_complete_none \"0 \" \"$cmd -1 \"\n \t}\n@@ -846,15 +888,19 @@ proc_with_prefix test-uinteger {variant option} {\n     #  - for !require-delimiter commands, completion offers nothing\n     #    and returns false.\n     if {$variant == \"require-delimiter\"} {\n-\tres_test_gdb_complete_multiple 1 \"$cmd 1 \" \"\" \"-\" $all_options\n+\tres_test_gdb_complete_multiple \\\n+\t    \"1 [expect_integer $option 1 \"\"]\" \\\n+\t    \"$cmd 1 \" \"\" \"-\" $all_options\n     } else {\n \tres_test_gdb_complete_none \"0 \" \"$cmd 1 \"\n     }\n \n     # Test completing non-option arguments after \"-uinteger 1 \".\n     foreach operand {\"x\" \"x \" \"1a\" \"1a \" \"1-\" \"1- \"} {\n \tif {$variant == \"require-delimiter\"} {\n-\t    res_test_gdb_complete_none 1 \"$cmd 1 $operand\"\n+\t    res_test_gdb_complete_none \\\n+\t\t\"1 [expect_integer $option 1 $operand]\" \\\n+\t\t\"$cmd 1 $operand\"\n \t} else {\n \t    res_test_gdb_complete_none \"0 $operand\" \"$cmd 1 $operand\"\n \t}\n@@ -864,7 +910,9 @@ proc_with_prefix test-uinteger {variant option} {\n \tif {$variant == \"unknown-is-operand\"} {\n \t    res_test_gdb_complete_none \"0 $operand\" \"$cmd 1 $operand\"\n \t} else {\n-\t    res_test_gdb_complete_none 1 \"$cmd 1 $operand\"\n+\t    res_test_gdb_complete_none \\\n+\t\t\"1 [expect_integer $option 1 $operand]\" \\\n+\t\t\"$cmd 1 $operand\"\n \t}\n     }\n }\n@@ -873,7 +921,9 @@ proc_with_prefix test-uinteger {variant option} {\n proc_with_prefix test-enum {variant} {\n     set cmd [make_cmd $variant]\n \n-    res_test_gdb_complete_multiple 1 \"$cmd -enum \" \"\" \"\" {\n+    res_test_gdb_complete_multiple \\\n+\t\"1 [expect_none \"\"]\" \\\n+\t\"$cmd -enum \" \"\" \"\" {\n \t\"xxx\"\n \t\"yyy\"\n \t\"zzz\"\n@@ -882,7 +932,9 @@ proc_with_prefix test-enum {variant} {\n     # Check that \"-\" where a value is expected does not show the\n     # command's options.  I.e., an enum's value is not optional.\n     # Check both completion and running the command.\n-    res_test_gdb_complete_none 1 \"$cmd -enum -\"\n+    res_test_gdb_complete_none \\\n+\t\"1 [expect_none \"-\"]\" \\\n+\t\"$cmd -enum -\"\n     gdb_test \"$cmd -enum --\"\\\n \t\"Requires an argument. Valid arguments are xxx, yyy, zzz\\\\.\"\n "
    }
  ]
}