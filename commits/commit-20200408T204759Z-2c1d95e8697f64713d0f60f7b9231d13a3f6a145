{
  "sha": "2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmMxZDk1ZTg2OTdmNjQ3MTNkMGY2MGY3YjkyMzFkMTNhM2Y2YTE0NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:59Z"
    },
    "message": "Move wait_for_debug_event to nat/windows-nat.c\n\nThis moves the wait_for_debug_event helper function to\nnat/windows-nat.c, and changes gdbserver to use it.\nwait_for_debug_event is a wrapper for WaitForDebugEvent that also sets\nlast_wait_event when appropriate.  This is needed to properly handle\nqueued stops.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (wait_for_debug_event): Move to\n\tnat/windows-nat.c.\n\t* nat/windows-nat.h (wait_for_debug_event): Declare.\n\t* nat/windows-nat.c (wait_for_debug_event): Move from\n\twindows-nat.c.  No longer static.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.c (win32_kill, get_child_debug_event): Use\n\twait_for_debug_event.",
    "tree": {
      "sha": "6e6bc6f0c78b9a706f108cab3a6fcf7c9a125cf3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6e6bc6f0c78b9a706f108cab3a6fcf7c9a125cf3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d2977bc4253614907058d3a339875683d8215065",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2977bc4253614907058d3a339875683d8215065",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d2977bc4253614907058d3a339875683d8215065"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 31,
    "deletions": 14
  },
  "files": [
    {
      "sha": "3c3ae28dd85850f8999af732d056889c289ecdd7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (wait_for_debug_event): Move to\n+\tnat/windows-nat.c.\n+\t* nat/windows-nat.h (wait_for_debug_event): Declare.\n+\t* nat/windows-nat.c (wait_for_debug_event): Move from\n+\twindows-nat.c.  No longer static.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (get_windows_debug_event): Use"
    },
    {
      "sha": "bb28e9b13c71217fbba38b8d5718fa0b08f7fc85",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
      "patch": "@@ -385,5 +385,15 @@ continue_last_debug_event (DWORD continue_status, bool debug_events)\n \t\t\t     continue_status);\n }\n \n+/* See nat/windows-nat.h.  */\n+\n+BOOL\n+wait_for_debug_event (DEBUG_EVENT *event, DWORD timeout)\n+{\n+  BOOL result = WaitForDebugEvent (event, timeout);\n+  if (result)\n+    last_wait_event = *event;\n+  return result;\n+}\n \n }"
    },
    {
      "sha": "846fa67f407c48dec6cf1bbf79870edef26d854f",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
      "patch": "@@ -245,6 +245,11 @@ extern gdb::optional<pending_stop> fetch_pending_stop (bool debug_events);\n extern BOOL continue_last_debug_event (DWORD continue_status,\n \t\t\t\t       bool debug_events);\n \n+/* A simple wrapper for WaitForDebugEvent that also sets\n+   'last_wait_event' on success.  */\n+\n+extern BOOL wait_for_debug_event (DEBUG_EVENT *event, DWORD timeout);\n+\n }\n \n #endif"
    },
    {
      "sha": "cdaca8d0cbf6391b7e0f6412b252ad1515356ddc",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
      "patch": "@@ -1495,17 +1495,6 @@ ctrl_c_handler (DWORD event_type)\n   return TRUE;\n }\n \n-/* A wrapper for WaitForDebugEvent that sets \"last_wait_event\"\n-   appropriately.  */\n-static BOOL\n-wait_for_debug_event (DEBUG_EVENT *event, DWORD timeout)\n-{\n-  BOOL result = WaitForDebugEvent (event, timeout);\n-  if (result)\n-    last_wait_event = *event;\n-  return result;\n-}\n-\n /* Get the next event from the child.  Returns a non-zero thread id if the event\n    requires handling by WFI (or whatever).  */\n "
    },
    {
      "sha": "792834077feddd098ab54a03487a4440cf550af0",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.c (win32_kill, get_child_debug_event): Use\n+\twait_for_debug_event.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.c (child_continue): Call continue_last_debug_event."
    },
    {
      "sha": "d151505e9f8cad5fdfdbd1112fd0edbb3db210bf",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1d95e8697f64713d0f60f7b9231d13a3f6a145/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=2c1d95e8697f64713d0f60f7b9231d13a3f6a145",
      "patch": "@@ -797,7 +797,7 @@ win32_process_target::kill (process_info *process)\n     {\n       if (!child_continue (DBG_CONTINUE, -1))\n \tbreak;\n-      if (!WaitForDebugEvent (&current_event, INFINITE))\n+      if (!wait_for_debug_event (&current_event, INFINITE))\n \tbreak;\n       if (current_event.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT)\n \tbreak;\n@@ -1231,7 +1231,7 @@ get_child_debug_event (DWORD *continue_status,\n \t happen is the user will see a spurious breakpoint.  */\n \n       current_event.dwDebugEventCode = 0;\n-      if (!WaitForDebugEvent (&current_event, 0))\n+      if (!wait_for_debug_event (&current_event, 0))\n \t{\n \t  OUTMSG2((\"no attach events left\\n\"));\n \t  fake_breakpoint_event ();\n@@ -1246,7 +1246,7 @@ get_child_debug_event (DWORD *continue_status,\n       /* Keep the wait time low enough for comfortable remote\n \t interruption, but high enough so gdbserver doesn't become a\n \t bottleneck.  */\n-      if (!WaitForDebugEvent (&current_event, 250))\n+      if (!wait_for_debug_event (&current_event, 250))\n         {\n \t  DWORD e  = GetLastError();\n "
    }
  ]
}