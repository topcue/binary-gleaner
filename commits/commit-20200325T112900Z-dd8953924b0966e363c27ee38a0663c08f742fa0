{
  "sha": "dd8953924b0966e363c27ee38a0663c08f742fa0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQ4OTUzOTI0YjA5NjZlMzYzYzI3ZWUzOGEwNjYzYzA4Zjc0MmZhMA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-03-13T15:50:28Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-03-25T11:29:00Z"
    },
    "message": "gdb/riscv: Apply NaN boxing when writing return values into registers\n\nWhen setting up function parameters we already perform NaN boxing, as\nrequired by the RISC-V ABI, however, we don't do this when writing\nvalues into registers as part of setting up a return value.\n\nThis commit moves the NaN boxing code into a small helper function,\nand then makes use of this function when setting up function\nparameters, and also when setting up return values.\n\nThis should resolve this failure:\n\n  FAIL: gdb.base/return-nodebug.exp: float: full width of the returned result\n\ngdb/ChangeLog:\n\n\tPR gdb/25489\n\t* riscv-tdep.c (riscv_arg_info::c_offset): Update comment.\n\t(riscv_regcache_cooked_write): New function.\n\t(riscv_push_dummy_call): Use new function.\n\t(riscv_return_value): Likewise.",
    "tree": {
      "sha": "4c6e18d299e8d9dee3f0f0a4e964ea0a94e08436",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4c6e18d299e8d9dee3f0f0a4e964ea0a94e08436"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd8953924b0966e363c27ee38a0663c08f742fa0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd8953924b0966e363c27ee38a0663c08f742fa0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd8953924b0966e363c27ee38a0663c08f742fa0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd8953924b0966e363c27ee38a0663c08f742fa0/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf2611febcfa6b7c680de31071c5658e7463eee4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf2611febcfa6b7c680de31071c5658e7463eee4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf2611febcfa6b7c680de31071c5658e7463eee4"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 48,
    "deletions": 29
  },
  "files": [
    {
      "sha": "7d627b55ad4db1c57e2a3f040f31f94332ed3240",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd8953924b0966e363c27ee38a0663c08f742fa0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd8953924b0966e363c27ee38a0663c08f742fa0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dd8953924b0966e363c27ee38a0663c08f742fa0",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR gdb/25534\n+\t* riscv-tdep.c (riscv_arg_info::c_offset): Update comment.\n+\t(riscv_regcache_cooked_write): New function.\n+\t(riscv_push_dummy_call): Use new function.\n+\t(riscv_return_value): Likewise.\n+\n 2020-03-24  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* fbsd-nat.c (fbsd_nat_target::follow_fork): Change bool to int."
    },
    {
      "sha": "0423e6abf30733988bc81c200f10f39175c6935c",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 40,
      "deletions": 29,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd8953924b0966e363c27ee38a0663c08f742fa0/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd8953924b0966e363c27ee38a0663c08f742fa0/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=dd8953924b0966e363c27ee38a0663c08f742fa0",
      "patch": "@@ -1727,8 +1727,9 @@ struct riscv_arg_info\n        will go.  */\n     int c_length;\n \n-    /* The offset within CONTENTS for this part of the argument.  Will\n-       always be 0 for the first part.  For the second part of the\n+    /* The offset within CONTENTS for this part of the argument.  This can\n+       be non-zero even for the first part (the first field of a struct can\n+       have a non-zero offset due to padding).  For the second part of the\n        argument, this might be the C_LENGTH value of the first part,\n        however, if we are passing a structure in two registers, and there's\n        is padding between the first and second field, then this offset\n@@ -2417,6 +2418,26 @@ riscv_print_arg_location (ui_file *stream, struct gdbarch *gdbarch,\n     }\n }\n \n+/* Wrapper around REGCACHE->cooked_write.  Places the LEN bytes of DATA\n+   into a buffer that is at least as big as the register REGNUM, padding\n+   out the DATA with either 0x00, or 0xff.  For floating point registers\n+   0xff is used, for everyone else 0x00 is used.  */\n+\n+static void\n+riscv_regcache_cooked_write (int regnum, const gdb_byte *data, int len,\n+\t\t\t     struct regcache *regcache, int flen)\n+{\n+  gdb_byte tmp [sizeof (ULONGEST)];\n+\n+  /* FP values in FP registers must be NaN-boxed.  */\n+  if (riscv_is_fp_regno_p (regnum) && len < flen)\n+    memset (tmp, -1, sizeof (tmp));\n+  else\n+    memset (tmp, 0, sizeof (tmp));\n+  memcpy (tmp, data, len);\n+  regcache->cooked_write (regnum, tmp);\n+}\n+\n /* Implement the push dummy call gdbarch callback.  */\n \n static CORE_ADDR\n@@ -2526,18 +2547,13 @@ riscv_push_dummy_call (struct gdbarch *gdbarch,\n \t{\n \tcase riscv_arg_info::location::in_reg:\n \t  {\n-\t    gdb_byte tmp [sizeof (ULONGEST)];\n-\n \t    gdb_assert (info->argloc[0].c_length <= info->length);\n-\t    /* FP values in FP registers must be NaN-boxed.  */\n-\t    if (riscv_is_fp_regno_p (info->argloc[0].loc_data.regno)\n-\t\t&& info->argloc[0].c_length < call_info.flen)\n-\t      memset (tmp, -1, sizeof (tmp));\n-\t    else\n-\t      memset (tmp, 0, sizeof (tmp));\n-\t    memcpy (tmp, (info->contents + info->argloc[0].c_offset),\n-\t\t    info->argloc[0].c_length);\n-\t    regcache->cooked_write (info->argloc[0].loc_data.regno, tmp);\n+\n+\t    riscv_regcache_cooked_write (info->argloc[0].loc_data.regno,\n+\t\t\t\t\t (info->contents\n+\t\t\t\t\t  + info->argloc[0].c_offset),\n+\t\t\t\t\t info->argloc[0].c_length,\n+\t\t\t\t\t regcache, call_info.flen);\n \t    second_arg_length =\n \t      (((info->argloc[0].c_length + info->argloc[0].c_offset) < info->length)\n \t       ? info->argloc[1].c_length : 0);\n@@ -2569,19 +2585,13 @@ riscv_push_dummy_call (struct gdbarch *gdbarch,\n \t    {\n \t    case riscv_arg_info::location::in_reg:\n \t      {\n-\t\tgdb_byte tmp [sizeof (ULONGEST)];\n-\n \t\tgdb_assert ((riscv_is_fp_regno_p (info->argloc[1].loc_data.regno)\n \t\t\t     && second_arg_length <= call_info.flen)\n \t\t\t    || second_arg_length <= call_info.xlen);\n-\t\t/* FP values in FP registers must be NaN-boxed.  */\n-\t\tif (riscv_is_fp_regno_p (info->argloc[1].loc_data.regno)\n-\t\t    && second_arg_length < call_info.flen)\n-\t\t  memset (tmp, -1, sizeof (tmp));\n-\t\telse\n-\t\t  memset (tmp, 0, sizeof (tmp));\n-\t\tmemcpy (tmp, second_arg_data, second_arg_length);\n-\t\tregcache->cooked_write (info->argloc[1].loc_data.regno, tmp);\n+\t\triscv_regcache_cooked_write (info->argloc[1].loc_data.regno,\n+\t\t\t\t\t     second_arg_data,\n+\t\t\t\t\t     second_arg_length,\n+\t\t\t\t\t     regcache, call_info.flen);\n \t      }\n \t      break;\n \n@@ -2701,9 +2711,9 @@ riscv_return_value (struct gdbarch  *gdbarch,\n \t      if (writebuf)\n \t\t{\n \t\t  const gdb_byte *ptr = writebuf + info.argloc[0].c_offset;\n-\t\t  regcache->cooked_write_part (regnum, 0,\n+\t\t  riscv_regcache_cooked_write (regnum, ptr,\n \t\t\t\t\t       info.argloc[0].c_length,\n-\t\t\t\t\t       ptr);\n+\t\t\t\t\t       regcache, call_info.flen);\n \t\t}\n \n \t      /* A return value in register can have a second part in a\n@@ -2730,10 +2740,11 @@ riscv_return_value (struct gdbarch  *gdbarch,\n \n \t\t      if (writebuf)\n \t\t\t{\n-\t\t\t  writebuf += info.argloc[1].c_offset;\n-\t\t\t  regcache->cooked_write_part (regnum, 0,\n-\t\t\t\t\t\t       info.argloc[1].c_length,\n-\t\t\t\t\t\t       writebuf);\n+\t\t\t  const gdb_byte *ptr\n+\t\t\t    = writebuf + info.argloc[1].c_offset;\n+\t\t\t  riscv_regcache_cooked_write\n+\t\t\t    (regnum, ptr, info.argloc[1].c_length,\n+\t\t\t     regcache, call_info.flen);\n \t\t\t}\n \t\t      break;\n "
    }
  ]
}