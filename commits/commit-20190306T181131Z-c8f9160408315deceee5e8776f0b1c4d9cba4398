{
  "sha": "c8f9160408315deceee5e8776f0b1c4d9cba4398",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzhmOTE2MDQwODMxNWRlY2VlZTVlODc3NmYwYjFjNGQ5Y2JhNDM5OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-16T15:30:54Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-06T18:11:31Z"
    },
    "message": "gdb/fortran: Simplify handling of Fortran dot operations and keywords\n\nUse strncasecmp to compare Fortran dot operations (like .AND.) and for\nthe keywords list.  This allows for some duplication to be removed\nfrom the token arrays.  I've also performed whitespace cleanup around\nthe code I've changed.\n\nI have added some tests to ensure that upper and lowercase dot\noperations are correctly tested.  The keywords list remains always\nlowercase for now.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* f-exp.y (struct token): Add comments.\n\t(dot_ops): Remove uppercase versions and the end marker.\n\t(f77_keywords): Likewise.\n\t(yylex): Use ARRAY_SIZE to iterate over dot_ops, assert all\n\tentries in the dot_ops array are case insensitive, and use\n\tstrncasecmp to compare strings.  Also some whitespace cleanup in\n\tthis area.  Similar for the f77_keywords array, except entries in\n\tthis list might be case sensitive.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/dot-ops.exp: New file.",
    "tree": {
      "sha": "b85ad39685b0f4670f47d2714d8020bc93eaa27d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b85ad39685b0f4670f47d2714d8020bc93eaa27d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c8f9160408315deceee5e8776f0b1c4d9cba4398",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8f9160408315deceee5e8776f0b1c4d9cba4398",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c8f9160408315deceee5e8776f0b1c4d9cba4398",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8f9160408315deceee5e8776f0b1c4d9cba4398/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dd9f2c763b325227a3721eaf4006db67b37f3b13",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd9f2c763b325227a3721eaf4006db67b37f3b13",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dd9f2c763b325227a3721eaf4006db67b37f3b13"
    }
  ],
  "stats": {
    "total": 241,
    "additions": 189,
    "deletions": 52
  },
  "files": [
    {
      "sha": "61c566300da42eeb1779179033f1af234a27ab16",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c8f9160408315deceee5e8776f0b1c4d9cba4398",
      "patch": "@@ -1,3 +1,14 @@\n+2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-exp.y (struct token): Add comments.\n+\t(dot_ops): Remove uppercase versions and the end marker.\n+\t(f77_keywords): Likewise.\n+\t(yylex): Use ARRAY_SIZE to iterate over dot_ops, assert all\n+\tentries in the dot_ops array are case insensitive, and use\n+\tstrncasecmp to compare strings.  Also some whitespace cleanup in\n+\tthis area.  Similar for the f77_keywords array, except entries in\n+\tthis list might be case sensitive.\n+\n 2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-exp.y (struct f77_boolean_val): Add comments."
    },
    {
      "sha": "5e980944b194989ab3c729bb86b5f482bf165864",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 51,
      "deletions": 52,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=c8f9160408315deceee5e8776f0b1c4d9cba4398",
      "patch": "@@ -775,36 +775,33 @@ parse_number (struct parser_state *par_state,\n \n struct token\n {\n+  /* The string to match against.  */\n   const char *oper;\n+\n+  /* The lexer token to return.  */\n   int token;\n+\n+  /* The expression opcode to embed within the token.  */\n   enum exp_opcode opcode;\n+\n+  /* When this is true the string in OPER is matched exactly including\n+     case, when this is false OPER is matched case insensitively.  */\n+  bool case_sensitive;\n };\n \n static const struct token dot_ops[] =\n {\n-  { \".and.\", BOOL_AND, BINOP_END },\n-  { \".AND.\", BOOL_AND, BINOP_END },\n-  { \".or.\", BOOL_OR, BINOP_END },\n-  { \".OR.\", BOOL_OR, BINOP_END },\n-  { \".not.\", BOOL_NOT, BINOP_END },\n-  { \".NOT.\", BOOL_NOT, BINOP_END },\n-  { \".eq.\", EQUAL, BINOP_END },\n-  { \".EQ.\", EQUAL, BINOP_END },\n-  { \".eqv.\", EQUAL, BINOP_END },\n-  { \".NEQV.\", NOTEQUAL, BINOP_END },\n-  { \".neqv.\", NOTEQUAL, BINOP_END },\n-  { \".EQV.\", EQUAL, BINOP_END },\n-  { \".ne.\", NOTEQUAL, BINOP_END },\n-  { \".NE.\", NOTEQUAL, BINOP_END },\n-  { \".le.\", LEQ, BINOP_END },\n-  { \".LE.\", LEQ, BINOP_END },\n-  { \".ge.\", GEQ, BINOP_END },\n-  { \".GE.\", GEQ, BINOP_END },\n-  { \".gt.\", GREATERTHAN, BINOP_END },\n-  { \".GT.\", GREATERTHAN, BINOP_END },\n-  { \".lt.\", LESSTHAN, BINOP_END },\n-  { \".LT.\", LESSTHAN, BINOP_END },\n-  { NULL, 0, BINOP_END }\n+  { \".and.\", BOOL_AND, BINOP_END, false },\n+  { \".or.\", BOOL_OR, BINOP_END, false },\n+  { \".not.\", BOOL_NOT, BINOP_END, false },\n+  { \".eq.\", EQUAL, BINOP_END, false },\n+  { \".eqv.\", EQUAL, BINOP_END, false },\n+  { \".neqv.\", NOTEQUAL, BINOP_END, false },\n+  { \".ne.\", NOTEQUAL, BINOP_END, false },\n+  { \".le.\", LEQ, BINOP_END, false },\n+  { \".ge.\", GEQ, BINOP_END, false },\n+  { \".gt.\", GREATERTHAN, BINOP_END, false },\n+  { \".lt.\", LESSTHAN, BINOP_END, false },\n };\n \n /* Holds the Fortran representation of a boolean, and the integer value we\n@@ -825,25 +822,25 @@ static const struct f77_boolean_val boolean_values[]  =\n   { \".false.\", 0 }\n };\n \n-static const struct token f77_keywords[] = \n+static const struct token f77_keywords[] =\n {\n-  { \"complex_16\", COMPLEX_S16_KEYWORD, BINOP_END },\n-  { \"complex_32\", COMPLEX_S32_KEYWORD, BINOP_END },\n-  { \"character\", CHARACTER, BINOP_END },\n-  { \"integer_2\", INT_S2_KEYWORD, BINOP_END },\n-  { \"logical_1\", LOGICAL_S1_KEYWORD, BINOP_END },\n-  { \"logical_2\", LOGICAL_S2_KEYWORD, BINOP_END },\n-  { \"logical_8\", LOGICAL_S8_KEYWORD, BINOP_END },\n-  { \"complex_8\", COMPLEX_S8_KEYWORD, BINOP_END },\n-  { \"integer\", INT_KEYWORD, BINOP_END },\n-  { \"logical\", LOGICAL_KEYWORD, BINOP_END },\n-  { \"real_16\", REAL_S16_KEYWORD, BINOP_END },\n-  { \"complex\", COMPLEX_S8_KEYWORD, BINOP_END },\n-  { \"sizeof\", SIZEOF, BINOP_END },\n-  { \"real_8\", REAL_S8_KEYWORD, BINOP_END },\n-  { \"real\", REAL_KEYWORD, BINOP_END },\n-  { NULL, 0, BINOP_END }\n-}; \n+  /* Historically these have always been lowercase only in GDB.  */\n+  { \"complex_16\", COMPLEX_S16_KEYWORD, BINOP_END, true },\n+  { \"complex_32\", COMPLEX_S32_KEYWORD, BINOP_END, true },\n+  { \"character\", CHARACTER, BINOP_END, true },\n+  { \"integer_2\", INT_S2_KEYWORD, BINOP_END, true },\n+  { \"logical_1\", LOGICAL_S1_KEYWORD, BINOP_END, true },\n+  { \"logical_2\", LOGICAL_S2_KEYWORD, BINOP_END, true },\n+  { \"logical_8\", LOGICAL_S8_KEYWORD, BINOP_END, true },\n+  { \"complex_8\", COMPLEX_S8_KEYWORD, BINOP_END, true },\n+  { \"integer\", INT_KEYWORD, BINOP_END, true },\n+  { \"logical\", LOGICAL_KEYWORD, BINOP_END, true },\n+  { \"real_16\", REAL_S16_KEYWORD, BINOP_END, true },\n+  { \"complex\", COMPLEX_S8_KEYWORD, BINOP_END, true },\n+  { \"sizeof\", SIZEOF, BINOP_END, true },\n+  { \"real_8\", REAL_S8_KEYWORD, BINOP_END, true },\n+  { \"real\", REAL_KEYWORD, BINOP_END, true },\n+};\n \n /* Implementation of a dynamically expandable buffer for processing input\n    characters acquired through lexptr and building a value to return in\n@@ -951,18 +948,18 @@ yylex (void)\n \t    }\n \t}\n     }\n-  \n+\n   /* See if it is a special .foo. operator.  */\n-  \n-  for (int i = 0; dot_ops[i].oper != NULL; i++)\n-    if (strncmp (tokstart, dot_ops[i].oper,\n-\t\t strlen (dot_ops[i].oper)) == 0)\n+  for (int i = 0; i < ARRAY_SIZE (dot_ops); i++)\n+    if (strncasecmp (tokstart, dot_ops[i].oper,\n+\t\t     strlen (dot_ops[i].oper)) == 0)\n       {\n+\tgdb_assert (!dot_ops[i].case_sensitive);\n \tlexptr += strlen (dot_ops[i].oper);\n \tyylval.opcode = dot_ops[i].opcode;\n \treturn dot_ops[i].token;\n       }\n-  \n+\n   /* See if it is an exponentiation operator.  */\n \n   if (strncmp (tokstart, \"**\", 2) == 0)\n@@ -1122,16 +1119,18 @@ yylex (void)\n   lexptr += namelen;\n   \n   /* Catch specific keywords.  */\n-  \n-  for (int i = 0; f77_keywords[i].oper != NULL; i++)\n+\n+  for (int i = 0; i < ARRAY_SIZE (f77_keywords); i++)\n     if (strlen (f77_keywords[i].oper) == namelen\n-\t&& strncmp (tokstart, f77_keywords[i].oper, namelen) == 0)\n+\t&& ((!f77_keywords[i].case_sensitive\n+\t     && strncasecmp (tokstart, f77_keywords[i].oper, namelen) == 0)\n+\t    || (f77_keywords[i].case_sensitive\n+\t\t&& strncmp (tokstart, f77_keywords[i].oper, namelen) == 0)))\n       {\n-\t/* \tlexptr += strlen(f77_keywords[i].operator); */ \n \tyylval.opcode = f77_keywords[i].opcode;\n \treturn f77_keywords[i].token;\n       }\n-  \n+\n   yylval.sval.ptr = tokstart;\n   yylval.sval.length = namelen;\n   "
    },
    {
      "sha": "296f03d65be1ce645126d2f7abd3b29796d2ed86",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c8f9160408315deceee5e8776f0b1c4d9cba4398",
      "patch": "@@ -1,3 +1,7 @@\n+2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/dot-ops.exp: New file.\n+\n 2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/types.exp (test_logical_literal_types_accepted):"
    },
    {
      "sha": "787471db918932b098e1cf78b5aeda26469749d9",
      "filename": "gdb/testsuite/gdb.fortran/dot-ops.exp",
      "status": "added",
      "additions": 123,
      "deletions": 0,
      "changes": 123,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/testsuite/gdb.fortran/dot-ops.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8f9160408315deceee5e8776f0b1c4d9cba4398/gdb/testsuite/gdb.fortran/dot-ops.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/dot-ops.exp?ref=c8f9160408315deceee5e8776f0b1c4d9cba4398",
      "patch": "@@ -0,0 +1,123 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file tests GDB's handling of some of the builtin logical and\n+# arithmetic dot operators in Fortran, for example `.AND.` and `.LE.`.\n+\n+load_lib \"fortran.exp\"\n+\n+if { [skip_fortran_tests] } { continue }\n+\n+proc test_dot_operations {} {\n+\n+    foreach_with_prefix format { \"uppercase\" \"lowercase\" } {\n+\tif {$format == \"uppercase\"} {\n+\t    set true \".TRUE.\"\n+\t    set false \".FALSE.\"\n+\t    set and \".AND.\"\n+\t    set or \".OR.\"\n+\t    set not \".NOT.\"\n+\t    set eqv \".EQV.\"\n+\t    set neqv \".NEQV.\"\n+\t    set eq \".EQ.\"\n+\t    set ne \".NE.\"\n+\t    set le \".LE.\"\n+\t    set ge \".GE.\"\n+\t    set lt \".LT.\"\n+\t    set gt \".GT.\"\n+\t} else {\n+\t    set true \".true.\"\n+\t    set false \".false.\"\n+\t    set and \".and.\"\n+\t    set or \".or.\"\n+\t    set not \".not.\"\n+\t    set eqv \".eqv.\"\n+\t    set neqv \".neqv.\"\n+\t    set eq \".eq.\"\n+\t    set ne \".ne.\"\n+\t    set le \".le.\"\n+\t    set ge \".ge.\"\n+\t    set lt \".lt.\"\n+\t    set gt \".gt.\"\n+\t}\n+\n+\t# Logical AND\n+\tgdb_test \"p $true $and $true\" \" = .TRUE.\"\n+\tgdb_test \"p $true $and $false\" \" = .FALSE.\"\n+\tgdb_test \"p $false $and $true\" \" = .FALSE.\"\n+\tgdb_test \"p $false $and $false\" \" = .FALSE.\"\n+\n+\t# Logical OR\n+\tgdb_test \"p $true $or $true\" \" = .TRUE.\"\n+\tgdb_test \"p $true $or $false\" \" = .TRUE.\"\n+\tgdb_test \"p $false $or $true\" \" = .TRUE.\"\n+\tgdb_test \"p $false $or $false\" \" = .FALSE.\"\n+\n+\t# Logical NOT\n+\tgdb_test \"p $not $true\" \" = .FALSE.\"\n+\tgdb_test \"p $not $false\" \" = .TRUE.\"\n+\n+\t# Logical EQV\n+\tgdb_test \"p $true $eqv $true\" \" = .TRUE.\"\n+\tgdb_test \"p $true $eqv $false\" \" = .FALSE.\"\n+\tgdb_test \"p $false $eqv $true\" \" = .FALSE.\"\n+\tgdb_test \"p $false $eqv $false\" \" = .TRUE.\"\n+\n+\t# Logical NEQV\n+\tgdb_test \"p $true $neqv $true\" \" = .FALSE.\"\n+\tgdb_test \"p $true $neqv $false\" \" = .TRUE.\"\n+\tgdb_test \"p $false $neqv $true\" \" = .TRUE.\"\n+\tgdb_test \"p $false $neqv $false\" \" = .FALSE.\"\n+\n+\t# Arithmetic EQ\n+\tgdb_test \"p 5 $eq 4\" \" = .FALSE.\"\n+\tgdb_test \"p 4 $eq 4\" \" = .TRUE.\"\n+\n+\t# Arithmetic NE\n+\tgdb_test \"p 5 $ne 4\" \" = .TRUE.\"\n+\tgdb_test \"p 4 $ne 4\" \" = .FALSE.\"\n+\n+\t# Arithmetic LE\n+\tgdb_test \"p 5 $le 4\" \" = .FALSE.\"\n+\tgdb_test \"p 4 $le 4\" \" = .TRUE.\"\n+\tgdb_test \"p 3 $le 4\" \" = .TRUE.\"\n+\n+\t# Arithmetic LT\n+\tgdb_test \"p 5 $lt 4\" \" = .FALSE.\"\n+\tgdb_test \"p 4 $lt 4\" \" = .FALSE.\"\n+\tgdb_test \"p 3 $lt 4\" \" = .TRUE.\"\n+\n+\t# Arithmetic GE\n+\tgdb_test \"p 5 $ge 4\" \" = .TRUE.\"\n+\tgdb_test \"p 4 $ge 4\" \" = .TRUE.\"\n+\tgdb_test \"p 3 $ge 4\" \" = .FALSE.\"\n+\n+\t# Arithmetic GT\n+\tgdb_test \"p 5 $gt 4\" \" = .TRUE.\"\n+\tgdb_test \"p 4 $gt 4\" \" = .FALSE.\"\n+\tgdb_test \"p 3 $gt 4\" \" = .FALSE.\"\n+    }\n+}\n+\n+# Start of test script.\n+\n+clean_restart\n+\n+if [set_lang_fortran] then {\n+    test_dot_operations\n+} else {\n+    warning \"$test_name tests suppressed.\" 0\n+}\n+"
    }
  ]
}