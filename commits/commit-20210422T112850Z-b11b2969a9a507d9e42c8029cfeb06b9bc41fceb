{
  "sha": "b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjExYjI5NjlhOWE1MDdkOWU0MmM4MDI5Y2ZlYjA2YjliYzQxZmNlYg==",
  "commit": {
    "author": {
      "name": "Cl?ment Chigot",
      "email": "clement.chigot@atos.net",
      "date": "2021-04-22T11:28:50Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-22T11:28:50Z"
    },
    "message": "Harmonize and improve auxiliary entries support for XCOFF\n\nbfd/ChangeLog:\n\t* coff-rs6000.c (_bfd_xcoff_swap_aux_in): Add errors for\n\tunsupported storage class or auxialiry entries.\n\tImprove and adapt to new aux structures.\n\tAdd C_DWARF support.\n\t(_bfd_xcoff_swap_aux_out): Likewise.\n\t* coff64-rs6000.c (_bfd_xcoff64_swap_aux_in): Likewise.\n\t(_bfd_xcoff64_swap_aux_out): Likewise.\n\nbinutils/ChangeLog:\n\t* od-xcoff.c (dump_xcoff32_symbols): Adapt to new\n\taux structures.\n\ninclude/ChangeLog:\n\t* coff/internal.h (union internal_auxent):\n\t Add x_sect structure.\n\t* coff/rs6000.h (union external_auxent): Rework to\n\tmatch official documentation.\n\t* coff/rs6k64.h (union external_auxent): Likewise.\n\t(_AUX_SECT): New define.",
    "tree": {
      "sha": "3137d85d940c2357e5f0ecaf383dce391b97d395",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3137d85d940c2357e5f0ecaf383dce391b97d395"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/comments",
  "author": {
    "login": "Helflym",
    "id": 23002587,
    "node_id": "MDQ6VXNlcjIzMDAyNTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/23002587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Helflym",
    "html_url": "https://github.com/Helflym",
    "followers_url": "https://api.github.com/users/Helflym/followers",
    "following_url": "https://api.github.com/users/Helflym/following{/other_user}",
    "gists_url": "https://api.github.com/users/Helflym/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Helflym/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Helflym/subscriptions",
    "organizations_url": "https://api.github.com/users/Helflym/orgs",
    "repos_url": "https://api.github.com/users/Helflym/repos",
    "events_url": "https://api.github.com/users/Helflym/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Helflym/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d018cd835ccdbfcfbc1e144a836974a9b9c385b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d018cd835ccdbfcfbc1e144a836974a9b9c385b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d018cd835ccdbfcfbc1e144a836974a9b9c385b6"
    }
  ],
  "stats": {
    "total": 636,
    "additions": 330,
    "deletions": 306
  },
  "files": [
    {
      "sha": "abb9d5f34d766f4cfcb926d2ae2d775b9e202ca7",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -1,3 +1,13 @@\n+2021-04-22  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* coff-rs6000.c (_bfd_xcoff_swap_aux_in): Add errors for\n+\tunsupported storage class or auxialiry entries.\n+\tImprove and adapt to new aux structures.\n+\tAdd C_DWARF support.\n+\t(_bfd_xcoff_swap_aux_out): Likewise.\n+\t* coff64-rs6000.c (_bfd_xcoff64_swap_aux_in): Likewise.\n+\t(_bfd_xcoff64_swap_aux_out): Likewise.\n+\n 2021-04-21  Eli Zaretskii  <eliz@gnu.org>\n \n \tPR 27760"
    },
    {
      "sha": "491efbae80c086dc0eeb8aae32efd9f81127482d",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 74,
      "deletions": 118,
      "changes": 192,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -470,14 +470,22 @@ _bfd_xcoff_swap_sym_out (bfd *abfd, void * inp, void * extp)\n }\n \n void\n-_bfd_xcoff_swap_aux_in (bfd *abfd, void * ext1, int type, int in_class,\n-\t\t\tint indx, int numaux, void * in1)\n+_bfd_xcoff_swap_aux_in (bfd *abfd, void * ext1, int type ATTRIBUTE_UNUSED,\n+\t\t\tint in_class, int indx, int numaux, void * in1)\n {\n   AUXENT * ext = (AUXENT *)ext1;\n   union internal_auxent *in = (union internal_auxent *)in1;\n \n   switch (in_class)\n     {\n+    default:\n+      _bfd_error_handler\n+\t/* xgettext: c-format */\n+\t(_(\"%pB: unsupported swap_aux_in for storage class %#x\"),\n+\t abfd, (unsigned int) in_class);\n+      bfd_set_error (bfd_error_bad_value);\n+      break;\n+\n     case C_FILE:\n       if (ext->x_file.x_n.x_fname[0] == 0)\n \t{\n@@ -486,21 +494,13 @@ _bfd_xcoff_swap_aux_in (bfd *abfd, void * ext1, int type, int in_class,\n \t    H_GET_32 (abfd, ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\t{\n-\t  if (numaux > 1)\n-\t    {\n-\t      if (indx == 0)\n-\t\tmemcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname,\n-\t\t\tnumaux * sizeof (AUXENT));\n-\t    }\n-\t  else\n-\t    {\n-\t      memcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n-\t    }\n-\t}\n-      goto end;\n+\tmemcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n+      break;\n \n-      /* RS/6000 \"csect\" auxents */\n+      /* RS/6000 \"csect\" auxents.\n+         There is always a CSECT auxiliary entry. But functions can\n+         have FCN ones too. In this case, CSECT is always the last\n+         one. */\n     case C_EXT:\n     case C_AIX_WEAKEXT:\n     case C_HIDEXT:\n@@ -516,81 +516,62 @@ _bfd_xcoff_swap_aux_in (bfd *abfd, void * ext1, int type, int in_class,\n \t  in->x_csect.x_smclas   = H_GET_8 (abfd, ext->x_csect.x_smclas);\n \t  in->x_csect.x_stab     = H_GET_32 (abfd, ext->x_csect.x_stab);\n \t  in->x_csect.x_snstab   = H_GET_16 (abfd, ext->x_csect.x_snstab);\n-\t  goto end;\n+\t}\n+      else\n+\t{\n+\t  /* x_exptr isn't supported.  */\n+\t  in->x_sym.x_misc.x_fsize\n+\t    = H_GET_32 (abfd, ext->x_fcn.x_fsize);\n+\t  in->x_sym.x_fcnary.x_fcn.x_lnnoptr\n+\t    = H_GET_32 (abfd, ext->x_fcn.x_lnnoptr);\n+\t  in->x_sym.x_fcnary.x_fcn.x_endndx.l\n+\t    = H_GET_32 (abfd, ext->x_fcn.x_endndx);\n \t}\n       break;\n \n     case C_STAT:\n-    case C_LEAFSTAT:\n-    case C_HIDDEN:\n-      if (type == T_NULL)\n-\t{\n-\t  in->x_scn.x_scnlen = H_GET_32 (abfd, ext->x_scn.x_scnlen);\n-\t  in->x_scn.x_nreloc = H_GET_16 (abfd, ext->x_scn.x_nreloc);\n-\t  in->x_scn.x_nlinno = H_GET_16 (abfd, ext->x_scn.x_nlinno);\n-\t  /* PE defines some extra fields; we zero them out for\n-\t     safety.  */\n-\t  in->x_scn.x_checksum = 0;\n-\t  in->x_scn.x_associated = 0;\n-\t  in->x_scn.x_comdat = 0;\n-\n-\t  goto end;\n-\t}\n+      in->x_scn.x_scnlen = H_GET_32 (abfd, ext->x_scn.x_scnlen);\n+      in->x_scn.x_nreloc = H_GET_16 (abfd, ext->x_scn.x_nreloc);\n+      in->x_scn.x_nlinno = H_GET_16 (abfd, ext->x_scn.x_nlinno);\n+      /* PE defines some extra fields; we zero them out for\n+\t safety.  */\n+      in->x_scn.x_checksum = 0;\n+      in->x_scn.x_associated = 0;\n+      in->x_scn.x_comdat = 0;\n       break;\n-    }\n \n-  in->x_sym.x_tagndx.l = H_GET_32 (abfd, ext->x_sym.x_tagndx);\n-  in->x_sym.x_tvndx = H_GET_16 (abfd, ext->x_sym.x_tvndx);\n+    case C_BLOCK:\n+    case C_FCN:\n+      in->x_sym.x_misc.x_lnsz.x_lnno\n+\t= H_GET_32 (abfd, ext->x_sym.x_lnno);\n+      break;\n \n-  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)\n-      || ISTAG (in_class))\n-    {\n-      in->x_sym.x_fcnary.x_fcn.x_lnnoptr =\n-\tH_GET_32 (abfd, ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);\n-      in->x_sym.x_fcnary.x_fcn.x_endndx.l =\n-\tH_GET_32 (abfd, ext->x_sym.x_fcnary.x_fcn.x_endndx);\n-    }\n-  else\n-    {\n-      in->x_sym.x_fcnary.x_ary.x_dimen[0] =\n-\tH_GET_16 (abfd, ext->x_sym.x_fcnary.x_ary.x_dimen[0]);\n-      in->x_sym.x_fcnary.x_ary.x_dimen[1] =\n-\tH_GET_16 (abfd, ext->x_sym.x_fcnary.x_ary.x_dimen[1]);\n-      in->x_sym.x_fcnary.x_ary.x_dimen[2] =\n-\tH_GET_16 (abfd, ext->x_sym.x_fcnary.x_ary.x_dimen[2]);\n-      in->x_sym.x_fcnary.x_ary.x_dimen[3] =\n-\tH_GET_16 (abfd, ext->x_sym.x_fcnary.x_ary.x_dimen[3]);\n-    }\n+    case C_DWARF:\n+      in->x_sect.x_scnlen = H_GET_32 (abfd, ext->x_sect.x_scnlen);\n+      in->x_sect.x_nreloc = H_GET_32 (abfd, ext->x_sect.x_nreloc);\n+      break;\n \n-  if (ISFCN (type))\n-    {\n-      in->x_sym.x_misc.x_fsize = H_GET_32 (abfd, ext->x_sym.x_misc.x_fsize);\n     }\n-  else\n-    {\n-      in->x_sym.x_misc.x_lnsz.x_lnno =\n-\tH_GET_16 (abfd, ext->x_sym.x_misc.x_lnsz.x_lnno);\n-      in->x_sym.x_misc.x_lnsz.x_size =\n-\tH_GET_16 (abfd, ext->x_sym.x_misc.x_lnsz.x_size);\n-    }\n-\n- end: ;\n-  /* The semicolon is because MSVC doesn't like labels at\n-     end of block.  */\n }\n \n unsigned int\n-_bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type, int in_class,\n-\t\t\t int indx ATTRIBUTE_UNUSED,\n-\t\t\t int numaux ATTRIBUTE_UNUSED,\n-\t\t\t void * extp)\n+_bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type ATTRIBUTE_UNUSED,\n+\t\t\t int in_class, int indx, int numaux, void * extp)\n {\n   union internal_auxent *in = (union internal_auxent *)inp;\n   AUXENT *ext = (AUXENT *)extp;\n \n   memset (ext, 0, bfd_coff_auxesz (abfd));\n   switch (in_class)\n     {\n+    default:\n+      _bfd_error_handler\n+\t/* xgettext: c-format */\n+\t(_(\"%pB: unsupported swap_aux_out for storage class %#x\"),\n+\t abfd, (unsigned int) in_class);\n+      bfd_set_error (bfd_error_bad_value);\n+      break;\n+\n     case C_FILE:\n       if (in->x_file.x_fname[0] == 0)\n \t{\n@@ -599,10 +580,8 @@ _bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type, int in_class,\n \t\t    ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\t{\n-\t  memcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);\n-\t}\n-      goto end;\n+\tmemcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);\n+      break;\n \n       /* RS/6000 \"csect\" auxents */\n     case C_EXT:\n@@ -620,57 +599,34 @@ _bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type, int in_class,\n \t  H_PUT_8 (abfd, in->x_csect.x_smclas, ext->x_csect.x_smclas);\n \t  H_PUT_32 (abfd, in->x_csect.x_stab, ext->x_csect.x_stab);\n \t  H_PUT_16 (abfd, in->x_csect.x_snstab, ext->x_csect.x_snstab);\n-\t  goto end;\n \t}\n-      break;\n-\n-    case C_STAT:\n-    case C_LEAFSTAT:\n-    case C_HIDDEN:\n-      if (type == T_NULL)\n+      else\n \t{\n-\t  H_PUT_32 (abfd, in->x_scn.x_scnlen, ext->x_scn.x_scnlen);\n-\t  H_PUT_16 (abfd, in->x_scn.x_nreloc, ext->x_scn.x_nreloc);\n-\t  H_PUT_16 (abfd, in->x_scn.x_nlinno, ext->x_scn.x_nlinno);\n-\t  goto end;\n+\t  H_PUT_32 (abfd, in->x_sym.x_misc.x_fsize, ext->x_fcn.x_fsize);\n+\t  H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_lnnoptr,\n+\t\t    ext->x_fcn.x_lnnoptr);\n+\t  H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_endndx.l,\n+\t\t    ext->x_fcn.x_endndx);\n \t}\n       break;\n-    }\n \n-  H_PUT_32 (abfd, in->x_sym.x_tagndx.l, ext->x_sym.x_tagndx);\n-  H_PUT_16 (abfd, in->x_sym.x_tvndx, ext->x_sym.x_tvndx);\n+    case C_STAT:\n+      H_PUT_32 (abfd, in->x_scn.x_scnlen, ext->x_scn.x_scnlen);\n+      H_PUT_16 (abfd, in->x_scn.x_nreloc, ext->x_scn.x_nreloc);\n+      H_PUT_16 (abfd, in->x_scn.x_nlinno, ext->x_scn.x_nlinno);\n+      break;\n \n-  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)\n-      || ISTAG (in_class))\n-    {\n-      H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_lnnoptr,\n-\t\text->x_sym.x_fcnary.x_fcn.x_lnnoptr);\n-      H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_endndx.l,\n-\t\text->x_sym.x_fcnary.x_fcn.x_endndx);\n-    }\n-  else\n-    {\n-      H_PUT_16 (abfd, in->x_sym.x_fcnary.x_ary.x_dimen[0],\n-\t\text->x_sym.x_fcnary.x_ary.x_dimen[0]);\n-      H_PUT_16 (abfd, in->x_sym.x_fcnary.x_ary.x_dimen[1],\n-\t\text->x_sym.x_fcnary.x_ary.x_dimen[1]);\n-      H_PUT_16 (abfd, in->x_sym.x_fcnary.x_ary.x_dimen[2],\n-\t\text->x_sym.x_fcnary.x_ary.x_dimen[2]);\n-      H_PUT_16 (abfd, in->x_sym.x_fcnary.x_ary.x_dimen[3],\n-\t\text->x_sym.x_fcnary.x_ary.x_dimen[3]);\n-    }\n+    case C_BLOCK:\n+    case C_FCN:\n+      H_PUT_32 (abfd, in->x_sym.x_misc.x_lnsz.x_lnno, ext->x_sym.x_lnno);\n+      break;\n \n-  if (ISFCN (type))\n-    H_PUT_32 (abfd, in->x_sym.x_misc.x_fsize, ext->x_sym.x_misc.x_fsize);\n-  else\n-    {\n-      H_PUT_16 (abfd, in->x_sym.x_misc.x_lnsz.x_lnno,\n-\t\text->x_sym.x_misc.x_lnsz.x_lnno);\n-      H_PUT_16 (abfd, in->x_sym.x_misc.x_lnsz.x_size,\n-\t\text->x_sym.x_misc.x_lnsz.x_size);\n+    case C_DWARF:\n+      H_PUT_32 (abfd, in->x_sect.x_scnlen, ext->x_sect.x_scnlen);\n+      H_PUT_32 (abfd, in->x_sect.x_nreloc, ext->x_sect.x_nreloc);\n+      break;\n     }\n \n- end:\n   return bfd_coff_auxesz (abfd);\n }\n \f"
    },
    {
      "sha": "9e9f9c2992fe3d1ec969e82c0e7e2bb66b3683b0",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 119,
      "deletions": 82,
      "changes": 201,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -362,33 +362,54 @@ _bfd_xcoff64_swap_sym_out (bfd *abfd, void *inp, void *extp)\n }\n \n static void\n-_bfd_xcoff64_swap_aux_in (bfd *abfd, void *ext1, int type, int in_class,\n-\t\t\t  int indx, int numaux, void *in1)\n+_bfd_xcoff64_swap_aux_in (bfd *abfd, void *ext1, int type ATTRIBUTE_UNUSED,\n+\t\t\t  int in_class, int indx, int numaux, void *in1)\n {\n   union external_auxent *ext = (union external_auxent *) ext1;\n   union internal_auxent *in = (union internal_auxent *) in1;\n+  unsigned char auxtype;\n \n   switch (in_class)\n     {\n+    default:\n+      _bfd_error_handler\n+\t/* xgettext: c-format */\n+\t(_(\"%pB: unsupported swap_aux_in for storage class %#x\"),\n+\t abfd, (unsigned int) in_class);\n+      bfd_set_error (bfd_error_bad_value);\n+      break;\n+\n     case C_FILE:\n+      auxtype = H_GET_8 (abfd, ext->x_file.x_auxtype);\n+      if (auxtype != _AUX_FILE)\n+\tgoto error;\n+\n       if (ext->x_file.x_n.x_n.x_zeroes[0] == 0)\n \t{\n \t  in->x_file.x_n.x_zeroes = 0;\n \t  in->x_file.x_n.x_offset =\n \t    H_GET_32 (abfd, ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\t{\n-\t  memcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n-\t}\n-      goto end;\n+\tmemcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n+      break;\n \n-      /* RS/6000 \"csect\" auxents */\n+      /* RS/6000 \"csect\" auxents.\n+         There is always a CSECT auxiliary entry. But functions can\n+         have FCN and EXCEPT ones too. In this case, CSECT is always the last\n+         one.\n+         For now, we only support FCN types.  */\n     case C_EXT:\n     case C_AIX_WEAKEXT:\n     case C_HIDEXT:\n       if (indx + 1 == numaux)\n \t{\n+\t  /* C_EXT can have several aux enties. But the _AUX_CSECT is always\n+\t     the last one.  */\n+\t  auxtype = H_GET_8 (abfd, ext->x_csect.x_auxtype);\n+\t  if (auxtype != _AUX_CSECT)\n+\t    goto error;\n+\n \t  bfd_signed_vma h = 0;\n \t  bfd_vma l = 0;\n \n@@ -404,62 +425,82 @@ _bfd_xcoff64_swap_aux_in (bfd *abfd, void *ext1, int type, int in_class,\n \t     byte orders.  */\n \t  in->x_csect.x_smtyp = H_GET_8 (abfd, ext->x_csect.x_smtyp);\n \t  in->x_csect.x_smclas = H_GET_8 (abfd, ext->x_csect.x_smclas);\n-\t  goto end;\n+\t}\n+      else\n+\t{\n+\t  /* It can also be a _AUX_EXCEPT entry. But it's not supported\n+\t     for now. */\n+\t  auxtype = H_GET_8 (abfd, ext->x_fcn.x_auxtype);\n+\t  if (auxtype != _AUX_FCN)\n+\t    goto error;\n+\n+\t  in->x_sym.x_fcnary.x_fcn.x_lnnoptr\n+\t    = H_GET_64 (abfd, ext->x_fcn.x_lnnoptr);\n+\t  in->x_sym.x_misc.x_fsize\n+\t    = H_GET_32 (abfd, ext->x_fcn.x_fsize);\n+\t  in->x_sym.x_fcnary.x_fcn.x_endndx.l\n+\t    = H_GET_32 (abfd, ext->x_fcn.x_endndx);\n \t}\n       break;\n \n     case C_STAT:\n-    case C_LEAFSTAT:\n-    case C_HIDDEN:\n-      if (type == T_NULL)\n-\t{\n-\t  /* PE defines some extra fields; we zero them out for\n-\t     safety.  */\n-\t  in->x_scn.x_checksum = 0;\n-\t  in->x_scn.x_associated = 0;\n-\t  in->x_scn.x_comdat = 0;\n-\n-\t  goto end;\n-\t}\n+      _bfd_error_handler\n+\t/* xgettext: c-format */\n+\t(_(\"%pB: C_STAT isn't supported by XCOFF64\"),\n+\t abfd);\n+      bfd_set_error (bfd_error_bad_value);\n       break;\n-    }\n \n-  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)\n-      || ISTAG (in_class))\n-    {\n-      in->x_sym.x_fcnary.x_fcn.x_lnnoptr\n-\t= H_GET_64 (abfd, ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);\n-      in->x_sym.x_fcnary.x_fcn.x_endndx.l\n-\t= H_GET_32 (abfd, ext->x_sym.x_fcnary.x_fcn.x_endndx);\n-    }\n-  if (ISFCN (type))\n-    {\n-      in->x_sym.x_misc.x_fsize\n-\t= H_GET_32 (abfd, ext->x_sym.x_fcnary.x_fcn.x_fsize);\n-    }\n-  else\n-    {\n+    case C_BLOCK:\n+    case C_FCN:\n+      auxtype = H_GET_8 (abfd, ext->x_sym.x_auxtype);\n+      if (auxtype != _AUX_SYM)\n+\tgoto error;\n+\n       in->x_sym.x_misc.x_lnsz.x_lnno\n-\t= H_GET_32 (abfd, ext->x_sym.x_fcnary.x_lnsz.x_lnno);\n-      in->x_sym.x_misc.x_lnsz.x_size\n-\t= H_GET_16 (abfd, ext->x_sym.x_fcnary.x_lnsz.x_size);\n+\t= H_GET_32 (abfd, ext->x_sym.x_lnno);\n+      break;\n+\n+    case C_DWARF:\n+      auxtype = H_GET_8 (abfd, ext->x_sect.x_auxtype);\n+      if (auxtype != _AUX_SECT)\n+\tgoto error;\n+\n+      in->x_sect.x_scnlen = H_GET_64 (abfd, ext->x_sect.x_scnlen);\n+      in->x_sect.x_nreloc = H_GET_64 (abfd, ext->x_sect.x_nreloc);\n+      break;\n     }\n \n- end: ;\n+  return;\n+\n+ error:\n+  _bfd_error_handler\n+    /* xgettext: c-format */\n+    (_(\"%pB: wrong auxtype %#x for storage class %#x\"),\n+     abfd, auxtype, (unsigned int) in_class);\n+  bfd_set_error (bfd_error_bad_value);\n+\n+\n }\n \n static unsigned int\n-_bfd_xcoff64_swap_aux_out (bfd *abfd, void *inp, int type, int in_class,\n-\t\t\t   int indx ATTRIBUTE_UNUSED,\n-\t\t\t   int numaux ATTRIBUTE_UNUSED,\n-\t\t\t   void *extp)\n+_bfd_xcoff64_swap_aux_out (bfd *abfd, void *inp, int type ATTRIBUTE_UNUSED,\n+\t\t\t   int in_class, int indx, int numaux, void *extp)\n {\n   union internal_auxent *in = (union internal_auxent *) inp;\n   union external_auxent *ext = (union external_auxent *) extp;\n \n   memset (ext, 0, bfd_coff_auxesz (abfd));\n   switch (in_class)\n     {\n+    default:\n+      _bfd_error_handler\n+\t/* xgettext: c-format */\n+\t(_(\"%pB: unsupported swap_aux_out for storage class %#x\"),\n+\t abfd, (unsigned int) in_class);\n+      bfd_set_error (bfd_error_bad_value);\n+      break;\n+\n     case C_FILE:\n       if (in->x_file.x_n.x_zeroes == 0)\n \t{\n@@ -468,13 +509,15 @@ _bfd_xcoff64_swap_aux_out (bfd *abfd, void *inp, int type, int in_class,\n \t\t    ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\t{\n-\t  memcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);\n-\t}\n-      H_PUT_8 (abfd, _AUX_FILE, ext->x_auxtype.x_auxtype);\n-      goto end;\n+\tmemcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);\n+      H_PUT_8 (abfd, _AUX_FILE, ext->x_file.x_auxtype);\n+      break;\n \n-      /* RS/6000 \"csect\" auxents */\n+      /* RS/6000 \"csect\" auxents.\n+         There is always a CSECT auxiliary entry. But functions can\n+         have FCN and EXCEPT ones too. In this case, CSECT is always the last\n+         one.\n+         For now, we only support FCN types.  */\n     case C_EXT:\n     case C_AIX_WEAKEXT:\n     case C_HIDEXT:\n@@ -493,45 +536,39 @@ _bfd_xcoff64_swap_aux_out (bfd *abfd, void *inp, int type, int in_class,\n \t     byte orders.  */\n \t  H_PUT_8 (abfd, in->x_csect.x_smtyp, ext->x_csect.x_smtyp);\n \t  H_PUT_8 (abfd, in->x_csect.x_smclas, ext->x_csect.x_smclas);\n-\t  H_PUT_8 (abfd, _AUX_CSECT, ext->x_auxtype.x_auxtype);\n-\t  goto end;\n+\t  H_PUT_8 (abfd, _AUX_CSECT, ext->x_csect.x_auxtype);\n+\t}\n+      else\n+\t{\n+\t  H_PUT_64 (abfd, in->x_sym.x_fcnary.x_fcn.x_lnnoptr,\n+\t\t    ext->x_fcn.x_lnnoptr);\n+\t  H_PUT_32 (abfd, in->x_sym.x_misc.x_fsize, ext->x_fcn.x_fsize);\n+\t  H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_endndx.l,\n+\t\t    ext->x_fcn.x_endndx);\n+\t  H_PUT_8 (abfd, _AUX_FCN, ext->x_csect.x_auxtype);\n \t}\n       break;\n \n     case C_STAT:\n-    case C_LEAFSTAT:\n-    case C_HIDDEN:\n-      if (type == T_NULL)\n-\t{\n-\t  goto end;\n-\t}\n+      _bfd_error_handler\n+\t/* xgettext: c-format */\n+\t(_(\"%pB: C_STAT isn't supported by XCOFF64\"),\n+\t abfd);\n+      bfd_set_error (bfd_error_bad_value);\n       break;\n-    }\n \n-  if (in_class == C_BLOCK || in_class == C_FCN || ISFCN (type)\n-      || ISTAG (in_class))\n-    {\n-      H_PUT_64 (abfd, in->x_sym.x_fcnary.x_fcn.x_lnnoptr,\n-\t       ext->x_sym.x_fcnary.x_fcn.x_lnnoptr);\n-      H_PUT_8 (abfd, _AUX_FCN,\n-\t       ext->x_auxtype.x_auxtype);\n-      H_PUT_32 (abfd, in->x_sym.x_fcnary.x_fcn.x_endndx.l,\n-\t       ext->x_sym.x_fcnary.x_fcn.x_endndx);\n-    }\n-  if (ISFCN (type))\n-    {\n-      H_PUT_32 (abfd, in->x_sym.x_misc.x_fsize,\n-\t       ext->x_sym.x_fcnary.x_fcn.x_fsize);\n-    }\n-  else\n-    {\n-      H_PUT_32 (abfd, in->x_sym.x_misc.x_lnsz.x_lnno,\n-\t       ext->x_sym.x_fcnary.x_lnsz.x_lnno);\n-      H_PUT_16 (abfd, in->x_sym.x_misc.x_lnsz.x_size,\n-\t       ext->x_sym.x_fcnary.x_lnsz.x_size);\n-    }\n+    case C_BLOCK:\n+    case C_FCN:\n+      H_PUT_32 (abfd, in->x_sym.x_misc.x_lnsz.x_lnno, ext->x_sym.x_lnno);\n+      H_PUT_8 (abfd, _AUX_SYM, ext->x_sym.x_auxtype);\n+      break;\n \n- end:\n+    case C_DWARF:\n+      H_PUT_64 (abfd, in->x_sect.x_scnlen, ext->x_sect.x_scnlen);\n+      H_PUT_64 (abfd, in->x_sect.x_nreloc, ext->x_sect.x_nreloc);\n+      H_PUT_8 (abfd, _AUX_SECT, ext->x_sect.x_auxtype);\n+      break;\n+    }\n \n   return bfd_coff_auxesz (abfd);\n }"
    },
    {
      "sha": "9a1fd5dae09696a84d84e294af8757983ec5776a",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-22  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* od-xcoff.c (dump_xcoff32_symbols): Adapt to new\n+\taux structures.\n+\n 2021-04-21  Nick Lott  <nick.lott@gmail.com>\n \n \tPR 27672"
    },
    {
      "sha": "02264503b15b91d41c97ab1af8a413ab4c4d8f3e",
      "filename": "binutils/od-xcoff.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/binutils/od-xcoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/binutils/od-xcoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/od-xcoff.c?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -838,13 +838,13 @@ dump_xcoff32_symbols (bfd *abfd, struct xcoff_dump *data)\n                 {\n                   /* Function aux entry  (Do not translate).  */\n                   printf (\"  exptr: %08x fsize: %08x lnnoptr: %08x endndx: %u\\n\",\n-                          (unsigned)bfd_h_get_32 (abfd, aux->x_sym.x_tagndx),\n+                          (unsigned)bfd_h_get_32 (abfd, aux->x_fcn.x_exptr),\n                           (unsigned)bfd_h_get_32\n-                            (abfd, aux->x_sym.x_misc.x_fsize),\n+                            (abfd, aux->x_fcn.x_fsize),\n                           (unsigned)bfd_h_get_32\n-                            (abfd, aux->x_sym.x_fcnary.x_fcn.x_lnnoptr),\n+                            (abfd, aux->x_fcn.x_lnnoptr),\n                           (unsigned)bfd_h_get_32\n-                            (abfd, aux->x_sym.x_fcnary.x_fcn.x_endndx));\n+                            (abfd, aux->x_fcn.x_endndx));\n                 }\n               else if (j == 1 || (j == 0 && s->sym.numaux == 1))\n                 {\n@@ -899,7 +899,7 @@ dump_xcoff32_symbols (bfd *abfd, struct xcoff_dump *data)\n             case C_FCN:\n               printf (\"  lnno: %u\\n\",\n                       (unsigned)bfd_h_get_16\n-                      (abfd, aux->x_sym.x_misc.x_lnsz.x_lnno));\n+                      (abfd, aux->x_sym.x_lnno));\n               break;\n             default:\n               /* Do not translate - generic field name.  */"
    },
    {
      "sha": "0f277f95a61b4f0bbd7fa9911d20e32380dc8bea",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -1,3 +1,12 @@\n+2021-04-22  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* coff/internal.h (union internal_auxent):\n+\t Add x_sect structure.\n+\t* coff/rs6000.h (union external_auxent): Rework to\n+\tmatch official documentation.\n+\t* coff/rs6k64.h (union external_auxent): Likewise.\n+\t(_AUX_SECT): New define.\n+\n 2021-04-21  Eli Zaretskii  <eliz@gnu.org>\n \n \tPR 27760"
    },
    {
      "sha": "e79bf560c6e73606f23ec41395b13e447f59d06c",
      "filename": "include/coff/internal.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/coff/internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/coff/internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/internal.h?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -659,6 +659,12 @@ union internal_auxent\n /* \t\t14\t??? */\n #define\tXMC_TC0\t15\t\t/* Read-write TOC anchor */\n #define XMC_TD\t16\t\t/* Read-write data in TOC */\n+\n+  struct\n+  {\n+    long x_scnlen;              /* Section length */\n+    long x_nreloc;              /* Number of relocation entries */\n+  } x_sect;\n };\n \n /********************** RELOCATION DIRECTIVES **********************/"
    },
    {
      "sha": "e60efff23b6d1b633ddfac668cd4bcf93babe307",
      "filename": "include/coff/rs6000.h",
      "status": "modified",
      "additions": 48,
      "deletions": 53,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/coff/rs6000.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/coff/rs6000.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/rs6000.h?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -153,59 +153,54 @@ struct external_syment\n   \n \n union external_auxent {\n-\tstruct {\n-\t\tchar x_tagndx[4];\t/* str, un, or enum tag indx */\n-\t\tunion {\n-\t\t\tstruct {\n-\t\t\t    char  x_lnno[2]; /* declaration line number */\n-\t\t\t    char  x_size[2]; /* str/union/array size */\n-\t\t\t} x_lnsz;\n-\t\t\tchar x_fsize[4];\t/* size of function */\n-\t\t} x_misc;\n-\t\tunion {\n-\t\t\tstruct {\t\t/* if ISFCN, tag, or .bb */\n-\t\t\t    char x_lnnoptr[4];\t/* ptr to fcn line # */\n-\t\t\t    char x_endndx[4];\t/* entry ndx past block end */\n-\t\t\t} x_fcn;\n-\t\t\tstruct {\t\t/* if ISARY, up to 4 dimen. */\n-\t\t\t    char x_dimen[E_DIMNUM][2];\n-\t\t\t} x_ary;\n-\t\t} x_fcnary;\n-\t\tchar x_tvndx[2];\t\t/* tv index */\n-\t} x_sym;\n-\n-        struct {\n-                union {\n-                        char x_fname[E_FILNMLEN];\n-                        struct {\n-                                char x_zeroes[4];\n-                                char x_offset[4];\n-                        } x_n;\n-                } x_n;\n-                char x_ftype[1];\n-        } x_file;\n-\n-\tstruct {\n-\t\tchar x_scnlen[4];\t\t\t/* section length */\n-\t\tchar x_nreloc[2];\t/* # relocation entries */\n-\t\tchar x_nlinno[2];\t/* # line numbers */\n-\t} x_scn;\n-\n-        struct {\n-\t\tchar x_tvfill[4];\t/* tv fill value */\n-\t\tchar x_tvlen[2];\t/* length of .tv */\n-\t\tchar x_tvran[2][2];\t/* tv range */\n-\t} x_tv;\t\t/* info about .tv section (in auxent of symbol .tv)) */\n-\n-\tstruct {\n-\t\tunsigned char x_scnlen[4];\n-\t\tunsigned char x_parmhash[4];\n-\t\tunsigned char x_snhash[2];\n-\t\tunsigned char x_smtyp[1];\n-\t\tunsigned char x_smclas[1];\n-\t\tunsigned char x_stab[4];\n-\t\tunsigned char x_snstab[2];\n-\t} x_csect;\n+  struct {\n+    char x_pad1[2];\n+    char x_lnno[4]; \t/* Source line number */\n+    char x_pad[12];\n+  } x_sym;\n+\n+  struct {\n+    char x_exptr[4];\n+    char x_fsize[4];\n+    char x_lnnoptr[4];\n+    char x_endndx[4];\n+    char x_pad[1];\n+  } x_fcn;\n+\n+  struct {\n+    union {\n+      char x_fname[E_FILNMLEN];\n+      struct {\n+\tchar x_zeroes[4];\n+\tchar x_offset[4];\n+      } x_n;\n+    } x_n;\n+    char x_ftype[1];\n+  } x_file;\n+\n+  struct {\n+    char x_scnlen[4];\t/* section length */\n+    char x_nreloc[2];\t/* # relocation entries */\n+    char x_nlinno[2];\t/* # line numbers */\n+    char x_pad[10];\n+  } x_scn;\n+\n+  struct {\n+    char x_scnlen[4];\n+    char x_parmhash[4];\n+    char x_snhash[2];\n+    char x_smtyp[1];\n+    char x_smclas[1];\n+    char x_stab[4];\n+    char x_snstab[2];\n+  } x_csect;\n+\n+  struct {\n+    char x_scnlen[4];\n+    char x_pad1[4];\n+    char x_nreloc[4];\n+    char x_pad2[6];\n+  } x_sect;\n \n };\n "
    },
    {
      "sha": "58ffd6eb2f4706a1a123667e8d7c4af453ab9f4d",
      "filename": "include/coff/rs6k64.h",
      "status": "modified",
      "additions": 54,
      "deletions": 48,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/coff/rs6k64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb/include/coff/rs6k64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/rs6k64.h?ref=b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "patch": "@@ -144,54 +144,59 @@ struct external_syment\n \n union external_auxent\n {\n-    struct {\n-    \tunion {\n-\t    struct {\n-\t\tchar x_lnno[4]; \t/* declaration line number */\n-\t\tchar x_size[2]; \t/* str/union/array size */\n-\t    } x_lnsz;\n-\t    struct {\n-\t\tchar x_lnnoptr[8];/* ptr to fcn line */\n-\t\tchar x_fsize[4];\t /* size of function */\n-\t\tchar x_endndx[4];\t /* entry ndx past block end */\n-\t    } x_fcn;\n- \t} x_fcnary;\n-    } x_sym;\n-         \n-    struct {\n-        union {\n-            char x_fname[E_FILNMLEN];\n-            struct {\n-\t        char x_zeroes[4];\n-                char x_offset[4];\n-\t        char x_pad[6];\n-            } x_n;\n-        } x_n;\n-        unsigned char x_ftype[1];\n-        unsigned char x_resv[2];\n-    } x_file;\n-\n-    struct {\n-\tchar x_exptr[8];\n-\tchar x_fsize[4];\n-\tchar x_endndx[4];\n-\tchar x_pad[1];\n-    } x_except;\n-\n-    struct {\n-\t    unsigned char x_scnlen_lo[4];\n-\t    unsigned char x_parmhash[4];\n-\t    unsigned char x_snhash[2];\n-\t    unsigned char x_smtyp[1];\n-\t    unsigned char x_smclas[1];\n-\t    unsigned char x_scnlen_hi[4];\n-\t    unsigned char x_pad[1];\n-    } x_csect;\t\n-\n-    struct {\n-\tchar x_pad[17];\n-\tchar x_auxtype[1];\n-    } x_auxtype;\n+  struct {\n+    char x_lnno[4]; \t/* declaration line number */\n+    char x_pad[13];\n+    char x_auxtype[1];\n+  } x_sym;\n+\n+  struct {\n+    char x_lnnoptr[8];/* ptr to fcn line */\n+    char x_fsize[4];\t /* size of function */\n+    char x_endndx[4];\t /* entry ndx past block end */\n+    char x_pad[1];\n+    char x_auxtype[1];\n+  } x_fcn;\n+\n+  struct {\n+    union {\n+      char x_fname[E_FILNMLEN];\n+      struct {\n+\tchar x_zeroes[4];\n+\tchar x_offset[4];\n+\tchar x_pad[6];\n+      } x_n;\n+    } x_n;\n+    unsigned char x_ftype[1];\n+    unsigned char x_resv[2];\n+    char x_auxtype[1];\n+  } x_file;\n+\n+  struct {\n+    char x_exptr[8];\n+    char x_fsize[4];\n+    char x_endndx[4];\n+    char x_pad[1];\n+    char x_auxtype[1];\n+  } x_except;\n+\n+  struct {\n+    char x_scnlen_lo[4];\n+    char x_parmhash[4];\n+    char x_snhash[2];\n+    char x_smtyp[1];\n+    char x_smclas[1];\n+    char x_scnlen_hi[4];\n+    char x_pad[1];\n+    char x_auxtype[1];\n+  } x_csect;\n+\n+  struct {\n+    char x_scnlen[8];\n+    char x_nreloc[8];\n+    char x_pad[1];\n+    char x_auxtype[1];\n+  } x_sect;\n };\n \n #define\tSYMENT\tstruct external_syment\n@@ -207,6 +212,7 @@ union external_auxent\n #define _AUX_SYM        253\n #define _AUX_FILE       252\n #define _AUX_CSECT      251\n+#define _AUX_SECT       250\n \n /********************** RELOCATION DIRECTIVES **********************/\n "
    }
  ]
}