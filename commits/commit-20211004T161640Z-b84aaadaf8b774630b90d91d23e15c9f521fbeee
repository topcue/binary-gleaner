{
  "sha": "b84aaadaf8b774630b90d91d23e15c9f521fbeee",
  "node_id": "C_kwDOANOeidoAKGI4NGFhYWRhZjhiNzc0NjMwYjkwZDkxZDIzZTE1YzlmNTIxZmJlZWU",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-04T16:16:40Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-04T16:16:40Z"
    },
    "message": "[gdb/symtab] C++-ify call_site\n\n- add constructor\n- add member function call_site::pc ()\n\nTested on x86_64-linux.\n\nCo-Authored-By: Tom de Vries <tdevries@suse.de>",
    "tree": {
      "sha": "33f31c9cfab443d4642131f90fd8610392a490a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/33f31c9cfab443d4642131f90fd8610392a490a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b84aaadaf8b774630b90d91d23e15c9f521fbeee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b84aaadaf8b774630b90d91d23e15c9f521fbeee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b84aaadaf8b774630b90d91d23e15c9f521fbeee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b84aaadaf8b774630b90d91d23e15c9f521fbeee/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0dd8295da24ae58c1e808b906b7c0aafea22a259",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0dd8295da24ae58c1e808b906b7c0aafea22a259",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0dd8295da24ae58c1e808b906b7c0aafea22a259"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 77,
    "deletions": 51
  },
  "files": [
    {
      "sha": "9fe498b0924ecc2f697a9f8a9de7e5d0890cda31",
      "filename": "gdb/dwarf2/frame-tailcall.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/dwarf2/frame-tailcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/dwarf2/frame-tailcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame-tailcall.c?ref=b84aaadaf8b774630b90d91d23e15c9f521fbeee",
      "patch": "@@ -240,14 +240,14 @@ pretend_pc (struct frame_info *this_frame, struct tailcall_cache *cache)\n   gdb_assert (next_levels >= 0);\n \n   if (next_levels < chain->callees)\n-    return chain->call_site[chain->length - next_levels - 1]->pc;\n+    return chain->call_site[chain->length - next_levels - 1]->pc ();\n   next_levels -= chain->callees;\n \n   /* Otherwise CHAIN->CALLEES are already covered by CHAIN->CALLERS.  */\n   if (chain->callees != chain->length)\n     {\n       if (next_levels < chain->callers)\n-\treturn chain->call_site[chain->callers - next_levels - 1]->pc;\n+\treturn chain->call_site[chain->callers - next_levels - 1]->pc ();\n       next_levels -= chain->callers;\n     }\n "
    },
    {
      "sha": "27a1c97682ae93803f1fa557a9794e8ea7d5bf16",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=b84aaadaf8b774630b90d91d23e15c9f521fbeee",
      "patch": "@@ -654,10 +654,10 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \t  {\n \t    struct bound_minimal_symbol msym;\n \t    \n-\t    msym = lookup_minimal_symbol_by_pc (call_site->pc - 1);\n+\t    msym = lookup_minimal_symbol_by_pc (call_site->pc () - 1);\n \t    throw_error (NO_ENTRY_VALUE_ERROR,\n \t\t\t _(\"DW_AT_call_target is not specified at %s in %s\"),\n-\t\t\t paddress (call_site_gdbarch, call_site->pc),\n+\t\t\t paddress (call_site_gdbarch, call_site->pc ()),\n \t\t\t (msym.minsym == NULL ? \"???\"\n \t\t\t  : msym.minsym->print_name ()));\n \t\t\t\n@@ -666,12 +666,12 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \t  {\n \t    struct bound_minimal_symbol msym;\n \t    \n-\t    msym = lookup_minimal_symbol_by_pc (call_site->pc - 1);\n+\t    msym = lookup_minimal_symbol_by_pc (call_site->pc () - 1);\n \t    throw_error (NO_ENTRY_VALUE_ERROR,\n \t\t\t _(\"DW_AT_call_target DWARF block resolving \"\n \t\t\t   \"requires known frame which is currently not \"\n \t\t\t   \"available at %s in %s\"),\n-\t\t\t paddress (call_site_gdbarch, call_site->pc),\n+\t\t\t paddress (call_site_gdbarch, call_site->pc ()),\n \t\t\t (msym.minsym == NULL ? \"???\"\n \t\t\t  : msym.minsym->print_name ()));\n \t\t\t\n@@ -700,11 +700,11 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \tmsym = lookup_minimal_symbol (physname, NULL, NULL);\n \tif (msym.minsym == NULL)\n \t  {\n-\t    msym = lookup_minimal_symbol_by_pc (call_site->pc - 1);\n+\t    msym = lookup_minimal_symbol_by_pc (call_site->pc () - 1);\n \t    throw_error (NO_ENTRY_VALUE_ERROR,\n \t\t\t _(\"Cannot find function \\\"%s\\\" for a call site target \"\n \t\t\t   \"at %s in %s\"),\n-\t\t\t physname, paddress (call_site_gdbarch, call_site->pc),\n+\t\t\t physname, paddress (call_site_gdbarch, call_site->pc ()),\n \t\t\t (msym.minsym == NULL ? \"???\"\n \t\t\t  : msym.minsym->print_name ()));\n \t\t\t\n@@ -810,7 +810,7 @@ func_verify_no_selftailcall (struct gdbarch *gdbarch, CORE_ADDR verify_addr)\n static void\n tailcall_dump (struct gdbarch *gdbarch, const struct call_site *call_site)\n {\n-  CORE_ADDR addr = call_site->pc;\n+  CORE_ADDR addr = call_site->pc ();\n   struct bound_minimal_symbol msym = lookup_minimal_symbol_by_pc (addr - 1);\n \n   fprintf_unfiltered (gdb_stdlog, \" %s(%s)\", paddress (gdbarch, addr),\n@@ -986,7 +986,7 @@ call_site_find_chain_1 (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n \n \t  if (target_call_site)\n \t    {\n-\t      if (addr_hash.insert (target_call_site->pc).second)\n+\t      if (addr_hash.insert (target_call_site->pc ()).second)\n \t\t{\n \t\t  /* Successfully entered TARGET_CALL_SITE.  */\n \n@@ -1005,7 +1005,7 @@ call_site_find_chain_1 (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n \t      call_site = chain.back ();\n \t      chain.pop_back ();\n \n-\t      size_t removed = addr_hash.erase (call_site->pc);\n+\t      size_t removed = addr_hash.erase (call_site->pc ());\n \t      gdb_assert (removed == 1);\n \n \t      target_call_site = call_site->tail_call_next;"
    },
    {
      "sha": "230eb6a04b174edc8eb026c431ac8fb818e6e78e",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b84aaadaf8b774630b90d91d23e15c9f521fbeee",
      "patch": "@@ -13341,7 +13341,6 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR pc, baseaddr;\n   struct attribute *attr;\n-  struct call_site *call_site, call_site_local;\n   void **slot;\n   int nparams;\n   struct die_info *child_die;\n@@ -13366,10 +13365,11 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n   pc = gdbarch_adjust_dwarf2_addr (gdbarch, pc);\n \n   if (cu->call_site_htab == NULL)\n-    cu->call_site_htab = htab_create_alloc_ex (16, call_site_hash, call_site_eq,\n-\t\t\t\t\t       NULL, &objfile->objfile_obstack,\n+    cu->call_site_htab = htab_create_alloc_ex (16, call_site::hash,\n+\t\t\t\t\t       call_site::eq, NULL,\n+\t\t\t\t\t       &objfile->objfile_obstack,\n \t\t\t\t\t       hashtab_obstack_allocate, NULL);\n-  call_site_local.pc = pc;\n+  struct call_site call_site_local (pc, nullptr, nullptr);\n   slot = htab_find_slot (cu->call_site_htab, &call_site_local, INSERT);\n   if (*slot != NULL)\n     {\n@@ -13399,14 +13399,16 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n       nparams++;\n     }\n \n-  call_site\n-    = ((struct call_site *)\n-       obstack_alloc (&objfile->objfile_obstack,\n-\t\t      sizeof (*call_site)\n-\t\t      + (sizeof (*call_site->parameter) * (nparams - 1))));\n+  struct call_site *call_site\n+    = new (XOBNEWVAR (&objfile->objfile_obstack,\n+\t\t      struct call_site,\n+\t\t      sizeof (*call_site) + sizeof (call_site->parameter[0]) * nparams))\n+    struct call_site (pc, cu->per_cu, per_objfile);\n   *slot = call_site;\n-  memset (call_site, 0, sizeof (*call_site) - sizeof (*call_site->parameter));\n-  call_site->pc = pc;\n+\n+  /* We never call the destructor of call_site, so we must ensure it is\n+     trivially destructible.  */\n+  gdb_static_assert(std::is_trivially_destructible<struct call_site>::value);\n \n   if (dwarf2_flag_true_p (die, DW_AT_call_tail_call, cu)\n       || dwarf2_flag_true_p (die, DW_AT_GNU_tail_call, cu))\n@@ -13527,9 +13529,6 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t\t \"block nor reference, for DIE %s [in module %s]\"),\n \t       sect_offset_str (die->sect_off), objfile_name (objfile));\n \n-  call_site->per_cu = cu->per_cu;\n-  call_site->per_objfile = per_objfile;\n-\n   for (child_die = die->child;\n        child_die && child_die->tag;\n        child_die = child_die->sibling)"
    },
    {
      "sha": "8954c370b7b7a6e2d1f97ee47ced1e5a03f80de8",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=b84aaadaf8b774630b90d91d23e15c9f521fbeee",
      "patch": "@@ -37,6 +37,7 @@\n #include \"cp-support.h\"\n #include \"bcache.h\"\n #include \"dwarf2/loc.h\"\n+#include \"dwarf2/read.h\"\n #include \"gdbcore.h\"\n #include \"floatformat.h\"\n #include \"f-lang.h\"\n@@ -6308,6 +6309,14 @@ objfile_type (struct objfile *objfile)\n   return objfile_type;\n }\n \n+/* See gdbtypes.h.  */\n+\n+CORE_ADDR\n+call_site::pc () const\n+{\n+  return m_pc;\n+}\n+\n void _initialize_gdbtypes ();\n void\n _initialize_gdbtypes ()"
    },
    {
      "sha": "5fe10cb7f1e0ec1325c63ec56aa5caeb8becfa0b",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 43,
      "deletions": 24,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=b84aaadaf8b774630b90d91d23e15c9f521fbeee",
      "patch": "@@ -1793,52 +1793,71 @@ struct call_site_parameter\n \n struct call_site\n   {\n-    /* Address of the first instruction after this call.  */\n-\n-    CORE_ADDR pc;\n+    call_site (CORE_ADDR pc, dwarf2_per_cu_data *per_cu,\n+\t       dwarf2_per_objfile *per_objfile)\n+      : per_cu (per_cu), per_objfile (per_objfile), m_pc (pc)\n+    {}\n+\n+    static int\n+    eq (const call_site *a, const call_site *b)\n+    {\n+      return core_addr_eq (&a->m_pc, &b->m_pc);\n+    }\n+\n+    static hashval_t\n+    hash (const call_site *a)\n+    {\n+      return core_addr_hash (&a->m_pc);\n+    }\n+\n+    static int\n+    eq (const void *a, const void *b)\n+    {\n+      return eq ((const call_site *)a, (const call_site *)b);\n+    }\n+\n+    static hashval_t\n+    hash (const void *a)\n+    {\n+      return hash ((const call_site *)a);\n+    }\n+\n+    /* Return the address of the first instruction after this call.  */\n+\n+    CORE_ADDR pc () const;\n \n     /* * List successor with head in FUNC_TYPE.TAIL_CALL_LIST.  */\n \n-    struct call_site *tail_call_next;\n+    struct call_site *tail_call_next = nullptr;\n \n     /* * Describe DW_AT_call_target.  Missing attribute uses\n        FIELD_LOC_KIND_DWARF_BLOCK with FIELD_DWARF_BLOCK == NULL.  */\n \n-    struct call_site_target target;\n+    struct call_site_target target {};\n \n     /* * Size of the PARAMETER array.  */\n \n-    unsigned parameter_count;\n+    unsigned parameter_count = 0;\n \n     /* * CU of the function where the call is located.  It gets used\n        for DWARF blocks execution in the parameter array below.  */\n \n-    dwarf2_per_cu_data *per_cu;\n+    dwarf2_per_cu_data *const per_cu = nullptr;\n \n     /* objfile of the function where the call is located.  */\n \n-    dwarf2_per_objfile *per_objfile;\n+    dwarf2_per_objfile *const per_objfile = nullptr;\n \n+  private:\n+    /* Address of the first instruction after this call.  */\n+    const CORE_ADDR m_pc;\n+\n+  public:\n     /* * Describe DW_TAG_call_site's DW_TAG_formal_parameter.  */\n \n-    struct call_site_parameter parameter[1];\n+    struct call_site_parameter parameter[];\n   };\n \n-static inline int\n-call_site_eq (const void *a_, const void *b_)\n-{\n-  const struct call_site *a = (const call_site *)a_;\n-  const struct call_site *b = (const call_site *)b_;\n-  return core_addr_eq (&a->pc, &b->pc);\n-}\n-\n-static inline hashval_t\n-call_site_hash (const void *a_)\n-{\n-  const struct call_site *a = (const call_site *)a_;\n-  return core_addr_hash (&a->pc);\n-}\n-\n /* The type-specific info for TYPE_CODE_FIXED_POINT types.  */\n \n struct fixed_point_type_info"
    },
    {
      "sha": "cb583846efa4570fa98d5887b66712ee55f5d338",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b84aaadaf8b774630b90d91d23e15c9f521fbeee/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=b84aaadaf8b774630b90d91d23e15c9f521fbeee",
      "patch": "@@ -334,11 +334,10 @@ search_domain_name (enum search_domain e)\n call_site *\n compunit_symtab::find_call_site (CORE_ADDR pc) const\n {\n-  struct call_site call_site_local;\n   if (m_call_site_htab == nullptr)\n     return nullptr;\n \n-  call_site_local.pc = pc;\n+  struct call_site call_site_local (pc, nullptr, nullptr);\n   void **slot\n     = htab_find_slot (m_call_site_htab, &call_site_local, NO_INSERT);\n   if (slot == nullptr)"
    }
  ]
}