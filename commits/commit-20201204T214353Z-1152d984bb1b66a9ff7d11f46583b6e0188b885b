{
  "sha": "1152d984bb1b66a9ff7d11f46583b6e0188b885b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTE1MmQ5ODRiYjFiNjZhOWZmN2QxMWY0NjU4M2I2ZTAxODhiODg1Yg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:53Z"
    },
    "message": "gdb: rename displaced_step_closure to displaced_step_copy_insn_closure\n\nSince we're going to introduce other \"displaced step\" functions and\nanother kind of displaced step closure, make it clear that this is the\nreturn type of the gdbarch_displaced_step_copy_insn function.\n\ngdb/ChangeLog:\n\n\t* infrun.h (get_displaced_step_closure_by_addr): Rename to...\n\t(get_displaced_step_copy_insn_closure_by_addr): ... this.\n\tUpdate all users.\n\t(displaced_step_closure): Rename to...\n\t(displaced_step_copy_insn_closure): ... this.  Update all users.\n\t(displaced_step_closure_up): Rename to...\n\t(displaced_step_copy_insn_closure_up). ... this.  Update all\n\tusers.\n\t(buf_displaced_step_closure): Rename to...\n\t(buf_displaced_step_copy_insn_closure): ... this.  Update all\n\tusers.\n\t* infrun.c (get_displaced_step_closure_by_addr): Rename to...\n\t(get_displaced_step_copy_insn_closure_by_addr): ... this.\n\tUpdate all users.\n\t* aarch64-tdep.c (aarch64_displaced_step_closure): Rename to...\n\t(aarch64_displaced_step_copy_insn_closure): ... this.  Update\n\tall users.\n\t* amd64-tdep.c (amd64_displaced_step_closure): Rename to...\n\t(amd64_displaced_step_copy_insn_closure): ... this.  Update all\n\tusers.\n\t* arm-tdep.h (arm_displaced_step_closure): Rename to...\n\t(arm_displaced_step_copy_insn_closure): ... this.  Update all\n\tusers.\n\t* i386-tdep.h (i386_displaced_step_closure): Rename to...\n\t(i386_displaced_step_copy_insn_closure): ... this.  Update all\n\tusers.\n\t* rs6000-tdep.c (ppc_displaced_step_closure): Rename to...\n\t(ppc_displaced_step_copy_insn_closure): ... this.  Update all\n\tusers.\n\t* s390-tdep.c (s390_displaced_step_closure): Rename to...\n\t(s390_displaced_step_copy_insn_closure): ... this.  Update all\n\tusers.\n\t* gdbarch.h: Re-generate.\n\t* gdbarch.c: Re-generate.\n\nChange-Id: I11f56dbcd4c3532fb195a08ba93bccf1d12a03c8",
    "tree": {
      "sha": "bbbec5cbcb2adcd996f94d248ccd63f688df2d02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bbbec5cbcb2adcd996f94d248ccd63f688df2d02"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1152d984bb1b66a9ff7d11f46583b6e0188b885b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1152d984bb1b66a9ff7d11f46583b6e0188b885b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1152d984bb1b66a9ff7d11f46583b6e0188b885b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1152d984bb1b66a9ff7d11f46583b6e0188b885b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "28d5518b12119eaf087c64fe25e31d2f49e53485",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28d5518b12119eaf087c64fe25e31d2f49e53485",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/28d5518b12119eaf087c64fe25e31d2f49e53485"
    }
  ],
  "stats": {
    "total": 437,
    "additions": 244,
    "deletions": 193
  },
  "files": [
    {
      "sha": "a238bcdd048d4012d00b1eb7cebc8dfc412c3942",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -1,3 +1,40 @@\n+2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* infrun.h (get_displaced_step_closure_by_addr): Rename to...\n+\t(get_displaced_step_copy_insn_closure_by_addr): ... this.\n+\tUpdate all users.\n+\t(displaced_step_closure): Rename to...\n+\t(displaced_step_copy_insn_closure): ... this.  Update all users.\n+\t(displaced_step_closure_up): Rename to...\n+\t(displaced_step_copy_insn_closure_up). ... this.  Update all\n+\tusers.\n+\t(buf_displaced_step_closure): Rename to...\n+\t(buf_displaced_step_copy_insn_closure): ... this.  Update all\n+\tusers.\n+\t* infrun.c (get_displaced_step_closure_by_addr): Rename to...\n+\t(get_displaced_step_copy_insn_closure_by_addr): ... this.\n+\tUpdate all users.\n+\t* aarch64-tdep.c (aarch64_displaced_step_closure): Rename to...\n+\t(aarch64_displaced_step_copy_insn_closure): ... this.  Update\n+\tall users.\n+\t* amd64-tdep.c (amd64_displaced_step_closure): Rename to...\n+\t(amd64_displaced_step_copy_insn_closure): ... this.  Update all\n+\tusers.\n+\t* arm-tdep.h (arm_displaced_step_closure): Rename to...\n+\t(arm_displaced_step_copy_insn_closure): ... this.  Update all\n+\tusers.\n+\t* i386-tdep.h (i386_displaced_step_closure): Rename to...\n+\t(i386_displaced_step_copy_insn_closure): ... this.  Update all\n+\tusers.\n+\t* rs6000-tdep.c (ppc_displaced_step_closure): Rename to...\n+\t(ppc_displaced_step_copy_insn_closure): ... this.  Update all\n+\tusers.\n+\t* s390-tdep.c (s390_displaced_step_closure): Rename to...\n+\t(s390_displaced_step_copy_insn_closure): ... this.  Update all\n+\tusers.\n+\t* gdbarch.h: Re-generate.\n+\t* gdbarch.c: Re-generate.\n+\n 2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbthread.h (thread_step_over_chain_enqueue): Rename to..."
    },
    {
      "sha": "40c73be5028995053b92040834acfadfb3e85b8a",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -2899,7 +2899,8 @@ aarch64_software_single_step (struct regcache *regcache)\n   return next_pcs;\n }\n \n-struct aarch64_displaced_step_closure : public displaced_step_closure\n+struct aarch64_displaced_step_copy_insn_closure\n+  : public displaced_step_copy_insn_closure\n {\n   /* It is true when condition instruction, such as B.CON, TBZ, etc,\n      is being displaced stepping.  */\n@@ -2925,7 +2926,7 @@ struct aarch64_displaced_step_data\n   /* Registers when doing displaced stepping.  */\n   struct regcache *regs;\n \n-  aarch64_displaced_step_closure *dsc;\n+  aarch64_displaced_step_copy_insn_closure *dsc;\n };\n \n /* Implementation of aarch64_insn_visitor method \"b\".  */\n@@ -3134,7 +3135,7 @@ static const struct aarch64_insn_visitor visitor =\n \n /* Implement the \"displaced_step_copy_insn\" gdbarch method.  */\n \n-displaced_step_closure_up\n+displaced_step_copy_insn_closure_up\n aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t  CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t  struct regcache *regs)\n@@ -3154,8 +3155,8 @@ aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n       return NULL;\n     }\n \n-  std::unique_ptr<aarch64_displaced_step_closure> dsc\n-    (new aarch64_displaced_step_closure);\n+  std::unique_ptr<aarch64_displaced_step_copy_insn_closure> dsc\n+    (new aarch64_displaced_step_copy_insn_closure);\n   dsd.base.insn_addr = from;\n   dsd.new_addr = to;\n   dsd.regs = regs;\n@@ -3187,18 +3188,19 @@ aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n     }\n \n   /* This is a work around for a problem with g++ 4.8.  */\n-  return displaced_step_closure_up (dsc.release ());\n+  return displaced_step_copy_insn_closure_up (dsc.release ());\n }\n \n /* Implement the \"displaced_step_fixup\" gdbarch method.  */\n \n void\n aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t      struct displaced_step_closure *dsc_,\n+\t\t\t      struct displaced_step_copy_insn_closure *dsc_,\n \t\t\t      CORE_ADDR from, CORE_ADDR to,\n \t\t\t      struct regcache *regs)\n {\n-  aarch64_displaced_step_closure *dsc = (aarch64_displaced_step_closure *) dsc_;\n+  aarch64_displaced_step_copy_insn_closure *dsc\n+    = (aarch64_displaced_step_copy_insn_closure *) dsc_;\n \n   ULONGEST pc;\n "
    },
    {
      "sha": "895aa5977f05bb4412acaf7f34c450f95e4d6f1b",
      "filename": "gdb/aarch64-tdep.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/aarch64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/aarch64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.h?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -107,13 +107,13 @@ const target_desc *aarch64_read_description (uint64_t vq, bool pauth_p);\n extern int aarch64_process_record (struct gdbarch *gdbarch,\n \t\t\t       struct regcache *regcache, CORE_ADDR addr);\n \n-displaced_step_closure_up\n+displaced_step_copy_insn_closure_up\n   aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t    CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t    struct regcache *regs);\n \n void aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t\t   struct displaced_step_closure *dsc,\n+\t\t\t\t   displaced_step_copy_insn_closure *dsc,\n \t\t\t\t   CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t   struct regcache *regs);\n "
    },
    {
      "sha": "d2bcbe199bcdbea793da25b3cc601b89157a5115",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 13,
      "deletions": 10,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -1103,9 +1103,10 @@ struct amd64_insn\n   gdb_byte *raw_insn;\n };\n \n-struct amd64_displaced_step_closure : public displaced_step_closure\n+struct amd64_displaced_step_copy_insn_closure\n+  : public displaced_step_copy_insn_closure\n {\n-  amd64_displaced_step_closure (int insn_buf_len)\n+  amd64_displaced_step_copy_insn_closure (int insn_buf_len)\n   : insn_buf (insn_buf_len, 0)\n   {}\n \n@@ -1386,7 +1387,8 @@ amd64_get_insn_details (gdb_byte *insn, struct amd64_insn *details)\n    We set base = pc + insn_length so we can leave disp unchanged.  */\n \n static void\n-fixup_riprel (struct gdbarch *gdbarch, amd64_displaced_step_closure *dsc,\n+fixup_riprel (struct gdbarch *gdbarch,\n+\t      amd64_displaced_step_copy_insn_closure *dsc,\n \t      CORE_ADDR from, CORE_ADDR to, struct regcache *regs)\n {\n   const struct amd64_insn *insn_details = &dsc->insn_details;\n@@ -1447,7 +1449,7 @@ fixup_riprel (struct gdbarch *gdbarch, amd64_displaced_step_closure *dsc,\n \n static void\n fixup_displaced_copy (struct gdbarch *gdbarch,\n-\t\t      amd64_displaced_step_closure *dsc,\n+\t\t      amd64_displaced_step_copy_insn_closure *dsc,\n \t\t      CORE_ADDR from, CORE_ADDR to, struct regcache *regs)\n {\n   const struct amd64_insn *details = &dsc->insn_details;\n@@ -1465,7 +1467,7 @@ fixup_displaced_copy (struct gdbarch *gdbarch,\n     }\n }\n \n-displaced_step_closure_up\n+displaced_step_copy_insn_closure_up\n amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\tCORE_ADDR from, CORE_ADDR to,\n \t\t\t\tstruct regcache *regs)\n@@ -1474,8 +1476,8 @@ amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n   /* Extra space for sentinels so fixup_{riprel,displaced_copy} don't have to\n      continually watch for running off the end of the buffer.  */\n   int fixup_sentinel_space = len;\n-  std::unique_ptr<amd64_displaced_step_closure> dsc\n-    (new amd64_displaced_step_closure (len + fixup_sentinel_space));\n+  std::unique_ptr<amd64_displaced_step_copy_insn_closure> dsc\n+    (new amd64_displaced_step_copy_insn_closure (len + fixup_sentinel_space));\n   gdb_byte *buf = &dsc->insn_buf[0];\n   struct amd64_insn *details = &dsc->insn_details;\n \n@@ -1509,7 +1511,7 @@ amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n-  return displaced_step_closure_up (dsc.release ());\n+  return displaced_step_copy_insn_closure_up (dsc.release ());\n }\n \n static int\n@@ -1671,11 +1673,12 @@ amd64_insn_is_jump (struct gdbarch *gdbarch, CORE_ADDR addr)\n \n void\n amd64_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t    struct displaced_step_closure *dsc_,\n+\t\t\t    struct displaced_step_copy_insn_closure *dsc_,\n \t\t\t    CORE_ADDR from, CORE_ADDR to,\n \t\t\t    struct regcache *regs)\n {\n-  amd64_displaced_step_closure *dsc = (amd64_displaced_step_closure *) dsc_;\n+  amd64_displaced_step_copy_insn_closure *dsc\n+    = (amd64_displaced_step_copy_insn_closure *) dsc_;\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   /* The offset we applied to the instruction's address.  */\n   ULONGEST insn_offset = to - from;"
    },
    {
      "sha": "56aef6c5d9abfb8cefc104af3fb57e90c8914848",
      "filename": "gdb/amd64-tdep.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/amd64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/amd64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.h?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -88,13 +88,12 @@ enum amd64_regnum\n \n #define AMD64_NUM_REGS\t\t(AMD64_GSBASE_REGNUM + 1)\n \n-extern displaced_step_closure_up amd64_displaced_step_copy_insn\n+extern displaced_step_copy_insn_closure_up amd64_displaced_step_copy_insn\n   (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to,\n    struct regcache *regs);\n-extern void amd64_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t\t\tstruct displaced_step_closure *closure,\n-\t\t\t\t\tCORE_ADDR from, CORE_ADDR to,\n-\t\t\t\t\tstruct regcache *regs);\n+extern void amd64_displaced_step_fixup\n+  (struct gdbarch *gdbarch, displaced_step_copy_insn_closure *closure,\n+   CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n \n /* Initialize the ABI for amd64.  Uses DEFAULT_TDESC as fallback\n    tdesc, if INFO does not specify one.  */"
    },
    {
      "sha": "9caae06adfeee18e211027a9165d9c312a634669",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -946,7 +946,7 @@ arm_linux_software_single_step (struct regcache *regcache)\n static void\n arm_linux_cleanup_svc (struct gdbarch *gdbarch,\n \t\t       struct regcache *regs,\n-\t\t       arm_displaced_step_closure *dsc)\n+\t\t       arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST apparent_pc;\n   int within_scratch;\n@@ -970,7 +970,7 @@ arm_linux_cleanup_svc (struct gdbarch *gdbarch,\n \n static int\n arm_linux_copy_svc (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t    arm_displaced_step_closure *dsc)\n+\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   CORE_ADDR return_to = 0;\n \n@@ -1056,7 +1056,7 @@ arm_linux_copy_svc (struct gdbarch *gdbarch, struct regcache *regs,\n static void\n cleanup_kernel_helper_return (struct gdbarch *gdbarch,\n \t\t\t      struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc)\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_write_reg (regs, dsc, ARM_LR_REGNUM, dsc->tmp[0], CANNOT_WRITE_PC);\n   displaced_write_reg (regs, dsc, ARM_PC_REGNUM, dsc->tmp[0], BRANCH_WRITE_PC);\n@@ -1065,7 +1065,7 @@ cleanup_kernel_helper_return (struct gdbarch *gdbarch,\n static void\n arm_catch_kernel_helper_return (struct gdbarch *gdbarch, CORE_ADDR from,\n \t\t\t\tCORE_ADDR to, struct regcache *regs,\n-\t\t\t\tarm_displaced_step_closure *dsc)\n+\t\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n \n@@ -1094,13 +1094,13 @@ arm_catch_kernel_helper_return (struct gdbarch *gdbarch, CORE_ADDR from,\n    the program has stepped into a Linux kernel helper routine (which must be\n    handled as a special case).  */\n \n-static displaced_step_closure_up\n+static displaced_step_copy_insn_closure_up\n arm_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t    CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t    struct regcache *regs)\n {\n-  std::unique_ptr<arm_displaced_step_closure> dsc\n-    (new arm_displaced_step_closure);\n+  std::unique_ptr<arm_displaced_step_copy_insn_closure> dsc\n+    (new arm_displaced_step_copy_insn_closure);\n \n   /* Detect when we enter an (inaccessible by GDB) Linux kernel helper, and\n      stop at the return location.  */\n@@ -1122,7 +1122,7 @@ arm_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n   arm_displaced_init_closure (gdbarch, from, to, dsc.get ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n-  return displaced_step_closure_up (dsc.release ());\n+  return displaced_step_copy_insn_closure_up (dsc.release ());\n }\n \n /* Implementation of `gdbarch_stap_is_single_operand', as defined in"
    },
    {
      "sha": "bc086e18a5715917c26aecf446dc99f483f937bb",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 91,
      "deletions": 89,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -433,9 +433,9 @@ arm_pc_is_thumb (struct gdbarch *gdbarch, CORE_ADDR memaddr)\n {\n   struct bound_minimal_symbol sym;\n   char type;\n-  arm_displaced_step_closure *dsc\n-    = ((arm_displaced_step_closure * )\n-\tget_displaced_step_closure_by_addr (memaddr));\n+  arm_displaced_step_copy_insn_closure *dsc\n+    = ((arm_displaced_step_copy_insn_closure * )\n+\tget_displaced_step_copy_insn_closure_by_addr (memaddr));\n \n   /* If checking the mode of displaced instruction in copy area, the mode\n      should be determined by instruction on the original address.  */\n@@ -4474,7 +4474,7 @@ arm_adjust_breakpoint_address (struct gdbarch *gdbarch, CORE_ADDR bpaddr)\n    location.  */\n \n ULONGEST\n-displaced_read_reg (struct regcache *regs, arm_displaced_step_closure *dsc,\n+displaced_read_reg (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \t\t    int regno)\n {\n   ULONGEST ret;\n@@ -4522,7 +4522,7 @@ displaced_in_arm_mode (struct regcache *regs)\n /* Write to the PC as from a branch instruction.  */\n \n static void\n-branch_write_pc (struct regcache *regs, arm_displaced_step_closure *dsc,\n+branch_write_pc (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \t\t ULONGEST val)\n {\n   if (!dsc->is_thumb)\n@@ -4568,7 +4568,7 @@ bx_write_pc (struct regcache *regs, ULONGEST val)\n /* Write to the PC as if from a load instruction.  */\n \n static void\n-load_write_pc (struct regcache *regs, arm_displaced_step_closure *dsc,\n+load_write_pc (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \t       ULONGEST val)\n {\n   if (DISPLACED_STEPPING_ARCH_VERSION >= 5)\n@@ -4580,7 +4580,7 @@ load_write_pc (struct regcache *regs, arm_displaced_step_closure *dsc,\n /* Write to the PC as if from an ALU instruction.  */\n \n static void\n-alu_write_pc (struct regcache *regs, arm_displaced_step_closure *dsc,\n+alu_write_pc (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \t      ULONGEST val)\n {\n   if (DISPLACED_STEPPING_ARCH_VERSION >= 7 && !dsc->is_thumb)\n@@ -4594,7 +4594,7 @@ alu_write_pc (struct regcache *regs, arm_displaced_step_closure *dsc,\n    this is controlled by the WRITE_PC argument.  */\n \n void\n-displaced_write_reg (struct regcache *regs, arm_displaced_step_closure *dsc,\n+displaced_write_reg (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \t\t     int regno, ULONGEST val, enum pc_write_style write_pc)\n {\n   if (regno == ARM_PC_REGNUM)\n@@ -4675,8 +4675,8 @@ insn_references_pc (uint32_t insn, uint32_t bitmask)\n    matter what address they are executed at: in those cases, use this.  */\n \n static int\n-arm_copy_unmodified (struct gdbarch *gdbarch, uint32_t insn,\n-\t\t     const char *iname, arm_displaced_step_closure *dsc)\n+arm_copy_unmodified (struct gdbarch *gdbarch, uint32_t insn, const char *iname,\n+\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_debug_printf (\"copying insn %.8lx, opcode/class '%s' unmodified\",\n \t\t\t  (unsigned long) insn, iname);\n@@ -4689,7 +4689,7 @@ arm_copy_unmodified (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb_copy_unmodified_32bit (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t     uint16_t insn2, const char *iname,\n-\t\t\t     arm_displaced_step_closure *dsc)\n+\t\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_debug_printf (\"copying insn %.4x %.4x, opcode/class '%s' \"\n \t\t\t  \"unmodified\", insn1, insn2, iname);\n@@ -4706,7 +4706,7 @@ thumb_copy_unmodified_32bit (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n thumb_copy_unmodified_16bit (struct gdbarch *gdbarch, uint16_t insn,\n \t\t\t     const char *iname,\n-\t\t\t     arm_displaced_step_closure *dsc)\n+\t\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_debug_printf (\"copying insn %.4x, opcode/class '%s' unmodified\",\n \t\t\t  insn, iname);\n@@ -4719,8 +4719,8 @@ thumb_copy_unmodified_16bit (struct gdbarch *gdbarch, uint16_t insn,\n /* Preload instructions with immediate offset.  */\n \n static void\n-cleanup_preload (struct gdbarch *gdbarch,\n-\t\t struct regcache *regs, arm_displaced_step_closure *dsc)\n+cleanup_preload (struct gdbarch *gdbarch, regcache *regs,\n+\t\t arm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_write_reg (regs, dsc, 0, dsc->tmp[0], CANNOT_WRITE_PC);\n   if (!dsc->u.preload.immed)\n@@ -4729,7 +4729,7 @@ cleanup_preload (struct gdbarch *gdbarch,\n \n static void\n install_preload (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t arm_displaced_step_closure *dsc, unsigned int rn)\n+\t\t arm_displaced_step_copy_insn_closure *dsc, unsigned int rn)\n {\n   ULONGEST rn_val;\n   /* Preload instructions:\n@@ -4748,7 +4748,7 @@ install_preload (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n arm_copy_preload (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n-\t\t  arm_displaced_step_closure *dsc)\n+\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rn = bits (insn, 16, 19);\n \n@@ -4766,7 +4766,7 @@ arm_copy_preload (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n \n static int\n thumb2_copy_preload (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n-\t\t     struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t     regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rn = bits (insn1, 0, 3);\n   unsigned int u_bit = bit (insn1, 7);\n@@ -4814,7 +4814,7 @@ thumb2_copy_preload (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n \n static void\n install_preload_reg(struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t    arm_displaced_step_closure *dsc, unsigned int rn,\n+\t\t    arm_displaced_step_copy_insn_closure *dsc, unsigned int rn,\n \t\t    unsigned int rm)\n {\n   ULONGEST rn_val, rm_val;\n@@ -4839,7 +4839,7 @@ install_preload_reg(struct gdbarch *gdbarch, struct regcache *regs,\n static int\n arm_copy_preload_reg (struct gdbarch *gdbarch, uint32_t insn,\n \t\t      struct regcache *regs,\n-\t\t      arm_displaced_step_closure *dsc)\n+\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rn = bits (insn, 16, 19);\n   unsigned int rm = bits (insn, 0, 3);\n@@ -4862,7 +4862,7 @@ arm_copy_preload_reg (struct gdbarch *gdbarch, uint32_t insn,\n static void\n cleanup_copro_load_store (struct gdbarch *gdbarch,\n \t\t\t  struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rn_val = displaced_read_reg (regs, dsc, 0);\n \n@@ -4874,7 +4874,7 @@ cleanup_copro_load_store (struct gdbarch *gdbarch,\n \n static void\n install_copro_load_store (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc,\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc,\n \t\t\t  int writeback, unsigned int rn)\n {\n   ULONGEST rn_val;\n@@ -4902,7 +4902,7 @@ install_copro_load_store (struct gdbarch *gdbarch, struct regcache *regs,\n static int\n arm_copy_copro_load_store (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t   struct regcache *regs,\n-\t\t\t   arm_displaced_step_closure *dsc)\n+\t\t\t   arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rn = bits (insn, 16, 19);\n \n@@ -4922,7 +4922,7 @@ arm_copy_copro_load_store (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb2_copy_copro_load_store (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t      uint16_t insn2, struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc)\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rn = bits (insn1, 0, 3);\n \n@@ -4949,7 +4949,7 @@ thumb2_copy_copro_load_store (struct gdbarch *gdbarch, uint16_t insn1,\n \n static void\n cleanup_branch (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\tarm_displaced_step_closure *dsc)\n+\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   uint32_t status = displaced_read_reg (regs, dsc, ARM_PS_REGNUM);\n   int branch_taken = condition_true (dsc->u.branch.cond, status);\n@@ -4980,7 +4980,7 @@ cleanup_branch (struct gdbarch *gdbarch, struct regcache *regs,\n \n static void\n install_b_bl_blx (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t  arm_displaced_step_closure *dsc,\n+\t\t  arm_displaced_step_copy_insn_closure *dsc,\n \t\t  unsigned int cond, int exchange, int link, long offset)\n {\n   /* Implement \"BL<cond> <label>\" as:\n@@ -5009,7 +5009,7 @@ install_b_bl_blx (struct gdbarch *gdbarch, struct regcache *regs,\n }\n static int\n arm_copy_b_bl_blx (struct gdbarch *gdbarch, uint32_t insn,\n-\t\t   struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t   regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int cond = bits (insn, 28, 31);\n   int exchange = (cond == 0xf);\n@@ -5038,7 +5038,7 @@ arm_copy_b_bl_blx (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb2_copy_b_bl_blx (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t      uint16_t insn2, struct regcache *regs,\n-\t\t      arm_displaced_step_closure *dsc)\n+\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   int link = bit (insn2, 14);\n   int exchange = link && !bit (insn2, 12);\n@@ -5091,7 +5091,7 @@ thumb2_copy_b_bl_blx (struct gdbarch *gdbarch, uint16_t insn1,\n /* Copy B Thumb instructions.  */\n static int\n thumb_copy_b (struct gdbarch *gdbarch, uint16_t insn,\n-\t      arm_displaced_step_closure *dsc)\n+\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int cond = 0;\n   int offset = 0;\n@@ -5129,7 +5129,7 @@ thumb_copy_b (struct gdbarch *gdbarch, uint16_t insn,\n \n static void\n install_bx_blx_reg (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t    arm_displaced_step_closure *dsc, int link,\n+\t\t    arm_displaced_step_copy_insn_closure *dsc, int link,\n \t\t    unsigned int cond, unsigned int rm)\n {\n   /* Implement {BX,BLX}<cond> <reg>\" as:\n@@ -5152,7 +5152,7 @@ install_bx_blx_reg (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n arm_copy_bx_blx_reg (struct gdbarch *gdbarch, uint32_t insn,\n-\t\t     struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t     regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int cond = bits (insn, 28, 31);\n   /* BX:  x12xxx1x\n@@ -5171,7 +5171,7 @@ arm_copy_bx_blx_reg (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb_copy_bx_blx_reg (struct gdbarch *gdbarch, uint16_t insn,\n \t\t       struct regcache *regs,\n-\t\t       arm_displaced_step_closure *dsc)\n+\t\t       arm_displaced_step_copy_insn_closure *dsc)\n {\n   int link = bit (insn, 7);\n   unsigned int rm = bits (insn, 3, 6);\n@@ -5190,7 +5190,7 @@ thumb_copy_bx_blx_reg (struct gdbarch *gdbarch, uint16_t insn,\n \n static void\n cleanup_alu_imm (struct gdbarch *gdbarch,\n-\t\t struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rd_val = displaced_read_reg (regs, dsc, 0);\n   displaced_write_reg (regs, dsc, 0, dsc->tmp[0], CANNOT_WRITE_PC);\n@@ -5200,7 +5200,7 @@ cleanup_alu_imm (struct gdbarch *gdbarch,\n \n static int\n arm_copy_alu_imm (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n-\t\t  arm_displaced_step_closure *dsc)\n+\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rn = bits (insn, 16, 19);\n   unsigned int rd = bits (insn, 12, 15);\n@@ -5248,7 +5248,7 @@ arm_copy_alu_imm (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n static int\n thumb2_copy_alu_imm (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t     uint16_t insn2, struct regcache *regs,\n-\t\t     arm_displaced_step_closure *dsc)\n+\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op = bits (insn1, 5, 8);\n   unsigned int rn, rm, rd;\n@@ -5299,7 +5299,7 @@ thumb2_copy_alu_imm (struct gdbarch *gdbarch, uint16_t insn1,\n \n static void\n cleanup_alu_reg (struct gdbarch *gdbarch,\n-\t\t struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rd_val;\n   int i;\n@@ -5314,7 +5314,7 @@ cleanup_alu_reg (struct gdbarch *gdbarch,\n \n static void\n install_alu_reg (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t arm_displaced_step_closure *dsc,\n+\t\t arm_displaced_step_copy_insn_closure *dsc,\n \t\t unsigned int rd, unsigned int rn, unsigned int rm)\n {\n   ULONGEST rd_val, rn_val, rm_val;\n@@ -5347,7 +5347,7 @@ install_alu_reg (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n arm_copy_alu_reg (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n-\t\t  arm_displaced_step_closure *dsc)\n+\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op = bits (insn, 21, 24);\n   int is_mov = (op == 0xd);\n@@ -5371,7 +5371,7 @@ arm_copy_alu_reg (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n static int\n thumb_copy_alu_reg (struct gdbarch *gdbarch, uint16_t insn,\n \t\t    struct regcache *regs,\n-\t\t    arm_displaced_step_closure *dsc)\n+\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned rm, rd;\n \n@@ -5395,7 +5395,7 @@ thumb_copy_alu_reg (struct gdbarch *gdbarch, uint16_t insn,\n static void\n cleanup_alu_shifted_reg (struct gdbarch *gdbarch,\n \t\t\t struct regcache *regs,\n-\t\t\t arm_displaced_step_closure *dsc)\n+\t\t\t arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rd_val = displaced_read_reg (regs, dsc, 0);\n   int i;\n@@ -5408,7 +5408,7 @@ cleanup_alu_shifted_reg (struct gdbarch *gdbarch,\n \n static void\n install_alu_shifted_reg (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\t arm_displaced_step_closure *dsc,\n+\t\t\t arm_displaced_step_copy_insn_closure *dsc,\n \t\t\t unsigned int rd, unsigned int rn, unsigned int rm,\n \t\t\t unsigned rs)\n {\n@@ -5447,7 +5447,7 @@ install_alu_shifted_reg (struct gdbarch *gdbarch, struct regcache *regs,\n static int\n arm_copy_alu_shifted_reg (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t  struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op = bits (insn, 21, 24);\n   int is_mov = (op == 0xd);\n@@ -5479,7 +5479,7 @@ arm_copy_alu_shifted_reg (struct gdbarch *gdbarch, uint32_t insn,\n \n static void\n cleanup_load (struct gdbarch *gdbarch, struct regcache *regs,\n-\t      arm_displaced_step_closure *dsc)\n+\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rt_val, rt_val2 = 0, rn_val;\n \n@@ -5508,7 +5508,7 @@ cleanup_load (struct gdbarch *gdbarch, struct regcache *regs,\n \n static void\n cleanup_store (struct gdbarch *gdbarch, struct regcache *regs,\n-\t       arm_displaced_step_closure *dsc)\n+\t       arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rn_val = displaced_read_reg (regs, dsc, 2);\n \n@@ -5531,7 +5531,7 @@ cleanup_store (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n arm_copy_extra_ld_st (struct gdbarch *gdbarch, uint32_t insn, int unprivileged,\n-\t\t      struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t      regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op1 = bits (insn, 20, 24);\n   unsigned int op2 = bits (insn, 5, 6);\n@@ -5604,7 +5604,7 @@ arm_copy_extra_ld_st (struct gdbarch *gdbarch, uint32_t insn, int unprivileged,\n \n static void\n install_load_store (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t    arm_displaced_step_closure *dsc, int load,\n+\t\t    arm_displaced_step_copy_insn_closure *dsc, int load,\n \t\t    int immed, int writeback, int size, int usermode,\n \t\t    int rt, int rm, int rn)\n {\n@@ -5660,7 +5660,7 @@ install_load_store (struct gdbarch *gdbarch, struct regcache *regs,\n static int\n thumb2_copy_load_literal (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t  uint16_t insn2, struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc, int size)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc, int size)\n {\n   unsigned int u_bit = bit (insn1, 7);\n   unsigned int rt = bits (insn2, 12, 15);\n@@ -5714,7 +5714,7 @@ thumb2_copy_load_literal (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n thumb2_copy_load_reg_imm (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t  uint16_t insn2, struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc,\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc,\n \t\t\t  int writeback, int immed)\n {\n   unsigned int rt = bits (insn2, 12, 15);\n@@ -5761,7 +5761,7 @@ thumb2_copy_load_reg_imm (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n arm_copy_ldr_str_ldrb_strb (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t    struct regcache *regs,\n-\t\t\t    arm_displaced_step_closure *dsc,\n+\t\t\t    arm_displaced_step_copy_insn_closure *dsc,\n \t\t\t    int load, int size, int usermode)\n {\n   int immed = !bit (insn, 25);\n@@ -5844,7 +5844,7 @@ arm_copy_ldr_str_ldrb_strb (struct gdbarch *gdbarch, uint32_t insn,\n \n static void\n cleanup_block_load_all (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\tarm_displaced_step_closure *dsc)\n+\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   int inc = dsc->u.block.increment;\n   int bump_before = dsc->u.block.before ? (inc ? 4 : -4) : 0;\n@@ -5904,7 +5904,7 @@ cleanup_block_load_all (struct gdbarch *gdbarch, struct regcache *regs,\n \n static void\n cleanup_block_store_pc (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\tarm_displaced_step_closure *dsc)\n+\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   uint32_t status = displaced_read_reg (regs, dsc, ARM_PS_REGNUM);\n   int store_executed = condition_true (dsc->u.block.cond, status);\n@@ -5955,7 +5955,7 @@ cleanup_block_store_pc (struct gdbarch *gdbarch, struct regcache *regs,\n static void\n cleanup_block_load_pc (struct gdbarch *gdbarch,\n \t\t       struct regcache *regs,\n-\t\t       arm_displaced_step_closure *dsc)\n+\t\t       arm_displaced_step_copy_insn_closure *dsc)\n {\n   uint32_t status = displaced_read_reg (regs, dsc, ARM_PS_REGNUM);\n   int load_executed = condition_true (dsc->u.block.cond, status);\n@@ -6031,7 +6031,7 @@ cleanup_block_load_pc (struct gdbarch *gdbarch,\n static int\n arm_copy_block_xfer (struct gdbarch *gdbarch, uint32_t insn,\n \t\t     struct regcache *regs,\n-\t\t     arm_displaced_step_closure *dsc)\n+\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   int load = bit (insn, 20);\n   int user = bit (insn, 22);\n@@ -6143,7 +6143,7 @@ arm_copy_block_xfer (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb2_copy_block_xfer (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n \t\t\tstruct regcache *regs,\n-\t\t\tarm_displaced_step_closure *dsc)\n+\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   int rn = bits (insn1, 0, 3);\n   int load = bit (insn1, 4);\n@@ -6287,7 +6287,7 @@ arm_software_single_step (struct regcache *regcache)\n \n static void\n cleanup_svc (struct gdbarch *gdbarch, struct regcache *regs,\n-\t     arm_displaced_step_closure *dsc)\n+\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   CORE_ADDR resume_addr = dsc->insn_addr + dsc->insn_size;\n \n@@ -6302,7 +6302,7 @@ cleanup_svc (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n install_svc (struct gdbarch *gdbarch, struct regcache *regs,\n-\t     arm_displaced_step_closure *dsc)\n+\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   /* Preparation: none.\n      Insn: unmodified svc.\n@@ -6324,7 +6324,7 @@ install_svc (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n arm_copy_svc (struct gdbarch *gdbarch, uint32_t insn,\n-\t      struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t      regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n \n   displaced_debug_printf (\"copying svc insn %.8lx\",\n@@ -6337,7 +6337,7 @@ arm_copy_svc (struct gdbarch *gdbarch, uint32_t insn,\n \n static int\n thumb_copy_svc (struct gdbarch *gdbarch, uint16_t insn,\n-\t\tstruct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\tregcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n \n   displaced_debug_printf (\"copying svc insn %.4x\", insn);\n@@ -6351,7 +6351,7 @@ thumb_copy_svc (struct gdbarch *gdbarch, uint16_t insn,\n \n static int\n arm_copy_undef (struct gdbarch *gdbarch, uint32_t insn,\n-\t\tarm_displaced_step_closure *dsc)\n+\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_debug_printf (\"copying undefined insn %.8lx\",\n \t\t\t  (unsigned long) insn);\n@@ -6363,7 +6363,7 @@ arm_copy_undef (struct gdbarch *gdbarch, uint32_t insn,\n \n static int\n thumb_32bit_copy_undef (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n-\t\t       arm_displaced_step_closure *dsc)\n+\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n \n   displaced_debug_printf (\"copying undefined insn %.4x %.4x\",\n@@ -6380,7 +6380,7 @@ thumb_32bit_copy_undef (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n \n static int\n arm_copy_unpred (struct gdbarch *gdbarch, uint32_t insn,\n-\t\t arm_displaced_step_closure *dsc)\n+\t\t arm_displaced_step_copy_insn_closure *dsc)\n {\n   displaced_debug_printf (\"copying unpredictable insn %.8lx\",\n \t\t\t  (unsigned long) insn);\n@@ -6396,7 +6396,7 @@ arm_copy_unpred (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_misc_memhint_neon (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t      struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc)\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op1 = bits (insn, 20, 26), op2 = bits (insn, 4, 7);\n   unsigned int rn = bits (insn, 16, 19);\n@@ -6456,7 +6456,7 @@ arm_decode_misc_memhint_neon (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_unconditional (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t  struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   if (bit (insn, 27) == 0)\n     return arm_decode_misc_memhint_neon (gdbarch, insn, regs, dsc);\n@@ -6541,7 +6541,7 @@ arm_decode_unconditional (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_miscellaneous (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t  struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op2 = bits (insn, 4, 6);\n   unsigned int op = bits (insn, 21, 22);\n@@ -6592,7 +6592,7 @@ arm_decode_miscellaneous (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_dp_misc (struct gdbarch *gdbarch, uint32_t insn,\n \t\t    struct regcache *regs,\n-\t\t    arm_displaced_step_closure *dsc)\n+\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   if (bit (insn, 25))\n     switch (bits (insn, 20, 24))\n@@ -6638,7 +6638,7 @@ arm_decode_dp_misc (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_ld_st_word_ubyte (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t     struct regcache *regs,\n-\t\t\t     arm_displaced_step_closure *dsc)\n+\t\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   int a = bit (insn, 25), b = bit (insn, 4);\n   uint32_t op1 = bits (insn, 20, 24);\n@@ -6674,7 +6674,7 @@ arm_decode_ld_st_word_ubyte (struct gdbarch *gdbarch, uint32_t insn,\n \n static int\n arm_decode_media (struct gdbarch *gdbarch, uint32_t insn,\n-\t\t  arm_displaced_step_closure *dsc)\n+\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   switch (bits (insn, 20, 24))\n     {\n@@ -6731,7 +6731,7 @@ arm_decode_media (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_b_bl_ldmstm (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\tstruct regcache *regs,\n-\t\t\tarm_displaced_step_closure *dsc)\n+\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   if (bit (insn, 25))\n     return arm_copy_b_bl_blx (gdbarch, insn, regs, dsc);\n@@ -6742,7 +6742,7 @@ arm_decode_b_bl_ldmstm (struct gdbarch *gdbarch, uint32_t insn,\n static int\n arm_decode_ext_reg_ld_st (struct gdbarch *gdbarch, uint32_t insn,\n \t\t\t  struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int opcode = bits (insn, 20, 24);\n \n@@ -6775,7 +6775,7 @@ arm_decode_ext_reg_ld_st (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb2_decode_dp_shift_reg (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t    uint16_t insn2,  struct regcache *regs,\n-\t\t\t    arm_displaced_step_closure *dsc)\n+\t\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   /* PC is only allowed to be used in instruction MOV.  */\n \n@@ -6796,7 +6796,7 @@ thumb2_decode_dp_shift_reg (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n thumb2_decode_ext_reg_ld_st (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t     uint16_t insn2,  struct regcache *regs,\n-\t\t\t     arm_displaced_step_closure *dsc)\n+\t\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int opcode = bits (insn1, 4, 8);\n \n@@ -6831,7 +6831,7 @@ thumb2_decode_ext_reg_ld_st (struct gdbarch *gdbarch, uint16_t insn1,\n \n static int\n arm_decode_svc_copro (struct gdbarch *gdbarch, uint32_t insn,\n-\t\t      struct regcache *regs, arm_displaced_step_closure *dsc)\n+\t\t      regcache *regs, arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int op1 = bits (insn, 20, 25);\n   int op = bit (insn, 4);\n@@ -6877,7 +6877,7 @@ arm_decode_svc_copro (struct gdbarch *gdbarch, uint32_t insn,\n static int\n thumb2_decode_svc_copro (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t uint16_t insn2, struct regcache *regs,\n-\t\t\t arm_displaced_step_closure *dsc)\n+\t\t\t arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int coproc = bits (insn2, 8, 11);\n   unsigned int bit_5_8 = bits (insn1, 5, 8);\n@@ -6917,7 +6917,7 @@ thumb2_decode_svc_copro (struct gdbarch *gdbarch, uint16_t insn1,\n \n static void\n install_pc_relative (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t     arm_displaced_step_closure *dsc, int rd)\n+\t\t     arm_displaced_step_copy_insn_closure *dsc, int rd)\n {\n   /* ADR Rd, #imm\n \n@@ -6935,7 +6935,7 @@ install_pc_relative (struct gdbarch *gdbarch, struct regcache *regs,\n \n static int\n thumb_copy_pc_relative_16bit (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc,\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc,\n \t\t\t      int rd, unsigned int imm)\n {\n \n@@ -6950,7 +6950,7 @@ thumb_copy_pc_relative_16bit (struct gdbarch *gdbarch, struct regcache *regs,\n static int\n thumb_decode_pc_relative_16bit (struct gdbarch *gdbarch, uint16_t insn,\n \t\t\t\tstruct regcache *regs,\n-\t\t\t\tarm_displaced_step_closure *dsc)\n+\t\t\t\tarm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rd = bits (insn, 8, 10);\n   unsigned int imm8 = bits (insn, 0, 7);\n@@ -6964,7 +6964,7 @@ thumb_decode_pc_relative_16bit (struct gdbarch *gdbarch, uint16_t insn,\n static int\n thumb_copy_pc_relative_32bit (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t      uint16_t insn2, struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc)\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rd = bits (insn2, 8, 11);\n   /* Since immediate has the same encoding in ADR ADD and SUB, so we simply\n@@ -6999,7 +6999,7 @@ thumb_copy_pc_relative_32bit (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n thumb_copy_16bit_ldr_literal (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t      struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc)\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned int rt = bits (insn1, 8, 10);\n   unsigned int pc;\n@@ -7046,7 +7046,7 @@ thumb_copy_16bit_ldr_literal (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n thumb_copy_cbnz_cbz (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t     struct regcache *regs,\n-\t\t     arm_displaced_step_closure *dsc)\n+\t\t     arm_displaced_step_copy_insn_closure *dsc)\n {\n   int non_zero = bit (insn1, 11);\n   unsigned int imm5 = (bit (insn1, 9) << 6) | (bits (insn1, 3, 7) << 1);\n@@ -7083,7 +7083,7 @@ thumb_copy_cbnz_cbz (struct gdbarch *gdbarch, uint16_t insn1,\n static int\n thumb2_copy_table_branch (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t  uint16_t insn2, struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   ULONGEST rn_val, rm_val;\n   int is_tbh = bit (insn2, 4);\n@@ -7125,7 +7125,7 @@ thumb2_copy_table_branch (struct gdbarch *gdbarch, uint16_t insn1,\n \n static void\n cleanup_pop_pc_16bit_all (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc)\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc)\n {\n   /* PC <- r7 */\n   int val = displaced_read_reg (regs, dsc, 7);\n@@ -7143,7 +7143,7 @@ cleanup_pop_pc_16bit_all (struct gdbarch *gdbarch, struct regcache *regs,\n static int\n thumb_copy_pop_pc_16bit (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t struct regcache *regs,\n-\t\t\t arm_displaced_step_closure *dsc)\n+\t\t\t arm_displaced_step_copy_insn_closure *dsc)\n {\n   dsc->u.block.regmask = insn1 & 0x00ff;\n \n@@ -7212,7 +7212,7 @@ thumb_copy_pop_pc_16bit (struct gdbarch *gdbarch, uint16_t insn1,\n static void\n thumb_process_displaced_16bit_insn (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t\t    struct regcache *regs,\n-\t\t\t\t    arm_displaced_step_closure *dsc)\n+\t\t\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   unsigned short op_bit_12_15 = bits (insn1, 12, 15);\n   unsigned short op_bit_10_11 = bits (insn1, 10, 11);\n@@ -7316,7 +7316,7 @@ static int\n decode_thumb_32bit_ld_mem_hints (struct gdbarch *gdbarch,\n \t\t\t\t uint16_t insn1, uint16_t insn2,\n \t\t\t\t struct regcache *regs,\n-\t\t\t\t arm_displaced_step_closure *dsc)\n+\t\t\t\t arm_displaced_step_copy_insn_closure *dsc)\n {\n   int rt = bits (insn2, 12, 15);\n   int rn = bits (insn1, 0, 3);\n@@ -7395,7 +7395,7 @@ decode_thumb_32bit_ld_mem_hints (struct gdbarch *gdbarch,\n static void\n thumb_process_displaced_32bit_insn (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t\t    uint16_t insn2, struct regcache *regs,\n-\t\t\t\t    arm_displaced_step_closure *dsc)\n+\t\t\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   int err = 0;\n   unsigned short op = bit (insn2, 15);\n@@ -7523,7 +7523,7 @@ thumb_process_displaced_32bit_insn (struct gdbarch *gdbarch, uint16_t insn1,\n static void\n thumb_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n \t\t\t      struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc)\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc)\n {\n   enum bfd_endian byte_order_for_code = gdbarch_byte_order_for_code (gdbarch);\n   uint16_t insn1\n@@ -7547,7 +7547,7 @@ thumb_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n void\n arm_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n \t\t\t    CORE_ADDR to, struct regcache *regs,\n-\t\t\t    arm_displaced_step_closure *dsc)\n+\t\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   int err = 0;\n   enum bfd_endian byte_order_for_code = gdbarch_byte_order_for_code (gdbarch);\n@@ -7604,7 +7604,8 @@ arm_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n \n void\n arm_displaced_init_closure (struct gdbarch *gdbarch, CORE_ADDR from,\n-\t\t\t    CORE_ADDR to, arm_displaced_step_closure *dsc)\n+\t\t\t    CORE_ADDR to,\n+\t\t\t    arm_displaced_step_copy_insn_closure *dsc)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n   unsigned int i, len, offset;\n@@ -7654,11 +7655,12 @@ arm_displaced_init_closure (struct gdbarch *gdbarch, CORE_ADDR from,\n \n void\n arm_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t  struct displaced_step_closure *dsc_,\n+\t\t\t  struct displaced_step_copy_insn_closure *dsc_,\n \t\t\t  CORE_ADDR from, CORE_ADDR to,\n \t\t\t  struct regcache *regs)\n {\n-  arm_displaced_step_closure *dsc = (arm_displaced_step_closure *) dsc_;\n+  arm_displaced_step_copy_insn_closure *dsc\n+    = (arm_displaced_step_copy_insn_closure *) dsc_;\n \n   if (dsc->cleanup)\n     dsc->cleanup (gdbarch, regs, dsc);"
    },
    {
      "sha": "b1f52ff229f284b6cd63ce7fbd5d905e23ca5b8f",
      "filename": "gdb/arm-tdep.h",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/arm-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/arm-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.h?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -149,7 +149,8 @@ struct gdbarch_tdep\n    sequence) and any scratch words, etc.  */\n #define ARM_DISPLACED_MODIFIED_INSNS\t8\n \n-struct arm_displaced_step_closure : public displaced_step_closure\n+struct arm_displaced_step_copy_insn_closure\n+  : public displaced_step_copy_insn_closure\n {\n   ULONGEST tmp[DISPLACED_TEMPS];\n   int rd;\n@@ -196,7 +197,7 @@ struct arm_displaced_step_closure : public displaced_step_closure\n       /* If non-NULL, override generic SVC handling (e.g. for a particular\n \t OS).  */\n       int (*copy_svc_os) (struct gdbarch *gdbarch, struct regcache *regs,\n-\t\t\t  arm_displaced_step_closure *dsc);\n+\t\t\t  arm_displaced_step_copy_insn_closure *dsc);\n     } svc;\n   } u;\n \n@@ -215,7 +216,7 @@ struct arm_displaced_step_closure : public displaced_step_closure\n   CORE_ADDR insn_addr;\n   CORE_ADDR scratch_base;\n   void (*cleanup) (struct gdbarch *, struct regcache *,\n-\t\t   arm_displaced_step_closure *);\n+\t\t   arm_displaced_step_copy_insn_closure *);\n };\n \n /* Values for the WRITE_PC argument to displaced_write_reg.  If the register\n@@ -234,16 +235,17 @@ enum pc_write_style\n extern void\n   arm_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n \t\t\t      CORE_ADDR to, struct regcache *regs,\n-\t\t\t      arm_displaced_step_closure *dsc);\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc);\n extern void\n   arm_displaced_init_closure (struct gdbarch *gdbarch, CORE_ADDR from,\n-\t\t\t      CORE_ADDR to, arm_displaced_step_closure *dsc);\n+\t\t\t      CORE_ADDR to,\n+\t\t\t      arm_displaced_step_copy_insn_closure *dsc);\n extern ULONGEST\n-  displaced_read_reg (struct regcache *regs, arm_displaced_step_closure *dsc,\n+  displaced_read_reg (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \t\t      int regno);\n extern void\n   displaced_write_reg (struct regcache *regs,\n-\t\t       arm_displaced_step_closure *dsc, int regno,\n+\t\t       arm_displaced_step_copy_insn_closure *dsc, int regno,\n \t\t       ULONGEST val, enum pc_write_style write_pc);\n \n CORE_ADDR arm_skip_stub (struct frame_info *, CORE_ADDR);\n@@ -262,7 +264,7 @@ int arm_is_thumb (struct regcache *regcache);\n int arm_frame_is_thumb (struct frame_info *frame);\n \n extern void arm_displaced_step_fixup (struct gdbarch *,\n-\t\t\t\t      struct displaced_step_closure *,\n+\t\t\t\t      displaced_step_copy_insn_closure *,\n \t\t\t\t      CORE_ADDR, CORE_ADDR, struct regcache *);\n \n /* Return the bit mask in ARM_PS_REGNUM that indicates Thumb mode.  */"
    },
    {
      "sha": "0ec626c6f8c429d9fcbb0641f59b58b67c9909df",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -3969,7 +3969,7 @@ gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch)\n   return gdbarch->displaced_step_copy_insn != NULL;\n }\n \n-displaced_step_closure_up\n+displaced_step_copy_insn_closure_up\n gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4011,7 +4011,7 @@ gdbarch_displaced_step_fixup_p (struct gdbarch *gdbarch)\n }\n \n void\n-gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs)\n+gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, struct displaced_step_copy_insn_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs)\n {\n   gdb_assert (gdbarch != NULL);\n   gdb_assert (gdbarch->displaced_step_fixup != NULL);"
    },
    {
      "sha": "4f52e8cd874f122bf01ca044d74a6203878ba687",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -1030,8 +1030,8 @@ extern void set_gdbarch_max_insn_length (struct gdbarch *gdbarch, ULONGEST max_i\n \n extern bool gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch);\n \n-typedef displaced_step_closure_up (gdbarch_displaced_step_copy_insn_ftype) (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n-extern displaced_step_closure_up gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n+typedef displaced_step_copy_insn_closure_up (gdbarch_displaced_step_copy_insn_ftype) (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n+extern displaced_step_copy_insn_closure_up gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n extern void set_gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, gdbarch_displaced_step_copy_insn_ftype *displaced_step_copy_insn);\n \n /* Return true if GDB should use hardware single-stepping to execute a displaced\n@@ -1066,8 +1066,8 @@ extern void set_gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch, g\n \n extern bool gdbarch_displaced_step_fixup_p (struct gdbarch *gdbarch);\n \n-typedef void (gdbarch_displaced_step_fixup_ftype) (struct gdbarch *gdbarch, struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n-extern void gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n+typedef void (gdbarch_displaced_step_fixup_ftype) (struct gdbarch *gdbarch, struct displaced_step_copy_insn_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n+extern void gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, struct displaced_step_copy_insn_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n extern void set_gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, gdbarch_displaced_step_fixup_ftype *displaced_step_fixup);\n \n /* Return the address of an appropriate place to put displaced"
    },
    {
      "sha": "f67ec9dcd2d6b9581b1db19877894de669b2c631",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -783,7 +783,7 @@ V;ULONGEST;max_insn_length;;;0;0\n # If the instruction cannot execute out of line, return NULL.  The\n # core falls back to stepping past the instruction in-line instead in\n # that case.\n-M;displaced_step_closure_up;displaced_step_copy_insn;CORE_ADDR from, CORE_ADDR to, struct regcache *regs;from, to, regs\n+M;displaced_step_copy_insn_closure_up;displaced_step_copy_insn;CORE_ADDR from, CORE_ADDR to, struct regcache *regs;from, to, regs\n \n # Return true if GDB should use hardware single-stepping to execute a displaced\n # step instruction.  If false, GDB will simply restart execution at the\n@@ -811,7 +811,7 @@ m;bool;displaced_step_hw_singlestep;void;;;default_displaced_step_hw_singlestep;\n #\n # For a general explanation of displaced stepping and how GDB uses it,\n # see the comments in infrun.c.\n-M;void;displaced_step_fixup;struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs;closure, from, to, regs;;NULL\n+M;void;displaced_step_fixup;struct displaced_step_copy_insn_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs;closure, from, to, regs;;NULL\n \n # Return the address of an appropriate place to put displaced\n # instructions while we step over them.  There need only be one such"
    },
    {
      "sha": "ab7d23611f8952f2e74be38f0ca7bb98bde27458",
      "filename": "gdb/i386-linux-tdep.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/i386-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/i386-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -789,29 +789,30 @@ i386_linux_iterate_over_regset_sections (struct gdbarch *gdbarch,\n    PC should get relocated back to its vDSO address.  Hide the 'ret'\n    instruction by 'nop' so that i386_displaced_step_fixup is not confused.\n    \n-   It is not fully correct as the bytes in struct displaced_step_closure will\n-   not match the inferior code.  But we would need some new flag in\n-   displaced_step_closure otherwise to keep the state that syscall is finishing\n-   for the later i386_displaced_step_fixup execution as the syscall execution\n-   is already no longer detectable there.  The new flag field would mean\n-   i386-linux-tdep.c needs to wrap all the displacement methods of i386-tdep.c\n-   which does not seem worth it.  The same effect is achieved by patching that\n-   'nop' instruction there instead.  */\n-\n-static displaced_step_closure_up\n+   It is not fully correct as the bytes in struct\n+   displaced_step_copy_insn_closure will not match the inferior code.  But we\n+   would need some new flag in displaced_step_copy_insn_closure otherwise to\n+   keep the state that syscall is finishing for the later\n+   i386_displaced_step_fixup execution as the syscall execution is already no\n+   longer detectable there.  The new flag field would mean i386-linux-tdep.c\n+   needs to wrap all the displacement methods of i386-tdep.c which does not seem\n+   worth it.  The same effect is achieved by patching that 'nop' instruction\n+   there instead.  */\n+\n+static displaced_step_copy_insn_closure_up\n i386_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t     CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t     struct regcache *regs)\n {\n-  displaced_step_closure_up closure_\n+  displaced_step_copy_insn_closure_up closure_\n     =  i386_displaced_step_copy_insn (gdbarch, from, to, regs);\n \n   if (i386_linux_get_syscall_number_from_regcache (regs) != -1)\n     {\n       /* The closure returned by i386_displaced_step_copy_insn is simply a\n \t buffer with a copy of the instruction. */\n-      i386_displaced_step_closure *closure\n-\t= (i386_displaced_step_closure *) closure_.get ();\n+      i386_displaced_step_copy_insn_closure *closure\n+\t= (i386_displaced_step_copy_insn_closure *) closure_.get ();\n \n       /* Fake nop.  */\n       closure->buf[0] = 0x90;"
    },
    {
      "sha": "d59008b3bc378d3a0808fdac41bb7773101b15be",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -799,14 +799,14 @@ i386_insn_is_jump (struct gdbarch *gdbarch, CORE_ADDR addr)\n \n /* Some kernels may run one past a syscall insn, so we have to cope.  */\n \n-displaced_step_closure_up\n+displaced_step_copy_insn_closure_up\n i386_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t       CORE_ADDR from, CORE_ADDR to,\n \t\t\t       struct regcache *regs)\n {\n   size_t len = gdbarch_max_insn_length (gdbarch);\n-  std::unique_ptr<i386_displaced_step_closure> closure\n-    (new i386_displaced_step_closure (len));\n+  std::unique_ptr<i386_displaced_step_copy_insn_closure> closure\n+    (new i386_displaced_step_copy_insn_closure (len));\n   gdb_byte *buf = closure->buf.data ();\n \n   read_memory (from, buf, len);\n@@ -830,15 +830,15 @@ i386_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n-  return displaced_step_closure_up (closure.release ());\n+  return displaced_step_copy_insn_closure_up (closure.release ());\n }\n \n /* Fix up the state of registers and memory after having single-stepped\n    a displaced instruction.  */\n \n void\n i386_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t   struct displaced_step_closure *closure_,\n+\t\t\t   struct displaced_step_copy_insn_closure *closure_,\n \t\t\t   CORE_ADDR from, CORE_ADDR to,\n \t\t\t   struct regcache *regs)\n {\n@@ -850,8 +850,8 @@ i386_displaced_step_fixup (struct gdbarch *gdbarch,\n      applying it.  */\n   ULONGEST insn_offset = to - from;\n \n-  i386_displaced_step_closure *closure\n-    = (i386_displaced_step_closure *) closure_;\n+  i386_displaced_step_copy_insn_closure *closure\n+    = (i386_displaced_step_copy_insn_closure *) closure_;\n   gdb_byte *insn = closure->buf.data ();\n   /* The start of the insn, needed in case we see some prefixes.  */\n   gdb_byte *insn_start = insn;"
    },
    {
      "sha": "f8a93b121c9b8ff7ee464571271c121a64c72acc",
      "filename": "gdb/i386-tdep.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/i386-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/i386-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.h?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -439,15 +439,15 @@ extern void\n \t\t\t\t     void *cb_data,\n \t\t\t\t     const struct regcache *regcache);\n \n-typedef buf_displaced_step_closure i386_displaced_step_closure;\n+typedef buf_displaced_step_copy_insn_closure\n+  i386_displaced_step_copy_insn_closure;\n \n-extern displaced_step_closure_up i386_displaced_step_copy_insn\n+extern displaced_step_copy_insn_closure_up i386_displaced_step_copy_insn\n   (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to,\n    struct regcache *regs);\n-extern void i386_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t\t       struct displaced_step_closure *closure,\n-\t\t\t\t       CORE_ADDR from, CORE_ADDR to,\n-\t\t\t\t       struct regcache *regs);\n+extern void i386_displaced_step_fixup\n+  (struct gdbarch *gdbarch, displaced_step_copy_insn_closure *closure,\n+   CORE_ADDR from, CORE_ADDR to, regcache *regs);\n \n /* Initialize a basic ELF architecture variant.  */\n extern void i386_elf_init_abi (struct gdbarch_info, struct gdbarch *);"
    },
    {
      "sha": "175d095154cc4e369a08d8dae530973d6ab88490",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -1459,9 +1459,10 @@ step_over_info_valid_p (void)\n    displaced step operation on it.  See displaced_step_prepare and\n    displaced_step_fixup for details.  */\n \n-/* Default destructor for displaced_step_closure.  */\n+/* Default destructor for displaced_step_copy_insn_closure.  */\n \n-displaced_step_closure::~displaced_step_closure () = default;\n+displaced_step_copy_insn_closure::~displaced_step_copy_insn_closure ()\n+  = default;\n \n /* Returns true if any inferior has a thread doing a displaced\n    step.  */\n@@ -1497,11 +1498,11 @@ displaced_step_in_progress (inferior *inf)\n }\n \n /* If inferior is in displaced stepping, and ADDR equals to starting address\n-   of copy area, return corresponding displaced_step_closure.  Otherwise,\n-   return NULL.  */\n+   of copy area, return corresponding displaced_step_copy_insn_closure.\n+   Otherwise, return NULL.  */\n \n-struct displaced_step_closure*\n-get_displaced_step_closure_by_addr (CORE_ADDR addr)\n+displaced_step_copy_insn_closure *\n+get_displaced_step_copy_insn_closure_by_addr (CORE_ADDR addr)\n {\n   displaced_step_inferior_state &displaced\n     = current_inferior ()->displaced_step_state;"
    },
    {
      "sha": "a276ddf02502b8ad075e25af6ecb17ca3efcca65",
      "filename": "gdb/infrun.h",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/infrun.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/infrun.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.h?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -239,8 +239,8 @@ extern void clear_exit_convenience_vars (void);\n /* Dump LEN bytes at BUF in hex to a string and return it.  */\n extern std::string displaced_step_dump_bytes (const gdb_byte *buf, size_t len);\n \n-extern struct displaced_step_closure *get_displaced_step_closure_by_addr\n-    (CORE_ADDR addr);\n+extern struct displaced_step_copy_insn_closure *\n+  get_displaced_step_copy_insn_closure_by_addr (CORE_ADDR addr);\n \n extern void update_observer_mode (void);\n \n@@ -282,18 +282,19 @@ extern void all_uis_on_sync_execution_starting (void);\n \n /* Base class for displaced stepping closures (the arch-specific data).  */\n \n-struct displaced_step_closure\n+struct displaced_step_copy_insn_closure\n {\n-  virtual ~displaced_step_closure () = 0;\n+  virtual ~displaced_step_copy_insn_closure () = 0;\n };\n \n-using displaced_step_closure_up = std::unique_ptr<displaced_step_closure>;\n+using displaced_step_copy_insn_closure_up\n+  = std::unique_ptr<displaced_step_copy_insn_closure>;\n \n /* A simple displaced step closure that contains only a byte buffer.  */\n \n-struct buf_displaced_step_closure : displaced_step_closure\n+struct buf_displaced_step_copy_insn_closure : displaced_step_copy_insn_closure\n {\n-  buf_displaced_step_closure (int buf_size)\n+  buf_displaced_step_copy_insn_closure (int buf_size)\n   : buf (buf_size)\n   {}\n \n@@ -334,7 +335,7 @@ struct displaced_step_inferior_state\n \n   /* The closure provided gdbarch_displaced_step_copy_insn, to be used\n      for post-step cleanup.  */\n-  displaced_step_closure_up step_closure;\n+  displaced_step_copy_insn_closure_up step_closure;\n \n   /* The address of the original instruction, and the copy we\n      made.  */"
    },
    {
      "sha": "626b47e244f198385c3280a23af09999b13e1f68",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -851,18 +851,19 @@ typedef BP_MANIPULATION_ENDIAN (little_breakpoint, big_breakpoint)\n \t\t\t\t\t || (insn & STORE_CONDITIONAL_MASK) == STHCX_INSTRUCTION \\\n \t\t\t\t\t || (insn & STORE_CONDITIONAL_MASK) == STQCX_INSTRUCTION)\n \n-typedef buf_displaced_step_closure ppc_displaced_step_closure;\n+typedef buf_displaced_step_copy_insn_closure\n+  ppc_displaced_step_copy_insn_closure;\n \n /* We can't displaced step atomic sequences.  */\n \n-static displaced_step_closure_up\n+static displaced_step_copy_insn_closure_up\n ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t      CORE_ADDR from, CORE_ADDR to,\n \t\t\t      struct regcache *regs)\n {\n   size_t len = gdbarch_max_insn_length (gdbarch);\n-  std::unique_ptr<ppc_displaced_step_closure> closure\n-    (new ppc_displaced_step_closure (len));\n+  std::unique_ptr<ppc_displaced_step_copy_insn_closure> closure\n+    (new ppc_displaced_step_copy_insn_closure (len));\n   gdb_byte *buf = closure->buf.data ();\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   int insn;\n@@ -887,20 +888,21 @@ ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t  displaced_step_dump_bytes (buf, len).c_str ());;\n \n   /* This is a work around for a problem with g++ 4.8.  */\n-  return displaced_step_closure_up (closure.release ());\n+  return displaced_step_copy_insn_closure_up (closure.release ());\n }\n \n /* Fix up the state of registers and memory after having single-stepped\n    a displaced instruction.  */\n static void\n ppc_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t  struct displaced_step_closure *closure_,\n+\t\t\t  struct displaced_step_copy_insn_closure *closure_,\n \t\t\t  CORE_ADDR from, CORE_ADDR to,\n \t\t\t  struct regcache *regs)\n {\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   /* Our closure is a copy of the instruction.  */\n-  ppc_displaced_step_closure *closure = (ppc_displaced_step_closure *) closure_;\n+  ppc_displaced_step_copy_insn_closure *closure\n+    = (ppc_displaced_step_copy_insn_closure *) closure_;\n   ULONGEST insn  = extract_unsigned_integer (closure->buf.data (),\n \t\t\t\t\t     PPC_INSN_SIZE, byte_order);\n   ULONGEST opcode = 0;"
    },
    {
      "sha": "5429d718c3bed1558f3ad51ef8908c59a8e6581e",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1152d984bb1b66a9ff7d11f46583b6e0188b885b/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "patch": "@@ -421,18 +421,19 @@ is_non_branch_ril (gdb_byte *insn)\n   return 0;\n }\n \n-typedef buf_displaced_step_closure s390_displaced_step_closure;\n+typedef buf_displaced_step_copy_insn_closure\n+  s390_displaced_step_copy_insn_closure;\n \n /* Implementation of gdbarch_displaced_step_copy_insn.  */\n \n-static displaced_step_closure_up\n+static displaced_step_copy_insn_closure_up\n s390_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t       CORE_ADDR from, CORE_ADDR to,\n \t\t\t       struct regcache *regs)\n {\n   size_t len = gdbarch_max_insn_length (gdbarch);\n-  std::unique_ptr<s390_displaced_step_closure> closure\n-    (new s390_displaced_step_closure (len));\n+  std::unique_ptr<s390_displaced_step_copy_insn_closure> closure\n+    (new s390_displaced_step_copy_insn_closure (len));\n   gdb_byte *buf = closure->buf.data ();\n \n   read_memory (from, buf, len);\n@@ -470,21 +471,21 @@ s390_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n-  return displaced_step_closure_up (closure.release ());\n+  return displaced_step_copy_insn_closure_up (closure.release ());\n }\n \n /* Fix up the state of registers and memory after having single-stepped\n    a displaced instruction.  */\n \n static void\n s390_displaced_step_fixup (struct gdbarch *gdbarch,\n-\t\t\t   struct displaced_step_closure *closure_,\n+\t\t\t   displaced_step_copy_insn_closure *closure_,\n \t\t\t   CORE_ADDR from, CORE_ADDR to,\n \t\t\t   struct regcache *regs)\n {\n   /* Our closure is a copy of the instruction.  */\n-  s390_displaced_step_closure *closure\n-    = (s390_displaced_step_closure *) closure_;\n+  s390_displaced_step_copy_insn_closure *closure\n+    = (s390_displaced_step_copy_insn_closure *) closure_;\n   gdb_byte *insn = closure->buf.data ();\n   static int s390_instrlen[] = { 2, 4, 4, 6 };\n   int insnlen = s390_instrlen[insn[0] >> 6];"
    }
  ]
}