{
  "sha": "6665660a411ead049daa85cac5c629d637e22044",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjY2NTY2MGE0MTFlYWQwNDlkYWE4NWNhYzVjNjI5ZDYzN2UyMjA0NA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:23:25Z"
    },
    "message": "Make \"thread apply\" use the gdb::option framework\n\nSimilarly to the \"frame apply\" patch, this makes the \"thread apply\"\nfamily of commands -- \"thread apply TID\", \"thread apply all\" and\n\"taas\" use the gdb::option framework for '-'-style options.\n\nNo new options are added, but there are some user-visible changes:\n\n- Can now abbreviate and complete \"-ascending\"\n\n- We now have a completer for \"thread apply\" commands\n\n  Can now complete options (\"thread apply all -[TAB]\"), and also,\n  'thread apply all COMMAND[TAB]' now does what you'd expect, by\n  making use of the new complete_command routine.\n\n- \"help\" output tweaked with auto-generated option descriptions:\n\n   ~~~\n   Usage: thread apply all [OPTION]... COMMAND\n   Prints per-inferior thread number and target system's thread id\n   followed by COMMAND output.\n\n   By default, an error raised during the execution of COMMAND\n   aborts \"thread apply\".\n\n   Options:\n     -ascending\n       Call COMMAND for all threads in ascending order.\n       The default is descending order.\n\n     -q\n       Disables printing the thread information.\n\n     -c\n       Print any error raised by COMMAND and continue.\n\n     -s\n       Silently ignore any errors or empty output produced by COMMAND.\n   ~~~\n\n  The \"By default ...\" sentence is new as well.\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* thread.c: Include \"cli/cli-option.h\".\n\t(tp_array_compar_ascending): Global.\n\t(tp_array_compar): Delete function.\n\t(tp_array_compar_ascending, tp_array_compar_descending): New\n\tfunctions.\n\t(ascending_option_def, qcs_flag_option_def)\n\t(thr_qcs_flags_option_defs)\n\t(make_thread_apply_all_options_def_group)\n\t(make_thread_apply_options_def_group): New.\n\t(thread_apply_all_command): Use gdb::option::process_options.\n\t(thread_apply_command_completer)\n\t(thread_apply_all_command_completer): New.\n\t(thread_apply_command): Use gdb::option::process_options.\n\t(_initialize_thread): Delete THREAD_APPLY_FLAGS_HELP, replace it\n\twith a new THREAD_APPLY_OPTION_HELP.  Use gdb::option::build_help\n\tto generate help text of \"thread apply\".  Adjust \"taas\"'s help.\n\t* tid-parse.c (tid_range_parser::in_thread_range): New method.\n\t* tid-parse.h (tid_range_parser::in_thread_range): New method.\n\ngdb/testsuite/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/options.exp (test-thread-apply): New.\n\t(top level): Call it.",
    "tree": {
      "sha": "7a28a95777f94ced2128db5f8fd0067021eda951",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a28a95777f94ced2128db5f8fd0067021eda951"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6665660a411ead049daa85cac5c629d637e22044",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6665660a411ead049daa85cac5c629d637e22044",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6665660a411ead049daa85cac5c629d637e22044",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6665660a411ead049daa85cac5c629d637e22044/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f7e13587eaf1e2d433e21ac0a9e413a98e53652d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7e13587eaf1e2d433e21ac0a9e413a98e53652d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f7e13587eaf1e2d433e21ac0a9e413a98e53652d"
    }
  ],
  "stats": {
    "total": 388,
    "additions": 327,
    "deletions": 61
  },
  "files": [
    {
      "sha": "51842ed10d11df48b942ff0551047fa92d1e54be",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6665660a411ead049daa85cac5c629d637e22044/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6665660a411ead049daa85cac5c629d637e22044/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6665660a411ead049daa85cac5c629d637e22044",
      "patch": "@@ -1,3 +1,24 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* thread.c: Include \"cli/cli-option.h\".\n+\t(tp_array_compar_ascending): Global.\n+\t(tp_array_compar): Delete function.\n+\t(tp_array_compar_ascending, tp_array_compar_descending): New\n+\tfunctions.\n+\t(ascending_option_def, qcs_flag_option_def)\n+\t(thr_qcs_flags_option_defs)\n+\t(make_thread_apply_all_options_def_group)\n+\t(make_thread_apply_options_def_group): New.\n+\t(thread_apply_all_command): Use gdb::option::process_options.\n+\t(thread_apply_command_completer)\n+\t(thread_apply_all_command_completer): New.\n+\t(thread_apply_command): Use gdb::option::process_options.\n+\t(_initialize_thread): Delete THREAD_APPLY_FLAGS_HELP, replace it\n+\twith a new THREAD_APPLY_OPTION_HELP.  Use gdb::option::build_help\n+\tto generate help text of \"thread apply\".  Adjust \"taas\"'s help.\n+\t* tid-parse.c (tid_range_parser::in_thread_range): New method.\n+\t* tid-parse.h (tid_range_parser::in_thread_range): New method.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* thread.c (thread_apply_command): Check for invalid TID with"
    },
    {
      "sha": "3a3a6e8132465a6b82e05764cd2e1cddc1e1d991",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6665660a411ead049daa85cac5c629d637e22044/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6665660a411ead049daa85cac5c629d637e22044/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6665660a411ead049daa85cac5c629d637e22044",
      "patch": "@@ -1,3 +1,8 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/options.exp (test-thread-apply): New.\n+\t(top level): Call it.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/options.exp (test-frame-apply): New."
    },
    {
      "sha": "4570c2a93d4d91b821e4f9673ef8d100933b0a66",
      "filename": "gdb/testsuite/gdb.base/options.exp",
      "status": "modified",
      "additions": 92,
      "deletions": 3,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6665660a411ead049daa85cac5c629d637e22044/gdb/testsuite/gdb.base/options.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6665660a411ead049daa85cac5c629d637e22044/gdb/testsuite/gdb.base/options.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/options.exp?ref=6665660a411ead049daa85cac5c629d637e22044",
      "patch": "@@ -28,6 +28,8 @@\n #  - frame apply\n #  - faas\n #  - tfaas\n+#  - thread apply\n+#  - taas\n \n load_lib completion-support.exp\n \n@@ -371,6 +373,87 @@ proc_with_prefix test-frame-apply {} {\n     }\n }\n \n+# Basic option-machinery + \"thread apply\" command integration tests.\n+proc_with_prefix test-thread-apply {} {\n+\n+    test_gdb_complete_unique \"thread apply all\" \"thread apply all\"\n+    test_gdb_complete_unique \"taas\" \"taas\"\n+\n+    gdb_test \"thread apply 1-\" \\\n+\t\"inverted range\"\n+    test_gdb_complete_none \"frame apply level 1-\"\n+\n+    foreach cmd {\n+\t\"thread apply all\"\n+\t\"thread apply 1\"\n+\t\"taas\"\n+    } {\n+\ttest_gdb_completion_offers_commands \"$cmd \"\n+\n+\t# taas is silent on command error by design.  This procedure\n+\t# hides the difference.  EXPECTED_RE is only considered when\n+\t# not testing with \"taas\".\n+\tproc test_invalid_cmd {cmd arg expected_re} {\n+\t    if {$cmd != \"taas\"} {\n+\t\tgdb_test \"$cmd$arg\" $expected_re\n+\t    } else {\n+\t\tgdb_test_no_output \"$cmd$arg\"\n+\t    }\n+\t}\n+\n+\tgdb_test \"$cmd -\" \"Ambiguous option at: -\"\n+\n+\tif {$cmd != \"thread apply 1\"} {\n+\t    test_gdb_complete_multiple \"$cmd \" \"-\" \"\" {\n+\t\t\"-ascending\"\n+\t\t\"-c\"\n+\t\t\"-q\"\n+\t\t\"-s\"\n+\t    }\n+\t} else {\n+\t    # \"-ascending\" only works with \"all\".\n+\t    test_gdb_complete_multiple \"$cmd \" \"-\" \"\" {\n+\t\t\"-c\"\n+\t\t\"-q\"\n+\t\t\"-s\"\n+\t    }\n+\t}\n+\n+\tif {$cmd == \"thread apply all\" || $cmd == \"taas\"} {\n+\t    set errmsg \\\n+\t\t\"Please specify a command at the end of 'thread apply all'\"\n+\t} elseif {$cmd == \"thread apply 1\"} {\n+\t    set errmsg \\\n+\t\t\"Please specify a command following the thread ID list\"\n+\t} else {\n+\t    error \"unexpected cmd: $cmd\"\n+\t}\n+\n+\twith_test_prefix \"no-trailing-space\" {\n+\t    gdb_test \"$cmd --\" $errmsg\n+\t    test_gdb_complete_unique \"$cmd --\" \"$cmd --\"\n+\t}\n+\n+\twith_test_prefix \"trailing-space\" {\n+\t    gdb_test \"$cmd -- \" $errmsg\n+\t    test_gdb_completion_offers_commands \"$cmd -- \"\n+\t}\n+\n+\t# '-' is a valid TUI command.\n+\ttest_invalid_cmd \"$cmd\" \" -- -\" \\\n+\t    \"Cannot enable the TUI when output is not a terminal\"\n+\ttest_gdb_complete_unique \\\n+\t    \"$cmd -- -\" \\\n+\t    \"$cmd -- -\"\n+\n+\ttest_invalid_cmd $cmd \" -foo\" \\\n+\t    \"Undefined command: \\\"-foo\\\".  Try \\\"help\\\"\\\\.\"\n+\ttest_gdb_complete_none \"$cmd -foo\"\n+\n+\ttest_gdb_completion_offers_commands \"$cmd -c \"\n+    }\n+}\n+\n # Miscellaneous tests.\n proc_with_prefix test-misc {variant} {\n     global all_options\n@@ -808,14 +891,17 @@ foreach_with_prefix cmd {\n }\n \n # Run the print integration tests, both as \"standalone\", and under\n-# \"frame apply\".  The latter checks that the \"frame apply ... COMMAND\"\n-# commands recurse the completion machinery for COMMAND completion\n-# correctly.\n+# \"frame/thread apply\".  The latter checks that the \"frame/thread\n+# apply ... COMMAND\" commands recurse the completion machinery for\n+# COMMAND completion correctly.\n foreach prefix {\n     \"\"\n     \"frame apply all \"\n     \"frame apply 1 \"\n     \"frame apply level 0 \"\n+    \"thread apply all \"\n+    \"thread apply 1 \"\n+    \"thread apply 1 frame apply 1 \"\n } {\n     test-print $prefix\n }\n@@ -832,3 +918,6 @@ test-backtrace\n \n # Basic \"frame apply\" integration tests.\n test-frame-apply\n+\n+# Basic \"thread apply\" integration tests.\n+test-thread-apply"
    },
    {
      "sha": "947427aa046fb6e05bbab988c669c62fc46e9716",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 200,
      "deletions": 58,
      "changes": 258,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6665660a411ead049daa85cac5c629d637e22044/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6665660a411ead049daa85cac5c629d637e22044/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=6665660a411ead049daa85cac5c629d637e22044",
      "patch": "@@ -39,6 +39,7 @@\n #include \"observable.h\"\n #include \"annotate.h\"\n #include \"cli/cli-decode.h\"\n+#include \"cli/cli-option.h\"\n #include \"gdb_regex.h\"\n #include \"cli/cli-utils.h\"\n #include \"thread-fsm.h\"\n@@ -1426,30 +1427,30 @@ print_thread_id (struct thread_info *thr)\n   return s;\n }\n \n-/* If true, tp_array_compar should sort in ascending order, otherwise\n-   in descending order.  */\n+/* Sort an array of struct thread_info pointers by thread ID (first by\n+   inferior number, and then by per-inferior thread number).  Sorts in\n+   ascending order.  */\n \n-static bool tp_array_compar_ascending;\n+static bool\n+tp_array_compar_ascending (const thread_info *a, const thread_info *b)\n+{\n+  if (a->inf->num != b->inf->num)\n+    return a->inf->num < b->inf->num;\n+\n+  return (a->per_inf_num < b->per_inf_num);\n+}\n \n-/* Sort an array for struct thread_info pointers by thread ID (first\n-   by inferior number, and then by per-inferior thread number).  The\n-   order is determined by TP_ARRAY_COMPAR_ASCENDING.  */\n+/* Sort an array of struct thread_info pointers by thread ID (first by\n+   inferior number, and then by per-inferior thread number).  Sorts in\n+   descending order.  */\n \n static bool\n-tp_array_compar (const thread_info *a, const thread_info *b)\n+tp_array_compar_descending (const thread_info *a, const thread_info *b)\n {\n   if (a->inf->num != b->inf->num)\n-    {\n-      if (tp_array_compar_ascending)\n-\treturn a->inf->num < b->inf->num;\n-      else\n-\treturn a->inf->num > b->inf->num;\n-    }\n+    return a->inf->num > b->inf->num;\n \n-  if (tp_array_compar_ascending)\n-    return (a->per_inf_num < b->per_inf_num);\n-  else\n-    return (a->per_inf_num > b->per_inf_num);\n+  return (a->per_inf_num > b->per_inf_num);\n }\n \n /* Switch to thread THR and execute CMD.\n@@ -1490,6 +1491,60 @@ thr_try_catch_cmd (thread_info *thr, const char *cmd, int from_tty,\n     }\n }\n \n+/* Option definition of \"thread apply\"'s \"-ascending\" option.  */\n+\n+static const gdb::option::flag_option_def<> ascending_option_def = {\n+  \"ascending\",\n+  N_(\"\\\n+Call COMMAND for all threads in ascending order.\\n\\\n+The default is descending order.\"),\n+};\n+\n+/* The qcs command line flags for the \"thread apply\" commands.  Keep\n+   this in sync with the \"frame apply\" commands.  */\n+\n+using qcs_flag_option_def\n+  = gdb::option::flag_option_def<qcs_flags>;\n+\n+static const gdb::option::option_def thr_qcs_flags_option_defs[] = {\n+  qcs_flag_option_def {\n+    \"q\", [] (qcs_flags *opt) { return &opt->quiet; },\n+    N_(\"Disables printing the thread information.\"),\n+  },\n+\n+  qcs_flag_option_def {\n+    \"c\", [] (qcs_flags *opt) { return &opt->cont; },\n+    N_(\"Print any error raised by COMMAND and continue.\"),\n+  },\n+\n+  qcs_flag_option_def {\n+    \"s\", [] (qcs_flags *opt) { return &opt->silent; },\n+    N_(\"Silently ignore any errors or empty output produced by COMMAND.\"),\n+  },\n+};\n+\n+/* Create an option_def_group for the \"thread apply all\" options, with\n+   ASCENDING and FLAGS as context.  */\n+\n+static inline std::array<gdb::option::option_def_group, 2>\n+make_thread_apply_all_options_def_group (int *ascending,\n+\t\t\t\t\t qcs_flags *flags)\n+{\n+  return {{\n+    { ascending_option_def.def (), ascending},\n+    { thr_qcs_flags_option_defs, flags },\n+  }};\n+}\n+\n+/* Create an option_def_group for the \"thread apply\" options, with\n+   FLAGS as context.  */\n+\n+static inline gdb::option::option_def_group\n+make_thread_apply_options_def_group (qcs_flags *flags)\n+{\n+  return {thr_qcs_flags_option_defs, flags};\n+}\n+\n /* Apply a GDB command to a list of threads.  List syntax is a whitespace\n    separated list of numbers, or ranges, or the keyword `all'.  Ranges consist\n    of two numbers separated by a hyphen.  Examples:\n@@ -1501,24 +1556,15 @@ thr_try_catch_cmd (thread_info *thr, const char *cmd, int from_tty,\n static void\n thread_apply_all_command (const char *cmd, int from_tty)\n {\n+  int ascending = false;\n   qcs_flags flags;\n \n-  tp_array_compar_ascending = false;\n+  auto group = make_thread_apply_all_options_def_group (&ascending,\n+\t\t\t\t\t\t\t&flags);\n+  gdb::option::process_options\n+    (&cmd, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, group);\n \n-  while (cmd != NULL)\n-    {\n-      if (check_for_argument (&cmd, \"-ascending\", strlen (\"-ascending\")))\n-\t{\n-\t  cmd = skip_spaces (cmd);\n-\t  tp_array_compar_ascending = true;\n-\t  continue;\n-\t}\n-\n-      if (parse_flags_qcs (\"thread apply all\", &cmd, &flags))\n-\tcontinue;\n-\n-      break;\n-    }\n+  validate_flags_qcs (\"thread apply all\", &flags);\n \n   if (cmd == NULL || *cmd == '\\000')\n     error (_(\"Please specify a command at the end of 'thread apply all'\"));\n@@ -1544,7 +1590,10 @@ thread_apply_all_command (const char *cmd, int from_tty)\n \t exit.  */\n       scoped_inc_dec_ref inc_dec_ref (thr_list_cpy);\n \n-      std::sort (thr_list_cpy.begin (), thr_list_cpy.end (), tp_array_compar);\n+      auto *sorter = (ascending\n+\t\t      ? tp_array_compar_ascending\n+\t\t      : tp_array_compar_descending);\n+      std::sort (thr_list_cpy.begin (), thr_list_cpy.end (), sorter);\n \n       scoped_restore_current_thread restore_thread;\n \n@@ -1554,6 +1603,81 @@ thread_apply_all_command (const char *cmd, int from_tty)\n     }\n }\n \n+/* Completer for \"thread apply [ID list]\".  */\n+\n+static void\n+thread_apply_command_completer (cmd_list_element *ignore,\n+\t\t\t\tcompletion_tracker &tracker,\n+\t\t\t\tconst char *text, const char * /*word*/)\n+{\n+  /* Don't leave this to complete_options because there's an early\n+     return below.  */\n+  tracker.set_use_custom_word_point (true);\n+\n+  tid_range_parser parser;\n+  parser.init (text, current_inferior ()->num);\n+\n+  try\n+    {\n+      while (!parser.finished ())\n+\t{\n+\t  int inf_num, thr_start, thr_end;\n+\n+\t  if (!parser.get_tid_range (&inf_num, &thr_start, &thr_end))\n+\t    break;\n+\n+\t  if (parser.in_star_range () || parser.in_thread_range ())\n+\t    parser.skip_range ();\n+\t}\n+    }\n+  catch (const gdb_exception_error &ex)\n+    {\n+      /* get_tid_range throws if it parses a negative number, for\n+\t example.  But a seemingly negative number may be the start of\n+\t an option instead.  */\n+    }\n+\n+  const char *cmd = parser.cur_tok ();\n+\n+  if (cmd == text)\n+    {\n+      /* No thread ID list yet.  */\n+      return;\n+    }\n+\n+  /* Check if we're past a valid thread ID list already.  */\n+  if (parser.finished ()\n+      && cmd > text && !isspace (cmd[-1]))\n+    return;\n+\n+  /* We're past the thread ID list, advance word point.  */\n+  tracker.advance_custom_word_point_by (cmd - text);\n+  text = cmd;\n+\n+  const auto group = make_thread_apply_options_def_group (nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, group))\n+    return;\n+\n+  complete_nested_command_line (tracker, text);\n+}\n+\n+/* Completer for \"thread apply all\".  */\n+\n+static void\n+thread_apply_all_command_completer (cmd_list_element *ignore,\n+\t\t\t\t    completion_tracker &tracker,\n+\t\t\t\t    const char *text, const char *word)\n+{\n+  const auto group = make_thread_apply_all_options_def_group (nullptr,\n+\t\t\t\t\t\t\t      nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, group))\n+    return;\n+\n+  complete_nested_command_line (tracker, text);\n+}\n+\n /* Implementation of the \"thread apply\" command.  */\n \n static void\n@@ -1577,8 +1701,11 @@ thread_apply_command (const char *tidlist, int from_tty)\n \n   cmd = parser.cur_tok ();\n \n-  while (parse_flags_qcs (\"thread apply\", &cmd, &flags))\n-    ;\n+  auto group = make_thread_apply_options_def_group (&flags);\n+  gdb::option::process_options\n+    (&cmd, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, group);\n+\n+  validate_flags_qcs (\"thread apply\", &flags);\n \n   if (*cmd == '\\0')\n     error (_(\"Please specify a command following the thread ID list\"));\n@@ -1953,37 +2080,52 @@ Use this command to switch between threads.\\n\\\n The new thread ID must be currently known.\"),\n \t\t  &thread_cmd_list, \"thread \", 1, &cmdlist);\n \n-#define THREAD_APPLY_FLAGS_HELP \"\\\n+#define THREAD_APPLY_OPTION_HELP \"\\\n Prints per-inferior thread number and target system's thread id\\n\\\n followed by COMMAND output.\\n\\\n-FLAG arguments are -q (quiet), -c (continue), -s (silent).\\n\\\n-Flag -q disables printing the thread information.\\n\\\n-By default, if a COMMAND raises an error, thread apply is aborted.\\n\\\n-Flag -c indicates to print the error and continue.\\n\\\n-Flag -s indicates to silently ignore a COMMAND that raises an error\\n\\\n-or produces no output.\"\n-\n-  add_prefix_cmd (\"apply\", class_run, thread_apply_command,\n-\t\t  _(\"Apply a command to a list of threads.\\n\\\n-Usage: thread apply ID... [FLAG]... COMMAND\\n\\\n+\\n\\\n+By default, an error raised during the execution of COMMAND\\n\\\n+aborts \\\"thread apply\\\".\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\"\n+\n+  const auto thread_apply_opts = make_thread_apply_options_def_group (nullptr);\n+\n+  static std::string thread_apply_help = gdb::option::build_help (N_(\"\\\n+Apply a command to a list of threads.\\n\\\n+Usage: thread apply ID... [OPTION]... COMMAND\\n\\\n ID is a space-separated list of IDs of threads to apply COMMAND on.\\n\"\n-THREAD_APPLY_FLAGS_HELP),\n-\t\t  &thread_apply_list, \"thread apply \", 1, &thread_cmd_list);\n+THREAD_APPLY_OPTION_HELP),\n+\t\t\t       thread_apply_opts);\n+\n+  c = add_prefix_cmd (\"apply\", class_run, thread_apply_command,\n+\t\t      thread_apply_help.c_str (),\n+\t\t      &thread_apply_list, \"thread apply \", 1,\n+\t\t      &thread_cmd_list);\n+  set_cmd_completer_handle_brkchars (c, thread_apply_command_completer);\n \n-  add_cmd (\"all\", class_run, thread_apply_all_command,\n-\t   _(\"\\\n+  const auto thread_apply_all_opts\n+    = make_thread_apply_all_options_def_group (nullptr, nullptr);\n+\n+  static std::string thread_apply_all_help = gdb::option::build_help (N_(\"\\\n Apply a command to all threads.\\n\\\n \\n\\\n-Usage: thread apply all [-ascending] [FLAG]... COMMAND\\n\\\n--ascending: Call COMMAND for all threads in ascending order.\\n\\\n-            The default is descending order.\\n\"\n-THREAD_APPLY_FLAGS_HELP),\n-\t   &thread_apply_list);\n+Usage: thread apply all [OPTION]... COMMAND\\n\"\n+THREAD_APPLY_OPTION_HELP),\n+\t\t\t       thread_apply_all_opts);\n+\n+  c = add_cmd (\"all\", class_run, thread_apply_all_command,\n+\t       thread_apply_all_help.c_str (),\n+\t       &thread_apply_list);\n+  set_cmd_completer_handle_brkchars (c, thread_apply_all_command_completer);\n \n-  add_com (\"taas\", class_run, taas_command, _(\"\\\n+  c = add_com (\"taas\", class_run, taas_command, _(\"\\\n Apply a command to all threads (ignoring errors and empty output).\\n\\\n-Usage: taas COMMAND\\n\\\n-shortcut for 'thread apply all -s COMMAND'\"));\n+Usage: taas [OPTION]... COMMAND\\n\\\n+shortcut for 'thread apply all -s [OPTION]... COMMAND'\\n\\\n+See \\\"help thread apply all\\\" for available options.\"));\n+  set_cmd_completer_handle_brkchars (c, thread_apply_all_command_completer);\n \n   c = add_com (\"tfaas\", class_run, tfaas_command, _(\"\\\n Apply a command to all frames of all threads (ignoring errors and empty output).\\n\\"
    },
    {
      "sha": "6ad8b1f4aff47175b348f374fa74d40b75819851",
      "filename": "gdb/tid-parse.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6665660a411ead049daa85cac5c629d637e22044/gdb/tid-parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6665660a411ead049daa85cac5c629d637e22044/gdb/tid-parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tid-parse.c?ref=6665660a411ead049daa85cac5c629d637e22044",
      "patch": "@@ -307,6 +307,12 @@ tid_range_parser::in_star_range () const\n   return m_state == STATE_STAR_RANGE;\n }\n \n+bool\n+tid_range_parser::in_thread_range () const\n+{\n+  return m_state == STATE_THREAD_RANGE;\n+}\n+\n /* See tid-parse.h.  */\n \n int"
    },
    {
      "sha": "da8ead13653993b31f6df3cc9d460e75c770e954",
      "filename": "gdb/tid-parse.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6665660a411ead049daa85cac5c629d637e22044/gdb/tid-parse.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6665660a411ead049daa85cac5c629d637e22044/gdb/tid-parse.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tid-parse.h?ref=6665660a411ead049daa85cac5c629d637e22044",
      "patch": "@@ -114,6 +114,9 @@ class tid_range_parser\n      range.  */\n   bool in_star_range () const;\n \n+  /* Returns true if processing a thread range (e.g., 1.2-3).  */\n+  bool in_thread_range () const;\n+\n   /* Returns true if parsing has completed.  */\n   bool finished () const;\n "
    }
  ]
}