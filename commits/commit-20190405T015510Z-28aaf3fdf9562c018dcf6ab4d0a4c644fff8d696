{
  "sha": "28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjhhYWYzZmRmOTU2MmMwMThkY2Y2YWI0ZDBhNGM2NDRmZmY4ZDY5Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-24T17:33:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-05T01:55:10Z"
    },
    "message": "Remove paren_depth global\n\nThis removes the \"paren_depth\" global.  In most cases, it is made into\na static global in a given parser.  I consider this a slight\nimprovement, because it makes it clear that the variable isn't used\nfor communication between different modules of gdb.  The one exception\nis the Rust parser, which already incorporates all local state into a\ntransient object; in this case the parser depth is now a member.\n\ngdb/ChangeLog\n2019-04-04  Tom Tromey  <tom@tromey.com>\n\n\t* rust-exp.y (struct rust_parser) <paren_depth>: New member.\n\t(rustyylex, rust_lex_test_init, rust_lex_test_one)\n\t(rust_lex_test_sequence, rust_lex_test_push_back): Update.\n\t* parser-defs.h (paren_depth): Don't declare.\n\t* parse.c (paren_depth): Remove global.\n\t(parse_exp_in_context): Update.\n\t* p-exp.y (paren_depth): New global.\n\t(pascal_parse): Initialize it.\n\t* m2-exp.y (paren_depth): New global.\n\t(m2_parse): Initialize it.\n\t* go-exp.y (paren_depth): New global.\n\t(go_parse): Initialize it.\n\t* f-exp.y (paren_depth): New global.\n\t(f_parse): Initialize it.\n\t* d-exp.y (paren_depth): New global.\n\t(d_parse): Initialize it.\n\t* c-exp.y (paren_depth): New global.\n\t(c_parse): Initialize it.\n\t* ada-lex.l (paren_depth): New global.\n\t(lexer_init): Initialize it.",
    "tree": {
      "sha": "b4ca770f82e55440997751bd9297de577396e1f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b4ca770f82e55440997751bd9297de577396e1f8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1e58a4a4db997cf09315c22f3da725d1da7f9ee7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e58a4a4db997cf09315c22f3da725d1da7f9ee7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1e58a4a4db997cf09315c22f3da725d1da7f9ee7"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 62,
    "deletions": 14
  },
  "files": [
    {
      "sha": "3e03604528bb6b1d89deb16bbccc71f4841a5e15",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -1,3 +1,26 @@\n+2019-04-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-exp.y (struct rust_parser) <paren_depth>: New member.\n+\t(rustyylex, rust_lex_test_init, rust_lex_test_one)\n+\t(rust_lex_test_sequence, rust_lex_test_push_back): Update.\n+\t* parser-defs.h (paren_depth): Don't declare.\n+\t* parse.c (paren_depth): Remove global.\n+\t(parse_exp_in_context): Update.\n+\t* p-exp.y (paren_depth): New global.\n+\t(pascal_parse): Initialize it.\n+\t* m2-exp.y (paren_depth): New global.\n+\t(m2_parse): Initialize it.\n+\t* go-exp.y (paren_depth): New global.\n+\t(go_parse): Initialize it.\n+\t* f-exp.y (paren_depth): New global.\n+\t(f_parse): Initialize it.\n+\t* d-exp.y (paren_depth): New global.\n+\t(d_parse): Initialize it.\n+\t* c-exp.y (paren_depth): New global.\n+\t(c_parse): Initialize it.\n+\t* ada-lex.l (paren_depth): New global.\n+\t(lexer_init): Initialize it.\n+\n 2019-04-04  Tom Tromey  <tom@tromey.com>\n \n \t* rust-exp.y (rust_parser::crate_name, rust_parser::super_name)"
    },
    {
      "sha": "6163405545d4c4c10d2c92f26bfa3ecd5a7cd2d1",
      "filename": "gdb/ada-lex.l",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/ada-lex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/ada-lex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lex.l?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -84,6 +84,9 @@ static void rewind_to_char (int);\n \n static int find_dot_all (const char *);\n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n %}\n \n %option case-insensitive interactive nodefault\n@@ -305,6 +308,7 @@ static void\n lexer_init (FILE *inp)\n {\n   BEGIN INITIAL;\n+  paren_depth = 0;\n   yyrestart (inp);\n }\n "
    },
    {
      "sha": "cb9e9e002c74c7c749564ac75c0dcf03e0014321",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -2527,6 +2527,9 @@ static int saw_name_at_eof;\n    operator -- either '.' or ARROW.  */\n static bool last_was_structop;\n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n /* Read one token, getting characters through lexptr.  */\n \n static int\n@@ -3315,6 +3318,7 @@ c_parse (struct parser_state *par_state)\n   /* Initialize some state used by the lexer.  */\n   last_was_structop = false;\n   saw_name_at_eof = 0;\n+  paren_depth = 0;\n \n   token_fifo.clear ();\n   popping = 0;"
    },
    {
      "sha": "c15199535214abc79a0e7b7e1d0c34a8abdbcb5c",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -1020,6 +1020,9 @@ static int saw_name_at_eof;\n    This is used only when parsing to do field name completion.  */\n static int last_was_structop;\n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n /* Read one token, getting characters through lexptr.  */\n \n static int\n@@ -1619,6 +1622,7 @@ d_parse (struct parser_state *par_state)\n   /* Initialize some state used by the lexer.  */\n   last_was_structop = 0;\n   saw_name_at_eof = 0;\n+  paren_depth = 0;\n \n   token_fifo.clear ();\n   popping = 0;"
    },
    {
      "sha": "100a3bbec145a84643711ad23ba3ffbdda95490c",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -68,6 +68,9 @@\n \n static struct parser_state *pstate = NULL;\n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n int yyparse (void);\n \n static int yylex (void);\n@@ -1328,6 +1331,7 @@ f_parse (struct parser_state *par_state)\n \t\t\t\t\t\t\tparser_debug);\n   gdb_assert (par_state != NULL);\n   pstate = par_state;\n+  paren_depth = 0;\n \n   return yyparse ();\n }"
    },
    {
      "sha": "aaffe3d45a063a23025339fee12a1111a22cf6ce",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -1001,6 +1001,9 @@ static int saw_name_at_eof;\n    do field name completion.  */\n static int last_was_structop;\n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n /* Read one token, getting characters through lexptr.  */\n \n static int\n@@ -1566,6 +1569,7 @@ go_parse (struct parser_state *par_state)\n   /* Initialize some state used by the lexer.  */\n   last_was_structop = 0;\n   saw_name_at_eof = 0;\n+  paren_depth = 0;\n \n   token_fifo.clear ();\n   popping = 0;"
    },
    {
      "sha": "c0f5e75be2a9f09bd00fda96161272dc5ffbedda",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -763,6 +763,9 @@ static struct keyword keytab[] =\n };\n \n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n /* Read one token, getting characters through lexptr.  */\n \n /* This is where we will check to make sure that the language and the\n@@ -1039,6 +1042,7 @@ m2_parse (struct parser_state *par_state)\n   scoped_restore pstate_restore = make_scoped_restore (&pstate);\n   gdb_assert (par_state != NULL);\n   pstate = par_state;\n+  paren_depth = 0;\n \n   return yyparse ();\n }"
    },
    {
      "sha": "768f302592198a1405c76d468d2065c880067b6c",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -68,6 +68,9 @@\n \n static struct parser_state *pstate = NULL;\n \n+/* Depth of parentheses.  */\n+static int paren_depth;\n+\n int yyparse (void);\n \n static int yylex (void);\n@@ -1723,6 +1726,7 @@ pascal_parse (struct parser_state *par_state)\n   scoped_restore pstate_restore = make_scoped_restore (&pstate);\n   gdb_assert (par_state != NULL);\n   pstate = par_state;\n+  paren_depth = 0;\n \n   return yyparse ();\n }"
    },
    {
      "sha": "4ac79faaeae3e6cf5215bb5071554fbea0b5c3c0",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -71,7 +71,6 @@ int arglist_len;\n static struct type_stack type_stack;\n const char *lexptr;\n const char *prev_lexptr;\n-int paren_depth;\n int comma_terminates;\n \n /* True if parsing an expression to attempt completion.  */\n@@ -1117,7 +1116,6 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n   lexptr = *stringptr;\n   prev_lexptr = NULL;\n \n-  paren_depth = 0;\n   type_stack.elements.clear ();\n   expout_last_struct = -1;\n   expout_tag_completion_type = TYPE_CODE_UNDEF;"
    },
    {
      "sha": "6fb0f8e5533503f292089ee5b080736d2c455d21",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -356,10 +356,6 @@ extern const char *lexptr;\n    Currently used only for error reporting.  */\n extern const char *prev_lexptr;\n \n-/* Current depth in parentheses within the expression.  */\n-\n-extern int paren_depth;\n-\n /* Nonzero means stop parsing on first comma (if not within parentheses).  */\n \n extern int comma_terminates;"
    },
    {
      "sha": "9d3083ead929ff42e3aa2ea427e1a23dab150b72",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=28aaf3fdf9562c018dcf6ab4d0a4c644fff8d696",
      "patch": "@@ -300,6 +300,9 @@ struct rust_parser\n \n   /* The parser state gdb gave us.  */\n   struct parser_state *pstate;\n+\n+  /* Depth of parentheses.  */\n+  int paren_depth = 0;\n };\n \n /* Rust AST operations.  We build a tree of these; then lower them to\n@@ -1664,14 +1667,14 @@ rustyylex (YYSTYPE *lvalp, rust_parser *parser)\n   else if (lexptr[0] == '}' || lexptr[0] == ']')\n     {\n       /* Falls through to lex_operator.  */\n-      --paren_depth;\n+      --parser->paren_depth;\n     }\n   else if (lexptr[0] == '(' || lexptr[0] == '{')\n     {\n       /* Falls through to lex_operator.  */\n-      ++paren_depth;\n+      ++parser->paren_depth;\n     }\n-  else if (lexptr[0] == ',' && comma_terminates && paren_depth == 0)\n+  else if (lexptr[0] == ',' && comma_terminates && parser->paren_depth == 0)\n     return 0;\n \n   return lex_operator (lvalp);\n@@ -2552,11 +2555,11 @@ rustyyerror (rust_parser *parser, const char *msg)\n /* Initialize the lexer for testing.  */\n \n static void\n-rust_lex_test_init (const char *input)\n+rust_lex_test_init (rust_parser *parser, const char *input)\n {\n   prev_lexptr = NULL;\n   lexptr = input;\n-  paren_depth = 0;\n+  parser->paren_depth = 0;\n }\n \n /* A test helper that lexes a string, expecting a single token.  It\n@@ -2568,7 +2571,7 @@ rust_lex_test_one (rust_parser *parser, const char *input, int expected)\n   int token;\n   RUSTSTYPE result;\n \n-  rust_lex_test_init (input);\n+  rust_lex_test_init (parser, input);\n \n   token = rustyylex (&result, parser);\n   SELF_CHECK (token == expected);\n@@ -2632,7 +2635,7 @@ rust_lex_test_sequence (rust_parser *parser, const char *input, int len,\n   int i;\n \n   lexptr = input;\n-  paren_depth = 0;\n+  parser->paren_depth = 0;\n \n   for (i = 0; i < len; ++i)\n     {\n@@ -2686,7 +2689,7 @@ rust_lex_test_push_back (rust_parser *parser)\n   int token;\n   RUSTSTYPE lval;\n \n-  rust_lex_test_init (\">>=\");\n+  rust_lex_test_init (parser, \">>=\");\n \n   token = rustyylex (&lval, parser);\n   SELF_CHECK (token == COMPOUND_ASSIGN);"
    }
  ]
}