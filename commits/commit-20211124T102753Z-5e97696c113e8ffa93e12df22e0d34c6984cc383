{
  "sha": "5e97696c113e8ffa93e12df22e0d34c6984cc383",
  "node_id": "C_kwDOANOeidoAKDVlOTc2OTZjMTEzZThmZmE5M2UxMmRmMjJlMGQzNGM2OTg0Y2MzODM",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-23T04:52:15Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-24T10:27:53Z"
    },
    "message": "gdb: fix crash when reading ECOFF debug information\n\nIn commit:\n\n  commit 633cf2548bcd3dafe297e21a1dd3574240280d48\n  Date:   Wed May 9 15:42:28 2018 -0600\n\n      Remove cleanups from mdebugread.c\n\nthe following change was made in the function parse_partial_symbols in\nmdebugread.c:\n\n  -  fdr_to_pst = XCNEWVEC (struct pst_map, hdr->ifdMax + 1);\n  -  old_chain = make_cleanup (xfree, fdr_to_pst);\n  +  gdb::def_vector<struct pst_map> fdr_to_pst_holder (hdr->ifdMax + 1);\n  +  fdr_to_pst = fdr_to_pst_holder.data ();\n\nThe problem with this change is that XCNEWVEC calls xcalloc, which in\nturn calls calloc, and calloc zero initializes the allocated memory.\nIn contrast, the new line gdb::def_vector<struct pst_map> specifically\ndoes not initialize the underlying memory.\n\nThis is a problem because, later on in this same function, we\nincrement the n_globals field within 'struct pst_map' objects stored\nin the vector.  The incrementing is now being done from an\nuninitialized starting point.\n\nIn this commit we switch from using gdb::def_vector to using\nstd::vector, this alone should be enough to ensure that the fields are\ninitialized to zero.\n\nHowever, for extra clarity, I have also added initial values in the\n'struct pst_map' to make it crystal clear how the struct will start\nup.\n\nThis issue was reported on the mailing list here:\n\n  https://sourceware.org/pipermail/gdb-patches/2021-November/183693.html\n\nCo-Authored-By: Lightning <lightningth@gmail.com>",
    "tree": {
      "sha": "8f94b966e7c448e676848984a8bafc144bed7264",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8f94b966e7c448e676848984a8bafc144bed7264"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e97696c113e8ffa93e12df22e0d34c6984cc383",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e97696c113e8ffa93e12df22e0d34c6984cc383",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e97696c113e8ffa93e12df22e0d34c6984cc383",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e97696c113e8ffa93e12df22e0d34c6984cc383/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "95db489df60d870f5f8f2b32debd6bb0b50c3c5e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95db489df60d870f5f8f2b32debd6bb0b50c3c5e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/95db489df60d870f5f8f2b32debd6bb0b50c3c5e"
    }
  ],
  "stats": {
    "total": 8,
    "additions": 4,
    "deletions": 4
  },
  "files": [
    {
      "sha": "9204d3debe67c9249456d2a6d4fff828ef82b1b7",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e97696c113e8ffa93e12df22e0d34c6984cc383/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e97696c113e8ffa93e12df22e0d34c6984cc383/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=5e97696c113e8ffa93e12df22e0d34c6984cc383",
      "patch": "@@ -386,9 +386,9 @@ mdebug_build_psymtabs (minimal_symbol_reader &reader,\n \n struct pst_map\n {\n-  legacy_psymtab *pst;\t/* the psymtab proper */\n-  long n_globals;\t\t/* exported globals (external symbols) */\n-  long globals_offset;\t\t/* cumulative */\n+  legacy_psymtab *pst = nullptr;  /* the psymtab proper */\n+  long n_globals = 0;\t\t  /* exported globals (external symbols) */\n+  long globals_offset = 0;\t  /* cumulative */\n };\n \n \n@@ -2365,7 +2365,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n   /* Allocate the map FDR -> PST.\n      Minor hack: -O3 images might claim some global data belongs\n      to FDR -1.  We`ll go along with that.  */\n-  gdb::def_vector<struct pst_map> fdr_to_pst_holder (hdr->ifdMax + 1);\n+  std::vector<struct pst_map> fdr_to_pst_holder (hdr->ifdMax + 1);\n   fdr_to_pst = fdr_to_pst_holder.data ();\n   fdr_to_pst++;\n   {"
    }
  ]
}