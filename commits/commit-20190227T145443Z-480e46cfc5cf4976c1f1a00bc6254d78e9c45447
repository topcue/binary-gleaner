{
  "sha": "480e46cfc5cf4976c1f1a00bc6254d78e9c45447",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDgwZTQ2Y2ZjNWNmNDk3NmMxZjFhMDBiYzYyNTRkNzhlOWM0NTQ0Nw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-09-09T15:48:59Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-27T14:54:43Z"
    },
    "message": "gdb/alpha: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id, and\ngdbarch_unwind_pc.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* gdb/alpha-tdep.c (alpha_dummy_id): Delete.\n\t(alpha_unwind_pc): Delete.\n\t(alpha_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "cf4d063548a609cd7a335fcdeb5ff1d174122c20",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf4d063548a609cd7a335fcdeb5ff1d174122c20"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/480e46cfc5cf4976c1f1a00bc6254d78e9c45447",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480e46cfc5cf4976c1f1a00bc6254d78e9c45447",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/480e46cfc5cf4976c1f1a00bc6254d78e9c45447",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480e46cfc5cf4976c1f1a00bc6254d78e9c45447/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a995095f35f024517ddaa07b8a8ad04463e3ce5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a995095f35f024517ddaa07b8a8ad04463e3ce5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a995095f35f024517ddaa07b8a8ad04463e3ce5"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 7,
    "deletions": 29
  },
  "files": [
    {
      "sha": "42742f185a44e70b2cde35a1caa1641f8f414760",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480e46cfc5cf4976c1f1a00bc6254d78e9c45447/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480e46cfc5cf4976c1f1a00bc6254d78e9c45447/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=480e46cfc5cf4976c1f1a00bc6254d78e9c45447",
      "patch": "@@ -1,3 +1,10 @@\n+2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb/alpha-tdep.c (alpha_dummy_id): Delete.\n+\t(alpha_unwind_pc): Delete.\n+\t(alpha_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb/aarch64-tdep.c (aarch64_dummy_id): Delete."
    },
    {
      "sha": "af9b9b974072435df2b2476edfe8ef845e623fb1",
      "filename": "gdb/alpha-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 29,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480e46cfc5cf4976c1f1a00bc6254d78e9c45447/gdb/alpha-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480e46cfc5cf4976c1f1a00bc6254d78e9c45447/gdb/alpha-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alpha-tdep.c?ref=480e46cfc5cf4976c1f1a00bc6254d78e9c45447",
      "patch": "@@ -1463,29 +1463,6 @@ reinit_frame_cache_sfunc (const char *args,\n {\n   reinit_frame_cache ();\n }\n-\n-\f\n-/* Assuming NEXT_FRAME->prev is a dummy, return the frame ID of that\n-   dummy frame.  The frame ID's base needs to match the TOS value\n-   saved by save_dummy_frame_tos(), and the PC match the dummy frame's\n-   breakpoint.  */\n-\n-static struct frame_id\n-alpha_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  ULONGEST base;\n-  base = get_frame_register_unsigned (this_frame, ALPHA_SP_REGNUM);\n-  return frame_id_build (base, get_frame_pc (this_frame));\n-}\n-\n-static CORE_ADDR\n-alpha_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  ULONGEST pc;\n-  pc = frame_unwind_register_unsigned (next_frame, ALPHA_PC_REGNUM);\n-  return pc;\n-}\n-\n \f\n /* Helper routines for alpha*-nat.c files to move register sets to and\n    from core files.  The UNIQUE pointer is allowed to be NULL, as most\n@@ -1807,12 +1784,6 @@ alpha_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   /* Settings for calling functions in the inferior.  */\n   set_gdbarch_push_dummy_call (gdbarch, alpha_push_dummy_call);\n \n-  /* Methods for saving / extracting a dummy frame's ID.  */\n-  set_gdbarch_dummy_id (gdbarch, alpha_dummy_id);\n-\n-  /* Return the unwound PC value.  */\n-  set_gdbarch_unwind_pc (gdbarch, alpha_unwind_pc);\n-\n   set_gdbarch_inner_than (gdbarch, core_addr_lessthan);\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);\n "
    }
  ]
}