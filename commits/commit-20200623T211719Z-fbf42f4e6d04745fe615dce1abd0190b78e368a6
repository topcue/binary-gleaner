{
  "sha": "fbf42f4e6d04745fe615dce1abd0190b78e368a6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJmNDJmNGU2ZDA0NzQ1ZmU2MTVkY2UxYWJkMDE5MGI3OGUzNjhhNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-11T21:36:29Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-23T21:17:19Z"
    },
    "message": "gdb: Print compatible information within print_xml_feature\n\nThe gdbsupport directory contains a helper class print_xml_feature\nthat is shared between gdb and gdbserver.  This class is used for\nprinting an XML representation of a target_desc object.\n\nCurrently this class doesn't have the ability to print the\n<compatible> entities that can appear within a target description, I\nguess no targets have needed that functionality yet.\n\nThe print_xml_feature classes API is based around operating on the\ntarget_desc class, however, the sharing between gdb and gdbserver is\npurely textural, we rely on their being a class called target_desc in\nboth gdb and gdbserver, but there is no shared implementation.  We\nthen have a set of functions declared that operate on an object of\ntype target_desc, and again these functions have completely separate\nimplementations.\n\nCurrently then the gdb version of target_desc contains a vector of\nbfd_arch_info pointers which represents the compatible entries from a\ntarget description.  The gdbserver version of target_desc has no such\ninformation.  Further, the gdbserver code doesn't seem to include the\nbfd headers, and so doesn't know about the bfd types.\n\nI was reluctant to include the bfd headers into gdbserver just so I\ncan reference the compatible information, which isn't (currently) even\nneeded in gdbserver.\n\nSo, the approach I take in this patch is to wrap the compatible\ninformation into a new helper class.  This class is declared in the\ngdbsupport library, but implemented separately in both gdb and\ngdbserver.\n\nIn gdbserver the class is empty.  The compatible information within\nthe gdbserver is an empty list, of empty classes.\n\nIn gdb the class contains a pointer to the bfd_arch_info object.\n\nWith this in place we can now add support to print_xml_feature for\nprinting the compatible information if it is present.  In the\ngdbserver code this will never happen, as the gdbserver never has any\ncompatible information.  But in gdb, this code will trigger when\nappropriate.\n\ngdb/ChangeLog:\n\n\t* target-descriptions.c (class tdesc_compatible_info): New class.\n\t(struct target_desc): Change type of compatible vector.\n\t(tdesc_compatible_p): Update for change in type of\n\ttarget_desc::compatible.\n\t(tdesc_compatible_info_list): New function.\n\t(tdesc_compatible_info_arch_name): New function.\n\t(tdesc_add_compatible): Update for change in type of\n\ttarget_desc::compatible.\n\t(print_c_tdesc::visit_pre): Likewise.\n\ngdbserver/ChangeLog:\n\n\t* tdesc.cc (struct tdesc_compatible_info): New struct.\n\t(tdesc_compatible_info_list): New function.\n\t(tdesc_compatible_info_arch_name): New function.\n\ngdbsupport/ChangeLog:\n\n\t* tdesc.cc (print_xml_feature::visit_pre): Print compatible\n\tinformation.\n\t* tdesc.h (struct tdesc_compatible_info): Declare new struct.\n\t(tdesc_compatible_info_up): New typedef.\n\t(tdesc_compatible_info_list): Declare new function.\n\t(tdesc_compatible_info_arch_name): Declare new function.",
    "tree": {
      "sha": "5a2ea61b2d64947bc402ffa9609995603a46e096",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a2ea61b2d64947bc402ffa9609995603a46e096"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbf42f4e6d04745fe615dce1abd0190b78e368a6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbf42f4e6d04745fe615dce1abd0190b78e368a6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbf42f4e6d04745fe615dce1abd0190b78e368a6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbf42f4e6d04745fe615dce1abd0190b78e368a6/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "20821f4ed1c3b93344a8a40e9344fe356c2605c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/20821f4ed1c3b93344a8a40e9344fe356c2605c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/20821f4ed1c3b93344a8a40e9344fe356c2605c2"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 126,
    "deletions": 10
  },
  "files": [
    {
      "sha": "0784e823e211b76a2f15cad94692cf01cfc2d4db",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -1,3 +1,15 @@\n+2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* target-descriptions.c (class tdesc_compatible_info): New class.\n+\t(struct target_desc): Change type of compatible vector.\n+\t(tdesc_compatible_p): Update for change in type of\n+\ttarget_desc::compatible.\n+\t(tdesc_compatible_info_list): New function.\n+\t(tdesc_compatible_info_arch_name): New function.\n+\t(tdesc_add_compatible): Update for change in type of\n+\ttarget_desc::compatible.\n+\t(print_c_tdesc::visit_pre): Likewise.\n+\n 2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* target-descriptions.c (print_c_tdesc::print_c_tdesc): Change"
    },
    {
      "sha": "1937e7ca4a7cb809059e52e29f0ebf1cc4eb59fb",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 51,
      "deletions": 10,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -308,6 +308,29 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n   return gdb_type.get_type ();\n }\n \n+/* Wrapper around bfd_arch_info_type.  A class with this name is used in\n+   the API that is shared between gdb and gdbserver code, but gdbserver\n+   doesn't use compatibility information, so its version of this class is\n+   empty.  */\n+\n+class tdesc_compatible_info\n+{\n+public:\n+  /* Constructor.  */\n+  explicit tdesc_compatible_info (const bfd_arch_info_type *arch)\n+    : m_arch (arch)\n+  { /* Nothing.  */ }\n+\n+  /* Access the contained pointer.  */\n+  const bfd_arch_info_type *arch () const\n+  { return m_arch; }\n+\n+private:\n+  /* Architecture information looked up from the <compatible> entity within\n+     a target description.  */\n+  const bfd_arch_info_type *m_arch;\n+};\n+\n /* A target description.  */\n \n struct target_desc : tdesc_element\n@@ -328,7 +351,7 @@ struct target_desc : tdesc_element\n   enum gdb_osabi osabi = GDB_OSABI_UNKNOWN;\n \n   /* The list of compatible architectures reported by the target.  */\n-  std::vector<const bfd_arch_info *> compatible;\n+  std::vector<tdesc_compatible_info_up> compatible;\n \n   /* Any architecture-specific properties specified by the target.  */\n   std::vector<property> properties;\n@@ -598,11 +621,11 @@ int\n tdesc_compatible_p (const struct target_desc *target_desc,\n \t\t    const struct bfd_arch_info *arch)\n {\n-  for (const bfd_arch_info *compat : target_desc->compatible)\n+  for (const tdesc_compatible_info_up &compat : target_desc->compatible)\n     {\n-      if (compat == arch\n-\t  || arch->compatible (arch, compat)\n-\t  || compat->compatible (compat, arch))\n+      if (compat->arch () == arch\n+\t  || arch->compatible (arch, compat->arch ())\n+\t  || compat->arch ()->compatible (compat->arch (), arch))\n \treturn 1;\n     }\n \n@@ -642,6 +665,22 @@ tdesc_architecture_name (const struct target_desc *target_desc)\n   return target_desc->arch->printable_name;\n }\n \n+/* See gdbsupport/tdesc.h.  */\n+\n+const std::vector<tdesc_compatible_info_up> &\n+tdesc_compatible_info_list (const target_desc *target_desc)\n+{\n+  return target_desc->compatible;\n+}\n+\n+/* See gdbsupport/tdesc.h.  */\n+\n+const char *\n+tdesc_compatible_info_arch_name (const tdesc_compatible_info_up &compatible)\n+{\n+  return compatible->arch ()->printable_name;\n+}\n+\n /* Return the OSABI associated with this target description, or\n    GDB_OSABI_UNKNOWN if no osabi was specified.  */\n \n@@ -1158,14 +1197,16 @@ tdesc_add_compatible (struct target_desc *target_desc,\n   if (compatible == NULL)\n     return;\n \n-  for (const bfd_arch_info *compat : target_desc->compatible)\n-    if (compat == compatible)\n+  for (const tdesc_compatible_info_up &compat : target_desc->compatible)\n+    if (compat->arch () == compatible)\n       internal_error (__FILE__, __LINE__,\n \t\t      _(\"Attempted to add duplicate \"\n \t\t\t\"compatible architecture \\\"%s\\\"\"),\n \t\t      compatible->printable_name);\n \n-  target_desc->compatible.push_back (compatible);\n+  target_desc->compatible.push_back\n+    (std::unique_ptr<tdesc_compatible_info>\n+     (new tdesc_compatible_info (compatible)));\n }\n \n void\n@@ -1320,10 +1361,10 @@ class print_c_tdesc : public tdesc_element_visitor\n \tprintf_unfiltered (\"\\n\");\n       }\n \n-    for (const bfd_arch_info_type *compatible : e->compatible)\n+    for (const tdesc_compatible_info_up &compatible : e->compatible)\n       printf_unfiltered\n \t(\"  tdesc_add_compatible (result, bfd_scan_arch (\\\"%s\\\"));\\n\",\n-\t compatible->printable_name);\n+\t compatible->arch ()->printable_name);\n \n     if (!e->compatible.empty ())\n       printf_unfiltered (\"\\n\");"
    },
    {
      "sha": "43b8bc895dbd2cc12ff528fcdb3ea8d499d4c328",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* tdesc.cc (struct tdesc_compatible_info): New struct.\n+\t(tdesc_compatible_info_list): New function.\n+\t(tdesc_compatible_info_arch_name): New function.\n+\n 2020-06-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tUse std::list to stop pending signal instead of manually-created"
    },
    {
      "sha": "d21688b932b875a4beda8ea0d6d6aca68f9af2cf",
      "filename": "gdbserver/tdesc.cc",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbserver/tdesc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbserver/tdesc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/tdesc.cc?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -122,6 +122,27 @@ current_target_desc (void)\n   return current_process ()->tdesc;\n }\n \n+/* An empty structure.  */\n+\n+struct tdesc_compatible_info { };\n+\n+/* See gdbsupport/tdesc.h.  */\n+\n+const std::vector<tdesc_compatible_info_up> &\n+tdesc_compatible_info_list (const target_desc *target_desc)\n+{\n+  static std::vector<tdesc_compatible_info_up> empty;\n+  return empty;\n+}\n+\n+/* See gdbsupport/tdesc.h.  */\n+\n+const char *\n+tdesc_compatible_info_arch_name (const tdesc_compatible_info_up &c_info)\n+{\n+  return nullptr;\n+}\n+\n /* See gdbsupport/tdesc.h.  */\n \n const char *"
    },
    {
      "sha": "2e5cbba01c6b3ed3922ea1c03dac25bc8a42d540",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -1,3 +1,12 @@\n+2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* tdesc.cc (print_xml_feature::visit_pre): Print compatible\n+\tinformation.\n+\t* tdesc.h (struct tdesc_compatible_info): Declare new struct.\n+\t(tdesc_compatible_info_up): New typedef.\n+\t(tdesc_compatible_info_list): Declare new function.\n+\t(tdesc_compatible_info_arch_name): Declare new function.\n+\n 2020-05-25  Michael Weghorn  <m.weghorn@posteo.de>\n \n \t* common-utils.cc, common-utils.h (stringify_argv): Drop"
    },
    {
      "sha": "63f41cbf677f201dfd127f8ef3d0c70a90730be2",
      "filename": "gdbsupport/tdesc.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbsupport/tdesc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbsupport/tdesc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/tdesc.cc?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -392,6 +392,12 @@ void print_xml_feature::visit_pre (const target_desc *e)\n   const char *osabi = tdesc_osabi_name (e);\n   if (osabi != nullptr)\n     string_appendf (*m_buffer, \"<osabi>%s</osabi>\", osabi);\n+\n+  const std::vector<tdesc_compatible_info_up> &compatible_list\n+    = tdesc_compatible_info_list (e);\n+  for (const auto &c : compatible_list)\n+    string_appendf (*m_buffer, \"<compatible>%s</compatible>\\n\",\n+\t\t    tdesc_compatible_info_arch_name (c));\n #endif\n }\n "
    },
    {
      "sha": "0cdcf56346c596fa1491cc1b6d5015b6269cc63a",
      "filename": "gdbsupport/tdesc.h",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbsupport/tdesc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf42f4e6d04745fe615dce1abd0190b78e368a6/gdbsupport/tdesc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/tdesc.h?ref=fbf42f4e6d04745fe615dce1abd0190b78e368a6",
      "patch": "@@ -131,6 +131,27 @@ struct tdesc_reg : tdesc_element\n \n typedef std::unique_ptr<tdesc_reg> tdesc_reg_up;\n \n+/* Declaration of a structure that holds information about one\n+   \"compatibility\" entry within a target description.  */\n+\n+struct tdesc_compatible_info;\n+\n+/* A pointer to a single piece of compatibility information.  */\n+\n+typedef std::unique_ptr<tdesc_compatible_info> tdesc_compatible_info_up;\n+\n+/* Return a vector of compatibility information pointers from the target\n+   description TARGET_DESC.  */\n+\n+const std::vector<tdesc_compatible_info_up> &tdesc_compatible_info_list\n+\t(const target_desc *target_desc);\n+\n+/* Return the architecture name from a compatibility information\n+   COMPATIBLE.  */\n+\n+const char *tdesc_compatible_info_arch_name\n+\t(const tdesc_compatible_info_up &compatible);\n+\n enum tdesc_type_kind\n {\n   /* Predefined types.  */"
    }
  ]
}