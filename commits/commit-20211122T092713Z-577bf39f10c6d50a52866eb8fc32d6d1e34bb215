{
  "sha": "577bf39f10c6d50a52866eb8fc32d6d1e34bb215",
  "node_id": "C_kwDOANOeidoAKDU3N2JmMzlmMTBjNmQ1MGE1Mjg2NmViOGZjMzJkNmQxZTM0YmIyMTU",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-11-22T07:31:32Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-11-22T09:27:13Z"
    },
    "message": "RISC-V: PR28610, Fix ASAN heap-buffer-overflow error in riscv_update_subset.\n\nThe architecture parser in riscv_update_subset shouldn't check (or access)\nthe pointer space which doesn't exist.\n\nbfd/\n\tpr 28610\n\t* elfxx-riscv.c (riscv_update_subset): The architecture parser\n\tshouldn't access the pointer space which doesn't exist.",
    "tree": {
      "sha": "e775d36f2573a76d0bb0e0cbbcd909166daec0e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e775d36f2573a76d0bb0e0cbbcd909166daec0e5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/577bf39f10c6d50a52866eb8fc32d6d1e34bb215",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/577bf39f10c6d50a52866eb8fc32d6d1e34bb215",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/577bf39f10c6d50a52866eb8fc32d6d1e34bb215",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/577bf39f10c6d50a52866eb8fc32d6d1e34bb215/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "bab31d145160cd4dec7b9ad0e79346382ebf8385",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bab31d145160cd4dec7b9ad0e79346382ebf8385",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bab31d145160cd4dec7b9ad0e79346382ebf8385"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 12,
    "deletions": 7
  },
  "files": [
    {
      "sha": "73a99b529dcd29a8ec6993a7d8a0fe7579813fae",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/577bf39f10c6d50a52866eb8fc32d6d1e34bb215/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/577bf39f10c6d50a52866eb8fc32d6d1e34bb215/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=577bf39f10c6d50a52866eb8fc32d6d1e34bb215",
      "patch": "@@ -2211,6 +2211,9 @@ riscv_update_subset (riscv_parse_subset_t *rps,\n {\n   const char *p = str;\n \n+  if (p == NULL)\n+    return false;\n+\n   do\n     {\n       int major_version = RISCV_UNKNOWN_VERSION;\n@@ -2236,10 +2239,13 @@ riscv_update_subset (riscv_parse_subset_t *rps,\n       /* Extract the whole prefixed extension by ','.  */\n       while (*q != '\\0' && *q != ',')\n         q++;\n+\n       /* Look forward to the first letter which is not <major>p<minor>.  */\n       bool find_any_version = false;\n       bool find_minor_version = false;\n-      while (1)\n+      size_t len = q - subset;\n+      size_t i;\n+      for (i = len; i > 0; i--)\n         {\n \t  q--;\n \t  if (ISDIGIT (*q))\n@@ -2252,10 +2258,12 @@ riscv_update_subset (riscv_parse_subset_t *rps,\n \t  else\n \t    break;\n \t}\n-      q++;\n+      if (len > 0)\n+\tq++;\n+\n       /* Check if the end of extension is 'p' or not.  If yes, then\n \t the second letter from the end cannot be number.  */\n-      if (*(q - 1) == 'p' && ISDIGIT (*(q - 2)))\n+      if (len > 1 && *(q - 1) == 'p' && ISDIGIT (*(q - 2)))\n \t{\n \t  *q = '\\0';\n \t  rps->error_handler\n@@ -2264,6 +2272,7 @@ riscv_update_subset (riscv_parse_subset_t *rps,\n \t  free (subset);\n \t  return false;\n \t}\n+\n       end_of_version =\n \triscv_parsing_subset_version (q, &major_version, &minor_version);\n       *q = '\\0';\n@@ -2305,10 +2314,6 @@ riscv_update_subset (riscv_parse_subset_t *rps,\n     }\n   while (*p++ == ',');\n \n-  if (*(--p) != '\\0')\n-    rps->error_handler\n-      (_(\"unexpected value in .option arch `%s'\"), str);\n-\n   riscv_parse_add_implicit_subsets (rps);\n   return riscv_parse_check_conflicts (rps);\n }"
    }
  ]
}