{
  "sha": "73d5efd7e13ebd8fe87278224bc2ae777af3de52",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzNkNWVmZDdlMTNlYmQ4ZmU4NzI3ODIyNGJjMmFlNzc3YWYzZGU1Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-20T22:27:00Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-21T10:38:30Z"
    },
    "message": "ARM cmse_scan segfault\n\nThis code in elf_link_add_object_symbols:\n\n      ret = elf_add_dt_needed_tag (abfd, info, soname, add_needed);\n      if (ret < 0)\n\tgoto error_return;\n\n      /* If we have already included this dynamic object in the\n\t link, just ignore it.  There is no reason to include a\n\t particular dynamic object more than once.  */\n      if (ret > 0)\n\treturn TRUE;\n\nprevents a shared library from being loaded twice by ensuring that any\nlibrary soname doesn't match the soname of one already loaded.  This\nhappens before sym_hashes are allocated, which leaves sym_hashes NULL.\n\ncmse_scan looks at library symbols, and when attempting to look up a\nglobal symbol will segfault if sym_hashes is zero.\n\n\t* elf32-arm.c (elf32_arm_size_stubs): Exclude dynamic library\n\tBFDs that have not been loaded.",
    "tree": {
      "sha": "604140a0d4b12517d74f7c9463ff1c34ed1ede52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/604140a0d4b12517d74f7c9463ff1c34ed1ede52"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/73d5efd7e13ebd8fe87278224bc2ae777af3de52",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73d5efd7e13ebd8fe87278224bc2ae777af3de52",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/73d5efd7e13ebd8fe87278224bc2ae777af3de52",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73d5efd7e13ebd8fe87278224bc2ae777af3de52/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "65d1cd5f9cbcbb2df0b187cb7623949c1668728f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/65d1cd5f9cbcbb2df0b187cb7623949c1668728f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/65d1cd5f9cbcbb2df0b187cb7623949c1668728f"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 10,
    "deletions": 2
  },
  "files": [
    {
      "sha": "a1ef734af6a882809113578786e2c2b5827c8c6e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73d5efd7e13ebd8fe87278224bc2ae777af3de52/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73d5efd7e13ebd8fe87278224bc2ae777af3de52/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=73d5efd7e13ebd8fe87278224bc2ae777af3de52",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-21  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf32-arm.c (elf32_arm_size_stubs): Exclude dynamic library\n+\tBFDs that have not been loaded.\n+\n 2019-11-19  Alan Modra  <amodra@gmail.com>\n \n \tPR 25197"
    },
    {
      "sha": "dca208f06aa8112f3b1d33db18acad07173fe044",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73d5efd7e13ebd8fe87278224bc2ae777af3de52/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73d5efd7e13ebd8fe87278224bc2ae777af3de52/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=73d5efd7e13ebd8fe87278224bc2ae777af3de52",
      "patch": "@@ -6527,8 +6527,11 @@ elf32_arm_size_stubs (bfd *output_bfd,\n \t  asection *section;\n \t  Elf_Internal_Sym *local_syms = NULL;\n \n-\t  if (!is_arm_elf (input_bfd)\n-\t      || (elf_dyn_lib_class (input_bfd) & DYN_AS_NEEDED) != 0)\n+\t  if (!is_arm_elf (input_bfd))\n+\t    continue;\n+\t  if ((input_bfd->flags & DYNAMIC) != 0\n+\t      && (elf_sym_hashes (input_bfd) == NULL\n+\t\t  || (elf_dyn_lib_class (input_bfd) & DYN_AS_NEEDED) != 0))\n \t    continue;\n \n \t  num_a8_relocs = 0;"
    }
  ]
}