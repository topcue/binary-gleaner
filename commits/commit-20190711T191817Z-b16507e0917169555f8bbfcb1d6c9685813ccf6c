{
  "sha": "b16507e0917169555f8bbfcb1d6c9685813ccf6c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjE2NTA3ZTA5MTcxNjk1NTVmOGJiZmNiMWQ2Yzk2ODU4MTNjY2Y2Yw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-10T21:52:38Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-11T19:18:17Z"
    },
    "message": "gdb: Make use of gdb::option framework for some info commands\n\nUpdate the 'info variables', 'info functions', 'info locals', and\n'info args' commands to make use of the gdb::options framework.\n\nThere should be no user visible changes after this commit as I have\nleft the help text generation using the existing mechanism, which\nalready tries to customise the text for each of the commands.\n\ngdb/ChangeLog:\n\n\t* cli/cli-utils.c (extract_info_print_args): Delete.\n\t(extract_arg_maybe_quoted): Delete.\n\t(info_print_options_defs): New variable.\n\t(make_info_print_options_def_group): New function.\n\t(extract_info_print_options): Define new function.\n\t* cli/cli-utils.h (extract_info_print_args): Delete.\n\t(struct info_print_options): New structure.\n\t(extract_info_print_options): Declare new function.\n\t* stack.c (info_locals_command): Update to use new\n\textract_info_print_options, also add a header comment.\n\t(info_args_command): Likewise.\n\t* symtab.c (info_variables_command): Likewise.\n\t(info_functions_command): Likewise.",
    "tree": {
      "sha": "192bf877c552f553987b353e04f15dc710962b46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/192bf877c552f553987b353e04f15dc710962b46"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b16507e0917169555f8bbfcb1d6c9685813ccf6c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b16507e0917169555f8bbfcb1d6c9685813ccf6c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b16507e0917169555f8bbfcb1d6c9685813ccf6c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b16507e0917169555f8bbfcb1d6c9685813ccf6c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "021d8588f6ca843a2aada955d00851fbb62f8a62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/021d8588f6ca843a2aada955d00851fbb62f8a62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/021d8588f6ca843a2aada955d00851fbb62f8a62"
    }
  ],
  "stats": {
    "total": 270,
    "additions": 99,
    "deletions": 171
  },
  "files": [
    {
      "sha": "f330fb5f7508e67e52fc835adc71fdc9c9b568b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b16507e0917169555f8bbfcb1d6c9685813ccf6c",
      "patch": "@@ -1,3 +1,19 @@\n+2019-07-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* cli/cli-utils.c (extract_info_print_args): Delete.\n+\t(extract_arg_maybe_quoted): Delete.\n+\t(info_print_options_defs): New variable.\n+\t(make_info_print_options_def_group): New function.\n+\t(extract_info_print_options): Define new function.\n+\t* cli/cli-utils.h (extract_info_print_args): Delete.\n+\t(struct info_print_options): New structure.\n+\t(extract_info_print_options): Declare new function.\n+\t* stack.c (info_locals_command): Update to use new\n+\textract_info_print_options, also add a header comment.\n+\t(info_args_command): Likewise.\n+\t* symtab.c (info_variables_command): Likewise.\n+\t(info_functions_command): Likewise.\n+\n 2019-07-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* cli/cli-option.c (parse_option): Use extract_string_maybe_quoted"
    },
    {
      "sha": "cd3dfe65a2b63b0d4bdf9f8e2fb0d1b91ad64ffe",
      "filename": "gdb/cli/cli-utils.c",
      "status": "modified",
      "additions": 37,
      "deletions": 97,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/cli/cli-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/cli/cli-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.c?ref=b16507e0917169555f8bbfcb1d6c9685813ccf6c",
      "patch": "@@ -23,8 +23,6 @@\n \n #include <ctype.h>\n \n-static std::string extract_arg_maybe_quoted (const char **arg);\n-\n /* See documentation in cli-utils.h.  */\n \n ULONGEST\n@@ -182,38 +180,6 @@ get_number (char **pp)\n \n /* See documentation in cli-utils.h.  */\n \n-bool\n-extract_info_print_args (const char **args,\n-\t\t\t bool *quiet,\n-\t\t\t std::string *regexp,\n-\t\t\t std::string *t_regexp)\n-{\n-  /* Check for NAMEREGEXP or -- NAMEREGEXP.  */\n-  if (**args != '-' || check_for_argument (args, \"--\", 2))\n-    {\n-      *regexp = *args;\n-      *args = NULL;\n-      return true;\n-    }\n-\n-  if (check_for_argument (args, \"-t\", 2))\n-    {\n-      *t_regexp = extract_arg_maybe_quoted (args);\n-      *args = skip_spaces (*args);\n-      return true;\n-    }\n-\n-  if (check_for_argument (args, \"-q\", 2))\n-    {\n-      *quiet = true;\n-      return true;\n-    }\n-\n-  return false;\n-}\n-\n-/* See documentation in cli-utils.h.  */\n-\n void\n report_unrecognized_option_error (const char *command, const char *args)\n {\n@@ -407,69 +373,6 @@ remove_trailing_whitespace (const char *start, const char *s)\n   return s;\n }\n \n-/* A helper function to extract an argument from *ARG.  An argument is\n-   delimited by whitespace, but it can also be optionally quoted.\n-   The quoting and special characters are handled similarly to\n-   the parsing done by gdb_argv.\n-   The return value is empty if no argument was found.  */\n-\n-static std::string\n-extract_arg_maybe_quoted (const char **arg)\n-{\n-  bool squote = false;\n-  bool dquote = false;\n-  bool bsquote = false;\n-  std::string result;\n-  const char *p = *arg;\n-\n-  /* Find the start of the argument.  */\n-  p = skip_spaces (p);\n-\n-  /* Parse p similarly to gdb_argv buildargv function.  */\n-  while (*p != '\\0')\n-    {\n-      if (isspace (*p) && !squote && !dquote && !bsquote)\n-\t  break;\n-      else\n-\t{\n-\t  if (bsquote)\n-\t    {\n-\t      bsquote = false;\n-\t      result += *p;\n-\t    }\n-\t  else if (*p == '\\\\')\n-\t      bsquote = true;\n-\t  else if (squote)\n-\t    {\n-\t      if (*p == '\\'')\n-\t\t  squote = false;\n-\t      else\n-\t\t  result += *p;\n-\t    }\n-\t  else if (dquote)\n-\t    {\n-\t      if (*p == '\"')\n-\t\t  dquote = false;\n-\t      else\n-\t\t  result += *p;\n-\t    }\n-\t  else\n-\t    {\n-\t      if (*p == '\\'')\n-\t\t  squote = true;\n-\t      else if (*p == '\"')\n-\t\t  dquote = true;\n-\t      else\n-\t\t  result += *p;\n-\t    }\n-\t  p++;\n-\t}\n-    }\n-\n-  *arg = p;\n-  return result;\n-}\n-\n /* See documentation in cli-utils.h.  */\n \n std::string\n@@ -532,4 +435,41 @@ validate_flags_qcs (const char *which_command, qcs_flags *flags)\n     error (_(\"%s: -c and -s are mutually exclusive\"), which_command);\n }\n \n+/* The options used by the 'info variables' commands and similar.  */\n+\n+static const gdb::option::option_def info_print_options_defs[] = {\n+  gdb::option::boolean_option_def<info_print_options> {\n+    \"q\",\n+    [] (info_print_options *opt) { return &opt->quiet; },\n+    nullptr, /* show_cmd_cb */\n+    nullptr /* set_doc */\n+  },\n+\n+  gdb::option::string_option_def<info_print_options> {\n+    \"t\",\n+    [] (info_print_options *opt) { return &opt->type_regexp; },\n+    nullptr, /* show_cmd_cb */\n+    nullptr /* set_doc */\n+  }\n+};\n+\n+/* Returns the option group used by 'info variables' and similar.  */\n+\n+static gdb::option::option_def_group\n+make_info_print_options_def_group (info_print_options *opts)\n+{\n+  return {{info_print_options_defs}, opts};\n+}\n+\n /* See documentation in cli-utils.h.  */\n+\n+void\n+extract_info_print_options (info_print_options *opts,\n+\t\t\t    const char **args)\n+{\n+  auto grp = make_info_print_options_def_group (opts);\n+  gdb::option::process_options\n+    (args, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, grp);\n+  if (*args != nullptr && **args == '\\0')\n+    *args = nullptr;\n+}"
    },
    {
      "sha": "a3826be68247a6e517d042b43318bf34062d05be",
      "filename": "gdb/cli/cli-utils.h",
      "status": "modified",
      "additions": 22,
      "deletions": 16,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/cli/cli-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/cli/cli-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.h?ref=b16507e0917169555f8bbfcb1d6c9685813ccf6c",
      "patch": "@@ -43,22 +43,28 @@ extern int get_number (char **);\n    error instead of returning 0.  */\n extern ULONGEST get_ulongest (const char **pp, int trailer = '\\0');\n \n-/* Extract from ARGS the arguments [-q] [-t TYPEREGEXP] [--] NAMEREGEXP.\n-\n-   The caller is responsible to initialize *QUIET to false, *REGEXP\n-   and *T_REGEXP to \"\".\n-   extract_info_print_args can then be called iteratively to search\n-   for valid arguments, as part of a 'main parsing loop' searching for\n-   -q/-t/-- arguments together with other flags and options.\n-\n-   Returns true and updates *ARGS + one of *QUIET, *REGEXP, *T_REGEXP if\n-   it finds a valid argument.\n-   Returns false if no valid argument is found at the beginning of ARGS.  */\n-\n-extern bool extract_info_print_args (const char **args,\n-\t\t\t\t     bool *quiet,\n-\t\t\t\t     std::string *regexp,\n-\t\t\t\t     std::string *t_regexp);\n+/* Structure to hold the values of the options used by the 'info\n+   variables' command and other similar commands.  These correspond to the\n+   -q and -t options.  */\n+\n+struct info_print_options\n+{\n+  int quiet = false;\n+  char *type_regexp = nullptr;\n+\n+  ~info_print_options ()\n+  {\n+    xfree (type_regexp);\n+  }\n+};\n+\n+/* Extract options from ARGS for commands like 'info variables', placing\n+   the options into OPTS.  ARGS is updated to point to the first character\n+   after the options, or, if there is nothing after the options, then ARGS\n+   is set to nullptr.  */\n+\n+extern void extract_info_print_options (info_print_options *opts,\n+\t\t\t\t\tconst char **args);\n \n /* Throws an error telling the user that ARGS starts with an option\n    unrecognized by COMMAND.  */"
    },
    {
      "sha": "175f2116a5bf1a226a2c328f7b50d8846dd484fc",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 10,
      "deletions": 28,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=b16507e0917169555f8bbfcb1d6c9685813ccf6c",
      "patch": "@@ -2359,24 +2359,16 @@ print_frame_local_vars (struct frame_info *frame,\n     }\n }\n \n+/* Implement the 'info locals' command.  */\n+\n void\n info_locals_command (const char *args, int from_tty)\n {\n-  std::string regexp;\n-  std::string t_regexp;\n-  bool quiet = false;\n-\n-  while (args != NULL\n-\t && extract_info_print_args (&args, &quiet, &regexp, &t_regexp))\n-    ;\n-\n-  if (args != NULL)\n-    report_unrecognized_option_error (\"info locals\", args);\n+  info_print_options opts;\n+  extract_info_print_options (&opts, &args);\n \n   print_frame_local_vars (get_selected_frame (_(\"No frame selected.\")),\n-\t\t\t  quiet,\n-\t\t\t  regexp.empty () ? NULL : regexp.c_str (),\n-\t\t\t  t_regexp.empty () ? NULL : t_regexp.c_str (),\n+\t\t\t  opts.quiet, args, opts.type_regexp,\n \t\t\t  0, gdb_stdout);\n }\n \n@@ -2474,26 +2466,16 @@ print_frame_arg_vars (struct frame_info *frame,\n     }\n }\n \n+/* Implement the 'info args' command.  */\n+\n void\n info_args_command (const char *args, int from_tty)\n {\n-  std::string regexp;\n-  std::string t_regexp;\n-  bool quiet = false;\n-\n-  while (args != NULL\n-\t && extract_info_print_args (&args, &quiet, &regexp, &t_regexp))\n-    ;\n-\n-  if (args != NULL)\n-    report_unrecognized_option_error (\"info args\", args);\n-\n+  info_print_options opts;\n+  extract_info_print_options (&opts, &args);\n \n   print_frame_arg_vars (get_selected_frame (_(\"No frame selected.\")),\n-\t\t\tquiet,\n-\t\t\tregexp.empty () ? NULL : regexp.c_str (),\n-\t\t\tt_regexp.empty () ? NULL : t_regexp.c_str (),\n-\t\t\tgdb_stdout);\n+\t\t\topts.quiet, args, opts.type_regexp, gdb_stdout);\n }\n \f\n /* Return the symbol-block in which the selected frame is executing."
    },
    {
      "sha": "466911221870b49d4a958fb4d02544db6079ced8",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 14,
      "deletions": 30,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b16507e0917169555f8bbfcb1d6c9685813ccf6c/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=b16507e0917169555f8bbfcb1d6c9685813ccf6c",
      "patch": "@@ -4687,6 +4687,9 @@ symtab_symbol_info (bool quiet,\n \n   gdb_assert (kind <= TYPES_DOMAIN);\n \n+  if (regexp != nullptr && *regexp == '\\0')\n+    regexp = nullptr;\n+\n   /* Must make sure that if we're interrupted, symbols gets freed.  */\n   std::vector<symbol_search> symbols = search_symbols (regexp, kind,\n \t\t\t\t\t\t       t_regexp, 0, NULL);\n@@ -4742,47 +4745,28 @@ symtab_symbol_info (bool quiet,\n     }\n }\n \n+/* Implement the 'info variables' command.  */\n+\n static void\n info_variables_command (const char *args, int from_tty)\n {\n-  std::string regexp;\n-  std::string t_regexp;\n-  bool quiet = false;\n-\n-  while (args != NULL\n-\t && extract_info_print_args (&args, &quiet, &regexp, &t_regexp))\n-    ;\n+  info_print_options opts;\n+  extract_info_print_options (&opts, &args);\n \n-  if (args != NULL)\n-    report_unrecognized_option_error (\"info variables\", args);\n-\n-  symtab_symbol_info (quiet,\n-\t\t      regexp.empty () ? NULL : regexp.c_str (),\n-\t\t      VARIABLES_DOMAIN,\n-\t\t      t_regexp.empty () ? NULL : t_regexp.c_str (),\n-\t\t      from_tty);\n+  symtab_symbol_info (opts.quiet, args, VARIABLES_DOMAIN,\n+\t\t      opts.type_regexp, from_tty);\n }\n \n+/* Implement the 'info functions' command.  */\n \n static void\n info_functions_command (const char *args, int from_tty)\n {\n-  std::string regexp;\n-  std::string t_regexp;\n-  bool quiet = false;\n-\n-  while (args != NULL\n-\t && extract_info_print_args (&args, &quiet, &regexp, &t_regexp))\n-    ;\n-\n-  if (args != NULL)\n-    report_unrecognized_option_error (\"info functions\", args);\n+  info_print_options opts;\n+  extract_info_print_options (&opts, &args);\n \n-  symtab_symbol_info (quiet,\n-\t\t      regexp.empty () ? NULL : regexp.c_str (),\n-\t\t      FUNCTIONS_DOMAIN,\n-\t\t      t_regexp.empty () ? NULL : t_regexp.c_str (),\n-\t\t      from_tty);\n+  symtab_symbol_info (opts.quiet, args, FUNCTIONS_DOMAIN,\n+\t\t      opts.type_regexp, from_tty);\n }\n \n "
    }
  ]
}