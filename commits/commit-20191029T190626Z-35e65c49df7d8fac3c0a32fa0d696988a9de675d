{
  "sha": "35e65c49df7d8fac3c0a32fa0d696988a9de675d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzVlNjVjNDlkZjdkOGZhYzNjMGEzMmZhMGQ2OTY5ODhhOWRlNjc1ZA==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-21T18:08:03Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-29T19:06:26Z"
    },
    "message": "Replace bsearch with a std::lower_bound-based search\n\nThis is more type-safe and can be faster due to inlining and\navoiding overhead from calling through a function pointer.\n\ngdb/ChangeLog:\n\n2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n\n\t* Makefile.in (HFILES_NO_SRCDIR): Add gdb_binary_search.h.\n\t* dwarf2-frame.c (bsearch_fde_cmp): Update.\n\t(dwarf2_frame_find_fde): Replace bsearch with gdb::binary_search.\n\t* gdbsupport/gdb_binary_search.h: New file.\n\nChange-Id: I07e0a0e333f4062b27fc68d3a3f24881ebc68fd4",
    "tree": {
      "sha": "4cb4567dd102a727ec1d639aba5fcca9c3f42d24",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4cb4567dd102a727ec1d639aba5fcca9c3f42d24"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/35e65c49df7d8fac3c0a32fa0d696988a9de675d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35e65c49df7d8fac3c0a32fa0d696988a9de675d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/35e65c49df7d8fac3c0a32fa0d696988a9de675d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35e65c49df7d8fac3c0a32fa0d696988a9de675d/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ed2a222951020d1117c5e1d4f37e82fd26761267",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2a222951020d1117c5e1d4f37e82fd26761267",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ed2a222951020d1117c5e1d4f37e82fd26761267"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 77,
    "deletions": 14
  },
  "files": [
    {
      "sha": "c96b61a07e41f62e0abfb42fb97d528c0c0bd5d0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=35e65c49df7d8fac3c0a32fa0d696988a9de675d",
      "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* Makefile.in (HFILES_NO_SRCDIR): Add gdb_binary_search.h.\n+\t* dwarf2-frame.c (bsearch_fde_cmp): Update.\n+\t(dwarf2_frame_find_fde): Replace bsearch with gdb::binary_search.\n+\t* gdbsupport/gdb_binary_search.h: New file.\n+\n 2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n \n \t* NEWS: Mention new --with-system-gdbinit-dir option."
    },
    {
      "sha": "4f431c3c8433983d887577ddd838fdd5a0389d04",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=35e65c49df7d8fac3c0a32fa0d696988a9de675d",
      "patch": "@@ -1469,6 +1469,7 @@ HFILES_NO_SRCDIR = \\\n \tgdbsupport/format.h \\\n \tgdbsupport/gdb-dlfcn.h \\\n \tgdbsupport/gdb_assert.h \\\n+\tgdbsupport/gdb_binary_search.h \\\n \tgdbsupport/gdb_tilde_expand.h \\\n \tgdbsupport/gdb_locale.h \\\n \tgdbsupport/gdb_proc_service.h \\"
    },
    {
      "sha": "719e06570d1e5a06798c17a607eaba7f757bc9cc",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 10,
      "deletions": 14,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=35e65c49df7d8fac3c0a32fa0d696988a9de675d",
      "patch": "@@ -39,6 +39,7 @@\n #include \"ax.h\"\n #include \"dwarf2loc.h\"\n #include \"dwarf2-frame-tailcall.h\"\n+#include \"gdbsupport/gdb_binary_search.h\"\n #if GDB_SELF_TEST\n #include \"gdbsupport/selftest.h\"\n #include \"selftest-arch.h\"\n@@ -1652,15 +1653,12 @@ find_cie (const dwarf2_cie_table &cie_table, ULONGEST cie_pointer)\n   return NULL;\n }\n \n-static int\n-bsearch_fde_cmp (const void *key, const void *element)\n+static inline int\n+bsearch_fde_cmp (const dwarf2_fde *fde, CORE_ADDR seek_pc)\n {\n-  CORE_ADDR seek_pc = *(CORE_ADDR *) key;\n-  struct dwarf2_fde *fde = *(struct dwarf2_fde **) element;\n-\n-  if (seek_pc < fde->initial_location)\n+  if (fde->initial_location + fde->address_range <= seek_pc)\n     return -1;\n-  if (seek_pc < fde->initial_location + fde->address_range)\n+  if (fde->initial_location <= seek_pc)\n     return 0;\n   return 1;\n }\n@@ -1674,7 +1672,6 @@ dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct dwarf2_fde_table *fde_table;\n-      struct dwarf2_fde **p_fde;\n       CORE_ADDR offset;\n       CORE_ADDR seek_pc;\n \n@@ -1697,15 +1694,14 @@ dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)\n         continue;\n \n       seek_pc = *pc - offset;\n-      p_fde = ((struct dwarf2_fde **)\n-\t       bsearch (&seek_pc, fde_table->entries, fde_table->num_entries,\n-                        sizeof (fde_table->entries[0]), bsearch_fde_cmp));\n-      if (p_fde != NULL)\n+      auto end = fde_table->entries + fde_table->num_entries;\n+      auto it = gdb::binary_search (fde_table->entries, end, seek_pc, bsearch_fde_cmp);\n+      if (it != end)\n         {\n-          *pc = (*p_fde)->initial_location + offset;\n+          *pc = (*it)->initial_location + offset;\n \t  if (out_offset)\n \t    *out_offset = offset;\n-          return *p_fde;\n+          return *it;\n         }\n     }\n   return NULL;"
    },
    {
      "sha": "0cb429e820585e6029efbc1834c21c590e94731d",
      "filename": "gdb/gdbsupport/gdb_binary_search.h",
      "status": "added",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/gdbsupport/gdb_binary_search.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35e65c49df7d8fac3c0a32fa0d696988a9de675d/gdb/gdbsupport/gdb_binary_search.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/gdb_binary_search.h?ref=35e65c49df7d8fac3c0a32fa0d696988a9de675d",
      "patch": "@@ -0,0 +1,59 @@\n+/* C++ implementation of a binary search.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef GDBSUPPORT_GDB_BINARY_SEARCH_H\n+#define GDBSUPPORT_GDB_BINARY_SEARCH_H\n+\n+#include <algorithm>\n+\n+namespace gdb {\n+\n+/* Implements a binary search using C++ iterators.\n+   This differs from std::binary_search in that it returns an interator for\n+   the found element and in that the type of EL can be different from the\n+   type of the elements in the countainer.\n+\n+   COMP is a C-style comparison function with signature:\n+   int comp(const value_type& a, const T& b);\n+   It should return -1, 0 or 1 if a is less than, equal to, or greater than\n+   b, respectively.\n+   [first, last) must be sorted.\n+\n+   The return value is an iterator pointing to the found element, or LAST if\n+   no element was found.  */\n+template<typename It, typename T, typename Comp>\n+It binary_search (It first, It last, T el, Comp comp)\n+{\n+  auto lt = [&] (const typename std::iterator_traits<It>::value_type &a,\n+\t\t const T &b)\n+    { return comp (a, b) < 0; };\n+\n+  auto lb = std::lower_bound (first, last, el, lt);\n+  if (lb != last)\n+    {\n+      if (comp (*lb, el) == 0)\n+\treturn lb;\n+    }\n+  return last;\n+}\n+\n+} /* namespace gdb */\n+\n+#endif /* GDBSUPPORT_GDB_BINARY_SEARCH_H */"
    }
  ]
}