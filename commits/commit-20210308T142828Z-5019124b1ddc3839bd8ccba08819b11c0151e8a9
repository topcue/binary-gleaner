{
  "sha": "5019124b1ddc3839bd8ccba08819b11c0151e8a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTAxOTEyNGIxZGRjMzgzOWJkOGNjYmEwODgxOWIxMWMwMTUxZThhOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:28Z"
    },
    "message": "Implement the \"&&\" and \"||\" operators\n\nThis implements the \"&&\" and \"||\" operators.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class logical_and_operation)\n\t(class logical_or_operation): New.\n\t* eval.c (logical_and_operation::evaluate)\n\t(logical_or_operation::evaluate): New methods.\n\t* ax-gdb.c (logical_and_operation::do_generate_ax)\n\t(logical_or_operation::do_generate_ax): New methods.",
    "tree": {
      "sha": "e83820e9ee3c77bdff1892dfbc7b2664c26d0df6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e83820e9ee3c77bdff1892dfbc7b2664c26d0df6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5019124b1ddc3839bd8ccba08819b11c0151e8a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5019124b1ddc3839bd8ccba08819b11c0151e8a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5019124b1ddc3839bd8ccba08819b11c0151e8a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5019124b1ddc3839bd8ccba08819b11c0151e8a9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2bc9b40ce16a109a22320589d2cfb9fced5fb769",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bc9b40ce16a109a22320589d2cfb9fced5fb769",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2bc9b40ce16a109a22320589d2cfb9fced5fb769"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 176,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f91477acc113728fcde37fec26ca376ce1d02a6e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5019124b1ddc3839bd8ccba08819b11c0151e8a9",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class logical_and_operation)\n+\t(class logical_or_operation): New.\n+\t* eval.c (logical_and_operation::evaluate)\n+\t(logical_or_operation::evaluate): New methods.\n+\t* ax-gdb.c (logical_and_operation::do_generate_ax)\n+\t(logical_or_operation::do_generate_ax): New methods.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* m2-lang.c (eval_op_m2_high, eval_op_m2_subscript): No longer"
    },
    {
      "sha": "8ec3dd7cc3d5f36d02995c4967c2cab34fe2261a",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=5019124b1ddc3839bd8ccba08819b11c0151e8a9",
      "patch": "@@ -2693,6 +2693,62 @@ var_value_operation::do_generate_ax (struct expression *exp,\n     }\n }\n \n+void\n+logical_and_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t       struct agent_expr *ax,\n+\t\t\t\t       struct axs_value *value,\n+\t\t\t\t       struct type *cast_type)\n+{\n+  struct axs_value value1, value2;\n+  int if1, go1, if2, go2, end;\n+\n+  /* Generate the obvious sequence of tests and jumps.  */\n+  std::get<0> (m_storage)->generate_ax (exp, ax, &value1);\n+  gen_usual_unary (ax, &value1);\n+  if1 = ax_goto (ax, aop_if_goto);\n+  go1 = ax_goto (ax, aop_goto);\n+  ax_label (ax, if1, ax->len);\n+  std::get<1> (m_storage)->generate_ax (exp, ax, &value2);\n+  gen_usual_unary (ax, &value2);\n+  if2 = ax_goto (ax, aop_if_goto);\n+  go2 = ax_goto (ax, aop_goto);\n+  ax_label (ax, if2, ax->len);\n+  ax_const_l (ax, 1);\n+  end = ax_goto (ax, aop_goto);\n+  ax_label (ax, go1, ax->len);\n+  ax_label (ax, go2, ax->len);\n+  ax_const_l (ax, 0);\n+  ax_label (ax, end, ax->len);\n+  value->kind = axs_rvalue;\n+  value->type = builtin_type (ax->gdbarch)->builtin_int;\n+}\n+\n+void\n+logical_or_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t      struct agent_expr *ax,\n+\t\t\t\t      struct axs_value *value,\n+\t\t\t\t      struct type *cast_type)\n+{\n+  struct axs_value value1, value2;\n+  int if1, if2, end;\n+\n+  /* Generate the obvious sequence of tests and jumps.  */\n+  std::get<0> (m_storage)->generate_ax (exp, ax, &value1);\n+  gen_usual_unary (ax, &value1);\n+  if1 = ax_goto (ax, aop_if_goto);\n+  std::get<1> (m_storage)->generate_ax (exp, ax, &value2);\n+  gen_usual_unary (ax, &value2);\n+  if2 = ax_goto (ax, aop_if_goto);\n+  ax_const_l (ax, 0);\n+  end = ax_goto (ax, aop_goto);\n+  ax_label (ax, if1, ax->len);\n+  ax_label (ax, if2, ax->len);\n+  ax_const_l (ax, 1);\n+  ax_label (ax, end, ax->len);\n+  value->kind = axs_rvalue;\n+  value->type = builtin_type (ax->gdbarch)->builtin_int;\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "44384130f6c12eb0e6f28706d47e45389e1140e1",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=5019124b1ddc3839bd8ccba08819b11c0151e8a9",
      "patch": "@@ -2486,6 +2486,69 @@ multi_subscript_operation::evaluate (struct type *expect_type,\n \t\t\t       gdb::make_array_view (argvec, values.size ()));\n }\n \n+value *\n+logical_and_operation::evaluate (struct type *expect_type,\n+\t\t\t\t struct expression *exp,\n+\t\t\t\t enum noside noside)\n+{\n+  value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  value *arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n+\n+  if (binop_user_defined_p (BINOP_LOGICAL_AND, arg1, arg2))\n+    {\n+      arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+      return value_x_binop (arg1, arg2, BINOP_LOGICAL_AND, OP_NULL, noside);\n+    }\n+  else\n+    {\n+      int tem = value_logical_not (arg1);\n+      if (!tem)\n+\t{\n+\t  arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+\t  tem = value_logical_not (arg2);\n+\t}\n+      struct type *type = language_bool_type (exp->language_defn,\n+\t\t\t\t\t      exp->gdbarch);\n+      return value_from_longest (type, !tem);\n+    }\n+}\n+\n+value *\n+logical_or_operation::evaluate (struct type *expect_type,\n+\t\t\t\tstruct expression *exp,\n+\t\t\t\tenum noside noside)\n+{\n+  value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  value *arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n+\n+  if (binop_user_defined_p (BINOP_LOGICAL_OR, arg1, arg2))\n+    {\n+      arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+      return value_x_binop (arg1, arg2, BINOP_LOGICAL_OR, OP_NULL, noside);\n+    }\n+  else\n+    {\n+      int tem = value_logical_not (arg1);\n+      if (tem)\n+\t{\n+\t  arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+\t  tem = value_logical_not (arg2);\n+\t}\n+\n+      struct type *type = language_bool_type (exp->language_defn,\n+\t\t\t\t\t      exp->gdbarch);\n+      return value_from_longest (type, !tem);\n+    }\n+}\n+\n }\n \n struct value *"
    },
    {
      "sha": "7850c457adbae987bf9b70bc09f59ea2358ad76d",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5019124b1ddc3839bd8ccba08819b11c0151e8a9/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=5019124b1ddc3839bd8ccba08819b11c0151e8a9",
      "patch": "@@ -1982,6 +1982,54 @@ class multi_subscript_operation\n   { return MULTI_SUBSCRIPT; }\n };\n \n+/* The \"&&\" operator.  */\n+class logical_and_operation\n+  : public maybe_constant_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return BINOP_LOGICAL_AND; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n+/* The \"||\" operator.  */\n+class logical_or_operation\n+  : public maybe_constant_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return BINOP_LOGICAL_OR; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}