{
  "sha": "9dec38d3b11c779e8f386050ed5046aaa4e759db",
  "node_id": "C_kwDOANOeidoAKDlkZWMzOGQzYjExYzc3OWU4ZjM4NjA1MGVkNTA0NmFhYTRlNzU5ZGI",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-12-07T06:51:25Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-12-07T06:51:25Z"
    },
    "message": "[gdb/symtab] Support -readnow during reread\n\nWhen running test-case gdb.base/cached-source-file.exp with target board\nreadnow, we run into:\n...\nFAIL: gdb.base/cached-source-file.exp: rerun program (the program exited)\n...\n\nThe problem is that when rereading, the readnow is ignored.\n\nFix this by copying the readnow handling code from symbol_file_add_with_addrs\nto reread_symbols.\n\nTested on x86_64-linux.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=26800",
    "tree": {
      "sha": "3be78ae3d32d3c789abb449740182b55293d0295",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3be78ae3d32d3c789abb449740182b55293d0295"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9dec38d3b11c779e8f386050ed5046aaa4e759db",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dec38d3b11c779e8f386050ed5046aaa4e759db",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9dec38d3b11c779e8f386050ed5046aaa4e759db",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dec38d3b11c779e8f386050ed5046aaa4e759db/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "af5300fe24bf2f4e032d639a5396a16c1762b77b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af5300fe24bf2f4e032d639a5396a16c1762b77b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/af5300fe24bf2f4e032d639a5396a16c1762b77b"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 30,
    "deletions": 29
  },
  "files": [
    {
      "sha": "a3752cc92852abf2c5997a47685ba8f8a53b05f1",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -395,7 +395,7 @@ run_command_1 (const char *args, int from_tty, enum run_how run_how)\n      to check again here.  Since reopen_exec_file doesn't do anything\n      if the timestamp hasn't changed, I don't see the harm.  */\n   reopen_exec_file ();\n-  reread_symbols ();\n+  reread_symbols (from_tty);\n \n   gdb::unique_xmalloc_ptr<char> stripped = strip_bg_char (args, &async_exec);\n   args = stripped.get ();\n@@ -2399,7 +2399,7 @@ setup_inferior (int from_tty)\n   else\n     {\n       reopen_exec_file ();\n-      reread_symbols ();\n+      reread_symbols (from_tty);\n     }\n \n   /* Take any necessary post-attaching actions for this platform.  */"
    },
    {
      "sha": "7ed9330ce39f4311e6b72701cf7372b4816e6471",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -5718,7 +5718,7 @@ remote_target::open_1 (const char *name, int from_tty, int extended_p)\n \n   remote_fileio_reset ();\n   reopen_exec_file ();\n-  reread_symbols ();\n+  reread_symbols (from_tty);\n \n   remote_target *remote\n     = (extended_p ? new extended_remote_target () : new remote_target ());"
    },
    {
      "sha": "89469a3d3dcdee05c385794fc3fa7adb7ba64cfa",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -1797,7 +1797,7 @@ load_command (const char *arg, int from_tty)\n   /* The user might be reloading because the binary has changed.  Take\n      this opportunity to check.  */\n   reopen_exec_file ();\n-  reread_symbols ();\n+  reread_symbols (from_tty);\n \n   std::string temp;\n   if (arg == NULL)\n@@ -2411,7 +2411,7 @@ remove_symbol_file_command (const char *args, int from_tty)\n /* Re-read symbols if a symbol-file has changed.  */\n \n void\n-reread_symbols (void)\n+reread_symbols (int from_tty)\n {\n   long new_modtime;\n   struct stat new_statbuf;\n@@ -2588,6 +2588,19 @@ reread_symbols (void)\n \n \t  read_symbols (objfile, 0);\n \n+\t  if ((objfile->flags & OBJF_READNOW))\n+\t    {\n+\t      const int mainline = objfile->flags & OBJF_MAINLINE;\n+\t      const int should_print = (print_symbol_loading_p (from_tty, mainline, 1)\n+\t\t\t\t\t&& readnow_symbol_files);\n+\t      if (should_print)\n+\t\tprintf_filtered (_(\"Expanding full symbols from %ps...\\n\"),\n+\t\t\t\t styled_string (file_name_style.style (),\n+\t\t\t\t\t\tobjfile_name (objfile)));\n+\n+\t      objfile->expand_all_symtabs ();\n+\t    }\n+\n \t  if (!objfile_has_symbols (objfile))\n \t    {\n \t      wrap_here (\"\");"
    },
    {
      "sha": "a9e01cc967c786ad1359f6de7689c4b7e787bb13",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -1847,7 +1847,7 @@ extern struct compunit_symtab *\n \n extern bool find_pc_line_pc_range (CORE_ADDR, CORE_ADDR *, CORE_ADDR *);\n \n-extern void reread_symbols (void);\n+extern void reread_symbols (int from_tty);\n \n /* Look up a type named NAME in STRUCT_DOMAIN in the current language.\n    The type returned must not be opaque -- i.e., must have at least one field"
    },
    {
      "sha": "d08e1ce1555d59016bef78034954f324e1f61462",
      "filename": "gdb/testsuite/gdb.ada/exec_changed.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/testsuite/gdb.ada/exec_changed.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/testsuite/gdb.ada/exec_changed.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/exec_changed.exp?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -51,8 +51,6 @@ gdb_reinitialize_dir $srcdir/$subdir\n gdb_test \"shell mv ${binfile} ${common_binfile}\" \".*\" \"\"\n gdb_load ${common_binfile}\n \n-set readnow_p [readnow ${common_binfile}]\n-\n # Start the program, we should land in the program main procedure\n if { [gdb_start_cmd] < 0 } {\n     untested start\n@@ -78,9 +76,6 @@ gdb_test \"shell touch ${common_binfile}\" \".*\" \"\"\n if { [gdb_start_cmd] < 0 } {\n     fail \"start second\"\n } else {\n-    if { $readnow_p } {\n-\tsetup_kfail \"gdb/26800\" *-*-*\n-    }\n     gdb_test \"\" \\\n              \"second \\\\(\\\\) at .*second.adb.*\" \\\n              \"start second\"\n@@ -108,9 +103,6 @@ if { [gdb_start_cmd] < 0 } {\n     gdb_test_no_output \"set \\$check_gdb_running = 0\" \"check gdb running\"\n     fail \"start just first\"\n } else {\n-    if { $readnow_p } {\n-\tsetup_kfail \"gdb/26800\" *-*-*\n-    }\n     gdb_test \"\" \\\n \t\"first \\\\(\\\\) at .*first.adb.*\" \\\n \t\"start just first\""
    },
    {
      "sha": "3b0166aa18dad0a5f010a5c20c1195dfd77512aa",
      "filename": "gdb/testsuite/gdb.base/cached-source-file.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/testsuite/gdb.base/cached-source-file.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/testsuite/gdb.base/cached-source-file.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/cached-source-file.exp?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -84,13 +84,17 @@ if { [gdb_compile \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\" } {\n # Rerun the program.  This should not only force GDB to reload the\n # source cache, but also to break at BP_LINE again, which now has\n # different contents.\n-gdb_test_multiple \"run\" \"rerun program\" {\n-    -re {The program being debugged has been started already\\.\\r\\nStart it from the beginning\\? \\(y or n\\) $} {\n-\tset binregex [string_to_regexp $binfile]\n-\tgdb_test \"y\" \"\\\\`$binregex\\\\' has changed; re-reading symbols\\.\\r\\nStarting program: ${binregex}.*\" \\\n-\t    \"rerun program\"\n-    }\n-}\n+set q \\\n+    [multi_line \\\n+\t \"The program being debugged has been started already\\\\.\" \\\n+\t \"Start it from the beginning\\\\? \\\\(y or n\\\\) \"]\n+set binregex [string_to_regexp $binfile]\n+set re \\\n+    [multi_line \\\n+\t \"\\\\`$binregex\\\\' has changed; re-reading symbols\\\\.(\" \\\n+\t \"Expanding full symbols from $binfile\\\\.\\\\.\\\\.)?\" \\\n+\t \"Starting program: ${binregex}.*\"]\n+gdb_test \"run\" $re \"rerun program\" $q y\n \n # Again, perform the listing and check that the line indeed has\n # changed for GDB."
    },
    {
      "sha": "3d4b484182d4e5c3e690644ed281263f16957090",
      "filename": "gdb/testsuite/gdb.base/reread.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/testsuite/gdb.base/reread.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dec38d3b11c779e8f386050ed5046aaa4e759db/gdb/testsuite/gdb.base/reread.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/reread.exp?ref=9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "patch": "@@ -60,8 +60,6 @@ foreach_with_prefix opts { \"\" \"pie\" } {\n \tgdb_rename_execfile ${binfile1} ${binfile}\n \tgdb_load ${binfile}\n \n-\tset readnow_p [readnow ${binfile}]\n-\t\n \t# Set a breakpoint at foo\n \n \tgdb_test \"break foo\" \\\n@@ -92,9 +90,6 @@ foreach_with_prefix opts { \"\" \"pie\" } {\n \t    unsupported $test\n \t} else {\n \t    gdb_run_cmd\n-\t    if { $readnow_p } {\n-\t\tsetup_kfail \"gdb/26800\" *-*-*\n-\t    }\n \t    gdb_test \"\" \"Breakpoint.* foo .* at .*:9.*\" $test\n \t}\n \n@@ -131,9 +126,6 @@ foreach_with_prefix opts { \"\" \"pie\" } {\n \t    gdb_rename_execfile ${binfile} ${binfile1}\n \t    gdb_rename_execfile ${binfile2} ${binfile}\n \t    gdb_run_cmd\n-\t    if { $readnow_p } {\n-\t\tsetup_kfail \"gdb/26800\" *-*-*\n-\t    }\n \t    gdb_test \"\" \"Breakpoint.* foo .* at .*:9.*\" \\\n \t\t\"second pass: run to foo() second time\"\n \t}"
    }
  ]
}