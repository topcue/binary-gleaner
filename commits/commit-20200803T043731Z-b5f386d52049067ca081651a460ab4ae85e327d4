{
  "sha": "b5f386d52049067ca081651a460ab4ae85e327d4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjVmMzg2ZDUyMDQ5MDY3Y2EwODE2NTFhNDYwYWI0YWU4NWUzMjdkNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-03T01:31:27Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-03T04:37:31Z"
    },
    "message": "PR26330, Malloc size error in objdump\n\n\tPR 26330\n\t* elf.c (_bfd_elf_get_symtab_upper_bound): Sanity check symbol table\n\tsize against file size.  Correct LONG_MAX limit check.\n\t(_bfd_elf_get_dynamic_symtab_upper_bound): Likewise.\n\t(_bfd_elf_get_reloc_upper_bound): Don't check file size if writing.\n\t(_bfd_elf_get_dynamic_reloc_upper_bound): Likewise.\n\t* elf64-x86-64-.c (elf_x86_64_get_synthetic_symtab): Use\n\tbfd_malloc_and_get_section.",
    "tree": {
      "sha": "c3e7492c0f10b8c152599fe572e40f88933b0dc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c3e7492c0f10b8c152599fe572e40f88933b0dc2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b5f386d52049067ca081651a460ab4ae85e327d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5f386d52049067ca081651a460ab4ae85e327d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b5f386d52049067ca081651a460ab4ae85e327d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5f386d52049067ca081651a460ab4ae85e327d4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ee44c2ac7b3efdfd28c41cd32d7fb935b0582a97",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee44c2ac7b3efdfd28c41cd32d7fb935b0582a97",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ee44c2ac7b3efdfd28c41cd32d7fb935b0582a97"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 42,
    "deletions": 18
  },
  "files": [
    {
      "sha": "25cb69fd13f0478c7b447798bc140e620b6b7430",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5f386d52049067ca081651a460ab4ae85e327d4/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5f386d52049067ca081651a460ab4ae85e327d4/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b5f386d52049067ca081651a460ab4ae85e327d4",
      "patch": "@@ -1,3 +1,14 @@\n+2020-08-03  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26330\n+\t* elf.c (_bfd_elf_get_symtab_upper_bound): Sanity check symbol table\n+\tsize against file size.  Correct LONG_MAX limit check.\n+\t(_bfd_elf_get_dynamic_symtab_upper_bound): Likewise.\n+\t(_bfd_elf_get_reloc_upper_bound): Don't check file size if writing.\n+\t(_bfd_elf_get_dynamic_reloc_upper_bound): Likewise.\n+\t* elf64-x86-64-.c (elf_x86_64_get_synthetic_symtab): Use\n+\tbfd_malloc_and_get_section.\n+\n 2020-07-31  Alan Modra  <amodra@gmail.com>\n \n \tPR 26314"
    },
    {
      "sha": "cc2b46ccc7f1555944ce27fdfa00dc0f6c9252e0",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 30,
      "deletions": 10,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5f386d52049067ca081651a460ab4ae85e327d4/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5f386d52049067ca081651a460ab4ae85e327d4/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=b5f386d52049067ca081651a460ab4ae85e327d4",
      "patch": "@@ -8446,14 +8446,24 @@ _bfd_elf_get_symtab_upper_bound (bfd *abfd)\n   Elf_Internal_Shdr *hdr = &elf_tdata (abfd)->symtab_hdr;\n \n   symcount = hdr->sh_size / get_elf_backend_data (abfd)->s->sizeof_sym;\n-  if (symcount >= LONG_MAX / sizeof (asymbol *))\n+  if (symcount > LONG_MAX / sizeof (asymbol *))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return -1;\n     }\n-  symtab_size = (symcount + 1) * (sizeof (asymbol *));\n-  if (symcount > 0)\n-    symtab_size -= sizeof (asymbol *);\n+  symtab_size = symcount * (sizeof (asymbol *));\n+  if (symcount == 0)\n+    symtab_size = sizeof (asymbol *);\n+  else if (!bfd_write_p (abfd))\n+    {\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+\n+      if (filesize != 0 && (unsigned long) symtab_size > filesize)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return -1;\n+\t}\n+    }\n \n   return symtab_size;\n }\n@@ -8472,22 +8482,32 @@ _bfd_elf_get_dynamic_symtab_upper_bound (bfd *abfd)\n     }\n \n   symcount = hdr->sh_size / get_elf_backend_data (abfd)->s->sizeof_sym;\n-  if (symcount >= LONG_MAX / sizeof (asymbol *))\n+  if (symcount > LONG_MAX / sizeof (asymbol *))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return -1;\n     }\n-  symtab_size = (symcount + 1) * (sizeof (asymbol *));\n-  if (symcount > 0)\n-    symtab_size -= sizeof (asymbol *);\n+  symtab_size = symcount * (sizeof (asymbol *));\n+  if (symcount == 0)\n+    symtab_size = sizeof (asymbol *);\n+  else if (!bfd_write_p (abfd))\n+    {\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+\n+      if (filesize != 0 && (unsigned long) symtab_size > filesize)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return -1;\n+\t}\n+    }\n \n   return symtab_size;\n }\n \n long\n _bfd_elf_get_reloc_upper_bound (bfd *abfd, sec_ptr asect)\n {\n-  if (asect->reloc_count != 0)\n+  if (asect->reloc_count != 0 && !bfd_write_p (abfd))\n     {\n       /* Sanity check reloc section size.  */\n       struct bfd_elf_section_data *d = elf_section_data (asect);\n@@ -8596,7 +8616,7 @@ _bfd_elf_get_dynamic_reloc_upper_bound (bfd *abfd)\n \t    return -1;\n \t  }\n       }\n-  if (count > 1)\n+  if (count > 1 && !bfd_write_p (abfd))\n     {\n       /* Sanity check reloc section sizes.  */\n       ufile_ptr filesize = bfd_get_file_size (abfd);"
    },
    {
      "sha": "549a8be6a6a8df4899b40f3d6fa089073bce3ae0",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5f386d52049067ca081651a460ab4ae85e327d4/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5f386d52049067ca081651a460ab4ae85e327d4/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=b5f386d52049067ca081651a460ab4ae85e327d4",
      "patch": "@@ -4810,15 +4810,8 @@ elf_x86_64_get_synthetic_symtab (bfd *abfd,\n \tcontinue;\n \n       /* Get the PLT section contents.  */\n-      plt_contents = (bfd_byte *) bfd_malloc (plt->size);\n-      if (plt_contents == NULL)\n+      if (!bfd_malloc_and_get_section (abfd, plt, &plt_contents))\n \tbreak;\n-      if (!bfd_get_section_contents (abfd, (asection *) plt,\n-\t\t\t\t     plt_contents, 0, plt->size))\n-\t{\n-\t  free (plt_contents);\n-\t  break;\n-\t}\n \n       /* Check what kind of PLT it is.  */\n       plt_type = plt_unknown;"
    }
  ]
}