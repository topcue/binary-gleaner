{
  "sha": "3f512721a829ce7b2d38236917309a32f42faa99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Y1MTI3MjFhODI5Y2U3YjJkMzgyMzY5MTczMDlhMzJmNDJmYWE5OQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-03-12T18:34:22Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-03-12T18:34:22Z"
    },
    "message": "gdb: use foreach_with_prefix in gdb.base/break-interp.exp\n\nUse foreach_with_prefix, instead of foreach and with_test_prefix\nseparately.  Since allows removing some indentation levels, and formats\nthe test names a bit nicer, in my opinion (or at least, it's more\nconsistent with the rest of the testsuite):\n\n    - PASS: gdb.base/break-interp.exp: LDprelinkNOdebugNO: BINprelinkNOdebugNOpieNO: INNER: core: set verbose on\n    + PASS: gdb.base/break-interp.exp: ldprelink=NO: ldsepdebug=NO: binprelink=NO: binsepdebug=NO: binpie=NO: INNER: set verbose on\n\nNote: this patch is better viewed with \"git show -w\" to ignore\nwhitespace changes.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/break-interp.exp: Use foreach_with_prefix.",
    "tree": {
      "sha": "67c1d38e890bed6712b99ee99416b89b30aa36a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67c1d38e890bed6712b99ee99416b89b30aa36a9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3f512721a829ce7b2d38236917309a32f42faa99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f512721a829ce7b2d38236917309a32f42faa99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3f512721a829ce7b2d38236917309a32f42faa99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f512721a829ce7b2d38236917309a32f42faa99/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40310f30a51c1343b954d1fee7feb9a1d9455e9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40310f30a51c1343b954d1fee7feb9a1d9455e9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40310f30a51c1343b954d1fee7feb9a1d9455e9f"
    }
  ],
  "stats": {
    "total": 274,
    "additions": 137,
    "deletions": 137
  },
  "files": [
    {
      "sha": "e13a230b7047ecc0fd2b0bc965410e7e2462042f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f512721a829ce7b2d38236917309a32f42faa99/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f512721a829ce7b2d38236917309a32f42faa99/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3f512721a829ce7b2d38236917309a32f42faa99",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.base/break-interp.exp: Use foreach_with_prefix.\n+\n 2020-03-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.arch/amd64-disp-step-avx.S: Add nops after _start."
    },
    {
      "sha": "3646a1a413adf8faf659be25c7a5f4385437fbc3",
      "filename": "gdb/testsuite/gdb.base/break-interp.exp",
      "status": "modified",
      "additions": 133,
      "deletions": 137,
      "changes": 270,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f512721a829ce7b2d38236917309a32f42faa99/gdb/testsuite/gdb.base/break-interp.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f512721a829ce7b2d38236917309a32f42faa99/gdb/testsuite/gdb.base/break-interp.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/break-interp.exp?ref=3f512721a829ce7b2d38236917309a32f42faa99",
      "patch": "@@ -538,8 +538,8 @@ proc test_ld {file ifmain trynosym displacement} {\n # Create separate binaries for each testcase - to make the possible reported\n # problem reproducible after the whole test run finishes.\n \n-foreach ldprelink {NO YES} {\n-    foreach ldsepdebug {NO IN SEP} {\n+foreach_with_prefix ldprelink {NO YES} {\n+    foreach_with_prefix ldsepdebug {NO IN SEP} {\n \t# Skip running the ldsepdebug test if we do not have system separate\n \t# debug info available.\n \tif {$interp_system_debug == \"\" && $ldsepdebug == \"SEP\"} {\n@@ -562,164 +562,160 @@ foreach ldprelink {NO YES} {\n \t# possibly unprelinked ld.so to test all the combinations for GDB.\n \tset interp_saved ${interp}-saved\n \n-\twith_test_prefix \"$ldname\" {\n-\t    if {$ldsepdebug == \"NO\"} {\n-\t\tfile_copy $interp_system $interp\n-\t\t# Never call strip-debug before unprelink:\n-\t\t# prelink: ...: Section .note.gnu.build-id created after prelinking\n-\t\tif ![prelinkNO $interp] {\n-\t\t    continue\n-\t\t}\n-\t\tstrip_debug $interp\n-\t    } elseif {$ldsepdebug == \"IN\" && $interp_system_debug == \"\"} {\n-\t\tfile_copy $interp_system $interp\n-\t    } elseif {$ldsepdebug == \"IN\" && $interp_system_debug != \"\"} {\n-\t\tfile_copy $interp_system $interp\n-\t\tfile_copy $interp_system_debug \"${interp}.debug\"\n-\t\t# eu-unstrip: DWARF data in '...' not adjusted for prelinking bias; consider prelink -u\n-\t\tif {![prelinkNO $interp] || ![prelinkNO \"${interp}.debug\"]} {\n-\t\t    continue\n-\t\t}\n-\t\tset test \"eu-unstrip unprelinked:[file tail $interp_system] + [file tail $interp_system_debug] to [file tail $interp]\"\n-\t\tset command \"exec eu-unstrip -o $interp $interp ${interp}.debug\"\n-\t\tverbose -log \"command is $command\"\n-\t\tif [catch $command] {\n-\t\t    setup_xfail *-*-*\n-\t\t    fail $test\n-\t\t    continue\n-\t\t} else {\n-\t\t    pass $test\n-\t\t}\n-\t    } elseif {$ldsepdebug == \"SEP\" && $interp_system_debug == \"\"} {\n-\t\tfile_copy $interp_system $interp\n-\t\t# eu-unstrip: DWARF data in '...' not adjusted for prelinking bias; consider prelink -u\n-\t\tif ![prelinkNO $interp] {\n-\t\t    continue\n-\t\t}\n-\t\tgdb_gnu_strip_debug $interp\n-\t    } elseif {$ldsepdebug == \"SEP\" && $interp_system_debug != \"\"} {\n-\t\tfile_copy $interp_system $interp\n-\t\tfile_copy $interp_system_debug \"${interp}.debug\"\n-\t    }\n-\n-\t    if {$ldsepdebug == \"SEP\"} {\n-\t\tif ![prelinkNO \"${interp}.debug\"] {\n-\t\t    continue\n-\t\t}\n-\t    } else {\n-\t\tfile delete \"${interp}.debug\"\n+\tif {$ldsepdebug == \"NO\"} {\n+\t    file_copy $interp_system $interp\n+\t    # Never call strip-debug before unprelink:\n+\t    # prelink: ...: Section .note.gnu.build-id created after prelinking\n+\t    if ![prelinkNO $interp] {\n+\t\tcontinue\n \t    }\n-\n-\t    if ![prelink$ldprelink $interp \"$interp, second time\"] {\n+\t    strip_debug $interp\n+\t} elseif {$ldsepdebug == \"IN\" && $interp_system_debug == \"\"} {\n+\t    file_copy $interp_system $interp\n+\t} elseif {$ldsepdebug == \"IN\" && $interp_system_debug != \"\"} {\n+\t    file_copy $interp_system $interp\n+\t    file_copy $interp_system_debug \"${interp}.debug\"\n+\t    # eu-unstrip: DWARF data in '...' not adjusted for prelinking bias; consider prelink -u\n+\t    if {![prelinkNO $interp] || ![prelinkNO \"${interp}.debug\"]} {\n \t\tcontinue\n \t    }\n-\n-\t    if {$ldprelink == \"NO\"} {\n-\t\tset displacement \"NONZERO\"\n+\t    set test \"eu-unstrip unprelinked:[file tail $interp_system] + [file tail $interp_system_debug] to [file tail $interp]\"\n+\t    set command \"exec eu-unstrip -o $interp $interp ${interp}.debug\"\n+\t    verbose -log \"command is $command\"\n+\t    if [catch $command] {\n+\t\tsetup_xfail *-*-*\n+\t\tfail $test\n+\t\tcontinue\n \t    } else {\n-\t\t# x86* kernel loads prelinked PIE binary at its\n-\t\t# prelinked address but ppc* kernel loads it at a\n-\t\t# random address.  prelink normally skips PIE binaries\n-\t\t# during the system scan.\n-\t\tset displacement \"PRESENT\"\n+\t\tpass $test\n \t    }\n-\t    test_ld $interp 0 [expr {$ldsepdebug == \"NO\"}] $displacement\n+\t} elseif {$ldsepdebug == \"SEP\" && $interp_system_debug == \"\"} {\n+\t    file_copy $interp_system $interp\n+\t    # eu-unstrip: DWARF data in '...' not adjusted for prelinking bias; consider prelink -u\n+\t    if ![prelinkNO $interp] {\n+\t\tcontinue\n+\t    }\n+\t    gdb_gnu_strip_debug $interp\n+\t} elseif {$ldsepdebug == \"SEP\" && $interp_system_debug != \"\"} {\n+\t    file_copy $interp_system $interp\n+\t    file_copy $interp_system_debug \"${interp}.debug\"\n+\t}\n \n-\t    if ![file_copy $interp $interp_saved] {\n+\tif {$ldsepdebug == \"SEP\"} {\n+\t    if ![prelinkNO \"${interp}.debug\"] {\n \t\tcontinue\n \t    }\n+\t} else {\n+\t    file delete \"${interp}.debug\"\n+\t}\n \n-\t    foreach binprelink {NO YES} {\n-\t\tforeach binsepdebug {NO IN SEP} {\n-\t\t    # \"ATTACH\" is like \"YES\" but it is modified during\n-\t\t    # run.  It cannot be used for problem\n-\t\t    # reproducibility after the testcase ends.\n-\t\t    foreach binpie {NO YES ATTACH} {\n-\t\t\t# This combination is not possible, non-PIE (fixed address)\n-\t\t\t# binary cannot be prelinked to any (other) address.\n-\t\t\tif {$binprelink == \"YES\" && $binpie == \"NO\"} {\n-\t\t\t    continue\n-\t\t\t}\n+\tif ![prelink$ldprelink $interp \"$interp, second time\"] {\n+\t    continue\n+\t}\n \n-\t\t\tset binname \"BINprelink${binprelink}debug${binsepdebug}pie${binpie}\"\n-\t\t\tset exec $binprefix-$binname\n+\tif {$ldprelink == \"NO\"} {\n+\t    set displacement \"NONZERO\"\n+\t} else {\n+\t    # x86* kernel loads prelinked PIE binary at its\n+\t    # prelinked address but ppc* kernel loads it at a\n+\t    # random address.  prelink normally skips PIE binaries\n+\t    # during the system scan.\n+\t    set displacement \"PRESENT\"\n+\t}\n+\ttest_ld $interp 0 [expr {$ldsepdebug == \"NO\"}] $displacement\n \n-\t\t\twith_test_prefix \"$binname\" {\n-\t\t\t    set opts \"ldflags=-Wl,$binfile_lib,-rpath,[file dirname $binfile_lib]\"\n-\t\t\t    if {$binsepdebug != \"NO\"} {\n-\t\t\t\tlappend opts {debug}\n-\t\t\t    }\n-\t\t\t    if {$binpie != \"NO\"} {\n-\t\t\t\tlappend opts {pie}\n-\t\t\t    } else {\n-\t\t\t\t# Debian9/Ubuntu16.10 onwards default to PIE enabled. Ensure it is disabled.\n-\t\t\t\tlappend opts {nopie}\n-\t\t\t    }\n+\tif ![file_copy $interp $interp_saved] {\n+\t    continue\n+\t}\n \n-\t\t\t    set dir ${exec}.d\n-\t\t\t    set relink_args [build_executable_own_libs ${test}.exp [file tail $exec] $srcfile $opts $interp $dir]\n-\t\t\t    if {$relink_args == \"\"} {\n-\t\t\t\tcontinue\n-\t\t\t    }\n+\tforeach_with_prefix binprelink {NO YES} {\n+\t    foreach_with_prefix binsepdebug {NO IN SEP} {\n+\t\t# \"ATTACH\" is like \"YES\" but it is modified during\n+\t\t# run.  It cannot be used for problem\n+\t\t# reproducibility after the testcase ends.\n+\t\tforeach_with_prefix binpie {NO YES ATTACH} {\n+\t\t    # This combination is not possible, non-PIE (fixed address)\n+\t\t    # binary cannot be prelinked to any (other) address.\n+\t\t    if {$binprelink == \"YES\" && $binpie == \"NO\"} {\n+\t\t\tcontinue\n+\t\t    }\n \n-\t\t\t    if {$binsepdebug == \"SEP\"} {\n-\t\t\t\tgdb_gnu_strip_debug $exec\n-\t\t\t    }\n+\t\t    set binname \"BINprelink${binprelink}debug${binsepdebug}pie${binpie}\"\n+\t\t    set exec $binprefix-$binname\n \n-\t\t\t    if {$binpie == \"NO\"} {\n-\t\t\t\tset displacement \"NONE\"\n-\t\t\t    } elseif {$binprelink == \"NO\"} {\n-\t\t\t\tset displacement \"NONZERO\"\n+\t\t    set opts \"ldflags=-Wl,$binfile_lib,-rpath,[file dirname $binfile_lib]\"\n+\t\t    if {$binsepdebug != \"NO\"} {\n+\t\t\tlappend opts {debug}\n+\t\t    }\n+\t\t    if {$binpie != \"NO\"} {\n+\t\t\tlappend opts {pie}\n+\t\t    } else {\n+\t\t\t# Debian9/Ubuntu16.10 onwards default to PIE enabled. Ensure it is disabled.\n+\t\t\tlappend opts {nopie}\n+\t\t    }\n+\n+\t\t    set dir ${exec}.d\n+\t\t    set relink_args [build_executable_own_libs ${test}.exp [file tail $exec] $srcfile $opts $interp $dir]\n+\t\t    if {$relink_args == \"\"} {\n+\t\t\tcontinue\n+\t\t    }\n+\n+\t\t    if {$binsepdebug == \"SEP\"} {\n+\t\t\tgdb_gnu_strip_debug $exec\n+\t\t    }\n+\n+\t\t    if {$binpie == \"NO\"} {\n+\t\t\tset displacement \"NONE\"\n+\t\t    } elseif {$binprelink == \"NO\"} {\n+\t\t\tset displacement \"NONZERO\"\n+\t\t    } else {\n+\t\t\t# x86* kernel loads prelinked PIE binary at its prelinked\n+\t\t\t# address but ppc* kernel loads it at a random address.\n+\t\t\t# prelink normally skips PIE binaries during the system scan.\n+\t\t\tset displacement \"PRESENT\"\n+\t\t    }\n+\n+\t\t    if {[prelink$binprelink $relink_args [file tail $exec]]\n+\t\t\t&& [file_copy $interp_saved $interp]} {\n+\t\t\t# In order to make test names unique wrap the core of this if block\n+\t\t\t# with a test prefix.  Some of the tests performed in the if\n+\t\t\t# condition are repeated within this body.\n+\t\t\twith_test_prefix \"INNER\" {\n+\t\t\t    if {$binpie != \"ATTACH\"} {\n+\t\t\t\ttest_ld $exec 1 [expr {$binsepdebug == \"NO\"}] $displacement\n \t\t\t    } else {\n-\t\t\t\t# x86* kernel loads prelinked PIE binary at its prelinked\n-\t\t\t\t# address but ppc* kernel loads it at a random address.\n-\t\t\t\t# prelink normally skips PIE binaries during the system scan.\n-\t\t\t\tset displacement \"PRESENT\"\n-\t\t\t    }\n+\t\t\t\t# If the file has been randomly prelinked it must be\n+\t\t\t\t# \"NONZERO\".  We could see \"ZERO\" only if it was unprelinked\n+\t\t\t\t# and it is now running at the same address - which is 0 but\n+\t\t\t\t# executable can never run at address 0.\n \n-\t\t\t    if {[prelink$binprelink $relink_args [file tail $exec]]\n-\t\t\t\t&& [file_copy $interp_saved $interp]} {\n-\t\t\t\t# In order to make test names unique wrap the core of this if block\n-\t\t\t\t# with a test prefix.  Some of the tests performed in the if\n-\t\t\t\t# condition are repeated within this body.\n-\t\t\t\twith_test_prefix \"INNER\" {\n-\t\t\t\t    if {$binpie != \"ATTACH\"} {\n-\t\t\t\t\ttest_ld $exec 1 [expr {$binsepdebug == \"NO\"}] $displacement\n-\t\t\t\t    } else {\n-\t\t\t\t\t# If the file has been randomly prelinked it must be\n-\t\t\t\t\t# \"NONZERO\".  We could see \"ZERO\" only if it was unprelinked\n-\t\t\t\t\t# and it is now running at the same address - which is 0 but\n-\t\t\t\t\t# executable can never run at address 0.\n-\n-\t\t\t\t\tset displacement \"NONZERO\"\n-\t\t\t\t\ttest_attach $exec $displacement $relink_args\n-\n-\t\t\t\t\t# ATTACH means that executables and libraries have been\n-\t\t\t\t\t# modified after they have been run.  They cannot be reused\n-\t\t\t\t\t# for problem reproducibility after the testcase ends in\n-\t\t\t\t\t# the ATTACH case.  Therefore they are rather deleted not\n-\t\t\t\t\t# to confuse after the run finishes.\n-\t\t\t\t\tset exec_debug [system_debug_get $exec]\n-\t\t\t\t\tif {$exec_debug != \"\"} {\n-\t\t\t\t\t    # `file delete [glob \"${exec_debug}*\"]' does not work.\n-\t\t\t\t\t    foreach f [glob \"${exec_debug}*\"] {\n-\t\t\t\t\t\tfile delete $f\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\t\t\t\t\tfile delete -force $dir\n-\t\t\t\t\t# `file delete [glob \"${exec}*\"]' does not work.\n-\t\t\t\t\tforeach f [glob \"${exec}*\"] {\n-\t\t\t\t\t    file delete $f\n-\t\t\t\t\t}\n+\t\t\t\tset displacement \"NONZERO\"\n+\t\t\t\ttest_attach $exec $displacement $relink_args\n+\n+\t\t\t\t# ATTACH means that executables and libraries have been\n+\t\t\t\t# modified after they have been run.  They cannot be reused\n+\t\t\t\t# for problem reproducibility after the testcase ends in\n+\t\t\t\t# the ATTACH case.  Therefore they are rather deleted not\n+\t\t\t\t# to confuse after the run finishes.\n+\t\t\t\tset exec_debug [system_debug_get $exec]\n+\t\t\t\tif {$exec_debug != \"\"} {\n+\t\t\t\t    # `file delete [glob \"${exec_debug}*\"]' does not work.\n+\t\t\t\t    foreach f [glob \"${exec_debug}*\"] {\n+\t\t\t\t\tfile delete $f\n \t\t\t\t    }\n \t\t\t\t}\n+\t\t\t\tfile delete -force $dir\n+\t\t\t\t# `file delete [glob \"${exec}*\"]' does not work.\n+\t\t\t\tforeach f [glob \"${exec}*\"] {\n+\t\t\t\t    file delete $f\n+\t\t\t\t}\n \t\t\t    }\n \t\t\t}\n \t\t    }\n \t\t}\n \t    }\n-\n-\t    file delete $interp_saved\n \t}\n+\n+\tfile delete $interp_saved\n     }\n }"
    }
  ]
}