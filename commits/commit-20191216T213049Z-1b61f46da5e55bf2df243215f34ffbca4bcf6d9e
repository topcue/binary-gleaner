{
  "sha": "1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI2MWY0NmRhNWU1NWJmMmRmMjQzMjE1ZjM0ZmZiY2E0YmNmNmQ5ZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-12-16T21:30:49Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-16T21:30:49Z"
    },
    "message": "jit: make gdb_object::symtabs an std::forward_list\n\nReplace the manual linked list with an std::forward_list, simplifying\nthe memory management.  This requires allocating gdb_object with new and\nfree'ing it with delete.\n\ngdb/ChangeLog:\n\n\t* jit.c: Include forward_list.\n\t(struct gdb_symtab) <next>: Remove field.\n\t(struct gdb_object) <symtabs>: Change type to\n\tstd::forward_list<gdb_symtab>.\n\t(jit_object_open_impl): Allocate gdb_object with new.\n\t(jit_symtab_open_impl): Adjust to std::forward_list.\n\t(finalize_symtab): Don't delete symtab.\n\t(jit_object_close_impl):  Adjust to std::forward_list.  Free\n\tgdb_object with delete.",
    "tree": {
      "sha": "26ad937934477fd9ac2429546a1447f2f2509cac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/26ad937934477fd9ac2429546a1447f2f2509cac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "89867184294da399078d77bae3cd4b27ce640f27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89867184294da399078d77bae3cd4b27ce640f27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89867184294da399078d77bae3cd4b27ce640f27"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 28,
    "deletions": 18
  },
  "files": [
    {
      "sha": "b70f3fa04fd926f5b69eaeae318093f74f318632",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
      "patch": "@@ -1,3 +1,15 @@\n+2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.c: Include forward_list.\n+\t(struct gdb_symtab) <next>: Remove field.\n+\t(struct gdb_object) <symtabs>: Change type to\n+\tstd::forward_list<gdb_symtab>.\n+\t(jit_object_open_impl): Allocate gdb_object with new.\n+\t(jit_symtab_open_impl): Adjust to std::forward_list.\n+\t(finalize_symtab): Don't delete symtab.\n+\t(jit_object_close_impl):  Adjust to std::forward_list.  Free\n+\tgdb_object with delete.\n+\n 2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.c (struct gdb_symtab): Add constructor, destructor,"
    },
    {
      "sha": "a731edd870d38049ec13cc8dee115012ea0ce70e",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
      "patch": "@@ -41,6 +41,7 @@\n #include \"gdb_bfd.h\"\n #include \"readline/tilde.h\"\n #include \"completer.h\"\n+#include <forward_list>\n \n static std::string jit_reader_dir;\n \n@@ -481,15 +482,19 @@ struct gdb_symtab\n \n   /* The source file for this symtab.  */\n   std::string file_name;\n-\n-  struct gdb_symtab *next = nullptr;\n };\n \n /* Proxy object for building an object.  */\n \n struct gdb_object\n {\n-  struct gdb_symtab *symtabs;\n+  /* Symtabs of this object.\n+\n+     This is specifically a linked list, instead of, for example, a vector,\n+     because the pointers are returned to the user's debug info reader.  So\n+     it's important that the objects don't change location during their\n+     lifetime (which would happen with a vector of objects getting resized).  */\n+  std::forward_list<gdb_symtab> symtabs;\n };\n \n /* The type of the `private' data passed around by the callback\n@@ -521,7 +526,7 @@ jit_object_open_impl (struct gdb_symbol_callbacks *cb)\n   /* CB is not required right now, but sometime in the future we might\n      need a handle to it, and we'd like to do that without breaking\n      the ABI.  */\n-  return XCNEW (struct gdb_object);\n+  return new gdb_object;\n }\n \n /* Readers call into this function to open a new gdb_symtab, which,\n@@ -534,10 +539,8 @@ jit_symtab_open_impl (struct gdb_symbol_callbacks *cb,\n {\n   /* CB stays unused.  See comment in jit_object_open_impl.  */\n \n-  gdb_symtab *ret = new gdb_symtab (file_name);\n-  ret->next = object->symtabs;\n-  object->symtabs = ret;\n-  return ret;\n+  object->symtabs.emplace_front (file_name);\n+  return &object->symtabs.front ();\n }\n \n /* Returns true if the block corresponding to old should be placed\n@@ -774,8 +777,6 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n \t    BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n \t}\n     }\n-\n-  delete stab;\n }\n \n /* Called when closing a gdb_objfile.  Converts OBJ to a proper\n@@ -785,7 +786,6 @@ static void\n jit_object_close_impl (struct gdb_symbol_callbacks *cb,\n \t\t       struct gdb_object *obj)\n {\n-  struct gdb_symtab *i, *j;\n   struct objfile *objfile;\n   jit_dbg_reader_data *priv_data;\n \n@@ -795,14 +795,12 @@ jit_object_close_impl (struct gdb_symbol_callbacks *cb,\n \t\t\t   OBJF_NOT_FILENAME);\n   objfile->per_bfd->gdbarch = target_gdbarch ();\n \n-  j = NULL;\n-  for (i = obj->symtabs; i; i = j)\n-    {\n-      j = i->next;\n-      finalize_symtab (i, objfile);\n-    }\n+  for (gdb_symtab &symtab : obj->symtabs)\n+    finalize_symtab (&symtab, objfile);\n+\n   add_objfile_entry (objfile, *priv_data);\n-  xfree (obj);\n+\n+  delete obj;\n }\n \n /* Try to read CODE_ENTRY using the loaded jit reader (if any)."
    }
  ]
}