{
  "sha": "200fd2874d2c147539f756b29e15ebbafa81dfcf",
  "node_id": "C_kwDOANOeidoAKDIwMGZkMjg3NGQyYzE0NzUzOWY3NTZiMjllMTVlYmJhZmE4MWRmY2Y",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-12T11:18:58Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-12-13T11:10:29Z"
    },
    "message": "gdb: make post_startup_inferior a virtual method on inf_ptrace_target\n\nWhile working on a later patch that required me to understand how GDB\nstarts up inferiors, I was confused by the\ntarget_ops::post_startup_inferior method.\n\nThe post_startup_inferior target function is only called from\ninf_ptrace_target::create_inferior.\n\nPart of the target class hierarchy looks like this:\n\n  inf_child_target\n     |\n     '-- inf_ptrace_target\n            |\n            |-- linux_nat_target\n            |\n            |-- fbsd_nat_target\n            |\n            |-- nbsd_nat_target\n            |\n            |-- obsd_nat_target\n            |\n            '-- rs6000_nat_target\n\nEvery sub-class of inf_ptrace_target, except rs6000_nat_target,\nimplements ::post_startup_inferior.  The rs6000_nat_target picks up\nthe implementation of ::post_startup_inferior not from\ninf_ptrace_target, but from inf_child_target.\n\nNo descendent of inf_child_target, outside the inf_ptrace_target\nsub-tree, implements ::post_startup_inferior, which isn't really\nsurprising, as they would never see the method called (remember, the\nmethod is only called from inf_ptrace_target::create_inferior).\n\nWhat I find confusing is the role inf_child_target plays in\nimplementing, what is really a helper function for just one of its\ndescendents.\n\nIn this commit I propose that we formally make ::post_startup_inferior\na helper function of inf_ptrace_target.  To do this I will remove the\n::post_startup_inferior from the target_ops API, and instead make this\na protected, pure virtual function on inf_ptrace_target.\n\nI'll remove the empty implementation of ::post_startup_inferior from\nthe inf_child_target class, and add a new empty implementation to the\nrs6000_nat_target class.\n\nAll the other descendents of inf_ptrace_target already provide an\nimplementation of this method and so don't need to change beyond\nmaking the method protected within their class declarations.\n\nTo me, this makes much more sense now.  The helper function, which is\nonly called from within the inf_ptrace_target class, is now a part of\nthe inf_ptrace_target class.\n\nThe only way in which this change is visible to a user is if the user\nturns on 'set debug target 1'.  With this debug flag on, prior to this\npatch the user would see something like:\n\n  -> native->post_startup_inferior (...)\n  <- native->post_startup_inferior (2588939)\n\nAfter this patch these lines are no longer present, as the\npost_startup_inferior is no longer a top level target method.  For me,\nthis is an acceptable change.",
    "tree": {
      "sha": "7c46e2a1119ecd65137d6a85b1c0b8337d8e13e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c46e2a1119ecd65137d6a85b1c0b8337d8e13e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/200fd2874d2c147539f756b29e15ebbafa81dfcf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/200fd2874d2c147539f756b29e15ebbafa81dfcf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/200fd2874d2c147539f756b29e15ebbafa81dfcf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/200fd2874d2c147539f756b29e15ebbafa81dfcf/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "8b8b05a454442ee187bcb279e52701028d98afc6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b8b05a454442ee187bcb279e52701028d98afc6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8b8b05a454442ee187bcb279e52701028d98afc6"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 44,
    "deletions": 67
  },
  "files": [
    {
      "sha": "0ca386331e51baaae194678ce083e500beca1916",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -694,7 +694,7 @@ ps_get_thread_area (struct ps_prochandle *ph,\n }\n \f\n \n-/* Implement the \"post_startup_inferior\" target_ops method.  */\n+/* Implement the virtual inf_ptrace_target::post_startup_inferior method.  */\n \n void\n aarch64_linux_nat_target::post_startup_inferior (ptid_t ptid)"
    },
    {
      "sha": "e84dafdad9dc34a85cad2ee319b4c90b9ba251e4",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -1548,7 +1548,7 @@ fbsd_nat_target::remove_vfork_catchpoint (int pid)\n }\n #endif\n \n-/* Implement the \"post_startup_inferior\" target_ops method.  */\n+/* Implement the virtual inf_ptrace_target::post_startup_inferior method.  */\n \n void\n fbsd_nat_target::post_startup_inferior (ptid_t pid)"
    },
    {
      "sha": "863c0a4e190397346f9d912b80c68f85e7838f1e",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -76,7 +76,6 @@ class fbsd_nat_target : public inf_ptrace_target\n \n   ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n-  void post_startup_inferior (ptid_t) override;\n   void post_attach (int) override;\n \n #ifdef USE_SIGTRAP_SIGINFO\n@@ -106,6 +105,10 @@ class fbsd_nat_target : public inf_ptrace_target\n \n   bool supports_disable_randomization () override;\n \n+protected:\n+\n+  void post_startup_inferior (ptid_t) override;\n+\n private:\n   /* Helper routines for use in fetch_registers and store_registers in\n      subclasses.  These routines fetch and store a single set of"
    },
    {
      "sha": "949f530e1288a2a4c1f48b1ae9a99d9a7049a7fb",
      "filename": "gdb/inf-child.c",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-child.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-child.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-child.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -202,13 +202,6 @@ inf_child_target::maybe_unpush_target ()\n     current_inferior ()->unpush_target (this);\n }\n \n-void\n-inf_child_target::post_startup_inferior (ptid_t ptid)\n-{\n-  /* This target doesn't require a meaningful \"post startup inferior\"\n-     operation by a debugger.  */\n-}\n-\n bool\n inf_child_target::can_run ()\n {"
    },
    {
      "sha": "ce8feaf05bd21d0497e53f9c5cf69b015a3770d3",
      "filename": "gdb/inf-child.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-child.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-child.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-child.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -55,8 +55,6 @@ class inf_child_target\n   void interrupt () override;\n   void pass_ctrlc () override;\n \n-  void post_startup_inferior (ptid_t) override;\n-\n   void follow_exec (inferior *follow_inf, ptid_t ptid,\n \t\t    const char *execd_pathname) override;\n "
    },
    {
      "sha": "bbf38c0aeacf169ea69eaccf0149f4925eb46fba",
      "filename": "gdb/inf-ptrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -103,7 +103,7 @@ inf_ptrace_target::create_inferior (const char *exec_file,\n \n   /* On some targets, there must be some explicit actions taken after\n      the inferior has been started up.  */\n-  target_post_startup_inferior (ptid);\n+  post_startup_inferior (ptid);\n }\n \n /* Clean up a rotting corpse of an inferior after it died.  */"
    },
    {
      "sha": "a4ad0969075efe02d41ab9bfc0d24fb4f5617c09",
      "filename": "gdb/inf-ptrace.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-ptrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/inf-ptrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -60,6 +60,17 @@ struct inf_ptrace_target : public inf_child_target\n protected:\n   /* Cleanup the inferior after a successful ptrace detach.  */\n   void detach_success (inferior *inf);\n+\n+  /* Some targets don't allow us to request notification of inferior events\n+     such as fork and vfork immediately after the inferior is created.\n+     (This is because of how gdb creates inferiors via invoking a shell to\n+     do it.  In such a scenario, if the shell init file has commands in it,\n+     the shell will fork and exec for each of those commands, and we will\n+     see each such fork event.  Very bad.)\n+\n+     Such targets will supply an appropriate definition for this\n+     function.  */\n+  virtual void post_startup_inferior (ptid_t ptid) = 0;\n };\n \n #ifndef __NetBSD__"
    },
    {
      "sha": "20aa4a1322d0c467cc8d54c56935d730aa0449c1",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -411,6 +411,8 @@ linux_nat_target::post_attach (int pid)\n   linux_init_ptrace_procfs (pid, 1);\n }\n \n+/* Implement the virtual inf_ptrace_target::post_startup_inferior method.  */\n+\n void\n linux_nat_target::post_startup_inferior (ptid_t ptid)\n {"
    },
    {
      "sha": "116eb7ed51b377ecefa7850773d52d820417db31",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -129,8 +129,6 @@ class linux_nat_target : public inf_ptrace_target\n \n   char *pid_to_exec_file (int pid) override;\n \n-  void post_startup_inferior (ptid_t) override;\n-\n   void post_attach (int) override;\n \n   void follow_fork (inferior *, ptid_t, target_waitkind, bool, bool) override;\n@@ -189,6 +187,10 @@ class linux_nat_target : public inf_ptrace_target\n   /* SIGTRAP-like breakpoint status events recognizer.  The default\n      recognizes SIGTRAP only.  */\n   virtual bool low_status_is_event (int status);\n+\n+protected:\n+\n+    void post_startup_inferior (ptid_t) override;\n };\n \n /* The final/concrete instance.  */"
    },
    {
      "sha": "1eb2c769411eeb54761e4d401d91fb6ff84dd378",
      "filename": "gdb/netbsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/netbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/netbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/netbsd-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -132,7 +132,7 @@ nbsd_add_threads (nbsd_nat_target *target, pid_t pid)\n   netbsd_nat::for_each_thread (pid, fn);\n }\n \n-/* Implement the \"post_startup_inferior\" target_ops method.  */\n+/* Implement the virtual inf_ptrace_target::post_startup_inferior method.  */\n \n void\n nbsd_nat_target::post_startup_inferior (ptid_t ptid)"
    },
    {
      "sha": "ad83f2036d4cf7366a633d0603d5ce7e77401a40",
      "filename": "gdb/netbsd-nat.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/netbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/netbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/netbsd-nat.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -32,7 +32,6 @@ struct nbsd_nat_target : public inf_ptrace_target\n \n   bool thread_alive (ptid_t ptid) override;\n   const char *thread_name (struct thread_info *thr) override;\n-  void post_startup_inferior (ptid_t ptid) override;\n   void post_attach (int pid) override;\n   void update_thread_list () override;\n   std::string pid_to_str (ptid_t ptid) override;\n@@ -57,6 +56,9 @@ struct nbsd_nat_target : public inf_ptrace_target\n \t\t\t\t\tULONGEST *xfered_len) override;\n   bool supports_dumpcore () override;\n   void dumpcore (const char *filename) override;\n+\n+protected:\n+  void post_startup_inferior (ptid_t ptid) override;\n };\n \n #endif /* netbsd-nat.h */"
    },
    {
      "sha": "2340dfed1c3677b015ba6af9c2ed967ec76c0f1f",
      "filename": "gdb/obsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -145,6 +145,8 @@ obsd_nat_target::post_attach (int pid)\n   obsd_enable_proc_events (pid);\n }\n \n+/* Implement the virtual inf_ptrace_target::post_startup_inferior method.  */\n+\n void\n obsd_nat_target::post_startup_inferior (ptid_t pid)\n {"
    },
    {
      "sha": "5ebbf61db406220637288c731dc7949e9cea7840",
      "filename": "gdb/obsd-nat.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/obsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/obsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -35,9 +35,10 @@ class obsd_nat_target : public inf_ptrace_target\n \n   int remove_fork_catchpoint (int) override;\n \n-  void post_startup_inferior (ptid_t) override;\n-\n   void post_attach (int) override;\n+\n+protected:\n+  void post_startup_inferior (ptid_t) override;\n };\n \n #endif /* obsd-nat.h */"
    },
    {
      "sha": "682e4e9e75f349de15d50135aa89312acad63621",
      "filename": "gdb/rs6000-aix-nat.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/rs6000-aix-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/rs6000-aix-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-aix-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -91,6 +91,11 @@ class rs6000_nat_target final : public inf_ptrace_target\n \n   ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n+protected:\n+\n+  void post_startup_inferior (ptid_t ptid) override\n+  { /* Nothing.  */ }\n+\n private:\n   enum target_xfer_status\n     xfer_shared_libraries (enum target_object object,"
    },
    {
      "sha": "9636e3212bc8aa4aab1fc12d14cdf8b9ebc1c3ea",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -51,7 +51,6 @@ struct dummy_target : public target_ops\n   void terminal_info (const char *arg0, int arg1) override;\n   void kill () override;\n   void load (const char *arg0, int arg1) override;\n-  void post_startup_inferior (ptid_t arg0) override;\n   int insert_fork_catchpoint (int arg0) override;\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n@@ -226,7 +225,6 @@ struct debug_target : public target_ops\n   void terminal_info (const char *arg0, int arg1) override;\n   void kill () override;\n   void load (const char *arg0, int arg1) override;\n-  void post_startup_inferior (ptid_t arg0) override;\n   int insert_fork_catchpoint (int arg0) override;\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n@@ -1393,27 +1391,6 @@ debug_target::load (const char *arg0, int arg1)\n   fputs_unfiltered (\")\\n\", gdb_stdlog);\n }\n \n-void\n-target_ops::post_startup_inferior (ptid_t arg0)\n-{\n-  this->beneath ()->post_startup_inferior (arg0);\n-}\n-\n-void\n-dummy_target::post_startup_inferior (ptid_t arg0)\n-{\n-}\n-\n-void\n-debug_target::post_startup_inferior (ptid_t arg0)\n-{\n-  fprintf_unfiltered (gdb_stdlog, \"-> %s->post_startup_inferior (...)\\n\", this->beneath ()->shortname ());\n-  this->beneath ()->post_startup_inferior (arg0);\n-  fprintf_unfiltered (gdb_stdlog, \"<- %s->post_startup_inferior (\", this->beneath ()->shortname ());\n-  target_debug_print_ptid_t (arg0);\n-  fputs_unfiltered (\")\\n\", gdb_stdlog);\n-}\n-\n int\n target_ops::insert_fork_catchpoint (int arg0)\n {"
    },
    {
      "sha": "65d2a1ca514d96f7c82969447820a4b5f8fde0f1",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -302,14 +302,6 @@ target_files_info ()\n \n /* See target.h.  */\n \n-void\n-target_post_startup_inferior (ptid_t ptid)\n-{\n-  return current_inferior ()->top_target ()->post_startup_inferior (ptid);\n-}\n-\n-/* See target.h.  */\n-\n int\n target_insert_fork_catchpoint (int pid)\n {"
    },
    {
      "sha": "4736d32e78c57b2998c4c383d4aaa0e895979832",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -626,8 +626,6 @@ struct target_ops\n     virtual bool can_create_inferior ();\n     virtual void create_inferior (const char *, const std::string &,\n \t\t\t\t  char **, int);\n-    virtual void post_startup_inferior (ptid_t)\n-      TARGET_DEFAULT_IGNORE ();\n     virtual int insert_fork_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n     virtual int remove_fork_catchpoint (int)\n@@ -1688,18 +1686,6 @@ extern void target_kill (void);\n \n extern void target_load (const char *arg, int from_tty);\n \n-/* Some targets (such as ttrace-based HPUX) don't allow us to request\n-   notification of inferior events such as fork and vork immediately\n-   after the inferior is created.  (This because of how gdb gets an\n-   inferior created via invoking a shell to do it.  In such a scenario,\n-   if the shell init file has commands in it, the shell will fork and\n-   exec for each of those commands, and we will see each such fork\n-   event.  Very bad.)\n-\n-   Such targets will supply an appropriate definition for this function.  */\n-\n-extern void target_post_startup_inferior (ptid_t ptid);\n-\n /* On some targets, we can catch an inferior fork or vfork event when\n    it occurs.  These functions insert/remove an already-created\n    catchpoint for such events.  They return  0 for success, 1 if the"
    },
    {
      "sha": "71769085493b2cbede9f6ffaee1dc083947ef032",
      "filename": "gdb/x86-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/x86-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/x86-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.c?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -81,6 +81,8 @@ x86_linux_nat_target::~x86_linux_nat_target ()\n {\n }\n \n+/* Implement the virtual inf_ptrace_target::post_startup_inferior method.  */\n+\n void\n x86_linux_nat_target::post_startup_inferior (ptid_t ptid)\n {"
    },
    {
      "sha": "e1f232adae82db32f959c61ce352760f2c975f8b",
      "filename": "gdb/x86-linux-nat.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/x86-linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/200fd2874d2c147539f756b29e15ebbafa81dfcf/gdb/x86-linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.h?ref=200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "patch": "@@ -29,9 +29,6 @@ struct x86_linux_nat_target : public x86_nat_target<linux_nat_target>\n {\n   virtual ~x86_linux_nat_target () override = 0;\n \n-  /* Override the GNU/Linux inferior startup hook.  */\n-  void post_startup_inferior (ptid_t) override;\n-\n   /* Add the description reader.  */\n   const struct target_desc *read_description () override;\n \n@@ -73,6 +70,10 @@ struct x86_linux_nat_target : public x86_nat_target<linux_nat_target>\n \n   void low_delete_thread (struct arch_lwp_info *lwp) override\n   { x86_linux_delete_thread (lwp); }\n+\n+protected:\n+  /* Override the GNU/Linux inferior startup hook.  */\n+  void post_startup_inferior (ptid_t) override;\n };\n \n \f"
    }
  ]
}