{
  "sha": "cced7cacecad104fff03e94814a3fca1d304b16f",
  "node_id": "C_kwDOANOeidoAKGNjZWQ3Y2FjZWNhZDEwNGZmZjAzZTk0ODE0YTNmY2ExZDMwNGIxNmY",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-01-12T17:13:38Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-01-18T11:45:52Z"
    },
    "message": "gdb: preserve `|` in connection details string\n\nConsider this GDB session:\n\n  $ gdb -q\n  (gdb) target remote  | gdbserver - ~/tmp/hello.x\n  Remote debugging using | gdbserver - ~/tmp/hello.x\n  ... snip ...\n  (gdb) info connections\n    Num  What                              Description\n  * 1    remote gdbserver - ~/tmp/hello.x  Remote target using gdb-specific protocol\n  (gdb) python conn = gdb.selected_inferior().connection\n  (gdb) python print(conn.details)\n  gdbserver - ~/tmp/hello.x\n  (gdb)\n\nI think there are two things wrong here, first in the \"What\" column of\nthe 'info connections' output, I think the text should be:\n\n  remote | gdbserver - ~/tmp/hello.x\n\nto correctly show the user how the connection was established.  And in\na similar fashion, I think that the `details` string of the\ngdb.TargetConnection object should be:\n\n  | gdbserver - ~/tmp/hello.x\n\nThis commit makes this change.  Currently the '|' is detected and\nremoved in gdb/serial.c.  The string passed to the pipe_ops\nstructure (from gdb/ser-pipe.c), doesn't then, contain the `|`, this\nis instead implied by the fact that it is a pipes based implementation\nof the serial_ops interface.\n\nAfter this commit we still detect the `|` in gdb/serial.c, but we now\nstore the full string (including the `|`) in the serial::name member\nvariable.\n\nFor pipe based serial connections, this name is only used for\ndisplaying the two fields I mention above, and in pipe_open (from\ngdb/ser-pipe.c), and in pipe_open, we now know to skip over the `|`.\n\nThe benefit I see from this change is that GDB's output now more\naccurately reflects the commands used to start a target, thus making\nit easier for a user to understand what is going on.",
    "tree": {
      "sha": "667876bd755eafb951b092ee25d4a79bda8793f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/667876bd755eafb951b092ee25d4a79bda8793f5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cced7cacecad104fff03e94814a3fca1d304b16f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cced7cacecad104fff03e94814a3fca1d304b16f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cced7cacecad104fff03e94814a3fca1d304b16f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cced7cacecad104fff03e94814a3fca1d304b16f/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "709a3d07f330cc75031529f8952ceb19d7095df3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/709a3d07f330cc75031529f8952ceb19d7095df3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/709a3d07f330cc75031529f8952ceb19d7095df3"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 87,
    "deletions": 6
  },
  "files": [
    {
      "sha": "80bb73e041826b6723de448db140139f05813e7a",
      "filename": "gdb/ser-pipe.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cced7cacecad104fff03e94814a3fca1d304b16f/gdb/ser-pipe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cced7cacecad104fff03e94814a3fca1d304b16f/gdb/ser-pipe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-pipe.c?ref=cced7cacecad104fff03e94814a3fca1d304b16f",
      "patch": "@@ -62,6 +62,12 @@ pipe_open (struct serial *scb, const char *name)\n   int err_pdes[2];\n   int pid;\n \n+  if (*name == '|')\n+    {\n+      name++;\n+      name = skip_spaces (name);\n+    }\n+\n   if (gdb_socketpair_cloexec (AF_UNIX, SOCK_STREAM, 0, pdes) < 0)\n     return -1;\n   if (gdb_socketpair_cloexec (AF_UNIX, SOCK_STREAM, 0, err_pdes) < 0)"
    },
    {
      "sha": "41ba753a4b81e4ad096aad394cccc2a717347f35",
      "filename": "gdb/serial.c",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cced7cacecad104fff03e94814a3fca1d304b16f/gdb/serial.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cced7cacecad104fff03e94814a3fca1d304b16f/gdb/serial.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/serial.c?ref=cced7cacecad104fff03e94814a3fca1d304b16f",
      "patch": "@@ -201,12 +201,7 @@ serial_open (const char *name)\n   const char *open_name = name;\n \n   if (startswith (name, \"|\"))\n-    {\n-      ops = serial_interface_lookup (\"pipe\");\n-      /* Discard ``|'' and any space before the command itself.  */\n-      ++open_name;\n-      open_name = skip_spaces (open_name);\n-    }\n+    ops = serial_interface_lookup (\"pipe\");\n   /* Check for a colon, suggesting an IP address/port pair.\n      Do this *after* checking for all the interesting prefixes.  We\n      don't want to constrain the syntax of what can follow them.  */"
    },
    {
      "sha": "ca2164b03e520752c1acb113905395f84734a99c",
      "filename": "gdb/testsuite/gdb.server/server-pipe.exp",
      "status": "added",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cced7cacecad104fff03e94814a3fca1d304b16f/gdb/testsuite/gdb.server/server-pipe.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cced7cacecad104fff03e94814a3fca1d304b16f/gdb/testsuite/gdb.server/server-pipe.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/server-pipe.exp?ref=cced7cacecad104fff03e94814a3fca1d304b16f",
      "patch": "@@ -0,0 +1,80 @@\n+# This testcase is part of GDB, the GNU debugger.\n+\n+# Copyright 2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test starting gdbserver using the 'target remove | ....' syntax.\n+# The extended-remote target type is tested too.  The test checks that\n+# the `|` character can be seen in the 'info connections' output, and\n+# (when Python is available) in the gdb.TargetConnection.details\n+# string.\n+\n+# This test relies on starting gdbserver using the pipe syntax.  Not\n+# sure how well this will run if part of this test is being run\n+# elsewhere.\n+if { [is_remote target] || [is_remote host] } {\n+    return 0\n+}\n+\n+load_lib gdbserver-support.exp\n+\n+standard_testfile\n+\n+if { [skip_gdbserver_tests] } {\n+    return 0\n+}\n+\n+set gdbserver [find_gdbserver]\n+if { $gdbserver == \"\" } {\n+    unsupported \"could not find gdbserver\"\n+    return\n+}\n+\n+standard_testfile normal.c\n+set executable ${testfile}\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+# Start GDB using remote type TARGET, which should be either \"remote\"\n+# or \"extended-remote\".  Check the output of 'info connections', and\n+# the contents of the gdb.TargetConnection.details string.\n+proc do_test { target } {\n+    clean_restart ${::binfile}\n+\n+    # Make sure we're disconnected, in case we're testing with an\n+    # extended-remote board, therefore already connected.\n+    gdb_test \"disconnect\" \".*\"\n+\n+    gdb_test \"target ${target} | ${::gdbserver} - ${::binfile}\" \".*\" \\\n+\t\"start gdbserver using pipe syntax\"\n+\n+    gdb_breakpoint main\n+    gdb_continue_to_breakpoint main\n+    gdb_test \"info frame\" \".* in main .*\"\n+\n+    gdb_test \"info connections\" \"${target} \\| ${::gdbserver} - ${::binfile} \\[^\\r\\n\\]+\"\n+\n+    if { ![skip_python_tests] } {\n+\tgdb_test_no_output \"python conn = gdb.selected_inferior().connection\"\n+\tgdb_test \"python print(conn.details)\" \"\\| ${::gdbserver} - ${::binfile}\"\n+    }\n+}\n+\n+# Test with the two remote protocol types.\n+foreach_with_prefix target { remote extended-remote } {\n+    do_test ${target}\n+}"
    }
  ]
}