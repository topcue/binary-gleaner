{
  "sha": "506195754c948948a4940928969ffb07584ae845",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTA2MTk1NzU0Yzk0ODk0OGE0OTQwOTI4OTY5ZmZiMDc1ODRhZTg0NQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-13T17:09:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-13T17:25:16Z"
    },
    "message": "gdb: bool-ify maybe_add_script_{text,file}\n\nBool-ify the return type of maybe_add_script_text and\nmaybe_add_script_file, the loaded parameter and related things.\n\ngdb/ChangeLog:\n\n\t* auto-load.c (struct loaded_script) <loaded>: Change to bool.\n\t(maybe_add_script_file): Change return type to bool.\n\t(maybe_add_script_text): Change return type and\n\tloaded parameter to bool.\n\t(source_script_file): Adjust.\n\t(execute_script_contents): Adjust.\n\nChange-Id: I59ab5862796fa7d154721b56e2ff8612ad5d734b",
    "tree": {
      "sha": "4a9f67c986a9c57ab4cb2123673c8e8a02f3d8bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a9f67c986a9c57ab4cb2123673c8e8a02f3d8bf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/506195754c948948a4940928969ffb07584ae845",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/506195754c948948a4940928969ffb07584ae845",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/506195754c948948a4940928969ffb07584ae845",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/506195754c948948a4940928969ffb07584ae845/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5bf7e91b2b47295b021ce3a06688d8cfb74e7fab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bf7e91b2b47295b021ce3a06688d8cfb74e7fab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5bf7e91b2b47295b021ce3a06688d8cfb74e7fab"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 20,
    "deletions": 22
  },
  "files": [
    {
      "sha": "b9acb8f8609ec98c721d46afc6644c48fdeee529",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 20,
      "deletions": 22,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/506195754c948948a4940928969ffb07584ae845/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/506195754c948948a4940928969ffb07584ae845/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=506195754c948948a4940928969ffb07584ae845",
      "patch": "@@ -563,8 +563,8 @@ struct loaded_script\n      inaccessible), or NULL for loaded_script_texts.  */\n   const char *full_path;\n \n-  /* Non-zero if this script has been loaded.  */\n-  int loaded;\n+  /* True if this script has been loaded.  */\n+  bool loaded;\n \n   const struct extension_language_defn *language;\n };\n@@ -650,24 +650,24 @@ get_auto_load_pspace_data_for_loading (struct program_space *pspace)\n }\n \n /* Add script file NAME in LANGUAGE to hash table of PSPACE_INFO.\n-   LOADED 1 if the script has been (is going to) be loaded, 0 otherwise\n-   (such as if it has not been found).\n+   LOADED is true if the script has been (is going to) be loaded, false\n+   otherwise (such as if it has not been found).\n    FULL_PATH is NULL if the script wasn't found.\n+\n    The result is true if the script was already in the hash table.  */\n \n-static int\n-maybe_add_script_file (struct auto_load_pspace_info *pspace_info, int loaded,\n+static bool\n+maybe_add_script_file (struct auto_load_pspace_info *pspace_info, bool loaded,\n \t\t       const char *name, const char *full_path,\n \t\t       const struct extension_language_defn *language)\n {\n   struct htab *htab = pspace_info->loaded_script_files.get ();\n   struct loaded_script **slot, entry;\n-  int in_hash_table;\n \n   entry.name = name;\n   entry.language = language;\n   slot = (struct loaded_script **) htab_find_slot (htab, &entry, INSERT);\n-  in_hash_table = *slot != NULL;\n+  bool in_hash_table = *slot != NULL;\n \n   /* If this script is not in the hash table, add it.  */\n \n@@ -699,23 +699,23 @@ maybe_add_script_file (struct auto_load_pspace_info *pspace_info, int loaded,\n }\n \n /* Add script contents NAME in LANGUAGE to hash table of PSPACE_INFO.\n-   LOADED 1 if the script has been (is going to) be loaded, 0 otherwise\n-   (such as if it has not been found).\n+   LOADED is true if the script has been (is going to) be loaded, false\n+   otherwise (such as if it has not been found).\n+\n    The result is true if the script was already in the hash table.  */\n \n-static int\n+static bool\n maybe_add_script_text (struct auto_load_pspace_info *pspace_info,\n-\t\t       int loaded, const char *name,\n+\t\t       bool loaded, const char *name,\n \t\t       const struct extension_language_defn *language)\n {\n   struct htab *htab = pspace_info->loaded_script_texts.get ();\n   struct loaded_script **slot, entry;\n-  int in_hash_table;\n \n   entry.name = name;\n   entry.language = language;\n   slot = (struct loaded_script **) htab_find_slot (htab, &entry, INSERT);\n-  in_hash_table = *slot != NULL;\n+  bool in_hash_table = *slot != NULL;\n \n   /* If this script is not in the hash table, add it.  */\n \n@@ -891,7 +891,6 @@ source_script_file (struct auto_load_pspace_info *pspace_info,\n \t\t    const char *section_name, unsigned int offset,\n \t\t    const char *file)\n {\n-  int in_hash_table;\n   objfile_script_sourcer_func *sourcer;\n \n   /* Skip this script if support is not compiled in.  */\n@@ -941,11 +940,10 @@ source_script_file (struct auto_load_pspace_info *pspace_info,\n \t\t\t\t\t    section_name, offset);\n     }\n \n-  in_hash_table = maybe_add_script_file (pspace_info, bool (opened), file,\n-\t\t\t\t\t (opened\n-\t\t\t\t\t  ? opened->full_path.get ()\n-\t\t\t\t\t  : NULL),\n-\t\t\t\t\t language);\n+  bool in_hash_table\n+    = maybe_add_script_file (pspace_info, bool (opened), file,\n+\t\t\t     (opened ? opened->full_path.get (): NULL),\n+\t\t\t     language);\n \n   /* If this file is not currently loaded, load it.  */\n   if (opened && !in_hash_table)\n@@ -967,7 +965,6 @@ execute_script_contents (struct auto_load_pspace_info *pspace_info,\n   objfile_script_executor_func *executor;\n   const char *newline, *script_text;\n   const char *name;\n-  int in_hash_table;\n \n   /* The first line of the script is the name of the script.\n      It must not contain any kind of space character.  */\n@@ -1029,7 +1026,8 @@ of file %ps.\"),\n \t\t\t      ext_lang_name (language), name,\n \t\t\t      section_name, objfile_name (objfile));\n \n-  in_hash_table = maybe_add_script_text (pspace_info, is_safe, name, language);\n+  bool in_hash_table\n+    = maybe_add_script_text (pspace_info, is_safe, name, language);\n \n   /* If this file is not currently loaded, load it.  */\n   if (is_safe && !in_hash_table)"
    }
  ]
}