{
  "sha": "1d1669e40f89a34ae2804ee040df2bf77ed29df8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWQxNjY5ZTQwZjg5YTM0YWUyODA0ZWUwNDBkZjJiZjc3ZWQyOWRmOA==",
  "commit": {
    "author": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2021-05-07T15:37:16Z"
    },
    "committer": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2021-05-07T15:37:16Z"
    },
    "message": "debuginfod-support.c: Use long-lived debuginfod_client\n\nInstead of initializing a new debuginfod_client for each query, store\nthe first initialized client for the remainder of the GDB session and\nuse it for every debuginfod query.\n\nIn conjunction with upcoming changes to libdebuginfod, using one client\nfor all queries will avoid latency caused by unneccesarily setting up\nTCP connections multiple times.\n\nTested on Fedora 33 x86_64.\n\ngdb/ChangeLog:\n\n\t* debuginfod-support.c (debuginfod_init): Remove.\n\t(get_debuginfod_client): New function.",
    "tree": {
      "sha": "9bc08d10248d4a61d04e5e8ad029a43430f79fdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9bc08d10248d4a61d04e5e8ad029a43430f79fdf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1d1669e40f89a34ae2804ee040df2bf77ed29df8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d1669e40f89a34ae2804ee040df2bf77ed29df8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1d1669e40f89a34ae2804ee040df2bf77ed29df8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d1669e40f89a34ae2804ee040df2bf77ed29df8/comments",
  "author": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2698f5ead62298979e44a212023027ebb582f3d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2698f5ead62298979e44a212023027ebb582f3d1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2698f5ead62298979e44a212023027ebb582f3d1"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 25,
    "deletions": 12
  },
  "files": [
    {
      "sha": "50e87fb6538c4fa0dbe5bd6571c4189b0d4b1d53",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d1669e40f89a34ae2804ee040df2bf77ed29df8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d1669e40f89a34ae2804ee040df2bf77ed29df8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1d1669e40f89a34ae2804ee040df2bf77ed29df8",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-07  Aaron Merey  <amerey@redhat.com>\n+\n+\t* debuginfod-support.c (debuginfod_init): Remove.\n+\t(get_debuginfod_client): New function.\n+\n 2021-05-07  Tom Tromey  <tom@tromey.com>\n \n \t* breakpoint.c (ambiguous_names_p): Use htab_eq_string."
    },
    {
      "sha": "2d626e335a0cd81007dfe6d30297c14cca4fa859",
      "filename": "gdb/debuginfod-support.c",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d1669e40f89a34ae2804ee040df2bf77ed29df8/gdb/debuginfod-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d1669e40f89a34ae2804ee040df2bf77ed29df8/gdb/debuginfod-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/debuginfod-support.c?ref=1d1669e40f89a34ae2804ee040df2bf77ed29df8",
      "patch": "@@ -72,6 +72,7 @@ static int\n progressfn (debuginfod_client *c, long cur, long total)\n {\n   user_data *data = static_cast<user_data *> (debuginfod_get_user_data (c));\n+  gdb_assert (data != nullptr);\n \n   if (check_quit_flag ())\n     {\n@@ -103,15 +104,20 @@ progressfn (debuginfod_client *c, long cur, long total)\n   return 0;\n }\n \n-static debuginfod_client_up\n-debuginfod_init ()\n+static debuginfod_client *\n+get_debuginfod_client ()\n {\n-  debuginfod_client_up c (debuginfod_begin ());\n+  static debuginfod_client_up global_client;\n \n-  if (c != nullptr)\n-    debuginfod_set_progressfn (c.get (), progressfn);\n+  if (global_client == nullptr)\n+    {\n+      global_client.reset (debuginfod_begin ());\n+\n+      if (global_client != nullptr)\n+\tdebuginfod_set_progressfn (global_client.get (), progressfn);\n+    }\n \n-  return c;\n+  return global_client.get ();\n }\n \n /* See debuginfod-support.h  */\n@@ -126,19 +132,20 @@ debuginfod_source_query (const unsigned char *build_id,\n   if (urls_env_var == NULL || urls_env_var[0] == '\\0')\n     return scoped_fd (-ENOSYS);\n \n-  debuginfod_client_up c = debuginfod_init ();\n+  debuginfod_client *c = get_debuginfod_client ();\n \n   if (c == nullptr)\n     return scoped_fd (-ENOMEM);\n \n   user_data data (\"source file\", srcpath);\n \n-  debuginfod_set_user_data (c.get (), &data);\n-  scoped_fd fd (debuginfod_find_source (c.get (),\n+  debuginfod_set_user_data (c, &data);\n+  scoped_fd fd (debuginfod_find_source (c,\n \t\t\t\t\tbuild_id,\n \t\t\t\t\tbuild_id_len,\n \t\t\t\t\tsrcpath,\n \t\t\t\t\tnullptr));\n+  debuginfod_set_user_data (c, nullptr);\n \n   /* TODO: Add 'set debug debuginfod' command to control when error messages are shown.  */\n   if (fd.get () < 0 && fd.get () != -ENOENT)\n@@ -164,17 +171,18 @@ debuginfod_debuginfo_query (const unsigned char *build_id,\n   if (urls_env_var == NULL || urls_env_var[0] == '\\0')\n     return scoped_fd (-ENOSYS);\n \n-  debuginfod_client_up c = debuginfod_init ();\n+  debuginfod_client *c = get_debuginfod_client ();\n \n   if (c == nullptr)\n     return scoped_fd (-ENOMEM);\n \n   char *dname = nullptr;\n   user_data data (\"separate debug info for\", filename);\n \n-  debuginfod_set_user_data (c.get (), &data);\n-  scoped_fd fd (debuginfod_find_debuginfo (c.get (), build_id, build_id_len,\n+  debuginfod_set_user_data (c, &data);\n+  scoped_fd fd (debuginfod_find_debuginfo (c, build_id, build_id_len,\n \t\t\t\t\t   &dname));\n+  debuginfod_set_user_data (c, nullptr);\n \n   if (fd.get () < 0 && fd.get () != -ENOENT)\n     printf_filtered (_(\"Download failed: %s.  Continuing without debug info for %ps.\\n\"),"
    }
  ]
}