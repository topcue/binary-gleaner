{
  "sha": "d0e39ea27cde07011967ab74d39cf13dfe3370c4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDBlMzllYTI3Y2RlMDcwMTE5NjdhYjc0ZDM5Y2YxM2RmZTMzNzBjNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-16T16:15:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-16T16:36:05Z"
    },
    "message": "gdb: add type::name / type::set_name\n\nAdd the `name` and `set_name` methods on `struct type`, in order to\nremove the `TYPE_NAME` macro.  In this patch, the `TYPE_NAME` macro is\nchanged to use `type::name`, so all the call sites that are used to set\nthe type name are changed to use `type::set_name`.  The next patch will\nremove `TYPE_NAME` completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <name, set_name>: New methods.\n\t(TYPE_CODE): Use type::name.  Change all call sites used to set\n\tthe name to use type::set_name instead.",
    "tree": {
      "sha": "582ea33260f21ba7bce52e063162fb0c83cd8b0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/582ea33260f21ba7bce52e063162fb0c83cd8b0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d0e39ea27cde07011967ab74d39cf13dfe3370c4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0e39ea27cde07011967ab74d39cf13dfe3370c4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d0e39ea27cde07011967ab74d39cf13dfe3370c4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0e39ea27cde07011967ab74d39cf13dfe3370c4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2dab0c7ba0d69bcc16cfe58da279ce915ef24348",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2dab0c7ba0d69bcc16cfe58da279ce915ef24348",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2dab0c7ba0d69bcc16cfe58da279ce915ef24348"
    }
  ],
  "stats": {
    "total": 213,
    "additions": 114,
    "deletions": 99
  },
  "files": [
    {
      "sha": "3f92a6d6c5eeb1592715a648747bd51bf159bece",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-16  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <name, set_name>: New methods.\n+\t(TYPE_CODE): Use type::name.  Change all call sites used to set\n+\tthe name to use type::set_name instead.\n+\n 2020-05-16  Tom Tromey  <tom@tromey.com>\n \n \t* top.c (quit_force): Update."
    },
    {
      "sha": "98488242c8e53d27903f2caf08dc1c2866d0b4d4",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -2144,7 +2144,7 @@ constrained_packed_array_type (struct type *type, long *elt_bits)\n \t\t\t\t   elt_bits);\n   create_array_type (new_type, new_elt_type, index_type);\n   TYPE_FIELD_BITSIZE (new_type, 0) = *elt_bits;\n-  TYPE_NAME (new_type) = ada_type_name (type);\n+  new_type->set_name (ada_type_name (type));\n \n   if ((check_typedef (index_type)->code () == TYPE_CODE_RANGE\n        && is_dynamic_type (check_typedef (index_type)))\n@@ -8029,7 +8029,7 @@ empty_record (struct type *templ)\n   TYPE_NFIELDS (type) = 0;\n   TYPE_FIELDS (type) = NULL;\n   INIT_NONE_SPECIFIC (type);\n-  TYPE_NAME (type) = \"<empty>\";\n+  type->set_name (\"<empty>\");\n   TYPE_LENGTH (type) = 0;\n   return type;\n }\n@@ -8087,7 +8087,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n   TYPE_FIELDS (rtype) = (struct field *)\n     TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n   memset (TYPE_FIELDS (rtype), 0, sizeof (struct field) * nfields);\n-  TYPE_NAME (rtype) = ada_type_name (type);\n+  rtype->set_name (ada_type_name (type));\n   TYPE_FIXED_INSTANCE (rtype) = 1;\n \n   off = 0;\n@@ -8363,7 +8363,7 @@ template_to_static_fixed_type (struct type *type0)\n \t\tTYPE_ALLOC (type, nfields * sizeof (struct field));\n \t      memcpy (TYPE_FIELDS (type), TYPE_FIELDS (type0),\n \t\t      sizeof (struct field) * nfields);\n-\t      TYPE_NAME (type) = ada_type_name (type0);\n+\t      type->set_name (ada_type_name (type0));\n \t      TYPE_FIXED_INSTANCE (type) = 1;\n \t      TYPE_LENGTH (type) = 0;\n \t    }\n@@ -8412,7 +8412,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n     (struct field *) TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n   memcpy (TYPE_FIELDS (rtype), TYPE_FIELDS (type),\n           sizeof (struct field) * nfields);\n-  TYPE_NAME (rtype) = ada_type_name (type);\n+  rtype->set_name (ada_type_name (type));\n   TYPE_FIXED_INSTANCE (rtype) = 1;\n   TYPE_LENGTH (rtype) = TYPE_LENGTH (type);\n \n@@ -8734,7 +8734,7 @@ to_fixed_array_type (struct type *type0, struct value *dval,\n   /* We want to preserve the type name.  This can be useful when\n      trying to get the type name of a value that has already been\n      printed (for instance, if the user did \"print VAR; whatis $\".  */\n-  TYPE_NAME (result) = TYPE_NAME (type0);\n+  result->set_name (TYPE_NAME (type0));\n \n   if (constrained_packed_array_p)\n     {\n@@ -8978,7 +8978,7 @@ static_unwrap_type (struct type *type)\n     {\n       struct type *type1 = TYPE_FIELD_TYPE (ada_check_typedef (type), 0);\n       if (ada_type_name (type1) == NULL)\n-        TYPE_NAME (type1) = ada_type_name (type);\n+\ttype1->set_name (ada_type_name (type));\n \n       return static_unwrap_type (type1);\n     }\n@@ -9420,7 +9420,7 @@ unwrap_value (struct value *val)\n       struct type *val_type = ada_check_typedef (value_type (v));\n \n       if (ada_type_name (val_type) == NULL)\n-        TYPE_NAME (val_type) = ada_type_name (type);\n+\tval_type->set_name (ada_type_name (type));\n \n       return unwrap_value (v);\n     }\n@@ -11674,7 +11674,7 @@ to_fixed_range_type (struct type *raw_type, struct value *dval)\n          to match the size of the base_type, which is not what we want.\n          Set it back to the original range type's length.  */\n       TYPE_LENGTH (type) = TYPE_LENGTH (raw_type);\n-      TYPE_NAME (type) = name;\n+      type->set_name (name);\n       return type;\n     }\n }\n@@ -13836,8 +13836,8 @@ ada_language_arch_info (struct gdbarch *gdbarch,\n   lai->primitive_type_vector [ada_primitive_type_system_address]\n     = lookup_pointer_type (arch_type (gdbarch, TYPE_CODE_VOID, TARGET_CHAR_BIT,\n \t\t\t\t      \"void\"));\n-  TYPE_NAME (lai->primitive_type_vector [ada_primitive_type_system_address])\n-    = \"system__address\";\n+  lai->primitive_type_vector [ada_primitive_type_system_address]\n+    ->set_name (\"system__address\");\n \n   /* Create the equivalent of the System.Storage_Elements.Storage_Offset\n      type.  This is a signed integral type whose size is the same as"
    },
    {
      "sha": "45df1bd39dea5828c7015a8df23f29b4eeaa1832",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -3920,7 +3920,7 @@ arm_neon_double_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"f64\", elem);\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"neon_d\";\n+      t->set_name (\"neon_d\");\n       tdep->neon_double_type = t;\n     }\n \n@@ -3959,7 +3959,7 @@ arm_neon_quad_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"f64\", init_vector_type (elem, 2));\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"neon_q\";\n+      t->set_name (\"neon_q\");\n       tdep->neon_quad_type = t;\n     }\n "
    },
    {
      "sha": "c08c9de2ff0825380ae96fdf7c24ef00f6291302",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -1469,7 +1469,7 @@ patch_type (struct type *type, struct type *real_type)\n \t process_coff_symbol.  */\n       if (TYPE_NAME (target))\n \txfree ((char*) TYPE_NAME (target));\n-      TYPE_NAME (target) = xstrdup (TYPE_NAME (real_target));\n+      target->set_name (xstrdup (TYPE_NAME (real_target)));\n     }\n }\n \n@@ -1684,8 +1684,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \t\t  ;\n \t\t}\n \t      else\n-\t\tTYPE_NAME (SYMBOL_TYPE (sym)) =\n-\t\t  xstrdup (sym->linkage_name ());\n+\t\tSYMBOL_TYPE (sym)->set_name (xstrdup (sym->linkage_name ()));\n \t    }\n \n \t  /* Keep track of any type which points to empty structured\n@@ -1720,7 +1719,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \t    if (sym->linkage_name () != NULL\n \t\t&& *sym->linkage_name () != '~'\n \t\t&& *sym->linkage_name () != '.')\n-\t      TYPE_NAME (SYMBOL_TYPE (sym)) = xstrdup (sym->linkage_name ());\n+\t      SYMBOL_TYPE (sym)->set_name (xstrdup (sym->linkage_name ()));\n \n \t  add_symbol_to_list (sym, get_file_symbols ());\n \t  break;\n@@ -1881,7 +1880,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  /* Anonymous structure type.  */\n \t  type = coff_alloc_type (cs->c_symnum);\n \t  type->set_code (TYPE_CODE_STRUCT);\n-\t  TYPE_NAME (type) = NULL;\n+\t  type->set_name (NULL);\n \t  INIT_CPLUS_SPECIFIC (type);\n \t  TYPE_LENGTH (type) = 0;\n \t  TYPE_FIELDS (type) = 0;\n@@ -1901,7 +1900,7 @@ decode_base_type (struct coff_symbol *cs,\n \t{\n \t  /* Anonymous union type.  */\n \t  type = coff_alloc_type (cs->c_symnum);\n-\t  TYPE_NAME (type) = NULL;\n+\t  type->set_name (NULL);\n \t  INIT_CPLUS_SPECIFIC (type);\n \t  TYPE_LENGTH (type) = 0;\n \t  TYPE_FIELDS (type) = 0;\n@@ -1923,7 +1922,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  /* Anonymous enum type.  */\n \t  type = coff_alloc_type (cs->c_symnum);\n \t  type->set_code (TYPE_CODE_ENUM);\n-\t  TYPE_NAME (type) = NULL;\n+\t  type->set_name (NULL);\n \t  TYPE_LENGTH (type) = 0;\n \t  TYPE_FIELDS (type) = 0;\n \t  TYPE_NFIELDS (type) = 0;"
    },
    {
      "sha": "7e5b71eece0f497f0c44ed89c522d8e0a8bb1135",
      "filename": "gdb/csky-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/csky-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/csky-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/csky-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -267,7 +267,7 @@ csky_vector_type (struct gdbarch *gdbarch)\n \t\t\t       init_vector_type (bt->builtin_int8, 16));\n \n   TYPE_VECTOR (t) = 1;\n-  TYPE_NAME (t) = \"builtin_type_vec128i\";\n+  t->set_name (\"builtin_type_vec128i\");\n \n   return t;\n }"
    },
    {
      "sha": "b5bdb5f9cf1eeef3af644b3cfae322b107dd9b32",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -596,7 +596,7 @@ read_structure_type (struct ctf_context *ccp, ctf_id_t tid)\n \n   gdb::unique_xmalloc_ptr<char> name (ctf_type_aname_raw (fp, tid));\n   if (name != NULL && strlen (name.get() ) != 0)\n-    TYPE_NAME (type) = obstack_strdup (&of->objfile_obstack, name.get ());\n+    type->set_name (obstack_strdup (&of->objfile_obstack, name.get ()));\n \n   kind = ctf_type_kind (fp, tid);\n   if (kind == CTF_K_UNION)\n@@ -654,7 +654,7 @@ read_func_kind_type (struct ctf_context *ccp, ctf_id_t tid)\n \n   gdb::unique_xmalloc_ptr<char> name (ctf_type_aname_raw (fp, tid));\n   if (name != NULL && strlen (name.get ()) != 0)\n-    TYPE_NAME (type) = obstack_strdup (&of->objfile_obstack, name.get ());\n+    type->set_name (obstack_strdup (&of->objfile_obstack, name.get ()));\n \n   type->set_code (TYPE_CODE_FUNC);\n   ctf_func_type_info (fp, tid, &cfi);\n@@ -680,7 +680,7 @@ read_enum_type (struct ctf_context *ccp, ctf_id_t tid)\n \n   gdb::unique_xmalloc_ptr<char> name (ctf_type_aname_raw (fp, tid));\n   if (name != NULL && strlen (name.get ()) != 0)\n-    TYPE_NAME (type) = obstack_strdup (&of->objfile_obstack, name.get ());\n+    type->set_name (obstack_strdup (&of->objfile_obstack, name.get ()));\n \n   type->set_code (TYPE_CODE_ENUM);\n   TYPE_LENGTH (type) = ctf_type_size (fp, tid);"
    },
    {
      "sha": "2c81a4eed65bf87e52d8dffadbc2737093c1d291",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -9343,9 +9343,9 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       TYPE_FIELD (type, 1) = saved_field;\n       TYPE_FIELD_NAME (type, 1)\n \t= rust_last_path_segment (TYPE_NAME (TYPE_FIELD_TYPE (type, 1)));\n-      TYPE_NAME (TYPE_FIELD_TYPE (type, 1))\n-\t= rust_fully_qualify (&objfile->objfile_obstack, TYPE_NAME (type),\n-\t\t\t      TYPE_FIELD_NAME (type, 1));\n+      TYPE_FIELD_TYPE (type, 1)->set_name\n+\t(rust_fully_qualify (&objfile->objfile_obstack, TYPE_NAME (type),\n+\t\t\t     TYPE_FIELD_NAME (type, 1)));\n \n       const char *dataless_name\n \t= rust_fully_qualify (&objfile->objfile_obstack, TYPE_NAME (type),\n@@ -9374,9 +9374,9 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       const char *variant_name\n \t= rust_last_path_segment (TYPE_NAME (field_type));\n       TYPE_FIELD_NAME (type, 0) = variant_name;\n-      TYPE_NAME (field_type)\n-\t= rust_fully_qualify (&objfile->objfile_obstack,\n-\t\t\t      TYPE_NAME (type), variant_name);\n+      field_type->set_name\n+\t(rust_fully_qualify (&objfile->objfile_obstack,\n+\t\t\t     TYPE_NAME (type), variant_name));\n     }\n   else\n     {\n@@ -9477,9 +9477,9 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t      ++TYPE_FIELDS (sub_type);\n \t    }\n \t  TYPE_FIELD_NAME (type, i) = variant_name;\n-\t  TYPE_NAME (sub_type)\n-\t    = rust_fully_qualify (&objfile->objfile_obstack,\n-\t\t\t\t  TYPE_NAME (type), variant_name);\n+\t  sub_type->set_name\n+\t    (rust_fully_qualify (&objfile->objfile_obstack,\n+\t\t\t\t TYPE_NAME (type), variant_name));\n \t}\n \n       /* Indicate that this is a variant type.  */\n@@ -15356,13 +15356,13 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  if (get_die_type (die, cu) != NULL)\n \t    return get_die_type (die, cu);\n \n-\t  TYPE_NAME (type) = full_name;\n+\t  type->set_name (full_name);\n \t}\n       else\n \t{\n \t  /* The name is already allocated along with this objfile, so\n \t     we don't need to duplicate it for the type.  */\n-\t  TYPE_NAME (type) = name;\n+\t  type->set_name (name);\n \t}\n     }\n \n@@ -15939,7 +15939,7 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n   type->set_code (TYPE_CODE_ENUM);\n   name = dwarf2_full_name (NULL, die, cu);\n   if (name != NULL)\n-    TYPE_NAME (type) = name;\n+    type->set_name (name);\n \n   attr = dwarf2_attr (die, DW_AT_type, cu);\n   if (attr != NULL)\n@@ -16186,7 +16186,7 @@ read_array_type (struct die_info *die, struct dwarf2_cu *cu)\n \n   name = dwarf2_name (die, cu);\n   if (name)\n-    TYPE_NAME (type) = name;\n+    type->set_name (name);\n \n   maybe_set_alignment (cu, die, type);\n \n@@ -17757,7 +17757,7 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n \n   name = dwarf2_name (die, cu);\n   if (name)\n-    TYPE_NAME (range_type) = name;\n+    range_type->set_name (name);\n \n   attr = dwarf2_attr (die, DW_AT_byte_size, cu);\n   if (attr != nullptr)\n@@ -17780,7 +17780,7 @@ read_unspecified_type (struct die_info *die, struct dwarf2_cu *cu)\n \n   type = init_type (cu->per_cu->dwarf2_per_objfile->objfile, TYPE_CODE_VOID,0,\n \t\t    NULL);\n-  TYPE_NAME (type) = dwarf2_name (die, cu);\n+  type->set_name (dwarf2_name (die, cu));\n \n   /* In Ada, an unspecified type is typically used when the description\n      of the type is deferred to a different unit.  When encountering\n@@ -20905,7 +20905,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t\t       with this objfile, so we don't need to\n \t\t       duplicate it for the type.  */\n \t\t    if (TYPE_NAME (SYMBOL_TYPE (sym)) == 0)\n-\t\t      TYPE_NAME (SYMBOL_TYPE (sym)) = sym->search_name ();\n+\t\t      SYMBOL_TYPE (sym)->set_name (sym->search_name ());\n \t\t  }\n \t      }\n \t  }"
    },
    {
      "sha": "acf787c706a3abd2e020ae6b559f4c3a9c12f278",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -1629,7 +1629,7 @@ fbsd_get_siginfo_type (struct gdbarch *gdbarch)\n \n   /* union sigval */\n   sigval_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);\n-  TYPE_NAME (sigval_type) = xstrdup (\"sigval\");\n+  sigval_type->set_name (xstrdup (\"sigval\"));\n   append_composite_type_field (sigval_type, \"sival_int\", int_type);\n   append_composite_type_field (sigval_type, \"sival_ptr\", void_ptr_type);\n \n@@ -1679,7 +1679,7 @@ fbsd_get_siginfo_type (struct gdbarch *gdbarch)\n \n   /* struct siginfo */\n   siginfo_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (siginfo_type) = xstrdup (\"siginfo\");\n+  siginfo_type->set_name (xstrdup (\"siginfo\"));\n   append_composite_type_field (siginfo_type, \"si_signo\", int_type);\n   append_composite_type_field (siginfo_type, \"si_errno\", int_type);\n   append_composite_type_field (siginfo_type, \"si_code\", int_type);"
    },
    {
      "sha": "10c44ddbcacc6b6e24feee41de5145d1fbb5eeec",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -3174,7 +3174,7 @@ init_type (struct objfile *objfile, enum type_code code, int bit,\n   set_type_code (type, code);\n   gdb_assert ((bit % TARGET_CHAR_BIT) == 0);\n   TYPE_LENGTH (type) = bit / TARGET_CHAR_BIT;\n-  TYPE_NAME (type) = name;\n+  type->set_name (name);\n \n   return type;\n }\n@@ -3307,7 +3307,7 @@ init_complex_type (const char *name, struct type *target_type)\n       t = alloc_type_copy (target_type);\n       set_type_code (t, TYPE_CODE_COMPLEX);\n       TYPE_LENGTH (t) = 2 * TYPE_LENGTH (target_type);\n-      TYPE_NAME (t) = name;\n+      t->set_name (name);\n \n       TYPE_TARGET_TYPE (t) = target_type;\n       TYPE_MAIN_TYPE (target_type)->flds_bnds.complex_type = t;\n@@ -5290,7 +5290,7 @@ copy_type_recursive (struct objfile *objfile,\n   TYPE_OWNER (new_type).gdbarch = get_type_arch (type);\n \n   if (TYPE_NAME (type))\n-    TYPE_NAME (new_type) = xstrdup (TYPE_NAME (type));\n+    new_type->set_name (xstrdup (TYPE_NAME (type)));\n \n   TYPE_INSTANCE_FLAGS (new_type) = TYPE_INSTANCE_FLAGS (type);\n   TYPE_LENGTH (new_type) = TYPE_LENGTH (type);\n@@ -5443,7 +5443,7 @@ arch_type (struct gdbarch *gdbarch,\n   TYPE_LENGTH (type) = bit / TARGET_CHAR_BIT;\n \n   if (name)\n-    TYPE_NAME (type) = gdbarch_obstack_strdup (gdbarch, name);\n+    type->set_name (gdbarch_obstack_strdup (gdbarch, name));\n \n   return type;\n }\n@@ -5615,7 +5615,7 @@ arch_composite_type (struct gdbarch *gdbarch, const char *name,\n \n   gdb_assert (code == TYPE_CODE_STRUCT || code == TYPE_CODE_UNION);\n   t = arch_type (gdbarch, code, 0, NULL);\n-  TYPE_NAME (t) = name;\n+  t->set_name (name);\n   INIT_CPLUS_SPECIFIC (t);\n   return t;\n }"
    },
    {
      "sha": "aeed06ba5da1fea6e3e30f333ad246f37d49b2da",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -889,6 +889,18 @@ struct type\n     this->main_type->code = code;\n   }\n \n+  /* Get the name of this type.  */\n+  const char *name () const\n+  {\n+    return this->main_type->name;\n+  }\n+\n+  /* Set the name of this type.  */\n+  void set_name (const char *name)\n+  {\n+    this->main_type->name = name;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -1404,7 +1416,7 @@ extern void allocate_gnat_aux_type (struct type *);\n \n #define TYPE_INSTANCE_FLAGS(thistype) (thistype)->instance_flags\n #define TYPE_MAIN_TYPE(thistype) (thistype)->main_type\n-#define TYPE_NAME(thistype) TYPE_MAIN_TYPE(thistype)->name\n+#define TYPE_NAME(thistype) ((thistype)->name ())\n #define TYPE_TARGET_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->target_type\n #define TYPE_POINTER_TYPE(thistype) (thistype)->pointer_type\n #define TYPE_REFERENCE_TYPE(thistype) (thistype)->reference_type"
    },
    {
      "sha": "df5818b300ec2e288650eb9357a6e83131a2c36d",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -167,7 +167,7 @@ build_gdb_vtable_type (struct gdbarch *arch)\n   t = arch_type (arch, TYPE_CODE_STRUCT, offset * TARGET_CHAR_BIT, NULL);\n   TYPE_NFIELDS (t) = field - field_list;\n   TYPE_FIELDS (t) = field_list;\n-  TYPE_NAME (t) = \"gdb_gnu_v3_abi_vtable\";\n+  t->set_name (\"gdb_gnu_v3_abi_vtable\");\n   INIT_CPLUS_SPECIFIC (t);\n \n   return make_type_with_address_space (t, TYPE_INSTANCE_FLAG_CODE_SPACE);\n@@ -1056,7 +1056,7 @@ build_std_type_info_type (struct gdbarch *arch)\n   t = arch_type (arch, TYPE_CODE_STRUCT, offset * TARGET_CHAR_BIT, NULL);\n   TYPE_NFIELDS (t) = field - field_list;\n   TYPE_FIELDS (t) = field_list;\n-  TYPE_NAME (t) = \"gdb_gnu_v3_type_info\";\n+  t->set_name (\"gdb_gnu_v3_type_info\");\n   INIT_CPLUS_SPECIFIC (t);\n \n   return t;"
    },
    {
      "sha": "f4fe3a20c708d39a04ae05f437e15b4fd7f2a680",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -3080,7 +3080,7 @@ i386_bnd_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"lbound\", bt->builtin_data_ptr);\n       append_composite_type_field (t, \"ubound\", bt->builtin_data_ptr);\n \n-      TYPE_NAME (t) = \"builtin_type_bound128\";\n+      t->set_name (\"builtin_type_bound128\");\n       tdep->i386_bnd_type = t;\n     }\n \n@@ -3133,7 +3133,7 @@ i386_zmm_type (struct gdbarch *gdbarch)\n \t\t\t\t   init_vector_type (bt->builtin_int128, 4));\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"builtin_type_vec512i\";\n+      t->set_name (\"builtin_type_vec512i\");\n       tdep->i386_zmm_type = t;\n     }\n \n@@ -3186,7 +3186,7 @@ i386_ymm_type (struct gdbarch *gdbarch)\n \t\t\t\t   init_vector_type (bt->builtin_int128, 2));\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"builtin_type_vec256i\";\n+      t->set_name (\"builtin_type_vec256i\");\n       tdep->i386_ymm_type = t;\n     }\n \n@@ -3228,7 +3228,7 @@ i386_mmx_type (struct gdbarch *gdbarch)\n \t\t\t\t   init_vector_type (bt->builtin_int8, 8));\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"builtin_type_vec64i\";\n+      t->set_name (\"builtin_type_vec64i\");\n       tdep->i386_mmx_type = t;\n     }\n "
    },
    {
      "sha": "0f9559355f15dd4d6874474ab85b6ff36ca6d174",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -258,7 +258,7 @@ linux_get_siginfo_type_with_fields (struct gdbarch *gdbarch,\n \n   /* sival_t */\n   sigval_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);\n-  TYPE_NAME (sigval_type) = xstrdup (\"sigval_t\");\n+  sigval_type->set_name (xstrdup (\"sigval_t\"));\n   append_composite_type_field (sigval_type, \"sival_int\", int_type);\n   append_composite_type_field (sigval_type, \"sival_ptr\", void_ptr_type);\n \n@@ -352,7 +352,7 @@ linux_get_siginfo_type_with_fields (struct gdbarch *gdbarch,\n \n   /* struct siginfo */\n   siginfo_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (siginfo_type) = xstrdup (\"siginfo\");\n+  siginfo_type->set_name (xstrdup (\"siginfo\"));\n   append_composite_type_field (siginfo_type, \"si_signo\", int_type);\n   append_composite_type_field (siginfo_type, \"si_errno\", int_type);\n   append_composite_type_field (siginfo_type, \"si_code\", int_type);"
    },
    {
      "sha": "cd08d26bafaef1a6cd2c0c426590afa82308a12b",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -1010,10 +1010,10 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t   (.Fxx or .xxfake or empty) for unnamed struct/union/enums.\n \t   Alpha cc puts out an sh->iss of zero for those.  */\n \tif (sh->iss == 0 || name[0] == '.' || name[0] == '\\0')\n-\t  TYPE_NAME (t) = NULL;\n+\t  t->set_name (NULL);\n \telse\n-\t  TYPE_NAME (t) = obconcat (&mdebugread_objfile->objfile_obstack,\n-\t\t\t\t    name, (char *) NULL);\n+\t  t->set_name (obconcat (&mdebugread_objfile->objfile_obstack,\n+\t\t\t\t name, (char *) NULL));\n \n \tt->set_code (type_code);\n \tTYPE_LENGTH (t) = sh->value;\n@@ -1324,7 +1324,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t         for anything except pointers or functions.  */\n \t    }\n \t  else\n-\t    TYPE_NAME (SYMBOL_TYPE (s)) = s->linkage_name ();\n+\t    SYMBOL_TYPE (s)->set_name (s->linkage_name ());\n \t}\n       break;\n \n@@ -1674,11 +1674,11 @@ parse_type (int fd, union aux_ext *ax, unsigned int aux_index, int *bs,\n \t  /* Do not set the tag name if it is a compiler generated tag name\n \t     (.Fxx or .xxfake or empty) for unnamed struct/union/enums.  */\n \t  if (name[0] == '.' || name[0] == '\\0')\n-\t    TYPE_NAME (tp) = NULL;\n+\t    tp->set_name (NULL);\n \t  else if (TYPE_NAME (tp) == NULL\n \t\t   || strcmp (TYPE_NAME (tp), name) != 0)\n-\t    TYPE_NAME (tp)\n-\t      = obstack_strdup (&mdebugread_objfile->objfile_obstack, name);\n+\t    tp->set_name (obstack_strdup (&mdebugread_objfile->objfile_obstack,\n+\t\t\t\t\t  name));\n \t}\n     }\n \n@@ -1713,8 +1713,8 @@ parse_type (int fd, union aux_ext *ax, unsigned int aux_index, int *bs,\n \t    }\n \t  if (TYPE_NAME (tp) == NULL\n \t      || strcmp (TYPE_NAME (tp), name) != 0)\n-\t    TYPE_NAME (tp)\n-\t      = obstack_strdup (&mdebugread_objfile->objfile_obstack, name);\n+\t    tp->set_name (obstack_strdup (&mdebugread_objfile->objfile_obstack,\n+\t\t\t\t\t  name));\n \t}\n     }\n   if (t->bt == btTypedef)\n@@ -4736,7 +4736,7 @@ new_type (char *name)\n   struct type *t;\n \n   t = alloc_type (mdebugread_objfile);\n-  TYPE_NAME (t) = name;\n+  t->set_name (name);\n   INIT_CPLUS_SPECIFIC (t);\n   return t;\n }"
    },
    {
      "sha": "d686c6ea922149b3ff2513bc07f128cbf8c11b82",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -1105,21 +1105,21 @@ build_opencl_types (struct gdbarch *gdbarch)\n #define BUILD_OCL_VTYPES(TYPE)\\\n   types[opencl_primitive_type_##TYPE##2] \\\n     = init_vector_type (types[opencl_primitive_type_##TYPE], 2); \\\n-  TYPE_NAME (types[opencl_primitive_type_##TYPE##2]) = OCL_STRING(TYPE ## 2); \\\n+  types[opencl_primitive_type_##TYPE##2]->set_name (OCL_STRING(TYPE ## 2)); \\\n   types[opencl_primitive_type_##TYPE##3] \\\n     = init_vector_type (types[opencl_primitive_type_##TYPE], 3); \\\n-  TYPE_NAME (types[opencl_primitive_type_##TYPE##3]) = OCL_STRING(TYPE ## 3); \\\n+  types[opencl_primitive_type_##TYPE##3]->set_name (OCL_STRING(TYPE ## 3)); \\\n   TYPE_LENGTH (types[opencl_primitive_type_##TYPE##3]) \\\n     = 4 * TYPE_LENGTH (types[opencl_primitive_type_##TYPE]); \\\n   types[opencl_primitive_type_##TYPE##4] \\\n     = init_vector_type (types[opencl_primitive_type_##TYPE], 4); \\\n-  TYPE_NAME (types[opencl_primitive_type_##TYPE##4]) = OCL_STRING(TYPE ## 4); \\\n+  types[opencl_primitive_type_##TYPE##4]->set_name (OCL_STRING(TYPE ## 4)); \\\n   types[opencl_primitive_type_##TYPE##8] \\\n     = init_vector_type (types[opencl_primitive_type_##TYPE], 8); \\\n-  TYPE_NAME (types[opencl_primitive_type_##TYPE##8]) = OCL_STRING(TYPE ## 8); \\\n+  types[opencl_primitive_type_##TYPE##8]->set_name (OCL_STRING(TYPE ## 8)); \\\n   types[opencl_primitive_type_##TYPE##16] \\\n     = init_vector_type (types[opencl_primitive_type_##TYPE], 16); \\\n-  TYPE_NAME (types[opencl_primitive_type_##TYPE##16]) = OCL_STRING(TYPE ## 16)\n+  types[opencl_primitive_type_##TYPE##16]->set_name (OCL_STRING(TYPE ## 16))\n \n   types[opencl_primitive_type_char]\n     = arch_integer_type (gdbarch, 8, 0, \"char\");"
    },
    {
      "sha": "e4edd7ca3e81b7a2c6c5f7bf56611d51c28381b8",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -544,7 +544,7 @@ riscv_fpreg_d_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"float\", bt->builtin_float);\n       append_composite_type_field (t, \"double\", bt->builtin_double);\n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"builtin_type_fpreg_d\";\n+      t->set_name (\"builtin_type_fpreg_d\");\n       tdep->riscv_fpreg_d_type = t;\n     }\n "
    },
    {
      "sha": "84278e708e79ccd48c9786ac4156ad4be29b9f95",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -2274,7 +2274,7 @@ rs6000_builtin_type_vec64 (struct gdbarch *gdbarch)\n \t\t\t\t   init_vector_type (bt->builtin_int8, 8));\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"ppc_builtin_type_vec64\";\n+      t->set_name (\"ppc_builtin_type_vec64\");\n       tdep->ppc_builtin_type_vec64 = t;\n     }\n \n@@ -2321,7 +2321,7 @@ rs6000_builtin_type_vec128 (struct gdbarch *gdbarch)\n \t\t\t\t   init_vector_type (bt->builtin_int8, 16));\n \n       TYPE_VECTOR (t) = 1;\n-      TYPE_NAME (t) = \"ppc_builtin_type_vec128\";\n+      t->set_name (\"ppc_builtin_type_vec128\");\n       tdep->ppc_builtin_type_vec128 = t;\n     }\n "
    },
    {
      "sha": "3fa550d769471d70f91e9c127ae0de4ec6cf7fcc",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -982,7 +982,7 @@ rust_composite_type (struct type *original,\n     ++nfields;\n \n   result->set_code (TYPE_CODE_STRUCT);\n-  TYPE_NAME (result) = name;\n+  result->set_name (name);\n \n   TYPE_NFIELDS (result) = nfields;\n   TYPE_FIELDS (result)"
    },
    {
      "sha": "12e164c2d228391c0a0bf243cde0c1f7721e59cb",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 14,
      "deletions": 16,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -1294,12 +1294,10 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \n \t      /* Pascal accepts names for pointer types.  */\n \t      if (get_current_subfile ()->language == language_pascal)\n-\t\t{\n-\t\t  TYPE_NAME (SYMBOL_TYPE (sym)) = sym->linkage_name ();\n-          \t}\n+\t\tSYMBOL_TYPE (sym)->set_name (sym->linkage_name ());\n \t    }\n \t  else\n-\t    TYPE_NAME (SYMBOL_TYPE (sym)) = sym->linkage_name ();\n+\t    SYMBOL_TYPE (sym)->set_name (sym->linkage_name ());\n \t}\n \n       add_symbol_to_list (sym, get_file_symbols ());\n@@ -1314,12 +1312,12 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n           SYMBOL_VALUE (struct_sym) = valu;\n           SYMBOL_DOMAIN (struct_sym) = STRUCT_DOMAIN;\n           if (TYPE_NAME (SYMBOL_TYPE (sym)) == 0)\n-            TYPE_NAME (SYMBOL_TYPE (sym))\n-\t      = obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n-\t\t\t  (char *) NULL);\n+\t    SYMBOL_TYPE (sym)->set_name\n+\t      (obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n+\t\t\t (char *) NULL));\n           add_symbol_to_list (struct_sym, get_file_symbols ());\n         }\n-      \n+\n       break;\n \n     case 'T':\n@@ -1341,9 +1339,9 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_VALUE (sym) = valu;\n       SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n       if (TYPE_NAME (SYMBOL_TYPE (sym)) == 0)\n-\tTYPE_NAME (SYMBOL_TYPE (sym))\n-\t  = obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n-\t\t      (char *) NULL);\n+\tSYMBOL_TYPE (sym)->set_name\n+\t  (obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n+\t\t     (char *) NULL));\n       add_symbol_to_list (sym, get_file_symbols ());\n \n       if (synonym)\n@@ -1356,9 +1354,9 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t  SYMBOL_VALUE (typedef_sym) = valu;\n \t  SYMBOL_DOMAIN (typedef_sym) = VAR_DOMAIN;\n \t  if (TYPE_NAME (SYMBOL_TYPE (sym)) == 0)\n-\t    TYPE_NAME (SYMBOL_TYPE (sym))\n-\t      = obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n-\t\t\t  (char *) NULL);\n+\t    SYMBOL_TYPE (sym)->set_name\n+\t      (obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n+\t\t\t (char *) NULL));\n \t  add_symbol_to_list (typedef_sym, get_file_symbols ());\n \t}\n       break;\n@@ -1688,7 +1686,7 @@ read_type (const char **pp, struct objfile *objfile)\n \t   type.  */\n \ttype = dbx_alloc_type (typenums, objfile);\n \ttype->set_code (code);\n-\tTYPE_NAME (type) = type_name;\n+\ttype->set_name (type_name);\n \tINIT_CPLUS_SPECIFIC (type);\n \tTYPE_STUB (type) = 1;\n \n@@ -1752,7 +1750,7 @@ read_type (const char **pp, struct objfile *objfile)\n                \"complete_this_type\" function, but never create unnecessary\n                copies of a type otherwise.  */\n \t    replace_type (type, xtype);\n-\t    TYPE_NAME (type) = NULL;\n+\t    type->set_name (NULL);\n \t  }\n \telse\n \t  {"
    },
    {
      "sha": "20a3a640f4f8f0016ee57415c8c32289ecce1614",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -156,7 +156,7 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n \n       type *element_gdb_type = make_gdb_type (m_gdbarch, e->element_type);\n       m_type = init_vector_type (element_gdb_type, e->count);\n-      TYPE_NAME (m_type) = xstrdup (e->name.c_str ());\n+      m_type->set_name (xstrdup (e->name.c_str ()));\n       return;\n     }\n \n@@ -192,7 +192,7 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n     void make_gdb_type_struct (const tdesc_type_with_fields *e)\n     {\n       m_type = arch_composite_type (m_gdbarch, NULL, TYPE_CODE_STRUCT);\n-      TYPE_NAME (m_type) = xstrdup (e->name.c_str ());\n+      m_type->set_name (xstrdup (e->name.c_str ()));\n \n       for (const tdesc_type_field &f : e->fields)\n \t{\n@@ -247,7 +247,7 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n     void make_gdb_type_union (const tdesc_type_with_fields *e)\n     {\n       m_type = arch_composite_type (m_gdbarch, NULL, TYPE_CODE_UNION);\n-      TYPE_NAME (m_type) = xstrdup (e->name.c_str ());\n+      m_type->set_name (xstrdup (e->name.c_str ()));\n \n       for (const tdesc_type_field &f : e->fields)\n \t{"
    },
    {
      "sha": "086038af0d49817061dbd03f4141888c966a63f2",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0e39ea27cde07011967ab74d39cf13dfe3370c4/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=d0e39ea27cde07011967ab74d39cf13dfe3370c4",
      "patch": "@@ -230,7 +230,7 @@ windows_get_tlb_type (struct gdbarch *gdbarch)\n   /* list entry */\n \n   list_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (list_type) = xstrdup (\"list\");\n+  list_type->set_name (xstrdup (\"list\"));\n \n   module_list_ptr_type = void_ptr_type;\n \n@@ -242,7 +242,7 @@ windows_get_tlb_type (struct gdbarch *gdbarch)\n   /* Structured Exception Handler */\n \n   seh_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (seh_type) = xstrdup (\"seh\");\n+  seh_type->set_name (xstrdup (\"seh\"));\n \n   seh_ptr_type = arch_type (gdbarch, TYPE_CODE_PTR,\n \t\t\t    TYPE_LENGTH (void_ptr_type) * TARGET_CHAR_BIT,\n@@ -255,7 +255,7 @@ windows_get_tlb_type (struct gdbarch *gdbarch)\n \n   /* struct _PEB_LDR_DATA */\n   peb_ldr_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (peb_ldr_type) = xstrdup (\"peb_ldr_data\");\n+  peb_ldr_type->set_name (xstrdup (\"peb_ldr_data\"));\n \n   append_composite_type_field (peb_ldr_type, \"length\", dword32_type);\n   append_composite_type_field (peb_ldr_type, \"initialized\", dword32_type);\n@@ -324,7 +324,7 @@ windows_get_tlb_type (struct gdbarch *gdbarch)\n \n   /* struct process environment block */\n   peb_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (peb_type) = xstrdup (\"peb\");\n+  peb_type->set_name (xstrdup (\"peb\"));\n \n   /* First bytes contain several flags.  */\n   append_composite_type_field (peb_type, \"flags\", dword_ptr_type);\n@@ -343,7 +343,7 @@ windows_get_tlb_type (struct gdbarch *gdbarch)\n \n   /* struct thread information block */\n   tib_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n-  TYPE_NAME (tib_type) = xstrdup (\"tib\");\n+  tib_type->set_name (xstrdup (\"tib\"));\n \n   /* uint32_t current_seh;\t\t\t%fs:0x0000 */\n   append_composite_type_field (tib_type, \"current_seh\", seh_ptr_type);"
    }
  ]
}