{
  "sha": "9193bc4285c232400a26448ca75095c44c13f637",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTE5M2JjNDI4NWMyMzI0MDBhMjY0NDhjYTc1MDk1YzQ0YzEzZjYzNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-30T23:50:10Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-31T00:19:23Z"
    },
    "message": "Use bool in include\n\n\t* bfdlink.h: Replace bfd_boolean with bool throughout.\n\t* coff/ecoff.h: Likewise.\n\t* coff/xcoff.h: Likewise.\n\t* dis-asm.h: Likewise.\n\t* elf/mmix.h: Likewise.\n\t* elf/xtensa.h: Likewise.\n\t* opcode/aarch64.h: Likewise, and FALSE with false, TRUE with true.\n\t* opcode/arc.h: Likewise.\n\t* opcode/mips.h: Likewise.\n\t* opcode/tic6x-opcode-table.h: Likewise.\n\t* opcode/tic6x.h: Likewise.",
    "tree": {
      "sha": "40d0ec6e79c179c2f814a2b559e52377eb8c4d14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/40d0ec6e79c179c2f814a2b559e52377eb8c4d14"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9193bc4285c232400a26448ca75095c44c13f637",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9193bc4285c232400a26448ca75095c44c13f637",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9193bc4285c232400a26448ca75095c44c13f637",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9193bc4285c232400a26448ca75095c44c13f637/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ad9e24ad113a160d8d44dba0eb5cb02647a164e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad9e24ad113a160d8d44dba0eb5cb02647a164e0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ad9e24ad113a160d8d44dba0eb5cb02647a164e0"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 89,
    "deletions": 77
  },
  "files": [
    {
      "sha": "ab3f029674b1bf8ac9500eb1ee7cc764c9305b1a",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -1,3 +1,17 @@\n+2021-03-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfdlink.h: Replace bfd_boolean with bool throughout.\n+\t* coff/ecoff.h: Likewise.\n+\t* coff/xcoff.h: Likewise.\n+\t* dis-asm.h: Likewise.\n+\t* elf/mmix.h: Likewise.\n+\t* elf/xtensa.h: Likewise.\n+\t* opcode/aarch64.h: Likewise, and FALSE with false, TRUE with true.\n+\t* opcode/arc.h: Likewise.\n+\t* opcode/mips.h: Likewise.\n+\t* opcode/tic6x-opcode-table.h: Likewise.\n+\t* opcode/tic6x.h: Likewise.\n+\n 2021-03-31  Alan Modra  <amodra@gmail.com>\n \n \t* cgen/basic-modes.h: Include stdint.h in place of bfd_stdint.h."
    },
    {
      "sha": "7f1b12dbf373c59e6758b0e98ad26cfdbfeb9eab",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -216,16 +216,15 @@ struct bfd_link_hash_table\n    follows bfd_link_hash_indirect and bfd_link_hash_warning links to\n    the real symbol.  */\n extern struct bfd_link_hash_entry *bfd_link_hash_lookup\n-  (struct bfd_link_hash_table *, const char *, bfd_boolean create,\n-   bfd_boolean copy, bfd_boolean follow);\n+  (struct bfd_link_hash_table *, const char *, bool create,\n+   bool copy, bool follow);\n \n /* Look up an entry in the main linker hash table if the symbol might\n    be wrapped.  This should only be used for references to an\n    undefined symbol, not for definitions of a symbol.  */\n \n extern struct bfd_link_hash_entry *bfd_wrapped_link_hash_lookup\n-  (bfd *, struct bfd_link_info *, const char *, bfd_boolean,\n-   bfd_boolean, bfd_boolean);\n+  (bfd *, struct bfd_link_info *, const char *, bool, bool, bool);\n \n /* If H is a wrapped symbol, ie. the symbol name starts with \"__wrap_\"\n    and the remainder is found in wrap_hash, return the real symbol.  */\n@@ -236,7 +235,7 @@ extern struct bfd_link_hash_entry *unwrap_hash_lookup\n /* Traverse a link hash table.  */\n extern void bfd_link_hash_traverse\n   (struct bfd_link_hash_table *,\n-    bfd_boolean (*) (struct bfd_link_hash_entry *, void *),\n+    bool (*) (struct bfd_link_hash_entry *, void *),\n     void *);\n \n /* Add an entry to the undefs list.  */\n@@ -248,12 +247,12 @@ extern void bfd_link_repair_undef_list\n   (struct bfd_link_hash_table *table);\n \n /* Read symbols and cache symbol pointer array in outsymbols.  */\n-extern bfd_boolean bfd_generic_link_read_symbols (bfd *);\n+extern bool bfd_generic_link_read_symbols (bfd *);\n \n /* Check the relocs in the BFD.  Called after all the input\n    files have been loaded, and garbage collection has tagged\n    any unneeded sections.  */\n-extern bfd_boolean bfd_link_check_relocs (bfd *,struct bfd_link_info *);\n+extern bool bfd_link_check_relocs (bfd *,struct bfd_link_info *);\n \n struct bfd_sym_chain\n {\n@@ -292,7 +291,7 @@ struct flag_info_list\n {\n   flag_type with;\n   const char *name;\n-  bfd_boolean valid;\n+  bool valid;\n   struct flag_info_list *next;\n };\n \n@@ -302,7 +301,7 @@ struct flag_info\n   flagword only_with_flags;\n   flagword not_with_flags;\n   struct flag_info_list *flag_list;\n-  bfd_boolean flags_initialized;\n+  bool flags_initialized;\n };\n \n struct bfd_elf_dynamic_list;\n@@ -702,7 +701,7 @@ struct bfd_link_callbacks\n      BFD from which symbols should in fact be added in place of the\n      original BFD's symbols.  Returns TRUE if the object should be\n      added, FALSE if it should be skipped.  */\n-  bfd_boolean (*add_archive_element)\n+  bool (*add_archive_element)\n     (struct bfd_link_info *, bfd *abfd, const char *name, bfd **subsbfd);\n   /* A function which is called when a symbol is found with multiple\n      definitions.  H is the symbol which is defined multiple times.\n@@ -736,7 +735,7 @@ struct bfd_link_callbacks\n      relocatable file.  NAME is the name of the symbol found.  ABFD,\n      SECTION and VALUE are the value of the symbol.  */\n   void (*constructor)\n-    (struct bfd_link_info *, bfd_boolean constructor, const char *name,\n+    (struct bfd_link_info *, bool constructor, const char *name,\n      bfd *abfd, asection *sec, bfd_vma value);\n   /* A function which is called to issue a linker warning.  For\n      example, this is called when there is a reference to a warning\n@@ -755,7 +754,7 @@ struct bfd_link_callbacks\n      a fatal error or not. In some cases SECTION may be NULL.  */\n   void (*undefined_symbol)\n     (struct bfd_link_info *, const char *name, bfd *abfd,\n-     asection *section, bfd_vma address, bfd_boolean is_fatal);\n+     asection *section, bfd_vma address, bool is_fatal);\n   /* A function which is called when a reloc overflow occurs. ENTRY is\n      the link hash table entry for the symbol the reloc is against.\n      NAME is the name of the local symbol or section the reloc is\n@@ -791,7 +790,7 @@ struct bfd_link_callbacks\n      if applicable.  ABFD, SECTION and ADDRESS are the (new) value of\n      the symbol.  If SECTION is bfd_und_section, this is a reference.\n      FLAGS are the symbol BSF_* flags.  */\n-  bfd_boolean (*notice)\n+  bool (*notice)\n     (struct bfd_link_info *, struct bfd_link_hash_entry *h,\n      struct bfd_link_hash_entry *inh,\n      bfd *abfd, asection *section, bfd_vma address, flagword flags);\n@@ -807,10 +806,10 @@ struct bfd_link_callbacks\n   /* This callback provides a chance for users of the BFD library to\n      override its decision about whether to place two adjacent sections\n      into the same segment.  */\n-  bfd_boolean (*override_segment_assignment)\n+  bool (*override_segment_assignment)\n     (struct bfd_link_info *, bfd * abfd,\n      asection * current_section, asection * previous_section,\n-     bfd_boolean new_segment);\n+     bool new_segment);\n   /* This callback provides a chance for callers of the BFD to examine the\n      ELF (dynamic) string table once it is complete.  */\n   void (*examine_strtab)\n@@ -930,9 +929,9 @@ extern struct bfd_link_order *bfd_new_link_order (bfd *, asection *);\n \n struct bfd_section_already_linked;\n \n-extern bfd_boolean bfd_section_already_linked_table_init (void);\n+extern bool bfd_section_already_linked_table_init (void);\n extern void bfd_section_already_linked_table_free (void);\n-extern bfd_boolean _bfd_handle_already_linked\n+extern bool _bfd_handle_already_linked\n   (struct bfd_section *, struct bfd_section_already_linked *,\n    struct bfd_link_info *);\n "
    },
    {
      "sha": "2267b779c2c89ca5f5c274626c262f5a0c1f74a5",
      "filename": "include/coff/ecoff.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/coff/ecoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/coff/ecoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/ecoff.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -407,7 +407,7 @@ struct ecoff_debug_swap\n   /* Function to read symbol data and set up pointers in\n      ecoff_debug_info structure.  The section argument is used for\n      ELF, not straight ECOFF.  */\n-  bfd_boolean (*read_debug_info) (bfd *, asection *, struct ecoff_debug_info *);\n+  bool (*read_debug_info) (bfd *, asection *, struct ecoff_debug_info *);\n };\n \n #endif /* ! defined (ECOFF_H) */"
    },
    {
      "sha": "3170542865b099151b74d3b5840e4ef710191ca6",
      "filename": "include/coff/xcoff.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/coff/xcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/coff/xcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/xcoff.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -406,7 +406,7 @@ struct xcoff_link_hash_entry\n struct xcoff_loader_info\n {\n   /* Set if a problem occurred.  */\n-  bfd_boolean failed;\n+  bool failed;\n \n   /* Output BFD.  */\n   bfd *output_bfd;"
    },
    {
      "sha": "4f5008436d4f2ac42ab5e48d725723674d868b08",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -150,7 +150,7 @@ typedef struct disassemble_info\n   /* Function called to check if a SYMBOL is can be displayed to the user.\n      This is used by some ports that want to hide special symbols when\n      displaying debugging outout.  */\n-  bfd_boolean (* symbol_is_valid)\n+  bool (* symbol_is_valid)\n     (asymbol *, struct disassemble_info *dinfo);\n \n   /* These are for buffer_read_memory.  */\n@@ -189,7 +189,7 @@ typedef struct disassemble_info\n   unsigned int skip_zeroes_at_end;\n \n   /* Whether the disassembler always needs the relocations.  */\n-  bfd_boolean disassembler_needs_relocs;\n+  bool disassembler_needs_relocs;\n \n   /* Results from instruction decoders.  Not all decoders yet support\n      this information.  This info is set each time an instruction is\n@@ -303,10 +303,10 @@ extern void print_arm_disassembler_options (FILE *);\n extern void print_arc_disassembler_options (FILE *);\n extern void print_s390_disassembler_options (FILE *);\n extern void print_wasm32_disassembler_options (FILE *);\n-extern bfd_boolean aarch64_symbol_is_valid (asymbol *, struct disassemble_info *);\n-extern bfd_boolean arm_symbol_is_valid (asymbol *, struct disassemble_info *);\n-extern bfd_boolean csky_symbol_is_valid (asymbol *, struct disassemble_info *);\n-extern bfd_boolean riscv_symbol_is_valid (asymbol *, struct disassemble_info *);\n+extern bool aarch64_symbol_is_valid (asymbol *, struct disassemble_info *);\n+extern bool arm_symbol_is_valid (asymbol *, struct disassemble_info *);\n+extern bool csky_symbol_is_valid (asymbol *, struct disassemble_info *);\n+extern bool riscv_symbol_is_valid (asymbol *, struct disassemble_info *);\n extern void disassemble_init_powerpc (struct disassemble_info *);\n extern void disassemble_init_s390 (struct disassemble_info *);\n extern void disassemble_init_wasm32 (struct disassemble_info *);\n@@ -320,7 +320,7 @@ extern const disasm_options_and_args_t *disassembler_options_s390 (void);\n    endian if BIG is true), bfd_mach value MACH, and ABFD, if that support\n    is available.  ABFD may be NULL.  */\n extern disassembler_ftype disassembler (enum bfd_architecture arc,\n-\t\t\t\t\tbfd_boolean big, unsigned long mach,\n+\t\t\t\t\tbool big, unsigned long mach,\n \t\t\t\t\tbfd *abfd);\n \n /* Amend the disassemble_info structure as necessary for the target architecture.\n@@ -381,7 +381,7 @@ extern int generic_symbol_at_address\n   (bfd_vma, struct disassemble_info *);\n \n /* Also always true.  */\n-extern bfd_boolean generic_symbol_is_valid\n+extern bool generic_symbol_is_valid\n   (asymbol *, struct disassemble_info *);\n \n /* Method to initialize a disassemble_info struct.  This should be"
    },
    {
      "sha": "f6d105d1e86ad610716469818b5ba981edade9e2",
      "filename": "include/elf/mmix.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/elf/mmix.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/elf/mmix.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/mmix.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -162,11 +162,11 @@ END_RELOC_NUMBERS (R_MMIX_max)\n #define MMO_SEC_DEBUGGING 0x10000\n \n #ifdef BFD_ARCH_SIZE\n-extern bfd_boolean _bfd_mmix_before_linker_allocation\n+extern bool _bfd_mmix_before_linker_allocation\n   (bfd *, struct bfd_link_info *);\n-extern bfd_boolean _bfd_mmix_after_linker_allocation\n+extern bool _bfd_mmix_after_linker_allocation\n   (bfd *, struct bfd_link_info *);\n-extern bfd_boolean _bfd_mmix_check_all_relocs\n+extern bool _bfd_mmix_check_all_relocs\n   (bfd *, struct bfd_link_info *);\n #endif\n "
    },
    {
      "sha": "78e9b4c764ea718691ea89837086a7d841d32c57",
      "filename": "include/elf/xtensa.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/elf/xtensa.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/elf/xtensa.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/xtensa.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -221,7 +221,7 @@ xtensa_read_table_entries (bfd *abfd,\n \t\t\t   asection *section,\n \t\t\t   property_table_entry **table_p,\n \t\t\t   const char *sec_name,\n-\t\t\t   bfd_boolean output_addr);\n+\t\t\t   bool output_addr);\n extern int\n xtensa_compute_fill_extra_space (property_table_entry *entry);\n "
    },
    {
      "sha": "f43df79d7c5aaa68ddf9b8f0590a7d49b04b11ea",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -753,14 +753,14 @@ typedef aarch64_opnd_qualifier_t\t\\\n \t  aarch64_opnd_qualifier_seq_t [AARCH64_MAX_OPND_NUM];\n \n /* FIXME: improve the efficiency.  */\n-static inline bfd_boolean\n+static inline bool\n empty_qualifier_sequence_p (const aarch64_opnd_qualifier_t *qualifiers)\n {\n   int i;\n   for (i = 0; i < AARCH64_MAX_OPND_NUM; ++i)\n     if (qualifiers[i] != AARCH64_OPND_QLF_NIL)\n-      return FALSE;\n-  return TRUE;\n+      return false;\n+  return true;\n }\n \n /*  Forward declare error reporting type.  */\n@@ -819,7 +819,7 @@ struct aarch64_opcode\n \n   /* If non-NULL, a function to verify that a given instruction is valid.  */\n   enum err_type (* verifier) (const struct aarch64_inst *, const aarch64_insn,\n-\t\t\t      bfd_vma, bfd_boolean, aarch64_operand_error *,\n+\t\t\t      bfd_vma, bool, aarch64_operand_error *,\n \t\t\t      struct aarch64_instr_sequence *);\n };\n \n@@ -897,13 +897,13 @@ extern aarch64_opcode aarch64_opcode_table[];\n #define C_MAX_ELEM (1U << 1)\n /* Next bit is 2.  */\n \n-static inline bfd_boolean\n+static inline bool\n alias_opcode_p (const aarch64_opcode *opcode)\n {\n   return (opcode->flags & F_ALIAS) != 0;\n }\n \n-static inline bfd_boolean\n+static inline bool\n opcode_has_alias (const aarch64_opcode *opcode)\n {\n   return (opcode->flags & F_HAS_ALIAS) != 0;\n@@ -916,13 +916,13 @@ opcode_priority (const aarch64_opcode *opcode)\n   return (opcode->flags >> 2) & 0x3;\n }\n \n-static inline bfd_boolean\n+static inline bool\n pseudo_opcode_p (const aarch64_opcode *opcode)\n {\n   return (opcode->flags & F_PSEUDO) != 0lu;\n }\n \n-static inline bfd_boolean\n+static inline bool\n optional_operand_p (const aarch64_opcode *opcode, unsigned int idx)\n {\n   return ((opcode->flags >> 12) & 0x7) == idx + 1;\n@@ -940,7 +940,7 @@ get_opcode_dependent_value (const aarch64_opcode *opcode)\n   return (opcode->flags >> 24) & 0x7;\n }\n \n-static inline bfd_boolean\n+static inline bool\n opcode_has_special_coder (const aarch64_opcode *opcode)\n {\n   return (opcode->flags & (F_SF | F_LSE_SZ | F_SIZEQ | F_FPTYPE | F_SSIZE | F_T\n@@ -974,9 +974,9 @@ typedef struct\n \n extern const aarch64_sys_reg aarch64_sys_regs [];\n extern const aarch64_sys_reg aarch64_pstatefields [];\n-extern bfd_boolean aarch64_sys_reg_deprecated_p (const uint32_t);\n-extern bfd_boolean aarch64_pstatefield_supported_p (const aarch64_feature_set,\n-\t\t\t\t\t\t    const aarch64_sys_reg *);\n+extern bool aarch64_sys_reg_deprecated_p (const uint32_t);\n+extern bool aarch64_pstatefield_supported_p (const aarch64_feature_set,\n+\t\t\t\t\t     const aarch64_sys_reg *);\n \n typedef struct\n {\n@@ -985,8 +985,8 @@ typedef struct\n   uint32_t flags ;\n } aarch64_sys_ins_reg;\n \n-extern bfd_boolean aarch64_sys_ins_reg_has_xt (const aarch64_sys_ins_reg *);\n-extern bfd_boolean\n+extern bool aarch64_sys_ins_reg_has_xt (const aarch64_sys_ins_reg *);\n+extern bool\n aarch64_sys_ins_reg_supported_p (const aarch64_feature_set,\n \t\t\t\t const char *reg_name, aarch64_insn,\n                                  uint32_t, aarch64_feature_set);\n@@ -1019,7 +1019,7 @@ enum aarch64_modifier_kind\n   AARCH64_MOD_MUL_VL,\n };\n \n-bfd_boolean\n+bool\n aarch64_extend_operator_p (enum aarch64_modifier_kind);\n \n enum aarch64_modifier_kind\n@@ -1242,7 +1242,7 @@ struct aarch64_operand_error\n   int index;\n   const char *error;\n   int data[3];\t/* Some data for extra information.  */\n-  bfd_boolean non_fatal;\n+  bool non_fatal;\n };\n \n /* AArch64 sequence structure used to track instructions with F_SCAN\n@@ -1262,7 +1262,7 @@ struct aarch64_instr_sequence\n \n /* Encoding entrypoint.  */\n \n-extern bfd_boolean\n+extern bool\n aarch64_opcode_encode (const aarch64_opcode *, const aarch64_inst *,\n \t\t       aarch64_insn *, aarch64_opnd_qualifier_t *,\n \t\t       aarch64_operand_error *, aarch64_instr_sequence *);\n@@ -1293,7 +1293,7 @@ extern aarch64_opnd_qualifier_t\n aarch64_get_expected_qualifier (const aarch64_opnd_qualifier_seq_t *, int,\n \t\t\t\tconst aarch64_opnd_qualifier_t, int);\n \n-extern bfd_boolean\n+extern bool\n aarch64_is_destructive_by_operands (const aarch64_opcode *);\n \n extern int\n@@ -1306,7 +1306,7 @@ extern int\n aarch64_zero_register_p (const aarch64_opnd_info *);\n \n extern enum err_type\n-aarch64_decode_insn (aarch64_insn, aarch64_inst *, bfd_boolean,\n+aarch64_decode_insn (aarch64_insn, aarch64_inst *, bool,\n \t\t     aarch64_operand_error *);\n \n extern void\n@@ -1326,7 +1326,7 @@ aarch64_get_operand_name (enum aarch64_opnd);\n extern const char *\n aarch64_get_operand_desc (enum aarch64_opnd);\n \n-extern bfd_boolean\n+extern bool\n aarch64_sve_dupm_mov_immediate_p (uint64_t, int);\n \n #ifdef DEBUG_AARCH64"
    },
    {
      "sha": "7c8b0ced330b6293a49b117634cc1de31c89850e",
      "filename": "include/opcode/arc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/arc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/arc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/arc.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -260,8 +260,7 @@ struct arc_operand\n      TRUE if this operand type can not actually be extracted from\n      this operand (i.e., the instruction does not match).  If the\n      operand is valid, *INVALID will not be changed.  */\n-  long long int (*extract) (unsigned long long instruction,\n-                            bfd_boolean *invalid);\n+  long long int (*extract) (unsigned long long instruction, bool *invalid);\n };\n \n /* Elements in the table are retrieved by indexing with values from"
    },
    {
      "sha": "f72c5db1fdd8642682eb195d19f5883597d436f3",
      "filename": "include/opcode/mips.h",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/mips.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/mips.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/mips.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -519,7 +519,7 @@ struct mips_int_operand\n   unsigned int shift;\n \n   /* True if the operand should be printed as hex rather than decimal.  */\n-  bfd_boolean print_hex;\n+  bool print_hex;\n };\n \n /* Uses a lookup table to describe a small integer operand.  */\n@@ -531,7 +531,7 @@ struct mips_mapped_int_operand\n   const int *int_map;\n \n   /* True if the operand should be printed as hex rather than decimal.  */\n-  bfd_boolean print_hex;\n+  bool print_hex;\n };\n \n /* An operand that encodes the most significant bit position of a bitfield.\n@@ -551,7 +551,7 @@ struct mips_msb_operand\n \n   /* True if the operand encodes MSB directly, false if it encodes\n      MSB - LSB.  */\n-  bfd_boolean add_lsb;\n+  bool add_lsb;\n \n   /* The maximum value of MSB + 1.  */\n   unsigned int opsize;\n@@ -576,10 +576,10 @@ struct mips_check_prev_operand\n {\n   struct mips_operand root;\n \n-  bfd_boolean greater_than_ok;\n-  bfd_boolean less_than_ok;\n-  bfd_boolean equal_ok;\n-  bfd_boolean zero_ok;\n+  bool greater_than_ok;\n+  bool less_than_ok;\n+  bool equal_ok;\n+  bool zero_ok;\n };\n \n /* Describes an operand that encodes a pair of registers.  */\n@@ -619,7 +619,7 @@ struct mips_pcrel_operand\n \n /* Return true if the assembly syntax allows OPERAND to be omitted.  */\n \n-static inline bfd_boolean\n+static inline bool\n mips_optional_operand_p (const struct mips_operand *operand)\n {\n   return (operand->type == OP_OPTIONAL_REG\n@@ -758,7 +758,7 @@ struct mips_opcode\n \n /* Return true if MO is an instruction that requires 32-bit encoding.  */\n \n-static inline bfd_boolean\n+static inline bool\n mips_opcode_32bit_p (const struct mips_opcode *mo)\n {\n   return mo->mask >> 16 != 0;\n@@ -1387,7 +1387,7 @@ static const unsigned int mips_isa_table[] = {\n \n /* Return true if the given CPU is included in INSN_* mask MASK.  */\n \n-static inline bfd_boolean\n+static inline bool\n cpu_is_member (int cpu, unsigned int mask)\n {\n   switch (cpu)\n@@ -1462,7 +1462,7 @@ cpu_is_member (int cpu, unsigned int mask)\n \t     || ((mask & INSN_ISA_MASK) == INSN_ISA64R6);\n \n     default:\n-      return FALSE;\n+      return false;\n     }\n }\n \n@@ -1472,7 +1472,7 @@ cpu_is_member (int cpu, unsigned int mask)\n    test, or zero if no CPU specific ISA test is desired.  Return true\n    if instruction INSN is available to the given ISA and CPU. */\n \n-static inline bfd_boolean\n+static inline bool\n opcode_is_member (const struct mips_opcode *insn, int isa, int ase, int cpu)\n {\n   if (!cpu_is_member (cpu, insn->exclusions))\n@@ -1482,17 +1482,17 @@ opcode_is_member (const struct mips_opcode *insn, int isa, int ase, int cpu)\n \t  && (insn->membership & INSN_ISA_MASK) != 0\n \t  && ((mips_isa_table[(isa & INSN_ISA_MASK) - 1]\n \t       >> ((insn->membership & INSN_ISA_MASK) - 1)) & 1) != 0)\n-\treturn TRUE;\n+\treturn true;\n \n       /* Test for ASE compatibility.  */\n       if ((ase & insn->ase) != 0)\n-\treturn TRUE;\n+\treturn true;\n \n       /* Test for processor-specific extensions.  */\n       if (cpu_is_member (cpu, insn->membership))\n-\treturn TRUE;\n+\treturn true;\n     }\n-  return FALSE;\n+  return false;\n }\n \n /* This is a list of macro expanded instructions.\n@@ -1941,7 +1941,7 @@ extern int bfd_mips_num_opcodes;\n    FP_D (never used)\n    */\n \n-extern const struct mips_operand *decode_mips16_operand (char, bfd_boolean);\n+extern const struct mips_operand *decode_mips16_operand (char, bool);\n extern const struct mips_opcode mips16_opcodes[];\n extern const int bfd_mips16_num_opcodes;\n "
    },
    {
      "sha": "0cf5d342cbfae51701c68759c68b3ab2c8b20598",
      "filename": "include/opcode/tic6x-opcode-table.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/tic6x-opcode-table.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/tic6x-opcode-table.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/tic6x-opcode-table.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -38,7 +38,7 @@\n #define FIX2(a, b) 2, { a, b }\n #define FIX3(a, b, c) 3, { a, b, c }\n #define FIX4(a, b, c, d) 4, { a, b, c, d }\n-#define OP0() 0, { { 0, 0, FALSE, 0, 0, 0, 0 } }\n+#define OP0() 0, { { 0, 0, false, 0, 0, 0, 0 } }\n #define OP1(a) 1, { a }\n #define OP2(a, b) 2, { a, b }\n #define OP3(a, b, c) 3, { a, b, c }"
    },
    {
      "sha": "019c376c7446aa5a0696e905d92d0bfc83bb071d",
      "filename": "include/opcode/tic6x.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/tic6x.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9193bc4285c232400a26448ca75095c44c13f637/include/opcode/tic6x.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/tic6x.h?ref=9193bc4285c232400a26448ca75095c44c13f637",
      "patch": "@@ -697,26 +697,26 @@ typedef struct\n   unsigned int header;\n \n   /* Whether each word uses compact instructions.  */\n-  bfd_boolean word_compact[7];\n+  bool word_compact[7];\n \n   /* Whether loads are protected.  */\n-  bfd_boolean prot;\n+  bool prot;\n \n   /* Whether instructions use the high register set.  */\n-  bfd_boolean rs;\n+  bool rs;\n \n   /* Data size.  */\n   unsigned int dsz;\n \n   /* Whether compact instructions in the S unit are decoded as\n      branches.  */\n-  bfd_boolean br;\n+  bool br;\n \n   /* Whether compact instructions saturate.  */\n-  bfd_boolean sat;\n+  bool sat;\n \n   /* P-bits.  */\n-  bfd_boolean p_bits[14];\n+  bool p_bits[14];\n } tic6x_fetch_packet_header;\n \n #ifdef __cplusplus"
    }
  ]
}