{
  "sha": "9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588",
  "node_id": "C_kwDOANOeidoAKDljM2Q3ZDliN2VkNWY0NDJmZWExZGRjYjQxZmMxZTA0ODhmNTE1ODg",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-13T00:29:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-13T03:42:43Z"
    },
    "message": "Move DT_RELR tag setting to elflink.c\n\nThis makes the code setting DT_RELR tags generally available.  Many\ntargets will be able to use the defaults.  Those that can't should set\nup sh_entsize for .relr.dyn output section before reaching the dynamic\ntag code in bfd_elf_final_link.\n\n\t* elflink.c (bfd_elf_final_link): Set up DT_RELR tags and sh_entsize.\n\t* elfxx-x86.c (_bfd_x86_elf_finish_dynamic_sections): Don't do any\n\tof that here.",
    "tree": {
      "sha": "b235b4cc382656f2fdc9e92832af28f08579b271",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b235b4cc382656f2fdc9e92832af28f08579b271"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0ae1246717ffbabda5d54be8def95f4424147c0f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ae1246717ffbabda5d54be8def95f4424147c0f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0ae1246717ffbabda5d54be8def95f4424147c0f"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 48,
    "deletions": 30
  },
  "files": [
    {
      "sha": "2677561478dd1ff9bc9d6e495c06948f2d22f049",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 48,
      "deletions": 5,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588",
      "patch": "@@ -12209,7 +12209,8 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n   struct elf_outext_info eoinfo;\n   bool merged;\n-  size_t relativecount = 0;\n+  size_t relativecount;\n+  size_t relr_entsize;\n   asection *reldyn = 0;\n   bfd_size_type amt;\n   asection *attr_section = NULL;\n@@ -13053,9 +13054,24 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       o->reloc_count = 0;\n     }\n \n+  relativecount = 0;\n   if (dynamic && info->combreloc && dynobj != NULL)\n     relativecount = elf_link_sort_relocs (abfd, info, &reldyn);\n \n+  relr_entsize = 0;\n+  if (htab->srelrdyn != NULL\n+      && htab->srelrdyn->output_section != NULL\n+      && htab->srelrdyn->size != 0)\n+    {\n+      asection *s = htab->srelrdyn->output_section;\n+      relr_entsize = elf_section_data (s)->this_hdr.sh_entsize;\n+      if (relr_entsize == 0)\n+\t{\n+\t  relr_entsize = bed->s->arch_size / 8;\n+\t  elf_section_data (s)->this_hdr.sh_entsize = relr_entsize;\n+\t}\n+    }\n+\n   /* If we are linking against a dynamic object, or generating a\n      shared library, finish up the dynamic linking information.  */\n   if (dynamic)\n@@ -13083,17 +13099,44 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t    default:\n \t      continue;\n \t    case DT_NULL:\n-\t      if (relativecount > 0 && dyncon + bed->s->sizeof_dyn < dynconend)\n+\t      if (relativecount != 0)\n \t\t{\n \t\t  switch (elf_section_data (reldyn)->this_hdr.sh_type)\n \t\t    {\n \t\t    case SHT_REL: dyn.d_tag = DT_RELCOUNT; break;\n \t\t    case SHT_RELA: dyn.d_tag = DT_RELACOUNT; break;\n-\t\t    default: continue;\n \t\t    }\n-\t\t  dyn.d_un.d_val = relativecount;\n+\t\t  if (dyn.d_tag != DT_NULL\n+\t\t      && dynconend - dyncon >= bed->s->sizeof_dyn)\n+\t\t    {\n+\t\t      dyn.d_un.d_val = relativecount;\n+\t\t      relativecount = 0;\n+\t\t      break;\n+\t\t    }\n \t\t  relativecount = 0;\n-\t\t  break;\n+\t\t}\n+\t      if (relr_entsize != 0)\n+\t\t{\n+\t\t  if (dynconend - dyncon >= 3 * bed->s->sizeof_dyn)\n+\t\t    {\n+\t\t      asection *s = htab->srelrdyn;\n+\t\t      dyn.d_tag = DT_RELR;\n+\t\t      dyn.d_un.d_ptr\n+\t\t\t= s->output_section->vma + s->output_offset;\n+\t\t      bed->s->swap_dyn_out (dynobj, &dyn, dyncon);\n+\t\t      dyncon += bed->s->sizeof_dyn;\n+\n+\t\t      dyn.d_tag = DT_RELRSZ;\n+\t\t      dyn.d_un.d_val = s->size;\n+\t\t      bed->s->swap_dyn_out (dynobj, &dyn, dyncon);\n+\t\t      dyncon += bed->s->sizeof_dyn;\n+\n+\t\t      dyn.d_tag = DT_RELRENT;\n+\t\t      dyn.d_un.d_val = relr_entsize;\n+\t\t      relr_entsize = 0;\n+\t\t      break;\n+\t\t    }\n+\t\t  relr_entsize = 0;\n \t\t}\n \t      continue;\n "
    },
    {
      "sha": "da8a488db3688b0b1324ed5344e5d7eca7c8e309",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 0,
      "deletions": 25,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=9c3d7d9b7ed5f442fea1ddcb41fc1e0488f51588",
      "patch": "@@ -2388,7 +2388,6 @@ _bfd_x86_elf_finish_dynamic_sections (bfd *output_bfd,\n   asection *sdyn;\n   bfd_byte *dyncon, *dynconend;\n   bfd_size_type sizeof_dyn;\n-  bfd_size_type dt_relr_bitmap_count;\n \n   bed = get_elf_backend_data (output_bfd);\n   htab = elf_x86_hash_table (info, bed->target_id);\n@@ -2447,8 +2446,6 @@ _bfd_x86_elf_finish_dynamic_sections (bfd *output_bfd,\n   if (sdyn == NULL || htab->elf.sgot == NULL)\n     abort ();\n \n-  dt_relr_bitmap_count = htab->dt_relr_bitmap.count;\n-\n   sizeof_dyn = bed->s->sizeof_dyn;\n   dyncon = sdyn->contents;\n   dynconend = sdyn->contents + sdyn->size;\n@@ -2467,28 +2464,6 @@ _bfd_x86_elf_finish_dynamic_sections (bfd *output_bfd,\n \t    break;\n \t  continue;\n \n-\tcase DT_NULL:\n-\t  if (dt_relr_bitmap_count != 0)\n-\t    {\n-\t      /* Convert 3 spare dynamic tags to DT_RELR, DT_RELRSZ and\n-\t\t DT_RELRENT for compact relative relocation.  */\n-\t      s = htab->elf.srelrdyn;\n-\t      dyn.d_tag = DT_RELR;\n-\t      dyn.d_un.d_ptr = s->output_section->vma + s->output_offset;\n-\t      (*bed->s->swap_dyn_out) (output_bfd, &dyn, dyncon);\n-\t      dyncon += sizeof_dyn;\n-\t      dyn.d_tag = DT_RELRSZ;\n-\t      dyn.d_un.d_val = s->size;\n-\t      (*bed->s->swap_dyn_out) (output_bfd, &dyn, dyncon);\n-\t      dyncon += sizeof_dyn;\n-\t      dyn.d_tag = DT_RELRENT;\n-\t      dyn.d_un.d_val = ABI_64_P (output_bfd) ? 8 : 4;\n-\t      elf_section_data (s->output_section)->this_hdr.sh_entsize\n-\t\t= dyn.d_un.d_val;\n-\t      dt_relr_bitmap_count = 0;\n-\t    }\n-\t  break;\n-\n \tcase DT_PLTGOT:\n \t  s = htab->elf.sgotplt;\n \t  dyn.d_un.d_ptr = s->output_section->vma + s->output_offset;"
    }
  ]
}