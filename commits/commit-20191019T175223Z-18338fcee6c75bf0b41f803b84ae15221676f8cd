{
  "sha": "18338fcee6c75bf0b41f803b84ae15221676f8cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTgzMzhmY2VlNmM3NWJmMGI0MWY4MDNiODRhZTE1MjIxNjc2ZjhjZA==",
  "commit": {
    "author": {
      "name": "John David Anglin",
      "email": "danglin@gcc.gnu.org",
      "date": "2019-10-19T17:41:36Z"
    },
    "committer": {
      "name": "John David Anglin",
      "email": "danglin@gcc.gnu.org",
      "date": "2019-10-19T17:52:23Z"
    },
    "message": "\t[bfd] Revise import stubs on hppa.\n\n\tThis commit updates the import stubs to leave the pointer to the\n\tfunction descriptor in register %r22.  This provides a backup\n\tmechanism for _dl_runtime_resolve to fixup descriptors during\n\tlazy binding.\n\n\tbfd/ChangeLog\n\t2019-10-19  John David Anglin  <danglin@gcc.gnu.org>\n\n\t\t* elf32-hppa.c: Revise import stub sequences.\n\t\t(LONG_BRANCH_STUB_SIZE): Define.\n\t\t(LONG_BRANCH_SHARED_STUB_SIZE): Define.\n\t\t(IMPORT_STUB_SIZE): Define.\n\t\t(IMPORT_SHARED_STUB_SIZE): Define.\n\t\t(EXPORT_STUB_SIZE): Define.\n\t\t(plt_stub): Revise to not use register %r22.\n\t\t(LDO_R1_R22): Define.\n\t\t(LDW_R22_R21): Define.\n\t\t(LDW_R22_R19): Define.\n\t\t(hppa_build_one_stub): Update stub generation and use new defines.\n\t\t(hppa_size_one_stub): Likewise.",
    "tree": {
      "sha": "62f88dce5f2b25ba32688cfe26196ac3da816217",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62f88dce5f2b25ba32688cfe26196ac3da816217"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/18338fcee6c75bf0b41f803b84ae15221676f8cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18338fcee6c75bf0b41f803b84ae15221676f8cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/18338fcee6c75bf0b41f803b84ae15221676f8cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18338fcee6c75bf0b41f803b84ae15221676f8cd/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "1c1a69dcaeb01037f3191a5ebf1b2f9c0dcbe7a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c1a69dcaeb01037f3191a5ebf1b2f9c0dcbe7a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c1a69dcaeb01037f3191a5ebf1b2f9c0dcbe7a3"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 66,
    "deletions": 43
  },
  "files": [
    {
      "sha": "44790fb16b7c3965bc566b833c3c43b86d6db90e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/18338fcee6c75bf0b41f803b84ae15221676f8cd/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/18338fcee6c75bf0b41f803b84ae15221676f8cd/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=18338fcee6c75bf0b41f803b84ae15221676f8cd",
      "patch": "@@ -1,3 +1,18 @@\n+2019-10-19  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* elf32-hppa.c: Revise import stub sequences.\n+\t(LONG_BRANCH_STUB_SIZE): Define.\n+\t(LONG_BRANCH_SHARED_STUB_SIZE): Define.\n+\t(IMPORT_STUB_SIZE): Define.\n+\t(IMPORT_SHARED_STUB_SIZE): Define.\n+\t(EXPORT_STUB_SIZE): Define.\n+\t(plt_stub): Revise to not use register %r22.\n+\t(LDO_R1_R22): Define.\n+\t(LDW_R22_R21): Define.\n+\t(LDW_R22_R19): Define.\n+\t(hppa_build_one_stub): Update stub generation and use new defines.\n+\t(hppa_size_one_stub): Likewise.\n+\n 2019-10-17  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfnn-riscv.c (riscv_elf_relocate_section): Report the error message"
    },
    {
      "sha": "8a19c1937081f2378ac14ad9f13ef66282dbefb3",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 51,
      "deletions": 43,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/18338fcee6c75bf0b41f803b84ae15221676f8cd/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/18338fcee6c75bf0b41f803b84ae15221676f8cd/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=18338fcee6c75bf0b41f803b84ae15221676f8cd",
      "patch": "@@ -71,34 +71,38 @@\n \n    Import stub to call shared library routine from normal object file\n    (single sub-space version)\n-   :\t\taddil LR'lt_ptr+ltoff,%dp\t; get procedure entry point\n-   :\t\tldw RR'lt_ptr+ltoff(%r1),%r21\n+   :\t\taddil LR'lt_ptr+ltoff,%dp\t; get PLT address\n+   :\t\tldo RR'lt_ptr+ltoff(%r1),%r22   ; \n+   :\t\tldw 0(%r22),%r21\t\t; get procedure entry point\n    :\t\tbv %r0(%r21)\n-   :\t\tldw RR'lt_ptr+ltoff+4(%r1),%r19\t; get new dlt value.\n+   :\t\tldw 4(%r22),%r19\t\t; get new dlt value.\n \n    Import stub to call shared library routine from shared library\n    (single sub-space version)\n-   :\t\taddil LR'ltoff,%r19\t\t; get procedure entry point\n-   :\t\tldw RR'ltoff(%r1),%r21\n+   :\t\taddil LR'ltoff,%r19\t\t; get PLT address\n+   :\t\tldo RR'ltoff(%r1),%r22\n+   :\t\tldw 0(%r22),%r21\t\t; get procedure entry point\n    :\t\tbv %r0(%r21)\n-   :\t\tldw RR'ltoff+4(%r1),%r19\t; get new dlt value.\n+   :\t\tldw 4(%r22),%r19\t\t; get new dlt value.\n \n    Import stub to call shared library routine from normal object file\n    (multiple sub-space support)\n-   :\t\taddil LR'lt_ptr+ltoff,%dp\t; get procedure entry point\n-   :\t\tldw RR'lt_ptr+ltoff(%r1),%r21\n-   :\t\tldw RR'lt_ptr+ltoff+4(%r1),%r19\t; get new dlt value.\n-   :\t\tldsid (%r21),%r1\n+   :\t\taddil LR'lt_ptr+ltoff,%dp\t; get PLT address\n+   :\t\tldo RR'lt_ptr+ltoff(%r1),%r22   ; \n+   :\t\tldw 0(%r22),%r21\t\t; get procedure entry point\n+   :\t\tldsid (%r21),%r1\t\t; get target sid\n+   :\t\tldw 4(%r22),%r19\t\t; get new dlt value.\n    :\t\tmtsp %r1,%sr0\n    :\t\tbe 0(%sr0,%r21)\t\t\t; branch to target\n    :\t\tstw %rp,-24(%sp)\t\t; save rp\n \n    Import stub to call shared library routine from shared library\n    (multiple sub-space support)\n-   :\t\taddil LR'ltoff,%r19\t\t; get procedure entry point\n-   :\t\tldw RR'ltoff(%r1),%r21\n-   :\t\tldw RR'ltoff+4(%r1),%r19\t; get new dlt value.\n-   :\t\tldsid (%r21),%r1\n+   :\t\taddil LR'ltoff,%r19\t\t; get PLT address\n+   :\t\tldo RR'ltoff(%r1),%r22\n+   :\t\tldw 0(%r22),%r21\t\t; get procedure entry point\n+   :\t\tldsid (%r21),%r1\t\t; get target sid\n+   :\t\tldw 4(%r22),%r19\t\t; get new dlt value.\n    :\t\tmtsp %r1,%sr0\n    :\t\tbe 0(%sr0,%r21)\t\t\t; branch to target\n    :\t\tstw %rp,-24(%sp)\t\t; save rp\n@@ -136,12 +140,17 @@\n \n #define PLT_ENTRY_SIZE 8\n #define GOT_ENTRY_SIZE 4\n+#define LONG_BRANCH_STUB_SIZE 8\n+#define LONG_BRANCH_SHARED_STUB_SIZE 12\n+#define IMPORT_STUB_SIZE 20\n+#define IMPORT_SHARED_STUB_SIZE 32\n+#define EXPORT_STUB_SIZE 24\n #define ELF_DYNAMIC_INTERPRETER \"/lib/ld.so.1\"\n \n static const bfd_byte plt_stub[] =\n {\n-  0x0e, 0x80, 0x10, 0x96,  /* 1: ldw\t0(%r20),%r22\t\t*/\n-  0xea, 0xc0, 0xc0, 0x00,  /*    bv\t%r0(%r22)\t\t*/\n+  0x0e, 0x80, 0x10, 0x95,  /* 1: ldw\t0(%r20),%r21\t\t*/\n+  0xea, 0xa0, 0xc0, 0x00,  /*    bv\t%r0(%r21)\t\t*/\n   0x0e, 0x88, 0x10, 0x95,  /*    ldw\t4(%r20),%r21\t\t*/\n #define PLT_STUB_ENTRY (3*4)\n   0xea, 0x9f, 0x1f, 0xdd,  /*    b,l\t1b,%r20\t\t\t*/\n@@ -662,6 +671,10 @@ hppa_type_of_stub (asection *input_sec,\n #define ADDIL_R19\t0x2a600000\t/* addil LR'XXX,%r19,%r1\t*/\n #define LDW_R1_DP\t0x483b0000\t/* ldw   RR'XXX(%sr0,%r1),%dp\t*/\n \n+#define LDO_R1_R22\t0x34360000\t/* ldo   RR'XXX(%r1),%r22\t*/\n+#define LDW_R22_R21\t0x0ec01095\t/* ldw   0(%r22),%r21\t\t*/\n+#define LDW_R22_R19\t0x0ec81093\t/* ldw   4(%r22),%r19\t\t*/\n+\n #define LDSID_R21_R1\t0x02a010a1\t/* ldsid (%sr0,%r21),%r1\t*/\n #define MTSP_R1\t\t0x00011820\t/* mtsp  %r1,%sr0\t\t*/\n #define BE_SR0_R21\t0xe2a00000\t/* be    0(%sr0,%r21)\t\t*/\n@@ -734,7 +747,7 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n       insn = hppa_rebuild_insn ((int) BE_SR4_R1, val, 17);\n       bfd_put_32 (stub_bfd, insn, loc + 4);\n \n-      size = 8;\n+      size = LONG_BRANCH_STUB_SIZE;\n       break;\n \n     case hppa_stub_long_branch_shared:\n@@ -756,7 +769,7 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n       val = hppa_field_adjust (sym_value, (bfd_signed_vma) -8, e_rrsel) >> 2;\n       insn = hppa_rebuild_insn ((int) BE_SR4_R1, val, 17);\n       bfd_put_32 (stub_bfd, insn, loc + 8);\n-      size = 12;\n+      size = LONG_BRANCH_SHARED_STUB_SIZE;\n       break;\n \n     case hppa_stub_import:\n@@ -776,40 +789,35 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n       if (hsh->stub_type == hppa_stub_import_shared)\n \tinsn = ADDIL_R19;\n #endif\n+\n+      /* Load function descriptor address into register %r22.  It is\n+\t sometimes needed for lazy binding.  */\n       val = hppa_field_adjust (sym_value, 0, e_lrsel),\n       insn = hppa_rebuild_insn ((int) insn, val, 21);\n       bfd_put_32 (stub_bfd, insn, loc);\n \n-      /* It is critical to use lrsel/rrsel here because we are using\n-\t two different offsets (+0 and +4) from sym_value.  If we use\n-\t lsel/rsel then with unfortunate sym_values we will round\n-\t sym_value+4 up to the next 2k block leading to a mis-match\n-\t between the lsel and rsel value.  */\n       val = hppa_field_adjust (sym_value, 0, e_rrsel);\n-      insn = hppa_rebuild_insn ((int) LDW_R1_R21, val, 14);\n+      insn = hppa_rebuild_insn ((int) LDO_R1_R22, val, 14);\n       bfd_put_32 (stub_bfd, insn, loc + 4);\n \n+      bfd_put_32 (stub_bfd, (bfd_vma) LDW_R22_R21, loc + 8);\n+\n       if (htab->multi_subspace)\n \t{\n-\t  val = hppa_field_adjust (sym_value, (bfd_signed_vma) 4, e_rrsel);\n-\t  insn = hppa_rebuild_insn ((int) LDW_R1_DLT, val, 14);\n-\t  bfd_put_32 (stub_bfd, insn, loc + 8);\n-\n \t  bfd_put_32 (stub_bfd, (bfd_vma) LDSID_R21_R1, loc + 12);\n-\t  bfd_put_32 (stub_bfd, (bfd_vma) MTSP_R1,      loc + 16);\n-\t  bfd_put_32 (stub_bfd, (bfd_vma) BE_SR0_R21,   loc + 20);\n-\t  bfd_put_32 (stub_bfd, (bfd_vma) STW_RP,       loc + 24);\n+\t  bfd_put_32 (stub_bfd, (bfd_vma) LDW_R22_R19,  loc + 16);\n+\t  bfd_put_32 (stub_bfd, (bfd_vma) MTSP_R1,      loc + 20);\n+\t  bfd_put_32 (stub_bfd, (bfd_vma) BE_SR0_R21,   loc + 24);\n+\t  bfd_put_32 (stub_bfd, (bfd_vma) STW_RP,       loc + 28);\n \n-\t  size = 28;\n+\t  size = IMPORT_SHARED_STUB_SIZE;\n \t}\n       else\n \t{\n-\t  bfd_put_32 (stub_bfd, (bfd_vma) BV_R0_R21, loc + 8);\n-\t  val = hppa_field_adjust (sym_value, (bfd_signed_vma) 4, e_rrsel);\n-\t  insn = hppa_rebuild_insn ((int) LDW_R1_DLT, val, 14);\n-\t  bfd_put_32 (stub_bfd, insn, loc + 12);\n+\t  bfd_put_32 (stub_bfd, (bfd_vma) BV_R0_R21, loc + 12);\n+\t  bfd_put_32 (stub_bfd, (bfd_vma) LDW_R22_R19, loc + 16);\n \n-\t  size = 16;\n+\t  size = IMPORT_STUB_SIZE;\n \t}\n \n       break;\n@@ -858,7 +866,7 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n       hsh->hh->eh.root.u.def.section = stub_sec;\n       hsh->hh->eh.root.u.def.value = stub_sec->size;\n \n-      size = 24;\n+      size = EXPORT_STUB_SIZE;\n       break;\n \n     default:\n@@ -906,17 +914,17 @@ hppa_size_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n   htab = in_arg;\n \n   if (hsh->stub_type == hppa_stub_long_branch)\n-    size = 8;\n+    size = LONG_BRANCH_STUB_SIZE;\n   else if (hsh->stub_type == hppa_stub_long_branch_shared)\n-    size = 12;\n+    size = LONG_BRANCH_SHARED_STUB_SIZE;\n   else if (hsh->stub_type == hppa_stub_export)\n-    size = 24;\n+    size = EXPORT_STUB_SIZE;\n   else /* hppa_stub_import or hppa_stub_import_shared.  */\n     {\n       if (htab->multi_subspace)\n-\tsize = 28;\n+\tsize = IMPORT_SHARED_STUB_SIZE;\n       else\n-\tsize = 16;\n+\tsize = IMPORT_STUB_SIZE;\n     }\n \n   hsh->stub_sec->size += size;"
    }
  ]
}