{
  "sha": "1942a0483653cd8906058148001fc5b091f2191c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTk0MmEwNDgzNjUzY2Q4OTA2MDU4MTQ4MDAxZmM1YjA5MWYyMTkxYw==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-15T01:36:51Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-15T09:41:18Z"
    },
    "message": "RISC-V: Indent and GNU coding standards tidy, also aligned the code.\n\nbfd/\n    * elfnn-riscv.c: Indent, labels and GNU coding standards tidy,\n    also aligned the code.\ngas/\n    * config/tc-riscv.c: Indent and GNU coding standards tidy,\n    also aligned the code.\n    * config/tc-riscv.h: Likewise.\ninclude/\n    * opcode/riscv.h: Indent and GNU coding standards tidy,\n    also aligned the code.\nopcodes/\n    * riscv-opc.c (riscv_gpr_names_abi): Aligned the code.\n    (riscv_fpr_names_abi): Likewise.\n    (riscv_opcodes): Likewise.\n    (riscv_insn_types): Likewise.",
    "tree": {
      "sha": "f9150088b73b7a6ad4ec1155ccbde0982496b73d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f9150088b73b7a6ad4ec1155ccbde0982496b73d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1942a0483653cd8906058148001fc5b091f2191c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1942a0483653cd8906058148001fc5b091f2191c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1942a0483653cd8906058148001fc5b091f2191c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1942a0483653cd8906058148001fc5b091f2191c/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "b800637e7631482d1bece2463b7c89e2d873d9d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b800637e7631482d1bece2463b7c89e2d873d9d0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b800637e7631482d1bece2463b7c89e2d873d9d0"
    }
  ],
  "stats": {
    "total": 1866,
    "additions": 944,
    "deletions": 922
  },
  "files": [
    {
      "sha": "bec5b4f9ef91087e49bb376b51450725c803aee1",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfnn-riscv.c: Indent, labels and GNU coding standards tidy,\n+\talso aligned the code.\n+\n 2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfnn-riscv.c (riscv_merge_attributes): Fix typos of messages."
    },
    {
      "sha": "bf700e9defdcd25c5707814025939d2cfea7b663",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 108,
      "deletions": 109,
      "changes": 217,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -69,16 +69,16 @@ struct riscv_elf_link_hash_entry\n {\n   struct elf_link_hash_entry elf;\n \n-#define GOT_UNKNOWN     0\n-#define GOT_NORMAL      1\n-#define GOT_TLS_GD      2\n-#define GOT_TLS_IE      4\n-#define GOT_TLS_LE      8\n+#define GOT_UNKNOWN\t0\n+#define GOT_NORMAL\t1\n+#define GOT_TLS_GD\t2\n+#define GOT_TLS_IE\t4\n+#define GOT_TLS_LE\t8\n   char tls_type;\n };\n \n #define riscv_elf_hash_entry(ent) \\\n-  ((struct riscv_elf_link_hash_entry *)(ent))\n+  ((struct riscv_elf_link_hash_entry *) (ent))\n \n struct _bfd_riscv_elf_obj_tdata\n {\n@@ -1738,14 +1738,14 @@ typedef struct\n \n typedef struct riscv_pcrel_lo_reloc\n {\n-  asection *\t\t\t input_section;\n-  struct bfd_link_info *\t info;\n-  reloc_howto_type *\t\t howto;\n-  const Elf_Internal_Rela *\t reloc;\n-  bfd_vma\t\t\t addr;\n-  const char *\t\t\t name;\n-  bfd_byte *\t\t\t contents;\n-  struct riscv_pcrel_lo_reloc *\t next;\n+  asection *input_section;\n+  struct bfd_link_info *info;\n+  reloc_howto_type *howto;\n+  const Elf_Internal_Rela *reloc;\n+  bfd_vma addr;\n+  const char *name;\n+  bfd_byte *contents;\n+  struct riscv_pcrel_lo_reloc *next;\n } riscv_pcrel_lo_reloc;\n \n typedef struct\n@@ -1771,7 +1771,6 @@ riscv_pcrel_reloc_eq (const void *entry1, const void *entry2)\n static bfd_boolean\n riscv_init_pcrel_relocs (riscv_pcrel_relocs *p)\n {\n-\n   p->lo_relocs = NULL;\n   p->hi_relocs = htab_create (1024, riscv_pcrel_reloc_hash,\n \t\t\t      riscv_pcrel_reloc_eq, free);\n@@ -1824,11 +1823,11 @@ riscv_zero_pcrel_hi_reloc (Elf_Internal_Rela *rel,\n   if (ARCH_SIZE > 32 && !VALID_UTYPE_IMM (RISCV_CONST_HIGH_PART (addr)))\n     return FALSE;\n \n-  rel->r_info = ELFNN_R_INFO(addr, R_RISCV_HI20);\n+  rel->r_info = ELFNN_R_INFO (addr, R_RISCV_HI20);\n \n-  bfd_vma insn = riscv_get_insn(howto->bitsize, contents + rel->r_offset);\n+  bfd_vma insn = riscv_get_insn (howto->bitsize, contents + rel->r_offset);\n   insn = (insn & ~MASK_AUIPC) | MATCH_LUI;\n-  riscv_put_insn(howto->bitsize, insn, contents + rel->r_offset);\n+  riscv_put_insn (howto->bitsize, insn, contents + rel->r_offset);\n   return TRUE;\n }\n \n@@ -1882,7 +1881,7 @@ riscv_resolve_pcrel_lo_relocs (riscv_pcrel_relocs *p)\n       riscv_pcrel_hi_reloc *entry = htab_find (p->hi_relocs, &search);\n       if (entry == NULL\n \t  /* Check for overflow into bit 11 when adding reloc addend.  */\n-\t  || (! (entry->value & 0x800)\n+\t  || (!(entry->value & 0x800)\n \t      && ((entry->value + r->reloc->r_addend) & 0x800)))\n \t{\n \t  char *string = (entry == NULL\n@@ -2236,7 +2235,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\tgoto do_relocation;\n \n \t    default:\n- bad_ifunc_reloc:\n+\t    bad_ifunc_reloc:\n \t      if (h->root.root.string)\n \t\tname = h->root.root.string;\n \t      else\n@@ -2254,7 +2253,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t}\n \n- skip_ifunc:\n+    skip_ifunc:\n       if (h != NULL)\n \tname = h->root.root.string;\n       else\n@@ -2538,7 +2537,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\t   || (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n \t\t       && !resolved_to_zero)\n \t\t   || h->root.type != bfd_link_hash_undefweak)\n-\t       && (! howto->pc_relative\n+\t       && (!howto->pc_relative\n \t\t   || !SYMBOL_CALLS_LOCAL (info, h)))\n \t      || (!bfd_link_pic (info)\n \t\t  && h != NULL\n@@ -2656,14 +2655,14 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\t\t  BFD_ASSERT (! unresolved_reloc);\n \t\t\t  bfd_put_NN (output_bfd,\n \t\t\t\t      dtpoff (info, relocation),\n-\t\t\t\t      (htab->elf.sgot->contents + off +\n-\t\t\t\t       RISCV_ELF_WORD_BYTES));\n+\t\t\t\t      (htab->elf.sgot->contents\n+\t\t\t\t       + off + RISCV_ELF_WORD_BYTES));\n \t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  bfd_put_NN (output_bfd, 0,\n-\t\t\t\t      (htab->elf.sgot->contents + off +\n-\t\t\t\t       RISCV_ELF_WORD_BYTES));\n+\t\t\t\t      (htab->elf.sgot->contents\n+\t\t\t\t       + off + RISCV_ELF_WORD_BYTES));\n \t\t\t  outrel.r_info = ELFNN_R_INFO (indx, R_RISCV_TLS_DTPRELNN);\n \t\t\t  outrel.r_offset += RISCV_ELF_WORD_BYTES;\n \t\t\t  riscv_elf_append_rela (output_bfd, htab->elf.srelgot, &outrel);\n@@ -2680,8 +2679,8 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\t\t\t  htab->elf.sgot->contents + off);\n \t\t      bfd_put_NN (output_bfd,\n \t\t\t\t  dtpoff (info, relocation),\n-\t\t\t\t  (htab->elf.sgot->contents + off +\n-\t\t\t\t   RISCV_ELF_WORD_BYTES));\n+\t\t\t\t  (htab->elf.sgot->contents\n+\t\t\t\t   + off + RISCV_ELF_WORD_BYTES));\n \t\t   }\n \t\t}\n \n@@ -2692,7 +2691,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\t      bfd_put_NN (output_bfd, 0,\n \t\t\t\t  htab->elf.sgot->contents + off + ie_off);\n \t\t      outrel.r_offset = sec_addr (htab->elf.sgot)\n-\t\t\t\t       + off + ie_off;\n+\t\t\t\t\t+ off + ie_off;\n \t\t      outrel.r_addend = 0;\n \t\t      if (indx == 0)\n \t\t\toutrel.r_addend = tpoff (info, relocation);\n@@ -2999,7 +2998,7 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t      else\n \t\t{\n \t\t  /* Generate R_RISCV_NN.  */\n-\t\t  BFD_ASSERT((h->got.offset & 1) == 0);\n+\t\t  BFD_ASSERT ((h->got.offset & 1) == 0);\n \t\t  BFD_ASSERT (h->dynindx != -1);\n \t\t  rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_NN);\n \t\t  rela.r_addend = 0;\n@@ -3008,7 +3007,7 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t  else if (bfd_link_pic (info))\n \t    {\n \t      /* Generate R_RISCV_NN.  */\n-\t      BFD_ASSERT((h->got.offset & 1) == 0);\n+\t      BFD_ASSERT ((h->got.offset & 1) == 0);\n \t      BFD_ASSERT (h->dynindx != -1);\n \t      rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_NN);\n \t      rela.r_addend = 0;\n@@ -3040,7 +3039,7 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t     or a pie link, or the symbol was forced to be local because\n \t     of a version file.  The entry in the global offset table will\n \t     already have been initialized in the relocate_section function.  */\n-\t  BFD_ASSERT((h->got.offset & 1) != 0);\n+\t  BFD_ASSERT ((h->got.offset & 1) != 0);\n \t  asection *sec = h->root.u.def.section;\n \t  rela.r_info = ELFNN_R_INFO (0, R_RISCV_RELATIVE);\n \t  rela.r_addend = (h->root.u.def.value\n@@ -3049,7 +3048,7 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t}\n       else\n \t{\n-\t  BFD_ASSERT((h->got.offset & 1) == 0);\n+\t  BFD_ASSERT ((h->got.offset & 1) == 0);\n \t  BFD_ASSERT (h->dynindx != -1);\n \t  rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_NN);\n \t  rela.r_addend = 0;\n@@ -3499,18 +3498,18 @@ riscv_merge_multi_letter_ext (bfd *ibfd,\n \t}\n     }\n \n-  if (in || out) {\n-    /* If we're here, either `in' or `out' is running longer than\n-       the other. So, we need to append the corresponding tail.  */\n-    tail = in ? in : out;\n-\n-    while (tail)\n-      {\n-\triscv_add_subset (&merged_subsets, tail->name, tail->major_version,\n-\t\t\t  tail->minor_version);\n-\ttail = tail->next;\n-      }\n-  }\n+  if (in || out)\n+    {\n+      /* If we're here, either `in' or `out' is running longer than\n+\t the other. So, we need to append the corresponding tail.  */\n+      tail = in ? in : out;\n+      while (tail)\n+\t{\n+\t  riscv_add_subset (&merged_subsets, tail->name, tail->major_version,\n+\t\t\t    tail->minor_version);\n+\t  tail = tail->next;\n+\t}\n+    }\n \n   return TRUE;\n }\n@@ -4025,14 +4024,14 @@ riscv_free_pcgp_relocs (riscv_pcgp_relocs *p,\n   riscv_pcgp_hi_reloc *c;\n   riscv_pcgp_lo_reloc *l;\n \n-  for (c = p->hi; c != NULL;)\n+  for (c = p->hi; c != NULL; )\n     {\n       riscv_pcgp_hi_reloc *next = c->next;\n       free (c);\n       c = next;\n     }\n \n-  for (l = p->lo; l != NULL;)\n+  for (l = p->lo; l != NULL; )\n     {\n       riscv_pcgp_lo_reloc *next = l->next;\n       free (l);\n@@ -4050,7 +4049,7 @@ riscv_record_pcgp_hi_reloc (riscv_pcgp_relocs *p, bfd_vma hi_sec_off,\n \t\t\t    unsigned hi_sym, asection *sym_sec,\n \t\t\t    bfd_boolean undefined_weak)\n {\n-  riscv_pcgp_hi_reloc *new = bfd_malloc (sizeof(*new));\n+  riscv_pcgp_hi_reloc *new = bfd_malloc (sizeof (*new));\n   if (!new)\n     return FALSE;\n   new->hi_sec_off = hi_sec_off;\n@@ -4068,7 +4067,7 @@ riscv_record_pcgp_hi_reloc (riscv_pcgp_relocs *p, bfd_vma hi_sec_off,\n    This is used by a lo part reloc to find the corresponding hi part reloc.  */\n \n static riscv_pcgp_hi_reloc *\n-riscv_find_pcgp_hi_reloc(riscv_pcgp_relocs *p, bfd_vma hi_sec_off)\n+riscv_find_pcgp_hi_reloc (riscv_pcgp_relocs *p, bfd_vma hi_sec_off)\n {\n   riscv_pcgp_hi_reloc *c;\n \n@@ -4084,7 +4083,7 @@ riscv_find_pcgp_hi_reloc(riscv_pcgp_relocs *p, bfd_vma hi_sec_off)\n static bfd_boolean\n riscv_record_pcgp_lo_reloc (riscv_pcgp_relocs *p, bfd_vma hi_sec_off)\n {\n-  riscv_pcgp_lo_reloc *new = bfd_malloc (sizeof(*new));\n+  riscv_pcgp_lo_reloc *new = bfd_malloc (sizeof (*new));\n   if (!new)\n     return FALSE;\n   new->hi_sec_off = hi_sec_off;\n@@ -4129,7 +4128,7 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n {\n   bfd_byte *contents = elf_section_data (sec)->this_hdr.contents;\n   bfd_vma foff = symval - (sec_addr (sec) + rel->r_offset);\n-  bfd_boolean near_zero = (symval + RISCV_IMM_REACH/2) < RISCV_IMM_REACH;\n+  bfd_boolean near_zero = (symval + RISCV_IMM_REACH / 2) < RISCV_IMM_REACH;\n   bfd_vma auipc, jalr;\n   int rd, r_type, len = 4, rvc = elf_elfheader (abfd)->e_flags & EF_RISCV_RVC;\n \n@@ -4424,17 +4423,17 @@ _bfd_riscv_relax_align (bfd *abfd, asection *sec,\n /* Relax PC-relative references to GP-relative references.  */\n \n static bfd_boolean\n-_bfd_riscv_relax_pc  (bfd *abfd ATTRIBUTE_UNUSED,\n-\t\t      asection *sec,\n-\t\t      asection *sym_sec,\n-\t\t      struct bfd_link_info *link_info,\n-\t\t      Elf_Internal_Rela *rel,\n-\t\t      bfd_vma symval,\n-\t\t      bfd_vma max_alignment,\n-\t\t      bfd_vma reserve_size,\n-\t\t      bfd_boolean *again ATTRIBUTE_UNUSED,\n-\t\t      riscv_pcgp_relocs *pcgp_relocs,\n-\t\t      bfd_boolean undefined_weak)\n+_bfd_riscv_relax_pc (bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t     asection *sec,\n+\t\t     asection *sym_sec,\n+\t\t     struct bfd_link_info *link_info,\n+\t\t     Elf_Internal_Rela *rel,\n+\t\t     bfd_vma symval,\n+\t\t     bfd_vma max_alignment,\n+\t\t     bfd_vma reserve_size,\n+\t\t     bfd_boolean *again ATTRIBUTE_UNUSED,\n+\t\t     riscv_pcgp_relocs *pcgp_relocs,\n+\t\t     bfd_boolean undefined_weak)\n {\n   bfd_byte *contents = elf_section_data (sec)->this_hdr.contents;\n   bfd_vma gp = riscv_global_pointer_value (link_info);\n@@ -4588,10 +4587,10 @@ _bfd_riscv_relax_delete (bfd *abfd,\n \t\t\t riscv_pcgp_relocs *pcgp_relocs ATTRIBUTE_UNUSED,\n \t\t\t bfd_boolean undefined_weak ATTRIBUTE_UNUSED)\n {\n-  if (!riscv_relax_delete_bytes(abfd, sec, rel->r_offset, rel->r_addend,\n-\t\t\t\tlink_info))\n+  if (!riscv_relax_delete_bytes (abfd, sec, rel->r_offset, rel->r_addend,\n+\t\t\t\t link_info))\n     return FALSE;\n-  rel->r_info = ELFNN_R_INFO(0, R_RISCV_NONE);\n+  rel->r_info = ELFNN_R_INFO (0, R_RISCV_NONE);\n   return TRUE;\n }\n \n@@ -4677,7 +4676,7 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n \t    continue;\n \t}\n       else if (info->relax_pass == 1\n-\t       && !bfd_link_pic(info)\n+\t       && !bfd_link_pic (info)\n \t       && (type == R_RISCV_PCREL_HI20\n \t\t   || type == R_RISCV_PCREL_LO12_I\n \t\t   || type == R_RISCV_PCREL_LO12_S))\n@@ -4860,7 +4859,7 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n  fail:\n   if (relocs != data->relocs)\n     free (relocs);\n-  riscv_free_pcgp_relocs(&pcgp_relocs, abfd, sec);\n+  riscv_free_pcgp_relocs (&pcgp_relocs, abfd, sec);\n \n   return ret;\n }\n@@ -4975,57 +4974,57 @@ riscv_elf_obj_attrs_arg_type (int tag)\n   return (tag & 1) != 0 ? ATTR_TYPE_FLAG_STR_VAL : ATTR_TYPE_FLAG_INT_VAL;\n }\n \n-#define TARGET_LITTLE_SYM\t\triscv_elfNN_vec\n-#define TARGET_LITTLE_NAME\t\t\"elfNN-littleriscv\"\n-#define TARGET_BIG_SYM\t\t\triscv_elfNN_be_vec\n-#define TARGET_BIG_NAME\t\t\t\"elfNN-bigriscv\"\n+#define TARGET_LITTLE_SYM\t\t\triscv_elfNN_vec\n+#define TARGET_LITTLE_NAME\t\t\t\"elfNN-littleriscv\"\n+#define TARGET_BIG_SYM\t\t\t\triscv_elfNN_be_vec\n+#define TARGET_BIG_NAME\t\t\t\t\"elfNN-bigriscv\"\n \n-#define elf_backend_reloc_type_class\t     riscv_reloc_type_class\n+#define elf_backend_reloc_type_class\t\triscv_reloc_type_class\n \n-#define bfd_elfNN_bfd_reloc_name_lookup\t     riscv_reloc_name_lookup\n-#define bfd_elfNN_bfd_link_hash_table_create riscv_elf_link_hash_table_create\n-#define bfd_elfNN_bfd_reloc_type_lookup\t     riscv_reloc_type_lookup\n+#define bfd_elfNN_bfd_reloc_name_lookup\t\triscv_reloc_name_lookup\n+#define bfd_elfNN_bfd_link_hash_table_create\triscv_elf_link_hash_table_create\n+#define bfd_elfNN_bfd_reloc_type_lookup\t\triscv_reloc_type_lookup\n #define bfd_elfNN_bfd_merge_private_bfd_data \\\n   _bfd_riscv_elf_merge_private_bfd_data\n \n-#define elf_backend_copy_indirect_symbol     riscv_elf_copy_indirect_symbol\n-#define elf_backend_create_dynamic_sections  riscv_elf_create_dynamic_sections\n-#define elf_backend_check_relocs\t     riscv_elf_check_relocs\n-#define elf_backend_adjust_dynamic_symbol    riscv_elf_adjust_dynamic_symbol\n-#define elf_backend_size_dynamic_sections    riscv_elf_size_dynamic_sections\n-#define elf_backend_relocate_section\t     riscv_elf_relocate_section\n-#define elf_backend_finish_dynamic_symbol    riscv_elf_finish_dynamic_symbol\n-#define elf_backend_finish_dynamic_sections  riscv_elf_finish_dynamic_sections\n-#define elf_backend_gc_mark_hook\t     riscv_elf_gc_mark_hook\n-#define elf_backend_plt_sym_val\t\t     riscv_elf_plt_sym_val\n-#define elf_backend_grok_prstatus\t     riscv_elf_grok_prstatus\n-#define elf_backend_grok_psinfo\t\t     riscv_elf_grok_psinfo\n-#define elf_backend_object_p\t\t     riscv_elf_object_p\n-#define elf_info_to_howto_rel\t\t     NULL\n-#define elf_info_to_howto\t\t     riscv_info_to_howto_rela\n-#define bfd_elfNN_bfd_relax_section\t     _bfd_riscv_relax_section\n-#define bfd_elfNN_mkobject\t\t     elfNN_riscv_mkobject\n-\n-#define elf_backend_init_index_section\t     _bfd_elf_init_1_index_section\n-\n-#define elf_backend_can_gc_sections\t1\n-#define elf_backend_can_refcount\t1\n-#define elf_backend_want_got_plt\t1\n-#define elf_backend_plt_readonly\t1\n-#define elf_backend_plt_alignment\t4\n-#define elf_backend_want_plt_sym\t1\n-#define elf_backend_got_header_size\t(ARCH_SIZE / 8)\n-#define elf_backend_want_dynrelro\t1\n-#define elf_backend_rela_normal\t\t1\n-#define elf_backend_default_execstack\t0\n+#define elf_backend_copy_indirect_symbol\triscv_elf_copy_indirect_symbol\n+#define elf_backend_create_dynamic_sections\triscv_elf_create_dynamic_sections\n+#define elf_backend_check_relocs\t\triscv_elf_check_relocs\n+#define elf_backend_adjust_dynamic_symbol\triscv_elf_adjust_dynamic_symbol\n+#define elf_backend_size_dynamic_sections\triscv_elf_size_dynamic_sections\n+#define elf_backend_relocate_section\t\triscv_elf_relocate_section\n+#define elf_backend_finish_dynamic_symbol\triscv_elf_finish_dynamic_symbol\n+#define elf_backend_finish_dynamic_sections\triscv_elf_finish_dynamic_sections\n+#define elf_backend_gc_mark_hook\t\triscv_elf_gc_mark_hook\n+#define elf_backend_plt_sym_val\t\t\triscv_elf_plt_sym_val\n+#define elf_backend_grok_prstatus\t\triscv_elf_grok_prstatus\n+#define elf_backend_grok_psinfo\t\t\triscv_elf_grok_psinfo\n+#define elf_backend_object_p\t\t\triscv_elf_object_p\n+#define elf_info_to_howto_rel\t\t\tNULL\n+#define elf_info_to_howto\t\t\triscv_info_to_howto_rela\n+#define bfd_elfNN_bfd_relax_section\t\t_bfd_riscv_relax_section\n+#define bfd_elfNN_mkobject\t\t\telfNN_riscv_mkobject\n+\n+#define elf_backend_init_index_section\t\t_bfd_elf_init_1_index_section\n+\n+#define elf_backend_can_gc_sections\t\t1\n+#define elf_backend_can_refcount\t\t1\n+#define elf_backend_want_got_plt\t\t1\n+#define elf_backend_plt_readonly\t\t1\n+#define elf_backend_plt_alignment\t\t4\n+#define elf_backend_want_plt_sym\t\t1\n+#define elf_backend_got_header_size\t\t(ARCH_SIZE / 8)\n+#define elf_backend_want_dynrelro\t\t1\n+#define elf_backend_rela_normal\t\t\t1\n+#define elf_backend_default_execstack\t\t0\n \n #undef  elf_backend_obj_attrs_vendor\n-#define elf_backend_obj_attrs_vendor            \"riscv\"\n+#define elf_backend_obj_attrs_vendor\t\t\"riscv\"\n #undef  elf_backend_obj_attrs_arg_type\n-#define elf_backend_obj_attrs_arg_type          riscv_elf_obj_attrs_arg_type\n+#define elf_backend_obj_attrs_arg_type\t\triscv_elf_obj_attrs_arg_type\n #undef  elf_backend_obj_attrs_section_type\n-#define elf_backend_obj_attrs_section_type      SHT_RISCV_ATTRIBUTES\n+#define elf_backend_obj_attrs_section_type\tSHT_RISCV_ATTRIBUTES\n #undef  elf_backend_obj_attrs_section\n-#define elf_backend_obj_attrs_section           \".riscv.attributes\"\n+#define elf_backend_obj_attrs_section\t\t\".riscv.attributes\"\n \n #include \"elfNN-target.h\""
    },
    {
      "sha": "ab5cc98ba649d733f507ec6bbe3cbcb53130b60a",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* config/tc-riscv.c: Indent and GNU coding standards tidy,\n+\talso aligned the code.\n+\t* config/tc-riscv.h: Likewise.\n+\n 2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* config/tc-riscv.c: Error and warning messages tidy."
    },
    {
      "sha": "ab9c6f49ed3e2643df46592c1c4d98d9c33541f4",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 52,
      "deletions": 56,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -85,7 +85,8 @@ static enum riscv_priv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;\n static unsigned xlen = 0; /* The width of an x-register.  */\n static unsigned abi_xlen = 0; /* The width of a pointer in the ABI.  */\n static bfd_boolean rve_abi = FALSE;\n-enum float_abi {\n+enum float_abi\n+{\n   FLOAT_ABI_DEFAULT = -1,\n   FLOAT_ABI_SOFT,\n   FLOAT_ABI_SINGLE,\n@@ -274,7 +275,7 @@ init_ext_version_hash (const struct riscv_ext_version *table)\n \n       i++;\n       while (table[i].name\n-            && strcmp (table[i].name, name) == 0)\n+\t     && strcmp (table[i].name, name) == 0)\n        i++;\n     }\n \n@@ -709,14 +710,14 @@ riscv_init_csr_hash (const char *name,\n   while (need_enrty && entry != NULL)\n     {\n       if (entry->csr_class == class\n-         && entry->address == address\n-         && entry->define_version == define_version\n-         && entry->abort_version == abort_version)\n-       need_enrty = FALSE;\n+\t  && entry->address == address\n+\t  && entry->define_version == define_version\n+\t  && entry->abort_version == abort_version)\n+\tneed_enrty = FALSE;\n       pre_entry = entry;\n       entry = entry->next;\n     }\n- \n+\n   /* Duplicate CSR.  */\n   if (!need_enrty)\n     return;\n@@ -969,31 +970,31 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)\n       case ',': break;\n       case '(': break;\n       case ')': break;\n-      case '<': USE_BITS (OP_MASK_SHAMTW,\tOP_SH_SHAMTW);\tbreak;\n-      case '>':\tUSE_BITS (OP_MASK_SHAMT,\tOP_SH_SHAMT);\tbreak;\n+      case '<': USE_BITS (OP_MASK_SHAMTW, OP_SH_SHAMTW); break;\n+      case '>': USE_BITS (OP_MASK_SHAMT, OP_SH_SHAMT); break;\n       case 'A': break;\n-      case 'D':\tUSE_BITS (OP_MASK_RD,\t\tOP_SH_RD);\tbreak;\n-      case 'Z':\tUSE_BITS (OP_MASK_RS1,\t\tOP_SH_RS1);\tbreak;\n-      case 'E':\tUSE_BITS (OP_MASK_CSR,\t\tOP_SH_CSR);\tbreak;\n+      case 'D': USE_BITS (OP_MASK_RD, OP_SH_RD); break;\n+      case 'Z': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n+      case 'E': USE_BITS (OP_MASK_CSR, OP_SH_CSR); break;\n       case 'I': break;\n-      case 'R':\tUSE_BITS (OP_MASK_RS3,\t\tOP_SH_RS3);\tbreak;\n-      case 'S':\tUSE_BITS (OP_MASK_RS1,\t\tOP_SH_RS1);\tbreak;\n-      case 'U':\tUSE_BITS (OP_MASK_RS1,\t\tOP_SH_RS1);\n+      case 'R': USE_BITS (OP_MASK_RS3, OP_SH_RS3); break;\n+      case 'S': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n+      case 'U': USE_BITS (OP_MASK_RS1, OP_SH_RS1);\n \t/* Fall through.  */\n-      case 'T':\tUSE_BITS (OP_MASK_RS2,\t\tOP_SH_RS2);\tbreak;\n-      case 'd':\tUSE_BITS (OP_MASK_RD,\t\tOP_SH_RD);\tbreak;\n-      case 'm':\tUSE_BITS (OP_MASK_RM,\t\tOP_SH_RM);\tbreak;\n-      case 's':\tUSE_BITS (OP_MASK_RS1,\t\tOP_SH_RS1);\tbreak;\n-      case 't':\tUSE_BITS (OP_MASK_RS2,\t\tOP_SH_RS2);\tbreak;\n-      case 'r':\tUSE_BITS (OP_MASK_RS3,          OP_SH_RS3);     break;\n-      case 'P':\tUSE_BITS (OP_MASK_PRED,\t\tOP_SH_PRED); break;\n-      case 'Q':\tUSE_BITS (OP_MASK_SUCC,\t\tOP_SH_SUCC); break;\n+      case 'T': USE_BITS (OP_MASK_RS2, OP_SH_RS2); break;\n+      case 'd': USE_BITS (OP_MASK_RD, OP_SH_RD); break;\n+      case 'm': USE_BITS (OP_MASK_RM, OP_SH_RM); break;\n+      case 's': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n+      case 't': USE_BITS (OP_MASK_RS2, OP_SH_RS2); break;\n+      case 'r': USE_BITS (OP_MASK_RS3, OP_SH_RS3);     break;\n+      case 'P': USE_BITS (OP_MASK_PRED, OP_SH_PRED); break;\n+      case 'Q': USE_BITS (OP_MASK_SUCC, OP_SH_SUCC); break;\n       case 'o':\n       case 'j': used_bits |= ENCODE_ITYPE_IMM (-1U); break;\n-      case 'a':\tused_bits |= ENCODE_UJTYPE_IMM (-1U); break;\n-      case 'p':\tused_bits |= ENCODE_SBTYPE_IMM (-1U); break;\n-      case 'q':\tused_bits |= ENCODE_STYPE_IMM (-1U); break;\n-      case 'u':\tused_bits |= ENCODE_UTYPE_IMM (-1U); break;\n+      case 'a': used_bits |= ENCODE_UJTYPE_IMM (-1U); break;\n+      case 'p': used_bits |= ENCODE_SBTYPE_IMM (-1U); break;\n+      case 'q': used_bits |= ENCODE_STYPE_IMM (-1U); break;\n+      case 'u': used_bits |= ENCODE_UTYPE_IMM (-1U); break;\n       case 'z': break;\n       case '[': break;\n       case ']': break;\n@@ -1254,10 +1255,6 @@ macro_build (expressionS *ep, const char *name, const char *fmt, ...)\n \t  INSERT_OPERAND (RS2, insn, va_arg (args, int));\n \t  continue;\n \n-\tcase '>':\n-\t  INSERT_OPERAND (SHAMT, insn, va_arg (args, int));\n-\t  continue;\n-\n \tcase 'j':\n \tcase 'u':\n \tcase 'q':\n@@ -2184,11 +2181,11 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t\t      \"field, value must be 0...64\"));\n \t\t\t    break;\n \t\t\t  }\n-\n \t\t\tINSERT_OPERAND (CFUNCT6, *ip, imm_expr->X_add_number);\n \t\t\timm_expr->X_op = O_absent;\n \t\t\ts = expr_end;\n \t\t\tcontinue;\n+\n \t\t      case '4':\n \t\t        if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t\t    || imm_expr->X_op != O_constant\n@@ -2199,11 +2196,11 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t\t      \"field, value must be 0...15\"));\n \t\t\t    break;\n \t\t\t  }\n-\n \t\t\tINSERT_OPERAND (CFUNCT4, *ip, imm_expr->X_add_number);\n \t\t\timm_expr->X_op = O_absent;\n \t\t\ts = expr_end;\n \t\t\tcontinue;\n+\n \t\t      case '3':\n \t\t\tif (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t\t    || imm_expr->X_op != O_constant\n@@ -2218,6 +2215,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\timm_expr->X_op = O_absent;\n \t\t\ts = expr_end;\n \t\t\tcontinue;\n+\n \t\t      case '2':\n \t\t\tif (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t\t    || imm_expr->X_op != O_constant\n@@ -2232,6 +2230,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\timm_expr->X_op = O_absent;\n \t\t\ts = expr_end;\n \t\t\tcontinue;\n+\n \t\t      default:\n \t\t\tas_bad (_(\"internal: unknown compressed funct \"\n \t\t\t\t  \"field specifier `CF%c'\"), *args);\n@@ -2392,7 +2391,6 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    }\n \t\t  continue;\n \t\t}\n-\n \t      break;\n \n \t    case 'I':\n@@ -2462,7 +2460,6 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t      || imm_expr->X_add_number < -(signed)RISCV_IMM_REACH/2)\n \t\t    break;\n \t\t}\n-\n \t      s = expr_end;\n \t      continue;\n \n@@ -2508,6 +2505,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t      else\n \t\t*imm_reloc = BFD_RELOC_RISCV_CALL;\n \t      continue;\n+\n \t    case 'O':\n \t      switch (*++args)\n \t\t{\n@@ -2523,11 +2521,11 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t\t\"lower 2 bits must be 0x3\"));\n \t\t      break;\n \t\t    }\n-\n \t\t  INSERT_OPERAND (OP, *ip, imm_expr->X_add_number);\n \t\t  imm_expr->X_op = O_absent;\n \t\t  s = expr_end;\n \t\t  continue;\n+\n \t\tcase '2':\n \t\t  if (my_getOpcodeExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n@@ -2538,11 +2536,11 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t\t\"value must be 0...2\"));\n \t\t      break;\n \t\t    }\n-\n \t\t  INSERT_OPERAND (OP2, *ip, imm_expr->X_add_number);\n \t\t  imm_expr->X_op = O_absent;\n \t\t  s = expr_end;\n \t\t  continue;\n+\n \t\tdefault:\n \t\t  as_bad (_(\"internal: unknown opcode field \"\n \t\t\t    \"specifier `O%c'\"), *args);\n@@ -2562,11 +2560,11 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t\t\"value must be 0...127\"));\n \t\t      break;\n \t\t    }\n-\n \t\t  INSERT_OPERAND (FUNCT7, *ip, imm_expr->X_add_number);\n \t\t  imm_expr->X_op = O_absent;\n \t\t  s = expr_end;\n \t\t  continue;\n+\n \t\tcase '3':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n@@ -2577,11 +2575,11 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t        \"value must be 0...7\"));\n \t\t      break;\n \t\t    }\n-\n \t\t  INSERT_OPERAND (FUNCT3, *ip, imm_expr->X_add_number);\n \t\t  imm_expr->X_op = O_absent;\n \t\t  s = expr_end;\n \t\t  continue;\n+\n \t\tcase '2':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n@@ -2592,7 +2590,6 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t        \"value must be 0...3\"));\n \t\t      break;\n \t\t    }\n-\n \t\t  INSERT_OPERAND (FUNCT2, *ip, imm_expr->X_add_number);\n \t\t  imm_expr->X_op = O_absent;\n \t\t  s = expr_end;\n@@ -3646,7 +3643,7 @@ riscv_write_out_attrs (void)\n   /* Re-write architecture elf attribute.  */\n   arch_str = riscv_arch_str (xlen, &riscv_subsets);\n   bfd_elf_add_proc_attr_string (stdoutput, Tag_RISCV_arch, arch_str);\n-  xfree ((void *)arch_str);\n+  xfree ((void *) arch_str);\n \n   /* For the file without any instruction, we don't set the default_priv_spec\n      according to the privileged elf attributes since the md_assemble isn't\n@@ -3711,28 +3708,27 @@ riscv_convert_symbolic_attribute (const char *name)\n {\n   static const struct\n   {\n-    const char * name;\n-    const int    tag;\n+    const char *name;\n+    const int tag;\n   }\n   attribute_table[] =\n-    {\n-      /* When you modify this table you should\n-\t also modify the list in doc/c-riscv.texi.  */\n-#define T(tag) {#tag, Tag_RISCV_##tag},  {\"Tag_RISCV_\" #tag, Tag_RISCV_##tag}\n-      T(arch),\n-      T(priv_spec),\n-      T(priv_spec_minor),\n-      T(priv_spec_revision),\n-      T(unaligned_access),\n-      T(stack_align),\n+  {\n+    /* When you modify this table you should\n+       also modify the list in doc/c-riscv.texi.  */\n+#define T(tag) {#tag, Tag_RISCV_##tag}, {\"Tag_RISCV_\" #tag, Tag_RISCV_##tag}\n+    T(arch),\n+    T(priv_spec),\n+    T(priv_spec_minor),\n+    T(priv_spec_revision),\n+    T(unaligned_access),\n+    T(stack_align),\n #undef T\n-    };\n-\n-  unsigned int i;\n+  };\n \n   if (name == NULL)\n     return -1;\n \n+  unsigned int i;\n   for (i = 0; i < ARRAY_SIZE (attribute_table); i++)\n     if (strcmp (name, attribute_table[i].name) == 0)\n       return attribute_table[i].tag;"
    },
    {
      "sha": "dcb0cdd4d84191b2875e5dc708a02510f2ec2a86",
      "filename": "gas/config/tc-riscv.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/gas/config/tc-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/gas/config/tc-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.h?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -67,16 +67,16 @@ extern void riscv_handle_align (fragS *);\n #define MAX_MEM_FOR_RS_ALIGN_CODE (3 + 4)\n \n /* The ISA of the target may change based on command-line arguments.  */\n-#define TARGET_FORMAT riscv_target_format()\n+#define TARGET_FORMAT riscv_target_format ()\n extern const char * riscv_target_format (void);\n \n-#define md_after_parse_args() riscv_after_parse_args()\n+#define md_after_parse_args() riscv_after_parse_args ()\n extern void riscv_after_parse_args (void);\n \n #define md_parse_long_option(arg) riscv_parse_long_option (arg)\n extern int riscv_parse_long_option (const char *);\n \n-#define md_pre_output_hook riscv_pre_output_hook()\n+#define md_pre_output_hook riscv_pre_output_hook ()\n extern void riscv_pre_output_hook (void);\n \n /* Let the linker resolve all the relocs due to relaxation.  */"
    },
    {
      "sha": "ad231aeb943acd4e8ec4ab463bc235e060623bc9",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* opcode/riscv.h: Indent and GNU coding standards tidy,\n+\talso aligned the code.\n+\n 2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elf/riscv.h: Comments tidy and improvement."
    },
    {
      "sha": "285d4d5c270eacb2acf1e6d74c65d38651c1031e",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 51,
      "deletions": 44,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -228,33 +228,33 @@ static const char * const riscv_pred_succ[16] =\n #define OP_MASK_CSR\t\t0xfffU\n #define OP_SH_CSR\t\t20\n \n-#define OP_MASK_FUNCT3         0x7\n-#define OP_SH_FUNCT3           12\n-#define OP_MASK_FUNCT7         0x7fU\n-#define OP_SH_FUNCT7           25\n-#define OP_MASK_FUNCT2         0x3\n-#define OP_SH_FUNCT2           25\n+#define OP_MASK_FUNCT3\t\t0x7\n+#define OP_SH_FUNCT3\t\t12\n+#define OP_MASK_FUNCT7\t\t0x7fU\n+#define OP_SH_FUNCT7\t\t25\n+#define OP_MASK_FUNCT2\t\t0x3\n+#define OP_SH_FUNCT2\t\t25\n \n /* RVC fields.  */\n \n-#define OP_MASK_OP2            0x3\n-#define OP_SH_OP2              0\n-\n-#define OP_MASK_CRS2 0x1f\n-#define OP_SH_CRS2 2\n-#define OP_MASK_CRS1S 0x7\n-#define OP_SH_CRS1S 7\n-#define OP_MASK_CRS2S 0x7\n-#define OP_SH_CRS2S 2\n-\n-#define OP_MASK_CFUNCT6                0x3f\n-#define OP_SH_CFUNCT6          10\n-#define OP_MASK_CFUNCT4                0xf\n-#define OP_SH_CFUNCT4          12\n-#define OP_MASK_CFUNCT3                0x7\n-#define OP_SH_CFUNCT3          13\n-#define OP_MASK_CFUNCT2                0x3\n-#define OP_SH_CFUNCT2          5\n+#define OP_MASK_OP2\t\t0x3\n+#define OP_SH_OP2\t\t0\n+\n+#define OP_MASK_CRS2\t\t0x1f\n+#define OP_SH_CRS2\t\t2\n+#define OP_MASK_CRS1S\t\t0x7\n+#define OP_SH_CRS1S\t\t7\n+#define OP_MASK_CRS2S\t\t0x7\n+#define OP_SH_CRS2S\t\t2\n+\n+#define OP_MASK_CFUNCT6\t\t0x3f\n+#define OP_SH_CFUNCT6\t\t10\n+#define OP_MASK_CFUNCT4\t\t0xf\n+#define OP_SH_CFUNCT4\t\t12\n+#define OP_MASK_CFUNCT3\t\t0x7\n+#define OP_SH_CFUNCT3\t\t13\n+#define OP_MASK_CFUNCT2\t\t0x3\n+#define OP_SH_CFUNCT2\t\t5\n \n /* ABI names for selected x-registers.  */\n \n@@ -296,52 +296,59 @@ static const char * const riscv_pred_succ[16] =\n \n /* All RISC-V instructions belong to at least one of these classes.  */\n enum riscv_insn_class\n-  {\n-   INSN_CLASS_NONE,\n-\n-   INSN_CLASS_I,\n-   INSN_CLASS_C,\n-   INSN_CLASS_A,\n-   INSN_CLASS_M,\n-   INSN_CLASS_F,\n-   INSN_CLASS_D,\n-   INSN_CLASS_Q,\n-   INSN_CLASS_F_AND_C,\n-   INSN_CLASS_D_AND_C,\n-   INSN_CLASS_ZICSR,\n-   INSN_CLASS_ZIFENCEI,\n-   INSN_CLASS_ZIHINTPAUSE,\n-   INSN_CLASS_ZBA,\n-   INSN_CLASS_ZBB,\n-   INSN_CLASS_ZBC,\n-   INSN_CLASS_ZBA_OR_ZBB,\n-  };\n+{\n+  INSN_CLASS_NONE,\n+\n+  INSN_CLASS_I,\n+  INSN_CLASS_C,\n+  INSN_CLASS_A,\n+  INSN_CLASS_M,\n+  INSN_CLASS_F,\n+  INSN_CLASS_D,\n+  INSN_CLASS_Q,\n+  INSN_CLASS_F_AND_C,\n+  INSN_CLASS_D_AND_C,\n+  INSN_CLASS_ZICSR,\n+  INSN_CLASS_ZIFENCEI,\n+  INSN_CLASS_ZIHINTPAUSE,\n+  INSN_CLASS_ZBA,\n+  INSN_CLASS_ZBB,\n+  INSN_CLASS_ZBC,\n+  INSN_CLASS_ZBA_OR_ZBB,\n+};\n \n /* This structure holds information for a particular instruction.  */\n struct riscv_opcode\n {\n   /* The name of the instruction.  */\n   const char *name;\n+\n   /* The requirement of xlen for the instruction, 0 if no requirement.  */\n   unsigned xlen_requirement;\n+\n   /* Class to which this instruction belongs.  Used to decide whether or\n      not this instruction is legal in the current -march context.  */\n   enum riscv_insn_class insn_class;\n+\n   /* A string describing the arguments for this instruction.  */\n   const char *args;\n+\n   /* The basic opcode for the instruction.  When assembling, this\n      opcode is modified by the arguments to produce the actual opcode\n      that is used.  If pinfo is INSN_MACRO, then this is 0.  */\n   insn_t match;\n+\n   /* If pinfo is not INSN_MACRO, then this is a bit mask for the\n      relevant portions of the opcode when disassembling.  If the\n      actual opcode anded with the match field equals the opcode field,\n      then we have found the correct instruction.  If pinfo is\n      INSN_MACRO, then this field is the macro identifier.  */\n   insn_t mask;\n+\n   /* A function to determine if a word corresponds to this instruction.\n      Usually, this computes ((word & mask) == match).  */\n   int (*match_func) (const struct riscv_opcode *op, insn_t word);\n+\n   /* For a macro, this is INSN_MACRO.  Otherwise, it is a collection\n      of bits describing the instruction, notably any relevant hazard\n      information.  */"
    },
    {
      "sha": "57240f118738a8b08c0041e08aa2ca5b2af431c2",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=1942a0483653cd8906058148001fc5b091f2191c",
      "patch": "@@ -1,3 +1,10 @@\n+2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* riscv-opc.c (riscv_gpr_names_abi): Aligned the code.\n+\t(riscv_fpr_names_abi): Likewise.\n+\t(riscv_opcodes): Likewise.\n+\t(riscv_insn_types): Likewise.\n+\n 2021-01-15  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* riscv-dis.c (parse_riscv_dis_option): Fix typos of message."
    },
    {
      "sha": "60f951b79b266ae2edbc9b0b29ff413af22051c3",
      "filename": "opcodes/riscv-opc.c",
      "status": "modified",
      "additions": 707,
      "deletions": 710,
      "changes": 1417,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1942a0483653cd8906058148001fc5b091f2191c/opcodes/riscv-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1942a0483653cd8906058148001fc5b091f2191c/opcodes/riscv-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-opc.c?ref=1942a0483653cd8906058148001fc5b091f2191c"
    }
  ]
}