{
  "sha": "6ca073501796fb41372af7f746411fbb498957a3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmNhMDczNTAxNzk2ZmI0MTM3MmFmN2Y3NDY0MTFmYmI0OTg5NTdhMw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-15T05:43:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-15T05:45:35Z"
    },
    "message": "display_debug_aranges\n\n\t* dwarf.c (display_debug_aranges): Delete initial_length_size.\n\tUse end_ranges to constrain data reads to header length.  Avoid\n\tpointer UB.",
    "tree": {
      "sha": "f438849a11c7dc1790df34fe6f959f70fbf32932",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f438849a11c7dc1790df34fe6f959f70fbf32932"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6ca073501796fb41372af7f746411fbb498957a3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ca073501796fb41372af7f746411fbb498957a3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6ca073501796fb41372af7f746411fbb498957a3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ca073501796fb41372af7f746411fbb498957a3/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7848009791cd1598f8c19ab52ccd25a78bc0c789",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7848009791cd1598f8c19ab52ccd25a78bc0c789",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7848009791cd1598f8c19ab52ccd25a78bc0c789"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 21,
    "deletions": 18
  },
  "files": [
    {
      "sha": "6d36f58a9c92cb60d489c44e79bdbf005506be9c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ca073501796fb41372af7f746411fbb498957a3/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ca073501796fb41372af7f746411fbb498957a3/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=6ca073501796fb41372af7f746411fbb498957a3",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c (display_debug_aranges): Delete initial_length_size.\n+\tUse end_ranges to constrain data reads to header length.  Avoid\n+\tpointer UB.\n+\n 2021-05-15  Alan Modra  <amodra@gmail.com>\n \n \t* dwarf.c (display_loc_list): Avoid pointer UB.  Correct check"
    },
    {
      "sha": "cd76f3f5e839291c78c786c5efb27a041f5729de",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 15,
      "deletions": 18,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ca073501796fb41372af7f746411fbb498957a3/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ca073501796fb41372af7f746411fbb498957a3/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=6ca073501796fb41372af7f746411fbb498957a3",
      "patch": "@@ -7187,45 +7187,42 @@ display_debug_aranges (struct dwarf_section *section,\n       unsigned char address_size;\n       int excess;\n       unsigned int offset_size;\n-      unsigned int initial_length_size;\n+      unsigned char *end_ranges;\n \n       hdrptr = start;\n+      sec_off = hdrptr - section->start;\n \n       SAFE_BYTE_GET_AND_INC (arange.ar_length, hdrptr, 4, end);\n       if (arange.ar_length == 0xffffffff)\n \t{\n \t  SAFE_BYTE_GET_AND_INC (arange.ar_length, hdrptr, 8, end);\n \t  offset_size = 8;\n-\t  initial_length_size = 12;\n \t}\n       else\n-\t{\n-\t  offset_size = 4;\n-\t  initial_length_size = 4;\n-\t}\n+\toffset_size = 4;\n \n-      sec_off = hdrptr - section->start;\n-      if (sec_off + arange.ar_length < sec_off\n-\t  || sec_off + arange.ar_length > section->size)\n+      if (arange.ar_length > (size_t) (end - hdrptr))\n \t{\n \t  warn (_(\"Debug info is corrupted, %s header at %#lx has length %s\\n\"),\n \t\tsection->name,\n-\t\tsec_off - initial_length_size,\n+\t\tsec_off,\n \t\tdwarf_vmatoa (\"x\", arange.ar_length));\n \t  break;\n \t}\n+      end_ranges = hdrptr + arange.ar_length;\n \n-      SAFE_BYTE_GET_AND_INC (arange.ar_version, hdrptr, 2, end);\n-      SAFE_BYTE_GET_AND_INC (arange.ar_info_offset, hdrptr, offset_size, end);\n+      SAFE_BYTE_GET_AND_INC (arange.ar_version, hdrptr, 2, end_ranges);\n+      SAFE_BYTE_GET_AND_INC (arange.ar_info_offset, hdrptr, offset_size,\n+\t\t\t     end_ranges);\n \n       if (num_debug_info_entries != DEBUG_INFO_UNAVAILABLE\n \t  && num_debug_info_entries > 0\n \t  && find_debug_info_for_offset (arange.ar_info_offset) == NULL)\n \twarn (_(\".debug_info offset of 0x%lx in %s section does not point to a CU header.\\n\"),\n \t      (unsigned long) arange.ar_info_offset, section->name);\n \n-      SAFE_BYTE_GET_AND_INC (arange.ar_pointer_size, hdrptr, 1, end);\n-      SAFE_BYTE_GET_AND_INC (arange.ar_segment_size, hdrptr, 1, end);\n+      SAFE_BYTE_GET_AND_INC (arange.ar_pointer_size, hdrptr, 1, end_ranges);\n+      SAFE_BYTE_GET_AND_INC (arange.ar_segment_size, hdrptr, 1, end_ranges);\n \n       if (arange.ar_version != 2 && arange.ar_version != 3)\n \t{\n@@ -7277,12 +7274,12 @@ display_debug_aranges (struct dwarf_section *section,\n       if (excess)\n \taddr_ranges += (2 * address_size) - excess;\n \n-      start += arange.ar_length + initial_length_size;\n+      start = end_ranges;\n \n-      while (addr_ranges + 2 * address_size <= start)\n+      while (2 * address_size <= (size_t) (start - addr_ranges))\n \t{\n-\t  SAFE_BYTE_GET_AND_INC (address, addr_ranges, address_size, end);\n-\t  SAFE_BYTE_GET_AND_INC (length, addr_ranges, address_size, end);\n+\t  SAFE_BYTE_GET_AND_INC (address, addr_ranges, address_size, start);\n+\t  SAFE_BYTE_GET_AND_INC (length, addr_ranges, address_size, start);\n \n \t  printf (\"    \");\n \t  print_dwarf_vma (address, address_size);"
    }
  ]
}