{
  "sha": "29d2c474f5a397017455da82e6dbc72629186359",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjlkMmM0NzRmNWEzOTcwMTc0NTVkYTgyZTZkYmM3MjYyOTE4NjM1OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T23:49:41Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:39Z"
    },
    "message": "Change tui_alloc_source_buffer return type to void\n\ntui_alloc_source_buffer can't actually fail, so change its return type\nto void and update the callers.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (tui_alloc_source_buffer): Change return\n\ttype to void.\n\t* tui/tui-winsource.c (tui_alloc_source_buffer): Change return\n\ttype to void.\n\t* tui/tui-source.c (tui_set_source_content): Update.\n\t* tui/tui-disasm.c (tui_set_disassem_content): Update.",
    "tree": {
      "sha": "9fb0ebae2a874c669d628e616d08ff8fe9e19d22",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9fb0ebae2a874c669d628e616d08ff8fe9e19d22"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/29d2c474f5a397017455da82e6dbc72629186359",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29d2c474f5a397017455da82e6dbc72629186359",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/29d2c474f5a397017455da82e6dbc72629186359",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29d2c474f5a397017455da82e6dbc72629186359/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "152f3f4b3342ae16df5ae0640896b8cea008c893",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/152f3f4b3342ae16df5ae0640896b8cea008c893",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/152f3f4b3342ae16df5ae0640896b8cea008c893"
    }
  ],
  "stats": {
    "total": 169,
    "additions": 86,
    "deletions": 83
  },
  "files": [
    {
      "sha": "a97cfde736d8af85a0446080a91b9ce6e0de98e8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29d2c474f5a397017455da82e6dbc72629186359/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29d2c474f5a397017455da82e6dbc72629186359/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=29d2c474f5a397017455da82e6dbc72629186359",
      "patch": "@@ -1,3 +1,12 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (tui_alloc_source_buffer): Change return\n+\ttype to void.\n+\t* tui/tui-winsource.c (tui_alloc_source_buffer): Change return\n+\ttype to void.\n+\t* tui/tui-source.c (tui_set_source_content): Update.\n+\t* tui/tui-disasm.c (tui_set_disassem_content): Update.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (window_name_completer, tui_set_focus)"
    },
    {
      "sha": "0bc7c642bcd03ba4f7ff6540c023144ae7655f9c",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=29d2c474f5a397017455da82e6dbc72629186359",
      "patch": "@@ -165,7 +165,6 @@ tui_find_disassembly_address (struct gdbarch *gdbarch, CORE_ADDR pc, int from)\n enum tui_status\n tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n {\n-  enum tui_status ret = TUI_FAILURE;\n   int i;\n   int offset = TUI_DISASM_WIN->horizontal_offset;\n   int max_lines, line_width;\n@@ -180,9 +179,7 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n   if (pc == 0)\n     return TUI_FAILURE;\n \n-  ret = tui_alloc_source_buffer (TUI_DISASM_WIN);\n-  if (ret != TUI_SUCCESS)\n-    return ret;\n+  tui_alloc_source_buffer (TUI_DISASM_WIN);\n \n   tui_source_window_base *base = TUI_DISASM_WIN;\n   base->gdbarch = gdbarch;"
    },
    {
      "sha": "39abe81a870c6b4a7b8033b516ef07ca83ca42fd",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 74,
      "deletions": 75,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=29d2c474f5a397017455da82e6dbc72629186359",
      "patch": "@@ -133,86 +133,85 @@ tui_set_source_content (struct symtab *s,\n     {\n       int line_width, nlines;\n \n-      if ((ret = tui_alloc_source_buffer (TUI_SRC_WIN)) == TUI_SUCCESS)\n+      ret = TUI_SUCCESS;\n+      tui_alloc_source_buffer (TUI_SRC_WIN);\n+      line_width = TUI_SRC_WIN->width - 1;\n+      /* Take hilite (window border) into account, when\n+\t calculating the number of lines.  */\n+      nlines = (line_no + (TUI_SRC_WIN->height - 2)) - line_no;\n+\n+      std::string srclines;\n+      if (!g_source_cache.get_source_lines (s, line_no, line_no + nlines,\n+\t\t\t\t\t    &srclines))\n \t{\n-\t  line_width = TUI_SRC_WIN->width - 1;\n-\t  /* Take hilite (window border) into account, when\n-\t     calculating the number of lines.  */\n-\t  nlines = (line_no + (TUI_SRC_WIN->height - 2)) - line_no;\n-\n-\t  std::string srclines;\n-\t  if (!g_source_cache.get_source_lines (s, line_no, line_no + nlines,\n-\t\t\t\t\t\t&srclines))\n+\t  if (!noerror)\n \t    {\n-\t      if (!noerror)\n-\t\t{\n-\t\t  const char *filename = symtab_to_filename_for_display (s);\n-\t\t  char *name = (char *) alloca (strlen (filename) + 100);\n-\n-\t\t  sprintf (name, \"%s:%d\", filename, line_no);\n-\t\t  print_sys_errmsg (name, errno);\n-\t\t}\n-\t      ret = TUI_FAILURE;\n+\t      const char *filename = symtab_to_filename_for_display (s);\n+\t      char *name = (char *) alloca (strlen (filename) + 100);\n+\n+\t      sprintf (name, \"%s:%d\", filename, line_no);\n+\t      print_sys_errmsg (name, errno);\n \t    }\n-\t  else\n+\t  ret = TUI_FAILURE;\n+\t}\n+      else\n+\t{\n+\t  int cur_line_no, cur_line;\n+\t  struct tui_gen_win_info *locator\n+\t    = tui_locator_win_info_ptr ();\n+\t  struct tui_source_window_base *src\n+\t    = (struct tui_source_window_base *) TUI_SRC_WIN;\n+\t  const char *s_filename = symtab_to_filename_for_display (s);\n+\n+\t  if (TUI_SRC_WIN->title)\n+\t    xfree (TUI_SRC_WIN->title);\n+\t  TUI_SRC_WIN->title = xstrdup (s_filename);\n+\n+\t  xfree (src->fullname);\n+\t  src->fullname = xstrdup (symtab_to_fullname (s));\n+\n+\t  cur_line = 0;\n+\t  src->gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n+\t  src->start_line_or_addr.loa = LOA_LINE;\n+\t  cur_line_no = src->start_line_or_addr.u.line_no = line_no;\n+\n+\t  const char *iter = srclines.c_str ();\n+\t  while (cur_line < nlines)\n \t    {\n-\t      int cur_line_no, cur_line;\n-\t      struct tui_gen_win_info *locator\n-\t\t= tui_locator_win_info_ptr ();\n-\t      struct tui_source_window_base *src\n-\t\t= (struct tui_source_window_base *) TUI_SRC_WIN;\n-\t      const char *s_filename = symtab_to_filename_for_display (s);\n-\n-\t      if (TUI_SRC_WIN->title)\n-\t\txfree (TUI_SRC_WIN->title);\n-\t      TUI_SRC_WIN->title = xstrdup (s_filename);\n-\n-\t      xfree (src->fullname);\n-\t      src->fullname = xstrdup (symtab_to_fullname (s));\n-\n-\t      cur_line = 0;\n-\t      src->gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n-\t      src->start_line_or_addr.loa = LOA_LINE;\n-\t      cur_line_no = src->start_line_or_addr.u.line_no = line_no;\n-\n-\t      const char *iter = srclines.c_str ();\n-\t      while (cur_line < nlines)\n-\t\t{\n-\t\t  struct tui_win_element *element\n-\t\t    = TUI_SRC_WIN->content[cur_line];\n-\n-\t\t  std::string text;\n-\t\t  if (*iter != '\\0')\n-\t\t    text = copy_source_line (&iter, cur_line_no,\n-\t\t\t\t\t     src->horizontal_offset,\n-\t\t\t\t\t     line_width);\n-\n-\t\t  /* Set whether element is the execution point\n-\t\t     and whether there is a break point on it.  */\n-\t\t  element->which_element.source.line_or_addr.loa =\n-\t\t    LOA_LINE;\n-\t\t  element->which_element.source.line_or_addr.u.line_no =\n-\t\t    cur_line_no;\n-\t\t  element->which_element.source.is_exec_point =\n-\t\t    (filename_cmp (locator->content[0]\n-\t\t\t\t   ->which_element.locator.full_name,\n-\t\t\t\t   symtab_to_fullname (s)) == 0\n-\t\t     && cur_line_no\n-\t\t     == locator->content[0]\n-\t\t     ->which_element.locator.line_no);\n-\n-\t\t  xfree (TUI_SRC_WIN->content[cur_line]\n-\t\t\t ->which_element.source.line);\n-\t\t  TUI_SRC_WIN->content[cur_line]\n-\t\t    ->which_element.source.line\n-\t\t    = xstrdup (text.c_str ());\n-\n-\t\t  cur_line++;\n-\t\t  cur_line_no++;\n-\t\t}\n-\t      TUI_SRC_WIN->content_size = nlines;\n-\t      ret = TUI_SUCCESS;\n+\t      struct tui_win_element *element\n+\t\t= TUI_SRC_WIN->content[cur_line];\n+\n+\t      std::string text;\n+\t      if (*iter != '\\0')\n+\t\ttext = copy_source_line (&iter, cur_line_no,\n+\t\t\t\t\t src->horizontal_offset,\n+\t\t\t\t\t line_width);\n+\n+\t      /* Set whether element is the execution point\n+\t\t and whether there is a break point on it.  */\n+\t      element->which_element.source.line_or_addr.loa =\n+\t\tLOA_LINE;\n+\t      element->which_element.source.line_or_addr.u.line_no =\n+\t\tcur_line_no;\n+\t      element->which_element.source.is_exec_point =\n+\t\t(filename_cmp (locator->content[0]\n+\t\t\t       ->which_element.locator.full_name,\n+\t\t\t       symtab_to_fullname (s)) == 0\n+\t\t && cur_line_no\n+\t\t == locator->content[0]\n+\t\t ->which_element.locator.line_no);\n+\n+\t      xfree (TUI_SRC_WIN->content[cur_line]\n+\t\t     ->which_element.source.line);\n+\t      TUI_SRC_WIN->content[cur_line]\n+\t\t->which_element.source.line\n+\t\t= xstrdup (text.c_str ());\n+\n+\t      cur_line++;\n+\t      cur_line_no++;\n \t    }\n+\t  TUI_SRC_WIN->content_size = nlines;\n+\t  ret = TUI_SUCCESS;\n \t}\n     }\n   return ret;"
    },
    {
      "sha": "209d33d6c998e1f9dcd5883d92d54d3c644cade1",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=29d2c474f5a397017455da82e6dbc72629186359",
      "patch": "@@ -589,7 +589,7 @@ tui_update_exec_info (struct tui_win_info *win_info)\n   tui_show_exec_info_content (win_info);\n }\n \n-enum tui_status\n+void\n tui_alloc_source_buffer (struct tui_win_info *win_info)\n {\n   int i, line_width, max_lines;\n@@ -608,8 +608,6 @@ tui_alloc_source_buffer (struct tui_win_info *win_info)\n \twin_info->content[i]->which_element.source.line\n \t  = (char *) xmalloc (line_width);\n     }\n-\n-  return TUI_SUCCESS;\n }\n \n "
    },
    {
      "sha": "ccc9ae5f68a211d59e0fc79ab4b5a7de17fa29ca",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29d2c474f5a397017455da82e6dbc72629186359/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=29d2c474f5a397017455da82e6dbc72629186359",
      "patch": "@@ -59,7 +59,7 @@ extern void tui_erase_exec_info_content (struct tui_win_info *);\n extern void tui_clear_exec_info_content (struct tui_win_info *);\n extern void tui_update_exec_info (struct tui_win_info *);\n \n-extern enum tui_status tui_alloc_source_buffer (struct tui_win_info *);\n+extern void tui_alloc_source_buffer (struct tui_win_info *);\n extern int tui_line_is_displayed (int, \n \t\t\t\t  struct tui_win_info *, \n \t\t\t\t  int);"
    }
  ]
}