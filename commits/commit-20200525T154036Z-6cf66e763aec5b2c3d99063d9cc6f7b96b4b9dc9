{
  "sha": "6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmNmNjZlNzYzYWVjNWIyYzNkOTkwNjNkOWNjNmY3Yjk2YjRiOWRjOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-25T15:15:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-25T15:40:36Z"
    },
    "message": "gdb/testsuite: add inferior arguments test\n\nAdd a test for verifying different methods of passing arguments to the\ninferior: the start, starti and run commands, as well as `set args`.\n\nAll these methods work naturally when using the unix or\nnative-extended-gdbserver target boards.  Since those are non-stub\nboards, GDB runs new inferiors and therefore pass arguments to them.\nWith target boards where GDB connects to a stub, for example with\nnative-gdbserver, they don't really make sense.  The inferior process is\nalready started when GDB connects.\n\nHowever, the \"run\" method is still tested with stub targets, because the\ngdb_run_cmd procedure is adapted for stub targets.  Instead of issuing\nthe `run` command, it spawns whatever program is supposed to bring up\nthe stub (gdbserver, for example) using gdb_reload and makes GDB connect\nto it.  So this allows us to exercise argument passing through the\ngdbserver command line, when testing with the native-gdbserver board.\n\nNote that there is already a gdb.base/args.exp, but this tests\nspecifically the --args switch of GDB.  Perhaps it could be integrated\nin this new test, as a new \"method\".\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/gdb.exp (gdb_run_cmd): Return success or failure.\n\t* gdb.base/inferior-args.exp: New file.\n\t* gdb.base/inferior-args.c: New file.\n\nChange-Id: Ib61ea6220a47f9f67aed2960dcacd240cb57af70",
    "tree": {
      "sha": "6644814d5868f77d83073ed6656bcdf7f032a7e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6644814d5868f77d83073ed6656bcdf7f032a7e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8"
    }
  ],
  "stats": {
    "total": 177,
    "additions": 169,
    "deletions": 8
  },
  "files": [
    {
      "sha": "22866e2d3c2cdae14645ea3a319a220399370425",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-25  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* lib/gdb.exp (gdb_run_cmd): Return success or failure.\n+\t* gdb.base/inferior-args.exp: New file.\n+\t* gdb.base/inferior-args.c: New file.\n+\n 2020-05-25  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* lib/gdb.exp (gdb_run_cmd): Change argument from args to"
    },
    {
      "sha": "1a038030d7467d9eff10ec2986b3dc25d5bd9a87",
      "filename": "gdb/testsuite/gdb.base/inferior-args.c",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/gdb.base/inferior-args.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/gdb.base/inferior-args.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/inferior-args.c?ref=6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
      "patch": "@@ -0,0 +1,26 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+\n+int main (int argc, char **argv)\n+{\n+  for (int i = 0; i < argc; i++)\n+    printf (\"[%d] %s\\n\", i, argv[i]);\n+\n+  return 0;\n+}"
    },
    {
      "sha": "477da9b4030fe6d0553390301411599707aaa5ce",
      "filename": "gdb/testsuite/gdb.base/inferior-args.exp",
      "status": "added",
      "additions": 124,
      "deletions": 0,
      "changes": 124,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/gdb.base/inferior-args.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/gdb.base/inferior-args.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/inferior-args.exp?ref=6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
      "patch": "@@ -0,0 +1,124 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test running an inferior with arguments.\n+\n+# This does not work on boards that don't support inferior arguments.\n+if [target_info exists noargs] then {\n+    verbose \"skipping gdb.base/inferior-args.exp because of noargs\"\n+    return\n+}\n+\n+standard_testfile .c\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile debug] == -1} {\n+    return\n+}\n+\n+proc do_test { method } {\n+    global binfile hex\n+\n+    # The second arg is an empty string on purpose.\n+    set inferior_args { \"first arg\" \"\" \"third-arg\" }\n+\n+    clean_restart $binfile\n+\n+    if { $method == \"start\" } {\n+\t# The start command does not make sense for a stub.\n+\tif { [use_gdb_stub] } {\n+\t    return;\n+\t}\n+\n+\tif { [gdb_start_cmd $inferior_args] < 0 } {\n+\t    fail \"could not issue start command\"\n+\t    return -1\n+\t}\n+\n+\t# Consume up to the GDB prompt after the stop.\n+\tgdb_test \"\" \".*main.*\" \"stop at main\"\n+\n+    } elseif { $method == \"starti\" } {\n+\t# The starti command does not make sense for a stub.\n+\tif { [use_gdb_stub] } {\n+\t    return;\n+\t}\n+\n+\tif { [gdb_starti_cmd $inferior_args] < 0 } {\n+\t    fail \"could not issue start command\"\n+\t    return -1\n+\t}\n+\n+\t# Consume up to the GDB prompt after the stop.\n+\tgdb_test \"\" \"\" \"stop at first instruction\"\n+\n+\t# Put a breakpoint and continue until main.\n+\tif { ![gdb_breakpoint \"main\" message] } {\n+\t    fail \"could not set breakpoint on main\"\n+\t    return -1\n+\t}\n+\n+\tif { [gdb_continue \"main\"] != 0 } {\n+\t    fail \"could not continue to main\"\n+\t    return -1\n+\t}\n+\n+    } elseif { $method == \"run\" } {\n+\tif { ![gdb_breakpoint \"main\" message] } {\n+\t    fail \"could not set breakpoint on main\"\n+\t    return -1\n+\t}\n+\n+\t# The run command does not make sense for a stub, but GDB_RUN_CMD\n+\t# does the right thing when the target is a stub (start the stub,\n+\t# connect to it, and \"continue\").\n+\t#\n+\t# This allows us to test arguments passed on the gdbserver command\n+\t# line.\n+\tif { [gdb_run_cmd $inferior_args] < 0 } {\n+\t    fail \"could not run\"\n+\t    return -1\n+\t}\n+\n+\t# Consume up to the GDB prompt after the stop.\n+\tgdb_test \"\" \".*main.*\" \"stop at main\"\n+\n+    } elseif { $method == \"set args\" } {\n+\t# Using \"set args\" does not make sense with a stub.\n+\tif { [use_gdb_stub] } {\n+\t    return;\n+\t}\n+\n+\tgdb_test_no_output \"set args $inferior_args\"\n+\n+\tif { ![runto_main] } {\n+\t    fail \"could not run to main\"\n+\t    return -1\n+\t}\n+\n+    } else {\n+\terror \"invalid method $method\"\n+    }\n+\n+    # Now that we are stopped at main, inspect argc/argv.\n+    gdb_test \"print argc\" \" = 4\"\n+    gdb_test \"print argv\\[0\\]\" \" = $hex \\\".*\\\"\"\n+    gdb_test \"print argv\\[1\\]\" \" = $hex \\\"first arg\\\"\"\n+    gdb_test \"print argv\\[2\\]\" \" = $hex \\\"\\\"\"\n+    gdb_test \"print argv\\[3\\]\" \" = $hex \\\"third-arg\\\"\"\n+}\n+\n+foreach_with_prefix method { \"start\" \"starti\" \"run\" \"set args\" } {\n+    do_test $method\n+}"
    },
    {
      "sha": "444cea01c36a338ab82d4227d9b36e019eedd0e4",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
      "patch": "@@ -242,6 +242,8 @@ proc target_can_use_run_cmd {} {\n \n # Generic run command.\n #\n+# Return 0 if we could start the program, -1 if we could not.\n+#\n # The second pattern below matches up to the first newline *only*.\n # Using ``.*$'' could swallow up output that we attempt to match\n # elsewhere.\n@@ -269,14 +271,14 @@ proc gdb_run_cmd { {inferior_args {}} } {\n     if $use_gdb_stub {\n \tif [target_info exists gdb,do_reload_on_run] {\n \t    if { [gdb_reload $inferior_args] != 0 } {\n-\t\treturn\n+\t\treturn -1\n \t    }\n \t    send_gdb \"continue\\n\"\n \t    gdb_expect 60 {\n \t\t-re \"Continu\\[^\\r\\n\\]*\\[\\r\\n\\]\" {}\n \t\tdefault {}\n \t    }\n-\t    return\n+\t    return 0\n \t}\n \n \tif [target_info exists gdb,start_symbol] {\n@@ -292,7 +294,7 @@ proc gdb_run_cmd { {inferior_args {}} } {\n \t    # clever and not send a command when it has failed.\n \t    if [expr $start_attempt > 3] {\n \t\tperror \"Jump to start() failed (retry count exceeded)\"\n-\t\treturn\n+\t\treturn -1\n \t    }\n \t    set start_attempt [expr $start_attempt + 1]\n \t    gdb_expect 30 {\n@@ -301,7 +303,7 @@ proc gdb_run_cmd { {inferior_args {}} } {\n \t\t}\n \t\t-re \"No symbol \\\"_start\\\" in current.*$gdb_prompt $\" {\n \t\t    perror \"Can't find start symbol to run in gdb_run\"\n-\t\t    return\n+\t\t    return -1\n \t\t}\n \t\t-re \"No symbol \\\"start\\\" in current.*$gdb_prompt $\" {\n \t\t    send_gdb \"jump *_start\\n\"\n@@ -314,22 +316,23 @@ proc gdb_run_cmd { {inferior_args {}} } {\n \t\t}\n \t\t-re \"The program is not being run.*$gdb_prompt $\" {\n \t\t    if { [gdb_reload $inferior_args] != 0 } {\n-\t\t\treturn\n+\t\t\treturn -1\n \t\t    }\n \t\t    send_gdb \"jump *$start\\n\"\n \t\t}\n \t\ttimeout {\n \t\t    perror \"Jump to start() failed (timeout)\"\n-\t\t    return\n+\t\t    return -1\n \t\t}\n \t    }\n \t}\n-\treturn\n+\n+\treturn 0\n     }\n \n     if [target_info exists gdb,do_reload_on_run] {\n \tif { [gdb_reload $inferior_args] != 0 } {\n-\t    return\n+\t    return -1\n \t}\n     }\n     send_gdb \"run $inferior_args\\n\"\n@@ -346,6 +349,8 @@ proc gdb_run_cmd { {inferior_args {}} } {\n \t    # There is no more input expected.\n \t}\n     }\n+\n+    return 0\n }\n \n # Generic start command.  Return 0 if we could start the program, -1"
    }
  ]
}