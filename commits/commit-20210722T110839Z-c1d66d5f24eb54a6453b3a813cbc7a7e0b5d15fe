{
  "sha": "c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzFkNjZkNWYyNGViNTRhNjQ1M2IzYTgxM2NiYzdhN2UwYjVkMTVmZQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-07-22T11:08:39Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-07-22T11:08:39Z"
    },
    "message": "x86: drop xmm_m{b,w,d,q}_mode\n\nThey're effectively redundant with {b,w,d,q}_mode.",
    "tree": {
      "sha": "c3da5145a46c1b4a4c977c2bce11ccc77386f1d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c3da5145a46c1b4a4c977c2bce11ccc77386f1d1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b0556968af05310748d7a1286b8d7639de67831e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0556968af05310748d7a1286b8d7639de67831e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b0556968af05310748d7a1286b8d7639de67831e"
    }
  ],
  "stats": {
    "total": 255,
    "additions": 91,
    "deletions": 164
  },
  "files": [
    {
      "sha": "7a372ce8c0b1121f67f4f3d0c5fa35be1de822c4",
      "filename": "opcodes/i386-dis-evex-mod.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis-evex-mod.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis-evex-mod.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-mod.h?ref=c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
      "patch": "@@ -1,28 +1,28 @@\n   {\n     /* MOD_EVEX_0F12_PREFIX_0 */\n-    { \"vmovlpX\",\t{ XMM, Vex, EXxmm_mq }, PREFIX_OPCODE },\n+    { \"vmovlpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n     { VEX_W_TABLE (EVEX_W_0F12_P_0_M_1) },\n   },\n   {\n     /* MOD_EVEX_0F12_PREFIX_2 */\n-    { \"vmovlpX\",\t{ XMM, Vex, EXxmm_mq }, PREFIX_OPCODE },\n+    { \"vmovlpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n   },\n   {\n     /* MOD_EVEX_0F13 */\n-    { \"vmovlpX\",\t{ EXxmm_mq, XMM }, PREFIX_OPCODE },\n+    { \"vmovlpX\",\t{ EXq, XMM }, PREFIX_OPCODE },\n   },\n   {\n     /* MOD_EVEX_0F16_PREFIX_0 */\n-    { \"vmovhpX\",\t{ XMM, Vex, EXxmm_mq }, PREFIX_OPCODE },\n+    { \"vmovhpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n     { VEX_W_TABLE (EVEX_W_0F16_P_0_M_1) },\n   },\n   {\n     /* MOD_EVEX_0F16_PREFIX_2 */\n-    { \"vmovhpX\",\t{ XMM, Vex, EXxmm_mq }, PREFIX_OPCODE },\n+    { \"vmovhpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n   },\n   {\n     /* MOD_EVEX_0F17 */\n-    { \"vmovhpX\",\t{ EXxmm_mq, XMM }, PREFIX_OPCODE },\n+    { \"vmovhpX\",\t{ EXq, XMM }, PREFIX_OPCODE },\n   },\n   {\n     /* MOD_EVEX_0F2B */"
    },
    {
      "sha": "417eb1bfbff8efa07e8f4d997233e49317a5b5a4",
      "filename": "opcodes/i386-dis-evex-prefix.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis-evex-prefix.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis-evex-prefix.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-prefix.h?ref=c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
      "patch": "@@ -111,16 +111,16 @@\n   /* PREFIX_EVEX_0F78 */\n   {\n     { VEX_W_TABLE (EVEX_W_0F78_P_0) },\n-    { \"vcvttss2usi\",\t{ Gdq, EXxmm_md, EXxEVexS }, 0 },\n+    { \"vcvttss2usi\",\t{ Gdq, EXd, EXxEVexS }, 0 },\n     { VEX_W_TABLE (EVEX_W_0F78_P_2) },\n-    { \"vcvttsd2usi\",\t{ Gdq, EXxmm_mq, EXxEVexS }, 0 },\n+    { \"vcvttsd2usi\",\t{ Gdq, EXq, EXxEVexS }, 0 },\n   },\n   /* PREFIX_EVEX_0F79 */\n   {\n     { VEX_W_TABLE (EVEX_W_0F79_P_0) },\n-    { \"vcvtss2usi\",\t{ Gdq, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vcvtss2usi\",\t{ Gdq, EXd, EXxEVexR }, 0 },\n     { VEX_W_TABLE (EVEX_W_0F79_P_2) },\n-    { \"vcvtsd2usi\",\t{ Gdq, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vcvtsd2usi\",\t{ Gdq, EXq, EXxEVexR }, 0 },\n   },\n   /* PREFIX_EVEX_0F7A */\n   {"
    },
    {
      "sha": "cb27d96d30d316078dc6fd2f41025fca461dc8db",
      "filename": "opcodes/i386-dis-evex-w.h",
      "status": "modified",
      "additions": 27,
      "deletions": 27,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis-evex-w.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis-evex-w.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-w.h?ref=c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
      "patch": "@@ -1,11 +1,11 @@\n   /* EVEX_W_0F10_P_1 */\n   {\n-    { \"vmovss\",\t{ XMScalar, VexScalarR, EXxmm_md }, 0 },\n+    { \"vmovss\",\t{ XMScalar, VexScalarR, EXd }, 0 },\n   },\n   /* EVEX_W_0F10_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vmovsd\",\t{ XMScalar, VexScalarR, EXxmm_mq }, 0 },\n+    { \"vmovsd\",\t{ XMScalar, VexScalarR, EXq }, 0 },\n   },\n   /* EVEX_W_0F11_P_1 */\n   {\n@@ -18,7 +18,7 @@\n   },\n   /* EVEX_W_0F12_P_0_M_1 */\n   {\n-    { \"vmovhlps\",\t{ XMM, Vex, EXxmm_mq }, 0 },\n+    { \"vmovhlps\",\t{ XMM, Vex, EXq }, 0 },\n   },\n   /* EVEX_W_0F12_P_1 */\n   {\n@@ -39,38 +39,38 @@\n   },\n   /* EVEX_W_0F51_P_1 */\n   {\n-    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F51_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F58_P_1 */\n   {\n-    { \"vaddss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vaddss\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F58_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vaddsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vaddsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F59_P_1 */\n   {\n-    { \"vmulss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vmulss\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F59_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vmulsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vmulsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F5A_P_0 */\n   {\n     { \"vcvtps2pd\",   { XM, EXEvexHalfBcstXmmq, EXxEVexS }, 0 },\n   },\n   /* EVEX_W_0F5A_P_1 */\n   {\n-    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexS }, 0 },\n+    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n   },\n   /* EVEX_W_0F5A_P_2 */\n   {\n@@ -80,7 +80,7 @@\n   /* EVEX_W_0F5A_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F5B_P_0 */\n   {\n@@ -97,39 +97,39 @@\n   },\n   /* EVEX_W_0F5C_P_1 */\n   {\n-    { \"vsubss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vsubss\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F5C_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vsubsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vsubsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F5D_P_1 */\n   {\n-    { \"vminss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexS }, 0 },\n+    { \"vminss\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n   },\n   /* EVEX_W_0F5D_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vminsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexS }, 0 },\n+    { \"vminsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexS }, 0 },\n   },\n   /* EVEX_W_0F5E_P_1 */\n   {\n-    { \"vdivss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vdivss\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F5E_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vdivsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vdivsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n   /* EVEX_W_0F5F_P_1 */\n   {\n-    { \"vmaxss\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexS }, 0 },\n+    { \"vmaxss\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n   },\n   /* EVEX_W_0F5F_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vmaxsd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexS }, 0 },\n+    { \"vmaxsd\",\t{ XMScalar, VexScalar, EXq, EXxEVexS }, 0 },\n   },\n   /* EVEX_W_0F62 */\n   {\n@@ -260,12 +260,12 @@\n   },\n   /* EVEX_W_0FC2_P_1 */\n   {\n-    { \"vcmpss\",\t{ MaskG, VexScalar, EXxmm_md, EXxEVexS, CMP }, 0 },\n+    { \"vcmpss\",\t{ MaskG, VexScalar, EXd, EXxEVexS, CMP }, 0 },\n   },\n   /* EVEX_W_0FC2_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vcmpsd\",\t{ MaskG, VexScalar, EXxmm_mq, EXxEVexS, CMP }, 0 },\n+    { \"vcmpsd\",\t{ MaskG, VexScalar, EXq, EXxEVexS, CMP }, 0 },\n   },\n   /* EVEX_W_0FD2 */\n   {\n@@ -382,8 +382,8 @@\n   },\n   /* EVEX_W_0F3819_L_n */\n   {\n-    { \"vbroadcastf32x2\",\t{ XM, EXxmm_mq }, PREFIX_DATA },\n-    { \"vbroadcastsd\",\t{ XM, EXxmm_mq }, PREFIX_DATA },\n+    { \"vbroadcastf32x2\",\t{ XM, EXq }, PREFIX_DATA },\n+    { \"vbroadcastsd\",\t{ XM, EXq }, PREFIX_DATA },\n   },\n   /* EVEX_W_0F381A_M_0_L_n */\n   {\n@@ -499,8 +499,8 @@\n   },\n   /* EVEX_W_0F3859 */\n   {\n-    { \"vbroadcasti32x2\",\t{ XM, EXxmm_mq }, PREFIX_DATA },\n-    { \"vpbroadcastq\",\t{ XM, EXxmm_mq }, PREFIX_DATA },\n+    { \"vbroadcasti32x2\",\t{ XM, EXq }, PREFIX_DATA },\n+    { \"vpbroadcastq\",\t{ XM, EXq }, PREFIX_DATA },\n   },\n   /* EVEX_W_0F385A_M_0_L_n */\n   {\n@@ -561,12 +561,12 @@\n   },\n   /* EVEX_W_0F3A0A */\n   {\n-    { \"vrndscaless\",\t{ XMScalar, VexScalar, EXxmm_md, EXxEVexS, Ib }, PREFIX_DATA },\n+    { \"vrndscaless\",\t{ XMScalar, VexScalar, EXd, EXxEVexS, Ib }, PREFIX_DATA },\n   },\n   /* EVEX_W_0F3A0B */\n   {\n     { Bad_Opcode },\n-    { \"vrndscalesd\",\t{ XMScalar, VexScalar, EXxmm_mq, EXxEVexS, Ib }, PREFIX_DATA },\n+    { \"vrndscalesd\",\t{ XMScalar, VexScalar, EXq, EXxEVexS, Ib }, PREFIX_DATA },\n   },\n   /* EVEX_W_0F3A18_L_n */\n   {"
    },
    {
      "sha": "27b6b8e8f44ada44ba155d1dd0252ef9c3414bab",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 54,
      "deletions": 127,
      "changes": 181,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
      "patch": "@@ -352,6 +352,7 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define EMd { OP_EM, d_mode }\n #define EMx { OP_EM, x_mode }\n #define EXbwUnit { OP_EX, bw_unit_mode }\n+#define EXb { OP_EX, b_mode }\n #define EXw { OP_EX, w_mode }\n #define EXd { OP_EX, d_mode }\n #define EXdS { OP_EX, d_swap_mode }\n@@ -364,10 +365,6 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define EXtmm { OP_EX, tmm_mode }\n #define EXxmmq { OP_EX, xmmq_mode }\n #define EXEvexHalfBcstXmmq { OP_EX, evex_half_bcst_xmmq_mode }\n-#define EXxmm_mb { OP_EX, xmm_mb_mode }\n-#define EXxmm_mw { OP_EX, xmm_mw_mode }\n-#define EXxmm_md { OP_EX, xmm_md_mode }\n-#define EXxmm_mq { OP_EX, xmm_mq_mode }\n #define EXxmmdw { OP_EX, xmmdw_mode }\n #define EXxmmqd { OP_EX, xmmqd_mode }\n #define EXymmq { OP_EX, ymmq_mode }\n@@ -488,14 +485,6 @@ enum\n   xmmq_mode,\n   /* Same as xmmq_mode, but broadcast is allowed.  */\n   evex_half_bcst_xmmq_mode,\n-  /* XMM register or byte memory operand */\n-  xmm_mb_mode,\n-  /* XMM register or word memory operand */\n-  xmm_mw_mode,\n-  /* XMM register or double word memory operand */\n-  xmm_md_mode,\n-  /* XMM register or quad word memory operand */\n-  xmm_mq_mode,\n   /* 16-byte XMM, word, double word or quad word operand.  */\n   xmmdw_mode,\n   /* 16-byte XMM, double word, quad word operand or xmm word operand.  */\n@@ -3610,9 +3599,9 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F10 */\n   {\n     { \"vmovups\",\t{ XM, EXx }, 0 },\n-    { \"vmovss\",\t\t{ XMScalar, VexScalarR, EXxmm_md }, 0 },\n+    { \"vmovss\",\t\t{ XMScalar, VexScalarR, EXd }, 0 },\n     { \"vmovupd\",\t{ XM, EXx }, 0 },\n-    { \"vmovsd\",\t\t{ XMScalar, VexScalarR, EXxmm_mq }, 0 },\n+    { \"vmovsd\",\t\t{ XMScalar, VexScalarR, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F11 */\n@@ -3649,31 +3638,31 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F2C */\n   {\n     { Bad_Opcode },\n-    { \"vcvttss2si\",\t{ Gdq, EXxmm_md, EXxEVexS }, 0 },\n+    { \"vcvttss2si\",\t{ Gdq, EXd, EXxEVexS }, 0 },\n     { Bad_Opcode },\n-    { \"vcvttsd2si\",\t{ Gdq, EXxmm_mq, EXxEVexS }, 0 },\n+    { \"vcvttsd2si\",\t{ Gdq, EXq, EXxEVexS }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2D */\n   {\n     { Bad_Opcode },\n-    { \"vcvtss2si\",\t{ Gdq, EXxmm_md, EXxEVexR }, 0 },\n+    { \"vcvtss2si\",\t{ Gdq, EXd, EXxEVexR }, 0 },\n     { Bad_Opcode },\n-    { \"vcvtsd2si\",\t{ Gdq, EXxmm_mq, EXxEVexR }, 0 },\n+    { \"vcvtsd2si\",\t{ Gdq, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2E */\n   {\n-    { \"vucomisX\",\t{ XMScalar, EXxmm_md, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vucomisX\",\t{ XMScalar, EXd, EXxEVexS }, PREFIX_OPCODE },\n     { Bad_Opcode },\n-    { \"vucomisX\",\t{ XMScalar, EXxmm_mq, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vucomisX\",\t{ XMScalar, EXq, EXxEVexS }, PREFIX_OPCODE },\n   },\n \n   /* PREFIX_VEX_0F2F */\n   {\n-    { \"vcomisX\",\t{ XMScalar, EXxmm_md, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vcomisX\",\t{ XMScalar, EXd, EXxEVexS }, PREFIX_OPCODE },\n     { Bad_Opcode },\n-    { \"vcomisX\",\t{ XMScalar, EXxmm_mq, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vcomisX\",\t{ XMScalar, EXq, EXxEVexS }, PREFIX_OPCODE },\n   },\n \n   /* PREFIX_VEX_0F41_L_1_M_1_W_0 */\n@@ -3789,45 +3778,45 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F51 */\n   {\n     { \"vsqrtps\",\t{ XM, EXx }, 0 },\n-    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vsqrtpd\",\t{ XM, EXx }, 0 },\n-    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F52 */\n   {\n     { \"vrsqrtps\",\t{ XM, EXx }, 0 },\n-    { \"vrsqrtss\",\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vrsqrtss\",\t{ XMScalar, VexScalar, EXd }, 0 },\n   },\n \n   /* PREFIX_VEX_0F53 */\n   {\n     { \"vrcpps\",\t\t{ XM, EXx }, 0 },\n-    { \"vrcpss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vrcpss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n   },\n \n   /* PREFIX_VEX_0F58 */\n   {\n     { \"vaddps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vaddss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vaddss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vaddpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vaddsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vaddsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F59 */\n   {\n     { \"vmulps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmulss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vmulss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vmulpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmulsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vmulsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5A */\n   {\n     { \"vcvtps2pd\",\t{ XM, EXxmmq }, 0 },\n-    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vcvtpd2ps%XY\",{ XMM, EXx }, 0 },\n-    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5B */\n@@ -3840,33 +3829,33 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F5C */\n   {\n     { \"vsubps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vsubss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vsubss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vsubpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vsubsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vsubsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5D */\n   {\n     { \"vminps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vminss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vminss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vminpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vminsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vminsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5E */\n   {\n     { \"vdivps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vdivss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vdivss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vdivpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vdivsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vdivsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5F */\n   {\n     { \"vmaxps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmaxss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vmaxss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n     { \"vmaxpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmaxsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vmaxsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F6F */\n@@ -4005,9 +3994,9 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0FC2 */\n   {\n     { \"vcmpps\",\t\t{ XM, Vex, EXx, CMP }, 0 },\n-    { \"vcmpss\",\t\t{ XMScalar, VexScalar, EXxmm_md, CMP }, 0 },\n+    { \"vcmpss\",\t\t{ XMScalar, VexScalar, EXd, CMP }, 0 },\n     { \"vcmppd\",\t\t{ XM, Vex, EXx, CMP }, 0 },\n-    { \"vcmpsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq, CMP }, 0 },\n+    { \"vcmpsd\",\t\t{ XMScalar, VexScalar, EXq, CMP }, 0 },\n   },\n \n   /* PREFIX_VEX_0FD0 */\n@@ -6441,8 +6430,8 @@ static const struct dis386 vex_table[][256] = {\n     /* 08 */\n     { \"vroundps\",\t{ XM, EXx, Ib }, PREFIX_DATA },\n     { \"vroundpd\",\t{ XM, EXx, Ib }, PREFIX_DATA },\n-    { \"vroundss\",\t{ XMScalar, VexScalar, EXxmm_md, Ib }, PREFIX_DATA },\n-    { \"vroundsd\",\t{ XMScalar, VexScalar, EXxmm_mq, Ib }, PREFIX_DATA },\n+    { \"vroundss\",\t{ XMScalar, VexScalar, EXd, Ib }, PREFIX_DATA },\n+    { \"vroundsd\",\t{ XMScalar, VexScalar, EXq, Ib }, PREFIX_DATA },\n     { \"vblendps\",\t{ XM, Vex, EXx, Ib }, PREFIX_DATA },\n     { \"vblendpd\",\t{ XM, Vex, EXx, Ib }, PREFIX_DATA },\n     { \"vpblendw\",\t{ XM, Vex, EXx, Ib }, PREFIX_DATA },\n@@ -6549,12 +6538,12 @@ static const struct dis386 vex_table[][256] = {\n     /* 68 */\n     { \"vfmaddps\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n     { \"vfmaddpd\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n-    { \"vfmaddss\",\t{ XMScalar, VexScalar, EXxmm_md, XMVexScalarI4 }, PREFIX_DATA },\n-    { \"vfmaddsd\",\t{ XMScalar, VexScalar, EXxmm_mq, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfmaddss\",\t{ XMScalar, VexScalar, EXd, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfmaddsd\",\t{ XMScalar, VexScalar, EXq, XMVexScalarI4 }, PREFIX_DATA },\n     { \"vfmsubps\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n     { \"vfmsubpd\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n-    { \"vfmsubss\",\t{ XMScalar, VexScalar, EXxmm_md, XMVexScalarI4 }, PREFIX_DATA },\n-    { \"vfmsubsd\",\t{ XMScalar, VexScalar, EXxmm_mq, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfmsubss\",\t{ XMScalar, VexScalar, EXd, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfmsubsd\",\t{ XMScalar, VexScalar, EXq, XMVexScalarI4 }, PREFIX_DATA },\n     /* 70 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -6567,12 +6556,12 @@ static const struct dis386 vex_table[][256] = {\n     /* 78 */\n     { \"vfnmaddps\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n     { \"vfnmaddpd\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n-    { \"vfnmaddss\",\t{ XMScalar, VexScalar, EXxmm_md, XMVexScalarI4 }, PREFIX_DATA },\n-    { \"vfnmaddsd\",\t{ XMScalar, VexScalar, EXxmm_mq, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfnmaddss\",\t{ XMScalar, VexScalar, EXd, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfnmaddsd\",\t{ XMScalar, VexScalar, EXq, XMVexScalarI4 }, PREFIX_DATA },\n     { \"vfnmsubps\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n     { \"vfnmsubpd\", { XM, Vex, EXx, XMVexI4 }, PREFIX_DATA },\n-    { \"vfnmsubss\",\t{ XMScalar, VexScalar, EXxmm_md, XMVexScalarI4 }, PREFIX_DATA },\n-    { \"vfnmsubsd\",\t{ XMScalar, VexScalar, EXxmm_mq, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfnmsubss\",\t{ XMScalar, VexScalar, EXd, XMVexScalarI4 }, PREFIX_DATA },\n+    { \"vfnmsubsd\",\t{ XMScalar, VexScalar, EXq, XMVexScalarI4 }, PREFIX_DATA },\n     /* 80 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -6813,7 +6802,7 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F7E_P_1 */\n   {\n-    { \"vmovq\",\t\t{ XMScalar, EXxmm_mq }, 0 },\n+    { \"vmovq\",\t\t{ XMScalar, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F7E_P_2 */\n@@ -7533,11 +7522,11 @@ static const struct dis386 vex_w_table[][2] = {\n   },\n   {\n     /* VEX_W_0F3818 */\n-    { \"vbroadcastss\",\t{ XM, EXxmm_md }, PREFIX_DATA },\n+    { \"vbroadcastss\",\t{ XM, EXd }, PREFIX_DATA },\n   },\n   {\n     /* VEX_W_0F3819_L_1 */\n-    { \"vbroadcastsd\",\t{ XM, EXxmm_mq }, PREFIX_DATA },\n+    { \"vbroadcastsd\",\t{ XM, EXq }, PREFIX_DATA },\n   },\n   {\n     /* VEX_W_0F381A_M_0_L_1 */\n@@ -7609,11 +7598,11 @@ static const struct dis386 vex_w_table[][2] = {\n   },\n   {\n     /* VEX_W_0F3858 */\n-    { \"vpbroadcastd\", { XM, EXxmm_md }, PREFIX_DATA },\n+    { \"vpbroadcastd\", { XM, EXd }, PREFIX_DATA },\n   },\n   {\n     /* VEX_W_0F3859 */\n-    { \"vpbroadcastq\",\t{ XM, EXxmm_mq }, PREFIX_DATA },\n+    { \"vpbroadcastq\", { XM, EXq }, PREFIX_DATA },\n   },\n   {\n     /* VEX_W_0F385A_M_0_L_0 */\n@@ -7641,11 +7630,11 @@ static const struct dis386 vex_w_table[][2] = {\n   },\n   {\n     /* VEX_W_0F3878 */\n-    { \"vpbroadcastb\",\t{ XM, EXxmm_mb }, PREFIX_DATA },\n+    { \"vpbroadcastb\",\t{ XM, EXb }, PREFIX_DATA },\n   },\n   {\n     /* VEX_W_0F3879 */\n-    { \"vpbroadcastw\",\t{ XM, EXxmm_mw }, PREFIX_DATA },\n+    { \"vpbroadcastw\",\t{ XM, EXw }, PREFIX_DATA },\n   },\n   {\n     /* VEX_W_0F38CF */\n@@ -11107,66 +11096,6 @@ intel_operand_size (int bytemode, int sizeflag)\n \t  abort ();\n \t}\n       break;\n-    case xmm_mb_mode:\n-      if (!need_vex)\n-\tabort ();\n-\n-      switch (vex.length)\n-\t{\n-\tcase 128:\n-\tcase 256:\n-\tcase 512:\n-\t  oappend (\"BYTE PTR \");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-    case xmm_mw_mode:\n-      if (!need_vex)\n-\tabort ();\n-\n-      switch (vex.length)\n-\t{\n-\tcase 128:\n-\tcase 256:\n-\tcase 512:\n-\t  oappend (\"WORD PTR \");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-    case xmm_md_mode:\n-      if (!need_vex)\n-\tabort ();\n-\n-      switch (vex.length)\n-\t{\n-\tcase 128:\n-\tcase 256:\n-\tcase 512:\n-\t  oappend (\"DWORD PTR \");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-    case xmm_mq_mode:\n-      if (!need_vex)\n-\tabort ();\n-\n-      switch (vex.length)\n-\t{\n-\tcase 128:\n-\tcase 256:\n-\tcase 512:\n-\t  oappend (\"QWORD PTR \");\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n     case xmmdw_mode:\n       if (!need_vex)\n \tabort ();\n@@ -11424,19 +11353,18 @@ OP_E_memory (int bytemode, int sizeflag)\n \t{\n \tcase dqw_mode:\n \tcase dw_mode:\n-\tcase xmm_mw_mode:\n+\tcase w_mode:\n \t  shift = 1;\n \t  break;\n \tcase dqb_mode:\n \tcase db_mode:\n-\tcase xmm_mb_mode:\n+\tcase b_mode:\n \t  shift = 0;\n \t  break;\n \tcase dq_mode:\n \t  if (address_mode != mode_64bit)\n \t    {\n \tcase dqd_mode:\n-\tcase xmm_md_mode:\n \tcase d_mode:\n \tcase d_swap_mode:\n \t      shift = 2;\n@@ -11493,7 +11421,6 @@ OP_E_memory (int bytemode, int sizeflag)\n \tcase xmm_mode:\n \t  shift = 4;\n \t  break;\n-\tcase xmm_mq_mode:\n \tcase q_mode:\n \tcase q_swap_mode:\n \t  shift = 3;\n@@ -12566,10 +12493,10 @@ print_vector_reg (unsigned int reg, int bytemode)\n \t   && bytemode != scalar_mode\n \t   && bytemode != xmmdw_mode\n \t   && bytemode != xmmqd_mode\n-\t   && bytemode != xmm_mb_mode\n-\t   && bytemode != xmm_mw_mode\n-\t   && bytemode != xmm_md_mode\n-\t   && bytemode != xmm_mq_mode\n+\t   && bytemode != b_mode\n+\t   && bytemode != w_mode\n+\t   && bytemode != d_mode\n+\t   && bytemode != q_mode\n \t   && bytemode != vex_scalar_w_dq_mode)\n     {\n       switch (vex.length)"
    }
  ]
}