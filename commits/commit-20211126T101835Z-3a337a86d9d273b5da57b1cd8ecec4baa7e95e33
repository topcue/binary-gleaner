{
  "sha": "3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
  "node_id": "C_kwDOANOeidoAKDNhMzM3YTg2ZDlkMjczYjVkYTU3YjFjZDhlY2VjNGJhYTdlOTVlMzM",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-09-28T21:11:42Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-26T10:18:35Z"
    },
    "message": "opcodes/riscv: add disassembler options support to libopcodes\n\nIn preparation for the next commit, which will add GDB support for\nRISC-V disassembler options, this commit restructures how the\ndisassembler options are managed within libopcodes.\n\nThe implementation provided here is based on this mailing list patch\nwhich was never committed:\n\n  https://sourceware.org/pipermail/binutils/2021-January/114944.html\n\nwhich in turn took inspiration from the MIPS implementation of the\nsame feature.\n\nThe biggest changes from the original mailing list post are:\n\n  1. The GDB changes have been split into a separate patch, and\n\n  2. The `riscv_option_args_privspec` variable, which held the valid\n  priv-spec values is now gone, instead we use the `riscv_priv_specs`\n  array from bfd/cpu-riscv.c instead.\n\nCo-authored-by: Simon Cook <simon.cook@embecosm.com>\n\ninclude/ChangeLog:\n\n\t* dis-asm.h (disassembler_options_riscv): Declare.\n\nopcodes/ChangeLog:\n\n\t* riscv-dis.c (enum riscv_option_arg_t): New enum typedef.\n\t(riscv_options): New static global.\n\t(disassembler_options_riscv): New function.\n\t(print_riscv_disassembler_options): Rewrite to use\n\tdisassembler_options_riscv.",
    "tree": {
      "sha": "b7b3022634d0a3bc5e1c6b12bbeed1c8ac337555",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7b3022634d0a3bc5e1c6b12bbeed1c8ac337555"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "4780e5e4933a2497a5aecc4ceabbbb8e82aaf822",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4780e5e4933a2497a5aecc4ceabbbb8e82aaf822",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4780e5e4933a2497a5aecc4ceabbbb8e82aaf822"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 153,
    "deletions": 9
  },
  "files": [
    {
      "sha": "c0486e9acf9180917a9e92c74c755e1f11603e99",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
      "patch": "@@ -1,3 +1,8 @@\n+2021-11-25  Andrew Burgess  <aburgess@redhat.com>\n+\t    Simon Cook  <simon.cook@embecosm.com>\n+\n+\t* dis-asm.h (disassembler_options_riscv): Declare.\n+\n 2021-11-16  Fangrui Song  <maskray@google.com>\n \n \t* elf/common.h (DT_ENCODING): Bump to 38."
    },
    {
      "sha": "81cefb94b2b8d79f2479a0fb0fb1833e690fe147",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
      "patch": "@@ -320,6 +320,7 @@ extern const disasm_options_and_args_t *disassembler_options_arc (void);\n extern const disasm_options_and_args_t *disassembler_options_arm (void);\n extern const disasm_options_and_args_t *disassembler_options_mips (void);\n extern const disasm_options_and_args_t *disassembler_options_powerpc (void);\n+extern const disasm_options_and_args_t *disassembler_options_riscv (void);\n extern const disasm_options_and_args_t *disassembler_options_s390 (void);\n \n /* Fetch the disassembler for a given architecture ARC, endianess (big"
    },
    {
      "sha": "7bf0094cf0dafbfdcb238b7f315c76920d980edc",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
      "patch": "@@ -1,3 +1,12 @@\n+2021-11-25  Andrew Burgess  <aburgess@redhat.com>\n+\t    Simon Cook  <simon.cook@embecosm.com>\n+\n+\t* riscv-dis.c (enum riscv_option_arg_t): New enum typedef.\n+\t(riscv_options): New static global.\n+\t(disassembler_options_riscv): New function.\n+\t(print_riscv_disassembler_options): Rewrite to use\n+\tdisassembler_options_riscv.\n+\n 2021-11-25  Nick Clifton  <nickc@redhat.com>\n \n \tPR 28614"
    },
    {
      "sha": "18e498a0f2216d19601c58dc82d727b690422795",
      "filename": "opcodes/riscv-dis.c",
      "status": "modified",
      "additions": 138,
      "deletions": 9,
      "changes": 147,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/opcodes/riscv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a337a86d9d273b5da57b1cd8ecec4baa7e95e33/opcodes/riscv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-dis.c?ref=3a337a86d9d273b5da57b1cd8ecec4baa7e95e33",
      "patch": "@@ -990,24 +990,153 @@ riscv_symbol_is_valid (asymbol * sym,\n   return (strcmp (name, RISCV_FAKE_LABEL_NAME) != 0\n \t  && !riscv_elf_is_mapping_symbols (name));\n }\n+\f\n+\n+/* Indices into option argument vector for options accepting an argument.\n+   Use RISCV_OPTION_ARG_NONE for options accepting no argument.  */\n+\n+typedef enum\n+{\n+  RISCV_OPTION_ARG_NONE = -1,\n+  RISCV_OPTION_ARG_PRIV_SPEC,\n+\n+  RISCV_OPTION_ARG_COUNT\n+} riscv_option_arg_t;\n+\n+/* Valid RISCV disassembler options.  */\n+\n+static struct\n+{\n+  const char *name;\n+  const char *description;\n+  riscv_option_arg_t arg;\n+} riscv_options[] =\n+{\n+  { \"numeric\",\n+    N_(\"Print numeric register names, rather than ABI names.\"),\n+    RISCV_OPTION_ARG_NONE },\n+  { \"no-aliases\",\n+    N_(\"Disassemble only into canonical instructions.\"),\n+    RISCV_OPTION_ARG_NONE },\n+  { \"priv-spec=\",\n+    N_(\"Print the CSR according to the chosen privilege spec.\"),\n+    RISCV_OPTION_ARG_PRIV_SPEC }\n+};\n+\n+/* Build the structure representing valid RISCV disassembler options.\n+   This is done dynamically for maintenance ease purpose; a static\n+   initializer would be unreadable.  */\n+\n+const disasm_options_and_args_t *\n+disassembler_options_riscv (void)\n+{\n+  static disasm_options_and_args_t *opts_and_args;\n+\n+  if (opts_and_args == NULL)\n+    {\n+      size_t num_options = ARRAY_SIZE (riscv_options);\n+      size_t num_args = RISCV_OPTION_ARG_COUNT;\n+      disasm_option_arg_t *args;\n+      disasm_options_t *opts;\n+      size_t i, priv_spec_count;\n+\n+      args = XNEWVEC (disasm_option_arg_t, num_args + 1);\n+\n+      args[RISCV_OPTION_ARG_PRIV_SPEC].name = \"SPEC\";\n+      priv_spec_count = PRIV_SPEC_CLASS_DRAFT - PRIV_SPEC_CLASS_NONE - 1;\n+      args[RISCV_OPTION_ARG_PRIV_SPEC].values\n+        = XNEWVEC (const char *, priv_spec_count + 1);\n+      for (i = 0; i < priv_spec_count; i++)\n+\targs[RISCV_OPTION_ARG_PRIV_SPEC].values[i]\n+          = riscv_priv_specs[i].name;\n+      /* The array we return must be NULL terminated.  */\n+      args[RISCV_OPTION_ARG_PRIV_SPEC].values[i] = NULL;\n+\n+      /* The array we return must be NULL terminated.  */\n+      args[num_args].name = NULL;\n+      args[num_args].values = NULL;\n+\n+      opts_and_args = XNEW (disasm_options_and_args_t);\n+      opts_and_args->args = args;\n+\n+      opts = &opts_and_args->options;\n+      opts->name = XNEWVEC (const char *, num_options + 1);\n+      opts->description = XNEWVEC (const char *, num_options + 1);\n+      opts->arg = XNEWVEC (const disasm_option_arg_t *, num_options + 1);\n+      for (i = 0; i < num_options; i++)\n+\t{\n+\t  opts->name[i] = riscv_options[i].name;\n+\t  opts->description[i] = _(riscv_options[i].description);\n+\t  if (riscv_options[i].arg != RISCV_OPTION_ARG_NONE)\n+\t    opts->arg[i] = &args[riscv_options[i].arg];\n+\t  else\n+\t    opts->arg[i] = NULL;\n+\t}\n+      /* The array we return must be NULL terminated.  */\n+      opts->name[i] = NULL;\n+      opts->description[i] = NULL;\n+      opts->arg[i] = NULL;\n+    }\n+\n+  return opts_and_args;\n+}\n \n void\n print_riscv_disassembler_options (FILE *stream)\n {\n+  const disasm_options_and_args_t *opts_and_args;\n+  const disasm_option_arg_t *args;\n+  const disasm_options_t *opts;\n+  size_t max_len = 0;\n+  size_t i;\n+  size_t j;\n+\n+  opts_and_args = disassembler_options_riscv ();\n+  opts = &opts_and_args->options;\n+  args = opts_and_args->args;\n+\n   fprintf (stream, _(\"\\n\\\n-The following RISC-V-specific disassembler options are supported for use\\n\\\n+The following RISC-V specific disassembler options are supported for use\\n\\\n with the -M switch (multiple options should be separated by commas):\\n\"));\n+  fprintf (stream, \"\\n\");\n \n-  fprintf (stream, _(\"\\n\\\n-  numeric         Print numeric register names, rather than ABI names.\\n\"));\n+  /* Compute the length of the longest option name.  */\n+  for (i = 0; opts->name[i] != NULL; i++)\n+    {\n+      size_t len = strlen (opts->name[i]);\n \n-  fprintf (stream, _(\"\\n\\\n-  no-aliases      Disassemble only into canonical instructions, rather\\n\\\n-                  than into pseudoinstructions.\\n\"));\n+      if (opts->arg[i] != NULL)\n+\tlen += strlen (opts->arg[i]->name);\n+      if (max_len < len)\n+\tmax_len = len;\n+    }\n \n-  fprintf (stream, _(\"\\n\\\n-  priv-spec=PRIV  Print the CSR according to the chosen privilege spec\\n\\\n-                  (1.9, 1.9.1, 1.10, 1.11).\\n\"));\n+  for (i = 0, max_len++; opts->name[i] != NULL; i++)\n+    {\n+      fprintf (stream, \"  %s\", opts->name[i]);\n+      if (opts->arg[i] != NULL)\n+\tfprintf (stream, \"%s\", opts->arg[i]->name);\n+      if (opts->description[i] != NULL)\n+\t{\n+\t  size_t len = strlen (opts->name[i]);\n+\n+\t  if (opts->arg != NULL && opts->arg[i] != NULL)\n+\t    len += strlen (opts->arg[i]->name);\n+\t  fprintf (stream, \"%*c %s\", (int) (max_len - len), ' ',\n+                   opts->description[i]);\n+\t}\n+      fprintf (stream, \"\\n\");\n+    }\n+\n+  for (i = 0; args[i].name != NULL; i++)\n+    {\n+      fprintf (stream, _(\"\\n\\\n+  For the options above, the following values are supported for \\\"%s\\\":\\n   \"),\n+\t       args[i].name);\n+      for (j = 0; args[i].values[j] != NULL; j++)\n+\tfprintf (stream, \" %s\", args[i].values[j]);\n+      fprintf (stream, _(\"\\n\"));\n+    }\n \n   fprintf (stream, _(\"\\n\"));\n }"
    }
  ]
}