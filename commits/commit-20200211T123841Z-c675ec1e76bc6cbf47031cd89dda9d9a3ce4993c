{
  "sha": "c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzY3NWVjMWU3NmJjNmNiZjQ3MDMxY2Q4OWRkYTlkOWEzY2U0OTkzYw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-02-11T12:38:41Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-02-11T12:38:41Z"
    },
    "message": "Fix building the bfd/elf32-msp430.c file on a 32-bit host.\n\n\t* elf32-msp430.c (msp430_final_link_relocate): Always use longs\n\tfor addresses in print statements.\n\t(msp430_elf_relax_delete_bytes): Likewise.\n\t(msp430_elf_relax_add_words): Likewise.\n\t(msp430_elf_relax_section): Likewise.",
    "tree": {
      "sha": "4080d6dcf5e908690f7594e44c78695ec916143c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4080d6dcf5e908690f7594e44c78695ec916143c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d07a805c8ffb611b1ee21b30dd16f10ff8b11bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d07a805c8ffb611b1ee21b30dd16f10ff8b11bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d07a805c8ffb611b1ee21b30dd16f10ff8b11bf"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 34,
    "deletions": 20
  },
  "files": [
    {
      "sha": "52360a7020b25425df0b22c0be76687c91c3fe84",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-11  Nick Clifton  <nickc@redhat.com>\n+\n+\t* elf32-msp430.c (msp430_final_link_relocate): Always use longs\n+\tfor addresses in print statements.\n+\t(msp430_elf_relax_delete_bytes): Likewise.\n+\t(msp430_elf_relax_add_words): Likewise.\n+\t(msp430_elf_relax_section): Likewise.\n+\n 2020-02-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* plugin.c (add_symbols): Clear plugin_data memory."
    },
    {
      "sha": "784c32ed02dcf7a13a4b29ad8dbdb75bac65a3b8",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 26,
      "deletions": 20,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=c675ec1e76bc6cbf47031cd89dda9d9a3ce4993c",
      "patch": "@@ -746,8 +746,8 @@ msp430_final_link_relocate (reloc_howto_type *\t   howto,\n \n   if (debug_relocs)\n     printf (\"writing relocation (%p) at 0x%lx type: %d\\n\", rel,\n-\t    input_section->output_section->vma + input_section->output_offset\n-\t    + rel->r_offset, howto->type);\n+\t    (long) (input_section->output_section->vma + input_section->output_offset\n+\t\t    + rel->r_offset), howto->type);\n   if (sym_diff_section != NULL)\n     {\n       BFD_ASSERT (sym_diff_section == input_section);\n@@ -1671,7 +1671,7 @@ msp430_elf_relax_delete_bytes (bfd * abfd, asection * sec, bfd_vma addr,\n   toaddr = sec->size;\n   if (debug_relocs)\n     printf (\"      deleting %d bytes between 0x%lx to 0x%lx\\n\",\n-\t    count, addr, toaddr);\n+\t    count, (long) addr, (long) toaddr);\n \n   irel = elf_section_data (sec)->relocs;\n   irelend = irel + sec->reloc_count;\n@@ -1721,13 +1721,13 @@ msp430_elf_relax_delete_bytes (bfd * abfd, asection * sec, bfd_vma addr,\n \t{\n \t  if (debug_relocs)\n \t    printf (\"      adjusting value of local symbol %s from 0x%lx \",\n-\t\t    name, isym->st_value);\n+\t\t    name, (long) isym->st_value);\n \t  if (isym->st_value < addr + count)\n \t    isym->st_value = addr;\n \t  else\n \t    isym->st_value -= count;\n \t  if (debug_relocs)\n-\t    printf (\"to 0x%lx\\n\", isym->st_value);\n+\t    printf (\"to 0x%lx\\n\", (long) isym->st_value);\n \t}\n       /* Adjust the function symbol's size as well.  */\n       else if (ELF_ST_TYPE (isym->st_info) == STT_FUNC\n@@ -1788,7 +1788,7 @@ msp430_elf_relax_add_words (bfd * abfd, asection * sec, bfd_vma addr,\n   asection *p;\n   if (debug_relocs)\n     printf (\"      adding %d words at 0x%lx\\n\", num_words,\n-\t    sec->output_section->vma + sec->output_offset + addr);\n+\t    (long) (sec->output_section->vma + sec->output_offset + addr));\n \n   contents = elf_section_data (sec)->this_hdr.contents;\n   sec_end = sec->size;\n@@ -1832,7 +1832,7 @@ msp430_elf_relax_add_words (bfd * abfd, asection * sec, bfd_vma addr,\n \t  printf (\"      adjusting value of local symbol %s from 0x%lx to \"\n \t\t  \"0x%lx\\n\", bfd_elf_string_from_elf_section\n \t\t  (abfd, symtab_hdr->sh_link, isym->st_name),\n-\t\t  isym->st_value, isym->st_value + num_bytes);\n+\t\t  (long) isym->st_value, (long)(isym->st_value + num_bytes));\n \tisym->st_value += num_bytes;\n       }\n \n@@ -1881,7 +1881,7 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \n   if (debug_relocs)\n     printf (\"Relaxing %s (%p), output_offset: 0x%lx sec size: 0x%lx\\n\",\n-\t    sec->name, sec, sec->output_offset, sec->size);\n+\t    sec->name, sec, (long) sec->output_offset, (long) sec->size);\n \n   symtab_hdr = & elf_tdata (abfd)->symtab_hdr;\n \n@@ -1955,11 +1955,12 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \n \t  if (debug_relocs)\n \t    printf (\"    processing reloc at 0x%lx for local sym: %s \"\n-\t\t    \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n-\t\t    + sec->output_section->vma + irel->r_offset,\n+\t\t    \"st_value: 0x%lx adj value: 0x%lx\\n\",\n+\t\t    (long) (sec->output_offset + sec->output_section->vma\n+\t\t\t    + irel->r_offset),\n \t\t    bfd_elf_string_from_elf_section (abfd, symtab_hdr->sh_link,\n \t\t\t\t\t\t     isym->st_name),\n-\t\t    isym->st_value, symval);\n+\t\t    (long) isym->st_value, (long) symval);\n \t}\n       else\n \t{\n@@ -1983,9 +1984,11 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t\t    + h->root.u.def.section->output_offset);\n \t  if (debug_relocs)\n \t    printf (\"    processing reloc at 0x%lx for global sym: %s \"\n-\t\t    \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n-\t\t    + sec->output_section->vma + irel->r_offset,\n-\t\t    h->root.root.string, h->root.u.def.value, symval);\n+\t\t    \"st_value: 0x%lx adj value: 0x%lx\\n\",\n+\t\t    (long) (sec->output_offset + sec->output_section->vma\n+\t\t    + irel->r_offset),\n+\t      h->root.root.string, (long) h->root.u.def.value,\n+\t      (long) symval);\n \t}\n \n       /* For simplicity of coding, we are going to modify the section\n@@ -2176,11 +2179,12 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \n \t    if (debug_relocs)\n \t      printf (\"    processing reloc at 0x%lx for local sym: %s \"\n-\t\t      \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n-\t\t      + sec->output_section->vma + irel->r_offset,\n+\t\t      \"st_value: 0x%lx adj value: 0x%lx\\n\",\n+\t\t      (long) (sec->output_offset + sec->output_section->vma\n+\t\t\t      + irel->r_offset),\n \t\t      bfd_elf_string_from_elf_section\n \t\t      (abfd, symtab_hdr->sh_link, isym->st_name),\n-\t\t      isym->st_value, symval);\n+\t\t      (long) isym->st_value, (long) symval);\n \t  }\n \telse\n \t  {\n@@ -2204,9 +2208,11 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t\t      + h->root.u.def.section->output_offset);\n \t    if (debug_relocs)\n \t      printf (\"    processing reloc at 0x%lx for global sym: %s \"\n-\t\t      \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n-\t\t      + sec->output_section->vma + irel->r_offset,\n-\t\t      h->root.root.string, h->root.u.def.value, symval);\n+\t\t      \"st_value: 0x%lx adj value: 0x%lx\\n\", (long)\n+\t\t      (sec->output_offset + sec->output_section->vma\n+\t\t       + irel->r_offset),\n+\t\t      h->root.root.string, (long) h->root.u.def.value,\n+\t\t      (long) symval);\n \t  }\n \n \t/* For simplicity of coding, we are going to modify the section"
    }
  ]
}