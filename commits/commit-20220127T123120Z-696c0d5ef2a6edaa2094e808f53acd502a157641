{
  "sha": "696c0d5ef2a6edaa2094e808f53acd502a157641",
  "node_id": "C_kwDOANOeidoAKDY5NmMwZDVlZjJhNmVkYWEyMDk0ZTgwOGY1M2FjZDUwMmExNTc2NDE",
  "commit": {
    "author": {
      "name": "Markus Metzger",
      "email": "markus.t.metzger@intel.com",
      "date": "2021-11-25T14:15:52Z"
    },
    "committer": {
      "name": "Markus Metzger",
      "email": "markus.t.metzger@intel.com",
      "date": "2022-01-27T12:31:20Z"
    },
    "message": "gdb, gdbserver: update thread identifier in enable_btrace target method\n\nThe enable_btrace target method takes a ptid_t to identify the thread on\nwhich tracing shall be enabled.\n\nChange this to thread_info * to avoid translating back and forth between\nthe two.  This will be used in a subsequent patch.",
    "tree": {
      "sha": "351b7bfa2d640104e2a5b1db0136fc29814ee388",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/351b7bfa2d640104e2a5b1db0136fc29814ee388"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/696c0d5ef2a6edaa2094e808f53acd502a157641",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/696c0d5ef2a6edaa2094e808f53acd502a157641",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/696c0d5ef2a6edaa2094e808f53acd502a157641",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/696c0d5ef2a6edaa2094e808f53acd502a157641/comments",
  "author": {
    "login": "markus-metzger",
    "id": 5424725,
    "node_id": "MDQ6VXNlcjU0MjQ3MjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5424725?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/markus-metzger",
    "html_url": "https://github.com/markus-metzger",
    "followers_url": "https://api.github.com/users/markus-metzger/followers",
    "following_url": "https://api.github.com/users/markus-metzger/following{/other_user}",
    "gists_url": "https://api.github.com/users/markus-metzger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/markus-metzger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/markus-metzger/subscriptions",
    "organizations_url": "https://api.github.com/users/markus-metzger/orgs",
    "repos_url": "https://api.github.com/users/markus-metzger/repos",
    "events_url": "https://api.github.com/users/markus-metzger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/markus-metzger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "markus-metzger",
    "id": 5424725,
    "node_id": "MDQ6VXNlcjU0MjQ3MjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5424725?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/markus-metzger",
    "html_url": "https://github.com/markus-metzger",
    "followers_url": "https://api.github.com/users/markus-metzger/followers",
    "following_url": "https://api.github.com/users/markus-metzger/following{/other_user}",
    "gists_url": "https://api.github.com/users/markus-metzger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/markus-metzger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/markus-metzger/subscriptions",
    "organizations_url": "https://api.github.com/users/markus-metzger/orgs",
    "repos_url": "https://api.github.com/users/markus-metzger/repos",
    "events_url": "https://api.github.com/users/markus-metzger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/markus-metzger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b674665b51112de22260709a214d4d6ba01c7e57",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b674665b51112de22260709a214d4d6ba01c7e57",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b674665b51112de22260709a214d4d6ba01c7e57"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 38,
    "deletions": 30
  },
  "files": [
    {
      "sha": "ea733fe36b902cecbf4fb8cfc8729b111ed43da4",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -1618,7 +1618,7 @@ btrace_enable (struct thread_info *tp, const struct btrace_config *conf)\n   DEBUG (\"enable thread %s (%s)\", print_thread_id (tp),\n \t tp->ptid.to_string ().c_str ());\n \n-  tp->btrace.target = target_enable_btrace (tp->ptid, conf);\n+  tp->btrace.target = target_enable_btrace (tp, conf);\n \n   if (tp->btrace.target == NULL)\n     error (_(\"Failed to enable recording on thread %s (%s).\"),"
    },
    {
      "sha": "60fc3530ce2236fa4fa17dbc6dd4e874d4e9f7db",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -120,12 +120,16 @@ struct ravenscar_thread_target final : public target_ops\n \n   ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n-  struct btrace_target_info *enable_btrace (ptid_t ptid,\n+  struct btrace_target_info *enable_btrace (thread_info *tp,\n \t\t\t\t\t    const struct btrace_config *conf)\n     override\n   {\n-    ptid = get_base_thread_from_ravenscar_task (ptid);\n-    return beneath ()->enable_btrace (ptid, conf);\n+    process_stratum_target *proc_target\n+      = as_process_stratum_target (this->beneath ());\n+    ptid_t underlying = get_base_thread_from_ravenscar_task (tp->ptid);\n+    tp = find_thread_ptid (proc_target, underlying);\n+\n+    return beneath ()->enable_btrace (tp, conf);\n   }\n \n   void mourn_inferior () override;"
    },
    {
      "sha": "9f2c63b21411fa762e04664a167eaaafb6ae6044",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -658,8 +658,8 @@ class remote_target : public process_stratum_target\n   bool use_agent (bool use) override;\n   bool can_use_agent () override;\n \n-  struct btrace_target_info *enable_btrace (ptid_t ptid,\n-\t\t\t\t\t    const struct btrace_config *conf) override;\n+  struct btrace_target_info *\n+    enable_btrace (thread_info *tp, const struct btrace_config *conf) override;\n \n   void disable_btrace (struct btrace_target_info *tinfo) override;\n \n@@ -14178,7 +14178,8 @@ remote_target::remote_btrace_maybe_reopen ()\n /* Enable branch tracing.  */\n \n struct btrace_target_info *\n-remote_target::enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n+remote_target::enable_btrace (thread_info *tp,\n+\t\t\t      const struct btrace_config *conf)\n {\n   struct btrace_target_info *tinfo = NULL;\n   struct packet_config *packet = NULL;\n@@ -14202,6 +14203,7 @@ remote_target::enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n \n   btrace_sync_conf (conf);\n \n+  ptid_t ptid = tp->ptid;\n   set_general_thread (ptid);\n \n   buf += xsnprintf (buf, endbuf - buf, \"%s\", packet->name);"
    },
    {
      "sha": "ca1734f86ba8bd1c20dd48afb82aaedfef30a094",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -145,7 +145,7 @@ struct dummy_target : public target_ops\n   traceframe_info_up traceframe_info () override;\n   bool use_agent (bool arg0) override;\n   bool can_use_agent () override;\n-  struct btrace_target_info *enable_btrace (ptid_t arg0, const struct btrace_config *arg1) override;\n+  struct btrace_target_info *enable_btrace (thread_info *arg0, const struct btrace_config *arg1) override;\n   void disable_btrace (struct btrace_target_info *arg0) override;\n   void teardown_btrace (struct btrace_target_info *arg0) override;\n   enum btrace_error read_btrace (struct btrace_data *arg0, struct btrace_target_info *arg1, enum btrace_read_type arg2) override;\n@@ -319,7 +319,7 @@ struct debug_target : public target_ops\n   traceframe_info_up traceframe_info () override;\n   bool use_agent (bool arg0) override;\n   bool can_use_agent () override;\n-  struct btrace_target_info *enable_btrace (ptid_t arg0, const struct btrace_config *arg1) override;\n+  struct btrace_target_info *enable_btrace (thread_info *arg0, const struct btrace_config *arg1) override;\n   void disable_btrace (struct btrace_target_info *arg0) override;\n   void teardown_btrace (struct btrace_target_info *arg0) override;\n   enum btrace_error read_btrace (struct btrace_data *arg0, struct btrace_target_info *arg1, enum btrace_read_type arg2) override;\n@@ -3761,25 +3761,25 @@ debug_target::can_use_agent ()\n }\n \n struct btrace_target_info *\n-target_ops::enable_btrace (ptid_t arg0, const struct btrace_config *arg1)\n+target_ops::enable_btrace (thread_info *arg0, const struct btrace_config *arg1)\n {\n   return this->beneath ()->enable_btrace (arg0, arg1);\n }\n \n struct btrace_target_info *\n-dummy_target::enable_btrace (ptid_t arg0, const struct btrace_config *arg1)\n+dummy_target::enable_btrace (thread_info *arg0, const struct btrace_config *arg1)\n {\n   tcomplain ();\n }\n \n struct btrace_target_info *\n-debug_target::enable_btrace (ptid_t arg0, const struct btrace_config *arg1)\n+debug_target::enable_btrace (thread_info *arg0, const struct btrace_config *arg1)\n {\n   struct btrace_target_info * result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->enable_btrace (...)\\n\", this->beneath ()->shortname ());\n   result = this->beneath ()->enable_btrace (arg0, arg1);\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->enable_btrace (\", this->beneath ()->shortname ());\n-  target_debug_print_ptid_t (arg0);\n+  target_debug_print_thread_info_p (arg0);\n   fputs_unfiltered (\", \", gdb_stdlog);\n   target_debug_print_const_struct_btrace_config_p (arg1);\n   fputs_unfiltered (\") = \", gdb_stdlog);"
    },
    {
      "sha": "548cfad06b25af6f7adad8141b76a1e6c701895a",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -4060,9 +4060,9 @@ target_ranged_break_num_registers (void)\n /* See target.h.  */\n \n struct btrace_target_info *\n-target_enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n+target_enable_btrace (thread_info *tp, const struct btrace_config *conf)\n {\n-  return current_inferior ()->top_target ()->enable_btrace (ptid, conf);\n+  return current_inferior ()->top_target ()->enable_btrace (tp, conf);\n }\n \n /* See target.h.  */"
    },
    {
      "sha": "4cc79df05b41e40713586b4b897bedcc9324a341",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -1151,10 +1151,10 @@ struct target_ops\n     virtual bool can_use_agent ()\n       TARGET_DEFAULT_RETURN (false);\n \n-    /* Enable branch tracing for PTID using CONF configuration.\n+    /* Enable branch tracing for TP using CONF configuration.\n        Return a branch trace target information struct for reading and for\n        disabling branch trace.  */\n-    virtual struct btrace_target_info *enable_btrace (ptid_t ptid,\n+    virtual struct btrace_target_info *enable_btrace (thread_info *tp,\n \t\t\t\t\t\t      const struct btrace_config *conf)\n       TARGET_DEFAULT_NORETURN (tcomplain ());\n \n@@ -2502,7 +2502,7 @@ extern void update_target_permissions (void);\n \n /* See to_enable_btrace in struct target_ops.  */\n extern struct btrace_target_info *\n-  target_enable_btrace (ptid_t ptid, const struct btrace_config *);\n+  target_enable_btrace (thread_info *tp, const struct btrace_config *);\n \n /* See to_disable_btrace in struct target_ops.  */\n extern void target_disable_btrace (struct btrace_target_info *btinfo);"
    },
    {
      "sha": "80be97333107d985b2c7bac6ed178d8cf1af5afa",
      "filename": "gdb/x86-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/x86-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/x86-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.c?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -212,10 +212,11 @@ x86_linux_nat_target::read_description ()\n /* Enable branch tracing.  */\n \n struct btrace_target_info *\n-x86_linux_nat_target::enable_btrace (ptid_t ptid,\n+x86_linux_nat_target::enable_btrace (thread_info *tp,\n \t\t\t\t     const struct btrace_config *conf)\n {\n   struct btrace_target_info *tinfo = nullptr;\n+  ptid_t ptid = tp->ptid;\n   try\n     {\n       tinfo = linux_enable_btrace (ptid, conf);"
    },
    {
      "sha": "1a562349691bb67492646680d8f49be4663981f3",
      "filename": "gdb/x86-linux-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/x86-linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdb/x86-linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.h?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -32,7 +32,7 @@ struct x86_linux_nat_target : public x86_nat_target<linux_nat_target>\n   /* Add the description reader.  */\n   const struct target_desc *read_description () override;\n \n-  struct btrace_target_info *enable_btrace (ptid_t ptid,\n+  struct btrace_target_info *enable_btrace (thread_info *tp,\n \t\t\t\t\t    const struct btrace_config *conf) override;\n   void disable_btrace (struct btrace_target_info *tinfo) override;\n   void teardown_btrace (struct btrace_target_info *tinfo) override;"
    },
    {
      "sha": "cf73bbc70ee63e03b4878b4bd714228fddf3c127",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -6669,10 +6669,10 @@ linux_process_target::qxfer_libraries_svr4 (const char *annex,\n #ifdef HAVE_LINUX_BTRACE\n \n btrace_target_info *\n-linux_process_target::enable_btrace (ptid_t ptid,\n+linux_process_target::enable_btrace (thread_info *tp,\n \t\t\t\t     const btrace_config *conf)\n {\n-  return linux_enable_btrace (ptid, conf);\n+  return linux_enable_btrace (tp->id, conf);\n }\n \n /* See to_disable_btrace target method.  */"
    },
    {
      "sha": "27cc9641f124a871c3290fd0426230fa706cd2e1",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -276,7 +276,7 @@ class linux_process_target : public process_stratum_target\n   bool supports_agent () override;\n \n #ifdef HAVE_LINUX_BTRACE\n-  btrace_target_info *enable_btrace (ptid_t ptid,\n+  btrace_target_info *enable_btrace (thread_info *tp,\n \t\t\t\t     const btrace_config *conf) override;\n \n   int disable_btrace (btrace_target_info *tinfo) override;"
    },
    {
      "sha": "8e53f226d3c06230070096a90683aaf0d29562b9",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -409,7 +409,7 @@ handle_btrace_enable_bts (struct thread_info *thread)\n     error (_(\"Btrace already enabled.\"));\n \n   current_btrace_conf.format = BTRACE_FORMAT_BTS;\n-  thread->btrace = target_enable_btrace (thread->id, &current_btrace_conf);\n+  thread->btrace = target_enable_btrace (thread, &current_btrace_conf);\n }\n \n /* Handle btrace enabling in Intel Processor Trace format.  */\n@@ -421,7 +421,7 @@ handle_btrace_enable_pt (struct thread_info *thread)\n     error (_(\"Btrace already enabled.\"));\n \n   current_btrace_conf.format = BTRACE_FORMAT_PT;\n-  thread->btrace = target_enable_btrace (thread->id, &current_btrace_conf);\n+  thread->btrace = target_enable_btrace (thread, &current_btrace_conf);\n }\n \n /* Handle btrace disabling.  */"
    },
    {
      "sha": "5009146d66373665ea74c92ffc42a5cd0a377e9e",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -736,7 +736,8 @@ process_stratum_target::supports_agent ()\n }\n \n btrace_target_info *\n-process_stratum_target::enable_btrace (ptid_t ptid, const btrace_config *conf)\n+process_stratum_target::enable_btrace (thread_info *tp,\n+\t\t\t\t       const btrace_config *conf)\n {\n   error (_(\"Target does not support branch tracing.\"));\n }"
    },
    {
      "sha": "aaa9dab742c2bfcc0997589f9b643e98b5b00e0e",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/696c0d5ef2a6edaa2094e808f53acd502a157641/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=696c0d5ef2a6edaa2094e808f53acd502a157641",
      "patch": "@@ -403,9 +403,9 @@ class process_stratum_target\n   /* Return true if target supports debugging agent.  */\n   virtual bool supports_agent ();\n \n-  /* Enable branch tracing for PTID based on CONF and allocate a branch trace\n+  /* Enable branch tracing for TP based on CONF and allocate a branch trace\n      target information struct for reading and for disabling branch trace.  */\n-  virtual btrace_target_info *enable_btrace (ptid_t ptid,\n+  virtual btrace_target_info *enable_btrace (thread_info *tp,\n \t\t\t\t\t     const btrace_config *conf);\n \n   /* Disable branch tracing.\n@@ -635,9 +635,9 @@ int kill_inferior (process_info *proc);\n   the_target->supports_agent ()\n \n static inline struct btrace_target_info *\n-target_enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n+target_enable_btrace (thread_info *tp, const struct btrace_config *conf)\n {\n-  return the_target->enable_btrace (ptid, conf);\n+  return the_target->enable_btrace (tp, conf);\n }\n \n static inline int"
    }
  ]
}