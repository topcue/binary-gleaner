{
  "sha": "eefba3da27c23db67cc0e1707fcedd96f1c0860d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWVmYmEzZGEyN2MyM2RiNjdjYzBlMTcwN2ZjZWRkOTZmMWMwODYwZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-02T20:07:47Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-15T22:02:10Z"
    },
    "message": "Change minimal_symbol inheritance\n\nThis changes struct minimal_symbol to inherit from general_symbol_info\nand updates various macros to cope.\n\nBecause MSYMBOL_SET_LANGUAGE and MSYMBOL_SET_NAMES were only used from\na single spot, this patch removes them in favor of simply inlining\ntheir definitions.  I consider this to be somewhat cleaner, not least\nbecause the \"phony polymorphism\" provided by such macros is not useful\nin practice.\n\ngdb/ChangeLog\n2019-03-15  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.h (struct minimal_symbol): Derive from\n\tgeneral_symbol_info.\n\t(MSYMBOL_VALUE, MSYMBOL_VALUE_RAW_ADDRESS)\n\t(MSYMBOL_VALUE_ADDRESS, MSYMBOL_VALUE_BYTES)\n\t(MSYMBOL_BLOCK_VALUE, MSYMBOL_VALUE_CHAIN, MSYMBOL_LANGUAGE)\n\t(MSYMBOL_SECTION, MSYMBOL_OBJ_SECTION, MSYMBOL_NATURAL_NAME)\n\t(MSYMBOL_LINKAGE_NAME, MSYMBOL_DEMANGLED_NAME)\n\t(MSYMBOL_SEARCH_NAME): Update.\n\t(MSYMBOL_SET_LANGUAGE, MSYMBOL_SET_NAMES): Remove.\n\t* solib.c (gdb_bfd_lookup_symbol_from_symtab): Don't use memset.\n\t* minsyms.c (minimal_symbol_reader::record_full): Update.",
    "tree": {
      "sha": "61c03e529eccc8f7d1452871f62042c696441905",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/61c03e529eccc8f7d1452871f62042c696441905"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eefba3da27c23db67cc0e1707fcedd96f1c0860d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eefba3da27c23db67cc0e1707fcedd96f1c0860d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eefba3da27c23db67cc0e1707fcedd96f1c0860d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eefba3da27c23db67cc0e1707fcedd96f1c0860d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0de2420c4b023e644f91a409803fedfb235bfc0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0de2420c4b023e644f91a409803fedfb235bfc0b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0de2420c4b023e644f91a409803fedfb235bfc0b"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 36,
    "deletions": 36
  },
  "files": [
    {
      "sha": "7eddaef8866bf8d3ca3c24410650e3e39388a357",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=eefba3da27c23db67cc0e1707fcedd96f1c0860d",
      "patch": "@@ -1,3 +1,17 @@\n+2019-03-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.h (struct minimal_symbol): Derive from\n+\tgeneral_symbol_info.\n+\t(MSYMBOL_VALUE, MSYMBOL_VALUE_RAW_ADDRESS)\n+\t(MSYMBOL_VALUE_ADDRESS, MSYMBOL_VALUE_BYTES)\n+\t(MSYMBOL_BLOCK_VALUE, MSYMBOL_VALUE_CHAIN, MSYMBOL_LANGUAGE)\n+\t(MSYMBOL_SECTION, MSYMBOL_OBJ_SECTION, MSYMBOL_NATURAL_NAME)\n+\t(MSYMBOL_LINKAGE_NAME, MSYMBOL_DEMANGLED_NAME)\n+\t(MSYMBOL_SEARCH_NAME): Update.\n+\t(MSYMBOL_SET_LANGUAGE, MSYMBOL_SET_NAMES): Remove.\n+\t* solib.c (gdb_bfd_lookup_symbol_from_symtab): Don't use memset.\n+\t* minsyms.c (minimal_symbol_reader::record_full): Update.\n+\n 2019-03-15  Tom Tromey  <tom@tromey.com>\n \n \t* minsyms.c (minimal_symbol_reader::install): Use memcpy."
    },
    {
      "sha": "fe2ad949d0b5a959cdd63bf7a5c243bb60592ac4",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=eefba3da27c23db67cc0e1707fcedd96f1c0860d",
      "patch": "@@ -1152,9 +1152,9 @@ minimal_symbol_reader::record_full (const char *name, int name_len,\n       m_msym_bunch = newobj;\n     }\n   msymbol = &m_msym_bunch->contents[m_msym_bunch_index];\n-  MSYMBOL_SET_LANGUAGE (msymbol, language_auto,\n-\t\t\t&m_objfile->per_bfd->storage_obstack);\n-  MSYMBOL_SET_NAMES (msymbol, name, name_len, copy_name, m_objfile);\n+  symbol_set_language (msymbol, language_auto,\n+\t\t       &m_objfile->per_bfd->storage_obstack);\n+  symbol_set_names (msymbol, name, name_len, copy_name, m_objfile->per_bfd);\n \n   SET_MSYMBOL_VALUE_ADDRESS (msymbol, address);\n   MSYMBOL_SECTION (msymbol) = section;"
    },
    {
      "sha": "017cd62eb772bf4612c474d5f98b836789e3dcc1",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=eefba3da27c23db67cc0e1707fcedd96f1c0860d",
      "patch": "@@ -1501,9 +1501,8 @@ gdb_bfd_lookup_symbol_from_symtab (bfd *abfd,\n \t      if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n \t\t  && gdbarch_elf_make_msymbol_special_p (gdbarch))\n \t\t{\n-\t\t  struct minimal_symbol msym;\n+\t\t  struct minimal_symbol msym {};\n \n-\t\t  memset (&msym, 0, sizeof (msym));\n \t\t  SET_MSYMBOL_VALUE_ADDRESS (&msym, symaddr);\n \t\t  gdbarch_elf_make_msymbol_special (gdbarch, sym, &msym);\n \t\t  symaddr = MSYMBOL_VALUE_RAW_ADDRESS (&msym);"
    },
    {
      "sha": "85dc37104837e89eb9bb4ec1779eafab4b0e75e6",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 18,
      "deletions": 31,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eefba3da27c23db67cc0e1707fcedd96f1c0860d/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=eefba3da27c23db67cc0e1707fcedd96f1c0860d",
      "patch": "@@ -641,16 +641,8 @@ gdb_static_assert (nr_minsym_types <= (1 << MINSYM_TYPE_BITS));\n    between names and addresses, and vice versa.  They are also sometimes\n    used to figure out what full symbol table entries need to be read in.  */\n \n-struct minimal_symbol\n+struct minimal_symbol : public general_symbol_info\n {\n-\n-  /* The general symbol info required for all types of symbols.\n-\n-     The SYMBOL_VALUE_ADDRESS contains the address that this symbol\n-     corresponds to.  */\n-\n-  struct general_symbol_info mginfo;\n-\n   /* Size of this symbol.  dbx_end_psymtab in dbxread.c uses this\n      information to calculate the end of the partial symtab based on the\n      address of the last symbol plus the size of the last symbol.  */\n@@ -687,7 +679,7 @@ struct minimal_symbol\n \n   struct minimal_symbol *demangled_hash_next;\n \n-/* True if this symbol is of some data type.  */\n+  /* True if this symbol is of some data type.  */\n \n   bool data_p () const;\n \n@@ -708,43 +700,38 @@ struct minimal_symbol\n #define MSYMBOL_HAS_SIZE(msymbol)\t((msymbol)->has_size + 0)\n #define MSYMBOL_TYPE(msymbol)\t\t(msymbol)->type\n \n-#define MSYMBOL_VALUE(symbol)\t\t(symbol)->mginfo.value.ivalue\n+#define MSYMBOL_VALUE(symbol)\t\t(symbol)->value.ivalue\n /* The unrelocated address of the minimal symbol.  */\n-#define MSYMBOL_VALUE_RAW_ADDRESS(symbol) ((symbol)->mginfo.value.address + 0)\n+#define MSYMBOL_VALUE_RAW_ADDRESS(symbol) ((symbol)->value.address + 0)\n /* The relocated address of the minimal symbol, using the section\n    offsets from OBJFILE.  */\n #define MSYMBOL_VALUE_ADDRESS(objfile, symbol)\t\t\t\t\\\n-  ((symbol)->mginfo.value.address\t\t\t\t\t\\\n-   + ANOFFSET ((objfile)->section_offsets, ((symbol)->mginfo.section)))\n+  ((symbol)->value.address\t\t\t\t\t\\\n+   + ANOFFSET ((objfile)->section_offsets, ((symbol)->section)))\n /* For a bound minsym, we can easily compute the address directly.  */\n #define BMSYMBOL_VALUE_ADDRESS(symbol) \\\n   MSYMBOL_VALUE_ADDRESS ((symbol).objfile, (symbol).minsym)\n #define SET_MSYMBOL_VALUE_ADDRESS(symbol, new_value)\t\\\n-  ((symbol)->mginfo.value.address = (new_value))\n-#define MSYMBOL_VALUE_BYTES(symbol)\t(symbol)->mginfo.value.bytes\n-#define MSYMBOL_BLOCK_VALUE(symbol)\t(symbol)->mginfo.value.block\n-#define MSYMBOL_VALUE_CHAIN(symbol)\t(symbol)->mginfo.value.chain\n-#define MSYMBOL_LANGUAGE(symbol)\t(symbol)->mginfo.language\n-#define MSYMBOL_SECTION(symbol)\t\t(symbol)->mginfo.section\n+  ((symbol)->value.address = (new_value))\n+#define MSYMBOL_VALUE_BYTES(symbol)\t(symbol)->value.bytes\n+#define MSYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n+#define MSYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n+#define MSYMBOL_LANGUAGE(symbol)\t(symbol)->language\n+#define MSYMBOL_SECTION(symbol)\t\t(symbol)->section\n #define MSYMBOL_OBJ_SECTION(objfile, symbol)\t\t\t\\\n-  (((symbol)->mginfo.section >= 0)\t\t\t\t\\\n-   ? (&(((objfile)->sections)[(symbol)->mginfo.section]))\t\\\n+  (((symbol)->section >= 0)\t\t\t\t\\\n+   ? (&(((objfile)->sections)[(symbol)->section]))\t\\\n    : NULL)\n \n #define MSYMBOL_NATURAL_NAME(symbol) \\\n-  (symbol_natural_name (&(symbol)->mginfo))\n-#define MSYMBOL_LINKAGE_NAME(symbol)\t(symbol)->mginfo.name\n+  (symbol_natural_name (symbol))\n+#define MSYMBOL_LINKAGE_NAME(symbol)\t(symbol)->name\n #define MSYMBOL_PRINT_NAME(symbol)\t\t\t\t\t\\\n   (demangle ? MSYMBOL_NATURAL_NAME (symbol) : MSYMBOL_LINKAGE_NAME (symbol))\n #define MSYMBOL_DEMANGLED_NAME(symbol) \\\n-  (symbol_demangled_name (&(symbol)->mginfo))\n-#define MSYMBOL_SET_LANGUAGE(symbol,language,obstack)\t\\\n-  (symbol_set_language (&(symbol)->mginfo, (language), (obstack)))\n+  (symbol_demangled_name (symbol))\n #define MSYMBOL_SEARCH_NAME(symbol)\t\t\t\t\t \\\n-   (symbol_search_name (&(symbol)->mginfo))\n-#define MSYMBOL_SET_NAMES(symbol,linkage_name,len,copy_name,objfile)\t\\\n-  symbol_set_names (&(symbol)->mginfo, linkage_name, len, copy_name, \\\n-\t\t    (objfile)->per_bfd)\n+   (symbol_search_name (symbol))\n \n #include \"minsyms.h\"\n "
    }
  ]
}