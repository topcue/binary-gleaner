{
  "sha": "120ce1b5b255226227e5e36342b2e3764c2a80aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTIwY2UxYjViMjU1MjI2MjI3ZTVlMzYzNDJiMmUzNzY0YzJhODBhYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:14:04Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:57Z"
    },
    "message": "Add dwarf2_per_objfile parameter to free_one_cached_comp_unit\n\nThis allows removing some references to\ndwarf2_per_cu_data::dwarf2_per_objfile.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_queue_item): Add\n\tdwarf2_per_objfile parameter, assign new parameter.\n\t<per_objfile>: New field.\n\t* dwarf2/read.c (free_one_cached_comp_unit): Add\n\tdwarf2_per_objfile parameter.\n\t(queue_comp_unit): Likewise.\n\t(dw2_do_instantiate_symtab): Update.\n\t(process_psymtab_comp_unit): Update.\n\t(maybe_queue_comp_unit): Add dwarf2_per_objfile parameter.\n\t(process_imported_unit_die): Update.\n\t(queue_and_load_dwo_tu): Update.\n\t(follow_die_offset): Update.\n\t(follow_die_sig_1): Update.\n\nChange-Id: Ibb4a4ea28eeac5ebcbf73c0d2a13f9391e15c235",
    "tree": {
      "sha": "11925bc155c67a6a965ef596e7fcbc652e76507b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/11925bc155c67a6a965ef596e7fcbc652e76507b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/120ce1b5b255226227e5e36342b2e3764c2a80aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/120ce1b5b255226227e5e36342b2e3764c2a80aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/120ce1b5b255226227e5e36342b2e3764c2a80aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/120ce1b5b255226227e5e36342b2e3764c2a80aa/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9f47c7071654d8cee82ff91ec1e65d57bd78e77f"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 44,
    "deletions": 21
  },
  "files": [
    {
      "sha": "56745dd66c2f7c8b19cbd56fa5834975edfd359f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/120ce1b5b255226227e5e36342b2e3764c2a80aa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/120ce1b5b255226227e5e36342b2e3764c2a80aa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=120ce1b5b255226227e5e36342b2e3764c2a80aa",
      "patch": "@@ -1,3 +1,19 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_queue_item): Add\n+\tdwarf2_per_objfile parameter, assign new parameter.\n+\t<per_objfile>: New field.\n+\t* dwarf2/read.c (free_one_cached_comp_unit): Add\n+\tdwarf2_per_objfile parameter.\n+\t(queue_comp_unit): Likewise.\n+\t(dw2_do_instantiate_symtab): Update.\n+\t(process_psymtab_comp_unit): Update.\n+\t(maybe_queue_comp_unit): Add dwarf2_per_objfile parameter.\n+\t(process_imported_unit_die): Update.\n+\t(queue_and_load_dwo_tu): Update.\n+\t(follow_die_offset): Update.\n+\t(follow_die_sig_1): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_cu_data) <objfile>: Remove."
    },
    {
      "sha": "433d90e42fc866a26d9a00e7a92a18483d0a26aa",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 23,
      "deletions": 19,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/120ce1b5b255226227e5e36342b2e3764c2a80aa/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/120ce1b5b255226227e5e36342b2e3764c2a80aa/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=120ce1b5b255226227e5e36342b2e3764c2a80aa",
      "patch": "@@ -1568,7 +1568,8 @@ static void prepare_one_comp_unit (struct dwarf2_cu *cu,\n \n static void age_cached_comp_units (struct dwarf2_per_objfile *dwarf2_per_objfile);\n \n-static void free_one_cached_comp_unit (struct dwarf2_per_cu_data *);\n+static void free_one_cached_comp_unit (dwarf2_per_cu_data *target_per_cu,\n+\t\t\t\t       dwarf2_per_objfile *per_objfile);\n \n static struct type *set_die_type (struct die_info *, struct type *,\n \t\t\t\t  struct dwarf2_cu *);\n@@ -1602,7 +1603,8 @@ static struct type *get_die_type_at_offset (sect_offset,\n \n static struct type *get_die_type (struct die_info *die, struct dwarf2_cu *cu);\n \n-static void queue_comp_unit (struct dwarf2_per_cu_data *per_cu,\n+static void queue_comp_unit (dwarf2_per_cu_data *per_cu,\n+\t\t\t     dwarf2_per_objfile *per_objfile,\n \t\t\t     enum language pretend_language);\n \n static void process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile);\n@@ -1642,7 +1644,7 @@ dwarf2_queue_item::~dwarf2_queue_item ()\n   if (per_cu->queued)\n     {\n       if (per_cu->cu != NULL)\n-\tfree_one_cached_comp_unit (per_cu);\n+\tfree_one_cached_comp_unit (per_cu, per_objfile);\n       per_cu->queued = 0;\n     }\n }\n@@ -2381,7 +2383,7 @@ dw2_do_instantiate_symtab (dwarf2_per_cu_data *per_cu,\n \n   if (!dwarf2_per_objfile->symtab_set_p (per_cu))\n     {\n-      queue_comp_unit (per_cu, language_minimal);\n+      queue_comp_unit (per_cu, dwarf2_per_objfile, language_minimal);\n       load_cu (per_cu, dwarf2_per_objfile, skip_partial);\n \n       /* If we just loaded a CU from a DWO, and we're working with an index\n@@ -7579,7 +7581,7 @@ process_psymtab_comp_unit (dwarf2_per_cu_data *this_cu,\n      read in the compilation unit (see load_partial_dies).\n      This problem could be avoided, but the benefit is unclear.  */\n   if (this_cu->cu != NULL)\n-    free_one_cached_comp_unit (this_cu);\n+    free_one_cached_comp_unit (this_cu, per_objfile);\n \n   cutu_reader reader (this_cu, per_objfile, NULL, 0, false);\n \n@@ -8937,11 +8939,12 @@ dwarf2_psymtab::read_symtab (struct objfile *objfile)\n /* Add PER_CU to the queue.  */\n \n static void\n-queue_comp_unit (struct dwarf2_per_cu_data *per_cu,\n+queue_comp_unit (dwarf2_per_cu_data *per_cu,\n+\t\t dwarf2_per_objfile *per_objfile,\n \t\t enum language pretend_language)\n {\n   per_cu->queued = 1;\n-  per_cu->per_bfd->queue.emplace (per_cu, pretend_language);\n+  per_cu->per_bfd->queue.emplace (per_cu, per_objfile, pretend_language);\n }\n \n /* If PER_CU is not yet queued, add it to the queue.\n@@ -8955,7 +8958,8 @@ queue_comp_unit (struct dwarf2_per_cu_data *per_cu,\n \n static int\n maybe_queue_comp_unit (struct dwarf2_cu *dependent_cu,\n-\t\t       struct dwarf2_per_cu_data *per_cu,\n+\t\t       dwarf2_per_cu_data *per_cu,\n+\t\t       dwarf2_per_objfile *per_objfile,\n \t\t       enum language pretend_language)\n {\n   /* We may arrive here during partial symbol reading, if we need full\n@@ -8986,7 +8990,7 @@ maybe_queue_comp_unit (struct dwarf2_cu *dependent_cu,\n     }\n \n   /* Add it to the queue.  */\n-  queue_comp_unit (per_cu, pretend_language);\n+  queue_comp_unit (per_cu, per_objfile,  pretend_language);\n \n   return 1;\n }\n@@ -9947,7 +9951,7 @@ process_imported_unit_die (struct die_info *die, struct dwarf2_cu *cu)\n \treturn;\n \n       /* If necessary, add it to the queue and load its DIEs.  */\n-      if (maybe_queue_comp_unit (cu, per_cu, cu->language))\n+      if (maybe_queue_comp_unit (cu, per_cu, per_objfile, cu->language))\n \tload_full_comp_unit (per_cu, per_objfile, false, cu->language);\n \n       cu->per_cu->imported_symtabs_push (per_cu);\n@@ -12861,7 +12865,7 @@ queue_and_load_dwo_tu (void **slot, void *info)\n       /* We pass NULL for DEPENDENT_CU because we don't yet know if there's\n \t a real dependency of PER_CU on SIG_TYPE.  That is detected later\n \t while processing PER_CU.  */\n-      if (maybe_queue_comp_unit (NULL, sig_cu, cu->language))\n+      if (maybe_queue_comp_unit (NULL, sig_cu, cu->per_objfile, cu->language))\n \tload_full_type_unit (sig_cu, cu->per_objfile);\n       cu->per_cu->imported_symtabs_push (sig_cu);\n     }\n@@ -22247,7 +22251,7 @@ follow_die_offset (sect_offset sect_off, int offset_in_dwz,\n \t\t\t\t\t\t dwarf2_per_objfile);\n \n       /* If necessary, add it to the queue and load its DIEs.  */\n-      if (maybe_queue_comp_unit (cu, per_cu, cu->language))\n+      if (maybe_queue_comp_unit (cu, per_cu, dwarf2_per_objfile, cu->language))\n \tload_full_comp_unit (per_cu, dwarf2_per_objfile, false, cu->language);\n \n       target_cu = per_cu->cu;\n@@ -22610,15 +22614,18 @@ follow_die_sig_1 (struct die_info *src_die, struct signatured_type *sig_type,\n   struct die_info temp_die;\n   struct dwarf2_cu *sig_cu, *cu = *ref_cu;\n   struct die_info *die;\n+  dwarf2_per_objfile *dwarf2_per_objfile = (*ref_cu)->per_objfile;\n+\n \n   /* While it might be nice to assert sig_type->type == NULL here,\n      we can get here for DW_AT_imported_declaration where we need\n      the DIE not the type.  */\n \n   /* If necessary, add it to the queue and load its DIEs.  */\n \n-  if (maybe_queue_comp_unit (*ref_cu, &sig_type->per_cu, language_minimal))\n-    read_signatured_type (sig_type, (*ref_cu)->per_objfile);\n+  if (maybe_queue_comp_unit (*ref_cu, &sig_type->per_cu, dwarf2_per_objfile,\n+\t\t\t     language_minimal))\n+    read_signatured_type (sig_type, dwarf2_per_objfile);\n \n   sig_cu = sig_type->per_cu.cu;\n   gdb_assert (sig_cu != NULL);\n@@ -22628,8 +22635,6 @@ follow_die_sig_1 (struct die_info *src_die, struct signatured_type *sig_type,\n \t\t\t\t\t\t to_underlying (temp_die.sect_off));\n   if (die)\n     {\n-      struct dwarf2_per_objfile *dwarf2_per_objfile = (*ref_cu)->per_objfile;\n-\n       /* For .gdb_index version 7 keep track of included TUs.\n \t http://sourceware.org/bugzilla/show_bug.cgi?id=15021.  */\n       if (dwarf2_per_objfile->per_bfd->index_table != NULL\n@@ -23607,11 +23612,10 @@ age_cached_comp_units (struct dwarf2_per_objfile *dwarf2_per_objfile)\n /* Remove a single compilation unit from the cache.  */\n \n static void\n-free_one_cached_comp_unit (struct dwarf2_per_cu_data *target_per_cu)\n+free_one_cached_comp_unit (dwarf2_per_cu_data *target_per_cu,\n+\t\t\t   dwarf2_per_objfile *dwarf2_per_objfile)\n {\n   struct dwarf2_per_cu_data *per_cu, **last_chain;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = target_per_cu->dwarf2_per_objfile;\n \n   per_cu = dwarf2_per_objfile->per_bfd->read_in_chain;\n   last_chain = &dwarf2_per_objfile->per_bfd->read_in_chain;"
    },
    {
      "sha": "3dada4852d79f6b59621b12d8972a6970d74dc9b",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/120ce1b5b255226227e5e36342b2e3764c2a80aa/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/120ce1b5b255226227e5e36342b2e3764c2a80aa/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=120ce1b5b255226227e5e36342b2e3764c2a80aa",
      "patch": "@@ -52,8 +52,10 @@ struct signatured_type;\n    for.  */\n struct dwarf2_queue_item\n {\n-  dwarf2_queue_item (dwarf2_per_cu_data *cu, enum language lang)\n+  dwarf2_queue_item (dwarf2_per_cu_data *cu, dwarf2_per_objfile *per_objfile,\n+\t\t     enum language lang)\n     : per_cu (cu),\n+      per_objfile (per_objfile),\n       pretend_language (lang)\n   {\n   }\n@@ -62,7 +64,8 @@ struct dwarf2_queue_item\n \n   DISABLE_COPY_AND_ASSIGN (dwarf2_queue_item);\n \n-  struct dwarf2_per_cu_data *per_cu;\n+  dwarf2_per_cu_data *per_cu;\n+  dwarf2_per_objfile *per_objfile;\n   enum language pretend_language;\n };\n "
    }
  ]
}