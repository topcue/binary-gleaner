{
  "sha": "7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7",
  "node_id": "C_kwDOANOeidoAKDdmNzYyYWJmZjZlN2IyZTQ4YzFmNGExZDBhMDg3Y2U0ZWI1Njc3YTc",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-27T05:13:48Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-05T18:36:33Z"
    },
    "message": "Use filtered output in btrace-related commands\n\nThis changes btrace.c and record-btrace.c to use filtered output in\nthe commands implemented there.",
    "tree": {
      "sha": "e30491f01e259bb5487e7725dabd53694cf8d089",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e30491f01e259bb5487e7725dabd53694cf8d089"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee"
    }
  ],
  "stats": {
    "total": 172,
    "additions": 86,
    "deletions": 86
  },
  "files": [
    {
      "sha": "ba10f78e7bf53296d03db268ce5f04115170c33b",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 63,
      "deletions": 63,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7",
      "patch": "@@ -2852,122 +2852,122 @@ pt_print_packet (const struct pt_packet *packet)\n   switch (packet->type)\n     {\n     default:\n-      printf_unfiltered ((\"[??: %x]\"), packet->type);\n+      printf_filtered ((\"[??: %x]\"), packet->type);\n       break;\n \n     case ppt_psb:\n-      printf_unfiltered ((\"psb\"));\n+      printf_filtered ((\"psb\"));\n       break;\n \n     case ppt_psbend:\n-      printf_unfiltered ((\"psbend\"));\n+      printf_filtered ((\"psbend\"));\n       break;\n \n     case ppt_pad:\n-      printf_unfiltered ((\"pad\"));\n+      printf_filtered ((\"pad\"));\n       break;\n \n     case ppt_tip:\n-      printf_unfiltered ((\"tip %u: 0x%\" PRIx64 \"\"),\n-\t\t\t packet->payload.ip.ipc,\n-\t\t\t packet->payload.ip.ip);\n+      printf_filtered ((\"tip %u: 0x%\" PRIx64 \"\"),\n+\t\t       packet->payload.ip.ipc,\n+\t\t       packet->payload.ip.ip);\n       break;\n \n     case ppt_tip_pge:\n-      printf_unfiltered ((\"tip.pge %u: 0x%\" PRIx64 \"\"),\n-\t\t\t packet->payload.ip.ipc,\n-\t\t\t packet->payload.ip.ip);\n+      printf_filtered ((\"tip.pge %u: 0x%\" PRIx64 \"\"),\n+\t\t       packet->payload.ip.ipc,\n+\t\t       packet->payload.ip.ip);\n       break;\n \n     case ppt_tip_pgd:\n-      printf_unfiltered ((\"tip.pgd %u: 0x%\" PRIx64 \"\"),\n-\t\t\t packet->payload.ip.ipc,\n-\t\t\t packet->payload.ip.ip);\n+      printf_filtered ((\"tip.pgd %u: 0x%\" PRIx64 \"\"),\n+\t\t       packet->payload.ip.ipc,\n+\t\t       packet->payload.ip.ip);\n       break;\n \n     case ppt_fup:\n-      printf_unfiltered ((\"fup %u: 0x%\" PRIx64 \"\"),\n-\t\t\t packet->payload.ip.ipc,\n-\t\t\t packet->payload.ip.ip);\n+      printf_filtered ((\"fup %u: 0x%\" PRIx64 \"\"),\n+\t\t       packet->payload.ip.ipc,\n+\t\t       packet->payload.ip.ip);\n       break;\n \n     case ppt_tnt_8:\n-      printf_unfiltered ((\"tnt-8 %u: 0x%\" PRIx64 \"\"),\n-\t\t\t packet->payload.tnt.bit_size,\n-\t\t\t packet->payload.tnt.payload);\n+      printf_filtered ((\"tnt-8 %u: 0x%\" PRIx64 \"\"),\n+\t\t       packet->payload.tnt.bit_size,\n+\t\t       packet->payload.tnt.payload);\n       break;\n \n     case ppt_tnt_64:\n-      printf_unfiltered ((\"tnt-64 %u: 0x%\" PRIx64 \"\"),\n-\t\t\t packet->payload.tnt.bit_size,\n-\t\t\t packet->payload.tnt.payload);\n+      printf_filtered ((\"tnt-64 %u: 0x%\" PRIx64 \"\"),\n+\t\t       packet->payload.tnt.bit_size,\n+\t\t       packet->payload.tnt.payload);\n       break;\n \n     case ppt_pip:\n-      printf_unfiltered ((\"pip %\" PRIx64 \"%s\"), packet->payload.pip.cr3,\n-\t\t\t packet->payload.pip.nr ? (\" nr\") : (\"\"));\n+      printf_filtered ((\"pip %\" PRIx64 \"%s\"), packet->payload.pip.cr3,\n+\t\t       packet->payload.pip.nr ? (\" nr\") : (\"\"));\n       break;\n \n     case ppt_tsc:\n-      printf_unfiltered ((\"tsc %\" PRIx64 \"\"), packet->payload.tsc.tsc);\n+      printf_filtered ((\"tsc %\" PRIx64 \"\"), packet->payload.tsc.tsc);\n       break;\n \n     case ppt_cbr:\n-      printf_unfiltered ((\"cbr %u\"), packet->payload.cbr.ratio);\n+      printf_filtered ((\"cbr %u\"), packet->payload.cbr.ratio);\n       break;\n \n     case ppt_mode:\n       switch (packet->payload.mode.leaf)\n \t{\n \tdefault:\n-\t  printf_unfiltered ((\"mode %u\"), packet->payload.mode.leaf);\n+\t  printf_filtered ((\"mode %u\"), packet->payload.mode.leaf);\n \t  break;\n \n \tcase pt_mol_exec:\n-\t  printf_unfiltered ((\"mode.exec%s%s\"),\n-\t\t\t     packet->payload.mode.bits.exec.csl\n-\t\t\t     ? (\" cs.l\") : (\"\"),\n-\t\t\t     packet->payload.mode.bits.exec.csd\n-\t\t\t     ? (\" cs.d\") : (\"\"));\n+\t  printf_filtered ((\"mode.exec%s%s\"),\n+\t\t\t   packet->payload.mode.bits.exec.csl\n+\t\t\t   ? (\" cs.l\") : (\"\"),\n+\t\t\t   packet->payload.mode.bits.exec.csd\n+\t\t\t   ? (\" cs.d\") : (\"\"));\n \t  break;\n \n \tcase pt_mol_tsx:\n-\t  printf_unfiltered ((\"mode.tsx%s%s\"),\n-\t\t\t     packet->payload.mode.bits.tsx.intx\n-\t\t\t     ? (\" intx\") : (\"\"),\n-\t\t\t     packet->payload.mode.bits.tsx.abrt\n-\t\t\t     ? (\" abrt\") : (\"\"));\n+\t  printf_filtered ((\"mode.tsx%s%s\"),\n+\t\t\t   packet->payload.mode.bits.tsx.intx\n+\t\t\t   ? (\" intx\") : (\"\"),\n+\t\t\t   packet->payload.mode.bits.tsx.abrt\n+\t\t\t   ? (\" abrt\") : (\"\"));\n \t  break;\n \t}\n       break;\n \n     case ppt_ovf:\n-      printf_unfiltered ((\"ovf\"));\n+      printf_filtered ((\"ovf\"));\n       break;\n \n     case ppt_stop:\n-      printf_unfiltered ((\"stop\"));\n+      printf_filtered ((\"stop\"));\n       break;\n \n     case ppt_vmcs:\n-      printf_unfiltered ((\"vmcs %\" PRIx64 \"\"), packet->payload.vmcs.base);\n+      printf_filtered ((\"vmcs %\" PRIx64 \"\"), packet->payload.vmcs.base);\n       break;\n \n     case ppt_tma:\n-      printf_unfiltered ((\"tma %x %x\"), packet->payload.tma.ctc,\n-\t\t\t packet->payload.tma.fc);\n+      printf_filtered ((\"tma %x %x\"), packet->payload.tma.ctc,\n+\t\t       packet->payload.tma.fc);\n       break;\n \n     case ppt_mtc:\n-      printf_unfiltered ((\"mtc %x\"), packet->payload.mtc.ctc);\n+      printf_filtered ((\"mtc %x\"), packet->payload.mtc.ctc);\n       break;\n \n     case ppt_cyc:\n-      printf_unfiltered ((\"cyc %\" PRIx64 \"\"), packet->payload.cyc.value);\n+      printf_filtered ((\"cyc %\" PRIx64 \"\"), packet->payload.cyc.value);\n       break;\n \n     case ppt_mnt:\n-      printf_unfiltered ((\"mnt %\" PRIx64 \"\"), packet->payload.mnt.payload);\n+      printf_filtered ((\"mnt %\" PRIx64 \"\"), packet->payload.mnt.payload);\n       break;\n     }\n }\n@@ -3149,9 +3149,9 @@ btrace_maint_print_packets (struct btrace_thread_info *btinfo,\n \t  {\n \t    const btrace_block &block = blocks.at (blk);\n \n-\t    printf_unfiltered (\"%u\\tbegin: %s, end: %s\\n\", blk,\n-\t\t\t       core_addr_to_string_nz (block.begin),\n-\t\t\t       core_addr_to_string_nz (block.end));\n+\t    printf_filtered (\"%u\\tbegin: %s, end: %s\\n\", blk,\n+\t\t\t     core_addr_to_string_nz (block.begin),\n+\t\t\t     core_addr_to_string_nz (block.end));\n \t  }\n \n \tbtinfo->maint.variant.bts.packet_history.begin = begin;\n@@ -3170,15 +3170,15 @@ btrace_maint_print_packets (struct btrace_thread_info *btinfo,\n \t  {\n \t    const struct btrace_pt_packet &packet = packets.at (pkt);\n \n-\t    printf_unfiltered (\"%u\\t\", pkt);\n-\t    printf_unfiltered (\"0x%\" PRIx64 \"\\t\", packet.offset);\n+\t    printf_filtered (\"%u\\t\", pkt);\n+\t    printf_filtered (\"0x%\" PRIx64 \"\\t\", packet.offset);\n \n \t    if (packet.errcode == pte_ok)\n \t      pt_print_packet (&packet.packet);\n \t    else\n-\t      printf_unfiltered (\"[error: %s]\", pt_errstr (packet.errcode));\n+\t      printf_filtered (\"[error: %s]\", pt_errstr (packet.errcode));\n \n-\t    printf_unfiltered (\"\\n\");\n+\t    printf_filtered (\"\\n\");\n \t  }\n \n \tbtinfo->maint.variant.pt.packet_history.begin = begin;\n@@ -3256,7 +3256,7 @@ maint_btrace_packet_history_cmd (const char *arg, int from_tty)\n   btrace_maint_update_packets (btinfo, &begin, &end, &from, &to);\n   if (begin == end)\n     {\n-      printf_unfiltered (_(\"No trace.\\n\"));\n+      printf_filtered (_(\"No trace.\\n\"));\n       return;\n     }\n \n@@ -3398,17 +3398,17 @@ maint_info_btrace_cmd (const char *args, int from_tty)\n   if (conf == NULL)\n     error (_(\"No btrace configuration.\"));\n \n-  printf_unfiltered (_(\"Format: %s.\\n\"),\n-\t\t     btrace_format_string (conf->format));\n+  printf_filtered (_(\"Format: %s.\\n\"),\n+\t\t   btrace_format_string (conf->format));\n \n   switch (conf->format)\n     {\n     default:\n       break;\n \n     case BTRACE_FORMAT_BTS:\n-      printf_unfiltered (_(\"Number of packets: %zu.\\n\"),\n-\t\t\t btinfo->data.variant.bts.blocks->size ());\n+      printf_filtered (_(\"Number of packets: %zu.\\n\"),\n+\t\t       btinfo->data.variant.bts.blocks->size ());\n       break;\n \n #if defined (HAVE_LIBIPT)\n@@ -3417,14 +3417,14 @@ maint_info_btrace_cmd (const char *args, int from_tty)\n \tstruct pt_version version;\n \n \tversion = pt_library_version ();\n-\tprintf_unfiltered (_(\"Version: %u.%u.%u%s.\\n\"), version.major,\n-\t\t\t   version.minor, version.build,\n-\t\t\t   version.ext != NULL ? version.ext : \"\");\n+\tprintf_filtered (_(\"Version: %u.%u.%u%s.\\n\"), version.major,\n+\t\t\t version.minor, version.build,\n+\t\t\t version.ext != NULL ? version.ext : \"\");\n \n \tbtrace_maint_update_pt_packets (btinfo);\n-\tprintf_unfiltered (_(\"Number of packets: %zu.\\n\"),\n-\t\t\t   ((btinfo->maint.variant.pt.packets == nullptr)\n-\t\t\t    ? 0 : btinfo->maint.variant.pt.packets->size ()));\n+\tprintf_filtered (_(\"Number of packets: %zu.\\n\"),\n+\t\t\t ((btinfo->maint.variant.pt.packets == nullptr)\n+\t\t\t  ? 0 : btinfo->maint.variant.pt.packets->size ()));\n       }\n       break;\n #endif /* defined (HAVE_LIBIPT)  */"
    },
    {
      "sha": "c659d68e44412b6c644fa6421fe26a339d969e45",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=7f762abff6e7b2e48c1f4a1d0a087ce4eb5677a7",
      "patch": "@@ -506,7 +506,7 @@ record_btrace_print_bts_conf (const struct btrace_config_bts *conf)\n   if (size > 0)\n     {\n       suffix = record_btrace_adjust_size (&size);\n-      printf_unfiltered (_(\"Buffer size: %u%s.\\n\"), size, suffix);\n+      printf_filtered (_(\"Buffer size: %u%s.\\n\"), size, suffix);\n     }\n }\n \n@@ -522,7 +522,7 @@ record_btrace_print_pt_conf (const struct btrace_config_pt *conf)\n   if (size > 0)\n     {\n       suffix = record_btrace_adjust_size (&size);\n-      printf_unfiltered (_(\"Buffer size: %u%s.\\n\"), size, suffix);\n+      printf_filtered (_(\"Buffer size: %u%s.\\n\"), size, suffix);\n     }\n }\n \n@@ -531,8 +531,8 @@ record_btrace_print_pt_conf (const struct btrace_config_pt *conf)\n static void\n record_btrace_print_conf (const struct btrace_config *conf)\n {\n-  printf_unfiltered (_(\"Recording format: %s.\\n\"),\n-\t\t     btrace_format_string (conf->format));\n+  printf_filtered (_(\"Recording format: %s.\\n\"),\n+\t\t   btrace_format_string (conf->format));\n \n   switch (conf->format)\n     {\n@@ -602,14 +602,14 @@ record_btrace_target::info_record ()\n       gaps = btinfo->ngaps;\n     }\n \n-  printf_unfiltered (_(\"Recorded %u instructions in %u functions (%u gaps) \"\n-\t\t       \"for thread %s (%s).\\n\"), insns, calls, gaps,\n-\t\t     print_thread_id (tp),\n-\t\t     target_pid_to_str (tp->ptid).c_str ());\n+  printf_filtered (_(\"Recorded %u instructions in %u functions (%u gaps) \"\n+\t\t     \"for thread %s (%s).\\n\"), insns, calls, gaps,\n+\t\t   print_thread_id (tp),\n+\t\t   target_pid_to_str (tp->ptid).c_str ());\n \n   if (btrace_is_replaying (tp))\n-    printf_unfiltered (_(\"Replay in progress.  At instruction %u.\\n\"),\n-\t\t       btrace_insn_number (btinfo->replay));\n+    printf_filtered (_(\"Replay in progress.  At instruction %u.\\n\"),\n+\t\t     btrace_insn_number (btinfo->replay));\n }\n \n /* Print a decode error.  */\n@@ -938,9 +938,9 @@ record_btrace_target::insn_history (int size, gdb_disassembly_flags flags)\n   else\n     {\n       if (size < 0)\n-\tprintf_unfiltered (_(\"At the start of the branch trace record.\\n\"));\n+\tprintf_filtered (_(\"At the start of the branch trace record.\\n\"));\n       else\n-\tprintf_unfiltered (_(\"At the end of the branch trace record.\\n\"));\n+\tprintf_filtered (_(\"At the end of the branch trace record.\\n\"));\n     }\n \n   btrace_set_insn_history (btinfo, &begin, &end);\n@@ -1295,9 +1295,9 @@ record_btrace_target::call_history (int size, record_print_flags flags)\n   else\n     {\n       if (size < 0)\n-\tprintf_unfiltered (_(\"At the start of the branch trace record.\\n\"));\n+\tprintf_filtered (_(\"At the start of the branch trace record.\\n\"));\n       else\n-\tprintf_unfiltered (_(\"At the end of the branch trace record.\\n\"));\n+\tprintf_filtered (_(\"At the end of the branch trace record.\\n\"));\n     }\n \n   btrace_set_call_history (btinfo, &begin, &end);\n@@ -3037,26 +3037,26 @@ cmd_show_record_btrace_cpu (const char *args, int from_tty)\n   switch (record_btrace_cpu_state)\n     {\n     case CS_AUTO:\n-      printf_unfiltered (_(\"btrace cpu is 'auto'.\\n\"));\n+      printf_filtered (_(\"btrace cpu is 'auto'.\\n\"));\n       return;\n \n     case CS_NONE:\n-      printf_unfiltered (_(\"btrace cpu is 'none'.\\n\"));\n+      printf_filtered (_(\"btrace cpu is 'none'.\\n\"));\n       return;\n \n     case CS_CPU:\n       switch (record_btrace_cpu.vendor)\n \t{\n \tcase CV_INTEL:\n \t  if (record_btrace_cpu.stepping == 0)\n-\t    printf_unfiltered (_(\"btrace cpu is 'intel: %u/%u'.\\n\"),\n-\t\t\t       record_btrace_cpu.family,\n-\t\t\t       record_btrace_cpu.model);\n+\t    printf_filtered (_(\"btrace cpu is 'intel: %u/%u'.\\n\"),\n+\t\t\t     record_btrace_cpu.family,\n+\t\t\t     record_btrace_cpu.model);\n \t  else\n-\t    printf_unfiltered (_(\"btrace cpu is 'intel: %u/%u/%u'.\\n\"),\n-\t\t\t       record_btrace_cpu.family,\n-\t\t\t       record_btrace_cpu.model,\n-\t\t\t       record_btrace_cpu.stepping);\n+\t    printf_filtered (_(\"btrace cpu is 'intel: %u/%u/%u'.\\n\"),\n+\t\t\t     record_btrace_cpu.family,\n+\t\t\t     record_btrace_cpu.model,\n+\t\t\t     record_btrace_cpu.stepping);\n \t  return;\n \t}\n     }"
    }
  ]
}