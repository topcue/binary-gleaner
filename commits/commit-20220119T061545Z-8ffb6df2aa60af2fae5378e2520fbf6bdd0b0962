{
  "sha": "8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962",
  "node_id": "C_kwDOANOeidoAKDhmZmI2ZGYyYWE2MGFmMmZhZTUzNzhlMjUyMGZiZjZiZGQwYjA5NjI",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-19T02:49:51Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-19T06:15:45Z"
    },
    "message": "PowerPC64 DT_RELR ELFv1\n\nMore fun with R_PPC64_NONE found in .opd.  Fixed by the\nallocate_dynrelocs and ppc64_elf_size_dynamic_sections changes, and\nsince we are doing ifunc, opd and SYMBOL_REFERENCES_LOCAL tests later,\ndon't duplicate that work in check_relocs.\n\n\t* elf64-ppc.c (ppc64_elf_check_relocs): Remove opd and ifunc\n\tconditions for rel_count.\n\t(dec_dynrel_count): Likewise.\n\t(allocate_dynrelocs): Test for opd and ifunc when allocating\n\trelative relocs.\n\t(ppc64_elf_size_dynamic_sections): Likewise.",
    "tree": {
      "sha": "3ab7df9a0ea08ef13372b813c0599d9bee521e2f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ab7df9a0ea08ef13372b813c0599d9bee521e2f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "edca615ac1901ddab9beec51a4bcf8395c307109",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edca615ac1901ddab9beec51a4bcf8395c307109",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/edca615ac1901ddab9beec51a4bcf8395c307109"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 14,
    "deletions": 14
  },
  "files": [
    {
      "sha": "05d2d9f91d3e62cdeba05eeba0afd9408cfc863e",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=8ffb6df2aa60af2fae5378e2520fbf6bdd0b0962",
      "patch": "@@ -5389,8 +5389,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t    p->pc_count += 1;\n \t\t  if ((r_type == R_PPC64_ADDR64 || r_type == R_PPC64_TOC)\n \t\t      && rel->r_offset % 2 == 0\n-\t\t      && sec->alignment_power != 0\n-\t\t      && ((!NO_OPD_RELOCS && is_opd) || !ifunc))\n+\t\t      && sec->alignment_power != 0)\n \t\t    p->rel_count += 1;\n \t\t}\n \t      else\n@@ -5435,8 +5434,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t  p->count += 1;\n \t\t  if ((r_type == R_PPC64_ADDR64 || r_type == R_PPC64_TOC)\n \t\t      && rel->r_offset % 2 == 0\n-\t\t      && sec->alignment_power != 0\n-\t\t      && ((!NO_OPD_RELOCS && is_opd) || !is_ifunc))\n+\t\t      && sec->alignment_power != 0)\n \t\t    p->rel_count += 1;\n \t\t}\n \t    }\n@@ -7283,10 +7281,7 @@ dec_dynrel_count (const Elf_Internal_Rela *rel,\n \t\tp->pc_count -= 1;\n \t      if ((r_type == R_PPC64_ADDR64 || r_type == R_PPC64_TOC)\n \t\t  && rel->r_offset % 2 == 0\n-\t\t  && sec->alignment_power != 0\n-\t\t  && ((!NO_OPD_RELOCS\n-\t\t       && ppc64_elf_section_data (sec)->sec_type == sec_opd)\n-\t\t      || h->type != STT_GNU_IFUNC))\n+\t\t  && sec->alignment_power != 0)\n \t\tp->rel_count -= 1;\n \t      p->count -= 1;\n \t      if (p->count == 0)\n@@ -7321,10 +7316,7 @@ dec_dynrel_count (const Elf_Internal_Rela *rel,\n \t    {\n \t      if ((r_type == R_PPC64_ADDR64 || r_type == R_PPC64_TOC)\n \t\t  && rel->r_offset % 2 == 0\n-\t\t  && sec->alignment_power != 0\n-\t\t  && ((!NO_OPD_RELOCS\n-\t\t       && ppc64_elf_section_data (sec)->sec_type == sec_opd)\n-\t\t      || !is_ifunc))\n+\t\t  && sec->alignment_power != 0)\n \t\tp->rel_count -= 1;\n \t      p->count -= 1;\n \t      if (p->count == 0)\n@@ -10014,7 +10006,11 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n \t  if (eh->elf.type == STT_GNU_IFUNC)\n \t    sreloc = htab->elf.irelplt;\n \t  count = p->count;\n-\t  if (info->enable_dt_relr && SYMBOL_REFERENCES_LOCAL (info, h))\n+\t  if (info->enable_dt_relr\n+\t      && ((!NO_OPD_RELOCS\n+\t\t   && ppc64_elf_section_data (p->sec)->sec_type == sec_opd)\n+\t\t  || (eh->elf.type != STT_GNU_IFUNC\n+\t\t      && SYMBOL_REFERENCES_LOCAL (info, h))))\n \t    count -= p->rel_count;\n \t  sreloc->size += count * sizeof (Elf64_External_Rela);\n \t}\n@@ -10264,7 +10260,11 @@ ppc64_elf_size_dynamic_sections (bfd *output_bfd,\n \t\t  asection *srel;\n \n \t\t  count = p->count;\n-\t\t  if (info->enable_dt_relr)\n+\t\t  if (info->enable_dt_relr\n+\t\t      && ((!NO_OPD_RELOCS\n+\t\t\t   && (ppc64_elf_section_data (p->sec)->sec_type\n+\t\t\t       == sec_opd))\n+\t\t\t  || !p->ifunc))\n \t\t    count -= p->rel_count;\n \t\t  srel = elf_section_data (p->sec)->sreloc;\n \t\t  if (p->ifunc)"
    }
  ]
}