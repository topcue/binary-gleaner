{
  "sha": "5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWY1MTJhN2RkMGRmMTIwNTYzMGU5ZWRmYWE4NGYyZTlhOGZiODc3MQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-24T22:22:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-27T12:01:48Z"
    },
    "message": "gdb: Split print_symbol_info into two parts\n\nSplit the function print_symbol_info into two parts, the new worker\ncore returns a string, which print_symbol_info then prints.  This will\nbe useful in a later commit when some new MI commands will be added\nwhich will use the worker core to fill some MI output fields.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* symtab.c (symbol_to_info_string): New function, most content\n\tmoved from print_symbol_info, but updated to return a std::string.\n\t(print_symbol_info): Update to use symbol_to_info_string and print\n\treturned string.\n\t* symtab.h (symbol_to_info_string): Declare new function.\n\nChange-Id: I6454ce43cacb61d32fbadb9e3655e70823085777",
    "tree": {
      "sha": "cedd04985fcb599854b25e0f5dc7b2cc4147b7c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cedd04985fcb599854b25e0f5dc7b2cc4147b7c2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "470c0b1c9a1d69e3c4f9281600399b1dadd40614",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/470c0b1c9a1d69e3c4f9281600399b1dadd40614",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/470c0b1c9a1d69e3c4f9281600399b1dadd40614"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 72,
    "deletions": 34
  },
  "files": [
    {
      "sha": "63e0519c547c7eda7ce0eecc32eb1bb4f40d82a3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* symtab.c (symbol_to_info_string): New function, most content\n+\tmoved from print_symbol_info, but updated to return a std::string.\n+\t(print_symbol_info): Update to use symbol_to_info_string and print\n+\treturned string.\n+\t* symtab.h (symbol_to_info_string): Declare new function.\n+\n 2019-11-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/python.c (gdbpy_rbreak): Convert to using"
    },
    {
      "sha": "8f46321f43d79019446180e62296d3f6a7c0a4d0",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 56,
      "deletions": 34,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
      "patch": "@@ -4712,44 +4712,25 @@ global_symbol_searcher::search () const\n   return result;\n }\n \n-/* Helper function for symtab_symbol_info, this function uses\n-   the data returned from search_symbols() to print information\n-   regarding the match to gdb_stdout.  If LAST is not NULL,\n-   print file and line number information for the symbol as\n-   well.  Skip printing the filename if it matches LAST.  */\n+/* See symtab.h.  */\n \n-static void\n-print_symbol_info (enum search_domain kind,\n-\t\t   struct symbol *sym,\n-\t\t   int block, const char *last)\n+std::string\n+symbol_to_info_string (struct symbol *sym, int block,\n+\t\t       enum search_domain kind)\n {\n-  scoped_switch_to_sym_language_if_auto l (sym);\n-  struct symtab *s = symbol_symtab (sym);\n-\n-  if (last != NULL)\n-    {\n-      const char *s_filename = symtab_to_filename_for_display (s);\n-\n-      if (filename_cmp (last, s_filename) != 0)\n-\t{\n-\t  printf_filtered (_(\"\\nFile %ps:\\n\"),\n-\t\t\t   styled_string (file_name_style.style (),\n-\t\t\t\t\t  s_filename));\n-\t}\n+  std::string str;\n \n-      if (SYMBOL_LINE (sym) != 0)\n-\tprintf_filtered (\"%d:\\t\", SYMBOL_LINE (sym));\n-      else\n-\tputs_filtered (\"\\t\");\n-    }\n+  gdb_assert (block == GLOBAL_BLOCK || block == STATIC_BLOCK);\n \n   if (kind != TYPES_DOMAIN && block == STATIC_BLOCK)\n-    printf_filtered (\"static \");\n+    str += \"static \";\n \n   /* Typedef that is not a C++ class.  */\n   if (kind == TYPES_DOMAIN\n       && SYMBOL_DOMAIN (sym) != STRUCT_DOMAIN)\n     {\n+      string_file tmp_stream;\n+\n       /* FIXME: For C (and C++) we end up with a difference in output here\n \t between how a typedef is printed, and non-typedefs are printed.\n \t The TYPEDEF_PRINT code places a \";\" at the end in an attempt to\n@@ -4759,28 +4740,69 @@ print_symbol_info (enum search_domain kind,\n \t printing of the \";\" in this function, which is going to be wrong\n \t for languages that don't require a \";\" between statements.  */\n       if (TYPE_CODE (SYMBOL_TYPE (sym)) == TYPE_CODE_TYPEDEF)\n-\ttypedef_print (SYMBOL_TYPE (sym), sym, gdb_stdout);\n+\ttypedef_print (SYMBOL_TYPE (sym), sym, &tmp_stream);\n       else\n-\ttype_print (SYMBOL_TYPE (sym), \"\", gdb_stdout, -1);\n-      printf_filtered (\"\\n\");\n+\ttype_print (SYMBOL_TYPE (sym), \"\", &tmp_stream, -1);\n+      str += tmp_stream.string ();\n     }\n   /* variable, func, or typedef-that-is-c++-class.  */\n   else if (kind < TYPES_DOMAIN\n \t   || (kind == TYPES_DOMAIN\n \t       && SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN))\n     {\n+      string_file tmp_stream;\n+\n       type_print (SYMBOL_TYPE (sym),\n \t\t  (SYMBOL_CLASS (sym) == LOC_TYPEDEF\n \t\t   ? \"\" : sym->print_name ()),\n-\t\t  gdb_stdout, 0);\n+\t\t  &tmp_stream, 0);\n \n-      printf_filtered (\";\\n\");\n+      str += tmp_stream.string ();\n+      str += \";\";\n     }\n   /* Printing of modules is currently done here, maybe at some future\n      point we might want a language specific method to print the module\n      symbol so that we can customise the output more.  */\n   else if (kind == MODULES_DOMAIN)\n-    printf_filtered (\"%s\\n\", sym->print_name ());\n+    str += sym->print_name ();\n+\n+  return str;\n+}\n+\n+/* Helper function for symbol info commands, for example 'info functions',\n+   'info variables', etc.  KIND is the kind of symbol we searched for, and\n+   BLOCK is the type of block the symbols was found in, either GLOBAL_BLOCK\n+   or STATIC_BLOCK.  SYM is the symbol we found.  If LAST is not NULL,\n+   print file and line number information for the symbol as well.  Skip\n+   printing the filename if it matches LAST.  */\n+\n+static void\n+print_symbol_info (enum search_domain kind,\n+\t\t   struct symbol *sym,\n+\t\t   int block, const char *last)\n+{\n+  scoped_switch_to_sym_language_if_auto l (sym);\n+  struct symtab *s = symbol_symtab (sym);\n+\n+  if (last != NULL)\n+    {\n+      const char *s_filename = symtab_to_filename_for_display (s);\n+\n+      if (filename_cmp (last, s_filename) != 0)\n+\t{\n+\t  printf_filtered (_(\"\\nFile %ps:\\n\"),\n+\t\t\t   styled_string (file_name_style.style (),\n+\t\t\t\t\t  s_filename));\n+\t}\n+\n+      if (SYMBOL_LINE (sym) != 0)\n+\tprintf_filtered (\"%d:\\t\", SYMBOL_LINE (sym));\n+      else\n+\tputs_filtered (\"\\t\");\n+    }\n+\n+  std::string str = symbol_to_info_string (sym, block, kind);\n+  printf_filtered (\"%s\\n\", str.c_str ());\n }\n \n /* This help function for symtab_symbol_info() prints information"
    },
    {
      "sha": "a52f2a5db2e11147c8536c8fd62c80c983a672b7",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f512a7dd0df1205630e9edfaa84f2e9a8fb8771/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=5f512a7dd0df1205630e9edfaa84f2e9a8fb8771",
      "patch": "@@ -2140,6 +2140,14 @@ extern std::vector<module_symbol_search> search_module_symbols\n \t(const char *module_regexp, const char *regexp,\n \t const char *type_regexp, search_domain kind);\n \n+/* Convert a global or static symbol SYM (based on BLOCK, which should be\n+   either GLOBAL_BLOCK or STATIC_BLOCK) into a string for use in 'info'\n+   type commands (e.g. 'info variables', 'info functions', etc).  KIND is\n+   the type of symbol that was searched for which gave us SYM.  */\n+\n+extern std::string symbol_to_info_string (struct symbol *sym, int block,\n+\t\t\t\t\t  enum search_domain kind);\n+\n extern bool treg_matches_sym_type_name (const compiled_regex &treg,\n \t\t\t\t\tconst struct symbol *sym);\n "
    }
  ]
}