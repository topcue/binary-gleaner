{
  "sha": "c57eb1a26982fd55f4fa991ede68576d91634f33",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzU3ZWIxYTI2OTgyZmQ1NWY0ZmE5OTFlZGU2ODU3NmQ5MTYzNGYzMw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-04T13:50:15Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-07T22:22:39Z"
    },
    "message": "nat/amd64-linux-siginfo.c: Remove typedefs\n\nSince GDB is written in C++ now, we don't need struct/union typedefs\nany more.  Remove them from nat/amd64-linux-siginfo.c.\n\ngdb/ChangeLog:\nyyyy-mm-dd  Pedro Alves  <pedro@palves.net>\n\n\t* nat/amd64-linux-siginfo.c (union nat_sigval): Rename to ...\n\t(nat_sigval_t): ... this and remove typedef of same name.\n\t(struct nat_siginfo): Rename to ...\n\t(nat_siginfo_t): ... this and remove typedef of same name.\n\t(struct compat_sigval): Rename to ...\n\t(compat_sigval_t): ... this and remove typedef of same name.\n\t(struct compat_siginfo): Rename to ...\n\t(compat_siginfo_t): ... this and remove typedef of same name.\n\t(struct compat_x32_siginfo): Rename to ...\n\t(compat_x32_siginfo_t): ... this and remove typedef of same name.\n\t(amd64_linux_siginfo_fixup_common): Adjust.",
    "tree": {
      "sha": "f209a3bff4ac7d41cbb6b7d9f7a2a3169c09deed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f209a3bff4ac7d41cbb6b7d9f7a2a3169c09deed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c57eb1a26982fd55f4fa991ede68576d91634f33",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c57eb1a26982fd55f4fa991ede68576d91634f33",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c57eb1a26982fd55f4fa991ede68576d91634f33",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c57eb1a26982fd55f4fa991ede68576d91634f33/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8ca8e9facb184d67ce1aca9196ed8446e7e2a09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8ca8e9facb184d67ce1aca9196ed8446e7e2a09",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8ca8e9facb184d67ce1aca9196ed8446e7e2a09"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 28,
    "deletions": 14
  },
  "files": [
    {
      "sha": "f0afa4e1b36eb9eebe18868d0d6ec212a77ec8cd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c57eb1a26982fd55f4fa991ede68576d91634f33/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c57eb1a26982fd55f4fa991ede68576d91634f33/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c57eb1a26982fd55f4fa991ede68576d91634f33",
      "patch": "@@ -1,3 +1,17 @@\n+2021-06-07  Pedro Alves  <pedro@palves.net>\n+\n+\t* nat/amd64-linux-siginfo.c (union nat_sigval): Rename to ...\n+\t(nat_sigval_t): ... this and remove typedef of same name.\n+\t(struct nat_siginfo): Rename to ...\n+\t(nat_siginfo_t): ... this and remove typedef of same name.\n+\t(struct compat_sigval): Rename to ...\n+\t(compat_sigval_t): ... this and remove typedef of same name.\n+\t(struct compat_siginfo): Rename to ...\n+\t(compat_siginfo_t): ... this and remove typedef of same name.\n+\t(struct compat_x32_siginfo): Rename to ...\n+\t(compat_x32_siginfo_t): ... this and remove typedef of same name.\n+\t(amd64_linux_siginfo_fixup_common): Adjust.\n+\n 2021-06-07  Pedro Alves  <pedro@palves.net>\n \n \t* nat/amd64-linux-siginfo.c (compat_x32_siginfo_t): Move"
    },
    {
      "sha": "342840e5085721731fac1bbb03d36c1a34fc7462",
      "filename": "gdb/nat/amd64-linux-siginfo.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c57eb1a26982fd55f4fa991ede68576d91634f33/gdb/nat/amd64-linux-siginfo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c57eb1a26982fd55f4fa991ede68576d91634f33/gdb/nat/amd64-linux-siginfo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/amd64-linux-siginfo.c?ref=c57eb1a26982fd55f4fa991ede68576d91634f33",
      "patch": "@@ -45,13 +45,13 @@ typedef int nat_timer_t;\n /* For native 64-bit, clock_t in _sigchld is 64-bit.  */\n typedef long nat_clock_t;\n \n-typedef union nat_sigval\n+union nat_sigval_t\n {\n   nat_int_t sival_int;\n   nat_uptr_t sival_ptr;\n-} nat_sigval_t;\n+};\n \n-typedef struct nat_siginfo\n+struct nat_siginfo_t\n {\n   int si_signo;\n   int si_errno;\n@@ -112,7 +112,7 @@ typedef struct nat_siginfo\n       int _fd;\n     } _sigpoll;\n   } _sifields;\n-} nat_siginfo_t;\n+};\n \n #endif /* __ILP32__ */\n \n@@ -133,13 +133,13 @@ struct compat_timeval\n   int tv_usec;\n };\n \n-typedef union compat_sigval\n+union compat_sigval_t\n {\n   compat_int_t sival_int;\n   compat_uptr_t sival_ptr;\n-} compat_sigval_t;\n+};\n \n-typedef struct compat_siginfo\n+struct compat_siginfo_t\n {\n   int si_signo;\n   int si_errno;\n@@ -201,12 +201,12 @@ typedef struct compat_siginfo\n       int _fd;\n     } _sigpoll;\n   } _sifields;\n-} compat_siginfo_t;\n+};\n \n /* For x32, clock_t in _sigchld is 64bit aligned at 4 bytes.  */\n typedef long __attribute__ ((__aligned__ (4))) compat_x32_clock_t;\n \n-typedef struct __attribute__ ((__aligned__ (8))) compat_x32_siginfo\n+struct __attribute__ ((__aligned__ (8))) compat_x32_siginfo_t\n {\n   int si_signo;\n   int si_errno;\n@@ -263,7 +263,7 @@ typedef struct __attribute__ ((__aligned__ (8))) compat_x32_siginfo\n       int _fd;\n     } _sigpoll;\n   } _sifields;\n-} compat_x32_siginfo_t;\n+};\n \n /* To simplify usage of siginfo fields.  */\n \n@@ -578,20 +578,20 @@ amd64_linux_siginfo_fixup_common (siginfo_t *ptrace, gdb_byte *inf,\n   if (mode == FIXUP_32)\n     {\n       if (direction == 0)\n-\tcompat_siginfo_from_siginfo ((struct compat_siginfo *) inf, ptrace);\n+\tcompat_siginfo_from_siginfo ((compat_siginfo_t *) inf, ptrace);\n       else\n-\tsiginfo_from_compat_siginfo (ptrace, (struct compat_siginfo *) inf);\n+\tsiginfo_from_compat_siginfo (ptrace, (compat_siginfo_t *) inf);\n \n       return 1;\n     }\n   else if (mode == FIXUP_X32)\n     {\n       if (direction == 0)\n-\tcompat_x32_siginfo_from_siginfo ((struct compat_x32_siginfo *) inf,\n+\tcompat_x32_siginfo_from_siginfo ((compat_x32_siginfo_t *) inf,\n \t\t\t\t\t ptrace);\n       else\n \tsiginfo_from_compat_x32_siginfo (ptrace,\n-\t\t\t\t\t (struct compat_x32_siginfo *) inf);\n+\t\t\t\t\t (compat_x32_siginfo_t *) inf);\n \n       return 1;\n     }"
    }
  ]
}