{
  "sha": "3f94e588596cdca710de71735127560788fd8770",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Y5NGU1ODg1OTZjZGNhNzEwZGU3MTczNTEyNzU2MDc4OGZkODc3MA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-01-12T16:36:51Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-01-12T16:36:51Z"
    },
    "message": "[gdb/testsuite] Add have_mpx in lib/gdb.exp\n\nThe sources for the test-cases gdb.arch/i386-mpx*.exp contain have_mpx\nfunctions that test whether the processor supports mpx instructions.\n\nOTOH, the test-cases are compiled using -mmpx -fcheck-pointer-bounds, which\ninstrument all functions with mpx instructions.\n\nSo, the function that is supposed to test whether mpx instruction are\nsupported contains mpx instructions, which is a bit odd.\n\nWe could fix this by:\n- factoring out the have_mpx function into a single source file, and\n- compiling it without \"-mmpx -fcheck-pointer-bounds\".\n\nBut having the mpx support test as part of the test-cases seems like an\nunnecessary complication that makes the test-cases more difficult to analyze,\nreason about and modify.\n\nSo we go one step further and factor out the mpx support test in into a\ngdb_caching_proc.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2021-01-12  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.arch/i386-mpx-call.c (have_mpx): Remove.\n\t(main): Remove call to have_mpx.\n\t* gdb.arch/i386-mpx-call.exp: Use have_mpx.\n\t* gdb.arch/i386-mpx-map.c (have_mpx): Remove.\n\t(main): Remote call to have_mpx.\n\t* gdb.arch/i386-mpx-map.exp: Use have_mpx.\n\t* gdb.arch/i386-mpx-sigsegv.c (have_mpx): Remove.\n\t(main): Remove call to have_mpx.\n\t* gdb.arch/i386-mpx-sigsegv.exp: Use have_mpx.\n\t* gdb.arch/i386-mpx-simple_segv.c (have_mpx): Remove.\n\t(main): Remove call to have_mpx.\n\t* gdb.arch/i386-mpx-simple_segv.exp: Use have_mpx.\n\t* gdb.arch/i386-mpx.c (have_mpx): Remove.\n\t(main): Remote call to have_mpx.\n\t* gdb.arch/i386-mpx.exp: Use have_mpx.\n\t* lib/gdb.exp (have_mpx): New proc.",
    "tree": {
      "sha": "6cb984ba9648946d0cf395aac2eb95879b58ce6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6cb984ba9648946d0cf395aac2eb95879b58ce6a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3f94e588596cdca710de71735127560788fd8770",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f94e588596cdca710de71735127560788fd8770",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3f94e588596cdca710de71735127560788fd8770",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f94e588596cdca710de71735127560788fd8770/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b2f2ae0d6ff07e935f6ab23132f1fed02640d204",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2f2ae0d6ff07e935f6ab23132f1fed02640d204",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b2f2ae0d6ff07e935f6ab23132f1fed02640d204"
    }
  ],
  "stats": {
    "total": 504,
    "additions": 191,
    "deletions": 313
  },
  "files": [
    {
      "sha": "8e54f8cad5874e999d123d44bd8ded1d9dd979b3",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -1,3 +1,22 @@\n+2021-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.arch/i386-mpx-call.c (have_mpx): Remove.\n+\t(main): Remove call to have_mpx.\n+\t* gdb.arch/i386-mpx-call.exp: Use have_mpx.\n+\t* gdb.arch/i386-mpx-map.c (have_mpx): Remove.\n+\t(main): Remote call to have_mpx.\n+\t* gdb.arch/i386-mpx-map.exp: Use have_mpx.\n+\t* gdb.arch/i386-mpx-sigsegv.c (have_mpx): Remove.\n+\t(main): Remove call to have_mpx.\n+\t* gdb.arch/i386-mpx-sigsegv.exp: Use have_mpx.\n+\t* gdb.arch/i386-mpx-simple_segv.c (have_mpx): Remove.\n+\t(main): Remove call to have_mpx.\n+\t* gdb.arch/i386-mpx-simple_segv.exp: Use have_mpx.\n+\t* gdb.arch/i386-mpx.c (have_mpx): Remove.\n+\t(main): Remote call to have_mpx.\n+\t* gdb.arch/i386-mpx.exp: Use have_mpx.\n+\t* lib/gdb.exp (have_mpx): New proc.\n+\n 2021-01-12  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gdb.arch/aarch64-fp.exp: Modify to test bfloat16 support."
    },
    {
      "sha": "cc37edb1d04bb1a591bc784047c4a91db3068e94",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-call.c",
      "status": "modified",
      "additions": 26,
      "deletions": 52,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-call.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-call.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-call.c?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -17,34 +17,10 @@\n \n #include <stdlib.h>\n #include <string.h>\n-#include \"x86-cpuid.h\"\n \n /* Defined size for arrays.  */\n #define ARRAY_LENGTH    5\n \n-unsigned int\n-have_mpx (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if ((ecx & bit_OSXSAVE) == bit_OSXSAVE)\n-    {\n-      if (__get_cpuid_max (0, NULL) < 7)\n-\treturn 0;\n-\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      if ((ebx & bit_MPX) == bit_MPX)\n-\treturn 1;\n-      else\n-\treturn 0;\n-    }\n-  return 0;\n-}\n-\n \n int\n upper (int *a, int *b, int *c, int *d, int len)\n@@ -99,33 +75,31 @@ char_lower (char *str, int length)\n int\n main (void)\n {\n-  if (have_mpx ())\n-    {\n-      int sa[ARRAY_LENGTH];\n-      int sb[ARRAY_LENGTH];\n-      int sc[ARRAY_LENGTH];\n-      int sd[ARRAY_LENGTH];\n-      int *x, *a, *b, *c, *d;\n-      char mchar;\n-      char hello[] = \"Hello\";\n-\n-      x = malloc (sizeof (int) * ARRAY_LENGTH);\n-      a = malloc (sizeof (int) * ARRAY_LENGTH);\n-      b = malloc (sizeof (int) * ARRAY_LENGTH);\n-      c = malloc (sizeof (int) * ARRAY_LENGTH);\n-      d = malloc (sizeof (int) * ARRAY_LENGTH);\n-\n-      *x = upper (sa, sb, sc, sd, 0);  /* bkpt 1.  */\n-      *x = lower (a, b, c, d, 0);\n-\n-      mchar = char_upper (hello, 10);\n-      mchar = char_lower (hello, 10);\n-\n-      free (x);\n-      free (a);\n-      free (b);\n-      free (c);\n-      free (d);\n-    }\n+  int sa[ARRAY_LENGTH];\n+  int sb[ARRAY_LENGTH];\n+  int sc[ARRAY_LENGTH];\n+  int sd[ARRAY_LENGTH];\n+  int *x, *a, *b, *c, *d;\n+  char mchar;\n+  char hello[] = \"Hello\";\n+\n+  x = malloc (sizeof (int) * ARRAY_LENGTH);\n+  a = malloc (sizeof (int) * ARRAY_LENGTH);\n+  b = malloc (sizeof (int) * ARRAY_LENGTH);\n+  c = malloc (sizeof (int) * ARRAY_LENGTH);\n+  d = malloc (sizeof (int) * ARRAY_LENGTH);\n+\n+  *x = upper (sa, sb, sc, sd, 0);  /* bkpt 1.  */\n+  *x = lower (a, b, c, d, 0);\n+\n+  mchar = char_upper (hello, 10);\n+  mchar = char_lower (hello, 10);\n+\n+  free (x);\n+  free (a);\n+  free (b);\n+  free (c);\n+  free (d);\n+\n   return 0;\n }"
    },
    {
      "sha": "360cc68295add07d954ee6bfea2c87462a851ba1",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-call.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-call.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-call.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-call.exp?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -25,6 +25,11 @@ if { ![supports_mpx_check_pointer_bounds] } {\n     return -1\n }\n \n+if { ![have_mpx] } {\n+    unsupported \"processor does not support MPX\"\n+    return -1\n+}\n+\n set comp_flags \"-mmpx -fcheck-pointer-bounds -I${srcdir}/../nat\"\n \n if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} \\\n@@ -37,18 +42,6 @@ if ![runto_main] {\n     return -1\n }\n \n-set test \"check whether processor supports MPX\"\n-gdb_test_multiple \"print have_mpx ()\" $test {\n-    -re \".*= 1\\r\\n$gdb_prompt \" {\n-        pass $test\n-    }\n-    -re \".*= 0\\r\\n$gdb_prompt \" {\n-        pass $test\n-        untested \"processor does not support MPX; skipping tests\"\n-        return\n-    }\n-}\n-\n set bounds_table 0\n gdb_test_multiple \"disassemble upper\" \"\" {\n     -re -wrap \"bndldx.*\" {"
    },
    {
      "sha": "541d54aa7565d581aa0da2dd80665a12e8d8e3c6",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-map.c",
      "status": "modified",
      "additions": 6,
      "deletions": 39,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-map.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-map.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-map.c?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -21,41 +21,10 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include <stdlib.h>\n-#include \"x86-cpuid.h\"\n-\n-#ifndef NOINLINE\n-#define NOINLINE __attribute__ ((noinline))\n-#endif\n-\n #define SIZE  5\n \n typedef int T;\n \n-unsigned int have_mpx (void) NOINLINE;\n-\n-unsigned int NOINLINE\n-have_mpx (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if ((ecx & bit_OSXSAVE) == bit_OSXSAVE)\n-    {\n-      if (__get_cpuid_max (0, NULL) < 7)\n-\treturn 0;\n-\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      if ((ebx & bit_MPX) == bit_MPX)\n-\treturn 1;\n-      else\n-\treturn 0;\n-    }\n-  return 0;\n-}\n-\n void\n foo (T *p)\n {\n@@ -78,17 +47,15 @@ foo (T *p)\n int\n main (void)\n {\n-  if (have_mpx ())\n-    {\n-      T *a = NULL;\n+  T *a = NULL;\n \n-      a = calloc (SIZE, sizeof (T));\t/* after-decl */\n+  a = calloc (SIZE, sizeof (T));\t/* after-decl */\n #if defined  __GNUC__ && !defined __INTEL_COMPILER\n-      __bnd_store_ptr_bounds (a, &a);\n+  __bnd_store_ptr_bounds (a, &a);\n #endif\n \n-      foo (a);\t\t\t\t/* after-alloc */\n-      free (a);\n-    }\n+  foo (a);\t\t\t\t/* after-alloc */\n+  free (a);\n+\n   return 0;\n }"
    },
    {
      "sha": "55b70d1de0fd09a05f2a696dd61872a846040b40",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-map.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 18,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-map.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-map.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-map.exp?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -27,6 +27,11 @@ if { ![supports_mpx_check_pointer_bounds] } {\n     return -1\n }\n \n+if { ![have_mpx] } {\n+    unsupported \"processor does not support MPX\"\n+    return -1\n+}\n+\n set comp_flags \"-mmpx -fcheck-pointer-bounds -I${srcdir}/../nat/\"\n \n if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} \\\n@@ -39,24 +44,6 @@ if ![runto_main] {\n \treturn -1\n }\n \n-set supports_mpx 0\n-set test \"probe MPX support\"\n-\n-gdb_test_multiple \"print have_mpx()\" $test {\n-    -re \".. = 1\\r\\n$gdb_prompt $\" {\n-        pass $test\n-        set supports_mpx 1\n-    }\n-    -re \".. = 0\\r\\n$gdb_prompt $\" {\n-        pass $test\n-    }\n-}\n-\n-if { !$supports_mpx } {\n-    unsupported \"processor does not support MPX\"\n-    return\n-}\n-\n gdb_breakpoint [ gdb_get_line_number \"after-decl\" ]\n gdb_breakpoint [ gdb_get_line_number \"after-alloc\" ]\n gdb_breakpoint [ gdb_get_line_number \"after-assign\" ]"
    },
    {
      "sha": "09e1b834e3e5c68059abb1f73cca7983ce462cc0",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-sigsegv.c",
      "status": "modified",
      "additions": 26,
      "deletions": 54,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-sigsegv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-sigsegv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-sigsegv.c?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -15,9 +15,6 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-#include \"x86-cpuid.h\"\n-#include <stdio.h>\n-\n #define OUR_SIZE    5\n \n int gx[OUR_SIZE];\n@@ -26,29 +23,6 @@ int gb[OUR_SIZE];\n int gc[OUR_SIZE];\n int gd[OUR_SIZE];\n \n-unsigned int\n-have_mpx (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if ((ecx & bit_OSXSAVE) == bit_OSXSAVE)\n-    {\n-      if (__get_cpuid_max (0, NULL) < 7)\n-\treturn 0;\n-\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      if ((ebx & bit_MPX) == bit_MPX)\n-\treturn 1;\n-      else\n-\treturn 0;\n-    }\n-  return 0;\n-}\n-\n int\n bp1 (int value)\n {\n@@ -87,34 +61,32 @@ lower (int * p, int * a, int * b, int * c, int * d, int len)\n int\n main (void)\n {\n-  if (have_mpx ())\n-    {\n-      int sx[OUR_SIZE];\n-      int sa[OUR_SIZE];\n-      int sb[OUR_SIZE];\n-      int sc[OUR_SIZE];\n-      int sd[OUR_SIZE];\n-      int *x, *a, *b, *c, *d;\n-\n-      x = calloc (OUR_SIZE, sizeof (int));\n-      a = calloc (OUR_SIZE, sizeof (int));\n-      b = calloc (OUR_SIZE, sizeof (int));\n-      c = calloc (OUR_SIZE, sizeof (int));\n-      d = calloc (OUR_SIZE, sizeof (int));\n-\n-      upper (x, a, b, c, d, OUR_SIZE + 2);\n-      upper (sx, sa, sb, sc, sd, OUR_SIZE + 2);\n-      upper (gx, ga, gb, gc, gd, OUR_SIZE + 2);\n-      lower (x, a, b, c, d, 1);\n-      lower (sx, sa, sb, sc, sd, 1);\n-      bp1 (*x);\n-      lower (gx, ga, gb, gc, gd, 1);\n+  int sx[OUR_SIZE];\n+  int sa[OUR_SIZE];\n+  int sb[OUR_SIZE];\n+  int sc[OUR_SIZE];\n+  int sd[OUR_SIZE];\n+  int *x, *a, *b, *c, *d;\n+\n+  x = calloc (OUR_SIZE, sizeof (int));\n+  a = calloc (OUR_SIZE, sizeof (int));\n+  b = calloc (OUR_SIZE, sizeof (int));\n+  c = calloc (OUR_SIZE, sizeof (int));\n+  d = calloc (OUR_SIZE, sizeof (int));\n+\n+  upper (x, a, b, c, d, OUR_SIZE + 2);\n+  upper (sx, sa, sb, sc, sd, OUR_SIZE + 2);\n+  upper (gx, ga, gb, gc, gd, OUR_SIZE + 2);\n+  lower (x, a, b, c, d, 1);\n+  lower (sx, sa, sb, sc, sd, 1);\n+  bp1 (*x);\n+  lower (gx, ga, gb, gc, gd, 1);\n+\n+  free (x);\n+  free (a);\n+  free (b);\n+  free (c);\n+  free (d);\n \n-      free (x);\n-      free (a);\n-      free (b);\n-      free (c);\n-      free (d);\n-    }\n   return 0;\n }"
    },
    {
      "sha": "ef8fd68486bdb4066f58e1874fb7ab87adce1911",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-sigsegv.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-sigsegv.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-sigsegv.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-sigsegv.exp?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -27,6 +27,11 @@ if { ![supports_mpx_check_pointer_bounds] } {\n     return -1\n }\n \n+if { ![have_mpx] } {\n+    unsupported \"processor does not support MPX\"\n+    return -1\n+}\n+\n set comp_flags \"-mmpx -fcheck-pointer-bounds -I${srcdir}/../nat/\"\n \n if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} \\\n@@ -39,16 +44,6 @@ if ![runto_main] {\n     return -1\n }\n \n-gdb_test_multiple \"print have_mpx ()\" \"have mpx\" {\n-    -re \".. = 1\\r\\n$gdb_prompt \" {\n-        pass \"check whether processor supports MPX\"\n-    }\n-    -re \".. = 0\\r\\n$gdb_prompt \" {\n-        verbose \"processor does not support MPX; skipping MPX tests\"\n-        return\n-    }\n-}\n-\n set u_fault [multi_line \"Program received signal SIGSEGV, Segmentation fault\" \\\n                         \"Upper bound violation while accessing address $hex\" \\\n                         \"Bounds: \\\\\\[lower = $hex, upper = $hex\\\\\\]\"]"
    },
    {
      "sha": "97baed74c93d7bf28c63bc0379ee5825d0e293c4",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-simple_segv.c",
      "status": "modified",
      "additions": 5,
      "deletions": 35,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-simple_segv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-simple_segv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-simple_segv.c?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -15,34 +15,8 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-#include \"x86-cpuid.h\"\n-#include <stdio.h>\n-\n #define OUR_SIZE    5\n \n-unsigned int\n-have_mpx (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if ((ecx & bit_OSXSAVE) == bit_OSXSAVE)\n-    {\n-      if (__get_cpuid_max (0, NULL) < 7)\n-\treturn 0;\n-\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      if ((ebx & bit_MPX) == bit_MPX)\n-\treturn 1;\n-      else\n-\treturn 0;\n-    }\n-  return 0;\n-}\n-\n void\n upper (int * p, int len)\n {\n@@ -54,13 +28,9 @@ upper (int * p, int len)\n int\n main (void)\n {\n-  if (have_mpx ())\n-    {\n-      int a = 0;\t\t\t/* Dummy variable for debugging purposes.  */\n-      int sx[OUR_SIZE];\n-      a++;\t\t\t\t/* register-eval.  */\n-      upper (sx, OUR_SIZE + 2);\n-      return sx[1];\n-    }\n-  return 0;\n+  int a = 0;\t\t\t/* Dummy variable for debugging purposes.  */\n+  int sx[OUR_SIZE];\n+  a++;\t\t\t\t/* register-eval.  */\n+  upper (sx, OUR_SIZE + 2);\n+  return sx[1];\n }"
    },
    {
      "sha": "e5b2a890f3cf11095ba502788c9571b9ce7a8b72",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx-simple_segv.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-simple_segv.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx-simple_segv.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx-simple_segv.exp?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -33,6 +33,11 @@ if { ![supports_mpx_check_pointer_bounds] } {\n     return -1\n }\n \n+if { ![have_mpx] } {\n+    unsupported \"processor does not support MPX\"\n+    return -1\n+}\n+\n set comp_flags \"-mmpx -fcheck-pointer-bounds -I${srcdir}/../nat/\"\n \n if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} \\\n@@ -45,16 +50,6 @@ if ![runto_main] {\n     return -1\n }\n \n-gdb_test_multiple \"print have_mpx ()\" \"have mpx\" {\n-    -re \".. = 1\\r\\n$gdb_prompt \" {\n-        pass \"check whether processor supports MPX\"\n-    }\n-    -re \".. = 0\\r\\n$gdb_prompt \" {\n-        verbose \"processor does not support MPX; skipping MPX tests\"\n-        return\n-    }\n-}\n-\n set violation [multi_line \"Program received signal SIGSEGV, Segmentation fault\" \\\n                           \"Upper bound violation while accessing address $hex\" \\\n                           \"Bounds: \\\\\\[lower = $hex, upper = $hex\\\\\\]\"]"
    },
    {
      "sha": "b96da5478afb65341b82af2589187d5c6d6ae903",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx.c",
      "status": "modified",
      "additions": 32,
      "deletions": 66,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx.c?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -17,77 +17,43 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-#include <stdio.h>\n-#include \"x86-cpuid.h\"\n-\n-#ifndef NOINLINE\n-#define NOINLINE __attribute__ ((noinline))\n-#endif\n-\n-unsigned int have_mpx (void) NOINLINE;\n-\n-unsigned int NOINLINE\n-have_mpx (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if ((ecx & bit_OSXSAVE) == bit_OSXSAVE)\n-    {\n-      if (__get_cpuid_max (0, NULL) < 7)\n-\treturn 0;\n-\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      if ((ebx & bit_MPX) == bit_MPX)\n-\treturn 1;\n-      else\n-\treturn 0;\n-    }\n-  return 0;\n-}\n-\n int\n main (int argc, char **argv)\n {\n-  if (have_mpx ())\n-    {\n #ifdef __x86_64__\n-      asm (\"mov $10, %rax\\n\\t\"\n-\t  \"mov $9, %rdx\\n\\t\"\n-\t  \"bndmk (%rax,%rdx), %bnd0\\n\\t\"\n-\t  \"mov $20, %rax\\n\\t\"\n-\t  \"mov $9, %rdx\\n\\t\"\n-\t  \"bndmk (%rax,%rdx), %bnd1\\n\\t\"\n-\t  \"mov $30, %rax\\n\\t\"\n-\t  \"mov $9, %rdx\\n\\t\"\n-\t  \"bndmk (%rax,%rdx), %bnd2\\n\\t\"\n-\t  \"mov $40, %rax\\n\\t\"\n-\t  \"mov $9, %rdx\\n\\t\"\n-\t  \"bndmk (%rax,%rdx), %bnd3\\n\\t\"\n-\t  \"bndstx %bnd3, (%rax) \\n\\t\"\n-\t  \"nop\\n\\t\"\n-         );\n+  asm (\"mov $10, %rax\\n\\t\"\n+       \"mov $9, %rdx\\n\\t\"\n+       \"bndmk (%rax,%rdx), %bnd0\\n\\t\"\n+       \"mov $20, %rax\\n\\t\"\n+       \"mov $9, %rdx\\n\\t\"\n+       \"bndmk (%rax,%rdx), %bnd1\\n\\t\"\n+       \"mov $30, %rax\\n\\t\"\n+       \"mov $9, %rdx\\n\\t\"\n+       \"bndmk (%rax,%rdx), %bnd2\\n\\t\"\n+       \"mov $40, %rax\\n\\t\"\n+       \"mov $9, %rdx\\n\\t\"\n+       \"bndmk (%rax,%rdx), %bnd3\\n\\t\"\n+       \"bndstx %bnd3, (%rax) \\n\\t\"\n+       \"nop\\n\\t\"\n+       );\n #else\n-      asm (\"mov $10, %eax\\n\\t\"\n-\t   \"mov $9, %edx\\n\\t\"\n-\t   \"bndmk (%eax,%edx), %bnd0\\n\\t\"\n-\t   \"mov $20, %eax\\n\\t\"\n-\t   \"mov $9, %edx\\n\\t\"\n-\t   \"bndmk (%eax,%edx), %bnd1\\n\\t\"\n-\t   \"mov $30, %eax\\n\\t\"\n-\t   \"mov $9, %edx\\n\\t\"\n-\t   \"bndmk (%eax,%edx), %bnd2\\n\\t\"\n-\t   \"mov $40, %eax\\n\\t\"\n-\t   \"mov $9, %edx\\n\\t\"\n-\t   \"bndmk (%eax,%edx), %bnd3\\n\\t\"\n-\t   \"bndstx  %bnd3, (%eax)\\n\\t\"\n-\t   \"nop\\n\\t\"\n-\t  );\n+  asm (\"mov $10, %eax\\n\\t\"\n+       \"mov $9, %edx\\n\\t\"\n+       \"bndmk (%eax,%edx), %bnd0\\n\\t\"\n+       \"mov $20, %eax\\n\\t\"\n+       \"mov $9, %edx\\n\\t\"\n+       \"bndmk (%eax,%edx), %bnd1\\n\\t\"\n+       \"mov $30, %eax\\n\\t\"\n+       \"mov $9, %edx\\n\\t\"\n+       \"bndmk (%eax,%edx), %bnd2\\n\\t\"\n+       \"mov $40, %eax\\n\\t\"\n+       \"mov $9, %edx\\n\\t\"\n+       \"bndmk (%eax,%edx), %bnd3\\n\\t\"\n+       \"bndstx  %bnd3, (%eax)\\n\\t\"\n+       \"nop\\n\\t\"\n+       );\n #endif\n-\tasm (\"nop\\n\\t\");\t/* break here.  */\n-    }\n+  asm (\"nop\\n\\t\");\t/* break here.  */\n+\n   return 0;\n }"
    },
    {
      "sha": "a6b74ceda6b71d092d320ae025410d17676af3e0",
      "filename": "gdb/testsuite/gdb.arch/i386-mpx.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 17,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/gdb.arch/i386-mpx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-mpx.exp?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -31,6 +31,11 @@ if { ![supports_mpx_check_pointer_bounds] } {\n     return -1\n }\n \n+if { ![have_mpx] } {\n+    unsupported \"processor does not support MPX\"\n+    return -1\n+}\n+\n set comp_flags \"-mmpx -fcheck-pointer-bounds -I${srcdir}/../nat/\"\n \n if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} \\\n@@ -43,23 +48,6 @@ if ![runto_main] {\n     return -1\n }\n \n-set supports_mpx 0\n-set test \"probe MPX support\"\n-gdb_test_multiple \"print have_mpx()\" $test {\n-    -re \".. = 1\\r\\n$gdb_prompt $\" {\n-        pass $test\n-        set supports_mpx 1\n-    }\n-    -re \".. = 0\\r\\n$gdb_prompt $\" {\n-        pass $test\n-    }\n-}\n-\n-if { !$supports_mpx } {\n-    unsupported \"processor does not support MPX\"\n-    return\n-}\n-\n # Test bndcfg register and bndstatus at startup\n set test_string \"\\\\\\{raw = 0x\\[0-9a-f\\]+, config = \\\\\\{base = \\[0-9\\]+,\\\n reserved = \\[0-9\\]+, preserved = \\[0-9\\]+, enabled = \\[0-9\\]+\\\\\\}\\\\\\}\""
    },
    {
      "sha": "ae24fe2f49c99ee5cdc30347c1acfea7a9c07571",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f94e588596cdca710de71735127560788fd8770/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=3f94e588596cdca710de71735127560788fd8770",
      "patch": "@@ -7771,5 +7771,57 @@ gdb_caching_proc supports_gnuc {\n     return [gdb_simple_compile $me $src object \"\"]\n }\n \n+# Return 1 if target supports mpx, otherwise return 0.\n+gdb_caching_proc have_mpx {\n+    global srcdir\n+\n+    set me \"have_mpx\"\n+    if { ![istarget \"i?86-*-*\"] && ![istarget \"x86_64-*-*\"] } {\n+        verbose \"$me: target does not support mpx, returning 0\" 2\n+        return 0\n+    }\n+\n+    # Compile a test program.\n+    set src {\n+       #include \"nat/x86-cpuid.h\"\n+\n+        int main() {\n+\t  unsigned int eax, ebx, ecx, edx;\n+\n+\t  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t    return 0;\n+\n+\t  if ((ecx & bit_OSXSAVE) == bit_OSXSAVE)\n+\t    {\n+\t      if (__get_cpuid_max (0, (void *)0) < 7)\n+\t\treturn 0;\n+\n+\t\t__cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+\t\tif ((ebx & bit_MPX) == bit_MPX)\n+\t\t  return 1;\n+\n+\t    }\n+\t  return 0;\n+\t}\n+    }\n+    set compile_flags \"incdir=${srcdir}/..\"\n+    if {![gdb_simple_compile $me $src executable $compile_flags]} {\n+        return 0\n+    }\n+\n+    set result [remote_exec target $obj]\n+    set status [lindex $result 0]\n+    set output [lindex $result 1]\n+    if { $output != \"\" } {\n+\tset status 0\n+    }\n+\n+    remote_file build delete $obj\n+\n+    verbose \"$me:  returning $status\" 2\n+    return $status\n+}\n+\n # Always load compatibility stuff.\n load_lib future.exp"
    }
  ]
}