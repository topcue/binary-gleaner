{
  "sha": "5b5e15ecddafc43de2da632aa68f935a879d9a91",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI1ZTE1ZWNkZGFmYzQzZGUyZGE2MzJhYTY4ZjkzNWE4NzlkOWE5MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:41Z"
    },
    "message": "Rewrite ada_value_print_inner\n\nThis rewrites ada_value_print_inner, introducing a new\nada_value_print_1, an analogue of ada_val_print_1.  Because it was\nsimple to do, this also converts ada_val_print_gnat_array to be\nvalued-based and updates the uses.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* ada-valprint.c (ada_val_print_gnat_array): Take a struct value;\n\tcall common_val_print.\n\t(ada_val_print_1): Update.\n\t(ada_value_print_1): New function.\n\t(ada_value_print_inner): Rewrite.",
    "tree": {
      "sha": "7699cb7efa83949f8a89fadfb7819406af78a0c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7699cb7efa83949f8a89fadfb7819406af78a0c3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b5e15ecddafc43de2da632aa68f935a879d9a91",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b5e15ecddafc43de2da632aa68f935a879d9a91",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b5e15ecddafc43de2da632aa68f935a879d9a91",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b5e15ecddafc43de2da632aa68f935a879d9a91/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fbf54e7554e0dcd60e18b1821c5c127fb3eb48ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbf54e7554e0dcd60e18b1821c5c127fb3eb48ff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fbf54e7554e0dcd60e18b1821c5c127fb3eb48ff"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 112,
    "deletions": 16
  },
  "files": [
    {
      "sha": "74146ef03b053777ef5fe1f2dcf63710131e6c84",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b5e15ecddafc43de2da632aa68f935a879d9a91/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b5e15ecddafc43de2da632aa68f935a879d9a91/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5b5e15ecddafc43de2da632aa68f935a879d9a91",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-valprint.c (ada_val_print_gnat_array): Take a struct value;\n+\tcall common_val_print.\n+\t(ada_val_print_1): Update.\n+\t(ada_value_print_1): New function.\n+\t(ada_value_print_inner): Rewrite.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* cp-valprint.c (cp_print_value_fields): Update."
    },
    {
      "sha": "3c389d63536c35e33e8bfd3d2371de90e01a311c",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 104,
      "deletions": 16,
      "changes": 120,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b5e15ecddafc43de2da632aa68f935a879d9a91/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b5e15ecddafc43de2da632aa68f935a879d9a91/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=5b5e15ecddafc43de2da632aa68f935a879d9a91",
      "patch": "@@ -762,16 +762,14 @@ ada_val_print_string (struct type *type, const gdb_byte *valaddr,\n    thin pointers, etc).  */\n \n static void\n-ada_val_print_gnat_array (struct type *type, const gdb_byte *valaddr,\n-\t\t\t  int offset, CORE_ADDR address,\n+ada_val_print_gnat_array (struct value *val,\n \t\t\t  struct ui_file *stream, int recurse,\n-\t\t\t  struct value *original_value,\n \t\t\t  const struct value_print_options *options)\n {\n-  struct value *mark = value_mark ();\n-  struct value *val;\n+  scoped_value_mark free_values;\n+\n+  struct type *type = ada_check_typedef (value_type (val));\n \n-  val = value_from_contents_and_address (type, valaddr + offset, address);\n   /* If this is a reference, coerce it now.  This helps taking care\n      of the case where ADDRESS is meaningless because original_value\n      was not an lval.  */\n@@ -786,11 +784,8 @@ ada_val_print_gnat_array (struct type *type, const gdb_byte *valaddr,\n       fprintf_filtered (stream, \"0x0\");\n     }\n   else\n-    val_print (value_type (val),\n-\t       value_embedded_offset (val), value_address (val),\n-\t       stream, recurse, val, options,\n-\t       language_def (language_ada));\n-  value_free_to_mark (mark);\n+    common_val_print (val, stream, recurse, options,\n+\t\t      language_def (language_ada));\n }\n \n /* Implement Ada val_print'ing for the case where TYPE is\n@@ -1135,9 +1130,10 @@ ada_val_print_1 (struct type *type,\n       || (ada_is_constrained_packed_array_type (type)\n \t  && TYPE_CODE (type) != TYPE_CODE_PTR))\n     {\n-      ada_val_print_gnat_array (type, valaddr, offset, address,\n-\t\t\t\tstream, recurse, original_value,\n-\t\t\t\toptions);\n+      struct value *val = value_from_contents_and_address (type,\n+\t\t\t\t\t\t\t   valaddr + offset,\n+\t\t\t\t\t\t\t   address);\n+      ada_val_print_gnat_array (val, stream, recurse, options);\n       return;\n     }\n \n@@ -1222,15 +1218,107 @@ ada_val_print (struct type *type,\n     }\n }\n \n+/* See the comment on ada_value_print.  This function differs in that\n+   it does not catch evaluation errors (leaving that to\n+   ada_value_print).  */\n+\n+static void\n+ada_value_print_1 (struct value *val, struct ui_file *stream, int recurse,\n+\t\t   const struct value_print_options *options)\n+{\n+  struct type *type = ada_check_typedef (value_type (val));\n+\n+  if (ada_is_array_descriptor_type (type)\n+      || (ada_is_constrained_packed_array_type (type)\n+\t  && TYPE_CODE (type) != TYPE_CODE_PTR))\n+    {\n+      ada_val_print_gnat_array (val, stream, recurse, options);\n+      return;\n+    }\n+\n+  val = ada_to_fixed_value (val);\n+  type = value_type (val);\n+  struct type *saved_type = type;\n+\n+  const gdb_byte *valaddr = value_contents_for_printing (val);\n+  CORE_ADDR address = value_address (val);\n+  type = ada_check_typedef (resolve_dynamic_type (type, valaddr, address));\n+  if (type != saved_type)\n+    {\n+      val = value_copy (val);\n+      deprecated_set_value_type (val, type);\n+    }\n+\n+  switch (TYPE_CODE (type))\n+    {\n+    default:\n+      common_val_print (val, stream, recurse, options,\n+\t\t\tlanguage_def (language_c));\n+      break;\n+\n+    case TYPE_CODE_PTR:\n+      ada_val_print_ptr (type, valaddr, 0, 0,\n+\t\t\t address, stream, recurse, val,\n+\t\t\t options);\n+      break;\n+\n+    case TYPE_CODE_INT:\n+    case TYPE_CODE_RANGE:\n+      ada_val_print_num (type, valaddr, 0, 0,\n+\t\t\t address, stream, recurse, val,\n+\t\t\t options);\n+      break;\n+\n+    case TYPE_CODE_ENUM:\n+      ada_val_print_enum (type, valaddr, 0, 0,\n+\t\t\t  address, stream, recurse, val,\n+\t\t\t  options);\n+      break;\n+\n+    case TYPE_CODE_FLT:\n+      ada_val_print_flt (type, valaddr, 0, 0,\n+\t\t\t address, stream, recurse, val,\n+\t\t\t options);\n+      break;\n+\n+    case TYPE_CODE_UNION:\n+    case TYPE_CODE_STRUCT:\n+      ada_val_print_struct_union (type, valaddr, 0, 0,\n+\t\t\t\t  address, stream, recurse,\n+\t\t\t\t  val, options);\n+      break;\n+\n+    case TYPE_CODE_ARRAY:\n+      ada_val_print_array (type, valaddr, 0, 0,\n+\t\t\t   address, stream, recurse, val,\n+\t\t\t   options);\n+      return;\n+\n+    case TYPE_CODE_REF:\n+      ada_val_print_ref (type, valaddr, 0, 0,\n+\t\t\t address, stream, recurse, val,\n+\t\t\t options);\n+      break;\n+    }\n+}\n+\n /* See ada-lang.h.  */\n \n void\n ada_value_print_inner (struct value *val, struct ui_file *stream,\n \t\t       int recurse,\n \t\t       const struct value_print_options *options)\n {\n-  ada_val_print (value_type (val), value_embedded_offset (val),\n-\t\t value_address (val), stream, recurse, val, options);\n+  try\n+    {\n+      ada_value_print_1 (val, stream, recurse, options);\n+    }\n+  catch (const gdb_exception_error &except)\n+    {\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<error reading variable: %s>\"),\n+\t\t      except.what ());\n+    }\n }\n \n void"
    }
  ]
}