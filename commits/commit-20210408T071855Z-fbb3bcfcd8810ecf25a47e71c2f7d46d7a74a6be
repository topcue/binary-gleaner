{
  "sha": "fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJiM2JjZmNkODgxMGVjZjI1YTQ3ZTcxYzJmN2Q0NmQ3YTc0YTZiZQ==",
  "commit": {
    "author": {
      "name": "Felix Willgerodt",
      "email": "felix.willgerodt@intel.com",
      "date": "2021-04-08T07:15:58Z"
    },
    "committer": {
      "name": "Felix Willgerodt",
      "email": "felix.willgerodt@intel.com",
      "date": "2021-04-08T07:18:55Z"
    },
    "message": "gdb: Update producer check for Intel compilers.\n\nThe main goal of this patch is to get rid of a warning for the new Fortran\ncompiler:\n\n(gdb) b 9\nwarning: Could not recognize version of Intel Compiler in: \"Intel(R) Fortran 21.0-2087b\"\nBreakpoint 1 at 0x4048cf: file comp.f90, line 9.\n\nWhile trying to fix this I analyzed DW_AT_producer of all latest Intel\ncompilers for C, C++ and Fortran.  They do no longer necessarily start with\n\"Intel (R)\" nor do they follow the internal and external version number\nscheme that the original patch for this check assumed.  Some newer compilers\neven contradict the \"intermediate\" digit in the old version scheme and have\nthe MINOR number as the second digit, even when having 3 or 4 digits overall.\n\nTherefore I rewrote the check to consider the first MAJOR.MINOR string found\nas the version number.  This might not be 100% correct for some older\ninternal compilers, but the only current user of this function is only\nchecking for the major version anyway.  Hence this should be reliable enough\nand extendable enough going forward.\n\ngdb/ChangeLog:\n2021-04-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n\n    \t* producer.c: (producer_is_icc): Update for new version scheme.\n    \t(producer_parsing_tests): Update names and expected results.\n    \t* producer.h: (producer_is_icc): Update comment accordingly.",
    "tree": {
      "sha": "85085533c98238fa8634419f6ac92bb902ba414c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85085533c98238fa8634419f6ac92bb902ba414c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/comments",
  "author": {
    "login": "felix-willgerodt",
    "id": 68062808,
    "node_id": "MDQ6VXNlcjY4MDYyODA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/68062808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/felix-willgerodt",
    "html_url": "https://github.com/felix-willgerodt",
    "followers_url": "https://api.github.com/users/felix-willgerodt/followers",
    "following_url": "https://api.github.com/users/felix-willgerodt/following{/other_user}",
    "gists_url": "https://api.github.com/users/felix-willgerodt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/felix-willgerodt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/felix-willgerodt/subscriptions",
    "organizations_url": "https://api.github.com/users/felix-willgerodt/orgs",
    "repos_url": "https://api.github.com/users/felix-willgerodt/repos",
    "events_url": "https://api.github.com/users/felix-willgerodt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/felix-willgerodt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "felix-willgerodt",
    "id": 68062808,
    "node_id": "MDQ6VXNlcjY4MDYyODA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/68062808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/felix-willgerodt",
    "html_url": "https://github.com/felix-willgerodt",
    "followers_url": "https://api.github.com/users/felix-willgerodt/followers",
    "following_url": "https://api.github.com/users/felix-willgerodt/following{/other_user}",
    "gists_url": "https://api.github.com/users/felix-willgerodt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/felix-willgerodt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/felix-willgerodt/subscriptions",
    "organizations_url": "https://api.github.com/users/felix-willgerodt/orgs",
    "repos_url": "https://api.github.com/users/felix-willgerodt/repos",
    "events_url": "https://api.github.com/users/felix-willgerodt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/felix-willgerodt/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "05385fc777d642f4cf3455fc7e0b26faafa4e0f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05385fc777d642f4cf3455fc7e0b26faafa4e0f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/05385fc777d642f4cf3455fc7e0b26faafa4e0f6"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 23,
    "deletions": 54
  },
  "files": [
    {
      "sha": "6fc98a74946cb092bd3a7e7db6d3c89a56cd6561",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n+\n+\t* producer.c: (producer_is_icc): Update for new version scheme.\n+\t(producer_parsing_tests): Update names and expected results.\n+\t* producer.h: (producer_is_icc): Update comment accordingly.\n+\n 2021-04-07  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* target.h (struct target_ops) <follow_fork>: Return void."
    },
    {
      "sha": "1cda48c204ac99be312dbead0c20fa57aba4de01",
      "filename": "gdb/producer.c",
      "status": "modified",
      "additions": 16,
      "deletions": 35,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/gdb/producer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/gdb/producer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/producer.c?ref=fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
      "patch": "@@ -20,6 +20,7 @@\n #include \"defs.h\"\n #include \"producer.h\"\n #include \"gdbsupport/selftest.h\"\n+#include <regex>\n \n /* See producer.h.  */\n \n@@ -78,50 +79,30 @@ producer_is_gcc (const char *producer, int *major, int *minor)\n bool\n producer_is_icc (const char *producer, int *major, int *minor)\n {\n-  if (producer == NULL || !startswith (producer, \"Intel(R)\"))\n+  std::regex i_re (\"Intel\\\\(R\\\\)\");\n+  std::cmatch i_m;\n+  if ((producer == nullptr) || !std::regex_search (producer, i_m, i_re))\n     return false;\n \n   /* Prepare the used fields.  */\n   int maj, min;\n-  if (major == NULL)\n+  if (major == nullptr)\n     major = &maj;\n-  if (minor == NULL)\n+  if (minor == nullptr)\n     minor = &min;\n \n   *minor = 0;\n   *major = 0;\n \n-  /* Consumes the string till a \"Version\" is found.  */\n-  const char *cs = strstr (producer, \"Version\");\n-  if (cs != NULL)\n-    {\n-      cs = skip_to_space (cs);\n-\n-      int intermediate = 0;\n-      int nof = sscanf (cs, \"%d.%d.%d.%*d\", major, &intermediate, minor);\n-\n-      /* Internal versions are represented only as MAJOR.MINOR, where\n-\t minor is usually 0.\n-\t Public versions have 3 fields as described with the command\n-\t above.  */\n-      if (nof == 3)\n-\treturn true;\n-\n-      if (nof == 2)\n-\t{\n-\t  *minor = intermediate;\n-\t  return true;\n-\t}\n-    }\n+  std::regex re (\"[0-9]+\\\\.[0-9]+\");\n+  std::cmatch version;\n \n-  static bool warning_printed = false;\n-  /* Not recognized as Intel, let the user know.  */\n-  if (!warning_printed)\n+  if (std::regex_search (producer, version, re))\n     {\n-      warning (_(\"Could not recognize version of Intel Compiler in: \\\"%s\\\"\"),\n-\t       producer);\n-      warning_printed = true;\n+      sscanf (version.str ().c_str (), \"%d.%d\", major, minor);\n+      return true;\n     }\n+\n   return false;\n }\n \n@@ -152,15 +133,15 @@ producer_parsing_tests ()\n   }\n \n   {\n-    static const char extern_f_14_1[] = \"\\\n+    static const char extern_f_14_0[] = \"\\\n Intel(R) Fortran Intel(R) 64 Compiler XE for applications running on \\\n Intel(R) 64, \\\n Version 14.0.1.074 Build 20130716\";\n \n     int major = 0, minor = 0;\n-    SELF_CHECK (producer_is_icc (extern_f_14_1, &major, &minor)\n-\t\t&& major == 14 && minor == 1);\n-    SELF_CHECK (!producer_is_gcc (extern_f_14_1, &major, &minor));\n+    SELF_CHECK (producer_is_icc (extern_f_14_0, &major, &minor)\n+\t\t&& major == 14 && minor == 0);\n+    SELF_CHECK (!producer_is_gcc (extern_f_14_0, &major, &minor));\n   }\n \n   {"
    },
    {
      "sha": "9cfccd633713c598e48290d7e0a5be1deebd6872",
      "filename": "gdb/producer.h",
      "status": "modified",
      "additions": 1,
      "deletions": 19,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/gdb/producer.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be/gdb/producer.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/producer.h?ref=fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
      "patch": "@@ -31,25 +31,7 @@ extern int producer_is_gcc_ge_4 (const char *producer);\n extern int producer_is_gcc (const char *producer, int *major, int *minor);\n \n /* Returns true if the given PRODUCER string is Intel or false\n-   otherwise.  Sets the MAJOR and MINOR versions when not NULL.\n-\n-   Internal and external ICC versions have to be taken into account.\n-   PRODUCER strings for internal releases are slightly different than\n-   for public ones.  Internal releases have a major release number and\n-   0 as minor release.  External releases have 4 fields, 3 of them are\n-   not 0 and only two are of interest, major and update.\n-\n-   Examples are:\n-\n-     Public release:\n-       \"Intel(R) Fortran Intel(R) 64 Compiler XE for applications\n-\trunning on Intel(R) 64, Version 14.0.1.074 Build 20130716\";\n-\t\"Intel(R) C++ Intel(R) 64 Compiler XE for applications\n-\trunning on Intel(R) 64, Version 14.0.1.074 Build 20130716\";\n-\n-    Internal releases:\n-      \"Intel(R) C++ Intel(R) 64 Compiler for applications\n-       running on Intel(R) 64, Version 18.0 Beta ....\".  */\n+   otherwise.  Sets the MAJOR and MINOR versions when not NULL.  */\n extern bool producer_is_icc (const char *producer, int *major, int *minor);\n \n /* Returns true if the given PRODUCER string is LLVM (clang/flang) or"
    }
  ]
}