{
  "sha": "906192d7859f9e768fc73f330e10d3b3a4ddaba3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTA2MTkyZDc4NTlmOWU3NjhmYzczZjMzMGUxMGQzYjNhNGRkYWJhMw==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-05T14:21:46Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-09T22:21:28Z"
    },
    "message": "sim: cgen: inline cgen_init logic\n\nThis function has done only one thing: post-process command line\nsettings to see if profiling or tracing has been enabled, and if\nso, set the run_fast_p flag in the simulator state.  That flag is\nonly used in one place: to select the fast or slow cgen engine.\nBy inlining the run_fast_p logic to the one place it's used, we\ncan delete a good amount of logic specific to cgen ports: both\nthe call to cgen_init and the conditional simulator state.  This\nin turn allows us to have a single simulator state struct across\nall ports so we can share objects more between them, and makes\nthe sim_open calls look more consistent.",
    "tree": {
      "sha": "f55e6c1aad3a8083932ffd01027856078a0d6a28",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f55e6c1aad3a8083932ffd01027856078a0d6a28"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/906192d7859f9e768fc73f330e10d3b3a4ddaba3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/906192d7859f9e768fc73f330e10d3b3a4ddaba3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/906192d7859f9e768fc73f330e10d3b3a4ddaba3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/906192d7859f9e768fc73f330e10d3b3a4ddaba3/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c70fdc45f60845852f98eae3b8035de1a2df78de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c70fdc45f60845852f98eae3b8035de1a2df78de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c70fdc45f60845852f98eae3b8035de1a2df78de"
    }
  ],
  "stats": {
    "total": 151,
    "additions": 62,
    "deletions": 89
  },
  "files": [
    {
      "sha": "42143db129d8ecfcaae695b4c1d7b051fc1417c7",
      "filename": "sim/bpf/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/bpf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/bpf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (struct sim_state): Delete."
    },
    {
      "sha": "436cc86f415d357526ee72b78a5ed750324bc4c7",
      "filename": "sim/bpf/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/bpf/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/bpf/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -175,10 +175,6 @@ sim_open (SIM_OPEN_KIND kind,\n     bpf_cgen_init_dis (cd);\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after bpf_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   /* XXX do eBPF sim specific initializations.  */\n \n   return sd;"
    },
    {
      "sha": "dbe9236056ddc4598e7169182b2a1274bc3ddc70",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,12 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* cgen-defs.h (STATE_RUN_FAST_P, CGEN_STATE, cgen_init): Delete.\n+\t* cgen-run.c (cgen_get_fast_p): New function.\n+\t(sim_resume): Move fast_p up and call cgen_get_fast_p.\n+\t* cgen-utils.c (cgen_init): Delete.\n+\t* sim-base.h: Delete cgen-sim.h include.\n+\t(struct sim_state): Delete cgen_state and STATE_CGEN_STATE.\n+\n 2021-06-08  Mike Frysinger  <vapier@gentoo.org>\n \n \t* Make-common.in (IGEN_RUN): New variable."
    },
    {
      "sha": "520c29cb3b9f3242796d696af4b124a86455e694",
      "filename": "sim/common/cgen-defs.h",
      "status": "modified",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/cgen-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/cgen-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-defs.h?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -138,22 +138,8 @@ typedef enum {\n #define ENDSWITCH(N)\n #endif\n \f\n-/* Simulator state.  */\n-\n-/* CGEN_STATE contains additional state information not present in\n-   sim_state_base.  */\n-\n-typedef struct cgen_state {\n-  /* Non-zero if no tracing or profiling is selected.  */\n-  int run_fast_p;\n-#define STATE_RUN_FAST_P(sd) (STATE_CGEN_STATE (sd).run_fast_p)\n-} CGEN_STATE;\n-\f\n /* Various utilities.  */\n \n-/* Called after sim_post_argv_init to do any cgen initialization.  */\n-extern void cgen_init (SIM_DESC);\n-\n /* Return the name of an insn.  */\n extern CPU_INSN_NAME_FN cgen_insn_name;\n "
    },
    {
      "sha": "9420942af8ad74291f61573d3e1b4b8ef8e004cf",
      "filename": "sim/common/cgen-run.c",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/cgen-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/cgen-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-run.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -51,6 +51,24 @@ static void prime_cpu (SIM_CPU *, int);\n static void engine_run_1 (SIM_DESC, int, int);\n static void engine_run_n (SIM_DESC, int, int, int, int);\n \n+/* If no profiling or tracing has been enabled, run in fast mode.  */\n+static int\n+cgen_get_fast_p (SIM_DESC sd)\n+{\n+  int i, c;\n+  int run_fast_p = 1;\n+\n+  for (c = 0; c < MAX_NR_PROCESSORS; ++c)\n+    {\n+      SIM_CPU *cpu = STATE_CPU (sd, c);\n+\n+      if (PROFILE_ANY_P (cpu) || TRACE_ANY_P (cpu))\n+\treturn 0;\n+    }\n+\n+  return 1;\n+}\n+\n /* sim_resume for cgen */\n \n void\n@@ -59,9 +77,13 @@ sim_resume (SIM_DESC sd, int step, int siggnal)\n   sim_engine *engine = STATE_ENGINE (sd);\n   jmp_buf buf;\n   int jmpval;\n+  static int fast_p = -1;\n \n   ASSERT (STATE_MAGIC (sd) == SIM_MAGIC_NUMBER);\n \n+  if (fast_p == -1)\n+    fast_p = cgen_get_fast_p (sd);\n+\n   /* we only want to be single stepping the simulator once */\n   if (engine->stepper != NULL)\n     {\n@@ -102,7 +124,6 @@ sim_resume (SIM_DESC sd, int step, int siggnal)\n \t\t\t  && STATE_OPEN_KIND (sd) == SIM_OPEN_STANDALONE)\n \t\t       ? 0\n \t\t       : 8); /*FIXME: magic number*/\n-      int fast_p = STATE_RUN_FAST_P (sd);\n \n       sim_events_preprocess (sd, last_cpu_nr >= nr_cpus, next_cpu_nr >= nr_cpus);\n       if (next_cpu_nr >= nr_cpus)"
    },
    {
      "sha": "13107904678c9ef9222dbf6ebd09f687e23fb938",
      "filename": "sim/common/cgen-utils.c",
      "status": "modified",
      "additions": 0,
      "deletions": 35,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/cgen-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/cgen-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-utils.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -89,41 +89,6 @@ const CGEN_INSN cgen_virtual_insn_table[] =\n   { & virtual_insn_entries[5] }\n };\n \n-/* Initialize cgen things.\n-   This is called after sim_post_argv_init.  */\n-\n-void\n-cgen_init (SIM_DESC sd)\n-{\n-  int i, c;\n-\n-  /* If no profiling or tracing has been enabled, run in fast mode.  */\n-  {\n-    int run_fast_p = 1;\n-\n-    for (c = 0; c < MAX_NR_PROCESSORS; ++c)\n-      {\n-\tSIM_CPU *cpu = STATE_CPU (sd, c);\n-\n-\tfor (i = 0; i < MAX_PROFILE_VALUES; ++i)\n-\t  if (CPU_PROFILE_FLAGS (cpu) [i])\n-\t    {\n-\t      run_fast_p = 0;\n-\t      break;\n-\t    }\n-\tfor (i = 0; i < MAX_TRACE_VALUES; ++i)\n-\t  if (CPU_TRACE_FLAGS (cpu) [i])\n-\t    {\n-\t      run_fast_p = 0;\n-\t      break;\n-\t    }\n-\tif (! run_fast_p)\n-\t  break;\n-      }\n-    STATE_RUN_FAST_P (sd) = run_fast_p;\n-  }\n-}\n-\n /* Return the name of insn number I.  */\n \n const char *"
    },
    {
      "sha": "054b2ba0c6ebd886957922a03f30b10b555fb5fa",
      "filename": "sim/common/sim-base.h",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/sim-base.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/common/sim-base.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-base.h?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -88,10 +88,6 @@ typedef struct _sim_cpu sim_cpu;\n #include \"sim-cpu.h\"\n #include \"sim-assert.h\"\n \n-#ifdef CGEN_ARCH\n-# include \"cgen-sim.h\"\n-#endif\n-\n struct sim_state {\n   /* All the cpus for this instance.  */\n   sim_cpu *cpu[MAX_NR_PROCESSORS];\n@@ -217,12 +213,6 @@ struct sim_state {\n   void *arch_data;\n #define STATE_ARCH_DATA(sd) ((sd)->arch_data)\n \n-#ifdef CGEN_ARCH\n-  /* Various cgen runtime state.  */\n-  CGEN_STATE cgen_state;\n-#endif\n-#define STATE_CGEN_STATE(sd) ((sd)->cgen_state)\n-\n   /* Marker for those wanting to do sanity checks.\n      This should remain the last member of this struct to help catch\n      miscompilation errors.  */"
    },
    {
      "sha": "c0bb314e10f30ee0d2b0025aa1bb77a9852b5977",
      "filename": "sim/cris/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/cris/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/cris/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\n 2021-05-24  Mike Frysinger  <vapier@gentoo.org>\n \n \t* cris-desc.c, cris-desc.h, cris-opc.h: Moved to opcodes/."
    },
    {
      "sha": "c6dcc23c938aac7d3dc23dc45521d133d14e59a3",
      "filename": "sim/cris/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/cris/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/cris/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -940,10 +940,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n #endif\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after cris_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   cris_set_callbacks (callback);\n \n   return sd;"
    },
    {
      "sha": "060b0a24073e921b9bd9f5336ce806d9fc395de7",
      "filename": "sim/frv/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/frv/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/frv/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/frv/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\n 2021-05-29  Mike Frysinger  <vapier@gentoo.org>\n \n \t* cache.h (frv_cache_unlock): New prototype."
    },
    {
      "sha": "8ac9665f4cfc65b74bda7457ab36c0e74e3f98c5",
      "filename": "sim/frv/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/frv/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/frv/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/frv/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -147,10 +147,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, bfd *abfd,\n     frv_cgen_init_dis (cd);\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after frv_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   /* CPU specific initialization.  */\n   for (i = 0; i < MAX_NR_PROCESSORS; ++i)\n     {"
    },
    {
      "sha": "2e80084aed3688e4cf43b9dfe0f5a8ffb10bd385",
      "filename": "sim/iq2000/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/iq2000/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/iq2000/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (struct sim_state): Delete."
    },
    {
      "sha": "679d5164033a99632f9acc6a63f0b003992fb2e1",
      "filename": "sim/iq2000/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/iq2000/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/iq2000/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -122,10 +122,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n     iq2000_cgen_init_dis (cd);\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after iq2000_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   return sd;\n }\n \f"
    },
    {
      "sha": "90920635f4ede4835678d30046203d479d2eea13",
      "filename": "sim/lm32/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/lm32/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/lm32/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/lm32/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (struct sim_state): Delete."
    },
    {
      "sha": "3d4ee35d7462e29659cb6d6e999b9f04b89aa17b",
      "filename": "sim/lm32/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/lm32/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/lm32/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/lm32/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -182,10 +182,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n     lm32_cgen_init_dis (cd);\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after lm32_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   return sd;\n }\n \f"
    },
    {
      "sha": "f9d3079fcd87d080ae311ee9ff933a904081c69d",
      "filename": "sim/m32r/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/m32r/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/m32r/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (struct sim_state): Delete."
    },
    {
      "sha": "e08a5d461af2af027dc263aca88ac11748cd23c7",
      "filename": "sim/m32r/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/m32r/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/m32r/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -124,10 +124,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n     m32r_cgen_init_dis (cd);\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after m32r_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   for (c = 0; c < MAX_NR_PROCESSORS; ++c)\n     {\n       /* Only needed for profiling, but the structure member is small.  */"
    },
    {
      "sha": "689f038a38960705f74264fd6d6929d5b9a053d1",
      "filename": "sim/or1k/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/or1k/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/or1k/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/ChangeLog?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-09  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c (sim_open): Delete cgen_init call.\n+\t* traps.c (or1k32bf_fpu_error): Replace STATE_RUN_FAST_P with\n+\tPROFILE_ANY_P and TRACE_ANY_P.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h: Move or1k-opc.h include."
    },
    {
      "sha": "e6342ee42c0f7b9e8496b86bfc66231d21d55743",
      "filename": "sim/or1k/sim-if.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/or1k/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/or1k/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/sim-if.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -238,10 +238,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n     or1k_cgen_init_dis (cd);\n   }\n \n-  /* Initialize various cgen things not done by common framework.\n-     Must be done after or1k_cgen_cpu_open.  */\n-  cgen_init (sd);\n-\n   /* Do some final OpenRISC sim specific initializations.  */\n   for (c = 0; c < MAX_NR_PROCESSORS; ++c)\n     {"
    },
    {
      "sha": "bb428fa4a8860ada67dead6abdfcaaa304d34bcb",
      "filename": "sim/or1k/traps.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/or1k/traps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/906192d7859f9e768fc73f330e10d3b3a4ddaba3/sim/or1k/traps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/traps.c?ref=906192d7859f9e768fc73f330e10d3b3a4ddaba3",
      "patch": "@@ -104,7 +104,7 @@ or1k32bf_fpu_error (CGEN_FPU* fpu, int status)\n \t     per-instruction callbacks are not triggered which would allow\n \t     us to track the PC.  This means we cannot track which\n \t     instruction caused the FPU error.  */\n-\t  if (STATE_RUN_FAST_P (sd) == 1)\n+\t  if (!PROFILE_ANY_P (current_cpu) && !TRACE_ANY_P (current_cpu))\n \t    sim_io_eprintf\n \t      (sd, \"WARNING: ignoring fpu error caught in fast mode.\\n\");\n \t  else"
    }
  ]
}