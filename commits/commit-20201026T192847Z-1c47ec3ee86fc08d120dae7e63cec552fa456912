{
  "sha": "1c47ec3ee86fc08d120dae7e63cec552fa456912",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWM0N2VjM2VlODZmYzA4ZDEyMGRhZTdlNjNjZWM1NTJmYTQ1NjkxMg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-10-26T19:28:47Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-10-26T19:28:47Z"
    },
    "message": "[gdb/symtab] Read CU base address for enqueued CU\n\nConsider the test-case contained in this patch.  It consists of\ntwo CUs:\n- cu1, containing a DW_TAG_variable DIE foo\n- cu2, containing a DW_TAG_base_type DIE int\nwhere the variable foo has type int, in other words, there's an inter-CU\nreference.\n\nWhen expanding the symtab for cu1, expansion of the symtab for cu2 is\nenqueued, and later processed by process_full_comp_unit.  However, processing\nof .debug_ranges fails because the range is specified relative to a base\naddress which is considered not to be present because\n!cu->base_address.has_value (), and we run into this case in\ndwarf2_ranges_process:\n...\n      if (!base.has_value ())\n        {\n          /* We have no valid base address for the ranges\n             data.  */\n          complaint (_(\"Invalid .debug_ranges data (no base address)\"));\n          return 0;\n        }\n...\n\nFix this in process_full_comp_unit by setting cu->base_address.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2020-10-26  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2/read.c (process_full_comp_unit): Call\n\tdwarf2_find_base_address.\n\ngdb/testsuite/ChangeLog:\n\n2020-10-26  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.dwarf2/enqueued-cu-base-addr.exp: New file.",
    "tree": {
      "sha": "5850ccab904dd7fbeece9879b7835334aca5590f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5850ccab904dd7fbeece9879b7835334aca5590f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1c47ec3ee86fc08d120dae7e63cec552fa456912",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c47ec3ee86fc08d120dae7e63cec552fa456912",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1c47ec3ee86fc08d120dae7e63cec552fa456912",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c47ec3ee86fc08d120dae7e63cec552fa456912/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6390859caa7684ff195d57e9f5cc02eae89bdb95",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6390859caa7684ff195d57e9f5cc02eae89bdb95",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6390859caa7684ff195d57e9f5cc02eae89bdb95"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 123,
    "deletions": 0
  },
  "files": [
    {
      "sha": "4a83aac84d83b63478ef6bfba9db3ac375150460",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1c47ec3ee86fc08d120dae7e63cec552fa456912",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf2/read.c (process_full_comp_unit): Call\n+\tdwarf2_find_base_address.\n+\n 2020-10-26  Tom Tromey  <tromey@adacore.com>\n \n \t* gdbtypes.c (create_range_type): Revert previous patch.  Add"
    },
    {
      "sha": "e1c528f44d2b09f270aa873af0e1505e6f185dee",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1c47ec3ee86fc08d120dae7e63cec552fa456912",
      "patch": "@@ -9929,6 +9929,8 @@ process_full_comp_unit (dwarf2_cu *cu, enum language pretend_language)\n   cu->language = pretend_language;\n   cu->language_defn = language_def (cu->language);\n \n+  dwarf2_find_base_address (cu->dies, cu);\n+\n   /* Do line number decoding in read_file_scope () */\n   process_die (cu->dies, cu);\n "
    },
    {
      "sha": "48139f248d28f0fc9bf150fa3c24639cf1092a1b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1c47ec3ee86fc08d120dae7e63cec552fa456912",
      "patch": "@@ -1,3 +1,7 @@\n+2020-10-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.dwarf2/enqueued-cu-base-addr.exp: New file.\n+\n 2020-10-26  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/unsigned_range/foo.adb: New file."
    },
    {
      "sha": "77fe6ff5e941313d9727dd7d2f4f1fcc169243af",
      "filename": "gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp",
      "status": "added",
      "additions": 112,
      "deletions": 0,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c47ec3ee86fc08d120dae7e63cec552fa456912/gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp?ref=1c47ec3ee86fc08d120dae7e63cec552fa456912",
      "patch": "@@ -0,0 +1,112 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check whether .debug_ranges is correctly read in during symtab expansion.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+};\n+\n+standard_testfile main.c .S\n+\n+set executable ${testfile}\n+set asm_file [standard_output_file ${srcfile2}]\n+\n+# We need to know the size of integer types in order to write some of the\n+# debugging info we'd like to generate.\n+if [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] {\n+    return -1\n+}\n+\n+# Create the DWARF.\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+\n+    declare_labels int_label\n+    declare_labels ranges_label\n+\n+    set main_func \\\n+\t[function_range main [list ${srcdir}/${subdir}/$srcfile]]\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C_plus_plus}\n+\t    {name \"cu1\"}\n+\t} {\n+\t    DW_TAG_variable {\n+\t\t{name foo}\n+\t\t{type :$int_label}\n+\t\t{const_value 1 DW_FORM_sdata}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C_plus_plus}\n+\t    {name \"cu2\"}\n+\t    {ranges ${ranges_label} sec_offset}\n+\t    {low_pc {[lindex $main_func 0]}}\n+\t} {\n+\t    int_label: base_type {\n+\t\t{byte_size 4 udata}\n+\t\t{encoding @DW_ATE_signed}\n+\t\t{name int}\n+\t    }\n+\t}\n+    }\n+\n+    ranges {is_64 [is_64_target]} {\n+\tranges_label: sequence {\n+\t    {range 0 [lindex $main_func 1]}\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+clean_restart ${binfile}\n+\n+# Expand cu1.  This will enqueue cu2.\n+gdb_test \"ptype foo\" \"type = int\"\n+\n+# Now check that cu2 has an address range starting at main.\n+set cu2_blockvector_re \\\n+    [multi_line \\\n+\t \"Symtab for file cu2 at $hex\" \\\n+\t \"Read from object file \\[^\\r\\n\\]*\" \\\n+\t \"Language: c\\\\+\\\\+\" \\\n+\t \"\" \\\n+\t \"Blockvector:\" \\\n+\t \"\" \\\n+\t \"block #000, \\[^\\r\\n\\]* in ($hex)..$hex\" \\\n+\t \".*\"]\n+gdb_test_multiple \"maint print symbols -objfile $binfile\" \"CU addr found\" {\n+    -re -wrap $cu2_blockvector_re {\n+\tset addr $expect_out(1,string)\n+\tif { $addr eq \"0x0\" } {\n+\t    fail \"$gdb_test_name (Found 0x0)\"\n+\t} else {\n+\t    gdb_test \"info symbol $addr\" \"main in section .*\" \\\n+\t\t$gdb_test_name\n+\t}\n+    }\n+}"
    }
  ]
}