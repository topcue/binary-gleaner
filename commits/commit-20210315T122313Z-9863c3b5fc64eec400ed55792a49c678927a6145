{
  "sha": "9863c3b5fc64eec400ed55792a49c678927a6145",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTg2M2MzYjVmYzY0ZWVjNDAwZWQ1NTc5MmE0OWM2Nzg5MjdhNjE0NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-15T12:23:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-15T12:23:13Z"
    },
    "message": "Fix regression in Ada ptype\n\nThis fixes PR ada/27545, which points out that a test in\ngdb.ada/tagged.exp started failing due to the expression rewrite.  I\ndidn't notice this failure because my system gcc-gnat debuginfo was\nout of date, and so the test was already failing in the baseline.\n\nPreviously, the OP_VAR_VALUE case in ada_evaluate_subexp ended up\ndoing a recursive call:\n\n    arg1 = evaluate_subexp (nullptr, exp, pos, EVAL_NORMAL);\n\nHowever, during the rewrite I missed this fact and had the new code\ncall the superclass implementation.\n\nThis patch fixes the bug by changing this code to use a recursive call\ninstead.\n\ngdb/ChangeLog\n2021-03-15  Tom Tromey  <tromey@adacore.com>\n\n\tPR ada/27545:\n\t* ada-lang.c (ada_var_value_operation::evaluate): Use recursive\n\tcall for tagged type.",
    "tree": {
      "sha": "9d97ec4c7dac8cc8960d66e6ddbac89f15e4cc94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9d97ec4c7dac8cc8960d66e6ddbac89f15e4cc94"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9863c3b5fc64eec400ed55792a49c678927a6145",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9863c3b5fc64eec400ed55792a49c678927a6145",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9863c3b5fc64eec400ed55792a49c678927a6145",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9863c3b5fc64eec400ed55792a49c678927a6145/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ac7452264fee536b0f62610e8dbe9f9e253a6f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ac7452264fee536b0f62610e8dbe9f9e253a6f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ac7452264fee536b0f62610e8dbe9f9e253a6f8"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 7,
    "deletions": 2
  },
  "files": [
    {
      "sha": "3033d11387dc6b63f1426ac980ff734fd6e57c74",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9863c3b5fc64eec400ed55792a49c678927a6145/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9863c3b5fc64eec400ed55792a49c678927a6145/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9863c3b5fc64eec400ed55792a49c678927a6145",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-15  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR ada/27545:\n+\t* ada-lang.c (ada_var_value_operation::evaluate): Use recursive\n+\tcall for tagged type.\n+\n 2021-03-15  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-exp.y (exp1): Handle resolution of the right hand side of an"
    },
    {
      "sha": "07958e7934e153634f56304c563cd48ad7f62fc6",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9863c3b5fc64eec400ed55792a49c678927a6145/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9863c3b5fc64eec400ed55792a49c678927a6145/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=9863c3b5fc64eec400ed55792a49c678927a6145",
      "patch": "@@ -10320,8 +10320,7 @@ ada_var_value_operation::evaluate (struct type *expect_type,\n \t     a fixed type would result in the loss of that type name,\n \t     thus preventing us from printing the name of the ancestor\n \t     type in the type description.  */\n-\t  value *arg1 = var_value_operation::evaluate (nullptr, exp,\n-\t\t\t\t\t\t       EVAL_NORMAL);\n+\t  value *arg1 = evaluate (nullptr, exp, EVAL_NORMAL);\n \n \t  if (type->code () != TYPE_CODE_REF)\n \t    {"
    }
  ]
}