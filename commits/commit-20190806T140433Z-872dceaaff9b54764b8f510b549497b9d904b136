{
  "sha": "872dceaaff9b54764b8f510b549497b9d904b136",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODcyZGNlYWFmZjliNTQ3NjRiOGY1MTBiNTQ5NDk3YjlkOTA0YjEzNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-22T18:41:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-06T14:04:33Z"
    },
    "message": "Save plain text in the source cache\n\nCurrently the source cache will only store highlighted text.  However,\nthere's no reason it could not also store plain text, when styling is\nturned off.\n\nThis patch makes this change.  This also simplifies the source cache\ncode somewhat.\n\ngdb/ChangeLog\n2019-08-06  Tom Tromey  <tromey@adacore.com>\n\n\t* source-cache.c (source_cache::get_plain_source_lines):\n\tRemove \"first_line\" and \"last_line\" parameters.\n\t(source_cache::get_source_lines): Cache plain text.\n\t* source-cache.h (class source_cache)\n\t<get_plain_source_lines>: Update.",
    "tree": {
      "sha": "7f0c706a0aee1f8b7961c78132f7174239dbf0c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7f0c706a0aee1f8b7961c78132f7174239dbf0c1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/872dceaaff9b54764b8f510b549497b9d904b136",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/872dceaaff9b54764b8f510b549497b9d904b136",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/872dceaaff9b54764b8f510b549497b9d904b136",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/872dceaaff9b54764b8f510b549497b9d904b136/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "269249d9406096dd59aecd8845e960fdddb1ebfe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/269249d9406096dd59aecd8845e960fdddb1ebfe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/269249d9406096dd59aecd8845e960fdddb1ebfe"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 55,
    "deletions": 76
  },
  "files": [
    {
      "sha": "e2dabb16a295b868604fddd5f0c0bd00fad077ca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/872dceaaff9b54764b8f510b549497b9d904b136/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/872dceaaff9b54764b8f510b549497b9d904b136/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=872dceaaff9b54764b8f510b549497b9d904b136",
      "patch": "@@ -1,3 +1,11 @@\n+2019-08-06  Tom Tromey  <tromey@adacore.com>\n+\n+\t* source-cache.c (source_cache::get_plain_source_lines):\n+\tRemove \"first_line\" and \"last_line\" parameters.\n+\t(source_cache::get_source_lines): Cache plain text.\n+\t* source-cache.h (class source_cache)\n+\t<get_plain_source_lines>: Update.\n+\n 2019-08-06  Tom Tromey  <tromey@adacore.com>\n \n \t* source-cache.c (extract_lines): No longer a method."
    },
    {
      "sha": "0cc2076258cf60efebda3a199886cb56dbb53597",
      "filename": "gdb/source-cache.c",
      "status": "modified",
      "additions": 43,
      "deletions": 71,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/872dceaaff9b54764b8f510b549497b9d904b136/gdb/source-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/872dceaaff9b54764b8f510b549497b9d904b136/gdb/source-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.c?ref=872dceaaff9b54764b8f510b549497b9d904b136",
      "patch": "@@ -31,7 +31,6 @@\n    when GDB is linked.  Happens, e.g., in the MinGW build.  */\n #undef open\n #undef close\n-#include <fstream>\n #include <sstream>\n #include <srchilite/sourcehighlight.h>\n #include <srchilite/langmap.h>\n@@ -48,33 +47,19 @@ source_cache g_source_cache;\n /* See source-cache.h.  */\n \n bool\n-source_cache::get_plain_source_lines (struct symtab *s, int first_line,\n-\t\t\t\t      int last_line, std::string *lines)\n+source_cache::get_plain_source_lines (struct symtab *s, std::string *lines)\n {\n   scoped_fd desc (open_source_file_with_line_charpos (s));\n   if (desc.get () < 0)\n     return false;\n \n-  if (first_line < 1 || first_line > s->nlines || last_line < 1)\n-    return false;\n+  struct stat st;\n \n-  if (lseek (desc.get (), s->line_charpos[first_line - 1], SEEK_SET) < 0)\n+  if (fstat (desc.get (), &st) < 0)\n     perror_with_name (symtab_to_filename_for_display (s));\n \n-  int last_charpos;\n-  if (last_line >= s->nlines)\n-    {\n-      struct stat st;\n-\n-      if (fstat (desc.get (), &st) < 0)\n-\tperror_with_name (symtab_to_filename_for_display (s));\n-      /* We could cache this in line_charpos... */\n-      last_charpos = st.st_size;\n-    }\n-  else\n-    last_charpos = s->line_charpos[last_line];\n-\n-  lines->resize (last_charpos - s->line_charpos[first_line - 1]);\n+  /* We could cache this in line_charpos... */\n+  lines->resize (st.st_size);\n   if (myread (desc.get (), &(*lines)[0], lines->size ()) < 0)\n     perror_with_name (symtab_to_filename_for_display (s));\n \n@@ -182,70 +167,57 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n   if (first_line < 1 || last_line < 1 || first_line > last_line)\n     return false;\n \n-#ifdef HAVE_SOURCE_HIGHLIGHT\n-  if (source_styling && gdb_stdout->can_emit_style_escape ())\n-    {\n-      const char *fullname = symtab_to_fullname (s);\n+  std::string fullname = symtab_to_fullname (s);\n \n-      for (const auto &item : m_source_map)\n+  for (const auto &item : m_source_map)\n+    {\n+      if (item.fullname == fullname)\n \t{\n-\t  if (item.fullname == fullname)\n-\t    {\n-\t      *lines = extract_lines (item.contents, first_line, last_line);\n-\t      return true;\n-\t    }\n+\t  *lines = extract_lines (item.contents, first_line, last_line);\n+\t  return true;\n \t}\n+    }\n \n+  std::string contents;\n+  if (!get_plain_source_lines (s, &contents))\n+    return false;\n+\n+#ifdef HAVE_SOURCE_HIGHLIGHT\n+  if (source_styling && gdb_stdout->can_emit_style_escape ())\n+    {\n       const char *lang_name = get_language_name (SYMTAB_LANGUAGE (s));\n       if (lang_name != nullptr)\n \t{\n-\t  std::ifstream input (fullname);\n-\t  if (input.is_open ())\n+\t  /* The global source highlight object, or null if one was\n+\t     never constructed.  This is stored here rather than in\n+\t     the class so that we don't need to include anything or do\n+\t     conditional compilation in source-cache.h.  */\n+\t  static srchilite::SourceHighlight *highlighter;\n+\n+\t  if (highlighter == nullptr)\n \t    {\n-\t      /* The global source highlight object, or null if one\n-\t\t was never constructed.  This is stored here rather\n-\t\t than in the class so that we don't need to include\n-\t\t anything or do conditional compilation in\n-\t\t source-cache.h.  */\n-\t      static srchilite::SourceHighlight *highlighter;\n-\n-\t      if (s->line_charpos == 0)\n-\t\t{\n-\t\t  scoped_fd desc (open_source_file_with_line_charpos (s));\n-\t\t  if (desc.get () < 0)\n-\t\t    return false;\n-\n-\t\t  /* FULLNAME points to a value owned by the symtab\n-\t\t     (symtab::fullname).  Calling open_source_file reallocates\n-\t\t     that value, so we must refresh FULLNAME to avoid a\n-\t\t     use-after-free.  */\n-\t\t  fullname = symtab_to_fullname (s);\n-\t\t}\n-\n-\t      if (highlighter == nullptr)\n-\t\t{\n-\t\t  highlighter = new srchilite::SourceHighlight (\"esc.outlang\");\n-\t\t  highlighter->setStyleFile (\"esc.style\");\n-\t\t}\n-\n-\t      std::ostringstream output;\n-\t      highlighter->highlight (input, output, lang_name, fullname);\n-\n-\t      source_text result = { fullname, output.str () };\n-\t      m_source_map.push_back (std::move (result));\n-\n-\t      if (m_source_map.size () > MAX_ENTRIES)\n-\t\tm_source_map.erase (m_source_map.begin ());\n-\n-\t      *lines = extract_lines (m_source_map.back ().contents,\n-\t\t\t\t      first_line, last_line);\n-\t      return true;\n+\t      highlighter = new srchilite::SourceHighlight (\"esc.outlang\");\n+\t      highlighter->setStyleFile (\"esc.style\");\n \t    }\n+\n+\t  std::istringstream input (contents);\n+\t  std::ostringstream output;\n+\t  highlighter->highlight (input, output, lang_name, fullname);\n+\n+\t  contents = output.str ();\n \t}\n     }\n #endif /* HAVE_SOURCE_HIGHLIGHT */\n \n-  return get_plain_source_lines (s, first_line, last_line, lines);\n+  source_text result = { std::move (fullname), std::move (contents) };\n+  m_source_map.push_back (std::move (result));\n+\n+  if (m_source_map.size () > MAX_ENTRIES)\n+    m_source_map.erase (m_source_map.begin ());\n+\n+  *lines = extract_lines (m_source_map.back ().contents,\n+\t\t\t  first_line, last_line);\n+  return true;\n }\n \n #if GDB_SELF_TEST"
    },
    {
      "sha": "0c8b14e483e794a043fce3ba686dd387f88985d4",
      "filename": "gdb/source-cache.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/872dceaaff9b54764b8f510b549497b9d904b136/gdb/source-cache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/872dceaaff9b54764b8f510b549497b9d904b136/gdb/source-cache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.h?ref=872dceaaff9b54764b8f510b549497b9d904b136",
      "patch": "@@ -58,11 +58,10 @@ class source_cache\n     std::string contents;\n   };\n \n-  /* A helper function for get_source_lines that is used when the\n-     source lines are not highlighted.  The arguments and return value\n-     are as for get_source_lines.  */\n-  bool get_plain_source_lines (struct symtab *s, int first_line,\n-\t\t\t       int last_line, std::string *lines_out);\n+  /* A helper function for get_source_lines reads a source file.\n+     Returns false on error.  If no error, the contents of the file\n+     are put into *LINES_OUT, and returns true.  */\n+  bool get_plain_source_lines (struct symtab *s, std::string *lines_out);\n \n   /* The contents of the cache.  */\n   std::vector<source_text> m_source_map;"
    }
  ]
}