{
  "sha": "6a84624340dd19ccd927d91d79e0ece135c6d846",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmE4NDYyNDM0MGRkMTljY2Q5MjdkOTFkNzllMGVjZTEzNWM2ZDg0Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-01-27T23:29:29Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-01-27T23:29:29Z"
    },
    "message": "PR24008, Wrong value of ternary expression in map file\n\n\tPR 24008\n\t* ldexp.h (lang_phase_type): Add lang_fixed_phase_enum.\n\t* ldexp.c (fold_name): Move expld.assign_name check later to\n\tavoid an extra lookup.\n\t(exp_fold_tree_1): When lang_fixed_phase_enum, don't change symbol\n\tvalues, and don't clear expld.assign_name.\n\t* ldlang.c (lang_map): Set expld.phase to lang_fixed_phase_enum.\n\t(print_assignment): Resolve entire assignment expression.\n\tDon't access symbol u.def unless symbol is defined.",
    "tree": {
      "sha": "eafcd04a1374596f537457ef8f2f7d61cf50db9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eafcd04a1374596f537457ef8f2f7d61cf50db9d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a84624340dd19ccd927d91d79e0ece135c6d846",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a84624340dd19ccd927d91d79e0ece135c6d846",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a84624340dd19ccd927d91d79e0ece135c6d846",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a84624340dd19ccd927d91d79e0ece135c6d846/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e044973b0cadb4c36c2a2c11e908d758b8cd75f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e044973b0cadb4c36c2a2c11e908d758b8cd75f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e044973b0cadb4c36c2a2c11e908d758b8cd75f9"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 66,
    "deletions": 43
  },
  "files": [
    {
      "sha": "5bd731f8e293b08dd569bb1fcdc52e2d432d775d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=6a84624340dd19ccd927d91d79e0ece135c6d846",
      "patch": "@@ -1,3 +1,15 @@\n+2019-01-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24008\n+\t* ldexp.h (lang_phase_type): Add lang_fixed_phase_enum.\n+\t* ldexp.c (fold_name): Move expld.assign_name check later to\n+\tavoid an extra lookup.\n+\t(exp_fold_tree_1): When lang_fixed_phase_enum, don't change symbol\n+\tvalues, and don't clear expld.assign_name.\n+\t* ldlang.c (lang_map): Set expld.phase to lang_fixed_phase_enum.\n+\t(print_assignment): Resolve entire assignment expression.\n+\tDon't access symbol u.def unless symbol is defined.\n+\n 2019-01-25  Nick Clifton  <nickc@redhat.com>\n \n \t* po/bg.po: Updated Bulgarian translation."
    },
    {
      "sha": "60b17ef5764a2a0bcc6fed82e420f91ad0b60441",
      "filename": "ld/ldexp.c",
      "status": "modified",
      "additions": 46,
      "deletions": 38,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ldexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ldexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.c?ref=6a84624340dd19ccd927d91d79e0ece135c6d846",
      "patch": "@@ -720,23 +720,6 @@ fold_name (etree_type *tree)\n       break;\n \n     case NAME:\n-      if (expld.assign_name != NULL\n-\t  && strcmp (expld.assign_name, tree->name.name) == 0)\n-\t{\n-\t  /* Self-assignment is only allowed for absolute symbols\n-\t     defined in a linker script.  */\n-\t  h = bfd_wrapped_link_hash_lookup (link_info.output_bfd,\n-\t\t\t\t\t    &link_info,\n-\t\t\t\t\t    tree->name.name,\n-\t\t\t\t\t    FALSE, FALSE, TRUE);\n-\t  if (!(h != NULL\n-\t\t&& (h->type == bfd_link_hash_defined\n-\t\t    || h->type == bfd_link_hash_defweak)\n-\t\t&& h->u.def.section == bfd_abs_section_ptr\n-\t\t&& (def = symbol_defined (tree->name.name)) != NULL\n-\t\t&& def->iteration == (lang_statement_iteration & 255)))\n-\t    expld.assign_name = NULL;\n-\t}\n       if (tree->name.name[0] == '.' && tree->name.name[1] == 0)\n \tnew_rel_from_abs (expld.dot);\n       else\n@@ -787,6 +770,18 @@ fold_name (etree_type *tree)\n \t    expld.assign_src = h;\n \t  else\n \t    expld.assign_src = (struct bfd_link_hash_entry *) - 1;\n+\n+\t  /* Self-assignment is only allowed for absolute symbols\n+\t     defined in a linker script.  */\n+\t  if (expld.assign_name != NULL\n+\t      && strcmp (expld.assign_name, tree->name.name) == 0\n+\t      && !(h != NULL\n+\t\t   && (h->type == bfd_link_hash_defined\n+\t\t       || h->type == bfd_link_hash_defweak)\n+\t\t   && h->u.def.section == bfd_abs_section_ptr\n+\t\t   && (def = symbol_defined (tree->name.name)) != NULL\n+\t\t   && def->iteration == (lang_statement_iteration & 255)))\n+\t    expld.assign_name = NULL;\n \t}\n       break;\n \n@@ -1158,7 +1153,8 @@ exp_fold_tree_1 (etree_type *tree)\n \t     converted to absolute values, as is required by many\n \t     expressions, until final section sizing is complete.  */\n \t  if (expld.phase == lang_final_phase_enum\n-              || expld.assign_name != NULL)\n+\t      || expld.phase == lang_fixed_phase_enum\n+\t      || expld.assign_name != NULL)\n \t    {\n \t      if (tree->type.node_class == etree_provide)\n \t\ttree->type.node_class = etree_provided;\n@@ -1199,28 +1195,40 @@ exp_fold_tree_1 (etree_type *tree)\n \t\t\t(&link_info, h, link_info.output_bfd,\n \t\t\t expld.result.section, expld.result.value);\n \t\t    }\n-\t\t  h->type = bfd_link_hash_defined;\n-\t\t  h->u.def.value = expld.result.value;\n-\t\t  h->u.def.section = expld.result.section;\n-\t\t  h->linker_def = ! tree->assign.type.lineno;\n-\t\t  h->ldscript_def = 1;\n-\t\t  h->rel_from_abs = expld.rel_from_abs;\n-\t\t  if (tree->assign.hidden)\n-\t\t    bfd_link_hide_symbol (link_info.output_bfd,\n-\t\t\t\t\t  &link_info, h);\n-\n-\t\t  /* Copy the symbol type if this is an expression only\n-\t\t     referencing a single symbol.  (If the expression\n-\t\t     contains ternary conditions, ignoring symbols on\n-\t\t     false branches.)  */\n-\t\t  if (expld.assign_src != NULL\n-\t\t      && (expld.assign_src\n-\t\t\t  != (struct bfd_link_hash_entry *) -1))\n-\t\t    bfd_copy_link_hash_symbol_type (link_info.output_bfd, h,\n-\t\t\t\t\t\t    expld.assign_src);\n+\t\t  if (expld.phase == lang_fixed_phase_enum)\n+\t\t    {\n+\t\t      if (h->type == bfd_link_hash_defined)\n+\t\t\t{\n+\t\t\t  expld.result.value = h->u.def.value;\n+\t\t\t  expld.result.section = h->u.def.section;\n+\t\t\t}\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      h->type = bfd_link_hash_defined;\n+\t\t      h->u.def.value = expld.result.value;\n+\t\t      h->u.def.section = expld.result.section;\n+\t\t      h->linker_def = ! tree->assign.type.lineno;\n+\t\t      h->ldscript_def = 1;\n+\t\t      h->rel_from_abs = expld.rel_from_abs;\n+\t\t      if (tree->assign.hidden)\n+\t\t\tbfd_link_hide_symbol (link_info.output_bfd,\n+\t\t\t\t\t      &link_info, h);\n+\n+\t\t      /* Copy the symbol type if this is an expression only\n+\t\t\t referencing a single symbol.  (If the expression\n+\t\t\t contains ternary conditions, ignoring symbols on\n+\t\t\t false branches.)  */\n+\t\t      if (expld.assign_src != NULL\n+\t\t\t  && (expld.assign_src\n+\t\t\t      != (struct bfd_link_hash_entry *) -1))\n+\t\t\tbfd_copy_link_hash_symbol_type (link_info.output_bfd,\n+\t\t\t\t\t\t\th, expld.assign_src);\n+\t\t    }\n \t\t}\n \t    }\n-\t  expld.assign_name = NULL;\n+\t  if (expld.phase != lang_fixed_phase_enum)\n+\t    expld.assign_name = NULL;\n \t}\n       break;\n "
    },
    {
      "sha": "71395bc6c4696e959ffc26cf40e088642d00e2f4",
      "filename": "ld/ldexp.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ldexp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ldexp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.h?ref=6a84624340dd19ccd927d91d79e0ece135c6d846",
      "patch": "@@ -106,7 +106,9 @@ typedef enum\n   /* During assignment of symbol values when relaxation in progress.  */\n   lang_assigning_phase_enum,\n   /* Final assignment of symbol values.  */\n-  lang_final_phase_enum\n+  lang_final_phase_enum,\n+  /* Run after symbol values have been fixed, for lang_map.  */\n+  lang_fixed_phase_enum\n } lang_phase_type;\n \n union lang_statement_union;"
    },
    {
      "sha": "33f6bda292ad0524a507cc63a47bd4c92f7dae90",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a84624340dd19ccd927d91d79e0ece135c6d846/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=6a84624340dd19ccd927d91d79e0ece135c6d846",
      "patch": "@@ -2315,6 +2315,7 @@ lang_map (void)\n       obstack_begin (&map_obstack, 1000);\n       bfd_link_hash_traverse (link_info.hash, sort_def_symbol, 0);\n     }\n+  expld.phase = lang_fixed_phase_enum;\n   lang_statement_iteration++;\n   print_statements ();\n \n@@ -4244,9 +4245,7 @@ print_assignment (lang_assignment_statement_type *assignment,\n       const char *dst = assignment->exp->assign.dst;\n \n       is_dot = (dst[0] == '.' && dst[1] == 0);\n-      if (!is_dot)\n-\texpld.assign_name = dst;\n-      tree = assignment->exp->assign.src;\n+      tree = assignment->exp;\n     }\n \n   osec = output_section->bfd_section;\n@@ -4281,7 +4280,9 @@ print_assignment (lang_assignment_statement_type *assignment,\n \n \t  h = bfd_link_hash_lookup (link_info.hash, assignment->exp->assign.dst,\n \t\t\t\t    FALSE, FALSE, TRUE);\n-\t  if (h)\n+\t  if (h != NULL\n+\t      && (h->type == bfd_link_hash_defined\n+\t\t  || h->type == bfd_link_hash_defweak))\n \t    {\n \t      value = h->u.def.value;\n \t      value += h->u.def.section->output_section->vma;"
    }
  ]
}