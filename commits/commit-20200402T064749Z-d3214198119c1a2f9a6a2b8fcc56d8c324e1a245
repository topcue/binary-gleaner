{
  "sha": "d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDMyMTQxOTgxMTljMWEyZjlhNmEyYjhmY2M1NmQ4YzMyNGUxYTI0NQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-02T06:47:49Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-02T06:47:49Z"
    },
    "message": "[gdb] Use partial symbol table to find language for main\n\nWhen language is set to auto, part of loading an executable is to update the\nlanguage accordingly.  This is implemented by set_initial_language.\n\nThe implementation of set_initial_language works as follows:\n- check if any objfile in the progspace has name_of_main/language_of_main\n  set, and if so, use the first one found. [ This is what you get f.i. when\n  using dwarf with DW_AT_main_subprogram. ]\n- otherwise, check for known names in the minimal symbols, and either:\n- use the associated language if any (f.i. for ada), or\n- lookup the symbol in the symtab for the name and use the symbol language\n  (f.i. for c/c++).\n\nThe symbol lookup can be slow though.\n\nIn the case of the cc1 binary from PR23710 comment 1, getting to the initial\nprompt takes ~8s:\n...\n$ time.sh gdb cc1 -batch -ex \"show language\"\nThe current source language is \"auto; currently c++\".\nmaxmem: 1272260\nreal: 8.05\nuser: 7.73\nsystem: 0.38\n...\nbut if we skip guessing the initial language by setting it instead, it takes\nonly ~4s:\n...\n$ time.sh gdb -iex \"set language c++\" cc1 -batch -ex \"show language\"\nThe current source language is \"c++\".\nmaxmem: 498272\nreal: 3.99\nuser: 3.90\nsystem: 0.15\n...\n\nIn both cases, we load the partial symbols for the executable, but in the\nfirst case only we also do a lookup of main, which causes the corresponding\npartial symtab to be expanded into a full symtab.\n\nIdeally, we'd like to get the language of the symbol without triggering\nexpansion into a full symtab, and get the speedup without having to set the\nlanguage manually.\n\nThere's a related fixme in the header comment of set_initial_language:\n...\n/* Set the initial language.\n\n   FIXME: A better solution would be to record the language in the\n   psymtab when reading partial symbols, and then use it (if known) to\n   set the language.  This would be a win for formats that encode the\n   language in an easily discoverable place, such as DWARF.  For\n   stabs, we can jump through hoops looking for specially named\n   symbols or try to intuit the language from the specific type of\n   stabs we find, but we can't do that until later when we read in\n   full symbols.  */\n\nvoid\nset_initial_language (void)\n...\n\nSince we're already tracking the language of partial symbols, use this to set\nthe language for the main symbol.\n\nNote that this search in partial symbol tables is not guaranteed to yield the\nsame result as the lookup_symbol_in_language call currently done in\nset_initial_language.\n\nBuild and reg-tested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2020-04-02  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2/read.c (dwarf2_gdb_index_functions,\n\tdwarf2_debug_names_functions): Init lookup_global_symbol_language with\n\tNULL.\n\t* psymtab.c (psym_lookup_global_symbol_language): New function.\n\t(psym_functions): Init psym_lookup_global_symbol_language with\n\tpsym_lookup_global_symbol_language.\n\t* symfile-debug.c (debug_sym_quick_functions): Init\n\tlookup_global_symbol_language with NULL.\n\t* symfile.c (set_initial_language): Remove fixme comment.\n\t* symfile.h (struct quick_symbol_functions): Add\n\tlookup_global_symbol_language.\n\t* symtab.c (find_quick_global_symbol_language): New function.\n\t(find_main_name): Use find_quick_global_symbol_language.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-02  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/main-psymtab.exp: New file.",
    "tree": {
      "sha": "f77fb6c23d6c4bbef96c5855844cf2a1fd21ded9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f77fb6c23d6c4bbef96c5855844cf2a1fd21ded9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cc77ed241bab61c0e86f4620e68be4481063a450",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc77ed241bab61c0e86f4620e68be4481063a450",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cc77ed241bab61c0e86f4620e68be4481063a450"
    }
  ],
  "stats": {
    "total": 147,
    "additions": 137,
    "deletions": 10
  },
  "files": [
    {
      "sha": "d5a2ed8fdef03dbf15b235e1d0738b555f7015ea",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -1,3 +1,19 @@\n+2020-04-02  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf2/read.c (dwarf2_gdb_index_functions,\n+\tdwarf2_debug_names_functions): Init lookup_global_symbol_language with\n+\tNULL.\n+\t* psymtab.c (psym_lookup_global_symbol_language): New function.\n+\t(psym_functions): Init psym_lookup_global_symbol_language with\n+\tpsym_lookup_global_symbol_language.\n+\t* symfile-debug.c (debug_sym_quick_functions): Init\n+\tlookup_global_symbol_language with NULL.\n+\t* symfile.c (set_initial_language): Remove fixme comment.\n+\t* symfile.h (struct quick_symbol_functions): Add\n+\tlookup_global_symbol_language.\n+\t* symtab.c (find_quick_global_symbol_language): New function.\n+\t(find_main_name): Use find_quick_global_symbol_language.\n+\n 2020-04-01  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* windows-tdep.c (is_linked_with_cygwin_dll): Fix style."
    },
    {
      "sha": "198fac0f4164ffce5b197634b53095b66f4daeb5",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -4708,6 +4708,7 @@ const struct quick_symbol_functions dwarf2_gdb_index_functions =\n   dw2_forget_cached_source_info,\n   dw2_map_symtabs_matching_filename,\n   dw2_lookup_symbol,\n+  NULL,\n   dw2_print_stats,\n   dw2_dump,\n   dw2_expand_symtabs_for_function,\n@@ -5590,6 +5591,7 @@ const struct quick_symbol_functions dwarf2_debug_names_functions =\n   dw2_forget_cached_source_info,\n   dw2_map_symtabs_matching_filename,\n   dw2_debug_names_lookup_symbol,\n+  NULL,\n   dw2_print_stats,\n   dw2_debug_names_dump,\n   dw2_debug_names_expand_symtabs_for_function,"
    },
    {
      "sha": "26c55e9bd334a4a5f5bfeca228858d1efb5d1412",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -521,6 +521,36 @@ psym_lookup_symbol (struct objfile *objfile,\n   return stab_best;\n }\n \n+/* Psymtab version of lookup_global_symbol_language.  See its definition in\n+   the definition of quick_symbol_functions in symfile.h.  */\n+\n+static enum language\n+psym_lookup_global_symbol_language (struct objfile *objfile, const char *name,\n+\t\t\t\t    domain_enum domain, bool *symbol_found_p)\n+{\n+  *symbol_found_p = false;\n+  if (objfile->sf == NULL)\n+    return language_unknown;\n+\n+  lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n+\n+  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+    {\n+      struct partial_symbol *psym;\n+      if (ps->readin_p ())\n+\tcontinue;\n+\n+      psym = lookup_partial_symbol (objfile, ps, lookup_name, 1, domain);\n+      if (psym)\n+\t{\n+\t  *symbol_found_p = true;\n+\t  return psym->ginfo.language ();\n+\t}\n+    }\n+\n+  return language_unknown;\n+}\n+\n /* Returns true if PSYM matches LOOKUP_NAME.  */\n \n static bool\n@@ -1422,6 +1452,7 @@ const struct quick_symbol_functions psym_functions =\n   psym_forget_cached_source_info,\n   psym_map_symtabs_matching_filename,\n   psym_lookup_symbol,\n+  psym_lookup_global_symbol_language,\n   psym_print_stats,\n   psym_dump,\n   psym_expand_symtabs_for_function,"
    },
    {
      "sha": "19dc83a8bdd4b36f0b1667550b222ae677de1139",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -362,6 +362,7 @@ static const struct quick_symbol_functions debug_sym_quick_functions =\n   debug_qf_forget_cached_source_info,\n   debug_qf_map_symtabs_matching_filename,\n   debug_qf_lookup_symbol,\n+  NULL,\n   debug_qf_print_stats,\n   debug_qf_dump,\n   debug_qf_expand_symtabs_for_function,"
    },
    {
      "sha": "bd27a1fefef16a5723c8e50c6cf4cd8f729ea9f9",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 10,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -1667,16 +1667,7 @@ symbol_file_command (const char *args, int from_tty)\n     }\n }\n \n-/* Set the initial language.\n-\n-   FIXME: A better solution would be to record the language in the\n-   psymtab when reading partial symbols, and then use it (if known) to\n-   set the language.  This would be a win for formats that encode the\n-   language in an easily discoverable place, such as DWARF.  For\n-   stabs, we can jump through hoops looking for specially named\n-   symbols or try to intuit the language from the specific type of\n-   stabs we find, but we can't do that until later when we read in\n-   full symbols.  */\n+/* Set the initial language.  */\n \n void\n set_initial_language (void)"
    },
    {
      "sha": "84fa283e85cba3bdc14e7ea516ffeda4ffeffdd1",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -183,6 +183,17 @@ struct quick_symbol_functions\n \t\t\t\t\t    const char *name,\n \t\t\t\t\t    domain_enum domain);\n \n+  /* Check to see if the global symbol is defined in a \"partial\" symbol table\n+     of OBJFILE. NAME is the name of the symbol to look for.  DOMAIN\n+     indicates what sort of symbol to search for.\n+\n+     If found, sets *symbol_found_p to true and returns the symbol language.\n+     defined, or NULL if no such symbol table exists.  */\n+  enum language (*lookup_global_symbol_language) (struct objfile *objfile,\n+\t\t\t\t\t\t  const char *name,\n+\t\t\t\t\t\t  domain_enum domain,\n+\t\t\t\t\t\t  bool *symbol_found_p);\n+\n   /* Print statistics about any indices loaded for OBJFILE.  The\n      statistics should be printed to gdb_stdout.  This is used for\n      \"maint print statistics\".  */"
    },
    {
      "sha": "5f07f3cc93e4cc4c0bcb5d241adb5ef97e9a1a31",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -2560,6 +2560,33 @@ lookup_symbol_in_objfile (struct objfile *objfile, enum block_enum block_index,\n   return result;\n }\n \n+/* Find the language for partial symbol with NAME.  */\n+\n+static enum language\n+find_quick_global_symbol_language (const char *name, const domain_enum domain)\n+{\n+  for (objfile *objfile : current_program_space->objfiles ())\n+    {\n+      if (objfile->sf && objfile->sf->qf\n+\t  && objfile->sf->qf->lookup_global_symbol_language)\n+\tcontinue;\n+      return language_unknown;\n+    }\n+\n+  for (objfile *objfile : current_program_space->objfiles ())\n+    {\n+      bool symbol_found_p;\n+      enum language lang\n+\t= objfile->sf->qf->lookup_global_symbol_language (objfile, name, domain,\n+\t\t\t\t\t\t\t  &symbol_found_p);\n+      if (!symbol_found_p)\n+\tcontinue;\n+      return lang;\n+    }\n+\n+  return language_unknown;\n+}\n+\n /* Private data to be used with lookup_symbol_global_iterator_cb.  */\n \n struct global_or_static_sym_lookup_data\n@@ -6144,6 +6171,16 @@ find_main_name (void)\n \n   /* The languages above didn't identify the name of the main procedure.\n      Fallback to \"main\".  */\n+\n+  /* Try to find language for main in psymtabs.  */\n+  enum language lang\n+    = find_quick_global_symbol_language (\"main\", VAR_DOMAIN);\n+  if (lang != language_unknown)\n+    {\n+      set_main_name (\"main\", lang);\n+      return;\n+    }\n+\n   set_main_name (\"main\", language_unknown);\n }\n "
    },
    {
      "sha": "5dcb844bfde4b65edb6007c3745cf84fa9ad3d27",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -1,3 +1,7 @@\n+2020-04-02  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/main-psymtab.exp: New file.\n+\n 2020-04-02  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.fortran/mixed-lang-stack.exp: Accept new complex printing style."
    },
    {
      "sha": "72596f632b40953b9a1a320265d4168afe6d68b1",
      "filename": "gdb/testsuite/gdb.base/main-psymtab.exp",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/testsuite/gdb.base/main-psymtab.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245/gdb/testsuite/gdb.base/main-psymtab.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/main-psymtab.exp?ref=d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "patch": "@@ -0,0 +1,34 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile persistent-lang.cc\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+clean_restart\n+\n+set auto_cpp \\\n+    {The current source language is \"auto; currently c\\+\\+\"\\.}\n+\n+gdb_load ${binfile}\n+gdb_test \"show language\" $auto_cpp \\\n+    \"language auto/c++ after load\"\n+\n+# Verify that partial symtab expansion has not taken place for\n+# persistent-lang.cc\n+\n+verify_psymtab_expanded persistent-lang.cc no"
    }
  ]
}