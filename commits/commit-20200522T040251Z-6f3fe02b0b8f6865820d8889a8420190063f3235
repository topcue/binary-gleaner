{
  "sha": "6f3fe02b0b8f6865820d8889a8420190063f3235",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmYzZmUwMmIwYjhmNjg2NTgyMGQ4ODg5YTg0MjAxOTAwNjNmMzIzNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-22T02:12:43Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-22T04:02:51Z"
    },
    "message": "PowerPC: downgrade FP mismatch error for shared libraries to a warning\n\n\tPR 25882\nbfd/\n\t* elf32-ppc.c (_bfd_elf_ppc_merge_fp_attributes): Don't init FP\n\tattributes from shared libraries, and do not return an error if\n\tthey don't match.\ngold/\n\t* powerpc.cc (merge_object_attributes): Replace name param with\n\tobj param.  Update callers.  Don't init FP attributes from shared\n\tlibraries, and do not emit an error if they don't match.",
    "tree": {
      "sha": "e32ea7e3d98e212d1683a12cef5218ba638381e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e32ea7e3d98e212d1683a12cef5218ba638381e8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f3fe02b0b8f6865820d8889a8420190063f3235",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f3fe02b0b8f6865820d8889a8420190063f3235",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f3fe02b0b8f6865820d8889a8420190063f3235",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f3fe02b0b8f6865820d8889a8420190063f3235/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1b2e4380ebe4e3113fbe890130d57d9f62693b04",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b2e4380ebe4e3113fbe890130d57d9f62693b04",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1b2e4380ebe4e3113fbe890130d57d9f62693b04"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 73,
    "deletions": 28
  },
  "files": [
    {
      "sha": "90274890ea9776ade95fbc0cc0f479575bc264ed",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f3fe02b0b8f6865820d8889a8420190063f3235/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f3fe02b0b8f6865820d8889a8420190063f3235/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=6f3fe02b0b8f6865820d8889a8420190063f3235",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-22  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25882\n+\t* elf32-ppc.c (_bfd_elf_ppc_merge_fp_attributes): Don't init FP\n+\tattributes from shared libraries, and do not return an error if\n+\tthey don't match.\n+\n 2020-05-21  Alan Modra  <amodra@gmail.com>\n \n \tPR 25993"
    },
    {
      "sha": "d1c5e1b22488bb93d3f50ff69adc0cfa8b779b21",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 31,
      "deletions": 14,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f3fe02b0b8f6865820d8889a8420190063f3235/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f3fe02b0b8f6865820d8889a8420190063f3235/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=6f3fe02b0b8f6865820d8889a8420190063f3235",
      "patch": "@@ -3557,6 +3557,17 @@ _bfd_elf_ppc_merge_fp_attributes (bfd *ibfd, struct bfd_link_info *info)\n   obj_attribute *in_attr, *in_attrs;\n   obj_attribute *out_attr, *out_attrs;\n   bfd_boolean ret = TRUE;\n+  bfd_boolean warn_only;\n+\n+  /* We only warn about shared library mismatches, because common\n+     libraries advertise support for a particular long double variant\n+     but actually support more than one variant.  For example, glibc\n+     typically supports 128-bit IBM long double in the shared library\n+     but has a compatibility static archive for 64-bit long double.\n+     The linker doesn't have the smarts to see that an app using\n+     object files marked as 64-bit long double call the compatibility\n+     layer objects and only from there call into the shared library.  */\n+  warn_only = (ibfd->flags & DYNAMIC) != 0;\n \n   in_attrs = elf_known_obj_attributes (ibfd)[OBJ_ATTR_GNU];\n   out_attrs = elf_known_obj_attributes (obfd)[OBJ_ATTR_GNU];\n@@ -3574,41 +3585,44 @@ _bfd_elf_ppc_merge_fp_attributes (bfd *ibfd, struct bfd_link_info *info)\n \t;\n       else if (out_fp == 0)\n \t{\n-\t  out_attr->type = ATTR_TYPE_FLAG_INT_VAL;\n-\t  out_attr->i ^= in_fp;\n-\t  last_fp = ibfd;\n+\t  if (!warn_only)\n+\t    {\n+\t      out_attr->type = ATTR_TYPE_FLAG_INT_VAL;\n+\t      out_attr->i ^= in_fp;\n+\t      last_fp = ibfd;\n+\t    }\n \t}\n       else if (out_fp != 2 && in_fp == 2)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses hard float, %pB uses soft float\"),\n \t     last_fp, ibfd);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n       else if (out_fp == 2 && in_fp != 2)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses hard float, %pB uses soft float\"),\n \t     ibfd, last_fp);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n       else if (out_fp == 1 && in_fp == 3)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses double-precision hard float, \"\n \t       \"%pB uses single-precision hard float\"), last_fp, ibfd);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n       else if (out_fp == 3 && in_fp == 1)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses double-precision hard float, \"\n \t       \"%pB uses single-precision hard float\"), ibfd, last_fp);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n \n       in_fp = in_attr->i & 0xc;\n@@ -3617,41 +3631,44 @@ _bfd_elf_ppc_merge_fp_attributes (bfd *ibfd, struct bfd_link_info *info)\n \t;\n       else if (out_fp == 0)\n \t{\n-\t  out_attr->type = ATTR_TYPE_FLAG_INT_VAL;\n-\t  out_attr->i ^= in_fp;\n-\t  last_ld = ibfd;\n+\t  if (!warn_only)\n+\t    {\n+\t      out_attr->type = ATTR_TYPE_FLAG_INT_VAL;\n+\t      out_attr->i ^= in_fp;\n+\t      last_ld = ibfd;\n+\t    }\n \t}\n       else if (out_fp != 2 * 4 && in_fp == 2 * 4)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses 64-bit long double, \"\n \t       \"%pB uses 128-bit long double\"), ibfd, last_ld);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n       else if (in_fp != 2 * 4 && out_fp == 2 * 4)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses 64-bit long double, \"\n \t       \"%pB uses 128-bit long double\"), last_ld, ibfd);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n       else if (out_fp == 1 * 4 && in_fp == 3 * 4)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses IBM long double, \"\n \t       \"%pB uses IEEE long double\"), last_ld, ibfd);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n       else if (out_fp == 3 * 4 && in_fp == 1 * 4)\n \t{\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB uses IBM long double, \"\n \t       \"%pB uses IEEE long double\"), ibfd, last_ld);\n-\t  ret = FALSE;\n+\t  ret = warn_only;\n \t}\n     }\n "
    },
    {
      "sha": "58cb3f31aedd40db3a56e4e0c95b8374caf99ac9",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f3fe02b0b8f6865820d8889a8420190063f3235/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f3fe02b0b8f6865820d8889a8420190063f3235/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=6f3fe02b0b8f6865820d8889a8420190063f3235",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-22  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25882\n+\t* powerpc.cc (merge_object_attributes): Replace name param with\n+\tobj param.  Update callers.  Don't init FP attributes from shared\n+\tlibraries, and do not emit an error if they don't match.\n+\n 2020-05-15  Nikita Ermakov  <coffe92@gmail.com>\n \n \t* powerpc.cc (do_gc_mark_symbol): Don't segfault on plugin symbols."
    },
    {
      "sha": "318c41744b5c52f73a4386246e1812c2851255c1",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 28,
      "deletions": 14,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f3fe02b0b8f6865820d8889a8420190063f3235/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f3fe02b0b8f6865820d8889a8420190063f3235/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=6f3fe02b0b8f6865820d8889a8420190063f3235",
      "patch": "@@ -1204,7 +1204,7 @@ class Target_powerpc : public Sized_target<size, big_endian>\n \n   // Merge object attributes from input object with those in the output.\n   void\n-  merge_object_attributes(const char*, const Attributes_section_data*);\n+  merge_object_attributes(const Object*, const Attributes_section_data*);\n \n  private:\n \n@@ -9481,7 +9481,7 @@ Target_powerpc<size, big_endian>::do_finalize_sections(\n       Powerpc_relobj<size, big_endian>* ppc_relobj\n \t= static_cast<Powerpc_relobj<size, big_endian>*>(*p);\n       if (ppc_relobj->attributes_section_data())\n-\tthis->merge_object_attributes(ppc_relobj->name().c_str(),\n+\tthis->merge_object_attributes(ppc_relobj,\n \t\t\t\t      ppc_relobj->attributes_section_data());\n     }\n   for (Input_objects::Dynobj_iterator p = input_objects->dynobj_begin();\n@@ -9491,7 +9491,7 @@ Target_powerpc<size, big_endian>::do_finalize_sections(\n       Powerpc_dynobj<size, big_endian>* ppc_dynobj\n \t= static_cast<Powerpc_dynobj<size, big_endian>*>(*p);\n       if (ppc_dynobj->attributes_section_data())\n-\tthis->merge_object_attributes(ppc_dynobj->name().c_str(),\n+\tthis->merge_object_attributes(ppc_dynobj,\n \t\t\t\t      ppc_dynobj->attributes_section_data());\n     }\n \n@@ -9514,7 +9514,7 @@ Target_powerpc<size, big_endian>::do_finalize_sections(\n template<int size, bool big_endian>\n void\n Target_powerpc<size, big_endian>::merge_object_attributes(\n-    const char* name,\n+    const Object* obj,\n     const Attributes_section_data* pasd)\n {\n   // Return if there is no attributes section data.\n@@ -9530,23 +9530,28 @@ Target_powerpc<size, big_endian>::merge_object_attributes(\n   Object_attribute* out_attr\n     = this->attributes_section_data_->known_attributes(vendor);\n \n+  const char* name = obj->name().c_str();\n   const char* err;\n   const char* first;\n   const char* second;\n   int tag = elfcpp::Tag_GNU_Power_ABI_FP;\n   int in_fp = in_attr[tag].int_value() & 0xf;\n   int out_fp = out_attr[tag].int_value() & 0xf;\n+  bool warn_only = obj->is_dynamic();\n   if (in_fp != out_fp)\n     {\n       err = NULL;\n       if ((in_fp & 3) == 0)\n \t;\n       else if ((out_fp & 3) == 0)\n \t{\n-\t  out_fp |= in_fp & 3;\n-\t  out_attr[tag].set_int_value(out_fp);\n-\t  out_attr[tag].set_type(Object_attribute::ATTR_TYPE_FLAG_INT_VAL);\n-\t  this->last_fp_ = name;\n+\t  if (!warn_only)\n+\t    {\n+\t      out_fp |= in_fp & 3;\n+\t      out_attr[tag].set_int_value(out_fp);\n+\t      out_attr[tag].set_type(Object_attribute::ATTR_TYPE_FLAG_INT_VAL);\n+\t      this->last_fp_ = name;\n+\t    }\n \t}\n       else if ((out_fp & 3) != 2 && (in_fp & 3) == 2)\n \t{\n@@ -9579,10 +9584,13 @@ Target_powerpc<size, big_endian>::merge_object_attributes(\n \t;\n       else if ((out_fp & 0xc) == 0)\n \t{\n-\t  out_fp |= in_fp & 0xc;\n-\t  out_attr[tag].set_int_value(out_fp);\n-\t  out_attr[tag].set_type(Object_attribute::ATTR_TYPE_FLAG_INT_VAL);\n-\t  this->last_ld_ = name;\n+\t  if (!warn_only)\n+\t    {\n+\t      out_fp |= in_fp & 0xc;\n+\t      out_attr[tag].set_int_value(out_fp);\n+\t      out_attr[tag].set_type(Object_attribute::ATTR_TYPE_FLAG_INT_VAL);\n+\t      this->last_ld_ = name;\n+\t    }\n \t}\n       else if ((out_fp & 0xc) != 2 * 4 && (in_fp & 0xc) == 2 * 4)\n \t{\n@@ -9612,10 +9620,16 @@ Target_powerpc<size, big_endian>::merge_object_attributes(\n       if (err)\n \t{\n \t  if (parameters->options().warn_mismatch())\n-\t    gold_error(_(err), first, second);\n+\t    {\n+\t      if (warn_only)\n+\t\tgold_warning(_(err), first, second);\n+\t      else\n+\t\tgold_error(_(err), first, second);\n+\t    }\n \t  // Arrange for this attribute to be deleted.  It's better to\n \t  // say \"don't know\" about a file than to wrongly claim compliance.\n-\t  out_attr[tag].set_type(0);\n+\t  if (!warn_only)\n+\t    out_attr[tag].set_type(0);\n \t}\n     }\n "
    }
  ]
}