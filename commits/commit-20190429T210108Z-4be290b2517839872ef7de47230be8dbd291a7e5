{
  "sha": "4be290b2517839872ef7de47230be8dbd291a7e5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGJlMjkwYjI1MTc4Mzk4NzJlZjdkZTQ3MjMwYmU4ZGJkMjkxYTdlNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-09T22:06:41Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-29T21:01:08Z"
    },
    "message": "gdb: Introduce new language field la_is_string_type_p\n\nThis commit is preparation work for the next commit, and by itself\nmakes no user visible change to GDB.  I've split this work into a\nseparate commit in order to make code review easier.\n\nThis commit adds a new field 'la_is_string_type_p' to the language\nstruct, this predicate will return true if a type is a string type for\nthe given language.\n\nSome languages already have a \"is this a string\" predicate that I was\nable to reuse, while for other languages I've had to add a new\npredicate.  In this case I took inspiration from the value printing\ncode for that language - what different conditions would result in\nprinting something as a string.\n\nA default \"is this a string\" method has also been added that looks for\nTYPE_CODE_STRING, this is the fallback I've used for a couple of\nlanguages.\n\nIn this commit I add the new field and initialise it for each\nlanguage, however at this stage the new field is never used.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_defn): Initialise new field.\n\t* c-lang.c (c_is_string_type_p): New function.\n\t(c_language_defn): Initialise new field.\n\t(cplus_language_defn): Initialise new field.\n\t(asm_language_defn): Initialise new field.\n\t(minimal_language_defn): Initialise new field.\n\t* c-lang.h (c_is_string_type_p): Declare new function.\n\t* d-lang.c (d_language_defn): Initialise new field.\n\t* f-lang.c (f_is_string_type_p): New function.\n\t(f_language_defn): Initialise new field.\n\t* go-lang.c (go_is_string_type_p): New function.\n\t(go_language_defn): Initialise new field.\n\t* language.c (default_is_string_type_p): New function.\n\t(unknown_language_defn): Initialise new field.\n\t(auto_language_defn): Initialise new field.\n\t* language.h (struct language_defn) <la_is_string_type_p>: New\n\tmember variable.\n\t(default_is_string_type_p): Declare new function.\n\t* m2-lang.c (m2_language_defn): Initialise new field.\n\t* objc-lang.c (objc_language_defn): Initialise new field.\n\t* opencl-lang.c (opencl_language_defn): Initialise new field.\n\t* p-lang.c (pascal_is_string_type_p): New function.\n\t(pascal_language_defn): Initialise new field.\n\t* rust-lang.c (rust_is_string_type_p): New function.\n\t(rust_language_defn): Initialise new field.",
    "tree": {
      "sha": "67bf7edccf42c7d295af015c818bc7e80ead3a31",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67bf7edccf42c7d295af015c818bc7e80ead3a31"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4be290b2517839872ef7de47230be8dbd291a7e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4be290b2517839872ef7de47230be8dbd291a7e5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4be290b2517839872ef7de47230be8dbd291a7e5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4be290b2517839872ef7de47230be8dbd291a7e5/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "721b08c68679ad4058bfa7ae73811e6f9e845cfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/721b08c68679ad4058bfa7ae73811e6f9e845cfd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/721b08c68679ad4058bfa7ae73811e6f9e845cfd"
    }
  ],
  "stats": {
    "total": 177,
    "additions": 177,
    "deletions": 0
  },
  "files": [
    {
      "sha": "432eb7bda0e18de263a1776174a6716887b6c7b0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -1,3 +1,31 @@\n+2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_defn): Initialise new field.\n+\t* c-lang.c (c_is_string_type_p): New function.\n+\t(c_language_defn): Initialise new field.\n+\t(cplus_language_defn): Initialise new field.\n+\t(asm_language_defn): Initialise new field.\n+\t(minimal_language_defn): Initialise new field.\n+\t* c-lang.h (c_is_string_type_p): Declare new function.\n+\t* d-lang.c (d_language_defn): Initialise new field.\n+\t* f-lang.c (f_is_string_type_p): New function.\n+\t(f_language_defn): Initialise new field.\n+\t* go-lang.c (go_is_string_type_p): New function.\n+\t(go_language_defn): Initialise new field.\n+\t* language.c (default_is_string_type_p): New function.\n+\t(unknown_language_defn): Initialise new field.\n+\t(auto_language_defn): Initialise new field.\n+\t* language.h (struct language_defn) <la_is_string_type_p>: New\n+\tmember variable.\n+\t(default_is_string_type_p): Declare new function.\n+\t* m2-lang.c (m2_language_defn): Initialise new field.\n+\t* objc-lang.c (objc_language_defn): Initialise new field.\n+\t* opencl-lang.c (opencl_language_defn): Initialise new field.\n+\t* p-lang.c (pascal_is_string_type_p): New function.\n+\t(pascal_language_defn): Initialise new field.\n+\t* rust-lang.c (rust_is_string_type_p): New function.\n+\t(rust_language_defn): Initialise new field.\n+\n 2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* language.h (struct language_defn) <la_struct_too_deep_ellipsis>:"
    },
    {
      "sha": "28ab931e3cf0dada9acbb4dafc717ea6ec9f56fd",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -14390,6 +14390,7 @@ extern const struct language_defn ada_language_defn = {\n   &ada_varobj_ops,\n   NULL,\n   NULL,\n+  ada_is_string_type,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "aeffefad55e0011258a29e1f510f4950865441cb",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -715,6 +715,42 @@ c_watch_location_expression (struct type *type, CORE_ADDR addr)\n     (xstrprintf (\"* (%s *) %s\", name.c_str (), core_addr_to_string (addr)));\n }\n \n+/* See c-lang.h.  */\n+\n+bool\n+c_is_string_type_p (struct type *type)\n+{\n+  type = check_typedef (type);\n+  while (TYPE_CODE (type) == TYPE_CODE_REF)\n+    {\n+      type = TYPE_TARGET_TYPE (type);\n+      type = check_typedef (type);\n+    }\n+\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_ARRAY:\n+      {\n+\t/* See if target type looks like a string.  */\n+\tstruct type *array_target_type = TYPE_TARGET_TYPE (type);\n+\treturn (TYPE_LENGTH (type) > 0\n+\t\t&& TYPE_LENGTH (array_target_type) > 0\n+\t\t&& c_textual_element_type (array_target_type, 0));\n+      }\n+    case TYPE_CODE_STRING:\n+      return true;\n+    case TYPE_CODE_PTR:\n+      {\n+\tstruct type *element_type = TYPE_TARGET_TYPE (type);\n+\treturn c_textual_element_type (element_type, 0);\n+      }\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n \f\n /* Table mapping opcodes into strings for printing operators\n    and precedences of the operators.  */\n@@ -874,6 +910,7 @@ extern const struct language_defn c_language_defn =\n   &c_varobj_ops,\n   c_get_compile_context,\n   c_compute_program,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -1019,6 +1056,7 @@ extern const struct language_defn cplus_language_defn =\n   &cplus_varobj_ops,\n   cplus_get_compile_context,\n   cplus_compute_program,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -1073,6 +1111,7 @@ extern const struct language_defn asm_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -1127,5 +1166,6 @@ extern const struct language_defn minimal_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };"
    },
    {
      "sha": "70a95eadbf8e176b59313ee34e344e790c40d4dd",
      "filename": "gdb/c-lang.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/c-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/c-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.h?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -148,6 +148,11 @@ extern int cp_is_vtbl_ptr_type (struct type *);\n \n extern int cp_is_vtbl_member (struct type *);\n \n+/* Return true if TYPE is a string type.  Unlike DEFAULT_IS_STRING_TYPE_P\n+   this will detect arrays of characters not just TYPE_CODE_STRING.  */\n+\n+extern bool c_is_string_type_p (struct type *type);\n+\n /* These are in c-valprint.c.  */\n \n extern int c_textual_element_type (struct type *, char);"
    },
    {
      "sha": "0f8f916c9b1aea2a424595500408ee852fb73671",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -251,6 +251,7 @@ extern const struct language_defn d_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "e501d5cc355e4a5427c34a83da8bb0aea16a7630",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -308,6 +308,17 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n   return nullptr;\n }\n \n+/* Return true if TYPE is a string.  */\n+\n+static bool\n+f_is_string_type_p (struct type *type)\n+{\n+  type = check_typedef (type);\n+  return (TYPE_CODE (type) == TYPE_CODE_STRING\n+\t  || (TYPE_CODE (type) == TYPE_CODE_ARRAY\n+\t      && TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_CHAR));\n+}\n+\n static const char *f_extensions[] =\n {\n   \".f\", \".F\", \".for\", \".FOR\", \".ftn\", \".FTN\", \".fpp\", \".FPP\",\n@@ -378,6 +389,7 @@ extern const struct language_defn f_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  f_is_string_type_p,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "6473468d4d96ba9a403d51a0bd2b0d458ea627dc",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -130,6 +130,16 @@ go_classify_struct_type (struct type *type)\n   return GO_TYPE_NONE;\n }\n \n+/* Return true if TYPE is a string.  */\n+\n+static bool\n+go_is_string_type_p (struct type *type)\n+{\n+  type = check_typedef (type);\n+  return (TYPE_CODE (type) == TYPE_CODE_STRUCT\n+\t  && go_classify_struct_type (type) == GO_TYPE_STRING);\n+}\n+\n /* Subroutine of unpack_mangled_go_symbol to simplify it.\n    Given \"[foo.]bar.baz\", store \"bar\" in *PACKAGEP and \"baz\" in *OBJECTP.\n    We stomp on the last '.' to nul-terminate \"bar\".\n@@ -612,6 +622,7 @@ extern const struct language_defn go_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  go_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "9d0eb03b4209848b4541efdc4f7c1a45eb4b5312",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -723,6 +723,20 @@ default_symbol_name_matcher (const char *symbol_search_name,\n \n /* See language.h.  */\n \n+bool\n+default_is_string_type_p (struct type *type)\n+{\n+  type = check_typedef (type);\n+  while (TYPE_CODE (type) == TYPE_CODE_REF)\n+    {\n+      type = TYPE_TARGET_TYPE (type);\n+      type = check_typedef (type);\n+    }\n+  return (TYPE_CODE (type)  == TYPE_CODE_STRING);\n+}\n+\n+/* See language.h.  */\n+\n symbol_name_matcher_ftype *\n get_symbol_name_matcher (const language_defn *lang,\n \t\t\t const lookup_name_info &lookup_name)\n@@ -877,6 +891,7 @@ const struct language_defn unknown_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -928,6 +943,7 @@ const struct language_defn auto_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "e7446efa07f843b9132a6ccdb207c0704fe798dd",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -450,6 +450,9 @@ struct language_defn\n \t\t\t\t       const struct block *expr_block,\n \t\t\t\t       CORE_ADDR expr_pc);\n \n+    /* Return true if TYPE is a string type.  */\n+    bool (*la_is_string_type_p) (struct type *type);\n+\n     /* This string is used by the 'set print max-depth' setting.  When GDB\n        replaces a struct or union (during value printing) that is \"too\n        deep\" this string is displayed instead.  */\n@@ -575,6 +578,10 @@ extern enum language set_language (enum language);\n \n extern int pointer_type (struct type *);\n \n+/* Return true if TYPE is a string type, otherwise return false.  This\n+   default implementation only detects TYPE_CODE_STRING.  */\n+extern bool default_is_string_type_p (struct type *type);\n+\n /* Error messages */\n \n extern void range_error (const char *, ...) ATTRIBUTE_PRINTF (1, 2);"
    },
    {
      "sha": "6fe628978cf37b3e37c94186cbd0132f6e30263f",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -174,6 +174,27 @@ m2_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,\n     fputs_filtered (\"...\", stream);\n }\n \n+/* Return true if TYPE is a string.  */\n+\n+static bool\n+m2_is_string_type_p (struct type *type)\n+{\n+  type = check_typedef (type);\n+  if (TYPE_CODE (type) == TYPE_CODE_ARRAY\n+      && TYPE_LENGTH (type) > 0\n+      && TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0)\n+    {\n+      struct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+      if (TYPE_LENGTH (elttype) == 1\n+\t  && (TYPE_CODE (elttype) == TYPE_CODE_INT\n+\t      || TYPE_CODE (elttype) == TYPE_CODE_CHAR))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n static struct value *\n evaluate_subexp_modula2 (struct type *expect_type, struct expression *exp,\n \t\t\t int *pos, enum noside noside)\n@@ -399,6 +420,7 @@ extern const struct language_defn m2_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  m2_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "b25a98106c1339791c82d046b5bc2370abf0e26d",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -409,6 +409,7 @@ extern const struct language_defn objc_language_defn = {\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "93d8e2f5dd3381b92fa70da05432c6888f02e960",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -1087,6 +1087,7 @@ extern const struct language_defn opencl_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "9b9f19b69cf2a2586547564bcaceae8c1849cb4a",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -150,6 +150,16 @@ is_pascal_string_type (struct type *type,int *length_pos,\n   return 0;\n }\n \n+/* This is a wrapper around IS_PASCAL_STRING_TYPE that returns true if TYPE\n+   is a string.  */\n+\n+static bool\n+pascal_is_string_type_p (struct type *type)\n+{\n+  return is_pascal_string_type (type, nullptr, nullptr, nullptr,\n+\t\t\t\tnullptr, nullptr) > 0;\n+}\n+\n static void pascal_one_char (int, struct ui_file *, int *);\n \n /* Print the character C on STREAM as part of the contents of a literal\n@@ -460,5 +470,6 @@ extern const struct language_defn pascal_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  pascal_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };"
    },
    {
      "sha": "2fada465d651527d1c54fc99aa80f15df2063528",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4be290b2517839872ef7de47230be8dbd291a7e5/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=4be290b2517839872ef7de47230be8dbd291a7e5",
      "patch": "@@ -226,6 +226,26 @@ rust_chartype_p (struct type *type)\n \t  && TYPE_UNSIGNED (type));\n }\n \n+/* Return true if TYPE is a string type.  */\n+\n+static bool\n+rust_is_string_type_p (struct type *type)\n+{\n+  LONGEST low_bound, high_bound;\n+\n+  type = check_typedef (type);\n+  return ((TYPE_CODE (type) == TYPE_CODE_STRING)\n+\t  || (TYPE_CODE (type) == TYPE_CODE_PTR\n+\t      && (TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_ARRAY\n+\t\t  && rust_u8_type_p (TYPE_TARGET_TYPE (TYPE_TARGET_TYPE (type)))\n+\t\t  && get_array_bounds (TYPE_TARGET_TYPE (type), &low_bound,\n+\t\t\t\t       &high_bound)))\n+\t  || (TYPE_CODE (type) == TYPE_CODE_STRUCT\n+\t      && !rust_enum_p (type)\n+\t      && rust_slice_type_p (type)\n+\t      && strcmp (TYPE_NAME (type), \"&str\") == 0));\n+}\n+\n /* If VALUE represents a trait object pointer, return the underlying\n    pointer with the correct (i.e., runtime) type.  Otherwise, return\n    NULL.  */\n@@ -2142,5 +2162,6 @@ extern const struct language_defn rust_language_defn =\n   &default_varobj_ops,\n   NULL,\n   NULL,\n+  rust_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };"
    }
  ]
}