{
  "sha": "eae126cb7e10fd2107f4457af929eda96447f728",
  "node_id": "C_kwDOANOeidoAKGVhZTEyNmNiN2UxMGZkMjEwN2Y0NDU3YWY5MjllZGE5NjQ0N2Y3Mjg",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-12-05T17:24:12Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-01-06T06:17:37Z"
    },
    "message": "sim: d10v: migrate to standard uintXX_t types\n\nThis old port setup its own uintXX types, but since we require C11\nnow, we can assume the standard uintXX_t types exist and use them.\n\nAlso migrate off the sim-specific unsignedXX types.",
    "tree": {
      "sha": "fec5be7812b5a2fe6df9dcad894fe5132767f02b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fec5be7812b5a2fe6df9dcad894fe5132767f02b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eae126cb7e10fd2107f4457af929eda96447f728",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eae126cb7e10fd2107f4457af929eda96447f728",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eae126cb7e10fd2107f4457af929eda96447f728",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eae126cb7e10fd2107f4457af929eda96447f728/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32267d593ad819da3bb5e072ec5f0e9947d5ec34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32267d593ad819da3bb5e072ec5f0e9947d5ec34",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32267d593ad819da3bb5e072ec5f0e9947d5ec34"
    }
  ],
  "stats": {
    "total": 538,
    "additions": 265,
    "deletions": 273
  },
  "files": [
    {
      "sha": "7b354fd48414bb126337be6b1bcfde7e8f0fbd14",
      "filename": "sim/d10v/d10v_sim.h",
      "status": "modified",
      "additions": 18,
      "deletions": 26,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/d10v_sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/d10v_sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/d10v/d10v_sim.h?ref=eae126cb7e10fd2107f4457af929eda96447f728",
      "patch": "@@ -24,16 +24,8 @@ extern int d10v_debug;\n #include \"sim-config.h\"\n #include \"sim-types.h\"\n \n-typedef unsigned8 uint8;\n-typedef unsigned16 uint16;\n-typedef signed16 int16;\n-typedef unsigned32 uint32;\n-typedef signed32 int32;\n-typedef unsigned64 uint64;\n-typedef signed64 int64;\n-\n /* FIXME: D10V defines */\n-typedef uint16 reg_t;\n+typedef uint16_t reg_t;\n \n struct simops \n {\n@@ -222,9 +214,9 @@ enum\n \n struct d10v_memory\n {\n-  uint8 *insn[IMEM_SEGMENTS];\n-  uint8 *data[DMEM_SEGMENTS];\n-  uint8 *unif[UMEM_SEGMENTS];\n+  uint8_t *insn[IMEM_SEGMENTS];\n+  uint8_t *data[DMEM_SEGMENTS];\n+  uint8_t *unif[UMEM_SEGMENTS];\n };\n \n struct _state\n@@ -233,8 +225,8 @@ struct _state\n #define GPR(N) (State.regs[(N)] + 0)\n #define SET_GPR(N,VAL) SLOT_PEND (State.regs[(N)], (VAL))\n \n-#define GPR32(N) ((((uint32) State.regs[(N) + 0]) << 16) \\\n-\t\t  | (uint16) State.regs[(N) + 1])\n+#define GPR32(N) ((((uint32_t) State.regs[(N) + 0]) << 16) \\\n+\t\t  | (uint16_t) State.regs[(N) + 1])\n #define SET_GPR32(N,VAL) do { SET_GPR (OP[0] + 0, (VAL) >> 16); SET_GPR (OP[0] + 1, (VAL)); } while (0)\n \n   reg_t cregs[16];\t\t/* control registers */\n@@ -246,7 +238,7 @@ struct _state\n #define HELD_SP(N) (State.sp[(N)] + 0)\n #define SET_HELD_SP(N,VAL) SLOT_PEND (State.sp[(N)], (VAL))\n \n-  int64 a[2];\t\t\t/* accumulators */\n+  int64_t a[2];\t\t\t/* accumulators */\n #define ACC(N) (State.a[(N)] + 0)\n #define SET_ACC(N,VAL) SLOT_PEND (State.a[(N)], (VAL) & MASK40)\n \n@@ -256,10 +248,10 @@ struct _state\n \n   /* trace data */\n   struct {\n-    uint16 psw;\n+    uint16_t psw;\n   } trace;\n \n-  uint8 exe;\n+  uint8_t exe;\n   int\tpc_changed;\n \n   /* NOTE: everything below this line is not reset by\n@@ -274,7 +266,7 @@ struct _state\n extern struct _state State;\n \n \n-extern uint16 OP[4];\n+extern uint16_t OP[4];\n extern struct simops Simops[];\n \n enum\n@@ -441,8 +433,8 @@ do \\\n   } \\\n while (0)\n \n-extern uint8 *dmem_addr (SIM_DESC, SIM_CPU *, uint16 offset);\n-extern uint8 *imem_addr (SIM_DESC, SIM_CPU *, uint32);\n+extern uint8_t *dmem_addr (SIM_DESC, SIM_CPU *, uint16_t offset);\n+extern uint8_t *imem_addr (SIM_DESC, SIM_CPU *, uint32_t);\n \n #define\tRB(x)\t(*(dmem_addr (sd, cpu, x)))\n #define SB(addr,data)\t( RB(addr) = (data & 0xff))\n@@ -453,12 +445,12 @@ extern uint8 *imem_addr (SIM_DESC, SIM_CPU *, uint32);\n #undef ENDIAN_INLINE\n \n #else\n-extern uint32 get_longword (uint8 *);\n-extern uint16 get_word (uint8 *);\n-extern int64 get_longlong (uint8 *);\n-extern void write_word (uint8 *addr, uint16 data);\n-extern void write_longword (uint8 *addr, uint32 data);\n-extern void write_longlong (uint8 *addr, int64 data);\n+extern uint32_t get_longword (uint8_t *);\n+extern uint16_t get_word (uint8_t *);\n+extern int64_t get_longlong (uint8_t *);\n+extern void write_word (uint8_t *addr, uint16_t data);\n+extern void write_longword (uint8_t *addr, uint32_t data);\n+extern void write_longlong (uint8_t *addr, int64_t data);\n #endif\n \n #define SW(addr,data)\t\twrite_word (dmem_addr (sd, cpu, addr), data)"
    },
    {
      "sha": "f3e1e46214f74b6d89c22df48f1fa991e485c035",
      "filename": "sim/d10v/endian.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/endian.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/endian.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/d10v/endian.c?ref=eae126cb7e10fd2107f4457af929eda96447f728",
      "patch": "@@ -10,35 +10,35 @@\n #define ENDIAN_INLINE\n #endif\n \n-ENDIAN_INLINE uint16\n-get_word (uint8 *x)\n+ENDIAN_INLINE uint16_t\n+get_word (uint8_t *x)\n {\n-  return ((uint16)x[0]<<8) + x[1];\n+  return ((uint16_t)x[0]<<8) + x[1];\n }\n \n-ENDIAN_INLINE uint32\n-get_longword (uint8 *x)\n+ENDIAN_INLINE uint32_t\n+get_longword (uint8_t *x)\n {\n-  return ((uint32)x[0]<<24) + ((uint32)x[1]<<16) + ((uint32)x[2]<<8) + ((uint32)x[3]);\n+  return ((uint32_t)x[0]<<24) + ((uint32_t)x[1]<<16) + ((uint32_t)x[2]<<8) + ((uint32_t)x[3]);\n }\n \n-ENDIAN_INLINE int64\n-get_longlong (uint8 *x)\n+ENDIAN_INLINE int64_t\n+get_longlong (uint8_t *x)\n {\n-  uint32 top = get_longword (x);\n-  uint32 bottom = get_longword (x+4);\n-  return (((int64)top)<<32) | (int64)bottom;\n+  uint32_t top = get_longword (x);\n+  uint32_t bottom = get_longword (x+4);\n+  return (((int64_t)top)<<32) | (int64_t)bottom;\n }\n \n ENDIAN_INLINE void\n-write_word (uint8 *addr, uint16 data)\n+write_word (uint8_t *addr, uint16_t data)\n {\n   addr[0] = (data >> 8) & 0xff;\n   addr[1] = data & 0xff;\n }\n \n ENDIAN_INLINE void\n-write_longword (uint8 *addr, uint32 data)\n+write_longword (uint8_t *addr, uint32_t data)\n {\n   addr[0] = (data >> 24) & 0xff;\n   addr[1] = (data >> 16) & 0xff;\n@@ -47,8 +47,8 @@ write_longword (uint8 *addr, uint32 data)\n }\n \n ENDIAN_INLINE void\n-write_longlong (uint8 *addr, int64 data)\n+write_longlong (uint8_t *addr, int64_t data)\n {\n-  write_longword (addr, (uint32)(data >> 32));\n-  write_longword (addr+4, (uint32)data);\n+  write_longword (addr, (uint32_t)(data >> 32));\n+  write_longword (addr+4, (uint32_t)data);\n }"
    },
    {
      "sha": "5716a10583ea9dfeff1e49703a4c5a967eabbc41",
      "filename": "sim/d10v/interp.c",
      "status": "modified",
      "additions": 33,
      "deletions": 33,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/d10v/interp.c?ref=eae126cb7e10fd2107f4457af929eda96447f728",
      "patch": "@@ -32,23 +32,23 @@ int old_segment_mapping;\n \n unsigned long ins_type_counters[ (int)INS_MAX ];\n \n-uint16 OP[4];\n+uint16_t OP[4];\n \n static long hash (long insn, int format);\n-static struct hash_entry *lookup_hash (SIM_DESC, SIM_CPU *, uint32 ins, int size);\n-static void get_operands (struct simops *s, uint32 ins);\n-static void do_long (SIM_DESC, SIM_CPU *, uint32 ins);\n-static void do_2_short (SIM_DESC, SIM_CPU *, uint16 ins1, uint16 ins2, enum _leftright leftright);\n-static void do_parallel (SIM_DESC, SIM_CPU *, uint16 ins1, uint16 ins2);\n+static struct hash_entry *lookup_hash (SIM_DESC, SIM_CPU *, uint32_t ins, int size);\n+static void get_operands (struct simops *s, uint32_t ins);\n+static void do_long (SIM_DESC, SIM_CPU *, uint32_t ins);\n+static void do_2_short (SIM_DESC, SIM_CPU *, uint16_t ins1, uint16_t ins2, enum _leftright leftright);\n+static void do_parallel (SIM_DESC, SIM_CPU *, uint16_t ins1, uint16_t ins2);\n static char *add_commas (char *buf, int sizeof_buf, unsigned long value);\n-static INLINE uint8 *map_memory (SIM_DESC, SIM_CPU *, unsigned phys_addr);\n+static INLINE uint8_t *map_memory (SIM_DESC, SIM_CPU *, unsigned phys_addr);\n \n #define MAX_HASH  63\n struct hash_entry\n {\n   struct hash_entry *next;\n-  uint32 opcode;\n-  uint32 mask;\n+  uint32_t opcode;\n+  uint32_t mask;\n   int size;\n   struct simops *ops;\n };\n@@ -65,7 +65,7 @@ hash (long insn, int format)\n }\n \n INLINE static struct hash_entry *\n-lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint32 ins, int size)\n+lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint32_t ins, int size)\n {\n   struct hash_entry *h;\n \n@@ -84,10 +84,10 @@ lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint32 ins, int size)\n }\n \n INLINE static void\n-get_operands (struct simops *s, uint32 ins)\n+get_operands (struct simops *s, uint32_t ins)\n {\n   int i, shift, bits, flags;\n-  uint32 mask;\n+  uint32_t mask;\n   for (i=0; i < s->numops; i++)\n     {\n       shift = s->operands[3*i];\n@@ -102,7 +102,7 @@ get_operands (struct simops *s, uint32 ins)\n }\n \n static void\n-do_long (SIM_DESC sd, SIM_CPU *cpu, uint32 ins)\n+do_long (SIM_DESC sd, SIM_CPU *cpu, uint32_t ins)\n {\n   struct hash_entry *h;\n #ifdef DEBUG\n@@ -119,7 +119,7 @@ do_long (SIM_DESC sd, SIM_CPU *cpu, uint32 ins)\n }\n \n static void\n-do_2_short (SIM_DESC sd, SIM_CPU *cpu, uint16 ins1, uint16 ins2, enum _leftright leftright)\n+do_2_short (SIM_DESC sd, SIM_CPU *cpu, uint16_t ins1, uint16_t ins2, enum _leftright leftright)\n {\n   struct hash_entry *h;\n   enum _ins_type first, second;\n@@ -171,7 +171,7 @@ do_2_short (SIM_DESC sd, SIM_CPU *cpu, uint16 ins1, uint16 ins2, enum _leftright\n }\n \n static void\n-do_parallel (SIM_DESC sd, SIM_CPU *cpu, uint16 ins1, uint16 ins2)\n+do_parallel (SIM_DESC sd, SIM_CPU *cpu, uint16_t ins1, uint16_t ins2)\n {\n   struct hash_entry *h1, *h2;\n #ifdef DEBUG\n@@ -293,7 +293,7 @@ enum\n static void\n set_dmap_register (SIM_DESC sd, int reg_nr, unsigned long value)\n {\n-  uint8 *raw = map_memory (sd, NULL, SIM_D10V_MEMORY_DATA\n+  uint8_t *raw = map_memory (sd, NULL, SIM_D10V_MEMORY_DATA\n \t\t\t   + DMAP0_OFFSET + 2 * reg_nr);\n   WRITE_16 (raw, value);\n #ifdef DEBUG\n@@ -307,15 +307,15 @@ set_dmap_register (SIM_DESC sd, int reg_nr, unsigned long value)\n static unsigned long\n dmap_register (SIM_DESC sd, SIM_CPU *cpu, void *regcache, int reg_nr)\n {\n-  uint8 *raw = map_memory (sd, cpu, SIM_D10V_MEMORY_DATA\n+  uint8_t *raw = map_memory (sd, cpu, SIM_D10V_MEMORY_DATA\n \t\t\t   + DMAP0_OFFSET + 2 * reg_nr);\n   return READ_16 (raw);\n }\n \n static void\n set_imap_register (SIM_DESC sd, int reg_nr, unsigned long value)\n {\n-  uint8 *raw = map_memory (sd, NULL, SIM_D10V_MEMORY_DATA\n+  uint8_t *raw = map_memory (sd, NULL, SIM_D10V_MEMORY_DATA\n \t\t\t   + IMAP0_OFFSET + 2 * reg_nr);\n   WRITE_16 (raw, value);\n #ifdef DEBUG\n@@ -329,7 +329,7 @@ set_imap_register (SIM_DESC sd, int reg_nr, unsigned long value)\n static unsigned long\n imap_register (SIM_DESC sd, SIM_CPU *cpu, void *regcache, int reg_nr)\n {\n-  uint8 *raw = map_memory (sd, cpu, SIM_D10V_MEMORY_DATA\n+  uint8_t *raw = map_memory (sd, cpu, SIM_D10V_MEMORY_DATA\n \t\t\t   + IMAP0_OFFSET + 2 * reg_nr);\n   return READ_16 (raw);\n }\n@@ -597,11 +597,11 @@ sim_d10v_translate_addr (SIM_DESC sd,\n    is assumed that the client has already ensured that the access\n    isn't going to cross a segment boundary. */\n \n-uint8 *\n+uint8_t *\n map_memory (SIM_DESC sd, SIM_CPU *cpu, unsigned phys_addr)\n {\n-  uint8 **memory;\n-  uint8 *raw;\n+  uint8_t **memory;\n+  uint8_t *raw;\n   unsigned offset;\n   int segment = ((phys_addr >> 24) & 0xff);\n   \n@@ -669,7 +669,7 @@ xfer_mem (SIM_DESC sd,\n \t  int size,\n \t  int write_p)\n {\n-  uint8 *memory;\n+  uint8_t *memory;\n   unsigned long phys;\n   int phys_size;\n   phys_size = sim_d10v_translate_addr (sd, NULL, virt, size, &phys, NULL,\n@@ -866,16 +866,16 @@ sim_open (SIM_OPEN_KIND kind, host_callback *cb,\n   return sd;\n }\n \n-uint8 *\n-dmem_addr (SIM_DESC sd, SIM_CPU *cpu, uint16 offset)\n+uint8_t *\n+dmem_addr (SIM_DESC sd, SIM_CPU *cpu, uint16_t offset)\n {\n   unsigned long phys;\n-  uint8 *mem;\n+  uint8_t *mem;\n   int phys_size;\n \n   /* Note: DMEM address range is 0..0x10000. Calling code can compute\n      things like ``0xfffe + 0x0e60 == 0x10e5d''.  Since offset's type\n-     is uint16 this is modulo'ed onto 0x0e5d. */\n+     is uint16_t this is modulo'ed onto 0x0e5d. */\n \n   phys_size = sim_d10v_translate_dmap_addr (sd, cpu, offset, 1, &phys, NULL,\n \t\t\t\t\t    dmap_register);\n@@ -896,11 +896,11 @@ dmem_addr (SIM_DESC sd, SIM_CPU *cpu, uint16 offset)\n   return mem;\n }\n \n-uint8 *\n-imem_addr (SIM_DESC sd, SIM_CPU *cpu, uint32 offset)\n+uint8_t *\n+imem_addr (SIM_DESC sd, SIM_CPU *cpu, uint32_t offset)\n {\n   unsigned long phys;\n-  uint8 *mem;\n+  uint8_t *mem;\n   int phys_size = sim_d10v_translate_imap_addr (sd, cpu, offset, 1, &phys, NULL,\n \t\t\t\t\t\timap_register);\n   if (phys_size == 0)\n@@ -923,12 +923,12 @@ imem_addr (SIM_DESC sd, SIM_CPU *cpu, uint32 offset)\n static void\n step_once (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint32 inst;\n-  uint8 *iaddr;\n+  uint32_t inst;\n+  uint8_t *iaddr;\n \n   /* TODO: Unindent this block.  */\n     {\n-      iaddr = imem_addr (sd, cpu, (uint32)PC << 2);\n+      iaddr = imem_addr (sd, cpu, (uint32_t)PC << 2);\n  \n       inst = get_longword( iaddr ); \n  "
    },
    {
      "sha": "9883b3f55281aa598c74ef52c13bca2af950913f",
      "filename": "sim/d10v/simops.c",
      "status": "modified",
      "additions": 198,
      "deletions": 198,
      "changes": 396,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/simops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eae126cb7e10fd2107f4457af929eda96447f728/sim/d10v/simops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/d10v/simops.c?ref=eae126cb7e10fd2107f4457af929eda96447f728",
      "patch": "@@ -319,7 +319,7 @@ trace_input_func (SIM_DESC sd, const char *name, enum op_types in1, enum op_type\n \t  break;\n \n \tcase OP_MEMREF2:\n-\t  sprintf (p, \"%s@(%d,r%d)\", comma, (int16)OP[i], OP[i+1]);\n+\t  sprintf (p, \"%s@(%d,r%d)\", comma, (int16_t)OP[i], OP[i+1]);\n \t  p += strlen (p);\n \t  comma = \",\";\n \t  break;\n@@ -400,22 +400,22 @@ trace_input_func (SIM_DESC sd, const char *name, enum op_types in1, enum op_type\n \t    case OP_POSTINC:\n \t    case OP_PREDEC:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16) GPR (OP[i]));\n+\t\t\t\t\t\t (uint16_t) GPR (OP[i]));\n \t      break;\n \n \t    case OP_MEMREF3:\n-\t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\", (uint16) OP[i]);\n+\t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\", (uint16_t) OP[i]);\n \t      break;\n \n \t    case OP_DREG:\n-\t      tmp = (long)((((uint32) GPR (OP[i])) << 16) | ((uint32) GPR (OP[i] + 1)));\n+\t      tmp = (long)((((uint32_t) GPR (OP[i])) << 16) | ((uint32_t) GPR (OP[i] + 1)));\n \t      sim_io_printf (sd, \"%*s0x%.8lx\", SIZE_VALUES-10, \"\", tmp);\n \t      break;\n \n \t    case OP_CR:\n \t    case OP_CR_REVERSE:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16) CREG (OP[i]));\n+\t\t\t\t\t\t (uint16_t) CREG (OP[i]));\n \t      break;\n \n \t    case OP_ACCUM:\n@@ -427,22 +427,22 @@ trace_input_func (SIM_DESC sd, const char *name, enum op_types in1, enum op_type\n \n \t    case OP_CONSTANT16:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16)OP[i]);\n+\t\t\t\t\t\t (uint16_t)OP[i]);\n \t      break;\n \n \t    case OP_CONSTANT4:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16)SEXT4(OP[i]));\n+\t\t\t\t\t\t (uint16_t)SEXT4(OP[i]));\n \t      break;\n \n \t    case OP_CONSTANT8:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16)SEXT8(OP[i]));\n+\t\t\t\t\t\t (uint16_t)SEXT8(OP[i]));\n \t      break;\n \n \t    case OP_CONSTANT3:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16)SEXT3(OP[i]));\n+\t\t\t\t\t\t (uint16_t)SEXT3(OP[i]));\n \t      break;\n \n \t    case OP_FLAG:\n@@ -462,25 +462,25 @@ trace_input_func (SIM_DESC sd, const char *name, enum op_types in1, enum op_type\n \n \t    case OP_MEMREF2:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16)OP[i]);\n+\t\t\t\t\t\t (uint16_t)OP[i]);\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16)GPR (OP[i + 1]));\n+\t\t\t\t\t\t (uint16_t)GPR (OP[i + 1]));\n \t      i++;\n \t      break;\n \n \t    case OP_R0:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16) GPR (0));\n+\t\t\t\t\t\t (uint16_t) GPR (0));\n \t      break;\n \n \t    case OP_R1:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16) GPR (1));\n+\t\t\t\t\t\t (uint16_t) GPR (1));\n \t      break;\n \n \t    case OP_R2:\n \t      sim_io_printf (sd, \"%*s0x%.4x\", SIZE_VALUES-6, \"\",\n-\t\t\t\t\t\t (uint16) GPR (2));\n+\t\t\t\t\t\t (uint16_t) GPR (2));\n \t      break;\n \n \t    }\n@@ -508,7 +508,7 @@ do_trace_output_finish (SIM_DESC sd)\n }\n \n static void\n-trace_output_40 (SIM_DESC sd, uint64 val)\n+trace_output_40 (SIM_DESC sd, uint64_t val)\n {\n   if ((d10v_debug & (DEBUG_TRACE | DEBUG_VALUES)) == (DEBUG_TRACE | DEBUG_VALUES))\n     {\n@@ -523,7 +523,7 @@ trace_output_40 (SIM_DESC sd, uint64 val)\n }\n \n static void\n-trace_output_32 (SIM_DESC sd, uint32 val)\n+trace_output_32 (SIM_DESC sd, uint32_t val)\n {\n   if ((d10v_debug & (DEBUG_TRACE | DEBUG_VALUES)) == (DEBUG_TRACE | DEBUG_VALUES))\n     {\n@@ -537,7 +537,7 @@ trace_output_32 (SIM_DESC sd, uint32 val)\n }\n \n static void\n-trace_output_16 (SIM_DESC sd, uint16 val)\n+trace_output_16 (SIM_DESC sd, uint16_t val)\n {\n   if ((d10v_debug & (DEBUG_TRACE | DEBUG_VALUES)) == (DEBUG_TRACE | DEBUG_VALUES))\n     {\n@@ -585,7 +585,7 @@ trace_output_flag (SIM_DESC sd)\n void\n OP_4607 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"abs\", OP_REG, OP_VOID, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n   tmp = GPR(OP[0]);\n@@ -604,7 +604,7 @@ OP_4607 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5607 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"abs\", OP_ACCUM, OP_VOID, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n \n@@ -638,9 +638,9 @@ OP_5607 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 a = GPR (OP[0]);\n-  uint16 b = GPR (OP[1]);\n-  uint16 tmp = (a + b);\n+  uint16_t a = GPR (OP[0]);\n+  uint16_t b = GPR (OP[1]);\n+  uint16_t tmp = (a + b);\n   trace_input (\"add\", OP_REG, OP_REG, OP_VOID);\n   SET_PSW_C (a > tmp);\n   SET_GPR (OP[0], tmp);\n@@ -651,7 +651,7 @@ OP_200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   tmp = SEXT40(ACC (OP[0])) + (SEXT16 (GPR (OP[1])) << 16 | GPR (OP[1] + 1));\n \n   trace_input (\"add\", OP_ACCUM, OP_REG, OP_VOID);\n@@ -674,7 +674,7 @@ OP_1201 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1203 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   tmp = SEXT40(ACC (OP[0])) + SEXT40(ACC (OP[1]));\n \n   trace_input (\"add\", OP_ACCUM, OP_ACCUM, OP_VOID);\n@@ -697,9 +697,9 @@ OP_1203 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint32 tmp;\n-  uint32 a = (GPR (OP[0])) << 16 | GPR (OP[0] + 1);\n-  uint32 b = (GPR (OP[1])) << 16 | GPR (OP[1] + 1);\n+  uint32_t tmp;\n+  uint32_t a = (GPR (OP[0])) << 16 | GPR (OP[0] + 1);\n+  uint32_t b = (GPR (OP[1])) << 16 | GPR (OP[1] + 1);\n   trace_input (\"add2w\", OP_DREG, OP_DREG, OP_VOID);\n   tmp = a + b;\n   SET_PSW_C (tmp < a);\n@@ -712,9 +712,9 @@ OP_1200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 a = GPR (OP[1]);\n-  uint16 b = OP[2];\n-  uint16 tmp = (a + b);\n+  uint16_t a = GPR (OP[1]);\n+  uint16_t b = OP[2];\n+  uint16_t tmp = (a + b);\n   trace_input (\"add3\", OP_REG_OUTPUT, OP_REG, OP_CONSTANT16);\n   SET_PSW_C (tmp < a);\n   SET_GPR (OP[0], tmp);\n@@ -725,7 +725,7 @@ OP_1000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17000200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   tmp = SEXT40(ACC (OP[2])) + SEXT40 ((GPR (OP[1]) << 16) | GPR (OP[1] + 1));\n \n   trace_input (\"addac3\", OP_DREG_OUTPUT, OP_DREG, OP_ACCUM);\n@@ -738,7 +738,7 @@ OP_17000200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17000202 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   tmp = SEXT40(ACC (OP[1])) + SEXT40(ACC (OP[2]));\n \n   trace_input (\"addac3\", OP_DREG_OUTPUT, OP_ACCUM, OP_ACCUM);\n@@ -751,7 +751,7 @@ OP_17000202 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17001200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   SET_PSW_F1 (PSW_F0);\n \n   trace_input (\"addac3s\", OP_DREG_OUTPUT, OP_DREG, OP_ACCUM);\n@@ -779,7 +779,7 @@ OP_17001200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17001202 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   SET_PSW_F1 (PSW_F0);\n \n   trace_input (\"addac3s\", OP_DREG_OUTPUT, OP_ACCUM, OP_ACCUM);\n@@ -807,9 +807,9 @@ OP_17001202 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 a = GPR (OP[0]);\n-  uint16 b;\n-  uint16 tmp;\n+  uint16_t a = GPR (OP[0]);\n+  uint16_t b;\n+  uint16_t tmp;\n   if (OP[1] == 0)\n     OP[1] = 16;\n   b = OP[1];\n@@ -824,7 +824,7 @@ OP_201 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_C00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp = GPR (OP[0]) & GPR (OP[1]);\n+  uint16_t tmp = GPR (OP[0]) & GPR (OP[1]);\n   trace_input (\"and\", OP_REG, OP_REG, OP_VOID);\n   SET_GPR (OP[0], tmp);\n   trace_output_16 (sd, tmp);\n@@ -834,7 +834,7 @@ OP_C00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp = GPR (OP[1]) & OP[2];\n+  uint16_t tmp = GPR (OP[1]) & OP[2];\n   trace_input (\"and3\", OP_REG_OUTPUT, OP_REG, OP_CONSTANT16);\n   SET_GPR (OP[0], tmp);\n   trace_output_16 (sd, tmp);\n@@ -844,7 +844,7 @@ OP_6000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_C01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"bclri\", OP_REG, OP_CONSTANT16, OP_VOID);\n   tmp = (GPR (OP[0]) &~(0x8000 >> OP[1]));\n   SET_GPR (OP[0], tmp);\n@@ -875,7 +875,7 @@ OP_24800000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_A01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"bnoti\", OP_REG, OP_CONSTANT16, OP_VOID);\n   tmp = (GPR (OP[0]) ^ (0x8000 >> OP[1]));\n   SET_GPR (OP[0], tmp);\n@@ -944,7 +944,7 @@ OP_25800000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_801 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"bseti\", OP_REG, OP_CONSTANT16, OP_VOID);\n   tmp = (GPR (OP[0]) | (0x8000 >> OP[1]));\n   SET_GPR (OP[0], tmp);\n@@ -976,7 +976,7 @@ OP_600 (SIM_DESC sd, SIM_CPU *cpu)\n {\n   trace_input (\"cmp\", OP_REG, OP_REG, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n-  SET_PSW_F0 (((int16)(GPR (OP[0])) < (int16)(GPR (OP[1]))) ? 1 : 0);\n+  SET_PSW_F0 (((int16_t)(GPR (OP[0])) < (int16_t)(GPR (OP[1]))) ? 1 : 0);\n   trace_output_flag (sd);\n }\n \n@@ -1036,7 +1036,7 @@ OP_601 (SIM_DESC sd, SIM_CPU *cpu)\n {\n   trace_input (\"cmpi.s\", OP_REG, OP_CONSTANT4, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n-  SET_PSW_F0 (((int16)(GPR (OP[0])) < (int16)SEXT4(OP[1])) ? 1 : 0);  \n+  SET_PSW_F0 (((int16_t)(GPR (OP[0])) < (int16_t)SEXT4(OP[1])) ? 1 : 0);  \n   trace_output_flag (sd);\n }\n \n@@ -1046,7 +1046,7 @@ OP_3000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n   trace_input (\"cmpi.l\", OP_REG, OP_CONSTANT16, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n-  SET_PSW_F0 (((int16)(GPR (OP[0])) < (int16)(OP[1])) ? 1 : 0);  \n+  SET_PSW_F0 (((int16_t)(GPR (OP[0])) < (int16_t)(OP[1])) ? 1 : 0);  \n   trace_output_flag (sd);\n }\n \n@@ -1074,7 +1074,7 @@ OP_23000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4E09 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint8 val;\n+  uint8_t val;\n   \n   trace_input (\"cpfg\", OP_FLAG_OUTPUT, OP_FLAG, OP_VOID);\n   \n@@ -1096,7 +1096,7 @@ OP_4E09 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4E0F (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint8 val;\n+  uint8_t val;\n   \n   trace_input (\"cpfg\", OP_FLAG_OUTPUT, OP_FLAG, OP_VOID);\n   \n@@ -1147,19 +1147,19 @@ OP_5F20 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_14002800 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 foo, tmp, tmpf;\n-  uint16 hi;\n-  uint16 lo;\n+  uint16_t foo, tmp, tmpf;\n+  uint16_t hi;\n+  uint16_t lo;\n \n   trace_input (\"divs\", OP_DREG, OP_REG, OP_VOID);\n   foo = (GPR (OP[0]) << 1) | (GPR (OP[0] + 1) >> 15);\n-  tmp = (int16)foo - (int16)(GPR (OP[1]));\n+  tmp = (int16_t)foo - (int16_t)(GPR (OP[1]));\n   tmpf = (foo >= GPR (OP[1])) ? 1 : 0;\n   hi = ((tmpf == 1) ? tmp : foo);\n   lo = ((GPR (OP[0] + 1) << 1) | tmpf);\n   SET_GPR (OP[0] + 0, hi);\n   SET_GPR (OP[0] + 1, lo);\n-  trace_output_32 (sd, ((uint32) hi << 16) | lo);\n+  trace_output_32 (sd, ((uint32_t) hi << 16) | lo);\n }\n \n /* exef0f */\n@@ -1238,11 +1238,11 @@ OP_4E22 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_15002A00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint32 tmp, foo;\n+  uint32_t tmp, foo;\n   int i;\n \n   trace_input (\"exp\", OP_REG_OUTPUT, OP_DREG, OP_VOID);\n-  if (((int16)GPR (OP[1])) >= 0)\n+  if (((int16_t)GPR (OP[1])) >= 0)\n     tmp = (GPR (OP[1]) << 16) | GPR (OP[1] + 1);\n   else\n     tmp = ~((GPR (OP[1]) << 16) | GPR (OP[1] + 1));\n@@ -1266,7 +1266,7 @@ OP_15002A00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_15002A02 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp, foo;\n+  int64_t tmp, foo;\n   int i;\n \n   trace_input (\"exp\", OP_REG_OUTPUT, OP_ACCUM, OP_VOID);\n@@ -1315,8 +1315,8 @@ OP_4C00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_30000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp;\n-  uint16 addr = OP[1] + GPR (OP[2]);\n+  uint16_t tmp;\n+  uint16_t addr = OP[1] + GPR (OP[2]);\n   trace_input (\"ld\", OP_REG_OUTPUT, OP_MEMREF2, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1332,8 +1332,8 @@ OP_30000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6401 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp;\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t tmp;\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"ld\", OP_REG_OUTPUT, OP_POSTDEC, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1351,8 +1351,8 @@ OP_6401 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6001 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp;\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t tmp;\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"ld\", OP_REG_OUTPUT, OP_POSTINC, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1370,8 +1370,8 @@ OP_6001 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp;\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t tmp;\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"ld\", OP_REG_OUTPUT, OP_MEMREF, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1387,8 +1387,8 @@ OP_6000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_32010000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp;\n-  uint16 addr = OP[1];\n+  uint16_t tmp;\n+  uint16_t addr = OP[1];\n   trace_input (\"ld\", OP_REG_OUTPUT, OP_MEMREF3, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1404,8 +1404,8 @@ OP_32010000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_31000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int32 tmp;\n-  uint16 addr = OP[1] + GPR (OP[2]);\n+  int32_t tmp;\n+  uint16_t addr = OP[1] + GPR (OP[2]);\n   trace_input (\"ld2w\", OP_REG_OUTPUT, OP_MEMREF2, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1421,8 +1421,8 @@ OP_31000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6601 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n-  int32 tmp;\n+  uint16_t addr = GPR (OP[1]);\n+  int32_t tmp;\n   trace_input (\"ld2w\", OP_REG_OUTPUT, OP_POSTDEC, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1440,8 +1440,8 @@ OP_6601 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int32 tmp;\n-  uint16 addr = GPR (OP[1]);\n+  int32_t tmp;\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"ld2w\", OP_REG_OUTPUT, OP_POSTINC, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1459,8 +1459,8 @@ OP_6201 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n-  int32 tmp;\n+  uint16_t addr = GPR (OP[1]);\n+  int32_t tmp;\n   trace_input (\"ld2w\", OP_REG_OUTPUT, OP_MEMREF, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1476,8 +1476,8 @@ OP_6200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_33010000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int32 tmp;\n-  uint16 addr = OP[1];\n+  int32_t tmp;\n+  uint16_t addr = OP[1];\n   trace_input (\"ld2w\", OP_REG_OUTPUT, OP_MEMREF3, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -1493,7 +1493,7 @@ OP_33010000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_38000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"ldb\", OP_REG_OUTPUT, OP_MEMREF2, OP_VOID);\n   tmp = SEXT8 (RB (OP[1] + GPR (OP[2])));\n   SET_GPR (OP[0], tmp);\n@@ -1504,7 +1504,7 @@ OP_38000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_7000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"ldb\", OP_REG_OUTPUT, OP_MEMREF, OP_VOID);\n   tmp = SEXT8 (RB (GPR (OP[1])));\n   SET_GPR (OP[0], tmp);\n@@ -1515,7 +1515,7 @@ OP_7000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4001 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"ldi.s\", OP_REG_OUTPUT, OP_CONSTANT4, OP_VOID);\n   tmp = SEXT4 (OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -1526,7 +1526,7 @@ OP_4001 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_20000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"ldi.l\", OP_REG_OUTPUT, OP_CONSTANT16, OP_VOID);\n   tmp = OP[1];\n   SET_GPR (OP[0], tmp);\n@@ -1537,7 +1537,7 @@ OP_20000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_39000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"ldub\", OP_REG_OUTPUT, OP_MEMREF2, OP_VOID);\n   tmp = RB (OP[1] + GPR (OP[2]));\n   SET_GPR (OP[0], tmp);\n@@ -1548,7 +1548,7 @@ OP_39000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_7200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"ldub\", OP_REG_OUTPUT, OP_MEMREF, OP_VOID);\n   tmp = RB (GPR (OP[1]));\n   SET_GPR (OP[0], tmp);\n@@ -1559,10 +1559,10 @@ OP_7200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2A00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"mac\", OP_ACCUM, OP_REG, OP_REG);\n-  tmp = SEXT40 ((int16)(GPR (OP[1])) * (int16)(GPR (OP[2])));\n+  tmp = SEXT40 ((int16_t)(GPR (OP[1])) * (int16_t)(GPR (OP[2])));\n \n   if (PSW_FX)\n     tmp = SEXT40( (tmp << 1) & MASK40);\n@@ -1590,10 +1590,10 @@ OP_2A00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1A00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"macsu\", OP_ACCUM, OP_REG, OP_REG);\n-  tmp = SEXT40 ((int16) GPR (OP[1]) * GPR (OP[2]));\n+  tmp = SEXT40 ((int16_t) GPR (OP[1]) * GPR (OP[2]));\n   if (PSW_FX)\n     tmp = SEXT40 ((tmp << 1) & MASK40);\n   tmp = ((SEXT40 (ACC (OP[0])) + tmp) & MASK40);\n@@ -1605,13 +1605,13 @@ OP_1A00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3A00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint64 tmp;\n-  uint32 src1;\n-  uint32 src2;\n+  uint64_t tmp;\n+  uint32_t src1;\n+  uint32_t src2;\n \n   trace_input (\"macu\", OP_ACCUM, OP_REG, OP_REG);\n-  src1 = (uint16) GPR (OP[1]);\n-  src2 = (uint16) GPR (OP[2]);\n+  src1 = (uint16_t) GPR (OP[1]);\n+  src2 = (uint16_t) GPR (OP[2]);\n   tmp = src1 * src2;\n   if (PSW_FX)\n     tmp = (tmp << 1);\n@@ -1624,10 +1624,10 @@ OP_3A00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2600 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"max\", OP_REG, OP_REG, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n-  if ((int16) GPR (OP[1]) > (int16)GPR (OP[0]))\n+  if ((int16_t) GPR (OP[1]) > (int16_t)GPR (OP[0]))\n     {\n       tmp = GPR (OP[1]);\n       SET_PSW_F0 (1);\n@@ -1645,7 +1645,7 @@ OP_2600 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3600 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"max\", OP_ACCUM, OP_DREG, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n@@ -1668,7 +1668,7 @@ OP_3600 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3602 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"max\", OP_ACCUM, OP_ACCUM, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n   if (SEXT40 (ACC (OP[1])) > SEXT40 (ACC (OP[0])))\n@@ -1690,10 +1690,10 @@ OP_3602 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2601 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"min\", OP_REG, OP_REG, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n-  if ((int16)GPR (OP[1]) < (int16)GPR (OP[0]))\n+  if ((int16_t)GPR (OP[1]) < (int16_t)GPR (OP[0]))\n     {\n       tmp = GPR (OP[1]);\n       SET_PSW_F0 (1);\n@@ -1711,7 +1711,7 @@ OP_2601 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3601 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"min\", OP_ACCUM, OP_DREG, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n@@ -1734,7 +1734,7 @@ OP_3601 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3603 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"min\", OP_ACCUM, OP_ACCUM, OP_VOID);\n   SET_PSW_F1 (PSW_F0);\n   if (SEXT40(ACC (OP[1])) < SEXT40(ACC (OP[0])))\n@@ -1755,10 +1755,10 @@ OP_3603 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2800 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"msb\", OP_ACCUM, OP_REG, OP_REG);\n-  tmp = SEXT40 ((int16)(GPR (OP[1])) * (int16)(GPR (OP[2])));\n+  tmp = SEXT40 ((int16_t)(GPR (OP[1])) * (int16_t)(GPR (OP[2])));\n \n   if (PSW_FX)\n     tmp = SEXT40 ((tmp << 1) & MASK40);\n@@ -1788,10 +1788,10 @@ OP_2800 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1800 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"msbsu\", OP_ACCUM, OP_REG, OP_REG);\n-  tmp = SEXT40 ((int16)GPR (OP[1]) * GPR (OP[2]));\n+  tmp = SEXT40 ((int16_t)GPR (OP[1]) * GPR (OP[2]));\n   if (PSW_FX)\n     tmp = SEXT40( (tmp << 1) & MASK40);\n   tmp = ((SEXT40 (ACC (OP[0])) - tmp) & MASK40);\n@@ -1803,13 +1803,13 @@ OP_1800 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3800 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint64 tmp;\n-  uint32 src1;\n-  uint32 src2;\n+  uint64_t tmp;\n+  uint32_t src1;\n+  uint32_t src2;\n \n   trace_input (\"msbu\", OP_ACCUM, OP_REG, OP_REG);\n-  src1 = (uint16) GPR (OP[1]);\n-  src2 = (uint16) GPR (OP[2]);\n+  src1 = (uint16_t) GPR (OP[1]);\n+  src2 = (uint16_t) GPR (OP[2]);\n   tmp = src1 * src2;\n   if (PSW_FX)\n     tmp = (tmp << 1);\n@@ -1822,7 +1822,7 @@ OP_3800 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2E00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mul\", OP_REG, OP_REG, OP_VOID);\n   tmp = GPR (OP[0]) * GPR (OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -1833,10 +1833,10 @@ OP_2E00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2C00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"mulx\", OP_ACCUM_OUTPUT, OP_REG, OP_REG);\n-  tmp = SEXT40 ((int16)(GPR (OP[1])) * (int16)(GPR (OP[2])));\n+  tmp = SEXT40 ((int16_t)(GPR (OP[1])) * (int16_t)(GPR (OP[2])));\n \n   if (PSW_FX)\n     tmp = SEXT40 ((tmp << 1) & MASK40);\n@@ -1853,10 +1853,10 @@ OP_2C00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1C00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"mulxsu\", OP_ACCUM_OUTPUT, OP_REG, OP_REG);\n-  tmp = SEXT40 ((int16)(GPR (OP[1])) * GPR (OP[2]));\n+  tmp = SEXT40 ((int16_t)(GPR (OP[1])) * GPR (OP[2]));\n \n   if (PSW_FX)\n     tmp <<= 1;\n@@ -1869,13 +1869,13 @@ OP_1C00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3C00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint64 tmp;\n-  uint32 src1;\n-  uint32 src2;\n+  uint64_t tmp;\n+  uint32_t src1;\n+  uint32_t src2;\n \n   trace_input (\"mulxu\", OP_ACCUM_OUTPUT, OP_REG, OP_REG);\n-  src1 = (uint16) GPR (OP[1]);\n-  src2 = (uint16) GPR (OP[2]);\n+  src1 = (uint16_t) GPR (OP[1]);\n+  src2 = (uint16_t) GPR (OP[2]);\n   tmp = src1 * src2;\n   if (PSW_FX)\n     tmp <<= 1;\n@@ -1888,7 +1888,7 @@ OP_3C00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mv\", OP_REG_OUTPUT, OP_REG, OP_VOID);\n   tmp = GPR (OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -1899,7 +1899,7 @@ OP_4000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int32 tmp;\n+  int32_t tmp;\n   trace_input (\"mv2w\", OP_DREG_OUTPUT, OP_DREG, OP_VOID);\n   tmp = GPR32 (OP[1]);\n   SET_GPR32 (OP[0], tmp);\n@@ -1910,7 +1910,7 @@ OP_5000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3E00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int32 tmp;\n+  int32_t tmp;\n   trace_input (\"mv2wfac\", OP_DREG_OUTPUT, OP_ACCUM, OP_VOID);\n   tmp = ACC (OP[1]);\n   SET_GPR32 (OP[0], tmp);\n@@ -1921,7 +1921,7 @@ OP_3E00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3E01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"mv2wtac\", OP_DREG, OP_ACCUM_OUTPUT, OP_VOID);\n   tmp = ((SEXT16 (GPR (OP[0])) << 16 | GPR (OP[0] + 1)) & MASK40);\n   SET_ACC (OP[1], tmp);\n@@ -1932,7 +1932,7 @@ OP_3E01 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3E03 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"mvac\", OP_ACCUM_OUTPUT, OP_ACCUM, OP_VOID);\n   tmp = ACC (OP[1]);\n   SET_ACC (OP[0], tmp);\n@@ -1943,7 +1943,7 @@ OP_3E03 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5400 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvb\", OP_REG_OUTPUT, OP_REG, OP_VOID);\n   tmp = SEXT8 (GPR (OP[1]) & 0xff);\n   SET_GPR (OP[0], tmp);\n@@ -1954,7 +1954,7 @@ OP_5400 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4400 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvf0f\", OP_REG_OUTPUT, OP_REG, OP_VOID);\n   if (PSW_F0 == 0)\n     {\n@@ -1970,7 +1970,7 @@ OP_4400 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4401 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvf0t\", OP_REG_OUTPUT, OP_REG, OP_VOID);\n   if (PSW_F0)\n     {\n@@ -1986,7 +1986,7 @@ OP_4401 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1E04 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvfacg\", OP_REG_OUTPUT, OP_ACCUM, OP_VOID);\n   tmp = ((ACC (OP[1]) >> 32) & 0xff);\n   SET_GPR (OP[0], tmp);\n@@ -1997,7 +1997,7 @@ OP_1E04 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1E00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvfachi\", OP_REG_OUTPUT, OP_ACCUM, OP_VOID);\n   tmp = (ACC (OP[1]) >> 16);  \n   SET_GPR (OP[0], tmp);  \n@@ -2008,7 +2008,7 @@ OP_1E00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1E02 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvfaclo\", OP_REG_OUTPUT, OP_ACCUM, OP_VOID);\n   tmp = ACC (OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -2019,7 +2019,7 @@ OP_1E02 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvfc\", OP_REG_OUTPUT, OP_CR, OP_VOID);\n   tmp = CREG (OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -2030,10 +2030,10 @@ OP_5200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1E41 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"mvtacg\", OP_REG, OP_ACCUM, OP_VOID);\n   tmp = ((ACC (OP[1]) & MASK32)\n-\t | ((int64)(GPR (OP[0]) & 0xff) << 32));\n+\t | ((int64_t)(GPR (OP[0]) & 0xff) << 32));\n   SET_ACC (OP[1], tmp);\n   trace_output_40 (sd, tmp);\n }\n@@ -2042,7 +2042,7 @@ OP_1E41 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1E01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint64 tmp;\n+  uint64_t tmp;\n   trace_input (\"mvtachi\", OP_REG, OP_ACCUM, OP_VOID);\n   tmp = ACC (OP[1]) & 0xffff;\n   tmp = ((SEXT16 (GPR (OP[0])) << 16 | tmp) & MASK40);\n@@ -2054,7 +2054,7 @@ OP_1E01 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1E21 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"mvtaclo\", OP_REG, OP_ACCUM, OP_VOID);\n   tmp = ((SEXT16 (GPR (OP[0]))) & MASK40);\n   SET_ACC (OP[1], tmp);\n@@ -2065,7 +2065,7 @@ OP_1E21 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5600 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvtc\", OP_REG, OP_CR_OUTPUT, OP_VOID);\n   tmp = GPR (OP[0]);\n   tmp = SET_CREG (OP[1], tmp);\n@@ -2076,7 +2076,7 @@ OP_5600 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5401 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"mvub\", OP_REG_OUTPUT, OP_REG, OP_VOID);\n   tmp = (GPR (OP[1]) & 0xff);\n   SET_GPR (OP[0], tmp);\n@@ -2087,7 +2087,7 @@ OP_5401 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4605 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"neg\", OP_REG, OP_VOID, OP_VOID);\n   tmp = - GPR (OP[0]);\n   SET_GPR (OP[0], tmp);\n@@ -2098,7 +2098,7 @@ OP_4605 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5605 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"neg\", OP_ACCUM, OP_VOID, OP_VOID);\n   tmp = -SEXT40(ACC (OP[0]));\n@@ -2163,7 +2163,7 @@ OP_5E00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4603 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"not\", OP_REG, OP_VOID, OP_VOID);\n   tmp = ~GPR (OP[0]);  \n   SET_GPR (OP[0], tmp);  \n@@ -2174,7 +2174,7 @@ OP_4603 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_800 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"or\", OP_REG, OP_REG, OP_VOID);\n   tmp = (GPR (OP[0]) | GPR (OP[1]));\n   SET_GPR (OP[0], tmp);\n@@ -2185,7 +2185,7 @@ OP_800 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"or3\", OP_REG_OUTPUT, OP_REG, OP_CONSTANT16);\n   tmp = (GPR (OP[1]) | OP[2]);\n   SET_GPR (OP[0], tmp);\n@@ -2196,7 +2196,7 @@ OP_4000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   int shift = SEXT3 (OP[2]);\n \n   trace_input (\"rac\", OP_DREG_OUTPUT, OP_ACCUM, OP_CONSTANT3);\n@@ -2238,7 +2238,7 @@ OP_5201 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  signed64 tmp;\n+  int64_t tmp;\n   int shift = SEXT3 (OP[2]);\n \n   trace_input (\"rachi\", OP_REG_OUTPUT, OP_ACCUM, OP_CONSTANT3);\n@@ -2335,7 +2335,7 @@ OP_5F40 (SIM_DESC sd, SIM_CPU *cpu)\n /* sac */\n void OP_5209 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"sac\", OP_REG_OUTPUT, OP_ACCUM, OP_VOID);\n \n@@ -2368,7 +2368,7 @@ void OP_5209 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4209 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"sachi\", OP_REG_OUTPUT, OP_ACCUM, OP_VOID);\n \n@@ -2401,7 +2401,7 @@ OP_4209 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1223 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"sadd\", OP_ACCUM, OP_ACCUM, OP_VOID);\n   tmp = SEXT40(ACC (OP[0])) + (SEXT40(ACC (OP[1])) >> 16);\n@@ -2424,7 +2424,7 @@ OP_1223 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4611 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"setf0f\", OP_REG_OUTPUT, OP_VOID, OP_VOID);\n   tmp = ((PSW_F0 == 0) ? 1 : 0);\n   SET_GPR (OP[0], tmp);\n@@ -2435,7 +2435,7 @@ OP_4611 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4613 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"setf0t\", OP_REG_OUTPUT, OP_VOID, OP_VOID);\n   tmp = ((PSW_F0 == 1) ? 1 : 0);\n   SET_GPR (OP[0], tmp);\n@@ -2446,8 +2446,8 @@ OP_4613 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3220 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n-  int16 reg;\n+  int64_t tmp;\n+  int16_t reg;\n \n   trace_input (\"slae\", OP_ACCUM, OP_REG, OP_VOID);\n \n@@ -2505,7 +2505,7 @@ OP_5FC0 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"sll\", OP_REG, OP_REG, OP_VOID);\n   tmp = (GPR (OP[0]) << (GPR (OP[1]) & 0xf));\n   SET_GPR (OP[0], tmp);\n@@ -2516,7 +2516,7 @@ OP_2200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3200 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   trace_input (\"sll\", OP_ACCUM, OP_REG, OP_VOID);\n   if ((GPR (OP[1]) & 31) <= 16)\n     tmp = SEXT40 (ACC (OP[0])) << (GPR (OP[1]) & 31);\n@@ -2545,7 +2545,7 @@ OP_3200 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"slli\", OP_REG, OP_CONSTANT16, OP_VOID);\n   tmp = (GPR (OP[0]) << OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -2556,7 +2556,7 @@ OP_2201 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3201 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   if (OP[1] == 0)\n     OP[1] = 16;\n@@ -2583,7 +2583,7 @@ OP_3201 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_460B (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"slx\", OP_REG, OP_VOID, OP_VOID);\n   tmp = ((GPR (OP[0]) << 1) | PSW_F0);\n   SET_GPR (OP[0], tmp);\n@@ -2594,9 +2594,9 @@ OP_460B (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2400 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"sra\", OP_REG, OP_REG, OP_VOID);\n-  tmp = (((int16)(GPR (OP[0]))) >> (GPR (OP[1]) & 0xf));\n+  tmp = (((int16_t)(GPR (OP[0]))) >> (GPR (OP[1]) & 0xf));\n   SET_GPR (OP[0], tmp);\n   trace_output_16 (sd, tmp);\n }\n@@ -2608,7 +2608,7 @@ OP_3400 (SIM_DESC sd, SIM_CPU *cpu)\n   trace_input (\"sra\", OP_ACCUM, OP_REG, OP_VOID);\n   if ((GPR (OP[1]) & 31) <= 16)\n     {\n-      int64 tmp = ((SEXT40(ACC (OP[0])) >> (GPR (OP[1]) & 31)) & MASK40);\n+      int64_t tmp = ((SEXT40(ACC (OP[0])) >> (GPR (OP[1]) & 31)) & MASK40);\n       SET_ACC (OP[0], tmp);\n       trace_output_40 (sd, tmp);\n     }\n@@ -2623,9 +2623,9 @@ OP_3400 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2401 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"srai\", OP_REG, OP_CONSTANT16, OP_VOID);\n-  tmp = (((int16)(GPR (OP[0]))) >> OP[1]);\n+  tmp = (((int16_t)(GPR (OP[0]))) >> OP[1]);\n   SET_GPR (OP[0], tmp);\n   trace_output_16 (sd, tmp);\n }\n@@ -2634,7 +2634,7 @@ OP_2401 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3401 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   if (OP[1] == 0)\n     OP[1] = 16;\n \n@@ -2648,7 +2648,7 @@ OP_3401 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"srl\", OP_REG, OP_REG, OP_VOID);\n   tmp = (GPR (OP[0]) >>  (GPR (OP[1]) & 0xf));\n   SET_GPR (OP[0], tmp);\n@@ -2662,7 +2662,7 @@ OP_3000 (SIM_DESC sd, SIM_CPU *cpu)\n   trace_input (\"srl\", OP_ACCUM, OP_REG, OP_VOID);\n   if ((GPR (OP[1]) & 31) <= 16)\n     {\n-      int64 tmp = ((uint64)((ACC (OP[0]) & MASK40) >> (GPR (OP[1]) & 31)));\n+      int64_t tmp = ((uint64_t)((ACC (OP[0]) & MASK40) >> (GPR (OP[1]) & 31)));\n       SET_ACC (OP[0], tmp);\n       trace_output_40 (sd, tmp);\n     }\n@@ -2678,7 +2678,7 @@ OP_3000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_2001 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"srli\", OP_REG, OP_CONSTANT16, OP_VOID);\n   tmp = (GPR (OP[0]) >> OP[1]);\n   SET_GPR (OP[0], tmp);\n@@ -2689,12 +2689,12 @@ OP_2001 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_3001 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n   if (OP[1] == 0)\n     OP[1] = 16;\n \n   trace_input (\"srli\", OP_ACCUM, OP_CONSTANT16, OP_VOID);\n-  tmp = ((uint64)(ACC (OP[0]) & MASK40) >> OP[1]);\n+  tmp = ((uint64_t)(ACC (OP[0]) & MASK40) >> OP[1]);\n   SET_ACC (OP[0], tmp);\n   trace_output_40 (sd, tmp);\n }\n@@ -2703,7 +2703,7 @@ OP_3001 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_4609 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 tmp;\n+  uint16_t tmp;\n   trace_input (\"srx\", OP_REG, OP_VOID, OP_VOID);\n   tmp = PSW_F0 << 15;\n   tmp = ((GPR (OP[0]) >> 1) | tmp);\n@@ -2715,7 +2715,7 @@ OP_4609 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_34000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = OP[1] + GPR (OP[2]);\n+  uint16_t addr = OP[1] + GPR (OP[2]);\n   trace_input (\"st\", OP_REG, OP_MEMREF2, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2730,7 +2730,7 @@ OP_34000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6800 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"st\", OP_REG, OP_MEMREF, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2746,7 +2746,7 @@ OP_6800 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6C1F (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]) - 2;\n+  uint16_t addr = GPR (OP[1]) - 2;\n   trace_input (\"st\", OP_REG, OP_PREDEC, OP_VOID);\n   if (OP[1] != 15)\n     {\n@@ -2767,7 +2767,7 @@ OP_6C1F (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6801 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"st\", OP_REG, OP_POSTINC, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2783,7 +2783,7 @@ OP_6801 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6C01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"st\", OP_REG, OP_POSTDEC, OP_VOID);\n   if ( OP[1] == 15 )\n     {\n@@ -2804,7 +2804,7 @@ OP_6C01 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_36010000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = OP[1];\n+  uint16_t addr = OP[1];\n   trace_input (\"st\", OP_REG, OP_MEMREF3, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2819,7 +2819,7 @@ OP_36010000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_35000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[2])+ OP[1];\n+  uint16_t addr = GPR (OP[2])+ OP[1];\n   trace_input (\"st2w\", OP_DREG, OP_MEMREF2, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2835,7 +2835,7 @@ OP_35000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6A00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"st2w\", OP_DREG, OP_MEMREF, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2851,7 +2851,7 @@ OP_6A00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6E1F (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]) - 4;\n+  uint16_t addr = GPR (OP[1]) - 4;\n   trace_input (\"st2w\", OP_DREG, OP_PREDEC, OP_VOID);\n   if ( OP[1] != 15 )\n     {\n@@ -2873,7 +2873,7 @@ OP_6E1F (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6A01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"st2w\", OP_DREG, OP_POSTINC, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2890,7 +2890,7 @@ OP_6A01 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_6E01 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = GPR (OP[1]);\n+  uint16_t addr = GPR (OP[1]);\n   trace_input (\"st2w\", OP_DREG, OP_POSTDEC, OP_VOID);\n   if ( OP[1] == 15 )\n     {\n@@ -2912,7 +2912,7 @@ OP_6E01 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_37010000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 addr = OP[1];\n+  uint16_t addr = OP[1];\n   trace_input (\"st2w\", OP_DREG, OP_MEMREF3, OP_VOID);\n   if ((addr & 1))\n     {\n@@ -2955,9 +2955,9 @@ OP_5FE0 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_0 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint16 a = GPR (OP[0]);\n-  uint16 b = GPR (OP[1]);\n-  uint16 tmp = (a - b);\n+  uint16_t a = GPR (OP[0]);\n+  uint16_t b = GPR (OP[1]);\n+  uint16_t tmp = (a - b);\n   trace_input (\"sub\", OP_REG, OP_REG, OP_VOID);\n   /* see ../common/sim-alu.h for a more extensive discussion on how to\n      compute the carry/overflow bits. */\n@@ -2970,7 +2970,7 @@ OP_0 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1001 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"sub\", OP_ACCUM, OP_DREG, OP_VOID);\n   tmp = SEXT40(ACC (OP[0])) - (SEXT16 (GPR (OP[1])) << 16 | GPR (OP[1] + 1));\n@@ -2995,7 +2995,7 @@ OP_1001 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1003 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"sub\", OP_ACCUM, OP_ACCUM, OP_VOID);\n   tmp = SEXT40(ACC (OP[0])) - SEXT40(ACC (OP[1]));\n@@ -3019,11 +3019,11 @@ OP_1003 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_1000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint32 tmp, a, b;\n+  uint32_t tmp, a, b;\n \n   trace_input (\"sub2w\", OP_DREG, OP_DREG, OP_VOID);\n-  a = (uint32)((GPR (OP[0]) << 16) | GPR (OP[0] + 1));\n-  b = (uint32)((GPR (OP[1]) << 16) | GPR (OP[1] + 1));\n+  a = (uint32_t)((GPR (OP[0]) << 16) | GPR (OP[0] + 1));\n+  b = (uint32_t)((GPR (OP[1]) << 16) | GPR (OP[1] + 1));\n   /* see ../common/sim-alu.h for a more extensive discussion on how to\n      compute the carry/overflow bits */\n   tmp = a - b;\n@@ -3036,7 +3036,7 @@ OP_1000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"subac3\", OP_DREG_OUTPUT, OP_DREG, OP_ACCUM);\n   tmp = SEXT40 ((GPR (OP[1]) << 16) | GPR (OP[1] + 1)) - SEXT40 (ACC (OP[2]));\n@@ -3048,7 +3048,7 @@ OP_17000000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17000002 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"subac3\", OP_DREG_OUTPUT, OP_ACCUM, OP_ACCUM);\n   tmp = SEXT40 (ACC (OP[1])) - SEXT40(ACC (OP[2]));\n@@ -3060,7 +3060,7 @@ OP_17000002 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17001000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"subac3s\", OP_DREG_OUTPUT, OP_DREG, OP_ACCUM);\n   SET_PSW_F1 (PSW_F0);\n@@ -3087,7 +3087,7 @@ OP_17001000 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_17001002 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int64 tmp;\n+  int64_t tmp;\n \n   trace_input (\"subac3s\", OP_DREG_OUTPUT, OP_ACCUM, OP_ACCUM);\n   SET_PSW_F1 (PSW_F0);\n@@ -3122,8 +3122,8 @@ OP_1 (SIM_DESC sd, SIM_CPU *cpu)\n   /* see ../common/sim-alu.h for a more extensive discussion on how to\n      compute the carry/overflow bits. */\n   /* since OP[1] is never <= 0, -OP[1] == ~OP[1]+1 can never overflow */\n-  tmp = ((unsigned)(unsigned16) GPR (OP[0])\n-\t + (unsigned)(unsigned16) ( - OP[1]));\n+  tmp = ((unsigned)(uint16_t) GPR (OP[0])\n+\t + (unsigned)(uint16_t) ( - OP[1]));\n   SET_PSW_C (tmp >= (1 << 16));\n   SET_GPR (OP[0], tmp);\n   trace_output_16 (sd, tmp);\n@@ -3143,7 +3143,7 @@ OP_5F00 (SIM_DESC sd, SIM_CPU *cpu)\n     default:\n #if (DEBUG & DEBUG_TRAP) == 0\n       {\n-\tuint16 vec = OP[0] + TRAP_VECTOR_START;\n+\tuint16_t vec = OP[0] + TRAP_VECTOR_START;\n \tSET_BPC (PC + 1);\n \tSET_BPSW (PSW);\n \tSET_PSW (PSW & PSW_SM_BIT);\n@@ -3183,7 +3183,7 @@ OP_5F00 (SIM_DESC sd, SIM_CPU *cpu)\n     case 15:\t\t\t/* new system call trap */\n       /* Trap 15 is used for simulating low-level I/O */\n       {\n-\tunsigned32 result = 0;\n+\tuint32_t result = 0;\n \terrno = 0;\n \n /* Registers passed to trap 0 */\n@@ -3370,7 +3370,7 @@ OP_5F00 (SIM_DESC sd, SIM_CPU *cpu)\n \t      buf = PARM1;\n \t      RETVAL (pipe (host_fd));\n \t      SW (buf, host_fd[0]);\n-\t      buf += sizeof(uint16);\n+\t      buf += sizeof(uint16_t);\n \t      SW (buf, host_fd[1]);\n \t      trace_output_16 (sd, result);\n \t    }\n@@ -3506,7 +3506,7 @@ OP_5F00 (SIM_DESC sd, SIM_CPU *cpu)\n \t  default:\n \t    cb->error (cb, \"Unknown syscall %d\", FUNC);\n \t  }\n-\tif ((uint16) result == (uint16) -1)\n+\tif ((uint16_t) result == (uint16_t) -1)\n \t  RETERR (cb->get_errno (cb));\n \telse\n \t  RETERR (0);\n@@ -3548,7 +3548,7 @@ OP_5F80 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_A00 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"xor\", OP_REG, OP_REG, OP_VOID);\n   tmp = (GPR (OP[0]) ^ GPR (OP[1]));\n   SET_GPR (OP[0], tmp);\n@@ -3559,7 +3559,7 @@ OP_A00 (SIM_DESC sd, SIM_CPU *cpu)\n void\n OP_5000000 (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  int16 tmp;\n+  int16_t tmp;\n   trace_input (\"xor3\", OP_REG_OUTPUT, OP_REG, OP_CONSTANT16);\n   tmp = (GPR (OP[1]) ^ OP[2]);\n   SET_GPR (OP[0], tmp);"
    }
  ]
}