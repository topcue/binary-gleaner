{
  "sha": "7124770976d3f051532faf864013b76ab36249bf",
  "node_id": "C_kwDOANOeidoAKDcxMjQ3NzA5NzZkM2YwNTE1MzJmYWY4NjQwMTNiNzZhYjM2MjQ5YmY",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2022-02-24T19:15:19Z"
    },
    "message": "Revert \"do_target_wait_1: Clear TARGET_WNOHANG if the target isn't async.\"\n\nCommit 14b3360508b1 (\"do_target_wait_1: Clear\nTARGET_WNOHANG if the target isn't async.\") broke some multi-target\ntests, such as gdb.multi/multi-target-info-inferiors.exp.  The symptom\nis that execution just hangs at some point.  What happens is:\n\n1. One remote inferior is started, and now sits stopped at a breakpoint.\n   It is not \"async\" at this point (but it \"can async\").\n\n2. We run a native inferior, the event loop gets woken up by the native\n   target's fd.\n\n3. In do_target_wait, we randomly choose an inferior to call target_wait\n   on first, it happens to be the remote inferior.\n\n4. Because the target is currently not \"async\", we clear\n   TARGET_WNOHANG, resulting in synchronous wait.  We therefore block\n   here:\n\n  #0  0x00007fe9540dbb4d in select () from /usr/lib/libc.so.6\n  #1  0x000055fc7e821da7 in gdb_select (n=15, readfds=0x7ffdb77c1fb0, writefds=0x0, exceptfds=0x7ffdb77c2050, timeout=0x7ffdb77c1f90) at /home/simark/src/binutils-gdb/gdb/posix-hdep.c:31\n  #2  0x000055fc7ddef905 in interruptible_select (n=15, readfds=0x7ffdb77c1fb0, writefds=0x0, exceptfds=0x7ffdb77c2050, timeout=0x7ffdb77c1f90) at /home/simark/src/binutils-gdb/gdb/event-top.c:1134\n  #3  0x000055fc7eda58e4 in ser_base_wait_for (scb=0x6250002e4100, timeout=1) at /home/simark/src/binutils-gdb/gdb/ser-base.c:240\n  #4  0x000055fc7eda66ba in do_ser_base_readchar (scb=0x6250002e4100, timeout=-1) at /home/simark/src/binutils-gdb/gdb/ser-base.c:365\n  #5  0x000055fc7eda6ff6 in generic_readchar (scb=0x6250002e4100, timeout=-1, do_readchar=0x55fc7eda663c <do_ser_base_readchar(serial*, int)>) at /home/simark/src/binutils-gdb/gdb/ser-base.c:444\n  #6  0x000055fc7eda718a in ser_base_readchar (scb=0x6250002e4100, timeout=-1) at /home/simark/src/binutils-gdb/gdb/ser-base.c:471\n  #7  0x000055fc7edb1ecd in serial_readchar (scb=0x6250002e4100, timeout=-1) at /home/simark/src/binutils-gdb/gdb/serial.c:393\n  #8  0x000055fc7ec48b8f in remote_target::readchar (this=0x617000038780, timeout=-1) at /home/simark/src/binutils-gdb/gdb/remote.c:9446\n  #9  0x000055fc7ec4da82 in remote_target::getpkt_or_notif_sane_1 (this=0x617000038780, buf=0x6170000387a8, forever=1, expecting_notif=1, is_notif=0x7ffdb77c24f0) at /home/simark/src/binutils-gdb/gdb/remote.c:9928\n  #10 0x000055fc7ec4f045 in remote_target::getpkt_or_notif_sane (this=0x617000038780, buf=0x6170000387a8, forever=1, is_notif=0x7ffdb77c24f0) at /home/simark/src/binutils-gdb/gdb/remote.c:10037\n  #11 0x000055fc7ec354d4 in remote_target::wait_ns (this=0x617000038780, ptid=..., status=0x7ffdb77c33c8, options=...) at /home/simark/src/binutils-gdb/gdb/remote.c:8147\n  #12 0x000055fc7ec38aa1 in remote_target::wait (this=0x617000038780, ptid=..., status=0x7ffdb77c33c8, options=...) at /home/simark/src/binutils-gdb/gdb/remote.c:8337\n  #13 0x000055fc7f1409ce in target_wait (ptid=..., status=0x7ffdb77c33c8, options=...) at /home/simark/src/binutils-gdb/gdb/target.c:2612\n  #14 0x000055fc7e19da98 in do_target_wait_1 (inf=0x617000038080, ptid=..., status=0x7ffdb77c33c8, options=...) at /home/simark/src/binutils-gdb/gdb/infrun.c:3636\n  #15 0x000055fc7e19e26b in operator() (__closure=0x7ffdb77c2f90, inf=0x617000038080) at /home/simark/src/binutils-gdb/gdb/infrun.c:3697\n  #16 0x000055fc7e19f0c4 in do_target_wait (ecs=0x7ffdb77c33a0, options=...) at /home/simark/src/binutils-gdb/gdb/infrun.c:3716\n  #17 0x000055fc7e1a31f7 in fetch_inferior_event () at /home/simark/src/binutils-gdb/gdb/infrun.c:4061\n\nBefore the aforementioned commit, we would not have cleared\nTARGET_WNOHANG, the remote target's wait would have returned nothing,\nand we would have consumed the native target's event.\n\nAfter applying this revert, the testsuite state looks as good as before\nfor me on Ubuntu 20.04 amd64.\n\nChange-Id: Ic17a1642935cabcc16c25cb6899d52e12c2f5c3f",
    "tree": {
      "sha": "1141fafab41ab4ce80c778ffc44ddb9064548a67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1141fafab41ab4ce80c778ffc44ddb9064548a67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7124770976d3f051532faf864013b76ab36249bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7124770976d3f051532faf864013b76ab36249bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7124770976d3f051532faf864013b76ab36249bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7124770976d3f051532faf864013b76ab36249bf/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dd1ae8eaa369ac5c7df7e55c929b42ac8ac44526",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd1ae8eaa369ac5c7df7e55c929b42ac8ac44526",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dd1ae8eaa369ac5c7df7e55c929b42ac8ac44526"
    }
  ],
  "stats": {
    "total": 2,
    "additions": 1,
    "deletions": 1
  },
  "files": [
    {
      "sha": "5311822fcb847f596ca6b29908c577723632066e",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7124770976d3f051532faf864013b76ab36249bf/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7124770976d3f051532faf864013b76ab36249bf/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=7124770976d3f051532faf864013b76ab36249bf",
      "patch": "@@ -3627,7 +3627,7 @@ do_target_wait_1 (inferior *inf, ptid_t ptid,\n \n   /* We can't ask a non-async target to do a non-blocking wait, so this will be\n      a blocking wait.  */\n-  if (!target_is_async_p ())\n+  if (!target_can_async_p ())\n     options &= ~TARGET_WNOHANG;\n \n   if (deprecated_target_wait_hook)"
    }
  ]
}