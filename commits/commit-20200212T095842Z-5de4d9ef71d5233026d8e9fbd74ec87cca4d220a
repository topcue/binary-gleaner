{
  "sha": "5de4d9ef71d5233026d8e9fbd74ec87cca4d220a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWRlNGQ5ZWY3MWQ1MjMzMDI2ZDhlOWZiZDc0ZWM4N2NjYTRkMjIwYQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-02-12T09:58:42Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-02-12T09:58:42Z"
    },
    "message": "x86/Intel: improve diagnostics\n\nThe diagnostics issued by check_*_reg() are pretty AT&T-centric. Re-use\nlogic already used for SIMD memory operand size checking also for ones\nwhere GPRs would alternatively also be allowed. (There's certainly room\nfor further improvement here.)",
    "tree": {
      "sha": "83593eaa92cfb17680eb06e0d6042d204e2ee232",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/83593eaa92cfb17680eb06e0d6042d204e2ee232"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f056b22b92a0e95582f47591e0c327c642dfd80f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f056b22b92a0e95582f47591e0c327c642dfd80f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f056b22b92a0e95582f47591e0c327c642dfd80f"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 11,
    "deletions": 4
  },
  "files": [
    {
      "sha": "11b20f787313f124905ba6d195c7a4b268e0e66c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5de4d9ef71d5233026d8e9fbd74ec87cca4d220a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-12  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (operand_type_register_match): Also fall\n+\tthrough initial two if()-s when the template allows for a GPR\n+\toperand. Adjust comment.\n+\n 2020-02-11  Jan Beulich  <jbeulich@suse.com>\n \n \t(struct _i386_insn): New field \"short_form\"."
    },
    {
      "sha": "1cb5a27ebf257dfcf0c78b4af9c276b5b2c9c8db",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5de4d9ef71d5233026d8e9fbd74ec87cca4d220a/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=5de4d9ef71d5233026d8e9fbd74ec87cca4d220a",
      "patch": "@@ -2248,8 +2248,7 @@ operand_type_match (i386_operand_type overlap,\n \n /* If given types g0 and g1 are registers they must be of the same type\n    unless the expected operand type register overlap is null.\n-   Memory operand size of certain SIMD instructions is also being checked\n-   here.  */\n+   Some Intel syntax memory operand size checking also happens here.  */\n \n static INLINE int\n operand_type_register_match (i386_operand_type g0,\n@@ -2261,14 +2260,16 @@ operand_type_register_match (i386_operand_type g0,\n       && g0.bitfield.class != RegSIMD\n       && (!operand_type_check (g0, anymem)\n \t  || g0.bitfield.unspecified\n-\t  || t0.bitfield.class != RegSIMD))\n+\t  || (t0.bitfield.class != Reg\n+\t      && t0.bitfield.class != RegSIMD)))\n     return 1;\n \n   if (g1.bitfield.class != Reg\n       && g1.bitfield.class != RegSIMD\n       && (!operand_type_check (g1, anymem)\n \t  || g1.bitfield.unspecified\n-\t  || t1.bitfield.class != RegSIMD))\n+\t  || (t1.bitfield.class != Reg\n+\t      && t1.bitfield.class != RegSIMD)))\n     return 1;\n \n   if (g0.bitfield.byte == g1.bitfield.byte"
    }
  ]
}