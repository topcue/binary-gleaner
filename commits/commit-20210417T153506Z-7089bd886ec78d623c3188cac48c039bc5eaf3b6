{
  "sha": "7089bd886ec78d623c3188cac48c039bc5eaf3b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzA4OWJkODg2ZWM3OGQ2MjNjMzE4OGNhYzQ4YzAzOWJjNWVhZjNiNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:06Z"
    },
    "message": "Remove quick_symbol_functions::expand_symtabs_for_function\n\nThis removes quick_symbol_functions::expand_symtabs_for_function,\nreplacing it with a call to expand_symtabs_matching.  As with the\nprevious patches, the implementation is consolidated in the objfile\nmethod.\n\ngdb/ChangeLog\n2021-04-17  Tom Tromey  <tom@tromey.com>\n\n\t* symfile-debug.c (objfile::expand_symtabs_for_function):\n\tRewrite.\n\t* quick-symbol.h (struct quick_symbol_functions)\n\t<expand_symtabs_for_function>: Remove.\n\t* psymtab.c (psymbol_functions::expand_symtabs_for_function):\n\tRemove.\n\t* psympriv.h (struct psymbol_functions)\n\t<expand_symtabs_for_function>: Remove.\n\t* objfiles.h (struct objfile) <expand_symtabs_for_function>:\n\tUpdate comment.\n\t* dwarf2/read.c (struct dwarf2_gdb_index)\n\t<expand_symtabs_for_function>: Remove.\n\t(struct dwarf2_debug_names_index) <expand_symtabs_for_function>:\n\tRemove.\n\t(find_slot_in_mapped_hash): Remove.\n\t(dw2_symtab_iter_init_common): Merge with dw2_symtab_iter_init.\n\t(dw2_symtab_iter_init): Remove one overload.\n\t(dwarf2_gdb_index::expand_symtabs_for_function)\n\t(dwarf2_debug_names_index::expand_symtabs_for_function): Remove.",
    "tree": {
      "sha": "30a968c0059567e8b15a36a2f9459883aebd6a95",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30a968c0059567e8b15a36a2f9459883aebd6a95"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7089bd886ec78d623c3188cac48c039bc5eaf3b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7089bd886ec78d623c3188cac48c039bc5eaf3b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7089bd886ec78d623c3188cac48c039bc5eaf3b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7089bd886ec78d623c3188cac48c039bc5eaf3b6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/536a40f3a8d2c18aae18a9137b838ff2accdfc08"
    }
  ],
  "stats": {
    "total": 217,
    "additions": 41,
    "deletions": 176
  },
  "files": [
    {
      "sha": "88e87905915a257619a815ff42663cb35dcf8a36",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -1,3 +1,25 @@\n+2021-04-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile-debug.c (objfile::expand_symtabs_for_function):\n+\tRewrite.\n+\t* quick-symbol.h (struct quick_symbol_functions)\n+\t<expand_symtabs_for_function>: Remove.\n+\t* psymtab.c (psymbol_functions::expand_symtabs_for_function):\n+\tRemove.\n+\t* psympriv.h (struct psymbol_functions)\n+\t<expand_symtabs_for_function>: Remove.\n+\t* objfiles.h (struct objfile) <expand_symtabs_for_function>:\n+\tUpdate comment.\n+\t* dwarf2/read.c (struct dwarf2_gdb_index)\n+\t<expand_symtabs_for_function>: Remove.\n+\t(struct dwarf2_debug_names_index) <expand_symtabs_for_function>:\n+\tRemove.\n+\t(find_slot_in_mapped_hash): Remove.\n+\t(dw2_symtab_iter_init_common): Merge with dw2_symtab_iter_init.\n+\t(dw2_symtab_iter_init): Remove one overload.\n+\t(dwarf2_gdb_index::expand_symtabs_for_function)\n+\t(dwarf2_debug_names_index::expand_symtabs_for_function): Remove.\n+\n 2021-04-17  Tom Tromey  <tom@tromey.com>\n \n \t* symfile-debug.c (objfile::map_symtabs_matching_filename):"
    },
    {
      "sha": "007b70ec32aea8f6958f9307a57a2e09cd645e61",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 143,
      "changes": 148,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -2263,9 +2263,6 @@ struct dwarf2_gdb_index : public dwarf2_base_index_functions\n {\n   void dump (struct objfile *objfile) override;\n \n-  void expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t    const char *func_name) override;\n-\n   void map_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n@@ -2289,9 +2286,6 @@ struct dwarf2_debug_names_index : public dwarf2_base_index_functions\n {\n   void dump (struct objfile *objfile) override;\n \n-  void expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t    const char *func_name) override;\n-\n   void map_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n@@ -2939,68 +2933,6 @@ create_addrmap_from_aranges (dwarf2_per_objfile *per_objfile,\n \t\t\t\t\t\t &per_bfd->obstack);\n }\n \n-/* Find a slot in the mapped index INDEX for the object named NAME.\n-   If NAME is found, set *VEC_OUT to point to the CU vector in the\n-   constant pool and return true.  If NAME cannot be found, return\n-   false.  */\n-\n-static bool\n-find_slot_in_mapped_hash (struct mapped_index *index, const char *name,\n-\t\t\t  offset_type **vec_out)\n-{\n-  offset_type hash;\n-  offset_type slot, step;\n-  int (*cmp) (const char *, const char *);\n-\n-  gdb::unique_xmalloc_ptr<char> without_params;\n-  if (current_language->la_language == language_cplus\n-      || current_language->la_language == language_fortran\n-      || current_language->la_language == language_d)\n-    {\n-      /* NAME is already canonical.  Drop any qualifiers as .gdb_index does\n-\t not contain any.  */\n-\n-      if (strchr (name, '(') != NULL)\n-\t{\n-\t  without_params = cp_remove_params (name);\n-\n-\t  if (without_params != NULL)\n-\t    name = without_params.get ();\n-\t}\n-    }\n-\n-  /* Index version 4 did not support case insensitive searches.  But the\n-     indices for case insensitive languages are built in lowercase, therefore\n-     simulate our NAME being searched is also lowercased.  */\n-  hash = mapped_index_string_hash ((index->version == 4\n-\t\t\t\t    && case_sensitivity == case_sensitive_off\n-\t\t\t\t    ? 5 : index->version),\n-\t\t\t\t   name);\n-\n-  slot = hash & (index->symbol_table.size () - 1);\n-  step = ((hash * 17) & (index->symbol_table.size () - 1)) | 1;\n-  cmp = (case_sensitivity == case_sensitive_on ? strcmp : strcasecmp);\n-\n-  for (;;)\n-    {\n-      const char *str;\n-\n-      const auto &bucket = index->symbol_table[slot];\n-      if (bucket.name == 0 && bucket.vec == 0)\n-\treturn false;\n-\n-      str = index->constant_pool + MAYBE_SWAP (bucket.name);\n-      if (!cmp (name, str))\n-\t{\n-\t  *vec_out = (offset_type *) (index->constant_pool\n-\t\t\t\t      + MAYBE_SWAP (bucket.vec));\n-\t  return true;\n-\t}\n-\n-      slot = (slot + step) & (index->symbol_table.size () - 1);\n-    }\n-}\n-\n /* A helper function that reads the .gdb_index from BUFFER and fills\n    in MAP.  FILENAME is the name of the file containing the data;\n    it is used for error reporting.  DEPRECATED_OK is true if it is\n@@ -3402,13 +3334,13 @@ struct dw2_symtab_iterator\n   int global_seen;\n };\n \n-/* Initialize the index symtab iterator ITER, common part.  */\n+/* Initialize the index symtab iterator ITER, offset_type NAMEI variant.  */\n \n static void\n-dw2_symtab_iter_init_common (struct dw2_symtab_iterator *iter,\n-\t\t\t     dwarf2_per_objfile *per_objfile,\n-\t\t\t     gdb::optional<block_enum> block_index,\n-\t\t\t     domain_enum domain)\n+dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n+\t\t      dwarf2_per_objfile *per_objfile,\n+\t\t      gdb::optional<block_enum> block_index,\n+\t\t      domain_enum domain, offset_type namei)\n {\n   iter->per_objfile = per_objfile;\n   iter->block_index = block_index;\n@@ -3417,37 +3349,6 @@ dw2_symtab_iter_init_common (struct dw2_symtab_iterator *iter,\n   iter->global_seen = 0;\n   iter->vec = NULL;\n   iter->length = 0;\n-}\n-\n-/* Initialize the index symtab iterator ITER, const char *NAME variant.  */\n-\n-static void\n-dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n-\t\t      dwarf2_per_objfile *per_objfile,\n-\t\t      gdb::optional<block_enum> block_index,\n-\t\t      domain_enum domain,\n-\t\t      const char *name)\n-{\n-  dw2_symtab_iter_init_common (iter, per_objfile, block_index, domain);\n-\n-  mapped_index *index = per_objfile->per_bfd->index_table.get ();\n-  /* index is NULL if OBJF_READNOW.  */\n-  if (index == NULL)\n-    return;\n-\n-  if (find_slot_in_mapped_hash (index, name, &iter->vec))\n-    iter->length = MAYBE_SWAP (*iter->vec);\n-}\n-\n-/* Initialize the index symtab iterator ITER, offset_type NAMEI variant.  */\n-\n-static void\n-dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n-\t\t      dwarf2_per_objfile *per_objfile,\n-\t\t      gdb::optional<block_enum> block_index,\n-\t\t      domain_enum domain, offset_type namei)\n-{\n-  dw2_symtab_iter_init_common (iter, per_objfile, block_index, domain);\n \n   mapped_index *index = per_objfile->per_bfd->index_table.get ();\n   /* index is NULL if OBJF_READNOW.  */\n@@ -3604,22 +3505,6 @@ dwarf2_gdb_index::dump (struct objfile *objfile)\n   printf_filtered (\"\\n\");\n }\n \n-void\n-dwarf2_gdb_index::expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t\t       const char *func_name)\n-{\n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n-\n-  struct dw2_symtab_iterator iter;\n-  struct dwarf2_per_cu_data *per_cu;\n-\n-  dw2_symtab_iter_init (&iter, per_objfile, {}, VAR_DOMAIN, func_name);\n-\n-  while ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n-    dw2_instantiate_symtab (per_cu, per_objfile, false);\n-\n-}\n-\n void\n dwarf2_base_index_functions::expand_all_symtabs (struct objfile *objfile)\n {\n@@ -5660,29 +5545,6 @@ dwarf2_debug_names_index::dump (struct objfile *objfile)\n   printf_filtered (\"\\n\");\n }\n \n-void\n-dwarf2_debug_names_index::expand_symtabs_for_function\n-     (struct objfile *objfile, const char *func_name)\n-{\n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n-\n-  /* per_objfile->per_bfd->debug_names_table is NULL if OBJF_READNOW.  */\n-  if (per_objfile->per_bfd->debug_names_table)\n-    {\n-      const mapped_debug_names &map = *per_objfile->per_bfd->debug_names_table;\n-\n-      dw2_debug_names_iterator iter (map,\n-\t\t\t\t     (SEARCH_GLOBAL_BLOCK\n-\t\t\t\t      | SEARCH_STATIC_BLOCK),\n-\t\t\t\t     VAR_DOMAIN, func_name,\n-\t\t\t\t     per_objfile);\n-\n-      struct dwarf2_per_cu_data *per_cu;\n-      while ((per_cu = iter.next ()) != NULL)\n-\tdw2_instantiate_symtab (per_cu, per_objfile, false);\n-    }\n-}\n-\n void\n dwarf2_debug_names_index::map_matching_symbols\n   (struct objfile *objfile,"
    },
    {
      "sha": "64cfca41f156c97a813f35690355e15c105e5373",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -606,7 +606,8 @@ struct objfile\n   /* See quick_symbol_functions.  */\n   void dump ();\n \n-  /* See quick_symbol_functions.  */\n+  /* Find all the symbols in OBJFILE named FUNC_NAME, and ensure that\n+     the corresponding symbol tables are loaded.  */\n   void expand_symtabs_for_function (const char *func_name);\n \n   /* See quick_symbol_functions.  */"
    },
    {
      "sha": "4bd6decfaa45f5ff18614ebd04d2161849b6c6f6",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -516,9 +516,6 @@ struct psymbol_functions : public quick_symbol_functions\n \n   void dump (struct objfile *objfile) override;\n \n-  void expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t    const char *func_name) override;\n-\n   void expand_all_symtabs (struct objfile *objfile) override;\n \n   void expand_symtabs_with_fullname (struct objfile *objfile,"
    },
    {
      "sha": "8afeeb39fb7c9461d717dad7452301c11cb9a6f2",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -892,29 +892,6 @@ psymbol_functions::dump (struct objfile *objfile)\n     }\n }\n \n-/* Psymtab version of expand_symtabs_for_function.  See its definition in\n-   the definition of quick_symbol_functions in symfile.h.  */\n-\n-void\n-psymbol_functions::expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t\t\tconst char *func_name)\n-{\n-  lookup_name_info base_lookup (func_name, symbol_name_match_type::FULL);\n-  lookup_name_info lookup_name = base_lookup.make_ignore_params ();\n-\n-  for (partial_symtab *ps : require_partial_symbols (objfile))\n-    {\n-      if (ps->readin_p (objfile))\n-\tcontinue;\n-\n-      if ((lookup_partial_symbol (objfile, ps, lookup_name, 1, VAR_DOMAIN)\n-\t   != NULL)\n-\t  || (lookup_partial_symbol (objfile, ps, lookup_name, 0, VAR_DOMAIN)\n-\t      != NULL))\n-\tpsymtab_to_symtab (objfile, ps);\n-    }\n-}\n-\n /* Psymtab version of expand_all_symtabs.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n "
    },
    {
      "sha": "1aa02e9ff4ce4a5985b2006d4b502b572ff3aff0",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -116,11 +116,6 @@ struct quick_symbol_functions\n      gdb_stdout.  This is used for \"maint print objfiles\".  */\n   virtual void dump (struct objfile *objfile) = 0;\n \n-  /* Find all the symbols in OBJFILE named FUNC_NAME, and ensure that\n-     the corresponding symbol tables are loaded.  */\n-  virtual void expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t\t    const char *func_name) = 0;\n-\n   /* Read all symbol tables associated with OBJFILE.  */\n   virtual void expand_all_symtabs (struct objfile *objfile) = 0;\n "
    },
    {
      "sha": "deabea4737c3ff92a96cd0235919220bf0bbd512",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7089bd886ec78d623c3188cac48c039bc5eaf3b6/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=7089bd886ec78d623c3188cac48c039bc5eaf3b6",
      "patch": "@@ -300,8 +300,19 @@ objfile::expand_symtabs_for_function (const char *func_name)\n \t\t      \"qf->expand_symtabs_for_function (%s, \\\"%s\\\")\\n\",\n \t\t      objfile_debug_name (this), func_name);\n \n+  lookup_name_info base_lookup (func_name, symbol_name_match_type::FULL);\n+  lookup_name_info lookup_name = base_lookup.make_ignore_params ();\n+\n   for (const auto &iter : qf)\n-    iter->expand_symtabs_for_function (this, func_name);\n+    iter->expand_symtabs_matching (this,\n+\t\t\t\t   nullptr,\n+\t\t\t\t   &lookup_name,\n+\t\t\t\t   nullptr,\n+\t\t\t\t   nullptr,\n+\t\t\t\t   (SEARCH_GLOBAL_BLOCK\n+\t\t\t\t    | SEARCH_STATIC_BLOCK),\n+\t\t\t\t   VAR_DOMAIN,\n+\t\t\t\t   ALL_DOMAIN);\n }\n \n void"
    }
  ]
}