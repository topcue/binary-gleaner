{
  "sha": "4a636814934b4403baeffbf29af44ed3a3cb2962",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE2MzY4MTQ5MzRiNDQwM2JhZWZmYmYyOWFmNDRlZDNhM2NiMjk2Mg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-22T14:27:39Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-22T14:45:14Z"
    },
    "message": "gdb/dwarf: fix reading subprogram with DW_AT_specification (PR gdb/26693)\n\nFix a regression introduced by commit 7188ed02d2a7 (\"Replace\ndwarf2_per_cu_data::cu backlink with per-objfile map\").\n\nThis patch targets both master and gdb-10-branch, since this is a\nregression from GDB 9.\n\nAnalysis\n--------\n\nThe DWARF generated by the included test case looks like:\n\n    0x0000000b: DW_TAG_compile_unit\n                  DW_AT_language [DW_FORM_sdata]    (4)\n\n    0x0000000d:   DW_TAG_base_type\n                    DW_AT_name [DW_FORM_string]     (\"int\")\n                    DW_AT_byte_size [DW_FORM_data1] (0x04)\n                    DW_AT_encoding [DW_FORM_sdata]  (5)\n\n    0x00000014:   DW_TAG_subprogram\n                    DW_AT_name [DW_FORM_string]     (\"apply\")\n\n    0x0000001b:   DW_TAG_subprogram\n                    DW_AT_specification [DW_FORM_ref4]      (0x00000014 \"apply\")\n                    DW_AT_low_pc [DW_FORM_addr]     (0x0000000000001234)\n                    DW_AT_high_pc [DW_FORM_data8]   (0x0000000000000020)\n\n    0x00000030:     DW_TAG_template_type_parameter\n                      DW_AT_name [DW_FORM_string]   (\"T\")\n                      DW_AT_type [DW_FORM_ref4]     (0x0000000d \"int\")\n\n    0x00000037:     NULL\n\n    0x00000038:   NULL\n\nSimply loading the file in GDB makes it crash:\n\n    $ ./gdb -nx --data-directory=data-directory testsuite/outputs/gdb.dwarf2/pr26693/pr26693\n    [1]    15188 abort (core dumped)  ./gdb -nx --data-directory=data-directory\n\nThe crash happens here, where htab (a dwarf2_cu::die_hash field) is\nunexpectedly NULL while generating partial symbols:\n\n    #0  0x000055555fa28188 in htab_find_with_hash (htab=0x0, element=0x7fffffffbfa0, hash=27) at /home/simark/src/binutils-gdb/libiberty/hashtab.c:591\n    #1  0x000055555cb4eb2e in follow_die_offset (sect_off=(unknown: 27), offset_in_dwz=0, ref_cu=0x7fffffffc110) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:22951\n    #2  0x000055555cb4edfb in follow_die_ref (src_die=0x0, attr=0x7fffffffc130, ref_cu=0x7fffffffc110) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:22968\n    #3  0x000055555caa48c5 in partial_die_full_name (pdi=0x621000157e70, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8441\n    #4  0x000055555caa4d79 in add_partial_symbol (pdi=0x621000157e70, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8469\n    #5  0x000055555caa7d8c in add_partial_subprogram (pdi=0x621000157e70, lowpc=0x7fffffffc5c0, highpc=0x7fffffffc5e0, set_addrmap=1, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8737\n    #6  0x000055555caa265c in scan_partial_symbols (first_die=0x621000157e00, lowpc=0x7fffffffc5c0, highpc=0x7fffffffc5e0, set_addrmap=1, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8230\n    #7  0x000055555ca98e3f in process_psymtab_comp_unit_reader (reader=0x7fffffffc6b0, info_ptr=0x60600009650d \"\\003int\", comp_unit_die=0x621000157d10, pretend_language=language_minimal) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:7614\n    #8  0x000055555ca9aa2c in process_psymtab_comp_unit (this_cu=0x621000155510, per_objfile=0x613000009f80, want_partial_unit=false, pretend_language=language_minimal) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:7712\n    #9  0x000055555caa051a in dwarf2_build_psymtabs_hard (per_objfile=0x613000009f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8073\n\nThe special thing about this DWARF is that the subprogram at 0x1b is a\ntemplate specialization described with DW_AT_specification, and has no\nDW_AT_name in itself.  To compute the name of this subprogram,\npartial_die_full_name needs to load the full DIE for this partial DIE.\nThe name is generated from the templated function name and the actual\ntempalate parameter values of the specialization.\n\nTo load the full DIE, partial_die_full_name creates a dummy DWARF\nattribute of form DW_FORM_ref_addr that points to our subprogram's DIE,\nand calls follow_die_ref on it.  This eventually causes\nload_full_comp_unit to be called for the exact same CU we are currently\nmaking partial symbols for:\n\n    #0  load_full_comp_unit (this_cu=0x621000155510, per_objfile=0x613000009f80, skip_partial=false, pretend_language=language_minimal) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:9238\n    #1  0x000055555cb4e943 in follow_die_offset (sect_off=(unknown: 27), offset_in_dwz=0, ref_cu=0x7fffffffc110) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:22942\n    #2  0x000055555cb4edfb in follow_die_ref (src_die=0x0, attr=0x7fffffffc130, ref_cu=0x7fffffffc110) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:22968\n    #3  0x000055555caa48c5 in partial_die_full_name (pdi=0x621000157e70, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8441\n    #4  0x000055555caa4d79 in add_partial_symbol (pdi=0x621000157e70, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8469\n    #5  0x000055555caa7d8c in add_partial_subprogram (pdi=0x621000157e70, lowpc=0x7fffffffc5c0, highpc=0x7fffffffc5e0, set_addrmap=1, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8737\n    #6  0x000055555caa265c in scan_partial_symbols (first_die=0x621000157e00, lowpc=0x7fffffffc5c0, highpc=0x7fffffffc5e0, set_addrmap=1, cu=0x615000023f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8230\n    #7  0x000055555ca98e3f in process_psymtab_comp_unit_reader (reader=0x7fffffffc6b0, info_ptr=0x60600009650d \"\\003int\", comp_unit_die=0x621000157d10, pretend_language=language_minimal) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:7614\n    #8  0x000055555ca9aa2c in process_psymtab_comp_unit (this_cu=0x621000155510, per_objfile=0x613000009f80, want_partial_unit=false, pretend_language=language_minimal) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:7712\n    #9  0x000055555caa051a in dwarf2_build_psymtabs_hard (per_objfile=0x613000009f80) at /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8073\n\nload_full_comp_unit creates a cutu_reader for the CU.  Since a dwarf2_cu\nobject already exists for the CU, load_full_comp_unit is expected to\nfind it and pass it to cutu_reader, so that cutu_reader doesn't create\na new dwarf2_cu for the CU.\n\nAnd this is the difference between before and after the regression.\nBefore commit 7188ed02d2a7, the dwarf2_per_cu_data -> dwarf2_cu link was\na simple pointer in dwarf2_per_cu_data.  This pointer was set up when\nstarting the read the partial symbols.  So it was already available at\nthat point where load_full_comp_unit gets called.  Post-7188ed02d2a7,\nthis link is per-objfile, kept in the dwarf2_per_objfile::m_dwarf2_cus\nhash map.  The entry is only put in the hash map once the partial\nsymbols have been successfully read, when cutu_reader::keep is called.\nTherefore, it is _not_ set at the point load_full_comp_unit is called.\n\nAs a consequence, a new dwarf2_cu object gets created and initialized by\nload_full_comp_unit (including initializing that dwarf2_cu::die_hash\nfield).  Meanwhile, the dwarf2_cu object created and used by the callers\nup the stack does not get initialized for full symbol reading, and the\ndwarf2_cu::die_hash field stays unexpectedly NULL.\n\nSolution\n--------\n\nSince the caller of load_full_comp_unit knows about the existing\ndwarf2_cu object for the CU we are reading (the one load_full_comp_unit\nis expected to find), we can simply make it pass it down, instead of\nhaving load_full_comp_unit look up the per-objfile map.\n\nload_full_comp_unit therefore gets a new `existing_cu` parameter.  All\nother callers get updated to pass `per_objfile->get_cu (per_cu)`, so the\nbehavior shouldn't change for them, compared to the current HEAD.\n\nA test is added, which is the bare minimum to reproduce the issue.\n\nNotes\n-----\n\nThe original problem was reproduced by downloading\n\n    https://github.com/oneapi-src/oneTBB/releases/download/v2020.3/tbb-2020.3-lin.tgz\n\nand loading libtbb.so in GDB.  This code was compiled with the Intel\nC/C++ compiler.  I was not able to reproduce the issue using GCC, I\nthink because GCC puts a DW_AT_name in the specialized subprogram, so\nthere's no need for partial_die_full_name to load the full DIE of the\nsubprogram, and the faulty code doesn't execute.\n\ngdb/ChangeLog:\n\n\tPR gdb/26693\n\t* dwarf2/read.c (load_full_comp_unit): Add existing_cu\n\tparameter.\n\t(load_cu): Pass existing CU.\n\t(process_imported_unit_die): Likewise.\n\t(follow_die_offset): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/26693\n\t* gdb.dwarf2/template-specification-full-name.exp: New test.\n\nChange-Id: I57c8042f96c45f15797a3848e4d384181c56bb44",
    "tree": {
      "sha": "a91222ae702d596c0b57d9ddef641dce799b7778",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a91222ae702d596c0b57d9ddef641dce799b7778"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a636814934b4403baeffbf29af44ed3a3cb2962",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a636814934b4403baeffbf29af44ed3a3cb2962",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a636814934b4403baeffbf29af44ed3a3cb2962",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a636814934b4403baeffbf29af44ed3a3cb2962/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "557fc2572036cf01c0f5303d044e4d691705fcd1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/557fc2572036cf01c0f5303d044e4d691705fcd1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/557fc2572036cf01c0f5303d044e4d691705fcd1"
    }
  ],
  "stats": {
    "total": 113,
    "additions": 107,
    "deletions": 6
  },
  "files": [
    {
      "sha": "bda88839b8dddcf2759d975024ab320058bcb255",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4a636814934b4403baeffbf29af44ed3a3cb2962",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/26693\n+\t* dwarf2/read.c (load_full_comp_unit): Add existing_cu\n+\tparameter.\n+\t(load_cu): Pass existing CU.\n+\t(process_imported_unit_die): Likewise.\n+\t(follow_die_offset): Likewise.\n+\n 2020-10-22  Luis Machado  <luis.machado@linaro.org>\n \n \t* corelow.c (core_target::xfer_partial): Also check for an empty"
    },
    {
      "sha": "436a116dc801bbce4b9af8e4c0161c461e338ccb",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=4a636814934b4403baeffbf29af44ed3a3cb2962",
      "patch": "@@ -1606,6 +1606,7 @@ static int create_all_type_units (dwarf2_per_objfile *per_objfile);\n \n static void load_full_comp_unit (dwarf2_per_cu_data *per_cu,\n \t\t\t\t dwarf2_per_objfile *per_objfile,\n+\t\t\t\t dwarf2_cu *existing_cu,\n \t\t\t\t bool skip_partial,\n \t\t\t\t enum language pretend_language);\n \n@@ -2385,7 +2386,8 @@ load_cu (dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile,\n   if (per_cu->is_debug_types)\n     load_full_type_unit (per_cu, per_objfile);\n   else\n-    load_full_comp_unit (per_cu, per_objfile, skip_partial, language_minimal);\n+    load_full_comp_unit (per_cu, per_objfile, per_objfile->get_cu (per_cu),\n+\t\t\t skip_partial, language_minimal);\n \n   dwarf2_cu *cu = per_objfile->get_cu (per_cu);\n   if (cu == nullptr)\n@@ -9226,17 +9228,22 @@ die_eq (const void *item_lhs, const void *item_rhs)\n   return die_lhs->sect_off == die_rhs->sect_off;\n }\n \n-/* Load the DIEs associated with PER_CU into memory.  */\n+/* Load the DIEs associated with PER_CU into memory.\n+\n+   In some cases, the caller, while reading partial symbols, will need to load\n+   the full symbols for the CU for some reason.  It will already have a\n+   dwarf2_cu object for THIS_CU and pass it as EXISTING_CU, so it can be re-used\n+   rather than creating a new one.  */\n \n static void\n load_full_comp_unit (dwarf2_per_cu_data *this_cu,\n \t\t     dwarf2_per_objfile *per_objfile,\n+\t\t     dwarf2_cu *existing_cu,\n \t\t     bool skip_partial,\n \t\t     enum language pretend_language)\n {\n   gdb_assert (! this_cu->is_debug_types);\n \n-  dwarf2_cu *existing_cu = per_objfile->get_cu (this_cu);\n   cutu_reader reader (this_cu, per_objfile, NULL, existing_cu, skip_partial);\n   if (reader.dummy_p)\n     return;\n@@ -10102,7 +10109,8 @@ process_imported_unit_die (struct die_info *die, struct dwarf2_cu *cu)\n \n       /* If necessary, add it to the queue and load its DIEs.  */\n       if (maybe_queue_comp_unit (cu, per_cu, per_objfile, cu->language))\n-\tload_full_comp_unit (per_cu, per_objfile, false, cu->language);\n+\tload_full_comp_unit (per_cu, per_objfile, per_objfile->get_cu (per_cu),\n+\t\t\t     false, cu->language);\n \n       cu->per_cu->imported_symtabs_push (per_cu);\n     }\n@@ -22932,15 +22940,17 @@ follow_die_offset (sect_offset sect_off, int offset_in_dwz,\n \n       /* If necessary, add it to the queue and load its DIEs.  */\n       if (maybe_queue_comp_unit (cu, per_cu, per_objfile, cu->language))\n-\tload_full_comp_unit (per_cu, per_objfile, false, cu->language);\n+\tload_full_comp_unit (per_cu, per_objfile, per_objfile->get_cu (per_cu),\n+\t\t\t     false, cu->language);\n \n       target_cu = per_objfile->get_cu (per_cu);\n     }\n   else if (cu->dies == NULL)\n     {\n       /* We're loading full DIEs during partial symbol reading.  */\n       gdb_assert (per_objfile->per_bfd->reading_partial_symbols);\n-      load_full_comp_unit (cu->per_cu, per_objfile, false, language_minimal);\n+      load_full_comp_unit (cu->per_cu, per_objfile, cu, false,\n+\t\t\t   language_minimal);\n     }\n \n   *ref_cu = target_cu;"
    },
    {
      "sha": "f75c7327863980c3f34239d1ad50eb2c5de2cc17",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=4a636814934b4403baeffbf29af44ed3a3cb2962",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/26693\n+\t* gdb.dwarf2/template-specification-full-name.exp: New test.\n+\n 2020-10-22  Luis Machado  <luis.machado@linaro.org>\n \n \t* gdb.base/msym-bp-shl.exp (test_break): Adjust pattern to not"
    },
    {
      "sha": "259bdf56ad559c266a8ea4452b2c51e06f7ad981",
      "filename": "gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a636814934b4403baeffbf29af44ed3a3cb2962/gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp?ref=4a636814934b4403baeffbf29af44ed3a3cb2962",
      "patch": "@@ -0,0 +1,77 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test to reproduce the crash described in PR 26693.  The following DWARF was\n+# crashing GDB while loading partial symbols: a DW_TAG_subprogram with a\n+# DW_AT_specification (pointing to another subprogram), without a DW_AT_name\n+# and with a template parameter (DW_TAG_template_type_parameter).  More\n+# precisely, the crash was happening when trying to compute the full name of the\n+# subprogram.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile main.c .S\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+\t    {DW_AT_language @DW_LANG_C_plus_plus}\n+        } {\n+\t    declare_labels templated_subprogram int\n+\n+\t    int: DW_TAG_base_type {\n+\t\t{DW_AT_name \"int\"}\n+\t\t{DW_AT_byte_size 4 DW_FORM_data1}\n+\t\t{DW_AT_encoding @DW_ATE_signed}\n+\t    }\n+\n+\t    # The templated subprogram.\n+\t    templated_subprogram: DW_TAG_subprogram {\n+\t\t{DW_AT_name \"apply\"}\n+\t    }\n+\n+\t    # The template specialization.\n+\t    #\n+\t    # The low and high PC are phony: we just need an address range that\n+\t    # is valid in the program, so we use the main function's range.\n+\t    DW_TAG_subprogram {\n+\t\t{DW_AT_specification :$templated_subprogram}\n+\t\t{MACRO_AT_range main}\n+\t    } {\n+\t\tDW_TAG_template_type_param {\n+\t\t  {DW_AT_name \"T\"}\n+\t\t  {DW_AT_type :$int DW_FORM_ref4}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Just a sanity check to make sure GDB slurped the symbols correctly.\n+gdb_test \"print apply<int>\" \" = {void \\\\(void\\\\)} $hex <apply<int>\\\\(\\\\)>\""
    }
  ]
}