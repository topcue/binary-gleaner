{
  "sha": "d038ce48f1adebd6917a1cfb595efd6f93d613ff",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDAzOGNlNDhmMWFkZWJkNjkxN2ExY2ZiNTk1ZWZkNmY5M2Q2MTNmZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-23T21:55:16Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-25T19:43:07Z"
    },
    "message": "gdb: fix invalid arg coercion when calling static member functions\n\nIn this commit:\n\n  commit 7022349d5c86bae74b49225515f42d2e221bd368\n  Date:   Mon Sep 4 20:21:13 2017 +0100\n\n      Stop assuming no-debug-info functions return int\n\nA new if case was added to call_function_by_hand_dummy to decide if a\nfunction should be considered prototyped or not.  Previously the code\nwas structured like this:\n\n  if (COND_1)\n    ACTION_1\n  else if (COND_2)\n    ACTION_2\n  else\n    ACTION_3\n\nWith the new block the code now looks like this:\n\n  if (COND_1)\n    ACTION_1\n  if (NEW_COND)\n    NEW_ACTION\n  else if (COND_2)\n    ACTION_2\n  else\n    ACTION_3\n\nNotice the new block was added as and 'if' not 'else if'.  I'm running\ninto a case where GDB executes ACTION_1 and then ACTION_2.  Prior to\nthe above commit GDB would only have executed ACTION_1.\n\nThe actions in the code in question are trying to figure out if a\nfunction should be considered prototyped or not.  When a function is\nnot prototyped some arguments will be coerced, e.g. floats to doubles.\n\nThe COND_1 / ACTION_1 are a very broad, any member function should be\nconsidered prototyped, however, after the above patch GDB is now\nexecuting the later ACTION_2 which checks to see if the function's\ntype has the 'prototyped' flag set - this is not the case for the\nmember functions I'm testing, and so GDB treats the function as\nunprototyped and casts the float argument to a double.\n\nI believe that adding the new check as 'if' rather than 'else if' was\na mistake, and so in this commit I add in the missing 'else'.\n\ngdb/ChangeLog:\n\n\t* infcall.c (call_function_by_hand_dummy): Add missing 'else' when\n\tsetting prototyped flag.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.cp/method-call-in-c.cc (struct foo_type): Add static member\n\tfunction static_method.\n\t(global_var): New global.\n\t(main): Use new static_method to ensure it is compiled in.\n\t* gdb.cp/method-call-in-c.exp: Test calls to static member\n\tfunction.",
    "tree": {
      "sha": "0e6bc55b4a44a03afe3a68531339c41289b823fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e6bc55b4a44a03afe3a68531339c41289b823fb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d038ce48f1adebd6917a1cfb595efd6f93d613ff",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d038ce48f1adebd6917a1cfb595efd6f93d613ff",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d038ce48f1adebd6917a1cfb595efd6f93d613ff",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d038ce48f1adebd6917a1cfb595efd6f93d613ff/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "158cc4feb72a471dd4478766e711326b0e97f3b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/158cc4feb72a471dd4478766e711326b0e97f3b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/158cc4feb72a471dd4478766e711326b0e97f3b6"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 28,
    "deletions": 2
  },
  "files": [
    {
      "sha": "9613e3e02ca54bf40343d138bee409deecc34ed5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d038ce48f1adebd6917a1cfb595efd6f93d613ff",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* infcall.c (call_function_by_hand_dummy): Add missing 'else' when\n+\tsetting prototyped flag.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (desc_bounds): Use '{}' instead of NULL to indicate"
    },
    {
      "sha": "40298fb1318604a7bb301ad163427640c6b85cee",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=d038ce48f1adebd6917a1cfb595efd6f93d613ff",
      "patch": "@@ -1026,8 +1026,8 @@ call_function_by_hand_dummy (struct value *function,\n \t prototyped.  Can we respect TYPE_VARARGS?  Probably not.  */\n       if (ftype->code () == TYPE_CODE_METHOD)\n \tprototyped = 1;\n-      if (TYPE_TARGET_TYPE (ftype) == NULL && ftype->num_fields () == 0\n-\t  && default_return_type != NULL)\n+      else if (TYPE_TARGET_TYPE (ftype) == NULL && ftype->num_fields () == 0\n+\t       && default_return_type != NULL)\n \t{\n \t  /* Calling a no-debug function with the return type\n \t     explicitly cast.  Assume the function is prototyped,"
    },
    {
      "sha": "9bf8e9ebcc111e24dbbbaac1028e604d977be1ae",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d038ce48f1adebd6917a1cfb595efd6f93d613ff",
      "patch": "@@ -1,3 +1,12 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.cp/method-call-in-c.cc (struct foo_type): Add static member\n+\tfunction static_method.\n+\t(global_var): New global.\n+\t(main): Use new static_method to ensure it is compiled in.\n+\t* gdb.cp/method-call-in-c.exp: Test calls to static member\n+\tfunction.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR gdb/27994"
    },
    {
      "sha": "846a9111ef90751dfc0eebe01b2a2349b5a6483d",
      "filename": "gdb/testsuite/gdb.cp/method-call-in-c.cc",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/testsuite/gdb.cp/method-call-in-c.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/testsuite/gdb.cp/method-call-in-c.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/method-call-in-c.cc?ref=d038ce48f1adebd6917a1cfb595efd6f93d613ff",
      "patch": "@@ -35,9 +35,16 @@ struct foo_type\n     return *this;\n   }\n \n+  static int static_method (float f, baz_type b)\n+  {\n+    return b.a + b.b + b.c + (int) f;\n+  }\n+\n   int var = 120;\n };\n \n+volatile int global_var;\n+\n int\n main (void)\n {\n@@ -48,5 +55,7 @@ main (void)\n \n   foo += b;\n \n+  global_var = foo.static_method (f, b);\n+\n   return foo.func (b, f);\t/* Break here.  */\n }"
    },
    {
      "sha": "5debc0e9a7a58280e0759b4ac716825b10349d8e",
      "filename": "gdb/testsuite/gdb.cp/method-call-in-c.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/testsuite/gdb.cp/method-call-in-c.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d038ce48f1adebd6917a1cfb595efd6f93d613ff/gdb/testsuite/gdb.cp/method-call-in-c.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/method-call-in-c.exp?ref=d038ce48f1adebd6917a1cfb595efd6f93d613ff",
      "patch": "@@ -43,5 +43,8 @@ foreach_with_prefix lang { c++ c } {\n \tset result [expr $result + 3]\n \tgdb_test \"print foo += b\" \\\n \t    \" = \\\\((?:struct )?foo_type &\\\\) @${hex}: \\\\\\{var = ${result}\\\\\\}\"\n+\n+\tgdb_test \"print foo.static_method (f, b)\" \" = 4\"\n+\tgdb_test \"print foo_type::static_method (f, b)\" \" = 4\"\n     }\n }"
    }
  ]
}