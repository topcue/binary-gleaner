{
  "sha": "7c80dd4c2cc080036b95176bcf35bb6f46355598",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2M4MGRkNGMyY2MwODAwMzZiOTUxNzZiY2YzNWJiNmY0NjM1NTU5OA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-02T01:30:15Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-02T07:00:44Z"
    },
    "message": "ubsan: v850-opc.c:412 left shift cannot be represented\n\ninclude/\n\t* opcode/v850.h (struct v850_operand <insert>): Make param op an\n\tunsigned long.\nopcodes/\n\t* v850-opc.c (insert_i5div1, insert_i5div2, insert_i5div3),\n\t(insert_d5_4, insert_d8_6, insert_d8_7, insert_v8, insert_d9),\n\t(insert_u16_loop, insert_d16_15, insert_d16_16, insert_d17_16),\n\t(insert_d22, insert_d23, insert_d23_align1, insert_i9, insert_u9),\n\t(insert_spe, insert_r4, insert_POS, insert_WIDTH, insert_SELID),\n\t(insert_VECTOR8, insert_VECTOR5, insert_CACHEOP, insert_PREFOP),\n\t(nsert_IMM10U, insert_SRSEL1, insert_SRSEL2): Use unsigned long\n\tfor value parameter and update code to suit.\n\t(extract_d9, extract_d16_15, extract_d16_16, extract_d17_16),\n\t(extract_d22, extract_d23, extract_i9): Use unsigned long variables.",
    "tree": {
      "sha": "ee9db27bbee5db5a81b9d0716a49aa4053722f5c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ee9db27bbee5db5a81b9d0716a49aa4053722f5c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c80dd4c2cc080036b95176bcf35bb6f46355598",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c80dd4c2cc080036b95176bcf35bb6f46355598",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c80dd4c2cc080036b95176bcf35bb6f46355598",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c80dd4c2cc080036b95176bcf35bb6f46355598/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4b393495f506632a9be966277c6d6e668ba9778",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4b393495f506632a9be966277c6d6e668ba9778",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4b393495f506632a9be966277c6d6e668ba9778"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 87,
    "deletions": 75
  },
  "files": [
    {
      "sha": "62d88221a9cb2f404d2c98e0c9206040bc07f2ea",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c80dd4c2cc080036b95176bcf35bb6f46355598/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c80dd4c2cc080036b95176bcf35bb6f46355598/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=7c80dd4c2cc080036b95176bcf35bb6f46355598",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/v850.h (struct v850_operand <insert>): Make param op an\n+\tunsigned long.\n+\n 2020-09-02  Cooper Qu  <cooper.qu@linux.alibaba.com>\n \n \t* opcode/csky.h (CSKYV2_ISA_3E3R3): Define."
    },
    {
      "sha": "2ad8eaa37e882012cb3b367faa032548c9410378",
      "filename": "include/opcode/v850.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c80dd4c2cc080036b95176bcf35bb6f46355598/include/opcode/v850.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c80dd4c2cc080036b95176bcf35bb6f46355598/include/opcode/v850.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/v850.h?ref=7c80dd4c2cc080036b95176bcf35bb6f46355598",
      "patch": "@@ -133,7 +133,7 @@ struct v850_operand\n      operand value is legal, *ERRMSG will be unchanged (most operands\n      can accept any value).  */\n   unsigned long (* insert)\n-    (unsigned long instruction, long op, const char ** errmsg);\n+    (unsigned long instruction, unsigned long op, const char ** errmsg);\n \n   /* Extraction function.  This is used by the disassembler.  To\n      extract this operand type from an instruction, check this field."
    },
    {
      "sha": "7740c888608e8fbfda014ad6c1f5a230165b7270",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c80dd4c2cc080036b95176bcf35bb6f46355598/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c80dd4c2cc080036b95176bcf35bb6f46355598/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=7c80dd4c2cc080036b95176bcf35bb6f46355598",
      "patch": "@@ -1,3 +1,16 @@\n+2020-09-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* v850-opc.c (insert_i5div1, insert_i5div2, insert_i5div3),\n+\t(insert_d5_4, insert_d8_6, insert_d8_7, insert_v8, insert_d9),\n+\t(insert_u16_loop, insert_d16_15, insert_d16_16, insert_d17_16),\n+\t(insert_d22, insert_d23, insert_d23_align1, insert_i9, insert_u9),\n+\t(insert_spe, insert_r4, insert_POS, insert_WIDTH, insert_SELID),\n+\t(insert_VECTOR8, insert_VECTOR5, insert_CACHEOP, insert_PREFOP),\n+\t(nsert_IMM10U, insert_SRSEL1, insert_SRSEL2): Use unsigned long\n+\tfor value parameter and update code to suit.\n+\t(extract_d9, extract_d16_15, extract_d16_16, extract_d17_16),\n+\t(extract_d22, extract_d23, extract_i9): Use unsigned long variables.\n+\n 2020-09-02  Alan Modra  <amodra@gmail.com>\n \n \t* i386-dis.c (OP_E_memory): Don't cast to signed type when"
    },
    {
      "sha": "4c00ac6768d4adb965e5e9be2af0783f93798f94",
      "filename": "opcodes/v850-opc.c",
      "status": "modified",
      "additions": 68,
      "deletions": 74,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c80dd4c2cc080036b95176bcf35bb6f46355598/opcodes/v850-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c80dd4c2cc080036b95176bcf35bb6f46355598/opcodes/v850-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/v850-opc.c?ref=7c80dd4c2cc080036b95176bcf35bb6f46355598",
      "patch": "@@ -75,7 +75,7 @@ v850_msg_is_out_of_range (const char* msg)\n }\n \n static unsigned long\n-insert_i5div1 (unsigned long insn, long value, const char ** errmsg)\n+insert_i5div1 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   if (value > 30 || value < 2)\n     {\n@@ -104,7 +104,7 @@ extract_i5div1 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_i5div2 (unsigned long insn, long value, const char ** errmsg)\n+insert_i5div2 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   if (value > 30 || value < 4)\n     {\n@@ -133,7 +133,7 @@ extract_i5div2 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_i5div3 (unsigned long insn, long value, const char ** errmsg)\n+insert_i5div3 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   if (value > 32 || value < 2)\n     {\n@@ -162,9 +162,9 @@ extract_i5div3 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d5_4 (unsigned long insn, long value, const char ** errmsg)\n+insert_d5_4 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0x1f || value < 0)\n+  if (value > 0x1f)\n     {\n       if (value & 1)\n \t* errmsg = _(not_valid);\n@@ -192,9 +192,9 @@ extract_d5_4 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d8_6 (unsigned long insn, long value, const char ** errmsg)\n+insert_d8_6 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0xff || value < 0)\n+  if (value > 0xff)\n     {\n       if ((value % 4) != 0)\n \t* errmsg = _(not_valid);\n@@ -222,9 +222,9 @@ extract_d8_6 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d8_7 (unsigned long insn, long value, const char ** errmsg)\n+insert_d8_7 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0xff || value < 0)\n+  if (value > 0xff)\n     {\n       if ((value % 2) != 0)\n \t* errmsg = _(not_valid);\n@@ -252,9 +252,9 @@ extract_d8_7 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_v8 (unsigned long insn, long value, const char ** errmsg)\n+insert_v8 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0xff || value < 0)\n+  if (value > 0xff)\n     * errmsg = _(immediate_out_of_range);\n \n   return insn | (value & 0x1f) | ((value & 0xe0) << (27-5));\n@@ -271,9 +271,9 @@ extract_v8 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d9 (unsigned long insn, long value, const char ** errmsg)\n+insert_d9 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0xff || value < -0x100)\n+  if (value + 0x100 > 0x1ff)\n     {\n       if ((value % 2) != 0)\n \t* errmsg = branch_out_of_range_and_odd_offset;\n@@ -289,7 +289,7 @@ insert_d9 (unsigned long insn, long value, const char ** errmsg)\n static unsigned long\n extract_d9 (unsigned long insn, int * invalid)\n {\n-  signed long ret = ((insn >> 7) & 0x1f0) | ((insn >> 3) & 0x0e);\n+  unsigned long ret = ((insn >> 7) & 0x1f0) | ((insn >> 3) & 0x0e);\n \n   ret = (ret ^ 0x100) - 0x100;\n \n@@ -299,11 +299,11 @@ extract_d9 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_u16_loop (unsigned long insn, long value, const char ** errmsg)\n+insert_u16_loop (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   /* Loop displacement is encoded as a positive value,\n      even though the instruction branches backwards.  */\n-  if (value < 0 || value > 0xffff)\n+  if (value > 0xffff)\n     {\n       if ((value % 2) != 0)\n \t* errmsg = branch_out_of_range_and_odd_offset;\n@@ -327,9 +327,9 @@ extract_u16_loop (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d16_15 (unsigned long insn, long value, const char ** errmsg)\n+insert_d16_15 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0x7fff || value < -0x8000)\n+  if (value + 0x8000 > 0xffff)\n     {\n       if ((value % 2) != 0)\n \t* errmsg = _(not_valid);\n@@ -345,7 +345,7 @@ insert_d16_15 (unsigned long insn, long value, const char ** errmsg)\n static unsigned long\n extract_d16_15 (unsigned long insn, int * invalid)\n {\n-  signed long ret = (insn >> 16) & 0xfffe;\n+  unsigned long ret = (insn >> 16) & 0xfffe;\n \n   ret = (ret ^ 0x8000) - 0x8000;\n \n@@ -355,9 +355,9 @@ extract_d16_15 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d16_16 (unsigned long insn, signed long value, const char ** errmsg)\n+insert_d16_16 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0x7fff || value < -0x8000)\n+  if (value + 0x8000 > 0xffff)\n     * errmsg = _(out_of_range);\n \n   return insn | ((value & 0xfffe) << 16) | ((value & 1) << 5);\n@@ -366,7 +366,7 @@ insert_d16_16 (unsigned long insn, signed long value, const char ** errmsg)\n static unsigned long\n extract_d16_16 (unsigned long insn, int * invalid)\n {\n-  signed long ret = ((insn >> 16) & 0xfffe) | ((insn >> 5) & 1);\n+  unsigned long ret = ((insn >> 16) & 0xfffe) | ((insn >> 5) & 1);\n \n   ret = (ret ^ 0x8000) - 0x8000;\n \n@@ -376,9 +376,9 @@ extract_d16_16 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_d17_16 (unsigned long insn, long value, const char ** errmsg)\n+insert_d17_16 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0xffff || value < -0x10000)\n+  if (value + 0x10000 > 0x1ffff)\n     * errmsg = _(out_of_range);\n \n   return insn | ((value & 0xfffe) << 16) | ((value & 0x10000) >> (16 - 4));\n@@ -387,19 +387,19 @@ insert_d17_16 (unsigned long insn, long value, const char ** errmsg)\n static unsigned long\n extract_d17_16 (unsigned long insn, int * invalid)\n {\n-  signed long ret = ((insn >> 16) & 0xfffe) | ((insn << (16 - 4)) & 0x10000);\n+  unsigned long ret = ((insn >> 16) & 0xfffe) | ((insn << (16 - 4)) & 0x10000);\n \n   ret = (ret ^ 0x10000) - 0x10000;\n \n   if (invalid != 0)\n     *invalid = 0;\n-  return (unsigned long)ret;\n+  return ret;\n }\n \n static unsigned long\n-insert_d22 (unsigned long insn, long value, const char ** errmsg)\n+insert_d22 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0x1fffff || value < -0x200000)\n+  if (value + 0x200000 > 0x3fffff)\n     {\n       if ((value % 2) != 0)\n \t* errmsg = branch_out_of_range_and_odd_offset;\n@@ -415,28 +415,28 @@ insert_d22 (unsigned long insn, long value, const char ** errmsg)\n static unsigned long\n extract_d22 (unsigned long insn, int * invalid)\n {\n-  signed long ret = ((insn >> 16) & 0xfffe) | ((insn << 16) & 0x3f0000);\n+  unsigned long ret = ((insn >> 16) & 0xfffe) | ((insn << 16) & 0x3f0000);\n \n   ret = (ret ^ 0x200000) - 0x200000;\n \n   if (invalid != 0)\n     *invalid = 0;\n-  return (unsigned long) ret;\n+  return ret;\n }\n \n static unsigned long\n-insert_d23 (unsigned long insn, long value, const char ** errmsg)\n+insert_d23 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0x3fffff || value < -0x400000)\n+  if (value + 0x400000 > 0x7fffff)\n     * errmsg = out_of_range;\n \n   return insn | ((value & 0x7f) << 4) | ((value & 0x7fff80) << (16-7));\n }\n \n static unsigned long\n-insert_d23_align1 (unsigned long insn, long value, const char ** errmsg)\n+insert_d23_align1 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0x3fffff || value < -0x400000)\n+  if (value + 0x400000 > 0x7fffff)\n     {\n       if (value & 0x1)\n \t* errmsg = _(not_valid);\n@@ -452,19 +452,19 @@ insert_d23_align1 (unsigned long insn, long value, const char ** errmsg)\n static unsigned long\n extract_d23 (unsigned long insn, int * invalid)\n {\n-  signed long ret = ((insn >> 4) & 0x7f) | ((insn >> (16-7)) & 0x7fff80);\n+  unsigned long ret = ((insn >> 4) & 0x7f) | ((insn >> (16-7)) & 0x7fff80);\n \n   ret = (ret ^ 0x400000) - 0x400000;\n \n   if (invalid != 0)\n     *invalid = 0;\n-  return (unsigned long) ret;\n+  return ret;\n }\n \n static unsigned long\n-insert_i9 (unsigned long insn, signed long value, const char ** errmsg)\n+insert_i9 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  if (value > 0xff || value < -0x100)\n+  if (value + 0x100 > 0x1ff)\n     * errmsg = _(immediate_out_of_range);\n \n   return insn | ((value & 0x1e0) << 13) | (value & 0x1f);\n@@ -473,7 +473,7 @@ insert_i9 (unsigned long insn, signed long value, const char ** errmsg)\n static unsigned long\n extract_i9 (unsigned long insn, int * invalid)\n {\n-  signed long ret = ((insn >> 13) & 0x1e0) | (insn & 0x1f);\n+  unsigned long ret = ((insn >> 13) & 0x1e0) | (insn & 0x1f);\n \n   ret = (ret ^ 0x100) - 0x100;\n \n@@ -483,10 +483,8 @@ extract_i9 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_u9 (unsigned long insn, long v, const char ** errmsg)\n+insert_u9 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  unsigned long value = (unsigned long) v;\n-\n   if (value > 0x1ff)\n     * errmsg = _(immediate_out_of_range);\n \n@@ -504,10 +502,8 @@ extract_u9 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_spe (unsigned long insn, long v, const char ** errmsg)\n+insert_spe (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  unsigned long value = (unsigned long) v;\n-\n   if (value != 3)\n     * errmsg = _(\"invalid register for stack adjustment\");\n \n@@ -524,10 +520,8 @@ extract_spe (unsigned long insn ATTRIBUTE_UNUSED, int * invalid)\n }\n \n static unsigned long\n-insert_r4 (unsigned long insn, long v, const char ** errmsg)\n+insert_r4 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n-  unsigned long value = (unsigned long) v;\n-\n   if (value >= 32)\n     * errmsg = _(\"invalid register name\");\n \n@@ -552,12 +546,12 @@ extract_r4 (unsigned long insn, int * invalid)\n static unsigned long G_pos;\n \n static unsigned long\n-insert_POS (unsigned long insn, long pos, const char ** errmsg)\n+insert_POS (unsigned long insn, unsigned long pos, const char ** errmsg)\n {\n-  if (pos > 0x1f || pos < 0)\n+  if (pos > 0x1f)\n     * errmsg = _(pos_out_of_range);\n \n-  G_pos = (unsigned long) pos;\n+  G_pos = pos;\n \n   return insn; /* Not an oparaton until WIDTH.  */\n }\n@@ -598,17 +592,17 @@ extract_POS_L (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_WIDTH (unsigned long insn, long width, const char ** errmsg)\n+insert_WIDTH (unsigned long insn, unsigned long width, const char ** errmsg)\n {\n   unsigned long msb, lsb, opc, ret;\n   unsigned long msb_expand, lsb_expand;\n \n-  msb = (unsigned long)width + G_pos - 1;\n+  msb = width + G_pos - 1;\n   lsb = G_pos;\n   opc = 0;\n   G_pos = 0;\n \n-  if (width > 0x20 || width < 0)\n+  if (width > 0x20)\n     * errmsg = _(width_out_of_range);\n \n   if ((msb >= 16) && (lsb >= 16))\n@@ -691,9 +685,9 @@ extract_WIDTH_L (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_SELID (unsigned long insn, long selid, const char ** errmsg)\n+insert_SELID (unsigned long insn, unsigned long selid, const char ** errmsg)\n {\n-  if ((unsigned long) selid > 0x1f)\n+  if (selid > 0x1f)\n     * errmsg = _(selid_out_of_range);\n \n   return insn | ((selid & 0x1fUL) << 27);\n@@ -716,12 +710,12 @@ extract_SELID (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_VECTOR8 (unsigned long insn, long vector8, const char ** errmsg)\n+insert_VECTOR8 (unsigned long insn, unsigned long vector8, const char ** errmsg)\n {\n   unsigned long ret;\n-  unsigned long VVV,vvvvv;\n+  unsigned long VVV, vvvvv;\n \n-  if (vector8 > 0xff || vector8 < 0)\n+  if (vector8 > 0xff)\n     * errmsg = _(vector8_out_of_range);\n \n   VVV   = (vector8 & 0xe0) >> 5;\n@@ -751,12 +745,12 @@ extract_VECTOR8 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_VECTOR5 (unsigned long insn, long vector5, const char ** errmsg)\n+insert_VECTOR5 (unsigned long insn, unsigned long vector5, const char ** errmsg)\n {\n   unsigned long ret;\n   unsigned long vvvvv;\n \n-  if (vector5 > 0x1f || vector5 < 0)\n+  if (vector5 > 0x1f)\n     * errmsg = _(vector5_out_of_range);\n \n   vvvvv = (vector5 & 0x1f);\n@@ -780,10 +774,10 @@ extract_VECTOR5 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_CACHEOP (unsigned long insn, long cacheop, const char ** errmsg ATTRIBUTE_UNUSED)\n+insert_CACHEOP (unsigned long insn, unsigned long cacheop, const char ** errmsg ATTRIBUTE_UNUSED)\n {\n   unsigned long ret;\n-  unsigned long pp,PPPPP;\n+  unsigned long pp, PPPPP;\n \n   pp    = (cacheop & 0x60) >> 5;\n   PPPPP = (cacheop & 0x1f);\n@@ -797,7 +791,7 @@ static unsigned long\n extract_CACHEOP (unsigned long insn, int * invalid)\n {\n   unsigned long ret;\n-  unsigned long pp,PPPPP;\n+  unsigned long pp, PPPPP;\n   unsigned long insn2;\n \n   insn2 = insn >> 16;\n@@ -814,7 +808,7 @@ extract_CACHEOP (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_PREFOP (unsigned long insn, long prefop, const char ** errmsg ATTRIBUTE_UNUSED)\n+insert_PREFOP (unsigned long insn, unsigned long prefop, const char ** errmsg ATTRIBUTE_UNUSED)\n {\n   unsigned long ret;\n   unsigned long PPPPP;\n@@ -846,15 +840,15 @@ extract_PREFOP (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_IMM10U (unsigned long insn, long value, const char ** errmsg)\n+insert_IMM10U (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   unsigned long imm10, ret;\n   unsigned long iiiii,IIIII;\n \n-  if (value > 0x3ff || value < 0)\n+  if (value > 0x3ff)\n     * errmsg = _(imm10_out_of_range);\n \n-  imm10 = ((unsigned long) value) & 0x3ff;\n+  imm10 = value & 0x3ff;\n   IIIII = (imm10 >> 5) & 0x1f;\n   iiiii =  imm10       & 0x1f;\n \n@@ -883,15 +877,15 @@ extract_IMM10U (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_SRSEL1 (unsigned long insn, long value, const char ** errmsg)\n+insert_SRSEL1 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   unsigned long imm10, ret;\n   unsigned long sr,selid;\n \n-  if (value > 0x3ff || value < 0)\n+  if (value > 0x3ff)\n     * errmsg = _(sr_selid_out_of_range);\n \n-  imm10 = (unsigned long) value;\n+  imm10 = value;\n   selid = (imm10 & 0x3e0) >> 5;\n   sr    =  imm10 & 0x1f;\n \n@@ -921,15 +915,15 @@ extract_SRSEL1 (unsigned long insn, int * invalid)\n }\n \n static unsigned long\n-insert_SRSEL2 (unsigned long insn, long value, const char ** errmsg)\n+insert_SRSEL2 (unsigned long insn, unsigned long value, const char ** errmsg)\n {\n   unsigned long imm10, ret;\n   unsigned long sr, selid;\n \n-  if (value > 0x3ff || value < 0)\n+  if (value > 0x3ff)\n     * errmsg = _(sr_selid_out_of_range);\n \n-  imm10 = (unsigned long) value;\n+  imm10 = value;\n   selid = (imm10 & 0x3e0) >> 5;\n   sr    =  imm10 & 0x1f;\n "
    }
  ]
}