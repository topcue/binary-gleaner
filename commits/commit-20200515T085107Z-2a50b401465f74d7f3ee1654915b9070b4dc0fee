{
  "sha": "2a50b401465f74d7f3ee1654915b9070b4dc0fee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmE1MGI0MDE0NjVmNzRkN2YzZWUxNjU0OTE1YjkwNzBiNGRjMGZlZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-15T08:36:05Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-15T08:51:07Z"
    },
    "message": "Fix tight loop on recursively-defined symbols\n\nThis patch fixes a bug in GAS where the assembler enters a tight loop\nwhen attempting to resolve recursively-defined symbols, e.g. when\ntrying to assemble \"a=a\".\n\nThis is a regression introduced between binutils 2.32 and 2.33,\nby commit 1903f1385bff9\n\n\t* symbols.c (struct local_symbol): Update comment.\n\t(resolve_symbol_value): For resolved symbols equated to other\n\tsymbols, verify that the referenced symbol is not a local_symbol\n\tbefore accessing sy_value.  Don't leave symbol loops during\n\tfinalize_syms resolution.\n\t* testsuite/gas/all/assign-bad-recursive.d: New test.\n\t* testsuite/gas/all/assign-bad-recursive.l: Error output for test.\n\t* testsuite/gas/all/assign-bad-recursive.s: Assembly for test.\n\t* testsuite/gas/all/gas.exp: Run it.",
    "tree": {
      "sha": "40b5b90d909e7fef28d2f4099d03f1a1ec5f84a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/40b5b90d909e7fef28d2f4099d03f1a1ec5f84a8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2a50b401465f74d7f3ee1654915b9070b4dc0fee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a50b401465f74d7f3ee1654915b9070b4dc0fee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2a50b401465f74d7f3ee1654915b9070b4dc0fee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a50b401465f74d7f3ee1654915b9070b4dc0fee/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a51951c25813b8d6c763f51d78d3756d9ca85ee1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a51951c25813b8d6c763f51d78d3756d9ca85ee1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a51951c25813b8d6c763f51d78d3756d9ca85ee1"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 48,
    "deletions": 3
  },
  "files": [
    {
      "sha": "2a987616ecee5dde864bfea08bafc97fecb1cd38",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=2a50b401465f74d7f3ee1654915b9070b4dc0fee",
      "patch": "@@ -1,3 +1,16 @@\n+2020-05-15  Alan Modra  <amodra@gmail.com>\n+\t    Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* symbols.c (struct local_symbol): Update comment.\n+\t(resolve_symbol_value): For resolved symbols equated to other\n+\tsymbols, verify that the referenced symbol is not a local_symbol\n+\tbefore accessing sy_value.  Don't leave symbol loops during\n+\tfinalize_syms resolution.\n+\t* testsuite/gas/all/assign-bad-recursive.d: New test.\n+\t* testsuite/gas/all/assign-bad-recursive.l: Error output for test.\n+\t* testsuite/gas/all/assign-bad-recursive.s: Assembly for test.\n+\t* testsuite/gas/all/gas.exp: Run it.\n+\n 2020-05-14  Nick Clifton  <nickc@redhat.com>\n \n \t* po/sv.po: Updated Swedish translation."
    },
    {
      "sha": "711730daf1c644b4b5647a5a236406bb1aae272f",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=2a50b401465f74d7f3ee1654915b9070b4dc0fee",
      "patch": "@@ -114,7 +114,7 @@ struct symbol\n /* A pointer in the symbol may point to either a complete symbol\n    (struct symbol above) or to a local symbol (struct local_symbol\n    defined here).  The symbol code can detect the case by examining\n-   the first field.  It is always NULL for a local symbol.\n+   the first field which is present in both structs.\n \n    We do this because we ordinarily only need a small amount of\n    information for a local symbol.  The symbol table takes up a lot of\n@@ -1237,11 +1237,18 @@ resolve_symbol_value (symbolS *symp)\n   if (symp->sy_flags.sy_resolved)\n     {\n       final_val = 0;\n-      while (symp->sy_value.X_op == O_symbol\n-\t     && symp->sy_value.X_add_symbol->sy_flags.sy_resolved)\n+      while (symp->sy_value.X_op == O_symbol)\n \t{\n \t  final_val += symp->sy_value.X_add_number;\n \t  symp = symp->sy_value.X_add_symbol;\n+\t  if (LOCAL_SYMBOL_CHECK (symp))\n+\t    {\n+\t      struct local_symbol *locsym = (struct local_symbol *) symp;\n+\t      final_val += locsym->lsy_value;\n+\t      return final_val;\n+\t    }\n+\t  if (!symp->sy_flags.sy_resolved)\n+\t    return 0;\n \t}\n       if (symp->sy_value.X_op == O_constant)\n \tfinal_val += symp->sy_value.X_add_number;\n@@ -1380,6 +1387,11 @@ resolve_symbol_value (symbolS *symp)\n \t      break;\n \t    }\n \n+\t  /* Don't leave symbol loops.  */\n+\t  if (finalize_syms\n+\t      && add_symbol->sy_flags.sy_resolving)\n+\t    break;\n+\n \t  if (finalize_syms && final_val == 0)\n \t    {\n \t      if (LOCAL_SYMBOL_CHECK (add_symbol))"
    },
    {
      "sha": "aeec5d55f8a0c06d234262b7abc0e2182241fddf",
      "filename": "gas/testsuite/gas/all/assign-bad-recursive.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/assign-bad-recursive.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/assign-bad-recursive.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/assign-bad-recursive.d?ref=2a50b401465f74d7f3ee1654915b9070b4dc0fee",
      "patch": "@@ -0,0 +1,4 @@\n+#name: bad recursive assignments\n+#source: assign-bad-recursive.s\n+#xfail: bfin-*-*\n+#error_output: assign-bad-recursive.l"
    },
    {
      "sha": "70eaf0fe2e350dfa3b9d04f333f31b4685101ab4",
      "filename": "gas/testsuite/gas/all/assign-bad-recursive.l",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/assign-bad-recursive.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/assign-bad-recursive.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/assign-bad-recursive.l?ref=2a50b401465f74d7f3ee1654915b9070b4dc0fee",
      "patch": "@@ -0,0 +1,7 @@\n+[^:]*: Assembler messages:\n+.*: Error: symbol definition loop encountered at `aaa'\n+#...\n+.*: Error: symbol definition loop encountered at `iii'\n+#...\n+.*: Error: symbol definition loop encountered at `xxx'\n+#pass"
    },
    {
      "sha": "21917d91ff67c24c581d7fc32d214e283f1ecbb3",
      "filename": "gas/testsuite/gas/all/assign-bad-recursive.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/assign-bad-recursive.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/assign-bad-recursive.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/assign-bad-recursive.s?ref=2a50b401465f74d7f3ee1654915b9070b4dc0fee",
      "patch": "@@ -0,0 +1,8 @@\n+ aaa = aaa\n+\n+ iii = jjj\n+ jjj = iii\n+\n+ xxx = yyy\n+ yyy = zzz\n+ zzz = xxx"
    },
    {
      "sha": "1664018c0f93d613a01d3f8ceef7625320c8a5f3",
      "filename": "gas/testsuite/gas/all/gas.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/gas.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a50b401465f74d7f3ee1654915b9070b4dc0fee/gas/testsuite/gas/all/gas.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/gas.exp?ref=2a50b401465f74d7f3ee1654915b9070b4dc0fee",
      "patch": "@@ -97,6 +97,7 @@ if { ![istarget \"bfin-*-*\"] } then {\n     gas_test \"assign-ok.s\" \"\" \"\" \"== assignment support\"\n }\n gas_test_error \"assign-bad.s\" \"\" \"== assignment for symbol already set\"\n+run_dump_test assign-bad-recursive\n \n run_dump_test simple-forward\n run_dump_test forward"
    }
  ]
}