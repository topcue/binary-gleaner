{
  "sha": "7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
  "node_id": "C_kwDOANOeidoAKDcwNjBjMjhlZGQxNmE4NzFmZTFmOGVkYWE4ZTQ5MDgzYTM5YjdlZTU",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-11-25T13:11:25Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-11-25T13:11:25Z"
    },
    "message": "Fix building the AArch64 assembler and disassembler when assertions are disabled.\n\n\tPR 28614\n\t* aarch64-asm.c: Replace assert(0) with real code.\n\t* aarch64-dis.c: Likewise.\n\t* aarch64-opc.c: Likewise.",
    "tree": {
      "sha": "89399f732c4a47604f0772a45e206954d9f6e2de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/89399f732c4a47604f0772a45e206954d9f6e2de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a41ad3474ceacba39e11c7478154c0e553784a01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a41ad3474ceacba39e11c7478154c0e553784a01",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a41ad3474ceacba39e11c7478154c0e553784a01"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 45,
    "deletions": 32
  },
  "files": [
    {
      "sha": "1e605183bc4434fd82cbd076b54cda3973cd957f",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
      "patch": "@@ -1,3 +1,10 @@\n+2021-11-25  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 28614\n+\t* aarch64-asm.c: Replace assert(0) with real code.\n+\t* aarch64-dis.c: Likewise.\n+\t* aarch64-opc.c: Likewise.\n+\n 2021-11-25  Nick Clifton  <nickc@redhat.com>\n \n \t* po/fr.po; Updated French translation."
    },
    {
      "sha": "9b66fd34c7ec63929fcb153c782df97dd925a79a",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
      "patch": "@@ -147,7 +147,7 @@ aarch64_ins_reglane (const aarch64_operand *self, const aarch64_opnd_info *info,\n \t  insert_fields (code, reglane_index, 0, 2, FLD_L, FLD_H);\n \t  break;\n \tdefault:\n-\t  assert (0);\n+\t  return false;\n \t}\n     }\n   else if (inst->opcode->iclass == cryptosm3)\n@@ -185,7 +185,7 @@ aarch64_ins_reglane (const aarch64_operand *self, const aarch64_opnd_info *info,\n \t  insert_field (FLD_H, code, reglane_index, 0);\n \t  break;\n \tdefault:\n-\t  assert (0);\n+\t  return false;\n \t}\n     }\n   return true;\n@@ -229,7 +229,7 @@ aarch64_ins_ldst_reglist (const aarch64_operand *self ATTRIBUTE_UNUSED,\n \tcase 2: value = 0xa; break;\n \tcase 3: value = 0x6; break;\n \tcase 4: value = 0x2; break;\n-\tdefault: assert (0);\n+\tdefault: return false;\n \t}\n       break;\n     case 2:\n@@ -242,7 +242,7 @@ aarch64_ins_ldst_reglist (const aarch64_operand *self ATTRIBUTE_UNUSED,\n       value = 0x0;\n       break;\n     default:\n-      assert (0);\n+      return false;\n     }\n   insert_field (FLD_opcode, code, value, 0);\n \n@@ -315,7 +315,7 @@ aarch64_ins_ldst_elemlist (const aarch64_operand *self ATTRIBUTE_UNUSED,\n       opcodeh2 = 0x2;\n       break;\n     default:\n-      assert (0);\n+      return false;\n     }\n   insert_fields (code, QSsize, 0, 3, FLD_vldst_size, FLD_S, FLD_Q);\n   gen_sub_field (FLD_asisdlso_opcode, 1, 2, &field);\n@@ -605,7 +605,7 @@ aarch64_ins_ft (const aarch64_operand *self, const aarch64_opnd_info *info,\n \tcase AARCH64_OPND_QLF_S_S: value = 0; break;\n \tcase AARCH64_OPND_QLF_S_D: value = 1; break;\n \tcase AARCH64_OPND_QLF_S_Q: value = 2; break;\n-\tdefault: assert (0);\n+\tdefault: return false;\n \t}\n       insert_field (FLD_ldst_size, code, value, 0);\n     }\n@@ -1372,7 +1372,7 @@ aarch64_ins_sme_za_hv_tiles (const aarch64_operand *self,\n       fld_zan_imm = regno;\n       break;\n     default:\n-      assert (0);\n+      return false;\n     }\n \n   insert_field (self->fields[0], code, fld_size, 0);\n@@ -1446,7 +1446,7 @@ aarch64_ins_sme_sm_za (const aarch64_operand *self,\n   else if (info->reg.regno == 'z')\n     fld_crm = 0x04; /* SVCRZA.  */\n   else\n-    assert (0);\n+    return false;\n \n   insert_field (self->fields[0], code, fld_crm, 0);\n   return true;\n@@ -1510,7 +1510,7 @@ aarch64_ins_sme_pred_reg_with_index (const aarch64_operand *self,\n       fld_tshl = 0x0;\n       break;\n     default:\n-      assert (0);\n+      return false;\n   }\n \n   insert_field (self->fields[2], code, fld_i1, 0);\n@@ -1544,7 +1544,7 @@ encode_asimd_fcvt (aarch64_inst *inst)\n       qualifier = inst->operands[0].qualifier;\n       break;\n     default:\n-      assert (0);\n+      return;\n     }\n   assert (qualifier == AARCH64_OPND_QLF_V_4S\n \t  || qualifier == AARCH64_OPND_QLF_V_2D);\n@@ -1749,7 +1749,7 @@ do_special_encoding (struct aarch64_inst *inst)\n \tcase AARCH64_OPND_QLF_S_S: value = 0; break;\n \tcase AARCH64_OPND_QLF_S_D: value = 1; break;\n \tcase AARCH64_OPND_QLF_S_H: value = 3; break;\n-\tdefault: assert (0);\n+\tdefault: return;\n \t}\n       insert_field (FLD_type, &inst->value, value, 0);\n     }\n@@ -2098,13 +2098,13 @@ convert_mov_to_movewide (aarch64_inst *inst)\n       value = ~inst->operands[1].imm.value;\n       break;\n     default:\n-      assert (0);\n+      return;\n     }\n   inst->operands[1].type = AARCH64_OPND_HALF;\n   is32 = inst->operands[0].qualifier == AARCH64_OPND_QLF_W;\n   if (! aarch64_wide_constant_p (value, is32, &shift_amount))\n     /* The constraint check should have guaranteed this wouldn't happen.  */\n-    assert (0);\n+    return;\n   value >>= shift_amount;\n   value &= 0xffff;\n   inst->operands[1].imm.value = value;"
    },
    {
      "sha": "46d602de07f1c2149286a427facd3b120913ba98",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 17,
      "deletions": 16,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
      "patch": "@@ -754,7 +754,7 @@ aarch64_ext_advsimd_imm_modified (const aarch64_operand *self ATTRIBUTE_UNUSED,\n \tcase 4: gen_sub_field (FLD_cmode, 1, 2, &field); break;\t/* per word */\n \tcase 2: gen_sub_field (FLD_cmode, 1, 1, &field); break;\t/* per half */\n \tcase 1: gen_sub_field (FLD_cmode, 1, 0, &field); break;\t/* per byte */\n-\tdefault: assert (0); return false;\n+\tdefault: return false;\n \t}\n       /* 00: 0; 01: 8; 10:16; 11:24.  */\n       info->shifter.amount = extract_field_2 (&field, code, 0) << 3;\n@@ -766,7 +766,6 @@ aarch64_ext_advsimd_imm_modified (const aarch64_operand *self ATTRIBUTE_UNUSED,\n       info->shifter.amount = extract_field_2 (&field, code, 0) ? 16 : 8;\n       break;\n     default:\n-      assert (0);\n       return false;\n     }\n \n@@ -908,7 +907,7 @@ decode_limm (uint32_t esize, aarch64_insn value, int64_t *result)\n     case 32: imm = (imm << 32) | imm;\n       /* Fall through.  */\n     case 64: break;\n-    default: assert (0); return 0;\n+    default: return 0;\n     }\n \n   *result = imm & ~((uint64_t) -1 << (esize * 4) << (esize * 4));\n@@ -1276,7 +1275,7 @@ aarch64_ext_sysins_op (const aarch64_operand *self ATTRIBUTE_UNUSED,\n \t    aarch64_sys_regs_sr[].  */\n \tvalue = value & ~(0x7);\n \tbreak;\n-    default: assert (0); return false;\n+    default: return false;\n     }\n \n   for (i = 0; sysins_ops[i].name != NULL; ++i)\n@@ -1813,7 +1812,7 @@ aarch64_ext_sme_za_hv_tiles (const aarch64_operand *self,\n       info->za_tile_vector.index.imm = 0;\n       break;\n     default:\n-      assert (0);\n+      return false;\n     }\n \n   return true;\n@@ -1885,7 +1884,7 @@ aarch64_ext_sme_sm_za (const aarch64_operand *self,\n   else if (fld_crm == 0x2)\n     info->reg.regno = 'z';\n   else\n-    assert (0);\n+    return false;\n \n   return true;\n }\n@@ -2204,7 +2203,6 @@ decode_asimd_fcvt (aarch64_inst *inst)\n       inst->operands[0].qualifier = qualifier;\n       break;\n     default:\n-      assert (0);\n       return 0;\n     }\n \n@@ -2915,12 +2913,16 @@ determine_disassembling_preference (struct aarch64_inst *inst,\n \t     successfully converted to the form of ALIAS.  */\n \t  if (convert_to_alias (&copy, alias) == 1)\n \t    {\n-\t      int res;\n \t      aarch64_replace_opcode (&copy, alias);\n-\t      res = aarch64_match_operands_constraint (&copy, NULL);\n-\t      assert (res == 1);\n-\t      DEBUG_TRACE (\"succeed with %s via conversion\", alias->name);\n-\t      memcpy (inst, &copy, sizeof (aarch64_inst));\n+\t      if (aarch64_match_operands_constraint (&copy, NULL) != 1)\n+\t\t{\n+\t\t  DEBUG_TRACE (\"FAILED with alias %s \", alias->name);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  DEBUG_TRACE (\"succeed with %s via conversion\", alias->name);\n+\t\t  memcpy (inst, &copy, sizeof (aarch64_inst));\n+\t\t}\n \t      return;\n \t    }\n \t}\n@@ -3408,13 +3410,12 @@ print_aarch64_insn (bfd_vma pc, const aarch64_inst *inst,\n \t\t\t\t\t     mismatch_details, &insn_sequence);\n   switch (result)\n     {\n-    case ERR_UND:\n-    case ERR_UNP:\n-    case ERR_NYI:\n-      assert (0);\n     case ERR_VFI:\n       print_verifier_notes (mismatch_details, info);\n       break;\n+    case ERR_UND:\n+    case ERR_UNP:\n+    case ERR_NYI:\n     default:\n       break;\n     }"
    },
    {
      "sha": "ef0ba8a68f4cd430651763492604d99f97a0dc1d",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7060c28edd16a871fe1f8edaa8e49083a39b7ee5/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=7060c28edd16a871fe1f8edaa8e49083a39b7ee5",
      "patch": "@@ -3595,7 +3595,9 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \t  snprintf (buf, size, \"#0x%-20\" PRIx64 \"\\t// #%\" PRIi64,\n \t\t    opnd->imm.value, opnd->imm.value);\n \t  break;\n-\tdefault: assert (0);\n+\tdefault:\n+\t  snprintf (buf, size, \"<invalid>\");\n+\t  break;\n \t}\n       break;\n \n@@ -3662,7 +3664,9 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \t      snprintf (buf, size,  \"#%.18e\", c.d);\n \t    }\n \t  break;\n-\tdefault: assert (0);\n+\tdefault:\n+\t  snprintf (buf, size, \"<invalid>\");\n+\t  break;\n \t}\n       break;\n \n@@ -3934,7 +3938,8 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n       break;\n \n     default:\n-      assert (0);\n+      snprintf (buf, size, \"<invalid>\");\n+      break;\n     }\n }\n \f"
    }
  ]
}