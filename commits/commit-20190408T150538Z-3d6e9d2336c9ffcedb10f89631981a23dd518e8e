{
  "sha": "3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q2ZTlkMjMzNmM5ZmZjZWRiMTBmODk2MzE5ODFhMjNkZDUxOGU4ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-28T17:11:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-08T15:05:38Z"
    },
    "message": "Make exceptions use std::string and be self-managing\n\nThis changes the exception's \"message\" member to be a shared_ptr\nwrapping a std::string.  This allows removing the stack of exception\nmessages, because now exceptions will self-destruct when needed.  This\nalso adds a noexcept copy constructor and operator= to gdb_exception,\nplus a \"what\" method.\n\ngdb/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* xml-support.c (gdb_xml_parser::parse): Update.\n\t* x86-linux-nat.c (x86_linux_nat_target::enable_btrace): Update.\n\t* value.c (show_convenience): Update.\n\t* unittests/cli-utils-selftests.c (test_number_or_range_parser)\n\t(test_parse_flags_qcs): Update.\n\t* thread.c (thr_try_catch_cmd): Update.\n\t* target.c (target_translate_tls_address): Update.\n\t* stack.c (print_frame_arg, read_frame_local, read_frame_arg)\n\t(info_frame_command_core, frame_apply_command_count): Update.\n\t* rust-exp.y (rust_lex_exception_test): Update.\n\t* riscv-tdep.c (riscv_print_one_register_info): Update.\n\t* remote.c (remote_target::enable_btrace): Update.\n\t* record-btrace.c (record_btrace_enable_warn): Update.\n\t* python/py-utils.c (gdbpy_convert_exception): Update.\n\t* printcmd.c (do_one_display, print_variable_and_value): Update.\n\t* mi/mi-main.c (mi_print_exception): Update.\n\t* mi/mi-interp.c (mi_cmd_interpreter_exec): Use SCOPE_EXIT.\n\t* mi/mi-cmd-stack.c (list_arg_or_local): Update.\n\t* linux-nat.c (linux_nat_target::attach): Update.\n\t* linux-fork.c (class scoped_switch_fork_info): Update.\n\t* infrun.c (displaced_step_prepare): Update.\n\t* infcall.c (call_function_by_hand_dummy): Update.\n\t* guile/scm-exception.c (gdbscm_scm_from_gdb_exception): Update.\n\t* gnu-v3-abi.c (print_one_vtable): Update.\n\t* frame.c (get_prev_frame_always): Update.\n\t* f-valprint.c (info_common_command_for_block): Update.\n\t* exec.c (try_open_exec_file): Update.\n\t* exceptions.c (print_exception, exception_print)\n\t(exception_fprintf, exception_print_same): Update.\n\t* dwarf2-frame.c (dwarf2_build_frame_info): Update.\n\t* dwarf-index-cache.c (index_cache::store)\n\t(index_cache::lookup_gdb_index): Update.\n\t* darwin-nat.c (maybe_cache_shell): Update.\n\t* cp-valprint.c (cp_print_value_fields): Update.\n\t* compile/compile-cplus-symbols.c (gcc_cplus_convert_symbol)\n\t(gcc_cplus_symbol_address): Update.\n\t* compile/compile-c-symbols.c (gcc_convert_symbol)\n\t(gcc_symbol_address, generate_c_for_for_one_variable): Update.\n\t* common/selftest.c: Update.\n\t* common/common-exceptions.h (struct gdb_exception) <message>: Now\n\ta std::string.\n\t(exception_try_scope_entry, exception_try_scope_exit): Don't\n\tdeclare.\n\t(struct exception_try_scope): Remove.\n\t(TRY): Don't use exception_try_scope.\n\t(struct gdb_exception): Add constructor, operator=.\n\t<what>: New method.\n\t(struct gdb_exception_RETURN_MASK_ALL)\n\t(struct gdb_exception_RETURN_MASK_ERROR)\n\t(struct gdb_exception_RETURN_MASK_QUIT): Add constructor.\n\t(struct gdb_quit_bad_alloc): Update.\n\t* common/common-exceptions.c (exception_none): Change\n\tinitializer.\n\t(struct catcher) <state, exception>: Initialize inline.\n\t<prev>: Remove member.\n\t(current_catcher): Remove.\n\t(catchers): New global.\n\t(exceptions_state_mc_init): Simplify.\n\t(catcher_pop): Remove.\n\t(exceptions_state_mc, exceptions_state_mc_catch): Update.\n\t(try_scope_depth, exception_try_scope_entry)\n\t(exception_try_scope_exit): Remove.\n\t(throw_exception_sjlj): Update.\n\t(exception_messages, exception_messages_size): Remove.\n\t(throw_it): Simplify.\n\t(gdb_exception_sliced_copy): Remove.\n\t(throw_exception_cxx): Update.\n\t* cli/cli-script.c (script_from_file): Update.\n\t* breakpoint.c (insert_bp_location, update_breakpoint_locations):\n\tUpdate.\n\t* ada-valprint.c (ada_val_print): Update.\n\t* ada-lang.c (ada_to_fixed_type_1, ada_exception_name_addr)\n\t(create_excep_cond_exprs): Update.\n\ngdb/gdbserver/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* server.c (handle_btrace_general_set, handle_qxfer_btrace)\n\t(handle_qxfer_btrace_conf, detach_or_kill_for_exit_cleanup)\n\t(captured_main, main): Update.\n\t* gdbreplay.c (main): Update.",
    "tree": {
      "sha": "39663735f1d7848d067ea80bc23ee88c09aabc4a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/39663735f1d7848d067ea80bc23ee88c09aabc4a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c5c10118216867e133c132b4f46e19fb6aa9258a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5c10118216867e133c132b4f46e19fb6aa9258a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c5c10118216867e133c132b4f46e19fb6aa9258a"
    }
  ],
  "stats": {
    "total": 498,
    "additions": 253,
    "deletions": 245
  },
  "files": [
    {
      "sha": "fb579b955bc0204e9578cc249ccf8cc5441a570d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 76,
      "deletions": 0,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1,3 +1,79 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* xml-support.c (gdb_xml_parser::parse): Update.\n+\t* x86-linux-nat.c (x86_linux_nat_target::enable_btrace): Update.\n+\t* value.c (show_convenience): Update.\n+\t* unittests/cli-utils-selftests.c (test_number_or_range_parser)\n+\t(test_parse_flags_qcs): Update.\n+\t* thread.c (thr_try_catch_cmd): Update.\n+\t* target.c (target_translate_tls_address): Update.\n+\t* stack.c (print_frame_arg, read_frame_local, read_frame_arg)\n+\t(info_frame_command_core, frame_apply_command_count): Update.\n+\t* rust-exp.y (rust_lex_exception_test): Update.\n+\t* riscv-tdep.c (riscv_print_one_register_info): Update.\n+\t* remote.c (remote_target::enable_btrace): Update.\n+\t* record-btrace.c (record_btrace_enable_warn): Update.\n+\t* python/py-utils.c (gdbpy_convert_exception): Update.\n+\t* printcmd.c (do_one_display, print_variable_and_value): Update.\n+\t* mi/mi-main.c (mi_print_exception): Update.\n+\t* mi/mi-interp.c (mi_cmd_interpreter_exec): Use SCOPE_EXIT.\n+\t* mi/mi-cmd-stack.c (list_arg_or_local): Update.\n+\t* linux-nat.c (linux_nat_target::attach): Update.\n+\t* linux-fork.c (class scoped_switch_fork_info): Update.\n+\t* infrun.c (displaced_step_prepare): Update.\n+\t* infcall.c (call_function_by_hand_dummy): Update.\n+\t* guile/scm-exception.c (gdbscm_scm_from_gdb_exception): Update.\n+\t* gnu-v3-abi.c (print_one_vtable): Update.\n+\t* frame.c (get_prev_frame_always): Update.\n+\t* f-valprint.c (info_common_command_for_block): Update.\n+\t* exec.c (try_open_exec_file): Update.\n+\t* exceptions.c (print_exception, exception_print)\n+\t(exception_fprintf, exception_print_same): Update.\n+\t* dwarf2-frame.c (dwarf2_build_frame_info): Update.\n+\t* dwarf-index-cache.c (index_cache::store)\n+\t(index_cache::lookup_gdb_index): Update.\n+\t* darwin-nat.c (maybe_cache_shell): Update.\n+\t* cp-valprint.c (cp_print_value_fields): Update.\n+\t* compile/compile-cplus-symbols.c (gcc_cplus_convert_symbol)\n+\t(gcc_cplus_symbol_address): Update.\n+\t* compile/compile-c-symbols.c (gcc_convert_symbol)\n+\t(gcc_symbol_address, generate_c_for_for_one_variable): Update.\n+\t* common/selftest.c: Update.\n+\t* common/common-exceptions.h (struct gdb_exception) <message>: Now\n+\ta std::string.\n+\t(exception_try_scope_entry, exception_try_scope_exit): Don't\n+\tdeclare.\n+\t(struct exception_try_scope): Remove.\n+\t(TRY): Don't use exception_try_scope.\n+\t(struct gdb_exception): Add constructor, operator=.\n+\t<what>: New method.\n+\t(struct gdb_exception_RETURN_MASK_ALL)\n+\t(struct gdb_exception_RETURN_MASK_ERROR)\n+\t(struct gdb_exception_RETURN_MASK_QUIT): Add constructor.\n+\t(struct gdb_quit_bad_alloc): Update.\n+\t* common/common-exceptions.c (exception_none): Change\n+\tinitializer.\n+\t(struct catcher) <state, exception>: Initialize inline.\n+\t<prev>: Remove member.\n+\t(current_catcher): Remove.\n+\t(catchers): New global.\n+\t(exceptions_state_mc_init): Simplify.\n+\t(catcher_pop): Remove.\n+\t(exceptions_state_mc, exceptions_state_mc_catch): Update.\n+\t(try_scope_depth, exception_try_scope_entry)\n+\t(exception_try_scope_exit): Remove.\n+\t(throw_exception_sjlj): Update.\n+\t(exception_messages, exception_messages_size): Remove.\n+\t(throw_it): Simplify.\n+\t(gdb_exception_sliced_copy): Remove.\n+\t(throw_exception_cxx): Update.\n+\t* cli/cli-script.c (script_from_file): Update.\n+\t* breakpoint.c (insert_bp_location, update_breakpoint_locations):\n+\tUpdate.\n+\t* ada-valprint.c (ada_val_print): Update.\n+\t* ada-lang.c (ada_to_fixed_type_1, ada_exception_name_addr)\n+\t(create_excep_cond_exprs): Update.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* common/common-exceptions.h (GDB_XCPT_SJMP, GDB_XCPT_TRY)"
    },
    {
      "sha": "19cc22d306e149a7302d8d3a59c2e51326765ab1",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -9067,7 +9067,7 @@ ada_to_fixed_type_1 (struct type *type, const gdb_byte *valaddr,\n \t\t   optimized out).  */\n \t\tthrow_error (except.error,\n \t\t\t     _(\"unable to read value of %s (%s)\"),\n-\t\t\t     xvz_name, except.message);\n+\t\t\t     xvz_name, except.what ());\n \t      }\n \t    END_CATCH\n \n@@ -12377,7 +12377,7 @@ ada_exception_name_addr (enum ada_exception_catchpoint_kind ex,\n \n   CATCH (e, RETURN_MASK_ERROR)\n     {\n-      warning (_(\"failed to get exception name: %s\"), e.message);\n+      warning (_(\"failed to get exception name: %s\"), e.what ());\n       return 0;\n     }\n   END_CATCH\n@@ -12471,7 +12471,7 @@ create_excep_cond_exprs (struct ada_catchpoint *c,\n \t    {\n \t      warning (_(\"failed to reevaluate internal exception condition \"\n \t\t\t \"for catchpoint %d: %s\"),\n-\t\t       c->number, e.message);\n+\t\t       c->number, e.what ());\n \t    }\n \t  END_CATCH\n \t}"
    },
    {
      "sha": "ac963a67561783fc10b0f61a96173d7106f5f217",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1212,7 +1212,7 @@ ada_val_print (struct type *type,\n   CATCH (except, RETURN_MASK_ERROR)\n     {\n       fprintf_filtered (stream, _(\"<error reading variable: %s>\"),\n-\t\t\texcept.message);\n+\t\t\texcept.what ());\n     }\n   END_CATCH\n }"
    },
    {
      "sha": "6e835a5f6bc6ef6d669d945a1cf5ce21b9d4f922",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -2675,7 +2675,7 @@ insert_bp_location (struct bp_location *bl,\n \t\t\t\t      bp_excpt.message ? \":\" : \".\\n\");\n                   if (bp_excpt.message != NULL)\n                     fprintf_unfiltered (tmp_error_stream, \"%s.\\n\",\n-\t\t\t\t\tbp_excpt.message);\n+\t\t\t\t\tbp_excpt.what ());\n \t\t}\n \t      else\n \t\t{\n@@ -2695,7 +2695,7 @@ insert_bp_location (struct bp_location *bl,\n \t\t      fprintf_unfiltered (tmp_error_stream,\n \t\t\t\t\t  \"Cannot insert breakpoint %d: %s\\n\",\n \t\t\t\t\t  bl->owner->number,\n-\t\t\t\t\t  bp_excpt.message);\n+\t\t\t\t\t  bp_excpt.what ());\n \t\t    }\n \t\t}\n \t      return 1;\n@@ -13539,7 +13539,7 @@ update_breakpoint_locations (struct breakpoint *b,\n \t    {\n \t      warning (_(\"failed to reevaluate condition \"\n \t\t\t \"for breakpoint %d: %s\"), \n-\t\t       b->number, e.message);\n+\t\t       b->number, e.what ());\n \t      new_loc->enabled = 0;\n \t    }\n \t  END_CATCH"
    },
    {
      "sha": "f558c06f830abaeabe16141d162397ae39446011",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1550,7 +1550,8 @@ script_from_file (FILE *stream, const char *file)\n \t prepended.  */\n       throw_error (e.error,\n \t\t   _(\"%s:%d: Error in sourced command file:\\n%s\"),\n-\t\t   source_file_name.c_str (), source_line_number, e.message);\n+\t\t   source_file_name.c_str (), source_line_number,\n+\t\t   e.what ());\n     }\n   END_CATCH\n }"
    },
    {
      "sha": "b2d8e25793286e80f95bc45831f256c6934bde54",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 21,
      "deletions": 112,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -19,8 +19,9 @@\n \n #include \"common-defs.h\"\n #include \"common-exceptions.h\"\n+#include <forward_list>\n \n-const struct gdb_exception exception_none = { (enum return_reason) 0, GDB_NO_ERROR, NULL };\n+const struct gdb_exception exception_none;\n \n /* Possible catcher states.  */\n enum catcher_state {\n@@ -42,42 +43,21 @@ enum catcher_action {\n \n struct catcher\n {\n-  enum catcher_state state;\n+  enum catcher_state state = CATCHER_CREATED;\n   /* Jump buffer pointing back at the exception handler.  */\n   jmp_buf buf;\n   /* Status buffer belonging to the exception handler.  */\n-  struct gdb_exception exception;\n-  /* Back link.  */\n-  struct catcher *prev;\n+  struct gdb_exception exception = exception_none;\n };\n \n /* Where to go for throw_exception().  */\n-static struct catcher *current_catcher;\n+static std::forward_list<struct catcher> catchers;\n \n jmp_buf *\n-exceptions_state_mc_init (void)\n+exceptions_state_mc_init ()\n {\n-  struct catcher *new_catcher = XCNEW (struct catcher);\n-\n-  /* Start with no exception.  */\n-  new_catcher->exception = exception_none;\n-\n-  /* Push this new catcher on the top.  */\n-  new_catcher->prev = current_catcher;\n-  current_catcher = new_catcher;\n-  new_catcher->state = CATCHER_CREATED;\n-\n-  return &new_catcher->buf;\n-}\n-\n-static void\n-catcher_pop (void)\n-{\n-  struct catcher *old_catcher = current_catcher;\n-\n-  current_catcher = old_catcher->prev;\n-\n-  xfree (old_catcher);\n+  catchers.emplace_front ();\n+  return &catchers.front ().buf;\n }\n \n /* Catcher state machine.  Returns non-zero if the m/c should be run\n@@ -86,14 +66,14 @@ catcher_pop (void)\n static int\n exceptions_state_mc (enum catcher_action action)\n {\n-  switch (current_catcher->state)\n+  switch (catchers.front ().state)\n     {\n     case CATCHER_CREATED:\n       switch (action)\n \t{\n \tcase CATCH_ITER:\n \t  /* Allow the code to run the catcher.  */\n-\t  current_catcher->state = CATCHER_RUNNING;\n+\t  catchers.front ().state = CATCHER_RUNNING;\n \t  return 1;\n \tdefault:\n \t  internal_error (__FILE__, __LINE__, _(\"bad state\"));\n@@ -105,10 +85,10 @@ exceptions_state_mc (enum catcher_action action)\n \t  /* No error/quit has occured.  */\n \t  return 0;\n \tcase CATCH_ITER_1:\n-\t  current_catcher->state = CATCHER_RUNNING_1;\n+\t  catchers.front ().state = CATCHER_RUNNING_1;\n \t  return 1;\n \tcase CATCH_THROWING:\n-\t  current_catcher->state = CATCHER_ABORTING;\n+\t  catchers.front ().state = CATCHER_ABORTING;\n \t  /* See also throw_exception.  */\n \t  return 1;\n \tdefault:\n@@ -121,10 +101,10 @@ exceptions_state_mc (enum catcher_action action)\n \t  /* The did a \"break\" from the inner while loop.  */\n \t  return 0;\n \tcase CATCH_ITER_1:\n-\t  current_catcher->state = CATCHER_RUNNING;\n+\t  catchers.front ().state = CATCHER_RUNNING;\n \t  return 0;\n \tcase CATCH_THROWING:\n-\t  current_catcher->state = CATCHER_ABORTING;\n+\t  catchers.front ().state = CATCHER_ABORTING;\n \t  /* See also throw_exception.  */\n \t  return 1;\n \tdefault:\n@@ -152,8 +132,8 @@ int\n exceptions_state_mc_catch (struct gdb_exception *exception,\n \t\t\t   int mask)\n {\n-  *exception = current_catcher->exception;\n-  catcher_pop ();\n+  *exception = std::move (catchers.front ().exception);\n+  catchers.pop_front ();\n \n   if (exception->reason < 0)\n     {\n@@ -185,29 +165,6 @@ exceptions_state_mc_action_iter_1 (void)\n   return exceptions_state_mc (CATCH_ITER_1);\n }\n \n-/* How many nested TRY blocks we have.  See exception_messages and\n-   throw_it.  */\n-\n-static int try_scope_depth;\n-\n-/* Called on entry to a TRY scope.  */\n-\n-void *\n-exception_try_scope_entry (void)\n-{\n-  ++try_scope_depth;\n-  return nullptr;\n-}\n-\n-/* Called on exit of a TRY scope, either normal exit or exception\n-   exit.  */\n-\n-void\n-exception_try_scope_exit (void *saved_state)\n-{\n-  --try_scope_depth;\n-}\n-\n /* Called by the default catch block.  IOW, we'll get here before\n    jumping out to the next outermost scope an exception if a GDB\n    exception is not caught.  */\n@@ -218,14 +175,6 @@ exception_rethrow (void)\n   throw;\n }\n \n-/* Copy the 'gdb_exception' portion of FROM to TO.  */\n-\n-static void\n-gdb_exception_sliced_copy (struct gdb_exception *to, const struct gdb_exception *from)\n-{\n-  *to = *from;\n-}\n-\n /* Return EXCEPTION to the nearest containing CATCH_SJLJ block.  */\n \n void\n@@ -235,8 +184,8 @@ throw_exception_sjlj (struct gdb_exception exception)\n      that call via setjmp's return value.  Note that REASON can't be\n      zero, by definition in common-exceptions.h.  */\n   exceptions_state_mc (CATCH_THROWING);\n-  current_catcher->exception = exception;\n-  longjmp (current_catcher->buf, exception.reason);\n+  catchers.front ().exception = exception;\n+  longjmp (catchers.front ().buf, exception.reason);\n }\n \n /* Implementation of throw_exception that uses C++ try/catch.  */\n@@ -246,16 +195,12 @@ throw_exception_cxx (struct gdb_exception exception)\n {\n   if (exception.reason == RETURN_QUIT)\n     {\n-      gdb_exception_RETURN_MASK_QUIT ex;\n-\n-      gdb_exception_sliced_copy (&ex, &exception);\n+      gdb_exception_RETURN_MASK_QUIT ex (exception);\n       throw ex;\n     }\n   else if (exception.reason == RETURN_ERROR)\n     {\n-      gdb_exception_RETURN_MASK_ERROR ex;\n-\n-      gdb_exception_sliced_copy (&ex, &exception);\n+      gdb_exception_RETURN_MASK_ERROR ex (exception);\n       throw ex;\n     }\n   else\n@@ -268,52 +213,16 @@ throw_exception (struct gdb_exception exception)\n   throw_exception_cxx (exception);\n }\n \n-/* A stack of exception messages.\n-   This is needed to handle nested calls to throw_it: we don't want to\n-   xfree space for a message before it's used.\n-   This can happen if we throw an exception during a cleanup:\n-   An outer TRY_CATCH may have an exception message it wants to print,\n-   but while doing cleanups further calls to throw_it are made.\n-\n-   This is indexed by the size of the current_catcher list.\n-   It is a dynamically allocated array so that we don't care how deeply\n-   GDB nests its TRY_CATCHs.  */\n-static char **exception_messages;\n-\n-/* The number of currently allocated entries in exception_messages.  */\n-static int exception_messages_size;\n-\n static void ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF (3, 0)\n throw_it (enum return_reason reason, enum errors error, const char *fmt,\n \t  va_list ap)\n {\n   struct gdb_exception e;\n-  char *new_message;\n-  int depth = try_scope_depth;\n-\n-  gdb_assert (depth > 0);\n-\n-  /* Note: The new message may use an old message's text.  */\n-  new_message = xstrvprintf (fmt, ap);\n-\n-  if (depth > exception_messages_size)\n-    {\n-      int old_size = exception_messages_size;\n-\n-      exception_messages_size = depth + 10;\n-      exception_messages = XRESIZEVEC (char *, exception_messages,\n-\t\t\t\t       exception_messages_size);\n-      memset (exception_messages + old_size, 0,\n-\t      (exception_messages_size - old_size) * sizeof (char *));\n-    }\n-\n-  xfree (exception_messages[depth - 1]);\n-  exception_messages[depth - 1] = new_message;\n \n   /* Create the exception.  */\n   e.reason = reason;\n   e.error = error;\n-  e.message = new_message;\n+  e.message.reset (new std::string (string_vprintf (fmt, ap)));\n \n   /* Throw the exception.  */\n   throw_exception (e);"
    },
    {
      "sha": "54e7404f046e7a2391e22ad7cc17c84e99e21cb2",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 55,
      "deletions": 26,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -22,6 +22,7 @@\n \n #include <setjmp.h>\n #include <new>\n+#include <memory>\n \n /* Reasons for calling throw_exceptions().  NOTE: all reason values\n    must be different from zero.  enum value 0 is reserved for internal\n@@ -110,9 +111,47 @@ enum errors {\n \n struct gdb_exception\n {\n+  gdb_exception ()\n+    : reason ((enum return_reason) 0),\n+      error (GDB_NO_ERROR)\n+  {\n+  }\n+\n+  gdb_exception (enum return_reason r, enum errors e)\n+    : reason (r),\n+      error (e)\n+  {\n+  }\n+\n+  /* The copy constructor exists so that we can mark it \"noexcept\",\n+     which is a good practice for any sort of exception object.  */\n+  gdb_exception (const gdb_exception &other) noexcept\n+    : reason (other.reason),\n+      error (other.error),\n+      message (other.message)\n+  {\n+  }\n+\n+  /* The assignment operator exists so that we can mark it \"noexcept\",\n+     which is a good practice for any sort of exception object.  */\n+  gdb_exception &operator= (const gdb_exception &other) noexcept\n+  {\n+    reason = other.reason;\n+    error = other.error;\n+    message = other.message;\n+    return *this;\n+  }\n+\n+  /* Return the contents of the exception message, as a C string.  The\n+     string remains owned by the exception object.  */\n+  const char *what () const noexcept\n+  {\n+    return message->c_str ();\n+  }\n+\n   enum return_reason reason;\n   enum errors error;\n-  const char *message;\n+  std::shared_ptr<std::string> message;\n };\n \n /* Functions to drive the sjlj-based exceptions state machine.  Though\n@@ -127,8 +166,6 @@ extern int exceptions_state_mc_catch (struct gdb_exception *, int);\n \n /* For the C++ try/catch-based TRY/CATCH mechanism.  */\n \n-extern void *exception_try_scope_entry (void);\n-extern void exception_try_scope_exit (void *saved_state);\n extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n \n /* Macro to wrap up standard try/catch behavior.\n@@ -178,23 +215,6 @@ extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n #define END_CATCH_SJLJ\t\t\t\t\\\n   }\n \n-/* Prevent error/quit during TRY from calling cleanups established\n-   prior to here.  This pops out the scope in either case of normal\n-   exit or exception exit.  */\n-struct exception_try_scope\n-{\n-  exception_try_scope ()\n-  {\n-    saved_state = exception_try_scope_entry ();\n-  }\n-  ~exception_try_scope ()\n-  {\n-    exception_try_scope_exit (saved_state);\n-  }\n-\n-  void *saved_state;\n-};\n-\n /* We still need to wrap TRY/CATCH in C++ so that cleanups and C++\n    exceptions can coexist.\n \n@@ -214,7 +234,6 @@ struct exception_try_scope\n   {\t\t\t\t\t\t\t\t\t\\\n     try\t\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\texception_try_scope exception_try_scope_instance;\t\t\\\n \tdo\t\t\t\t\t\t\t\t\\\n \t  {\n \n@@ -236,14 +255,26 @@ struct exception_try_scope\n \n struct gdb_exception_RETURN_MASK_ALL : public gdb_exception\n {\n+  explicit gdb_exception_RETURN_MASK_ALL (const gdb_exception &ex) noexcept\n+    : gdb_exception (ex)\n+  {\n+  }\n };\n \n struct gdb_exception_RETURN_MASK_ERROR : public gdb_exception_RETURN_MASK_ALL\n {\n+  explicit gdb_exception_RETURN_MASK_ERROR (const gdb_exception &ex) noexcept\n+    : gdb_exception_RETURN_MASK_ALL (ex)\n+  {\n+  }\n };\n \n struct gdb_exception_RETURN_MASK_QUIT : public gdb_exception_RETURN_MASK_ALL\n {\n+  explicit gdb_exception_RETURN_MASK_QUIT (const gdb_exception &ex) noexcept\n+    : gdb_exception_RETURN_MASK_ALL (ex)\n+  {\n+  }\n };\n \n /* An exception type that inherits from both std::bad_alloc and a gdb\n@@ -256,12 +287,10 @@ struct gdb_quit_bad_alloc\n   : public gdb_exception_RETURN_MASK_QUIT,\n     public std::bad_alloc\n {\n-  explicit gdb_quit_bad_alloc (gdb_exception ex)\n-    : std::bad_alloc ()\n+  explicit gdb_quit_bad_alloc (const gdb_exception &ex) noexcept\n+    : gdb_exception_RETURN_MASK_QUIT (ex),\n+      std::bad_alloc ()\n   {\n-    gdb_exception *self = this;\n-\n-    *self = ex;\n   }\n };\n "
    },
    {
      "sha": "1e73708aeeada0e776b66611a47d1a9d4529c88f",
      "filename": "gdb/common/selftest.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/common/selftest.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/common/selftest.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/selftest.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -90,7 +90,7 @@ run_tests (const char *filter)\n       CATCH (ex, RETURN_MASK_ERROR)\n \t{\n \t  ++failed;\n-\t  debug_printf (\"Self test failed: %s\\n\", ex.message);\n+\t  debug_printf (\"Self test failed: %s\\n\", ex.what ());\n \t}\n       END_CATCH\n "
    },
    {
      "sha": "10d9ada46127b0d10561280dd3b2bf07920fc92f",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -369,7 +369,7 @@ gcc_convert_symbol (void *datum,\n \n   CATCH (e, RETURN_MASK_ALL)\n     {\n-      context->plugin ().error (e.message);\n+      context->plugin ().error (e.what ());\n     }\n   END_CATCH\n \n@@ -432,7 +432,7 @@ gcc_symbol_address (void *datum, struct gcc_c_context *gcc_context,\n \n   CATCH (e, RETURN_MASK_ERROR)\n     {\n-      context->plugin ().error (e.message);\n+      context->plugin ().error (e.what ());\n     }\n   END_CATCH\n \n@@ -602,7 +602,7 @@ generate_c_for_for_one_variable (compile_instance *compiler,\n \n   CATCH (e, RETURN_MASK_ERROR)\n     {\n-      compiler->insert_symbol_error (sym, e.message);\n+      compiler->insert_symbol_error (sym, e.what ());\n     }\n   END_CATCH\n }"
    },
    {
      "sha": "4914c7c3c933e5b2dc72837dc59e9189abd6da3e",
      "filename": "gdb/compile/compile-cplus-symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/compile/compile-cplus-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/compile/compile-cplus-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-symbols.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -392,7 +392,7 @@ gcc_cplus_convert_symbol (void *datum,\n     {\n       /* We can't allow exceptions to escape out of this callback.  Safest\n \t is to simply emit a gcc error.  */\n-      instance->plugin ().error (e.message);\n+      instance->plugin ().error (e.what ());\n     }\n   END_CATCH\n \n@@ -469,7 +469,7 @@ gcc_cplus_symbol_address (void *datum, struct gcc_cp_context *gcc_context,\n \n   CATCH (e, RETURN_MASK_ERROR)\n     {\n-      instance->plugin ().error (e.message);\n+      instance->plugin ().error (e.what ());\n     }\n   END_CATCH\n "
    },
    {
      "sha": "308c25bc795c5d5444213517439b34e5cae282cb",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -329,7 +329,7 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t    {\n \t\t      fprintf_filtered (stream,\n \t\t\t\t\t_(\"<error reading variable: %s>\"),\n-\t\t\t\t\tex.message);\n+\t\t\t\t\tex.what ());\n \t\t    }\n \t\t  END_CATCH\n "
    },
    {
      "sha": "79a6599828aed740300ac627b53166324ddd7d71",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1962,7 +1962,7 @@ caching a copy of your shell.  However, this failed:\\n\\\n If you correct the problem, gdb will automatically try again the next time\\n\\\n you \\\"run\\\".  To prevent these attempts, you can use:\\n\\\n     set startup-with-shell off\"),\n-\t\t   ex.message);\n+\t\t   ex.what ());\n \t  return false;\n \t}\n       END_CATCH"
    },
    {
      "sha": "6e087f94d920dd1f075c96d42c07ac90f2410106",
      "filename": "gdb/dwarf-index-cache.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/dwarf-index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/dwarf-index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-cache.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -133,7 +133,7 @@ index_cache::store (struct dwarf2_per_objfile *dwarf2_per_objfile)\n     {\n       if (debug_index_cache)\n \tprintf_unfiltered (\"index cache: couldn't store index cache for objfile \"\n-\t\t\t \"%s: %s\", objfile_name (obj), except.message);\n+\t\t\t   \"%s: %s\", objfile_name (obj), except.what ());\n     }\n   END_CATCH\n }\n@@ -193,7 +193,7 @@ index_cache::lookup_gdb_index (const bfd_build_id *build_id,\n     {\n       if (debug_index_cache)\n \tprintf_unfiltered (\"index cache: couldn't read %s: %s\\n\",\n-\t\t\t filename.c_str (), except.message);\n+\t\t\t   filename.c_str (), except.what ());\n     }\n   END_CATCH\n "
    },
    {
      "sha": "f1ba0c97c6bd2626afac74487663874651366a9a",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -2257,7 +2257,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t  CATCH (e, RETURN_MASK_ERROR)\n \t    {\n \t      warning (_(\"skipping .eh_frame info of %s: %s\"),\n-\t\t       objfile_name (objfile), e.message);\n+\t\t       objfile_name (objfile), e.what ());\n \n \t      if (fde_table.num_entries != 0)\n \t\t{\n@@ -2298,7 +2298,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n       CATCH (e, RETURN_MASK_ERROR)\n \t{\n \t  warning (_(\"skipping .debug_frame info of %s: %s\"),\n-\t\t   objfile_name (objfile), e.message);\n+\t\t   objfile_name (objfile), e.what ());\n \n \t  if (fde_table.num_entries != 0)\n \t    {"
    },
    {
      "sha": "078f3c3bf00c995c052b6624826078958aa532f5",
      "filename": "gdb/exceptions.c",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exceptions.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -81,7 +81,7 @@ print_exception (struct ui_file *file, struct gdb_exception e)\n   const char *start;\n   const char *end;\n \n-  for (start = e.message; start != NULL; start = end)\n+  for (start = e.what (); start != NULL; start = end)\n     {\n       end = strchr (start, '\\n');\n       if (end == NULL)\n@@ -143,13 +143,8 @@ exception_fprintf (struct ui_file *file, struct gdb_exception e,\n int\n exception_print_same (struct gdb_exception e1, struct gdb_exception e2)\n {\n-  const char *msg1 = e1.message;\n-  const char *msg2 = e2.message;\n-\n-  if (msg1 == NULL)\n-    msg1 = \"\";\n-  if (msg2 == NULL)\n-    msg2 = \"\";\n+  const char *msg1 = e1.message == nullptr ? \"\" : e1.what ();\n+  const char *msg2 = e2.message == nullptr ? \"\" : e2.what ();\n \n   return (e1.reason == e2.reason\n \t  && e1.error == e2.error"
    },
    {
      "sha": "3f3092201fc443cdb0ca3f1618473effae502f71",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -161,7 +161,6 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n      Even without a symbol file, the remote-based debugging session should\n      continue normally instead of ending abruptly.  Hence we catch thrown\n      errors/exceptions in the following code.  */\n-  std::string saved_message;\n   TRY\n     {\n       /* We must do this step even if exec_file_host is NULL, so that\n@@ -171,16 +170,9 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n   CATCH (err, RETURN_MASK_ERROR)\n     {\n       if (err.message != NULL)\n-\twarning (\"%s\", err.message);\n+\twarning (\"%s\", err.what ());\n \n       prev_err = err;\n-\n-      /* Save message so it doesn't get trashed by the catch below.  */\n-      if (err.message != NULL)\n-\t{\n-\t  saved_message = err.message;\n-\t  prev_err.message = saved_message.c_str ();\n-\t}\n     }\n   END_CATCH\n \n@@ -193,7 +185,7 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n       CATCH (err, RETURN_MASK_ERROR)\n \t{\n \t  if (!exception_print_same (prev_err, err))\n-\t    warning (\"%s\", err.message);\n+\t    warning (\"%s\", err.what ());\n \t}\n       END_CATCH\n     }"
    },
    {
      "sha": "8eb8062496250efaefc101d24fec19bbc386d6e6",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -415,7 +415,8 @@ info_common_command_for_block (const struct block *block, const char *comname,\n \n \t    CATCH (except, RETURN_MASK_ERROR)\n \t      {\n-\t\tprintf_filtered (\"<error reading variable: %s>\", except.message);\n+\t\tprintf_filtered (\"<error reading variable: %s>\",\n+\t\t\t\t except.what ());\n \t      }\n \t    END_CATCH\n "
    },
    {
      "sha": "b71cd6faade87350bb02c5d4ff2a7355fbb495d1",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -2110,9 +2110,9 @@ get_prev_frame_always (struct frame_info *this_frame)\n \t         Allocate using stack local STOP_STRING then assign the\n \t         pointer to the frame, this allows the STOP_STRING on the\n \t         frame to be of type 'const char *'.  */\n-\t      size = strlen (ex.message) + 1;\n+\t      size = ex.message->size () + 1;\n \t      stop_string = (char *) frame_obstack_zalloc (size);\n-\t      memcpy (stop_string, ex.message, size);\n+\t      memcpy (stop_string, ex.what (), size);\n \t      this_frame->stop_string = stop_string;\n \t    }\n \t  prev_frame = NULL;"
    },
    {
      "sha": "f0923a62e9791babdd4604a17c3288013c2a6585",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* server.c (handle_btrace_general_set, handle_qxfer_btrace)\n+\t(handle_qxfer_btrace_conf, detach_or_kill_for_exit_cleanup)\n+\t(captured_main, main): Update.\n+\t* gdbreplay.c (main): Update.\n+\n 2019-04-05  Pedro Franco de Carvalho  <pedromfc@linux.ibm.com>\n \n \t* linux-low.c (linux_get_auxv): Remove static.  Return auxv entry"
    },
    {
      "sha": "1acd24bf1099e8229ba34d9a2afb1d5ab55d13b5",
      "filename": "gdb/gdbserver/gdbreplay.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gdbserver/gdbreplay.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gdbserver/gdbreplay.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/gdbreplay.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -537,7 +537,7 @@ main (int argc, char *argv[])\n       if (exception.reason == RETURN_ERROR)\n \t{\n \t  fflush (stdout);\n-\t  fprintf (stderr, \"%s\\n\", exception.message);\n+\t  fprintf (stderr, \"%s\\n\", exception.what ());\n \t}\n \n       exit (1);"
    },
    {
      "sha": "0f4341c28be72676bc0a47a050695a462560c1e8",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -474,7 +474,7 @@ handle_btrace_general_set (char *own_buf)\n     }\n   CATCH (exception, RETURN_MASK_ERROR)\n     {\n-      sprintf (own_buf, \"E.%s\", exception.message);\n+      sprintf (own_buf, \"E.%s\", exception.what ());\n     }\n   END_CATCH\n \n@@ -1884,7 +1884,7 @@ handle_qxfer_btrace (const char *annex,\n \t}\n       CATCH (exception, RETURN_MASK_ERROR)\n \t{\n-\t  sprintf (cs.own_buf, \"E.%s\", exception.message);\n+\t  sprintf (cs.own_buf, \"E.%s\", exception.what ());\n \t  result = -1;\n \t}\n       END_CATCH\n@@ -1956,7 +1956,7 @@ handle_qxfer_btrace_conf (const char *annex,\n \t}\n       CATCH (exception, RETURN_MASK_ERROR)\n \t{\n-\t  sprintf (cs.own_buf, \"E.%s\", exception.message);\n+\t  sprintf (cs.own_buf, \"E.%s\", exception.what ());\n \t  result = -1;\n \t}\n       END_CATCH\n@@ -3559,7 +3559,8 @@ detach_or_kill_for_exit_cleanup ()\n   CATCH (exception, RETURN_MASK_ALL)\n     {\n       fflush (stdout);\n-      fprintf (stderr, \"Detach or kill failed: %s\\n\", exception.message);\n+      fprintf (stderr, \"Detach or kill failed: %s\\n\",\n+\t       exception.what ());\n       exit_code = 1;\n     }\n   END_CATCH\n@@ -3933,7 +3934,7 @@ captured_main (int argc, char *argv[])\n       CATCH (exception, RETURN_MASK_ERROR)\n \t{\n \t  fflush (stdout);\n-\t  fprintf (stderr, \"gdbserver: %s\\n\", exception.message);\n+\t  fprintf (stderr, \"gdbserver: %s\\n\", exception.what ());\n \n \t  if (response_needed)\n \t    {\n@@ -3963,7 +3964,7 @@ main (int argc, char *argv[])\n       if (exception.reason == RETURN_ERROR)\n \t{\n \t  fflush (stdout);\n-\t  fprintf (stderr, \"%s\\n\", exception.message);\n+\t  fprintf (stderr, \"%s\\n\", exception.what ());\n \t  fprintf (stderr, \"Exiting\\n\");\n \t  exit_code = 1;\n \t}"
    },
    {
      "sha": "786f416153731f58b9cde7297f86a4408bcdbf62",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -912,7 +912,7 @@ print_one_vtable (struct gdbarch *gdbarch, struct value *value,\n \t}\n       CATCH (ex, RETURN_MASK_ERROR)\n \t{\n-\t  printf_filtered (_(\"<error: %s>\"), ex.message);\n+\t  printf_filtered (_(\"<error: %s>\"), ex.what ());\n \t  got_error = 1;\n \t}\n       END_CATCH"
    },
    {
      "sha": "44cd7b3575003b42bcaa3138935491f51074a49e",
      "filename": "gdb/guile/scm-exception.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/guile/scm-exception.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/guile/scm-exception.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-exception.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -446,7 +446,7 @@ gdbscm_scm_from_gdb_exception (struct gdb_exception exception)\n \n   return gdbscm_make_error (key, NULL, \"~A\",\n \t\t\t    scm_list_1 (gdbscm_scm_from_c_string\n-\t\t\t\t\t(exception.message)),\n+\t\t\t\t\t(exception.what ())),\n \t\t\t    SCM_BOOL_F);\n }\n "
    },
    {
      "sha": "50fae6d64f531a0c04ece078742530ffeb80c586",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1193,7 +1193,7 @@ An error occurred while in a function called from GDB.\\n\\\n Evaluation of the expression containing the function\\n\\\n (%s) will be abandoned.\\n\\\n When the function is done executing, GDB will silently stop.\"),\n-\t\t       e.message, name);\n+\t\t       e.what (), name);\n \tcase RETURN_QUIT:\n \tdefault:\n \t  throw_exception (e);"
    },
    {
      "sha": "e441281ca8a9f27a6ed450d59b200e2290cf3e43",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1792,15 +1792,15 @@ displaced_step_prepare (thread_info *thread)\n \t{\n \t  fprintf_unfiltered (gdb_stdlog,\n \t\t\t      \"infrun: disabling displaced stepping: %s\\n\",\n-\t\t\t      ex.message);\n+\t\t\t      ex.what ());\n \t}\n \n       /* Be verbose if \"set displaced-stepping\" is \"on\", silent if\n \t \"auto\".  */\n       if (can_use_displaced_stepping == AUTO_BOOLEAN_TRUE)\n \t{\n \t  warning (_(\"disabling displaced stepping: %s\"),\n-\t\t   ex.message);\n+\t\t   ex.what ());\n \t}\n \n       /* Disable further displaced stepping attempts.  */"
    },
    {
      "sha": "fe401b2b3b2cac910cb1810a12733de253e88bdb",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -436,7 +436,8 @@ class scoped_switch_fork_info\n \tCATCH (ex, RETURN_MASK_ALL)\n \t  {\n \t    warning (_(\"Couldn't restore checkpoint state in %s: %s\"),\n-\t\t     target_pid_to_str (m_oldfp->ptid).c_str (), ex.message);\n+\t\t     target_pid_to_str (m_oldfp->ptid).c_str (),\n+\t\t     ex.what ());\n \t  }\n \tEND_CATCH\n       }"
    },
    {
      "sha": "13b76f813e6a4dd15e6b4bcc18f995738bb4df80",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1198,9 +1198,10 @@ linux_nat_target::attach (const char *args, int from_tty)\n       std::string reason = linux_ptrace_attach_fail_reason (pid);\n \n       if (!reason.empty ())\n-\tthrow_error (ex.error, \"warning: %s\\n%s\", reason.c_str (), ex.message);\n+\tthrow_error (ex.error, \"warning: %s\\n%s\", reason.c_str (),\n+\t\t     ex.what ());\n       else\n-\tthrow_error (ex.error, \"%s\", ex.message);\n+\tthrow_error (ex.error, \"%s\", ex.what ());\n     }\n   END_CATCH\n "
    },
    {
      "sha": "0cec856b8375852adb5fe2ca8e2a6c9df580205f",
      "filename": "gdb/mi/mi-cmd-stack.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/mi/mi-cmd-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/mi/mi-cmd-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-stack.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -527,10 +527,8 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n \n   if (arg->val || arg->error)\n     {\n-      const char *error_message = NULL;\n-\n       if (arg->error)\n-\terror_message = arg->error;\n+\tstb.printf (_(\"<error reading variable: %s>\"), arg->error);\n       else\n \t{\n \t  TRY\n@@ -544,12 +542,11 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n \t    }\n \t  CATCH (except, RETURN_MASK_ERROR)\n \t    {\n-\t      error_message = except.message;\n+\t      stb.printf (_(\"<error reading variable: %s>\"),\n+\t\t\t  except.what ());\n \t    }\n \t  END_CATCH\n \t}\n-      if (error_message != NULL)\n-\tstb.printf (_(\"<error reading variable: %s>\"), error_message);\n       uiout->field_stream (\"value\", stb);\n     }\n }"
    },
    {
      "sha": "9c20016a3bdf82b9b26ac17ef007f220211a9a6f",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -38,6 +38,7 @@\n #include \"cli-out.h\"\n #include \"thread-fsm.h\"\n #include \"cli/cli-interp.h\"\n+#include \"common/scope-exit.h\"\n \n /* These are the interpreter setup, etc. functions for the MI\n    interpreter.  */\n@@ -211,22 +212,18 @@ mi_cmd_interpreter_exec (const char *command, char **argv, int argc)\n \n   /* Now run the code.  */\n \n-  std::string mi_error_message;\n+  SCOPE_EXIT\n+    {\n+      mi_remove_notify_hooks ();\n+    };\n+\n   for (i = 1; i < argc; i++)\n     {\n       struct gdb_exception e = interp_exec (interp_to_use, argv[i]);\n \n       if (e.reason < 0)\n-\t{\n-\t  mi_error_message = e.message;\n-\t  break;\n-\t}\n+\terror (\"%s\", e.what ());\n     }\n-\n-  mi_remove_notify_hooks ();\n-\n-  if (!mi_error_message.empty ())\n-    error (\"%s\", mi_error_message.c_str ());\n }\n \n /* This inserts a number of hooks that are meant to produce"
    },
    {
      "sha": "2fbcd6556d002b9ba1c87f547f7760e643bda2a5",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1884,7 +1884,7 @@ mi_print_exception (const char *token, struct gdb_exception exception)\n   if (exception.message == NULL)\n     fputs_unfiltered (\"unknown error\", mi->raw_stdout);\n   else\n-    fputstr_unfiltered (exception.message, '\"', mi->raw_stdout);\n+    fputstr_unfiltered (exception.what (), '\"', mi->raw_stdout);\n   fputs_unfiltered (\"\\\"\", mi->raw_stdout);\n \n   switch (exception.error)"
    },
    {
      "sha": "5a55a1c3f09a3f802715f958cb52e1c4676980f5",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1892,7 +1892,7 @@ do_one_display (struct display *d)\n \t  /* Can't re-parse the expression.  Disable this display item.  */\n \t  d->enabled_p = 0;\n \t  warning (_(\"Unable to display \\\"%s\\\": %s\"),\n-\t\t   d->exp_string, ex.message);\n+\t\t   d->exp_string, ex.what ());\n \t  return;\n \t}\n       END_CATCH\n@@ -1955,7 +1955,8 @@ do_one_display (struct display *d)\n \t}\n       CATCH (ex, RETURN_MASK_ERROR)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\\n\"), ex.message);\n+\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\\n\"),\n+\t\t\t    ex.what ());\n \t}\n       END_CATCH\n     }\n@@ -1989,7 +1990,7 @@ do_one_display (struct display *d)\n \t}\n       CATCH (ex, RETURN_MASK_ERROR)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.message);\n+\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.what ());\n \t}\n       END_CATCH\n \n@@ -2193,8 +2194,8 @@ print_variable_and_value (const char *name, struct symbol *var,\n     }\n   CATCH (except, RETURN_MASK_ERROR)\n     {\n-      fprintf_filtered(stream, \"<error reading variable %s (%s)>\", name,\n-\t\t       except.message);\n+      fprintf_filtered (stream, \"<error reading variable %s (%s)>\", name,\n+\t\t\texcept.what ());\n     }\n   END_CATCH\n "
    },
    {
      "sha": "87715eed557e9375d6039ca7e1e0a6b0fcbb8d7a",
      "filename": "gdb/python/py-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/python/py-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/python/py-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-utils.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -240,7 +240,7 @@ gdbpy_convert_exception (struct gdb_exception exception)\n   else\n     exc_class = gdbpy_gdb_error;\n \n-  PyErr_Format (exc_class, \"%s\", exception.message);\n+  PyErr_Format (exc_class, \"%s\", exception.what ());\n }\n \n /* Converts OBJ to a CORE_ADDR value."
    },
    {
      "sha": "2a2140bd553246490094f1f9b8a1a998d56e54cf",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -288,7 +288,7 @@ record_btrace_enable_warn (struct thread_info *tp)\n     }\n   CATCH (error, RETURN_MASK_ERROR)\n     {\n-      warning (\"%s\", error.message);\n+      warning (\"%s\", error.what ());\n     }\n   END_CATCH\n }"
    },
    {
      "sha": "2b21aeacdc29638827b8a0e0635c7508ee55b41f",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -13797,7 +13797,7 @@ remote_target::enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n   CATCH (err, RETURN_MASK_ERROR)\n     {\n       if (err.message != NULL)\n-\twarning (\"%s\", err.message);\n+\twarning (\"%s\", err.what ());\n     }\n   END_CATCH\n "
    },
    {
      "sha": "1f88683d1dc67b55fbfbad780f6ddb5696c70e44",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -660,7 +660,7 @@ riscv_print_one_register_info (struct gdbarch *gdbarch,\n     {\n       /* Handle failure to read a register without interrupting the entire\n          'info registers' flow.  */\n-      fprintf_filtered (file, \"%s\\n\", ex.message);\n+      fprintf_filtered (file, \"%s\\n\", ex.what ());\n       return;\n     }\n   END_CATCH"
    },
    {
      "sha": "ba145b168364c908074035f0414c34e9175dfd94",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -2623,7 +2623,7 @@ rust_lex_exception_test (rust_parser *parser, const char *input,\n     }\n   CATCH (except, RETURN_MASK_ERROR)\n     {\n-      SELF_CHECK (strcmp (except.message, err) == 0);\n+      SELF_CHECK (strcmp (except.what (), err) == 0);\n     }\n   END_CATCH\n }"
    },
    {
      "sha": "7773ef9fe2a42ec914f57d36e48af63adbcb7260",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -229,7 +229,6 @@ static void\n print_frame_arg (const struct frame_arg *arg)\n {\n   struct ui_out *uiout = current_uiout;\n-  const char *error_message = NULL;\n \n   string_file stb;\n \n@@ -265,7 +264,7 @@ print_frame_arg (const struct frame_arg *arg)\n   else\n     {\n       if (arg->error)\n-\terror_message = arg->error;\n+\tstb.printf (_(\"<error reading variable: %s>\"), arg->error);\n       else\n \t{\n \t  TRY\n@@ -299,12 +298,11 @@ print_frame_arg (const struct frame_arg *arg)\n \t    }\n \t  CATCH (except, RETURN_MASK_ERROR)\n \t    {\n-\t      error_message = except.message;\n+\t      stb.printf (_(\"<error reading variable: %s>\"),\n+\t\t\t  except.what ());\n \t    }\n \t  END_CATCH\n \t}\n-      if (error_message != NULL)\n-\tstb.printf (_(\"<error reading variable: %s>\"), error_message);\n     }\n \n   uiout->field_stream (\"value\", stb);\n@@ -328,7 +326,7 @@ read_frame_local (struct symbol *sym, struct frame_info *frame,\n     }\n   CATCH (except, RETURN_MASK_ERROR)\n     {\n-      argp->error = xstrdup (except.message);\n+      argp->error = xstrdup (except.what ());\n     }\n   END_CATCH\n }\n@@ -354,8 +352,8 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t}\n       CATCH (except, RETURN_MASK_ERROR)\n \t{\n-\t  val_error = (char *) alloca (strlen (except.message) + 1);\n-\t  strcpy (val_error, except.message);\n+\t  val_error = (char *) alloca (except.message->size () + 1);\n+\t  strcpy (val_error, except.what ());\n \t}\n       END_CATCH\n     }\n@@ -377,8 +375,8 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t{\n \t  if (except.error != NO_ENTRY_VALUE_ERROR)\n \t    {\n-\t      entryval_error = (char *) alloca (strlen (except.message) + 1);\n-\t      strcpy (entryval_error, except.message);\n+\t      entryval_error = (char *) alloca (except.message->size () + 1);\n+\t      strcpy (entryval_error, except.what ());\n \t    }\n \t}\n       END_CATCH\n@@ -438,8 +436,9 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t\t\tval_equal = 1;\n \t\t      else if (except.message != NULL)\n \t\t\t{\n-\t\t\t  entryval_error = (char *) alloca (strlen (except.message) + 1);\n-\t\t\t  strcpy (entryval_error, except.message);\n+\t\t\t  entryval_error\n+\t\t\t    = (char *) alloca (except.message->size () + 1);\n+\t\t\t  strcpy (entryval_error, except.what ());\n \t\t\t}\n \t\t    }\n \t\t  END_CATCH\n@@ -480,8 +479,8 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t    }\n \t  CATCH (except, RETURN_MASK_ERROR)\n \t    {\n-\t      val_error = (char *) alloca (strlen (except.message) + 1);\n-\t      strcpy (val_error, except.message);\n+\t      val_error = (char *) alloca (except.message->size () + 1);\n+\t      strcpy (val_error, except.what ());\n \t    }\n \t  END_CATCH\n \t}\n@@ -1410,7 +1409,8 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t      val_print_not_saved (gdb_stdout);\n \t      break;\n \t    default:\n-\t      fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.message);\n+\t      fprintf_filtered (gdb_stdout, _(\"<error: %s>\"),\n+\t\t\t\tex.what ());\n \t      break;\n \t    }\n \t}\n@@ -2723,7 +2723,7 @@ frame_apply_command_count (const char *which_command,\n \t      if (!flags.quiet)\n \t\tprint_stack_frame (fi, 1, LOCATION, 0);\n \t      if (flags.cont)\n-\t\tprintf_filtered (\"%s\\n\", ex.message);\n+\t\tprintf_filtered (\"%s\\n\", ex.what ());\n \t      else\n \t\tthrow_exception (ex);\n \t    }"
    },
    {
      "sha": "646f913e0a9b5766dad1f918bc01c55e7c179ffb",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -759,12 +759,12 @@ target_translate_tls_address (struct objfile *objfile, CORE_ADDR offset)\n \t\terror (_(\"Cannot find thread-local storage for %s, \"\n \t\t         \"shared library %s:\\n%s\"),\n \t\t       target_pid_to_str (ptid).c_str (),\n-\t\t       objfile_name (objfile), ex.message);\n+\t\t       objfile_name (objfile), ex.what ());\n \t      else\n \t\terror (_(\"Cannot find thread-local storage for %s, \"\n \t\t         \"executable file %s:\\n%s\"),\n \t\t       target_pid_to_str (ptid).c_str (),\n-\t\t       objfile_name (objfile), ex.message);\n+\t\t       objfile_name (objfile), ex.what ());\n \t      break;\n \t    default:\n \t      throw_exception (ex);"
    },
    {
      "sha": "a86f26947c766bb4a7e277869e04499c1d3d656b",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -1480,7 +1480,7 @@ thr_try_catch_cmd (thread_info *thr, const char *cmd, int from_tty,\n \t\t\t     print_thread_id (thr),\n \t\t\t     target_pid_to_str (inferior_ptid).c_str ());\n \t  if (flags.cont)\n-\t    printf_filtered (\"%s\\n\", ex.message);\n+\t    printf_filtered (\"%s\\n\", ex.what ());\n \t  else\n \t    throw_exception (ex);\n \t}"
    },
    {
      "sha": "e357b06555f6e058824ec4b036af3cf9f44ab9d0",
      "filename": "gdb/unittests/cli-utils-selftests.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/unittests/cli-utils-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/unittests/cli-utils-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/cli-utils-selftests.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -87,7 +87,7 @@ test_number_or_range_parser ()\n       {\n \tSELF_CHECK (ex.reason == RETURN_ERROR);\n \tSELF_CHECK (ex.error == GENERIC_ERROR);\n-\tSELF_CHECK (strcmp (ex.message, \"negative value\") == 0);\n+\tSELF_CHECK (strcmp (ex.what (), \"negative value\") == 0);\n \tSELF_CHECK (strcmp (minus_one.cur_tok (), \"-1\") == 0);\n       }\n     END_CATCH;\n@@ -225,7 +225,7 @@ test_parse_flags_qcs ()\n \tSELF_CHECK (ex.reason == RETURN_ERROR);\n \tSELF_CHECK (ex.error == GENERIC_ERROR);\n \tSELF_CHECK\n-\t  (strcmp (ex.message,\n+\t  (strcmp (ex.what (),\n \t\t   \"test_parse_flags_qcs.t4.cs: \"\n \t\t   \"-c and -s are mutually exclusive\") == 0);\n       }"
    },
    {
      "sha": "02307c1a836941f8bd19d5ec599b63af3a7aafe3",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -2544,7 +2544,7 @@ show_convenience (const char *ignore, int from_tty)\n \t}\n       CATCH (ex, RETURN_MASK_ERROR)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.message);\n+\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.what ());\n \t}\n       END_CATCH\n "
    },
    {
      "sha": "f60ed8a9bdedc0f276200b02fb77f4cc278f0b86",
      "filename": "gdb/x86-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/x86-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/x86-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -224,7 +224,7 @@ x86_linux_nat_target::enable_btrace (ptid_t ptid,\n   CATCH (exception, RETURN_MASK_ERROR)\n     {\n       error (_(\"Could not enable branch tracing for %s: %s\"),\n-\t     target_pid_to_str (ptid).c_str (), exception.message);\n+\t     target_pid_to_str (ptid).c_str (), exception.what ());\n     }\n   END_CATCH\n "
    },
    {
      "sha": "587a3af74cb3013c18c3f1710263a470c07464d8",
      "filename": "gdb/xml-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/xml-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d6e9d2336c9ffcedb10f89631981a23dd518e8e/gdb/xml-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.c?ref=3d6e9d2336c9ffcedb10f89631981a23dd518e8e",
      "patch": "@@ -595,7 +595,7 @@ gdb_xml_parser::parse (const char *buffer)\n       && m_error.error == XML_PARSE_ERROR)\n     {\n       gdb_assert (m_error.message != NULL);\n-      error_string = m_error.message;\n+      error_string = m_error.what ();\n     }\n   else if (status == XML_STATUS_ERROR)\n     {"
    }
  ]
}