{
  "sha": "caaece0e2f523049d77ca1bafc1fea911f9c25c7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2FhZWNlMGUyZjUyMzA0OWQ3N2NhMWJhZmMxZmVhOTExZjljMjVjNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-10T22:46:17Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-10T22:46:18Z"
    },
    "message": "Use \"const\" more in ax-gdb.c\n\nThis changes a few spots in ax-gdb.c to use a \"const char *\" rather\nthan a non-const one.\n\ngdb/ChangeLog\n2020-11-10  Tom Tromey  <tom@tromey.com>\n\n\t* ax-gdb.c (gen_struct_elt_for_reference, gen_namespace_elt)\n\t(gen_maybe_namespace_elt, gen_aggregate_elt_ref, gen_expr): Use\n\tconst.",
    "tree": {
      "sha": "f9a3b69c7ad5b7ef69a046f621bc6317aa24d99c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f9a3b69c7ad5b7ef69a046f621bc6317aa24d99c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/caaece0e2f523049d77ca1bafc1fea911f9c25c7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/caaece0e2f523049d77ca1bafc1fea911f9c25c7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/caaece0e2f523049d77ca1bafc1fea911f9c25c7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/caaece0e2f523049d77ca1bafc1fea911f9c25c7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8e20b4be65843c220260e4f0f5dd943f5570656b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e20b4be65843c220260e4f0f5dd943f5570656b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8e20b4be65843c220260e4f0f5dd943f5570656b"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 16,
    "deletions": 10
  },
  "files": [
    {
      "sha": "d275ee7b3bc3d7845e9b9728d59246aefb16e60d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/caaece0e2f523049d77ca1bafc1fea911f9c25c7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/caaece0e2f523049d77ca1bafc1fea911f9c25c7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=caaece0e2f523049d77ca1bafc1fea911f9c25c7",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* ax-gdb.c (gen_struct_elt_for_reference, gen_namespace_elt)\n+\t(gen_maybe_namespace_elt, gen_aggregate_elt_ref, gen_expr): Use\n+\tconst.\n+\n 2020-11-10  Tom Tromey  <tom@tromey.com>\n \n \t* objc-lang.h (value_nsstring): Update."
    },
    {
      "sha": "601c7522a3bad68ef6f4412fdb5b9b3d6585557f",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/caaece0e2f523049d77ca1bafc1fea911f9c25c7/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/caaece0e2f523049d77ca1bafc1fea911f9c25c7/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=caaece0e2f523049d77ca1bafc1fea911f9c25c7",
      "patch": "@@ -1537,10 +1537,10 @@ gen_struct_ref (struct agent_expr *ax, struct axs_value *value,\n \n static int\n gen_namespace_elt (struct agent_expr *ax, struct axs_value *value,\n-\t\t   const struct type *curtype, char *name);\n+\t\t   const struct type *curtype, const char *name);\n static int\n gen_maybe_namespace_elt (struct agent_expr *ax, struct axs_value *value,\n-\t\t\t const struct type *curtype, char *name);\n+\t\t\t const struct type *curtype, const char *name);\n \n static void\n gen_static_field (struct agent_expr *ax, struct axs_value *value,\n@@ -1577,7 +1577,7 @@ gen_static_field (struct agent_expr *ax, struct axs_value *value,\n \n static int\n gen_struct_elt_for_reference (struct agent_expr *ax, struct axs_value *value,\n-\t\t\t      struct type *type, char *fieldname)\n+\t\t\t      struct type *type, const char *fieldname)\n {\n   struct type *t = type;\n   int i;\n@@ -1622,7 +1622,7 @@ gen_struct_elt_for_reference (struct agent_expr *ax, struct axs_value *value,\n \n static int\n gen_namespace_elt (struct agent_expr *ax, struct axs_value *value,\n-\t\t   const struct type *curtype, char *name)\n+\t\t   const struct type *curtype, const char *name)\n {\n   int found = gen_maybe_namespace_elt (ax, value, curtype, name);\n \n@@ -1641,7 +1641,7 @@ gen_namespace_elt (struct agent_expr *ax, struct axs_value *value,\n \n static int\n gen_maybe_namespace_elt (struct agent_expr *ax, struct axs_value *value,\n-\t\t\t const struct type *curtype, char *name)\n+\t\t\t const struct type *curtype, const char *name)\n {\n   const char *namespace_name = curtype->name ();\n   struct block_symbol sym;\n@@ -1665,7 +1665,7 @@ gen_maybe_namespace_elt (struct agent_expr *ax, struct axs_value *value,\n \n static int\n gen_aggregate_elt_ref (struct agent_expr *ax, struct axs_value *value,\n-\t\t       struct type *type, char *field)\n+\t\t       struct type *type, const char *field)\n {\n   switch (type->code ())\n     {\n@@ -1919,7 +1919,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n       (*pc)++;\n       if ((*pc)[0].opcode == OP_INTERNALVAR)\n \t{\n-\t  char *name = internalvar_name ((*pc)[1].internalvar);\n+\t  const char *name = internalvar_name ((*pc)[1].internalvar);\n \t  struct trace_state_variable *tsv;\n \n \t  (*pc) += 3;\n@@ -1946,7 +1946,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n       (*pc)++;\n       if ((*pc)[0].opcode == OP_INTERNALVAR)\n \t{\n-\t  char *name = internalvar_name ((*pc)[1].internalvar);\n+\t  const char *name = internalvar_name ((*pc)[1].internalvar);\n \t  struct trace_state_variable *tsv;\n \n \t  (*pc) += 3;\n@@ -2204,7 +2204,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n     case STRUCTOP_PTR:\n       {\n \tint length = (*pc)[1].longconst;\n-\tchar *name = &(*pc)[2].string;\n+\tconst char *name = &(*pc)[2].string;\n \n \t(*pc) += 4 + BYTES_TO_EXP_ELEM (length + 1);\n \tgen_expr (exp, pc, ax, value);\n@@ -2249,7 +2249,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n       {\n \tstruct type *type = (*pc)[1].type;\n \tint length = longest_to_int ((*pc)[2].longconst);\n-\tchar *name = &(*pc)[3].string;\n+\tconst char *name = &(*pc)[3].string;\n \tint found;\n \n \tfound = gen_aggregate_elt_ref (ax, value, type, name);"
    }
  ]
}