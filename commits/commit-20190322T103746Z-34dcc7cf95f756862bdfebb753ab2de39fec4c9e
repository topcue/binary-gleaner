{
  "sha": "34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzRkY2M3Y2Y5NWY3NTY4NjJiZGZlYmI3NTNhYjJkZTM5ZmVjNGM5ZQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-22T10:37:46Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-22T10:37:46Z"
    },
    "message": "AArch64: Add pauth DWARF registers\n\nMap the pauth registers to DWARF.\n\nAdd a new pseudo register ra_state and also map this to DWARF.  This register\nis hidden from the user - prevent it from being read or written to.  It will\nbe used for the unmangling of addresses.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_dwarf_reg_to_regnum): Check for pauth\n\tregisters.\n\t(aarch64_pseudo_register_name): Likewise.\n\t(aarch64_pseudo_register_type): Likewise.\n\t(aarch64_pseudo_register_reggroup_p): Likewise.\n\t(aarch64_gdbarch_init): Add pauth registers.\n\t* aarch64-tdep.h (AARCH64_DWARF_PAUTH_RA_STATE): New define.\n\t(AARCH64_DWARF_PAUTH_DMASK): Likewise.\n\t(AARCH64_DWARF_PAUTH_CMASK): Likewise.\n\t(struct gdbarch_tdep): Add regnum for ra_state.",
    "tree": {
      "sha": "c84ad9025f3c183c3e29618a64cf6c81f0abfdfb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c84ad9025f3c183c3e29618a64cf6c81f0abfdfb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ef53e6b8328acd5b7d54ee2fe288836ce12992e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ef53e6b8328acd5b7d54ee2fe288836ce12992e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ef53e6b8328acd5b7d54ee2fe288836ce12992e"
    }
  ],
  "stats": {
    "total": 112,
    "additions": 79,
    "deletions": 33
  },
  "files": [
    {
      "sha": "25c43f0faa5d69f3f4c4d06a454ca9b7f3e006b8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
      "patch": "@@ -1,3 +1,17 @@\n+2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* aarch64-tdep.c (aarch64_dwarf_reg_to_regnum): Check for pauth\n+\tregisters.\n+\t(aarch64_pseudo_register_name): Likewise.\n+\t(aarch64_pseudo_register_type): Likewise.\n+\t(aarch64_pseudo_register_reggroup_p): Likewise.\n+\t(aarch64_gdbarch_init): Add pauth registers.\n+\t* aarch64-tdep.h (AARCH64_DWARF_PAUTH_RA_STATE): New define.\n+\t(AARCH64_DWARF_PAUTH_DMASK): Likewise.\n+\t(AARCH64_DWARF_PAUTH_CMASK): Likewise.\n+\t(struct gdbarch_tdep): Add regnum for ra_state.\n+\n 2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "
    },
    {
      "sha": "01e98b7195ecf21dd7e190a6152813f68fd8eda0",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 61,
      "deletions": 33,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
      "patch": "@@ -1839,6 +1839,8 @@ aarch64_vnv_type (struct gdbarch *gdbarch)\n static int\n aarch64_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int reg)\n {\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n   if (reg >= AARCH64_DWARF_X0 && reg <= AARCH64_DWARF_X0 + 30)\n     return AARCH64_X0_REGNUM + reg - AARCH64_DWARF_X0;\n \n@@ -1860,6 +1862,15 @@ aarch64_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int reg)\n   if (reg >= AARCH64_DWARF_SVE_Z0 && reg <= AARCH64_DWARF_SVE_Z0 + 15)\n     return AARCH64_SVE_Z0_REGNUM + reg - AARCH64_DWARF_SVE_Z0;\n \n+  if (tdep->has_pauth ())\n+    {\n+      if (reg >= AARCH64_DWARF_PAUTH_DMASK && reg <= AARCH64_DWARF_PAUTH_CMASK)\n+\treturn tdep->pauth_reg_base + reg - AARCH64_DWARF_PAUTH_DMASK;\n+\n+      if (reg == AARCH64_DWARF_PAUTH_RA_STATE)\n+\treturn tdep->pauth_ra_state_regnum;\n+    }\n+\n   return -1;\n }\n \n@@ -2215,22 +2226,22 @@ aarch64_pseudo_register_name (struct gdbarch *gdbarch, int regnum)\n       \"b28\", \"b29\", \"b30\", \"b31\",\n     };\n \n-  regnum -= gdbarch_num_regs (gdbarch);\n+  int p_regnum = regnum - gdbarch_num_regs (gdbarch);\n \n-  if (regnum >= AARCH64_Q0_REGNUM && regnum < AARCH64_Q0_REGNUM + 32)\n-    return q_name[regnum - AARCH64_Q0_REGNUM];\n+  if (p_regnum >= AARCH64_Q0_REGNUM && p_regnum < AARCH64_Q0_REGNUM + 32)\n+    return q_name[p_regnum - AARCH64_Q0_REGNUM];\n \n-  if (regnum >= AARCH64_D0_REGNUM && regnum < AARCH64_D0_REGNUM + 32)\n-    return d_name[regnum - AARCH64_D0_REGNUM];\n+  if (p_regnum >= AARCH64_D0_REGNUM && p_regnum < AARCH64_D0_REGNUM + 32)\n+    return d_name[p_regnum - AARCH64_D0_REGNUM];\n \n-  if (regnum >= AARCH64_S0_REGNUM && regnum < AARCH64_S0_REGNUM + 32)\n-    return s_name[regnum - AARCH64_S0_REGNUM];\n+  if (p_regnum >= AARCH64_S0_REGNUM && p_regnum < AARCH64_S0_REGNUM + 32)\n+    return s_name[p_regnum - AARCH64_S0_REGNUM];\n \n-  if (regnum >= AARCH64_H0_REGNUM && regnum < AARCH64_H0_REGNUM + 32)\n-    return h_name[regnum - AARCH64_H0_REGNUM];\n+  if (p_regnum >= AARCH64_H0_REGNUM && p_regnum < AARCH64_H0_REGNUM + 32)\n+    return h_name[p_regnum - AARCH64_H0_REGNUM];\n \n-  if (regnum >= AARCH64_B0_REGNUM && regnum < AARCH64_B0_REGNUM + 32)\n-    return b_name[regnum - AARCH64_B0_REGNUM];\n+  if (p_regnum >= AARCH64_B0_REGNUM && p_regnum < AARCH64_B0_REGNUM + 32)\n+    return b_name[p_regnum - AARCH64_B0_REGNUM];\n \n   if (tdep->has_sve ())\n     {\n@@ -2246,14 +2257,20 @@ aarch64_pseudo_register_name (struct gdbarch *gdbarch, int regnum)\n \t  \"v28\", \"v29\", \"v30\", \"v31\",\n \t};\n \n-      if (regnum >= AARCH64_SVE_V0_REGNUM\n-\t  && regnum < AARCH64_SVE_V0_REGNUM + AARCH64_V_REGS_NUM)\n-\treturn sve_v_name[regnum - AARCH64_SVE_V0_REGNUM];\n+      if (p_regnum >= AARCH64_SVE_V0_REGNUM\n+\t  && p_regnum < AARCH64_SVE_V0_REGNUM + AARCH64_V_REGS_NUM)\n+\treturn sve_v_name[p_regnum - AARCH64_SVE_V0_REGNUM];\n     }\n \n+  /* RA_STATE is used for unwinding only.  Do not assign it a name - this\n+     prevents it from being read by methods such as\n+     mi_cmd_trace_frame_collected.  */\n+  if (tdep->has_pauth () && regnum == tdep->pauth_ra_state_regnum)\n+    return \"\";\n+\n   internal_error (__FILE__, __LINE__,\n \t\t  _(\"aarch64_pseudo_register_name: bad register number %d\"),\n-\t\t  regnum);\n+\t\t  p_regnum);\n }\n \n /* Implement the \"pseudo_register_type\" tdesc_arch_data method.  */\n@@ -2263,30 +2280,33 @@ aarch64_pseudo_register_type (struct gdbarch *gdbarch, int regnum)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  regnum -= gdbarch_num_regs (gdbarch);\n+  int p_regnum = regnum - gdbarch_num_regs (gdbarch);\n \n-  if (regnum >= AARCH64_Q0_REGNUM && regnum < AARCH64_Q0_REGNUM + 32)\n+  if (p_regnum >= AARCH64_Q0_REGNUM && p_regnum < AARCH64_Q0_REGNUM + 32)\n     return aarch64_vnq_type (gdbarch);\n \n-  if (regnum >= AARCH64_D0_REGNUM && regnum < AARCH64_D0_REGNUM + 32)\n+  if (p_regnum >= AARCH64_D0_REGNUM && p_regnum < AARCH64_D0_REGNUM + 32)\n     return aarch64_vnd_type (gdbarch);\n \n-  if (regnum >= AARCH64_S0_REGNUM && regnum < AARCH64_S0_REGNUM + 32)\n+  if (p_regnum >= AARCH64_S0_REGNUM && p_regnum < AARCH64_S0_REGNUM + 32)\n     return aarch64_vns_type (gdbarch);\n \n-  if (regnum >= AARCH64_H0_REGNUM && regnum < AARCH64_H0_REGNUM + 32)\n+  if (p_regnum >= AARCH64_H0_REGNUM && p_regnum < AARCH64_H0_REGNUM + 32)\n     return aarch64_vnh_type (gdbarch);\n \n-  if (regnum >= AARCH64_B0_REGNUM && regnum < AARCH64_B0_REGNUM + 32)\n+  if (p_regnum >= AARCH64_B0_REGNUM && p_regnum < AARCH64_B0_REGNUM + 32)\n     return aarch64_vnb_type (gdbarch);\n \n-  if (tdep->has_sve () && regnum >= AARCH64_SVE_V0_REGNUM\n-      && regnum < AARCH64_SVE_V0_REGNUM + AARCH64_V_REGS_NUM)\n+  if (tdep->has_sve () && p_regnum >= AARCH64_SVE_V0_REGNUM\n+      && p_regnum < AARCH64_SVE_V0_REGNUM + AARCH64_V_REGS_NUM)\n     return aarch64_vnv_type (gdbarch);\n \n+  if (tdep->has_pauth () && regnum == tdep->pauth_ra_state_regnum)\n+    return builtin_type (gdbarch)->builtin_uint64;\n+\n   internal_error (__FILE__, __LINE__,\n \t\t  _(\"aarch64_pseudo_register_type: bad register number %d\"),\n-\t\t  regnum);\n+\t\t  p_regnum);\n }\n \n /* Implement the \"pseudo_register_reggroup_p\" tdesc_arch_data method.  */\n@@ -2297,23 +2317,26 @@ aarch64_pseudo_register_reggroup_p (struct gdbarch *gdbarch, int regnum,\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  regnum -= gdbarch_num_regs (gdbarch);\n+  int p_regnum = regnum - gdbarch_num_regs (gdbarch);\n \n-  if (regnum >= AARCH64_Q0_REGNUM && regnum < AARCH64_Q0_REGNUM + 32)\n+  if (p_regnum >= AARCH64_Q0_REGNUM && p_regnum < AARCH64_Q0_REGNUM + 32)\n     return group == all_reggroup || group == vector_reggroup;\n-  else if (regnum >= AARCH64_D0_REGNUM && regnum < AARCH64_D0_REGNUM + 32)\n+  else if (p_regnum >= AARCH64_D0_REGNUM && p_regnum < AARCH64_D0_REGNUM + 32)\n     return (group == all_reggroup || group == vector_reggroup\n \t    || group == float_reggroup);\n-  else if (regnum >= AARCH64_S0_REGNUM && regnum < AARCH64_S0_REGNUM + 32)\n+  else if (p_regnum >= AARCH64_S0_REGNUM && p_regnum < AARCH64_S0_REGNUM + 32)\n     return (group == all_reggroup || group == vector_reggroup\n \t    || group == float_reggroup);\n-  else if (regnum >= AARCH64_H0_REGNUM && regnum < AARCH64_H0_REGNUM + 32)\n+  else if (p_regnum >= AARCH64_H0_REGNUM && p_regnum < AARCH64_H0_REGNUM + 32)\n     return group == all_reggroup || group == vector_reggroup;\n-  else if (regnum >= AARCH64_B0_REGNUM && regnum < AARCH64_B0_REGNUM + 32)\n+  else if (p_regnum >= AARCH64_B0_REGNUM && p_regnum < AARCH64_B0_REGNUM + 32)\n     return group == all_reggroup || group == vector_reggroup;\n-  else if (tdep->has_sve () && regnum >= AARCH64_SVE_V0_REGNUM\n-\t   && regnum < AARCH64_SVE_V0_REGNUM + AARCH64_V_REGS_NUM)\n+  else if (tdep->has_sve () && p_regnum >= AARCH64_SVE_V0_REGNUM\n+\t   && p_regnum < AARCH64_SVE_V0_REGNUM + AARCH64_V_REGS_NUM)\n     return group == all_reggroup || group == vector_reggroup;\n+  /* RA_STATE is used for unwinding only.  Do not assign it to any groups.  */\n+  if (tdep->has_pauth () && regnum == tdep->pauth_ra_state_regnum)\n+    return 0;\n \n   return group == all_reggroup;\n }\n@@ -2983,6 +3006,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   int num_regs = 0;\n   int num_pseudo_regs = 0;\n   int first_pauth_regnum = -1;\n+  int pauth_ra_state_offset = -1;\n \n   /* Ensure we always have a target description.  */\n   if (!tdesc_has_registers (tdesc))\n@@ -3051,7 +3075,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   if (feature_pauth != NULL)\n     {\n       first_pauth_regnum = num_regs;\n-\n+      pauth_ra_state_offset = num_pseudo_regs;\n       /* Validate the descriptor provides the mandatory PAUTH registers and\n \t allocate their numbers.  */\n       for (i = 0; i < ARRAY_SIZE (aarch64_pauth_register_names); i++)\n@@ -3060,6 +3084,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t\t\t\t\t    aarch64_pauth_register_names[i]);\n \n       num_regs += i;\n+      num_pseudo_regs += 1;\t/* Count RA_STATE pseudo register.  */\n     }\n \n   if (!valid_p)\n@@ -3096,6 +3121,9 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   tdep->jb_elt_size = 8;\n   tdep->vq = aarch64_get_tdesc_vq (tdesc);\n   tdep->pauth_reg_base = first_pauth_regnum;\n+  tdep->pauth_ra_state_regnum = (feature_pauth == NULL) ? -1\n+\t\t\t\t: pauth_ra_state_offset + num_regs;\n+\n \n   set_gdbarch_push_dummy_call (gdbarch, aarch64_push_dummy_call);\n   set_gdbarch_frame_align (gdbarch, aarch64_frame_align);"
    },
    {
      "sha": "f73392d59bf72b0f7ed01a4c308d129163b18d4d",
      "filename": "gdb/aarch64-tdep.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/gdb/aarch64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34dcc7cf95f756862bdfebb753ab2de39fec4c9e/gdb/aarch64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.h?ref=34dcc7cf95f756862bdfebb753ab2de39fec4c9e",
      "patch": "@@ -31,6 +31,9 @@ struct regset;\n /* AArch64 Dwarf register numbering.  */\n #define AARCH64_DWARF_X0   0\n #define AARCH64_DWARF_SP  31\n+#define AARCH64_DWARF_PAUTH_RA_STATE  34\n+#define AARCH64_DWARF_PAUTH_DMASK  35\n+#define AARCH64_DWARF_PAUTH_CMASK  36\n #define AARCH64_DWARF_V0  64\n #define AARCH64_DWARF_SVE_VG   46\n #define AARCH64_DWARF_SVE_FFR  47\n@@ -89,6 +92,7 @@ struct gdbarch_tdep\n   }\n \n   int pauth_reg_base;\n+  int pauth_ra_state_regnum;\n \n   /* Returns true if the target supports pauth.  */\n   bool has_pauth () const"
    }
  ]
}