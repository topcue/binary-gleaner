{
  "sha": "07ffcfecac22d21774a110db0f65f0387c8f1102",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDdmZmNmZWNhYzIyZDIxNzc0YTExMGRiMGY2NWYwMzg3YzhmMTEwMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-07T11:11:49Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-07T11:19:49Z"
    },
    "message": "Merge libiberty from gcc",
    "tree": {
      "sha": "120cc0b18f95144c1b03367a36ba6753db81e777",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/120cc0b18f95144c1b03367a36ba6753db81e777"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/07ffcfecac22d21774a110db0f65f0387c8f1102",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07ffcfecac22d21774a110db0f65f0387c8f1102",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/07ffcfecac22d21774a110db0f65f0387c8f1102",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07ffcfecac22d21774a110db0f65f0387c8f1102/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5f60cccf9db8b5f4aa4303f8e4ccc246f723fbe5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f60cccf9db8b5f4aa4303f8e4ccc246f723fbe5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5f60cccf9db8b5f4aa4303f8e4ccc246f723fbe5"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 97,
    "deletions": 42
  },
  "files": [
    {
      "sha": "e61a4bdc4b69dae955917a801f181d8dc5feef6c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-07  Alan Modra  <amodra@gmail.com>\n+\n+\tMerge from gcc.\n+\t2019-04-03  Vineet Gupta  <vgupta@synopsys.com>\n+\tPR89877\n+\t* longlong.h [__arc__] (add_ssaaaa): Add cc clobber.\n+\t(sub_ddmmss): Likewise.\n+\n 2019-04-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* bfdlink.h (bfd_link_info): Remove x86-specific linker options."
    },
    {
      "sha": "1f0ce4204255945d2c19ba73c0a4910d10145a93",
      "filename": "include/longlong.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/include/longlong.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/include/longlong.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/longlong.h?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -199,15 +199,17 @@ extern UDItype __udiv_qrnnd (UDItype *, UDItype, UDItype, UDItype);\n \t   : \"%r\" ((USItype) (ah)),\t\t\t\t\t\\\n \t     \"rICal\" ((USItype) (bh)),\t\t\t\t\t\\\n \t     \"%r\" ((USItype) (al)),\t\t\t\t\t\\\n-\t     \"rICal\" ((USItype) (bl)))\n+\t     \"rICal\" ((USItype) (bl))\t\t\t\t\t\\\n+\t   : \"cc\")\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"sub.f\t%1, %4, %5\\n\\tsbc\t%0, %2, %3\"\t\t\\\n \t   : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n \t     \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n \t   : \"r\" ((USItype) (ah)),\t\t\t\t\t\\\n \t     \"rICal\" ((USItype) (bh)),\t\t\t\t\t\\\n \t     \"r\" ((USItype) (al)),\t\t\t\t\t\\\n-\t     \"rICal\" ((USItype) (bl)))\n+\t     \"rICal\" ((USItype) (bl))\t\t\t\t\t\\\n+\t   : \"cc\")\n \n #define __umulsidi3(u,v) ((UDItype)(USItype)u*(USItype)v)\n #ifdef __ARC_NORM__"
    },
    {
      "sha": "031be3a974a2dcc656d34e5bf36ca2ed63cdf857",
      "filename": "libiberty/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/ChangeLog?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -1,13 +1,45 @@\n+2019-04-07  Alan Modra  <amodra@gmail.com>\n+\n+\t* functions.texi: Regenerate.\n+\n+2019-03-14  Jason Merrill  <jason@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* hashtab.c (htab_remove_elt_with_hash): Return if slot is NULL rather\n+\tthan if *slot is HTAB_EMPTY_ENTRY.\n+\n 2019-02-11  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* splay-tree.c (splay_tree_insert): Also release old KEY in case\n \tof insertion of a key equal to an already present key.\n \t(splay_tree_new_typed_alloc): Update comment.\n \n+2019-01-22  Nidal Faour  <nidal.faour@wdc.com>\n+\n+\tPR lto/88422\n+\t* simple-object.c (O_BINARY): Define if not already defined.\n+\t(simple_object_copy_lto_debug_sections): Create file in binary\n+\tmode.\n+\n 2019-01-21  Tom Tromey  <tom@tromey.com>\n \n \t* splay-tree.c (splay_tree_remove): Delete the key if necessary.\n \n+2019-01-14  Tom Honermann  <tom@honermann.net>\n+\n+\t* cp-demangle.c (cplus_demangle_builtin_types)\n+\t(cplus_demangle_type): Add name demangling for char8_t (Du).\n+\t* cp-demangle.h: Increase D_BUILTIN_TYPE_COUNT to accommodate the\n+\tnew char8_t type.\n+\n+2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/16615\n+\n+\t* cp-demangle.c: Mechanically replace \"can not\" with \"cannot\".\n+\t* floatformat.c: Likewise.\n+\t* strerror.c: Likewise.\n+\n 2019-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."
    },
    {
      "sha": "b34b4856922349b25b8a55c094aafd8fbff84783",
      "filename": "libiberty/cp-demangle.c",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/cp-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/cp-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/cp-demangle.c?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -2364,9 +2364,10 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n   /* 27 */ { NL (\"decimal64\"),\tNL (\"decimal64\"),\tD_PRINT_DEFAULT },\n   /* 28 */ { NL (\"decimal128\"),\tNL (\"decimal128\"),\tD_PRINT_DEFAULT },\n   /* 29 */ { NL (\"half\"),\tNL (\"half\"),\t\tD_PRINT_FLOAT },\n-  /* 30 */ { NL (\"char16_t\"),\tNL (\"char16_t\"),\tD_PRINT_DEFAULT },\n-  /* 31 */ { NL (\"char32_t\"),\tNL (\"char32_t\"),\tD_PRINT_DEFAULT },\n-  /* 32 */ { NL (\"decltype(nullptr)\"),\tNL (\"decltype(nullptr)\"),\n+  /* 30 */ { NL (\"char8_t\"),\tNL (\"char8_t\"),\t\tD_PRINT_DEFAULT },\n+  /* 31 */ { NL (\"char16_t\"),\tNL (\"char16_t\"),\tD_PRINT_DEFAULT },\n+  /* 32 */ { NL (\"char32_t\"),\tNL (\"char32_t\"),\tD_PRINT_DEFAULT },\n+  /* 33 */ { NL (\"decltype(nullptr)\"),\tNL (\"decltype(nullptr)\"),\n \t     D_PRINT_DEFAULT },\n };\n \n@@ -2654,14 +2655,19 @@ cplus_demangle_type (struct d_info *di)\n \t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[29]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n+\tcase 'u':\n+\t  /* char8_t */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[30]);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n \tcase 's':\n \t  /* char16_t */\n-\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[30]);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[31]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \tcase 'i':\n \t  /* char32_t */\n-\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[31]);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[32]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \n@@ -2687,7 +2693,7 @@ cplus_demangle_type (struct d_info *di)\n \n         case 'n':\n           /* decltype(nullptr) */\n-\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[32]);\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[33]);\n \t  di->expansion += ret->u.s_builtin.type->len;\n \t  break;\n \n@@ -6201,13 +6207,13 @@ cplus_demangle_init_info (const char *mangled, int options, size_t len,\n \n   di->n = mangled;\n \n-  /* We can not need more components than twice the number of chars in\n+  /* We cannot need more components than twice the number of chars in\n      the mangled string.  Most components correspond directly to\n      chars, but the ARGLIST types are exceptions.  */\n   di->num_comps = 2 * len;\n   di->next_comp = 0;\n \n-  /* Similarly, we can not need more substitutions than there are\n+  /* Similarly, we cannot need more substitutions than there are\n      chars in the mangled string.  */\n   di->num_subs = len;\n   di->next_sub = 0;"
    },
    {
      "sha": "92191cf3ea8a45a52f4d63943795b825963ce1aa",
      "filename": "libiberty/cp-demangle.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/cp-demangle.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/cp-demangle.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/cp-demangle.h?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -176,7 +176,7 @@ d_advance (struct d_info *di, int i)\n extern const struct demangle_operator_info cplus_demangle_operators[];\n #endif\n \n-#define D_BUILTIN_TYPE_COUNT (33)\n+#define D_BUILTIN_TYPE_COUNT (34)\n \n CP_STATIC_IF_GLIBCPP_V3\n const struct demangle_builtin_type_info"
    },
    {
      "sha": "8632253b4c14f4341384c814db8dc48d9de0f683",
      "filename": "libiberty/floatformat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/floatformat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/floatformat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/floatformat.c?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -489,7 +489,7 @@ floatformat_to_double (const struct floatformat *fmt,\n       int nan = mant_bits_set (fmt, ufrom);\n \n       /* On certain systems (such as GNU/Linux), the use of the\n-\t INFINITY macro below may generate a warning that can not be\n+\t INFINITY macro below may generate a warning that cannot be\n \t silenced due to a bug in GCC (PR preprocessor/11931).  The\n \t preprocessor fails to recognise the __extension__ keyword in\n \t conjunction with the GNU/C99 extension for hexadecimal"
    },
    {
      "sha": "1784ae720a1b935378b52b74e3f20ce407364e50",
      "filename": "libiberty/functions.texi",
      "status": "modified",
      "additions": 30,
      "deletions": 27,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/functions.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/functions.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/functions.texi?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -84,7 +84,7 @@ is respectively less than, matching, or greater than the array member.\n \n @end deftypefn\n \n-@c argv.c:135\n+@c argv.c:138\n @deftypefn Extension char** buildargv (char *@var{sp})\n \n Given a pointer to a string, parse the string extracting fields\n@@ -148,7 +148,7 @@ not recommended.\n \n @end deftypefn\n \n-@c make-temp-file.c:96\n+@c make-temp-file.c:95\n @deftypefn Replacement const char* choose_tmpdir ()\n \n Returns a pointer to a directory path suitable for creating temporary\n@@ -175,15 +175,15 @@ Concatenate zero or more of strings and return the result in freshly\n \n @end deftypefn\n \n-@c argv.c:470\n+@c argv.c:487\n @deftypefn Extension int countargv (char * const *@var{argv})\n \n Return the number of elements in @var{argv}.\n Returns zero if @var{argv} is NULL.\n \n @end deftypefn\n \n-@c crc32.c:141\n+@c crc32.c:140\n @deftypefn Extension {unsigned int} crc32 (const unsigned char *@var{buf}, @\n   int @var{len}, unsigned int @var{init})\n \n@@ -192,10 +192,9 @@ starting value is @var{init}; this may be used to compute the CRC of\n data split across multiple buffers by passing the return value of each\n call as the @var{init} parameter of the next.\n \n-This is intended to match the CRC used by the @command{gdb} remote\n-protocol for the @samp{qCRC} command.  In order to get the same\n-results as gdb for a block of data, you must pass the first CRC\n-parameter as @code{0xffffffff}.\n+This is used by the @command{gdb} remote protocol for the @samp{qCRC}\n+command.  In order to get the same results as gdb for a block of data,\n+you must pass the first CRC parameter as @code{0xffffffff}.\n \n This CRC can be specified as:\n \n@@ -212,7 +211,7 @@ make it easy to compose the values of multiple blocks.\n \n @end deftypefn\n \n-@c argv.c:52\n+@c argv.c:59\n @deftypefn Extension char** dupargv (char * const *@var{vector})\n \n Duplicate an argument vector.  Simply scans through @var{vector},\n@@ -223,7 +222,7 @@ argument vector.\n \n @end deftypefn\n \n-@c strerror.c:567\n+@c strerror.c:572\n @deftypefn Extension int errno_max (void)\n \n Returns the maximum @code{errno} value for which a corresponding\n@@ -241,7 +240,7 @@ symbolic name or message.\n \n @end deftypefn\n \n-@c argv.c:341\n+@c argv.c:344\n @deftypefn Extension void expandargv (int *@var{argcp}, char ***@var{argvp})\n \n The @var{argcp} and @code{argvp} arguments are pointers to the usual\n@@ -410,7 +409,7 @@ unchanged.\n \n @end deftypefn\n \n-@c argv.c:90\n+@c argv.c:93\n @deftypefn Extension void freeargv (char **@var{vector})\n \n Free an argument vector that was built using @code{buildargv}.  Simply\n@@ -431,7 +430,7 @@ unchanged.\n \n @end deftypefn\n \n-@c getruntime.c:82\n+@c getruntime.c:86\n @deftypefn Replacement long get_run_time (void)\n \n Returns the time used so far, in microseconds.  If possible, this is\n@@ -515,7 +514,7 @@ systems.\n \n @end deftypefn\n \n-@c safe-ctype.c:25\n+@c safe-ctype.c:24\n @defvr Extension HOST_CHARSET\n This macro indicates the basic character set and encoding used by the\n host: more precisely, the encoding used for character constants in\n@@ -537,7 +536,7 @@ nineteen EBCDIC varying characters is tested; exercise caution.)\n @end ftable\n @end defvr\n \n-@c hashtab.c:328\n+@c hashtab.c:327\n @deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size}, @\n htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f}, @\n htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f}, @\n@@ -586,7 +585,7 @@ struct qelem @{\n \n @end deftypefn\n \n-@c safe-ctype.c:46\n+@c safe-ctype.c:45\n @deffn  Extension ISALPHA  (@var{c})\n @deffnx Extension ISALNUM  (@var{c})\n @deffnx Extension ISBLANK  (@var{c})\n@@ -636,7 +635,7 @@ false for characters with numeric values from 128 to 255.\n @end itemize\n @end deffn\n \n-@c safe-ctype.c:95\n+@c safe-ctype.c:94\n @deffn  Extension ISIDNUM         (@var{c})\n @deffnx Extension ISIDST          (@var{c})\n @deffnx Extension IS_VSPACE       (@var{c})\n@@ -684,7 +683,7 @@ components will be simplified.  The returned value will be allocated using\n \n @end deftypefn\n \n-@c make-relative-prefix.c:24\n+@c make-relative-prefix.c:23\n @deftypefn Extension {const char*} make_relative_prefix (const char *@var{progname}, @\n   const char *@var{bin_prefix}, const char *@var{prefix})\n \n@@ -710,7 +709,7 @@ relative prefix can be found, return @code{NULL}.\n \n @end deftypefn\n \n-@c make-temp-file.c:174\n+@c make-temp-file.c:173\n @deftypefn Replacement char* make_temp_file (const char *@var{suffix})\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n@@ -791,7 +790,7 @@ Sets the first @var{count} bytes of @var{s} to the constant byte\n \n @end deftypefn\n \n-@c mkstemps.c:58\n+@c mkstemps.c:60\n @deftypefn Replacement int mkstemps (char *@var{pattern}, int @var{suffix_len})\n \n Generate a unique temporary file name from @var{pattern}.\n@@ -1204,7 +1203,7 @@ deprecated in new programs in favor of @code{strrchr}.\n \n @end deftypefn\n \n-@c setenv.c:23\n+@c setenv.c:22\n @deftypefn Supplemental int setenv (const char *@var{name}, @\n   const char *@var{value}, int @var{overwrite})\n @deftypefnx Supplemental void unsetenv (const char *@var{name})\n@@ -1478,7 +1477,7 @@ valid until at least the next call.\n \n @end deftypefn\n \n-@c splay-tree.c:303\n+@c splay-tree.c:305\n @deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc @\n (splay_tree_compare_fn @var{compare_fn}, @\n splay_tree_delete_key_fn @var{delete_key_fn}, @\n@@ -1495,7 +1494,11 @@ different types need to be allocated with different allocators.\n \n The splay tree will use @var{compare_fn} to compare nodes,\n @var{delete_key_fn} to deallocate keys, and @var{delete_value_fn} to\n-deallocate values.\n+deallocate values.  Keys and values will be deallocated when the\n+tree is deleted using splay_tree_delete or when a node is removed\n+using splay_tree_remove.  splay_tree_insert will release the previously\n+inserted key and value using @var{delete_key_fn} and @var{delete_value_fn}\n+if the inserted key is already found in the tree.\n \n @end deftypefn\n \n@@ -1549,7 +1552,7 @@ Returns a pointer to a copy of @var{s} in memory obtained from\n \n @end deftypefn\n \n-@c strerror.c:670\n+@c strerror.c:675\n @deftypefn Replacement {const char*} strerrno (int @var{errnum})\n \n Given an error number returned from a system call (typically returned\n@@ -1569,7 +1572,7 @@ valid until the next call to @code{strerrno}.\n \n @end deftypefn\n \n-@c strerror.c:603\n+@c strerror.c:608\n @deftypefn Supplemental char* strerror (int @var{errnoval})\n \n Maps an @code{errno} number to an error message string, the contents\n@@ -1698,7 +1701,7 @@ the location referenced by @var{endptr}.\n \n @end deftypefn\n \n-@c strerror.c:729\n+@c strerror.c:734\n @deftypefn Extension int strtoerrno (const char *@var{name})\n \n Given the symbolic name of a error number (e.g., @code{EACCES}), map it\n@@ -1914,7 +1917,7 @@ does the return value.  The third argument is unused in @libib{}.\n \n @end deftypefn\n \n-@c argv.c:286\n+@c argv.c:289\n @deftypefn Extension int writeargv (char * const *@var{argv}, FILE *@var{file})\n \n Write each member of ARGV, handling all necessary quoting, to the file"
    },
    {
      "sha": "9f917c3571d96a6ebd1e472f85bb85787f715a6c",
      "filename": "libiberty/hashtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/hashtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/hashtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/hashtab.c?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -725,7 +725,7 @@ htab_remove_elt_with_hash (htab_t htab, PTR element, hashval_t hash)\n   PTR *slot;\n \n   slot = htab_find_slot_with_hash (htab, element, hash, NO_INSERT);\n-  if (*slot == HTAB_EMPTY_ENTRY)\n+  if (slot == NULL)\n     return;\n \n   if (htab->del_f)"
    },
    {
      "sha": "b00c265128c9dbca6984cea556af010df99f5427",
      "filename": "libiberty/simple-object.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/simple-object.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/simple-object.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/simple-object.c?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -44,6 +44,10 @@ Boston, MA 02110-1301, USA.  */\n #define SEEK_SET 0\n #endif\n \n+#ifndef O_BINARY\n+#define O_BINARY 0\n+#endif\n+\n #include \"simple-object-common.h\"\n \n /* The known object file formats.  */\n@@ -349,7 +353,7 @@ simple_object_copy_lto_debug_sections (simple_object_read *sobj,\n       return errmsg;\n     }\n \n-  outfd = creat (dest, 00777);\n+  outfd = open (dest, O_CREAT|O_WRONLY|O_TRUNC|O_BINARY, 00777);\n   if (outfd == -1)\n     {\n       *err = errno;"
    },
    {
      "sha": "cc7692c1d6951ce7008b59d7f93766777d256547",
      "filename": "libiberty/strerror.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/strerror.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07ffcfecac22d21774a110db0f65f0387c8f1102/libiberty/strerror.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/strerror.c?ref=07ffcfecac22d21774a110db0f65f0387c8f1102",
      "patch": "@@ -299,7 +299,7 @@ static const struct error_info error_table[] =\n   ENTRY(EREMCHG, \"EREMCHG\", \"Remote address changed\"),\n #endif\n #if defined (ELIBACC)\n-  ENTRY(ELIBACC, \"ELIBACC\", \"Can not access a needed shared library\"),\n+  ENTRY(ELIBACC, \"ELIBACC\", \"Cannot access a needed shared library\"),\n #endif\n #if defined (ELIBBAD)\n   ENTRY(ELIBBAD, \"ELIBBAD\", \"Accessing a corrupted shared library\"),"
    }
  ]
}