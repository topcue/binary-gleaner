{
  "sha": "0d404d447ae34e31bdf58ba09c5d3254db3766e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGQ0MDRkNDQ3YWUzNGUzMWJkZjU4YmEwOWM1ZDMyNTRkYjM3NjZlMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:45:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:51:58Z"
    },
    "message": "Add per-unit obstack\n\nThis adds an auto_obstack to the DWARF frame comp_unit object, and\nthen changes the remaining code here to use the comp_unit obstack\nrather than the objfile obstack.\n\nAt this point, all the storage for frame data is self-contained --\nthat is, it is independent of the objfile.\n\ngdb/ChangeLog\n2020-02-12  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/frame.c (struct comp_unit) <obstack>: New member.\n\t(decode_frame_entry_1): Use the comp_unit obstack.",
    "tree": {
      "sha": "ee47cdf3f464aba9c516d2ea46fa4885f64d9432",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ee47cdf3f464aba9c516d2ea46fa4885f64d9432"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0d404d447ae34e31bdf58ba09c5d3254db3766e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d404d447ae34e31bdf58ba09c5d3254db3766e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0d404d447ae34e31bdf58ba09c5d3254db3766e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d404d447ae34e31bdf58ba09c5d3254db3766e1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a7a3ae5c02d6d8711c2c336b9b809d05211fc497"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 10,
    "deletions": 2
  },
  "files": [
    {
      "sha": "5b705632af3d45f993f98725d1e5345a435d2310",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d404d447ae34e31bdf58ba09c5d3254db3766e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d404d447ae34e31bdf58ba09c5d3254db3766e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0d404d447ae34e31bdf58ba09c5d3254db3766e1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/frame.c (struct comp_unit) <obstack>: New member.\n+\t(decode_frame_entry_1): Use the comp_unit obstack.\n+\n 2020-02-12  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/frame.c (struct comp_unit): Add initializers and"
    },
    {
      "sha": "53f90799819a11afa61a51cf9b132e1b099d5b90",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d404d447ae34e31bdf58ba09c5d3254db3766e1/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d404d447ae34e31bdf58ba09c5d3254db3766e1/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=0d404d447ae34e31bdf58ba09c5d3254db3766e1",
      "patch": "@@ -164,6 +164,9 @@ struct comp_unit\n \n   /* The FDE table.  */\n   dwarf2_fde_table fde_table;\n+\n+  /* Hold data used by this module.  */\n+  auto_obstack obstack;\n };\n \n static struct dwarf2_fde *dwarf2_frame_find_fde (CORE_ADDR *pc,\n@@ -1777,7 +1780,7 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n       if (find_cie (cie_table, cie_pointer))\n \treturn end;\n \n-      cie = XOBNEW (&unit->objfile->objfile_obstack, struct dwarf2_cie);\n+      cie = XOBNEW (&unit->obstack, struct dwarf2_cie);\n       cie->initial_instructions = NULL;\n       cie->cie_pointer = cie_pointer;\n \n@@ -1956,7 +1959,7 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n       if (cie_pointer >= unit->dwarf_frame_size)\n \treturn NULL;\n \n-      fde = XOBNEW (&unit->objfile->objfile_obstack, struct dwarf2_fde);\n+      fde = XOBNEW (&unit->obstack, struct dwarf2_fde);\n       fde->cie = find_cie (cie_table, cie_pointer);\n       if (fde->cie == NULL)\n \t{"
    }
  ]
}