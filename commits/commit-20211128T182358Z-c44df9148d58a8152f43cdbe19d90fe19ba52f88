{
  "sha": "c44df9148d58a8152f43cdbe19d90fe19ba52f88",
  "node_id": "C_kwDOANOeidoAKGM0NGRmOTE0OGQ1OGE4MTUyZjQzY2RiZTE5ZDkwZmUxOWJhNTJmODg",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T05:18:07Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T18:23:58Z"
    },
    "message": "sim: sh: switch to new target-newlib-syscall\n\nUse the new target-newlib-syscall module.  This is needed to merge all\nthe architectures into a single build, and sh has a custom syscall\ntable for its newlib/libgloss port.",
    "tree": {
      "sha": "9d3cee6e7051feeadf9db84ac6948c42101eea7e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9d3cee6e7051feeadf9db84ac6948c42101eea7e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c44df9148d58a8152f43cdbe19d90fe19ba52f88",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c44df9148d58a8152f43cdbe19d90fe19ba52f88",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c44df9148d58a8152f43cdbe19d90fe19ba52f88",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c44df9148d58a8152f43cdbe19d90fe19ba52f88/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96b1eb7e1773b542ad592d81459f76cb3bd91bd1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96b1eb7e1773b542ad592d81459f76cb3bd91bd1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96b1eb7e1773b542ad592d81459f76cb3bd91bd1"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 23,
    "deletions": 25
  },
  "files": [
    {
      "sha": "3435f403ab86587cd01abd205466e90b2d4a119b",
      "filename": "sim/sh/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c44df9148d58a8152f43cdbe19d90fe19ba52f88/sim/sh/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c44df9148d58a8152f43cdbe19d90fe19ba52f88/sim/sh/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/sh/Makefile.in?ref=c44df9148d58a8152f43cdbe19d90fe19ba52f88",
      "patch": "@@ -15,9 +15,6 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n-# This selects the newlib/libgloss syscall definitions.\n-NL_TARGET = -DNL_TARGET_sh\n-\n ## COMMON_PRE_CONFIG_FRAG\n \n SIM_OBJS = \\"
    },
    {
      "sha": "fb92d9f4480a1aba01e13dd3a35bd035bc55f4b4",
      "filename": "sim/sh/interp.c",
      "status": "modified",
      "additions": 23,
      "deletions": 22,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c44df9148d58a8152f43cdbe19d90fe19ba52f88/sim/sh/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c44df9148d58a8152f43cdbe19d90fe19ba52f88/sim/sh/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/sh/interp.c?ref=c44df9148d58a8152f43cdbe19d90fe19ba52f88",
      "patch": "@@ -61,7 +61,7 @@\n #include \"sim-base.h\"\n #include \"sim-options.h\"\n \n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n \n #include <math.h>\n \n@@ -888,40 +888,40 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t  {\n \n #if !defined(__GO32__) && !defined(_WIN32)\n-\t  case TARGET_SYS_fork:\n+\t  case TARGET_NEWLIB_SH_SYS_fork:\n \t    regs[0] = fork ();\n \t    break;\n /* This would work only if endianness matched between host and target.\n    Besides, it's quite dangerous.  */\n #if 0\n-\t  case TARGET_SYS_execve:\n+\t  case TARGET_NEWLIB_SH_SYS_execve:\n \t    regs[0] = execve (ptr (regs[5]), (char **) ptr (regs[6]), \n \t\t\t      (char **) ptr (regs[7]));\n \t    break;\n-\t  case TARGET_SYS_execv:\n+\t  case TARGET_NEWLIB_SH_SYS_execv:\n \t    regs[0] = execve (ptr (regs[5]), (char **) ptr (regs[6]), 0);\n \t    break;\n #endif\n-\t  case TARGET_SYS_pipe:\n+\t  case TARGET_NEWLIB_SH_SYS_pipe:\n \t    {\n \t      regs[0] = (BUSERROR (regs[5], maskl)\n \t\t\t ? -EINVAL\n \t\t\t : pipe ((int *) ptr (regs[5])));\n \t    }\n \t    break;\n \n-\t  case TARGET_SYS_wait:\n+\t  case TARGET_NEWLIB_SH_SYS_wait:\n \t    regs[0] = wait ((int *) ptr (regs[5]));\n \t    break;\n #endif /* !defined(__GO32__) && !defined(_WIN32) */\n \n-\t  case TARGET_SYS_read:\n+\t  case TARGET_NEWLIB_SH_SYS_read:\n \t    strnswap (regs[6], regs[7]);\n \t    regs[0]\n \t      = callback->read (callback, regs[5], ptr (regs[6]), regs[7]);\n \t    strnswap (regs[6], regs[7]);\n \t    break;\n-\t  case TARGET_SYS_write:\n+\t  case TARGET_NEWLIB_SH_SYS_write:\n \t    strnswap (regs[6], regs[7]);\n \t    if (regs[5] == 1)\n \t      regs[0] = (int) callback->write_stdout (callback, \n@@ -931,27 +931,27 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t\t\t\t\t       ptr (regs[6]), regs[7]);\n \t    strnswap (regs[6], regs[7]);\n \t    break;\n-\t  case TARGET_SYS_lseek:\n+\t  case TARGET_NEWLIB_SH_SYS_lseek:\n \t    regs[0] = callback->lseek (callback,regs[5], regs[6], regs[7]);\n \t    break;\n-\t  case TARGET_SYS_close:\n+\t  case TARGET_NEWLIB_SH_SYS_close:\n \t    regs[0] = callback->close (callback,regs[5]);\n \t    break;\n-\t  case TARGET_SYS_open:\n+\t  case TARGET_NEWLIB_SH_SYS_open:\n \t    {\n \t      int len = strswaplen (regs[5]);\n \t      strnswap (regs[5], len);\n \t      regs[0] = callback->open (callback, ptr (regs[5]), regs[6]);\n \t      strnswap (regs[5], len);\n \t      break;\n \t    }\n-\t  case TARGET_SYS_exit:\n+\t  case TARGET_NEWLIB_SH_SYS_exit:\n \t    /* EXIT - caller can look in r5 to work out the reason */\n \t    raise_exception (SIGQUIT);\n \t    regs[0] = regs[5];\n \t    break;\n \n-\t  case TARGET_SYS_stat:\t/* added at hmsi */\n+\t  case TARGET_NEWLIB_SH_SYS_stat:\t/* added at hmsi */\n \t    /* stat system call */\n \t    {\n \t      struct stat host_stat;\n@@ -1000,7 +1000,7 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t    break;\n \n #ifndef _WIN32\n-\t  case TARGET_SYS_chown:\n+\t  case TARGET_NEWLIB_SH_SYS_chown:\n \t    {\n \t      int len = strswaplen (regs[5]);\n \n@@ -1010,7 +1010,7 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t      break;\n \t    }\n #endif /* _WIN32 */\n-\t  case TARGET_SYS_chmod:\n+\t  case TARGET_NEWLIB_SH_SYS_chmod:\n \t    {\n \t      int len = strswaplen (regs[5]);\n \n@@ -1019,7 +1019,7 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t      strnswap (regs[5], len);\n \t      break;\n \t    }\n-\t  case TARGET_SYS_utime:\n+\t  case TARGET_NEWLIB_SH_SYS_utime:\n \t    {\n \t      /* Cast the second argument to void *, to avoid type mismatch\n \t\t if a prototype is present.  */\n@@ -1035,16 +1035,16 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t      strnswap (regs[5], len);\n \t      break;\n \t    }\n-\t  case TARGET_SYS_argc:\n+\t  case TARGET_NEWLIB_SH_SYS_argc:\n \t    regs[0] = countargv (prog_argv);\n \t    break;\n-\t  case TARGET_SYS_argnlen:\n+\t  case TARGET_NEWLIB_SH_SYS_argnlen:\n \t    if (regs[5] < countargv (prog_argv))\n \t      regs[0] = strlen (prog_argv[regs[5]]);\n \t    else\n \t      regs[0] = -1;\n \t    break;\n-\t  case TARGET_SYS_argn:\n+\t  case TARGET_NEWLIB_SH_SYS_argn:\n \t    if (regs[5] < countargv (prog_argv))\n \t      {\n \t\t/* Include the termination byte.  */\n@@ -1054,13 +1054,13 @@ trap (SIM_DESC sd, int i, int *regs, unsigned char *insn_ptr,\n \t    else\n \t      regs[0] = -1;\n \t    break;\n-\t  case TARGET_SYS_time:\n+\t  case TARGET_NEWLIB_SH_SYS_time:\n \t    regs[0] = get_now ();\n \t    break;\n-\t  case TARGET_SYS_ftruncate:\n+\t  case TARGET_NEWLIB_SH_SYS_ftruncate:\n \t    regs[0] = callback->ftruncate (callback, regs[5], regs[6]);\n \t    break;\n-\t  case TARGET_SYS_truncate:\n+\t  case TARGET_NEWLIB_SH_SYS_truncate:\n \t    {\n \t      int len = strswaplen (regs[5]);\n \t      strnswap (regs[5], len);\n@@ -2345,6 +2345,7 @@ sim_open (SIM_OPEN_KIND kind, host_callback *cb,\n \n   /* Set default options before parsing user options.  */\n   current_alignment = STRICT_ALIGNMENT;\n+  cb->syscall_map = cb_sh_syscall_map;\n \n   /* The cpu data is kept in a separately allocated chunk of memory.  */\n   if (sim_cpu_alloc_all (sd, 1) != SIM_RC_OK)"
    }
  ]
}