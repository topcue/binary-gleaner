{
  "sha": "5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI4NzJmN2RmNzZjYzg4ZTBjNGZkZmU3ODcyYTNkZjMxNzgzMDJkYw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-06T11:34:36Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-06T11:34:36Z"
    },
    "message": "x86: replace EX{d,q}Scalar by EXxmm_m{d,q}\n\nAlong the lines of 4102be5cf925 (\"x86: replace EXxmm_mdq by\nEXVexWdqScalar\"), but in the opposite direction, replace EXdScalar/\nEXqScalar by EXxmm_md/EXxmm_mq respectively, rendering d_scalar_mode and\nq_scalar_mode unused. The change is done this way to improve telling\napart operands affected here from ones using EXbScalar/EXwScalar, which\nwork sufficiently differently. Additionally this increases similarity\nbetween several VEX-encoded insns and their EVEX-encoded counterparts.",
    "tree": {
      "sha": "9db3a03d334aff5006e90b2eac3ef2860da32b84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9db3a03d334aff5006e90b2eac3ef2860da32b84"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ddc73fa9877b81a278139fd0e33c446aaceddf34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ddc73fa9877b81a278139fd0e33c446aaceddf34",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ddc73fa9877b81a278139fd0e33c446aaceddf34"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 48,
    "deletions": 47
  },
  "files": [
    {
      "sha": "3578b6b745b4e7605fd626bf50ab6504e855cfdc",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
      "patch": "@@ -1,3 +1,15 @@\n+2020-07-06  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (safe-ctype.h): Include.\n+\t(EXdScalar, EXqScalar): Delete.\n+\t(d_scalar_mode, q_scalar_mode): Delete.\n+\t(prefix_table, vex_len_table): Use EXxmm_md in place of\n+\tEXdScalar and EXxmm_mq in place of EXqScalar.\n+\t(intel_operand_size, OP_E_memory, OP_EX): Remove uses of\n+\td_scalar_mode and q_scalar_mode.\n+\t* i386-dis-evex-w.h (vmovss): Use EXxmm_md.\n+\t(vmovsd): Use EXxmm_mq.\n+\n 2020-07-06  Yuri Chornoivan  <yurchor@ukr.net>\n \n \tPR 26204"
    },
    {
      "sha": "3029169050294a75f294e047e20c2d6bddee8e73",
      "filename": "opcodes/i386-dis-evex-w.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/opcodes/i386-dis-evex-w.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/opcodes/i386-dis-evex-w.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-w.h?ref=5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
      "patch": "@@ -1,11 +1,11 @@\n   /* EVEX_W_0F10_P_1 */\n   {\n-    { \"vmovss\",\t{ XMVexScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vmovss\",\t{ XMVexScalar, VexScalar, EXxmm_md }, 0 },\n   },\n   /* EVEX_W_0F10_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vmovsd\",\t{ XMVexScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vmovsd\",\t{ XMVexScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n   /* EVEX_W_0F11_P_1 */\n   {"
    },
    {
      "sha": "9147c37220c66cadce3d252f5e0314e3df4fa8d2",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 34,
      "deletions": 45,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b872f7df76cc88e0c4fdfe7872a3df3178302dc/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=5b872f7df76cc88e0c4fdfe7872a3df3178302dc",
      "patch": "@@ -37,6 +37,7 @@\n #include \"opintl.h\"\n #include \"opcode/i386.h\"\n #include \"libiberty.h\"\n+#include \"safe-ctype.h\"\n \n #include <setjmp.h>\n \n@@ -383,10 +384,8 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define EXw { OP_EX, w_mode }\n #define EXwScalar { OP_EX, w_scalar_mode }\n #define EXd { OP_EX, d_mode }\n-#define EXdScalar { OP_EX, d_scalar_mode }\n #define EXdS { OP_EX, d_swap_mode }\n #define EXq { OP_EX, q_mode }\n-#define EXqScalar { OP_EX, q_scalar_mode }\n #define EXqScalarS { OP_EX, q_scalar_swap_mode }\n #define EXqS { OP_EX, q_swap_mode }\n #define EXx { OP_EX, x_mode }\n@@ -604,12 +603,8 @@ enum\n   b_scalar_mode,\n   /* like w_mode, ignore vector length.  */\n   w_scalar_mode,\n-  /* like d_mode, ignore vector length.  */\n-  d_scalar_mode,\n   /* like d_swap_mode, ignore vector length.  */\n   d_scalar_swap_mode,\n-  /* like q_mode, ignore vector length.  */\n-  q_scalar_mode,\n   /* like q_swap_mode, ignore vector length.  */\n   q_scalar_swap_mode,\n   /* like vex_mode, ignore vector length.  */\n@@ -4633,9 +4628,9 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F10 */\n   {\n     { \"vmovups\",\t{ XM, EXx }, 0 },\n-    { \"vmovss\",\t\t{ XMVexScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vmovss\",\t\t{ XMVexScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vmovupd\",\t{ XM, EXx }, 0 },\n-    { \"vmovsd\",\t\t{ XMVexScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vmovsd\",\t\t{ XMVexScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F11 */\n@@ -4672,31 +4667,31 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F2C */\n   {\n     { Bad_Opcode },\n-    { \"vcvttss2si\",\t{ Gdq, EXdScalar }, 0 },\n+    { \"vcvttss2si\",\t{ Gdq, EXxmm_md }, 0 },\n     { Bad_Opcode },\n-    { \"vcvttsd2si\",\t{ Gdq, EXqScalar }, 0 },\n+    { \"vcvttsd2si\",\t{ Gdq, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2D */\n   {\n     { Bad_Opcode },\n-    { \"vcvtss2si\",\t{ Gdq, EXdScalar }, 0 },\n+    { \"vcvtss2si\",\t{ Gdq, EXxmm_md }, 0 },\n     { Bad_Opcode },\n-    { \"vcvtsd2si\",\t{ Gdq, EXqScalar }, 0 },\n+    { \"vcvtsd2si\",\t{ Gdq, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2E */\n   {\n-    { \"vucomiss\",\t{ XMScalar, EXdScalar }, 0 },\n+    { \"vucomiss\",\t{ XMScalar, EXxmm_md }, 0 },\n     { Bad_Opcode },\n-    { \"vucomisd\",\t{ XMScalar, EXqScalar }, 0 },\n+    { \"vucomisd\",\t{ XMScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2F */\n   {\n-    { \"vcomiss\",\t{ XMScalar, EXdScalar }, 0 },\n+    { \"vcomiss\",\t{ XMScalar, EXxmm_md }, 0 },\n     { Bad_Opcode },\n-    { \"vcomisd\",\t{ XMScalar, EXqScalar }, 0 },\n+    { \"vcomisd\",\t{ XMScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F41 */\n@@ -4758,45 +4753,45 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F51 */\n   {\n     { \"vsqrtps\",\t{ XM, EXx }, 0 },\n-    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vsqrtpd\",\t{ XM, EXx }, 0 },\n-    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F52 */\n   {\n     { \"vrsqrtps\",\t{ XM, EXx }, 0 },\n-    { \"vrsqrtss\",\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vrsqrtss\",\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n   },\n \n   /* PREFIX_VEX_0F53 */\n   {\n     { \"vrcpps\",\t\t{ XM, EXx }, 0 },\n-    { \"vrcpss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vrcpss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n   },\n \n   /* PREFIX_VEX_0F58 */\n   {\n     { \"vaddps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vaddss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vaddss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vaddpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vaddsd\",\t\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vaddsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F59 */\n   {\n     { \"vmulps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmulss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vmulss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vmulpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmulsd\",\t\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vmulsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5A */\n   {\n     { \"vcvtps2pd\",\t{ XM, EXxmmq }, 0 },\n-    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vcvtpd2ps%XY\",{ XMM, EXx }, 0 },\n-    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5B */\n@@ -4809,33 +4804,33 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F5C */\n   {\n     { \"vsubps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vsubss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vsubss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vsubpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vsubsd\",\t\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vsubsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5D */\n   {\n     { \"vminps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vminss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vminss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vminpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vminsd\",\t\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vminsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5E */\n   {\n     { \"vdivps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vdivss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vdivss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vdivpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vdivsd\",\t\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vdivsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5F */\n   {\n     { \"vmaxps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmaxss\",\t\t{ XMScalar, VexScalar, EXdScalar }, 0 },\n+    { \"vmaxss\",\t\t{ XMScalar, VexScalar, EXxmm_md }, 0 },\n     { \"vmaxpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmaxsd\",\t\t{ XMScalar, VexScalar, EXqScalar }, 0 },\n+    { \"vmaxsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F60 */\n@@ -5131,9 +5126,9 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0FC2 */\n   {\n     { \"vcmpps\",\t\t{ XM, Vex, EXx, VCMP }, 0 },\n-    { \"vcmpss\",\t\t{ XMScalar, VexScalar, EXdScalar, VCMP }, 0 },\n+    { \"vcmpss\",\t\t{ XMScalar, VexScalar, EXxmm_md, VCMP }, 0 },\n     { \"vcmppd\",\t\t{ XM, Vex, EXx, VCMP }, 0 },\n-    { \"vcmpsd\",\t\t{ XMScalar, VexScalar, EXqScalar, VCMP }, 0 },\n+    { \"vcmpsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq, VCMP }, 0 },\n   },\n \n   /* PREFIX_VEX_0FC4 */\n@@ -6336,14 +6331,14 @@ static const struct dis386 prefix_table[][4] = {\n   {\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vroundss\",\t{ XMScalar, VexScalar, EXdScalar, Ib }, 0 },\n+    { \"vroundss\",\t{ XMScalar, VexScalar, EXxmm_md, Ib }, 0 },\n   },\n \n   /* PREFIX_VEX_0F3A0B */\n   {\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vroundsd\",\t{ XMScalar, VexScalar, EXqScalar, Ib }, 0 },\n+    { \"vroundsd\",\t{ XMScalar, VexScalar, EXxmm_mq, Ib }, 0 },\n   },\n \n   /* PREFIX_VEX_0F3A0C */\n@@ -9403,7 +9398,7 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F7E_P_1 */\n   {\n-    { \"vmovq\",\t\t{ XMScalar, EXqScalar }, 0 },\n+    { \"vmovq\",\t\t{ XMScalar, EXxmm_mq }, 0 },\n   },\n \n   /* VEX_LEN_0F7E_P_2 */\n@@ -13513,14 +13508,12 @@ intel_operand_size (int bytemode, int sizeflag)\n       used_prefixes |= (prefixes & PREFIX_DATA);\n       break;\n     case d_mode:\n-    case d_scalar_mode:\n     case d_scalar_swap_mode:\n     case d_swap_mode:\n     case dqd_mode:\n       oappend (\"DWORD PTR \");\n       break;\n     case q_mode:\n-    case q_scalar_mode:\n     case q_scalar_swap_mode:\n     case q_swap_mode:\n       oappend (\"QWORD PTR \");\n@@ -14016,15 +14009,13 @@ OP_E_memory (int bytemode, int sizeflag)\n \t  break;\n \tcase xmm_mq_mode:\n \tcase q_mode:\n-\tcase q_scalar_mode:\n \tcase q_swap_mode:\n \tcase q_scalar_swap_mode:\n \t  shift = 3;\n \t  break;\n \tcase dqd_mode:\n \tcase xmm_md_mode:\n \tcase d_mode:\n-\tcase d_scalar_mode:\n \tcase d_swap_mode:\n \tcase d_scalar_swap_mode:\n \t  shift = 2;\n@@ -15334,9 +15325,7 @@ OP_EX (int bytemode, int sizeflag)\n       && bytemode != xmmq_mode\n       && bytemode != evex_half_bcst_xmmq_mode\n       && bytemode != ymm_mode\n-      && bytemode != d_scalar_mode\n       && bytemode != d_scalar_swap_mode\n-      && bytemode != q_scalar_mode\n       && bytemode != q_scalar_swap_mode\n       && bytemode != vex_scalar_w_dq_mode)\n     {"
    }
  ]
}