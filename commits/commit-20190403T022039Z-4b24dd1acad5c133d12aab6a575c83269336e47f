{
  "sha": "4b24dd1acad5c133d12aab6a575c83269336e47f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGIyNGRkMWFjYWQ1YzEzM2QxMmFhYjZhNTc1YzgzMjY5MzM2ZTQ3Zg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-02T06:08:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-03T02:20:39Z"
    },
    "message": "BFD whitespace fixes\n\n\t* coff-i386.c, * coff-x86_64.c, * coffgen.c, * dwarf2.c,\n\t* elf-m10200.c, * elf.c, * elf32-arm.c, * elf32-bfin.c,\n\t* elf32-csky.c, * elf32-m32r.c, * elf32-microblaze.c, * elf32-pru.c,\n\t* elf32-rx.c, * elf32-xgate.c, * elf64-sparc.c, * elfnn-ia64.c,\n\t* elfxx-riscv.c, * elfxx-sparc.c, * linker.c, * mach-o.c,\n\t* pe-x86_64.c, * pei-x86_64.c, * plugin.c: Whitespace fixes.",
    "tree": {
      "sha": "7f1cb99426cf014b2b0070d8c72294c4b503c556",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7f1cb99426cf014b2b0070d8c72294c4b503c556"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b24dd1acad5c133d12aab6a575c83269336e47f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b24dd1acad5c133d12aab6a575c83269336e47f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b24dd1acad5c133d12aab6a575c83269336e47f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b24dd1acad5c133d12aab6a575c83269336e47f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "49149495dabc2ef54b7cd38a9346a8696b205da7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49149495dabc2ef54b7cd38a9346a8696b205da7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/49149495dabc2ef54b7cd38a9346a8696b205da7"
    }
  ],
  "stats": {
    "total": 385,
    "additions": 197,
    "deletions": 188
  },
  "files": [
    {
      "sha": "7953c840cd79317d560580b675bf7da6a7139c8e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-03  Alan Modra  <amodra@gmail.com>\n+\n+\t* coff-i386.c, * coff-x86_64.c, * coffgen.c, * dwarf2.c,\n+\t* elf-m10200.c, * elf.c, * elf32-arm.c, * elf32-bfin.c,\n+\t* elf32-csky.c, * elf32-m32r.c, * elf32-microblaze.c, * elf32-pru.c,\n+\t* elf32-rx.c, * elf32-xgate.c, * elf64-sparc.c, * elfnn-ia64.c,\n+\t* elfxx-riscv.c, * elfxx-sparc.c, * linker.c, * mach-o.c,\n+\t* pe-x86_64.c, * pei-x86_64.c, * plugin.c: Whitespace fixes.\n+\n 2019-04-02  Jim Wilson  <jimw@sifive.com>\n \n \tPR 24389"
    },
    {
      "sha": "9810fd71be3a94635b539751956225ba95920737",
      "filename": "bfd/coff-i386.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/coff-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/coff-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-i386.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -661,7 +661,7 @@ const bfd_target\n      bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* hdrs */\n \n /* Note that we allow an object file to be treated as a core file as well.  */\n-    \n+\n #ifdef COFF_CHECK_FORMAT\n   {\t\t\t\t/* bfd_check_format */\n     _bfd_dummy_target,"
    },
    {
      "sha": "c5e9a346ae063f16252576da5e492458a363b068",
      "filename": "bfd/coff-x86_64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/coff-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/coff-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-x86_64.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -792,19 +792,19 @@ const bfd_target\n     _bfd_dummy_target,\n     amd64coff_object_p,\n     bfd_generic_archive_p,\n-    amd64coff_object_p \n+    amd64coff_object_p\n   },\n   {\t\t\t\t/* bfd_set_format.  */\n     _bfd_bool_bfd_false_error,\n     coff_mkobject,\n     _bfd_generic_mkarchive,\n-    _bfd_bool_bfd_false_error \n+    _bfd_bool_bfd_false_error\n   },\n   {\t\t\t\t/* bfd_write_contents.  */\n     _bfd_bool_bfd_false_error,\n     coff_write_object_contents,\n     _bfd_write_archive_contents,\n-    _bfd_bool_bfd_false_error \n+    _bfd_bool_bfd_false_error\n   },\n \n   BFD_JUMP_TABLE_GENERIC (coff),"
    },
    {
      "sha": "0001d9a4133363723faad9625ed631f4c2effdb1",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -836,7 +836,7 @@ coff_mangle_symbols (bfd *bfd_ptr)\n \t  for (i = 0; i < s->u.syment.n_numaux; i++)\n \t    {\n \t      combined_entry_type *a = s + i + 1;\n-\t      \n+\n \t      BFD_ASSERT (! a->is_sym);\n \t      if (a->fix_tag)\n \t\t{"
    },
    {
      "sha": "76af009e33aaf19014fc713ab9122891280cba7d",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -4300,7 +4300,7 @@ section_vma_same (const bfd *abfd, const struct dwarf2_debug *stash)\n      stashed vma information.  */\n   if (abfd->section_count != stash->sec_vma_count)\n     return FALSE;\n-     \n+\n   for (i = 0, s = abfd->sections; i < abfd->section_count; i++, s = s->next)\n     {\n       bfd_vma vma;"
    },
    {
      "sha": "cfccb968670c6d6e89bc03a847794c0346c89ba2",
      "filename": "bfd/elf-m10200.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf-m10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf-m10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10200.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -228,7 +228,7 @@ mn10200_info_to_howto (bfd *abfd,\n       bfd_set_error (bfd_error_bad_value);\n       return FALSE;\n     }\n-  \n+\n   cache_ptr->howto = &elf_mn10200_howto_table[r_type];\n   return cache_ptr->howto != NULL;\n }"
    },
    {
      "sha": "952e4bfe11b4a222823a31d07615007e91b519ba",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 104,
      "deletions": 104,
      "changes": 208,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -9942,94 +9942,94 @@ elfcore_grok_note (bfd *abfd, Elf_Internal_Note *note)\n \n     case NT_PPC_TAR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tar (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tar (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_PPR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_ppr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_ppr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_DSCR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_dscr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_dscr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_EBB:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_ebb (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_ebb (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_PMU:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_pmu (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_pmu (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CGPR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_cgpr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_cgpr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CFPR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_cfpr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_cfpr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CVMX:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_cvmx (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_cvmx (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CVSX:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_cvsx (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_cvsx (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_SPR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_spr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_spr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CTAR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_ctar (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_ctar (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CPPR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_cppr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_cppr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_PPC_TM_CDSCR:\n       if (note->namesz == 6\n-          && strcmp (note->namedata, \"LINUX\") == 0)\n-        return elfcore_grok_ppc_tm_cdscr (abfd, note);\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_ppc_tm_cdscr (abfd, note);\n       else\n-        return TRUE;\n+\treturn TRUE;\n \n     case NT_S390_HIGH_GPRS:\n       if (note->namesz == 6\n@@ -11147,158 +11147,158 @@ elfcore_write_ppc_vsx (bfd *abfd,\n \n char *\n elfcore_write_ppc_tar (bfd *abfd,\n-                       char *buf,\n-                       int *bufsiz,\n-                       const void *ppc_tar,\n-                       int size)\n+\t\t       char *buf,\n+\t\t       int *bufsiz,\n+\t\t       const void *ppc_tar,\n+\t\t       int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TAR, ppc_tar, size);\n+\t\t\t     note_name, NT_PPC_TAR, ppc_tar, size);\n }\n \n char *\n elfcore_write_ppc_ppr (bfd *abfd,\n-                       char *buf,\n-                       int *bufsiz,\n-                       const void *ppc_ppr,\n-                       int size)\n+\t\t       char *buf,\n+\t\t       int *bufsiz,\n+\t\t       const void *ppc_ppr,\n+\t\t       int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_PPR, ppc_ppr, size);\n+\t\t\t     note_name, NT_PPC_PPR, ppc_ppr, size);\n }\n \n char *\n elfcore_write_ppc_dscr (bfd *abfd,\n-                        char *buf,\n-                        int *bufsiz,\n-                        const void *ppc_dscr,\n-                        int size)\n+\t\t\tchar *buf,\n+\t\t\tint *bufsiz,\n+\t\t\tconst void *ppc_dscr,\n+\t\t\tint size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_DSCR, ppc_dscr, size);\n+\t\t\t     note_name, NT_PPC_DSCR, ppc_dscr, size);\n }\n \n char *\n elfcore_write_ppc_ebb (bfd *abfd,\n-                       char *buf,\n-                       int *bufsiz,\n-                       const void *ppc_ebb,\n-                       int size)\n+\t\t       char *buf,\n+\t\t       int *bufsiz,\n+\t\t       const void *ppc_ebb,\n+\t\t       int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_EBB, ppc_ebb, size);\n+\t\t\t     note_name, NT_PPC_EBB, ppc_ebb, size);\n }\n \n char *\n elfcore_write_ppc_pmu (bfd *abfd,\n-                       char *buf,\n-                       int *bufsiz,\n-                       const void *ppc_pmu,\n-                       int size)\n+\t\t       char *buf,\n+\t\t       int *bufsiz,\n+\t\t       const void *ppc_pmu,\n+\t\t       int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_PMU, ppc_pmu, size);\n+\t\t\t     note_name, NT_PPC_PMU, ppc_pmu, size);\n }\n \n char *\n elfcore_write_ppc_tm_cgpr (bfd *abfd,\n-                           char *buf,\n-                           int *bufsiz,\n-                           const void *ppc_tm_cgpr,\n-                           int size)\n+\t\t\t   char *buf,\n+\t\t\t   int *bufsiz,\n+\t\t\t   const void *ppc_tm_cgpr,\n+\t\t\t   int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CGPR, ppc_tm_cgpr, size);\n+\t\t\t     note_name, NT_PPC_TM_CGPR, ppc_tm_cgpr, size);\n }\n \n char *\n elfcore_write_ppc_tm_cfpr (bfd *abfd,\n-                           char *buf,\n-                           int *bufsiz,\n-                           const void *ppc_tm_cfpr,\n-                           int size)\n+\t\t\t   char *buf,\n+\t\t\t   int *bufsiz,\n+\t\t\t   const void *ppc_tm_cfpr,\n+\t\t\t   int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CFPR, ppc_tm_cfpr, size);\n+\t\t\t     note_name, NT_PPC_TM_CFPR, ppc_tm_cfpr, size);\n }\n \n char *\n elfcore_write_ppc_tm_cvmx (bfd *abfd,\n-                           char *buf,\n-                           int *bufsiz,\n-                           const void *ppc_tm_cvmx,\n-                           int size)\n+\t\t\t   char *buf,\n+\t\t\t   int *bufsiz,\n+\t\t\t   const void *ppc_tm_cvmx,\n+\t\t\t   int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CVMX, ppc_tm_cvmx, size);\n+\t\t\t     note_name, NT_PPC_TM_CVMX, ppc_tm_cvmx, size);\n }\n \n char *\n elfcore_write_ppc_tm_cvsx (bfd *abfd,\n-                           char *buf,\n-                           int *bufsiz,\n-                           const void *ppc_tm_cvsx,\n-                           int size)\n+\t\t\t   char *buf,\n+\t\t\t   int *bufsiz,\n+\t\t\t   const void *ppc_tm_cvsx,\n+\t\t\t   int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CVSX, ppc_tm_cvsx, size);\n+\t\t\t     note_name, NT_PPC_TM_CVSX, ppc_tm_cvsx, size);\n }\n \n char *\n elfcore_write_ppc_tm_spr (bfd *abfd,\n-                          char *buf,\n-                          int *bufsiz,\n-                          const void *ppc_tm_spr,\n-                          int size)\n+\t\t\t  char *buf,\n+\t\t\t  int *bufsiz,\n+\t\t\t  const void *ppc_tm_spr,\n+\t\t\t  int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_SPR, ppc_tm_spr, size);\n+\t\t\t     note_name, NT_PPC_TM_SPR, ppc_tm_spr, size);\n }\n \n char *\n elfcore_write_ppc_tm_ctar (bfd *abfd,\n-                           char *buf,\n-                           int *bufsiz,\n-                           const void *ppc_tm_ctar,\n-                           int size)\n+\t\t\t   char *buf,\n+\t\t\t   int *bufsiz,\n+\t\t\t   const void *ppc_tm_ctar,\n+\t\t\t   int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CTAR, ppc_tm_ctar, size);\n+\t\t\t     note_name, NT_PPC_TM_CTAR, ppc_tm_ctar, size);\n }\n \n char *\n elfcore_write_ppc_tm_cppr (bfd *abfd,\n-                           char *buf,\n-                           int *bufsiz,\n-                           const void *ppc_tm_cppr,\n-                           int size)\n+\t\t\t   char *buf,\n+\t\t\t   int *bufsiz,\n+\t\t\t   const void *ppc_tm_cppr,\n+\t\t\t   int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CPPR, ppc_tm_cppr, size);\n+\t\t\t     note_name, NT_PPC_TM_CPPR, ppc_tm_cppr, size);\n }\n \n char *\n elfcore_write_ppc_tm_cdscr (bfd *abfd,\n-                            char *buf,\n-                            int *bufsiz,\n-                            const void *ppc_tm_cdscr,\n-                            int size)\n+\t\t\t    char *buf,\n+\t\t\t    int *bufsiz,\n+\t\t\t    const void *ppc_tm_cdscr,\n+\t\t\t    int size)\n {\n   char *note_name = \"LINUX\";\n   return elfcore_write_note (abfd, buf, bufsiz,\n-                             note_name, NT_PPC_TM_CDSCR, ppc_tm_cdscr, size);\n+\t\t\t     note_name, NT_PPC_TM_CDSCR, ppc_tm_cdscr, size);\n }\n \n static char *"
    },
    {
      "sha": "b5b2dab357a39286c158b65d9cdd74c1f7bbecd1",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -9534,7 +9534,7 @@ elf32_arm_allocate_plt_entry (struct bfd_link_info *info,\n \tarm_plt->got_offset = sgotplt->size - 8 * htab->num_tls_desc;\n       if (htab->fdpic_p)\n \t/* Function descriptor takes 64 bits in GOT.  */\n-        sgotplt->size += 8;\n+\tsgotplt->size += 8;\n       else\n \tsgotplt->size += 4;\n     }\n@@ -9646,10 +9646,10 @@ elf32_arm_populate_plt_entry (bfd *output_bfd, struct bfd_link_info *info,\n \t After the reserved .got.plt entries, all symbols appear in\n \t the same order as in .plt.  */\n       if (htab->fdpic_p)\n-        /* Function descriptor takes 8 bytes.  */\n-        plt_index = (got_offset - got_header_size) / 8;\n+\t/* Function descriptor takes 8 bytes.  */\n+\tplt_index = (got_offset - got_header_size) / 8;\n       else\n-        plt_index = (got_offset - got_header_size) / 4;\n+\tplt_index = (got_offset - got_header_size) / 4;\n \n       /* Calculate the address of the GOT entry.  */\n       got_address = (sgot->output_section->vma\n@@ -12620,7 +12620,7 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \n     case R_ARM_GOTOFFFUNCDESC:\n       {\n-        if (h == NULL)\n+\tif (h == NULL)\n \t  {\n \t    struct fdpic_local *local_fdpic_cnts = elf32_arm_local_fdpic_cnts(input_bfd);\n \t    int dynindx = elf_section_data (sym_sec->output_section)->dynindx;\n@@ -12681,7 +12681,7 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \n     case R_ARM_GOTFUNCDESC:\n       {\n-        if (h != NULL)\n+\tif (h != NULL)\n \t  {\n \t    Elf_Internal_Rela outrel;\n \n@@ -12741,9 +12741,10 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \t\toutrel.r_addend = 0;\n \t\tif (h->dynindx == -1 && !bfd_link_pic(info))\n \t\t  if (h->root.type == bfd_link_hash_undefweak)\n-                    arm_elf_add_rofixup(output_bfd, globals->srofixup, -1);\n+\t\t    arm_elf_add_rofixup(output_bfd, globals->srofixup, -1);\n \t\t  else\n-                    arm_elf_add_rofixup(output_bfd, globals->srofixup, outrel.r_offset);\n+\t\t    arm_elf_add_rofixup(output_bfd, globals->srofixup,\n+\t\t\t\t\toutrel.r_offset);\n \t\telse\n \t\t  elf32_arm_add_dynreloc (output_bfd, info, srelgot, &outrel);\n \t\teh->fdpic_cnts.gotfuncdesc_offset |= 1;\n@@ -12761,7 +12762,7 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \n     case R_ARM_FUNCDESC:\n       {\n-        if (h == NULL)\n+\tif (h == NULL)\n \t  {\n \t    struct fdpic_local *local_fdpic_cnts = elf32_arm_local_fdpic_cnts(input_bfd);\n \t    Elf_Internal_Rela outrel;\n@@ -16334,9 +16335,9 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n       eh->fdpic_cnts.gotfuncdesc_offset = s->size;\n       s->size += 4;\n       if (h->dynindx == -1 && !bfd_link_pic(info))\n-        htab->srofixup->size += 4;\n+\thtab->srofixup->size += 4;\n       else\n-        elf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n+\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n     }\n \n   if (eh->fdpic_cnts.funcdesc_cnt > 0)\n@@ -17843,15 +17844,15 @@ elf32_arm_output_plt_map_1 (output_arch_syminfo *osi,\n \t: ARM_MAP_ARM;\n \n       if (elf32_arm_plt_needs_thumb_stub_p (osi->info, arm_plt))\n-        if (!elf32_arm_output_map_sym (osi, ARM_MAP_THUMB, addr - 4))\n-          return FALSE;\n+\tif (!elf32_arm_output_map_sym (osi, ARM_MAP_THUMB, addr - 4))\n+\t  return FALSE;\n       if (!elf32_arm_output_map_sym (osi, type, addr))\n-        return FALSE;\n+\treturn FALSE;\n       if (!elf32_arm_output_map_sym (osi, ARM_MAP_DATA, addr + 16))\n-        return FALSE;\n+\treturn FALSE;\n       if (htab->plt_entry_size == 4 * ARRAY_SIZE(elf32_arm_fdpic_plt_entry))\n-        if (!elf32_arm_output_map_sym (osi, type, addr + 24))\n-          return FALSE;\n+\tif (!elf32_arm_output_map_sym (osi, type, addr + 24))\n+\t  return FALSE;\n     }\n   else if (using_thumb_only (htab))\n     {\n@@ -20454,7 +20455,7 @@ elf32_arm_fdpic_omit_section_dynsym (bfd *output_bfd ATTRIBUTE_UNUSED,\n #define elf32_bed\t\t\t\telf32_arm_fdpic_bed\n \n #undef  bfd_elf32_bfd_link_hash_table_create\n-#define bfd_elf32_bfd_link_hash_table_create \telf32_arm_fdpic_link_hash_table_create\n+#define bfd_elf32_bfd_link_hash_table_create\telf32_arm_fdpic_link_hash_table_create\n \n #undef elf_backend_omit_section_dynsym\n #define elf_backend_omit_section_dynsym\t\telf32_arm_fdpic_omit_section_dynsym"
    },
    {
      "sha": "2e4751f89c0ab7ce4dc70f557c95599b02b3b3d2",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -142,12 +142,12 @@ bfin_pcrel24_reloc (bfd *abfd,\n \n static bfd_reloc_status_type\n bfin_imm16_reloc (bfd *abfd,\n-     \t\t  arelent *reloc_entry,\n-     \t\t  asymbol *symbol,\n-     \t\t  void * data,\n-     \t\t  asection *input_section,\n-     \t\t  bfd *output_bfd,\n-     \t\t  char **error_message ATTRIBUTE_UNUSED)\n+\t\t  arelent *reloc_entry,\n+\t\t  asymbol *symbol,\n+\t\t  void * data,\n+\t\t  asection *input_section,\n+\t\t  bfd *output_bfd,\n+\t\t  char **error_message ATTRIBUTE_UNUSED)\n {\n   bfd_vma relocation, x;\n   bfd_size_type reloc_addr = reloc_entry->address;\n@@ -281,11 +281,11 @@ bfin_byte4_reloc (bfd *abfd,\n static bfd_reloc_status_type\n bfin_bfd_reloc (bfd *abfd,\n \t\tarelent *reloc_entry,\n-     \t\tasymbol *symbol,\n-     \t\tvoid * data,\n-     \t\tasection *input_section,\n-     \t\tbfd *output_bfd,\n-     \t\tchar **error_message ATTRIBUTE_UNUSED)\n+\t\tasymbol *symbol,\n+\t\tvoid * data,\n+\t\tasection *input_section,\n+\t\tbfd *output_bfd,\n+\t\tchar **error_message ATTRIBUTE_UNUSED)\n {\n   bfd_vma relocation;\n   bfd_size_type addr = reloc_entry->address;"
    },
    {
      "sha": "fb380b1395d76eeb48be49273973ec279693bdf7",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -3098,9 +3098,9 @@ group_sections (struct csky_elf_link_hash_table *htab,\n \tcontinue;\n \n       /* Reverse the list: we must avoid placing stubs at the\n-         beginning of the section because the beginning of the text\n-         section may be required for an interrupt vector in bare metal\n-         code.  */\n+\t beginning of the section because the beginning of the text\n+\t section may be required for an interrupt vector in bare metal\n+\t code.  */\n #define NEXT_SEC PREV_SEC\n       head = NULL;\n       while (tail != NULL)\n@@ -4509,7 +4509,7 @@ csky_elf_relocate_section (bfd *                  output_bfd,\n \t\t\t{\n \t\t\t  h->got.offset |= 1;\n \t\t\t  if (GENERATE_RELATIVE_RELOC_P (info, h))\n-                            relative_reloc = TRUE;\n+\t\t\t    relative_reloc = TRUE;\n \t\t\t}\n \t\t    }\n \t\t  bfd_put_32 (output_bfd, relocation,"
    },
    {
      "sha": "92ed2d19b073fb7cd3683c613ba128895701ff2a",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -1310,7 +1310,7 @@ m32r_info_to_howto (bfd *abfd ATTRIBUTE_UNUSED,\n   /* xgettext:c-format */\n   _bfd_error_handler (_(\"%pB: unsupported relocation type %#x\"), abfd, r_type);\n   bfd_set_error (bfd_error_bad_value);\n-  return FALSE;  \n+  return FALSE;\n }\n \n \f"
    },
    {
      "sha": "80154651095940c2749f0a83aec393d49ee19b5c",
      "filename": "bfd/elf32-microblaze.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-microblaze.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -252,19 +252,19 @@ static reloc_howto_type microblaze_elf_howto_raw[] =\n \t  TRUE),\t\t/* PC relative offset?  */\n \n      /* A 64 bit TEXTPCREL relocation.  Table-entry not really used.  */\n-   HOWTO (R_MICROBLAZE_TEXTPCREL_64,   \t/* Type.  */\n+   HOWTO (R_MICROBLAZE_TEXTPCREL_64,\t/* Type.  */\n \t  0,\t\t\t/* Rightshift.  */\n \t  2,\t\t\t/* Size (0 = byte, 1 = short, 2 = long).  */\n \t  16,\t\t\t/* Bitsize.  */\n \t  TRUE,\t\t\t/* PC_relative.  */\n \t  0,\t\t\t/* Bitpos.  */\n \t  complain_overflow_dont, /* Complain on overflow.  */\n \t  bfd_elf_generic_reloc,\t/* Special Function.  */\n-\t  \"R_MICROBLAZE_TEXTPCREL_64\", \t/* Name.  */\n+\t  \"R_MICROBLAZE_TEXTPCREL_64\",\t/* Name.  */\n \t  FALSE,\t\t/* Partial Inplace.  */\n \t  0,\t\t\t/* Source Mask.  */\n \t  0x0000ffff,\t\t/* Dest Mask.  */\n-\t  TRUE), \t\t/* PC relative offset?  */\n+\t  TRUE),\t\t/* PC relative offset?  */\n \n    /* A 64 bit GOT relocation.  Table-entry not really used.  */\n    HOWTO (R_MICROBLAZE_GOT_64,  /* Type.  */\n@@ -294,7 +294,7 @@ static reloc_howto_type microblaze_elf_howto_raw[] =\n \t  FALSE,\t\t/* Partial Inplace.  */\n \t  0,\t\t\t/* Source Mask.  */\n \t  0x0000ffff,\t\t/* Dest Mask.  */\n-\t  FALSE), \t\t/* PC relative offset?  */\n+\t  FALSE),\t\t/* PC relative offset?  */\n \n    /* A 64 bit PLT relocation.  Table-entry not really used.  */\n    HOWTO (R_MICROBLAZE_PLT_64,  /* Type.  */"
    },
    {
      "sha": "d9be74f9163074fd975c979a34e90a2b2fb53d72",
      "filename": "bfd/elf32-pru.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pru.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -421,7 +421,7 @@ pru_elf32_info_to_howto (bfd *abfd, arelent *cache_ptr,\n       bfd_set_error (bfd_error_bad_value);\n       return FALSE;\n     }\n-    \n+\n   cache_ptr->howto = lookup_howto (r_type);\n   return cache_ptr->howto != NULL;\n }"
    },
    {
      "sha": "e130784bc8f18b06e6250aed4add39b23614a317",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -3318,8 +3318,7 @@ rx_elf_object_p (bfd * abfd)\n static bfd_boolean\n rx_linux_object_p (bfd * abfd)\n {\n-  bfd_default_set_arch_mach (abfd, bfd_arch_rx,\n-           elf32_rx_machine (abfd));\n+  bfd_default_set_arch_mach (abfd, bfd_arch_rx, elf32_rx_machine (abfd));\n   return TRUE;\n }\n  \f\n@@ -4083,6 +4082,6 @@ rx_additional_link_map_text (bfd *obfd, struct bfd_link_info *info, FILE *mapfil\n #define elf_backend_object_p\t\t\trx_linux_object_p\n #undef  elf_symbol_leading_char\n #undef\telf32_bed\n-#define\telf32_bed \t\t\t\telf32_rx_le_linux_bed\n+#define\telf32_bed\t\t\t\telf32_rx_le_linux_bed\n \n #include \"elf32-target.h\""
    },
    {
      "sha": "b35085f8fb792dc9f20cbda65a33fe08104dee02",
      "filename": "bfd/elf32-xgate.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-xgate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf32-xgate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xgate.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -385,7 +385,7 @@ bfd_elf32_bfd_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,\n   for (i = 0; i < ARRAY_SIZE (xgate_reloc_map); i++)\n     if (xgate_reloc_map[i].bfd_reloc_val == code)\n       return &elf_xgate_howto_table[xgate_reloc_map[i].elf_reloc_val];\n-  \n+\n   return NULL;\n }\n "
    },
    {
      "sha": "50b051aa6bf01bd37c26fb28770c30c15c365584",
      "filename": "bfd/elf64-sparc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf64-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elf64-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-sparc.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -116,17 +116,17 @@ elf64_sparc_slurp_one_reloc_table (bfd *abfd, asection *asect,\n       if (ELF64_R_SYM (rela.r_info) == STN_UNDEF)\n \trelent->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;\n       else if (/* PR 17512: file: 996185f8.  */\n-               (!dynamic && ELF64_R_SYM(rela.r_info) > bfd_get_symcount(abfd))\n-               || (dynamic\n-                   && ELF64_R_SYM(rela.r_info) > bfd_get_dynamic_symcount(abfd)))\n-        {\n-          _bfd_error_handler\n+\t       ELF64_R_SYM (rela.r_info) > (dynamic\n+\t\t\t\t\t    ? bfd_get_dynamic_symcount (abfd)\n+\t\t\t\t\t    : bfd_get_symcount (abfd)))\n+\t{\n+\t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB(%pA): relocation %d has invalid symbol index %ld\"),\n \t     abfd, asect, i, (long) ELF64_R_SYM (rela.r_info));\n \t  bfd_set_error (bfd_error_bad_value);\n \t  relent->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;\n-        }\n+\t}\n       else\n \t{\n \t  asymbol **ps, *s;"
    },
    {
      "sha": "a80e5b8e2fd8567cdcf791a2435b5ad164182078",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -3872,7 +3872,7 @@ elfNN_ia64_relocate_section (bfd *output_bfd,\n \t  ret_val = FALSE;\n \t  continue;\n \t}\n-      \n+\n       r_symndx = ELFNN_R_SYM (rel->r_info);\n       h = NULL;\n       sym = NULL;"
    },
    {
      "sha": "245717f70f137b6ed9b118104958144a8da055df",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -1542,9 +1542,9 @@ riscv_arch_str1 (riscv_subset_t *subset,\n \n   snprintf (buf, bufsz, \"%s%s%dp%d\",\n \t    underline,\n-            subset->name,\n-            subset->major_version,\n-            subset->minor_version);\n+\t    subset->name,\n+\t    subset->major_version,\n+\t    subset->minor_version);\n \n   strncat (attr_str, buf, bufsz);\n "
    },
    {
      "sha": "f09dcbdc18b35ac77dd047f4b3645ba786555e5b",
      "filename": "bfd/elfxx-sparc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elfxx-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/elfxx-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-sparc.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -4792,7 +4792,7 @@ _bfd_sparc_elf_finish_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n   htab = _bfd_sparc_elf_hash_table (info);\n   BFD_ASSERT (htab != NULL);\n   dynobj = htab->elf.dynobj;\n-  \n+\n   /* We arranged in size_dynamic_sections to put the STT_REGISTER\n      entries at the end of the dynlocal list, so they came at the end\n      of the local symbols in the symtab.  Except that they aren't\n@@ -4802,15 +4802,15 @@ _bfd_sparc_elf_finish_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n     {\n       asection *dynsymsec = bfd_get_linker_section (dynobj, \".dynsym\");\n       struct elf_link_local_dynamic_entry *e;\n-      \n+\n       for (e = elf_hash_table (info)->dynlocal; e ; e = e->next)\n \tif (e->input_indx == -1)\n \t  break;\n       if (e)\n \telf_section_data (dynsymsec->output_section)->this_hdr.sh_info\n \t  = e->dynindx;\n     }\n-  \n+\n   sdyn = bfd_get_linker_section (dynobj, \".dynamic\");\n \n   if (elf_hash_table (info)->dynamic_sections_created)"
    },
    {
      "sha": "9e89c84d15943deccae3664e6536bcf46c45077d",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -959,7 +959,7 @@ _bfd_generic_link_add_archive_symbols\n \n \t  if (arsym->name == NULL)\n \t    goto error_return;\n-\t\t\t\t  \n+\n \t  h = bfd_link_hash_lookup (info->hash, arsym->name,\n \t\t\t\t    FALSE, FALSE, TRUE);\n "
    },
    {
      "sha": "d9edef2871d83b53280b613935c068e4327f3270",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -647,7 +647,7 @@ cpusubtype (unsigned long cputype, unsigned long cpusubtype)\n \t  break;\n \t}\n       break;\n-\t\n+\n     case BFD_MACH_O_CPU_TYPE_ARM:\n       switch (cpusubtype)\n \t{\n@@ -667,7 +667,7 @@ cpusubtype (unsigned long cputype, unsigned long cpusubtype)\n \t  break;\n \t}\n       break;\n-      \n+\n     case BFD_MACH_O_CPU_TYPE_ARM64:\n       switch (cpusubtype)\n \t{\n@@ -707,7 +707,7 @@ bfd_mach_o_bfd_print_private_bfd_data (bfd *abfd, void *ptr)\n   fprintf (file, _(\"   sizeocmds:  %#lx\\n\"), (long) mdata->header.sizeofcmds);\n   fprintf (file, _(\"   flags:      %#lx\\n\"), (long) mdata->header.flags);\n   fprintf (file, _(\"   version:    %x\\n\"), mdata->header.version);\n-  \n+\n   return TRUE;\n }\n \n@@ -748,7 +748,7 @@ bfd_mach_o_bfd_copy_private_header_data (bfd *ibfd, bfd *obfd)\n \n   /* Copy the cpusubtype.  */\n   omdata->header.cpusubtype = imdata->header.cpusubtype;\n-    \n+\n   /* Copy commands.  */\n   for (icmd = imdata->first_command; icmd != NULL; icmd = icmd->next)\n     {\n@@ -4928,11 +4928,11 @@ bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command)\n       break;\n     case BFD_MACH_O_LC_NOTE:\n       if (!bfd_mach_o_read_note (abfd, command))\n-        return FALSE;\n+\treturn FALSE;\n       break;\n     case BFD_MACH_O_LC_BUILD_VERSION:\n       if (!bfd_mach_o_read_build_version (abfd, command))\n-        return FALSE;\n+\treturn FALSE;\n       break;\n     default:\n       command->len = 0;"
    },
    {
      "sha": "9808ea18884cd5ae93431bc0f2c1cb8eb1557227",
      "filename": "bfd/pe-x86_64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/pe-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/pe-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pe-x86_64.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -101,19 +101,19 @@ x86_64_pe_be_vec =\n     _bfd_dummy_target,\n     amd64coff_object_p,\n     bfd_generic_archive_p,\n-    amd64coff_object_p \n+    amd64coff_object_p\n   },\n   {\t\t\t\t/* bfd_set_format.  */\n     _bfd_bool_bfd_false_error,\n     coff_mkobject,\n     _bfd_generic_mkarchive,\n-    _bfd_bool_bfd_false_error \n+    _bfd_bool_bfd_false_error\n   },\n   {\t\t\t\t/* bfd_write_contents.  */\n     _bfd_bool_bfd_false_error,\n     coff_write_object_contents,\n     _bfd_write_archive_contents,\n-    _bfd_bool_bfd_false_error \n+    _bfd_bool_bfd_false_error\n   },\n \n   BFD_JUMP_TABLE_GENERIC (coff),"
    },
    {
      "sha": "8a88827b8258ab5bcd7605200b101ca0fb8103e1",
      "filename": "bfd/pei-x86_64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/pei-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/pei-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pei-x86_64.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -126,7 +126,7 @@ pex64_get_unwind_info (bfd *abfd, struct pex64_unwind_info *ui,\n   ex_dta += ui->SizeOfBlock;\n   if (ex_dta >= ex_dta_end)\n     return FALSE;\n-  \n+\n   switch (ui->Flags)\n     {\n     case UNW_FLAG_CHAININFO:\n@@ -191,7 +191,7 @@ pex64_xdata_print_uwd_codes (FILE *file, bfd *abfd,\n \t  fprintf (file, _(\"warning: corrupt unwind data\\n\"));\n \t  return;\n \t}\n-\t  \n+\n       fprintf (file, \"\\tv2 epilog (length: %02x) at pc+:\",\n \t       ui->rawUnwindCodes[0]);\n \n@@ -220,7 +220,7 @@ pex64_xdata_print_uwd_codes (FILE *file, bfd *abfd,\n       fprintf (file, _(\"warning: corrupt unwind data\\n\"));\n       return;\n     }\n-\t  \n+\n   for (; i < ui->CountOfCodes; i++)\n     {\n       const bfd_byte *dta = ui->rawUnwindCodes + 2 * i;"
    },
    {
      "sha": "8cb44ceb5dab6b5712c501595b8f9c7cd60a0a51",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b24dd1acad5c133d12aab6a575c83269336e47f/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=4b24dd1acad5c133d12aab6a575c83269336e47f",
      "patch": "@@ -252,14 +252,14 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n        plugin_list_iter = plugin_list_iter->next)\n     {\n       if (plugin_handle == plugin_list_iter->handle)\n-        {\n-          dlclose (plugin_handle);\n-          if (!plugin_list_iter->claim_file)\n-            return 0;\n-\n-          register_claim_file (plugin_list_iter->claim_file);\n-          goto have_claim_file;\n-        }\n+\t{\n+\t  dlclose (plugin_handle);\n+\t  if (!plugin_list_iter->claim_file)\n+\t    return 0;\n+\n+\t  register_claim_file (plugin_list_iter->claim_file);\n+\t  goto have_claim_file;\n+\t}\n     }\n \n   plugin_list_iter = (struct plugin_list_entry *) xmalloc (sizeof *plugin_list_iter);"
    }
  ]
}