{
  "sha": "7b1dd701059ead8f3af3c081fc9727b9883a74c3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2IxZGQ3MDEwNTllYWQ4ZjNhZjNjMDgxZmM5NzI3Yjk4ODNhNzRjMw==",
  "commit": {
    "author": {
      "name": "Yoshinori Sato",
      "email": "ysato@users.sourceforge.jp",
      "date": "2019-08-08T12:59:17Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-08T12:59:17Z"
    },
    "message": "Update the handling of shift rotate  and load/store multiple instructions in the H8300 assembler.\n\nincldue\t* opcode/h8300.h (EXPAND_UNOP_EXTENDED_B): Add MODEL.\n\t(EXPAND_UNOP_EXTENDED_W): Likewise.\n\t(EXPAND_UNOP_EXTENDED_L): Likewise.\n\t(struct h8_opcode h8_opcodes): Likewise.\n\t(struct h8_opcode h8_opcodes): tas / ldm / stm supported H8S or\n\tlater.",
    "tree": {
      "sha": "af8f0cbdabb7c2f52f1b1f8a76d82f63b9763ed1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/af8f0cbdabb7c2f52f1b1f8a76d82f63b9763ed1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7b1dd701059ead8f3af3c081fc9727b9883a74c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b1dd701059ead8f3af3c081fc9727b9883a74c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7b1dd701059ead8f3af3c081fc9727b9883a74c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b1dd701059ead8f3af3c081fc9727b9883a74c3/comments",
  "author": {
    "login": "ysat0",
    "id": 390647,
    "node_id": "MDQ6VXNlcjM5MDY0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/390647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ysat0",
    "html_url": "https://github.com/ysat0",
    "followers_url": "https://api.github.com/users/ysat0/followers",
    "following_url": "https://api.github.com/users/ysat0/following{/other_user}",
    "gists_url": "https://api.github.com/users/ysat0/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ysat0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ysat0/subscriptions",
    "organizations_url": "https://api.github.com/users/ysat0/orgs",
    "repos_url": "https://api.github.com/users/ysat0/repos",
    "events_url": "https://api.github.com/users/ysat0/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ysat0/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8fb49c3c715190a5753980d0ddef721d816bbc3d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fb49c3c715190a5753980d0ddef721d816bbc3d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8fb49c3c715190a5753980d0ddef721d816bbc3d"
    }
  ],
  "stats": {
    "total": 113,
    "additions": 61,
    "deletions": 52
  },
  "files": [
    {
      "sha": "60bf831f740fcb9405e121233cf2b01317b1625e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b1dd701059ead8f3af3c081fc9727b9883a74c3/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b1dd701059ead8f3af3c081fc9727b9883a74c3/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7b1dd701059ead8f3af3c081fc9727b9883a74c3",
      "patch": "@@ -1,9 +1,9 @@\n 2019-08-08  Yoshinori Sato  <ysato@users.sourceforge.jp>\n \n-\t* gas/testsuite/gas/h8300/h8300.exp: Fix movfpe and movtpe tests.\n-\t* gas/testsuite/gas/h8300/misc.s: Likewise.\n-\t* gas/testsuite/gas/h8300/misch.s: Likewise.\n-\t* gas/testsuite/gas/h8300/miscs.s: Likewise.\n+\t* testsuite/gas/h8300/h8300.exp: Fix movfpe and movtpe tests.\n+\t* testsuite/gas/h8300/misc.s: Likewise.\n+\t* testsuite/gas/h8300/misch.s: Likewise.\n+\t* testsuite/gas/h8300/miscs.s: Likewise.\n \n 2019-08-05  Barnaby Wilks  <barnaby.wilks@arm.com>\n "
    },
    {
      "sha": "9d55a1f2916e52bb34fa3193ec731d3fa3d0fb76",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b1dd701059ead8f3af3c081fc9727b9883a74c3/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b1dd701059ead8f3af3c081fc9727b9883a74c3/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=7b1dd701059ead8f3af3c081fc9727b9883a74c3",
      "patch": "@@ -1,6 +1,15 @@\n+2019-08-08  Yoshinori Sato  <ysato@users.sourceforge.jp>\n+\n+\t* opcode/h8300.h (EXPAND_UNOP_EXTENDED_B): Add MODEL.\n+\t(EXPAND_UNOP_EXTENDED_W): Likewise.\n+\t(EXPAND_UNOP_EXTENDED_L): Likewise.\n+\t(struct h8_opcode h8_opcodes): Likewise.\n+\t(struct h8_opcode h8_opcodes): tas / ldm / stm supported H8S or\n+\tlater.\n+\n 2019-07-24  Claudiu Zissulescu  <claziss@synopsys.com>\n \n-\t* include/opcode/arc.h (FASTMATH): Add.\n+\t* opcode/arc.h (FASTMATH): Add.\n \t(SWITCH): Likewise.\n \n 2019-07-24  Alan Modra  <amodra@gmail.com>"
    },
    {
      "sha": "efa00310d146ac6d690d0ae6fd817ebfe5ca2eee",
      "filename": "include/opcode/h8300.h",
      "status": "modified",
      "additions": 47,
      "deletions": 47,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b1dd701059ead8f3af3c081fc9727b9883a74c3/include/opcode/h8300.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b1dd701059ead8f3af3c081fc9727b9883a74c3/include/opcode/h8300.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/h8300.h?ref=7b1dd701059ead8f3af3c081fc9727b9883a74c3",
      "patch": "@@ -980,8 +980,8 @@ struct h8_opcode\n   {CODE, AV_H8SX, 0, NAME, {{ABS16SRC,  E}}, {{PREFIX, 4,                 6, 11, 0, B31 | IGNORE,  ABS16LIST,    OP1, OP2, OP3, B30 | IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{ABS32SRC,  E}}, {{PREFIX, 4,                 6, 11, 2, B31 | IGNORE,  ABS32LIST,    OP1, OP2, OP3, B30 | IGNORE, E}}}\n \n-#define EXPAND_UNOP_EXTENDED_B(CODE, NAME, CONST, PREFIX, OP1, OP2, OP3) \\\n-  {CODE, AV_H8,   2, NAME, {{CONST, RD8,       E}}, {{                                                                     OP1, OP2, OP3, RD8,    E}}}, \\\n+#define EXPAND_UNOP_EXTENDED_B(CODE, MODEL, NAME, CONST, PREFIX, OP1, OP2, OP3) \\\n+  {CODE, MODEL,   2, NAME, {{CONST, RD8,   E}}, {{                                                                         OP1, OP2, OP3, RD8,    E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDIND,     E}}, {{           7, 13, B30 | RDIND,             IGNORE,                   OP1, OP2, OP3, IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDPOSTINC, E}}, {{PREFIX, 4, 6, 12, B30 | RDPOSTINC,   B31 | IGNORE,                   OP1, OP2, OP3, IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDPOSTDEC, E}}, {{PREFIX, 6, 6, 12, B30 | RDPOSTDEC,   B31 | IGNORE,                   OP1, OP2, OP3, IGNORE, E}}}, \\\n@@ -1000,8 +1000,8 @@ struct h8_opcode\n   {CODE, AV_H8SX, 0, NAME, {{CONST, ABS16DST,  E}}, {{                           6, 10, 1, B31 | IGNORE, DSTABS16LIST,     OP1, OP2, OP3, IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, ABS32DST,  E}}, {{                           6, 10, 3, B31 | IGNORE, DSTABS32LIST,     OP1, OP2, OP3, IGNORE, E}}}\n \n-#define EXPAND_UNOP_EXTENDED_W(CODE, NAME, CONST, PREFIX, OP1, OP2, OP3) \\\n-  {CODE, AV_H8,   2, NAME, {{CONST, RD16,      E}}, {{                                                                     OP1, OP2, OP3, RD16,   E}}}, \\\n+#define EXPAND_UNOP_EXTENDED_W(CODE, MODEL, NAME, CONST, PREFIX, OP1, OP2, OP3) \\\n+  {CODE, MODEL,   2, NAME, {{CONST, RD16,      E}}, {{                                                                     OP1, OP2, OP3, RD16,   E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDIND,     E}}, {{           7, 13, B31 | RDIND,             IGNORE,                   OP1, OP2, OP3, IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDPOSTINC, E}}, {{PREFIX, 4, 6, 13, B30 | RDPOSTINC,   B31 | IGNORE,                   OP1, OP2, OP3, IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDPOSTDEC, E}}, {{PREFIX, 6, 6, 13, B30 | RDPOSTDEC,   B31 | IGNORE,                   OP1, OP2, OP3, IGNORE, E}}}, \\\n@@ -1019,8 +1019,8 @@ struct h8_opcode\n   {CODE, AV_H8SX, 0, NAME, {{CONST, ABS16DST,  E}}, {{                           6, 11, 1, B31 | IGNORE, DSTABS16LIST,     OP1, OP2, OP3, IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, ABS32DST,  E}}, {{                           6, 11, 3, B31 | IGNORE, DSTABS32LIST,     OP1, OP2, OP3, IGNORE, E}}}\n \n-#define EXPAND_UNOP_EXTENDED_L(CODE, NAME, CONST, PREFIX, OP1, OP2, OP3, BIT) \\\n-  {CODE, AV_H8,   2, NAME, {{CONST, RD32,      E}}, {{                                                                     OP1, OP2, OP3, BIT | RD32,   E}}}, \\\n+#define EXPAND_UNOP_EXTENDED_L(CODE, MODEL, NAME, CONST, PREFIX, OP1, OP2, OP3, BIT) \\\n+  {CODE, MODEL,   2, NAME, {{CONST, RD32,      E}}, {{                                                                     OP1, OP2, OP3, BIT | RD32,   E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDIND,     E}}, {{PREFIX, 4, 6,  9, B30 | RDIND,       B31 | IGNORE,                   OP1, OP2, OP3, BIT | IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDPOSTINC, E}}, {{PREFIX, 4, 6, 13, B30 | RDPOSTINC,   B31 | IGNORE,                   OP1, OP2, OP3, BIT | IGNORE, E}}}, \\\n   {CODE, AV_H8SX, 0, NAME, {{CONST, RDPOSTDEC, E}}, {{PREFIX, 6, 6, 13, B30 | RDPOSTDEC,   B31 | IGNORE,                   OP1, OP2, OP3, BIT | IGNORE, E}}}, \\\n@@ -1393,10 +1393,10 @@ struct h8_opcode h8_opcodes[] =\n \n   EXPAND_UNOP_STD_W      (O (O_EXTS, SW), \"exts.w\",          PREFIX_015, 0x1, 0x7, 0xd),\n   EXPAND_UNOP_STD_L      (O (O_EXTS, SL), \"exts.l\",          PREFIX_010, 0x1, 0x7, 0xf),\n-  EXPAND_UNOP_EXTENDED_L (O (O_EXTS, SL), \"exts.l\", CONST_2, PREFIX_010, 0x1, 0x7, 0xe, 0),\n+  EXPAND_UNOP_EXTENDED_L (O (O_EXTS, SL), AV_H8SX, \"exts.l\", CONST_2, PREFIX_010, 0x1, 0x7, 0xe, 0),\n   EXPAND_UNOP_STD_W      (O (O_EXTU, SW), \"extu.w\",          PREFIX_015, 0x1, 0x7, 0x5),\n   EXPAND_UNOP_STD_L      (O (O_EXTU, SL), \"extu.l\",          PREFIX_010, 0x1, 0x7, 0x7),\n-  EXPAND_UNOP_EXTENDED_L (O (O_EXTU, SL), \"extu.l\", CONST_2, PREFIX_010, 0x1, 0x7, 0x6, 0),\n+  EXPAND_UNOP_EXTENDED_L (O (O_EXTU, SL), AV_H8SX, \"extu.l\", CONST_2, PREFIX_010, 0x1, 0x7, 0x6, 0),\n \n   UNOP (O (O_INC, SB), \"inc\", 0x0, 0xA),\n \n@@ -1698,29 +1698,29 @@ struct h8_opcode h8_opcodes[] =\n   {O (O_MOV, SL), AV_H8H, 6, \"push.l\", {{OR32, E}}, {{PREFIX_0100, 0x6, 0xD, 0xF, OR32 | B30, E}}},\n \n   EXPAND_UNOP_STD_B      (O (O_ROTL,  SB), \"rotl.b\",           PREFIX_017, 0x1, 0x2, 0x8),\n-  EXPAND_UNOP_EXTENDED_B (O (O_ROTL,  SB), \"rotl.b\",  CONST_2, PREFIX_017, 0x1, 0x2, 0xc),\n+  EXPAND_UNOP_EXTENDED_B (O (O_ROTL,  SB), AV_H8S, \"rotl.b\",  CONST_2, PREFIX_017, 0x1, 0x2, 0xc),\n   EXPAND_UNOP_STD_W      (O (O_ROTL,  SW), \"rotl.w\",           PREFIX_015, 0x1, 0x2, 0x9),\n-  EXPAND_UNOP_EXTENDED_W (O (O_ROTL,  SW), \"rotl.w\",  CONST_2, PREFIX_015, 0x1, 0x2, 0xd),\n+  EXPAND_UNOP_EXTENDED_W (O (O_ROTL,  SW), AV_H8S, \"rotl.w\",  CONST_2, PREFIX_015, 0x1, 0x2, 0xd),\n   EXPAND_UNOP_STD_L      (O (O_ROTL,  SL), \"rotl.l\",           PREFIX_010, 0x1, 0x2, 0xb),\n-  EXPAND_UNOP_EXTENDED_L (O (O_ROTL,  SL), \"rotl.l\",  CONST_2, PREFIX_010, 0x1, 0x2, 0xf, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_ROTL,  SL), AV_H8S, \"rotl.l\",  CONST_2, PREFIX_010, 0x1, 0x2, 0xf, B30),\n   EXPAND_UNOP_STD_B      (O (O_ROTR,  SB), \"rotr.b\",           PREFIX_017, 0x1, 0x3, 0x8),\n-  EXPAND_UNOP_EXTENDED_B (O (O_ROTR,  SB), \"rotr.b\",  CONST_2, PREFIX_017, 0x1, 0x3, 0xc),\n+  EXPAND_UNOP_EXTENDED_B (O (O_ROTR,  SB), AV_H8S, \"rotr.b\",  CONST_2, PREFIX_017, 0x1, 0x3, 0xc),\n   EXPAND_UNOP_STD_W      (O (O_ROTR,  SW), \"rotr.w\",           PREFIX_015, 0x1, 0x3, 0x9),\n-  EXPAND_UNOP_EXTENDED_W (O (O_ROTR,  SW), \"rotr.w\",  CONST_2, PREFIX_015, 0x1, 0x3, 0xd),\n+  EXPAND_UNOP_EXTENDED_W (O (O_ROTR,  SW), AV_H8S, \"rotr.w\",  CONST_2, PREFIX_015, 0x1, 0x3, 0xd),\n   EXPAND_UNOP_STD_L      (O (O_ROTR,  SL), \"rotr.l\",           PREFIX_010, 0x1, 0x3, 0xb),\n-  EXPAND_UNOP_EXTENDED_L (O (O_ROTR,  SL), \"rotr.l\",  CONST_2, PREFIX_010, 0x1, 0x3, 0xf, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_ROTR,  SL), AV_H8S, \"rotr.l\",  CONST_2, PREFIX_010, 0x1, 0x3, 0xf, B30),\n   EXPAND_UNOP_STD_B      (O (O_ROTXL, SB), \"rotxl.b\",          PREFIX_017, 0x1, 0x2, 0x0),\n-  EXPAND_UNOP_EXTENDED_B (O (O_ROTXL, SB), \"rotxl.b\", CONST_2, PREFIX_017, 0x1, 0x2, 0x4),\n+  EXPAND_UNOP_EXTENDED_B (O (O_ROTXL, SB), AV_H8S, \"rotxl.b\", CONST_2, PREFIX_017, 0x1, 0x2, 0x4),\n   EXPAND_UNOP_STD_W      (O (O_ROTXL, SW), \"rotxl.w\",          PREFIX_015, 0x1, 0x2, 0x1),\n-  EXPAND_UNOP_EXTENDED_W (O (O_ROTXL, SW), \"rotxl.w\", CONST_2, PREFIX_015, 0x1, 0x2, 0x5),\n+  EXPAND_UNOP_EXTENDED_W (O (O_ROTXL, SW), AV_H8S, \"rotxl.w\", CONST_2, PREFIX_015, 0x1, 0x2, 0x5),\n   EXPAND_UNOP_STD_L      (O (O_ROTXL, SL), \"rotxl.l\",          PREFIX_010, 0x1, 0x2, 0x3),\n-  EXPAND_UNOP_EXTENDED_L (O (O_ROTXL, SL), \"rotxl.l\", CONST_2, PREFIX_010, 0x1, 0x2, 0x7, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_ROTXL, SL), AV_H8S, \"rotxl.l\", CONST_2, PREFIX_010, 0x1, 0x2, 0x7, B30),\n   EXPAND_UNOP_STD_B      (O (O_ROTXR, SB), \"rotxr.b\",          PREFIX_017, 0x1, 0x3, 0x0),\n-  EXPAND_UNOP_EXTENDED_B (O (O_ROTXR, SB), \"rotxr.b\", CONST_2, PREFIX_017, 0x1, 0x3, 0x4),\n+  EXPAND_UNOP_EXTENDED_B (O (O_ROTXR, SB), AV_H8S, \"rotxr.b\", CONST_2, PREFIX_017, 0x1, 0x3, 0x4),\n   EXPAND_UNOP_STD_W      (O (O_ROTXR, SW), \"rotxr.w\",          PREFIX_015, 0x1, 0x3, 0x1),\n-  EXPAND_UNOP_EXTENDED_W (O (O_ROTXR, SW), \"rotxr.w\", CONST_2, PREFIX_015, 0x1, 0x3, 0x5),\n+  EXPAND_UNOP_EXTENDED_W (O (O_ROTXR, SW), AV_H8S, \"rotxr.w\", CONST_2, PREFIX_015, 0x1, 0x3, 0x5),\n   EXPAND_UNOP_STD_L      (O (O_ROTXR, SL), \"rotxr.l\",          PREFIX_010, 0x1, 0x3, 0x3),\n-  EXPAND_UNOP_EXTENDED_L (O (O_ROTXR, SL), \"rotxr.l\", CONST_2, PREFIX_010, 0x1, 0x3, 0x7, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_ROTXR, SL), AV_H8S, \"rotxr.l\", CONST_2, PREFIX_010, 0x1, 0x3, 0x7, B30),\n \n \n   {O (O_BPT,  SN), AV_H8,  10, \"bpt\",   {{E}}, {{0x7, 0xA, 0xF, 0xF, E}}},\n@@ -1730,70 +1730,70 @@ struct h8_opcode h8_opcodes[] =\n   {O (O_RTSL, SN), AV_H8SX, 0, \"rts/l\", {{RS32, RD32, E}}, {{0x5, 0x4, RS32 | B30, RD32 | B30, E}}},\n \n   EXPAND_UNOP_STD_B      (O (O_SHAL, SB), \"shal.b\",          PREFIX_017, 0x1, 0x0, 0x8),\n-  EXPAND_UNOP_EXTENDED_B (O (O_SHAL, SB), \"shal.b\", CONST_2, PREFIX_017, 0x1, 0x0, 0xc),\n+  EXPAND_UNOP_EXTENDED_B (O (O_SHAL, SB), AV_H8S, \"shal.b\", CONST_2, PREFIX_017, 0x1, 0x0, 0xc),\n   EXPAND_UNOP_STD_W      (O (O_SHAL, SW), \"shal.w\",          PREFIX_015, 0x1, 0x0, 0x9),\n-  EXPAND_UNOP_EXTENDED_W (O (O_SHAL, SW), \"shal.w\", CONST_2, PREFIX_015, 0x1, 0x0, 0xd),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHAL, SW), AV_H8S, \"shal.w\", CONST_2, PREFIX_015, 0x1, 0x0, 0xd),\n   EXPAND_UNOP_STD_L      (O (O_SHAL, SL), \"shal.l\",          PREFIX_010, 0x1, 0x0, 0xb),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHAL, SL), \"shal.l\", CONST_2, PREFIX_010, 0x1, 0x0, 0xf, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHAL, SL), AV_H8S, \"shal.l\", CONST_2, PREFIX_010, 0x1, 0x0, 0xf, B30),\n   EXPAND_UNOP_STD_B      (O (O_SHAR, SB), \"shar.b\",          PREFIX_017, 0x1, 0x1, 0x8),\n-  EXPAND_UNOP_EXTENDED_B (O (O_SHAR, SB), \"shar.b\", CONST_2, PREFIX_017, 0x1, 0x1, 0xc),\n+  EXPAND_UNOP_EXTENDED_B (O (O_SHAR, SB), AV_H8S, \"shar.b\", CONST_2, PREFIX_017, 0x1, 0x1, 0xc),\n   EXPAND_UNOP_STD_W      (O (O_SHAR, SW), \"shar.w\",          PREFIX_015, 0x1, 0x1, 0x9),\n-  EXPAND_UNOP_EXTENDED_W (O (O_SHAR, SW), \"shar.w\", CONST_2, PREFIX_015, 0x1, 0x1, 0xd),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHAR, SW), AV_H8S, \"shar.w\", CONST_2, PREFIX_015, 0x1, 0x1, 0xd),\n   EXPAND_UNOP_STD_L      (O (O_SHAR, SL), \"shar.l\",          PREFIX_010, 0x1, 0x1, 0xb),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHAR, SL), \"shar.l\", CONST_2, PREFIX_010, 0x1, 0x1, 0xf, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHAR, SL), AV_H8S, \"shar.l\", CONST_2, PREFIX_010, 0x1, 0x1, 0xf, B30),\n \n   EXPAND_UNOP_STD_B      (O (O_SHLL, SB), \"shll.b\",          PREFIX_017, 0x1, 0x0, 0x0),\n \n   {O (O_SHLL, SB), AV_H8SX, 0, \"shll.b\", {{RS8,  RD8,  E}}, {{0x7, 0x8, RS8,        0x8,  0x1, 0x0, 0x0, RD8,  E}}},\n \n-  EXPAND_UNOP_EXTENDED_B (O (O_SHLL, SB), \"shll.b\", CONST_2, PREFIX_017, 0x1, 0x0, 0x4),\n-  EXPAND_UNOP_EXTENDED_B (O (O_SHLL, SB), \"shll.b\", CONST_4, PREFIX_017, 0x1, 0x0, 0xa),\n+  EXPAND_UNOP_EXTENDED_B (O (O_SHLL, SB), AV_H8S, \"shll.b\", CONST_2, PREFIX_017, 0x1, 0x0, 0x4),\n+  EXPAND_UNOP_EXTENDED_B (O (O_SHLL, SB), AV_H8SX, \"shll.b\", CONST_4, PREFIX_017, 0x1, 0x0, 0xa),\n   {O (O_SHLL, SB), AV_H8SX, 0, \"shll.b\", {{IMM5, RD8,  E}}, {{0x0, 0x3, B31 | IMM5, DATA, 0x1, 0x0, 0x0, RD8,  E}}},\n \n   EXPAND_UNOP_STD_W      (O (O_SHLL, SW), \"shll.w\",          PREFIX_015, 0x1, 0x0, 0x1),\n \n   {O (O_SHLL, SW), AV_H8SX, 0, \"shll.w\", {{RS8,  RD16, E}}, {{0x7, 0x8, RS8,        0x8,  0x1, 0x0, 0x1, RD16, E}}},\n \n-  EXPAND_UNOP_EXTENDED_W (O (O_SHLL, SW), \"shll.w\", CONST_2, PREFIX_015, 0x1, 0x0, 0x5),\n-  EXPAND_UNOP_EXTENDED_W (O (O_SHLL, SW), \"shll.w\", CONST_4, PREFIX_015, 0x1, 0x0, 0x2),\n-  EXPAND_UNOP_EXTENDED_W (O (O_SHLL, SW), \"shll.w\", CONST_8, PREFIX_015, 0x1, 0x0, 0x6),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHLL, SW), AV_H8S, \"shll.w\", CONST_2, PREFIX_015, 0x1, 0x0, 0x5),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHLL, SW), AV_H8SX, \"shll.w\", CONST_4, PREFIX_015, 0x1, 0x0, 0x2),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHLL, SW), AV_H8SX, \"shll.w\", CONST_8, PREFIX_015, 0x1, 0x0, 0x6),\n   {O (O_SHLL, SW), AV_H8SX, 0, \"shll.w\", {{IMM5, RD16, E}}, {{0x0, 0x3, B31 | IMM5, DATA, 0x1, 0x0, 0x1, RD16, E}}},\n \n   EXPAND_UNOP_STD_L      (O (O_SHLL, SL), \"shll.l\",           PREFIX_010, 0x1, 0x0, 0x3),\n \n   {O (O_SHLL, SL), AV_H8SX, 0, \"shll.l\", {{RS8,  RD32, E}}, {{0x7, 0x8, RS8,        0x8,  0x1, 0x0, 0x3, B30 | RD32, E}}},\n \n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), \"shll.l\", CONST_2,  PREFIX_010, 0x1, 0x0, 0x7, B30),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), \"shll.l\", CONST_4,  PREFIX_010, 0x1, 0x0, 0x3, B31),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), \"shll.l\", CONST_8,  PREFIX_010, 0x1, 0x0, 0x7, B31),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), \"shll.l\", CONST_16, PREFIX_010, 0x1, 0x0, 0xf, B31),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), AV_H8S, \"shll.l\", CONST_2,  PREFIX_010, 0x1, 0x0, 0x7, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), AV_H8SX, \"shll.l\", CONST_4,  PREFIX_010, 0x1, 0x0, 0x3, B31),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), AV_H8SX, \"shll.l\", CONST_8,  PREFIX_010, 0x1, 0x0, 0x7, B31),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLL, SL), AV_H8SX, \"shll.l\", CONST_16, PREFIX_010, 0x1, 0x0, 0xf, B31),\n   {O (O_SHLL, SL), AV_H8SX, 0, \"shll.l\", {{IMM5, RD32, E}}, {{0x0, 0x3, B31 | IMM5, DATA, 0x1, 0x0, 0x3, B30 | RD32, E}}},\n \n   EXPAND_UNOP_STD_B      (O (O_SHLR, SB), \"shlr.b\",          PREFIX_017, 0x1, 0x1, 0x0),\n \n   {O (O_SHLR, SB), AV_H8SX, 0, \"shlr.b\", {{RS8,  RD8,  E}}, {{0x7, 0x8, RS8,        0x8,  0x1, 0x1, 0x0, RD8,  E}}},\n \n-  EXPAND_UNOP_EXTENDED_B (O (O_SHLR, SB), \"shlr.b\", CONST_2, PREFIX_017, 0x1, 0x1, 0x4),\n-  EXPAND_UNOP_EXTENDED_B (O (O_SHLR, SB), \"shlr.b\", CONST_4, PREFIX_017, 0x1, 0x1, 0xa),\n+  EXPAND_UNOP_EXTENDED_B (O (O_SHLR, SB), AV_H8S, \"shlr.b\", CONST_2, PREFIX_017, 0x1, 0x1, 0x4),\n+  EXPAND_UNOP_EXTENDED_B (O (O_SHLR, SB), AV_H8SX, \"shlr.b\", CONST_4, PREFIX_017, 0x1, 0x1, 0xa),\n   {O (O_SHLR, SB), AV_H8SX, 0, \"shlr.b\", {{IMM5, RD8,  E}}, {{0x0, 0x3, B31 | IMM5, DATA, 0x1, 0x1, 0x0, RD8,  E}}},\n \n   EXPAND_UNOP_STD_W      (O (O_SHLR, SW), \"shlr.w\",          PREFIX_015, 0x1, 0x1, 0x1),\n \n   {O (O_SHLR, SW), AV_H8SX, 0, \"shlr.w\", {{RS8,  RD16, E}}, {{0x7, 0x8, RS8,        0x8,  0x1, 0x1, 0x1, RD16, E}}},\n \n-  EXPAND_UNOP_EXTENDED_W (O (O_SHLR, SW), \"shlr.w\", CONST_2, PREFIX_015, 0x1, 0x1, 0x5),\n-  EXPAND_UNOP_EXTENDED_W (O (O_SHLR, SW), \"shlr.w\", CONST_4, PREFIX_015, 0x1, 0x1, 0x2),\n-  EXPAND_UNOP_EXTENDED_W (O (O_SHLR, SW), \"shlr.w\", CONST_8, PREFIX_015, 0x1, 0x1, 0x6),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHLR, SW), AV_H8S, \"shlr.w\", CONST_2, PREFIX_015, 0x1, 0x1, 0x5),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHLR, SW), AV_H8SX, \"shlr.w\", CONST_4, PREFIX_015, 0x1, 0x1, 0x2),\n+  EXPAND_UNOP_EXTENDED_W (O (O_SHLR, SW), AV_H8SX, \"shlr.w\", CONST_8, PREFIX_015, 0x1, 0x1, 0x6),\n   {O (O_SHLR, SW), AV_H8SX, 0, \"shlr.w\", {{IMM5, RD16, E}}, {{0x0, 0x3, B31 | IMM5, DATA, 0x1, 0x1, 0x1, RD16, E}}},\n \n   EXPAND_UNOP_STD_L      (O (O_SHLR, SL), \"shlr.l\",           PREFIX_010, 0x1, 0x1, 0x3),\n \n   {O (O_SHLR, SL), AV_H8SX, 0, \"shlr.l\", {{RS8,  RD32, E}}, {{0x7, 0x8, RS8,        0x8,  0x1, 0x1, 0x3, B30 | RD32, E}}},\n \n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), \"shlr.l\", CONST_2,  PREFIX_010, 0x1, 0x1, 0x7, B30),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), \"shlr.l\", CONST_4,  PREFIX_010, 0x1, 0x1, 0x3, B31),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), \"shlr.l\", CONST_8,  PREFIX_010, 0x1, 0x1, 0x7, B31),\n-  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), \"shlr.l\", CONST_16, PREFIX_010, 0x1, 0x1, 0xf, B31),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), AV_H8S, \"shlr.l\", CONST_2,  PREFIX_010, 0x1, 0x1, 0x7, B30),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), AV_H8SX, \"shlr.l\", CONST_4,  PREFIX_010, 0x1, 0x1, 0x3, B31),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), AV_H8SX, \"shlr.l\", CONST_8,  PREFIX_010, 0x1, 0x1, 0x7, B31),\n+  EXPAND_UNOP_EXTENDED_L (O (O_SHLR, SL), AV_H8SX, \"shlr.l\", CONST_16, PREFIX_010, 0x1, 0x1, 0xf, B31),\n   {O (O_SHLR, SL), AV_H8SX, 0, \"shlr.l\", {{IMM5, RD32, E}}, {{0x0, 0x3, B31 | IMM5, DATA, 0x1, 0x1, 0x3, B30 | RD32, E}}},\n \n   {O (O_SLEEP, SN), AV_H8, 2, \"sleep\", {{E}}, {{0x0, 0x1, 0x8, 0x0, E}}},\n@@ -1864,7 +1864,7 @@ struct h8_opcode h8_opcodes[] =\n   {O (O_SUBX, SL), AV_H8SX, 0, \"subx.l\", {{RSPOSTDEC, RDPOSTDEC, E}}, {{PREFIX_0106, 0x6, 0xd, B30 | RSPOSTDEC, 0xd, 0xa, RDPOSTDEC, 0x3, IGNORE, E}}},\n \n   {O (O_TRAPA, SB), AV_H8H, 2, \"trapa\", {{IMM2,  E}}, {{0x5, 0x7, IMM2, IGNORE, E}}},\n-  {O (O_TAS,   SB), AV_H8H, 2, \"tas\",   {{RSIND, E}}, {{0x0, 0x1, 0xe, 0x0, 0x7, 0xb, B30 | RSIND, 0xc, E}}},\n+  {O (O_TAS,   SB), AV_H8S, 2, \"tas\",   {{RSIND, E}}, {{0x0, 0x1, 0xe, 0x0, 0x7, 0xb, B30 | RSIND, 0xc, E}}},\n \n   {O (O_XOR,   SB), AV_H8,  2, \"xor.b\", {{IMM8, RD8,  E}}, {{0xd, RD8, IMM8LIST, E}}}, \n   EXPAND_TWOOP_B (O (O_XOR, SB), \"xor.b\", 0xd, 0x1, 0x5, 0x5, 0), \n@@ -1882,8 +1882,8 @@ struct h8_opcode h8_opcodes[] =\n   {O (O_MAC,    SW), AV_H8S, 2, \"mac\",    {{RSPOSTINC, RDPOSTINC, E}}, {{0x0, 0x1, 0x6, 0x0, 0x6, 0xd, B30 | RSPOSTINC, B30 | RDPOSTINC, E}}},\n   {O (O_LDMAC,  SL), AV_H8S, 2, \"ldmac\",  {{RS32, MD32, E}}, {{0x0, 0x3, MD32, RS32, E}}},\n   {O (O_STMAC,  SL), AV_H8S, 2, \"stmac\",  {{MS32, RD32, E}}, {{0x0, 0x2, MS32, RD32, E}}},\n-  {O (O_LDM,    SL), AV_H8H, 6, \"ldm.l\",  {{RSPOSTINC, RD32, E}}, {{0x0, 0x1, DATA, 0x0, 0x6, 0xD, 0x7, B30 | RD32, E}}},\n-  {O (O_STM,    SL), AV_H8H, 6, \"stm.l\",  {{RS32, RDPREDEC,  E}}, {{0x0, 0x1, DATA, 0x0, 0x6, 0xD, 0xF, B30 | RS32, E}}},\n+  {O (O_LDM,    SL), AV_H8S, 6, \"ldm.l\",  {{RSPOSTINC, RD32, E}}, {{0x0, 0x1, DATA, 0x0, 0x6, 0xD, 0x7, B30 | RD32, E}}},\n+  {O (O_STM,    SL), AV_H8S, 6, \"stm.l\",  {{RS32, RDPREDEC,  E}}, {{0x0, 0x1, DATA, 0x0, 0x6, 0xD, 0xF, B30 | RS32, E}}},\n   {0, 0, 0, NULL, {{0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}\n };\n #else"
    }
  ]
}