{
  "sha": "2dc330089a00d2ad67e8b802a3e9670cd0a37e99",
  "node_id": "C_kwDOANOeidoAKDJkYzMzMDA4OWEwMGQyYWQ2N2U4YjgwMmEzZTk2NzBjZDBhMzdlOTk",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-11-21T01:38:43Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2022-01-07T22:43:33Z"
    },
    "message": "gdb/testsuite: Remove duplicates from gdb.base/funcargs.exp\n\nWhen running the testsuite, I\u00a0have:\n\n    Running .../gdb/testsuite/gdb.base/funcargs.exp ...\n    DUPLICATE: gdb.base/funcargs.exp: run to call2a\n\nFix by using proc_with_prefix instead on plain proc to create logical\nfunction blocks.\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "f3c66b423e89769625f7d592549dfc8489de26ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f3c66b423e89769625f7d592549dfc8489de26ce"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2dc330089a00d2ad67e8b802a3e9670cd0a37e99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2dc330089a00d2ad67e8b802a3e9670cd0a37e99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2dc330089a00d2ad67e8b802a3e9670cd0a37e99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2dc330089a00d2ad67e8b802a3e9670cd0a37e99/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5bdd79dff95269a7bf6428c449c1cfd5eab0c3ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bdd79dff95269a7bf6428c449c1cfd5eab0c3ae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5bdd79dff95269a7bf6428c449c1cfd5eab0c3ae"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 15,
    "deletions": 15
  },
  "files": [
    {
      "sha": "96448dc2c9a123eeb97717630ac8e130f70505ab",
      "filename": "gdb/testsuite/gdb.base/funcargs.exp",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dc330089a00d2ad67e8b802a3e9670cd0a37e99/gdb/testsuite/gdb.base/funcargs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dc330089a00d2ad67e8b802a3e9670cd0a37e99/gdb/testsuite/gdb.base/funcargs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/funcargs.exp?ref=2dc330089a00d2ad67e8b802a3e9670cd0a37e99",
      "patch": "@@ -39,7 +39,7 @@ if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile $compile_flags]}\n # Locate actual args; integral types.\n #\n \n-proc integral_args {} {\n+proc_with_prefix integral_args {} {\n     global gdb_prompt\n     global det_file\n     global gcc_compiled\n@@ -199,7 +199,7 @@ proc float_and_integral_args {} {\n # Locate actual args; _Complex types.\n #\n \n-proc complex_args {} {\n+proc_with_prefix complex_args {} {\n     global gdb_prompt\n \n     delete_breakpoints\n@@ -226,7 +226,7 @@ proc complex_args {} {\n #\n # Locate actual args; _Complex types and integral.\n #\n-proc complex_integral_args {} {\n+proc_with_prefix complex_integral_args {} {\n     global gdb_prompt\n \n     delete_breakpoints\n@@ -244,7 +244,7 @@ proc complex_integral_args {} {\n #\n # Locate actual args; _Complex types and integral/float.\n #\n-proc complex_float_integral_args {} {\n+proc_with_prefix complex_float_integral_args {} {\n     global gdb_prompt\n \n     delete_breakpoints\n@@ -263,7 +263,7 @@ proc complex_float_integral_args {} {\n # Locate actual args; dereference pointers to ints and floats.\n #\n \n-proc pointer_args {} {\n+proc_with_prefix pointer_args {} {\n     global gdb_prompt\n     global hex\n     global det_file\n@@ -306,7 +306,7 @@ proc pointer_args {} {\n # Locate actual args; structures and unions passed by reference.\n #\n \n-proc structs_by_reference {} {\n+proc_with_prefix structs_by_reference {} {\n     global gdb_prompt\n     global hex\n     global det_file\n@@ -355,7 +355,7 @@ proc structs_by_reference {} {\n # Locate actual args; structures and unions passed by value.\n #\n \n-proc structs_by_value {} {\n+proc_with_prefix structs_by_value {} {\n     global gdb_prompt\n     global hex\n     global det_file\n@@ -415,7 +415,7 @@ proc structs_by_value {} {\n # Locate actual args; discard, shuffle, and call\n #\n \n-proc discard_and_shuffle {} {\n+proc_with_prefix discard_and_shuffle {} {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -617,7 +617,7 @@ proc discard_and_shuffle {} {\n # Locate actual args; shuffle round robin and call\n #\n \n-proc shuffle_round_robin {} {\n+proc_with_prefix shuffle_round_robin {} {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -814,7 +814,7 @@ proc shuffle_round_robin {} {\n # Locate actual args; recursive passing of structs by value\n #\n \n-proc recursive_structs_by_value {} {\n+proc_with_prefix recursive_structs_by_value {} {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -844,7 +844,7 @@ proc recursive_structs_by_value {} {\n #\n # Test for accessing local stack variables in functions which call alloca\n #\n-proc localvars_after_alloca { } {\n+proc_with_prefix localvars_after_alloca { } {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -878,7 +878,7 @@ proc localvars_after_alloca { } {\n     gdb_test \"backtrace 8\" \"#0.*localvars_after_alloca \\\\(c=97 'a', s=1, i=2, l=3\\\\).*#1.*main.*\" \"backtrace after alloca\"\n }\n \n-proc call_after_alloca { } {\n+proc_with_prefix call_after_alloca { } {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -907,7 +907,7 @@ proc call_after_alloca { } {\n # and finally stepping into indirect calls.  The point is that on the PA\n # these use a funky `dyncall' mechanism which GDB needs to know about.\n #\n-proc localvars_in_indirect_call { } {\n+proc_with_prefix localvars_in_indirect_call { } {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -979,7 +979,7 @@ proc localvars_in_indirect_call { } {\n # cascaded) on both the call path and the gdb_suppress_tests; path.\n # to handle trampolines.\n #\n-proc test_stepping_over_trampolines { } {\n+proc_with_prefix stepping_over_trampolines { } {\n     global gdb_prompt\n     global hex\n     global decimal\n@@ -1106,6 +1106,6 @@ recursive_structs_by_value\n localvars_after_alloca\n call_after_alloca\n localvars_in_indirect_call\n-test_stepping_over_trampolines\n+stepping_over_trampolines\n \n set timeout $prev_timeout"
    }
  ]
}