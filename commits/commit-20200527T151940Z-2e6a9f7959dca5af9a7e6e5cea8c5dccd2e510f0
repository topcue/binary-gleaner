{
  "sha": "2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmU2YTlmNzk1OWRjYTVhZjlhN2U2ZTVjZWE4YzVkY2NkMmU1MTBmMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-27T15:14:10Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:19:40Z"
    },
    "message": "Add comp_unit_head to dwarf2_per_cu_data\n\nThe per_cu_header_read_in function allows obtaining a filled\ncomp_unit_head object for a given dwarf2_per_cu_data object.  If a\ndwarf2_cu object exists for this dwarf2_per_cu_data, then it just\nreturns a pointer to the comp_unit_head from that dwarf2_cu.  Otherwise,\nit reads the header into a temporary buffer provided by the caller, and\nreturns a pointer to that.\n\nSince the dwarf2_per_cu_data::cu link is going to be removed\n(dwarf2_per_cu_data will become objfile-independent while dwarf2_cu\nstays objfile-dependent), we cannot rely anymore on returning the header\nfrom the dwarf2_cu object.\n\nThe not too complex solution implemented by this patch is to keep a copy\nof the header in the dwarf2_per_cu_data object, independent from the\ncopy in dwarf2_cu.  The new copy is only used in the addr_size,\noffset_size and ref_addr_size methods of dwarf2_per_cu_data.\n\nThere's nothing intrinsic to the comp_unit_head object that prevents it\nto be shared between two dwarf2_cu objects (belonging to different\nobjfiles) representing the same CU.  In other words, I think we could\neventually get rid of the copy in dwarf2_cu to only keep the one in\ndwarf2_per_cu_data.  It is not trivial, however, so I have decided not\nto do it for the moment.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_cu_data) <m_header,\n\tm_header_read_in>: New fields.\n\t<get_header>: New method.\n\t* dwarf2/read.c (per_cu_header_read_in): Remove.\n\t(dwarf2_per_cu_data::get_header): New.\n\t(dwarf2_per_cu_data::addr_size): Update.\n\t(dwarf2_per_cu_data::offset_size): Update.\n\t(dwarf2_per_cu_data::ref_addr_size): Update.\n\nChange-Id: Id7541fca7562843eba110ece21c4df38d45fca23",
    "tree": {
      "sha": "2e1f95c2ef8db3b38a6f71f02e3ff2dc5b1573cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2e1f95c2ef8db3b38a6f71f02e3ff2dc5b1573cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1b555f17476d99f97f33fb4c648d94f7767bcbd7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b555f17476d99f97f33fb4c648d94f7767bcbd7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1b555f17476d99f97f33fb4c648d94f7767bcbd7"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 48,
    "deletions": 34
  },
  "files": [
    {
      "sha": "b85a8aa2dcd4f8e33f0157540b4d293aa2ba6739",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
      "patch": "@@ -1,3 +1,14 @@\n+2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_cu_data) <m_header,\n+\tm_header_read_in>: New fields.\n+\t<get_header>: New method.\n+\t* dwarf2/read.c (per_cu_header_read_in): Remove.\n+\t(dwarf2_per_cu_data::get_header): New.\n+\t(dwarf2_per_cu_data::addr_size): Update.\n+\t(dwarf2_per_cu_data::offset_size): Update.\n+\t(dwarf2_per_cu_data::ref_addr_size): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2/read.c (load_cu): Return dwarf2_cu."
    },
    {
      "sha": "a6b7f2c6d25ad425ac3be50701cf070a80ac5952",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 18,
      "deletions": 34,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
      "patch": "@@ -23335,68 +23335,52 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n     }\n }\n \n-/* Return comp_unit_head for PER_CU, either already available in PER_CU->CU\n-   (CU_HEADERP is unused in such case) or prepare a temporary copy at\n-   CU_HEADERP first.  */\n+/* See read.h.  */\n \n-static const struct comp_unit_head *\n-per_cu_header_read_in (struct comp_unit_head *cu_headerp,\n-\t\t       const struct dwarf2_per_cu_data *per_cu)\n+const comp_unit_head *\n+dwarf2_per_cu_data::get_header () const\n {\n-  const gdb_byte *info_ptr;\n-\n-  if (per_cu->cu)\n-    return &per_cu->cu->header;\n+  if (!m_header_read_in)\n+    {\n+      const gdb_byte *info_ptr\n+\t= this->section->buffer + to_underlying (this->sect_off);\n \n-  info_ptr = per_cu->section->buffer + to_underlying (per_cu->sect_off);\n+      memset (&m_header, 0, sizeof (m_header));\n \n-  memset (cu_headerp, 0, sizeof (*cu_headerp));\n-  read_comp_unit_head (cu_headerp, info_ptr, per_cu->section,\n-\t\t       rcuh_kind::COMPILE);\n+      read_comp_unit_head (&m_header, info_ptr, this->section,\n+\t\t\t   rcuh_kind::COMPILE);\n+    }\n \n-  return cu_headerp;\n+  return &m_header;\n }\n \n /* See read.h.  */\n \n int\n dwarf2_per_cu_data::addr_size () const\n {\n-  struct comp_unit_head cu_header_local;\n-  const struct comp_unit_head *cu_headerp;\n-\n-  cu_headerp = per_cu_header_read_in (&cu_header_local, this);\n-\n-  return cu_headerp->addr_size;\n+  return this->get_header ()->addr_size;\n }\n \n /* See read.h.  */\n \n int\n dwarf2_per_cu_data::offset_size () const\n {\n-  struct comp_unit_head cu_header_local;\n-  const struct comp_unit_head *cu_headerp;\n-\n-  cu_headerp = per_cu_header_read_in (&cu_header_local, this);\n-\n-  return cu_headerp->offset_size;\n+  return this->get_header ()->offset_size;\n }\n \n /* See read.h.  */\n \n int\n dwarf2_per_cu_data::ref_addr_size () const\n {\n-  struct comp_unit_head cu_header_local;\n-  const struct comp_unit_head *cu_headerp;\n-\n-  cu_headerp = per_cu_header_read_in (&cu_header_local, this);\n+  const comp_unit_head *header = this->get_header ();\n \n-  if (cu_headerp->version == 2)\n-    return cu_headerp->addr_size;\n+  if (header->version == 2)\n+    return header->addr_size;\n   else\n-    return cu_headerp->offset_size;\n+    return header->offset_size;\n }\n \n /* See read.h.  */"
    },
    {
      "sha": "b75be3122171ad110addcc70bce7aa1c1b9d166e",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=2e6a9f7959dca5af9a7e6e5cea8c5dccd2e510f0",
      "patch": "@@ -22,6 +22,7 @@\n \n #include <queue>\n #include <unordered_map>\n+#include \"dwarf2/comp-unit.h\"\n #include \"dwarf2/index-cache.h\"\n #include \"dwarf2/section.h\"\n #include \"filename-seen-cache.h\"\n@@ -468,6 +469,21 @@ struct dwarf2_per_cu_data\n   /* Backlink to the owner of this.  */\n   dwarf2_per_bfd *per_bfd;\n \n+  /* DWARF header of this CU.  Note that dwarf2_cu reads its own version of the\n+     header, which may differ from this one, since it may pass rcuh_kind::TYPE\n+     to read_comp_unit_head, whereas for dwarf2_per_cu_data we always pass\n+     rcuh_kind::COMPILE.\n+\n+     Don't access this field directly, use the get_header method instead.  It\n+     should be private, but we can't make it private at the moment.  */\n+  mutable comp_unit_head m_header;\n+\n+  /* True if HEADER has been read in.\n+\n+     Don't access this field directly.  It should be private, but we can't make\n+     it private at the moment.  */\n+  mutable bool m_header_read_in;\n+\n   /* When dwarf2_per_bfd::using_index is true, the 'quick' field\n      is active.  Otherwise, the 'psymtab' field is active.  */\n   union\n@@ -537,6 +553,9 @@ struct dwarf2_per_cu_data\n     imported_symtabs = nullptr;\n   }\n \n+  /* Get the header of this per_cu, reading it if necessary.  */\n+  const comp_unit_head *get_header () const;\n+\n   /* Return the address size given in the compilation unit header for\n      this CU.  */\n   int addr_size () const;"
    }
  ]
}