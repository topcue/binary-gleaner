{
  "sha": "831083d300c9e7f5a224df60c3a059725fb04882",
  "node_id": "C_kwDOANOeidoAKDgzMTA4M2QzMDBjOWU3ZjVhMjI0ZGY2MGMzYTA1OTcyNWZiMDQ4ODI",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-12-31T14:49:19Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-12-31T15:02:41Z"
    },
    "message": "Define X86_PCREL_TYPE_P/X86_SIZE_TYPE_P in elfxx-x86.h\n\n\t* elf32-i386.c: Don't include \"elf/i386.h\".\n\t(X86_PCREL_TYPE_P): Removed.\n\t(X86_SIZE_TYPE_P): Likewise.\n\t(elf_i386_check_relocs): Pass false to NEED_DYNAMIC_RELOCATION_P.\n\t(elf_i386_relocate_section): Pass false to\n\tGENERATE_DYNAMIC_RELOCATION_P and COPY_INPUT_RELOC_P.\n\t* elf64-x86-64.c: Don't include \"elf/x86-64.h\".\n\t(X86_PCREL_TYPE_P): Removed.\n\t(X86_SIZE_TYPE_P): Likewise.\n\t(elf_x86_64_check_relocs): Pass true to NEED_DYNAMIC_RELOCATION_P\n\tand X86_PCREL_TYPE_P.\n\t(elf_x86_64_relocate_section): Pass true to X86_PCREL_TYPE_P,\n\tX86_SIZE_TYPE_P, GENERATE_DYNAMIC_RELOCATION_P and\n\tCOPY_INPUT_RELOC_P.\n\t* elfxx-x86.c: Don't include \"elf/i386.h\" nor \"elf/x86-64.h\".\n\t* elfxx-x86.h (X86_64_PCREL_TYPE_P): New.\n\t(I386_PCREL_TYPE_P): Likewise.\n\t(X86_PCREL_TYPE_P): Likewise.\n\t(X86_64_SIZE_TYPE_P): Likewise.\n\t(I386_SIZE_TYPE_P): Likewise.\n\t(X86_SIZE_TYPE_P): Likewise.\n\t(NEED_DYNAMIC_RELOCATION_P): Add IS_X86_64 and pass it to\n\tX86_PCREL_TYPE_P.\n\t(COPY_INPUT_RELOC_P): Likewise.\n\t(GENERATE_DYNAMIC_RELOCATION_P): Add IS_X86_64, pass it to\n\tX86_PCREL_TYPE_P and X86_SIZE_TYPE_P.",
    "tree": {
      "sha": "d251dc13573462c9d76d0518f3a210c416d6f5dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d251dc13573462c9d76d0518f3a210c416d6f5dd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/831083d300c9e7f5a224df60c3a059725fb04882",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/831083d300c9e7f5a224df60c3a059725fb04882",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/831083d300c9e7f5a224df60c3a059725fb04882",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/831083d300c9e7f5a224df60c3a059725fb04882/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e5b10c4079279db9aa86225a3b4b4c30280c322e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5b10c4079279db9aa86225a3b4b4c30280c322e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e5b10c4079279db9aa86225a3b4b4c30280c322e"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 41,
    "deletions": 38
  },
  "files": [
    {
      "sha": "5660e9539af2c397c4decfac404dd98f3d307946",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=831083d300c9e7f5a224df60c3a059725fb04882",
      "patch": "@@ -26,8 +26,6 @@\n /* 386 uses REL relocations instead of RELA.  */\n #define USE_REL\t1\n \n-#include \"elf/i386.h\"\n-\n static reloc_howto_type elf_howto_table[]=\n {\n   HOWTO(R_386_NONE, 0, 3, 0, false, 0, complain_overflow_dont,\n@@ -181,10 +179,6 @@ static reloc_howto_type elf_howto_table[]=\n \n };\n \n-#define X86_PCREL_TYPE_P(TYPE) ((TYPE) == R_386_PC32)\n-\n-#define X86_SIZE_TYPE_P(TYPE) ((TYPE) == R_386_SIZE32)\n-\n #ifdef DEBUG_GEN_RELOC\n #define TRACE(str) \\\n   fprintf (stderr, \"i386 bfd reloc lookup %d (%s)\\n\", code, str)\n@@ -1835,8 +1829,8 @@ elf_i386_check_relocs (bfd *abfd,\n \t  size_reloc = false;\n \tdo_size:\n \t  if (!no_dynreloc\n-\t      && NEED_DYNAMIC_RELOCATION_P (info, false, h, sec, r_type,\n-\t\t\t\t\t    R_386_32))\n+\t      && NEED_DYNAMIC_RELOCATION_P (false, info, false, h, sec,\n+\t\t\t\t\t    r_type, R_386_32))\n \t    {\n \t      struct elf_dyn_relocs *p;\n \t      struct elf_dyn_relocs **head;\n@@ -2725,8 +2719,9 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t      || is_vxworks_tls)\n \t    break;\n \n-\t  if (GENERATE_DYNAMIC_RELOCATION_P (info, eh, r_type, sec,\n-\t\t\t\t\t     false, resolved_to_zero,\n+\t  if (GENERATE_DYNAMIC_RELOCATION_P (false, info, eh, r_type,\n+\t\t\t\t\t     sec, false,\n+\t\t\t\t\t     resolved_to_zero,\n \t\t\t\t\t     (r_type == R_386_PC32)))\n \t    {\n \t      Elf_Internal_Rela outrel;\n@@ -2752,7 +2747,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \n \t      if (skip)\n \t\tmemset (&outrel, 0, sizeof outrel);\n-\t      else if (COPY_INPUT_RELOC_P (info, h, r_type))\n+\t      else if (COPY_INPUT_RELOC_P (false, info, h, r_type))\n \t\toutrel.r_info = ELF32_R_INFO (h->dynindx, r_type);\n \t      else\n \t\t{"
    },
    {
      "sha": "637f7464d949668babff7f4e7181fbbe0f53b25c",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 8,
      "deletions": 17,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=831083d300c9e7f5a224df60c3a059725fb04882",
      "patch": "@@ -24,7 +24,6 @@\n #include \"libiberty.h\"\n \n #include \"opcode/i386.h\"\n-#include \"elf/x86-64.h\"\n \n #ifdef CORE_HEADER\n #include <stdarg.h>\n@@ -193,16 +192,6 @@ static reloc_howto_type x86_64_elf_howto_table[] =\n \tfalse)\n };\n \n-#define X86_PCREL_TYPE_P(TYPE)\t\t\\\n-  (   ((TYPE) == R_X86_64_PC8)\t\t\\\n-   || ((TYPE) == R_X86_64_PC16)\t\t\\\n-   || ((TYPE) == R_X86_64_PC32)\t\t\\\n-   || ((TYPE) == R_X86_64_PC32_BND)\t\\\n-   || ((TYPE) == R_X86_64_PC64))\n-\n-#define X86_SIZE_TYPE_P(TYPE)\t\t\\\n-  ((TYPE) == R_X86_64_SIZE32 || (TYPE) == R_X86_64_SIZE64)\n-\n /* Map BFD relocs to the x86_64 elf relocs.  */\n struct elf_reloc_map\n {\n@@ -2284,7 +2273,8 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  size_reloc = false;\n \tdo_size:\n \t  if (!no_dynreloc\n-\t      && NEED_DYNAMIC_RELOCATION_P (info, true, h, sec, r_type,\n+\t      && NEED_DYNAMIC_RELOCATION_P (true, info, true, h, sec,\n+\t\t\t\t\t    r_type,\n \t\t\t\t\t    htab->pointer_r_type))\n \t    {\n \t      struct elf_dyn_relocs *p;\n@@ -2348,7 +2338,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t      p->count += 1;\n \t      /* Count size relocation as PC-relative relocation.  */\n-\t      if (X86_PCREL_TYPE_P (r_type) || size_reloc)\n+\t      if (X86_PCREL_TYPE_P (true, r_type) || size_reloc)\n \t\tp->pc_count += 1;\n \t    }\n \t  break;\n@@ -3235,10 +3225,11 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t\t\t\t|| eh->needs_copy\n \t\t\t\t\t|| (h->root.type\n \t\t\t\t\t    == bfd_link_hash_undefined))\n-\t\t\t\t    && (X86_PCREL_TYPE_P (r_type)\n-\t\t\t\t\t|| X86_SIZE_TYPE_P (r_type)));\n+\t\t\t\t    && (X86_PCREL_TYPE_P (true, r_type)\n+\t\t\t\t\t|| X86_SIZE_TYPE_P (true,\n+\t\t\t\t\t\t\t    r_type)));\n \n-\t  if (GENERATE_DYNAMIC_RELOCATION_P (info, eh, r_type, sec,\n+\t  if (GENERATE_DYNAMIC_RELOCATION_P (true, info, eh, r_type, sec,\n \t\t\t\t\t     need_copy_reloc_in_pie,\n \t\t\t\t\t     resolved_to_zero, false))\n \t    {\n@@ -3267,7 +3258,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t      if (skip)\n \t\tmemset (&outrel, 0, sizeof outrel);\n \n-\t      else if (COPY_INPUT_RELOC_P (info, h, r_type))\n+\t      else if (COPY_INPUT_RELOC_P (true, info, h, r_type))\n \t\t{\n \t\t  outrel.r_info = htab->r_info (h->dynindx, r_type);\n \t\t  outrel.r_addend = rel->r_addend;"
    },
    {
      "sha": "f3435b07201c12e0d411f8ff81923d9e31033288",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=831083d300c9e7f5a224df60c3a059725fb04882",
      "patch": "@@ -21,8 +21,6 @@\n #include \"elfxx-x86.h\"\n #include \"elf-vxworks.h\"\n #include \"objalloc.h\"\n-#include \"elf/i386.h\"\n-#include \"elf/x86-64.h\"\n \n /* The name of the dynamic interpreter.  This is put in the .interp\n    section.  */"
    },
    {
      "sha": "91a141f1363505613cbd62abe82df3115f76ae6e",
      "filename": "bfd/elfxx-x86.h",
      "status": "modified",
      "additions": 27,
      "deletions": 8,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elfxx-x86.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/831083d300c9e7f5a224df60c3a059725fb04882/bfd/elfxx-x86.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.h?ref=831083d300c9e7f5a224df60c3a059725fb04882",
      "patch": "@@ -28,6 +28,24 @@\n #include \"elf-bfd.h\"\n #include \"hashtab.h\"\n #include \"elf-linker-x86.h\"\n+#include \"elf/i386.h\"\n+#include \"elf/x86-64.h\"\n+\n+#define X86_64_PCREL_TYPE_P(TYPE) \\\n+  ((TYPE) == R_X86_64_PC8 \\\n+   || (TYPE) == R_X86_64_PC16 \\\n+   || (TYPE) == R_X86_64_PC32 \\\n+   || (TYPE) == R_X86_64_PC32_BND \\\n+   || (TYPE) == R_X86_64_PC64)\n+#define I386_PCREL_TYPE_P(TYPE) ((TYPE) == R_386_PC32)\n+#define X86_PCREL_TYPE_P(IS_X86_64, TYPE) \\\n+  ((IS_X86_64) ? X86_64_PCREL_TYPE_P (TYPE) : I386_PCREL_TYPE_P (TYPE))\n+\n+#define X86_64_SIZE_TYPE_P(TYPE) \\\n+  ((TYPE) == R_X86_64_SIZE32 || (TYPE) == R_X86_64_SIZE64)\n+#define I386_SIZE_TYPE_P(TYPE) ((TYPE) == R_386_SIZE32)\n+#define X86_SIZE_TYPE_P(IS_X86_64, TYPE) \\\n+  ((IS_X86_64) ? X86_64_SIZE_TYPE_P(TYPE) : I386_SIZE_TYPE_P (TYPE))\n \n #define PLT_CIE_LENGTH\t\t20\n #define PLT_FDE_LENGTH\t\t36\n@@ -91,10 +109,10 @@\n \n    We also need to generate dynamic pointer relocation against\n    STT_GNU_IFUNC symbol in the non-code section.  */\n-#define NEED_DYNAMIC_RELOCATION_P(INFO, PCREL_PLT, H, SEC, R_TYPE, \\\n-\t\t\t\t  POINTER_TYPE) \\\n+#define NEED_DYNAMIC_RELOCATION_P(IS_X86_64, INFO, PCREL_PLT, H, SEC, \\\n+\t\t\t\t  R_TYPE, POINTER_TYPE) \\\n   ((bfd_link_pic (INFO) \\\n-    && (! X86_PCREL_TYPE_P (R_TYPE) \\\n+    && (! X86_PCREL_TYPE_P (IS_X86_64, R_TYPE) \\\n \t|| ((H) != NULL \\\n \t    && (! (bfd_link_pie (INFO) \\\n \t\t   || SYMBOLIC_BIND ((INFO), (H))) \\\n@@ -124,8 +142,8 @@\n    when PC32_RELOC is TRUE.  Undefined weak symbol is bound locally\n    when PIC is false.  Don't generate dynamic relocations against\n    non-preemptible absolute symbol.  */\n-#define GENERATE_DYNAMIC_RELOCATION_P(INFO, EH, R_TYPE, SEC, \\\n-\t\t\t\t      NEED_COPY_RELOC_IN_PIE, \\\n+#define GENERATE_DYNAMIC_RELOCATION_P(IS_X86_64, INFO, EH, R_TYPE, \\\n+\t\t\t\t      SEC, NEED_COPY_RELOC_IN_PIE, \\\n \t\t\t\t      RESOLVED_TO_ZERO, PC32_RELOC) \\\n   ((bfd_link_pic (INFO) \\\n     && !(bfd_is_abs_section (SEC) \\\n@@ -136,7 +154,8 @@\n \t|| ((ELF_ST_VISIBILITY ((EH)->elf.other) == STV_DEFAULT \\\n \t     && (!(RESOLVED_TO_ZERO) || PC32_RELOC)) \\\n \t    || (EH)->elf.root.type != bfd_link_hash_undefweak)) \\\n-    && ((!X86_PCREL_TYPE_P (R_TYPE) && !X86_SIZE_TYPE_P (R_TYPE)) \\\n+    && ((!X86_PCREL_TYPE_P (IS_X86_64, R_TYPE) \\\n+\t && !X86_SIZE_TYPE_P (IS_X86_64, R_TYPE)) \\\n \t|| ! SYMBOL_CALLS_LOCAL ((INFO), \\\n \t\t\t\t (struct elf_link_hash_entry *) (EH)))) \\\n    || (ELIMINATE_COPY_RELOCS \\\n@@ -151,10 +170,10 @@\n \n /* TRUE if this input relocation should be copied to output.  H->dynindx\n    may be -1 if this symbol was marked to become local.  */\n-#define COPY_INPUT_RELOC_P(INFO, H, R_TYPE) \\\n+#define COPY_INPUT_RELOC_P(IS_X86_64, INFO, H, R_TYPE) \\\n   ((H) != NULL \\\n    && (H)->dynindx != -1 \\\n-   && (X86_PCREL_TYPE_P (R_TYPE) \\\n+   && (X86_PCREL_TYPE_P (IS_X86_64, R_TYPE) \\\n        || !(bfd_link_executable (INFO) || SYMBOLIC_BIND ((INFO), (H))) \\\n        || !(H)->def_regular))\n "
    }
  ]
}