{
  "sha": "6791b1172abea5867268c95a460aba1c66c2b6b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njc5MWIxMTcyYWJlYTU4NjcyNjhjOTVhNDYwYWJhMWM2NmMyYjZiMA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-13T17:02:19Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-13T17:02:19Z"
    },
    "message": "Add MI \"-break-insert --qualified\"\n\nCurrently -break-insert always creates a wildmatching breakpoint, and\nthere's no way to ask for a fullname match.  To address that, this\npatch adds the equivalent of \"break -qualified\" to MI:\n\n  \"-break-insert --qualified\".\n\nFor the testcase, curiously, it doesn't look like we have _any_\ntestcase that tests a breakpoint with multiple locations, and, the\nexisting mi_create_breakpoint / mi_make_breakpoint procedures are only\ngood for breakpoints with a single location.  This patch thus adds a\nfew new companion routines to mi-support.exp for breakpoints with\nmultiple locations: mi_create_breakpoint_multi,\nmi_make_breakpoint_loc, mi_make_breakpoint_multi.\n\ngdb/ChangeLog:\n\n\t* NEWS: Document \"-break-insert --qualified\".\n\t* mi/mi-cmd-break.c (mi_cmd_break_insert_1): Handle \"--qualified\".\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (GDB/MI Breakpoint Commands): Document\n\t\"-break-insert --qualified\" and \"-dprintf-insert --qualified\".\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.mi/mi-break-qualified.cc: New file.\n\t* gdb.mi/mi-break-qualified.exp: New file.\n\t* lib/mi-support.exp (mi_create_breakpoint_multi)\n\t(mi_make_breakpoint_loc, mi_make_breakpoint_multi): New\n\tprocedures.\n\t(mi_create_breakpoint_1): New, factored out from\n\tmi_create_breakpoint.",
    "tree": {
      "sha": "d8d1f1043094a1dfa82f3cd0d7dcd03e13dac5e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8d1f1043094a1dfa82f3cd0d7dcd03e13dac5e4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6791b1172abea5867268c95a460aba1c66c2b6b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6791b1172abea5867268c95a460aba1c66c2b6b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6791b1172abea5867268c95a460aba1c66c2b6b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6791b1172abea5867268c95a460aba1c66c2b6b0/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3b8d4c5cc045ba80cc5b095fba06287050b7ef87",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b8d4c5cc045ba80cc5b095fba06287050b7ef87",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3b8d4c5cc045ba80cc5b095fba06287050b7ef87"
    }
  ],
  "stats": {
    "total": 346,
    "additions": 320,
    "deletions": 26
  },
  "files": [
    {
      "sha": "dd0305648ea70b1ad451345d9633c58c329d9587",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-13  Pedro Alves  <pedro@palves.net>\n+\n+\t* NEWS: Document \"-break-insert --qualified\".\n+\t* mi/mi-cmd-break.c (mi_cmd_break_insert_1): Handle \"--qualified\".\n+\n 2020-09-13  Pedro Alves  <pedro@palves.net>\n \n \t* linespec.c (classify_mtype, compare_msyms): Delete."
    },
    {
      "sha": "0ac0ff18f2fe1bfa6c719a934dac549666bebe26",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -3,6 +3,16 @@\n \n *** Changes since GDB 10\n \n+* MI changes\n+\n+ ** '-break-insert --qualified' and '-dprintf-insert --qualified'\n+\n+    The MI -break-insert and -dprintf-insert commands now support a\n+    new \"--qualified\" option that makes GDB interpret a specified\n+    function name as a complete fully-qualified name.  This is the\n+    equivalent of the CLI's \"break -qualified\" and \"dprintf\n+    -qualified\".\n+\n *** Changes in GDB 10\n \n * There are new feature names for ARC targets: \"org.gnu.gdb.arc.core\""
    },
    {
      "sha": "bfb330dc0e51fbc5f74a3a85f614af321ecd3c94",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-13  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.texinfo (GDB/MI Breakpoint Commands): Document\n+\t\"-break-insert --qualified\" and \"-dprintf-insert --qualified\".\n+\n 2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* gdb.texinfo (Synopsys ARC): Document LP_START, LP_END and BTA."
    },
    {
      "sha": "8bff27c940dec2c5a627459b343a33f3b4f886a1",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -30180,7 +30180,7 @@ N.A.\n @subsubheading Synopsis\n \n @smallexample\n- -break-insert [ -t ] [ -h ] [ -f ] [ -d ] [ -a ]\n+ -break-insert [ -t ] [ -h ] [ -f ] [ -d ] [ -a ] [ --qualified ]\n     [ -c @var{condition} ] [ -i @var{ignore-count} ]\n     [ -p @var{thread-id} ] [ @var{location} ]\n @end smallexample\n@@ -30242,6 +30242,9 @@ Initialize the @var{ignore-count}.\n @item -p @var{thread-id}\n Restrict the breakpoint to the thread with the specified global\n @var{thread-id}.\n+@item --qualified\n+This option makes @value{GDBN} interpret a function name specified as\n+a complete fully-qualified name.\n @end table\n \n @subsubheading Result\n@@ -30302,15 +30305,16 @@ times=\"0\"@}]@}\n @subsubheading Synopsis\n \n @smallexample\n- -dprintf-insert [ -t ] [ -f ] [ -d ]\n+ -dprintf-insert [ -t ] [ -f ] [ -d ] [ --qualified ]\n     [ -c @var{condition} ] [ -i @var{ignore-count} ]\n     [ -p @var{thread-id} ] [ @var{location} ] [ @var{format} ]\n     [ @var{argument} ]\n @end smallexample\n \n @noindent\n-If supplied, @var{location} may be specified the same way as for\n-the @code{-break-insert} command.  @xref{-break-insert}.\n+If supplied, @var{location} and @code{--qualified} may be specified\n+the same way as for the @code{-break-insert} command.\n+@xref{-break-insert}.\n \n The possible optional parameters of this command are:\n "
    },
    {
      "sha": "3835c02650dd16bc61ed23631aecb917b5f99d4a",
      "filename": "gdb/mi/mi-cmd-break.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/mi/mi-cmd-break.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/mi/mi-cmd-break.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-break.c?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -176,6 +176,7 @@ mi_cmd_break_insert_1 (int dprintf, const char *command, char **argv, int argc)\n   int pending = 0;\n   int enabled = 1;\n   int tracepoint = 0;\n+  symbol_name_match_type match_type = symbol_name_match_type::WILD;\n   enum bptype type_wanted;\n   event_location_up location;\n   struct breakpoint_ops *ops;\n@@ -188,6 +189,7 @@ mi_cmd_break_insert_1 (int dprintf, const char *command, char **argv, int argc)\n       HARDWARE_OPT, TEMP_OPT, CONDITION_OPT,\n       IGNORE_COUNT_OPT, THREAD_OPT, PENDING_OPT, DISABLE_OPT,\n       TRACEPOINT_OPT,\n+      QUALIFIED_OPT,\n       EXPLICIT_SOURCE_OPT, EXPLICIT_FUNC_OPT,\n       EXPLICIT_LABEL_OPT, EXPLICIT_LINE_OPT\n     };\n@@ -201,6 +203,7 @@ mi_cmd_break_insert_1 (int dprintf, const char *command, char **argv, int argc)\n     {\"f\", PENDING_OPT, 0},\n     {\"d\", DISABLE_OPT, 0},\n     {\"a\", TRACEPOINT_OPT, 0},\n+    {\"-qualified\", QUALIFIED_OPT, 0},\n     {\"-source\" , EXPLICIT_SOURCE_OPT, 1},\n     {\"-function\", EXPLICIT_FUNC_OPT, 1},\n     {\"-label\", EXPLICIT_LABEL_OPT, 1},\n@@ -247,6 +250,9 @@ mi_cmd_break_insert_1 (int dprintf, const char *command, char **argv, int argc)\n \tcase TRACEPOINT_OPT:\n \t  tracepoint = 1;\n \t  break;\n+\tcase QUALIFIED_OPT:\n+\t  match_type = symbol_name_match_type::FULL;\n+\t  break;\n \tcase EXPLICIT_SOURCE_OPT:\n \t  is_explicit = 1;\n \t  explicit_loc.source_filename = oarg;\n@@ -333,12 +339,14 @@ mi_cmd_break_insert_1 (int dprintf, const char *command, char **argv, int argc)\n \terror (_(\"-%s-insert: --source option requires --function, --label,\"\n \t\t \" or --line\"), dprintf ? \"dprintf\" : \"break\");\n \n+      explicit_loc.func_name_match_type = match_type;\n+\n       location = new_explicit_location (&explicit_loc);\n     }\n   else\n     {\n       location = string_to_event_location_basic (&address, current_language,\n-\t\t\t\t\t\t symbol_name_match_type::WILD);\n+\t\t\t\t\t\t match_type);\n       if (*address)\n \terror (_(\"Garbage '%s' at end of location\"), address);\n     }"
    },
    {
      "sha": "24a58adbdd5324e932d216793e7e6306b59045dd",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-13  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.mi/mi-break-qualified.cc: New file.\n+\t* gdb.mi/mi-break-qualified.exp: New file.\n+\t* lib/mi-support.exp (mi_create_breakpoint_multi)\n+\t(mi_make_breakpoint_loc, mi_make_breakpoint_multi): New\n+\tprocedures.\n+\t(mi_create_breakpoint_1): New, factored out from\n+\tmi_create_breakpoint.\n+\n 2020-09-13  Pedro Alves  <pedro@palves.net>\n \n \t* gdb.cp/inherit.exp: No longer pass -Wno-deprecated-register."
    },
    {
      "sha": "d4e27034faa6ad679d96caf8d64befa1f6e769eb",
      "filename": "gdb/testsuite/gdb.mi/mi-break-qualified.cc",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/gdb.mi/mi-break-qualified.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/gdb.mi/mi-break-qualified.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-break-qualified.cc?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -0,0 +1,53 @@\n+/* Copyright 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+namespace NS {\n+\n+int\n+func (int i)\n+{\n+  return i; /* location NS::func here */\n+}\n+\n+} /* namespace NS */\n+\n+struct foo\n+{\n+  long func (long l);\n+};\n+\n+long\n+foo::func (long l)\n+{\n+  return l; /* location foo::func here */\n+}\n+\n+char\n+func (char c)\n+{\n+  return c; /* location func here */\n+}\n+\n+int\n+main ()\n+{\n+  foo f;\n+  f.func (1);\n+  NS::func (2);\n+  func (3);\n+  return 0;\n+}"
    },
    {
      "sha": "adbc3b5eb01bd86f3ece6eccf35aedde1f7ea27b",
      "filename": "gdb/testsuite/gdb.mi/mi-break-qualified.exp",
      "status": "added",
      "additions": 106,
      "deletions": 0,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/gdb.mi/mi-break-qualified.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/gdb.mi/mi-break-qualified.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-break-qualified.exp?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -0,0 +1,106 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test '-break-insert --qualified' and C++ wildmatching.\n+#\n+# The goal is not to test GDB functionality, which is done by other\n+# tests, but to verify the correct output response to MI operations.\n+\n+load_lib mi-support.exp\n+set MIFLAGS \"-i=mi\"\n+\n+standard_testfile .cc\n+\n+if {[build_executable $testfile.exp $testfile $srcfile {c++ debug}] == -1} {\n+     untested \"failed to compile\"\n+     return -1\n+}\n+\n+set loc_ns_func_line [gdb_get_line_number \"location NS::func here\"]\n+set loc_foo_func_line [gdb_get_line_number \"location foo::func here\"]\n+set loc_func_line [gdb_get_line_number \"location func here\"]\n+\n+proc test_break_qualified {} {\n+    global hex\n+    global loc_ns_func_line loc_foo_func_line loc_func_line\n+\n+    # We have three functions called \"func\" in the program.  Check\n+    # that --qualified only picks the one explicitly specified.\n+\n+    set bps {}\n+    set test \"--qualified func\"\n+    lappend bps [mi_create_breakpoint $test $test \\\n+\t\t     -func \"func\\\\(char\\\\)\" \\\n+\t\t     -file \".*mi-break-qualified.cc\" \\\n+\t\t     -line $loc_func_line]\n+\n+    set test \"--qualified NS::func\"\n+    lappend bps [mi_create_breakpoint $test $test \\\n+\t\t     -func \"NS::func\\\\(int\\\\)\" \\\n+\t\t     -file \".*mi-break-qualified.cc\" \\\n+\t\t     -line $loc_ns_func_line]\n+\n+    set test \"--qualified foo::func\"\n+    lappend bps [mi_create_breakpoint $test $test \\\n+\t\t     -func \"foo::func\\\\(long\\\\)\" \\\n+\t\t     -file \".*mi-break-qualified.cc\" \\\n+\t\t     -line $loc_foo_func_line]\n+\n+    # Also check that without --qualified, we get a breakpoint with a\n+    # location for each of the functions called \"func\" in the program.\n+\n+    # Small helper wrapper around mi_make_breakpoint_loc.\n+    proc make_loc_re {func line_no} {\n+\tglobal hex\n+\n+\treturn [mi_make_breakpoint_loc \\\n+\t\t  -enabled \"y\" \\\n+\t\t  -func \"$func\" \\\n+\t\t  -file \".*mi-break-qualified.cc\" \\\n+\t\t  -line=\"$line_no\"]\n+    }\n+\n+    set loc1 [make_loc_re \"NS::func\\\\(int\\\\)\" $loc_ns_func_line]\n+    set loc2 [make_loc_re \"foo::func\\\\(long\\\\)\" $loc_foo_func_line]\n+    set loc3 [make_loc_re \"func\\\\(char\\\\)\" $loc_func_line]\n+\n+    set test \"func\"\n+    set bp [mi_create_breakpoint_multi $test $test \\\n+\t\t-original-location \"func\" \\\n+\t\t-locations \"\\\\\\[$loc1,$loc2,$loc3\\\\\\]\"]\n+\n+    lappend bps $bp\n+\n+    # List the breakpoints.\n+    mi_gdb_test \"666-break-list\" \\\n+\t\"666\\\\\\^done,[mi_make_breakpoint_table $bps]\" \\\n+\t\"list of breakpoints\"\n+\n+    mi_gdb_test \"777-break-delete\" \\\n+\t    \"777\\\\^done\" \\\n+\t    \"delete temp breakpoints\"\n+}\n+\n+mi_gdb_exit\n+\n+if [mi_gdb_start \"\"] {\n+    return\n+}\n+\n+mi_delete_breakpoints\n+mi_gdb_reinitialize_dir $srcdir/$subdir\n+mi_gdb_load ${binfile}\n+\n+test_break_qualified"
    },
    {
      "sha": "7c1dcd6f3fbe56090a185c01e8cdb16a7c9811a0",
      "filename": "gdb/testsuite/lib/mi-support.exp",
      "status": "modified",
      "additions": 114,
      "deletions": 21,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/lib/mi-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6791b1172abea5867268c95a460aba1c66c2b6b0/gdb/testsuite/lib/mi-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/mi-support.exp?ref=6791b1172abea5867268c95a460aba1c66c2b6b0",
      "patch": "@@ -1376,6 +1376,15 @@ proc mi_create_breakpoint {location test args} {\n     return $bp\n }\n \n+# Like mi_create_breakpoint, but creates a breakpoint with multiple\n+# locations using mi_make_breakpoint_multi instead.\n+\n+proc mi_create_breakpoint_multi {location test args} {\n+    set bp [eval mi_make_breakpoint_multi $args]\n+    mi_gdb_test \"222-break-insert $location\" \"222\\\\^done,$bp\" $test\n+    return $bp\n+}\n+\n # Creates varobj named NAME for EXPRESSION.\n # Name cannot be \"-\".\n proc mi_create_varobj { name expression testname } {\n@@ -2477,36 +2486,39 @@ proc mi_build_kv_pairs {attr_list {joiner ,}} {\n     return \"[join $l $joiner]\"\n }\n \n-# Construct a breakpoint regexp.  This may be used to test the output of\n-# -break-insert, -dprintf-insert, or -break-info.\n+# Construct a breakpoint location regexp.  This may be used along with\n+# mi_make_breakpoint_multi to test the output of -break-insert,\n+# -dprintf-insert, or -break-info with breapoints with multiple\n+# locations.\n #\n-# All arguments for the breakpoint may be specified using the options\n-# number, type, disp, enabled, addr, func, file, fullanme, line,\n-# thread-groups, cond, evaluated-by, times, ignore, script,\n-# and original-location.\n+# All arguments for the breakpoint location may be specified using the\n+# options number, enabled, addr, func, file, fullname, line and\n+# thread-groups.\n #\n-# Only if -script and -ignore are given will they appear in the output.\n-# Otherwise, this procedure will skip them using \".*\".\n-#\n-# Example: mi_make_breakpoint -number 2 -file \".*/myfile.c\" -line 3\n-# will return the breakpoint:\n-# bkpt={number=\"2\",type=\".*\",disp=\".*\",enabled=\".*\",addr=\".*\",func=\".*\",\n-#       file=\".*/myfile.c\",fullname=\".*\",line=\"3\",thread-groups=\\[.*\\],\n-#       times=\"0\".*original-location=\".*\"}\n+# Example: mi_make_breakpoint_loc -number 2.1 -file \".*/myfile.c\" -line 3\n+# will return the breakpoint location:\n+# {number=\"2.1\",enabled=\".*\",addr=\".*\",func=\".*\",\n+#       file=\".*/myfile.c\",fullname=\".*\",line=\"3\",thread-groups=\\[.*\\]}\n \n-proc mi_make_breakpoint {args} {\n-    parse_args {{number .*} {type .*} {disp .*} {enabled .*} {addr .*}\n+proc mi_make_breakpoint_loc {args} {\n+    parse_args {{number .*} {enabled .*} {addr .*}\n \t{func .*} {file .*} {fullname .*} {line .*}\n-\t{thread-groups \\\\\\[.*\\\\\\]} {times .*} {ignore 0}\n-\t{script \"\"} {original-location .*} {cond \"\"} {evaluated-by \"\"}}\n+\t{thread-groups \\\\\\[.*\\\\\\]}}\n \n     set attr_list {}\n-    foreach attr [list number type disp enabled addr func file \\\n+    foreach attr [list number enabled addr func file \\\n \t\t      fullname line thread-groups] {\n \tlappend attr_list $attr [set $attr]\n     }\n \n-    set result \"bkpt={[mi_build_kv_pairs $attr_list]\"\n+    return \"{[mi_build_kv_pairs $attr_list]}\"\n+}\n+\n+# Bits shared between mi_make_breakpoint and mi_make_breakpoint_multi.\n+\n+proc mi_make_breakpoint_1 {attr_list cond evaluated-by times \\\n+\t\t\t   ignore script original-location} {\n+    set result \"bkpt=\\\\\\{[mi_build_kv_pairs $attr_list]\"\n \n     # There are always exceptions.\n \n@@ -2546,7 +2558,88 @@ proc mi_make_breakpoint {args} {\n     }\n     append result [mi_build_kv_pairs \\\n \t\t       [list \"original-location\" ${original-location}]]\n-    append result \"}\"\n+\n+    return $result\n+}\n+\n+\n+# Construct a breakpoint regexp, for a breakpoint with multiple\n+# locations.  This may be used to test the output of -break-insert,\n+# -dprintf-insert, or -break-info with breakpoints with multiple\n+# locations.\n+#\n+# All arguments for the breakpoint may be specified using the options\n+# number, type, disp, enabled, func, cond, evaluated-by, times,\n+# ignore, script and locations.\n+#\n+# Only if -script and -ignore are given will they appear in the output.\n+# Otherwise, this procedure will skip them using \".*\".\n+#\n+# Example: mi_make_breakpoint_multi -number 2 -locations \"$loc\"\n+# will return the breakpoint:\n+# bkpt={number=\"2\",type=\".*\",disp=\".*\",enabled=\".*\",addr=\"<MULTIPLE>\",\n+#       times=\"0\".*original-location=\".*\",locations=$loc}\n+#\n+# You can construct the list of locations with mi_make_breakpoint_loc.\n+\n+proc mi_make_breakpoint_multi {args} {\n+    parse_args {{number .*} {type .*} {disp .*} {enabled .*}\n+\t{times .*} {ignore 0}\n+\t{script \"\"} {original-location .*} {cond \"\"} {evaluated-by \"\"}\n+\t{locations .*}}\n+\n+    set attr_list {}\n+    foreach attr [list number type disp enabled] {\n+\tlappend attr_list $attr [set $attr]\n+    }\n+\n+    lappend attr_list \"addr\" \"<MULTIPLE>\"\n+\n+    set result [mi_make_breakpoint_1 \\\n+\t\t    $attr_list $cond ${evaluated-by} $times \\\n+\t\t    $ignore $script ${original-location}]\n+\n+    append result \",\"\n+    append result [mi_build_kv_pairs [list \"locations\" $locations]]\n+\n+    append result \"\\\\\\}\"\n+    return $result\n+}\n+\n+# Construct a breakpoint regexp.  This may be used to test the output of\n+# -break-insert, -dprintf-insert, or -break-info.\n+#\n+# All arguments for the breakpoint may be specified using the options\n+# number, type, disp, enabled, addr, func, file, fullanme, line,\n+# thread-groups, cond, evaluated-by, times, ignore, script,\n+# and original-location.\n+#\n+# Only if -script and -ignore are given will they appear in the output.\n+# Otherwise, this procedure will skip them using \".*\".\n+#\n+# Example: mi_make_breakpoint -number 2 -file \".*/myfile.c\" -line 3\n+# will return the breakpoint:\n+# bkpt={number=\"2\",type=\".*\",disp=\".*\",enabled=\".*\",addr=\".*\",func=\".*\",\n+#       file=\".*/myfile.c\",fullname=\".*\",line=\"3\",thread-groups=\\[.*\\],\n+#       times=\"0\".*original-location=\".*\"}\n+\n+proc mi_make_breakpoint {args} {\n+    parse_args {{number .*} {type .*} {disp .*} {enabled .*} {addr .*}\n+\t{func .*} {file .*} {fullname .*} {line .*}\n+\t{thread-groups \\\\\\[.*\\\\\\]} {times .*} {ignore 0}\n+\t{script \"\"} {original-location .*} {cond \"\"} {evaluated-by \"\"}}\n+\n+    set attr_list {}\n+    foreach attr [list number type disp enabled addr func file \\\n+\t\t      fullname line thread-groups] {\n+\tlappend attr_list $attr [set $attr]\n+    }\n+\n+    set result [mi_make_breakpoint_1 \\\n+\t\t    $attr_list $cond ${evaluated-by} $times \\\n+\t\t    $ignore $script ${original-location}]\n+\n+    append result \"\\\\\\}\"\n     return $result\n }\n "
    }
  ]
}