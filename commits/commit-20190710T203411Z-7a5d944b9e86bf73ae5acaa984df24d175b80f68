{
  "sha": "7a5d944b9e86bf73ae5acaa984df24d175b80f68",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2E1ZDk0NGI5ZTg2YmY3M2FlNWFjYWE5ODRkZjI0ZDE3NWI4MGY2OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-02T19:45:28Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-10T20:34:11Z"
    },
    "message": "Change arm-tdep.c to use type-safe registry\n\nThis changes arm-tdep.c to use the type-safe registry, removing a use\nof VEC in the process.\n\n2019-07-10  Tom Tromey  <tromey@adacore.com>\n\n\t* arm-tdep.c (arm_exidx_entry_s): Remove typedef.  Don't define\n\tVEC.\n\t(struct arm_exidx_entry): New method operator<.\n\t(struct arm_exidx_data) <section_maps>: Change type.\n\t(arm_exidx_data_free): Remove.\n\t(arm_exidx_data_key): Change type.  Move lower.\n\t(arm_exidx_new_objfile): Update.\n\t(arm_compare_exidx_entries): Remove.\n\t(arm_find_exidx_entry, _initialize_arm_tdep)",
    "tree": {
      "sha": "d8ac651b38edbf047c7eb1b9519b1a1fb46efe46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8ac651b38edbf047c7eb1b9519b1a1fb46efe46"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7a5d944b9e86bf73ae5acaa984df24d175b80f68",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a5d944b9e86bf73ae5acaa984df24d175b80f68",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7a5d944b9e86bf73ae5acaa984df24d175b80f68",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a5d944b9e86bf73ae5acaa984df24d175b80f68/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48c66e1d07d65a76c685d10003d751ef883b1244",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48c66e1d07d65a76c685d10003d751ef883b1244",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48c66e1d07d65a76c685d10003d751ef883b1244"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 38,
    "deletions": 52
  },
  "files": [
    {
      "sha": "90242001df860219f90519f7f0f277998c889ece",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a5d944b9e86bf73ae5acaa984df24d175b80f68/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a5d944b9e86bf73ae5acaa984df24d175b80f68/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7a5d944b9e86bf73ae5acaa984df24d175b80f68",
      "patch": "@@ -1,3 +1,15 @@\n+2019-07-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* arm-tdep.c (arm_exidx_entry_s): Remove typedef.  Don't define\n+\tVEC.\n+\t(struct arm_exidx_entry): New method operator<.\n+\t(struct arm_exidx_data) <section_maps>: Change type.\n+\t(arm_exidx_data_free): Remove.\n+\t(arm_exidx_data_key): Change type.  Move lower.\n+\t(arm_exidx_new_objfile): Update.\n+\t(arm_compare_exidx_entries): Remove.\n+\t(arm_find_exidx_entry, _initialize_arm_tdep)\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* solib-spu.c (ocl_program_data_key): Change type."
    },
    {
      "sha": "c1ee39714f9674faa91e4add7a52fa4e0045a8cb",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 26,
      "deletions": 52,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a5d944b9e86bf73ae5acaa984df24d175b80f68/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a5d944b9e86bf73ae5acaa984df24d175b80f68/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=7a5d944b9e86bf73ae5acaa984df24d175b80f68",
      "patch": "@@ -1989,37 +1989,23 @@ struct frame_unwind arm_prologue_unwind = {\n    personality routines; the cache will contain only the frame unwinding\n    instructions associated with the entry (not the descriptors).  */\n \n-static const struct objfile_data *arm_exidx_data_key;\n-\n struct arm_exidx_entry\n {\n   bfd_vma addr;\n   gdb_byte *entry;\n+\n+  bool operator< (const arm_exidx_entry &other) const\n+  {\n+    return addr < other.addr;\n+  }\n };\n-typedef struct arm_exidx_entry arm_exidx_entry_s;\n-DEF_VEC_O(arm_exidx_entry_s);\n \n struct arm_exidx_data\n {\n-  VEC(arm_exidx_entry_s) **section_maps;\n+  std::vector<std::vector<arm_exidx_entry>> section_maps;\n };\n \n-static void\n-arm_exidx_data_free (struct objfile *objfile, void *arg)\n-{\n-  struct arm_exidx_data *data = (struct arm_exidx_data *) arg;\n-  unsigned int i;\n-\n-  for (i = 0; i < objfile->obfd->section_count; i++)\n-    VEC_free (arm_exidx_entry_s, data->section_maps[i]);\n-}\n-\n-static inline int\n-arm_compare_exidx_entries (const struct arm_exidx_entry *lhs,\n-\t\t\t   const struct arm_exidx_entry *rhs)\n-{\n-  return lhs->addr < rhs->addr;\n-}\n+static const struct objfile_key<arm_exidx_data> arm_exidx_data_key;\n \n static struct obj_section *\n arm_obj_section_from_vma (struct objfile *objfile, bfd_vma vma)\n@@ -2064,7 +2050,7 @@ arm_exidx_new_objfile (struct objfile *objfile)\n   LONGEST i;\n \n   /* If we've already touched this file, do nothing.  */\n-  if (!objfile || objfile_data (objfile, arm_exidx_data_key) != NULL)\n+  if (!objfile || arm_exidx_data_key.get (objfile) != NULL)\n     return;\n \n   /* Read contents of exception table and index.  */\n@@ -2095,11 +2081,8 @@ arm_exidx_new_objfile (struct objfile *objfile)\n     }\n \n   /* Allocate exception table data structure.  */\n-  data = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct arm_exidx_data);\n-  set_objfile_data (objfile, arm_exidx_data_key, data);\n-  data->section_maps = OBSTACK_CALLOC (&objfile->objfile_obstack,\n-\t\t\t\t       objfile->obfd->section_count,\n-\t\t\t\t       VEC(arm_exidx_entry_s) *);\n+  data = arm_exidx_data_key.emplace (objfile);\n+  data->section_maps.resize (objfile->obfd->section_count);\n \n   /* Fill in exception table.  */\n   for (i = 0; i < exidx_data.size () / 8; i++)\n@@ -2250,9 +2233,8 @@ arm_exidx_new_objfile (struct objfile *objfile)\n \t appear in order of increasing addresses.  */\n       new_exidx_entry.addr = idx;\n       new_exidx_entry.entry = entry;\n-      VEC_safe_push (arm_exidx_entry_s,\n-\t\t     data->section_maps[sec->the_bfd_section->index],\n-\t\t     &new_exidx_entry);\n+      data->section_maps[sec->the_bfd_section->index].push_back\n+\t(new_exidx_entry);\n     }\n }\n \n@@ -2269,43 +2251,37 @@ arm_find_exidx_entry (CORE_ADDR memaddr, CORE_ADDR *start)\n   if (sec != NULL)\n     {\n       struct arm_exidx_data *data;\n-      VEC(arm_exidx_entry_s) *map;\n       struct arm_exidx_entry map_key = { memaddr - obj_section_addr (sec), 0 };\n-      unsigned int idx;\n \n-      data = ((struct arm_exidx_data *)\n-\t      objfile_data (sec->objfile, arm_exidx_data_key));\n+      data = arm_exidx_data_key.get (sec->objfile);\n       if (data != NULL)\n \t{\n-\t  map = data->section_maps[sec->the_bfd_section->index];\n-\t  if (!VEC_empty (arm_exidx_entry_s, map))\n+\t  std::vector<arm_exidx_entry> &map\n+\t    = data->section_maps[sec->the_bfd_section->index];\n+\t  if (!map.empty ())\n \t    {\n-\t      struct arm_exidx_entry *map_sym;\n-\n-\t      idx = VEC_lower_bound (arm_exidx_entry_s, map, &map_key,\n-\t\t\t\t     arm_compare_exidx_entries);\n+\t      auto idx = std::lower_bound (map.begin (), map.end (), map_key);\n \n-\t      /* VEC_lower_bound finds the earliest ordered insertion\n+\t      /* std::lower_bound finds the earliest ordered insertion\n \t\t point.  If the following symbol starts at this exact\n \t\t address, we use that; otherwise, the preceding\n \t\t exception table entry covers this address.  */\n-\t      if (idx < VEC_length (arm_exidx_entry_s, map))\n+\t      if (idx < map.end ())\n \t\t{\n-\t\t  map_sym = VEC_index (arm_exidx_entry_s, map, idx);\n-\t\t  if (map_sym->addr == map_key.addr)\n+\t\t  if (idx->addr == map_key.addr)\n \t\t    {\n \t\t      if (start)\n-\t\t\t*start = map_sym->addr + obj_section_addr (sec);\n-\t\t      return map_sym->entry;\n+\t\t\t*start = idx->addr + obj_section_addr (sec);\n+\t\t      return idx->entry;\n \t\t    }\n \t\t}\n \n-\t      if (idx > 0)\n+\t      if (idx > map.begin ())\n \t\t{\n-\t\t  map_sym = VEC_index (arm_exidx_entry_s, map, idx - 1);\n+\t\t  idx = idx - 1;\n \t\t  if (start)\n-\t\t    *start = map_sym->addr + obj_section_addr (sec);\n-\t\t  return map_sym->entry;\n+\t\t    *start = idx->addr + obj_section_addr (sec);\n+\t\t  return idx->entry;\n \t\t}\n \t    }\n \t}\n@@ -9461,8 +9437,6 @@ _initialize_arm_tdep (void)\n \n   /* Add ourselves to objfile event chain.  */\n   gdb::observers::new_objfile.attach (arm_exidx_new_objfile);\n-  arm_exidx_data_key\n-    = register_objfile_data_with_cleanup (NULL, arm_exidx_data_free);\n \n   /* Register an ELF OS ABI sniffer for ARM binaries.  */\n   gdbarch_register_osabi_sniffer (bfd_arch_arm,"
    }
  ]
}