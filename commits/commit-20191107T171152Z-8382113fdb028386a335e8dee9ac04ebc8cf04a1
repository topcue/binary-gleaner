{
  "sha": "8382113fdb028386a335e8dee9ac04ebc8cf04a1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODM4MjExM2ZkYjAyODM4NmEzMzVlOGRlZTlhYzA0ZWJjOGNmMDRhMQ==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T17:10:01Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T17:11:52Z"
    },
    "message": "[binutils][aarch64] Matrix Multiply extension enablement [8/X]\n\nHi,\n\nThis patch is part of a series that adds support for Armv8.6-A\n(Matrix Multiply and BFloat16 extensions) to binutils.\n\nThis patch introduces the Matrix Multiply (Int8, F32, F64) extensions\nto the aarch64 backend.\n\nThe following instructions are added: {s/u}mmla, usmmla, {us/su}dot,\nfmmla, ld1rob, ld1roh, d1row, ld1rod, uzip{1/2}, trn{1/2}.\n\nCommitted on behalf of Mihail Ionescu.\n\ngas/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/tc-aarch64.c: Add new arch fetures to suppport the mm extension.\n\t(parse_operands): Add new operand.\n\t* testsuite/gas/aarch64/i8mm.s: New test.\n\t* testsuite/gas/aarch64/i8mm.d: New test.\n\t* testsuite/gas/aarch64/f32mm.s: New test.\n\t* testsuite/gas/aarch64/f32mm.d: New test.\n\t* testsuite/gas/aarch64/f64mm.s: New test.\n\t* testsuite/gas/aarch64/f64mm.d: New test.\n\t* testsuite/gas/aarch64/sve-movprfx-mm.s: New test.\n\t* testsuite/gas/aarch64/sve-movprfx-mm.d: New test.\n\ninclude/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* opcode/aarch64.h (AARCH64_FEATURE_I8MM): New.\n\t(AARCH64_FEATURE_F32MM): New.\n\t(AARCH64_FEATURE_F64MM): New.\n\t(AARCH64_OPND_SVE_ADDR_RI_S4x32): New.\n\t(enum aarch64_insn_class): Add new instruction class \"aarch64_misc\" for\n\tinstructions that do not require special handling.\n\nopcodes/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* aarch64-tbl.h (aarch64_feature_i8mm_sve, aarch64_feature_f32mm_sve,\n\taarch64_feature_f64mm_sve, aarch64_feature_i8mm, aarch64_feature_f32mm,\n\taarch64_feature_f64mm): New feature sets.\n\t(INT8MATMUL_INSN, F64MATMUL_SVE_INSN, F64MATMUL_INSN,\n\tF32MATMUL_SVE_INSN, F32MATMUL_INSN): New macros to define matrix multiply\n\tinstructions.\n\t(I8MM_SVE, F32MM_SVE, F64MM_SVE, I8MM, F32MM, F64MM): New feature set\n\tmacros.\n\t(QL_MMLA64, OP_SVE_SBB): New qualifiers.\n\t(OP_SVE_QQQ): New qualifier.\n\t(INT8MATMUL_SVE_INSNC, F64MATMUL_SVE_INSNC,\n\tF32MATMUL_SVE_INSNC): New feature set for bfloat16 instructions to support\n\tthe movprfx constraint.\n\t(aarch64_opcode_table): Support for SVE_ADDR_RI_S4x32.\n\t(aarch64_opcode_table): Define new instructions smmla,\n\tummla, usmmla, usdot, sudot, fmmla, ld1rob, ld1roh, ld1row, ld1rod\n\tuzip{1/2}, trn{1/2}.\n\t* aarch64-opc.c (operand_general_constraint_met_p): Handle\n\tAARCH64_OPND_SVE_ADDR_RI_S4x32.\n\t(aarch64_print_operand): Handle AARCH64_OPND_SVE_ADDR_RI_S4x32.\n\t* aarch64-dis-2.c (aarch64_opcode_lookup_1, aarch64_find_next_opcode):\n\tAccount for new instructions.\n\t* opcodes/aarch64-asm-2.c (aarch64_insert_operand): Support the new\n\tS4x32 operand.\n\t* aarch64-opc-2.c (aarch64_operands): Support the new S4x32 operand.\n\nRegression tested on arm-none-eabi.\n\nIs it ok for trunk?\n\nRegards,\nMihail",
    "tree": {
      "sha": "c2e565fa25ec35788e5b2dbc3212629a3218ee64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c2e565fa25ec35788e5b2dbc3212629a3218ee64"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8382113fdb028386a335e8dee9ac04ebc8cf04a1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8382113fdb028386a335e8dee9ac04ebc8cf04a1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8382113fdb028386a335e8dee9ac04ebc8cf04a1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8382113fdb028386a335e8dee9ac04ebc8cf04a1/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eb5bbc482128b08d2ee8a2470951a74d8351146f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb5bbc482128b08d2ee8a2470951a74d8351146f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eb5bbc482128b08d2ee8a2470951a74d8351146f"
    }
  ],
  "stats": {
    "total": 1710,
    "additions": 1236,
    "deletions": 474
  },
  "files": [
    {
      "sha": "1d835b6fdef9d6411b4f7a37893e886c55a39f4d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -1,3 +1,16 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/tc-aarch64.c: Add new arch fetures to suppport the mm extension.\n+\t(parse_operands): Add new operand.\n+\t* testsuite/gas/aarch64/i8mm.s: New test.\n+\t* testsuite/gas/aarch64/i8mm.d: New test.\n+\t* testsuite/gas/aarch64/f32mm.s: New test.\n+\t* testsuite/gas/aarch64/f32mm.d: New test.\n+\t* testsuite/gas/aarch64/f64mm.s: New test.\n+\t* testsuite/gas/aarch64/f64mm.d: New test.\n+\t* testsuite/gas/aarch64/sve-movprfx-mm.s: New test.\n+\t* testsuite/gas/aarch64/sve-movprfx-mm.d: New test.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Barnaby Wilks  <barnaby.wilks@arm.com>\n "
    },
    {
      "sha": "77a9189e7a46117f70d25b753af743956c764ecd",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -6433,6 +6433,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  break;\n \n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x16:\n+\tcase AARCH64_OPND_SVE_ADDR_RI_S4x32:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x2xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x3xVL:\n@@ -9058,6 +9059,12 @@ static const struct aarch64_option_cpu_value_table aarch64_features[] = {\n \t\t\tAARCH64_FEATURE (AARCH64_FEATURE_SVE2, 0)},\n   {\"bf16\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_BFLOAT16, 0),\n \t\t\tAARCH64_ARCH_NONE},\n+  {\"i8mm\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_I8MM, 0),\n+\t\t\tAARCH64_ARCH_NONE},\n+  {\"f32mm\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_F32MM, 0),\n+\t\t\tAARCH64_ARCH_NONE},\n+  {\"f64mm\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_F64MM, 0),\n+\t\t\tAARCH64_ARCH_NONE},\n   {NULL,\t\tAARCH64_ARCH_NONE, AARCH64_ARCH_NONE},\n };\n "
    },
    {
      "sha": "056f23decc1bc3fa67698b2ba983510fdc45194e",
      "filename": "gas/doc/c-aarch64.texi",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/doc/c-aarch64.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/doc/c-aarch64.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-aarch64.texi?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -144,6 +144,12 @@ automatically cause those extensions to be disabled.\n @multitable @columnfractions .12 .17 .17 .54\n @headitem Extension @tab Minimum Architecture @tab Enabled by default\n  @tab Description\n+@item @code{i8mm} @tab ARMv8.2-A @tab ARMv8.6-A or later\n+ @tab Enable Int8 Matrix Multiply extension.\n+@item @code{f32mm} @tab ARMv8.2-A @tab No\n+ @tab Enable F32 Matrix Multiply extension.\n+@item @code{f64mm} @tab ARMv8.2-A @tab No\n+ @tab Enable F64 Matrix Multiply extension.\n @item @code{bf16} @tab ARMv8.2-A @tab ARMv8.6-A or later\n  @tab Enable BFloat16 extension.\n @item @code{compnum} @tab ARMv8.2-A @tab ARMv8.3-A or later"
    },
    {
      "sha": "8f1cdffa5ec3973c6208d4f081cc26b2251c3eca",
      "filename": "gas/testsuite/gas/aarch64/f32mm.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f32mm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f32mm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/f32mm.d?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,11 @@\n+#as: -march=armv8.6-a+sve+f32mm\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0000000000000000 <\\.text>:\n+ *[0-9a-f]+:\t64bbe6b1 \tfmmla\tz17\\.s, z21\\.s, z27\\.s\n+ *[0-9a-f]+:\t64a0e400 \tfmmla\tz0\\.s, z0\\.s, z0\\.s"
    },
    {
      "sha": "6e6b32b0bf72391edf229d30d7fbc1bfbf98bb63",
      "filename": "gas/testsuite/gas/aarch64/f32mm.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f32mm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f32mm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/f32mm.s?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,12 @@\n+/* The instructions with non-zero register numbers are there to ensure we have\n+   the correct argument positioning (i.e. check that the first argument is at\n+   the end of the word etc).\n+   The instructions with all-zero register numbers are to ensure the previous\n+   encoding didn't just \"happen\" to fit -- so that if we change the registers\n+   that changes the correct part of the word.\n+   Each of the numbered patterns begin and end with a 1, so we can replace\n+   them with all-zeros and see the entire range has changed. */\n+\n+// SVE\n+fmmla\tz17.s,  z21.s,  z27.s\n+fmmla\tz0.s,  z0.s,  z0.s"
    },
    {
      "sha": "9540c136c82cfaeffa326121d643ca37de714aa2",
      "filename": "gas/testsuite/gas/aarch64/f64mm.d",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f64mm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f64mm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/f64mm.d?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,62 @@\n+#as: -march=armv8.6-a+sve+f64mm\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0000000000000000 <\\.text>:\n+ *[0-9a-f]+:\t64dbe6b1 \tfmmla\tz17\\.d, z21\\.d, z27\\.d\n+ *[0-9a-f]+:\t64c0e400 \tfmmla\tz0\\.d, z0\\.d, z0\\.d\n+ *[0-9a-f]+:\ta43b17f1 \tld1rob\t{z17\\.b}, p5/z, \\[sp, x27\\]\n+ *[0-9a-f]+:\ta42003e0 \tld1rob\t{z0\\.b}, p0/z, \\[sp, x0\\]\n+ *[0-9a-f]+:\ta4bb17f1 \tld1roh\t{z17\\.h}, p5/z, \\[sp, x27\\]\n+ *[0-9a-f]+:\ta4a003e0 \tld1roh\t{z0\\.h}, p0/z, \\[sp, x0\\]\n+ *[0-9a-f]+:\ta53b17f1 \tld1row\t{z17\\.s}, p5/z, \\[sp, x27\\]\n+ *[0-9a-f]+:\ta52003e0 \tld1row\t{z0\\.s}, p0/z, \\[sp, x0\\]\n+ *[0-9a-f]+:\ta5bb17f1 \tld1rod\t{z17\\.d}, p5/z, \\[sp, x27\\]\n+ *[0-9a-f]+:\ta5a003e0 \tld1rod\t{z0\\.d}, p0/z, \\[sp, x0\\]\n+ *[0-9a-f]+:\ta43b1411 \tld1rob\t{z17\\.b}, p5/z, \\[x0, x27\\]\n+ *[0-9a-f]+:\ta4200000 \tld1rob\t{z0\\.b}, p0/z, \\[x0, x0\\]\n+ *[0-9a-f]+:\ta4bb1411 \tld1roh\t{z17\\.h}, p5/z, \\[x0, x27\\]\n+ *[0-9a-f]+:\ta4a00000 \tld1roh\t{z0\\.h}, p0/z, \\[x0, x0\\]\n+ *[0-9a-f]+:\ta53b1411 \tld1row\t{z17\\.s}, p5/z, \\[x0, x27\\]\n+ *[0-9a-f]+:\ta5200000 \tld1row\t{z0\\.s}, p0/z, \\[x0, x0\\]\n+ *[0-9a-f]+:\ta5bb1411 \tld1rod\t{z17\\.d}, p5/z, \\[x0, x27\\]\n+ *[0-9a-f]+:\ta5a00000 \tld1rod\t{z0\\.d}, p0/z, \\[x0, x0\\]\n+ *[0-9a-f]+:\ta42037f1 \tld1rob\t{z17\\.b}, p5/z, \\[sp\\]\n+ *[0-9a-f]+:\ta42723e0 \tld1rob\t{z0\\.b}, p0/z, \\[sp, #224\\]\n+ *[0-9a-f]+:\ta42823e0 \tld1rob\t{z0\\.b}, p0/z, \\[sp, #-256\\]\n+ *[0-9a-f]+:\ta4a037f1 \tld1roh\t{z17\\.h}, p5/z, \\[sp\\]\n+ *[0-9a-f]+:\ta4a723e0 \tld1roh\t{z0\\.h}, p0/z, \\[sp, #224\\]\n+ *[0-9a-f]+:\ta4a823e0 \tld1roh\t{z0\\.h}, p0/z, \\[sp, #-256\\]\n+ *[0-9a-f]+:\ta52037f1 \tld1row\t{z17\\.s}, p5/z, \\[sp\\]\n+ *[0-9a-f]+:\ta52723e0 \tld1row\t{z0\\.s}, p0/z, \\[sp, #224\\]\n+ *[0-9a-f]+:\ta52823e0 \tld1row\t{z0\\.s}, p0/z, \\[sp, #-256\\]\n+ *[0-9a-f]+:\ta5a037f1 \tld1rod\t{z17\\.d}, p5/z, \\[sp\\]\n+ *[0-9a-f]+:\ta5a723e0 \tld1rod\t{z0\\.d}, p0/z, \\[sp, #224\\]\n+ *[0-9a-f]+:\ta5a823e0 \tld1rod\t{z0\\.d}, p0/z, \\[sp, #-256\\]\n+ *[0-9a-f]+:\ta4203411 \tld1rob\t{z17\\.b}, p5/z, \\[x0\\]\n+ *[0-9a-f]+:\ta4272000 \tld1rob\t{z0\\.b}, p0/z, \\[x0, #224\\]\n+ *[0-9a-f]+:\ta4282000 \tld1rob\t{z0\\.b}, p0/z, \\[x0, #-256\\]\n+ *[0-9a-f]+:\ta4a03411 \tld1roh\t{z17\\.h}, p5/z, \\[x0\\]\n+ *[0-9a-f]+:\ta4a72000 \tld1roh\t{z0\\.h}, p0/z, \\[x0, #224\\]\n+ *[0-9a-f]+:\ta4a82000 \tld1roh\t{z0\\.h}, p0/z, \\[x0, #-256\\]\n+ *[0-9a-f]+:\ta5203411 \tld1row\t{z17\\.s}, p5/z, \\[x0\\]\n+ *[0-9a-f]+:\ta5272000 \tld1row\t{z0\\.s}, p0/z, \\[x0, #224\\]\n+ *[0-9a-f]+:\ta5282000 \tld1row\t{z0\\.s}, p0/z, \\[x0, #-256\\]\n+ *[0-9a-f]+:\ta5a03411 \tld1rod\t{z17\\.d}, p5/z, \\[x0\\]\n+ *[0-9a-f]+:\ta5a72000 \tld1rod\t{z0\\.d}, p0/z, \\[x0, #224\\]\n+ *[0-9a-f]+:\ta5a82000 \tld1rod\t{z0\\.d}, p0/z, \\[x0, #-256\\]\n+ *[0-9a-f]+:\t05a502b1 \tzip1\tz17\\.q, z21\\.q, z5\\.q\n+ *[0-9a-f]+:\t05a00000 \tzip1\tz0\\.q, z0\\.q, z0\\.q\n+ *[0-9a-f]+:\t05a506b1 \tzip2\tz17\\.q, z21\\.q, z5\\.q\n+ *[0-9a-f]+:\t05a00400 \tzip2\tz0\\.q, z0\\.q, z0\\.q\n+ *[0-9a-f]+:\t05a50ab1 \tuzip1\tz17\\.q, z21\\.q, z5\\.q\n+ *[0-9a-f]+:\t05a00800 \tuzip1\tz0\\.q, z0\\.q, z0\\.q\n+ *[0-9a-f]+:\t05a50eb1 \tuzip2\tz17\\.q, z21\\.q, z5\\.q\n+ *[0-9a-f]+:\t05a00c00 \tuzip2\tz0\\.q, z0\\.q, z0\\.q\n+ *[0-9a-f]+:\t05a51ab1 \ttrn1\tz17\\.q, z21\\.q, z5\\.q\n+ *[0-9a-f]+:\t05a01800 \ttrn1\tz0\\.q, z0\\.q, z0\\.q\n+ *[0-9a-f]+:\t05a51eb1 \ttrn2\tz17\\.q, z21\\.q, z5\\.q\n+ *[0-9a-f]+:\t05a01c00 \ttrn2\tz0\\.q, z0\\.q, z0\\.q"
    },
    {
      "sha": "fcf662be300311182f44ddd7ccc1ef9ea1e24dd4",
      "filename": "gas/testsuite/gas/aarch64/f64mm.s",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f64mm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/f64mm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/f64mm.s?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,71 @@\n+/* The instructions with non-zero register numbers are there to ensure we have\n+   the correct argument positioning (i.e. check that the first argument is at\n+   the end of the word etc).\n+   The instructions with all-zero register numbers are to ensure the previous\n+   encoding didn't just \"happen\" to fit -- so that if we change the registers\n+   that changes the correct part of the word.\n+   Each of the numbered patterns begin and end with a 1, so we can replace\n+   them with all-zeros and see the entire range has changed. */\n+\n+// SVE\n+fmmla\tz17.d,  z21.d,  z27.d\n+fmmla\tz0.d,  z0.d,  z0.d\n+\n+ld1rob { z17.b }, p5/z, [sp, x27]\n+ld1rob { z0.b }, p0/z, [sp, x0]\n+ld1roh { z17.h }, p5/z, [sp, x27]\n+ld1roh { z0.h }, p0/z, [sp, x0]\n+ld1row { z17.s }, p5/z, [sp, x27]\n+ld1row { z0.s }, p0/z, [sp, x0]\n+ld1rod { z17.d }, p5/z, [sp, x27]\n+ld1rod { z0.d }, p0/z, [sp, x0]\n+\n+ld1rob { z17.b }, p5/z, [x0, x27]\n+ld1rob { z0.b }, p0/z, [x0, x0]\n+ld1roh { z17.h }, p5/z, [x0, x27]\n+ld1roh { z0.h }, p0/z, [x0, x0]\n+ld1row { z17.s }, p5/z, [x0, x27]\n+ld1row { z0.s }, p0/z, [x0, x0]\n+ld1rod { z17.d }, p5/z, [x0, x27]\n+ld1rod { z0.d }, p0/z, [x0, x0]\n+\n+ld1rob { z17.b }, p5/z, [sp, #0]\n+ld1rob { z0.b }, p0/z, [sp, #224]\n+ld1rob { z0.b }, p0/z, [sp, #-256]\n+ld1roh { z17.h }, p5/z, [sp, #0]\n+ld1roh { z0.h }, p0/z, [sp, #224]\n+ld1roh { z0.h }, p0/z, [sp, #-256]\n+ld1row { z17.s }, p5/z, [sp, #0]\n+ld1row { z0.s }, p0/z, [sp, #224]\n+ld1row { z0.s }, p0/z, [sp, #-256]\n+ld1rod { z17.d }, p5/z, [sp, #0]\n+ld1rod { z0.d }, p0/z, [sp, #224]\n+ld1rod { z0.d }, p0/z, [sp, #-256]\n+\n+ld1rob { z17.b }, p5/z, [x0, #0]\n+ld1rob { z0.b }, p0/z, [x0, #224]\n+ld1rob { z0.b }, p0/z, [x0, #-256]\n+ld1roh { z17.h }, p5/z, [x0, #0]\n+ld1roh { z0.h }, p0/z, [x0, #224]\n+ld1roh { z0.h }, p0/z, [x0, #-256]\n+ld1row { z17.s }, p5/z, [x0, #0]\n+ld1row { z0.s }, p0/z, [x0, #224]\n+ld1row { z0.s }, p0/z, [x0, #-256]\n+ld1rod { z17.d }, p5/z, [x0, #0]\n+ld1rod { z0.d }, p0/z, [x0, #224]\n+ld1rod { z0.d }, p0/z, [x0, #-256]\n+\n+zip1 z17.q, z21.q, z5.q\n+zip1 z0.q, z0.q, z0.q\n+zip2 z17.q, z21.q, z5.q\n+zip2 z0.q, z0.q, z0.q\n+\n+uzip1 z17.q, z21.q, z5.q\n+uzip1 z0.q, z0.q, z0.q\n+uzip2 z17.q, z21.q, z5.q\n+uzip2 z0.q, z0.q, z0.q\n+\n+trn1 z17.q, z21.q, z5.q\n+trn1 z0.q, z0.q, z0.q\n+trn2 z17.q, z21.q, z5.q\n+trn2 z0.q, z0.q, z0.q"
    },
    {
      "sha": "14db65f7404ca383c2d57b3e2b9105b5424e38be",
      "filename": "gas/testsuite/gas/aarch64/i8mm.d",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/i8mm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/i8mm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/i8mm.d?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,43 @@\n+#as: -march=armv8.6-a+sve\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0000000000000000 <\\.text>:\n+ *[0-9a-f]+:\t451b9ab1 \tsmmla\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t45009800 \tsmmla\tz0\\.s, z0\\.b, z0\\.b\n+ *[0-9a-f]+:\t45db9ab1 \tummla\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t45c09800 \tummla\tz0\\.s, z0\\.b, z0\\.b\n+ *[0-9a-f]+:\t459b9ab1 \tusmmla\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t45809800 \tusmmla\tz0\\.s, z0\\.b, z0\\.b\n+ *[0-9a-f]+:\t449b7ab1 \tusdot\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t44807800 \tusdot\tz0\\.s, z0\\.b, z0\\.b\n+ *[0-9a-f]+:\t44bf1ab1 \tusdot\tz17\\.s, z21\\.b, z7\\.b\\[3\\]\n+ *[0-9a-f]+:\t44b81800 \tusdot\tz0\\.s, z0\\.b, z0\\.b\\[3\\]\n+ *[0-9a-f]+:\t44a71ab1 \tusdot\tz17\\.s, z21\\.b, z7\\.b\\[0\\]\n+ *[0-9a-f]+:\t44a01800 \tusdot\tz0\\.s, z0\\.b, z0\\.b\\[0\\]\n+ *[0-9a-f]+:\t44bf1eb1 \tsudot\tz17\\.s, z21\\.b, z7\\.b\\[3\\]\n+ *[0-9a-f]+:\t44b81c00 \tsudot\tz0\\.s, z0\\.b, z0\\.b\\[3\\]\n+ *[0-9a-f]+:\t44a71eb1 \tsudot\tz17\\.s, z21\\.b, z7\\.b\\[0\\]\n+ *[0-9a-f]+:\t44a01c00 \tsudot\tz0\\.s, z0\\.b, z0\\.b\\[0\\]\n+ *[0-9a-f]+:\t4e9ba6b1 \tsmmla\tv17\\.4s, v21\\.16b, v27\\.16b\n+ *[0-9a-f]+:\t4e9ba6b1 \tsmmla\tv17\\.4s, v21\\.16b, v27\\.16b\n+ *[0-9a-f]+:\t6e9ba6b1 \tummla\tv17\\.4s, v21\\.16b, v27\\.16b\n+ *[0-9a-f]+:\t6e80a400 \tummla\tv0\\.4s, v0\\.16b, v0\\.16b\n+ *[0-9a-f]+:\t4e80ac00 \tusmmla\tv0\\.4s, v0\\.16b, v0\\.16b\n+ *[0-9a-f]+:\t4e9baeb1 \tusmmla\tv17\\.4s, v21\\.16b, v27\\.16b\n+ *[0-9a-f]+:\t4e9b9eb1 \tusdot\tv17\\.2s, v21\\.8b, v27\\.8b\n+ *[0-9a-f]+:\t4e809c00 \tusdot\tv0\\.2s, v0\\.8b, v0\\.8b\n+ *[0-9a-f]+:\t4e9b9eb1 \tusdot\tv17\\.2s, v21\\.8b, v27\\.8b\n+ *[0-9a-f]+:\t4e809c00 \tusdot\tv0\\.2s, v0\\.8b, v0\\.8b\n+ *[0-9a-f]+:\t4fbbfab1 \tusdot\tv17\\.2s, v21\\.8b, v27\\.4b\\[3\\]\n+ *[0-9a-f]+:\t4fa0f800 \tusdot\tv0\\.2s, v0\\.8b, v0\\.4b\\[3\\]\n+ *[0-9a-f]+:\t4f9bf2b1 \tusdot\tv17\\.2s, v21\\.8b, v27\\.4b\\[0\\]\n+ *[0-9a-f]+:\t4f80f000 \tusdot\tv0\\.2s, v0\\.8b, v0\\.4b\\[0\\]\n+ *[0-9a-f]+:\t4f3bfab1 \tsudot\tv17\\.2s, v21\\.8b, v27\\.4b\\[3\\]\n+ *[0-9a-f]+:\t4f20f800 \tsudot\tv0\\.2s, v0\\.8b, v0\\.4b\\[3\\]\n+ *[0-9a-f]+:\t4f1bf2b1 \tsudot\tv17\\.2s, v21\\.8b, v27\\.4b\\[0\\]\n+ *[0-9a-f]+:\t4f00f000 \tsudot\tv0\\.2s, v0\\.8b, v0\\.4b\\[0\\]"
    },
    {
      "sha": "38f871da331f47540dc31609ec132662c7a8f368",
      "filename": "gas/testsuite/gas/aarch64/i8mm.s",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/i8mm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/i8mm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/i8mm.s?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,56 @@\n+/* The instructions with non-zero register numbers are there to ensure we have\n+   the correct argument positioning (i.e. check that the first argument is at\n+   the end of the word etc).\n+   The instructions with all-zero register numbers are to ensure the previous\n+   encoding didn't just \"happen\" to fit -- so that if we change the registers\n+   that changes the correct part of the word.\n+   Each of the numbered patterns begin and end with a 1, so we can replace\n+   them with all-zeros and see the entire range has changed. */\n+\n+// SVE\n+smmla z17.s,  z21.b,  z27.b\n+smmla z0.s,  z0.b,  z0.b\n+\n+ummla z17.s,  z21.b,  z27.b\n+ummla z0.s,  z0.b,  z0.b\n+\n+usmmla z17.s,  z21.b,  z27.b\n+usmmla z0.s,  z0.b,  z0.b\n+\n+usdot\tz17.s,  z21.b,  z27.b\n+usdot\tz0.s,  z0.b,  z0.b\n+\n+usdot\tz17.s,  z21.b,  z7.b[3]\n+usdot\tz0.s,  z0.b,  z0.b[3]\n+usdot\tz17.s,  z21.b,  z7.b[0]\n+usdot\tz0.s,  z0.b,  z0.b[0]\n+\n+sudot\tz17.s,  z21.b,  z7.b[3]\n+sudot\tz0.s,  z0.b,  z0.b[3]\n+sudot\tz17.s,  z21.b,  z7.b[0]\n+sudot\tz0.s,  z0.b,  z0.b[0]\n+\n+// SIMD\n+smmla\tv17.4s, v21.16b, v27.16b\n+smmla\tv17.4s, v21.16b, v27.16b\n+\n+ummla\tv17.4s, v21.16b, v27.16b\n+ummla\tv0.4s, v0.16b, v0.16b\n+\n+usmmla\tv0.4s, v0.16b, v0.16b\n+usmmla\tv17.4s, v21.16b, v27.16b\n+\n+usdot\tv17.2s, v21.8b, v27.8b\n+usdot\tv0.2s, v0.8b, v0.8b\n+usdot\tv17.4s, v21.16b, v27.16b\n+usdot\tv0.4s, v0.16b, v0.16b\n+\n+usdot\tv17.2s, v21.8b, v27.4b[3]\n+usdot\tv0.2s, v0.8b, v0.4b[3]\n+usdot\tv17.2s, v21.8b, v27.4b[0]\n+usdot\tv0.2s, v0.8b, v0.4b[0]\n+\n+sudot\tv17.4s, v21.16b, v27.4b[3]\n+sudot\tv0.4s, v0.16b, v0.4b[3]\n+sudot\tv17.4s, v21.16b, v27.4b[0]\n+sudot\tv0.4s, v0.16b, v0.4b[0]"
    },
    {
      "sha": "197f69fae84949bc73e3919ea01f3d730995b2ff",
      "filename": "gas/testsuite/gas/aarch64/sve-movprfx-mm.d",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/sve-movprfx-mm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/sve-movprfx-mm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sve-movprfx-mm.d?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,24 @@\n+#as: -march=armv8.6-a+f32mm+f64mm+sve\n+#objdump: -dr\n+\n+.* file format .*\n+\n+Disassembly of section \\.text:\n+\n+0000000000000000 <\\.text>:\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t451b9ab1 \tsmmla\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t45db9ab1 \tummla\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t459b9ab1 \tusmmla\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t449b7ab1 \tusdot\tz17\\.s, z21\\.b, z27\\.b\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t44bf1ab1 \tusdot\tz17\\.s, z21\\.b, z7\\.b\\[3\\]\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t44bf1eb1 \tsudot\tz17\\.s, z21\\.b, z7\\.b\\[3\\]\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t64bbe6b1 \tfmmla\tz17\\.s, z21\\.s, z27\\.s\n+ *[0-9a-f]+:\t0420bc11 \tmovprfx\tz17, z0\n+ *[0-9a-f]+:\t64dbe6b1 \tfmmla\tz17\\.d, z21\\.d, z27\\.d"
    },
    {
      "sha": "6af5844ccc3a8d5a0f2f672d7a575cfe88fa0f6e",
      "filename": "gas/testsuite/gas/aarch64/sve-movprfx-mm.s",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/sve-movprfx-mm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/gas/testsuite/gas/aarch64/sve-movprfx-mm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sve-movprfx-mm.s?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -0,0 +1,25 @@\n+/* MOVPRFX tests for matrix multiply instructions */\n+\n+movprfx z17, z0\n+smmla z17.s,  z21.b,  z27.b\n+\n+movprfx z17, z0\n+ummla z17.s,  z21.b,  z27.b\n+\n+movprfx z17, z0\n+usmmla z17.s,  z21.b,  z27.b\n+\n+movprfx z17, z0\n+usdot\tz17.s,  z21.b,  z27.b\n+\n+movprfx z17, z0\n+usdot\tz17.s,  z21.b,  z7.b[3]\n+\n+movprfx z17, z0\n+sudot\tz17.s,  z21.b,  z7.b[3]\n+\n+movprfx z17, z0\n+fmmla\tz17.s,  z21.s,  z27.s\n+\n+movprfx z17, z0\n+fmmla\tz17.d,  z21.d,  z27.d"
    },
    {
      "sha": "2543e095b8f2e14281f76e2cf4add036b0da4985",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -1,3 +1,12 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* opcode/aarch64.h (AARCH64_FEATURE_I8MM): New.\n+\t(AARCH64_FEATURE_F32MM): New.\n+\t(AARCH64_FEATURE_F64MM): New.\n+\t(AARCH64_OPND_SVE_ADDR_RI_S4x32): New.\n+\t(enum aarch64_insn_class): Add new instruction class \"aarch64_misc\" for\n+\tinstructions that do not require special handling.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "d9f3d097c87ed04504040ffdff70c360f4113dea",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -91,6 +91,11 @@ typedef uint32_t aarch64_insn;\n /* Transactional Memory Extension.  */\n #define AARCH64_FEATURE_TME\t\t0x2000000000000ULL\n \n+/* Matrix Multiply instructions */\n+#define AARCH64_FEATURE_I8MM\t\t0x10000000000000ULL\n+#define AARCH64_FEATURE_F32MM\t\t0x20000000000000ULL\n+#define AARCH64_FEATURE_F64MM\t\t0x40000000000000ULL\n+\n /* SVE2 instructions.  */\n #define AARCH64_FEATURE_SVE2\t\t0x000000010\n #define AARCH64_FEATURE_SVE2_AES\t\t0x000000080\n@@ -133,7 +138,8 @@ typedef uint32_t aarch64_insn;\n \t\t\t\t\t\t | AARCH64_FEATURE_SSBS)\n #define AARCH64_ARCH_V8_6\tAARCH64_FEATURE (AARCH64_ARCH_V8_5,\t\\\n \t\t\t\t\t\t AARCH64_FEATURE_V8_6   \\\n-\t\t\t\t\t\t | AARCH64_FEATURE_BFLOAT16)\n+\t\t\t\t\t\t | AARCH64_FEATURE_BFLOAT16 \\\n+\t\t\t\t\t\t | AARCH64_FEATURE_I8MM)\n \n #define AARCH64_ARCH_NONE\tAARCH64_FEATURE (0, 0)\n #define AARCH64_ANY\t\tAARCH64_FEATURE (-1, 0)\t/* Any basic core.  */\n@@ -322,6 +328,7 @@ enum aarch64_opnd\n   AARCH64_OPND_BTI_TARGET,\t/* BTI {<target>}.  */\n \n   AARCH64_OPND_SVE_ADDR_RI_S4x16,   /* SVE [<Xn|SP>, #<simm4>*16].  */\n+  AARCH64_OPND_SVE_ADDR_RI_S4x32,   /* SVE [<Xn|SP>, #<simm4>*32].  */\n   AARCH64_OPND_SVE_ADDR_RI_S4xVL,   /* SVE [<Xn|SP>, #<simm4>, MUL VL].  */\n   AARCH64_OPND_SVE_ADDR_RI_S4x2xVL, /* SVE [<Xn|SP>, #<simm4>*2, MUL VL].  */\n   AARCH64_OPND_SVE_ADDR_RI_S4x3xVL, /* SVE [<Xn|SP>, #<simm4>*3, MUL VL].  */\n@@ -520,6 +527,7 @@ enum aarch64_opnd_qualifier\n \n enum aarch64_insn_class\n {\n+  aarch64_misc,\n   addsub_carry,\n   addsub_ext,\n   addsub_imm,"
    },
    {
      "sha": "21372d4b5c972fd501712631c661a5df28f3b356",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -1,3 +1,31 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* aarch64-tbl.h (aarch64_feature_i8mm_sve, aarch64_feature_f32mm_sve,\n+\taarch64_feature_f64mm_sve, aarch64_feature_i8mm, aarch64_feature_f32mm,\n+\taarch64_feature_f64mm): New feature sets.\n+\t(INT8MATMUL_INSN, F64MATMUL_SVE_INSN, F64MATMUL_INSN,\n+\tF32MATMUL_SVE_INSN, F32MATMUL_INSN): New macros to define matrix multiply\n+\tinstructions.\n+\t(I8MM_SVE, F32MM_SVE, F64MM_SVE, I8MM, F32MM, F64MM): New feature set\n+\tmacros.\n+\t(QL_MMLA64, OP_SVE_SBB): New qualifiers.\n+\t(OP_SVE_QQQ): New qualifier.\n+\t(INT8MATMUL_SVE_INSNC, F64MATMUL_SVE_INSNC,\n+\tF32MATMUL_SVE_INSNC): New feature set for bfloat16 instructions to support\n+\tthe movprfx constraint.\n+\t(aarch64_opcode_table): Support for SVE_ADDR_RI_S4x32.\n+\t(aarch64_opcode_table): Define new instructions smmla,\n+\tummla, usmmla, usdot, sudot, fmmla, ld1rob, ld1roh, ld1row, ld1rod,\n+\tuzip{1/2}, trn{1/2}.\n+\t* aarch64-opc.c (operand_general_constraint_met_p): Handle\n+\tAARCH64_OPND_SVE_ADDR_RI_S4x32.\n+\t(aarch64_print_operand): Handle AARCH64_OPND_SVE_ADDR_RI_S4x32.\n+\t* aarch64-dis-2.c (aarch64_opcode_lookup_1, aarch64_find_next_opcode):\n+\tAccount for new instructions.\n+\t* opcodes/aarch64-asm-2.c (aarch64_insert_operand): Support the new\n+\tS4x32 operand.\n+\t* aarch64-opc-2.c (aarch64_operands): Support the new S4x32 operand.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "3fa081a6ea19c6709a5a3fb5e028b39db75aa95f",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 39,
      "deletions": 38,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -628,7 +628,6 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 162:\n     case 163:\n     case 164:\n     case 165:\n@@ -638,7 +637,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 169:\n     case 170:\n     case 171:\n-    case 186:\n+    case 172:\n     case 187:\n     case 188:\n     case 189:\n@@ -647,8 +646,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 192:\n     case 193:\n     case 194:\n-    case 200:\n-    case 203:\n+    case 195:\n+    case 201:\n+    case 204:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 14:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -660,7 +660,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 206:\n+    case 207:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -694,17 +694,17 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 80:\n     case 81:\n     case 82:\n-    case 159:\n-    case 161:\n-    case 178:\n+    case 160:\n+    case 162:\n     case 179:\n     case 180:\n     case 181:\n     case 182:\n     case 183:\n     case 184:\n     case 185:\n-    case 205:\n+    case 186:\n+    case 206:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -714,10 +714,10 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 47:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n     case 51:\n-    case 149:\n+    case 150:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n     case 68:\n-    case 157:\n+    case 158:\n       return aarch64_ins_limm (self, info, code, inst, errors);\n     case 69:\n       return aarch64_ins_aimm (self, info, code, inst, errors);\n@@ -727,11 +727,11 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n     case 73:\n     case 74:\n-    case 154:\n+    case 155:\n       return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n-    case 153:\n-    case 155:\n+    case 154:\n+    case 156:\n       return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n     case 77:\n@@ -774,22 +774,22 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 106:\n       return aarch64_ins_hint (self, info, code, inst, errors);\n     case 107:\n-      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 108:\n+      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 109:\n     case 110:\n     case 111:\n-      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 112:\n-      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 113:\n-      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n     case 114:\n+      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n     case 115:\n     case 116:\n     case 117:\n-      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 118:\n+      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 119:\n     case 120:\n     case 121:\n@@ -803,61 +803,62 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 129:\n     case 130:\n     case 131:\n-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 132:\n+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 133:\n     case 134:\n     case 135:\n     case 136:\n     case 137:\n     case 138:\n     case 139:\n-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 140:\n+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 141:\n     case 142:\n     case 143:\n-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 144:\n-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 145:\n-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 146:\n-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 147:\n-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 148:\n+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+    case 149:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 150:\n-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 151:\n-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 152:\n+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+    case 153:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 156:\n+    case 157:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 158:\n+    case 159:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 160:\n+    case 161:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 172:\n     case 173:\n     case 174:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 175:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 176:\n     case 177:\n+    case 178:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 195:\n     case 196:\n     case 197:\n     case 198:\n     case 199:\n+    case 200:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 201:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 202:\n-    case 204:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 203:\n+    case 205:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "a27f7245e12a1becd0e2670db6f41ad2e00fd80f",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 744,
      "deletions": 435,
      "changes": 1179,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1"
    },
    {
      "sha": "46af2c2ace5bb45b7ef11a06f55e0d520933786f",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -132,6 +132,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SYSTEM, \"BARRIER_PSB\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"the PSB option name CSYNC\"},\n   {AARCH64_OPND_CLASS_SYSTEM, \"BTI\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"BTI targets j/c/jc\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RI_S4x16\", 4 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn}, \"an address with a 4-bit signed offset, multiplied by 16\"},\n+  {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RI_S4x32\", 5 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn}, \"an address with a 4-bit signed offset, multiplied by 32\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RI_S4xVL\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn}, \"an address with a 4-bit signed offset, multiplied by VL\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RI_S4x2xVL\", 1 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn}, \"an address with a 4-bit signed offset, multiplied by 2*VL\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RI_S4x3xVL\", 2 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn}, \"an address with a 4-bit signed offset, multiplied by 3*VL\"},"
    },
    {
      "sha": "11b04b58bbdfb19f0b20447b215079fe1060d1e8",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -1899,6 +1899,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t  break;\n \n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x16:\n+\tcase AARCH64_OPND_SVE_ADDR_RI_S4x32:\n \t  min_value = -8;\n \t  max_value = 7;\n \t  goto sve_imm_offset;\n@@ -3644,6 +3645,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_ADDR_SIMM13:\n     case AARCH64_OPND_ADDR_OFFSET:\n     case AARCH64_OPND_SVE_ADDR_RI_S4x16:\n+    case AARCH64_OPND_SVE_ADDR_RI_S4x32:\n     case AARCH64_OPND_SVE_ADDR_RI_S4xVL:\n     case AARCH64_OPND_SVE_ADDR_RI_S4x2xVL:\n     case AARCH64_OPND_SVE_ADDR_RI_S4x3xVL:"
    },
    {
      "sha": "3d1a06318867d563bee8e5db2a3d81dc4036da97",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8382113fdb028386a335e8dee9ac04ebc8cf04a1/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "patch": "@@ -1519,6 +1519,10 @@\n {                                                       \\\n   QLF3(S_D,S_D,S_D),                                    \\\n }\n+#define OP_SVE_QQQ                                      \\\n+{                                                       \\\n+  QLF3(S_Q,S_Q,S_Q),                                    \\\n+}\n #define OP_SVE_DDDD                                     \\\n {                                                       \\\n   QLF4(S_D,S_D,S_D,S_D),                                \\\n@@ -1663,6 +1667,10 @@\n {                                                       \\\n   QLF3(S_S,P_Z,S_S),                                    \\\n }\n+#define OP_SVE_SBB                                      \\\n+{                                                       \\\n+  QLF3(S_S,S_B,S_B),                                    \\\n+}\n #define OP_SVE_SBBU                                     \\\n {                                                       \\\n   QLF4(S_S,S_B,S_B,NIL),                                \\\n@@ -2272,6 +2280,12 @@\n   QLF3(V_4S, V_8H, S_2H),\\\n }\n \n+/* e.g. SMMLA <Vd>.4S, <Vn>.16B, <Vm>.16B */\n+#define QL_MMLA64      \\\n+{\t\t      \\\n+  QLF3(V_4S, V_16B, V_16B),\\\n+}\n+\n /* e.g. BFMMLA <Vd>.4s, <Vn>.8h, <Vm>.8h */\n #define QL_BFMMLA    \\\n {\t\t      \\\n@@ -2393,6 +2407,17 @@ static const aarch64_feature_set aarch64_feature_sve2bitperm =\n   AARCH64_FEATURE (AARCH64_FEATURE_SVE2 | AARCH64_FEATURE_SVE2_BITPERM, 0);\n static const aarch64_feature_set aarch64_feature_v8_6 =\n   AARCH64_FEATURE (AARCH64_FEATURE_V8_6, 0);\n+static const aarch64_feature_set aarch64_feature_i8mm =\n+  AARCH64_FEATURE (AARCH64_FEATURE_V8_2 | AARCH64_FEATURE_I8MM, 0);\n+static const aarch64_feature_set aarch64_feature_i8mm_sve =\n+  AARCH64_FEATURE (AARCH64_FEATURE_V8_2 | AARCH64_FEATURE_I8MM\n+       | AARCH64_FEATURE_SVE, 0);\n+static const aarch64_feature_set aarch64_feature_f32mm_sve =\n+  AARCH64_FEATURE (AARCH64_FEATURE_V8_2 | AARCH64_FEATURE_F32MM\n+       | AARCH64_FEATURE_SVE, 0);\n+static const aarch64_feature_set aarch64_feature_f64mm_sve =\n+  AARCH64_FEATURE (AARCH64_FEATURE_V8_2 | AARCH64_FEATURE_F64MM\n+       | AARCH64_FEATURE_SVE, 0);\n \n \n #define CORE\t\t&aarch64_feature_v8\n@@ -2435,8 +2460,13 @@ static const aarch64_feature_set aarch64_feature_v8_6 =\n #define SVE2_SM4\t\t&aarch64_feature_sve2sm4\n #define SVE2_BITPERM\t&aarch64_feature_sve2bitperm\n #define ARMV8_6\t\t&aarch64_feature_v8_6\n+#define ARMV8_6_SVE\t\t&aarch64_feature_v8_6\n #define BFLOAT16_SVE\t&aarch64_feature_bfloat16_sve\n #define BFLOAT16\t&aarch64_feature_bfloat16\n+#define I8MM_SVE      &aarch64_feature_i8mm_sve\n+#define F32MM_SVE     &aarch64_feature_f32mm_sve\n+#define F64MM_SVE     &aarch64_feature_f64mm_sve\n+#define I8MM      &aarch64_feature_i8mm\n \n #define CORE_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, OP, CORE, OPS, QUALS, FLAGS, 0, 0, NULL }\n@@ -2534,6 +2564,16 @@ static const aarch64_feature_set aarch64_feature_v8_6 =\n     CONSTRAINTS, TIED, NULL }\n #define BFLOAT16_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, 0, BFLOAT16, OPS, QUALS, FLAGS, 0, 0, NULL }\n+#define INT8MATMUL_SVE_INSNC(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS, CONSTRAINTS, TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, I8MM_SVE, OPS, QUALS, FLAGS, CONSTRAINTS, TIED, NULL }\n+#define INT8MATMUL_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, I8MM, OPS, QUALS, FLAGS, 0, 0, NULL }\n+#define F64MATMUL_SVE_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS,TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, F64MM_SVE, OPS, QUALS, FLAGS, 0, TIED, NULL }\n+#define F64MATMUL_SVE_INSNC(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS, CONSTRAINTS, TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, F64MM_SVE, OPS, QUALS, FLAGS, CONSTRAINTS, TIED, NULL }\n+#define F32MATMUL_SVE_INSNC(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS, CONSTRAINTS, TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, F32MM_SVE, OPS, QUALS, FLAGS, CONSTRAINTS, TIED, NULL }\n \n struct aarch64_opcode aarch64_opcode_table[] =\n {\n@@ -5032,6 +5072,37 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   V8_4_INSN (\"stlur\",    0xd9000000, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_OFFSET), QL_STLX, 0),\n   V8_4_INSN (\"ldapur\",   0xd9400000, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_OFFSET), QL_STLX, 0),\n \n+  /* Matrix Multiply instructions.  */\n+  INT8MATMUL_SVE_INSNC (\"smmla\",  0x45009800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SBB, 0, C_SCAN_MOVPRFX, 0),\n+  INT8MATMUL_SVE_INSNC (\"ummla\",  0x45c09800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SBB, 0, C_SCAN_MOVPRFX, 0),\n+  INT8MATMUL_SVE_INSNC (\"usmmla\", 0x45809800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SBB, 0, C_SCAN_MOVPRFX, 0),\n+  INT8MATMUL_SVE_INSNC (\"usdot\",  0x44807800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SBB, 0, C_SCAN_MOVPRFX, 0),\n+  INT8MATMUL_SVE_INSNC (\"usdot\",  0x44a01800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm3_INDEX), OP_SVE_SBB, 0, C_SCAN_MOVPRFX, 0),\n+  INT8MATMUL_SVE_INSNC (\"sudot\",  0x44a01c00, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm3_INDEX), OP_SVE_SBB, 0, C_SCAN_MOVPRFX, 0),\n+  F32MATMUL_SVE_INSNC (\"fmmla\",   0x64a0e400, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_S, 0, C_SCAN_MOVPRFX, 0),\n+  F64MATMUL_SVE_INSNC (\"fmmla\",   0x64c0e400, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_D, 0, C_SCAN_MOVPRFX, 0),\n+  F64MATMUL_SVE_INSN (\"ld1rob\",  0xa4200000, 0xffe0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RX),  OP_SVE_BZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1roh\",  0xa4a00000, 0xffe0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RX),  OP_SVE_HZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1row\",  0xa5200000, 0xffe0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RX),  OP_SVE_SZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1rod\",  0xa5a00000, 0xffe0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RX),  OP_SVE_DZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1rob\",  0xa4202000, 0xfff0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RI_S4x32), OP_SVE_BZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1roh\",  0xa4a02000, 0xfff0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RI_S4x32), OP_SVE_HZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1row\",  0xa5202000, 0xfff0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RI_S4x32), OP_SVE_SZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"ld1rod\",  0xa5a02000, 0xfff0e000, sve_misc, OP3 (SVE_ZtxN, SVE_Pg3, SVE_ADDR_RI_S4x32), OP_SVE_DZU, F_OD(1), 0),\n+  F64MATMUL_SVE_INSN (\"zip1\",    0x05a00000, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_QQQ, 0, 0),\n+  F64MATMUL_SVE_INSN (\"zip2\",    0x05a00400, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_QQQ, 0, 0),\n+  F64MATMUL_SVE_INSN (\"uzip1\",   0x05a00800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_QQQ, 0, 0),\n+  F64MATMUL_SVE_INSN (\"uzip2\",   0x05a00c00, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_QQQ, 0, 0),\n+  F64MATMUL_SVE_INSN (\"trn1\",    0x05a01800, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_QQQ, 0, 0),\n+  F64MATMUL_SVE_INSN (\"trn2\",    0x05a01c00, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_QQQ, 0, 0),\n+  /* Matrix Multiply advanced SIMD instructions.  */\n+  INT8MATMUL_INSN (\"smmla\",  0x4e80a400, 0xffe0fc00, aarch64_misc, OP3 (Vd, Vn, Vm), QL_MMLA64, 0),\n+  INT8MATMUL_INSN (\"ummla\",  0x6e80a400, 0xffe0fc00, aarch64_misc, OP3 (Vd, Vn, Vm), QL_MMLA64, 0),\n+  INT8MATMUL_INSN (\"usmmla\", 0x4e80ac00, 0xffe0fc00, aarch64_misc, OP3 (Vd, Vn, Vm), QL_MMLA64, 0),\n+  INT8MATMUL_INSN (\"usdot\",  0x4e809c00, 0xffe0fc00, aarch64_misc, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n+  INT8MATMUL_INSN (\"usdot\",  0x4f80f000, 0xffc0f400, dotproduct, OP3 (Vd, Vn, Em), QL_V2DOT, F_SIZEQ),\n+  INT8MATMUL_INSN (\"sudot\",  0x4f00f000, 0xffc0f400, dotproduct, OP3 (Vd, Vn, Em), QL_V2DOT, F_SIZEQ),\n+\n   /* BFloat instructions.  */\n   BFLOAT16_SVE_INSNC (\"bfdot\",  0x64608000, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n   BFLOAT16_SVE_INSNC (\"bfdot\",  0x64604000, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm3_INDEX), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n@@ -5263,6 +5334,9 @@ struct aarch64_opcode aarch64_opcode_table[] =\n     Y(ADDRESS, sve_addr_ri_s4, \"SVE_ADDR_RI_S4x16\",\t\t\t\\\n       4 << OPD_F_OD_LSB, F(FLD_Rn),\t\t\t\t\t\\\n       \"an address with a 4-bit signed offset, multiplied by 16\")\t\\\n+    Y(ADDRESS, sve_addr_ri_s4, \"SVE_ADDR_RI_S4x32\",\t\t\t\\\n+      5 << OPD_F_OD_LSB, F(FLD_Rn),\t\t\t\t\t\\\n+      \"an address with a 4-bit signed offset, multiplied by 32\")\t\\\n     Y(ADDRESS, sve_addr_ri_s4xvl, \"SVE_ADDR_RI_S4xVL\",\t\t\t\\\n       0 << OPD_F_OD_LSB, F(FLD_Rn),\t\t\t\t\t\\\n       \"an address with a 4-bit signed offset, multiplied by VL\")\t\\"
    }
  ]
}