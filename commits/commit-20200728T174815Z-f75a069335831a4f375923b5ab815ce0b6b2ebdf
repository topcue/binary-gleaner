{
  "sha": "f75a069335831a4f375923b5ab815ce0b6b2ebdf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Zjc1YTA2OTMzNTgzMWE0ZjM3NTkyM2I1YWI4MTVjZTBiNmIyZWJkZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-28T17:48:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-07-28T17:48:15Z"
    },
    "message": "Demangle function names when disassembling\n\nAndrew Burgess pointed out a regression, which he described in\nPR symtab/26270:\n\n================\nAfter commit:\n\n  commit bcfe6157ca288efed127c5efe21ad7924e0d98cf (refs/bisect/bad)\n  Date:   Fri Apr 24 15:35:01 2020 -0600\n\n      Use the linkage name if it exists\n\nThe disassembler no longer demangles function names in its output.  So\nwe see things like this:\n\n  (gdb) disassemble tree_insert\n  Dump of assembler code for function _Z11tree_insertP4nodei:\n    ....\n\nInstead of this:\n\n  (gdb) disassemble tree_insert\n  Dump of assembler code for function tree_insert(node*, int):\n    ....\n\nThis is because find_pc_partial_function now returns the linkage name\nrather than the demangled name.\n================\n\nThis patch fixes the problem by introducing a new \"overload\" of\nfind_pc_partial_function, which returns the general_symbol_info rather\nthan simply the name.  This lets the disassemble command choose which\nname to show.\n\nRegression tested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2020-07-28  Tom Tromey  <tromey@adacore.com>\n\n\tPR symtab/26270:\n\t* symtab.h (find_pc_partial_function_sym): Declare.\n\t* cli/cli-cmds.c (disassemble_command): Use\n\tfind_pc_partial_function_sym.  Check asm_demangle.\n\t* blockframe.c (cache_pc_function_sym): New global.\n\t(cache_pc_function_name): Remove.\n\t(clear_pc_function_cache): Update.\n\t(find_pc_partial_function_sym): New function, from\n\tfind_pc_partial_function.\n\t(find_pc_partial_function): Rewrite using\n\tfind_pc_partial_function_sym.\n\ngdb/testsuite/ChangeLog\n2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\tPR symtab/26270:\n\t* gdb.cp/disasm-func-name.cc: New file.\n\t* gdb.cp/disasm-func-name.exp: New file.",
    "tree": {
      "sha": "f9788692981cbb95e60b1e1bd5cc3be34a301326",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f9788692981cbb95e60b1e1bd5cc3be34a301326"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f75a069335831a4f375923b5ab815ce0b6b2ebdf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f75a069335831a4f375923b5ab815ce0b6b2ebdf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f75a069335831a4f375923b5ab815ce0b6b2ebdf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f75a069335831a4f375923b5ab815ce0b6b2ebdf/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "16f3242c055e2a740dfc42b65cc3509b6ccf71e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/16f3242c055e2a740dfc42b65cc3509b6ccf71e8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/16f3242c055e2a740dfc42b65cc3509b6ccf71e8"
    }
  ],
  "stats": {
    "total": 171,
    "additions": 160,
    "deletions": 11
  },
  "files": [
    {
      "sha": "9a9161561fdeeeea46022eb73209e05a21011582",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -1,3 +1,17 @@\n+2020-07-28  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR symtab/26270:\n+\t* symtab.h (find_pc_partial_function_sym): Declare.\n+\t* cli/cli-cmds.c (disassemble_command): Use\n+\tfind_pc_partial_function_sym.  Check asm_demangle.\n+\t* blockframe.c (cache_pc_function_sym): New global.\n+\t(cache_pc_function_name): Remove.\n+\t(clear_pc_function_cache): Update.\n+\t(find_pc_partial_function_sym): New function, from\n+\tfind_pc_partial_function.\n+\t(find_pc_partial_function): Rewrite using\n+\tfind_pc_partial_function_sym.\n+\n 2020-07-28  Tom Tromey  <tromey@adacore.com>\n \n \t* cli/cli-cmds.c (_initialize_cli_cmds): Rearrange \"disassemble\""
    },
    {
      "sha": "80b769514ebb1d1b5c1fbe02c6e07d1ede6e9ea5",
      "filename": "gdb/blockframe.c",
      "status": "modified",
      "additions": 26,
      "deletions": 10,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/blockframe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/blockframe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/blockframe.c?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -191,7 +191,7 @@ find_pc_sect_containing_function (CORE_ADDR pc, struct obj_section *section)\n \n static CORE_ADDR cache_pc_function_low = 0;\n static CORE_ADDR cache_pc_function_high = 0;\n-static const char *cache_pc_function_name = 0;\n+static const general_symbol_info *cache_pc_function_sym = nullptr;\n static struct obj_section *cache_pc_function_section = NULL;\n static const struct block *cache_pc_function_block = nullptr;\n \n@@ -202,16 +202,18 @@ clear_pc_function_cache (void)\n {\n   cache_pc_function_low = 0;\n   cache_pc_function_high = 0;\n-  cache_pc_function_name = (char *) 0;\n+  cache_pc_function_sym = nullptr;\n   cache_pc_function_section = NULL;\n   cache_pc_function_block = nullptr;\n }\n \n /* See symtab.h.  */\n \n bool\n-find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n-\t\t\t  CORE_ADDR *endaddr, const struct block **block)\n+find_pc_partial_function_sym (CORE_ADDR pc,\n+\t\t\t      const struct general_symbol_info **sym,\n+\t\t\t      CORE_ADDR *address, CORE_ADDR *endaddr,\n+\t\t\t      const struct block **block)\n {\n   struct obj_section *section;\n   struct symbol *f;\n@@ -257,7 +259,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n \t{\n \t  const struct block *b = SYMBOL_BLOCK_VALUE (f);\n \n-\t  cache_pc_function_name = f->linkage_name ();\n+\t  cache_pc_function_sym = f;\n \t  cache_pc_function_section = section;\n \t  cache_pc_function_block = b;\n \n@@ -313,8 +315,8 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n   if (msymbol.minsym == NULL)\n     {\n       /* No available symbol.  */\n-      if (name != NULL)\n-\t*name = 0;\n+      if (sym != nullptr)\n+\t*sym = 0;\n       if (address != NULL)\n \t*address = 0;\n       if (endaddr != NULL)\n@@ -325,7 +327,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n     }\n \n   cache_pc_function_low = BMSYMBOL_VALUE_ADDRESS (msymbol);\n-  cache_pc_function_name = msymbol.minsym->linkage_name ();\n+  cache_pc_function_sym = msymbol.minsym;\n   cache_pc_function_section = section;\n   cache_pc_function_high = minimal_symbol_upper_bound (msymbol);\n   cache_pc_function_block = nullptr;\n@@ -340,8 +342,8 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n \t*address = cache_pc_function_low;\n     }\n \n-  if (name)\n-    *name = cache_pc_function_name;\n+  if (sym != nullptr)\n+    *sym = cache_pc_function_sym;\n \n   if (endaddr)\n     {\n@@ -365,6 +367,20 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n   return true;\n }\n \n+/* See symtab.h.  */\n+\n+bool\n+find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n+\t\t\t  CORE_ADDR *endaddr, const struct block **block)\n+{\n+  const general_symbol_info *gsi;\n+  bool r = find_pc_partial_function_sym (pc, &gsi, address, endaddr, block);\n+  if (name != nullptr)\n+    *name = r ? gsi->linkage_name () : nullptr;\n+  return r;\n+}\n+\n+\n /* See symtab.h.  */\n \n bool"
    },
    {
      "sha": "e3965fea0766fcd0ac9d4d714e2ff03a90488bd8",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -1482,6 +1482,7 @@ disassemble_command (const char *arg, int from_tty)\n {\n   struct gdbarch *gdbarch = get_current_arch ();\n   CORE_ADDR low, high;\n+  const general_symbol_info *symbol = nullptr;\n   const char *name;\n   CORE_ADDR pc;\n   gdb_disassembly_flags flags;\n@@ -1537,8 +1538,14 @@ disassemble_command (const char *arg, int from_tty)\n   if (p[0] == '\\0')\n     {\n       /* One argument.  */\n-      if (find_pc_partial_function (pc, &name, &low, &high, &block) == 0)\n+      if (!find_pc_partial_function_sym (pc, &symbol, &low, &high, &block))\n \terror (_(\"No function contains specified address.\"));\n+\n+      if (asm_demangle)\n+\tname = symbol->print_name ();\n+      else\n+\tname = symbol->linkage_name ();\n+\n #if defined(TUI)\n       /* NOTE: cagney/2003-02-13 The `tui_active' was previously\n \t `tui_version'.  */"
    },
    {
      "sha": "026ffcaa0166e7bfe912e8010e1b28fa6503a6c5",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -1769,6 +1769,14 @@ extern bool find_pc_partial_function (CORE_ADDR pc, const char **name,\n \t\t\t\t      CORE_ADDR *address, CORE_ADDR *endaddr,\n \t\t\t\t      const struct block **block = nullptr);\n \n+/* Like find_pc_partial_function, above, but returns the underlying\n+   general_symbol_info (rather than the name) as an out parameter.  */\n+\n+extern bool find_pc_partial_function_sym\n+  (CORE_ADDR pc, const general_symbol_info **sym,\n+   CORE_ADDR *address, CORE_ADDR *endaddr,\n+   const struct block **block = nullptr);\n+\n /* Like find_pc_partial_function, above, but *ADDRESS and *ENDADDR are\n    set to start and end addresses of the range containing the entry pc.\n "
    },
    {
      "sha": "861438017e02395c4327ae18fecf0f3e410749d8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR symtab/26270:\n+\t* gdb.cp/disasm-func-name.cc: New file.\n+\t* gdb.cp/disasm-func-name.exp: New file.\n+\n 2020-07-28  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.dwarf2/varval.exp (setup_exec): Add 'or' instruction to"
    },
    {
      "sha": "428baf98964060b0c3e724a832c17bb50e7c693f",
      "filename": "gdb/testsuite/gdb.cp/disasm-func-name.cc",
      "status": "added",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/testsuite/gdb.cp/disasm-func-name.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/testsuite/gdb.cp/disasm-func-name.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/disasm-func-name.cc?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -0,0 +1,48 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+class A\n+{\n+private:\n+  int m_i;\n+\n+public:\n+  A(int i);\n+\n+  int get_i () const\n+  { return m_i; }\n+\n+  void set_i (int i)\n+  { m_i = i; }\n+};\n+\n+A::A(int i)\n+  : m_i (i)\n+{ /* Nothing.  */ }\n+\n+void process (A *obj, int num)\n+{\n+  obj->set_i (obj->get_i () + num);\n+}\n+\n+int\n+main (void)\n+{\n+  A a(42);\n+  process (&a, 2);\n+  return a.get_i ();\n+}"
    },
    {
      "sha": "3fb63c89a28d96695071246571ff0ef342835cbc",
      "filename": "gdb/testsuite/gdb.cp/disasm-func-name.exp",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/testsuite/gdb.cp/disasm-func-name.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f75a069335831a4f375923b5ab815ce0b6b2ebdf/gdb/testsuite/gdb.cp/disasm-func-name.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/disasm-func-name.exp?ref=f75a069335831a4f375923b5ab815ce0b6b2ebdf",
      "patch": "@@ -0,0 +1,50 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the gdb testsuite\n+\n+# Test that the disassembler correctly demangles C++ function names in\n+# it's header line.\n+\n+if {[skip_cplus_tests]} { continue }\n+\n+standard_testfile .cc\n+\n+if [get_compiler_info \"c++\"] {\n+    return -1\n+}\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile \\\n+\t $srcfile {debug c++}]} {\n+    return -1\n+}\n+\n+if ![runto_main] then {\n+    perror \"couldn't run to breakpoint\"\n+    continue\n+}\n+\n+proc check_disassembly_header { request expected } {\n+    gdb_test \"disassemble ${request}\" \\\n+\t\"Dump of assembler code for function ${expected}:\\r\\n.*\"\n+}\n+\n+gdb_test_no_output \"set print asm-demangle on\"\n+\n+check_disassembly_header \"main\" \"main\\\\(\\\\)\"\n+check_disassembly_header \"process\" \"process\\\\(A\\\\*, int\\\\)\"\n+check_disassembly_header \"A::A\" \"A::A\\\\(int\\\\)\"\n+check_disassembly_header \"A::get_i\" \"A::get_i\\\\(\\\\) const\"\n+check_disassembly_header \"A::set_i\" \"A::set_i\\\\(int\\\\)\""
    }
  ]
}