{
  "sha": "5f63875b309f3ae9854ac8a12470111b794a70a2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWY2Mzg3NWIzMDlmM2FlOTg1NGFjOGExMjQ3MDExMWI3OTRhNzBhMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-27T02:07:51Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-27T04:38:17Z"
    },
    "message": "Fix failure on powerpc 32-bit only targets\n\nTargets that lack ppc64 support were failing the new prefix-reloc\ntest.  This patch adds some test infrastructure to deal with that, and\nchanges the powerpc gas usage info so that \"-a64\" is omitted when\nunsupported.\n\nI've been meaning to break up the usage message for a long time;\nWhile doing so causes translators some work now, it should make it\neasier next time a new powerpc option is added.\n\n\t* config/tc-ppc.c (is_ppc64_target): New function.\n\t(md_show_usage): Split up usage message.  Don't show -a64 when\n\tunsupported.\n\ttestsuite/gas/ppc/ppc.exp (supports_ppc64): New.\n\t(prefix-reloc): Only run for ppc64.",
    "tree": {
      "sha": "2fb0abfebefff752b4cf82964d4fafed99e3734e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2fb0abfebefff752b4cf82964d4fafed99e3734e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5f63875b309f3ae9854ac8a12470111b794a70a2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f63875b309f3ae9854ac8a12470111b794a70a2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5f63875b309f3ae9854ac8a12470111b794a70a2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f63875b309f3ae9854ac8a12470111b794a70a2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "61dd8e19a8b43037125d4a767f27e98e9181521b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61dd8e19a8b43037125d4a767f27e98e9181521b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/61dd8e19a8b43037125d4a767f27e98e9181521b"
    }
  ],
  "stats": {
    "total": 191,
    "additions": 140,
    "deletions": 51
  },
  "files": [
    {
      "sha": "6ca88da420e54ecae25998359a894a8407e08628",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f63875b309f3ae9854ac8a12470111b794a70a2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f63875b309f3ae9854ac8a12470111b794a70a2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5f63875b309f3ae9854ac8a12470111b794a70a2",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-27  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c (is_ppc64_target): New function.\n+\t(md_show_usage): Split up usage message.  Don't show -a64 when\n+\tunsupported.\n+\ttestsuite/gas/ppc/ppc.exp (supports_ppc64): New.\n+\t(prefix-reloc): Only run for ppc64.\n+\n 2019-05-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/tc-aarch64.c (aarch64_elf_copy_symbol_attributes): Define."
    },
    {
      "sha": "d7090102a29bbc0e7d5b26d1eef0571a7f32d8e3",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 120,
      "deletions": 50,
      "changes": 170,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f63875b309f3ae9854ac8a12470111b794a70a2/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f63875b309f3ae9854ac8a12470111b794a70a2/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=5f63875b309f3ae9854ac8a12470111b794a70a2",
      "patch": "@@ -1320,76 +1320,146 @@ md_parse_option (int c, const char *arg)\n   return 1;\n }\n \n+static int\n+is_ppc64_target (const bfd_target *targ, void *data ATTRIBUTE_UNUSED)\n+{\n+  switch (targ->flavour)\n+    {\n+#ifdef OBJ_ELF\n+    case bfd_target_elf_flavour:\n+      return strncmp (targ->name, \"elf64-powerpc\", 13) == 0;\n+#endif\n+#ifdef OBJ_XCOFF\n+    case bfd_target_xcoff_flavour:\n+      return (strcmp (targ->name, \"aixcoff64-rs6000\") == 0\n+\t      || strcmp (targ->name, \"aix5coff64-rs6000\") == 0);\n+#endif\n+    default:\n+      return 0;\n+    }\n+}\n+\n void\n md_show_usage (FILE *stream)\n {\n   fprintf (stream, _(\"\\\n-PowerPC options:\\n\\\n--a32                    generate ELF32/XCOFF32\\n\\\n--a64                    generate ELF64/XCOFF64\\n\\\n--u                      ignored\\n\\\n--mpwrx, -mpwr2          generate code for POWER/2 (RIOS2)\\n\\\n--mpwr                   generate code for POWER (RIOS1)\\n\\\n--m601                   generate code for PowerPC 601\\n\\\n+PowerPC options:\\n\"));\n+  fprintf (stream, _(\"\\\n+-a32                    generate ELF32/XCOFF32\\n\"));\n+  if (bfd_iterate_over_targets (is_ppc64_target, NULL))\n+    fprintf (stream, _(\"\\\n+-a64                    generate ELF64/XCOFF64\\n\"));\n+  fprintf (stream, _(\"\\\n+-u                      ignored\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpwrx, -mpwr2          generate code for POWER/2 (RIOS2)\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpwr                   generate code for POWER (RIOS1)\\n\"));\n+  fprintf (stream, _(\"\\\n+-m601                   generate code for PowerPC 601\\n\"));\n+  fprintf (stream, _(\"\\\n -mppc, -mppc32, -m603, -m604\\n\\\n-                        generate code for PowerPC 603/604\\n\\\n--m403                   generate code for PowerPC 403\\n\\\n--m405                   generate code for PowerPC 405\\n\\\n--m440                   generate code for PowerPC 440\\n\\\n--m464                   generate code for PowerPC 464\\n\\\n--m476                   generate code for PowerPC 476\\n\\\n+                        generate code for PowerPC 603/604\\n\"));\n+  fprintf (stream, _(\"\\\n+-m403                   generate code for PowerPC 403\\n\"));\n+  fprintf (stream, _(\"\\\n+-m405                   generate code for PowerPC 405\\n\"));\n+  fprintf (stream, _(\"\\\n+-m440                   generate code for PowerPC 440\\n\"));\n+  fprintf (stream, _(\"\\\n+-m464                   generate code for PowerPC 464\\n\"));\n+  fprintf (stream, _(\"\\\n+-m476                   generate code for PowerPC 476\\n\"));\n+  fprintf (stream, _(\"\\\n -m7400, -m7410, -m7450, -m7455\\n\\\n-                        generate code for PowerPC 7400/7410/7450/7455\\n\\\n+                        generate code for PowerPC 7400/7410/7450/7455\\n\"));\n+  fprintf (stream, _(\"\\\n -m750cl, -mgekko, -mbroadway\\n\\\n-                        generate code for PowerPC 750cl/Gekko/Broadway\\n\\\n+                        generate code for PowerPC 750cl/Gekko/Broadway\\n\"));\n+  fprintf (stream, _(\"\\\n -m821, -m850, -m860     generate code for PowerPC 821/850/860\\n\"));\n   fprintf (stream, _(\"\\\n--mppc64, -m620          generate code for PowerPC 620/625/630\\n\\\n--mppc64bridge           generate code for PowerPC 64, including bridge insns\\n\\\n--mbooke                 generate code for 32-bit PowerPC BookE\\n\\\n--ma2                    generate code for A2 architecture\\n\\\n--mpower4, -mpwr4        generate code for Power4 architecture\\n\\\n+-mppc64, -m620          generate code for PowerPC 620/625/630\\n\"));\n+  fprintf (stream, _(\"\\\n+-mppc64bridge           generate code for PowerPC 64, including bridge insns\\n\"));\n+  fprintf (stream, _(\"\\\n+-mbooke                 generate code for 32-bit PowerPC BookE\\n\"));\n+  fprintf (stream, _(\"\\\n+-ma2                    generate code for A2 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpower4, -mpwr4        generate code for Power4 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n -mpower5, -mpwr5, -mpwr5x\\n\\\n-                        generate code for Power5 architecture\\n\\\n--mpower6, -mpwr6        generate code for Power6 architecture\\n\\\n--mpower7, -mpwr7        generate code for Power7 architecture\\n\\\n--mpower8, -mpwr8        generate code for Power8 architecture\\n\\\n--mpower9, -mpwr9        generate code for Power9 architecture\\n\\\n--mcell                  generate code for Cell Broadband Engine architecture\\n\\\n--mcom                   generate code for Power/PowerPC common instructions\\n\\\n+                        generate code for Power5 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpower6, -mpwr6        generate code for Power6 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpower7, -mpwr7        generate code for Power7 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpower8, -mpwr8        generate code for Power8 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mpower9, -mpwr9        generate code for Power9 architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mcell                  generate code for Cell Broadband Engine architecture\\n\"));\n+  fprintf (stream, _(\"\\\n+-mcom                   generate code for Power/PowerPC common instructions\\n\"));\n+  fprintf (stream, _(\"\\\n -many                   generate code for any architecture (PWR/PWRX/PPC)\\n\"));\n   fprintf (stream, _(\"\\\n--maltivec               generate code for AltiVec\\n\\\n--mvsx                   generate code for Vector-Scalar (VSX) instructions\\n\\\n--me300                  generate code for PowerPC e300 family\\n\\\n--me500, -me500x2        generate code for Motorola e500 core complex\\n\\\n--me500mc,               generate code for Freescale e500mc core complex\\n\\\n--me500mc64,             generate code for Freescale e500mc64 core complex\\n\\\n--me5500,                generate code for Freescale e5500 core complex\\n\\\n--me6500,                generate code for Freescale e6500 core complex\\n\\\n--mspe                   generate code for Motorola SPE instructions\\n\\\n--mspe2                  generate code for Freescale SPE2 instructions\\n\\\n--mvle                   generate code for Freescale VLE instructions\\n\\\n--mtitan                 generate code for AppliedMicro Titan core complex\\n\\\n--mregnames              Allow symbolic names for registers\\n\\\n+-maltivec               generate code for AltiVec\\n\"));\n+  fprintf (stream, _(\"\\\n+-mvsx                   generate code for Vector-Scalar (VSX) instructions\\n\"));\n+  fprintf (stream, _(\"\\\n+-me300                  generate code for PowerPC e300 family\\n\"));\n+  fprintf (stream, _(\"\\\n+-me500, -me500x2        generate code for Motorola e500 core complex\\n\"));\n+  fprintf (stream, _(\"\\\n+-me500mc,               generate code for Freescale e500mc core complex\\n\"));\n+  fprintf (stream, _(\"\\\n+-me500mc64,             generate code for Freescale e500mc64 core complex\\n\"));\n+  fprintf (stream, _(\"\\\n+-me5500,                generate code for Freescale e5500 core complex\\n\"));\n+  fprintf (stream, _(\"\\\n+-me6500,                generate code for Freescale e6500 core complex\\n\"));\n+  fprintf (stream, _(\"\\\n+-mspe                   generate code for Motorola SPE instructions\\n\"));\n+  fprintf (stream, _(\"\\\n+-mspe2                  generate code for Freescale SPE2 instructions\\n\"));\n+  fprintf (stream, _(\"\\\n+-mvle                   generate code for Freescale VLE instructions\\n\"));\n+  fprintf (stream, _(\"\\\n+-mtitan                 generate code for AppliedMicro Titan core complex\\n\"));\n+  fprintf (stream, _(\"\\\n+-mregnames              Allow symbolic names for registers\\n\"));\n+  fprintf (stream, _(\"\\\n -mno-regnames           Do not allow symbolic names for registers\\n\"));\n #ifdef OBJ_ELF\n   fprintf (stream, _(\"\\\n--mrelocatable           support for GCC's -mrelocatble option\\n\\\n--mrelocatable-lib       support for GCC's -mrelocatble-lib option\\n\\\n--memb                   set PPC_EMB bit in ELF flags\\n\\\n+-mrelocatable           support for GCC's -mrelocatble option\\n\"));\n+  fprintf (stream, _(\"\\\n+-mrelocatable-lib       support for GCC's -mrelocatble-lib option\\n\"));\n+  fprintf (stream, _(\"\\\n+-memb                   set PPC_EMB bit in ELF flags\\n\"));\n+  fprintf (stream, _(\"\\\n -mlittle, -mlittle-endian, -le\\n\\\n-                        generate code for a little endian machine\\n\\\n+                        generate code for a little endian machine\\n\"));\n+  fprintf (stream, _(\"\\\n -mbig, -mbig-endian, -be\\n\\\n-                        generate code for a big endian machine\\n\\\n--msolaris               generate code for Solaris\\n\\\n--mno-solaris            do not generate code for Solaris\\n\\\n--K PIC                  set EF_PPC_RELOCATABLE_LIB in ELF flags\\n\\\n--V                      print assembler version number\\n\\\n+                        generate code for a big endian machine\\n\"));\n+  fprintf (stream, _(\"\\\n+-msolaris               generate code for Solaris\\n\"));\n+  fprintf (stream, _(\"\\\n+-mno-solaris            do not generate code for Solaris\\n\"));\n+  fprintf (stream, _(\"\\\n+-K PIC                  set EF_PPC_RELOCATABLE_LIB in ELF flags\\n\"));\n+  fprintf (stream, _(\"\\\n+-V                      print assembler version number\\n\"));\n+  fprintf (stream, _(\"\\\n -Qy, -Qn                ignored\\n\"));\n #endif\n   fprintf (stream, _(\"\\\n--nops=count             when aligning, more than COUNT nops uses a branch\\n\\\n+-nops=count             when aligning, more than COUNT nops uses a branch\\n\"));\n+  fprintf (stream, _(\"\\\n -ppc476-workaround      warn if emitting data to code sections\\n\"));\n }\n \f"
    },
    {
      "sha": "3c7a36caff1844e36145dd7279a0b5afb9b91992",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f63875b309f3ae9854ac8a12470111b794a70a2/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f63875b309f3ae9854ac8a12470111b794a70a2/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=5f63875b309f3ae9854ac8a12470111b794a70a2",
      "patch": "@@ -22,6 +22,15 @@ if { ![istarget \"powerpc*-*-*\"] && ![istarget \"rs6000-*-*\"] } then {\n     return\n }\n \n+proc supports_ppc64 { } {\n+    global AS\n+    if { [catch \"exec $AS -a64 < /dev/null\"] } then {\n+\treturn 0\n+    } else {\n+\treturn 1\n+    }\n+}\n+\n run_dump_test \"bcyerr\"\n run_dump_test \"bcy\"\n run_dump_test \"bcaterr\"\n@@ -116,4 +125,6 @@ run_dump_test \"htm\"\n run_dump_test \"titan\"\n run_dump_test \"prefix-align\"\n run_dump_test \"prefix-pcrel\"\n-run_dump_test \"prefix-reloc\"\n+if { [supports_ppc64] } then {\n+    run_dump_test \"prefix-reloc\"\n+}"
    }
  ]
}