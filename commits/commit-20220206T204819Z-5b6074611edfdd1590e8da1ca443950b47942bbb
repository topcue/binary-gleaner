{
  "sha": "5b6074611edfdd1590e8da1ca443950b47942bbb",
  "node_id": "C_kwDOANOeidoAKDViNjA3NDYxMWVkZmRkMTU5MGU4ZGExY2E0NDM5NTBiNDc5NDJiYmI",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-20T13:40:12Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2022-02-06T20:48:19Z"
    },
    "message": "gdb: remove SYMTAB_LINETABLE macro, add getter/setter\n\nAdd a getter and a setter for a symtab's linetable.  Remove the\ncorresponding macro and adjust all callers.\n\nChange-Id: I159183fc0ccd8e18ab937b3c2f09ef2244ec6e9c",
    "tree": {
      "sha": "a8bd20dacac08b7c4d6ddfe627474e33fe36fb71",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a8bd20dacac08b7c4d6ddfe627474e33fe36fb71"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b6074611edfdd1590e8da1ca443950b47942bbb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b6074611edfdd1590e8da1ca443950b47942bbb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b6074611edfdd1590e8da1ca443950b47942bbb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b6074611edfdd1590e8da1ca443950b47942bbb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c61596525811d9b0fe79be8f11e5a142ade96dab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c61596525811d9b0fe79be8f11e5a142ade96dab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c61596525811d9b0fe79be8f11e5a142ade96dab"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 64,
    "deletions": 57
  },
  "files": [
    {
      "sha": "2a99a96e2e600b6485dde3f34b3e80a81e9a58ff",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -977,15 +977,13 @@ buildsym_compunit::end_symtab_with_blockvector (struct block *static_block,\n       if (subfile->line_vector)\n \t{\n \t  /* Reallocate the line table on the symbol obstack.  */\n-\t  SYMTAB_LINETABLE (symtab) = (struct linetable *)\n-\t    obstack_alloc (&m_objfile->objfile_obstack, linetablesize);\n-\t  memcpy (SYMTAB_LINETABLE (symtab), subfile->line_vector,\n-\t\t  linetablesize);\n+\t  symtab->set_linetable\n+\t    ((struct linetable *)\n+\t     obstack_alloc (&m_objfile->objfile_obstack, linetablesize));\n+\t  memcpy (symtab->linetable (), subfile->line_vector, linetablesize);\n \t}\n       else\n-\t{\n-\t  SYMTAB_LINETABLE (symtab) = NULL;\n-\t}\n+\tsymtab->set_linetable (nullptr);\n \n       /* Use whatever language we have been using for this\n \t subfile, not the one that was deduced in allocate_symtab"
    },
    {
      "sha": "bfccbfcddcd949f17b629a4e02eec16625f3b99a",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -393,10 +393,10 @@ do_mixed_source_and_assembly_deprecated\n   int num_displayed = 0;\n   print_source_lines_flags psl_flags = 0;\n \n-  gdb_assert (symtab != NULL && SYMTAB_LINETABLE (symtab) != NULL);\n+  gdb_assert (symtab != nullptr && symtab->linetable () != nullptr);\n \n-  nlines = SYMTAB_LINETABLE (symtab)->nitems;\n-  le = SYMTAB_LINETABLE (symtab)->item;\n+  nlines = symtab->linetable ()->nitems;\n+  le = symtab->linetable ()->item;\n \n   if (flags & DISASSEMBLY_FILENAME)\n     psl_flags |= PRINT_SOURCE_LINES_FILENAME;\n@@ -535,7 +535,7 @@ do_mixed_source_and_assembly (struct gdbarch *gdbarch,\n   struct symtab *last_symtab;\n   int last_line;\n \n-  gdb_assert (main_symtab != NULL && SYMTAB_LINETABLE (main_symtab) != NULL);\n+  gdb_assert (main_symtab != NULL && main_symtab->linetable () != NULL);\n \n   /* First pass: collect the list of all source files and lines.\n      We do this so that we can only print lines containing code once.\n@@ -553,8 +553,8 @@ do_mixed_source_and_assembly (struct gdbarch *gdbarch,\n      line after the opening brace.  We still want to print this opening brace.\n      first_le is used to implement this.  */\n \n-  nlines = SYMTAB_LINETABLE (main_symtab)->nitems;\n-  le = SYMTAB_LINETABLE (main_symtab)->item;\n+  nlines = main_symtab->linetable ()->nitems;\n+  le = main_symtab->linetable ()->item;\n   first_le = NULL;\n \n   /* Skip all the preceding functions.  */\n@@ -850,8 +850,8 @@ gdb_disassembly (struct gdbarch *gdbarch, struct ui_out *uiout,\n   /* Assume symtab is valid for whole PC range.  */\n   symtab = find_pc_line_symtab (low);\n \n-  if (symtab != NULL && SYMTAB_LINETABLE (symtab) != NULL)\n-    nlines = SYMTAB_LINETABLE (symtab)->nitems;\n+  if (symtab != NULL && symtab->linetable () != NULL)\n+    nlines = symtab->linetable ()->nitems;\n \n   if (!(flags & (DISASSEMBLY_SOURCE_DEPRECATED | DISASSEMBLY_SOURCE))\n       || nlines <= 0)"
    },
    {
      "sha": "9d844bfb4b2bc63f4db43555f17eb5eb2f9954f4",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -521,10 +521,9 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n       size_t size = ((stab->linetable->nitems - 1)\n \t\t     * sizeof (struct linetable_entry)\n \t\t     + sizeof (struct linetable));\n-      SYMTAB_LINETABLE (filetab)\n-\t= (struct linetable *) obstack_alloc (&objfile->objfile_obstack, size);\n-      memcpy (SYMTAB_LINETABLE (filetab),\n-\t      stab->linetable.get (), size);\n+      filetab->set_linetable ((struct linetable *)\n+\t\t\t      obstack_alloc (&objfile->objfile_obstack, size));\n+      memcpy (filetab->linetable (), stab->linetable.get (), size);\n     }\n \n   blockvector_size = (sizeof (struct blockvector)"
    },
    {
      "sha": "3dc6a8b72971e18f16346af8ad8bc104e2c10ade",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -4089,7 +4089,7 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n \n       psymtab_language = cust->primary_filetab ()->language;\n \n-      lines = SYMTAB_LINETABLE (cust->primary_filetab ());\n+      lines = cust->primary_filetab ()->linetable ();\n \n       /* Get a new lexical context.  */\n \n@@ -4173,11 +4173,11 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n       size = lines->nitems;\n       if (size > 1)\n \t--size;\n-      SYMTAB_LINETABLE (cust->primary_filetab ())\n-\t= ((struct linetable *)\n-\t   obstack_copy (&mdebugread_objfile->objfile_obstack,\n-\t\t\t lines, (sizeof (struct linetable)\n-\t\t\t\t + size * sizeof (lines->item))));\n+      cust->primary_filetab ()->set_linetable\n+\t((struct linetable *)\n+\t obstack_copy (&mdebugread_objfile->objfile_obstack,\n+\t\t       lines, (sizeof (struct linetable)\n+\t\t\t       + size * sizeof (lines->item))));\n       xfree (lines);\n \n       /* .. and our share of externals.\n@@ -4623,7 +4623,7 @@ new_symtab (const char *name, int maxlines, struct objfile *objfile)\n   add_compunit_symtab_to_objfile (cust);\n   symtab = allocate_symtab (cust, name);\n \n-  SYMTAB_LINETABLE (symtab) = new_linetable (maxlines);\n+  symtab->set_linetable (new_linetable (maxlines));\n   lang = compunit_language (cust);\n \n   /* All symtabs must have at least two blocks.  */"
    },
    {
      "sha": "2078ab8e524370a906db46f87728c2b7a6229dba",
      "filename": "gdb/mi/mi-symbol-cmds.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/mi/mi-symbol-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/mi/mi-symbol-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-symbol-cmds.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -53,12 +53,12 @@ mi_cmd_symbol_list_lines (const char *command, char **argv, int argc)\n   gdbarch = SYMTAB_OBJFILE (s)->arch ();\n \n   ui_out_emit_list list_emitter (uiout, \"lines\");\n-  if (SYMTAB_LINETABLE (s) != NULL && SYMTAB_LINETABLE (s)->nitems > 0)\n-    for (i = 0; i < SYMTAB_LINETABLE (s)->nitems; i++)\n+  if (s->linetable () != NULL && s->linetable ()->nitems > 0)\n+    for (i = 0; i < s->linetable ()->nitems; i++)\n       {\n \tui_out_emit_tuple tuple_emitter (uiout, NULL);\n-\tuiout->field_core_addr (\"pc\", gdbarch, SYMTAB_LINETABLE (s)->item[i].pc);\n-\tuiout->field_signed (\"line\", SYMTAB_LINETABLE (s)->item[i].line);\n+\tuiout->field_core_addr (\"pc\", gdbarch, s->linetable ()->item[i].pc);\n+\tuiout->field_signed (\"line\", s->linetable ()->item[i].line);\n       }\n }\n "
    },
    {
      "sha": "d41dc73b02b88b5cc29aee923f3e8ed67358dffc",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -656,7 +656,7 @@ objfile_relocate1 (struct objfile *objfile,\n \t    struct linetable *l;\n \n \t    /* First the line table.  */\n-\t    l = SYMTAB_LINETABLE (s);\n+\t    l = s->linetable ();\n \t    if (l)\n \t      {\n \t\tfor (int i = 0; i < l->nitems; ++i)"
    },
    {
      "sha": "8e545febb171df94216560cbda25d2cec9a251a1",
      "filename": "gdb/python/py-linetable.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/python/py-linetable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/python/py-linetable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-linetable.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -192,16 +192,16 @@ ltpy_has_line (PyObject *self, PyObject *args)\n   if (! PyArg_ParseTuple (args, GDB_PY_LL_ARG, &py_line))\n     return NULL;\n \n-  if (SYMTAB_LINETABLE (symtab) == NULL)\n+  if (symtab->linetable () == NULL)\n     {\n       PyErr_SetString (PyExc_RuntimeError,\n \t\t       _(\"Linetable information not found in symbol table\"));\n       return NULL;\n     }\n \n-  for (index = 0; index < SYMTAB_LINETABLE (symtab)->nitems; index++)\n+  for (index = 0; index < symtab->linetable ()->nitems; index++)\n     {\n-      struct linetable_entry *item = &(SYMTAB_LINETABLE (symtab)->item[index]);\n+      struct linetable_entry *item = &(symtab->linetable ()->item[index]);\n       if (item->line == py_line)\n \t  Py_RETURN_TRUE;\n     }\n@@ -223,7 +223,7 @@ ltpy_get_all_source_lines (PyObject *self, PyObject *args)\n \n   LTPY_REQUIRE_VALID (self, symtab);\n \n-  if (SYMTAB_LINETABLE (symtab) == NULL)\n+  if (symtab->linetable () == NULL)\n     {\n       PyErr_SetString (PyExc_RuntimeError,\n \t\t       _(\"Linetable information not found in symbol table\"));\n@@ -234,9 +234,9 @@ ltpy_get_all_source_lines (PyObject *self, PyObject *args)\n   if (source_dict == NULL)\n     return NULL;\n \n-  for (index = 0; index < SYMTAB_LINETABLE (symtab)->nitems; index++)\n+  for (index = 0; index < symtab->linetable ()->nitems; index++)\n     {\n-      item = &(SYMTAB_LINETABLE (symtab)->item[index]);\n+      item = &(symtab->linetable ()->item[index]);\n \n       /* 0 is used to signify end of line table information.  Do not\n \t include in the source set. */\n@@ -399,13 +399,13 @@ ltpy_iternext (PyObject *self)\n \n   LTPY_REQUIRE_VALID (iter_obj->source, symtab);\n \n-  if (iter_obj->current_index >= SYMTAB_LINETABLE (symtab)->nitems)\n+  if (iter_obj->current_index >= symtab->linetable ()->nitems)\n     {\n       PyErr_SetNone (PyExc_StopIteration);\n       return NULL;\n     }\n \n-  item = &(SYMTAB_LINETABLE (symtab)->item[iter_obj->current_index]);\n+  item = &(symtab->linetable ()->item[iter_obj->current_index]);\n \n   /* Skip over internal entries such as 0.  0 signifies the end of\n      line table data and is not useful to the API user.  */\n@@ -414,12 +414,12 @@ ltpy_iternext (PyObject *self)\n       iter_obj->current_index++;\n \n       /* Exit if the internal value is the last item in the line table.  */\n-      if (iter_obj->current_index >= SYMTAB_LINETABLE (symtab)->nitems)\n+      if (iter_obj->current_index >= symtab->linetable ()->nitems)\n \t{\n \t  PyErr_SetNone (PyExc_StopIteration);\n \t  return NULL;\n \t}\n-      item = &(SYMTAB_LINETABLE (symtab)->item[iter_obj->current_index]);\n+      item = &(symtab->linetable ()->item[iter_obj->current_index]);\n     }\n \n   obj = build_linetable_entry (item->line, item->pc);"
    },
    {
      "sha": "3dfdf592dd516d2c8a42d433991555609c062caa",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -713,7 +713,7 @@ btrace_find_line_range (CORE_ADDR pc)\n   if (symtab == NULL)\n     return btrace_mk_line_range (NULL, 0, 0);\n \n-  ltable = SYMTAB_LINETABLE (symtab);\n+  ltable = symtab->linetable ();\n   if (ltable == NULL)\n     return btrace_mk_line_range (symtab, 0, 0);\n "
    },
    {
      "sha": "2fdd0f6262740722f7a0e4ad2f416140fd01a7c9",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -77,7 +77,7 @@ print_objfile_statistics (void)\n \t    for (symtab *s : cu->filetabs ())\n \t      {\n \t\ti++;\n-\t\tif (SYMTAB_LINETABLE (s) != NULL)\n+\t\tif (s->linetable () != NULL)\n \t\t  linetables++;\n \t      }\n \t  }\n@@ -259,7 +259,7 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n \t\t    language_str (symtab->language));\n \n   /* First print the line table.  */\n-  l = SYMTAB_LINETABLE (symtab);\n+  l = symtab->linetable ();\n   if (l)\n     {\n       fprintf_filtered (outfile, \"\\nLine table:\\n\\n\");\n@@ -824,7 +824,8 @@ maintenance_info_symtabs (const char *regexp, int from_tty)\n \t\t\t\t     : \"(null)\");\n \t\t    printf_filtered (\"\\t  \"\n \t\t\t\t     \"linetable ((struct linetable *) %s)\\n\",\n-\t\t\t\t     host_address_to_string (symtab->linetable));\n+\t\t\t\t     host_address_to_string\n+\t\t\t\t       (symtab->linetable ()));\n \t\t    printf_filtered (\"\\t}\\n\");\n \t\t  }\n \t      }\n@@ -968,7 +969,7 @@ maintenance_print_one_line_table (struct symtab *symtab, void *data)\n \t\t   styled_string (file_name_style.style (),\n \t\t\t\t  symtab_to_fullname (symtab)),\n \t\t   host_address_to_string (symtab));\n-  linetable = SYMTAB_LINETABLE (symtab);\n+  linetable = symtab->linetable ();\n   printf_filtered (_(\"linetable: ((struct linetable *) %s):\\n\"),\n \t\t   host_address_to_string (linetable));\n "
    },
    {
      "sha": "f796ee4bd36239f38b9c270a37e3741cfbf17e36",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -3285,7 +3285,7 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n   for (symtab *iter_s : cust->filetabs ())\n     {\n       /* Find the best line in this symtab.  */\n-      l = SYMTAB_LINETABLE (iter_s);\n+      l = iter_s->linetable ();\n       if (!l)\n \tcontinue;\n       len = l->nitems;\n@@ -3454,7 +3454,7 @@ find_line_symtab (struct symtab *sym_tab, int line,\n   struct symtab *best_symtab;\n \n   /* First try looking it up in the given symtab.  */\n-  best_linetable = SYMTAB_LINETABLE (sym_tab);\n+  best_linetable = sym_tab->linetable ();\n   best_symtab = sym_tab;\n   best_index = find_line_common (best_linetable, line, &exact, 0);\n   if (best_index < 0 || !exact)\n@@ -3493,7 +3493,7 @@ find_line_symtab (struct symtab *sym_tab, int line,\n \t\t  if (FILENAME_CMP (symtab_to_fullname (sym_tab),\n \t\t\t\t    symtab_to_fullname (s)) != 0)\n \t\t    continue;\t\n-\t\t  l = SYMTAB_LINETABLE (s);\n+\t\t  l = s->linetable ();\n \t\t  ind = find_line_common (l, line, &exact, 0);\n \t\t  if (ind >= 0)\n \t\t    {\n@@ -3545,14 +3545,14 @@ find_pcs_for_symtab_line (struct symtab *symtab, int line,\n       int was_exact;\n       int idx;\n \n-      idx = find_line_common (SYMTAB_LINETABLE (symtab), line, &was_exact,\n+      idx = find_line_common (symtab->linetable (), line, &was_exact,\n \t\t\t      start);\n       if (idx < 0)\n \tbreak;\n \n       if (!was_exact)\n \t{\n-\t  struct linetable_entry *item = &SYMTAB_LINETABLE (symtab)->item[idx];\n+\t  struct linetable_entry *item = &symtab->linetable ()->item[idx];\n \n \t  if (*best_item == NULL\n \t      || (item->line < (*best_item)->line && item->is_stmt))\n@@ -3561,7 +3561,7 @@ find_pcs_for_symtab_line (struct symtab *symtab, int line,\n \t  break;\n \t}\n \n-      result.push_back (SYMTAB_LINETABLE (symtab)->item[idx].pc);\n+      result.push_back (symtab->linetable ()->item[idx].pc);\n       start = idx + 1;\n     }\n \n@@ -3586,7 +3586,7 @@ find_line_pc (struct symtab *symtab, int line, CORE_ADDR *pc)\n   symtab = find_line_symtab (symtab, line, &ind, NULL);\n   if (symtab != NULL)\n     {\n-      l = SYMTAB_LINETABLE (symtab);\n+      l = symtab->linetable ();\n       *pc = l->item[ind].pc;\n       return true;\n     }\n@@ -3783,7 +3783,7 @@ skip_prologue_using_lineinfo (CORE_ADDR func_addr, struct symtab *symtab)\n   int i;\n \n   /* Give up if this symbol has no lineinfo table.  */\n-  l = SYMTAB_LINETABLE (symtab);\n+  l = symtab->linetable ();\n   if (l == NULL)\n     return func_addr;\n \n@@ -4025,7 +4025,7 @@ skip_prologue_using_sal (struct gdbarch *gdbarch, CORE_ADDR func_addr)\n \t do this.  */\n       if (prologue_sal.symtab->language != language_asm)\n \t{\n-\t  struct linetable *linetable = SYMTAB_LINETABLE (prologue_sal.symtab);\n+\t  struct linetable *linetable = prologue_sal.symtab->linetable ();\n \t  int idx = 0;\n \n \t  /* Skip any earlier lines, and any end-of-sequence marker"
    },
    {
      "sha": "8881f4e5c02b1898ad398f93cddea5ef5ad594cb",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b6074611edfdd1590e8da1ca443950b47942bbb/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=5b6074611edfdd1590e8da1ca443950b47942bbb",
      "patch": "@@ -1383,6 +1383,16 @@ struct symtab\n     m_compunit = compunit;\n   }\n \n+  struct linetable *linetable () const\n+  {\n+    return m_linetable;\n+  }\n+\n+  void set_linetable (struct linetable *linetable)\n+  {\n+    m_linetable = linetable;\n+  }\n+\n   /* Unordered chain of all filetabs in the compunit,  with the exception\n      that the \"main\" source file is the first entry in the list.  */\n \n@@ -1395,7 +1405,7 @@ struct symtab\n   /* Table mapping core addresses to line numbers for this file.\n      Can be NULL if none.  Never shared between different symtabs.  */\n \n-  struct linetable *linetable;\n+  struct linetable *m_linetable;\n \n   /* Name of this source file.  This pointer is never NULL.  */\n \n@@ -1415,7 +1425,6 @@ struct symtab\n \n using symtab_range = next_range<symtab>;\n \n-#define SYMTAB_LINETABLE(symtab) ((symtab)->linetable)\n #define SYMTAB_LANGUAGE(symtab) ((symtab)->language)\n #define SYMTAB_BLOCKVECTOR(symtab) \\\n   (symtab->compunit ()->blockvector ())"
    }
  ]
}