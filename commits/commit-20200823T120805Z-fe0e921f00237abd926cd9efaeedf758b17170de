{
  "sha": "fe0e921f00237abd926cd9efaeedf758b17170de",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmUwZTkyMWYwMDIzN2FiZDkyNmNkOWVmYWVlZGY3NThiMTcxNzBkZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-22T08:29:57Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-23T12:08:05Z"
    },
    "message": "PR26513, 629310abec breaks assembling PowerPC Linux kernels\n\nInserting with replacement is wrong for some gas hash table uses.\nThis patch implements an htab_insert that conditionally replaces, and\nsimilarly for str_hash_insert.  str_hash_insert with replace=0 is\nroughly equivalent to the older hash_insert, and str_hash_insert with\nreplace=1 to the older hash_jam, but return values are different.  I\nfound it useful to know whether the slot was occupied prior to\ninserting/replacing.  I've also reinstated the fatal errors on messing\nup opcode tables with duplicates.\n\n\tPR 26513\n\t* hash.h (htab_insert): Update prototype and comment.\n\t(struct string_tuple): Make \"value\" a const void*.\n\t(string_tuple_alloc): Likewise.\n\t(str_hash_find, str_hash_find_n): Cast returned value.\n\t(str_hash_insert): Add \"replace\" parameter, and return slot pointer.\n\tFree alloc'd element when not inserted.\n\t* hash.c (htab_insert): Likewise.  Return slot when element exists,\n\totherwise return NULL.\n\t* read.c (pop_insert): Insert into hash table without first searching.\n\t* config/tc-avr.c (md_begin): Likewise.\n\t* config/tc-msp430.c (md_begin): Likewise.\n\t* config/tc-nds32.c (nds32_init_nds32_pseudo_opcodes): Likewise.\n\t* config/tc-v850.c (md_begin): Likewise.\n\t* macro.c (do_formals, define_macro, macro_expand_body): Likewise.\n\t(delete_macro): Delete from hash table.\n\t* config/tc-tic54x.c (subsym_create_or_replace): Correct logic.\n\n\t* symbols.c (local_symbol_make, symbol_table_insert): Allow\n\treplacement of hash table entries.\n\t* config/obj-coff-seh.c (seh_hash_insert): Likewise.\n\t* config/obj-coff.c (tag_insert): Likewise.\n\t* config/tc-iq2000.c (iq2000_add_macro): Likewise.\n\t* config/tc-m68k.c (md_begin): Likewise for aliases.\n\t* config/tc-tic4x.c (tic4x_asg): Likewise.\n\t* config/tc-tic6x.c (md_begin): Likewise.\n\n\t* dw2gencfi.c (dwcfi_hash_find_or_make): Disallow replacement of\n\thash table entries.\n\t* ecoff.c (add_string, get_tag): Likewise.\n\t* macro.c (expand_irp): Likewise.\n\t* config/obj-elf.c (build_additional_section_info): Likewise.\n\t* config/tc-aarch64.c (insert_reg_alias): Likewise.\n\t(checked_hash_insert): Likewise.\n\t* config/tc-alpha.c (get_alpha_reloc_tag, md_begin): Likewise.\n\t* config/tc-arc.c (arc_insert_opcode, declare_register): Likewise.\n\t(declare_addrtype, md_begin, arc_extcorereg): Likewise.\n\t* config/tc-arm.c (insert_reg_alias): Likewise.\n\t(arm_tc_equal_in_insn, md_begin): Likewise.\n\t* config/tc-cr16.c (initialise_reg_hash_table, md_begin): Likewise.\n\t* config/tc-cris.c (md_begin): Likewise.\n\t* config/tc-crx.c (md_begin): Likewise.\n\t* config/tc-csky.c (md_begin): Likewise.\n\t* config/tc-d10v.c (md_begin): Likewise.\n\t* config/tc-dlx.c (md_begin): Likewise.\n\t* config/tc-ft32.c (md_begin): Likewise.\n\t* config/tc-h8300.c (md_begin): Likewise.\n\t* config/tc-hppa.c (md_begin): Likewise.\n\t* config/tc-i386.c (md_begin): Likewise.\n\t* config/tc-ia64.c (dot_rot, dot_entry, declare_register): Likewise.\n\t(md_begin, dot_alias): Likewise.\n\t* config/tc-m68hc11.c (md_begin): Likewise.\n\t* config/tc-m68k.c (md_begin): Likewise.\n\t* config/tc-mcore.c (md_begin): Likewise.\n\t* config/tc-microblaze.c (md_begin): Likewise.\n\t* config/tc-mips.c (md_begin): Likewise.\n\t* config/tc-mmix.c (md_begin): Likewise.\n\t* config/tc-mn10200.c (md_begin): Likewise.\n\t* config/tc-mn10300.c (md_begin): Likewise.\n\t* config/tc-moxie.c (md_begin): Likewise.\n\t* config/tc-nds32.c (nds32_relax_hint, md_begin): Likewise.\n\t* config/tc-nios2.c (md_begin): Likewise.\n\t* config/tc-ns32k.c (md_begin): Likewise.\n\t* config/tc-pdp11.c (md_begin): Likewise.\n\t* config/tc-pj.c (fake_opcode, md_begin): Likewise.\n\t* config/tc-ppc.c (ppc_setup_opcodes): Likewise.\n\t* config/tc-pru.c (md_begin): Likewise.\n\t* config/tc-riscv.c (init_ext_version_hash): Likewise.\n\t(init_opcode_names_hash, hash_reg_name, init_opcode_hash): Likewise.\n\t(riscv_init_csr_hash): Likewise.\n\t* config/tc-s390.c (s390_setup_opcodes, md_begin): Likewise.\n\t* config/tc-score.c (s3_insert_reg): Likewise.\n\t(s3_build_score_ops_hsh, s3_build_dependency_insn_hsh): Likewise.\n\t* config/tc-score7.c (s7_build_score_ops_hsh): Likewise.\n\t(s7_build_dependency_insn_hsh, s7_insert_reg): Likewise.\n\t* config/tc-sh.c (md_begin): Likewise.\n\t* config/tc-sparc.c (md_begin): Likewise.\n\t* config/tc-spu.c (md_begin): Likewise.\n\t* config/tc-tic30.c (md_begin): Likewise.\n\t* config/tc-tic4x.c (tic4x_inst_insert): Likewise.\n\t* config/tc-tic54x.c (stag_add_field_symbols, md_begin): Likewise.\n\t(tic54x_endstruct, tic54x_var, tic54x_macro_info): Likewise.\n\t(subsym_substitute): Likewise.\n\t* config/tc-tilegx.c (md_begin): Likewise.\n\t* config/tc-tilepro.c (md_begin): Likewise.\n\t* config/tc-vax.c (vip_begin): Likewise.\n\t* config/tc-wasm32.c (md_begin): Likewise.\n\t* config/tc-xgate.c (md_begin): Likewise.\n\t* config/tc-z8k.c (md_begin): Likewise.\n\t* testsuite/gas/ppc/dcbt.d,\n\t* testsuite/gas/ppc/dcbt.s: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run it.\n\n\t* ecoff.c (add_string): Report fatal error on duplicates.\n\t* config/tc-alpha.c (md_begin): Likewise.\n\t* config/tc-arc.c (arc_insert_opcode, declare_register): Likewise.\n\t(declare_addrtype, md_begin, arc_extcorereg): Likewise.\n\t* config/tc-cr16.c (initialise_reg_hash_table, md_begin): Likewise.\n\t* config/tc-cris.c (md_begin): Likewise.\n\t* config/tc-crx.c (md_begin): Likewise.\n\t* config/tc-dlx.c (md_begin): Likewise.\n\t* config/tc-hppa.c (md_begin): Likewise.\n\t* config/tc-i386.c (md_begin): Likewise.\n\t* config/tc-ia64.c (dot_rot, dot_entry, declare_register): Likewise.\n\t(md_begin): Likewise.\n\t* config/tc-m68k.c (md_begin): Likewise.\n\t* config/tc-mips.c (md_begin): Likewise.\n\t* config/tc-nios2.c (md_begin): Likewise.\n\t* config/tc-ns32k.c (md_begin): Likewise.\n\t* config/tc-ppc.c (ppc_setup_opcodes): Likewise.\n\t* config/tc-pru.c (md_begin): Likewise.\n\t* config/tc-riscv.c (init_ext_version_hash): Likewise.\n\t(init_opcode_names_hash, hash_reg_name, init_opcode_hash): Likewise.\n\t* config/tc-s390.c (s390_setup_opcodes, md_begin): Likewise.\n\t* config/tc-sparc.c (md_begin): Likewise.\n\t* config/tc-tic30.c (md_begin): Likewise.\n\t* config/tc-tic4x.c (tic4x_inst_insert): Likewise.\n\t* config/tc-tilegx.c (md_begin): Likewise.\n\t* config/tc-tilepro.c (md_begin): Likewise.\n\t* config/tc-vax.c (vip_begin): Likewise.\n\n\t* config/tc-alpha.c,\n\t* config/tc-arm.c,\n\t* config/tc-avr.c,\n\t* config/tc-cr16.c,\n\t* config/tc-csky.c,\n\t* config/tc-i386.c,\n\t* config/tc-m68hc11.c,\n\t* config/tc-m68k.c,\n\t* config/tc-microblaze.c,\n\t* config/tc-ns32k.c,\n\t* config/tc-pj.c,\n\t* config/tc-ppc.c,\n\t* config/tc-score.c,\n\t* config/tc-score7.c,\n\t* config/tc-tic4x.c,\n\t* config/tc-tic54x.c,\n\t* config/tc-tilegx.c,\n\t* config/tc-tilepro.c,\n\t* config/tc-xgate.c: Formatting.",
    "tree": {
      "sha": "eb20c7e2834f06e114323d816077d4c99884a3ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eb20c7e2834f06e114323d816077d4c99884a3ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe0e921f00237abd926cd9efaeedf758b17170de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe0e921f00237abd926cd9efaeedf758b17170de",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe0e921f00237abd926cd9efaeedf758b17170de",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe0e921f00237abd926cd9efaeedf758b17170de/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b8fff44e0e2e43e1823413eec7c5f6fa9d219ce7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8fff44e0e2e43e1823413eec7c5f6fa9d219ce7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b8fff44e0e2e43e1823413eec7c5f6fa9d219ce7"
    }
  ],
  "stats": {
    "total": 997,
    "additions": 633,
    "deletions": 364
  },
  "files": [
    {
      "sha": "2dde2dff4874a42645d7e15050bf28f3ef966829",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 143,
      "deletions": 0,
      "changes": 143,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1,3 +1,146 @@\n+2020-08-23  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26513\n+\t* hash.h (htab_insert): Update prototype and comment.\n+\t(struct string_tuple): Make \"value\" a const void*.\n+\t(string_tuple_alloc): Likewise.\n+\t(str_hash_find, str_hash_find_n): Cast returned value.\n+\t(str_hash_insert): Add \"replace\" parameter, and return slot pointer.\n+\tFree alloc'd element when not inserted.\n+\t* hash.c (htab_insert): Likewise.  Return slot when element exists,\n+\totherwise return NULL.\n+\t* read.c (pop_insert): Insert into hash table without first searching.\n+\t* config/tc-avr.c (md_begin): Likewise.\n+\t* config/tc-msp430.c (md_begin): Likewise.\n+\t* config/tc-nds32.c (nds32_init_nds32_pseudo_opcodes): Likewise.\n+\t* config/tc-v850.c (md_begin): Likewise.\n+\t* macro.c (do_formals, define_macro, macro_expand_body): Likewise.\n+\t(delete_macro): Delete from hash table.\n+\t* config/tc-tic54x.c (subsym_create_or_replace): Correct logic.\n+\n+\t* symbols.c (local_symbol_make, symbol_table_insert): Allow\n+\treplacement of hash table entries.\n+\t* config/obj-coff-seh.c (seh_hash_insert): Likewise.\n+\t* config/obj-coff.c (tag_insert): Likewise.\n+\t* config/tc-iq2000.c (iq2000_add_macro): Likewise.\n+\t* config/tc-m68k.c (md_begin): Likewise for aliases.\n+\t* config/tc-tic4x.c (tic4x_asg): Likewise.\n+\t* config/tc-tic6x.c (md_begin): Likewise.\n+\n+\t* dw2gencfi.c (dwcfi_hash_find_or_make): Disallow replacement of\n+\thash table entries.\n+\t* ecoff.c (add_string, get_tag): Likewise.\n+\t* macro.c (expand_irp): Likewise.\n+\t* config/obj-elf.c (build_additional_section_info): Likewise.\n+\t* config/tc-aarch64.c (insert_reg_alias): Likewise.\n+\t(checked_hash_insert): Likewise.\n+\t* config/tc-alpha.c (get_alpha_reloc_tag, md_begin): Likewise.\n+\t* config/tc-arc.c (arc_insert_opcode, declare_register): Likewise.\n+\t(declare_addrtype, md_begin, arc_extcorereg): Likewise.\n+\t* config/tc-arm.c (insert_reg_alias): Likewise.\n+\t(arm_tc_equal_in_insn, md_begin): Likewise.\n+\t* config/tc-cr16.c (initialise_reg_hash_table, md_begin): Likewise.\n+\t* config/tc-cris.c (md_begin): Likewise.\n+\t* config/tc-crx.c (md_begin): Likewise.\n+\t* config/tc-csky.c (md_begin): Likewise.\n+\t* config/tc-d10v.c (md_begin): Likewise.\n+\t* config/tc-dlx.c (md_begin): Likewise.\n+\t* config/tc-ft32.c (md_begin): Likewise.\n+\t* config/tc-h8300.c (md_begin): Likewise.\n+\t* config/tc-hppa.c (md_begin): Likewise.\n+\t* config/tc-i386.c (md_begin): Likewise.\n+\t* config/tc-ia64.c (dot_rot, dot_entry, declare_register): Likewise.\n+\t(md_begin, dot_alias): Likewise.\n+\t* config/tc-m68hc11.c (md_begin): Likewise.\n+\t* config/tc-m68k.c (md_begin): Likewise.\n+\t* config/tc-mcore.c (md_begin): Likewise.\n+\t* config/tc-microblaze.c (md_begin): Likewise.\n+\t* config/tc-mips.c (md_begin): Likewise.\n+\t* config/tc-mmix.c (md_begin): Likewise.\n+\t* config/tc-mn10200.c (md_begin): Likewise.\n+\t* config/tc-mn10300.c (md_begin): Likewise.\n+\t* config/tc-moxie.c (md_begin): Likewise.\n+\t* config/tc-nds32.c (nds32_relax_hint, md_begin): Likewise.\n+\t* config/tc-nios2.c (md_begin): Likewise.\n+\t* config/tc-ns32k.c (md_begin): Likewise.\n+\t* config/tc-pdp11.c (md_begin): Likewise.\n+\t* config/tc-pj.c (fake_opcode, md_begin): Likewise.\n+\t* config/tc-ppc.c (ppc_setup_opcodes): Likewise.\n+\t* config/tc-pru.c (md_begin): Likewise.\n+\t* config/tc-riscv.c (init_ext_version_hash): Likewise.\n+\t(init_opcode_names_hash, hash_reg_name, init_opcode_hash): Likewise.\n+\t(riscv_init_csr_hash): Likewise.\n+\t* config/tc-s390.c (s390_setup_opcodes, md_begin): Likewise.\n+\t* config/tc-score.c (s3_insert_reg): Likewise.\n+\t(s3_build_score_ops_hsh, s3_build_dependency_insn_hsh): Likewise.\n+\t* config/tc-score7.c (s7_build_score_ops_hsh): Likewise.\n+\t(s7_build_dependency_insn_hsh, s7_insert_reg): Likewise.\n+\t* config/tc-sh.c (md_begin): Likewise.\n+\t* config/tc-sparc.c (md_begin): Likewise.\n+\t* config/tc-spu.c (md_begin): Likewise.\n+\t* config/tc-tic30.c (md_begin): Likewise.\n+\t* config/tc-tic4x.c (tic4x_inst_insert): Likewise.\n+\t* config/tc-tic54x.c (stag_add_field_symbols, md_begin): Likewise.\n+\t(tic54x_endstruct, tic54x_var, tic54x_macro_info): Likewise.\n+\t(subsym_substitute): Likewise.\n+\t* config/tc-tilegx.c (md_begin): Likewise.\n+\t* config/tc-tilepro.c (md_begin): Likewise.\n+\t* config/tc-vax.c (vip_begin): Likewise.\n+\t* config/tc-wasm32.c (md_begin): Likewise.\n+\t* config/tc-xgate.c (md_begin): Likewise.\n+\t* config/tc-z8k.c (md_begin): Likewise.\n+\t* testsuite/gas/ppc/dcbt.d,\n+\t* testsuite/gas/ppc/dcbt.s: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run it.\n+\n+\t* ecoff.c (add_string): Report fatal error on duplicates.\n+\t* config/tc-alpha.c (md_begin): Likewise.\n+\t* config/tc-arc.c (arc_insert_opcode, declare_register): Likewise.\n+\t(declare_addrtype, md_begin, arc_extcorereg): Likewise.\n+\t* config/tc-cr16.c (initialise_reg_hash_table, md_begin): Likewise.\n+\t* config/tc-cris.c (md_begin): Likewise.\n+\t* config/tc-crx.c (md_begin): Likewise.\n+\t* config/tc-dlx.c (md_begin): Likewise.\n+\t* config/tc-hppa.c (md_begin): Likewise.\n+\t* config/tc-i386.c (md_begin): Likewise.\n+\t* config/tc-ia64.c (dot_rot, dot_entry, declare_register): Likewise.\n+\t(md_begin): Likewise.\n+\t* config/tc-m68k.c (md_begin): Likewise.\n+\t* config/tc-mips.c (md_begin): Likewise.\n+\t* config/tc-nios2.c (md_begin): Likewise.\n+\t* config/tc-ns32k.c (md_begin): Likewise.\n+\t* config/tc-ppc.c (ppc_setup_opcodes): Likewise.\n+\t* config/tc-pru.c (md_begin): Likewise.\n+\t* config/tc-riscv.c (init_ext_version_hash): Likewise.\n+\t(init_opcode_names_hash, hash_reg_name, init_opcode_hash): Likewise.\n+\t* config/tc-s390.c (s390_setup_opcodes, md_begin): Likewise.\n+\t* config/tc-sparc.c (md_begin): Likewise.\n+\t* config/tc-tic30.c (md_begin): Likewise.\n+\t* config/tc-tic4x.c (tic4x_inst_insert): Likewise.\n+\t* config/tc-tilegx.c (md_begin): Likewise.\n+\t* config/tc-tilepro.c (md_begin): Likewise.\n+\t* config/tc-vax.c (vip_begin): Likewise.\n+\n+\t* config/tc-alpha.c,\n+\t* config/tc-arm.c,\n+\t* config/tc-avr.c,\n+\t* config/tc-cr16.c,\n+\t* config/tc-csky.c,\n+\t* config/tc-i386.c,\n+\t* config/tc-m68hc11.c,\n+\t* config/tc-m68k.c,\n+\t* config/tc-microblaze.c,\n+\t* config/tc-ns32k.c,\n+\t* config/tc-pj.c,\n+\t* config/tc-ppc.c,\n+\t* config/tc-score.c,\n+\t* config/tc-score7.c,\n+\t* config/tc-tic4x.c,\n+\t* config/tc-tic54x.c,\n+\t* config/tc-tilegx.c,\n+\t* config/tc-tilepro.c,\n+\t* config/tc-xgate.c: Formatting.\n+\n 2020-08-21  Alan Modra  <amodra@gmail.com>\n \n \t* symbols.c (struct local_symbol): Add \"hash\" entry.  Reorder fields."
    },
    {
      "sha": "d4421d4b28471e3ee666678e2d98e378b7f50a50",
      "filename": "gas/config/obj-coff-seh.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/obj-coff-seh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/obj-coff-seh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-coff-seh.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -116,7 +116,7 @@ make_pxdata_seg (segT cseg, char *name)\n static void\n seh_hash_insert (const char *name, struct seh_seg_list *item)\n {\n-  str_hash_insert (seh_hash, name, (char *) item);\n+  str_hash_insert (seh_hash, name, item, 1);\n }\n \n static struct seh_seg_list *"
    },
    {
      "sha": "a0a30f469b9cc26eb5a06c799f3ac98c44197735",
      "filename": "gas/config/obj-coff.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/obj-coff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/obj-coff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-coff.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -128,7 +128,7 @@ tag_init (void)\n static void\n tag_insert (const char *name, symbolS *symbolP)\n {\n-  str_hash_insert (tag_hash, name, (char *) symbolP);\n+  str_hash_insert (tag_hash, name, symbolP, 1);\n }\n \n static symbolS *"
    },
    {
      "sha": "9e3970780101819bb0b4b930aa0aa065fa52bb0e",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -2653,7 +2653,7 @@ build_additional_section_info (bfd *abfd ATTRIBUTE_UNUSED,\n   /* Add index to hash.  */\n   idx_ptr = XNEW (unsigned int);\n   *idx_ptr = i;\n-  str_hash_insert (list->indexes, group_name, (char *)idx_ptr);\n+  str_hash_insert (list->indexes, group_name, idx_ptr, 0);\n }\n \n static int"
    },
    {
      "sha": "238792758d47b7d8cfc263aa427e35d619eaaa31",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1337,7 +1337,7 @@ insert_reg_alias (char *str, int number, aarch64_reg_type type)\n   new->type = type;\n   new->builtin = FALSE;\n \n-  str_hash_insert (aarch64_reg_hsh, name, (void *) new);\n+  str_hash_insert (aarch64_reg_hsh, name, new, 0);\n \n   return new;\n }\n@@ -8622,7 +8622,7 @@ aarch64_adjust_symtab (void)\n static void\n checked_hash_insert (htab_t table, const char *key, void *value)\n {\n-  str_hash_insert (table, key, value);\n+  str_hash_insert (table, key, value, 0);\n }\n \n static void"
    },
    {
      "sha": "06432bf9b32ef85b7d62912c054b49ac87c361cc",
      "filename": "gas/config/tc-alpha.c",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-alpha.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -600,7 +600,7 @@ get_alpha_reloc_tag (long sequence)\n       info->segment = now_seg;\n       info->sequence = sequence;\n       strcpy (info->string, buffer);\n-      str_hash_insert (alpha_literal_hash, info->string, (void *) info);\n+      str_hash_insert (alpha_literal_hash, info->string, info, 0);\n #ifdef OBJ_EVAX\n       info->sym = 0;\n       info->psym = 0;\n@@ -1168,7 +1168,8 @@ assemble_tokens_to_insn (const char *opname,\n   const struct alpha_opcode *opcode;\n \n   /* Search opcodes.  */\n-  opcode = (const struct alpha_opcode *) str_hash_find (alpha_opcode_hash, opname);\n+  opcode = (const struct alpha_opcode *) str_hash_find (alpha_opcode_hash,\n+\t\t\t\t\t\t\topname);\n   if (opcode)\n     {\n       int cpumatch;\n@@ -3315,8 +3316,8 @@ assemble_tokens (const char *opname,\n #endif\n   if (local_macros_on)\n     {\n-      macro = ((const struct alpha_macro *)\n-\t       str_hash_find (alpha_macro_hash, opname));\n+      macro = (const struct alpha_macro *) str_hash_find (alpha_macro_hash,\n+\t\t\t\t\t\t\t  opname);\n       if (macro)\n \t{\n \t  found_something = 1;\n@@ -3330,7 +3331,8 @@ assemble_tokens (const char *opname,\n     }\n \n   /* Search opcodes.  */\n-  opcode = (const struct alpha_opcode *) str_hash_find (alpha_opcode_hash, opname);\n+  opcode = (const struct alpha_opcode *) str_hash_find (alpha_opcode_hash,\n+\t\t\t\t\t\t\topname);\n   if (opcode)\n     {\n       found_something = 1;\n@@ -5422,7 +5424,8 @@ md_begin (void)\n       const char *name, *slash;\n \n       name = alpha_opcodes[i].name;\n-      str_hash_insert (alpha_opcode_hash, name, (void *) &alpha_opcodes[i]);\n+      if (str_hash_insert (alpha_opcode_hash, name, &alpha_opcodes[i], 0))\n+\tas_fatal (_(\"duplicate %s\"), name);\n \n       /* Some opcodes include modifiers of various sorts with a \"/mod\"\n \t syntax, like the architecture manual suggests.  However, for\n@@ -5436,7 +5439,7 @@ md_begin (void)\n \t  memcpy (p, name, slash - name);\n \t  strcpy (p + (slash - name), slash + 1);\n \n-\t  (void) str_hash_insert (alpha_opcode_hash, p, (void *) &alpha_opcodes[i]);\n+\t  (void) str_hash_insert (alpha_opcode_hash, p, &alpha_opcodes[i], 0);\n \t  /* Ignore failures -- the opcode table does duplicate some\n \t     variants in different forms, like \"hw_stq\" and \"hw_st/q\".  */\n \t}\n@@ -5455,7 +5458,8 @@ md_begin (void)\n       const char *name;\n \n       name = alpha_macros[i].name;\n-      str_hash_insert (alpha_macro_hash, name, (void *) &alpha_macros[i]);\n+      if (str_hash_insert (alpha_macro_hash, name, &alpha_macros[i], 0))\n+\tas_fatal (_(\"duplicate %s\"), name);\n \n       while (++i < alpha_num_macros\n \t     && (alpha_macros[i].name == name"
    },
    {
      "sha": "36a0898088537ec2e48dddd5f686ba39ace64a2e",
      "filename": "gas/config/tc-arc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arc.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -765,7 +765,8 @@ arc_insert_opcode (const struct arc_opcode *opcode)\n       entry->count = 0;\n       entry->opcode = NULL;\n \n-      str_hash_insert (arc_opcode_hash, name, (void *) entry);\n+      if (str_hash_insert (arc_opcode_hash, name, entry, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n     }\n \n   entry->opcode = XRESIZEVEC (const struct arc_opcode *, entry->opcode,\n@@ -2552,7 +2553,8 @@ declare_register (const char *name, int number)\n   symbolS *regS = symbol_create (name, reg_section,\n \t\t\t\t &zero_address_frag, number);\n \n-  str_hash_insert (arc_reg_hash, S_GET_NAME (regS), (void *) regS);\n+  if (str_hash_insert (arc_reg_hash, S_GET_NAME (regS), regS, 0) != NULL)\n+    as_fatal (_(\"duplicate %s\"), name);\n }\n \n /* Construct symbols for each of the general registers.  */\n@@ -2583,8 +2585,8 @@ declare_addrtype (const char *name, int number)\n   symbolS *addrtypeS = symbol_create (name, undefined_section,\n \t\t\t\t      &zero_address_frag, number);\n \n-  str_hash_insert (arc_addrtype_hash, S_GET_NAME (addrtypeS),\n-\t\t   (void *) addrtypeS);\n+  if (str_hash_insert (arc_addrtype_hash, S_GET_NAME (addrtypeS), addrtypeS, 0))\n+    as_fatal (_(\"duplicate %s\"), name);\n }\n \n /* Port-specific assembler initialization.  This function is called\n@@ -2694,7 +2696,8 @@ md_begin (void)\n \t  && !check_cpu_feature (auxr->subclass))\n \tcontinue;\n \n-      str_hash_insert (arc_aux_hash, auxr->name, (void *) auxr);\n+      if (str_hash_insert (arc_aux_hash, auxr->name, auxr, 0) != 0)\n+\tas_fatal (_(\"duplicate %s\"), auxr->name);\n     }\n \n   /* Address type declaration.  */\n@@ -4889,7 +4892,8 @@ arc_extcorereg (int opertype)\n       auxr->cpu = selected_cpu.flags;\n       auxr->subclass = NONE;\n       auxr->address = ereg.number;\n-      str_hash_insert (arc_aux_hash, auxr->name, (void *) auxr);\n+      if (str_hash_insert (arc_aux_hash, auxr->name, auxr, 0) != NULL)\n+\tas_bad (_(\"duplicate aux register %s\"), auxr->name);\n       break;\n     case EXT_COND_CODE:\n       /* Condition code.  */"
    },
    {
      "sha": "c5ad2607b37205831d06b0af9433ab134828f339",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 23,
      "deletions": 22,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -2583,7 +2583,7 @@ insert_reg_alias (char *str, unsigned number, int type)\n   new_reg->builtin = FALSE;\n   new_reg->neon = NULL;\n \n-  str_hash_insert (arm_reg_hsh, name, new_reg);\n+  str_hash_insert (arm_reg_hsh, name, new_reg, 0);\n \n   return new_reg;\n }\n@@ -2883,8 +2883,8 @@ s_unreq (int a ATTRIBUTE_UNUSED)\n     as_bad (_(\"invalid syntax for .unreq directive\"));\n   else\n     {\n-      struct reg_entry *reg = (struct reg_entry *) str_hash_find (arm_reg_hsh,\n-\t\t\t\t\t\t\t      name);\n+      struct reg_entry *reg\n+\t= (struct reg_entry *) str_hash_find (arm_reg_hsh, name);\n \n       if (!reg)\n \tas_bad (_(\"unknown register alias '%s'\"), name);\n@@ -5536,8 +5536,9 @@ parse_shift (char **str, int i, enum parse_shift_mode mode)\n       return FAIL;\n     }\n \n-  shift_name = (const struct asm_shift_name *) str_hash_find_n (arm_shift_hsh, *str,\n-\t\t\t\t\t\t\t    p - *str);\n+  shift_name\n+    = (const struct asm_shift_name *) str_hash_find_n (arm_shift_hsh, *str,\n+\t\t\t\t\t\t       p - *str);\n \n   if (shift_name == NULL)\n     {\n@@ -6338,7 +6339,7 @@ parse_psr (char **str, bfd_boolean lhs)\n \tp = start + strcspn (start, \"rR\") + 1;\n \n       psr = (const struct asm_psr *) str_hash_find_n (arm_v7m_psr_hsh, start,\n-\t\t\t\t\t\t  p - start);\n+\t\t\t\t\t\t      p - start);\n \n       if (!psr)\n \treturn FAIL;\n@@ -6441,7 +6442,7 @@ parse_psr (char **str, bfd_boolean lhs)\n       else\n \t{\n \t  psr = (const struct asm_psr *) str_hash_find_n (arm_psr_hsh, start,\n-\t\t\t\t\t\t      p - start);\n+\t\t\t\t\t\t\t  p - start);\n \t  if (!psr)\n \t    goto error;\n \n@@ -6656,7 +6657,7 @@ parse_barrier (char **str)\n     q++;\n \n   o = (const struct asm_barrier_opt *) str_hash_find_n (arm_barrier_opt_hsh, p,\n-\t\t\t\t\t\t    q - p);\n+\t\t\t\t\t\t\tq - p);\n   if (!o)\n     return FAIL;\n \n@@ -22620,7 +22621,7 @@ opcode_lookup (char **str)\n \n   /* Look for unaffixed or special-case affixed mnemonic.  */\n   opcode = (const struct asm_opcode *) str_hash_find_n (arm_ops_hsh, base,\n-\t\t\t\t\t\t    end - base);\n+\t\t\t\t\t\t\tend - base);\n   if (opcode)\n     {\n       /* step U */\n@@ -22648,7 +22649,7 @@ opcode_lookup (char **str)\n      affix = end - 1;\n      cond = (const struct asm_cond *) str_hash_find_n (arm_vcond_hsh, affix, 1);\n      opcode = (const struct asm_opcode *) str_hash_find_n (arm_ops_hsh, base,\n-\t\t\t\t\t\t      affix - base);\n+\t\t\t\t\t\t\t   affix - base);\n      /* If this opcode can not be vector predicated then don't accept it with a\n \tvector predication code.  */\n      if (opcode && !opcode->mayBeVecPred)\n@@ -22665,7 +22666,7 @@ opcode_lookup (char **str)\n       affix = end - 2;\n       cond = (const struct asm_cond *) str_hash_find_n (arm_cond_hsh, affix, 2);\n       opcode = (const struct asm_opcode *) str_hash_find_n (arm_ops_hsh, base,\n-\t\t\t\t\t\t\taffix - base);\n+\t\t\t\t\t\t\t    affix - base);\n     }\n \n   if (opcode && cond)\n@@ -22721,7 +22722,7 @@ opcode_lookup (char **str)\n   memcpy (save, affix, 2);\n   memmove (affix, affix + 2, (end - affix) - 2);\n   opcode = (const struct asm_opcode *) str_hash_find_n (arm_ops_hsh, base,\n-\t\t\t\t\t\t    (end - base) - 2);\n+\t\t\t\t\t\t\t(end - base) - 2);\n   memmove (affix + 2, affix, (end - affix) - 2);\n   memcpy (affix, save, 2);\n \n@@ -27999,7 +28000,7 @@ arm_tc_equal_in_insn (int c ATTRIBUTE_UNUSED, char * name)\n \t  if (str_hash_find (already_warned, nbuf) == NULL)\n \t    {\n \t      as_warn (_(\"[-mwarn-syms]: Assignment makes a symbol match an ARM instruction: %s\"), name);\n-\t      str_hash_insert (already_warned, nbuf, NULL);\n+\t      str_hash_insert (already_warned, nbuf, NULL, 0);\n \t    }\n \t}\n       else\n@@ -30731,25 +30732,25 @@ md_begin (void)\n \n   for (i = 0; i < sizeof (insns) / sizeof (struct asm_opcode); i++)\n     if (str_hash_find (arm_ops_hsh, insns[i].template_name) == NULL)\n-      str_hash_insert (arm_ops_hsh, insns[i].template_name, (void *) (insns + i));\n+      str_hash_insert (arm_ops_hsh, insns[i].template_name, insns + i, 0);\n   for (i = 0; i < sizeof (conds) / sizeof (struct asm_cond); i++)\n-    str_hash_insert (arm_cond_hsh, conds[i].template_name, (void *) (conds + i));\n+    str_hash_insert (arm_cond_hsh, conds[i].template_name, conds + i, 0);\n   for (i = 0; i < sizeof (vconds) / sizeof (struct asm_cond); i++)\n-    str_hash_insert (arm_vcond_hsh, vconds[i].template_name, (void *) (vconds + i));\n+    str_hash_insert (arm_vcond_hsh, vconds[i].template_name, vconds + i, 0);\n   for (i = 0; i < sizeof (shift_names) / sizeof (struct asm_shift_name); i++)\n-    str_hash_insert (arm_shift_hsh, shift_names[i].name, (void *) (shift_names + i));\n+    str_hash_insert (arm_shift_hsh, shift_names[i].name, shift_names + i, 0);\n   for (i = 0; i < sizeof (psrs) / sizeof (struct asm_psr); i++)\n-    str_hash_insert (arm_psr_hsh, psrs[i].template_name, (void *) (psrs + i));\n+    str_hash_insert (arm_psr_hsh, psrs[i].template_name, psrs + i, 0);\n   for (i = 0; i < sizeof (v7m_psrs) / sizeof (struct asm_psr); i++)\n     str_hash_insert (arm_v7m_psr_hsh, v7m_psrs[i].template_name,\n-\t\t (void *) (v7m_psrs + i));\n+\t\t     v7m_psrs + i, 0);\n   for (i = 0; i < sizeof (reg_names) / sizeof (struct reg_entry); i++)\n-    str_hash_insert (arm_reg_hsh, reg_names[i].name, (void *) (reg_names + i));\n+    str_hash_insert (arm_reg_hsh, reg_names[i].name, reg_names + i, 0);\n   for (i = 0;\n        i < sizeof (barrier_opt_names) / sizeof (struct asm_barrier_opt);\n        i++)\n     str_hash_insert (arm_barrier_opt_hsh, barrier_opt_names[i].template_name,\n-\t\t (void *) (barrier_opt_names + i));\n+\t\t     barrier_opt_names + i, 0);\n #ifdef OBJ_ELF\n   for (i = 0; i < ARRAY_SIZE (reloc_names); i++)\n     {\n@@ -30759,7 +30760,7 @@ md_begin (void)\n \t/* This makes encode_branch() use the EABI versions of this relocation.  */\n \tentry->reloc = BFD_RELOC_UNUSED;\n \n-      str_hash_insert (arm_reloc_hsh, entry->name, (void *) entry);\n+      str_hash_insert (arm_reloc_hsh, entry->name, entry, 0);\n     }\n #endif\n "
    },
    {
      "sha": "0dcc9f84d96c2f82ef31973513c1810236195c3e",
      "filename": "gas/config/tc-avr.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-avr.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -814,8 +814,7 @@ md_begin (void)\n      quick index to the first opcode with a particular name in the opcode\n      table.  */\n   for (opcode = avr_opcodes; opcode->name; opcode++)\n-    if (str_hash_find (avr_hash, opcode->name) == NULL)\n-      str_hash_insert (avr_hash, opcode->name, (char *) opcode);\n+    str_hash_insert (avr_hash, opcode->name, opcode, 0);\n \n   avr_mod_hash = str_htab_create ();\n \n@@ -824,19 +823,20 @@ md_begin (void)\n       mod_index m;\n \n       m.index = i + 10;\n-      str_hash_find (avr_mod_hash, EXP_MOD_NAME (i));\n-      str_hash_insert (avr_mod_hash, EXP_MOD_NAME (i), m.ptr);\n+      str_hash_insert (avr_mod_hash, EXP_MOD_NAME (i), m.ptr, 0);\n     }\n \n   avr_no_sreg_hash = str_htab_create ();\n \n   for (i = 0; i < ARRAY_SIZE (avr_no_sreg); ++i)\n     {\n       gas_assert (str_hash_find (avr_hash, avr_no_sreg[i]));\n-      str_hash_insert (avr_no_sreg_hash, avr_no_sreg[i], (char*) 4 /* dummy */);\n+      str_hash_insert (avr_no_sreg_hash, avr_no_sreg[i],\n+\t\t       (void *) 4 /* dummy */, 0);\n     }\n \n-  avr_gccisr_opcode = (struct avr_opcodes_s*) str_hash_find (avr_hash, \"__gcc_isr\");\n+  avr_gccisr_opcode = (struct avr_opcodes_s*) str_hash_find (avr_hash,\n+\t\t\t\t\t\t\t     \"__gcc_isr\");\n   gas_assert (avr_gccisr_opcode);\n \n   bfd_set_arch_mach (stdoutput, TARGET_ARCH, avr_mcu->mach);"
    },
    {
      "sha": "c0627ff4884806dc71ef61447348870da34f8fa7",
      "filename": "gas/config/tc-cr16.c",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-cr16.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -794,18 +794,21 @@ md_pcrel_from (fixS *fixp)\n }\n \n static void\n-initialise_reg_hash_table (htab_t * hash_table,\n-                           const reg_entry * register_table,\n-                           const unsigned int num_entries)\n+initialise_reg_hash_table (htab_t *hash_table,\n+\t\t\t   const reg_entry *register_table,\n+\t\t\t   const unsigned int num_entries)\n {\n-  const reg_entry * rreg;\n-  if ((* hash_table = str_htab_create ()) == NULL)\n+  const reg_entry *rreg;\n+\n+  *hash_table = str_htab_create ();\n+  if (*hash_table == NULL)\n     as_fatal (_(\"Virtual memory exhausted\"));\n \n   for (rreg = register_table;\n        rreg < (register_table + num_entries);\n        rreg++)\n-    str_hash_insert (* hash_table, rreg->name, (char *) rreg);\n+    if (str_hash_insert (*hash_table, rreg->name, rreg, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), rreg->name);\n }\n \n /* This function is called once, at assembler startup time.  This should\n@@ -824,8 +827,9 @@ md_begin (void)\n     {\n       const char *mnemonic = cr16_instruction[i].mnemonic;\n \n-      str_hash_insert (cr16_inst_hash, mnemonic,\n-\t\t       (char *)(cr16_instruction + i));\n+      if (str_hash_insert (cr16_inst_hash, mnemonic, cr16_instruction + i, 0))\n+\tas_fatal (_(\"duplicate %s\"), mnemonic);\n+\n       /* Insert unique names into hash table.  The CR16 instruction set\n          has many identical opcode names that have different opcodes based\n          on the operands.  This hash table then provides a quick index to"
    },
    {
      "sha": "873f28bd71aaedf6c864ad0eea961fe8d3078feb",
      "filename": "gas/config/tc-cris.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-cris.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1221,8 +1221,9 @@ md_begin (void)\n \t  continue;\n \t}\n \n-      /* Need to cast to get rid of \"const\".  FIXME: Fix str_hash_insert instead.  */\n-      str_hash_insert (op_hash, name, (void *) &cris_opcodes[i]);\n+      if (str_hash_insert (op_hash, name, &cris_opcodes[i], 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n+\n       do\n \t{\n \t  if (cris_opcodes[i].match & cris_opcodes[i].lose)"
    },
    {
      "sha": "10f3880c60d3d9989b4a284898bb18c9d3dbbf72",
      "filename": "gas/config/tc-crx.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-crx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-crx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-crx.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -537,8 +537,8 @@ md_begin (void)\n     {\n       const char *mnemonic = crx_instruction[i].mnemonic;\n \n-      str_hash_insert (crx_inst_hash, mnemonic,\n-\t\t\t     (void *) &crx_instruction[i]);\n+      if (str_hash_insert (crx_inst_hash, mnemonic, &crx_instruction[i], 0))\n+\tas_fatal (_(\"duplicate %s\"), mnemonic);\n \n       /* Insert unique names into hash table.  The CRX instruction set\n \t has many identical opcode names that have different opcodes based\n@@ -561,7 +561,8 @@ md_begin (void)\n \n     for (regtab = crx_regtab;\n \t regtab < (crx_regtab + NUMREGS); regtab++)\n-      str_hash_insert (reg_hash, regtab->name, (void *) regtab);\n+      if (str_hash_insert (reg_hash, regtab->name, regtab, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), regtab->name);\n   }\n \n   /* Initialize copreg_hash hash table.  */\n@@ -573,8 +574,8 @@ md_begin (void)\n \n     for (copregtab = crx_copregtab; copregtab < (crx_copregtab + NUMCOPREGS);\n \t copregtab++)\n-      str_hash_insert (copreg_hash, copregtab->name,\n-\t\t       (void *) copregtab);\n+      if (str_hash_insert (copreg_hash, copregtab->name, copregtab, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), copregtab->name);\n   }\n   /*  Set linkrelax here to avoid fixups in most sections.  */\n   linkrelax = 1;"
    },
    {
      "sha": "5f536f4ff75188a51bca5b9af4d7f975f21c98a0",
      "filename": "gas/config/tc-csky.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-csky.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1361,14 +1361,13 @@ md_begin (void)\n   csky_opcodes_hash = str_htab_create ();\n   for ( ; opcode->mnemonic != NULL; opcode++)\n     if ((isa_flag & (opcode->isa_flag16 | opcode->isa_flag32)) != 0)\n-      str_hash_insert (csky_opcodes_hash, opcode->mnemonic, (char *)opcode);\n+      str_hash_insert (csky_opcodes_hash, opcode->mnemonic, opcode, 0);\n   for ( ; macro->name != NULL; macro++)\n     if ((isa_flag & macro->isa_flag) != 0)\n-      str_hash_insert (csky_macros_hash, macro->name, (char *)macro);\n+      str_hash_insert (csky_macros_hash, macro->name, macro, 0);\n   if (do_nolrw && (isa_flag & CSKYV2_ISA_1E2) != 0)\n     str_hash_insert (csky_macros_hash,\n-\t\t v2_lrw_macro_opcode.name,\n-\t\t (char *)&v2_lrw_macro_opcode);\n+\t\t     v2_lrw_macro_opcode.name, &v2_lrw_macro_opcode, 0);\n   /* Set e_flag to ELF Head.  */\n   bfd_set_private_flags (stdoutput, mach_flag);\n   /* Set bfd_mach to bfd backend data.  */\n@@ -2935,9 +2934,9 @@ parse_opcode (char *str)\n \n   /* Find hash by name in csky_macros_hash and csky_opcodes_hash.  */\n   csky_insn.macro = (struct csky_macro_info *) str_hash_find (csky_macros_hash,\n-\t\t\t\t\t\t\t  macro_name);\n+\t\t\t\t\t\t\t      macro_name);\n   csky_insn.opcode = (struct csky_opcode *) str_hash_find (csky_opcodes_hash,\n-\t\t\t\t\t\t\tname);\n+\t\t\t\t\t\t\t   name);\n \n   if (csky_insn.macro == NULL && csky_insn.opcode == NULL)\n     return FALSE;"
    },
    {
      "sha": "dd30b7f30fe000ef6d255276c0ceb645dd6318ea",
      "filename": "gas/config/tc-d10v.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-d10v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-d10v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-d10v.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -289,7 +289,7 @@ md_begin (void)\n       if (strcmp (prev_name, opcode->name))\n \t{\n \t  prev_name = (char *) opcode->name;\n-\t  str_hash_insert (d10v_hash, opcode->name, (char *) opcode);\n+\t  str_hash_insert (d10v_hash, opcode->name, opcode, 0);\n \t}\n     }\n "
    },
    {
      "sha": "9f0b0eb473c8243442c8e5f1d6f283cddce6c77e",
      "filename": "gas/config/tc-d30v.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-d30v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-d30v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-d30v.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -314,7 +314,7 @@ md_begin (void)\n \n   /* Insert opcode names into a hash table.  */\n   for (opcode = (struct d30v_opcode *) d30v_opcode_table; opcode->name; opcode++)\n-      str_hash_insert (d30v_hash, opcode->name, (char *) opcode);\n+      str_hash_insert (d30v_hash, opcode->name, opcode, 0);\n \n   fixups = &FixUps[0];\n   FixUps[0].next = &FixUps[1];"
    },
    {
      "sha": "aacf044386dbdcaa10ad70ef75c761e27501a5fc",
      "filename": "gas/config/tc-dlx.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-dlx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-dlx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-dlx.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -285,7 +285,8 @@ md_begin (void)\n   for (i = 0; i < num_dlx_opcodes; i++)\n     {\n       const char *name = machine_opcodes[i].name;\n-      str_hash_insert (op_hash, name, (void *) &machine_opcodes[i]);\n+      if (str_hash_insert (op_hash, name, &machine_opcodes[i], 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n     }\n \n   define_some_regs ();"
    },
    {
      "sha": "7db56836a940fabe4d0dac8988caf1848170f409",
      "filename": "gas/config/tc-ft32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ft32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ft32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ft32.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -58,7 +58,7 @@ md_begin (void)\n \n   /* Insert names into hash table.  */\n   for (opcode = ft32_opc_info; opcode->name; opcode++)\n-    str_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+    str_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n \n   bfd_set_arch_mach (stdoutput, TARGET_ARCH, 0);\n   if (!norelax)"
    },
    {
      "sha": "d675af558f4aefbcffbb08b54155fe590ae71b07",
      "filename": "gas/config/tc-h8300.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-h8300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-h8300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-h8300.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -283,7 +283,7 @@ md_begin (void)\n       len = dst - buffer;\n       if (cmplen == 0)\n \tcmplen = len;\n-      str_hash_insert (opcode_hash_control, buffer, (char *) pi);\n+      str_hash_insert (opcode_hash_control, buffer, pi, 0);\n       strcpy (prev_buffer, buffer);\n       idx++;\n "
    },
    {
      "sha": "4056178e80a0aab129b225fea081bf565b9227ad",
      "filename": "gas/config/tc-hppa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-hppa.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -8242,7 +8242,8 @@ md_begin (void)\n     {\n       const char *name = pa_opcodes[i].name;\n \n-      str_hash_insert (op_hash, name, (void *)&pa_opcodes[i]);\n+      if (str_hash_insert (op_hash, name, &pa_opcodes[i], 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n \n       do\n \t{"
    },
    {
      "sha": "d237352fbeae37117ae962cc0863faa22e5290ca",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 16,
      "deletions": 10,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -3050,7 +3050,9 @@ md_begin (void)\n \t    /* different name --> ship out current template list;\n \t       add to hash table; & begin anew.  */\n \t    core_optab->end = optab;\n-\t    str_hash_insert (op_hash, (optab - 1)->name, (void *) core_optab);\n+\t    if (str_hash_insert (op_hash, (optab - 1)->name, core_optab, 0))\n+\t      as_fatal (_(\"duplicate %s\"), (optab - 1)->name);\n+\n \t    if (optab->name == NULL)\n \t      break;\n \t    core_optab = XNEW (templates);\n@@ -3066,7 +3068,8 @@ md_begin (void)\n     unsigned int regtab_size = i386_regtab_size;\n \n     for (regtab = i386_regtab; regtab_size--; regtab++)\n-      str_hash_insert (reg_hash, regtab->reg_name, (void *) regtab);\n+      if (str_hash_insert (reg_hash, regtab->reg_name, regtab, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), regtab->reg_name);\n   }\n \n   /* Fill in lexical tables:  mnemonic_chars, operand_chars.  */\n@@ -5218,17 +5221,17 @@ parse_insn (char *line, char *mnemonic)\n \t      case QWORD_MNEM_SUFFIX:\n \t\ti.suffix = mnem_p[-1];\n \t      mnem_p[-1] = '\\0';\n-\t      current_templates = (const templates *) str_hash_find (op_hash,\n-\t\t\t\t\t\t\t\t mnemonic);\n+\t      current_templates\n+\t\t= (const templates *) str_hash_find (op_hash, mnemonic);\n \t      break;\n \t    case SHORT_MNEM_SUFFIX:\n \t    case LONG_MNEM_SUFFIX:\n \t      if (!intel_syntax)\n \t\t{\n \t\t  i.suffix = mnem_p[-1];\n \t\t  mnem_p[-1] = '\\0';\n-\t\t  current_templates = (const templates *) str_hash_find (op_hash,\n-\t\t\t\t\t\t\t\t     mnemonic);\n+\t\t  current_templates\n+\t\t    = (const templates *) str_hash_find (op_hash, mnemonic);\n \t\t}\n \t      break;\n \n@@ -5241,8 +5244,8 @@ parse_insn (char *line, char *mnemonic)\n \t\t  else\n \t\t    i.suffix = LONG_MNEM_SUFFIX;\n \t\t  mnem_p[-1] = '\\0';\n-\t\t  current_templates = (const templates *) str_hash_find (op_hash,\n-\t\t\t\t\t\t\t\t     mnemonic);\n+\t\t  current_templates\n+\t\t    = (const templates *) str_hash_find (op_hash, mnemonic);\n \t\t}\n \t      break;\n \t    }\n@@ -10968,10 +10971,13 @@ i386_index_check (const char *operand_string)\n \t\t  && current_templates->end[-1].operand_types[1]\n \t\t     .bitfield.baseindex))\n \t    op = 1;\n-\t  expected_reg = (const reg_entry *)str_hash_find (reg_hash, di_si[addr_mode][op == es_op]);\n+\t  expected_reg\n+\t    = (const reg_entry *) str_hash_find (reg_hash,\n+\t\t\t\t\t\t di_si[addr_mode][op == es_op]);\n \t}\n       else\n-\texpected_reg = (const reg_entry *)str_hash_find (reg_hash, bx[addr_mode]);\n+\texpected_reg\n+\t  = (const reg_entry *)str_hash_find (reg_hash, bx[addr_mode]);\n \n       if (i.base_reg != expected_reg\n \t  || i.index_reg"
    },
    {
      "sha": "f827e459df2eb970ee8f4d371787a7647444b6f8",
      "filename": "gas/config/tc-ia64.c",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ia64.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -4684,7 +4684,12 @@ dot_rot (int type)\n       drpp = &dr->next;\n       base_reg += num_regs;\n \n-      str_hash_insert (md.dynreg_hash, name, dr);\n+      if (str_hash_insert (md.dynreg_hash, name, dr, 0) != NULL)\n+\t{\n+\t  as_bad (_(\"Attempt to redefine register set `%s'\"), name);\n+\t  obstack_free (&notes, name);\n+\t  goto err;\n+\t}\n \n       if (*input_line_pointer != ',')\n \tbreak;\n@@ -5171,7 +5176,8 @@ dot_entry (int dummy ATTRIBUTE_UNUSED)\n       c = get_symbol_name (&name);\n       symbolP = symbol_find_or_make (name);\n \n-      str_hash_insert (md.entry_hash, S_GET_NAME (symbolP), (void *) symbolP);\n+      if (str_hash_insert (md.entry_hash, S_GET_NAME (symbolP), symbolP, 0))\n+\tas_bad (_(\"duplicate entry hint %s\"), name);\n \n       *input_line_pointer = c;\n       SKIP_WHITESPACE_AFTER_NAME ();\n@@ -5374,7 +5380,8 @@ declare_register (const char *name, unsigned int regnum)\n \n   sym = symbol_create (name, reg_section, &zero_address_frag, regnum);\n \n-  str_hash_insert (md.reg_hash, S_GET_NAME (sym), (void *) sym);\n+  if (str_hash_insert (md.reg_hash, S_GET_NAME (sym), sym, 0) != NULL)\n+    as_fatal (_(\"duplicate %s\"), name);\n \n   return sym;\n }\n@@ -7393,8 +7400,9 @@ md_begin (void)\n \n   md.pseudo_hash = str_htab_create ();\n   for (i = 0; i < NELEMS (pseudo_opcode); ++i)\n-    str_hash_insert (md.pseudo_hash, pseudo_opcode[i].name,\n-\t\t     (void *) (pseudo_opcode + i));\n+    if (str_hash_insert (md.pseudo_hash, pseudo_opcode[i].name,\n+\t\t\t pseudo_opcode + i, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), pseudo_opcode[i].name);\n \n   md.reg_hash = str_htab_create ();\n   md.dynreg_hash = str_htab_create ();\n@@ -7452,8 +7460,8 @@ md_begin (void)\n   declare_register (\"psp\", REG_PSP);\n \n   for (i = 0; i < NELEMS (const_bits); ++i)\n-    str_hash_insert (md.const_hash, const_bits[i].name,\n-\t\t     (void *) (const_bits + i));\n+    if (str_hash_insert (md.const_hash, const_bits[i].name, const_bits + i, 0))\n+      as_fatal (_(\"duplicate %s\"), const_bits[i].name);\n \n   /* Set the architecture and machine depending on defaults and command line\n      options.  */\n@@ -11812,8 +11820,8 @@ dot_alias (int section)\n   h->file = as_where (&h->line);\n   h->name = name;\n \n-  str_hash_insert (ahash, alias, (void *) h);\n-  str_hash_insert (nhash, name, (void *) alias);\n+  str_hash_insert (ahash, alias, h, 0);\n+  str_hash_insert (nhash, name, alias, 0);\n \n out:\n   demand_empty_rest_of_line ();"
    },
    {
      "sha": "82ae9c26934910f5695ea8b4c21502c00c297156",
      "filename": "gas/config/tc-iq2000.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-iq2000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-iq2000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-iq2000.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -277,7 +277,8 @@ iq2000_add_macro (const char *  name,\n \t  /* Add to macro's hash table.  */\n \t  htab_insert (macro->formal_hash,\n \t\t       formal_entry_alloc (sb_terminate (& formal->name),\n-\t\t\t\t\t   formal));\n+\t\t\t\t\t   formal),\n+\t\t       1);\n \t  formal->index = macro->formal_count;\n \t  macro->formal_count++;\n \t  *p = formal;\n@@ -289,7 +290,7 @@ iq2000_add_macro (const char *  name,\n \n   sb_add_string (&macro_name, name);\n   namestr = sb_terminate (&macro_name);\n-  htab_insert (macro_hash, macro_entry_alloc (namestr, macro));\n+  htab_insert (macro_hash, macro_entry_alloc (namestr, macro), 1);\n \n   macro_defined = 1;\n }"
    },
    {
      "sha": "5735ff844e38f9434b2f491a72cc41a71621fae1",
      "filename": "gas/config/tc-m68hc11.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-m68hc11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-m68hc11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m68hc11.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -664,7 +664,7 @@ md_begin (void)\n \t  opc->nb_modes = 0;\n \t  opc->opcode = opcodes;\n \t  opc->used = 0;\n-\t  str_hash_insert (m68hc11_hash, opcodes->name, opc);\n+\t  str_hash_insert (m68hc11_hash, opcodes->name, opc, 0);\n \t}\n       opc->nb_modes++;\n       opc->format |= opcodes->format;\n@@ -3477,7 +3477,8 @@ md_assemble (char *str)\n      is given.  */\n   if (opc == NULL && name[0] == 'j' && name[1] == 'b')\n     {\n-      opc = (struct m68hc11_opcode_def *) str_hash_find (m68hc11_hash, &name[1]);\n+      opc = (struct m68hc11_opcode_def *) str_hash_find (m68hc11_hash,\n+\t\t\t\t\t\t\t &name[1]);\n       if (opc\n \t  && (!(opc->format & M6811_OP_JUMP_REL)\n \t      || (opc->format & M6811_OP_BITMASK)))\n@@ -3509,7 +3510,7 @@ md_assemble (char *str)\n \t      name[nlen++] = TOLOWER (*op_end++);\n \t      name[nlen] = 0;\n \t      opc = (struct m68hc11_opcode_def *) str_hash_find (m68hc11_hash,\n-\t\t\t\t\t\t\t     name);\n+\t\t\t\t\t\t\t\t name);\n \t    }\n \t}\n     }"
    },
    {
      "sha": "7a3ccc4b0e4479d913e798337c8ecdabec03b439",
      "filename": "gas/config/tc-m68k.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m68k.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -4570,18 +4570,20 @@ md_begin (void)\n \t}\n       while (slak);\n \n-      str_hash_insert (op_hash, ins->name, (char *) hack);\n+      if (str_hash_insert (op_hash, ins->name, hack, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), ins->name);\n     }\n \n   for (i = 0; i < m68k_numaliases; i++)\n     {\n       const char *name = m68k_opcode_aliases[i].primary;\n       const char *alias = m68k_opcode_aliases[i].alias;\n-      void *val = (void *)str_hash_find (op_hash, name);\n+      void *val = (void *) str_hash_find (op_hash, name);\n \n       if (!val)\n \tas_fatal (_(\"Internal Error: Can't find %s in hash table\"), name);\n-      str_hash_insert (op_hash, alias, val);\n+      if (str_hash_insert (op_hash, alias, val, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), alias);\n     }\n \n   /* In MRI mode, all unsized branches are variable sized.  Normally,\n@@ -4614,11 +4616,11 @@ md_begin (void)\n \t{\n \t  const char *name = mri_aliases[i].primary;\n \t  const char *alias = mri_aliases[i].alias;\n-\t  void *val = (void *)str_hash_find (op_hash, name);\n+\t  void *val = (void *) str_hash_find (op_hash, name);\n \n \t  if (!val)\n \t    as_fatal (_(\"Internal Error: Can't find %s in hash table\"), name);\n-\t  str_hash_insert (op_hash, alias, val);\n+\t  str_hash_insert (op_hash, alias, val, 1);\n \t}\n     }\n \n@@ -4674,7 +4676,7 @@ md_begin (void)\n       {\n \thack = XOBNEW (&robyn, struct m68k_incant);\n \tstr_hash_insert (op_hash,\n-\t\t     mote_pseudo_table[n].poc_name, (char *) hack);\n+\t\t\t mote_pseudo_table[n].poc_name, hack, 0);\n \thack->m_operands = 0;\n \thack->m_opnum = n;\n \tn++;"
    },
    {
      "sha": "57300db64a36ca3135340892c2baed9dccb24154",
      "filename": "gas/config/tc-mcore.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mcore.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -465,7 +465,8 @@ md_begin (void)\n       if (! streq (prev_name, mcore_table[i].name))\n \t{\n \t  prev_name = mcore_table[i].name;\n-\t  str_hash_insert (opcode_hash_control, mcore_table[i].name, (char *) &mcore_table[i]);\n+\t  str_hash_insert (opcode_hash_control, mcore_table[i].name,\n+\t\t\t   &mcore_table[i], 0);\n \t}\n     }\n }"
    },
    {
      "sha": "22316b6243048b12acf74407cd9673f46784ec10",
      "filename": "gas/config/tc-microblaze.c",
      "status": "modified",
      "additions": 23,
      "deletions": 9,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-microblaze.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -417,7 +417,7 @@ md_begin (void)\n \n   /* Insert unique names into hash table.  */\n   for (opcode = opcodes; opcode->name; opcode ++)\n-    str_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+    str_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n }\n \n /* Try to parse a reg name.  */\n@@ -1072,9 +1072,13 @@ md_assemble (char * str)\n \n           count = 32 - reg1;\n           if (streq (name, \"lmi\"))\n-            opcode = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"lwi\");\n+\t    opcode\n+\t      = (struct op_code_struct *) str_hash_find (opcode_hash_control,\n+\t\t\t\t\t\t\t \"lwi\");\n           else\n-            opcode = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"swi\");\n+\t    opcode\n+\t      = (struct op_code_struct *) str_hash_find (opcode_hash_control,\n+\t\t\t\t\t\t\t \"swi\");\n           if (opcode == NULL)\n             {\n               as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"lwi\");\n@@ -1106,7 +1110,9 @@ md_assemble (char * str)\n           if ((temp != 0) && (temp != 0xFFFF8000))\n \t    {\n               /* Needs an immediate inst.  */\n-              opcode1 = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n+\t      opcode1\n+\t\t= (struct op_code_struct *) str_hash_find (opcode_hash_control,\n+\t\t\t\t\t\t\t   \"imm\");\n               if (opcode1 == NULL)\n                 {\n                   as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"imm\");\n@@ -1559,7 +1565,9 @@ md_assemble (char * str)\n       if ((temp != 0) && (temp != 0xFFFF8000))\n \t{\n           /* Needs an immediate inst.  */\n-          opcode1 = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n+\t  opcode1\n+\t    = (struct op_code_struct *) str_hash_find (opcode_hash_control,\n+\t\t\t\t\t\t       \"imm\");\n           if (opcode1 == NULL)\n             {\n               as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"imm\");\n@@ -1625,7 +1633,9 @@ md_assemble (char * str)\n       if ((temp != 0) && (temp != 0xFFFF8000))\n \t{\n           /* Needs an immediate inst.  */\n-          opcode1 = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n+          opcode1\n+\t    = (struct op_code_struct *) str_hash_find (opcode_hash_control,\n+\t\t\t\t\t\t       \"imm\");\n           if (opcode1 == NULL)\n             {\n               as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"imm\");\n@@ -1698,7 +1708,9 @@ md_assemble (char * str)\n       if ((temp != 0) && (temp != 0xFFFF8000))\n \t{\n           /* Needs an immediate inst.  */\n-          opcode1 = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n+          opcode1\n+\t    = (struct op_code_struct *) str_hash_find (opcode_hash_control,\n+\t\t\t\t\t\t       \"imm\");\n           if (opcode1 == NULL)\n             {\n               as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"imm\");\n@@ -2119,7 +2131,8 @@ md_apply_fix (fixS *   fixP,\n \tbuf[i + INST_WORD_SIZE] = buf[i];\n \n       /* Generate the imm instruction.  */\n-      opcode1 = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n+      opcode1\n+\t= (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n       if (opcode1 == NULL)\n \t{\n \t  as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"imm\");\n@@ -2167,7 +2180,8 @@ md_apply_fix (fixS *   fixP,\n \tbuf[i + INST_WORD_SIZE] = buf[i];\n \n       /* Generate the imm instruction.  */\n-      opcode1 = (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n+      opcode1\n+\t= (struct op_code_struct *) str_hash_find (opcode_hash_control, \"imm\");\n       if (opcode1 == NULL)\n \t{\n \t  as_bad (_(\"unknown opcode \\\"%s\\\"\"), \"imm\");"
    },
    {
      "sha": "b1786824f99899abcc1c3e8b9d80600305acdc92",
      "filename": "gas/config/tc-mips.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mips.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -3694,7 +3694,8 @@ md_begin (void)\n     {\n       const char *name = mips_opcodes[i].name;\n \n-      str_hash_insert (op_hash, name, (void *) &mips_opcodes[i]);\n+      if (str_hash_insert (op_hash, name, &mips_opcodes[i], 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n       do\n \t{\n \t  if (!validate_mips_insn (&mips_opcodes[i], 0xffffffff,\n@@ -3726,7 +3727,8 @@ md_begin (void)\n     {\n       const char *name = mips16_opcodes[i].name;\n \n-      str_hash_insert (mips16_op_hash, name, (void *) &mips16_opcodes[i]);\n+      if (str_hash_insert (mips16_op_hash, name, &mips16_opcodes[i], 0))\n+\tas_fatal (_(\"duplicate %s\"), name);\n       do\n \t{\n \t  if (!validate_mips16_insn (&mips16_opcodes[i], &mips16_operands[i]))\n@@ -3751,8 +3753,8 @@ md_begin (void)\n     {\n       const char *name = micromips_opcodes[i].name;\n \n-      str_hash_insert (micromips_op_hash, name,\n-\t\t\t    (void *) &micromips_opcodes[i]);\n+      if (str_hash_insert (micromips_op_hash, name, &micromips_opcodes[i], 0))\n+\tas_fatal (_(\"duplicate %s\"), name);\n       do\n \t{\n \t  struct mips_cl_insn *micromips_nop_insn;"
    },
    {
      "sha": "c469a62f0ecf476181b128a7ed4126c62361c5b7",
      "filename": "gas/config/tc-mmix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mmix.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -775,7 +775,7 @@ mmix_md_begin (void)\n     = bfd_make_section_old_way (stdoutput, MMIX_REG_SECTION_NAME);\n \n   for (opcode = mmix_opcodes; opcode->name; opcode++)\n-    str_hash_insert (mmix_opcode_hash, opcode->name, (char *) opcode);\n+    str_hash_insert (mmix_opcode_hash, opcode->name, opcode, 0);\n \n   /* We always insert the ordinary registers 0..255 as registers.  */\n   for (i = 0; i < 256; i++)"
    },
    {
      "sha": "447f02aad676c70d904147ba0069ae647ebeeebb",
      "filename": "gas/config/tc-mn10200.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mn10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mn10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mn10200.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -698,7 +698,7 @@ md_begin (void)\n       if (strcmp (prev_name, op->name))\n \t{\n \t  prev_name = (char *) op->name;\n-\t  str_hash_insert (mn10200_hash, op->name, (char *) op);\n+\t  str_hash_insert (mn10200_hash, op->name, op, 0);\n \t}\n       op++;\n     }"
    },
    {
      "sha": "a2567e4ceb2d81f6b79077a5599fb4ef936f4ad2",
      "filename": "gas/config/tc-mn10300.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mn10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-mn10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mn10300.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -924,7 +924,7 @@ md_begin (void)\n       if (strcmp (prev_name, op->name))\n \t{\n \t  prev_name = (char *) op->name;\n-\t  str_hash_insert (mn10300_hash, op->name, (char *) op);\n+\t  str_hash_insert (mn10300_hash, op->name, op, 0);\n \t}\n       op++;\n     }"
    },
    {
      "sha": "b539d267b0927b6483aa8e3dac794951396af578",
      "filename": "gas/config/tc-moxie.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-moxie.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-moxie.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-moxie.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -66,13 +66,13 @@ md_begin (void)\n \n   /* Insert names into hash table.  */\n   for (count = 0, opcode = moxie_form1_opc_info; count++ < 64; opcode++)\n-    str_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+    str_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n \n   for (count = 0, opcode = moxie_form2_opc_info; count++ < 4; opcode++)\n-    str_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+    str_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n \n   for (count = 0, opcode = moxie_form3_opc_info; count++ < 10; opcode++)\n-    str_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+    str_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n \n   bfd_set_arch_mach (stdoutput, TARGET_ARCH, 0);\n }"
    },
    {
      "sha": "2738937b11237e78e57b4290f4260f7c6f740dc8",
      "filename": "gas/config/tc-msp430.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-msp430.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1828,8 +1828,7 @@ md_begin (void)\n   msp430_hash = str_htab_create ();\n \n   for (opcode = msp430_opcodes; opcode->name; opcode++)\n-    if (str_hash_find (msp430_hash, opcode->name) == NULL)\n-      str_hash_insert (msp430_hash, opcode->name, (char *) opcode);\n+    str_hash_insert (msp430_hash, opcode->name, opcode, 0);\n \n   bfd_set_arch_mach (stdoutput, TARGET_ARCH,\n \t\t     target_is_430x () ? bfd_mach_msp430x : bfd_mach_msp11);"
    },
    {
      "sha": "62bbad7409297076e93752918ca7fb9806ad954f",
      "filename": "gas/config/tc-nds32.c",
      "status": "modified",
      "additions": 8,
      "deletions": 17,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -3432,21 +3432,12 @@ static struct nds32_pseudo_opcode nds32_pseudo_opcode_table[] =\n static void\n nds32_init_nds32_pseudo_opcodes (void)\n {\n-  struct nds32_pseudo_opcode *opcode = nds32_pseudo_opcode_table;\n+  struct nds32_pseudo_opcode *opcode;\n \n   nds32_pseudo_opcode_hash = str_htab_create ();\n-  for ( ; opcode->opcode; opcode++)\n-    {\n-      void *op;\n-\n-      op = str_hash_find (nds32_pseudo_opcode_hash, opcode->opcode);\n-      if (op != NULL)\n-\t{\n-\t  as_warn (_(\"Duplicated pseudo-opcode %s.\"), opcode->opcode);\n-\t  continue;\n-\t}\n-      str_hash_insert (nds32_pseudo_opcode_hash, opcode->opcode, opcode);\n-    }\n+  for (opcode = nds32_pseudo_opcode_table; opcode->opcode; opcode++)\n+    if (str_hash_insert (nds32_pseudo_opcode_hash, opcode->opcode, opcode, 0))\n+      as_fatal (_(\"duplicate %s\"), opcode->opcode);\n }\n \n static struct nds32_pseudo_opcode *\n@@ -4296,7 +4287,7 @@ nds32_relax_hint (int mode ATTRIBUTE_UNUSED)\n     {\n       relocs = XNEW (struct nds32_relocs_pattern);\n       memset (relocs, 0, sizeof (struct nds32_relocs_pattern));\n-      str_hash_insert (nds32_hint_hash, name, relocs);\n+      str_hash_insert (nds32_hint_hash, name, relocs, 0);\n     }\n   else\n     {\n@@ -4625,12 +4616,12 @@ md_begin (void)\n   /* Initial general purpose registers hash table.  */\n   nds32_gprs_hash = str_htab_create ();\n   for (k = keyword_gpr; k->name; k++)\n-    str_hash_insert (nds32_gprs_hash, k->name, k);\n+    str_hash_insert (nds32_gprs_hash, k->name, k, 0);\n \n   /* Initial branch hash table.  */\n   nds32_relax_info_hash = str_htab_create ();\n   for (relax_info = relax_table; relax_info->opcode; relax_info++)\n-    str_hash_insert (nds32_relax_info_hash, relax_info->opcode, relax_info);\n+    str_hash_insert (nds32_relax_info_hash, relax_info->opcode, relax_info, 0);\n \n   /* Initial relax hint hash table.  */\n   nds32_hint_hash = str_htab_create ();\n@@ -5940,7 +5931,7 @@ nds32_match_hint_insn (struct nds32_opcode *opcode, uint32_t seq)\n /* Append relax relocation for link time relaxing.  */\n \n static void\n-nds32_elf_append_relax_relocs (const char *key, void *value)\n+nds32_elf_append_relax_relocs (const char *key, const void *value)\n {\n   struct nds32_relocs_pattern *relocs_pattern =\n     (struct nds32_relocs_pattern *) value;"
    },
    {
      "sha": "467e2c9500333c5cbd48065ebf4cbc0a1135c9a0",
      "filename": "gas/config/tc-nios2.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nios2.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -3624,16 +3624,20 @@ md_begin (void)\n   nios2_ps_hash = str_htab_create ();\n \n   for (i = 0; i < nios2_num_opcodes; ++i)\n-    str_hash_insert (nios2_opcode_hash, nios2_opcodes[i].name,\n-\t\t     (PTR) & nios2_opcodes[i]);\n+    if (str_hash_insert (nios2_opcode_hash, nios2_opcodes[i].name,\n+\t\t\t &nios2_opcodes[i], 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), nios2_opcodes[i].name);\n \n   for (i = 0; i < nios2_num_regs; ++i)\n-    str_hash_insert (nios2_reg_hash, nios2_regs[i].name,\n-\t\t     (PTR) & nios2_regs[i]);\n+    if (str_hash_insert (nios2_reg_hash, nios2_regs[i].name,\n+\t\t\t &nios2_regs[i], 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), nios2_regs[i].name);\n \n   for (i = 0; i < nios2_num_ps_insn_info_structs; ++i)\n-    str_hash_insert (nios2_ps_hash, nios2_ps_insn_info_structs[i].pseudo_insn,\n-\t\t     (PTR) & nios2_ps_insn_info_structs[i]);\n+    if (str_hash_insert (nios2_ps_hash,\n+\t\t\t nios2_ps_insn_info_structs[i].pseudo_insn,\n+\t\t\t &nios2_ps_insn_info_structs[i], 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), nios2_ps_insn_info_structs[i].pseudo_insn);\n \n   /* Assembler option defaults.  */\n   nios2_as_options.noat = FALSE;"
    },
    {
      "sha": "531fd6fa73e358ebaa422469f6fd743e3dfb926f",
      "filename": "gas/config/tc-ns32k.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ns32k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ns32k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ns32k.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1103,7 +1103,8 @@ parse (const char *line, int recursive_level)\n       c = *lineptr;\n       *(char *) lineptr = '\\0';\n \n-      if (!(desc = (struct ns32k_opcode *) str_hash_find (inst_hash_handle, line)))\n+      desc = (struct ns32k_opcode *) str_hash_find (inst_hash_handle, line);\n+      if (!desc)\n \tas_fatal (_(\"No such opcode\"));\n \n       *(char *) lineptr = c;\n@@ -1901,7 +1902,8 @@ md_begin (void)\n \n   endop = ns32k_opcodes + sizeof (ns32k_opcodes) / sizeof (ns32k_opcodes[0]);\n   for (ptr = ns32k_opcodes; ptr < endop; ptr++)\n-    str_hash_insert (inst_hash_handle, ptr->name, (char *) ptr);\n+    if (str_hash_insert (inst_hash_handle, ptr->name, ptr, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), ptr->name);\n \n   /* Some private space please!  */\n   freeptr_static = XNEWVEC (char, PRIVATE_SIZE);"
    },
    {
      "sha": "9a2497872455b9aad390638259e23889be5503d6",
      "filename": "gas/config/tc-pdp11.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-pdp11.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -193,9 +193,9 @@ md_begin (void)\n     as_fatal (_(\"Virtual memory exhausted\"));\n \n   for (i = 0; i < pdp11_num_opcodes; i++)\n-    str_hash_insert (insn_hash, pdp11_opcodes[i].name, (void *) (pdp11_opcodes + i));\n+    str_hash_insert (insn_hash, pdp11_opcodes[i].name, pdp11_opcodes + i, 0);\n   for (i = 0; i < pdp11_num_aliases; i++)\n-    str_hash_insert (insn_hash, pdp11_aliases[i].name, (void *) (pdp11_aliases + i));\n+    str_hash_insert (insn_hash, pdp11_aliases[i].name, pdp11_aliases + i, 0);\n }\n \n void"
    },
    {
      "sha": "bc4b8cb117c698c3c60a5eb4c8cc1ff7f1d71fc9",
      "filename": "gas/config/tc-pj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-pj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-pj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-pj.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -176,7 +176,7 @@ fake_opcode (const char *name,\n   fake->opcode = -1;\n   fake->opcode_next = -1;\n   fake->u.func = func;\n-  str_hash_insert (opcode_hash_control, name, (char *) fake);\n+  str_hash_insert (opcode_hash_control, name, fake, 0);\n }\n \n /* Enter another entry into the opcode hash table so the same opcode\n@@ -186,7 +186,7 @@ static void\n alias (const char *new_name, const char *old)\n {\n   str_hash_insert (opcode_hash_control, new_name,\n-\t       (char *) str_hash_find (opcode_hash_control, old));\n+\t\t   str_hash_find (opcode_hash_control, old), 0);\n }\n \n /* This function is called once, at assembler startup time.  It sets\n@@ -201,7 +201,7 @@ md_begin (void)\n \n   /* Insert names into hash table.  */\n   for (opcode = pj_opc_info; opcode->u.name; opcode++)\n-    str_hash_insert (opcode_hash_control, opcode->u.name, (char *) opcode);\n+    str_hash_insert (opcode_hash_control, opcode->u.name, opcode, 0);\n \n   /* Insert the only fake opcode.  */\n   fake_opcode (\"ipush\", ipush_code);"
    },
    {
      "sha": "1ff1cd9eab2bd1ea1267db2f31edaf1c2a773fd3",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 37,
      "deletions": 16,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1682,13 +1682,17 @@ ppc_setup_opcodes (void)\n \t}\n \n       if ((ppc_cpu & op->flags) != 0\n-\t  && !(ppc_cpu & op->deprecated))\n-\tstr_hash_insert (ppc_hash, op->name, (void *) op);\n+\t  && !(ppc_cpu & op->deprecated)\n+\t  && str_hash_insert (ppc_hash, op->name, op, 0) != NULL)\n+\t{\n+\t  as_bad (_(\"duplicate %s\"), op->name);\n+\t  bad_insn = TRUE;\n+\t}\n     }\n \n   if ((ppc_cpu & PPC_OPCODE_ANY) != 0)\n     for (op = powerpc_opcodes; op < op_end; op++)\n-      str_hash_insert (ppc_hash, op->name, (void *) op);\n+      str_hash_insert (ppc_hash, op->name, op, 0);\n \n   op_end = prefix_opcodes + prefix_num_opcodes;\n   for (op = prefix_opcodes; op < op_end; op++)\n@@ -1716,13 +1720,17 @@ ppc_setup_opcodes (void)\n \t}\n \n       if ((ppc_cpu & op->flags) != 0\n-\t  && !(ppc_cpu & op->deprecated))\n-\tstr_hash_insert (ppc_hash, op->name, (void *) op);\n+\t  && !(ppc_cpu & op->deprecated)\n+\t  && str_hash_insert (ppc_hash, op->name, op, 0) != NULL)\n+\t{\n+\t  as_bad (_(\"duplicate %s\"), op->name);\n+\t  bad_insn = TRUE;\n+\t}\n     }\n \n   if ((ppc_cpu & PPC_OPCODE_ANY) != 0)\n     for (op = prefix_opcodes; op < op_end; op++)\n-      str_hash_insert (ppc_hash, op->name, (void *) op);\n+      str_hash_insert (ppc_hash, op->name, op, 0);\n \n   op_end = vle_opcodes + vle_num_opcodes;\n   for (op = vle_opcodes; op < op_end; op++)\n@@ -1751,8 +1759,12 @@ ppc_setup_opcodes (void)\n \t}\n \n       if ((ppc_cpu & op->flags) != 0\n-\t  && !(ppc_cpu & op->deprecated))\n-\tstr_hash_insert (ppc_hash, op->name, (void *) op);\n+\t  && !(ppc_cpu & op->deprecated)\n+\t  && str_hash_insert (ppc_hash, op->name, op, 0) != NULL)\n+\t{\n+\t  as_bad (_(\"duplicate %s\"), op->name);\n+\t  bad_insn = TRUE;\n+\t}\n     }\n \n   /* SPE2 instructions */\n@@ -1785,23 +1797,31 @@ ppc_setup_opcodes (void)\n \t      bad_insn |= insn_validate (op);\n \t    }\n \n-\t  if ((ppc_cpu & op->flags) != 0 && !(ppc_cpu & op->deprecated))\n-\t    str_hash_insert (ppc_hash, op->name, (void *) op);\n+\t  if ((ppc_cpu & op->flags) != 0\n+\t      && !(ppc_cpu & op->deprecated)\n+\t      && str_hash_insert (ppc_hash, op->name, op, 0) != NULL)\n+\t    {\n+\t      as_bad (_(\"duplicate %s\"), op->name);\n+\t      bad_insn = TRUE;\n+\t    }\n \t}\n \n       for (op = spe2_opcodes; op < op_end; op++)\n-\tstr_hash_insert (ppc_hash, op->name, (void *) op);\n+\tstr_hash_insert (ppc_hash, op->name, op, 0);\n     }\n \n   /* Insert the macros into a hash table.  */\n   ppc_macro_hash = str_htab_create ();\n \n   macro_end = powerpc_macros + powerpc_num_macros;\n   for (macro = powerpc_macros; macro < macro_end; macro++)\n-    {\n-      if ((macro->flags & ppc_cpu) != 0 || (ppc_cpu & PPC_OPCODE_ANY) != 0)\n-\tstr_hash_insert (ppc_macro_hash, macro->name, (void *) macro);\n-    }\n+    if (((macro->flags & ppc_cpu) != 0\n+\t || (ppc_cpu & PPC_OPCODE_ANY) != 0)\n+\t&& str_hash_insert (ppc_macro_hash, macro->name, macro, 0) != NULL)\n+      {\n+\tas_bad (_(\"duplicate %s\"), macro->name);\n+\tbad_insn = TRUE;\n+      }\n \n   if (bad_insn)\n     abort ();\n@@ -3116,7 +3136,8 @@ md_assemble (char *str)\n     {\n       const struct powerpc_macro *macro;\n \n-      macro = (const struct powerpc_macro *) str_hash_find (ppc_macro_hash, str);\n+      macro = (const struct powerpc_macro *) str_hash_find (ppc_macro_hash,\n+\t\t\t\t\t\t\t    str);\n       if (macro == (const struct powerpc_macro *) NULL)\n \tas_bad (_(\"unrecognized opcode: `%s'\"), str);\n       else"
    },
    {
      "sha": "25df0a3d76d876d1e32fca83b0433556e410c33e",
      "filename": "gas/config/tc-pru.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-pru.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1564,12 +1564,13 @@ md_begin (void)\n   pru_reg_hash = str_htab_create ();\n \n   for (i = 0; i < NUMOPCODES; ++i)\n-    str_hash_insert (pru_opcode_hash, pru_opcodes[i].name,\n-\t\t     (PTR) & pru_opcodes[i]);\n+    if (str_hash_insert (pru_opcode_hash, pru_opcodes[i].name,\n+\t\t\t &pru_opcodes[i], 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), pru_opcodes[i].name);\n \n   for (i = 0; i < pru_num_regs; ++i)\n-    str_hash_insert (pru_reg_hash, pru_regs[i].name,\n-\t\t     (PTR) & pru_regs[i]);\n+    if (str_hash_insert (pru_reg_hash, pru_regs[i].name, &pru_regs[i], 0))\n+      as_fatal (_(\"duplicate %s\"), pru_regs[i].name);\n \n   linkrelax = pru_opt.link_relax;\n   /* Initialize the alignment data.  */"
    },
    {
      "sha": "bcdbc3a41efdd57bbe8f693d1f545bf29ae58cd3",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -253,7 +253,8 @@ init_ext_version_hash (const struct riscv_ext_version *table)\n   while (table[i].name)\n     {\n       const char *name = table[i].name;\n-      str_hash_insert (hash, name, (void *) &table[i]);\n+      if (str_hash_insert (hash, name, &table[i], 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n \n       i++;\n       while (table[i].name\n@@ -558,7 +559,8 @@ init_opcode_names_hash (void)\n   const struct opcode_name_t *opcode;\n \n   for (opcode = &opcode_name_list[0]; opcode->name != NULL; ++opcode)\n-    str_hash_insert (opcode_names_hash, opcode->name, (void *)opcode);\n+    if (str_hash_insert (opcode_names_hash, opcode->name, opcode, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), opcode->name);\n }\n \n /* Find `s` is a valid opcode name or not,\n@@ -614,7 +616,8 @@ static void\n hash_reg_name (enum reg_class class, const char *name, unsigned n)\n {\n   void *hash = ENCODE_REG_HASH (class, n);\n-  str_hash_insert (reg_names_hash, name, hash);\n+  if (str_hash_insert (reg_names_hash, name, hash, 0) != NULL)\n+    as_fatal (_(\"duplicate %s\"), name);\n }\n \n static void\n@@ -665,7 +668,7 @@ riscv_init_csr_hash (const char *name,\n      Otherwise, attach the extra information to the entry which is already\n      in the hash table.  */\n   if (pre_entry == NULL)\n-    str_hash_insert (csr_extra_hash, name, (void *) entry);\n+    str_hash_insert (csr_extra_hash, name, entry, 0);\n   else\n     pre_entry->next = entry;\n }\n@@ -998,7 +1001,8 @@ init_opcode_hash (const struct riscv_opcode *opcodes,\n   while (opcodes[i].name)\n     {\n       const char *name = opcodes[i].name;\n-      str_hash_insert (hash, name, (void *) &opcodes[i]);\n+      if (str_hash_insert (hash, name, &opcodes[i], 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), name);\n \n       do\n \t{"
    },
    {
      "sha": "427a5991d1dbd06237429270fb8716a77b25e6ee",
      "filename": "gas/config/tc-s390.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-s390.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -530,8 +530,12 @@ s390_setup_opcodes (void)\n \t  f = (op->flags & S390_INSTR_FLAG_FACILITY_MASK);\n \t  use_opcode = ((f & current_flags) == f);\n \t}\n-      if (use_opcode)\n-\tstr_hash_insert (s390_opcode_hash, op->name, (void *) op);\n+      if (use_opcode\n+\t  && str_hash_insert (s390_opcode_hash, op->name, op, 0) != NULL)\n+\t{\n+\t  as_bad (_(\"duplicate %s\"), op->name);\n+\t  dup_insn = TRUE;\n+\t}\n \n       while (op < op_end - 1 && strcmp (op->name, op[1].name) == 0)\n \top++;\n@@ -566,7 +570,8 @@ md_begin (void)\n \n   op_end = s390_opformats + s390_num_opformats;\n   for (op = s390_opformats; op < op_end; op++)\n-    str_hash_insert (s390_opformat_hash, op->name, (void *) op);\n+    if (str_hash_insert (s390_opformat_hash, op->name, op, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), op->name);\n \n   s390_setup_opcodes ();\n "
    },
    {
      "sha": "739df158415e5a3c6a95aef12590fa4f8e003a50",
      "filename": "gas/config/tc-score.c",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-score.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -2203,7 +2203,8 @@ s3_dependency_type_from_insn (char *insn_name)\n   const struct s3_insn_to_dependency *tmp;\n \n   strcpy (name, insn_name);\n-  tmp = (const struct s3_insn_to_dependency *) str_hash_find (s3_dependency_insn_hsh, name);\n+  tmp = (const struct s3_insn_to_dependency *)\n+    str_hash_find (s3_dependency_insn_hsh, name);\n \n   if (tmp)\n     return tmp->type;\n@@ -2662,7 +2663,8 @@ s3_parse_16_32_inst (char *insnstr, bfd_boolean gen_frag_p)\n   c = *p;\n   *p = '\\0';\n \n-  opcode = (const struct s3_asm_opcode *) str_hash_find (s3_score_ops_hsh, operator);\n+  opcode = (const struct s3_asm_opcode *) str_hash_find (s3_score_ops_hsh,\n+\t\t\t\t\t\t\t operator);\n   *p = c;\n \n   memset (&s3_inst, '\\0', sizeof (s3_inst));\n@@ -2708,7 +2710,8 @@ s3_parse_48_inst (char *insnstr, bfd_boolean gen_frag_p)\n   c = *p;\n   *p = '\\0';\n \n-  opcode = (const struct s3_asm_opcode *) str_hash_find (s3_score_ops_hsh, operator);\n+  opcode = (const struct s3_asm_opcode *) str_hash_find (s3_score_ops_hsh,\n+\t\t\t\t\t\t\t operator);\n   *p = c;\n \n   memset (&s3_inst, '\\0', sizeof (s3_inst));\n@@ -6265,8 +6268,8 @@ s3_insert_reg (const struct s3_reg_entry *r, htab_t htab)\n     }\n   buf2[i] = '\\0';\n \n-  str_hash_insert (htab, buf, (void *) r);\n-  str_hash_insert (htab, buf2, (void *) r);\n+  str_hash_insert (htab, buf, r, 0);\n+  str_hash_insert (htab, buf2, r, 0);\n }\n \n static void\n@@ -6310,7 +6313,7 @@ s3_build_score_ops_hsh (void)\n       new_opcode->type = insn->type;\n       new_opcode->bitmask = insn->bitmask;\n       str_hash_insert (s3_score_ops_hsh, new_opcode->template_name,\n-                   (void *) new_opcode);\n+\t\t       new_opcode, 0);\n     }\n }\n \n@@ -6336,8 +6339,7 @@ s3_build_dependency_insn_hsh (void)\n       strcpy (buf, tmp->insn_name);\n       new_i2n->insn_name = buf;\n       new_i2n->type = tmp->type;\n-      str_hash_insert (s3_dependency_insn_hsh, new_i2n->insn_name,\n-                   (void *) new_i2n);\n+      str_hash_insert (s3_dependency_insn_hsh, new_i2n->insn_name, new_i2n, 0);\n     }\n }\n "
    },
    {
      "sha": "aba8b6c9ab45c0f85439ed8ded7d3c7b545b54f2",
      "filename": "gas/config/tc-score7.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-score7.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -2321,7 +2321,8 @@ s7_dependency_type_from_insn (char *insn_name)\n   const struct s7_insn_to_dependency *tmp;\n \n   strcpy (name, insn_name);\n-  tmp = (const struct s7_insn_to_dependency *) str_hash_find (s7_dependency_insn_hsh, name);\n+  tmp = (const struct s7_insn_to_dependency *)\n+    str_hash_find (s7_dependency_insn_hsh, name);\n \n   if (tmp)\n     return tmp->type;\n@@ -2789,7 +2790,8 @@ s7_parse_16_32_inst (char *insnstr, bfd_boolean gen_frag_p)\n   c = *p;\n   *p = '\\0';\n \n-  opcode = (const struct s7_asm_opcode *) str_hash_find (s7_score_ops_hsh, operator);\n+  opcode = (const struct s7_asm_opcode *) str_hash_find (s7_score_ops_hsh,\n+\t\t\t\t\t\t\t operator);\n   *p = c;\n \n   memset (&s7_inst, '\\0', sizeof (s7_inst));\n@@ -5104,7 +5106,7 @@ s7_build_score_ops_hsh (void)\n       new_opcode->type = insn->type;\n       new_opcode->bitmask = insn->bitmask;\n       str_hash_insert (s7_score_ops_hsh, new_opcode->template_name,\n-                   (void *) new_opcode);\n+\t\t       new_opcode, 0);\n     }\n }\n \n@@ -5130,8 +5132,7 @@ s7_build_dependency_insn_hsh (void)\n       strcpy (insn_name, tmp->insn_name);\n       new_i2d->insn_name = insn_name;\n       new_i2d->type = tmp->type;\n-      str_hash_insert (s7_dependency_insn_hsh, new_i2d->insn_name,\n-                   (void *) new_i2d);\n+      str_hash_insert (s7_dependency_insn_hsh, new_i2d->insn_name, new_i2d, 0);\n     }\n }\n \n@@ -5359,8 +5360,8 @@ s7_insert_reg (const struct s7_reg_entry *r, htab_t htab)\n     }\n   buf2[i] = '\\0';\n \n-  str_hash_insert (htab, buf, (void *) r);\n-  str_hash_insert (htab, buf2, (void *) r);\n+  str_hash_insert (htab, buf, r, 0);\n+  str_hash_insert (htab, buf2, r, 0);\n }\n \n static void"
    },
    {
      "sha": "e1e509d7d2df5a0159d83c42f635855f2a76bf7a",
      "filename": "gas/config/tc-sh.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-sh.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -574,7 +574,7 @@ md_begin (void)\n \t  if (!SH_MERGE_ARCH_SET_VALID (opcode->arch, target_arch))\n \t    continue;\n \t  prev_name = opcode->name;\n-\t  str_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+\t  str_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n \t}\n     }\n }"
    },
    {
      "sha": "d48112ec0af009aa94da8e9037ce6a193f0a92b5",
      "filename": "gas/config/tc-sparc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-sparc.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -956,7 +956,11 @@ md_begin (void)\n   while (i < (unsigned int) sparc_num_opcodes)\n     {\n       const char *name = sparc_opcodes[i].name;\n-      str_hash_insert (op_hash, name, (void *) &sparc_opcodes[i]);\n+      if (str_hash_insert (op_hash, name, &sparc_opcodes[i], 0) != NULL)\n+\t{\n+\t  as_bad (_(\"duplicate %s\"), name);\n+\t  lose = 1;\n+\t}\n       do\n \t{\n \t  if (sparc_opcodes[i].match & sparc_opcodes[i].lose)\n@@ -984,9 +988,11 @@ md_begin (void)\n \t\t  name, native_op_table[i].name);\n \t  lose = 1;\n \t}\n-      else\n-\tstr_hash_insert (op_hash, native_op_table[i].name,\n-\t\t\t (void *) insn);\n+      else if (str_hash_insert (op_hash, native_op_table[i].name, insn, 0))\n+\t{\n+\t  as_bad (_(\"duplicate %s\"), native_op_table[i].name);\n+\t  lose = 1;\n+\t}\n     }\n \n   if (lose)"
    },
    {
      "sha": "e2ddf0c6351acea073c964b962fd94c4e3b04632",
      "filename": "gas/config/tc-spu.c",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-spu.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -112,17 +112,12 @@ md_begin (void)\n {\n   int i;\n \n-  /* initialize hash table */\n-\n   op_hash = str_htab_create ();\n \n-  /* loop until you see the end of the list */\n-\n+  /* Hash each mnemonic and record its position.  There are\n+     duplicates, keep just the first.  */\n   for (i = 0; i < spu_num_opcodes; i++)\n-    /* hash each mnemonic and record its position */\n-    if (str_hash_find (op_hash, spu_opcodes[i].mnemonic) == NULL)\n-      str_hash_insert (op_hash, spu_opcodes[i].mnemonic,\n-\t\t       (void *) &spu_opcodes[i]);\n+    str_hash_insert (op_hash, spu_opcodes[i].mnemonic, &spu_opcodes[i], 0);\n }\n \f\n const char *md_shortopts = \"\";"
    },
    {
      "sha": "1490c6748ae35c7e4e8948ef310d5d946b9f7bc5",
      "filename": "gas/config/tc-tic30.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic30.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic30.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic30.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -117,8 +117,8 @@ md_begin (void)\n     const insn_template *current_optab = tic30_optab;\n \n     for (; current_optab < tic30_optab_end; current_optab++)\n-      str_hash_insert (op_hash, current_optab->name,\n-\t\t       (char *) current_optab);\n+      if (str_hash_insert (op_hash, current_optab->name, current_optab, 0))\n+\tas_fatal (_(\"duplicate %s\"), current_optab->name);\n   }\n \n   parop_hash = str_htab_create ();\n@@ -127,8 +127,8 @@ md_begin (void)\n     const partemplate *current_parop = tic30_paroptab;\n \n     for (; current_parop < tic30_paroptab_end; current_parop++)\n-      str_hash_insert (parop_hash, current_parop->name,\n-\t\t       (char *) current_parop);\n+      if (str_hash_insert (parop_hash, current_parop->name, current_parop, 0))\n+\tas_fatal (_(\"duplicate %s\"), current_parop->name);\n   }\n \n   reg_hash = str_htab_create ();\n@@ -137,8 +137,8 @@ md_begin (void)\n     const reg *current_reg = tic30_regtab;\n \n     for (; current_reg < tic30_regtab_end; current_reg++)\n-      str_hash_insert (reg_hash, current_reg->name,\n-\t\t       (char *) current_reg);\n+      if (str_hash_insert (reg_hash, current_reg->name, current_reg, 0))\n+\tas_fatal (_(\"duplicate %s\"), current_reg->name);\n   }\n \n   ind_hash = str_htab_create ();\n@@ -147,8 +147,8 @@ md_begin (void)\n     const ind_addr_type *current_ind = tic30_indaddr_tab;\n \n     for (; current_ind < tic30_indaddrtab_end; current_ind++)\n-      str_hash_insert (ind_hash, current_ind->syntax,\n-\t\t       (char *) current_ind);\n+      if (str_hash_insert (ind_hash, current_ind->syntax, current_ind, 0))\n+\tas_fatal (_(\"duplicate %s\"), current_ind->syntax);\n   }\n \n   /* Fill in lexical tables:  opcode_chars, operand_chars, space_chars.  */"
    },
    {
      "sha": "f1eb5bfb41e15083bb3f3ca07e5b78549feec4d3",
      "filename": "gas/config/tc-tic4x.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic4x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic4x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic4x.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -727,7 +727,7 @@ tic4x_asg (int x ATTRIBUTE_UNUSED)\n   c = get_symbol_name (&name);\t/* Get terminator.  */\n   str = xstrdup (str);\n   name = xstrdup (name);\n-  str_hash_insert (tic4x_asg_hash, name, str);\n+  str_hash_insert (tic4x_asg_hash, name, str, 1);\n   (void) restore_line_pointer (c);\n   demand_empty_rest_of_line ();\n }\n@@ -1215,7 +1215,9 @@ tic4x_inst_insert (const tic4x_inst_t *inst)\n   if (!strcmp (inst->name, prev_name) || inst->name[0] == '\\0')\n     return;\n \n-  str_hash_insert (tic4x_op_hash, inst->name, (void *) inst);\n+  if (str_hash_insert (tic4x_op_hash, inst->name, inst, 0) != NULL)\n+    as_fatal (_(\"duplicate %s\"), inst->name);\n+\n   strcpy (prev_name, inst->name);\n }\n "
    },
    {
      "sha": "62d49d9bc8b0b011d0c48459d38f42eb4c2d116f",
      "filename": "gas/config/tc-tic54x.c",
      "status": "modified",
      "additions": 39,
      "deletions": 41,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic54x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic54x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic54x.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -567,7 +567,7 @@ stag_add_field_symbols (struct stag *stag,\n \n \t  replacement = concat (S_GET_NAME (rootsym), \"+\", root_stag_name,\n \t\t\t\tname + strlen (S_GET_NAME (rootsym)), NULL);\n-\t  str_hash_insert (subsym_hash[0], name, replacement);\n+\t  str_hash_insert (subsym_hash[0], name, replacement, 0);\n \t}\n \n       /* Recurse if the field is a structure.\n@@ -738,7 +738,7 @@ tic54x_endstruct (int is_union)\n   /* Nested .structs don't get put in the stag table.  */\n   if (current_stag->outer == NULL)\n     {\n-      str_hash_insert (stag_hash, current_stag->name, current_stag);\n+      str_hash_insert (stag_hash, current_stag->name, current_stag, 0);\n       stag_add_field_symbols (current_stag, path,\n \t\t\t      S_GET_VALUE (current_stag->sym),\n \t\t\t      NULL, NULL);\n@@ -2236,7 +2236,7 @@ tic54x_var (int ignore ATTRIBUTE_UNUSED)\n       c = get_symbol_name (&name);\n       /* .var symbols start out with a null string.  */\n       name = xstrdup (name);\n-      str_hash_insert (subsym_hash[macro_level], name, empty);\n+      str_hash_insert (subsym_hash[macro_level], name, empty, 0);\n       c = restore_line_pointer (c);\n       if (c == ',')\n \t{\n@@ -2521,7 +2521,7 @@ tic54x_macro_info (const macro_entry *macro)\n \n       name[entry->name.len] = '\\0';\n       value[entry->actual.len] = '\\0';\n-      str_hash_insert (subsym_hash[macro_level], name, value);\n+      str_hash_insert (subsym_hash[macro_level], name, value, 0);\n     }\n }\n \n@@ -2991,18 +2991,12 @@ md_begin (void)\n \n   op_hash = str_htab_create ();\n   for (tm = (insn_template *) tic54x_optab; tm->name; tm++)\n-    {\n-      if (str_hash_find (op_hash, tm->name))\n-\tcontinue;\n-      str_hash_insert (op_hash, tm->name, (char *) tm);\n-    }\n+    str_hash_insert (op_hash, tm->name, tm, 0);\n+\n   parop_hash = str_htab_create ();\n   for (tm = (insn_template *) tic54x_paroptab; tm->name; tm++)\n-    {\n-      if (str_hash_find (parop_hash, tm->name))\n-\tcontinue;\n-      str_hash_insert (parop_hash, tm->name, (char *) tm);\n-    }\n+    str_hash_insert (parop_hash, tm->name, tm, 0);\n+\n   reg_hash = str_htab_create ();\n   for (sym = (tic54x_symbol *) regs; sym->name; sym++)\n     {\n@@ -3011,51 +3005,48 @@ md_begin (void)\n \t\t\t\t     &zero_address_frag, sym->value);\n       SF_SET_LOCAL (symbolP);\n       symbol_table_insert (symbolP);\n-      str_hash_insert (reg_hash, sym->name, (char *) sym);\n+      str_hash_insert (reg_hash, sym->name, sym, 0);\n     }\n   for (sym = (tic54x_symbol *) mmregs; sym->name; sym++)\n-    str_hash_insert (reg_hash, sym->name, (char *) sym);\n+    str_hash_insert (reg_hash, sym->name, sym, 0);\n   mmreg_hash = str_htab_create ();\n   for (sym = (tic54x_symbol *) mmregs; sym->name; sym++)\n-    str_hash_insert (mmreg_hash, sym->name, (char *) sym);\n+    str_hash_insert (mmreg_hash, sym->name, sym, 0);\n \n   cc_hash = str_htab_create ();\n   for (sym = (tic54x_symbol *) condition_codes; sym->name; sym++)\n-    str_hash_insert (cc_hash, sym->name, (char *) sym);\n+    str_hash_insert (cc_hash, sym->name, sym, 0);\n \n   cc2_hash = str_htab_create ();\n   for (sym = (tic54x_symbol *) cc2_codes; sym->name; sym++)\n-    str_hash_insert (cc2_hash, sym->name, (char *) sym);\n+    str_hash_insert (cc2_hash, sym->name, sym, 0);\n \n   cc3_hash = str_htab_create ();\n   for (sym = (tic54x_symbol *) cc3_codes; sym->name; sym++)\n-    str_hash_insert (cc3_hash, sym->name, (char *) sym);\n+    str_hash_insert (cc3_hash, sym->name, sym, 0);\n \n   sbit_hash = str_htab_create ();\n   for (sym = (tic54x_symbol *) status_bits; sym->name; sym++)\n-    str_hash_insert (sbit_hash, sym->name, (char *) sym);\n+    str_hash_insert (sbit_hash, sym->name, sym, 0);\n \n   misc_symbol_hash = str_htab_create ();\n   for (symname = (char **) misc_symbols; *symname; symname++)\n-    str_hash_insert (misc_symbol_hash, *symname, *symname);\n+    str_hash_insert (misc_symbol_hash, *symname, *symname, 0);\n \n   /* Only the base substitution table and local label table are initialized;\n      the others (for local macro substitution) get instantiated as needed.  */\n   local_label_hash[0] = str_htab_create ();\n   subsym_hash[0] = str_htab_create ();\n   for (subsym_proc = subsym_procs; subsym_proc->name; subsym_proc++)\n-    str_hash_insert (subsym_hash[0], subsym_proc->name,\n-\t\t     (char *) subsym_proc);\n+    str_hash_insert (subsym_hash[0], subsym_proc->name, subsym_proc, 0);\n \n   math_hash = str_htab_create ();\n   for (math_proc = math_procs; math_proc->name; math_proc++)\n     {\n       /* Insert into the main subsym hash for recognition; insert into\n \t the math hash to actually store information.  */\n-      str_hash_insert (subsym_hash[0], math_proc->name,\n-\t\t       (char *) math_proc);\n-      str_hash_insert (math_hash, math_proc->name,\n-\t\t       (char *) math_proc);\n+      str_hash_insert (subsym_hash[0], math_proc->name, math_proc, 0);\n+      str_hash_insert (math_hash, math_proc->name, math_proc, 0);\n     }\n   subsym_recurse_hash = str_htab_create ();\n   stag_hash = str_htab_create ();\n@@ -4170,7 +4161,7 @@ tic54x_parse_insn (tic54x_insn *insn, char *line)\n \t  if (optimize_insn (insn))\n \t    {\n \t      insn->tm = (insn_template *) str_hash_find (op_hash,\n-                                                      insn->mnemonic);\n+\t\t\t\t\t\t\t  insn->mnemonic);\n \t      continue;\n \t    }\n \n@@ -4335,8 +4326,12 @@ subsym_create_or_replace (char *name, char *value)\n   int i;\n \n   for (i = macro_level; i > 0; i--)\n-    str_hash_insert (subsym_hash[i], name, value);\n-  str_hash_insert (subsym_hash[0], name, value);\n+    if (str_hash_find (subsym_hash[i], name))\n+      {\n+\tstr_hash_insert (subsym_hash[i], name, value, 1);\n+\treturn;\n+      }\n+  str_hash_insert (subsym_hash[0], name, value, 1);\n }\n \n /* Look up the substitution string replacement for the given symbol.\n@@ -4495,7 +4490,8 @@ subsym_substitute (char *line, int forced)\n \t\t    value[strlen (value) - 1] = '\\0';\n \t\t  sprintf (digit, \".%d\", local_label_id++);\n \t\t  strcat (value, digit);\n-\t\t  str_hash_insert (local_label_hash[macro_level], namecopy, value);\n+\t\t  str_hash_insert (local_label_hash[macro_level],\n+\t\t\t\t   namecopy, value, 0);\n \t\t}\n \t      /* Indicate where to continue looking for substitutions.  */\n \t      ptr = tail;\n@@ -4616,7 +4612,7 @@ subsym_substitute (char *line, int forced)\n \t\t try to replace a symbol once.  */\n \t      if (recurse)\n \t\t{\n-\t\t  str_hash_insert (subsym_recurse_hash, name, name);\n+\t\t  str_hash_insert (subsym_recurse_hash, name, name, 0);\n \t\t  value = subsym_substitute (value, macro_level > 0);\n \t\t  str_hash_delete (subsym_recurse_hash, name);\n \t\t}\n@@ -5007,18 +5003,20 @@ tic54x_undefined_symbol (char *name)\n   tic54x_symbol *sym;\n \n   /* Not sure how to handle predefined symbols.  */\n-  if ((sym = (tic54x_symbol *) str_hash_find (cc_hash, name)) != NULL ||\n-      (sym = (tic54x_symbol *) str_hash_find (cc2_hash, name)) != NULL ||\n-      (sym = (tic54x_symbol *) str_hash_find (cc3_hash, name)) != NULL ||\n-      (sym = (tic54x_symbol *) str_hash_find (misc_symbol_hash, name)) != NULL ||\n-      (sym = (tic54x_symbol *) str_hash_find (sbit_hash, name)) != NULL)\n+  if ((sym = (tic54x_symbol *) str_hash_find (cc_hash, name)) != NULL\n+      || (sym = (tic54x_symbol *) str_hash_find (cc2_hash, name)) != NULL\n+      || (sym = (tic54x_symbol *) str_hash_find (cc3_hash, name)) != NULL\n+      || (sym = (tic54x_symbol *) str_hash_find (misc_symbol_hash,\n+\t\t\t\t\t\t name)) != NULL\n+      || (sym = (tic54x_symbol *) str_hash_find (sbit_hash, name)) != NULL)\n     {\n       return symbol_new (name, reg_section, &zero_address_frag, sym->value);\n     }\n \n-  if ((sym = (tic54x_symbol *) str_hash_find (reg_hash, name)) != NULL ||\n-      (sym = (tic54x_symbol *) str_hash_find (mmreg_hash, name)) != NULL ||\n-      !strcasecmp (name, \"a\") || !strcasecmp (name, \"b\"))\n+  if ((sym = (tic54x_symbol *) str_hash_find (reg_hash, name)) != NULL\n+      || (sym = (tic54x_symbol *) str_hash_find (mmreg_hash, name)) != NULL\n+      || !strcasecmp (name, \"a\")\n+      || !strcasecmp (name, \"b\"))\n     {\n       return symbol_new (name, reg_section, &zero_address_frag,\n \t\t\t sym ? sym->value : 0);"
    },
    {
      "sha": "3295d9589887a1289767796b19fe55cff6c1b0d3",
      "filename": "gas/config/tc-tic6x.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic6x.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -764,7 +764,7 @@ md_begin (void)\n \n       opc->id = id;\n       opc->next = str_hash_find (opcode_hash, tic6x_opcode_table[id].name);\n-      str_hash_insert (opcode_hash, tic6x_opcode_table[id].name, opc);\n+      str_hash_insert (opcode_hash, tic6x_opcode_table[id].name, opc, 1);\n     }\n \n   /* Save the current subseg so we can restore it [it's the default one and"
    },
    {
      "sha": "fb5d45e69b6d57739bc22db33fb8abd1555be05f",
      "filename": "gas/config/tc-tilegx.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tilegx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tilegx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tilegx.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -275,7 +275,7 @@ md_begin (void)\n   /* Initialize special operator hash table.  */\n   special_operator_hash = str_htab_create ();\n #define INSERT_SPECIAL_OP(name)\t\t\t\t\t\\\n-  str_hash_insert (special_operator_hash, #name, (void *)O_##name)\n+  str_hash_insert (special_operator_hash, #name, (void *) O_##name, 0)\n \n   INSERT_SPECIAL_OP (hw0);\n   INSERT_SPECIAL_OP (hw1);\n@@ -285,7 +285,7 @@ md_begin (void)\n   INSERT_SPECIAL_OP (hw1_last);\n   INSERT_SPECIAL_OP (hw2_last);\n   /* hw3_last is a convenience alias for the equivalent hw3.  */\n-  str_hash_insert (special_operator_hash, \"hw3_last\", (void*)O_hw3);\n+  str_hash_insert (special_operator_hash, \"hw3_last\", (void *) O_hw3, 0);\n   INSERT_SPECIAL_OP (hw0_got);\n   INSERT_SPECIAL_OP (hw0_last_got);\n   INSERT_SPECIAL_OP (hw1_last_got);\n@@ -312,14 +312,14 @@ md_begin (void)\n   /* Initialize op_hash hash table.  */\n   op_hash = str_htab_create ();\n   for (op = &tilegx_opcodes[0]; op->name != NULL; op++)\n-    str_hash_insert (op_hash, op->name, (void *)op);\n+    if (str_hash_insert (op_hash, op->name, op, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), op->name);\n \n   /* Initialize the spr hash table.  */\n   parsing_spr = 0;\n   spr_hash = str_htab_create ();\n   for (i = 0; i < tilegx_num_sprs; i++)\n-    str_hash_insert (spr_hash, tilegx_sprs[i].name,\n-                 (void *) &tilegx_sprs[i]);\n+    str_hash_insert (spr_hash, tilegx_sprs[i].name, &tilegx_sprs[i], 0);\n \n   /* Set up the main_reg_hash table. We use this instead of\n      creating a symbol in the register section to avoid ambiguities\n@@ -330,13 +330,13 @@ md_begin (void)\n       char buf[64];\n \n       str_hash_insert (main_reg_hash, tilegx_register_names[i],\n-\t\t   (void *) (long) (i | CANONICAL_REG_NAME_FLAG));\n+\t\t       (void *) (long) (i | CANONICAL_REG_NAME_FLAG), 0);\n \n       /* See if we should insert a noncanonical alias, like r63.  */\n       sprintf (buf, \"r%d\", i);\n       if (strcmp (buf, tilegx_register_names[i]) != 0)\n \tstr_hash_insert (main_reg_hash, xstrdup (buf),\n-\t\t     (void *) (long) (i | NONCANONICAL_REG_NAME_FLAG));\n+\t\t\t (void *) (long) (i | NONCANONICAL_REG_NAME_FLAG), 0);\n     }\n }\n \n@@ -1239,7 +1239,7 @@ md_assemble (char *str)\n   old_char = str[opname_len];\n   str[opname_len] = '\\0';\n \n-  op = str_hash_find(op_hash, str);\n+  op = str_hash_find (op_hash, str);\n   str[opname_len] = old_char;\n   if (op == NULL)\n     {"
    },
    {
      "sha": "4468447d983192bec14deec4bddca0cbac234b34",
      "filename": "gas/config/tc-tilepro.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tilepro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-tilepro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tilepro.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -218,7 +218,7 @@ md_begin (void)\n   /* Initialize special operator hash table.  */\n   special_operator_hash = str_htab_create ();\n #define INSERT_SPECIAL_OP(name)\t\t\t\t\t\\\n-  str_hash_insert (special_operator_hash, #name, (void *)O_##name)\n+  str_hash_insert (special_operator_hash, #name, (void *) O_##name, 0)\n \n   INSERT_SPECIAL_OP(lo16);\n   INSERT_SPECIAL_OP(hi16);\n@@ -248,14 +248,14 @@ md_begin (void)\n   /* Initialize op_hash hash table.  */\n   op_hash = str_htab_create ();\n   for (op = &tilepro_opcodes[0]; op->name != NULL; op++)\n-    str_hash_insert (op_hash, op->name, (void *)op);\n+    if (str_hash_insert (op_hash, op->name, op, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), op->name);\n \n   /* Initialize the spr hash table.  */\n   parsing_spr = 0;\n   spr_hash = str_htab_create ();\n   for (i = 0; i < tilepro_num_sprs; i++)\n-    str_hash_insert (spr_hash, tilepro_sprs[i].name,\n-                 (void *) &tilepro_sprs[i]);\n+    str_hash_insert (spr_hash, tilepro_sprs[i].name, &tilepro_sprs[i], 0);\n \n   /* Set up the main_reg_hash table. We use this instead of\n    * creating a symbol in the register section to avoid ambiguities\n@@ -266,28 +266,28 @@ md_begin (void)\n       char buf[64];\n \n       str_hash_insert (main_reg_hash, tilepro_register_names[i],\n-\t\t   (void *) (long)(i | CANONICAL_REG_NAME_FLAG));\n+\t\t       (void *) (long) (i | CANONICAL_REG_NAME_FLAG), 0);\n \n       /* See if we should insert a noncanonical alias, like r63.  */\n       sprintf (buf, \"r%d\", i);\n       if (strcmp (buf, tilepro_register_names[i]) != 0)\n \tstr_hash_insert (main_reg_hash, xstrdup (buf),\n-\t\t     (void *) (long)(i | NONCANONICAL_REG_NAME_FLAG));\n+\t\t\t (void *) (long) (i | NONCANONICAL_REG_NAME_FLAG), 0);\n     }\n \n   /* Insert obsolete backwards-compatibility register names.  */\n   str_hash_insert (main_reg_hash, \"io0\",\n-               (void *) (long) (TREG_IDN0 | CANONICAL_REG_NAME_FLAG));\n+\t\t   (void *) (long) (TREG_IDN0 | CANONICAL_REG_NAME_FLAG), 0);\n   str_hash_insert (main_reg_hash, \"io1\",\n-               (void *) (long) (TREG_IDN1 | CANONICAL_REG_NAME_FLAG));\n+\t\t   (void *) (long) (TREG_IDN1 | CANONICAL_REG_NAME_FLAG), 0);\n   str_hash_insert (main_reg_hash, \"us0\",\n-               (void *) (long) (TREG_UDN0 | CANONICAL_REG_NAME_FLAG));\n+\t\t   (void *) (long) (TREG_UDN0 | CANONICAL_REG_NAME_FLAG), 0);\n   str_hash_insert (main_reg_hash, \"us1\",\n-               (void *) (long) (TREG_UDN1 | CANONICAL_REG_NAME_FLAG));\n+\t\t   (void *) (long) (TREG_UDN1 | CANONICAL_REG_NAME_FLAG), 0);\n   str_hash_insert (main_reg_hash, \"us2\",\n-               (void *) (long) (TREG_UDN2 | CANONICAL_REG_NAME_FLAG));\n+\t\t   (void *) (long) (TREG_UDN2 | CANONICAL_REG_NAME_FLAG), 0);\n   str_hash_insert (main_reg_hash, \"us3\",\n-               (void *) (long) (TREG_UDN3 | CANONICAL_REG_NAME_FLAG));\n+\t\t   (void *) (long) (TREG_UDN3 | CANONICAL_REG_NAME_FLAG), 0);\n \n }\n \n@@ -1121,7 +1121,7 @@ md_assemble (char *str)\n   old_char = str[opname_len];\n   str[opname_len] = '\\0';\n \n-  op = str_hash_find(op_hash, str);\n+  op = str_hash_find (op_hash, str);\n   str[opname_len] = old_char;\n   if (op == NULL)\n     {"
    },
    {
      "sha": "865d45cc4436f7474f13c87ee771365a7ae0f424",
      "filename": "gas/config/tc-v850.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-v850.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1964,8 +1964,7 @@ md_begin (void)\n       if (strcmp (prev_name, op->name))\n \t{\n \t  prev_name = (char *) op->name;\n-\t  if (str_hash_find (v850_hash, op->name) == NULL)\n-\t    str_hash_insert (v850_hash, op->name, (char *) op);\n+\t  str_hash_insert (v850_hash, op->name, op, 0);\n \t}\n       op++;\n     }"
    },
    {
      "sha": "016acaa8d2bb3d82f9f414dac921d13eb0d42589",
      "filename": "gas/config/tc-vax.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-vax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-vax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-vax.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -961,11 +961,13 @@ vip_begin (int synthetic_too,\t\t/* 1 means include jXXX op-codes.  */\n   op_hash = str_htab_create ();\n \n   for (vP = votstrs; *vP->vot_name; vP++)\n-    str_hash_insert (op_hash, vP->vot_name, (void *) &vP->vot_detail);\n+    if (str_hash_insert (op_hash, vP->vot_name, &vP->vot_detail, 0) != NULL)\n+      as_fatal (_(\"duplicate %s\"), vP->vot_name);\n \n   if (synthetic_too)\n     for (vP = synthetic_votstrs; *vP->vot_name; vP++)\n-      str_hash_insert (op_hash, vP->vot_name, (void *) &vP->vot_detail);\n+      if (str_hash_insert (op_hash, vP->vot_name, &vP->vot_detail, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), vP->vot_name);\n \n #ifndef CONST_TABLE\n   vip_op_defaults (immediate, indirect, displen);"
    },
    {
      "sha": "b5012557a3aecb979197aecbbc3ea6c5c92fb444",
      "filename": "gas/config/tc-wasm32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-wasm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-wasm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-wasm32.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -164,7 +164,7 @@ md_begin (void)\n      provides a quick index to the first opcode with a particular name\n      in the opcode table.  */\n   for (opcode = wasm32_opcodes; opcode->name; opcode++)\n-    str_hash_insert (wasm32_hash, opcode->name, (char *) opcode);\n+    str_hash_insert (wasm32_hash, opcode->name, opcode, 0);\n \n   linkrelax = 0;\n   flag_sectname_subst = 1;"
    },
    {
      "sha": "b936865d085aa9decca167c3e49a576d6a70e637",
      "filename": "gas/config/tc-xgate.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-xgate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-xgate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-xgate.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -342,8 +342,7 @@ md_begin (void)\n \t    j++;\n \t  op_handles[j].name = xgate_opcode_ptr->name;\n \t  op_handles[j].opc0[0] = xgate_opcode_ptr;\n-\t  str_hash_insert (xgate_hash, (char *) op_handles[j].name,\n-\t\t       (char *) &(op_handles[j]));\n+\t  str_hash_insert (xgate_hash, op_handles[j].name, &op_handles[j], 0);\n \t}\n       op_handles[j].number_of_modes = handle_enum;\n       prev_op_name = op_handles[j].name;\n@@ -492,11 +491,10 @@ md_assemble (char *input_line)\n   if (!op_name[0])\n     as_bad (_(\"opcode missing or not found on input line\"));\n \n-  if (!(opcode_handle = (struct xgate_opcode_handle *) str_hash_find (xgate_hash,\n-\t\t\t\t\t\t\t\t  op_name)))\n-    {\n-      as_bad (_(\"opcode %s not found in opcode hash table\"), op_name);\n-    }\n+  opcode_handle = (struct xgate_opcode_handle *) str_hash_find (xgate_hash,\n+\t\t\t\t\t\t\t\top_name);\n+  if (!opcode_handle)\n+    as_bad (_(\"opcode %s not found in opcode hash table\"), op_name);\n   else\n     {\n       /* Parse operands so we can find the proper opcode bin.  */\n@@ -543,8 +541,10 @@ md_assemble (char *input_line)\n \t      input_line = macro_inline; /* Rewind.  */\n \t      p = extract_word (p, op_name, 10);\n \n-\t      if (!(opcode_handle = (struct xgate_opcode_handle *)\n-\t\t    str_hash_find (xgate_hash, op_name)))\n+\t      opcode_handle\n+\t\t= (struct xgate_opcode_handle *) str_hash_find (xgate_hash,\n+\t\t\t\t\t\t\t\top_name);\n+\t      if (!opcode_handle)\n \t\t{\n \t\t  as_bad (_(\": processing macro, real opcode handle\"\n \t\t\t    \" not found in hash\"));"
    },
    {
      "sha": "60e1d05cdbfdcad961815e37873081eb1f319244",
      "filename": "gas/config/tc-z8k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-z8k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/config/tc-z8k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-z8k.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -151,7 +151,7 @@ md_begin (void)\n     {\n       /* Only enter unique codes into the table.  */\n       if (idx != opcode->idx)\n-\tstr_hash_insert (opcode_hash_control, opcode->name, (char *) opcode);\n+\tstr_hash_insert (opcode_hash_control, opcode->name, opcode, 0);\n       idx = opcode->idx;\n     }\n \n@@ -166,7 +166,7 @@ md_begin (void)\n       fake_opcode->name = md_pseudo_table[idx].poc_name;\n       fake_opcode->func = (void *) (md_pseudo_table + idx);\n       fake_opcode->opcode = 250;\n-      str_hash_insert (opcode_hash_control, fake_opcode->name, fake_opcode);\n+      str_hash_insert (opcode_hash_control, fake_opcode->name, fake_opcode, 0);\n     }\n }\n "
    },
    {
      "sha": "8fc956ceba727119c1d385ead32073468202b72d",
      "filename": "gas/dw2gencfi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/dw2gencfi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/dw2gencfi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dw2gencfi.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -348,7 +348,7 @@ dwcfi_hash_find_or_make (segT cseg, const char *base_name, int flags)\n     {\n       item = alloc_debugseg_item (make_debug_seg (cseg, name, flags), 0, name);\n \n-      str_hash_insert (dwcfi_hash, item->seg_name, (char *) item);\n+      str_hash_insert (dwcfi_hash, item->seg_name, item, 0);\n     }\n   else\n     free (name);"
    },
    {
      "sha": "69af2cef98b32787f494aa33fccc2a55d2bc48dd",
      "filename": "gas/ecoff.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ecoff.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -1578,7 +1578,8 @@ add_string (varray_t *vp,\t\t\t/* string obstack */\n \n       strcpy (hash_ptr->string, str);\n \n-      str_hash_insert (hash_tbl, str, (char *) hash_ptr);\n+      if (str_hash_insert (hash_tbl, str, hash_ptr, 0) != NULL)\n+\tas_fatal (_(\"duplicate %s\"), str);\n     }\n \n   if (ret_hash != (shash_t **) NULL)\n@@ -2030,7 +2031,7 @@ get_tag (const char *tag,\t/* tag name */\n \n       perm = xstrdup (tag);\n       hash_ptr = allocate_shash ();\n-      str_hash_insert (tag_hash, perm, (char *) hash_ptr);\n+      str_hash_insert (tag_hash, perm, hash_ptr, 0);\n       hash_ptr->string = perm;\n     }\n "
    },
    {
      "sha": "07344303c1edc2fb1c04fc8a98b1659d8e3381f1",
      "filename": "gas/hash.c",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/hash.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/hash.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/hash.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -20,16 +20,26 @@\n \n #include \"as.h\"\n \n-/* Insert ELEMENT into HTAB.  If the element exists, it is overwritten.  */\n+/* Insert ELEMENT into HTAB.  If REPLACE is non-zero existing elements\n+   are overwritten.  If ELEMENT already exists, a pointer to the slot\n+   is returned.  Otherwise NULL is returned.  */\n \n-void\n-htab_insert (htab_t htab, PTR element)\n+void **\n+htab_insert (htab_t htab, void *element, int replace)\n {\n   void **slot = htab_find_slot (htab, element, INSERT);\n-  if (slot != NULL && htab->del_f)\n-    (*htab->del_f) (*slot);\n-\n+  if (*slot != NULL)\n+    {\n+      if (replace)\n+\t{\n+\t  if (htab->del_f)\n+\t    (*htab->del_f) (*slot);\n+\t  *slot = element;\n+\t}\n+      return slot;\n+    }\n   *slot = element;\n+  return NULL;\n }\n \n /* Print statistics about a hash table.  */"
    },
    {
      "sha": "ef6498c55d522ccd4d908ddfc7a03cc5176c9866",
      "filename": "gas/hash.h",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/hash.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/hash.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/hash.h?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -21,9 +21,11 @@\n #ifndef HASH_H\n #define HASH_H\n \n-/* Insert ELEMENT into HTAB.  If the element exists, it is overwritten.  */\n+/* Insert ELEMENT into HTAB.  If REPLACE is non-zero existing elements\n+   are overwritten.  If ELEMENT already exists, a pointer to the slot\n+   is returned.  Otherwise NULL is returned.  */\n \n-extern void htab_insert (htab_t, void *);\n+extern void **htab_insert (htab_t, void * /* element */, int /* replace */);\n \n /* Print statistics about a hash table.  */\n \n@@ -34,7 +36,7 @@ extern void htab_print_statistics (FILE *f, const char *name, htab_t table);\n struct string_tuple\n {\n   const char *key;\n-  char *value;\n+  const void *value;\n };\n \n typedef struct string_tuple string_tuple_t;\n@@ -60,7 +62,7 @@ eq_string_tuple (const void *a, const void *b)\n }\n \n static inline string_tuple_t *\n-string_tuple_alloc (const char *key, char *value)\n+string_tuple_alloc (const char *key, const void *value)\n {\n   string_tuple_t *tuple = XNEW (string_tuple_t);\n   tuple->key = key;\n@@ -73,7 +75,7 @@ str_hash_find (htab_t table, const char *key)\n {\n   string_tuple_t needle = { key, NULL };\n   string_tuple_t *tuple = htab_find (table, &needle);\n-  return tuple != NULL ? tuple->value : NULL;\n+  return tuple != NULL ? (void *) tuple->value : NULL;\n }\n \n static inline void *\n@@ -85,7 +87,7 @@ str_hash_find_n (htab_t table, const char *key, size_t n)\n   string_tuple_t needle = { tmp, NULL };\n   string_tuple_t *tuple = htab_find (table, &needle);\n   free (tmp);\n-  return tuple != NULL ? tuple->value : NULL;\n+  return tuple != NULL ? (void *) tuple->value : NULL;\n }\n \n static inline void\n@@ -95,10 +97,14 @@ str_hash_delete (htab_t table, const char *key)\n   htab_remove_elt (table, &needle);\n }\n \n-static inline void\n-str_hash_insert (htab_t table, const char *key, void *value)\n+static inline void **\n+str_hash_insert (htab_t table, const char *key, const void *value, int replace)\n {\n-  htab_insert (table, string_tuple_alloc (key, value));\n+  string_tuple_t *elt = string_tuple_alloc (key, value);\n+  void **slot = htab_insert (table, elt, replace);\n+  if (slot && !replace)\n+    free (elt);\n+  return slot;\n }\n \n static inline htab_t"
    },
    {
      "sha": "3123ddf9a3b400cad50e3f48aa0f6ab1ee69080a",
      "filename": "gas/macro.c",
      "status": "modified",
      "additions": 48,
      "deletions": 38,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/macro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/macro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/macro.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -505,6 +505,7 @@ do_formals (macro_entry *macro, size_t idx, sb *in)\n     {\n       formal_entry *formal = new_formal ();\n       size_t cidx;\n+      formal_hash_entry_t *elt;\n \n       idx = get_token (idx, in, &formal->name);\n       if (formal->name.len == 0)\n@@ -567,14 +568,15 @@ do_formals (macro_entry *macro, size_t idx, sb *in)\n \t}\n \n       /* Add to macro's hash table.  */\n-      if (formal_entry_find (macro->formal_hash, name) == NULL)\n-\thtab_insert (macro->formal_hash, formal_entry_alloc (name, formal));\n-      else\n-\tas_bad_where (macro->file,\n-\t\t      macro->line,\n-\t\t      _(\"A parameter named `%s' already exists for macro `%s'\"),\n-\t\t      name,\n-\t\t      macro->name);\n+      elt = formal_entry_alloc (name, formal);\n+      if (htab_insert (macro->formal_hash, elt, 0) != NULL)\n+\t{\n+\t  free (elt);\n+\t  as_bad_where (macro->file, macro->line,\n+\t\t\t_(\"A parameter named `%s' \"\n+\t\t\t  \"already exists for macro `%s'\"),\n+\t\t\tname, macro->name);\n+\t}\n \n       formal->index = macro->formal_count++;\n       *p = formal;\n@@ -593,6 +595,7 @@ do_formals (macro_entry *macro, size_t idx, sb *in)\n   if (macro_mri)\n     {\n       formal_entry *formal = new_formal ();\n+      formal_hash_entry_t *elt;\n \n       /* Add a special NARG formal, which macro_expand will set to the\n \t number of arguments.  */\n@@ -606,13 +609,14 @@ do_formals (macro_entry *macro, size_t idx, sb *in)\n       sb_add_string (&formal->name, name);\n \n       /* Add to macro's hash table.  */\n-      if (formal_entry_find (macro->formal_hash, name))\n-\tas_bad_where (macro->file,\n-\t\t      macro->line,\n-\t\t      _(\"Reserved word `%s' used as parameter in macro `%s'\"),\n-\t\t      name,\n-\t\t      macro->name);\n-      htab_insert (macro->formal_hash, formal_entry_alloc (name, formal));\n+      elt = formal_entry_alloc (name, formal);\n+      if (htab_insert (macro->formal_hash, elt, 0) != NULL)\n+\t{\n+\t  free (elt);\n+\t  as_bad_where (macro->file, macro->line,\n+\t\t\t_(\"Reserved word `%s' used as parameter in macro `%s'\"),\n+\t\t\tname, macro->name);\n+\t}\n \n       formal->index = NARG_INDEX;\n       *p = formal;\n@@ -709,10 +713,15 @@ define_macro (size_t idx, sb *in, sb *label,\n   /* And stick it in the macro hash table.  */\n   for (idx = 0; idx < name.len; idx++)\n     name.ptr[idx] = TOLOWER (name.ptr[idx]);\n-  if (macro_entry_find (macro_hash, macro->name))\n-    error = _(\"Macro `%s' was already defined\");\n   if (!error)\n-    htab_insert (macro_hash, macro_entry_alloc (macro->name, macro));\n+    {\n+      macro_hash_entry_t *elt = macro_entry_alloc (macro->name, macro);\n+      if (htab_insert (macro_hash, elt, 0) != NULL)\n+\t{\n+\t  free (elt);\n+\t  error = _(\"Macro `%s' was already defined\");\n+\t}\n+    }\n \n   if (namep != NULL)\n     *namep = macro->name;\n@@ -911,10 +920,20 @@ macro_expand_body (sb *in, sb *out, formal_entry *formals,\n \t\t{\n \t\t  const char *name;\n \t\t  formal_entry *f = new_formal ();\n+\t\t  formal_hash_entry_t *elt;\n \n \t\t  src = get_token (src, in, &f->name);\n \t\t  name = sb_terminate (&f->name);\n-\t\t  if (formal_entry_find (formal_hash, name) == NULL)\n+\t\t  elt = formal_entry_alloc (name, f);\n+\t\t  if (htab_insert (formal_hash, elt, 0) != NULL)\n+\t\t    {\n+\t\t      free (elt);\n+\t\t      as_bad_where (macro->file, macro->line + macro_line,\n+\t\t\t\t    _(\"`%s' was already used as parameter \"\n+\t\t\t\t      \"(or another local) name\"), name);\n+\t\t      del_formal (f);\n+\t\t    }\n+\t\t  else\n \t\t    {\n \t\t      static int loccnt;\n \t\t      char buf[20];\n@@ -925,16 +944,6 @@ macro_expand_body (sb *in, sb *out, formal_entry *formals,\n \n \t\t      sprintf (buf, IS_ELF ? \".LL%04x\" : \"LL%04x\", ++loccnt);\n \t\t      sb_add_string (&f->actual, buf);\n-\n-\t\t      htab_insert (formal_hash, formal_entry_alloc (name, f));\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      as_bad_where (macro->file,\n-\t\t\t\t    macro->line + macro_line,\n-\t\t\t\t    _(\"`%s' was already used as parameter (or another local) name\"),\n-\t\t\t\t    name);\n-\t\t      del_formal (f);\n \t\t    }\n \n \t\t  src = sb_skip_comma (src, in);\n@@ -1284,25 +1293,26 @@ delete_macro (const char *name)\n {\n   char *copy;\n   size_t i, len;\n-  macro_entry *macro;\n+  void **slot;\n+  macro_hash_entry_t needle;\n \n   len = strlen (name);\n   copy = XNEWVEC (char, len + 1);\n   for (i = 0; i < len; ++i)\n     copy[i] = TOLOWER (name[i]);\n   copy[i] = '\\0';\n \n-  /* We can only ask hash_delete to free memory if we are deleting\n-     macros in reverse order to their definition.\n-     So just clear out the entry.  */\n-  macro = macro_entry_find (macro_hash, copy);\n-  if (macro)\n+  needle.name = copy;\n+  needle.macro = NULL;\n+  slot = htab_find_slot (macro_hash, &needle, NO_INSERT);\n+  if (slot)\n     {\n-      htab_insert (macro_hash, macro_entry_alloc (copy, NULL));\n-      free_macro (macro);\n+      free_macro (((macro_hash_entry_t *) *slot)->macro);\n+      htab_clear_slot (macro_hash, slot);\n     }\n   else\n     as_warn (_(\"Attempt to purge non-existing macro `%s'\"), copy);\n+  free (copy);\n }\n \n /* Handle the MRI IRP and IRPC pseudo-ops.  These are handled as a\n@@ -1334,7 +1344,7 @@ expand_irp (int irpc, size_t idx, sb *in, sb *out, size_t (*get_line) (sb *))\n   h = htab_create_alloc (16, hash_formal_entry, eq_formal_entry,\n \t\t\t NULL, xcalloc, free);\n \n-  htab_insert (h, formal_entry_alloc (sb_terminate (&f.name), &f));\n+  htab_insert (h, formal_entry_alloc (sb_terminate (&f.name), &f), 0);\n \n   f.index = 1;\n   f.next = NULL;"
    },
    {
      "sha": "cd06ea51d927fa3dc5bcfd6e3b8113b82b583674",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -563,11 +563,14 @@ pop_insert (const pseudo_typeS *table)\n   const pseudo_typeS *pop;\n   for (pop = table; pop->poc_name; pop++)\n     {\n-      int exists = po_entry_find (po_hash, pop->poc_name) != NULL;\n-      if (!pop_override_ok && exists)\n-\tas_fatal (_(\"error constructing %s pseudo-op table\"), pop_table_name);\n-      else if (!exists)\n-\thtab_insert (po_hash, po_entry_alloc (pop->poc_name, pop));\n+      po_entry_t *elt = po_entry_alloc (pop->poc_name, pop);\n+      if (htab_insert (po_hash, elt, 0) != NULL)\n+\t{\n+\t  free (elt);\n+\t  if (!pop_override_ok)\n+\t    as_fatal (_(\"error constructing %s pseudo-op table\"),\n+\t\t      pop_table_name);\n+\t}\n     }\n }\n "
    },
    {
      "sha": "50b23d6ded66cfcf11f9d4d3c5747f9752ee4d73",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -364,7 +364,7 @@ local_symbol_make (const char *name, segT section, fragS *frag, valueT val)\n   ret->section = section;\n   ret->value = val;\n \n-  htab_insert (sy_hash, ret);\n+  htab_insert (sy_hash, ret, 1);\n \n   return ret;\n }\n@@ -630,7 +630,7 @@ symbol_table_insert (symbolS *symbolP)\n {\n   know (symbolP);\n \n-  htab_insert (sy_hash, symbolP);\n+  htab_insert (sy_hash, symbolP, 1);\n }\n \f\n /* If a symbol name does not exist, create it as undefined, and insert"
    },
    {
      "sha": "49311e82f7a011a9074f4e08c1153a28478da035",
      "filename": "gas/testsuite/gas/ppc/dcbt.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/testsuite/gas/ppc/dcbt.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/testsuite/gas/ppc/dcbt.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/dcbt.d?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -0,0 +1,9 @@\n+#as: -mpower4 -many\n+#objdump: -dr -Mpower4\n+\n+.*\n+\n+Disassembly of section \\.text:\n+\n+.*:\n+   0:\t(7d 40 5a 2c|2c 5a 40 7d) \tdcbt    0,r11,10"
    },
    {
      "sha": "d2686cf3ec845e6d1e2ab1ac0710c6318b724e00",
      "filename": "gas/testsuite/gas/ppc/dcbt.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/testsuite/gas/ppc/dcbt.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/testsuite/gas/ppc/dcbt.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/dcbt.s?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -0,0 +1,2 @@\n+ .text\n+ dcbt 0,11,0b01010"
    },
    {
      "sha": "561b2b4ed309856c4d40b30de8139eb01d547e73",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe0e921f00237abd926cd9efaeedf758b17170de/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe0e921f00237abd926cd9efaeedf758b17170de/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=fe0e921f00237abd926cd9efaeedf758b17170de",
      "patch": "@@ -146,3 +146,5 @@ run_dump_test \"stringop\"\n run_dump_test \"xvtlsbb\"\n run_dump_test \"rightmost\"\n run_dump_test \"scalarquad\"\n+\n+run_dump_test \"dcbt\""
    }
  ]
}