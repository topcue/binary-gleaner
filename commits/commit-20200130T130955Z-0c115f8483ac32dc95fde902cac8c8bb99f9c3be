{
  "sha": "0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGMxMTVmODQ4M2FjMzJkYzk1ZmRlOTAyY2FjOGM4YmI5OWY5YzNiZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-30T11:29:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-30T13:09:55Z"
    },
    "message": "ubsan: m32c: left shift of negative value\n\nMore nonsense fixing \"bugs\" with left shifts of signed values.  Yes,\nthe C standard does say this is undefined (and right shifts of signed\nvalues are implementation defined BTW) but in practice there is no\nproblem with current machines.  1's complement is a thing of the past.\n\ncpu/\n\t* m32c.cpu (f-src32-rn-unprefixed-QI): Shift before inverting.\n\t(f-src32-rn-prefixed-QI, f-dst32-rn-unprefixed-QI): Likewise.\n\t(f-dst32-rn-prefixed-QI): Likewise.\n\t(f-dsp-32-s32): Mask before shifting left.\n\t(f-dsp-48-u32, f-dsp-48-s32): Likewise.\n\t(f-bitbase32-16-s11-unprefixed): Multiply signed field rather than\n\tshifting left.\n\t(f-bitbase32-24-s11-prefixed, f-bitbase32-24-s19-prefixed): Likewise.\n\t(h-gr-SI): Mask before shifting.\nopcodes/\n\t* m32c-ibld.c: Regenerate.",
    "tree": {
      "sha": "3671689d98fe08794014ceb29b7f7947c057788e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3671689d98fe08794014ceb29b7f7947c057788e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b5d36aaa8ad9b0aee720b7a6b3270d561a27cb6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5d36aaa8ad9b0aee720b7a6b3270d561a27cb6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b5d36aaa8ad9b0aee720b7a6b3270d561a27cb6f"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 46,
    "deletions": 30
  },
  "files": [
    {
      "sha": "3e8f019e353eab91735db1884f25dbb8cce15e85",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
      "patch": "@@ -1,3 +1,15 @@\n+2020-01-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* m32c.cpu (f-src32-rn-unprefixed-QI): Shift before inverting.\n+\t(f-src32-rn-prefixed-QI, f-dst32-rn-unprefixed-QI): Likewise.\n+\t(f-dst32-rn-prefixed-QI): Likewise.\n+\t(f-dsp-32-s32): Mask before shifting left.\n+\t(f-dsp-48-u32, f-dsp-48-s32): Likewise.\n+\t(f-bitbase32-16-s11-unprefixed): Multiply signed field rather than\n+\tshifting left.\n+\t(f-bitbase32-24-s11-prefixed, f-bitbase32-24-s19-prefixed): Likewise.\n+\t(h-gr-SI): Mask before shifting.\n+\n 2020-01-30  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* bpf.cpu (define-alu-insn-un): The unary BPF instructions"
    },
    {
      "sha": "48b5acdfbd0ae166634bea03a2bc5dcb81826ff0",
      "filename": "cpu/m32c.cpu",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/cpu/m32c.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/cpu/m32c.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/m32c.cpu?ref=0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
      "patch": "@@ -240,7 +240,7 @@\n ;   r1l      10'b    11'b\n ;   r1h      11'b    01'b\n (df  f-src32-rn-unprefixed-QI \"source Rn QI for m32c\" (MACH32 m32c-isa) 10 2 UINT\n-     ((value pc) (or USI (and (sll (inv value) 1) 2) (and (srl value 1) 1))) ; insert\n+     ((value pc) (or USI (and (inv (sll value 1)) 2) (and (srl value 1) 1))) ; insert\n      ((value pc) (or USI (and (inv (srl value 1)) 1) (and (sll value 1) 2))) ; extract\n )\n ; QI mode gr encoding for m32c is different than for m16c. The hardware\n@@ -252,7 +252,7 @@\n ;   r1l      10'b    11'b\n ;   r1h      11'b    01'b\n (df  f-src32-rn-prefixed-QI \"source Rn QI for m32c\" (MACH32 m32c-isa) 18 2 UINT\n-     ((value pc) (or USI (and (sll (inv value) 1) 2) (and (srl value 1) 1))) ; insert\n+     ((value pc) (or USI (and (inv (sll value 1)) 2) (and (srl value 1) 1))) ; insert\n      ((value pc) (or USI (and (inv (srl value 1)) 1) (and (sll value 1) 2))) ; extract\n )\n ; HI mode gr encoding for m32c is different than for m16c. The hardware\n@@ -316,11 +316,11 @@\n ;   r1l      10'b    11'b\n ;   r1h      11'b    01'b\n (df  f-dst32-rn-unprefixed-QI \"destination Rn QI for m32c\" (MACH32 m32c-isa) 8 2 UINT\n-     ((value pc) (or USI (and (sll (inv value) 1) 2) (and (srl value 1) 1))) ; insert\n+     ((value pc) (or USI (and (inv (sll value 1)) 2) (and (srl value 1) 1))) ; insert\n      ((value pc) (or USI (and (inv (srl value 1)) 1) (and (sll value 1) 2))) ; extract\n )\n (df  f-dst32-rn-prefixed-QI \"destination Rn QI for m32c\" (MACH32 m32c-isa) 16 2 UINT\n-     ((value pc) (or USI (and (sll (inv value) 1) 2) (and (srl value 1) 1))) ; insert\n+     ((value pc) (or USI (and (inv (sll value 1)) 2) (and (srl value 1) 1))) ; insert\n      ((value pc) (or USI (and (inv (srl value 1)) 1) (and (sll value 1) 2))) ; extract\n )\n ; HI mode gr encoding for m32c is different than for m16c. The hardware\n@@ -720,22 +720,22 @@\n       (ext INT\n \t   (or SI\n \t       (or SI\n-\t\t   (and (srl value 24) #x000000ff)\n-\t\t   (and (srl value 8)  #x0000ff00))\n+\t\t   (and (srl value 24) #x00ff)\n+\t\t   (and (srl value 8)  #xff00))\n \t       (or SI\n-\t\t   (and (sll value 8)  #x00ff0000)\n-\t\t   (and (sll value 24) #xff000000)))))\n+\t\t   (sll (and value #xff00) 8)\n+\t\t   (sll (and value #x00ff) 24)))))\n \n      ;; extract\n      ((value pc)\n       (ext INT\n \t   (or SI\n \t       (or SI\n-\t\t   (and (srl value 24) #x000000ff)\n-\t\t   (and (srl value 8)  #x0000ff00))\n+\t\t   (and (srl value 24) #x00ff)\n+\t\t   (and (srl value 8)  #xff00))\n \t       (or SI\n-\t\t   (and (sll value 8)  #x00ff0000)\n-\t\t   (and (sll value 24) #xff000000)))))\n+\t\t   (sll (and value #xff00) 8)\n+\t\t   (sll (and value #x00ff) 24)))))\n )\n \n (dnmf f-dsp-48-u32 \"32 bit unsigned\" (all-isas) UINT\n@@ -746,7 +746,7 @@\n \t\t)\n       (sequence () ; extract\n \t\t(set (ifield f-dsp-48-u32) (or (and (ifield f-dsp-48-u16) #xffff)\n-\t\t\t\t\t       (and (sll (ifield f-dsp-64-u16) 16) #xffff0000)))\n+\t\t\t\t\t       (sll (and (ifield f-dsp-64-u16) #xffff) 16)))\n \t\t)\n )\n \n@@ -758,7 +758,7 @@\n \t\t)\n       (sequence () ; extract\n \t\t(set (ifield f-dsp-48-s32) (or (and (ifield f-dsp-48-u16) #xffff)\n-\t\t\t\t\t       (and (sll (ifield f-dsp-64-u16) 16) #xffff0000)))\n+\t\t\t\t\t       (sll (and (ifield f-dsp-64-u16) #xffff) 16)))\n \t\t)\n )\n \n@@ -827,7 +827,7 @@\n \t\t(set (ifield f-dsp-16-s8) (sra INT (ifield f-bitbase32-16-s11-unprefixed) 3))\n \t\t)\n       (sequence () ; extract\n-\t\t(set (ifield f-bitbase32-16-s11-unprefixed) (or (sll (ifield f-dsp-16-s8) 3)\n+\t\t(set (ifield f-bitbase32-16-s11-unprefixed) (or (mul (ifield f-dsp-16-s8) 8)\n \t\t\t\t\t\t\t\t(ifield f-bitno32-unprefixed)))\n \t\t)\n )\n@@ -885,7 +885,7 @@\n \t\t(set (ifield f-dsp-24-s8) (sra INT (ifield f-bitbase32-24-s11-prefixed) 3))\n \t\t)\n       (sequence () ; extract\n-\t\t(set (ifield f-bitbase32-24-s11-prefixed) (or (sll (ifield f-dsp-24-s8) 3)\n+\t\t(set (ifield f-bitbase32-24-s11-prefixed) (or (mul (ifield f-dsp-24-s8) 8)\n \t\t\t\t\t\t\t      (ifield f-bitno32-prefixed)))\n \t\t)\n )\n@@ -913,7 +913,7 @@\n \t\t)\n       (sequence () ; extract\n \t\t(set (ifield f-bitbase32-24-s19-prefixed) (or (sll (ifield f-dsp-24-u8) 3)\n-\t\t\t\t\t\t\t      (or (sll (ifield f-dsp-32-s8) 11)\n+\t\t\t\t\t\t\t      (or (mul (ifield f-dsp-32-s8) 2048)\n \t\t\t\t\t\t\t\t  (ifield f-bitno32-prefixed))))\n \t\t)\n )\n@@ -1075,7 +1075,7 @@\n   (indices keyword \"\" ((\"r2r0\" 0) (\"r3r1\" 1)))\n   (get (index) (or SI\n \t\t   (and (reg h-gr index) #xffff)\n-\t\t   (and (sll (reg h-gr (add index 2)) 16) #xffff0000)))\n+\t\t   (sll (and (reg h-gr (add index 2)) #xffff) 16)))\n   (set (index newval) (sequence ()\n \t\t\t\t(set (reg h-gr index) (and newval #xffff))\n \t\t\t\t(set (reg h-gr (add index 2)) (srl newval 16)))))"
    },
    {
      "sha": "975d7e6bfb4020fb4076102c5a5754471d339e61",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
      "patch": "@@ -1,3 +1,7 @@\n+2020-01-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* m32c-ibld.c: Regenerate.\n+\n 2020-01-30  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* bpf-opc.c: Regenerate."
    },
    {
      "sha": "7083a575e1a941c09744e9dfd51a85ffe1c229f4",
      "filename": "opcodes/m32c-ibld.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/opcodes/m32c-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c115f8483ac32dc95fde902cac8c8bb99f9c3be/opcodes/m32c-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32c-ibld.c?ref=0c115f8483ac32dc95fde902cac8c8bb99f9c3be",
      "patch": "@@ -609,14 +609,14 @@ m32c_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case M32C_OPERAND_BIT32RNPREFIXED :\n       {\n         long value = fields->f_dst32_rn_prefixed_QI;\n-        value = (((((((~ (value))) << (1))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n+        value = (((((~ (((value) << (1))))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n         errmsg = insert_normal (cd, value, 0, 0, 16, 2, 32, total_length, buffer);\n       }\n       break;\n     case M32C_OPERAND_BIT32RNUNPREFIXED :\n       {\n         long value = fields->f_dst32_rn_unprefixed_QI;\n-        value = (((((((~ (value))) << (1))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n+        value = (((((~ (((value) << (1))))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n         errmsg = insert_normal (cd, value, 0, 0, 8, 2, 32, total_length, buffer);\n       }\n       break;\n@@ -1191,7 +1191,7 @@ m32c_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case M32C_OPERAND_DST32RNPREFIXEDQI :\n       {\n         long value = fields->f_dst32_rn_prefixed_QI;\n-        value = (((((((~ (value))) << (1))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n+        value = (((((~ (((value) << (1))))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n         errmsg = insert_normal (cd, value, 0, 0, 16, 2, 32, total_length, buffer);\n       }\n       break;\n@@ -1212,7 +1212,7 @@ m32c_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case M32C_OPERAND_DST32RNUNPREFIXEDQI :\n       {\n         long value = fields->f_dst32_rn_unprefixed_QI;\n-        value = (((((((~ (value))) << (1))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n+        value = (((((~ (((value) << (1))))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n         errmsg = insert_normal (cd, value, 0, 0, 8, 2, 32, total_length, buffer);\n       }\n       break;\n@@ -1317,7 +1317,7 @@ m32c_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case M32C_OPERAND_IMM_32_SI :\n       {\n         long value = fields->f_dsp_32_s32;\n-        value = EXTSISI (((((((((UINT) (value) >> (24))) & (255))) | (((((UINT) (value) >> (8))) & (65280))))) | (((((((value) << (8))) & (16711680))) | (((((value) << (24))) & (0xff000000)))))));\n+        value = EXTSISI (((((((((UINT) (value) >> (24))) & (255))) | (((((UINT) (value) >> (8))) & (65280))))) | (((((((value) & (65280))) << (8))) | (((((value) & (255))) << (24)))))));\n         errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED), 32, 0, 32, 32, total_length, buffer);\n       }\n       break;\n@@ -1603,7 +1603,7 @@ m32c_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case M32C_OPERAND_SRC32RNPREFIXEDQI :\n       {\n         long value = fields->f_src32_rn_prefixed_QI;\n-        value = (((((((~ (value))) << (1))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n+        value = (((((~ (((value) << (1))))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n         errmsg = insert_normal (cd, value, 0, 0, 18, 2, 32, total_length, buffer);\n       }\n       break;\n@@ -1624,7 +1624,7 @@ m32c_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case M32C_OPERAND_SRC32RNUNPREFIXEDQI :\n       {\n         long value = fields->f_src32_rn_unprefixed_QI;\n-        value = (((((((~ (value))) << (1))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n+        value = (((((~ (((value) << (1))))) & (2))) | (((((USI) (value) >> (1))) & (1))));\n         errmsg = insert_normal (cd, value, 0, 0, 10, 2, 32, total_length, buffer);\n       }\n       break;\n@@ -1851,7 +1851,7 @@ m32c_cgen_extract_operand (CGEN_CPU_DESC cd,\n         length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 16, 8, 32, total_length, pc, & fields->f_dsp_16_s8);\n         if (length <= 0) break;\n {\n-  FLD (f_bitbase32_16_s11_unprefixed) = ((((FLD (f_dsp_16_s8)) << (3))) | (FLD (f_bitno32_unprefixed)));\n+  FLD (f_bitbase32_16_s11_unprefixed) = ((((FLD (f_dsp_16_s8)) * (8))) | (FLD (f_bitno32_unprefixed)));\n }\n       }\n       break;\n@@ -1923,7 +1923,7 @@ m32c_cgen_extract_operand (CGEN_CPU_DESC cd,\n         length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 24, 8, 32, total_length, pc, & fields->f_dsp_24_s8);\n         if (length <= 0) break;\n {\n-  FLD (f_bitbase32_24_s11_prefixed) = ((((FLD (f_dsp_24_s8)) << (3))) | (FLD (f_bitno32_prefixed)));\n+  FLD (f_bitbase32_24_s11_prefixed) = ((((FLD (f_dsp_24_s8)) * (8))) | (FLD (f_bitno32_prefixed)));\n }\n       }\n       break;\n@@ -1936,7 +1936,7 @@ m32c_cgen_extract_operand (CGEN_CPU_DESC cd,\n         length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 32, 0, 8, 32, total_length, pc, & fields->f_dsp_32_s8);\n         if (length <= 0) break;\n {\n-  FLD (f_bitbase32_24_s19_prefixed) = ((((FLD (f_dsp_24_u8)) << (3))) | (((((FLD (f_dsp_32_s8)) << (11))) | (FLD (f_bitno32_prefixed)))));\n+  FLD (f_bitbase32_24_s19_prefixed) = ((((FLD (f_dsp_24_u8)) << (3))) | (((((FLD (f_dsp_32_s8)) * (2048))) | (FLD (f_bitno32_prefixed)))));\n }\n       }\n       break;\n@@ -2480,7 +2480,7 @@ m32c_cgen_extract_operand (CGEN_CPU_DESC cd,\n       {\n         long value;\n         length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 32, 0, 32, 32, total_length, pc, & value);\n-        value = EXTSISI (((((((((UINT) (value) >> (24))) & (255))) | (((((UINT) (value) >> (8))) & (65280))))) | (((((((value) << (8))) & (16711680))) | (((((value) << (24))) & (0xff000000)))))));\n+        value = EXTSISI (((((((((UINT) (value) >> (24))) & (255))) | (((((UINT) (value) >> (8))) & (65280))))) | (((((((value) & (65280))) << (8))) | (((((value) & (255))) << (24)))))));\n         fields->f_dsp_32_s32 = value;\n       }\n       break;\n@@ -2539,7 +2539,7 @@ m32c_cgen_extract_operand (CGEN_CPU_DESC cd,\n       }\n         if (length <= 0) break;\n {\n-  FLD (f_dsp_48_s32) = ((((FLD (f_dsp_48_u16)) & (65535))) | (((((FLD (f_dsp_64_u16)) << (16))) & (0xffff0000))));\n+  FLD (f_dsp_48_s32) = ((((FLD (f_dsp_48_u16)) & (65535))) | (((((FLD (f_dsp_64_u16)) & (65535))) << (16))));\n }\n       }\n       break;"
    }
  ]
}