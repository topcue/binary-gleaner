{
  "sha": "fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmM2NWM3ZGJlMDYwN2RmYjFmYzNkMTAxOWM0NmRmNzM4NTRjYzg5Ng==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-01-21T10:43:53Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-01-21T10:43:53Z"
    },
    "message": "Testsuite: Ensure stack protection is off for GCC\n\nUsing -fstack-protector-strong will cause GDB to break on the wrong line\nwhen placing a breakpoint on a function.  This is due to inadequate dwarf\nline numbering, and is being tracked by the GCC bug\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=88432\n\nGCC (and Clang) provided by Debian/Ubuntu default to stack protector\nbeing enabled.\n\nEnsure that when running the GDB testsuite, stack protector is always\nturned off for GCC 4.1.0 (when stack protector was added) and above.\n\nEnsure that this does not cause infinite recursion due to\ntest_compiler_info having to compile a file itself.\n\nAdd a test to explicitly test breakpoints with various levels of stack\nprotection on both GCC and Clang, with xfail for the known errors.\n\nRestore change in ovldbreak.exp which worked around the issue.\n\ngdb/testsuite/ChangeLog:\n\n2019-01-18  Alan Hayward  <alan.hayward@arm.com>\n\n\t* gdb.base/stack-protector.c: New test.\n\t* gdb.base/stack-protector.exp: New file.\n\t* gdb.cp/ovldbreak.exp: Only allow a single break line.\n\t* lib/gdb.exp (get_compiler_info): Use getting_compiler_info\n\toption.\n\t(gdb_compile): Remove stack protector for GCC and prevent\n\trecursion.",
    "tree": {
      "sha": "efac77da6f7d09dbe6d2f6bd5e8aa1fcfec87b90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/efac77da6f7d09dbe6d2f6bd5e8aa1fcfec87b90"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "111f47f3e4b685acc2378e46d0221e562c608ffc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/111f47f3e4b685acc2378e46d0221e562c608ffc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/111f47f3e4b685acc2378e46d0221e562c608ffc"
    }
  ],
  "stats": {
    "total": 127,
    "additions": 124,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ae07cc260cabc09fd983357b9160ec558a33afc6",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
      "patch": "@@ -1,3 +1,12 @@\n+2019-01-21  Alan Hayward  <alan.hayward@arm.com>\n+\t* gdb.base/stack-protector.c: New test.\n+\t* gdb.base/stack-protector.exp: New file.\n+\t* gdb.cp/ovldbreak.exp: Only allow a single break line.\n+\t* lib/gdb.exp (get_compiler_info): Use getting_compiler_info\n+\toption.\n+\t(gdb_compile): Remove stack protector for GCC and prevent\n+\trecursion.\n+\n 2019-01-16  Keith Seitz  <keiths@redhat.com>\n \n \tPR gdb/23773"
    },
    {
      "sha": "da525a3c52aee0d88839b885daad02a071296b59",
      "filename": "gdb/testsuite/gdb.base/stack-protector.c",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/gdb.base/stack-protector.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/gdb.base/stack-protector.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/stack-protector.c?ref=fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
      "patch": "@@ -0,0 +1,28 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+foo (int a)\n+{\n+  return a + 7; /* break here.  */\n+}\n+\n+int\n+main ()\n+{\n+  return foo (5);\n+}"
    },
    {
      "sha": "ad8c15de9f3c5782b1151431db4f5966a8863d97",
      "filename": "gdb/testsuite/gdb.base/stack-protector.exp",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/gdb.base/stack-protector.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/gdb.base/stack-protector.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/stack-protector.exp?ref=fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
      "patch": "@@ -0,0 +1,68 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test breakpoints work correctly when stack protector is used.\n+\n+# Note on Debian/Ubuntu, stack protector is on by default, and is\n+# currently force disabled in gdb_compile due to the XFAIL below.\n+\n+# Ensure the compiler is gcc/clang and is new enough to support stack\n+# protection.\n+if { !([test_compiler_info \"gcc-*\"] || [test_compiler_info \"clang-*\"])\n+     || [test_compiler_info {gcc-[0-3]-*}]\n+     || [test_compiler_info {gcc-4-0-*}]\n+     || [test_compiler_info {clang-[0-4]=*}] } {\n+    return 0\n+}\n+\n+standard_testfile\n+\n+set protector_options { \"-fno-stack-protector\" \"-fstack-protector\" \\\n+\t\t\t\"-fstack-protector-all\" \"-fstack-protector-strong\" }\n+\n+proc simple_func_break_test { protection } {\n+    global testfile\n+    global srcfile\n+    global binfile\n+\n+    set options debug\n+    lappend options additional_flags=$protection\n+\n+    if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile $options]} {\n+\treturn -1\n+    }\n+\n+    clean_restart ${binfile}\n+\n+    if { ![runto_main] } then {\n+\tfail \"can't run to main\"\n+\treturn -1\n+    }\n+\n+    # Break on function foo and ensure it stops on the first line of code.\n+    gdb_breakpoint \"foo\"\n+\n+    if { $protection == \"-fstack-protector-all\"\n+         && [test_compiler_info \"gcc-*\"] } {\n+\tsetup_xfail \"gcc/88432\" \"*-*-linux*\"\n+    }\n+    gdb_continue_to_breakpoint \"foo\" \".*break here.*\"\n+\n+    return 1\n+}\n+\n+foreach_with_prefix protection $protector_options {\n+    simple_func_break_test $protection\n+}"
    },
    {
      "sha": "3ffd04209a6ee1c6872906ce29696902eb9da987",
      "filename": "gdb/testsuite/gdb.cp/ovldbreak.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/gdb.cp/ovldbreak.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/gdb.cp/ovldbreak.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/ovldbreak.exp?ref=fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
      "patch": "@@ -209,7 +209,7 @@ for {set idx 0} {$idx < [llength $overloads]} {incr idx} {\n \n # Verify the breakpoints.\n set bptable \"Num\\[\\t \\]+Type\\[\\t \\]+Disp Enb Address\\[\\t \\]+What.*\\[\\r\\n]+\"\n-append bptable \"\\[0-9\\]+\\[\\t \\]+breakpoint\\[\\t \\]+keep\\[\\t \\]y\\[\\t \\]+$hex\\[\\t \\]+in main(\\\\((|void)\\\\))? at.*$srcfile:4\\[89\\]\\[\\r\\n\\]+\"\n+append bptable \"\\[0-9\\]+\\[\\t \\]+breakpoint\\[\\t \\]+keep\\[\\t \\]y\\[\\t \\]+$hex\\[\\t \\]+in main(\\\\((|void)\\\\))? at.*$srcfile:49\\[\\r\\n\\]+\"\n append bptable \"\\[\\t \\]+breakpoint already hit 1 time\\[\\r\\n\\]+.\"\n foreach ovld $overloads {\n     append bptable [format \"\\[0-9\\]+\\[\\t \\]+breakpoint\\[\\t \\]+keep y\\[\\t \\]+$hex\\[\\t \\]+in foo::overload1arg\\\\(%s\\\\) at.*$srcfile:%d\\[\\r\\n\\]+\" $ovld \\"
    },
    {
      "sha": "bc7ba12d480dda6fd73a7239fd456b67496c9037",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc65c7dbe0607dfb1fc3d1019c46df73854cc896/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=fc65c7dbe0607dfb1fc3d1019c46df73854cc896",
      "patch": "@@ -3276,12 +3276,12 @@ proc get_compiler_info {{arg \"\"}} {\n \t# We have to use -E and -o together, despite the comments\n \t# above, because of how DejaGnu handles remote host testing.\n \tset ppout \"$outdir/compiler.i\"\n-\tgdb_compile \"${ifile}\" \"$ppout\" preprocess [list \"$arg\" quiet]\n+\tgdb_compile \"${ifile}\" \"$ppout\" preprocess [list \"$arg\" quiet getting_compiler_info]\n \tset file [open $ppout r]\n \tset cppout [read $file]\n \tclose $file\n     } else {\n-\tset cppout [ gdb_compile \"${ifile}\" \"\" preprocess [list \"$arg\" quiet] ]\n+\tset cppout [ gdb_compile \"${ifile}\" \"\" preprocess [list \"$arg\" quiet getting_compiler_info] ]\n     }\n     eval log_file $saved_log\n \n@@ -3519,6 +3519,7 @@ proc gdb_compile {source dest type options} {\n     }\n     set shlib_found 0\n     set shlib_load 0\n+    set getting_compiler_info 0\n     foreach opt $options {\n         if {[regexp {^shlib=(.*)} $opt dummy_var shlib_name]\n \t    && $type == \"executable\"} {\n@@ -3549,11 +3550,26 @@ proc gdb_compile {source dest type options} {\n             }\n \t} elseif { $opt == \"shlib_load\" && $type == \"executable\" } {\n \t    set shlib_load 1\n+\t} elseif { $opt == \"getting_compiler_info\" } {\n+\t    # If this is set, calling test_compiler_info will cause recursion.\n+\t    set getting_compiler_info 1\n         } else {\n             lappend new_options $opt\n         }\n     }\n \n+    # Ensure stack protector is disabled for GCC, as this causes problems with\n+    # DWARF line numbering.\n+    # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88432\n+    # This option defaults to on for Debian/Ubuntu.\n+    if { $getting_compiler_info == 0\n+\t && [test_compiler_info {gcc-*-*}]\n+\t && !([test_compiler_info {gcc-[0-3]-*}]\n+\t      || [test_compiler_info {gcc-4-0-*}]) } {\n+        # Put it at the front to not override any user-provided value.\n+        lappend new_options \"early_flags=-fno-stack-protector\"\n+    }\n+\n     # Because we link with libraries using their basename, we may need\n     # (depending on the platform) to set a special rpath value, to allow\n     # the executable to find the libraries it depends on."
    }
  ]
}