{
  "sha": "582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTgyOTQyZjQ1NjBmMWM4ZDJhNjBjMjU1NzI2N2Y5ZDNhZDhkZDZhYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-22T21:54:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-25T05:32:08Z"
    },
    "message": "More block constification\n\nI noticed that there are still many places referring to non-const\nblocks.  This constifies all the remaining ones that I found that\ncould be constified.\n\nIn a few spots, this search found unused variables or fields.  I\nremoved these.  I've also removed some unnecessary casts to\n\"struct block *\".\n\ngdb/ChangeLog\n2019-03-24  Tom Tromey  <tom@tromey.com>\n\n\t* c-exp.y (typebase): Remove casts.\n\t* gdbtypes.c (lookup_unsigned_typename, )\n\t(lookup_signed_typename): Remove cast.\n\t* eval.c (parse_to_comma_and_eval): Remove cast.\n\t* parse.c (write_dollar_variable): Remove cast.\n\t* block.h (struct block) <superblock>: Now const.\n\t* symfile-debug.c (debug_qf_map_matching_symbols): Update.\n\t* psymtab.c (psym_map_matching_symbols): Make \"block\" const.\n\t(map_block): Make \"block\" const.\n\t* symfile.h (struct quick_symbol_functions)\n\t<map_matching_symbols>: Constify block argument to \"callback\".\n\t* symtab.c (basic_lookup_transparent_type_quick): Make \"block\"\n\tconst.\n\t(find_pc_sect_compunit_symtab): Make \"b\" const.\n\t(find_symbol_at_address): Likewise.\n\t(search_symbols): Likewise.\n\t* dwarf2read.c (dw2_lookup_symbol): Make \"block\" const.\n\t(dw2_debug_names_lookup_symbol): Likewise.\n\t(dw2_map_matching_symbols): Update.\n\t* p-valprint.c (pascal_val_print): Remove \"block\".\n\t* ada-lang.c (ada_add_global_exceptions): Make \"b\" const.\n\t(aux_add_nonlocal_symbols): Make \"block\" const.\n\t(resolve_subexp): Remove cast.\n\t* linespec.c (iterate_over_all_matching_symtabs): Make \"block\"\n\tconst.\n\t(iterate_over_file_blocks): Likewise.\n\t* f-exp.y (%union) <bval>: Remove.\n\t* coffread.c (patch_opaque_types): Make \"b\" const.\n\t* spu-tdep.c (spu_catch_start): Make \"block\" const.\n\t* c-valprint.c (print_unpacked_pointer): Remove \"block\".\n\t* symmisc.c (dump_symtab_1): Make \"b\" const.\n\t(block_depth): Make \"block\" const.\n\t* d-exp.y (%union) <bval>: Remove.\n\t* cp-support.h (cp_lookup_rtti_type): Update.\n\t* cp-support.c (cp_lookup_rtti_type): Make \"block\" const.\n\t* psymtab.c (psym_lookup_symbol): Make \"block\" const.\n\t(maintenance_check_psymtabs): Make \"b\" const.\n\t* python/py-framefilter.c (extract_sym): Make \"sym_block\" const.\n\t(enumerate_locals, enumerate_args): Update.\n\t* python/py-symtab.c (stpy_global_block): Make \"block\" const.\n\t(stpy_static_block): Likewise.\n\t* inline-frame.c (block_starting_point_at): Make \"new_block\"\n\tconst.\n\t* block.c (find_block_in_blockvector): Make return type const.\n\t(blockvector_for_pc_sect): Make \"b\" const.\n\t(find_block_in_blockvector): Make \"b\" const.",
    "tree": {
      "sha": "6d3663f08e31c531accde3f95c252a5c13ac53af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d3663f08e31c531accde3f95c252a5c13ac53af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "258876ee34a4b656c754355cf175a825e0db80f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/258876ee34a4b656c754355cf175a825e0db80f3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/258876ee34a4b656c754355cf175a825e0db80f3"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 99,
    "deletions": 53
  },
  "files": [
    {
      "sha": "e4cef31e23fcb94352c9684e76422090d309e362",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1,3 +1,52 @@\n+2019-03-24  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-exp.y (typebase): Remove casts.\n+\t* gdbtypes.c (lookup_unsigned_typename, )\n+\t(lookup_signed_typename): Remove cast.\n+\t* eval.c (parse_to_comma_and_eval): Remove cast.\n+\t* parse.c (write_dollar_variable): Remove cast.\n+\t* block.h (struct block) <superblock>: Now const.\n+\t* symfile-debug.c (debug_qf_map_matching_symbols): Update.\n+\t* psymtab.c (psym_map_matching_symbols): Make \"block\" const.\n+\t(map_block): Make \"block\" const.\n+\t* symfile.h (struct quick_symbol_functions)\n+\t<map_matching_symbols>: Constify block argument to \"callback\".\n+\t* symtab.c (basic_lookup_transparent_type_quick): Make \"block\"\n+\tconst.\n+\t(find_pc_sect_compunit_symtab): Make \"b\" const.\n+\t(find_symbol_at_address): Likewise.\n+\t(search_symbols): Likewise.\n+\t* dwarf2read.c (dw2_lookup_symbol): Make \"block\" const.\n+\t(dw2_debug_names_lookup_symbol): Likewise.\n+\t(dw2_map_matching_symbols): Update.\n+\t* p-valprint.c (pascal_val_print): Remove \"block\".\n+\t* ada-lang.c (ada_add_global_exceptions): Make \"b\" const.\n+\t(aux_add_nonlocal_symbols): Make \"block\" const.\n+\t(resolve_subexp): Remove cast.\n+\t* linespec.c (iterate_over_all_matching_symtabs): Make \"block\"\n+\tconst.\n+\t(iterate_over_file_blocks): Likewise.\n+\t* f-exp.y (%union) <bval>: Remove.\n+\t* coffread.c (patch_opaque_types): Make \"b\" const.\n+\t* spu-tdep.c (spu_catch_start): Make \"block\" const.\n+\t* c-valprint.c (print_unpacked_pointer): Remove \"block\".\n+\t* symmisc.c (dump_symtab_1): Make \"b\" const.\n+\t(block_depth): Make \"block\" const.\n+\t* d-exp.y (%union) <bval>: Remove.\n+\t* cp-support.h (cp_lookup_rtti_type): Update.\n+\t* cp-support.c (cp_lookup_rtti_type): Make \"block\" const.\n+\t* psymtab.c (psym_lookup_symbol): Make \"block\" const.\n+\t(maintenance_check_psymtabs): Make \"b\" const.\n+\t* python/py-framefilter.c (extract_sym): Make \"sym_block\" const.\n+\t(enumerate_locals, enumerate_args): Update.\n+\t* python/py-symtab.c (stpy_global_block): Make \"block\" const.\n+\t(stpy_static_block): Likewise.\n+\t* inline-frame.c (block_starting_point_at): Make \"new_block\"\n+\tconst.\n+\t* block.c (find_block_in_blockvector): Make return type const.\n+\t(blockvector_for_pc_sect): Make \"b\" const.\n+\t(find_block_in_blockvector): Make \"b\" const.\n+\n 2019-03-23  Tom Tromey  <tom@tromey.com>\n \n \t* varobj.c (varobj_create): Update."
    },
    {
      "sha": "6626164c37c5a8c32a2df21ec996fd5b365c037f",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -3562,7 +3562,7 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n \n           n_candidates =\n             ada_lookup_symbol_list (ada_decoded_op_name (op),\n-                                    (struct block *) NULL, VAR_DOMAIN,\n+\t\t\t\t    NULL, VAR_DOMAIN,\n                                     &candidates);\n \n           i = ada_resolve_function (candidates.data (), n_candidates, argvec,\n@@ -5416,7 +5416,8 @@ struct match_data\n    other has been found.  */\n \n static int\n-aux_add_nonlocal_symbols (struct block *block, struct symbol *sym, void *data0)\n+aux_add_nonlocal_symbols (const struct block *block, struct symbol *sym,\n+\t\t\t  void *data0)\n {\n   struct match_data *data = (struct match_data *) data0;\n   \n@@ -13560,7 +13561,7 @@ ada_add_global_exceptions (compiled_regex *preg,\n \n \t  for (i = GLOBAL_BLOCK; i <= STATIC_BLOCK; i++)\n \t    {\n-\t      struct block *b = BLOCKVECTOR_BLOCK (bv, i);\n+\t      const struct block *b = BLOCKVECTOR_BLOCK (bv, i);\n \t      struct block_iterator iter;\n \t      struct symbol *sym;\n "
    },
    {
      "sha": "63c7d9f3955a4e149eeeb8a3c574c039b41302f2",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -131,16 +131,16 @@ block_inlined_p (const struct block *bl)\n /* A helper function that checks whether PC is in the blockvector BL.\n    It returns the containing block if there is one, or else NULL.  */\n \n-static struct block *\n+static const struct block *\n find_block_in_blockvector (const struct blockvector *bl, CORE_ADDR pc)\n {\n-  struct block *b;\n+  const struct block *b;\n   int bot, top, half;\n \n   /* If we have an addrmap mapping code addresses to blocks, then use\n      that.  */\n   if (BLOCKVECTOR_MAP (bl))\n-    return (struct block *) addrmap_find (BLOCKVECTOR_MAP (bl), pc);\n+    return (const struct block *) addrmap_find (BLOCKVECTOR_MAP (bl), pc);\n \n   /* Otherwise, use binary search to find the last block that starts\n      before PC.\n@@ -186,7 +186,7 @@ blockvector_for_pc_sect (CORE_ADDR pc, struct obj_section *section,\n \t\t\t struct compunit_symtab *cust)\n {\n   const struct blockvector *bl;\n-  struct block *b;\n+  const struct block *b;\n \n   if (cust == NULL)\n     {"
    },
    {
      "sha": "9291deb61318fb35ecd998be2e9b38adc6489346",
      "filename": "gdb/block.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/block.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/block.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.h?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -107,7 +107,7 @@ struct block\n      case of C) is the STATIC_BLOCK.  The superblock of the\n      STATIC_BLOCK is the GLOBAL_BLOCK.  */\n \n-  struct block *superblock;\n+  const struct block *superblock;\n \n   /* This is used to store the symbols in the block.  */\n "
    },
    {
      "sha": "22768473a83d9b47089f7e6aa4d2f77fb053aeba",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1391,13 +1391,13 @@ typebase\n \t\t\t{ $$ = lookup_typename (parse_language (pstate),\n \t\t\t\t\t\tparse_gdbarch (pstate),\n \t\t\t\t\t\t\"double\",\n-\t\t\t\t\t\t(struct block *) NULL,\n+\t\t\t\t\t\tNULL,\n \t\t\t\t\t\t0); }\n \t|\tLONG DOUBLE_KEYWORD\n \t\t\t{ $$ = lookup_typename (parse_language (pstate),\n \t\t\t\t\t\tparse_gdbarch (pstate),\n \t\t\t\t\t\t\"long double\",\n-\t\t\t\t\t\t(struct block *) NULL,\n+\t\t\t\t\t\tNULL,\n \t\t\t\t\t\t0); }\n \t|\tSTRUCT name\n \t\t\t{ $$ = lookup_struct (copy_name ($2),"
    },
    {
      "sha": "c4306f1488f15af88abb2f44c4b732630235effb",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -197,7 +197,6 @@ print_unpacked_pointer (struct type *type, struct type *elttype,\n \t  struct value *vt_val;\n \t  struct symbol *wsym = NULL;\n \t  struct type *wtype;\n-\t  struct block *block = NULL;\n \n \t  if (want_space)\n \t    fputs_filtered (\" \", stream);\n@@ -206,7 +205,7 @@ print_unpacked_pointer (struct type *type, struct type *elttype,\n \t    {\n \t      const char *search_name\n \t\t= MSYMBOL_SEARCH_NAME (msymbol.minsym);\n-\t      wsym = lookup_symbol_search_name (search_name, block,\n+\t      wsym = lookup_symbol_search_name (search_name, NULL,\n \t\t\t\t\t\tVAR_DOMAIN).symbol;\n \t    }\n "
    },
    {
      "sha": "4354741ab648948d3526768d235fad354cdf5e56",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1496,7 +1496,7 @@ patch_type (struct type *type, struct type *real_type)\n static void\n patch_opaque_types (struct symtab *s)\n {\n-  struct block *b;\n+  const struct block *b;\n   struct block_iterator iter;\n   struct symbol *real_sym;\n "
    },
    {
      "sha": "b79dd5c086fe0788eb62242484650b93ace474b9",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1422,7 +1422,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n /* Lookup the rtti type for a class name.  */\n \n struct type *\n-cp_lookup_rtti_type (const char *name, struct block *block)\n+cp_lookup_rtti_type (const char *name, const struct block *block)\n {\n   struct symbol * rtti_sym;\n   struct type * rtti_type;"
    },
    {
      "sha": "c2e63ea0de3f3b1d8973113df3d1a4a6afa33144",
      "filename": "gdb/cp-support.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/cp-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/cp-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.h?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -118,7 +118,7 @@ extern void add_symbol_overload_list_adl\n    std::vector<symbol *> *overload_list);\n \n extern struct type *cp_lookup_rtti_type (const char *name,\n-\t\t\t\t\t struct block *block);\n+\t\t\t\t\t const struct block *block);\n \n /* Produce an unsigned hash value from SEARCH_NAME that is compatible\n    with cp_symbol_name_matches.  Only the last component in"
    },
    {
      "sha": "a0f7b958c3f9d096599a14a7a015de14826075f0",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -97,7 +97,6 @@ static int type_aggregate_p (struct type *);\n     struct symtoken ssym;\n     int ival;\n     int voidval;\n-    struct block *bval;\n     enum exp_opcode opcode;\n     struct stoken_vector svec;\n   }"
    },
    {
      "sha": "658c86264bfa4d55226f778d6567eb42a75b3a7a",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -4082,7 +4082,7 @@ dw2_lookup_symbol (struct objfile *objfile, int block_index,\n       struct symbol *sym, *with_opaque = NULL;\n       struct compunit_symtab *stab = dw2_instantiate_symtab (per_cu, false);\n       const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n-      struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n+      const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n \n       sym = block_find_symbol (block, name, domain,\n \t\t\t       block_find_non_opaque_type_preferred,\n@@ -4227,7 +4227,7 @@ static void\n dw2_map_matching_symbols (struct objfile *objfile,\n \t\t\t  const char * name, domain_enum domain,\n \t\t\t  int global,\n-\t\t\t  int (*callback) (struct block *,\n+\t\t\t  int (*callback) (const struct block *,\n \t\t\t\t\t   struct symbol *, void *),\n \t\t\t  void *data, symbol_name_match_type match,\n \t\t\t  symbol_compare_ftype *ordered_compare)\n@@ -6083,7 +6083,7 @@ dw2_debug_names_lookup_symbol (struct objfile *objfile, int block_index_int,\n       struct symbol *sym, *with_opaque = NULL;\n       struct compunit_symtab *stab = dw2_instantiate_symtab (per_cu, false);\n       const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n-      struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n+      const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n \n       sym = block_find_symbol (block, name, domain,\n \t\t\t       block_find_non_opaque_type_preferred,"
    },
    {
      "sha": "9d8eb3476baf226b5ae2d3389c2bb39872933f8c",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -123,7 +123,7 @@ parse_and_eval (const char *exp)\n struct value *\n parse_to_comma_and_eval (const char **expp)\n {\n-  expression_up expr = parse_exp_1 (expp, 0, (struct block *) 0, 1);\n+  expression_up expr = parse_exp_1 (expp, 0, nullptr, 1);\n \n   return evaluate_expression (expr.get ());\n }"
    },
    {
      "sha": "f99c26d326e47dc97777445c0992b1de8c59f2df",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -105,7 +105,6 @@ static struct type *convert_to_kind_type (struct type *basetype, int kind);\n     struct ttype tsym;\n     struct symtoken ssym;\n     int voidval;\n-    struct block *bval;\n     enum exp_opcode opcode;\n     struct internalvar *ivar;\n "
    },
    {
      "sha": "7a584172c5ecd74d8917d010415a21deb522e595",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1528,7 +1528,7 @@ lookup_unsigned_typename (const struct language_defn *language,\n \n   strcpy (uns, \"unsigned \");\n   strcpy (uns + 9, name);\n-  return lookup_typename (language, gdbarch, uns, (struct block *) NULL, 0);\n+  return lookup_typename (language, gdbarch, uns, NULL, 0);\n }\n \n struct type *\n@@ -1540,11 +1540,11 @@ lookup_signed_typename (const struct language_defn *language,\n \n   strcpy (uns, \"signed \");\n   strcpy (uns + 7, name);\n-  t = lookup_typename (language, gdbarch, uns, (struct block *) NULL, 1);\n+  t = lookup_typename (language, gdbarch, uns, NULL, 1);\n   /* If we don't find \"signed FOO\" just try again with plain \"FOO\".  */\n   if (t != NULL)\n     return t;\n-  return lookup_typename (language, gdbarch, name, (struct block *) NULL, 0);\n+  return lookup_typename (language, gdbarch, name, NULL, 0);\n }\n \n /* Lookup a structure type named \"struct NAME\","
    },
    {
      "sha": "214cb824976168a320e468cb2ccf657afc7e6831",
      "filename": "gdb/inline-frame.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/inline-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/inline-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inline-frame.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -266,13 +266,14 @@ static int\n block_starting_point_at (CORE_ADDR pc, const struct block *block)\n {\n   const struct blockvector *bv;\n-  struct block *new_block;\n+  const struct block *new_block;\n \n   bv = blockvector_for_pc (pc, NULL);\n   if (BLOCKVECTOR_MAP (bv) == NULL)\n     return 0;\n \n-  new_block = (struct block *) addrmap_find (BLOCKVECTOR_MAP (bv), pc - 1);\n+  new_block = (const struct block *) addrmap_find (BLOCKVECTOR_MAP (bv),\n+\t\t\t\t\t\t   pc - 1);\n   if (new_block == NULL)\n     return 1;\n "
    },
    {
      "sha": "2f39d0908481540c8c8b5963784fc7b295cc7e44",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1159,7 +1159,7 @@ iterate_over_all_matching_symtabs\n \n \t    if (include_inline)\n \t      {\n-\t\tstruct block *block;\n+\t\tconst struct block *block;\n \t\tint i;\n \n \t\tfor (i = FIRST_LOCAL_BLOCK;\n@@ -1203,7 +1203,7 @@ iterate_over_file_blocks\n   (struct symtab *symtab, const lookup_name_info &name,\n    domain_enum domain, gdb::function_view<symbol_found_callback_ftype> callback)\n {\n-  struct block *block;\n+  const struct block *block;\n \n   for (block = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab), STATIC_BLOCK);\n        block != NULL;"
    },
    {
      "sha": "b11292a86bc66bce7be21b05f1a66ff76e8775e0",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -248,7 +248,6 @@ pascal_val_print (struct type *type,\n \t      struct value *vt_val;\n \t      struct symbol *wsym = NULL;\n \t      struct type *wtype;\n-\t      struct block *block = NULL;\n \n \t      if (want_space)\n \t\tfputs_filtered (\" \", stream);\n@@ -257,7 +256,7 @@ pascal_val_print (struct type *type,\n \t\t{\n \t\t  const char *search_name\n \t\t    = MSYMBOL_SEARCH_NAME (msymbol.minsym);\n-\t\t  wsym = lookup_symbol_search_name (search_name, block,\n+\t\t  wsym = lookup_symbol_search_name (search_name, NULL,\n \t\t\t\t\t\t    VAR_DOMAIN).symbol;\n \t\t}\n "
    },
    {
      "sha": "63cbc746aaa3cb92ff1c21eccec537731fc58846",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -648,8 +648,7 @@ write_dollar_variable (struct parser_state *ps, struct stoken str)\n   /* On some systems, such as HP-UX and hppa-linux, certain system routines \n      have names beginning with $ or $$.  Check for those, first.  */\n \n-  sym = lookup_symbol (copy_name (str), (struct block *) NULL,\n-\t\t       VAR_DOMAIN, NULL);\n+  sym = lookup_symbol (copy_name (str), NULL, VAR_DOMAIN, NULL);\n   if (sym.symbol)\n     {\n       write_exp_elt_opcode (ps, OP_VAR_VALUE);"
    },
    {
      "sha": "584a5e97fd8a8d1db7a69f6a8df543ec494bd5b2",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -498,7 +498,7 @@ psym_lookup_symbol (struct objfile *objfile,\n \t     partial symtab is empty, we can assume it won't here\n \t     because lookup_partial_symbol succeeded.  */\n \t  const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n-\t  struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n+\t  const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n \n \t  sym = block_find_symbol (block, name, domain,\n \t\t\t\t   block_find_non_opaque_type_preferred,\n@@ -1165,8 +1165,8 @@ psymtab_to_fullname (struct partial_symtab *ps)\n \n static int\n map_block (const char *name, domain_enum domain, struct objfile *objfile,\n-\t   struct block *block,\n-\t   int (*callback) (struct block *, struct symbol *, void *),\n+\t   const struct block *block,\n+\t   int (*callback) (const struct block *, struct symbol *, void *),\n \t   void *data, symbol_name_match_type match)\n {\n   struct block_iterator iter;\n@@ -1196,7 +1196,7 @@ static void\n psym_map_matching_symbols (struct objfile *objfile,\n \t\t\t   const char *name, domain_enum domain,\n \t\t\t   int global,\n-\t\t\t   int (*callback) (struct block *,\n+\t\t\t   int (*callback) (const struct block *,\n \t\t\t\t\t    struct symbol *, void *),\n \t\t\t   void *data,\n \t\t\t   symbol_name_match_type match,\n@@ -1212,7 +1212,7 @@ psym_map_matching_symbols (struct objfile *objfile,\n \t\t\t\t   ordered_compare))\n \t{\n \t  struct compunit_symtab *cust = psymtab_to_symtab (objfile, ps);\n-\t  struct block *block;\n+\t  const struct block *block;\n \n \t  if (cust == NULL)\n \t    continue;\n@@ -2095,7 +2095,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n   struct symbol *sym;\n   struct compunit_symtab *cust = NULL;\n   const struct blockvector *bv;\n-  struct block *b;\n+  const struct block *b;\n   int length;\n \n   for (objfile *objfile : current_program_space->objfiles ())"
    },
    {
      "sha": "7b241bbed897693a0718176507ae5eb591dedbf0",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -54,7 +54,7 @@ enum mi_print_types\n \n static enum ext_lang_bt_status\n extract_sym (PyObject *obj, gdb::unique_xmalloc_ptr<char> *name,\n-\t     struct symbol **sym, struct block **sym_block,\n+\t     struct symbol **sym, const struct block **sym_block,\n \t     const struct language_defn **language)\n {\n   gdbpy_ref<> result (PyObject_CallMethod (obj, \"symbol\", NULL));\n@@ -449,7 +449,7 @@ enumerate_args (PyObject *iter,\n       const struct language_defn *language;\n       gdb::unique_xmalloc_ptr<char> sym_name;\n       struct symbol *sym;\n-      struct block *sym_block;\n+      const struct block *sym_block;\n       struct value *val;\n       enum ext_lang_bt_status success = EXT_LANG_BT_ERROR;\n \n@@ -567,7 +567,7 @@ enumerate_locals (PyObject *iter,\n       struct value *val;\n       enum ext_lang_bt_status success = EXT_LANG_BT_ERROR;\n       struct symbol *sym;\n-      struct block *sym_block;\n+      const struct block *sym_block;\n       int local_indent = 8 + (8 * indent);\n       gdb::optional<ui_out_emit_tuple> tuple;\n "
    },
    {
      "sha": "15af300150597e005af65242f71f18a0772c9e2f",
      "filename": "gdb/python/py-symtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/python/py-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/python/py-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symtab.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -176,7 +176,7 @@ static PyObject *\n stpy_global_block (PyObject *self, PyObject *args)\n {\n   struct symtab *symtab = NULL;\n-  struct block *block = NULL;\n+  const struct block *block = NULL;\n   const struct blockvector *blockvector;\n \n   STPY_REQUIRE_VALID (self, symtab);\n@@ -192,7 +192,7 @@ static PyObject *\n stpy_static_block (PyObject *self, PyObject *args)\n {\n   struct symtab *symtab = NULL;\n-  struct block *block = NULL;\n+  const struct block *block = NULL;\n   const struct blockvector *blockvector;\n \n   STPY_REQUIRE_VALID (self, symtab);"
    },
    {
      "sha": "c3f5d4e6a781e17d3d2f9fbbf3d2c5e2b9b96371",
      "filename": "gdb/spu-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/spu-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/spu-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/spu-tdep.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -1963,7 +1963,7 @@ spu_catch_start (struct objfile *objfile)\n   if (cust != NULL)\n     {\n       const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (cust);\n-      struct block *block = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n+      const struct block *block = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n       struct symbol *sym;\n       struct symtab_and_line sal;\n "
    },
    {
      "sha": "5b3ae926504e7b2548c5d587e48b0bcef5e7d2b9",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -240,7 +240,7 @@ static void\n debug_qf_map_matching_symbols (struct objfile *objfile,\n \t\t\t       const char *name, domain_enum domain,\n \t\t\t       int global,\n-\t\t\t       int (*callback) (struct block *,\n+\t\t\t       int (*callback) (const struct block *,\n \t\t\t\t\t\tstruct symbol *, void *),\n \t\t\t       void *data,\n \t\t\t       symbol_name_match_type match,"
    },
    {
      "sha": "a873dfe9451b2370e96dc0667a8250d963b7ad4f",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -227,7 +227,7 @@ struct quick_symbol_functions\n   void (*map_matching_symbols) (struct objfile *,\n \t\t\t\tconst char *name, domain_enum domain,\n \t\t\t\tint global,\n-\t\t\t\tint (*callback) (struct block *,\n+\t\t\t\tint (*callback) (const struct block *,\n \t\t\t\t\t\t struct symbol *, void *),\n \t\t\t\tvoid *data,\n \t\t\t\tsymbol_name_match_type match,"
    },
    {
      "sha": "5ff66bd6251976728fb7cddbd2bacd4b8e8ed1ee",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -52,7 +52,7 @@ FILE *std_err;\n \n /* Prototypes for local functions */\n \n-static int block_depth (struct block *);\n+static int block_depth (const struct block *);\n \n static void print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n \t\t\t  int depth, ui_file *outfile);\n@@ -278,7 +278,7 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n   struct linetable *l;\n   const struct blockvector *bv;\n   struct symbol *sym;\n-  struct block *b;\n+  const struct block *b;\n   int depth;\n \n   fprintf_filtered (outfile, \"\\nSymtab for file %s\\n\",\n@@ -950,7 +950,7 @@ maintenance_expand_symtabs (const char *args, int from_tty)\n /* Return the nexting depth of a block within other blocks in its symtab.  */\n \n static int\n-block_depth (struct block *block)\n+block_depth (const struct block *block)\n {\n   int i = 0;\n "
    },
    {
      "sha": "a99bd8e2d7f582f8560a748b0a1eb8d7d868387a",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/582942f4560f1c8d2a60c2557267f9d3ad8dd6aa/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=582942f4560f1c8d2a60c2557267f9d3ad8dd6aa",
      "patch": "@@ -2752,7 +2752,7 @@ basic_lookup_transparent_type_quick (struct objfile *objfile, int block_index,\n {\n   struct compunit_symtab *cust;\n   const struct blockvector *bv;\n-  struct block *block;\n+  const struct block *block;\n   struct symbol *sym;\n \n   if (!objfile->sf)\n@@ -2922,7 +2922,7 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n     {\n       for (compunit_symtab *cust : obj_file->compunits ())\n \t{\n-\t  struct block *b;\n+\t  const struct block *b;\n \t  const struct blockvector *bv;\n \n \t  bv = COMPUNIT_BLOCKVECTOR (cust);\n@@ -3026,7 +3026,7 @@ find_symbol_at_address (CORE_ADDR address)\n \n \t  for (int i = GLOBAL_BLOCK; i <= STATIC_BLOCK; ++i)\n \t    {\n-\t      struct block *b = BLOCKVECTOR_BLOCK (bv, i);\n+\t      const struct block *b = BLOCKVECTOR_BLOCK (bv, i);\n \t      struct block_iterator iter;\n \t      struct symbol *sym;\n \n@@ -4357,7 +4357,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \t\tint nfiles, const char *files[])\n {\n   const struct blockvector *bv;\n-  struct block *b;\n+  const struct block *b;\n   int i = 0;\n   struct block_iterator iter;\n   struct symbol *sym;"
    }
  ]
}