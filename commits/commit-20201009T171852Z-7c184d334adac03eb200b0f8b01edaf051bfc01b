{
  "sha": "7c184d334adac03eb200b0f8b01edaf051bfc01b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2MxODRkMzM0YWRhYzAzZWIyMDBiMGY4YjAxZWRhZjA1MWJmYzAxYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-06T14:56:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-09T17:18:52Z"
    },
    "message": "Fix bit offset regression\n\nThe type-safe attribute patch introduced a regression that can occur\nwhen the DW_AT_bit_offset value is negative.  This can happen with\nsome Ada programs.\n\nThis patch fixes the problem.  It also fixes a minor oddity in the\nexisting scalar storage test -- this test was intended to assign a\nsmaller number of bits to the field.\n\n2020-10-09  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (dwarf2_add_field): Handle signed offsets.\n\ngdb/testsuite/ChangeLog\n2020-10-09  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/scalar_storage/storage.adb (Another_Range): New type.\n\t(Rec): Add field.  Fix range.\n\t* gdb.ada/scalar_storage.exp: Update.",
    "tree": {
      "sha": "38ff6a0265cb9dbbd3683aa7d726bb92bc47e324",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/38ff6a0265cb9dbbd3683aa7d726bb92bc47e324"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c184d334adac03eb200b0f8b01edaf051bfc01b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c184d334adac03eb200b0f8b01edaf051bfc01b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c184d334adac03eb200b0f8b01edaf051bfc01b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c184d334adac03eb200b0f8b01edaf051bfc01b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c4258f4c051a31d7209712ecd28830c55a92034",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c4258f4c051a31d7209712ecd28830c55a92034",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c4258f4c051a31d7209712ecd28830c55a92034"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 23,
    "deletions": 10
  },
  "files": [
    {
      "sha": "80a1d28015ad4b5871da56887110c956dae80871",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7c184d334adac03eb200b0f8b01edaf051bfc01b",
      "patch": "@@ -1,3 +1,7 @@\n+2020-10-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (dwarf2_add_field): Handle signed offsets.\n+\n 2020-10-09  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.h (ada_encode): Return std::string."
    },
    {
      "sha": "2ec3789135d698f4049052bf3286669d0da61ca9",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=7c184d334adac03eb200b0f8b01edaf051bfc01b",
      "patch": "@@ -15050,7 +15050,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n       /* Get bit offset of field.  */\n       handle_data_member_location (die, cu, fp);\n       attr = dwarf2_attr (die, DW_AT_bit_offset, cu);\n-      if (attr != nullptr && attr->form_is_unsigned ())\n+      if (attr != nullptr && attr->form_is_constant ())\n \t{\n \t  if (gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG)\n \t    {\n@@ -15060,7 +15060,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \t         have to do anything special since we don't need to\n \t         know the size of the anonymous object.  */\n \t      SET_FIELD_BITPOS (*fp, (FIELD_BITPOS (*fp)\n-\t\t\t\t      + attr->as_unsigned ()));\n+\t\t\t\t      + attr->constant_value (0)));\n \t    }\n \t  else\n \t    {\n@@ -15071,15 +15071,15 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \t         the field itself.  The result is the bit offset of\n \t         the LSB of the field.  */\n \t      int anonymous_size;\n-\t      int bit_offset = attr->as_unsigned ();\n+\t      int bit_offset = attr->constant_value (0);\n \n \t      attr = dwarf2_attr (die, DW_AT_byte_size, cu);\n-\t      if (attr != nullptr && attr->form_is_unsigned ())\n+\t      if (attr != nullptr && attr->form_is_constant ())\n \t\t{\n \t\t  /* The size of the anonymous object containing\n \t\t     the bit field is explicit, so use the\n \t\t     indicated size (in bytes).  */\n-\t\t  anonymous_size = attr->as_unsigned ();\n+\t\t  anonymous_size = attr->constant_value (0);\n \t\t}\n \t      else\n \t\t{"
    },
    {
      "sha": "d7e80954b1d380c8576d505fd22aefce6cfaee23",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7c184d334adac03eb200b0f8b01edaf051bfc01b",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/scalar_storage/storage.adb (Another_Range): New type.\n+\t(Rec): Add field.  Fix range.\n+\t* gdb.ada/scalar_storage.exp: Update.\n+\n 2020-10-09  Hannes Domani  <ssbssa@yahoo.de>\n \n \tPR exp/26714"
    },
    {
      "sha": "952d7fd136eea80a9721bcf2691a0eadd9066716",
      "filename": "gdb/testsuite/gdb.ada/scalar_storage.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/testsuite/gdb.ada/scalar_storage.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/testsuite/gdb.ada/scalar_storage.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/scalar_storage.exp?ref=7c184d334adac03eb200b0f8b01edaf051bfc01b",
      "patch": "@@ -34,5 +34,5 @@ if ![runto \"storage.adb:$bp_location\" ] then {\n   return\n }\n \n-gdb_test \"print V_LE\" \"= \\\\(value => 126\\\\)\"\n-gdb_test \"print V_BE\" \"= \\\\(value => 126\\\\)\"\n+gdb_test \"print V_LE\" \"= \\\\(value => 126, another_value => 12\\\\)\"\n+gdb_test \"print V_BE\" \"= \\\\(value => 126, another_value => 12\\\\)\""
    },
    {
      "sha": "741718e4e511b6b8befde5ede2ed330f3c87f62d",
      "filename": "gdb/testsuite/gdb.ada/scalar_storage/storage.adb",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/testsuite/gdb.ada/scalar_storage/storage.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c184d334adac03eb200b0f8b01edaf051bfc01b/gdb/testsuite/gdb.ada/scalar_storage/storage.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/scalar_storage/storage.adb?ref=7c184d334adac03eb200b0f8b01edaf051bfc01b",
      "patch": "@@ -18,13 +18,16 @@ with System.Storage_Elements; use System.Storage_Elements;\n \n procedure Storage is\n    subtype Some_Range is Natural range 0..127;\n+   subtype Another_Range is Natural range 0..15;\n \n    type Rec is record\n       Value : Some_Range;\n+      Another_Value : Another_Range;\n    end record;\n    \n    for Rec use record\n-      Value at 0 range 0..127;\n+      Value at 0 range 0..6;\n+      Another_Value at 0 range 7..10;\n    end record;\n \n    type Rec_LE is new Rec;\n@@ -39,8 +42,8 @@ procedure Storage is\n    V_BE : Rec_BE;\n \n begin\n-   V_LE.Value := 126;\n-   V_BE.Value := 126;\n+   V_LE := (126, 12);\n+   V_BE := (126, 12);\n \n    Do_Nothing (V_LE'Address);  --  START\n    Do_Nothing (V_BE'Address);"
    }
  ]
}