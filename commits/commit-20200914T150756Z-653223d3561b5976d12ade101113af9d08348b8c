{
  "sha": "653223d3561b5976d12ade101113af9d08348b8c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjUzMjIzZDM1NjFiNTk3NmQxMmFkZTEwMTExM2FmOWQwODM0OGI4Yw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:56Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:56Z"
    },
    "message": "gdb: add type::is_unsigned / type::set_is_unsigned\n\nAdd the `is_unsigned` and `set_is_unsigned` methods on `struct type`, in\norder to remove the `TYPE_UNSIGNED` macro.  In this patch, the\n`TYPE_UNSIGNED` macro is changed to use `type::is_unsigned`, so all the\ncall sites that are used to set this property on a type are changed to\nuse the new method.  The next patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_unsigned, set_is_unsigned>: New\n\tmethods.\n\t(TYPE_UNSIGNED): Use type::is_unsigned.  Change all write call\n\tsites to use type::set_is_unsigned.\n\nChange-Id: Ib09ddce84eda160a801a8f288cccf61c8ef136bc",
    "tree": {
      "sha": "d91acbd802d4b2500c76e83ac6306471367154d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d91acbd802d4b2500c76e83ac6306471367154d2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/653223d3561b5976d12ade101113af9d08348b8c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/653223d3561b5976d12ade101113af9d08348b8c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/653223d3561b5976d12ade101113af9d08348b8c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/653223d3561b5976d12ade101113af9d08348b8c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "55ea94da360700cd3d96cacb7957904692913c45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55ea94da360700cd3d96cacb7957904692913c45",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/55ea94da360700cd3d96cacb7957904692913c45"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 48,
    "deletions": 27
  },
  "files": [
    {
      "sha": "a10bef5ba143f90cf44c63fe64e0ddc2d315011b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_unsigned, set_is_unsigned>: New\n+\tmethods.\n+\t(TYPE_UNSIGNED): Use type::is_unsigned.  Change all write call\n+\tsites to use type::set_is_unsigned.\n+\n 2020-09-14  Fredrik Hederstierna  <fredrik.hederstierna@verisure.com>\n             Adam Renquinha <arenquinha@cimeq.qc.ca>\n "
    },
    {
      "sha": "c61688db2b153aeee85194ca638deb159782fa22",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -43,7 +43,7 @@ adjust_type_signedness (struct type *type)\n {\n   if (type != NULL && type->code () == TYPE_CODE_RANGE\n       && type->bounds ()->low.const_val () >= 0)\n-    TYPE_UNSIGNED (type) = 1;\n+    type->set_is_unsigned (true);\n }\n \n /* Assuming TYPE is a simple array type, prints its lower bound on STREAM,"
    },
    {
      "sha": "a43d9e2679ee7f3faa14737c55af25a58ce21e10",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -2152,7 +2152,7 @@ coff_read_enum_type (int index, int length, int lastsym,\n     }\n \n   if (unsigned_enum)\n-    TYPE_UNSIGNED (type) = 1;\n+    type->set_is_unsigned (true);\n \n   return type;\n }"
    },
    {
      "sha": "1219bb9ae72f219dc644e5403063535a64d913a9",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -16568,7 +16568,8 @@ update_enumeration_type_from_children (struct die_info *die,\n     }\n \n   if (unsigned_enum)\n-    TYPE_UNSIGNED (type) = 1;\n+    type->set_is_unsigned (true);\n+\n   if (flag_enum)\n     TYPE_FLAG_ENUM (type) = 1;\n }\n@@ -16643,9 +16644,12 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n     {\n       struct type *underlying_type = TYPE_TARGET_TYPE (type);\n       underlying_type = check_typedef (underlying_type);\n-      TYPE_UNSIGNED (type) = TYPE_UNSIGNED (underlying_type);\n+\n+      type->set_is_unsigned (underlying_type->is_unsigned ());\n+\n       if (TYPE_LENGTH (type) == 0)\n \tTYPE_LENGTH (type) = TYPE_LENGTH (underlying_type);\n+\n       if (TYPE_RAW_ALIGN (type) == 0\n \t  && TYPE_RAW_ALIGN (underlying_type) != 0)\n \tset_type_align (type, TYPE_RAW_ALIGN (underlying_type));"
    },
    {
      "sha": "89a310f0ce39298fff661095dcb3691d7ce0736c",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 14,
      "deletions": 16,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -375,7 +375,7 @@ make_pointer_type (struct type *type, struct type **typeptr)\n   /* Mark pointers as unsigned.  The target converts between pointers\n      and addresses (CORE_ADDRs) using gdbarch_pointer_to_address and\n      gdbarch_address_to_pointer.  */\n-  TYPE_UNSIGNED (ntype) = 1;\n+  ntype->set_is_unsigned (true);\n \n   /* Update the length of all the other variants of this type.  */\n   chain = TYPE_CHAIN (ntype);\n@@ -949,14 +949,14 @@ create_range_type (struct type *result_type, struct type *index_type,\n   result_type->set_bounds (bounds);\n \n   if (low_bound->kind () == PROP_CONST && low_bound->const_val () >= 0)\n-    TYPE_UNSIGNED (result_type) = 1;\n+    result_type->set_is_unsigned (true);\n \n   /* Ada allows the declaration of range types whose upper bound is\n      less than the lower bound, so checking the lower bound is not\n      enough.  Make sure we do not mark a range type whose upper bound\n      is negative as unsigned.  */\n   if (high_bound->kind () == PROP_CONST && high_bound->const_val () < 0)\n-    TYPE_UNSIGNED (result_type) = 0;\n+    result_type->set_is_unsigned (false);\n \n   TYPE_ENDIANITY_NOT_DEFAULT (result_type)\n     = TYPE_ENDIANITY_NOT_DEFAULT (index_type);\n@@ -1073,9 +1073,7 @@ get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)\n \n \t  /* Set unsigned indicator if warranted.  */\n \t  if (*lowp >= 0)\n-\t    {\n-\t      TYPE_UNSIGNED (type) = 1;\n-\t    }\n+\t    type->set_is_unsigned (true);\n \t}\n       else\n \t{\n@@ -1400,7 +1398,7 @@ create_set_type (struct type *result_type, struct type *domain_type)\n       TYPE_LENGTH (result_type)\n \t= (bit_length + TARGET_CHAR_BIT - 1) / TARGET_CHAR_BIT;\n       if (low_bound >= 0)\n-\tTYPE_UNSIGNED (result_type) = 1;\n+\tresult_type->set_is_unsigned (true);\n     }\n   result_type->field (0).set_type (domain_type);\n \n@@ -3191,7 +3189,7 @@ init_integer_type (struct objfile *objfile,\n \n   t = init_type (objfile, TYPE_CODE_INT, bit, name);\n   if (unsigned_p)\n-    TYPE_UNSIGNED (t) = 1;\n+    t->set_is_unsigned (true);\n \n   return t;\n }\n@@ -3208,7 +3206,7 @@ init_character_type (struct objfile *objfile,\n \n   t = init_type (objfile, TYPE_CODE_CHAR, bit, name);\n   if (unsigned_p)\n-    TYPE_UNSIGNED (t) = 1;\n+    t->set_is_unsigned (true);\n \n   return t;\n }\n@@ -3225,7 +3223,7 @@ init_boolean_type (struct objfile *objfile,\n \n   t = init_type (objfile, TYPE_CODE_BOOL, bit, name);\n   if (unsigned_p)\n-    TYPE_UNSIGNED (t) = 1;\n+    t->set_is_unsigned (true);\n \n   return t;\n }\n@@ -3319,7 +3317,7 @@ init_pointer_type (struct objfile *objfile,\n \n   t = init_type (objfile, TYPE_CODE_PTR, bit, name);\n   TYPE_TARGET_TYPE (t) = target_type;\n-  TYPE_UNSIGNED (t) = 1;\n+  t->set_is_unsigned (true);\n   return t;\n }\n \n@@ -5477,7 +5475,7 @@ arch_integer_type (struct gdbarch *gdbarch,\n \n   t = arch_type (gdbarch, TYPE_CODE_INT, bit, name);\n   if (unsigned_p)\n-    TYPE_UNSIGNED (t) = 1;\n+    t->set_is_unsigned (true);\n \n   return t;\n }\n@@ -5494,7 +5492,7 @@ arch_character_type (struct gdbarch *gdbarch,\n \n   t = arch_type (gdbarch, TYPE_CODE_CHAR, bit, name);\n   if (unsigned_p)\n-    TYPE_UNSIGNED (t) = 1;\n+    t->set_is_unsigned (true);\n \n   return t;\n }\n@@ -5511,7 +5509,7 @@ arch_boolean_type (struct gdbarch *gdbarch,\n \n   t = arch_type (gdbarch, TYPE_CODE_BOOL, bit, name);\n   if (unsigned_p)\n-    TYPE_UNSIGNED (t) = 1;\n+    t->set_is_unsigned (true);\n \n   return t;\n }\n@@ -5561,7 +5559,7 @@ arch_pointer_type (struct gdbarch *gdbarch,\n \n   t = arch_type (gdbarch, TYPE_CODE_PTR, bit, name);\n   TYPE_TARGET_TYPE (t) = target_type;\n-  TYPE_UNSIGNED (t) = 1;\n+  t->set_is_unsigned (true);\n   return t;\n }\n \n@@ -5574,7 +5572,7 @@ arch_flags_type (struct gdbarch *gdbarch, const char *name, int bit)\n   struct type *type;\n \n   type = arch_type (gdbarch, TYPE_CODE_FLAGS, bit, name);\n-  TYPE_UNSIGNED (type) = 1;\n+  type->set_is_unsigned (true);\n   type->set_num_fields (0);\n   /* Pre-allocate enough space assuming every field is one bit.  */\n   type->set_fields"
    },
    {
      "sha": "cdd19b434923e9b3fbbe4043c68c7ed7efad538f",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -213,7 +213,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n /* * Unsigned integer type.  If this is not set for a TYPE_CODE_INT,\n    the type is signed (unless TYPE_NOSIGN (below) is set).  */\n \n-#define TYPE_UNSIGNED(t)\t(TYPE_MAIN_TYPE (t)->flag_unsigned)\n+#define TYPE_UNSIGNED(t)\t((t)->is_unsigned ())\n \n /* * No sign for this type.  In C++, \"char\", \"signed char\", and\n    \"unsigned char\" are distinct types; so we need an extra flag to\n@@ -855,7 +855,7 @@ struct main_type\n      because they packs nicely here.  See the TYPE_* macros for\n      documentation about these fields.  */\n \n-  unsigned int flag_unsigned : 1;\n+  unsigned int m_flag_unsigned : 1;\n   unsigned int flag_nosign : 1;\n   unsigned int flag_stub : 1;\n   unsigned int flag_target_stub : 1;\n@@ -1068,6 +1068,16 @@ struct type\n     return this->bounds ()->bit_stride ();\n   }\n \n+  bool is_unsigned () const\n+  {\n+    return this->main_type->m_flag_unsigned;\n+  }\n+\n+  void set_is_unsigned (bool is_unsigned)\n+  {\n+    this->main_type->m_flag_unsigned = is_unsigned;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    },
    {
      "sha": "376101e95cbb2e05f9711c247d9832c7bf3b2f70",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -1072,7 +1072,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t\tf++;\n \t      }\n \t    if (unsigned_enum)\n-\t      TYPE_UNSIGNED (t) = 1;\n+\t      t->set_is_unsigned (true);\n \t  }\n \t/* Make this the current type.  */\n \ttop_stack->cur_type = t;"
    },
    {
      "sha": "b30b0750f36f5c8039659bd709fbfb9839f42fe8",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -3616,7 +3616,7 @@ read_enum_type (const char **pp, struct type *type,\n   type->set_code (TYPE_CODE_ENUM);\n   TYPE_STUB (type) = 0;\n   if (unsigned_enum)\n-    TYPE_UNSIGNED (type) = 1;\n+    type->set_is_unsigned (true);\n   type->set_num_fields (nsyms);\n   type->set_fields\n     ((struct field *)\n@@ -3731,7 +3731,8 @@ read_sun_builtin_type (const char **pp, int typenums[2], struct objfile *objfile\n       struct type *type = init_type (objfile, TYPE_CODE_VOID,\n \t\t\t\t     TARGET_CHAR_BIT, NULL);\n       if (unsigned_type)\n-        TYPE_UNSIGNED (type) = 1;\n+\ttype->set_is_unsigned (true);\n+\n       return type;\n     }\n "
    },
    {
      "sha": "611cb9c05b19afdaa1682aad62d39fadfa9ad7a7",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -289,7 +289,8 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n       m_type = arch_type (m_gdbarch, TYPE_CODE_ENUM, e->size * TARGET_CHAR_BIT,\n \t\t\t  e->name.c_str ());\n \n-      TYPE_UNSIGNED (m_type) = 1;\n+      m_type->set_is_unsigned (true);\n+\n       for (const tdesc_type_field &f : e->fields)\n \t{\n \t  struct field *fld"
    },
    {
      "sha": "0dee73a7bbae8a6384c4b0b578fda98e6993a7f8",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/653223d3561b5976d12ade101113af9d08348b8c/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/653223d3561b5976d12ade101113af9d08348b8c/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=653223d3561b5976d12ade101113af9d08348b8c",
      "patch": "@@ -754,7 +754,7 @@ create_enum (struct gdbarch *gdbarch, int bit, const char *name,\n   type->set_num_fields (count);\n   type->set_fields\n     ((struct field *) TYPE_ZALLOC (type, sizeof (struct field) * count));\n-  TYPE_UNSIGNED (type) = 1;\n+  type->set_is_unsigned (true);\n \n   for (i = 0; i < count; i++)\n   {"
    }
  ]
}