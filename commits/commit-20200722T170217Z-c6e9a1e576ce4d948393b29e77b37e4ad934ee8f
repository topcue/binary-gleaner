{
  "sha": "c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzZlOWExZTU3NmNlNGQ5NDgzOTNiMjllNzdiMzdlNGFkOTM0ZWU4Zg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-04T14:25:32Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:17Z"
    },
    "message": "libctf, types: enhance ctf_type_aname to print function arg types\n\nSomehow this never got implemented, which makes debugging any kind of\nbug that has to do with argument types fantastically confusing, because\nit *looks* like the func type takes no arguments though in fact it does.\n\nThis also lets us simplify the dumper slightly (and introduces our first\nuses of ctf_assert and ctf_err_warn: there will be many more).\n\nctf_type_aname dumps function types without including the function\npointer name itself: ctf_dump search-and-replaces it in.  This seems to\ngive the nicest-looking results for existing users of both, even if it\nis a bit fiddly.\n\nlibctf/\n\t* ctf-types.c (ctf_type_aname): Print arg types here...\n\t* ctf-dump.c (ctf_dump_funcs): ... not here: but do substitute\n\tin the type name here.",
    "tree": {
      "sha": "9d1aa02a06b41c5c2cf446d5006152805f8b4c31",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9d1aa02a06b41c5c2cf446d5006152805f8b4c31"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 89,
    "deletions": 50
  },
  "files": [
    {
      "sha": "288ad6e554dec83a15fd8765b8a310b04533ef7c",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-types.c (ctf_type_aname): Print arg types here...\n+\t* ctf-dump.c (ctf_dump_funcs): ... not here: but do substitute\n+\tin the type name here.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_assert): New."
    },
    {
      "sha": "08d79f36d832564dc46eca67255d222bb1be1324",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 38,
      "deletions": 49,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
      "patch": "@@ -397,13 +397,11 @@ ctf_dump_funcs (ctf_file_t *fp, ctf_dump_state_t *state)\n   for (i = 0; i < fp->ctf_nsyms; i++)\n     {\n       char *str;\n-      char *bit;\n+      char *bit = NULL;\n       const char *err;\n       const char *sym_name;\n       ctf_funcinfo_t fi;\n       ctf_id_t type;\n-      size_t j;\n-      ctf_id_t *args;\n \n       if ((type = ctf_func_info (state->cds_fp, i, &fi)) == CTF_ERR)\n \tswitch (ctf_errno (state->cds_fp))\n@@ -418,74 +416,65 @@ ctf_dump_funcs (ctf_file_t *fp, ctf_dump_state_t *state)\n \t  case ECTF_NOFUNCDAT:\n \t    continue;\n \t  }\n-      if ((args = calloc (fi.ctc_argc, sizeof (ctf_id_t))) == NULL)\n-\treturn (ctf_set_errno (fp, ENOMEM));\n \n-      /* Return type.  */\n-      if ((str = ctf_type_aname (state->cds_fp, type)) == NULL)\n+      /* Return type and all args.  */\n+      if ((bit = ctf_type_aname (state->cds_fp, type)) == NULL)\n \t{\n \t  err = \"look up return type\";\n \t  goto err;\n \t}\n \n-      str = str_append (str, \" \");\n-\n-      /* Function name.  */\n+      /* Replace in the returned string, dropping in the function name.  */\n \n       sym_name = ctf_lookup_symbol_name (fp, i);\n-      if (sym_name[0] == '\\0')\n+      if (sym_name[0] != '\\0')\n \t{\n-\t  if (asprintf (&bit, \"0x%lx \", (unsigned long) i) < 0)\n-\t    goto oom;\n-\t}\n-      else\n-\t{\n-\t  if (asprintf (&bit, \"%s (0x%lx) \", sym_name, (unsigned long) i) < 0)\n+\t  char *retstar;\n+\t  char *new_bit;\n+\t  char *walk;\n+\n+\t  new_bit = malloc (strlen (bit) + 1 + strlen (sym_name));\n+\t  if (!new_bit)\n \t    goto oom;\n-\t}\n-      str = str_append (str, bit);\n-      str = str_append (str, \" (\");\n-      free (bit);\n \n-      /* Function arguments.  */\n+\t  /* See ctf_type_aname.  */\n+\t  retstar = strstr (bit, \"(*) (\");\n+\t  if (!ctf_assert (fp, retstar))\n+\t    goto assert_err;\n+\t  retstar += 2;\t\t\t/* After the '*' */\n \n-      if (ctf_func_args (state->cds_fp, i, fi.ctc_argc, args) < 0)\n-\t{\n-\t  err = \"look up argument type\";\n-\t  goto err;\n-\t}\n+\t  /* C is not good at search-and-replace.  */\n+\t  walk = new_bit;\n+\t  memcpy (walk, bit, retstar - bit);\n+\t  walk += (retstar - bit);\n+\t  strcpy (walk, sym_name);\n+\t  walk += strlen (sym_name);\n+\t  strcpy (walk, retstar);\n \n-      for (j = 0; j < fi.ctc_argc; j++)\n-\t{\n-\t  if ((bit = ctf_type_aname (state->cds_fp, args[j])) == NULL)\n-\t    {\n-\t      err = \"look up argument type name\";\n-\t      goto err;\n-\t    }\n-\t  str = str_append (str, bit);\n-\t  if ((j < fi.ctc_argc - 1) || (fi.ctc_flags & CTF_FUNC_VARARG))\n-\t    str = str_append (str, \", \");\n \t  free (bit);\n+\t  bit = new_bit;\n \t}\n \n-      if (fi.ctc_flags & CTF_FUNC_VARARG)\n-\tstr = str_append (str, \"...\");\n-      str = str_append (str, \")\");\n+      if (asprintf (&str, \"Symbol 0x%lx: %s\", (unsigned long) i, bit) < 0)\n+\tgoto oom;\n+      free (bit);\n \n-      free (args);\n       ctf_dump_append (state, str);\n       continue;\n \n+    err:\n+      ctf_err_warn (fp, 1, \"Cannot %s dumping function type for \"\n+\t\t    \"symbol 0x%li: %s\", err, (unsigned long) i,\n+\t\t    ctf_errmsg (ctf_errno (state->cds_fp)));\n+      free (bit);\n+      return -1;\t\t/* errno is set for us.  */\n+\n     oom:\n-      free (args);\n-      free (str);\n+      free (bit);\n       return (ctf_set_errno (fp, errno));\n-    err:\n-      ctf_dprintf (\"Cannot %s dumping function type for symbol 0x%li: %s\\n\",\n-\t\t   err, (unsigned long) i,\n-\t\t   ctf_errmsg (ctf_errno (state->cds_fp)));\n-      free (args);\n-      free (str);\n+\n+    assert_err:\n+      free (bit);\n       return -1;\t\t/* errno is set for us.  */\n     }\n   return 0;"
    },
    {
      "sha": "ddcca66a282446592f1ed6eb696fb19b4e4b80b9",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 45,
      "deletions": 1,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6e9a1e576ce4d948393b29e77b37e4ad934ee8f/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=c6e9a1e576ce4d948393b29e77b37e4ad934ee8f",
      "patch": "@@ -745,7 +745,51 @@ ctf_type_aname (ctf_file_t *fp, ctf_id_t type)\n \t      ctf_decl_sprintf (&cd, \"[%u]\", cdp->cd_n);\n \t      break;\n \t    case CTF_K_FUNCTION:\n-\t      ctf_decl_sprintf (&cd, \"()\");\n+\t      {\n+\t\tsize_t i;\n+\t\tctf_funcinfo_t fi;\n+\t\tctf_id_t *argv = NULL;\n+\n+\t\tif (ctf_func_type_info (rfp, cdp->cd_type, &fi) < 0)\n+\t\t  goto err;\t\t/* errno is set for us.  */\n+\n+\t\tif ((argv = calloc (fi.ctc_argc, sizeof (ctf_id_t *))) == NULL)\n+\t\t  {\n+\t\t    ctf_set_errno (rfp, errno);\n+\t\t    goto err;\n+\t\t  }\n+\n+\t\tif (ctf_func_type_args (rfp, cdp->cd_type,\n+\t\t\t\t\tfi.ctc_argc, argv) < 0)\n+\t\t  goto err;\t\t/* errno is set for us.  */\n+\n+\t\tctf_decl_sprintf (&cd, \"(*) (\");\n+\t\tfor (i = 0; i < fi.ctc_argc; i++)\n+\t\t  {\n+\t\t    char *arg = ctf_type_aname (rfp, argv[i]);\n+\n+\t\t    if (arg == NULL)\n+\t\t      goto err;\t\t/* errno is set for us.  */\n+\t\t    ctf_decl_sprintf (&cd, \"%s\", arg);\n+\t\t    free (arg);\n+\n+\t\t    if ((i < fi.ctc_argc - 1)\n+\t\t\t|| (fi.ctc_flags & CTF_FUNC_VARARG))\n+\t\t      ctf_decl_sprintf (&cd, \", \");\n+\t\t  }\n+\n+\t\tif (fi.ctc_flags & CTF_FUNC_VARARG)\n+\t\t  ctf_decl_sprintf (&cd, \"...\");\n+\t\tctf_decl_sprintf (&cd, \")\");\n+\n+\t\tfree (argv);\n+\t\tbreak;\n+\n+\t      err:\n+\t\tfree (argv);\n+\t\tctf_decl_fini (&cd);\n+\t\treturn NULL;\n+\t      }\n \t      break;\n \t    case CTF_K_STRUCT:\n \t    case CTF_K_FORWARD:"
    }
  ]
}