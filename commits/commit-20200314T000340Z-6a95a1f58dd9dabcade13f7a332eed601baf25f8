{
  "sha": "6a95a1f58dd9dabcade13f7a332eed601baf25f8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmE5NWExZjU4ZGQ5ZGFiY2FkZTEzZjdhMzMyZWVkNjAxYmFmMjVmOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:40Z"
    },
    "message": "Convert Fortran printing to value-based API\n\nThis finishes the conversion of the Fortran printing code to the\nvalue-based API.  The body of f_val_print is copied into\nf_value_print_innner, and then modified as needed to use the value\nAPI.\n\nNote that not all calls must be updated.  For example, f77_print_array\nremains \"val-like\", because it does not result in any calls to\nval_print (f77_print_array_1 calls common_val_print, which is\nnominally value-based).\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* f-valprint.c (f_value_print_innner): Rewrite.",
    "tree": {
      "sha": "3b124636a1888d354653be51b8d1c97cf58bb3b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3b124636a1888d354653be51b8d1c97cf58bb3b2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a95a1f58dd9dabcade13f7a332eed601baf25f8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a95a1f58dd9dabcade13f7a332eed601baf25f8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a95a1f58dd9dabcade13f7a332eed601baf25f8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a95a1f58dd9dabcade13f7a332eed601baf25f8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "59fcdac646cf4ed3168cd787a883d282b4d9de1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/59fcdac646cf4ed3168cd787a883d282b4d9de1f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/59fcdac646cf4ed3168cd787a883d282b4d9de1f"
    }
  ],
  "stats": {
    "total": 171,
    "additions": 169,
    "deletions": 2
  },
  "files": [
    {
      "sha": "75ac39c82f27ff14fcdc07c2ae29087ec956c9ea",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a95a1f58dd9dabcade13f7a332eed601baf25f8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a95a1f58dd9dabcade13f7a332eed601baf25f8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6a95a1f58dd9dabcade13f7a332eed601baf25f8",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* f-valprint.c (f_value_print_innner): Rewrite.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* m2-valprint.c (m2_print_unbounded_array): New overload."
    },
    {
      "sha": "f927214ae653db6f7896ae3bf52e229982d364e2",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 165,
      "deletions": 2,
      "changes": 167,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a95a1f58dd9dabcade13f7a332eed601baf25f8/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a95a1f58dd9dabcade13f7a332eed601baf25f8/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=6a95a1f58dd9dabcade13f7a332eed601baf25f8",
      "patch": "@@ -400,8 +400,171 @@ void\n f_value_print_innner (struct value *val, struct ui_file *stream, int recurse,\n \t\t      const struct value_print_options *options)\n {\n-  f_val_print (value_type (val), value_embedded_offset (val),\n-\t       value_address (val), stream, recurse, val, options);\n+  struct type *type = check_typedef (value_type (val));\n+  struct gdbarch *gdbarch = get_type_arch (type);\n+  int printed_field = 0; /* Number of fields printed.  */\n+  struct type *elttype;\n+  CORE_ADDR addr;\n+  int index;\n+  const gdb_byte *valaddr = value_contents_for_printing (val);\n+  const CORE_ADDR address = value_address (val);\n+\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_STRING:\n+      f77_get_dynamic_length_of_aggregate (type);\n+      LA_PRINT_STRING (stream, builtin_type (gdbarch)->builtin_char,\n+\t\t       valaddr, TYPE_LENGTH (type), NULL, 0, options);\n+      break;\n+\n+    case TYPE_CODE_ARRAY:\n+      if (TYPE_CODE (TYPE_TARGET_TYPE (type)) != TYPE_CODE_CHAR)\n+\t{\n+\t  fprintf_filtered (stream, \"(\");\n+\t  f77_print_array (type, valaddr, 0,\n+\t\t\t   address, stream, recurse, val, options);\n+\t  fprintf_filtered (stream, \")\");\n+\t}\n+      else\n+\t{\n+\t  struct type *ch_type = TYPE_TARGET_TYPE (type);\n+\n+\t  f77_get_dynamic_length_of_aggregate (type);\n+\t  LA_PRINT_STRING (stream, ch_type, valaddr,\n+\t\t\t   TYPE_LENGTH (type) / TYPE_LENGTH (ch_type),\n+\t\t\t   NULL, 0, options);\n+\t}\n+      break;\n+\n+    case TYPE_CODE_PTR:\n+      if (options->format && options->format != 's')\n+\t{\n+\t  value_print_scalar_formatted (val, options, 0, stream);\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  int want_space = 0;\n+\n+\t  addr = unpack_pointer (type, valaddr);\n+\t  elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+\t  if (TYPE_CODE (elttype) == TYPE_CODE_FUNC)\n+\t    {\n+\t      /* Try to print what function it points to.  */\n+\t      print_function_pointer_address (options, gdbarch, addr, stream);\n+\t      return;\n+\t    }\n+\n+\t  if (options->symbol_print)\n+\t    want_space = print_address_demangle (options, gdbarch, addr,\n+\t\t\t\t\t\t stream, demangle);\n+\t  else if (options->addressprint && options->format != 's')\n+\t    {\n+\t      fputs_filtered (paddress (gdbarch, addr), stream);\n+\t      want_space = 1;\n+\t    }\n+\n+\t  /* For a pointer to char or unsigned char, also print the string\n+\t     pointed to, unless pointer is null.  */\n+\t  if (TYPE_LENGTH (elttype) == 1\n+\t      && TYPE_CODE (elttype) == TYPE_CODE_INT\n+\t      && (options->format == 0 || options->format == 's')\n+\t      && addr != 0)\n+\t    {\n+\t      if (want_space)\n+\t\tfputs_filtered (\" \", stream);\n+\t      val_print_string (TYPE_TARGET_TYPE (type), NULL, addr, -1,\n+\t\t\t\tstream, options);\n+\t    }\n+\t  return;\n+\t}\n+      break;\n+\n+    case TYPE_CODE_INT:\n+      if (options->format || options->output_format)\n+\t{\n+\t  struct value_print_options opts = *options;\n+\n+\t  opts.format = (options->format ? options->format\n+\t\t\t : options->output_format);\n+\t  value_print_scalar_formatted (val, &opts, 0, stream);\n+\t}\n+      else\n+\tvalue_print_scalar_formatted (val, options, 0, stream);\n+      break;\n+\n+    case TYPE_CODE_STRUCT:\n+    case TYPE_CODE_UNION:\n+      /* Starting from the Fortran 90 standard, Fortran supports derived\n+         types.  */\n+      fprintf_filtered (stream, \"( \");\n+      for (index = 0; index < TYPE_NFIELDS (type); index++)\n+        {\n+\t  struct value *field = value_field (val, index);\n+\n+\t  struct type *field_type = check_typedef (TYPE_FIELD_TYPE (type, index));\n+\n+\n+\t  if (TYPE_CODE (field_type) != TYPE_CODE_FUNC)\n+\t    {\n+\t      const char *field_name;\n+\n+\t      if (printed_field > 0)\n+\t\tfputs_filtered (\", \", stream);\n+\n+\t      field_name = TYPE_FIELD_NAME (type, index);\n+\t      if (field_name != NULL)\n+\t\t{\n+\t\t  fputs_styled (field_name, variable_name_style.style (),\n+\t\t\t\tstream);\n+\t\t  fputs_filtered (\" = \", stream);\n+\t\t}\n+\n+\t      common_val_print (field, stream, recurse + 1,\n+\t\t\t\toptions, current_language);\n+\n+\t      ++printed_field;\n+\t    }\n+\t }\n+      fprintf_filtered (stream, \" )\");\n+      break;     \n+\n+    case TYPE_CODE_BOOL:\n+      if (options->format || options->output_format)\n+\t{\n+\t  struct value_print_options opts = *options;\n+\t  opts.format = (options->format ? options->format\n+\t\t\t : options->output_format);\n+\t  value_print_scalar_formatted (val, &opts, 0, stream);\n+\t}\n+      else\n+\t{\n+\t  LONGEST longval = value_as_long (val);\n+\t  /* The Fortran standard doesn't specify how logical types are\n+\t     represented.  Different compilers use different non zero\n+\t     values to represent logical true.  */\n+\t  if (longval == 0)\n+\t    fputs_filtered (f_decorations.false_name, stream);\n+\t  else\n+\t    fputs_filtered (f_decorations.true_name, stream);\n+\t}\n+      break;\n+\n+    case TYPE_CODE_REF:\n+    case TYPE_CODE_FUNC:\n+    case TYPE_CODE_FLAGS:\n+    case TYPE_CODE_FLT:\n+    case TYPE_CODE_VOID:\n+    case TYPE_CODE_ERROR:\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_UNDEF:\n+    case TYPE_CODE_COMPLEX:\n+    case TYPE_CODE_CHAR:\n+    default:\n+      generic_value_print (val, stream, recurse, options, &f_decorations);\n+      break;\n+    }\n }\n \n static void"
    }
  ]
}