{
  "sha": "b3fe587ed2c78d46132bd33e14f42449d410354b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjNmZTU4N2VkMmM3OGQ0NjEzMmJkMzNlMTRmNDI0NDlkNDEwMzU0Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-22T23:23:07Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-22T23:34:54Z"
    },
    "message": "PR25018, readelf crash on 32bits\n\nPointer comparisons after adding an offset just don't work to catch\noverflow when the offset is a larger type than the pointer.\n\n\tPR 25018\n\t* dwarf.c (get_type_signedness): Delete ineffective pointer\n\tcomparison check.  Properly range check uvalue offset on\n\trecursive call.\n\t(read_and_display_attr_value): Range check uvalue offset before\n\tcalling get_type_signedness.",
    "tree": {
      "sha": "a7e3e2a9c209320816c2c587550fddaff1a50f6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a7e3e2a9c209320816c2c587550fddaff1a50f6a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b3fe587ed2c78d46132bd33e14f42449d410354b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3fe587ed2c78d46132bd33e14f42449d410354b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b3fe587ed2c78d46132bd33e14f42449d410354b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3fe587ed2c78d46132bd33e14f42449d410354b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a13ba30840ba7a8450dcb4edd356de61fcb89130",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a13ba30840ba7a8450dcb4edd356de61fcb89130",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a13ba30840ba7a8450dcb4edd356de61fcb89130"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 13,
    "deletions": 4
  },
  "files": [
    {
      "sha": "a2ac2b752d949909779c04b39d7922dfcb46f6bf",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3fe587ed2c78d46132bd33e14f42449d410354b/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3fe587ed2c78d46132bd33e14f42449d410354b/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=b3fe587ed2c78d46132bd33e14f42449d410354b",
      "patch": "@@ -1,3 +1,12 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25018\n+\t* dwarf.c (get_type_signedness): Delete ineffective pointer\n+\tcomparison check.  Properly range check uvalue offset on\n+\trecursive call.\n+\t(read_and_display_attr_value): Range check uvalue offset before\n+\tcalling get_type_signedness.\n+\n 2019-09-20  Alan Modra  <amodra@gmail.com>\n \n \t* ar.c (write_archive): Use bfd_set_thin_archive."
    },
    {
      "sha": "2fe469f060368b896720d98738f2680291c52355",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3fe587ed2c78d46132bd33e14f42449d410354b/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3fe587ed2c78d46132bd33e14f42449d410354b/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=b3fe587ed2c78d46132bd33e14f42449d410354b",
      "patch": "@@ -1999,9 +1999,6 @@ get_type_signedness (unsigned char *        start,\n \n   * is_signed = FALSE;\n \n-  if (data >= end)\n-    return;\n-\n   abbrev_number = read_uleb128 (data, & bytes_read, end);\n   data += bytes_read;\n \n@@ -2042,6 +2039,8 @@ get_type_signedness (unsigned char *        start,\n \t\t NB/ We need to avoid infinite recursion.  */\n \t      return;\n \t    }\n+\t  if (uvalue >= (size_t) (end - start))\n+\t    return;\n \t  get_type_signedness (start, start + uvalue, end, pointer_size,\n \t\t\t       offset_size, dwarf_version, is_signed, TRUE);\n \t  break;\n@@ -2725,7 +2724,8 @@ read_and_display_attr_value (unsigned long           attribute,\n   switch (attribute)\n     {\n     case DW_AT_type:\n-      if (level >= 0 && level < MAX_CU_NESTING)\n+      if (level >= 0 && level < MAX_CU_NESTING\n+\t  && uvalue < (size_t) (end - start))\n \t{\n \t  bfd_boolean is_signed = FALSE;\n "
    }
  ]
}