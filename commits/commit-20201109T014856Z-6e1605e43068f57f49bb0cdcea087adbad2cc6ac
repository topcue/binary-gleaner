{
  "sha": "6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmUxNjA1ZTQzMDY4ZjU3ZjQ5YmIwY2RjZWEwODdhZGJhZDJjYzZhYw==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-10-19T05:10:42Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-11-09T01:48:56Z"
    },
    "message": "RISC-V: Update ABI to the elf_flags after parsing elf attributes.\n\nOriginally, if the -mabi option isn't set, then assembler will set the\nabi according to the architecture string in the riscv_after_parse_args.\nBut we should also check and reset the abi later since the architecture\nstring may be reset by the elf attributes.  Therefore, set the abi to\nthe elf_flags in the riscv_after_parse_args seems too early.  Besides,\nwe have to set the abi_xlen before assembling any instruction, so it\nshould be safe to call riscv_set_abi_by_arch at the place that we set\nstart_assemble to TRUE.  However, one minor case is that we won't call\nthe md_assemble when we are assembling an file without any instruction.\nIt seems that we still need to set the abi in riscv_elf_final_processing,\nto make sure that abi can be updated according to the elf arch attributes.\n\nFor the rv32i and most elf toolchains, this patch can fix the mis-matched\nABI errors for Run pr26391-5 and Run pr26391-6 testcases.  Besides, it\nalso correct the elf header flags of the output objects.  Consider the\nnew testcases, mabi-fail-02 and mabi-noabi-attr-[01|02|03], they are\nfailed before applying this patch.\n\nBut I still get the mis-matched ABI errors for the following toolchains\nwhen runnung the riscv-gnu-toolchain regressions,\n\nnewlib-rv32imafc-ilp32f-[medlow|medany]\nlinux-rv32imac-ilp32-[medlow|medany]\nlinux-rv32imafdc-ilp32-[medlow|medany}\nlinux-rv64imac-lp64-[medlow|medany]\nlinux-rv64imafdc-lp64-[medlow|medany}\n\nFor the newlib-rv32imafc-ilp32f, although we try to choose the abi\naccording to the elf attributes, we will use FLOAT_ABI_SOFT rather\nthan the FLOAT_ABI_SINGLE for the assmebly file wihtout setting the\n-mabi, but compiler will set the abi to FLOAT_ABI_SINGLE for the\nC files.\n\nAs for the linux toolchains, we also get fails for Run pr26391-5 and\nRun pr26391-6 testcases.  Since the linux toolchain won't generate elf\nattributes to correct the ISA, and the --with-arch configure option\nisn't set, assembler will try to set the default arch to rv[32|64]g,\nwhich means the FLOAT_ABI_DOUBLE will be choosed, and may be conflict\nwith the abi set by the toolchain.\n\nTherefore, I would suggest that it's is more safe to set the --with-arch\nwhen building binutils, but it may break some testcases.  For example,\nld-scripts/fill and ld-scripts/empty-address-2 may be broken when c-ext\nis set.  We might insert R_RISCV_ALIGN to make sure the 4-byte alignment,\nbut the dump result will be a bit different from what the testcase expected.\n\nHowever, this patch only fix the problem - the abi, elf_flags and the\ninstruction, which is generated according to the abi_xlen, are all fixed\nonce the elf attributes are set for most elf toolchains. Other mis-matched\nABI problems should be fixed when we always build the binutils with the\n--with-arch= configure option.\n\n\tgas/\n\t* config/tc-riscv.c (explicit_mabi): New boolean to indicate if\n\tthe -mabi= option is explictly set.\n\t(md_parse_option): Set explicit_mabi to TRUE if -mabi is set.\n\t(riscv_set_abi_by_arch): New function.  If the -mabi option isn't\n\tset, then we set the abi according to the architecture string.\n\tOtherwise, check if there are conflicts between architecture\n\tand abi setting.\n\t(riscv_after_parse_args): Move the abi setting to md_assemble nad\n\triscv_elf_final_processing.\n\t(md_assemble): Call the riscv_set_abi_by_arch when we set the\n\tstart_assemble to TRUE.\n\t(riscv_elf_final_processing): Likewise, in case the file without\n\tany instruction.\n\n\t* testsuite/gas/riscv/mabi-attr-01.s: New testcase.\n\t* testsuite/gas/riscv/mabi-attr-02.s: Likewise.\n\t* testsuite/gas/riscv/mabi-attr-03.s: Likewise.\n\t* testsuite/gas/riscv/mabi-fail-01.d: Likewise.\n\t* testsuite/gas/riscv/mabi-fail-01.l: Likewise.\n\t* testsuite/gas/riscv/mabi-fail-02.d: Likewise.\n\t* testsuite/gas/riscv/mabi-fail-02.l: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-attr-01a.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-attr-01b.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-attr-02a.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-attr-02b.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-attr-03a.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-attr-03b.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-march-01.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-march-02.d: Likewise.\n\t* testsuite/gas/riscv/mabi-noabi-march-03.d: Likewise.",
    "tree": {
      "sha": "6e7ba66c750d0eb95594bbfc694686d031c36441",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6e7ba66c750d0eb95594bbfc694686d031c36441"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "4985fbc120f778693a686aaac41979af49cd6aa6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4985fbc120f778693a686aaac41979af49cd6aa6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4985fbc120f778693a686aaac41979af49cd6aa6"
    }
  ],
  "stats": {
    "total": 258,
    "additions": 211,
    "deletions": 47
  },
  "files": [
    {
      "sha": "786d0881ca978dcc6a98052634b0174ea6256b41",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -1,3 +1,35 @@\n+2020-11-09  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* config/tc-riscv.c (explicit_mabi): New boolean to indicate if\n+\tthe -mabi= option is explictly set.\n+\t(md_parse_option): Set explicit_mabi to TRUE if -mabi is set.\n+\t(riscv_set_abi_by_arch): New function.  If the -mabi option isn't\n+\tset, then we set the abi according to the architecture string.\n+\tOtherwise, check if there are conflicts between architecture\n+\tand abi setting.\n+\t(riscv_after_parse_args): Move the abi setting to md_assemble nad\n+\triscv_elf_final_processing.\n+\t(md_assemble): Call the riscv_set_abi_by_arch when we set the\n+\tstart_assemble to TRUE.\n+\t(riscv_elf_final_processing): Likewise, in case the file without\n+\tany instruction.\n+\t* testsuite/gas/riscv/mabi-attr-01.s: New testcase.\n+\t* testsuite/gas/riscv/mabi-attr-02.s: Likewise.\n+\t* testsuite/gas/riscv/mabi-attr-03.s: Likewise.\n+\t* testsuite/gas/riscv/mabi-fail-01.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-fail-01.l: Likewise.\n+\t* testsuite/gas/riscv/mabi-fail-02.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-fail-02.l: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-attr-01a.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-attr-01b.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-attr-02a.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-attr-02b.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-attr-03a.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-attr-03b.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-march-01.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-march-02.d: Likewise.\n+\t* testsuite/gas/riscv/mabi-noabi-march-03.d: Likewise.\n+\n 2020-11-04  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* testsuite/gas/aarch64/armv8-ras-1_1-invalid.d: New test."
    },
    {
      "sha": "2340ff57e4cb9aa84c9fed743fe506121e270d08",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 55,
      "deletions": 47,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -91,6 +91,14 @@ static enum riscv_priv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;\n static unsigned xlen = 0; /* width of an x-register */\n static unsigned abi_xlen = 0; /* width of a pointer in the ABI */\n static bfd_boolean rve_abi = FALSE;\n+enum float_abi {\n+  FLOAT_ABI_DEFAULT = -1,\n+  FLOAT_ABI_SOFT,\n+  FLOAT_ABI_SINGLE,\n+  FLOAT_ABI_DOUBLE,\n+  FLOAT_ABI_QUAD\n+};\n+static enum float_abi float_abi = FLOAT_ABI_DEFAULT;\n \n #define LOAD_ADDRESS_INSN (abi_xlen == 64 ? \"ld\" : \"lw\")\n #define ADD32_INSN (xlen == 64 ? \"addiw\" : \"addi\")\n@@ -311,6 +319,50 @@ riscv_set_arch (const char *s)\n   riscv_parse_subset (&rps, s);\n }\n \n+/* Indicate -mabi= option is explictly set.  */\n+static bfd_boolean explicit_mabi = FALSE;\n+\n+static void\n+riscv_set_abi (unsigned new_xlen, enum float_abi new_float_abi, bfd_boolean rve)\n+{\n+  abi_xlen = new_xlen;\n+  float_abi = new_float_abi;\n+  rve_abi = rve;\n+}\n+\n+/* If the -mabi option isn't set, then we set the abi according to the arch\n+   string.  Otherwise, check if there are conflicts between architecture\n+   and abi setting.  */\n+\n+static void\n+riscv_set_abi_by_arch (void)\n+{\n+  if (!explicit_mabi)\n+    {\n+      if (riscv_subset_supports (\"q\"))\n+\triscv_set_abi (xlen, FLOAT_ABI_QUAD, FALSE);\n+      else if (riscv_subset_supports (\"d\"))\n+\triscv_set_abi (xlen, FLOAT_ABI_DOUBLE, FALSE);\n+      else\n+\triscv_set_abi (xlen, FLOAT_ABI_SOFT, FALSE);\n+    }\n+  else\n+    {\n+      gas_assert (abi_xlen != 0 && xlen != 0 && float_abi != FLOAT_ABI_DEFAULT);\n+      if (abi_xlen > xlen)\n+\tas_bad (\"can't have %d-bit ABI on %d-bit ISA\", abi_xlen, xlen);\n+      else if (abi_xlen < xlen)\n+\tas_bad (\"%d-bit ABI not yet supported on %d-bit ISA\", abi_xlen, xlen);\n+    }\n+\n+  /* Update the EF_RISCV_FLOAT_ABI field of elf_flags.  */\n+  elf_flags &= ~EF_RISCV_FLOAT_ABI;\n+  elf_flags |= float_abi << 1;\n+\n+  if (rve_abi)\n+    elf_flags |= EF_RISCV_RVE;\n+}\n+\n /* Handle of the OPCODE hash table.  */\n static htab_t op_hash = NULL;\n \n@@ -2542,6 +2594,7 @@ md_assemble (char *str)\n   if (!start_assemble)\n     {\n       start_assemble = TRUE;\n+      riscv_set_abi_by_arch ();\n \n       /* Set the default_priv_spec according to the priv attributes.  */\n       if (!riscv_set_default_priv_spec (NULL))\n@@ -2613,23 +2666,6 @@ struct option md_longopts[] =\n };\n size_t md_longopts_size = sizeof (md_longopts);\n \n-enum float_abi {\n-  FLOAT_ABI_DEFAULT = -1,\n-  FLOAT_ABI_SOFT,\n-  FLOAT_ABI_SINGLE,\n-  FLOAT_ABI_DOUBLE,\n-  FLOAT_ABI_QUAD\n-};\n-static enum float_abi float_abi = FLOAT_ABI_DEFAULT;\n-\n-static void\n-riscv_set_abi (unsigned new_xlen, enum float_abi new_float_abi, bfd_boolean rve)\n-{\n-  abi_xlen = new_xlen;\n-  float_abi = new_float_abi;\n-  rve_abi = rve;\n-}\n-\n int\n md_parse_option (int c, const char *arg)\n {\n@@ -2670,6 +2706,7 @@ md_parse_option (int c, const char *arg)\n \triscv_set_abi (64, FLOAT_ABI_QUAD, FALSE);\n       else\n \treturn 0;\n+      explicit_mabi = TRUE;\n       break;\n \n     case OPTION_RELAX:\n@@ -2754,36 +2791,6 @@ riscv_after_parse_args (void)\n   if (default_priv_spec == PRIV_SPEC_CLASS_NONE)\n     riscv_set_default_priv_spec (DEFAULT_RISCV_PRIV_SPEC);\n \n-  /* Infer ABI from ISA if not specified on command line.  */\n-  if (abi_xlen == 0)\n-    abi_xlen = xlen;\n-  else if (abi_xlen > xlen)\n-    as_bad (\"can't have %d-bit ABI on %d-bit ISA\", abi_xlen, xlen);\n-  else if (abi_xlen < xlen)\n-    as_bad (\"%d-bit ABI not yet supported on %d-bit ISA\", abi_xlen, xlen);\n-\n-  if (float_abi == FLOAT_ABI_DEFAULT)\n-    {\n-      riscv_subset_t *subset;\n-\n-      /* Assume soft-float unless D extension is present.  */\n-      float_abi = FLOAT_ABI_SOFT;\n-\n-      for (subset = riscv_subsets.head; subset != NULL; subset = subset->next)\n-\t{\n-\t  if (strcasecmp (subset->name, \"D\") == 0)\n-\t    float_abi = FLOAT_ABI_DOUBLE;\n-\t  if (strcasecmp (subset->name, \"Q\") == 0)\n-\t    float_abi = FLOAT_ABI_QUAD;\n-\t}\n-    }\n-\n-  if (rve_abi)\n-    elf_flags |= EF_RISCV_RVE;\n-\n-  /* Insert float_abi into the EF_RISCV_FLOAT_ABI field of elf_flags.  */\n-  elf_flags |= float_abi * (EF_RISCV_FLOAT_ABI & ~(EF_RISCV_FLOAT_ABI << 1));\n-\n   /* If the CIE to be produced has not been overridden on the command line,\n      then produce version 3 by default.  This allows us to use the full\n      range of registers in a .cfi_return_column directive.  */\n@@ -3514,6 +3521,7 @@ tc_riscv_regname_to_dw2regnum (char *regname)\n void\n riscv_elf_final_processing (void)\n {\n+  riscv_set_abi_by_arch ();\n   elf_elfheader (stdoutput)->e_flags |= elf_flags;\n }\n "
    },
    {
      "sha": "178f798cc99956efd342a167d02fb236b89bbf0b",
      "filename": "gas/testsuite/gas/riscv/mabi-attr-01.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-attr-01.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-attr-01.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-attr-01.s?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,6 @@\n+\t.attribute arch,\"rv32i\"\n+\t.option pic\n+\t.extern foo\n+\t.text\n+foo:\n+\tla\ta0, foo"
    },
    {
      "sha": "667d1a65ae75903c2847d2752ed67caa5dfeb58c",
      "filename": "gas/testsuite/gas/riscv/mabi-attr-02.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-attr-02.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-attr-02.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-attr-02.s?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,6 @@\n+\t.attribute arch,\"rv32ifd\"\n+\t.option pic\n+\t.extern foo\n+\t.text\n+foo:\n+\tla\ta0, foo"
    },
    {
      "sha": "6be03e76f5e1e708baf91d5d669fb2f7d74829d0",
      "filename": "gas/testsuite/gas/riscv/mabi-attr-03.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-attr-03.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-attr-03.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-attr-03.s?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,6 @@\n+\t.attribute arch,\"rv64ifdq\"\n+\t.option pic\n+\t.extern foo\n+\t.text\n+foo:\n+\tla\ta0, foo"
    },
    {
      "sha": "78049349330f1f388305053eac7d19c98ce06195",
      "filename": "gas/testsuite/gas/riscv/mabi-fail-01.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-01.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-01.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-fail-01.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march-attr -mabi=lp64d\n+#source: mabi-attr-01.s\n+#error_output: mabi-fail-01.l"
    },
    {
      "sha": "65bf0ac9b8499f9708db2dea1e382e9107143832",
      "filename": "gas/testsuite/gas/riscv/mabi-fail-01.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-01.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-01.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-fail-01.l?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,2 @@\n+.*Assembler messages:\n+.*Error: can't have 64-bit ABI on 32-bit ISA"
    },
    {
      "sha": "2d6cfb024659387cbe25106fa55e7e250130816c",
      "filename": "gas/testsuite/gas/riscv/mabi-fail-02.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-02.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-02.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-fail-02.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march-attr -mabi=ilp32\n+#source: mabi-attr-03.s\n+#error_output: mabi-fail-02.l"
    },
    {
      "sha": "8d45a07fd36b5a271bdcddbb40a184b7e2b584f5",
      "filename": "gas/testsuite/gas/riscv/mabi-fail-02.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-02.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-fail-02.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-fail-02.l?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,2 @@\n+.*Assembler messages:\n+.*Error: 32-bit ABI not yet supported on 64-bit ISA"
    },
    {
      "sha": "11d3ed9161790bc17f4ca9000b08dddaf2394eb3",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-attr-01a.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-01a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-01a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-attr-01a.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,10 @@\n+#as: -march-attr -march=rv64ifd\n+#readelf: -h\n+#source: mabi-attr-01.s\n+\n+ELF Header:\n+#...\n+[ \t]+Class:[ \t]+ELF32\n+#...\n+[ \t]+Flags:[ \t]+0x0\n+#..."
    },
    {
      "sha": "b50ac3c240a568d874698b5b778dd6bb7b5d4f83",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-attr-01b.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-01b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-01b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-attr-01b.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,12 @@\n+#as: -march-attr -march=rv64ifd\n+#objdump: -d\n+#source: mabi-attr-01.s\n+\n+.*:[ \t]+file format elf32.*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <foo>:\n+#...\n+[ \t]+[0-9a-f]+:[ \t]+00052503[ \t]+lw[ \t]+a0,0\\(a0\\) # .*"
    },
    {
      "sha": "9668066aaddf249df01fafb4353fb7fb59e85a61",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-attr-02a.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-02a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-02a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-attr-02a.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,10 @@\n+#as: -march-attr -march=rv64i\n+#readelf: -h\n+#source: mabi-attr-02.s\n+\n+ELF Header:\n+#...\n+[ \t]+Class:[ \t]+ELF32\n+#...\n+[ \t]+Flags:[ \t]+0x4, double-float ABI\n+#..."
    },
    {
      "sha": "a69d0bc8db441f40d031d44ccf9a88f1d3916717",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-attr-02b.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-02b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-02b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-attr-02b.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,12 @@\n+#as: -march-attr -march=rv64i\n+#objdump: -d\n+#source: mabi-attr-02.s\n+\n+.*:[ \t]+file format elf32.*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <foo>:\n+#...\n+[ \t]+[0-9a-f]+:[ \t]+00052503[ \t]+lw[ \t]+a0,0\\(a0\\) # .*"
    },
    {
      "sha": "4392b5cf08834c073ce30ae49babed464e39df9a",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-attr-03a.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-03a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-03a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-attr-03a.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,10 @@\n+#as: -march-attr -march=rv32i\n+#readelf: -h\n+#source: mabi-attr-03.s\n+\n+ELF Header:\n+#...\n+[ \t]+Class:[ \t]+ELF64\n+#...\n+[ \t]+Flags:[ \t]+0x6, quad-float ABI\n+#..."
    },
    {
      "sha": "917ab8c131d6030c3092d595cb75e911cab0ebb8",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-attr-03b.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-03b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-attr-03b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-attr-03b.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,12 @@\n+#as: -march-attr -march=rv32i\n+#objdump: -d\n+#source: mabi-attr-03.s\n+\n+.*:[ \t]+file format elf64.*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <foo>:\n+#...\n+[ \t]+[0-9a-f]+:[ \t]+00053503[ \t]+ld[ \t]+a0,0\\(a0\\) # .*"
    },
    {
      "sha": "8ca280ef17bac5727e1a2904f9272952d8ad13bd",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-march-01.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-march-01.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-march-01.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-march-01.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,10 @@\n+#as: -march=rv32i\n+#readelf: -h\n+#source: empty.s\n+\n+ELF Header:\n+#...\n+[ \t]+Class:[ \t]+ELF32\n+#...\n+[ \t]+Flags:[ \t]+0x0\n+#..."
    },
    {
      "sha": "453fe7b07e2d3213483efcf0d3d9cbe48d490564",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-march-02.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-march-02.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-march-02.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-march-02.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,10 @@\n+#as: -march=rv32ifd\n+#readelf: -h\n+#source: empty.s\n+\n+ELF Header:\n+#...\n+[ \t]+Class:[ \t]+ELF32\n+#...\n+[ \t]+Flags:[ \t]+0x4, double-float ABI\n+#..."
    },
    {
      "sha": "ab2ffc351a09afc599b3ea46048c4ffd132fdf25",
      "filename": "gas/testsuite/gas/riscv/mabi-noabi-march-03.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-march-03.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e1605e43068f57f49bb0cdcea087adbad2cc6ac/gas/testsuite/gas/riscv/mabi-noabi-march-03.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mabi-noabi-march-03.d?ref=6e1605e43068f57f49bb0cdcea087adbad2cc6ac",
      "patch": "@@ -0,0 +1,10 @@\n+#as: -march=rv64ifdq\n+#readelf: -h\n+#source: empty.s\n+\n+ELF Header:\n+#...\n+[ \t]+Class:[ \t]+ELF64\n+#...\n+[ \t]+Flags:[ \t]+0x6, quad-float ABI\n+#..."
    }
  ]
}