{
  "sha": "cb7364414157c42de5ea618d98e2be9eff1894ba",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2I3MzY0NDE0MTU3YzQyZGU1ZWE2MThkOThlMmJlOWVmZjE4OTRiYQ==",
  "commit": {
    "author": {
      "name": "George Barrett",
      "email": "bob@bob131.so",
      "date": "2019-12-15T00:12:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-12-21T21:02:19Z"
    },
    "message": "Fix disabling of solib probes when LD_AUDITing\n\nThe SVR4 solib event handler determines whether an event is related to a\nnon-base link namespace by comparing the event's debug struct address\nto the debug struct address of the initial program image. However, this\ncan fail when using LD_AUDIT as audit libraries are loaded before the\nloader has initialised the initial program image's debug struct. When\nthe event handler fails to find the debug struct, the probe-based\ndebugger interface is disabled and a warning is flagged to the user.\n\nThis commit adds a fallback test to help determine whether an event is\nfor a foreign link namespace when the debug struct isn't available.\n\ngdb/ChangeLog:\n2019-12-15  George Barrett  <bob@bob131.so>\n\n\t* solib-svr4.c (svr4_handle_solib_event): Add fallback link\n\tnamespace test for when the debug struct isn't available.",
    "tree": {
      "sha": "f07e4e39ad4e8b24a6c63aa560eb7067d77c9e69",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f07e4e39ad4e8b24a6c63aa560eb7067d77c9e69"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cb7364414157c42de5ea618d98e2be9eff1894ba",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb7364414157c42de5ea618d98e2be9eff1894ba",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cb7364414157c42de5ea618d98e2be9eff1894ba",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb7364414157c42de5ea618d98e2be9eff1894ba/comments",
  "author": {
    "login": "Bob131",
    "id": 4337852,
    "node_id": "MDQ6VXNlcjQzMzc4NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4337852?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Bob131",
    "html_url": "https://github.com/Bob131",
    "followers_url": "https://api.github.com/users/Bob131/followers",
    "following_url": "https://api.github.com/users/Bob131/following{/other_user}",
    "gists_url": "https://api.github.com/users/Bob131/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Bob131/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Bob131/subscriptions",
    "organizations_url": "https://api.github.com/users/Bob131/orgs",
    "repos_url": "https://api.github.com/users/Bob131/repos",
    "events_url": "https://api.github.com/users/Bob131/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Bob131/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0ea8adde5ddc530772f075873b7d05d4fa29a724",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ea8adde5ddc530772f075873b7d05d4fa29a724",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0ea8adde5ddc530772f075873b7d05d4fa29a724"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 26,
    "deletions": 1
  },
  "files": [
    {
      "sha": "acf9106e844b0f49487d28d9b18ac8325548f5a2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb7364414157c42de5ea618d98e2be9eff1894ba/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb7364414157c42de5ea618d98e2be9eff1894ba/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cb7364414157c42de5ea618d98e2be9eff1894ba",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-21  George Barrett  <bob@bob131.so>\n+\n+\t* solib-svr4.c (svr4_handle_solib_event): Add fallback link\n+\tnamespace test for when the debug struct isn't available.\n+\n 2019-12-21  Eli Zaretskii  <eliz@gnu.org>\n \n \t* top.c (print_gdb_configuration): Print \"--with-xxhash\" or"
    },
    {
      "sha": "f0c7769ac2c95259e9eb87990eb4dbc78da8a970",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb7364414157c42de5ea618d98e2be9eff1894ba/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb7364414157c42de5ea618d98e2be9eff1894ba/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=cb7364414157c42de5ea618d98e2be9eff1894ba",
      "patch": "@@ -1942,7 +1942,27 @@ svr4_handle_solib_event (void)\n     /* Always locate the debug struct, in case it moved.  */\n     info->debug_base = 0;\n     if (locate_base (info) == 0)\n-      return;\n+      {\n+\t/* It's possible for the reloc_complete probe to be triggered before\n+\t   the linker has set the DT_DEBUG pointer (for example, when the\n+\t   linker has finished relocating an LD_AUDIT library or its\n+\t   dependencies).  Since we can't yet handle libraries from other link\n+\t   namespaces, we don't lose anything by ignoring them here.  */\n+\tstruct value *link_map_id_val;\n+\ttry\n+\t  {\n+\t    link_map_id_val = pa->prob->evaluate_argument (0, frame);\n+\t  }\n+\tcatch (const gdb_exception_error)\n+\t  {\n+\t    link_map_id_val = NULL;\n+\t  }\n+\t/* glibc and illumos' libc both define LM_ID_BASE as zero.  */\n+\tif (link_map_id_val != NULL && value_as_long (link_map_id_val) != 0)\n+\t  action = DO_NOTHING;\n+\telse\n+\t  return;\n+      }\n \n     /* GDB does not currently support libraries loaded via dlmopen\n        into namespaces other than the initial one.  We must ignore"
    }
  ]
}