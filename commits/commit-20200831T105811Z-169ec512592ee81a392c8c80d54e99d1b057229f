{
  "sha": "169ec512592ee81a392c8c80d54e99d1b057229f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTY5ZWM1MTI1OTJlZTgxYTM5MmM4YzgwZDU0ZTk5ZDFiMDU3MjI5Zg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-31T08:35:54Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-31T10:58:11Z"
    },
    "message": "PR26493 UBSAN: tc-riscv.c left shift negative and not representable\n\n\tPR 26493\n\t* config/tc-riscv.c (riscv_ip): Cast X_add_number passed to\n\tVALID_* macros to unsigned.",
    "tree": {
      "sha": "9bc33a80239b49ff53acf969af5ab82e487bd0ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9bc33a80239b49ff53acf969af5ab82e487bd0ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/169ec512592ee81a392c8c80d54e99d1b057229f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/169ec512592ee81a392c8c80d54e99d1b057229f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/169ec512592ee81a392c8c80d54e99d1b057229f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/169ec512592ee81a392c8c80d54e99d1b057229f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1174d92070a85a8ad25e9b9686dd1b4921e96702",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1174d92070a85a8ad25e9b9686dd1b4921e96702",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1174d92070a85a8ad25e9b9686dd1b4921e96702"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 23,
    "deletions": 17
  },
  "files": [
    {
      "sha": "9336a6152b51a8bf08a92d59f66aa8b653bb3e43",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/169ec512592ee81a392c8c80d54e99d1b057229f/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/169ec512592ee81a392c8c80d54e99d1b057229f/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=169ec512592ee81a392c8c80d54e99d1b057229f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-31  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26493\n+\t* config/tc-riscv.c (riscv_ip): Cast X_add_number passed to\n+\tVALID_* macros to unsigned.\n+\n 2020-08-31  Alan Modra  <amodra@gmail.com>\n \n \t* config/tc-crx.c: Formatting."
    },
    {
      "sha": "9df6d3f41565f08e398df776be7c5a590dc42108",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/169ec512592ee81a392c8c80d54e99d1b057229f/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/169ec512592ee81a392c8c80d54e99d1b057229f/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=169ec512592ee81a392c8c80d54e99d1b057229f",
      "patch": "@@ -1905,34 +1905,34 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\tcase '<':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_IMM (imm_expr->X_add_number)\n \t\t      || imm_expr->X_add_number <= 0\n-\t\t      || imm_expr->X_add_number >= 32)\n+\t\t      || imm_expr->X_add_number >= 32\n+\t\t      || !VALID_RVC_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase '8':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_UIMM8 (imm_expr->X_add_number)\n \t\t      || imm_expr->X_add_number < 0\n-\t\t      || imm_expr->X_add_number >= 256)\n+\t\t      || imm_expr->X_add_number >= 256\n+\t\t      || !VALID_RVC_UIMM8 ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_UIMM8 (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'i':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n \t\t      || imm_expr->X_add_number == 0\n-\t\t      || !VALID_RVC_SIMM3 (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_SIMM3 ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_SIMM3 (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'j':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n \t\t      || imm_expr->X_add_number == 0\n-\t\t      || !VALID_RVC_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n@@ -1941,7 +1941,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LW_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_LW_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_LW_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n@@ -1950,7 +1950,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LD_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_LD_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_LD_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n@@ -1959,7 +1959,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LWSP_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_LWSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n \t\t    ENCODE_RVC_LWSP_IMM (imm_expr->X_add_number);\n@@ -1969,7 +1969,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LDSP_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_LDSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n \t\t    ENCODE_RVC_LDSP_IMM (imm_expr->X_add_number);\n@@ -1980,24 +1980,24 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t      /* C.addiw, c.li, and c.andi allow zero immediate.\n \t\t\t C.addi allows zero immediate as hint.  Otherwise this\n \t\t\t is same as 'j'.  */\n-\t\t      || !VALID_RVC_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'K':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_ADDI4SPN_IMM (imm_expr->X_add_number)\n-\t\t      || imm_expr->X_add_number == 0)\n+\t\t      || imm_expr->X_add_number == 0\n+\t\t      || !VALID_RVC_ADDI4SPN_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n \t\t    ENCODE_RVC_ADDI4SPN_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'L':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_ADDI16SP_IMM (imm_expr->X_add_number)\n-\t\t      || imm_expr->X_add_number == 0)\n+\t\t      || imm_expr->X_add_number == 0\n+\t\t      || !VALID_RVC_ADDI16SP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n \t\t    ENCODE_RVC_ADDI16SP_IMM (imm_expr->X_add_number);\n@@ -2007,7 +2007,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_SWSP_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_SWSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n \t\t    ENCODE_RVC_SWSP_IMM (imm_expr->X_add_number);\n@@ -2017,7 +2017,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_SDSP_IMM (imm_expr->X_add_number))\n+\t\t      || !VALID_RVC_SDSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n \t\t    ENCODE_RVC_SDSP_IMM (imm_expr->X_add_number);"
    }
  ]
}