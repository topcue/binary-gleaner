{
  "sha": "1d33d811c708941532410850db8279ba30995252",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWQzM2Q4MTFjNzA4OTQxNTMyNDEwODUwZGI4Mjc5YmEzMDk5NTI1Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Use htab_up in abbrev_table\n\nThis changes abbrev_table to use an htab_up rather than an ad hoc,\nbucket-based hash table.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/abbrev.c (abbrev_table): Move constructor from header.\n\tRewrite.\n\t(abbrev_table::add_abbrev, abbrev_table::lookup_abbrev): Rewrite.\n\t* dwarf2/abbrev.h (struct abbrev_info) <next>: Remove.\n\t(abbrev_table::abbrev_table): No longer inline.\n\t(ABBREV_HASH_SIZE): Remove.\n\t(abbrev_table::m_abbrevs): Now an htab_up.\n\nChange-Id: Icbaa8e49501f9c43218d6a81a7e8c4d3a77d65dc",
    "tree": {
      "sha": "93ffb34cf87b3f08f1de3c1f657b4b878d133bc1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93ffb34cf87b3f08f1de3c1f657b4b878d133bc1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1d33d811c708941532410850db8279ba30995252",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d33d811c708941532410850db8279ba30995252",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1d33d811c708941532410850db8279ba30995252",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d33d811c708941532410850db8279ba30995252/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 44,
    "deletions": 33
  },
  "files": [
    {
      "sha": "ab208775b6cdc615040858337a9bd0cf7f7fc07a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d33d811c708941532410850db8279ba30995252/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d33d811c708941532410850db8279ba30995252/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1d33d811c708941532410850db8279ba30995252",
      "patch": "@@ -1,3 +1,13 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/abbrev.c (abbrev_table): Move constructor from header.\n+\tRewrite.\n+\t(abbrev_table::add_abbrev, abbrev_table::lookup_abbrev): Rewrite.\n+\t* dwarf2/abbrev.h (struct abbrev_info) <next>: Remove.\n+\t(abbrev_table::abbrev_table): No longer inline.\n+\t(ABBREV_HASH_SIZE): Remove.\n+\t(abbrev_table::m_abbrevs): Now an htab_up.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_cutu_die_from_dwo): Update."
    },
    {
      "sha": "f843e32d950b0b279341cee7ee73a0b3163c4338",
      "filename": "gdb/dwarf2/abbrev.c",
      "status": "modified",
      "additions": 31,
      "deletions": 17,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d33d811c708941532410850db8279ba30995252/gdb/dwarf2/abbrev.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d33d811c708941532410850db8279ba30995252/gdb/dwarf2/abbrev.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.c?ref=1d33d811c708941532410850db8279ba30995252",
      "patch": "@@ -30,13 +30,39 @@\n #include \"dwarf2/leb.h\"\n #include \"bfd.h\"\n \n+/* Hash function for an abbrev.  */\n+\n+static hashval_t\n+hash_abbrev (const void *item)\n+{\n+  const struct abbrev_info *info = (const struct abbrev_info *) item;\n+  return info->number;\n+}\n+\n+/* Comparison function for abbrevs.  */\n+\n+static int\n+eq_abbrev (const void *lhs, const void *rhs)\n+{\n+  const struct abbrev_info *l_info = (const struct abbrev_info *) lhs;\n+  const struct abbrev_info *r_info = (const struct abbrev_info *) rhs;\n+  return l_info->number == r_info->number;\n+}\n+\n /* Abbreviation tables.\n \n    In DWARF version 2, the description of the debugging information is\n    stored in a separate .debug_abbrev section.  Before we read any\n    dies from a section we read in all abbreviations and install them\n    in a hash table.  */\n \n+abbrev_table::abbrev_table (sect_offset off)\n+  : sect_off (off),\n+    m_abbrevs (htab_create_alloc (20, hash_abbrev, eq_abbrev,\n+\t\t\t\t  nullptr, xcalloc, xfree))\n+{\n+}\n+\n /* Allocate space for a struct abbrev_info object in ABBREV_TABLE.  */\n \n struct abbrev_info *\n@@ -56,11 +82,8 @@ void\n abbrev_table::add_abbrev (unsigned int abbrev_number,\n \t\t\t  struct abbrev_info *abbrev)\n {\n-  unsigned int hash_number;\n-\n-  hash_number = abbrev_number % ABBREV_HASH_SIZE;\n-  abbrev->next = m_abbrevs[hash_number];\n-  m_abbrevs[hash_number] = abbrev;\n+  void **slot = htab_find_slot (m_abbrevs.get (), abbrev, INSERT);\n+  *slot = abbrev;\n }\n \n /* Look up an abbrev in the table.\n@@ -69,19 +92,10 @@ abbrev_table::add_abbrev (unsigned int abbrev_number,\n struct abbrev_info *\n abbrev_table::lookup_abbrev (unsigned int abbrev_number)\n {\n-  unsigned int hash_number;\n-  struct abbrev_info *abbrev;\n-\n-  hash_number = abbrev_number % ABBREV_HASH_SIZE;\n-  abbrev = m_abbrevs[hash_number];\n+  struct abbrev_info search;\n+  search.number = abbrev_number;\n \n-  while (abbrev)\n-    {\n-      if (abbrev->number == abbrev_number)\n-\treturn abbrev;\n-      abbrev = abbrev->next;\n-    }\n-  return NULL;\n+  return (struct abbrev_info *) htab_find (m_abbrevs.get (), &search);\n }\n \n /* Read in an abbrev table.  */"
    },
    {
      "sha": "b9ace64b4482c808a405373845e362073168f3b8",
      "filename": "gdb/dwarf2/abbrev.h",
      "status": "modified",
      "additions": 3,
      "deletions": 16,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d33d811c708941532410850db8279ba30995252/gdb/dwarf2/abbrev.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d33d811c708941532410850db8279ba30995252/gdb/dwarf2/abbrev.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.h?ref=1d33d811c708941532410850db8279ba30995252",
      "patch": "@@ -35,7 +35,6 @@ struct abbrev_info\n     unsigned short has_children;\t\t/* boolean */\n     unsigned short num_attrs;\t/* number of attributes */\n     struct attr_abbrev *attrs;\t/* an array of attribute descriptions */\n-    struct abbrev_info *next;\t/* next in chain */\n   };\n \n struct attr_abbrev\n@@ -47,9 +46,6 @@ struct attr_abbrev\n     LONGEST implicit_const;\n   };\n \n-/* Size of abbrev_table.abbrev_hash_table.  */\n-#define ABBREV_HASH_SIZE 121\n-\n struct abbrev_table;\n typedef std::unique_ptr<struct abbrev_table> abbrev_table_up;\n \n@@ -73,13 +69,7 @@ struct abbrev_table\n \n private:\n \n-  explicit abbrev_table (sect_offset off)\n-    : sect_off (off)\n-  {\n-    m_abbrevs =\n-      XOBNEWVEC (&m_abbrev_obstack, struct abbrev_info *, ABBREV_HASH_SIZE);\n-    memset (m_abbrevs, 0, ABBREV_HASH_SIZE * sizeof (struct abbrev_info *));\n-  }\n+  explicit abbrev_table (sect_offset off);\n \n   DISABLE_COPY_AND_ASSIGN (abbrev_table);\n \n@@ -90,11 +80,8 @@ struct abbrev_table\n   /* Add an abbreviation to the table.  */\n   void add_abbrev (unsigned int abbrev_number, struct abbrev_info *abbrev);\n \n-  /* Hash table of abbrevs.\n-     This is an array of size ABBREV_HASH_SIZE allocated in abbrev_obstack.\n-     It could be statically allocated, but the previous code didn't so we\n-     don't either.  */\n-  struct abbrev_info **m_abbrevs;\n+  /* Hash table of abbrevs.  */\n+  htab_up m_abbrevs;\n \n   /* Storage for the abbrev table.  */\n   auto_obstack m_abbrev_obstack;"
    }
  ]
}