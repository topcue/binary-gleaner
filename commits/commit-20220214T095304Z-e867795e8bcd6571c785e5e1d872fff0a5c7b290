{
  "sha": "e867795e8bcd6571c785e5e1d872fff0a5c7b290",
  "node_id": "C_kwDOANOeidoAKGU4Njc3OTVlOGJjZDY1NzFjNzg1ZTVlMWQ4NzJmZmYwYTVjN2IyOTA",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-10-25T16:26:57Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-02-14T09:53:04Z"
    },
    "message": "gdb: use python to colorize disassembler output\n\nThis commit adds styling support to the disassembler output, as such\ntwo new commands are added to GDB:\n\n  set style disassembler enabled on|off\n  show style disassembler enabled\n\nIn this commit I make use of the Python Pygments package to provide\nthe styling.  I did investigate making use of libsource-highlight,\nhowever, I found the highlighting results to be inferior to those of\nPygments; only some mnemonics were highlighted, and highlighting of\nregister names such as r9d and r8d (on x86-64) was incorrect.\n\nTo enable disassembler highlighting via Pygments, I've added a new\nextension language hook, which is then implemented for Python.  This\nhook is very similar to the existing hook for source code\ncolorization.\n\nOne possibly odd choice I made with the new hook is to pass a\ngdb.Architecture through, even though this is currently unused.  The\nreason this argument is not used is that, currently, styling is\nperformed identically for all architectures.\n\nHowever, even though the Python function used to perform styling of\ndisassembly output is not part of any documented API, I don't want\nto close the door on a user overriding this function to provide\narchitecture specific styling.  To do this, the user would inevitably\nrequire access to the gdb.Architecture, and so I decided to add this\nfield now.\n\nThe styling is applied within gdb_disassembler::print_insn, to achieve\nthis, gdb_disassembler now writes its output into a temporary buffer,\nstyling is then applied to the contents of this buffer.  Finally the\ngdb_disassembler buffer is copied out to its final destination stream.\n\nThere's a new test to check that the disassembler output includes some\nescape sequences, though I don't check for specific colours; the\nprecise colors will depend on which instructions are in the\ndisassembler output, and, I guess, how pygments is configured.\n\nThe only negative change with this commit is how we currently style\naddresses in GDB.\n\nCurrently, when the disassembler wants to print an address, we call\nback into GDB, and GDB prints the address value using the `address`\nstyling, and the symbol name using `function` styling.  After this\ncommit, if pygments is used, then all disassembler styling is done\nthrough pygments, and this include the address and symbol name parts\nof the disassembler output.\n\nI don't know how much of an issue this will be for people.  There's\nalready some precedent for this in GDB when we look at source styling.\nFor example, function names in styled source listings are not styled\nusing the `function` style, but instead, either GNU Source Highlight,\nor pygments gets to decide how the function name should be styled.\n\nIf the Python pygments library is not present then GDB will continue\nto behave as it always has, the disassembler output is mostly\nunstyled, but the address and symbols are styled using the `address`\nand `function` styles, as they are today.\n\nHowever, if the user does `set style disassembler enabled off`, then\nall disassembler styling is switched off.  This obviously covers the\nuse of pygments, but also includes the minimal styling done by GDB\nwhen pygments is not available.",
    "tree": {
      "sha": "7676974d2132823f012a95413cf12d52dfcd7efe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7676974d2132823f012a95413cf12d52dfcd7efe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e867795e8bcd6571c785e5e1d872fff0a5c7b290",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e867795e8bcd6571c785e5e1d872fff0a5c7b290",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e867795e8bcd6571c785e5e1d872fff0a5c7b290",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e867795e8bcd6571c785e5e1d872fff0a5c7b290/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "20ea3acc727f3be6322dfbd881e506873535231d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/20ea3acc727f3be6322dfbd881e506873535231d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/20ea3acc727f3be6322dfbd881e506873535231d"
    }
  ],
  "stats": {
    "total": 355,
    "additions": 352,
    "deletions": 3
  },
  "files": [
    {
      "sha": "9da74e717960138d283770e35cea746ffe072278",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -89,6 +89,12 @@ show suppress-cli-notifications\n   the program being debugged stops (e.g., because of hitting a\n   breakpoint, completing source-stepping, an interrupt, etc.).\n \n+set style disassembler enabled on|off\n+show style disassembler enabled\n+  If GDB is compiled with Python support, and the Python Pygments\n+  package is available, then, when this setting is on, disassembler\n+  output will have styling applied.\n+\n * Changed commands\n \n maint packet"
    },
    {
      "sha": "6c1652d398696995d870a54a3909e9e2d43834ae",
      "filename": "gdb/cli/cli-style.c",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/cli/cli-style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/cli/cli-style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.c?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -38,6 +38,11 @@ bool cli_styling = true;\n \n bool source_styling = true;\n \n+/* True if disassembler styling is enabled.  Note that this is only\n+   consulted when cli_styling is true.  */\n+\n+bool disassembler_styling = true;\n+\n /* Name of colors; must correspond to ui_file_style::basic_color.  */\n static const char * const cli_colors[] = {\n   \"none\",\n@@ -274,6 +279,14 @@ cli_style_option::add_setshow_commands (enum command_class theclass,\n static cmd_list_element *style_set_list;\n static cmd_list_element *style_show_list;\n \n+/* The command list for 'set style disassembler'.  */\n+\n+static cmd_list_element *style_disasm_set_list;\n+\n+/* The command list for 'show style disassembler'.  */\n+\n+static cmd_list_element *style_disasm_show_list;\n+\n static void\n set_style_enabled  (const char *args, int from_tty, struct cmd_list_element *c)\n {\n@@ -301,6 +314,18 @@ show_style_sources (struct ui_file *file, int from_tty,\n     fprintf_filtered (file, _(\"Source code styling is disabled.\\n\"));\n }\n \n+/* Implement 'show style disassembler'.  */\n+\n+static void\n+show_style_disassembler (struct ui_file *file, int from_tty,\n+\t\t\t struct cmd_list_element *c, const char *value)\n+{\n+  if (disassembler_styling)\n+    fprintf_filtered (file, _(\"Disassembler output styling is enabled.\\n\"));\n+  else\n+    fprintf_filtered (file, _(\"Disassembler output styling is disabled.\\n\"));\n+}\n+\n void _initialize_cli_style ();\n void\n _initialize_cli_style ()\n@@ -337,6 +362,25 @@ available if the appropriate extension is available at runtime.\"\n \t\t\t   ), set_style_enabled, show_style_sources,\n \t\t\t   &style_set_list, &style_show_list);\n \n+  add_setshow_prefix_cmd (\"disassembler\", no_class,\n+\t\t\t  _(\"\\\n+Style-specific settings for the disassembler.\\n\\\n+Configure various disassembler style-related variables.\"),\n+\t\t\t  _(\"\\\n+Style-specific settings for the disassembler.\\n\\\n+Configure various disassembler style-related variables.\"),\n+\t\t\t  &style_disasm_set_list, &style_disasm_show_list,\n+\t\t\t  &style_set_list, &style_show_list);\n+\n+  add_setshow_boolean_cmd (\"enabled\", no_class, &disassembler_styling, _(\"\\\n+Set whether disassembler output styling is enabled.\"), _(\"\\\n+Show whether disassembler output styling is enabled.\"), _(\"\\\n+If enabled, disassembler output is styled.  Disassembler highlighting\\n\\\n+requires the Python Pygments library, if this library is not available\\n\\\n+then disassembler highlighting will not be possible.\"\n+\t\t\t   ), set_style_enabled, show_style_disassembler,\n+\t\t\t   &style_disasm_set_list, &style_disasm_show_list);\n+\n   file_name_style.add_setshow_commands (no_class, _(\"\\\n Filename display styling.\\n\\\n Configure filename colors and display intensity.\"),"
    },
    {
      "sha": "f69df47098c0eb711318295f2f834828ea9751ec",
      "filename": "gdb/cli/cli-style.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/cli/cli-style.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/cli/cli-style.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.h?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -128,6 +128,9 @@ extern cli_style_option version_style;\n /* True if source styling is enabled.  */\n extern bool source_styling;\n \n+/* True if disassembler styling is enabled.  */\n+extern bool disassembler_styling;\n+\n /* True if styling is enabled.  */\n extern bool cli_styling;\n "
    },
    {
      "sha": "b4cde801cb001d77f4e47768f2ce5dcb44db3b56",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 56,
      "deletions": 2,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -782,9 +782,12 @@ get_all_disassembler_options (struct gdbarch *gdbarch)\n gdb_disassembler::gdb_disassembler (struct gdbarch *gdbarch,\n \t\t\t\t    struct ui_file *file,\n \t\t\t\t    di_read_memory_ftype read_memory_func)\n-  : m_gdbarch (gdbarch)\n+  : m_gdbarch (gdbarch),\n+    m_buffer (!use_ext_lang_colorization_p && disassembler_styling\n+\t      && file->can_emit_style_escape ()),\n+    m_dest (file)\n {\n-  init_disassemble_info (&m_di, file, dis_asm_fprintf);\n+  init_disassemble_info (&m_di, &m_buffer, dis_asm_fprintf);\n   m_di.flavour = bfd_target_unknown_flavour;\n   m_di.memory_error_func = dis_asm_memory_error;\n   m_di.print_address_func = dis_asm_print_address;\n@@ -813,14 +816,65 @@ gdb_disassembler::~gdb_disassembler ()\n   disassemble_free_target (&m_di);\n }\n \n+/* See disasm.h.  */\n+\n+bool gdb_disassembler::use_ext_lang_colorization_p = true;\n+\n+/* See disasm.h.  */\n+\n int\n gdb_disassembler::print_insn (CORE_ADDR memaddr,\n \t\t\t      int *branch_delay_insns)\n {\n   m_err_memaddr.reset ();\n+  m_buffer.clear ();\n \n   int length = gdbarch_print_insn (arch (), memaddr, &m_di);\n \n+  /* If we have successfully disassembled an instruction, styling is on, we\n+     think that the extension language might be able to perform styling for\n+     us, and the destination can support styling, then lets call into the\n+     extension languages in order to style this output.  */\n+  if (length > 0 && disassembler_styling\n+      && use_ext_lang_colorization_p\n+      && m_dest->can_emit_style_escape ())\n+    {\n+      gdb::optional<std::string> ext_contents;\n+      ext_contents = ext_lang_colorize_disasm (m_buffer.string (), arch ());\n+      if (ext_contents.has_value ())\n+\tm_buffer = std::move (*ext_contents);\n+      else\n+\t{\n+\t  /* The extension language failed to add styling to the\n+\t     disassembly output.  Set the static flag so that next time we\n+\t     disassemble we don't even bother attempting to use the\n+\t     extension language for styling.  */\n+\t  use_ext_lang_colorization_p = false;\n+\n+\t  /* The instruction we just disassembled, and the extension\n+\t     languages failed to style, might have otherwise had some\n+\t     minimal styling applied by GDB.  To regain that styling we\n+\t     need to recreate m_buffer, but this time with styling support.\n+\n+\t     To do this we perform an in-place new, but this time turn on\n+\t     the styling support, then we can re-disassembly the\n+\t     instruction, and gain any minimal styling GDB might add.  */\n+\t  gdb_static_assert ((std::is_same<decltype (m_buffer),\n+\t\t\t      string_file>::value));\n+\t  gdb_assert (!m_buffer.term_out ());\n+\t  m_buffer.~string_file ();\n+\t  new (&m_buffer) string_file (true);\n+\t  length = gdbarch_print_insn (arch (), memaddr, &m_di);\n+\t  gdb_assert (length > 0);\n+\t}\n+    }\n+\n+  /* Push any disassemble output to the real destination stream.  We do\n+     this even if the disassembler reported failure (-1) as the\n+     disassembler may have printed something to its output stream.  */\n+  m_di.fprintf_func (m_dest, \"%s\", m_buffer.c_str ());\n+\n+  /* If the disassembler failed then report an appropriate error.  */\n   if (length < 0)\n     {\n       if (m_err_memaddr.has_value ())"
    },
    {
      "sha": "399afc5ae71606984b9f00a37e81987d131c697b",
      "filename": "gdb/disasm.h",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.h?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -82,6 +82,31 @@ class gdb_disassembler\n      non-memory error.  */\n   gdb::optional<CORE_ADDR> m_err_memaddr;\n \n+  /* Disassembler output is built up into this buffer.  Whether this\n+     string_file is created with styling support or not depends on the\n+     value of use_ext_lang_colorization_p, as well as whether disassembler\n+     styling in general is turned on, and also, whether *m_dest supports\n+     styling or not.  */\n+  string_file m_buffer;\n+\n+  /* The stream to which disassembler output will be written.  */\n+  ui_file *m_dest;\n+\n+  /* When true, m_buffer will be created without styling support,\n+     otherwise, m_buffer will be created with styling support.\n+\n+     This field will initially be true, but will be set to false if\n+     ext_lang_colorize_disasm fails to add styling at any time.\n+\n+     If the extension language is going to add the styling then m_buffer\n+     should be created without styling support, the extension language will\n+     then add styling at the end of the disassembly process.\n+\n+     If the extension language is not going to add the styling, then we\n+     create m_buffer with styling support, and GDB will add minimal styling\n+     (currently just to addresses and symbols) as it goes.  */\n+  static bool use_ext_lang_colorization_p;\n+\n   static int dis_asm_fprintf (void *stream, const char *format, ...)\n     ATTRIBUTE_PRINTF(2,3);\n "
    },
    {
      "sha": "a68cf31dcf33beb0e139afe3a20a0f5943abfa36",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -26132,6 +26132,21 @@ then it will be used.\n \n @item show style sources\n Show the current state of source code styling.\n+\n+@item set style disassembler enabled @samp{on|off}\n+Enable or disable disassembler styling.  This affects whether\n+disassembler output, such as the output of the @code{disassemble}\n+command, is styled.  Disassembler styling only works if styling in\n+general is enabled (with @code{set style enabled on}), and if a source\n+highlighting library is available to @value{GDBN}.\n+\n+To highlight disassembler output, @value{GDBN} must be compiled with\n+Python support, and the Python Pygments package must be available.  If\n+these requirements are not met then @value{GDBN} will not highlight\n+disassembler output, even when this option is @samp{on}.\n+\n+@item show style disassembler enabled\n+Show the current state of disassembler styling.\n @end table\n \n Subcommands of @code{set style} control specific forms of styling."
    },
    {
      "sha": "d9450b5123103adf66f3b36bde40c426132b9fd7",
      "filename": "gdb/extension-priv.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/extension-priv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/extension-priv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension-priv.h?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -257,6 +257,12 @@ struct extension_language_ops\n      or an empty option.  */\n   gdb::optional<std::string> (*colorize) (const std::string &name,\n \t\t\t\t\t  const std::string &contents);\n+\n+  /* Colorize a single line of disassembler output, CONTENT.  This should\n+     either return colorized (using ANSI terminal escapes) version of the\n+     contents, or an empty optional.  */\n+  gdb::optional<std::string> (*colorize_disasm) (const std::string &content,\n+\t\t\t\t\t\t gdbarch *gdbarch);\n };\n \n /* State necessary to restore a signal handler to its previous value.  */"
    },
    {
      "sha": "8f39b86e952563fb57b334356ae63d4ff40062ca",
      "filename": "gdb/extension.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/extension.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/extension.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.c?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -904,6 +904,26 @@ ext_lang_colorize (const std::string &filename, const std::string &contents)\n   return result;\n }\n \n+/* See extension.h.  */\n+\n+gdb::optional<std::string>\n+ext_lang_colorize_disasm (const std::string &content, gdbarch *gdbarch)\n+{\n+  gdb::optional<std::string> result;\n+\n+  for (const struct extension_language_defn *extlang : extension_languages)\n+    {\n+      if (extlang->ops == nullptr\n+\t  || extlang->ops->colorize_disasm == nullptr)\n+\tcontinue;\n+      result = extlang->ops->colorize_disasm (content, gdbarch);\n+      if (result.has_value ())\n+\treturn result;\n+    }\n+\n+  return result;\n+}\n+\n /* Called via an observer before gdb prints its prompt.\n    Iterate over the extension languages giving them a chance to\n    change the prompt.  The first one to change the prompt wins,"
    },
    {
      "sha": "7eb89530c444bab1dbf576c5dc7af0155e36287c",
      "filename": "gdb/extension.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/extension.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/extension.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.h?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -319,6 +319,14 @@ extern void get_matching_xmethod_workers\n extern gdb::optional<std::string> ext_lang_colorize\n   (const std::string &filename, const std::string &contents);\n \n+/* Try to colorize a single line of disassembler output, CONTENT for\n+   GDBARCH.  This will return either a colorized (using ANSI terminal\n+   escapes) version of CONTENT, or an empty value if colorizing could not\n+   be done.  */\n+\n+extern gdb::optional<std::string> ext_lang_colorize_disasm\n+  (const std::string &content, gdbarch *gdbarch);\n+\n #if GDB_SELF_TEST\n namespace selftests {\n extern void (*hook_set_active_ext_lang) ();"
    },
    {
      "sha": "891f89093f1578aa36325e6a934ea9b0178e778f",
      "filename": "gdb/python/lib/gdb/__init__.py",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/python/lib/gdb/__init__.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/python/lib/gdb/__init__.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/lib/gdb/__init__.py?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -264,7 +264,20 @@ def colorize(filename, contents):\n         except:\n             return None\n \n+    def colorize_disasm(content, gdbarch):\n+        # Don't want any errors.\n+        try:\n+            lexer = lexers.get_lexer_by_name(\"asm\")\n+            formatter = formatters.TerminalFormatter()\n+            return highlight(content, lexer, formatter).rstrip().encode()\n+        except:\n+            return None\n+\n+\n except:\n \n     def colorize(filename, contents):\n         return None\n+\n+    def colorize_disasm(content, gdbarch):\n+        return None"
    },
    {
      "sha": "cc80dc1daf9f828de50ff2fdc9261945ab9e58c6",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -121,6 +121,8 @@ static enum ext_lang_rc gdbpy_before_prompt_hook\n   (const struct extension_language_defn *, const char *current_gdb_prompt);\n static gdb::optional<std::string> gdbpy_colorize\n   (const std::string &filename, const std::string &contents);\n+static gdb::optional<std::string> gdbpy_colorize_disasm\n+  (const std::string &content, gdbarch *gdbarch);\n \n /* The interface between gdb proper and loading of python scripts.  */\n \n@@ -162,6 +164,8 @@ static const struct extension_language_ops python_extension_ops =\n   gdbpy_get_matching_xmethod_workers,\n \n   gdbpy_colorize,\n+\n+  gdbpy_colorize_disasm,\n };\n \n #endif /* HAVE_PYTHON */\n@@ -1213,6 +1217,69 @@ gdbpy_colorize (const std::string &filename, const std::string &contents)\n   return std::string (PyBytes_AsString (result.get ()));\n }\n \n+/* This is the extension_language_ops.colorize_disasm \"method\".  */\n+\n+static gdb::optional<std::string>\n+gdbpy_colorize_disasm (const std::string &content, gdbarch *gdbarch)\n+{\n+  if (!gdb_python_initialized)\n+    return {};\n+\n+  gdbpy_enter enter_py;\n+\n+  if (gdb_python_module == nullptr\n+      || !PyObject_HasAttrString (gdb_python_module, \"colorize_disasm\"))\n+    return {};\n+\n+  gdbpy_ref<> hook (PyObject_GetAttrString (gdb_python_module,\n+\t\t\t\t\t    \"colorize_disasm\"));\n+  if (hook == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  if (!PyCallable_Check (hook.get ()))\n+    return {};\n+\n+  gdbpy_ref<> content_arg (PyBytes_FromString (content.c_str ()));\n+  if (content_arg == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  gdbpy_ref<> gdbarch_arg (gdbarch_to_arch_object (gdbarch));\n+  if (gdbarch_arg == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  gdbpy_ref<> result (PyObject_CallFunctionObjArgs (hook.get (),\n+\t\t\t\t\t\t    content_arg.get (),\n+\t\t\t\t\t\t    gdbarch_arg.get (),\n+\t\t\t\t\t\t    nullptr));\n+  if (result == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  if (result == Py_None)\n+    return {};\n+\n+  if (!PyBytes_Check (result.get ()))\n+    {\n+      PyErr_SetString (PyExc_TypeError,\n+\t\t       _(\"Return value from gdb.colorize_disasm should be a bytes object or None.\"));\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  return std::string (PyBytes_AsString (result.get ()));\n+}\n+\n \f\n \n /* Printing.  */"
    },
    {
      "sha": "68196d6e3e28872a925f9d9734fdf7cca9f62e21",
      "filename": "gdb/testsuite/gdb.base/style.exp",
      "status": "modified",
      "additions": 81,
      "deletions": 1,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/testsuite/gdb.base/style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/testsuite/gdb.base/style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.exp?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -13,6 +13,8 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+load_lib gdb-python.exp\n+\n # Test CLI output styling.\n \n standard_testfile\n@@ -187,8 +189,16 @@ proc run_style_tests { } {\n \n \tgdb_test_no_output \"set width 0\"\n \n+\t# If disassembler styling is being done by the Python pygments\n+\t# module, then we can't be sure how the 'some_called_function'\n+\t# symbol will be styled.  However, if pygments is not being\n+\t# used then we can know how the symbol name will be styled.\n \tset main [limited_style main function]\n-\tset func [limited_style some_called_function function]\n+\tif { $::python_disassembly_styling } {\n+\t    set func \"some_called_function\"\n+\t} else {\n+\t    set func [limited_style some_called_function function]\n+\t}\n \t# Somewhere should see the call to the function.\n \tgdb_test \"disassemble main\" \\\n \t    [concat \"Dump of assembler code for function $main:.*\" \\\n@@ -304,6 +314,62 @@ proc run_style_tests { } {\n     }\n }\n \n+# Check that disassembler styling can be disabled.  The function that\n+# we are disassembling has some minimal styling applied even if the\n+# Python pygments module is not available, so, when we disable\n+# disassembler styling, we should always see a change in output.\n+proc test_disable_disassembler_styling { } {\n+    save_vars { env(TERM) } {\n+\t# We need an ANSI-capable terminal to get the output.\n+\tsetenv TERM ansi\n+\n+\t# Restart GDB with the correct TERM variable setting, this\n+\t# means that GDB will enable styling.\n+\tclean_restart_and_disable $::binfile\n+\n+\tset styled_hex [limited_style $::hex address]\n+\tset main [limited_style main function]\n+\n+\tforeach_with_prefix disasm_styling { on off } {\n+\t    gdb_test_no_output \"set style disassembler enabled ${disasm_styling}\"\n+\n+\t    set saw_header_line false\n+\t    set saw_styled_output_line false\n+\t    set saw_unstyled_output_line false\n+\t    gdb_test_multiple \"disassemble main\" \"\" {\n+\t\t-re \"disassemble main\\r\\n\" {\n+\t\t    exp_continue\n+\t\t}\n+\t\t-re \"^Dump of assembler code for function $main:\" {\n+\t\t    set saw_header_line true\n+\t\t    exp_continue\n+\t\t}\n+\t\t-re \"^\\\\s+${styled_hex}\\\\s+<\\[^>\\]+>:\\\\s+\\[^\\r\\n\\033\\]+\\r\\n\" {\n+\t\t    set saw_unstyled_output_line true\n+\t\t    exp_continue\n+\t\t}\n+\t\t-re \"^\\\\s+${styled_hex}\\\\s+<\\[^>\\]+>:\\\\s+\\[^\\r\\n\\]+\\033\\[^\\r\\n\\]+\\r\\n\" {\n+\t\t    set saw_styled_output_line true\n+\t\t    exp_continue\n+\t\t}\n+\t\t-re \"^End of assembler dump\\\\.\\r\\n\" {\n+\t\t    exp_continue\n+\t\t}\n+\t\t-re \"^$::gdb_prompt $\" {\n+\t\t    gdb_assert { $saw_header_line }\n+\t\t    if { $disasm_styling } {\n+\t\t\tgdb_assert { $saw_styled_output_line }\n+\t\t\tgdb_assert { !$saw_unstyled_output_line }\n+\t\t    } else {\n+\t\t\tgdb_assert { !$saw_styled_output_line }\n+\t\t\tgdb_assert { $saw_unstyled_output_line }\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n # A separate test from the above as the styled text this checks can't\n # currently be disabled (the text is printed too early in GDB's\n # startup process).\n@@ -317,6 +383,15 @@ proc test_startup_version_string { } {\n     gdb_test \"\" \"${vers}.*\" \"version is styled at startup\"\n }\n \n+# Check to see if the Python styling of disassembler output is\n+# expected or not, this styling requires Python support in GDB, and\n+# the Python pygments module to be available.\n+clean_restart ${binfile}\n+if {![skip_python_tests] && [gdb_py_module_available \"pygments\"]} {\n+    set python_disassembly_styling true\n+} else {\n+    set python_disassembly_styling false\n+}\n \n # Run tests with all styles in their default state.\n with_test_prefix \"all styles enabled\" {\n@@ -333,5 +408,10 @@ foreach style { title file function highlight variable \\\n     }\n }\n \n+# Check that the disassembler styling can be disabled.\n+if { $python_disassembly_styling } {\n+    test_disable_disassembler_styling\n+}\n+\n # Finally, check the styling of the version string during startup.\n test_startup_version_string"
    },
    {
      "sha": "d8bc3fb3e24b3032203cb958a19e96ea1b4a3d99",
      "filename": "gdb/ui-file.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/ui-file.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e867795e8bcd6571c785e5e1d872fff0a5c7b290/gdb/ui-file.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-file.h?ref=e867795e8bcd6571c785e5e1d872fff0a5c7b290",
      "patch": "@@ -191,6 +191,14 @@ class string_file : public ui_file\n     return ret;\n   }\n \n+  /* Set the internal buffer contents to STR.  Any existing contents are\n+     discarded.  */\n+  string_file &operator= (std::string &&str)\n+  {\n+    m_string = std::move (str);\n+    return *this;\n+  }\n+\n   /* Provide a few convenience methods with the same API as the\n      underlying std::string.  */\n   const char *data () const { return m_string.data (); }"
    }
  ]
}