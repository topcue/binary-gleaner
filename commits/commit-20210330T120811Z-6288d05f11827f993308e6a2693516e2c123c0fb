{
  "sha": "6288d05f11827f993308e6a2693516e2c123c0fb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjI4OGQwNWYxMTgyN2Y5OTMzMDhlNmEyNjkzNTE2ZTJjMTIzYzBmYg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-30T12:08:11Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-30T12:08:11Z"
    },
    "message": "x86: adjust st(<N>) parsing\n\nst(1) ... st(7) will never be looked up in the hash table, so there's no\npoint inserting the entries. It's also not really necessary to do a 2nd\nhash lookup after parsing the register number, nor is there a real\nreason for having both st and st(0) entries. Plus we can easily do away\nwith the need for st to be first in the table.",
    "tree": {
      "sha": "c83372fd531e4f4c3fd551da638244be6b13b138",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c83372fd531e4f4c3fd551da638244be6b13b138"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6288d05f11827f993308e6a2693516e2c123c0fb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6288d05f11827f993308e6a2693516e2c123c0fb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6288d05f11827f993308e6a2693516e2c123c0fb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6288d05f11827f993308e6a2693516e2c123c0fb/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ca5312a2416f065517c354cb6a9cc2616174761b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca5312a2416f065517c354cb6a9cc2616174761b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ca5312a2416f065517c354cb6a9cc2616174761b"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 42,
    "deletions": 18
  },
  "files": [
    {
      "sha": "468be74256c76da7dc76a290b30a88bafed2fb7b",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6288d05f11827f993308e6a2693516e2c123c0fb/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6288d05f11827f993308e6a2693516e2c123c0fb/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6288d05f11827f993308e6a2693516e2c123c0fb",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (reg_st0): New.\n+\t(md_begin): Convert to switch(). Initialize reg_st0. Don't\n+\tinsert other st(N).\n+\t(parse_real_register): Adjust st(N) processing.\n+\n 2021-03-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (rc_op): Delete."
    },
    {
      "sha": "3a7d50484ff49b8bda3c69eb2407af8971f431e1",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 22,
      "deletions": 6,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6288d05f11827f993308e6a2693516e2c123c0fb/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6288d05f11827f993308e6a2693516e2c123c0fb/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=6288d05f11827f993308e6a2693516e2c123c0fb",
      "patch": "@@ -214,6 +214,7 @@ static const char *default_arch = DEFAULT_ARCH;\n static const reg_entry bad_reg = { \"<bad>\", OPERAND_TYPE_NONE, 0, 0,\n \t\t\t\t   { Dw2Inval, Dw2Inval } };\n \n+static const reg_entry *reg_st0;\n static const reg_entry *reg_k0;\n \n /* VEX prefix.  */\n@@ -3087,11 +3088,27 @@ md_begin (void)\n \n     for (regtab = i386_regtab; regtab_size--; regtab++)\n       {\n+\tswitch (regtab->reg_type.bitfield.class)\n+\t  {\n+\t  case Reg:\n+\t    if (regtab->reg_type.bitfield.tbyte)\n+\t      {\n+\t\t/* There's no point inserting st(<N>) in the hash table, as\n+\t\t   parentheses aren't included in register_chars[] anyway.  */\n+\t\tif (regtab->reg_type.bitfield.instance != Accum)\n+\t\t  continue;\n+\t\treg_st0 = regtab;\n+\t      }\n+\t    break;\n+\n+\t  case RegMask:\n+\t    if (!regtab->reg_num)\n+\t      reg_k0 = regtab;\n+\t    break;\n+\t  }\n+\n \tif (str_hash_insert (reg_hash, regtab->reg_name, regtab, 0) != NULL)\n \t  as_fatal (_(\"duplicate %s\"), regtab->reg_name);\n-\n-\tif (regtab->reg_type.bitfield.class == RegMask && !regtab->reg_num)\n-\t  reg_k0 = regtab;\n       }\n   }\n \n@@ -12712,7 +12729,7 @@ parse_real_register (char *reg_string, char **end_op)\n   r = (const reg_entry *) str_hash_find (reg_hash, reg_name_given);\n \n   /* Handle floating point regs, allowing spaces in the (i) part.  */\n-  if (r == i386_regtab /* %st is first entry of table  */)\n+  if (r == reg_st0)\n     {\n       if (!cpu_arch_flags.bitfield.cpu8087\n \t  && !cpu_arch_flags.bitfield.cpu287\n@@ -12736,8 +12753,7 @@ parse_real_register (char *reg_string, char **end_op)\n \t      if (*s == ')')\n \t\t{\n \t\t  *end_op = s + 1;\n-\t\t  r = (const reg_entry *) str_hash_find (reg_hash, \"st(0)\");\n-\t\t  know (r);\n+\t\t  know (r[fpr].reg_num == fpr);\n \t\t  return r + fpr;\n \t\t}\n \t    }"
    },
    {
      "sha": "5acb021fa48f8026ce7ba46a590ac418d3c5daad",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=6288d05f11827f993308e6a2693516e2c123c0fb",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-opc.h (REGNAM_AL, REGNAM_AX, REGNAM_EAX): Adjust values.\n+\t* i386-reg.tbl (st): Move down.\n+\t(st(0)): Delete. Extend comment.\n+\t* i386-tbl.h: Re-generate.\n+\n 2021-03-29  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-opc.tbl (movq, movabs): Move next to mov counterparts."
    },
    {
      "sha": "a2a657eeda0e34498efd264496f65e501fb4661e",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=6288d05f11827f993308e6a2693516e2c123c0fb",
      "patch": "@@ -991,9 +991,9 @@ typedef struct\n reg_entry;\n \n /* Entries in i386_regtab.  */\n-#define REGNAM_AL 1\n-#define REGNAM_AX 25\n-#define REGNAM_EAX 41\n+#define REGNAM_AL 0\n+#define REGNAM_AX 24\n+#define REGNAM_EAX 40\n \n extern const reg_entry i386_regtab[];\n extern const unsigned int i386_regtab_size;"
    },
    {
      "sha": "be2c1ccc9f2992a0ee4210924831ef526eef98af",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=6288d05f11827f993308e6a2693516e2c123c0fb",
      "patch": "@@ -18,8 +18,6 @@\n // Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA\n // 02110-1301, USA.\n \n-// Make %st first as we test for it.\n-st, Class=Reg|Instance=Accum|Tbyte, 0, 0, 11, 33\n // 8 bit regs\n al, Class=Reg|Instance=Accum|Byte, 0, 0, Dw2Inval, Dw2Inval\n cl, Class=Reg|Instance=RegC|Byte, 0, 1, Dw2Inval, Dw2Inval\n@@ -300,8 +298,8 @@ eip, Dword, RegRex64, RegIP, 8, Dw2Inval\n // for addressing.\n riz, Qword|BaseIndex, RegRex64, RegIZ, Dw2Inval, Dw2Inval\n eiz, Dword|BaseIndex, 0, RegIZ, Dw2Inval, Dw2Inval\n-// fp regs.\n-st(0), Class=Reg|Instance=Accum|Tbyte, 0, 0, 11, 33\n+// fp regs. No need for an explicit st(0) here.\n+st, Class=Reg|Instance=Accum|Tbyte, 0, 0, 11, 33\n st(1), Class=Reg|Tbyte, 0, 1, 12, 34\n st(2), Class=Reg|Tbyte, 0, 2, 13, 35\n st(3), Class=Reg|Tbyte, 0, 3, 14, 36"
    },
    {
      "sha": "d2ca247f028ba24b5af79d6e489b091f7f215485",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6288d05f11827f993308e6a2693516e2c123c0fb/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=6288d05f11827f993308e6a2693516e2c123c0fb",
      "patch": "@@ -64204,10 +64204,6 @@ const insn_template i386_optab[] =\n \n const reg_entry i386_regtab[] =\n {\n-  { \"st\",\n-    { { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-\t1, 0, 0, 0, 0, 0, 0 } },\n-    0, 0, { 11, 33 } },\n   { \"al\",\n     { { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n \t0, 0, 0, 0, 0, 0, 0 } },\n@@ -65260,7 +65256,7 @@ const reg_entry i386_regtab[] =\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,\n \t0, 0, 0, 0, 0, 0, 0 } },\n     0, RegIZ, { Dw2Inval, Dw2Inval } },\n-  { \"st(0)\",\n+  { \"st\",\n     { { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t1, 0, 0, 0, 0, 0, 0 } },\n     0, 0, { 11, 33 } },"
    }
  ]
}