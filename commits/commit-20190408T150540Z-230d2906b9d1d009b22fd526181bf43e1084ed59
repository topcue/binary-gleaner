{
  "sha": "230d2906b9d1d009b22fd526181bf43e1084ed59",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjMwZDI5MDZiOWQxZDAwOWIyMmZkNTI2MTgxYmY0M2UxMDg0ZWQ1OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-03T21:59:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-08T15:05:40Z"
    },
    "message": "Rename gdb exception types\n\nThis renames the gdb exception types.  The old types were only needed\ndue to the macros in common-exception.h that are now gone.\n\nThe intermediate layer of gdb_exception_RETURN_MASK_ALL did not seem\nneeded, so this patch removes it entirely.\n\ngdb/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* common/common-exceptions.h (gdb_exception_RETURN_MASK_ALL):\n\tRemove.\n\t(gdb_exception_error): Rename from\n\tgdb_exception_RETURN_MASK_ERROR.\n\t(gdb_exception_quit): Rename from gdb_exception_RETURN_MASK_QUIT.\n\t(gdb_quit_bad_alloc): Update.\n\t* aarch64-tdep.c: Update.\n\t* ada-lang.c: Update.\n\t* ada-typeprint.c: Update.\n\t* ada-valprint.c: Update.\n\t* amd64-tdep.c: Update.\n\t* arch-utils.c: Update.\n\t* break-catch-throw.c: Update.\n\t* breakpoint.c: Update.\n\t* btrace.c: Update.\n\t* c-varobj.c: Update.\n\t* cli/cli-cmds.c: Update.\n\t* cli/cli-interp.c: Update.\n\t* cli/cli-script.c: Update.\n\t* common/common-exceptions.c: Update.\n\t* common/new-op.c: Update.\n\t* common/selftest.c: Update.\n\t* compile/compile-c-symbols.c: Update.\n\t* compile/compile-cplus-symbols.c: Update.\n\t* compile/compile-object-load.c: Update.\n\t* compile/compile-object-run.c: Update.\n\t* completer.c: Update.\n\t* corelow.c: Update.\n\t* cp-abi.c: Update.\n\t* cp-support.c: Update.\n\t* cp-valprint.c: Update.\n\t* darwin-nat.c: Update.\n\t* disasm-selftests.c: Update.\n\t* dtrace-probe.c: Update.\n\t* dwarf-index-cache.c: Update.\n\t* dwarf-index-write.c: Update.\n\t* dwarf2-frame-tailcall.c: Update.\n\t* dwarf2-frame.c: Update.\n\t* dwarf2loc.c: Update.\n\t* dwarf2read.c: Update.\n\t* eval.c: Update.\n\t* event-loop.c: Update.\n\t* event-top.c: Update.\n\t* exec.c: Update.\n\t* f-valprint.c: Update.\n\t* fbsd-tdep.c: Update.\n\t* frame-unwind.c: Update.\n\t* frame.c: Update.\n\t* gdbtypes.c: Update.\n\t* gnu-v3-abi.c: Update.\n\t* guile/guile-internal.h: Update.\n\t* guile/scm-block.c: Update.\n\t* guile/scm-breakpoint.c: Update.\n\t* guile/scm-cmd.c: Update.\n\t* guile/scm-disasm.c: Update.\n\t* guile/scm-frame.c: Update.\n\t* guile/scm-lazy-string.c: Update.\n\t* guile/scm-math.c: Update.\n\t* guile/scm-param.c: Update.\n\t* guile/scm-ports.c: Update.\n\t* guile/scm-pretty-print.c: Update.\n\t* guile/scm-symbol.c: Update.\n\t* guile/scm-symtab.c: Update.\n\t* guile/scm-type.c: Update.\n\t* guile/scm-value.c: Update.\n\t* i386-linux-tdep.c: Update.\n\t* i386-tdep.c: Update.\n\t* inf-loop.c: Update.\n\t* infcall.c: Update.\n\t* infcmd.c: Update.\n\t* infrun.c: Update.\n\t* jit.c: Update.\n\t* language.c: Update.\n\t* linespec.c: Update.\n\t* linux-fork.c: Update.\n\t* linux-nat.c: Update.\n\t* linux-tdep.c: Update.\n\t* linux-thread-db.c: Update.\n\t* main.c: Update.\n\t* mi/mi-cmd-break.c: Update.\n\t* mi/mi-cmd-stack.c: Update.\n\t* mi/mi-interp.c: Update.\n\t* mi/mi-main.c: Update.\n\t* objc-lang.c: Update.\n\t* p-valprint.c: Update.\n\t* parse.c: Update.\n\t* ppc-linux-tdep.c: Update.\n\t* printcmd.c: Update.\n\t* python/py-arch.c: Update.\n\t* python/py-breakpoint.c: Update.\n\t* python/py-cmd.c: Update.\n\t* python/py-finishbreakpoint.c: Update.\n\t* python/py-frame.c: Update.\n\t* python/py-framefilter.c: Update.\n\t* python/py-gdb-readline.c: Update.\n\t* python/py-inferior.c: Update.\n\t* python/py-infthread.c: Update.\n\t* python/py-lazy-string.c: Update.\n\t* python/py-linetable.c: Update.\n\t* python/py-objfile.c: Update.\n\t* python/py-param.c: Update.\n\t* python/py-prettyprint.c: Update.\n\t* python/py-progspace.c: Update.\n\t* python/py-record-btrace.c: Update.\n\t* python/py-record.c: Update.\n\t* python/py-symbol.c: Update.\n\t* python/py-type.c: Update.\n\t* python/py-unwind.c: Update.\n\t* python/py-utils.c: Update.\n\t* python/py-value.c: Update.\n\t* python/python.c: Update.\n\t* record-btrace.c: Update.\n\t* record-full.c: Update.\n\t* remote-fileio.c: Update.\n\t* remote.c: Update.\n\t* riscv-tdep.c: Update.\n\t* rs6000-aix-tdep.c: Update.\n\t* rs6000-tdep.c: Update.\n\t* rust-exp.y: Update.\n\t* rust-lang.c: Update.\n\t* s390-tdep.c: Update.\n\t* selftest-arch.c: Update.\n\t* solib-dsbt.c: Update.\n\t* solib-frv.c: Update.\n\t* solib-spu.c: Update.\n\t* solib-svr4.c: Update.\n\t* solib.c: Update.\n\t* sparc64-linux-tdep.c: Update.\n\t* stack.c: Update.\n\t* symfile-mem.c: Update.\n\t* symmisc.c: Update.\n\t* target.c: Update.\n\t* thread.c: Update.\n\t* top.c: Update.\n\t* tracefile-tfile.c: Update.\n\t* tui/tui.c: Update.\n\t* typeprint.c: Update.\n\t* unittests/cli-utils-selftests.c: Update.\n\t* unittests/parse-connection-spec-selftests.c: Update.\n\t* valops.c: Update.\n\t* valprint.c: Update.\n\t* value.c: Update.\n\t* varobj.c: Update.\n\t* windows-nat.c: Update.\n\t* x86-linux-nat.c: Update.\n\t* xml-support.c: Update.\n\ngdb/gdbserver/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* gdbreplay.c: Update.\n\t* linux-low.c: Update.\n\t* server.c: Update.",
    "tree": {
      "sha": "dab17388e9e9f6e8ff528905ccc9c5bc732469ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dab17388e9e9f6e8ff528905ccc9c5bc732469ff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/230d2906b9d1d009b22fd526181bf43e1084ed59",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/230d2906b9d1d009b22fd526181bf43e1084ed59",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/230d2906b9d1d009b22fd526181bf43e1084ed59",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/230d2906b9d1d009b22fd526181bf43e1084ed59/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a70b814420059e1f2de2130d532ddd7b2b2500fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a70b814420059e1f2de2130d532ddd7b2b2500fc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a70b814420059e1f2de2130d532ddd7b2b2500fc"
    }
  ],
  "stats": {
    "total": 1065,
    "additions": 606,
    "deletions": 459
  },
  "files": [
    {
      "sha": "c8e3912451c91dfbc7751c5a9c12d25e55cb0c4e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 149,
      "deletions": 0,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1,3 +1,152 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/common-exceptions.h (gdb_exception_RETURN_MASK_ALL):\n+\tRemove.\n+\t(gdb_exception_error): Rename from\n+\tgdb_exception_RETURN_MASK_ERROR.\n+\t(gdb_exception_quit): Rename from gdb_exception_RETURN_MASK_QUIT.\n+\t(gdb_quit_bad_alloc): Update.\n+\t* aarch64-tdep.c: Update.\n+\t* ada-lang.c: Update.\n+\t* ada-typeprint.c: Update.\n+\t* ada-valprint.c: Update.\n+\t* amd64-tdep.c: Update.\n+\t* arch-utils.c: Update.\n+\t* break-catch-throw.c: Update.\n+\t* breakpoint.c: Update.\n+\t* btrace.c: Update.\n+\t* c-varobj.c: Update.\n+\t* cli/cli-cmds.c: Update.\n+\t* cli/cli-interp.c: Update.\n+\t* cli/cli-script.c: Update.\n+\t* common/common-exceptions.c: Update.\n+\t* common/new-op.c: Update.\n+\t* common/selftest.c: Update.\n+\t* compile/compile-c-symbols.c: Update.\n+\t* compile/compile-cplus-symbols.c: Update.\n+\t* compile/compile-object-load.c: Update.\n+\t* compile/compile-object-run.c: Update.\n+\t* completer.c: Update.\n+\t* corelow.c: Update.\n+\t* cp-abi.c: Update.\n+\t* cp-support.c: Update.\n+\t* cp-valprint.c: Update.\n+\t* darwin-nat.c: Update.\n+\t* disasm-selftests.c: Update.\n+\t* dtrace-probe.c: Update.\n+\t* dwarf-index-cache.c: Update.\n+\t* dwarf-index-write.c: Update.\n+\t* dwarf2-frame-tailcall.c: Update.\n+\t* dwarf2-frame.c: Update.\n+\t* dwarf2loc.c: Update.\n+\t* dwarf2read.c: Update.\n+\t* eval.c: Update.\n+\t* event-loop.c: Update.\n+\t* event-top.c: Update.\n+\t* exec.c: Update.\n+\t* f-valprint.c: Update.\n+\t* fbsd-tdep.c: Update.\n+\t* frame-unwind.c: Update.\n+\t* frame.c: Update.\n+\t* gdbtypes.c: Update.\n+\t* gnu-v3-abi.c: Update.\n+\t* guile/guile-internal.h: Update.\n+\t* guile/scm-block.c: Update.\n+\t* guile/scm-breakpoint.c: Update.\n+\t* guile/scm-cmd.c: Update.\n+\t* guile/scm-disasm.c: Update.\n+\t* guile/scm-frame.c: Update.\n+\t* guile/scm-lazy-string.c: Update.\n+\t* guile/scm-math.c: Update.\n+\t* guile/scm-param.c: Update.\n+\t* guile/scm-ports.c: Update.\n+\t* guile/scm-pretty-print.c: Update.\n+\t* guile/scm-symbol.c: Update.\n+\t* guile/scm-symtab.c: Update.\n+\t* guile/scm-type.c: Update.\n+\t* guile/scm-value.c: Update.\n+\t* i386-linux-tdep.c: Update.\n+\t* i386-tdep.c: Update.\n+\t* inf-loop.c: Update.\n+\t* infcall.c: Update.\n+\t* infcmd.c: Update.\n+\t* infrun.c: Update.\n+\t* jit.c: Update.\n+\t* language.c: Update.\n+\t* linespec.c: Update.\n+\t* linux-fork.c: Update.\n+\t* linux-nat.c: Update.\n+\t* linux-tdep.c: Update.\n+\t* linux-thread-db.c: Update.\n+\t* main.c: Update.\n+\t* mi/mi-cmd-break.c: Update.\n+\t* mi/mi-cmd-stack.c: Update.\n+\t* mi/mi-interp.c: Update.\n+\t* mi/mi-main.c: Update.\n+\t* objc-lang.c: Update.\n+\t* p-valprint.c: Update.\n+\t* parse.c: Update.\n+\t* ppc-linux-tdep.c: Update.\n+\t* printcmd.c: Update.\n+\t* python/py-arch.c: Update.\n+\t* python/py-breakpoint.c: Update.\n+\t* python/py-cmd.c: Update.\n+\t* python/py-finishbreakpoint.c: Update.\n+\t* python/py-frame.c: Update.\n+\t* python/py-framefilter.c: Update.\n+\t* python/py-gdb-readline.c: Update.\n+\t* python/py-inferior.c: Update.\n+\t* python/py-infthread.c: Update.\n+\t* python/py-lazy-string.c: Update.\n+\t* python/py-linetable.c: Update.\n+\t* python/py-objfile.c: Update.\n+\t* python/py-param.c: Update.\n+\t* python/py-prettyprint.c: Update.\n+\t* python/py-progspace.c: Update.\n+\t* python/py-record-btrace.c: Update.\n+\t* python/py-record.c: Update.\n+\t* python/py-symbol.c: Update.\n+\t* python/py-type.c: Update.\n+\t* python/py-unwind.c: Update.\n+\t* python/py-utils.c: Update.\n+\t* python/py-value.c: Update.\n+\t* python/python.c: Update.\n+\t* record-btrace.c: Update.\n+\t* record-full.c: Update.\n+\t* remote-fileio.c: Update.\n+\t* remote.c: Update.\n+\t* riscv-tdep.c: Update.\n+\t* rs6000-aix-tdep.c: Update.\n+\t* rs6000-tdep.c: Update.\n+\t* rust-exp.y: Update.\n+\t* rust-lang.c: Update.\n+\t* s390-tdep.c: Update.\n+\t* selftest-arch.c: Update.\n+\t* solib-dsbt.c: Update.\n+\t* solib-frv.c: Update.\n+\t* solib-spu.c: Update.\n+\t* solib-svr4.c: Update.\n+\t* solib.c: Update.\n+\t* sparc64-linux-tdep.c: Update.\n+\t* stack.c: Update.\n+\t* symfile-mem.c: Update.\n+\t* symmisc.c: Update.\n+\t* target.c: Update.\n+\t* thread.c: Update.\n+\t* top.c: Update.\n+\t* tracefile-tfile.c: Update.\n+\t* tui/tui.c: Update.\n+\t* typeprint.c: Update.\n+\t* unittests/cli-utils-selftests.c: Update.\n+\t* unittests/parse-connection-spec-selftests.c: Update.\n+\t* valops.c: Update.\n+\t* valprint.c: Update.\n+\t* value.c: Update.\n+\t* varobj.c: Update.\n+\t* windows-nat.c: Update.\n+\t* x86-linux-nat.c: Update.\n+\t* xml-support.c: Update.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* xml-support.c: Use C++ exception handling."
    },
    {
      "sha": "ebd84e9dc2beaa78963ee08b868d509b066493df",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -878,7 +878,7 @@ aarch64_make_prologue_cache (struct frame_info *this_frame, void **this_cache)\n     {\n       aarch64_make_prologue_cache_1 (this_frame, cache);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -1012,7 +1012,7 @@ aarch64_make_stub_cache (struct frame_info *this_frame, void **this_cache)\n       cache->prev_pc = get_frame_pc (this_frame);\n       cache->available_p = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);"
    },
    {
      "sha": "c141adbef3e636a7a106a87c89ebd66e42ee5553",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -6728,7 +6728,7 @@ ada_tag_value_at_base_address (struct value *obj)\n       offset_to_top = value_as_long (value_ind (value_ptradd (val, -2)));\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       return obj;\n     }\n@@ -6875,7 +6875,7 @@ ada_tag_name (struct value *tag)\n       if (tsd != NULL)\n \tname = ada_tag_name_from_tsd (tsd);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n     }\n \n@@ -9056,7 +9056,7 @@ ada_to_fixed_type_1 (struct type *type, const gdb_byte *valaddr,\n \t      {\n \t\txvz_found = get_int_var_value (xvz_name, size);\n \t      }\n-\t    catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t    catch (const gdb_exception_error &except)\n \t      {\n \t\t/* We found the variable, but somehow failed to read\n \t\t   its value.  Rethrow the same error, but with a little\n@@ -12347,7 +12347,7 @@ ada_exception_message (void)\n     {\n       e_msg = ada_exception_message_1 ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       e_msg.reset (nullptr);\n     }\n@@ -12371,7 +12371,7 @@ ada_exception_name_addr (enum ada_exception_catchpoint_kind ex,\n       result = ada_exception_name_addr_1 (ex, b);\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       warning (_(\"failed to get exception name: %s\"), e.what ());\n       return 0;\n@@ -12462,7 +12462,7 @@ create_excep_cond_exprs (struct ada_catchpoint *c,\n \t\t\t\t block_for_pc (bl->address),\n \t\t\t\t 0);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\t  catch (const gdb_exception_error &e)\n \t    {\n \t      warning (_(\"failed to reevaluate internal exception condition \"\n \t\t\t \"for catchpoint %d: %s\"),\n@@ -12533,7 +12533,7 @@ should_stop_exception (const struct bp_location *bl)\n       stop = value_true (evaluate_expression (ada_loc->excep_cond_expr.get ()));\n       value_free_to_mark (mark);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_fprintf (gdb_stderr, ex,\n \t\t\t _(\"Error in testing exception condition:\\n\"));"
    },
    {
      "sha": "89a69e9bd4435b7be86eea82f8713f95655154f4",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -168,7 +168,7 @@ print_range (struct type *type, struct ui_file *stream,\n \t    lo = ada_discrete_type_low_bound (type);\n \t    hi = ada_discrete_type_high_bound (type);\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\tcatch (const gdb_exception_error &e)\n \t  {\n \t    /* This can happen when the range is dynamic.  Sometimes,\n \t       resolving dynamic property values requires us to have"
    },
    {
      "sha": "5d7823d7204186afd43f87b9ec58fa381184d724",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1209,7 +1209,7 @@ ada_val_print (struct type *type,\n \t\t       stream, recurse, val, options,\n \t\t       current_language);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       fprintf_filtered (stream, _(\"<error reading variable: %s>\"),\n \t\t\texcept.what ());"
    },
    {
      "sha": "5b8a94002d576d2351de9ab91105f4648cabc62f",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2585,7 +2585,7 @@ amd64_frame_cache (struct frame_info *this_frame, void **this_cache)\n     {\n       amd64_frame_cache_1 (this_frame, cache);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -2712,7 +2712,7 @@ amd64_sigtramp_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n       cache->base_p = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -2892,7 +2892,7 @@ amd64_epilogue_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n       cache->base_p = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);"
    },
    {
      "sha": "43f5834b3833c5f59011206ccdb07ca3c411efd4",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -973,7 +973,7 @@ gdbarch_skip_prologue_noexcept (gdbarch *gdbarch, CORE_ADDR pc) noexcept\n     {\n       new_pc = gdbarch_skip_prologue (gdbarch, pc);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {}\n \n   return new_pc;"
    },
    {
      "sha": "3b9cdd6c257fd7bf8c3e1d486df48d914545408b",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -166,7 +166,7 @@ check_status_exception_catchpoint (struct bpstats *bs)\n       if (!canon.empty ())\n \tstd::swap (type_name, canon);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       exception_print (gdb_stderr, e);\n     }\n@@ -194,7 +194,7 @@ re_set_exception_catchpoint (struct breakpoint *self)\n \t= new_probe_location (exception_functions[kind].probe);\n       sals = parse_probes (location.get (), filter_pspace, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       /* Using the probe interface failed.  Let's fallback to the normal\n \t catchpoint mode.  */\n@@ -209,7 +209,7 @@ re_set_exception_catchpoint (struct breakpoint *self)\n \t  sals = self->ops->decode_location (self, location.get (),\n \t\t\t\t\t     filter_pspace);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  /* NOT_FOUND_ERROR just means the breakpoint will be\n \t     pending, so let it through.  */"
    },
    {
      "sha": "5bfa5b2b7b340054f480335b04a691550b12ec8e",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2102,7 +2102,7 @@ parse_cond_to_aexpr (CORE_ADDR scope, struct expression *cond)\n       aexpr = gen_eval_for_expr (scope, cond);\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       /* If we got here, it means the condition could not be parsed to a valid\n \t bytecode expression and thus can't be evaluated on the target's side.\n@@ -2277,7 +2277,7 @@ parse_cmd_to_aexpr (CORE_ADDR scope, char *cmd)\n \t\t\t  format_start, format_end - format_start,\n \t\t\t  argvec.size (), argvec.data ());\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       /* If we got here, it means the command could not be parsed to a valid\n \t bytecode expression and thus can't be evaluated on the target's side.\n@@ -2545,7 +2545,7 @@ insert_bp_location (struct bp_location *bl,\n \t      if (val)\n \t\tbp_excpt = gdb_exception {RETURN_ERROR, GENERIC_ERROR};\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+\t  catch (const gdb_exception &e)\n \t    {\n \t      bp_excpt = e;\n \t    }\n@@ -2584,7 +2584,7 @@ insert_bp_location (struct bp_location *bl,\n \t\t\tbp_excpt\n \t\t\t  = gdb_exception {RETURN_ERROR, GENERIC_ERROR};\n \t\t    }\n-\t\t  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+\t\t  catch (const gdb_exception &e)\n \t\t    {\n \t\t      bp_excpt = e;\n \t\t    }\n@@ -2608,7 +2608,7 @@ insert_bp_location (struct bp_location *bl,\n \t\t  if (val)\n \t\t    bp_excpt = gdb_exception {RETURN_ERROR, GENERIC_ERROR};\n \t        }\n-\t      catch (const gdb_exception_RETURN_MASK_ALL &e)\n+\t      catch (const gdb_exception &e)\n \t        {\n \t\t  bp_excpt = e;\n \t        }\n@@ -5016,7 +5016,7 @@ bpstat_check_watchpoint (bpstat bs)\n \t    {\n \t      e = watchpoint_check (bs);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\t  catch (const gdb_exception &ex)\n \t    {\n \t      exception_fprintf (gdb_stderr, ex,\n \t\t\t\t \"Error evaluating expression \"\n@@ -5253,7 +5253,7 @@ bpstat_check_breakpoint_conditions (bpstat bs, thread_info *thread)\n \t    {\n \t      condition_result = breakpoint_cond_eval (cond);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\t  catch (const gdb_exception &ex)\n \t    {\n \t      exception_fprintf (gdb_stderr, ex,\n \t\t\t\t \"Error in testing breakpoint condition:\\n\");\n@@ -9243,7 +9243,7 @@ create_breakpoint (struct gdbarch *gdbarch,\n     {\n       ops->create_sals_from_location (location, &canonical, type_wanted);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       /* If caller is interested in rc value from parse, set\n \t value.  */\n@@ -12056,7 +12056,7 @@ update_global_location_list_nothrow (enum ugll_insert_mode insert_mode)\n     {\n       update_global_location_list (insert_mode);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n     }\n }\n@@ -13526,7 +13526,7 @@ update_breakpoint_locations (struct breakpoint *b,\n \t\t\t\t\t   block_for_pc (sal.pc),\n \t\t\t\t\t   0);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\t  catch (const gdb_exception_error &e)\n \t    {\n \t      warning (_(\"failed to reevaluate condition \"\n \t\t\t \"for breakpoint %d: %s\"), \n@@ -13603,7 +13603,7 @@ location_to_sals (struct breakpoint *b, struct event_location *location,\n     {\n       sals = b->ops->decode_location (b, location, search_pspace);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       int not_found_and_ok = 0;\n \n@@ -13813,7 +13813,7 @@ breakpoint_re_set (void)\n \t  {\n \t    breakpoint_re_set_one (b);\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\tcatch (const gdb_exception &ex)\n \t  {\n \t    exception_fprintf (gdb_stderr, ex,\n \t\t\t       \"Error in re-setting breakpoint %d: \",\n@@ -14293,7 +14293,7 @@ enable_breakpoint_disp (struct breakpoint *bpt, enum bpdisp disposition,\n \t  bpt->enable_state = bp_enabled;\n \t  update_watchpoint (w, 1 /* reparse */);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &e)\n+      catch (const gdb_exception &e)\n \t{\n \t  bpt->enable_state = orig_enable_state;\n \t  exception_fprintf (gdb_stderr, e, _(\"Cannot enable watchpoint %d: \"),\n@@ -15031,7 +15031,7 @@ save_breakpoints (const char *filename, int from_tty,\n \t  {\n \t    print_command_lines (current_uiout, tp->commands.get (), 2);\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\tcatch (const gdb_exception &ex)\n \t  {\n \t  current_uiout->redirect (NULL);\n \t    throw_exception (ex);"
    },
    {
      "sha": "4b2f0797206828c0e7b451c7792bf3e20a13354c",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -687,7 +687,7 @@ ftrace_classify_insn (struct gdbarch *gdbarch, CORE_ADDR pc)\n       else if (gdbarch_insn_is_jump (gdbarch, pc))\n \ticlass = BTRACE_INSN_JUMP;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &error)\n+  catch (const gdb_exception_error &error)\n     {\n     }\n \n@@ -1106,7 +1106,7 @@ btrace_compute_ftrace_bts (struct thread_info *tp,\n \t    {\n \t      size = gdb_insn_length (gdbarch, pc);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &error)\n+\t  catch (const gdb_exception_error &error)\n \t    {\n \t    }\n \n@@ -1374,7 +1374,7 @@ btrace_pt_readmem_callback (gdb_byte *buffer, size_t size,\n       if (errcode != 0)\n \tresult = -pte_nomap;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &error)\n+  catch (const gdb_exception_error &error)\n     {\n       result = -pte_nomap;\n     }\n@@ -1476,7 +1476,7 @@ btrace_compute_ftrace_pt (struct thread_info *tp,\n \n       ftrace_add_pt (btinfo, decoder, &level, gaps);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &error)\n+  catch (const gdb_exception &error)\n     {\n       /* Indicate a gap in the trace if we quit trace processing.  */\n       if (error.reason == RETURN_QUIT && !btinfo->functions.empty ())\n@@ -1556,7 +1556,7 @@ btrace_compute_ftrace (struct thread_info *tp, struct btrace_data *btrace,\n     {\n       btrace_compute_ftrace_1 (tp, btrace, cpu, gaps);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &error)\n+  catch (const gdb_exception &error)\n     {\n       btrace_finalize_ftrace (tp, gaps);\n \n@@ -1627,7 +1627,7 @@ btrace_enable (struct thread_info *tp, const struct btrace_config *conf)\n \t  && can_access_registers_thread (tp))\n \tbtrace_add_pc (tp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       btrace_disable (tp);\n \n@@ -3060,7 +3060,7 @@ btrace_maint_update_pt_packets (struct btrace_thread_info *btinfo)\n     {\n       btrace_maint_decode_pt (&btinfo->maint, decoder);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       pt_pkt_free_decoder (decoder);\n "
    },
    {
      "sha": "21db8cdde980d5d529c1d19312d8a28a00977e64",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -97,7 +97,7 @@ adjust_value_for_child_access (struct value **value,\n \t\t  *value = value_ind (*value);\n \t\t}\n \n-\t      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t      catch (const gdb_exception_error &except)\n \t\t{\n \t\t  *value = NULL;\n \t\t}\n@@ -259,7 +259,7 @@ value_struct_element_index (struct value *value, int type_index)\n       else\n \tresult = value_primitive_field (value, 0, type_index, type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       return NULL;\n     }\n@@ -318,7 +318,7 @@ c_describe_child (const struct varobj *parent, int index,\n \t    {\n \t      *cvalue = value_subscript (value, real_index);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t    }\n \t}\n@@ -395,7 +395,7 @@ c_describe_child (const struct varobj *parent, int index,\n \t      *cvalue = value_ind (value);\n \t    }\n \n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      *cvalue = NULL;\n \t    }"
    },
    {
      "sha": "8480ba355ceb4121828a4efc4e4c7ae2e34d1e39",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -267,7 +267,7 @@ complete_command (const char *arg, int from_tty)\n \t  tracker = &tracker_handle_completions;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       return;\n     }"
    },
    {
      "sha": "c150f40feed212f2951f8a5aadc5df8009f4b5a3",
      "filename": "gdb/cli/cli-interp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cli/cli-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cli/cli-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-interp.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -367,7 +367,7 @@ safe_execute_command (struct ui_out *command_uiout, const char *command,\n     {\n       execute_command (command, from_tty);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       e = exception;\n     }"
    },
    {
      "sha": "d124d3a6c2840c286df5e890a0a4c6c82ed29d43",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1054,7 +1054,7 @@ process_next_line (const char *p, struct command_line **command,\n \t{\n \t  validator ((*command)->line);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  free_command_lines (command);\n \t  throw_exception (ex);\n@@ -1543,7 +1543,7 @@ script_from_file (FILE *stream, const char *file)\n     {\n       read_command_file (stream);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       /* Re-throw the error, but with the file name information\n \t prepended.  */"
    },
    {
      "sha": "d00a805dd1f30b439ac3b5e1e9c8f0375986b975",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -195,12 +195,12 @@ throw_exception_cxx (struct gdb_exception exception)\n {\n   if (exception.reason == RETURN_QUIT)\n     {\n-      gdb_exception_RETURN_MASK_QUIT ex (exception);\n+      gdb_exception_quit ex (exception);\n       throw ex;\n     }\n   else if (exception.reason == RETURN_ERROR)\n     {\n-      gdb_exception_RETURN_MASK_ERROR ex (exception);\n+      gdb_exception_error ex (exception);\n       throw ex;\n     }\n   else"
    },
    {
      "sha": "55ce02dd61bc6c0a2f3e607e1bc5b7daedb60b48",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -253,26 +253,18 @@ extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n    around gdb_exception that add nothing but type info.  Which is used\n    is selected depending on the MASK argument passed to CATCH.  */\n \n-struct gdb_exception_RETURN_MASK_ALL : public gdb_exception\n+struct gdb_exception_error : public gdb_exception\n {\n-  explicit gdb_exception_RETURN_MASK_ALL (const gdb_exception &ex) noexcept\n+  explicit gdb_exception_error (const gdb_exception &ex) noexcept\n     : gdb_exception (ex)\n   {\n   }\n };\n \n-struct gdb_exception_RETURN_MASK_ERROR : public gdb_exception_RETURN_MASK_ALL\n+struct gdb_exception_quit : public gdb_exception\n {\n-  explicit gdb_exception_RETURN_MASK_ERROR (const gdb_exception &ex) noexcept\n-    : gdb_exception_RETURN_MASK_ALL (ex)\n-  {\n-  }\n-};\n-\n-struct gdb_exception_RETURN_MASK_QUIT : public gdb_exception_RETURN_MASK_ALL\n-{\n-  explicit gdb_exception_RETURN_MASK_QUIT (const gdb_exception &ex) noexcept\n-    : gdb_exception_RETURN_MASK_ALL (ex)\n+  explicit gdb_exception_quit (const gdb_exception &ex) noexcept\n+    : gdb_exception (ex)\n   {\n   }\n };\n@@ -284,11 +276,11 @@ struct gdb_exception_RETURN_MASK_QUIT : public gdb_exception_RETURN_MASK_ALL\n    spread around the codebase.  */\n \n struct gdb_quit_bad_alloc\n-  : public gdb_exception_RETURN_MASK_QUIT,\n+  : public gdb_exception_quit,\n     public std::bad_alloc\n {\n   explicit gdb_quit_bad_alloc (const gdb_exception &ex) noexcept\n-    : gdb_exception_RETURN_MASK_QUIT (ex),\n+    : gdb_exception_quit (ex),\n       std::bad_alloc ()\n   {\n   }"
    },
    {
      "sha": "b230f111ae71924f9b2324ca3c36155d810c5f4c",
      "filename": "gdb/common/new-op.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/new-op.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/new-op.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/new-op.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -64,7 +64,7 @@ operator new (std::size_t sz)\n \t{\n \t  malloc_failure (sz);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  throw gdb_quit_bad_alloc (ex);\n \t}"
    },
    {
      "sha": "f5a7b3c344b5cba6ad9416386db0ea0ba517dd54",
      "filename": "gdb/common/selftest.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/selftest.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/common/selftest.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/selftest.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -87,7 +87,7 @@ run_tests (const char *filter)\n \t  ++ran;\n \t  (*test) ();\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  ++failed;\n \t  debug_printf (\"Self test failed: %s\\n\", ex.what ());"
    },
    {
      "sha": "9545caac1e3a57f2eeaa8e3d763532896a5e0ad2",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -367,7 +367,7 @@ gcc_convert_symbol (void *datum,\n \t}\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+  catch (const gdb_exception &e)\n     {\n       context->plugin ().error (e.what ());\n     }\n@@ -429,7 +429,7 @@ gcc_symbol_address (void *datum, struct gcc_c_context *gcc_context,\n \t}\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       context->plugin ().error (e.what ());\n     }\n@@ -598,7 +598,7 @@ generate_c_for_for_one_variable (compile_instance *compiler,\n \t}\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       compiler->insert_symbol_error (sym, e.what ());\n     }"
    },
    {
      "sha": "98133afd7cda12854b4aac0f4986c84028d99242",
      "filename": "gdb/compile/compile-cplus-symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-cplus-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-cplus-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-symbols.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -388,7 +388,7 @@ gcc_cplus_convert_symbol (void *datum,\n \t    }\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+  catch (const gdb_exception &e)\n     {\n       /* We can't allow exceptions to escape out of this callback.  Safest\n \t is to simply emit a gcc error.  */\n@@ -466,7 +466,7 @@ gcc_cplus_symbol_address (void *datum, struct gcc_cp_context *gcc_context,\n \t}\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       instance->plugin ().error (e.what ());\n     }"
    },
    {
      "sha": "4e702051950c6e431a84eb46f2f2ad213070160a",
      "filename": "gdb/compile/compile-object-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-object-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-object-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -54,7 +54,7 @@ munmap_list::~munmap_list ()\n \t{\n \t  gdbarch_infcall_munmap (target_gdbarch (), item.addr, item.size);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  /* There's not much the user can do, so just ignore\n \t     this.  */"
    },
    {
      "sha": "5bad049fc51c00734e0199aa541bd981462404dc",
      "filename": "gdb/compile/compile-object-run.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-object-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/compile/compile-object-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-run.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -173,7 +173,7 @@ compile_object_run (struct compile_module *module)\n       call_function_by_hand_dummy (func_val, NULL, args,\n \t\t\t\t   do_module_cleanup, data);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       /* In the case of DTOR_FOUND or in the case of EXECUTED nothing\n \t needs to be done.  */"
    },
    {
      "sha": "d4099c7c52d24382694a6e22e182fe09adb92c8c",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1025,7 +1025,7 @@ complete_expression (completion_tracker &tracker,\n     {\n       type = parse_expression_for_completion (text, &fieldname, &code);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       return;\n     }\n@@ -1448,7 +1448,7 @@ complete_line_internal (completion_tracker &tracker,\n     {\n       complete_line_internal_1 (tracker, text, line_buffer, point, reason);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (except.error != MAX_COMPLETIONS_REACHED_ERROR)\n \tthrow_exception (except);\n@@ -1861,7 +1861,7 @@ gdb_completion_word_break_characters ()\n     {\n       return gdb_completion_word_break_characters_throw ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       /* Set this to that gdb_rl_attempted_completion_function knows\n \t to abort early.  */\n@@ -2208,7 +2208,7 @@ gdb_rl_attempted_completion_function (const char *text, int start, int end)\n     {\n       return gdb_rl_attempted_completion_function_throw (text, start, end);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n     }\n "
    },
    {
      "sha": "22fe7de020c525d467bcde4160df21674d4e4e37",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -466,7 +466,7 @@ core_target_open (const char *arg, int from_tty)\n       target_update_thread_list ();\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       exception_print (gdb_stderr, except);\n     }\n@@ -520,7 +520,7 @@ core_target_open (const char *arg, int from_tty)\n \t{\n \t  thread_command (NULL, from_tty);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  exception_print (gdb_stderr, except);\n \t}"
    },
    {
      "sha": "8e54538752ee60ace7484e4bc1f3e91a068215de",
      "filename": "gdb/cp-abi.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cp-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cp-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-abi.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -79,7 +79,7 @@ baseclass_offset (struct type *type, int index, const gdb_byte *valaddr,\n \t\t\t\t\t\tembedded_offset,\n \t\t\t\t\t\taddress, val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -115,7 +115,7 @@ value_rtti_type (struct value *v, int *full,\n     {\n       ret = (*current_cp_abi.rtti_type) (v, full, top, using_enc);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       return NULL;\n     }"
    },
    {
      "sha": "d02a01df930954fc27a2847cf99ffd99f991b6c4",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -155,7 +155,7 @@ inspect_type (struct demangle_parse_info *info,\n     {\n       sym = lookup_symbol (name, 0, VAR_DOMAIN, 0).symbol;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       return 0;\n     }\n@@ -228,7 +228,7 @@ inspect_type (struct demangle_parse_info *info,\n \t    }\n \t  /* If type_print threw an exception, there is little point\n \t     in continuing, so just bow out gracefully.  */\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      return 0;\n \t    }\n@@ -427,7 +427,7 @@ replace_typedefs (struct demangle_parse_info *info,\n \t\t  sym = lookup_symbol (local_name.get (), 0,\n \t\t\t\t       VAR_DOMAIN, 0).symbol;\n \t\t}\n-\t      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+\t      catch (const gdb_exception &except)\n \t\t{\n \t\t}\n "
    },
    {
      "sha": "e883179dfade791664a7dc8ccc38d768051a900f",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -325,7 +325,7 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t      v = value_static_field (type, i);\n \t\t    }\n \n-\t\t  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+\t\t  catch (const gdb_exception_error &ex)\n \t\t    {\n \t\t      fprintf_filtered (stream,\n \t\t\t\t\t_(\"<error reading variable: %s>\"),\n@@ -512,7 +512,7 @@ cp_print_value (struct type *type, struct type *real_type,\n \t{\n \t  boffset = baseclass_offset (type, i, valaddr, offset, address, val);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  if (ex.error == NOT_AVAILABLE_ERROR)\n \t    skip = -1;"
    },
    {
      "sha": "02604338b5620e50b5b06a4ddf2e7daf4d008ea5",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1688,7 +1688,7 @@ darwin_attach_pid (struct inferior *inf)\n \n       darwin_setup_exceptions (inf);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exit_inferior (inf);\n       inferior_ptid = null_ptid;\n@@ -1952,7 +1952,7 @@ The error was: %s\"),\n \t{\n \t  copy_shell_to_cache (shell, new_name);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  warning (_(\"This version of macOS has System Integrity Protection.\\n\\\n Because `startup-with-shell' is enabled, gdb tried to work around SIP by\\n\\"
    },
    {
      "sha": "e0d84d981eebc603ace6a954a5173b84220d8ab3",
      "filename": "gdb/disasm-selftests.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/disasm-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/disasm-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm-selftests.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -196,7 +196,7 @@ memory_error_test (struct gdbarch *gdbarch)\n     {\n       di.print_insn (0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == MEMORY_ERROR)\n \tsaw_memory_error = true;"
    },
    {
      "sha": "a51f35800ab7ab388b90eb0375b97f8f5efcef9e",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -489,7 +489,7 @@ dtrace_process_dof_probe (struct objfile *objfile,\n \t      expr = parse_expression_with_language (type_str.c_str (),\n \t\t\t\t\t\t     language_c);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+\t  catch (const gdb_exception_error &ex)\n \t    {\n \t    }\n "
    },
    {
      "sha": "9513891a45fc9a265fba36747589d0a77ef92c13",
      "filename": "gdb/dwarf-index-cache.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf-index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf-index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-cache.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -129,7 +129,7 @@ index_cache::store (struct dwarf2_per_objfile *dwarf2_per_objfile)\n       write_psymtabs_to_index (dwarf2_per_objfile, m_dir.c_str (),\n \t\t\t       build_id_str.c_str (), dw_index_kind::GDB_INDEX);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (debug_index_cache)\n \tprintf_unfiltered (\"index cache: couldn't store index cache for objfile \"\n@@ -188,7 +188,7 @@ index_cache::lookup_gdb_index (const bfd_build_id *build_id,\n \t  ((const gdb_byte *) mmap_resource->mapping.get (),\n \t   mmap_resource->mapping.size ());\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (debug_index_cache)\n \tprintf_unfiltered (\"index cache: couldn't read %s: %s\\n\","
    },
    {
      "sha": "3f96ffdafb628bd297052daea3282afe37ce5a00",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1681,7 +1681,7 @@ save_gdb_index_command (const char *arg, int from_tty)\n \t      write_psymtabs_to_index (dwarf2_per_objfile, arg, basename,\n \t\t\t\t       index_kind);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      exception_fprintf (gdb_stderr, except,\n \t\t\t\t _(\"Error while writing index for `%s': \"),"
    },
    {
      "sha": "07db655ec564bbbd6594852ae89ff9e9985215c1",
      "filename": "gdb/dwarf2-frame-tailcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2-frame-tailcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2-frame-tailcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame-tailcall.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -399,7 +399,7 @@ dwarf2_tailcall_sniffer_first (struct frame_info *this_frame,\n \t    }\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (entry_values_debug)\n \texception_print (gdb_stdout, except);"
    },
    {
      "sha": "a24235ab84fa2c7d284207ae217fc6a328a13242",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1068,7 +1068,7 @@ dwarf2_frame_cache (struct frame_info *this_frame, void **this_cache)\n \t  internal_error (__FILE__, __LINE__, _(\"Unknown CFA rule.\"));\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == NOT_AVAILABLE_ERROR)\n \t{\n@@ -2253,7 +2253,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t\t\t\t\t\tEH_CIE_OR_FDE_TYPE_ID);\n \t    }\n \n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\t  catch (const gdb_exception_error &e)\n \t    {\n \t      warning (_(\"skipping .eh_frame info of %s: %s\"),\n \t\t       objfile_name (objfile), e.what ());\n@@ -2293,7 +2293,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t\t\t\t\t    &cie_table, &fde_table,\n \t\t\t\t\t    EH_CIE_OR_FDE_TYPE_ID);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+      catch (const gdb_exception_error &e)\n \t{\n \t  warning (_(\"skipping .debug_frame info of %s: %s\"),\n \t\t   objfile_name (objfile), e.what ());"
    },
    {
      "sha": "12951f546f88de331501207a1d4ac44cafad7a36",
      "filename": "gdb/dwarf2loc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2loc.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1199,7 +1199,7 @@ call_site_find_chain (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n     {\n       retval = call_site_find_chain_1 (gdbarch, caller_pc, callee_pc);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       if (e.error == NO_ENTRY_VALUE_ERROR)\n \t{\n@@ -2167,7 +2167,7 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n     {\n       ctx.eval (data, size);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == NOT_AVAILABLE_ERROR)\n \t{\n@@ -2384,7 +2384,7 @@ dwarf2_locexpr_baton_eval (const struct dwarf2_locexpr_baton *dlbaton,\n     {\n       ctx.eval (dlbaton->data, dlbaton->size);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == NOT_AVAILABLE_ERROR)\n \t{"
    },
    {
      "sha": "b718192cb12ea451f6892d7840f66722ccdb0a95",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -6344,7 +6344,7 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n       /* (maybe) store an index in the cache.  */\n       global_index_cache.store (dwarf2_per_objfile);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       exception_print (gdb_stderr, except);\n     }"
    },
    {
      "sha": "fa03369b394f61949d99501b453900b474b7ccef",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -205,7 +205,7 @@ fetch_subexp_value (struct expression *exp, int *pc, struct value **valp,\n     {\n       result = evaluate_subexp (NULL_TYPE, exp, pc, EVAL_NORMAL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       /* Ignore memory errors if we want watchpoints pointing at\n \t inaccessible memory to still be created; otherwise, throw the\n@@ -242,7 +242,7 @@ fetch_subexp_value (struct expression *exp, int *pc, struct value **valp,\n \t      value_fetch_lazy (result);\n \t      *valp = result;\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t    }\n \t}\n@@ -719,7 +719,7 @@ evaluate_var_value (enum noside noside, const block *blk, symbol *var)\n       ret = value_of_variable (var, blk);\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (noside != EVAL_AVOID_SIDE_EFFECTS)\n \tthrow_exception (except);\n@@ -959,7 +959,7 @@ evaluate_funcall (type *expect_type, expression *exp, int *pos,\n \t\t  value = value_x_unop (arg2, op, noside);\n \t\t}\n \n-\t      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t      catch (const gdb_exception_error &except)\n \t\t{\n \t\t  if (except.error == NOT_FOUND_ERROR)\n \t\t    break;\n@@ -2048,7 +2048,7 @@ evaluate_subexp_standard (struct type *expect_type,\n \t      value = value_x_unop (arg1, op, noside);\n \t    }\n \n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      if (except.error == NOT_FOUND_ERROR)\n \t\tbreak;"
    },
    {
      "sha": "ec776f59e8cd054c1962b4384c3c3a66dc995e05",
      "filename": "gdb/event-loop.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/event-loop.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/event-loop.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-loop.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -370,7 +370,7 @@ start_event_loop (void)\n \t{\n \t  result = gdb_do_one_event ();\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  exception_print (gdb_stderr, ex);\n "
    },
    {
      "sha": "cd54eb5a2c5cf960dbf7e9f0c32f2710c021d083",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -212,7 +212,7 @@ gdb_rl_callback_handler (char *rl) noexcept\n     {\n       ui->input_handler (gdb::unique_xmalloc_ptr<char> (rl));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       gdb_rl_expt = ex;\n     }\n@@ -1086,7 +1086,7 @@ async_disconnect (gdb_client_data arg)\n       quit_cover ();\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       fputs_filtered (\"Could not kill the program being debugged\",\n \t\t      gdb_stderr);\n@@ -1097,7 +1097,7 @@ async_disconnect (gdb_client_data arg)\n     {\n       pop_all_targets ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n     }\n "
    },
    {
      "sha": "b0eb9ff02a3294515a10ad595a0d0494b7196c70",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -167,7 +167,7 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n \t exec_file_attach will clear state.  */\n       exec_file_attach (exec_file_host, add_flags & SYMFILE_VERBOSE);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &err)\n+  catch (const gdb_exception_error &err)\n     {\n       if (err.message != NULL)\n \twarning (\"%s\", err.what ());\n@@ -181,7 +181,7 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n \t{\n \t  symbol_file_add_main (exec_file_host, add_flags);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &err)\n+      catch (const gdb_exception_error &err)\n \t{\n \t  if (!exception_print_same (prev_err, err))\n \t    warning (\"%s\", err.what ());"
    },
    {
      "sha": "37b0ed5176de88f3d9817705d8051acc2795035b",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -413,7 +413,7 @@ info_common_command_for_block (const struct block *block, const char *comname,\n \t\tvalue_print (val, gdb_stdout, &opts);\n \t      }\n \n-\t    catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t    catch (const gdb_exception_error &except)\n \t      {\n \t\tprintf_filtered (\"<error reading variable: %s>\",\n \t\t\t\t except.what ());"
    },
    {
      "sha": "4efa0f7ae113fa4b886e2395ee810d8eaf513470",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -750,7 +750,7 @@ fbsd_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd, int *note_size)\n     {\n       update_thread_list ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       exception_print (gdb_stderr, e);\n     }\n@@ -1999,7 +1999,7 @@ fbsd_fetch_rtld_offsets (struct gdbarch *gdbarch, struct fbsd_pspace_data *data)\n       data->rtld_offsets_valid = true;\n       return;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       data->off_linkmap = -1;\n     }\n@@ -2016,7 +2016,7 @@ fbsd_fetch_rtld_offsets (struct gdbarch *gdbarch, struct fbsd_pspace_data *data)\n       data->rtld_offsets_valid = true;\n       return;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       data->off_linkmap = -1;\n     }"
    },
    {
      "sha": "8510086001ab474e8875d848d93fe819653ec97a",
      "filename": "gdb/frame-unwind.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/frame-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/frame-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame-unwind.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -105,7 +105,7 @@ frame_unwind_try_unwinder (struct frame_info *this_frame, void **this_cache,\n     {\n       res = unwinder->sniffer (unwinder, this_frame, this_cache);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       /* Catch all exceptions, caused by either interrupt or error.\n \t Reset *THIS_CACHE.  */"
    },
    {
      "sha": "1a76bdf3b1f43e55919acdc5aae76cd51809e77b",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -899,7 +899,7 @@ frame_unwind_pc (struct frame_info *this_frame)\n \t  pc = gdbarch_unwind_pc (prev_gdbarch, this_frame);\n \t  pc_p = 1;\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  if (ex.error == NOT_AVAILABLE_ERROR)\n \t    {\n@@ -1913,7 +1913,7 @@ get_prev_frame_if_no_cycle (struct frame_info *this_frame)\n \t  prev_frame = NULL;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       prev_frame->next = NULL;\n       this_frame->prev = NULL;\n@@ -2094,7 +2094,7 @@ get_prev_frame_always (struct frame_info *this_frame)\n     {\n       prev_frame = get_prev_frame_always_1 (this_frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == MEMORY_ERROR)\n \t{\n@@ -2380,7 +2380,7 @@ get_frame_pc_if_available (struct frame_info *frame, CORE_ADDR *pc)\n     {\n       *pc = frame_unwind_pc (frame->next);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == NOT_AVAILABLE_ERROR)\n \treturn 0;\n@@ -2462,7 +2462,7 @@ get_frame_address_in_block_if_available (struct frame_info *this_frame,\n     {\n       *pc = get_frame_address_in_block (this_frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == NOT_AVAILABLE_ERROR)\n \treturn 0;\n@@ -2747,7 +2747,7 @@ get_frame_language (struct frame_info *frame)\n       pc = get_frame_address_in_block (frame);\n       pc_p = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);"
    },
    {
      "sha": "a3599d728f34935850978ca7726a297d8e5384ee",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbreplay.c: Update.\n+\t* linux-low.c: Update.\n+\t* server.c: Update.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* server.c: Use C++ exception handling."
    },
    {
      "sha": "ca0a9d31646fce414ee4a4c6140ebd0f69d66f11",
      "filename": "gdb/gdbserver/gdbreplay.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/gdbreplay.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/gdbreplay.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/gdbreplay.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -532,7 +532,7 @@ main (int argc, char *argv[])\n     {\n       captured_main (argc, argv);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       if (exception.reason == RETURN_ERROR)\n \t{"
    },
    {
      "sha": "4b1a211ab7a08e10e901c8c4a930de9f06c98b5a",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1540,7 +1540,7 @@ linux_detach_one_lwp (struct lwp_info *lwp)\n       if (the_low_target.prepare_to_resume != NULL)\n \tthe_low_target.prepare_to_resume (lwp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (!check_ptrace_stopped_lwp_gone (lwp))\n \tthrow_exception (ex);\n@@ -4511,7 +4511,7 @@ linux_resume_one_lwp (struct lwp_info *lwp,\n     {\n       linux_resume_one_lwp_throw (lwp, step, signal, info);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (!check_ptrace_stopped_lwp_gone (lwp))\n \tthrow_exception (ex);"
    },
    {
      "sha": "f2c8f15169e18ede5e01a7f39155432544065454",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -472,7 +472,7 @@ handle_btrace_general_set (char *own_buf)\n \n       write_ok (own_buf);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &exception)\n+  catch (const gdb_exception_error &exception)\n     {\n       sprintf (own_buf, \"E.%s\", exception.what ());\n     }\n@@ -1881,7 +1881,7 @@ handle_qxfer_btrace (const char *annex,\n \t  if (result != 0)\n \t    memcpy (cs.own_buf, cache.buffer, cache.used_size);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &exception)\n+      catch (const gdb_exception_error &exception)\n \t{\n \t  sprintf (cs.own_buf, \"E.%s\", exception.what ());\n \t  result = -1;\n@@ -1952,7 +1952,7 @@ handle_qxfer_btrace_conf (const char *annex,\n \t  if (result != 0)\n \t    memcpy (cs.own_buf, cache.buffer, cache.used_size);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &exception)\n+      catch (const gdb_exception_error &exception)\n \t{\n \t  sprintf (cs.own_buf, \"E.%s\", exception.what ());\n \t  result = -1;\n@@ -3553,7 +3553,7 @@ detach_or_kill_for_exit_cleanup ()\n     {\n       detach_or_kill_for_exit ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       fflush (stdout);\n       fprintf (stderr, \"Detach or kill failed: %s\\n\",\n@@ -3927,7 +3927,7 @@ captured_main (int argc, char *argv[])\n \t\t}\n \t    }\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &exception)\n+      catch (const gdb_exception_error &exception)\n \t{\n \t  fflush (stdout);\n \t  fprintf (stderr, \"gdbserver: %s\\n\", exception.what ());\n@@ -3954,7 +3954,7 @@ main (int argc, char *argv[])\n     {\n       captured_main (argc, argv);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       if (exception.reason == RETURN_ERROR)\n \t{"
    },
    {
      "sha": "919feaca73befdcce815f7de865cd1d4f0c80220",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2575,7 +2575,7 @@ safe_parse_type (struct gdbarch *gdbarch, char *p, int length)\n     {\n       type = parse_and_eval_type (p, length);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       type = builtin_type (gdbarch)->builtin_void;\n     }"
    },
    {
      "sha": "6407c9beb82fe3aeb6dd0b5ef1aa9d855bfa939e",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -910,7 +910,7 @@ print_one_vtable (struct gdbarch *gdbarch, struct value *value,\n \t{\n \t  addr = value_as_address (vfn);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  printf_filtered (_(\"<error: %s>\"), ex.what ());\n \t  got_error = 1;"
    },
    {
      "sha": "a3e02abe41bc83927b247bec1620938d59a2c0dd",
      "filename": "gdb/guile/guile-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/guile-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/guile-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile-internal.h?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -681,7 +681,7 @@ gdbscm_wrap (Function &&func, Args &&... args)\n     {\n       result = func (std::forward<Args> (args)...);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "2114ca1f19906b3da894de31db12a1e7b9abb336",
      "filename": "gdb/guile/scm-block.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-block.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -687,7 +687,7 @@ gdbscm_lookup_block (SCM pc_scm)\n       if (cust != NULL && COMPUNIT_OBJFILE (cust) != NULL)\n \tblock = block_for_pc (pc);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "3ba2dab18f6320d54fb611488ac164953b2d60d9",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -465,7 +465,7 @@ gdbscm_register_breakpoint_x (SCM self)\n \t  gdb_assert_not_reached (\"invalid breakpoint type\");\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -493,7 +493,7 @@ gdbscm_delete_breakpoint_x (SCM self)\n     {\n       delete_breakpoint (bp_smob->bp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -593,7 +593,7 @@ gdbscm_set_breakpoint_enabled_x (SCM self, SCM newvalue)\n       else\n \tdisable_breakpoint (bp_smob->bp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -627,7 +627,7 @@ gdbscm_set_breakpoint_silent_x (SCM self, SCM newvalue)\n     {\n       breakpoint_set_silent (bp_smob->bp, gdbscm_is_true (newvalue));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -667,7 +667,7 @@ gdbscm_set_breakpoint_ignore_count_x (SCM self, SCM newvalue)\n     {\n       set_ignore_count (bp_smob->number, (int) value, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -787,7 +787,7 @@ gdbscm_set_breakpoint_task_x (SCM self, SCM newvalue)\n \t{\n \t  valid_id = valid_task_id (id);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDBSCM_HANDLE_GDB_EXCEPTION (except);\n \t}\n@@ -807,7 +807,7 @@ gdbscm_set_breakpoint_task_x (SCM self, SCM newvalue)\n     {\n       breakpoint_set_task (bp_smob->bp, id);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -972,7 +972,7 @@ gdbscm_breakpoint_commands (SCM self)\n     {\n       print_command_lines (current_uiout, breakpoint_commands (bp), 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       current_uiout->redirect (NULL);\n       gdbscm_throw_gdb_exception (except);"
    },
    {
      "sha": "38db7f5c71fb1a70d4fbf620775257367ee8fe72",
      "filename": "gdb/guile/scm-cmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-cmd.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -776,7 +776,7 @@ gdbscm_register_command_x (SCM self)\n \t\t\t c_smob->doc, cmd_list);\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "d673a1eb90a8454f5ac9d57b07dcf4110a68c067",
      "filename": "gdb/guile/scm-disasm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-disasm.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -257,7 +257,7 @@ gdbscm_arch_disassemble (SCM self, SCM start_scm, SCM rest)\n \t  else\n \t    insn_len = gdb_print_insn (gdbarch, pc, &buf, NULL);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDBSCM_HANDLE_GDB_EXCEPTION (except);\n \t}"
    },
    {
      "sha": "ca271dbab5c0361db767120f125be2a0b1ee6eab",
      "filename": "gdb/guile/scm-frame.c",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-frame.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -248,7 +248,7 @@ frscm_scm_from_frame (struct frame_info *frame, struct inferior *inferior)\n \t}\n       gdbarch = get_frame_arch (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       return gdbscm_scm_from_gdb_exception (except);\n     }\n@@ -400,7 +400,7 @@ gdbscm_frame_valid_p (SCM self)\n     {\n       frame = frscm_frame_smob_to_frame (f_smob);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -429,7 +429,7 @@ gdbscm_frame_name (SCM self)\n       if (frame != NULL)\n \tname = find_frame_funname (frame, &lang, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -466,7 +466,7 @@ gdbscm_frame_type (SCM self)\n       if (frame != NULL)\n \ttype = get_frame_type (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -495,7 +495,7 @@ gdbscm_frame_arch (SCM self)\n     {\n       frame = frscm_frame_smob_to_frame (f_smob);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -525,7 +525,7 @@ gdbscm_frame_unwind_stop_reason (SCM self)\n     {\n       frame = frscm_frame_smob_to_frame (f_smob);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -559,7 +559,7 @@ gdbscm_frame_pc (SCM self)\n       if (frame != NULL)\n \tpc = get_frame_pc (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -591,7 +591,7 @@ gdbscm_frame_block (SCM self)\n       if (frame != NULL)\n \tblock = get_frame_block (frame, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -641,7 +641,7 @@ gdbscm_frame_function (SCM self)\n       if (frame != NULL)\n \tsym = find_pc_function (get_frame_address_in_block (frame));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -677,7 +677,7 @@ gdbscm_frame_older (SCM self)\n       if (frame != NULL)\n \tprev = get_prev_frame (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -713,7 +713,7 @@ gdbscm_frame_newer (SCM self)\n       if (frame != NULL)\n \tnext = get_next_frame (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -748,7 +748,7 @@ gdbscm_frame_sal (SCM self)\n       if (frame != NULL)\n \tsal = find_frame_sal (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -793,7 +793,7 @@ gdbscm_frame_read_register (SCM self, SCM register_scm)\n \t    value = value_of_register (regnum, frame);\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -842,7 +842,7 @@ gdbscm_frame_read_var (SCM self, SCM symbol_scm, SCM rest)\n     {\n       frame = frscm_frame_smob_to_frame (f_smob);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -894,7 +894,7 @@ gdbscm_frame_read_var (SCM self, SCM symbol_scm, SCM rest)\n \t    var = lookup_sym.symbol;\n \t    block = lookup_sym.block;\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\tcatch (const gdb_exception &ex)\n \t  {\n \t    except = ex;\n \t  }\n@@ -917,7 +917,7 @@ gdbscm_frame_read_var (SCM self, SCM symbol_scm, SCM rest)\n     {\n       value = read_var_value (var, block, frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -942,7 +942,7 @@ gdbscm_frame_select (SCM self)\n       if (frame != NULL)\n \tselect_frame (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -968,7 +968,7 @@ gdbscm_newest_frame (void)\n     {\n       frame = get_current_frame ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -988,7 +988,7 @@ gdbscm_selected_frame (void)\n     {\n       frame = get_selected_frame (_(\"No frame is currently selected\"));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "4d69b234bb262378561d2fc007faab4f3a49632a",
      "filename": "gdb/guile/scm-lazy-string.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-lazy-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-lazy-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-lazy-string.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -336,7 +336,7 @@ lsscm_safe_lazy_string_to_value (SCM string, int arg_pos,\n \t  break;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       *except_scmp = gdbscm_scm_from_gdb_exception (except);\n       return NULL;"
    },
    {
      "sha": "dc7245ba7b46ddb460eae536c4b8b28d83ac2630",
      "filename": "gdb/guile/scm-math.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-math.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-math.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-math.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -824,7 +824,7 @@ vlscm_convert_typed_value_from_scheme (const char *func_name,\n \t  value = NULL;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       except_scm = gdbscm_scm_from_gdb_exception (except);\n     }"
    },
    {
      "sha": "a55deabf56cf2b7c245c0b1965fbeb5630a71767",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1018,7 +1018,7 @@ gdbscm_register_parameter_x (SCM self)\n \t\t\t   set_list, show_list,\n \t\t\t   &p_smob->set_command, &p_smob->show_command);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -1067,7 +1067,7 @@ gdbscm_parameter_value (SCM self)\n \t{\n \t  found = lookup_cmd_composition (newarg, &alias, &prefix, &cmd);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  except = ex;\n \t}"
    },
    {
      "sha": "57d3b18f96278fde992bfb5dc2ae64b2c3775577",
      "filename": "gdb/guile/scm-ports.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-ports.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-ports.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-ports.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -279,7 +279,7 @@ ioscm_write (SCM port, const void *data, size_t size)\n       else\n \tfputsn_filtered ((const char *) data, size, gdb_stdout);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "656c4bbc52e5960697bf531636c12a0ce95d9e79",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -558,7 +558,7 @@ ppscm_pretty_print_one_value (SCM printer, struct value **out_value,\n \t    (_(\"invalid result from pretty-printer to-string\"), result);\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n     }\n "
    },
    {
      "sha": "c135ff5ac378815d437e87859847cc682f33a987",
      "filename": "gdb/guile/scm-symbol.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symbol.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -490,7 +490,7 @@ gdbscm_symbol_needs_frame_p (SCM self)\n     {\n       result = symbol_read_needs_frame (symbol);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -556,7 +556,7 @@ gdbscm_symbol_value (SCM self, SCM rest)\n \t can happen with nested functions).  */\n       value = read_var_value (symbol, NULL, frame_info);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -607,7 +607,7 @@ gdbscm_lookup_symbol (SCM name_scm, SCM rest)\n \t  selected_frame = get_selected_frame (_(\"no frame selected\"));\n \t  block = get_frame_block (selected_frame, NULL);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  xfree (name);\n \t  GDBSCM_HANDLE_GDB_EXCEPTION (ex);\n@@ -620,7 +620,7 @@ gdbscm_lookup_symbol (SCM name_scm, SCM rest)\n       symbol = lookup_symbol (name, block, (domain_enum) domain,\n \t\t\t      &is_a_field_of_this).symbol;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -656,7 +656,7 @@ gdbscm_lookup_global_symbol (SCM name_scm, SCM rest)\n     {\n       symbol = lookup_global_symbol (name, NULL, (domain_enum) domain).symbol;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }"
    },
    {
      "sha": "60ed70725567ce41d7228bb11d66f2f120c7d5be",
      "filename": "gdb/guile/scm-symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symtab.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -597,7 +597,7 @@ gdbscm_find_pc_line (SCM pc_scm)\n \n       sal = find_pc_line (pc, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "8f47ef68cc1d7a08c6c7f81383d8d2ab383ade30",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -112,7 +112,7 @@ tyscm_type_name (struct type *type)\n       LA_PRINT_TYPE (type, \"\", &stb, -1, 0, &type_print_raw_options);\n       return std::move (stb.string ());\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       SCM excp = gdbscm_scm_from_gdb_exception (except);\n       gdbscm_throw (excp);\n@@ -238,7 +238,7 @@ tyscm_equal_p_type_smob (SCM type1_scm, SCM type2_scm)\n     {\n       result = types_deeply_equal (type1, type2);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -631,7 +631,7 @@ gdbscm_type_sizeof (SCM self)\n     {\n       check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n     }\n \n@@ -654,7 +654,7 @@ gdbscm_type_strip_typedefs (SCM self)\n     {\n       type = check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -675,7 +675,7 @@ tyscm_get_composite (struct type *type)\n \t{\n \t  type = check_typedef (type);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDBSCM_HANDLE_GDB_EXCEPTION (except);\n \t}\n@@ -731,7 +731,7 @@ tyscm_array_1 (SCM self, SCM n1_scm, SCM n2_scm, int is_vector,\n       if (is_vector)\n \tmake_vector_type (array);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -785,7 +785,7 @@ gdbscm_type_pointer (SCM self)\n     {\n       type = lookup_pointer_type (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -846,7 +846,7 @@ gdbscm_type_reference (SCM self)\n     {\n       type = lookup_lvalue_reference_type (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -883,7 +883,7 @@ gdbscm_type_const (SCM self)\n     {\n       type = make_cv_type (1, 0, type, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -905,7 +905,7 @@ gdbscm_type_volatile (SCM self)\n     {\n       type = make_cv_type (0, 1, type, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -927,7 +927,7 @@ gdbscm_type_unqualified (SCM self)\n     {\n       type = make_cv_type (0, 0, type, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -1231,7 +1231,7 @@ tyscm_lookup_typename (const char *type_name, const struct block *block)\n \ttype = lookup_typename (current_language, get_current_arch (),\n \t\t\t\ttype_name, block, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       return NULL;\n     }"
    },
    {
      "sha": "5bbc3e8b8df948d23b581d6a37c6ef25234a5c3a",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -163,7 +163,7 @@ vlscm_print_value_smob (SCM self, SCM port, scm_print_state *pstate)\n       common_val_print (v_smob->value, &stb, 0, &opts, current_language);\n       scm_puts (stb.c_str (), port);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -190,7 +190,7 @@ vlscm_equal_p_value_smob (SCM v1, SCM v2)\n     {\n       result = value_equal (v1_smob->value, v2_smob->value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -394,7 +394,7 @@ gdbscm_value_address (SCM self)\n \t    {\n \t      address = vlscm_scm_from_value (value_addr (value));\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+\t  catch (const gdb_exception &except)\n \t    {\n \t    }\n \n@@ -529,7 +529,7 @@ gdbscm_value_dynamic_type (SCM self)\n \t  type = NULL;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -684,7 +684,7 @@ gdbscm_value_call (SCM self, SCM args)\n     {\n       ftype = check_typedef (value_type (function));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -752,7 +752,7 @@ gdbscm_value_to_bytevector (SCM self)\n       length = TYPE_LENGTH (type);\n       contents = value_contents (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -793,7 +793,7 @@ gdbscm_value_to_bool (SCM self)\n     {\n       type = check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -808,7 +808,7 @@ gdbscm_value_to_bool (SCM self)\n       else\n \tl = value_as_long (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -834,7 +834,7 @@ gdbscm_value_to_integer (SCM self)\n     {\n       type = check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -849,7 +849,7 @@ gdbscm_value_to_integer (SCM self)\n       else\n \tl = value_as_long (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -879,7 +879,7 @@ gdbscm_value_to_real (SCM self)\n     {\n       type = check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -905,7 +905,7 @@ gdbscm_value_to_real (SCM self)\n \t  check = value_from_longest (type, (LONGEST) d);\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }\n@@ -998,7 +998,7 @@ gdbscm_value_to_string (SCM self, SCM rest)\n       LA_GET_STRING (value, &buffer, &length, &char_type, &la_encoding);\n       buffer_contents = buffer.release ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       xfree (encoding);\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n@@ -1119,7 +1119,7 @@ gdbscm_value_to_lazy_string (SCM self, SCM rest)\n \n       result = lsscm_make_lazy_string (addr, length, encoding, type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -1181,7 +1181,7 @@ gdbscm_value_print (SCM self)\n     {\n       common_val_print (value, &stb, 0, &opts, current_language);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDBSCM_HANDLE_GDB_EXCEPTION (except);\n     }"
    },
    {
      "sha": "74f429b49af6c523c3823ed652e1bc18eb478c10",
      "filename": "gdb/i386-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/i386-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/i386-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -414,7 +414,7 @@ i386_linux_handle_segmentation_fault (struct gdbarch *gdbarch,\n       access\n         = parse_and_eval_long (\"$_siginfo._sifields._sigfault.si_addr\");\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       return;\n     }"
    },
    {
      "sha": "7249005ee9ee616cd50e442c6b950a262d975955",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2086,7 +2086,7 @@ i386_frame_cache (struct frame_info *this_frame, void **this_cache)\n     {\n       i386_frame_cache_1 (this_frame, cache);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -2265,7 +2265,7 @@ i386_epilogue_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n       cache->base_p = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -2460,7 +2460,7 @@ i386_sigtramp_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n       cache->base_p = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);"
    },
    {
      "sha": "85bd69cac2b24b32c0bc2dc26bdbb1bf14e612cf",
      "filename": "gdb/inf-loop.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/inf-loop.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/inf-loop.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-loop.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -71,7 +71,7 @@ inferior_event_handler (enum inferior_event_type event_type,\n \t    {\n \t      bpstat_do_actions ();\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+\t  catch (const gdb_exception &e)\n \t    {\n \t      /* If the user was running a foreground execution\n \t\t command, then propagate the error so that the prompt"
    },
    {
      "sha": "c102b301e008d4ccf693d1af1bc7375fae7517ee",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -605,7 +605,7 @@ run_inferior_call (struct call_thread_fsm *sm,\n \t target supports asynchronous execution.  */\n       wait_sync_command_done ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+  catch (const gdb_exception &e)\n     {\n       caught_error = e;\n     }"
    },
    {
      "sha": "116c5f0079611c5f168440f47a42c2c08f9688b1",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -451,7 +451,7 @@ post_create_inferior (struct target_ops *target, int from_tty)\n     {\n       thr->suspend.stop_pc = regcache_read_pc (get_current_regcache ());\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -1652,7 +1652,7 @@ print_return_value (struct ui_out *uiout, struct return_value_info *rv)\n \t delete the breakpoint.  */\n       print_return_value_1 (uiout, rv);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stdout, ex);\n     }"
    },
    {
      "sha": "deb7bd6abd61aa14a1c4570fd065b1e768973a7c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1780,7 +1780,7 @@ displaced_step_prepare (thread_info *thread)\n     {\n       prepared = displaced_step_prepare_throw (thread);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       struct displaced_step_inferior_state *displaced_state;\n \n@@ -2615,7 +2615,7 @@ resume (gdb_signal sig)\n     {\n       resume_1 (sig);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       /* If resuming is being aborted for any reason, delete any\n \t single-step breakpoint resume_1 may have created, to avoid\n@@ -7299,7 +7299,7 @@ insert_exception_resume_breakpoint (struct thread_info *tp,\n \t  inferior_thread ()->control.exception_resume_breakpoint = bp;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       /* We want to ignore errors here.  */\n     }\n@@ -7398,7 +7398,7 @@ check_exception_resume (struct execution_control_state *ecs,\n \t    }\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n     }\n }\n@@ -7531,7 +7531,7 @@ keep_going_pass_signal (struct execution_control_state *ecs)\n \t{\n \t  insert_breakpoints ();\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+      catch (const gdb_exception_error &e)\n \t{\n \t  exception_print (gdb_stderr, e);\n \t  stop_waiting (ecs);\n@@ -8063,7 +8063,7 @@ normal_stop (void)\n \t{\n \t  execute_cmd_pre_hook (stop_command);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  exception_fprintf (gdb_stderr, ex,\n \t\t\t     \"Error while running hook_stop:\\n\");\n@@ -8768,7 +8768,7 @@ restore_infcall_control_state (struct infcall_control_state *inf_status)\n \t{\n \t  restore_selected_frame (inf_status->selected_frame_id);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  exception_fprintf (gdb_stderr, ex,\n \t\t\t     \"Unable to restore previously selected frame:\\n\");"
    },
    {
      "sha": "62942fc7ab0d65be93e10c79df8960409b270666",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -855,7 +855,7 @@ jit_reader_try_read_symtab (struct jit_code_entry *code_entry,\n \t\t\t      code_entry->symfile_size))\n \tstatus = 0;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+  catch (const gdb_exception &e)\n     {\n       status = 0;\n     }"
    },
    {
      "sha": "435243e9eed96949b4b9c68dfbc59b62e4c6cdeb",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -179,7 +179,7 @@ set_language_command (const char *ignore,\n \t\t  frame = get_selected_frame (NULL);\n \t\t  flang = get_frame_language (frame);\n \t\t}\n-\t      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+\t      catch (const gdb_exception_error &ex)\n \t\t{\n \t\t  flang = language_unknown;\n \t\t}"
    },
    {
      "sha": "0ed9d7cf9778de75f9e08724f60ceb539929f804",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2388,7 +2388,7 @@ convert_explicit_location_to_linespec (struct linespec_state *self,\n \t  *result->file_symtabs\n \t    = symtabs_from_filename (source_filename, self->search_pspace);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  source_file_not_found_error (source_filename);\n \t}\n@@ -2613,7 +2613,7 @@ parse_linespec (linespec_parser *parser, const char *arg,\n \t    = symtabs_from_filename (user_filename.get (),\n \t\t\t\t     PARSER_STATE (parser)->search_pspace);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  file_exception = ex;\n \t}\n@@ -2930,7 +2930,7 @@ linespec_complete_label (completion_tracker &tracker,\n \t\t\t\t\t     func_name_match_type,\n \t\t\t\t\t     NULL, unknown_offset);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       return;\n     }\n@@ -2960,7 +2960,7 @@ linespec_complete (completion_tracker &tracker, const char *text,\n     {\n       parse_linespec (&parser, text, match_type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n     }\n \n@@ -3150,7 +3150,7 @@ event_location_to_sals (linespec_parser *parser,\n \t    result = parse_linespec (parser,\n \t\t\t\t     ls->spec_string, ls->match_type);\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\tcatch (const gdb_exception_error &except)\n \t  {\n \t    throw_exception (except);\n \t  }\n@@ -3963,7 +3963,7 @@ find_linespec_symbols (struct linespec_state *state,\n \n \t  /* If successful, we're done.  If NOT_FOUND_ERROR\n \t     was not thrown, rethrow the exception that we did get.  */\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      if (except.error != NOT_FOUND_ERROR)\n \t\tthrow_exception (except);"
    },
    {
      "sha": "d323a716e3992d33e520873674de79f651ccb678",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -433,7 +433,7 @@ class scoped_switch_fork_info\n \t    fork_load_infrun_state (m_oldfp);\n \t    insert_breakpoints ();\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\tcatch (const gdb_exception &ex)\n \t  {\n \t    warning (_(\"Couldn't restore checkpoint state in %s: %s\"),\n \t\t     target_pid_to_str (m_oldfp->ptid).c_str (),"
    },
    {
      "sha": "ed1f67c4a67c060ecbee6eb11201d482b0d67fd5",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1192,7 +1192,7 @@ linux_nat_target::attach (const char *args, int from_tty)\n     {\n       inf_ptrace_target::attach (args, from_tty);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       pid_t pid = parse_pid_to_attach (args);\n       std::string reason = linux_ptrace_attach_fail_reason (pid);\n@@ -1405,7 +1405,7 @@ detach_one_lwp (struct lwp_info *lp, int *signo_p)\n     {\n       linux_target->low_prepare_to_resume (lp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (!check_ptrace_stopped_lwp_gone (lp))\n \tthrow_exception (ex);\n@@ -1587,7 +1587,7 @@ linux_resume_one_lwp (struct lwp_info *lp, int step, enum gdb_signal signo)\n     {\n       linux_resume_one_lwp_throw (lp, step, signo);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (!check_ptrace_stopped_lwp_gone (lp))\n \tthrow_exception (ex);\n@@ -3549,7 +3549,7 @@ resume_stopped_resumed_lwps (struct lwp_info *lp, const ptid_t wait_ptid)\n \t      linux_resume_one_lwp_throw (lp, lp->step, GDB_SIGNAL_0);\n \t    }\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  if (!check_ptrace_stopped_lwp_gone (lp))\n \t    throw_exception (ex);"
    },
    {
      "sha": "5de985def39280aba8b1669c3c4cadf3d49f725e",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1930,7 +1930,7 @@ linux_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd, int *note_size)\n     {\n       update_thread_list ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n       exception_print (gdb_stderr, e);\n     }"
    },
    {
      "sha": "b3e1a243183f31267496ba5feb5a6e9ef4db7e63",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -502,7 +502,7 @@ thread_db_find_new_threads_silently (thread_info *stopped)\n       thread_db_find_new_threads_2 (stopped, true);\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (libthread_db_debug)\n \texception_fprintf (gdb_stdlog, except,\n@@ -772,7 +772,7 @@ check_thread_db (struct thread_db_info *info, bool log_progress)\n       if (!tdb_testinfo->threads_seen)\n \terror (_(\"no threads seen\"));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (warning_pre_print)\n \tfputs_unfiltered (warning_pre_print, gdb_stderr);\n@@ -1518,7 +1518,7 @@ find_new_threads_once (struct thread_db_info *info, int iteration,\n \t\t\t\t    TD_SIGNO_MASK,\n \t\t\t\t    TD_THR_ANY_USER_FLAGS);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       if (libthread_db_debug)\n \t{"
    },
    {
      "sha": "e67efc7bcdf04365da8f8af10dcf0747eb68a5ca",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -373,7 +373,7 @@ catch_command_errors (catch_command_errors_const_ftype command,\n \n       maybe_wait_sync_command_done (was_sync);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &e)\n+  catch (const gdb_exception &e)\n     {\n       return handle_command_errors (e);\n     }\n@@ -1172,7 +1172,7 @@ captured_main (void *data)\n \t{\n \t  captured_command_loop ();\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  exception_print (gdb_stderr, ex);\n \t}\n@@ -1187,7 +1187,7 @@ gdb_main (struct captured_main_args *args)\n     {\n       captured_main (args);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }"
    },
    {
      "sha": "1406e21aed6aeadcaffe6b5da1351fa141bbac8a",
      "filename": "gdb/mi/mi-cmd-break.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-cmd-break.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-cmd-break.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-break.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -58,7 +58,7 @@ breakpoint_notify (struct breakpoint *b)\n \t{\n \t  print_breakpoint (b);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  exception_print (gdb_stderr, ex);\n \t}"
    },
    {
      "sha": "0dc0b55bc91519c394ba3a945a8ef750ee32802d",
      "filename": "gdb/mi/mi-cmd-stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-cmd-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-cmd-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-stack.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -540,7 +540,7 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n \t      common_val_print (arg->val, &stb, 0, &opts,\n \t\t\t\tlanguage_def (SYMBOL_LANGUAGE (arg->sym)));\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      stb.printf (_(\"<error reading variable: %s>\"),\n \t\t\t  except.what ());"
    },
    {
      "sha": "25c79b150ef9745c22deac1adb3d4678ea7d5042",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -830,7 +830,7 @@ mi_print_breakpoint_for_event (struct mi_interp *mi, breakpoint *bp)\n \n       print_breakpoint (bp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }"
    },
    {
      "sha": "17ca8074719f22b3222f64602ecbf9fabec5774c",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1942,7 +1942,7 @@ mi_execute_command (const char *cmd, int from_tty)\n     {\n       command = mi_parse (cmd, &token);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       mi_print_exception (token, exception);\n       xfree (token);\n@@ -1969,7 +1969,7 @@ mi_execute_command (const char *cmd, int from_tty)\n \t{\n \t  captured_mi_execute_command (current_uiout, command.get ());\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &result)\n+      catch (const gdb_exception &result)\n \t{\n \t  /* Like in start_event_loop, enable input and force display\n \t     of the prompt.  Otherwise, any command that calls"
    },
    {
      "sha": "be1a27f0d78bed5a255c3847c8738e67871c01d6",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1302,7 +1302,7 @@ find_objc_msgcall_submethod (int (*f) (CORE_ADDR, CORE_ADDR *),\n       if (f (pc, new_pc) == 0)\n \treturn 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_fprintf (gdb_stderr, ex,\n \t\t\t \"Unable to determine target of \""
    },
    {
      "sha": "62679ac4445b448f2215f171d3a1b4bc589c3fa7",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -755,7 +755,7 @@ pascal_object_print_value (struct type *type, const gdb_byte *valaddr,\n \t{\n \t  boffset = baseclass_offset (type, i, valaddr, offset, address, val);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  if (ex.error == NOT_AVAILABLE_ERROR)\n \t    skip = -1;"
    },
    {
      "sha": "cc1fd7fd1a3bf107b5d386a06163f89f2ed22c73",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1141,7 +1141,7 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n     {\n       lang->la_parser (&ps);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       /* If parsing for completion, allow this to succeed; but if no\n \t expression elements have been written, then there's nothing\n@@ -1228,7 +1228,7 @@ parse_expression_for_completion (const char *string,\n       exp = parse_exp_in_context (&string, 0, 0, 0, 0, &subexp,\n \t\t\t\t  nullptr, &cstate);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       /* Nothing, EXP remains NULL.  */\n     }"
    },
    {
      "sha": "82277a03f896f243c605e2ebbec8d6206182267c",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1842,7 +1842,7 @@ ppc_linux_spe_context (int wordsize, enum bfd_endian byte_order,\n \t  spe_context_cache_ptid = inferior_ptid;\n \t}\n \n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  return 0;\n \t}"
    },
    {
      "sha": "9e84594fe687030e328603def20cfb0b9b674288",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1887,7 +1887,7 @@ do_one_display (struct display *d)\n \t  d->exp = parse_expression (d->exp_string, &tracker);\n \t  d->block = tracker.block ();\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  /* Can't re-parse the expression.  Disable this display item.  */\n \t  d->enabled_p = 0;\n@@ -1952,7 +1952,7 @@ do_one_display (struct display *d)\n \t    addr = gdbarch_addr_bits_remove (d->exp->gdbarch, addr);\n \t  do_examine (d->format, d->exp->gdbarch, addr);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\\n\"),\n \t\t\t    ex.what ());\n@@ -1986,7 +1986,7 @@ do_one_display (struct display *d)\n \t  val = evaluate_expression (d->exp.get ());\n \t  print_formatted (val, d->format.size, &opts, gdb_stdout);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.what ());\n \t}\n@@ -2189,7 +2189,7 @@ print_variable_and_value (const char *name, struct symbol *var,\n \t function.  */\n       frame = NULL;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       fprintf_filtered (stream, \"<error reading variable %s (%s)>\", name,\n \t\t\texcept.what ());"
    },
    {
      "sha": "0799186ca5fda2aa3c119711768fa329a2445b77",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -203,7 +203,7 @@ archpy_disassemble (PyObject *self, PyObject *args, PyObject *kw)\n         {\n           insn_len = gdb_print_insn (gdbarch, pc, &stb, NULL);\n         }\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n         {\n \t  gdbpy_convert_exception (except);\n \t  return NULL;"
    },
    {
      "sha": "03430e69e3910a66d78b0278df7ac4a53fe70e8e",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -145,7 +145,7 @@ bppy_set_enabled (PyObject *self, PyObject *newvalue, void *closure)\n       else\n \tdisable_breakpoint (self_bp->bp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_SET_HANDLE_EXCEPTION (except);\n     }\n@@ -250,7 +250,7 @@ bppy_set_task (PyObject *self, PyObject *newvalue, void *closure)\n \t{\n \t  valid_id = valid_task_id (id);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDB_PY_SET_HANDLE_EXCEPTION (except);\n \t}\n@@ -292,7 +292,7 @@ bppy_delete_breakpoint (PyObject *self, PyObject *args)\n     {\n       delete_breakpoint (self_bp->bp);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -333,7 +333,7 @@ bppy_set_ignore_count (PyObject *self, PyObject *newvalue, void *closure)\n     {\n       set_ignore_count (self_bp->number, (int) value, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_SET_HANDLE_EXCEPTION (except);\n     }\n@@ -469,7 +469,7 @@ bppy_set_condition (PyObject *self, PyObject *newvalue, void *closure)\n     {\n       set_breakpoint_condition (self_bp->bp, exp, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -498,7 +498,7 @@ bppy_get_commands (PyObject *self, void *closure)\n     {\n       print_command_lines (current_uiout, breakpoint_commands (bp), 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       current_uiout->redirect (NULL);\n       gdbpy_convert_exception (except);\n@@ -540,7 +540,7 @@ bppy_set_commands (PyObject *self, PyObject *newvalue, void *closure)\n       counted_command_line lines = read_command_lines_1 (reader, 1, nullptr);\n       breakpoint_set_commands (self_bp->bp, std::move (lines));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -864,7 +864,7 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \t  error(_(\"Do not understand breakpoint type to set.\"));\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       bppy_pending_object = NULL;\n       gdbpy_convert_exception (except);"
    },
    {
      "sha": "87d1888c528c3e581f2a5cf348004a8e1cf4c348",
      "filename": "gdb/python/py-cmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-cmd.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -572,7 +572,7 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n \tset_cmd_completer_handle_brkchars (cmd,\n \t\t\t\t\t   cmdpy_completer_handle_brkchars);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       xfree (cmd_name);\n       xfree (docstring);"
    },
    {
      "sha": "7784a92bffb1990f87d9e6a59f1dcfd97eca659a",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -121,7 +121,7 @@ bpfinishpy_pre_stop_hook (struct gdbpy_breakpoint_object *bp_obj)\n           self_finishbp->return_value = Py_None;\n         }\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n       gdbpy_print_stack ();\n@@ -141,7 +141,7 @@ bpfinishpy_post_stop_hook (struct gdbpy_breakpoint_object *bp_obj)\n       disable_breakpoint (bp_obj->bp);\n       gdb_assert (bp_obj->bp->disposition == disp_del);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n       gdbpy_print_stack ();\n@@ -208,7 +208,7 @@ bpfinishpy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \t    }\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n       return -1;\n@@ -267,7 +267,7 @@ bpfinishpy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n             }\n         }\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       /* Just swallow.  Either the return type or the function value\n \t remain NULL.  */\n@@ -302,7 +302,7 @@ bpfinishpy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n                          &bkpt_breakpoint_ops,\n                          0, 1, internal_bp, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_SET_HANDLE_EXCEPTION (except);\n     }\n@@ -364,7 +364,7 @@ bpfinishpy_detect_out_scope_cb (struct breakpoint *b, void *args)\n                       || frame_find_by_id (b->frame_id) == NULL))\n                 bpfinishpy_out_of_scope (finish_bp);\n             }\n-          catch (const gdb_exception_RETURN_MASK_ALL &except)\n+          catch (const gdb_exception &except)\n             {\n               gdbpy_convert_exception (except);\n               gdbpy_print_stack ();"
    },
    {
      "sha": "03273217076ac3783de041e21bcaf7a2c06ec62a",
      "filename": "gdb/python/py-frame.c",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-frame.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -99,7 +99,7 @@ frapy_is_valid (PyObject *self, PyObject *args)\n     {\n       frame = frame_object_to_frame_info (self);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -127,7 +127,7 @@ frapy_name (PyObject *self, PyObject *args)\n \n       name = find_frame_funname (frame, &lang, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -161,7 +161,7 @@ frapy_type (PyObject *self, PyObject *args)\n \n       type = get_frame_type (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -182,7 +182,7 @@ frapy_arch (PyObject *self, PyObject *args)\n     {\n       FRAPY_REQUIRE_VALID (self, frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -203,7 +203,7 @@ frapy_unwind_stop_reason (PyObject *self, PyObject *args)\n     {\n       FRAPY_REQUIRE_VALID (self, frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -228,7 +228,7 @@ frapy_pc (PyObject *self, PyObject *args)\n \n       pc = get_frame_pc (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -264,7 +264,7 @@ frapy_read_register (PyObject *self, PyObject *args)\n       if (val == NULL)\n         PyErr_SetString (PyExc_ValueError, _(\"Unknown register.\"));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -286,7 +286,7 @@ frapy_block (PyObject *self, PyObject *args)\n       FRAPY_REQUIRE_VALID (self, frame);\n       block = get_frame_block (frame, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -331,7 +331,7 @@ frapy_function (PyObject *self, PyObject *args)\n       gdb::unique_xmalloc_ptr<char> funname\n \t= find_frame_funname (frame, &funlang, &sym);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -373,7 +373,7 @@ frame_info_to_frame_object (struct frame_info *frame)\n \t}\n       frame_obj->gdbarch = get_frame_arch (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n       return NULL;\n@@ -398,7 +398,7 @@ frapy_older (PyObject *self, PyObject *args)\n \n       prev = get_prev_frame (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -430,7 +430,7 @@ frapy_newer (PyObject *self, PyObject *args)\n \n       next = get_next_frame (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -462,7 +462,7 @@ frapy_find_sal (PyObject *self, PyObject *args)\n       symtab_and_line sal = find_frame_sal (frame);\n       sal_obj = symtab_and_line_to_sal_object (sal);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -521,7 +521,7 @@ frapy_read_var (PyObject *self, PyObject *args)\n \t  var = lookup_sym.symbol;\n \t  block = lookup_sym.block;\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  gdbpy_convert_exception (except);\n \t  return NULL;\n@@ -548,7 +548,7 @@ frapy_read_var (PyObject *self, PyObject *args)\n \n       val = read_var_value (var, block, frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -569,7 +569,7 @@ frapy_select (PyObject *self, PyObject *args)\n \n       select_frame (fi);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -589,7 +589,7 @@ gdbpy_newest_frame (PyObject *self, PyObject *args)\n     {\n       frame = get_current_frame ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -609,7 +609,7 @@ gdbpy_selected_frame (PyObject *self, PyObject *args)\n     {\n       frame = get_selected_frame (\"No frame is currently selected.\");\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "017ea90f61909146112ca7a5497fd2bb7ff6db02",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1085,7 +1085,7 @@ gdbpy_apply_frame_filter (const struct extension_language_defn *extlang,\n     {\n       gdbarch = get_frame_arch (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       /* Let gdb try to print the stack trace.  */\n       return EXT_LANG_BT_NO_FILTERS;\n@@ -1170,7 +1170,7 @@ gdbpy_apply_frame_filter (const struct extension_language_defn *extlang,\n \t  success = py_print_frame (item.get (), flags, args_type, out, 0,\n \t\t\t\t    levels_printed.get ());\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  gdbpy_convert_exception (except);\n \t  success = EXT_LANG_BT_ERROR;"
    },
    {
      "sha": "ec4ff9e13c00ef2212dfd5e077af9ebbb8872788",
      "filename": "gdb/python/py-gdb-readline.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-gdb-readline.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-gdb-readline.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-gdb-readline.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -44,7 +44,7 @@ gdbpy_readline_wrapper (FILE *sys_stdin, FILE *sys_stdout,\n       p = command_line_input (prompt, \"python\");\n     }\n   /* Handle errors by raising Python exceptions.  */\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       /* Detect user interrupt (Ctrl-C).  */\n       if (except.reason == RETURN_QUIT)"
    },
    {
      "sha": "1bbca27bf0b58ac3e39895db92ff4f54281f1778",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -393,7 +393,7 @@ infpy_threads (PyObject *self, PyObject *args)\n     {\n       update_thread_list ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -513,7 +513,7 @@ infpy_read_memory (PyObject *self, PyObject *args, PyObject *kw)\n \n       read_memory (addr, buffer.get (), length);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -574,7 +574,7 @@ infpy_write_memory (PyObject *self, PyObject *args, PyObject *kw)\n     {\n       write_memory_with_notification (addr, buffer, length);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -728,7 +728,7 @@ infpy_search_memory (PyObject *self, PyObject *args, PyObject *kw)\n \t\t\t\t    buffer, pattern_size,\n \t\t\t\t    &found_addr);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -787,7 +787,7 @@ infpy_thread_from_thread_handle (PyObject *self, PyObject *args, PyObject *kw)\n       if (thread_info != NULL)\n \treturn thread_to_thread_object (thread_info).release ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "33ed8d53d706f07080e15ad94416a53ccc7929b8",
      "filename": "gdb/python/py-infthread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-infthread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-infthread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-infthread.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -185,7 +185,7 @@ thpy_switch (PyObject *self, PyObject *args)\n     {\n       switch_to_thread (thread_obj->thread);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "87c6ceaf2a46bbd0cff25fd6d126c9f0af269439",
      "filename": "gdb/python/py-lazy-string.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-lazy-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-lazy-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-lazy-string.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -142,7 +142,7 @@ stpy_convert_to_value (PyObject *self, PyObject *args)\n \t  break;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "aa43d9e7c746963c312cd6e90a93eb53abef73b7",
      "filename": "gdb/python/py-linetable.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-linetable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-linetable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-linetable.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -168,7 +168,7 @@ ltpy_get_pcs_for_line (PyObject *self, PyObject *args)\n     {\n       pcs = find_pcs_for_symtab_line (symtab, py_line, &best_entry);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "199c567a044ffa1b60a401ff8f4f28d60be79c5f",
      "filename": "gdb/python/py-objfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-objfile.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -134,7 +134,7 @@ objfpy_get_build_id (PyObject *self, void *closure)\n     {\n       build_id = build_id_bfd_get (objfile->obfd);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -426,7 +426,7 @@ objfpy_add_separate_debug_file (PyObject *self, PyObject *args, PyObject *kw)\n \n       symbol_file_add_separate (abfd.get (), file_name, 0, obj->objfile);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "afeff581ee4be76731c101fa4c8252627b2650fd",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -733,7 +733,7 @@ parmpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n \t\t\t   set_doc.get (), show_doc.get (),\n \t\t\t   doc.get (), set_list, show_list);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       xfree (cmd_name);\n       Py_DECREF (self);"
    },
    {
      "sha": "7760cab0ae07c4d42897e6345e30a640fec6535a",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -212,7 +212,7 @@ pretty_print_one_value (PyObject *printer, struct value **out_value)\n \t    }\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n     }\n \n@@ -640,7 +640,7 @@ gdbpy_get_varobj_pretty_printer (struct value *value)\n     {\n       value = value_copy (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "4483d036ace5206e311742c8c46242db864347ee",
      "filename": "gdb/python/py-progspace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-progspace.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -391,7 +391,7 @@ pspy_block_for_pc (PyObject *o, PyObject *args)\n       if (cust != NULL && COMPUNIT_OBJFILE (cust) != NULL)\n \tblock = block_for_pc (pc);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -436,7 +436,7 @@ pspy_find_pc_line (PyObject *o, PyObject *args)\n       sal = find_pc_line (pc, 0);\n       result = symtab_and_line_to_sal_object (sal);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "e7153fb6d7bdd6697741acc1c0a428f7cac58953",
      "filename": "gdb/python/py-record-btrace.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-record-btrace.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -212,7 +212,7 @@ recpy_bt_insn_sal (PyObject *self, void *closure)\n     {\n       result = symtab_and_line_to_sal_object (find_pc_line (insn->pc, 0));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -283,7 +283,7 @@ recpy_bt_insn_data (PyObject *self, void *closure)\n       buffer.resize (insn->size);\n       read_memory (insn->pc, buffer.data (), insn->size);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -318,7 +318,7 @@ recpy_bt_insn_decoded (PyObject *self, void *closure)\n     {\n       gdb_print_insn (target_gdbarch (), insn->pc, &strfile, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n       return NULL;\n@@ -795,7 +795,7 @@ recpy_bt_goto (PyObject *self, PyObject *args)\n       else\n \ttarget_goto_record (obj->number);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "d46a03e75ac848065e4796c5b11c59b964cf2c7b",
      "filename": "gdb/python/py-record.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-record.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-record.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-record.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -607,7 +607,7 @@ gdbpy_start_recording (PyObject *self, PyObject *args)\n       record_start (method, format, 0);\n       ret = gdbpy_current_recording (self, args);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n     }\n@@ -641,7 +641,7 @@ gdbpy_stop_recording (PyObject *self, PyObject *args)\n     {\n       record_stop (0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "8605ae71a24d66405b10e05e45c259cda0ece8ba",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -200,7 +200,7 @@ sympy_needs_frame (PyObject *self, void *closure)\n     {\n       result = symbol_read_needs_frame (symbol);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -283,7 +283,7 @@ sympy_value (PyObject *self, PyObject *args)\n \t can happen with nested functions).  */\n       value = read_var_value (symbol, NULL, frame_info);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -391,7 +391,7 @@ gdbpy_lookup_symbol (PyObject *self, PyObject *args, PyObject *kw)\n \t  selected_frame = get_selected_frame (_(\"No frame selected.\"));\n \t  block = get_frame_block (selected_frame, NULL);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDB_PY_HANDLE_EXCEPTION (except);\n \t}\n@@ -402,7 +402,7 @@ gdbpy_lookup_symbol (PyObject *self, PyObject *args, PyObject *kw)\n       symbol = lookup_symbol (name, block, (domain_enum) domain,\n \t\t\t      &is_a_field_of_this).symbol;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -451,7 +451,7 @@ gdbpy_lookup_global_symbol (PyObject *self, PyObject *args, PyObject *kw)\n     {\n       symbol = lookup_global_symbol (name, NULL, (domain_enum) domain).symbol;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "22cc658a8b4eda4585637f593b442bfd91796797",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -316,7 +316,7 @@ typy_fields_items (PyObject *self, enum gdbpy_iter_kind kind)\n     {\n       checked_type = check_typedef (checked_type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -423,7 +423,7 @@ typy_strip_typedefs (PyObject *self, PyObject *args)\n     {\n       type = check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -444,7 +444,7 @@ typy_get_composite (struct type *type)\n \t{\n \t  type = check_typedef (type);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDB_PY_HANDLE_EXCEPTION (except);\n \t}\n@@ -513,7 +513,7 @@ typy_array_1 (PyObject *self, PyObject *args, int is_vector)\n       if (is_vector)\n \tmake_vector_type (array);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -547,7 +547,7 @@ typy_pointer (PyObject *self, PyObject *args)\n     {\n       type = lookup_pointer_type (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -615,7 +615,7 @@ typy_reference (PyObject *self, PyObject *args)\n     {\n       type = lookup_lvalue_reference_type (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -649,7 +649,7 @@ typy_const (PyObject *self, PyObject *args)\n     {\n       type = make_cv_type (1, 0, type, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -667,7 +667,7 @@ typy_volatile (PyObject *self, PyObject *args)\n     {\n       type = make_cv_type (0, 1, type, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -685,7 +685,7 @@ typy_unqualified (PyObject *self, PyObject *args)\n     {\n       type = make_cv_type (0, 0, type, NULL);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -703,7 +703,7 @@ typy_get_sizeof (PyObject *self, void *closure)\n     {\n       check_typedef (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n     }\n \n@@ -723,7 +723,7 @@ typy_get_alignof (PyObject *self, void *closure)\n     {\n       align = type_align (type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       align = 0;\n     }\n@@ -750,7 +750,7 @@ typy_lookup_typename (const char *type_name, const struct block *block)\n \ttype = lookup_typename (python_language, python_gdbarch,\n \t\t\t\ttype_name, block, 0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -804,7 +804,7 @@ typy_lookup_type (struct demangle_component *demangled,\n \t      break;\n \t    }\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDB_PY_HANDLE_EXCEPTION (except);\n \t}\n@@ -846,7 +846,7 @@ typy_legacy_template_argument (struct type *type, const struct block *block,\n       /* Note -- this is not thread-safe.  */\n       info = cp_demangled_name_to_comp (TYPE_NAME (type), &err);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -926,7 +926,7 @@ typy_template_argument (PyObject *self, PyObject *args)\n       if (TYPE_IS_REFERENCE (type))\n \ttype = check_typedef (TYPE_TARGET_TYPE (type));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -958,7 +958,7 @@ typy_template_argument (PyObject *self, PyObject *args)\n     {\n       val = value_of_variable (sym, block);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -976,7 +976,7 @@ typy_str (PyObject *self)\n       LA_PRINT_TYPE (type_object_to_type (self), \"\", &thetype, -1, 0,\n \t\t     &type_print_raw_options);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1010,7 +1010,7 @@ typy_richcompare (PyObject *self, PyObject *other, int op)\n \t{\n \t  result = types_deeply_equal (type1, type2);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  /* If there is a GDB exception, a comparison is not capable\n \t     (or trusted), so exit.  */"
    },
    {
      "sha": "08c3aff928b75d7093bc0eda383998f81880f005",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -150,7 +150,7 @@ pyuw_value_obj_to_pointer (PyObject *pyo_value, CORE_ADDR *addr)\n           rc = 1;\n         }\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n     }\n@@ -215,7 +215,7 @@ unwind_infopy_str (PyObject *self)\n                 value_print (value, &stb, &opts);\n                 stb.puts (\")\");\n               }\n-            catch (const gdb_exception_RETURN_MASK_ALL &except)\n+            catch (const gdb_exception &except)\n               {\n                 GDB_PY_HANDLE_EXCEPTION (except);\n               }\n@@ -349,7 +349,7 @@ pending_framepy_str (PyObject *self)\n       sp_str = core_addr_to_string_nz (get_frame_sp (frame));\n       pc_str = core_addr_to_string_nz (get_frame_pc (frame));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -395,7 +395,7 @@ pending_framepy_read_register (PyObject *self, PyObject *args)\n                       \"Cannot read register %d from frame.\",\n                       regnum);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "9fee881778191af46d5cab3174d63508609eae74",
      "filename": "gdb/python/py-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-utils.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -258,7 +258,7 @@ get_addr_from_python (PyObject *obj, CORE_ADDR *addr)\n \t{\n \t  *addr = value_as_address (value_object_to_value (obj));\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  GDB_PY_SET_HANDLE_EXCEPTION (except);\n \t}"
    },
    {
      "sha": "d3f4de405403dec0fa55fa5d888c6ff6728572cf",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 31,
      "deletions": 31,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -224,7 +224,7 @@ valpy_dereference (PyObject *self, PyObject *args)\n       res_val = value_ind (((value_object *) self)->value);\n       result = value_to_value_object (res_val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -267,7 +267,7 @@ valpy_referenced_value (PyObject *self, PyObject *args)\n \n       result = value_to_value_object (res_val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -290,7 +290,7 @@ valpy_reference_value (PyObject *self, PyObject *args, enum type_code refcode)\n       self_val = ((value_object *) self)->value;\n       result = value_to_value_object (value_ref (self_val, refcode));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -326,7 +326,7 @@ valpy_const_value (PyObject *self, PyObject *args)\n       res_val = make_cv_value (1, 0, self_val);\n       result = value_to_value_object (res_val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -350,7 +350,7 @@ valpy_get_address (PyObject *self, void *closure)\n \t  res_val = value_addr (val_obj->value);\n \t  val_obj->address = value_to_value_object (res_val);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t  val_obj->address = Py_None;\n \t  Py_INCREF (Py_None);\n@@ -428,7 +428,7 @@ valpy_get_dynamic_type (PyObject *self, void *closure)\n \t  type = NULL;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -534,7 +534,7 @@ valpy_lazy_string (PyObject *self, PyObject *args, PyObject *kw)\n       str_obj = gdbpy_create_lazy_string_object (addr, length, user_encoding,\n \t\t\t\t\t\t type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -569,7 +569,7 @@ valpy_string (PyObject *self, PyObject *args, PyObject *kw)\n     {\n       LA_GET_STRING (value, &buffer, &length, &char_type, &la_encoding);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -730,7 +730,7 @@ valpy_format_string (PyObject *self, PyObject *args, PyObject *kw)\n       common_val_print (((value_object *) self)->value, &stb, 0,\n \t\t\t&opts, python_language);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -775,7 +775,7 @@ valpy_do_cast (PyObject *self, PyObject *args, enum exp_opcode op)\n \n       result = value_to_value_object (res_val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -853,7 +853,7 @@ value_has_field (struct value *v, PyObject *field)\n       else\n \thas_field = 0;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_SET_HANDLE_EXCEPTION (except);\n     }\n@@ -1031,7 +1031,7 @@ valpy_getitem (PyObject *self, PyObject *key)\n       if (res_val)\n \tresult = value_to_value_object (res_val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -1064,7 +1064,7 @@ valpy_call (PyObject *self, PyObject *args, PyObject *keywords)\n     {\n       ftype = check_typedef (value_type (function));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1111,7 +1111,7 @@ valpy_call (PyObject *self, PyObject *args, PyObject *keywords)\n \t\t\t\t gdb::make_array_view (vargs, args_count));\n       result = value_to_value_object (return_value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1136,7 +1136,7 @@ valpy_str (PyObject *self)\n       common_val_print (((value_object *) self)->value, &stb, 0,\n \t\t\t&opts, python_language);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1155,7 +1155,7 @@ valpy_get_is_optimized_out (PyObject *self, void *closure)\n     {\n       opt = value_optimized_out (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1177,7 +1177,7 @@ valpy_get_is_lazy (PyObject *self, void *closure)\n     {\n       opt = value_lazy (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1199,7 +1199,7 @@ valpy_fetch_lazy (PyObject *self, PyObject *args)\n       if (value_lazy (value))\n \tvalue_fetch_lazy (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1370,7 +1370,7 @@ valpy_binop (enum valpy_opcode opcode, PyObject *self, PyObject *other)\n     {\n       result = valpy_binop_throw (opcode, self, other);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1438,7 +1438,7 @@ valpy_negative (PyObject *self)\n       val = value_neg (((value_object *) self)->value);\n       result = value_to_value_object (val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1465,7 +1465,7 @@ valpy_absolute (PyObject *self)\n       if (value_less (value, value_zero (value_type (value), not_lval)))\n \tisabs = 0;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1498,7 +1498,7 @@ valpy_nonzero (PyObject *self)\n \t/* All other values are True.  */\n \tnonzero = 1;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       except = ex;\n     }\n@@ -1521,7 +1521,7 @@ valpy_invert (PyObject *self)\n     {\n       val = value_complement (((value_object *) self)->value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1648,7 +1648,7 @@ valpy_richcompare (PyObject *self, PyObject *other, int op)\n     {\n       result = valpy_richcompare_throw (self, other, op);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1686,7 +1686,7 @@ valpy_int (PyObject *self)\n \n       l = value_as_long (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1722,7 +1722,7 @@ valpy_long (PyObject *self)\n \n       l = value_as_long (value);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1757,7 +1757,7 @@ valpy_float (PyObject *self)\n       else\n \terror (_(\"Cannot convert value to float.\"));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1900,7 +1900,7 @@ convert_value_from_python (PyObject *obj)\n \t\t      PyString_AsString (PyObject_Str (obj)));\n #endif\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       gdbpy_convert_exception (except);\n       return NULL;\n@@ -1923,7 +1923,7 @@ gdbpy_history (PyObject *self, PyObject *args)\n     {\n       res_val = access_value_history (i);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1952,7 +1952,7 @@ gdbpy_convenience_variable (PyObject *self, PyObject *args)\n \t    res_val = NULL;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1998,7 +1998,7 @@ gdbpy_set_convenience_variable (PyObject *self, PyObject *args)\n \t  set_internalvar (var, value);\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }"
    },
    {
      "sha": "4dad8ec10d19f47b820cfc6d3ebd948a8f8ac51d",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -501,7 +501,7 @@ gdbpy_parameter (PyObject *self, PyObject *args)\n     {\n       found = lookup_cmd_composition (newarg.c_str (), &alias, &prefix, &cmd);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       GDB_PY_HANDLE_EXCEPTION (ex);\n     }\n@@ -614,7 +614,7 @@ execute_gdb_command (PyObject *self, PyObject *args, PyObject *kw)\n       /* Do any commands attached to breakpoint we stopped at.  */\n       bpstat_do_actions ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -842,7 +842,7 @@ gdbpy_decode_line (PyObject *self, PyObject *args)\n \t  sals = def_sal;\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       /* We know this will always throw.  */\n       gdbpy_convert_exception (ex);\n@@ -900,7 +900,7 @@ gdbpy_parse_and_eval (PyObject *self, PyObject *args)\n       gdbpy_allow_threads allow_threads;\n       result = parse_and_eval (expr_str);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1150,7 +1150,7 @@ gdbpy_write (PyObject *self, PyObject *args, PyObject *kw)\n           fprintf_filtered (gdb_stdout, \"%s\", arg);\n         }\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n@@ -1223,7 +1223,7 @@ gdbpy_print_stack (void)\n \t{\n \t  begin_line ();\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t}\n     }\n@@ -1254,7 +1254,7 @@ gdbpy_print_stack (void)\n \t    fprintf_filtered (gdb_stderr, \"Python Exception %s %s: \\n\",\n \t\t\t      type.get (), msg.get ());\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &except)\n+      catch (const gdb_exception &except)\n \t{\n \t}\n     }"
    },
    {
      "sha": "f5a5306fe1232962d7a61c3ae294de56c877c06b",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -286,7 +286,7 @@ record_btrace_enable_warn (struct thread_info *tp)\n     {\n       btrace_enable (tp, &record_btrace_conf);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &error)\n+  catch (const gdb_exception_error &error)\n     {\n       warning (\"%s\", error.what ());\n     }\n@@ -1482,7 +1482,7 @@ record_btrace_target::insert_breakpoint (struct gdbarch *gdbarch,\n     {\n       ret = this->beneath ()->insert_breakpoint (gdbarch, bp_tgt);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       replay_memory_access = old;\n       throw_exception (except);\n@@ -1512,7 +1512,7 @@ record_btrace_target::remove_breakpoint (struct gdbarch *gdbarch,\n     {\n       ret = this->beneath ()->remove_breakpoint (gdbarch, bp_tgt, reason);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       replay_memory_access = old;\n       throw_exception (except);\n@@ -1989,7 +1989,7 @@ get_thread_current_frame_id (struct thread_info *tp)\n     {\n       id = get_frame_id (get_current_frame ());\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       /* Restore the previous execution state.  */\n       set_executing (inferior_ptid, executing);\n@@ -2068,7 +2068,7 @@ record_btrace_start_replaying (struct thread_info *tp)\n       if (upd_step_stack_frame_id)\n \ttp->control.step_stack_frame_id = frame_id;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n       xfree (btinfo->replay);\n       btinfo->replay = NULL;\n@@ -2893,7 +2893,7 @@ cmd_record_btrace_bts_start (const char *args, int from_tty)\n     {\n       execute_command (\"target record-btrace\", from_tty);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       record_btrace_conf.format = BTRACE_FORMAT_NONE;\n       throw_exception (exception);\n@@ -2914,7 +2914,7 @@ cmd_record_btrace_pt_start (const char *args, int from_tty)\n     {\n       execute_command (\"target record-btrace\", from_tty);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       record_btrace_conf.format = BTRACE_FORMAT_NONE;\n       throw_exception (exception);\n@@ -2935,15 +2935,15 @@ cmd_record_btrace_start (const char *args, int from_tty)\n     {\n       execute_command (\"target record-btrace\", from_tty);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       record_btrace_conf.format = BTRACE_FORMAT_BTS;\n \n       try\n \t{\n \t  execute_command (\"target record-btrace\", from_tty);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  record_btrace_conf.format = BTRACE_FORMAT_NONE;\n \t  throw_exception (ex);"
    },
    {
      "sha": "57d7bb0e11432644bc04de5f457b9f61e048838b",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -761,7 +761,7 @@ record_full_message (struct regcache *regcache, enum gdb_signal signal)\n       if (ret < 0)\n \terror (_(\"Process record: failed to record execution log.\"));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       record_full_list_release (record_full_arch_list_tail);\n       throw_exception (ex);\n@@ -785,7 +785,7 @@ record_full_message_wrapper_safe (struct regcache *regcache,\n     {\n       record_full_message (regcache, signal);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n       return false;\n@@ -1434,7 +1434,7 @@ record_full_wait_1 (struct target_ops *ops,\n \t  else\n \t    status->value.sig = GDB_SIGNAL_TRAP;\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  if (execution_direction == EXEC_REVERSE)\n \t    {\n@@ -2473,7 +2473,7 @@ record_full_restore (void)\n \t  record_full_arch_list_add (rec);\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       record_full_list_release (record_full_arch_list_tail);\n       throw_exception (ex);"
    },
    {
      "sha": "2f7ecf366c3e07beb4c6a08ee8b1cbb4ccb2cc4f",
      "filename": "gdb/remote-fileio.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/remote-fileio.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/remote-fileio.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-fileio.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1189,7 +1189,7 @@ remote_fileio_request (remote_target *remote, char *buf, int ctrlc_pending_p)\n \t{\n \t  do_remote_fileio_request (remote, buf);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  if (ex.reason == RETURN_QUIT)\n \t    remote_fileio_reply (remote, -1, FILEIO_EINTR);"
    },
    {
      "sha": "318459405ce24aef1e84f256f32fca6f1ac90c2b",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1151,7 +1151,7 @@ remote_target::remote_get_noisy_reply ()\n \t      gdbarch_relocate_instruction (target_gdbarch (), &to, from);\n \t      relocated = 1;\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\t  catch (const gdb_exception &ex)\n \t    {\n \t      if (ex.error == MEMORY_ERROR)\n \t\t{\n@@ -5605,7 +5605,7 @@ remote_target::open_1 (const char *name, int from_tty, int extended_p)\n       {\n \tremote->start_remote (from_tty, extended_p);\n       }\n-    catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+    catch (const gdb_exception &ex)\n       {\n \t/* Pop the partially set up target - unless something else did\n \t   already before throwing the exception.  */\n@@ -9768,7 +9768,7 @@ remote_target::remote_kill_k ()\n     {\n       putpkt (\"k\");\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error == TARGET_CLOSE_ERROR)\n \t{\n@@ -13136,7 +13136,7 @@ remote_target::get_trace_status (struct trace_status *ts)\n     {\n       p = remote_get_noisy_reply ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != TARGET_CLOSE_ERROR)\n \t{\n@@ -13790,7 +13790,7 @@ remote_target::enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n     {\n       btrace_read_config (&tinfo->conf);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &err)\n+  catch (const gdb_exception_error &err)\n     {\n       if (err.message != NULL)\n \twarning (\"%s\", err.what ());"
    },
    {
      "sha": "bd09ae6fdfd31dc837f9b3d4ed6b5b587762c90a",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -656,7 +656,7 @@ riscv_print_one_register_info (struct gdbarch *gdbarch,\n       val = value_of_register (regnum, frame);\n       regtype = value_type (val);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       /* Handle failure to read a register without interrupting the entire\n          'info registers' flow.  */\n@@ -2806,7 +2806,7 @@ riscv_frame_this_id (struct frame_info *this_frame,\n       cache = riscv_frame_cache (this_frame, prologue_cache);\n       *this_id = cache->this_id;\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       /* Ignore errors, this leaves the frame id as the predefined outer\n          frame id which terminates the backtrace at this point.  */"
    },
    {
      "sha": "e99865682fd28e992c675f70e59c22b0768da8b9",
      "filename": "gdb/rs6000-aix-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rs6000-aix-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rs6000-aix-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-aix-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -674,7 +674,7 @@ rs6000_convert_from_func_ptr_addr (struct gdbarch *gdbarch,\n         {\n           pc = read_memory_unsigned_integer (addr, tdep->wordsize, byte_order);\n         }\n-      catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+      catch (const gdb_exception_error &e)\n         {\n           /* An error occured during reading.  Probably a memory error\n              due to the section not being loaded yet.  This address"
    },
    {
      "sha": "7a59e119f4fa60cd019de0f0b5f9fc8798aa68b6",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -3468,7 +3468,7 @@ rs6000_frame_cache (struct frame_info *this_frame, void **this_cache)\n       cache->base = get_frame_register_unsigned\n \t(this_frame, gdbarch_sp_regnum (gdbarch));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);\n@@ -3697,7 +3697,7 @@ rs6000_epilogue_frame_cache (struct frame_info *this_frame, void **this_cache)\n       trad_frame_set_value (cache->saved_regs,\n \t\t\t    gdbarch_pc_regnum (gdbarch), lr);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);"
    },
    {
      "sha": "2be2532eb8457cb03cae1ea802d2f0ca2a6734ee",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2621,7 +2621,7 @@ rust_lex_exception_test (rust_parser *parser, const char *input,\n       rust_lex_test_one (parser, input, DECIMAL_INTEGER);\n       SELF_CHECK (0);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       SELF_CHECK (strcmp (except.what (), err) == 0);\n     }"
    },
    {
      "sha": "c3857eed2a2e140166f11b20c494949644541c5f",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1748,7 +1748,7 @@ tuple structs, and tuple-like enum variants\"));\n \t\tresult = value_struct_elt (&lhs, NULL, field_name,\n \t\t\t\t\t   NULL, \"structure\");\n \t      }\n-\t    catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t    catch (const gdb_exception_error &except)\n \t      {\n \t\terror (_(\"Could not find field %s of struct variant %s::%s\"),\n \t\t       field_name, TYPE_NAME (outer_type),"
    },
    {
      "sha": "a08738881ff113b9dedb0a36e92dc6c0ee49e782",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -2554,7 +2554,7 @@ s390_frame_unwind_cache (struct frame_info *this_frame,\n       if (!s390_prologue_frame_unwind_cache (this_frame, info))\n \ts390_backchain_frame_unwind_cache (this_frame, info);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (ex.error != NOT_AVAILABLE_ERROR)\n \tthrow_exception (ex);"
    },
    {
      "sha": "38cd6248d047f31585a3fd90b9e48ea75d6fad55",
      "filename": "gdb/selftest-arch.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/selftest-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/selftest-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/selftest-arch.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -72,7 +72,7 @@ struct gdbarch_selftest : public selftest\n \n \t    function (gdbarch);\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+\tcatch (const gdb_exception_error &ex)\n \t  {\n \t    pass = false;\n \t    exception_fprintf (gdb_stderr, ex,"
    },
    {
      "sha": "3053c1898023d0ee30b944404f86acf24b54e32f",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -834,7 +834,7 @@ enable_break (void)\n \t{\n \t  tmp_bfd = solib_bfd_open (buf);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t}\n "
    },
    {
      "sha": "fdd4b3453057023755d155f11fa8f084dc36bf93",
      "filename": "gdb/solib-frv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-frv.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -565,7 +565,7 @@ enable_break2 (void)\n         {\n           tmp_bfd = solib_bfd_open (buf);\n         }\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t}\n "
    },
    {
      "sha": "94d8cadabcb304842ab8d9b5105d370868169235",
      "filename": "gdb/solib-spu.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-spu.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -133,7 +133,7 @@ append_ocl_sos (struct so_list **link_ptr)\n \t\t  link_ptr = &newobj->next;\n \t\t}\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\t  catch (const gdb_exception &ex)\n \t    {\n \t      /* Ignore memory errors.  */\n \t      switch (ex.error)"
    },
    {
      "sha": "cf83196721f749d49ba55e01fed778441e44bd8b",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -874,7 +874,7 @@ solib_svr4_r_map (struct svr4_info *info)\n       addr = read_memory_typed_address (info->debug_base + lmo->r_map_offset,\n                                         ptr_type);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }\n@@ -913,7 +913,7 @@ solib_svr4_r_ldsomap (struct svr4_info *info)\n \t= read_memory_unsigned_integer (info->debug_base + lmo->r_version_offset,\n \t\t\t\t\tlmo->r_version_size, byte_order);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }\n@@ -1734,7 +1734,7 @@ solib_event_probe_action (struct probe_and_action *pa)\n     {\n       probe_argc = pa->prob->get_argument_count (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       exception_print (gdb_stderr, ex);\n       probe_argc = 0;\n@@ -1897,7 +1897,7 @@ svr4_handle_solib_event (void)\n       {\n \tval = pa->prob->evaluate_argument (1, frame);\n       }\n-    catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+    catch (const gdb_exception_error &ex)\n       {\n \texception_print (gdb_stderr, ex);\n \tval = NULL;\n@@ -1928,7 +1928,7 @@ svr4_handle_solib_event (void)\n \t  {\n \t    val = pa->prob->evaluate_argument (2, frame);\n \t  }\n-\tcatch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+\tcatch (const gdb_exception_error &ex)\n \t  {\n \t    exception_print (gdb_stderr, ex);\n \t    return;\n@@ -2278,7 +2278,7 @@ enable_break (struct svr4_info *info, int from_tty)\n         {\n \t  tmp_bfd = solib_bfd_open (interp_name);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t}\n "
    },
    {
      "sha": "25555af29394dba5f55e1d4440ffe902c56aac94",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -700,7 +700,7 @@ solib_read_symbols (struct so_list *so, symfile_add_flags flags)\n \n \t  so->symbols_loaded = 1;\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+      catch (const gdb_exception_error &e)\n \t{\n \t  exception_fprintf (gdb_stderr, e, _(\"Error while reading shared\"\n \t\t\t\t\t      \" library symbols for %s:\\n\"),\n@@ -751,7 +751,7 @@ update_solib_list (int from_tty)\n \t    {\n \t      ops->open_symbol_file_object (from_tty);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+\t  catch (const gdb_exception &ex)\n \t    {\n \t      exception_fprintf (gdb_stderr, ex,\n \t\t\t\t \"Error reading attached \"\n@@ -877,7 +877,7 @@ update_solib_list (int from_tty)\n \t\t}\n \t    }\n \n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\t  catch (const gdb_exception_error &e)\n \t    {\n \t      exception_fprintf (gdb_stderr, e,\n \t\t\t\t _(\"Error while mapping shared \"\n@@ -1335,7 +1335,7 @@ reload_shared_libraries_1 (int from_tty)\n \t      solib_map_sections (so);\n \t    }\n \n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\t  catch (const gdb_exception_error &e)\n \t    {\n \t      exception_fprintf (gdb_stderr, e,\n \t\t\t\t _(\"Error while mapping \""
    },
    {
      "sha": "158db97ec619328b54d6e38a57ba7ddaf5844e35",
      "filename": "gdb/sparc64-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/sparc64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/sparc64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-linux-tdep.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -138,7 +138,7 @@ sparc64_linux_handle_segmentation_fault (struct gdbarch *gdbarch,\n       if (si_code >= SEGV_ACCADI && si_code <= SEGV_ADIPERR)\n         addr = parse_and_eval_long (\"$_siginfo._sifields._sigfault.si_addr\");\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &exception)\n+  catch (const gdb_exception &exception)\n     {\n       return;\n     }"
    },
    {
      "sha": "c1a9d9dfb09579fab5dee79f309917a703408d6d",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -182,7 +182,7 @@ print_stack_frame (struct frame_info *frame, int print_level,\n       if (set_current_sal)\n \tset_current_sal_from_frame (frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+  catch (const gdb_exception_error &e)\n     {\n     }\n }\n@@ -295,7 +295,7 @@ print_frame_arg (const struct frame_arg *arg)\n \n \t      common_val_print (arg->val, &stb, 2, &opts, language);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      stb.printf (_(\"<error reading variable: %s>\"),\n \t\t\t  except.what ());\n@@ -322,7 +322,7 @@ read_frame_local (struct symbol *sym, struct frame_info *frame,\n     {\n       argp->val = read_var_value (sym, NULL, frame);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       argp->error = xstrdup (except.what ());\n     }\n@@ -347,7 +347,7 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t{\n \t  val = read_var_value (sym, NULL, frame);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  val_error = (char *) alloca (except.message->size () + 1);\n \t  strcpy (val_error, except.what ());\n@@ -367,7 +367,7 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t  ops = SYMBOL_COMPUTED_OPS (sym);\n \t  entryval = ops->read_variable_at_entry (sym, frame);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  if (except.error != NO_ENTRY_VALUE_ERROR)\n \t    {\n@@ -423,7 +423,7 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t\t\t\t\t\tTYPE_LENGTH (type_deref)))\n \t\t\tval_equal = 1;\n \t\t    }\n-\t\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t\t  catch (const gdb_exception_error &except)\n \t\t    {\n \t\t      /* If the dereferenced content could not be\n \t\t\t fetched do not display anything.  */\n@@ -471,7 +471,7 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t    {\n \t      val = read_var_value (sym, NULL, frame);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      val_error = (char *) alloca (except.message->size () + 1);\n \t      strcpy (val_error, except.what ());\n@@ -758,7 +758,7 @@ do_gdb_disassembly (struct gdbarch *gdbarch,\n \t\t       DISASSEMBLY_RAW_INSN, how_many,\n \t\t       low, high);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &exception)\n+  catch (const gdb_exception_error &exception)\n     {\n       /* If an exception was thrown while doing the disassembly, print\n \t the error message, to give the user a clue of what happened.  */\n@@ -1200,7 +1200,7 @@ print_frame (struct frame_info *frame, int print_level,\n \t    {\n \t      print_frame_args (func, frame, numargs, gdb_stdout);\n \t    }\n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &e)\n+\t  catch (const gdb_exception_error &e)\n \t    {\n \t    }\n \n@@ -1389,7 +1389,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t  caller_pc = frame_unwind_caller_pc (fi);\n \t  caller_pc_p = 1;\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  switch (ex.error)\n \t    {\n@@ -2704,7 +2704,7 @@ frame_apply_command_count (const char *which_command,\n \t      printf_filtered (\"%s\", cmd_result.c_str ());\n \t    }\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  fi = get_selected_frame (_(\"frame apply \"\n \t\t\t\t     \"unable to get selected frame.\"));"
    },
    {
      "sha": "51a75541e52d22514c512b0f652a8e4d4a44c436",
      "filename": "gdb/symfile-mem.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/symfile-mem.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/symfile-mem.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-mem.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -198,7 +198,7 @@ add_vsyscall_page (struct target_ops *target, int from_tty)\n \t\t\t\t       name,\n \t\t\t\t       0 /* from_tty */);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  exception_print (gdb_stderr, ex);\n \t}"
    },
    {
      "sha": "7666de390cd58e02123ba756b6ea06d3a0a83569",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -353,7 +353,7 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n \t\t{\n \t\t  print_symbol (gdbarch, sym, depth + 1, outfile);\n \t\t}\n-\t      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+\t      catch (const gdb_exception_error &ex)\n \t\t{\n \t\t  exception_fprintf (gdb_stderr, ex,\n \t\t\t\t     \"Error printing symbol:\\n\");"
    },
    {
      "sha": "2234400211384b09cb6136ff2efee8679fac50fa",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -720,7 +720,7 @@ target_translate_tls_address (struct objfile *objfile, CORE_ADDR offset)\n \t}\n       /* If an error occurred, print TLS related messages here.  Otherwise,\n          throw the error to some higher catcher.  */\n-      catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+      catch (const gdb_exception &ex)\n \t{\n \t  int objfile_is_library = (objfile->flags & OBJF_SHARED);\n "
    },
    {
      "sha": "010cd24e7e18b8af14f96eb8fefb85e5684e9cc8",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1471,7 +1471,7 @@ thr_try_catch_cmd (thread_info *thr, const char *cmd, int from_tty,\n \t  printf_filtered (\"%s\", cmd_result.c_str ());\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       if (!flags.silent)\n \t{"
    },
    {
      "sha": "60ca74da2530c836d66d29abe6e22702e4c1d2f6",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1626,7 +1626,7 @@ quit_force (int *exit_arg, int from_tty)\n       disconnect_tracing ();\n       iterate_over_inferiors (kill_or_detach, &qt);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }\n@@ -1637,7 +1637,7 @@ quit_force (int *exit_arg, int from_tty)\n     {\n       pop_all_targets ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }\n@@ -1665,7 +1665,7 @@ quit_force (int *exit_arg, int from_tty)\n \t    gdb_safe_append_history ();\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }\n@@ -1681,7 +1681,7 @@ quit_force (int *exit_arg, int from_tty)\n     {\n       do_final_cleanups ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }"
    },
    {
      "sha": "72d2f70eaf98b5f5cb8211dde5876c409313150b",
      "filename": "gdb/tracefile-tfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/tracefile-tfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/tracefile-tfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracefile-tfile.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -547,7 +547,7 @@ tfile_target_open (const char *arg, int from_tty)\n       if (trace_regblock_size == 0)\n \terror (_(\"No register block size recorded in trace file\"));\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       /* Remove the partially set up target.  */\n       unpush_target (&tfile_ops);"
    },
    {
      "sha": "ce8de72f28dafeeb3d62cf75b0fa0a897212ec9f",
      "filename": "gdb/tui/tui.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/tui/tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/tui/tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -110,7 +110,7 @@ tui_rl_switch_mode (int notused1, int notused2)\n \t  tui_enable ();\n \t}\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n "
    },
    {
      "sha": "02c045143039f0ddb91628c053a361ae5b351344",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -420,7 +420,7 @@ type_to_string (struct type *type)\n       type_print (type, \"\", &stb, -1);\n       return std::move (stb.string ());\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &except)\n+  catch (const gdb_exception &except)\n     {\n     }\n "
    },
    {
      "sha": "99b98bf8cd1b6007a256bcae1e0e3a050adb3a53",
      "filename": "gdb/unittests/cli-utils-selftests.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/unittests/cli-utils-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/unittests/cli-utils-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/cli-utils-selftests.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -83,7 +83,7 @@ test_number_or_range_parser ()\n \tminus_one.get_number ();\n \tSELF_CHECK (false);\n       }\n-    catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+    catch (const gdb_exception_error &ex)\n       {\n \tSELF_CHECK (ex.reason == RETURN_ERROR);\n \tSELF_CHECK (ex.error == GENERIC_ERROR);\n@@ -219,7 +219,7 @@ test_parse_flags_qcs ()\n \t\t\t\t&flags);\n \tSELF_CHECK (false);\n       }\n-    catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+    catch (const gdb_exception_error &ex)\n       {\n \tSELF_CHECK (ex.reason == RETURN_ERROR);\n \tSELF_CHECK (ex.error == GENERIC_ERROR);"
    },
    {
      "sha": "a4beb66e2c9dc342e3c06c9ccd12951d920d11e0",
      "filename": "gdb/unittests/parse-connection-spec-selftests.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/unittests/parse-connection-spec-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/unittests/parse-connection-spec-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/parse-connection-spec-selftests.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -216,7 +216,7 @@ test_conn (const parse_conn_test &c)\n     {\n       ret = parse_connection_spec (c.connspec, &hint);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+  catch (const gdb_exception_error &ex)\n     {\n       /* If we caught an error, we should check if this connection\n \t spec was supposed to fail.  */"
    },
    {
      "sha": "0de4067c6b25e3ab17e7738f9ab42f213872498d",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -3625,7 +3625,7 @@ value_rtti_indirect_type (struct value *v, int *full,\n         {\n \t  target = value_ind (v);\n         }\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  if (except.error == MEMORY_ERROR)\n \t    {\n@@ -3777,7 +3777,7 @@ value_of_this_silent (const struct language_defn *lang)\n     {\n       ret = value_of_this (lang);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n     }\n "
    },
    {
      "sha": "b02ebf6c272de821c64cb235d903fa6c4d2fe670",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1060,7 +1060,7 @@ val_print (struct type *type, LONGEST embedded_offset,\n \t\t\t      stream, recurse, val,\n \t\t\t      &local_opts);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       fprintf_filtered (stream, _(\"<error reading variable>\"));\n     }"
    },
    {
      "sha": "dad9f07b68eb030b0ec8136c0dda9bfe632b518c",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -1409,7 +1409,7 @@ value_optimized_out (struct value *value)\n \t{\n \t  value_fetch_lazy (value);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  /* Fall back to checking value->optimized_out.  */\n \t}\n@@ -2541,7 +2541,7 @@ show_convenience (const char *ignore, int from_tty)\n \t  val = value_of_internalvar (gdbarch, var);\n \t  value_print (val, gdb_stdout, &opts);\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &ex)\n+      catch (const gdb_exception_error &ex)\n \t{\n \t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.what ());\n \t}"
    },
    {
      "sha": "8ec8298a12c6d256df7bcf8f59fe18886f22a5a4",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -319,7 +319,7 @@ varobj_create (const char *objname,\n \t  var->root->exp = parse_exp_1 (&p, pc, block, 0, &tracker);\n \t}\n \n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  return NULL;\n \t}\n@@ -367,7 +367,7 @@ varobj_create (const char *objname,\n \t{\n \t  value = evaluate_expression (var->root->exp.get ());\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t  /* Error getting the value.  Try to at least get the\n \t     right type.  */\n@@ -1037,7 +1037,7 @@ varobj_set_value (struct varobj *var, const char *expression)\n       value = evaluate_expression (exp.get ());\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       /* We cannot proceed without a valid expression.  */\n       return false;\n@@ -1065,7 +1065,7 @@ varobj_set_value (struct varobj *var, const char *expression)\n       val = value_assign (var->value.get (), value);\n     }\n \n-  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+  catch (const gdb_exception_error &except)\n     {\n       return false;\n     }\n@@ -1312,7 +1312,7 @@ install_new_value (struct varobj *var, struct value *value, bool initial)\n \t      value_fetch_lazy (value);\n \t    }\n \n-\t  catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+\t  catch (const gdb_exception_error &except)\n \t    {\n \t      /* Set the value to NULL, so that for the next -var-update,\n \t\t we don't try to compare the new value with this value,\n@@ -2138,7 +2138,7 @@ value_of_root_1 (struct varobj **var_handle)\n \t{\n \t  new_val = evaluate_expression (var->root->exp.get ());\n \t}\n-      catch (const gdb_exception_RETURN_MASK_ERROR &except)\n+      catch (const gdb_exception_error &except)\n \t{\n \t}\n     }"
    },
    {
      "sha": "50094187bd111f90f285a3431a755a0a9353fcb7",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -947,7 +947,7 @@ catch_errors (void (*func) ())\n     {\n       func ();\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       exception_print (gdb_stderr, ex);\n     }"
    },
    {
      "sha": "fe85358fa263adfee386b63d7950d6cb77d46f93",
      "filename": "gdb/x86-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/x86-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/x86-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -221,7 +221,7 @@ x86_linux_nat_target::enable_btrace (ptid_t ptid,\n     {\n       tinfo = linux_enable_btrace (ptid, conf);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ERROR &exception)\n+  catch (const gdb_exception_error &exception)\n     {\n       error (_(\"Could not enable branch tracing for %s: %s\"),\n \t     target_pid_to_str (ptid).c_str (), exception.what ());"
    },
    {
      "sha": "4145878bf3ae63bff1e15cf5d17b6b0bc2ab1037",
      "filename": "gdb/xml-support.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/xml-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/230d2906b9d1d009b22fd526181bf43e1084ed59/gdb/xml-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.c?ref=230d2906b9d1d009b22fd526181bf43e1084ed59",
      "patch": "@@ -387,7 +387,7 @@ gdb_xml_start_element_wrapper (void *data, const XML_Char *name,\n     {\n       parser->start_element (name, attrs);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       parser->set_error (ex);\n     }\n@@ -459,7 +459,7 @@ gdb_xml_end_element_wrapper (void *data, const XML_Char *name)\n     {\n       parser->end_element (name);\n     }\n-  catch (const gdb_exception_RETURN_MASK_ALL &ex)\n+  catch (const gdb_exception &ex)\n     {\n       parser->set_error (ex);\n     }"
    }
  ]
}