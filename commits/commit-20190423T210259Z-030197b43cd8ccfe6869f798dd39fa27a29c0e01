{
  "sha": "030197b43cd8ccfe6869f798dd39fa27a29c0e01",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDMwMTk3YjQzY2Q4Y2NmZTY4NjlmNzk4ZGQzOWZhMjdhMjljMGUwMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-12T13:25:32Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:02:59Z"
    },
    "message": "gdb/arm: Use type_align instead of arm_type_align\n\nReplaces use of arm_type_align with common type_align function.\n\nDoing this fixes a bug in arm_type_align where static fields are\nconsidered as part of the alignment calculation of a struct, which\nresults in arguments passed on the stack being misaligned, this bug\nwas causing a failure in gdb.cp/many-args.exp.\n\nPart of the old arm_type_align is retained and used as the gdbarch\ntype align callback in order to correctly align vectors.\n\ngdb/ChangeLog:\n\n\t* arm-tdep.c (arm_type_align): Only handle vector override case.\n\t(arm_push_dummy_call): Use type_align.\n\t(arm_gdbarch_init): Register arm_type_align gdbarch function.",
    "tree": {
      "sha": "e5557f32d55efcda6dba06c458faadaaad83d9d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e5557f32d55efcda6dba06c458faadaaad83d9d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/030197b43cd8ccfe6869f798dd39fa27a29c0e01",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/030197b43cd8ccfe6869f798dd39fa27a29c0e01",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/030197b43cd8ccfe6869f798dd39fa27a29c0e01",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/030197b43cd8ccfe6869f798dd39fa27a29c0e01/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b907456c3eb8a08f6b211f66abb448df962749e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b907456c3eb8a08f6b211f66abb448df962749e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b907456c3eb8a08f6b211f66abb448df962749e1"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 23,
    "deletions": 51
  },
  "files": [
    {
      "sha": "99f67d8943258cb1b4bbddb7d7db646b9de57fb7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/030197b43cd8ccfe6869f798dd39fa27a29c0e01/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/030197b43cd8ccfe6869f798dd39fa27a29c0e01/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=030197b43cd8ccfe6869f798dd39fa27a29c0e01",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* arm-tdep.c (arm_type_align): Only handle vector override case.\n+\t(arm_push_dummy_call): Use type_align.\n+\t(arm_gdbarch_init): Register arm_type_align gdbarch function.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* aarch64-tdep.c (aarch64_type_align): Only handle vector override"
    },
    {
      "sha": "742bfa570691be025d46f86a20f975ce7f15fd15",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 17,
      "deletions": 51,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/030197b43cd8ccfe6869f798dd39fa27a29c0e01/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/030197b43cd8ccfe6869f798dd39fa27a29c0e01/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=030197b43cd8ccfe6869f798dd39fa27a29c0e01",
      "patch": "@@ -3314,62 +3314,25 @@ pop_stack_item (struct stack_item *si)\n   return si;\n }\n \n+/* Implement the gdbarch type alignment method, overrides the generic\n+   alignment algorithm for anything that is arm specific.  */\n \n-/* Return the alignment (in bytes) of the given type.  */\n-\n-static int\n-arm_type_align (struct type *t)\n+static ULONGEST\n+arm_type_align (gdbarch *gdbarch, struct type *t)\n {\n-  int n;\n-  int align;\n-  int falign;\n-\n   t = check_typedef (t);\n-  switch (TYPE_CODE (t))\n+  if (TYPE_CODE (t) == TYPE_CODE_ARRAY && TYPE_VECTOR (t))\n     {\n-    default:\n-      /* Should never happen.  */\n-      internal_error (__FILE__, __LINE__, _(\"unknown type alignment\"));\n-      return 4;\n-\n-    case TYPE_CODE_PTR:\n-    case TYPE_CODE_ENUM:\n-    case TYPE_CODE_INT:\n-    case TYPE_CODE_FLT:\n-    case TYPE_CODE_SET:\n-    case TYPE_CODE_RANGE:\n-    case TYPE_CODE_REF:\n-    case TYPE_CODE_RVALUE_REF:\n-    case TYPE_CODE_CHAR:\n-    case TYPE_CODE_BOOL:\n-      return TYPE_LENGTH (t);\n-\n-    case TYPE_CODE_ARRAY:\n-      if (TYPE_VECTOR (t))\n-\t{\n-\t  /* Use the natural alignment for vector types (the same for\n-\t     scalar type), but the maximum alignment is 64-bit.  */\n-\t  if (TYPE_LENGTH (t) > 8)\n-\t    return 8;\n-\t  else\n-\t    return TYPE_LENGTH (t);\n-\t}\n+      /* Use the natural alignment for vector types (the same for\n+\t scalar type), but the maximum alignment is 64-bit.  */\n+      if (TYPE_LENGTH (t) > 8)\n+\treturn 8;\n       else\n-\treturn arm_type_align (TYPE_TARGET_TYPE (t));\n-    case TYPE_CODE_COMPLEX:\n-      return arm_type_align (TYPE_TARGET_TYPE (t));\n-\n-    case TYPE_CODE_STRUCT:\n-    case TYPE_CODE_UNION:\n-      align = 1;\n-      for (n = 0; n < TYPE_NFIELDS (t); n++)\n-\t{\n-\t  falign = arm_type_align (TYPE_FIELD_TYPE (t, n));\n-\t  if (falign > align)\n-\t    align = falign;\n-\t}\n-      return align;\n+\treturn TYPE_LENGTH (t);\n     }\n+\n+  /* Allow the common code to calculate the alignment.  */\n+  return 0;\n }\n \n /* Possible base types for a candidate for passing and returning in\n@@ -3715,7 +3678,7 @@ arm_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n       typecode = TYPE_CODE (arg_type);\n       val = value_contents (args[argnum]);\n \n-      align = arm_type_align (arg_type);\n+      align = type_align (arg_type);\n       /* Round alignment up to a whole number of words.  */\n       align = (align + INT_REGISTER_SIZE - 1) & ~(INT_REGISTER_SIZE - 1);\n       /* Different ABIs have different maximum alignments.  */\n@@ -9309,6 +9272,9 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   else\n     set_gdbarch_wchar_signed (gdbarch, 1);\n \n+  /* Compute type alignment.  */\n+  set_gdbarch_type_align (gdbarch, arm_type_align);\n+\n   /* Note: for displaced stepping, this includes the breakpoint, and one word\n      of additional scratch space.  This setting isn't used for anything beside\n      displaced stepping at present.  */"
    }
  ]
}