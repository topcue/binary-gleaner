{
  "sha": "b610c04548a39dbce6d51c33d7a8125e59066939",
  "node_id": "C_kwDOANOeidoAKGI2MTBjMDQ1NDhhMzlkYmNlNmQ1MWMzM2Q3YTgxMjVlNTkwNjY5Mzk",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-26T20:36:15Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-29T20:44:44Z"
    },
    "message": "gdb: remove TYPE_FIELD_BITPOS\n\nRemove TYPE_FIELD_BITPOS, replace its uses with type::field +\nfield::loc_bitpos.\n\nChange-Id: Iccd8d5a77e5352843a837babaa6bd284162e0320",
    "tree": {
      "sha": "9ebf5e8721754311148f61ea22e71126a8318574",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ebf5e8721754311148f61ea22e71126a8318574"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b610c04548a39dbce6d51c33d7a8125e59066939",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b610c04548a39dbce6d51c33d7a8125e59066939",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b610c04548a39dbce6d51c33d7a8125e59066939",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b610c04548a39dbce6d51c33d7a8125e59066939/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2ad53ea10c14445d6074814bbdfe46bd787038cb"
    }
  ],
  "stats": {
    "total": 180,
    "additions": 87,
    "deletions": 93
  },
  "files": [
    {
      "sha": "c7837c75139da0d18ec3f26dfab15a93d6a8a87f",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 20,
      "deletions": 21,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -1537,7 +1537,7 @@ desc_bounds (struct value *arr)\n static int\n fat_pntr_bounds_bitpos (struct type *type)\n {\n-  return TYPE_FIELD_BITPOS (desc_base_type (type), 1);\n+  return desc_base_type (type)->field (1).loc_bitpos ();\n }\n \n /* If TYPE is the type of an array-descriptor (fat pointer), the bit\n@@ -1603,7 +1603,7 @@ desc_data (struct value *arr)\n static int\n fat_pntr_data_bitpos (struct type *type)\n {\n-  return TYPE_FIELD_BITPOS (desc_base_type (type), 0);\n+  return desc_base_type (type)->field (0).loc_bitpos ();\n }\n \n /* If TYPE is the type of an array-descriptor (fat pointer), the bit\n@@ -1641,7 +1641,7 @@ desc_one_bound (struct value *bounds, int i, int which)\n static int\n desc_bound_bitpos (struct type *type, int i, int which)\n {\n-  return TYPE_FIELD_BITPOS (desc_base_type (type), 2 * i + which - 2);\n+  return desc_base_type (type)->field (2 * i + which - 2).loc_bitpos ();\n }\n \n /* If BOUNDS is an array-bounds structure type, return the bit field size\n@@ -6555,7 +6555,7 @@ ada_value_primitive_field (struct value *arg1, int offset, int fieldno,\n      packed; in this case we must take the bit-field path.  */\n   if (TYPE_FIELD_BITSIZE (arg_type, fieldno) != 0 || value_bitpos (arg1) != 0)\n     {\n-      int bit_pos = TYPE_FIELD_BITPOS (arg_type, fieldno);\n+      int bit_pos = arg_type->field (fieldno).loc_bitpos ();\n       int bit_size = TYPE_FIELD_BITSIZE (arg_type, fieldno);\n \n       return ada_value_primitive_packed_val (arg1,\n@@ -6660,7 +6660,7 @@ find_struct_field (const char *name, struct type *type, int offset,\n       int bit_pos = 0, fld_offset = 0;\n       if (byte_offset_p != nullptr || bit_offset_p != nullptr)\n \t{\n-\t  bit_pos = TYPE_FIELD_BITPOS (type, i);\n+\t  bit_pos = type->field (i).loc_bitpos ();\n \t  fld_offset = offset + bit_pos / 8;\n \t}\n \n@@ -6716,7 +6716,7 @@ find_struct_field (const char *name, struct type *type, int offset,\n \t    {\n \t      if (find_struct_field (name, field_type->field (j).type (),\n \t\t\t\t     fld_offset\n-\t\t\t\t     + TYPE_FIELD_BITPOS (field_type, j) / 8,\n+\t\t\t\t     + field_type->field (j).loc_bitpos () / 8,\n \t\t\t\t     field_type_p, byte_offset_p,\n \t\t\t\t     bit_offset_p, bit_size_p, index_p))\n \t\treturn 1;\n@@ -6735,7 +6735,7 @@ find_struct_field (const char *name, struct type *type, int offset,\n       int fld_offset = offset;\n       if (byte_offset_p != nullptr || bit_offset_p != nullptr)\n \t{\n-\t  int bit_pos = TYPE_FIELD_BITPOS (type, parent_offset);\n+\t  int bit_pos = type->field (parent_offset).loc_bitpos ();\n \t  fld_offset += bit_pos / 8;\n \t}\n \n@@ -6805,7 +6805,7 @@ ada_search_struct_field (const char *name, struct value *arg, int offset,\n \t{\n \t  struct value *v =     /* Do not let indent join lines here.  */\n \t    ada_search_struct_field (name, arg,\n-\t\t\t\t     offset + TYPE_FIELD_BITPOS (type, i) / 8,\n+\t\t\t\t     offset + type->field (i).loc_bitpos () / 8,\n \t\t\t\t     type->field (i).type ());\n \n \t  if (v != NULL)\n@@ -6817,14 +6817,14 @@ ada_search_struct_field (const char *name, struct value *arg, int offset,\n \t  /* PNH: Do we ever get here?  See find_struct_field.  */\n \t  int j;\n \t  struct type *field_type = ada_check_typedef (type->field (i).type ());\n-\t  int var_offset = offset + TYPE_FIELD_BITPOS (type, i) / 8;\n+\t  int var_offset = offset + type->field (i).loc_bitpos () / 8;\n \n \t  for (j = 0; j < field_type->num_fields (); j += 1)\n \t    {\n \t      struct value *v = ada_search_struct_field /* Force line\n \t\t\t\t\t\t\t   break.  */\n \t\t(name, arg,\n-\t\t var_offset + TYPE_FIELD_BITPOS (field_type, j) / 8,\n+\t\t var_offset + field_type->field (j).loc_bitpos () / 8,\n \t\t field_type->field (j).type ());\n \n \t      if (v != NULL)\n@@ -6839,7 +6839,7 @@ ada_search_struct_field (const char *name, struct value *arg, int offset,\n   if (parent_offset != -1)\n     {\n       struct value *v = ada_search_struct_field (\n-\tname, arg, offset + TYPE_FIELD_BITPOS (type, parent_offset) / 8,\n+\tname, arg, offset + type->field (parent_offset).loc_bitpos () / 8,\n \ttype->field (parent_offset).type ());\n \n       if (v != NULL)\n@@ -6885,7 +6885,7 @@ ada_index_struct_field_1 (int *index_p, struct value *arg, int offset,\n \t{\n \t  struct value *v =     /* Do not let indent join lines here.  */\n \t    ada_index_struct_field_1 (index_p, arg,\n-\t\t\t\t      offset + TYPE_FIELD_BITPOS (type, i) / 8,\n+\t\t\t\t      offset + type->field (i).loc_bitpos () / 8,\n \t\t\t\t      type->field (i).type ());\n \n \t  if (v != NULL)\n@@ -7525,7 +7525,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n   for (f = 0; f < nfields; f += 1)\n     {\n       off = align_up (off, field_alignment (type, f))\n-\t+ TYPE_FIELD_BITPOS (type, f);\n+\t+ type->field (f).loc_bitpos ();\n       rtype->field (f).set_loc_bitpos (off);\n       TYPE_FIELD_BITSIZE (rtype, f) = 0;\n \n@@ -7562,7 +7562,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n \t     that follow this one.  */\n \t  if (ada_is_aligner_type (field_type))\n \t    {\n-\t      long field_offset = TYPE_FIELD_BITPOS (type, f);\n+\t      long field_offset = type->field (f).loc_bitpos ();\n \n \t      field_valaddr = cond_offset_host (field_valaddr, field_offset);\n \t      field_address = cond_offset_target (field_address, field_offset);\n@@ -7642,7 +7642,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n     {\n       struct type *branch_type;\n \n-      off = TYPE_FIELD_BITPOS (rtype, variant_field);\n+      off = rtype->field (variant_field).loc_bitpos ();\n \n       if (dval0 == NULL)\n \t{\n@@ -7837,10 +7837,10 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n   branch_type = to_fixed_variant_branch_type\n     (type->field (variant_field).type (),\n      cond_offset_host (valaddr,\n-\t\t       TYPE_FIELD_BITPOS (type, variant_field)\n+\t\t       type->field (variant_field).loc_bitpos ()\n \t\t       / TARGET_CHAR_BIT),\n      cond_offset_target (address,\n-\t\t\t TYPE_FIELD_BITPOS (type, variant_field)\n+\t\t\t type->field (variant_field).loc_bitpos ()\n \t\t\t / TARGET_CHAR_BIT), dval);\n   if (branch_type == NULL)\n     {\n@@ -8742,10 +8742,9 @@ const gdb_byte *\n ada_aligned_value_addr (struct type *type, const gdb_byte *valaddr)\n {\n   if (ada_is_aligner_type (type))\n-    return ada_aligned_value_addr (type->field (0).type (),\n-\t\t\t\t   valaddr +\n-\t\t\t\t   TYPE_FIELD_BITPOS (type,\n-\t\t\t\t\t\t      0) / TARGET_CHAR_BIT);\n+    return ada_aligned_value_addr\n+      (type->field (0).type (),\n+       valaddr + type->field (0).loc_bitpos () / TARGET_CHAR_BIT);\n   else\n     return valaddr;\n }"
    },
    {
      "sha": "04f1c7d840831b615562fd8b44832709d5a22761",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -637,7 +637,7 @@ print_field_values (struct value *value, struct value *outer_value,\n \t  else\n \t    {\n \t      struct value *v;\n-\t      int bit_pos = TYPE_FIELD_BITPOS (type, i);\n+\t      int bit_pos = type->field (i).loc_bitpos ();\n \t      int bit_size = TYPE_FIELD_BITSIZE (type, i);\n \t      struct value_print_options opts;\n "
    },
    {
      "sha": "de04bbd07c1d0a634f5774b6f50c7a99f8bca561",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -563,7 +563,7 @@ amd64_has_unaligned_fields (struct type *type)\n \t      || TYPE_FIELD_PACKED (type, i))\n \t    continue;\n \n-\t  int bitpos = TYPE_FIELD_BITPOS (type, i);\n+\t  int bitpos = type->field (i).loc_bitpos ();\n \n \t  if (bitpos % 8 != 0)\n \t    return true;\n@@ -604,7 +604,7 @@ amd64_classify_aggregate_field (struct type *type, int i,\n   if (field_is_static (&type->field (i)) || bitsize == 0)\n     return;\n \n-  int bitpos = bitoffset + TYPE_FIELD_BITPOS (type, i);\n+  int bitpos = bitoffset + type->field (i).loc_bitpos ();\n   int pos = bitpos / 64;\n   int endpos = (bitpos + bitsize - 1) / 64;\n "
    },
    {
      "sha": "5b60831bbe9fd0074a0d49685a6df5f85713453d",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -8127,7 +8127,7 @@ arm_return_in_memory (struct gdbarch *gdbarch, struct type *type)\n \t\t}\n \n \t      /* If bitpos != 0, then we have to care about it.  */\n-\t      if (TYPE_FIELD_BITPOS (type, i) != 0)\n+\t      if (type->field (i).loc_bitpos () != 0)\n \t\t{\n \t\t  /* Bitfields are not addressable.  If the field bitsize is \n \t\t     zero, then the field is not packed.  Hence it cannot be"
    },
    {
      "sha": "b56652a7a2516c9efc4af010382b14457289f7bb",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -1310,14 +1310,14 @@ gen_primitive_field (struct agent_expr *ax, struct axs_value *value,\n   if (TYPE_FIELD_PACKED (type, fieldno))\n     gen_bitfield_ref (ax, value, type->field (fieldno).type (),\n \t\t      (offset * TARGET_CHAR_BIT\n-\t\t       + TYPE_FIELD_BITPOS (type, fieldno)),\n+\t\t       + type->field (fieldno).loc_bitpos ()),\n \t\t      (offset * TARGET_CHAR_BIT\n-\t\t       + TYPE_FIELD_BITPOS (type, fieldno)\n+\t\t       + type->field (fieldno).loc_bitpos ()\n \t\t       + TYPE_FIELD_BITSIZE (type, fieldno)));\n   else\n     {\n       gen_offset (ax, offset\n-\t\t  + TYPE_FIELD_BITPOS (type, fieldno) / TARGET_CHAR_BIT);\n+\t\t  + type->field (fieldno).loc_bitpos () / TARGET_CHAR_BIT);\n       value->kind = axs_lvalue_memory;\n       value->type = type->field (fieldno).type ();\n     }"
    },
    {
      "sha": "a471fdc27203f3c04dce95696a8109baf891a1a5",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -1192,7 +1192,7 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t      /* Make sure we carry our offset when we expand the\n \t\t struct/union.  */\n \t      local_podata.offset_bitpos\n-\t\t= podata->offset_bitpos + TYPE_FIELD_BITPOS (type, i);\n+\t\t= podata->offset_bitpos + type->field (i).loc_bitpos ();\n \t      /* We're entering a struct/union.  Right now,\n \t\t PODATA->END_BITPOS points right *after* the\n \t\t struct/union.  However, when printing the first field\n@@ -1646,11 +1646,11 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t\t\t\tstream, show, level + 4,\n \t\t\t\tlanguage, &local_flags, podata);\n \t\tfprintf_filtered (stream, \" @%s\",\n-\t\t\t\t  plongest (TYPE_FIELD_BITPOS (type, i)));\n+\t\t\t\t  plongest (type->field (i).loc_bitpos ()));\n \t\tif (TYPE_FIELD_BITSIZE (type, i) > 1)\n \t\t  {\n \t\t    fprintf_filtered (stream, \"-%s\",\n-\t\t\t\t      plongest (TYPE_FIELD_BITPOS (type, i)\n+\t\t\t\t      plongest (type->field (i).loc_bitpos ()\n \t\t\t\t\t\t+ TYPE_FIELD_BITSIZE (type, i)\n \t\t\t\t\t\t- 1));\n \t\t  }"
    },
    {
      "sha": "daf24538f95d17e2548f5db76d15dd942180368d",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -372,7 +372,7 @@ c_value_print_struct (struct value *val, struct ui_file *stream, int recurse,\n       /* Print vtable entry - we only get here if NOT using\n \t -fvtable_thunks.  (Otherwise, look under\n \t TYPE_CODE_PTR.)  */\n-      int offset = TYPE_FIELD_BITPOS (type, VTBL_FNADDR_OFFSET) / 8;\n+      int offset = type->field (VTBL_FNADDR_OFFSET).loc_bitpos () / 8;\n       struct type *field_type = type->field (VTBL_FNADDR_OFFSET).type ();\n       const gdb_byte *valaddr = value_contents_for_printing (val).data ();\n       CORE_ADDR addr = extract_typed_address (valaddr + offset, field_type);"
    },
    {
      "sha": "8fbbc0e4ef2ce467419cb4240fbbbc0193cacbbd",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -115,7 +115,7 @@ convert_struct_or_union (compile_c_instance *context, struct type *type)\n \t\t\t\t\t  type->field (i).name (),\n \t\t\t\t\t  field_type,\n \t\t\t\t\t  bitsize,\n-\t\t\t\t\t  TYPE_FIELD_BITPOS (type, i));\n+\t\t\t\t\t  type->field (i).loc_bitpos ());\n     }\n \n   context->plugin ().finish_record_or_union (result, TYPE_LENGTH (type));"
    },
    {
      "sha": "a54a5449242ca7c605bd5b8adc1d3575eb80d475",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -652,7 +652,7 @@ compile_cplus_convert_struct_or_union_members\n \n \t  instance->plugin ().build_field\n \t    (field_name, field_type, field_flags, bitsize,\n-\t     TYPE_FIELD_BITPOS (type, i));\n+\t     type->field (i).loc_bitpos ());\n \t}\n     }\n }"
    },
    {
      "sha": "bf69bf72cc948777e4a4a2b8c570c795e03ce245",
      "filename": "gdb/compile/compile-object-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/compile/compile-object-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/compile/compile-object-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -553,7 +553,7 @@ store_regs (struct type *regs_type, CORE_ADDR regs_base)\n   for (fieldno = 0; fieldno < regs_type->num_fields (); fieldno++)\n     {\n       const char *reg_name = regs_type->field (fieldno).name ();\n-      ULONGEST reg_bitpos = TYPE_FIELD_BITPOS (regs_type, fieldno);\n+      ULONGEST reg_bitpos = regs_type->field (fieldno).loc_bitpos ();\n       ULONGEST reg_bitsize = TYPE_FIELD_BITSIZE (regs_type, fieldno);\n       ULONGEST reg_offset;\n       struct type *reg_type"
    },
    {
      "sha": "27884102e10be5cb2884a163f95f786f8a44c085",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -270,11 +270,9 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \t\t  fputs_styled (\"<optimized out or zero length>\",\n \t\t\t\tmetadata_style.style (), stream);\n \t\t}\n-\t      else if (value_bits_synthetic_pointer (val,\n-\t\t\t\t\t\t     TYPE_FIELD_BITPOS (type,\n-\t\t\t\t\t\t\t\t\ti),\n-\t\t\t\t\t\t     TYPE_FIELD_BITSIZE (type,\n-\t\t\t\t\t\t\t\t\t i)))\n+\t      else if (value_bits_synthetic_pointer\n+\t\t\t (val, type->field (i).loc_bitpos (),\n+\t\t\t  TYPE_FIELD_BITSIZE (type, i)))\n \t\t{\n \t\t  fputs_styled (_(\"<synthetic pointer>\"),\n \t\t\t\tmetadata_style.style (), stream);\n@@ -316,7 +314,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \t\t}\n \t      else if (i == vptr_fieldno && type == vptr_basetype)\n \t\t{\n-\t\t  int i_offset = TYPE_FIELD_BITPOS (type, i) / 8;\n+\t\t  int i_offset = type->field (i).loc_bitpos () / 8;\n \t\t  struct type *i_type = type->field (i).type ();\n \n \t\t  if (valprint_check_validity (stream, i_type, i_offset, val))\n@@ -638,7 +636,7 @@ cp_find_class_member (struct type **self_p, int *fieldno,\n \n   for (i = TYPE_N_BASECLASSES (self); i < len; i++)\n     {\n-      LONGEST bitpos = TYPE_FIELD_BITPOS (self, i);\n+      LONGEST bitpos = self->field (i).loc_bitpos ();\n \n       QUIT;\n       if (offset == bitpos)\n@@ -650,7 +648,7 @@ cp_find_class_member (struct type **self_p, int *fieldno,\n \n   for (i = 0; i < TYPE_N_BASECLASSES (self); i++)\n     {\n-      LONGEST bitpos = TYPE_FIELD_BITPOS (self, i);\n+      LONGEST bitpos = self->field (i).loc_bitpos ();\n       LONGEST bitsize = 8 * TYPE_LENGTH (self->field (i).type ());\n \n       if (offset >= bitpos && offset < bitpos + bitsize)"
    },
    {
      "sha": "5f8ee94fffe39d46ac7d220d6f884c8081643c32",
      "filename": "gdb/d-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/d-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/d-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -55,7 +55,7 @@ dynamic_array_type (struct type *type,\n       ptr_type = type->field (1).type ();\n       elttype = check_typedef (TYPE_TARGET_TYPE (ptr_type));\n       addr = unpack_pointer (ptr_type,\n-\t\t\t     valaddr + TYPE_FIELD_BITPOS (type, 1) / 8\n+\t\t\t     valaddr + type->field (1).loc_bitpos () / 8\n \t\t\t     + embedded_offset);\n       true_type = check_typedef (elttype);\n "
    },
    {
      "sha": "e3609abfa9c82d593af823ef70a1e28db510395a",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -9076,7 +9076,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t    }\n \t  ++name;\n \n-\t  bit_offset += TYPE_FIELD_BITPOS (field_type, index);\n+\t  bit_offset += field_type->field (index).loc_bitpos ();\n \t  field_type = field_type->field (index).type ();\n \t}\n \n@@ -16530,7 +16530,7 @@ quirk_ada_thick_pointer (struct die_info *die, struct dwarf2_cu *cu,\n \t  bounds->num_fields () * sizeof (struct field));\n \n   int last_fieldno = range_fields.size () - 1;\n-  int bounds_size = (TYPE_FIELD_BITPOS (bounds, last_fieldno) / 8\n+  int bounds_size = (bounds->field (last_fieldno).loc_bitpos () / 8\n \t\t     + TYPE_LENGTH (bounds->field (last_fieldno).type ()));\n   TYPE_LENGTH (bounds) = align_up (bounds_size, max_align);\n "
    },
    {
      "sha": "bcdb78f05bcfedc8f832073b96e129a5f9a8e414",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -2321,7 +2321,7 @@ array_operation::evaluate_struct_tuple (struct value *struct_val,\n \tval = value_cast (field_type, val);\n \n       bitsize = TYPE_FIELD_BITSIZE (struct_type, fieldno);\n-      bitpos = TYPE_FIELD_BITPOS (struct_type, fieldno);\n+      bitpos = struct_type->field (fieldno).loc_bitpos ();\n       addr = value_contents_writeable (struct_val).data () + bitpos / 8;\n       if (bitsize)\n \tmodify_field (struct_type, addr,"
    },
    {
      "sha": "0dd2790d33a4deafd748cbbfc858c88d03d299a0",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -1851,15 +1851,15 @@ lookup_struct_elt (struct type *type, const char *name, int noerr)\n \n       if (t_field_name && (strcmp_iw (t_field_name, name) == 0))\n \t{\n-\t  return {&type->field (i), TYPE_FIELD_BITPOS (type, i)};\n+\t  return {&type->field (i), type->field (i).loc_bitpos ()};\n \t}\n       else if (!t_field_name || *t_field_name == '\\0')\n \t{\n \t  struct_elt elt\n \t    = lookup_struct_elt (type->field (i).type (), name, 1);\n \t  if (elt.field != NULL)\n \t    {\n-\t      elt.offset += TYPE_FIELD_BITPOS (type, i);\n+\t      elt.offset += type->field (i).loc_bitpos ();\n \t      return elt;\n \t    }\n \t}\n@@ -2464,7 +2464,7 @@ compute_variant_fields_inner (struct type *type,\n       else\n \t{\n \t  CORE_ADDR addr = (addr_stack->addr\n-\t\t\t    + (TYPE_FIELD_BITPOS (type, idx)\n+\t\t\t    + (type->field (idx).loc_bitpos ()\n \t\t\t       / TARGET_CHAR_BIT));\n \n \t  LONGEST bitsize = TYPE_FIELD_BITSIZE (type, idx);\n@@ -2475,7 +2475,7 @@ compute_variant_fields_inner (struct type *type,\n \t  gdb_byte bits[sizeof (ULONGEST)];\n \t  read_memory (addr, bits, size);\n \n-\t  LONGEST bitpos = (TYPE_FIELD_BITPOS (type, idx)\n+\t  LONGEST bitpos = (type->field (idx).loc_bitpos ()\n \t\t\t    % TARGET_CHAR_BIT);\n \n \t  discr_value = unpack_bits_as_long (type->field (idx).type (),\n@@ -2615,7 +2615,7 @@ resolve_dynamic_struct (struct type *type,\n \t\t \" (invalid location kind)\"));\n \n       pinfo.type = check_typedef (resolved_type->field (i).type ());\n-      size_t offset = TYPE_FIELD_BITPOS (resolved_type, i) / TARGET_CHAR_BIT;\n+      size_t offset = resolved_type->field (i).loc_bitpos () / TARGET_CHAR_BIT;\n       pinfo.valaddr = addr_stack->valaddr;\n       if (!pinfo.valaddr.empty ())\n \tpinfo.valaddr = pinfo.valaddr.slice (offset);\n@@ -2628,7 +2628,7 @@ resolve_dynamic_struct (struct type *type,\n       gdb_assert (resolved_type->field (i).loc_kind ()\n \t\t  == FIELD_LOC_KIND_BITPOS);\n \n-      new_bit_length = TYPE_FIELD_BITPOS (resolved_type, i);\n+      new_bit_length = resolved_type->field (i).loc_bitpos ();\n       if (TYPE_FIELD_BITSIZE (resolved_type, i) != 0)\n \tnew_bit_length += TYPE_FIELD_BITSIZE (resolved_type, i);\n       else\n@@ -5340,7 +5340,7 @@ recursive_dump_type (struct type *type, int spaces)\n \t\t\t idx, plongest (TYPE_FIELD_ENUMVAL (type, idx)));\n       else\n \tprintf_filtered (\"%*s[%d] bitpos %s bitsize %d type \", spaces + 2, \"\",\n-\t\t\t idx, plongest (TYPE_FIELD_BITPOS (type, idx)),\n+\t\t\t idx, plongest (type->field (idx).loc_bitpos ()),\n \t\t\t TYPE_FIELD_BITSIZE (type, idx));\n       gdb_print_host_address (type->field (idx).type (), gdb_stdout);\n       printf_filtered (\" name '%s' (\",\n@@ -5562,7 +5562,7 @@ copy_type_recursive (struct objfile *objfile,\n \t  switch (type->field (i).loc_kind ())\n \t    {\n \t    case FIELD_LOC_KIND_BITPOS:\n-\t      new_type->field (i).set_loc_bitpos (TYPE_FIELD_BITPOS (type, i));\n+\t      new_type->field (i).set_loc_bitpos (type->field (i).loc_bitpos ());\n \t      break;\n \t    case FIELD_LOC_KIND_ENUMVAL:\n \t      new_type->field (i).set_loc_enumval (TYPE_FIELD_ENUMVAL (type, i));"
    },
    {
      "sha": "18f856fb0597bd77c892167496e34d3e17d16568",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -2116,7 +2116,7 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define TYPE_BASECLASS(thistype,index) ((thistype)->field (index).type ())\n #define TYPE_N_BASECLASSES(thistype) TYPE_CPLUS_SPECIFIC(thistype)->n_baseclasses\n #define TYPE_BASECLASS_NAME(thistype,index) (thistype->field (index).name ())\n-#define TYPE_BASECLASS_BITPOS(thistype,index) TYPE_FIELD_BITPOS(thistype,index)\n+#define TYPE_BASECLASS_BITPOS(thistype,index) (thistype->field (index).loc_bitpos ())\n #define BASETYPE_VIA_PUBLIC(thistype, index) \\\n   ((!TYPE_FIELD_PRIVATE(thistype, index)) && (!TYPE_FIELD_PROTECTED(thistype, index)))\n #define TYPE_CPLUS_DYNAMIC(thistype) TYPE_CPLUS_SPECIFIC (thistype)->is_dynamic\n@@ -2128,7 +2128,6 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define FIELD_ARTIFICIAL(thisfld) ((thisfld).artificial)\n #define FIELD_BITSIZE(thisfld) ((thisfld).bitsize)\n \n-#define TYPE_FIELD_BITPOS(thistype, n) ((thistype)->field (n).loc_bitpos ())\n #define TYPE_FIELD_ENUMVAL(thistype, n) ((thistype)->field (n).loc_enumval ())\n #define TYPE_FIELD_STATIC_PHYSNAME(thistype, n) ((thistype)->field (n).loc_physname ())\n #define TYPE_FIELD_STATIC_PHYSADDR(thistype, n) ((thistype)->field (n).loc_physaddr ())"
    },
    {
      "sha": "019b0119798e412fb7cf8cff08f3922188d10876",
      "filename": "gdb/gnu-v2-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gnu-v2-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gnu-v2-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v2-abi.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -364,7 +364,7 @@ gnuv2_baseclass_offset (struct type *type, int index,\n \t      CORE_ADDR addr;\n \n \t      field_type = check_typedef (type->field (i).type ());\n-\t      field_offset = TYPE_FIELD_BITPOS (type, i) / 8;\n+\t      field_offset = type->field (i).loc_bitpos () / 8;\n \t      field_length = TYPE_LENGTH (field_type);\n \n \t      if (!value_bytes_available (val, embedded_offset + field_offset,"
    },
    {
      "sha": "80b7eddd87871b867440714ef7b29e3bfd089ce5",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -195,7 +195,7 @@ vtable_address_point_offset (struct gdbarch *gdbarch)\n   struct type *vtable_type\n     = (struct type *) gdbarch_data (gdbarch, vtable_type_gdbarch_data);\n \n-  return (TYPE_FIELD_BITPOS (vtable_type, vtable_field_virtual_functions)\n+  return (vtable_type->field (vtable_field_virtual_functions).loc_bitpos ()\n \t  / TARGET_CHAR_BIT);\n }\n "
    },
    {
      "sha": "fab7f0ad5b79c3e3e55dae2526910f218302bada",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -102,7 +102,7 @@ m2_print_long_set (struct type *type, const gdb_byte *valaddr,\n       for (i = low_bound; i <= high_bound; i++)\n \t{\n \t  bitval = value_bit_index (type->field (field).type (),\n-\t\t\t\t    (TYPE_FIELD_BITPOS (type, field) / 8) +\n+\t\t\t\t    (type->field (field).loc_bitpos () / 8) +\n \t\t\t\t    valaddr + embedded_offset, i);\n \t  if (bitval < 0)\n \t    error (_(\"bit test is out of range\"));\n@@ -168,7 +168,7 @@ m2_print_unbounded_array (struct value *value,\n   const gdb_byte *valaddr = value_contents_for_printing (value).data ();\n \n   addr = unpack_pointer (type->field (0).type (),\n-\t\t\t (TYPE_FIELD_BITPOS (type, 0) / 8) +\n+\t\t\t (type->field (0).loc_bitpos () / 8) +\n \t\t\t valaddr);\n \n   val = value_at_lazy (TYPE_TARGET_TYPE (type->field (0).type ()),"
    },
    {
      "sha": "89f689e02cc566ef7728b47553be60c9c9ba5c51",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -4858,11 +4858,11 @@ mips_n32n64_fp_arg_chunk_p (struct gdbarch *gdbarch, struct type *arg_type,\n \n       /* We're only looking at normal fields.  */\n       if (field_is_static (&arg_type->field (i))\n-\t  || (TYPE_FIELD_BITPOS (arg_type, i) % 8) != 0)\n+\t  || (arg_type->field (i).loc_bitpos () % 8) != 0)\n \tcontinue;\n \n       /* If we have gone past the offset, there is no double to pass.  */\n-      pos = TYPE_FIELD_BITPOS (arg_type, i) / 8;\n+      pos = arg_type->field (i).loc_bitpos () / 8;\n       if (pos > offset)\n \treturn 0;\n "
    },
    {
      "sha": "b30b03bdc8103a15faca93833fef4b13df43c4e4",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -102,11 +102,11 @@ pascal_is_string_type (struct type *type,int *length_pos, int *length_size,\n \t  && strcmp (type->field (1).name (), \"st\") == 0)\n \t{\n \t  if (length_pos)\n-\t    *length_pos = TYPE_FIELD_BITPOS (type, 0) / TARGET_CHAR_BIT;\n+\t    *length_pos = type->field (0).loc_bitpos () / TARGET_CHAR_BIT;\n \t  if (length_size)\n \t    *length_size = TYPE_LENGTH (type->field (0).type ());\n \t  if (string_pos)\n-\t    *string_pos = TYPE_FIELD_BITPOS (type, 1) / TARGET_CHAR_BIT;\n+\t    *string_pos = type->field (1).loc_bitpos () / TARGET_CHAR_BIT;\n \t  if (char_type)\n \t    *char_type = TYPE_TARGET_TYPE (type->field (1).type ());\n \t  if (arrayname)\n@@ -122,11 +122,11 @@ pascal_is_string_type (struct type *type,int *length_pos, int *length_size,\n \t  && strcmp (type->field (1).name (), \"length\") == 0)\n \t{\n \t  if (length_pos)\n-\t    *length_pos = TYPE_FIELD_BITPOS (type, 1) / TARGET_CHAR_BIT;\n+\t    *length_pos = type->field (1).loc_bitpos () / TARGET_CHAR_BIT;\n \t  if (length_size)\n \t    *length_size = TYPE_LENGTH (type->field (1).type ());\n \t  if (string_pos)\n-\t    *string_pos = TYPE_FIELD_BITPOS (type, 2) / TARGET_CHAR_BIT;\n+\t    *string_pos = type->field (2).loc_bitpos () / TARGET_CHAR_BIT;\n \t  /* FIXME: how can I detect wide chars in GPC ??  */\n \t  if (char_type)\n \t    {"
    },
    {
      "sha": "e3c524c3b59de7933eef8dcb4a45b7d39b16fa9d",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -306,7 +306,7 @@ pascal_language::value_print_inner (struct value *val,\n \t  print_address_demangle\n \t    (options, gdbarch,\n \t     extract_unsigned_integer\n-\t       (valaddr + TYPE_FIELD_BITPOS (type, VTBL_FNADDR_OFFSET) / 8,\n+\t       (valaddr + type->field (VTBL_FNADDR_OFFSET).loc_bitpos () / 8,\n \t\tTYPE_LENGTH (type->field (VTBL_FNADDR_OFFSET).type ()),\n \t\tbyte_order),\n \t     stream, demangle);\n@@ -606,11 +606,9 @@ pascal_object_print_value_fields (struct value *val, struct ui_file *stream,\n \t\t  fputs_styled (\"<optimized out or zero length>\",\n \t\t\t\tmetadata_style.style (), stream);\n \t\t}\n-\t      else if (value_bits_synthetic_pointer (val,\n-\t\t\t\t\t\t     TYPE_FIELD_BITPOS (type,\n-\t\t\t\t\t\t\t\t\ti),\n-\t\t\t\t\t\t     TYPE_FIELD_BITSIZE (type,\n-\t\t\t\t\t\t\t\t\t i)))\n+\t      else if (value_bits_synthetic_pointer\n+\t\t\t (val, type->field (i).loc_bitpos (),\n+\t\t\t  TYPE_FIELD_BITSIZE (type, i)))\n \t\t{\n \t\t  fputs_styled (_(\"<synthetic pointer>\"),\n \t\t\t\tmetadata_style.style (), stream);"
    },
    {
      "sha": "0895093e5e35bd66e249c489c6e852dd42557c58",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -192,7 +192,7 @@ convert_field (struct type *type, int field)\n \t  if (type->field (field).loc_kind () == FIELD_LOC_KIND_DWARF_BLOCK)\n \t    arg = gdbpy_ref<>::new_reference (Py_None);\n \t  else\n-\t    arg = gdb_py_object_from_longest (TYPE_FIELD_BITPOS (type, field));\n+\t    arg = gdb_py_object_from_longest (type->field (field).loc_bitpos ());\n \t  attrstring = \"bitpos\";\n \t}\n "
    },
    {
      "sha": "bfd93c65d22285765c03fc7f098abf651b6654b2",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -2548,7 +2548,7 @@ riscv_struct_info::analyse_inner (struct type *type, int offset)\n       struct type *field_type = type->field (i).type ();\n       field_type = check_typedef (field_type);\n       int field_offset\n-\t= offset + TYPE_FIELD_BITPOS (type, i) / TARGET_CHAR_BIT;\n+\t= offset + type->field (i).loc_bitpos () / TARGET_CHAR_BIT;\n \n       switch (field_type->code ())\n \t{"
    },
    {
      "sha": "e5a404187bef18d62223e719ec9272fd125e93e5",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -686,8 +686,8 @@ rust_print_struct_def (struct type *type, const char *varstring,\n     std::sort (fields.begin (), fields.end (),\n \t       [&] (int a, int b)\n \t       {\n-\t\t return (TYPE_FIELD_BITPOS (type, a)\n-\t\t\t < TYPE_FIELD_BITPOS (type, b));\n+\t\t return (type->field (a).loc_bitpos ()\n+\t\t\t < type->field (b).loc_bitpos ());\n \t       });\n \n   for (int i : fields)\n@@ -943,7 +943,7 @@ rust_composite_type (struct type *original,\n \n   if (i > 0)\n     TYPE_LENGTH (result)\n-      = (TYPE_FIELD_BITPOS (result, i - 1) / TARGET_CHAR_BIT +\n+      = (result->field (i - 1).loc_bitpos () / TARGET_CHAR_BIT +\n \t TYPE_LENGTH (result->field (i - 1).type ()));\n   return result;\n }"
    },
    {
      "sha": "c0d31599570e12fd2b3763fc2812694ee4d58f3e",
      "filename": "gdb/sparc64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/sparc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/sparc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-tdep.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -1267,7 +1267,7 @@ sparc64_store_floating_fields (struct regcache *regcache, struct type *type,\n       for (i = 0; i < type->num_fields (); i++)\n \t{\n \t  struct type *subtype = check_typedef (type->field (i).type ());\n-\t  int subpos = bitpos + TYPE_FIELD_BITPOS (type, i);\n+\t  int subpos = bitpos + type->field (i).loc_bitpos ();\n \n \t  sparc64_store_floating_fields (regcache, subtype, valbuf,\n \t\t\t\t\t element, subpos);\n@@ -1355,7 +1355,7 @@ sparc64_extract_floating_fields (struct regcache *regcache, struct type *type,\n       for (i = 0; i < type->num_fields (); i++)\n \t{\n \t  struct type *subtype = check_typedef (type->field (i).type ());\n-\t  int subpos = bitpos + TYPE_FIELD_BITPOS (type, i);\n+\t  int subpos = bitpos + type->field (i).loc_bitpos ();\n \n \t  sparc64_extract_floating_fields (regcache, subtype, valbuf, subpos);\n \t}"
    },
    {
      "sha": "097fb6860fae78b426c99e1340a94c63c5e2eae5",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -143,7 +143,7 @@ print_offset_data::update (struct type *type, unsigned int field_idx,\n       return;\n     }\n \n-  unsigned int bitpos = TYPE_FIELD_BITPOS (type, field_idx);\n+  unsigned int bitpos = type->field (field_idx).loc_bitpos ();\n   unsigned int fieldsize_byte = TYPE_LENGTH (ftype);\n   unsigned int fieldsize_bit = fieldsize_byte * TARGET_CHAR_BIT;\n "
    },
    {
      "sha": "0d025841b12c66b922c6a3a4ced0b1bfcc3486af",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -2030,8 +2030,8 @@ struct_field_searcher::search (struct value *arg1, LONGEST offset,\n \t\t   have to add the offset of the union here.  */\n \t\tif (field_type->code () == TYPE_CODE_STRUCT\n \t\t    || (field_type->num_fields () > 0\n-\t\t\t&& TYPE_FIELD_BITPOS (field_type, 0) == 0))\n-\t\t  new_offset += TYPE_FIELD_BITPOS (type, i) / 8;\n+\t\t\t&& field_type->field (0).loc_bitpos () == 0))\n+\t\t  new_offset += type->field (i).loc_bitpos () / 8;\n \n \t\tsearch (arg1, new_offset, field_type);\n \t      }\n@@ -2430,7 +2430,7 @@ value_struct_elt_bitpos (struct value **argp, int bitpos, struct type *ftype,\n   for (i = TYPE_N_BASECLASSES (t); i < t->num_fields (); i++)\n     {\n       if (!field_is_static (&t->field (i))\n-\t  && bitpos == TYPE_FIELD_BITPOS (t, i)\n+\t  && bitpos == t->field (i).loc_bitpos ()\n \t  && types_equal (ftype, t->field (i).type ()))\n \treturn value_primitive_field (*argp, 0, i, t);\n     }\n@@ -3518,7 +3518,7 @@ value_struct_elt_for_reference (struct type *domain, int offset,\n \t  if (want_address)\n \t    return value_from_longest\n \t      (lookup_memberptr_type (t->field (i).type (), domain),\n-\t       offset + (LONGEST) (TYPE_FIELD_BITPOS (t, i) >> 3));\n+\t       offset + (LONGEST) (t->field (i).loc_bitpos () >> 3));\n \t  else if (noside != EVAL_NORMAL)\n \t    return allocate_value (t->field (i).type ());\n \t  else"
    },
    {
      "sha": "2656d0ded3fd7693243dcdeb3b2e8e4e060f2ad8",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -1214,7 +1214,7 @@ val_print_type_code_flags (struct type *type, struct value *original_value,\n \t\t int.  */\n \t      && TYPE_FIELD_BITSIZE (type, field) == 1)\n \t    {\n-\t      if (val & ((ULONGEST)1 << TYPE_FIELD_BITPOS (type, field)))\n+\t      if (val & ((ULONGEST)1 << type->field (field).loc_bitpos ()))\n \t\tfprintf_filtered\n \t\t  (stream, \" %ps\",\n \t\t   styled_string (variable_name_style.style (),\n@@ -1223,7 +1223,7 @@ val_print_type_code_flags (struct type *type, struct value *original_value,\n \t  else\n \t    {\n \t      unsigned field_len = TYPE_FIELD_BITSIZE (type, field);\n-\t      ULONGEST field_val = val >> TYPE_FIELD_BITPOS (type, field);\n+\t      ULONGEST field_val = val >> type->field (field).loc_bitpos ();\n \n \t      if (field_len < sizeof (ULONGEST) * TARGET_CHAR_BIT)\n \t\tfield_val &= ((ULONGEST) 1 << field_len) - 1;"
    },
    {
      "sha": "e64811fe87c8f803d7608c6a7c86be4a53e1511a",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b610c04548a39dbce6d51c33d7a8125e59066939/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=b610c04548a39dbce6d51c33d7a8125e59066939",
      "patch": "@@ -3044,7 +3044,7 @@ value_primitive_field (struct value *arg1, LONGEST offset,\n \t bit.  Assume that the address, offset, and embedded offset\n \t are sufficiently aligned.  */\n \n-      LONGEST bitpos = TYPE_FIELD_BITPOS (arg_type, fieldno);\n+      LONGEST bitpos = arg_type->field (fieldno).loc_bitpos ();\n       LONGEST container_bitsize = TYPE_LENGTH (type) * 8;\n \n       v = allocate_value_lazy (type);\n@@ -3082,7 +3082,7 @@ value_primitive_field (struct value *arg1, LONGEST offset,\n \t\t\t\t    value_address (arg1),\n \t\t\t\t    arg1);\n       else\n-\tboffset = TYPE_FIELD_BITPOS (arg_type, fieldno) / 8;\n+\tboffset = arg_type->field (fieldno).loc_bitpos () / 8;\n \n       if (value_lazy (arg1))\n \tv = allocate_value_lazy (value_enclosing_type (arg1));\n@@ -3110,7 +3110,7 @@ value_primitive_field (struct value *arg1, LONGEST offset,\n   else\n     {\n       /* Plain old data member */\n-      offset += (TYPE_FIELD_BITPOS (arg_type, fieldno)\n+      offset += (arg_type->field (fieldno).loc_bitpos ()\n \t\t / (HOST_CHAR_BIT * unit_size));\n \n       /* Lazy register values with offsets are not supported.  */\n@@ -3274,7 +3274,7 @@ unpack_value_field_as_long (struct type *type, const gdb_byte *valaddr,\n \t\t\t    LONGEST embedded_offset, int fieldno,\n \t\t\t    const struct value *val, LONGEST *result)\n {\n-  int bitpos = TYPE_FIELD_BITPOS (type, fieldno);\n+  int bitpos = type->field (fieldno).loc_bitpos ();\n   int bitsize = TYPE_FIELD_BITSIZE (type, fieldno);\n   struct type *field_type = type->field (fieldno).type ();\n   int bit_offset;\n@@ -3297,7 +3297,7 @@ unpack_value_field_as_long (struct type *type, const gdb_byte *valaddr,\n LONGEST\n unpack_field_as_long (struct type *type, const gdb_byte *valaddr, int fieldno)\n {\n-  int bitpos = TYPE_FIELD_BITPOS (type, fieldno);\n+  int bitpos = type->field (fieldno).loc_bitpos ();\n   int bitsize = TYPE_FIELD_BITSIZE (type, fieldno);\n   struct type *field_type = type->field (fieldno).type ();\n \n@@ -3362,7 +3362,7 @@ value_field_bitfield (struct type *type, int fieldno,\n \t\t      const gdb_byte *valaddr,\n \t\t      LONGEST embedded_offset, const struct value *val)\n {\n-  int bitpos = TYPE_FIELD_BITPOS (type, fieldno);\n+  int bitpos = type->field (fieldno).loc_bitpos ();\n   int bitsize = TYPE_FIELD_BITSIZE (type, fieldno);\n   struct value *res_val = allocate_value (type->field (fieldno).type ());\n "
    }
  ]
}