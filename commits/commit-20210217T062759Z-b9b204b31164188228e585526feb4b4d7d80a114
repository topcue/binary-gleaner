{
  "sha": "b9b204b31164188228e585526feb4b4d7d80a114",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjliMjA0YjMxMTY0MTg4MjI4ZTU4NTUyNmZlYjRiNGQ3ZDgwYTExNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-16T13:16:40Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-17T06:27:59Z"
    },
    "message": "read_leb128 overflow checking\n\nThere is a tiny error left in dwarf.c:read_leb128 after Nick fixed the\nsigned overflow problem in code I wrote.  It's to do with sleb128\nvalues that have unnecessary excess bytes.  For example, -1 is\nrepresented as 0x7f, the most efficient encoding, but also as\n0xff,0x7f or 0xff,0xff,0x7f and so on.  None of these sequences\noverflow any size signed value, but read_leb128 will report an\noverflow given enough excess bytes.  This patch fixes that problem,\nand since the proper test for signed values with excess bytes can\neasily be adapted to also test a sleb byte with just some bits that\noverflow the result, I changed the code to not use signed right\nshifts.  (The C standard ISO/IEC 9899:1999 6.5.7 says signed right\nshifts of negative values have an implementation defined value.  A\nlong time ago I even used a C compiler for a certain microprocessor\nthat always did unsigned right shifts.  Mind you, it is very unlikely\nto be compiling binutils with such a compiler.)\n\nbfd/\n\t* wasm-module.c: Guard include of limits.h.\n\t(CHAR_BIT): Provide backup define.\n\t(wasm_read_leb128): Use CHAR_BIT to size \"result\" in bits.\n\tCorrect signed overflow checking.\nopcodes/\n\t* wasm32-dis.c: Include limits.h.\n\t(CHAR_BIT): Provide backup define.\n\t(wasm_read_leb128): Use CHAR_BIT to size \"result\" in bits.\n\tCorrect signed overflow checking.\nbinutils/\n\t* dwarf.c: Include limits.h.\n\t(CHAR_BIT): Provide backup define.\n\t(read_leb128): Use CHAR_BIT to size \"result\" in bits.  Correct\n\tsigned overflow checking.\n\t* testsuite/binutils-all/pr26548.s,\n\t* testsuite/binutils-all/pr26548.d,\n\t* testsuite/binutils-all/pr26548e.d: New tests.\n\t* testsuite/binutils-all/readelf.exp: Run them.\n\t(readelf_test): Drop unused \"xfails\" parameter.  Update all uses.",
    "tree": {
      "sha": "454c249a57dfc0a9f98074275cae07bc7c0ae4d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/454c249a57dfc0a9f98074275cae07bc7c0ae4d7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b9b204b31164188228e585526feb4b4d7d80a114",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9b204b31164188228e585526feb4b4d7d80a114",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b9b204b31164188228e585526feb4b4d7d80a114",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9b204b31164188228e585526feb4b4d7d80a114/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0d6aab77761274e479ca443f8bcb35a0eee3a4c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d6aab77761274e479ca443f8bcb35a0eee3a4c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0d6aab77761274e479ca443f8bcb35a0eee3a4c4"
    }
  ],
  "stats": {
    "total": 239,
    "additions": 183,
    "deletions": 56
  },
  "files": [
    {
      "sha": "7feb6087cec2e75b24e46576f8267c1d29c01381",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* wasm-module.c: Guard include of limits.h.\n+\t(CHAR_BIT): Provide backup define.\n+\t(wasm_read_leb128): Use CHAR_BIT to size \"result\" in bits.\n+\tCorrect signed overflow checking.\n+\n 2021-02-17  Nelson Chu  <nelson.chu@sifive.com>\n \n \tPR 27200"
    },
    {
      "sha": "a8f65479af904c199dffbc807da8c1d19e5169fc",
      "filename": "bfd/wasm-module.c",
      "status": "modified",
      "additions": 20,
      "deletions": 7,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/bfd/wasm-module.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/bfd/wasm-module.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/wasm-module.c?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -28,11 +28,17 @@\n #include \"sysdep.h\"\n #include \"alloca-conf.h\"\n #include \"bfd.h\"\n-#include <limits.h>\n #include \"libiberty.h\"\n #include \"libbfd.h\"\n #include \"wasm-module.h\"\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n typedef struct\n {\n   asymbol *      symbols;\n@@ -111,27 +117,34 @@ wasm_read_leb128 (bfd *\t\t  abfd,\n   unsigned int num_read = 0;\n   unsigned int shift = 0;\n   unsigned char byte = 0;\n+  unsigned char lost, mask;\n   int status = 1;\n \n   while (bfd_bread (&byte, 1, abfd) == 1)\n     {\n       num_read++;\n \n-      if (shift < sizeof (result) * 8)\n+      if (shift < CHAR_BIT * sizeof (result))\n \t{\n \t  result |= ((bfd_vma) (byte & 0x7f)) << shift;\n-\t  if ((result >> shift) != (byte & 0x7f))\n-\t    /* Overflow.  */\n-\t    status |= 2;\n+\t  /* These bits overflowed.  */\n+\t  lost = byte ^ (result >> shift);\n+\t  /* And this is the mask of possible overflow bits.  */\n+\t  mask = 0x7f ^ ((bfd_vma) 0x7f << shift >> shift);\n \t  shift += 7;\n \t}\n-      else if ((byte & 0x7f) != 0)\n+      else\n+\t{\n+\t  lost = byte;\n+\t  mask = 0x7f;\n+\t}\n+      if ((lost & mask) != (sign && (bfd_signed_vma) result < 0 ? mask : 0))\n \tstatus |= 2;\n \n       if ((byte & 0x80) == 0)\n \t{\n \t  status &= ~1;\n-\t  if (sign && (shift < 8 * sizeof (result)) && (byte & 0x40))\n+\t  if (sign && shift < CHAR_BIT * sizeof (result) && (byte & 0x40))\n \t    result |= -((bfd_vma) 1 << shift);\n \t  break;\n \t}"
    },
    {
      "sha": "70ecb0a4263e3a11848cc69ed0d56a3e6a3013bb",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -1,3 +1,15 @@\n+2021-02-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c: Include limits.h.\n+\t(CHAR_BIT): Provide backup define.\n+\t(read_leb128): Use CHAR_BIT to size \"result\" in bits.  Correct\n+\tsigned overflow checking.\n+\t* testsuite/binutils-all/pr26548.s,\n+\t* testsuite/binutils-all/pr26548.d,\n+\t* testsuite/binutils-all/pr26548e.d: New tests.\n+\t* testsuite/binutils-all/readelf.exp: Run them.\n+\t(readelf_test): Drop unused \"xfails\" parameter.  Update all uses.\n+\n 2021-02-16  Jan Beulich  <jbeulich@suse.com>\n \n \t* dwarf.c (process_debug_info): Initialize \"dwo_id\"."
    },
    {
      "sha": "ce2602b6cb0d7db002d3ae443f9fe12c0f6be1d8",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 22,
      "deletions": 21,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -36,6 +36,13 @@\n #include <elfutils/debuginfod.h>\n #endif\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n #undef MAX\n #undef MIN\n #define MAX(a, b) ((a) > (b) ? (a) : (b))\n@@ -326,7 +333,7 @@ dwarf_vmatoa64 (dwarf_vma hvalue, dwarf_vma lvalue, char *buf,\n /* Read in a LEB128 encoded value starting at address DATA.\n    If SIGN is true, return a signed LEB128 value.\n    If LENGTH_RETURN is not NULL, return in it the number of bytes read.\n-   If STATUS_RETURN in not NULL, return with bit 0 (LSB) set if the\n+   If STATUS_RETURN is not NULL, return with bit 0 (LSB) set if the\n    terminating byte was not found and with bit 1 set if the value\n    overflows a dwarf_vma.\n    No bytes will be read at address END or beyond.  */\n@@ -346,37 +353,31 @@ read_leb128 (unsigned char *data,\n   while (data < end)\n     {\n       unsigned char byte = *data++;\n-      bfd_boolean cont = (byte & 0x80) ? TRUE : FALSE;\n+      unsigned char lost, mask;\n \n-      byte &= 0x7f;\n       num_read++;\n \n-      if (shift < sizeof (result) * 8)\n+      if (shift < CHAR_BIT * sizeof (result))\n \t{\n-\t  result |= ((dwarf_vma) byte) << shift;\n-\t  if (sign)\n-\t    {\n-\t      if ((((dwarf_signed_vma) result >> shift) & 0x7f) != byte)\n-\t\t/* Overflow.  */\n-\t\tstatus |= 2;\n-\t    }\n-\t  else if ((result >> shift) != byte)\n-\t    {\n-\t      /* Overflow.  */\n-\t      status |= 2;\n-\t    }\n-\n+\t  result |= ((dwarf_vma) (byte & 0x7f)) << shift;\n+\t  /* These bits overflowed.  */\n+\t  lost = byte ^ (result >> shift);\n+\t  /* And this is the mask of possible overflow bits.  */\n+\t  mask = 0x7f ^ ((dwarf_vma) 0x7f << shift >> shift);\n \t  shift += 7;\n \t}\n-      else if (byte != 0)\n+      else\n \t{\n-\t  status |= 2;\n+\t  lost = byte;\n+\t  mask = 0x7f;\n \t}\n+      if ((lost & mask) != (sign && (dwarf_signed_vma) result < 0 ? mask : 0))\n+\tstatus |= 2;\n \n-      if (!cont)\n+      if ((byte & 0x80) == 0)\n \t{\n \t  status &= ~1;\n-\t  if (sign && (shift < 8 * sizeof (result)) && (byte & 0x40))\n+\t  if (sign && shift < CHAR_BIT * sizeof (result) && (byte & 0x40))\n \t    result |= -((dwarf_vma) 1 << shift);\n \t  break;\n \t}"
    },
    {
      "sha": "8f6e3a5f5a5223994ebf149ce2df5812ee4b0e66",
      "filename": "binutils/testsuite/binutils-all/pr26548.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/pr26548.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/pr26548.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/pr26548.d?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -0,0 +1,13 @@\n+#source: pr26548.s\n+#as:\n+#readelf: -Wwi\n+\n+#...\n+.*: Abbrev Number: 1 \\(DW_TAG_variable\\)\n+.*   DW_AT_const_value : \\(sdata\\) 9223372036854775807\n+.*: Abbrev Number: 1 \\(DW_TAG_variable\\)\n+.*   DW_AT_const_value : \\(sdata\\) -9223372036854775808\n+.*: Abbrev Number: 1 \\(DW_TAG_variable\\)\n+.*   DW_AT_const_value : \\(sdata\\) -1\n+.*: Abbrev Number: 1 \\(DW_TAG_variable\\)\n+.*   DW_AT_const_value : \\(sdata\\) 1"
    },
    {
      "sha": "73b729a88e7e3ebd99b8c08f37829825b4f23274",
      "filename": "binutils/testsuite/binutils-all/pr26548.s",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/pr26548.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/pr26548.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/pr26548.s?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -0,0 +1,40 @@\n+\t.section .debug_abbrev\n+1:\n+\t.uleb128 1\n+# DW_TAG_variable\n+\t.uleb128 0x34\n+# no children\n+\t.byte 0\n+# DW_AT_const_value\n+\t.uleb128 0x1c\n+# DW_FORM_sdata\n+\t.uleb128 0x0d\n+\t.byte 0,0\n+\t.byte 0\n+\n+\t.section .debug_info\n+\t.4byte 9f-0f\n+0:\n+\t.2byte 4\n+\t.4byte 1b\n+\t.byte 8\n+ .ifndef ERROR\n+\t.uleb128 1\n+\t.sleb128  0x7fffffffffffffff\n+\t.uleb128 1\n+\t.sleb128 -0x8000000000000000\n+\t.uleb128 1\n+# silly excess byte encoding of -1, no warning\n+\t.byte 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f\n+\t.uleb128 1\n+# silly excess byte encoding of 1, no warning\n+\t.byte 0x81,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0\n+ .else\n+\t.uleb128 1\n+# encode +0x8000000000000000, readelf warning\n+\t.byte 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x01\n+\t.uleb128 1\n+# encode -0x8000000000000001, readelf warning\n+\t.byte 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3e\n+ .endif\n+9:"
    },
    {
      "sha": "3d5e64daa25627c040f9341bd1d5d731c1fa2639",
      "filename": "binutils/testsuite/binutils-all/pr26548e.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/pr26548e.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/pr26548e.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/pr26548e.d?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -0,0 +1,11 @@\n+#source: pr26548.s\n+#as: --defsym ERROR=1\n+#readelf: -Wwi\n+\n+#...\n+.*: Abbrev Number: 1 \\(DW_TAG_variable\\)\n+.*   DW_AT_const_value : \\(sdata\\).*LEB value.*\n+ -9223372036854775808\n+.*: Abbrev Number: 1 \\(DW_TAG_variable\\)\n+.*   DW_AT_const_value : \\(sdata\\).*LEB value.*\n+ 9223372036854775807"
    },
    {
      "sha": "c283cc6bed5827314b30e7e9670f91a4dfd17782",
      "filename": "binutils/testsuite/binutils-all/readelf.exp",
      "status": "modified",
      "additions": 31,
      "deletions": 22,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/readelf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/binutils/testsuite/binutils-all/readelf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.exp?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -76,7 +76,7 @@ proc readelf_find_size { binary_file test_iteration } {\n # Readelf's output is captured and then compared against the contents\n # of the regexp_file-readelf_size if it exists, else regexp_file.\n \n-proc readelf_test { options binary_file regexp_file xfails } {\n+proc readelf_test { options binary_file regexp_file } {\n \n     global READELF\n     global READELFFLAGS\n@@ -89,10 +89,6 @@ proc readelf_test { options binary_file regexp_file xfails } {\n     send_log \"exec $READELF $READELFFLAGS $options $binary_file > readelf.out\\n\"\n     set got [remote_exec host \"$READELF $READELFFLAGS $options $binary_file\" \"\" \"/dev/null\" \"readelf.out\"]\n \n-    foreach xfail $xfails {\n-\tsetup_xfail $xfail\n-    }\n-\n     if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n \tfail \"$testname (reason: unexpected output)\"\n \tsend_log $got\n@@ -342,11 +338,11 @@ if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o]} then {\n     readelf_find_size $tempfile 1\n \n     # Run the tests.\n-    readelf_test -h $tempfile readelf.h  {}\n-    readelf_test -S $tempfile readelf.s  {}\n+    readelf_test -h $tempfile readelf.h\n+    readelf_test -S $tempfile readelf.s\n     setup_xfail \"mips-*-*irix*\"\n-    readelf_test -s $tempfile readelf.ss {}\n-    readelf_test -r $tempfile readelf.r  {}\n+    readelf_test -s $tempfile readelf.ss\n+    readelf_test -r $tempfile readelf.r\n }\n \n # Test demangling symbol names.\n@@ -361,7 +357,7 @@ if {![binutils_assemble $srcdir/$subdir/mangled.s tmpdir/mangled.o]} then {\n     }\n \n     # Run the test.\n-    readelf_test {--syms --demangle --wide} $tempfile readelf.demangled {}\n+    readelf_test {--syms --demangle --wide} $tempfile readelf.demangled\n }\n \n readelf_wi_test\n@@ -376,6 +372,19 @@ if {[which $AS] != 0} then {\n     run_dump_test \"retain1b\"\n     run_dump_test \"readelf-maskos-1a\"\n     run_dump_test \"readelf-maskos-1b\"\n+    if {$readelf_size == 64 && ![istarget *-*-hpux*]} then {\n+\trun_dump_test pr26548\n+\tif {![binutils_assemble_flags $srcdir/$subdir/pr26548.s tmpdir/pr26548e.o {--defsym ERROR=1}]} then {\n+\t    unsupported \"pr26548e (failed to assemble)\"\n+\t} else {\n+\t    if ![is_remote host] {\n+\t\tset tempfile tmpdir/pr26548e.o\n+\t    } else {\n+\t\tset tempfile [remote_download host tmpdir/pr26548e.o]\n+\t    }\n+\t    readelf_test -Wwi $tempfile pr26548e.d\n+\t}\n+    }\n }\n \n # PR 13482 - Check for off-by-one errors when dumping .note sections.\n@@ -389,7 +398,7 @@ if {![binutils_assemble $srcdir/$subdir/version.s tmpdir/version.o]} then {\n \tset tempfile [remote_download host tmpdir/version.o]\n     }\n \n-    readelf_test -n $tempfile readelf.n  {}\n+    readelf_test -n $tempfile readelf.n\n }\n \n \n@@ -405,7 +414,7 @@ if {![binutils_assemble $srcdir/$subdir/pr18374.s tmpdir/pr18374.o]} then {\n \tset tempfile [remote_download host tmpdir/pr18374.o]\n     }\n \n-    readelf_test --debug-dump=loc $tempfile readelf.pr18374  {}\n+    readelf_test --debug-dump=loc $tempfile readelf.pr18374\n }\n \n \n@@ -420,7 +429,7 @@ if {![binutils_assemble $srcdir/$subdir/locview-1.s tmpdir/locview-1.o]} then {\n \tset tempfile [remote_download host tmpdir/locview-1.o]\n     }\n \n-    readelf_test --debug-dump=loc $tempfile readelf.locview-1  {}\n+    readelf_test --debug-dump=loc $tempfile readelf.locview-1\n }\n if {![binutils_assemble $srcdir/$subdir/locview-2.s tmpdir/locview-2.o]} then {\n     unsupported \"readelf --debug-dump=loc locview-2 (failed to assemble)\"\n@@ -432,7 +441,7 @@ if {![binutils_assemble $srcdir/$subdir/locview-2.s tmpdir/locview-2.o]} then {\n \tset tempfile [remote_download host tmpdir/locview-2.o]\n     }\n \n-    readelf_test --debug-dump=loc $tempfile readelf.locview-2  {}\n+    readelf_test --debug-dump=loc $tempfile readelf.locview-2\n }\n \n \n@@ -447,7 +456,7 @@ if {![binutils_assemble $srcdir/$subdir/z.s tmpdir/z.o]} then {\n \tset tempfile [remote_download host tmpdir/z.o]\n     }\n \n-    readelf_test {--decompress --hex-dump .debug_loc} $tempfile readelf.z  {}\n+    readelf_test {--decompress --hex-dump .debug_loc} $tempfile readelf.z\n }\n \n # Skip the next test for the RISCV architectures because they\n@@ -475,7 +484,7 @@ if ![istarget \"riscv*-*-*\"] then {\n \treadelf_find_size $tempfile 2\n \n \t# Make sure that readelf can decode the contents.\n-\treadelf_test -wiaoRlL $tempfile dw5.W {}\n+\treadelf_test -wiaoRlL $tempfile dw5.W\n     }\n }\n \n@@ -494,7 +503,7 @@ if {![binutils_assemble_flags $srcdir/$subdir/dwarf-attributes.S tmpdir/dwarf-at\n     readelf_find_size $tempfile 3\n \n     # Make sure that readelf can decode the contents.\n-    readelf_test -wi $tempfile dwarf-attributes.W {}\n+    readelf_test -wi $tempfile dwarf-attributes.W\n }\n \n # Check that debug link sections can be dumped.\n@@ -507,7 +516,7 @@ if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o]} then {\n \tset tempfile [remote_download host tmpdir/debuglink.o]\n     }\n \n-    readelf_test {--debug-dump=links -wN} $tempfile readelf.k  {}\n+    readelf_test {--debug-dump=links -wN} $tempfile readelf.k\n \n     # Check that debug link sections can be followed.\n     if {![binutils_assemble $srcdir/$subdir/linkdebug.s tmpdir/linkdebug.debug]} then {\n@@ -517,7 +526,7 @@ if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o]} then {\n \t    set tempfile2 [remote_download host tmpdir/linkdebug.debug]\n \t}\n \n-\treadelf_test {-wKis} $tempfile readelf.wKis  {}\n+\treadelf_test {-wKis} $tempfile readelf.wKis\n     }\n }\n \n@@ -530,7 +539,7 @@ if {![binutils_assemble $srcdir/$subdir/dwo.s tmpdir/dwo.o]} then {\n \tset tempfile [remote_download host tmpdir/dwo.o]\n     }\n \n-    readelf_test {--debug-dump=links --debug-dump=no-follow-links} $tempfile readelf.k2  {}\n+    readelf_test {--debug-dump=links --debug-dump=no-follow-links} $tempfile readelf.k2\n }\n \n if {![binutils_assemble $srcdir/$subdir/zero-sec.s tmpdir/zero-sec.o]} then {\n@@ -542,7 +551,7 @@ if {![binutils_assemble $srcdir/$subdir/zero-sec.s tmpdir/zero-sec.o]} then {\n \tset tempfile [remote_download host tmpdir/zero-sec.o]\n     }\n \n-    readelf_test {--enable-checks --sections --wide} $tempfile zero-sec.r {}\n+    readelf_test {--enable-checks --sections --wide} $tempfile zero-sec.r\n }\n \n if ![is_remote host] {\n@@ -555,6 +564,6 @@ if ![is_remote host] {\n     if {[catch \"system \\\"bzip2 -dc $test > $tempfile\\\"\"] != 0} {\n \tuntested \"bzip2 -dc ($testname)\"\n     } else {\n-\treadelf_test {--debug-dump=macro -wN} $tempfile pr26112.r {}\n+\treadelf_test {--debug-dump=macro -wN} $tempfile pr26112.r\n     }\n }"
    },
    {
      "sha": "03acd4d7185fe7bd5919bc21de5d07a77c9209c7",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* wasm32-dis.c: Include limits.h.\n+\t(CHAR_BIT): Provide backup define.\n+\t(wasm_read_leb128): Use CHAR_BIT to size \"result\" in bits.\n+\tCorrect signed overflow checking.\n+\n 2021-02-16  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-opc.tbl: Split CVTPI2PD template. Add SSE2AVX variant."
    },
    {
      "sha": "2fe5132e1299ccbe9f4dd4a700d70d095b3107e6",
      "filename": "opcodes/wasm32-dis.c",
      "status": "modified",
      "additions": 20,
      "deletions": 6,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9b204b31164188228e585526feb4b4d7d80a114/opcodes/wasm32-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9b204b31164188228e585526feb4b4d7d80a114/opcodes/wasm32-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/wasm32-dis.c?ref=b9b204b31164188228e585526feb4b4d7d80a114",
      "patch": "@@ -29,6 +29,13 @@\n #include \"elf/wasm32.h\"\n #include \"bfd_stdint.h\"\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n /* Type names for blocks and signatures.  */\n #define BLOCK_TYPE_NONE              0x40\n #define BLOCK_TYPE_I32               0x7f\n@@ -192,27 +199,34 @@ wasm_read_leb128 (bfd_vma                   pc,\n   unsigned int num_read = 0;\n   unsigned int shift = 0;\n   unsigned char byte = 0;\n+  unsigned char lost, mask;\n   int status = 1;\n \n   while (info->read_memory_func (pc + num_read, &byte, 1, info) == 0)\n     {\n       num_read++;\n \n-      if (shift < sizeof (result) * 8)\n+      if (shift < CHAR_BIT * sizeof (result))\n \t{\n \t  result |= ((uint64_t) (byte & 0x7f)) << shift;\n-\t  if ((result >> shift) != (byte & 0x7f))\n-\t    /* Overflow.  */\n-\t    status |= 2;\n+\t  /* These bits overflowed.  */\n+\t  lost = byte ^ (result >> shift);\n+\t  /* And this is the mask of possible overflow bits.  */\n+\t  mask = 0x7f ^ ((uint64_t) 0x7f << shift >> shift);\n \t  shift += 7;\n \t}\n-      else if ((byte & 0x7f) != 0)\n+      else\n+\t{\n+\t  lost = byte;\n+\t  mask = 0x7f;\n+\t}\n+      if ((lost & mask) != (sign && (int64_t) result < 0 ? mask : 0))\n \tstatus |= 2;\n \n       if ((byte & 0x80) == 0)\n \t{\n \t  status &= ~1;\n-\t  if (sign && (shift < 8 * sizeof (result)) && (byte & 0x40))\n+\t  if (sign && shift < CHAR_BIT * sizeof (result) && (byte & 0x40))\n \t    result |= -((uint64_t) 1 << shift);\n \t  break;\n \t}"
    }
  ]
}