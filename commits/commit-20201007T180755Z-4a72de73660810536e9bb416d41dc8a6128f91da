{
  "sha": "4a72de73660810536e9bb416d41dc8a6128f91da",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE3MmRlNzM2NjA4MTA1MzZlOWJiNDE2ZDQxZGM4YTYxMjhmOTFkYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-07T18:07:55Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-07T18:07:55Z"
    },
    "message": "Move simple_search_memory to gdbsupport/search.cc\n\nThis moves the simple_search_memory function to a new file,\ngdbsupport/search.cc.  The API is slightly changed to make it more\ngeneral.  This generality is useful for wiring it to gdbserver, and\nalso for unit testing.\n\ngdb/ChangeLog\n2020-10-07  Tom Tromey  <tromey@adacore.com>\n\n\t* target.h (simple_search_memory): Don't declare.\n\t* target.c (simple_search_memory): Move to gdbsupport.\n\t(default_search_memory): Update.\n\t* remote.c (remote_target::search_memory): Update.\n\ngdbsupport/ChangeLog\n2020-10-07  Tom Tromey  <tromey@adacore.com>\n\n\t* Makefile.in: Rebuild.\n\t* Makefile.am (libgdbsupport_a_SOURCES): Add search.cc.\n\t* search.h: New file.\n\t* search.cc: New file.",
    "tree": {
      "sha": "4ada40b22e18b0ab7b64494c58d45c1492a76187",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4ada40b22e18b0ab7b64494c58d45c1492a76187"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a72de73660810536e9bb416d41dc8a6128f91da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a72de73660810536e9bb416d41dc8a6128f91da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a72de73660810536e9bb416d41dc8a6128f91da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a72de73660810536e9bb416d41dc8a6128f91da/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e86efb3310cf3aa9515cca07d0835b7e8af79b38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e86efb3310cf3aa9515cca07d0835b7e8af79b38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e86efb3310cf3aa9515cca07d0835b7e8af79b38"
    }
  ],
  "stats": {
    "total": 310,
    "additions": 197,
    "deletions": 113
  },
  "files": [
    {
      "sha": "0b92bfb6536e1cf90cc5644ce6244d6c7aa74b14",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -1,3 +1,10 @@\n+2020-10-07  Tom Tromey  <tromey@adacore.com>\n+\n+\t* target.h (simple_search_memory): Don't declare.\n+\t* target.c (simple_search_memory): Move to gdbsupport.\n+\t(default_search_memory): Update.\n+\t* remote.c (remote_target::search_memory): Update.\n+\n 2020-10-07  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* Makefile.in (COMPILE): Add CXXFLAGS."
    },
    {
      "sha": "26ee28d39036fa52d5b49b420dc2433f340feb14",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -75,6 +75,7 @@\n #include \"gdbsupport/scoped_restore.h\"\n #include \"gdbsupport/environ.h\"\n #include \"gdbsupport/byte-vector.h\"\n+#include \"gdbsupport/search.h\"\n #include <algorithm>\n #include <unordered_map>\n #include \"async-event.h\"\n@@ -11186,6 +11187,12 @@ remote_target::search_memory (CORE_ADDR start_addr, ULONGEST search_space_len,\n   int found;\n   ULONGEST found_addr;\n \n+  auto read_memory = [=] (CORE_ADDR addr, gdb_byte *result, size_t len)\n+    {\n+      return (target_read (this, TARGET_OBJECT_MEMORY, NULL, result, addr, len)\n+\t      == len);\n+    };\n+\n   /* Don't go to the target if we don't have to.  This is done before\n      checking packet_config_support to avoid the possibility that a\n      success for this edge case means the facility works in\n@@ -11205,7 +11212,7 @@ remote_target::search_memory (CORE_ADDR start_addr, ULONGEST search_space_len,\n     {\n       /* Target doesn't provided special support, fall back and use the\n \t standard support (copy memory and do the search here).  */\n-      return simple_search_memory (this, start_addr, search_space_len,\n+      return simple_search_memory (read_memory, start_addr, search_space_len,\n \t\t\t\t   pattern, pattern_len, found_addrp);\n     }\n \n@@ -11237,7 +11244,7 @@ remote_target::search_memory (CORE_ADDR start_addr, ULONGEST search_space_len,\n \t supported.  If so, fall back to the simple way.  */\n       if (packet_config_support (packet) == PACKET_DISABLE)\n \t{\n-\t  return simple_search_memory (this, start_addr, search_space_len,\n+\t  return simple_search_memory (read_memory, start_addr, search_space_len,\n \t\t\t\t       pattern, pattern_len, found_addrp);\n \t}\n       return -1;"
    },
    {
      "sha": "6fd60a15144dea59aee802864e539e7482e97a3a",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 8,
      "deletions": 102,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -47,6 +47,7 @@\n #include \"event-top.h\"\n #include <algorithm>\n #include \"gdbsupport/byte-vector.h\"\n+#include \"gdbsupport/search.h\"\n #include \"terminal.h\"\n #include <unordered_map>\n #include \"target-connection.h\"\n@@ -2147,106 +2148,6 @@ target_read_description (struct target_ops *target)\n   return target->read_description ();\n }\n \n-/* This implements a basic search of memory, reading target memory and\n-   performing the search here (as opposed to performing the search in on the\n-   target side with, for example, gdbserver).  */\n-\n-int\n-simple_search_memory (struct target_ops *ops,\n-\t\t      CORE_ADDR start_addr, ULONGEST search_space_len,\n-\t\t      const gdb_byte *pattern, ULONGEST pattern_len,\n-\t\t      CORE_ADDR *found_addrp)\n-{\n-  /* NOTE: also defined in find.c testcase.  */\n-#define SEARCH_CHUNK_SIZE 16000\n-  const unsigned chunk_size = SEARCH_CHUNK_SIZE;\n-  /* Buffer to hold memory contents for searching.  */\n-  unsigned search_buf_size;\n-\n-  search_buf_size = chunk_size + pattern_len - 1;\n-\n-  /* No point in trying to allocate a buffer larger than the search space.  */\n-  if (search_space_len < search_buf_size)\n-    search_buf_size = search_space_len;\n-\n-  gdb::byte_vector search_buf (search_buf_size);\n-\n-  /* Prime the search buffer.  */\n-\n-  if (target_read (ops, TARGET_OBJECT_MEMORY, NULL,\n-\t\t   search_buf.data (), start_addr, search_buf_size)\n-      != search_buf_size)\n-    {\n-      warning (_(\"Unable to access %s bytes of target \"\n-\t\t \"memory at %s, halting search.\"),\n-\t       pulongest (search_buf_size), hex_string (start_addr));\n-      return -1;\n-    }\n-\n-  /* Perform the search.\n-\n-     The loop is kept simple by allocating [N + pattern-length - 1] bytes.\n-     When we've scanned N bytes we copy the trailing bytes to the start and\n-     read in another N bytes.  */\n-\n-  while (search_space_len >= pattern_len)\n-    {\n-      gdb_byte *found_ptr;\n-      unsigned nr_search_bytes\n-\t= std::min (search_space_len, (ULONGEST) search_buf_size);\n-\n-      found_ptr = (gdb_byte *) memmem (search_buf.data (), nr_search_bytes,\n-\t\t\t\t       pattern, pattern_len);\n-\n-      if (found_ptr != NULL)\n-\t{\n-\t  CORE_ADDR found_addr = start_addr + (found_ptr - search_buf.data ());\n-\n-\t  *found_addrp = found_addr;\n-\t  return 1;\n-\t}\n-\n-      /* Not found in this chunk, skip to next chunk.  */\n-\n-      /* Don't let search_space_len wrap here, it's unsigned.  */\n-      if (search_space_len >= chunk_size)\n-\tsearch_space_len -= chunk_size;\n-      else\n-\tsearch_space_len = 0;\n-\n-      if (search_space_len >= pattern_len)\n-\t{\n-\t  unsigned keep_len = search_buf_size - chunk_size;\n-\t  CORE_ADDR read_addr = start_addr + chunk_size + keep_len;\n-\t  int nr_to_read;\n-\n-\t  /* Copy the trailing part of the previous iteration to the front\n-\t     of the buffer for the next iteration.  */\n-\t  gdb_assert (keep_len == pattern_len - 1);\n-\t  memcpy (&search_buf[0], &search_buf[chunk_size], keep_len);\n-\n-\t  nr_to_read = std::min (search_space_len - keep_len,\n-\t\t\t\t (ULONGEST) chunk_size);\n-\n-\t  if (target_read (ops, TARGET_OBJECT_MEMORY, NULL,\n-\t\t\t   &search_buf[keep_len], read_addr,\n-\t\t\t   nr_to_read) != nr_to_read)\n-\t    {\n-\t      warning (_(\"Unable to access %s bytes of target \"\n-\t\t\t \"memory at %s, halting search.\"),\n-\t\t       plongest (nr_to_read),\n-\t\t       hex_string (read_addr));\n-\t      return -1;\n-\t    }\n-\n-\t  start_addr += chunk_size;\n-\t}\n-    }\n-\n-  /* Not found.  */\n-\n-  return 0;\n-}\n \n /* Default implementation of memory-searching.  */\n \n@@ -2256,9 +2157,14 @@ default_search_memory (struct target_ops *self,\n \t\t       const gdb_byte *pattern, ULONGEST pattern_len,\n \t\t       CORE_ADDR *found_addrp)\n {\n+  auto read_memory = [=] (CORE_ADDR addr, gdb_byte *result, size_t len)\n+    {\n+      return target_read (current_top_target (), TARGET_OBJECT_MEMORY, NULL,\n+\t\t\t  result, addr, len) == len;\n+    };\n+\n   /* Start over from the top of the target stack.  */\n-  return simple_search_memory (current_top_target (),\n-\t\t\t       start_addr, search_space_len,\n+  return simple_search_memory (read_memory, start_addr, search_space_len,\n \t\t\t       pattern, pattern_len, found_addrp);\n }\n "
    },
    {
      "sha": "854553357149c74c9418ba2a556426c67527c59a",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -2129,14 +2129,6 @@ extern const struct target_desc *target_read_description (struct target_ops *);\n #define target_get_ada_task_ptid(lwp, tid) \\\n      (current_top_target ()->get_ada_task_ptid) (lwp,tid)\n \n-/* Utility implementation of searching memory.  */\n-extern int simple_search_memory (struct target_ops* ops,\n-                                 CORE_ADDR start_addr,\n-                                 ULONGEST search_space_len,\n-                                 const gdb_byte *pattern,\n-                                 ULONGEST pattern_len,\n-                                 CORE_ADDR *found_addrp);\n-\n /* Main entry point for searching memory.  */\n extern int target_search_memory (CORE_ADDR start_addr,\n                                  ULONGEST search_space_len,"
    },
    {
      "sha": "adcc53abb48f218b5599555cb35629b33300d455",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -1,3 +1,10 @@\n+2020-10-07  Tom Tromey  <tromey@adacore.com>\n+\n+\t* Makefile.in: Rebuild.\n+\t* Makefile.am (libgdbsupport_a_SOURCES): Add search.cc.\n+\t* search.h: New file.\n+\t* search.cc: New file.\n+\n 2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* event-loop.h (debug_event_loop): New variable declaration."
    },
    {
      "sha": "9f4ec938b98a0e02152919d3316d0aed514ebbe5",
      "filename": "gdbsupport/Makefile.am",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/Makefile.am?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -65,6 +65,7 @@ libgdbsupport_a_SOURCES = \\\n     run-time-clock.cc \\\n     safe-strerror.cc \\\n     scoped_mmap.cc \\\n+    search.cc \\\n     signals.cc \\\n     signals-state-save-restore.cc \\\n     tdesc.cc \\"
    },
    {
      "sha": "044ef1555c276d1af78c828a56011b1a8409ffb3",
      "filename": "gdbsupport/Makefile.in",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/Makefile.in?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -156,7 +156,7 @@ am_libgdbsupport_a_OBJECTS = agent.$(OBJEXT) btrace-common.$(OBJEXT) \\\n \tnetstuff.$(OBJEXT) new-op.$(OBJEXT) pathstuff.$(OBJEXT) \\\n \tprint-utils.$(OBJEXT) ptid.$(OBJEXT) rsp-low.$(OBJEXT) \\\n \trun-time-clock.$(OBJEXT) safe-strerror.$(OBJEXT) \\\n-\tscoped_mmap.$(OBJEXT) signals.$(OBJEXT) \\\n+\tscoped_mmap.$(OBJEXT) search.$(OBJEXT) signals.$(OBJEXT) \\\n \tsignals-state-save-restore.$(OBJEXT) tdesc.$(OBJEXT) \\\n \tthread-pool.$(OBJEXT) xml-utils.$(OBJEXT) $(am__objects_1)\n libgdbsupport_a_OBJECTS = $(am_libgdbsupport_a_OBJECTS)\n@@ -388,6 +388,7 @@ libgdbsupport_a_SOURCES = \\\n     run-time-clock.cc \\\n     safe-strerror.cc \\\n     scoped_mmap.cc \\\n+    search.cc \\\n     signals.cc \\\n     signals-state-save-restore.cc \\\n     tdesc.cc \\\n@@ -492,6 +493,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/run-time-clock.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/safe-strerror.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scoped_mmap.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/search.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/selftest.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signals-state-save-restore.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signals.Po@am__quote@"
    },
    {
      "sha": "f10c57046cca428163613e50a0e87cb54e4fdccc",
      "filename": "gdbsupport/search.cc",
      "status": "added",
      "additions": 120,
      "deletions": 0,
      "changes": 120,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/search.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/search.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/search.cc?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -0,0 +1,120 @@\n+/* Target memory searching\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+\n+#include \"gdbsupport/search.h\"\n+#include \"gdbsupport/byte-vector.h\"\n+\n+/* This implements a basic search of memory, reading target memory and\n+   performing the search here (as opposed to performing the search in on the\n+   target side with, for example, gdbserver).  */\n+\n+int\n+simple_search_memory\n+  (gdb::function_view<target_read_memory_ftype> read_memory,\n+   CORE_ADDR start_addr, ULONGEST search_space_len,\n+   const gdb_byte *pattern, ULONGEST pattern_len,\n+   CORE_ADDR *found_addrp)\n+{\n+  const unsigned chunk_size = SEARCH_CHUNK_SIZE;\n+  /* Buffer to hold memory contents for searching.  */\n+  unsigned search_buf_size;\n+\n+  search_buf_size = chunk_size + pattern_len - 1;\n+\n+  /* No point in trying to allocate a buffer larger than the search space.  */\n+  if (search_space_len < search_buf_size)\n+    search_buf_size = search_space_len;\n+\n+  gdb::byte_vector search_buf (search_buf_size);\n+\n+  /* Prime the search buffer.  */\n+\n+  if (!read_memory (start_addr, search_buf.data (), search_buf_size))\n+    {\n+      warning (_(\"Unable to access %s bytes of target \"\n+\t\t \"memory at %s, halting search.\"),\n+\t       pulongest (search_buf_size), hex_string (start_addr));\n+      return -1;\n+    }\n+\n+  /* Perform the search.\n+\n+     The loop is kept simple by allocating [N + pattern-length - 1] bytes.\n+     When we've scanned N bytes we copy the trailing bytes to the start and\n+     read in another N bytes.  */\n+\n+  while (search_space_len >= pattern_len)\n+    {\n+      gdb_byte *found_ptr;\n+      unsigned nr_search_bytes\n+\t= std::min (search_space_len, (ULONGEST) search_buf_size);\n+\n+      found_ptr = (gdb_byte *) memmem (search_buf.data (), nr_search_bytes,\n+\t\t\t\t       pattern, pattern_len);\n+\n+      if (found_ptr != NULL)\n+\t{\n+\t  CORE_ADDR found_addr = start_addr + (found_ptr - search_buf.data ());\n+\n+\t  *found_addrp = found_addr;\n+\t  return 1;\n+\t}\n+\n+      /* Not found in this chunk, skip to next chunk.  */\n+\n+      /* Don't let search_space_len wrap here, it's unsigned.  */\n+      if (search_space_len >= chunk_size)\n+\tsearch_space_len -= chunk_size;\n+      else\n+\tsearch_space_len = 0;\n+\n+      if (search_space_len >= pattern_len)\n+\t{\n+\t  unsigned keep_len = search_buf_size - chunk_size;\n+\t  CORE_ADDR read_addr = start_addr + chunk_size + keep_len;\n+\t  int nr_to_read;\n+\n+\t  /* Copy the trailing part of the previous iteration to the front\n+\t     of the buffer for the next iteration.  */\n+\t  gdb_assert (keep_len == pattern_len - 1);\n+\t  if (keep_len > 0)\n+\t    memcpy (&search_buf[0], &search_buf[chunk_size], keep_len);\n+\n+\t  nr_to_read = std::min (search_space_len - keep_len,\n+\t\t\t\t (ULONGEST) chunk_size);\n+\n+\t  if (!read_memory (read_addr, &search_buf[keep_len], nr_to_read))\n+\t    {\n+\t      warning (_(\"Unable to access %s bytes of target \"\n+\t\t\t \"memory at %s, halting search.\"),\n+\t\t       plongest (nr_to_read),\n+\t\t       hex_string (read_addr));\n+\t      return -1;\n+\t    }\n+\n+\t  start_addr += chunk_size;\n+\t}\n+    }\n+\n+  /* Not found.  */\n+\n+  return 0;\n+}"
    },
    {
      "sha": "886d80feaeb6aca4677008175cb3e482d47e48d9",
      "filename": "gdbsupport/search.h",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/search.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a72de73660810536e9bb416d41dc8a6128f91da/gdbsupport/search.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/search.h?ref=4a72de73660810536e9bb416d41dc8a6128f91da",
      "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef COMMON_SEARCH_H\n+#define COMMON_SEARCH_H\n+\n+#include \"gdbsupport/function-view.h\"\n+\n+/* This is needed by the unit test, so appears here.  */\n+#define SEARCH_CHUNK_SIZE 16000\n+\n+/* The type of a callback function that can be used to read memory.\n+   Note that target_read_memory is not used here, because gdbserver\n+   wants to be able to examine trace data when searching, and\n+   target_read_memory does not do this.  */\n+\n+typedef bool target_read_memory_ftype (CORE_ADDR, gdb_byte *, size_t);\n+\n+/* Utility implementation of searching memory.  */\n+extern int simple_search_memory\n+  (gdb::function_view<target_read_memory_ftype> read_memory,\n+   CORE_ADDR start_addr,\n+   ULONGEST search_space_len,\n+   const gdb_byte *pattern,\n+   ULONGEST pattern_len,\n+   CORE_ADDR *found_addrp);\n+\n+#endif /* COMMON_SEARCH_H */"
    }
  ]
}