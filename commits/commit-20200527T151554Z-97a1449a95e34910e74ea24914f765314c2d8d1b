{
  "sha": "97a1449a95e34910e74ea24914f765314c2d8d1b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTdhMTQ0OWE5NWUzNDkxMGU3NGVhMjQ5MTRmNzY1MzE0YzJkOGQxYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:54Z"
    },
    "message": "Remove reference to dwarf2_per_cu_data::dwarf2_per_objfile in dw2_do_instantiate_symtab\n\nThis patch begins by removing the per_cu->dwarf2_per_objfile reference\nin dw2_do_instantiate_symtab, instead accepting a dwarf2_per_objfile\nobject as a parameter.  It then fixes the fallouts.  In this context,\nthe dwarf2_per_objfile is generally derived from an objfile passed to a\nquick_symbol_functions callback.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (dw2_do_instantiate_symtab): Add per_objfile\n\tparameter, don't use per_cu->dwarf2_per_objfile.\n\t(dw2_instantiate_symtab): Likewise.\n\t(dw2_find_last_source_symtab): Update.\n\t(dw2_map_expand_apply): Update.\n\t(dw2_lookup_symbol): Update.\n\t(dw2_expand_symtabs_for_function): Update.\n\t(dw2_expand_all_symtabs): Update.\n\t(dw2_expand_symtabs_with_fullname): Update.\n\t(dw2_expand_symtabs_matching_one): Add per_objfile parameter,\n\tdon't use per_cu->dwarf2_per_objfile.\n\t(dw2_expand_marked_cus): Update.\n\t(dw2_find_pc_sect_compunit_symtab): Update.\n\t(dw2_debug_names_lookup_symbol): Update.\n\t(dw2_debug_names_expand_symtabs_for_function): Update.\n\t(dw2_debug_names_map_matching_symbols): Update.\n\t(dwarf2_psymtab::expand_psymtab): Update.\n\nChange-Id: I248300822a09bae8470b65a7122d04fb9cb2b5bc",
    "tree": {
      "sha": "06308df271d2020f102e79b08816d31248df13da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/06308df271d2020f102e79b08816d31248df13da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/97a1449a95e34910e74ea24914f765314c2d8d1b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97a1449a95e34910e74ea24914f765314c2d8d1b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/97a1449a95e34910e74ea24914f765314c2d8d1b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97a1449a95e34910e74ea24914f765314c2d8d1b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9e021579fa12f4546a53d031f1293753305eec4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e021579fa12f4546a53d031f1293753305eec4b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9e021579fa12f4546a53d031f1293753305eec4b"
    }
  ],
  "stats": {
    "total": 104,
    "additions": 66,
    "deletions": 38
  },
  "files": [
    {
      "sha": "e97d21fead6c7ac51c6f9c527425ce85a0775127",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97a1449a95e34910e74ea24914f765314c2d8d1b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97a1449a95e34910e74ea24914f765314c2d8d1b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=97a1449a95e34910e74ea24914f765314c2d8d1b",
      "patch": "@@ -1,3 +1,23 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (dw2_do_instantiate_symtab): Add per_objfile\n+\tparameter, don't use per_cu->dwarf2_per_objfile.\n+\t(dw2_instantiate_symtab): Likewise.\n+\t(dw2_find_last_source_symtab): Update.\n+\t(dw2_map_expand_apply): Update.\n+\t(dw2_lookup_symbol): Update.\n+\t(dw2_expand_symtabs_for_function): Update.\n+\t(dw2_expand_all_symtabs): Update.\n+\t(dw2_expand_symtabs_with_fullname): Update.\n+\t(dw2_expand_symtabs_matching_one): Add per_objfile parameter,\n+\tdon't use per_cu->dwarf2_per_objfile.\n+\t(dw2_expand_marked_cus): Update.\n+\t(dw2_find_pc_sect_compunit_symtab): Update.\n+\t(dw2_debug_names_lookup_symbol): Update.\n+\t(dw2_debug_names_expand_symtabs_for_function): Update.\n+\t(dw2_debug_names_map_matching_symbols): Update.\n+\t(dwarf2_psymtab::expand_psymtab): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.c (struct dwarf2_cu) <dwarf2_cu>: Add parameter."
    },
    {
      "sha": "0595759836522146f38f897284bb1582fd74d2f5",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 46,
      "deletions": 38,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97a1449a95e34910e74ea24914f765314c2d8d1b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97a1449a95e34910e74ea24914f765314c2d8d1b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=97a1449a95e34910e74ea24914f765314c2d8d1b",
      "patch": "@@ -2341,13 +2341,13 @@ load_cu (struct dwarf2_per_cu_data *per_cu, bool skip_partial)\n   dwarf2_find_base_address (per_cu->cu->dies, per_cu->cu);\n }\n \n-/* Read in the symbols for PER_CU.  */\n+/* Read in the symbols for PER_CU in the context of DWARF\"_PER_OBJFILE.  */\n \n static void\n-dw2_do_instantiate_symtab (struct dwarf2_per_cu_data *per_cu, bool skip_partial)\n+dw2_do_instantiate_symtab (dwarf2_per_cu_data *per_cu,\n+\t\t\t   dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\t   bool skip_partial)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n-\n   /* Skip type_unit_groups, reading the type units they contain\n      is handled elsewhere.  */\n   if (per_cu->type_unit_group_p ())\n@@ -2383,22 +2383,23 @@ dw2_do_instantiate_symtab (struct dwarf2_per_cu_data *per_cu, bool skip_partial)\n   age_cached_comp_units (dwarf2_per_objfile);\n }\n \n-/* Ensure that the symbols for PER_CU have been read in.  OBJFILE is\n-   the objfile from which this CU came.  Returns the resulting symbol\n-   table.  */\n+/* Ensure that the symbols for PER_CU have been read in.  DWARF2_PER_OBJFILE is\n+   the per-objfile for which this symtab is instantiated.\n+\n+   Returns the resulting symbol table.  */\n \n static struct compunit_symtab *\n-dw2_instantiate_symtab (struct dwarf2_per_cu_data *per_cu, bool skip_partial)\n+dw2_instantiate_symtab (dwarf2_per_cu_data *per_cu,\n+\t\t\tdwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\tbool skip_partial)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n-\n   gdb_assert (dwarf2_per_objfile->per_bfd->using_index);\n \n   if (!dwarf2_per_objfile->symtab_set_p (per_cu))\n     {\n       free_cached_comp_units freer (dwarf2_per_objfile);\n       scoped_restore decrementer = increment_reading_symtab ();\n-      dw2_do_instantiate_symtab (per_cu, skip_partial);\n+      dw2_do_instantiate_symtab (per_cu, dwarf2_per_objfile, skip_partial);\n       process_cu_includes (dwarf2_per_objfile);\n     }\n \n@@ -3255,7 +3256,8 @@ dw2_find_last_source_symtab (struct objfile *objfile)\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = get_dwarf2_per_objfile (objfile);\n   dwarf2_per_cu_data *dwarf_cu = dwarf2_per_objfile->per_bfd->all_comp_units.back ();\n-  compunit_symtab *cust = dw2_instantiate_symtab (dwarf_cu, false);\n+  compunit_symtab *cust\n+    = dw2_instantiate_symtab (dwarf_cu, dwarf2_per_objfile, false);\n \n   if (cust == NULL)\n     return NULL;\n@@ -3312,7 +3314,7 @@ dw2_map_expand_apply (struct objfile *objfile,\n \n   /* This may expand more than one symtab, and we want to iterate over\n      all of them.  */\n-  dw2_instantiate_symtab (per_cu, false);\n+  dw2_instantiate_symtab (per_cu, per_objfile, false);\n \n   return iterate_over_some_symtabs (name, real_path, objfile->compunit_symtabs,\n \t\t\t\t    last_made, callback);\n@@ -3554,7 +3556,8 @@ dw2_lookup_symbol (struct objfile *objfile, block_enum block_index,\n   while ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n     {\n       struct symbol *sym, *with_opaque = NULL;\n-      struct compunit_symtab *stab = dw2_instantiate_symtab (per_cu, false);\n+      struct compunit_symtab *stab\n+\t= dw2_instantiate_symtab (per_cu, dwarf2_per_objfile, false);\n       const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n       const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n \n@@ -3635,7 +3638,7 @@ dw2_expand_symtabs_for_function (struct objfile *objfile,\n   dw2_symtab_iter_init (&iter, dwarf2_per_objfile, {}, VAR_DOMAIN, func_name);\n \n   while ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n-    dw2_instantiate_symtab (per_cu, false);\n+    dw2_instantiate_symtab (per_cu, dwarf2_per_objfile, false);\n \n }\n \n@@ -3656,7 +3659,7 @@ dw2_expand_all_symtabs (struct objfile *objfile)\n \t be triggered later on.  See PR symtab/23010.  So, tell\n \t dw2_instantiate_symtab to skip partial CUs -- any important\n \t partial CU will be read via DW_TAG_imported_unit anyway.  */\n-      dw2_instantiate_symtab (per_cu, true);\n+      dw2_instantiate_symtab (per_cu, dwarf2_per_objfile, true);\n     }\n }\n \n@@ -3688,7 +3691,7 @@ dw2_expand_symtabs_with_fullname (struct objfile *objfile,\n \n \t  if (filename_cmp (this_fullname, fullname) == 0)\n \t    {\n-\t      dw2_instantiate_symtab (per_cu, false);\n+\t      dw2_instantiate_symtab (per_cu, dwarf2_per_objfile, false);\n \t      break;\n \t    }\n \t}\n@@ -3705,7 +3708,8 @@ dw2_expand_symtabs_matching_symbol\n \n static void\n dw2_expand_symtabs_matching_one\n-  (struct dwarf2_per_cu_data *per_cu,\n+  (dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile,\n    gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify);\n \n@@ -3747,7 +3751,8 @@ dw2_map_matching_symbols\n \tdw2_symtab_iter_init (&iter, dwarf2_per_objfile, block_kind, domain,\n \t\t\t      match_name);\n \twhile ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n-\t  dw2_expand_symtabs_matching_one (per_cu, nullptr, nullptr);\n+\t  dw2_expand_symtabs_matching_one (per_cu, dwarf2_per_objfile, nullptr,\n+\t\t\t\t\t   nullptr);\n \treturn true;\n       });\n     }\n@@ -4530,16 +4535,17 @@ run_test ()\n \n static void\n dw2_expand_symtabs_matching_one\n-  (struct dwarf2_per_cu_data *per_cu,\n+  (dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile,\n    gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify)\n {\n   if (file_matcher == NULL || per_cu->v.quick->mark)\n     {\n-      dwarf2_per_objfile *per_objfile = per_cu->dwarf2_per_objfile;\n       bool symtab_was_null = !per_objfile->symtab_set_p (per_cu);\n \n-      compunit_symtab *symtab = dw2_instantiate_symtab (per_cu, false);\n+      compunit_symtab *symtab\n+\t= dw2_instantiate_symtab (per_cu, per_objfile, false);\n       gdb_assert (symtab != nullptr);\n \n       if (expansion_notify != NULL && symtab_was_null)\n@@ -4553,7 +4559,7 @@ dw2_expand_symtabs_matching_one\n \n static void\n dw2_expand_marked_cus\n-  (struct dwarf2_per_objfile *dwarf2_per_objfile, offset_type idx,\n+  (dwarf2_per_objfile *dwarf2_per_objfile, offset_type idx,\n    gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n    search_domain kind)\n@@ -4627,7 +4633,7 @@ dw2_expand_marked_cus\n \t}\n \n       dwarf2_per_cu_data *per_cu = dwarf2_per_objfile->per_bfd->get_cutu (cu_index);\n-      dw2_expand_symtabs_matching_one (per_cu, file_matcher,\n+      dw2_expand_symtabs_matching_one (per_cu, dwarf2_per_objfile, file_matcher,\n \t\t\t\t       expansion_notify);\n     }\n }\n@@ -4734,8 +4740,8 @@ dw2_expand_symtabs_matching\n \t{\n \t  QUIT;\n \n-\t  dw2_expand_symtabs_matching_one (per_cu, file_matcher,\n-\t\t\t\t\t   expansion_notify);\n+\t  dw2_expand_symtabs_matching_one (per_cu, dwarf2_per_objfile,\n+\t\t\t\t\t   file_matcher, expansion_notify);\n \t}\n       return;\n     }\n@@ -4804,10 +4810,9 @@ dw2_find_pc_sect_compunit_symtab (struct objfile *objfile,\n     warning (_(\"(Internal error: pc %s in read in CU, but not in symtab.)\"),\n \t     paddress (objfile->arch (), pc));\n \n-  result\n-    = recursively_find_pc_sect_compunit_symtab (dw2_instantiate_symtab (data,\n-\t\t\t\t\t\t\t\t\tfalse),\n-\t\t\t\t\t\tpc);\n+  result = recursively_find_pc_sect_compunit_symtab\n+    (dw2_instantiate_symtab (data, per_objfile, false), pc);\n+\n   gdb_assert (result != NULL);\n   return result;\n }\n@@ -5649,7 +5654,8 @@ dw2_debug_names_lookup_symbol (struct objfile *objfile, block_enum block_index,\n   while ((per_cu = iter.next ()) != NULL)\n     {\n       struct symbol *sym, *with_opaque = NULL;\n-      struct compunit_symtab *stab = dw2_instantiate_symtab (per_cu, false);\n+      compunit_symtab *stab\n+\t= dw2_instantiate_symtab (per_cu, dwarf2_per_objfile, false);\n       const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n       const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n \n@@ -5709,7 +5715,7 @@ dw2_debug_names_expand_symtabs_for_function (struct objfile *objfile,\n \n       struct dwarf2_per_cu_data *per_cu;\n       while ((per_cu = iter.next ()) != NULL)\n-\tdw2_instantiate_symtab (per_cu, false);\n+\tdw2_instantiate_symtab (per_cu, dwarf2_per_objfile, false);\n     }\n }\n \n@@ -5748,7 +5754,8 @@ dw2_debug_names_map_matching_symbols\n \n       struct dwarf2_per_cu_data *per_cu;\n       while ((per_cu = iter.next ()) != NULL)\n-\tdw2_expand_symtabs_matching_one (per_cu, nullptr, nullptr);\n+\tdw2_expand_symtabs_matching_one (per_cu, dwarf2_per_objfile, nullptr,\n+\t\t\t\t\t nullptr);\n       return true;\n     });\n \n@@ -5794,8 +5801,8 @@ dw2_debug_names_expand_symtabs_matching\n \t{\n \t  QUIT;\n \n-\t  dw2_expand_symtabs_matching_one (per_cu, file_matcher,\n-\t\t\t\t\t   expansion_notify);\n+\t  dw2_expand_symtabs_matching_one (per_cu, dwarf2_per_objfile,\n+\t\t\t\t\t   file_matcher, expansion_notify);\n \t}\n       return;\n     }\n@@ -5812,8 +5819,8 @@ dw2_debug_names_expand_symtabs_matching\n \n       struct dwarf2_per_cu_data *per_cu;\n       while ((per_cu = iter.next ()) != NULL)\n-\tdw2_expand_symtabs_matching_one (per_cu, file_matcher,\n-\t\t\t\t\t expansion_notify);\n+\tdw2_expand_symtabs_matching_one (per_cu, dwarf2_per_objfile,\n+\t\t\t\t\t file_matcher, expansion_notify);\n       return true;\n     });\n }\n@@ -9035,7 +9042,8 @@ dwarf2_psymtab::expand_psymtab (struct objfile *objfile)\n \n   expand_dependencies (objfile);\n \n-  dw2_do_instantiate_symtab (per_cu_data, false);\n+  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n+  dw2_do_instantiate_symtab (per_cu_data, per_objfile, false);\n   gdb_assert (get_compunit_symtab (objfile) != nullptr);\n }\n "
    }
  ]
}