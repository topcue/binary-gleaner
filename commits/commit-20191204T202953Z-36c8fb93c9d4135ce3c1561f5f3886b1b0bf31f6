{
  "sha": "36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzZjOGZiOTNjOWQ0MTM1Y2UzYzE1NjFmNWYzODg2YjFiMGJmMzFmNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-03T10:52:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-04T20:29:53Z"
    },
    "message": "gdb/fortran: Support for single/double type modifiers\n\nExtend the Fortran parser to support 'single precision' and 'double\nprecision' types as well 'single complex' and 'double complex' types.\n\ngdb/ChangeLog:\n\n\t* f-exp.y (COMPLEX_KEYWORD, SINGLE, DOUBLE, PRECISION): New\n\ttokens.\n\t(typebase): New patterns for complex, single/double precision, and\n\tsingle/double complex.\n\t(f77_keywords): Change token for complex keyword, and add single,\n\tdouble, and precision keywords.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/type-kinds.exp (test_cast_1_to_type_kind): Handle\n\tcasting to type with no kind specified.\n\t(test_basic_parsing_of_type_kinds): Additional tests for types\n\twith no kind specified, and add tests for single/double\n\tprecision/complex types.\n\nChange-Id: I9c82f4d392c58607747bd08862c1ee330723a1ba",
    "tree": {
      "sha": "cc79ca29a04f21c9712ba4b9121170ddfdb84aab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cc79ca29a04f21c9712ba4b9121170ddfdb84aab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6170c2c141866bc3fd158db17a1e0b87b43ef07",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6170c2c141866bc3fd158db17a1e0b87b43ef07",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6170c2c141866bc3fd158db17a1e0b87b43ef07"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 52,
    "deletions": 3
  },
  "files": [
    {
      "sha": "89b68b3a9b318186bfc2615ae0860ecc3a13c4ec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\n+\t* f-exp.y (COMPLEX_KEYWORD, SINGLE, DOUBLE, PRECISION): New\n+\ttokens.\n+\t(typebase): New patterns for complex, single/double precision, and\n+\tsingle/double complex.\n+\t(f77_keywords): Change token for complex keyword, and add single,\n+\tdouble, and precision keywords.\n+\n 2019-12-04  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* avr-tdep.c (_initialize_avr_tdep): Improve help of command"
    },
    {
      "sha": "a9c9583f9a8a9691dcc7a4ba1ed908a69a681ff8",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
      "patch": "@@ -167,8 +167,10 @@ static int parse_number (struct parser_state *, const char *, int,\n %token INT_KEYWORD INT_S2_KEYWORD LOGICAL_S1_KEYWORD LOGICAL_S2_KEYWORD \n %token LOGICAL_S8_KEYWORD\n %token LOGICAL_KEYWORD REAL_KEYWORD REAL_S8_KEYWORD REAL_S16_KEYWORD \n+%token COMPLEX_KEYWORD\n %token COMPLEX_S8_KEYWORD COMPLEX_S16_KEYWORD COMPLEX_S32_KEYWORD \n %token BOOL_AND BOOL_OR BOOL_NOT   \n+%token SINGLE DOUBLE PRECISION\n %token <lval> CHARACTER \n \n %token <voidval> DOLLAR_VARIABLE\n@@ -617,12 +619,22 @@ typebase  /* Implements (approximately): (type-qualifier)* type-specifier */\n \t\t\t{ $$ = parse_f_type (pstate)->builtin_real_s8; }\n \t|\tREAL_S16_KEYWORD\n \t\t\t{ $$ = parse_f_type (pstate)->builtin_real_s16; }\n+\t|\tCOMPLEX_KEYWORD\n+\t\t\t{ $$ = parse_f_type (pstate)->builtin_complex_s8; }\n \t|\tCOMPLEX_S8_KEYWORD\n \t\t\t{ $$ = parse_f_type (pstate)->builtin_complex_s8; }\n \t|\tCOMPLEX_S16_KEYWORD \n \t\t\t{ $$ = parse_f_type (pstate)->builtin_complex_s16; }\n \t|\tCOMPLEX_S32_KEYWORD \n \t\t\t{ $$ = parse_f_type (pstate)->builtin_complex_s32; }\n+\t|\tSINGLE PRECISION\n+\t\t\t{ $$ = parse_f_type (pstate)->builtin_real;}\n+\t|\tDOUBLE PRECISION\n+\t\t\t{ $$ = parse_f_type (pstate)->builtin_real_s8;}\n+\t|\tSINGLE COMPLEX_KEYWORD\n+\t\t\t{ $$ = parse_f_type (pstate)->builtin_complex_s8;}\n+\t|\tDOUBLE COMPLEX_KEYWORD\n+\t\t\t{ $$ = parse_f_type (pstate)->builtin_complex_s16;}\n \t;\n \n nonempty_typelist\n@@ -956,10 +968,13 @@ static const struct token f77_keywords[] =\n   { \"integer\", INT_KEYWORD, BINOP_END, true },\n   { \"logical\", LOGICAL_KEYWORD, BINOP_END, true },\n   { \"real_16\", REAL_S16_KEYWORD, BINOP_END, true },\n-  { \"complex\", COMPLEX_S8_KEYWORD, BINOP_END, true },\n+  { \"complex\", COMPLEX_KEYWORD, BINOP_END, true },\n   { \"sizeof\", SIZEOF, BINOP_END, true },\n   { \"real_8\", REAL_S8_KEYWORD, BINOP_END, true },\n   { \"real\", REAL_KEYWORD, BINOP_END, true },\n+  { \"single\", SINGLE, BINOP_END, true },\n+  { \"double\", DOUBLE, BINOP_END, true },\n+  { \"precision\", PRECISION, BINOP_END, true },\n   /* The following correspond to actual functions in Fortran and are case\n      insensitive.  */\n   { \"kind\", KIND, BINOP_END, false },"
    },
    {
      "sha": "8df282c6b837e9ef5e4d6c7e9c41de4af648ebcf",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
      "patch": "@@ -1,3 +1,11 @@\n+2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/type-kinds.exp (test_cast_1_to_type_kind): Handle\n+\tcasting to type with no kind specified.\n+\t(test_basic_parsing_of_type_kinds): Additional tests for types\n+\twith no kind specified, and add tests for single/double\n+\tprecision/complex types.\n+\n 2019-12-04  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.base/endianity.c (struct other) <x>: New field."
    },
    {
      "sha": "725c3f0cecfe75ecfd86ae14e8f9a3dab4ed3c22",
      "filename": "gdb/testsuite/gdb.fortran/type-kinds.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/testsuite/gdb.fortran/type-kinds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6/gdb/testsuite/gdb.fortran/type-kinds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/type-kinds.exp?ref=36c8fb93c9d4135ce3c1561f5f3886b1b0bf31f6",
      "patch": "@@ -23,9 +23,15 @@ if { [skip_fortran_tests] } { continue }\n \n # Cast the value 1 to the type 'BASE_TYPE (kind=TYPE_KIND)'.  The\n # expected result of the cast is CAST_RESULT, and the size of the\n-# value returned by the cast should be SIZE_RESULT.\n+# value returned by the cast should be SIZE_RESULT.  If TYPE_KIND is\n+# the empty string then the cast is done to just 'BASE_TYPE'.\n proc test_cast_1_to_type_kind {base_type type_kind cast_result size_result} {\n-    set type_string \"$base_type (kind=$type_kind)\"\n+    if { $type_kind != \"\" } {\n+\tset kind_string \" (kind=$type_kind)\"\n+    } else {\n+\tset kind_string \"\"\n+    }\n+    set type_string \"${base_type}${kind_string}\"\n     gdb_test \"p (($type_string) 1)\" \" = $cast_result\"\n     gdb_test \"p sizeof (($type_string) 1)\" \" = $size_result\"\n }\n@@ -34,21 +40,31 @@ proc test_cast_1_to_type_kind {base_type type_kind cast_result size_result} {\n proc test_basic_parsing_of_type_kinds {} {\n     test_cast_1_to_type_kind \"character\" \"1\" \"1 '\\\\\\\\001'\" \"1\"\n \n+    test_cast_1_to_type_kind \"complex\" \"\" \"\\\\(1,0\\\\)\" \"8\"\n     test_cast_1_to_type_kind \"complex\" \"4\" \"\\\\(1,0\\\\)\" \"8\"\n     test_cast_1_to_type_kind \"complex\" \"8\" \"\\\\(1,0\\\\)\" \"16\"\n     test_cast_1_to_type_kind \"complex\" \"16\" \"\\\\(1,0\\\\)\" \"32\"\n \n+    test_cast_1_to_type_kind \"real\" \"\" \"1\" \"4\"\n     test_cast_1_to_type_kind \"real\" \"4\" \"1\" \"4\"\n     test_cast_1_to_type_kind \"real\" \"8\" \"1\" \"8\"\n     test_cast_1_to_type_kind \"real\" \"16\" \"1\" \"16\"\n \n+    test_cast_1_to_type_kind \"logical\" \"\" \"\\\\.TRUE\\\\.\" \"4\"\n     test_cast_1_to_type_kind \"logical\" \"1\" \"\\\\.TRUE\\\\.\" \"1\"\n     test_cast_1_to_type_kind \"logical\" \"4\" \"\\\\.TRUE\\\\.\" \"4\"\n     test_cast_1_to_type_kind \"logical\" \"8\" \"\\\\.TRUE\\\\.\" \"8\"\n \n+    test_cast_1_to_type_kind \"integer\" \"\" \"1\" \"4\"\n     test_cast_1_to_type_kind \"integer\" \"2\" \"1\" \"2\"\n     test_cast_1_to_type_kind \"integer\" \"4\" \"1\" \"4\"\n     test_cast_1_to_type_kind \"integer\" \"8\" \"1\" \"8\"\n+\n+    test_cast_1_to_type_kind \"double precision\" \"\" \"1\" \"8\"\n+    test_cast_1_to_type_kind \"single precision\" \"\" \"1\" \"4\"\n+\n+    test_cast_1_to_type_kind \"double complex\" \"\" \"\\\\(1,0\\\\)\" \"16\"\n+    test_cast_1_to_type_kind \"single complex\" \"\" \"\\\\(1,0\\\\)\" \"8\"\n }\n \n proc test_parsing_invalid_type_kinds {} {"
    }
  ]
}