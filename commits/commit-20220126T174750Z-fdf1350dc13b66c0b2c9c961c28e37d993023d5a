{
  "sha": "fdf1350dc13b66c0b2c9c961c28e37d993023d5a",
  "node_id": "C_kwDOANOeidoAKGZkZjEzNTBkYzEzYjY2YzBiMmM5Yzk2MWMyOGUzN2Q5OTMwMjNkNWE",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-25T03:11:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2022-01-26T17:47:50Z"
    },
    "message": "gdb: convert maintenance target-async and target-non-stop settings to callbacks\n\nThis simplifies things a bit, as we don't need two variables and think\nabout reverting target_async_permitted_1 and target_non_stop_enabled_1\nvalues if we can't change the setting.\n\nChange-Id: I36acab045dacf02ae1988486cfdb27c1dff309f6",
    "tree": {
      "sha": "e82000d3b7010a8cec20342ab03739c3d407bb00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e82000d3b7010a8cec20342ab03739c3d407bb00"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fdf1350dc13b66c0b2c9c961c28e37d993023d5a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdf1350dc13b66c0b2c9c961c28e37d993023d5a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fdf1350dc13b66c0b2c9c961c28e37d993023d5a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdf1350dc13b66c0b2c9c961c28e37d993023d5a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "91ddba836c22cb95fef94a422d8dc573591eb4ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91ddba836c22cb95fef94a422d8dc573591eb4ae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/91ddba836c22cb95fef94a422d8dc573591eb4ae"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 32,
    "deletions": 36
  },
  "files": [
    {
      "sha": "f3f1c80391fae7df5e17959f5b6793dc9b13ecd8",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 32,
      "deletions": 36,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdf1350dc13b66c0b2c9c961c28e37d993023d5a/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdf1350dc13b66c0b2c9c961c28e37d993023d5a/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=fdf1350dc13b66c0b2c9c961c28e37d993023d5a",
      "patch": "@@ -4370,27 +4370,24 @@ target_thread_events (int enable)\n    just for maintainers to use when debugging gdb.  */\n bool target_async_permitted = true;\n \n-/* The set command writes to this variable.  If the inferior is\n-   executing, target_async_permitted is *not* updated.  */\n-static bool target_async_permitted_1 = true;\n-\n static void\n-maint_set_target_async_command (const char *args, int from_tty,\n-\t\t\t\tstruct cmd_list_element *c)\n+set_maint_target_async (bool permitted)\n {\n   if (have_live_inferiors ())\n-    {\n-      target_async_permitted_1 = target_async_permitted;\n-      error (_(\"Cannot change this setting while the inferior is running.\"));\n-    }\n+    error (_(\"Cannot change this setting while the inferior is running.\"));\n \n-  target_async_permitted = target_async_permitted_1;\n+  target_async_permitted = permitted;\n+}\n+\n+static bool\n+get_maint_target_async ()\n+{\n+  return target_async_permitted;\n }\n \n static void\n-maint_show_target_async_command (struct ui_file *file, int from_tty,\n-\t\t\t\t struct cmd_list_element *c,\n-\t\t\t\t const char *value)\n+show_maint_target_async (ui_file *file, int from_tty,\n+\t\t\t cmd_list_element *c, const char *value)\n {\n   fprintf_filtered (file,\n \t\t    _(\"Controlling the inferior in \"\n@@ -4442,31 +4439,28 @@ exists_non_stop_target ()\n    mode.  This is just for maintainers to use when debugging gdb.  */\n enum auto_boolean target_non_stop_enabled = AUTO_BOOLEAN_AUTO;\n \n-/* The set command writes to this variable.  If the inferior is\n-   executing, target_non_stop_enabled is *not* updated.  */\n-static enum auto_boolean target_non_stop_enabled_1 = AUTO_BOOLEAN_AUTO;\n-\n-/* Implementation of \"maint set target-non-stop\".  */\n+/* Set callback for maint target-non-stop setting.  */\n \n static void\n-maint_set_target_non_stop_command (const char *args, int from_tty,\n-\t\t\t\t   struct cmd_list_element *c)\n+set_maint_target_non_stop (auto_boolean enabled)\n {\n   if (have_live_inferiors ())\n-    {\n-      target_non_stop_enabled_1 = target_non_stop_enabled;\n-      error (_(\"Cannot change this setting while the inferior is running.\"));\n-    }\n+    error (_(\"Cannot change this setting while the inferior is running.\"));\n \n-  target_non_stop_enabled = target_non_stop_enabled_1;\n+  target_non_stop_enabled = enabled;\n }\n \n-/* Implementation of \"maint show target-non-stop\".  */\n+/* Get callback for maint target-non-stop setting.  */\n+\n+static auto_boolean\n+get_maint_target_non_stop ()\n+{\n+  return target_non_stop_enabled;\n+}\n \n static void\n-maint_show_target_non_stop_command (struct ui_file *file, int from_tty,\n-\t\t\t\t    struct cmd_list_element *c,\n-\t\t\t\t    const char *value)\n+show_maint_target_non_stop (ui_file *file, int from_tty,\n+\t\t\t    cmd_list_element *c, const char *value)\n {\n   if (target_non_stop_enabled == AUTO_BOOLEAN_AUTO)\n     fprintf_filtered (file,\n@@ -4572,22 +4566,24 @@ result in significant performance improvement for remote targets.\"),\n \t   &maintenanceprintlist);\n \n   add_setshow_boolean_cmd (\"target-async\", no_class,\n-\t\t\t   &target_async_permitted_1, _(\"\\\n+\t\t\t   _(\"\\\n Set whether gdb controls the inferior in asynchronous mode.\"), _(\"\\\n Show whether gdb controls the inferior in asynchronous mode.\"), _(\"\\\n Tells gdb whether to control the inferior in asynchronous mode.\"),\n-\t\t\t   maint_set_target_async_command,\n-\t\t\t   maint_show_target_async_command,\n+\t\t\t   set_maint_target_async,\n+\t\t\t   get_maint_target_async,\n+\t\t\t   show_maint_target_async,\n \t\t\t   &maintenance_set_cmdlist,\n \t\t\t   &maintenance_show_cmdlist);\n \n   add_setshow_auto_boolean_cmd (\"target-non-stop\", no_class,\n-\t\t\t\t&target_non_stop_enabled_1, _(\"\\\n+\t\t\t\t_(\"\\\n Set whether gdb always controls the inferior in non-stop mode.\"), _(\"\\\n Show whether gdb always controls the inferior in non-stop mode.\"), _(\"\\\n Tells gdb whether to control the inferior in non-stop mode.\"),\n-\t\t\t   maint_set_target_non_stop_command,\n-\t\t\t   maint_show_target_non_stop_command,\n+\t\t\t   set_maint_target_non_stop,\n+\t\t\t   get_maint_target_non_stop,\n+\t\t\t   show_maint_target_non_stop,\n \t\t\t   &maintenance_set_cmdlist,\n \t\t\t   &maintenance_show_cmdlist);\n "
    }
  ]
}