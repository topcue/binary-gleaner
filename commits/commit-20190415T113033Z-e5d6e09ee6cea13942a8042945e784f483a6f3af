{
  "sha": "e5d6e09ee6cea13942a8042945e784f483a6f3af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTVkNmUwOWVlNmNlYTEzOTQyYTgwNDI5NDVlNzg0ZjQ4M2E2ZjNhZg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-04-15T10:18:57Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-04-15T11:30:33Z"
    },
    "message": "[binutils, ARM, 5/16] BF insns infrastructure with new global reloc R_ARM_THM_BF16\n\nThis patch is part of a series of patches to add support for Armv8.1-M Mainline instructions to binutils.\nThis adds infrastructure for the BF instructions which is one of the first instructions in Arm that have more than one relocations in them.\n\nThis is the third infrastructure patch that adds a new relocation R_ARM_THM_BF16.\n\nThe inconsistency between external R_ARM_THM_BF16 and internal\nBFD_RELOC_ARM_THUMB_BF17 is because internally we count the static bit-0 of the immediate and we don't externally.\n\nChangeLog entries are as follows :\n\n*** bfd/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* reloc.c (BFD_RELOC_ARM_THUMB_BF17): New enum.\n\t* bfd-in2.h: Regenerated.\n\t* libbfd.h: Regenerated.\n\t* bfd-elf32-arm.c (elf32_arm_howto_table_1): New entry for R_ARM_THM_BF16.\n\t(elf32_arm_reloc_map elf32_arm_reloc_map): Map BFD_RELOC_ARM_THUMB_BF17\n\tand R_ARM_THM_BF16 together.\n\t(get_value_helper): New reloc helper.\n\t(elf32_arm_final_link_relocate): New switch case for R_ARM_THM_BF16.\n\n*** elfcpp/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm.h (R_ARM_THM_BF16): New relocation code.\n\n*** gas/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-arm.c (md_pcrel_from_section): New switch case for\n\tBFD_RELOC_ARM_THUMB_BF17.\n\t(md_appdy_fix): Likewise.\n\t(tc_gen_reloc): Likewise.\n\n*** include/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* elf/arm.h (START_RELOC_NUMBERS): New entry for R_ARM_THM_BF16.\n\n*** opcodes/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm-dis.c (print_insn_thumb32): Updated to accept new %W pattern.",
    "tree": {
      "sha": "682983efcb6e4ceb1ec5cbebfbb196abaebf3b94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/682983efcb6e4ceb1ec5cbebfbb196abaebf3b94"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e5d6e09ee6cea13942a8042945e784f483a6f3af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5d6e09ee6cea13942a8042945e784f483a6f3af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e5d6e09ee6cea13942a8042945e784f483a6f3af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5d6e09ee6cea13942a8042945e784f483a6f3af/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2b0ab597857bfe9d7c8742ff50bbb77c70936c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2b0ab597857bfe9d7c8742ff50bbb77c70936c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2b0ab597857bfe9d7c8742ff50bbb77c70936c4"
    }
  ],
  "stats": {
    "total": 213,
    "additions": 211,
    "deletions": 2
  },
  "files": [
    {
      "sha": "992e5706b3a764656dc2e681720f5b119bbac5be",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1,3 +1,14 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* reloc.c (BFD_RELOC_ARM_THUMB_BF17): New enum.\n+\t* bfd-in2.h: Regenerated.\n+\t* libbfd.h: Regenerated.\n+\t* bfd-elf32-arm.c (elf32_arm_howto_table_1): New entry for R_ARM_THM_BF16.\n+\t(elf32_arm_reloc_map elf32_arm_reloc_map): Map BFD_RELOC_ARM_THUMB_BF17\n+\tand R_ARM_THM_BF16 together.\n+\t(get_value_helper): New reloc helper.\n+\t(elf32_arm_final_link_relocate): New switch case for R_ARM_THM_BF16.\n+\n 2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n \n \t* reloc.c (BFD_RELOC_THUMB_PCREL_BRANCH5): New enum."
    },
    {
      "sha": "b5922ff222b48e0699a814c9742e0a61cdca9cb8",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -3567,6 +3567,9 @@ field in the instruction.  */\n /* ARM 5-bit pc-relative branch for Branch Future instructions.  */\n   BFD_RELOC_THUMB_PCREL_BRANCH5,\n \n+/* ARM 17-bit pc-relative branch for Branch Future instructions.  */\n+  BFD_RELOC_ARM_THUMB_BF17,\n+\n /* Thumb 7-, 9-, 12-, 20-, 23-, and 25-bit pc-relative branches.\n The lowest bit must be zero and is not stored in the instruction.\n Note that the corresponding ELF R_ARM_THM_JUMPnn constant has an"
    },
    {
      "sha": "2a209dab292cbccbf8c0fd54c37ce20d9bc29d71",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 114,
      "deletions": 1,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1742,6 +1742,20 @@ static reloc_howto_type elf32_arm_howto_table_1[] =\n \t 0x00000000,\t\t/* src_mask.  */\n \t 0x00000000,\t\t/* dst_mask.  */\n \t FALSE),\t\t/* pcrel_offset.  */\n+  /* Relocations for Armv8.1-M Mainline.  */\n+  HOWTO (R_ARM_THM_BF16,\t/* type.  */\n+\t 0,\t\t\t/* rightshift.  */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long).  */\n+\t 16,\t\t\t/* bitsize.  */\n+\t TRUE,\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t/* bitpos.  */\n+\t complain_overflow_dont,/* do not complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t/* special_function.  */\n+\t \"R_ARM_THM_BF16\",\t/* name.  */\n+\t FALSE,\t\t\t/* partial_inplace.  */\n+\t 0x001f0ffe,\t\t/* src_mask.  */\n+\t 0x001f0ffe,\t\t/* dst_mask.  */\n+\t TRUE),\t\t\t/* pcrel_offset.  */\n };\n \n /* 160 onwards: */\n@@ -2053,7 +2067,8 @@ static const struct elf32_arm_reloc_map elf32_arm_reloc_map[] =\n     {BFD_RELOC_ARM_THUMB_ALU_ABS_G3_NC, R_ARM_THM_ALU_ABS_G3_NC},\n     {BFD_RELOC_ARM_THUMB_ALU_ABS_G2_NC, R_ARM_THM_ALU_ABS_G2_NC},\n     {BFD_RELOC_ARM_THUMB_ALU_ABS_G1_NC, R_ARM_THM_ALU_ABS_G1_NC},\n-    {BFD_RELOC_ARM_THUMB_ALU_ABS_G0_NC, R_ARM_THM_ALU_ABS_G0_NC}\n+    {BFD_RELOC_ARM_THUMB_ALU_ABS_G0_NC, R_ARM_THM_ALU_ABS_G0_NC},\n+    {BFD_RELOC_ARM_THUMB_BF17, R_ARM_THM_BF16}\n   };\n \n static reloc_howto_type *\n@@ -10250,6 +10265,59 @@ identify_add_or_sub (bfd_vma insn)\n   return 0;\n }\n \n+/* Helper function to compute the Addend for Armv8.1-M Mainline relocations.  */\n+static bfd_vma\n+get_value_helper (bfd_vma plt_offset,\n+\t\t  asection *splt,\n+\t\t  asection *input_section,\n+\t\t  asection *sym_sec,\n+\t\t  struct elf_link_hash_entry * h,\n+\t\t  struct bfd_link_info *info,\n+\t\t  bfd *input_bfd,\n+\t\t  Elf_Internal_Rela *rel,\n+\t\t  const char *sym_name,\n+\t\t  unsigned char st_type,\n+\t\t  struct elf32_arm_link_hash_table *globals,\n+\t\t  bfd_boolean *unresolved_reloc_p)\n+{\n+  bfd_vma value = 0;\n+  enum arm_st_branch_type branch_type;\n+  enum elf32_arm_stub_type stub_type = arm_stub_none;\n+  struct elf32_arm_stub_hash_entry *stub_entry;\n+  struct elf32_arm_link_hash_entry *hash\n+    = (struct elf32_arm_link_hash_entry *)h;\n+\n+\n+  if (plt_offset != (bfd_vma) -1)\n+    {\n+      value = (splt->output_section->vma\n+\t       + splt->output_offset\n+\t       + plt_offset);\n+      value -= PLT_THUMB_STUB_SIZE;\n+      *unresolved_reloc_p = FALSE;\n+    }\n+\n+  stub_type = arm_type_of_stub (info, input_section, rel,\n+\t\t\t\tst_type, &branch_type,\n+\t\t\t\thash, value, sym_sec,\n+\t\t\t\tinput_bfd, sym_name);\n+\n+  if (stub_type != arm_stub_none)\n+    {\n+      stub_entry = elf32_arm_get_stub_entry (input_section,\n+\t\t\t\t\t     sym_sec, h,\n+\t\t\t\t\t     rel, globals,\n+\t\t\t\t\t     stub_type);\n+\t    if (stub_entry != NULL)\n+\t      {\n+\t\tvalue = (stub_entry->stub_offset\n+\t\t\t + stub_entry->stub_sec->output_offset\n+\t\t\t + stub_entry->stub_sec->output_section->vma);\n+\t      }\n+\t  }\n+  return value;\n+}\n+\n /* Perform a relocation as part of a final link.  */\n \n static bfd_reloc_status_type\n@@ -12856,6 +12924,51 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n       *unresolved_reloc_p = FALSE;\n       return bfd_reloc_ok;\n \n+    case R_ARM_THM_BF16:\n+      {\n+\tbfd_vma relocation;\n+\tbfd_vma upper_insn = bfd_get_16 (input_bfd, hit_data);\n+\tbfd_vma lower_insn = bfd_get_16 (input_bfd, hit_data + 2);\n+\n+\tif (globals->use_rel)\n+\t  {\n+\t    bfd_vma immA  = (upper_insn & 0x001f);\n+\t    bfd_vma immB  = (lower_insn & 0x07fe) >> 1;\n+\t    bfd_vma immC  = (lower_insn & 0x0800) >> 11;\n+\t    addend  = (immA << 12);\n+\t    addend |= (immB << 2);\n+\t    addend |= (immC << 1);\n+\t    addend |= 1;\n+\t    /* Sign extend.  */\n+\t    addend = (addend & 0x10000) ? addend - (1 << 17) : addend;\n+\t  }\n+\n+\tvalue = get_value_helper (plt_offset, splt, input_section, sym_sec, h,\n+\t\t\t\t  info, input_bfd, rel, sym_name, st_type,\n+\t\t\t\t  globals, unresolved_reloc_p);\n+\n+\trelocation  = value + addend;\n+\trelocation -= (input_section->output_section->vma\n+\t\t       + input_section->output_offset\n+\t\t       + rel->r_offset);\n+\n+\t/* Put RELOCATION back into the insn.  */\n+\t{\n+\t  bfd_vma immA = (relocation & 0x0001f000) >> 12;\n+\t  bfd_vma immB = (relocation & 0x00000ffc) >> 2;\n+\t  bfd_vma immC = (relocation & 0x00000002) >> 1;\n+\n+\t  upper_insn = (upper_insn & 0xffe0) | immA;\n+\t  lower_insn = (lower_insn & 0xf001) | (immC << 11) | (immB << 1);\n+\t}\n+\n+\t/* Put the relocated value back in the object file:  */\n+\tbfd_put_16 (input_bfd, upper_insn, hit_data);\n+\tbfd_put_16 (input_bfd, lower_insn, hit_data + 2);\n+\n+\treturn bfd_reloc_ok;\n+      }\n+\n     default:\n       return bfd_reloc_notsupported;\n     }"
    },
    {
      "sha": "4a3fa144ad25b5a800501c352e6f0aa79509bb27",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1530,6 +1530,7 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_ARM_PCREL_CALL\",\n   \"BFD_RELOC_ARM_PCREL_JUMP\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH5\",\n+  \"BFD_RELOC_ARM_THUMB_BF17\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH7\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH9\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH12\","
    },
    {
      "sha": "b351d120d1d1894ba64a3eb2d32e21884648fd6a",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -3019,6 +3019,11 @@ ENUM\n ENUMDOC\n   ARM 5-bit pc-relative branch for Branch Future instructions.\n \n+ENUM\n+  BFD_RELOC_ARM_THUMB_BF17\n+ENUMDOC\n+  ARM 17-bit pc-relative branch for Branch Future instructions.\n+\n ENUM\n   BFD_RELOC_THUMB_PCREL_BRANCH7\n ENUMX"
    },
    {
      "sha": "7770f7e88834504e9b74849b51a76789e64ac8a8",
      "filename": "elfcpp/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/elfcpp/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/elfcpp/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/ChangeLog?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm.h (R_ARM_THM_BF16): New relocation code.\n+\n 2018-06-24  Nick Clifton  <nickc@redhat.com>\n \n \t2.32 branch created."
    },
    {
      "sha": "b4cd67f87ce49288ee40adb7653443b493774267",
      "filename": "elfcpp/arm.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/elfcpp/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/elfcpp/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/arm.h?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -194,7 +194,10 @@ enum\n   R_ARM_ME_TOO = 128,\t\t// Obsolete\n   R_ARM_THM_TLS_DESCSEQ16 = 129,// Static\tThumb16\n   R_ARM_THM_TLS_DESCSEQ32 = 130,// Static\tThumb32\n-  // 131 - 139\t\t\tUnallocated\n+  // 131 - 135\t\t\tUnallocated\n+  // Relocations for Armv8.1-M Mainline (BF/BFL)\n+  R_ARM_THM_BF16 = 136,\t\t// Static       Thumb32 ((S + A) | T) \u2013 P\n+  // 139\t\t\tUnallocated\n   // 140 - 159\t\t\tDynamic\t\tReserved for future allocation\n   R_ARM_IRELATIVE = 160,\t// Dynamic\n   // 161 - 255\t\t\tUnallocated"
    },
    {
      "sha": "156881b557322ee85f4b322c13f8d1a046d25604",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-arm.c (md_pcrel_from_section): New switch case for\n+\tBFD_RELOC_ARM_THUMB_BF17.\n+\t(md_appdy_fix): Likewise.\n+\t(tc_gen_reloc): Likewise.\n+\n 2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/tc-arm.c (ARM_IT_MAX_RELOCS): New macro."
    },
    {
      "sha": "d3a21d63575c194051606bb723a224d3c10334e9",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -22853,6 +22853,7 @@ md_pcrel_from_section (fixS * fixP, segT seg)\n     case BFD_RELOC_THUMB_PCREL_BRANCH12:\n     case BFD_RELOC_THUMB_PCREL_BRANCH20:\n     case BFD_RELOC_THUMB_PCREL_BRANCH25:\n+    case BFD_RELOC_ARM_THUMB_BF17:\n       return base + 4;\n \n     case BFD_RELOC_THUMB_PCREL_BRANCH23:\n@@ -24750,6 +24751,39 @@ md_apply_fix (fixS *\tfixP,\n \t}\n       break;\n \n+    case BFD_RELOC_ARM_THUMB_BF17:\n+      if (fixP->fx_addsy\n+\t  && (S_GET_SEGMENT (fixP->fx_addsy) == seg)\n+\t  && !S_FORCE_RELOC (fixP->fx_addsy, TRUE)\n+\t  && ARM_IS_FUNC (fixP->fx_addsy)\n+\t  && ARM_CPU_HAS_FEATURE (selected_cpu, arm_ext_v8_1m_main))\n+\t{\n+\t  /* Force a relocation for a branch 17 bits wide.  */\n+\t  fixP->fx_done = 0;\n+\t}\n+\n+      if (v8_1_branch_value_check (value, 17, TRUE) == FAIL)\n+\tas_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t      BAD_BRANCH_OFF);\n+\n+      if (fixP->fx_done || !seg->use_rela_p)\n+\t{\n+\t  offsetT newval2;\n+\t  addressT immA, immB, immC;\n+\n+\t  immA = (value & 0x0001f000) >> 12;\n+\t  immB = (value & 0x00000ffc) >> 2;\n+\t  immC = (value & 0x00000002) >> 1;\n+\n+\t  newval   = md_chars_to_number (buf, THUMB_SIZE);\n+\t  newval2  = md_chars_to_number (buf + THUMB_SIZE, THUMB_SIZE);\n+\t  newval  |= immA;\n+\t  newval2 |= (immC << 11) | (immB << 1);\n+\t  md_number_to_chars (buf, newval, THUMB_SIZE);\n+\t  md_number_to_chars (buf + THUMB_SIZE, newval2, THUMB_SIZE);\n+\t}\n+      break;\n+\n     case BFD_RELOC_ARM_V4BX:\n       /* This will need to go in the object file.  */\n       fixP->fx_done = 0;\n@@ -24932,6 +24966,7 @@ tc_gen_reloc (asection *section, fixS *fixp)\n     case BFD_RELOC_ARM_GOTFUNCDESC:\n     case BFD_RELOC_ARM_GOTOFFFUNCDESC:\n     case BFD_RELOC_ARM_FUNCDESC:\n+    case BFD_RELOC_ARM_THUMB_BF17:\n       code = fixp->fx_r_type;\n       break;\n "
    },
    {
      "sha": "f60e7a390b9a8b22aebfc37803615013fd9832b5",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* elf/arm.h (START_RELOC_NUMBERS): New entry for R_ARM_THM_BF16.\n+\n 2019-04-15  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* elf/arm.h (TAG_CPU_ARCH_V8_1M_MAIN): new macro."
    },
    {
      "sha": "2c6d4ef18a96e10fb206248df151c44a67757042",
      "filename": "include/elf/arm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/include/elf/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/include/elf/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/arm.h?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -241,6 +241,7 @@ START_RELOC_NUMBERS (elf_arm_reloc_type)\n   RELOC_NUMBER (R_ARM_THM_ALU_ABS_G1_NC,133)\n   RELOC_NUMBER (R_ARM_THM_ALU_ABS_G2_NC,134)\n   RELOC_NUMBER (R_ARM_THM_ALU_ABS_G3_NC,135)\n+  RELOC_NUMBER (R_ARM_THM_BF16,\t\t136)\n \n   RELOC_NUMBER (R_ARM_IRELATIVE,      \t160)\n   RELOC_NUMBER (R_ARM_GOTFUNCDESC,    \t161)"
    },
    {
      "sha": "fedc7ce164514996fd0a687b3db14f3bdd490fe3",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm-dis.c (print_insn_thumb32): Updated to accept new %W pattern.\n+\n 2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n \n \t* arm-dis.c (print_insn_thumb32): Updated to accept new %G pattern."
    },
    {
      "sha": "4a5609ae884ab47833e4854d529c38bbb7f57d26",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5d6e09ee6cea13942a8042945e784f483a6f3af/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5d6e09ee6cea13942a8042945e784f483a6f3af/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=e5d6e09ee6cea13942a8042945e784f483a6f3af",
      "patch": "@@ -2714,6 +2714,7 @@ static const struct opcode16 thumb_opcodes[] =\n        %E\t\tprint the lsb and width fields of a bfc/bfi instruction\n        %F\t\tprint the lsb and width fields of a sbfx/ubfx instruction\n        %G\t\tprint a fallback offset for Branch Future instructions\n+       %W\t\tprint an offset for BF instruction\n        %b\t\tprint a conditional branch offset\n        %B\t\tprint an unconditional branch offset\n        %s\t\tprint the shift field of an SSAT instruction\n@@ -5870,6 +5871,23 @@ print_insn_thumb32 (bfd_vma pc, struct disassemble_info *info, long given)\n \t\t}\n \t\tbreak;\n \n+\t      case 'W':\n+\t\t{\n+\t\t  unsigned int immA = (given & 0x001f0000u) >> 16;\n+\t\t  unsigned int immB = (given & 0x000007feu) >> 1;\n+\t\t  unsigned int immC = (given & 0x00000800u) >> 11;\n+\t\t  bfd_vma offset = 0;\n+\n+\t\t  offset |= immA << 12;\n+\t\t  offset |= immB << 2;\n+\t\t  offset |= immC << 1;\n+\t\t  /* Sign extend.  */\n+\t\t  offset = (offset & 0x10000) ? offset - (1 << 17) : offset;\n+\n+\t\t  info->print_address_func (pc + 4 + offset, info);\n+\t\t}\n+\t\tbreak;\n+\n \t      case 'b':\n \t\t{\n \t\t  unsigned int S = (given & 0x04000000u) >> 26;"
    }
  ]
}