{
  "sha": "a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTVhZGI4ZjNiNDAxODRjZmU4ZjBiZmQzNjJiYTFkMzdkNzgwZDYyZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-11-19T16:31:34Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-11-19T16:32:26Z"
    },
    "message": "gdb: fix format string warnings in f-lang.c\n\nI get a bunch of these warnings when compiling for i386 (32-bit):\n\n      CXX    f-lang.o\n    /home/simark/src/binutils-gdb/gdb/f-lang.c: In function 'value* fortran_value_subarray(value*, expression*, int*, int, noside)':\n    /home/simark/src/binutils-gdb/gdb/f-lang.c:453:48: error: format '%ld' expects argument of type 'long int', but argument 2 has type 'LONGEST' {aka 'long long int'} [-Werror=format=]\n      453 |        debug_printf (\"|   |   |-> Low bound: %ld\\n\", lb);\n          |                                              ~~^     ~~\n          |                                                |     |\n          |                                                |     LONGEST {aka long long int}\n          |                                                long int\n          |                                              %lld\n\nFix them by using plongest/pulongest.\n\ngdb/ChangeLog:\n\n\t* f-lang.c (fortran_value_subarray): Use plongest/pulongest.\n\nChange-Id: I666ead5593653d5a1a3dab2ffdc72942c928c7d2",
    "tree": {
      "sha": "85ec122536becc355df7a85907540d54917b428e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85ec122536becc355df7a85907540d54917b428e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "70125a45e426167957fc5c5255e7a1e381d688f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70125a45e426167957fc5c5255e7a1e381d688f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/70125a45e426167957fc5c5255e7a1e381d688f9"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 40,
    "deletions": 29
  },
  "files": [
    {
      "sha": "5b4844250239f65e953d117d50b7b4372a40a37e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-19  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* f-lang.c (fortran_value_subarray): Use plongest/pulongest.\n+\n 2020-11-19  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdbarch.sh (read_core_file_mappings): Remove `other` parameter"
    },
    {
      "sha": "4171c96c8a9fa392d10b1d3a3bc36f30700e21ca",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 36,
      "deletions": 29,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=a5adb8f3b40184cfe8f0bfd362ba1d37d780d62f",
      "patch": "@@ -450,21 +450,21 @@ fortran_value_subarray (struct value *array, struct expression *exp,\n \t      std::string str = type_to_string (dim_type);\n \t      debug_printf (\"|   |-> Type: %s\\n\", str.c_str ());\n \t      debug_printf (\"|   |-> Array:\\n\");\n-\t      debug_printf (\"|   |   |-> Low bound: %ld\\n\", lb);\n-\t      debug_printf (\"|   |   |-> High bound: %ld\\n\", ub);\n-\t      debug_printf (\"|   |   |-> Bit stride: %ld\\n\", sd);\n-\t      debug_printf (\"|   |   |-> Byte stride: %ld\\n\", sd / 8);\n-\t      debug_printf (\"|   |   |-> Type size: %ld\\n\",\n-\t\t\t    TYPE_LENGTH (dim_type));\n-\t      debug_printf (\"|   |   '-> Target type size: %ld\\n\",\n-\t\t\t    TYPE_LENGTH (target_type));\n+\t      debug_printf (\"|   |   |-> Low bound: %s\\n\", plongest (lb));\n+\t      debug_printf (\"|   |   |-> High bound: %s\\n\", plongest (ub));\n+\t      debug_printf (\"|   |   |-> Bit stride: %s\\n\", plongest (sd));\n+\t      debug_printf (\"|   |   |-> Byte stride: %s\\n\", plongest (sd / 8));\n+\t      debug_printf (\"|   |   |-> Type size: %s\\n\",\n+\t\t\t    pulongest (TYPE_LENGTH (dim_type)));\n+\t      debug_printf (\"|   |   '-> Target type size: %s\\n\",\n+\t\t\t    pulongest (TYPE_LENGTH (target_type)));\n \t      debug_printf (\"|   |-> Accessing:\\n\");\n-\t      debug_printf (\"|   |   |-> Low bound: %ld\\n\",\n-\t\t\t    low);\n-\t      debug_printf (\"|   |   |-> High bound: %ld\\n\",\n-\t\t\t    high);\n-\t      debug_printf (\"|   |   '-> Element stride: %ld\\n\",\n-\t\t\t    stride);\n+\t      debug_printf (\"|   |   |-> Low bound: %s\\n\",\n+\t\t\t    plongest (low));\n+\t      debug_printf (\"|   |   |-> High bound: %s\\n\",\n+\t\t\t    plongest (high));\n+\t      debug_printf (\"|   |   '-> Element stride: %s\\n\",\n+\t\t\t    plongest (stride));\n \t    }\n \n \t  /* Check the user hasn't asked for something invalid.  */\n@@ -506,13 +506,17 @@ fortran_value_subarray (struct value *array, struct expression *exp,\n \t  if (fortran_array_slicing_debug)\n \t    {\n \t      debug_printf (\"|   '-> Results:\\n\");\n-\t      debug_printf (\"|       |-> Offset = %ld\\n\", offset);\n-\t      debug_printf (\"|       |-> Elements = %ld\\n\", e_count);\n-\t      debug_printf (\"|       |-> Low bound = %ld\\n\", new_low);\n-\t      debug_printf (\"|       |-> High bound = %ld\\n\", new_high);\n-\t      debug_printf (\"|       |-> Byte stride = %ld\\n\", new_stride);\n-\t      debug_printf (\"|       |-> Last element = %ld\\n\", last_elem);\n-\t      debug_printf (\"|       |-> Remainder = %ld\\n\", remainder);\n+\t      debug_printf (\"|       |-> Offset = %s\\n\", plongest (offset));\n+\t      debug_printf (\"|       |-> Elements = %s\\n\", plongest (e_count));\n+\t      debug_printf (\"|       |-> Low bound = %s\\n\", plongest (new_low));\n+\t      debug_printf (\"|       |-> High bound = %s\\n\",\n+\t\t\t    plongest (new_high));\n+\t      debug_printf (\"|       |-> Byte stride = %s\\n\",\n+\t\t\t    plongest (new_stride));\n+\t      debug_printf (\"|       |-> Last element = %s\\n\",\n+\t\t\t    plongest (last_elem));\n+\t      debug_printf (\"|       |-> Remainder = %s\\n\",\n+\t\t\t    plongest (remainder));\n \t      debug_printf (\"|       '-> Contiguous = %s\\n\",\n \t\t\t    (is_dim_contiguous ? \"Yes\" : \"No\"));\n \t    }\n@@ -548,14 +552,16 @@ fortran_value_subarray (struct value *array, struct expression *exp,\n \t      std::string str = type_to_string (dim_type);\n \t      debug_printf (\"|   |-> Type: %s\\n\", str.c_str ());\n \t      debug_printf (\"|   |-> Array:\\n\");\n-\t      debug_printf (\"|   |   |-> Low bound: %ld\\n\", lb);\n-\t      debug_printf (\"|   |   |-> High bound: %ld\\n\", ub);\n-\t      debug_printf (\"|   |   |-> Byte stride: %ld\\n\", sd);\n-\t      debug_printf (\"|   |   |-> Type size: %ld\\n\", TYPE_LENGTH (dim_type));\n-\t      debug_printf (\"|   |   '-> Target type size: %ld\\n\",\n-\t\t\t    TYPE_LENGTH (target_type));\n+\t      debug_printf (\"|   |   |-> Low bound: %s\\n\", plongest (lb));\n+\t      debug_printf (\"|   |   |-> High bound: %s\\n\", plongest (ub));\n+\t      debug_printf (\"|   |   |-> Byte stride: %s\\n\", plongest (sd));\n+\t      debug_printf (\"|   |   |-> Type size: %s\\n\",\n+\t\t\t    pulongest (TYPE_LENGTH (dim_type)));\n+\t      debug_printf (\"|   |   '-> Target type size: %s\\n\",\n+\t\t\t    pulongest (TYPE_LENGTH (target_type)));\n \t      debug_printf (\"|   '-> Accessing:\\n\");\n-\t      debug_printf (\"|       '-> Index: %ld\\n\", index);\n+\t      debug_printf (\"|       '-> Index: %s\\n\",\n+\t\t\t    plongest (index));\n \t    }\n \n \t  /* If the array has actual content then check the index is in\n@@ -612,7 +618,8 @@ fortran_value_subarray (struct value *array, struct expression *exp,\n       debug_printf (\"'-> Final result:\\n\");\n       debug_printf (\"    |-> Type: %s\\n\",\n \t\t    type_to_string (array_slice_type).c_str ());\n-      debug_printf (\"    |-> Total offset: %ld\\n\", total_offset);\n+      debug_printf (\"    |-> Total offset: %s\\n\",\n+\t\t    plongest (total_offset));\n       debug_printf (\"    |-> Base address: %s\\n\",\n \t\t    core_addr_to_string (value_address (array)));\n       debug_printf (\"    '-> Contiguous = %s\\n\","
    }
  ]
}