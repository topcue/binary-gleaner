{
  "sha": "eac215cc618400bd4f808ce48fa51fd53c702adc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWFjMjE1Y2M2MTg0MDBiZDRmODA4Y2U0OGZhNTFmZDUzYzcwMmFkYw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:54Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:06Z"
    },
    "message": "gdbserver: turn target op 'read_auxv' into a method\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's read_auxv op into a method of\n\tprocess_target.\n\n\t* target.h (class process_stratum_target): Remove the target op.\n\t(struct process_target): Add the target op.  Also add\n\t'supports_read_auxv'.\n\t* target.cc (process_target::read_auxv): Define.\n\t(process_target::supports_read_auxv): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* server.cc (handle_qxfer_auxv): Update.\n\t(handle_query): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_process_target::supports_read_auxv): Define.\n\t(linux_read_auxv): Turn into ...\n\t(linux_process_target::read_auxv): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_process_target::supports_read_auxv): Define.\n\t(nto_read_auxv): Turn into ...\n\t(nto_process_target::read_auxv): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "7c4c0513c07da0930c43156f423df876c3b3ec46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c4c0513c07da0930c43156f423df876c3b3ec46"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eac215cc618400bd4f808ce48fa51fd53c702adc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eac215cc618400bd4f808ce48fa51fd53c702adc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eac215cc618400bd4f808ce48fa51fd53c702adc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eac215cc618400bd4f808ce48fa51fd53c702adc/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eb497a2a77219d9cd4d05aa32bd569f5ff40b266",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb497a2a77219d9cd4d05aa32bd569f5ff40b266",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eb497a2a77219d9cd4d05aa32bd569f5ff40b266"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 82,
    "deletions": 19
  },
  "files": [
    {
      "sha": "4f759afeeb779a6c9306104fdc8a18aa4fae6f61",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -1,3 +1,31 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's read_auxv op into a method of\n+\tprocess_target.\n+\n+\t* target.h (class process_stratum_target): Remove the target op.\n+\t(struct process_target): Add the target op.  Also add\n+\t'supports_read_auxv'.\n+\t* target.cc (process_target::read_auxv): Define.\n+\t(process_target::supports_read_auxv): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* server.cc (handle_qxfer_auxv): Update.\n+\t(handle_query): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_process_target::supports_read_auxv): Define.\n+\t(linux_read_auxv): Turn into ...\n+\t(linux_process_target::read_auxv): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_process_target::supports_read_auxv): Define.\n+\t(nto_read_auxv): Turn into ...\n+\t(nto_process_target::read_auxv): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's request_interrupt op into a method of"
    },
    {
      "sha": "47ac768d929153b416d870a71b6f8ee4342cb902",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -5919,11 +5919,18 @@ linux_process_target::request_interrupt ()\n   ::kill (-signal_pid, SIGINT);\n }\n \n+bool\n+linux_process_target::supports_read_auxv ()\n+{\n+  return true;\n+}\n+\n /* Copy LEN bytes from inferior's auxiliary vector starting at OFFSET\n    to debugger memory starting at MYADDR.  */\n \n-static int\n-linux_read_auxv (CORE_ADDR offset, unsigned char *myaddr, unsigned int len)\n+int\n+linux_process_target::read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t\t\t unsigned int len)\n {\n   char filename[PATH_MAX];\n   int fd, n;\n@@ -7317,7 +7324,7 @@ linux_get_auxv (int wordsize, CORE_ADDR match, CORE_ADDR *valp)\n \n   gdb_assert (wordsize == 4 || wordsize == 8);\n \n-  while ((*the_target->read_auxv) (offset, data, 2 * wordsize) == 2 * wordsize)\n+  while (the_target->pt->read_auxv (offset, data, 2 * wordsize) == 2 * wordsize)\n     {\n       if (wordsize == 4)\n \t{\n@@ -7369,7 +7376,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_read_auxv,\n   linux_supports_z_point_type,\n   linux_insert_point,\n   linux_remove_point,"
    },
    {
      "sha": "0130c22ce2754b3bb5406629ed6ab4841ed99f41",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -309,6 +309,11 @@ class linux_process_target : public process_target\n   void look_up_symbols () override;\n \n   void request_interrupt () override;\n+\n+  bool supports_read_auxv () override;\n+\n+  int read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t unsigned int len) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "bf73e81993e1888c0ec6cc9a853f1692834751ad",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -729,7 +729,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* read_auxv */\n   NULL,  /* supports_z_point_type */\n   NULL,  /* insert_point */\n   NULL,  /* remove_point */"
    },
    {
      "sha": "d828fa7a60733ecab2988632be626f2d7970ed99",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -755,14 +755,21 @@ nto_process_target::request_interrupt ()\n     TRACE (\"Error stopping inferior.\\n\");\n }\n \n+bool\n+nto_process_target::supports_read_auxv ()\n+{\n+  return true;\n+}\n+\n /* Read auxiliary vector from inferior's memory into gdbserver's buffer\n    MYADDR.  We always read whole auxv.  \n    \n    Return number of bytes stored in MYADDR buffer, 0 if OFFSET > 0\n    or -1 on error.  */\n \n-static int\n-nto_read_auxv (CORE_ADDR offset, unsigned char *myaddr, unsigned int len)\n+int\n+nto_process_target::read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t\t       unsigned int len)\n {\n   int err;\n   CORE_ADDR initial_stack;\n@@ -943,7 +950,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_read_auxv,\n   nto_supports_z_point_type,\n   nto_insert_point,\n   nto_remove_point,"
    },
    {
      "sha": "e135dd3b68ab21238b3bd8e75687422d288050ae",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -79,6 +79,11 @@ class nto_process_target : public process_target\n \t\t    int len) override;\n \n   void request_interrupt () override;\n+\n+  bool supports_read_auxv () override;\n+\n+  int read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t unsigned int len) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "f13061c871b3cf3413b3cd29b42dc97e101c5f11",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -1442,13 +1442,13 @@ handle_qxfer_auxv (const char *annex,\n \t\t   gdb_byte *readbuf, const gdb_byte *writebuf,\n \t\t   ULONGEST offset, LONGEST len)\n {\n-  if (the_target->read_auxv == NULL || writebuf != NULL)\n+  if (!the_target->pt->supports_read_auxv () || writebuf != NULL)\n     return -2;\n \n   if (annex[0] != '\\0' || current_thread == NULL)\n     return -1;\n \n-  return (*the_target->read_auxv) (offset, readbuf, len);\n+  return the_target->pt->read_auxv (offset, readbuf, len);\n }\n \n /* Handle qXfer:exec-file:read.  */\n@@ -2374,7 +2374,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \t  strcat (own_buf, \";qXfer:libraries:read+\");\n \t}\n \n-      if (the_target->read_auxv != NULL)\n+      if (the_target->pt->supports_read_auxv ())\n \tstrcat (own_buf, \";qXfer:auxv:read+\");\n \n       if (the_target->qxfer_siginfo != NULL)"
    },
    {
      "sha": "97e9d4ac5073717ddaacb16d75c768b702a2fecc",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -414,3 +414,16 @@ process_target::look_up_symbols ()\n {\n   /* Nop.  */\n }\n+\n+bool\n+process_target::supports_read_auxv ()\n+{\n+  return false;\n+}\n+\n+int\n+process_target::read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t\t   unsigned int len)\n+{\n+  gdb_assert_not_reached (\"target op read_auxv not supported\");\n+}"
    },
    {
      "sha": "cd11da670ca9799d060594238661a1bcb65b21fe",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -70,13 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Read auxiliary vector data from the inferior process.\n-\n-     Read LEN bytes at OFFSET into a buffer at MYADDR.  */\n-\n-  int (*read_auxv) (CORE_ADDR offset, unsigned char *myaddr,\n-\t\t    unsigned int len);\n-\n   /* Returns true if GDB Z breakpoint type TYPE is supported, false\n      otherwise.  The type is coded as follows:\n        '0' - software-breakpoint\n@@ -474,6 +467,15 @@ class process_target\n   /* Send an interrupt request to the inferior process,\n      however is appropriate.  */\n   virtual void request_interrupt () = 0;\n+\n+  /* Return true if the read_auxv target op is supported.  */\n+  virtual bool supports_read_auxv ();\n+\n+  /* Read auxiliary vector data from the inferior process.\n+\n+     Read LEN bytes at OFFSET into a buffer at MYADDR.  */\n+  virtual int read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t\t unsigned int len);\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "2d617d889ecf2d061fb8ce93896d853aef672cc0",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac215cc618400bd4f808ce48fa51fd53c702adc/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=eac215cc618400bd4f808ce48fa51fd53c702adc",
      "patch": "@@ -1838,7 +1838,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* read_auxv */\n   win32_supports_z_point_type,\n   win32_insert_point,\n   win32_remove_point,"
    }
  ]
}