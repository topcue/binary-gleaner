{
  "sha": "897608ed56a73739aa675011c2104565b68fc8bb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODk3NjA4ZWQ1NmE3MzczOWFhNjc1MDExYzIxMDQ1NjViNjhmYzhiYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-23T15:56:41Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-23T15:56:41Z"
    },
    "message": "gdb: linux-nat: make linux_nat_filter_event return void\n\nI noticed that linux_nat_filter_event returns a value, but its caller\ndoesn't use it.  This has been since 9c02b52532ac (\"linux-nat.c: better\nstarvation avoidance, handle non-stop mode too\").  Before that commit,\nthe return value was used to tell the caller whether to continue\nprocessing that event or not.  But since then, the model is that we pull\nall events from the kernel and linux_nat_filter_event just saves the\nstatus to the lwp_info structure if it thinks it's relevant.  And the\ncaller, linux_nat_wait_1, selects a status at random amongst the threads\nwith a pending status.  So essentially, the return value of\nlinux_nat_filter_event does not have a reason to be anymore.  Change it\nso it returns void.\n\ngdb/ChangeLog:\n\n\t* linux-nat.c (linux_nat_filter_event): Return void.\n\nChange-Id: I35662868910f5122772ed92a512adfbf4da12d87",
    "tree": {
      "sha": "d5eca83f8efc9c78e423f062c79411677148c148",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d5eca83f8efc9c78e423f062c79411677148c148"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/897608ed56a73739aa675011c2104565b68fc8bb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/897608ed56a73739aa675011c2104565b68fc8bb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/897608ed56a73739aa675011c2104565b68fc8bb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/897608ed56a73739aa675011c2104565b68fc8bb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f16ccf47d8795ea050810d0381ce4ad6de09bfb7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f16ccf47d8795ea050810d0381ce4ad6de09bfb7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f16ccf47d8795ea050810d0381ce4ad6de09bfb7"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 16,
    "deletions": 12
  },
  "files": [
    {
      "sha": "da78e061e9f63d99e253d3adbbe052f1a7978a2e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/897608ed56a73739aa675011c2104565b68fc8bb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/897608ed56a73739aa675011c2104565b68fc8bb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=897608ed56a73739aa675011c2104565b68fc8bb",
      "patch": "@@ -1,3 +1,7 @@\n+2021-02-23  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* linux-nat.c (linux_nat_filter_event): Return void.\n+\n 2021-02-22  Tom Tromey  <tromey@adacore.com>\n \n \t* solib-svr4.c (enable_break): Update."
    },
    {
      "sha": "ccfd3c1320c6a41f703173c7140bc218057084fa",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/897608ed56a73739aa675011c2104565b68fc8bb/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/897608ed56a73739aa675011c2104565b68fc8bb/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=897608ed56a73739aa675011c2104565b68fc8bb",
      "patch": "@@ -2822,9 +2822,10 @@ resumed_callback (struct lwp_info *lp)\n }\n \n /* Check if we should go on and pass this event to common code.\n-   Return the affected lwp if we should, or NULL otherwise.  */\n \n-static struct lwp_info *\n+   If so, save the status to the lwp_info structure associated to LWPID.  */\n+\n+static void\n linux_nat_filter_event (int lwpid, int status)\n {\n   struct lwp_info *lp;\n@@ -2862,15 +2863,15 @@ linux_nat_filter_event (int lwpid, int status)\n       linux_nat_debug_printf (\"saving LWP %ld status %s in stopped_pids list\",\n \t\t\t      (long) lwpid, status_to_str (status));\n       add_to_pid_list (&stopped_pids, lwpid, status);\n-      return NULL;\n+      return;\n     }\n \n   /* Make sure we don't report an event for the exit of an LWP not in\n      our list, i.e. not part of the current process.  This can happen\n      if we detach from a program we originally forked and then it\n      exits.  */\n   if (!WIFSTOPPED (status) && !lp)\n-    return NULL;\n+    return;\n \n   /* This LWP is stopped now.  (And if dead, this prevents it from\n      ever being continued.)  */\n@@ -2894,7 +2895,7 @@ linux_nat_filter_event (int lwpid, int status)\n \t on.  */\n       status = W_STOPCODE (SIGTRAP);\n       if (linux_handle_syscall_trap (lp, 0))\n-\treturn NULL;\n+\treturn;\n     }\n   else\n     {\n@@ -2910,7 +2911,7 @@ linux_nat_filter_event (int lwpid, int status)\n       linux_nat_debug_printf (\"Handling extended status 0x%06x\", status);\n \n       if (linux_handle_extended_wait (lp, status))\n-\treturn NULL;\n+\treturn;\n     }\n \n   /* Check if the thread has exited.  */\n@@ -2926,7 +2927,7 @@ linux_nat_filter_event (int lwpid, int status)\n \t     was not the end of the debugged application and should be\n \t     ignored.  */\n \t  exit_lwp (lp);\n-\t  return NULL;\n+\t  return;\n \t}\n \n       /* Note that even if the leader was ptrace-stopped, it can still\n@@ -2942,7 +2943,7 @@ linux_nat_filter_event (int lwpid, int status)\n       /* Store the pending event in the waitstatus, because\n \t W_EXITCODE(0,0) == 0.  */\n       store_waitstatus (&lp->waitstatus, status);\n-      return lp;\n+      return;\n     }\n \n   /* Make sure we don't report a SIGSTOP that we sent ourselves in\n@@ -2968,7 +2969,7 @@ linux_nat_filter_event (int lwpid, int status)\n \n \t  linux_resume_one_lwp (lp, lp->step, GDB_SIGNAL_0);\n \t  gdb_assert (lp->resumed);\n-\t  return NULL;\n+\t  return;\n \t}\n     }\n \n@@ -2990,7 +2991,7 @@ linux_nat_filter_event (int lwpid, int status)\n       gdb_assert (lp->resumed);\n \n       /* Discard the event.  */\n-      return NULL;\n+      return;\n     }\n \n   /* Don't report signals that GDB isn't interested in, such as\n@@ -3039,15 +3040,14 @@ linux_nat_filter_event (int lwpid, int status)\n \t     target_pid_to_str (lp->ptid).c_str (),\n \t     (signo != GDB_SIGNAL_0\n \t      ? strsignal (gdb_signal_to_host (signo)) : \"0\"));\n-\t  return NULL;\n+\t  return;\n \t}\n     }\n \n   /* An interesting event.  */\n   gdb_assert (lp);\n   lp->status = status;\n   save_stop_reason (lp);\n-  return lp;\n }\n \n /* Detect zombie thread group leaders, and \"exit\" them.  We can't reap"
    }
  ]
}