{
  "sha": "25e5c20918a0ec69e37c1987db52062b0eab7194",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjVlNWMyMDkxOGEwZWM2OWUzN2MxOTg3ZGI1MjA2MmIwZWFiNzE5NA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-09-12T20:36:37Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-09-12T20:36:37Z"
    },
    "message": "[gdb/testsuite] Allow some tests in gdb.base/store.exp to be unsupported\n\nThe test-case gdb.base/store.exp fails with gcc 7.4.0:\n...\nnr of unexpected failures        27\n...\n\nThe first FAIL:\n...\n110       l = add_float (l, r);\n(gdb) PASS: gdb.base/store.exp: continue to wack_float\nprint l\n$21 = <optimized out>\nFAIL: gdb.base/store.exp: var float l; print old l, expecting -1\n...\nrelates to this bit in the test-case (compiled at -O0):\n...\n   106  float\n   107  wack_float (register float u, register float v)\n   108  {\n   109    register float l = u, r = v;\n   110    l = add_float (l, r);\n   111    return l + r;\n   112  }\n...\nand it expects to be able to read and modify variable l before executing line\n110, but it already fails to read the value, because l has no DW_AT_location\nattribute in the debug info.\n\nVariable l is declared with the register keyword, and GCC implements the\nregister keyword at -O0 like so:\n...\nthe compiler allocates distinct stack memory for all variables that do not\nhave the register storage-class specifier; if register is specified, the\nvariable may have a shorter lifespan than the code would indicate and may\nnever be placed in memory.\n...\n\nThe fact that l has no DW_AT_location attribute, matches with the documented\n\"variable may have a shorter lifespan that code would indicate\", (though it\nis the most extreme case of it) so the gcc behaviour is valid.  We can of\ncourse improve gcc to generate better debuginfo (filed gcc PR91611), but\nthis not a wrong-debug problem.\n\n[ The test-case passes with gcc 4.2.1, but for the failing test discussed\nabove, it passes simply because it doesn't store l in a register. ]\n\nWith the debug info missing for l, reading and setting l is unsupported, so\nfix the FAIL by marking the test UNSUPPORTED instead.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2019-09-12  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/store.exp: Allow register variables to be optimized out at\n\t-O0.",
    "tree": {
      "sha": "2b34e6da51acf3e8c39b0a029a947b76aeadbe58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b34e6da51acf3e8c39b0a029a947b76aeadbe58"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/25e5c20918a0ec69e37c1987db52062b0eab7194",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25e5c20918a0ec69e37c1987db52062b0eab7194",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/25e5c20918a0ec69e37c1987db52062b0eab7194",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25e5c20918a0ec69e37c1987db52062b0eab7194/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4993045d18d69ecee41ca341cde6bbed220dc8a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4993045d18d69ecee41ca341cde6bbed220dc8a4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4993045d18d69ecee41ca341cde6bbed220dc8a4"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 50,
    "deletions": 20
  },
  "files": [
    {
      "sha": "7352e9f0342b95902490140d1c8c23dd94fccaed",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25e5c20918a0ec69e37c1987db52062b0eab7194/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25e5c20918a0ec69e37c1987db52062b0eab7194/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=25e5c20918a0ec69e37c1987db52062b0eab7194",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/store.exp: Allow register variables to be optimized out at\n+\t-O0.\n+\n 2019-09-12  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* gdb.ada/rdv_wait.exp: Update to new task names."
    },
    {
      "sha": "9c19ce15a7be460babfd5f146762c9cbe31f839c",
      "filename": "gdb/testsuite/gdb.base/store.exp",
      "status": "modified",
      "additions": 45,
      "deletions": 20,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25e5c20918a0ec69e37c1987db52062b0eab7194/gdb/testsuite/gdb.base/store.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25e5c20918a0ec69e37c1987db52062b0eab7194/gdb/testsuite/gdb.base/store.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/store.exp?ref=25e5c20918a0ec69e37c1987db52062b0eab7194",
      "patch": "@@ -55,18 +55,29 @@ proc check_set { t l r new add } {\n \t}\n     }\n \n-    gdb_test \"print l\" \" = ${l}\" \\\n-\t\"${prefix}; print old l, expecting ${l}\"\n-    gdb_test \"print r\" \" = ${r}\" \\\n-\t\"${prefix}; print old r, expecting ${r}\"\n-    gdb_test_no_output \"set variable l = 4\" \\\n-\t\"${prefix}; setting l to 4\"\n-    gdb_test \"print l\" \" = ${new}\" \\\n-\t\"${prefix}; print new l, expecting ${new}\"\n-    gdb_test \"next\" \"return l \\\\+ r;\" \\\n-\t\"${prefix}; next over add call\"\n-    gdb_test \"print l\" \" = ${add}\" \\\n-\t\"${prefix}; print incremented l, expecting ${add}\"\n+    set supported 1\n+    set test \"${prefix}; print old l, expecting ${l}\"\n+    gdb_test_multiple \"print l\" \"$test\"  {\n+\t-re \" = <optimized out>\\r\\n$gdb_prompt $\" {\n+\t    unsupported $test\n+\t    set supported 0\n+\t}\n+\t-re \" = ${l}\\r\\n$gdb_prompt $\" {\n+\t    pass $test\n+\t}\n+    }\n+    if { $supported } {\n+\tgdb_test \"print r\" \" = ${r}\" \\\n+\t    \"${prefix}; print old r, expecting ${r}\"\n+\tgdb_test_no_output \"set variable l = 4\" \\\n+\t    \"${prefix}; setting l to 4\"\n+\tgdb_test \"print l\" \" = ${new}\" \\\n+\t    \"${prefix}; print new l, expecting ${new}\"\n+\tgdb_test \"next\" \"return l \\\\+ r;\" \\\n+\t    \"${prefix}; next over add call\"\n+\tgdb_test \"print l\" \" = ${add}\" \\\n+\t    \"${prefix}; print incremented l, expecting ${add}\"\n+    }\n }\n \n check_set \"charest\" \"-1 .*\" \"-2 .*\" \"4 ..004.\" \"2 ..002.\"\n@@ -81,20 +92,34 @@ check_set \"doublest\" \"-1\" \"-2\" \"4\" \"2\"\n #\n \n proc up_set { t l r new } {\n+    global gdb_prompt\n+\n     set prefix \"upvar ${t} l\"\n     gdb_test \"tbreak add_${t}\"\n     gdb_test \"continue\" \"return u . v;\" \\\n \t\"continue to add_${t}\"\n     gdb_test \"up\" \"l = add_${t} .l, r.;\" \\\n \t\"${prefix}; up\"\n-    gdb_test \"print l\" \" = ${l}\" \\\n-\t\"${prefix}; print old l, expecting ${l}\"\n-    gdb_test \"print r\" \" = ${r}\" \\\n-\t\"${prefix}; print old r, expecting ${r}\"\n-    gdb_test_no_output \"set variable l = 4\" \\\n-\t\"${prefix}; set l to 4\"\n-    gdb_test \"print l\" \" = ${new}\" \\\n-\t\"${prefix}; print new l, expecting ${new}\"\n+\n+    set supported 1\n+    set test \"${prefix}; print old l, expecting ${l}\"\n+    gdb_test_multiple \"print l\" \"$test\"  {\n+\t-re \" = <optimized out>\\r\\n$gdb_prompt $\" {\n+\t    unsupported $test\n+\t    set supported 0\n+\t}\n+\t-re \" = ${l}\\r\\n$gdb_prompt $\" {\n+\t    pass $test\n+\t}\n+    }\n+    if { $supported } {\n+\tgdb_test \"print r\" \" = ${r}\" \\\n+\t    \"${prefix}; print old r, expecting ${r}\"\n+\tgdb_test_no_output \"set variable l = 4\" \\\n+\t    \"${prefix}; set l to 4\"\n+\tgdb_test \"print l\" \" = ${new}\" \\\n+\t    \"${prefix}; print new l, expecting ${new}\"\n+    }\n }\n \n up_set \"charest\" \"-1 .*\" \"-2 .*\" \"4 ..004.\""
    }
  ]
}