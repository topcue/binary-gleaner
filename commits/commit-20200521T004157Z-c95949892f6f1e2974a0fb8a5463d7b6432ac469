{
  "sha": "c95949892f6f1e2974a0fb8a5463d7b6432ac469",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Yzk1OTQ5ODkyZjZmMWUyOTc0YTBmYjhhNTQ2M2Q3YjY0MzJhYzQ2OQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-20T07:55:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-21T00:41:57Z"
    },
    "message": "Replace \"if (x) free (x)\" with \"free (x)\", bfd\n\n\t* aoutx.h: Replace \"if (x) free (x)\" with \"free (x)\" throughout.\n\t* archive.c, * bfd.c, * bfdio.c, * coff-alpha.c, * coff-ppc.c,\n\t* coff-sh.c, * coff-stgo32.c, * coffcode.h, * coffgen.c,\n\t* cofflink.c, * cpu-arm.c, * doc/chew.c, * dwarf2.c, * ecoff.c,\n\t* ecofflink.c, * elf-eh-frame.c, * elf-m10200.c, * elf-m10300.c,\n\t* elf-strtab.c, * elf.c, * elf32-arc.c, * elf32-arm.c,\n\t* elf32-avr.c, * elf32-bfin.c, * elf32-cr16.c, * elf32-crx.c,\n\t* elf32-epiphany.c, * elf32-ft32.c, * elf32-h8300.c,\n\t* elf32-ip2k.c, * elf32-m32c.c, * elf32-m68hc11.c,\n\t* elf32-m68k.c, * elf32-microblaze.c, * elf32-msp430.c,\n\t* elf32-nds32.c, * elf32-nios2.c, * elf32-ppc.c, * elf32-pru.c,\n\t* elf32-rl78.c, * elf32-rx.c, * elf32-sh.c, * elf32-spu.c,\n\t* elf32-v850.c, * elf32-xtensa.c, * elf64-alpha.c,\n\t* elf64-hppa.c, * elf64-ia64-vms.c, * elf64-mips.c\n\t* elf64-mmix.c, * elf64-ppc.c, * elf64-sparc.c, * elfcode.h,\n\t* elflink.c, * elfnn-ia64.c, * elfnn-riscv.c, * elfxx-mips.c,\n\t* elfxx-x86.c, * format.c, * ihex.c, * libbfd.c, * linker.c,\n\t* mmo.c, * opncls.c, * pdp11.c, * peXXigen.c, * pef.c,\n\t* peicode.h, * simple.c, * som.c, * srec.c, * stabs.c, * syms.c,\n\t* targets.c, * vms-lib.c, * xcofflink.c, * xtensa-isa.c: Likewise.",
    "tree": {
      "sha": "787ac00de8dc1bfb5170e2b2caf05e66d8ab6c7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/787ac00de8dc1bfb5170e2b2caf05e66d8ab6c7f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c95949892f6f1e2974a0fb8a5463d7b6432ac469",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c95949892f6f1e2974a0fb8a5463d7b6432ac469",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c95949892f6f1e2974a0fb8a5463d7b6432ac469",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c95949892f6f1e2974a0fb8a5463d7b6432ac469/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c31ab5a0010ac9e3d31fd218fffcff1b9696363e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c31ab5a0010ac9e3d31fd218fffcff1b9696363e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c31ab5a0010ac9e3d31fd218fffcff1b9696363e"
    }
  ],
  "stats": {
    "total": 1942,
    "additions": 657,
    "deletions": 1285
  },
  "files": [
    {
      "sha": "bc51d862ea9151f160281c73c7639c8b0d7fb9aa",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1,3 +1,26 @@\n+2020-05-21  Alan Modra  <amodra@gmail.com>\n+\n+\t* aoutx.h: Replace \"if (x) free (x)\" with \"free (x)\" throughout.\n+\t* archive.c, * bfd.c, * bfdio.c, * coff-alpha.c, * coff-ppc.c,\n+\t* coff-sh.c, * coff-stgo32.c, * coffcode.h, * coffgen.c,\n+\t* cofflink.c, * cpu-arm.c, * doc/chew.c, * dwarf2.c, * ecoff.c,\n+\t* ecofflink.c, * elf-eh-frame.c, * elf-m10200.c, * elf-m10300.c,\n+\t* elf-strtab.c, * elf.c, * elf32-arc.c, * elf32-arm.c,\n+\t* elf32-avr.c, * elf32-bfin.c, * elf32-cr16.c, * elf32-crx.c,\n+\t* elf32-epiphany.c, * elf32-ft32.c, * elf32-h8300.c,\n+\t* elf32-ip2k.c, * elf32-m32c.c, * elf32-m68hc11.c,\n+\t* elf32-m68k.c, * elf32-microblaze.c, * elf32-msp430.c,\n+\t* elf32-nds32.c, * elf32-nios2.c, * elf32-ppc.c, * elf32-pru.c,\n+\t* elf32-rl78.c, * elf32-rx.c, * elf32-sh.c, * elf32-spu.c,\n+\t* elf32-v850.c, * elf32-xtensa.c, * elf64-alpha.c,\n+\t* elf64-hppa.c, * elf64-ia64-vms.c, * elf64-mips.c\n+\t* elf64-mmix.c, * elf64-ppc.c, * elf64-sparc.c, * elfcode.h,\n+\t* elflink.c, * elfnn-ia64.c, * elfnn-riscv.c, * elfxx-mips.c,\n+\t* elfxx-x86.c, * format.c, * ihex.c, * libbfd.c, * linker.c,\n+\t* mmo.c, * opncls.c, * pdp11.c, * peXXigen.c, * pef.c,\n+\t* peicode.h, * simple.c, * som.c, * srec.c, * stabs.c, * syms.c,\n+\t* targets.c, * vms-lib.c, * xcofflink.c, * xtensa-isa.c: Likewise.\n+\n 2020-05-20  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.h (riscv_parse_subset_t): Add new callback function"
    },
    {
      "sha": "08083c1555f17ff56a4c20f00d9dde43c7093c4b",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 15,
      "deletions": 31,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2816,8 +2816,7 @@ NAME (aout, find_nearest_line) (bfd *abfd,\n   else\n     funclen = strlen (bfd_asymbol_name (func));\n \n-  if (adata (abfd).line_buf != NULL)\n-    free (adata (abfd).line_buf);\n+  free (adata (abfd).line_buf);\n \n   if (filelen + funclen == 0)\n     adata (abfd).line_buf = buf = NULL;\n@@ -2899,7 +2898,7 @@ NAME (aout, bfd_free_cached_info) (bfd *abfd)\n       || abfd->tdata.aout_data == NULL)\n     return TRUE;\n \n-#define BFCI_FREE(x) if (x != NULL) { free (x); x = NULL; }\n+#define BFCI_FREE(x) do { free (x); x = NULL; } while (0)\n   BFCI_FREE (obj_aout_symbols (abfd));\n #ifdef USE_MMAP\n   obj_aout_external_syms (abfd) = 0;\n@@ -5617,26 +5616,15 @@ NAME (aout, final_link) (bfd *abfd,\n \t}\n     }\n \n-  if (aout_info.contents != NULL)\n-    {\n-      free (aout_info.contents);\n-      aout_info.contents = NULL;\n-    }\n-  if (aout_info.relocs != NULL)\n-    {\n-      free (aout_info.relocs);\n-      aout_info.relocs = NULL;\n-    }\n-  if (aout_info.symbol_map != NULL)\n-    {\n-      free (aout_info.symbol_map);\n-      aout_info.symbol_map = NULL;\n-    }\n-  if (aout_info.output_syms != NULL)\n-    {\n-      free (aout_info.output_syms);\n-      aout_info.output_syms = NULL;\n-    }\n+  free (aout_info.contents);\n+  aout_info.contents = NULL;\n+  free (aout_info.relocs);\n+  aout_info.relocs = NULL;\n+  free (aout_info.symbol_map);\n+  aout_info.symbol_map = NULL;\n+  free (aout_info.output_syms);\n+  aout_info.output_syms = NULL;\n+\n   if (includes_hash_initialized)\n     {\n       bfd_hash_table_free (&aout_info.includes.root);\n@@ -5679,14 +5667,10 @@ NAME (aout, final_link) (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (aout_info.contents != NULL)\n-    free (aout_info.contents);\n-  if (aout_info.relocs != NULL)\n-    free (aout_info.relocs);\n-  if (aout_info.symbol_map != NULL)\n-    free (aout_info.symbol_map);\n-  if (aout_info.output_syms != NULL)\n-    free (aout_info.output_syms);\n+  free (aout_info.contents);\n+  free (aout_info.relocs);\n+  free (aout_info.symbol_map);\n+  free (aout_info.output_syms);\n   if (includes_hash_initialized)\n     bfd_hash_table_free (&aout_info.includes.root);\n   return FALSE;"
    },
    {
      "sha": "9d63849a483d5cd5c5ad40eb6b811bae2c9ae813",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1468,8 +1468,7 @@ adjust_relative_path (const char * path, const char * ref_path)\n \n   if (len > pathbuf_len)\n     {\n-      if (pathbuf != NULL)\n-\tfree (pathbuf);\n+      free (pathbuf);\n       pathbuf_len = 0;\n       pathbuf = (char *) bfd_malloc (len);\n       if (pathbuf == NULL)\n@@ -2326,8 +2325,7 @@ _bfd_compute_and_write_armap (bfd *arch, unsigned int elength)\n \t    {\n \t      if (storage > syms_max)\n \t\t{\n-\t\t  if (syms_max > 0)\n-\t\t    free (syms);\n+\t\t  free (syms);\n \t\t  syms_max = storage;\n \t\t  syms = (asymbol **) bfd_malloc (syms_max);\n \t\t  if (syms == NULL)\n@@ -2408,20 +2406,16 @@ _bfd_compute_and_write_armap (bfd *arch, unsigned int elength)\n   ret = BFD_SEND (arch, write_armap,\n \t\t  (arch, elength, map, orl_count, stridx));\n \n-  if (syms_max > 0)\n-    free (syms);\n-  if (map != NULL)\n-    free (map);\n+  free (syms);\n+  free (map);\n   if (first_name != NULL)\n     bfd_release (arch, first_name);\n \n   return ret;\n \n  error_return:\n-  if (syms_max > 0)\n-    free (syms);\n-  if (map != NULL)\n-    free (map);\n+  free (syms);\n+  free (map);\n   if (first_name != NULL)\n     bfd_release (arch, first_name);\n "
    },
    {
      "sha": "538bdfa5d7df9dfbd3fb1e73bf57e145a4fc543e",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2487,8 +2487,7 @@ bfd_demangle (bfd *abfd, const char *name, int options)\n \n   res = cplus_demangle (name, options);\n \n-  if (alloc != NULL)\n-    free (alloc);\n+  free (alloc);\n \n   if (res == NULL)\n     {"
    },
    {
      "sha": "5ef3ec493ea5f11665a929d51c23424bd2e31b83",
      "filename": "bfd/bfdio.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/bfdio.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/bfdio.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfdio.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -662,8 +662,7 @@ memory_bclose (struct bfd *abfd)\n {\n   struct bfd_in_memory *bim = (struct bfd_in_memory *) abfd->iostream;\n \n-  if (bim->buffer != NULL)\n-    free (bim->buffer);\n+  free (bim->buffer);\n   free (bim);\n   abfd->iostream = NULL;\n "
    },
    {
      "sha": "cb52668734460399ae9436e36a89cb8dbbfb3112",
      "filename": "bfd/coff-alpha.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-alpha.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1127,13 +1127,11 @@ alpha_ecoff_get_relocated_section_contents (bfd *abfd,\n     abort ();\n \n  successful_return:\n-  if (reloc_vector != NULL)\n-    free (reloc_vector);\n+  free (reloc_vector);\n   return data;\n \n  error_return:\n-  if (reloc_vector != NULL)\n-    free (reloc_vector);\n+  free (reloc_vector);\n   return NULL;\n }\n \n@@ -2171,8 +2169,7 @@ alpha_ecoff_get_elt_at_filepos (bfd *archive, file_ptr filepos)\n   return nbfd;\n \n  error_return:\n-  if (buf != NULL)\n-    free (buf);\n+  free (buf);\n   if (nbfd != NULL)\n     bfd_close (nbfd);\n   return NULL;"
    },
    {
      "sha": "a3ad1ef8e6ce877b4c7d9bb189a5ec67475ab203",
      "filename": "bfd/coff-ppc.c",
      "status": "modified",
      "additions": 29,
      "deletions": 66,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-ppc.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2258,41 +2258,20 @@ ppc_bfd_coff_final_link (bfd *abfd, struct bfd_link_info *info)\n   coff_debug_merge_hash_table_free (&flaginfo.debug_merge);\n   debug_merge_allocated = FALSE;\n \n-  if (flaginfo.internal_syms != NULL)\n-    {\n-      free (flaginfo.internal_syms);\n-      flaginfo.internal_syms = NULL;\n-    }\n-  if (flaginfo.sec_ptrs != NULL)\n-    {\n-      free (flaginfo.sec_ptrs);\n-      flaginfo.sec_ptrs = NULL;\n-    }\n-  if (flaginfo.sym_indices != NULL)\n-    {\n-      free (flaginfo.sym_indices);\n-      flaginfo.sym_indices = NULL;\n-    }\n-  if (flaginfo.linenos != NULL)\n-    {\n-      free (flaginfo.linenos);\n-      flaginfo.linenos = NULL;\n-    }\n-  if (flaginfo.contents != NULL)\n-    {\n-      free (flaginfo.contents);\n-      flaginfo.contents = NULL;\n-    }\n-  if (flaginfo.external_relocs != NULL)\n-    {\n-      free (flaginfo.external_relocs);\n-      flaginfo.external_relocs = NULL;\n-    }\n-  if (flaginfo.internal_relocs != NULL)\n-    {\n-      free (flaginfo.internal_relocs);\n-      flaginfo.internal_relocs = NULL;\n-    }\n+  free (flaginfo.internal_syms);\n+  flaginfo.internal_syms = NULL;\n+  free (flaginfo.sec_ptrs);\n+  flaginfo.sec_ptrs = NULL;\n+  free (flaginfo.sym_indices);\n+  flaginfo.sym_indices = NULL;\n+  free (flaginfo.linenos);\n+  flaginfo.linenos = NULL;\n+  free (flaginfo.contents);\n+  flaginfo.contents = NULL;\n+  free (flaginfo.external_relocs);\n+  flaginfo.external_relocs = NULL;\n+  free (flaginfo.internal_relocs);\n+  flaginfo.internal_relocs = NULL;\n \n   /* The value of the last C_FILE symbol is supposed to be the symbol\n      index of the first external symbol.  Write it out again if\n@@ -2318,11 +2297,8 @@ ppc_bfd_coff_final_link (bfd *abfd, struct bfd_link_info *info)\n     goto error_return;\n \n   /* The outsyms buffer is used by _bfd_coff_write_global_sym.  */\n-  if (flaginfo.outsyms != NULL)\n-    {\n-      free (flaginfo.outsyms);\n-      flaginfo.outsyms = NULL;\n-    }\n+  free (flaginfo.outsyms);\n+  flaginfo.outsyms = NULL;\n \n   if (bfd_link_relocatable (info))\n     {\n@@ -2375,10 +2351,8 @@ ppc_bfd_coff_final_link (bfd *abfd, struct bfd_link_info *info)\n \n       for (i = 0; i < abfd->section_count; i++)\n \t{\n-\t  if (flaginfo.section_info[i].relocs != NULL)\n-\t    free (flaginfo.section_info[i].relocs);\n-\t  if (flaginfo.section_info[i].rel_hashes != NULL)\n-\t    free (flaginfo.section_info[i].rel_hashes);\n+\t  free (flaginfo.section_info[i].relocs);\n+\t  free (flaginfo.section_info[i].rel_hashes);\n \t}\n       free (flaginfo.section_info);\n       flaginfo.section_info = NULL;\n@@ -2435,31 +2409,20 @@ ppc_bfd_coff_final_link (bfd *abfd, struct bfd_link_info *info)\n \n       for (i = 0; i < abfd->section_count; i++)\n \t{\n-\t  if (flaginfo.section_info[i].relocs != NULL)\n-\t    free (flaginfo.section_info[i].relocs);\n-\t  if (flaginfo.section_info[i].rel_hashes != NULL)\n-\t    free (flaginfo.section_info[i].rel_hashes);\n+\t  free (flaginfo.section_info[i].relocs);\n+\t  free (flaginfo.section_info[i].rel_hashes);\n \t}\n       free (flaginfo.section_info);\n     }\n-  if (flaginfo.internal_syms != NULL)\n-    free (flaginfo.internal_syms);\n-  if (flaginfo.sec_ptrs != NULL)\n-    free (flaginfo.sec_ptrs);\n-  if (flaginfo.sym_indices != NULL)\n-    free (flaginfo.sym_indices);\n-  if (flaginfo.outsyms != NULL)\n-    free (flaginfo.outsyms);\n-  if (flaginfo.linenos != NULL)\n-    free (flaginfo.linenos);\n-  if (flaginfo.contents != NULL)\n-    free (flaginfo.contents);\n-  if (flaginfo.external_relocs != NULL)\n-    free (flaginfo.external_relocs);\n-  if (flaginfo.internal_relocs != NULL)\n-    free (flaginfo.internal_relocs);\n-  if (external_relocs != NULL)\n-    free (external_relocs);\n+  free (flaginfo.internal_syms);\n+  free (flaginfo.sec_ptrs);\n+  free (flaginfo.sym_indices);\n+  free (flaginfo.outsyms);\n+  free (flaginfo.linenos);\n+  free (flaginfo.contents);\n+  free (flaginfo.external_relocs);\n+  free (flaginfo.internal_relocs);\n+  free (external_relocs);\n   return FALSE;\n }\n #endif"
    },
    {
      "sha": "0c1061153a8fdde9261af03f406def24d0d0e50d",
      "filename": "bfd/coff-sh.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-sh.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1056,10 +1056,9 @@ sh_relax_section (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (internal_relocs != NULL\n-      && internal_relocs != coff_section_data (abfd, sec)->relocs)\n+  if (internal_relocs != coff_section_data (abfd, sec)->relocs)\n     free (internal_relocs);\n-  if (contents != NULL && contents != coff_section_data (abfd, sec)->contents)\n+  if (contents != coff_section_data (abfd, sec)->contents)\n     free (contents);\n   return FALSE;\n }\n@@ -2723,8 +2722,7 @@ sh_align_loads (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (labels != NULL)\n-    free (labels);\n+  free (labels);\n   return FALSE;\n }\n \f\n@@ -2995,12 +2993,9 @@ sh_coff_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (internal_relocs != NULL)\n-    free (internal_relocs);\n-  if (internal_syms != NULL)\n-    free (internal_syms);\n-  if (sections != NULL)\n-    free (sections);\n+  free (internal_relocs);\n+  free (internal_syms);\n+  free (sections);\n   return NULL;\n }\n "
    },
    {
      "sha": "b5e893d771dee2db369b2bf3d7b86d7599e3a16e",
      "filename": "bfd/coff-stgo32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-stgo32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coff-stgo32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-stgo32.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -249,8 +249,7 @@ go32exe_cleanup (bfd *abfd)\n {\n   abfd->origin = 0;\n \n-  if (go32exe_temp_stub != NULL)\n-    free (go32exe_temp_stub);\n+  free (go32exe_temp_stub);\n   go32exe_temp_stub = NULL;\n   go32exe_temp_stub_size = 0;\n }"
    },
    {
      "sha": "9a97ba740f541d38c2b731288947275435b4936d",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2666,8 +2666,7 @@ coff_write_relocs (bfd * abfd, int first_undef)\n \t}\n \n #ifdef TARG_AUX\n-      if (p != NULL)\n-\tfree (p);\n+      free (p);\n #endif\n     }\n "
    },
    {
      "sha": "94589b43d2f0d21d70e4caa87e2fb763cc0c0c28",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -544,11 +544,8 @@ _bfd_coff_read_internal_relocs (bfd *abfd,\n   for (; erel < erel_end; erel += relsz, irel++)\n     bfd_coff_swap_reloc_in (abfd, (void *) erel, (void *) irel);\n \n-  if (free_external != NULL)\n-    {\n-      free (free_external);\n-      free_external = NULL;\n-    }\n+  free (free_external);\n+  free_external = NULL;\n \n   if (cache && free_internal != NULL)\n     {\n@@ -566,10 +563,8 @@ _bfd_coff_read_internal_relocs (bfd *abfd,\n   return internal_relocs;\n \n  error_return:\n-  if (free_external != NULL)\n-    free (free_external);\n-  if (free_internal != NULL)\n-    free (free_internal);\n+  free (free_external);\n+  free (free_internal);\n   return NULL;\n }\n "
    },
    {
      "sha": "27ac20e80da814065c61f250c0eac5072e7615f5",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 30,
      "deletions": 68,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -993,41 +993,20 @@ _bfd_coff_final_link (bfd *abfd,\n   coff_debug_merge_hash_table_free (&flaginfo.debug_merge);\n   debug_merge_allocated = FALSE;\n \n-  if (flaginfo.internal_syms != NULL)\n-    {\n-      free (flaginfo.internal_syms);\n-      flaginfo.internal_syms = NULL;\n-    }\n-  if (flaginfo.sec_ptrs != NULL)\n-    {\n-      free (flaginfo.sec_ptrs);\n-      flaginfo.sec_ptrs = NULL;\n-    }\n-  if (flaginfo.sym_indices != NULL)\n-    {\n-      free (flaginfo.sym_indices);\n-      flaginfo.sym_indices = NULL;\n-    }\n-  if (flaginfo.linenos != NULL)\n-    {\n-      free (flaginfo.linenos);\n-      flaginfo.linenos = NULL;\n-    }\n-  if (flaginfo.contents != NULL)\n-    {\n-      free (flaginfo.contents);\n-      flaginfo.contents = NULL;\n-    }\n-  if (flaginfo.external_relocs != NULL)\n-    {\n-      free (flaginfo.external_relocs);\n-      flaginfo.external_relocs = NULL;\n-    }\n-  if (flaginfo.internal_relocs != NULL)\n-    {\n-      free (flaginfo.internal_relocs);\n-      flaginfo.internal_relocs = NULL;\n-    }\n+  free (flaginfo.internal_syms);\n+  flaginfo.internal_syms = NULL;\n+  free (flaginfo.sec_ptrs);\n+  flaginfo.sec_ptrs = NULL;\n+  free (flaginfo.sym_indices);\n+  flaginfo.sym_indices = NULL;\n+  free (flaginfo.linenos);\n+  flaginfo.linenos = NULL;\n+  free (flaginfo.contents);\n+  flaginfo.contents = NULL;\n+  free (flaginfo.external_relocs);\n+  flaginfo.external_relocs = NULL;\n+  free (flaginfo.internal_relocs);\n+  flaginfo.internal_relocs = NULL;\n \n   /* The value of the last C_FILE symbol is supposed to be the symbol\n      index of the first external symbol.  Write it out again if\n@@ -1066,11 +1045,8 @@ _bfd_coff_final_link (bfd *abfd,\n     goto error_return;\n \n   /* The outsyms buffer is used by _bfd_coff_write_global_sym.  */\n-  if (flaginfo.outsyms != NULL)\n-    {\n-      free (flaginfo.outsyms);\n-      flaginfo.outsyms = NULL;\n-    }\n+  free (flaginfo.outsyms);\n+  flaginfo.outsyms = NULL;\n \n   if (bfd_link_relocatable (info) && max_output_reloc_count > 0)\n     {\n@@ -1141,10 +1117,8 @@ _bfd_coff_final_link (bfd *abfd,\n \n       for (i = 0; i < abfd->section_count; i++)\n \t{\n-\t  if (flaginfo.section_info[i].relocs != NULL)\n-\t    free (flaginfo.section_info[i].relocs);\n-\t  if (flaginfo.section_info[i].rel_hashes != NULL)\n-\t    free (flaginfo.section_info[i].rel_hashes);\n+\t  free (flaginfo.section_info[i].relocs);\n+\t  free (flaginfo.section_info[i].rel_hashes);\n \t}\n       free (flaginfo.section_info);\n       flaginfo.section_info = NULL;\n@@ -1203,31 +1177,20 @@ _bfd_coff_final_link (bfd *abfd,\n \n       for (i = 0; i < abfd->section_count; i++)\n \t{\n-\t  if (flaginfo.section_info[i].relocs != NULL)\n-\t    free (flaginfo.section_info[i].relocs);\n-\t  if (flaginfo.section_info[i].rel_hashes != NULL)\n-\t    free (flaginfo.section_info[i].rel_hashes);\n+\t  free (flaginfo.section_info[i].relocs);\n+\t  free (flaginfo.section_info[i].rel_hashes);\n \t}\n       free (flaginfo.section_info);\n     }\n-  if (flaginfo.internal_syms != NULL)\n-    free (flaginfo.internal_syms);\n-  if (flaginfo.sec_ptrs != NULL)\n-    free (flaginfo.sec_ptrs);\n-  if (flaginfo.sym_indices != NULL)\n-    free (flaginfo.sym_indices);\n-  if (flaginfo.outsyms != NULL)\n-    free (flaginfo.outsyms);\n-  if (flaginfo.linenos != NULL)\n-    free (flaginfo.linenos);\n-  if (flaginfo.contents != NULL)\n-    free (flaginfo.contents);\n-  if (flaginfo.external_relocs != NULL)\n-    free (flaginfo.external_relocs);\n-  if (flaginfo.internal_relocs != NULL)\n-    free (flaginfo.internal_relocs);\n-  if (external_relocs != NULL)\n-    free (external_relocs);\n+  free (flaginfo.internal_syms);\n+  free (flaginfo.sec_ptrs);\n+  free (flaginfo.sym_indices);\n+  free (flaginfo.outsyms);\n+  free (flaginfo.linenos);\n+  free (flaginfo.contents);\n+  free (flaginfo.external_relocs);\n+  free (flaginfo.internal_relocs);\n+  free (external_relocs);\n   return FALSE;\n }\n \n@@ -1286,8 +1249,7 @@ process_embedded_commands (bfd *output_bfd,\n \n   if (!bfd_malloc_and_get_section (abfd, sec, &copy))\n     {\n-      if (copy != NULL)\n-\tfree (copy);\n+      free (copy);\n       return 0;\n     }\n   e = (char *) copy + sec->size;"
    },
    {
      "sha": "0b7a8c45580d09f010a1062510fd8b1bf3b5cf4f",
      "filename": "bfd/cpu-arm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/cpu-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/cpu-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arm.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -458,8 +458,7 @@ bfd_arm_update_notes (bfd *abfd, const char *note_section)\n   return TRUE;\n \n  FAIL:\n-  if (buffer != NULL)\n-    free (buffer);\n+  free (buffer);\n   return FALSE;\n }\n \n@@ -528,8 +527,7 @@ bfd_arm_get_mach_from_notes (bfd *abfd, const char *note_section)\n       }\n \n  FAIL:\n-  if (buffer != NULL)\n-    free (buffer);\n+  free (buffer);\n   return bfd_mach_arm_unknown;\n }\n "
    },
    {
      "sha": "76cb09f7cf457f38c31aa492949e95855dadafb9",
      "filename": "bfd/doc/chew.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/doc/chew.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/doc/chew.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/doc/chew.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -170,8 +170,7 @@ static void\n delete_string (buffer)\n      string_type *buffer;\n {\n-  if (buffer->ptr)\n-    free (buffer->ptr);\n+  free (buffer->ptr);\n   buffer->ptr = NULL;\n }\n \n@@ -1258,8 +1257,7 @@ free_words (void)\n     {\n       dict_type *next;\n \n-      if (ptr->word)\n-\tfree (ptr->word);\n+      free (ptr->word);\n       if (ptr->code)\n \t{\n \t  int i;\n@@ -1443,8 +1441,7 @@ compile (string)\n \t  fprintf (stderr, \"syntax error at %s\\n\", string - 1);\n \t}\n     }\n-  if (word)\n-    free (word);\n+  free (word);\n }\n \n static void"
    },
    {
      "sha": "9ed4a4a2871f03bc88c3c132a25453fe8423ba79",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 13,
      "deletions": 30,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2420,8 +2420,7 @@ decode_line_info (struct comp_unit *unit)\n \t\t    (_(\"DWARF error: mangled line number section\"));\n \t\t  bfd_set_error (bfd_error_bad_value);\n \t\tline_fail:\n-\t\t  if (filename != NULL)\n-\t\t    free (filename);\n+\t\t  free (filename);\n \t\t  goto fail;\n \t\t}\n \t      break;\n@@ -2466,8 +2465,7 @@ decode_line_info (struct comp_unit *unit)\n \t\tfilenum = _bfd_safe_read_leb128 (abfd, line_ptr, &bytes_read,\n \t\t\t\t\t\t FALSE, line_end);\n \t\tline_ptr += bytes_read;\n-\t\tif (filename)\n-\t\t  free (filename);\n+\t\tfree (filename);\n \t\tfilename = concat_filename (table, filenum);\n \t\tbreak;\n \t      }\n@@ -2513,8 +2511,7 @@ decode_line_info (struct comp_unit *unit)\n \t    }\n \t}\n \n-      if (filename)\n-\tfree (filename);\n+      free (filename);\n     }\n \n   if (unit->line_offset == 0)\n@@ -2529,10 +2526,8 @@ decode_line_info (struct comp_unit *unit)\n       table->sequences = table->sequences->prev_sequence;\n       free (seq);\n     }\n-  if (table->files != NULL)\n-    free (table->files);\n-  if (table->dirs != NULL)\n-    free (table->dirs);\n+  free (table->files);\n+  free (table->dirs);\n   return NULL;\n }\n \n@@ -5146,34 +5141,22 @@ _bfd_dwarf2_cleanup_debug_info (bfd *abfd, void **pinfo)\n \t      free (each->line_table->dirs);\n \t    }\n \n-\t  if (each->lookup_funcinfo_table)\n-\t    {\n-\t      free (each->lookup_funcinfo_table);\n-\t      each->lookup_funcinfo_table = NULL;\n-\t    }\n+\t  free (each->lookup_funcinfo_table);\n+\t  each->lookup_funcinfo_table = NULL;\n \n \t  while (function_table)\n \t    {\n-\t      if (function_table->file)\n-\t\t{\n-\t\t  free (function_table->file);\n-\t\t  function_table->file = NULL;\n-\t\t}\n-\t      if (function_table->caller_file)\n-\t\t{\n-\t\t  free (function_table->caller_file);\n-\t\t  function_table->caller_file = NULL;\n-\t\t}\n+\t      free (function_table->file);\n+\t      function_table->file = NULL;\n+\t      free (function_table->caller_file);\n+\t      function_table->caller_file = NULL;\n \t      function_table = function_table->prev_func;\n \t    }\n \n \t  while (variable_table)\n \t    {\n-\t      if (variable_table->file)\n-\t\t{\n-\t\t  free (variable_table->file);\n-\t\t  variable_table->file = NULL;\n-\t\t}\n+\t      free (variable_table->file);\n+\t      variable_table->file = NULL;\n \t      variable_table = variable_table->prev_var;\n \t    }\n \t}"
    },
    {
      "sha": "dcded6f4a7e6bf384f311232958b7fbe74ecd11c",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 21,
      "deletions": 42,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -488,12 +488,10 @@ ecoff_slurp_symbolic_header (bfd *abfd)\n   /* Now we can get the correct number of symbols.  */\n   abfd->symcount = internal_symhdr->isymMax + internal_symhdr->iextMax;\n \n-  if (raw != NULL)\n-    free (raw);\n+  free (raw);\n   return TRUE;\n  error_return:\n-  if (raw != NULL)\n-    free (raw);\n+  free (raw);\n   return FALSE;\n }\n \n@@ -2797,14 +2795,12 @@ _bfd_ecoff_write_object_contents (bfd *abfd)\n \n   if (reloc_buff != NULL)\n     bfd_release (abfd, reloc_buff);\n-  if (buff != NULL)\n-    free (buff);\n+  free (buff);\n   return TRUE;\n  error_return:\n   if (reloc_buff != NULL)\n     bfd_release (abfd, reloc_buff);\n-  if (buff != NULL)\n-    free (buff);\n+  free (buff);\n   return FALSE;\n }\n \f\n@@ -3528,17 +3524,13 @@ ecoff_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n   result = ecoff_link_add_externals (abfd, info, external_ext, ssext);\n \n-  if (ssext != NULL)\n-    free (ssext);\n-  if (external_ext != NULL)\n-    free (external_ext);\n+  free (ssext);\n+  free (external_ext);\n   return result;\n \n  error_return:\n-  if (ssext != NULL)\n-    free (ssext);\n-  if (external_ext != NULL)\n-    free (external_ext);\n+  free (ssext);\n+  free (external_ext);\n   return FALSE;\n }\n \n@@ -3820,24 +3812,15 @@ ecoff_final_link_debug_accumulate (bfd *output_bfd,\n  return_something:\n   if (ecoff_data (input_bfd)->raw_syments == NULL)\n     {\n-      if (debug->line != NULL)\n-\tfree (debug->line);\n-      if (debug->external_dnr != NULL)\n-\tfree (debug->external_dnr);\n-      if (debug->external_pdr != NULL)\n-\tfree (debug->external_pdr);\n-      if (debug->external_sym != NULL)\n-\tfree (debug->external_sym);\n-      if (debug->external_opt != NULL)\n-\tfree (debug->external_opt);\n-      if (debug->external_aux != NULL)\n-\tfree (debug->external_aux);\n-      if (debug->ss != NULL)\n-\tfree (debug->ss);\n-      if (debug->external_fdr != NULL)\n-\tfree (debug->external_fdr);\n-      if (debug->external_rfd != NULL)\n-\tfree (debug->external_rfd);\n+      free (debug->line);\n+      free (debug->external_dnr);\n+      free (debug->external_pdr);\n+      free (debug->external_sym);\n+      free (debug->external_opt);\n+      free (debug->external_aux);\n+      free (debug->ss);\n+      free (debug->external_fdr);\n+      free (debug->external_rfd);\n \n       /* Make sure we don't accidentally follow one of these pointers\n \t into freed memory.  */\n@@ -3926,17 +3909,13 @@ ecoff_indirect_link_order (bfd *output_bfd,\n       output_section->reloc_count += input_section->reloc_count;\n     }\n \n-  if (contents != NULL)\n-    free (contents);\n-  if (external_relocs != NULL)\n-    free (external_relocs);\n+  free (contents);\n+  free (external_relocs);\n   return TRUE;\n \n  error_return:\n-  if (contents != NULL)\n-    free (contents);\n-  if (external_relocs != NULL)\n-    free (external_relocs);\n+  free (contents);\n+  free (external_relocs);\n   return FALSE;\n }\n "
    },
    {
      "sha": "e7b35f670db2900240c5df8da2e6f0aff4230d49",
      "filename": "bfd/ecofflink.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ecofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ecofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecofflink.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1464,12 +1464,10 @@ ecoff_write_symhdr (bfd *abfd,\n       != swap->external_hdr_size)\n     goto error_return;\n \n-  if (buff != NULL)\n-    free (buff);\n+  free (buff);\n   return TRUE;\n  error_return:\n-  if (buff != NULL)\n-    free (buff);\n+  free (buff);\n   return FALSE;\n }\n \n@@ -1685,13 +1683,11 @@ bfd_ecoff_write_accumulated_debug (void * handle,\n   if (bfd_bwrite (debug->external_ext, amt, abfd) != amt)\n     goto error_return;\n \n-  if (space != NULL)\n-    free (space);\n+  free (space);\n   return TRUE;\n \n  error_return:\n-  if (space != NULL)\n-    free (space);\n+  free (space);\n   return FALSE;\n }\n \f\n@@ -2320,12 +2316,11 @@ lookup_line (bfd *abfd,\n \n       if (len != 0)\n \t{\n-\t  if (line_info->find_buffer != NULL)\n-\t    free (line_info->find_buffer);\n+\t  free (line_info->find_buffer);\n \t  buffer = (char *) bfd_malloc ((bfd_size_type) len);\n+\t  line_info->find_buffer = buffer;\n \t  if (buffer == NULL)\n \t    return FALSE;\n-\t  line_info->find_buffer = buffer;\n \t}\n \n       if (function_name != NULL)"
    },
    {
      "sha": "7a129b00f8d78fecd8c450ef8aca564eea4a9485",
      "filename": "bfd/elf-eh-frame.c",
      "status": "modified",
      "additions": 6,
      "deletions": 13,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-eh-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-eh-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-eh-frame.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1049,13 +1049,10 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_link_info *info,\n     (_(\"error in %pB(%pA); no .eh_frame_hdr table will be created\"),\n      abfd, sec);\n   hdr_info->u.dwarf.table = FALSE;\n-  if (sec_info)\n-    free (sec_info);\n+  free (sec_info);\n  success:\n-  if (ehbuf)\n-    free (ehbuf);\n-  if (local_cies)\n-    free (local_cies);\n+  free (ehbuf);\n+  free (local_cies);\n #undef REQUIRE\n }\n \n@@ -1558,11 +1555,8 @@ _bfd_elf_discard_section_eh_frame\n \t  }\n       }\n \n-  if (sec_info->cies)\n-    {\n-      free (sec_info->cies);\n-      sec_info->cies = NULL;\n-    }\n+  free (sec_info->cies);\n+  sec_info->cies = NULL;\n \n   /* It may be that some .eh_frame input section has greater alignment\n      than other .eh_frame sections.  In that case we run the risk of\n@@ -2511,8 +2505,7 @@ write_dwarf_eh_frame_hdr (bfd *abfd, struct bfd_link_info *info)\n     retval = FALSE;\n   free (contents);\n \n-  if (hdr_info->u.dwarf.array != NULL)\n-    free (hdr_info->u.dwarf.array);\n+  free (hdr_info->u.dwarf.array);\n   return retval;\n }\n "
    },
    {
      "sha": "58c1515ce89a34936dcd17e26e5ef73c98414bd9",
      "filename": "bfd/elf-m10200.c",
      "status": "modified",
      "additions": 9,
      "deletions": 18,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-m10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-m10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10200.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1207,21 +1207,17 @@ mn10200_elf_relax_section (bfd *abfd,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;\n@@ -1355,10 +1351,8 @@ mn10200_elf_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t     isymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL\n-\t  && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (elf_section_data (input_section)->relocs != internal_relocs)\n \tfree (internal_relocs);\n@@ -1367,13 +1361,10 @@ mn10200_elf_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (input_section)->relocs != internal_relocs)\n+  if (elf_section_data (input_section)->relocs != internal_relocs)\n     free (internal_relocs);\n   return NULL;\n }"
    },
    {
      "sha": "696514ab054c64824f6a81392748046b85608d33",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 12,
      "deletions": 21,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1372,7 +1372,7 @@ mn10300_elf_check_relocs (bfd *abfd,\n \n   result = TRUE;\n  fail:\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n \n   return result;\n@@ -2912,8 +2912,7 @@ mn10300_elf_relax_section (bfd *abfd,\n \t\t}\n \n \t      /* Cache or free any memory we allocated for the relocs.  */\n-\t      if (internal_relocs != NULL\n-\t\t  && elf_section_data (section)->relocs != internal_relocs)\n+\t      if (elf_section_data (section)->relocs != internal_relocs)\n \t\tfree (internal_relocs);\n \t      internal_relocs = NULL;\n \n@@ -3222,8 +3221,7 @@ mn10300_elf_relax_section (bfd *abfd,\n \t\t}\n \n \t      /* Cache or free any memory we allocated for the relocs.  */\n-\t      if (internal_relocs != NULL\n-\t\t  && elf_section_data (section)->relocs != internal_relocs)\n+\t      if (elf_section_data (section)->relocs != internal_relocs)\n \t\tfree (internal_relocs);\n \t      internal_relocs = NULL;\n \n@@ -4391,21 +4389,17 @@ mn10300_elf_relax_section (bfd *abfd,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (section)->this_hdr.contents != contents)\n+  if (elf_section_data (section)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (section)->relocs != internal_relocs)\n+  if (elf_section_data (section)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;\n@@ -4494,9 +4488,8 @@ mn10300_elf_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t\t  isymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (internal_relocs != elf_section_data (input_section)->relocs)\n \tfree (internal_relocs);\n@@ -4505,12 +4498,10 @@ mn10300_elf_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && internal_relocs != elf_section_data (input_section)->relocs)\n+  if (internal_relocs != elf_section_data (input_section)->relocs)\n     free (internal_relocs);\n   return NULL;\n }"
    },
    {
      "sha": "a2f4d515d3f63a40e86e0dbc11dbce5232255611",
      "filename": "bfd/elf-strtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-strtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf-strtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-strtab.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -443,8 +443,7 @@ _bfd_elf_strtab_finalize (struct elf_strtab_hash *tab)\n     }\n \n  alloc_failure:\n-  if (array)\n-    free (array);\n+  free (array);\n \n   /* Assign positions to the strings we want to keep.  */\n   sec_size = 1;"
    },
    {
      "sha": "e335ff7efbfd8d19f18dc0c6a44332907ad5ec97",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -513,17 +513,14 @@ bfd_elf_get_elf_syms (bfd *ibfd,\n \t_bfd_error_handler (_(\"%pB symbol number %lu references\"\n \t\t\t      \" nonexistent SHT_SYMTAB_SHNDX section\"),\n \t\t\t    ibfd, (unsigned long) symoffset);\n-\tif (alloc_intsym != NULL)\n-\t  free (alloc_intsym);\n+\tfree (alloc_intsym);\n \tintsym_buf = NULL;\n \tgoto out;\n       }\n \n  out:\n-  if (alloc_ext != NULL)\n-    free (alloc_ext);\n-  if (alloc_extshndx != NULL)\n-    free (alloc_extshndx);\n+  free (alloc_ext);\n+  free (alloc_extshndx);\n \n   return intsym_buf;\n }\n@@ -1878,8 +1875,7 @@ _bfd_elf_print_private_bfd_data (bfd *abfd, void *farg)\n   return TRUE;\n \n  error_return:\n-  if (dynbuf != NULL)\n-    free (dynbuf);\n+  free (dynbuf);\n   return FALSE;\n }\n \n@@ -5252,8 +5248,7 @@ _bfd_elf_map_sections_to_segments (bfd *abfd, struct bfd_link_info *info)\n   return TRUE;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n+  free (sections);\n   return FALSE;\n }\n \n@@ -9037,8 +9032,7 @@ _bfd_elf_slurp_version_tables (bfd *abfd, bfd_boolean default_imported_symver)\n   return TRUE;\n \n  error_return:\n-  if (contents != NULL)\n-    free (contents);\n+  free (contents);\n   return FALSE;\n }\n \f"
    },
    {
      "sha": "5429a462da070832c105988fcb202362f7a5afa4",
      "filename": "bfd/elf32-arc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arc.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -3128,21 +3128,17 @@ arc_elf_relax_section (bfd *abfd, asection *sec,\n        elf_section_data (sec)->this_hdr.contents = contents;\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;"
    },
    {
      "sha": "927a527a6e5ae964e6dd518be715e1af80b233a5",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 9,
      "deletions": 19,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -6617,9 +6617,7 @@ elf32_arm_size_stubs (bfd *output_bfd,\n \t\t\tfree (internal_relocs);\n \t\t    /* Fall through.  */\n \t\t    error_ret_free_local:\n-\t\t      if (local_syms != NULL\n-\t\t\t  && (symtab_hdr->contents\n-\t\t\t      != (unsigned char *) local_syms))\n+\t\t      if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\t\tfree (local_syms);\n \t\t      return FALSE;\n \t\t    }\n@@ -7986,25 +7984,21 @@ bfd_elf32_arm_process_before_allocation (bfd *abfd,\n \t    }\n \t}\n \n-      if (contents != NULL\n-\t  && elf_section_data (sec)->this_hdr.contents != contents)\n+      if (elf_section_data (sec)->this_hdr.contents != contents)\n \tfree (contents);\n       contents = NULL;\n \n-      if (internal_relocs != NULL\n-\t  && elf_section_data (sec)->relocs != internal_relocs)\n+      if (elf_section_data (sec)->relocs != internal_relocs)\n \tfree (internal_relocs);\n       internal_relocs = NULL;\n     }\n \n   return TRUE;\n \n  error_return:\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;\n@@ -8607,17 +8601,15 @@ bfd_elf32_arm_vfp11_erratum_scan (bfd *abfd, struct bfd_link_info *link_info)\n \t    }\n \t}\n \n-      if (contents != NULL\n-\t  && elf_section_data (sec)->this_hdr.contents != contents)\n+      if (elf_section_data (sec)->this_hdr.contents != contents)\n \tfree (contents);\n       contents = NULL;\n     }\n \n   return TRUE;\n \n  error_return:\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n \n   return FALSE;\n@@ -9044,17 +9036,15 @@ bfd_elf32_arm_stm32l4xx_erratum_scan (bfd *abfd,\n \t    }\n \t}\n \n-      if (contents != NULL\n-\t  && elf_section_data (sec)->this_hdr.contents != contents)\n+      if (elf_section_data (sec)->this_hdr.contents != contents)\n \tfree (contents);\n       contents = NULL;\n     }\n \n   return TRUE;\n \n  error_return:\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n \n   return FALSE;"
    },
    {
      "sha": "d4ad18c82579f704cda765d65cf4277f3ff07f10",
      "filename": "bfd/elf32-avr.c",
      "status": "modified",
      "additions": 11,
      "deletions": 22,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-avr.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -858,10 +858,8 @@ elf32_avr_link_hash_table_free (bfd *obfd)\n     = (struct elf32_avr_link_hash_table *) obfd->link.hash;\n \n   /* Free the address mapping table.  */\n-  if (htab->amt_stub_offsets != NULL)\n-    free (htab->amt_stub_offsets);\n-  if (htab->amt_destination_addr != NULL)\n-    free (htab->amt_destination_addr);\n+  free (htab->amt_stub_offsets);\n+  free (htab->amt_destination_addr);\n \n   bfd_hash_table_free (&htab->bstab);\n   _bfd_elf_link_hash_table_free (obfd);\n@@ -3166,21 +3164,17 @@ elf32_avr_relax_section (bfd *abfd,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;\n@@ -3273,10 +3267,8 @@ elf32_avr_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t\tisymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL\n-\t  && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (elf_section_data (input_section)->relocs != internal_relocs)\n \tfree (internal_relocs);\n@@ -3285,13 +3277,10 @@ elf32_avr_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (input_section)->relocs != internal_relocs)\n+  if (elf_section_data (input_section)->relocs != internal_relocs)\n     free (internal_relocs);\n   return NULL;\n }"
    },
    {
      "sha": "b06daf507ed7ed5c1764e8a33b2eac3f47816a59",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -5395,18 +5395,16 @@ bfd_bfin_elf32_create_embedded_relocs (bfd *abfd,\n \tstrncpy ((char *) p + 4, targetsec->output_section->name, 8);\n     }\n \n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (datasec)->relocs != internal_relocs)\n+  if (elf_section_data (datasec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (datasec)->relocs != internal_relocs)\n+  if (elf_section_data (datasec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "62906c83a500821dcedbcf367d0338ede5e47146",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 16,
      "deletions": 28,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -824,10 +824,9 @@ cr16_elf_check_relocs (bfd *abfd, struct bfd_link_info *info, asection *sec,\n \t}\n     }\n \n-   result = TRUE;\n-  fail:\n-    if (isymbuf != NULL)\n-      free (isymbuf);\n+  result = TRUE;\n+ fail:\n+  free (isymbuf);\n \n   return result;\n }\n@@ -1572,10 +1571,8 @@ elf32_cr16_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t     isymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL\n-\t  && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (elf_section_data (input_section)->relocs != internal_relocs)\n \tfree (internal_relocs);\n@@ -1584,13 +1581,10 @@ elf32_cr16_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (input_section)->relocs != internal_relocs)\n+  if (elf_section_data (input_section)->relocs != internal_relocs)\n     free (internal_relocs);\n   return NULL;\n }\n@@ -2174,21 +2168,17 @@ elf32_cr16_relax_section (bfd *abfd, asection *sec,\n \n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;\n@@ -2847,18 +2837,16 @@ bfd_cr16_elf32_create_embedded_relocs (bfd *abfd,\n \t strncpy ((char *) p + 4, targetsec->output_section->name, 4);\n     }\n \n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (datasec)->relocs != internal_relocs)\n+  if (elf_section_data (datasec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (datasec)->relocs != internal_relocs)\n+  if (elf_section_data (datasec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "82f1a3e469033206e943c832bc441ef70b47c81b",
      "filename": "bfd/elf32-crx.c",
      "status": "modified",
      "additions": 9,
      "deletions": 18,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-crx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-crx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-crx.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -805,10 +805,8 @@ elf32_crx_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t     isymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL\n-\t  && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (elf_section_data (input_section)->relocs != internal_relocs)\n \tfree (internal_relocs);\n@@ -817,13 +815,10 @@ elf32_crx_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (input_section)->relocs != internal_relocs)\n+  if (elf_section_data (input_section)->relocs != internal_relocs)\n     free (internal_relocs);\n   return NULL;\n }\n@@ -1289,21 +1284,17 @@ elf32_crx_relax_section (bfd *abfd, asection *sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;"
    },
    {
      "sha": "9e61ed59032e2e926a06ced0d2d639b5d0cf879b",
      "filename": "bfd/elf32-epiphany.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-epiphany.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-epiphany.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-epiphany.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -341,21 +341,17 @@ epiphany_elf_relax_section (bfd *abfd, asection *sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "78457d533033d85fb3853aec6c98caec0a428975",
      "filename": "bfd/elf32-ft32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-ft32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-ft32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ft32.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1230,15 +1230,13 @@ ft32_elf_relax_section\n \n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (free_relocs != NULL)\n-    free (free_relocs);\n+  free (free_relocs);\n \n   return TRUE;\n }"
    },
    {
      "sha": "5488500b1712d685788d2d168da5e196bb531bb9",
      "filename": "bfd/elf32-h8300.c",
      "status": "modified",
      "additions": 9,
      "deletions": 18,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-h8300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-h8300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-h8300.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1465,21 +1465,17 @@ elf32_h8_relax_section (bfd *abfd, asection *sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }\n@@ -1682,10 +1678,8 @@ elf32_h8_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t       isymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL\n-\t  && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (elf_section_data (input_section)->relocs != internal_relocs)\n \tfree (internal_relocs);\n@@ -1694,13 +1688,10 @@ elf32_h8_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (input_section)->relocs != internal_relocs)\n+  if (elf_section_data (input_section)->relocs != internal_relocs)\n     free (internal_relocs);\n   return NULL;\n }"
    },
    {
      "sha": "c0c8b8ec9a71b2b381ab5e9adf17ab535459b6f8",
      "filename": "bfd/elf32-ip2k.c",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-ip2k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-ip2k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ip2k.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -638,8 +638,7 @@ adjust_all_relocations (bfd *abfd,\n \t{\n \t  if (!bfd_malloc_and_get_section (abfd, stab, &stabcontents))\n \t    {\n-\t      if (stabcontents != NULL)\n-\t\tfree (stabcontents);\n+\t      free (stabcontents);\n \t      return;\n \t    }\n \n@@ -1210,21 +1209,17 @@ ip2k_elf_relax_section (bfd *abfd,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "7a97d6d9092f8a66a62549acafa602840b49866f",
      "filename": "bfd/elf32-m32c.c",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-m32c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-m32c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32c.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1901,11 +1901,8 @@ m32c_elf_relax_section\n \n     } /* next relocation */\n \n-  if (free_relocs != NULL)\n-    {\n-      free (free_relocs);\n-      free_relocs = NULL;\n-    }\n+  free (free_relocs);\n+  free_relocs = NULL;\n \n   if (free_contents != NULL)\n     {\n@@ -1931,7 +1928,7 @@ m32c_elf_relax_section\n       /* Cache the symbols for elf_link_input_bfd.  */\n       else\n \t{\n-\tsymtab_hdr->contents = NULL /* (unsigned char *) intsyms*/;\n+\t  symtab_hdr->contents = NULL /* (unsigned char *) intsyms*/;\n \t}\n \n       free_intsyms = NULL;\n@@ -1940,17 +1937,14 @@ m32c_elf_relax_section\n   return TRUE;\n \n  error_return:\n-  if (free_relocs != NULL)\n-    free (free_relocs);\n-  if (free_contents != NULL)\n-    free (free_contents);\n+  free (free_relocs);\n+  free (free_contents);\n   if (shndx_buf != NULL)\n     {\n       shndx_hdr->contents = NULL;\n       free (shndx_buf);\n     }\n-  if (free_intsyms != NULL)\n-    free (free_intsyms);\n+  free (free_intsyms);\n   return FALSE;\n }\n "
    },
    {
      "sha": "7bbb48962d2e86f3df36624d342cd6032541140b",
      "filename": "bfd/elf32-m68hc11.c",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-m68hc11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-m68hc11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc11.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1082,11 +1082,8 @@ m68hc11_elf_relax_section (bfd *abfd, asection *sec,\n       prev_insn_group = 0;\n     }\n \n-  if (free_relocs != NULL)\n-    {\n-      free (free_relocs);\n-      free_relocs = NULL;\n-    }\n+  free (free_relocs);\n+  free_relocs = NULL;\n \n   if (free_contents != NULL)\n     {\n@@ -1115,12 +1112,9 @@ m68hc11_elf_relax_section (bfd *abfd, asection *sec,\n   return TRUE;\n \n  error_return:\n-  if (free_relocs != NULL)\n-    free (free_relocs);\n-  if (free_contents != NULL)\n-    free (free_contents);\n-  if (free_extsyms != NULL)\n-    free (free_extsyms);\n+  free (free_relocs);\n+  free (free_contents);\n+  free (free_extsyms);\n   return FALSE;\n }\n "
    },
    {
      "sha": "868435a444252e7826c139adb096160ec29a331b",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -4448,18 +4448,16 @@ bfd_m68k_elf32_create_embedded_relocs (bfd *abfd, struct bfd_link_info *info,\n \tstrncpy ((char *) p + 4, targetsec->output_section->name, 8);\n     }\n \n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (datasec)->relocs != internal_relocs)\n+  if (elf_section_data (datasec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (datasec)->relocs != internal_relocs)\n+  if (elf_section_data (datasec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "f88da8f6a0c6e57506174105db13f341efabc7b7",
      "filename": "bfd/elf32-microblaze.c",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-microblaze.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2234,11 +2234,8 @@ microblaze_elf_relax_section (bfd *abfd,\n       symtab_hdr->contents = (bfd_byte *) isymbuf;\n     }\n \n-  if (free_relocs != NULL)\n-    {\n-      free (free_relocs);\n-      free_relocs = NULL;\n-    }\n+  free (free_relocs);\n+  free_relocs = NULL;\n \n   if (free_contents != NULL)\n     {\n@@ -2261,16 +2258,11 @@ microblaze_elf_relax_section (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (free_relocs != NULL)\n-    free (free_relocs);\n-  if (free_contents != NULL)\n-    free (free_contents);\n-  if (sec->relax != NULL)\n-    {\n-      free (sec->relax);\n-      sec->relax = NULL;\n-      sec->relax_count = 0;\n-    }\n+  free (free_relocs);\n+  free (free_contents);\n+  free (sec->relax);\n+  sec->relax = NULL;\n+  sec->relax_count = 0;\n   return FALSE;\n }\n "
    },
    {
      "sha": "59e54ecbc9ae8445063290afdbc649fddab40460",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2487,20 +2487,17 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;"
    },
    {
      "sha": "2d26e2ad85d5f1e9a316f62d8588d1e3cbb471bd",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 8,
      "deletions": 12,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -12572,15 +12572,13 @@ nds32_elf_relax_section (bfd *abfd, asection *sec,\n     }\n \n  finish:\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n \n-  if (isymbuf != NULL && symtab_hdr->contents != (bfd_byte *) isymbuf)\n+  if (symtab_hdr->contents != (bfd_byte *) isymbuf)\n     free (isymbuf);\n \n   return result;\n@@ -13473,7 +13471,7 @@ elf32_nds32_check_relax_group (bfd *abfd, asection *asec)\n     }\n   while (FALSE);\n \n-  if ((relocs != NULL) && (elf_section_data (asec)->relocs != relocs))\n+  if (elf_section_data (asec)->relocs != relocs)\n     free (relocs);\n \n   if ((min_id != relax_group_ptr->min_id)\n@@ -13612,7 +13610,7 @@ elf32_nds32_unify_relax_group (bfd *abfd, asection *asec)\n     }\n   while (FALSE);\n \n-  if (relocs != NULL && elf_section_data (asec)->relocs != relocs)\n+  if (elf_section_data (asec)->relocs != relocs)\n     free (relocs);\n \n   return result;\n@@ -14038,15 +14036,13 @@ nds32_elf_unify_tls_model (bfd *inbfd, asection *insec, bfd_byte *incontents,\n   if (incontents)\n     contents = NULL;\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (insec)->relocs != internal_relocs)\n+  if (elf_section_data (insec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n-  if (contents != NULL\n-      && elf_section_data (insec)->this_hdr.contents != contents)\n+  if (elf_section_data (insec)->this_hdr.contents != contents)\n     free (contents);\n \n-  if (local_syms != NULL && symtab_hdr->contents != (bfd_byte *) local_syms)\n+  if (symtab_hdr->contents != (bfd_byte *) local_syms)\n     free (local_syms);\n \n   if (chain.next)"
    },
    {
      "sha": "0b2e68ebd6905708b6f7cba3954869f669bf9255",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -4538,8 +4538,7 @@ nios2_elf32_relocate_section (bfd *output_bfd,\n \t    {\n \t      (*info->callbacks->warning) (info, msg, name, input_bfd,\n \t\t\t\t\t   input_section, rel->r_offset);\n-\t      if (msgbuf)\n-\t\tfree (msgbuf);\n+\t      free (msgbuf);\n \t      return FALSE;\n \t    }\n \t}"
    },
    {
      "sha": "a900abe35ef004709f5196d26452641a5a1e925e",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 8,
      "deletions": 15,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1633,8 +1633,7 @@ ppc_elf_begin_write_processing (bfd *abfd, struct bfd_link_info *link_info)\n       apuinfo_set = TRUE;\n       if (largest_input_size < asec->size)\n \t{\n-\t  if (buffer)\n-\t    free (buffer);\n+\t  free (buffer);\n \t  largest_input_size = asec->size;\n \t  buffer = bfd_malloc (largest_input_size);\n \t  if (!buffer)\n@@ -1692,8 +1691,7 @@ ppc_elf_begin_write_processing (bfd *abfd, struct bfd_link_info *link_info)\n     }\n \n  fail:\n-  if (buffer)\n-    free (buffer);\n+  free (buffer);\n \n   if (error_message)\n     _bfd_error_handler (error_message, APUINFO_SECTION_NAME, ibfd);\n@@ -4263,8 +4261,7 @@ ppc_elf_inline_plt (struct bfd_link_info *info)\n \t\t  {\n \t\t    if (elf_section_data (sec)->relocs != relstart)\n \t\t      free (relstart);\n-\t\t    if (local_syms != NULL\n-\t\t\t&& symtab_hdr->contents != (unsigned char *) local_syms)\n+\t\t    if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\t      free (local_syms);\n \t\t    return FALSE;\n \t\t  }\n@@ -6651,8 +6648,7 @@ ppc_elf_relax_section (bfd *abfd,\n       rel_hdr = _bfd_elf_single_rel_hdr (isec);\n       rel_hdr->sh_size += changes * rel_hdr->sh_entsize;\n     }\n-  else if (internal_relocs != NULL\n-\t   && elf_section_data (isec)->relocs != internal_relocs)\n+  else if (elf_section_data (isec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   *again = changes != 0 || workaround_change;\n@@ -6665,13 +6661,11 @@ ppc_elf_relax_section (bfd *abfd,\n       branch_fixups = branch_fixups->next;\n       free (f);\n     }\n-  if (isymbuf != NULL && (unsigned char *) isymbuf != symtab_hdr->contents)\n+  if ((unsigned char *) isymbuf != symtab_hdr->contents)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (isec)->this_hdr.contents != contents)\n+  if (elf_section_data (isec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (isec)->relocs != internal_relocs)\n+  if (elf_section_data (isec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }\n@@ -9710,8 +9704,7 @@ ppc_finish_symbols (struct bfd_link_info *info)\n \t\tif (!get_sym_h (NULL, &sym, &sym_sec, NULL, &local_syms,\n \t\t\t\tlplt - local_plt, ibfd))\n \t\t  {\n-\t\t    if (local_syms != NULL\n-\t\t\t&& symtab_hdr->contents != (unsigned char *) local_syms)\n+\t\t    if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\t      free (local_syms);\n \t\t    return FALSE;\n \t\t  }"
    },
    {
      "sha": "bc44a1bd12654dad20bf1011154a784fe0738396",
      "filename": "bfd/elf32-pru.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pru.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1523,20 +1523,17 @@ pru_elf32_relax_section (bfd * abfd, asection * sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;"
    },
    {
      "sha": "3929776287fe69b79e11ab7626088a5d9f2fb9d4",
      "filename": "bfd/elf32-rl78.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-rl78.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-rl78.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rl78.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2552,20 +2552,16 @@ rl78_elf_relax_section\n   return TRUE;\n \n  error_return:\n-  if (free_relocs != NULL)\n-    free (free_relocs);\n-\n-  if (free_contents != NULL)\n-    free (free_contents);\n+  free (free_relocs);\n+  free (free_contents);\n \n   if (shndx_buf != NULL)\n     {\n       shndx_hdr->contents = NULL;\n       free (shndx_buf);\n     }\n \n-  if (free_intsyms != NULL)\n-    free (free_intsyms);\n+  free (free_intsyms);\n \n   return TRUE;\n }"
    },
    {
      "sha": "3f03ab21f09cf4f7a149232e131a4e60a8886e13",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -3037,17 +3037,15 @@ elf32_rx_relax_section (bfd *\t\t       abfd,\n   return TRUE;\n \n  error_return:\n-  if (free_contents != NULL)\n-    free (free_contents);\n+  free (free_contents);\n \n   if (shndx_buf != NULL)\n     {\n       shndx_hdr->contents = NULL;\n       free (shndx_buf);\n     }\n \n-  if (free_intsyms != NULL)\n-    free (free_intsyms);\n+  free (free_intsyms);\n \n   return FALSE;\n }"
    },
    {
      "sha": "7daf8516c4b1cc494aa5ec731f88ce3067a5bbff",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 14,
      "deletions": 28,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -167,8 +167,7 @@ sh_elf_reloc_loop (int r_type ATTRIBUTE_UNUSED, bfd *input_bfd,\n \t  if (!bfd_malloc_and_get_section (input_bfd, symbol_section,\n \t\t\t\t\t   &contents))\n \t    {\n-\t      if (contents != NULL)\n-\t\tfree (contents);\n+\t      free (contents);\n \t      return bfd_reloc_outofrange;\n \t    }\n \t}\n@@ -203,8 +202,7 @@ sh_elf_reloc_loop (int r_type ATTRIBUTE_UNUSED, bfd *input_bfd,\n       end = start0;\n     }\n \n-  if (contents != NULL\n-      && elf_section_data (symbol_section)->this_hdr.contents != contents)\n+  if (elf_section_data (symbol_section)->this_hdr.contents != contents)\n     free (contents);\n \n   insn = bfd_get_16 (input_bfd, contents + addr);\n@@ -811,21 +809,17 @@ sh_elf_relax_section (bfd *abfd, asection *sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;\n@@ -1195,8 +1189,7 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *sec, bfd_vma addr,\n \t\t\t when we leave sh_coff_relax_section.  */\n \t\t      if (!bfd_malloc_and_get_section (abfd, o, &ocontents))\n \t\t\t{\n-\t\t\t  if (ocontents != NULL)\n-\t\t\t    free (ocontents);\n+\t\t\t  free (ocontents);\n \t\t\t  return FALSE;\n \t\t\t}\n \n@@ -1253,8 +1246,7 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *sec, bfd_vma addr,\n \t\t\t when we leave sh_coff_relax_section.  */\n \t\t      if (!bfd_malloc_and_get_section (abfd, o, &ocontents))\n \t\t\t{\n-\t\t\t  if (ocontents != NULL)\n-\t\t\t    free (ocontents);\n+\t\t\t  free (ocontents);\n \t\t\t  return FALSE;\n \t\t\t}\n \n@@ -1387,8 +1379,7 @@ sh_elf_align_loads (bfd *abfd ATTRIBUTE_UNUSED, asection *sec,\n   return TRUE;\n \n  error_return:\n-  if (labels != NULL)\n-    free (labels);\n+  free (labels);\n   return FALSE;\n }\n \n@@ -5257,10 +5248,8 @@ sh_elf_get_relocated_section_contents (bfd *output_bfd,\n \t\t\t\t     isymbuf, sections))\n \tgoto error_return;\n \n-      if (sections != NULL)\n-\tfree (sections);\n-      if (isymbuf != NULL\n-\t  && symtab_hdr->contents != (unsigned char *) isymbuf)\n+      free (sections);\n+      if (symtab_hdr->contents != (unsigned char *) isymbuf)\n \tfree (isymbuf);\n       if (elf_section_data (input_section)->relocs != internal_relocs)\n \tfree (internal_relocs);\n@@ -5269,13 +5258,10 @@ sh_elf_get_relocated_section_contents (bfd *output_bfd,\n   return data;\n \n  error_return:\n-  if (sections != NULL)\n-    free (sections);\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  free (sections);\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (input_section)->relocs != internal_relocs)\n+  if (elf_section_data (input_section)->relocs != internal_relocs)\n     free (internal_relocs);\n   return NULL;\n }"
    },
    {
      "sha": "dcdee26082536ea9c389bd5e571b5fd5a160edc3",
      "filename": "bfd/elf32-spu.c",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-spu.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1598,9 +1598,7 @@ process_stubs (struct bfd_link_info *info, bfd_boolean build)\n \t\t  if (elf_section_data (isec)->relocs != internal_relocs)\n \t\t    free (internal_relocs);\n \t\terror_ret_free_local:\n-\t\t  if (local_syms != NULL\n-\t\t      && (symtab_hdr->contents\n-\t\t\t  != (unsigned char *) local_syms))\n+\t\t  if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\t    free (local_syms);\n \t\t  return FALSE;\n \t\t}\n@@ -3013,13 +3011,10 @@ discover_functions (struct bfd_link_info *info)\n \t  continue;\n \t}\n \n-      if (symtab_hdr->contents != NULL)\n-\t{\n-\t  /* Don't use cached symbols since the generic ELF linker\n-\t     code only reads local symbols, and we need globals too.  */\n-\t  free (symtab_hdr->contents);\n-\t  symtab_hdr->contents = NULL;\n-\t}\n+      /* Don't use cached symbols since the generic ELF linker\n+\t code only reads local symbols, and we need globals too.  */\n+      free (symtab_hdr->contents);\n+      symtab_hdr->contents = NULL;\n       syms = bfd_elf_get_elf_syms (ibfd, symtab_hdr, symcount, 0,\n \t\t\t\t   NULL, NULL, NULL);\n       symtab_hdr->contents = (void *) syms;"
    },
    {
      "sha": "0235044d2de47d79b06b1c656da6e5b7fdab6688",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -4093,16 +4093,13 @@ v850_elf_relax_section (bfd *abfd,\n     }\n \n  finish:\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != (unsigned char *) contents)\n+  if (elf_section_data (sec)->this_hdr.contents != (unsigned char *) contents)\n     free (contents);\n \n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (bfd_byte *) isymbuf)\n+  if (symtab_hdr->contents != (bfd_byte *) isymbuf)\n     free (isymbuf);\n \n   return result;"
    },
    {
      "sha": "05c4f8430a2046a9c48546c815f0eb2ebdb2f728",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 17,
      "deletions": 29,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -3048,9 +3048,7 @@ elf_xtensa_relocate_section (bfd *output_bfd,\n \t}\n     }\n \n-  if (lit_table)\n-    free (lit_table);\n-\n+  free (lit_table);\n   input_section->reloc_done = TRUE;\n \n   return TRUE;\n@@ -3130,8 +3128,7 @@ elf_xtensa_combine_prop_entries (bfd *output_bfd,\n \n   if (!bfd_malloc_and_get_section (output_bfd, sxtlit, &contents))\n     {\n-      if (contents != 0)\n-\tfree (contents);\n+      free (contents);\n       free (table);\n       return -1;\n     }\n@@ -6295,8 +6292,7 @@ free_section_cache (section_cache_t *sec_cache)\n     {\n       release_contents (sec_cache->sec, sec_cache->contents);\n       release_internal_relocs (sec_cache->sec, sec_cache->relocs);\n-      if (sec_cache->ptbl)\n-\tfree (sec_cache->ptbl);\n+      free (sec_cache->ptbl);\n     }\n }\n \n@@ -6353,8 +6349,7 @@ section_cache_section (section_cache_t *sec_cache,\n  err:\n   release_contents (sec, contents);\n   release_internal_relocs (sec, internal_relocs);\n-  if (prop_table)\n-    free (prop_table);\n+  free (prop_table);\n   return FALSE;\n }\n \n@@ -6473,8 +6468,7 @@ init_ebb_constraint (ebb_constraint *c)\n static void\n free_ebb_constraint (ebb_constraint *c)\n {\n-  if (c->actions)\n-    free (c->actions);\n+  free (c->actions);\n }\n \n \n@@ -6708,8 +6702,7 @@ ebb_propose_action (ebb_constraint *c,\n \n       for (i = 0; i < c->action_count; i++)\n \tnew_actions[i] = c->actions[i];\n-      if (c->actions)\n-\tfree (c->actions);\n+      free (c->actions);\n       c->actions = new_actions;\n       c->action_allocated = new_allocated;\n     }\n@@ -6761,8 +6754,7 @@ pin_internal_relocs (asection *sec, Elf_Internal_Rela *internal_relocs)\n static void\n release_internal_relocs (asection *sec, Elf_Internal_Rela *internal_relocs)\n {\n-  if (internal_relocs\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n }\n \n@@ -6780,8 +6772,7 @@ retrieve_contents (bfd *abfd, asection *sec, bfd_boolean keep_memory)\n     {\n       if (!bfd_malloc_and_get_section (abfd, sec, &contents))\n \t{\n-\t  if (contents)\n-\t    free (contents);\n+\t  free (contents);\n \t  return NULL;\n \t}\n       if (keep_memory)\n@@ -6801,7 +6792,7 @@ pin_contents (asection *sec, bfd_byte *contents)\n static void\n release_contents (asection *sec, bfd_byte *contents)\n {\n-  if (contents && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n }\n \n@@ -7886,10 +7877,8 @@ compute_text_actions (bfd *abfd,\n  error_return:\n   release_contents (sec, contents);\n   release_internal_relocs (sec, internal_relocs);\n-  if (prop_table)\n-    free (prop_table);\n-  if (reloc_opcodes)\n-    free (reloc_opcodes);\n+  free (prop_table);\n+  free (reloc_opcodes);\n \n   return ok;\n }\n@@ -8489,10 +8478,11 @@ build_xlate_map (asection *sec, xtensa_relax_info *relax_info)\n static void\n free_xlate_map (xlate_map_t *map)\n {\n-  if (map && map->entry)\n-    free (map->entry);\n   if (map)\n-    free (map);\n+    {\n+      free (map->entry);\n+      free (map);\n+    }\n }\n \n \n@@ -8676,8 +8666,7 @@ check_section_ebb_pcrels_fit (bfd *abfd,\n \t}\n     }\n \n-  if (xmap)\n-    free_xlate_map (xmap);\n+  free_xlate_map (xmap);\n \n   return ok;\n }\n@@ -8889,8 +8878,7 @@ compute_removed_literals (bfd *abfd,\n #endif /* DEBUG */\n \n  error_return:\n-  if (prop_table)\n-    free (prop_table);\n+  free (prop_table);\n   free_section_cache (&target_sec_cache);\n \n   release_contents (sec, contents);"
    },
    {
      "sha": "4e4efae0b1bf2d76980d7f51a6a4183674d3e1de",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 17,
      "deletions": 34,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1422,30 +1422,18 @@ elf64_alpha_read_ecoff_info (bfd *abfd, asection *section,\n   return TRUE;\n \n  error_return:\n-  if (ext_hdr != NULL)\n-    free (ext_hdr);\n-  if (debug->line != NULL)\n-    free (debug->line);\n-  if (debug->external_dnr != NULL)\n-    free (debug->external_dnr);\n-  if (debug->external_pdr != NULL)\n-    free (debug->external_pdr);\n-  if (debug->external_sym != NULL)\n-    free (debug->external_sym);\n-  if (debug->external_opt != NULL)\n-    free (debug->external_opt);\n-  if (debug->external_aux != NULL)\n-    free (debug->external_aux);\n-  if (debug->ss != NULL)\n-    free (debug->ss);\n-  if (debug->ssext != NULL)\n-    free (debug->ssext);\n-  if (debug->external_fdr != NULL)\n-    free (debug->external_fdr);\n-  if (debug->external_rfd != NULL)\n-    free (debug->external_rfd);\n-  if (debug->external_ext != NULL)\n-    free (debug->external_ext);\n+  free (ext_hdr);\n+  free (debug->line);\n+  free (debug->external_dnr);\n+  free (debug->external_pdr);\n+  free (debug->external_sym);\n+  free (debug->external_opt);\n+  free (debug->external_aux);\n+  free (debug->ss);\n+  free (debug->ssext);\n+  free (debug->external_fdr);\n+  free (debug->external_rfd);\n+  free (debug->external_ext);\n   return FALSE;\n }\n \n@@ -3186,12 +3174,10 @@ elf64_alpha_relax_opt_call (struct alpha_relax_info *info, bfd_vma symval)\n \n       if (!gpdisp || gpdisp->r_addend != 4)\n \t{\n-\t  if (tsec_free)\n-\t    free (tsec_free);\n+\t  free (tsec_free);\n \t  return 0;\n \t}\n-      if (tsec_free)\n-\tfree (tsec_free);\n+      free (tsec_free);\n     }\n \n   /* We've now determined that we can skip an initial gp load.  Verify\n@@ -4037,14 +4023,11 @@ elf64_alpha_relax_section (bfd *abfd, asection *sec,\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (info.contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != info.contents)\n+  if (elf_section_data (sec)->this_hdr.contents != info.contents)\n     free (info.contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "7fc2dc0e0c1384babf3b7eee1c56c1a735d40dbc",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -534,8 +534,7 @@ elf64_hppa_check_relocs (bfd *abfd,\n \n \t ?!? Note we leak the last section_syms array.  Presumably we\n \t could free it in one of the later routines in this file.  */\n-      if (hppa_info->section_syms)\n-\tfree (hppa_info->section_syms);\n+      free (hppa_info->section_syms);\n \n       /* Read this BFD's local symbols.  */\n       if (symtab_hdr->sh_info != 0)"
    },
    {
      "sha": "a97858ebfbe8af1ac31f0f822b2ce3c14d2143f4",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 16,
      "deletions": 28,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -792,13 +792,11 @@ elf64_ia64_relax_section (bfd *abfd, asection *sec,\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && (unsigned char *) isymbuf != symtab_hdr->contents)\n+  if ((unsigned char *) isymbuf != symtab_hdr->contents)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }\n@@ -999,14 +997,11 @@ elf64_ia64_global_dyn_info_free (void **xentry,\n   if (entry->root.root.type == bfd_link_hash_warning)\n     entry = (struct elf64_ia64_link_hash_entry *) entry->root.root.u.i.link;\n \n-  if (entry->info)\n-    {\n-      free (entry->info);\n-      entry->info = NULL;\n-      entry->count = 0;\n-      entry->sorted_count = 0;\n-      entry->size = 0;\n-    }\n+  free (entry->info);\n+  entry->info = NULL;\n+  entry->count = 0;\n+  entry->sorted_count = 0;\n+  entry->size = 0;\n \n   return TRUE;\n }\n@@ -1020,14 +1015,11 @@ elf64_ia64_local_dyn_info_free (void **slot,\n   struct elf64_ia64_local_hash_entry *entry\n     = (struct elf64_ia64_local_hash_entry *) *slot;\n \n-  if (entry->info)\n-    {\n-      free (entry->info);\n-      entry->info = NULL;\n-      entry->count = 0;\n-      entry->sorted_count = 0;\n-      entry->size = 0;\n-    }\n+  free (entry->info);\n+  entry->info = NULL;\n+  entry->count = 0;\n+  entry->sorted_count = 0;\n+  entry->size = 0;\n \n   return TRUE;\n }\n@@ -5242,11 +5234,8 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t}\n     }\n \n-  if (isymbuf != NULL)\n-    {\n-      free (isymbuf);\n-      isymbuf = NULL;\n-    }\n+  free (isymbuf);\n+  isymbuf = NULL;\n \n   /* If this object is the same format as the output object, and it is\n      not a shared library, then let the backend look through the\n@@ -5303,8 +5292,7 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n  error_free_vers:\n  error_free_sym:\n-  if (isymbuf != NULL)\n-    free (isymbuf);\n+  free (isymbuf);\n  error_return:\n   return FALSE;\n }"
    },
    {
      "sha": "a07c39f1fd13df86314540945c8998c7bd8a8e91",
      "filename": "bfd/elf64-mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mips.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -4162,14 +4162,11 @@ mips_elf64_slurp_one_reloc_table (bfd *abfd, asection *asect,\n \t}\n     }\n \n-  if (allocated != NULL)\n-    free (allocated);\n-\n+  free (allocated);\n   return TRUE;\n \n  error_return:\n-  if (allocated != NULL)\n-    free (allocated);\n+  free (allocated);\n   return FALSE;\n }\n "
    },
    {
      "sha": "fee4a0fbd78c778b2d63bb2c6c10b98a7680fcab",
      "filename": "bfd/elf64-mmix.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mmix.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2844,8 +2844,7 @@ mmix_elf_relax_section (bfd *abfd,\n \n   BFD_ASSERT(pjsno == mmix_elf_section_data (sec)->pjs.n_pushj_relocs);\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   if (sec->size < size + mmix_elf_section_data (sec)->pjs.stubs_size_sum)\n@@ -2860,10 +2859,9 @@ mmix_elf_relax_section (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && (unsigned char *) isymbuf != symtab_hdr->contents)\n+  if ((unsigned char *) isymbuf != symtab_hdr->contents)\n     free (isymbuf);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "bbd8aee4f9679e66a48d55e01cba5eea8d3b67ae",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 19,
      "deletions": 37,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2422,8 +2422,7 @@ ppc64_elf_get_synthetic_symtab (bfd *abfd,\n \tfree_contents_and_exit_err:\n \t  count = -1;\n \tfree_contents_and_exit:\n-\t  if (contents)\n-\t    free (contents);\n+\t  free (contents);\n \t  goto done;\n \t}\n \n@@ -7303,11 +7302,9 @@ ppc64_elf_edit_opd (struct bfd_link_info *info)\n \t      bfd_byte *loc;\n \t      if (!bfd_malloc_and_get_section (ibfd, sec, &loc))\n \t\t{\n-\t\t  if (loc != NULL)\n-\t\t    free (loc);\n+\t\t  free (loc);\n \t\terror_ret:\n-\t\t  if (local_syms != NULL\n-\t\t      && symtab_hdr->contents != (unsigned char *) local_syms)\n+\t\t  if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\t    free (local_syms);\n \t\t  if (elf_section_data (sec)->relocs != relstart)\n \t\t    free (relstart);\n@@ -7633,8 +7630,7 @@ ppc64_elf_inline_plt (struct bfd_link_info *info)\n \t\t  {\n \t\t    if (elf_section_data (sec)->relocs != relstart)\n \t\t      free (relstart);\n-\t\t    if (local_syms != NULL\n-\t\t\t&& symtab_hdr->contents != (bfd_byte *) local_syms)\n+\t\t    if (symtab_hdr->contents != (bfd_byte *) local_syms)\n \t\t      free (local_syms);\n \t\t    return FALSE;\n \t\t  }\n@@ -7975,11 +7971,9 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t    err_free_rel:\n \t\t      if (elf_section_data (sec)->relocs != relstart)\n \t\t\tfree (relstart);\n-\t\t      if (toc_ref != NULL)\n-\t\t\tfree (toc_ref);\n-\t\t      if (locsyms != NULL\n-\t\t\t  && (elf_symtab_hdr (ibfd).contents\n-\t\t\t      != (unsigned char *) locsyms))\n+\t\t      free (toc_ref);\n+\t\t      if (elf_symtab_hdr (ibfd).contents\n+\t\t\t  != (unsigned char *) locsyms)\n \t\t\tfree (locsyms);\n \t\t      return ret;\n \t\t    }\n@@ -8394,8 +8388,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t  }\n       }\n \n-  if (toc_ref != NULL)\n-    free (toc_ref);\n+  free (toc_ref);\n   htab->do_tls_opt = 1;\n   return TRUE;\n }\n@@ -8835,18 +8828,14 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n       if (used == NULL)\n \t{\n \terror_ret:\n-\t  if (local_syms != NULL\n-\t      && symtab_hdr->contents != (unsigned char *) local_syms)\n+\t  if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t    free (local_syms);\n \t  if (sec != NULL\n-\t      && relstart != NULL\n \t      && elf_section_data (sec)->relocs != relstart)\n \t    free (relstart);\n-\t  if (toc_relocs != NULL\n-\t      && elf_section_data (toc)->relocs != toc_relocs)\n+\t  if (elf_section_data (toc)->relocs != toc_relocs)\n \t    free (toc_relocs);\n-\t  if (skip != NULL)\n-\t    free (skip);\n+\t  free (skip);\n \t  return FALSE;\n \t}\n \n@@ -9213,8 +9202,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t      rel_hdr->sh_size = toc->reloc_count * sz;\n \t    }\n \t}\n-      else if (toc_relocs != NULL\n-\t       && elf_section_data (toc)->relocs != toc_relocs)\n+      else if (elf_section_data (toc)->relocs != toc_relocs)\n \tfree (toc_relocs);\n \n       if (local_syms != NULL\n@@ -9265,11 +9253,9 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t  if (relstart == NULL)\n \t    {\n \t    got_error_ret:\n-\t      if (local_syms != NULL\n-\t\t  && symtab_hdr->contents != (unsigned char *) local_syms)\n+\t      if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\tfree (local_syms);\n \t      if (sec != NULL\n-\t\t  && relstart != NULL\n \t\t  && elf_section_data (sec)->relocs != relstart)\n \t\tfree (relstart);\n \t      return FALSE;\n@@ -12792,9 +12778,8 @@ toc_adjusting_stub_needed (struct bfd_link_info *info, asection *isec)\n \t    }\n \t}\n \n-      if (local_syms != NULL\n-\t  && (elf_symtab_hdr (isec->owner).contents\n-\t      != (unsigned char *) local_syms))\n+      if (elf_symtab_hdr (isec->owner).contents\n+\t  != (unsigned char *) local_syms)\n \tfree (local_syms);\n       if (elf_section_data (isec)->relocs != relstart)\n \tfree (relstart);\n@@ -13547,9 +13532,8 @@ ppc64_elf_size_stubs (struct bfd_link_info *info)\n \t\t      if (elf_section_data (section)->relocs == NULL)\n \t\t\tfree (internal_relocs);\n \t\t    error_ret_free_local:\n-\t\t      if (local_syms != NULL\n-\t\t\t  && (symtab_hdr->contents\n-\t\t\t      != (unsigned char *) local_syms))\n+\t\t      if (symtab_hdr->contents\n+\t\t\t  != (unsigned char *) local_syms)\n \t\t\tfree (local_syms);\n \t\t      return FALSE;\n \t\t    }\n@@ -14120,8 +14104,7 @@ write_plt_relocs_for_local_syms (struct bfd_link_info *info)\n \t      if (!get_sym_h (NULL, &sym, &sym_sec, NULL, &local_syms,\n \t\t\t      lplt - local_plt, ibfd))\n \t\t{\n-\t\t  if (local_syms != NULL\n-\t\t      && symtab_hdr->contents != (unsigned char *) local_syms)\n+\t\t  if (symtab_hdr->contents != (unsigned char *) local_syms)\n \t\t    free (local_syms);\n \t\t  return FALSE;\n \t\t}\n@@ -17199,8 +17182,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t reloc_name, sym_name, (int) r);\n \t      ret = FALSE;\n \t    }\n-\t  if (more_info != NULL)\n-\t    free (more_info);\n+\t  free (more_info);\n \t}\n     copy_reloc:\n       if (wrel != rel)"
    },
    {
      "sha": "8d352252b63aba8278f8764f5e4d746e1edf5b5e",
      "filename": "bfd/elf64-sparc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elf64-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-sparc.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -161,14 +161,11 @@ elf64_sparc_slurp_one_reloc_table (bfd *abfd, asection *asect,\n \n   canon_reloc_count (asect) += relent - relents;\n \n-  if (allocated != NULL)\n-    free (allocated);\n-\n+  free (allocated);\n   return TRUE;\n \n  error_return:\n-  if (allocated != NULL)\n-    free (allocated);\n+  free (allocated);\n   return FALSE;\n }\n "
    },
    {
      "sha": "2e2c5343f2ce5f1727dc64161f710e47d7296dae",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1144,8 +1144,7 @@ elf_checksum_contents (bfd *abfd,\n       if (contents != NULL)\n \t{\n \t  (*process) (contents, i_shdr.sh_size, arg);\n-\t  if (free_contents != NULL)\n-\t    free (free_contents);\n+\t  free (free_contents);\n \t}\n     }\n \n@@ -1402,16 +1401,14 @@ elf_slurp_symbol_table (bfd *abfd, asymbol **symptrs, bfd_boolean dynamic)\n       *symptrs = 0;\t\t/* Final null pointer */\n     }\n \n-  if (xverbuf != NULL)\n-    free (xverbuf);\n-  if (isymbuf != NULL && hdr->contents != (unsigned char *) isymbuf)\n+  free (xverbuf);\n+  if (hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   return symcount;\n \n  error_return:\n-  if (xverbuf != NULL)\n-    free (xverbuf);\n-  if (isymbuf != NULL && hdr->contents != (unsigned char *) isymbuf)\n+  free (xverbuf);\n+  if (hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   return -1;\n }\n@@ -1509,13 +1506,11 @@ elf_slurp_reloc_table_from_section (bfd *abfd,\n \tgoto error_return;\n     }\n \n-  if (allocated != NULL)\n-    free (allocated);\n+  free (allocated);\n   return TRUE;\n \n  error_return:\n-  if (allocated != NULL)\n-    free (allocated);\n+  free (allocated);\n   return FALSE;\n }\n "
    },
    {
      "sha": "c157aea90dc527e3625a831c8d85ba505a2e34de",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 34,
      "deletions": 73,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2643,17 +2643,15 @@ _bfd_elf_link_read_relocs (bfd *abfd,\n   if (keep_memory)\n     esdo->relocs = internal_relocs;\n \n-  if (alloc1 != NULL)\n-    free (alloc1);\n+  free (alloc1);\n \n   /* Don't free alloc2, since if it was allocated we are passing it\n      back (under the name of internal_relocs).  */\n \n   return internal_relocs;\n \n  error_return:\n-  if (alloc1 != NULL)\n-    free (alloc1);\n+  free (alloc1);\n   if (alloc2 != NULL)\n     {\n       if (keep_memory)\n@@ -5299,17 +5297,10 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t}\n     }\n \n-  if (extversym != NULL)\n-    {\n-      free (extversym);\n-      extversym = NULL;\n-    }\n-\n-  if (isymbuf != NULL)\n-    {\n-      free (isymbuf);\n-      isymbuf = NULL;\n-    }\n+  free (extversym);\n+  extversym = NULL;\n+  free (isymbuf);\n+  isymbuf = NULL;\n \n   if ((elf_dyn_lib_class (abfd) & DYN_AS_NEEDED) != 0)\n     {\n@@ -5389,8 +5380,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n       free (old_tab);\n       objalloc_free_block ((struct objalloc *) htab->root.table.memory,\n \t\t\t   alloc_mark);\n-      if (nondeflt_vers != NULL)\n-\tfree (nondeflt_vers);\n+      free (nondeflt_vers);\n       return TRUE;\n     }\n \n@@ -5673,17 +5663,12 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n   return TRUE;\n \n  error_free_vers:\n-  if (old_tab != NULL)\n-    free (old_tab);\n-  if (old_strtab != NULL)\n-    free (old_strtab);\n-  if (nondeflt_vers != NULL)\n-    free (nondeflt_vers);\n-  if (extversym != NULL)\n-    free (extversym);\n+  free (old_tab);\n+  free (old_strtab);\n+  free (nondeflt_vers);\n+  free (extversym);\n  error_free_sym:\n-  if (isymbuf != NULL)\n-    free (isymbuf);\n+  free (isymbuf);\n  error_return:\n   return FALSE;\n }\n@@ -5891,12 +5876,10 @@ elf_link_add_archive_symbols (bfd *abfd, struct bfd_link_info *info)\n   while (loop);\n \n   free (included);\n-\n   return TRUE;\n \n  error_return:\n-  if (included != NULL)\n-    free (included);\n+  free (included);\n   return FALSE;\n }\n \n@@ -5967,9 +5950,7 @@ elf_collect_hash_codes (struct elf_link_hash_entry *h, void *data)\n      later.  */\n   h->u.elf_hash_value = ha;\n \n-  if (alc != NULL)\n-    free (alc);\n-\n+  free (alc);\n   return TRUE;\n }\n \n@@ -6043,9 +6024,7 @@ elf_collect_gnu_hash_codes (struct elf_link_hash_entry *h, void *data)\n   if (s->min_dynindx < 0 || s->min_dynindx > h->dynindx)\n     s->min_dynindx = h->dynindx;\n \n-  if (alc != NULL)\n-    free (alc);\n-\n+  free (alc);\n   return TRUE;\n }\n \n@@ -7973,8 +7952,7 @@ bfd_elf_get_bfd_needed_list (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (dynbuf != NULL)\n-    free (dynbuf);\n+  free (dynbuf);\n   return FALSE;\n }\n \n@@ -8313,14 +8291,10 @@ bfd_elf_match_symbols_in_sections (asection *sec1, asection *sec2,\n   result = TRUE;\n \n  done:\n-  if (symtable1)\n-    free (symtable1);\n-  if (symtable2)\n-    free (symtable2);\n-  if (isymbuf1)\n-    free (isymbuf1);\n-  if (isymbuf2)\n-    free (isymbuf2);\n+  free (symtable1);\n+  free (symtable2);\n+  free (isymbuf1);\n+  free (isymbuf2);\n \n   return result;\n }\n@@ -11875,32 +11849,21 @@ elf_final_link_free (bfd *obfd, struct elf_final_link_info *flinfo)\n \n   if (flinfo->symstrtab != NULL)\n     _bfd_elf_strtab_free (flinfo->symstrtab);\n-  if (flinfo->contents != NULL)\n-    free (flinfo->contents);\n-  if (flinfo->external_relocs != NULL)\n-    free (flinfo->external_relocs);\n-  if (flinfo->internal_relocs != NULL)\n-    free (flinfo->internal_relocs);\n-  if (flinfo->external_syms != NULL)\n-    free (flinfo->external_syms);\n-  if (flinfo->locsym_shndx != NULL)\n-    free (flinfo->locsym_shndx);\n-  if (flinfo->internal_syms != NULL)\n-    free (flinfo->internal_syms);\n-  if (flinfo->indices != NULL)\n-    free (flinfo->indices);\n-  if (flinfo->sections != NULL)\n-    free (flinfo->sections);\n-  if (flinfo->symshndxbuf != NULL\n-      && flinfo->symshndxbuf != (Elf_External_Sym_Shndx *) -1)\n+  free (flinfo->contents);\n+  free (flinfo->external_relocs);\n+  free (flinfo->internal_relocs);\n+  free (flinfo->external_syms);\n+  free (flinfo->locsym_shndx);\n+  free (flinfo->internal_syms);\n+  free (flinfo->indices);\n+  free (flinfo->sections);\n+  if (flinfo->symshndxbuf != (Elf_External_Sym_Shndx *) -1)\n     free (flinfo->symshndxbuf);\n   for (o = obfd->sections; o != NULL; o = o->next)\n     {\n       struct bfd_elf_section_data *esdo = elf_section_data (o);\n-      if ((o->flags & SEC_RELOC) != 0 && esdo->rel.hashes != NULL)\n-\tfree (esdo->rel.hashes);\n-      if ((o->flags & SEC_RELOC) != 0 && esdo->rela.hashes != NULL)\n-\tfree (esdo->rela.hashes);\n+      free (esdo->rel.hashes);\n+      free (esdo->rela.hashes);\n     }\n }\n \n@@ -12488,8 +12451,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   if (!info->reduce_memory_overheads)\n     {\n       for (sub = info->input_bfds; sub != NULL; sub = sub->link.next)\n-\tif (bfd_get_flavour (sub) == bfd_target_elf_flavour\n-\t    && elf_tdata (sub)->symbuf)\n+\tif (bfd_get_flavour (sub) == bfd_target_elf_flavour)\n \t  {\n \t    free (elf_tdata (sub)->symbuf);\n \t    elf_tdata (sub)->symbuf = NULL;\n@@ -13097,8 +13059,7 @@ fini_reloc_cookie (struct elf_reloc_cookie *cookie, bfd *abfd)\n   Elf_Internal_Shdr *symtab_hdr;\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n-  if (cookie->locsyms != NULL\n-      && symtab_hdr->contents != (unsigned char *) cookie->locsyms)\n+  if (symtab_hdr->contents != (unsigned char *) cookie->locsyms)\n     free (cookie->locsyms);\n }\n \n@@ -13135,7 +13096,7 @@ static void\n fini_reloc_cookie_rels (struct elf_reloc_cookie *cookie,\n \t\t\tasection *sec)\n {\n-  if (cookie->rels && elf_section_data (sec)->relocs != cookie->rels)\n+  if (elf_section_data (sec)->relocs != cookie->rels)\n     free (cookie->rels);\n }\n "
    },
    {
      "sha": "d179bc45686b708d4a6420ac8a0ad8455a2c01ad",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 14,
      "deletions": 23,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -873,13 +873,11 @@ elfNN_ia64_relax_section (bfd *abfd, asection *sec,\n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL && (unsigned char *) isymbuf != symtab_hdr->contents)\n+  if ((unsigned char *) isymbuf != symtab_hdr->contents)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n   return FALSE;\n }\n@@ -1310,8 +1308,7 @@ elfNN_ia64_hash_copy_indirect (struct bfd_link_info *info,\n       struct elfNN_ia64_dyn_sym_info *dyn_i;\n       unsigned int count;\n \n-      if (dir->info)\n-\tfree (dir->info);\n+      free (dir->info);\n \n       dir->info = ind->info;\n       dir->count = ind->count;\n@@ -1399,14 +1396,11 @@ elfNN_ia64_global_dyn_info_free (void **xentry,\n   struct elfNN_ia64_link_hash_entry *entry\n     = (struct elfNN_ia64_link_hash_entry *) xentry;\n \n-  if (entry->info)\n-    {\n-      free (entry->info);\n-      entry->info = NULL;\n-      entry->count = 0;\n-      entry->sorted_count = 0;\n-      entry->size = 0;\n-    }\n+  free (entry->info);\n+  entry->info = NULL;\n+  entry->count = 0;\n+  entry->sorted_count = 0;\n+  entry->size = 0;\n \n   return TRUE;\n }\n@@ -1420,14 +1414,11 @@ elfNN_ia64_local_dyn_info_free (void **slot,\n   struct elfNN_ia64_local_hash_entry *entry\n     = (struct elfNN_ia64_local_hash_entry *) *slot;\n \n-  if (entry->info)\n-    {\n-      free (entry->info);\n-      entry->info = NULL;\n-      entry->count = 0;\n-      entry->sorted_count = 0;\n-      entry->size = 0;\n-    }\n+  free (entry->info);\n+  entry->info = NULL;\n+  entry->count = 0;\n+  entry->sorted_count = 0;\n+  entry->size = 0;\n \n   return TRUE;\n }"
    },
    {
      "sha": "5fa6e35d06125a4ab3303f47c55a625f96718204",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2393,9 +2393,8 @@ riscv_elf_relocate_section (bfd *output_bfd,\n       if (msg && r != bfd_reloc_dangerous)\n \tinfo->callbacks->einfo (msg);\n \n-      /* Free the unused `msg_buf` if needed.  */\n-      if (msg_buf)\n-\tfree (msg_buf);\n+      /* Free the unused `msg_buf`.  */\n+      free (msg_buf);\n \n       /* We already reported the error via a callback, so don't try to report\n \t it again by returning false.  That leads to spurious errors.  */"
    },
    {
      "sha": "e563d56dbbedf96d38f0f388bef8a5b894c804d1",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 28,
      "deletions": 57,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1450,30 +1450,18 @@ _bfd_mips_elf_read_ecoff_info (bfd *abfd, asection *section,\n   return TRUE;\n \n  error_return:\n-  if (ext_hdr != NULL)\n-    free (ext_hdr);\n-  if (debug->line != NULL)\n-    free (debug->line);\n-  if (debug->external_dnr != NULL)\n-    free (debug->external_dnr);\n-  if (debug->external_pdr != NULL)\n-    free (debug->external_pdr);\n-  if (debug->external_sym != NULL)\n-    free (debug->external_sym);\n-  if (debug->external_opt != NULL)\n-    free (debug->external_opt);\n-  if (debug->external_aux != NULL)\n-    free (debug->external_aux);\n-  if (debug->ss != NULL)\n-    free (debug->ss);\n-  if (debug->ssext != NULL)\n-    free (debug->ssext);\n-  if (debug->external_fdr != NULL)\n-    free (debug->external_fdr);\n-  if (debug->external_rfd != NULL)\n-    free (debug->external_rfd);\n-  if (debug->external_ext != NULL)\n-    free (debug->external_ext);\n+  free (ext_hdr);\n+  free (debug->line);\n+  free (debug->external_dnr);\n+  free (debug->external_pdr);\n+  free (debug->external_sym);\n+  free (debug->external_opt);\n+  free (debug->external_aux);\n+  free (debug->ss);\n+  free (debug->ssext);\n+  free (debug->external_fdr);\n+  free (debug->external_rfd);\n+  free (debug->external_ext);\n   return FALSE;\n }\n \f\n@@ -1618,30 +1606,19 @@ mips_elf_create_procedure_table (void *handle, bfd *abfd,\n      matters, but someday it might).  */\n   s->map_head.link_order = NULL;\n \n-  if (epdr != NULL)\n-    free (epdr);\n-  if (rpdr != NULL)\n-    free (rpdr);\n-  if (esym != NULL)\n-    free (esym);\n-  if (ss != NULL)\n-    free (ss);\n-  if (sv != NULL)\n-    free (sv);\n-\n+  free (epdr);\n+  free (rpdr);\n+  free (esym);\n+  free (ss);\n+  free (sv);\n   return TRUE;\n \n  error_return:\n-  if (epdr != NULL)\n-    free (epdr);\n-  if (rpdr != NULL)\n-    free (rpdr);\n-  if (esym != NULL)\n-    free (esym);\n-  if (ss != NULL)\n-    free (ss);\n-  if (sv != NULL)\n-    free (sv);\n+  free (epdr);\n+  free (rpdr);\n+  free (esym);\n+  free (ss);\n+  free (sv);\n   return FALSE;\n }\n \f\n@@ -13391,13 +13368,11 @@ _bfd_elf_mips_get_relocated_section_contents\n \t    }\n \t}\n     }\n-  if (reloc_vector != NULL)\n-    free (reloc_vector);\n+  free (reloc_vector);\n   return data;\n \n  error_return:\n-  if (reloc_vector != NULL)\n-    free (reloc_vector);\n+  free (reloc_vector);\n   return NULL;\n }\n \f\n@@ -14274,21 +14249,17 @@ _bfd_mips_elf_relax_section (bfd *abfd, asection *sec,\n \t}\n     }\n \n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return TRUE;\n \n  error_return:\n-  if (isymbuf != NULL\n-      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+  if (symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n-  if (contents != NULL\n-      && elf_section_data (sec)->this_hdr.contents != contents)\n+  if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n-  if (internal_relocs != NULL\n-      && elf_section_data (sec)->relocs != internal_relocs)\n+  if (elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n \n   return FALSE;"
    },
    {
      "sha": "9679dca981e77923e7ad2c0bccd5bdb827cba6e5",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2451,8 +2451,7 @@ _bfd_x86_elf_get_synthetic_symtab (bfd *abfd,\n     count = n;\n \n   for (j = 0; plts[j].name != NULL; j++)\n-    if (plts[j].contents != NULL)\n-      free (plts[j].contents);\n+    free (plts[j].contents);\n \n   free (dynrelbuf);\n "
    },
    {
      "sha": "e9212bc6f2498c0277e69d6500ccfcdfb54c964b",
      "filename": "bfd/format.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/format.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -500,8 +500,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n       if (abfd->direction == both_direction)\n \tabfd->output_has_begun = TRUE;\n \n-      if (matching_vector)\n-\tfree (matching_vector);\n+      free (matching_vector);\n       if (preserve_match.marker != NULL)\n \tbfd_preserve_finish (abfd, &preserve_match);\n       bfd_preserve_finish (abfd, &preserve);\n@@ -519,8 +518,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \tcleanup (abfd);\n       abfd->xvec = save_targ;\n       abfd->format = bfd_unknown;\n-      if (matching_vector)\n-\tfree (matching_vector);\n+      free (matching_vector);\n       if (preserve_match.marker != NULL)\n \tbfd_preserve_finish (abfd, &preserve_match);\n       bfd_preserve_restore (abfd, &preserve);\n@@ -544,7 +542,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \t  *(const char **) &matching_vector[match_count] = name;\n \t}\n     }\n-  else if (matching_vector)\n+  else\n     free (matching_vector);\n   if (cleanup)\n     cleanup (abfd);"
    },
    {
      "sha": "4055d47e3d9efdcd1b0c594f91b7e0ced090277b",
      "filename": "bfd/ihex.c",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ihex.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/ihex.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ihex.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -381,8 +381,7 @@ ihex_scan (bfd *abfd)\n \t      /* An end record.  */\n \t      if (abfd->start_address == 0)\n \t\tabfd->start_address = addr;\n-\t      if (buf != NULL)\n-\t\tfree (buf);\n+\t      free (buf);\n \t      return TRUE;\n \n \t    case 2:\n@@ -474,14 +473,11 @@ ihex_scan (bfd *abfd)\n   if (error)\n     goto error_return;\n \n-  if (buf != NULL)\n-    free (buf);\n-\n+  free (buf);\n   return TRUE;\n \n  error_return:\n-  if (buf != NULL)\n-    free (buf);\n+  free (buf);\n   return FALSE;\n }\n \n@@ -603,8 +599,7 @@ ihex_read_section (bfd *abfd, asection *section, bfd_byte *contents)\n       if ((bfd_size_type) (p - contents) >= section->size)\n \t{\n \t  /* We've read everything in the section.  */\n-\t  if (buf != NULL)\n-\t    free (buf);\n+\t  free (buf);\n \t  return TRUE;\n \t}\n \n@@ -621,14 +616,11 @@ ihex_read_section (bfd *abfd, asection *section, bfd_byte *contents)\n       goto error_return;\n     }\n \n-  if (buf != NULL)\n-    free (buf);\n-\n+  free (buf);\n   return TRUE;\n \n  error_return:\n-  if (buf != NULL)\n-    free (buf);\n+  free (buf);\n   return FALSE;\n }\n "
    },
    {
      "sha": "efe10d22e8903ff257eb02b081bb2f4c927bc7ad",
      "filename": "bfd/libbfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/libbfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/libbfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -312,7 +312,7 @@ bfd_realloc_or_free (void *ptr, bfd_size_type size)\n {\n   void *ret = bfd_realloc (ptr, size);\n \n-  if (ret == NULL && ptr != NULL)\n+  if (ret == NULL)\n     free (ptr);\n \n   return ret;"
    },
    {
      "sha": "d4057461a3f4a358f138f3d1b74694160e3c553a",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2661,13 +2661,11 @@ default_indirect_link_order (bfd *output_bfd,\n \t\t\t\t  new_contents, loc, input_section->size))\n     goto error_return;\n \n-  if (contents != NULL)\n-    free (contents);\n+  free (contents);\n   return TRUE;\n \n  error_return:\n-  if (contents != NULL)\n-    free (contents);\n+  free (contents);\n   return FALSE;\n }\n \n@@ -2894,10 +2892,8 @@ _bfd_handle_already_linked (asection *sec,\n \t      (_(\"%pB: duplicate section `%pA' has different contents\\n\"),\n \t       sec->owner, sec);\n \n-\t  if (sec_contents)\n-\t    free (sec_contents);\n-\t  if (l_sec_contents)\n-\t    free (l_sec_contents);\n+\t  free (sec_contents);\n+\t  free (l_sec_contents);\n \t}\n       break;\n     }"
    },
    {
      "sha": "5209736a50540b2edc67435ff4bebf3cf2063ae7",
      "filename": "bfd/mmo.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/mmo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/mmo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mmo.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2083,8 +2083,7 @@ mmo_scan (bfd *abfd)\n \n   /* Free whatever resources we took.  */\n   for (i = 0; i < sizeof (file_names) / sizeof (file_names[0]); i++)\n-    if (file_names[i])\n-      free (file_names[i]);\n+    free (file_names[i]);\n   return ! error;\n }\n "
    },
    {
      "sha": "794cf99e7cefac87f9d04e93ef7ef443741da457",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1162,8 +1162,7 @@ bfd_get_debug_link_info_1 (bfd *abfd, void *crc32_out)\n \n   if (!bfd_malloc_and_get_section (abfd, sect, &contents))\n     {\n-      if (contents != NULL)\n-\tfree (contents);\n+      free (contents);\n       return NULL;\n     }\n \n@@ -1252,8 +1251,7 @@ bfd_get_alt_debug_link_info (bfd * abfd, bfd_size_type *buildid_len,\n \n   if (!bfd_malloc_and_get_section (abfd, sect, & contents))\n     {\n-      if (contents != NULL)\n-\tfree (contents);\n+      free (contents);\n       return NULL;\n     }\n \n@@ -1821,8 +1819,7 @@ get_build_id (bfd *abfd)\n \n   if (!bfd_malloc_and_get_section (abfd, sect, & contents))\n     {\n-      if (contents != NULL)\n-\tfree (contents);\n+      free (contents);\n       return NULL;\n     }\n "
    },
    {
      "sha": "adcf34da1deca84e19a3c454812f5231b733a844",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 14,
      "deletions": 31,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2347,8 +2347,7 @@ NAME (aout, find_nearest_line) (bfd *abfd,\n   else\n     funclen = strlen (bfd_asymbol_name (func));\n \n-  if (adata (abfd).line_buf != NULL)\n-    free (adata (abfd).line_buf);\n+  free (adata (abfd).line_buf);\n   if (filelen + funclen == 0)\n     adata (abfd).line_buf = buf = NULL;\n   else\n@@ -2415,7 +2414,7 @@ NAME (aout, bfd_free_cached_info) (bfd *abfd)\n   if (bfd_get_format (abfd) != bfd_object)\n     return TRUE;\n \n-#define BFCI_FREE(x) if (x != NULL) { free (x); x = NULL; }\n+#define BFCI_FREE(x) do { free (x); x = NULL; } while (0)\n   BFCI_FREE (obj_aout_symbols (abfd));\n \n #ifdef USE_MMAP\n@@ -3914,26 +3913,14 @@ NAME (aout, final_link) (bfd *abfd,\n \t}\n     }\n \n-  if (aout_info.contents != NULL)\n-    {\n-      free (aout_info.contents);\n-      aout_info.contents = NULL;\n-    }\n-  if (aout_info.relocs != NULL)\n-    {\n-      free (aout_info.relocs);\n-      aout_info.relocs = NULL;\n-    }\n-  if (aout_info.symbol_map != NULL)\n-    {\n-      free (aout_info.symbol_map);\n-      aout_info.symbol_map = NULL;\n-    }\n-  if (aout_info.output_syms != NULL)\n-    {\n-      free (aout_info.output_syms);\n-      aout_info.output_syms = NULL;\n-    }\n+  free (aout_info.contents);\n+  aout_info.contents = NULL;\n+  free (aout_info.relocs);\n+  aout_info.relocs = NULL;\n+  free (aout_info.symbol_map);\n+  aout_info.symbol_map = NULL;\n+  free (aout_info.output_syms);\n+  aout_info.output_syms = NULL;\n   if (includes_hash_initialized)\n     {\n       bfd_hash_table_free (&aout_info.includes.root);\n@@ -3993,14 +3980,10 @@ NAME (aout, final_link) (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (aout_info.contents != NULL)\n-    free (aout_info.contents);\n-  if (aout_info.relocs != NULL)\n-    free (aout_info.relocs);\n-  if (aout_info.symbol_map != NULL)\n-    free (aout_info.symbol_map);\n-  if (aout_info.output_syms != NULL)\n-    free (aout_info.output_syms);\n+  free (aout_info.contents);\n+  free (aout_info.relocs);\n+  free (aout_info.symbol_map);\n+  free (aout_info.output_syms);\n   if (includes_hash_initialized)\n     bfd_hash_table_free (&aout_info.includes.root);\n   return FALSE;"
    },
    {
      "sha": "c33c495a0f6a4e4ac741d0b77d7a50a7e1c721a1",
      "filename": "bfd/peXXigen.c",
      "status": "modified",
      "additions": 10,
      "deletions": 20,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/peXXigen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/peXXigen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peXXigen.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1343,17 +1343,15 @@ pe_print_idata (bfd * abfd, void * vfile)\n \n       if (!bfd_malloc_and_get_section (abfd, rel_section, &data))\n \t{\n-\t  if (data != NULL)\n-\t    free (data);\n+\t  free (data);\n \t  return FALSE;\n \t}\n \n       offset = abfd->start_address - rel_section->vma;\n \n       if (offset >= rel_section->size || offset + 8 > rel_section->size)\n \t{\n-\t  if (data != NULL)\n-\t    free (data);\n+\t  free (data);\n \t  return FALSE;\n \t}\n \n@@ -1368,8 +1366,7 @@ pe_print_idata (bfd * abfd, void * vfile)\n \t       /* xgettext:c-format */\n \t       _(\"\\tcode-base %08lx toc (loadable/actual) %08lx/%08lx\\n\"),\n \t       start_address, loadable_toc_address, toc_address);\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n     }\n   else\n     {\n@@ -1389,8 +1386,7 @@ pe_print_idata (bfd * abfd, void * vfile)\n   /* Read the whole section.  Some of the fields might be before dataoff.  */\n   if (!bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n \n@@ -1935,8 +1931,7 @@ pe_print_pdata (bfd * abfd, void * vfile)\n \n   if (! bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n \n@@ -2119,8 +2114,7 @@ _bfd_XX_print_ce_compressed_pdata (bfd * abfd, void * vfile)\n \n   if (! bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n \n@@ -2235,8 +2229,7 @@ pe_print_reloc (bfd * abfd, void * vfile)\n \n   if (! bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n \n@@ -2543,8 +2536,7 @@ rsrc_print_section (bfd * abfd, void * vfile)\n \n   if (! bfd_malloc_and_get_section (abfd, section, & data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n \n@@ -2688,8 +2680,7 @@ pe_print_debugdata (bfd * abfd, void * vfile)\n   /* Read the whole section.  */\n   if (!bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n \n@@ -2786,8 +2777,7 @@ pe_is_repro (bfd * abfd)\n \n   if (!bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return FALSE;\n     }\n "
    },
    {
      "sha": "53958f12400ecb2694b8daba8c3cad1b9f8f243e",
      "filename": "bfd/pef.c",
      "status": "modified",
      "additions": 8,
      "deletions": 18,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/pef.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/pef.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pef.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -505,13 +505,11 @@ bfd_pef_scan_start_address (bfd *abfd)\n   abfd->start_address = section->vma + header.main_offset;\n \n  end:\n-  if (loaderbuf != NULL)\n-    free (loaderbuf);\n+  free (loaderbuf);\n   return 0;\n \n  error:\n-  if (loaderbuf != NULL)\n-    free (loaderbuf);\n+  free (loaderbuf);\n   return -1;\n }\n \n@@ -868,18 +866,14 @@ bfd_pef_parse_function_stubs (bfd *abfd,\n   goto end;\n \n  end:\n-  if (libraries != NULL)\n-    free (libraries);\n-  if (imports != NULL)\n-    free (imports);\n+  free (libraries);\n+  free (imports);\n   *nsym = count;\n   return 0;\n \n  error:\n-  if (libraries != NULL)\n-    free (libraries);\n-  if (imports != NULL)\n-    free (imports);\n+  free (libraries);\n+  free (imports);\n   *nsym = count;\n   return -1;\n }\n@@ -941,12 +935,8 @@ bfd_pef_parse_symbols (bfd *abfd, asymbol **csym)\n     csym[count] = NULL;\n \n  end:\n-  if (codebuf != NULL)\n-    free (codebuf);\n-\n-  if (loaderbuf != NULL)\n-    free (loaderbuf);\n-\n+  free (codebuf);\n+  free (loaderbuf);\n   return count;\n }\n "
    },
    {
      "sha": "d851ef8db82c4e70aac8ab5aaa1006a6094f85b1",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1133,8 +1133,7 @@ pe_ILF_build_a_bfd (bfd *\t    abfd,\n   return TRUE;\n \n  error_return:\n-  if (vars.bim->buffer != NULL)\n-    free (vars.bim->buffer);\n+  free (vars.bim->buffer);\n   free (vars.bim);\n   return FALSE;\n }\n@@ -1350,8 +1349,7 @@ pe_bfd_read_buildid (bfd *abfd)\n   /* Read the whole section. */\n   if (!bfd_malloc_and_get_section (abfd, section, &data))\n     {\n-      if (data != NULL)\n-\tfree (data);\n+      free (data);\n       return;\n     }\n "
    },
    {
      "sha": "bbdef23a140d623631614ded8eb88723c28fae3c",
      "filename": "bfd/simple.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/simple.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/simple.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/simple.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -242,8 +242,7 @@ bfd_simple_get_relocated_section_contents (bfd *abfd,\n \t\t\t\t   * saved_offsets.section_count);\n   if (saved_offsets.sections == NULL)\n     {\n-      if (data)\n-\tfree (data);\n+      free (data);\n       _bfd_generic_link_hash_table_free (abfd);\n       abfd->link.next = link_next;\n       return NULL;\n@@ -267,7 +266,7 @@ bfd_simple_get_relocated_section_contents (bfd *abfd,\n \t\t\t\t\t\t outbuf,\n \t\t\t\t\t\t 0,\n \t\t\t\t\t\t symbol_table);\n-  if (contents == NULL && data != NULL)\n+  if (contents == NULL)\n     free (data);\n \n   bfd_map_over_sections (abfd, simple_restore_output_info, &saved_offsets);"
    },
    {
      "sha": "887d9b187ef88b2b9d255f4243d3bf1cb4995325",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 28,
      "deletions": 56,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2369,20 +2369,13 @@ setup_sections (bfd *abfd,\n   for (i = 0; i < total_subspaces; i++)\n     subspace_sections[i]->target_index = i;\n \n-  if (space_strings != NULL)\n-    free (space_strings);\n-\n-  if (subspace_sections != NULL)\n-    free (subspace_sections);\n-\n+  free (space_strings);\n+  free (subspace_sections);\n   return TRUE;\n \n  error_return:\n-  if (space_strings != NULL)\n-    free (space_strings);\n-\n-  if (subspace_sections != NULL)\n-    free (subspace_sections);\n+  free (space_strings);\n+  free (subspace_sections);\n   return FALSE;\n }\n \n@@ -4528,12 +4521,11 @@ som_build_and_write_symbol_table (bfd *abfd)\n   if (bfd_bwrite ((void *) som_symtab, symtab_size, abfd) != symtab_size)\n     goto error_return;\n \n-  if (som_symtab != NULL)\n-    free (som_symtab);\n+  free (som_symtab);\n   return TRUE;\n+\n  error_return:\n-  if (som_symtab != NULL)\n-    free (som_symtab);\n+  free (som_symtab);\n   return FALSE;\n }\n \n@@ -4827,15 +4819,12 @@ som_slurp_symbol_table (bfd *abfd)\n   /* Save our results and return success.  */\n   obj_som_symtab (abfd) = symbase;\n  successful_return:\n-  if (buf != NULL)\n-    free (buf);\n+  free (buf);\n   return (TRUE);\n \n  error_return:\n-  if (symbase != NULL)\n-    free (symbase);\n-  if (buf != NULL)\n-    free (buf);\n+  free (symbase);\n+  free (buf);\n   return FALSE;\n }\n \n@@ -5230,8 +5219,7 @@ som_set_reloc_info (unsigned char *fixup,\n \t\t      if (!bfd_malloc_and_get_section (section->owner, section,\n \t\t\t\t\t\t       &contents))\n \t\t\t{\n-\t\t\t  if (contents != NULL)\n-\t\t\t    free (contents);\n+\t\t\t  free (contents);\n \t\t\t  return (unsigned) -1;\n \t\t\t}\n \t\t      section->contents = contents;\n@@ -5977,13 +5965,11 @@ som_bfd_count_ar_symbols (bfd *abfd,\n \t  (*count)++;\n \t}\n     }\n-  if (hash_table != NULL)\n-    free (hash_table);\n+  free (hash_table);\n   return TRUE;\n \n  error_return:\n-  if (hash_table != NULL)\n-    free (hash_table);\n+  free (hash_table);\n   return FALSE;\n }\n \n@@ -6152,17 +6138,13 @@ som_bfd_fill_in_ar_symbols (bfd *abfd,\n     }\n   /* If we haven't died by now, then we successfully read the entire\n      archive symbol table.  */\n-  if (hash_table != NULL)\n-    free (hash_table);\n-  if (som_dict != NULL)\n-    free (som_dict);\n+  free (hash_table);\n+  free (som_dict);\n   return TRUE;\n \n  error_return:\n-  if (hash_table != NULL)\n-    free (hash_table);\n-  if (som_dict != NULL)\n-    free (som_dict);\n+  free (hash_table);\n+  free (som_dict);\n   return FALSE;\n }\n \n@@ -6611,29 +6593,19 @@ som_bfd_ar_write_symbol_stuff (bfd *abfd,\n   if (bfd_bwrite ((void *) strings, amt, abfd) != amt)\n     goto error_return;\n \n-  if (hash_table != NULL)\n-    free (hash_table);\n-  if (som_dict != NULL)\n-    free (som_dict);\n-  if (last_hash_entry != NULL)\n-    free (last_hash_entry);\n-  if (lst_syms != NULL)\n-    free (lst_syms);\n-  if (strings != NULL)\n-    free (strings);\n+  free (hash_table);\n+  free (som_dict);\n+  free (last_hash_entry);\n+  free (lst_syms);\n+  free (strings);\n   return TRUE;\n \n  error_return:\n-  if (hash_table != NULL)\n-    free (hash_table);\n-  if (som_dict != NULL)\n-    free (som_dict);\n-  if (last_hash_entry != NULL)\n-    free (last_hash_entry);\n-  if (lst_syms != NULL)\n-    free (lst_syms);\n-  if (strings != NULL)\n-    free (strings);\n+  free (hash_table);\n+  free (som_dict);\n+  free (last_hash_entry);\n+  free (lst_syms);\n+  free (strings);\n \n   return FALSE;\n }\n@@ -6785,7 +6757,7 @@ som_bfd_free_cached_info (bfd *abfd)\n     {\n       asection *o;\n \n-#define FREE(x) if (x != NULL) { free (x); x = NULL; }\n+#define FREE(x) do { free (x); x = NULL; } while (0)\n       /* Free the native string and symbol tables.  */\n       FREE (obj_som_symtab (abfd));\n       FREE (obj_som_stringtab (abfd));"
    },
    {
      "sha": "ef7eb43995902693aaf410373e327da178973b6b",
      "filename": "bfd/srec.c",
      "status": "modified",
      "additions": 10,
      "deletions": 23,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/srec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/srec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/srec.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -493,8 +493,7 @@ srec_scan (bfd *abfd)\n \n \t    if (bytes * 2 > bufsize)\n \t      {\n-\t\tif (buf != NULL)\n-\t\t  free (buf);\n+\t\tfree (buf);\n \t\tbuf = (bfd_byte *) bfd_malloc ((bfd_size_type) bytes * 2);\n \t\tif (buf == NULL)\n \t\t  goto error_return;\n@@ -618,9 +617,7 @@ srec_scan (bfd *abfd)\n \t\t    goto error_return;\n \t\t  }\n \n-\t\tif (buf != NULL)\n-\t\t  free (buf);\n-\n+\t\tfree (buf);\n \t\treturn TRUE;\n \t      }\n \t  }\n@@ -631,16 +628,12 @@ srec_scan (bfd *abfd)\n   if (error)\n     goto error_return;\n \n-  if (buf != NULL)\n-    free (buf);\n-\n+  free (buf);\n   return TRUE;\n \n  error_return:\n-  if (symbuf != NULL)\n-    free (symbuf);\n-  if (buf != NULL)\n-    free (buf);\n+  free (symbuf);\n+  free (buf);\n   return FALSE;\n }\n \n@@ -751,8 +744,7 @@ srec_read_section (bfd *abfd, asection *section, bfd_byte *contents)\n \n       if (bytes * 2 > bufsize)\n \t{\n-\t  if (buf != NULL)\n-\t    free (buf);\n+\t  free (buf);\n \t  buf = (bfd_byte *) bfd_malloc ((bfd_size_type) bytes * 2);\n \t  if (buf == NULL)\n \t    goto error_return;\n@@ -768,8 +760,7 @@ srec_read_section (bfd *abfd, asection *section, bfd_byte *contents)\n \t{\n \tdefault:\n \t  BFD_ASSERT (sofar == section->size);\n-\t  if (buf != NULL)\n-\t    free (buf);\n+\t  free (buf);\n \t  return TRUE;\n \n \tcase '3':\n@@ -793,8 +784,7 @@ srec_read_section (bfd *abfd, asection *section, bfd_byte *contents)\n \t    {\n \t      /* We've come to the end of this section.  */\n \t      BFD_ASSERT (sofar == section->size);\n-\t      if (buf != NULL)\n-\t\tfree (buf);\n+\t      free (buf);\n \t      return TRUE;\n \t    }\n \n@@ -817,14 +807,11 @@ srec_read_section (bfd *abfd, asection *section, bfd_byte *contents)\n \n   BFD_ASSERT (sofar == section->size);\n \n-  if (buf != NULL)\n-    free (buf);\n-\n+  free (buf);\n   return TRUE;\n \n  error_return:\n-  if (buf != NULL)\n-    free (buf);\n+  free (buf);\n   return FALSE;\n }\n "
    },
    {
      "sha": "81ef1deb4a6ad589f0b38e4bacef31a7f955af65",
      "filename": "bfd/stabs.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/stabs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/stabs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/stabs.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -494,10 +494,8 @@ _bfd_link_section_stabs (bfd *abfd,\n   return TRUE;\n \n  error_return:\n-  if (stabbuf != NULL)\n-    free (stabbuf);\n-  if (stabstrbuf != NULL)\n-    free (stabstrbuf);\n+  free (stabbuf);\n+  free (stabstrbuf);\n   return FALSE;\n }\n \f\n@@ -648,8 +646,7 @@ _bfd_discard_section_stabs (bfd *abfd,\n   return skip > 0;\n \n  error_return:\n-  if (stabbuf != NULL)\n-    free (stabbuf);\n+  free (stabbuf);\n   return FALSE;\n }\n "
    },
    {
      "sha": "b9f73361e6d314e6dc92a2adce1b9580757f9c27",
      "filename": "bfd/syms.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/syms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/syms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/syms.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -830,8 +830,7 @@ _bfd_generic_read_minisymbols (bfd *abfd,\n \n  error_return:\n   bfd_set_error (bfd_error_no_symbols);\n-  if (syms != NULL)\n-    free (syms);\n+  free (syms);\n   return -1;\n }\n \n@@ -1054,8 +1053,7 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t\t\t\t\t    symbols);\n       if (reloc_count < 0)\n \t{\n-\t  if (reloc_vector != NULL)\n-\t    free (reloc_vector);\n+\t  free (reloc_vector);\n \t  return FALSE;\n \t}\n       if (reloc_count > 0)\n@@ -1086,8 +1084,7 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t\t  _bfd_error_handler\n \t\t    (_(\"unsupported .stab relocation\"));\n \t\t  bfd_set_error (bfd_error_invalid_operation);\n-\t\t  if (reloc_vector != NULL)\n-\t\t    free (reloc_vector);\n+\t\t  free (reloc_vector);\n \t\t  return FALSE;\n \t\t}\n \n@@ -1099,8 +1096,7 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t    }\n \t}\n \n-      if (reloc_vector != NULL)\n-\tfree (reloc_vector);\n+      free (reloc_vector);\n \n       /* First time through this function, build a table matching\n \t function VM addresses to stabs, then sort based on starting"
    },
    {
      "sha": "e5fc71a206ab59ee7cfe4fcad6fb594d3707b634",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -1692,8 +1692,7 @@ bfd_get_target_info (const char *target_name, bfd *abfd,\n \t    _bfd_find_arch_match (tname, arches, def_target_arch);\n \t}\n \n-      if (arches)\n-\tfree (arches);\n+      free (arches);\n     }\n   return target_vec;\n }"
    },
    {
      "sha": "f000bc2a8f1fbf08fd9db209a0d872deb8090dc0",
      "filename": "bfd/vms-lib.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/vms-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/vms-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-lib.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -2045,8 +2045,7 @@ _bfd_vms_lib_build_map (unsigned int nbr_modules,\n \t{\n \t  if (storage > syms_max)\n \t    {\n-\t      if (syms_max > 0)\n-\t\tfree (syms);\n+\t      free (syms);\n \t      syms_max = storage;\n \t      syms = (asymbol **) bfd_malloc (syms_max);\n \t      if (syms == NULL)\n@@ -2097,10 +2096,8 @@ _bfd_vms_lib_build_map (unsigned int nbr_modules,\n   return TRUE;\n \n  error_return:\n-  if (syms_max > 0)\n-    free (syms);\n-  if (map != NULL)\n-    free (map);\n+  free (syms);\n+  free (map);\n   return FALSE;\n }\n "
    },
    {
      "sha": "4497be25291b7c278c76f520f7df9f3fe40cf11b",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 32,
      "deletions": 74,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -227,8 +227,7 @@ xcoff_get_section_contents (bfd *abfd, asection *sec)\n \n       if (! bfd_malloc_and_get_section (abfd, sec, &contents))\n \t{\n-\t  if (contents != NULL)\n-\t    free (contents);\n+\t  free (contents);\n \t  return FALSE;\n \t}\n       coff_section_data (abfd, sec)->contents = contents;\n@@ -2179,7 +2178,6 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n \t  /* If we are not keeping memory, free the reloc information.  */\n \t  if (! info->keep_memory\n \t      && coff_section_data (abfd, o) != NULL\n-\t      && coff_section_data (abfd, o)->relocs != NULL\n \t      && ! coff_section_data (abfd, o)->keep_relocs)\n \t    {\n \t      free (coff_section_data (abfd, o)->relocs);\n@@ -2189,11 +2187,8 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n \n       /* Free up the line numbers.  FIXME: We could cache these\n \t somewhere for the final link, to avoid reading them again.  */\n-      if (reloc_info[o->target_index].linenos != NULL)\n-\t{\n-\t  free (reloc_info[o->target_index].linenos);\n-\t  reloc_info[o->target_index].linenos = NULL;\n-\t}\n+      free (reloc_info[o->target_index].linenos);\n+      reloc_info[o->target_index].linenos = NULL;\n     }\n \n   free (reloc_info);\n@@ -2207,10 +2202,8 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n     {\n       for (o = abfd->sections; o != NULL; o = o->next)\n \t{\n-\t  if (reloc_info[o->target_index].csects != NULL)\n-\t    free (reloc_info[o->target_index].csects);\n-\t  if (reloc_info[o->target_index].linenos != NULL)\n-\t    free (reloc_info[o->target_index].linenos);\n+\t  free (reloc_info[o->target_index].csects);\n+\t  free (reloc_info[o->target_index].linenos);\n \t}\n       free (reloc_info);\n     }\n@@ -2985,7 +2978,6 @@ xcoff_mark (struct bfd_link_info *info, asection *sec)\n \n \t  if (! info->keep_memory\n \t      && coff_section_data (sec->owner, sec) != NULL\n-\t      && coff_section_data (sec->owner, sec)->relocs != NULL\n \t      && ! coff_section_data (sec->owner, sec)->keep_relocs)\n \t    {\n \t      free (coff_section_data (sec->owner, sec)->relocs);\n@@ -3971,10 +3963,8 @@ bfd_xcoff_size_dynamic_sections (bfd *output_bfd,\n   return TRUE;\n \n  error_return:\n-  if (ldinfo.strings != NULL)\n-    free (ldinfo.strings);\n-  if (debug_contents != NULL)\n-    free (debug_contents);\n+  free (ldinfo.strings);\n+  free (debug_contents);\n   return FALSE;\n }\n \n@@ -6207,31 +6197,16 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n     }\n \n   /* Free up the buffers used by xcoff_link_input_bfd.  */\n-  if (flinfo.internal_syms != NULL)\n-    {\n-      free (flinfo.internal_syms);\n-      flinfo.internal_syms = NULL;\n-    }\n-  if (flinfo.sym_indices != NULL)\n-    {\n-      free (flinfo.sym_indices);\n-      flinfo.sym_indices = NULL;\n-    }\n-  if (flinfo.linenos != NULL)\n-    {\n-      free (flinfo.linenos);\n-      flinfo.linenos = NULL;\n-    }\n-  if (flinfo.contents != NULL)\n-    {\n-      free (flinfo.contents);\n-      flinfo.contents = NULL;\n-    }\n-  if (flinfo.external_relocs != NULL)\n-    {\n-      free (flinfo.external_relocs);\n-      flinfo.external_relocs = NULL;\n-    }\n+  free (flinfo.internal_syms);\n+  flinfo.internal_syms = NULL;\n+  free (flinfo.sym_indices);\n+  flinfo.sym_indices = NULL;\n+  free (flinfo.linenos);\n+  flinfo.linenos = NULL;\n+  free (flinfo.contents);\n+  flinfo.contents = NULL;\n+  free (flinfo.external_relocs);\n+  flinfo.external_relocs = NULL;\n \n   /* The value of the last C_FILE symbol is supposed to be -1.  Write\n      it out again.  */\n@@ -6250,11 +6225,8 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n      input files.  */\n   bfd_hash_traverse (&info->hash->table, xcoff_write_global_symbol, &flinfo);\n \n-  if (flinfo.outsyms != NULL)\n-    {\n-      free (flinfo.outsyms);\n-      flinfo.outsyms = NULL;\n-    }\n+  free (flinfo.outsyms);\n+  flinfo.outsyms = NULL;\n \n   /* Now that we have written out all the global symbols, we know the\n      symbol indices to use for relocs against them, and we can finally\n@@ -6336,11 +6308,8 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \tgoto error_return;\n     }\n \n-  if (external_relocs != NULL)\n-    {\n-      free (external_relocs);\n-      external_relocs = NULL;\n-    }\n+  free (external_relocs);\n+  external_relocs = NULL;\n \n   /* Free up the section information.  */\n   if (flinfo.section_info != NULL)\n@@ -6349,10 +6318,8 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \n       for (i = 0; i < abfd->section_count; i++)\n \t{\n-\t  if (flinfo.section_info[i].relocs != NULL)\n-\t    free (flinfo.section_info[i].relocs);\n-\t  if (flinfo.section_info[i].rel_hashes != NULL)\n-\t    free (flinfo.section_info[i].rel_hashes);\n+\t  free (flinfo.section_info[i].relocs);\n+\t  free (flinfo.section_info[i].rel_hashes);\n \t}\n       free (flinfo.section_info);\n       flinfo.section_info = NULL;\n@@ -6437,27 +6404,18 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \n       for (i = 0; i < abfd->section_count; i++)\n \t{\n-\t  if (flinfo.section_info[i].relocs != NULL)\n-\t    free (flinfo.section_info[i].relocs);\n-\t  if (flinfo.section_info[i].rel_hashes != NULL)\n-\t    free (flinfo.section_info[i].rel_hashes);\n+\t  free (flinfo.section_info[i].relocs);\n+\t  free (flinfo.section_info[i].rel_hashes);\n \t}\n       free (flinfo.section_info);\n     }\n \n-  if (flinfo.internal_syms != NULL)\n-    free (flinfo.internal_syms);\n-  if (flinfo.sym_indices != NULL)\n-    free (flinfo.sym_indices);\n-  if (flinfo.outsyms != NULL)\n-    free (flinfo.outsyms);\n-  if (flinfo.linenos != NULL)\n-    free (flinfo.linenos);\n-  if (flinfo.contents != NULL)\n-    free (flinfo.contents);\n-  if (flinfo.external_relocs != NULL)\n-    free (flinfo.external_relocs);\n-  if (external_relocs != NULL)\n-    free (external_relocs);\n+  free (flinfo.internal_syms);\n+  free (flinfo.sym_indices);\n+  free (flinfo.outsyms);\n+  free (flinfo.linenos);\n+  free (flinfo.contents);\n+  free (flinfo.external_relocs);\n+  free (external_relocs);\n   return FALSE;\n }"
    },
    {
      "sha": "bbd9124902437e15e4ff0820b324399078c2f4f8",
      "filename": "bfd/xtensa-isa.c",
      "status": "modified",
      "additions": 13,
      "deletions": 30,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/xtensa-isa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c95949892f6f1e2974a0fb8a5463d7b6432ac469/bfd/xtensa-isa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xtensa-isa.c?ref=c95949892f6f1e2974a0fb8a5463d7b6432ac469",
      "patch": "@@ -340,43 +340,26 @@ xtensa_isa_free (xtensa_isa isa)\n      the memory allocated by xtensa_isa_init and restore the xtensa_isa\n      structure to its initial state.  */\n \n-  if (intisa->opname_lookup_table)\n-    {\n-      free (intisa->opname_lookup_table);\n-      intisa->opname_lookup_table = 0;\n-    }\n+  free (intisa->opname_lookup_table);\n+  intisa->opname_lookup_table = 0;\n \n-  if (intisa->state_lookup_table)\n-    {\n-      free (intisa->state_lookup_table);\n-      intisa->state_lookup_table = 0;\n-    }\n+  free (intisa->state_lookup_table);\n+  intisa->state_lookup_table = 0;\n+\n+  free (intisa->sysreg_lookup_table);\n+  intisa->sysreg_lookup_table = 0;\n \n-  if (intisa->sysreg_lookup_table)\n-    {\n-      free (intisa->sysreg_lookup_table);\n-      intisa->sysreg_lookup_table = 0;\n-    }\n   for (n = 0; n < 2; n++)\n     {\n-      if (intisa->sysreg_table[n])\n-\t{\n-\t  free (intisa->sysreg_table[n]);\n-\t  intisa->sysreg_table[n] = 0;\n-\t}\n+      free (intisa->sysreg_table[n]);\n+      intisa->sysreg_table[n] = 0;\n     }\n \n-  if (intisa->interface_lookup_table)\n-    {\n-      free (intisa->interface_lookup_table);\n-      intisa->interface_lookup_table = 0;\n-    }\n+  free (intisa->interface_lookup_table);\n+  intisa->interface_lookup_table = 0;\n \n-  if (intisa->funcUnit_lookup_table)\n-    {\n-      free (intisa->funcUnit_lookup_table);\n-      intisa->funcUnit_lookup_table = 0;\n-    }\n+  free (intisa->funcUnit_lookup_table);\n+  intisa->funcUnit_lookup_table = 0;\n }\n \n "
    }
  ]
}