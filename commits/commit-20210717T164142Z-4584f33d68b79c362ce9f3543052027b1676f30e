{
  "sha": "4584f33d68b79c362ce9f3543052027b1676f30e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDU4NGYzM2Q2OGI3OWMzNjJjZTlmMzU0MzA1MjAyN2IxNjc2ZjMwZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-04T19:26:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-17T16:41:42Z"
    },
    "message": "Introduce find_source_or_rewrite\n\nThe final bug fix in this series would duplicate the logic in\npsymtab_to_fullname, so this patch extracts the body of this function\ninto a new function.",
    "tree": {
      "sha": "70a1be2b98dff96f47a37bb1df0bcfcbc97ba34b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/70a1be2b98dff96f47a37bb1df0bcfcbc97ba34b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4584f33d68b79c362ce9f3543052027b1676f30e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4584f33d68b79c362ce9f3543052027b1676f30e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4584f33d68b79c362ce9f3543052027b1676f30e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4584f33d68b79c362ce9f3543052027b1676f30e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d030267c9cc0fb594d3dda264b78114afc6eb214",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d030267c9cc0fb594d3dda264b78114afc6eb214",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d030267c9cc0fb594d3dda264b78114afc6eb214"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 37,
    "deletions": 19
  },
  "files": [
    {
      "sha": "4c5b10012ce6a535e52c3074324ac4a43e158feb",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 19,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4584f33d68b79c362ce9f3543052027b1676f30e/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4584f33d68b79c362ce9f3543052027b1676f30e/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=4584f33d68b79c362ce9f3543052027b1676f30e",
      "patch": "@@ -953,26 +953,9 @@ psymtab_to_fullname (struct partial_symtab *ps)\n      to handle cases like the file being moved.  */\n   if (ps->fullname == NULL)\n     {\n-      gdb::unique_xmalloc_ptr<char> fullname;\n-      scoped_fd fd = find_and_open_source (ps->filename, ps->dirname,\n-\t\t\t\t\t   &fullname);\n+      gdb::unique_xmalloc_ptr<char> fullname\n+\t= find_source_or_rewrite (ps->filename, ps->dirname);\n       ps->fullname = fullname.release ();\n-\n-      if (fd.get () < 0)\n-\t{\n-\t  /* rewrite_source_path would be applied by find_and_open_source, we\n-\t     should report the pathname where GDB tried to find the file.  */\n-\n-\t  if (ps->dirname == NULL || IS_ABSOLUTE_PATH (ps->filename))\n-\t    fullname.reset (xstrdup (ps->filename));\n-\t  else\n-\t    fullname.reset (concat (ps->dirname, SLASH_STRING,\n-\t\t\t\t    ps->filename, (char *) NULL));\n-\n-\t  ps->fullname = rewrite_source_path (fullname.get ()).release ();\n-\t  if (ps->fullname == NULL)\n-\t    ps->fullname = fullname.release ();\n-\t}\n     }\n \n   return ps->fullname;"
    },
    {
      "sha": "7d1934bd6c9bb8d1f48bcde3c76e0730c4584dcf",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4584f33d68b79c362ce9f3543052027b1676f30e/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4584f33d68b79c362ce9f3543052027b1676f30e/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=4584f33d68b79c362ce9f3543052027b1676f30e",
      "patch": "@@ -1193,6 +1193,34 @@ open_source_file (struct symtab *s)\n   return fd;\n }\n \n+/* See source.h.  */\n+\n+gdb::unique_xmalloc_ptr<char>\n+find_source_or_rewrite (const char *filename, const char *dirname)\n+{\n+  gdb::unique_xmalloc_ptr<char> fullname;\n+\n+  scoped_fd fd = find_and_open_source (filename, dirname, &fullname);\n+  if (fd.get () < 0)\n+    {\n+      /* rewrite_source_path would be applied by find_and_open_source, we\n+\t should report the pathname where GDB tried to find the file.  */\n+\n+      if (dirname == nullptr || IS_ABSOLUTE_PATH (filename))\n+\tfullname.reset (xstrdup (filename));\n+      else\n+\tfullname.reset (concat (dirname, SLASH_STRING,\n+\t\t\t\tfilename, (char *) nullptr));\n+\n+      gdb::unique_xmalloc_ptr<char> rewritten\n+\t= rewrite_source_path (fullname.get ());\n+      if (rewritten != nullptr)\n+\tfullname = std::move (rewritten);\n+    }\n+\n+  return fullname;\n+}\n+\n /* Finds the fullname that a symtab represents.\n \n    This functions finds the fullname and saves it in s->fullname."
    },
    {
      "sha": "6c383efbbb2a02b1c50bb84fbaa0934be4659b41",
      "filename": "gdb/source.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4584f33d68b79c362ce9f3543052027b1676f30e/gdb/source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4584f33d68b79c362ce9f3543052027b1676f30e/gdb/source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.h?ref=4584f33d68b79c362ce9f3543052027b1676f30e",
      "patch": "@@ -72,6 +72,13 @@ extern scoped_fd find_and_open_source (const char *filename,\n \t\t\t\t       const char *dirname,\n \t\t\t\t       gdb::unique_xmalloc_ptr<char> *fullname);\n \n+/* A wrapper for find_and_open_source that returns the full name.  If\n+   the full name cannot be found, a full name is constructed based on\n+   the parameters, passing them through rewrite_source_path.  */\n+\n+extern gdb::unique_xmalloc_ptr<char> find_source_or_rewrite\n+     (const char *filename, const char *dirname);\n+\n /* Open a source file given a symtab S.  Returns a file descriptor or\n    negative number for error.  */\n extern scoped_fd open_source_file (struct symtab *s);"
    }
  ]
}