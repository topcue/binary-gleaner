{
  "sha": "25a0274483cb00c27945b0337005be4f169ff09f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjVhMDI3NDQ4M2NiMDBjMjc5NDViMDMzNzAwNWJlNGYxNjlmZjA5Zg==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-05-01T13:43:06Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-05-01T13:43:06Z"
    },
    "message": "Change nm so that when it is running in POSIX compatible mode, it does not prefix symbol values with 0.\n\n\tPR 24507\n\t* nm.c: (print_format): New variable.\n\t(value_format_32bit, value_format_64bit): Delete.\n\t(set_print_radix): Remove code to alter value_format strings.\n\t(set_output_format): Record chosen format in print_format.\n\t(get_print_format): New function - constructs a printf formatting\n\tstring according to the requirements of size, radix, and output\n\tformat.\n\t(print_value): Use get_print_format.\n\t* testsuite/binutils-all/nm.exp: Add tests of \"nm --format=posix\"\n\tand \"nm -t d\".",
    "tree": {
      "sha": "fab4316a57abf496815976519035e1b6de638d65",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fab4316a57abf496815976519035e1b6de638d65"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/25a0274483cb00c27945b0337005be4f169ff09f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25a0274483cb00c27945b0337005be4f169ff09f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/25a0274483cb00c27945b0337005be4f169ff09f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25a0274483cb00c27945b0337005be4f169ff09f/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f59f30f55776b10d4f728065e9f9a10cf63a1b29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f59f30f55776b10d4f728065e9f9a10cf63a1b29",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f59f30f55776b10d4f728065e9f9a10cf63a1b29"
    }
  ],
  "stats": {
    "total": 127,
    "additions": 94,
    "deletions": 33
  },
  "files": [
    {
      "sha": "0fb9e164f67d3e03d4ecad1fbc8b6b500300086c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25a0274483cb00c27945b0337005be4f169ff09f/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25a0274483cb00c27945b0337005be4f169ff09f/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=25a0274483cb00c27945b0337005be4f169ff09f",
      "patch": "@@ -1,3 +1,17 @@\n+2019-05-01  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24507\n+\t* nm.c: (print_format): New variable.\n+\t(value_format_32bit, value_format_64bit): Delete.\n+\t(set_print_radix): Remove code to alter value_format strings.\n+\t(set_output_format): Record chosen format in print_format.\n+\t(get_print_format): New function - constructs a printf formatting\n+\tstring according to the requirements of size, radix, and output\n+\tformat.\n+\t(print_value): Use get_print_format.\n+\t* testsuite/binutils-all/nm.exp: Add tests of \"nm --format=posix\"\n+\tand \"nm -t d\".\n+\n 2019-04-30  Alan Modra  <amodra@gmail.com>\n \n \t* wrstabs.c (stab_start_class_type): Add assert to work around"
    },
    {
      "sha": "fd3f73167e085defd041c04e1a3f487ed93c57f0",
      "filename": "binutils/nm.c",
      "status": "modified",
      "additions": 62,
      "deletions": 33,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25a0274483cb00c27945b0337005be4f169ff09f/binutils/nm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25a0274483cb00c27945b0337005be4f169ff09f/binutils/nm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/nm.c?ref=25a0274483cb00c27945b0337005be4f169ff09f",
      "patch": "@@ -141,6 +141,7 @@ static struct output_fns formats[] =\n \n /* The output format to use.  */\n static struct output_fns *format = &formats[FORMAT_DEFAULT];\n+static unsigned int print_format = FORMAT_DEFAULT;\n \n /* Command options.  */\n \n@@ -168,17 +169,6 @@ static int demangle_flags = DMGL_ANSI | DMGL_PARAMS;\n static int filename_per_file = 0;\t/* Once per file, on its own line.  */\n static int filename_per_symbol = 0;\t/* Once per symbol, at start of line.  */\n \n-/* Print formats for printing a symbol value.  */\n-static char value_format_32bit[] = \"%08lx\";\n-#if BFD_HOST_64BIT_LONG\n-static char value_format_64bit[] = \"%016lx\";\n-#elif BFD_HOST_64BIT_LONG_LONG\n-#ifndef __MSVCRT__\n-static char value_format_64bit[] = \"%016llx\";\n-#else\n-static char value_format_64bit[] = \"%016I64x\";\n-#endif\n-#endif\n static int print_width = 0;\n static int print_radix = 16;\n /* Print formats for printing stab info.  */\n@@ -303,29 +293,15 @@ set_print_radix (char *radix)\n {\n   switch (*radix)\n     {\n-    case 'x':\n-      break;\n-    case 'd':\n-    case 'o':\n-      if (*radix == 'd')\n-\tprint_radix = 10;\n-      else\n-\tprint_radix = 8;\n-      value_format_32bit[4] = *radix;\n-#if BFD_HOST_64BIT_LONG\n-      value_format_64bit[5] = *radix;\n-#elif BFD_HOST_64BIT_LONG_LONG\n-#ifndef __MSVCRT__\n-      value_format_64bit[6] = *radix;\n-#else\n-      value_format_64bit[7] = *radix;\n-#endif\n-#endif\n-      other_format[3] = desc_format[3] = *radix;\n-      break;\n+    case 'x': print_radix = 16; break;\n+    case 'd': print_radix = 10; break;\n+    case 'o': print_radix =  8; break;\n+\n     default:\n       fatal (_(\"%s: invalid radix\"), radix);\n     }\n+\n+  other_format[3] = desc_format[3] = *radix;\n }\n \n static void\n@@ -351,6 +327,7 @@ set_output_format (char *f)\n       fatal (_(\"%s: invalid output format\"), f);\n     }\n   format = &formats[i];\n+  print_format = i;\n }\n \f\n static const char *\n@@ -1480,6 +1457,58 @@ print_symbol_filename_posix (bfd *archive_bfd, bfd *abfd)\n     }\n }\n \f\n+/* Construct a formatting string for printing symbol values.  */\n+\n+static const char *\n+get_print_format (void)\n+{\n+  static const char * saved_format = NULL;\n+\n+  /* See if we have already constructed the format.  */\n+  if (saved_format)\n+    return saved_format;\n+\n+  const char * padding;\n+  if (print_format == FORMAT_POSIX)\n+    {\n+      /* POSIX compatible output does not have any padding.  */\n+      padding = \"\";\n+    }\n+  else if (print_width == 32)\n+    {\n+      padding =\"08\";\n+    }\n+  else /* print_width == 64 */\n+    {\n+      padding = \"016\";\n+    }\n+\n+  const char * length = \"l\";\n+  if (print_width == 64)\n+    {\n+#if BFD_HOST_64BIT_LONG\n+      ;\n+#elif BFD_HOST_64BIT_LONG_LONG\n+#ifndef __MSVCRT__\n+      length = \"ll\";\n+#else\n+      length = \"I64\";\n+#endif\n+#endif\n+    }\n+\n+  const char * radix = NULL;\n+  switch (print_radix)\n+    {\n+    case 8:  radix = \"o\"; break;\n+    case 10: radix = \"d\"; break;\n+    case 16: radix = \"x\"; break;\n+    }\n+\n+  saved_format = concat (\"%\", padding, length, radix, NULL);\n+  return saved_format;\n+}\n+\n /* Print a symbol value.  */\n \n static void\n@@ -1488,12 +1517,12 @@ print_value (bfd *abfd ATTRIBUTE_UNUSED, bfd_vma val)\n   switch (print_width)\n     {\n     case 32:\n-      printf (value_format_32bit, (unsigned long) val);\n+      printf (get_print_format (), (unsigned long) val);\n       break;\n \n     case 64:\n #if BFD_HOST_64BIT_LONG || BFD_HOST_64BIT_LONG_LONG\n-      printf (value_format_64bit, val);\n+      printf (get_print_format (), val);\n #else\n       /* We have a 64 bit value to print, but the host is only 32 bit.  */\n       if (print_radix == 16)"
    },
    {
      "sha": "64a969e19116e91ae377b82606f7852e09e5cd1e",
      "filename": "binutils/testsuite/binutils-all/nm.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25a0274483cb00c27945b0337005be4f169ff09f/binutils/testsuite/binutils-all/nm.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25a0274483cb00c27945b0337005be4f169ff09f/binutils/testsuite/binutils-all/nm.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/nm.exp?ref=25a0274483cb00c27945b0337005be4f169ff09f",
      "patch": "@@ -119,6 +119,24 @@ if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o]} then {\n     } else {\n \tfail \"nm -P\"\n     }\n+\n+    # Test nm -t d\n+    # Look for leading zeroes and only the digits 0..9 in the actual value.\n+    set got [binutils_run $NM \"$NMFLAGS -t d $tempfile\"]\n+    if [regexp \"0+\\[1-9\\]\\[0-9\\]* T text_symbol3\" $got] then {\n+\tpass \"nm -t d\"\n+    } else {\n+\tfail \"nm -t d\"\n+    }\n+\n+    # Test nm --format=posix\n+    # ref: PR 24507 - no leading zeros.\n+    set got [binutils_run $NM \"$NMFLAGS --format=posix $tempfile\"]\n+    if [regexp \"text_symbol3 T \\[1-9a-f\\]\\[0-9a-f\\]*\" $got] then {\n+\tpass \"nm --format posix\"\n+    } else {\n+\tfail \"nm --format posix\"\n+    }\n }\n \n # Test nm --size-sort"
    }
  ]
}