{
  "sha": "d369b608a1fc84813762e71a40a6cafb3ab828fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDM2OWI2MDhhMWZjODQ4MTM3NjJlNzFhNDBhNmNhZmIzYWI4MjhmZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-14T16:27:22Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-14T16:27:22Z"
    },
    "message": "gdb: add gdb_argv::as_array_view method\n\nIntroduce the gdb_argv::as_array_view method, as a way to easily pass\nthe parsed arguments array to a function taking an array view.  There is\ncurrently one caller where we can use this (which prompted the\nsuggestion to implement this method).\n\nAdd some selftests for the new method, which at the same time test a\nlittle bit gdb_argv.  As far as I know, it's not tested currently.\n\ngdb/ChangeLog:\n\n\t* utils.h (class gdb_argv) <as_array_view>: New method.\n\t* utils.c (gdb_argv_as_array_view_test): New.\n\t(_initialize_utils): Register selftest.\n\t* maint.c (maintenance_selftest): Use the new method.\n\nChange-Id: I0645037613ed6549aabe60f14a36f3494513b177",
    "tree": {
      "sha": "65ec08506192d4cc54c9f49b11a7243b66863457",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65ec08506192d4cc54c9f49b11a7243b66863457"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d369b608a1fc84813762e71a40a6cafb3ab828fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d369b608a1fc84813762e71a40a6cafb3ab828fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d369b608a1fc84813762e71a40a6cafb3ab828fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d369b608a1fc84813762e71a40a6cafb3ab828fe/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19bddbe95c156a4883213a57d4437b75318b6875",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19bddbe95c156a4883213a57d4437b75318b6875",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19bddbe95c156a4883213a57d4437b75318b6875"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 42,
    "deletions": 1
  },
  "files": [
    {
      "sha": "63d1babeda51bbe70619d5b06a7681d37b08e9ad",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d369b608a1fc84813762e71a40a6cafb3ab828fe",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-14  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* utils.h (class gdb_argv) <as_array_view>: New method.\n+\t* utils.c (gdb_argv_as_array_view_test): New.\n+\t(_initialize_utils): Register selftest.\n+\t* maint.c (maintenance_selftest): Use the new method.\n+\n 2020-08-13  Kamil Rytarowski  <n54@gmx.com>\n \n \t* target.h (supports_dumpcore, dumpcore): New"
    },
    {
      "sha": "3368769ad96f75ce7bb5edddc4598cc3b9c1b4b0",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=d369b608a1fc84813762e71a40a6cafb3ab828fe",
      "patch": "@@ -1042,7 +1042,7 @@ maintenance_selftest (const char *args, int from_tty)\n {\n #if GDB_SELF_TEST\n   gdb_argv argv (args);\n-  selftests::run_tests (gdb::array_view<char *> (argv.get (), argv.count ()));\n+  selftests::run_tests (argv.as_array_view ());\n #else\n   printf_filtered (_(\"\\\n Selftests have been disabled for this build.\\n\"));"
    },
    {
      "sha": "fb1308ac9ae3720b8067a7a21eae32f3e8961404",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=d369b608a1fc84813762e71a40a6cafb3ab828fe",
      "patch": "@@ -2991,6 +2991,31 @@ gdb_realpath_tests ()\n   gdb_realpath_check_trailer (\"\", \"\");\n }\n \n+/* Test the gdb_argv::as_array_view method.  */\n+\n+static void\n+gdb_argv_as_array_view_test ()\n+{\n+  {\n+    gdb_argv argv;\n+\n+    gdb::array_view<char *> view = argv.as_array_view ();\n+\n+    SELF_CHECK (view.data () == nullptr);\n+    SELF_CHECK (view.size () == 0);\n+  }\n+  {\n+    gdb_argv argv (\"une bonne 50\");\n+\n+    gdb::array_view<char *> view = argv.as_array_view ();\n+\n+    SELF_CHECK (view.size () == 3);\n+    SELF_CHECK (strcmp (view[0], \"une\") == 0);\n+    SELF_CHECK (strcmp (view[1], \"bonne\") == 0);\n+    SELF_CHECK (strcmp (view[2], \"50\") == 0);\n+  }\n+}\n+\n #endif /* GDB_SELF_TEST */\n \n /* Allocation function for the libiberty hash table which uses an\n@@ -3489,5 +3514,6 @@ When set, debugging messages will be marked with seconds and microseconds.\"),\n \n #if GDB_SELF_TEST\n   selftests::register_test (\"gdb_realpath\", gdb_realpath_tests);\n+  selftests::register_test (\"gdb_argv_array_view\", gdb_argv_as_array_view_test);\n #endif\n }"
    },
    {
      "sha": "9a235b963272f8e454fcd91ce99949d6d36d8fce",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d369b608a1fc84813762e71a40a6cafb3ab828fe/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=d369b608a1fc84813762e71a40a6cafb3ab828fe",
      "patch": "@@ -22,6 +22,7 @@\n #define UTILS_H\n \n #include \"exceptions.h\"\n+#include \"gdbsupport/array-view.h\"\n #include \"gdbsupport/scoped_restore.h\"\n #include <chrono>\n \n@@ -210,6 +211,13 @@ class gdb_argv\n     return m_argv[arg];\n   }\n \n+  /* Return the arguments array as an array view.  */\n+\n+  gdb::array_view<char *> as_array_view ()\n+  {\n+    return gdb::array_view<char *> (this->get (), this->count ());\n+  }\n+\n   /* The iterator type.  */\n \n   typedef char **iterator;"
    }
  ]
}