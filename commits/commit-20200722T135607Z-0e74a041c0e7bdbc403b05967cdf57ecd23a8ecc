{
  "sha": "0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGU3NGEwNDFjMGU3YmRiYzQwM2IwNTk2N2NkZjU3ZWNkMjNhOGVjYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-22T13:56:07Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-22T13:56:07Z"
    },
    "message": "gdb/jit: split jit_objfile_data in two\n\nThe jit_objfile_data is currently used to hold information about both\nobjfiles that are the result of JIT compilation (JITed) and objfiles\nthat can produce JITed objfiles (JITers).  I think that this double use\nof the type is confusing, and that things would be more obvious if we\nhad one type for each role.\n\nThis patch splits it into:\n\n- jited_objfile_data: for data about an objfile that is the result of a\n  JIT compilation\n- jiter_objfile_data: for data about an objfile which produces JITed\n  objfiles\n\nThere are now two JIT-related fields in an objfile, one for each kind.\nWith this change, the following invariants hold:\n\n- an objfile has a non-null `jiter_data` field iff it defines the required\n  symbols of the JIT interface\n- an objfile has a non-null `jited_data` field iff it is the product of\n  JIT compilation (has been produced by some JITer)\n\ngdb/ChangeLog:\n2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n\n\t* jit.h (struct jit_objfile_data):  Split into...\n\t(struct jiter_objfile_data): ... this ...\n\t(struct jited_objfile_data): ... and this.\n\t* objfiles.h (struct objfile) <jit_data>: Remove.\n\t<jiter_data, jited_data>: New fields.\n\t* jit.c (jit_objfile_data::~jit_objfile_data): Rename to ...\n\t(jiter_objfile_data::~jiter_objfile_data): ... this.\n\t(get_jit_objfile_data): Rename to ...\n\t(get_jiter_objfile_data): ... this.\n\t(add_objfile_entry): Update.\n\t(jit_read_descriptor): Use get_jiter_objfile_data.\n\t(jit_find_objf_with_entry_addr): Use objfile's jited_data field.\n\t(jit_breakpoint_re_set_internal): Use get_jiter_objfile_data.\n\t(jit_inferior_exit_hook): Use objfile's jited_data field.",
    "tree": {
      "sha": "19c0a18598a7d8af6099d264a6d006d6c4ac9a2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19c0a18598a7d8af6099d264a6d006d6c4ac9a2d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/238b5c9f0881b2e27d2eb111ad9c7fe874859acf"
    }
  ],
  "stats": {
    "total": 88,
    "additions": 57,
    "deletions": 31
  },
  "files": [
    {
      "sha": "54b75aa212d45017b8b7b94605870b6c1541246d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
      "patch": "@@ -1,3 +1,20 @@\n+2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.h (struct jit_objfile_data):  Split into...\n+\t(struct jiter_objfile_data): ... this ...\n+\t(struct jited_objfile_data): ... and this.\n+\t* objfiles.h (struct objfile) <jit_data>: Remove.\n+\t<jiter_data, jited_data>: New fields.\n+\t* jit.c (jit_objfile_data::~jit_objfile_data): Rename to ...\n+\t(jiter_objfile_data::~jiter_objfile_data): ... this.\n+\t(get_jit_objfile_data): Rename to ...\n+\t(get_jiter_objfile_data): ... this.\n+\t(add_objfile_entry): Update.\n+\t(jit_read_descriptor): Use get_jiter_objfile_data.\n+\t(jit_find_objf_with_entry_addr): Use objfile's jited_data field.\n+\t(jit_breakpoint_re_set_internal): Use get_jiter_objfile_data.\n+\t(jit_inferior_exit_hook): Use objfile's jited_data field.\n+\n 2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.h: Forward-declare `struct minimal_symbol`."
    },
    {
      "sha": "7c8bfcb51bb155c2f583991ae62a596918a803f0",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
      "patch": "@@ -263,9 +263,9 @@ struct jit_program_space_data\n \n static program_space_key<jit_program_space_data> jit_program_space_key;\n \n-/* Destructor for jit_objfile_data.  */\n+/* Destructor for jiter_objfile_data.  */\n \n-jit_objfile_data::~jit_objfile_data ()\n+jiter_objfile_data::~jiter_objfile_data ()\n {\n   /* Free the data allocated in the jit_program_space_data slot.  */\n   if (this->register_code != NULL)\n@@ -283,16 +283,16 @@ jit_objfile_data::~jit_objfile_data ()\n     }\n }\n \n-/* Fetch the jit_objfile_data associated with OBJF.  If no data exists\n+/* Fetch the jiter_objfile_data associated with OBJF.  If no data exists\n    yet, make a new structure and attach it.  */\n \n-static struct jit_objfile_data *\n-get_jit_objfile_data (struct objfile *objf)\n+static jiter_objfile_data *\n+get_jiter_objfile_data (objfile *objf)\n {\n-  if (objf->jit_data == nullptr)\n-    objf->jit_data.reset (new jit_objfile_data (objf));\n+  if (objf->jiter_data == nullptr)\n+    objf->jiter_data.reset (new jiter_objfile_data (objf));\n \n-  return objf->jit_data.get ();\n+  return objf->jiter_data.get ();\n }\n \n /* Remember OBJFILE has been created for struct jit_code_entry located\n@@ -301,10 +301,9 @@ get_jit_objfile_data (struct objfile *objf)\n static void\n add_objfile_entry (struct objfile *objfile, CORE_ADDR entry)\n {\n-  struct jit_objfile_data *objf_data;\n+  gdb_assert (objfile->jited_data == nullptr);\n \n-  objf_data = get_jit_objfile_data (objfile);\n-  objf_data->addr = entry;\n+  objfile->jited_data.reset (new jited_objfile_data (entry));\n }\n \n /* Return jit_program_space_data for current program space.  Allocate\n@@ -335,10 +334,9 @@ jit_read_descriptor (gdbarch *gdbarch,\n   int desc_size;\n   gdb_byte *desc_buf;\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n-  struct jit_objfile_data *objf_data;\n \n   gdb_assert (jiter != nullptr);\n-  objf_data = get_jit_objfile_data (jiter);\n+  jiter_objfile_data *objf_data = get_jiter_objfile_data (jiter);\n \n   if (objf_data->descriptor == NULL)\n     return false;\n@@ -908,7 +906,7 @@ jit_find_objf_with_entry_addr (CORE_ADDR entry_addr)\n {\n   for (objfile *objf : current_program_space->objfiles ())\n     {\n-      if (objf->jit_data != nullptr && objf->jit_data->addr == entry_addr)\n+      if (objf->jited_data != nullptr && objf->jited_data->addr == entry_addr)\n \treturn objf;\n     }\n \n@@ -948,7 +946,7 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n {\n   struct bound_minimal_symbol reg_symbol;\n   struct bound_minimal_symbol desc_symbol;\n-  struct jit_objfile_data *objf_data;\n+  jiter_objfile_data *objf_data;\n   CORE_ADDR addr;\n \n   if (ps_data->objfile == NULL)\n@@ -966,14 +964,14 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n \t  || BMSYMBOL_VALUE_ADDRESS (desc_symbol) == 0)\n \treturn false;\n \n-      objf_data = get_jit_objfile_data (reg_symbol.objfile);\n+      objf_data = get_jiter_objfile_data (reg_symbol.objfile);\n       objf_data->register_code = reg_symbol.minsym;\n       objf_data->descriptor = desc_symbol.minsym;\n \n       ps_data->objfile = reg_symbol.objfile;\n     }\n   else\n-    objf_data = get_jit_objfile_data (ps_data->objfile);\n+    objf_data = get_jiter_objfile_data (ps_data->objfile);\n \n   addr = MSYMBOL_VALUE_ADDRESS (ps_data->objfile, objf_data->register_code);\n \n@@ -1315,7 +1313,7 @@ jit_inferior_exit_hook (struct inferior *inf)\n {\n   for (objfile *objf : current_program_space->objfiles_safe ())\n     {\n-      if (objf->jit_data != nullptr && objf->jit_data->addr != 0)\n+      if (objf->jited_data != nullptr && objf->jited_data->addr != 0)\n \tobjf->unlink ();\n     }\n }"
    },
    {
      "sha": "fcef78d49916bcdcc910e5b2115629737b1cbff5",
      "filename": "gdb/jit.h",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/jit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/jit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.h?ref=0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
      "patch": "@@ -67,19 +67,16 @@ struct jit_descriptor\n   CORE_ADDR first_entry;\n };\n \n-/* Per-objfile structure recording the addresses in the program space.\n-   This object serves two purposes: for ordinary objfiles, it may\n-   cache some symbols related to the JIT interface; and for\n-   JIT-created objfiles, it holds some information about the\n-   jit_code_entry.  */\n+/* An objfile that defines the required symbols of the JIT interface has an\n+   instance of this type attached to it.  */\n \n-struct jit_objfile_data\n+struct jiter_objfile_data\n {\n-  jit_objfile_data (struct objfile *objfile)\n+  jiter_objfile_data (struct objfile *objfile)\n     : objfile (objfile)\n   {}\n \n-  ~jit_objfile_data ();\n+  ~jiter_objfile_data ();\n \n   /* Back-link to the objfile. */\n   struct objfile *objfile;\n@@ -89,10 +86,19 @@ struct jit_objfile_data\n \n   /* Symbol for __jit_debug_descriptor.  */\n   minimal_symbol *descriptor = nullptr;\n+};\n+\n+/* An objfile that is the product of JIT compilation and was registered\n+   using the JIT interface has an instance of this type attached to it.  */\n+\n+struct jited_objfile_data\n+{\n+  jited_objfile_data (CORE_ADDR addr)\n+    : addr (addr)\n+  {}\n \n-  /* Address of struct jit_code_entry in this objfile.  This is only\n-     non-zero for objfiles that represent code created by the JIT.  */\n-  CORE_ADDR addr = 0;\n+  /* Address of struct jit_code_entry for this objfile.  */\n+  CORE_ADDR addr;\n };\n \n /* Looks for the descriptor and registration symbols and breakpoints"
    },
    {
      "sha": "3fbc6da07960c3d0d3a9f4b56d9d66ac170de899",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
      "patch": "@@ -699,8 +699,13 @@ struct objfile\n      allocated on the objfile's obstack.  */\n   htab_up static_links;\n \n-  /* JIT-related data for this objfile.  */\n-  std::unique_ptr<jit_objfile_data> jit_data = nullptr;\n+  /* JIT-related data for this objfile, if the objfile is a JITer;\n+     that is, it produces JITed objfiles.  */\n+  std::unique_ptr<jiter_objfile_data> jiter_data = nullptr;\n+\n+  /* JIT-related data for this objfile, if the objfile is JITed;\n+     that is, it was produced by a JITer.  */\n+  std::unique_ptr<jited_objfile_data> jited_data = nullptr;\n };\n \n /* A deleter for objfile.  */"
    }
  ]
}