{
  "sha": "0240c8f11b06a33a043bacbe2b9e723ae6ad573c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDI0MGM4ZjExYjA2YTMzYTA0M2JhY2JlMmI5ZTcyM2FlNmFkNTczYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:38Z"
    },
    "message": "Change how TUI windows are instantiated\n\nThis adds a new global that maps from window names to window\nconstructor functions, and then changes tui_get_window_by_name and\nvalidate_window_name to use it.  This is another step toward\nuser-defined window types.\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-layout.c (make_standard_window, get_locator_window): New\n\tfunctions.\n\t(known_window_types): New global.\n\t(tui_get_window_by_name): Reimplement.\n\t(initialize_known_windows): New function.\n\t(validate_window_name): Rewrite.\n\t(_initialize_tui_layout): Call initialize_known_windows.\n\nChange-Id: I9037aac550299b9d945899220a30c2d3af9dd0de",
    "tree": {
      "sha": "e49c7e36b94e02187f30bf53047ac9f867ecee73",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e49c7e36b94e02187f30bf53047ac9f867ecee73"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0240c8f11b06a33a043bacbe2b9e723ae6ad573c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0240c8f11b06a33a043bacbe2b9e723ae6ad573c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0240c8f11b06a33a043bacbe2b9e723ae6ad573c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0240c8f11b06a33a043bacbe2b9e723ae6ad573c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fdb01f0ce44653180af9d3d4f264c0ddb2d1261d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdb01f0ce44653180af9d3d4f264c0ddb2d1261d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fdb01f0ce44653180af9d3d4f264c0ddb2d1261d"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 77,
    "deletions": 32
  },
  "files": [
    {
      "sha": "fe8692782632378b33c2b670d314b2e5441ce440",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0240c8f11b06a33a043bacbe2b9e723ae6ad573c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0240c8f11b06a33a043bacbe2b9e723ae6ad573c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0240c8f11b06a33a043bacbe2b9e723ae6ad573c",
      "patch": "@@ -1,3 +1,13 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-layout.c (make_standard_window, get_locator_window): New\n+\tfunctions.\n+\t(known_window_types): New global.\n+\t(tui_get_window_by_name): Reimplement.\n+\t(initialize_known_windows): New function.\n+\t(validate_window_name): Rewrite.\n+\t(_initialize_tui_layout): Call initialize_known_windows.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui.h (enum tui_win_type) <LOCATOR_WIN, DATA_ITEM_WIN>:"
    },
    {
      "sha": "748a10672956d6284bf218447f8329bcb8ca5e7d",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 67,
      "deletions": 32,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0240c8f11b06a33a043bacbe2b9e723ae6ad573c/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0240c8f11b06a33a043bacbe2b9e723ae6ad573c/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=0240c8f11b06a33a043bacbe2b9e723ae6ad573c",
      "patch": "@@ -29,6 +29,7 @@\n #include \"cli/cli-decode.h\"\n #include \"cli/cli-utils.h\"\n #include <ctype.h>\n+#include <unordered_map>\n #include <unordered_set>\n \n #include \"tui/tui.h\"\n@@ -322,40 +323,74 @@ tui_gen_win_info::resize (int height_, int width_,\n \n \f\n \n+/* Helper function to create one of the built-in (non-locator)\n+   windows.  */\n+\n+template<enum tui_win_type V, class T>\n+static tui_gen_win_info *\n+make_standard_window (const char *)\n+{\n+  if (tui_win_list[V] == nullptr)\n+    tui_win_list[V] = new T ();\n+  return tui_win_list[V];\n+}\n+\n+/* Helper function to wrap tui_locator_win_info_ptr for\n+   tui_get_window_by_name.  */\n+\n+static tui_gen_win_info *\n+get_locator_window (const char *)\n+{\n+  return tui_locator_win_info_ptr ();\n+}\n+\n+/* A map holding all the known window types, keyed by name.  Note that\n+   this is heap-allocated and \"leaked\" at gdb exit.  This avoids\n+   ordering issues with destroying elements in the map at shutdown.\n+   In particular, destroying this map can occur after Python has been\n+   shut down, causing crashes if any window destruction requires\n+   running Python code.  */\n+\n+static std::unordered_map<std::string, window_factory> *known_window_types;\n+\n /* Helper function that returns a TUI window, given its name.  */\n \n static tui_gen_win_info *\n tui_get_window_by_name (const std::string &name)\n {\n-  if (name == \"src\")\n-    {\n-      if (tui_win_list[SRC_WIN] == nullptr)\n-\ttui_win_list[SRC_WIN] = new tui_source_window ();\n-      return tui_win_list[SRC_WIN];\n-    }\n-  else if (name == \"cmd\")\n-    {\n-      if (tui_win_list[CMD_WIN] == nullptr)\n-\ttui_win_list[CMD_WIN] = new tui_cmd_window ();\n-      return tui_win_list[CMD_WIN];\n-    }\n-  else if (name == \"regs\")\n-    {\n-      if (tui_win_list[DATA_WIN] == nullptr)\n-\ttui_win_list[DATA_WIN] = new tui_data_window ();\n-      return tui_win_list[DATA_WIN];\n-    }\n-  else if (name == \"asm\")\n-    {\n-      if (tui_win_list[DISASSEM_WIN] == nullptr)\n-\ttui_win_list[DISASSEM_WIN] = new tui_disasm_window ();\n-      return tui_win_list[DISASSEM_WIN];\n-    }\n-  else\n-    {\n-      gdb_assert (name == \"status\");\n-      return tui_locator_win_info_ptr ();\n-    }\n+  for (tui_win_info *window : saved_tui_windows)\n+    if (name == window->name ())\n+      return window;\n+\n+  auto iter = known_window_types->find (name);\n+  if (iter == known_window_types->end ())\n+    error (_(\"Unknown window type \\\"%s\\\"\"), name.c_str ());\n+\n+  tui_gen_win_info *result = iter->second (name.c_str ());\n+  if (result == nullptr)\n+    error (_(\"Could not create window \\\"%s\\\"\"), name.c_str ());\n+  return result;\n+}\n+\n+/* Initialize the known window types.  */\n+\n+static void\n+initialize_known_windows ()\n+{\n+  known_window_types = new std::unordered_map<std::string, window_factory>;\n+\n+  known_window_types->emplace (\"src\",\n+\t\t\t       make_standard_window<SRC_WIN,\n+\t\t\t\t\t\t    tui_source_window>);\n+  known_window_types->emplace (\"cmd\",\n+\t\t\t       make_standard_window<CMD_WIN, tui_cmd_window>);\n+  known_window_types->emplace (\"regs\",\n+\t\t\t       make_standard_window<DATA_WIN,\n+\t\t\t\t\t\t    tui_data_window>);\n+  known_window_types->emplace (\"asm\",\n+\t\t\t       make_standard_window<DISASSEM_WIN,\n+\t\t\t\t\t\t    tui_disasm_window>);\n+  known_window_types->emplace (\"status\", get_locator_window);\n }\n \n /* See tui-layout.h.  */\n@@ -886,9 +921,8 @@ initialize_layouts ()\n static bool\n validate_window_name (const std::string &name)\n {\n-  return (name == \"src\" || name == \"cmd\"\n-\t  || name == \"regs\" || name == \"asm\"\n-\t  || name == \"status\");\n+  auto iter = known_window_types->find (name);\n+  return iter != known_window_types->end ();\n }\n \n /* Implementation of the \"tui new-layout\" command.  */\n@@ -1023,4 +1057,5 @@ to be allocated to the window.\"),\n \t   tui_get_cmd_list ());\n \n   initialize_layouts ();\n+  initialize_known_windows ();\n }"
    }
  ]
}