{
  "sha": "5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWE1NmQ2YTY1Zjg0MDZmMWFhZGI0NTY5ZmJiOGZmMDBhNmU5MmQwMg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-05-06T06:42:24Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-05-06T06:42:24Z"
    },
    "message": "[gdb/testsuite] Fix index-cache.exp with cc-with-{gdb-index,debug-names}\n\nIn gdb.base/index-cache.exp, handle the case that binfile contains either a\n.gdb_index or .debug_names index section.\n\nTested on x86_64-linux with native, cc-with-gdb-index and cc-with-debug-names.\n\ngdb/testsuite/ChangeLog:\n\n2019-05-06  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (exec_has_index_section): New proc.\n\t* gdb.base/index-cache.exp: Handle case that binfile contains an index\n\tsection.",
    "tree": {
      "sha": "d3034dd247a995c5bc52560caaeb13d1cf4e3bdc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d3034dd247a995c5bc52560caaeb13d1cf4e3bdc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e1cbf07ac4f8c8525dfadaa19bfb2997a2bfaad9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1cbf07ac4f8c8525dfadaa19bfb2997a2bfaad9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e1cbf07ac4f8c8525dfadaa19bfb2997a2bfaad9"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 49,
    "deletions": 8
  },
  "files": [
    {
      "sha": "c32d013b6a2293042092866e2af403c767159ef2",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
      "patch": "@@ -1,3 +1,9 @@\n+2019-05-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (exec_has_index_section): New proc.\n+\t* gdb.base/index-cache.exp: Handle case that binfile contains an index\n+\tsection.\n+\n 2019-05-04  Tom de Vries  <tdevries@suse.de>\n \n \t* boards/cc-with-debug-names.exp: New file."
    },
    {
      "sha": "5baba843607bc648518d296239bec620f916b4b0",
      "filename": "gdb/testsuite/gdb.base/index-cache.exp",
      "status": "modified",
      "additions": 31,
      "deletions": 8,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/gdb/testsuite/gdb.base/index-cache.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/gdb/testsuite/gdb.base/index-cache.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/index-cache.exp?ref=5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
      "patch": "@@ -22,6 +22,8 @@ if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile] } {\n     return\n }\n \n+set has_index_section [exec_has_index_section $binfile]\n+\n # List the files in DIR on the host (where GDB-under-test runs).\n # Return a list of two elements:\n #   - 0 on success, -1 on failure\n@@ -122,18 +124,24 @@ proc_with_prefix test_cache_disabled { cache_dir } {\n     }\n }\n \n-# Test with the cache enabled, we expect to have exactly one file created.\n+# Test with the cache enabled, we expect to have:\n+# - exactly one file created, in case of no index section\n+# - no file created, in case of an index section\n \n proc_with_prefix test_cache_enabled_miss { cache_dir } {\n-    global testfile\n+    global testfile has_index_section\n \n     lassign [ls_host $cache_dir] ret files_before\n \n     run_test_with_flags $cache_dir on {\n \n \tlassign [ls_host $cache_dir] ret files_after\n \tset nfiles_created [expr [llength $files_after] - [llength $files_before]]\n-\tgdb_assert \"$nfiles_created > 0\" \"at least one file was created\"\n+\tif { $has_index_section } {\n+\t    gdb_assert \"$nfiles_created == 0\" \"no file was created\"\n+\t} else {\n+\t    gdb_assert \"$nfiles_created > 0\" \"at least one file was created\"\n+\t}\n \n \tset build_id [get_build_id  [standard_output_file ${testfile}]]\n \tif { $build_id == \"\" } {\n@@ -143,19 +151,30 @@ proc_with_prefix test_cache_enabled_miss { cache_dir } {\n \n \tset expected_created_file [list \"${build_id}.gdb-index\"]\n \tset found_idx [lsearch -exact $files_after $expected_created_file]\n-\tgdb_assert \"$found_idx >= 0\" \"expected file is there\"\n+\tif { $has_index_section } {\n+\t    gdb_assert \"$found_idx == -1\" \"no index cache file generated\"\n+\t} else {\n+\t    gdb_assert \"$found_idx >= 0\" \"expected file is there\"\n+\t}\n \n \tremote_exec host rm \"-f $cache_dir/$expected_created_file\"\n \n-\tcheck_cache_stats 0 1\n+\tif { $has_index_section } {\n+\t    check_cache_stats 0 0\n+\t} else {\n+\t    check_cache_stats 0 1\n+\t}\n     }\n }\n \n \n-# Test with the cache enabled, this time we should have one file (the\n-# same), but one cache read hit.\n+# Test with the cache enabled, this time we should have:\n+# - one file (the same), but one cache read hit, in case of no index section\n+# - no file, no cache hit, in case an an index section\n \n proc_with_prefix test_cache_enabled_hit { cache_dir } {\n+    global has_index_section\n+\n     # Just to populate the cache.\n     run_test_with_flags $cache_dir on {}\n \n@@ -166,7 +185,11 @@ proc_with_prefix test_cache_enabled_hit { cache_dir } {\n \tset nfiles_created [expr [llength $files_after] - [llength $files_before]]\n \tgdb_assert \"$nfiles_created == 0\" \"no files were created\"\n \n-\tcheck_cache_stats 1 0\n+\tif { $has_index_section } {\n+\t    check_cache_stats 0 0\n+\t} else {\n+\t    check_cache_stats 1 0\n+\t}\n     }\n }\n "
    },
    {
      "sha": "8dea857d5ed390711cdb944ae81e5aee74b8a82a",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=5a56d6a65f8406f1aadb4569fbb8ff00a6e92d02",
      "patch": "@@ -5107,6 +5107,18 @@ proc rerun_to_main {} {\n   }\n }\n \n+# Return true if EXECUTABLE contains a .gdb_index or .debug_names index section.\n+\n+proc exec_has_index_section { executable } {\n+    set readelf_program [gdb_find_readelf]\n+    set res [catch {exec $readelf_program -S $executable \\\n+\t\t\t| grep -E \"\\.gdb_index|\\.debug_names\" }]\n+    if { $res == 0 } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n # Return true if a test should be skipped due to lack of floating\n # point support or GDB can't fetch the contents from floating point\n # registers."
    }
  ]
}