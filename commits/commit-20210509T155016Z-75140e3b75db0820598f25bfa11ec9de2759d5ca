{
  "sha": "75140e3b75db0820598f25bfa11ec9de2759d5ca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzUxNDBlM2I3NWRiMDgyMDU5OGYyNWJmYTExZWM5ZGUyNzU5ZDVjYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-05T12:46:36Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-09T15:50:16Z"
    },
    "message": "gdb/py: add some debugging to py-breakpoint.c\n\nAdds some new debugging to python/py-breakpoint.c.\n\ngdb/ChangeLog:\n\n\t* python/py-breakpoint.c (pybp_debug): New static global.\n\t(show_pybp_debug): New function.\n\t(pybp_debug_printf): Define.\n\t(PYBP_SCOPED_DEBUG_ENTER_EXIT): Define.\n\t(gdbpy_breakpoint_created): Add some debugging.\n\t(gdbpy_breakpoint_deleted): Likewise.\n\t(gdbpy_breakpoint_modified): Likewise.\n\t(_initialize_py_breakpoint): New function.\n\ngdb/doc/ChangeLog:\n\n\t* python.texinfo (Python Commands): Document 'set debug\n\tpy-breakpoint' and 'show debug py-breakpoint'.",
    "tree": {
      "sha": "85da6b3e9973c479d472b05f99daee81fe06db79",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85da6b3e9973c479d472b05f99daee81fe06db79"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/75140e3b75db0820598f25bfa11ec9de2759d5ca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75140e3b75db0820598f25bfa11ec9de2759d5ca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/75140e3b75db0820598f25bfa11ec9de2759d5ca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75140e3b75db0820598f25bfa11ec9de2759d5ca/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ef40c1362fc2411ee45ad7251c4e9cc4c906435"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 83,
    "deletions": 3
  },
  "files": [
    {
      "sha": "8fa698023410cadca17918aa3b8fc7297946559a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=75140e3b75db0820598f25bfa11ec9de2759d5ca",
      "patch": "@@ -1,3 +1,14 @@\n+2021-05-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-breakpoint.c (pybp_debug): New static global.\n+\t(show_pybp_debug): New function.\n+\t(pybp_debug_printf): Define.\n+\t(PYBP_SCOPED_DEBUG_ENTER_EXIT): Define.\n+\t(gdbpy_breakpoint_created): Add some debugging.\n+\t(gdbpy_breakpoint_deleted): Likewise.\n+\t(gdbpy_breakpoint_modified): Likewise.\n+\t(_initialize_py_breakpoint): New function.\n+\n 2021-05-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-unwind.c (pyuw_debug): Convert to bool."
    },
    {
      "sha": "f50e32bee3d4a892e85ce054640933f1e3c1435d",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=75140e3b75db0820598f25bfa11ec9de2759d5ca",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texinfo (Python Commands): Document 'set debug\n+\tpy-breakpoint' and 'show debug py-breakpoint'.\n+\n 2021-05-07  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/26327"
    },
    {
      "sha": "18e578a68323641a2fc7f4d9396ff4ce7979929b",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=75140e3b75db0820598f25bfa11ec9de2759d5ca",
      "patch": "@@ -153,6 +153,17 @@ to recognize the script language based on filename extension using\n the @code{script-extension} setting.  @xref{Extending GDB, ,Extending GDB}.\n @end table\n \n+The following commands are intended to help debug @value{GDBN} itself:\n+\n+@table @code\n+@kindex set debug py-breakpoint\n+@kindex show debug py-breakpoint\n+@item set debug py-breakpoint on@r{|}off\n+@itemx show debug py-breakpoint\n+When @samp{on}, @value{GDBN} prints debug messages related to the\n+Python breakpoint API.  This is @samp{off} by default.\n+@end table\n+\n @node Python API\n @subsection Python API\n @cindex python api"
    },
    {
      "sha": "4710f3e9e6a6f70b95f62bd70a0ddad7b58093bd",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 56,
      "deletions": 3,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75140e3b75db0820598f25bfa11ec9de2759d5ca/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=75140e3b75db0820598f25bfa11ec9de2759d5ca",
      "patch": "@@ -34,6 +34,29 @@\n #include \"py-event.h\"\n #include \"linespec.h\"\n \n+/* Debugging of Python breakpoints.  */\n+\n+static bool pybp_debug;\n+\n+/* Implementation of \"show debug py-breakpoint\".  */\n+\n+static void\n+show_pybp_debug (struct ui_file *file, int from_tty,\n+\t\t struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Python breakpoint debugging is %s.\\n\"), value);\n+}\n+\n+/* Print a \"py-breakpoint\" debug statement.  */\n+\n+#define pybp_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (pybp_debug, \"py-breakpoint\", fmt, ##__VA_ARGS__)\n+\n+/* Print a \"py-breakpoint\" enter/exit debug statements.  */\n+\n+#define PYBP_SCOPED_DEBUG_ENTER_EXIT \\\n+  scoped_debug_enter_exit (pybp_debug, \"py-breakpoint\")\n+\n /* Number of live breakpoints.  */\n static int bppy_live;\n \n@@ -1005,18 +1028,26 @@ gdbpy_breakpoint_has_cond (const struct extension_language_defn *extlang,\n static void\n gdbpy_breakpoint_created (struct breakpoint *bp)\n {\n+  PYBP_SCOPED_DEBUG_ENTER_EXIT;\n+\n   gdbpy_breakpoint_object *newbp;\n \n   if (!user_breakpoint_p (bp) && bppy_pending_object == NULL)\n-    return;\n+    {\n+      pybp_debug_printf (\"not attaching python object to this breakpoint\");\n+      return;\n+    }\n \n   if (bp->type != bp_breakpoint\n       && bp->type != bp_hardware_breakpoint\n       && bp->type != bp_watchpoint\n       && bp->type != bp_hardware_watchpoint\n       && bp->type != bp_read_watchpoint\n       && bp->type != bp_access_watchpoint)\n-    return;\n+    {\n+      pybp_debug_printf (\"is not a breakpoint or watchpoint\");\n+      return;\n+    }\n \n   struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n   gdbpy_enter enter_py (garch, current_language);\n@@ -1026,9 +1057,13 @@ gdbpy_breakpoint_created (struct breakpoint *bp)\n       newbp = bppy_pending_object;\n       Py_INCREF (newbp);\n       bppy_pending_object = NULL;\n+      pybp_debug_printf (\"attaching existing breakpoint object\");\n     }\n   else\n-    newbp = PyObject_New (gdbpy_breakpoint_object, &breakpoint_object_type);\n+    {\n+      newbp = PyObject_New (gdbpy_breakpoint_object, &breakpoint_object_type);\n+      pybp_debug_printf (\"attaching new breakpoint object\");\n+    }\n   if (newbp)\n     {\n       newbp->number = bp->number;\n@@ -1057,6 +1092,8 @@ gdbpy_breakpoint_created (struct breakpoint *bp)\n static void\n gdbpy_breakpoint_deleted (struct breakpoint *b)\n {\n+  PYBP_SCOPED_DEBUG_ENTER_EXIT;\n+\n   int num = b->number;\n   struct breakpoint *bp = NULL;\n \n@@ -1087,6 +1124,8 @@ gdbpy_breakpoint_deleted (struct breakpoint *b)\n static void\n gdbpy_breakpoint_modified (struct breakpoint *b)\n {\n+  PYBP_SCOPED_DEBUG_ENTER_EXIT;\n+\n   int num = b->number;\n   struct breakpoint *bp = NULL;\n \n@@ -1285,3 +1324,17 @@ PyTypeObject breakpoint_object_type =\n   bppy_init,\t\t\t  /* tp_init */\n   0,\t\t\t\t  /* tp_alloc */\n };\n+\n+void _initialize_py_breakpoint ();\n+void\n+_initialize_py_breakpoint ()\n+{\n+  add_setshow_boolean_cmd\n+      (\"py-breakpoint\", class_maintenance, &pybp_debug,\n+\t_(\"Set Python breakpoint debugging.\"),\n+\t_(\"Show Python breakpoint debugging.\"),\n+\t_(\"When on, Python breakpoint debugging is enabled.\"),\n+\tNULL,\n+\tshow_pybp_debug,\n+\t&setdebuglist, &showdebuglist);\n+}"
    }
  ]
}