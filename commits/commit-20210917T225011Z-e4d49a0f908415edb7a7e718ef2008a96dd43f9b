{
  "sha": "e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTRkNDlhMGY5MDg0MTVlZGI3YTdlNzE4ZWYyMDA4YTk2ZGQ0M2Y5Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-25T12:28:51Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-17T22:50:11Z"
    },
    "message": "[GOLD] Got_entry::write addends\n\nThis takes care of writing out GOT entries with addends.  The local\nsymbol case was already largely handled, except for passing the addend\nto tls_offset_for_local which might need the addend in a\nlocal_got_offset call.  That's needed also in tls_offset_for_global.\n\nI'm assuming here that GOT entries for function symbols won't ever\nhave addends, and in particular that a GOT entry referencing PLT call\nstub code won't want an offset into the code.\n\n\tPR 28192\n\t* output.cc (Output_data_got::Got_entry::write): Include addend\n\tin global symbol value.  Pass addend to tls_offset_for_*.\n\t* powerpc.cc (Target_powerpc::do_tls_offset_for_local): Handle addend.\n\t(Target_powerpc::do_tls_offset_for_global): Likewise.\n\t* s390.cc (Target_s390::do_tls_offset_for_local): Likewise.\n\t(Target_s390::do_tls_offset_for_global): Likewise.\n\t* target.h (Target::tls_offset_for_local): Add addend param.\n\t(Target::tls_offset_for_global): Likewise.\n\t(Target::do_tls_offset_for_local): Likewise.\n\t(Target::do_tls_offset_for_global): Likewise.",
    "tree": {
      "sha": "b23f491455f9e03d32f806cd26590414f4259b73",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b23f491455f9e03d32f806cd26590414f4259b73"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 40,
    "deletions": 20
  },
  "files": [
    {
      "sha": "7ad8750aa3621e439913f39a7e283d5dc48af1bb",
      "filename": "gold/output.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/output.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/output.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.cc?ref=e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
      "patch": "@@ -1412,10 +1412,17 @@ Output_data_got<got_size, big_endian>::Got_entry::write(\n \t      default:\n \t\tgold_unreachable();\n \t      }\n+\t    // If this is a GOT entry for a known value global symbol,\n+\t    // then the value should include the addend.  If the value\n+\t    // is not known leave the value as zero; The GOT entry\n+\t    // will be set by a dynamic relocation.\n+\t    if (this->addend_ && gsym->final_value_is_known())\n+\t      val += this->addend_;\n \t    if (this->use_plt_or_tls_offset_\n \t\t&& gsym->type() == elfcpp::STT_TLS)\n \t      val += parameters->target().tls_offset_for_global(gsym,\n-\t\t\t\t\t\t\t\tgot_indx);\n+\t\t\t\t\t\t\t\tgot_indx,\n+\t\t\t\t\t\t\t\tthis->addend_);\n \t  }\n       }\n       break;\n@@ -1444,7 +1451,8 @@ Output_data_got<got_size, big_endian>::Got_entry::write(\n \t    val = convert_types<Valtype, uint64_t>(lval);\n \t    if (this->use_plt_or_tls_offset_ && is_tls)\n \t      val += parameters->target().tls_offset_for_local(object, lsi,\n-\t\t\t\t\t\t\t       got_indx);\n+\t\t\t\t\t\t\t       got_indx,\n+\t\t\t\t\t\t\t       this->addend_);\n \t  }\n       }\n       break;"
    },
    {
      "sha": "0b6405915c2ee6872134831b241e3fb1ea854c16",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
      "patch": "@@ -825,12 +825,14 @@ class Target_powerpc : public Sized_target<size, big_endian>\n   int64_t\n   do_tls_offset_for_local(const Relobj* object,\n \t\t\t  unsigned int symndx,\n-\t\t\t  unsigned int got_indx) const;\n+\t\t\t  unsigned int got_indx,\n+\t\t\t  uint64_t addend) const;\n \n   // Return the offset to use for the GOT_INDX'th got entry which is\n   // for global tls symbol GSYM.\n   int64_t\n-  do_tls_offset_for_global(Symbol* gsym, unsigned int got_indx) const;\n+  do_tls_offset_for_global(Symbol* gsym, unsigned int got_indx,\n+\t\t\t   uint64_t addend) const;\n \n   void\n   do_function_location(Symbol_location*) const;\n@@ -12790,7 +12792,8 @@ int64_t\n Target_powerpc<size, big_endian>::do_tls_offset_for_local(\n     const Relobj* object,\n     unsigned int symndx,\n-    unsigned int got_indx) const\n+    unsigned int got_indx,\n+    uint64_t addend) const\n {\n   const Powerpc_relobj<size, big_endian>* ppc_object\n     = static_cast<const Powerpc_relobj<size, big_endian>*>(object);\n@@ -12799,9 +12802,10 @@ Target_powerpc<size, big_endian>::do_tls_offset_for_local(\n       for (Got_type got_type = GOT_TYPE_TLSGD;\n \t   got_type <= GOT_TYPE_TPREL;\n \t   got_type = Got_type(got_type + 1))\n-\tif (ppc_object->local_has_got_offset(symndx, got_type))\n+\tif (ppc_object->local_has_got_offset(symndx, got_type, addend))\n \t  {\n-\t    unsigned int off = ppc_object->local_got_offset(symndx, got_type);\n+\t    unsigned int off\n+\t      = ppc_object->local_got_offset(symndx, got_type, addend);\n \t    if (got_type == GOT_TYPE_TLSGD)\n \t      off += size / 8;\n \t    if (off == got_indx * (size / 8))\n@@ -12822,16 +12826,17 @@ template<int size, bool big_endian>\n int64_t\n Target_powerpc<size, big_endian>::do_tls_offset_for_global(\n     Symbol* gsym,\n-    unsigned int got_indx) const\n+    unsigned int got_indx,\n+    uint64_t addend) const\n {\n   if (gsym->type() == elfcpp::STT_TLS)\n     {\n       for (Got_type got_type = GOT_TYPE_TLSGD;\n \t   got_type <= GOT_TYPE_TPREL;\n \t   got_type = Got_type(got_type + 1))\n-\tif (gsym->has_got_offset(got_type))\n+\tif (gsym->has_got_offset(got_type, addend))\n \t  {\n-\t    unsigned int off = gsym->got_offset(got_type);\n+\t    unsigned int off = gsym->got_offset(got_type, addend);\n \t    if (got_type == GOT_TYPE_TLSGD)\n \t      off += size / 8;\n \t    if (off == got_indx * (size / 8))"
    },
    {
      "sha": "3095320524f676bbd43873a2ba2819ecbc80e96a",
      "filename": "gold/s390.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/s390.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/s390.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/s390.cc?ref=e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
      "patch": "@@ -401,12 +401,14 @@ class Target_s390 : public Sized_target<size, true>\n   int64_t\n   do_tls_offset_for_local(const Relobj* object,\n \t\t\t  unsigned int symndx,\n-\t\t\t  unsigned int got_indx) const;\n+\t\t\t  unsigned int got_indx,\n+\t\t\t  uint64_t addend) const;\n \n   // Return the offset to use for the GOT_INDX'th got entry which is\n   // for global tls symbol GSYM.\n   int64_t\n-  do_tls_offset_for_global(Symbol* gsym, unsigned int got_indx) const;\n+  do_tls_offset_for_global(Symbol* gsym, unsigned int got_indx,\n+\t\t\t   uint64_t addend) const;\n \n   // This function should be defined in targets that can use relocation\n   // types to determine (implemented in local_reloc_may_be_function_pointer\n@@ -4218,7 +4220,8 @@ int64_t\n Target_s390<size>::do_tls_offset_for_local(\n     const Relobj*,\n     unsigned int,\n-    unsigned int) const\n+    unsigned int,\n+    uint64_t) const\n {\n   // The only way we can get called is when IEENT/GOTIE12/GOTIE20\n   // couldn't be optimised to LE.\n@@ -4232,7 +4235,8 @@ template<int size>\n int64_t\n Target_s390<size>::do_tls_offset_for_global(\n     Symbol*,\n-    unsigned int) const\n+    unsigned int,\n+    uint64_t) const\n {\n   Output_segment* tls_segment = layout_->tls_segment();\n   return -tls_segment->memsz();"
    },
    {
      "sha": "4fce9fdf2c7ac1fe6ba89917a088b9a9c98588e7",
      "filename": "gold/target.h",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4d49a0f908415edb7a7e718ef2008a96dd43f9b/gold/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/target.h?ref=e4d49a0f908415edb7a7e718ef2008a96dd43f9b",
      "patch": "@@ -289,14 +289,16 @@ class Target\n   int64_t\n   tls_offset_for_local(const Relobj* object,\n \t\t       unsigned int symndx,\n-\t\t       unsigned int got_indx) const\n-  { return do_tls_offset_for_local(object, symndx, got_indx); }\n+\t\t       unsigned int got_indx,\n+\t\t       uint64_t addend) const\n+  { return do_tls_offset_for_local(object, symndx, got_indx, addend); }\n \n   // Return the offset to use for the GOT_INDX'th got entry which is\n   // for global tls symbol GSYM.\n   int64_t\n-  tls_offset_for_global(Symbol* gsym, unsigned int got_indx) const\n-  { return do_tls_offset_for_global(gsym, got_indx); }\n+  tls_offset_for_global(Symbol* gsym, unsigned int got_indx,\n+\t\t\tuint64_t addend) const\n+  { return do_tls_offset_for_global(gsym, got_indx, addend); }\n \n   // For targets that use function descriptors, if LOC is the location\n   // of a function, modify it to point at the function entry location.\n@@ -648,11 +650,12 @@ class Target\n   { gold_unreachable(); }\n \n   virtual int64_t\n-  do_tls_offset_for_local(const Relobj*, unsigned int, unsigned int) const\n+  do_tls_offset_for_local(const Relobj*, unsigned int, unsigned int,\n+\t\t\t  uint64_t) const\n   { gold_unreachable(); }\n \n   virtual int64_t\n-  do_tls_offset_for_global(Symbol*, unsigned int) const\n+  do_tls_offset_for_global(Symbol*, unsigned int, uint64_t) const\n   { gold_unreachable(); }\n \n   virtual void"
    }
  ]
}