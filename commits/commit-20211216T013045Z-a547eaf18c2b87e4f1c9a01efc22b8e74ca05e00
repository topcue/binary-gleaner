{
  "sha": "a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
  "node_id": "C_kwDOANOeidoAKGE1NDdlYWYxOGMyYjg3ZTRmMWM5YTAxZWZjMjJiOGU3NGNhMDVlMDA",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-16T01:26:35Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-16T01:30:45Z"
    },
    "message": "gdb: re-format with black 21.9b0\n\nRun black 21.9b0 on gdb/ (this is the version currently mentioned on the\nwiki [1], the subsequent commit will bump that version).\n\n[1] https://sourceware.org/gdb/wiki/Internals%20GDB-Python-Coding-Standards\n\nChange-Id: I5ceaab42c42428e053e2572df172aa42a88f0f86",
    "tree": {
      "sha": "7c05aca61cd3a5f83a22bd3cdcadd70aacbf60f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c05aca61cd3a5f83a22bd3cdcadd70aacbf60f4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "da72876cc5dac594115d684c0a5a570d378f0f5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/da72876cc5dac594115d684c0a5a570d378f0f5f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/da72876cc5dac594115d684c0a5a570d378f0f5f"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 19,
    "deletions": 11
  },
  "files": [
    {
      "sha": "ae67f81036844f3b927edaf75bd42a93235d5795",
      "filename": "gdb/gdb-gdb.py.in",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/gdb/gdb-gdb.py.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/gdb/gdb-gdb.py.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb-gdb.py.in?ref=a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
      "patch": "@@ -242,9 +242,10 @@ class StructMainTypePrettyPrinter:\n                 \" _mp_num and _mp_den fields if needed)\"\n             )\n         elif type_specific_kind == \"TYPE_SPECIFIC_INT\":\n-            img = (\"int_stuff = { bit_size = %d, bit_offset = %d }\"\n-                   % (type_specific[\"int_stuff\"][\"bit_size\"],\n-                      type_specific[\"int_stuff\"][\"bit_offset\"]))\n+            img = \"int_stuff = { bit_size = %d, bit_offset = %d }\" % (\n+                type_specific[\"int_stuff\"][\"bit_size\"],\n+                type_specific[\"int_stuff\"][\"bit_offset\"],\n+            )\n         else:\n             img = (\n                 \"type_specific = ??? (unknown type_specific_kind: %s)\""
    },
    {
      "sha": "dfbca320f68be105cf632a31d332eb017348463f",
      "filename": "gdb/testsuite/gdb.multi/multi-target-info-inferiors.py",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/gdb/testsuite/gdb.multi/multi-target-info-inferiors.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/gdb/testsuite/gdb.multi/multi-target-info-inferiors.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-info-inferiors.py?ref=a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
      "patch": "@@ -19,6 +19,7 @@\n def conn_num(c):\n     return c.num\n \n+\n # Takes a gdb.TargetConnection and return a string that is either the\n # type, or the type and details (if the details are not None).\n def make_target_connection_string(c):\n@@ -27,6 +28,7 @@ def make_target_connection_string(c):\n     else:\n         return \"%s %s\" % (c.type, c.details)\n \n+\n # A Python implementation of 'info connections'.  Produce output that\n # is identical to the output of 'info connections' so we can check\n # that aspects of gdb.TargetConnection work correctly.\n@@ -48,17 +50,19 @@ def info_connections():\n         else:\n             prefix = \"  \"\n \n-        print(fmt % (prefix, c.num, make_target_connection_string(c),\n-                     c.description))\n+        print(fmt % (prefix, c.num, make_target_connection_string(c), c.description))\n+\n \n def inf_num(i):\n     return i.num\n \n+\n # Print information about each inferior, and the connection it is\n # using.\n def info_inferiors():\n     all_inferiors = sorted(gdb.inferiors(), key=inf_num)\n     for i in gdb.inferiors():\n-        print(\"Inferior %d, Connection #%d: %s\" %\n-              (i.num, i.connection_num,\n-               make_target_connection_string(i.connection)))\n+        print(\n+            \"Inferior %d, Connection #%d: %s\"\n+            % (i.num, i.connection_num, make_target_connection_string(i.connection))\n+        )"
    },
    {
      "sha": "b2051875b4c79b5c3201ff8713c9205a2bc8a618",
      "filename": "gdb/testsuite/gdb.python/py-events.py",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/gdb/testsuite/gdb.python/py-events.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00/gdb/testsuite/gdb.python/py-events.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-events.py?ref=a547eaf18c2b87e4f1c9a01efc22b8e74ca05e00",
      "patch": "@@ -45,7 +45,7 @@ def breakpoint_stop_handler(event):\n def exit_handler(event):\n     assert isinstance(event, gdb.ExitedEvent)\n     print(\"event type: exit\")\n-    if hasattr(event, 'exit_code'):\n+    if hasattr(event, \"exit_code\"):\n         print(\"exit code: %d\" % (event.exit_code))\n     else:\n         print(\"exit code: not-present\")\n@@ -133,6 +133,7 @@ def invoke(self, arg, from_tty):\n \n test_newobj_events()\n \n+\n def gdb_exiting_handler(event, throw_error):\n     assert isinstance(event, gdb.GdbExitingEvent)\n     if throw_error:\n@@ -141,6 +142,7 @@ def gdb_exiting_handler(event, throw_error):\n         print(\"event type: gdb-exiting\")\n         print(\"exit code: %d\" % (event.exit_code))\n \n+\n class test_exiting_event(gdb.Command):\n     \"\"\"GDB Exiting event.\"\"\"\n \n@@ -149,11 +151,12 @@ def __init__(self):\n \n     def invoke(self, arg, from_tty):\n         if arg == \"normal\":\n-            gdb.events.gdb_exiting.connect(lambda e: gdb_exiting_handler(e,False))\n+            gdb.events.gdb_exiting.connect(lambda e: gdb_exiting_handler(e, False))\n         elif arg == \"error\":\n-            gdb.events.gdb_exiting.connect(lambda e: gdb_exiting_handler(e,True))\n+            gdb.events.gdb_exiting.connect(lambda e: gdb_exiting_handler(e, True))\n         else:\n             raise gdb.GdbError(\"invalid or missing argument\")\n         print(\"GDB exiting event registered.\")\n \n+\n test_exiting_event()"
    }
  ]
}