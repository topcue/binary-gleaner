{
  "sha": "536a40f3a8d2c18aae18a9137b838ff2accdfc08",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTM2YTQwZjNhOGQyYzE4YWFlMThhOTEzN2I4MzhmZjJhY2NkZmMwOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:06Z"
    },
    "message": "Remove quick_symbol_functions::map_symtabs_matching_filename\n\nThis replaces quick_symbol_functions::map_symtabs_matching_filename\nwith a call to expand_symtabs_matching.  As with the previous patch,\nrather than update all callers, the implementation is consolidated in\nobjfile::map_symtabs_matching_filename.\n\ngdb/ChangeLog\n2021-04-17  Tom Tromey  <tom@tromey.com>\n\n\t* symfile-debug.c (objfile::map_symtabs_matching_filename):\n\tRewrite.\n\t* quick-symbol.h (struct quick_symbol_functions)\n\t<map_symtabs_matching_filename>: Remove.\n\t* psymtab.c (partial_map_expand_apply)\n\t(psymbol_functions::map_symtabs_matching_filename): Remove.\n\t* psympriv.h (struct psymbol_functions)\n\t<map_symtabs_matching_filename>: Remove.\n\t* objfiles.h (struct objfile) <map_symtabs_matching_filename>:\n\tUpdate comment.\n\t* dwarf2/read.c (struct dwarf2_base_index_functions)\n\t<map_symtabs_matching_filename>: Remove.\n\t(dw2_map_expand_apply)\n\t(dwarf2_base_index_functions::map_symtabs_matching_filename):\n\tRemove.",
    "tree": {
      "sha": "d498eab42e09269d72816d31091eb55e083cc1b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d498eab42e09269d72816d31091eb55e083cc1b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/536a40f3a8d2c18aae18a9137b838ff2accdfc08",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/536a40f3a8d2c18aae18a9137b838ff2accdfc08",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/536a40f3a8d2c18aae18a9137b838ff2accdfc08",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/536a40f3a8d2c18aae18a9137b838ff2accdfc08/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/84d865e39c3739097d7a3481b9c9b6b6fecb2b06"
    }
  ],
  "stats": {
    "total": 292,
    "additions": 77,
    "deletions": 215
  },
  "files": [
    {
      "sha": "78e7795853a75c45213eba3bf2becb410985f96d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -1,3 +1,21 @@\n+2021-04-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile-debug.c (objfile::map_symtabs_matching_filename):\n+\tRewrite.\n+\t* quick-symbol.h (struct quick_symbol_functions)\n+\t<map_symtabs_matching_filename>: Remove.\n+\t* psymtab.c (partial_map_expand_apply)\n+\t(psymbol_functions::map_symtabs_matching_filename): Remove.\n+\t* psympriv.h (struct psymbol_functions)\n+\t<map_symtabs_matching_filename>: Remove.\n+\t* objfiles.h (struct objfile) <map_symtabs_matching_filename>:\n+\tUpdate comment.\n+\t* dwarf2/read.c (struct dwarf2_base_index_functions)\n+\t<map_symtabs_matching_filename>: Remove.\n+\t(dw2_map_expand_apply)\n+\t(dwarf2_base_index_functions::map_symtabs_matching_filename):\n+\tRemove.\n+\n 2021-04-17  Tom Tromey  <tom@tromey.com>\n \n \t* symfile-debug.c (objfile::lookup_symbol): Rewrite."
    },
    {
      "sha": "763e41601dcd72255cafbc0b4e4c276bebf3e52b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 0,
      "deletions": 98,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -2228,10 +2228,6 @@ struct dwarf2_base_index_functions : public quick_symbol_functions\n \n   void forget_cached_source_info (struct objfile *objfile) override;\n \n-  bool map_symtabs_matching_filename\n-    (struct objfile *objfile, const char *name, const char *real_path,\n-     gdb::function_view<bool (symtab *)> callback) override;\n-\n   enum language lookup_global_symbol_language (struct objfile *objfile,\n \t\t\t\t\t       const char *name,\n \t\t\t\t\t       domain_enum domain,\n@@ -3381,100 +3377,6 @@ dwarf2_base_index_functions::forget_cached_source_info\n \t\t\t  dw2_free_cached_file_names, NULL);\n }\n \n-/* Helper function for dw2_map_symtabs_matching_filename that expands\n-   the symtabs and calls the iterator.  */\n-\n-static int\n-dw2_map_expand_apply (struct objfile *objfile,\n-\t\t      struct dwarf2_per_cu_data *per_cu,\n-\t\t      const char *name, const char *real_path,\n-\t\t      gdb::function_view<bool (symtab *)> callback)\n-{\n-  struct compunit_symtab *last_made = objfile->compunit_symtabs;\n-\n-  /* Don't visit already-expanded CUs.  */\n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n-  if (per_objfile->symtab_set_p (per_cu))\n-    return 0;\n-\n-  /* This may expand more than one symtab, and we want to iterate over\n-     all of them.  */\n-  dw2_instantiate_symtab (per_cu, per_objfile, false);\n-\n-  return iterate_over_some_symtabs (name, real_path, objfile->compunit_symtabs,\n-\t\t\t\t    last_made, callback);\n-}\n-\n-/* Implementation of the map_symtabs_matching_filename method.  */\n-\n-bool\n-dwarf2_base_index_functions::map_symtabs_matching_filename\n-  (struct objfile *objfile, const char *name, const char *real_path,\n-   gdb::function_view<bool (symtab *)> callback)\n-{\n-  const char *name_basename = lbasename (name);\n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n-\n-  /* The rule is CUs specify all the files, including those used by\n-     any TU, so there's no need to scan TUs here.  */\n-\n-  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n-    {\n-      /* We only need to look at symtabs not already expanded.  */\n-      if (per_objfile->symtab_set_p (per_cu))\n-\tcontinue;\n-\n-      quick_file_names *file_data = dw2_get_file_names (per_cu, per_objfile);\n-      if (file_data == NULL)\n-\tcontinue;\n-\n-      for (int j = 0; j < file_data->num_file_names; ++j)\n-\t{\n-\t  const char *this_name = file_data->file_names[j];\n-\t  const char *this_real_name;\n-\n-\t  if (compare_filenames_for_search (this_name, name))\n-\t    {\n-\t      if (dw2_map_expand_apply (objfile, per_cu, name, real_path,\n-\t\t\t\t\tcallback))\n-\t\treturn true;\n-\t      continue;\n-\t    }\n-\n-\t  /* Before we invoke realpath, which can get expensive when many\n-\t     files are involved, do a quick comparison of the basenames.  */\n-\t  if (! basenames_may_differ\n-\t      && FILENAME_CMP (lbasename (this_name), name_basename) != 0)\n-\t    continue;\n-\n-\t  this_real_name = dw2_get_real_path (per_objfile, file_data, j);\n-\t  if (compare_filenames_for_search (this_real_name, name))\n-\t    {\n-\t      if (dw2_map_expand_apply (objfile, per_cu, name, real_path,\n-\t\t\t\t\tcallback))\n-\t\treturn true;\n-\t      continue;\n-\t    }\n-\n-\t  if (real_path != NULL)\n-\t    {\n-\t      gdb_assert (IS_ABSOLUTE_PATH (real_path));\n-\t      gdb_assert (IS_ABSOLUTE_PATH (name));\n-\t      if (this_real_name != NULL\n-\t\t  && FILENAME_CMP (real_path, this_real_name) == 0)\n-\t\t{\n-\t\t  if (dw2_map_expand_apply (objfile, per_cu, name, real_path,\n-\t\t\t\t\t    callback))\n-\t\t    return true;\n-\t\t  continue;\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n /* Struct used to manage iterating over all CUs looking for a symbol.  */\n \n struct dw2_symtab_iterator"
    },
    {
      "sha": "cff1d8afbde811518d2ac21ff9ed1eac77baac12",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -571,7 +571,18 @@ struct objfile\n   /* See quick_symbol_functions.  */\n   void forget_cached_source_info ();\n \n-  /* See quick_symbol_functions.  */\n+  /* Expand and iterate over each \"partial\" symbol table in OBJFILE\n+     where the source file is named NAME.\n+\n+     If NAME is not absolute, a match after a '/' in the symbol table's\n+     file name will also work, REAL_PATH is NULL then.  If NAME is\n+     absolute then REAL_PATH is non-NULL absolute file name as resolved\n+     via gdb_realpath from NAME.\n+\n+     If a match is found, the \"partial\" symbol table is expanded.\n+     Then, this calls iterate_over_some_symtabs (or equivalent) over\n+     all newly-created symbol tables, passing CALLBACK to it.\n+     The result of this call is returned.  */\n   bool map_symtabs_matching_filename\n     (const char *name, const char *real_path,\n      gdb::function_view<bool (symtab *)> callback);"
    },
    {
      "sha": "3c174472d30edf35e1e6a5f85ae2763c73df6e45",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -507,10 +507,6 @@ struct psymbol_functions : public quick_symbol_functions\n \n   void forget_cached_source_info (struct objfile *objfile) override;\n \n-  bool map_symtabs_matching_filename\n-    (struct objfile *objfile, const char *name, const char *real_path,\n-     gdb::function_view<bool (symtab *)> callback) override;\n-\n   enum language lookup_global_symbol_language (struct objfile *objfile,\n \t\t\t\t\t       const char *name,\n \t\t\t\t\t       domain_enum domain,"
    },
    {
      "sha": "be523a7ded05493ee4eebf5ca16fc923e0344030",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 0,
      "deletions": 90,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -87,96 +87,6 @@ psymbol_functions::require_partial_symbols (struct objfile *objfile)\n   return m_partial_symtabs->range ();\n }\n \n-/* Helper function for psym_map_symtabs_matching_filename that\n-   expands the symtabs and calls the iterator.  */\n-\n-static bool\n-partial_map_expand_apply (struct objfile *objfile,\n-\t\t\t  const char *name,\n-\t\t\t  const char *real_path,\n-\t\t\t  struct partial_symtab *pst,\n-\t\t\t  gdb::function_view<bool (symtab *)> callback)\n-{\n-  struct compunit_symtab *last_made = objfile->compunit_symtabs;\n-\n-  /* Shared psymtabs should never be seen here.  Instead they should\n-     be handled properly by the caller.  */\n-  gdb_assert (pst->user == NULL);\n-\n-  /* Don't visit already-expanded psymtabs.  */\n-  if (pst->readin_p (objfile))\n-    return 0;\n-\n-  /* This may expand more than one symtab, and we want to iterate over\n-     all of them.  */\n-  psymtab_to_symtab (objfile, pst);\n-\n-  return iterate_over_some_symtabs (name, real_path, objfile->compunit_symtabs,\n-\t\t\t\t    last_made, callback);\n-}\n-\n-/*  Psymtab version of map_symtabs_matching_filename.  See its definition in\n-    the definition of quick_symbol_functions in symfile.h.  */\n-\n-bool\n-psymbol_functions::map_symtabs_matching_filename\n-  (struct objfile *objfile,\n-   const char *name,\n-   const char *real_path,\n-   gdb::function_view<bool (symtab *)> callback)\n-{\n-  const char *name_basename = lbasename (name);\n-\n-  for (partial_symtab *pst : require_partial_symbols (objfile))\n-    {\n-      /* Anonymous psymtabs don't have a file name.  */\n-      if (pst->anonymous)\n-\tcontinue;\n-\n-      if (compare_filenames_for_search (pst->filename, name))\n-\t{\n-\t  while (pst->user)\n-\t    pst = pst->user;\n-\n-\t  if (partial_map_expand_apply (objfile, name, real_path,\n-\t\t\t\t\tpst, callback))\n-\t    return true;\n-\t  continue;\n-\t}\n-\n-      /* Before we invoke realpath, which can get expensive when many\n-\t files are involved, do a quick comparison of the basenames.  */\n-      if (! basenames_may_differ\n-\t  && FILENAME_CMP (name_basename, lbasename (pst->filename)) != 0)\n-\tcontinue;\n-\n-      if (compare_filenames_for_search (psymtab_to_fullname (pst), name))\n-\t{\n-\t  if (partial_map_expand_apply (objfile, name, real_path,\n-\t\t\t\t\tpst, callback))\n-\t    return true;\n-\t  continue;\n-\t}\n-\n-      /* If the user gave us an absolute path, try to find the file in\n-\t this symtab and use its absolute path.  */\n-      if (real_path != NULL)\n-\t{\n-\t  gdb_assert (IS_ABSOLUTE_PATH (real_path));\n-\t  gdb_assert (IS_ABSOLUTE_PATH (name));\n-\t  if (filename_cmp (psymtab_to_fullname (pst), real_path) == 0)\n-\t    {\n-\t      if (partial_map_expand_apply (objfile, name, real_path,\n-\t\t\t\t\t    pst, callback))\n-\t\treturn true;\n-\t      continue;\n-\t    }\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n /* Find which partial symtab contains PC and SECTION starting at psymtab PST.\n    We may find a different psymtab than PST.  See FIND_PC_SECT_PSYMTAB.  */\n "
    },
    {
      "sha": "63aba60bb9af787b1c8a94cb099eeaf6fe3ad1f3",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 0,
      "deletions": 16,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -93,22 +93,6 @@ struct quick_symbol_functions\n   /* Forget all cached full file names for OBJFILE.  */\n   virtual void forget_cached_source_info (struct objfile *objfile) = 0;\n \n-  /* Expand and iterate over each \"partial\" symbol table in OBJFILE\n-     where the source file is named NAME.\n-\n-     If NAME is not absolute, a match after a '/' in the symbol table's\n-     file name will also work, REAL_PATH is NULL then.  If NAME is\n-     absolute then REAL_PATH is non-NULL absolute file name as resolved\n-     via gdb_realpath from NAME.\n-\n-     If a match is found, the \"partial\" symbol table is expanded.\n-     Then, this calls iterate_over_some_symtabs (or equivalent) over\n-     all newly-created symbol tables, passing CALLBACK to it.\n-     The result of this call is returned.  */\n-  virtual bool map_symtabs_matching_filename\n-    (struct objfile *objfile, const char *name, const char *real_path,\n-     gdb::function_view<bool (symtab *)> callback) = 0;\n-\n   /* Check to see if the global symbol is defined in a \"partial\" symbol table\n      of OBJFILE. NAME is the name of the symbol to look for.  DOMAIN\n      indicates what sort of symbol to search for."
    },
    {
      "sha": "cc31fc0b42c1ceff16214154266f331867909b12",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 47,
      "deletions": 6,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/536a40f3a8d2c18aae18a9137b838ff2accdfc08/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=536a40f3a8d2c18aae18a9137b838ff2accdfc08",
      "patch": "@@ -33,6 +33,7 @@\n #include \"symtab.h\"\n #include \"symfile.h\"\n #include \"block.h\"\n+#include \"filenames.h\"\n \n /* We need to save a pointer to the real symbol functions.\n    Plus, the debug versions are malloc'd because we have to NULL out the\n@@ -146,21 +147,61 @@ objfile::map_symtabs_matching_filename\n \t\t      real_path ? real_path : NULL,\n \t\t      host_address_to_string (&callback));\n \n-  bool retval = false;\n+  bool retval = true;\n+  const char *name_basename = lbasename (name);\n+\n+  auto match_one_filename = [&] (const char *filename, bool basenames)\n+  {\n+    if (compare_filenames_for_search (filename, name))\n+      return true;\n+    if (basenames && FILENAME_CMP (name_basename, filename) == 0)\n+      return true;\n+    if (real_path != nullptr && IS_ABSOLUTE_PATH (filename)\n+\t&& IS_ABSOLUTE_PATH (real_path))\n+      return filename_cmp (filename, real_path) == 0;\n+    return false;\n+  };\n+\n+  compunit_symtab *last_made = this->compunit_symtabs;\n+\n+  auto on_expansion = [&] (compunit_symtab *symtab)\n+  {\n+    /* The callback to iterate_over_some_symtabs returns false to keep\n+       going and true to continue, so we have to invert the result\n+       here, for expand_symtabs_matching.  */\n+    bool result = !iterate_over_some_symtabs (name, real_path,\n+\t\t\t\t\t      this->compunit_symtabs,\n+\t\t\t\t\t      last_made,\n+\t\t\t\t\t      callback);\n+    last_made = this->compunit_symtabs;\n+    return result;\n+  };\n+\n   for (const auto &iter : qf)\n     {\n-      retval = (iter->map_symtabs_matching_filename\n-\t\t(this, name, real_path, callback));\n-      if (retval)\n-\tbreak;\n+      if (!iter->expand_symtabs_matching (this,\n+\t\t\t\t\t  match_one_filename,\n+\t\t\t\t\t  nullptr,\n+\t\t\t\t\t  nullptr,\n+\t\t\t\t\t  on_expansion,\n+\t\t\t\t\t  (SEARCH_GLOBAL_BLOCK\n+\t\t\t\t\t   | SEARCH_STATIC_BLOCK),\n+\t\t\t\t\t  UNDEF_DOMAIN,\n+\t\t\t\t\t  ALL_DOMAIN))\n+\t{\n+\t  retval = false;\n+\t  break;\n+\t}\n     }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n \t\t      \"qf->map_symtabs_matching_filename (...) = %d\\n\",\n \t\t      retval);\n \n-  return retval;\n+  /* We must re-invert the return value here to match the caller's\n+     expectations.  */\n+  return !retval;\n }\n \n struct compunit_symtab *"
    }
  ]
}