{
  "sha": "2bd64d21094f9527c9a6019f668c16ca897b2631",
  "node_id": "C_kwDOANOeidoAKDJiZDY0ZDIxMDk0Zjk1MjdjOWE2MDE5ZjY2OGMxNmNhODk3YjI2MzE",
  "commit": {
    "author": {
      "name": "Jan Vrany",
      "email": "jan.vrany@labware.com",
      "date": "2021-12-08T10:46:49Z"
    },
    "committer": {
      "name": "Jan Vrany",
      "email": "jan.vrany@labware.com",
      "date": "2021-12-08T10:46:49Z"
    },
    "message": "ppc: recognize all program traps\n\nPermanent program breakpoints (ones inserted into the code) other than\nthe one GDB uses for POWER (0x7fe00008) did not result in stop but\ncaused GDB to loop infinitely.\n\nThis was because GDB did not recognize trap instructions other than\n\"trap\". For example, \"tw 12, 4, 4\" was not be recognized, causing GDB\nto loop forever.\n\nThis commit fixes this by providing POWER specific hook\n(gdbarch_program_breakpoint_here_p) recognizing all tw, twi, td and tdi\ninstructions.\n\nTested on Linux on PowerPC e500 and on QEMU PPC64le.",
    "tree": {
      "sha": "8cc6fda87a0ccdc6011237b1ce30876661a5698f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8cc6fda87a0ccdc6011237b1ce30876661a5698f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2bd64d21094f9527c9a6019f668c16ca897b2631",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bd64d21094f9527c9a6019f668c16ca897b2631",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2bd64d21094f9527c9a6019f668c16ca897b2631",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bd64d21094f9527c9a6019f668c16ca897b2631/comments",
  "author": {
    "login": "janvrany",
    "id": 82951,
    "node_id": "MDQ6VXNlcjgyOTUx",
    "avatar_url": "https://avatars.githubusercontent.com/u/82951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/janvrany",
    "html_url": "https://github.com/janvrany",
    "followers_url": "https://api.github.com/users/janvrany/followers",
    "following_url": "https://api.github.com/users/janvrany/following{/other_user}",
    "gists_url": "https://api.github.com/users/janvrany/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/janvrany/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/janvrany/subscriptions",
    "organizations_url": "https://api.github.com/users/janvrany/orgs",
    "repos_url": "https://api.github.com/users/janvrany/repos",
    "events_url": "https://api.github.com/users/janvrany/events{/privacy}",
    "received_events_url": "https://api.github.com/users/janvrany/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "janvrany",
    "id": 82951,
    "node_id": "MDQ6VXNlcjgyOTUx",
    "avatar_url": "https://avatars.githubusercontent.com/u/82951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/janvrany",
    "html_url": "https://github.com/janvrany",
    "followers_url": "https://api.github.com/users/janvrany/followers",
    "following_url": "https://api.github.com/users/janvrany/following{/other_user}",
    "gists_url": "https://api.github.com/users/janvrany/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/janvrany/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/janvrany/subscriptions",
    "organizations_url": "https://api.github.com/users/janvrany/orgs",
    "repos_url": "https://api.github.com/users/janvrany/repos",
    "events_url": "https://api.github.com/users/janvrany/events{/privacy}",
    "received_events_url": "https://api.github.com/users/janvrany/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44f3c3c212f9b568a6b3cff0444b6750e3d8680f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44f3c3c212f9b568a6b3cff0444b6750e3d8680f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/44f3c3c212f9b568a6b3cff0444b6750e3d8680f"
    }
  ],
  "stats": {
    "total": 201,
    "additions": 201,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ce98dc2f88438eb76df8ec2d95986754b1716c12",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=2bd64d21094f9527c9a6019f668c16ca897b2631",
      "patch": "@@ -6247,6 +6247,69 @@ ppc_process_record (struct gdbarch *gdbarch, struct regcache *regcache,\n   return 0;\n }\n \n+/* Used for matching tw, twi, td and tdi instructions for POWER.  */\n+\n+static constexpr uint32_t TX_INSN_MASK = 0xFC0007FF;\n+static constexpr uint32_t TW_INSN = 0x7C000008;\n+static constexpr uint32_t TD_INSN = 0x7C000088;\n+\n+static constexpr uint32_t TXI_INSN_MASK = 0xFC000000;\n+static constexpr uint32_t TWI_INSN = 0x0C000000;\n+static constexpr uint32_t TDI_INSN = 0x08000000;\n+\n+static inline bool\n+is_tw_insn (uint32_t insn)\n+{\n+  return (insn & TX_INSN_MASK) == TW_INSN;\n+}\n+\n+static inline bool\n+is_twi_insn (uint32_t insn)\n+{\n+  return (insn & TXI_INSN_MASK) == TWI_INSN;\n+}\n+\n+static inline bool\n+is_td_insn (uint32_t insn)\n+{\n+  return (insn & TX_INSN_MASK) == TD_INSN;\n+}\n+\n+static inline bool\n+is_tdi_insn (uint32_t insn)\n+{\n+  return (insn & TXI_INSN_MASK) == TDI_INSN;\n+}\n+\n+/* Implementation of gdbarch_program_breakpoint_here_p for POWER.  */\n+\n+static bool\n+rs6000_program_breakpoint_here_p (gdbarch *gdbarch, CORE_ADDR address)\n+{\n+  gdb_byte target_mem[PPC_INSN_SIZE];\n+\n+  /* Enable the automatic memory restoration from breakpoints while\n+     we read the memory.  Otherwise we may find temporary breakpoints, ones\n+     inserted by GDB, and flag them as permanent breakpoints.  */\n+  scoped_restore restore_memory\n+    = make_scoped_restore_show_memory_breakpoints (0);\n+\n+  if (target_read_memory (address, target_mem, PPC_INSN_SIZE) == 0)\n+    {\n+      uint32_t insn = (uint32_t) extract_unsigned_integer\n+        (target_mem, PPC_INSN_SIZE, gdbarch_byte_order_for_code (gdbarch));\n+\n+      /* Check if INSN is a TW, TWI, TD or TDI instruction.  There\n+         are multiple choices of such instructions with different registers\n+         and / or immediate values but they all cause a break. */\n+      if (is_tw_insn (insn) || is_twi_insn (insn) || is_td_insn (insn)\n+          || is_tdi_insn (insn))\n+        return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Initialize the current architecture based on INFO.  If possible, re-use an\n    architecture from ARCHES, which is a list of architectures already created\n    during this debugging session.\n@@ -7109,6 +7172,8 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t\t\t\t       rs6000_breakpoint::kind_from_pc);\n   set_gdbarch_sw_breakpoint_from_kind (gdbarch,\n \t\t\t\t       rs6000_breakpoint::bp_from_kind);\n+  set_gdbarch_program_breakpoint_here_p (gdbarch,\n+                                         rs6000_program_breakpoint_here_p);\n \n   /* The value of symbols of type N_SO and N_FUN maybe null when\n      it shouldn't be.  */"
    },
    {
      "sha": "57a683d1203191ee77ac00cf5eec7a2247225308",
      "filename": "gdb/testsuite/gdb.arch/powerpc-trap.exp",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/testsuite/gdb.arch/powerpc-trap.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/testsuite/gdb.arch/powerpc-trap.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-trap.exp?ref=2bd64d21094f9527c9a6019f668c16ca897b2631",
      "patch": "@@ -0,0 +1,72 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+#\n+# This file is part of the gdb testsuite.\n+\n+# Test if GDB stops at various trap instructions inserted into\n+# the code.\n+\n+if { [istarget powerpc-*] } {\n+   standard_testfile powerpc-trap.s\n+   # Number of expected SIGTRAPs to get.  This needs to be kept in sync\n+   # with the source file powerpc-trap.s.\n+   set expected_traps 3\n+} elseif {[istarget powerpc64*] } {\n+   standard_testfile powerpc64-trap.s\n+   # Number of expected SIGTRAPs to get.  This needs to be kept in sync\n+   # with the source file powerpc64-trap.s.\n+   set expected_traps 5\n+} else {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return\n+}\n+\n+if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n+    return -1\n+}\n+\n+if {![runto_main]} {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+set keep_going 1\n+set count 0\n+\n+while {$keep_going} {\n+    set keep_going 0\n+\n+    # Continue to next program breakpoint instruction.\n+    gdb_test_multiple \"continue\" \"trap instruction $count causes SIGTRAP\" {\n+\t-re \"Program received signal SIGTRAP, Trace/breakpoint trap.*$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\n+\t    # Advance PC to next instruction\n+\t    gdb_test \"set \\$pc = \\$pc + 4\" \"\" \"advance past trap instruction $count\"\n+\n+\t    incr count\n+\t    if {$count < $expected_traps} {\n+\t    \tset keep_going 1\n+\t    }\n+\t}\n+    }\n+}\n+\n+# Verify we stopped at the expected number of SIGTRAP's.\n+gdb_assert {$count == $expected_traps} \"all trap instructions triggered\"\n+\n+# One last continue to reach the end of the test, to make sure we don't get\n+# another SIGTRAP.\n+gdb_test \"continue\" \"exited normally.*\" \"continue to end\""
    },
    {
      "sha": "b03176f747ec6db8f7544a1321a8a6b186934d41",
      "filename": "gdb/testsuite/gdb.arch/powerpc-trap.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/testsuite/gdb.arch/powerpc-trap.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/testsuite/gdb.arch/powerpc-trap.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-trap.s?ref=2bd64d21094f9527c9a6019f668c16ca897b2631",
      "patch": "@@ -0,0 +1,31 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>. */\n+\n+/* To test if GDB stops at various trap instructions inserted into\n+   the code.  */\n+\n+.global main\n+.type main,function\n+main:\n+  ori 0, 0, 0\n+  trap\n+  tw  12, 2, 2\n+  twi 31, 3, 3\n+  ori 0, 0, 0\n+  li  3, 0\n+  blr\n+"
    },
    {
      "sha": "2272b42edc2a5084a3abef3b49fad78f73796fb6",
      "filename": "gdb/testsuite/gdb.arch/powerpc64-trap.s",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/testsuite/gdb.arch/powerpc64-trap.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bd64d21094f9527c9a6019f668c16ca897b2631/gdb/testsuite/gdb.arch/powerpc64-trap.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc64-trap.s?ref=2bd64d21094f9527c9a6019f668c16ca897b2631",
      "patch": "@@ -0,0 +1,33 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>. */\n+\n+/* To test if GDB stops at various trap instructions inserted into\n+   the code.  */\n+\n+.global main\n+.type main,function\n+main:\n+  ori 0, 0, 0\n+  trap\n+  tw  12, 2, 2\n+  twi 31, 3, 3\n+  td  12, 2, 2\n+  tdi 31, 3, 3\n+  ori 0, 0, 0\n+  li  3, 0\n+  blr\n+"
    }
  ]
}