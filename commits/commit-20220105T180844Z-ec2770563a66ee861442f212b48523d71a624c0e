{
  "sha": "ec2770563a66ee861442f212b48523d71a624c0e",
  "node_id": "C_kwDOANOeidoAKGVjMjc3MDU2M2E2NmVlODYxNDQyZjIxMmI0ODUyM2Q3MWE2MjRjMGU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-26T20:37:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-05T18:08:44Z"
    },
    "message": "Use filtered output in target-descriptions.c\n\ntarget-descriptions.c uses unfiltered output.  However, if you happen\nto invoke this command interactively, it's probably better for it to\nuse filtering.  For non-interactive use, this doesn't matter.",
    "tree": {
      "sha": "fe2e22dbbedd14bca6607526ba4f7cf79c251489",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fe2e22dbbedd14bca6607526ba4f7cf79c251489"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ec2770563a66ee861442f212b48523d71a624c0e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec2770563a66ee861442f212b48523d71a624c0e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ec2770563a66ee861442f212b48523d71a624c0e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec2770563a66ee861442f212b48523d71a624c0e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1ea4cacd4ac309cdcd13184d225190c80d628ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1ea4cacd4ac309cdcd13184d225190c80d628ee",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1ea4cacd4ac309cdcd13184d225190c80d628ee"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 76,
    "deletions": 76
  },
  "files": [
    {
      "sha": "282729df9e6919adbe161147aec56e81d918f17d",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 76,
      "deletions": 76,
      "changes": 152,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec2770563a66ee861442f212b48523d71a624c0e/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec2770563a66ee861442f212b48523d71a624c0e/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=ec2770563a66ee861442f212b48523d71a624c0e",
      "patch": "@@ -1347,7 +1347,7 @@ class print_c_tdesc : public tdesc_element_visitor\n     *outp = '\\0';\n \n     /* Standard boilerplate.  */\n-    printf_unfiltered (\"/* THIS FILE IS GENERATED.  \"\n+    printf_filtered (\"/* THIS FILE IS GENERATED.  \"\n \t\t       \"-*- buffer-read-only: t -*- vi\"\n \t\t       \":set ro:\\n\");\n   }\n@@ -1359,65 +1359,65 @@ class print_c_tdesc : public tdesc_element_visitor\n \n   void visit_pre (const target_desc *e) override\n   {\n-    printf_unfiltered (\"  Original: %s */\\n\\n\",\n-\t\t       lbasename (m_filename_after_features.c_str ()));\n-\n-    printf_unfiltered (\"#include \\\"defs.h\\\"\\n\");\n-    printf_unfiltered (\"#include \\\"osabi.h\\\"\\n\");\n-    printf_unfiltered (\"#include \\\"target-descriptions.h\\\"\\n\");\n-    printf_unfiltered (\"\\n\");\n-\n-    printf_unfiltered (\"struct target_desc *tdesc_%s;\\n\", m_function);\n-    printf_unfiltered (\"static void\\n\");\n-    printf_unfiltered (\"initialize_tdesc_%s (void)\\n\", m_function);\n-    printf_unfiltered (\"{\\n\");\n-    printf_unfiltered\n+    printf_filtered (\"  Original: %s */\\n\\n\",\n+\t\t     lbasename (m_filename_after_features.c_str ()));\n+\n+    printf_filtered (\"#include \\\"defs.h\\\"\\n\");\n+    printf_filtered (\"#include \\\"osabi.h\\\"\\n\");\n+    printf_filtered (\"#include \\\"target-descriptions.h\\\"\\n\");\n+    printf_filtered (\"\\n\");\n+\n+    printf_filtered (\"struct target_desc *tdesc_%s;\\n\", m_function);\n+    printf_filtered (\"static void\\n\");\n+    printf_filtered (\"initialize_tdesc_%s (void)\\n\", m_function);\n+    printf_filtered (\"{\\n\");\n+    printf_filtered\n       (\"  target_desc_up result = allocate_target_description ();\\n\");\n \n     if (tdesc_architecture (e) != NULL)\n       {\n-\tprintf_unfiltered\n+\tprintf_filtered\n \t  (\"  set_tdesc_architecture (result.get (), bfd_scan_arch (\\\"%s\\\"));\\n\",\n \t   tdesc_architecture (e)->printable_name);\n-\tprintf_unfiltered (\"\\n\");\n+\tprintf_filtered (\"\\n\");\n       }\n     if (tdesc_osabi (e) > GDB_OSABI_UNKNOWN\n \t&& tdesc_osabi (e) < GDB_OSABI_INVALID)\n       {\n-\tprintf_unfiltered\n+\tprintf_filtered\n \t  (\"  set_tdesc_osabi (result.get (), osabi_from_tdesc_string (\\\"%s\\\"));\\n\",\n \t   gdbarch_osabi_name (tdesc_osabi (e)));\n-\tprintf_unfiltered (\"\\n\");\n+\tprintf_filtered (\"\\n\");\n       }\n \n     for (const tdesc_compatible_info_up &compatible : e->compatible)\n-      printf_unfiltered\n+      printf_filtered\n \t(\"  tdesc_add_compatible (result.get (), bfd_scan_arch (\\\"%s\\\"));\\n\",\n \t compatible->arch ()->printable_name);\n \n     if (!e->compatible.empty ())\n-      printf_unfiltered (\"\\n\");\n+      printf_filtered (\"\\n\");\n \n     for (const property &prop : e->properties)\n-      printf_unfiltered (\"  set_tdesc_property (result.get (), \\\"%s\\\", \\\"%s\\\");\\n\",\n-\t\t\t prop.key.c_str (), prop.value.c_str ());\n+      printf_filtered (\"  set_tdesc_property (result.get (), \\\"%s\\\", \\\"%s\\\");\\n\",\n+\t\t       prop.key.c_str (), prop.value.c_str ());\n \n-    printf_unfiltered (\"  struct tdesc_feature *feature;\\n\");\n+    printf_filtered (\"  struct tdesc_feature *feature;\\n\");\n   }\n \n   void visit_pre (const tdesc_feature *e) override\n   {\n-    printf_unfiltered (\"\\n  feature = tdesc_create_feature (result.get (), \\\"%s\\\");\\n\",\n-\t\t       e->name.c_str ());\n+    printf_filtered (\"\\n  feature = tdesc_create_feature (result.get (), \\\"%s\\\");\\n\",\n+\t\t     e->name.c_str ());\n   }\n \n   void visit_post (const tdesc_feature *e) override\n   {}\n \n   void visit_post (const target_desc *e) override\n   {\n-    printf_unfiltered (\"\\n  tdesc_%s = result.release ();\\n\", m_function);\n-    printf_unfiltered (\"}\\n\");\n+    printf_filtered (\"\\n  tdesc_%s = result.release ();\\n\", m_function);\n+    printf_filtered (\"}\\n\");\n   }\n \n   void visit (const tdesc_type_builtin *type) override\n@@ -1429,25 +1429,25 @@ class print_c_tdesc : public tdesc_element_visitor\n   {\n     if (!m_printed_element_type)\n       {\n-\tprintf_unfiltered (\"  tdesc_type *element_type;\\n\");\n+\tprintf_filtered (\"  tdesc_type *element_type;\\n\");\n \tm_printed_element_type = true;\n       }\n \n-    printf_unfiltered\n+    printf_filtered\n       (\"  element_type = tdesc_named_type (feature, \\\"%s\\\");\\n\",\n        type->element_type->name.c_str ());\n-    printf_unfiltered\n+    printf_filtered\n       (\"  tdesc_create_vector (feature, \\\"%s\\\", element_type, %d);\\n\",\n        type->name.c_str (), type->count);\n \n-    printf_unfiltered (\"\\n\");\n+    printf_filtered (\"\\n\");\n   }\n \n   void visit (const tdesc_type_with_fields *type) override\n   {\n     if (!m_printed_type_with_fields)\n       {\n-\tprintf_unfiltered (\"  tdesc_type_with_fields *type_with_fields;\\n\");\n+\tprintf_filtered (\"  tdesc_type_with_fields *type_with_fields;\\n\");\n \tm_printed_type_with_fields = true;\n       }\n \n@@ -1457,16 +1457,16 @@ class print_c_tdesc : public tdesc_element_visitor\n       case TDESC_TYPE_FLAGS:\n \tif (type->kind == TDESC_TYPE_STRUCT)\n \t  {\n-\t    printf_unfiltered\n+\t    printf_filtered\n \t      (\"  type_with_fields = tdesc_create_struct (feature, \\\"%s\\\");\\n\",\n \t       type->name.c_str ());\n \t    if (type->size != 0)\n-\t      printf_unfiltered\n+\t      printf_filtered\n \t\t(\"  tdesc_set_struct_size (type_with_fields, %d);\\n\", type->size);\n \t  }\n \telse\n \t  {\n-\t    printf_unfiltered\n+\t    printf_filtered\n \t      (\"  type_with_fields = tdesc_create_flags (feature, \\\"%s\\\", %d);\\n\",\n \t       type->name.c_str (), type->size);\n \t  }\n@@ -1485,15 +1485,15 @@ class print_c_tdesc : public tdesc_element_visitor\n \t\tif (f.type->kind == TDESC_TYPE_BOOL)\n \t\t  {\n \t\t    gdb_assert (f.start == f.end);\n-\t\t    printf_unfiltered\n+\t\t    printf_filtered\n \t\t      (\"  tdesc_add_flag (type_with_fields, %d, \\\"%s\\\");\\n\",\n \t\t       f.start, f.name.c_str ());\n \t\t  }\n \t\telse if ((type->size == 4 && f.type->kind == TDESC_TYPE_UINT32)\n \t\t\t || (type->size == 8\n \t\t\t     && f.type->kind == TDESC_TYPE_UINT64))\n \t\t  {\n-\t\t    printf_unfiltered\n+\t\t    printf_filtered\n \t\t      (\"  tdesc_add_bitfield (type_with_fields, \\\"%s\\\", %d, %d);\\n\",\n \t\t       f.name.c_str (), f.start, f.end);\n \t\t  }\n@@ -1502,7 +1502,7 @@ class print_c_tdesc : public tdesc_element_visitor\n \t\t    printf_field_type_assignment\n \t\t      (\"tdesc_named_type (feature, \\\"%s\\\");\\n\",\n \t\t       type_name);\n-\t\t    printf_unfiltered\n+\t\t    printf_filtered\n \t\t      (\"  tdesc_add_typed_bitfield (type_with_fields, \\\"%s\\\",\"\n \t\t       \" %d, %d, field_type);\\n\",\n \t\t       f.name.c_str (), f.start, f.end);\n@@ -1514,51 +1514,51 @@ class print_c_tdesc : public tdesc_element_visitor\n \t\tgdb_assert (type->kind == TDESC_TYPE_STRUCT);\n \t\tprintf_field_type_assignment\n \t\t  (\"tdesc_named_type (feature, \\\"%s\\\");\\n\", type_name);\n-\t\tprintf_unfiltered\n+\t\tprintf_filtered\n \t\t  (\"  tdesc_add_field (type_with_fields, \\\"%s\\\", field_type);\\n\",\n \t\t   f.name.c_str ());\n \t      }\n \t  }\n \tbreak;\n       case TDESC_TYPE_UNION:\n-\tprintf_unfiltered\n+\tprintf_filtered\n \t  (\"  type_with_fields = tdesc_create_union (feature, \\\"%s\\\");\\n\",\n \t   type->name.c_str ());\n \tfor (const tdesc_type_field &f : type->fields)\n \t  {\n \t    printf_field_type_assignment\n \t      (\"tdesc_named_type (feature, \\\"%s\\\");\\n\", f.type->name.c_str ());\n-\t    printf_unfiltered\n+\t    printf_filtered\n \t      (\"  tdesc_add_field (type_with_fields, \\\"%s\\\", field_type);\\n\",\n \t       f.name.c_str ());\n \t  }\n \tbreak;\n       case TDESC_TYPE_ENUM:\n-\tprintf_unfiltered\n+\tprintf_filtered\n \t  (\"  type_with_fields = tdesc_create_enum (feature, \\\"%s\\\", %d);\\n\",\n \t   type->name.c_str (), type->size);\n \tfor (const tdesc_type_field &f : type->fields)\n-\t  printf_unfiltered\n+\t  printf_filtered\n \t    (\"  tdesc_add_enum_value (type_with_fields, %d, \\\"%s\\\");\\n\",\n \t     f.start, f.name.c_str ());\n \tbreak;\n       default:\n \terror (_(\"C output is not supported type \\\"%s\\\".\"), type->name.c_str ());\n       }\n \n-    printf_unfiltered (\"\\n\");\n+    printf_filtered (\"\\n\");\n   }\n \n   void visit (const tdesc_reg *reg) override\n   {\n-    printf_unfiltered (\"  tdesc_create_reg (feature, \\\"%s\\\", %ld, %d, \",\n-\t\t       reg->name.c_str (), reg->target_regnum,\n-\t\t       reg->save_restore);\n+    printf_filtered (\"  tdesc_create_reg (feature, \\\"%s\\\", %ld, %d, \",\n+\t\t     reg->name.c_str (), reg->target_regnum,\n+\t\t     reg->save_restore);\n     if (!reg->group.empty ())\n-      printf_unfiltered (\"\\\"%s\\\", \", reg->group.c_str ());\n+      printf_filtered (\"\\\"%s\\\", \", reg->group.c_str ());\n     else\n-      printf_unfiltered (\"NULL, \");\n-    printf_unfiltered (\"%d, \\\"%s\\\");\\n\", reg->bitsize, reg->type.c_str ());\n+      printf_filtered (\"NULL, \");\n+    printf_filtered (\"%d, \\\"%s\\\");\\n\", reg->bitsize, reg->type.c_str ());\n   }\n \n protected:\n@@ -1573,15 +1573,15 @@ class print_c_tdesc : public tdesc_element_visitor\n   {\n     if (!m_printed_field_type)\n       {\n-\tprintf_unfiltered (\"  tdesc_type *field_type;\\n\");\n+\tprintf_filtered (\"  tdesc_type *field_type;\\n\");\n \tm_printed_field_type = true;\n       }\n \n-    printf_unfiltered (\"  field_type = \");\n+    printf_filtered (\"  field_type = \");\n \n     va_list args;\n     va_start (args, fmt);\n-    vprintf_unfiltered (fmt, args);\n+    vprintf_filtered (fmt, args);\n     va_end (args);\n   }\n \n@@ -1613,11 +1613,11 @@ class print_c_feature : public print_c_tdesc\n \n   void visit_pre (const target_desc *e) override\n   {\n-    printf_unfiltered (\"  Original: %s */\\n\\n\",\n-\t\t       lbasename (m_filename_after_features.c_str ()));\n+    printf_filtered (\"  Original: %s */\\n\\n\",\n+\t\t     lbasename (m_filename_after_features.c_str ()));\n \n-    printf_unfiltered (\"#include \\\"gdbsupport/tdesc.h\\\"\\n\");\n-    printf_unfiltered (\"\\n\");\n+    printf_filtered (\"#include \\\"gdbsupport/tdesc.h\\\"\\n\");\n+    printf_filtered (\"\\n\");\n   }\n \n   void visit_post (const target_desc *e) override\n@@ -1633,22 +1633,22 @@ class print_c_feature : public print_c_tdesc\n     std::replace (name.begin (), name.end (), '/', '_');\n     std::replace (name.begin (), name.end (), '-', '_');\n \n-    printf_unfiltered (\"static int\\n\");\n-    printf_unfiltered (\"create_feature_%s \", name.c_str ());\n-    printf_unfiltered (\"(struct target_desc *result, long regnum)\\n\");\n+    printf_filtered (\"static int\\n\");\n+    printf_filtered (\"create_feature_%s \", name.c_str ());\n+    printf_filtered (\"(struct target_desc *result, long regnum)\\n\");\n \n-    printf_unfiltered (\"{\\n\");\n-    printf_unfiltered (\"  struct tdesc_feature *feature;\\n\");\n+    printf_filtered (\"{\\n\");\n+    printf_filtered (\"  struct tdesc_feature *feature;\\n\");\n \n-    printf_unfiltered\n+    printf_filtered\n       (\"\\n  feature = tdesc_create_feature (result, \\\"%s\\\");\\n\",\n        e->name.c_str ());\n   }\n \n   void visit_post (const tdesc_feature *e) override\n   {\n-    printf_unfiltered (\"  return regnum;\\n\");\n-    printf_unfiltered (\"}\\n\");\n+    printf_filtered (\"  return regnum;\\n\");\n+    printf_filtered (\"}\\n\");\n   }\n \n   void visit (const tdesc_reg *reg) override\n@@ -1681,27 +1681,27 @@ class print_c_feature : public print_c_tdesc\n \t  and also print the message so that it can be saved in the\n \t  generated c file.  */\n \n-\tprintf_unfiltered (\"ERROR: \\\"regnum\\\" attribute %ld \",\n-\t\t\t   reg->target_regnum);\n-\tprintf_unfiltered (\"is not the largest number (%d).\\n\",\n-\t\t\t   m_next_regnum);\n+\tprintf_filtered (\"ERROR: \\\"regnum\\\" attribute %ld \",\n+\t\t\t reg->target_regnum);\n+\tprintf_filtered (\"is not the largest number (%d).\\n\",\n+\t\t\t m_next_regnum);\n \terror (_(\"\\\"regnum\\\" attribute %ld is not the largest number (%d).\"),\n \t       reg->target_regnum, m_next_regnum);\n       }\n \n     if (reg->target_regnum > m_next_regnum)\n       {\n-\tprintf_unfiltered (\"  regnum = %ld;\\n\", reg->target_regnum);\n+\tprintf_filtered (\"  regnum = %ld;\\n\", reg->target_regnum);\n \tm_next_regnum = reg->target_regnum;\n       }\n \n-    printf_unfiltered (\"  tdesc_create_reg (feature, \\\"%s\\\", regnum++, %d, \",\n-\t\t       reg->name.c_str (), reg->save_restore);\n+    printf_filtered (\"  tdesc_create_reg (feature, \\\"%s\\\", regnum++, %d, \",\n+\t\t     reg->name.c_str (), reg->save_restore);\n     if (!reg->group.empty ())\n-      printf_unfiltered (\"\\\"%s\\\", \", reg->group.c_str ());\n+      printf_filtered (\"\\\"%s\\\", \", reg->group.c_str ());\n     else\n-      printf_unfiltered (\"NULL, \");\n-    printf_unfiltered (\"%d, \\\"%s\\\");\\n\", reg->bitsize, reg->type.c_str ());\n+      printf_filtered (\"NULL, \");\n+    printf_filtered (\"%d, \\\"%s\\\");\\n\", reg->bitsize, reg->type.c_str ());\n \n     m_next_regnum++;\n   }\n@@ -1858,7 +1858,7 @@ maint_print_xml_tdesc_cmd (const char *args, int from_tty)\n   std::string buf;\n   print_xml_feature v (&buf);\n   tdesc->accept (v);\n-  puts_unfiltered (buf.c_str ());\n+  puts_filtered (buf.c_str ());\n }\n \n namespace selftests {"
    }
  ]
}