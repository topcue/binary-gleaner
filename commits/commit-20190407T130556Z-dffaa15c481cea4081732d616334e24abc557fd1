{
  "sha": "dffaa15c481cea4081732d616334e24abc557fd1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGZmYWExNWM0ODFjZWE0MDgxNzMyZDYxNjMzNGUyNGFiYzU1N2ZkMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-07T11:12:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-07T13:05:56Z"
    },
    "message": "PR24421, Wrong brackets in opcodes/arm-dis.c\n\n\tPR 24421\n\t* arm-dis.c (print_insn_coprocessor): Correct bracket placement.\n\t(print_insn_neon, print_insn_arm): Likewise.",
    "tree": {
      "sha": "e1d6f04880c4caf943901dd037bd404715b19049",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1d6f04880c4caf943901dd037bd404715b19049"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dffaa15c481cea4081732d616334e24abc557fd1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dffaa15c481cea4081732d616334e24abc557fd1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dffaa15c481cea4081732d616334e24abc557fd1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dffaa15c481cea4081732d616334e24abc557fd1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "07ffcfecac22d21774a110db0f65f0387c8f1102",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07ffcfecac22d21774a110db0f65f0387c8f1102",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/07ffcfecac22d21774a110db0f65f0387c8f1102"
    }
  ],
  "stats": {
    "total": 432,
    "additions": 219,
    "deletions": 213
  },
  "files": [
    {
      "sha": "0fb4e0d3abc4e454887113963ac74515e168d296",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dffaa15c481cea4081732d616334e24abc557fd1/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dffaa15c481cea4081732d616334e24abc557fd1/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=dffaa15c481cea4081732d616334e24abc557fd1",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-07  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24421\n+\t* arm-dis.c (print_insn_coprocessor): Correct bracket placement.\n+\t(print_insn_neon, print_insn_arm): Likewise.\n+\n 2019-04-05  Xuepeng Guo  <xuepeng.guo@intel.com>\n \n \t* i386-dis-evex.h (evex_table): Updated to support BF16"
    },
    {
      "sha": "34acea240efe2a77ec1abdc7e241a60a07e74bed",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 213,
      "deletions": 213,
      "changes": 426,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dffaa15c481cea4081732d616334e24abc557fd1/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dffaa15c481cea4081732d616334e24abc557fd1/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=dffaa15c481cea4081732d616334e24abc557fd1",
      "patch": "@@ -3569,7 +3569,7 @@ print_insn_coprocessor (bfd_vma pc,\n \t\t\tinfo->print_address_func (offset + pc\n \t\t\t\t\t\t  + info->bytes_per_chunk * 2\n \t\t\t\t\t\t  - (pc & 3),\n-\t\t\t\t \t\t  info);\n+\t\t\t\t\t\t  info);\n \t\t      }\n \t\t  }\n \t\t  break;\n@@ -3836,190 +3836,190 @@ print_insn_coprocessor (bfd_vma pc,\n \t\t      default:\n \t\t\tabort ();\n \t\t      }\n-\t\t    break;\n-\n-\t\t  case 'y':\n-\t\t  case 'z':\n-\t\t    {\n-\t\t      int single = *c++ == 'y';\n-\t\t      int regno;\n+\t\t  }\n+\t\t  break;\n \n-\t\t      switch (*c)\n-\t\t\t{\n-\t\t\tcase '4': /* Sm pair */\n-\t\t\tcase '0': /* Sm, Dm */\n-\t\t\t  regno = given & 0x0000000f;\n-\t\t\t  if (single)\n-\t\t\t    {\n-\t\t\t      regno <<= 1;\n-\t\t\t      regno += (given >> 5) & 1;\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    regno += ((given >> 5) & 1) << 4;\n-\t\t\t  break;\n+\t\tcase 'y':\n+\t\tcase 'z':\n+\t\t  {\n+\t\t    int single = *c++ == 'y';\n+\t\t    int regno;\n \n-\t\t\tcase '1': /* Sd, Dd */\n-\t\t\t  regno = (given >> 12) & 0x0000000f;\n-\t\t\t  if (single)\n-\t\t\t    {\n-\t\t\t      regno <<= 1;\n-\t\t\t      regno += (given >> 22) & 1;\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    regno += ((given >> 22) & 1) << 4;\n-\t\t\t  break;\n+\t\t    switch (*c)\n+\t\t      {\n+\t\t      case '4': /* Sm pair */\n+\t\t      case '0': /* Sm, Dm */\n+\t\t\tregno = given & 0x0000000f;\n+\t\t\tif (single)\n+\t\t\t  {\n+\t\t\t    regno <<= 1;\n+\t\t\t    regno += (given >> 5) & 1;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  regno += ((given >> 5) & 1) << 4;\n+\t\t\tbreak;\n \n-\t\t\tcase '2': /* Sn, Dn */\n-\t\t\t  regno = (given >> 16) & 0x0000000f;\n-\t\t\t  if (single)\n-\t\t\t    {\n-\t\t\t      regno <<= 1;\n-\t\t\t      regno += (given >> 7) & 1;\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    regno += ((given >> 7) & 1) << 4;\n-\t\t\t  break;\n+\t\t      case '1': /* Sd, Dd */\n+\t\t\tregno = (given >> 12) & 0x0000000f;\n+\t\t\tif (single)\n+\t\t\t  {\n+\t\t\t    regno <<= 1;\n+\t\t\t    regno += (given >> 22) & 1;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  regno += ((given >> 22) & 1) << 4;\n+\t\t\tbreak;\n \n-\t\t\tcase '3': /* List */\n-\t\t\t  func (stream, \"{\");\n-\t\t\t  regno = (given >> 12) & 0x0000000f;\n-\t\t\t  if (single)\n-\t\t\t    {\n-\t\t\t      regno <<= 1;\n-\t\t\t      regno += (given >> 22) & 1;\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    regno += ((given >> 22) & 1) << 4;\n-\t\t\t  break;\n+\t\t      case '2': /* Sn, Dn */\n+\t\t\tregno = (given >> 16) & 0x0000000f;\n+\t\t\tif (single)\n+\t\t\t  {\n+\t\t\t    regno <<= 1;\n+\t\t\t    regno += (given >> 7) & 1;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  regno += ((given >> 7) & 1) << 4;\n+\t\t\tbreak;\n \n-\t\t\tdefault:\n-\t\t\t  abort ();\n-\t\t\t}\n+\t\t      case '3': /* List */\n+\t\t\tfunc (stream, \"{\");\n+\t\t\tregno = (given >> 12) & 0x0000000f;\n+\t\t\tif (single)\n+\t\t\t  {\n+\t\t\t    regno <<= 1;\n+\t\t\t    regno += (given >> 22) & 1;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  regno += ((given >> 22) & 1) << 4;\n+\t\t\tbreak;\n \n-\t\t      func (stream, \"%c%d\", single ? 's' : 'd', regno);\n+\t\t      default:\n+\t\t\tabort ();\n+\t\t      }\n \n-\t\t      if (*c == '3')\n-\t\t\t{\n-\t\t\t  int count = given & 0xff;\n+\t\t    func (stream, \"%c%d\", single ? 's' : 'd', regno);\n \n-\t\t\t  if (single == 0)\n-\t\t\t    count >>= 1;\n+\t\t    if (*c == '3')\n+\t\t      {\n+\t\t\tint count = given & 0xff;\n \n-\t\t\t  if (--count)\n-\t\t\t    {\n-\t\t\t      func (stream, \"-%c%d\",\n-\t\t\t\t    single ? 's' : 'd',\n-\t\t\t\t    regno + count);\n-\t\t\t    }\n+\t\t\tif (single == 0)\n+\t\t\t  count >>= 1;\n \n-\t\t\t  func (stream, \"}\");\n-\t\t\t}\n-\t\t      else if (*c == '4')\n-\t\t\tfunc (stream, \", %c%d\", single ? 's' : 'd',\n-\t\t\t      regno + 1);\n-\t\t    }\n-\t\t    break;\n+\t\t\tif (--count)\n+\t\t\t  {\n+\t\t\t    func (stream, \"-%c%d\",\n+\t\t\t\t  single ? 's' : 'd',\n+\t\t\t\t  regno + count);\n+\t\t\t  }\n \n-\t\t  case 'L':\n-\t\t    switch (given & 0x00400100)\n-\t\t      {\n-\t\t      case 0x00000000: func (stream, \"b\"); break;\n-\t\t      case 0x00400000: func (stream, \"h\"); break;\n-\t\t      case 0x00000100: func (stream, \"w\"); break;\n-\t\t      case 0x00400100: func (stream, \"d\"); break;\n-\t\t      default:\n-\t\t\tbreak;\n+\t\t\tfunc (stream, \"}\");\n \t\t      }\n-\t\t    break;\n+\t\t    else if (*c == '4')\n+\t\t      func (stream, \", %c%d\", single ? 's' : 'd',\n+\t\t\t    regno + 1);\n+\t\t  }\n+\t\t  break;\n \n-\t\t  case 'Z':\n+\t\tcase 'L':\n+\t\t  switch (given & 0x00400100)\n \t\t    {\n-\t\t      /* given (20, 23) | given (0, 3) */\n-\t\t      value = ((given >> 16) & 0xf0) | (given & 0xf);\n-\t\t      func (stream, \"%d\", (int) value);\n+\t\t    case 0x00000000: func (stream, \"b\"); break;\n+\t\t    case 0x00400000: func (stream, \"h\"); break;\n+\t\t    case 0x00000100: func (stream, \"w\"); break;\n+\t\t    case 0x00400100: func (stream, \"d\"); break;\n+\t\t    default:\n+\t\t      break;\n \t\t    }\n-\t\t    break;\n+\t\t  break;\n \n-\t\t  case 'l':\n-\t\t    /* This is like the 'A' operator, except that if\n-\t\t       the width field \"M\" is zero, then the offset is\n-\t\t       *not* multiplied by four.  */\n-\t\t    {\n-\t\t      int offset = given & 0xff;\n-\t\t      int multiplier = (given & 0x00000100) ? 4 : 1;\n+\t\tcase 'Z':\n+\t\t  {\n+\t\t    /* given (20, 23) | given (0, 3) */\n+\t\t    value = ((given >> 16) & 0xf0) | (given & 0xf);\n+\t\t    func (stream, \"%d\", (int) value);\n+\t\t  }\n+\t\t  break;\n \n-\t\t      func (stream, \"[%s\", arm_regnames [(given >> 16) & 0xf]);\n+\t\tcase 'l':\n+\t\t  /* This is like the 'A' operator, except that if\n+\t\t     the width field \"M\" is zero, then the offset is\n+\t\t     *not* multiplied by four.  */\n+\t\t  {\n+\t\t    int offset = given & 0xff;\n+\t\t    int multiplier = (given & 0x00000100) ? 4 : 1;\n \n-\t\t      if (multiplier > 1)\n-\t\t\t{\n-\t\t\t  value_in_comment = offset * multiplier;\n-\t\t\t  if (NEGATIVE_BIT_SET)\n-\t\t\t    value_in_comment = - value_in_comment;\n-\t\t\t}\n+\t\t    func (stream, \"[%s\", arm_regnames [(given >> 16) & 0xf]);\n \n-\t\t      if (offset)\n-\t\t\t{\n-\t\t\t  if (PRE_BIT_SET)\n-\t\t\t    func (stream, \", #%s%d]%s\",\n-\t\t\t\t  NEGATIVE_BIT_SET ? \"-\" : \"\",\n-\t\t\t\t  offset * multiplier,\n-\t\t\t\t  WRITEBACK_BIT_SET ? \"!\" : \"\");\n-\t\t\t  else\n-\t\t\t    func (stream, \"], #%s%d\",\n-\t\t\t\t  NEGATIVE_BIT_SET ? \"-\" : \"\",\n-\t\t\t\t  offset * multiplier);\n-\t\t\t}\n-\t\t      else\n-\t\t\tfunc (stream, \"]\");\n-\t\t    }\n-\t\t    break;\n+\t\t    if (multiplier > 1)\n+\t\t      {\n+\t\t\tvalue_in_comment = offset * multiplier;\n+\t\t\tif (NEGATIVE_BIT_SET)\n+\t\t\t  value_in_comment = - value_in_comment;\n+\t\t      }\n \n-\t\t  case 'r':\n-\t\t    {\n-\t\t      int imm4 = (given >> 4) & 0xf;\n-\t\t      int puw_bits = ((given >> 22) & 6) | ((given >> W_BIT) & 1);\n-\t\t      int ubit = ! NEGATIVE_BIT_SET;\n-\t\t      const char *rm = arm_regnames [given & 0xf];\n-\t\t      const char *rn = arm_regnames [(given >> 16) & 0xf];\n+\t\t    if (offset)\n+\t\t      {\n+\t\t\tif (PRE_BIT_SET)\n+\t\t\t  func (stream, \", #%s%d]%s\",\n+\t\t\t\tNEGATIVE_BIT_SET ? \"-\" : \"\",\n+\t\t\t\toffset * multiplier,\n+\t\t\t\tWRITEBACK_BIT_SET ? \"!\" : \"\");\n+\t\t\telse\n+\t\t\t  func (stream, \"], #%s%d\",\n+\t\t\t\tNEGATIVE_BIT_SET ? \"-\" : \"\",\n+\t\t\t\toffset * multiplier);\n+\t\t      }\n+\t\t    else\n+\t\t      func (stream, \"]\");\n+\t\t  }\n+\t\t  break;\n \n-\t\t      switch (puw_bits)\n-\t\t\t{\n-\t\t\tcase 1:\n-\t\t\tcase 3:\n-\t\t\t  func (stream, \"[%s], %c%s\", rn, ubit ? '+' : '-', rm);\n-\t\t\t  if (imm4)\n-\t\t\t    func (stream, \", lsl #%d\", imm4);\n-\t\t\t  break;\n+\t\tcase 'r':\n+\t\t  {\n+\t\t    int imm4 = (given >> 4) & 0xf;\n+\t\t    int puw_bits = ((given >> 22) & 6) | ((given >> W_BIT) & 1);\n+\t\t    int ubit = ! NEGATIVE_BIT_SET;\n+\t\t    const char *rm = arm_regnames [given & 0xf];\n+\t\t    const char *rn = arm_regnames [(given >> 16) & 0xf];\n \n-\t\t\tcase 4:\n-\t\t\tcase 5:\n-\t\t\tcase 6:\n-\t\t\tcase 7:\n-\t\t\t  func (stream, \"[%s, %c%s\", rn, ubit ? '+' : '-', rm);\n-\t\t\t  if (imm4 > 0)\n-\t\t\t    func (stream, \", lsl #%d\", imm4);\n-\t\t\t  func (stream, \"]\");\n-\t\t\t  if (puw_bits == 5 || puw_bits == 7)\n-\t\t\t    func (stream, \"!\");\n-\t\t\t  break;\n+\t\t    switch (puw_bits)\n+\t\t      {\n+\t\t      case 1:\n+\t\t      case 3:\n+\t\t\tfunc (stream, \"[%s], %c%s\", rn, ubit ? '+' : '-', rm);\n+\t\t\tif (imm4)\n+\t\t\t  func (stream, \", lsl #%d\", imm4);\n+\t\t\tbreak;\n \n-\t\t\tdefault:\n-\t\t\t  func (stream, \"INVALID\");\n-\t\t\t}\n-\t\t    }\n-\t\t    break;\n+\t\t      case 4:\n+\t\t      case 5:\n+\t\t      case 6:\n+\t\t      case 7:\n+\t\t\tfunc (stream, \"[%s, %c%s\", rn, ubit ? '+' : '-', rm);\n+\t\t\tif (imm4 > 0)\n+\t\t\t  func (stream, \", lsl #%d\", imm4);\n+\t\t\tfunc (stream, \"]\");\n+\t\t\tif (puw_bits == 5 || puw_bits == 7)\n+\t\t\t  func (stream, \"!\");\n+\t\t\tbreak;\n \n-\t\t  case 'i':\n-\t\t    {\n-\t\t      long imm5;\n-\t\t      imm5 = ((given & 0x100) >> 4) | (given & 0xf);\n-\t\t      func (stream, \"%ld\", (imm5 == 0) ? 32 : imm5);\n-\t\t    }\n-\t\t    break;\n+\t\t      default:\n+\t\t\tfunc (stream, \"INVALID\");\n+\t\t      }\n+\t\t  }\n+\t\t  break;\n \n-\t\t  default:\n-\t\t    abort ();\n+\t\tcase 'i':\n+\t\t  {\n+\t\t    long imm5;\n+\t\t    imm5 = ((given & 0x100) >> 4) | (given & 0xf);\n+\t\t    func (stream, \"%ld\", (imm5 == 0) ? 32 : imm5);\n \t\t  }\n+\t\t  break;\n+\n+\t\tdefault:\n+\t\t  abort ();\n \t\t}\n \t    }\n \t  else\n@@ -4584,11 +4584,11 @@ print_insn_neon (struct disassemble_info *info, long given, bfd_boolean thumb)\n \t\t\t  default:\n \t\t\t    abort ();\n \t\t\t  }\n-\t\t\tbreak;\n-\n-\t\t      default:\n-\t\t\tabort ();\n \t\t      }\n+\t\t      break;\n+\n+\t\t    default:\n+\t\t      abort ();\n \t\t    }\n \t\t}\n \t      else\n@@ -5123,65 +5123,65 @@ print_insn_arm (bfd_vma pc, struct disassemble_info *info, long given)\n \t\t\t  default:\n \t\t\t    abort ();\n \t\t\t  }\n-\t\t\tbreak;\n-\n-\t\t      case 'e':\n-\t\t\t{\n-\t\t\t  int imm;\n+\t\t      }\n+\t\t      break;\n \n-\t\t\t  imm = (given & 0xf) | ((given & 0xfff00) >> 4);\n-\t\t\t  func (stream, \"%d\", imm);\n-\t\t\t  value_in_comment = imm;\n-\t\t\t}\n-\t\t\tbreak;\n+\t\t    case 'e':\n+\t\t      {\n+\t\t\tint imm;\n \n-\t\t      case 'E':\n-\t\t\t/* LSB and WIDTH fields of BFI or BFC.  The machine-\n-\t\t\t   language instruction encodes LSB and MSB.  */\n-\t\t\t{\n-\t\t\t  long msb = (given & 0x001f0000) >> 16;\n-\t\t\t  long lsb = (given & 0x00000f80) >> 7;\n-\t\t\t  long w = msb - lsb + 1;\n+\t\t\timm = (given & 0xf) | ((given & 0xfff00) >> 4);\n+\t\t\tfunc (stream, \"%d\", imm);\n+\t\t\tvalue_in_comment = imm;\n+\t\t      }\n+\t\t      break;\n \n-\t\t\t  if (w > 0)\n-\t\t\t    func (stream, \"#%lu, #%lu\", lsb, w);\n-\t\t\t  else\n-\t\t\t    func (stream, \"(invalid: %lu:%lu)\", lsb, msb);\n-\t\t\t}\n-\t\t\tbreak;\n+\t\t    case 'E':\n+\t\t      /* LSB and WIDTH fields of BFI or BFC.  The machine-\n+\t\t\t language instruction encodes LSB and MSB.  */\n+\t\t      {\n+\t\t\tlong msb = (given & 0x001f0000) >> 16;\n+\t\t\tlong lsb = (given & 0x00000f80) >> 7;\n+\t\t\tlong w = msb - lsb + 1;\n \n-\t\t      case 'R':\n-\t\t\t/* Get the PSR/banked register name.  */\n-\t\t\t{\n-\t\t\t  const char * name;\n-\t\t\t  unsigned sysm = (given & 0x004f0000) >> 16;\n+\t\t\tif (w > 0)\n+\t\t\t  func (stream, \"#%lu, #%lu\", lsb, w);\n+\t\t\telse\n+\t\t\t  func (stream, \"(invalid: %lu:%lu)\", lsb, msb);\n+\t\t      }\n+\t\t      break;\n \n-\t\t\t  sysm |= (given & 0x300) >> 4;\n-\t\t\t  name = banked_regname (sysm);\n+\t\t    case 'R':\n+\t\t      /* Get the PSR/banked register name.  */\n+\t\t      {\n+\t\t\tconst char * name;\n+\t\t\tunsigned sysm = (given & 0x004f0000) >> 16;\n \n-\t\t\t  if (name != NULL)\n-\t\t\t    func (stream, \"%s\", name);\n-\t\t\t  else\n-\t\t\t    func (stream, \"(UNDEF: %lu)\", (unsigned long) sysm);\n-\t\t\t}\n-\t\t\tbreak;\n+\t\t\tsysm |= (given & 0x300) >> 4;\n+\t\t\tname = banked_regname (sysm);\n \n-\t\t      case 'V':\n-\t\t\t/* 16-bit unsigned immediate from a MOVT or MOVW\n-\t\t\t   instruction, encoded in bits 0:11 and 15:19.  */\n-\t\t\t{\n-\t\t\t  long hi = (given & 0x000f0000) >> 4;\n-\t\t\t  long lo = (given & 0x00000fff);\n-\t\t\t  long imm16 = hi | lo;\n+\t\t\tif (name != NULL)\n+\t\t\t  func (stream, \"%s\", name);\n+\t\t\telse\n+\t\t\t  func (stream, \"(UNDEF: %lu)\", (unsigned long) sysm);\n+\t\t      }\n+\t\t      break;\n \n-\t\t\t  func (stream, \"#%lu\", imm16);\n-\t\t\t  value_in_comment = imm16;\n-\t\t\t}\n-\t\t\tbreak;\n+\t\t    case 'V':\n+\t\t      /* 16-bit unsigned immediate from a MOVT or MOVW\n+\t\t\t instruction, encoded in bits 0:11 and 15:19.  */\n+\t\t      {\n+\t\t\tlong hi = (given & 0x000f0000) >> 4;\n+\t\t\tlong lo = (given & 0x00000fff);\n+\t\t\tlong imm16 = hi | lo;\n \n-\t\t      default:\n-\t\t\tabort ();\n+\t\t\tfunc (stream, \"#%lu\", imm16);\n+\t\t\tvalue_in_comment = imm16;\n \t\t      }\n+\t\t      break;\n+\n+\t\t    default:\n+\t\t      abort ();\n \t\t    }\n \t\t}\n \t      else\n@@ -5342,7 +5342,7 @@ print_insn_thumb16 (bfd_vma pc, struct disassemble_info *info, long given)\n \t\t   mask.  */\n \t\tif ((given & (1 << ((given & 0x0700) >> 8))) == 0)\n \t\t  func (stream, \"!\");\n-\t      \tbreak;\n+\t\tbreak;\n \n \t      case 'b':\n \t\t/* Print ARM V6T2 CZB address: pc+4+6 bits.  */"
    }
  ]
}