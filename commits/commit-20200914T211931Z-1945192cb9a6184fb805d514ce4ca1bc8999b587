{
  "sha": "1945192cb9a6184fb805d514ce4ca1bc8999b587",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTk0NTE5MmNiOWE2MTg0ZmI4MDVkNTE0Y2U0Y2ExYmM4OTk5YjU4Nw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-14T20:16:57Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-14T21:19:31Z"
    },
    "message": "Rewrite valid-expr.h's internals in terms of the detection idiom (C++17/N4502)\n\nAn earlier attempt at doing this had failed (wouldn't work in GCCs\naround 4.8, IIRC), but now that I try again, it works.  I suspect that\nmy previous attempt did not use the pre C++14-safe void_t (in\ntraits.h).\n\nI want to switch to this model because:\n\n - It's the standard detection idiom that folks will learn starting\n   with C++17.\n\n - In the enum_flags unit tests, I have a static_assert that triggers\n   a warning (resulting in build error), which GCC does not suppress\n   because the warning is not being triggered in the SFINAE context.\n   Switching to the detection idiom fixes that.  Alternatively,\n   switching to the C++03-style expression-validity checking with a\n   varargs overload would allow addressing that, but I think that\n   would be going backwards idiomatically speaking.\n\n - While this patch shows a net increase of lines of code, the magic\n   being added to traits.h can be removed in a few years when we start\n   requiring C++17.\n\ngdbsupport/ChangeLog:\n\n\t* traits.h (struct nonesuch, struct detector, detected_or)\n\t(detected_or_t, is_detected, detected_t, detected_or)\n\t(detected_or_t, is_detected_exact, is_detected_convertible): New.\n\t* valid-expr.h (CHECK_VALID_EXPR_INT): Use gdb::is_detected_exact.",
    "tree": {
      "sha": "fecbaf2f67a187989992cf5673b93854f19c1e45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fecbaf2f67a187989992cf5673b93854f19c1e45"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1945192cb9a6184fb805d514ce4ca1bc8999b587",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1945192cb9a6184fb805d514ce4ca1bc8999b587",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1945192cb9a6184fb805d514ce4ca1bc8999b587",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1945192cb9a6184fb805d514ce4ca1bc8999b587/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "69896a2cd12e7819a81823430b3ece5a7c9a6973",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69896a2cd12e7819a81823430b3ece5a7c9a6973",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/69896a2cd12e7819a81823430b3ece5a7c9a6973"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 77,
    "deletions": 17
  },
  "files": [
    {
      "sha": "4858cc6b561ae46977c222eb54d118fb9723267f",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1945192cb9a6184fb805d514ce4ca1bc8999b587/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1945192cb9a6184fb805d514ce4ca1bc8999b587/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=1945192cb9a6184fb805d514ce4ca1bc8999b587",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Pedro Alves  <pedro@palves.net>\n+\n+\t* traits.h (struct nonesuch, struct detector, detected_or)\n+\t(detected_or_t, is_detected, detected_t, detected_or)\n+\t(detected_or_t, is_detected_exact, is_detected_convertible): New.\n+\t* valid-expr.h (CHECK_VALID_EXPR_INT): Use gdb::is_detected_exact.\n+\n 2020-09-10  Kamil Rytarowski  <n54@gmx.com>\n \n \t* eintr.h: New file."
    },
    {
      "sha": "93b609ac10995ad604b36e38492888f5333a9254",
      "filename": "gdbsupport/traits.h",
      "status": "modified",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1945192cb9a6184fb805d514ce4ca1bc8999b587/gdbsupport/traits.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1945192cb9a6184fb805d514ce4ca1bc8999b587/gdbsupport/traits.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/traits.h?ref=1945192cb9a6184fb805d514ce4ca1bc8999b587",
      "patch": "@@ -52,6 +52,73 @@ struct make_void { typedef void type; };\n template<typename... Ts>\n using void_t = typename make_void<Ts...>::type;\n \n+/* Implementation of the detection idiom:\n+\n+   - http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf\n+   - http://en.cppreference.com/w/cpp/experimental/is_detected\n+\n+*/\n+\n+struct nonesuch\n+{\n+  nonesuch () = delete;\n+  ~nonesuch () = delete;\n+  nonesuch (const nonesuch &) = delete;\n+  void operator= (const nonesuch &) = delete;\n+};\n+\n+namespace detection_detail {\n+/* Implementation of the detection idiom (negative case).  */\n+template<typename Default, typename AlwaysVoid,\n+\t template<typename...> class Op, typename... Args>\n+struct detector\n+{\n+  using value_t = std::false_type;\n+  using type = Default;\n+};\n+\n+/* Implementation of the detection idiom (positive case).  */\n+template<typename Default, template<typename...> class Op, typename... Args>\n+struct detector<Default, void_t<Op<Args...>>, Op, Args...>\n+{\n+  using value_t = std::true_type;\n+  using type = Op<Args...>;\n+};\n+\n+/* Detect whether Op<Args...> is a valid type, use Default if not.  */\n+template<typename Default, template<typename...> class Op,\n+\t typename... Args>\n+using detected_or = detector<Default, void, Op, Args...>;\n+\n+/* Op<Args...> if that is a valid type, otherwise Default.  */\n+template<typename Default, template<typename...> class Op,\n+\t typename... Args>\n+using detected_or_t\n+  = typename detected_or<Default, Op, Args...>::type;\n+\n+} /* detection_detail */\n+\n+template<template<typename...> class Op, typename... Args>\n+using is_detected\n+  = typename detection_detail::detector<nonesuch, void, Op, Args...>::value_t;\n+\n+template<template<typename...> class Op, typename... Args>\n+using detected_t\n+  = typename detection_detail::detector<nonesuch, void, Op, Args...>::type;\n+\n+template<typename Default, template<typename...> class Op, typename... Args>\n+using detected_or = detection_detail::detected_or<Default, Op, Args...>;\n+\n+template<typename Default, template<typename...> class Op, typename... Args>\n+using detected_or_t = typename detected_or<Default, Op, Args...>::type;\n+\n+template<typename Expected, template<typename...> class Op, typename... Args>\n+using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;\n+\n+template<typename To, template<typename...> class Op, typename... Args>\n+using is_detected_convertible\n+  = std::is_convertible<detected_t<Op, Args...>, To>;\n+\n /* A few trait helpers, mainly stolen from libstdc++.  Uppercase\n    because \"and/or\", etc. are reserved keywords.  */\n "
    },
    {
      "sha": "a22fa61134f0c497c525a27db69178fb040d6c52",
      "filename": "gdbsupport/valid-expr.h",
      "status": "modified",
      "additions": 3,
      "deletions": 17,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1945192cb9a6184fb805d514ce4ca1bc8999b587/gdbsupport/valid-expr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1945192cb9a6184fb805d514ce4ca1bc8999b587/gdbsupport/valid-expr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/valid-expr.h?ref=1945192cb9a6184fb805d514ce4ca1bc8999b587",
      "patch": "@@ -58,26 +58,12 @@\n #define CHECK_VALID_EXPR_INT(TYPENAMES, TYPES, VALID, EXPR_TYPE, EXPR)\t\\\n   namespace CONCAT (check_valid_expr, __LINE__) {\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  template<typename, typename, typename = void>\t\t\t\t\\\n-  struct is_valid_expression\t\t\t\t\t\t\\\n-    : std::false_type {};\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   template <TYPENAMES>\t\t\t\t\t\t\t\\\n-    struct is_valid_expression<TYPES, gdb::void_t<decltype (EXPR)>>\t\\\n-    : std::true_type {};\t\t\t\t\t\t\\\n+    using archetype = decltype (EXPR);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  static_assert (is_valid_expression<TYPES>::value == VALID,\t\t\\\n+  static_assert (gdb::is_detected_exact<EXPR_TYPE,\t\t\t\\\n+\t\t archetype, TYPES>::value == VALID,\t\t\t\\\n \t\t \"\");\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<TYPENAMES, typename = void>\t\t\t\t\t\\\n-  struct is_same_type\t\t\t\t\t\t\t\\\n-    : std::is_same<EXPR_TYPE, void> {};\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template <TYPENAMES>\t\t\t\t\t\t\t\\\n-    struct is_same_type<TYPES, gdb::void_t<decltype (EXPR)>>\t\t\\\n-    : std::is_same<EXPR_TYPE, decltype (EXPR)> {};\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  static_assert (is_same_type<TYPES>::value, \"\");\t\t\t\\\n   } /* namespace */\n \n /* A few convenience macros that support expressions involving a"
    }
  ]
}