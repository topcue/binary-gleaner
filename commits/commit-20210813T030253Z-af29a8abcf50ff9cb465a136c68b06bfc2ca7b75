{
  "sha": "af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWYyOWE4YWJjZjUwZmY5Y2I0NjVhMTM2YzY4YjA2YmZjMmNhN2I3NQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-13T02:20:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-13T03:02:53Z"
    },
    "message": "PR28217, Syntax error when memory region contains a hyphen\n\nThe saga of commit 40726f16a8d7 continues.  This attacks the problem\nof switching between SCRIPT and EXPRESSION state lexing by removing\nthe need to do so for phdrs like \":text\".  Instead {WILDCHAR}*\nmatching, the reason why \":text\" lexed as one token, is restricted to\nwithin the braces of a section or overlay statement.  The new WILD\nlexer state is switched at the non-optional brace tokens, so\nldlex_backup is no longer needed.  I've also removed the BOTH state,\nwhich doesn't seem to be needed any more.  Besides rules involving\nerror reporting, there was just one place where SCRIPT appeared\nwithout BOTH, the {WILDCHAR}* rule, three where BOTH appears without\nSCRIPT for tokens that only need EXPRESSION state, and two where BOTH\nappears alongside INPUT_LIST.  (Since I'm editing the wild and\nfilename rules, removing BOTH and adding WILD can also be seen as\nrenaming the old BOTH state to SCRIPT and renaming the old SCRIPT\nstate to WILD with a reduced scope.)\n\nAs a followup, I'll look at removing EXPRESSION state from some lexer\nrules that no longer need it due to this cleanup.\n\n\tPR 28217\n\t* ldgram.y (exp <ORIGIN, LENGTH>): Use paren_script_name.\n\t(section): Parse within braces of section in wild mode, and\n\tafter brace back in script mode.  Remove ldlex_backup call.\n\tSimilarly for OVERLAY.\n\t(overlay_section): Similarly.\n\t(script_file): Replace ldlex_both with ldlex_script.\n\t* ldlex.h (ldlex_wild): Declare.\n\t(ldlex_both): Delete.\n\t* ldlex.l (BOTH): Delete.  Remove state from all rules.\n\t(WILD): New state.  Enable many tokens in this state.\n\tEnable filename match in SCRIPT mode.  Enable WILDCHAR match\n\tin WILD state, disable in SCRIPT mode.\n\t(ldlex_wild): New function.\n\t* ldfile.c (ldfile_try_open_bfd): Replace ldlex_both call with\n\tldlex_script.",
    "tree": {
      "sha": "3178a2b395ebf1861809037b3bcc6e4b26113347",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3178a2b395ebf1861809037b3bcc6e4b26113347"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "41ee6d14fd3faf486036cdb9042e432664abfe48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41ee6d14fd3faf486036cdb9042e432664abfe48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/41ee6d14fd3faf486036cdb9042e432664abfe48"
    }
  ],
  "stats": {
    "total": 355,
    "additions": 171,
    "deletions": 184
  },
  "files": [
    {
      "sha": "22271fd6810a7262ea9ec9223a990f74d223de4f",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
      "patch": "@@ -193,7 +193,7 @@ ldfile_try_open_bfd (const char *attempt,\n \n \t\t  ldfile_assumed_script = true;\n \t\t  parser_input = input_selected;\n-\t\t  ldlex_both ();\n+\t\t  ldlex_script ();\n \t\t  token = INPUT_SCRIPT;\n \t\t  while (token != 0)\n \t\t    {"
    },
    {
      "sha": "4910e17ab4a9fabbb5b71784f327e3b7de47c4cd",
      "filename": "ld/ldgram.y",
      "status": "modified",
      "additions": 20,
      "deletions": 35,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldgram.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldgram.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldgram.y?ref=af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
      "patch": "@@ -297,9 +297,9 @@ extern_name_list_body:\n \t;\n \n script_file:\n-\t{ ldlex_both(); }\n+\t{ ldlex_script (); }\n \tifile_list\n-\t{ ldlex_popstate(); }\n+\t{ ldlex_popstate (); }\n \t;\n \n ifile_list:\n@@ -1021,10 +1021,10 @@ exp\t:\n \t\t\t{ $$ = exp_binop (MIN_K, $3, $5 ); }\n \t|\tASSERT_K '(' exp ',' NAME ')'\n \t\t\t{ $$ = exp_assert ($3, $5); }\n-\t|\tORIGIN '(' NAME ')'\n-\t\t\t{ $$ = exp_nameop (ORIGIN, $3); }\n-\t|\tLENGTH '(' NAME ')'\n-\t\t\t{ $$ = exp_nameop (LENGTH, $3); }\n+\t|\tORIGIN paren_script_name\n+\t\t\t{ $$ = exp_nameop (ORIGIN, $2); }\n+\t|\tLENGTH paren_script_name\n+\t\t\t{ $$ = exp_nameop (LENGTH, $2); }\n \t|\tLOG2CEIL '(' exp ')'\n \t\t\t{ $$ = exp_unop (LOG2CEIL, $3); }\n \t;\n@@ -1069,50 +1069,38 @@ section:\tNAME\n \t\topt_align\n \t\topt_align_with_input\n \t\topt_subalign\n-\t\t\t{ ldlex_popstate (); ldlex_script (); }\n \t\tsect_constraint\n-\t\t'{'\n \t\t\t{\n+\t\t\t  ldlex_popstate ();\n+\t\t\t  ldlex_wild ();\n \t\t\t  lang_enter_output_section_statement($1, $3, sectype,\n \t\t\t\t\t\t\t      $5, $7, $4,\n-\t\t\t\t\t\t\t      $9, $6);\n+\t\t\t\t\t\t\t      $8, $6);\n \t\t\t}\n+\t\t'{'\n \t\tstatement_list_opt\n \t\t'}'\n-\t\t\t{ ldlex_popstate (); ldlex_expression (); }\n+\t\t\t{ ldlex_popstate (); }\n \t\tmemspec_opt memspec_at_opt phdr_opt fill_opt\n \t\t\t{\n-\t\t\t  if (yychar == NAME)\n-\t\t\t    {\n-\t\t\t      yyclearin;\n-\t\t\t      ldlex_backup ();\n-\t\t\t    }\n-\t\t\t  ldlex_popstate ();\n-\t\t\t  lang_leave_output_section_statement ($18, $15,\n-\t\t\t\t\t\t\t       $17, $16);\n+\t\t\t  lang_leave_output_section_statement ($17, $14,\n+\t\t\t\t\t\t\t       $16, $15);\n \t\t\t}\n \t\topt_comma\n \t|\tOVERLAY\n \t\t\t{ ldlex_expression (); }\n \t\topt_exp_without_type opt_nocrossrefs opt_at opt_subalign\n-\t\t\t{ ldlex_popstate (); ldlex_script (); }\n+\t\t\t{ ldlex_popstate (); }\n \t\t'{'\n \t\t\t{\n \t\t\t  lang_enter_overlay ($3, $6);\n \t\t\t}\n \t\toverlay_section\n \t\t'}'\n-\t\t\t{ ldlex_popstate (); ldlex_expression (); }\n \t\tmemspec_opt memspec_at_opt phdr_opt fill_opt\n \t\t\t{\n-\t\t\t  if (yychar == NAME)\n-\t\t\t    {\n-\t\t\t      yyclearin;\n-\t\t\t      ldlex_backup ();\n-\t\t\t    }\n-\t\t\t  ldlex_popstate ();\n \t\t\t  lang_leave_overlay ($5, (int) $4,\n-\t\t\t\t\t      $16, $13, $15, $14);\n+\t\t\t\t\t      $15, $12, $14, $13);\n \t\t\t}\n \t\topt_comma\n \t|\t/* The GROUP case is just enough to support the gcc\n@@ -1204,18 +1192,15 @@ overlay_section:\n \t|\toverlay_section\n \t\tNAME\n \t\t\t{\n+\t\t\t  ldlex_wild ();\n \t\t\t  lang_enter_overlay_section ($2);\n \t\t\t}\n-\t\t'{' statement_list_opt '}'\n-\t\t\t{ ldlex_expression (); }\n+\t\t'{'\n+\t\tstatement_list_opt\n+\t\t'}'\n+\t\t\t{ ldlex_popstate (); }\n \t\tphdr_opt fill_opt\n \t\t\t{\n-\t\t\t  if (yychar == NAME)\n-\t\t\t    {\n-\t\t\t      yyclearin;\n-\t\t\t      ldlex_backup ();\n-\t\t\t    }\n-\t\t\t  ldlex_popstate ();\n \t\t\t  lang_leave_overlay_section ($9, $8);\n \t\t\t}\n \t\topt_comma"
    },
    {
      "sha": "04ee0e40dc1ead4aa5eda0c7453de8cdbe2ebc77",
      "filename": "ld/ldlex.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldlex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldlex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.h?ref=af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
      "patch": "@@ -191,7 +191,7 @@ extern void ldlex_mri_script (void);\n extern void ldlex_version_script (void);\n extern void ldlex_version_file (void);\n extern void ldlex_expression (void);\n-extern void ldlex_both (void);\n+extern void ldlex_wild (void);\n extern void ldlex_popstate (void);\n extern void ldlex_backup (void);\n extern const char* ldlex_filename (void);"
    },
    {
      "sha": "dfe8382d0bbfbed74082ee70350b94d5dcd4ea27",
      "filename": "ld/ldlex.l",
      "status": "modified",
      "additions": 149,
      "deletions": 147,
      "changes": 296,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldlex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af29a8abcf50ff9cb465a136c68b06bfc2ca7b75/ld/ldlex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.l?ref=af29a8abcf50ff9cb465a136c68b06bfc2ca7b75",
      "patch": "@@ -75,11 +75,12 @@ static void comment (void);\n static void lex_warn_invalid (char *where, char *what);\n \n /* STATES\n-\tEXPRESSION\tdefinitely in an expression\n-\tSCRIPT\t\tdefinitely in a script\n-\tINPUTLIST\tdefinitely in a script, a filename-list\n-\tBOTH\t\teither EXPRESSION or SCRIPT\n+\tEXPRESSION\tin an expression\n+\tSCRIPT\t\tin a script\n+\tINPUTLIST\tin a script, a filename-list\n \tMRI\t\tin an MRI script\n+\tWILD\t\tinside the braces of an output section or overlay,\n+\t\t\tfor input section wildcards\n \tVERS_START\tstarting a Sun style mapfile\n \tVERS_SCRIPT\ta Sun style mapfile\n \tVERS_NODE\ta node within a Sun style mapfile\n@@ -105,8 +106,8 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n %s SCRIPT\n %s INPUTLIST\n %s EXPRESSION\n-%s BOTH\n %s MRI\n+%s WILD\n %s VERS_START\n %s VERS_SCRIPT\n %s VERS_NODE\n@@ -128,8 +129,8 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t}\n     }\n \n-<BOTH,SCRIPT,EXPRESSION,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>\"/*\"\t{ comment (); }\n-\n+<SCRIPT,EXPRESSION,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>\"/*\" {\n+\t\t\t\tcomment (); }\n \n <MRI,EXPRESSION>\"$\"([0-9A-Fa-f])+ {\n \t\t\t\tyylval.integer = bfd_scan_vma (yytext + 1, 0, 16);\n@@ -162,7 +163,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t\t\t   yylval.bigint.str = NULL;\n \t\t\t\t   return INT;\n \t\t\t\t }\n-<SCRIPT,MRI,BOTH,EXPRESSION>(((\"$\"|0[xX])([0-9A-Fa-f])+)|(([0-9])+))(M|K|m|k)? {\n+<SCRIPT,MRI,EXPRESSION>(((\"$\"|0[xX])([0-9A-Fa-f])+)|(([0-9])+))(M|K|m|k)? {\n \t\t\t\t  char *s = yytext;\n \t\t\t\t  int ibase = 0;\n \n@@ -191,133 +192,134 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t\t\t    }\n \t\t\t\t  return INT;\n \t\t\t\t}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"]\"\t\t{ RTOKEN(']');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"[\"\t\t{ RTOKEN('[');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"<<=\"\t{ RTOKEN(LSHIFTEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\">>=\"\t{ RTOKEN(RSHIFTEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"||\"\t{ RTOKEN(OROR);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"==\"\t{ RTOKEN(EQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"!=\"\t{ RTOKEN(NE);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\">=\"\t{ RTOKEN(GE);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"<=\"\t{ RTOKEN(LE);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"<<\"\t{ RTOKEN(LSHIFT);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\">>\"\t{ RTOKEN(RSHIFT);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"+=\"\t{ RTOKEN(PLUSEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"-=\"\t{ RTOKEN(MINUSEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"*=\"\t{ RTOKEN(MULTEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"/=\"\t{ RTOKEN(DIVEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"&=\"\t{ RTOKEN(ANDEQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"|=\"\t{ RTOKEN(OREQ);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"&&\"\t{ RTOKEN(ANDAND);}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\">\"\t\t{ RTOKEN('>');}\n-<BOTH,SCRIPT,EXPRESSION,MRI,INPUTLIST>\",\"\t\t{ RTOKEN(',');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"&\"\t\t{ RTOKEN('&');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"|\"\t\t{ RTOKEN('|');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"~\"\t\t{ RTOKEN('~');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"!\"\t\t{ RTOKEN('!');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"?\"\t\t{ RTOKEN('?');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"*\"\t\t{ RTOKEN('*');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"+\"\t\t{ RTOKEN('+');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"-\"\t\t{ RTOKEN('-');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"/\"\t\t{ RTOKEN('/');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"%\"\t\t{ RTOKEN('%');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"<\"\t\t{ RTOKEN('<');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"=\"\t\t{ RTOKEN('=');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"}\"\t\t{ RTOKEN('}') ; }\n-<BOTH,SCRIPT,EXPRESSION,MRI>\"{\"\t\t{ RTOKEN('{'); }\n-<BOTH,SCRIPT,EXPRESSION,MRI,INPUTLIST>\")\"\t\t{ RTOKEN(')');}\n-<BOTH,SCRIPT,EXPRESSION,MRI,INPUTLIST>\"(\"\t\t{ RTOKEN('(');}\n-<BOTH,SCRIPT,EXPRESSION,MRI>\":\"\t\t{ RTOKEN(':'); }\n-<BOTH,SCRIPT,EXPRESSION,MRI>\";\"\t\t{ RTOKEN(';');}\n-<BOTH,SCRIPT>\"MEMORY\"\t\t\t{ RTOKEN(MEMORY);}\n-<BOTH,SCRIPT>\"REGION_ALIAS\"\t\t{ RTOKEN(REGION_ALIAS);}\n-<BOTH,SCRIPT>\"LD_FEATURE\"\t\t{ RTOKEN(LD_FEATURE);}\n-<BOTH,SCRIPT,EXPRESSION>\"ORIGIN\"\t{ RTOKEN(ORIGIN);}\n-<BOTH,SCRIPT>\"VERSION\"\t\t\t{ RTOKEN(VERSIONK);}\n-<EXPRESSION,BOTH,SCRIPT>\"BLOCK\"\t\t{ RTOKEN(BLOCK);}\n-<EXPRESSION,BOTH,SCRIPT>\"BIND\"\t\t{ RTOKEN(BIND);}\n-<BOTH,SCRIPT,EXPRESSION>\"LENGTH\"\t{ RTOKEN(LENGTH);}\n-<EXPRESSION,BOTH,SCRIPT>\"ALIGN\"\t\t{ RTOKEN(ALIGN_K);}\n-<EXPRESSION,BOTH,SCRIPT>\"DATA_SEGMENT_ALIGN\"\t{ RTOKEN(DATA_SEGMENT_ALIGN);}\n-<EXPRESSION,BOTH,SCRIPT>\"DATA_SEGMENT_RELRO_END\"\t{ RTOKEN(DATA_SEGMENT_RELRO_END);}\n-<EXPRESSION,BOTH,SCRIPT>\"DATA_SEGMENT_END\"\t{ RTOKEN(DATA_SEGMENT_END);}\n-<EXPRESSION,BOTH,SCRIPT>\"ADDR\"\t\t{ RTOKEN(ADDR);}\n-<EXPRESSION,BOTH,SCRIPT>\"LOADADDR\"\t{ RTOKEN(LOADADDR);}\n-<EXPRESSION,BOTH,SCRIPT>\"ALIGNOF\"\t{ RTOKEN(ALIGNOF); }\n-<EXPRESSION,BOTH>\"MAX\"\t\t\t{ RTOKEN(MAX_K); }\n-<EXPRESSION,BOTH>\"MIN\"\t\t\t{ RTOKEN(MIN_K); }\n-<EXPRESSION,BOTH>\"LOG2CEIL\"\t\t{ RTOKEN(LOG2CEIL); }\n-<EXPRESSION,BOTH,SCRIPT>\"ASSERT\"\t{ RTOKEN(ASSERT_K); }\n-<BOTH,SCRIPT>\"ENTRY\"\t\t\t{ RTOKEN(ENTRY);}\n-<BOTH,SCRIPT,MRI>\"EXTERN\"\t\t{ RTOKEN(EXTERN);}\n-<EXPRESSION,BOTH,SCRIPT>\"NEXT\"\t\t{ RTOKEN(NEXT);}\n-<EXPRESSION,BOTH,SCRIPT>\"sizeof_headers\"\t{ RTOKEN(SIZEOF_HEADERS);}\n-<EXPRESSION,BOTH,SCRIPT>\"SIZEOF_HEADERS\"\t{ RTOKEN(SIZEOF_HEADERS);}\n-<EXPRESSION,BOTH,SCRIPT>\"SEGMENT_START\" { RTOKEN(SEGMENT_START);}\n-<BOTH,SCRIPT>\"MAP\"\t\t\t{ RTOKEN(MAP);}\n-<EXPRESSION,BOTH,SCRIPT>\"SIZEOF\"\t{ RTOKEN(SIZEOF);}\n-<BOTH,SCRIPT>\"TARGET\"\t\t\t{ RTOKEN(TARGET_K);}\n-<BOTH,SCRIPT>\"SEARCH_DIR\"\t\t{ RTOKEN(SEARCH_DIR);}\n-<BOTH,SCRIPT>\"OUTPUT\"\t\t\t{ RTOKEN(OUTPUT);}\n-<BOTH,SCRIPT>\"INPUT\"\t\t\t{ RTOKEN(INPUT);}\n-<EXPRESSION,BOTH,SCRIPT>\"GROUP\"\t\t{ RTOKEN(GROUP);}\n-<EXPRESSION,BOTH,SCRIPT,INPUTLIST>\"AS_NEEDED\"\t{ RTOKEN(AS_NEEDED);}\n-<EXPRESSION,BOTH,SCRIPT>\"DEFINED\"\t{ RTOKEN(DEFINED);}\n-<BOTH,SCRIPT>\"CREATE_OBJECT_SYMBOLS\"\t{ RTOKEN(CREATE_OBJECT_SYMBOLS);}\n-<BOTH,SCRIPT>\"CONSTRUCTORS\"\t\t{ RTOKEN( CONSTRUCTORS);}\n-<BOTH,SCRIPT>\"FORCE_COMMON_ALLOCATION\"\t{ RTOKEN(FORCE_COMMON_ALLOCATION);}\n-<BOTH,SCRIPT>\"FORCE_GROUP_ALLOCATION\"\t{ RTOKEN(FORCE_GROUP_ALLOCATION);}\n-<BOTH,SCRIPT>\"INHIBIT_COMMON_ALLOCATION\" { RTOKEN(INHIBIT_COMMON_ALLOCATION);}\n-<BOTH,SCRIPT>\"SECTIONS\"\t\t\t{ RTOKEN(SECTIONS);}\n-<BOTH,SCRIPT>\"INSERT\"\t\t\t{ RTOKEN(INSERT_K);}\n-<BOTH,SCRIPT>\"AFTER\"\t\t\t{ RTOKEN(AFTER);}\n-<BOTH,SCRIPT>\"BEFORE\"\t\t\t{ RTOKEN(BEFORE);}\n-<BOTH,SCRIPT>\"FILL\"\t\t\t{ RTOKEN(FILL);}\n-<BOTH,SCRIPT>\"STARTUP\"\t\t\t{ RTOKEN(STARTUP);}\n-<BOTH,SCRIPT>\"OUTPUT_FORMAT\"\t\t{ RTOKEN(OUTPUT_FORMAT);}\n-<BOTH,SCRIPT>\"OUTPUT_ARCH\"\t\t{ RTOKEN( OUTPUT_ARCH);}\n-<BOTH,SCRIPT>\"HLL\"\t\t\t{ RTOKEN(HLL);}\n-<BOTH,SCRIPT>\"SYSLIB\"\t\t\t{ RTOKEN(SYSLIB);}\n-<BOTH,SCRIPT>\"FLOAT\"\t\t\t{ RTOKEN(FLOAT);}\n-<BOTH,SCRIPT>\"QUAD\"\t\t\t{ RTOKEN( QUAD);}\n-<BOTH,SCRIPT>\"SQUAD\"\t\t\t{ RTOKEN( SQUAD);}\n-<BOTH,SCRIPT>\"LONG\"\t\t\t{ RTOKEN( LONG);}\n-<BOTH,SCRIPT>\"SHORT\"\t\t\t{ RTOKEN( SHORT);}\n-<BOTH,SCRIPT>\"BYTE\"\t\t\t{ RTOKEN( BYTE);}\n-<BOTH,SCRIPT>\"NOFLOAT\"\t\t\t{ RTOKEN(NOFLOAT);}\n-<EXPRESSION,BOTH,SCRIPT>\"NOCROSSREFS\"\t{ RTOKEN(NOCROSSREFS);}\n-<EXPRESSION,BOTH,SCRIPT>\"NOCROSSREFS_TO\" { RTOKEN(NOCROSSREFS_TO);}\n-<BOTH,SCRIPT>\"OVERLAY\"\t\t\t{ RTOKEN(OVERLAY); }\n-<BOTH,SCRIPT>\"SORT_BY_NAME\"\t\t{ RTOKEN(SORT_BY_NAME); }\n-<BOTH,SCRIPT>\"SORT_BY_ALIGNMENT\"\t{ RTOKEN(SORT_BY_ALIGNMENT); }\n-<BOTH,SCRIPT>\"SORT\"\t\t\t{ RTOKEN(SORT_BY_NAME); }\n-<BOTH,SCRIPT>\"SORT_BY_INIT_PRIORITY\"\t{ RTOKEN(SORT_BY_INIT_PRIORITY); }\n-<BOTH,SCRIPT>\"SORT_NONE\"\t\t{ RTOKEN(SORT_NONE); }\n-<EXPRESSION,BOTH,SCRIPT>\"NOLOAD\"\t{ RTOKEN(NOLOAD);}\n-<EXPRESSION,BOTH,SCRIPT>\"READONLY\"\t{ RTOKEN(READONLY);}\n-<EXPRESSION,BOTH,SCRIPT>\"DSECT\"\t\t{ RTOKEN(DSECT);}\n-<EXPRESSION,BOTH,SCRIPT>\"COPY\"\t\t{ RTOKEN(COPY);}\n-<EXPRESSION,BOTH,SCRIPT>\"INFO\"\t\t{ RTOKEN(INFO);}\n-<EXPRESSION,BOTH,SCRIPT>\"OVERLAY\"\t{ RTOKEN(OVERLAY);}\n-<EXPRESSION,BOTH,SCRIPT>\"ONLY_IF_RO\"\t{ RTOKEN(ONLY_IF_RO); }\n-<EXPRESSION,BOTH,SCRIPT>\"ONLY_IF_RW\"\t{ RTOKEN(ONLY_IF_RW); }\n-<EXPRESSION,BOTH,SCRIPT>\"SPECIAL\"\t{ RTOKEN(SPECIAL); }\n-<BOTH,SCRIPT>\"o\"\t\t\t{ RTOKEN(ORIGIN);}\n-<BOTH,SCRIPT>\"org\"\t\t\t{ RTOKEN(ORIGIN);}\n-<BOTH,SCRIPT>\"l\"\t\t\t{ RTOKEN( LENGTH);}\n-<BOTH,SCRIPT>\"len\"\t\t\t{ RTOKEN( LENGTH);}\n-<EXPRESSION,BOTH,SCRIPT>\"INPUT_SECTION_FLAGS\"\t{ RTOKEN(INPUT_SECTION_FLAGS); }\n-<EXPRESSION,BOTH,SCRIPT>\"INCLUDE\"\t{ RTOKEN(INCLUDE);}\n-<BOTH,SCRIPT>\"PHDRS\"\t\t\t{ RTOKEN (PHDRS); }\n-<EXPRESSION,BOTH,SCRIPT>\"AT\"\t\t{ RTOKEN(AT);}\n-<EXPRESSION,BOTH,SCRIPT>\"ALIGN_WITH_INPUT\"\t{ RTOKEN(ALIGN_WITH_INPUT);}\n-<EXPRESSION,BOTH,SCRIPT>\"SUBALIGN\"\t{ RTOKEN(SUBALIGN);}\n-<EXPRESSION,BOTH,SCRIPT>\"HIDDEN\"\t{ RTOKEN(HIDDEN); }\n-<EXPRESSION,BOTH,SCRIPT>\"PROVIDE\"\t{ RTOKEN(PROVIDE); }\n-<EXPRESSION,BOTH,SCRIPT>\"PROVIDE_HIDDEN\" { RTOKEN(PROVIDE_HIDDEN); }\n-<EXPRESSION,BOTH,SCRIPT>\"KEEP\"\t\t{ RTOKEN(KEEP); }\n-<EXPRESSION,BOTH,SCRIPT>\"EXCLUDE_FILE\"  { RTOKEN(EXCLUDE_FILE); }\n-<EXPRESSION,BOTH,SCRIPT>\"CONSTANT\"\t{ RTOKEN(CONSTANT);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"]\"\t\t{ RTOKEN(']');}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"[\"\t\t{ RTOKEN('[');}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"<<=\"\t{ RTOKEN(LSHIFTEQ);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\">>=\"\t{ RTOKEN(RSHIFTEQ);}\n+<SCRIPT,EXPRESSION,MRI>\"||\"\t\t{ RTOKEN(OROR);}\n+<SCRIPT,EXPRESSION,MRI>\"==\"\t\t{ RTOKEN(EQ);}\n+<SCRIPT,EXPRESSION,MRI>\"!=\"\t\t{ RTOKEN(NE);}\n+<SCRIPT,EXPRESSION,MRI>\">=\"\t\t{ RTOKEN(GE);}\n+<SCRIPT,EXPRESSION,MRI>\"<=\"\t\t{ RTOKEN(LE);}\n+<SCRIPT,EXPRESSION,MRI>\"<<\"\t\t{ RTOKEN(LSHIFT);}\n+<SCRIPT,EXPRESSION,MRI>\">>\"\t\t{ RTOKEN(RSHIFT);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"+=\"\t{ RTOKEN(PLUSEQ);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"-=\"\t{ RTOKEN(MINUSEQ);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"*=\"\t{ RTOKEN(MULTEQ);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"/=\"\t{ RTOKEN(DIVEQ);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"&=\"\t{ RTOKEN(ANDEQ);}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"|=\"\t{ RTOKEN(OREQ);}\n+<SCRIPT,EXPRESSION,MRI>\"&&\"\t\t{ RTOKEN(ANDAND);}\n+<SCRIPT,EXPRESSION,MRI>\">\"\t\t{ RTOKEN('>');}\n+<SCRIPT,EXPRESSION,MRI,INPUTLIST>\",\"\t{ RTOKEN(',');}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"&\"\t\t{ RTOKEN('&');}\n+<SCRIPT,EXPRESSION,MRI>\"|\"\t\t{ RTOKEN('|');}\n+<SCRIPT,EXPRESSION,MRI>\"~\"\t\t{ RTOKEN('~');}\n+<SCRIPT,EXPRESSION,MRI>\"!\"\t\t{ RTOKEN('!');}\n+<SCRIPT,EXPRESSION,MRI>\"?\"\t\t{ RTOKEN('?');}\n+<SCRIPT,EXPRESSION,MRI>\"*\"\t\t{ RTOKEN('*');}\n+<SCRIPT,EXPRESSION,MRI>\"+\"\t\t{ RTOKEN('+');}\n+<SCRIPT,EXPRESSION,MRI>\"-\"\t\t{ RTOKEN('-');}\n+<SCRIPT,EXPRESSION,MRI>\"/\"\t\t{ RTOKEN('/');}\n+<SCRIPT,EXPRESSION,MRI>\"%\"\t\t{ RTOKEN('%');}\n+<SCRIPT,EXPRESSION,MRI>\"<\"\t\t{ RTOKEN('<');}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"=\"\t\t{ RTOKEN('=');}\n+<SCRIPT,EXPRESSION,MRI,WILD>\"}\"\t\t{ RTOKEN('}'); }\n+<SCRIPT,EXPRESSION,MRI,WILD>\"{\"\t\t{ RTOKEN('{'); }\n+<SCRIPT,EXPRESSION,MRI,WILD,INPUTLIST>\")\" { RTOKEN(')');}\n+<SCRIPT,EXPRESSION,MRI,WILD,INPUTLIST>\"(\" { RTOKEN('(');}\n+<SCRIPT,EXPRESSION,MRI>\":\"\t\t{ RTOKEN(':'); }\n+<SCRIPT,EXPRESSION,MRI,WILD>\";\"\t\t{ RTOKEN(';');}\n+<SCRIPT>\"MEMORY\"\t\t\t{ RTOKEN(MEMORY);}\n+<SCRIPT>\"REGION_ALIAS\"\t\t\t{ RTOKEN(REGION_ALIAS);}\n+<SCRIPT>\"LD_FEATURE\"\t\t\t{ RTOKEN(LD_FEATURE);}\n+<SCRIPT,EXPRESSION>\"ORIGIN\"\t\t{ RTOKEN(ORIGIN);}\n+<SCRIPT>\"VERSION\"\t\t\t{ RTOKEN(VERSIONK);}\n+<SCRIPT,EXPRESSION>\"BLOCK\"\t\t{ RTOKEN(BLOCK);}\n+<SCRIPT,EXPRESSION>\"BIND\"\t\t{ RTOKEN(BIND);}\n+<SCRIPT,EXPRESSION>\"LENGTH\"\t\t{ RTOKEN(LENGTH);}\n+<SCRIPT,EXPRESSION>\"ALIGN\"\t\t{ RTOKEN(ALIGN_K);}\n+<SCRIPT,EXPRESSION>\"DATA_SEGMENT_ALIGN\"\t{ RTOKEN(DATA_SEGMENT_ALIGN);}\n+<SCRIPT,EXPRESSION>\"DATA_SEGMENT_RELRO_END\" { RTOKEN(DATA_SEGMENT_RELRO_END);}\n+<SCRIPT,EXPRESSION>\"DATA_SEGMENT_END\"\t{ RTOKEN(DATA_SEGMENT_END);}\n+<SCRIPT,EXPRESSION>\"ADDR\"\t\t{ RTOKEN(ADDR);}\n+<SCRIPT,EXPRESSION>\"LOADADDR\"\t\t{ RTOKEN(LOADADDR);}\n+<SCRIPT,EXPRESSION>\"ALIGNOF\"\t\t{ RTOKEN(ALIGNOF); }\n+<EXPRESSION>\"MAX\"\t\t\t{ RTOKEN(MAX_K); }\n+<EXPRESSION>\"MIN\"\t\t\t{ RTOKEN(MIN_K); }\n+<EXPRESSION>\"LOG2CEIL\"\t\t\t{ RTOKEN(LOG2CEIL); }\n+<SCRIPT,EXPRESSION,WILD>\"ASSERT\"\t{ RTOKEN(ASSERT_K); }\n+<SCRIPT,WILD>\"ENTRY\"\t\t\t{ RTOKEN(ENTRY);}\n+<SCRIPT,MRI>\"EXTERN\"\t\t\t{ RTOKEN(EXTERN);}\n+<SCRIPT,EXPRESSION>\"NEXT\"\t\t{ RTOKEN(NEXT);}\n+<SCRIPT,EXPRESSION>\"sizeof_headers\"\t{ RTOKEN(SIZEOF_HEADERS);}\n+<SCRIPT,EXPRESSION>\"SIZEOF_HEADERS\"\t{ RTOKEN(SIZEOF_HEADERS);}\n+<SCRIPT,EXPRESSION>\"SEGMENT_START\"\t{ RTOKEN(SEGMENT_START);}\n+<SCRIPT>\"MAP\"\t\t\t\t{ RTOKEN(MAP);}\n+<SCRIPT,EXPRESSION>\"SIZEOF\"\t\t{ RTOKEN(SIZEOF);}\n+<SCRIPT>\"TARGET\"\t\t\t{ RTOKEN(TARGET_K);}\n+<SCRIPT>\"SEARCH_DIR\"\t\t\t{ RTOKEN(SEARCH_DIR);}\n+<SCRIPT>\"OUTPUT\"\t\t\t{ RTOKEN(OUTPUT);}\n+<SCRIPT>\"INPUT\"\t\t\t\t{ RTOKEN(INPUT);}\n+<SCRIPT,EXPRESSION,WILD>\"GROUP\"\t\t{ RTOKEN(GROUP);}\n+<SCRIPT,EXPRESSION,INPUTLIST>\"AS_NEEDED\" { RTOKEN(AS_NEEDED);}\n+<SCRIPT,EXPRESSION>\"DEFINED\"\t\t{ RTOKEN(DEFINED);}\n+<SCRIPT,WILD>\"CREATE_OBJECT_SYMBOLS\"\t{ RTOKEN(CREATE_OBJECT_SYMBOLS);}\n+<SCRIPT,WILD>\"CONSTRUCTORS\"\t\t{ RTOKEN(CONSTRUCTORS);}\n+<SCRIPT>\"FORCE_COMMON_ALLOCATION\"\t{ RTOKEN(FORCE_COMMON_ALLOCATION);}\n+<SCRIPT>\"FORCE_GROUP_ALLOCATION\"\t{ RTOKEN(FORCE_GROUP_ALLOCATION);}\n+<SCRIPT>\"INHIBIT_COMMON_ALLOCATION\"\t{ RTOKEN(INHIBIT_COMMON_ALLOCATION);}\n+<SCRIPT>\"SECTIONS\"\t\t\t{ RTOKEN(SECTIONS);}\n+<SCRIPT>\"INSERT\"\t\t\t{ RTOKEN(INSERT_K);}\n+<SCRIPT>\"AFTER\"\t\t\t\t{ RTOKEN(AFTER);}\n+<SCRIPT>\"BEFORE\"\t\t\t{ RTOKEN(BEFORE);}\n+<SCRIPT,WILD>\"FILL\"\t\t\t{ RTOKEN(FILL);}\n+<SCRIPT>\"STARTUP\"\t\t\t{ RTOKEN(STARTUP);}\n+<SCRIPT>\"OUTPUT_FORMAT\"\t\t\t{ RTOKEN(OUTPUT_FORMAT);}\n+<SCRIPT>\"OUTPUT_ARCH\"\t\t\t{ RTOKEN(OUTPUT_ARCH);}\n+<SCRIPT>\"HLL\"\t\t\t\t{ RTOKEN(HLL);}\n+<SCRIPT>\"SYSLIB\"\t\t\t{ RTOKEN(SYSLIB);}\n+<SCRIPT>\"FLOAT\"\t\t\t\t{ RTOKEN(FLOAT);}\n+<SCRIPT,WILD>\"QUAD\"\t\t\t{ RTOKEN( QUAD);}\n+<SCRIPT,WILD>\"SQUAD\"\t\t\t{ RTOKEN( SQUAD);}\n+<SCRIPT,WILD>\"LONG\"\t\t\t{ RTOKEN( LONG);}\n+<SCRIPT,WILD>\"SHORT\"\t\t\t{ RTOKEN( SHORT);}\n+<SCRIPT,WILD>\"BYTE\"\t\t\t{ RTOKEN( BYTE);}\n+<SCRIPT>\"NOFLOAT\"\t\t\t{ RTOKEN(NOFLOAT);}\n+<SCRIPT,EXPRESSION>\"NOCROSSREFS\"\t{ RTOKEN(NOCROSSREFS);}\n+<SCRIPT,EXPRESSION>\"NOCROSSREFS_TO\"\t{ RTOKEN(NOCROSSREFS_TO);}\n+<SCRIPT>\"OVERLAY\"\t\t\t{ RTOKEN(OVERLAY); }\n+<SCRIPT,WILD>\"SORT_BY_NAME\"\t\t{ RTOKEN(SORT_BY_NAME); }\n+<SCRIPT,WILD>\"SORT_BY_ALIGNMENT\"\t{ RTOKEN(SORT_BY_ALIGNMENT); }\n+<SCRIPT,WILD>\"SORT\"\t\t\t{ RTOKEN(SORT_BY_NAME); }\n+<SCRIPT,WILD>\"SORT_BY_INIT_PRIORITY\"\t{ RTOKEN(SORT_BY_INIT_PRIORITY); }\n+<SCRIPT,WILD>\"SORT_NONE\"\t\t{ RTOKEN(SORT_NONE); }\n+<SCRIPT,EXPRESSION>\"NOLOAD\"\t\t{ RTOKEN(NOLOAD);}\n+<SCRIPT,EXPRESSION>\"READONLY\"\t\t{ RTOKEN(READONLY);}\n+<SCRIPT,EXPRESSION>\"DSECT\"\t\t{ RTOKEN(DSECT);}\n+<SCRIPT,EXPRESSION>\"COPY\"\t\t{ RTOKEN(COPY);}\n+<SCRIPT,EXPRESSION>\"INFO\"\t\t{ RTOKEN(INFO);}\n+<SCRIPT,EXPRESSION>\"OVERLAY\"\t\t{ RTOKEN(OVERLAY);}\n+<EXPRESSION>\"ONLY_IF_RO\"\t\t{ RTOKEN(ONLY_IF_RO); }\n+<EXPRESSION>\"ONLY_IF_RW\"\t\t{ RTOKEN(ONLY_IF_RW); }\n+<EXPRESSION>\"SPECIAL\"\t\t\t{ RTOKEN(SPECIAL); }\n+<SCRIPT>\"o\"\t\t\t\t{ RTOKEN(ORIGIN);}\n+<SCRIPT>\"org\"\t\t\t\t{ RTOKEN(ORIGIN);}\n+<SCRIPT>\"l\"\t\t\t\t{ RTOKEN( LENGTH);}\n+<SCRIPT>\"len\"\t\t\t\t{ RTOKEN( LENGTH);}\n+<SCRIPT,EXPRESSION,WILD>\"INPUT_SECTION_FLAGS\" { RTOKEN(INPUT_SECTION_FLAGS); }\n+<SCRIPT,EXPRESSION,WILD>\"INCLUDE\"\t{ RTOKEN(INCLUDE);}\n+<SCRIPT>\"PHDRS\"\t\t\t\t{ RTOKEN (PHDRS); }\n+<SCRIPT,EXPRESSION,WILD>\"AT\"\t\t{ RTOKEN(AT);}\n+<SCRIPT,EXPRESSION>\"ALIGN_WITH_INPUT\"\t{ RTOKEN(ALIGN_WITH_INPUT);}\n+<SCRIPT,EXPRESSION>\"SUBALIGN\"\t\t{ RTOKEN(SUBALIGN);}\n+<SCRIPT,EXPRESSION,WILD>\"HIDDEN\"\t{ RTOKEN(HIDDEN); }\n+<SCRIPT,EXPRESSION,WILD>\"PROVIDE\"\t{ RTOKEN(PROVIDE); }\n+<SCRIPT,EXPRESSION,WILD>\"PROVIDE_HIDDEN\" { RTOKEN(PROVIDE_HIDDEN); }\n+<SCRIPT,EXPRESSION,WILD>\"KEEP\"\t\t{ RTOKEN(KEEP); }\n+<SCRIPT,EXPRESSION,WILD>\"EXCLUDE_FILE\"\t{ RTOKEN(EXCLUDE_FILE); }\n+<SCRIPT,EXPRESSION>\"CONSTANT\"\t\t{ RTOKEN(CONSTANT);}\n+\n <MRI>\"#\".*\\n?\t\t\t{ ++ lineno; }\n <MRI>\"\\n\"\t\t\t{ ++ lineno;  RTOKEN(NEWLINE); }\n <MRI>\"*\".*\t\t\t{ /* Mri comment line */ }\n@@ -338,7 +340,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n <MRI>\"START\"\t\t\t{ RTOKEN(START); }\n <MRI>\"LIST\".*\t\t\t{ RTOKEN(LIST); /* LIST and ignore to end of line */ }\n <MRI>\"SECT\"\t\t\t{ RTOKEN(SECT); }\n-<EXPRESSION,BOTH,SCRIPT,MRI>\"ABSOLUTE\"\t\t\t{ RTOKEN(ABSOLUTE); }\n+<SCRIPT,EXPRESSION,MRI>\"ABSOLUTE\"\t\t\t{ RTOKEN(ABSOLUTE); }\n <MRI>\"end\"\t\t\t{ RTOKEN(ENDWORD); }\n <MRI>\"alignmod\"\t\t\t{ RTOKEN(ALIGNMOD);}\n <MRI>\"align\"\t\t\t{ RTOKEN(ALIGN_K);}\n@@ -356,7 +358,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n <MRI>\"start\"\t\t\t{ RTOKEN(START); }\n <MRI>\"list\".*\t\t\t{ RTOKEN(LIST); /* LIST and ignore to end of line */ }\n <MRI>\"sect\"\t\t\t{ RTOKEN(SECT); }\n-<EXPRESSION,BOTH,SCRIPT,MRI>\"absolute\"\t\t\t{ RTOKEN(ABSOLUTE); }\n+<SCRIPT,EXPRESSION,MRI>\"absolute\"\t\t\t{ RTOKEN(ABSOLUTE); }\n \n <MRI>{FILENAMECHAR1}{NOCFILENAMECHAR}*\t{\n /* Filename without commas, needed to parse mri stuff */\n@@ -365,7 +367,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t\t\t}\n \n \n-<BOTH,INPUTLIST>{FILENAMECHAR1}{FILENAMECHAR}*\t{\n+<SCRIPT,INPUTLIST>{FILENAMECHAR1}{FILENAMECHAR}*\t{\n \t\t\t\t  yylval.name = xstrdup (yytext);\n \t\t\t\t  return NAME;\n \t\t\t\t}\n@@ -374,7 +376,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t\t\t  yylval.name = xstrdup (yytext);\n \t\t\t\t  return NAME;\n \t\t\t\t}\n-<BOTH,INPUTLIST>\"-l\"{FILENAMECHAR}+ {\n+<INPUTLIST>\"-l\"{FILENAMECHAR}+ {\n \t\t\t\t  yylval.name = xstrdup (yytext + 2);\n \t\t\t\t  return LNAME;\n \t\t\t\t}\n@@ -390,7 +392,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t\t\t  yylval.name = xstrdup (yytext + 2);\n \t\t\t\t  return LNAME;\n \t\t\t\t}\n-<SCRIPT>{WILDCHAR}* {\n+<WILD>{WILDCHAR}* {\n \t\t/* Annoyingly, this pattern can match comments, and we have\n \t\t   longest match issues to consider.  So if the first two\n \t\t   characters are a comment opening, put the input back and\n@@ -407,7 +409,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t  }\n \t}\n \n-<EXPRESSION,BOTH,SCRIPT,VERS_NODE,INPUTLIST>\"\\\"\"[^\\\"]*\"\\\"\" {\n+<SCRIPT,EXPRESSION,WILD,VERS_NODE,INPUTLIST>\"\\\"\"[^\\\"]*\"\\\"\" {\n \t\t\t\t\t/* No matter the state, quotes\n \t\t\t\t\t   give what's inside.  */\n \t\t\t\t\tbfd_size_type len;\n@@ -421,11 +423,11 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n \t\t\t\t\treturn NAME;\n \t\t\t\t}\n \n-<BOTH,SCRIPT,EXPRESSION,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>\"\\n\" {\n+<SCRIPT,EXPRESSION,WILD,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>\"\\n\" {\n \t\t\t\tlineno++; }\n-<MRI,BOTH,SCRIPT,EXPRESSION,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>[ \\t\\r]+ {\n+<MRI,SCRIPT,EXPRESSION,WILD,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>[ \\t\\r]+ {\n \t\t\t\t/* Eat up whitespace */ }\n-<BOTH,SCRIPT,EXPRESSION,VERS_START,VERS_NODE,VERS_SCRIPT>#.* {\n+<SCRIPT,EXPRESSION,WILD,VERS_START,VERS_NODE,VERS_SCRIPT>#.* {\n \t\t\t\t/* Eat up comments */ }\n \n <VERS_NODE,VERS_SCRIPT>[:,;]\t{ return *yytext; }\n@@ -472,7 +474,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n }\n \n <SCRIPT,MRI,VERS_START,VERS_SCRIPT,VERS_NODE>.\tlex_warn_invalid (\" in script\", yytext);\n-<EXPRESSION,BOTH>.\tlex_warn_invalid (\" in expression\", yytext);\n+<EXPRESSION>.\tlex_warn_invalid (\" in expression\", yytext);\n \n %%\n \f\n@@ -609,10 +611,10 @@ ldlex_expression (void)\n }\n \n void\n-ldlex_both (void)\n+ldlex_wild (void)\n {\n   *(state_stack_p)++ = yy_start;\n-  BEGIN (BOTH);\n+  BEGIN (WILD);\n }\n \n void"
    }
  ]
}