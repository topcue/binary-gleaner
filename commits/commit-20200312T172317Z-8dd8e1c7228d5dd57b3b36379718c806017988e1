{
  "sha": "8dd8e1c7228d5dd57b3b36379718c806017988e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGRkOGUxYzcyMjhkNWRkNTdiM2IzNjM3OTcxOGM4MDYwMTc5ODhlMQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-03-05T21:32:54Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-03-12T17:23:17Z"
    },
    "message": "Remove use of deprecated core functions (in NetBSD/ARM)\n\nThis is in preparation for deleting deprecated_add_core_fns and\nrelated code.\n\nAs a side-effect, this makes it possible to read NetBSD/ARM\ncore files on non-NetBSD/ARM platforms, subject to PR corefiles/25638.\n\nI have removed this comment:\n-  /* This is ok: we're running native...  */\nSince we are using the gdbarch from the regcache, we should be\nguaranteed to be calling the right function here, so it shouldn't\nmatter whether we are running native.\n\nTested by reading a NetBSD/ARM core file on Linux/x86-64 and NetBSD/ARM;\nthe \"info registers\" output matches the one from the system GDB.\n\ngdb/ChangeLog:\n\n2020-03-12  Christian Biesinger  <cbiesinger@google.com>\n\n\t* Makefile.in (HFILES_NO_SRCDIR): Add new arm-nbsd-tdep.h file.\n\t* arm-nbsd-nat.c (arm_supply_gregset): Moved to arm-nbsd-tdep and\n\trenamed to arm_nbsd_supply_gregset.\n\t(fetch_register): Update to call arm_nbsd_supply_gregset.\n\t(fetch_regs): Remove in favor of fetch_register with a -1 regno.\n\t(arm_netbsd_nat_target::fetch_registers): Update.\n\t(fetch_elfcore_registers): Removed.\n\t(_initialize_arm_netbsd_nat): Removed call to deprecated_add_core_fns.\n\t* arm-nbsd-tdep.c (struct arm_nbsd_reg): New struct.\n\t(arm_nbsd_supply_gregset): Moved from arm-nbsd-nat.c and updated to\n\tnot require NetBSD system headers.\n\t(arm_nbsd_regset): New struct.\n\t(arm_nbsd_iterate_over_regset_sections): New function.\n\t(arm_netbsd_init_abi_common): Updated to call\n\tset_gdbarch_iterate_over_regset_sections.\n\t* arm-nbsd-tdep.h: New file.",
    "tree": {
      "sha": "b7a94a6b989cdccf0b3c09cb727bbef7322203b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7a94a6b989cdccf0b3c09cb727bbef7322203b9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8dd8e1c7228d5dd57b3b36379718c806017988e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dd8e1c7228d5dd57b3b36379718c806017988e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8dd8e1c7228d5dd57b3b36379718c806017988e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dd8e1c7228d5dd57b3b36379718c806017988e1/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a20f753ef28251e4d3bca211e9ee338f67aa2a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a20f753ef28251e4d3bca211e9ee338f67aa2a8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a20f753ef28251e4d3bca211e9ee338f67aa2a8"
    }
  ],
  "stats": {
    "total": 247,
    "additions": 125,
    "deletions": 122
  },
  "files": [
    {
      "sha": "4ae6fd63102db520e6b64068b888b35612d1be5d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8dd8e1c7228d5dd57b3b36379718c806017988e1",
      "patch": "@@ -1,3 +1,22 @@\n+2020-03-12  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* Makefile.in (HFILES_NO_SRCDIR): Add new arm-nbsd-tdep.h file.\n+\t* arm-nbsd-nat.c (arm_supply_gregset): Moved to arm-nbsd-tdep and\n+\trenamed to arm_nbsd_supply_gregset.\n+\t(fetch_register): Update to call arm_nbsd_supply_gregset.\n+\t(fetch_regs): Remove in favor of fetch_register with a -1 regno.\n+\t(arm_netbsd_nat_target::fetch_registers): Update.\n+\t(fetch_elfcore_registers): Removed.\n+\t(_initialize_arm_netbsd_nat): Removed call to deprecated_add_core_fns.\n+\t* arm-nbsd-tdep.c (struct arm_nbsd_reg): New struct.\n+\t(arm_nbsd_supply_gregset): Moved from arm-nbsd-nat.c and updated to\n+\tnot require NetBSD system headers.\n+\t(arm_nbsd_regset): New struct.\n+\t(arm_nbsd_iterate_over_regset_sections): New function.\n+\t(arm_netbsd_init_abi_common): Updated to call\n+\tset_gdbarch_iterate_over_regset_sections.\n+\t* arm-nbsd-tdep.h: New file.\n+\n 2020-03-11  Kevin Buettner  <kevinb@redhat.com>\n \n \t* symtab.c (find_pc_sect_line): Add check which prevents infinite"
    },
    {
      "sha": "1a837eda8d54ace2224e127e9d88cdbf807f78ea",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=8dd8e1c7228d5dd57b3b36379718c806017988e1",
      "patch": "@@ -1205,6 +1205,7 @@ HFILES_NO_SRCDIR = \\\n \tarc-tdep.h \\\n \tarch-utils.h \\\n \tarm-linux-tdep.h \\\n+\tarm-nbsd-tdep.h \\\n \tarm-tdep.h \\\n \tauto-load.h \\\n \tauxv.h \\"
    },
    {
      "sha": "cb31462737d0cbcea68c79cf8cd8efb79872980f",
      "filename": "gdb/arm-nbsd-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 121,
      "changes": 125,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/arm-nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/arm-nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-nat.c?ref=8dd8e1c7228d5dd57b3b36379718c806017988e1",
      "patch": "@@ -31,6 +31,7 @@\n #include <machine/frame.h>\n \n #include \"arm-tdep.h\"\n+#include \"arm-nbsd-tdep.h\"\n #include \"aarch32-tdep.h\"\n #include \"inf-ptrace.h\"\n \n@@ -45,28 +46,6 @@ class arm_netbsd_nat_target final : public inf_ptrace_target\n \n static arm_netbsd_nat_target the_arm_netbsd_nat_target;\n \n-static void\n-arm_supply_gregset (struct regcache *regcache, struct reg *gregset)\n-{\n-  int regno;\n-  CORE_ADDR r_pc;\n-\n-  /* Integer registers.  */\n-  for (regno = ARM_A1_REGNUM; regno < ARM_SP_REGNUM; regno++)\n-    regcache->raw_supply (regno, (char *) &gregset->r[regno]);\n-\n-  regcache->raw_supply (ARM_SP_REGNUM, (char *) &gregset->r_sp);\n-  regcache->raw_supply (ARM_LR_REGNUM, (char *) &gregset->r_lr);\n-  /* This is ok: we're running native...  */\n-  r_pc = gdbarch_addr_bits_remove (regcache->arch (), gregset->r_pc);\n-  regcache->raw_supply (ARM_PC_REGNUM, (char *) &r_pc);\n-\n-  if (arm_apcs_32)\n-    regcache->raw_supply (ARM_PS_REGNUM, (char *) &gregset->r_cpsr);\n-  else\n-    regcache->raw_supply (ARM_PS_REGNUM, (char *) &gregset->r_pc);\n-}\n-\n static void\n arm_supply_vfpregset (struct regcache *regcache, struct fpreg *fpregset)\n {\n@@ -95,57 +74,8 @@ fetch_register (struct regcache *regcache, int regno)\n       warning (_(\"unable to fetch general register\"));\n       return;\n     }\n-\n-  switch (regno)\n-    {\n-    case ARM_SP_REGNUM:\n-      regcache->raw_supply (ARM_SP_REGNUM, (char *) &inferior_registers.r_sp);\n-      break;\n-\n-    case ARM_LR_REGNUM:\n-      regcache->raw_supply (ARM_LR_REGNUM, (char *) &inferior_registers.r_lr);\n-      break;\n-\n-    case ARM_PC_REGNUM:\n-      /* This is ok: we're running native...  */\n-      inferior_registers.r_pc = gdbarch_addr_bits_remove\n-\t\t\t\t  (regcache->arch (),\n-\t\t\t\t   inferior_registers.r_pc);\n-      regcache->raw_supply (ARM_PC_REGNUM, (char *) &inferior_registers.r_pc);\n-      break;\n-\n-    case ARM_PS_REGNUM:\n-      if (arm_apcs_32)\n-\tregcache->raw_supply (ARM_PS_REGNUM,\n-\t\t\t      (char *) &inferior_registers.r_cpsr);\n-      else\n-\tregcache->raw_supply (ARM_PS_REGNUM,\n-\t\t\t      (char *) &inferior_registers.r_pc);\n-      break;\n-\n-    default:\n-      regcache->raw_supply (regno, (char *) &inferior_registers.r[regno]);\n-      break;\n-    }\n-}\n-\n-static void\n-fetch_regs (struct regcache *regcache)\n-{\n-  struct reg inferior_registers;\n-  int ret;\n-  int regno;\n-\n-  ret = ptrace (PT_GETREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_registers, 0);\n-\n-  if (ret < 0)\n-    {\n-      warning (_(\"unable to fetch general registers\"));\n-      return;\n-    }\n-\n-  arm_supply_gregset (regcache, &inferior_registers);\n+  arm_nbsd_supply_gregset (nullptr, regcache, regno, &inferior_registers,\n+\t\t\t   sizeof (inferior_registers));\n }\n \n static void\n@@ -207,7 +137,7 @@ arm_netbsd_nat_target::fetch_registers (struct regcache *regcache, int regno)\n     }\n   else\n     {\n-      fetch_regs (regcache);\n+      fetch_register (regcache, -1);\n       fetch_fp_regs (regcache);\n     }\n }\n@@ -416,56 +346,9 @@ arm_netbsd_nat_target::read_description ()\n   return arm_read_description (ARM_FP_TYPE_VFPV3);\n }\n \n-static void\n-fetch_elfcore_registers (struct regcache *regcache,\n-\t\t\t gdb_byte *core_reg_sect, unsigned core_reg_size,\n-\t\t\t int which, CORE_ADDR ignore)\n-{\n-  struct reg gregset;\n-  struct fpreg fparegset;\n-\n-  switch (which)\n-    {\n-    case 0:\t/* Integer registers.  */\n-      if (core_reg_size != sizeof (struct reg))\n-\twarning (_(\"wrong size of register set in core file\"));\n-      else\n-\t{\n-\t  /* The memcpy may be unnecessary, but we can't really be sure\n-\t     of the alignment of the data in the core file.  */\n-\t  memcpy (&gregset, core_reg_sect, sizeof (gregset));\n-\t  arm_supply_gregset (regcache, &gregset);\n-\t}\n-      break;\n-\n-    case 2:\n-      /* cbiesinger/2020-02-12 -- as far as I can tell, ARM/NetBSD does\n-         not write any floating point registers into the core file (tested\n-\t with NetBSD 9.1_RC1).  When it does, this block will need to read them,\n-\t and the arm-netbsd gdbarch will need a core_read_description function\n-\t to return the right description for them.  */\n-      break;\n-\n-    default:\n-      /* Don't know what kind of register request this is; just ignore it.  */\n-      break;\n-    }\n-}\n-\n-static struct core_fns arm_netbsd_elfcore_fns =\n-{\n-  bfd_target_elf_flavour,\t\t/* core_flavour.  */\n-  default_check_format,\t\t\t/* check_format.  */\n-  default_core_sniffer,\t\t\t/* core_sniffer.  */\n-  fetch_elfcore_registers,\t\t/* core_read_registers.  */\n-  NULL\n-};\n-\n void _initialize_arm_netbsd_nat ();\n void\n _initialize_arm_netbsd_nat ()\n {\n   add_inf_child_target (&the_arm_netbsd_nat_target);\n-\n-  deprecated_add_core_fns (&arm_netbsd_elfcore_fns);\n }"
    },
    {
      "sha": "e01df50bc25f50dd4f79a841ae1e472720666839",
      "filename": "gdb/arm-nbsd-tdep.c",
      "status": "modified",
      "additions": 74,
      "deletions": 1,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/arm-nbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/arm-nbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-tdep.c?ref=8dd8e1c7228d5dd57b3b36379718c806017988e1",
      "patch": "@@ -21,7 +21,9 @@\n #include \"osabi.h\"\n \n #include \"arch/arm.h\"\n+#include \"arm-nbsd-tdep.h\"\n #include \"arm-tdep.h\"\n+#include \"regset.h\"\n #include \"solib-svr4.h\"\n \n /* Description of the longjmp buffer.  */\n@@ -35,6 +37,75 @@ static const gdb_byte arm_nbsd_arm_be_breakpoint[] = {0xe6, 0x00, 0x00, 0x11};\n static const gdb_byte arm_nbsd_thumb_le_breakpoint[] = {0xfe, 0xde};\n static const gdb_byte arm_nbsd_thumb_be_breakpoint[] = {0xde, 0xfe};\n \n+/* This matches struct reg from NetBSD's sys/arch/arm/include/reg.h:\n+   https://github.com/NetBSD/src/blob/7c13e6e6773bb171f4ed3ed53013e9d24b3c1eac/sys/arch/arm/include/reg.h#L39\n+ */\n+struct arm_nbsd_reg\n+{\n+  uint32_t reg[13];\n+  uint32_t sp;\n+  uint32_t lr;\n+  uint32_t pc;\n+  uint32_t cpsr;\n+};\n+\n+void\n+arm_nbsd_supply_gregset (const struct regset *regset, struct regcache *regcache,\n+\t\t\t int regnum, const void *gregs, size_t len)\n+{\n+  const arm_nbsd_reg *gregset = static_cast<const arm_nbsd_reg *>(gregs);\n+  gdb_assert (len >= sizeof (arm_nbsd_reg));\n+\n+  /* Integer registers.  */\n+  for (int i = ARM_A1_REGNUM; i < ARM_SP_REGNUM; i++)\n+    if (regnum == -1 || regnum == i)\n+      regcache->raw_supply (i, (char *) &gregset->reg[i]);\n+\n+  if (regnum == -1 || regnum == ARM_SP_REGNUM)\n+    regcache->raw_supply (ARM_SP_REGNUM, (char *) &gregset->sp);\n+\n+  if (regnum == -1 || regnum == ARM_LR_REGNUM)\n+    regcache->raw_supply (ARM_LR_REGNUM, (char *) &gregset->lr);\n+\n+  if (regnum == -1 || regnum == ARM_PC_REGNUM)\n+    {\n+      CORE_ADDR r_pc = gdbarch_addr_bits_remove (regcache->arch (), gregset->pc);\n+      regcache->raw_supply (ARM_PC_REGNUM, (char *) &r_pc);\n+    }\n+\n+  if (regnum == -1 || regnum == ARM_PS_REGNUM)\n+    {\n+      if (arm_apcs_32)\n+\tregcache->raw_supply (ARM_PS_REGNUM, (char *) &gregset->cpsr);\n+      else\n+\tregcache->raw_supply (ARM_PS_REGNUM, (char *) &gregset->pc);\n+    }\n+}\n+\n+static const struct regset arm_nbsd_regset = {\n+  nullptr,\n+  arm_nbsd_supply_gregset,\n+  /* We don't need a collect function because we only use this reading registers\n+     (via iterate_over_regset_sections and fetch_regs/fetch_register).  */\n+  nullptr,\n+  0\n+};\n+\n+static void\n+arm_nbsd_iterate_over_regset_sections (struct gdbarch *gdbarch,\n+\t\t\t\t       iterate_over_regset_sections_cb *cb,\n+\t\t\t\t       void *cb_data,\n+\t\t\t\t       const struct regcache *regcache)\n+{\n+  cb (\".reg\", sizeof (arm_nbsd_reg), sizeof (arm_nbsd_reg), &arm_nbsd_regset,\n+      NULL, cb_data);\n+  /* cbiesinger/2020-02-12 -- as far as I can tell, ARM/NetBSD does\n+     not write any floating point registers into the core file (tested\n+     with NetBSD 9.1_RC1).  When it does, this function will need to read them,\n+     and the arm-netbsd gdbarch will need a core_read_description function\n+     to return the right description for them.  */\n+}\n+\n static void\n arm_netbsd_init_abi_common (struct gdbarch_info info,\n \t\t\t    struct gdbarch *gdbarch)\n@@ -66,10 +137,12 @@ arm_netbsd_init_abi_common (struct gdbarch_info info,\n   tdep->jb_pc = ARM_NBSD_JB_PC;\n   tdep->jb_elt_size = ARM_NBSD_JB_ELEMENT_SIZE;\n \n+  set_gdbarch_iterate_over_regset_sections\n+    (gdbarch, arm_nbsd_iterate_over_regset_sections);\n   /* Single stepping.  */\n   set_gdbarch_software_single_step (gdbarch, arm_software_single_step);\n }\n-  \n+\n static void\n arm_netbsd_elf_init_abi (struct gdbarch_info info,\n \t\t\t struct gdbarch *gdbarch)"
    },
    {
      "sha": "1b35395031cf489f51c0d53929e29df59bf75d0e",
      "filename": "gdb/arm-nbsd-tdep.h",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/arm-nbsd-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8e1c7228d5dd57b3b36379718c806017988e1/gdb/arm-nbsd-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-tdep.h?ref=8dd8e1c7228d5dd57b3b36379718c806017988e1",
      "patch": "@@ -0,0 +1,27 @@\n+/* NetBSD/ARM support.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ARM_NBSD_TDEP_H\n+#define ARM_NBSD_TDEP_H\n+\n+void arm_nbsd_supply_gregset\n+  (const struct regset *regset, struct regcache *regcache,\n+   int regnum, const void *gregs, size_t len);\n+\n+#endif"
    }
  ]
}