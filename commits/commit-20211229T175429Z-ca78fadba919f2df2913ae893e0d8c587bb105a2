{
  "sha": "ca78fadba919f2df2913ae893e0d8c587bb105a2",
  "node_id": "C_kwDOANOeidoAKGNhNzhmYWRiYTkxOWYyZGYyOTEzYWU4OTNlMGQ4YzU4N2JiMTA1YTI",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-27T01:36:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-29T17:54:29Z"
    },
    "message": "Use debug_prefixed_printf_cond_nofunc in index-cache\n\nThis changes index-cache.c to use debug_prefixed_printf_cond_nofunc.\nAs a side effect, logs are now written to gdb_stdlog.  This is part of\nPR gdb/7233.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=7233",
    "tree": {
      "sha": "c0f61230dbe0bad171f83947e1c342761189118a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c0f61230dbe0bad171f83947e1c342761189118a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca78fadba919f2df2913ae893e0d8c587bb105a2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca78fadba919f2df2913ae893e0d8c587bb105a2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca78fadba919f2df2913ae893e0d8c587bb105a2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca78fadba919f2df2913ae893e0d8c587bb105a2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ed670d411821495478cf5e1a9e870cabd03b4cf6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed670d411821495478cf5e1a9e870cabd03b4cf6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ed670d411821495478cf5e1a9e870cabd03b4cf6"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 19,
    "deletions": 24
  },
  "files": [
    {
      "sha": "f0dd4635635530a672e226dfebe5d3a39bcf6f2f",
      "filename": "gdb/dwarf2/index-cache.c",
      "status": "modified",
      "additions": 19,
      "deletions": 24,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca78fadba919f2df2913ae893e0d8c587bb105a2/gdb/dwarf2/index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca78fadba919f2df2913ae893e0d8c587bb105a2/gdb/dwarf2/index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.c?ref=ca78fadba919f2df2913ae893e0d8c587bb105a2",
      "patch": "@@ -37,6 +37,10 @@\n /* When set to true, show debug messages about the index cache.  */\n static bool debug_index_cache = false;\n \n+#define index_cache_debug(FMT, ...)\t\t\t\t\t       \\\n+  debug_prefixed_printf_cond_nofunc (debug_index_cache, \"index-cache\", \\\n+\t\t\t\t     FMT, ## __VA_ARGS__)\n+\n /* The index cache directory, used for \"set/show index-cache directory\".  */\n static std::string index_cache_directory;\n \n@@ -59,17 +63,15 @@ index_cache::set_directory (std::string dir)\n \n   m_dir = std::move (dir);\n \n-  if (debug_index_cache)\n-    printf_unfiltered (\"index cache: now using directory %s\\n\", m_dir.c_str ());\n+  index_cache_debug (\"now using directory %s\\n\", m_dir.c_str ());\n }\n \n /* See dwarf-index-cache.h.  */\n \n void\n index_cache::enable ()\n {\n-  if (debug_index_cache)\n-    printf_unfiltered (\"index cache: enabling (%s)\\n\", m_dir.c_str ());\n+  index_cache_debug (\"enabling (%s)\\n\", m_dir.c_str ());\n \n   m_enabled = true;\n }\n@@ -79,8 +81,7 @@ index_cache::enable ()\n void\n index_cache::disable ()\n {\n-  if (debug_index_cache)\n-    printf_unfiltered (\"index cache: disabling\\n\");\n+  index_cache_debug (\"disabling\\n\");\n \n   m_enabled = false;\n }\n@@ -99,9 +100,8 @@ index_cache::store (dwarf2_per_objfile *per_objfile)\n   const bfd_build_id *build_id = build_id_bfd_get (obj->obfd);\n   if (build_id == nullptr)\n     {\n-      if (debug_index_cache)\n-\tprintf_unfiltered (\"index cache: objfile %s has no build id\\n\",\n-\t\t\t   objfile_name (obj));\n+      index_cache_debug (\"objfile %s has no build id\\n\",\n+\t\t\t objfile_name (obj));\n       return;\n     }\n \n@@ -118,9 +118,8 @@ index_cache::store (dwarf2_per_objfile *per_objfile)\n \n       if (dwz_build_id == nullptr)\n \t{\n-\t  if (debug_index_cache)\n-\t    printf_unfiltered (\"index cache: dwz objfile %s has no build id\\n\",\n-\t\t\t       dwz->filename ());\n+\t  index_cache_debug (\"dwz objfile %s has no build id\\n\",\n+\t\t\t     dwz->filename ());\n \t  return;\n \t}\n \n@@ -144,9 +143,8 @@ index_cache::store (dwarf2_per_objfile *per_objfile)\n \t  return;\n \t}\n \n-      if (debug_index_cache)\n-\tprintf_unfiltered (\"index cache: writing index cache for objfile %s\\n\",\n-\t\t\t   objfile_name (obj));\n+      index_cache_debug (\"writing index cache for objfile %s\\n\",\n+\t\t\t objfile_name (obj));\n \n       /* Write the index itself to the directory, using the build id as the\n \t filename.  */\n@@ -156,9 +154,8 @@ index_cache::store (dwarf2_per_objfile *per_objfile)\n     }\n   catch (const gdb_exception_error &except)\n     {\n-      if (debug_index_cache)\n-\tprintf_unfiltered (\"index cache: couldn't store index cache for objfile \"\n-\t\t\t   \"%s: %s\", objfile_name (obj), except.what ());\n+      index_cache_debug (\"couldn't store index cache for objfile \"\n+\t\t\t \"%s: %s\", objfile_name (obj), except.what ());\n     }\n }\n \n@@ -198,9 +195,8 @@ index_cache::lookup_gdb_index (const bfd_build_id *build_id,\n \n   try\n     {\n-      if (debug_index_cache)\n-\tprintf_unfiltered (\"index cache: trying to read %s\\n\",\n-\t\t\t   filename.c_str ());\n+      index_cache_debug (\"trying to read %s\\n\",\n+\t\t\t filename.c_str ());\n \n       /* Try to map that file.  */\n       index_cache_resource_mmap *mmap_resource\n@@ -215,9 +211,8 @@ index_cache::lookup_gdb_index (const bfd_build_id *build_id,\n     }\n   catch (const gdb_exception_error &except)\n     {\n-      if (debug_index_cache)\n-\tprintf_unfiltered (\"index cache: couldn't read %s: %s\\n\",\n-\t\t\t   filename.c_str (), except.what ());\n+      index_cache_debug (\"couldn't read %s: %s\\n\",\n+\t\t\t filename.c_str (), except.what ());\n     }\n \n   return {};"
    }
  ]
}