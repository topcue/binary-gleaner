{
  "sha": "2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM3YzU1NTRkZjE5ZTQxMGVhM2E3ZDc4YjBjMTQzNTk2N2E0YmM2Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T02:52:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T03:30:55Z"
    },
    "message": "file size check in _bfd_alloc_and_read\n\n\t* coffgen.c (_bfd_coff_get_external_symbols): Remove file size check.\n\t* elf.c (bfd_elf_get_str_section): Likewise.\n\t(_bfd_elf_slurp_version_tables): Likewise.\n\t* libbfd-in.h (_bfd_constant_p): Define.\n\t(_bfd_alloc_and_read, _bfd_malloc_and_read): Check read size against\n\tfile size before allocating memory.\n\t* libbfd.h: Regenerate.",
    "tree": {
      "sha": "ef0005f480637a4a474d1b23ff632caae8bf129c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ef0005f480637a4a474d1b23ff632caae8bf129c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2bb3687ba8720558082d1575823868286d7916b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bb3687ba8720558082d1575823868286d7916b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2bb3687ba8720558082d1575823868286d7916b5"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 67,
    "deletions": 25
  },
  "files": [
    {
      "sha": "e68e55850522718eca0ad6f5ca57c05efa092efd",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
      "patch": "@@ -1,3 +1,13 @@\n+2020-02-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* libbfd-in.h (_bfd_constant_p): Define.\n+\t(_bfd_alloc_and_read, _bfd_malloc_and_read): Check read size against\n+\tfile size before allocating memory.\n+\t* coffgen.c (_bfd_coff_get_external_symbols): Remove file size check.\n+\t* elf.c (bfd_elf_get_str_section): Likewise.\n+\t(_bfd_elf_slurp_version_tables): Likewise.\n+\t* libbfd.h: Regenerate.\n+\n 2020-02-19  Alan Modra  <amodra@gmail.com>\n \n \t* libbfd-in.h (_bfd_alloc_and_read, _bfd_malloc_and_read): New."
    },
    {
      "sha": "daaaba95c588d10ac29181223d140a5348f7058f",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
      "patch": "@@ -1632,20 +1632,14 @@ _bfd_coff_get_external_symbols (bfd *abfd)\n   size_t symesz;\n   size_t size;\n   void * syms;\n-  ufile_ptr filesize;\n \n   if (obj_coff_external_syms (abfd) != NULL)\n     return TRUE;\n \n-  /* Check for integer overflow and for unreasonable symbol counts.  */\n-  filesize = bfd_get_file_size (abfd);\n   symesz = bfd_coff_symesz (abfd);\n-  if (_bfd_mul_overflow (obj_raw_syment_count (abfd), symesz, &size)\n-      || (filesize != 0 && size > filesize))\n+  if (_bfd_mul_overflow (obj_raw_syment_count (abfd), symesz, &size))\n     {\n       bfd_set_error (bfd_error_file_truncated);\n-      _bfd_error_handler (_(\"%pB: corrupt symbol count: %#\" PRIx64 \"\"),\n-\t\t\t  abfd, (uint64_t) obj_raw_syment_count (abfd));\n       return FALSE;\n     }\n "
    },
    {
      "sha": "deb93b0a5a9f27f5dafce99473f2c65aa0663501",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
      "patch": "@@ -296,7 +296,6 @@ bfd_elf_get_str_section (bfd *abfd, unsigned int shindex)\n       /* Allocate and clear an extra byte at the end, to prevent crashes\n \t in case the string table is not terminated.  */\n       if (shstrtabsize + 1 <= 1\n-\t  || shstrtabsize > bfd_get_file_size (abfd)\n \t  || bfd_seek (abfd, offset, SEEK_SET) != 0\n \t  || (shstrtab = _bfd_alloc_and_read (abfd, shstrtabsize + 1,\n \t\t\t\t\t      shstrtabsize)) == NULL)\n@@ -8586,19 +8585,6 @@ _bfd_elf_slurp_version_tables (bfd *abfd, bfd_boolean default_imported_symver)\n \t  goto error_return;\n \t}\n \n-      ufile_ptr filesize = bfd_get_file_size (abfd);\n-      if (filesize > 0 && filesize < hdr->sh_size)\n-\t{\n-\t  /* PR 24708: Avoid attempts to allocate a ridiculous amount\n-\t     of memory.  */\n-\t  bfd_set_error (bfd_error_no_memory);\n-\t  _bfd_error_handler\n-\t    /* xgettext:c-format */\n-\t    (_(\"error: %pB version reference section is too large (%#\" PRIx64 \" bytes)\"),\n-\t     abfd, (uint64_t) hdr->sh_size);\n-\t  goto error_return_verref;\n-\t}\n-\n       if (bfd_seek (abfd, hdr->sh_offset, SEEK_SET) != 0)\n \tgoto error_return_verref;\n       contents = _bfd_malloc_and_read (abfd, hdr->sh_size, hdr->sh_size);"
    },
    {
      "sha": "6d796b7ef8952f28aa3932a959adda54b93cb0a4",
      "filename": "bfd/libbfd-in.h",
      "status": "modified",
      "additions": 28,
      "deletions": 2,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/libbfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/libbfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd-in.h?ref=2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
      "patch": "@@ -904,10 +904,26 @@ extern bfd_vma _bfd_safe_read_leb128\n   ((*res) = (a), (*res) *= (b), (b) != 0 && (*res) / (b) != (a))\n #endif\n \n+#ifdef __GNUC__\n+#define _bfd_constant_p(v) __builtin_constant_p (v)\n+#else\n+#define _bfd_constant_p(v) 0\n+#endif\n+\n static inline bfd_byte *\n _bfd_alloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n {\n-  bfd_byte *mem = bfd_alloc (abfd, asize);\n+  bfd_byte *mem;\n+  if (!_bfd_constant_p (rsize))\n+    {\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+      if (filesize != 0 && rsize > filesize)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return NULL;\n+\t}\n+    }\n+  mem = bfd_alloc (abfd, asize);\n   if (mem != NULL)\n     {\n       if (bfd_bread (mem, rsize, abfd) == rsize)\n@@ -920,7 +936,17 @@ _bfd_alloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n static inline bfd_byte *\n _bfd_malloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n {\n-  bfd_byte *mem = bfd_malloc (asize);\n+  bfd_byte *mem;\n+  if (!_bfd_constant_p (rsize))\n+    {\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+      if (filesize != 0 && rsize > filesize)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return NULL;\n+\t}\n+    }\n+  mem = bfd_malloc (asize);\n   if (mem != NULL)\n     {\n       if (bfd_bread (mem, rsize, abfd) == rsize)"
    },
    {
      "sha": "2391500c330cfb17723b6a73ba3caa38a50c51a2",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 28,
      "deletions": 2,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7c5554df19e410ea3a7d78b0c1435967a4bc62/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=2c7c5554df19e410ea3a7d78b0c1435967a4bc62",
      "patch": "@@ -909,10 +909,26 @@ extern bfd_vma _bfd_safe_read_leb128\n   ((*res) = (a), (*res) *= (b), (b) != 0 && (*res) / (b) != (a))\n #endif\n \n+#ifdef __GNUC__\n+#define _bfd_constant_p(v) __builtin_constant_p (v)\n+#else\n+#define _bfd_constant_p(v) 0\n+#endif\n+\n static inline bfd_byte *\n _bfd_alloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n {\n-  bfd_byte *mem = bfd_alloc (abfd, asize);\n+  bfd_byte *mem;\n+  if (!_bfd_constant_p (rsize))\n+    {\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+      if (filesize != 0 && rsize > filesize)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return NULL;\n+\t}\n+    }\n+  mem = bfd_alloc (abfd, asize);\n   if (mem != NULL)\n     {\n       if (bfd_bread (mem, rsize, abfd) == rsize)\n@@ -925,7 +941,17 @@ _bfd_alloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n static inline bfd_byte *\n _bfd_malloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n {\n-  bfd_byte *mem = bfd_malloc (asize);\n+  bfd_byte *mem;\n+  if (!_bfd_constant_p (rsize))\n+    {\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+      if (filesize != 0 && rsize > filesize)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return NULL;\n+\t}\n+    }\n+  mem = bfd_malloc (asize);\n   if (mem != NULL)\n     {\n       if (bfd_bread (mem, rsize, abfd) == rsize)"
    }
  ]
}