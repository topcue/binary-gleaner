{
  "sha": "da4977e00b73835180ccbce8a2046705fd8ade62",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGE0OTc3ZTAwYjczODM1MTgwY2NiY2U4YTIwNDY3MDVmZDhhZGU2Mg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-09T06:46:22Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-09T06:46:22Z"
    },
    "message": "x86: don't ignore mandatory pseudo prefixes\n\n{vex}, {vex3}, and {evex} are mandatory prefixes, and hence should not\nbe randomly ignored. Fix this for insns without operands as well as for\ninsns referencing the high 16 [XYZ]MM registers. To achieve the former,\nre-purpose VEX_check_operands(), renaming it to VEX_check_encoding() and\nmoving its only operand check to check_VecOperands().\n\nThis involves fixing a testcase relying on {vex2} to get ignored.",
    "tree": {
      "sha": "edb1fa324d09080d8f375d40dd3db17ba7b3a02f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/edb1fa324d09080d8f375d40dd3db17ba7b3a02f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/da4977e00b73835180ccbce8a2046705fd8ade62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/da4977e00b73835180ccbce8a2046705fd8ade62",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/da4977e00b73835180ccbce8a2046705fd8ade62",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/da4977e00b73835180ccbce8a2046705fd8ade62/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/efb2a7b412c2c78eaf6d3b63f153a749fcde292c"
    }
  ],
  "stats": {
    "total": 115,
    "additions": 89,
    "deletions": 26
  },
  "files": [
    {
      "sha": "176b07adb42d54950310a5ae6c4845ef1a3c5b2d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/da4977e00b73835180ccbce8a2046705fd8ade62/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/da4977e00b73835180ccbce8a2046705fd8ade62/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=da4977e00b73835180ccbce8a2046705fd8ade62",
      "patch": "@@ -1,3 +1,18 @@\n+2020-06-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (vex_encoding_error): New enumerator.\n+\t(VEX_check_operands): Rename to VEX_check_encoding. Check\n+\tfor vex_encoding_error. Move Imm4 handling ...\n+\t(check_VecOperands): ... here.\n+\t(match_template): Call VEX_check_encoding when there are no\n+\toperands. Split construct calling check_VecOperands and\n+\tVEX_check_encoding (when there are operands).\n+\t(check_register): Don't blindly set vex_encoding_evex.\n+\t* testsuite/gas/i386/pseudos-bad.s,\n+\ttestsuite/gas/i386/pseudos-bad.l: New.\n+\t* testsuite/gas/i386/i386.exp: Run new test.\n+\t* testsuite/gas/i386/xmmhi64.s: Drop {vex2}.\n+\n 2020-06-08  Alex Coplan  <alex.coplan@arm.com>\n \n \t* config/tc-arm.c (insns): Add dfb."
    },
    {
      "sha": "c5fff6f21aac48da9dbb7569a6ac8d9379a9650c",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 47,
      "deletions": 23,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/da4977e00b73835180ccbce8a2046705fd8ade62/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/da4977e00b73835180ccbce8a2046705fd8ade62/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=da4977e00b73835180ccbce8a2046705fd8ade62",
      "patch": "@@ -424,7 +424,8 @@ struct _i386_insn\n \tvex_encoding_default = 0,\n \tvex_encoding_vex,\n \tvex_encoding_vex3,\n-\tvex_encoding_evex\n+\tvex_encoding_evex,\n+\tvex_encoding_error\n       } vec_encoding;\n \n     /* REP prefix.  */\n@@ -5999,6 +6000,20 @@ check_VecOperands (const insn_template *t)\n \t}\n     }\n \n+  /* Check the special Imm4 cases; must be the first operand.  */\n+  if (t->cpu_flags.bitfield.cpuxop && t->operands == 5)\n+    {\n+      if (i.op[0].imms->X_op != O_constant\n+\t  || !fits_in_imm4 (i.op[0].imms->X_add_number))\n+\t{\n+\t  i.error = bad_imm4;\n+\t  return 1;\n+\t}\n+\n+      /* Turn off Imm<N> so that update_imm won't complain.  */\n+      operand_type_set (&i.types[0], 0);\n+    }\n+\n   /* Check vector Disp8 operand.  */\n   if (t->opcode_modifier.disp8memshift\n       && i.disp_encoding != disp_encoding_32bit)\n@@ -6068,12 +6083,17 @@ check_VecOperands (const insn_template *t)\n   return 0;\n }\n \n-/* Check if operands are valid for the instruction.  Update VEX\n-   operand types.  */\n+/* Check if encoding requirements are met by the instruction.  */\n \n static int\n-VEX_check_operands (const insn_template *t)\n+VEX_check_encoding (const insn_template *t)\n {\n+  if (i.vec_encoding == vex_encoding_error)\n+    {\n+      i.error = unsupported;\n+      return 1;\n+    }\n+\n   if (i.vec_encoding == vex_encoding_evex)\n     {\n       /* This instruction must be encoded with EVEX prefix.  */\n@@ -6096,20 +6116,6 @@ VEX_check_operands (const insn_template *t)\n       return 0;\n     }\n \n-  /* Check the special Imm4 cases; must be the first operand.  */\n-  if (t->cpu_flags.bitfield.cpuxop && t->operands == 5)\n-    {\n-      if (i.op[0].imms->X_op != O_constant\n-\t  || !fits_in_imm4 (i.op[0].imms->X_add_number))\n-\t{\n-\t  i.error = bad_imm4;\n-\t  return 1;\n-\t}\n-\n-      /* Turn off Imm<N> so that update_imm won't complain.  */\n-      operand_type_set (&i.types[0], 0);\n-    }\n-\n   return 0;\n }\n \n@@ -6265,8 +6271,16 @@ match_template (char mnem_suffix)\n \n       /* Do not verify operands when there are none.  */\n       if (!t->operands)\n-\t/* We've found a match; break out of loop.  */\n-\tbreak;\n+\t{\n+\t  if (VEX_check_encoding (t))\n+\t    {\n+\t      specific_error = i.error;\n+\t      continue;\n+\t    }\n+\n+\t  /* We've found a match; break out of loop.  */\n+\t  break;\n+\t}\n \n       if (!t->opcode_modifier.jump\n \t  || t->opcode_modifier.jump == JUMP_ABSOLUTE)\n@@ -6509,8 +6523,15 @@ match_template (char mnem_suffix)\n \t     slip through to break.  */\n \t}\n \n-      /* Check if vector and VEX operands are valid.  */\n-      if (check_VecOperands (t) || VEX_check_operands (t))\n+      /* Check if vector operands are valid.  */\n+      if (check_VecOperands (t))\n+\t{\n+\t  specific_error = i.error;\n+\t  continue;\n+\t}\n+\n+      /* Check if VEX/EVEX encoding requirements can be satisfied.  */\n+      if (VEX_check_encoding (t))\n \t{\n \t  specific_error = i.error;\n \t  continue;\n@@ -12394,7 +12415,10 @@ static bfd_boolean check_register (const reg_entry *r)\n \t  || flag_code != CODE_64BIT)\n \treturn FALSE;\n \n-      i.vec_encoding = vex_encoding_evex;\n+      if (i.vec_encoding == vex_encoding_default)\n+\ti.vec_encoding = vex_encoding_evex;\n+      else if (i.vec_encoding != vex_encoding_evex)\n+\ti.vec_encoding = vex_encoding_error;\n     }\n \n   if (((r->reg_flags & (RegRex64 | RegRex)) || r->reg_type.bitfield.qword)"
    },
    {
      "sha": "7494afd2138c4c2a79b564a6e52443a48959c952",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=da4977e00b73835180ccbce8a2046705fd8ade62",
      "patch": "@@ -492,6 +492,7 @@ if [expr ([istarget \"i*86-*-*\"] ||  [istarget \"x86_64-*-*\"]) && [gas_32_check]]\n     run_list_test \"cet-ibt-inval\"\n     run_list_test \"cet-shstk-inval\"\n     run_dump_test \"pseudos\"\n+    run_list_test \"pseudos-bad\"\n     run_dump_test \"notrack\"\n     run_dump_test \"notrack-intel\"\n     run_list_test \"notrackbad\" \"-al\"\n@@ -1074,6 +1075,7 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n     run_list_test \"x86-64-cet-ibt-inval\"\n     run_list_test \"x86-64-cet-shstk-inval\"\n     run_dump_test \"x86-64-pseudos\"\n+    run_list_test \"x86-64-pseudos-bad\"\n     run_dump_test \"x86-64-notrack\"\n     run_dump_test \"x86-64-notrack-intel\"\n     run_list_test \"x86-64-notrackbad\" \"-al\""
    },
    {
      "sha": "7fbe18729562445a1399d09e8d1a67eea7ddb3e3",
      "filename": "gas/testsuite/gas/i386/pseudos-bad.l",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/pseudos-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/pseudos-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/pseudos-bad.l?ref=da4977e00b73835180ccbce8a2046705fd8ade62",
      "patch": "@@ -0,0 +1,9 @@\n+.*: Assembler messages:\n+.*:3: Error: .*`nop'.*\n+.*:4: Error: .*`nop'.*\n+.*:6: Error: .*`nop'.*\n+.*:7: Error: .*`nop'.*\n+.*:9: Error: .*`nop'.*\n+.*:10: Error: .*`nop'.*\n+.*:12: Error: .*`vzeroall'.*\n+.*:13: Error: .*`vmovmskps'.*"
    },
    {
      "sha": "0d57cbf6275c788e61c8ee971a76fc8ba048285c",
      "filename": "gas/testsuite/gas/i386/pseudos-bad.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/pseudos-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/pseudos-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/pseudos-bad.s?ref=da4977e00b73835180ccbce8a2046705fd8ade62",
      "patch": "@@ -0,0 +1,13 @@\n+\t.text\n+pseudos:\n+\t{vex} nop\n+\t{vex} nop %eax\n+\n+\t{vex3} nop\n+\t{vex3} nop %eax\n+\n+\t{evex} nop\n+\t{evex} nop %eax\n+\n+\t{evex} vzeroall\n+\t{evex} vmovmskps %xmm0, %eax"
    },
    {
      "sha": "ecac05ce146710f2f6a7a8fd3c936150e4387d65",
      "filename": "gas/testsuite/gas/i386/xmmhi64.s",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/xmmhi64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/da4977e00b73835180ccbce8a2046705fd8ade62/gas/testsuite/gas/i386/xmmhi64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/xmmhi64.s?ref=da4977e00b73835180ccbce8a2046705fd8ade62",
      "patch": "@@ -2,6 +2,6 @@\n \t.intel_syntax noprefix\n \t.code64\n xmm:\n-\t{vex2} vaddps\txmm0, xmm1, xmm16\n-\t{vex2} vaddps\tymm0, ymm1, ymm16\n-\t{vex2} vaddps\tzmm0, zmm1, zmm16\n+\tvaddps\txmm0, xmm1, xmm16\n+\tvaddps\tymm0, ymm1, ymm16\n+\tvaddps\tzmm0, zmm1, zmm16"
    }
  ]
}