{
  "sha": "1aff7173105c9540bbbef75727aa200f5c288b2e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWFmZjcxNzMxMDVjOTU0MGJiYmVmNzU3MjdhYTIwMGY1YzI4OGIyZQ==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-06-01T20:42:29Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-07-27T20:35:53Z"
    },
    "message": "dwarf2-frame.c: Fix FDE processing bug involving non-contiguous ranges\n\nIn the course of revising the test case for\ngdb.dwarf2/dw2-ranges-func.exp, I added a new .c file which would\ncause the \"cold\" range to be at a higher address than the rest of the\nfunction.  In these tests, the range in question isn't really cold in\nthe sense that a compiler has determined that it'll be executed less\nfrequently.  Instead, it's simply the range that does not include the\nentry pc.  These tests are intended to mimic the output of such a\ncompiler, so I'll continue to refer to this range as \"cold\" in the\nfollowing discussion.\n\nThe original test case had only tested a cold range placed\nat lower addresses than the rest of the function.  During testing of the\nnew code where the cold range was placed at higher addresses, I found\nthat I could produce the following backtrace:\n\n    (gdb) bt\n    #0  0x0000000000401138 in baz ()\n\tat dw2-ranges-func-hi-cold.c:72\n    #1  0x0000000000401131 in foo_cold ()\n\tat dw2-ranges-func-hi-cold.c:64\n    #2  0x000000000040111e in foo ()\n\tat dw2-ranges-func-hi-cold.c:50\n    #3  0x0000000000401144 in main ()\n\tat dw2-ranges-func-hi-cold.c:78\n\nThis is correct, except that we'd like to see foo() listed instead\nof foo_cold().  (I handle that problem in another patch.)\n\nNow look at what happens for a similar backtrace where the cold range\nis at a lower address than the foo's entry pc:\n\n    (gdb) bt\n    #0  0x000000000040110a in baz ()\n\tat dw2-ranges-func-lo-cold.c:48\n    #1  0x0000000000401116 in foo ()\n\tat dw2-ranges-func-lo-cold.c:54\n    #2  0x00007fffffffd4c0 in ?? ()\n    #3  0x0000000000401138 in foo ()\n\tat dw2-ranges-func-lo-cold.c:70\n\nNote that the backtrace doesn't go all the way back to main().  Moreover,\nframe #2 is messed up.\n\nI had seen this behavior when I had worked on the non-contiguous\naddress problem last year.  At the time I convinced myself that the\nmangled backtrace was \"okay\" since we're doing strange things with\nthe DWARF assembler.  We're taking a function called foo_cold (though\nit was originally called foo_low - my recent changes to the test case\nchanged the name) and via the magic of the DWARF assembler, we're\ncombining it into a separate (non-contiguous) range for foo.  Thus,\nit was a surprise to me when I got a good and complete backtrace when\nthe cold symbol is placed at an address that's greater than entry pc.\n\nThe function dwarf2_frame_cache (in dwarf2-frame.c) is making this\ncall:\n\n    if (get_frame_func_if_available (this_frame, &entry_pc)) ...\n\nIf that call succeeds (returns a true value), the FDE is then\nprocessed up to the entry pc.  It doesn't make sense to do this,\nhowever, when the FDE in question does not contain the entry pc.  This\ncan happen when the function in question is comprised of more than one\n(non-contiguous) address range.\n\nMy fix is to add some comparisons to the test above to ensure that\nENTRY_PC is within the address range covered by the FDE.\n\ngdb/ChangeLog:\n\n\t* dwarf2-frame.c (dwarf2_frame_cache): Don't decode FDE instructions\n\tfor entry pc when entry pc is out of range for that FDE.",
    "tree": {
      "sha": "27824e5e36806308a85a5cb141cf6a2401f3d6ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/27824e5e36806308a85a5cb141cf6a2401f3d6ea"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1aff7173105c9540bbbef75727aa200f5c288b2e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1aff7173105c9540bbbef75727aa200f5c288b2e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1aff7173105c9540bbbef75727aa200f5c288b2e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1aff7173105c9540bbbef75727aa200f5c288b2e/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2dc80cf8a5799120fd4e00199688f721e7de2a62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2dc80cf8a5799120fd4e00199688f721e7de2a62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2dc80cf8a5799120fd4e00199688f721e7de2a62"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 14,
    "deletions": 1
  },
  "files": [
    {
      "sha": "a3c6bcfeaf4e1891694f396fe2e243b72a7d982f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1aff7173105c9540bbbef75727aa200f5c288b2e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1aff7173105c9540bbbef75727aa200f5c288b2e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1aff7173105c9540bbbef75727aa200f5c288b2e",
      "patch": "@@ -15,6 +15,13 @@\n \tRestrict cases in which use of minimal symbol is preferred to that\n \tof a found symbol.  Update comments.\n \n+\t* dwarf2-frame.c (dwarf2_frame_cache): Don't decode FDE instructions\n+\tfor entry pc when entry pc is out of range for that FDE.\n+\n+\t* printcmd.c (print_address_symbolic): Print negative offsets.\n+\t(build_address_symbolic): Force signed arithmetic when computing\n+\toffset.\n+\n 2019-07-26  Brian Callahan  <bcallah@openbsd.org>\n \n \tPR gdb/24839:"
    },
    {
      "sha": "7839942b8c7f5c3ff38b8acb6921ffb24f97d817",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1aff7173105c9540bbbef75727aa200f5c288b2e/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1aff7173105c9540bbbef75727aa200f5c288b2e/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=1aff7173105c9540bbbef75727aa200f5c288b2e",
      "patch": "@@ -1023,7 +1023,13 @@ dwarf2_frame_cache (struct frame_info *this_frame, void **this_cache)\n   /* Save the initialized register set.  */\n   fs.initial = fs.regs;\n \n-  if (get_frame_func_if_available (this_frame, &entry_pc))\n+  /* Fetching the entry pc for THIS_FRAME won't necessarily result\n+     in an address that's within the range of FDE locations.  This\n+     is due to the possibility of the function occupying non-contiguous\n+     ranges.  */\n+  if (get_frame_func_if_available (this_frame, &entry_pc)\n+      && fde->initial_location <= entry_pc\n+      && entry_pc < fde->initial_location + fde->address_range)\n     {\n       /* Decode the insns in the FDE up to the entry PC.  */\n       instr = execute_cfa_program (fde, fde->instructions, fde->end, gdbarch,"
    }
  ]
}