{
  "sha": "8b31193aa9752ba60d63cedaba943370d76ce543",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGIzMTE5M2FhOTc1MmJhNjBkNjNjZWRhYmE5NDMzNzBkNzZjZTU0Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-11-24T16:58:20Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T01:28:15Z"
    },
    "message": "Remove ALL_OBJFILES and ALL_FILETABS\n\nThis removes the ALL_OBJFILES and ALL_FILETABS macros, replacing them\nwith ranged for loops.\n\ngdb/ChangeLog\n2019-01-09  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (find_line_symtab, info_sources_command)\n\t(make_source_files_completion_list): Use objfile_compunits.\n\t* source.c (select_source_symtab): Use objfile_compunits.\n\t* objfiles.h (struct objfile): Update comment.\n\t(ALL_OBJFILES): Remove.\n\t(ALL_FILETABS): Remove.\n\t* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_files): Use\n\tobjfile_compunits.",
    "tree": {
      "sha": "3e6787e80428ab357880409a63be7a620b769ffd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3e6787e80428ab357880409a63be7a620b769ffd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8b31193aa9752ba60d63cedaba943370d76ce543",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b31193aa9752ba60d63cedaba943370d76ce543",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8b31193aa9752ba60d63cedaba943370d76ce543",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b31193aa9752ba60d63cedaba943370d76ce543/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d5da8b3c0d99e71c27832a4e9b60c61eebf9767c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5da8b3c0d99e71c27832a4e9b60c61eebf9767c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d5da8b3c0d99e71c27832a4e9b60c61eebf9767c"
    }
  ],
  "stats": {
    "total": 209,
    "additions": 114,
    "deletions": 95
  },
  "files": [
    {
      "sha": "8452837430b61405e02b3e1d9090cfb9898ee5c5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8b31193aa9752ba60d63cedaba943370d76ce543",
      "patch": "@@ -1,3 +1,14 @@\n+2019-01-09  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (find_line_symtab, info_sources_command)\n+\t(make_source_files_completion_list): Use objfile_compunits.\n+\t* source.c (select_source_symtab): Use objfile_compunits.\n+\t* objfiles.h (struct objfile): Update comment.\n+\t(ALL_OBJFILES): Remove.\n+\t(ALL_FILETABS): Remove.\n+\t* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_files): Use\n+\tobjfile_compunits.\n+\n 2019-01-09  Tom Tromey  <tom@tromey.com>\n \n \t* symmisc.c (print_objfile_statistics, dump_objfile)"
    },
    {
      "sha": "2071b9fcb4d7d88dae46390b8eb666829e7bb0d6",
      "filename": "gdb/mi/mi-cmd-file.c",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/mi/mi-cmd-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/mi/mi-cmd-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-file.c?ref=8b31193aa9752ba60d63cedaba943370d76ce543",
      "patch": "@@ -84,7 +84,6 @@ void\n mi_cmd_file_list_exec_source_files (const char *command, char **argv, int argc)\n {\n   struct ui_out *uiout = current_uiout;\n-  struct objfile *objfile;\n \n   if (!mi_valid_noargs (\"-file-list-exec-source-files\", argc, argv))\n     error (_(\"-file-list-exec-source-files: Usage: No args\"));\n@@ -93,15 +92,21 @@ mi_cmd_file_list_exec_source_files (const char *command, char **argv, int argc)\n   uiout->begin (ui_out_type_list, \"files\");\n \n   /* Look at all of the file symtabs.  */\n-  ALL_FILETABS (objfile, cu, s)\n-  {\n-    uiout->begin (ui_out_type_tuple, NULL);\n-\n-    uiout->field_string (\"file\", symtab_to_filename_for_display (s));\n-    uiout->field_string (\"fullname\", symtab_to_fullname (s));\n-\n-    uiout->end (ui_out_type_tuple);\n-  }\n+  for (objfile *objfile : all_objfiles (current_program_space))\n+    {\n+      for (compunit_symtab *cu : objfile_compunits (objfile))\n+\t{\n+\t  for (symtab *s : compunit_filetabs (cu))\n+\t    {\n+\t      uiout->begin (ui_out_type_tuple, NULL);\n+\n+\t      uiout->field_string (\"file\", symtab_to_filename_for_display (s));\n+\t      uiout->field_string (\"fullname\", symtab_to_fullname (s));\n+\n+\t      uiout->end (ui_out_type_tuple);\n+\t    }\n+\t}\n+    }\n \n   map_symbol_filenames (print_partial_file_name, NULL,\n \t\t\t1 /*need_fullname*/);"
    },
    {
      "sha": "b8d5b657679e0f9b5db8575cf350caf0a34a0ee7",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 1,
      "deletions": 17,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=8b31193aa9752ba60d63cedaba943370d76ce543",
      "patch": "@@ -430,7 +430,7 @@ struct objfile\n      Although this is a tree structure, GDB only support one level\n      (ie a separate debug for a separate debug is not supported).  Note that\n      separate debug object are in the main chain and therefore will be\n-     visited by ALL_OBJFILES & co iterators.  Separate debug objfile always\n+     visited by all_objfiles & co iterators.  Separate debug objfile always\n      has a non-nul separate_debug_objfile_backlink.  */\n \n   /* Link to the first separate debug object, if any.  */\n@@ -604,14 +604,6 @@ class all_objfiles_safe\n   }\n };\n \n-\n-/* Traverse all object files in the current program space.  */\n-\n-#define ALL_OBJFILES(obj)\t\t\t    \\\n-  for ((obj) = current_program_space->objfiles; \\\n-       (obj) != NULL;\t\t\t\t    \\\n-       (obj) = (obj)->next)\n-\n /* A range adapter that makes it possible to iterate over all\n    compunits in one objfile.  */\n \n@@ -705,14 +697,6 @@ class objfile_msymbols\n   struct objfile *m_objfile;\n };\n \n-/* Traverse all symtabs in all objfiles in the current symbol\n-   space.  */\n-\n-#define ALL_FILETABS(objfile, ps, s)\t\t\t\t\t\\\n-  ALL_OBJFILES (objfile)\t\t\t\t\t\t\\\n-    for (compunit_symtab *ps : objfile_compunits (objfile))\t\\\n-      for (symtab *s : compunit_filetabs (cu))\n-\n #define ALL_OBJFILE_OSECTIONS(objfile, osect)\t\\\n   for (osect = objfile->sections; osect < objfile->sections_end; osect++) \\\n     if (osect->the_bfd_section == NULL)\t\t\t\t\t\\"
    },
    {
      "sha": "abe4c6cf1e35f029304b621ca3c83c7b1f207106",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=8b31193aa9752ba60d63cedaba943370d76ce543",
      "patch": "@@ -238,8 +238,6 @@ clear_current_source_symtab_and_line (void)\n void\n select_source_symtab (struct symtab *s)\n {\n-  struct objfile *ofp;\n-\n   if (s)\n     {\n       current_source_symtab = s;\n@@ -271,16 +269,22 @@ select_source_symtab (struct symtab *s)\n \n   current_source_line = 1;\n \n-  ALL_FILETABS (ofp, cu, symtab)\n+  for (objfile *ofp : all_objfiles (current_program_space))\n     {\n-      const char *name = symtab->filename;\n-      int len = strlen (name);\n-\n-      if (!(len > 2 && (strcmp (&name[len - 2], \".h\") == 0\n-\t\t\t|| strcmp (name, \"<<C++-namespaces>>\") == 0)))\n+      for (compunit_symtab *cu : objfile_compunits (ofp))\n \t{\n-\t  current_source_pspace = current_program_space;\n-\t  current_source_symtab = symtab;\n+\t  for (symtab *symtab : compunit_filetabs (cu))\n+\t    {\n+\t      const char *name = symtab->filename;\n+\t      int len = strlen (name);\n+\n+\t      if (!(len > 2 && (strcmp (&name[len - 2], \".h\") == 0\n+\t\t\t\t|| strcmp (name, \"<<C++-namespaces>>\") == 0)))\n+\t\t{\n+\t\t  current_source_pspace = current_program_space;\n+\t\t  current_source_symtab = symtab;\n+\t\t}\n+\t    }\n \t}\n     }\n "
    },
    {
      "sha": "c4343cd533bc7850339bd28ac8a5f8942df74287",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 73,
      "deletions": 58,
      "changes": 131,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b31193aa9752ba60d63cedaba943370d76ce543/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=8b31193aa9752ba60d63cedaba943370d76ce543",
      "patch": "@@ -3359,37 +3359,42 @@ find_line_symtab (struct symtab *sym_tab, int line,\n \t      (objfile, symtab_to_fullname (sym_tab));\n \t}\n \n-      struct objfile *objfile;\n-      ALL_FILETABS (objfile, cu, s)\n-      {\n-\tstruct linetable *l;\n-\tint ind;\n-\n-\tif (FILENAME_CMP (sym_tab->filename, s->filename) != 0)\n-\t  continue;\n-\tif (FILENAME_CMP (symtab_to_fullname (sym_tab),\n-\t\t\t  symtab_to_fullname (s)) != 0)\n-\t  continue;\t\n-\tl = SYMTAB_LINETABLE (s);\n-\tind = find_line_common (l, line, &exact, 0);\n-\tif (ind >= 0)\n-\t  {\n-\t    if (exact)\n-\t      {\n-\t\tbest_index = ind;\n-\t\tbest_linetable = l;\n-\t\tbest_symtab = s;\n-\t\tgoto done;\n-\t      }\n-\t    if (best == 0 || l->item[ind].line < best)\n-\t      {\n-\t\tbest = l->item[ind].line;\n-\t\tbest_index = ind;\n-\t\tbest_linetable = l;\n-\t\tbest_symtab = s;\n-\t      }\n-\t  }\n-      }\n+      for (objfile *objfile : all_objfiles (current_program_space))\n+\t{\n+\t  for (compunit_symtab *cu : objfile_compunits (objfile))\n+\t    {\n+\t      for (symtab *s : compunit_filetabs (cu))\n+\t\t{\n+\t\t  struct linetable *l;\n+\t\t  int ind;\n+\n+\t\t  if (FILENAME_CMP (sym_tab->filename, s->filename) != 0)\n+\t\t    continue;\n+\t\t  if (FILENAME_CMP (symtab_to_fullname (sym_tab),\n+\t\t\t\t    symtab_to_fullname (s)) != 0)\n+\t\t    continue;\t\n+\t\t  l = SYMTAB_LINETABLE (s);\n+\t\t  ind = find_line_common (l, line, &exact, 0);\n+\t\t  if (ind >= 0)\n+\t\t    {\n+\t\t      if (exact)\n+\t\t\t{\n+\t\t\t  best_index = ind;\n+\t\t\t  best_linetable = l;\n+\t\t\t  best_symtab = s;\n+\t\t\t  goto done;\n+\t\t\t}\n+\t\t      if (best == 0 || l->item[ind].line < best)\n+\t\t\t{\n+\t\t\t  best = l->item[ind].line;\n+\t\t\t  best_index = ind;\n+\t\t\t  best_linetable = l;\n+\t\t\t  best_symtab = s;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n     }\n done:\n   if (best_index < 0)\n@@ -4180,7 +4185,6 @@ output_partial_symbol_filename (const char *filename, const char *fullname,\n static void\n info_sources_command (const char *ignore, int from_tty)\n {\n-  struct objfile *objfile;\n   struct output_source_filename_data data;\n \n   if (!have_full_symbols () && !have_partial_symbols ())\n@@ -4195,12 +4199,18 @@ info_sources_command (const char *ignore, int from_tty)\n   printf_filtered (\"Source files for which symbols have been read in:\\n\\n\");\n \n   data.first = 1;\n-  ALL_FILETABS (objfile, cu, s)\n-  {\n-    const char *fullname = symtab_to_fullname (s);\n+  for (objfile *objfile : all_objfiles (current_program_space))\n+    {\n+      for (compunit_symtab *cu : objfile_compunits (objfile))\n+\t{\n+\t  for (symtab *s : compunit_filetabs (cu))\n+\t    {\n+\t      const char *fullname = symtab_to_fullname (s);\n \n-    output_source_filename (fullname, &data);\n-  }\n+\t      output_source_filename (fullname, &data);\n+\t    }\n+\t}\n+    }\n   printf_filtered (\"\\n\\n\");\n \n   printf_filtered (\"Source files for which symbols \"\n@@ -5581,7 +5591,6 @@ maybe_add_partial_symtab_filename (const char *filename, const char *fullname,\n completion_list\n make_source_files_completion_list (const char *text, const char *word)\n {\n-  struct objfile *objfile;\n   size_t text_len = strlen (text);\n   completion_list list;\n   const char *base_name;\n@@ -5592,28 +5601,34 @@ make_source_files_completion_list (const char *text, const char *word)\n \n   filename_seen_cache filenames_seen;\n \n-  ALL_FILETABS (objfile, cu, s)\n+  for (objfile *objfile : all_objfiles (current_program_space))\n     {\n-      if (not_interesting_fname (s->filename))\n-\tcontinue;\n-      if (!filenames_seen.seen (s->filename)\n-\t  && filename_ncmp (s->filename, text, text_len) == 0)\n-\t{\n-\t  /* This file matches for a completion; add it to the current\n-\t     list of matches.  */\n-\t  add_filename_to_list (s->filename, text, word, &list);\n-\t}\n-      else\n+      for (compunit_symtab *cu : objfile_compunits (objfile))\n \t{\n-\t  /* NOTE: We allow the user to type a base name when the\n-\t     debug info records leading directories, but not the other\n-\t     way around.  This is what subroutines of breakpoint\n-\t     command do when they parse file names.  */\n-\t  base_name = lbasename (s->filename);\n-\t  if (base_name != s->filename\n-\t      && !filenames_seen.seen (base_name)\n-\t      && filename_ncmp (base_name, text, text_len) == 0)\n-\t    add_filename_to_list (base_name, text, word, &list);\n+\t  for (symtab *s : compunit_filetabs (cu))\n+\t    {\n+\t      if (not_interesting_fname (s->filename))\n+\t\tcontinue;\n+\t      if (!filenames_seen.seen (s->filename)\n+\t\t  && filename_ncmp (s->filename, text, text_len) == 0)\n+\t\t{\n+\t\t  /* This file matches for a completion; add it to the current\n+\t\t     list of matches.  */\n+\t\t  add_filename_to_list (s->filename, text, word, &list);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* NOTE: We allow the user to type a base name when the\n+\t\t     debug info records leading directories, but not the other\n+\t\t     way around.  This is what subroutines of breakpoint\n+\t\t     command do when they parse file names.  */\n+\t\t  base_name = lbasename (s->filename);\n+\t\t  if (base_name != s->filename\n+\t\t      && !filenames_seen.seen (base_name)\n+\t\t      && filename_ncmp (base_name, text, text_len) == 0)\n+\t\t    add_filename_to_list (base_name, text, word, &list);\n+\t\t}\n+\t    }\n \t}\n     }\n "
    }
  ]
}