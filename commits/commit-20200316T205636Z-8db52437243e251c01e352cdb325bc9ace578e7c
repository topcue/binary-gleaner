{
  "sha": "8db52437243e251c01e352cdb325bc9ace578e7c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGRiNTI0MzcyNDNlMjUxYzAxZTM1MmNkYjMyNWJjOWFjZTU3OGU3Yw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-03-16T20:56:36Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-03-16T20:56:36Z"
    },
    "message": "gdb: select \"Cygwin\" OS ABI for Cygwin binaries\n\nBefore this patch, the \"Windows\" OS ABI is selected for all Windows\nexecutables, including Cygwin ones.  This patch makes GDB differentiate\nCygwin binaries from non-Cygwin ones, and selects the \"Cygwin\" OS ABI\nfor the Cygwin ones.\n\nTo check whether a Windows PE executable is a Cygwin one, we check the\nlibrary list in the .idata section, see if it contains \"cygwin1.dll\".\n\nI had to add code to parse the .idata section, because BFD doesn't seem\nto expose this information.  BFD does parse this information, but only\nto print it in textual form (function pe_print_idata):\n\n  https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob;f=bfd/peXXigen.c;h=e42d646552a0ca1e856e082256cd3d943b54ddf0;hb=HEAD#l1261\n\nHere's the relevant portion of the PE format documentation:\n\n  https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#the-idata-section\n\nThis page was also useful:\n\n  https://blog.kowalczyk.info/articles/pefileformat.html#9ccef823-67e7-4372-9172-045d7b1fb006\n\nWith this patch applied, this is what I get:\n\n    (gdb) file some_mingw_x86_64_binary.exe\n    Reading symbols from some_mingw_x86_64_binary.exe...\n    (gdb) show osabi\n    The current OS ABI is \"auto\" (currently \"Windows\").\n    The default OS ABI is \"GNU/Linux\".\n\n    (gdb) file some_mingw_i386_binary.exe\n    Reading symbols from some_mingw_i386_binary.exe...\n    (gdb) show osabi\n    The current OS ABI is \"auto\" (currently \"Windows\").\n    The default OS ABI is \"GNU/Linux\".\n\n    (gdb) file some_cygwin_x86_64_binary.exe\n    Reading symbols from some_cygwin_x86_64_binary.exe...\n    (gdb) show osabi\n    The current OS ABI is \"auto\" (currently \"Cygwin\").\n    The default OS ABI is \"GNU/Linux\".\n\ngdb/ChangeLog:\n\n\t* windows-tdep.h (is_linked_with_cygwin_dll): New declaration.\n\t* windows-tdep.c (CYGWIN_DLL_NAME): New.\n\t(pe_import_directory_entry): New struct type.\n\t(is_linked_with_cygwin_dll): New function.\n\t* amd64-windows-tdep.c (amd64_windows_osabi_sniffer): Select\n\tGDB_OSABI_CYGWIN if the BFD is linked with the Cygwin DLL.\n\t* i386-windows-tdep.c (i386_windows_osabi_sniffer): Likewise.",
    "tree": {
      "sha": "440ffcb0dec2ae15a9bdd27ef31d4365070ba8a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/440ffcb0dec2ae15a9bdd27ef31d4365070ba8a0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8db52437243e251c01e352cdb325bc9ace578e7c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8db52437243e251c01e352cdb325bc9ace578e7c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8db52437243e251c01e352cdb325bc9ace578e7c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8db52437243e251c01e352cdb325bc9ace578e7c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5982a56ab9d161923e75712fcb358824748ea4ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5982a56ab9d161923e75712fcb358824748ea4ba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5982a56ab9d161923e75712fcb358824748ea4ba"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 127,
    "deletions": 6
  },
  "files": [
    {
      "sha": "68c8bf7471686ddd0db51103ff1cd7add7c8f779",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8db52437243e251c01e352cdb325bc9ace578e7c",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-16  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* windows-tdep.h (is_linked_with_cygwin_dll): New declaration.\n+\t* windows-tdep.c (CYGWIN_DLL_NAME): New.\n+\t(pe_import_directory_entry): New struct type.\n+\t(is_linked_with_cygwin_dll): New function.\n+\t* amd64-windows-tdep.c (amd64_windows_osabi_sniffer): Select\n+\tGDB_OSABI_CYGWIN if the BFD is linked with the Cygwin DLL.\n+\t* i386-windows-tdep.c (i386_windows_osabi_sniffer): Likewise.\n+\n 2020-03-16  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* i386-windows-tdep.c: Mass-rename \"cygwin\" to \"windows\", except"
    },
    {
      "sha": "e0346f8628fecf2fa6c64a2b77aea3af9aa3fb84",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=8db52437243e251c01e352cdb325bc9ace578e7c",
      "patch": "@@ -1249,10 +1249,13 @@ amd64_windows_osabi_sniffer (bfd *abfd)\n {\n   const char *target_name = bfd_get_target (abfd);\n \n-  if (strcmp (target_name, \"pei-x86-64\") == 0)\n-    return GDB_OSABI_WINDOWS;\n+  if (!streq (target_name, \"pei-x86-64\"))\n+    return GDB_OSABI_UNKNOWN;\n \n-  return GDB_OSABI_UNKNOWN;\n+  if (is_linked_with_cygwin_dll (abfd))\n+    return GDB_OSABI_CYGWIN;\n+\n+  return GDB_OSABI_WINDOWS;\n }\n \n void _initialize_amd64_windows_tdep ();"
    },
    {
      "sha": "bd6107b02f1f8e4d79f51a644c20f5b0f5a19fb1",
      "filename": "gdb/i386-windows-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/i386-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/i386-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-windows-tdep.c?ref=8db52437243e251c01e352cdb325bc9ace578e7c",
      "patch": "@@ -232,10 +232,13 @@ i386_windows_osabi_sniffer (bfd *abfd)\n {\n   const char *target_name = bfd_get_target (abfd);\n \n-  if (strcmp (target_name, \"pei-i386\") == 0)\n-    return GDB_OSABI_WINDOWS;\n+  if (!streq (target_name, \"pei-i386\"))\n+    return GDB_OSABI_UNKNOWN;\n \n-  return GDB_OSABI_UNKNOWN;\n+  if (is_linked_with_cygwin_dll (abfd))\n+    return GDB_OSABI_CYGWIN;\n+\n+  return GDB_OSABI_WINDOWS;\n }\n \n static enum gdb_osabi"
    },
    {
      "sha": "31b7b57005df67f5b02e98e92b568a0cfaea97d0",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=8db52437243e251c01e352cdb325bc9ace578e7c",
      "patch": "@@ -38,6 +38,8 @@\n #include \"libcoff.h\"\n #include \"solist.h\"\n \n+#define CYGWIN_DLL_NAME \"cygwin1.dll\"\n+\n /* Windows signal numbers differ between MinGW flavors and between\n    those and Cygwin.  The below enumeration was gleaned from the\n    respective headers; the ones marked with MinGW64/Cygwin are defined\n@@ -898,6 +900,103 @@ static const struct internalvar_funcs tlb_funcs =\n   NULL\n };\n \n+/* Layout of an element of a PE's Import Directory Table.  Based on:\n+\n+     https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#import-directory-table\n+ */\n+\n+struct pe_import_directory_entry\n+{\n+  uint32_t import_lookup_table_rva;\n+  uint32_t timestamp;\n+  uint32_t forwarder_chain;\n+  uint32_t name_rva;\n+  uint32_t import_address_table_rva;\n+};\n+\n+gdb_static_assert (sizeof (pe_import_directory_entry) == 20);\n+\n+/* See windows-tdep.h.  */\n+\n+bool\n+is_linked_with_cygwin_dll (bfd *abfd)\n+{\n+  /* The list of DLLs a PE is linked to is in the .idata section.  See:\n+\n+     https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#the-idata-section\n+   */\n+  asection *idata_section = bfd_get_section_by_name (abfd, \".idata\");\n+  if (idata_section == nullptr)\n+    return false;\n+\n+  /* Find the virtual address of the .idata section.  We must subtract this\n+     from the RVAs (relative virtual addresses) to obtain an offset in the\n+     section. */\n+  bfd_vma idata_addr =\n+    pe_data (abfd)->pe_opthdr.DataDirectory[PE_IMPORT_TABLE].VirtualAddress;\n+\n+  /* Map the section's data.  */\n+  bfd_size_type idata_size;\n+  const gdb_byte *const idata_contents\n+    = gdb_bfd_map_section (idata_section, &idata_size);\n+  if (idata_contents == nullptr)\n+    {\n+      warning (_(\"Failed to get content of .idata section.\"));\n+      return false;\n+    }\n+\n+  const gdb_byte *iter = idata_contents;\n+  const gdb_byte *end = idata_contents + idata_size;\n+  const pe_import_directory_entry null_dir_entry = { 0 };\n+\n+  /* Iterate through all directory entries.  */\n+  while (true)\n+    {\n+      /* Is there enough space left in the section for another entry?  */\n+      if (iter + sizeof (pe_import_directory_entry) > end)\n+\t{\n+\t  warning (_(\"Failed to parse .idata section: unexpected end of \"\n+\t\t     \".idata section.\"));\n+\t  break;\n+\t}\n+\n+      pe_import_directory_entry *dir_entry = (pe_import_directory_entry *) iter;\n+\n+      /* Is it the end of list marker?  */\n+      if (memcmp (dir_entry, &null_dir_entry,\n+\t\t  sizeof (pe_import_directory_entry)) == 0)\n+\tbreak;\n+\n+      bfd_vma name_addr = dir_entry->name_rva;\n+\n+      /* If the name's virtual address is smaller than the section's virtual\n+         address, there's a problem.  */\n+      if (name_addr < idata_addr\n+\t  || name_addr >= (idata_addr + idata_size))\n+\t{\n+\t  warning (_(\"\\\n+Failed to parse .idata section: name's virtual address (0x%\" BFD_VMA_FMT \"x) \\\n+is outside .idata section's range [0x%\" BFD_VMA_FMT \"x, 0x%\" BFD_VMA_FMT \"x[.\"),\n+\t\t   name_addr, idata_addr, idata_addr + idata_size);\n+\t  break;\n+\t}\n+\n+      const gdb_byte *name = &idata_contents[name_addr - idata_addr];\n+\n+      /* Make sure we don't overshoot the end of the section with the streq.  */\n+      if (name + sizeof(CYGWIN_DLL_NAME) > end)\n+\tcontinue;\n+\n+      /* Finally, check if this is the dll name we are looking for.  */\n+      if (streq ((const char *) name, CYGWIN_DLL_NAME))\n+\treturn true;\n+\n+      iter += sizeof(pe_import_directory_entry);\n+    }\n+\n+    return false;\n+}\n+\n void _initialize_windows_tdep ();\n void\n _initialize_windows_tdep ()"
    },
    {
      "sha": "f2dc4260469dda5f229b314abb4445a270a033db",
      "filename": "gdb/windows-tdep.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/windows-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8db52437243e251c01e352cdb325bc9ace578e7c/gdb/windows-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.h?ref=8db52437243e251c01e352cdb325bc9ace578e7c",
      "patch": "@@ -33,4 +33,10 @@ extern void windows_xfer_shared_library (const char* so_name,\n \n extern void windows_init_abi (struct gdbarch_info info,\n \t\t\t      struct gdbarch *gdbarch);\n+\n+/* Return true if the Portable Executable behind ABFD uses the Cygwin dll\n+   (cygwin1.dll).  */\n+\n+extern bool is_linked_with_cygwin_dll (bfd *abfd);\n+\n #endif"
    }
  ]
}