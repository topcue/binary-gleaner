{
  "sha": "f7306dac19c502232f766c3881313857915f330d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjczMDZkYWMxOWM1MDIyMzJmNzY2YzM4ODEzMTM4NTc5MTVmMzMwZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-07T14:00:30Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-21T20:57:08Z"
    },
    "message": "gdb/python: Reuse gdb.RegisterDescriptor objects where possible\n\nInstead of having the gdb.RegisterDescriptorIterator creating new\ngdb.RegisterDescriptor objects for each regnum, instead cache\ngdb.RegisterDescriptor objects on the gdbarch object and reuse these.\n\nThis means that for every gdbarch/regnum pair there is a single unique\ngdb.RegisterDescriptor, this feels like a neater implementation than\nthe existing one.\n\nIt is possible for a user to see (in Python code) that the descriptors\nare now identical, but as the descriptors are read-only this should\nmake no real difference.\n\nThere should be no other user visible changes.\n\ngdb/ChangeLog:\n\n\t* python/py-registers.c (gdbpy_register_object_data): New static\n\tglobal.\n\t(gdbpy_register_object_data_init): New function.\n\t(gdbpy_new_register_descriptor): Renamed to...\n\t(gdbpy_get_register_descriptor): ...this, and update to reuse\n\texisting register descriptors where possible.\n\t(gdbpy_register_descriptor_iter_next): Update.\n\t(gdbpy_initialize_registers): Register new gdbarch data.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-arch-reg-names.exp: Additional tests.",
    "tree": {
      "sha": "bbad3df7c454ff4eecb1064dfdb00d8e7fb3a778",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bbad3df7c454ff4eecb1064dfdb00d8e7fb3a778"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f7306dac19c502232f766c3881313857915f330d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7306dac19c502232f766c3881313857915f330d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f7306dac19c502232f766c3881313857915f330d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7306dac19c502232f766c3881313857915f330d/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "05c309a8aeb8060fdcb9a05bbcdca2f5f1be61d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05c309a8aeb8060fdcb9a05bbcdca2f5f1be61d7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/05c309a8aeb8060fdcb9a05bbcdca2f5f1be61d7"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 82,
    "deletions": 13
  },
  "files": [
    {
      "sha": "e2d2e15b653b1c087567ae7e2e9911de62f33610",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7306dac19c502232f766c3881313857915f330d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7306dac19c502232f766c3881313857915f330d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f7306dac19c502232f766c3881313857915f330d",
      "patch": "@@ -1,3 +1,14 @@\n+2020-07-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-registers.c (gdbpy_register_object_data): New static\n+\tglobal.\n+\t(gdbpy_register_object_data_init): New function.\n+\t(gdbpy_new_register_descriptor): Renamed to...\n+\t(gdbpy_get_register_descriptor): ...this, and update to reuse\n+\texisting register descriptors where possible.\n+\t(gdbpy_register_descriptor_iter_next): Update.\n+\t(gdbpy_initialize_registers): Register new gdbarch data.\n+\n 2020-07-21  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* linux-nat.c (stopped_pids): Make static."
    },
    {
      "sha": "8e22a919d87fcad3e3c8ea86a8b4f73a6a44ee5d",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 48,
      "deletions": 13,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7306dac19c502232f766c3881313857915f330d/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7306dac19c502232f766c3881313857915f330d/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=f7306dac19c502232f766c3881313857915f330d",
      "patch": "@@ -24,6 +24,9 @@\n #include \"reggroups.h\"\n #include \"python-internal.h\"\n \n+/* Token to access per-gdbarch data related to register descriptors.  */\n+static struct gdbarch_data *gdbpy_register_object_data = NULL;\n+\n /* Structure for iterator over register descriptors.  */\n typedef struct {\n   PyObject_HEAD\n@@ -81,6 +84,17 @@ typedef struct {\n extern PyTypeObject reggroup_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"reggroup_object\");\n \n+/* Associates a vector of gdb.RegisterDescriptor objects with GDBARCH as\n+   gdbarch_data via the gdbarch post init registration mechanism\n+   (gdbarch_data_register_post_init).  */\n+\n+static void *\n+gdbpy_register_object_data_init (struct gdbarch *gdbarch)\n+{\n+  std::vector<gdbpy_ref<>> *vec = new (std::vector<gdbpy_ref<>>);\n+  return (void *) vec;\n+}\n+\n /* Create a new gdb.RegisterGroup object wrapping REGGROUP.  */\n \n static PyObject *\n@@ -117,20 +131,38 @@ gdbpy_reggroup_name (PyObject *self, void *closure)\n   return gdbpy_reggroup_to_string (self);\n }\n \n-/* Create an return a new gdb.RegisterDescriptor object.  */\n-static PyObject *\n-gdbpy_new_register_descriptor (struct gdbarch *gdbarch,\n+/* Return a gdb.RegisterDescriptor object for REGNUM from GDBARCH.  For\n+   each REGNUM (in GDBARCH) only one descriptor is ever created, which is\n+   then cached on the GDBARCH.  */\n+\n+static gdbpy_ref<>\n+gdbpy_get_register_descriptor (struct gdbarch *gdbarch,\n \t\t\t       int regnum)\n {\n-  /* Create a new object and fill in its details.  */\n-  register_descriptor_object *reg\n-    = PyObject_New (register_descriptor_object,\n-\t\t    &register_descriptor_object_type);\n-  if (reg == NULL)\n-    return NULL;\n-  reg->regnum = regnum;\n-  reg->gdbarch = gdbarch;\n-  return (PyObject *) reg;\n+  auto vec = (std::vector<gdbpy_ref<>> *) gdbarch_data\n+    (gdbarch, gdbpy_register_object_data);\n+\n+  /* Ensure that we have enough entries in the vector.  */\n+  if (vec->size () <= regnum)\n+    vec->resize ((regnum + 1), nullptr);\n+\n+  /* If we don't already have a descriptor for REGNUM in GDBARCH then\n+     create one now.  */\n+  if (vec->at (regnum) == nullptr)\n+    {\n+      gdbpy_ref <register_descriptor_object> reg\n+\t(PyObject_New (register_descriptor_object,\n+\t\t       &register_descriptor_object_type));\n+      if (reg == NULL)\n+\treturn NULL;\n+      reg->regnum = regnum;\n+      reg->gdbarch = gdbarch;\n+      vec->at (regnum) = gdbpy_ref<> ((PyObject *) reg.release ());\n+    }\n+\n+  /* Grab the register descriptor from the vector, the reference count is\n+     automatically incremented thanks to gdbpy_ref.  */\n+  return vec->at (regnum);\n }\n \n /* Convert the register descriptor to a string.  */\n@@ -281,7 +313,7 @@ gdbpy_register_descriptor_iter_next (PyObject *self)\n       iter_obj->regnum++;\n \n       if (name != nullptr && *name != '\\0')\n-\treturn gdbpy_new_register_descriptor (gdbarch, regnum);\n+\treturn gdbpy_get_register_descriptor (gdbarch, regnum).release ();\n     }\n   while (true);\n }\n@@ -291,6 +323,9 @@ gdbpy_register_descriptor_iter_next (PyObject *self)\n int\n gdbpy_initialize_registers ()\n {\n+  gdbpy_register_object_data\n+    = gdbarch_data_register_post_init (gdbpy_register_object_data_init);\n+\n   register_descriptor_object_type.tp_new = PyType_GenericNew;\n   if (PyType_Ready (&register_descriptor_object_type) < 0)\n     return -1;"
    },
    {
      "sha": "6b13e92849710a2e46f35167fe12fba8f141615e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7306dac19c502232f766c3881313857915f330d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7306dac19c502232f766c3881313857915f330d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f7306dac19c502232f766c3881313857915f330d",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-arch-reg-names.exp: Additional tests.\n+\n 2020-07-21  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.reverse/solib-precsave.exp: Handle additional \"recommended"
    },
    {
      "sha": "8dd34ef5fd24f41bdf498873676613bf822865bd",
      "filename": "gdb/testsuite/gdb.python/py-arch-reg-names.exp",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7306dac19c502232f766c3881313857915f330d/gdb/testsuite/gdb.python/py-arch-reg-names.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7306dac19c502232f766c3881313857915f330d/gdb/testsuite/gdb.python/py-arch-reg-names.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-arch-reg-names.exp?ref=f7306dac19c502232f766c3881313857915f330d",
      "patch": "@@ -85,3 +85,22 @@ for { set i 0 } { $i < [llength $regs] } { incr i } {\n     }\n }\n gdb_assert { $found_non_match == 0 } \"all registers match\"\n+\n+# Check that we get the same register descriptors from two different\n+# iterators.\n+gdb_py_test_silent_cmd \\\n+    \"python iter1 = arch.registers ()\" \\\n+    \"get first all register iterator\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python iter2 = arch.registers ()\" \\\n+    \"get second all register iterator\" 0\n+gdb_py_test_silent_cmd \\\n+    [multi_line_input \\\n+\t \"python\" \\\n+\t \"for r1, r2 in zip(iter1, iter2):\" \\\n+\t \"  if (r1.name != r2.name):\"\\\n+\t \"    raise gdb.GdbError (\\\"miss-matched names\\\")\" \\\n+\t \"  if (r1 != r2):\" \\\n+\t \"    raise gdb.GdbError (\\\"miss-matched objects\\\")\" \\\n+\t \"\\004\" ] \\\n+    \"check names and objects match\" 1"
    }
  ]
}