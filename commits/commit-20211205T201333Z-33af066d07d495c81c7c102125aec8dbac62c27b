{
  "sha": "33af066d07d495c81c7c102125aec8dbac62c27b",
  "node_id": "C_kwDOANOeidoAKDMzYWYwNjZkMDdkNDk1YzgxYzdjMTAyMTI1YWVjOGRiYWM2MmMyN2I",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-05T20:13:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-05T20:13:33Z"
    },
    "message": "Preserve artificial CU name in process_psymtab_comp_unit_reader\n\nThis fixes a use-after-free that Simon pointed out.\nprocess_psymtab_comp_unit_reader was allocating an artificial name for\na CU, and then discarding it.  However, this name was preserved in the\ncached file_and_directory.  This patch arranges for the allocated name\nto be preserved there.",
    "tree": {
      "sha": "8b5490d3eb5add969f8df4a9cf471f2fa1f7c2d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b5490d3eb5add969f8df4a9cf471f2fa1f7c2d9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/33af066d07d495c81c7c102125aec8dbac62c27b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33af066d07d495c81c7c102125aec8dbac62c27b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/33af066d07d495c81c7c102125aec8dbac62c27b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33af066d07d495c81c7c102125aec8dbac62c27b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "843bf75416dd11d91a5d617f7a49f6e9e5025b42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/843bf75416dd11d91a5d617f7a49f6e9e5025b42",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/843bf75416dd11d91a5d617f7a49f6e9e5025b42"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 11,
    "deletions": 7
  },
  "files": [
    {
      "sha": "c56922ff90d202c1e6413454ca91cf8b43f5e8f2",
      "filename": "gdb/dwarf2/file-and-dir.h",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33af066d07d495c81c7c102125aec8dbac62c27b/gdb/dwarf2/file-and-dir.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33af066d07d495c81c7c102125aec8dbac62c27b/gdb/dwarf2/file-and-dir.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/file-and-dir.h?ref=33af066d07d495c81c7c102125aec8dbac62c27b",
      "patch": "@@ -84,16 +84,20 @@ struct file_and_directory\n   }\n \n   /* Set the filename.  */\n-  void set_name (const char *name)\n+  void set_name (gdb::unique_xmalloc_ptr<char> name)\n   {\n-    m_name = name;\n+    m_name_storage = std::move (name);\n+    m_name = m_name_storage.get ();\n   }\n \n private:\n \n   /* The filename.  */\n   const char *m_name;\n \n+  /* Storage for the filename, if needed.  */\n+  gdb::unique_xmalloc_ptr<char> m_name_storage;\n+\n   /* The compilation directory.  NULL if not known.  If we needed to\n      compute a new string, it will be stored in the comp_dir_storage\n      member, and this will be NULL.  Otherwise, points directly to the"
    },
    {
      "sha": "f2d7da7de52d46fbc34bb9985c8434a29e2350ce",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33af066d07d495c81c7c102125aec8dbac62c27b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33af066d07d495c81c7c102125aec8dbac62c27b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=33af066d07d495c81c7c102125aec8dbac62c27b",
      "patch": "@@ -6986,15 +6986,15 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n   prepare_one_comp_unit (cu, comp_unit_die, pretend_language);\n \n   /* Allocate a new partial symbol table structure.  */\n-  gdb::unique_xmalloc_ptr<char> debug_filename;\n   static const char artificial[] = \"<artificial>\";\n   file_and_directory &fnd = find_file_and_directory (comp_unit_die, cu);\n   if (strcmp (fnd.get_name (), artificial) == 0)\n     {\n-      debug_filename.reset (concat (artificial, \"@\",\n-\t\t\t\t    sect_offset_str (per_cu->sect_off),\n-\t\t\t\t    (char *) NULL));\n-      fnd.set_name (debug_filename.get ());\n+      gdb::unique_xmalloc_ptr<char> debug_filename\n+\t(concat (artificial, \"@\",\n+\t\t sect_offset_str (per_cu->sect_off),\n+\t\t (char *) NULL));\n+      fnd.set_name (std::move (debug_filename));\n     }\n \n   pst = create_partial_symtab (per_cu, per_objfile, fnd.get_name ());"
    }
  ]
}