{
  "sha": "de0718729053b7c558166f3cc1a7d170c48a25de",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGUwNzE4NzI5MDUzYjdjNTU4MTY2ZjNjYzFhN2QxNzBjNDhhMjVkZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-30T16:22:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-30T16:22:24Z"
    },
    "message": "Use nat/windows-nat function indirection code\n\nThis changes gdbserver to use the function indirection code that was\njust moved into nat/windows-nat.[ch].  One additional function is used\nby gdbserver that was not used by gdb.\n\ngdb/ChangeLog\n2021-04-30  Tom Tromey  <tromey@adacore.com>\n\n\t* nat/windows-nat.h (GenerateConsoleCtrlEvent): New define.\n\t(GenerateConsoleCtrlEvent_ftype, GenerateConsoleCtrlEvent):\n\tDeclare.\n\t* nat/windows-nat.c (GenerateConsoleCtrlEvent): Define.\n\t(initialize_loadable): Initialize GenerateConsoleCtrlEvent.\n\ngdbserver/ChangeLog\n2021-04-30  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.cc (GETPROCADDRESS): Remove.\n\t(winapi_DebugActiveProcessStop, winapi_DebugSetProcessKillOnExit)\n\t(winapi_DebugBreakProcess, winapi_GenerateConsoleCtrlEvent)\n\t(winapi_Wow64SetThreadContext, win32_Wow64GetThreadContext)\n\t(win32_Wow64SetThreadContext): Remove.\n\t(win32_set_thread_context, do_initial_child_stuff)\n\t(win32_process_target::attach, win32_process_target::detach):\n\tUpdate.\n\t(winapi_EnumProcessModules, winapi_EnumProcessModulesEx)\n\t(winapi_GetModuleInformation, winapi_GetModuleInformationA):\n\tRemove.\n\t(win32_EnumProcessModules, win32_EnumProcessModulesEx)\n\t(win32_GetModuleInformation, win32_GetModuleInformationA):\n\tRemove.\n\t(load_psapi): Remove.\n\t(win32_add_dll, win32_process_target::request_interrupt): Update.\n\t(initialize_low): Call initialize_loadable.",
    "tree": {
      "sha": "ea35bb3afdcb7b0fa7600dbfdd2150bac2f77af9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ea35bb3afdcb7b0fa7600dbfdd2150bac2f77af9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/de0718729053b7c558166f3cc1a7d170c48a25de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de0718729053b7c558166f3cc1a7d170c48a25de",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/de0718729053b7c558166f3cc1a7d170c48a25de",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de0718729053b7c558166f3cc1a7d170c48a25de/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b"
    }
  ],
  "stats": {
    "total": 215,
    "additions": 72,
    "deletions": 143
  },
  "files": [
    {
      "sha": "6f1f66876f8cdfcec07efe0ce6c1d3c32459931f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de0718729053b7c558166f3cc1a7d170c48a25de/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de0718729053b7c558166f3cc1a7d170c48a25de/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=de0718729053b7c558166f3cc1a7d170c48a25de",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-30  Tom Tromey  <tromey@adacore.com>\n+\n+\t* nat/windows-nat.h (GenerateConsoleCtrlEvent): New define.\n+\t(GenerateConsoleCtrlEvent_ftype, GenerateConsoleCtrlEvent):\n+\tDeclare.\n+\t* nat/windows-nat.c (GenerateConsoleCtrlEvent): Define.\n+\t(initialize_loadable): Initialize GenerateConsoleCtrlEvent.\n+\n 2021-04-30  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c: Move code to nat/windows-nat.[ch]."
    },
    {
      "sha": "1bc3fca3cc335edfcbae72e762bf56629dda2584",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de0718729053b7c558166f3cc1a7d170c48a25de/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de0718729053b7c558166f3cc1a7d170c48a25de/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=de0718729053b7c558166f3cc1a7d170c48a25de",
      "patch": "@@ -66,7 +66,7 @@ Wow64GetThreadContext_ftype *Wow64GetThreadContext;\n Wow64SetThreadContext_ftype *Wow64SetThreadContext;\n Wow64GetThreadSelectorEntry_ftype *Wow64GetThreadSelectorEntry;\n #endif\n-\n+GenerateConsoleCtrlEvent_ftype *GenerateConsoleCtrlEvent;\n \n /* Note that 'debug_events' must be locally defined in the relevant\n    functions.  */\n@@ -469,6 +469,7 @@ initialize_loadable ()\n       GPA (hm, Wow64SetThreadContext);\n       GPA (hm, Wow64GetThreadSelectorEntry);\n #endif\n+      GPA (hm, GenerateConsoleCtrlEvent);\n     }\n \n   /* Set variables to dummy versions of these processes if the function"
    },
    {
      "sha": "c7ef00ea30b9179fbc3480f97fb35eb4ee96965b",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de0718729053b7c558166f3cc1a7d170c48a25de/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de0718729053b7c558166f3cc1a7d170c48a25de/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=de0718729053b7c558166f3cc1a7d170c48a25de",
      "patch": "@@ -275,6 +275,7 @@ extern BOOL wait_for_debug_event (DEBUG_EVENT *event, DWORD timeout);\n #define Wow64GetThreadContext\t\tdyn_Wow64GetThreadContext\n #define Wow64SetThreadContext\t\tdyn_Wow64SetThreadContext\n #define Wow64GetThreadSelectorEntry\tdyn_Wow64GetThreadSelectorEntry\n+#define GenerateConsoleCtrlEvent\tdyn_GenerateConsoleCtrlEvent\n \n typedef BOOL WINAPI (AdjustTokenPrivileges_ftype) (HANDLE, BOOL,\n \t\t\t\t\t\t   PTOKEN_PRIVILEGES,\n@@ -342,6 +343,9 @@ typedef BOOL WINAPI (Wow64GetThreadSelectorEntry_ftype) (HANDLE, DWORD,\n extern Wow64GetThreadSelectorEntry_ftype *Wow64GetThreadSelectorEntry;\n #endif\n \n+typedef BOOL WINAPI (GenerateConsoleCtrlEvent_ftype) (DWORD, DWORD);\n+extern GenerateConsoleCtrlEvent_ftype *GenerateConsoleCtrlEvent;\n+\n /* Load any functions which may not be available in ancient versions\n    of Windows.  */\n "
    },
    {
      "sha": "86e87c54edaf0674a2b09cab720766d52ba90f46",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de0718729053b7c558166f3cc1a7d170c48a25de/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de0718729053b7c558166f3cc1a7d170c48a25de/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=de0718729053b7c558166f3cc1a7d170c48a25de",
      "patch": "@@ -1,3 +1,23 @@\n+2021-04-30  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.cc (GETPROCADDRESS): Remove.\n+\t(winapi_DebugActiveProcessStop, winapi_DebugSetProcessKillOnExit)\n+\t(winapi_DebugBreakProcess, winapi_GenerateConsoleCtrlEvent)\n+\t(winapi_Wow64SetThreadContext, win32_Wow64GetThreadContext)\n+\t(win32_Wow64SetThreadContext): Remove.\n+\t(win32_set_thread_context, do_initial_child_stuff)\n+\t(win32_process_target::attach, win32_process_target::detach):\n+\tUpdate.\n+\t(winapi_EnumProcessModules, winapi_EnumProcessModulesEx)\n+\t(winapi_GetModuleInformation, winapi_GetModuleInformationA):\n+\tRemove.\n+\t(win32_EnumProcessModules, win32_EnumProcessModulesEx)\n+\t(win32_GetModuleInformation, win32_GetModuleInformationA):\n+\tRemove.\n+\t(load_psapi): Remove.\n+\t(win32_add_dll, win32_process_target::request_interrupt): Update.\n+\t(initialize_low): Call initialize_loadable.\n+\n 2021-04-14  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.cc (windows_nat::handle_load_dll): Don't check"
    },
    {
      "sha": "d742ecd0d8fad995c90bb55b2e27774bedb20940",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 38,
      "deletions": 142,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de0718729053b7c558166f3cc1a7d170c48a25de/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de0718729053b7c558166f3cc1a7d170c48a25de/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=de0718729053b7c558166f3cc1a7d170c48a25de",
      "patch": "@@ -62,9 +62,6 @@ using namespace windows_nat;\n #define COUNTOF(STR) (sizeof (STR) / sizeof ((STR)[0]))\n #endif\n \n-#define GETPROCADDRESS(DLL, PROC) \\\n-  ((winapi_ ## PROC) GetProcAddress (DLL, #PROC))\n-\n int using_threads = 1;\n \n /* Globals.  */\n@@ -93,19 +90,6 @@ const struct target_desc *wow64_win32_tdesc;\n \n #define NUM_REGS (the_low_target.num_regs ())\n \n-typedef BOOL (WINAPI *winapi_DebugActiveProcessStop) (DWORD dwProcessId);\n-typedef BOOL (WINAPI *winapi_DebugSetProcessKillOnExit) (BOOL KillOnExit);\n-typedef BOOL (WINAPI *winapi_DebugBreakProcess) (HANDLE);\n-typedef BOOL (WINAPI *winapi_GenerateConsoleCtrlEvent) (DWORD, DWORD);\n-\n-#ifdef __x86_64__\n-typedef BOOL (WINAPI *winapi_Wow64SetThreadContext) (HANDLE,\n-\t\t\t\t\t\t     const WOW64_CONTEXT *);\n-\n-winapi_Wow64GetThreadContext win32_Wow64GetThreadContext;\n-static winapi_Wow64SetThreadContext win32_Wow64SetThreadContext;\n-#endif\n-\n static void win32_add_all_dlls (void);\n \n /* Get the thread ID from the current selected inferior (the current\n@@ -144,7 +128,7 @@ win32_set_thread_context (windows_thread_info *th)\n {\n #ifdef __x86_64__\n   if (wow64_process)\n-    win32_Wow64SetThreadContext (th->h, &th->wow64_context);\n+    Wow64SetThreadContext (th->h, &th->wow64_context);\n   else\n #endif\n     SetThreadContext (th->h, &th->context);\n@@ -372,8 +356,8 @@ do_initial_child_stuff (HANDLE proch, DWORD pid, int attached)\n   wow64_process = wow64;\n \n   if (wow64_process\n-      && (win32_Wow64GetThreadContext == nullptr\n-\t  || win32_Wow64SetThreadContext == nullptr))\n+      && (Wow64GetThreadContext == nullptr\n+\t  || Wow64SetThreadContext == nullptr))\n     error (\"WOW64 debugging is not supported on this system.\\n\");\n \n   ignore_first_breakpoint = !attached && wow64_process;\n@@ -704,18 +688,14 @@ int\n win32_process_target::attach (unsigned long pid)\n {\n   HANDLE h;\n-  winapi_DebugSetProcessKillOnExit DebugSetProcessKillOnExit = NULL;\n   DWORD err;\n-  HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-  DebugSetProcessKillOnExit = GETPROCADDRESS (dll, DebugSetProcessKillOnExit);\n \n   h = OpenProcess (PROCESS_ALL_ACCESS, FALSE, pid);\n   if (h != NULL)\n     {\n       if (DebugActiveProcess (pid))\n \t{\n-\t  if (DebugSetProcessKillOnExit != NULL)\n-\t    DebugSetProcessKillOnExit (FALSE);\n+\t  DebugSetProcessKillOnExit (FALSE);\n \n \t  /* win32_wait needs to know we're attaching.  */\n \t  attaching = 1;\n@@ -822,23 +802,11 @@ win32_process_target::kill (process_info *process)\n int\n win32_process_target::detach (process_info *process)\n {\n-  winapi_DebugActiveProcessStop DebugActiveProcessStop = NULL;\n-  winapi_DebugSetProcessKillOnExit DebugSetProcessKillOnExit = NULL;\n-  HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-  DebugActiveProcessStop = GETPROCADDRESS (dll, DebugActiveProcessStop);\n-  DebugSetProcessKillOnExit = GETPROCADDRESS (dll, DebugSetProcessKillOnExit);\n-\n-  if (DebugSetProcessKillOnExit == NULL\n-      || DebugActiveProcessStop == NULL)\n-    return -1;\n-\n-  {\n-    struct thread_resume resume;\n-    resume.thread = minus_one_ptid;\n-    resume.kind = resume_continue;\n-    resume.sig = 0;\n-    this->resume (&resume, 1);\n-  }\n+  struct thread_resume resume;\n+  resume.thread = minus_one_ptid;\n+  resume.kind = resume_continue;\n+  resume.sig = 0;\n+  this->resume (&resume, 1);\n \n   if (!DebugActiveProcessStop (current_process_id))\n     return -1;\n@@ -1019,58 +987,6 @@ win32_add_one_solib (const char *name, CORE_ADDR load_addr)\n   loaded_dll (buf2, load_addr);\n }\n \n-typedef BOOL (WINAPI *winapi_EnumProcessModules) (HANDLE, HMODULE *,\n-\t\t\t\t\t\t  DWORD, LPDWORD);\n-#ifdef __x86_64__\n-typedef BOOL (WINAPI *winapi_EnumProcessModulesEx) (HANDLE, HMODULE *, DWORD,\n-\t\t\t\t\t\t    LPDWORD, DWORD);\n-#endif\n-typedef BOOL (WINAPI *winapi_GetModuleInformation) (HANDLE, HMODULE,\n-\t\t\t\t\t\t    LPMODULEINFO, DWORD);\n-typedef DWORD (WINAPI *winapi_GetModuleFileNameExA) (HANDLE, HMODULE,\n-\t\t\t\t\t\t     LPSTR, DWORD);\n-\n-static winapi_EnumProcessModules win32_EnumProcessModules;\n-#ifdef __x86_64__\n-static winapi_EnumProcessModulesEx win32_EnumProcessModulesEx;\n-#endif\n-static winapi_GetModuleInformation win32_GetModuleInformation;\n-static winapi_GetModuleFileNameExA win32_GetModuleFileNameExA;\n-\n-static BOOL\n-load_psapi (void)\n-{\n-  static int psapi_loaded = 0;\n-  static HMODULE dll = NULL;\n-\n-  if (!psapi_loaded)\n-    {\n-      psapi_loaded = 1;\n-      dll = LoadLibrary (TEXT(\"psapi.dll\"));\n-      if (!dll)\n-\treturn FALSE;\n-      win32_EnumProcessModules =\n-\t      GETPROCADDRESS (dll, EnumProcessModules);\n-#ifdef __x86_64__\n-      win32_EnumProcessModulesEx =\n-\t      GETPROCADDRESS (dll, EnumProcessModulesEx);\n-#endif\n-      win32_GetModuleInformation =\n-\t      GETPROCADDRESS (dll, GetModuleInformation);\n-      win32_GetModuleFileNameExA =\n-\t      GETPROCADDRESS (dll, GetModuleFileNameExA);\n-    }\n-\n-#ifdef __x86_64__\n-  if (wow64_process && win32_EnumProcessModulesEx == nullptr)\n-    return FALSE;\n-#endif\n-\n-  return (win32_EnumProcessModules != NULL\n-\t  && win32_GetModuleInformation != NULL\n-\t  && win32_GetModuleFileNameExA != NULL);\n-}\n-\n /* Iterate over all DLLs currently mapped by our inferior, looking for\n    a DLL loaded at LOAD_ADDR; if found, return its file name,\n    otherwise return NULL.  If LOAD_ADDR is NULL, add all mapped DLLs\n@@ -1085,23 +1001,20 @@ win32_add_dll (LPVOID load_addr)\n   DWORD cbNeeded;\n   BOOL ok;\n \n-  if (!load_psapi ())\n-    return NULL;\n-\n   cbNeeded = 0;\n #ifdef __x86_64__\n   if (wow64_process)\n-    ok = (*win32_EnumProcessModulesEx) (current_process_handle,\n-\t\t\t\t\tDllHandle,\n-\t\t\t\t\tsizeof (HMODULE),\n-\t\t\t\t\t&cbNeeded,\n-\t\t\t\t\tLIST_MODULES_32BIT);\n+    ok = EnumProcessModulesEx (current_process_handle,\n+\t\t\t       DllHandle,\n+\t\t\t       sizeof (HMODULE),\n+\t\t\t       &cbNeeded,\n+\t\t\t       LIST_MODULES_32BIT);\n   else\n #endif\n-    ok = (*win32_EnumProcessModules) (current_process_handle,\n-\t\t\t\t      DllHandle,\n-\t\t\t\t      sizeof (HMODULE),\n-\t\t\t\t      &cbNeeded);\n+    ok = EnumProcessModules (current_process_handle,\n+\t\t\t     DllHandle,\n+\t\t\t     sizeof (HMODULE),\n+\t\t\t     &cbNeeded);\n \n   if (!ok || !cbNeeded)\n     return NULL;\n@@ -1112,17 +1025,17 @@ win32_add_dll (LPVOID load_addr)\n \n #ifdef __x86_64__\n   if (wow64_process)\n-    ok = (*win32_EnumProcessModulesEx) (current_process_handle,\n-\t\t\t\t\tDllHandle,\n-\t\t\t\t\tcbNeeded,\n-\t\t\t\t\t&cbNeeded,\n-\t\t\t\t\tLIST_MODULES_32BIT);\n+    ok = EnumProcessModulesEx (current_process_handle,\n+\t\t\t       DllHandle,\n+\t\t\t       cbNeeded,\n+\t\t\t       &cbNeeded,\n+\t\t\t       LIST_MODULES_32BIT);\n   else\n #endif\n-    ok = (*win32_EnumProcessModules) (current_process_handle,\n-\t\t\t\t      DllHandle,\n-\t\t\t\t      cbNeeded,\n-\t\t\t\t      &cbNeeded);\n+    ok = EnumProcessModules (current_process_handle,\n+\t\t\t     DllHandle,\n+\t\t\t     cbNeeded,\n+\t\t\t     &cbNeeded);\n   if (!ok)\n     return NULL;\n \n@@ -1162,15 +1075,15 @@ win32_add_dll (LPVOID load_addr)\n       MODULEINFO mi;\n       static char dll_name[MAX_PATH];\n \n-      if (!(*win32_GetModuleInformation) (current_process_handle,\n-\t\t\t\t\t  DllHandle[i],\n-\t\t\t\t\t  &mi,\n-\t\t\t\t\t  sizeof (mi)))\n+      if (!GetModuleInformation (current_process_handle,\n+\t\t\t\t DllHandle[i],\n+\t\t\t\t &mi,\n+\t\t\t\t sizeof (mi)))\n \tcontinue;\n-      if ((*win32_GetModuleFileNameExA) (current_process_handle,\n-\t\t\t\t\t DllHandle[i],\n-\t\t\t\t\t dll_name,\n-\t\t\t\t\t MAX_PATH) == 0)\n+      if (GetModuleFileNameExA (current_process_handle,\n+\t\t\t\tDllHandle[i],\n+\t\t\t\tdll_name,\n+\t\t\t\tMAX_PATH) == 0)\n \tcontinue;\n \n       if (load_addr != nullptr && mi.lpBaseOfDll != load_addr)\n@@ -1611,26 +1524,15 @@ win32_process_target::write_memory (CORE_ADDR memaddr,\n void\n win32_process_target::request_interrupt ()\n {\n-  winapi_DebugBreakProcess DebugBreakProcess;\n-  winapi_GenerateConsoleCtrlEvent GenerateConsoleCtrlEvent;\n-\n-  HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-\n-  GenerateConsoleCtrlEvent = GETPROCADDRESS (dll, GenerateConsoleCtrlEvent);\n-\n-  if (GenerateConsoleCtrlEvent != NULL\n-      && GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT, current_process_id))\n+  if (GenerateConsoleCtrlEvent (CTRL_BREAK_EVENT, current_process_id))\n     return;\n \n   /* GenerateConsoleCtrlEvent can fail if process id being debugged is\n      not a process group id.\n      Fallback to XP/Vista 'DebugBreakProcess', which generates a\n      breakpoint exception in the interior process.  */\n \n-  DebugBreakProcess = GETPROCADDRESS (dll, DebugBreakProcess);\n-\n-  if (DebugBreakProcess != NULL\n-      && DebugBreakProcess (current_process_handle))\n+  if (DebugBreakProcess (current_process_handle))\n     return;\n \n   /* Last resort, suspend all threads manually.  */\n@@ -1761,11 +1663,5 @@ initialize_low (void)\n   set_target_ops (&the_win32_target);\n   the_low_target.arch_setup ();\n \n-#ifdef __x86_64__\n-  /* These functions are loaded dynamically, because they are not available\n-     on Windows XP.  */\n-  HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-  win32_Wow64GetThreadContext = GETPROCADDRESS (dll, Wow64GetThreadContext);\n-  win32_Wow64SetThreadContext = GETPROCADDRESS (dll, Wow64SetThreadContext);\n-#endif\n+  initialize_loadable ();\n }"
    }
  ]
}