{
  "sha": "62a5151b6b47d9e31bc49599b3f83803421d5819",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjJhNTE1MWI2YjQ3ZDllMzFiYzQ5NTk5YjNmODM4MDM0MjFkNTgxOQ==",
  "commit": {
    "author": {
      "name": "Jon Turney",
      "email": "jon.turney@dronecode.org.uk",
      "date": "2020-06-30T15:52:41Z"
    },
    "committer": {
      "name": "Jon Turney",
      "email": "jon.turney@dronecode.org.uk",
      "date": "2020-09-18T16:12:11Z"
    },
    "message": "Promote windows_core_xfer_shared_libraries and windows_core_pid_to_str\n\nMove windows_core_xfer_shared_libraries() and windows_core_pid_to_str()\nto windows-tdep, and use in amd64-windows-tdep.c to handle Cygwin x86_64\ncore dumps.\n\nv2:\nKeep _initialize function at the bottom of the file.\n\ngdb/ChangeLog:\n\n2020-07-01  Jon Turney  <jon.turney@dronecode.org.uk>\n\n\t* windows-tdep.h: Add prototypes.\n\t* i386-windows-tdep.c(windows_core_xfer_shared_libraries): Move.\n\t(i386_windows_core_pid_to_str): Move and rename ...\n\t* windows-tdep.c (windows_core_xfer_shared_libraries): ... to here\n\t(windows_core_pid_to_str): ... and here.\n\t* amd64-windows-tdep.c (amd64_windows_init_abi_common): Register here.",
    "tree": {
      "sha": "d53ca3b505042f8c6c69ee8a7d94ba041c241ec5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d53ca3b505042f8c6c69ee8a7d94ba041c241ec5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/62a5151b6b47d9e31bc49599b3f83803421d5819",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABAgAGBQJfZNxbAAoJEMfIbwNwKFyBjtcP/31obfDCt+pmqQweHsHxoSWo\nbgbam06N3XJVdgy32Y/UwSH/ArlTQlLQKLX5iL/AA7eTKCJOABKHJ6WHvgXuu/19\nGyzRVZKDHHCFuhyiqbHJRw+g4l+NLZl2aNgbLT3MwQVFQFV+VJmiI0gZCbh49cU1\n4RfkFfqz0Ol4ZZKd51EtyHqdAL4erQNzTkMipq5m6WHy0zlgVDEjUx1f6azc1XU+\nZUG1kH7PDtY3pF72GrTVyNxylRuLPbTbdp3aM1x3dB6n8sxM1e35IVvOOF1OxfUW\n79YF8GQYvPCn+bHFud1e9WRfhWBhqeWG5h0K9X9AstiqmGQn07CQ2oLT5BwoD/cu\nWEwUy5vXgNe/gKZF6o2kb1jm1nX3JDbupNI44RVxMF3GwhoUAhhHX1csd9eP+Z6V\n53zfaCTt8R0KNWXEXRwNe5lrPWDy+4nQUIoe1rE0taxXoXLBIis4ZP7T60Y9lbYt\nTf/gBfrRUNgUiRzcVyItJmO+TWLPkasO1+x/n1wOXODvjae8TgEB/c6OLTZuChZC\n/hVVR82j7G7xYo8BEm0yzov37uit/I5JS7F82PIGpCtxWxPc+zrScnAbCYW7XgVt\n4VcehUI0hW9BVgS5eBD6gVXVsPF6KyaRC3LwDn00xoE9QGFvlpmpzWdTAwVa7cQa\nqc2FJ+17hquRXtQU9GFE\n=443I\n-----END PGP SIGNATURE-----",
      "payload": "tree d53ca3b505042f8c6c69ee8a7d94ba041c241ec5\nparent aff9d38745f734f3c0b162f6da39b8b9b5d1f81c\nauthor Jon Turney <jon.turney@dronecode.org.uk> 1593532361 +0100\ncommitter Jon Turney <jon.turney@dronecode.org.uk> 1600445531 +0100\n\nPromote windows_core_xfer_shared_libraries and windows_core_pid_to_str\n\nMove windows_core_xfer_shared_libraries() and windows_core_pid_to_str()\nto windows-tdep, and use in amd64-windows-tdep.c to handle Cygwin x86_64\ncore dumps.\n\nv2:\nKeep _initialize function at the bottom of the file.\n\ngdb/ChangeLog:\n\n2020-07-01  Jon Turney  <jon.turney@dronecode.org.uk>\n\n\t* windows-tdep.h: Add prototypes.\n\t* i386-windows-tdep.c(windows_core_xfer_shared_libraries): Move.\n\t(i386_windows_core_pid_to_str): Move and rename ...\n\t* windows-tdep.c (windows_core_xfer_shared_libraries): ... to here\n\t(windows_core_pid_to_str): ... and here.\n\t* amd64-windows-tdep.c (amd64_windows_init_abi_common): Register here.\n"
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62a5151b6b47d9e31bc49599b3f83803421d5819",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/62a5151b6b47d9e31bc49599b3f83803421d5819",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62a5151b6b47d9e31bc49599b3f83803421d5819/comments",
  "author": {
    "login": "jon-turney",
    "id": 3497232,
    "node_id": "MDQ6VXNlcjM0OTcyMzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3497232?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jon-turney",
    "html_url": "https://github.com/jon-turney",
    "followers_url": "https://api.github.com/users/jon-turney/followers",
    "following_url": "https://api.github.com/users/jon-turney/following{/other_user}",
    "gists_url": "https://api.github.com/users/jon-turney/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jon-turney/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jon-turney/subscriptions",
    "organizations_url": "https://api.github.com/users/jon-turney/orgs",
    "repos_url": "https://api.github.com/users/jon-turney/repos",
    "events_url": "https://api.github.com/users/jon-turney/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jon-turney/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jon-turney",
    "id": 3497232,
    "node_id": "MDQ6VXNlcjM0OTcyMzI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3497232?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jon-turney",
    "html_url": "https://github.com/jon-turney",
    "followers_url": "https://api.github.com/users/jon-turney/followers",
    "following_url": "https://api.github.com/users/jon-turney/following{/other_user}",
    "gists_url": "https://api.github.com/users/jon-turney/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jon-turney/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jon-turney/subscriptions",
    "organizations_url": "https://api.github.com/users/jon-turney/orgs",
    "repos_url": "https://api.github.com/users/jon-turney/repos",
    "events_url": "https://api.github.com/users/jon-turney/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jon-turney/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aff9d38745f734f3c0b162f6da39b8b9b5d1f81c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aff9d38745f734f3c0b162f6da39b8b9b5d1f81c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aff9d38745f734f3c0b162f6da39b8b9b5d1f81c"
    }
  ],
  "stats": {
    "total": 219,
    "additions": 120,
    "deletions": 99
  },
  "files": [
    {
      "sha": "7b6de03849020e4194e7f6462b15bead035ae649",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=62a5151b6b47d9e31bc49599b3f83803421d5819",
      "patch": "@@ -1,5 +1,13 @@\n 2020-07-01  Jon Turney  <jon.turney@dronecode.org.uk>\n \n+\t* windows-tdep.h: Add prototypes.\n+\t* i386-windows-tdep.c(windows_core_xfer_shared_libraries): Move.\n+\t(i386_windows_core_pid_to_str): Move and rename ...\n+\t* windows-tdep.c (windows_core_xfer_shared_libraries): ... to here\n+\t(windows_core_pid_to_str): ... and here.\n+\t* amd64-windows-tdep.c (amd64_windows_init_abi_common): Register here.\n+\n+2020-07-01  Jon Turney  <jon.turney@dronecode.org.uk>\n \t* amd64-windows-tdep.c(amd64_windows_gregset_reg_offset): Add.\n \t(amd64_windows_init_abi_common): ... and register.\n "
    },
    {
      "sha": "e427c20538961bda2a1a0f033207eebce64c4729",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=62a5151b6b47d9e31bc49599b3f83803421d5819",
      "patch": "@@ -1310,6 +1310,11 @@ amd64_windows_init_abi_common (gdbarch_info info, struct gdbarch *gdbarch)\n   tdep->sizeof_gregset = AMD64_WINDOWS_SIZEOF_GREGSET;\n   tdep->sizeof_fpregset = 0;\n \n+  /* Core file support.  */\n+  set_gdbarch_core_xfer_shared_libraries\n+    (gdbarch, windows_core_xfer_shared_libraries);\n+  set_gdbarch_core_pid_to_str (gdbarch, windows_core_pid_to_str);\n+\n   set_gdbarch_auto_wide_charset (gdbarch, amd64_windows_auto_wide_charset);\n }\n "
    },
    {
      "sha": "1477e54b4d5f37c9bae0243d495c434b6578ddd5",
      "filename": "gdb/i386-windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 99,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/i386-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/i386-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-windows-tdep.c?ref=62a5151b6b47d9e31bc49599b3f83803421d5819",
      "patch": "@@ -89,104 +89,6 @@ static int i386_windows_gregset_reg_offset[] =\n \n #define I386_WINDOWS_SIZEOF_GREGSET 716\n \n-struct cpms_data\n-{\n-  struct gdbarch *gdbarch;\n-  struct obstack *obstack;\n-  int module_count;\n-};\n-\n-static void\n-core_process_module_section (bfd *abfd, asection *sect, void *obj)\n-{\n-  struct cpms_data *data = (struct cpms_data *) obj;\n-  enum bfd_endian byte_order = gdbarch_byte_order (data->gdbarch);\n-\n-  char *module_name;\n-  size_t module_name_size;\n-  CORE_ADDR base_addr;\n-\n-  gdb_byte *buf = NULL;\n-\n-  if (!startswith (sect->name, \".module\"))\n-    return;\n-\n-  buf = (gdb_byte *) xmalloc (bfd_section_size (sect) + 1);\n-  if (!buf)\n-    {\n-      printf_unfiltered (\"memory allocation failed for %s\\n\", sect->name);\n-      goto out;\n-    }\n-  if (!bfd_get_section_contents (abfd, sect,\n-\t\t\t\t buf, 0, bfd_section_size (sect)))\n-    goto out;\n-\n-\n-\n-  /* A DWORD (data_type) followed by struct windows_core_module_info.  */\n-\n-  base_addr =\n-    extract_unsigned_integer (buf + 4, 4, byte_order);\n-\n-  module_name_size =\n-    extract_unsigned_integer (buf + 8, 4, byte_order);\n-\n-  if (12 + module_name_size > bfd_section_size (sect))\n-    goto out;\n-  module_name = (char *) buf + 12;\n-\n-  /* The first module is the .exe itself.  */\n-  if (data->module_count != 0)\n-    windows_xfer_shared_library (module_name, base_addr,\n-\t\t\t\t NULL, data->gdbarch, data->obstack);\n-  data->module_count++;\n-\n-out:\n-  xfree (buf);\n-  return;\n-}\n-\n-static ULONGEST\n-windows_core_xfer_shared_libraries (struct gdbarch *gdbarch,\n-\t\t\t\t  gdb_byte *readbuf,\n-\t\t\t\t  ULONGEST offset, ULONGEST len)\n-{\n-  struct obstack obstack;\n-  const char *buf;\n-  ULONGEST len_avail;\n-  struct cpms_data data = { gdbarch, &obstack, 0 };\n-\n-  obstack_init (&obstack);\n-  obstack_grow_str (&obstack, \"<library-list>\\n\");\n-  bfd_map_over_sections (core_bfd,\n-\t\t\t core_process_module_section,\n-\t\t\t &data);\n-  obstack_grow_str0 (&obstack, \"</library-list>\\n\");\n-\n-  buf = (const char *) obstack_finish (&obstack);\n-  len_avail = strlen (buf);\n-  if (offset >= len_avail)\n-    return 0;\n-\n-  if (len > len_avail - offset)\n-    len = len_avail - offset;\n-  memcpy (readbuf, buf + offset, len);\n-\n-  obstack_free (&obstack, NULL);\n-  return len;\n-}\n-\n-/* This is how we want PTIDs from core files to be printed.  */\n-\n-static std::string\n-i386_windows_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid)\n-{\n-  if (ptid.lwp () != 0)\n-    return string_printf (\"Thread 0x%lx\", ptid.lwp ());\n-\n-  return normal_pid_to_str (ptid);\n-}\n-\n static CORE_ADDR\n i386_windows_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n {\n@@ -251,7 +153,7 @@ i386_windows_init_abi_common (struct gdbarch_info info, struct gdbarch *gdbarch)\n   /* Core file support.  */\n   set_gdbarch_core_xfer_shared_libraries\n     (gdbarch, windows_core_xfer_shared_libraries);\n-  set_gdbarch_core_pid_to_str (gdbarch, i386_windows_core_pid_to_str);\n+  set_gdbarch_core_pid_to_str (gdbarch, windows_core_pid_to_str);\n \n   set_gdbarch_auto_wide_charset (gdbarch, i386_windows_auto_wide_charset);\n }"
    },
    {
      "sha": "49c1c252a958976152c83debec21e46374294857",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=62a5151b6b47d9e31bc49599b3f83803421d5819",
      "patch": "@@ -1088,6 +1088,104 @@ range [0x%\" BFD_VMA_FMT \"x, 0x%\" BFD_VMA_FMT \"x[.\"),\n   return false;\n }\n \n+struct cpms_data\n+{\n+  struct gdbarch *gdbarch;\n+  struct obstack *obstack;\n+  int module_count;\n+};\n+\n+static void\n+core_process_module_section (bfd *abfd, asection *sect, void *obj)\n+{\n+  struct cpms_data *data = (struct cpms_data *) obj;\n+  enum bfd_endian byte_order = gdbarch_byte_order (data->gdbarch);\n+\n+  char *module_name;\n+  size_t module_name_size;\n+  CORE_ADDR base_addr;\n+\n+  gdb_byte *buf = NULL;\n+\n+  if (!startswith (sect->name, \".module\"))\n+    return;\n+\n+  buf = (gdb_byte *) xmalloc (bfd_section_size (sect) + 1);\n+  if (!buf)\n+    {\n+      printf_unfiltered (\"memory allocation failed for %s\\n\", sect->name);\n+      goto out;\n+    }\n+  if (!bfd_get_section_contents (abfd, sect,\n+\t\t\t\t buf, 0, bfd_section_size (sect)))\n+    goto out;\n+\n+\n+\n+  /* A DWORD (data_type) followed by struct windows_core_module_info.  */\n+\n+  base_addr =\n+    extract_unsigned_integer (buf + 4, 4, byte_order);\n+\n+  module_name_size =\n+    extract_unsigned_integer (buf + 8, 4, byte_order);\n+\n+  if (12 + module_name_size > bfd_section_size (sect))\n+    goto out;\n+  module_name = (char *) buf + 12;\n+\n+  /* The first module is the .exe itself.  */\n+  if (data->module_count != 0)\n+    windows_xfer_shared_library (module_name, base_addr,\n+\t\t\t\t NULL, data->gdbarch, data->obstack);\n+  data->module_count++;\n+\n+out:\n+  xfree (buf);\n+  return;\n+}\n+\n+ULONGEST\n+windows_core_xfer_shared_libraries (struct gdbarch *gdbarch,\n+\t\t\t\t  gdb_byte *readbuf,\n+\t\t\t\t  ULONGEST offset, ULONGEST len)\n+{\n+  struct obstack obstack;\n+  const char *buf;\n+  ULONGEST len_avail;\n+  struct cpms_data data = { gdbarch, &obstack, 0 };\n+\n+  obstack_init (&obstack);\n+  obstack_grow_str (&obstack, \"<library-list>\\n\");\n+  bfd_map_over_sections (core_bfd,\n+\t\t\t core_process_module_section,\n+\t\t\t &data);\n+  obstack_grow_str0 (&obstack, \"</library-list>\\n\");\n+\n+  buf = (const char *) obstack_finish (&obstack);\n+  len_avail = strlen (buf);\n+  if (offset >= len_avail)\n+    return 0;\n+\n+  if (len > len_avail - offset)\n+    len = len_avail - offset;\n+  memcpy (readbuf, buf + offset, len);\n+\n+  obstack_free (&obstack, NULL);\n+  return len;\n+}\n+\n+/* This is how we want PTIDs from core files to be printed.  */\n+\n+std::string\n+windows_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid)\n+{\n+  if (ptid.lwp () != 0)\n+    return string_printf (\"Thread 0x%lx\", ptid.lwp ());\n+\n+  return normal_pid_to_str (ptid);\n+}\n+\n void _initialize_windows_tdep ();\n void\n _initialize_windows_tdep ()"
    },
    {
      "sha": "ec677cbdd4637a766dde499b58467f325d0cd0f1",
      "filename": "gdb/windows-tdep.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/windows-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62a5151b6b47d9e31bc49599b3f83803421d5819/gdb/windows-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.h?ref=62a5151b6b47d9e31bc49599b3f83803421d5819",
      "patch": "@@ -31,6 +31,14 @@ extern void windows_xfer_shared_library (const char* so_name,\n \t\t\t\t\t struct gdbarch *gdbarch,\n \t\t\t\t\t struct obstack *obstack);\n \n+extern ULONGEST windows_core_xfer_shared_libraries (struct gdbarch *gdbarch,\n+\t\t\t\t\t\t    gdb_byte *readbuf,\n+\t\t\t\t\t\t    ULONGEST offset,\n+\t\t\t\t\t\t    ULONGEST len);\n+\n+extern std::string windows_core_pid_to_str (struct gdbarch *gdbarch,\n+\t\t\t\t\t    ptid_t ptid);\n+\n /* To be called from the various GDB_OSABI_WINDOWS handlers for the\n    various Windows architectures and machine types.  */\n "
    }
  ]
}