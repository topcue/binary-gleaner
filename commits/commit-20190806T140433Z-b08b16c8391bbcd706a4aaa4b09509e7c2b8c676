{
  "sha": "b08b16c8391bbcd706a4aaa4b09509e7c2b8c676",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjA4YjE2YzgzOTFiYmNkNzA2YTRhYWE0YjA5NTA5ZTdjMmI4YzY3Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-22T21:20:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-06T14:04:33Z"
    },
    "message": "Clean up source file error reporting\n\nprint_source_lines_base reopens the source file every time that a\nsource line is to be printed.  However, there's no need to do this so\nfrequently -- it's enough to do it when switching source files, and\notherwise rely on the cache.\n\nThe code seems to try to avoid these multiple opens; at a guess I'd\nsay something just got confused along the way.\n\nThis patch fixes the problem by reorganizing the code both to make it\nmore clear, and to ensure that reopens only occur when the \"last\nsource visited\" changes.\n\ngdb/ChangeLog\n2019-08-06  Tom Tromey  <tromey@adacore.com>\n\n\t* source.c (last_source_error): Now bool.\n\t(print_source_lines_base): Make \"noprint\" bool.  Only open\n\tsource file when last_source_visited changes.",
    "tree": {
      "sha": "29164c2b0b5dff2ac4b43a22044b1c6abcf2d97d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/29164c2b0b5dff2ac4b43a22044b1c6abcf2d97d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cb44333d99548bbbf7be06387a31877ee9322ab4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb44333d99548bbbf7be06387a31877ee9322ab4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cb44333d99548bbbf7be06387a31877ee9322ab4"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 18,
    "deletions": 14
  },
  "files": [
    {
      "sha": "9bcd47d389b081fbd1f165a90f6d99fe2e4df676",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b08b16c8391bbcd706a4aaa4b09509e7c2b8c676",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-06  Tom Tromey  <tromey@adacore.com>\n+\n+\t* source.c (last_source_error): Now bool.\n+\t(print_source_lines_base): Make \"noprint\" bool.  Only open\n+\tsource file when last_source_visited changes.\n+\n 2019-08-06  Tom Tromey  <tromey@adacore.com>\n \n \t* annotate.c (annotate_source_line): Use g_source_cache."
    },
    {
      "sha": "066666c7ca3f0ca50428c545c7d6a40bf03bf25c",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b08b16c8391bbcd706a4aaa4b09509e7c2b8c676/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=b08b16c8391bbcd706a4aaa4b09509e7c2b8c676",
      "patch": "@@ -129,7 +129,7 @@ static int first_line_listed;\n    Used to prevent repeating annoying \"No such file or directories\" msgs.  */\n \n static struct symtab *last_source_visited = NULL;\n-static int last_source_error = 0;\n+static bool last_source_error = false;\n \f\n /* Return the first line listed by print_source_lines.\n    Used by command interpreters to request listing from\n@@ -1129,8 +1129,7 @@ static void\n print_source_lines_base (struct symtab *s, int line, int stopline,\n \t\t\t print_source_lines_flags flags)\n {\n-  scoped_fd desc;\n-  int noprint = 0;\n+  bool noprint = false;\n   int nlines = stopline - line;\n   struct ui_out *uiout = current_uiout;\n \n@@ -1144,26 +1143,27 @@ print_source_lines_base (struct symtab *s, int line, int stopline,\n   if (uiout->test_flags (ui_source_list))\n     {\n       /* Only prints \"No such file or directory\" once.  */\n-      if ((s != last_source_visited) || (!last_source_error))\n+      if (s == last_source_visited)\n \t{\n-\t  last_source_visited = s;\n-\t  desc = open_source_file (s);\n-\t  if (desc.get () < 0)\n+\t  if (last_source_error)\n \t    {\n-\t      last_source_error = desc.get ();\n-\t      noprint = 1;\n+\t      flags |= PRINT_SOURCE_LINES_NOERROR;\n+\t      noprint = true;\n \t    }\n \t}\n       else\n \t{\n-\t  flags |= PRINT_SOURCE_LINES_NOERROR;\n-\t  noprint = 1;\n+\t  last_source_visited = s;\n+\t  scoped_fd desc = open_source_file (s);\n+\t  last_source_error = desc.get () < 0;\n+\t  if (last_source_error)\n+\t    noprint = true;\n \t}\n     }\n   else\n     {\n       flags |= PRINT_SOURCE_LINES_NOERROR;\n-      noprint = 1;\n+      noprint = true;\n     }\n \n   if (noprint)\n@@ -1209,8 +1209,6 @@ print_source_lines_base (struct symtab *s, int line, int stopline,\n       return;\n     }\n \n-  last_source_error = 0;\n-\n   /* If the user requested a sequence of lines that seems to go backward\n      (from high to low line numbers) then we don't print anything.  */\n   if (stopline <= line)"
    }
  ]
}