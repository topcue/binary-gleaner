{
  "sha": "22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjJiOWI0YjA1YmZhZDgwNmViM2QxNjUzNWRjZDRkYmVkYjAyOGM0MA==",
  "commit": {
    "author": {
      "name": "Scott Linder",
      "email": "scott@scottlinder.com",
      "date": "2020-08-31T17:24:20Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-31T17:25:05Z"
    },
    "message": "gdb: support frames inlined into the outer frame\n\nRemove the restriction (gdb_assert) that prevents creating frames\ninlined in the outer frame.  Like for frames inlined in a standard frame\n(FID_STACK_VALID), a frame inlined into the outer frame will have:\n\n - artificial_depth greater than 0\n - code_addr equal to the first executed instruction in the block\n   corresponding to the inlined function\n\nIt will however have its stack_status set to FID_STACK_OUTER, like the\nouter frame.\n\nThis is not typically seen on your everyday system (e.g. a Linux /\nx86-64 process), because the outer frame would be for instance the\n_start function, probably written in assembly and very unlikely to have\nanything inlined in it.  However this could happen in more \"bare-metal\"\nscenarios.  In particular, this was seen in ROCm GDB [1], where the\ncompiler does inline functions in the top-level kernel functions (kernel\nin the sense of compute kernel, not userspace vs kernel).\n\nI however wrote a test that replicates the issue on x86-64 and a few\nother arches I had access to.  Since we need to control precisely the\nemitted DWARF CFI, I didn't find another way than to write it in\nassembly.  The DWARF is generated using the testsuite's DWARF assembler,\nexcept the unwind information, which is written using CFI directives\n(and therefore generated by the actual assembler).  I think the test is\nadequately commented, but if anything is unclear, just ask and I'll add\nmore info.\n\n[1] https://github.com/ROCm-Developer-Tools/ROCgdb/\n\ngdb/ChangeLog:\n\nYYYY-MM-DD  Scott Linder  <scott@scottlinder.com>\nYYYY-MM-DD  Simon Marchi  <simon.marchi@efficios.com>\n\n\t* inline-frame.c (inline_frame_this_id): Remove assert that prevents\n\tinline frame ids in outer frame.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/frame-inlined-in-outer-frame.exp: New file.\n\t* gdb.dwarf2/frame-inlined-in-outer-frame.S: New file.\n\nChange-Id: I8aa129c667dccc31590ffdf426586418493a6ebe",
    "tree": {
      "sha": "5c066a02a1f0ad1446fc1cc96ac94d74e85d7701",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c066a02a1f0ad1446fc1cc96ac94d74e85d7701"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/comments",
  "author": {
    "login": "scott-linder",
    "id": 5913908,
    "node_id": "MDQ6VXNlcjU5MTM5MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5913908?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/scott-linder",
    "html_url": "https://github.com/scott-linder",
    "followers_url": "https://api.github.com/users/scott-linder/followers",
    "following_url": "https://api.github.com/users/scott-linder/following{/other_user}",
    "gists_url": "https://api.github.com/users/scott-linder/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/scott-linder/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/scott-linder/subscriptions",
    "organizations_url": "https://api.github.com/users/scott-linder/orgs",
    "repos_url": "https://api.github.com/users/scott-linder/repos",
    "events_url": "https://api.github.com/users/scott-linder/events{/privacy}",
    "received_events_url": "https://api.github.com/users/scott-linder/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "84154d166a1a4592c70e2a8296d5df0ad7f89be9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84154d166a1a4592c70e2a8296d5df0ad7f89be9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/84154d166a1a4592c70e2a8296d5df0ad7f89be9"
    }
  ],
  "stats": {
    "total": 266,
    "additions": 262,
    "deletions": 4
  },
  "files": [
    {
      "sha": "9637e4a7b12dcf393dedcbb7b48ac8ea20a5acca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-31  Scott Linder  <scott@scottlinder.com>\n+\t    Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* inline-frame.c (inline_frame_this_id): Remove assert that prevents\n+\tinline frame ids in outer frame.\n+\n 2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* frame.h (enum frame_id_stack_status) <FID_STACK_OUTER>: New."
    },
    {
      "sha": "300b1224db0371f79c761a89a187df25cef00217",
      "filename": "gdb/inline-frame.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/inline-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/inline-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inline-frame.c?ref=22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
      "patch": "@@ -171,10 +171,6 @@ inline_frame_this_id (struct frame_info *this_frame,\n      frame\").  This will take work.  */\n   gdb_assert (frame_id_p (*this_id));\n \n-  /* For now, require we don't match outer_frame_id either (see\n-     comment above).  */\n-  gdb_assert (!frame_id_eq (*this_id, outer_frame_id));\n-\n   /* Future work NOTE: Alexandre Oliva applied a patch to GCC 4.3\n      which generates DW_AT_entry_pc for inlined functions when\n      possible.  If this attribute is available, we should use it"
    },
    {
      "sha": "66f1fe8533f2382374c57a580ee43bcecf46550c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.dwarf2/frame-inlined-in-outer-frame.exp: New file.\n+\t* gdb.dwarf2/frame-inlined-in-outer-frame.S: New file.\n+\n 2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.dwarf2/dw2-reg-undefined.exp: Test \"set debug frame 1\""
    },
    {
      "sha": "63c4bc6382d2a4ae21b8053e426e5847618e4017",
      "filename": "gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.S",
      "status": "added",
      "additions": 137,
      "deletions": 0,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.S?ref=22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
      "patch": "@@ -0,0 +1,137 @@\n+/* Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <asm/unistd.h>\n+\n+/* Define these for each architecture:\n+\n+   1) RETURN_ADDRESS_REGNO: The register number representing the return\n+      address in the DWARF CFI.  It can be easily be looked up using\n+      `readelf --debug-dump=frames-interp` on an existing binary of that\n+      architecture, where it says `ra=X`.\n+\n+   2) exit_0: a sequence of instruction to execute the exit syscall with\n+      argument 0.  */\n+\n+#if defined(__x86_64__)\n+\n+# define RETURN_ADDRESS_REGNO 16\n+\n+.macro exit_0\n+\tmov $__NR_exit, %rax\n+\tmov $0, %rdi\n+\tsyscall\n+.endm\n+\n+#elif defined(__i386__)\n+\n+# define RETURN_ADDRESS_REGNO 8\n+\n+.macro exit_0\n+\tmov $__NR_exit, %eax\n+\tmov $0, %ebx\n+\tint $0x80\n+.endm\n+\n+#elif defined(__aarch64__)\n+\n+# define RETURN_ADDRESS_REGNO 30\n+\n+.macro exit_0\n+\tmov x0, #0\n+\tmov x8, #__NR_exit\n+\tsvc #0\n+.endm\n+\n+#elif defined(__arm__)\n+\n+# define RETURN_ADDRESS_REGNO 14\n+\n+.macro exit_0\n+\tldr r7, =__NR_exit\n+\tldr r0, =0\n+\tswi 0x0\n+.endm\n+\n+#else\n+# error \"Unsupported architecture\"\n+#endif\n+\n+/* The following assembly program mimics this pseudo C program, where\n+   everything has been inlined:\n+\n+    1 void bar(void) {\n+    2   nop;\n+    3 }\n+    4\n+    5 void foo(void) {\n+    6   nop;\n+    7   bar();\n+    8   nop;\n+    9 }\n+   10\n+   11 void _start(void) {\n+   12   nop;\n+   13   foo();\n+   14   nop;\n+   15   exit(0);\n+   16 }\n+*/\n+\n+.global _start\n+_start:\n+.cfi_startproc\n+\n+/* State that the return address for this frame is undefined. */\n+.cfi_undefined RETURN_ADDRESS_REGNO\n+\n+.global __cu_low_pc\n+__cu_low_pc:\n+\n+.global __start_low_pc\n+__start_low_pc:\n+\t/* Line 12 */\n+\tnop\n+\n+.global __foo_low_pc\n+__foo_low_pc:\n+\t/* Line 6 */\n+\tnop\n+\n+.global __bar_low_pc\n+__bar_low_pc:\n+\t/* Line 2 */\n+\tnop\n+\n+.global __bar_high_pc\n+__bar_high_pc:\n+\t/* Line 8 */\n+\tnop\n+\n+.global __foo_high_pc\n+__foo_high_pc:\n+\t/* Line 14 */\n+\tnop\n+\n+\t/* Line 15 */\n+\texit_0\n+\n+.cfi_endproc\n+\n+.global __start_high_pc\n+__start_high_pc:\n+\n+.global __cu_high_pc\n+__cu_high_pc:"
    },
    {
      "sha": "721b521e830669e3c19a5ce62265fcc218241615",
      "filename": "gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp",
      "status": "added",
      "additions": 114,
      "deletions": 0,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22b9b4b05bfad806eb3d16535dcd4dbedb028c40/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp?ref=22b9b4b05bfad806eb3d16535dcd4dbedb028c40",
      "patch": "@@ -0,0 +1,114 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test unwinding when we have a frame inlined in the outer frame (in the sense\n+# of frame.c:outer_frame_id).\n+#\n+# The conditions required to reproduce the original issue are:\n+#\n+#  1. Have an outer frame whose DWARF CFI explicitly says that the frame return\n+#     address is undefined.\n+#  2. A frame inlined in this other frame.\n+#\n+# Because of (1), the test has to be written in assembly with explicit CFI\n+# directives.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .S\n+\n+set dwarf_asm [standard_output_file dwarf-asm.S]\n+Dwarf::assemble $dwarf_asm {\n+    declare_labels foo_subprogram bar_subprogram\n+    declare_labels stmt_list\n+\n+    # See the comment in the .S file for the equivalent C program this is meant\n+    # to represent.\n+\n+    cu { addr_size 4 } {\n+\tDW_TAG_compile_unit {\n+\t    {DW_AT_name file1.txt}\n+\t    {DW_AT_stmt_list $stmt_list DW_FORM_sec_offset}\n+\t    {DW_AT_language @DW_LANG_C99}\n+\t    {DW_AT_low_pc __cu_low_pc DW_FORM_addr}\n+\t    {DW_AT_high_pc __cu_high_pc DW_FORM_addr}\n+\t} {\n+\t    DW_TAG_subprogram {\n+\t\t{DW_AT_name \"_start\"}\n+\t\t{DW_AT_low_pc __start_low_pc DW_FORM_addr}\n+\t\t{DW_AT_high_pc __start_high_pc DW_FORM_addr}\n+\t    } {\n+\t\tDW_TAG_inlined_subroutine {\n+\t\t    {DW_AT_abstract_origin :$foo_subprogram}\n+\t\t    {DW_AT_low_pc __foo_low_pc DW_FORM_addr}\n+\t\t    {DW_AT_high_pc __foo_high_pc DW_FORM_addr}\n+\t\t    {DW_AT_call_file 1 DW_FORM_data1}\n+\t\t    {DW_AT_call_line 13 DW_FORM_data1}\n+\t\t} {\n+\t\t    DW_TAG_inlined_subroutine {\n+\t\t\t{DW_AT_abstract_origin :$bar_subprogram}\n+\t\t\t{DW_AT_low_pc __bar_low_pc DW_FORM_addr}\n+\t\t\t{DW_AT_high_pc __bar_high_pc DW_FORM_addr}\n+\t\t\t{DW_AT_call_file 1 DW_FORM_data1}\n+\t\t\t{DW_AT_call_line 7 DW_FORM_data1}\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t    foo_subprogram: DW_TAG_subprogram {\n+\t\t{DW_AT_name \"foo\"}\n+\t\t{DW_AT_prototyped 1 DW_FORM_flag_present}\n+\t\t{DW_AT_inline 0x1 DW_FORM_data1}\n+\t    }\n+\n+\t    bar_subprogram: DW_TAG_subprogram {\n+\t\t{DW_AT_name \"bar\"}\n+\t\t{DW_AT_prototyped 1 DW_FORM_flag_present}\n+\t\t{DW_AT_inline 0x1 DW_FORM_data1}\n+\t    }\n+\t}\n+    }\n+\n+    lines { } stmt_list {\n+\tglobal srcdir subdir srcfile\n+\n+\tinclude_dir \"/some/directory\"\n+\tfile_name \"/some/directory/file.c\" 0\n+    }\n+}\n+\n+if { [build_executable ${testfile}.exp ${testfile} \"$srcfile $dwarf_asm\" \\\n+      {additional_flags=-nostdlib additional_flags=-static}] != 0 } {\n+    untested \"failed to compile\"\n+    return\n+}\n+\n+clean_restart $binfile\n+\n+if { [gdb_starti_cmd] != 0 } {\n+    fail \"failed to run to first instruction\"\n+    return\n+}\n+\n+gdb_test \"frame\" \"in _start .*\"\n+\n+gdb_test \"stepi\" \"in foo .*\" \"step into foo\"\n+gdb_test \"stepi\" \"in bar .*\" \"step into bar\"\n+gdb_test \"stepi\" \"in foo .*\" \"step back into foo\"\n+gdb_test \"stepi\" \"in _start .*\" \"step back into _start\""
    }
  ]
}