{
  "sha": "fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmMzZWNiM2U2MWZlNWRjYzE2YzIwNmU0MTM1YjMzY2MxYTMyYmE0OQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-23T19:26:36Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-06-23T19:34:45Z"
    },
    "message": "gdb: add empty lines in loc.c\n\nI always found that some switch statements in this file were a bit too\npacked.  I think having empty lines between each case helps with\nreading.  I'm pushing this as obvious, I hope it won't be too\ncontroversial.\n\ngdb/ChangeLog:\n\n\t* dwarf2/loc.c (decode_debug_loc_dwo_addresses): Add empty\n\tlines.\n\t(dwarf2_find_location_expression): Likewise.\n\t(call_site_parameter_matches): Likewise.\n\t(dwarf2_compile_expr_to_ax): Likewise.\n\t(disassemble_dwarf_expression): Likewise.\n\t(loclist_describe_location): Likewise.\n\nChange-Id: I381366a0468ff1793faa612c46ef48a9d4773192",
    "tree": {
      "sha": "382da883a1c8d0f2d61371698ef9bcaa80909a04",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/382da883a1c8d0f2d61371698ef9bcaa80909a04"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f37b21b481a7804a13c5806098c19b6119288ba4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37b21b481a7804a13c5806098c19b6119288ba4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f37b21b481a7804a13c5806098c19b6119288ba4"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 51,
    "deletions": 1
  },
  "files": [
    {
      "sha": "6b21c192729bdc323187cb72441f7cb67e2c0d99",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-23  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/loc.c (decode_debug_loc_dwo_addresses): Add empty\n+\tlines.\n+\t(dwarf2_find_location_expression): Likewise.\n+\t(call_site_parameter_matches): Likewise.\n+\t(dwarf2_compile_expr_to_ax): Likewise.\n+\t(disassemble_dwarf_expression): Likewise.\n+\t(loclist_describe_location): Likewise.\n+\n 2020-06-23  Pedro Alves  <palves@redhat.com>\n \n \t* gdbarch-selftests.c: Don't include inferior.h, gdbthread.h or"
    },
    {
      "sha": "732c41d1c8c6c7ae1ee6ab3bb00b4c2ac864b6f6",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 41,
      "deletions": 1,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
      "patch": "@@ -271,36 +271,45 @@ decode_debug_loc_dwo_addresses (dwarf2_per_cu_data *per_cu,\n     case DW_LLE_GNU_end_of_list_entry:\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_END_OF_LIST;\n+\n     case DW_LLE_GNU_base_address_selection_entry:\n       *low = 0;\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &high_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high = dwarf2_read_addr_index (per_cu, per_objfile, high_index);\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_BASE_ADDRESS;\n+\n     case DW_LLE_GNU_start_end_entry:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &low_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *low = dwarf2_read_addr_index (per_cu, per_objfile, low_index);\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &high_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high = dwarf2_read_addr_index (per_cu, per_objfile, high_index);\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_START_END;\n+\n     case DW_LLE_GNU_start_length_entry:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &low_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *low = dwarf2_read_addr_index (per_cu, per_objfile, low_index);\n       if (loc_ptr + 4 > buf_end)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high = *low;\n       *high += extract_unsigned_integer (loc_ptr, 4, byte_order);\n       *new_ptr = loc_ptr + 4;\n       return DEBUG_LOC_START_LENGTH;\n+\n     default:\n       return DEBUG_LOC_INVALID_ENTRY;\n     }\n@@ -362,17 +371,21 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \tcase DEBUG_LOC_END_OF_LIST:\n \t  *locexpr_length = 0;\n \t  return NULL;\n+\n \tcase DEBUG_LOC_BASE_ADDRESS:\n \t  base_address = high + base_offset;\n \t  continue;\n+\n \tcase DEBUG_LOC_START_END:\n \tcase DEBUG_LOC_START_LENGTH:\n \tcase DEBUG_LOC_OFFSET_PAIR:\n \t  break;\n+\n \tcase DEBUG_LOC_BUFFER_OVERFLOW:\n \tcase DEBUG_LOC_INVALID_ENTRY:\n \t  error (_(\"dwarf2_find_location_expression: \"\n \t\t   \"Corrupted DWARF expression.\"));\n+\n \tdefault:\n \t  gdb_assert_not_reached (\"bad debug_loc_kind\");\n \t}\n@@ -1279,8 +1292,10 @@ call_site_parameter_matches (struct call_site_parameter *parameter,\n       {\n       case CALL_SITE_PARAMETER_DWARF_REG:\n \treturn kind_u.dwarf_reg == parameter->u.dwarf_reg;\n+\n       case CALL_SITE_PARAMETER_FB_OFFSET:\n \treturn kind_u.fb_offset == parameter->u.fb_offset;\n+\n       case CALL_SITE_PARAMETER_PARAM_OFFSET:\n \treturn kind_u.param_cu_off == parameter->u.param_cu_off;\n       }\n@@ -3085,38 +3100,47 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t  ax_const_l (expr, extract_unsigned_integer (op_ptr, 1, byte_order));\n \t  op_ptr += 1;\n \t  break;\n+\n \tcase DW_OP_const1s:\n \t  ax_const_l (expr, extract_signed_integer (op_ptr, 1, byte_order));\n \t  op_ptr += 1;\n \t  break;\n+\n \tcase DW_OP_const2u:\n \t  ax_const_l (expr, extract_unsigned_integer (op_ptr, 2, byte_order));\n \t  op_ptr += 2;\n \t  break;\n+\n \tcase DW_OP_const2s:\n \t  ax_const_l (expr, extract_signed_integer (op_ptr, 2, byte_order));\n \t  op_ptr += 2;\n \t  break;\n+\n \tcase DW_OP_const4u:\n \t  ax_const_l (expr, extract_unsigned_integer (op_ptr, 4, byte_order));\n \t  op_ptr += 4;\n \t  break;\n+\n \tcase DW_OP_const4s:\n \t  ax_const_l (expr, extract_signed_integer (op_ptr, 4, byte_order));\n \t  op_ptr += 4;\n \t  break;\n+\n \tcase DW_OP_const8u:\n \t  ax_const_l (expr, extract_unsigned_integer (op_ptr, 8, byte_order));\n \t  op_ptr += 8;\n \t  break;\n+\n \tcase DW_OP_const8s:\n \t  ax_const_l (expr, extract_signed_integer (op_ptr, 8, byte_order));\n \t  op_ptr += 8;\n \t  break;\n+\n \tcase DW_OP_constu:\n \t  op_ptr = safe_read_uleb128 (op_ptr, op_end, &uoffset);\n \t  ax_const_l (expr, uoffset);\n \t  break;\n+\n \tcase DW_OP_consts:\n \t  op_ptr = safe_read_sleb128 (op_ptr, op_end, &offset);\n \t  ax_const_l (expr, offset);\n@@ -3233,6 +3257,7 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t      ax_simple (expr, aop_add);\n \t    }\n \t  break;\n+\n \tcase DW_OP_bregx:\n \t  {\n \t    op_ptr = safe_read_uleb128 (op_ptr, op_end, &reg);\n@@ -3246,6 +3271,7 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t      }\n \t  }\n \t  break;\n+\n \tcase DW_OP_fbreg:\n \t  {\n \t    const gdb_byte *datastart;\n@@ -3295,7 +3321,7 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t  offset = *op_ptr++;\n \t  ax_pick (expr, offset);\n \t  break;\n-\t  \n+\n \tcase DW_OP_swap:\n \t  ax_simple (expr, aop_swap);\n \t  break;\n@@ -3941,45 +3967,54 @@ disassemble_dwarf_expression (struct ui_file *stream,\n \t  data += 1;\n \t  fprintf_filtered (stream, \" %s\", pulongest (ul));\n \t  break;\n+\n \tcase DW_OP_const1s:\n \t  l = extract_signed_integer (data, 1, gdbarch_byte_order (arch));\n \t  data += 1;\n \t  fprintf_filtered (stream, \" %s\", plongest (l));\n \t  break;\n+\n \tcase DW_OP_const2u:\n \t  ul = extract_unsigned_integer (data, 2, gdbarch_byte_order (arch));\n \t  data += 2;\n \t  fprintf_filtered (stream, \" %s\", pulongest (ul));\n \t  break;\n+\n \tcase DW_OP_const2s:\n \t  l = extract_signed_integer (data, 2, gdbarch_byte_order (arch));\n \t  data += 2;\n \t  fprintf_filtered (stream, \" %s\", plongest (l));\n \t  break;\n+\n \tcase DW_OP_const4u:\n \t  ul = extract_unsigned_integer (data, 4, gdbarch_byte_order (arch));\n \t  data += 4;\n \t  fprintf_filtered (stream, \" %s\", pulongest (ul));\n \t  break;\n+\n \tcase DW_OP_const4s:\n \t  l = extract_signed_integer (data, 4, gdbarch_byte_order (arch));\n \t  data += 4;\n \t  fprintf_filtered (stream, \" %s\", plongest (l));\n \t  break;\n+\n \tcase DW_OP_const8u:\n \t  ul = extract_unsigned_integer (data, 8, gdbarch_byte_order (arch));\n \t  data += 8;\n \t  fprintf_filtered (stream, \" %s\", pulongest (ul));\n \t  break;\n+\n \tcase DW_OP_const8s:\n \t  l = extract_signed_integer (data, 8, gdbarch_byte_order (arch));\n \t  data += 8;\n \t  fprintf_filtered (stream, \" %s\", plongest (l));\n \t  break;\n+\n \tcase DW_OP_constu:\n \t  data = safe_read_uleb128 (data, end, &ul);\n \t  fprintf_filtered (stream, \" %s\", pulongest (ul));\n \t  break;\n+\n \tcase DW_OP_consts:\n \t  data = safe_read_sleb128 (data, end, &l);\n \t  fprintf_filtered (stream, \" %s\", plongest (l));\n@@ -4262,6 +4297,7 @@ disassemble_dwarf_expression (struct ui_file *stream,\n \t  ul = dwarf2_read_addr_index (per_cu, per_objfile, ul);\n \t  fprintf_filtered (stream, \" 0x%s\", phex_nz (ul, addr_size));\n \t  break;\n+\n \tcase DW_OP_GNU_const_index:\n \t  data = safe_read_uleb128 (data, end, &ul);\n \t  ul = dwarf2_read_addr_index (per_cu, per_objfile, ul);\n@@ -4583,19 +4619,23 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \tcase DEBUG_LOC_END_OF_LIST:\n \t  done = 1;\n \t  continue;\n+\n \tcase DEBUG_LOC_BASE_ADDRESS:\n \t  base_address = high + base_offset;\n \t  fprintf_filtered (stream, _(\"  Base address %s\"),\n \t\t\t    paddress (gdbarch, base_address));\n \t  continue;\n+\n \tcase DEBUG_LOC_START_END:\n \tcase DEBUG_LOC_START_LENGTH:\n \tcase DEBUG_LOC_OFFSET_PAIR:\n \t  break;\n+\n \tcase DEBUG_LOC_BUFFER_OVERFLOW:\n \tcase DEBUG_LOC_INVALID_ENTRY:\n \t  error (_(\"Corrupted DWARF expression for symbol \\\"%s\\\".\"),\n \t\t symbol->print_name ());\n+\n \tdefault:\n \t  gdb_assert_not_reached (\"bad debug_loc_kind\");\n \t}"
    }
  ]
}