{
  "sha": "166a12baeaa46b84682691dc48801d380329ae2e",
  "node_id": "C_kwDOANOeidoAKDE2NmExMmJhZWFhNDZiODQ2ODI2OTFkYzQ4ODAxZDM4MDMyOWFlMmU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-15T22:02:05Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-17T22:07:09Z"
    },
    "message": "Document gdbarch-components.py\n\nThis adds a comment to document how to update gdbarch.",
    "tree": {
      "sha": "a02c54f5a22ca38048d7cbec95f67b69d537648d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a02c54f5a22ca38048d7cbec95f67b69d537648d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/166a12baeaa46b84682691dc48801d380329ae2e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/166a12baeaa46b84682691dc48801d380329ae2e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/166a12baeaa46b84682691dc48801d380329ae2e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/166a12baeaa46b84682691dc48801d380329ae2e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb14eb082928bcad8aaed07e6d6dc901a1274db6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb14eb082928bcad8aaed07e6d6dc901a1274db6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fb14eb082928bcad8aaed07e6d6dc901a1274db6"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 82,
    "deletions": 0
  },
  "files": [
    {
      "sha": "a5c3c38147fecaf25426fa79cc0ab175d33d381f",
      "filename": "gdb/gdbarch-components.py",
      "status": "modified",
      "additions": 82,
      "deletions": 0,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/166a12baeaa46b84682691dc48801d380329ae2e/gdb/gdbarch-components.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/166a12baeaa46b84682691dc48801d380329ae2e/gdb/gdbarch-components.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch-components.py?ref=166a12baeaa46b84682691dc48801d380329ae2e",
      "patch": "@@ -17,6 +17,88 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+# How to add to gdbarch:\n+#\n+# There are four kinds of fields in gdbarch:\n+#\n+# * Info - you should never need this; it is only for things that are\n+# copied directly from the gdbarch_info.\n+#\n+# * Value - a variable.\n+#\n+# * Function - a function pointer.\n+#\n+# * Method - a function pointer, but the function takes a gdbarch as\n+# its first parameter.\n+#\n+# You construct a new one with a call to one of those functions.  So,\n+# for instance, you can use the function named \"Value\" to make a new\n+# Value.\n+#\n+# All parameters are keyword-only.  This is done to help catch typos.\n+#\n+# Some parameters are shared among all types (including Info):\n+#\n+# * \"name\" - required, the name of the field.\n+#\n+# * \"type\" - required, the type of the field.  For functions and\n+# methods, this is the return type.\n+#\n+# * \"printer\" - an expression to turn this field into a 'const char\n+# *'.  This is used for dumping.  The string must live long enough to\n+# be passed to printf.\n+#\n+# Value, Function, and Method share some more parameters.  Some of\n+# these work in conjunction in a somewhat complicated way, so they are\n+# described in a separate sub-section below.\n+#\n+# * \"comment\" - a comment that's written to the .h file.  Please\n+# always use this.  (It isn't currently a required option for\n+# historical reasons.)\n+#\n+# * \"predicate\" - a boolean, if True then a _p predicate function will\n+# be generated.  The predicate will use the generic validation\n+# function for the field.  See below.\n+#\n+# * \"predefault\", \"postdefault\", and \"invalid\" - These are used for\n+# the initialization and verification steps:\n+#\n+# A gdbarch is zero-initialized.  Then, if a field has a pre-default,\n+# the field is set to that value.  After initialization is complete\n+# (that is, after the tdep code has a change to change the settings),\n+# the post-initialization step is done.\n+#\n+# There is a generic algorithm to generate a \"validation function\" for\n+# all fields.  If the field has an \"invalid\" attribute with a string\n+# value, then this string is the expression (note that a string-valued\n+# \"invalid\" and \"predicate\" are mutually exclusive; and the case where\n+# invalid is True means to ignore this field and instead use the\n+# default checking that is about to be described).  Otherwise, if\n+# there is a \"predefault\", then the field is valid if it differs from\n+# the predefault.  Otherwise, the check is done against 0 (really NULL\n+# for function pointers, but same idea).\n+#\n+# In post-initialization / validation, there are several cases.\n+#\n+# * If \"invalid\" is False, or if the field specifies \"predicate\",\n+# validation is skipped.  Otherwise, a validation step is emitted.\n+#\n+# * Otherwise, the validity is checked using the usual validation\n+# function (see above).  If the field is considered valid, nothing is\n+# done.\n+#\n+# * Otherwise, the field's value is invalid.  If there is a\n+# \"postdefault\", then the field is assigned that value.\n+#\n+# * Otherwise, the gdbarch will fail validation and gdb will crash.\n+#\n+# Function and Method share:\n+#\n+# * \"params\" - required, a tuple of tuples.  Each inner tuple is a\n+# pair of the form (TYPE, NAME), where TYPE is the type of this\n+# argument, and NAME is the name.  Note that while the names could be\n+# auto-generated, this approach lets the \"comment\" field refer to\n+# arguments in a nicer way.  It is also just nicer for users.\n \n Info(\n     type=\"const struct bfd_arch_info *\","
    }
  ]
}