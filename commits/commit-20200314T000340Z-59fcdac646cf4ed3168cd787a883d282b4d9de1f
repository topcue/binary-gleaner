{
  "sha": "59fcdac646cf4ed3168cd787a883d282b4d9de1f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTlmY2RhYzY0NmNmNGVkMzE2OGNkNzg3YTg4M2QyODJiNGQ5ZGUxZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:40Z"
    },
    "message": "Convert Modula-2 printing to value-based API\n\nThis finishes the conversion of Modula-2 printing to the value-based\nAPI.  It does so by copying the body of m2_val_print into\nm2_value_print_inner, and then introducing new functions as needed to\nuse the value API.\n\nThe \"val_\" API code continues to exist, because it's still possible\nfor it to be called via some paths.  This code will all be removed at\nthe end of the series.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* m2-valprint.c (m2_print_unbounded_array): New overload.\n\t(m2_print_unbounded_array): Update.\n\t(m2_print_array_contents): Take a struct value.\n\t(m2_value_print_inner): Rewrite.",
    "tree": {
      "sha": "7c0a837e4e4fdc70ed6c0e4bc01d311f1462bfe0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c0a837e4e4fdc70ed6c0e4bc01d311f1462bfe0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/59fcdac646cf4ed3168cd787a883d282b4d9de1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/59fcdac646cf4ed3168cd787a883d282b4d9de1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/59fcdac646cf4ed3168cd787a883d282b4d9de1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/59fcdac646cf4ed3168cd787a883d282b4d9de1f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d133c3e1a877259bbee460897d9a6a2820ffe451",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d133c3e1a877259bbee460897d9a6a2820ffe451",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d133c3e1a877259bbee460897d9a6a2820ffe451"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 214,
    "deletions": 17
  },
  "files": [
    {
      "sha": "04657f2cd5035978008f3dc94f4da30dc0651ccb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/59fcdac646cf4ed3168cd787a883d282b4d9de1f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/59fcdac646cf4ed3168cd787a883d282b4d9de1f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=59fcdac646cf4ed3168cd787a883d282b4d9de1f",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* m2-valprint.c (m2_print_unbounded_array): New overload.\n+\t(m2_print_unbounded_array): Update.\n+\t(m2_print_array_contents): Take a struct value.\n+\t(m2_value_print_inner): Rewrite.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* d-valprint.c (dynamic_array_type): Call d_value_print_inner."
    },
    {
      "sha": "63d8c150a8efafdc823ec203d506c10f903a059e",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 207,
      "deletions": 17,
      "changes": 224,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/59fcdac646cf4ed3168cd787a883d282b4d9de1f/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/59fcdac646cf4ed3168cd787a883d282b4d9de1f/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=59fcdac646cf4ed3168cd787a883d282b4d9de1f",
      "patch": "@@ -35,10 +35,8 @@ static int print_unpacked_pointer (struct type *type,\n \t\t\t\t   const struct value_print_options *options,\n \t\t\t\t   struct ui_file *stream);\n static void\n-m2_print_array_contents (struct type *type, const gdb_byte *valaddr,\n-\t\t\t int embedded_offset, CORE_ADDR address,\n+m2_print_array_contents (struct value *val,\n \t\t\t struct ui_file *stream, int recurse,\n-\t\t\t struct value *val,\n \t\t\t const struct value_print_options *options,\n \t\t\t int len);\n \n@@ -158,6 +156,31 @@ m2_print_long_set (struct type *type, const gdb_byte *valaddr,\n     }\n }\n \n+static void\n+m2_print_unbounded_array (struct value *value,\n+\t\t\t  struct ui_file *stream, int recurse,\n+\t\t\t  const struct value_print_options *options)\n+{\n+  CORE_ADDR addr;\n+  LONGEST len;\n+  struct value *val;\n+\n+  struct type *type = check_typedef (value_type (value));\n+  const gdb_byte *valaddr = value_contents_for_printing (value);\n+\n+  addr = unpack_pointer (TYPE_FIELD_TYPE (type, 0),\n+\t\t\t (TYPE_FIELD_BITPOS (type, 0) / 8) +\n+\t\t\t valaddr);\n+\n+  val = value_at_lazy (TYPE_TARGET_TYPE (TYPE_FIELD_TYPE (type, 0)),\n+\t\t       addr);\n+  len = unpack_field_as_long (type, valaddr, 1);\n+\n+  fprintf_filtered (stream, \"{\");  \n+  m2_print_array_contents (val, stream, recurse, options, len);\n+  fprintf_filtered (stream, \", HIGH = %d}\", (int) len);\n+}\n+\n static void\n m2_print_unbounded_array (struct type *type, const gdb_byte *valaddr,\n \t\t\t  int embedded_offset, CORE_ADDR address,\n@@ -179,10 +202,7 @@ m2_print_unbounded_array (struct type *type, const gdb_byte *valaddr,\n   len = unpack_field_as_long (type, valaddr + embedded_offset, 1);\n \n   fprintf_filtered (stream, \"{\");  \n-  m2_print_array_contents (value_type (val),\n-\t\t\t   value_contents_for_printing (val),\n-\t\t\t   value_embedded_offset (val), addr, stream,\n-\t\t\t   recurse, val, options, len);\n+  m2_print_array_contents (val, stream, recurse, options, len);\n   fprintf_filtered (stream, \", HIGH = %d}\", (int) len);\n }\n \n@@ -261,14 +281,12 @@ print_variable_at_address (struct type *type,\n                              separated values.  */\n \n static void\n-m2_print_array_contents (struct type *type, const gdb_byte *valaddr,\n-\t\t\t int embedded_offset, CORE_ADDR address,\n+m2_print_array_contents (struct value *val,\n \t\t\t struct ui_file *stream, int recurse,\n-\t\t\t struct value *val,\n \t\t\t const struct value_print_options *options,\n \t\t\t int len)\n {\n-  type = check_typedef (type);\n+  struct type *type = check_typedef (value_type (val));\n \n   if (TYPE_LENGTH (type) > 0)\n     {\n@@ -280,13 +298,12 @@ m2_print_array_contents (struct type *type, const gdb_byte *valaddr,\n \t   || ((current_language->la_language == language_m2)\n \t       && (TYPE_CODE (type) == TYPE_CODE_CHAR)))\n \t  && (options->format == 0 || options->format == 's'))\n-\tval_print_string (type, NULL, address, len+1, stream, options);\n+\tval_print_string (type, NULL, value_address (val), len+1, stream,\n+\t\t\t  options);\n       else\n \t{\n \t  fprintf_filtered (stream, \"{\");\n-\t  val_print_array_elements (type, embedded_offset,\n-\t\t\t\t    address, stream, recurse, val,\n-\t\t\t\t    options, 0);\n+\t  value_print_array_elements (val, stream, recurse, options, 0);\n \t  fprintf_filtered (stream, \"}\");\n \t}\n     }\n@@ -510,6 +527,179 @@ void\n m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n \t\t      const struct value_print_options *options)\n {\n-  m2_val_print (value_type (val), value_embedded_offset (val),\n-\t\tvalue_address (val), stream, recurse, val, options);\n+  unsigned len;\n+  struct type *elttype;\n+  CORE_ADDR addr;\n+  const gdb_byte *valaddr = value_contents_for_printing (val);\n+  const CORE_ADDR address = value_address (val);\n+\n+  struct type *type = check_typedef (value_type (val));\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_ARRAY:\n+      if (TYPE_LENGTH (type) > 0 && TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0)\n+\t{\n+\t  elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\t  len = TYPE_LENGTH (type) / TYPE_LENGTH (elttype);\n+\t  if (options->prettyformat_arrays)\n+\t    print_spaces_filtered (2 + 2 * recurse, stream);\n+\t  /* For an array of chars, print with string syntax.  */\n+\t  if (TYPE_LENGTH (elttype) == 1 &&\n+\t      ((TYPE_CODE (elttype) == TYPE_CODE_INT)\n+\t       || ((current_language->la_language == language_m2)\n+\t\t   && (TYPE_CODE (elttype) == TYPE_CODE_CHAR)))\n+\t      && (options->format == 0 || options->format == 's'))\n+\t    {\n+\t      /* If requested, look for the first null char and only print\n+\t         elements up to it.  */\n+\t      if (options->stop_print_at_null)\n+\t\t{\n+\t\t  unsigned int temp_len;\n+\n+\t\t  /* Look for a NULL char.  */\n+\t\t  for (temp_len = 0;\n+\t\t       (valaddr[temp_len]\n+\t\t\t&& temp_len < len && temp_len < options->print_max);\n+\t\t       temp_len++);\n+\t\t  len = temp_len;\n+\t\t}\n+\n+\t      LA_PRINT_STRING (stream, TYPE_TARGET_TYPE (type),\n+\t\t\t       valaddr, len, NULL, 0, options);\n+\t    }\n+\t  else\n+\t    {\n+\t      fprintf_filtered (stream, \"{\");\n+\t      value_print_array_elements (val, stream, recurse,\n+\t\t\t\t\t  options, 0);\n+\t      fprintf_filtered (stream, \"}\");\n+\t    }\n+\t  break;\n+\t}\n+      /* Array of unspecified length: treat like pointer to first elt.  */\n+      print_unpacked_pointer (type, address, address, options, stream);\n+      break;\n+\n+    case TYPE_CODE_PTR:\n+      if (TYPE_CONST (type))\n+\tprint_variable_at_address (type, valaddr, stream, recurse, options);\n+      else if (options->format && options->format != 's')\n+\tvalue_print_scalar_formatted (val, options, 0, stream);\n+      else\n+\t{\n+\t  addr = unpack_pointer (type, valaddr);\n+\t  print_unpacked_pointer (type, addr, address, options, stream);\n+\t}\n+      break;\n+\n+    case TYPE_CODE_UNION:\n+      if (recurse && !options->unionprint)\n+\t{\n+\t  fprintf_filtered (stream, \"{...}\");\n+\t  break;\n+\t}\n+      /* Fall through.  */\n+    case TYPE_CODE_STRUCT:\n+      if (m2_is_long_set (type))\n+\tm2_print_long_set (type, valaddr, 0, address, stream);\n+      else if (m2_is_unbounded_array (type))\n+\tm2_print_unbounded_array (val, stream, recurse, options);\n+      else\n+\tcp_print_value_fields (type, type, 0,\n+\t\t\t       address, stream, recurse, val,\n+\t\t\t       options, NULL, 0);\n+      break;\n+\n+    case TYPE_CODE_SET:\n+      elttype = TYPE_INDEX_TYPE (type);\n+      elttype = check_typedef (elttype);\n+      if (TYPE_STUB (elttype))\n+\t{\n+\t  fprintf_styled (stream, metadata_style.style (),\n+\t\t\t  _(\"<incomplete type>\"));\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  struct type *range = elttype;\n+\t  LONGEST low_bound, high_bound;\n+\t  int i;\n+\t  int need_comma = 0;\n+\n+\t  fputs_filtered (\"{\", stream);\n+\n+\t  i = get_discrete_bounds (range, &low_bound, &high_bound);\n+\tmaybe_bad_bstring:\n+\t  if (i < 0)\n+\t    {\n+\t      fputs_styled (_(\"<error value>\"), metadata_style.style (),\n+\t\t\t    stream);\n+\t      goto done;\n+\t    }\n+\n+\t  for (i = low_bound; i <= high_bound; i++)\n+\t    {\n+\t      int element = value_bit_index (type, valaddr, i);\n+\n+\t      if (element < 0)\n+\t\t{\n+\t\t  i = element;\n+\t\t  goto maybe_bad_bstring;\n+\t\t}\n+\t      if (element)\n+\t\t{\n+\t\t  if (need_comma)\n+\t\t    fputs_filtered (\", \", stream);\n+\t\t  print_type_scalar (range, i, stream);\n+\t\t  need_comma = 1;\n+\n+\t\t  if (i + 1 <= high_bound\n+\t\t      && value_bit_index (type, valaddr, ++i))\n+\t\t    {\n+\t\t      int j = i;\n+\n+\t\t      fputs_filtered (\"..\", stream);\n+\t\t      while (i + 1 <= high_bound\n+\t\t\t     && value_bit_index (type, valaddr, ++i))\n+\t\t\tj = i;\n+\t\t      print_type_scalar (range, j, stream);\n+\t\t    }\n+\t\t}\n+\t    }\n+\tdone:\n+\t  fputs_filtered (\"}\", stream);\n+\t}\n+      break;\n+\n+    case TYPE_CODE_RANGE:\n+      if (TYPE_LENGTH (type) == TYPE_LENGTH (TYPE_TARGET_TYPE (type)))\n+\t{\n+\t  struct value *v = value_cast (TYPE_TARGET_TYPE (type), val);\n+\t  m2_value_print_inner (v, stream, recurse, options);\n+\t  break;\n+\t}\n+      /* FIXME: create_static_range_type does not set the unsigned bit in a\n+         range type (I think it probably should copy it from the target\n+         type), so we won't print values which are too large to\n+         fit in a signed integer correctly.  */\n+      /* FIXME: Doesn't handle ranges of enums correctly.  (Can't just\n+         print with the target type, though, because the size of our type\n+         and the target type might differ).  */\n+      /* FALLTHROUGH */\n+\n+    case TYPE_CODE_REF:\n+    case TYPE_CODE_ENUM:\n+    case TYPE_CODE_FUNC:\n+    case TYPE_CODE_INT:\n+    case TYPE_CODE_FLT:\n+    case TYPE_CODE_METHOD:\n+    case TYPE_CODE_VOID:\n+    case TYPE_CODE_ERROR:\n+    case TYPE_CODE_UNDEF:\n+    case TYPE_CODE_BOOL:\n+    case TYPE_CODE_CHAR:\n+    default:\n+      generic_value_print (val, stream, recurse, options, &m2_decorations);\n+      break;\n+    }\n }"
    }
  ]
}