{
  "sha": "1d58d6a26c2a93b80f93a5d058dd678782affd5d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWQ1OGQ2YTI2YzJhOTNiODBmOTNhNWQwNThkZDY3ODc4MmFmZmQ1ZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-20T00:20:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-02T15:53:17Z"
    },
    "message": "Make print-file-var.exp test attribute visibility hidden, dlopen, and main symbol\n\nMake gdb.base/print-file-var.exp test all combinations of:\n\n  - attribute hidden in the this_version_id symbols or not\n  - dlopen or not\n  - this_version_id symbol in main file or not\n  - C++\n\ngdb/testsuite/ChangeLog\n2019-10-02  Pedro Alves  <palves@redhat.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* gdb.base/print-file-var-lib1.c: Include <stdio.h> and\n\t\"print-file-var.h\".\n\t(this_version_id) Use ATTRIBUTE_VISIBILITY.\n\t(get_version_1): Print this_version_id and its address.\n\tAdd extern \"C\" wrappers around interface functions.\n\t* gdb.base/print-file-var-lib2.c: Include <stdio.h> and\n\t\"print-file-var.h\".\n\t(this_version_id) Use ATTRIBUTE_VISIBILITY.\n\t(get_version_2): Print this_version_id and its address.\n\tAdd extern \"C\" wrappers around interface functions.\n\t* gdb.base/print-file-var-main.c: Include <dlfcn.h>, <assert.h>,\n\t<stddef.h> and \"print-file-var.h\".\n\tAdd extern \"C\" wrappers around interface functions.\n\t[VERSION_ID_MAIN] (this_version_id): Define.\n\t(main): Define v0.  Use dlopen if SHLIB_NAME is defined.\n\t* gdb.base/print-file-var.h: Add some #defines to simplify setting\n\tup extern \"C\" blocks.\n\t* gdb.base/print-file-var.exp (test): New, factored out from top\n\tlevel.\n\t(top level): Test all combinations of attribute hidden or not,\n\tdlopen or not, and this_version_id symbol in main file or not.\n\tCompile tests as both C++ and C, make test names unique.",
    "tree": {
      "sha": "e1c71bba761d41f04247d87f76116821db6cab5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1c71bba761d41f04247d87f76116821db6cab5f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1d58d6a26c2a93b80f93a5d058dd678782affd5d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d58d6a26c2a93b80f93a5d058dd678782affd5d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1d58d6a26c2a93b80f93a5d058dd678782affd5d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d58d6a26c2a93b80f93a5d058dd678782affd5d/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4b610737f02338b2aea7641ab771aa5e137d067c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b610737f02338b2aea7641ab771aa5e137d067c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4b610737f02338b2aea7641ab771aa5e137d067c"
    }
  ],
  "stats": {
    "total": 324,
    "additions": 246,
    "deletions": 78
  },
  "files": [
    {
      "sha": "524133c5e9b428d7a0e8862a44011122c4fd577c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1d58d6a26c2a93b80f93a5d058dd678782affd5d",
      "patch": "@@ -1,3 +1,29 @@\n+2019-10-02  Pedro Alves  <palves@redhat.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/print-file-var-lib1.c: Include <stdio.h> and\n+\t\"print-file-var.h\".\n+\t(this_version_id) Use ATTRIBUTE_VISIBILITY.\n+\t(get_version_1): Print this_version_id and its address.\n+\tAdd extern \"C\" wrappers around interface functions.\n+\t* gdb.base/print-file-var-lib2.c: Include <stdio.h> and\n+\t\"print-file-var.h\".\n+\t(this_version_id) Use ATTRIBUTE_VISIBILITY.\n+\t(get_version_2): Print this_version_id and its address.\n+\tAdd extern \"C\" wrappers around interface functions.\n+\t* gdb.base/print-file-var-main.c: Include <dlfcn.h>, <assert.h>,\n+\t<stddef.h> and \"print-file-var.h\".\n+\tAdd extern \"C\" wrappers around interface functions.\n+\t[VERSION_ID_MAIN] (this_version_id): Define.\n+\t(main): Define v0.  Use dlopen if SHLIB_NAME is defined.\n+\t* gdb.base/print-file-var.h: Add some #defines to simplify setting\n+\tup extern \"C\" blocks.\n+\t* gdb.base/print-file-var.exp (test): New, factored out from top\n+\tlevel.\n+\t(top level): Test all combinations of attribute hidden or not,\n+\tdlopen or not, and this_version_id symbol in main file or not.\n+\tCompile tests as both C++ and C, make test names unique.\n+\n 2019-10-01  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.base/style.exp: Test \"show logging filename\"."
    },
    {
      "sha": "d172c15bc7d829d816df53c0e19f96ca765efa66",
      "filename": "gdb/testsuite/gdb.base/print-file-var-lib1.c",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var-lib1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var-lib1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/print-file-var-lib1.c?ref=1d58d6a26c2a93b80f93a5d058dd678782affd5d",
      "patch": "@@ -14,10 +14,19 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-int this_version_id = 104;\n+#include <stdio.h>\n+#include \"print-file-var.h\"\n+\n+ATTRIBUTE_VISIBILITY int this_version_id = 104;\n+\n+START_EXTERN_C\n \n int\n get_version_1 (void)\n {\n+  printf (\"get_version_1: &this_version_id=%p, this_version_id=%d\\n\", &this_version_id, this_version_id);\n+\n   return this_version_id;\n }\n+\n+END_EXTERN_C"
    },
    {
      "sha": "b392aff9f3d4133247a385ef3c5e8281558f7640",
      "filename": "gdb/testsuite/gdb.base/print-file-var-lib2.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var-lib2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var-lib2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/print-file-var-lib2.c?ref=1d58d6a26c2a93b80f93a5d058dd678782affd5d",
      "patch": "@@ -14,10 +14,18 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-int this_version_id = 203;\n+#include <stdio.h>\n+#include \"print-file-var.h\"\n+\n+ATTRIBUTE_VISIBILITY int this_version_id = 203;\n+\n+START_EXTERN_C\n \n int\n get_version_2 (void)\n {\n+  printf (\"get_version_2: &this_version_id=%p, this_version_id=%d\\n\", &this_version_id, this_version_id);\n   return this_version_id;\n }\n+\n+END_EXTERN_C"
    },
    {
      "sha": "1472bd448831da4767de68a2bea51343f1a61e22",
      "filename": "gdb/testsuite/gdb.base/print-file-var-main.c",
      "status": "modified",
      "additions": 35,
      "deletions": 7,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/print-file-var-main.c?ref=1d58d6a26c2a93b80f93a5d058dd678782affd5d",
      "patch": "@@ -14,21 +14,49 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#ifdef SHLIB_NAME\n+# include <dlfcn.h>\n+#endif\n+\n+#include <assert.h>\n+#include <stddef.h>\n+\n+#include \"print-file-var.h\"\n+\n+START_EXTERN_C\n+\n extern int get_version_1 (void);\n extern int get_version_2 (void);\n \n+END_EXTERN_C\n+\n+#if VERSION_ID_MAIN\n+ATTRIBUTE_VISIBILITY int this_version_id = 55;\n+#endif\n+\n int\n main (void)\n {\n+#if VERSION_ID_MAIN\n+  int vm = this_version_id;\n+#endif\n   int v1 = get_version_1 ();\n-  int v2 = get_version_2 ();\n+  int v2;\n+\n+#ifdef SHLIB_NAME\n+  {\n+    void *handle = dlopen (SHLIB_NAME, RTLD_LAZY);\n+    int (*getver2) (void);\n+\n+    assert (handle != NULL);\n \n-  if (v1 != 104)\n-    return 1;\n-  /* The value returned by get_version_2 depends on the target system.  */\n-  if (v2 != 104 && v2 != 203)\n-    return 2;\n+    getver2 = (int (*)(void)) dlsym (handle, \"get_version_2\");\n+\n+    v2 = getver2 ();\n+  }\n+#else\n+  v2 = get_version_2 ();\n+#endif\n \n   return 0; /* STOP */\n }\n-"
    },
    {
      "sha": "9669f99202c9fde703237e9676e94218882ed636",
      "filename": "gdb/testsuite/gdb.base/print-file-var.exp",
      "status": "modified",
      "additions": 132,
      "deletions": 69,
      "changes": 201,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/print-file-var.exp?ref=1d58d6a26c2a93b80f93a5d058dd678782affd5d",
      "patch": "@@ -17,76 +17,139 @@ if {[skip_shlib_tests]} {\n     return -1\n }\n \n-set executable print-file-var-main\n-\n-set lib1 \"print-file-var-lib1\"\n-set lib2 \"print-file-var-lib2\"\n-\n-set libobj1 [standard_output_file ${lib1}.so]\n-set libobj2 [standard_output_file ${lib2}.so]\n-\n-set lib_opts { debug additional_flags=-fPIC }\n-\n-if { [gdb_compile_shlib ${srcdir}/${subdir}/${lib1}.c \\\n-                        ${libobj1} \\\n-                        ${lib_opts} ] != \"\" } {\n-    return -1\n+proc test {hidden dlopen version_id_main lang} {\n+    global srcdir subdir\n+\n+    set main \"print-file-var-main\"\n+\n+    set suffix \"-hidden$hidden-dlopen$dlopen-version_id_main$version_id_main\"\n+\n+    # Normally we place different builds (C/C++) of a test into\n+    # subdirectories within the test build directory, however, using\n+    # gdb_load_shlib doesn't work well with this approach, so instead\n+    # add a language specific suffix to the binary and library names.\n+    if { $lang == \"c\" } {\n+\tset suffix \"${suffix}_c\"\n+    } else {\n+\tset suffix \"${suffix}_cpp\"\n+    }\n+\n+    set executable $main$suffix\n+\n+    set lib1 \"print-file-var-lib1\"\n+    set lib2 \"print-file-var-lib2\"\n+\n+    set libobj1 [standard_output_file ${lib1}$suffix.so]\n+    set libobj2 [standard_output_file ${lib2}$suffix.so]\n+\n+    set lib_opts { debug additional_flags=-fPIC $lang }\n+    lappend lib_opts \"additional_flags=-DHIDDEN=$hidden\"\n+\n+    if { [gdb_compile_shlib ${srcdir}/${subdir}/${lib1}.c \\\n+\t      ${libobj1} \\\n+\t      ${lib_opts} ] != \"\" } {\n+\treturn -1\n+    }\n+    if { [gdb_compile_shlib ${srcdir}/${subdir}/${lib2}.c \\\n+\t      ${libobj2} \\\n+\t      ${lib_opts} ] != \"\" } {\n+\treturn -1\n+    }\n+\n+    set main_opts [list debug shlib=${libobj1} $lang]\n+\n+    if {$dlopen} {\n+\tlappend main_opts \"shlib_load\" \\\n+\t    \"additional_flags=-DSHLIB_NAME=\\\"$libobj2\\\"\"\n+    } else {\n+\tlappend main_opts \"shlib=${libobj2}\"\n+    }\n+\n+    lappend main_opts \"additional_flags=-DVERSION_ID_MAIN=$version_id_main\"\n+\n+    if { [gdb_compile \"${srcdir}/${subdir}/${main}.c\" \\\n+\t      [standard_output_file ${executable}] \\\n+\t      executable \\\n+\t      $main_opts]\n+\t != \"\"} {\n+\treturn -1\n+    }\n+\n+    clean_restart $executable\n+    gdb_load_shlib $libobj1\n+    gdb_load_shlib $libobj2\n+\n+    if ![runto_main] {\n+\tuntested \"could not run to main\"\n+\treturn -1\n+    }\n+\n+    # Try printing \"this_version_num\" qualified with the name of the file\n+    # where the variables are defined.  There are three global variables\n+    # with that name, and some systems such as GNU/Linux merge them\n+    # into one single entity, while some other systems such as Windows\n+    # keep them separate.  In the first situation, we have to verify\n+    # that GDB does not randomly select the wrong instance, even when\n+    # a specific filename is used to qualified the lookup.  And in the\n+    # second case, we have to verify that GDB does select the instance\n+    # defined in the given filename.\n+    #\n+    # To avoid adding target-specific code in this testcase, the program\n+    # sets three local variables named 'vm', 'v1' and 'v2' with the value of\n+    # our global variables.  This allows us to compare the value that\n+    # GDB returns for each query against the actual value seen by\n+    # the program itself.\n+\n+    # Get past the initialization of the v* variables.\n+\n+    set bp_location \\\n+\t[gdb_get_line_number \"STOP\" \"${main}.c\"]\n+    gdb_test \"break $main.c:$bp_location\" \\\n+\t\"Breakpoint \\[0-9\\]+ at 0x\\[0-9a-fA-F\\]+: .*\" \\\n+\t\"breapoint at STOP marker\"\n+\n+    gdb_test \"continue\" \\\n+\t\"Breakpoint \\[0-9\\]+, main \\\\(\\\\) at.*STOP.*\" \\\n+\t\"continue to STOP marker\"\n+\n+    # Now check the value of this_version_id in all of\n+    # print-file-var-main.c, print-file-var-lib1.c and\n+    # print-file-var-lib2.c.\n+\n+    # Compare the values of $sym1 and $sym2.\n+    proc compare {sym1 sym2} {\n+\twith_test_prefix \"sym1=$sym1,sym2=$sym2\" {\n+\t    # Done this way instead of comparing the symbols with \"print $sym1\n+\t    # == sym2\" in GDB directly so that the values of the symbols end\n+\t    # up visible in the logs, for debug purposes.\n+\t    set vsym1 [get_integer_valueof $sym1 -1]\n+\t    set vsym2 [get_integer_valueof $sym2 -1]\n+\t    gdb_assert {$vsym1 == $vsym2} \"$sym1 == $sym2\"\n+\t}\n+    }\n+\n+    if $version_id_main {\n+\tcompare \"'print-file-var-main.c'::this_version_id\" \"vm\"\n+\tcompare \"this_version_id\" \"vm\"\n+    }\n+\n+    compare \"'print-file-var-lib1.c'::this_version_id\" \"v1\"\n+    compare \"'print-file-var-lib2.c'::this_version_id\" \"v2\"\n }\n-if { [gdb_compile_shlib ${srcdir}/${subdir}/${lib2}.c \\\n-                        ${libobj2} \\\n-                        ${lib_opts} ] != \"\" } {\n-    return -1\n-}\n-if { [gdb_compile \"${srcdir}/${subdir}/${executable}.c\" \\\n-                  [standard_output_file ${executable}] \\\n-                  executable \\\n-                  [list debug shlib=${libobj1} shlib=${libobj2}]]\n-     != \"\"} {\n-    return -1\n-}\n-\n-clean_restart $executable\n-gdb_load_shlib $libobj1\n-gdb_load_shlib $libobj2\n \n-if ![runto_main] {\n-    untested \"could not run to main\"\n-    return -1\n+# Only test C++ if we are able.  Always use C.\n+if { [skip_cplus_tests] || [get_compiler_info \"c++\"] } {\n+    set lang_list {c}\n+} else {\n+    set lang_list {c c++}\n }\n \n-# Try printing \"this_version_num\" qualified with the name of the file\n-# where the variables are defined.  There are two global variables\n-# with that name, and some systems such as GNU/Linux merge them\n-# into one single entity, while some other systems such as Windows\n-# keep them separate.  In the first situation, we have to verify\n-# that GDB does not randomly select the wrong instance, even when\n-# a specific filename is used to qualified the lookup.  And in the\n-# second case, we have to verify that GDB does select the instance\n-# defined in the given filename.\n-#\n-# To avoid adding target-specific code in this testcase, the program\n-# sets two local variable named 'v1' and 'v2' with the value of\n-# our global variables.  This allows us to compare the value that\n-# GDB returns for each query against the actual value seen by\n-# the program itself.\n-\n-# Get past the initialization of variables 'v1' and 'v2'.\n-\n-set bp_location \\\n-    [gdb_get_line_number \"STOP\" \"${executable}.c\"]\n-gdb_test \"break $executable.c:$bp_location\" \\\n-         \"Breakpoint \\[0-9\\]+ at 0x\\[0-9a-fA-F\\]+: .*\" \\\n-         \"breapoint past v1 & v2 initialization\"\n-\n-gdb_test \"continue\" \\\n-         \"Breakpoint \\[0-9\\]+, main \\\\(\\\\) at.*STOP.*\" \\\n-         \"continue to STOP marker\"\n-\n-# Now check the value of this_version_id in both print-file-var-lib1.c\n-# and print-file-var-lib2.c.\n-\n-gdb_test \"print 'print-file-var-lib1.c'::this_version_id == v1\" \\\n-         \" = 1\"\n-\n-gdb_test \"print 'print-file-var-lib2.c'::this_version_id == v2\" \\\n-         \" = 1\"\n+foreach_with_prefix lang $lang_list {\n+    foreach_with_prefix hidden {0 1} {\n+\tforeach_with_prefix dlopen {0 1} {\n+\t    foreach_with_prefix version_id_main {0 1} {\n+\t\ttest $hidden $dlopen $version_id_main $lang\n+\t    }\n+\t}\n+    }\n+}"
    },
    {
      "sha": "c44e4848b4af703c81ff3133a87591a1095f0bcd",
      "filename": "gdb/testsuite/gdb.base/print-file-var.h",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d58d6a26c2a93b80f93a5d058dd678782affd5d/gdb/testsuite/gdb.base/print-file-var.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/print-file-var.h?ref=1d58d6a26c2a93b80f93a5d058dd678782affd5d",
      "patch": "@@ -0,0 +1,34 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef PRINT_FILE_VAR_H\n+#define PRINT_FILE_VAR_H\n+\n+#if HIDDEN\n+# define ATTRIBUTE_VISIBILITY __attribute__((visibility (\"hidden\")))\n+#else\n+# define ATTRIBUTE_VISIBILITY\n+#endif\n+\n+#ifdef __cplusplus\n+# define START_EXTERN_C extern \"C\" {\n+# define END_EXTERN_C }\n+#else\n+# define START_EXTERN_C\n+# define END_EXTERN_C\n+#endif\n+\n+#endif /* PRINT_FILE_VAR_H */"
    }
  ]
}