{
  "sha": "6206060d9be8da3e701fe0307c6c01390e2b4ae2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjIwNjA2MGQ5YmU4ZGEzZTcwMWZlMDMwN2M2YzAxMzkwZTJiNGFlMg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:24:17Z"
    },
    "message": "Delete parse_flags/parse_flags_qcs\n\nNow that \"thread/frame apply\" have been converted to the gdb::option\nframework, these functions are no longer used.\n\nFor a while, I thought about keeping the unit tests, by making a local\nversion of parse_flags_qcs in the unit tests file.  But all that would\nreally test that is used by GDB itself, is the validate_flags_qcs\nfunction.  So in the end, I went through all the unit tests, and\nconverted any that wasn't already covered to gdb.base/options.exp\ntests.  And those have all already been added in previous patches.\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* cli/cli-utils.c (parse_flags, parse_flags_qcs): Delete.\n\t* cli/cli-utils.h (parse_flags, parse_flags_qcs): Delete.\n\t* unittests/cli-utils-selftests.c (test_parse_flags)\n\t(test_parse_flags_qcs): Delete.\n\t(test_cli_utils): Don't call deleted functions.",
    "tree": {
      "sha": "3e8f08e72db035a5278c44f53f737d59d8a547f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3e8f08e72db035a5278c44f53f737d59d8a547f1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6206060d9be8da3e701fe0307c6c01390e2b4ae2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6206060d9be8da3e701fe0307c6c01390e2b4ae2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6206060d9be8da3e701fe0307c6c01390e2b4ae2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6206060d9be8da3e701fe0307c6c01390e2b4ae2/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6665660a411ead049daa85cac5c629d637e22044",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6665660a411ead049daa85cac5c629d637e22044",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6665660a411ead049daa85cac5c629d637e22044"
    }
  ],
  "stats": {
    "total": 227,
    "additions": 8,
    "deletions": 219
  },
  "files": [
    {
      "sha": "8fe3f103030ce98b4f0206addf25a2164cdfc119",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6206060d9be8da3e701fe0307c6c01390e2b4ae2",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* cli/cli-utils.c (parse_flags, parse_flags_qcs): Delete.\n+\t* cli/cli-utils.h (parse_flags, parse_flags_qcs): Delete.\n+\t* unittests/cli-utils-selftests.c (test_parse_flags)\n+\t(test_parse_flags_qcs): Delete.\n+\t(test_cli_utils): Don't call deleted functions.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* thread.c: Include \"cli/cli-option.h\"."
    },
    {
      "sha": "f5d47aeffbc0e1eb3ca0095a76c980fb42e567ca",
      "filename": "gdb/cli/cli-utils.c",
      "status": "modified",
      "additions": 0,
      "deletions": 56,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/cli/cli-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/cli/cli-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.c?ref=6206060d9be8da3e701fe0307c6c01390e2b4ae2",
      "patch": "@@ -524,62 +524,6 @@ check_for_argument (const char **str, const char *arg, int arg_len)\n \n /* See documentation in cli-utils.h.  */\n \n-int\n-parse_flags (const char **str, const char *flags)\n-{\n-  const char *p = skip_spaces (*str);\n-\n-  if (p[0] == '-'\n-      && isalpha (p[1])\n-      && (p[2] == '\\0' || isspace (p[2])))\n-    {\n-      const char pf = p[1];\n-      const char *f = flags;\n-\n-      while (*f != '\\0')\n-\t{\n-\t  if (*f == pf)\n-\t    {\n-\t      *str = skip_spaces (p + 2);\n-\t      return f - flags + 1;\n-\t    }\n-\t  f++;\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n-/* See documentation in cli-utils.h.  */\n-\n-bool\n-parse_flags_qcs (const char *which_command, const char **str,\n-\t\t qcs_flags *flags)\n-{\n-  switch (parse_flags (str, \"qcs\"))\n-    {\n-    case 0:\n-      return false;\n-    case 1:\n-      flags->quiet = true;\n-      break;\n-    case 2:\n-      flags->cont = true;\n-      break;\n-    case 3:\n-      flags->silent = true;\n-      break;\n-    default:\n-      gdb_assert_not_reached (\"int qcs flag out of bound\");\n-    }\n-\n-  validate_flags_qcs (which_command, flags);\n-\n-  return true;\n-}\n-\n-/* See documentation in cli-utils.h.  */\n-\n void\n validate_flags_qcs (const char *which_command, qcs_flags *flags)\n {"
    },
    {
      "sha": "c2a0f374a6e0d3d30327298a41c956fc7c2ba8b2",
      "filename": "gdb/cli/cli-utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 30,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/cli/cli-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/cli/cli-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.h?ref=6206060d9be8da3e701fe0307c6c01390e2b4ae2",
      "patch": "@@ -220,15 +220,6 @@ check_for_argument (char **str, const char *arg)\n   return check_for_argument (str, arg, strlen (arg));\n }\n \n-/* A helper function that looks for a set of flags at the start of a\n-   string.  The possible flags are given as a null terminated string.\n-   A flag in STR must either be at the end of the string,\n-   or be followed by whitespace.\n-   Returns 0 if no valid flag is found at the start of STR.\n-   Otherwise updates *STR, and returns N (which is > 0),\n-   such that FLAGS [N - 1] is the valid found flag.  */\n-extern int parse_flags (const char **str, const char *flags);\n-\n /* qcs_flags struct groups the -q, -c, and -s flags parsed by \"thread\n    apply\" and \"frame apply\" commands */\n \n@@ -239,27 +230,6 @@ struct qcs_flags\n   int silent = false;\n };\n \n-/* A helper function that uses parse_flags to handle the flags qcs :\n-     A flag -q sets FLAGS->QUIET to true.\n-     A flag -c sets FLAGS->CONT to true.\n-     A flag -s sets FLAGS->SILENT to true.\n-\n-   The caller is responsible to initialize *FLAGS to false before the (first)\n-   call to parse_flags_qcs.\n-   parse_flags_qcs can then be called iteratively to search for more\n-   valid flags, as part of a 'main parsing loop' searching for -q/-c/-s\n-   flags together with other flags and options.\n-\n-   Returns true and updates *STR and one of FLAGS->QUIET, FLAGS->CONT,\n-   FLAGS->SILENT if it finds a valid flag.\n-   Returns false if no valid flag is found at the beginning of STR.\n-\n-   Throws an error if a flag is found such that both FLAGS->CONT and\n-   FLAGS->SILENT are true.  */\n-\n-extern bool parse_flags_qcs (const char *which_command, const char **str,\n-\t\t\t     qcs_flags *flags);\n-\n /* Validate FLAGS.  Throws an error if both FLAGS->CONT and\n    FLAGS->SILENT are true.  WHICH_COMMAND is included in the error\n    message.  */"
    },
    {
      "sha": "a251a8e58f84a386b5b5cd2e2688cedb15db179f",
      "filename": "gdb/unittests/cli-utils-selftests.c",
      "status": "modified",
      "additions": 0,
      "deletions": 133,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/unittests/cli-utils-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6206060d9be8da3e701fe0307c6c01390e2b4ae2/gdb/unittests/cli-utils-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/cli-utils-selftests.c?ref=6206060d9be8da3e701fe0307c6c01390e2b4ae2",
      "patch": "@@ -101,143 +101,10 @@ test_number_or_range_parser ()\n   }\n }\n \n-static void\n-test_parse_flags ()\n-{\n-  const char *flags = \"abc\";\n-  const char *non_flags_args = \"non flags args\";\n-\n-  /* Extract twice the same flag, separated by one space.  */\n-  {\n-    const char *t1 = \"-a -a non flags args\";\n-\n-    SELF_CHECK (parse_flags (&t1, flags) == 1);\n-    SELF_CHECK (parse_flags (&t1, flags) == 1);\n-    SELF_CHECK (strcmp (t1, non_flags_args) == 0);\n-  }\n-\n-  /* Extract some flags, separated by one or more spaces.  */\n-  {\n-    const char *t2 = \"-c     -b -c  -b -c    non flags args\";\n-\n-    SELF_CHECK (parse_flags (&t2, flags) == 3);\n-    SELF_CHECK (parse_flags (&t2, flags) == 2);\n-    SELF_CHECK (parse_flags (&t2, flags) == 3);\n-    SELF_CHECK (parse_flags (&t2, flags) == 2);\n-    SELF_CHECK (parse_flags (&t2, flags) == 3);\n-    SELF_CHECK (strcmp (t2, non_flags_args) == 0);\n-  }\n-\n-  /* Check behaviour where there is no flag to extract.  */\n-  {\n-    const char *t3 = non_flags_args;\n-\n-    SELF_CHECK (parse_flags (&t3, flags) == 0);\n-    SELF_CHECK (strcmp (t3, non_flags_args) == 0);\n-  }\n-\n-  /* Extract 2 known flags in front of unknown flags.  */\n-  {\n-    const char *t4 = \"-c -b -x -y -z -c\";\n-\n-    SELF_CHECK (parse_flags (&t4, flags) == 3);\n-    SELF_CHECK (parse_flags (&t4, flags) == 2);\n-    SELF_CHECK (strcmp (t4, \"-x -y -z -c\") == 0);\n-    SELF_CHECK (parse_flags (&t4, flags) == 0);\n-    SELF_CHECK (strcmp (t4, \"-x -y -z -c\") == 0);\n-  }\n-\n-  /* Check combined flags are not recognised.  */\n-  {\n-    const char *t5 = \"-c -cb -c\";\n-\n-    SELF_CHECK (parse_flags (&t5, flags) == 3);\n-    SELF_CHECK (parse_flags (&t5, flags) == 0);\n-    SELF_CHECK (strcmp (t5, \"-cb -c\") == 0);\n-  }\n-}\n-\n-static void\n-test_parse_flags_qcs ()\n-{\n-  const char *non_flags_args = \"non flags args\";\n-\n-  /* Test parsing of 2 flags out of the known 3.  */\n-  {\n-    const char *t1 = \"-q -s    non flags args\";\n-    qcs_flags flags;\n-\n-    SELF_CHECK (parse_flags_qcs (\"test_parse_flags_qcs.t1.q\",\n-\t\t\t\t &t1,\n-\t\t\t\t &flags) == 1);\n-    SELF_CHECK (flags.quiet && !flags.cont && !flags.silent);\n-    SELF_CHECK (parse_flags_qcs (\"test_parse_flags_qcs.t1.s\",\n-\t\t\t\t &t1,\n-\t\t\t\t &flags) == 1);\n-    SELF_CHECK (flags.quiet && !flags.cont && flags.silent);\n-    SELF_CHECK (strcmp (t1, non_flags_args) == 0);\n-  }\n-\n-  /* Test parsing when there is no flag.  */\n-  {\n-    const char *t2 = \"non flags args\";\n-    qcs_flags flags;\n-\n-    SELF_CHECK (parse_flags_qcs (\"test_parse_flags_qcs.t2\",\n-\t\t\t\t &t2,\n-\t\t\t\t &flags) == 0);\n-    SELF_CHECK (!flags.quiet && !flags.cont && !flags.silent);\n-    SELF_CHECK (strcmp (t2, non_flags_args) == 0);\n-  }\n-\n-  /* Test parsing stops at a negative integer.  */\n-  {\n-    const char *t3 = \"-123 non flags args\";\n-    const char *orig_t3 = t3;\n-    qcs_flags flags;\n-\n-    SELF_CHECK (parse_flags_qcs (\"test_parse_flags_qcs.t3\",\n-\t\t\t\t &t3,\n-\t\t\t\t &flags) == 0);\n-    SELF_CHECK (!flags.quiet && !flags.cont && !flags.silent);\n-    SELF_CHECK (strcmp (t3, orig_t3) == 0);\n-  }\n-\n-  /* Test mutual exclusion between -c and -s.  */\n-  {\n-    const char *t4 = \"-c -s non flags args\";\n-    qcs_flags flags;\n-\n-    try\n-      {\n-\tSELF_CHECK (parse_flags_qcs (\"test_parse_flags_qcs.t4.cs\",\n-\t\t\t\t     &t4,\n-\t\t\t\t     &flags) == 1);\n-\n-\t(void) parse_flags_qcs (\"test_parse_flags_qcs.t4.cs\",\n-\t\t\t\t&t4,\n-\t\t\t\t&flags);\n-\tSELF_CHECK (false);\n-      }\n-    catch (const gdb_exception_error &ex)\n-      {\n-\tSELF_CHECK (ex.reason == RETURN_ERROR);\n-\tSELF_CHECK (ex.error == GENERIC_ERROR);\n-\tSELF_CHECK\n-\t  (strcmp (ex.what (),\n-\t\t   \"test_parse_flags_qcs.t4.cs: \"\n-\t\t   \"-c and -s are mutually exclusive\") == 0);\n-      }\n-  }\n-\n-}\n-\n static void\n test_cli_utils ()\n {\n   selftests::cli_utils::test_number_or_range_parser ();\n-  selftests::cli_utils::test_parse_flags ();\n-  selftests::cli_utils::test_parse_flags_qcs ();\n }\n \n }"
    }
  ]
}