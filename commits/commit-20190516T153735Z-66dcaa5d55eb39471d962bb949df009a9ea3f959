{
  "sha": "66dcaa5d55eb39471d962bb949df009a9ea3f959",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjZkY2FhNWQ1NWViMzk0NzFkOTYyYmI5NDlkZjAwOWE5ZWEzZjk1OQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:42:53Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 52/57][Arm][OBJDUMP] Add support for MVE instructions: vadc, vabav, vabd, vabs, vadd, vsbc and vsub\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (thumb32_opcodes): Add new instructions.\n\t(enum mve_instructions): Likewise.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "acff039d33cceb3cb9a2e910b7d1be8371a373f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/acff039d33cceb3cb9a2e910b7d1be8371a373f2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/66dcaa5d55eb39471d962bb949df009a9ea3f959",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66dcaa5d55eb39471d962bb949df009a9ea3f959",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/66dcaa5d55eb39471d962bb949df009a9ea3f959",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66dcaa5d55eb39471d962bb949df009a9ea3f959/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d052b9b7cb90e0f76e35b0cf3c44e9b168b158c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d052b9b7cb90e0f76e35b0cf3c44e9b168b158c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d052b9b7cb90e0f76e35b0cf3c44e9b168b158c2"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 154,
    "deletions": 0
  },
  "files": [
    {
      "sha": "997ac8443e100c51c725cdfd17b398555998f6ee",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66dcaa5d55eb39471d962bb949df009a9ea3f959/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66dcaa5d55eb39471d962bb949df009a9ea3f959/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=66dcaa5d55eb39471d962bb949df009a9ea3f959",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (thumb32_opcodes): Add new instructions.\n+\t(enum mve_instructions): Likewise.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "0e840241c2f8d7924e7cbb67020fa077969da71e",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 143,
      "deletions": 0,
      "changes": 143,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66dcaa5d55eb39471d962bb949df009a9ea3f959/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66dcaa5d55eb39471d962bb949df009a9ea3f959/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=66dcaa5d55eb39471d962bb949df009a9ea3f959",
      "patch": "@@ -208,6 +208,21 @@ enum mve_instructions\n   MVE_VSHRN,\n   MVE_VSLI,\n   MVE_VSRI,\n+  MVE_VADC,\n+  MVE_VABAV,\n+  MVE_VABD_FP,\n+  MVE_VABD_VEC,\n+  MVE_VABS_FP,\n+  MVE_VABS_VEC,\n+  MVE_VADD_FP_T1,\n+  MVE_VADD_FP_T2,\n+  MVE_VADD_VEC_T1,\n+  MVE_VADD_VEC_T2,\n+  MVE_VSBC,\n+  MVE_VSUB_FP_T1,\n+  MVE_VSUB_FP_T2,\n+  MVE_VSUB_VEC_T1,\n+  MVE_VSUB_VEC_T2,\n   MVE_NONE\n };\n \n@@ -1990,6 +2005,7 @@ static const struct opcode32 neon_opcodes[] =\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n \t\t\tUNPREDICTABLE\n    %<bitfield>s\t\tprint size for vector predicate & non VMOV instructions\n+   %<bitfield>I\t\tprint carry flag or not\n    %<bitfield>i\t\tprint immediate for vstr/vldr reg +/- imm\n    %<bitfield>h\t\tprint high half of 64-bit destination reg\n    %<bitfield>k\t\tprint immediate for vector conversion instruction\n@@ -2063,6 +2079,56 @@ static const struct mopcode32 mve_opcodes[] =\n    0xef100150, 0xffb11f51,\n    \"vbic%v\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VABAV.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VABAV,\n+   0xee800f01, 0xefc10f51,\n+   \"vabav%v.%u%20-21s\\t%12-15r, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VABD floating point.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VABD_FP,\n+   0xff200d40, 0xffa11f51,\n+   \"vabd%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VABD.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VABD_VEC,\n+   0xef000740, 0xef811f51,\n+   \"vabd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VABS floating point.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VABS_FP,\n+   0xFFB10740, 0xFFB31FD1,\n+   \"vabs%v.f%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+  /* Vector VABS.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VABS_VEC,\n+   0xffb10340, 0xffb31fd1,\n+   \"vabs%v.s%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VADD floating point T1.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VADD_FP_T1,\n+   0xef000d40, 0xffa11f51,\n+   \"vadd%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+  /* Vector VADD floating point T2.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VADD_FP_T2,\n+   0xee300f40, 0xefb11f70,\n+   \"vadd%v.f%28s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+  /* Vector VADD T1.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VADD_VEC_T1,\n+   0xef000840, 0xff811f51,\n+   \"vadd%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+  /* Vector VADD T2.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VADD_VEC_T2,\n+   0xee010f40, 0xff811f70,\n+   \"vadd%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n   /* Vector VADDLV.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VADDLV,\n@@ -2075,6 +2141,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xeef10f00, 0xeff31fd1,\n    \"vaddv%5A%v.%u%18-19s\\t%13-15l, %1-3Q\"},\n \n+  /* Vector VADC.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VADC,\n+   0xee300f00, 0xffb10f51,\n+   \"vadc%12I%v.i32\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n   /* Vector VCADD floating point.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VCADD_FP,\n@@ -2785,6 +2857,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfe800fc1, 0xffa00fd1,\n    \"vrshrn%T%v.i%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n \n+  /* Vector VSBC.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSBC,\n+   0xfe300f00, 0xffb10f51,\n+   \"vsbc%12I%v.i32\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n   /* Vector VSHL T2 Variant.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VSHL_T2,\n@@ -2905,6 +2983,30 @@ static const struct mopcode32 mve_opcodes[] =\n    0xec001f00, 0xfe101f80,\n    \"vstrw%v.32\\t%13-15,22Q, %d\"},\n \n+  /* Vector VSUB floating point T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VSUB_FP_T1,\n+   0xef200d40, 0xffa11f51,\n+   \"vsub%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VSUB floating point T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VSUB_FP_T2,\n+   0xee301f40, 0xefb11f70,\n+   \"vsub%v.f%28s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VSUB T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSUB_VEC_T1,\n+   0xff000840, 0xff811f51,\n+   \"vsub%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VSUB T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSUB_VEC_T2,\n+   0xee011f40, 0xff811f70,\n+   \"vsub%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n   {ARM_FEATURE_CORE_LOW (0),\n    MVE_NONE,\n    0x00000000, 0x00000000, 0}\n@@ -4927,6 +5029,9 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VADD_VEC_T2:\n+    case MVE_VSUB_VEC_T2:\n+    case MVE_VABAV:\n     case MVE_VQRSHL_T1:\n     case MVE_VQSHL_T4:\n     case MVE_VRSHL_T1:\n@@ -5102,6 +5207,9 @@ is_mve_encoding_conflict (unsigned long given,\n \treturn FALSE;\n \n     default:\n+    case MVE_VADD_FP_T1:\n+    case MVE_VADD_FP_T2:\n+    case MVE_VADD_VEC_T1:\n       return FALSE;\n \n     }\n@@ -5202,6 +5310,9 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VABD_VEC:\n+    case MVE_VADD_VEC_T1:\n+    case MVE_VSUB_VEC_T1:\n     case MVE_VQDMULH_T1:\n     case MVE_VQRDMULH_T2:\n     case MVE_VRHADD:\n@@ -5377,6 +5488,7 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VABS_FP:\n     case MVE_VCVT_BETWEEN_FP_INT:\n     case MVE_VCVT_FROM_FP_TO_INT:\n       {\n@@ -5529,6 +5641,15 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VABS_VEC:\n+\tif (arm_decode_field (given, 18, 19) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+\telse\n+\t  return FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -5588,6 +5709,10 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VADD_FP_T2:\n+    case MVE_VSUB_FP_T2:\n+    case MVE_VADD_VEC_T2:\n+    case MVE_VSUB_VEC_T2:\n     case MVE_VQRSHL_T2:\n     case MVE_VQSHL_T1:\n     case MVE_VRSHL_T2:\n@@ -5793,6 +5918,7 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VABAV:\n     case MVE_VMOV_HFP_TO_GP:\n     case MVE_VMOV_GP_TO_VEC_LANE:\n     case MVE_VMOV_VEC_LANE_TO_GP:\n@@ -6647,6 +6773,12 @@ print_mve_size (struct disassemble_info *info,\n \n   switch (matched_insn)\n     {\n+    case MVE_VABAV:\n+    case MVE_VABD_VEC:\n+    case MVE_VABS_FP:\n+    case MVE_VABS_VEC:\n+    case MVE_VADD_VEC_T1:\n+    case MVE_VADD_VEC_T2:\n     case MVE_VADDV:\n     case MVE_VCADD_VEC:\n     case MVE_VCMP_VEC_T1:\n@@ -6709,12 +6841,19 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VSTRW_SCATTER_T3:\n     case MVE_VSTRB_T1:\n     case MVE_VSTRH_T2:\n+    case MVE_VSUB_VEC_T1:\n+    case MVE_VSUB_VEC_T2:\n       if (size <= 3)\n \tfunc (stream, \"%s\", mve_vec_sizename[size]);\n       else\n \tfunc (stream, \"<undef size>\");\n       break;\n \n+    case MVE_VABD_FP:\n+    case MVE_VADD_FP_T1:\n+    case MVE_VADD_FP_T2:\n+    case MVE_VSUB_FP_T1:\n+    case MVE_VSUB_FP_T2:\n     case MVE_VCMP_FP_T1:\n     case MVE_VCMP_FP_T2:\n     case MVE_VFMA_FP_SCALAR:\n@@ -8519,6 +8658,10 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t\t\t    value,\n \t\t\t\t\t    insn->mve_op);\n \t\t\t    break;\n+\t\t\t  case 'I':\n+\t\t\t    if (value == 1)\n+\t\t\t      func (stream, \"i\");\n+\t\t\t    break;\n \t\t\t  case 'A':\n \t\t\t    if (value == 1)\n \t\t\t      func (stream, \"a\");"
    }
  ]
}