{
  "sha": "191849105b95e5ac3a3173547fd77f7b1fc3b283",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTkxODQ5MTA1Yjk1ZTVhYzNhMzE3MzU0N2ZkNzdmN2IxZmMzYjI4Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-01-25T14:38:21Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-01-25T14:38:21Z"
    },
    "message": "Specially handle array contexts in Ada expression resolution\n\nA user noticed that the Ada expression code in gdb did not\nautomatically disambiguate an enumerator in an array context.  That\nis, an expression like \"print array(enumerator)\" is not ambiguous,\neven if \"enumerator\" is declared in multiple enumerations, because the\ncorrect one can be found by examining the array's index type.\n\nThis patch changes the Ada expression resolution code to handle this\ncase.\n\ngdb/ChangeLog\n2021-01-25  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (resolve_subexp): Handle array context.\n\ngdb/testsuite/ChangeLog\n2021-01-25  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/local-enum.exp: Add enumerator resolution test.",
    "tree": {
      "sha": "b0bbfb1aff7d6e137db82311e09c63d2114f8947",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b0bbfb1aff7d6e137db82311e09c63d2114f8947"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/191849105b95e5ac3a3173547fd77f7b1fc3b283",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/191849105b95e5ac3a3173547fd77f7b1fc3b283",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/191849105b95e5ac3a3173547fd77f7b1fc3b283",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/191849105b95e5ac3a3173547fd77f7b1fc3b283/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "acd6125f01dc9ba76423b7062c26ca16562943cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/acd6125f01dc9ba76423b7062c26ca16562943cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/acd6125f01dc9ba76423b7062c26ca16562943cf"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 32,
    "deletions": 3
  },
  "files": [
    {
      "sha": "3a4844fc70c78f24ad1cb6e1e64e45837b8eb4ee",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=191849105b95e5ac3a3173547fd77f7b1fc3b283",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (resolve_subexp): Handle array context.\n+\n 2021-01-23  Tom Tromey  <tom@tromey.com>\n \n \tPR compile/25575"
    },
    {
      "sha": "8d912402462460c0446046cad66bb9791fff173c",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 19,
      "deletions": 3,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=191849105b95e5ac3a3173547fd77f7b1fc3b283",
      "patch": "@@ -3474,6 +3474,12 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n   struct value **argvec;        /* Vector of operand types (alloca'ed).  */\n   int nargs;                    /* Number of operands.  */\n   int oplen;\n+  /* If we're resolving an expression like ARRAY(ARG...), then we set\n+     this to the type of the array, so we can use the index types as\n+     the expected types for resolution.  */\n+  struct type *array_type = nullptr;\n+  /* The arity of ARRAY_TYPE.  */\n+  int array_arity = 0;\n \n   argvec = NULL;\n   nargs = 0;\n@@ -3490,7 +3496,12 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n       else\n \t{\n \t  *pos += 3;\n-\t  resolve_subexp (expp, pos, 0, NULL, parse_completion, tracker);\n+\t  struct value *lhs = resolve_subexp (expp, pos, 0, NULL,\n+\t\t\t\t\t      parse_completion, tracker);\n+\t  struct type *lhstype = ada_check_typedef (value_type (lhs));\n+\t  array_arity = ada_array_arity (lhstype);\n+\t  if (array_arity > 0)\n+\t    array_type = lhstype;\n \t}\n       nargs = longest_to_int (exp->elts[pc + 1].longconst);\n       break;\n@@ -3627,8 +3638,13 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n \n   argvec = XALLOCAVEC (struct value *, nargs + 1);\n   for (i = 0; i < nargs; i += 1)\n-    argvec[i] = resolve_subexp (expp, pos, 1, NULL, parse_completion,\n-\t\t\t\ttracker);\n+    {\n+      struct type *subtype = nullptr;\n+      if (i < array_arity)\n+\tsubtype = ada_index_type (array_type, i + 1, \"array type\");\n+      argvec[i] = resolve_subexp (expp, pos, 1, subtype, parse_completion,\n+\t\t\t\t  tracker);\n+    }\n   argvec[i] = NULL;\n   exp = expp->get ();\n "
    },
    {
      "sha": "7fa1074598e37a1c7a7fdc2b95e584056beabe02",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=191849105b95e5ac3a3173547fd77f7b1fc3b283",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/local-enum.exp: Add enumerator resolution test.\n+\n 2021-01-25  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/local-enum.exp: New file."
    },
    {
      "sha": "fc49bca13086327bda927e7550c56db2c9c106d4",
      "filename": "gdb/testsuite/gdb.ada/local-enum.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/testsuite/gdb.ada/local-enum.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/191849105b95e5ac3a3173547fd77f7b1fc3b283/gdb/testsuite/gdb.ada/local-enum.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/local-enum.exp?ref=191849105b95e5ac3a3173547fd77f7b1fc3b283",
      "patch": "@@ -81,3 +81,8 @@ proc print_three {which_enum value} {\n \n print_three e2 0\n print_three e1 2\n+\n+# These will not result in a menu, as expression resolution should\n+# disambiguate the meaning of 'three'.\n+gdb_test \"print v1(three)\" \" = 2\" \"print v1 element\"\n+gdb_test \"print v2(three)\" \" = 3\" \"print v2 element\""
    }
  ]
}