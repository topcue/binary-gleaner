{
  "sha": "deea497309415b15c5fe5f5052bc7e529fe541c1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGVlYTQ5NzMwOTQxNWIxNWM1ZmU1ZjUwNTJiYzdlNTI5ZmU1NDFjMQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-05-03T11:26:41Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-05-03T11:26:41Z"
    },
    "message": "x86: fold both instances of lex_got()\n\nI see no reason at all for us to carry two copies of almost identical\ncode. The differences, apart from the table entries, are benign. And\nthe #ifdef-ary doesn't really get any worse.",
    "tree": {
      "sha": "f4fdf87e42e6b730f90ecd92c9e50945bf876431",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f4fdf87e42e6b730f90ecd92c9e50945bf876431"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/deea497309415b15c5fe5f5052bc7e529fe541c1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/deea497309415b15c5fe5f5052bc7e529fe541c1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/deea497309415b15c5fe5f5052bc7e529fe541c1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/deea497309415b15c5fe5f5052bc7e529fe541c1/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4c398cc06d333fcb04772c04ea18db68587e8a1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c398cc06d333fcb04772c04ea18db68587e8a1f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c398cc06d333fcb04772c04ea18db68587e8a1f"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 14,
    "deletions": 106
  },
  "files": [
    {
      "sha": "2743889493f45c17ecb6aa03e3aeade7b061ed79",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/deea497309415b15c5fe5f5052bc7e529fe541c1/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/deea497309415b15c5fe5f5052bc7e529fe541c1/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=deea497309415b15c5fe5f5052bc7e529fe541c1",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-03  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (lex_got): Adjust surrounding #if. Fold TE_PE\n+\tvariant into ELF one.\n+\n 2021-05-03  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/elf/section25.s: Don't start directives in first"
    },
    {
      "sha": "5d5897fdb2b434363a2f6a9abac106a70a845b61",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 9,
      "deletions": 106,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/deea497309415b15c5fe5f5052bc7e529fe541c1/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/deea497309415b15c5fe5f5052bc7e529fe541c1/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=deea497309415b15c5fe5f5052bc7e529fe541c1",
      "patch": "@@ -10226,8 +10226,8 @@ x86_address_bytes (void)\n   return stdoutput->arch_info->bits_per_address / 8;\n }\n \n-#if !(defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF) || defined (OBJ_MACH_O)) \\\n-    || defined (LEX_AT)\n+#if (!(defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF) || defined (OBJ_MACH_O)) \\\n+     || defined (LEX_AT)) && !defined (TE_PE)\n # define lex_got(reloc, adjust, types) NULL\n #else\n /* Parse operands of the form\n@@ -10256,6 +10256,7 @@ lex_got (enum bfd_reloc_code_real *rel,\n     const i386_operand_type types64;\n     bool need_GOT_symbol;\n   } gotrel[] = {\n+#ifndef TE_PE\n #if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n     { STRING_COMMA_LEN (\"SIZE\"),      { BFD_RELOC_SIZE32,\n \t\t\t\t\tBFD_RELOC_SIZE32 },\n@@ -10312,11 +10313,16 @@ lex_got (enum bfd_reloc_code_real *rel,\n     { STRING_COMMA_LEN (\"TLSCALL\"),  { BFD_RELOC_386_TLS_DESC_CALL,\n \t\t\t\t       BFD_RELOC_X86_64_TLSDESC_CALL },\n       OPERAND_TYPE_IMM32_32S_DISP32, true },\n+#else /* TE_PE */\n+    { STRING_COMMA_LEN (\"SECREL32\"), { BFD_RELOC_32_SECREL,\n+\t\t\t\t       BFD_RELOC_32_SECREL },\n+      OPERAND_TYPE_IMM32_32S_64_DISP32_64, false },\n+#endif\n   };\n   char *cp;\n   unsigned int j;\n \n-#if defined (OBJ_MAYBE_ELF)\n+#if defined (OBJ_MAYBE_ELF) && !defined (TE_PE)\n   if (!IS_ELF)\n     return NULL;\n #endif\n@@ -10392,109 +10398,6 @@ lex_got (enum bfd_reloc_code_real *rel,\n }\n #endif\n \n-#ifdef TE_PE\n-#ifdef lex_got\n-#undef lex_got\n-#endif\n-/* Parse operands of the form\n-   <symbol>@SECREL32+<nnn>\n-\n-   If we find one, set up the correct relocation in RELOC and copy the\n-   input string, minus the `@SECREL32' into a malloc'd buffer for\n-   parsing by the calling routine.  Return this buffer, and if ADJUST\n-   is non-null set it to the length of the string we removed from the\n-   input line.  Otherwise return NULL.\n-\n-   This function is copied from the ELF version above adjusted for PE targets.  */\n-\n-static char *\n-lex_got (enum bfd_reloc_code_real *rel ATTRIBUTE_UNUSED,\n-\t int *adjust ATTRIBUTE_UNUSED,\n-\t i386_operand_type *types)\n-{\n-  static const struct\n-  {\n-    const char *str;\n-    int len;\n-    const enum bfd_reloc_code_real rel[2];\n-    const i386_operand_type types64;\n-  }\n-  gotrel[] =\n-  {\n-    { STRING_COMMA_LEN (\"SECREL32\"),    { BFD_RELOC_32_SECREL,\n-\t\t\t\t\t  BFD_RELOC_32_SECREL },\n-      OPERAND_TYPE_IMM32_32S_64_DISP32_64 },\n-  };\n-\n-  char *cp;\n-  unsigned j;\n-\n-  for (cp = input_line_pointer; *cp != '@'; cp++)\n-    if (is_end_of_line[(unsigned char) *cp] || *cp == ',')\n-      return NULL;\n-\n-  for (j = 0; j < ARRAY_SIZE (gotrel); j++)\n-    {\n-      int len = gotrel[j].len;\n-\n-      if (strncasecmp (cp + 1, gotrel[j].str, len) == 0)\n-\t{\n-\t  if (gotrel[j].rel[object_64bit] != 0)\n-\t    {\n-\t      int first, second;\n-\t      char *tmpbuf, *past_reloc;\n-\n-\t      *rel = gotrel[j].rel[object_64bit];\n-\t      if (adjust)\n-\t\t*adjust = len;\n-\n-\t      if (types)\n-\t\t{\n-\t\t  if (flag_code != CODE_64BIT)\n-\t\t    {\n-\t\t      types->bitfield.imm32 = 1;\n-\t\t      types->bitfield.disp32 = 1;\n-\t\t    }\n-\t\t  else\n-\t\t    *types = gotrel[j].types64;\n-\t\t}\n-\n-\t      /* The length of the first part of our input line.  */\n-\t      first = cp - input_line_pointer;\n-\n-\t      /* The second part goes from after the reloc token until\n-\t\t (and including) an end_of_line char or comma.  */\n-\t      past_reloc = cp + 1 + len;\n-\t      cp = past_reloc;\n-\t      while (!is_end_of_line[(unsigned char) *cp] && *cp != ',')\n-\t\t++cp;\n-\t      second = cp + 1 - past_reloc;\n-\n-\t      /* Allocate and copy string.  The trailing NUL shouldn't\n-\t\t be necessary, but be safe.  */\n-\t      tmpbuf = XNEWVEC (char, first + second + 2);\n-\t      memcpy (tmpbuf, input_line_pointer, first);\n-\t      if (second != 0 && *past_reloc != ' ')\n-\t\t/* Replace the relocation token with ' ', so that\n-\t\t   errors like foo@SECLREL321 will be detected.  */\n-\t\ttmpbuf[first++] = ' ';\n-\t      memcpy (tmpbuf + first, past_reloc, second);\n-\t      tmpbuf[first + second] = '\\0';\n-\t      return tmpbuf;\n-\t    }\n-\n-\t  as_bad (_(\"@%s reloc is not supported with %d-bit output format\"),\n-\t\t  gotrel[j].str, 1 << (5 + object_64bit));\n-\t  return NULL;\n-\t}\n-    }\n-\n-  /* Might be a symbol version string.  Don't as_bad here.  */\n-  return NULL;\n-}\n-\n-#endif /* TE_PE */\n-\n bfd_reloc_code_real_type\n x86_cons (expressionS *exp, int size)\n {"
    }
  ]
}