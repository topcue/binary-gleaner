{
  "sha": "e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTU2Y2I0NTFjOWNhNjNiZGFmYzExY2MzZDNlZTE0Yjc0ZTQwOWZhOQ==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-03-05T00:42:41Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:36:42Z"
    },
    "message": "section_table_xfer_memory: Replace section name with callback predicate\n\nThis patch is motivated by the need to be able to select sections\nthat section_table_xfer_memory_partial should consider for memory\ntransfers.  I'll use this facility in the next patch in this series.\n\nsection_table_xfer_memory_partial() can currently be passed a section\nname which may be used to make name-based selections.  This is similar\nto what I want to do, except that I want to be able to consider\nsection flags instead of the name.\n\nI'm replacing the section name parameter with a predicate that,\nwhen passed a pointer to a target_section struct, will return\ntrue if that section should be further considered, or false which\nindicates that it shouldn't.\n\nI've converted the one existing use where a non-NULL section\nname is passed to section_table_xfer_memory_partial().   Instead\nof passing the section name, it now looks like this:\n\n\t  auto match_cb = [=] (const struct target_section *s)\n\t    {\n\t      return (strcmp (section_name, s->the_bfd_section->name) == 0);\n\t    };\n\n\t  return section_table_xfer_memory_partial (readbuf, writebuf,\n\t\t\t\t\t\t    memaddr, len, xfered_len,\n\t\t\t\t\t\t    table->sections,\n\t\t\t\t\t\t    table->sections_end,\n\t\t\t\t\t\t    match_cb);\n\nThe other callers all passed NULL; they've been simplified somewhat\nin that they no longer need to pass NULL.\n\ngdb/ChangeLog:\n\n\t* exec.h (section_table_xfer_memory): Revise declaration,\n\treplacing section name parameter with an optional callback\n\tpredicate.\n\t* exec.c (section_table_xfer_memory): Likewise.\n\t* bfd-target.c, exec.c, target.c, corelow.c: Adjust all callers\n\tof section_table_xfer_memory.",
    "tree": {
      "sha": "eaa40a076254f68d56636fd2da805926ce92ccc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eaa40a076254f68d56636fd2da805926ce92ccc2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "678c7a56ced1828d37a554ec97f672496f135054",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/678c7a56ced1828d37a554ec97f672496f135054",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/678c7a56ced1828d37a554ec97f672496f135054"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 33,
    "deletions": 14
  },
  "files": [
    {
      "sha": "aaba31821a5b6860e8dfec9a3653ebdd2fea59fc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* exec.h (section_table_xfer_memory): Revise declaration,\n+\treplacing section name parameter with an optional callback\n+\tpredicate.\n+\t* exec.c (section_table_xfer_memory): Likewise.\n+\t* bfd-target.c, exec.c, target.c, corelow.c: Adjust all callers\n+\tof section_table_xfer_memory.\n+\n 2020-07-22  Tom Tromey  <tromey@adacore.com>\n \n \t* mi/mi-cmd-stack.c (list_args_or_locals): Use"
    },
    {
      "sha": "3d266951c5aeb6852dc33ea2b48bbfb65856e177",
      "filename": "gdb/bfd-target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/bfd-target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/bfd-target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bfd-target.c?ref=e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
      "patch": "@@ -77,8 +77,7 @@ target_bfd::xfer_partial (target_object object,\n \treturn section_table_xfer_memory_partial (readbuf, writebuf,\n \t\t\t\t\t\t  offset, len, xfered_len,\n \t\t\t\t\t\t  m_table.sections,\n-\t\t\t\t\t\t  m_table.sections_end,\n-\t\t\t\t\t\t  NULL);\n+\t\t\t\t\t\t  m_table.sections_end);\n       }\n     default:\n       return TARGET_XFER_E_IO;"
    },
    {
      "sha": "5697a02dc14c70bfae9b389a3f0b6f1fbdf45905",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
      "patch": "@@ -618,8 +618,7 @@ core_target::xfer_partial (enum target_object object, const char *annex,\n \t      (readbuf, writebuf,\n \t       offset, len, xfered_len,\n \t       m_core_section_table.sections,\n-\t       m_core_section_table.sections_end,\n-\t       NULL));\n+\t       m_core_section_table.sections_end));\n \n     case TARGET_OBJECT_AUXV:\n       if (readbuf)"
    },
    {
      "sha": "e50f38899d6c7a608a8738383b2ca41d0a221462",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
      "patch": "@@ -956,7 +956,8 @@ section_table_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n \t\t\t\t   ULONGEST *xfered_len,\n \t\t\t\t   struct target_section *sections,\n \t\t\t\t   struct target_section *sections_end,\n-\t\t\t\t   const char *section_name)\n+\t\t\t\t   gdb::function_view<bool\n+\t\t\t\t     (const struct target_section *)> match_cb)\n {\n   int res;\n   struct target_section *p;\n@@ -970,7 +971,7 @@ section_table_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n       struct bfd_section *asect = p->the_bfd_section;\n       bfd *abfd = asect->owner;\n \n-      if (section_name && strcmp (section_name, asect->name) != 0)\n+      if (match_cb != nullptr && !match_cb (p))\n \tcontinue;\t\t/* not the section we need.  */\n       if (memaddr >= p->addr)\n         {\n@@ -1043,8 +1044,7 @@ exec_target::xfer_partial (enum target_object object,\n     return section_table_xfer_memory_partial (readbuf, writebuf,\n \t\t\t\t\t      offset, len, xfered_len,\n \t\t\t\t\t      table->sections,\n-\t\t\t\t\t      table->sections_end,\n-\t\t\t\t\t      NULL);\n+\t\t\t\t\t      table->sections_end);\n   else\n     return TARGET_XFER_E_IO;\n }"
    },
    {
      "sha": "82eb39c55d830076e0c56bfb20e001c8bb5babf5",
      "filename": "gdb/exec.h",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/exec.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/exec.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.h?ref=e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
      "patch": "@@ -65,8 +65,13 @@ extern enum target_xfer_status\n    Request to transfer up to LEN 8-bit bytes of the target sections\n    defined by SECTIONS and SECTIONS_END.  The OFFSET specifies the\n    starting address.\n-   If SECTION_NAME is not NULL, only access sections with that same\n-   name.\n+\n+   The MATCH_CB predicate is optional; when provided it will be called\n+   for each section under consideration.  When MATCH_CB evaluates as\n+   true, the section remains under consideration; a false result\n+   removes it from consideration for performing the memory transfers\n+   noted above.  See memory_xfer_partial_1() in target.c for an\n+   example.\n \n    Return the number of bytes actually transfered, or zero when no\n    data is available for the requested range.\n@@ -83,7 +88,9 @@ extern enum target_xfer_status\n \t\t\t\t     ULONGEST, ULONGEST, ULONGEST *,\n \t\t\t\t     struct target_section *,\n \t\t\t\t     struct target_section *,\n-\t\t\t\t     const char *);\n+\t\t\t\t     gdb::function_view<bool\n+\t\t\t\t       (const struct target_section *)> match_cb\n+\t\t\t\t         = nullptr);\n \n /* Read from mappable read-only sections of BFD executable files.\n    Similar to exec_read_partial_read_only, but return"
    },
    {
      "sha": "d03f0d5f384d02ebb6a007a444d9e3e92d3908a7",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=e56cb451c9ca63bdafc11cc3d3ee14b74e409fa9",
      "patch": "@@ -980,11 +980,17 @@ memory_xfer_partial_1 (struct target_ops *ops, enum target_object object,\n \t  const char *section_name = section->the_bfd_section->name;\n \n \t  memaddr = overlay_mapped_address (memaddr, section);\n+\n+\t  auto match_cb = [=] (const struct target_section *s)\n+\t    {\n+\t      return (strcmp (section_name, s->the_bfd_section->name) == 0);\n+\t    };\n+\n \t  return section_table_xfer_memory_partial (readbuf, writebuf,\n \t\t\t\t\t\t    memaddr, len, xfered_len,\n \t\t\t\t\t\t    table->sections,\n \t\t\t\t\t\t    table->sections_end,\n-\t\t\t\t\t\t    section_name);\n+\t\t\t\t\t\t    match_cb);\n \t}\n     }\n \n@@ -1002,8 +1008,7 @@ memory_xfer_partial_1 (struct target_ops *ops, enum target_object object,\n \t  return section_table_xfer_memory_partial (readbuf, writebuf,\n \t\t\t\t\t\t    memaddr, len, xfered_len,\n \t\t\t\t\t\t    table->sections,\n-\t\t\t\t\t\t    table->sections_end,\n-\t\t\t\t\t\t    NULL);\n+\t\t\t\t\t\t    table->sections_end);\n \t}\n     }\n "
    }
  ]
}