{
  "sha": "9307d17b7a97bd49baf0d877785c43cf203b7cee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTMwN2QxN2I3YTk3YmQ0OWJhZjBkODc3Nzg1YzQzY2YyMDNiN2NlZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:20Z"
    },
    "message": "Implement some unary operations\n\nThis introduces a couple of new template classes and then uses them to\nimplement some simple unary operations.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (unary_ftype): New typedef.\n\t(unop_operation, usual_ax_binop_operation): New templates.\n\t(unary_plus_operation, unary_neg_operation)\n\t(unary_complement_operation, unary_logical_not_operation): New\n\ttypedefs.\n\t* eval.c (eval_op_plus, eval_op_neg, eval_op_complement)\n\t(eval_op_lognot): No longer static.\n\t* ax-gdb.c (gen_expr_unop): New function.",
    "tree": {
      "sha": "2a3cc7312867dfa2d2c1565739a3bf77b2be9e4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a3cc7312867dfa2d2c1565739a3bf77b2be9e4c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9307d17b7a97bd49baf0d877785c43cf203b7cee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9307d17b7a97bd49baf0d877785c43cf203b7cee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9307d17b7a97bd49baf0d877785c43cf203b7cee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9307d17b7a97bd49baf0d877785c43cf203b7cee/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae64ba58b3bc5a9a023974f37515aee9862548fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae64ba58b3bc5a9a023974f37515aee9862548fd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae64ba58b3bc5a9a023974f37515aee9862548fd"
    }
  ],
  "stats": {
    "total": 143,
    "additions": 139,
    "deletions": 4
  },
  "files": [
    {
      "sha": "17281bf5ba49496a80c0ff36bff5ac3c64c8613b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9307d17b7a97bd49baf0d877785c43cf203b7cee",
      "patch": "@@ -1,3 +1,14 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (unary_ftype): New typedef.\n+\t(unop_operation, usual_ax_binop_operation): New templates.\n+\t(unary_plus_operation, unary_neg_operation)\n+\t(unary_complement_operation, unary_logical_not_operation): New\n+\ttypedefs.\n+\t* eval.c (eval_op_plus, eval_op_neg, eval_op_complement)\n+\t(eval_op_lognot): No longer static.\n+\t* ax-gdb.c (gen_expr_unop): New function.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ax-gdb.c (comma_operation::do_generate_ax): New method."
    },
    {
      "sha": "c87b290397d113d09be4cef5a53e32f0525d8e08",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=9307d17b7a97bd49baf0d877785c43cf203b7cee",
      "patch": "@@ -2694,6 +2694,53 @@ gen_expr_structop (struct expression *exp,\n     internal_error (__FILE__, __LINE__,\n \t\t    _(\"gen_expr: unhandled struct case\"));\n }\n+\n+/* A helper function that emits a unary operation.  */\n+\n+void\n+gen_expr_unop (struct expression *exp,\n+\t       enum exp_opcode op,\n+\t       expr::operation *lhs,\n+\t       struct agent_expr *ax, struct axs_value *value)\n+{\n+  struct axs_value value1, value2;\n+\n+  switch (op)\n+    {\n+    case UNOP_NEG:\n+      gen_int_literal (ax, &value1, 0,\n+\t\t       builtin_type (ax->gdbarch)->builtin_int);\n+      gen_usual_unary (ax, &value1);\t/* shouldn't do much */\n+      lhs->generate_ax (exp, ax, &value2);\n+      gen_usual_unary (ax, &value2);\n+      gen_usual_arithmetic (ax, &value1, &value2);\n+      gen_binop (ax, value, &value1, &value2, aop_sub, aop_sub, 1, \"negation\");\n+      break;\n+\n+    case UNOP_PLUS:\n+      /* + FOO is equivalent to 0 + FOO, which can be optimized.  */\n+      lhs->generate_ax (exp, ax, value);\n+      gen_usual_unary (ax, value);\n+      break;\n+\n+    case UNOP_LOGICAL_NOT:\n+      lhs->generate_ax (exp, ax, value);\n+      gen_usual_unary (ax, value);\n+      gen_logical_not (ax, value,  builtin_type (ax->gdbarch)->builtin_int);\n+      break;\n+\n+    case UNOP_COMPLEMENT:\n+      lhs->generate_ax (exp, ax, value);\n+      gen_usual_unary (ax, value);\n+      gen_integral_promotions (ax, value);\n+      gen_complement (ax, value);\n+      break;\n+\n+    default:\n+      gdb_assert_not_reached (\"invalid case in gen_expr_unop\");\n+    }\n+}\n+\n \f\n \n /* Given a single variable and a scope, generate bytecodes to trace"
    },
    {
      "sha": "8d75c08541bbdf296fdfb6c01d0a61325e69317f",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=9307d17b7a97bd49baf0d877785c43cf203b7cee",
      "patch": "@@ -1754,7 +1754,7 @@ eval_op_repeat (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_PLUS.  */\n \n-static struct value *\n+struct value *\n eval_op_plus (struct type *expect_type, struct expression *exp,\n \t      enum noside noside, enum exp_opcode op,\n \t      struct value *arg1)\n@@ -1772,7 +1772,7 @@ eval_op_plus (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_NEG.  */\n \n-static struct value *\n+struct value *\n eval_op_neg (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1)\n@@ -1790,7 +1790,7 @@ eval_op_neg (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_COMPLEMENT.  */\n \n-static struct value *\n+struct value *\n eval_op_complement (struct type *expect_type, struct expression *exp,\n \t\t    enum noside noside, enum exp_opcode op,\n \t\t    struct value *arg1)\n@@ -1808,7 +1808,7 @@ eval_op_complement (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_LOGICAL_NOT.  */\n \n-static struct value *\n+struct value *\n eval_op_lognot (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1)"
    },
    {
      "sha": "abd914ad574cf4643641433739a36a8c7f08bd50",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307d17b7a97bd49baf0d877785c43cf203b7cee/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=9307d17b7a97bd49baf0d877785c43cf203b7cee",
      "patch": "@@ -40,6 +40,10 @@ extern void gen_expr_structop (struct expression *exp,\n \t\t\t       expr::operation *lhs,\n \t\t\t       const char *name,\n \t\t\t       struct agent_expr *ax, struct axs_value *value);\n+extern void gen_expr_unop (struct expression *exp,\n+\t\t\t   enum exp_opcode op,\n+\t\t\t   expr::operation *lhs,\n+\t\t\t   struct agent_expr *ax, struct axs_value *value);\n \n extern struct value *eval_op_scope (struct type *expect_type,\n \t\t\t\t    struct expression *exp,\n@@ -140,6 +144,24 @@ extern struct value *eval_op_repeat (struct type *expect_type,\n \t\t\t\t     enum noside noside, enum exp_opcode op,\n \t\t\t\t     struct value *arg1,\n \t\t\t\t     struct value *arg2);\n+extern struct value *eval_op_plus (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside, enum exp_opcode op,\n+\t\t\t\t   struct value *arg1);\n+extern struct value *eval_op_neg (struct type *expect_type,\n+\t\t\t\t  struct expression *exp,\n+\t\t\t\t  enum noside noside, enum exp_opcode op,\n+\t\t\t\t  struct value *arg1);\n+extern struct value *eval_op_complement (struct type *expect_type,\n+\t\t\t\t\t struct expression *exp,\n+\t\t\t\t\t enum noside noside,\n+\t\t\t\t\t enum exp_opcode op,\n+\t\t\t\t\t struct value *arg1);\n+extern struct value *eval_op_lognot (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside,\n+\t\t\t\t     enum exp_opcode op,\n+\t\t\t\t     struct value *arg1);\n \n namespace expr\n {\n@@ -1239,6 +1261,61 @@ class comma_operation\n     override;\n };\n \n+typedef struct value *unary_ftype (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside, enum exp_opcode op,\n+\t\t\t\t   struct value *arg1);\n+\n+/* Base class for unary operations.  */\n+template<enum exp_opcode OP, unary_ftype FUNC>\n+class unop_operation\n+  : public maybe_constant_operation<operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *val = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    return FUNC (expect_type, exp, noside, OP, val);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP; }\n+};\n+\n+/* Unary operations that can also be turned into agent expressions in\n+   the \"usual\" way.  */\n+template<enum exp_opcode OP, unary_ftype FUNC>\n+class usual_ax_unop_operation\n+  : public unop_operation<OP, FUNC>\n+{\n+  using unop_operation<OP, FUNC>::unop_operation;\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override\n+  {\n+    gen_expr_unop (exp, OP,\n+\t\t   std::get<0> (this->m_storage).get (),\n+\t\t   ax, value);\n+  }\n+};\n+\n+using unary_plus_operation = usual_ax_unop_operation<UNOP_PLUS, eval_op_plus>;\n+using unary_neg_operation = usual_ax_unop_operation<UNOP_NEG, eval_op_neg>;\n+using unary_complement_operation\n+     = usual_ax_unop_operation<UNOP_COMPLEMENT, eval_op_complement>;\n+using unary_logical_not_operation\n+     = usual_ax_unop_operation<UNOP_LOGICAL_NOT, eval_op_lognot>;\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}