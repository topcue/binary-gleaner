{
  "sha": "ed69cbc8ef0a403caff2725072362252ac27bee3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQ2OWNiYzhlZjBhNDAzY2FmZjI3MjUwNzIzNjIyNTJhYzI3YmVlMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-11T10:49:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-25T17:07:30Z"
    },
    "message": "gdb/riscv: Take CSR names from target description\n\nFirst, consider the RISC-V register $x1.  This register has an alias\n$ra.  When GDB processes an incoming target description we allow the\ntarget to use either register name to describe the target.\n\nHowever, within GDB's UI we want to use the $ra alias in preference to\nthe $x1 architecture name.\n\nTo achieve this GDB overrides the tdesc_register_name callback with\nriscv_register_name.  In riscv_register_name we ensure that we always\nreturn the preferred name, so in this case \"ra\".\n\nTo ensure the user can still access the register as $x1 if they want\nto, when in riscv_check_tdesc_feature we spot that the target has\nsupplied the register, we add aliases for every name except the\npreferred one, so in this case we add the alias \"x1\".\n\nThis scheme seems to work quite well, the targets have the flexibility\nto be architecture focused if they wish (using x0 - x31) while GDB is\nstill using the ABI names ra, sp, gp, etc.\n\nWhen this code was originally added there was an attempt made to\ninclude the CSRs in the same scheme.  At the time the CSRs only had\ntwo names, one pulled from riscv-opc.h, and one generated in GDB that\nhad the pattern csr%d.\n\nThe idea was that if the remote targets description described the CSRs\nas csr%d then GDB would rename these back to the real CSR name.  This\ncode was only included because if followed the same pattern as the\nx-regs and f-regs, not because I was actually aware of any target that\ndid this.\n\nHowever, recent changes to add additional CSR aliases has made me\nrethink the position here.\n\nLets consider the CSR $dscratch0.  This register has an alias\n'csr1970' (1970 is 0x7b2, which is the offset of the CSR register into\nthe CSR address space).  However, this register was originally called\njust 'dscratch', and so, after recent commits, this register also has\nthe alias 'dscratch'.\n\nAs the riscv-opc.h file calls this register 'dscratch0' GDB's\npreferred name for this register is 'dscratch0'.\n\nSo, if the remote target description includes the register\n'dscratch0', then GDB will add the aliases 'dscratch', and 'csr1970'.\nIn the UI GDB will describe the register as 'dscratch0', and all it\ngood.\n\nThe problem I see in this case is where the target describes the\nregister as 'dscratch'.  In this case GDB will still spot the register\nand add the aliases 'dscratch', and 'csr1970', GDB will then give the\nregister the preferred name 'dscratch0'.\n\nI don't like this.  For the CSRs I think that we should stick with the\nnaming scheme offered by the remote target description.  As the RISC-V\nspecification evolves and CSR register names evolve, insisting on\nreferring to registers by the most up to date name makes it harder for\na target to provide a consistent target description for an older\nversion of the RISC-V architecture spec.\n\nIn this precise case the target offers 'dscratch', which is from an\nolder version of the RISC-V specification, the newer version of the\nspec has two registers 'dscratch0' and 'dscratch1'.  If we insist on\nusing 'dscratch0' it is then a little \"weird\" (or seems so to me) when\n'dscratch1' is missing.\n\nThis patch makes a distinction between the x and f registers and the\nother register sets.  For x and f we still make use of the renaming\nscheme, forcing GDB to prefer the ABI name.  But after this patch the\nCSR register group, and also the virtual register group, will always\nprefer to use the name given in the target description, adding other\nnames as aliases, but not making any other name the preferred name.\n\ngdb/ChangeLog:\n\n\t* riscv-tdep.c (struct riscv_register_feature::register_info): Fix\n\twhitespace error for declaration of names member variable.\n\t(struct riscv_register_feature): Add new prefer_first_name member\n\tvariable, and fix whitespace error in declaration of registers.\n\t(riscv_xreg_feature): Initialize prefer_first_name field.\n\t(riscv_freg_feature): Likewise.\n\t(riscv_virtual_feature): Likewise.\n\t(riscv_csr_feature): Likewise.\n\t(riscv_register_name): Expand on comments.  Remove register name\n\tmodifications for CSR and virtual registers.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/riscv-tdesc-regs.exp: Extend test case.",
    "tree": {
      "sha": "9bd31d4cdba95c008fc653c486529643acd8537c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9bd31d4cdba95c008fc653c486529643acd8537c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed69cbc8ef0a403caff2725072362252ac27bee3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed69cbc8ef0a403caff2725072362252ac27bee3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed69cbc8ef0a403caff2725072362252ac27bee3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed69cbc8ef0a403caff2725072362252ac27bee3/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4445e8f59ac69e64e64c5f95882aa8172e4788f7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4445e8f59ac69e64e64c5f95882aa8172e4788f7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4445e8f59ac69e64e64c5f95882aa8172e4788f7"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 101,
    "deletions": 30
  },
  "files": [
    {
      "sha": "3f0c10f2ce48fe2e87525c501644b7b86ebdf60a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ed69cbc8ef0a403caff2725072362252ac27bee3",
      "patch": "@@ -1,3 +1,16 @@\n+2020-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* riscv-tdep.c (struct riscv_register_feature::register_info): Fix\n+\twhitespace error for declaration of names member variable.\n+\t(struct riscv_register_feature): Add new prefer_first_name member\n+\tvariable, and fix whitespace error in declaration of registers.\n+\t(riscv_xreg_feature): Initialize prefer_first_name field.\n+\t(riscv_freg_feature): Likewise.\n+\t(riscv_virtual_feature): Likewise.\n+\t(riscv_csr_feature): Likewise.\n+\t(riscv_register_name): Expand on comments.  Remove register name\n+\tmodifications for CSR and virtual registers.\n+\n 2020-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* riscv-tdep.c (struct riscv_register_feature): Fix whitespace"
    },
    {
      "sha": "86ab3c3143eceab5ecdac03a9c0cab3d3fe89072",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 46,
      "deletions": 29,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=ed69cbc8ef0a403caff2725072362252ac27bee3",
      "patch": "@@ -125,6 +125,20 @@ struct riscv_register_feature\n      within the target description.  */\n   const char *name;\n \n+  /* For x-regs and f-regs we always force GDB to use the first name from\n+     the REGISTERS.NAMES vector, it is therefore important that we create\n+     user-register aliases for all of the remaining names at indexes 1+ in\n+     the names vector.\n+\n+     For CSRs we take a different approach, we prefer whatever name the\n+     target description uses, in this case we want to create user-register\n+     aliases for any other names that aren't the target description\n+     provided name.\n+\n+     When this flag is true we are dealing with the first case, and when\n+     this is false we are dealing with the latter.  */\n+  bool prefer_first_name;\n+\n   /* List of all the registers that we expect that we might find in this\n      register set.  */\n   std::vector<struct register_info> registers;\n@@ -134,7 +148,7 @@ struct riscv_register_feature\n \n static const struct riscv_register_feature riscv_xreg_feature =\n {\n- \"org.gnu.gdb.riscv.cpu\",\n+ \"org.gnu.gdb.riscv.cpu\", true,\n  {\n    { RISCV_ZERO_REGNUM + 0, { \"zero\", \"x0\" }, true },\n    { RISCV_ZERO_REGNUM + 1, { \"ra\", \"x1\" }, true },\n@@ -176,7 +190,7 @@ static const struct riscv_register_feature riscv_xreg_feature =\n \n static const struct riscv_register_feature riscv_freg_feature =\n {\n- \"org.gnu.gdb.riscv.fpu\",\n+ \"org.gnu.gdb.riscv.fpu\", true,\n  {\n    { RISCV_FIRST_FP_REGNUM + 0, { \"ft0\", \"f0\" }, true },\n    { RISCV_FIRST_FP_REGNUM + 1, { \"ft1\", \"f1\" }, true },\n@@ -226,7 +240,7 @@ static const struct riscv_register_feature riscv_freg_feature =\n \n static const struct riscv_register_feature riscv_virtual_feature =\n {\n- \"org.gnu.gdb.riscv.virtual\",\n+ \"org.gnu.gdb.riscv.virtual\", false,\n  {\n    { RISCV_PRIV_REGNUM, { \"priv\" }, false }\n  }\n@@ -238,7 +252,7 @@ static const struct riscv_register_feature riscv_virtual_feature =\n \n static struct riscv_register_feature riscv_csr_feature =\n {\n- \"org.gnu.gdb.riscv.csr\",\n+ \"org.gnu.gdb.riscv.csr\", false,\n  {\n #define DECLARE_CSR(NAME,VALUE,CLASS,DEFINE_VER,ABORT_VER) \\\n   { RISCV_ ## VALUE ## _REGNUM, { # NAME }, false },\n@@ -472,7 +486,7 @@ value_of_riscv_user_reg (struct frame_info *frame, const void *baton)\n \n /* Implement the register_name gdbarch method.  This is used instead of\n    the function supplied by calling TDESC_USE_REGISTERS so that we can\n-   ensure the preferred names are offered.  */\n+   ensure the preferred names are offered for x-regs and f-regs.  */\n \n static const char *\n riscv_register_name (struct gdbarch *gdbarch, int regnum)\n@@ -484,12 +498,18 @@ riscv_register_name (struct gdbarch *gdbarch, int regnum)\n   if (name == NULL || name[0] == '\\0')\n     return NULL;\n \n+  /* We want GDB to use the ABI names for registers even if the target\n+     gives us a target description with the architectural name.  For\n+     example we want to see 'ra' instead of 'x1' whatever the target\n+     description called it.  */\n   if (regnum >= RISCV_ZERO_REGNUM && regnum < RISCV_FIRST_FP_REGNUM)\n     {\n       gdb_assert (regnum < riscv_xreg_feature.registers.size ());\n       return riscv_xreg_feature.registers[regnum].names[0];\n     }\n \n+  /* Like with the x-regs we prefer the abi names for the floating point\n+     registers.  */\n   if (regnum >= RISCV_FIRST_FP_REGNUM && regnum <= RISCV_LAST_FP_REGNUM)\n     {\n       if (riscv_has_fp_regs (gdbarch))\n@@ -502,28 +522,18 @@ riscv_register_name (struct gdbarch *gdbarch, int regnum)\n         return NULL;\n     }\n \n-  /* Check that there's no gap between the set of registers handled above,\n-     and the set of registers handled next.  */\n-  gdb_assert ((RISCV_LAST_FP_REGNUM + 1) == RISCV_FIRST_CSR_REGNUM);\n-\n-  if (regnum >= RISCV_FIRST_CSR_REGNUM && regnum <= RISCV_LAST_CSR_REGNUM)\n-    {\n-#define DECLARE_CSR(NAME,VALUE,CLASS,DEFINE_VER,ABORT_VER) \\\n-      case RISCV_ ## VALUE ## _REGNUM: return # NAME;\n-\n-      switch (regnum)\n-\t{\n-#include \"opcode/riscv-opc.h\"\n-\t}\n-#undef DECLARE_CSR\n-    }\n+  /* The remaining registers are different.  For all other registers on the\n+     machine we prefer to see the names that the target description\n+     provides.  This is particularly important for CSRs which might be\n+     renamed over time.  If GDB keeps track of the \"latest\" name, but a\n+     particular target provides an older name then we don't want to force\n+     users to see the newer name in register output.\n \n-  if (regnum == RISCV_PRIV_REGNUM)\n-    return \"priv\";\n+     The other case that reaches here are any registers that the target\n+     provided that GDB is completely unaware of.  For these we have no\n+     choice but to accept the target description name.\n \n-  /* It is possible that that the target provides some registers that GDB\n-     is unaware of, in that case just return the NAME from the target\n-     description.  */\n+     Just accept whatever name TDESC_REGISTER_NAME returned.  */\n   return name;\n }\n \n@@ -3003,17 +3013,24 @@ riscv_check_tdesc_feature (struct tdesc_arch_data *tdesc_data,\n \n       for (const char *name : reg.names)\n \t{\n-\t  found =\n-\t    tdesc_numbered_register (feature, tdesc_data, reg.regnum, name);\n+\t  found = tdesc_numbered_register (feature, tdesc_data, reg.regnum,\n+\t\t\t\t\t   name);\n \n \t  if (found)\n             {\n               /* We know that the target description mentions this\n                  register.  In RISCV_REGISTER_NAME we ensure that GDB\n                  always uses the first name for each register, so here we\n                  add aliases for all of the remaining names.  */\n-              for (int i = 0; i < reg.names.size (); ++i)\n-\t\taliases->emplace_back (reg.names[i], (void *) &reg.regnum);\n+\t      bool prefer_first_name = reg_set->prefer_first_name;\n+\t      int start_index = prefer_first_name ? 1 : 0;\n+\t      for (int i = start_index; i < reg.names.size (); ++i)\n+                {\n+\t\t  const char *alias = reg.names[i];\n+                  if (alias == name && !prefer_first_name)\n+\t\t    continue;\n+\t\t  aliases->emplace_back (alias, (void *) &reg.regnum);\n+                }\n               break;\n             }\n \t}"
    },
    {
      "sha": "76641b3c3333a4d06c1f2007448d533c0405a395",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=ed69cbc8ef0a403caff2725072362252ac27bee3",
      "patch": "@@ -1,3 +1,7 @@\n+2020-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.arch/riscv-tdesc-regs.exp: Extend test case.\n+\n 2020-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.arch/riscv-tdesc-regs-32.xml: New file."
    },
    {
      "sha": "63ac8fb7abce0b3bbcef0a214b5a2646a382ea7c",
      "filename": "gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed69cbc8ef0a403caff2725072362252ac27bee3/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp?ref=ed69cbc8ef0a403caff2725072362252ac27bee3",
      "patch": "@@ -14,7 +14,8 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n # Various tests to check which register names are available after\n-# loading a new target description file.\n+# loading a new target description file, and which registers show up\n+# in the output of the 'info registers' command.\n \n if {![istarget \"riscv*-*-*\"]} {\n     verbose \"Skipping ${gdb_test_file_name}.\"\n@@ -79,3 +80,39 @@ gdb_test \"info registers \\$csr0\" \"Invalid register `csr0'\"\n gdb_test \"info registers \\$dscratch0\" \"dscratch0\\[ \\t\\]+.*\"\n gdb_test \"info registers \\$dscratch\" \"dscratch\\[ \\t\\]+.*\"\n \n+foreach rgroup {all save restore} {\n+    # Now use 'info registers all' to see how many times the floating\n+    # point status registers show up in the output.\n+    array set reg_counts {}\n+    set test \"info registers $rgroup\"\n+    gdb_test_multiple $test $test {\n+\t-re \".*info registers all\\r\\n\" {\n+\t    verbose -log \"Skip to first register\"\n+\t    exp_continue\n+\t}\n+\t-re \"^(\\[^ \\t\\]+)\\[ \\t\\]+\\[^\\r\\n\\]+\\r\\n\" {\n+\t    set reg $expect_out(1,string)\n+\t    incr reg_counts($reg)\n+\texp_continue\n+\t}\n+\t-re \"^$gdb_prompt $\" {\n+\t    # Done.\n+\t}\n+    }\n+\n+    foreach reg {dscratch} {\n+\tif { [info exists reg_counts($reg) ] } {\n+\t    set count $reg_counts($reg)\n+\t} else {\n+\t    set count 0\n+\t}\n+\tif {$reg == \"dscratch\" && $rgroup != \"all\"} {\n+\t    gdb_assert {$count == 0} \\\n+\t\t\"register $reg not seen in reggroup $rgroup\"\n+\t} else {\n+\t    gdb_assert {$count == 1} \\\n+\t\t\"register $reg seen once in reggroup $rgroup\"\n+\t}\n+    }\n+    array unset reg_counts\n+}"
    }
  ]
}