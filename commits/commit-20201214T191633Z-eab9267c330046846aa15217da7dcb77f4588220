{
  "sha": "eab9267c330046846aa15217da7dcb77f4588220",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWFiOTI2N2MzMzAwNDY4NDZhYTE1MjE3ZGE3ZGNiNzdmNDU4ODIyMA==",
  "commit": {
    "author": {
      "name": "Mark Wielaard",
      "email": "mark@klomp.org",
      "date": "2020-12-14T16:38:09Z"
    },
    "committer": {
      "name": "Mark Wielaard",
      "email": "mark@klomp.org",
      "date": "2020-12-14T19:16:33Z"
    },
    "message": "Use DW_FORM_exprloc in testsuite Dwarf Assembler for DWARF version 4+.\n\nSince DWARF version 4 expressions are represented by DW_FORM_exprloc\ninstead of a block form. Support this in the testsuite Dwarf Assembler\nby setting the SPECIAL_expr form once we know the CU version.\n\nThis doesn't change any testsuite results, it just makes the produced\nDWARF valid. gdb also accepts expressions in block form for DWARF\nversion 4 and above, but this is technically incorrect.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/dwarf.exp (Dwarf::_read_constants): Don't set\n\t_constants(SPECIAL_expr) here, but set it...\n\t(Dwarf::cu): ...here based on _cu_version.",
    "tree": {
      "sha": "3c252fc5da9996df24b5a7e3289b3164029f528a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3c252fc5da9996df24b5a7e3289b3164029f528a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eab9267c330046846aa15217da7dcb77f4588220",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eab9267c330046846aa15217da7dcb77f4588220",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eab9267c330046846aa15217da7dcb77f4588220",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eab9267c330046846aa15217da7dcb77f4588220/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "2f4132646d8dbf8c1a82d63cacbb36ee46a289bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f4132646d8dbf8c1a82d63cacbb36ee46a289bb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f4132646d8dbf8c1a82d63cacbb36ee46a289bb"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 16,
    "deletions": 5
  },
  "files": [
    {
      "sha": "ab03f0745dabf9c7744d327e8e93a9d1f5c4c682",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eab9267c330046846aa15217da7dcb77f4588220/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eab9267c330046846aa15217da7dcb77f4588220/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=eab9267c330046846aa15217da7dcb77f4588220",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-14  Mark Wielaard  <mark@klomp.org>\n+\n+\t* lib/dwarf.exp (Dwarf::_read_constants): Don't set\n+\t_constants(SPECIAL_expr) here, but set it...\n+\t(Dwarf::cu): ...here based on _cu_version.\n+\n 2020-12-14  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (gdb_compile_shlib): Make sure it's not necessary to"
    },
    {
      "sha": "43ae29697cdf1bce2343d0100dffe33871a2e2d7",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eab9267c330046846aa15217da7dcb77f4588220/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eab9267c330046846aa15217da7dcb77f4588220/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=eab9267c330046846aa15217da7dcb77f4588220",
      "patch": "@@ -234,8 +234,9 @@ proc get_func_info { name {options {debug}} } {\n # section automatically.\n #\n # If FORM is 'SPECIAL_expr', then VALUE is treated as a location\n-# expression.  The effective form is then DW_FORM_block, and VALUE\n-# is passed to the (internal) '_location' proc to be translated.\n+# expression.  The effective form is then DW_FORM_block or DW_FORM_exprloc\n+# for DWARF version >= 4, and VALUE is passed to the (internal)\n+# '_location' proc to be translated.\n # This proc implements a miniature DW_OP_ assembler.\n #\n # If FORM is not given, it is guessed:\n@@ -389,7 +390,6 @@ namespace eval Dwarf {\n \n     proc _read_constants {} {\n \tglobal srcdir hex decimal\n-\tvariable _constants\n \n \t# DWARF name-matching regexp.\n \tset dwrx \"DW_\\[a-zA-Z0-9_\\]+\"\n@@ -416,8 +416,6 @@ namespace eval Dwarf {\n \t    }\n \t}\n \tclose $fd\n-\n-\tset _constants(SPECIAL_expr) $_constants(DW_FORM_block)\n     }\n \n     proc _quote {string} {\n@@ -1042,6 +1040,7 @@ namespace eval Dwarf {\n     # BODY is Tcl code that emits the DIEs which make up the body of\n     # the CU.  It is evaluated in the caller's context.\n     proc cu {options body} {\n+\tvariable _constants\n \tvariable _cu_count\n \tvariable _abbrev_section\n \tvariable _abbrev_num\n@@ -1081,6 +1080,12 @@ namespace eval Dwarf {\n \t    set _abbrev_section \".debug_abbrev.dwo\"\n \t}\n \n+\tif {$_cu_version < 4} {\n+\t    set _constants(SPECIAL_expr) $_constants(DW_FORM_block)\n+\t} else {\n+\t    set _constants(SPECIAL_expr) $_constants(DW_FORM_exprloc)\n+\t}\n+\n \t_section $section\n \n \tset cu_num [incr _cu_count]"
    }
  ]
}