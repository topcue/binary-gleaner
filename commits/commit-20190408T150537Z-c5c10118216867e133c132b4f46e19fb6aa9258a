{
  "sha": "c5c10118216867e133c132b4f46e19fb6aa9258a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzVjMTAxMTgyMTY4NjdlMTMzYzEzMmI0ZjQ2ZTE5ZmI2YWE5MjU4YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-25T00:31:21Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-08T15:05:37Z"
    },
    "message": "Simplify exception handling\n\nNow that cleanups have been removed, TRY/CATCH can't be SJLJ-based any\nmore.  This patch simplifies the exception handling code, by removing\nthe non-working variants.\n\nNote that the \"pure\" C++ exception handling code is removed as well; I\nthink the route forward must be to change exceptions to be\nself-destructing, so that try_scope_depth can simply be removed.\n\nSome longjmp-based code remains, as it is needed to throw an exception\nthrough readline.\n\ngdb/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* common/common-exceptions.h (GDB_XCPT_SJMP, GDB_XCPT_TRY)\n\t(GDB_XCPT_RAW_TRY, GDB_XCPT): Remove.\n\t(TRY, CATCH, END_CATCH): Remove some definitions.\n\t* common/common-exceptions.c: Don't use GDB_XCPT.\n\t(catcher_list_size): Remove.\n\t(throw_exception, throw_it): Simplify.",
    "tree": {
      "sha": "46b80e4714d51d586f4f11ffc0a33df9e695e6d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/46b80e4714d51d586f4f11ffc0a33df9e695e6d4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c5c10118216867e133c132b4f46e19fb6aa9258a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5c10118216867e133c132b4f46e19fb6aa9258a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c5c10118216867e133c132b4f46e19fb6aa9258a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5c10118216867e133c132b4f46e19fb6aa9258a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d970ee2bae1925bb9265d37adef0b92e2678d666",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d970ee2bae1925bb9265d37adef0b92e2678d666",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d970ee2bae1925bb9265d37adef0b92e2678d666"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 10,
    "deletions": 81
  },
  "files": [
    {
      "sha": "cc2c270f09a3cdba9d81ea3484c5792ceb7fd882",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c10118216867e133c132b4f46e19fb6aa9258a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c10118216867e133c132b4f46e19fb6aa9258a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c5c10118216867e133c132b4f46e19fb6aa9258a",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/common-exceptions.h (GDB_XCPT_SJMP, GDB_XCPT_TRY)\n+\t(GDB_XCPT_RAW_TRY, GDB_XCPT): Remove.\n+\t(TRY, CATCH, END_CATCH): Remove some definitions.\n+\t* common/common-exceptions.c: Don't use GDB_XCPT.\n+\t(catcher_list_size): Remove.\n+\t(throw_exception, throw_it): Simplify.\n+\n 2019-04-05  Tom Tromey  <tom@tromey.com>\n \n \tRevert the header-sorting patch."
    },
    {
      "sha": "c3529c989fdc8e3bb726b5654c37b3670fb01380",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 0,
      "deletions": 36,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c10118216867e133c132b4f46e19fb6aa9258a/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c10118216867e133c132b4f46e19fb6aa9258a/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=c5c10118216867e133c132b4f46e19fb6aa9258a",
      "patch": "@@ -54,26 +54,6 @@ struct catcher\n /* Where to go for throw_exception().  */\n static struct catcher *current_catcher;\n \n-#if GDB_XCPT == GDB_XCPT_SJMP\n-\n-/* Return length of current_catcher list.  */\n-\n-static int\n-catcher_list_size (void)\n-{\n-  int size;\n-  struct catcher *catcher;\n-\n-  for (size = 0, catcher = current_catcher;\n-       catcher != NULL;\n-       catcher = catcher->prev)\n-    ++size;\n-\n-  return size;\n-}\n-\n-#endif\n-\n jmp_buf *\n exceptions_state_mc_init (void)\n {\n@@ -205,8 +185,6 @@ exceptions_state_mc_action_iter_1 (void)\n   return exceptions_state_mc (CATCH_ITER_1);\n }\n \n-#if GDB_XCPT != GDB_XCPT_SJMP\n-\n /* How many nested TRY blocks we have.  See exception_messages and\n    throw_it.  */\n \n@@ -248,8 +226,6 @@ gdb_exception_sliced_copy (struct gdb_exception *to, const struct gdb_exception\n   *to = *from;\n }\n \n-#endif /* !GDB_XCPT_SJMP */\n-\n /* Return EXCEPTION to the nearest containing CATCH_SJLJ block.  */\n \n void\n@@ -263,8 +239,6 @@ throw_exception_sjlj (struct gdb_exception exception)\n   longjmp (current_catcher->buf, exception.reason);\n }\n \n-#if GDB_XCPT != GDB_XCPT_SJMP\n-\n /* Implementation of throw_exception that uses C++ try/catch.  */\n \n static ATTRIBUTE_NORETURN void\n@@ -288,16 +262,10 @@ throw_exception_cxx (struct gdb_exception exception)\n     gdb_assert_not_reached (\"invalid return reason\");\n }\n \n-#endif\n-\n void\n throw_exception (struct gdb_exception exception)\n {\n-#if GDB_XCPT == GDB_XCPT_SJMP\n-  throw_exception_sjlj (exception);\n-#else\n   throw_exception_cxx (exception);\n-#endif\n }\n \n /* A stack of exception messages.\n@@ -321,11 +289,7 @@ throw_it (enum return_reason reason, enum errors error, const char *fmt,\n {\n   struct gdb_exception e;\n   char *new_message;\n-#if GDB_XCPT == GDB_XCPT_SJMP\n-  int depth = catcher_list_size ();\n-#else\n   int depth = try_scope_depth;\n-#endif\n \n   gdb_assert (depth > 0);\n "
    },
    {
      "sha": "6cc09eab93851c60b2f8ad53b56b44a9db0d9744",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 1,
      "deletions": 45,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c10118216867e133c132b4f46e19fb6aa9258a/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c10118216867e133c132b4f46e19fb6aa9258a/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=c5c10118216867e133c132b4f46e19fb6aa9258a",
      "patch": "@@ -115,22 +115,6 @@ struct gdb_exception\n   const char *message;\n };\n \n-/* The different exception mechanisms that TRY/CATCH can map to.  */\n-\n-/* Make GDB exceptions use setjmp/longjmp behind the scenes.  */\n-#define GDB_XCPT_SJMP 1\n-\n-/* Make GDB exceptions use try/catch behind the scenes.  */\n-#define GDB_XCPT_TRY 2\n-\n-/* Specify this mode to build with TRY/CATCH mapped directly to raw\n-   try/catch.  GDB won't work correctly, but building that way catches\n-   code tryin to break/continue out of the try block, along with\n-   spurious code between the TRY and the CATCH block.  */\n-#define GDB_XCPT_RAW_TRY 3\n-\n-#define GDB_XCPT GDB_XCPT_TRY\n-\n /* Functions to drive the sjlj-based exceptions state machine.  Though\n    declared here by necessity, these functions should be considered\n    internal to the exceptions subsystem and not used other than via\n@@ -141,13 +125,11 @@ extern int exceptions_state_mc_action_iter (void);\n extern int exceptions_state_mc_action_iter_1 (void);\n extern int exceptions_state_mc_catch (struct gdb_exception *, int);\n \n-/* Same, but for the C++ try/catch-based TRY/CATCH mechanism.  */\n+/* For the C++ try/catch-based TRY/CATCH mechanism.  */\n \n-#if GDB_XCPT != GDB_XCPT_SJMP\n extern void *exception_try_scope_entry (void);\n extern void exception_try_scope_exit (void *saved_state);\n extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n-#endif\n \n /* Macro to wrap up standard try/catch behavior.\n \n@@ -196,19 +178,6 @@ extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n #define END_CATCH_SJLJ\t\t\t\t\\\n   }\n \n-#if GDB_XCPT == GDB_XCPT_SJMP\n-\n-/* If using SJLJ-based exceptions for all exceptions, then provide\n-   standard aliases.  */\n-\n-#define TRY TRY_SJLJ\n-#define CATCH CATCH_SJLJ\n-#define END_CATCH END_CATCH_SJLJ\n-\n-#endif /* GDB_XCPT_SJMP */\n-\n-#if GDB_XCPT == GDB_XCPT_TRY || GDB_XCPT == GDB_XCPT_RAW_TRY\n-\n /* Prevent error/quit during TRY from calling cleanups established\n    prior to here.  This pops out the scope in either case of normal\n    exit or exception exit.  */\n@@ -226,8 +195,6 @@ struct exception_try_scope\n   void *saved_state;\n };\n \n-#if GDB_XCPT == GDB_XCPT_TRY\n-\n /* We still need to wrap TRY/CATCH in C++ so that cleanups and C++\n    exceptions can coexist.\n \n@@ -263,15 +230,6 @@ struct exception_try_scope\n       }\t\t\t\t\t\t\\\n   }\n \n-#else\n-\n-#define TRY try\n-#define CATCH(EXCEPTION, MASK) \\\n-  catch (struct gdb_exception ## _ ## MASK &EXCEPTION)\n-#define END_CATCH\n-\n-#endif\n-\n /* The exception types client code may catch.  They're just shims\n    around gdb_exception that add nothing but type info.  Which is used\n    is selected depending on the MASK argument passed to CATCH.  */\n@@ -288,8 +246,6 @@ struct gdb_exception_RETURN_MASK_QUIT : public gdb_exception_RETURN_MASK_ALL\n {\n };\n \n-#endif /* GDB_XCPT_TRY || GDB_XCPT_RAW_TRY */\n-\n /* An exception type that inherits from both std::bad_alloc and a gdb\n    exception.  This is necessary because operator new can only throw\n    std::bad_alloc, and OTOH, we want exceptions thrown due to memory"
    }
  ]
}