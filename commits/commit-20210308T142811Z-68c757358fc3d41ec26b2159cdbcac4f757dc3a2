{
  "sha": "68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjhjNzU3MzU4ZmMzZDQxZWMyNmIyMTU5Y2RiY2FjNGY3NTdkYzNhMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:11Z"
    },
    "message": "Split out ada_atr_size\n\nThis splits OP_ATR_SIZE into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (ada_atr_size): New function.\n\t(ada_evaluate_subexp): Use it.",
    "tree": {
      "sha": "c6cead7b624835284c413f5838c67c6b0b78ac1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c6cead7b624835284c413f5838c67c6b0b78ac1f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/68c757358fc3d41ec26b2159cdbcac4f757dc3a2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "020dbabe22262ee118c29c768d7b9d66b1c65e67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/020dbabe22262ee118c29c768d7b9d66b1c65e67",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/020dbabe22262ee118c29c768d7b9d66b1c65e67"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 31,
    "deletions": 15
  },
  "files": [
    {
      "sha": "2a20313f940b0505633b7a0066f65a6a1b357977",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/68c757358fc3d41ec26b2159cdbcac4f757dc3a2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/68c757358fc3d41ec26b2159cdbcac4f757dc3a2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (ada_atr_size): New function.\n+\t(ada_evaluate_subexp): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (ada_atr_tag): New function."
    },
    {
      "sha": "cfd85d3eee92b16bea2becba29665e929e846ee8",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 26,
      "deletions": 15,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/68c757358fc3d41ec26b2159cdbcac4f757dc3a2/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/68c757358fc3d41ec26b2159cdbcac4f757dc3a2/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
      "patch": "@@ -10025,6 +10025,31 @@ ada_atr_tag (struct type *expect_type,\n   return ada_value_tag (arg1);\n }\n \n+/* A helper function for OP_ATR_SIZE.  */\n+\n+static value *\n+ada_atr_size (struct type *expect_type,\n+\t      struct expression *exp,\n+\t      enum noside noside, enum exp_opcode op,\n+\t      struct value *arg1)\n+{\n+  struct type *type = value_type (arg1);\n+\n+  /* If the argument is a reference, then dereference its type, since\n+     the user is really asking for the size of the actual object,\n+     not the size of the pointer.  */\n+  if (type->code () == TYPE_CODE_REF)\n+    type = TYPE_TARGET_TYPE (type);\n+\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+  else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    return value_zero (builtin_type (exp->gdbarch)->builtin_int, not_lval);\n+  else\n+    return value_from_longest (builtin_type (exp->gdbarch)->builtin_int,\n+\t\t\t       TARGET_CHAR_BIT * TYPE_LENGTH (type));\n+}\n+\n /* Implement the evaluate_exp routine in the exp_descriptor structure\n    for the Ada language.  */\n \n@@ -10802,21 +10827,7 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \n     case OP_ATR_SIZE:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n-      type = value_type (arg1);\n-\n-      /* If the argument is a reference, then dereference its type, since\n-\t the user is really asking for the size of the actual object,\n-\t not the size of the pointer.  */\n-      if (type->code () == TYPE_CODE_REF)\n-\ttype = TYPE_TARGET_TYPE (type);\n-\n-      if (noside == EVAL_SKIP)\n-\tgoto nosideret;\n-      else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\treturn value_zero (builtin_type (exp->gdbarch)->builtin_int, not_lval);\n-      else\n-\treturn value_from_longest (builtin_type (exp->gdbarch)->builtin_int,\n-\t\t\t\t   TARGET_CHAR_BIT * TYPE_LENGTH (type));\n+      return ada_atr_size (expect_type, exp, noside, op, arg1);\n \n     case OP_ATR_VAL:\n       evaluate_subexp (nullptr, exp, pos, EVAL_SKIP);"
    }
  ]
}