{
  "sha": "54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTRiNjVjOWI1MWVjODBlZjU4MTJkZGUxYTUwOGNlMTcxZWViOGNlNg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-23T18:58:29Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-23T19:02:58Z"
    },
    "message": "Introduce scope_exit\n\nThis add a new template class scope_exit.  scope_exit is a\ngeneral-purpose scope guard that calls its exit function at the end of\nthe current scope.  A scope_exit may be canceled by calling the\n\"release\" method.  The API is modeled on P0052R5 - Generic Scope Guard\nand RAII Wrapper for the Standard Library, which is itself based on\nAndrej Alexandrescu's ScopeGuard/SCOPE_EXIT.\n\nThe main advantage of scope_exit is avoiding writing single-use RAII\nclasses and its boilerplate.  Following patches will remove a few of\nsuch classes.\n\nThere are two forms available:\n\n - The \"make_scope_exit\" form allows canceling the scope guard.  Use\n   it like this:\n\n     auto cleanup = make_scope_exit ( <function, function object, lambda> );\n     ...\n     cleanup.release (); // cancel\n\n - If you don't need to cancel the guard, you can use the SCOPE_EXIT\n   macro, like this:\n\n     SCOPE_EXIT { /* any code you like here. */ }\n\nNote: scope_exit instances do not allocate anything on the heap.\n\ngdb/ChangeLog:\n2019-01-23  Pedro Alves  <palves@redhat.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* common/scope-exit.h: New file.",
    "tree": {
      "sha": "599f1e4e5d1c0764ba445f46fc12834cac54f83b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/599f1e4e5d1c0764ba445f46fc12834cac54f83b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf08fb29f8c484a34c4babb015348b220f80a33b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf08fb29f8c484a34c4babb015348b220f80a33b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf08fb29f8c484a34c4babb015348b220f80a33b"
    }
  ],
  "stats": {
    "total": 192,
    "additions": 192,
    "deletions": 0
  },
  "files": [
    {
      "sha": "996ca18e140143eefcc3c1b15e9f2dd5c7f4d4fa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
      "patch": "@@ -1,3 +1,9 @@\n+2019-01-23  Pedro Alves  <palves@redhat.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* common/scope-exit.h: New file.\n+\n 2019-01-23  Pedro Alves  <palves@redhat.com>\n \n \t* common/preprocessor.h (ESC): Rename to ..."
    },
    {
      "sha": "8cdbec305ac84ebf103d2b512b08028413bd96e5",
      "filename": "gdb/common/scope-exit.h",
      "status": "added",
      "additions": 186,
      "deletions": 0,
      "changes": 186,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6/gdb/common/scope-exit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6/gdb/common/scope-exit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/scope-exit.h?ref=54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
      "patch": "@@ -0,0 +1,186 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef COMMON_SCOPE_EXIT_H\n+#define COMMON_SCOPE_EXIT_H\n+\n+#include <functional>\n+#include <type_traits>\n+#include \"common/preprocessor.h\"\n+\n+/* scope_exit is a general-purpose scope guard that calls its exit\n+   function at the end of the current scope.  A scope_exit may be\n+   canceled by calling the \"release\" method.  The API is modeled on\n+   P0052R5 - Generic Scope Guard and RAII Wrapper for the Standard\n+   Library, which is itself based on Andrej Alexandrescu's\n+   ScopeGuard/SCOPE_EXIT.\n+\n+   There are two forms available:\n+\n+   - The \"make_scope_exit\" form allows canceling the scope guard.  Use\n+     it like this:\n+\n+     auto cleanup = make_scope_exit ( <function, function object, lambda> );\n+     ...\n+     cleanup.release (); // cancel\n+\n+   - If you don't need to cancel the guard, you can use the SCOPE_EXIT\n+     macro, like this:\n+\n+     SCOPE_EXIT\n+       {\n+\t // any code you like here.\n+       }\n+\n+   See also forward_scope_exit.\n+*/\n+\n+/* CRTP base class for cancelable scope_exit-like classes.  Implements\n+   the common call-custom-function-from-dtor functionality.  Classes\n+   that inherit this implement the on_exit() method, which is called\n+   from scope_exit_base's dtor.  */\n+\n+template <typename CRTP>\n+class scope_exit_base\n+{\n+public:\n+  scope_exit_base () = default;\n+\n+  ~scope_exit_base ()\n+  {\n+    if (!m_released)\n+      {\n+\tauto *self = static_cast<CRTP *> (this);\n+\tself->on_exit ();\n+      }\n+  }\n+\n+  /* This is needed for make_scope_exit because copy elision isn't\n+     guaranteed until C++17.  An optimizing compiler will usually skip\n+     calling this, but it must exist.  */\n+  scope_exit_base (const scope_exit_base &other)\n+    : m_released (other.m_released)\n+  {\n+    other.m_released = true;\n+  }\n+\n+  void operator= (const scope_exit_base &) = delete;\n+\n+  /* If this is called, then the wrapped function will not be called\n+     on destruction.  */\n+  void release () noexcept\n+  {\n+    m_released = true;\n+  }\n+\n+private:\n+\n+  /* True if released.  Mutable because of the copy ctor hack\n+     above.  */\n+  mutable bool m_released = false;\n+};\n+\n+/* The scope_exit class.  */\n+\n+template<typename EF>\n+class scope_exit : public scope_exit_base<scope_exit<EF>>\n+{\n+  /* For access to on_exit().  */\n+  friend scope_exit_base<scope_exit<EF>>;\n+\n+public:\n+\n+  template<typename EFP,\n+\t   typename = gdb::Requires<std::is_constructible<EF, EFP>>>\n+  scope_exit (EFP &&f)\n+    try : m_exit_function ((!std::is_lvalue_reference<EFP>::value\n+\t\t\t    && std::is_nothrow_constructible<EF, EFP>::value)\n+\t\t\t   ? std::move (f)\n+\t\t\t   : f)\n+  {\n+  }\n+  catch (...)\n+    {\n+      /* \"If the initialization of exit_function throws an exception,\n+\t calls f().\"  */\n+      f ();\n+    }\n+\n+  template<typename EFP,\n+\t   typename = gdb::Requires<std::is_constructible<EF, EFP>>>\n+  scope_exit (scope_exit &&rhs)\n+    noexcept (std::is_nothrow_move_constructible<EF>::value\n+\t      || std::is_nothrow_copy_constructible<EF>::value)\n+    : m_exit_function (std::is_nothrow_constructible<EFP>::value\n+\t\t       ? std::move (rhs)\n+\t\t       : rhs)\n+  {\n+    rhs.release ();\n+  }\n+\n+  /* This is needed for make_scope_exit because copy elision isn't\n+     guaranteed until C++17.  An optimizing compiler will usually skip\n+     calling this, but it must exist.  */\n+  scope_exit (const scope_exit &other)\n+    : scope_exit_base<scope_exit<EF>> (other),\n+      m_exit_function (other.m_exit_function)\n+  {\n+  }\n+\n+  void operator= (const scope_exit &) = delete;\n+  void operator= (scope_exit &&) = delete;\n+\n+private:\n+  void on_exit ()\n+  {\n+    m_exit_function ();\n+  }\n+\n+  /* The function to call on scope exit.  */\n+  EF m_exit_function;\n+};\n+\n+template <typename EF>\n+scope_exit<typename std::decay<EF>::type>\n+make_scope_exit (EF &&f)\n+{\n+  return scope_exit<typename std::decay<EF>::type> (std::forward<EF> (f));\n+}\n+\n+namespace detail\n+{\n+\n+enum class scope_exit_lhs {};\n+\n+template<typename EF>\n+scope_exit<typename std::decay<EF>::type>\n+operator+ (scope_exit_lhs, EF &&rhs)\n+{\n+  return scope_exit<typename std::decay<EF>::type> (std::forward<EF> (rhs));\n+}\n+\n+}\n+\n+/* Register a block of code to run on scope exit.  Note that the local\n+   context is captured by reference, which means you should be careful\n+   to avoid inadvertently changing a captured local's value before the\n+   scope exit runs.  */\n+\n+#define SCOPE_EXIT \\\n+  auto CONCAT(scope_exit_, __LINE__) = ::detail::scope_exit_lhs () + [&] ()\n+\n+#endif /* COMMON_SCOPE_EXIT_H */"
    }
  ]
}