{
  "sha": "35add35e85c21f02e3e5808273cb77b24069b0aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzVhZGQzNWU4NWMyMWYwMmUzZTU4MDgyNzNjYjc3YjI0MDY5YjBhYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-12T23:54:16Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-13T00:02:43Z"
    },
    "message": "gdb: Fix failure in gdb.base/complex-parts.exp for x86-32\n\nThe x86-32 ABI specifies 96-bit long double, this was causing a\nfailure on the test gdb.base/complex-parts.exp.\n\nThe problem is that GDB tries to find a builtin floating point type of\nthe correct size in order to reuse the name of that type as the name\nfor the components of the complex type being built.\n\nPreviously GDB was only aware of floating point types sized 32, 64, or\n128 bits.  This patch teaches GDB how to handle 96 bit floating point\ntype.\n\ngdb/ChangeLog:\n\n\t* dwarf2read.c (dwarf2_init_complex_target_type): Handle complex\n\ttarget types of size 96-bits, add some additional comments, and\n\tcheck that the builtin type we found was the correct size.",
    "tree": {
      "sha": "169eb966bc2076dd5e00011fbd58c0129441d2b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/169eb966bc2076dd5e00011fbd58c0129441d2b0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/35add35e85c21f02e3e5808273cb77b24069b0aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35add35e85c21f02e3e5808273cb77b24069b0aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/35add35e85c21f02e3e5808273cb77b24069b0aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35add35e85c21f02e3e5808273cb77b24069b0aa/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9c9f1b1f39f37ce75c2fc3c378aa059b67df2ea2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c9f1b1f39f37ce75c2fc3c378aa059b67df2ea2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9c9f1b1f39f37ce75c2fc3c378aa059b67df2ea2"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 16,
    "deletions": 0
  },
  "files": [
    {
      "sha": "adafc198d8a87cfe47be452894c0ac4812f67efd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35add35e85c21f02e3e5808273cb77b24069b0aa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35add35e85c21f02e3e5808273cb77b24069b0aa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=35add35e85c21f02e3e5808273cb77b24069b0aa",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf2read.c (dwarf2_init_complex_target_type): Handle complex\n+\ttarget types of size 96-bits, add some additional comments, and\n+\tcheck that the builtin type we found was the correct size.\n+\n 2019-04-12  Eli Zaretskii  <eliz@gnu.org>\n \n \t* utils.c (prompt_for_continue): Don't restore the styling at the"
    },
    {
      "sha": "0873028e438a9028d48184ab3dc73c84b609230e",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35add35e85c21f02e3e5808273cb77b24069b0aa/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35add35e85c21f02e3e5808273cb77b24069b0aa/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=35add35e85c21f02e3e5808273cb77b24069b0aa",
      "patch": "@@ -17546,6 +17546,9 @@ dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n   gdbarch *gdbarch = get_objfile_arch (objfile);\n   struct type *tt = nullptr;\n \n+  /* Try to find a suitable floating point builtin type of size BITS.\n+     We're going to use the name of this type as the name for the complex\n+     target type that we are about to create.  */\n   switch (bits)\n     {\n     case 32:\n@@ -17554,11 +17557,18 @@ dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n     case 64:\n       tt = builtin_type (gdbarch)->builtin_double;\n       break;\n+    case 96:\t/* The x86-32 ABI specifies 96-bit long double.  */\n     case 128:\n       tt = builtin_type (gdbarch)->builtin_long_double;\n       break;\n     }\n \n+  /* If the type we found doesn't match the size we were looking for, then\n+     pretend we didn't find a type at all, the complex target type we\n+     create will then be nameless.  */\n+  if (TYPE_LENGTH (tt) * TARGET_CHAR_BIT != bits)\n+    tt = nullptr;\n+\n   const char *name = (tt == nullptr) ? nullptr : TYPE_NAME (tt);\n   return dwarf2_init_float_type (objfile, bits, name, name_hint);\n }"
    }
  ]
}