{
  "sha": "5cde1d8222a849256f684363f38a6423dea9be74",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWNkZTFkODIyMmE4NDkyNTZmNjg0MzYzZjM4YTY0MjNkZWE5YmU3NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-09T21:12:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-09T21:12:58Z"
    },
    "message": "Handle 128-bit constants for fixed point\n\nIn some cases, GNAT can emit 128-bit constants for fixed-point types.\nThis patch changes gdb to handle this scenario, by changing the\nlow-level rational-reading functions in dwarf2/read.c to work directly\nwith gdb_mpz values.  (I'm not sure offhand if these 128-bit patches\nhave gone into upstream GCC yet -- but they will eventually, and\nmeanwhile I think it should be clear that this patch is otherwise\nharmless.)\n\ngdb/ChangeLog\n2020-12-09  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (get_dwarf2_rational_constant): Change \"numerator\"\n\tand \"denominator\" to gdb_mpz.  Handle block forms.\n\t(get_dwarf2_unsigned_rational_constant): Change \"numerator\" and\n\t\"denominator\" to gdb_mpz.\n\t(finish_fixed_point_type): Update.\n\t(has_zero_over_zero_small_attribute): Update.",
    "tree": {
      "sha": "6a527c12bcbaf7e4529561f682e49b23124da977",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a527c12bcbaf7e4529561f682e49b23124da977"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5cde1d8222a849256f684363f38a6423dea9be74",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cde1d8222a849256f684363f38a6423dea9be74",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5cde1d8222a849256f684363f38a6423dea9be74",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cde1d8222a849256f684363f38a6423dea9be74/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9c3a9c03692c12b472c555f71fe7a2444a24d46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9c3a9c03692c12b472c555f71fe7a2444a24d46",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9c3a9c03692c12b472c555f71fe7a2444a24d46"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 57,
    "deletions": 34
  },
  "files": [
    {
      "sha": "4236e8c7e3b344fefaa2c87707a1500eb5a894d7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5cde1d8222a849256f684363f38a6423dea9be74/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5cde1d8222a849256f684363f38a6423dea9be74/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5cde1d8222a849256f684363f38a6423dea9be74",
      "patch": "@@ -1,3 +1,12 @@\n+2020-12-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (get_dwarf2_rational_constant): Change \"numerator\"\n+\tand \"denominator\" to gdb_mpz.  Handle block forms.\n+\t(get_dwarf2_unsigned_rational_constant): Change \"numerator\" and\n+\t\"denominator\" to gdb_mpz.\n+\t(finish_fixed_point_type): Update.\n+\t(has_zero_over_zero_small_attribute): Update.\n+\n 2020-12-09  Tom Tromey  <tromey@adacore.com>\n \n \t* expprint.c (op_name): Update."
    },
    {
      "sha": "2bf14535f0518dd7909d2d0259d0a96aa190ad41",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 48,
      "deletions": 34,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5cde1d8222a849256f684363f38a6423dea9be74/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5cde1d8222a849256f684363f38a6423dea9be74/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5cde1d8222a849256f684363f38a6423dea9be74",
      "patch": "@@ -18194,7 +18194,7 @@ read_typedef (struct die_info *die, struct dwarf2_cu *cu)\n \n static void\n get_dwarf2_rational_constant (struct die_info *die, struct dwarf2_cu *cu,\n-\t\t\t      LONGEST *numerator, LONGEST *denominator)\n+\t\t\t      gdb_mpz *numerator, gdb_mpz *denominator)\n {\n   struct attribute *num_attr, *denom_attr;\n \n@@ -18211,8 +18211,25 @@ get_dwarf2_rational_constant (struct die_info *die, struct dwarf2_cu *cu,\n   if (num_attr == nullptr || denom_attr == nullptr)\n     return;\n \n-  *numerator = num_attr->constant_value (1);\n-  *denominator = denom_attr->constant_value (1);\n+  if (num_attr->form_is_block ())\n+    {\n+      dwarf_block *blk = num_attr->as_block ();\n+      mpz_import (numerator->val, blk->size,\n+\t\t  bfd_big_endian (cu->per_objfile->objfile->obfd) ? 1 : -1,\n+\t\t  1, 0, 0, blk->data);\n+    }\n+  else\n+    *numerator = gdb_mpz (num_attr->constant_value (1));\n+\n+  if (denom_attr->form_is_block ())\n+    {\n+      dwarf_block *blk = denom_attr->as_block ();\n+      mpz_import (denominator->val, blk->size,\n+\t\t  bfd_big_endian (cu->per_objfile->objfile->obfd) ? 1 : -1,\n+\t\t  1, 0, 0, blk->data);\n+    }\n+  else\n+    *denominator = gdb_mpz (denom_attr->constant_value (1));\n }\n \n /* Same as get_dwarf2_rational_constant, but extracting an unsigned\n@@ -18224,34 +18241,35 @@ get_dwarf2_rational_constant (struct die_info *die, struct dwarf2_cu *cu,\n static void\n get_dwarf2_unsigned_rational_constant (struct die_info *die,\n \t\t\t\t       struct dwarf2_cu *cu,\n-\t\t\t\t       ULONGEST *numerator,\n-\t\t\t\t       ULONGEST *denominator)\n+\t\t\t\t       gdb_mpz *numerator,\n+\t\t\t\t       gdb_mpz *denominator)\n {\n-  LONGEST num = 1, denom = 1;\n+  gdb_mpz num (1);\n+  gdb_mpz denom (1);\n \n   get_dwarf2_rational_constant (die, cu, &num, &denom);\n-  if (num < 0 && denom < 0)\n+  if (mpz_sgn (num.val) == -1 && mpz_sgn (denom.val) == -1)\n     {\n-      num = -num;\n-      denom = -denom;\n+      mpz_neg (num.val, num.val);\n+      mpz_neg (denom.val, denom.val);\n     }\n-  else if (num < 0)\n+  else if (mpz_sgn (num.val) == -1)\n     {\n       complaint (_(\"unexpected negative value for DW_AT_GNU_numerator\"\n \t\t   \" in DIE at %s\"),\n \t\t sect_offset_str (die->sect_off));\n       return;\n     }\n-  else if (denom < 0)\n+  else if (mpz_sgn (denom.val) == -1)\n     {\n       complaint (_(\"unexpected negative value for DW_AT_GNU_denominator\"\n \t\t   \" in DIE at %s\"),\n \t\t sect_offset_str (die->sect_off));\n       return;\n     }\n \n-  *numerator = num;\n-  *denominator = denom;\n+  *numerator = std::move (num);\n+  *denominator = std::move (denom);\n }\n \n /* Assuming DIE corresponds to a fixed point type, finish the creation\n@@ -18263,14 +18281,6 @@ finish_fixed_point_type (struct type *type, struct die_info *die,\n \t\t\t struct dwarf2_cu *cu)\n {\n   struct attribute *attr;\n-  /* Numerator and denominator of our fixed-point type's scaling factor.\n-     The default is a scaling factor of 1, which we use as a fallback\n-     when we are not able to decode it (problem with the debugging info,\n-     unsupported forms, bug in GDB, etc...).  Using that as the default\n-     allows us to at least print the unscaled value, which might still\n-     be useful to a user.  */\n-  ULONGEST scale_num = 1;\n-  ULONGEST scale_denom = 1;\n \n   gdb_assert (type->code () == TYPE_CODE_FIXED_POINT\n \t      && TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_FIXED_POINT);\n@@ -18281,6 +18291,15 @@ finish_fixed_point_type (struct type *type, struct die_info *die,\n   if (!attr)\n     attr = dwarf2_attr (die, DW_AT_small, cu);\n \n+  /* Numerator and denominator of our fixed-point type's scaling factor.\n+     The default is a scaling factor of 1, which we use as a fallback\n+     when we are not able to decode it (problem with the debugging info,\n+     unsupported forms, bug in GDB, etc...).  Using that as the default\n+     allows us to at least print the unscaled value, which might still\n+     be useful to a user.  */\n+  gdb_mpz scale_num (1);\n+  gdb_mpz scale_denom (1);\n+\n   if (attr == nullptr)\n     {\n       /* Scaling factor not found.  Assume a scaling factor of 1,\n@@ -18292,16 +18311,16 @@ finish_fixed_point_type (struct type *type, struct die_info *die,\n   else if (attr->name == DW_AT_binary_scale)\n     {\n       LONGEST scale_exp = attr->constant_value (0);\n-      ULONGEST *num_or_denom = scale_exp > 0 ? &scale_num : &scale_denom;\n+      gdb_mpz *num_or_denom = scale_exp > 0 ? &scale_num : &scale_denom;\n \n-      *num_or_denom = 1 << std::abs (scale_exp);\n+      mpz_mul_2exp (num_or_denom->val, num_or_denom->val, std::abs (scale_exp));\n     }\n   else if (attr->name == DW_AT_decimal_scale)\n     {\n       LONGEST scale_exp = attr->constant_value (0);\n-      ULONGEST *num_or_denom = scale_exp > 0 ? &scale_num : &scale_denom;\n+      gdb_mpz *num_or_denom = scale_exp > 0 ? &scale_num : &scale_denom;\n \n-      *num_or_denom = uinteger_pow (10, std::abs (scale_exp));\n+      mpz_ui_pow_ui (num_or_denom->val, 10, std::abs (scale_exp));\n     }\n   else if (attr->name == DW_AT_small)\n     {\n@@ -18326,13 +18345,8 @@ finish_fixed_point_type (struct type *type, struct die_info *die,\n     }\n \n   gdb_mpq &scaling_factor = type->fixed_point_info ().scaling_factor;\n-\n-  gdb_mpz tmp_z (scale_num);\n-  mpz_set (mpq_numref (scaling_factor.val), tmp_z.val);\n-\n-  tmp_z = scale_denom;\n-  mpz_set (mpq_denref (scaling_factor.val), tmp_z.val);\n-\n+  mpz_set (mpq_numref (scaling_factor.val), scale_num.val);\n+  mpz_set (mpq_denref (scaling_factor.val), scale_denom.val);\n   mpq_canonicalize (scaling_factor.val);\n }\n \n@@ -18398,9 +18412,9 @@ has_zero_over_zero_small_attribute (struct die_info *die,\n   if (scale_die->tag != DW_TAG_constant)\n     return false;\n \n-  LONGEST num = 1, denom = 1;\n+  gdb_mpz num (1), denom (1);\n   get_dwarf2_rational_constant (scale_die, cu, &num, &denom);\n-  return (num == 0 && denom == 0);\n+  return mpz_sgn (num.val) == 0 && mpz_sgn (denom.val) == 0;\n }\n \n /* Initialise and return a floating point type of size BITS suitable for"
    }
  ]
}