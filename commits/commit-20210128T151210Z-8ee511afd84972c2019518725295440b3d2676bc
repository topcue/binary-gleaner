{
  "sha": "8ee511afd84972c2019518725295440b3d2676bc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGVlNTExYWZkODQ5NzJjMjAxOTUxODcyNTI5NTQ0MGIzZDI2NzZiYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-28T15:12:10Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-28T15:12:10Z"
    },
    "message": "gdb: rename get_type_arch to type::arch\n\n... and update all users.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (get_type_arch): Rename to...\n\t(struct type) <arch>: ... this, update all users.\n\nChange-Id: I0e3ef938a0afe798ac0da74a9976bbd1d082fc6f",
    "tree": {
      "sha": "80875b064bc5fd0a182bda2c123be6aade583907",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/80875b064bc5fd0a182bda2c123be6aade583907"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8ee511afd84972c2019518725295440b3d2676bc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ee511afd84972c2019518725295440b3d2676bc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8ee511afd84972c2019518725295440b3d2676bc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ee511afd84972c2019518725295440b3d2676bc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6ac373717c28cc2befebd1e926dc5fcf39dda39f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ac373717c28cc2befebd1e926dc5fcf39dda39f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6ac373717c28cc2befebd1e926dc5fcf39dda39f"
    }
  ],
  "stats": {
    "total": 211,
    "additions": 101,
    "deletions": 110
  },
  "files": [
    {
      "sha": "8a23b2129188ed7e047c70cc971707e55fe031a6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-28  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbtypes.h (get_type_arch): Rename to...\n+\t(struct type) <arch>: ... this, update all users.\n+\n 2021-01-28  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdbtypes.h (struct type) <arch>: Rename to..."
    },
    {
      "sha": "70296f97797ffaed0309b76a07853c15b0ad9186",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -4525,13 +4525,12 @@ ada_convert_actual (struct value *actual, struct type *formal_type0)\n static CORE_ADDR\n value_pointer (struct value *value, struct type *type)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n   unsigned len = TYPE_LENGTH (type);\n   gdb_byte *buf = (gdb_byte *) alloca (len);\n   CORE_ADDR addr;\n \n   addr = value_address (value);\n-  gdbarch_address_to_pointer (gdbarch, type, buf, addr);\n+  gdbarch_address_to_pointer (type->arch (), type, buf, addr);\n   addr = extract_unsigned_integer (buf, len, type_byte_order (type));\n   return addr;\n }\n@@ -11234,7 +11233,7 @@ ada_is_system_address_type (struct type *type)\n static struct type *\n ada_scaling_type (struct type *type)\n {\n-  return builtin_type (get_type_arch (type))->builtin_long_double;\n+  return builtin_type (type->arch ())->builtin_long_double;\n }\n \n /* Assuming that TYPE is the representation of an Ada fixed-point"
    },
    {
      "sha": "8af9ef0012f9b13513cc1e4ced81e8f4ffa98ea1",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -788,7 +788,7 @@ ada_value_print_num (struct value *val, struct ui_file *stream, int recurse,\n \t     so we have to work-around this deficiency by handling\n \t     System.Address values as a special case.  */\n \n-\t  struct gdbarch *gdbarch = get_type_arch (type);\n+\t  struct gdbarch *gdbarch = type->arch ();\n \t  struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n \t  CORE_ADDR addr = extract_typed_address (valaddr, ptr_type);\n "
    },
    {
      "sha": "f318a125319e2843226ea0ffd0ab86924034bf7e",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -1982,7 +1982,7 @@ update_watchpoint (struct watchpoint *b, int reparse)\n \t\t  for (tmp = &(b->loc); *tmp != NULL; tmp = &((*tmp)->next))\n \t\t    ;\n \t\t  *tmp = loc;\n-\t\t  loc->gdbarch = get_type_arch (value_type (v));\n+\t\t  loc->gdbarch = value_type (v)->arch ();\n \n \t\t  loc->pspace = frame_pspace;\n \t\t  loc->address = address_significant (loc->gdbarch, addr);"
    },
    {
      "sha": "626dbc49a8a43829da764d9cee71254e784173ba",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -149,7 +149,7 @@ c_emit_char (int c, struct type *type,\n {\n   const char *encoding;\n \n-  classify_type (type, get_type_arch (type), &encoding);\n+  classify_type (type, type->arch (), &encoding);\n   generic_emit_char (c, type, stream, quoter, encoding);\n }\n \n@@ -161,7 +161,7 @@ language_defn::printchar (int c, struct type *type,\n {\n   c_string_type str_type;\n \n-  str_type = classify_type (type, get_type_arch (type), NULL);\n+  str_type = classify_type (type, type->arch (), NULL);\n   switch (str_type)\n     {\n     case C_CHAR:\n@@ -199,7 +199,7 @@ c_printstr (struct ui_file *stream, struct type *type,\n   const char *type_encoding;\n   const char *encoding;\n \n-  str_type = (classify_type (type, get_type_arch (type), &type_encoding)\n+  str_type = (classify_type (type, type->arch (), &type_encoding)\n \t      & ~C_CHAR);\n   switch (str_type)\n     {\n@@ -279,7 +279,7 @@ c_get_string (struct value *value, gdb::unique_xmalloc_ptr<gdb_byte> *buffer,\n \n   if (! c_textual_element_type (element_type, 0))\n     goto error;\n-  classify_type (element_type, get_type_arch (element_type), charset);\n+  classify_type (element_type, element_type->arch (), charset);\n   width = TYPE_LENGTH (element_type);\n \n   /* If the string lives in GDB's memory instead of the inferior's,"
    },
    {
      "sha": "b861aafbdc9b6a2a93eed9235c4219402d2e20a3",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -528,7 +528,7 @@ c_type_print_modifier (struct type *type, struct ui_file *stream,\n     }\n \n   address_space_id\n-    = address_space_type_instance_flags_to_name (get_type_arch (type),\n+    = address_space_type_instance_flags_to_name (type->arch (),\n \t\t\t\t\t\t type->instance_flags ());\n   if (address_space_id)\n     {"
    },
    {
      "sha": "9c82869525f7b4969bf5b295f6eafe78b90a7f94",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -144,7 +144,7 @@ print_unpacked_pointer (struct type *type, struct type *elttype,\n \t\t\tconst struct value_print_options *options)\n {\n   int want_space = 0;\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n \n   if (elttype->code () == TYPE_CODE_FUNC)\n     {\n@@ -333,7 +333,6 @@ c_value_print_ptr (struct value *val, struct ui_file *stream, int recurse,\n     }\n \n   struct type *type = check_typedef (value_type (val));\n-  struct gdbarch *arch = get_type_arch (type);\n   const gdb_byte *valaddr = value_contents_for_printing (val);\n \n   if (options->vtblprint && cp_is_vtbl_ptr_type (type))\n@@ -344,7 +343,7 @@ c_value_print_ptr (struct value *val, struct ui_file *stream, int recurse,\n \t TYPE_CODE_STRUCT.)  */\n       CORE_ADDR addr = extract_typed_address (valaddr, type);\n \n-      print_function_pointer_address (options, arch, addr, stream);\n+      print_function_pointer_address (options, type->arch (), addr, stream);\n     }\n   else\n     {\n@@ -373,13 +372,12 @@ c_value_print_struct (struct value *val, struct ui_file *stream, int recurse,\n       /* Print vtable entry - we only get here if NOT using\n \t -fvtable_thunks.  (Otherwise, look under\n \t TYPE_CODE_PTR.)  */\n-      struct gdbarch *gdbarch = get_type_arch (type);\n       int offset = TYPE_FIELD_BITPOS (type, VTBL_FNADDR_OFFSET) / 8;\n       struct type *field_type = type->field (VTBL_FNADDR_OFFSET).type ();\n       const gdb_byte *valaddr = value_contents_for_printing (val);\n       CORE_ADDR addr = extract_typed_address (valaddr + offset, field_type);\n \n-      print_function_pointer_address (options, gdbarch, addr, stream);\n+      print_function_pointer_address (options, type->arch (), addr, stream);\n     }\n   else\n     cp_print_value_fields (val, stream, recurse, options, NULL, 0);"
    },
    {
      "sha": "d303c83694da6e031377f049a121617e4686f1c2",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -324,7 +324,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \t\t      i_offset += value_embedded_offset (val);\n \t\t      addr = extract_typed_address (valaddr + i_offset, i_type);\n \t\t      print_function_pointer_address (opts,\n-\t\t\t\t\t\t      get_type_arch (type),\n+\t\t\t\t\t\t      type->arch (),\n \t\t\t\t\t\t      addr, stream);\n \t\t    }\n \t\t}"
    },
    {
      "sha": "49a32be7530f69cd421668456fb8c52ad15067b6",
      "filename": "gdb/f-array-walker.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-array-walker.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-array-walker.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-array-walker.h?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -52,8 +52,8 @@ class fortran_array_offset_calculator\n       m_stride = type_length_units (elt_type);\n     else\n       {\n-\tstruct gdbarch *arch = get_type_arch (elt_type);\n-\tint unit_size = gdbarch_addressable_memory_unit_size (arch);\n+\tint unit_size\n+\t  = gdbarch_addressable_memory_unit_size (elt_type->arch ());\n \tm_stride /= (unit_size * 8);\n       }\n   };"
    },
    {
      "sha": "bd6ef20f9b12c295516b953fd2e169a191fc20f7",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -82,7 +82,7 @@ f_language::get_encoding (struct type *type)\n   switch (TYPE_LENGTH (type))\n     {\n     case 1:\n-      encoding = target_charset (get_type_arch (type));\n+      encoding = target_charset (type->arch ());\n       break;\n     case 4:\n       if (type_byte_order (type) == BFD_ENDIAN_BIG)\n@@ -1416,8 +1416,8 @@ fortran_adjust_dynamic_array_base_address_hack (struct type *type,\n \tstride = type_length_units (elt_type);\n       else\n \t{\n-\t  struct gdbarch *arch = get_type_arch (elt_type);\n-\t  int unit_size = gdbarch_addressable_memory_unit_size (arch);\n+\t  int unit_size\n+\t    = gdbarch_addressable_memory_unit_size (elt_type->arch ());\n \t  stride /= (unit_size * 8);\n \t}\n "
    },
    {
      "sha": "976fc387b5f3607e99083b02c918ff0df46e0624",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -242,8 +242,8 @@ f_language::f_type_print_varspec_suffix (struct type *type,\n \t  fprintf_filtered (stream, \") \");\n \tfprintf_filtered (stream, \"(\");\n \tif (nfields == 0 && type->is_prototyped ())\n-\t  print_type (builtin_f_type (get_type_arch (type))->builtin_void,\n-\t\t\t\"\", stream, -1, 0, 0);\n+\t  print_type (builtin_f_type (type->arch ())->builtin_void,\n+\t\t      \"\", stream, -1, 0, 0);\n \telse\n \t  for (i = 0; i < nfields; i++)\n \t    {\n@@ -342,8 +342,7 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \n     case TYPE_CODE_VOID:\n       {\n-\tgdbarch *gdbarch = get_type_arch (type);\n-\tstruct type *void_type = builtin_f_type (gdbarch)->builtin_void;\n+\tstruct type *void_type = builtin_f_type (type->arch ())->builtin_void;\n \tfprintf_filtered (stream, \"%*s%s\", level, \"\", void_type->name ());\n       }\n       break;"
    },
    {
      "sha": "240daaf34f9cc8bfc8bef5b8a52806e1a3a285e5",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -218,7 +218,7 @@ f_language::value_print_inner (struct value *val, struct ui_file *stream,\n \t\t\t       const struct value_print_options *options) const\n {\n   struct type *type = check_typedef (value_type (val));\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   int printed_field = 0; /* Number of fields printed.  */\n   struct type *elttype;\n   CORE_ADDR addr;"
    },
    {
      "sha": "6abcd3a946f06c0aa2112a36712146c215a6878d",
      "filename": "gdb/findvar.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/findvar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/findvar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/findvar.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -158,7 +158,7 @@ extract_typed_address (const gdb_byte *buf, struct type *type)\n \t\t    _(\"extract_typed_address: \"\n \t\t    \"type is not a pointer or reference\"));\n \n-  return gdbarch_pointer_to_address (get_type_arch (type), type, buf);\n+  return gdbarch_pointer_to_address (type->arch (), type, buf);\n }\n \n /* All 'store' functions accept a host-format integer and store a\n@@ -211,7 +211,7 @@ store_typed_address (gdb_byte *buf, struct type *type, CORE_ADDR addr)\n \t\t    _(\"store_typed_address: \"\n \t\t    \"type is not a pointer or reference\"));\n \n-  gdbarch_address_to_pointer (get_type_arch (type), type, buf, addr);\n+  gdbarch_address_to_pointer (type->arch (), type, buf, addr);\n }\n \n /* Copy a value from SOURCE of size SOURCE_SIZE bytes to DEST of size DEST_SIZE"
    },
    {
      "sha": "4dd1a6a64ec27590fefd49bd0f1a80fd2b9548d3",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 21,
      "deletions": 29,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -232,24 +232,23 @@ alloc_type_copy (const struct type *type)\n     return alloc_type_arch (type->arch_owner ());\n }\n \n-/* If TYPE is gdbarch-associated, return that architecture.\n-   If TYPE is objfile-associated, return that objfile's architecture.  */\n+/* See gdbtypes.h.  */\n \n-struct gdbarch *\n-get_type_arch (const struct type *type)\n+gdbarch *\n+type::arch () const\n {\n   struct gdbarch *arch;\n \n-  if (type->is_objfile_owned ())\n-    arch = type->objfile_owner ()->arch ();\n+  if (this->is_objfile_owned ())\n+    arch = this->objfile_owner ()->arch ();\n   else\n-    arch = type->arch_owner ();\n+    arch = this->arch_owner ();\n \n   /* The ARCH can be NULL if TYPE is associated with neither an objfile nor\n      a gdbarch, however, this is very rare, and even then, in most cases\n-     that get_type_arch is called, we assume that a non-NULL value is\n+     that type::arch is called, we assume that a non-NULL value is\n      returned.  */\n-  gdb_assert (arch != NULL);\n+  gdb_assert (arch != nullptr);\n   return arch;\n }\n \n@@ -273,8 +272,7 @@ get_target_type (struct type *type)\n unsigned int\n type_length_units (struct type *type)\n {\n-  struct gdbarch *arch = get_type_arch (type);\n-  int unit_size = gdbarch_addressable_memory_unit_size (arch);\n+  int unit_size = gdbarch_addressable_memory_unit_size (type->arch ());\n \n   return TYPE_LENGTH (type) / unit_size;\n }\n@@ -291,7 +289,7 @@ alloc_type_instance (struct type *oldtype)\n   /* Allocate the structure.  */\n \n   if (!oldtype->is_objfile_owned ())\n-    type = GDBARCH_OBSTACK_ZALLOC (get_type_arch (oldtype), struct type);\n+    type = GDBARCH_OBSTACK_ZALLOC (oldtype->arch_owner (), struct type);\n   else\n     type = OBSTACK_ZALLOC (&oldtype->objfile_owner ()->objfile_obstack,\n \t\t\t   struct type);\n@@ -371,8 +369,7 @@ make_pointer_type (struct type *type, struct type **typeptr)\n \n   /* FIXME!  Assumes the machine has only one representation for pointers!  */\n \n-  TYPE_LENGTH (ntype)\n-    = gdbarch_ptr_bit (get_type_arch (type)) / TARGET_CHAR_BIT;\n+  TYPE_LENGTH (ntype) = gdbarch_ptr_bit (type->arch ()) / TARGET_CHAR_BIT;\n   ntype->set_code (TYPE_CODE_PTR);\n \n   /* Mark pointers as unsigned.  The target converts between pointers\n@@ -455,8 +452,7 @@ make_reference_type (struct type *type, struct type **typeptr,\n      references, and that it matches the (only) representation for\n      pointers!  */\n \n-  TYPE_LENGTH (ntype) =\n-    gdbarch_ptr_bit (get_type_arch (type)) / TARGET_CHAR_BIT;\n+  TYPE_LENGTH (ntype) = gdbarch_ptr_bit (type->arch ()) / TARGET_CHAR_BIT;\n   ntype->set_code (refcode);\n \n   *reftype = ntype;\n@@ -1617,8 +1613,7 @@ smash_to_memberptr_type (struct type *type, struct type *self_type,\n   set_type_self_type (type, self_type);\n   /* Assume that a data member pointer is the same size as a normal\n      pointer.  */\n-  TYPE_LENGTH (type)\n-    = gdbarch_ptr_bit (get_type_arch (to_type)) / TARGET_CHAR_BIT;\n+  TYPE_LENGTH (type) = gdbarch_ptr_bit (to_type->arch ()) / TARGET_CHAR_BIT;\n }\n \n /* Smash TYPE to be a type of pointer to methods type TO_TYPE.\n@@ -2228,7 +2223,7 @@ resolve_dynamic_range (struct type *dyn_range_type,\n \t I really don't think this is going to work with current GDB, the\n \t array indexing code in GDB seems to be pretty heavily tied to byte\n \t offsets right now.  Assuming 8 bits in a byte.  */\n-      struct gdbarch *gdbarch = get_type_arch (dyn_range_type);\n+      struct gdbarch *gdbarch = dyn_range_type->arch ();\n       int unit_size = gdbarch_addressable_memory_unit_size (gdbarch);\n       if (!byte_stride_p && (value % (unit_size * 8)) != 0)\n \terror (_(\"bit strides that are not a multiple of the byte size \"\n@@ -2903,7 +2898,7 @@ check_typedef (struct type *type)\n \t  if (sym)\n \t    TYPE_TARGET_TYPE (type) = SYMBOL_TYPE (sym);\n \t  else\t\t\t\t\t/* TYPE_CODE_UNDEF */\n-\t    TYPE_TARGET_TYPE (type) = alloc_type_arch (get_type_arch (type));\n+\t    TYPE_TARGET_TYPE (type) = alloc_type_arch (type->arch ());\n \t}\n       type = TYPE_TARGET_TYPE (type);\n \n@@ -3071,7 +3066,7 @@ safe_parse_type (struct gdbarch *gdbarch, const char *p, int length)\n static void\n check_stub_method (struct type *type, int method_id, int signature_id)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   struct fn_field *f;\n   char *mangled_name = gdb_mangle_name (type, method_id, signature_id);\n   char *demangled_name = gdb_demangle (mangled_name,\n@@ -3510,8 +3505,7 @@ type_align (struct type *type)\n     return raw_align;\n \n   /* Allow the architecture to provide an alignment.  */\n-  struct gdbarch *arch = get_type_arch (type);\n-  ULONGEST align = gdbarch_type_align (arch, type);\n+  ULONGEST align = gdbarch_type_align (type->arch (), type);\n   if (align != 0)\n     return align;\n \n@@ -3878,7 +3872,7 @@ is_unique_ancestor (struct type *base, struct value *val)\n enum bfd_endian\n type_byte_order (const struct type *type)\n {\n-  bfd_endian byteorder = gdbarch_byte_order (get_type_arch (type));\n+  bfd_endian byteorder = gdbarch_byte_order (type->arch ());\n   if (type->endianity_is_not_default ())\n     {\n       if (byteorder == BFD_ENDIAN_BIG)\n@@ -5505,7 +5499,7 @@ copy_type_recursive (struct objfile *objfile,\n   if (*slot != NULL)\n     return ((struct type_pair *) *slot)->newobj;\n \n-  new_type = alloc_type_arch (get_type_arch (type));\n+  new_type = alloc_type_arch (type->arch ());\n \n   /* We must add the new type to the hash table immediately, in case\n      we encounter this type again during a recursive call below.  */\n@@ -5518,7 +5512,7 @@ copy_type_recursive (struct objfile *objfile,\n      copy the entire thing and then update specific fields as needed.  */\n   *TYPE_MAIN_TYPE (new_type) = *TYPE_MAIN_TYPE (type);\n \n-  new_type->set_owner (get_type_arch (type));\n+  new_type->set_owner (type->arch ());\n \n   if (type->name ())\n     new_type->set_name (xstrdup (type->name ()));\n@@ -5844,10 +5838,8 @@ append_flags_type_field (struct type *type, int start_bitpos, int nr_bits,\n void\n append_flags_type_flag (struct type *type, int bitpos, const char *name)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n-\n   append_flags_type_field (type, bitpos, 1,\n-\t\t\t   builtin_type (gdbarch)->builtin_bool,\n+\t\t\t   builtin_type (type->arch ())->builtin_bool,\n \t\t\t   name);\n }\n "
    },
    {
      "sha": "40b1aed031e70f303ff55377990fe6dbdc6fc4cf",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -1282,6 +1282,13 @@ struct type\n     return this->main_type->m_owner.gdbarch;\n   }\n \n+  /* Return the type's architecture.  For types owned by an\n+     architecture, that architecture is returned.  For types owned by an\n+     objfile, that objfile's architecture is returned.\n+\n+     The return value is always non-nullptr.  */\n+  gdbarch *arch () const;\n+\n   /* * Return true if this is an integer type whose logical (bit) size\n      differs from its storage size; false otherwise.  Always return\n      false for non-integer (i.e., non-TYPE_SPECIFIC_INT) types.  */\n@@ -2258,12 +2265,6 @@ extern struct type *alloc_type (struct objfile *);\n extern struct type *alloc_type_arch (struct gdbarch *);\n extern struct type *alloc_type_copy (const struct type *);\n \n-/* * Return the type's architecture.  For types owned by an\n-   architecture, that architecture is returned.  For types owned by an\n-   objfile, that objfile's architecture is returned.  */\n-\n-extern struct gdbarch *get_type_arch (const struct type *);\n-\n /* * This returns the target type (or NULL) of TYPE, also skipping\n    past typedefs.  */\n \n@@ -2661,9 +2662,9 @@ extern bool is_fixed_point_type (struct type *type);\n extern void allocate_fixed_point_type_info (struct type *type);\n \n /* * When the type includes explicit byte ordering, return that.\n-   Otherwise, the byte ordering from gdbarch_byte_order for \n-   get_type_arch is returned.  */\n-   \n+   Otherwise, the byte ordering from gdbarch_byte_order for\n+   the type's arch is returned.  */\n+\n extern enum bfd_endian type_byte_order (const struct type *type);\n \n /* A flag to enable printing of debugging information of C++"
    },
    {
      "sha": "8461535c6ec928d2c1d075cff8cb88dea07aa453",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -308,7 +308,7 @@ gnuv3_rtti_type (struct value *value,\n     return NULL;\n \n   /* Determine architecture.  */\n-  gdbarch = get_type_arch (values_type);\n+  gdbarch = values_type->arch ();\n \n   if (using_enc_p)\n     *using_enc_p = 0;\n@@ -422,7 +422,7 @@ gnuv3_virtual_fn_field (struct value **value_p,\n     error (_(\"Only classes can have virtual functions.\"));\n \n   /* Determine architecture.  */\n-  gdbarch = get_type_arch (values_type);\n+  gdbarch = values_type->arch ();\n \n   /* Cast our value to the base class which defines this virtual\n      function.  This takes care of any necessary `this'\n@@ -454,7 +454,7 @@ gnuv3_baseclass_offset (struct type *type, int index,\n   long int cur_base_offset, base_offset;\n \n   /* Determine architecture.  */\n-  gdbarch = get_type_arch (type);\n+  gdbarch = type->arch ();\n   ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n \n   /* If it isn't a virtual base, this is easy.  The offset is in the\n@@ -611,7 +611,7 @@ gnuv3_print_method_ptr (const gdb_byte *contents,\n \t\t\tstruct ui_file *stream)\n {\n   struct type *self_type = TYPE_SELF_TYPE (type);\n-  struct gdbarch *gdbarch = get_type_arch (self_type);\n+  struct gdbarch *gdbarch = self_type->arch ();\n   CORE_ADDR ptr_value;\n   LONGEST adjustment;\n   int vbit;\n@@ -691,9 +691,7 @@ gnuv3_print_method_ptr (const gdb_byte *contents,\n static int\n gnuv3_method_ptr_size (struct type *type)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n-\n-  return 2 * TYPE_LENGTH (builtin_type (gdbarch)->builtin_data_ptr);\n+  return 2 * TYPE_LENGTH (builtin_type (type->arch ())->builtin_data_ptr);\n }\n \n /* GNU v3 implementation of cplus_make_method_ptr.  */\n@@ -702,7 +700,7 @@ static void\n gnuv3_make_method_ptr (struct type *type, gdb_byte *contents,\n \t\t       CORE_ADDR value, int is_virtual)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   int size = TYPE_LENGTH (builtin_type (gdbarch)->builtin_data_ptr);\n   enum bfd_endian byte_order = type_byte_order (type);\n \n@@ -745,7 +743,7 @@ gnuv3_method_ptr_to_value (struct value **this_p, struct value *method_ptr)\n   method_type = TYPE_TARGET_TYPE (check_typedef (value_type (method_ptr)));\n \n   /* Extract the pointer to member.  */\n-  gdbarch = get_type_arch (self_type);\n+  gdbarch = self_type->arch ();\n   vbit = gnuv3_decode_method_ptr (gdbarch, contents, &ptr_value, &adjustment);\n \n   /* First convert THIS to match the containing type of the pointer to\n@@ -978,7 +976,7 @@ gnuv3_print_vtable (struct value *value)\n       type = check_typedef (value_type (value));\n     }\n \n-  gdbarch = get_type_arch (type);\n+  gdbarch = type->arch ();\n \n   vtable = NULL;\n   if (type->code () == TYPE_CODE_STRUCT)\n@@ -1107,7 +1105,7 @@ gnuv3_get_typeid (struct value *value)\n \n   /* Ignore top-level cv-qualifiers.  */\n   type = make_cv_type (0, 0, type, NULL);\n-  gdbarch = get_type_arch (type);\n+  gdbarch = type->arch ();\n \n   type_name = type_to_string (type);\n   if (type_name.empty ())\n@@ -1161,7 +1159,7 @@ gnuv3_get_typeid (struct value *value)\n static std::string\n gnuv3_get_typename_from_type_info (struct value *type_info_ptr)\n {\n-  struct gdbarch *gdbarch = get_type_arch (value_type (type_info_ptr));\n+  struct gdbarch *gdbarch = value_type (type_info_ptr)->arch ();\n   struct bound_minimal_symbol typeinfo_sym;\n   CORE_ADDR addr;\n   const char *symname;"
    },
    {
      "sha": "e04ea6b45faa1afc5c52394c0e304863add9f5fd",
      "filename": "gdb/go-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/go-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/go-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -43,7 +43,7 @@ print_go_string (struct type *type,\n \t\t struct value *val,\n \t\t const struct value_print_options *options)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   struct type *elt_ptr_type = type->field (0).type ();\n   struct type *elt_type = TYPE_TARGET_TYPE (elt_ptr_type);\n   LONGEST length;"
    },
    {
      "sha": "605615e62937a5a01d4d3d77dac65698313e2e45",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -949,7 +949,7 @@ gdbscm_apply_val_pretty_printer (const struct extension_language_defn *extlang,\n \t\t\t\t const struct language_defn *language)\n {\n   struct type *type = value_type (value);\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   SCM exception = SCM_BOOL_F;\n   SCM printer = SCM_BOOL_F;\n   SCM val_obj = SCM_BOOL_F;"
    },
    {
      "sha": "59995169cd0529c28fb2a53f7757e3aebf20a3ce",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -671,7 +671,7 @@ gdbscm_value_subscript (SCM self, SCM index_scm)\n       struct value *index\n \t= vlscm_convert_value_from_scheme (FUNC_NAME, SCM_ARG2, index_scm,\n \t\t\t\t\t   &except_scm,\n-\t\t\t\t\t   get_type_arch (type),\n+\t\t\t\t\t   type->arch (),\n \t\t\t\t\t   current_language);\n       if (index == NULL)\n \treturn except_scm;"
    },
    {
      "sha": "2332f293a1e46d70064a049f6f60d237cdbce1ec",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -251,7 +251,7 @@ find_function_addr (struct value *function,\n \t\t    struct type **function_type)\n {\n   struct type *ftype = check_typedef (value_type (function));\n-  struct gdbarch *gdbarch = get_type_arch (ftype);\n+  struct gdbarch *gdbarch = ftype->arch ();\n   struct type *value_type = NULL;\n   /* Initialize it just to avoid a GCC false warning.  */\n   CORE_ADDR funaddr = 0;"
    },
    {
      "sha": "be21cbb014a036ff88fc7c0d4c551a7f92c64644",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -186,7 +186,7 @@ print_unpacked_pointer (struct type *type,\n \t\t\tconst struct value_print_options *options,\n \t\t\tstruct ui_file *stream)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   struct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n   int want_space = 0;\n \n@@ -228,7 +228,7 @@ print_variable_at_address (struct type *type,\n \t\t\t   int recurse,\n \t\t\t   const struct value_print_options *options)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   CORE_ADDR addr = unpack_pointer (type, valaddr);\n   struct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n "
    },
    {
      "sha": "9a52fe14ba8fec6544217410a1953f99897fbc20",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -70,7 +70,7 @@ pascal_language::value_print_inner (struct value *val,\n \n {\n   struct type *type = check_typedef (value_type (val));\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   enum bfd_endian byte_order = type_byte_order (type);\n   unsigned int i = 0;\t/* Number of characters printed */\n   unsigned len;"
    },
    {
      "sha": "332d971a05cd60ccdbf016dae013f6e08ddc62be",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -304,7 +304,7 @@ print_formatted (struct value *val, int size,\n \t  /* We often wrap here if there are long symbolic names.  */\n \t  wrap_here (\"    \");\n \t  next_address = (value_address (val)\n-\t\t\t  + gdb_print_insn (get_type_arch (type),\n+\t\t\t  + gdb_print_insn (type->arch (),\n \t\t\t\t\t    value_address (val), stream,\n \t\t\t\t\t    &branch_delay_insns));\n \t  return;\n@@ -331,7 +331,7 @@ print_formatted (struct value *val, int size,\n static struct type *\n float_type_from_length (struct type *type)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   const struct builtin_type *builtin = builtin_type (gdbarch);\n \n   if (TYPE_LENGTH (type) == TYPE_LENGTH (builtin->builtin_float))\n@@ -353,7 +353,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n \t\t\tconst struct value_print_options *options,\n \t\t\tint size, struct ui_file *stream)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   unsigned int len = TYPE_LENGTH (type);\n   enum bfd_endian byte_order = type_byte_order (type);\n \n@@ -2370,7 +2370,7 @@ printf_wide_c_string (struct ui_file *stream, const char *format,\n {\n   const gdb_byte *str;\n   size_t len;\n-  struct gdbarch *gdbarch = get_type_arch (value_type (value));\n+  struct gdbarch *gdbarch = value_type (value)->arch ();\n   struct type *wctype = lookup_typename (current_language,\n \t\t\t\t\t \"wchar_t\", NULL, 0);\n   int wcwidth = TYPE_LENGTH (wctype);\n@@ -2438,7 +2438,7 @@ printf_floating (struct ui_file *stream, const char *format,\n {\n   /* Parameter data.  */\n   struct type *param_type = value_type (value);\n-  struct gdbarch *gdbarch = get_type_arch (param_type);\n+  struct gdbarch *gdbarch = param_type->arch ();\n \n   /* Determine target type corresponding to the format string.  */\n   struct type *fmt_type;\n@@ -2644,8 +2644,7 @@ ui_printf (const char *arg, struct ui_file *stream)\n \t    break;\n \t  case wide_char_arg:\n \t    {\n-\t      struct gdbarch *gdbarch\n-\t\t= get_type_arch (value_type (val_args[i]));\n+\t      struct gdbarch *gdbarch = value_type (val_args[i])->arch ();\n \t      struct type *wctype = lookup_typename (current_language,\n \t\t\t\t\t\t     \"wchar_t\", NULL, 0);\n \t      struct type *valtype;"
    },
    {
      "sha": "7c0fdaa9e70315c10f099c5784401094010d6687",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -564,7 +564,7 @@ gdbpy_apply_val_pretty_printer (const struct extension_language_defn *extlang,\n \t\t\t\tconst struct language_defn *language)\n {\n   struct type *type = value_type (value);\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   enum string_repr_result print_result;\n \n   if (value_lazy (value))"
    },
    {
      "sha": "80f1f59dd64c2c9a8064a57857fb2df50b65f885",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -516,7 +516,7 @@ rust_language::value_print_inner\n \t       that.  */\n \t    struct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n \t    CORE_ADDR addr = value_as_address (val);\n-\t    struct gdbarch *arch = get_type_arch (type);\n+\t    struct gdbarch *arch = type->arch ();\n \n \t    if (opts.addressprint)\n \t      {\n@@ -1919,7 +1919,7 @@ rust_language::emitchar (int ch, struct type *chtype,\n {\n   if (!rust_chartype_p (chtype))\n     generic_emit_char (ch, chtype, stream, quoter,\n-\t\t       target_charset (get_type_arch (chtype)));\n+\t\t       target_charset (chtype->arch ()));\n   else if (ch == '\\\\' || ch == quoter)\n     fprintf_filtered (stream, \"\\\\%c\", ch);\n   else if (ch == '\\n')"
    },
    {
      "sha": "315030988f45a755b861eac0a6f89f3fa57dec06",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -202,7 +202,7 @@ value_subscripted_rvalue (struct value *array, LONGEST index, LONGEST lowerbound\n   LONGEST stride = array_type->bit_stride ();\n   if (stride != 0)\n     {\n-      struct gdbarch *arch = get_type_arch (elt_type);\n+      struct gdbarch *arch = elt_type->arch ();\n       int unit_size = gdbarch_addressable_memory_unit_size (arch);\n       elt_size = stride / (unit_size * 8);\n     }\n@@ -539,7 +539,7 @@ value_x_binop (struct value *arg1, struct value *arg2, enum exp_opcode op,\n struct value *\n value_x_unop (struct value *arg1, enum exp_opcode op, enum noside noside)\n {\n-  struct gdbarch *gdbarch = get_type_arch (value_type (arg1));\n+  struct gdbarch *gdbarch = value_type (arg1)->arch ();\n   char *ptr;\n   char tstr[13], mangle_tstr[13];\n   int static_memfuncp, nargs;\n@@ -900,7 +900,7 @@ fixed_point_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n   struct type *type2 = check_typedef (value_type (arg2));\n   const struct language_defn *language = current_language;\n \n-  struct gdbarch *gdbarch = get_type_arch (type1);\n+  struct gdbarch *gdbarch = type1->arch ();\n   struct value *val;\n \n   gdb_mpq v1, v2, res;\n@@ -1967,7 +1967,7 @@ value_complement (struct value *arg1)\n int\n value_bit_index (struct type *type, const gdb_byte *valaddr, int index)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   LONGEST low_bound, high_bound;\n   LONGEST word;\n   unsigned rel_index;"
    },
    {
      "sha": "fec821ad932c4d98d2a0e716a79439b32e48fbba",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -590,7 +590,7 @@ value_cast (struct type *type, struct value *arg2)\n \t otherwise occur when dealing with a target having two byte\n \t pointers and four byte addresses.  */\n \n-      int addr_bit = gdbarch_addr_bit (get_type_arch (type2));\n+      int addr_bit = gdbarch_addr_bit (type2->arch ());\n       LONGEST longest = value_as_long (arg2);\n \n       if (addr_bit < sizeof (LONGEST) * HOST_CHAR_BIT)\n@@ -1100,7 +1100,7 @@ value_assign (struct value *toval, struct value *fromval)\n     {\n     case lval_internalvar:\n       set_internalvar (VALUE_INTERNALVAR (toval), fromval);\n-      return value_of_internalvar (get_type_arch (type),\n+      return value_of_internalvar (type->arch (),\n \t\t\t\t   VALUE_INTERNALVAR (toval));\n \n     case lval_internalvar_component:"
    },
    {
      "sha": "340a329f9d0f9af334b7619d8091d80507b6865c",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -408,7 +408,7 @@ print_unpacked_pointer (struct type *type, struct type *elttype,\n \t\t\tCORE_ADDR address, struct ui_file *stream,\n \t\t\tconst struct value_print_options *options)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n \n   if (elttype->code () == TYPE_CODE_FUNC)\n     {\n@@ -483,7 +483,7 @@ static void\n print_ref_address (struct type *type, const gdb_byte *address_buffer,\n \t\t  int embedded_offset, struct ui_file *stream)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n \n   if (address_buffer != NULL)\n     {\n@@ -673,7 +673,7 @@ generic_val_print_enum (struct type *type,\n \t\t\tconst struct value_print_options *options)\n {\n   LONGEST val;\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   int unit_size = gdbarch_addressable_memory_unit_size (gdbarch);\n \n   gdb_assert (!options->format);\n@@ -694,7 +694,7 @@ generic_val_print_func (struct type *type,\n \t\t\tstruct value *original_value,\n \t\t\tconst struct value_print_options *options)\n {\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n \n   gdb_assert (!options->format);\n \n@@ -1182,7 +1182,7 @@ val_print_type_code_flags (struct type *type, struct value *original_value,\n \t\t\t     + embedded_offset);\n   ULONGEST val = unpack_long (type, valaddr);\n   int field, nfields = type->num_fields ();\n-  struct gdbarch *gdbarch = get_type_arch (type);\n+  struct gdbarch *gdbarch = type->arch ();\n   struct type *bool_type = builtin_type (gdbarch)->builtin_bool;\n \n   fputs_filtered (\"[\", stream);\n@@ -2713,7 +2713,7 @@ val_print_string (struct type *elttype, const char *encoding,\n   unsigned int fetchlimit;\t/* Maximum number of chars to print.  */\n   int bytes_read;\n   gdb::unique_xmalloc_ptr<gdb_byte> buffer;\t/* Dynamically growable fetch buffer.  */\n-  struct gdbarch *gdbarch = get_type_arch (elttype);\n+  struct gdbarch *gdbarch = elttype->arch ();\n   enum bfd_endian byte_order = type_byte_order (elttype);\n   int width = TYPE_LENGTH (elttype);\n "
    },
    {
      "sha": "4135d5ec33939f80d16d431a9a2990f6a497ae08",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -363,7 +363,7 @@ struct value\n struct gdbarch *\n get_value_arch (const struct value *value)\n {\n-  return get_type_arch (value_type (value));\n+  return value_type (value)->arch ();\n }\n \n int\n@@ -2674,7 +2674,7 @@ value_as_long (struct value *val)\n CORE_ADDR\n value_as_address (struct value *val)\n {\n-  struct gdbarch *gdbarch = get_type_arch (value_type (val));\n+  struct gdbarch *gdbarch = value_type (val)->arch ();\n \n   /* Assume a CORE_ADDR can fit in a LONGEST (for now).  Not sure\n      whether we want this to be true eventually.  */"
    },
    {
      "sha": "7928d90bef3959e95e905ac33cdd68fb80d90514",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ee511afd84972c2019518725295440b3d2676bc/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ee511afd84972c2019518725295440b3d2676bc/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=8ee511afd84972c2019518725295440b3d2676bc",
      "patch": "@@ -2207,7 +2207,7 @@ varobj_value_get_print_value (struct value *value,\n \n \t\t\t  thevalue = std::string (s.get ());\n \t\t\t  len = thevalue.size ();\n-\t\t\t  gdbarch = get_type_arch (value_type (value));\n+\t\t\t  gdbarch = value_type (value)->arch ();\n \t\t\t  type = builtin_type (gdbarch)->builtin_char;\n \n \t\t\t  if (!string_print)"
    }
  ]
}