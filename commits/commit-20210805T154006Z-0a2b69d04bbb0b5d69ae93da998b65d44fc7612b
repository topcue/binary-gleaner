{
  "sha": "0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGEyYjY5ZDA0YmJiMGI1ZDY5YWU5M2RhOTk4YjY1ZDQ0ZmM3NjEyYg==",
  "commit": {
    "author": {
      "name": "Zoran Zaric",
      "email": "zoran.zaric@amd.com",
      "date": "2020-09-15T10:55:55Z"
    },
    "committer": {
      "name": "Zoran Zaric",
      "email": "zoran.zaric@amd.com",
      "date": "2021-08-05T15:40:06Z"
    },
    "message": "Move push_dwarf_reg_entry_value to expr.c\n\nFollowing the idea of merging the evaluators, the\npush_dwarf_reg_entry_value method can be moved from\ndwarf_expr_executor and dwarf_evaluate_loc_desc classes\nto their base class dwarf_expr_context.\n\ngdb/ChangeLog:\n\n\t* dwarf2/expr.c\n        (dwarf_expr_context::push_dwarf_reg_entry_value): Move from\n\tdwarf_evaluate_loc_desc.\n\t* dwarf2/frame.c\n\t(dwarf_expr_executor::push_dwarf_reg_entry_value): Remove\n\tmethod.\n\t* dwarf2/loc.c (dwarf_expr_reg_to_entry_parameter): Expose\n\tfunction.\n\t(dwarf_evaluate_loc_desc::push_dwarf_reg_entry_value): Move to\n\tdwarf_expr_context.\n\t* dwarf2/loc.h (dwarf_expr_reg_to_entry_parameter): Expose\n\tfunction.",
    "tree": {
      "sha": "81fd0e8c389cd655910f03359045913db396bafd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/81fd0e8c389cd655910f03359045913db396bafd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/comments",
  "author": {
    "login": "ZaricZoran",
    "id": 81635026,
    "node_id": "MDQ6VXNlcjgxNjM1MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/81635026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZaricZoran",
    "html_url": "https://github.com/ZaricZoran",
    "followers_url": "https://api.github.com/users/ZaricZoran/followers",
    "following_url": "https://api.github.com/users/ZaricZoran/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZaricZoran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZaricZoran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZaricZoran/subscriptions",
    "organizations_url": "https://api.github.com/users/ZaricZoran/orgs",
    "repos_url": "https://api.github.com/users/ZaricZoran/repos",
    "events_url": "https://api.github.com/users/ZaricZoran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZaricZoran/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ZaricZoran",
    "id": 81635026,
    "node_id": "MDQ6VXNlcjgxNjM1MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/81635026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZaricZoran",
    "html_url": "https://github.com/ZaricZoran",
    "followers_url": "https://api.github.com/users/ZaricZoran/followers",
    "following_url": "https://api.github.com/users/ZaricZoran/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZaricZoran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZaricZoran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZaricZoran/subscriptions",
    "organizations_url": "https://api.github.com/users/ZaricZoran/orgs",
    "repos_url": "https://api.github.com/users/ZaricZoran/repos",
    "events_url": "https://api.github.com/users/ZaricZoran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZaricZoran/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3c7c57cdc06412d9c81dcc2d89ff2ab4e4704708",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c7c57cdc06412d9c81dcc2d89ff2ab4e4704708",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3c7c57cdc06412d9c81dcc2d89ff2ab4e4704708"
    }
  ],
  "stats": {
    "total": 155,
    "additions": 72,
    "deletions": 83
  },
  "files": [
    {
      "sha": "a90ebf43d65993ff9b38532dd056a080c5729de2",
      "filename": "gdb/dwarf2/expr.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.c?ref=0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
      "patch": "@@ -258,6 +258,56 @@ dwarf_expr_context::read_mem (gdb_byte *buf, CORE_ADDR addr,\n   read_memory (addr, buf, length);\n }\n \n+/* See expr.h.  */\n+\n+void\n+dwarf_expr_context::push_dwarf_reg_entry_value (call_site_parameter_kind kind,\n+\t\t\t\t\t\tcall_site_parameter_u kind_u,\n+\t\t\t\t\t\tint deref_size)\n+{\n+  ensure_have_per_cu (this->per_cu, \"DW_OP_entry_value\");\n+  ensure_have_frame (this->frame, \"DW_OP_entry_value\");\n+\n+  dwarf2_per_cu_data *caller_per_cu;\n+  dwarf2_per_objfile *caller_per_objfile;\n+  frame_info *caller_frame = get_prev_frame (this->frame);\n+  call_site_parameter *parameter\n+    = dwarf_expr_reg_to_entry_parameter (this->frame, kind, kind_u,\n+\t\t\t\t\t &caller_per_cu,\n+\t\t\t\t\t &caller_per_objfile);\n+  const gdb_byte *data_src\n+    = deref_size == -1 ? parameter->value : parameter->data_value;\n+  size_t size\n+    = deref_size == -1 ? parameter->value_size : parameter->data_value_size;\n+\n+  /* DEREF_SIZE size is not verified here.  */\n+  if (data_src == nullptr)\n+    throw_error (NO_ENTRY_VALUE_ERROR,\n+\t\t _(\"Cannot resolve DW_AT_call_data_value\"));\n+\n+  /* We are about to evaluate an expression in the context of the caller\n+     of the current frame.  This evaluation context may be different from\n+     the current (callee's) context), so temporarily set the caller's context.\n+\n+     It is possible for the caller to be from a different objfile from the\n+     callee if the call is made through a function pointer.  */\n+  scoped_restore save_frame = make_scoped_restore (&this->frame,\n+\t\t\t\t\t\t   caller_frame);\n+  scoped_restore save_per_cu = make_scoped_restore (&this->per_cu,\n+\t\t\t\t\t\t    caller_per_cu);\n+  scoped_restore save_obj_addr = make_scoped_restore (&this->obj_address,\n+\t\t\t\t\t\t      (CORE_ADDR) 0);\n+  scoped_restore save_per_objfile = make_scoped_restore (&this->per_objfile,\n+\t\t\t\t\t\t\t caller_per_objfile);\n+\n+  scoped_restore save_arch = make_scoped_restore (&this->gdbarch);\n+  this->gdbarch = this->per_objfile->objfile->arch ();\n+  scoped_restore save_addr_size = make_scoped_restore (&this->addr_size);\n+  this->addr_size = this->per_cu->addr_size ();\n+\n+  this->eval (data_src, size);\n+}\n+\n /* Require that TYPE be an integral type; throw an exception if not.  */\n \n static void"
    },
    {
      "sha": "70c887b301faa7953820966a816cc27a7f699c0e",
      "filename": "gdb/dwarf2/expr.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/expr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/expr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.h?ref=0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
      "patch": "@@ -194,14 +194,6 @@ struct dwarf_expr_context\n   /* Read LENGTH bytes at ADDR into BUF.  */\n   virtual void read_mem (gdb_byte *buf, CORE_ADDR addr, size_t length);\n \n-  /* Push on DWARF stack an entry evaluated for DW_TAG_call_site's\n-     parameter matching KIND and KIND_U at the caller of specified BATON.\n-     If DEREF_SIZE is not -1 then use DW_AT_call_data_value instead of\n-     DW_AT_call_value.  */\n-  virtual void push_dwarf_reg_entry_value (enum call_site_parameter_kind kind,\n-\t\t\t\t\t   union call_site_parameter_u kind_u,\n-\t\t\t\t\t   int deref_size) = 0;\n-\n   /* Return the `object address' for DW_OP_push_object_address.  */\n   virtual CORE_ADDR get_object_address ()\n   {\n@@ -240,6 +232,14 @@ struct dwarf_expr_context\n      STACK while it being passed to and returned from the called DWARF\n      subroutine.  */\n   void dwarf_call (cu_offset die_cu_off);\n+\n+  /* Push on DWARF stack an entry evaluated for DW_TAG_call_site's\n+     parameter matching KIND and KIND_U at the caller of specified BATON.\n+     If DEREF_SIZE is not -1 then use DW_AT_call_data_value instead of\n+     DW_AT_call_value.  */\n+  void push_dwarf_reg_entry_value (call_site_parameter_kind kind,\n+\t\t\t\t   call_site_parameter_u kind_u,\n+\t\t\t\t   int deref_size);\n };\n \n /* Return the value of register number REG (a DWARF register number),"
    },
    {
      "sha": "8d42002e02dcf2f60e4e32e81574d5c31a6c207e",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
      "patch": "@@ -232,13 +232,6 @@ class dwarf_expr_executor : public dwarf_expr_context\n     : dwarf_expr_context (per_objfile)\n   {}\n \n-  void push_dwarf_reg_entry_value (enum call_site_parameter_kind kind,\n-\t\t\t\t   union call_site_parameter_u kind_u,\n-\t\t\t\t   int deref_size) override\n-  {\n-    invalid (\"DW_OP_entry_value\");\n-  }\n-\n  private:\n \n   void invalid (const char *op) ATTRIBUTE_NORETURN"
    },
    {
      "sha": "f0bf7017c5780bfb163a00969b5b4a0e55e68b9e",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 68,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
      "patch": "@@ -52,13 +52,6 @@ static struct value *dwarf2_evaluate_loc_desc_full\n    size_t size, dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile,\n    struct type *subobj_type, LONGEST subobj_byte_offset);\n \n-static struct call_site_parameter *dwarf_expr_reg_to_entry_parameter\n-    (struct frame_info *frame,\n-     enum call_site_parameter_kind kind,\n-     union call_site_parameter_u kind_u,\n-     dwarf2_per_cu_data **per_cu_return,\n-     dwarf2_per_objfile **per_objfile_return);\n-\n static struct value *indirect_synthetic_pointer\n   (sect_offset die, LONGEST byte_offset,\n    dwarf2_per_cu_data *per_cu,\n@@ -673,61 +666,6 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n   dwarf_evaluate_loc_desc (dwarf2_per_objfile *per_objfile)\n     : dwarf_expr_context (per_objfile)\n   {}\n-\n-  /* Execute DWARF block of call_site_parameter which matches KIND and\n-     KIND_U.  Choose DEREF_SIZE value of that parameter.  Search\n-     caller of this objects's frame.\n-\n-     The caller can be from a different CU - per_cu_dwarf_call\n-     implementation can be more simple as it does not support cross-CU\n-     DWARF executions.  */\n-\n-  void push_dwarf_reg_entry_value (enum call_site_parameter_kind kind,\n-\t\t\t\t   union call_site_parameter_u kind_u,\n-\t\t\t\t   int deref_size) override\n-  {\n-    struct frame_info *caller_frame;\n-    dwarf2_per_cu_data *caller_per_cu;\n-    dwarf2_per_objfile *caller_per_objfile;\n-    struct call_site_parameter *parameter;\n-    const gdb_byte *data_src;\n-    size_t size;\n-\n-    caller_frame = get_prev_frame (frame);\n-\n-    parameter = dwarf_expr_reg_to_entry_parameter (frame, kind, kind_u,\n-\t\t\t\t\t\t   &caller_per_cu,\n-\t\t\t\t\t\t   &caller_per_objfile);\n-    data_src = deref_size == -1 ? parameter->value : parameter->data_value;\n-    size = deref_size == -1 ? parameter->value_size : parameter->data_value_size;\n-\n-    /* DEREF_SIZE size is not verified here.  */\n-    if (data_src == NULL)\n-      throw_error (NO_ENTRY_VALUE_ERROR,\n-\t\t   _(\"Cannot resolve DW_AT_call_data_value\"));\n-\n-    /* We are about to evaluate an expression in the context of the caller\n-       of the current frame.  This evaluation context may be different from\n-       the current (callee's) context), so temporarily set the caller's context.\n-\n-       It is possible for the caller to be from a different objfile from the\n-       callee if the call is made through a function pointer.  */\n-    scoped_restore save_frame = make_scoped_restore (&this->frame,\n-\t\t\t\t\t\t     caller_frame);\n-    scoped_restore save_per_cu = make_scoped_restore (&this->per_cu,\n-\t\t\t\t\t\t      caller_per_cu);\n-    scoped_restore save_obj_addr = make_scoped_restore (&this->obj_address,\n-\t\t\t\t\t\t\t(CORE_ADDR) 0);\n-    scoped_restore save_per_objfile = make_scoped_restore (&this->per_objfile,\n-\t\t\t\t\t\t\t   caller_per_objfile);\n-\n-    scoped_restore save_arch = make_scoped_restore (&this->gdbarch);\n-    this->gdbarch = this->per_objfile->objfile->arch ();\n-    scoped_restore save_addr_size = make_scoped_restore (&this->addr_size);\n-    this->addr_size = this->per_cu->addr_size ();\n-\n-    this->eval (data_src, size);\n-  }\n };\n \n /* See dwarf2loc.h.  */\n@@ -1208,13 +1146,9 @@ call_site_parameter_matches (struct call_site_parameter *parameter,\n   return 0;\n }\n \n-/* Fetch call_site_parameter from caller matching KIND and KIND_U.\n-   FRAME is for callee.\n-\n-   Function always returns non-NULL, it throws NO_ENTRY_VALUE_ERROR\n-   otherwise.  */\n+/* See loc.h.  */\n \n-static struct call_site_parameter *\n+struct call_site_parameter *\n dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n \t\t\t\t   enum call_site_parameter_kind kind,\n \t\t\t\t   union call_site_parameter_u kind_u,"
    },
    {
      "sha": "f4dc3d7fed33324a5523fcd13377914ec5482176",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a2b69d04bbb0b5d69ae93da998b65d44fc7612b/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=0a2b69d04bbb0b5d69ae93da998b65d44fc7612b",
      "patch": "@@ -61,6 +61,18 @@ struct value *sect_variable_value (sect_offset sect_off,\n \t\t\t\t   dwarf2_per_cu_data *per_cu,\n \t\t\t\t   dwarf2_per_objfile *per_objfile);\n \n+/* Fetch call_site_parameter from caller matching KIND and KIND_U.\n+   FRAME is for callee.\n+\n+   Function always returns non-NULL, it throws NO_ENTRY_VALUE_ERROR\n+   otherwise.  */\n+\n+struct call_site_parameter *dwarf_expr_reg_to_entry_parameter\n+  (struct frame_info *frame, enum call_site_parameter_kind kind,\n+   union call_site_parameter_u kind_u, dwarf2_per_cu_data **per_cu_return,\n+   dwarf2_per_objfile **per_objfile_return);\n+\n+\n /* Evaluate a location description, starting at DATA and with length\n    SIZE, to find the current location of variable of TYPE in the context\n    of FRAME.  */"
    }
  ]
}