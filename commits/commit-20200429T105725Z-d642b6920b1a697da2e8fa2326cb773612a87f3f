{
  "sha": "d642b6920b1a697da2e8fa2326cb773612a87f3f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDY0MmI2OTIwYjFhNjk3ZGEyZThmYTIzMjZjYjc3MzYxMmE4N2YzZg==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-04-26T13:28:46Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-04-29T10:57:25Z"
    },
    "message": "Fix array pretty formatter\n\nCurrently, printing with array pretty formatting makes the output actually\nless readable than without:\n\n(gdb) p -array on -- {{1,2,3},{4,5,6}}\n$1 =   {    {1,\n    2,\n    3},\n      {4,\n    5,\n    6}}\n(gdb) p -array on -array-indexes on -- {{1,2,3},{4,5,6}}\n$2 =   {[0] =     {[0] = 1,\n    [1] = 2,\n    [2] = 3},\n  [1] =     {[0] = 4,\n    [1] = 5,\n    [2] = 6}}\n\nThese changes now also put the first element and the array end bracket on a new\nline, similar to the structure pretty formatter:\n\n(gdb) p -array on -- {{1,2,3},{4,5,6}}\n$1 = {\n  {\n    1,\n    2,\n    3\n  },\n  {\n    4,\n    5,\n    6\n  }\n}\n(gdb) p -array on -array-indexes on -- {{1,2,3},{4,5,6}}\n$2 = {\n  [0] = {\n    [0] = 1,\n    [1] = 2,\n    [2] = 3\n  },\n  [1] = {\n    [0] = 4,\n    [1] = 5,\n    [2] = 6\n  }\n}\n\ngdb/ChangeLog:\n\n2020-04-29  Hannes Domani  <ssbssa@yahoo.de>\n\n\tPR gdb/17320\n\t* ada-valprint.c (val_print_packed_array_elements): Move array\n\tend bracket to new line.\n\t(ada_val_print_string): Remove extra spaces before first array\n\telement.\n\t* c-valprint.c (c_value_print_array): Likewise.\n\t* m2-valprint.c (m2_print_array_contents): Likewise.\n\t(m2_value_print_inner): Likewise.\n\t* p-valprint.c (pascal_value_print_inner): Likewise.\n\t* valprint.c (generic_val_print_array): Likewise.\n\t(value_print_array_elements): Move first array element and array\n\tend bracket to new line.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-29  Hannes Domani  <ssbssa@yahoo.de>\n\n\tPR gdb/17320\n\t* gdb.base/pretty-array.c: New test.\n\t* gdb.base/pretty-array.exp: New file.",
    "tree": {
      "sha": "7efb5027f46519236ecc146f519d080033d7679f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7efb5027f46519236ecc146f519d080033d7679f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d642b6920b1a697da2e8fa2326cb773612a87f3f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d642b6920b1a697da2e8fa2326cb773612a87f3f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d642b6920b1a697da2e8fa2326cb773612a87f3f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d642b6920b1a697da2e8fa2326cb773612a87f3f/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ea90f2278cee318976c66bf82284046214fb30af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea90f2278cee318976c66bf82284046214fb30af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ea90f2278cee318976c66bf82284046214fb30af"
    }
  ],
  "stats": {
    "total": 145,
    "additions": 125,
    "deletions": 20
  },
  "files": [
    {
      "sha": "9e1ce39c9e2492ea38dabf5b583dae85c7905eee",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -1,3 +1,18 @@\n+2020-04-29  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\tPR gdb/17320\n+\t* ada-valprint.c (val_print_packed_array_elements): Move array\n+\tend bracket to new line.\n+\t(ada_val_print_string): Remove extra spaces before first array\n+\telement.\n+\t* c-valprint.c (c_value_print_array): Likewise.\n+\t* m2-valprint.c (m2_print_array_contents): Likewise.\n+\t(m2_value_print_inner): Likewise.\n+\t* p-valprint.c (pascal_value_print_inner): Likewise.\n+\t* valprint.c (generic_val_print_array): Likewise.\n+\t(value_print_array_elements): Move first array element and array\n+\tend bracket to new line.\n+\n 2020-04-29  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/25889"
    },
    {
      "sha": "31f3a50b340aa36f510de9adbfbf524942647444",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -195,6 +195,11 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n \t      fprintf_filtered (stream, \", \");\n \t    }\n \t}\n+      else if (options->prettyformat_arrays)\n+\t{\n+\t  fprintf_filtered (stream, \"\\n\");\n+\t  print_spaces_filtered (2 + 2 * recurse, stream);\n+\t}\n       wrap_here (n_spaces (2 + 2 * recurse));\n       maybe_print_array_index (index_type, i + low, stream, options);\n \n@@ -707,9 +712,6 @@ ada_val_print_string (struct type *type, const gdb_byte *valaddr,\n   eltlen = TYPE_LENGTH (elttype);\n   len = TYPE_LENGTH (type) / eltlen;\n \n-  if (options->prettyformat_arrays)\n-    print_spaces_filtered (2 + 2 * recurse, stream);\n-\n   /* If requested, look for the first null char and only print\n      elements up to it.  */\n   if (options->stop_print_at_null)"
    },
    {
      "sha": "52ea5eda0c1de445004233bfa0d1faac12158a59",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -252,10 +252,6 @@ c_value_print_array (struct value *val,\n \n       eltlen = TYPE_LENGTH (elttype);\n       len = high_bound - low_bound + 1;\n-      if (options->prettyformat_arrays)\n-\t{\n-\t  print_spaces_filtered (2 + 2 * recurse, stream);\n-\t}\n \n       /* Print arrays of textual chars with a string syntax, as\n \t long as the entire array is valid.  */"
    },
    {
      "sha": "e210b5ec2f1821bebbb65efc668aa4a2c398f614",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -265,8 +265,6 @@ m2_print_array_contents (struct value *val,\n \n   if (TYPE_LENGTH (type) > 0)\n     {\n-      if (options->prettyformat_arrays)\n-\tprint_spaces_filtered (2 + 2 * recurse, stream);\n       /* For an array of chars, print with string syntax.  */\n       if (TYPE_LENGTH (type) == 1 &&\n \t  ((TYPE_CODE (type) == TYPE_CODE_INT)\n@@ -318,8 +316,6 @@ m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n \t{\n \t  elttype = check_typedef (TYPE_TARGET_TYPE (type));\n \t  len = TYPE_LENGTH (type) / TYPE_LENGTH (elttype);\n-\t  if (options->prettyformat_arrays)\n-\t    print_spaces_filtered (2 + 2 * recurse, stream);\n \t  /* For an array of chars, print with string syntax.  */\n \t  if (TYPE_LENGTH (elttype) == 1 &&\n \t      ((TYPE_CODE (elttype) == TYPE_CODE_INT)"
    },
    {
      "sha": "fbf5c5cf1412e94661e4d76cae8b173d6476df0b",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -93,10 +93,6 @@ pascal_value_print_inner (struct value *val, struct ui_file *stream,\n \t    len = high_bound - low_bound + 1;\n \t    elttype = check_typedef (TYPE_TARGET_TYPE (type));\n \t    eltlen = TYPE_LENGTH (elttype);\n-\t    if (options->prettyformat_arrays)\n-\t      {\n-\t\tprint_spaces_filtered (2 + 2 * recurse, stream);\n-\t      }\n \t    /* If 's' format is used, try to print out as string.\n \t       If no format is given, print as string if element type\n \t       is of TYPE_CODE_CHAR and element size is 1,2 or 4.  */"
    },
    {
      "sha": "86b71913b0111ae094b100c5f2d63864c3816e64",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-29  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\tPR gdb/17320\n+\t* gdb.base/pretty-array.c: New test.\n+\t* gdb.base/pretty-array.exp: New file.\n+\n 2020-04-29  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/25889"
    },
    {
      "sha": "2adebcca8c649e197b5c028521cd6b54861e6e69",
      "filename": "gdb/testsuite/gdb.base/pretty-array.c",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/testsuite/gdb.base/pretty-array.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/testsuite/gdb.base/pretty-array.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/pretty-array.c?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -0,0 +1,24 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int nums[2][3] = {{11, 12, 13}, {21, 22, 23}};\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "e17ce18857a1d4d2ff29623f0348413b356cab50",
      "filename": "gdb/testsuite/gdb.base/pretty-array.exp",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/testsuite/gdb.base/pretty-array.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/testsuite/gdb.base/pretty-array.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/pretty-array.exp?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -0,0 +1,65 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test pretty printing of arrays.\n+\n+standard_testfile\n+\n+if {[prepare_for_testing $testfile.exp $testfile $srcfile debug]} {\n+    untested $testfile.exp\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    untested $testfile.exp\n+    return -1\n+}\n+\n+gdb_test \"print nums\" \\\n+    \"= \\\\{\\\\{11, 12, 13\\\\}, \\\\{21, 22, 23\\\\}\\\\}\"\n+\n+gdb_test_no_output \"set print array on\"\n+\n+gdb_test \"print nums\" \\\n+    [multi_line \\\n+\t \" = {\" \\\n+\t \"  {\" \\\n+\t \"    11,\" \\\n+\t \"    12,\" \\\n+\t \"    13\" \\\n+\t \"  },\" \\\n+\t \"  {\" \\\n+\t \"    21,\" \\\n+\t \"    22,\" \\\n+\t \"    23\" \\\n+\t \"  }\" \\\n+\t \"}\" ]\n+\n+gdb_test_no_output \"set print array-indexes on\"\n+\n+gdb_test \"print nums\" \\\n+    [multi_line \\\n+\t \" = {\" \\\n+\t \"  \\\\\\[0\\\\\\] = {\" \\\n+\t \"    \\\\\\[0\\\\\\] = 11,\" \\\n+\t \"    \\\\\\[1\\\\\\] = 12,\" \\\n+\t \"    \\\\\\[2\\\\\\] = 13\" \\\n+\t \"  },\" \\\n+\t \"  \\\\\\[1\\\\\\] = {\" \\\n+\t \"    \\\\\\[0\\\\\\] = 21,\" \\\n+\t \"    \\\\\\[1\\\\\\] = 22,\" \\\n+\t \"    \\\\\\[2\\\\\\] = 23\" \\\n+\t \"  }\" \\\n+\t \"}\" ]"
    },
    {
      "sha": "2f910242fcc0cb4e44ab93f25201ac307d756986",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d642b6920b1a697da2e8fa2326cb773612a87f3f/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=d642b6920b1a697da2e8fa2326cb773612a87f3f",
      "patch": "@@ -441,11 +441,6 @@ generic_val_print_array (struct value *val,\n       if (!get_array_bounds (type, &low_bound, &high_bound))\n \terror (_(\"Could not determine the array high bound\"));\n \n-      if (options->prettyformat_arrays)\n-\t{\n-\t  print_spaces_filtered (2 + 2 * recurse, stream);\n-\t}\n-\n       fputs_filtered (decorations->array_start, stream);\n       value_print_array_elements (val, stream, recurse, options, 0);\n       fputs_filtered (decorations->array_end, stream);\n@@ -1945,6 +1940,11 @@ value_print_array_elements (struct value *val, struct ui_file *stream,\n \t  else\n \t    fprintf_filtered (stream, \", \");\n \t}\n+      else if (options->prettyformat_arrays)\n+\t{\n+\t  fprintf_filtered (stream, \"\\n\");\n+\t  print_spaces_filtered (2 + 2 * recurse, stream);\n+\t}\n       wrap_here (n_spaces (2 + 2 * recurse));\n       maybe_print_array_index (index_type, i + low_bound,\n                                stream, options);\n@@ -1988,6 +1988,11 @@ value_print_array_elements (struct value *val, struct ui_file *stream,\n   annotate_array_section_end ();\n   if (i < len)\n     fprintf_filtered (stream, \"...\");\n+  if (options->prettyformat_arrays)\n+    {\n+      fprintf_filtered (stream, \"\\n\");\n+      print_spaces_filtered (2 * recurse, stream);\n+    }\n }\n \n /* Read LEN bytes of target memory at address MEMADDR, placing the"
    }
  ]
}