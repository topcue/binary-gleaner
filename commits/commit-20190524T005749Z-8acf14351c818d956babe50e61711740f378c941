{
  "sha": "8acf14351c818d956babe50e61711740f378c941",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGFjZjE0MzUxYzgxOGQ5NTZiYWJlNTBlNjE3MTE3NDBmMzc4Yzk0MQ==",
  "commit": {
    "author": {
      "name": "Peter Bergner",
      "email": "bergner@linux.ibm.com",
      "date": "2018-07-28T03:21:43Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-24T00:57:49Z"
    },
    "message": "PowerPC D-form prefixed loads and stores\n\nopcodes/\n\t* ppc-opc.c (insert_d34, extract_d34, insert_nsi34, extract_nsi34),\n\t(insert_pcrel, extract_pcrel, extract_pcrel0): New functions.\n\t(extract_esync, extract_raq, extract_tbr, extract_sxl): Comment.\n\t(powerpc_operands <D34, SI34, NSI34, PRA0, PRAQ, PCREL, PCREL0,\n\tXTOP>): Define and add entries.\n\t(P8LS, PMLS, P_D_MASK, P_DRAPCREL_MASK): Define.\n\t(prefix_opcodes): Add pli, paddi, pla, psubi, plwz, plbz, pstw,\n\tpstb, plhz, plha, psth, plfs, plfd, pstfs, pstfd, plq, plxsd,\n\tplxssp, pld, plwa, pstxsd, pstxssp, pstxv, pstd, and pstq.\ngas/\n\t* config/tc-ppc.c (ppc_insert_operand): Only sign extend fields that\n\tare 32-bits or smaller.\n\t* messages.c (as_internal_value_out_of_range): Do not truncate\n\tvariables and use BFD_VMA_FMT to print them.\n\t* testsuite/gas/ppc/prefix-pcrel.s,\n\t* testsuite/gas/ppc/prefix-pcrel.d: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run it.",
    "tree": {
      "sha": "a1a179effef4632b4a356563805fb404466ecc58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1a179effef4632b4a356563805fb404466ecc58"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8acf14351c818d956babe50e61711740f378c941",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8acf14351c818d956babe50e61711740f378c941",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8acf14351c818d956babe50e61711740f378c941",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8acf14351c818d956babe50e61711740f378c941/comments",
  "author": {
    "login": "peter-bergner",
    "id": 17504345,
    "node_id": "MDQ6VXNlcjE3NTA0MzQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/peter-bergner",
    "html_url": "https://github.com/peter-bergner",
    "followers_url": "https://api.github.com/users/peter-bergner/followers",
    "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}",
    "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions",
    "organizations_url": "https://api.github.com/users/peter-bergner/orgs",
    "repos_url": "https://api.github.com/users/peter-bergner/repos",
    "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/peter-bergner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dd7efa79151ed5a56caccfac870865764d922a2f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd7efa79151ed5a56caccfac870865764d922a2f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dd7efa79151ed5a56caccfac870865764d922a2f"
    }
  ],
  "stats": {
    "total": 592,
    "additions": 577,
    "deletions": 15
  },
  "files": [
    {
      "sha": "2d05746753fbad9a0453232f11cb007be50f362b",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c (ppc_insert_operand): Only sign extend fields that\n+\tare 32-bits or smaller.\n+\t* messages.c (as_internal_value_out_of_range): Do not truncate\n+\tvariables and use BFD_VMA_FMT to print them.\n+\t* testsuite/gas/ppc/prefix-pcrel.s,\n+\t* testsuite/gas/ppc/prefix-pcrel.d: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run it.\n+\n 2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n \t    Alan Modra  <amodra@gmail.com>\n "
    },
    {
      "sha": "4026c722939dd992ddbff29fe169ba62feebb502",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -1987,8 +1987,10 @@ ppc_insert_operand (uint64_t insn,\n \t hand but only up to 32 bits.  This shouldn't really be valid,\n \t but, to permit this code to assemble on a 64-bit host, we\n \t sign extend the 32-bit value to 64 bits if so doing makes the\n-\t value valid.  */\n+\t value valid.  We only do this for operands that are 32-bits or\n+\t smaller.  */\n       if (val > max\n+\t  && (operand->bitm & ~0xffffffffULL) == 0\n \t  && (val - (1LL << 32)) >= min\n \t  && (val - (1LL << 32)) <= max\n \t  && ((val - (1LL << 32)) & (right - 1)) == 0)\n@@ -1997,6 +1999,7 @@ ppc_insert_operand (uint64_t insn,\n       /* Similarly, people write expressions like ~(1<<15), and expect\n \t this to be OK for a 32-bit unsigned value.  */\n       else if (val < min\n+\t       && (operand->bitm & ~0xffffffffULL) == 0\n \t       && (val + (1LL << 32)) >= min\n \t       && (val + (1LL << 32)) <= max\n \t       && ((val + (1LL << 32)) & (right - 1)) == 0)"
    },
    {
      "sha": "b7d82f595dc7da38b5a301039b2b88c680b4babe",
      "filename": "gas/messages.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/gas/messages.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/gas/messages.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/messages.c?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -397,13 +397,12 @@ as_internal_value_out_of_range (const char *prefix,\n \tabort ();\n \n       /* xgettext:c-format  */\n-      err = _(\"%s out of domain (%d is not a multiple of %d)\");\n+      err = _(\"%s out of domain (%\" BFD_VMA_FMT \"d is not a multiple of %\" \\\n+\t      BFD_VMA_FMT \"d)\");\n       if (bad)\n-\tas_bad_where (file, line, err,\n-\t\t      prefix, (int) val, (int) right);\n+\tas_bad_where (file, line, err, prefix, val, right);\n       else\n-\tas_warn_where (file, line, err,\n-\t\t       prefix, (int) val, (int) right);\n+\tas_warn_where (file, line, err, prefix, val, right);\n       return;\n     }\n \n@@ -415,14 +414,13 @@ as_internal_value_out_of_range (const char *prefix,\n       && max > HEX_MIN_THRESHOLD)\n     {\n       /* xgettext:c-format  */\n-      err = _(\"%s out of range (%d is not between %d and %d)\");\n+      err = _(\"%s out of range (%\" BFD_VMA_FMT \"d is not between %\" \\\n+\t      BFD_VMA_FMT \"d and %\" BFD_VMA_FMT \"d)\");\n \n       if (bad)\n-\tas_bad_where (file, line, err,\n-\t\t      prefix, (int) val, (int) min, (int) max);\n+\tas_bad_where (file, line, err, prefix, val, min, max);\n       else\n-\tas_warn_where (file, line, err,\n-\t\t       prefix, (int) val, (int) min, (int) max);\n+\tas_warn_where (file, line, err, prefix, val, min, max);\n     }\n   else\n     {"
    },
    {
      "sha": "aa199d5e85ea7f3f10b85d0411f9b7395309b759",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -115,3 +115,4 @@ run_dump_test \"vsx3\"\n run_dump_test \"htm\"\n run_dump_test \"titan\"\n run_dump_test \"prefix-align\"\n+run_dump_test \"prefix-pcrel\""
    },
    {
      "sha": "a0ca60fa548b665974ea86b8d5dd636d8b27b872",
      "filename": "gas/testsuite/gas/ppc/prefix-pcrel.d",
      "status": "added",
      "additions": 235,
      "deletions": 0,
      "changes": 235,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/gas/testsuite/gas/ppc/prefix-pcrel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/gas/testsuite/gas/ppc/prefix-pcrel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-pcrel.d?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -0,0 +1,235 @@\n+#as: -mfuture\n+#objdump: -dr -Mfuture\n+#name: POWERXX pcrel tests\n+\n+.*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+00 <prefix>:\n+.*:\t(06 00 00 00|00 00 00 06) \tpaddi   r10,r9,0\n+.*:\t(39 49 00 00|00 00 49 39) \n+.*:\t(06 00 00 00|00 00 00 06) \tpaddi   r10,r9,0\n+.*:\t(39 49 00 00|00 00 49 39) \n+.*:\t(06 00 00 00|00 00 00 06) \tpaddi   r10,r9,0\n+.*:\t(39 49 00 00|00 00 49 39) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r11,r9,-32769\n+.*:\t(39 69 7f ff|ff 7f 69 39) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r11,r9,-32769\n+.*:\t(39 69 7f ff|ff 7f 69 39) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r11,r9,-32769\n+.*:\t(39 69 7f ff|ff 7f 69 39) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpaddi   r12,r9,8589934591\n+.*:\t(39 89 ff ff|ff ff 89 39) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpaddi   r12,r9,8589934591\n+.*:\t(39 89 ff ff|ff ff 89 39) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpaddi   r12,r9,8589934591\n+.*:\t(39 89 ff ff|ff ff 89 39) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpaddi   r12,r9,8589934591\n+.*:\t(39 89 ff ff|ff ff 89 39) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpaddi   r12,r9,8589934591\n+.*:\t(39 89 ff ff|ff ff 89 39) \n+.*:\t(06 02 00 00|00 00 02 06) \tpaddi   r13,r9,-8589934592\n+.*:\t(39 a9 00 00|00 00 a9 39) \n+.*:\t(06 02 00 00|00 00 02 06) \tpaddi   r13,r9,-8589934592\n+.*:\t(39 a9 00 00|00 00 a9 39) \n+.*:\t(06 02 00 00|00 00 02 06) \tpaddi   r13,r9,-8589934592\n+.*:\t(39 a9 00 00|00 00 a9 39) \n+.*:\t(06 02 00 00|00 00 02 06) \tpaddi   r13,r9,-8589934592\n+.*:\t(39 a9 00 00|00 00 a9 39) \n+.*:\t(06 02 00 00|00 00 02 06) \tpaddi   r13,r9,-8589934592\n+.*:\t(39 a9 00 00|00 00 a9 39) \n+.*:\t(06 10 00 00|00 00 10 06) \tpla     r14,0\n+.*:\t(39 c0 00 00|00 00 c0 39) \n+.*:\t(06 10 00 00|00 00 10 06) \tpla     r14,0\n+.*:\t(39 c0 00 00|00 00 c0 39) \n+.*:\t(06 13 ff ff|ff ff 13 06) \tpla     r15,-32769\n+.*:\t(39 e0 7f ff|ff 7f e0 39) \n+.*:\t(06 13 ff ff|ff ff 13 06) \tpla     r15,-32769\n+.*:\t(39 e0 7f ff|ff 7f e0 39) \n+.*:\t(06 13 ff ff|ff ff 13 06) \tpla     r15,-32769\n+.*:\t(39 e0 7f ff|ff 7f e0 39) \n+.*:\t(06 11 ff ff|ff ff 11 06) \tpla     r16,8589934591\n+.*:\t(3a 00 ff ff|ff ff 00 3a) \n+.*:\t(06 11 ff ff|ff ff 11 06) \tpla     r16,8589934591\n+.*:\t(3a 00 ff ff|ff ff 00 3a) \n+.*:\t(06 11 ff ff|ff ff 11 06) \tpla     r16,8589934591\n+.*:\t(3a 00 ff ff|ff ff 00 3a) \n+.*:\t(06 12 00 00|00 00 12 06) \tpla     r17,-8589934592\n+.*:\t(3a 20 00 00|00 00 20 3a) \n+.*:\t(06 12 00 00|00 00 12 06) \tpla     r17,-8589934592\n+.*:\t(3a 20 00 00|00 00 20 3a) \n+.*:\t(06 12 00 00|00 00 12 06) \tpla     r17,-8589934592\n+.*:\t(3a 20 00 00|00 00 20 3a) \n+.*:\t(06 00 00 00|00 00 00 06) \tpli     r20,13\n+.*:\t(3a 80 00 0d|0d 00 80 3a) \n+.*:\t(06 00 00 00|00 00 00 06) \tpli     r20,13\n+.*:\t(3a 80 00 0d|0d 00 80 3a) \n+.*:\t(06 00 00 00|00 00 00 06) \tpli     r20,13\n+.*:\t(3a 80 00 0d|0d 00 80 3a) \n+.*:\t(06 00 00 00|00 00 00 06) \tpli     r20,13\n+.*:\t(3a 80 00 0d|0d 00 80 3a) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpli     r21,-32769\n+.*:\t(3a a0 7f ff|ff 7f a0 3a) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpli     r21,-32769\n+.*:\t(3a a0 7f ff|ff 7f a0 3a) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpli     r21,-32769\n+.*:\t(3a a0 7f ff|ff 7f a0 3a) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpli     r22,8589934591\n+.*:\t(3a c0 ff ff|ff ff c0 3a) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpli     r22,8589934591\n+.*:\t(3a c0 ff ff|ff ff c0 3a) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpli     r22,8589934591\n+.*:\t(3a c0 ff ff|ff ff c0 3a) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpli     r22,8589934591\n+.*:\t(3a c0 ff ff|ff ff c0 3a) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpli     r22,8589934591\n+.*:\t(3a c0 ff ff|ff ff c0 3a) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tpli     r22,8589934591\n+.*:\t(3a c0 ff ff|ff ff c0 3a) \n+.*:\t(06 02 00 00|00 00 02 06) \tpli     r23,-8589934592\n+.*:\t(3a e0 00 00|00 00 e0 3a) \n+.*:\t(06 02 00 00|00 00 02 06) \tpli     r23,-8589934592\n+.*:\t(3a e0 00 00|00 00 e0 3a) \n+.*:\t(06 02 00 00|00 00 02 06) \tpli     r23,-8589934592\n+.*:\t(3a e0 00 00|00 00 e0 3a) \n+.*:\t(06 02 00 00|00 00 02 06) \tpli     r23,-8589934592\n+.*:\t(3a e0 00 00|00 00 e0 3a) \n+.*:\t(06 02 00 00|00 00 02 06) \tpli     r23,-8589934592\n+.*:\t(3a e0 00 00|00 00 e0 3a) \n+.*:\t(06 02 00 00|00 00 02 06) \tpli     r23,-8589934592\n+.*:\t(3a e0 00 00|00 00 e0 3a) \n+.*:\t(06 00 00 00|00 00 00 06) \tplbz    r3,0\\(r1\\)\n+.*:\t(88 61 00 00|00 00 61 88) \n+.*:\t(06 00 00 00|00 00 00 06) \tplbz    r3,0\\(r1\\)\n+.*:\t(88 61 00 00|00 00 61 88) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tplbz    r3,-32769\\(r1\\)\n+.*:\t(88 61 7f ff|ff 7f 61 88) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tplbz    r3,-32769\\(r1\\)\n+.*:\t(88 61 7f ff|ff 7f 61 88) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tplbz    r3,8589934591\\(r1\\)\n+.*:\t(88 61 ff ff|ff ff 61 88) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tplbz    r3,8589934591\\(r1\\)\n+.*:\t(88 61 ff ff|ff ff 61 88) \n+.*:\t(06 02 00 00|00 00 02 06) \tplbz    r3,-8589934592\\(r1\\)\n+.*:\t(88 61 00 00|00 00 61 88) \n+.*:\t(06 02 00 00|00 00 02 06) \tplbz    r3,-8589934592\\(r1\\)\n+.*:\t(88 61 00 00|00 00 61 88) \n+.*:\t(06 00 00 00|00 00 00 06) \tplbz    r3,0\\(0\\)\n+.*:\t(88 60 00 00|00 00 60 88) \n+.*:\t(06 10 00 00|00 00 10 06) \tplbz    r4,0\n+.*:\t(88 80 00 00|00 00 80 88) \n+.*:\t(06 10 00 00|00 00 10 06) \tplbz    r4,0\n+.*:\t(88 80 00 00|00 00 80 88) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tplbz    r3,-32769\\(0\\)\n+.*:\t(88 60 7f ff|ff 7f 60 88) \n+.*:\t(06 13 ff ff|ff ff 13 06) \tplbz    r4,-32769\n+.*:\t(88 80 7f ff|ff 7f 80 88) \n+.*:\t(06 13 ff ff|ff ff 13 06) \tplbz    r4,-32769\n+.*:\t(88 80 7f ff|ff 7f 80 88) \n+.*:\t(06 01 ff ff|ff ff 01 06) \tplbz    r3,8589934591\\(0\\)\n+.*:\t(88 60 ff ff|ff ff 60 88) \n+.*:\t(06 11 ff ff|ff ff 11 06) \tplbz    r4,8589934591\n+.*:\t(88 80 ff ff|ff ff 80 88) \n+.*:\t(06 11 ff ff|ff ff 11 06) \tplbz    r4,8589934591\n+.*:\t(88 80 ff ff|ff ff 80 88) \n+.*:\t(06 02 00 00|00 00 02 06) \tplbz    r3,-8589934592\\(0\\)\n+.*:\t(88 60 00 00|00 00 60 88) \n+.*:\t(06 12 00 00|00 00 12 06) \tplbz    r4,-8589934592\n+.*:\t(88 80 00 00|00 00 80 88) \n+.*:\t(06 12 00 00|00 00 12 06) \tplbz    r4,-8589934592\n+.*:\t(88 80 00 00|00 00 80 88) \n+.*:\t(06 00 00 00|00 00 00 06) \tplhz    r5,4\\(r10\\)\n+.*:\t(a0 aa 00 04|04 00 aa a0) \n+.*:\t(06 10 00 00|00 00 10 06) \tplhz    r5,4\n+.*:\t(a0 a0 00 04|04 00 a0 a0) \n+.*:\t(06 00 00 00|00 00 00 06) \tplha    r6,8\\(r10\\)\n+.*:\t(a8 ca 00 08|08 00 ca a8) \n+.*:\t(06 10 00 00|00 00 10 06) \tplha    r6,8\n+.*:\t(a8 c0 00 08|08 00 c0 a8) \n+.*:\t(06 00 00 00|00 00 00 06) \tplwz    r7,12\\(r10\\)\n+.*:\t(80 ea 00 0c|0c 00 ea 80) \n+.*:\t(06 10 00 00|00 00 10 06) \tplwz    r7,12\n+.*:\t(80 e0 00 0c|0c 00 e0 80) \n+.*:\t(04 00 00 00|00 00 00 04) \tplwa    r8,16\\(r10\\)\n+.*:\t(a5 0a 00 10|10 00 0a a5) \n+.*:\t(04 10 00 00|00 00 10 04) \tplwa    r8,16\n+.*:\t(a5 00 00 10|10 00 00 a5) \n+.*:\t(04 00 00 00|00 00 00 04) \tpld     r9,20\\(r10\\)\n+.*:\t(e5 2a 00 14|14 00 2a e5) \n+.*:\t(04 10 00 00|00 00 10 04) \tpld     r9,20\n+.*:\t(e5 20 00 14|14 00 20 e5) \n+.*:\t(06 00 00 00|00 00 00 06) \tplfs    f10,24\\(r10\\)\n+.*:\t(c1 4a 00 18|18 00 4a c1) \n+.*:\t(06 10 00 00|00 00 10 06) \tplfs    f10,24\n+.*:\t(c1 40 00 18|18 00 40 c1) \n+.*:\t(06 00 00 00|00 00 00 06) \tplfd    f11,28\\(r10\\)\n+.*:\t(c9 6a 00 1c|1c 00 6a c9) \n+.*:\t(06 10 00 00|00 00 10 06) \tplfd    f11,28\n+.*:\t(c9 60 00 1c|1c 00 60 c9) \n+.*:\t(04 00 00 00|00 00 00 04) \tplxsd   v13,36\\(r10\\)\n+.*:\t(a9 aa 00 24|24 00 aa a9) \n+.*:\t(04 10 00 00|00 00 10 04) \tplxsd   v13,36\n+.*:\t(a9 a0 00 24|24 00 a0 a9) \n+.*:\t(04 00 00 00|00 00 00 04) \tplxssp  v14,40\\(r10\\)\n+.*:\t(ad ca 00 28|28 00 ca ad) \n+.*:\t(04 10 00 00|00 00 10 04) \tplxssp  v14,40\n+.*:\t(ad c0 00 28|28 00 c0 ad) \n+.*:\t(04 00 00 00|00 00 00 04) \tplq     r16,48\\(r10\\)\n+.*:\t(e2 0a 00 30|30 00 0a e2) \n+.*:\t(04 10 00 00|00 00 10 04) \tplq     r16,48\n+.*:\t(e2 00 00 30|30 00 00 e2) \n+.*:\t(04 00 00 00|00 00 00 04) \tplxv    vs17,64\\(r10\\)\n+.*:\t(ca 2a 00 40|40 00 2a ca) \n+.*:\t(04 10 00 00|00 00 10 04) \tplxv    vs17,64\n+.*:\t(ca 20 00 40|40 00 20 ca) \n+.*:\t(04 00 00 00|00 00 00 04) \tplxv    vs34,64\\(r10\\)\n+.*:\t(cc 4a 00 40|40 00 4a cc) \n+.*:\t(04 10 00 00|00 00 10 04) \tplxv    vs34,64\n+.*:\t(cc 40 00 40|40 00 40 cc) \n+.*:\t(06 00 00 00|00 00 00 06) \tpstb    r3,52\\(r11\\)\n+.*:\t(98 6b 00 34|34 00 6b 98) \n+.*:\t(06 10 00 00|00 00 10 06) \tpstb    r3,52\n+.*:\t(98 60 00 34|34 00 60 98) \n+.*:\t(06 00 00 00|00 00 00 06) \tpsth    r4,56\\(r11\\)\n+.*:\t(b0 8b 00 38|38 00 8b b0) \n+.*:\t(06 10 00 00|00 00 10 06) \tpsth    r4,56\n+.*:\t(b0 80 00 38|38 00 80 b0) \n+.*:\t(06 00 00 00|00 00 00 06) \tpstw    r5,60\\(r11\\)\n+.*:\t(90 ab 00 3c|3c 00 ab 90) \n+.*:\t(06 10 00 00|00 00 10 06) \tpstw    r5,60\n+.*:\t(90 a0 00 3c|3c 00 a0 90) \n+.*:\t(06 00 00 00|00 00 00 06) \tpstfs   f6,64\\(r11\\)\n+.*:\t(d0 cb 00 40|40 00 cb d0) \n+.*:\t(06 10 00 00|00 00 10 06) \tpstfs   f6,64\n+.*:\t(d0 c0 00 40|40 00 c0 d0) \n+.*:\t(06 00 00 00|00 00 00 06) \tpstfd   f7,68\\(r11\\)\n+.*:\t(d8 eb 00 44|44 00 eb d8) \n+.*:\t(06 10 00 00|00 00 10 06) \tpstfd   f7,68\n+.*:\t(d8 e0 00 44|44 00 e0 d8) \n+.*:\t(04 00 00 00|00 00 00 04) \tpstxsd  v9,76\\(r11\\)\n+.*:\t(b9 2b 00 4c|4c 00 2b b9) \n+.*:\t(04 10 00 00|00 00 10 04) \tpstxsd  v9,76\n+.*:\t(b9 20 00 4c|4c 00 20 b9) \n+.*:\t(04 00 00 00|00 00 00 04) \tpstxssp v10,80\\(r11\\)\n+.*:\t(bd 4b 00 50|50 00 4b bd) \n+.*:\t(04 10 00 00|00 00 10 04) \tpstxssp v10,80\n+.*:\t(bd 40 00 50|50 00 40 bd) \n+.*:\t(04 00 00 00|00 00 00 04) \tpstd    r11,84\\(r11\\)\n+.*:\t(f5 6b 00 54|54 00 6b f5) \n+.*:\t(04 10 00 00|00 00 10 04) \tpstd    r11,84\n+.*:\t(f5 60 00 54|54 00 60 f5) \n+.*:\t(04 00 00 00|00 00 00 04) \tpstq    r12,88\\(r11\\)\n+.*:\t(f1 8b 00 58|58 00 8b f1) \n+.*:\t(04 10 00 00|00 00 10 04) \tpstq    r12,88\n+.*:\t(f1 80 00 58|58 00 80 f1) \n+.*:\t(04 00 00 00|00 00 00 04) \tpstxv   vs13,96\\(r11\\)\n+.*:\t(d9 ab 00 60|60 00 ab d9) \n+.*:\t(04 10 00 00|00 00 10 04) \tpstxv   vs13,96\n+.*:\t(d9 a0 00 60|60 00 a0 d9) \n+.*:\t(04 00 00 00|00 00 00 04) \tpstxv   vs63,96\\(r11\\)\n+.*:\t(df eb 00 60|60 00 eb df) \n+.*:\t(04 10 00 00|00 00 10 04) \tpstxv   vs63,96\n+.*:\t(df e0 00 60|60 00 e0 df) \n+#pass"
    },
    {
      "sha": "c3831d8a2c350afee7939d262da9fa30676bc8e7",
      "filename": "gas/testsuite/gas/ppc/prefix-pcrel.s",
      "status": "added",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/gas/testsuite/gas/ppc/prefix-pcrel.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/gas/testsuite/gas/ppc/prefix-pcrel.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-pcrel.s?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -0,0 +1,121 @@\n+\t.text\n+prefix:\n+\t# The following should all disassemble to: paddi rX,rY,disp\n+\tpla\t10,0(9)\n+\tpaddi\t10,9,0\n+\tpaddi\t10,9,0,0\n+\tpla\t11,~(1<<15)(9)\n+\tpaddi\t11,9,~(1<<15)\n+\tpaddi\t11,9,~(1<<15),0\n+\tpla\t12,8589934591(9)\n+\tpsubi\t12,9,-8589934591\n+\tpsubi\t12,9,-8589934591,0\n+\tpaddi\t12,9,8589934591\n+\tpaddi\t12,9,8589934591,0\n+\tpla\t13,-8589934592(9)\n+\tpsubi\t13,9,8589934592\n+\tpsubi\t13,9,8589934592,0\n+\tpaddi\t13,9,-8589934592\n+\tpaddi\t13,9,-8589934592,0\n+\n+\t# The following should all disassemble to: pla rX,disp\n+\tpla\t14,0\n+\tpaddi\t14,0,0,1\n+\tpla\t15,~(1<<15)\n+\tpsubi\t15,0,-(~(1<<15)),1\n+\tpaddi\t15,0,~(1<<15),1\n+\tpla\t16,8589934591\n+\tpsubi\t16,0,-8589934591,1\n+\tpaddi\t16,0,8589934591,1\n+\tpla\t17,-8589934592\n+\tpsubi\t17,0,8589934592,1\n+\tpaddi\t17,0,-8589934592,1\n+\n+\t# The following should all disassemble to: pli rX,immed\n+\tpli\t20,13\n+\tpla\t20,13(0)\n+\tpsubi\t20,0,-13\n+\tpaddi\t20,0,13\n+\tpli\t21,~(1<<15)\n+\tpla\t21,~(1<<15)(0)\n+\tpaddi\t21,0,~(1<<15)\n+\tpli\t22,8589934591\n+\tpla\t22,8589934591(0)\n+\tpsubi\t22,0,-8589934591\n+\tpsubi\t22,0,-8589934591,0\n+\tpaddi\t22,0,8589934591\n+\tpaddi\t22,0,8589934591,0\n+\tpli\t23,-8589934592\n+\tpla\t23,-8589934592(0)\n+\tpsubi\t23,0,8589934592\n+\tpsubi\t23,0,8589934592,0\n+\tpaddi\t23,0,-8589934592\n+\tpaddi\t23,0,-8589934592,0\n+\n+\t# Tests of prefix loads and stores\n+\tplbz\t3,0(1)\n+\tplbz\t3,0(1),0\n+\tplbz\t3,~(1<<15)(1)\n+\tplbz\t3,~(1<<15)(1),0\n+\tplbz\t3,8589934591(1)\n+\tplbz\t3,8589934591(1),0\n+\tplbz\t3,-8589934592(1)\n+\tplbz\t3,-8589934592(1),0\n+\tplbz\t3,0(0)\n+\tplbz\t4,0(0),1\n+\tplbz\t4,0\n+\tplbz\t3,~(1<<15)(0)\n+\tplbz\t4,~(1<<15)(0),1\n+\tplbz\t4,~(1<<15)\n+\tplbz\t3,8589934591(0)\n+\tplbz\t4,8589934591(0),1\n+\tplbz\t4,8589934591\n+\tplbz\t3,-8589934592(0)\n+\tplbz\t4,-8589934592(0),1\n+\tplbz\t4,-8589934592\n+\tplhz\t5,4(10),0\n+\tplhz\t5,4(0),1\n+\tplha\t6,8(10),0\n+\tplha\t6,8(0),1\n+\tplwz\t7,12(10),0\n+\tplwz\t7,12(0),1\n+\tplwa\t8,16(10),0\n+\tplwa\t8,16(0),1\n+\tpld\t9,20(10),0\n+\tpld\t9,20(0),1\n+\tplfs\t10,24(10),0\n+\tplfs\t10,24(0),1\n+\tplfd\t11,28(10),0\n+\tplfd\t11,28(0),1\n+\tplxsd\t13,36(10),0\n+\tplxsd\t13,36(0),1\n+\tplxssp\t14,40(10),0\n+\tplxssp\t14,40(0),1\n+\tplq\t16,48(10),0\n+\tplq\t16,48(0),1\n+\tplxv\t17,64(10),0\n+\tplxv\t17,64(0),1\n+\tplxv\t34,64(10),0\n+\tplxv\t34,64(0),1\n+\tpstb\t3,52(11),0\n+\tpstb\t3,52(0),1\n+\tpsth\t4,56(11),0\n+\tpsth\t4,56(0),1\n+\tpstw\t5,60(11),0\n+\tpstw\t5,60(0),1\n+\tpstfs\t6,64(11),0\n+\tpstfs\t6,64(0),1\n+\tpstfd\t7,68(11),0\n+\tpstfd\t7,68(0),1\n+\tpstxsd\t9,76(11),0\n+\tpstxsd\t9,76(0),1\n+\tpstxssp\t10,80(11),0\n+\tpstxssp\t10,80(0),1\n+\tpstd\t11,84(11),0\n+\tpstd\t11,84(0),1\n+\tpstq\t12,88(11),0\n+\tpstq\t12,88(0),1\n+\tpstxv\t13,96(11),0\n+\tpstxv\t13,96(0),1\n+\tpstxv\t63,96(11),0\n+\tpstxv\t63,96(0),1"
    },
    {
      "sha": "949b04f2a51d239801bcb4288892df4e1ba43232",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* ppc-opc.c (insert_d34, extract_d34, insert_nsi34, extract_nsi34),\n+\t(insert_pcrel, extract_pcrel, extract_pcrel0): New functions.\n+\t(extract_esync, extract_raq, extract_tbr, extract_sxl): Comment.\n+\t(powerpc_operands <D34, SI34, NSI34, PRA0, PRAQ, PCREL, PCREL0,\n+\tXTOP>): Define and add entries.\n+\t(P8LS, PMLS, P_D_MASK, P_DRAPCREL_MASK): Define.\n+\t(prefix_opcodes): Add pli, paddi, pla, psubi, plwz, plbz, pstw,\n+\tpstb, plhz, plha, psth, plfs, plfd, pstfs, pstfd, plq, plxsd,\n+\tplxssp, pld, plwa, pstxsd, pstxssp, pstxv, pstd, and pstq.\n+\n 2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n \t    Alan Modra  <amodra@gmail.com>\n "
    },
    {
      "sha": "aa7184230f518e7307c6edbe80f765615294cd8a",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 184,
      "deletions": 4,
      "changes": 188,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8acf14351c818d956babe50e61711740f378c941/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8acf14351c818d956babe50e61711740f378c941/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=8acf14351c818d956babe50e61711740f378c941",
      "patch": "@@ -596,6 +596,106 @@ extract_dxdn (uint64_t insn,\n   return -extract_dxd (insn, dialect, invalid);\n }\n \n+/* The D field in a 64-bit D form prefix instruction when the field is split\n+   into separate D0 and D1 fields.  */\n+\n+static uint64_t\n+insert_d34 (uint64_t insn,\n+\t    int64_t value,\n+\t    ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t    const char **errmsg ATTRIBUTE_UNUSED)\n+{\n+  return insn | ((value & 0x3ffff0000ULL) << 16) | (value & 0xffff);\n+}\n+\n+static int64_t\n+extract_d34 (uint64_t insn,\n+\t     ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t     int *invalid ATTRIBUTE_UNUSED)\n+{\n+  int64_t mask = 1ULL << 33;\n+  int64_t value = ((insn >> 16) & 0x3ffff0000ULL) | (insn & 0xffff);\n+  value = (value ^ mask) - mask;\n+  return value;\n+}\n+\n+/* The NSI34 field in an 8-byte D form prefix instruction.  This is the same\n+   as the SI34 field, only negated.  The extraction function always marks it\n+   as invalid, since we never want to recognize an instruction which uses\n+   a field of this type.  */\n+\n+static uint64_t\n+insert_nsi34 (uint64_t insn,\n+\t      int64_t value,\n+\t      ppc_cpu_t dialect,\n+\t      const char **errmsg)\n+{\n+  return insert_d34 (insn, -value, dialect, errmsg);\n+}\n+\n+static int64_t\n+extract_nsi34 (uint64_t insn,\n+\t       ppc_cpu_t dialect,\n+\t       int *invalid)\n+{\n+  int64_t value = extract_d34 (insn, dialect, invalid);\n+  *invalid = 1;\n+  return -value;\n+}\n+\n+/* The R field in an 8-byte prefix instruction when there are restrictions\n+   between R's value and the RA value (ie, they cannot both be non zero).  */\n+\n+static uint64_t\n+insert_pcrel (uint64_t insn,\n+\t      int64_t value,\n+\t      ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t      const char **errmsg)\n+{\n+  value &= 0x1;\n+  int64_t ra = (insn >> 16) & 0x1f;\n+  if (ra != 0 && value != 0)\n+    *errmsg = _(\"invalid R operand\");\n+\n+  return insn | (value << 52);\n+}\n+\n+static int64_t\n+extract_pcrel (uint64_t insn,\n+\t       ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t       int *invalid)\n+{\n+  /* If called with *invalid < 0 to return the value for missing\n+     operands, *invalid will be the negative count of missing operands\n+     including this one.  Return a default value of 1 if the PRA0/PRAQ\n+     operand was also omitted (ie. *invalid is -2).  Return a default\n+     value of 0 if the PRA0/PRAQ operand was not omitted\n+     (ie. *invalid is -1).  */\n+  if (*invalid < 0)\n+    return ~ *invalid & 1;\n+\n+  int64_t ra = (insn >> 16) & 0x1f;\n+  int64_t pcrel = (insn >> 52) & 0x1;\n+  if (ra != 0 && pcrel != 0)\n+    *invalid = 1;\n+\n+  return pcrel;\n+}\n+\n+/* Variant of extract_pcrel that sets invalid for R bit set.  The idea\n+   is to disassemble \"paddi rt,0,offset,1\" as \"pla rt,offset\".  */\n+\n+static int64_t\n+extract_pcrel0 (uint64_t insn,\n+\t\tppc_cpu_t dialect,\n+\t\tint *invalid)\n+{\n+  int64_t pcrel = extract_pcrel (insn, dialect, invalid);\n+  if (pcrel)\n+    *invalid = 1;\n+  return pcrel;\n+}\n+\n /* FXM mask in mfcr and mtcrf instructions.  */\n \n static uint64_t\n@@ -758,6 +858,7 @@ extract_esync (uint64_t insn,\n \t       ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n \t       int *invalid)\n {\n+  /* Missing optional operands have a value of zero.  */\n   if (*invalid < 0)\n     return 0;\n \n@@ -1013,6 +1114,7 @@ extract_raq (uint64_t insn,\n \t     ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n \t     int *invalid)\n {\n+  /* Missing optional operands have a value of zero.  */\n   if (*invalid < 0)\n     return 0;\n \n@@ -1338,6 +1440,7 @@ extract_tbr (uint64_t insn,\n \t     ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n \t     int *invalid)\n {\n+  /* Missing optional operands have a value of 268.  */\n   if (*invalid < 0)\n     return 268;\n \n@@ -1810,6 +1913,7 @@ extract_sxl (uint64_t insn,\n \t     ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n \t     int *invalid)\n {\n+  /* Missing optional operands have a value of one.  */\n   if (*invalid < 0)\n     return 1;\n   return (insn >> 11) & 0x1;\n@@ -2039,9 +2143,26 @@ const struct powerpc_operand powerpc_operands[] =\n   { 0xfffc, 0, NULL, NULL,\n     PPC_OPERAND_PARENS | PPC_OPERAND_SIGNED | PPC_OPERAND_DS },\n \n+  /* The D field in an 8-byte D form prefix instruction.  This is a displacement\n+     off a register, and implies that the next operand is a register in\n+     parentheses.  */\n+#define D34 DS + 1\n+  { 0x3ffffffff, PPC_OPSHIFT_INV, insert_d34, extract_d34,\n+    PPC_OPERAND_PARENS | PPC_OPERAND_SIGNED },\n+\n+  /* The SI field in an 8-byte D form prefix instruction.  */\n+#define SI34 D34 + 1\n+  { 0x3ffffffff, PPC_OPSHIFT_INV, insert_d34, extract_d34, PPC_OPERAND_SIGNED },\n+\n+  /* The NSI field in an 8-byte D form prefix instruction.  This is the\n+     same as the SI34 field, only negated.  */\n+#define NSI34 SI34 + 1\n+  { 0x3ffffffff, PPC_OPSHIFT_INV, insert_nsi34, extract_nsi34,\n+    PPC_OPERAND_NEGATIVE | PPC_OPERAND_SIGNED },\n+\n   /* The DUIS or BHRBE fields in a XFX form instruction, 10 bits\n      unsigned imediate */\n-#define DUIS DS + 1\n+#define DUIS NSI34 + 1\n #define BHRBE DUIS\n   { 0x3ff, 11, NULL, NULL, 0 },\n \n@@ -2217,16 +2338,33 @@ const struct powerpc_operand powerpc_operands[] =\n #define RA0 RA + 1\n   { 0x1f, 16, NULL, NULL, PPC_OPERAND_GPR_0 },\n \n+  /* Similar to above, but optional.  */\n+#define PRA0 RA0 + 1\n+  { 0x1f, 16, NULL, NULL, PPC_OPERAND_GPR_0 | PPC_OPERAND_OPTIONAL },\n+\n   /* The RA field in the DQ form lq or an lswx instruction, which have\n      special value restrictions.  */\n-#define RAQ RA0 + 1\n+#define RAQ PRA0 + 1\n #define RAX RAQ\n   { 0x1f, 16, insert_raq, extract_raq, PPC_OPERAND_GPR_0 },\n \n+  /* Similar to above, but optional.  */\n+#define PRAQ RAQ + 1\n+  { 0x1f, 16, insert_raq, extract_raq,\n+    PPC_OPERAND_GPR_0 | PPC_OPERAND_OPTIONAL },\n+\n+  /* The R field in an 8-byte D, DS, DQ or X form prefix instruction.  */\n+#define PCREL PRAQ + 1\n+#define PCREL_MASK (1ULL << 52)\n+  { 0x1, 52, insert_pcrel, extract_pcrel, PPC_OPERAND_OPTIONAL },\n+\n+#define PCREL0 PCREL + 1\n+  { 0x1, 52, insert_pcrel, extract_pcrel0, PPC_OPERAND_OPTIONAL },\n+\n   /* The RA field in a D or X form instruction which is an updating\n      load, which means that the RA field may not be zero and may not\n      equal the RT field.  */\n-#define RAL RAQ + 1\n+#define RAL PCREL0 + 1\n   { 0x1f, 16, insert_ral, extract_ral, PPC_OPERAND_GPR_0 },\n \n   /* The RA field in an lmw instruction, which has special value\n@@ -2651,8 +2789,12 @@ const struct powerpc_operand powerpc_operands[] =\n #define XTQ6 XSQ6\n   { 0x3f, PPC_OPSHIFT_INV, insert_xtq6, extract_xtq6, PPC_OPERAND_VSR },\n \n+  /* The XT field in a plxv instruction.  Runs into the OP field.  */\n+#define XTOP XSQ6 + 1\n+  { 0x3f, 21, NULL, NULL, PPC_OPERAND_VSR },\n+\n   /* The XA field in an XX3 form instruction.  This is split.  */\n-#define XA6 XTQ6 + 1\n+#define XA6 XTOP + 1\n   { 0x3f, PPC_OPSHIFT_INV, insert_xa6, extract_xa6, PPC_OPERAND_VSR },\n \n   /* The XB field in an XX2 or XX3 form instruction.  This is split.  */\n@@ -2730,9 +2872,21 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n #define SUFFIX_MASK ((1ULL << 32) - 1)\n #define PREFIX_MASK (SUFFIX_MASK << 32)\n \n+/* Prefix insn, eight byte load/store form 8LS.  */\n+#define P8LS (PREFIX_OP | PREFIX_FORM (0))\n+\n+/* Prefix insn, modified load/store form MLS.  */\n+#define PMLS (PREFIX_OP | PREFIX_FORM (2))\n+\n /* Prefix insn, modified register to register form MRR.  */\n #define PMRR (PREFIX_OP | PREFIX_FORM (3))\n \n+/* An 8-byte D form prefix instruction.  */\n+#define P_D_MASK (((-1ULL << 50) & ~PCREL_MASK) | OP_MASK)\n+\n+/* The same as P_D_MASK, but with the RA and PCREL fields specified.  */\n+#define P_DRAPCREL_MASK (P_D_MASK | PCREL_MASK | RA_MASK)\n+\n /* The main opcode combined with a trap code in the TO field of a D\n    form instruction.  Used for extended mnemonics for the trap\n    instructions.  */\n@@ -7815,6 +7969,32 @@ const unsigned int powerpc_num_opcodes =\n \n const struct powerpc_opcode prefix_opcodes[] = {\n {\"pnop\",\t  PMRR,\t\t       PREFIX_MASK,\tPOWERXX, 0,\t{0}},\n+{\"pli\",\t\t  PMLS|OP(14),\t       P_DRAPCREL_MASK,\tPOWERXX, 0,\t{RT, SI34}},\n+{\"paddi\",\t  PMLS|OP(14),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, RA0, SI34, PCREL0}},\n+{\"psubi\",\t  PMLS|OP(14),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, RA0, NSI34, PCREL0}},\n+{\"pla\",\t\t  PMLS|OP(14),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"plwz\",\t  PMLS|OP(32),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"plbz\",\t  PMLS|OP(34),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"pstw\",\t  PMLS|OP(36),\t       P_D_MASK,\tPOWERXX, 0,\t{RS, D34, PRA0, PCREL}},\n+{\"pstb\",\t  PMLS|OP(38),\t       P_D_MASK,\tPOWERXX, 0,\t{RS, D34, PRA0, PCREL}},\n+{\"plhz\",\t  PMLS|OP(40),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"plwa\",\t  P8LS|OP(41),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"plxsd\",\t  P8LS|OP(42),\t       P_D_MASK,\tPOWERXX, 0,\t{VD, D34, PRA0, PCREL}},\n+{\"plha\",\t  PMLS|OP(42),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"plxssp\",\t  P8LS|OP(43),\t       P_D_MASK,\tPOWERXX, 0,\t{VD, D34, PRA0, PCREL}},\n+{\"psth\",\t  PMLS|OP(44),\t       P_D_MASK,\tPOWERXX, 0,\t{RS, D34, PRA0, PCREL}},\n+{\"pstxsd\",\t  P8LS|OP(46),\t       P_D_MASK,\tPOWERXX, 0,\t{VS, D34, PRA0, PCREL}},\n+{\"pstxssp\",\t  P8LS|OP(47),\t       P_D_MASK,\tPOWERXX, 0,\t{VS, D34, PRA0, PCREL}},\n+{\"plfs\",\t  PMLS|OP(48),\t       P_D_MASK,\tPOWERXX, 0,\t{FRT, D34, PRA0, PCREL}},\n+{\"plxv\",\t  P8LS|OP(50),\t       P_D_MASK&~OP(1),\tPOWERXX, 0,\t{XTOP, D34, PRA0, PCREL}},\n+{\"plfd\",\t  PMLS|OP(50),\t       P_D_MASK,\tPOWERXX, 0,\t{FRT, D34, PRA0, PCREL}},\n+{\"pstfs\",\t  PMLS|OP(52),\t       P_D_MASK,\tPOWERXX, 0,\t{FRS, D34, PRA0, PCREL}},\n+{\"pstxv\",\t  P8LS|OP(54),\t       P_D_MASK&~OP(1),\tPOWERXX, 0,\t{XTOP, D34, PRA0, PCREL}},\n+{\"pstfd\",\t  PMLS|OP(54),\t       P_D_MASK,\tPOWERXX, 0,\t{FRS, D34, PRA0, PCREL}},\n+{\"plq\",\t\t  P8LS|OP(56),\t       P_D_MASK,\tPOWERXX, 0,\t{RTQ, D34, PRAQ, PCREL}},\n+{\"pld\",\t\t  P8LS|OP(57),\t       P_D_MASK,\tPOWERXX, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"pstq\",\t  P8LS|OP(60),\t       P_D_MASK,\tPOWERXX, 0,\t{RSQ, D34, PRA0, PCREL}},\n+{\"pstd\",\t  P8LS|OP(61),\t       P_D_MASK,\tPOWERXX, 0,\t{RS, D34, PRA0, PCREL}},\n };\n \n const unsigned int prefix_num_opcodes ="
    }
  ]
}