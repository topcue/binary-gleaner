{
  "sha": "df0da8a2b80315485330c03c18b704b8d7b3e9c2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGYwZGE4YTJiODAzMTU0ODUzMzBjMDNjMThiNzA0YjhkN2IzZTljMg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-02-07T14:36:34Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-02-07T14:37:45Z"
    },
    "message": "gdbserver: When attaching, add process before lwps\n\nThe recent BP/WP changes for AArch64 swapping the order in add_lwp()\nso that the process was added before the lwp. This was due to the lwp\ncreation requiring the process data.\n\nThis also needs changing in linux_attach().\n\nAlso add additional checks to make sure cannot attach to the same\nprocess twice. Add test case for this - do this by splitting\nattach.exp into distinct pass and error case sections.\n\nFixes gdb.server/ext-attach.exp on Aarch64.\n\ngdb/gdbserver/ChangeLog:\n\n\t* linux-low.c (linux_attach): Add process before lwp.\n\t* server.c (attach_inferior): Check if already attached.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/attach.exp: Add double attach test.",
    "tree": {
      "sha": "52e46df8286bc7bb660d43987950022d407d9442",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/52e46df8286bc7bb660d43987950022d407d9442"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/df0da8a2b80315485330c03c18b704b8d7b3e9c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df0da8a2b80315485330c03c18b704b8d7b3e9c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/df0da8a2b80315485330c03c18b704b8d7b3e9c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df0da8a2b80315485330c03c18b704b8d7b3e9c2/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2012bf013b2ce507b181c0d9049ad946b2a59d8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2012bf013b2ce507b181c0d9049ad946b2a59d8a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2012bf013b2ce507b181c0d9049ad946b2a59d8a"
    }
  ],
  "stats": {
    "total": 124,
    "additions": 100,
    "deletions": 24
  },
  "files": [
    {
      "sha": "e9fe5ab03f01cf1167fec8988b1b687b03552aa9",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=df0da8a2b80315485330c03c18b704b8d7b3e9c2",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-07  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* linux-low.c (linux_attach): Add process before lwp.\n+\t* server.c (attach_inferior): Check if already attached.\n+\n 2019-02-07  Tom Tromey  <tom@tromey.com>\n \n \t* x86-tdesc.h: Rename include guard."
    },
    {
      "sha": "8c5a51f23c6cef7618845bc4cf10b927e940df47",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=df0da8a2b80315485330c03c18b704b8d7b3e9c2",
      "patch": "@@ -1188,18 +1188,19 @@ linux_attach (unsigned long pid)\n   ptid_t ptid = ptid_t (pid, pid, 0);\n   int err;\n \n+  proc = linux_add_process (pid, 1);\n+\n   /* Attach to PID.  We will check for other threads\n      soon.  */\n   err = linux_attach_lwp (ptid);\n   if (err != 0)\n     {\n-      std::string reason = linux_ptrace_attach_fail_reason_string (ptid, err);\n+      remove_process (proc);\n \n+      std::string reason = linux_ptrace_attach_fail_reason_string (ptid, err);\n       error (\"Cannot attach to process %ld: %s\", pid, reason.c_str ());\n     }\n \n-  proc = linux_add_process (pid, 1);\n-\n   /* Don't ignore the initial SIGSTOP if we just attached to this\n      process.  It will be collected by wait shortly.  */\n   initial_thread = find_thread_ptid (ptid_t (pid, pid, 0));"
    },
    {
      "sha": "e960c10d40266f71df3b70307691bdde59c9852e",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=df0da8a2b80315485330c03c18b704b8d7b3e9c2",
      "patch": "@@ -295,6 +295,9 @@ attach_inferior (int pid)\n   /* myattach should return -1 if attaching is unsupported,\n      0 if it succeeded, and call error() otherwise.  */\n \n+  if (find_process_pid (pid) != nullptr)\n+    error (\"Already attached to process %d\\n\", pid);\n+\n   if (myattach (pid) != 0)\n     return -1;\n "
    },
    {
      "sha": "1369b5a6b37d573d80c9415dbfc483c3c3792bbe",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=df0da8a2b80315485330c03c18b704b8d7b3e9c2",
      "patch": "@@ -1,3 +1,7 @@\n+2019-02-07  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.base/attach.exp: Add double attach test.\n+\n 2019-02-07  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* lib/gdb.exp (default_gdb_start): Don't match pagination"
    },
    {
      "sha": "ec6e45766bcad6eda9eddb8e8724d2126a5168ae",
      "filename": "gdb/testsuite/gdb.base/attach.exp",
      "status": "modified",
      "additions": 84,
      "deletions": 21,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/testsuite/gdb.base/attach.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df0da8a2b80315485330c03c18b704b8d7b3e9c2/gdb/testsuite/gdb.base/attach.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/attach.exp?ref=df0da8a2b80315485330c03c18b704b8d7b3e9c2",
      "patch": "@@ -45,7 +45,10 @@ if [get_compiler_info] {\n     return -1\n }\n \n-proc do_attach_tests {} {\n+# This is a test of the error cases for gdb's ability to attach to a\n+# running process.\n+\n+proc_with_prefix do_attach_failure_tests {} {\n     global gdb_prompt\n     global binfile\n     global escapedbinfile\n@@ -54,7 +57,9 @@ proc do_attach_tests {} {\n     global subdir\n     global timeout\n     global decimal\n-    \n+\n+    clean_restart $binfile\n+\n     # Figure out a regular expression that will match the sysroot,\n     # noting that the default sysroot is \"target:\", and also noting\n     # that GDB will strip \"target:\" from the start of filenames when\n@@ -154,6 +159,75 @@ proc do_attach_tests {} {\n \t}\n     }\n     \n+    # Verify that we can't double attach to the process.\n+\n+    set test \"first attach\"\n+    gdb_test_multiple \"attach $testpid\" \"$test\" {\n+\t-re \"Attaching to program.*`?$escapedbinfile'?, process $testpid.*main.*at .*$srcfile:.*$gdb_prompt $\" {\n+\t    pass \"$test\"\n+\t}\n+\t-re \"Attaching to program.*`?$escapedbinfile\\.exe'?, process $testpid.*\\[Switching to thread $testpid\\..*\\].*$gdb_prompt $\" {\n+\t    # Response expected on Cygwin.\n+\t    pass \"$test\"\n+\t}\n+    }\n+\n+    gdb_test \"add-inferior\" \"Added inferior 2.*\" \"add empty inferior 2\"\n+    gdb_test \"inferior 2\" \"Switching to inferior 2.*\" \"switch to inferior 2\"\n+\n+    set test \"fail to attach again\"\n+    gdb_test_multiple \"attach $testpid\" \"$test\" {\n+\t-re \"Attaching to process $testpid.*warning: process .* is already traced by process .*$gdb_prompt $\" {\n+\t    pass \"$test\"\n+\t}\n+\t-re \"Attaching to process .* failed.*$gdb_prompt $\" {\n+\t    # Response expected when using gdbserver.\n+\t    pass \"$test\"\n+\t}\n+    }\n+\n+    gdb_test \"inferior 1\" \"Switching to inferior 1.*\" \"switch to inferior 1\"\n+    set test \"exit after attach failures\"\n+    gdb_test \"kill\" \\\n+\t\"\" \\\n+\t\"$test\" \\\n+\t\"Kill the program being debugged.*y or n. $\" \\\n+\t\"y\"\n+\n+    # Another \"don't leave a process around\"\n+    kill_wait_spawned_process $test_spawn_id\n+}\n+\n+# This is a test of gdb's ability to attach to a running process.\n+\n+proc_with_prefix do_attach_tests {} {\n+    global gdb_prompt\n+    global binfile\n+    global escapedbinfile\n+    global srcfile\n+    global testfile\n+    global subdir\n+    global timeout\n+    global decimal\n+\n+    clean_restart $binfile\n+\n+    # Figure out a regular expression that will match the sysroot,\n+    # noting that the default sysroot is \"target:\", and also noting\n+    # that GDB will strip \"target:\" from the start of filenames when\n+    # operating on the local filesystem.  However the default sysroot\n+    # can be set via configure option --with-sysroot, which can be \"/\".\n+    # If $binfile is a absolute path, so pattern\n+    # \"$sysroot$escapedbinfile\" below is wrong.  Use [^\\r\\n]* to make\n+    # $sysroot simple.\n+    set sysroot \"\\[^\\r\\n\\]*\"\n+\n+    # Start the program running and then wait for a bit, to be sure\n+    # that it can be attached to.\n+\n+    set test_spawn_id [spawn_wait_for_attach $binfile]\n+    set testpid [spawn_id_get_pid $test_spawn_id]\n+\n     # Verify that we can attach to the process by first giving its\n     # executable name via the file command, and using attach with the\n     # process ID.\n@@ -313,10 +387,14 @@ proc do_attach_tests {} {\n     kill_wait_spawned_process $test_spawn_id\n }\n \n-proc do_call_attach_tests {} {\n+# Test attaching when the target is inside a system call.\n+\n+proc_with_prefix do_call_attach_tests {} {\n     global gdb_prompt\n     global binfile2\n-    \n+\n+    clean_restart\n+\n     set test_spawn_id [spawn_wait_for_attach $binfile2]\n     set testpid [spawn_id_get_pid $test_spawn_id]\n \n@@ -358,7 +436,7 @@ proc do_call_attach_tests {} {\n     kill_wait_spawned_process $test_spawn_id\n }\n \n-proc do_command_attach_tests {} {\n+proc_with_prefix do_command_attach_tests {} {\n     global gdb_prompt\n     global binfile\n     global verbose\n@@ -435,23 +513,8 @@ proc test_command_line_attach_run {} {\n     }\n }\n \n-# Start with a fresh gdb\n-\n-gdb_exit\n-gdb_start\n-gdb_reinitialize_dir $srcdir/$subdir\n-gdb_load ${binfile}\n-\n-# This is a test of gdb's ability to attach to a running process.\n-\n do_attach_tests\n-\n-# Test attaching when the target is inside a system call\n-\n-gdb_exit\n-gdb_start\n-\n-gdb_reinitialize_dir $srcdir/$subdir\n+do_attach_failure_tests\n do_call_attach_tests\n \n # Test \"gdb --pid\""
    }
  ]
}