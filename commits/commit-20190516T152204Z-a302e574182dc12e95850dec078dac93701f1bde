{
  "sha": "a302e574182dc12e95850dec078dac93701f1bde",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTMwMmU1NzQxODJkYzEyZTk1ODUwZGVjMDc4ZGFjOTM3MDFmMWJkZQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-15T15:54:23Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:22:04Z"
    },
    "message": "[PATCH 4/57][Arm][GAS] Add support for MVE instructions: vabav, vmladav and vmlsdav\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (struct asm_opcode): Make avalue a full int.\n\t(BAD_ODD, BAD_EVEN, BAD_SIMD_TYPE): New errors.\n\t(enum operand_parse_code): Handle new operands.\n\t(parse_operands): Likewise.\n\t(M_MNEM_vabav, M_MNEM_vmladav, M_MNEM_vmladava, M_MNEM_vmladavx,\n\t M_MNEM_vmladavax, M_MNEM_vmlsdav, M_MNEM_vmlsdava, M_MNEM_vmlsdavx,\n\t M_MNEM_vmlsdavax): Define new encodings.\n\t(NEON_SHAPE_DEF): Add new shape.\n\t(neon_check_type): Use BAD_SIMD_TYPE.\n\t(mve_encode_rqq): New encoding helper function.\n\t(do_mve_vabav, do_mve_vmladav): New encoding functions.\n\t(mCEF): New MACRO.\n\t* testsuite/gas/arm/mve-vabav-bad.d: New test.\n\t* testsuite/gas/arm/mve-vabav-bad.l: New test.\n\t* testsuite/gas/arm/mve-vabav-bad.s: New test.\n\t* testsuite/gas/arm/mve-vmladav-bad.d: New test.\n\t* testsuite/gas/arm/mve-vmladav-bad.l: New test.\n\t* testsuite/gas/arm/mve-vmladav-bad.s: New test.\n\t* testsuite/gas/arm/mve-vmlav-bad.d: New test.\n\t* testsuite/gas/arm/mve-vmlav-bad.l: New test.\n\t* testsuite/gas/arm/mve-vmlav-bad.s: New test.\n\t* testsuite/gas/arm/mve-vmlsdav-bad.d: New test.\n\t* testsuite/gas/arm/mve-vmlsdav-bad.l: New test.\n\t* testsuite/gas/arm/mve-vmlsdav-bad.s: New test.",
    "tree": {
      "sha": "5847c7bf920d7ad1d3d205b447300b33ad792cde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5847c7bf920d7ad1d3d205b447300b33ad792cde"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a302e574182dc12e95850dec078dac93701f1bde",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a302e574182dc12e95850dec078dac93701f1bde",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a302e574182dc12e95850dec078dac93701f1bde",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a302e574182dc12e95850dec078dac93701f1bde/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "485dee97c6431267b662b723eb092a6abfa4167c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/485dee97c6431267b662b723eb092a6abfa4167c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/485dee97c6431267b662b723eb092a6abfa4167c"
    }
  ],
  "stats": {
    "total": 491,
    "additions": 488,
    "deletions": 3
  },
  "files": [
    {
      "sha": "dafb420b7e970ad5f688571cb46cf622e096b2d3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -1,3 +1,30 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (struct asm_opcode): Make avalue a full int.\n+\t(BAD_ODD, BAD_EVEN, BAD_SIMD_TYPE): New errors.\n+\t(enum operand_parse_code): Handle new operands.\n+\t(parse_operands): Likewise.\n+\t(M_MNEM_vabav, M_MNEM_vmladav, M_MNEM_vmladava, M_MNEM_vmladavx,\n+\t M_MNEM_vmladavax, M_MNEM_vmlsdav, M_MNEM_vmlsdava, M_MNEM_vmlsdavx,\n+\t M_MNEM_vmlsdavax): Define new encodings.\n+\t(NEON_SHAPE_DEF): Add new shape.\n+\t(neon_check_type): Use BAD_SIMD_TYPE.\n+\t(mve_encode_rqq): New encoding helper function.\n+\t(do_mve_vabav, do_mve_vmladav): New encoding functions.\n+\t(mCEF): New MACRO.\n+\t* testsuite/gas/arm/mve-vabav-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vabav-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vabav-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vmladav-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vmladav-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vmladav-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vmlav-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vmlav-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vmlav-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vmlsdav-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vmlsdav-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vmlsdav-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_neon_abs_neg): Make it accept MVE variant."
    },
    {
      "sha": "39e81ba510503e3645fb371a7d7cb36f4b0ffbd9",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 130,
      "deletions": 3,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -708,7 +708,7 @@ struct asm_opcode\n   unsigned int tag : 4;\n \n   /* Basic instruction code.  */\n-  unsigned int avalue : 28;\n+  unsigned int avalue;\n \n   /* Thumb-format instruction code.  */\n   unsigned int tvalue;\n@@ -851,6 +851,8 @@ struct asm_opcode\n #define BAD_ARGS\t_(\"bad arguments to instruction\")\n #define BAD_SP          _(\"r13 not allowed here\")\n #define BAD_PC\t\t_(\"r15 not allowed here\")\n+#define BAD_ODD\t\t_(\"Odd register not allowed here\")\n+#define BAD_EVEN\t_(\"Even register not allowed here\")\n #define BAD_COND\t_(\"instruction cannot be conditional\")\n #define BAD_OVERLAP\t_(\"registers may not be the same\")\n #define BAD_HIREG\t_(\"lo register required\")\n@@ -884,6 +886,7 @@ struct asm_opcode\n \t\t\t  \" operand\")\n #define MVE_BAD_SP\t_(\"Warning: instruction is UNPREDICTABLE with SP\" \\\n \t\t\t  \" operand\")\n+#define BAD_SIMD_TYPE\t_(\"bad type in SIMD instruction\")\n \n static struct hash_control * arm_ops_hsh;\n static struct hash_control * arm_cond_hsh;\n@@ -6714,8 +6717,12 @@ enum operand_parse_code\n \t\t */\n   OP_RNSDQMQR,\t/* Neon single, double or quad register, MVE vector register or\n \t\t   GPR (no SP/SP)  */\n+  OP_RMQ,\t/* MVE vector register.  */\n+\n   /* New operands for Armv8.1-M Mainline.  */\n   OP_LR,\t/* ARM LR register */\n+  OP_RRe,\t/* ARM register, only even numbered.  */\n+  OP_RRo,\t/* ARM register, only odd numbered, not r13 or r15.  */\n   OP_RRnpcsp_I32, /* ARM register (no BadReg) or literal 1 .. 32 */\n \n   OP_REGLST,\t/* ARM register list */\n@@ -6973,6 +6980,8 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \tcase OP_RRnpc:\n \tcase OP_RRnpcsp:\n \tcase OP_oRR:\n+\tcase OP_RRe:\n+\tcase OP_RRo:\n \tcase OP_LR:\n \tcase OP_oLR:\n \tcase OP_RR:    po_reg_or_fail (REG_TYPE_RN);\t  break;\n@@ -7037,6 +7046,9 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  po_reg_or_fail (REG_TYPE_NSDQ);\n \t  inst.error = 0;\n \t  break;\n+\tcase OP_RMQ:\n+\t  po_reg_or_fail (REG_TYPE_MQ);\n+\t  break;\n \t/* Neon scalar. Using an element size of 8 means that some invalid\n \t   scalars are accepted here, so deal with those in later code.  */\n \tcase OP_RNSC:  po_scalar_or_goto (8, failure);    break;\n@@ -7557,6 +7569,24 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t    inst.error = _(\"operand must be LR register\");\n \t  break;\n \n+\tcase OP_RRe:\n+\t  if (inst.operands[i].isreg\n+\t      && (inst.operands[i].reg & 0x00000001) != 0)\n+\t    inst.error = BAD_ODD;\n+\t  break;\n+\n+\tcase OP_RRo:\n+\t  if (inst.operands[i].isreg)\n+\t    {\n+\t      if ((inst.operands[i].reg & 0x00000001) != 1)\n+\t\tinst.error = BAD_EVEN;\n+\t      else if (inst.operands[i].reg == REG_SP)\n+\t\tas_tsktsk (MVE_BAD_SP);\n+\t      else if (inst.operands[i].reg == REG_PC)\n+\t\tinst.error = BAD_PC;\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -13793,6 +13823,17 @@ do_t_loloop (void)\n     }\n }\n \n+/* MVE instruction encoder helpers.  */\n+#define M_MNEM_vabav\t0xee800f01\n+#define M_MNEM_vmladav\t  0xeef00e00\n+#define M_MNEM_vmladava\t  0xeef00e20\n+#define M_MNEM_vmladavx\t  0xeef01e00\n+#define M_MNEM_vmladavax  0xeef01e20\n+#define M_MNEM_vmlsdav\t  0xeef00e01\n+#define M_MNEM_vmlsdava\t  0xeef00e21\n+#define M_MNEM_vmlsdavx\t  0xeef01e01\n+#define M_MNEM_vmlsdavax  0xeef01e21\n+\n /* Neon instruction encoder helpers.  */\n \n /* Encodings for the different types for various Neon opcodes.  */\n@@ -13956,6 +13997,7 @@ NEON_ENC_TAB\n      - a table used to drive neon_select_shape.  */\n \n #define NEON_SHAPE_DEF\t\t\t\\\n+  X(3, (R, Q, Q), QUAD),\t\t\\\n   X(3, (D, D, D), DOUBLE),\t\t\\\n   X(3, (Q, Q, Q), QUAD),\t\t\\\n   X(3, (D, D, I), DOUBLE),\t\t\\\n@@ -14683,7 +14725,7 @@ neon_check_type (unsigned els, enum neon_shape ns, ...)\n \n \t\t  if ((given_type & types_allowed) == 0)\n \t\t    {\n-\t\t      first_error (_(\"bad type in SIMD instruction\"));\n+\t\t      first_error (BAD_SIMD_TYPE);\n \t\t      return badtype;\n \t\t    }\n \t\t}\n@@ -15165,6 +15207,19 @@ mve_encode_qqr (int size, int fp)\n   inst.is_neon = 1;\n }\n \n+static void\n+mve_encode_rqq (unsigned bit28, unsigned size)\n+{\n+  inst.instruction |= bit28 << 28;\n+  inst.instruction |= neon_logbits (size) << 20;\n+  inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+  inst.instruction |= inst.operands[0].reg << 12;\n+  inst.instruction |= HI1 (inst.operands[1].reg) << 7;\n+  inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+  inst.instruction |= LOW4 (inst.operands[2].reg);\n+  inst.is_neon = 1;\n+}\n+\n /* Encode insns with bit pattern:\n \n   |28/24|23|22 |21 20|19 16|15 12|11    8|7|6|5|4|3  0|\n@@ -15883,6 +15938,65 @@ do_neon_qdmulh (void)\n     }\n }\n \n+static void\n+do_mve_vabav (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_RQQ, NS_NULL);\n+\n+  if (rs == NS_NULL)\n+    return;\n+\n+  if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    return;\n+\n+  struct neon_type_el et = neon_check_type (2, NS_NULL, N_EQK, N_KEY | N_S8\n+\t\t\t\t\t    | N_S16 | N_S32 | N_U8 | N_U16\n+\t\t\t\t\t    | N_U32);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  mve_encode_rqq (et.type == NT_unsigned, et.size);\n+}\n+\n+static void\n+do_mve_vmladav (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_RQQ, NS_NULL);\n+  struct neon_type_el et = neon_check_type (3, rs,\n+\t\t\t\t\t    N_EQK, N_EQK, N_SU_MVE | N_KEY);\n+\n+  if (et.type == NT_unsigned\n+      && (inst.instruction == M_MNEM_vmladavx\n+\t  || inst.instruction == M_MNEM_vmladavax\n+\t  || inst.instruction == M_MNEM_vmlsdav\n+\t  || inst.instruction == M_MNEM_vmlsdava\n+\t  || inst.instruction == M_MNEM_vmlsdavx\n+\t  || inst.instruction == M_MNEM_vmlsdavax))\n+    first_error (BAD_SIMD_TYPE);\n+\n+  constraint (inst.operands[2].reg > 14,\n+\t      _(\"MVE vector register in the range [Q0..Q7] expected\"));\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  if (inst.instruction == M_MNEM_vmlsdav\n+      || inst.instruction == M_MNEM_vmlsdava\n+      || inst.instruction == M_MNEM_vmlsdavx\n+      || inst.instruction == M_MNEM_vmlsdavax)\n+    inst.instruction |= (et.size == 8) << 28;\n+  else\n+    inst.instruction |= (et.size == 8) << 8;\n+\n+  mve_encode_rqq (et.type == NT_unsigned, 64);\n+  inst.instruction |= (et.size == 32) << 16;\n+}\n+\n static void\n do_neon_qrdmlah (void)\n {\n@@ -20573,7 +20687,7 @@ static struct asm_barrier_opt barrier_opt_names[] =\n \n /*   */\n #define mCEF(mnem, op, nops, ops, enc)\t\t\t\t\\\n-  { #mnem, OPS##nops ops, OT_csuffixF, 0, M_MNEM##op,\t\t\\\n+  { #mnem, OPS##nops ops, OT_csuffixF, M_MNEM##op, M_MNEM##op,\t\\\n     ARM_VARIANT, THUMB_VARIANT, do_##enc, do_##enc, 1 }\n \n \n@@ -22633,6 +22747,19 @@ static const struct asm_opcode insns[] =\n  ToC(\"vpsteet\",\tfe716f4d, 0, (), mve_vpt),\n  ToC(\"vpsteee\",\tfe712f4d, 0, (), mve_vpt),\n \n+ /* MVE and MVE FP only.  */\n+ mCEF(vabav,\t_vabav,\t    3, (RRnpcsp, RMQ, RMQ),\t\t  mve_vabav),\n+ mCEF(vmladav,\t  _vmladav,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmladava,\t  _vmladava,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmladavx,\t  _vmladavx,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmladavax,  _vmladavax,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmlav,\t  _vmladav,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmlava,\t  _vmladava,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmlsdav,\t  _vmlsdav,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmlsdava,\t  _vmlsdava,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmlsdavx,\t  _vmlsdavx,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+ mCEF(vmlsdavax,  _vmlsdavax,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n+\n #undef  ARM_VARIANT\n #define ARM_VARIANT    & fpu_vfp_ext_v1xd\n #undef  THUMB_VARIANT"
    },
    {
      "sha": "42c9dad6336cd2a610652bd6bb8798f15ebb8fcf",
      "filename": "gas/testsuite/gas/arm/mve-vabav-bad.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vabav-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vabav-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vabav-bad.d?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,6 @@\n+#name: bad MVE VABAV instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vabav-bad.l\n+\n+.*: +file format .*arm.*\n+"
    },
    {
      "sha": "40d44832bddb84bae35f488e9656fa615ac81a6e",
      "filename": "gas/testsuite/gas/arm/mve-vabav-bad.l",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vabav-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vabav-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vabav-bad.l?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,18 @@\n+[^:]*: Assembler messages:\n+[^:]*:13: Error: bad type in SIMD instruction -- `vabav.s64 r0,q0,q1'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vabav.f16 r0,q0,q1'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vabav.f32 r0,q0,q1'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vabav.p8 r0,q0,q1'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vabav.p16 r0,q0,q1'\n+[^:]*:18: Error: r13 not allowed here -- `vabav.s32 r13,q0,q1'\n+[^:]*:19: Error: r15 not allowed here -- `vabav.s32 r15,q0,q1'\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Error: syntax error -- `vabaveq.s32 r0,q0,q1'\n+[^:]*:23: Error: syntax error -- `vabaveq.s32 r0,q0,q1'\n+[^:]*:25: Error: vector predicated instruction should be in VPT/VPST block -- `vabavt.s32 r0,q0,q1'\n+[^:]*:26: Error: vector predicated instruction should be in VPT/VPST block -- `vabavt.s32 r0,q0,q1'"
    },
    {
      "sha": "dfb8dee3965f6ddd7fa35afd97e1334834d34cf3",
      "filename": "gas/testsuite/gas/arm/mve-vabav-bad.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vabav-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vabav-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vabav-bad.s?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,26 @@\n+.macro cond op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s32 r0, q0, q1\n+.endr\n+.endm\n+\n+\n+\n+.syntax unified\n+.text\n+.thumb\n+vabav.s64 r0, q0, q1\n+vabav.f16 r0, q0, q1\n+vabav.f32 r0, q0, q1\n+vabav.p8 r0, q0, q1\n+vabav.p16 r0, q0, q1\n+vabav.s32 r13, q0, q1\n+vabav.s32 r15, q0, q1\n+cond vabav\n+vpst\n+vabaveq.s32 r0, q0, q1\n+vabaveq.s32 r0, q0, q1\n+it eq\n+vabavt.s32 r0, q0, q1\n+vabavt.s32 r0, q0, q1"
    },
    {
      "sha": "eb82d47ffc9cc19291101d2709140e5e561d702a",
      "filename": "gas/testsuite/gas/arm/mve-vmladav-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmladav-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmladav-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmladav-bad.d?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Bad MVE VMLADAV instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vmladav-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "fae770cc362bf384ed03fdf75bd7c757764c3584",
      "filename": "gas/testsuite/gas/arm/mve-vmladav-bad.l",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmladav-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmladav-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmladav-bad.l?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,55 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Error: bad type in SIMD instruction -- `vmladav.s64 r0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vmladav.f32 r0,q1,q2'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vmladava.s64 r0,q1,q2'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vmladava.f32 r0,q1,q2'\n+[^:]*:18: Error: bad type in SIMD instruction -- `vmladavx.s64 r0,q1,q2'\n+[^:]*:19: Error: bad type in SIMD instruction -- `vmladavx.f32 r0,q1,q2'\n+[^:]*:20: Error: bad type in SIMD instruction -- `vmladavax.s64 r0,q1,q2'\n+[^:]*:21: Error: bad type in SIMD instruction -- `vmladavax.f32 r0,q1,q2'\n+[^:]*:22: Error: bad type in SIMD instruction -- `vmladavx.u32 r0,q1,q2'\n+[^:]*:23: Error: bad type in SIMD instruction -- `vmladavax.u16 r0,q1,q2'\n+[^:]*:25: Error: syntax error -- `vmladaveq.s32 r0,q1,q2'\n+[^:]*:26: Error: syntax error -- `vmladaveq.s32 r0,q1,q2'\n+[^:]*:28: Error: syntax error -- `vmladaveq.s32 r0,q1,q2'\n+[^:]*:29: Error: vector predicated instruction should be in VPT/VPST block -- `vmladavt.s32 r0,q1,q2'\n+[^:]*:31: Error: instruction missing MVE vector predication code -- `vmladav.s32 r0,q1,q2'\n+[^:]*:33: Error: syntax error -- `vmladavaeq.s32 r0,q1,q2'\n+[^:]*:34: Error: syntax error -- `vmladavaeq.s32 r0,q1,q2'\n+[^:]*:36: Error: syntax error -- `vmladavaeq.s32 r0,q1,q2'\n+[^:]*:37: Error: vector predicated instruction should be in VPT/VPST block -- `vmladavat.s32 r0,q1,q2'\n+[^:]*:39: Error: instruction missing MVE vector predication code -- `vmladava.s32 r0,q1,q2'\n+[^:]*:41: Error: syntax error -- `vmladavxeq.s32 r0,q1,q2'\n+[^:]*:42: Error: syntax error -- `vmladavxeq.s32 r0,q1,q2'\n+[^:]*:44: Error: syntax error -- `vmladavxeq.s32 r0,q1,q2'\n+[^:]*:45: Error: vector predicated instruction should be in VPT/VPST block -- `vmladavxt.s32 r0,q1,q2'\n+[^:]*:47: Error: instruction missing MVE vector predication code -- `vmladavx.s32 r0,q1,q2'\n+[^:]*:49: Error: syntax error -- `vmladavaxeq.s32 r0,q1,q2'\n+[^:]*:50: Error: syntax error -- `vmladavaxeq.s32 r0,q1,q2'\n+[^:]*:52: Error: syntax error -- `vmladavaxeq.s32 r0,q1,q2'\n+[^:]*:53: Error: vector predicated instruction should be in VPT/VPST block -- `vmladavaxt.s32 r0,q1,q2'\n+[^:]*:55: Error: instruction missing MVE vector predication code -- `vmladavax.s32 r0,q1,q2'"
    },
    {
      "sha": "6621372d287d3617c1bba07f7645336a99d9f8f3",
      "filename": "gas/testsuite/gas/arm/mve-vmladav-bad.s",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmladav-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmladav-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmladav-bad.s?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,55 @@\n+.macro cond, op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 r0, q1, q2\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond vmladav\n+cond vmladava\n+cond vmladavx\n+cond vmladavax\n+vmladav.s64 r0, q1, q2\n+vmladav.f32 r0, q1, q2\n+vmladava.s64 r0, q1, q2\n+vmladava.f32 r0, q1, q2\n+vmladavx.s64 r0, q1, q2\n+vmladavx.f32 r0, q1, q2\n+vmladavax.s64 r0, q1, q2\n+vmladavax.f32 r0, q1, q2\n+vmladavx.u32 r0, q1, q2\n+vmladavax.u16 r0, q1, q2\n+it eq\n+vmladaveq.s32 r0, q1, q2\n+vmladaveq.s32 r0, q1, q2\n+vpst\n+vmladaveq.s32 r0, q1, q2\n+vmladavt.s32 r0, q1, q2\n+vpst\n+vmladav.s32 r0, q1, q2\n+it eq\n+vmladavaeq.s32 r0, q1, q2\n+vmladavaeq.s32 r0, q1, q2\n+vpst\n+vmladavaeq.s32 r0, q1, q2\n+vmladavat.s32 r0, q1, q2\n+vpst\n+vmladava.s32 r0, q1, q2\n+it eq\n+vmladavxeq.s32 r0, q1, q2\n+vmladavxeq.s32 r0, q1, q2\n+vpst\n+vmladavxeq.s32 r0, q1, q2\n+vmladavxt.s32 r0, q1, q2\n+vpst\n+vmladavx.s32 r0, q1, q2\n+it eq\n+vmladavaxeq.s32 r0, q1, q2\n+vmladavaxeq.s32 r0, q1, q2\n+vpst\n+vmladavaxeq.s32 r0, q1, q2\n+vmladavaxt.s32 r0, q1, q2\n+vpst\n+vmladavax.s32 r0, q1, q2"
    },
    {
      "sha": "6b6af1b44d666d084df33b2f745353d17ee9f780",
      "filename": "gas/testsuite/gas/arm/mve-vmlav-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlav-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlav-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmlav-bad.d?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Bad MVE VMLAV instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vmlav-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "018a8fb5a5d1a0ee528ee8d3eca5491c813d3b5d",
      "filename": "gas/testsuite/gas/arm/mve-vmlav-bad.l",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlav-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlav-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmlav-bad.l?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,29 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:11: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Error: bad type in SIMD instruction -- `vmlav.s64 r0,q1,q2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vmlav.f32 r0,q1,q2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vmlava.s64 r0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vmlava.f32 r0,q1,q2'\n+[^:]*:16: Error: bad instruction `vmlavx.s32 r0,q1,q2'\n+[^:]*:17: Error: bad instruction `vmlavax.s32 r0,q1,q2'\n+[^:]*:19: Error: syntax error -- `vmlaveq.s32 r0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vmlaveq.s32 r0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vmlaveq.s32 r0,q1,q2'\n+[^:]*:23: Error: vector predicated instruction should be in VPT/VPST block -- `vmlavt.s32 r0,q1,q2'\n+[^:]*:25: Error: instruction missing MVE vector predication code -- `vmlav.s32 r0,q1,q2'\n+[^:]*:27: Error: syntax error -- `vmlavaeq.s32 r0,q1,q2'\n+[^:]*:28: Error: syntax error -- `vmlavaeq.s32 r0,q1,q2'\n+[^:]*:30: Error: syntax error -- `vmlavaeq.s32 r0,q1,q2'\n+[^:]*:31: Error: vector predicated instruction should be in VPT/VPST block -- `vmlavat.s32 r0,q1,q2'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vmlava.s32 r0,q1,q2'"
    },
    {
      "sha": "1359636440bbb931d4103e9b52ad83c9df0102ca",
      "filename": "gas/testsuite/gas/arm/mve-vmlav-bad.s",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlav-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlav-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmlav-bad.s?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,33 @@\n+.macro cond, op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 r0, q1, q2\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond vmlav\n+cond vmlava\n+vmlav.s64 r0, q1, q2\n+vmlav.f32 r0, q1, q2\n+vmlava.s64 r0, q1, q2\n+vmlava.f32 r0, q1, q2\n+vmlavx.s32 r0, q1, q2\n+vmlavax.s32 r0, q1, q2\n+it eq\n+vmlaveq.s32 r0, q1, q2\n+vmlaveq.s32 r0, q1, q2\n+vpst\n+vmlaveq.s32 r0, q1, q2\n+vmlavt.s32 r0, q1, q2\n+vpst\n+vmlav.s32 r0, q1, q2\n+it eq\n+vmlavaeq.s32 r0, q1, q2\n+vmlavaeq.s32 r0, q1, q2\n+vpst\n+vmlavaeq.s32 r0, q1, q2\n+vmlavat.s32 r0, q1, q2\n+vpst\n+vmlava.s32 r0, q1, q2"
    },
    {
      "sha": "cdcaae982ea6a4b9c571ff4c0ecfd41d117c18e9",
      "filename": "gas/testsuite/gas/arm/mve-vmlsdav-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlsdav-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlsdav-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmlsdav-bad.d?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Bad MVE VMLSDAV instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vmlsdav-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "f6270538cdc9289a0bfa8791aa3169caa77b0f2e",
      "filename": "gas/testsuite/gas/arm/mve-vmlsdav-bad.l",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlsdav-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlsdav-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmlsdav-bad.l?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,47 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: Odd register not allowed here -- `vmlsdav.s16 r1,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vmlsdav.u16 r0,q1,q2'\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Error: syntax error -- `vmlsdaveq.s16 r0,q1,q2'\n+[^:]*:18: Error: syntax error -- `vmlsdaveq.s16 r0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vmlsdaveq.s16 r0,q1,q2'\n+[^:]*:21: Error: vector predicated instruction should be in VPT/VPST block -- `vmlsdavt.s16 r0,q1,q2'\n+[^:]*:23: Error: instruction missing MVE vector predication code -- `vmlsdav.s16 r0,q1,q2'\n+[^:]*:25: Error: syntax error -- `vmlsdavaeq.s16 r0,q1,q2'\n+[^:]*:26: Error: syntax error -- `vmlsdavaeq.s16 r0,q1,q2'\n+[^:]*:28: Error: syntax error -- `vmlsdavaeq.s16 r0,q1,q2'\n+[^:]*:29: Error: vector predicated instruction should be in VPT/VPST block -- `vmlsdavat.s16 r0,q1,q2'\n+[^:]*:31: Error: instruction missing MVE vector predication code -- `vmlsdava.s16 r0,q1,q2'\n+[^:]*:33: Error: syntax error -- `vmlsdavxeq.s16 r0,q1,q2'\n+[^:]*:34: Error: syntax error -- `vmlsdavxeq.s16 r0,q1,q2'\n+[^:]*:36: Error: syntax error -- `vmlsdavxeq.s16 r0,q1,q2'\n+[^:]*:37: Error: vector predicated instruction should be in VPT/VPST block -- `vmlsdavxt.s16 r0,q1,q2'\n+[^:]*:39: Error: instruction missing MVE vector predication code -- `vmlsdavx.s16 r0,q1,q2'\n+[^:]*:41: Error: syntax error -- `vmlsdavaxeq.s16 r0,q1,q2'\n+[^:]*:42: Error: syntax error -- `vmlsdavaxeq.s16 r0,q1,q2'\n+[^:]*:44: Error: syntax error -- `vmlsdavaxeq.s16 r0,q1,q2'\n+[^:]*:45: Error: vector predicated instruction should be in VPT/VPST block -- `vmlsdavaxt.s16 r0,q1,q2'\n+[^:]*:47: Error: instruction missing MVE vector predication code -- `vmlsdavax.s16 r0,q1,q2'"
    },
    {
      "sha": "c955a0db46f91fb06877b56a98435b3e8787a36d",
      "filename": "gas/testsuite/gas/arm/mve-vmlsdav-bad.s",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlsdav-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a302e574182dc12e95850dec078dac93701f1bde/gas/testsuite/gas/arm/mve-vmlsdav-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmlsdav-bad.s?ref=a302e574182dc12e95850dec078dac93701f1bde",
      "patch": "@@ -0,0 +1,47 @@\n+.macro cond, op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 r0, q1, q2\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vmlsdav.s16 r1, q1, q2\n+vmlsdav.u16 r0, q1, q2\n+cond vmlsdav\n+cond vmlsdava\n+cond vmlsdavx\n+cond vmlsdavax\n+it eq\n+vmlsdaveq.s16 r0, q1, q2\n+vmlsdaveq.s16 r0, q1, q2\n+vpst\n+vmlsdaveq.s16 r0, q1, q2\n+vmlsdavt.s16 r0, q1, q2\n+vpst\n+vmlsdav.s16 r0, q1, q2\n+it eq\n+vmlsdavaeq.s16 r0, q1, q2\n+vmlsdavaeq.s16 r0, q1, q2\n+vpst\n+vmlsdavaeq.s16 r0, q1, q2\n+vmlsdavat.s16 r0, q1, q2\n+vpst\n+vmlsdava.s16 r0, q1, q2\n+it eq\n+vmlsdavxeq.s16 r0, q1, q2\n+vmlsdavxeq.s16 r0, q1, q2\n+vpst\n+vmlsdavxeq.s16 r0, q1, q2\n+vmlsdavxt.s16 r0, q1, q2\n+vpst\n+vmlsdavx.s16 r0, q1, q2\n+it eq\n+vmlsdavaxeq.s16 r0, q1, q2\n+vmlsdavaxeq.s16 r0, q1, q2\n+vpst\n+vmlsdavaxeq.s16 r0, q1, q2\n+vmlsdavaxt.s16 r0, q1, q2\n+vpst\n+vmlsdavax.s16 r0, q1, q2"
    }
  ]
}