{
  "sha": "d3b6314397347943f40cdbf6efe34e209a162cc0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDNiNjMxNDM5NzM0Nzk0M2Y0MGNkYmY2ZWZlMzRlMjA5YTE2MmNjMA==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:32:01Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 47/57][Arm][OBJDUMP] Add support for MVE instructions: vaddv, vmlaldav, vmladav, vmlas, vrmlsldavh, vmlsldav, vmlsdav, vrmlaldavh, vqdmlah, vqrdmlash, vqrdmlash, vqdmlsdh, vqrdmlsdh, vqdmulh and vqrdmulh\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(enum mve_undefined): Add new reasons.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_undefined): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "766fc65db88ab88965902ec73bb7fb8fbf71782b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/766fc65db88ab88965902ec73bb7fb8fbf71782b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3b6314397347943f40cdbf6efe34e209a162cc0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3b6314397347943f40cdbf6efe34e209a162cc0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3b6314397347943f40cdbf6efe34e209a162cc0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3b6314397347943f40cdbf6efe34e209a162cc0/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14925797f833c9f4eedab98c7c50961d180aa03f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14925797f833c9f4eedab98c7c50961d180aa03f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14925797f833c9f4eedab98c7c50961d180aa03f"
    }
  ],
  "stats": {
    "total": 298,
    "additions": 298,
    "deletions": 0
  },
  "files": [
    {
      "sha": "12265648a5b7850da38372ca2301aa7e5845b787",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3b6314397347943f40cdbf6efe34e209a162cc0/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3b6314397347943f40cdbf6efe34e209a162cc0/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=d3b6314397347943f40cdbf6efe34e209a162cc0",
      "patch": "@@ -1,3 +1,15 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(enum mve_undefined): Add new reasons.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_undefined): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "20c23b3279ad9e2a7a4b643be42d2e705b593f20",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 286,
      "deletions": 0,
      "changes": 286,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3b6314397347943f40cdbf6efe34e209a162cc0/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3b6314397347943f40cdbf6efe34e209a162cc0/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=d3b6314397347943f40cdbf6efe34e209a162cc0",
      "patch": "@@ -152,6 +152,29 @@ enum mve_instructions\n   MVE_VQDMULL_T2,\n   MVE_VQMOVN,\n   MVE_VQMOVUN,\n+  MVE_VADDV,\n+  MVE_VMLADAV_T1,\n+  MVE_VMLADAV_T2,\n+  MVE_VMLALDAV,\n+  MVE_VMLAS,\n+  MVE_VADDLV,\n+  MVE_VMLSDAV_T1,\n+  MVE_VMLSDAV_T2,\n+  MVE_VMLSLDAV,\n+  MVE_VRMLALDAVH,\n+  MVE_VRMLSLDAVH,\n+  MVE_VQDMLADH,\n+  MVE_VQRDMLADH,\n+  MVE_VQDMLAH,\n+  MVE_VQRDMLAH,\n+  MVE_VQDMLASH,\n+  MVE_VQRDMLASH,\n+  MVE_VQDMLSDH,\n+  MVE_VQRDMLSDH,\n+  MVE_VQDMULH_T1,\n+  MVE_VQRDMULH_T2,\n+  MVE_VQDMULH_T3,\n+  MVE_VQRDMULH_T4,\n   MVE_NONE\n };\n \n@@ -203,6 +226,7 @@ enum mve_undefined\n \t\t\t\t   op2 == 0 and op1 == (0 or 1).  */\n   UNDEF_OP_0_BAD_CMODE,\t\t/* undefined because op == 0 and cmode\n \t\t\t\t   in {0xx1, x0x1}.  */\n+  UNDEF_XCHG_UNS,\t\t/* undefined because X == 1 and U == 1.  */\n   UNDEF_NONE\t\t\t/* no undefined behavior.  */\n };\n \n@@ -1922,9 +1946,11 @@ static const struct opcode32 neon_opcodes[] =\n    %E\t\t\tprint vmov, vmvn, vorr, vbic encoded constant\n    %N\t\t\tprint generic index for vmov\n    %T\t\t\tprint bottom ('b') or top ('t') of source register\n+   %X\t\t\tprint exchange field in vmla* instructions\n \n    %<bitfield>r\t\tprint as an ARM register\n    %<bitfield>d\t\tprint the bitfield in decimal\n+   %<bitfield>A\t\tprint accumulate or not\n    %<bitfield>Q\t\tprint as a MVE Q register\n    %<bitfield>F\t\tprint as a MVE S register\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n@@ -1999,6 +2025,18 @@ static const struct mopcode32 mve_opcodes[] =\n    0xef100150, 0xffb11f51,\n    \"vbic%v\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VADDLV.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VADDLV,\n+   0xee890f00, 0xef8f1fd1,\n+   \"vaddlv%5A%v.%u32\\t%13-15l, %20-22h, %1-3Q\"},\n+\n+  /* Vector VADDV.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VADDV,\n+   0xeef10f00, 0xeff31fd1,\n+   \"vaddv%5A%v.%u%18-19s\\t%13-15l, %1-3Q\"},\n+\n   /* Vector VCMP floating point T1.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VCMP_FP_T1,\n@@ -2222,6 +2260,74 @@ static const struct mopcode32 mve_opcodes[] =\n    0xec101f00, 0xfe101f80,\n    \"vldrw%v.u32\\t%13-15,22Q, %d\"},\n \n+  /* Vector VMLALDAV.  Note must appear before VMLADAV due to instruction\n+     opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLALDAV,\n+   0xee801e00, 0xef801f51,\n+   \"vmlaldav%5Ax%v.%u%16s\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLALDAV,\n+   0xee800e00, 0xef801f51,\n+   \"vmlalv%5A%v.%u%16s\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLAV T1 variant, same as VMLADAV but with X == 0.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLADAV_T1,\n+   0xeef00e00, 0xeff01f51,\n+   \"vmlav%5A%v.%u%16s\\t%13-15l, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLAV T2 variant, same as VMLADAV but with X == 0.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLADAV_T2,\n+   0xeef00f00, 0xeff11f51,\n+   \"vmlav%5A%v.%u8\\t%13-15l, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLADAV T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLADAV_T1,\n+   0xeef01e00, 0xeff01f51,\n+   \"vmladav%5Ax%v.%u%16s\\t%13-15l, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLADAV T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLADAV_T2,\n+   0xeef01f00, 0xeff11f51,\n+   \"vmladav%5Ax%v.%u8\\t%13-15l, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLAS.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLAS,\n+   0xee011e40, 0xef811f70,\n+   \"vmlas%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VRMLSLDAVH.  Note must appear before VMLSDAV due to instruction\n+     opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRMLSLDAVH,\n+   0xfe800e01, 0xff810f51,\n+   \"vrmlsldavh%5A%X%v.s32\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLSLDAV.  Note must appear before VMLSDAV due to instruction\n+     opcdoe aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLSLDAV,\n+   0xee800e01, 0xff800f51,\n+   \"vmlsldav%5A%X%v.%u%16s\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLSDAV T1 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLSDAV_T1,\n+   0xeef00e01, 0xfff00f51,\n+   \"vmlsdav%5A%X%v.s%16s\\t%13-15l, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VMLSDAV T2 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMLSDAV_T2,\n+   0xfef00e01, 0xfff10f51,\n+   \"vmlsdav%5A%X%v.s8\\t%13-15l, %17-19,7Q, %1-3Q\"},\n+\n   /* Vector VMOV between gpr and half precision register, op == 0.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VMOV_HFP_TO_GP,\n@@ -2367,12 +2473,96 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee310e81, 0xffb30fd1,\n    \"vqmovun%T%v.s%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n \n+  /* Vector VQDMLADH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMLADH,\n+   0xee000e00, 0xff810f51,\n+   \"vqdmladh%X%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQRDMLADH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRDMLADH,\n+   0xee000e01, 0xff810f51,\n+   \"vqrdmladh%X%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQDMLAH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMLAH,\n+   0xee000e60, 0xef811f70,\n+   \"vqdmlah%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VQRDMLAH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRDMLAH,\n+   0xee000e40, 0xef811f70,\n+   \"vqrdmlah%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VQDMLASH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMLASH,\n+   0xee001e60, 0xef811f70,\n+   \"vqdmlash%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VQRDMLASH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRDMLASH,\n+   0xee001e40, 0xef811f70,\n+   \"vqrdmlash%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VQDMLSDH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMLSDH,\n+   0xfe000e00, 0xff810f51,\n+   \"vqdmlsdh%X%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQRDMLSDH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRDMLSDH,\n+   0xfe000e01, 0xff810f51,\n+   \"vqrdmlsdh%X%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQDMULH T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMULH_T1,\n+   0xef000b40, 0xff811f51,\n+   \"vqdmulh%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQRDMULH T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRDMULH_T2,\n+   0xff000b40, 0xff811f51,\n+   \"vqrdmulh%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQDMULH T3 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMULH_T3,\n+   0xee010e60, 0xff811f70,\n+   \"vqdmulh%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VQRDMULH T4 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRDMULH_T4,\n+   0xfe010e60, 0xff811f70,\n+   \"vqrdmulh%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n   /* Vector VRINT floating point.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VRINT_FP,\n    0xffb20440, 0xffb31c51,\n    \"vrint%m%v.f%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n \n+  /* Vector VRMLALDAVH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRMLALDAVH,\n+   0xee800f00, 0xef811f51,\n+   \"vrmlalvh%5A%v.%u32\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n+\n+  /* Vector VRMLALDAVH.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRMLALDAVH,\n+   0xee801f00, 0xef811f51,\n+   \"vrmlaldavh%5Ax%v.%u32\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n+\n   /* Vector VST2 no writeback.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VST2,\n@@ -4477,6 +4667,17 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VQRDMLADH:\n+    case MVE_VQDMLAH:\n+    case MVE_VQRDMLAH:\n+    case MVE_VQDMLASH:\n+    case MVE_VQRDMLASH:\n+    case MVE_VQDMLSDH:\n+    case MVE_VQRDMLSDH:\n+    case MVE_VQDMULH_T3:\n+    case MVE_VQRDMULH_T4:\n+    case MVE_VQDMLADH:\n+    case MVE_VMLAS:\n     case MVE_VMULL_INT:\n     case MVE_VHADD_T2:\n     case MVE_VHSUB_T2:\n@@ -4569,6 +4770,7 @@ is_mve_encoding_conflict (unsigned long given,\n \t  return FALSE;\n       }\n \n+    case MVE_VADDV:\n     case MVE_VMOVN:\n     case MVE_VQMOVUN:\n     case MVE_VQMOVN:\n@@ -4577,6 +4779,21 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VMLSLDAV:\n+    case MVE_VRMLSLDAVH:\n+    case MVE_VMLALDAV:\n+    case MVE_VADDLV:\n+      if (arm_decode_field (given, 20, 22) == 7)\n+\treturn TRUE;\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VRMLALDAVH:\n+      if ((arm_decode_field (given, 20, 22) & 6) == 6)\n+\treturn TRUE;\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n \n@@ -4678,6 +4895,8 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VQDMULH_T1:\n+    case MVE_VQRDMULH_T2:\n     case MVE_VRHADD:\n     case MVE_VHADD_T1:\n     case MVE_VHSUB_T1:\n@@ -4939,6 +5158,19 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VRMLALDAVH:\n+    case MVE_VMLADAV_T1:\n+    case MVE_VMLADAV_T2:\n+    case MVE_VMLALDAV:\n+      if ((arm_decode_field (given, 28, 28) == 1)\n+\t  && (arm_decode_field (given, 12, 12) == 1))\n+\t{\n+\t  *undefined_code = UNDEF_XCHG_UNS;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -4998,6 +5230,13 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VQDMLAH:\n+    case MVE_VQRDMLAH:\n+    case MVE_VQDMLASH:\n+    case MVE_VQRDMLASH:\n+    case MVE_VQDMULH_T3:\n+    case MVE_VQRDMULH_T4:\n+    case MVE_VMLAS:\n     case MVE_VFMA_FP_SCALAR:\n     case MVE_VFMAS_FP_SCALAR:\n     case MVE_VHADD_T2:\n@@ -5210,6 +5449,10 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VQRDMLADH:\n+    case MVE_VQDMLSDH:\n+    case MVE_VQRDMLSDH:\n+    case MVE_VQDMLADH:\n     case MVE_VMULL_INT:\n       {\n \tunsigned long Qd;\n@@ -5290,6 +5533,18 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VMLSLDAV:\n+    case MVE_VRMLSLDAVH:\n+    case MVE_VMLALDAV:\n+    case MVE_VADDLV:\n+      if (arm_decode_field (given, 20, 22) == 6)\n+\t{\n+\t  *unpredictable_code = UNPRED_R13;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -5556,6 +5811,10 @@ print_mve_undefined (struct disassemble_info *info,\n       func (stream, \"op field equal 0 and bad cmode\");\n       break;\n \n+    case UNDEF_XCHG_UNS:\n+      func (stream, \"exchange and unsigned together\");\n+      break;\n+\n     case UNDEF_NONE:\n       break;\n     }\n@@ -5915,6 +6174,7 @@ print_mve_size (struct disassemble_info *info,\n \n   switch (matched_insn)\n     {\n+    case MVE_VADDV:\n     case MVE_VCMP_VEC_T1:\n     case MVE_VCMP_VEC_T2:\n     case MVE_VCMP_VEC_T3:\n@@ -5933,12 +6193,25 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VLDRD_GATHER_T4:\n     case MVE_VLDRB_T1:\n     case MVE_VLDRH_T2:\n+    case MVE_VMLAS:\n     case MVE_VPT_VEC_T1:\n     case MVE_VPT_VEC_T2:\n     case MVE_VPT_VEC_T3:\n     case MVE_VPT_VEC_T4:\n     case MVE_VPT_VEC_T5:\n     case MVE_VPT_VEC_T6:\n+    case MVE_VQDMLADH:\n+    case MVE_VQRDMLADH:\n+    case MVE_VQDMLAH:\n+    case MVE_VQRDMLAH:\n+    case MVE_VQDMLASH:\n+    case MVE_VQRDMLASH:\n+    case MVE_VQDMLSDH:\n+    case MVE_VQRDMLSDH:\n+    case MVE_VQDMULH_T1:\n+    case MVE_VQRDMULH_T2:\n+    case MVE_VQDMULH_T3:\n+    case MVE_VQRDMULH_T4:\n     case MVE_VRHADD:\n     case MVE_VRINT_FP:\n     case MVE_VST2:\n@@ -5968,6 +6241,10 @@ print_mve_size (struct disassemble_info *info,\n \tfunc (stream, \"16\");\n       break;\n \n+    case MVE_VMLADAV_T1:\n+    case MVE_VMLALDAV:\n+    case MVE_VMLSDAV_T1:\n+    case MVE_VMLSLDAV:\n     case MVE_VMOVN:\n     case MVE_VQDMULL_T1:\n     case MVE_VQDMULL_T2:\n@@ -7639,6 +7916,11 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\tfunc (stream, \"t\");\n \t\t      break;\n \n+\t\t    case 'X':\n+\t\t      if (arm_decode_field (given, 12, 12) == 1)\n+\t\t\tfunc (stream, \"x\");\n+\t\t      break;\n+\n \t\t    case '0': case '1': case '2': case '3': case '4':\n \t\t    case '5': case '6': case '7': case '8': case '9':\n \t\t      {\n@@ -7662,6 +7944,10 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t\t\t    value,\n \t\t\t\t\t    insn->mve_op);\n \t\t\t    break;\n+\t\t\t  case 'A':\n+\t\t\t    if (value == 1)\n+\t\t\t      func (stream, \"a\");\n+\t\t\t    break;\n \t\t\t  case 'i':\n \t\t\t    {\n \t\t\t      unsigned long imm"
    }
  ]
}