{
  "sha": "2129a94255348900a6a0d03be9c1a6771ce7e2e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjEyOWE5NDI1NTM0ODkwMGE2YTBkMDNiZTljMWE2NzcxY2U3ZTJlNg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-05-19T12:02:08Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-05-19T12:02:08Z"
    },
    "message": "[gdb/testsuite] Fix read1 timeout in gdb.base/info-types-c++.exp\n\nWhen running test-case gdb.base/info-types-c++.exp with check-read1 I run\ninto:\n...\n425:    typedef const void * std::allocator_traits<std::allocator<std::\\\n  _Sp_counted_ptr_inplace<std::filesystem::__cxx11::\\\n  recursive_directory_iterator::_Dir_stack, std::allocator<std::filesystem::\\\n  __cxx11::recursive_directory_iterator::_Dir_stack>, \\\n  FAIL: gdb.base/info-types-c++.exp: info types (timeout)\n...\n\nThe corresponding gdb_test_multiple does contain an exp_continue which\nresets the timeout counter every time info for another file is printed, but\nthis doesn't help for this timeout because it times out during printing info\nfor a single file.\n\nFix this by processing line-by-line.\n\nTested on x86_64-linux, both with gcc-7.5.0 and gcc-4.8.5 (the latter is\ndifferent because the \"unsigned int\" type is missing).\n\ngdb/testsuite/ChangeLog:\n\n2021-05-19  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/info-types.exp.tcl: Scan info types output line-by-line.",
    "tree": {
      "sha": "7ea655628160055815886bbf0648970538ae733f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7ea655628160055815886bbf0648970538ae733f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2129a94255348900a6a0d03be9c1a6771ce7e2e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2129a94255348900a6a0d03be9c1a6771ce7e2e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2129a94255348900a6a0d03be9c1a6771ce7e2e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2129a94255348900a6a0d03be9c1a6771ce7e2e6/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c485e4759929a9f64d36b49600626bd912dcf335",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c485e4759929a9f64d36b49600626bd912dcf335",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c485e4759929a9f64d36b49600626bd912dcf335"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 84,
    "deletions": 17
  },
  "files": [
    {
      "sha": "609b40a0a4aac16de3d257fa9a6f7e7e78b0c0a5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2129a94255348900a6a0d03be9c1a6771ce7e2e6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2129a94255348900a6a0d03be9c1a6771ce7e2e6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2129a94255348900a6a0d03be9c1a6771ce7e2e6",
      "patch": "@@ -1,3 +1,7 @@\n+2021-05-19  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/info-types.exp.tcl: Scan info types output line-by-line.\n+\n 2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb.python/py-framefilter-gdb.py.in: Rename to:"
    },
    {
      "sha": "2989751eef9645e35e9a7da7bf9a304348e0bcc4",
      "filename": "gdb/testsuite/gdb.base/info-types.exp.tcl",
      "status": "modified",
      "additions": 80,
      "deletions": 17,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2129a94255348900a6a0d03be9c1a6771ce7e2e6/gdb/testsuite/gdb.base/info-types.exp.tcl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2129a94255348900a6a0d03be9c1a6771ce7e2e6/gdb/testsuite/gdb.base/info-types.exp.tcl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/info-types.exp.tcl?ref=2129a94255348900a6a0d03be9c1a6771ce7e2e6",
      "patch": "@@ -16,6 +16,57 @@\n # Check that 'info types' produces the expected output for an inferior\n # containing a number of different types.\n \n+# Match LINE against regexp OUTPUT_LINES[IDX].\n+proc match_line { line output_lines idx_name } {\n+    upvar $idx_name idx\n+\n+    while { 1 } {\n+\tif { $idx == [llength $output_lines] } {\n+\t    # Ran out of regexps, bail out.\n+\t    return -1\n+\t}\n+\n+\tset re [lindex $output_lines $idx]\n+\tif { $re == \"--optional\" } {\n+\t    # Optional, get actual regexp.\n+\t    set opt 1\n+\t    incr idx\n+\t    set re [lindex $output_lines $idx]\n+\t} else {\n+\t    # Not optional.\n+\t    set opt 0\n+\t}\n+\n+\tif { [regexp $re $line] } {\n+\t    # Match.\n+\t    incr idx\n+\t    if { $idx == [llength $output_lines] } {\n+\t\t# Last match, we're done.\n+\t\treturn 1\n+\t    }\n+\t    # Match found, keep looking for next match.\n+\t    return 0\n+\t} else {\n+\t    # No match.\n+\t    if { $idx == 0 } {\n+\t\t# First match not found, just keep looking for first match.\n+\t\treturn 0\n+\t    } elseif { $opt } {\n+\t\t# Try next regexp on same line.\n+\t\tincr idx\n+\t\tcontinue\n+\t    } else {\n+\t\t# Mismatch, bail out.\n+\t\treturn -1\n+\t    }\n+\t}\n+\tbreak\n+    }\n+\n+    # Keep going.\n+    return 0\n+}\n+\n # Run 'info types' test, compiling the test file for language LANG,\n # which should be either 'c' or 'c++'.\n proc run_test { lang } {\n@@ -39,8 +90,8 @@ proc run_test { lang } {\n     }\n \n     if { $lang == \"c++\" } {\n-\tset output_re \\\n-\t    [multi_line \\\n+\tset output_lines \\\n+\t    [list \\\n \t\t \"98:\\[\\t \\]+CL;\" \\\n \t\t \"42:\\[\\t \\]+anon_struct_t;\" \\\n \t\t \"65:\\[\\t \\]+anon_union_t;\" \\\n@@ -69,11 +120,12 @@ proc run_test { lang } {\n \t\t \"39:\\[\\t \\]+typedef enum_t nested_enum_t;\" \\\n \t\t \"19:\\[\\t \\]+typedef float nested_float_t;\" \\\n \t\t \"18:\\[\\t \\]+typedef int nested_int_t;\" \\\n-\t\t \"62:\\[\\t \\]+typedef union_t nested_union_t;(\" \\\n-\t\t \"\\[\\t \\]+unsigned int)?\"]\n+\t\t \"62:\\[\\t \\]+typedef union_t nested_union_t;\" \\\n+\t\t \"--optional\" \"\\[\\t \\]+unsigned int\" \\\n+\t\t \"\"]\n     } else {\n-\tset output_re \\\n-\t    [multi_line \\\n+\tset output_lines \\\n+\t    [list \\\n \t\t \"52:\\[\\t \\]+typedef enum {\\\\.\\\\.\\\\.} anon_enum_t;\" \\\n \t\t \"45:\\[\\t \\]+typedef struct {\\\\.\\\\.\\\\.} anon_struct_t;\" \\\n \t\t \"68:\\[\\t \\]+typedef union {\\\\.\\\\.\\\\.} anon_union_t;\" \\\n@@ -96,33 +148,44 @@ proc run_test { lang } {\n \t\t \"19:\\[\\t \\]+typedef float nested_float_t;\" \\\n \t\t \"18:\\[\\t \\]+typedef int nested_int_t;\" \\\n \t\t \"62:\\[\\t \\]+typedef union union_t nested_union_t;\" \\\n-\t\t \"56:\\[\\t \\]+union union_t;(\" \\\n-\t\t \"\\[\\t \\]+unsigned int)?\"]\n+\t\t \"56:\\[\\t \\]+union union_t;\" \\\n+\t\t \"--optional\" \"\\[\\t \\]+unsigned int\" \\\n+\t\t \"\"]\n     }\n \n     set state 0\n+    set idx 0\n     gdb_test_multiple \"info types\" \"\" {\n \t-re \"\\r\\nAll defined types:\" {\n-\t    if { $state == 0 } { set state 1 }\n+\t    if { $state == 0 } { set state 1 } else { set state -1 }\n \t    exp_continue\n \t}\n-\t-re \"\\r\\n\\r\\nFile .*[string_to_regexp $srcfile]:\" {\n-\t    if { $state == 1 } { set state 2 }\n+\t-re \"^\\r\\nFile .*[string_to_regexp $srcfile]:\" {\n+\t    if { $state == 1 } { set state 2 } else { set state -2 }\n \t    exp_continue\n \t}\n-\t-re $output_re {\n-\t    if { $state == 2 } { set state 3 }\n-\t    exp_continue\n-\t}\n-\t-re \"\\r\\n\\r\\nFile \\[^\\r\\n\\]*:\" {\n+\t-re \"^\\r\\nFile \\[^\\r\\n\\]*:\" {\n+\t    if { $state == 2 } { set state -4 }\n \t    exp_continue\n \t}\n \t-re -wrap \"\" {\n \t    if { $state == 3} {\n \t\tpass $gdb_test_name\n \t    } else {\n-\t\tfail $gdb_test_name\n+\t\tfail \"$gdb_test_name (state == $state)\"\n+\t    }\n+\t}\n+\t-re \"^\\r\\n(\\[^\\r\\n\\]*)(?=\\r\\n)\" {\n+\t    if { $state == 2 } {\n+\t\tset line $expect_out(1,string)\n+\t\tset res [match_line $line $output_lines idx]\n+\t\tif { $res == 1 } {\n+\t\t    set state 3\n+\t\t} elseif { $res == -1 } {\n+\t\t    set state -3\n+\t\t}\n \t    }\n+\t    exp_continue\n \t}\n     }\n }"
    }
  ]
}