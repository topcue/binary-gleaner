{
  "sha": "707ed39ac5cb255f656b2947b50c8273c8ad1d80",
  "node_id": "C_kwDOANOeidoAKDcwN2VkMzlhYzVjYjI1NWY2NTZiMjk0N2I1MGM4MjczYzhhZDFkODA",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-05T12:14:01Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-05T12:32:18Z"
    },
    "message": "gdb/testsuite: use gdb_get_line_number\n\nReplaces a hard coded line number with a use of gdb_get_line_number.\n\nI suspect that the line number has, over time, come adrift from where\nit was supposed to be stopping.  When the test was first added, line\n770 pointed at the final 'return 0' in function main.  Over time, as\nthings have been added, line 770 now points at some random location in\nthe middle of main.\n\nSo, I've marked the 'return 0' with a comment, and now the test will\nalways stop there.\n\nI also removed an old comment from 1997 talking about how these tests\nwill only pass with the HP compiler, followed by an additional comment\nfrom 2000 saying that the tests now pass with GCC.\n\nI get the same results before and after this change.",
    "tree": {
      "sha": "5cf9449ea70f86591897b13b9b002844cf2aa176",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5cf9449ea70f86591897b13b9b002844cf2aa176"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/707ed39ac5cb255f656b2947b50c8273c8ad1d80",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/707ed39ac5cb255f656b2947b50c8273c8ad1d80",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/707ed39ac5cb255f656b2947b50c8273c8ad1d80",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/707ed39ac5cb255f656b2947b50c8273c8ad1d80/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "ca8775833bb6af8eb4333f41e4f8672df0ead874",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca8775833bb6af8eb4333f41e4f8672df0ead874",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ca8775833bb6af8eb4333f41e4f8672df0ead874"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 4,
    "deletions": 18
  },
  "files": [
    {
      "sha": "d6120e2dd1c5b85884a57cafe1a7786653c5031b",
      "filename": "gdb/testsuite/gdb.cp/templates.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/707ed39ac5cb255f656b2947b50c8273c8ad1d80/gdb/testsuite/gdb.cp/templates.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/707ed39ac5cb255f656b2947b50c8273c8ad1d80/gdb/testsuite/gdb.cp/templates.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/templates.cc?ref=707ed39ac5cb255f656b2947b50c8273c8ad1d80",
      "patch": "@@ -801,5 +801,5 @@ int main()\n \n   arg.method(empty);\n \n-  return 0;\n+  return 0;\t/* Final breakpoint.  */\n }"
    },
    {
      "sha": "8370beb95b5e508bd0bd11562b9341d2668176c3",
      "filename": "gdb/testsuite/gdb.cp/templates.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 17,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/707ed39ac5cb255f656b2947b50c8273c8ad1d80/gdb/testsuite/gdb.cp/templates.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/707ed39ac5cb255f656b2947b50c8273c8ad1d80/gdb/testsuite/gdb.cp/templates.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/templates.exp?ref=707ed39ac5cb255f656b2947b50c8273c8ad1d80",
      "patch": "@@ -278,23 +278,9 @@ do_tests\n \n # More tests for different kinds of template parameters,\n # templates with partial specializations, nested templates, etc.\n-# These have been tested only with HP aCC.  They probably won't\n-# work with other compilers because of differences in mangling\n-# schemes. \n-# Added by Satish Pai <pai@apollo.hp.com> 1997-09-25 \n-# As of 2000-06-03, C++ support has been improved to the point that g++ can\n-# pass all of theses, excluding what appears to be one that exposes a stabs bug. - djb\n-\n-# I don't know how HP could be passing these tests without this. They\n-# weren't breakpointing past a point where the below expressions were\n-# initialized in the actual source. - djb\n-\n-gdb_test \"b 770\" \\\n-    \"Breakpoint .* at .*, line 770.\"\n-\n-gdb_test \"c\" \\\n-    \"Continuing.*Breakpoint .*\" \\\n-    \"continue to line 770\"\n+\n+gdb_breakpoint [gdb_get_line_number \"Final breakpoint\"]\n+gdb_continue_to_breakpoint \"Final breakpoint\"\n \n gdb_test \"print fint\" \\\n    \"\\\\$\\[0-9\\]* = \\\\{x = 0, t = 0\\\\}\""
    }
  ]
}