{
  "sha": "7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2Q5ODEzZjE5NmJkMWE5OGQ0OWMyYjliN2I5MDM1MWNiMjQzNWIwZA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-04-24T11:04:33Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-05-28T16:09:45Z"
    },
    "message": "binutils: CTF support for objdump and readelf\n\nThis introduces CTF support for objdump and readelf.  objdump has the\nfollowing new arguments:\n\n     --ctf=SECTION: display CTF in the given SECTION\n     --ctf-parent=SECTION: name of CTF section that is the parent of this section\n\nreadelf has the above, and these two as well:\n\n     --ctf-symbols=SECTION: name of symbol table section (optional)\n     --ctf-strings=SECTION: name of string table section (optional)\n\n(objdump can always use BFD machinery to determine the applicable string\nand symbol tables automatically, so these arguments are unnecessary.)\n\nNearly all the work is done by the ctf_dump machinery in libctf: most of\nthe remaining work is option-processing and section-reading, and thus is\ndifferent for objdump and readelf: the minimal amount of similar code\nremaining is, in my view, too small to share, particularly given that\nobjdump uses ctf_bfdopen() and readelf uses ctf_simple_open() since it\ndoesn't have a bfd.\n\nI am not particularly satisfied with the way resources are freed in\neither of these (I was forced to do it at the top level, for lack of\nanywhere else to free resources allocated during option processing), but\nI can't see any better way to do it without introducing new\ninfrastructure for no other purpose.\n\nThere are essentially arbitrary ordering changes to the Makefile.in's\norder of libtool-related stuff that I can't get rid of, but they have no\nsemantic effect.  (It is possible that some hunks of these changes could\nbe dropped, but that seems a bit risky to me.)\n\nbinutils/\n\t* objdump.c (ctf-api.h): New include.\n\t(dump_ctf_section_info): New variable.\n\t(dump_ctf_section_name): Likewise.\n\t(usage): Describe new options.\n\t(enum option_values): Add OPTION_CTF and OPTION_CTF_PARENT.\n\t(main): Use them to add --ctf and --ctf-parent.\n\t(read_section_stabs): Add new parameter, entsize_ptr.\n\t(find_stabs_section): Adjust accordingly.\n\t(make_ctfsect): New.\n\t(dump_ctf_indent_lines): New.\n\t(dump_ctf_archive_member): New.\n\t(dump_ctf): New.\n\t(dump_bfd): Call it.  Free resources afterwards.\n\t* readelf.c (ctf-api.h): New include.\n\t(CTF_DUMP): New.\n\t(static bfd_boolean do_ctf): Likewise.\n\t(dump_ctf_parent_name): Likewise.\n\t(dump_ctf_symtab_name): Likewise.\n\t(dump_ctf_strtab_name): Likewise.\n\t(OPTION_CTF_DUMP): Likewise.\n\t(OPTION_CTF_PARENT): Likewise.\n\t(OPTION_CTF_SYMBOLS): Likewise.\n\t(OPTION_CTF_STRINGS): Likewise.\n\t(options): Add them.\n\t(usage): Likewise.\n\t(parse_args): Handle the new options, requesting CTF_DUMP.\n\t(process_section_contents): Handle CTF_DUMP.\n\t(shdr_to_ctf_sect): New.\n\t(dump_ctf_indent_lines): New.\n\t(dump_section_as_ctf): New.\n\t(main): Free resources.\n\t* Makefile.am (LIBCTF): New variable.\n\t(objdump_DEPENDENCIES): Use it.\n\t(readelf_DEPENDENCIES): Likewise.\n\t(objdump_LDADD): Likewise.\n\t(readelf_LDADD): Likewise.\n\t* aclocal.m4: Regenerated.\n\t* Makefile.in: Likewise.\n\n\t* doc/binutils.texi (objdump): Document the new options.\n\t(readelf): Likewise.\n\t* doc/ctf.options.texi: New.\n\t* doc/Makefile.in: Regenerated.\n\t* NEWS: Mention the new feature.",
    "tree": {
      "sha": "a98af01fd572cc1e662a1304c7c8f771e2b59873",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a98af01fd572cc1e662a1304c7c8f771e2b59873"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e65dfbaf3a0299e4837216a103c28625d4b4f1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e65dfbaf3a0299e4837216a103c28625d4b4f1d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0e65dfbaf3a0299e4837216a103c28625d4b4f1d"
    }
  ],
  "stats": {
    "total": 507,
    "additions": 480,
    "deletions": 27
  },
  "files": [
    {
      "sha": "b66f0b29d3e764386b8893c3e5c5b6e94b003080",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -1,3 +1,50 @@\n+2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* objdump.c (ctf-api.h): New include.\n+\t(dump_ctf_section_info): New variable.\n+\t(dump_ctf_section_name): Likewise.\n+\t(usage): Describe new options.\n+\t(enum option_values): Add OPTION_CTF and OPTION_CTF_PARENT.\n+\t(main): Use them to add --ctf and --ctf-parent.\n+\t(read_section_stabs): Add new parameter, entsize_ptr.\n+\t(find_stabs_section): Adjust accordingly.\n+\t(make_ctfsect): New.\n+\t(dump_ctf_indent_lines): New.\n+\t(dump_ctf_archive_member): New.\n+\t(dump_ctf): New.\n+\t(dump_bfd): Call it.  Free resources afterwards.\n+\t* readelf.c (ctf-api.h): New include.\n+\t(CTF_DUMP): New.\n+\t(static bfd_boolean do_ctf): Likewise.\n+\t(dump_ctf_parent_name): Likewise.\n+\t(dump_ctf_symtab_name): Likewise.\n+\t(dump_ctf_strtab_name): Likewise.\n+\t(OPTION_CTF_DUMP): Likewise.\n+\t(OPTION_CTF_PARENT): Likewise.\n+\t(OPTION_CTF_SYMBOLS): Likewise.\n+\t(OPTION_CTF_STRINGS): Likewise.\n+\t(options): Add them.\n+\t(usage): Likewise.\n+\t(parse_args): Handle the new options, requesting CTF_DUMP.\n+\t(process_section_contents): Handle CTF_DUMP.\n+\t(shdr_to_ctf_sect): New.\n+\t(dump_ctf_indent_lines): New.\n+\t(dump_section_as_ctf): New.\n+\t(main): Free resources.\n+\t* Makefile.am (LIBCTF): New variable.\n+\t(objdump_DEPENDENCIES): Use it.\n+\t(readelf_DEPENDENCIES): Likewise.\n+\t(objdump_LDADD): Likewise.\n+\t(readelf_LDADD): Likewise.\n+\t* aclocal.m4: Regenerated.\n+\t* Makefile.in: Likewise.\n+\n+\t* doc/binutils.texi (objdump): Document the new options.\n+\t(readelf): Likewise.\n+\t* doc/ctf.options.texi: New.\n+\t* doc/Makefile.in: Regenerated.\n+\t* NEWS: Mention the new feature.\n+\n 2019-05-27  Alan Modra  <amodra@gmail.com>\n \n \t* readelf.c (process_section_groups): Continue processing groups"
    },
    {
      "sha": "128494ca9eef9523c5a67b830fde2abb856c4315",
      "filename": "binutils/Makefile.am",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/Makefile.am?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -161,6 +161,8 @@ BFDLIB = ../bfd/libbfd.la\n \n OPCODES = ../opcodes/libopcodes.la\n \n+LIBCTF = ../libctf/libctf.a\n+\n LIBIBERTY = ../libiberty/libiberty.a\n \n POTFILES = $(CFILES) $(DEBUG_SRCS) $(HFILES)\n@@ -211,7 +213,7 @@ installcheck-local:\n # which depends on libintl, since we don't know whether LIBINTL_DEP will be\n # non-empty until configure time.  Ugh!\n size_DEPENDENCIES =      $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n-objdump_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB) $(OPCODES) $(OBJDUMP_PRIVATE_OFILES)\n+objdump_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB) $(OPCODES) $(LIBCTF) $(OBJDUMP_PRIVATE_OFILES)\n nm_new_DEPENDENCIES =    $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n ar_DEPENDENCIES =        $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n strings_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n@@ -226,7 +228,7 @@ dlltool_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n windres_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n windmc_DEPENDENCIES =    $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n addr2line_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n-readelf_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY)\n+readelf_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY) $(LIBCTF)\n elfedit_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY)\n dllwrap_DEPENDENCIES =   $(LIBINTL_DEP) $(LIBIBERTY)\n bfdtest1_DEPENDENCIES =  $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n@@ -241,7 +243,7 @@ objcopy_SOURCES = objcopy.c not-strip.c rename.c $(WRITE_DEBUG_SRCS) $(BULIBS)\n strings_SOURCES = strings.c $(BULIBS)\n \n readelf_SOURCES = readelf.c version.c unwind-ia64.c dwarf.c $(ELFLIBS)\n-readelf_LDADD   = $(LIBINTL) $(LIBIBERTY) $(ZLIB)\n+readelf_LDADD   = $(LIBINTL) $(LIBCTF) $(LIBIBERTY) $(ZLIB)\n \n elfedit_SOURCES = elfedit.c version.c $(ELFLIBS)\n elfedit_LDADD = $(LIBINTL) $(LIBIBERTY)\n@@ -252,7 +254,7 @@ nm_new_SOURCES = nm.c $(BULIBS)\n \n objdump_SOURCES = objdump.c dwarf.c prdbg.c $(DEBUG_SRCS) $(BULIBS) $(ELFLIBS)\n EXTRA_objdump_SOURCES = od-xcoff.c\n-objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n+objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(LIBCTF) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n \n objdump.@OBJEXT@:objdump.c\n if am__fastdepCC"
    },
    {
      "sha": "480385bd67b9559b310749e841d38a580dc988d1",
      "filename": "binutils/Makefile.in",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/Makefile.in?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -119,7 +119,10 @@ EXTRA_PROGRAMS = srconv$(EXEEXT) sysdump$(EXEEXT) coffdump$(EXEEXT) \\\n \t$(am__EXEEXT_4)\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n@@ -135,9 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../config/plugins.m4 \\\n \t$(top_srcdir)/../config/po.m4 \\\n \t$(top_srcdir)/../config/progtest.m4 \\\n-\t$(top_srcdir)/../config/zlib.m4 $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n-\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/../config/zlib.m4 \\\n \t$(top_srcdir)/../bfd/version.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n@@ -647,6 +648,7 @@ BULIBS = bucomm.c version.c filemode.c\n ELFLIBS = elfcomm.c\n BFDLIB = ../bfd/libbfd.la\n OPCODES = ../opcodes/libopcodes.la\n+LIBCTF = ../libctf/libctf.a\n LIBIBERTY = ../libiberty/libiberty.a\n POTFILES = $(CFILES) $(DEBUG_SRCS) $(HFILES)\n EXPECT = expect\n@@ -671,7 +673,7 @@ CC_FOR_TARGET = ` \\\n # which depends on libintl, since we don't know whether LIBINTL_DEP will be\n # non-empty until configure time.  Ugh!\n size_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n-objdump_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB) $(OPCODES) $(OBJDUMP_PRIVATE_OFILES)\n+objdump_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB) $(OPCODES) $(LIBCTF) $(OBJDUMP_PRIVATE_OFILES)\n nm_new_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n ar_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n strings_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n@@ -686,7 +688,7 @@ dlltool_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n windres_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n windmc_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n addr2line_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n-readelf_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY)\n+readelf_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(LIBCTF)\n elfedit_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY)\n dllwrap_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY)\n bfdtest1_DEPENDENCIES = $(LIBINTL_DEP) $(LIBIBERTY) $(BFDLIB)\n@@ -696,14 +698,14 @@ size_SOURCES = size.c $(BULIBS)\n objcopy_SOURCES = objcopy.c not-strip.c rename.c $(WRITE_DEBUG_SRCS) $(BULIBS)\n strings_SOURCES = strings.c $(BULIBS)\n readelf_SOURCES = readelf.c version.c unwind-ia64.c dwarf.c $(ELFLIBS)\n-readelf_LDADD = $(LIBINTL) $(LIBIBERTY) $(ZLIB)\n+readelf_LDADD = $(LIBINTL) $(LIBCTF) $(LIBIBERTY) $(ZLIB)\n elfedit_SOURCES = elfedit.c version.c $(ELFLIBS)\n elfedit_LDADD = $(LIBINTL) $(LIBIBERTY)\n strip_new_SOURCES = objcopy.c is-strip.c rename.c $(WRITE_DEBUG_SRCS) $(BULIBS)\n nm_new_SOURCES = nm.c $(BULIBS)\n objdump_SOURCES = objdump.c dwarf.c prdbg.c $(DEBUG_SRCS) $(BULIBS) $(ELFLIBS)\n EXTRA_objdump_SOURCES = od-xcoff.c\n-objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n+objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(LIBCTF) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n cxxfilt_SOURCES = cxxfilt.c $(BULIBS)\n ar_SOURCES = arparse.y arlex.l ar.c not-ranlib.c arsup.c rename.c binemul.c \\\n \temul_$(EMULATION).c $(BULIBS)"
    },
    {
      "sha": "b8921814eeb1e70cee94f4f653086294fcab4514",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -18,7 +18,10 @@\n   displayed.  In addition when combined with --disassemble the --dwarf=\n   follow-links option will ensure that any symbol tables in the linked\n   files are read and used when disassembling code in the main file.\n-  \n+\n+ * Add support for dumping types encoded in the Compact Type Format\n+   to objdump and readelf.\n+\n Changes in 2.32:\n \n * The addr2line, c++filt, nm and objdump tools now have a limit on the"
    },
    {
      "sha": "1b1320fd1a968929a03bef678f446becbf112dc6",
      "filename": "binutils/aclocal.m4",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/aclocal.m4?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -1185,6 +1185,11 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n+m4_include([../libtool.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n+m4_include([../lt~obsolete.m4])\n m4_include([../bfd/acinclude.m4])\n m4_include([../bfd/warning.m4])\n m4_include([../config/acx.m4])\n@@ -1203,8 +1208,3 @@ m4_include([../config/plugins.m4])\n m4_include([../config/po.m4])\n m4_include([../config/progtest.m4])\n m4_include([../config/zlib.m4])\n-m4_include([../libtool.m4])\n-m4_include([../ltoptions.m4])\n-m4_include([../ltsugar.m4])\n-m4_include([../ltversion.m4])\n-m4_include([../lt~obsolete.m4])"
    },
    {
      "sha": "7fa622a364935dad2dfef7103c5000b9a1ede678",
      "filename": "binutils/doc/Makefile.in",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/doc/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/doc/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/Makefile.in?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -108,7 +108,10 @@ host_triplet = @host@\n target_triplet = @target@\n subdir = doc\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n@@ -124,9 +127,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../config/plugins.m4 \\\n \t$(top_srcdir)/../config/po.m4 \\\n \t$(top_srcdir)/../config/progtest.m4 \\\n-\t$(top_srcdir)/../config/zlib.m4 $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n-\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/../config/zlib.m4 \\\n \t$(top_srcdir)/../bfd/version.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)"
    },
    {
      "sha": "f3c4eaea4f5f9be37198706f940a68ded838ea8a",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -2110,6 +2110,7 @@ objdump [@option{-a}|@option{--archive-headers}]\n         [@option{-s}|@option{--full-contents}]\n         [@option{-W[lLiaprmfFsoRtUuTgAckK]}|\n          @option{--dwarf}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]]\n+        [@option{--ctf=}@var{section}]\n         [@option{-G}|@option{--stabs}]\n         [@option{-t}|@option{--syms}]\n         [@option{-T}|@option{--dynamic-syms}]\n@@ -2122,6 +2123,9 @@ objdump [@option{-a}|@option{--archive-headers}]\n         [@option{--adjust-vma=}@var{offset}]\n         [@option{--dwarf-depth=@var{n}}]\n         [@option{--dwarf-start=@var{n}}]\n+        [@option{--ctf-parent=}@var{section}]\n+        [@option{--ctf-symbols=}@var{section}]\n+        [@option{--ctf-strings=}@var{section}]\n         [@option{--no-recurse-limit}|@option{--recurse-limit}]\n         [@option{--special-syms}]\n         [@option{--prefix=}@var{prefix}]\n@@ -2637,6 +2641,8 @@ instructions.\n @item --dwarf-check\n Enable additional checks for consistency of Dwarf information.\n \n+@include ctf.options.texi\n+\n @item -G\n @itemx --stabs\n @cindex stab\n@@ -4636,6 +4642,10 @@ readelf [@option{-a}|@option{--all}]\n          @option{--debug-dump}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]]\n         [@option{--dwarf-depth=@var{n}}]\n         [@option{--dwarf-start=@var{n}}]\n+        [@option{--ctf=}@var{section}]\n+        [@option{--ctf-parent=}@var{section}]\n+        [@option{--ctf-symbols=}@var{section}]\n+        [@option{--ctf-strings=}@var{section}]\n         [@option{-I}|@option{--histogram}]\n         [@option{-v}|@option{--version}]\n         [@option{-W}|@option{--wide}]\n@@ -4816,6 +4826,15 @@ command to @command{ar}, but without using the BFD library.  @xref{ar}.\n @itemx --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]\n @include debug.options.texi\n \n+@include ctf.options.texi\n+@item --ctf-symbols=@var{section}\n+@item --ctf-strings=@var{section}\n+Specify the name of another section from which the CTF file can inherit\n+strings and symbols.\n+\n+If either of @option{--ctf-symbols} or @option{--ctf-strings} is specified, the\n+other must be specified as well.\n+\n @item -I\n @itemx --histogram\n Display a histogram of bucket list lengths when displaying the contents"
    },
    {
      "sha": "cf0528044a5a50b5fc468ac642e213086d6fb31d",
      "filename": "binutils/doc/ctf.options.texi",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/doc/ctf.options.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/doc/ctf.options.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/ctf.options.texi?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -0,0 +1,14 @@\n+@c This file contains the entry for the --ctf, --ctf-parent, --ctf-symbols, -and\n+@c --ctf-strings options that are common to both readelf and objdump.\n+\n+@item --ctf=@var{section}\n+@cindex CTF\n+@cindex Compact Type Format\n+\n+Display the contents of the specified CTF section.  CTF sections themselves\n+contain many subsections, all of which are displayed in order.\n+\n+@item --ctf-parent=@var{section}\n+\n+Specify the name of another section from which the CTF file can inherit\n+types."
    },
    {
      "sha": "156331b502ee332043c70100686d11c3c71e9d64",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 164,
      "deletions": 5,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -56,6 +56,7 @@\n #include \"bucomm.h\"\n #include \"elfcomm.h\"\n #include \"dwarf.h\"\n+#include \"ctf-api.h\"\n #include \"getopt.h\"\n #include \"safe-ctype.h\"\n #include \"dis-asm.h\"\n@@ -98,6 +99,9 @@ static bfd_boolean with_source_code;\t/* -S */\n static int show_raw_insn;\t\t/* --show-raw-insn */\n static int dump_dwarf_section_info;\t/* --dwarf */\n static int dump_stab_section_info;\t/* --stabs */\n+static int dump_ctf_section_info;       /* --ctf */\n+static char *dump_ctf_section_name;\n+static char *dump_ctf_parent_name;\t/* --ctf-parent */\n static int do_demangle;\t\t\t/* -C, --demangle */\n static bfd_boolean disassemble;\t\t/* -d */\n static bfd_boolean disassemble_all;\t/* -D */\n@@ -225,6 +229,7 @@ usage (FILE *stream, int status)\n           =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,\\n\\\n           =addr,=cu_index,=links,=follow-links]\\n\\\n                            Display DWARF info in the file\\n\\\n+  --ctf=SECTION            Display CTF info from SECTION\\n\\\n   -t, --syms               Display the contents of the symbol table(s)\\n\\\n   -T, --dynamic-syms       Display the contents of the dynamic symbol table\\n\\\n   -r, --reloc              Display the relocation entries in the file\\n\\\n@@ -273,7 +278,8 @@ usage (FILE *stream, int status)\n       --dwarf-start=N        Display DIEs starting with N, at the same depth\\n\\\n                              or deeper\\n\\\n       --dwarf-check          Make additional dwarf internal consistency checks.\\\n-      \\n\\n\"));\n+      \\n\\\n+      --ctf-parent=SECTION     Use SECTION as the CTF parent\\n\\n\"));\n       list_supported_targets (program_name, stream);\n       list_supported_architectures (program_name, stream);\n \n@@ -308,7 +314,9 @@ enum option_values\n     OPTION_DWARF_START,\n     OPTION_RECURSE_LIMIT,\n     OPTION_NO_RECURSE_LIMIT,\n-    OPTION_INLINES\n+    OPTION_INLINES,\n+    OPTION_CTF,\n+    OPTION_CTF_PARENT\n   };\n \n static struct option long_options[]=\n@@ -351,6 +359,8 @@ static struct option long_options[]=\n   {\"special-syms\", no_argument, &dump_special_syms, 1},\n   {\"include\", required_argument, NULL, 'I'},\n   {\"dwarf\", optional_argument, NULL, OPTION_DWARF},\n+  {\"ctf\", required_argument, NULL, OPTION_CTF},\n+  {\"ctf-parent\", required_argument, NULL, OPTION_CTF_PARENT},\n   {\"stabs\", no_argument, NULL, 'G'},\n   {\"start-address\", required_argument, NULL, OPTION_START_ADDRESS},\n   {\"stop-address\", required_argument, NULL, OPTION_STOP_ADDRESS},\n@@ -2971,7 +2981,8 @@ dump_dwarf (bfd *abfd)\n    it.  Return NULL on failure.   */\n \n static bfd_byte *\n-read_section_stabs (bfd *abfd, const char *sect_name, bfd_size_type *size_ptr)\n+read_section_stabs (bfd *abfd, const char *sect_name, bfd_size_type *size_ptr,\n+\t\t    bfd_size_type *entsize_ptr)\n {\n   asection *stabsect;\n   bfd_byte *contents;\n@@ -2995,6 +3006,8 @@ read_section_stabs (bfd *abfd, const char *sect_name, bfd_size_type *size_ptr)\n     }\n \n   *size_ptr = bfd_section_size (abfd, stabsect);\n+  if (entsize_ptr)\n+    *entsize_ptr = stabsect->entsize;\n \n   return contents;\n }\n@@ -3118,11 +3131,11 @@ find_stabs_section (bfd *abfd, asection *section, void *names)\n     {\n       if (strtab == NULL)\n \tstrtab = read_section_stabs (abfd, sought->string_section_name,\n-\t\t\t\t     &stabstr_size);\n+\t\t\t\t     &stabstr_size, NULL);\n \n       if (strtab)\n \t{\n-\t  stabs = read_section_stabs (abfd, section->name, &stab_size);\n+\t  stabs = read_section_stabs (abfd, section->name, &stab_size, NULL);\n \t  if (stabs)\n \t    print_section_stabs (abfd, section->name, &sought->string_offset);\n \t}\n@@ -3184,6 +3197,140 @@ dump_bfd_header (bfd *abfd)\n   bfd_printf_vma (abfd, abfd->start_address);\n   printf (\"\\n\");\n }\n+\f\n+\n+/* Formatting callback function passed to ctf_dump.  Returns either the pointer\n+   it is passed, or a pointer to newly-allocated storage, in which case\n+   dump_ctf() will free it when it no longer needs it.  */\n+\n+static char *\n+dump_ctf_indent_lines (ctf_sect_names_t sect ATTRIBUTE_UNUSED,\n+\t\t       char *s, void *arg)\n+{\n+  char *spaces = arg;\n+  char *new_s;\n+\n+  if (asprintf (&new_s, \"%s%s\", spaces, s) < 0)\n+    return s;\n+  return new_s;\n+}\n+\n+/* Make a ctfsect suitable for ctf_bfdopen_ctfsect().  */\n+static ctf_sect_t\n+make_ctfsect (const char *name, bfd_byte *data,\n+\t      bfd_size_type size)\n+{\n+  ctf_sect_t ctfsect;\n+\n+  ctfsect.cts_name = name;\n+  ctfsect.cts_type = SHT_PROGBITS;\n+  ctfsect.cts_flags = 0;\n+  ctfsect.cts_entsize = 1;\n+  ctfsect.cts_offset = 0;\n+  ctfsect.cts_size = size;\n+  ctfsect.cts_data = data;\n+\n+  return ctfsect;\n+}\n+\n+/* Dump one CTF archive member.  */\n+\n+static int\n+dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n+{\n+  ctf_file_t *parent = (ctf_file_t *) arg;\n+  const char *things[] = {\"Labels\", \"Data objects\", \"Function objects\",\n+\t\t\t  \"Variables\", \"Types\", \"Strings\", \"\"};\n+  const char **thing;\n+  size_t i;\n+\n+  /* Only print out the name of non-default-named archive members.\n+     The name .ctf appears everywhere, even for things that aren't\n+     really archives, so printing it out is liable to be confusing.  */\n+  if (strcmp (name, \".ctf\") != 0)\n+    printf (_(\"\\nCTF archive member: %s:\\n\"), sanitize_string (name));\n+\n+  ctf_import (ctf, parent);\n+  for (i = 1, thing = things; *thing[0]; thing++, i++)\n+    {\n+      ctf_dump_state_t *s = NULL;\n+      char *item;\n+\n+      printf (\"\\n  %s:\\n\", *thing);\n+      while ((item = ctf_dump (ctf, &s, i, dump_ctf_indent_lines,\n+\t\t\t       (void *) \"    \")) != NULL)\n+\t{\n+\t  printf (\"%s\\n\", item);\n+\t  free (item);\n+\t}\n+\n+      if (ctf_errno (ctf))\n+\t{\n+\t  non_fatal (_(\"Iteration failed: %s, %s\\n\"), *thing,\n+\t\t   ctf_errmsg (ctf_errno (ctf)));\n+\t  break;\n+\t}\n+    }\n+  return 0;\n+}\n+\n+/* Dump the CTF debugging information.  */\n+\n+static void\n+dump_ctf (bfd *abfd, const char *sect_name, const char *parent_name)\n+{\n+  ctf_archive_t *ctfa, *parenta = NULL;\n+  bfd_byte *ctfdata, *parentdata = NULL;\n+  bfd_size_type ctfsize, parentsize;\n+  ctf_sect_t ctfsect;\n+  ctf_file_t *parent = NULL;\n+  int err;\n+\n+  if ((ctfdata = read_section_stabs (abfd, sect_name, &ctfsize, NULL)) == NULL)\n+      bfd_fatal (bfd_get_filename (abfd));\n+\n+  if (parent_name\n+      && (parentdata = read_section_stabs (abfd, parent_name, &parentsize,\n+\t\t\t\t\t   NULL)) == NULL)\n+      bfd_fatal (bfd_get_filename (abfd));\n+\n+  /* Load the CTF file and dump it.  */\n+\n+  ctfsect = make_ctfsect (sect_name, ctfdata, ctfsize);\n+  if ((ctfa = ctf_bfdopen_ctfsect (abfd, &ctfsect, &err)) == NULL)\n+    {\n+      non_fatal (_(\"CTF open failure: %s\\n\"), ctf_errmsg (err));\n+      bfd_fatal (bfd_get_filename (abfd));\n+    }\n+\n+  if (parentdata)\n+    {\n+      ctfsect = make_ctfsect (parent_name, parentdata, parentsize);\n+      if ((parenta = ctf_bfdopen_ctfsect (abfd, &ctfsect, &err)) == NULL)\n+\t{\n+\t  non_fatal (_(\"CTF open failure: %s\\n\"), ctf_errmsg (err));\n+\t  bfd_fatal (bfd_get_filename (abfd));\n+\t}\n+\n+      /* Assume that the applicable parent archive member is the default one.\n+\t (This is what all known implementations are expected to do, if they\n+\t put CTFs and their parents in archives together.)  */\n+      if ((parent = ctf_arc_open_by_name (parenta, NULL, &err)) == NULL)\n+\t{\n+\t  non_fatal (_(\"CTF open failure: %s\\n\"), ctf_errmsg (err));\n+\t  bfd_fatal (bfd_get_filename (abfd));\n+\t}\n+    }\n+\n+  printf (_(\"Contents of CTF section %s:\\n\"), sanitize_string (sect_name));\n+\n+  ctf_archive_iter (ctfa, dump_ctf_archive_member, parent);\n+  ctf_file_close (parent);\n+  ctf_close (ctfa);\n+  ctf_close (parenta);\n+  free (parentdata);\n+  free (ctfdata);\n+}\n \n \f\n static void\n@@ -3896,6 +4043,8 @@ dump_bfd (bfd *abfd, bfd_boolean is_mainfile)\n     dump_symbols (abfd, TRUE);\n   if (dump_dwarf_section_info)\n     dump_dwarf (abfd);\n+  if (dump_ctf_section_info)\n+    dump_ctf (abfd, dump_ctf_section_name, dump_ctf_parent_name);\n   if (dump_stab_section_info)\n     dump_stabs (abfd);\n   if (dump_reloc_info && ! disassemble)\n@@ -4335,6 +4484,14 @@ main (int argc, char **argv)\n \tcase OPTION_DWARF_CHECK:\n \t  dwarf_check = TRUE;\n \t  break;\n+        case OPTION_CTF:\n+          dump_ctf_section_info = TRUE;\n+          dump_ctf_section_name = xstrdup (optarg);\n+          seenflag = TRUE;\n+          break;\n+\tcase OPTION_CTF_PARENT:\n+\t  dump_ctf_parent_name = xstrdup (optarg);\n+\t  break;\n \tcase 'G':\n \t  dump_stab_section_info = TRUE;\n \t  seenflag = TRUE;\n@@ -4394,6 +4551,8 @@ main (int argc, char **argv)\n     }\n \n   free_only_list ();\n+  free (dump_ctf_section_name);\n+  free (dump_ctf_parent_name);\n \n   END_PROGRESS (program_name);\n "
    },
    {
      "sha": "5ae58574fb4cfa41479699006585b0140cd9a6b8",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 206,
      "deletions": 0,
      "changes": 206,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d9813f196bd1a98d49c2b9b7b90351cb2435b0d/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=7d9813f196bd1a98d49c2b9b7b90351cb2435b0d",
      "patch": "@@ -60,6 +60,7 @@\n #include \"bucomm.h\"\n #include \"elfcomm.h\"\n #include \"dwarf.h\"\n+#include \"ctf-api.h\"\n \n #include \"elf/common.h\"\n #include \"elf/external.h\"\n@@ -183,6 +184,7 @@ typedef struct elf_section_list\n #define DEBUG_DUMP\t(1 << 2)\t/* The -w command line switch.  */\n #define STRING_DUMP     (1 << 3)\t/* The -p command line switch.  */\n #define RELOC_DUMP      (1 << 4)\t/* The -R command line switch.  */\n+#define CTF_DUMP        (1 << 5)        /* The --ctf command line switch.  */\n \n typedef unsigned char dump_type;\n \n@@ -249,12 +251,17 @@ static bfd_boolean do_dump = FALSE;\n static bfd_boolean do_version = FALSE;\n static bfd_boolean do_histogram = FALSE;\n static bfd_boolean do_debugging = FALSE;\n+static bfd_boolean do_ctf = FALSE;\n static bfd_boolean do_arch = FALSE;\n static bfd_boolean do_notes = FALSE;\n static bfd_boolean do_archive_index = FALSE;\n static bfd_boolean is_32bit_elf = FALSE;\n static bfd_boolean decompress_dumps = FALSE;\n \n+static char *dump_ctf_parent_name;\n+static char *dump_ctf_symtab_name;\n+static char *dump_ctf_strtab_name;\n+\n struct group_list\n {\n   struct group_list *  next;\n@@ -4394,6 +4401,10 @@ get_section_type_name (Filedata * filedata, unsigned int sh_type)\n #define OPTION_DWARF_DEPTH\t514\n #define OPTION_DWARF_START\t515\n #define OPTION_DWARF_CHECK\t516\n+#define OPTION_CTF_DUMP\t\t517\n+#define OPTION_CTF_PARENT\t518\n+#define OPTION_CTF_SYMBOLS\t519\n+#define OPTION_CTF_STRINGS\t520\n \n static struct option options[] =\n {\n@@ -4432,6 +4443,12 @@ static struct option options[] =\n   {\"dwarf-start\",      required_argument, 0, OPTION_DWARF_START},\n   {\"dwarf-check\",      no_argument, 0, OPTION_DWARF_CHECK},\n \n+  {\"ctf\",              required_argument, 0, OPTION_CTF_DUMP},\n+\n+  {\"ctf-symbols\",      required_argument, 0, OPTION_CTF_SYMBOLS},\n+  {\"ctf-strings\",      required_argument, 0, OPTION_CTF_STRINGS},\n+  {\"ctf-parent\",       required_argument, 0, OPTION_CTF_PARENT},\n+\n   {\"version\",\t       no_argument, 0, 'v'},\n   {\"wide\",\t       no_argument, 0, 'W'},\n   {\"help\",\t       no_argument, 0, 'H'},\n@@ -4481,6 +4498,15 @@ usage (FILE * stream)\n   --dwarf-depth=N        Do not display DIEs at depth N or greater\\n\\\n   --dwarf-start=N        Display DIEs starting with N, at the same depth\\n\\\n                          or deeper\\n\"));\n+  fprintf (stream, _(\"\\\n+  --ctf=<number|name>    Display CTF info from section <number|name>\\n\\\n+  --ctf-parent=<number|name>\\n\\\n+                         Use section <number|name> as the CTF parent\\n\\n\\\n+  --ctf-symbols=<number|name>\\n\\\n+                         Use section <number|name> as the CTF external symtab\\n\\n\\\n+  --ctf-strings=<number|name>\\n\\\n+                         Use section <number|name> as the CTF external strtab\\n\\n\"));\n+\n #ifdef SUPPORT_DISASSEMBLY\n   fprintf (stream, _(\"\\\n   -i --instruction-dump=<number|name>\\n\\\n@@ -4708,6 +4734,19 @@ parse_args (Filedata * filedata, int argc, char ** argv)\n \tcase OPTION_DWARF_CHECK:\n \t  dwarf_check = TRUE;\n \t  break;\n+\tcase OPTION_CTF_DUMP:\n+\t  do_ctf = TRUE;\n+\t  request_dump (filedata, CTF_DUMP);\n+\t  break;\n+\tcase OPTION_CTF_SYMBOLS:\n+\t  dump_ctf_symtab_name = strdup (optarg);\n+\t  break;\n+\tcase OPTION_CTF_STRINGS:\n+\t  dump_ctf_strtab_name = strdup (optarg);\n+\t  break;\n+\tcase OPTION_CTF_PARENT:\n+\t  dump_ctf_parent_name = strdup (optarg);\n+\t  break;\n \tcase OPTION_DYN_SYMS:\n \t  do_dyn_syms = TRUE;\n \t  break;\n@@ -13769,6 +13808,163 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n   return TRUE;\n }\n \n+static ctf_sect_t *\n+shdr_to_ctf_sect (ctf_sect_t *buf, Elf_Internal_Shdr *shdr, Filedata *filedata)\n+{\n+  buf->cts_name = SECTION_NAME(shdr);\n+  buf->cts_type = shdr->sh_type;\n+  buf->cts_flags = shdr->sh_flags;\n+  buf->cts_size = shdr->sh_size;\n+  buf->cts_entsize = shdr->sh_entsize;\n+  buf->cts_offset = (off64_t) shdr->sh_offset;\n+\n+  return buf;\n+}\n+\n+/* Formatting callback function passed to ctf_dump.  Returns either the pointer\n+   it is passed, or a pointer to newly-allocated storage, in which case\n+   dump_ctf() will free it when it no longer needs it.  */\n+\n+static char *dump_ctf_indent_lines (ctf_sect_names_t sect ATTRIBUTE_UNUSED,\n+\t\t\t\t    char *s, void *arg)\n+{\n+  char *spaces = arg;\n+  char *new_s;\n+\n+  if (asprintf (&new_s, \"%s%s\", spaces, s) < 0)\n+    return s;\n+  return new_s;\n+}\n+\n+static bfd_boolean\n+dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n+{\n+  Elf_Internal_Shdr *  parent_sec = NULL;\n+  Elf_Internal_Shdr *  symtab_sec = NULL;\n+  Elf_Internal_Shdr *  strtab_sec = NULL;\n+  void *      \t       data = NULL;\n+  void *      \t       symdata = NULL;\n+  void *      \t       strdata = NULL;\n+  void *      \t       parentdata = NULL;\n+  ctf_sect_t           ctfsect, symsect, strsect, parentsect;\n+  ctf_sect_t *         symsectp = NULL;\n+  ctf_sect_t *         strsectp = NULL;\n+  ctf_file_t *         ctf = NULL;\n+  ctf_file_t *         parent = NULL;\n+\n+  const char *things[] = {\"Labels\", \"Data objects\", \"Function objects\",\n+\t\t\t  \"Variables\", \"Types\", \"Strings\", \"\"};\n+  const char **thing;\n+  int err;\n+  bfd_boolean ret = FALSE;\n+  size_t i;\n+\n+  shdr_to_ctf_sect (&ctfsect, section, filedata);\n+  data = get_section_contents (section, filedata);\n+  ctfsect.cts_data = data;\n+\n+  if (dump_ctf_symtab_name)\n+    {\n+      if ((symtab_sec = find_section (filedata, dump_ctf_symtab_name)) == NULL)\n+\t{\n+\t  error (_(\"No symbol section named %s\\n\"), dump_ctf_symtab_name);\n+\t  goto fail;\n+\t}\n+      if ((symdata = (void *) get_data (NULL, filedata,\n+\t\t\t\t\tsymtab_sec->sh_offset, 1,\n+\t\t\t\t\tsymtab_sec->sh_size,\n+\t\t\t\t\t_(\"symbols\"))) == NULL)\n+\tgoto fail;\n+      symsectp = shdr_to_ctf_sect (&symsect, symtab_sec, filedata);\n+      symsect.cts_data = symdata;\n+    }\n+  if (dump_ctf_strtab_name)\n+    {\n+      if ((strtab_sec = find_section (filedata, dump_ctf_strtab_name)) == NULL)\n+\t{\n+\t  error (_(\"No string table section named %s\\n\"),\n+\t\t dump_ctf_strtab_name);\n+\t  goto fail;\n+\t}\n+      if ((strdata = (void *) get_data (NULL, filedata,\n+\t\t\t\t\tstrtab_sec->sh_offset, 1,\n+\t\t\t\t\tstrtab_sec->sh_size,\n+\t\t\t\t\t_(\"strings\"))) == NULL)\n+\tgoto fail;\n+      strsectp = shdr_to_ctf_sect (&strsect, strtab_sec, filedata);\n+      strsect.cts_data = strdata;\n+    }\n+  if (dump_ctf_parent_name)\n+    {\n+      if ((parent_sec = find_section (filedata, dump_ctf_parent_name)) == NULL)\n+\t{\n+\t  error (_(\"No CTF parent section named %s\\n\"), dump_ctf_parent_name);\n+\t  goto fail;\n+\t}\n+      if ((parentdata = (void *) get_data (NULL, filedata,\n+\t\t\t\t\t   parent_sec->sh_offset, 1,\n+\t\t\t\t\t   parent_sec->sh_size,\n+\t\t\t\t\t   _(\"CTF parent\"))) == NULL)\n+\tgoto fail;\n+      shdr_to_ctf_sect (&parentsect, parent_sec, filedata);\n+      parentsect.cts_data = parentdata;\n+    }\n+\n+  /* Load the CTF file and dump it.  */\n+\n+  if ((ctf = ctf_bufopen (&ctfsect, symsectp, strsectp, &err)) == NULL)\n+    {\n+      error (_(\"CTF open failure: %s\\n\"), ctf_errmsg (err));\n+      goto fail;\n+    }\n+\n+  if (parentdata)\n+    {\n+      if ((parent = ctf_bufopen (&parentsect, symsectp, strsectp, &err)) == NULL)\n+\t{\n+\t  error (_(\"CTF open failure: %s\\n\"), ctf_errmsg (err));\n+\t  goto fail;\n+\t}\n+\n+      ctf_import (ctf, parent);\n+    }\n+\n+  ret = TRUE;\n+\n+  printf (_(\"\\nDump of CTF section '%s':\\n\"),\n+\t  printable_section_name (filedata, section));\n+\n+  for (i = 1, thing = things; *thing[0]; thing++, i++)\n+    {\n+      ctf_dump_state_t *s = NULL;\n+      char *item;\n+\n+      printf (\"\\n  %s:\\n\", *thing);\n+      while ((item = ctf_dump (ctf, &s, i, dump_ctf_indent_lines,\n+\t\t\t       (void *) \"    \")) != NULL)\n+\t{\n+\t  printf (\"%s\\n\", item);\n+\t  free (item);\n+\t}\n+\n+      if (ctf_errno (ctf))\n+\t{\n+\t  error (_(\"Iteration failed: %s, %s\\n\"), *thing,\n+\t\t   ctf_errmsg (ctf_errno (ctf)));\n+\t  ret = FALSE;\n+\t}\n+    }\n+\n+ fail:\n+  ctf_file_close (ctf);\n+  ctf_file_close (parent);\n+  free (parentdata);\n+  free (data);\n+  free (symdata);\n+  free (strdata);\n+  return ret;\n+}\n+\n static bfd_boolean\n load_specific_debug_section (enum dwarf_section_display_enum  debug,\n \t\t\t     const Elf_Internal_Shdr *        sec,\n@@ -14106,6 +14302,12 @@ process_section_contents (Filedata * filedata)\n \t  if (! display_debug_section (i, section, filedata))\n \t    res = FALSE;\n \t}\n+\n+      if (dump & CTF_DUMP)\n+\t{\n+\t  if (! dump_section_as_ctf (section, filedata))\n+\t    res = FALSE;\n+\t}\n     }\n \n   /* Check to see if the user requested a\n@@ -19985,5 +20187,9 @@ main (int argc, char ** argv)\n   if (cmdline.dump_sects != NULL)\n     free (cmdline.dump_sects);\n \n+  free (dump_ctf_symtab_name);\n+  free (dump_ctf_strtab_name);\n+  free (dump_ctf_parent_name);\n+\n   return err ? EXIT_FAILURE : EXIT_SUCCESS;\n }"
    }
  ]
}