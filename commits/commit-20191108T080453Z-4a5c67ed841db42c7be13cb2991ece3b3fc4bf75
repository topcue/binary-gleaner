{
  "sha": "4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE1YzY3ZWQ4NDFkYjQyYzdiZTEzY2IyOTkxZWNlM2IzZmM0YmY3NQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-08T08:04:53Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-08T08:04:53Z"
    },
    "message": "x86: convert Control/Debug/Test from bitfield to enumerator\n\nThis is to further shrink the operand type representation.",
    "tree": {
      "sha": "1fd1a44252fd896a35508f621c16725163ecd844",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1fd1a44252fd896a35508f621c16725163ecd844"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "00cee14fbad24453ff56656c5726ef5e4b0de588",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00cee14fbad24453ff56656c5726ef5e4b0de588",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/00cee14fbad24453ff56656c5726ef5e4b0de588"
    }
  ],
  "stats": {
    "total": 28050,
    "additions": 14035,
    "deletions": 14015
  },
  "files": [
    {
      "sha": "1905eb1ba3eed933283c9b59cfcbcde8189bce8c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (pi, check_byte_reg, build_modrm_byte,\n+\tparse_real_register): Use \"class\" instead of \"control\"/\"debug\"/\n+\t\"test\" fields.\n+\n 2019-11-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (pi, check_byte_reg, process_operands,"
    },
    {
      "sha": "f31ab3904018859479decfb7eea5a7593f9d0cae",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -3049,9 +3049,9 @@ pi (const char *line, i386_insn *x)\n \t  || x->types[j].bitfield.regmmx\n \t  || x->types[j].bitfield.regsimd\n \t  || x->types[j].bitfield.class == SReg\n-\t  || x->types[j].bitfield.control\n-\t  || x->types[j].bitfield.debug\n-\t  || x->types[j].bitfield.test)\n+\t  || x->types[j].bitfield.class == RegCR\n+\t  || x->types[j].bitfield.class == RegDR\n+\t  || x->types[j].bitfield.class == RegTR)\n \tfprintf (stdout, \"%s\\n\", x->op[j].regs->reg_name);\n       if (operand_type_check (x->types[j], imm))\n \tpe (x->op[j].imms);\n@@ -6605,9 +6605,9 @@ check_byte_reg (void)\n \t  || i.types[op].bitfield.regmmx\n \t  || i.types[op].bitfield.regsimd\n \t  || i.types[op].bitfield.class == SReg\n-\t  || i.types[op].bitfield.control\n-\t  || i.types[op].bitfield.debug\n-\t  || i.types[op].bitfield.test)\n+\t  || i.types[op].bitfield.class == RegCR\n+\t  || i.types[op].bitfield.class == RegDR\n+\t  || i.types[op].bitfield.class == RegTR)\n \t{\n \t  as_bad (_(\"`%s%s' not allowed with `%s%c'\"),\n \t\t  register_prefix,\n@@ -7363,7 +7363,7 @@ build_modrm_byte (void)\n \t}\n       if (flag_code != CODE_64BIT && (i.rex & REX_R))\n \t{\n-\t  if (!i.types[!i.tm.opcode_modifier.regmem].bitfield.control)\n+\t  if (i.types[!i.tm.opcode_modifier.regmem].bitfield.class != RegCR)\n \t    abort ();\n \t  i.rex &= ~REX_R;\n \t  add_prefix (LOCK_PREFIX_OPCODE);\n@@ -7683,9 +7683,9 @@ build_modrm_byte (void)\n \t\t  || i.types[op].bitfield.regbnd\n \t\t  || i.types[op].bitfield.regmask\n \t\t  || i.types[op].bitfield.class == SReg\n-\t\t  || i.types[op].bitfield.control\n-\t\t  || i.types[op].bitfield.debug\n-\t\t  || i.types[op].bitfield.test)\n+\t\t  || i.types[op].bitfield.class == RegCR\n+\t\t  || i.types[op].bitfield.class == RegDR\n+\t\t  || i.types[op].bitfield.class == RegTR)\n \t\tbreak;\n \t      if (i.types[op].bitfield.regsimd)\n \t\t{\n@@ -10922,9 +10922,9 @@ parse_real_register (char *reg_string, char **end_op)\n \n   if ((r->reg_type.bitfield.dword\n        || (r->reg_type.bitfield.class == SReg && r->reg_num > 3)\n-       || r->reg_type.bitfield.control\n-       || r->reg_type.bitfield.debug\n-       || r->reg_type.bitfield.test)\n+       || r->reg_type.bitfield.class == RegCR\n+       || r->reg_type.bitfield.class == RegDR\n+       || r->reg_type.bitfield.class == RegTR)\n       && !cpu_arch_flags.bitfield.cpui386)\n     return (const reg_entry *) NULL;\n \n@@ -10965,7 +10965,7 @@ parse_real_register (char *reg_string, char **end_op)\n     }\n \n   if (((r->reg_flags & (RegRex64 | RegRex)) || r->reg_type.bitfield.qword)\n-      && (!cpu_arch_flags.bitfield.cpulm || !r->reg_type.bitfield.control)\n+      && (!cpu_arch_flags.bitfield.cpulm || r->reg_type.bitfield.class != RegCR)\n       && flag_code != CODE_64BIT)\n     return (const reg_entry *) NULL;\n "
    },
    {
      "sha": "6becd0c5f1e80a30bb32c27c206e463d67368d56",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -1,3 +1,19 @@\n+2019-11-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init): Add Class= to\n+\tOPERAND_TYPE_CONTROL, OPERAND_TYPE_TEST, and OPERAND_TYPE_DEBUG\n+\tentries.\n+\t(operand_classes): Add RegCR, RegDR, and RegTR entries.\n+\t(operand_types): Drop Control, Debug, and Test entries.\n+\t* i386-opc.h (enum operand_class): Add RegCR, RegDR, and RegTR.\n+\t(Control, Debug, Test): Delete.\n+\t(union i386_operand_type): Remove control, debug, and test\n+\tfields.\n+\t* i386-opc.tbl (Control, Debug, Test): Define.\n+\t* i386-reg.tbl: Replace Control by Class=RegCR, Debug by\n+\tClass=RegDR, and Test by Class=RegTR.\n+\t* i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-11-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (operand_type_init): Add Class= to"
    },
    {
      "sha": "11a84264004268a495ce81e7a5b10b8361add573",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -426,11 +426,11 @@ static initializer operand_type_init[] =\n   { \"OPERAND_TYPE_SHIFTCOUNT\",\n     \"ShiftCount\" },\n   { \"OPERAND_TYPE_CONTROL\",\n-    \"Control\" },\n+    \"Class=RegCR\" },\n   { \"OPERAND_TYPE_TEST\",\n-    \"Test\" },\n+    \"Class=RegTR\" },\n   { \"OPERAND_TYPE_DEBUG\",\n-    \"Debug\" },\n+    \"Class=RegDR\" },\n   { \"OPERAND_TYPE_FLOATREG\",\n     \"Class=Reg|Tbyte\" },\n   { \"OPERAND_TYPE_FLOATACC\",\n@@ -684,6 +684,9 @@ static const struct {\n } operand_classes[] = {\n   CLASS (Reg),\n   CLASS (SReg),\n+  CLASS (RegCR),\n+  CLASS (RegDR),\n+  CLASS (RegTR),\n };\n \n #undef CLASS\n@@ -708,9 +711,6 @@ static bitfield operand_types[] =\n   BITFIELD (Disp64),\n   BITFIELD (InOutPortReg),\n   BITFIELD (ShiftCount),\n-  BITFIELD (Control),\n-  BITFIELD (Debug),\n-  BITFIELD (Test),\n   BITFIELD (Acc),\n   BITFIELD (JumpAbsolute),\n   BITFIELD (EsSeg),"
    },
    {
      "sha": "b9282a4b38d82e61481182cfb314ab5df8dd56b5",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 83,
      "deletions": 83,
      "changes": 166,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -1365,196 +1365,196 @@\n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n-  { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n-  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SREG \\\n   { { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_JUMPABSOLUTE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n   { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ESSEG \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYIMM \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } }"
    },
    {
      "sha": "2417c08cbd84eda030b0706ae8bdc62f20bc48b3",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -710,6 +710,9 @@ enum operand_class\n   ClassNone,\n   Reg, /* GPRs and FP regs, distinguished by operand size */\n   SReg, /* Segment register */\n+  RegCR, /* Control register */\n+  RegDR, /* Debug register */\n+  RegTR, /* Test register */\n };\n \n /* Position of operand_type bits.  */\n@@ -724,12 +727,6 @@ enum\n   RegSIMD,\n   /* Vector Mask registers */\n   RegMask,\n-  /* Control register */\n-  Control,\n-  /* Debug register */\n-  Debug,\n-  /* Test register */\n-  Test,\n   /* 1 bit immediate */\n   Imm1,\n   /* 8 bit immediate */\n@@ -820,9 +817,6 @@ typedef union i386_operand_type\n       unsigned int regmmx:1;\n       unsigned int regsimd:1;\n       unsigned int regmask:1;\n-      unsigned int control:1;\n-      unsigned int debug:1;\n-      unsigned int test:1;\n       unsigned int imm1:1;\n       unsigned int imm8:1;\n       unsigned int imm8s:1;"
    },
    {
      "sha": "cdb3b0f41b02ee7de39b8b4e296821d8f07979a3",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -32,6 +32,10 @@\n \n #define SReg  Class=SReg\n \n+#define Control Class=RegCR\n+#define Debug   Class=RegDR\n+#define Test    Class=RegTR\n+\n #define RegXMM RegSIMD|Xmmword\n #define RegYMM RegSIMD|Ymmword\n #define RegZMM RegSIMD|Zmmword"
    },
    {
      "sha": "5d6dc535d2a8b5f43f4318f44467bf2334042795",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 56,
      "deletions": 56,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "patch": "@@ -113,64 +113,64 @@ fs, Class=SReg, 0, 4, 44, 54\n gs, Class=SReg, 0, 5, 45, 55\n flat, Class=SReg, 0, RegFlat, Dw2Inval, Dw2Inval\n // Control registers.\n-cr0, Control, 0, 0, Dw2Inval, Dw2Inval\n-cr1, Control, 0, 1, Dw2Inval, Dw2Inval\n-cr2, Control, 0, 2, Dw2Inval, Dw2Inval\n-cr3, Control, 0, 3, Dw2Inval, Dw2Inval\n-cr4, Control, 0, 4, Dw2Inval, Dw2Inval\n-cr5, Control, 0, 5, Dw2Inval, Dw2Inval\n-cr6, Control, 0, 6, Dw2Inval, Dw2Inval\n-cr7, Control, 0, 7, Dw2Inval, Dw2Inval\n-cr8, Control, RegRex, 0, Dw2Inval, Dw2Inval\n-cr9, Control, RegRex, 1, Dw2Inval, Dw2Inval\n-cr10, Control, RegRex, 2, Dw2Inval, Dw2Inval\n-cr11, Control, RegRex, 3, Dw2Inval, Dw2Inval\n-cr12, Control, RegRex, 4, Dw2Inval, Dw2Inval\n-cr13, Control, RegRex, 5, Dw2Inval, Dw2Inval\n-cr14, Control, RegRex, 6, Dw2Inval, Dw2Inval\n-cr15, Control, RegRex, 7, Dw2Inval, Dw2Inval\n+cr0, Class=RegCR, 0, 0, Dw2Inval, Dw2Inval\n+cr1, Class=RegCR, 0, 1, Dw2Inval, Dw2Inval\n+cr2, Class=RegCR, 0, 2, Dw2Inval, Dw2Inval\n+cr3, Class=RegCR, 0, 3, Dw2Inval, Dw2Inval\n+cr4, Class=RegCR, 0, 4, Dw2Inval, Dw2Inval\n+cr5, Class=RegCR, 0, 5, Dw2Inval, Dw2Inval\n+cr6, Class=RegCR, 0, 6, Dw2Inval, Dw2Inval\n+cr7, Class=RegCR, 0, 7, Dw2Inval, Dw2Inval\n+cr8, Class=RegCR, RegRex, 0, Dw2Inval, Dw2Inval\n+cr9, Class=RegCR, RegRex, 1, Dw2Inval, Dw2Inval\n+cr10, Class=RegCR, RegRex, 2, Dw2Inval, Dw2Inval\n+cr11, Class=RegCR, RegRex, 3, Dw2Inval, Dw2Inval\n+cr12, Class=RegCR, RegRex, 4, Dw2Inval, Dw2Inval\n+cr13, Class=RegCR, RegRex, 5, Dw2Inval, Dw2Inval\n+cr14, Class=RegCR, RegRex, 6, Dw2Inval, Dw2Inval\n+cr15, Class=RegCR, RegRex, 7, Dw2Inval, Dw2Inval\n // Debug registers.\n-db0, Debug, 0, 0, Dw2Inval, Dw2Inval\n-db1, Debug, 0, 1, Dw2Inval, Dw2Inval\n-db2, Debug, 0, 2, Dw2Inval, Dw2Inval\n-db3, Debug, 0, 3, Dw2Inval, Dw2Inval\n-db4, Debug, 0, 4, Dw2Inval, Dw2Inval\n-db5, Debug, 0, 5, Dw2Inval, Dw2Inval\n-db6, Debug, 0, 6, Dw2Inval, Dw2Inval\n-db7, Debug, 0, 7, Dw2Inval, Dw2Inval\n-db8, Debug, RegRex, 0, Dw2Inval, Dw2Inval\n-db9, Debug, RegRex, 1, Dw2Inval, Dw2Inval\n-db10, Debug, RegRex, 2, Dw2Inval, Dw2Inval\n-db11, Debug, RegRex, 3, Dw2Inval, Dw2Inval\n-db12, Debug, RegRex, 4, Dw2Inval, Dw2Inval\n-db13, Debug, RegRex, 5, Dw2Inval, Dw2Inval\n-db14, Debug, RegRex, 6, Dw2Inval, Dw2Inval\n-db15, Debug, RegRex, 7, Dw2Inval, Dw2Inval\n-dr0, Debug, 0, 0, Dw2Inval, Dw2Inval\n-dr1, Debug, 0, 1, Dw2Inval, Dw2Inval\n-dr2, Debug, 0, 2, Dw2Inval, Dw2Inval\n-dr3, Debug, 0, 3, Dw2Inval, Dw2Inval\n-dr4, Debug, 0, 4, Dw2Inval, Dw2Inval\n-dr5, Debug, 0, 5, Dw2Inval, Dw2Inval\n-dr6, Debug, 0, 6, Dw2Inval, Dw2Inval\n-dr7, Debug, 0, 7, Dw2Inval, Dw2Inval\n-dr8, Debug, RegRex, 0, Dw2Inval, Dw2Inval\n-dr9, Debug, RegRex, 1, Dw2Inval, Dw2Inval\n-dr10, Debug, RegRex, 2, Dw2Inval, Dw2Inval\n-dr11, Debug, RegRex, 3, Dw2Inval, Dw2Inval\n-dr12, Debug, RegRex, 4, Dw2Inval, Dw2Inval\n-dr13, Debug, RegRex, 5, Dw2Inval, Dw2Inval\n-dr14, Debug, RegRex, 6, Dw2Inval, Dw2Inval\n-dr15, Debug, RegRex, 7, Dw2Inval, Dw2Inval\n+db0, Class=RegDR, 0, 0, Dw2Inval, Dw2Inval\n+db1, Class=RegDR, 0, 1, Dw2Inval, Dw2Inval\n+db2, Class=RegDR, 0, 2, Dw2Inval, Dw2Inval\n+db3, Class=RegDR, 0, 3, Dw2Inval, Dw2Inval\n+db4, Class=RegDR, 0, 4, Dw2Inval, Dw2Inval\n+db5, Class=RegDR, 0, 5, Dw2Inval, Dw2Inval\n+db6, Class=RegDR, 0, 6, Dw2Inval, Dw2Inval\n+db7, Class=RegDR, 0, 7, Dw2Inval, Dw2Inval\n+db8, Class=RegDR, RegRex, 0, Dw2Inval, Dw2Inval\n+db9, Class=RegDR, RegRex, 1, Dw2Inval, Dw2Inval\n+db10, Class=RegDR, RegRex, 2, Dw2Inval, Dw2Inval\n+db11, Class=RegDR, RegRex, 3, Dw2Inval, Dw2Inval\n+db12, Class=RegDR, RegRex, 4, Dw2Inval, Dw2Inval\n+db13, Class=RegDR, RegRex, 5, Dw2Inval, Dw2Inval\n+db14, Class=RegDR, RegRex, 6, Dw2Inval, Dw2Inval\n+db15, Class=RegDR, RegRex, 7, Dw2Inval, Dw2Inval\n+dr0, Class=RegDR, 0, 0, Dw2Inval, Dw2Inval\n+dr1, Class=RegDR, 0, 1, Dw2Inval, Dw2Inval\n+dr2, Class=RegDR, 0, 2, Dw2Inval, Dw2Inval\n+dr3, Class=RegDR, 0, 3, Dw2Inval, Dw2Inval\n+dr4, Class=RegDR, 0, 4, Dw2Inval, Dw2Inval\n+dr5, Class=RegDR, 0, 5, Dw2Inval, Dw2Inval\n+dr6, Class=RegDR, 0, 6, Dw2Inval, Dw2Inval\n+dr7, Class=RegDR, 0, 7, Dw2Inval, Dw2Inval\n+dr8, Class=RegDR, RegRex, 0, Dw2Inval, Dw2Inval\n+dr9, Class=RegDR, RegRex, 1, Dw2Inval, Dw2Inval\n+dr10, Class=RegDR, RegRex, 2, Dw2Inval, Dw2Inval\n+dr11, Class=RegDR, RegRex, 3, Dw2Inval, Dw2Inval\n+dr12, Class=RegDR, RegRex, 4, Dw2Inval, Dw2Inval\n+dr13, Class=RegDR, RegRex, 5, Dw2Inval, Dw2Inval\n+dr14, Class=RegDR, RegRex, 6, Dw2Inval, Dw2Inval\n+dr15, Class=RegDR, RegRex, 7, Dw2Inval, Dw2Inval\n // Test registers.\n-tr0, Test, 0, 0, Dw2Inval, Dw2Inval\n-tr1, Test, 0, 1, Dw2Inval, Dw2Inval\n-tr2, Test, 0, 2, Dw2Inval, Dw2Inval\n-tr3, Test, 0, 3, Dw2Inval, Dw2Inval\n-tr4, Test, 0, 4, Dw2Inval, Dw2Inval\n-tr5, Test, 0, 5, Dw2Inval, Dw2Inval\n-tr6, Test, 0, 6, Dw2Inval, Dw2Inval\n-tr7, Test, 0, 7, Dw2Inval, Dw2Inval\n+tr0, Class=RegTR, 0, 0, Dw2Inval, Dw2Inval\n+tr1, Class=RegTR, 0, 1, Dw2Inval, Dw2Inval\n+tr2, Class=RegTR, 0, 2, Dw2Inval, Dw2Inval\n+tr3, Class=RegTR, 0, 3, Dw2Inval, Dw2Inval\n+tr4, Class=RegTR, 0, 4, Dw2Inval, Dw2Inval\n+tr5, Class=RegTR, 0, 5, Dw2Inval, Dw2Inval\n+tr6, Class=RegTR, 0, 6, Dw2Inval, Dw2Inval\n+tr7, Class=RegTR, 0, 7, Dw2Inval, Dw2Inval\n // MMX and simd registers.\n mm0, RegMMX, 0, 0, 29, 41\n mm1, RegMMX, 0, 1, 30, 42"
    },
    {
      "sha": "4cd7f2abeddf83b72a7d3f044f01571188c60ff0",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 13847,
      "deletions": 13847,
      "changes": 27694,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=4a5c67ed841db42c7be13cb2991ece3b3fc4bf75"
    }
  ]
}