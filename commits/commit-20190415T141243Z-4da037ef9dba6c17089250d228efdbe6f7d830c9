{
  "sha": "4da037ef9dba6c17089250d228efdbe6f7d830c9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGRhMDM3ZWY5ZGJhNmMxNzA4OTI1MGQyMjhlZmRiZTZmN2Q4MzBjOQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-15T11:29:40Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-15T14:12:43Z"
    },
    "message": "AArch64 SVE: Check for vector length change when getting gdbarch\n\nOverride the thread_architecture method, similar to SPU.  If the vector\nlength has changed, then find the arch using info, making sure the vector\nlength is passed down to the init routine.\n\nIn the init routine, ensure the arch has the correct vector length.\n\nExample output. Program is stopped in thread 2, just before it calls prctl\nto change the vector length\n\n(gdb) info threads\n  Id   Target Id                                     Frame\n  1    Thread 0xffffbf6f4000 (LWP 3188) \"sve_change\" 0x0000ffffbf6ae130 in pthread_join ()\n* 2    Thread 0xffffbf55e200 (LWP 3189) \"sve_change\" thread1 (arg=0xfeedface) at sve_change_size.c:28\n(gdb) print $vg\n$1 = 8\n(gdb) print $z0.s.u\n$2 = {623191333, 623191333, 623191333, 623191333, 0 <repeats 12 times>}\n(gdb) n\n29\t  int ret = prctl(PR_SVE_SET_VL, vl/2);\n(gdb) n\n30\t  printf (\"Changed: ret\\n\", ret);\n(gdb) print $vg\n$4 = 4\n(gdb) print $z0.s.u\n$5 = {623191333, 623191333, 623191333, 623191333, 0, 0, 0, 0}\n(gdb) thr 1\n[Switching to thread 1 (Thread 0xffffbf6f4000 (LWP 3181))]\n(gdb) print $vg\n$6 = 8\n(gdb) print $z0.s.u\n$7 = {623191333, 623191333, 623191333, 623191333, 0 <repeats 12 times>}\n\ngdb/ChangeLog:\n\n\t* aarch64-linux-nat.c\n\t(aarch64_linux_nat_target::thread_architecture): Add override.\n\t* aarch64-tdep.c (aarch64_gdbarch_init): Ensure different tdesc for\n\teach VQ.",
    "tree": {
      "sha": "d255e2f1b678fe4c1bef688cac9d5c4e1d6a6307",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d255e2f1b678fe4c1bef688cac9d5c4e1d6a6307"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4da037ef9dba6c17089250d228efdbe6f7d830c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4da037ef9dba6c17089250d228efdbe6f7d830c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4da037ef9dba6c17089250d228efdbe6f7d830c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4da037ef9dba6c17089250d228efdbe6f7d830c9/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 59,
    "deletions": 5
  },
  "files": [
    {
      "sha": "b3155ad744394d3bd4bc5ad7133ef21e4aeff8bc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4da037ef9dba6c17089250d228efdbe6f7d830c9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4da037ef9dba6c17089250d228efdbe6f7d830c9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4da037ef9dba6c17089250d228efdbe6f7d830c9",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-linux-nat.c\n+\t(aarch64_linux_nat_target::thread_architecture): Add override.\n+\t* aarch64-tdep.c (aarch64_gdbarch_init): Ensure different tdesc for\n+\teach VQ.\n+\n 2019-04-15  Alan Hayward  <alan.hayward@arm.com>\n \n \t* aarch64-tdep.c (aarch64_gdbarch_init): Move gdbarch lookup."
    },
    {
      "sha": "c5070c8590d12f7cfe6ce0baa6497d5123a39074",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4da037ef9dba6c17089250d228efdbe6f7d830c9/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4da037ef9dba6c17089250d228efdbe6f7d830c9/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=4da037ef9dba6c17089250d228efdbe6f7d830c9",
      "patch": "@@ -46,6 +46,7 @@\n \n /* Defines ps_err_e, struct ps_prochandle.  */\n #include \"gdb_proc_service.h\"\n+#include \"arch-utils.h\"\n \n #ifndef TRAP_HWBKPT\n #define TRAP_HWBKPT 0x0004\n@@ -95,6 +96,8 @@ class aarch64_linux_nat_target final : public linux_nat_target\n   /* Add our siginfo layout converter.  */\n   bool low_siginfo_fixup (siginfo_t *ptrace, gdb_byte *inf, int direction)\n     override;\n+\n+  struct gdbarch *thread_architecture (ptid_t) override;\n };\n \n static aarch64_linux_nat_target the_aarch64_linux_nat_target;\n@@ -939,6 +942,34 @@ aarch64_linux_nat_target::can_do_single_step ()\n   return 1;\n }\n \n+/* Implement the \"thread_architecture\" target_ops method.  */\n+\n+struct gdbarch *\n+aarch64_linux_nat_target::thread_architecture (ptid_t ptid)\n+{\n+  /* Return the gdbarch for the current thread.  If the vector length has\n+     changed since the last time this was called, then do a further lookup.  */\n+\n+  uint64_t vq = aarch64_sve_get_vq (ptid.lwp ());\n+\n+  /* Find the current gdbarch the same way as process_stratum_target.  Only\n+     return it if the current vector length matches the one in the tdep.  */\n+  inferior *inf = find_inferior_ptid (ptid);\n+  gdb_assert (inf != NULL);\n+  if (vq == gdbarch_tdep (inf->gdbarch)->vq)\n+    return inf->gdbarch;\n+\n+  /* We reach here if the vector length for the thread is different from its\n+     value at process start.  Lookup gdbarch via info (potentially creating a\n+     new one), stashing the vector length inside id.  Use -1 for when SVE\n+     unavailable, to distinguish from an unset value of 0.  */\n+  struct gdbarch_info info;\n+  gdbarch_info_init (&info);\n+  info.bfd_arch_info = bfd_lookup_arch (bfd_arch_spu, bfd_mach_spu);\n+  info.id = (int *) (vq == 0 ? -1 : vq);\n+  return gdbarch_find_by_info (info);\n+}\n+\n /* Define AArch64 maintenance commands.  */\n \n static void"
    },
    {
      "sha": "cb185ee337fe54ff65722a3fc01f2c60200241e0",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 21,
      "deletions": 5,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4da037ef9dba6c17089250d228efdbe6f7d830c9/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4da037ef9dba6c17089250d228efdbe6f7d830c9/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=4da037ef9dba6c17089250d228efdbe6f7d830c9",
      "patch": "@@ -3198,20 +3198,36 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   int i, num_regs = 0, num_pseudo_regs = 0;\n   int first_pauth_regnum = -1, pauth_ra_state_offset = -1;\n \n+  /* Use the vector length passed via the target info.  Here -1 is used for no\n+     SVE, and 0 is unset.  If unset then use the vector length from the existing\n+     tdesc.  */\n+  uint64_t vq = 0;\n+  if (info.id == (int *) -1)\n+    vq = 0;\n+  else if (info.id != 0)\n+    vq = (uint64_t) info.id;\n+  else\n+    vq = aarch64_get_tdesc_vq (info.target_desc);\n+\n+  if (vq > AARCH64_MAX_SVE_VQ)\n+    internal_error (__FILE__, __LINE__, _(\"VQ out of bounds: %ld (max %d)\"),\n+\t\t    vq, AARCH64_MAX_SVE_VQ);\n+\n   /* If there is already a candidate, use it.  */\n   for (gdbarch_list *best_arch = gdbarch_list_lookup_by_info (arches, &info);\n        best_arch != nullptr;\n        best_arch = gdbarch_list_lookup_by_info (best_arch->next, &info))\n     {\n       struct gdbarch_tdep *tdep = gdbarch_tdep (best_arch->gdbarch);\n-      if (tdep)\n+      if (tdep && tdep->vq == vq)\n \treturn best_arch->gdbarch;\n     }\n \n-  /* Ensure we always have a target description.  */\n+  /* Ensure we always have a target descriptor, and that it is for the given VQ\n+     value.  */\n   const struct target_desc *tdesc = info.target_desc;\n-  if (!tdesc_has_registers (tdesc))\n-    tdesc = aarch64_read_description (0, false);\n+  if (!tdesc_has_registers (tdesc) || vq != aarch64_get_tdesc_vq (tdesc))\n+    tdesc = aarch64_read_description (vq, false);\n   gdb_assert (tdesc);\n \n   feature_core = tdesc_find_feature (tdesc,\"org.gnu.gdb.aarch64.core\");\n@@ -3304,7 +3320,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   tdep->lowest_pc = 0x20;\n   tdep->jb_pc = -1;\t\t/* Longjump support not enabled by default.  */\n   tdep->jb_elt_size = 8;\n-  tdep->vq = aarch64_get_tdesc_vq (tdesc);\n+  tdep->vq = vq;\n   tdep->pauth_reg_base = first_pauth_regnum;\n   tdep->pauth_ra_state_regnum = (feature_pauth == NULL) ? -1\n \t\t\t\t: pauth_ra_state_offset + num_regs;"
    }
  ]
}