{
  "sha": "d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
  "node_id": "C_kwDOANOeidoAKGQzZGUwODYwMTA0YjhiYjhkNDk2NTI3ZmJiMDQyYzNiNGM1YzgyZGM",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T20:26:53Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T20:27:42Z"
    },
    "message": "aarch64: [SME] SVE2 instructions added to support SME\n\nThis patch is adding new SVE2 instructions added to support SME extension.\nThe following SVE2 instructions are added by the SME architecture:\n* PSEL,\n* REVD, SCLAMP and UCLAMP.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (parse_sme_pred_reg_with_index):\n\tNew parser.\n\t(parse_operands): New parser.\n\t* testsuite/gas/aarch64/sme-9-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-9-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-9-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-9.d: New test.\n\t* testsuite/gas/aarch64/sme-9.s: New test.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New operand\n\tAARCH64_OPND_SME_PnT_Wm_imm.\n\nopcodes/ChangeLog:\n\n\t* aarch64-asm.c (aarch64_ins_sme_pred_reg_with_index):\n\tNew inserter.\n\t* aarch64-dis.c (aarch64_ext_sme_pred_reg_with_index):\n\tNew extractor.\n\t* aarch64-opc.c (aarch64_print_operand): Printout of\n\tOPND_SME_PnT_Wm_imm.\n\t* aarch64-opc.h (enum aarch64_field_kind): New bitfields\n\tFLD_SME_Rm, FLD_SME_i1, FLD_SME_tszh, FLD_SME_tszl.\n\t* aarch64-tbl.h (OP_SVE_NN_BHSD): New qualifier.\n\t(OP_SVE_QMQ): New qualifier.\n\t(struct aarch64_opcode): New instructions PSEL, REVD,\n\tSCLAMP and UCLAMP.\n\taarch64-asm-2.c: Regenerate.\n\taarch64-dis-2.c: Regenerate.\n\taarch64-opc-2.c: Regenerate.",
    "tree": {
      "sha": "d639da6b0a9e7bc01d3331c170d7e15099299203",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d639da6b0a9e7bc01d3331c170d7e15099299203"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8f1bfdb44894423680a6d56a0994dafb4b82efca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f1bfdb44894423680a6d56a0994dafb4b82efca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8f1bfdb44894423680a6d56a0994dafb4b82efca"
    }
  ],
  "stats": {
    "total": 927,
    "additions": 736,
    "deletions": 191
  },
  "files": [
    {
      "sha": "9fc61f70c61a14bbfc027884e35632bef8713cfc",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -4655,6 +4655,65 @@ parse_sme_sm_za (char **str)\n   return TOLOWER (p[0]);\n }\n \n+/* Parse the name of the source scalable predicate register, the index base\n+   register W12-W15 and the element index. Function performs element index\n+   limit checks as well as qualifier type checks.\n+\n+   <Pn>.<T>[<Wv>, <imm>]\n+   <Pn>.<T>[<Wv>, #<imm>]\n+\n+   On success function sets <Wv> to INDEX_BASE_REG, <T> to QUALIFIER and\n+   <imm> to IMM.\n+   Function returns <Pn>, or PARSE_FAIL.\n+*/\n+static int\n+parse_sme_pred_reg_with_index(char **str,\n+                              int *index_base_reg,\n+                              int *imm,\n+                              aarch64_opnd_qualifier_t *qualifier)\n+{\n+  int regno;\n+  int64_t imm_limit;\n+  int64_t imm_value;\n+  const reg_entry *reg = parse_reg_with_qual (str, REG_TYPE_PN, qualifier);\n+\n+  if (reg == NULL)\n+    return PARSE_FAIL;\n+  regno = reg->number;\n+\n+  switch (*qualifier)\n+    {\n+    case AARCH64_OPND_QLF_S_B:\n+      imm_limit = 15;\n+      break;\n+    case AARCH64_OPND_QLF_S_H:\n+      imm_limit = 7;\n+      break;\n+    case AARCH64_OPND_QLF_S_S:\n+      imm_limit = 3;\n+      break;\n+    case AARCH64_OPND_QLF_S_D:\n+      imm_limit = 1;\n+      break;\n+    default:\n+      set_syntax_error (_(\"wrong predicate register element size, allowed b, h, s and d\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  if (! parse_sme_za_hv_tiles_operand_index (str, index_base_reg, &imm_value))\n+    return PARSE_FAIL;\n+\n+  if (imm_value < 0 || imm_value > imm_limit)\n+    {\n+      set_syntax_error (_(\"element index out of range for given variant\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  *imm = imm_value;\n+\n+  return regno;\n+}\n+\n /* Parse a system register or a PSTATE field name for an MSR/MRS instruction.\n    Returns the encoding for the option, or PARSE_FAIL.\n \n@@ -7068,6 +7127,25 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  info->reg.regno = val;\n \t  break;\n \n+\tcase AARCH64_OPND_SME_PnT_Wm_imm:\n+\t  /* <Pn>.<T>[<Wm>, #<imm>]  */\n+\t  {\n+\t    int index_base_reg;\n+\t    int imm;\n+\t    val = parse_sme_pred_reg_with_index (&str,\n+\t                                         &index_base_reg,\n+\t                                         &imm,\n+\t                                         &qualifier);\n+\t    if (val == PARSE_FAIL)\n+\t        goto failure;\n+\n+\t    info->za_tile_vector.regno = val;\n+\t    info->za_tile_vector.index.regno = index_base_reg;\n+\t    info->za_tile_vector.index.imm = imm;\n+\t    info->qualifier = qualifier;\n+\t    break;\n+\t  }\n+\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x16:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x32:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4xVL:"
    },
    {
      "sha": "65ed0d3dd033aa7ed78a60ee74acbd033c1863d5",
      "filename": "gas/testsuite/gas/aarch64/sme-9-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-9-illegal.d?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-9-illegal.s\n+#error_output: sme-9-illegal.l"
    },
    {
      "sha": "6bab29fd36b38455acf6393e10608b66c1dc5a2c",
      "filename": "gas/testsuite/gas/aarch64/sme-9-illegal.l",
      "status": "added",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-9-illegal.l?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -0,0 +1,83 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: wrong predicate register element size, allowed b, h, s and d at operand 3 -- `psel p1,p15,p3.q\\[w15\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `psel p1,p15,p3.b\\[w11\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `psel p8,p11,p15.h\\[w16\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `psel p2,p7,p15.s\\[w3\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `psel p13,p3,p1.d\\[w17\\]'\n+[^:]*:[0-9]+: Error: element index out of range for given variant at operand 3 -- `psel p5,p12,p9.b\\[w15,#16\\]'\n+[^:]*:[0-9]+: Error: element index out of range for given variant at operand 3 -- `psel p1,p8,p6.h\\[w14,#8\\]'\n+[^:]*:[0-9]+: Error: element index out of range for given variant at operand 3 -- `psel p8,p4,p15.s\\[w13,#4\\]'\n+[^:]*:[0-9]+: Error: element index out of range for given variant at operand 3 -- `psel p1,p1,p1.d\\[w12,#2\\]'\n+[^:]*:[0-9]+: Error: operand mismatch -- `revd z0.q,p0/m,z0.b'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \trevd z0.q, p0/m, z0.q\n+[^:]*:[0-9]+: Error: operand mismatch -- `sclamp z8.b,z1.b,z31.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsclamp z8.b, z1.b, z31.b\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tsclamp z8.h, z1.h, z31.h\n+[^:]*:[0-9]+: Info:    \tsclamp z8.s, z1.s, z31.s\n+[^:]*:[0-9]+: Info:    \tsclamp z8.d, z1.d, z31.d\n+[^:]*:[0-9]+: Error: operand mismatch -- `sclamp z31.h,z0.h,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsclamp z31.h, z0.h, z17.h\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tsclamp z31.b, z0.b, z17.b\n+[^:]*:[0-9]+: Info:    \tsclamp z31.s, z0.s, z17.s\n+[^:]*:[0-9]+: Info:    \tsclamp z31.d, z0.d, z17.d\n+[^:]*:[0-9]+: Error: operand mismatch -- `sclamp z0.s,z31.s,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsclamp z0.s, z31.s, z17.s\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tsclamp z0.b, z31.b, z17.b\n+[^:]*:[0-9]+: Info:    \tsclamp z0.h, z31.h, z17.h\n+[^:]*:[0-9]+: Info:    \tsclamp z0.d, z31.d, z17.d\n+[^:]*:[0-9]+: Error: operand mismatch -- `sclamp z31.d,z0.d,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsclamp z31.d, z0.d, z17.d\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tsclamp z31.b, z0.b, z17.b\n+[^:]*:[0-9]+: Info:    \tsclamp z31.h, z0.h, z17.h\n+[^:]*:[0-9]+: Info:    \tsclamp z31.s, z0.s, z17.s\n+[^:]*:[0-9]+: Error: operand mismatch -- `sclamp z31.q,z0.d,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsclamp z31.d, z0.d, z17.d\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tsclamp z31.b, z0.b, z17.b\n+[^:]*:[0-9]+: Info:    \tsclamp z31.h, z0.h, z17.h\n+[^:]*:[0-9]+: Info:    \tsclamp z31.s, z0.s, z17.s\n+[^:]*:[0-9]+: Error: operand mismatch -- `uclamp z8.b,z1.b,z31.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tuclamp z8.b, z1.b, z31.b\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tuclamp z8.h, z1.h, z31.h\n+[^:]*:[0-9]+: Info:    \tuclamp z8.s, z1.s, z31.s\n+[^:]*:[0-9]+: Info:    \tuclamp z8.d, z1.d, z31.d\n+[^:]*:[0-9]+: Error: operand mismatch -- `uclamp z31.h,z0.h,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tuclamp z31.h, z0.h, z17.h\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tuclamp z31.b, z0.b, z17.b\n+[^:]*:[0-9]+: Info:    \tuclamp z31.s, z0.s, z17.s\n+[^:]*:[0-9]+: Info:    \tuclamp z31.d, z0.d, z17.d\n+[^:]*:[0-9]+: Error: operand mismatch -- `uclamp z0.s,z31.s,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tuclamp z0.s, z31.s, z17.s\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tuclamp z0.b, z31.b, z17.b\n+[^:]*:[0-9]+: Info:    \tuclamp z0.h, z31.h, z17.h\n+[^:]*:[0-9]+: Info:    \tuclamp z0.d, z31.d, z17.d\n+[^:]*:[0-9]+: Error: operand mismatch -- `uclamp z31.d,z0.d,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tuclamp z31.d, z0.d, z17.d\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tuclamp z31.b, z0.b, z17.b\n+[^:]*:[0-9]+: Info:    \tuclamp z31.h, z0.h, z17.h\n+[^:]*:[0-9]+: Info:    \tuclamp z31.s, z0.s, z17.s\n+[^:]*:[0-9]+: Error: operand mismatch -- `uclamp z31.q,z0.d,z17.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tuclamp z31.d, z0.d, z17.d\n+[^:]*:[0-9]+: Info:    other valid variant\\(s\\):\n+[^:]*:[0-9]+: Info:    \tuclamp z31.b, z0.b, z17.b\n+[^:]*:[0-9]+: Info:    \tuclamp z31.h, z0.h, z17.h\n+[^:]*:[0-9]+: Info:    \tuclamp z31.s, z0.s, z17.s"
    },
    {
      "sha": "308d52cebe2e1104e7cf7ce28bff0b783bf9c087",
      "filename": "gas/testsuite/gas/aarch64/sme-9-illegal.s",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-9-illegal.s?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -0,0 +1,25 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+psel p1, p15, p3.q[w15]\n+psel p1, p15, p3.b[w11]\n+psel p8, p11, p15.h[w16]\n+psel p2, p7, p15.s[w3]\n+psel p13, p3, p1.d[w17]\n+psel p5, p12, p9.b[w15, #16]\n+psel p1, p8, p6.h[w14, #8]\n+psel p8, p4, p15.s[w13, #4]\n+psel p1, p1, p1.d[w12, #2]\n+\n+revd z0.q, p0/m, z0.b\n+\n+sclamp z8.b, z1.b, z31.q\n+sclamp z31.h, z0.h, z17.q\n+sclamp z0.s, z31.s, z17.q\n+sclamp z31.d, z0.d, z17.q\n+sclamp z31.q, z0.d, z17.q\n+\n+uclamp z8.b, z1.b, z31.q\n+uclamp z31.h, z0.h, z17.q\n+uclamp z0.s, z31.s, z17.q\n+uclamp z31.d, z0.d, z17.q\n+uclamp z31.q, z0.d, z17.q"
    },
    {
      "sha": "ef314c61451705ae10bbc10f54fc000fec1fe8ad",
      "filename": "gas/testsuite/gas/aarch64/sme-9.d",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-9.d?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -0,0 +1,73 @@\n+#name: SVE2 instructions added to support SME\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\t25277c61 \tpsel\tp1, p15, p3.b\\[w15, 0\\]\n+   4:\t252778a2 \tpsel\tp2, p14, p5.b\\[w15, 0\\]\n+   8:\t257f74e3 \tpsel\tp3, p13, p7.b\\[w15, 7\\]\n+   c:\t25ff7125 \tpsel\tp5, p12, p9.b\\[w15, 15\\]\n+  10:\t252a6de8 \tpsel\tp8, p11, p15.h\\[w14, 0\\]\n+  14:\t252a682d \tpsel\tp13, p10, p1.h\\[w14, 0\\]\n+  18:\t257a640f \tpsel\tp15, p9, p0.h\\[w14, 3\\]\n+  1c:\t25fa60c1 \tpsel\tp1, p8, p6.h\\[w14, 7\\]\n+  20:\t25315de2 \tpsel\tp2, p7, p15.s\\[w13, 0\\]\n+  24:\t253159e3 \tpsel\tp3, p6, p15.s\\[w13, 0\\]\n+  28:\t257155e5 \tpsel\tp5, p5, p15.s\\[w13, 1\\]\n+  2c:\t25f151e8 \tpsel\tp8, p4, p15.s\\[w13, 3\\]\n+  30:\t25604c2d \tpsel\tp13, p3, p1.d\\[w12, 0\\]\n+  34:\t2560482f \tpsel\tp15, p2, p1.d\\[w12, 0\\]\n+  38:\t25e04421 \tpsel\tp1, p1, p1.d\\[w12, 1\\]\n+  3c:\t052e8000 \trevd\tz0.q, p0/m, z0.q\n+  40:\t052e9c00 \trevd\tz0.q, p7/m, z0.q\n+  44:\t052e83e0 \trevd\tz0.q, p0/m, z31.q\n+  48:\t052e9c1f \trevd\tz31.q, p7/m, z0.q\n+  4c:\t4411c3e0 \tsclamp\tz0.b, z31.b, z17.b\n+  50:\t4411c01f \tsclamp\tz31.b, z0.b, z17.b\n+  54:\t441fc028 \tsclamp\tz8.b, z1.b, z31.b\n+  58:\t4451c01f \tsclamp\tz31.h, z0.h, z17.h\n+  5c:\t445fc028 \tsclamp\tz8.h, z1.h, z31.h\n+  60:\t4491c3e0 \tsclamp\tz0.s, z31.s, z17.s\n+  64:\t4491c01f \tsclamp\tz31.s, z0.s, z17.s\n+  68:\t449fc028 \tsclamp\tz8.s, z1.s, z31.s\n+  6c:\t44d1c3e0 \tsclamp\tz0.d, z31.d, z17.d\n+  70:\t44d1c01f \tsclamp\tz31.d, z0.d, z17.d\n+  74:\t44dfc028 \tsclamp\tz8.d, z1.d, z31.d\n+  78:\t4411c7e0 \tuclamp\tz0.b, z31.b, z17.b\n+  7c:\t4411c41f \tuclamp\tz31.b, z0.b, z17.b\n+  80:\t441fc428 \tuclamp\tz8.b, z1.b, z31.b\n+  84:\t4451c7e0 \tuclamp\tz0.h, z31.h, z17.h\n+  88:\t4451c41f \tuclamp\tz31.h, z0.h, z17.h\n+  8c:\t445fc428 \tuclamp\tz8.h, z1.h, z31.h\n+  90:\t4491c7e0 \tuclamp\tz0.s, z31.s, z17.s\n+  94:\t4491c41f \tuclamp\tz31.s, z0.s, z17.s\n+  98:\t449fc428 \tuclamp\tz8.s, z1.s, z31.s\n+  9c:\t44d1c7e0 \tuclamp\tz0.d, z31.d, z17.d\n+  a0:\t44d1c41f \tuclamp\tz31.d, z0.d, z17.d\n+  a4:\t44dfc428 \tuclamp\tz8.d, z1.d, z31.d\n+  a8:\t0420bca3 \tmovprfx\tz3, z5\n+  ac:\t052e84a3 \trevd\tz3.q, p1/m, z5.q\n+  b0:\t0420bc81 \tmovprfx\tz1, z4\n+  b4:\t052e84a1 \trevd\tz1.q, p1/m, z5.q\n+  b8:\t0420bc81 \tmovprfx\tz1, z4\n+  bc:\t440bc141 \tsclamp\tz1.b, z10.b, z11.b\n+  c0:\t0420bc82 \tmovprfx\tz2, z4\n+  c4:\t444bc142 \tsclamp\tz2.h, z10.h, z11.h\n+  c8:\t0420bc83 \tmovprfx\tz3, z4\n+  cc:\t448bc143 \tsclamp\tz3.s, z10.s, z11.s\n+  d0:\t0420bca4 \tmovprfx\tz4, z5\n+  d4:\t44cbc144 \tsclamp\tz4.d, z10.d, z11.d\n+  d8:\t0420bc81 \tmovprfx\tz1, z4\n+  dc:\t440bc541 \tuclamp\tz1.b, z10.b, z11.b\n+  e0:\t0420bc82 \tmovprfx\tz2, z4\n+  e4:\t444bc542 \tuclamp\tz2.h, z10.h, z11.h\n+  e8:\t0420bc83 \tmovprfx\tz3, z4\n+  ec:\t448bc543 \tuclamp\tz3.s, z10.s, z11.s\n+  f0:\t0420bca4 \tmovprfx\tz4, z5\n+  f4:\t44cbc544 \tuclamp\tz4.d, z10.d, z11.d\n+  f8:\t25277c61 \tpsel\tp1, p15, p3.b\\[w15, 0\\]\n+  fc:\t252778a2 \tpsel\tp2, p14, p5.b\\[w15, 0\\]"
    },
    {
      "sha": "be8511fe3dfb6d3ca7893f9a9afbfec82ba8b8e1",
      "filename": "gas/testsuite/gas/aarch64/sme-9.s",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/gas/testsuite/gas/aarch64/sme-9.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-9.s?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -0,0 +1,86 @@\n+/* SVE2 instructions added to support SME.  */\n+\n+psel p1, p15, p3.b[w15, 0]\n+psel p2, p14, p5.b[w15, 0]\n+psel p3, p13, p7.b[w15, 7]\n+psel p5, p12, p9.b[w15, 15]\n+\n+psel p8, p11, p15.h[w14, 0]\n+psel p13, p10, p1.h[w14, 0]\n+psel p15, p9, p0.h[w14, 3]\n+psel p1, p8, p6.h[w14, 7]\n+\n+psel p2, p7, p15.s[w13, 0]\n+psel p3, p6, p15.s[w13, 0]\n+psel p5, p5, p15.s[w13, 1]\n+psel p8, p4, p15.s[w13, 3]\n+\n+psel p13, p3, p1.d[w12, 0]\n+psel p15, p2, p1.d[w12, 0]\n+psel p1, p1, p1.d[w12, 1]\n+\n+revd z0.q, p0/m, z0.q\n+revd z0.q, p7/m, z0.q\n+revd z0.q, p0/m, z31.q\n+revd z31.q, p7/m, z0.q\n+\n+sclamp z0.b, z31.b, z17.b\n+sclamp z31.b, z0.b, z17.b\n+sclamp z8.b, z1.b, z31.b\n+sclamp z31.h, z0.h, z17.h\n+sclamp z8.h, z1.h, z31.h\n+sclamp z0.s, z31.s, z17.s\n+sclamp z31.s, z0.s, z17.s\n+sclamp z8.s, z1.s, z31.s\n+sclamp z0.d, z31.d, z17.d\n+sclamp z31.d, z0.d, z17.d\n+sclamp z8.d, z1.d, z31.d\n+\n+uclamp z0.b, z31.b, z17.b\n+uclamp z31.b, z0.b, z17.b\n+uclamp z8.b, z1.b, z31.b\n+uclamp z0.h, z31.h, z17.h\n+uclamp z31.h, z0.h, z17.h\n+uclamp z8.h, z1.h, z31.h\n+uclamp z0.s, z31.s, z17.s\n+uclamp z31.s, z0.s, z17.s\n+uclamp z8.s, z1.s, z31.s\n+uclamp z0.d, z31.d, z17.d\n+uclamp z31.d, z0.d, z17.d\n+uclamp z8.d, z1.d, z31.d\n+\n+/* The unpredicated MOVPRFX instruction.  */\n+movprfx z3, z5\n+revd z3.q, p1/m, z5.q\n+\n+movprfx z1, z4\n+revd z1.q, p1/m, z5.q\n+\n+movprfx z1, z4\n+sclamp z1.b, z10.b, z11.b\n+\n+movprfx z2, z4\n+sclamp z2.h, z10.h, z11.h\n+\n+movprfx z3, z4\n+sclamp z3.s, z10.s, z11.s\n+\n+movprfx z4, z5\n+sclamp z4.d, z10.d, z11.d\n+\n+movprfx z1, z4\n+uclamp z1.b, z10.b, z11.b\n+\n+movprfx z2, z4\n+uclamp z2.h, z10.h, z11.h\n+\n+movprfx z3, z4\n+uclamp z3.s, z10.s, z11.s\n+\n+movprfx z4, z5\n+uclamp z4.d, z10.d, z11.d\n+\n+foo .req p1\n+bar .req w15\n+psel foo, p15, p3.b[w15, 0]\n+psel p2, p14, p5.b[bar, 0]"
    },
    {
      "sha": "9448d3596f51c4dd50ca4144862e461f9e621349",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -455,6 +455,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SME_ZA_array,        /* SME ZA[<Wv>{, #<imm>}].  */\n   AARCH64_OPND_SME_ADDR_RI_U4xVL,   /* SME [<Xn|SP>{, #<imm>, MUL VL}].  */\n   AARCH64_OPND_SME_SM_ZA,           /* SME {SM | ZA}.  */\n+  AARCH64_OPND_SME_PnT_Wm_imm,           /* SME <Pn>.<T>[<Wm>, #<imm>].  */\n   AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n };"
    },
    {
      "sha": "bbe4b683100e058529a613adddb4da23997ea9cf",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -675,7 +675,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 221:\n+    case 222:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -721,7 +721,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 189:\n     case 190:\n     case 215:\n-    case 220:\n+    case 221:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -891,6 +891,8 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_sme_addr_ri_u4xvl (self, info, code, inst, errors);\n     case 219:\n       return aarch64_ins_sme_sm_za (self, info, code, inst, errors);\n+    case 220:\n+      return aarch64_ins_sme_pred_reg_with_index (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "fd5412aa38b26e38d2bf64cb904ff4d4ee3b0f39",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -1452,6 +1452,73 @@ aarch64_ins_sme_sm_za (const aarch64_operand *self,\n   return true;\n }\n \n+/* Encode source scalable predicate register (Pn), name of the index base\n+   register W12-W15 (Rm), and optional element index, defaulting to 0, in the\n+   range 0 to one less than the number of vector elements in a 128-bit vector\n+   register, encoded in \"i1:tszh:tszl\".\n+*/\n+bool\n+aarch64_ins_sme_pred_reg_with_index (const aarch64_operand *self,\n+                                     const aarch64_opnd_info *info,\n+                                     aarch64_insn *code,\n+                                     const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                                     aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int fld_pn = info->za_tile_vector.regno;\n+  int fld_rm = info->za_tile_vector.index.regno - 12;\n+  int imm = info->za_tile_vector.index.imm;\n+  int fld_i1, fld_tszh, fld_tshl;\n+\n+  insert_field (self->fields[0], code, fld_rm, 0);\n+  insert_field (self->fields[1], code, fld_pn, 0);\n+\n+  /* Optional element index, defaulting to 0, in the range 0 to one less than\n+     the number of vector elements in a 128-bit vector register, encoded in\n+     \"i1:tszh:tszl\".\n+\n+        i1  tszh  tszl  <T>\n+        0   0     000   RESERVED\n+        x   x     xx1   B\n+        x   x     x10   H\n+        x   x     100   S\n+        x   1     000   D\n+  */\n+  switch (info->qualifier)\n+  {\n+    case AARCH64_OPND_QLF_S_B:\n+      /* <imm> is 4 bit value.  */\n+      fld_i1 = (imm >> 3) & 0x1;\n+      fld_tszh = (imm >> 2) & 0x1;\n+      fld_tshl = ((imm << 1) | 0x1) & 0x7;\n+      break;\n+    case AARCH64_OPND_QLF_S_H:\n+      /* <imm> is 3 bit value.  */\n+      fld_i1 = (imm >> 2) & 0x1;\n+      fld_tszh = (imm >> 1) & 0x1;\n+      fld_tshl = ((imm << 2) | 0x2) & 0x7;\n+      break;\n+    case AARCH64_OPND_QLF_S_S:\n+      /* <imm> is 2 bit value.  */\n+      fld_i1 = (imm >> 1) & 0x1;\n+      fld_tszh = imm & 0x1;\n+      fld_tshl = 0x4;\n+      break;\n+    case AARCH64_OPND_QLF_S_D:\n+      /* <imm> is 1 bit value.  */\n+      fld_i1 = imm & 0x1;\n+      fld_tszh = 0x1;\n+      fld_tshl = 0x0;\n+      break;\n+    default:\n+      assert (0);\n+  }\n+\n+  insert_field (self->fields[2], code, fld_i1, 0);\n+  insert_field (self->fields[3], code, fld_tszh, 0);\n+  insert_field (self->fields[4], code, fld_tshl, 0);\n+  return true;\n+}\n+\n /* Miscellaneous encoding functions.  */\n \n /* Encode size[0], i.e. bit 22, for"
    },
    {
      "sha": "47f775da2237b676c3b3515fed7627d18c0f0813",
      "filename": "opcodes/aarch64-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.h?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -103,6 +103,7 @@ AARCH64_DECL_OPD_INSERTER (ins_sme_za_list);\n AARCH64_DECL_OPD_INSERTER (ins_sme_za_array);\n AARCH64_DECL_OPD_INSERTER (ins_sme_addr_ri_u4xvl);\n AARCH64_DECL_OPD_INSERTER (ins_sme_sm_za);\n+AARCH64_DECL_OPD_INSERTER (ins_sme_pred_reg_with_index);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate1);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate2);\n "
    },
    {
      "sha": "f9999adc28d6794aa48661f77ce6d70816f37dd1",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 235,
      "deletions": 189,
      "changes": 424,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -2896,15 +2896,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurb.  */\n-                                                      return 2447;\n+                                                      return 2451;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2455;\n+                                                      return 2459;\n                                                     }\n                                                 }\n                                               else\n@@ -2915,15 +2915,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurh.  */\n-                                                      return 2451;\n+                                                      return 2455;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2458;\n+                                                      return 2462;\n                                                     }\n                                                 }\n                                             }\n@@ -3003,15 +3003,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurb.  */\n-                                                      return 2448;\n+                                                      return 2452;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2456;\n+                                                      return 2460;\n                                                     }\n                                                 }\n                                               else\n@@ -3022,15 +3022,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurh.  */\n-                                                      return 2452;\n+                                                      return 2456;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2459;\n+                                                      return 2463;\n                                                     }\n                                                 }\n                                             }\n@@ -3113,15 +3113,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursb.  */\n-                                                      return 2450;\n+                                                      return 2454;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursw.  */\n-                                                      return 2457;\n+                                                      return 2461;\n                                                     }\n                                                 }\n                                               else\n@@ -3130,7 +3130,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x1011001100xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2454;\n+                                                  return 2458;\n                                                 }\n                                             }\n                                           else\n@@ -3141,15 +3141,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursb.  */\n-                                                  return 2449;\n+                                                  return 2453;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2453;\n+                                                  return 2457;\n                                                 }\n                                             }\n                                         }\n@@ -3635,15 +3635,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx0xx10xxxxxxxxxx\n                                              setf8.  */\n-                                          return 2445;\n+                                          return 2449;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx1xx10xxxxxxxxxx\n                                              setf16.  */\n-                                          return 2446;\n+                                          return 2450;\n                                         }\n                                     }\n                                   else\n@@ -3789,7 +3789,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010000xxxxxxxxx01xxxxxxxxxx\n                                              rmif.  */\n-                                          return 2444;\n+                                          return 2448;\n                                         }\n                                       else\n                                         {\n@@ -4838,7 +4838,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000110xxxxxxxxxx\n                                                                  usdot.  */\n-                                                              return 2464;\n+                                                              return 2468;\n                                                             }\n                                                         }\n                                                     }\n@@ -4912,7 +4912,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000111xxxxxxxxxx\n                                                                  sudot.  */\n-                                                              return 2465;\n+                                                              return 2469;\n                                                             }\n                                                         }\n                                                     }\n@@ -6282,42 +6282,64 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                     {\n                                       if (((word >> 21) & 0x1) == 0)\n                                         {\n-                                          if (((word >> 22) & 0x1) == 0)\n+                                          if (((word >> 31) & 0x1) == 0)\n                                             {\n-                                              if (((word >> 23) & 0x1) == 0)\n+                                              if (((word >> 10) & 0x1) == 0)\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n-                                                     x10001x0000xxxxx110xxxxxxxxxxxxx\n-                                                     ldnt1b.  */\n-                                                  return 2104;\n+                                                     010001x0xx0xxxxx110xx0xxxxxxxxxx\n+                                                     sclamp.  */\n+                                                  return 2408;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n-                                                     x10001x0100xxxxx110xxxxxxxxxxxxx\n-                                                     ldnt1h.  */\n-                                                  return 2107;\n+                                                     010001x0xx0xxxxx110xx1xxxxxxxxxx\n+                                                     uclamp.  */\n+                                                  return 2409;\n                                                 }\n                                             }\n                                           else\n                                             {\n-                                              if (((word >> 23) & 0x1) == 0)\n+                                              if (((word >> 22) & 0x1) == 0)\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x10001x0010xxxxx110xxxxxxxxxxxxx\n-                                                     ld1b.  */\n-                                                  return 1521;\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         110001x0000xxxxx110xxxxxxxxxxxxx\n+                                                         ldnt1b.  */\n+                                                      return 2104;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         110001x0100xxxxx110xxxxxxxxxxxxx\n+                                                         ldnt1h.  */\n+                                                      return 2107;\n+                                                    }\n                                                 }\n                                               else\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x10001x0110xxxxx110xxxxxxxxxxxxx\n-                                                     ld1h.  */\n-                                                  return 1542;\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         110001x0010xxxxx110xxxxxxxxxxxxx\n+                                                         ld1b.  */\n+                                                      return 1521;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         110001x0110xxxxx110xxxxxxxxxxxxx\n+                                                         ld1h.  */\n+                                                      return 1542;\n+                                                    }\n                                                 }\n                                             }\n                                         }\n@@ -7531,7 +7553,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              010001x0xx0xxxxx011110xxxxxxxxxx\n                                                              usdot.  */\n-                                                          return 2463;\n+                                                          return 2467;\n                                                         }\n                                                     }\n                                                 }\n@@ -9235,7 +9257,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  011001x0100xxx10101xxxxxxxxxxxxx\n                                                                  bfcvtnt.  */\n-                                                              return 2492;\n+                                                              return 2496;\n                                                             }\n                                                         }\n                                                       else\n@@ -9478,15 +9500,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  101001x00x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1rob.  */\n-                                              return 2468;\n+                                              return 2472;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  101001x01x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1roh.  */\n-                                              return 2469;\n+                                              return 2473;\n                                             }\n                                         }\n                                       else\n@@ -9718,7 +9740,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx010xxxxxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2489;\n+                                                      return 2493;\n                                                     }\n                                                   else\n                                                     {\n@@ -9739,15 +9761,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2496;\n+                                                          return 2500;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx1xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2495;\n+                                                          return 2499;\n                                                         }\n                                                     }\n                                                   else\n@@ -9802,7 +9824,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  x11001x0011xxxxx1x0xxxxxxxxxxxxx\n                                                  bfdot.  */\n-                                              return 2488;\n+                                              return 2492;\n                                             }\n                                           else\n                                             {\n@@ -9814,15 +9836,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx0xxxxxxxxxx\n                                                          bfmlalb.  */\n-                                                      return 2494;\n+                                                      return 2498;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx1xxxxxxxxxx\n                                                          bfmlalt.  */\n-                                                      return 2493;\n+                                                      return 2497;\n                                                     }\n                                                 }\n                                               else\n@@ -9873,15 +9895,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x00x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rob.  */\n-                                                  return 2472;\n+                                                  return 2476;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x01x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1roh.  */\n-                                                  return 2473;\n+                                                  return 2477;\n                                                 }\n                                             }\n                                           else\n@@ -10240,7 +10262,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0101xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2466;\n+                                                      return 2470;\n                                                     }\n                                                   else\n                                                     {\n@@ -10273,7 +10295,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx111xxxxxxxxxxxxx\n                                                          bfmmla.  */\n-                                                      return 2490;\n+                                                      return 2494;\n                                                     }\n                                                   else\n                                                     {\n@@ -10303,7 +10325,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2467;\n+                                                      return 2471;\n                                                     }\n                                                   else\n                                                     {\n@@ -10432,7 +10454,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x00xxxxxxxxxx\n                                                                  zip1.  */\n-                                                              return 2476;\n+                                                              return 2480;\n                                                             }\n                                                           else\n                                                             {\n@@ -10442,15 +10464,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000010xxxxxxxxxx\n                                                                      uzp1.  */\n-                                                                  return 2478;\n+                                                                  return 2482;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000110xxxxxxxxxx\n                                                                      trn1.  */\n-                                                                  return 2480;\n+                                                                  return 2484;\n                                                                 }\n                                                             }\n                                                         }\n@@ -10462,7 +10484,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x01xxxxxxxxxx\n                                                                  zip2.  */\n-                                                              return 2477;\n+                                                              return 2481;\n                                                             }\n                                                           else\n                                                             {\n@@ -10472,15 +10494,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000011xxxxxxxxxx\n                                                                      uzp2.  */\n-                                                                  return 2479;\n+                                                                  return 2483;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000111xxxxxxxxxx\n                                                                      trn2.  */\n-                                                                  return 2481;\n+                                                                  return 2485;\n                                                                 }\n                                                             }\n                                                         }\n@@ -10563,11 +10585,22 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                         }\n                                                       else\n                                                         {\n-                                                          /* 33222222222211111111110000000000\n-                                                             10987654321098765432109876543210\n-                                                             000001x1xx1xx110100xxxxxxxxxxxxx\n-                                                             revw.  */\n-                                                          return 1820;\n+                                                          if (((word >> 19) & 0x1) == 0)\n+                                                            {\n+                                                              /* 33222222222211111111110000000000\n+                                                                 10987654321098765432109876543210\n+                                                                 000001x1xx1x0110100xxxxxxxxxxxxx\n+                                                                 revw.  */\n+                                                              return 1820;\n+                                                            }\n+                                                          else\n+                                                            {\n+                                                              /* 33222222222211111111110000000000\n+                                                                 10987654321098765432109876543210\n+                                                                 000001x1xx1x1110100xxxxxxxxxxxxx\n+                                                                 revd.  */\n+                                                              return 2407;\n+                                                            }\n                                                         }\n                                                     }\n                                                 }\n@@ -11528,15 +11561,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      010001x1000xxxxx100110xxxxxxxxxx\n                                                                      smmla.  */\n-                                                                  return 2460;\n+                                                                  return 2464;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      010001x1100xxxxx100110xxxxxxxxxx\n                                                                      usmmla.  */\n-                                                                  return 2462;\n+                                                                  return 2466;\n                                                                 }\n                                                             }\n                                                           else\n@@ -11545,7 +11578,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x1x10xxxxx100110xxxxxxxxxx\n                                                                  ummla.  */\n-                                                              return 2461;\n+                                                              return 2465;\n                                                             }\n                                                         }\n                                                     }\n@@ -13041,15 +13074,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2470;\n+                                                  return 2474;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2471;\n+                                                  return 2475;\n                                                 }\n                                             }\n                                         }\n@@ -13423,15 +13456,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2474;\n+                                                  return 2478;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2475;\n+                                                  return 2479;\n                                                 }\n                                             }\n                                         }\n@@ -13768,85 +13801,96 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                     }\n                                   else\n                                     {\n-                                      if (((word >> 13) & 0x1) == 0)\n+                                      if (((word >> 31) & 0x1) == 0)\n                                         {\n-                                          if (((word >> 22) & 0x1) == 0)\n-                                            {\n-                                              if (((word >> 23) & 0x1) == 0)\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1001xxxxx010xxxxxxxxxxxxx\n-                                                     ld1sh.  */\n-                                                  return 1587;\n-                                                }\n-                                              else\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1101xxxxx010xxxxxxxxxxxxx\n-                                                     ld1sb.  */\n-                                                  return 1575;\n-                                                }\n-                                            }\n-                                          else\n-                                            {\n-                                              if (((word >> 23) & 0x1) == 0)\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1011xxxxx010xxxxxxxxxxxxx\n-                                                     ld1w.  */\n-                                                  return 1606;\n-                                                }\n-                                              else\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1111xxxxx010xxxxxxxxxxxxx\n-                                                     ld1d.  */\n-                                                  return 1528;\n-                                                }\n-                                            }\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             001001x1xx1xxxxx01xxxxxxxxxxxxxx\n+                                             psel.  */\n+                                          return 2410;\n                                         }\n                                       else\n                                         {\n-                                          if (((word >> 22) & 0x1) == 0)\n+                                          if (((word >> 13) & 0x1) == 0)\n                                             {\n-                                              if (((word >> 23) & 0x1) == 0)\n+                                              if (((word >> 22) & 0x1) == 0)\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1001xxxxx011xxxxxxxxxxxxx\n-                                                     ldff1sh.  */\n-                                                  return 1688;\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1001xxxxx010xxxxxxxxxxxxx\n+                                                         ld1sh.  */\n+                                                      return 1587;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1101xxxxx010xxxxxxxxxxxxx\n+                                                         ld1sb.  */\n+                                                      return 1575;\n+                                                    }\n                                                 }\n                                               else\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1101xxxxx011xxxxxxxxxxxxx\n-                                                     ldff1sb.  */\n-                                                  return 1676;\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1011xxxxx010xxxxxxxxxxxxx\n+                                                         ld1w.  */\n+                                                      return 1606;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1111xxxxx010xxxxxxxxxxxxx\n+                                                         ld1d.  */\n+                                                      return 1528;\n+                                                    }\n                                                 }\n                                             }\n                                           else\n                                             {\n-                                              if (((word >> 23) & 0x1) == 0)\n+                                              if (((word >> 22) & 0x1) == 0)\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1011xxxxx011xxxxxxxxxxxxx\n-                                                     ldff1w.  */\n-                                                  return 1707;\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1001xxxxx011xxxxxxxxxxxxx\n+                                                         ldff1sh.  */\n+                                                      return 1688;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1101xxxxx011xxxxxxxxxxxxx\n+                                                         ldff1sb.  */\n+                                                      return 1676;\n+                                                    }\n                                                 }\n                                               else\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x01001x1111xxxxx011xxxxxxxxxxxxx\n-                                                     ldff1d.  */\n-                                                  return 1652;\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1011xxxxx011xxxxxxxxxxxxx\n+                                                         ldff1w.  */\n+                                                      return 1707;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         101001x1111xxxxx011xxxxxxxxxxxxx\n+                                                         ldff1d.  */\n+                                                      return 1652;\n+                                                    }\n                                                 }\n                                             }\n                                         }\n@@ -14865,7 +14909,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          011001x110001x10101xxxxxxxxxxxxx\n                                                                          bfcvt.  */\n-                                                                      return 2491;\n+                                                                      return 2495;\n                                                                     }\n                                                                 }\n                                                               else\n@@ -16934,7 +16978,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1001xxxxxxxxxx\n                                                          smmla.  */\n-                                                      return 2482;\n+                                                      return 2486;\n                                                     }\n                                                 }\n                                             }\n@@ -16967,7 +17011,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0101xxxxxxxxxx\n                                                          sdot.  */\n-                                                      return 2408;\n+                                                      return 2412;\n                                                     }\n                                                 }\n                                               else\n@@ -17041,7 +17085,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1011xxxxxxxxxx\n                                                          usmmla.  */\n-                                                      return 2484;\n+                                                      return 2488;\n                                                     }\n                                                 }\n                                             }\n@@ -17074,7 +17118,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0111xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2485;\n+                                                      return 2489;\n                                                     }\n                                                 }\n                                               else\n@@ -17121,15 +17165,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110000xxxxxxxxxxxxxxxxxxxxx\n                                              eor3.  */\n-                                          return 2415;\n+                                          return 2419;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              1x001110100xxxxxxxxxxxxxxxxxxxxx\n                                              xar.  */\n-                                          return 2417;\n+                                          return 2421;\n                                         }\n                                     }\n                                   else\n@@ -17140,7 +17184,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110x10xxxxx0xxxxxxxxxxxxxxx\n                                              sm3ss1.  */\n-                                          return 2419;\n+                                          return 2423;\n                                         }\n                                       else\n                                         {\n@@ -17154,15 +17198,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx00xxxxxxxxxx\n                                                          sm3tt1a.  */\n-                                                      return 2420;\n+                                                      return 2424;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx00xxxxxxxxxx\n                                                          sha512su0.  */\n-                                                      return 2413;\n+                                                      return 2417;\n                                                     }\n                                                 }\n                                               else\n@@ -17171,7 +17215,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx10xxxxxxxxxx\n                                                      sm3tt2a.  */\n-                                                  return 2422;\n+                                                  return 2426;\n                                                 }\n                                             }\n                                           else\n@@ -17184,15 +17228,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx01xxxxxxxxxx\n                                                          sm3tt1b.  */\n-                                                      return 2421;\n+                                                      return 2425;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx01xxxxxxxxxx\n                                                          sm4e.  */\n-                                                      return 2426;\n+                                                      return 2430;\n                                                     }\n                                                 }\n                                               else\n@@ -17201,7 +17245,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx11xxxxxxxxxx\n                                                      sm3tt2b.  */\n-                                                  return 2423;\n+                                                  return 2427;\n                                                 }\n                                             }\n                                         }\n@@ -17382,7 +17426,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx101110xx0xxxxx100101xxxxxxxxxx\n                                                          udot.  */\n-                                                      return 2407;\n+                                                      return 2411;\n                                                     }\n                                                 }\n                                               else\n@@ -17413,7 +17457,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx101x01xxxxxxxxxx\n                                                      ummla.  */\n-                                                  return 2483;\n+                                                  return 2487;\n                                                 }\n                                               else\n                                                 {\n@@ -17432,7 +17476,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx1x1011xxxxxxxxxx\n                                                      bfmmla.  */\n-                                                  return 2499;\n+                                                  return 2503;\n                                                 }\n                                               else\n                                                 {\n@@ -17442,7 +17486,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx1011100x0xxxxx1x1111xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2497;\n+                                                      return 2501;\n                                                     }\n                                                   else\n                                                     {\n@@ -17452,15 +17496,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x01011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2504;\n+                                                          return 2508;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x11011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2503;\n+                                                          return 2507;\n                                                         }\n                                                     }\n                                                 }\n@@ -18044,15 +18088,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          000011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn.  */\n-                                                                      return 2500;\n+                                                                      return 2504;\n                                                                     }\n                                                                   else\n                                                                     {\n                                                                       /* 33222222222211111111110000000000\n                                                                          10987654321098765432109876543210\n                                                                          010011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn2.  */\n-                                                                      return 2501;\n+                                                                      return 2505;\n                                                                     }\n                                                                 }\n                                                             }\n@@ -18370,7 +18414,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                          10987654321098765432109876543210\n                                          1x001110xx1xxxxx0xxxxxxxxxxxxxxx\n                                          bcax.  */\n-                                      return 2418;\n+                                      return 2422;\n                                     }\n                                 }\n                               else\n@@ -18981,7 +19025,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx100000xxxxxxxxxx\n                                                                  sha512h.  */\n-                                                              return 2411;\n+                                                              return 2415;\n                                                             }\n                                                         }\n                                                     }\n@@ -19033,7 +19077,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx110000xxxxxxxxxx\n                                                                  sm3partw1.  */\n-                                                              return 2424;\n+                                                              return 2428;\n                                                             }\n                                                         }\n                                                     }\n@@ -19276,7 +19320,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100010xxxxxxxxxx\n                                                              sha512su1.  */\n-                                                          return 2414;\n+                                                          return 2418;\n                                                         }\n                                                     }\n                                                   else\n@@ -19352,7 +19396,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110010xxxxxxxxxx\n                                                                  sm4ekey.  */\n-                                                              return 2427;\n+                                                              return 2431;\n                                                             }\n                                                         }\n                                                       else\n@@ -20178,7 +20222,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100001xxxxxxxxxx\n                                                              sha512h2.  */\n-                                                          return 2412;\n+                                                          return 2416;\n                                                         }\n                                                     }\n                                                   else\n@@ -20210,7 +20254,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110001xxxxxxxxxx\n                                                                  sm3partw2.  */\n-                                                              return 2425;\n+                                                              return 2429;\n                                                             }\n                                                         }\n                                                       else\n@@ -20450,7 +20494,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100011xxxxxxxxxx\n                                                              rax1.  */\n-                                                          return 2416;\n+                                                          return 2420;\n                                                         }\n                                                     }\n                                                   else\n@@ -20482,15 +20526,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2430;\n+                                                              return 2434;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2434;\n+                                                              return 2438;\n                                                             }\n                                                         }\n                                                     }\n@@ -20512,15 +20556,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2431;\n+                                                              return 2435;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2435;\n+                                                              return 2439;\n                                                             }\n                                                         }\n                                                     }\n@@ -20559,15 +20603,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2428;\n+                                                              return 2432;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2432;\n+                                                              return 2436;\n                                                             }\n                                                         }\n                                                       else\n@@ -20589,15 +20633,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2429;\n+                                                              return 2433;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2433;\n+                                                              return 2437;\n                                                             }\n                                                         }\n                                                       else\n@@ -22405,15 +22449,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2436;\n+                                                  return 2440;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2440;\n+                                                  return 2444;\n                                                 }\n                                             }\n                                           else\n@@ -22435,15 +22479,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2437;\n+                                                  return 2441;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2441;\n+                                                  return 2445;\n                                                 }\n                                             }\n                                           else\n@@ -22949,15 +22993,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2438;\n+                                                  return 2442;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2442;\n+                                                  return 2446;\n                                                 }\n                                             }\n                                         }\n@@ -22979,15 +23023,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2439;\n+                                                  return 2443;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2443;\n+                                                  return 2447;\n                                                 }\n                                             }\n                                         }\n@@ -23043,15 +23087,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  xx001111xxxxxxxx1110x0xxxxxxxxxx\n                                                  sdot.  */\n-                                              return 2410;\n+                                              return 2414;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  xx101111xxxxxxxx1110x0xxxxxxxxxx\n                                                  udot.  */\n-                                              return 2409;\n+                                              return 2413;\n                                             }\n                                         }\n                                     }\n@@ -23154,15 +23198,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111100xxxxxx1111x0xxxxxxxxxx\n                                                          sudot.  */\n-                                                      return 2487;\n+                                                      return 2491;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          xx00111110xxxxxx1111x0xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2486;\n+                                                      return 2490;\n                                                     }\n                                                 }\n                                               else\n@@ -23173,7 +23217,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111101xxxxxx1111x0xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2498;\n+                                                      return 2502;\n                                                     }\n                                                   else\n                                                     {\n@@ -23183,15 +23227,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x000111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2506;\n+                                                          return 2510;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x100111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2505;\n+                                                          return 2509;\n                                                         }\n                                                     }\n                                                 }\n@@ -23853,8 +23897,8 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 824: return NULL;\t\t/* fsqrt --> NULL.  */\n     case 832: value = 833; break;\t/* frintz --> frintz.  */\n     case 833: return NULL;\t\t/* frintz --> NULL.  */\n-    case 825: value = 2502; break;\t/* fcvt --> bfcvt.  */\n-    case 2502: return NULL;\t\t/* bfcvt --> NULL.  */\n+    case 825: value = 2506; break;\t/* fcvt --> bfcvt.  */\n+    case 2506: return NULL;\t\t/* bfcvt --> NULL.  */\n     case 834: value = 835; break;\t/* frinta --> frinta.  */\n     case 835: return NULL;\t\t/* frinta --> NULL.  */\n     case 836: value = 837; break;\t/* frintx --> frintx.  */\n@@ -24373,7 +24417,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 221:\n+    case 222:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -24420,7 +24464,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 189:\n     case 190:\n     case 215:\n-    case 220:\n+    case 221:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -24592,6 +24636,8 @@ aarch64_extract_operand (const aarch64_operand *self,\n       return aarch64_ext_sme_addr_ri_u4xvl (self, info, code, inst, errors);\n     case 219:\n       return aarch64_ext_sme_sm_za (self, info, code, inst, errors);\n+    case 220:\n+      return aarch64_ext_sme_pred_reg_with_index (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "809cf8de930ca036cd15078bbed054129ba45b16",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -1890,6 +1890,49 @@ aarch64_ext_sme_sm_za (const aarch64_operand *self,\n   return true;\n }\n \n+bool\n+aarch64_ext_sme_pred_reg_with_index (const aarch64_operand *self,\n+\t\t\t\t     aarch64_opnd_info *info, aarch64_insn code,\n+\t\t\t\t     const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+\t\t\t\t     aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  aarch64_insn fld_rm = extract_field (self->fields[0], code, 0);\n+  aarch64_insn fld_pn = extract_field (self->fields[1], code, 0);\n+  aarch64_insn fld_i1 = extract_field (self->fields[2], code, 0);\n+  aarch64_insn fld_tszh = extract_field (self->fields[3], code, 0);\n+  aarch64_insn fld_tszl = extract_field (self->fields[4], code, 0);\n+  int imm;\n+\n+  info->za_tile_vector.regno = fld_pn;\n+  info->za_tile_vector.index.regno = fld_rm + 12;\n+\n+  if (fld_tszh == 0x1 && fld_tszl == 0x0)\n+    {\n+      info->qualifier = AARCH64_OPND_QLF_S_D;\n+      imm = fld_i1;\n+    }\n+  else if (fld_tszl == 0x4)\n+    {\n+      info->qualifier = AARCH64_OPND_QLF_S_S;\n+      imm = (fld_i1 << 1) | fld_tszh;\n+    }\n+  else if ((fld_tszl & 0x3) == 0x2)\n+    {\n+      info->qualifier = AARCH64_OPND_QLF_S_H;\n+      imm = (fld_i1 << 2) | (fld_tszh << 1) | (fld_tszl >> 2);\n+    }\n+  else if (fld_tszl & 0x1)\n+    {\n+      info->qualifier = AARCH64_OPND_QLF_S_B;\n+      imm = (fld_i1 << 3) | (fld_tszh << 2) | (fld_tszl >> 1);\n+    }\n+  else\n+    return false;\n+\n+  info->za_tile_vector.index.imm = imm;\n+  return true;\n+}\n+\n /* Decode Zn[MM], where MM has a 7-bit triangular encoding.  The fields\n    array specifies which field to use for Zn.  MM is encoded in the\n    concatenation of imm5 and SVE_tszh, with imm5 being the less"
    },
    {
      "sha": "df59d22e98d18b87f2d938943b062de51aab6091",
      "filename": "opcodes/aarch64-dis.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-dis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-dis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.h?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -127,6 +127,7 @@ AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_list);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_array);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_addr_ri_u4xvl);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_sm_za);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_sme_pred_reg_with_index);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate1);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate2);\n "
    },
    {
      "sha": "c583bd0cc490d2196519a9180c772c284d761638",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -244,6 +244,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_array\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Rv,FLD_imm4_2}, \"ZA array\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SME_ADDR_RI_U4xVL\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_imm4_2}, \"memory offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SME_SM_ZA\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_CRm}, \"streaming mode\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_PnT_Wm_imm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Rm,FLD_SVE_Pn,FLD_SME_i1,FLD_SME_tszh,FLD_SME_tszl}, \"Source scalable predicate register with index \"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},\n   {AARCH64_OPND_CLASS_NIL, \"\", 0, {0}, \"DUMMY\"},"
    },
    {
      "sha": "a37b3ffdd6ddb9bfeb731e234421964524924657",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -332,6 +332,10 @@ const aarch64_field fields[] =\n     { 13,  2 }, /* SME_Rv: vector select register W12-W15, bits [14:13].  */\n     { 13,  3 }, /* SME Pm second source scalable predicate register P0-P7.  */\n     { 0,   8 }, /* SME_zero_mask: list of up to 8 tile names separated by commas [7:0].  */\n+    { 16,  2 }, /* SME_Rm: index base register W12-W15 [17:16].  */\n+    { 23,  1 }, /* SME_i1: immediate field, bit 23.  */\n+    { 22,  1 }, /* SME_tszh: immediate and qualifier field, bit 22.  */\n+    { 18,  3 }, /* SME_tshl: immediate and qualifier field, bits [20:18].  */\n     { 11,  2 }, /* rotate1: FCMLA immediate rotate.  */\n     { 13,  2 }, /* rotate2: Indexed element FCMLA immediate rotate.  */\n     { 12,  1 }, /* rotate3: FCADD immediate rotate.  */\n@@ -3473,6 +3477,14 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n       snprintf (buf, size, \"%s\", opnd->reg.regno == 's' ? \"sm\" : \"za\");\n       break;\n \n+    case AARCH64_OPND_SME_PnT_Wm_imm:\n+      snprintf (buf, size, \"p%d.%s[w%d, %d]\",\n+                opnd->za_tile_vector.regno,\n+                aarch64_get_qualifier_name (opnd->qualifier),\n+                opnd->za_tile_vector.index.regno,\n+                opnd->za_tile_vector.index.imm);\n+      break;\n+\n     case AARCH64_OPND_CRn:\n     case AARCH64_OPND_CRm:\n       snprintf (buf, size, \"C%\" PRIi64, opnd->imm.value);"
    },
    {
      "sha": "49f3013c13291c501161f37a92918ff4ccd5f7c5",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -159,6 +159,10 @@ enum aarch64_field_kind\n   FLD_SME_Rv,\n   FLD_SME_Pm,\n   FLD_SME_zero_mask,\n+  FLD_SME_Rm,\n+  FLD_SME_i1,\n+  FLD_SME_tszh,\n+  FLD_SME_tszl,\n   FLD_rotate1,\n   FLD_rotate2,\n   FLD_rotate3,"
    },
    {
      "sha": "3c0e990fb147b00f582e4e94049c5b405a8410e3",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3de0860104b8bb8d496527fbb042c3b4c5c82dc/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=d3de0860104b8bb8d496527fbb042c3b4c5c82dc",
      "patch": "@@ -1509,6 +1509,13 @@\n {                                                       \\\n   QLF3(S_B,P_Z,S_B),                                    \\\n }\n+#define OP_SVE_NN_BHSD                                  \\\n+{                                                       \\\n+  QLF3(NIL,NIL,S_B),                                    \\\n+  QLF3(NIL,NIL,S_H),                                    \\\n+  QLF3(NIL,NIL,S_S),                                    \\\n+  QLF3(NIL,NIL,S_D)                                     \\\n+}\n #define OP_SVE_BZBB                                     \\\n {                                                       \\\n   QLF4(S_B,P_Z,S_B,S_B),                                \\\n@@ -1537,6 +1544,10 @@\n {                                                       \\\n   QLF3(S_D,P_M,S_D),                                    \\\n }\n+#define OP_SVE_QMQ                                      \\\n+{                                                       \\\n+  QLF3(S_Q,P_M,S_Q),                                    \\\n+}\n #define OP_SVE_DMH                                      \\\n {                                                       \\\n   QLF3(S_D,P_M,S_H),                                    \\\n@@ -5178,6 +5189,11 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n   SME_INSN (\"ldr\", 0xe1000000, 0xffff9c10, sme_ldr, 0, OP2 (SME_ZA_array, SME_ADDR_RI_U4xVL), {}, 0, 1),\n   SME_INSN (\"str\", 0xe1200000, 0xffff9c10, sme_str, 0, OP2 (SME_ZA_array, SME_ADDR_RI_U4xVL), {}, 0, 1),\n \n+  SME_INSNC (\"revd\", 0x52e8000, 0xffffe000, sme_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_QMQ, 0, C_SCAN_MOVPRFX, 0),\n+  SME_INSNC (\"sclamp\", 0x4400c000, 0xff20fc00, sve_size_bhsd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_BHSD, 0, C_SCAN_MOVPRFX, 0),\n+  SME_INSNC (\"uclamp\", 0x4400c400, 0xff20fc00, sve_size_bhsd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_BHSD, 0, C_SCAN_MOVPRFX, 0),\n+  SME_INSN (\"psel\", 0x25204000, 0xff20c000, sme_misc, 0, OP3 (SVE_Pd, SVE_Pg4_10, SME_PnT_Wm_imm), OP_SVE_NN_BHSD, 0, 0),\n+\n   /* SIMD Dot Product (optional in v8.2-A).  */\n   DOT_INSN (\"udot\", 0x2e009400, 0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n   DOT_INSN (\"sdot\", 0xe009400,  0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n@@ -5773,6 +5789,9 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n     Y(ADDRESS, sme_sm_za, \"SME_SM_ZA\", 0, \\\n       F(FLD_CRm),\t\t\t\t\t\\\n       \"streaming mode\")\t\\\n+    Y(SVE_REG, sme_pred_reg_with_index, \"SME_PnT_Wm_imm\", 0,\t\t\t\\\n+      F(FLD_SME_Rm,FLD_SVE_Pn,FLD_SME_i1,FLD_SME_tszh,FLD_SME_tszl),\t\\\n+      \"Source scalable predicate register with index \")\t\\\n     Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\\n       \"a 16-bit unsigned immediate for TME tcancel\")\t\t\t\\\n     Y(SIMD_ELEMENT, reglane, \"SM3_IMM2\", 0, F(FLD_SM3_imm2),\t\t\\"
    }
  ]
}