{
  "sha": "f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjE0ODcxYmZhNDA4Y2Y0OTllMTc4M2JjM2UyYWFiYjFiZDNjZjlhNw==",
  "commit": {
    "author": {
      "name": "Samuel Thibault",
      "email": "samuel.thibault@ens-lyon.org",
      "date": "2020-05-30T18:38:46Z"
    },
    "committer": {
      "name": "Samuel Thibault",
      "email": "samuel.thibault@ens-lyon.org",
      "date": "2020-05-30T18:40:34Z"
    },
    "message": "hurd: make function cast stronger\n\nFixes\n\nprocess_reply_S.c:104:23: error: function called through a non-compatible type [-Werror]\n  104 |      OutP->RetCode = (*(kern_return_t (*)(mach_port_t, kern_return_t)) S_proc_setmsgport_reply) (In0P->Head.msgh_request_port, In0P-\n\nAs the existing comment says, it is in general not safe to drop some\nparameters like this, but this is the error handling case, where the\ncalled function does not actually read them, and mig is currently planned\nto be used on i386 and x86_64 only, where this is not a problem. As the\nexisting comment says, fixing it properly would be far from trivial:\nwe can't just pass 0 for them, as they might not be scalar.\n\ngdb/ChangeLog:\n\n\t* reply_mig_hack.awk (Error return): Cast function through\n\tvoid *, to bypass compiler function call check.",
    "tree": {
      "sha": "195c4f4fd58feb66d7af73c953b4a1790e0303ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/195c4f4fd58feb66d7af73c953b4a1790e0303ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7/comments",
  "author": {
    "login": "sthibaul",
    "id": 5405051,
    "node_id": "MDQ6VXNlcjU0MDUwNTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sthibaul",
    "html_url": "https://github.com/sthibaul",
    "followers_url": "https://api.github.com/users/sthibaul/followers",
    "following_url": "https://api.github.com/users/sthibaul/following{/other_user}",
    "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions",
    "organizations_url": "https://api.github.com/users/sthibaul/orgs",
    "repos_url": "https://api.github.com/users/sthibaul/repos",
    "events_url": "https://api.github.com/users/sthibaul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sthibaul/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sthibaul",
    "id": 5405051,
    "node_id": "MDQ6VXNlcjU0MDUwNTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sthibaul",
    "html_url": "https://github.com/sthibaul",
    "followers_url": "https://api.github.com/users/sthibaul/followers",
    "following_url": "https://api.github.com/users/sthibaul/following{/other_user}",
    "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions",
    "organizations_url": "https://api.github.com/users/sthibaul/orgs",
    "repos_url": "https://api.github.com/users/sthibaul/repos",
    "events_url": "https://api.github.com/users/sthibaul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sthibaul/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6887cfb4ffb80337618138f4f302eb1bfb6df8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6887cfb4ffb80337618138f4f302eb1bfb6df8a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6887cfb4ffb80337618138f4f302eb1bfb6df8a"
    }
  ],
  "stats": {
    "total": 8,
    "additions": 7,
    "deletions": 1
  },
  "files": [
    {
      "sha": "019e9000d0438bb61fa07a491af07dc0b92d8b18",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-30  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n+\n+\t* reply_mig_hack.awk (Error return): Cast function through\n+\tvoid *, to bypass compiler function call check.\n+\n 2020-05-30  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* config/i386/i386gnu.mn (%_reply_S.c): Add dependency on"
    },
    {
      "sha": "6ff683a841bbe99710eff4335bc3a8930b17138f",
      "filename": "gdb/reply_mig_hack.awk",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7/gdb/reply_mig_hack.awk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7/gdb/reply_mig_hack.awk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/reply_mig_hack.awk?ref=f14871bfa408cf499e1783bc3e2aabb1bd3cf9a7",
      "patch": "@@ -130,7 +130,8 @@ parse_phase == 5 && /^#if[ \\t]TypeCheck/ {\n   # two arguments.\n   # This is possibly bogus, but easier than supplying bogus values for all\n   # the other args (we can't just pass 0 for them, as they might not be scalar).\n-  print \"\\t    OutP->RetCode = (*(kern_return_t (*)(mach_port_t, kern_return_t)) \" user_function_name \") (In0P->Head.msgh_request_port, In0P->\" arg_name[0] \");\";\n+  print \"\\t    void * __error_call = \" user_function_name \";\";\n+  print \"\\t    OutP->RetCode = (*(kern_return_t (*)(mach_port_t, kern_return_t)) __error_call) (In0P->Head.msgh_request_port, In0P->\" arg_name[0] \");\";\n   print \"\\t    return;\";\n   print \"\\t  }\";\n   print \"\";"
    }
  ]
}