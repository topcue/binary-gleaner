{
  "sha": "3dd9bb462012df685d6d41300dacedae1c81e28a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2RkOWJiNDYyMDEyZGY2ODVkNmQ0MTMwMGRhY2VkYWUxYzgxZTI4YQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-08-31T20:46:27Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-13T00:31:29Z"
    },
    "message": "gdb: Don't fault for 'maint print psymbols' when using an index\n\nI found that these tests:\n\n  make check-gdb RUNTESTFLAGS=\"--target_board=cc-with-gdb-index gdb.base/maint.exp\"\n  make check-gdb RUNTESTFLAGS=\"--target_board=cc-with-debug-names gdb.base/maint.exp\"\n\nwere causing GDB to segfault.  It turns out that this test runs this\ncommand:\n\n  maint print psymbols -pc main /path/to/some/file\n\nwhich tries to lookup the partial_symtab for 'main'.  The problem is\nthat there is no partial_symtab for 'main' as we are using the\n.gdb_index or .debug_names instead of partial_symtabs.\n\nWhat happens is that maintenance_print_symbols calls\nfind_pc_sect_psymtab, which looks for the partial_symtab in the\nobjfile's objfile->partial_symtabs->psymtabs_addrmap.\n\nThis is a problem because when we are using the indexes\npsymtabs_addrmap is reused to hold things other than partial_symtabs,\nthis can be seen in dwarf2read.c in create_addrmap_from_index and\ncreate_addrmap_from_aranges.  If we then lookup in psymtabs_addrmap we\nend up returning a pointer to something that isn't really a\npartial_symtab, after which everything goes wrong.\n\nInitially I simply added a check at the start of find_pc_sect_psymtab\nthat the objfile had some partial_symtabs, like:\n\n  if (objfile->partial_symtabs->psymtabs == NULL)\n    return NULL;\n\nFiguring that if there were no partial_symtabs at all then this\nfunction should always return NULL, however, this caused a failure in\nthe test gdb.python/py-event.exp which I didn't dig into too deeply,\nbut seems to be that in this tests there are initially no psymtabs,\nbut the second part of find_pc_sect_psymtab does manage to read some\nin from somewhere, with the check I added the test fails as we\nreturned NULL here and this caused GDB to load in the full symtabs\nearlier than was expected.\n\nInstead I chose to guard only the access to psymtabs_addrmap with a\ncheck that the function has some psymtabs.  This allows my original\ntests to pass, and the py-event.exp test to pass too.\n\nNow, a good argument can be made that we simply should never call\nfind_pc_sect_psymtab on an objfile that is using indexes instead of\npartial_symtabs.  I did consider this approach, we could easily add an\nassert into find_pc_sect_psymtab that if we find a partial_symtab in\npsymtabs_addrmap then the psymtabs pointer must be non-null.  The\nresponsibility would then be on the user of find_pc_sect_psymtab to\nensure that the objfile being checked is suitable.  In the end I\ndidn't take this approach as the check in find_pc_sect_psymtab is\ncheap and this ensures that any future miss-uses of the function will\nnot cause problems.\n\nI also extended the comment on psymtabs_addrmap to indicate that it\nholds more than just partial_symtabs as this was not at all clear from\nthe original comment, and caused me some confusion when I was\ninitially debugging this problem.\n\ngdb/ChangeLog:\n\n\t* psymtab.c (find_pc_sect_psymtab): Move baseaddr local into more\n\tinner scope, add check that the objfile has psymtabs before\n\tchecking psymtabs_addrmap.\n\t* psymtab.h (psymtab_storage) <psymtabs_addrmap>: Extend comment.",
    "tree": {
      "sha": "e10988d4e7c238bdab1f1daccd760c9ffd40e3f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e10988d4e7c238bdab1f1daccd760c9ffd40e3f3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3dd9bb462012df685d6d41300dacedae1c81e28a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dd9bb462012df685d6d41300dacedae1c81e28a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3dd9bb462012df685d6d41300dacedae1c81e28a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dd9bb462012df685d6d41300dacedae1c81e28a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f8c0fc571b7daf2720506f85440f9023ff249265",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8c0fc571b7daf2720506f85440f9023ff249265",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f8c0fc571b7daf2720506f85440f9023ff249265"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 29,
    "deletions": 8
  },
  "files": [
    {
      "sha": "9540c4f12085d665adb730f4fc9cdc7ec3c287a7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd9bb462012df685d6d41300dacedae1c81e28a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd9bb462012df685d6d41300dacedae1c81e28a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3dd9bb462012df685d6d41300dacedae1c81e28a",
      "patch": "@@ -1,3 +1,10 @@\n+2019-09-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* psymtab.c (find_pc_sect_psymtab): Move baseaddr local into more\n+\tinner scope, add check that the objfile has psymtabs before\n+\tchecking psymtabs_addrmap.\n+\t* psymtab.h (psymtab_storage) <psymtabs_addrmap>: Extend comment.\n+\n 2019-09-12  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* NEWS: Announce that Ada task names are now shown at more places,"
    },
    {
      "sha": "031dbd9c1efe74f35f0ce3de771887eeba37578e",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 17,
      "deletions": 7,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd9bb462012df685d6d41300dacedae1c81e28a/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd9bb462012df685d6d41300dacedae1c81e28a/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=3dd9bb462012df685d6d41300dacedae1c81e28a",
      "patch": "@@ -301,14 +301,24 @@ find_pc_sect_psymtab (struct objfile *objfile, CORE_ADDR pc,\n \t\t      struct obj_section *section,\n \t\t      struct bound_minimal_symbol msymbol)\n {\n-  CORE_ADDR baseaddr = ANOFFSET (objfile->section_offsets,\n-\t\t\t\t SECT_OFF_TEXT (objfile));\n-\n-  /* Try just the PSYMTABS_ADDRMAP mapping first as it has better granularity\n-     than the later used TEXTLOW/TEXTHIGH one.  */\n-\n-  if (objfile->partial_symtabs->psymtabs_addrmap != NULL)\n+  /* Try just the PSYMTABS_ADDRMAP mapping first as it has better\n+     granularity than the later used TEXTLOW/TEXTHIGH one.  However, we need\n+     to take care as the PSYMTABS_ADDRMAP can hold things other than partial\n+     symtabs in some cases.\n+\n+     This function should only be called for objfiles that are using partial\n+     symtabs, not for objfiles that are using indexes (.gdb_index or\n+     .debug_names), however 'maintenance print psymbols' calls this function\n+     directly for all objfiles.  If we assume that PSYMTABS_ADDRMAP contains\n+     partial symtabs then we will end up returning a pointer to an object\n+     that is not a partial_symtab, which doesn't end well.  */\n+\n+  if (objfile->partial_symtabs->psymtabs != NULL\n+      && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n     {\n+      CORE_ADDR baseaddr = ANOFFSET (objfile->section_offsets,\n+\t\t\t\t     SECT_OFF_TEXT (objfile));\n+\n       struct partial_symtab *pst\n \t= ((struct partial_symtab *)\n \t   addrmap_find (objfile->partial_symtabs->psymtabs_addrmap,"
    },
    {
      "sha": "0ad2b49d9a5c03b9a63a36e16cfacdb3d4b88021",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd9bb462012df685d6d41300dacedae1c81e28a/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd9bb462012df685d6d41300dacedae1c81e28a/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=3dd9bb462012df685d6d41300dacedae1c81e28a",
      "patch": "@@ -109,7 +109,11 @@ class psymtab_storage\n   /* Map addresses to the entries of PSYMTABS.  It would be more efficient to\n      have a map per the whole process but ADDRMAP cannot selectively remove\n      its items during FREE_OBJFILE.  This mapping is already present even for\n-     PARTIAL_SYMTABs which still have no corresponding full SYMTABs read.  */\n+     PARTIAL_SYMTABs which still have no corresponding full SYMTABs read.\n+\n+     The DWARF parser reuses this addrmap to store things other than\n+     psymtabs in the cases where debug information is being read from, for\n+     example, the .debug-names section.  */\n \n   struct addrmap *psymtabs_addrmap = nullptr;\n "
    }
  ]
}