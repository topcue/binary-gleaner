{
  "sha": "094e34f22146ad53eb93da22e480cab428bd23b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDk0ZTM0ZjIyMTQ2YWQ1M2ViOTNkYTIyZTQ4MGNhYjQyOGJkMjNiNQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-09-30T14:04:05Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-26T14:56:39Z"
    },
    "message": "binutils, ld: work with --disable-libctf\n\nThis unfortunately means conditionalizing out all the libctf code, but\nthe result is not too unbearably ugly, if a bit repetitive.  I have\nstubbed out code in the !ENABLE_LIBCTF path to avoid extra redundant\nifdefs where it seems that might be helpful.  (The stubs are not too\ndisruptive, but I've tried to keep them on one line where possible to\navoid filling up the screen with stubs that nobody would care about.\nIf this is too much of a coding style violation I can change it.)\n\nChanges since v2: use GCC_ENABLE rather than repeating all the\n                  AC_ARG_ENABLE stuff over and over again.\n\nld/\n\t* configure.ac [--enable-libctf]: New, default yes.\n\tSet ENABLE_LIBCTF accordingly.\n\t* Makefile.am [!ENABLE_LIBCTF]: Empty LIBCTF.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* aclocal.m4: Regenerate.\n\t* ldlang.c (ctf_output): Conditionalize on ENABLE_LIBCTF.\n\t(ldlang_open_ctf): Likewise.\n\t(lang_merge_ctf): Likewise.\n\t(ldlang_ctf_apply_strsym): Likewise.\n\t(lang_write_ctf): Likewise.\n\t(ldlang_write_ctf_late): Likewise.\n\t(ldlang_open_ctf) [!ENABLE_LIBCTF]: Warn about the presence of CTF\n\tsections.\n\t(lang_merge_ctf) [!ENABLE_LIBCTF]: New stub.\n\t(ldlang_ctf_apply_strsym) [!ENABLE_LIBCTF]: Likewise.\n\t(lang_write_ctf) [!ENABLE_LIBCTF]: Likewise.\n\t(ldlang_write_ctf_late) [!ENABLE_LIBCTF]: Likewise.\n\t* ldelfgen.c (ldelf_emit_ctf_early): Conditionalize on\n\tENABLE_LIBCTF.\n\t(struct ctf_strsym_iter_cb_arg): Likewise.\n\t(ldelf_ctf_strtab_iter_cb): Likewise.\n\t(ldelf_ctf_symbols_iter_cb): Likewise.\n\t(ldelf_examine_strtab_for_ctf): Likewise.\n\t(ldelf_emit_ctf_early) [!ENABLE_LIBCTF]: New stub.\n\t(ldelf_examine_strtab_for_ctf) [!ENABLE_LIBCTF]: New stub.\n\nbinutils/\n\t* configure.ac [--enable-libctf]: New, default yes.\n\tSet ENABLE_LIBCTF accordingly.\n\t* Makefile.am [!ENABLE_LIBCTF]: Empty LIBCTF and LIBCTF_NOBFD.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* aclocal.m4: Regenerate.\n\t* objdump.c (usage): Conditionalize portions on ENABLE_LIBCTF.\n\t(option_values): Likewise.\n\t(long_options): Likewise.\n\t(main): Likewise.\n\t(dump_ctf_indent_lines): Conditionalize out when !ENABLE_LIBCTF.\n\t(make_ctfsect): Likewise.\n\t(dump_ctf_archive_member): Likewise.\n\t(dump_ctf) [ENABLE_LIBCTF]: Likewise.\n\t(dump_ctf) [!ENABLE_LIBCTF]: New empty stub.\n\t* readelf.c (options): Conditionalize portions on ENABLE_LIBCTF.\n\t(usage): Likewise.\n\t(process_section_contents): Likewise.\n\t(shdr_to_ctf_sect): Conditionalize out when !ENABLE_LIBCTF.\n\t(dump_ctf_indent_lines): Likewise.\n\t(dump_section_as_ctf) [ENABLE_LIBCTF]: Likewise.",
    "tree": {
      "sha": "67dcb4257f8436adcde9d021bd8f99c774de47d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67dcb4257f8436adcde9d021bd8f99c774de47d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/094e34f22146ad53eb93da22e480cab428bd23b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/094e34f22146ad53eb93da22e480cab428bd23b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/094e34f22146ad53eb93da22e480cab428bd23b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/094e34f22146ad53eb93da22e480cab428bd23b5/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1776e3e59ca6200dff981894361b8b49cb453766",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1776e3e59ca6200dff981894361b8b49cb453766",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1776e3e59ca6200dff981894361b8b49cb453766"
    }
  ],
  "stats": {
    "total": 267,
    "additions": 257,
    "deletions": 10
  },
  "files": [
    {
      "sha": "1532a37c390632c62c1b0073c527a76c8813012e",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -1,3 +1,28 @@\n+2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* configure.ac [--enable-libctf]: New, default yes.\n+\tSet ENABLE_LIBCTF accordingly.\n+\t* Makefile.am [!ENABLE_LIBCTF]: Empty LIBCTF and LIBCTF_NOBFD.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\t* objdump.c (usage): Conditionalize portions on ENABLE_LIBCTF.\n+\t(option_values): Likewise.\n+\t(long_options): Likewise.\n+\t(main): Likewise.\n+\t(dump_ctf_indent_lines): Conditionalize out when !ENABLE_LIBCTF.\n+\t(make_ctfsect): Likewise.\n+\t(dump_ctf_archive_member): Likewise.\n+\t(dump_ctf) [ENABLE_LIBCTF]: Likewise.\n+\t(dump_ctf) [!ENABLE_LIBCTF]: New empty stub.\n+\t* readelf.c (options): Conditionalize portions on ENABLE_LIBCTF.\n+\t(usage): Likewise.\n+\t(process_section_contents): Likewise.\n+\t(shdr_to_ctf_sect): Conditionalize out when !ENABLE_LIBCTF.\n+\t(dump_ctf_indent_lines): Likewise.\n+\t(dump_section_as_ctf) [ENABLE_LIBCTF]: Likewise.\n+\n 2020-06-26  Jan Beulich  <jbeulich@suse.com>\n \n \t* doc/binutils.texi: Adjust description of x86's -Msuffix. Drop"
    },
    {
      "sha": "2ee1196790882688a59e9e3b720078e0ecb86074",
      "filename": "binutils/Makefile.am",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/Makefile.am?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -164,8 +164,13 @@ BFDLIB = ../bfd/libbfd.la\n \n OPCODES = ../opcodes/libopcodes.la\n \n+if ENABLE_LIBCTF\n LIBCTF = ../libctf/libctf.la\n LIBCTF_NOBFD = ../libctf/libctf-nobfd.la\n+else\n+LIBCTF =\n+LIBCTF_NOBFD =\n+endif\n \n LIBIBERTY = ../libiberty/libiberty.a\n "
    },
    {
      "sha": "7ef2af4aff6bce67be2e1f37950c7f423be94df7",
      "filename": "binutils/Makefile.in",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/Makefile.in?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -122,6 +122,7 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n \t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/largefile.m4 \\\n@@ -222,13 +223,15 @@ objcopy_LDADD = $(LDADD)\n am_objdump_OBJECTS = objdump.$(OBJEXT) dwarf.$(OBJEXT) prdbg.$(OBJEXT) \\\n \t$(am__objects_3) $(am__objects_1) $(am__objects_2)\n objdump_OBJECTS = $(am_objdump_OBJECTS)\n+@ENABLE_LIBCTF_TRUE@am__DEPENDENCIES_2 = ../libctf/libctf.la\n am_ranlib_OBJECTS = ar.$(OBJEXT) is-ranlib.$(OBJEXT) arparse.$(OBJEXT) \\\n \tarlex.$(OBJEXT) arsup.$(OBJEXT) rename.$(OBJEXT) \\\n \tbinemul.$(OBJEXT) emul_$(EMULATION).$(OBJEXT) $(am__objects_1)\n ranlib_OBJECTS = $(am_ranlib_OBJECTS)\n am_readelf_OBJECTS = readelf.$(OBJEXT) version.$(OBJEXT) \\\n \tunwind-ia64.$(OBJEXT) dwarf.$(OBJEXT) $(am__objects_2)\n readelf_OBJECTS = $(am_readelf_OBJECTS)\n+@ENABLE_LIBCTF_TRUE@am__DEPENDENCIES_3 = ../libctf/libctf-nobfd.la\n am_size_OBJECTS = size.$(OBJEXT) $(am__objects_1)\n size_OBJECTS = $(am_size_OBJECTS)\n size_LDADD = $(LDADD)\n@@ -658,8 +661,10 @@ BULIBS = bucomm.c version.c filemode.c\n ELFLIBS = elfcomm.c\n BFDLIB = ../bfd/libbfd.la\n OPCODES = ../opcodes/libopcodes.la\n-LIBCTF = ../libctf/libctf.la\n-LIBCTF_NOBFD = ../libctf/libctf-nobfd.la\n+@ENABLE_LIBCTF_FALSE@LIBCTF = \n+@ENABLE_LIBCTF_TRUE@LIBCTF = ../libctf/libctf.la\n+@ENABLE_LIBCTF_FALSE@LIBCTF_NOBFD = \n+@ENABLE_LIBCTF_TRUE@LIBCTF_NOBFD = ../libctf/libctf-nobfd.la\n LIBIBERTY = ../libiberty/libiberty.a\n POTFILES = $(CFILES) $(DEBUG_SRCS) $(HFILES)\n EXPECT = expect"
    },
    {
      "sha": "8bf2e9e242452756ba716f146b20a4b6d28013e4",
      "filename": "binutils/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/aclocal.m4?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -1189,6 +1189,7 @@ m4_include([../bfd/acinclude.m4])\n m4_include([../bfd/warning.m4])\n m4_include([../config/acx.m4])\n m4_include([../config/depstand.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/gettext-sister.m4])\n m4_include([../config/iconv.m4])\n m4_include([../config/largefile.m4])"
    },
    {
      "sha": "3adc32bb1ffb55ea7dd1e69cdd7c92410bd4bf0f",
      "filename": "binutils/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/config.in?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -21,6 +21,9 @@\n /* Should strings use -a behavior by default? */\n #undef DEFAULT_STRINGS_ALL\n \n+/* Handle .ctf type-info sections */\n+#undef ENABLE_LIBCTF\n+\n /* Define to 1 if translation of program messages to the user's native\n    language is requested. */\n #undef ENABLE_NLS"
    },
    {
      "sha": "bdc93e02078047b995edc1d461a7a60906045e49",
      "filename": "binutils/configure",
      "status": "modified",
      "additions": 37,
      "deletions": 2,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/configure?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -684,6 +684,8 @@ WARN_WRITE_STRINGS\n NO_WERROR\n WARN_CFLAGS_FOR_BUILD\n WARN_CFLAGS\n+ENABLE_LIBCTF_FALSE\n+ENABLE_LIBCTF_TRUE\n LIBDEBUGINFOD\n OTOOL64\n OTOOL\n@@ -815,6 +817,7 @@ enable_targets\n enable_deterministic_archives\n enable_default_strings_all\n with_debuginfod\n+enable_libctf\n enable_werror\n enable_build_warnings\n enable_nls\n@@ -1472,6 +1475,7 @@ Optional Features:\n                           ar and ranlib default to -D behavior\n   --disable-default-strings-all\n                           strings defaults to --data behavior\n+  --enable-libctf         Handle .ctf type-info sections [default=yes]\n   --enable-werror         treat compile warnings as errors\n   --enable-build-warnings enable build-time compiler warnings\n   --disable-nls           do not use Native Language Support\n@@ -11529,7 +11533,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11532 \"configure\"\n+#line 11536 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11635,7 +11639,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11638 \"configure\"\n+#line 11642 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12331,6 +12335,33 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+ # Check whether --enable-libctf was given.\n+if test \"${enable_libctf+set}\" = set; then :\n+  enableval=$enable_libctf;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error $? \"Argument to enable/disable libctf must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n+else\n+  enable_libctf=yes\n+fi\n+\n+\n+if test \"${enable_libctf}\" = yes; then\n+\n+$as_echo \"#define ENABLE_LIBCTF 1\" >>confdefs.h\n+\n+fi\n+ if test \"${enable_libctf}\" = yes; then\n+  ENABLE_LIBCTF_TRUE=\n+  ENABLE_LIBCTF_FALSE='#'\n+else\n+  ENABLE_LIBCTF_TRUE='#'\n+  ENABLE_LIBCTF_FALSE=\n+fi\n+\n+\n \n # Set the 'development' global.\n . $srcdir/../bfd/development.sh\n@@ -15413,6 +15444,10 @@ else\n   am__EXEEXT_FALSE=\n fi\n \n+if test -z \"${ENABLE_LIBCTF_TRUE}\" && test -z \"${ENABLE_LIBCTF_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"ENABLE_LIBCTF\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"
    },
    {
      "sha": "4ac1f34a6d200d51c4eca2118d1a7b350cf20f45",
      "filename": "binutils/configure.ac",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/configure.ac?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -69,6 +69,12 @@ AC_DEBUGINFOD\n AC_DEFINE_UNQUOTED(DEFAULT_STRINGS_ALL, $default_strings_all,\n \t\t   [Should strings use -a behavior by default?])\n \n+GCC_ENABLE([libctf], [yes], [], [Handle .ctf type-info sections])\n+if test \"${enable_libctf}\" = yes; then\n+    AC_DEFINE(ENABLE_LIBCTF, 1, [Handle .ctf type-info sections])\n+fi\n+AM_CONDITIONAL(ENABLE_LIBCTF, test \"${enable_libctf}\" = yes)\n+\n AM_BINUTILS_WARNINGS\n \n AC_CONFIG_HEADERS(config.h:config.in)"
    },
    {
      "sha": "e925b81e0dc67cd45cd392b1c22d4b5b300764aa",
      "filename": "binutils/doc/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/doc/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/doc/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/Makefile.in?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -111,6 +111,7 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n \t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/largefile.m4 \\"
    },
    {
      "sha": "93508e2a348b2bbe6c3e4d473b02fae6b46090a6",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 24,
      "deletions": 3,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -235,7 +235,13 @@ usage (FILE *stream, int status)\n           =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,\\n\\\n           =addr,=cu_index,=links,=follow-links]\\n\\\n                            Display DWARF info in the file\\n\\\n+\"));\n+#ifdef ENABLE_LIBCTF\n+  fprintf (stream, _(\"\\\n   --ctf=SECTION            Display CTF info from SECTION\\n\\\n+\"));\n+#endif\n+  fprintf (stream, _(\"\\\n   -t, --syms               Display the contents of the symbol table(s)\\n\\\n   -T, --dynamic-syms       Display the contents of the dynamic symbol table\\n\\\n   -r, --reloc              Display the relocation entries in the file\\n\\\n@@ -284,9 +290,12 @@ usage (FILE *stream, int status)\n       --dwarf-depth=N        Do not display DIEs at depth N or greater\\n\\\n       --dwarf-start=N        Display DIEs starting with N, at the same depth\\n\\\n                              or deeper\\n\\\n-      --dwarf-check          Make additional dwarf internal consistency checks.\\\n-      \\n\\\n-      --ctf-parent=SECTION       Use SECTION as the CTF parent\\n\\\n+      --dwarf-check          Make additional dwarf internal consistency checks.\\n\"));\n+#ifdef ENABLE_LIBCTF\n+      fprintf (stream, _(\"\\\n+      --ctf-parent=SECTION     Use SECTION as the CTF parent\\n\"));\n+#endif\n+      fprintf (stream, _(\"\\\n       --visualize-jumps          Visualize jumps by drawing ASCII art lines\\n\\\n       --visualize-jumps=color    Use colors in the ASCII art\\n\\\n       --visualize-jumps=extended-color   Use extended 8-bit color codes\\n\\\n@@ -328,8 +337,10 @@ enum option_values\n     OPTION_NO_RECURSE_LIMIT,\n     OPTION_INLINES,\n     OPTION_SOURCE_COMMENT,\n+#ifdef ENABLE_LIBCTF\n     OPTION_CTF,\n     OPTION_CTF_PARENT,\n+#endif\n     OPTION_VISUALIZE_JUMPS\n   };\n \n@@ -375,8 +386,10 @@ static struct option long_options[]=\n   {\"special-syms\", no_argument, &dump_special_syms, 1},\n   {\"include\", required_argument, NULL, 'I'},\n   {\"dwarf\", optional_argument, NULL, OPTION_DWARF},\n+#ifdef ENABLE_LIBCTF\n   {\"ctf\", required_argument, NULL, OPTION_CTF},\n   {\"ctf-parent\", required_argument, NULL, OPTION_CTF_PARENT},\n+#endif\n   {\"stabs\", no_argument, NULL, 'G'},\n   {\"start-address\", required_argument, NULL, OPTION_START_ADDRESS},\n   {\"stop-address\", required_argument, NULL, OPTION_STOP_ADDRESS},\n@@ -4026,6 +4039,7 @@ dump_bfd_header (bfd *abfd)\n }\n \f\n \n+#ifdef ENABLE_LIBCTF\n /* Formatting callback function passed to ctf_dump.  Returns either the pointer\n    it is passed, or a pointer to newly-allocated storage, in which case\n    dump_ctf() will free it when it no longer needs it.  */\n@@ -4167,6 +4181,11 @@ dump_ctf (bfd *abfd, const char *sect_name, const char *parent_name)\n   free (parentdata);\n   free (ctfdata);\n }\n+#else\n+static void\n+dump_ctf (bfd *abfd ATTRIBUTE_UNUSED, const char *sect_name ATTRIBUTE_UNUSED,\n+\t  const char *parent_name ATTRIBUTE_UNUSED) {}\n+#endif\n \n \f\n static void\n@@ -5348,6 +5367,7 @@ main (int argc, char **argv)\n \tcase OPTION_DWARF_CHECK:\n \t  dwarf_check = TRUE;\n \t  break;\n+#ifdef ENABLE_LIBCTF\n \tcase OPTION_CTF:\n \t  dump_ctf_section_info = TRUE;\n \t  dump_ctf_section_name = xstrdup (optarg);\n@@ -5356,6 +5376,7 @@ main (int argc, char **argv)\n \tcase OPTION_CTF_PARENT:\n \t  dump_ctf_parent_name = xstrdup (optarg);\n \t  break;\n+#endif\n \tcase 'G':\n \t  dump_stab_section_info = TRUE;\n \t  seenflag = TRUE;"
    },
    {
      "sha": "2f0cd77ecfcd6af1bbce0b4d3706f2290bfcfad6",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -4502,11 +4502,13 @@ static struct option options[] =\n   {\"dwarf-start\",      required_argument, 0, OPTION_DWARF_START},\n   {\"dwarf-check\",      no_argument, 0, OPTION_DWARF_CHECK},\n \n+#ifdef ENABLE_LIBCTF\n   {\"ctf\",\t       required_argument, 0, OPTION_CTF_DUMP},\n \n   {\"ctf-symbols\",      required_argument, 0, OPTION_CTF_SYMBOLS},\n   {\"ctf-strings\",      required_argument, 0, OPTION_CTF_STRINGS},\n   {\"ctf-parent\",       required_argument, 0, OPTION_CTF_PARENT},\n+#endif\n \n   {\"version\",\t       no_argument, 0, 'v'},\n   {\"wide\",\t       no_argument, 0, 'W'},\n@@ -4558,6 +4560,7 @@ usage (FILE * stream)\n   --dwarf-depth=N        Do not display DIEs at depth N or greater\\n\\\n   --dwarf-start=N        Display DIEs starting with N, at the same depth\\n\\\n                          or deeper\\n\"));\n+#ifdef ENABLE_LIBCTF\n   fprintf (stream, _(\"\\\n   --ctf=<number|name>    Display CTF info from section <number|name>\\n\\\n   --ctf-parent=<number|name>\\n\\\n@@ -4566,6 +4569,7 @@ usage (FILE * stream)\n                          Use section <number|name> as the CTF external symtab\\n\\n\\\n   --ctf-strings=<number|name>\\n\\\n                          Use section <number|name> as the CTF external strtab\\n\\n\"));\n+#endif\n \n #ifdef SUPPORT_DISASSEMBLY\n   fprintf (stream, _(\"\\\n@@ -14132,6 +14136,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n   return FALSE;\n }\n \n+#ifdef ENABLE_LIBCTF\n static ctf_sect_t *\n shdr_to_ctf_sect (ctf_sect_t *buf, Elf_Internal_Shdr *shdr, Filedata *filedata)\n {\n@@ -14292,6 +14297,7 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n   free (strdata);\n   return ret;\n }\n+#endif\n \n static bfd_boolean\n load_specific_debug_section (enum dwarf_section_display_enum  debug,\n@@ -14777,11 +14783,13 @@ process_section_contents (Filedata * filedata)\n \t    res = FALSE;\n \t}\n \n+#ifdef ENABLE_LIBCTF\n       if (dump & CTF_DUMP)\n \t{\n \t  if (! dump_section_as_ctf (section, filedata))\n \t    res = FALSE;\n \t}\n+#endif\n     }\n \n   /* Check to see if the user requested a"
    },
    {
      "sha": "4cf120413ea1261d117e0649f5271e488eae2850",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -1,3 +1,33 @@\n+2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* configure.ac [--enable-libctf]: New, default yes.\n+\tSet ENABLE_LIBCTF accordingly.\n+\t* Makefile.am [!ENABLE_LIBCTF]: Empty LIBCTF.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\t* ldlang.c (ctf_output): Conditionalize on ENABLE_LIBCTF.\n+\t(ldlang_open_ctf): Likewise.\n+\t(lang_merge_ctf): Likewise.\n+\t(ldlang_ctf_apply_strsym): Likewise.\n+\t(lang_write_ctf): Likewise.\n+\t(ldlang_write_ctf_late): Likewise.\n+\t(ldlang_open_ctf) [!ENABLE_LIBCTF]: Warn about the presence of CTF\n+\tsections.\n+\t(lang_merge_ctf) [!ENABLE_LIBCTF]: New stub.\n+\t(ldlang_ctf_apply_strsym) [!ENABLE_LIBCTF]: Likewise.\n+\t(lang_write_ctf) [!ENABLE_LIBCTF]: Likewise.\n+\t(ldlang_write_ctf_late) [!ENABLE_LIBCTF]: Likewise.\n+\t* ldelfgen.c (ldelf_emit_ctf_early): Conditionalize on\n+\tENABLE_LIBCTF.\n+\t(struct ctf_strsym_iter_cb_arg): Likewise.\n+\t(ldelf_ctf_strtab_iter_cb): Likewise.\n+\t(ldelf_ctf_symbols_iter_cb): Likewise.\n+\t(ldelf_examine_strtab_for_ctf): Likewise.\n+\t(ldelf_emit_ctf_early) [!ENABLE_LIBCTF]: New stub.\n+\t(ldelf_examine_strtab_for_ctf) [!ENABLE_LIBCTF]: New stub.\n+\n 2020-06-26  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/ld-x86-64/x86-64.exp: Run K1OM tests."
    },
    {
      "sha": "5035c5d1d5cc9ba578be6d0b8844ae37cb775e62",
      "filename": "ld/Makefile.am",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.am?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -144,7 +144,11 @@ AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) @zlibinc@ \\\n \n BFDLIB = ../bfd/libbfd.la\n LIBIBERTY = ../libiberty/libiberty.a\n+if ENABLE_LIBCTF\n LIBCTF = ../libctf/libctf.la\n+else\n+LIBCTF =\n+endif\n \n # These all start with e so 'make clean' can find them.\n ALL_EMULATION_SOURCES = \\"
    },
    {
      "sha": "49e1f857d2c6c535065ac39fd9e74d08effb1061",
      "filename": "ld/Makefile.in",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.in?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -113,6 +113,7 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n \t$(top_srcdir)/../config/largefile.m4 \\\n \t$(top_srcdir)/../config/lcmessage.m4 \\\n@@ -180,6 +181,7 @@ am_ld_new_OBJECTS = ldgram.$(OBJEXT) ldlex-wrapper.$(OBJEXT) \\\n \tplugin.$(OBJEXT) ldbuildid.$(OBJEXT)\n ld_new_OBJECTS = $(am_ld_new_OBJECTS)\n am__DEPENDENCIES_1 =\n+@ENABLE_LIBCTF_TRUE@am__DEPENDENCIES_2 = ../libctf/libctf.la\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n am__v_P_0 = false\n@@ -628,7 +630,8 @@ AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) @zlibinc@ \\\n \n BFDLIB = ../bfd/libbfd.la\n LIBIBERTY = ../libiberty/libiberty.a\n-LIBCTF = ../libctf/libctf.la\n+@ENABLE_LIBCTF_FALSE@LIBCTF = \n+@ENABLE_LIBCTF_TRUE@LIBCTF = ../libctf/libctf.la\n \n # These all start with e so 'make clean' can find them.\n ALL_EMULATION_SOURCES = \\"
    },
    {
      "sha": "f6e87a228af5b6ced6ee60e1bdb81b0b8b08af47",
      "filename": "ld/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/aclocal.m4?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -1189,6 +1189,7 @@ m4_include([../bfd/acinclude.m4])\n m4_include([../bfd/warning.m4])\n m4_include([../config/acx.m4])\n m4_include([../config/depstand.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/gettext-sister.m4])\n m4_include([../config/largefile.m4])\n m4_include([../config/lcmessage.m4])"
    },
    {
      "sha": "f17121073679759f95d38720c5fee9cdddebef68",
      "filename": "ld/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/config.in?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -33,6 +33,9 @@\n    */\n #undef DEFAULT_NEW_DTAGS\n \n+/* Handle .ctf type-info sections */\n+#undef ENABLE_LIBCTF\n+\n /* Define to 1 if translation of program messages to the user's native\n    language is requested. */\n #undef ENABLE_NLS"
    },
    {
      "sha": "11c69bec7b91293f63063b33184c0a2919c9dd6b",
      "filename": "ld/configure",
      "status": "modified",
      "additions": 40,
      "deletions": 2,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -678,6 +678,8 @@ WARN_WRITE_STRINGS\n NO_WERROR\n WARN_CFLAGS_FOR_BUILD\n WARN_CFLAGS\n+ENABLE_LIBCTF_FALSE\n+ENABLE_LIBCTF_TRUE\n installed_linker\n install_as_default\n TARGET_SYSTEM_ROOT_DEFINE\n@@ -832,6 +834,7 @@ enable_relro\n enable_textrel_check\n enable_separate_code\n enable_default_hash_style\n+enable_libctf\n enable_werror\n enable_build_warnings\n enable_nls\n@@ -1502,6 +1505,7 @@ Optional Features:\n   --enable-separate-code  enable -z separate-code in ELF linker by default\n   --enable-default-hash-style={sysv,gnu,both}\n                           use this default hash style\n+  --enable-libctf         Handle .ctf type-info sections [default=yes]\n   --enable-werror         treat compile warnings as errors\n   --enable-build-warnings enable build-time compiler warnings\n   --disable-nls           do not use Native Language Support\n@@ -12033,7 +12037,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12036 \"configure\"\n+#line 12040 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12139,7 +12143,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12142 \"configure\"\n+#line 12146 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15926,6 +15930,33 @@ case \"${enable_default_hash_style}\" in\n   *) ac_default_emit_gnu_hash=0 ;;\n esac\n \n+ # Check whether --enable-libctf was given.\n+if test \"${enable_libctf+set}\" = set; then :\n+  enableval=$enable_libctf;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error $? \"Argument to enable/disable libctf must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n+else\n+  enable_libctf=yes\n+fi\n+\n+\n+if test \"${enable_libctf}\" = yes; then\n+\n+$as_echo \"#define ENABLE_LIBCTF 1\" >>confdefs.h\n+\n+fi\n+ if test \"${enable_libctf}\" = yes; then\n+  ENABLE_LIBCTF_TRUE=\n+  ENABLE_LIBCTF_FALSE='#'\n+else\n+  ENABLE_LIBCTF_TRUE='#'\n+  ENABLE_LIBCTF_FALSE=\n+fi\n+\n+\n \n # Set the 'development' global.\n . $srcdir/../bfd/development.sh\n@@ -17700,6 +17731,9 @@ else\n   TESTBFDLIB=\"../bfd/.libs/libbfd.a\"\n   TESTCTFLIB=\"../libctf/.libs/libctf.a\"\n fi\n+if test \"${enable_libctf}\" = no; then\n+    TESTCTFLIB=\n+fi\n \n \n \n@@ -17872,6 +17906,10 @@ if test -z \"${am__fastdepCXX_TRUE}\" && test -z \"${am__fastdepCXX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"am__fastdepCXX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_LIBCTF_TRUE}\" && test -z \"${ENABLE_LIBCTF_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"ENABLE_LIBCTF\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"
    },
    {
      "sha": "5a4938afdb0ec6f48a947cdcc51d41efb78f5143",
      "filename": "ld/configure.ac",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure.ac?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -221,6 +221,12 @@ case \"${enable_default_hash_style}\" in\n   *) ac_default_emit_gnu_hash=0 ;;\n esac\n \n+GCC_ENABLE([libctf], [yes], [], [Handle .ctf type-info sections])\n+if test \"${enable_libctf}\" = yes; then\n+    AC_DEFINE(ENABLE_LIBCTF, 1, [Handle .ctf type-info sections])\n+fi\n+AM_CONDITIONAL(ENABLE_LIBCTF, test \"${enable_libctf}\" = yes)\n+\n AM_BINUTILS_WARNINGS\n \n AM_LC_MESSAGES\n@@ -524,6 +530,9 @@ else\n   TESTBFDLIB=\"../bfd/.libs/libbfd.a\"\n   TESTCTFLIB=\"../libctf/.libs/libctf.a\"\n fi\n+if test \"${enable_libctf}\" = no; then\n+    TESTCTFLIB=\n+fi\n AC_SUBST(TESTBFDLIB)\n AC_SUBST(TESTCTFLIB)\n "
    },
    {
      "sha": "3a5619435cf4d9912b18016e5a2e5f75d4e50786",
      "filename": "ld/ldelfgen.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/ldelfgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/ldelfgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.c?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -88,6 +88,7 @@ ldelf_map_segments (bfd_boolean need_layout)\n     }\n }\n \n+#ifdef ENABLE_LIBCTF\n /* We want to emit CTF early if and only if we are not targetting ELF with this\n    invocation.  */\n \n@@ -197,3 +198,16 @@ ldelf_examine_strtab_for_ctf\n \t\t \"cost: %s\\n\"), ctf_errmsg (ctf_errno (ctf_output)));\n     }\n }\n+#else\n+extern int ldelf_emit_ctf_early (void)\n+{\n+  return 0;\n+}\n+\n+extern void ldelf_examine_strtab_for_ctf\n+  (struct ctf_file *ctf_output ATTRIBUTE_UNUSED,\n+   struct elf_sym_strtab *syms ATTRIBUTE_UNUSED,\n+   bfd_size_type symcount ATTRIBUTE_UNUSED,\n+   struct elf_strtab_hash *symstrtab ATTRIBUTE_UNUSED)\n+{}\n+#endif"
    },
    {
      "sha": "23e787a3b22d0fa83ea7ec4245a4046865dc2bcc",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/094e34f22146ad53eb93da22e480cab428bd23b5/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/094e34f22146ad53eb93da22e480cab428bd23b5/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=094e34f22146ad53eb93da22e480cab428bd23b5",
      "patch": "@@ -131,7 +131,9 @@ bfd_boolean delete_output_file_on_failure = FALSE;\n struct lang_phdr *lang_phdr_list;\n struct lang_nocrossrefs *nocrossref_list;\n struct asneeded_minfo **asneeded_list_tail;\n+#ifdef ENABLE_LIBCTF\n static ctf_file_t *ctf_output;\n+#endif\n \n /* Functions that traverse the linker script and might evaluate\n    DEFINED() need to increment this at the start of the traversal.  */\n@@ -3669,6 +3671,7 @@ open_input_bfds (lang_statement_union_type *s, enum open_bfd_mode mode)\n     einfo (\"%F\");\n }\n \n+#ifdef ENABLE_LIBCTF\n /* Open the CTF sections in the input files with libctf: if any were opened,\n    create a fake input file that we'll write the merged CTF data to later\n    on.  */\n@@ -3848,6 +3851,38 @@ ldlang_write_ctf_late (void)\n \n   lang_write_ctf (1);\n }\n+#else\n+static void\n+ldlang_open_ctf (void)\n+{\n+  LANG_FOR_EACH_INPUT_STATEMENT (file)\n+    {\n+      asection *sect;\n+\n+      /* If built without CTF, warn and delete all CTF sections from the output.\n+\t (The alternative would be to simply concatenate them, which does not\n+\t yield a valid CTF section.)  */\n+\n+      if ((sect = bfd_get_section_by_name (file->the_bfd, \".ctf\")) != NULL)\n+\t{\n+\t    einfo (_(\"%P: warning: CTF section in `%pI' not linkable: \"\n+\t\t     \"%P was built without support for CTF\\n\"), file);\n+\t    sect->size = 0;\n+\t    sect->flags |= SEC_EXCLUDE;\n+\t}\n+    }\n+}\n+\n+static void lang_merge_ctf (void) {}\n+void\n+ldlang_ctf_apply_strsym (struct elf_sym_strtab *syms ATTRIBUTE_UNUSED,\n+\t\t\t bfd_size_type symcount ATTRIBUTE_UNUSED,\n+\t\t\t struct elf_strtab_hash *symstrtab ATTRIBUTE_UNUSED)\n+{\n+}\n+static void lang_write_ctf (int late ATTRIBUTE_UNUSED) {}\n+void ldlang_write_ctf_late (void) {}\n+#endif\n \n /* Add the supplied name to the symbol table as an undefined reference.\n    This is a two step process as the symbol table doesn't even exist at"
    }
  ]
}