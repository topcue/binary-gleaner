{
  "sha": "136821d9f6fdb7f457500d154166a1b4b41a0d1b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTM2ODIxZDlmNmZkYjdmNDU3NTAwZDE1NDE2NmExYjRiNDFhMGQxYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-10-30T19:10:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-10-30T19:10:58Z"
    },
    "message": "gdb: introduce displaced_debug_printf\n\nMove all debug prints of the \"displaced\" category to use a new\ndisplaced_debug_printf macro, like what was done for infrun and others\nearlier.\n\nThe debug output for one displaced step one amd64 looks like:\n\n    [displaced] displaced_step_prepare_throw: stepping process 3367044 now\n    [displaced] displaced_step_prepare_throw: saved 0x555555555042: 1e fa 31 ed 49 89 d1 5e 48 89 e2 48 83 e4 f0 50\n    [displaced] amd64_displaced_step_copy_insn: copy 0x555555555131->0x555555555042: b8 00 00 00 00 5d c3 0f 1f 84 00 00 00 00 00 f3\n    [displaced] displaced_step_prepare_throw: displaced pc to 0x555555555042\n    [displaced] resume_1: run 0x555555555042: b8 00 00 00\n    [displaced] displaced_step_restore: restored process 3367044 0x555555555042\n    [displaced] amd64_displaced_step_fixup: fixup (0x555555555131, 0x555555555042), insn = 0xb8 0x00 ...\n    [displaced] amd64_displaced_step_fixup: relocated %rip from 0x555555555047 to 0x555555555136\n\nOn test case needed to be updated because it relied on the specific\nformatting of the message.\n\ngdb/ChangeLog:\n\n\t* infrun.h (displaced_debug_printf): New macro.  Replace\n\tdisplaced debug prints throughout to use it.\n\t(displaced_debug_printf_1): New declaration.\n\t(displaced_step_dump_bytes): Return string, remove ui_file\n\tparameter, update all callers.\n\t* infrun.c (displaced_debug_printf_1): New function.\n\t(displaced_step_dump_bytes): Return string, remove ui_file\n\tparameter\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/amd64-disp-step-avx.exp: Update displaced step debug\n\texpected output.\n\nChange-Id: Ie78837f56431f6f98378790ba1e6051337bf6533",
    "tree": {
      "sha": "8204382983b0abf241cd990e5731ae9ac3225e83",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8204382983b0abf241cd990e5731ae9ac3225e83"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/136821d9f6fdb7f457500d154166a1b4b41a0d1b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/136821d9f6fdb7f457500d154166a1b4b41a0d1b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/136821d9f6fdb7f457500d154166a1b4b41a0d1b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/136821d9f6fdb7f457500d154166a1b4b41a0d1b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aa2045e7fa41ea80a876421bca89443f7a2df92f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa2045e7fa41ea80a876421bca89443f7a2df92f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aa2045e7fa41ea80a876421bca89443f7a2df92f"
    }
  ],
  "stats": {
    "total": 771,
    "additions": 311,
    "deletions": 460
  },
  "files": [
    {
      "sha": "dce2e11818a7f22da5503735e2264ef135aadc77",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -1,3 +1,14 @@\n+2020-10-30  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* infrun.h (displaced_debug_printf): New macro.  Replace\n+\tdisplaced debug prints throughout to use it.\n+\t(displaced_debug_printf_1): New declaration.\n+\t(displaced_step_dump_bytes): Return string, remove ui_file\n+\tparameter, update all callers.\n+\t* infrun.c (displaced_debug_printf_1): New function.\n+\t(displaced_step_dump_bytes): Return string, remove ui_file\n+\tparameter\n+\n 2020-10-30  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* rs6000-tdep.c (rs6000_dwarf2_reg_to_regnum): Return -1 for"
    },
    {
      "sha": "4c1d545eb5b162665cf064951e770da157428788",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 17,
      "deletions": 28,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -3177,12 +3177,10 @@ aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t relocated instruction(s) there.  */\n       for (i = 0; i < dsd.insn_count; i++)\n \t{\n-\t  if (debug_displaced)\n-\t    {\n-\t      debug_printf (\"displaced: writing insn \");\n-\t      debug_printf (\"%.8x\", dsd.insn_buf[i]);\n-\t      debug_printf (\" at %s\\n\", paddress (gdbarch, to + i * 4));\n-\t    }\n+\t  displaced_debug_printf (\"writing insn %.8x at %s\",\n+\t\t\t\t  dsd.insn_buf[i],\n+\t\t\t\t  paddress (gdbarch, to + i * 4));\n+\n \t  write_memory_unsigned_integer (to + i * 4, 4, byte_order_for_code,\n \t\t\t\t\t (ULONGEST) dsd.insn_buf[i]);\n \t}\n@@ -3210,15 +3208,13 @@ aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n \n   regcache_cooked_read_unsigned (regs, AARCH64_PC_REGNUM, &pc);\n \n-  if (debug_displaced)\n-    debug_printf (\"Displaced: PC after stepping: %s (was %s).\\n\",\n-\t\t  paddress (gdbarch, pc), paddress (gdbarch, to));\n+  displaced_debug_printf (\"PC after stepping: %s (was %s).\",\n+\t\t\t  paddress (gdbarch, pc), paddress (gdbarch, to));\n \n   if (dsc->cond)\n     {\n-      if (debug_displaced)\n-\tdebug_printf (\"Displaced: [Conditional] pc_adjust before: %d\\n\",\n-\t\t      dsc->pc_adjust);\n+      displaced_debug_printf (\"[Conditional] pc_adjust before: %d\",\n+\t\t\t      dsc->pc_adjust);\n \n       if (pc - to == 8)\n \t{\n@@ -3232,16 +3228,13 @@ aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n       else\n \tgdb_assert_not_reached (\"Unexpected PC value after displaced stepping\");\n \n-      if (debug_displaced)\n-\tdebug_printf (\"Displaced: [Conditional] pc_adjust after: %d\\n\",\n-\t\t      dsc->pc_adjust);\n+      displaced_debug_printf (\"[Conditional] pc_adjust after: %d\",\n+\t\t\t      dsc->pc_adjust);\n     }\n \n-  if (debug_displaced)\n-    debug_printf (\"Displaced: %s PC by %d\\n\",\n-\t\t  dsc->pc_adjust? \"adjusting\" : \"not adjusting\",\n-\t\t  dsc->pc_adjust);\n-\n+  displaced_debug_printf (\"%s PC by %d\",\n+\t\t\t  dsc->pc_adjust ? \"adjusting\" : \"not adjusting\",\n+\t\t\t  dsc->pc_adjust);\n \n   if (dsc->pc_adjust != 0)\n     {\n@@ -3251,17 +3244,13 @@ aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n \t took place.  */\n       if ((pc - to) == 0)\n \t{\n-\t  if (debug_displaced)\n-\t    debug_printf (\"Displaced: PC did not move. Discarding PC \"\n-\t\t\t  \"adjustment.\\n\");\n+\t  displaced_debug_printf (\"PC did not move. Discarding PC adjustment.\");\n \t  dsc->pc_adjust = 0;\n \t}\n \n-      if (debug_displaced)\n-\t{\n-\t  debug_printf (\"Displaced: fixup: set PC to %s:%d\\n\",\n-\t\t\tpaddress (gdbarch, from), dsc->pc_adjust);\n-\t}\n+      displaced_debug_printf (\"fixup: set PC to %s:%d\",\n+\t\t\t      paddress (gdbarch, from), dsc->pc_adjust);\n+\n       regcache_cooked_write_unsigned (regs, AARCH64_PC_REGNUM,\n \t\t\t\t      from + dsc->pc_adjust);\n     }"
    },
    {
      "sha": "57d57be582c632fc63db0a46d61f0e5b5703de71",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 25,
      "deletions": 50,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -1438,11 +1438,10 @@ fixup_riprel (struct gdbarch *gdbarch, amd64_displaced_step_closure *dsc,\n \n   regcache_cooked_write_unsigned (regs, tmp_regno, rip_base);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: %%rip-relative addressing used.\\n\"\n-\t\t\t\"displaced: using temp reg %d, old value %s, new value %s\\n\",\n-\t\t\tdsc->tmp_regno, paddress (gdbarch, dsc->tmp_save),\n-\t\t\tpaddress (gdbarch, rip_base));\n+  displaced_debug_printf (\"%%rip-relative addressing used.\");\n+  displaced_debug_printf (\"using temp reg %d, old value %s, new value %s\",\n+\t\t\t  dsc->tmp_regno, paddress (gdbarch, dsc->tmp_save),\n+\t\t\t  paddress (gdbarch, rip_base));\n }\n \n static void\n@@ -1504,12 +1503,9 @@ amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \n   write_memory (to, buf, len);\n \n-  if (debug_displaced)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"displaced: copy %s->%s: \",\n-\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to));\n-      displaced_step_dump_bytes (gdb_stdlog, buf, len);\n-    }\n+  displaced_debug_printf (\"copy %s->%s: %s\",\n+\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n   return displaced_step_closure_up (dsc.release ());\n@@ -1685,20 +1681,16 @@ amd64_displaced_step_fixup (struct gdbarch *gdbarch,\n   gdb_byte *insn = dsc->insn_buf.data ();\n   const struct amd64_insn *insn_details = &dsc->insn_details;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: fixup (%s, %s), \"\n-\t\t\t\"insn = 0x%02x 0x%02x ...\\n\",\n-\t\t\tpaddress (gdbarch, from), paddress (gdbarch, to),\n-\t\t\tinsn[0], insn[1]);\n+  displaced_debug_printf (\"fixup (%s, %s), insn = 0x%02x 0x%02x ...\",\n+\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  insn[0], insn[1]);\n \n   /* If we used a tmp reg, restore it.\t*/\n \n   if (dsc->tmp_used)\n     {\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: restoring reg %d to %s\\n\",\n-\t\t\t    dsc->tmp_regno, paddress (gdbarch, dsc->tmp_save));\n+      displaced_debug_printf (\"restoring reg %d to %s\",\n+\t\t\t      dsc->tmp_regno, paddress (gdbarch, dsc->tmp_save));\n       regcache_cooked_write_unsigned (regs, dsc->tmp_regno, dsc->tmp_save);\n     }\n \n@@ -1743,12 +1735,7 @@ amd64_displaced_step_fixup (struct gdbarch *gdbarch,\n \t     Presumably this is a kernel bug.\n \t     Fixup ensures its a nop, we add one to the length for it.  */\n \t  && orig_rip != to + insn_len + 1)\n-\t{\n-\t  if (debug_displaced)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t\"displaced: syscall changed %%rip; \"\n-\t\t\t\t\"not relocating\\n\");\n-\t}\n+\tdisplaced_debug_printf (\"syscall changed %%rip; not relocating\");\n       else\n \t{\n \t  ULONGEST rip = orig_rip - insn_offset;\n@@ -1759,12 +1746,9 @@ amd64_displaced_step_fixup (struct gdbarch *gdbarch,\n \n \t  regcache_cooked_write_unsigned (regs, AMD64_RIP_REGNUM, rip);\n \n-\t  if (debug_displaced)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t\"displaced: \"\n-\t\t\t\t\"relocated %%rip from %s to %s\\n\",\n-\t\t\t\tpaddress (gdbarch, orig_rip),\n-\t\t\t\tpaddress (gdbarch, rip));\n+\t  displaced_debug_printf (\"relocated %%rip from %s to %s\",\n+\t\t\t\t  paddress (gdbarch, orig_rip),\n+\t\t\t\t  paddress (gdbarch, rip));\n \t}\n     }\n \n@@ -1787,12 +1771,9 @@ amd64_displaced_step_fixup (struct gdbarch *gdbarch,\n       retaddr = (retaddr - insn_offset) & 0xffffffffffffffffULL;\n       write_memory_unsigned_integer (rsp, retaddr_len, byte_order, retaddr);\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"displaced: relocated return addr at %s \"\n-\t\t\t    \"to %s\\n\",\n-\t\t\t    paddress (gdbarch, rsp),\n-\t\t\t    paddress (gdbarch, retaddr));\n+      displaced_debug_printf (\"relocated return addr at %s to %s\",\n+\t\t\t      paddress (gdbarch, rsp),\n+\t\t\t      paddress (gdbarch, retaddr));\n     }\n }\n \n@@ -1910,12 +1891,9 @@ amd64_relocate_instruction (struct gdbarch *gdbarch,\n       newrel = (oldloc - *to) + rel32;\n       store_signed_integer (insn + 1, 4, byte_order, newrel);\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"Adjusted insn rel32=%s at %s to\"\n-\t\t\t    \" rel32=%s at %s\\n\",\n-\t\t\t    hex_string (rel32), paddress (gdbarch, oldloc),\n-\t\t\t    hex_string (newrel), paddress (gdbarch, *to));\n+      displaced_debug_printf (\"adjusted insn rel32=%s at %s to rel32=%s at %s\",\n+\t\t\t      hex_string (rel32), paddress (gdbarch, oldloc),\n+\t\t\t      hex_string (newrel), paddress (gdbarch, *to));\n \n       /* Write the adjusted jump into its displaced location.  */\n       append_insns (to, 5, insn);\n@@ -1939,12 +1917,9 @@ amd64_relocate_instruction (struct gdbarch *gdbarch,\n       rel32 = extract_signed_integer (insn + offset, 4, byte_order);\n       newrel = (oldloc - *to) + rel32;\n       store_signed_integer (insn + offset, 4, byte_order, newrel);\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"Adjusted insn rel32=%s at %s to\"\n-\t\t\t    \" rel32=%s at %s\\n\",\n-\t\t\t    hex_string (rel32), paddress (gdbarch, oldloc),\n-\t\t\t    hex_string (newrel), paddress (gdbarch, *to));\n+      displaced_debug_printf (\"adjusted insn rel32=%s at %s to rel32=%s at %s\",\n+\t\t\t      hex_string (rel32), paddress (gdbarch, oldloc),\n+\t\t\t      hex_string (newrel), paddress (gdbarch, *to));\n     }\n \n   /* Write the adjusted instruction into its displaced location.  */"
    },
    {
      "sha": "04352635dc3772baa272d7ae680416fc672ceb66",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 17,
      "deletions": 27,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -957,15 +957,11 @@ arm_linux_cleanup_svc (struct gdbarch *gdbarch,\n \t\t    && apparent_pc < (dsc->scratch_base\n \t\t\t\t      + ARM_DISPLACED_MODIFIED_INSNS * 4 + 4));\n \n-  if (debug_displaced)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"displaced: PC is apparently %.8lx after \"\n-\t\t\t  \"SVC step \", (unsigned long) apparent_pc);\n-      if (within_scratch)\n-        fprintf_unfiltered (gdb_stdlog, \"(within scratch space)\\n\");\n-      else\n-        fprintf_unfiltered (gdb_stdlog, \"(outside scratch space)\\n\");\n-    }\n+  displaced_debug_printf (\"PC is apparently %.8lx after SVC step %s\",\n+\t\t\t  (unsigned long) apparent_pc,\n+\t\t\t  (within_scratch\n+\t\t\t   ? \"(within scratch space)\"\n+\t\t\t   : \"(outside scratch space)\"));\n \n   if (within_scratch)\n     displaced_write_reg (regs, dsc, ARM_PC_REGNUM,\n@@ -991,16 +987,12 @@ arm_linux_copy_svc (struct gdbarch *gdbarch, struct regcache *regs,\n     {\n       struct symtab_and_line sal;\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: found \"\n-\t\t\t    \"sigreturn/rt_sigreturn SVC call.  PC in \"\n-\t\t\t    \"frame = %lx\\n\",\n-\t\t\t    (unsigned long) get_frame_pc (frame));\n+      displaced_debug_printf (\"found sigreturn/rt_sigreturn SVC call.  \"\n+\t\t\t      \"PC in frame = %lx\",\n+\t\t\t      (unsigned long) get_frame_pc (frame));\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: unwind pc = %lx.  \"\n-\t\t\t    \"Setting momentary breakpoint.\\n\",\n-\t\t\t    (unsigned long) return_to);\n+      displaced_debug_printf (\"unwind pc = %lx.  Setting momentary breakpoint.\",\n+\t\t\t      (unsigned long) return_to);\n \n       gdb_assert (inferior_thread ()->control.step_resume_breakpoint\n \t\t  == NULL);\n@@ -1025,13 +1017,12 @@ arm_linux_copy_svc (struct gdbarch *gdbarch, struct regcache *regs,\n \t     breakpoint set above.  */\n \t  insert_breakpoints ();\n \t}\n-      else if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stderr, \"displaced: couldn't find previous \"\n-\t\t\t    \"frame to set momentary breakpoint for \"\n-\t\t\t    \"sigreturn/rt_sigreturn\\n\");\n+      else\n+\tdisplaced_debug_printf (\"couldn't find previous frame to set momentary \"\n+\t\t\t\t\"breakpoint for sigreturn/rt_sigreturn\");\n     }\n-  else if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: found SVC call\\n\");\n+  else\n+    displaced_debug_printf (\"found SVC call\");\n \n   /* Preparation: If we detect sigreturn, set momentary breakpoint at resume\n \t\t  location, else nothing.\n@@ -1115,9 +1106,8 @@ arm_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n      stop at the return location.  */\n   if (from > 0xffff0000)\n     {\n-      if (debug_displaced)\n-        fprintf_unfiltered (gdb_stdlog, \"displaced: detected kernel helper \"\n-\t\t\t    \"at %.8lx\\n\", (unsigned long) from);\n+      displaced_debug_printf (\"detected kernel helper at %.8lx\",\n+\t\t\t      (unsigned long) from);\n \n       arm_catch_kernel_helper_return (gdbarch, from, to, regs, dsc.get ());\n     }"
    },
    {
      "sha": "10e26bc431576545b07f3816e3dff392a6371024",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 129,
      "deletions": 210,
      "changes": 339,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -418,11 +418,9 @@ arm_pc_is_thumb (struct gdbarch *gdbarch, CORE_ADDR memaddr)\n      should be determined by instruction on the original address.  */\n   if (dsc)\n     {\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"displaced: check mode of %.8lx instead of %.8lx\\n\",\n-\t\t\t    (unsigned long) dsc->insn_addr,\n-\t\t\t    (unsigned long) memaddr);\n+      displaced_debug_printf (\"check mode of %.8lx instead of %.8lx\",\n+\t\t\t      (unsigned long) dsc->insn_addr,\n+\t\t\t      (unsigned long) memaddr);\n       memaddr = dsc->insn_addr;\n     }\n \n@@ -4457,17 +4455,17 @@ displaced_read_reg (struct regcache *regs, arm_displaced_step_closure *dsc,\n       else\n \tfrom += 4;\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: read pc value %.8lx\\n\",\n-\t\t\t    (unsigned long) from);\n+      displaced_debug_printf (\"read pc value %.8lx\",\n+\t\t\t      (unsigned long) from);\n       return (ULONGEST) from;\n     }\n   else\n     {\n       regcache_cooked_read_unsigned (regs, regno, &ret);\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: read r%d value %.8lx\\n\",\n-\t\t\t    regno, (unsigned long) ret);\n+\n+      displaced_debug_printf (\"read r%d value %.8lx\",\n+\t\t\t      regno, (unsigned long) ret);\n+\n       return ret;\n     }\n }\n@@ -4563,9 +4561,8 @@ displaced_write_reg (struct regcache *regs, arm_displaced_step_closure *dsc,\n {\n   if (regno == ARM_PC_REGNUM)\n     {\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: writing pc %.8lx\\n\",\n-\t\t\t    (unsigned long) val);\n+      displaced_debug_printf (\"writing pc %.8lx\", (unsigned long) val);\n+\n       switch (write_pc)\n \t{\n \tcase BRANCH_WRITE_PC:\n@@ -4598,9 +4595,8 @@ displaced_write_reg (struct regcache *regs, arm_displaced_step_closure *dsc,\n     }\n   else\n     {\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, \"displaced: writing r%d value %.8lx\\n\",\n-\t\t\t    regno, (unsigned long) val);\n+      displaced_debug_printf (\"writing r%d value %.8lx\",\n+\t\t\t      regno, (unsigned long) val);\n       regcache_cooked_write_unsigned (regs, regno, val);\n     }\n }\n@@ -4644,10 +4640,8 @@ static int\n arm_copy_unmodified (struct gdbarch *gdbarch, uint32_t insn,\n \t\t     const char *iname, arm_displaced_step_closure *dsc)\n {\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying insn %.8lx, \"\n-\t\t\t\"opcode/class '%s' unmodified\\n\", (unsigned long) insn,\n-\t\t\tiname);\n+  displaced_debug_printf (\"copying insn %.8lx, opcode/class '%s' unmodified\",\n+\t\t\t  (unsigned long) insn, iname);\n \n   dsc->modinsn[0] = insn;\n \n@@ -4659,10 +4653,8 @@ thumb_copy_unmodified_32bit (struct gdbarch *gdbarch, uint16_t insn1,\n \t\t\t     uint16_t insn2, const char *iname,\n \t\t\t     arm_displaced_step_closure *dsc)\n {\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying insn %.4x %.4x, \"\n-\t\t\t\"opcode/class '%s' unmodified\\n\", insn1, insn2,\n-\t\t\tiname);\n+  displaced_debug_printf (\"copying insn %.4x %.4x, opcode/class '%s' \"\n+\t\t\t  \"unmodified\", insn1, insn2, iname);\n \n   dsc->modinsn[0] = insn1;\n   dsc->modinsn[1] = insn2;\n@@ -4678,10 +4670,8 @@ thumb_copy_unmodified_16bit (struct gdbarch *gdbarch, uint16_t insn,\n \t\t\t     const char *iname,\n \t\t\t     arm_displaced_step_closure *dsc)\n {\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying insn %.4x, \"\n-\t\t\t\"opcode/class '%s' unmodified\\n\", insn,\n-\t\t\tiname);\n+  displaced_debug_printf (\"copying insn %.4x, opcode/class '%s' unmodified\",\n+\t\t\t  insn, iname);\n \n   dsc->modinsn[0] = insn;\n \n@@ -4727,9 +4717,7 @@ arm_copy_preload (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n   if (!insn_references_pc (insn, 0x000f0000ul))\n     return arm_copy_unmodified (gdbarch, insn, \"preload\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying preload insn %.8lx\\n\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying preload insn %.8lx\", (unsigned long) insn);\n \n   dsc->modinsn[0] = insn & 0xfff0ffff;\n \n@@ -4752,11 +4740,9 @@ thumb2_copy_preload (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n \n   /* PC is only allowed to use in PLI (immediate,literal) Encoding T3, and\n      PLD (literal) Encoding T1.  */\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying pld/pli pc (0x%x) %c imm12 %.4x\\n\",\n-\t\t\t(unsigned int) dsc->insn_addr, u_bit ? '+' : '-',\n-\t\t\timm12);\n+  displaced_debug_printf (\"copying pld/pli pc (0x%x) %c imm12 %.4x\",\n+\t\t\t  (unsigned int) dsc->insn_addr, u_bit ? '+' : '-',\n+\t\t\t  imm12);\n \n   if (!u_bit)\n     imm12 = -1 * imm12;\n@@ -4824,9 +4810,8 @@ arm_copy_preload_reg (struct gdbarch *gdbarch, uint32_t insn,\n   if (!insn_references_pc (insn, 0x000f000ful))\n     return arm_copy_unmodified (gdbarch, insn, \"preload reg\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying preload insn %.8lx\\n\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying preload insn %.8lx\",\n+\t\t\t  (unsigned long) insn);\n \n   dsc->modinsn[0] = (insn & 0xfff0fff0) | 0x1;\n \n@@ -4886,9 +4871,8 @@ arm_copy_copro_load_store (struct gdbarch *gdbarch, uint32_t insn,\n   if (!insn_references_pc (insn, 0x000f0000ul))\n     return arm_copy_unmodified (gdbarch, insn, \"copro load/store\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying coprocessor \"\n-\t\t\t\"load/store insn %.8lx\\n\", (unsigned long) insn);\n+  displaced_debug_printf (\"copying coprocessor load/store insn %.8lx\",\n+\t\t\t  (unsigned long) insn);\n \n   dsc->modinsn[0] = insn & 0xfff0ffff;\n \n@@ -4908,9 +4892,8 @@ thumb2_copy_copro_load_store (struct gdbarch *gdbarch, uint16_t insn1,\n     return thumb_copy_unmodified_32bit (gdbarch, insn1, insn2,\n \t\t\t\t\t\"copro load/store\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying coprocessor \"\n-\t\t\t\"load/store insn %.4x%.4x\\n\", insn1, insn2);\n+  displaced_debug_printf (\"copying coprocessor load/store insn %.4x%.4x\",\n+\t\t\t  insn1, insn2);\n \n   dsc->modinsn[0] = insn1 & 0xfff0;\n   dsc->modinsn[1] = insn2;\n@@ -4995,10 +4978,9 @@ arm_copy_b_bl_blx (struct gdbarch *gdbarch, uint32_t insn,\n   int link = exchange || bit (insn, 24);\n   long offset;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying %s immediate insn \"\n-\t\t\t\"%.8lx\\n\", (exchange) ? \"blx\" : (link) ? \"bl\" : \"b\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying %s immediate insn %.8lx\",\n+\t\t\t  (exchange) ? \"blx\" : (link) ? \"bl\" : \"b\",\n+\t\t\t  (unsigned long) insn);\n   if (exchange)\n     /* For BLX, set bit 0 of the destination.  The cleanup_branch function will\n        then arrange the switch into Thumb mode.  */\n@@ -5058,11 +5040,9 @@ thumb2_copy_b_bl_blx (struct gdbarch *gdbarch, uint16_t insn1,\n \t(bits (insn2, 1, 10) << 2) : (bits (insn2, 0, 10) << 1);\n     }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying %s insn \"\n-\t\t\t\"%.4x %.4x with offset %.8lx\\n\",\n-\t\t\tlink ? (exchange) ? \"blx\" : \"bl\" : \"b\",\n-\t\t\tinsn1, insn2, offset);\n+  displaced_debug_printf (\"copying %s insn %.4x %.4x with offset %.8lx\",\n+\t\t\t  link ? (exchange) ? \"blx\" : \"bl\" : \"b\",\n+\t\t\t  insn1, insn2, offset);\n \n   dsc->modinsn[0] = THUMB_NOP;\n \n@@ -5092,10 +5072,8 @@ thumb_copy_b (struct gdbarch *gdbarch, uint16_t insn,\n       cond = INST_AL;\n     }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying b immediate insn %.4x \"\n-\t\t\t\"with offset %d\\n\", insn, offset);\n+  displaced_debug_printf (\"copying b immediate insn %.4x with offset %d\",\n+\t\t\t  insn, offset);\n \n   dsc->u.branch.cond = cond;\n   dsc->u.branch.link = 0;\n@@ -5144,9 +5122,7 @@ arm_copy_bx_blx_reg (struct gdbarch *gdbarch, uint32_t insn,\n   int link = bit (insn, 5);\n   unsigned int rm = bits (insn, 0, 3);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying insn %.8lx\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying insn %.8lx\", (unsigned long) insn);\n \n   dsc->modinsn[0] = ARM_NOP;\n \n@@ -5162,9 +5138,7 @@ thumb_copy_bx_blx_reg (struct gdbarch *gdbarch, uint16_t insn,\n   int link = bit (insn, 7);\n   unsigned int rm = bits (insn, 3, 6);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying insn %.4x\",\n-\t\t\t(unsigned short) insn);\n+  displaced_debug_printf (\"copying insn %.4x\", (unsigned short) insn);\n \n   dsc->modinsn[0] = THUMB_NOP;\n \n@@ -5199,10 +5173,9 @@ arm_copy_alu_imm (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n   if (!insn_references_pc (insn, 0x000ff000ul))\n     return arm_copy_unmodified (gdbarch, insn, \"ALU immediate\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying immediate %s insn \"\n-\t\t\t\"%.8lx\\n\", is_mov ? \"move\" : \"ALU\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying immediate %s insn %.8lx\",\n+\t\t\t  is_mov ? \"move\" : \"ALU\",\n+\t\t\t  (unsigned long) insn);\n \n   /* Instruction is of form:\n \n@@ -5253,9 +5226,7 @@ thumb2_copy_alu_imm (struct gdbarch *gdbarch, uint16_t insn1,\n   if (rm != ARM_PC_REGNUM && rd != ARM_PC_REGNUM)\n     return thumb_copy_unmodified_32bit (gdbarch, insn1, insn2, \"ALU imm\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying reg %s insn %.4x%.4x\\n\",\n-\t\t\t\"ALU\", insn1, insn2);\n+  displaced_debug_printf (\"copying reg %s insn %.4x%.4x\", \"ALU\", insn1, insn2);\n \n   /* Instruction is of form:\n \n@@ -5346,9 +5317,8 @@ arm_copy_alu_reg (struct gdbarch *gdbarch, uint32_t insn, struct regcache *regs,\n   if (!insn_references_pc (insn, 0x000ff00ful))\n     return arm_copy_unmodified (gdbarch, insn, \"ALU reg\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying reg %s insn %.8lx\\n\",\n-\t\t\tis_mov ? \"move\" : \"ALU\", (unsigned long) insn);\n+  displaced_debug_printf (\"copying reg %s insn %.8lx\",\n+\t\t\t  is_mov ? \"move\" : \"ALU\", (unsigned long) insn);\n \n   if (is_mov)\n     dsc->modinsn[0] = (insn & 0xfff00ff0) | 0x2;\n@@ -5373,9 +5343,7 @@ thumb_copy_alu_reg (struct gdbarch *gdbarch, uint16_t insn,\n   if (rd != ARM_PC_REGNUM && rm != ARM_PC_REGNUM)\n     return thumb_copy_unmodified_16bit (gdbarch, insn, \"ALU reg\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying ALU reg insn %.4x\\n\",\n-\t\t\t(unsigned short) insn);\n+  displaced_debug_printf (\"copying ALU reg insn %.4x\", (unsigned short) insn);\n \n   dsc->modinsn[0] = ((insn & 0xff00) | 0x10);\n \n@@ -5450,10 +5418,9 @@ arm_copy_alu_shifted_reg (struct gdbarch *gdbarch, uint32_t insn,\n   if (!insn_references_pc (insn, 0x000fff0ful))\n     return arm_copy_unmodified (gdbarch, insn, \"ALU shifted reg\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying shifted reg %s insn \"\n-\t\t\t\"%.8lx\\n\", is_mov ? \"move\" : \"ALU\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying shifted reg %s insn %.8lx\",\n+\t\t\t  is_mov ? \"move\" : \"ALU\",\n+\t\t\t  (unsigned long) insn);\n \n   rn = bits (insn, 16, 19);\n   rm = bits (insn, 0, 3);\n@@ -5542,10 +5509,9 @@ arm_copy_extra_ld_st (struct gdbarch *gdbarch, uint32_t insn, int unprivileged,\n   if (!insn_references_pc (insn, 0x000ff00ful))\n     return arm_copy_unmodified (gdbarch, insn, \"extra load/store\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying %sextra load/store \"\n-\t\t\t\"insn %.8lx\\n\", unprivileged ? \"unprivileged \" : \"\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying %sextra load/store insn %.8lx\",\n+\t\t\t  unprivileged ? \"unprivileged \" : \"\",\n+\t\t\t  (unsigned long) insn);\n \n   opcode = ((op2 << 2) | (op1 & 0x1) | ((op1 & 0x4) >> 1)) - 4;\n \n@@ -5663,11 +5629,9 @@ thumb2_copy_load_literal (struct gdbarch *gdbarch, uint16_t insn1,\n   int imm12 = bits (insn2, 0, 11);\n   ULONGEST pc_val;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying ldr pc (0x%x) R%d %c imm12 %.4x\\n\",\n-\t\t\t(unsigned int) dsc->insn_addr, rt, u_bit ? '+' : '-',\n-\t\t\timm12);\n+  displaced_debug_printf (\"copying ldr pc (0x%x) R%d %c imm12 %.4x\",\n+\t\t\t  (unsigned int) dsc->insn_addr, rt, u_bit ? '+' : '-',\n+\t\t\t  imm12);\n \n   if (!u_bit)\n     imm12 = -1 * imm12;\n@@ -5725,10 +5689,8 @@ thumb2_copy_load_reg_imm (struct gdbarch *gdbarch, uint16_t insn1,\n     return thumb_copy_unmodified_32bit (gdbarch, insn1, insn2, \"load\",\n \t\t\t\t\tdsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying ldr r%d [r%d] insn %.4x%.4x\\n\",\n-\t\t\t rt, rn, insn1, insn2);\n+  displaced_debug_printf (\"copying ldr r%d [r%d] insn %.4x%.4x\",\n+\t\t\t  rt, rn, insn1, insn2);\n \n   install_load_store (gdbarch, regs, dsc, 1, immed, writeback, 4,\n \t\t      0, rt, rm, rn);\n@@ -5773,13 +5735,12 @@ arm_copy_ldr_str_ldrb_strb (struct gdbarch *gdbarch, uint32_t insn,\n   if (!insn_references_pc (insn, 0x000ff00ful))\n     return arm_copy_unmodified (gdbarch, insn, \"load/store\", dsc);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying %s%s r%d [r%d] insn %.8lx\\n\",\n-\t\t\tload ? (size == 1 ? \"ldrb\" : \"ldr\")\n-\t\t\t     : (size == 1 ? \"strb\" : \"str\"), usermode ? \"t\" : \"\",\n-\t\t\trt, rn,\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying %s%s r%d [r%d] insn %.8lx\",\n+\t\t\t  load ? (size == 1 ? \"ldrb\" : \"ldr\")\n+\t\t\t       : (size == 1 ? \"strb\" : \"str\"),\n+\t\t\t  usermode ? \"t\" : \"\",\n+\t\t\t  rt, rn,\n+\t\t\t  (unsigned long) insn);\n \n   install_load_store (gdbarch, regs, dsc, load, immed, writeback, size,\n \t\t      usermode, rt, rm, rn);\n@@ -5870,11 +5831,10 @@ cleanup_block_load_all (struct gdbarch *gdbarch, struct regcache *regs,\n   /* We don't handle any stores here for now.  */\n   gdb_assert (dsc->u.block.load != 0);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: emulating block transfer: \"\n-\t\t\t\"%s %s %s\\n\", dsc->u.block.load ? \"ldm\" : \"stm\",\n-\t\t\tdsc->u.block.increment ? \"inc\" : \"dec\",\n-\t\t\tdsc->u.block.before ? \"before\" : \"after\");\n+  displaced_debug_printf (\"emulating block transfer: %s %s %s\",\n+\t\t\t  dsc->u.block.load ? \"ldm\" : \"stm\",\n+\t\t\t  dsc->u.block.increment ? \"inc\" : \"dec\",\n+\t\t\t  dsc->u.block.before ? \"before\" : \"after\");\n \n   while (regmask)\n     {\n@@ -5940,9 +5900,8 @@ cleanup_block_store_pc (struct gdbarch *gdbarch, struct regcache *regs,\n   stm_insn_addr = dsc->scratch_base;\n   offset = pc_val - stm_insn_addr;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: detected PC offset %.8lx for \"\n-\t\t\t\"STM instruction\\n\", offset);\n+  displaced_debug_printf (\"detected PC offset %.8lx for STM instruction\",\n+\t\t\t  offset);\n \n   /* Rewrite the stored PC to the proper value for the non-displaced original\n      instruction.  */\n@@ -5985,15 +5944,12 @@ cleanup_block_load_pc (struct gdbarch *gdbarch,\n \t    {\n \t      ULONGEST rval = displaced_read_reg (regs, dsc, read_reg);\n \t      displaced_write_reg (regs, dsc, write_reg, rval, LOAD_WRITE_PC);\n-\t      if (debug_displaced)\n-\t\tfprintf_unfiltered (gdb_stdlog, _(\"displaced: LDM: move \"\n-\t\t\t\t    \"loaded register r%d to r%d\\n\"), read_reg,\n-\t\t\t\t    write_reg);\n+\t      displaced_debug_printf (\"LDM: move loaded register r%d to r%d\",\n+\t\t\t\t      read_reg, write_reg);\n \t    }\n-\t  else if (debug_displaced)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"displaced: LDM: register \"\n-\t\t\t\t\"r%d already in the right place\\n\"),\n-\t\t\t\twrite_reg);\n+\t  else\n+\t    displaced_debug_printf (\"LDM: register r%d already in the right \"\n+\t\t\t\t    \"place\", write_reg);\n \n \t  clobbered &= ~(1 << write_reg);\n \n@@ -6010,9 +5966,8 @@ cleanup_block_load_pc (struct gdbarch *gdbarch,\n \t{\n \t  displaced_write_reg (regs, dsc, write_reg, dsc->tmp[write_reg],\n \t\t\t       CANNOT_WRITE_PC);\n-\t  if (debug_displaced)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"displaced: LDM: restored \"\n-\t\t\t\t\"clobbered register r%d\\n\"), write_reg);\n+\t  displaced_debug_printf (\"LDM: restored clobbered register r%d\",\n+\t\t\t\t  write_reg);\n \t  clobbered &= ~(1 << write_reg);\n \t}\n     }\n@@ -6059,9 +6014,8 @@ arm_copy_block_xfer (struct gdbarch *gdbarch, uint32_t insn,\n       return arm_copy_unmodified (gdbarch, insn, \"unpredictable ldm/stm\", dsc);\n     }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying block transfer insn \"\n-\t\t\t\"%.8lx\\n\", (unsigned long) insn);\n+  displaced_debug_printf (\"copying block transfer insn %.8lx\",\n+\t\t\t  (unsigned long) insn);\n \n   dsc->u.block.xfer_addr = displaced_read_reg (regs, dsc, rn);\n   dsc->u.block.rn = rn;\n@@ -6122,11 +6076,10 @@ arm_copy_block_xfer (struct gdbarch *gdbarch, uint32_t insn,\n \n \t  new_regmask = (1 << num_in_list) - 1;\n \n-\t  if (debug_displaced)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"displaced: LDM r%d%s, \"\n-\t\t\t\t\"{..., pc}: original reg list %.4x, modified \"\n-\t\t\t\t\"list %.4x\\n\"), rn, writeback ? \"!\" : \"\",\n-\t\t\t\t(int) insn & 0xffff, new_regmask);\n+\t  displaced_debug_printf (\"LDM r%d%s, {..., pc}: original reg list \"\n+\t\t\t\t  \"%.4x, modified list %.4x\",\n+\t\t\t\t  rn, writeback ? \"!\" : \"\",\n+\t\t\t\t  (int) insn & 0xffff, new_regmask);\n \n \t  dsc->modinsn[0] = (insn & ~0xffff) | (new_regmask & 0xffff);\n \n@@ -6171,9 +6124,8 @@ thumb2_copy_block_xfer (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n \t\t\t\t\t  \"unpredictable ldm/stm\", dsc);\n     }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying block transfer insn \"\n-\t\t\t\"%.4x%.4x\\n\", insn1, insn2);\n+  displaced_debug_printf (\"copying block transfer insn %.4x%.4x\",\n+\t\t\t  insn1, insn2);\n \n   /* Clear bit 13, since it should be always zero.  */\n   dsc->u.block.regmask = (insn2 & 0xdfff);\n@@ -6208,11 +6160,10 @@ thumb2_copy_block_xfer (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n \n \t  new_regmask = (1 << num_in_list) - 1;\n \n-\t  if (debug_displaced)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"displaced: LDM r%d%s, \"\n-\t\t\t\t\"{..., pc}: original reg list %.4x, modified \"\n-\t\t\t\t\"list %.4x\\n\"), rn, writeback ? \"!\" : \"\",\n-\t\t\t\t(int) dsc->u.block.regmask, new_regmask);\n+\t  displaced_debug_printf (\"LDM r%d%s, {..., pc}: original reg list \"\n+\t\t\t\t  \"%.4x, modified list %.4x\",\n+\t\t\t\t  rn, writeback ? \"!\" : \"\",\n+\t\t\t\t  (int) dsc->u.block.regmask, new_regmask);\n \n \t  dsc->modinsn[0] = insn1;\n \t  dsc->modinsn[1] = (new_regmask & 0xffff);\n@@ -6302,9 +6253,8 @@ cleanup_svc (struct gdbarch *gdbarch, struct regcache *regs,\n {\n   CORE_ADDR resume_addr = dsc->insn_addr + dsc->insn_size;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: cleanup for svc, resume at \"\n-\t\t\t\"%.8lx\\n\", (unsigned long) resume_addr);\n+  displaced_debug_printf (\"cleanup for svc, resume at %.8lx\",\n+\t\t\t  (unsigned long) resume_addr);\n \n   displaced_write_reg (regs, dsc, ARM_PC_REGNUM, resume_addr, BRANCH_WRITE_PC);\n }\n@@ -6339,9 +6289,8 @@ arm_copy_svc (struct gdbarch *gdbarch, uint32_t insn,\n \t      struct regcache *regs, arm_displaced_step_closure *dsc)\n {\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying svc insn %.8lx\\n\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying svc insn %.8lx\",\n+\t\t\t  (unsigned long) insn);\n \n   dsc->modinsn[0] = insn;\n \n@@ -6353,9 +6302,7 @@ thumb_copy_svc (struct gdbarch *gdbarch, uint16_t insn,\n \t\tstruct regcache *regs, arm_displaced_step_closure *dsc)\n {\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying svc insn %.4x\\n\",\n-\t\t\tinsn);\n+  displaced_debug_printf (\"copying svc insn %.4x\", insn);\n \n   dsc->modinsn[0] = insn;\n \n@@ -6368,10 +6315,8 @@ static int\n arm_copy_undef (struct gdbarch *gdbarch, uint32_t insn,\n \t\tarm_displaced_step_closure *dsc)\n {\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying undefined insn %.8lx\\n\",\n-\t\t\t(unsigned long) insn);\n+  displaced_debug_printf (\"copying undefined insn %.8lx\",\n+\t\t\t  (unsigned long) insn);\n \n   dsc->modinsn[0] = insn;\n \n@@ -6383,10 +6328,8 @@ thumb_32bit_copy_undef (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n                        arm_displaced_step_closure *dsc)\n {\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying undefined insn \"\n-                       \"%.4x %.4x\\n\", (unsigned short) insn1,\n-                       (unsigned short) insn2);\n+  displaced_debug_printf (\"copying undefined insn %.4x %.4x\",\n+\t\t\t  (unsigned short) insn1, (unsigned short) insn2);\n \n   dsc->modinsn[0] = insn1;\n   dsc->modinsn[1] = insn2;\n@@ -6401,9 +6344,8 @@ static int\n arm_copy_unpred (struct gdbarch *gdbarch, uint32_t insn,\n \t\t arm_displaced_step_closure *dsc)\n {\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying unpredictable insn \"\n-\t\t\t\"%.8lx\\n\", (unsigned long) insn);\n+  displaced_debug_printf (\"copying unpredictable insn %.8lx\",\n+\t\t\t  (unsigned long) insn);\n \n   dsc->modinsn[0] = insn;\n \n@@ -6975,10 +6917,8 @@ thumb_decode_pc_relative_16bit (struct gdbarch *gdbarch, uint16_t insn,\n   unsigned int rd = bits (insn, 8, 10);\n   unsigned int imm8 = bits (insn, 0, 7);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying thumb adr r%d, #%d insn %.4x\\n\",\n-\t\t\trd, imm8, insn);\n+  displaced_debug_printf (\"copying thumb adr r%d, #%d insn %.4x\",\n+\t\t\t  rd, imm8, insn);\n \n   return thumb_copy_pc_relative_16bit (gdbarch, regs, dsc, rd, imm8);\n }\n@@ -6996,10 +6936,8 @@ thumb_copy_pc_relative_32bit (struct gdbarch *gdbarch, uint16_t insn1,\n   unsigned int imm_3_8 = insn2 & 0x70ff;\n   unsigned int imm_i = insn1 & 0x0400; /* Clear all bits except bit 10.  */\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying thumb adr r%d, #%d:%d insn %.4x%.4x\\n\",\n-\t\t\trd, imm_i, imm_3_8, insn1, insn2);\n+  displaced_debug_printf (\"copying thumb adr r%d, #%d:%d insn %.4x%.4x\",\n+\t\t\t  rd, imm_i, imm_3_8, insn1, insn2);\n \n   if (bit (insn1, 7)) /* Encoding T2 */\n     {\n@@ -7038,10 +6976,7 @@ thumb_copy_16bit_ldr_literal (struct gdbarch *gdbarch, uint16_t insn1,\n      Insn: LDR R0, [R2, R3];\n      Cleanup: R2 <- tmp2, R3 <- tmp3, Rd <- R0, R0 <- tmp0 */\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying thumb ldr r%d [pc #%d]\\n\"\n-\t\t\t, rt, imm8);\n+  displaced_debug_printf (\"copying thumb ldr r%d [pc #%d]\", rt, imm8);\n \n   dsc->tmp[0] = displaced_read_reg (regs, dsc, 0);\n   dsc->tmp[2] = displaced_read_reg (regs, dsc, 2);\n@@ -7096,10 +7031,9 @@ thumb_copy_cbnz_cbz (struct gdbarch *gdbarch, uint16_t insn1,\n   dsc->u.branch.link = 0;\n   dsc->u.branch.exchange = 0;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copying %s [r%d = 0x%x]\"\n-\t\t\t\" insn %.4x to %.8lx\\n\", non_zero ? \"cbnz\" : \"cbz\",\n-\t\t\trn, rn_val, insn1, dsc->u.branch.dest);\n+  displaced_debug_printf (\"copying %s [r%d = 0x%x] insn %.4x to %.8lx\",\n+\t\t\t  non_zero ? \"cbnz\" : \"cbz\",\n+\t\t\t  rn, rn_val, insn1, dsc->u.branch.dest);\n \n   dsc->modinsn[0] = THUMB_NOP;\n \n@@ -7136,11 +7070,10 @@ thumb2_copy_table_branch (struct gdbarch *gdbarch, uint16_t insn1,\n       halfwords = extract_unsigned_integer (buf, 1, byte_order);\n     }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: %s base 0x%x offset 0x%x\"\n-\t\t\t\" offset 0x%x\\n\", is_tbh ? \"tbh\" : \"tbb\",\n-\t\t\t(unsigned int) rn_val, (unsigned int) rm_val,\n-\t\t\t(unsigned int) halfwords);\n+  displaced_debug_printf (\"%s base 0x%x offset 0x%x offset 0x%x\",\n+\t\t\t  is_tbh ? \"tbh\" : \"tbb\",\n+\t\t\t  (unsigned int) rn_val, (unsigned int) rm_val,\n+\t\t\t  (unsigned int) halfwords);\n \n   dsc->u.branch.cond = INST_AL;\n   dsc->u.branch.link = 0;\n@@ -7197,10 +7130,8 @@ thumb_copy_pop_pc_16bit (struct gdbarch *gdbarch, uint16_t insn1,\n      Cleanup: Set registers in original reglist from r0 - rN.  Restore r0 - rN\n      from tmp[] properly.\n   */\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: copying thumb pop {%.8x, pc} insn %.4x\\n\",\n-\t\t\tdsc->u.block.regmask, insn1);\n+  displaced_debug_printf (\"copying thumb pop {%.8x, pc} insn %.4x\",\n+\t\t\t  dsc->u.block.regmask, insn1);\n \n   if (dsc->u.block.regmask == 0xff)\n     {\n@@ -7224,11 +7155,9 @@ thumb_copy_pop_pc_16bit (struct gdbarch *gdbarch, uint16_t insn1,\n \n       new_regmask = (1 << (num_in_list + 1)) - 1;\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog, _(\"displaced: POP \"\n-\t\t\t\t\t  \"{..., pc}: original reg list %.4x,\"\n-\t\t\t\t\t  \" modified list %.4x\\n\"),\n-\t\t\t    (int) dsc->u.block.regmask, new_regmask);\n+      displaced_debug_printf (\"POP {..., pc}: original reg list %.4x, \"\n+\t\t\t      \"modified list %.4x\",\n+\t\t\t      (int) dsc->u.block.regmask, new_regmask);\n \n       dsc->u.block.regmask |= 0x8000;\n       dsc->u.block.writeback = 0;\n@@ -7562,9 +7491,8 @@ thumb_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n   uint16_t insn1\n     = read_memory_unsigned_integer (from, 2, byte_order_for_code);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: process thumb insn %.4x \"\n-\t\t\t\"at %.8lx\\n\", insn1, (unsigned long) from);\n+  displaced_debug_printf (\"process thumb insn %.4x at %.8lx\",\n+\t\t\t  insn1, (unsigned long) from);\n \n   dsc->is_thumb = 1;\n   dsc->insn_size = thumb_insn_size (insn1);\n@@ -7601,10 +7529,8 @@ arm_process_displaced_insn (struct gdbarch *gdbarch, CORE_ADDR from,\n   dsc->is_thumb = 0;\n   dsc->insn_size = 4;\n   insn = read_memory_unsigned_integer (from, 4, byte_order_for_code);\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: stepping insn %.8lx \"\n-\t\t\t\"at %.8lx\\n\", (unsigned long) insn,\n-\t\t\t(unsigned long) from);\n+  displaced_debug_printf (\"stepping insn %.8lx at %.8lx\",\n+\t\t\t  (unsigned long) insn, (unsigned long) from);\n \n   if ((insn & 0xf0000000) == 0xf0000000)\n     err = arm_decode_unconditional (gdbarch, insn, regs, dsc);\n@@ -7652,20 +7578,14 @@ arm_displaced_init_closure (struct gdbarch *gdbarch, CORE_ADDR from,\n   /* Poke modified instruction(s).  */\n   for (i = 0; i < dsc->numinsns; i++)\n     {\n-      if (debug_displaced)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"displaced: writing insn \");\n-\t  if (size == 4)\n-\t    fprintf_unfiltered (gdb_stdlog, \"%.8lx\",\n-\t\t\t\tdsc->modinsn[i]);\n-\t  else if (size == 2)\n-\t    fprintf_unfiltered (gdb_stdlog, \"%.4x\",\n-\t\t\t\t(unsigned short)dsc->modinsn[i]);\n-\n-\t  fprintf_unfiltered (gdb_stdlog, \" at %.8lx\\n\",\n-\t\t\t      (unsigned long) to + offset);\n+      if (size == 4)\n+\tdisplaced_debug_printf (\"writing insn %.8lx at %.8lx\",\n+\t\t\t\tdsc->modinsn[i], (unsigned long) to + offset);\n+      else if (size == 2)\n+\tdisplaced_debug_printf (\"writing insn %.4x at %.8lx\",\n+\t\t\t\t(unsigned short) dsc->modinsn[i],\n+\t\t\t\t(unsigned long) to + offset);\n \n-\t}\n       write_memory_unsigned_integer (to + offset, size,\n \t\t\t\t     byte_order_for_code,\n \t\t\t\t     dsc->modinsn[i]);\n@@ -7687,9 +7607,8 @@ arm_displaced_init_closure (struct gdbarch *gdbarch, CORE_ADDR from,\n   /* Put breakpoint afterwards.  */\n   write_memory (to + offset, bkp_insn, len);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: copy %s->%s: \",\n-\t\t\tpaddress (gdbarch, from), paddress (gdbarch, to));\n+  displaced_debug_printf (\"copy %s->%s\", paddress (gdbarch, from),\n+\t\t\t  paddress (gdbarch, to));\n }\n \n /* Entry point for cleaning things up after a displaced instruction has been"
    },
    {
      "sha": "e680e98c1c6cd659ac313f2e77a21a582817b2f1",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 20,
      "deletions": 42,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -825,12 +825,9 @@ i386_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \n   write_memory (to, buf, len);\n \n-  if (debug_displaced)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"displaced: copy %s->%s: \",\n-                          paddress (gdbarch, from), paddress (gdbarch, to));\n-      displaced_step_dump_bytes (gdb_stdlog, buf, len);\n-    }\n+  displaced_debug_printf (\"%s->%s: %s\",\n+                          paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n   return displaced_step_closure_up (closure.release ());\n@@ -859,12 +856,9 @@ i386_displaced_step_fixup (struct gdbarch *gdbarch,\n   /* The start of the insn, needed in case we see some prefixes.  */\n   gdb_byte *insn_start = insn;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-                        \"displaced: fixup (%s, %s), \"\n-                        \"insn = 0x%02x 0x%02x ...\\n\",\n-                        paddress (gdbarch, from), paddress (gdbarch, to),\n-\t\t\tinsn[0], insn[1]);\n+  displaced_debug_printf (\"fixup (%s, %s), insn = 0x%02x 0x%02x ...\",\n+\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  insn[0], insn[1]);\n \n   /* The list of issues to contend with here is taken from\n      resume_execution in arch/i386/kernel/kprobes.c, Linux 2.6.20.\n@@ -918,13 +912,8 @@ i386_displaced_step_fixup (struct gdbarch *gdbarch,\n \t     Presumably this is a kernel bug.\n \t     i386_displaced_step_copy_insn ensures its a nop,\n \t     we add one to the length for it.  */\n-          && orig_eip != to + (insn - insn_start) + insn_len + 1)\n-        {\n-          if (debug_displaced)\n-            fprintf_unfiltered (gdb_stdlog,\n-                                \"displaced: syscall changed %%eip; \"\n-                                \"not relocating\\n\");\n-        }\n+\t  && orig_eip != to + (insn - insn_start) + insn_len + 1)\n+\tdisplaced_debug_printf (\"syscall changed %%eip; not relocating\");\n       else\n         {\n           ULONGEST eip = (orig_eip - insn_offset) & 0xffffffffUL;\n@@ -935,12 +924,9 @@ i386_displaced_step_fixup (struct gdbarch *gdbarch,\n \n           regcache_cooked_write_unsigned (regs, I386_EIP_REGNUM, eip);\n \n-          if (debug_displaced)\n-            fprintf_unfiltered (gdb_stdlog,\n-                                \"displaced: \"\n-                                \"relocated %%eip from %s to %s\\n\",\n-                                paddress (gdbarch, orig_eip),\n-\t\t\t\tpaddress (gdbarch, eip));\n+\t  displaced_debug_printf (\"relocated %%eip from %s to %s\",\n+\t\t\t\t  paddress (gdbarch, orig_eip),\n+\t\t\t\t  paddress (gdbarch, eip));\n         }\n     }\n \n@@ -963,11 +949,9 @@ i386_displaced_step_fixup (struct gdbarch *gdbarch,\n       retaddr = (retaddr - insn_offset) & 0xffffffffUL;\n       write_memory_unsigned_integer (esp, retaddr_len, byte_order, retaddr);\n \n-      if (debug_displaced)\n-        fprintf_unfiltered (gdb_stdlog,\n-                            \"displaced: relocated return addr at %s to %s\\n\",\n-                            paddress (gdbarch, esp),\n-                            paddress (gdbarch, retaddr));\n+      displaced_debug_printf (\"relocated return addr at %s to %s\",\n+\t\t\t      paddress (gdbarch, esp),\n+\t\t\t      paddress (gdbarch, retaddr));\n     }\n }\n \n@@ -1019,12 +1003,9 @@ i386_relocate_instruction (struct gdbarch *gdbarch,\n       newrel = (oldloc - *to) + rel32;\n       store_signed_integer (insn + 1, 4, byte_order, newrel);\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"Adjusted insn rel32=%s at %s to\"\n-\t\t\t    \" rel32=%s at %s\\n\",\n-\t\t\t    hex_string (rel32), paddress (gdbarch, oldloc),\n-\t\t\t    hex_string (newrel), paddress (gdbarch, *to));\n+      displaced_debug_printf (\"adjusted insn rel32=%s at %s to rel32=%s at %s\",\n+\t\t\t      hex_string (rel32), paddress (gdbarch, oldloc),\n+\t\t\t      hex_string (newrel), paddress (gdbarch, *to));\n \n       /* Write the adjusted jump into its displaced location.  */\n       append_insns (to, 5, insn);\n@@ -1044,12 +1025,9 @@ i386_relocate_instruction (struct gdbarch *gdbarch,\n       rel32 = extract_signed_integer (insn + offset, 4, byte_order);\n       newrel = (oldloc - *to) + rel32;\n       store_signed_integer (insn + offset, 4, byte_order, newrel);\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"Adjusted insn rel32=%s at %s to\"\n-\t\t\t    \" rel32=%s at %s\\n\",\n-\t\t\t    hex_string (rel32), paddress (gdbarch, oldloc),\n-\t\t\t    hex_string (newrel), paddress (gdbarch, *to));\n+      displaced_debug_printf (\"adjusted insn rel32=%s at %s to rel32=%s at %s\",\n+\t\t\t      hex_string (rel32), paddress (gdbarch, oldloc),\n+\t\t\t      hex_string (newrel), paddress (gdbarch, *to));\n     }\n \n   /* Write the adjusted instructions into their displaced"
    },
    {
      "sha": "de2437fbac39e96c28600033c0c523e520ed2545",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 48,
      "deletions": 49,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -179,6 +179,16 @@ show_debug_infrun (struct ui_file *file, int from_tty,\n   fprintf_filtered (file, _(\"Inferior debugging is %s.\\n\"), value);\n }\n \n+/* See infrun.h.  */\n+\n+void\n+displaced_debug_printf_1 (const char *func_name, const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  debug_prefixed_vprintf (\"displaced\", func_name, fmt, ap);\n+  va_end (ap);\n+}\n \n /* Support for disabling address space randomization.  */\n \n@@ -1629,17 +1639,22 @@ displaced_step_reset (displaced_step_inferior_state *displaced)\n \n using displaced_step_reset_cleanup = FORWARD_SCOPE_EXIT (displaced_step_reset);\n \n-/* Dump LEN bytes at BUF in hex to FILE, followed by a newline.  */\n-void\n-displaced_step_dump_bytes (struct ui_file *file,\n-                           const gdb_byte *buf,\n-                           size_t len)\n+/* See infrun.h.  */\n+\n+std::string\n+displaced_step_dump_bytes (const gdb_byte *buf, size_t len)\n {\n-  int i;\n+  std::string ret;\n \n-  for (i = 0; i < len; i++)\n-    fprintf_unfiltered (file, \"%02x \", buf[i]);\n-  fputs_unfiltered (\"\\n\", file);\n+  for (size_t i = 0; i < len; i++)\n+    {\n+      if (i == 0)\n+\tret += string_printf (\"%02x\", buf[i]);\n+      else\n+\tret += string_printf (\" %02x\", buf[i]);\n+    }\n+\n+  return ret;\n }\n \n /* Prepare to single-step, using displaced stepping.\n@@ -1692,21 +1707,15 @@ displaced_step_prepare_throw (thread_info *tp)\n       /* Already waiting for a displaced step to finish.  Defer this\n \t request and place in queue.  */\n \n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"displaced: deferring step of %s\\n\",\n-\t\t\t    target_pid_to_str (tp->ptid).c_str ());\n+      displaced_debug_printf (\"deferring step of %s\",\n+\t\t\t      target_pid_to_str (tp->ptid).c_str ());\n \n       thread_step_over_chain_enqueue (tp);\n       return 0;\n     }\n   else\n-    {\n-      if (debug_displaced)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"displaced: stepping %s now\\n\",\n+    displaced_debug_printf (\"stepping %s now\",\n \t\t\t    target_pid_to_str (tp->ptid).c_str ());\n-    }\n \n   displaced_step_reset (displaced);\n \n@@ -1730,12 +1739,8 @@ displaced_step_prepare_throw (thread_info *tp)\n \t in the scratch pad range (after initial startup) anyway, but\n \t the former is unacceptable.  Simply punt and fallback to\n \t stepping over this breakpoint in-line.  */\n-      if (debug_displaced)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog,\n-\t\t\t      \"displaced: breakpoint set in scratch pad.  \"\n-\t\t\t      \"Stepping over breakpoint in-line instead.\\n\");\n-\t}\n+      displaced_debug_printf (\"breakpoint set in scratch pad.  \"\n+\t\t\t      \"Stepping over breakpoint in-line instead.\");\n \n       return -1;\n     }\n@@ -1748,14 +1753,11 @@ displaced_step_prepare_throw (thread_info *tp)\n \t\t _(\"Error accessing memory address %s (%s) for \"\n \t\t   \"displaced-stepping scratch space.\"),\n \t\t paddress (gdbarch, copy), safe_strerror (status));\n-  if (debug_displaced)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"displaced: saved %s: \",\n-\t\t\t  paddress (gdbarch, copy));\n-      displaced_step_dump_bytes (gdb_stdlog,\n-\t\t\t\t displaced->step_saved_copy.data (),\n-\t\t\t\t len);\n-    };\n+\n+  displaced_debug_printf (\"saved %s: %s\",\n+\t\t\t  paddress (gdbarch, copy),\n+\t\t\t  displaced_step_dump_bytes\n+\t\t\t    (displaced->step_saved_copy.data (), len).c_str ());\n \n   displaced->step_closure\n     = gdbarch_displaced_step_copy_insn (gdbarch, original, copy, regcache);\n@@ -1783,9 +1785,7 @@ displaced_step_prepare_throw (thread_info *tp)\n     cleanup.release ();\n   }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: displaced pc to %s\\n\",\n-\t\t\tpaddress (gdbarch, copy));\n+  displaced_debug_printf (\"displaced pc to %s\", paddress (gdbarch, copy));\n \n   return 1;\n }\n@@ -1850,11 +1850,11 @@ displaced_step_restore (struct displaced_step_inferior_state *displaced,\n \n   write_memory_ptid (ptid, displaced->step_copy,\n \t\t     displaced->step_saved_copy.data (), len);\n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog, \"displaced: restored %s %s\\n\",\n-\t\t\ttarget_pid_to_str (ptid).c_str (),\n-\t\t\tpaddress (displaced->step_gdbarch,\n-\t\t\t\t  displaced->step_copy));\n+\n+  displaced_debug_printf (\"restored %s %s\",\n+\t\t\t  target_pid_to_str (ptid).c_str (),\n+\t\t\t  paddress (displaced->step_gdbarch,\n+\t\t\t\t    displaced->step_copy));\n }\n \n /* If we displaced stepped an instruction successfully, adjust\n@@ -2593,10 +2593,11 @@ resume_1 (enum gdb_signal sig)\n       CORE_ADDR actual_pc = regcache_read_pc (resume_regcache);\n       gdb_byte buf[4];\n \n-      fprintf_unfiltered (gdb_stdlog, \"displaced: run %s: \",\n-\t\t\t  paddress (resume_gdbarch, actual_pc));\n       read_memory (actual_pc, buf, sizeof (buf));\n-      displaced_step_dump_bytes (gdb_stdlog, buf, sizeof (buf));\n+      displaced_debug_printf (\"run %s: %s\",\n+\t\t\t      paddress (resume_gdbarch, actual_pc),\n+\t\t\t      displaced_step_dump_bytes\n+\t\t\t\t(buf, sizeof (buf)).c_str ());\n     }\n \n   if (tp->control.may_range_step)\n@@ -5354,12 +5355,10 @@ handle_inferior_event (struct execution_control_state *ecs)\n \t    /* Read PC value of parent process.  */\n \t    parent_pc = regcache_read_pc (regcache);\n \n-\t    if (debug_displaced)\n-\t      fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t  \"displaced: write child pc from %s to %s\\n\",\n-\t\t\t\t  paddress (gdbarch,\n-\t\t\t\t\t    regcache_read_pc (child_regcache)),\n-\t\t\t\t  paddress (gdbarch, parent_pc));\n+\t    displaced_debug_printf (\"write child pc from %s to %s\",\n+\t\t\t\t    paddress (gdbarch,\n+\t\t\t\t\t      regcache_read_pc (child_regcache)),\n+\t\t\t\t    paddress (gdbarch, parent_pc));\n \n \t    regcache_write_pc (child_regcache, parent_pc);\n \t  }"
    },
    {
      "sha": "4fc1bf945889fef278bd55ec114383f43a96925c",
      "filename": "gdb/infrun.h",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/infrun.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/infrun.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.h?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -47,6 +47,19 @@ void ATTRIBUTE_PRINTF (2, 3) infrun_debug_printf_1\n /* True if we are debugging displaced stepping.  */\n extern bool debug_displaced;\n \n+/* Print a \"displaced\" debug statement.  Should be used through\n+   displaced_debug_printf.  */\n+void ATTRIBUTE_PRINTF (2, 3) displaced_debug_printf_1\n+  (const char *func_name, const char *fmt, ...);\n+\n+#define displaced_debug_printf(fmt, ...) \\\n+  do \\\n+    { \\\n+      if (debug_displaced) \\\n+\tdisplaced_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n+    } \\\n+  while (0)\n+\n /* Nonzero if we want to give control to the user when we're notified\n    of shared library events by the dynamic linker.  */\n extern int stop_on_solib_events;\n@@ -229,9 +242,8 @@ extern void update_signals_program_target (void);\n    $_exitsignal.  */\n extern void clear_exit_convenience_vars (void);\n \n-/* Dump LEN bytes at BUF in hex to FILE, followed by a newline.  */\n-extern void displaced_step_dump_bytes (struct ui_file *file,\n-\t\t\t\t       const gdb_byte *buf, size_t len);\n+/* Dump LEN bytes at BUF in hex to a string and return it.  */\n+extern std::string displaced_step_dump_bytes (const gdb_byte *buf, size_t len);\n \n extern struct displaced_step_closure *get_displaced_step_closure_by_addr\n     (CORE_ADDR addr);"
    },
    {
      "sha": "2d0efaf850d5b092019501b9e55ce1c353f1a4cd",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 13,
      "deletions": 28,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -874,25 +874,17 @@ ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n   /* Assume all atomic sequences start with a Load and Reserve instruction.  */\n   if (IS_LOAD_AND_RESERVE_INSN (insn))\n     {\n-      if (debug_displaced)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog,\n-\t\t\t      \"displaced: can't displaced step \"\n-\t\t\t      \"atomic sequence at %s\\n\",\n+      displaced_debug_printf (\"can't displaced step atomic sequence at %s\",\n \t\t\t      paddress (gdbarch, from));\n-\t}\n \n       return NULL;\n     }\n \n   write_memory (to, buf, len);\n \n-  if (debug_displaced)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"displaced: copy %s->%s: \",\n-                          paddress (gdbarch, from), paddress (gdbarch, to));\n-      displaced_step_dump_bytes (gdb_stdlog, buf, len);\n-    }\n+  displaced_debug_printf (\"copy %s->%s: %s\",\n+                          paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  displaced_step_dump_bytes (buf, len).c_str ());;\n \n   /* This is a work around for a problem with g++ 4.8.  */\n   return displaced_step_closure_up (closure.release ());\n@@ -917,11 +909,8 @@ ppc_displaced_step_fixup (struct gdbarch *gdbarch,\n \n   opcode = insn & BRANCH_MASK;\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: (ppc) fixup (%s, %s)\\n\",\n-\t\t\tpaddress (gdbarch, from), paddress (gdbarch, to));\n-\n+  displaced_debug_printf (\"(ppc) fixup (%s, %s)\",\n+\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to));\n \n   /* Handle PC-relative branch instructions.  */\n   if (opcode == B_INSN || opcode == BC_INSN || opcode == BXL_INSN)\n@@ -942,13 +931,11 @@ ppc_displaced_step_fixup (struct gdbarch *gdbarch,\n \t  if (!(insn & 0x2))\n \t    {\n \t      /* PC-relative addressing is being used in the branch.  */\n-\t      if (debug_displaced)\n-\t\tfprintf_unfiltered\n-\t\t  (gdb_stdlog,\n-\t\t   \"displaced: (ppc) branch instruction: %s\\n\"\n-\t\t   \"displaced: (ppc) adjusted PC from %s to %s\\n\",\n-\t\t   paddress (gdbarch, insn), paddress (gdbarch, current_pc),\n-\t\t   paddress (gdbarch, from + offset));\n+\t      displaced_debug_printf (\"(ppc) branch instruction: %s\",\n+\t\t\t\t      paddress (gdbarch, insn));\n+\t      displaced_debug_printf (\"(ppc) adjusted PC from %s to %s\",\n+\t\t\t\t      paddress (gdbarch, current_pc),\n+\t\t\t\t      paddress (gdbarch, from + offset));\n \n \t      regcache_cooked_write_unsigned (regs,\n \t\t\t\t\t      gdbarch_pc_regnum (gdbarch),\n@@ -975,10 +962,8 @@ ppc_displaced_step_fixup (struct gdbarch *gdbarch,\n \t  regcache_cooked_write_unsigned (regs,\n \t\t\t\t\t  gdbarch_tdep (gdbarch)->ppc_lr_regnum,\n \t\t\t\t\t  from + PPC_INSN_SIZE);\n-\t  if (debug_displaced)\n-\t\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t    \"displaced: (ppc) adjusted LR to %s\\n\",\n-\t\t\t\t    paddress (gdbarch, from + PPC_INSN_SIZE));\n+\t  displaced_debug_printf (\"(ppc) adjusted LR to %s\",\n+\t\t\t\t  paddress (gdbarch, from + PPC_INSN_SIZE));\n \n \t}\n     }"
    },
    {
      "sha": "ce013458e890d1b713a4c4d16e68f9a63d421621",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 10,
      "deletions": 22,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -454,13 +454,8 @@ s390_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t{\n \t  /* Let the core fall back to stepping over the breakpoint\n \t     in-line.  */\n-\t  if (debug_displaced)\n-\t    {\n-\t      fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t  \"displaced: can't displaced step \"\n-\t\t\t\t  \"RIL instruction: offset %s out of range\\n\",\n-\t\t\t\t  plongest (offset));\n-\t    }\n+\t  displaced_debug_printf (\"can't displaced step RIL instruction: offset \"\n+\t\t\t\t  \"%s out of range\", plongest (offset));\n \n \t  return NULL;\n \t}\n@@ -470,12 +465,9 @@ s390_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \n   write_memory (to, buf, len);\n \n-  if (debug_displaced)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"displaced: copy %s->%s: \",\n-\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to));\n-      displaced_step_dump_bytes (gdb_stdlog, buf, len);\n-    }\n+  displaced_debug_printf (\"copy %s->%s: %s\",\n+\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n   return displaced_step_closure_up (closure.release ());\n@@ -511,11 +503,9 @@ s390_displaced_step_fixup (struct gdbarch *gdbarch,\n       amode &= 0x80000000;\n     }\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: (s390) fixup (%s, %s) pc %s len %d amode 0x%x\\n\",\n-\t\t\tpaddress (gdbarch, from), paddress (gdbarch, to),\n-\t\t\tpaddress (gdbarch, pc), insnlen, (int) amode);\n+  displaced_debug_printf (\"(s390) fixup (%s, %s) pc %s len %d amode 0x%x\",\n+\t\t\t  paddress (gdbarch, from), paddress (gdbarch, to),\n+\t\t\t  paddress (gdbarch, pc), insnlen, (int) amode);\n \n   /* Handle absolute branch and save instructions.  */\n   int op_basr_p = is_rr (insn, op_basr, &r1, &r2);\n@@ -578,10 +568,8 @@ s390_displaced_step_fixup (struct gdbarch *gdbarch,\n   else\n     regcache_write_pc (regs, pc - to + from);\n \n-  if (debug_displaced)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"displaced: (s390) pc is now %s\\n\",\n-\t\t\tpaddress (gdbarch, regcache_read_pc (regs)));\n+  displaced_debug_printf (\"(s390) pc is now %s\",\n+\t\t\t  paddress (gdbarch, regcache_read_pc (regs)));\n }\n \n /* Implement displaced_step_hw_singlestep gdbarch method.  */"
    },
    {
      "sha": "3ed7d4f33e882b1510f5ae308591efd844a3615c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-30  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.arch/amd64-disp-step-avx.exp: Update displaced step debug\n+\texpected output.\n+\n 2020-10-30  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.base/paginate-after-ctrl-c-running.exp: Update with no pagination"
    },
    {
      "sha": "5dd827a40ae5da45fc3abd5225f7b6eb173e266a",
      "filename": "gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/136821d9f6fdb7f457500d154166a1b4b41a0d1b/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp?ref=136821d9f6fdb7f457500d154166a1b4b41a0d1b",
      "patch": "@@ -97,7 +97,7 @@ proc disp_step_func { func } {\n     gdb_test_no_output \"set debug displaced on\"\n \n     gdb_test \"continue\" \\\n-\t\"Continuing.*displaced: displaced pc to.*Breakpoint.*, ${test_end_label} ().*\" \\\n+\t\"Continuing.*displaced pc to.*Breakpoint.*, ${test_end_label} ().*\" \\\n \t\"continue to ${test_end_label}\"\n \n     gdb_test_no_output \"set debug displaced off\""
    }
  ]
}