{
  "sha": "6fc590e1f5e43a7ea7d466c18ebb97515baa497f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmZjNTkwZTFmNWU0M2E3ZWE3ZDQ2NmMxOGViYjk3NTE1YmFhNDk3Zg==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-08-30T18:08:38Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-08-30T18:08:38Z"
    },
    "message": "fbsd-nat: Don't use '%jd' and '%ju' with printf_filtered.\n\nThe handler for 'info proc status' for native processes on FreeBSD\nuses the 'j' size modifier along with uintmax_t / intmax_t casts to\noutput integer values for types such as off_t that are not aliases of\na basic C type such as 'int' or 'long'.  printf_filtered does not\nsupport the 'j' modifer, so this resulted in runtime errors in\npractice:\n\n(gdb) info proc stat\nprocess 8674\nName: ls\nState: T (stopped)\nParent process: 8673\nProcess group: 8674\nSession id: 2779\nUnrecognized format specifier 'j' in printf\n\nInstead, use plongest and pulongest to generate the output strings of\nthese integer values.",
    "tree": {
      "sha": "52654cfeddfe73f5f58803802a6f702a67838d6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/52654cfeddfe73f5f58803802a6f702a67838d6f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6fc590e1f5e43a7ea7d466c18ebb97515baa497f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fc590e1f5e43a7ea7d466c18ebb97515baa497f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6fc590e1f5e43a7ea7d466c18ebb97515baa497f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fc590e1f5e43a7ea7d466c18ebb97515baa497f/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "00894ecf4636a242fbd11536acdf50f7891b374a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00894ecf4636a242fbd11536acdf50f7891b374a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/00894ecf4636a242fbd11536acdf50f7891b374a"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 23,
    "deletions": 22
  },
  "files": [
    {
      "sha": "e0ab3f0234d874dfd5d7ac83bbae74d7a5bcc940",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 23,
      "deletions": 22,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6fc590e1f5e43a7ea7d466c18ebb97515baa497f/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6fc590e1f5e43a7ea7d466c18ebb97515baa497f/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=6fc590e1f5e43a7ea7d466c18ebb97515baa497f",
      "patch": "@@ -365,7 +365,7 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n \t  printf_filtered (\"Parent process: %d\\n\", kp.ki_ppid);\n \t  printf_filtered (\"Process group: %d\\n\", kp.ki_pgid);\n \t  printf_filtered (\"Session id: %d\\n\", kp.ki_sid);\n-\t  printf_filtered (\"TTY: %ju\\n\", (uintmax_t) kp.ki_tdev);\n+\t  printf_filtered (\"TTY: %s\\n\", pulongest (kp.ki_tdev));\n \t  printf_filtered (\"TTY owner process group: %d\\n\", kp.ki_tpgid);\n \t  printf_filtered (\"User IDs (real, effective, saved): %d %d %d\\n\",\n \t\t\t   kp.ki_ruid, kp.ki_uid, kp.ki_svuid);\n@@ -383,34 +383,35 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n \t\t\t   kp.ki_rusage.ru_majflt);\n \t  printf_filtered (\"Major faults, children: %ld\\n\",\n \t\t\t   kp.ki_rusage_ch.ru_majflt);\n-\t  printf_filtered (\"utime: %jd.%06ld\\n\",\n-\t\t\t   (intmax_t) kp.ki_rusage.ru_utime.tv_sec,\n+\t  printf_filtered (\"utime: %s.%06ld\\n\",\n+\t\t\t   plongest (kp.ki_rusage.ru_utime.tv_sec),\n \t\t\t   kp.ki_rusage.ru_utime.tv_usec);\n-\t  printf_filtered (\"stime: %jd.%06ld\\n\",\n-\t\t\t   (intmax_t) kp.ki_rusage.ru_stime.tv_sec,\n+\t  printf_filtered (\"stime: %s.%06ld\\n\",\n+\t\t\t   plongest (kp.ki_rusage.ru_stime.tv_sec),\n \t\t\t   kp.ki_rusage.ru_stime.tv_usec);\n-\t  printf_filtered (\"utime, children: %jd.%06ld\\n\",\n-\t\t\t   (intmax_t) kp.ki_rusage_ch.ru_utime.tv_sec,\n+\t  printf_filtered (\"utime, children: %s.%06ld\\n\",\n+\t\t\t   plongest (kp.ki_rusage_ch.ru_utime.tv_sec),\n \t\t\t   kp.ki_rusage_ch.ru_utime.tv_usec);\n-\t  printf_filtered (\"stime, children: %jd.%06ld\\n\",\n-\t\t\t   (intmax_t) kp.ki_rusage_ch.ru_stime.tv_sec,\n+\t  printf_filtered (\"stime, children: %s.%06ld\\n\",\n+\t\t\t   plongest (kp.ki_rusage_ch.ru_stime.tv_sec),\n \t\t\t   kp.ki_rusage_ch.ru_stime.tv_usec);\n \t  printf_filtered (\"'nice' value: %d\\n\", kp.ki_nice);\n-\t  printf_filtered (\"Start time: %jd.%06ld\\n\", kp.ki_start.tv_sec,\n+\t  printf_filtered (\"Start time: %s.%06ld\\n\",\n+\t\t\t   plongest (kp.ki_start.tv_sec),\n \t\t\t   kp.ki_start.tv_usec);\n \t  pgtok = getpagesize () / 1024;\n-\t  printf_filtered (\"Virtual memory size: %ju kB\\n\",\n-\t\t\t   (uintmax_t) kp.ki_size / 1024);\n-\t  printf_filtered (\"Data size: %ju kB\\n\",\n-\t\t\t   (uintmax_t) kp.ki_dsize * pgtok);\n-\t  printf_filtered (\"Stack size: %ju kB\\n\",\n-\t\t\t   (uintmax_t) kp.ki_ssize * pgtok);\n-\t  printf_filtered (\"Text size: %ju kB\\n\",\n-\t\t\t   (uintmax_t) kp.ki_tsize * pgtok);\n-\t  printf_filtered (\"Resident set size: %ju kB\\n\",\n-\t\t\t   (uintmax_t) kp.ki_rssize * pgtok);\n-\t  printf_filtered (\"Maximum RSS: %ju kB\\n\",\n-\t\t\t   (uintmax_t) kp.ki_rusage.ru_maxrss);\n+\t  printf_filtered (\"Virtual memory size: %s kB\\n\",\n+\t\t\t   pulongest (kp.ki_size / 1024));\n+\t  printf_filtered (\"Data size: %s kB\\n\",\n+\t\t\t   pulongest (kp.ki_dsize * pgtok));\n+\t  printf_filtered (\"Stack size: %s kB\\n\",\n+\t\t\t   pulongest (kp.ki_ssize * pgtok));\n+\t  printf_filtered (\"Text size: %s kB\\n\",\n+\t\t\t   pulongest (kp.ki_tsize * pgtok));\n+\t  printf_filtered (\"Resident set size: %s kB\\n\",\n+\t\t\t   pulongest (kp.ki_rssize * pgtok));\n+\t  printf_filtered (\"Maximum RSS: %s kB\\n\",\n+\t\t\t   pulongest (kp.ki_rusage.ru_maxrss));\n \t  printf_filtered (\"Pending Signals: \");\n \t  for (int i = 0; i < _SIG_WORDS; i++)\n \t    printf_filtered (\"%08x \", kp.ki_siglist.__bits[i]);"
    }
  ]
}