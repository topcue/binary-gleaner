{
  "sha": "8e3685bf250d9ecda5058912d6624e77d7a2b07e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGUzNjg1YmYyNTBkOWVjZGE1MDU4OTEyZDY2MjRlNzdkN2EyYjA3ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-22T16:11:25Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-28T08:56:20Z"
    },
    "message": "gdb: delay python initialisation until gdbpy_finish_initialization\n\nDelay Python initialisation until gdbpy_finish_initialization.\n\nThis is mostly about splitting the existing gdbpy_initialize_*\nfunctions in two, all the calls to register_objfile_data_with_cleanup,\ngdbarch_data_register_post_init, etc are moved into new _initialize_*\nfunctions, but everything else is left in the gdbpy_initialize_*\nfunctions.\n\nThen the call to do_start_initialization (in python/python.c) is moved\nfrom the _initialize_python function into gdbpy_finish_initialization.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* python/py-arch.c (_initialize_py_arch): New function.\n\t(gdbpy_initialize_arch): Move code to _initialize_py_arch.\n\t* python/py-block.c (_initialize_py_block): New function.\n\t(gdbpy_initialize_blocks): Move code to _initialize_py_block.\n\t* python/py-inferior.c (_initialize_py_inferior): New function.\n\t(gdbpy_initialize_inferior): Move code to _initialize_py_inferior.\n\t* python/py-objfile.c (_initialize_py_objfile): New function.\n\t(gdbpy_initialize_objfile): Move code to _initialize_py_objfile.\n\t* python/py-progspace.c (_initialize_py_progspace): New function.\n\t(gdbpy_initialize_pspace): Move code to _initialize_py_progspace.\n\t* python/py-registers.c (_initialize_py_registers): New function.\n\t(gdbpy_initialize_registers): Move code to\n\t_initialize_py_registers.\n\t* python/py-symbol.c (_initialize_py_symbol): New function.\n\t(gdbpy_initialize_symbols): Move code to _initialize_py_symbol.\n\t* python/py-symtab.c (_initialize_py_symtab): New function.\n\t(gdbpy_initialize_symtabs): Move code to _initialize_py_symtab.\n\t* python/py-type.c (_initialize_py_type): New function.\n\t(gdbpy_initialize_types): Move code to _initialize_py_type.\n\t* python/py-unwind.c (_initialize_py_unwind): New function.\n\t(gdbpy_initialize_unwind): Move code to _initialize_py_unwind.\n\t* python/python.c (_initialize_python): Move call to\n\tdo_start_initialization to gdbpy_finish_initialization.\n\t(gdbpy_finish_initialization): Add call to\n\tdo_start_initialization.",
    "tree": {
      "sha": "558ae8b08940df7cd7754f42051319591900c249",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/558ae8b08940df7cd7754f42051319591900c249"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e3685bf250d9ecda5058912d6624e77d7a2b07e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e3685bf250d9ecda5058912d6624e77d7a2b07e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e3685bf250d9ecda5058912d6624e77d7a2b07e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e3685bf250d9ecda5058912d6624e77d7a2b07e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "913832e99c5a1576663e52a4929b13bb263bd692",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/913832e99c5a1576663e52a4929b13bb263bd692",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/913832e99c5a1576663e52a4929b13bb263bd692"
    }
  ],
  "stats": {
    "total": 173,
    "additions": 125,
    "deletions": 48
  },
  "files": [
    {
      "sha": "c3156a8d07350f6aca760378f590da8e6d42c0cd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -1,3 +1,31 @@\n+2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-arch.c (_initialize_py_arch): New function.\n+\t(gdbpy_initialize_arch): Move code to _initialize_py_arch.\n+\t* python/py-block.c (_initialize_py_block): New function.\n+\t(gdbpy_initialize_blocks): Move code to _initialize_py_block.\n+\t* python/py-inferior.c (_initialize_py_inferior): New function.\n+\t(gdbpy_initialize_inferior): Move code to _initialize_py_inferior.\n+\t* python/py-objfile.c (_initialize_py_objfile): New function.\n+\t(gdbpy_initialize_objfile): Move code to _initialize_py_objfile.\n+\t* python/py-progspace.c (_initialize_py_progspace): New function.\n+\t(gdbpy_initialize_pspace): Move code to _initialize_py_progspace.\n+\t* python/py-registers.c (_initialize_py_registers): New function.\n+\t(gdbpy_initialize_registers): Move code to\n+\t_initialize_py_registers.\n+\t* python/py-symbol.c (_initialize_py_symbol): New function.\n+\t(gdbpy_initialize_symbols): Move code to _initialize_py_symbol.\n+\t* python/py-symtab.c (_initialize_py_symtab): New function.\n+\t(gdbpy_initialize_symtabs): Move code to _initialize_py_symtab.\n+\t* python/py-type.c (_initialize_py_type): New function.\n+\t(gdbpy_initialize_types): Move code to _initialize_py_type.\n+\t* python/py-unwind.c (_initialize_py_unwind): New function.\n+\t(gdbpy_initialize_unwind): Move code to _initialize_py_unwind.\n+\t* python/python.c (_initialize_python): Move call to\n+\tdo_start_initialization to gdbpy_finish_initialization.\n+\t(gdbpy_finish_initialization): Add call to\n+\tdo_start_initialization.\n+\n 2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* extension.c (struct scoped_default_signal): New struct."
    },
    {
      "sha": "66f2d28b94a5d5bfb28dd2fb006b207f53014891",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -271,12 +271,18 @@ archpy_register_groups (PyObject *self, PyObject *args)\n   return gdbpy_new_reggroup_iterator (gdbarch);\n }\n \n+void _initialize_py_arch ();\n+void\n+_initialize_py_arch ()\n+{\n+  arch_object_data = gdbarch_data_register_post_init (arch_object_data_init);\n+}\n+\n /* Initializes the Architecture class in the gdb module.  */\n \n int\n gdbpy_initialize_arch (void)\n {\n-  arch_object_data = gdbarch_data_register_post_init (arch_object_data_init);\n   arch_object_type.tp_new = PyType_GenericNew;\n   if (PyType_Ready (&arch_object_type) < 0)\n     return -1;"
    },
    {
      "sha": "244ff9a6bab6bcb1baf7038330431bfa6734b643",
      "filename": "gdb/python/py-block.c",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-block.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -427,6 +427,17 @@ del_objfile_blocks (struct objfile *objfile, void *datum)\n     }\n }\n \n+void _initialize_py_block ();\n+void\n+_initialize_py_block ()\n+{\n+  /* Register an objfile \"free\" callback so we can properly\n+     invalidate blocks when an object file is about to be\n+     deleted.  */\n+  blpy_objfile_data_key\n+    = register_objfile_data_with_cleanup (NULL, del_objfile_blocks);\n+}\n+\n int\n gdbpy_initialize_blocks (void)\n {\n@@ -438,12 +449,6 @@ gdbpy_initialize_blocks (void)\n   if (PyType_Ready (&block_syms_iterator_object_type) < 0)\n     return -1;\n \n-  /* Register an objfile \"free\" callback so we can properly\n-     invalidate blocks when an object file is about to be\n-     deleted.  */\n-  blpy_objfile_data_key\n-    = register_objfile_data_with_cleanup (NULL, del_objfile_blocks);\n-\n   if (gdb_pymodule_addobject (gdb_module, \"Block\",\n \t\t\t      (PyObject *) &block_object_type) < 0)\n     return -1;"
    },
    {
      "sha": "94c2c2329e9ae83bf000002c215b936cfef5cd2d",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -892,6 +892,14 @@ gdbpy_selected_inferior (PyObject *self, PyObject *args)\n \t  inferior_to_inferior_object (current_inferior ()).release ());\n }\n \n+void _initialize_py_inferior ();\n+void\n+_initialize_py_inferior ()\n+{\n+  infpy_inf_data_key =\n+    register_inferior_data_with_cleanup (NULL, py_free_inferior);\n+}\n+\n int\n gdbpy_initialize_inferior (void)\n {\n@@ -902,9 +910,6 @@ gdbpy_initialize_inferior (void)\n \t\t\t      (PyObject *) &inferior_object_type) < 0)\n     return -1;\n \n-  infpy_inf_data_key =\n-    register_inferior_data_with_cleanup (NULL, py_free_inferior);\n-\n   gdb::observers::new_thread.attach (add_thread_object, \"py-inferior\");\n   gdb::observers::thread_exit.attach (delete_thread_object, \"py-inferior\");\n   gdb::observers::normal_stop.attach (python_on_normal_stop, \"py-inferior\");"
    },
    {
      "sha": "626f2d3e18c4d1c3313871b0edb8fc072ab50dcc",
      "filename": "gdb/python/py-objfile.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-objfile.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -693,12 +693,17 @@ objfile_to_objfile_object (struct objfile *objfile)\n   return gdbpy_ref<>::new_reference (result);\n }\n \n-int\n-gdbpy_initialize_objfile (void)\n+void _initialize_py_objfile ();\n+void\n+_initialize_py_objfile ()\n {\n   objfpy_objfile_data_key\n     = register_objfile_data_with_cleanup (NULL, py_free_objfile);\n+}\n \n+int\n+gdbpy_initialize_objfile (void)\n+{\n   if (PyType_Ready (&objfile_object_type) < 0)\n     return -1;\n "
    },
    {
      "sha": "d8df9c31d804cb4ea6c649baec573191790ad659",
      "filename": "gdb/python/py-progspace.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-progspace.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -504,12 +504,17 @@ pspace_to_pspace_object (struct program_space *pspace)\n   return gdbpy_ref<>::new_reference (result);\n }\n \n-int\n-gdbpy_initialize_pspace (void)\n+void _initialize_py_progspace ();\n+void\n+_initialize_py_progspace ()\n {\n   pspy_pspace_data_key\n     = register_program_space_data_with_cleanup (NULL, py_free_pspace);\n+}\n \n+int\n+gdbpy_initialize_pspace (void)\n+{\n   if (PyType_Ready (&pspace_object_type) < 0)\n     return -1;\n "
    },
    {
      "sha": "04e554f48e111c5006ac1d91bc63cf06d861ba31",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -423,14 +423,19 @@ gdbpy_parse_register_id (struct gdbarch *gdbarch, PyObject *pyo_reg_id,\n   return false;\n }\n \n+void _initialize_py_registers ();\n+void\n+_initialize_py_registers ()\n+{\n+  gdbpy_register_object_data\n+    = gdbarch_data_register_post_init (gdbpy_register_object_data_init);\n+}\n+\n /* Initializes the new Python classes from this file in the gdb module.  */\n \n int\n gdbpy_initialize_registers ()\n {\n-  gdbpy_register_object_data\n-    = gdbarch_data_register_post_init (gdbpy_register_object_data_init);\n-\n   register_descriptor_object_type.tp_new = PyType_GenericNew;\n   if (PyType_Ready (&register_descriptor_object_type) < 0)\n     return -1;"
    },
    {
      "sha": "8953ee097ccba1bfd3c5692337b7f46c0070587d",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -619,17 +619,22 @@ del_objfile_symbols (struct objfile *objfile, void *datum)\n     }\n }\n \n-int\n-gdbpy_initialize_symbols (void)\n+void _initialize_py_symbol ();\n+void\n+_initialize_py_symbol ()\n {\n-  if (PyType_Ready (&symbol_object_type) < 0)\n-    return -1;\n-\n   /* Register an objfile \"free\" callback so we can properly\n      invalidate symbol when an object file that is about to be\n      deleted.  */\n   sympy_objfile_data_key\n     = register_objfile_data_with_cleanup (NULL, del_objfile_symbols);\n+}\n+\n+int\n+gdbpy_initialize_symbols (void)\n+{\n+  if (PyType_Ready (&symbol_object_type) < 0)\n+    return -1;\n \n   if (PyModule_AddIntConstant (gdb_module, \"SYMBOL_LOC_UNDEF\", LOC_UNDEF) < 0\n       || PyModule_AddIntConstant (gdb_module, \"SYMBOL_LOC_CONST\","
    },
    {
      "sha": "e9013731c4bdfa3f895855bc73c67f7136c8603e",
      "filename": "gdb/python/py-symtab.c",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symtab.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -511,6 +511,20 @@ del_objfile_sal (struct objfile *objfile, void *datum)\n     }\n }\n \n+void _initialize_py_symtab ();\n+void\n+_initialize_py_symtab ()\n+{\n+  /* Register an objfile \"free\" callback so we can properly\n+     invalidate symbol tables, and symbol table and line data\n+     structures when an object file that is about to be\n+     deleted.  */\n+  stpy_objfile_data_key\n+    = register_objfile_data_with_cleanup (NULL, del_objfile_symtab);\n+  salpy_objfile_data_key\n+    = register_objfile_data_with_cleanup (NULL, del_objfile_sal);\n+}\n+\n int\n gdbpy_initialize_symtabs (void)\n {\n@@ -522,15 +536,6 @@ gdbpy_initialize_symtabs (void)\n   if (PyType_Ready (&sal_object_type) < 0)\n     return -1;\n \n-  /* Register an objfile \"free\" callback so we can properly\n-     invalidate symbol tables, and symbol table and line data\n-     structures when an object file that is about to be\n-     deleted.  */\n-  stpy_objfile_data_key\n-    = register_objfile_data_with_cleanup (NULL, del_objfile_symtab);\n-  salpy_objfile_data_key\n-    = register_objfile_data_with_cleanup (NULL, del_objfile_sal);\n-\n   if (gdb_pymodule_addobject (gdb_module, \"Symtab\",\n \t\t\t      (PyObject *) &symtab_object_type) < 0)\n     return -1;"
    },
    {
      "sha": "4f5f42529c27352eb92ff93024957d12c3c761a7",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -1424,14 +1424,19 @@ gdbpy_lookup_type (PyObject *self, PyObject *args, PyObject *kw)\n   return type_to_type_object (type);\n }\n \n+void _initialize_py_type ();\n+void\n+_initialize_py_type ()\n+{\n+  typy_objfile_data_key\n+    = register_objfile_data_with_cleanup (save_objfile_types, NULL);\n+}\n+\n int\n gdbpy_initialize_types (void)\n {\n   int i;\n \n-  typy_objfile_data_key\n-    = register_objfile_data_with_cleanup (save_objfile_types, NULL);\n-\n   if (PyType_Ready (&type_object_type) < 0)\n     return -1;\n   if (PyType_Ready (&field_object_type) < 0)"
    },
    {
      "sha": "4b25c485b8c14d164e90e150330339ef2506462f",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -614,12 +614,10 @@ pyuw_on_new_gdbarch (struct gdbarch *newarch)\n     }\n }\n \n-/* Initialize unwind machinery.  */\n-\n-int\n-gdbpy_initialize_unwind (void)\n+void _initialize_py_unwind ();\n+void\n+_initialize_py_unwind ()\n {\n-  int rc;\n   add_setshow_zuinteger_cmd\n       (\"py-unwind\", class_maintenance, &pyuw_debug,\n \t_(\"Set Python unwinder debugging.\"),\n@@ -629,15 +627,22 @@ gdbpy_initialize_unwind (void)\n \tNULL,\n \t&setdebuglist, &showdebuglist);\n   pyuw_gdbarch_data\n-      = gdbarch_data_register_post_init (pyuw_gdbarch_data_init);\n+    = gdbarch_data_register_post_init (pyuw_gdbarch_data_init);\n+}\n+\n+/* Initialize unwind machinery.  */\n+\n+int\n+gdbpy_initialize_unwind (void)\n+{\n   gdb::observers::architecture_changed.attach (pyuw_on_new_gdbarch,\n \t\t\t\t\t       \"py-unwind\");\n \n   if (PyType_Ready (&pending_frame_object_type) < 0)\n     return -1;\n-  rc = gdb_pymodule_addobject (gdb_module, \"PendingFrame\",\n-      (PyObject *) &pending_frame_object_type);\n-  if (rc)\n+  int rc = gdb_pymodule_addobject (gdb_module, \"PendingFrame\",\n+\t\t\t\t   (PyObject *) &pending_frame_object_type);\n+  if (rc != 0)\n     return rc;\n \n   if (PyType_Ready (&unwind_info_object_type) < 0)"
    },
    {
      "sha": "520508043bab1b18ebafb994668e989e39ccda54",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e3685bf250d9ecda5058912d6624e77d7a2b07e/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "patch": "@@ -1881,11 +1881,6 @@ message == an error message without a stack will be printed.\"),\n \t\t\tNULL, NULL,\n \t\t\t&user_set_python_list,\n \t\t\t&user_show_python_list);\n-\n-#ifdef HAVE_PYTHON\n-  if (!do_start_initialization () && PyErr_Occurred ())\n-    gdbpy_print_stack ();\n-#endif /* HAVE_PYTHON */\n }\n \n #ifdef HAVE_PYTHON\n@@ -1962,6 +1957,9 @@ do_finish_initialization (const struct extension_language_defn *extlang)\n static void\n gdbpy_finish_initialization (const struct extension_language_defn *extlang)\n {\n+  if (!do_start_initialization () && PyErr_Occurred ())\n+    gdbpy_print_stack ();\n+\n   gdbpy_enter enter_py (get_current_arch (), current_language);\n \n   if (!do_finish_initialization (extlang))"
    }
  ]
}