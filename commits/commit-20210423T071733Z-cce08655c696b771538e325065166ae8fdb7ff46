{
  "sha": "cce08655c696b771538e325065166ae8fdb7ff46",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2NlMDg2NTVjNjk2Yjc3MTUzOGUzMjUwNjUxNjZhZThmZGI3ZmY0Ng==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:17:33Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:17:33Z"
    },
    "message": "x86-64: defer 32-bit signed displacement check\n\nIn preparation for extending the conditions here defer this check until\noperands have been parsed, as certain further attributes will need to\nbe known for determinig applicability of this check to be correct to\nLEA.",
    "tree": {
      "sha": "dd00d464f199498ce5545ae734299037a7c5a71b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dd00d464f199498ce5545ae734299037a7c5a71b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cce08655c696b771538e325065166ae8fdb7ff46",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cce08655c696b771538e325065166ae8fdb7ff46",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cce08655c696b771538e325065166ae8fdb7ff46",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cce08655c696b771538e325065166ae8fdb7ff46/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "28a167a40651c4b50ef00c5fb92383b96390bfec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28a167a40651c4b50ef00c5fb92383b96390bfec",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/28a167a40651c4b50ef00c5fb92383b96390bfec"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 34,
    "deletions": 19
  },
  "files": [
    {
      "sha": "aeacaa6b0fb34e72f504b39147e9428dda7fa02c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cce08655c696b771538e325065166ae8fdb7ff46/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cce08655c696b771538e325065166ae8fdb7ff46/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=cce08655c696b771538e325065166ae8fdb7ff46",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-23  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (i386_finalize_displacement): Move Disp32S\n+\tcheck ...\n+\t(md_assemble): ... here.\n+\n 2021-04-23  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (optimize_disp): Move down BFD64 section."
    },
    {
      "sha": "8098f5045f941313746a5fd11bbdf16cb00451f0",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 28,
      "deletions": 19,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cce08655c696b771538e325065166ae8fdb7ff46/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cce08655c696b771538e325065166ae8fdb7ff46/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=cce08655c696b771538e325065166ae8fdb7ff46",
      "patch": "@@ -4740,6 +4740,34 @@ md_assemble (char *line)\n   if (i.imm_operands)\n     optimize_imm ();\n \n+  if (i.disp_operands && flag_code == CODE_64BIT && !i.prefix[ADDR_PREFIX])\n+    {\n+      for (j = 0; j < i.operands; ++j)\n+\t{\n+\t  const expressionS *exp = i.op[j].disps;\n+\n+\t  if (!operand_type_check (i.types[j], disp))\n+\t    continue;\n+\n+\t  if (exp->X_op != O_constant)\n+\t    continue;\n+\n+\t  /* Since displacement is signed extended to 64bit, don't allow\n+\t     disp32 and turn off disp32s if they are out of range.  */\n+\t  i.types[j].bitfield.disp32 = 0;\n+\t  if (fits_in_signed_long (exp->X_add_number))\n+\t    continue;\n+\n+\t  i.types[j].bitfield.disp32s = 0;\n+\t  if (i.types[j].bitfield.baseindex)\n+\t    {\n+\t      as_bad (_(\"0x%\" BFD_VMA_FMT \"x out of range of signed 32bit displacement\"),\n+\t\t      exp->X_add_number);\n+\t      return;\n+\t    }\n+\t}\n+    }\n+\n   /* Don't optimize displacement for movabs since it only takes 64bit\n      displacement.  */\n   if (i.disp_operands\n@@ -10912,25 +10940,6 @@ i386_finalize_displacement (segT exp_seg ATTRIBUTE_UNUSED, expressionS *exp,\n       ret = 0;\n     }\n \n-  else if (flag_code == CODE_64BIT\n-\t   && !i.prefix[ADDR_PREFIX]\n-\t   && exp->X_op == O_constant)\n-    {\n-      /* Since displacement is signed extended to 64bit, don't allow\n-\t disp32 and turn off disp32s if they are out of range.  */\n-      i.types[this_operand].bitfield.disp32 = 0;\n-      if (!fits_in_signed_long (exp->X_add_number))\n-\t{\n-\t  i.types[this_operand].bitfield.disp32s = 0;\n-\t  if (i.types[this_operand].bitfield.baseindex)\n-\t    {\n-\t      as_bad (_(\"0x%\" BFD_VMA_FMT \"x out of range of signed 32bit displacement\"),\n-\t\t      exp->X_add_number);\n-\t      ret = 0;\n-\t    }\n-\t}\n-    }\n-\n #if (defined (OBJ_AOUT) || defined (OBJ_MAYBE_AOUT))\n   else if (exp->X_op != O_constant\n \t   && OUTPUT_FLAVOR == bfd_target_aout_flavour"
    }
  ]
}