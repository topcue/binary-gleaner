{
  "sha": "670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjcwZTM1ZmFkOWMxN2U4ZTE2NmM1YTYyNjAyMDFlZWJjYzJiYTllNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-06-15T12:28:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-06-15T12:28:09Z"
    },
    "message": "Rewrite target_read_string\n\nThis rewrites target_read_string in terms of read_string.\n\ngdb/ChangeLog\n2020-06-15  Tom Tromey  <tromey@adacore.com>\n\n\t* valprint.c (read_string): Update comment.\n\t* target.c (MIN): Remove.\n\t(target_read_string): Rewrite.",
    "tree": {
      "sha": "cb1bc7136ff9bea87b01fe85aa20238f5296cddc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb1bc7136ff9bea87b01fe85aa20238f5296cddc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 17,
    "deletions": 69
  },
  "files": [
    {
      "sha": "4f12edc726432120a4ec6af10318110a6917228d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* valprint.c (read_string): Update comment.\n+\t* target.c (MIN): Remove.\n+\t(target_read_string): Rewrite.\n+\n 2020-06-15  Tom Tromey  <tromey@adacore.com>\n \n \t* corefile.c (read_memory_string): Remove."
    },
    {
      "sha": "897b8fdd32b85d026839f507d3f93bd6a1bd9d67",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 10,
      "deletions": 62,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
      "patch": "@@ -50,6 +50,7 @@\n #include \"terminal.h\"\n #include <unordered_map>\n #include \"target-connection.h\"\n+#include \"valprint.h\"\n \n static void generic_tls_error (void) ATTRIBUTE_NORETURN;\n \n@@ -803,9 +804,6 @@ target_xfer_status_to_string (enum target_xfer_status status)\n };\n \n \n-#undef\tMIN\n-#define MIN(A, B) (((A) <= (B)) ? (A) : (B))\n-\n /* target_read_string -- read a null terminated string, up to LEN bytes,\n    from MEMADDR in target.  Set *ERRNOP to the errno code, or 0 if successful.\n    Set *STRING to a pointer to malloc'd memory containing the data; the caller\n@@ -816,68 +814,18 @@ int\n target_read_string (CORE_ADDR memaddr, gdb::unique_xmalloc_ptr<char> *string,\n \t\t    int len, int *errnop)\n {\n-  int tlen, offset, i;\n-  gdb_byte buf[4];\n-  int errcode = 0;\n-  char *buffer;\n-  int buffer_allocated;\n-  char *bufptr;\n-  unsigned int nbytes_read = 0;\n-\n-  gdb_assert (string);\n-\n-  /* Small for testing.  */\n-  buffer_allocated = 4;\n-  buffer = (char *) xmalloc (buffer_allocated);\n-  bufptr = buffer;\n-\n-  while (len > 0)\n-    {\n-      tlen = MIN (len, 4 - (memaddr & 3));\n-      offset = memaddr & 3;\n+  int bytes_read;\n+  gdb::unique_xmalloc_ptr<gdb_byte> buffer;\n \n-      errcode = target_read_memory (memaddr & ~3, buf, sizeof buf);\n-      if (errcode != 0)\n-\t{\n-\t  /* The transfer request might have crossed the boundary to an\n-\t     unallocated region of memory.  Retry the transfer, requesting\n-\t     a single byte.  */\n-\t  tlen = 1;\n-\t  offset = 0;\n-\t  errcode = target_read_memory (memaddr, buf, 1);\n-\t  if (errcode != 0)\n-\t    goto done;\n-\t}\n-\n-      if (bufptr - buffer + tlen > buffer_allocated)\n-\t{\n-\t  unsigned int bytes;\n+  /* Note that the endian-ness does not matter here.  */\n+  int errcode = read_string (memaddr, -1, 1, len, BFD_ENDIAN_LITTLE,\n+\t\t\t     &buffer, &bytes_read);\n \n-\t  bytes = bufptr - buffer;\n-\t  buffer_allocated *= 2;\n-\t  buffer = (char *) xrealloc (buffer, buffer_allocated);\n-\t  bufptr = buffer + bytes;\n-\t}\n-\n-      for (i = 0; i < tlen; i++)\n-\t{\n-\t  *bufptr++ = buf[i + offset];\n-\t  if (buf[i + offset] == '\\000')\n-\t    {\n-\t      nbytes_read += i + 1;\n-\t      goto done;\n-\t    }\n-\t}\n-\n-      memaddr += tlen;\n-      len -= tlen;\n-      nbytes_read += tlen;\n-    }\n-done:\n-  string->reset (buffer);\n-  if (errnop != NULL)\n+  if (errnop != nullptr)\n     *errnop = errcode;\n-  return nbytes_read;\n+\n+  string->reset ((char *) buffer.release ());\n+  return bytes_read;\n }\n \n struct target_section_table *"
    },
    {
      "sha": "f2549805268e23b77d96b580825c1337835ccec3",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/670e35fad9c17e8e166c5a6260201eebcc2ba9e6/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=670e35fad9c17e8e166c5a6260201eebcc2ba9e6",
      "patch": "@@ -2027,13 +2027,7 @@ partial_memory_read (CORE_ADDR memaddr, gdb_byte *myaddr,\n \n    Unless an exception is thrown, BUFFER will always be allocated, even on\n    failure.  In this case, some characters might have been read before the\n-   failure happened.  Check BYTES_READ to recognize this situation.\n-\n-   Note: There was a FIXME asking to make this code use target_read_string,\n-   but this function is more general (can read past null characters, up to\n-   given LEN).  Besides, it is used much more often than target_read_string\n-   so it is more tested.  Perhaps callers of target_read_string should use\n-   this function instead?  */\n+   failure happened.  Check BYTES_READ to recognize this situation.  */\n \n int\n read_string (CORE_ADDR addr, int len, int width, unsigned int fetchlimit,"
    }
  ]
}