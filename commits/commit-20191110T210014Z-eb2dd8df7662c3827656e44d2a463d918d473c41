{
  "sha": "eb2dd8df7662c3827656e44d2a463d918d473c41",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWIyZGQ4ZGY3NjYyYzM4Mjc2NTZlNDRkMmE0NjNkOTE4ZDQ3M2M0MQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-08T16:18:43Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-10T21:00:14Z"
    },
    "message": "gdb: Add a class to track last display symtab and line information\n\nIn stack.c we currently have a set of static global variables to track\nthe last displayed symtab and line.  This commit moves all of these\ninto a class and adds an instance of the class to track the same\ninformation.\n\nThe API into stack.c is unchanged after this cleanup.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* stack.c (set_last_displayed_sal): Delete.\n\t(last_displayed_sal_valid): Delete.\n\t(last_displayed_pspace): Delete.\n\t(last_displayed_addr): Delete.\n\t(last_displayed_symtab): Delete.\n\t(last_displayed_line): Delete.\n\t(class last_displayed_symtab_info_type): New.\n\t(last_displayed_symtab_info): New static global variable.\n\t(print_frame_info): Call methods on last_displayed_symtab_info.\n\t(clear_last_displayed_sal): Update header comment, and make use of\n\tlast_displayed_symtab_info.\n\t(last_displayed_sal_is_valid): Likewise.\n\t(get_last_displayed_pspace): Likewise.\n\t(get_last_displayed_addr): Likewise.\n\t(get_last_displayed_symtab): Likewise.\n\t(get_last_displayed_line): Likewise.\n\t(get_last_displayed_sal): Likewise.\n\t* stack.h (clear_last_displayed_sal): Update header comment.\n\t(last_displayed_sal_is_valid): Likewise.\n\t(get_last_displayed_pspace): Likewise.\n\t(get_last_displayed_addr): Likewise.\n\t(get_last_displayed_symtab): Likewise.\n\t(get_last_displayed_line): Likewise.\n\t(get_last_displayed_sal): Likewise.\n\nChange-Id: Ia3dbfe267feec03108c5c8ed8bd94fc0a030c3ed",
    "tree": {
      "sha": "9c09569ba1241b27cec61122734e23dd974ee433",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c09569ba1241b27cec61122734e23dd974ee433"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb2dd8df7662c3827656e44d2a463d918d473c41",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb2dd8df7662c3827656e44d2a463d918d473c41",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb2dd8df7662c3827656e44d2a463d918d473c41",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb2dd8df7662c3827656e44d2a463d918d473c41/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "621377757c83ccc8573cc2e979e1d4ba55335c13",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/621377757c83ccc8573cc2e979e1d4ba55335c13",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/621377757c83ccc8573cc2e979e1d4ba55335c13"
    }
  ],
  "stats": {
    "total": 221,
    "additions": 148,
    "deletions": 73
  },
  "files": [
    {
      "sha": "06e5423fbebe35d021907b719c9067384c72e2b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb2dd8df7662c3827656e44d2a463d918d473c41/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb2dd8df7662c3827656e44d2a463d918d473c41/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=eb2dd8df7662c3827656e44d2a463d918d473c41",
      "patch": "@@ -1,3 +1,30 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* stack.c (set_last_displayed_sal): Delete.\n+\t(last_displayed_sal_valid): Delete.\n+\t(last_displayed_pspace): Delete.\n+\t(last_displayed_addr): Delete.\n+\t(last_displayed_symtab): Delete.\n+\t(last_displayed_line): Delete.\n+\t(class last_displayed_symtab_info_type): New.\n+\t(last_displayed_symtab_info): New static global variable.\n+\t(print_frame_info): Call methods on last_displayed_symtab_info.\n+\t(clear_last_displayed_sal): Update header comment, and make use of\n+\tlast_displayed_symtab_info.\n+\t(last_displayed_sal_is_valid): Likewise.\n+\t(get_last_displayed_pspace): Likewise.\n+\t(get_last_displayed_addr): Likewise.\n+\t(get_last_displayed_symtab): Likewise.\n+\t(get_last_displayed_line): Likewise.\n+\t(get_last_displayed_sal): Likewise.\n+\t* stack.h (clear_last_displayed_sal): Update header comment.\n+\t(last_displayed_sal_is_valid): Likewise.\n+\t(get_last_displayed_pspace): Likewise.\n+\t(get_last_displayed_addr): Likewise.\n+\t(get_last_displayed_symtab): Likewise.\n+\t(get_last_displayed_line): Likewise.\n+\t(get_last_displayed_sal): Likewise.\n+\n 2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* stack.c (frame_show_address): Convert return type to bool."
    },
    {
      "sha": "b02f1779337f83944debe865107495b2b7324054",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 94,
      "deletions": 70,
      "changes": 164,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb2dd8df7662c3827656e44d2a463d918d473c41/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb2dd8df7662c3827656e44d2a463d918d473c41/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=eb2dd8df7662c3827656e44d2a463d918d473c41",
      "patch": "@@ -224,12 +224,6 @@ static void print_frame (const frame_print_options &opts,\n \t\t\t enum print_what print_what,  int print_args,\n \t\t\t struct symtab_and_line sal);\n \n-static void set_last_displayed_sal (int valid,\n-\t\t\t\t    struct program_space *pspace,\n-\t\t\t\t    CORE_ADDR addr,\n-\t\t\t\t    struct symtab *symtab,\n-\t\t\t\t    int line);\n-\n static struct frame_info *find_frame_for_function (const char *);\n static struct frame_info *find_frame_for_address (CORE_ADDR);\n \n@@ -241,13 +235,79 @@ static struct frame_info *find_frame_for_address (CORE_ADDR);\n \n int annotation_level = 0;\n \n-/* These variables hold the last symtab and line we displayed to the user.\n- * This is where we insert a breakpoint or a skiplist entry by default.  */\n-static int last_displayed_sal_valid = 0;\n-static struct program_space *last_displayed_pspace = 0;\n-static CORE_ADDR last_displayed_addr = 0;\n-static struct symtab *last_displayed_symtab = 0;\n-static int last_displayed_line = 0;\n+/* Class used to manage tracking the last symtab we displayed.  */\n+\n+class last_displayed_symtab_info_type\n+{\n+public:\n+  /* True if the cached information is valid.  */\n+  bool is_valid () const\n+  { return m_valid; }\n+\n+  /* Return the cached program_space.  If the cache is invalid nullptr is\n+     returned.  */\n+  struct program_space *pspace () const\n+  { return m_pspace; }\n+\n+  /* Return the cached CORE_ADDR address.  If the cache is invalid 0 is\n+     returned.  */\n+  CORE_ADDR address () const\n+  { return m_address; }\n+\n+  /* Return the cached symtab.  If the cache is invalid nullptr is\n+     returned.  */\n+  struct symtab *symtab () const\n+  { return m_symtab; }\n+\n+  /* Return the cached line number.  If the cache is invalid 0 is\n+     returned.  */\n+  int line () const\n+  { return m_line; }\n+\n+  /* Invalidate the cache, reset all the members to their default value.  */\n+  void invalidate ()\n+  {\n+    m_valid = false;\n+    m_pspace = nullptr;\n+    m_address = 0;\n+    m_symtab = nullptr;\n+    m_line = 0;\n+  }\n+\n+  /* Store a new set of values in the cache.  */\n+  void set (struct program_space *pspace, CORE_ADDR address,\n+\t    struct symtab *symtab, int line)\n+  {\n+    gdb_assert (pspace != nullptr);\n+\n+    m_valid = true;\n+    m_pspace = pspace;\n+    m_address = address;\n+    m_symtab = symtab;\n+    m_line = line;\n+  }\n+\n+private:\n+  /* True when the cache is valid.  */\n+  bool m_valid = false;\n+\n+  /* The last program space displayed.  */\n+  struct program_space *m_pspace = nullptr;\n+\n+  /* The last address displayed.  */\n+  CORE_ADDR m_address = 0;\n+\n+  /* The last symtab displayed.  */\n+  struct symtab *m_symtab = nullptr;\n+\n+  /* The last line number displayed.  */\n+  int m_line = 0;\n+};\n+\n+/* An actual instance of the cache, holds information about the last symtab\n+   displayed.  */\n+static last_displayed_symtab_info_type last_displayed_symtab_info;\n+\n \f\n \n /* See stack.h.  */\n@@ -1105,113 +1165,77 @@ print_frame_info (const frame_print_options &fp_opts,\n       CORE_ADDR pc;\n \n       if (get_frame_pc_if_available (frame, &pc))\n-\tset_last_displayed_sal (1, sal.pspace, pc, sal.symtab, sal.line);\n+\tlast_displayed_symtab_info.set (sal.pspace, pc, sal.symtab, sal.line);\n       else\n-\tset_last_displayed_sal (0, 0, 0, 0, 0);\n+\tlast_displayed_symtab_info.invalidate ();\n     }\n \n   annotate_frame_end ();\n \n   gdb_flush (gdb_stdout);\n }\n \n-/* Remember the last symtab and line we displayed, which we use e.g.\n- * as the place to put a breakpoint when the `break' command is\n- * invoked with no arguments.  */\n-\n-static void\n-set_last_displayed_sal (int valid, struct program_space *pspace,\n-\t\t\tCORE_ADDR addr, struct symtab *symtab,\n-\t\t\tint line)\n-{\n-  last_displayed_sal_valid = valid;\n-  last_displayed_pspace = pspace;\n-  last_displayed_addr = addr;\n-  last_displayed_symtab = symtab;\n-  last_displayed_line = line;\n-  if (valid && pspace == NULL)\n-    {\n-      clear_last_displayed_sal ();\n-      internal_error (__FILE__, __LINE__,\n-\t\t      _(\"Trying to set NULL pspace.\"));\n-    }\n-}\n-\n-/* Forget the last sal we displayed.  */\n+/* See stack.h.  */\n \n void\n clear_last_displayed_sal (void)\n {\n-  last_displayed_sal_valid = 0;\n-  last_displayed_pspace = 0;\n-  last_displayed_addr = 0;\n-  last_displayed_symtab = 0;\n-  last_displayed_line = 0;\n+  last_displayed_symtab_info.invalidate ();\n }\n \n-/* Is our record of the last sal we displayed valid?  If not,\n- * the get_last_displayed_* functions will return NULL or 0, as\n- * appropriate.  */\n+/* See stack.h.  */\n \n-int\n+bool\n last_displayed_sal_is_valid (void)\n {\n-  return last_displayed_sal_valid;\n+  return last_displayed_symtab_info.is_valid ();\n }\n \n-/* Get the pspace of the last sal we displayed, if it's valid.  */\n+/* See stack.h.  */\n \n struct program_space *\n get_last_displayed_pspace (void)\n {\n-  if (last_displayed_sal_valid)\n-    return last_displayed_pspace;\n-  return 0;\n+  return last_displayed_symtab_info.pspace ();\n }\n \n-/* Get the address of the last sal we displayed, if it's valid.  */\n+/* See stack.h.  */\n \n CORE_ADDR\n get_last_displayed_addr (void)\n {\n-  if (last_displayed_sal_valid)\n-    return last_displayed_addr;\n-  return 0;\n+  return last_displayed_symtab_info.address ();\n }\n \n-/* Get the symtab of the last sal we displayed, if it's valid.  */\n+/* See stack.h.  */\n \n struct symtab*\n get_last_displayed_symtab (void)\n {\n-  if (last_displayed_sal_valid)\n-    return last_displayed_symtab;\n-  return 0;\n+  return last_displayed_symtab_info.symtab ();\n }\n \n-/* Get the line of the last sal we displayed, if it's valid.  */\n+/* See stack.h.  */\n \n int\n get_last_displayed_line (void)\n {\n-  if (last_displayed_sal_valid)\n-    return last_displayed_line;\n-  return 0;\n+  return last_displayed_symtab_info.line ();\n }\n \n-/* Get the last sal we displayed, if it's valid.  */\n+/* See stack.h.  */\n \n symtab_and_line\n get_last_displayed_sal ()\n {\n   symtab_and_line sal;\n \n-  if (last_displayed_sal_valid)\n+  if (last_displayed_symtab_info.is_valid ())\n     {\n-      sal.pspace = last_displayed_pspace;\n-      sal.pc = last_displayed_addr;\n-      sal.symtab = last_displayed_symtab;\n-      sal.line = last_displayed_line;\n+      sal.pspace = last_displayed_symtab_info.pspace ();\n+      sal.pc = last_displayed_symtab_info.address ();\n+      sal.symtab = last_displayed_symtab_info.symtab ();\n+      sal.line = last_displayed_symtab_info.line ();\n     }\n \n   return sal;"
    },
    {
      "sha": "9b038f0948f7dd7f53f1b05ad025ac16a80cb6da",
      "filename": "gdb/stack.h",
      "status": "modified",
      "additions": 27,
      "deletions": 3,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb2dd8df7662c3827656e44d2a463d918d473c41/gdb/stack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb2dd8df7662c3827656e44d2a463d918d473c41/gdb/stack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.h?ref=eb2dd8df7662c3827656e44d2a463d918d473c41",
      "patch": "@@ -54,14 +54,38 @@ void get_user_print_what_frame_info (gdb::optional<enum print_what> *what);\n \n bool frame_show_address (struct frame_info *frame, struct symtab_and_line sal);\n \n-/* Get or set the last displayed symtab and line, which is, e.g. where we set a\n- * breakpoint when `break' is supplied with no arguments.  */\n+/* Forget the last sal we displayed.  */\n+\n void clear_last_displayed_sal (void);\n-int last_displayed_sal_is_valid (void);\n+\n+/* Is our record of the last sal we displayed valid?  If not, the\n+   get_last_displayed_* functions will return NULL or 0, as appropriate.  */\n+\n+bool last_displayed_sal_is_valid (void);\n+\n+/* Get the pspace of the last sal we displayed, if it's valid, otherwise\n+   return nullptr.  */\n+\n struct program_space* get_last_displayed_pspace (void);\n+\n+/* Get the address of the last sal we displayed, if it's valid, otherwise\n+   return an address of 0.  */\n+\n CORE_ADDR get_last_displayed_addr (void);\n+\n+/* Get the symtab of the last sal we displayed, if it's valid, otherwise\n+   return nullptr.  */\n+\n struct symtab* get_last_displayed_symtab (void);\n+\n+/* Get the line of the last sal we displayed, if it's valid, otherwise\n+   return 0.  */\n+\n int get_last_displayed_line (void);\n+\n+/* Get the last sal we displayed, if it's valid, otherwise return a\n+   symtab_and_line constructed in its default state.  */\n+\n symtab_and_line get_last_displayed_sal ();\n \n /* Completer for the \"frame apply all\" command.  */"
    }
  ]
}