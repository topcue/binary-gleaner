{
  "sha": "a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
  "node_id": "C_kwDOANOeidoAKGE4YmM0ODFmMzUyZDYxYmIyOTYyZTk4M2ExYzFjMWZkYWQwMjMwYjc",
  "commit": {
    "author": {
      "name": "Cl\u00e9ment Chigot",
      "email": "clement.chigot@atos.net",
      "date": "2021-11-23T14:45:28Z"
    },
    "committer": {
      "name": "Cl\u00e9ment Chigot",
      "email": "clement.chigot@atos.net",
      "date": "2022-01-12T08:08:25Z"
    },
    "message": "ld: add hidden and internal visibility support for XCOFF\n\nThis patch adds a primary support for hidden and internal visibility in\nGNU linker for XCOFF format.\nThe protected visibility isn't yet supported.\n\nPR 22085\n\nbfd/ChangeLog:\n\n\t* xcofflink.c (xcoff_dynamic_definition_p): Add hidden\n\t  and internal visibility support.\n\t(xcoff_link_add_symbols): Likewise.\n\t(xcoff_auto_export_p): Likewise.\n\t(bfd_xcoff_export_symbol): Likewise.\n\t(xcoff_link_input_bfd): Likewise.\n\nld/ChangeLog:\n\n\t* testsuite/ld-vsb/main.c: Adapt for XCOFF.\n\t* testsuite/ld-vsb/sh1.c: Likewse.\n\t* testsuite/ld-vsb/vsb.exp: Likewise.\n\t* testsuite/ld-vsb/visibility-1-xcoff-32.d: New test.\n\t* testsuite/ld-vsb/visibility-1-xcoff-64.d: New test.\n\t* testsuite/ld-vsb/visibility-2-xcoff-32.d: New test.\n\t* testsuite/ld-vsb/visibility-2-xcoff-64.d: New test.\n\t* testsuite/ld-vsb/xcoffvsb.dat: New test.",
    "tree": {
      "sha": "0571c01cecab210414116d89f49e005de17a0404",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0571c01cecab210414116d89f49e005de17a0404"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/comments",
  "author": {
    "login": "Helflym",
    "id": 23002587,
    "node_id": "MDQ6VXNlcjIzMDAyNTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/23002587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Helflym",
    "html_url": "https://github.com/Helflym",
    "followers_url": "https://api.github.com/users/Helflym/followers",
    "following_url": "https://api.github.com/users/Helflym/following{/other_user}",
    "gists_url": "https://api.github.com/users/Helflym/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Helflym/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Helflym/subscriptions",
    "organizations_url": "https://api.github.com/users/Helflym/orgs",
    "repos_url": "https://api.github.com/users/Helflym/repos",
    "events_url": "https://api.github.com/users/Helflym/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Helflym/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "Helflym",
    "id": 23002587,
    "node_id": "MDQ6VXNlcjIzMDAyNTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/23002587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Helflym",
    "html_url": "https://github.com/Helflym",
    "followers_url": "https://api.github.com/users/Helflym/followers",
    "following_url": "https://api.github.com/users/Helflym/following{/other_user}",
    "gists_url": "https://api.github.com/users/Helflym/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Helflym/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Helflym/subscriptions",
    "organizations_url": "https://api.github.com/users/Helflym/orgs",
    "repos_url": "https://api.github.com/users/Helflym/repos",
    "events_url": "https://api.github.com/users/Helflym/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Helflym/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "59e31fd742a53e8404039e1c4be4ba192672287c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/59e31fd742a53e8404039e1c4be4ba192672287c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/59e31fd742a53e8404039e1c4be4ba192672287c"
    }
  ],
  "stats": {
    "total": 284,
    "additions": 254,
    "deletions": 30
  },
  "files": [
    {
      "sha": "6e994720f6dfcff1ce567aa7b1e6eec97b8651fd",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 48,
      "deletions": 2,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -798,10 +798,14 @@ xcoff_dynamic_definition_p (struct xcoff_link_hash_entry *h,\n \t  || h->root.type == bfd_link_hash_undefweak))\n     return true;\n \n-  /* If H is currently undefined, LDSYM defines it.  */\n+  /* If H is currently undefined, LDSYM defines it.\n+     However, if H has a hidden visibility, LDSYM must not\n+     define it.  */\n   if ((h->flags & XCOFF_DEF_DYNAMIC) == 0\n       && (h->root.type == bfd_link_hash_undefined\n-\t  || h->root.type == bfd_link_hash_undefweak))\n+\t  || h->root.type == bfd_link_hash_undefweak)\n+      && (h->visibility != SYM_V_HIDDEN\n+\t  && h->visibility != SYM_V_INTERNAL))\n     return true;\n \n   return false;\n@@ -1243,6 +1247,7 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n     bfd_byte *linenos;\n   } *reloc_info = NULL;\n   bfd_size_type amt;\n+  unsigned short visibility;\n \n   keep_syms = obj_coff_keep_syms (abfd);\n \n@@ -1480,6 +1485,9 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n \t    }\n \t}\n \n+      /* Record visibility.  */\n+      visibility = sym.n_type & SYM_V_MASK;\n+\n       /* Pick up the csect auxiliary information.  */\n       if (sym.n_numaux == 0)\n \t{\n@@ -2058,6 +2066,22 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t  /* Try not to give this error too many times.  */\n \t\t  (*sym_hash)->flags &= ~XCOFF_MULTIPLY_DEFINED;\n \t\t}\n+\n+\n+\t      /* If the symbol is hidden or internal, completely undo\n+\t\t any dynamic link state.  */\n+\t      if ((*sym_hash)->flags & XCOFF_DEF_DYNAMIC\n+\t\t  && (visibility == SYM_V_HIDDEN\n+\t\t      || visibility == SYM_V_INTERNAL))\n+\t\t  (*sym_hash)->flags &= ~XCOFF_DEF_DYNAMIC;\n+\t      else\n+\t\t{\n+\t\t  /* Keep the most constraining visibility.  */\n+\t\t  unsigned short hvis = (*sym_hash)->visibility;\n+\t\t  if (visibility && ( !hvis || visibility < hvis))\n+\t\t    (*sym_hash)->visibility = visibility;\n+\t\t}\n+\n \t    }\n \n \t  /* _bfd_generic_link_add_one_symbol may call the linker to\n@@ -2650,6 +2674,11 @@ xcoff_auto_export_p (struct bfd_link_info *info,\n   if (h->root.root.string[0] == '.')\n     return false;\n \n+  /* Don't export hidden or internal symbols.  */\n+  if (h->visibility == SYM_V_HIDDEN\n+      || h->visibility == SYM_V_INTERNAL)\n+    return false;\n+\n   /* We don't export a symbol which is being defined by an object\n      included from an archive which contains a shared object.  The\n      rationale is that if an archive contains both an unshared and\n@@ -3248,6 +3277,19 @@ bfd_xcoff_export_symbol (bfd *output_bfd,\n   if (bfd_get_flavour (output_bfd) != bfd_target_xcoff_flavour)\n     return true;\n \n+  /* As AIX linker, symbols exported with hidden visibility are\n+     silently ignored.  */\n+  if (h->visibility == SYM_V_HIDDEN)\n+    return true;\n+\n+  if (h->visibility == SYM_V_INTERNAL)\n+    {\n+      _bfd_error_handler (_(\"%pB: cannot export internal symbol `%s`.\"),\n+\t\t\t  output_bfd, h->root.root.string);\n+      bfd_set_error (bfd_error_bad_value);\n+      return false;\n+    }\n+\n   h->flags |= XCOFF_EXPORT;\n \n   /* FIXME: I'm not at all sure what syscall is supposed to mean, so\n@@ -4572,6 +4614,10 @@ xcoff_link_input_bfd (struct xcoff_final_link_info *flinfo,\n \t\t\t       - (*csectpp)->vma);\n \t    }\n \n+\t  /* Update visibility.  */\n+\t  isym.n_type &= ~SYM_V_MASK;\n+\t  isym.n_type |= (*sym_hash)->visibility;\n+\n \t  /* Output the symbol.  */\n \t  bfd_coff_swap_sym_out (output_bfd, (void *) &isym, (void *) outsym);\n "
    },
    {
      "sha": "3dc25ed718519570cad73d39884275d3d33de3fa",
      "filename": "ld/testsuite/ld-vsb/define.s",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/define.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/define.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/define.s?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -1,10 +1,16 @@\n \t.data\n \t.globl protected\n+\t.ifndef XCOFF_TEST\n \t.type protected,\"object\"\n+\t.endif\n protected:\n \t.globl hidden\n+\t.ifndef XCOFF_TEST\n \t.type hidden,\"object\"\n+\t.endif\n hidden:\n \t.globl internal\n+\t.ifndef XCOFF_TEST\n \t.type internal,\"object\"\n+\t.endif\n internal:"
    },
    {
      "sha": "b0359c0d815f6fb3aa9c199e444ac35e637c1ca2",
      "filename": "ld/testsuite/ld-vsb/main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/main.c?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -236,40 +236,36 @@ main (void)\n   printf (\"mainvar == %d\\n\", mainvar);\n   printf (\"overriddenvar == %d\\n\", overriddenvar);\n   printf (\"shlibvar1 == %d\\n\", shlibvar1);\n-#ifndef XCOFF_TEST\n   printf (\"shlib_mainvar () == %d\\n\", shlib_mainvar ());\n+#ifndef XCOFF_TEST\n   printf (\"shlib_overriddenvar () == %d\\n\", shlib_overriddenvar ());\n #endif\n   printf (\"shlib_shlibvar1 () == %d\\n\", shlib_shlibvar1 ());\n   printf (\"shlib_shlibvar2 () == %d\\n\", shlib_shlibvar2 ());\n   printf (\"shlib_shlibcall () == %d\\n\", shlib_shlibcall ());\n #ifndef XCOFF_TEST\n   printf (\"shlib_shlibcall2 () == %d\\n\", shlib_shlibcall2 ());\n-  printf (\"shlib_maincall () == %d\\n\", shlib_maincall ());\n #endif\n+  printf (\"shlib_maincall () == %d\\n\", shlib_maincall ());\n   printf (\"main_called () == %d\\n\", main_called ());\n   printf (\"shlib_checkfunptr1 (shlib_shlibvar1) == %d\\n\",\n \t  shlib_checkfunptr1 (shlib_shlibvar1));\n-#ifndef XCOFF_TEST\n   printf (\"shlib_checkfunptr2 (main_called) == %d\\n\",\n \t  shlib_checkfunptr2 (main_called));\n-#endif\n   p = shlib_getfunptr1 ();\n   printf (\"shlib_getfunptr1 () \");\n   if (p == shlib_shlibvar1)\n     printf (\"==\");\n   else\n     printf (\"!=\");\n   printf (\" shlib_shlibvar1\\n\");\n-#ifndef XCOFF_TEST\n   p = shlib_getfunptr2 ();\n   printf (\"shlib_getfunptr2 () \");\n   if (p == main_called)\n     printf (\"==\");\n   else\n     printf (\"!=\");\n   printf (\" main_called\\n\");\n-#endif\n   printf (\"shlib_check () == %d\\n\", shlib_check ());\n   printf (\"visibility_check () == %d\\n\", visibility_check ());\n   printf (\"visibility_checkfunptr () == %d\\n\","
    },
    {
      "sha": "193eca2943bbd9034b963421a7917890714da2e1",
      "filename": "ld/testsuite/ld-vsb/sh1.c",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/sh1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/sh1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/sh1.c?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -6,9 +6,7 @@\n    of a shared library.  */\n \n /* This variable is supplied by the main program.  */\n-#ifndef XCOFF_TEST\n extern int mainvar;\n-#endif\n \n /* This variable is defined in the shared library, and overridden by\n    the main program.  */\n@@ -33,13 +31,11 @@ extern int shlibvar2;\n /* These functions return the values of the above variables as seen in\n    the shared library.  */\n \n-#ifndef XCOFF_TEST\n int\n shlib_mainvar ()\n {\n   return mainvar;\n }\n-#endif\n \n #ifndef XCOFF_TEST\n int\n@@ -95,15 +91,13 @@ shlib_overriddencall2 ()\n \n /* This function calls a function defined by the main program.  */\n \n-#ifndef XCOFF_TEST\n extern int main_called ();\n \n int\n shlib_maincall ()\n {\n   return main_called ();\n }\n-#endif\n \n /* This function is passed a function pointer to shlib_mainvar.  It\n    confirms that the pointer compares equally.  */\n@@ -118,14 +112,12 @@ shlib_checkfunptr1 (p)\n /* This function is passed a function pointer to main_called.  It\n    confirms that the pointer compares equally.  */\n \n-#ifndef XCOFF_TEST\n int\n shlib_checkfunptr2 (p)\n      int (*p) ();\n {\n   return p == main_called;\n }\n-#endif\n \n /* This function returns a pointer to shlib_mainvar.  */\n \n@@ -137,13 +129,11 @@ int\n \n /* This function returns a pointer to main_called.  */\n \n-#ifndef XCOFF_TEST\n int\n (*shlib_getfunptr2 ()) ()\n {\n   return main_called;\n }\n-#endif\n \n /* This function makes sure that constant data and local functions\n    work.  */"
    },
    {
      "sha": "19cff64827f68aa190e8df32d3be20310f832a06",
      "filename": "ld/testsuite/ld-vsb/visibility-1-xcoff-32.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-1-xcoff-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-1-xcoff-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/visibility-1-xcoff-32.d?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -0,0 +1,21 @@\n+#source: define.s\n+#source: undef.s\n+#as: -a32 --defsym XCOFF_TEST=1\n+#ld: -b32 -r\n+#objdump: -t\n+\n+.*\n+\n+SYMBOL TABLE:\n+.*\n+.*\n+.*\n+.*\n+\\[  4\\]\\(sec  2\\).*\\(ty 3000\\).*protected\n+.*\n+\\[  6\\]\\(sec  2\\).*\\(ty 2000\\).*hidden\n+.*\n+\\[  8\\]\\(sec  2\\).*\\(ty 1000\\).*internal\n+.*\n+.*\n+.*"
    },
    {
      "sha": "a63dcf03819cf1a568ee843c82d8de013f3d5b23",
      "filename": "ld/testsuite/ld-vsb/visibility-1-xcoff-64.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-1-xcoff-64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-1-xcoff-64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/visibility-1-xcoff-64.d?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -0,0 +1,21 @@\n+#source: define.s\n+#source: undef.s\n+#as: -a64 --defsym XCOFF_TEST=1\n+#ld: -b64 -r\n+#objdump: -t\n+\n+.*\n+\n+SYMBOL TABLE:\n+.*\n+.*\n+.*\n+.*\n+\\[  4\\]\\(sec  2\\).*\\(ty 3000\\).*protected\n+.*\n+\\[  6\\]\\(sec  2\\).*\\(ty 2000\\).*hidden\n+.*\n+\\[  8\\]\\(sec  2\\).*\\(ty 1000\\).*internal\n+.*\n+.*\n+.*"
    },
    {
      "sha": "54beedd4a609690f26ed338687e0fe7998411dbd",
      "filename": "ld/testsuite/ld-vsb/visibility-2-xcoff-32.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-2-xcoff-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-2-xcoff-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/visibility-2-xcoff-32.d?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -0,0 +1,16 @@\n+#source: undef.s\n+#as: -a32 --defsym XCOFF_TEST=1\n+#ld: -b32 -r\n+#objdump: -t\n+\n+.*\n+\n+SYMBOL TABLE:\n+.*\n+.*\n+\\[  2\\]\\(sec  0\\).*\\(ty 3000\\).*protected\n+.*\n+\\[  4\\]\\(sec  0\\).*\\(ty 2000\\).*hidden\n+.*\n+\\[  6\\]\\(sec  0\\).*\\(ty 1000\\).*internal\n+.*"
    },
    {
      "sha": "b607a5325deebc6c77a0b113f49f625ee543e8de",
      "filename": "ld/testsuite/ld-vsb/visibility-2-xcoff-64.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-2-xcoff-64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/visibility-2-xcoff-64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/visibility-2-xcoff-64.d?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -0,0 +1,16 @@\n+#source: undef.s\n+#as: -a64 --defsym XCOFF_TEST=1\n+#ld: -b64 -r\n+#objdump: -t\n+\n+.*\n+\n+SYMBOL TABLE:\n+.*\n+.*\n+\\[  2\\]\\(sec  0\\).*\\(ty 3000\\).*protected\n+.*\n+\\[  4\\]\\(sec  0\\).*\\(ty 2000\\).*hidden\n+.*\n+\\[  6\\]\\(sec  0\\).*\\(ty 1000\\).*internal\n+.*"
    },
    {
      "sha": "bc2a9b8a836f08a4098d093e67e5416f26447a92",
      "filename": "ld/testsuite/ld-vsb/vsb.exp",
      "status": "modified",
      "additions": 100,
      "deletions": 12,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/vsb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/vsb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/vsb.exp?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -29,7 +29,8 @@ if { ![check_compiler_available] } {\n     return\n }\n \n-# This test can only be run on a couple of ELF platforms.\n+# This test can only be run on a couple of ELF platforms or with\n+# XCOFF formats.\n # Square bracket expressions seem to confuse istarget.\n if { ![istarget hppa*64*-*-hpux*] \\\n      && ![istarget hppa*-*-linux*] \\\n@@ -45,11 +46,17 @@ if { ![istarget hppa*64*-*-hpux*] \\\n      && ![istarget sparc*-*-linux*] \\\n      && ![istarget s390*-*-linux*] \\\n      && ![istarget sh\\[34\\]*-*-linux*] \\\n-     && ![istarget x86_64-*-linux*] } {\n+     && ![istarget x86_64-*-linux*] \\\n+     && ![is_xcoff_format] } {\n     return\n }\n \n-set test_list [lsort [glob -nocomplain $srcdir/$subdir/*-elf.d]]\n+if [is_xcoff_format] {\n+    set test_list [lsort [glob -nocomplain $srcdir/$subdir/*-xcoff*.d]]\n+} else {\n+    set test_list [lsort [glob -nocomplain $srcdir/$subdir/*-elf.d]]\n+}\n+\n foreach t $test_list {\n     # We need to strip the \".d\", but can leave the dirname.\n     verbose [file rootname $t]\n@@ -61,6 +68,28 @@ set SHCFLAG \"\"\n set shared_needs_pic \"no\"\n set COMPRESS_LDFLAG \"-Wl,--compress-debug-sections=zlib-gabi\"\n \n+if { [is_xcoff_format] } {\n+    # Not all the useful features are available with AIX shared\n+    # libraries by default.\n+    # We can manage to simulate some of them with export/import\n+    # files but the overriding of shared library functions or\n+    # variables by the main program doesn't seem possible.\n+    # We avoid testing those features.\n+    set SHCFLAG \"-DXCOFF_TEST\"\n+\n+    # In order to avoid listing every symbols in an export file,\n+    # the export will be done with -bexpall flag.\n+    # However for imports, we must create the import file.\n+    set file [open $tmpdir/xcoff-shared.imp w]\n+    puts $file \"#! .\"\n+    puts $file mainvar\n+    puts $file main_called\n+    close $file\n+\n+    # XCOFF doesn't yet support debug sections compresion.\n+    set COMPRESS_LDFLAG \"\"\n+}\n+\n if [istarget arm*-*-linux*] {\n     # On ARM section anchors can change the symbol pre-emptability for\n     # non-PIC shared libraries, causing these tests to fail.  Turn section\n@@ -108,6 +137,10 @@ proc visibility_test { visibility progname testname main sh1 sh2 dat args } {\n \n     # Build the shared library.\n     set shared -shared\n+    if { [is_xcoff_format] } {\n+\t# On AIX, setup imports and exports.\n+\tappend shared \" -Wl,-bexpall -Wl,-bI:$tmpdir/xcoff-shared.imp\"\n+    }\n     if { [is_elf_format] && [check_shared_lib_support] } {\n \tappend shared \" -Wl,-z,notext\"\n     }\n@@ -128,8 +161,15 @@ proc visibility_test { visibility progname testname main sh1 sh2 dat args } {\n \n     # Link against the shared library.  Use -rpath so that the\n     # dynamic linker can locate the shared library at runtime.\n+    # On AIX, we must include /lib in -rpath, as otherwise the loader\n+    # can not find -lc.\n     set rpath $tmpdir\n-    if ![ld_link $CC_FOR_TARGET $tmpdir/$progname \"-Wl,-rpath,$rpath $tmpdir/$main $tmpdir/$progname.so\"] {\n+    set exportflag \"\"\n+    if { [is_xcoff_format] } {\n+\tset rpath /lib:$tmpdir\n+\tset exportflag \" -Wl,-bexpall\"\n+    }\n+    if ![ld_link $CC_FOR_TARGET $tmpdir/$progname \"-Wl,-rpath,$rpath $tmpdir/$main $tmpdir/$progname.so $exportflag\"] {\n \tif { [ string match $visibility \"hidden\" ]\n \t     && [regexp \"undefined reference to \\`\\.?visibility\\'\" $link_output]\n \t     && [regexp \"undefined reference to \\`visibility_var\\'\" $link_output] } {\n@@ -225,6 +265,14 @@ proc visibility_run {visibility} {\n     # tests below.\n     remote_file host delete $tmpdir/sh1p.o $tmpdir/sh2p.o $tmpdir/sh1np.o $tmpdir/sh2np.o\n \n+    set datfile elfvsb\n+    if { [is_xcoff_format] } {\n+\t# As explained above, XCOFF shared libraries doesn't support\n+\t# all the ELF features. Thus, the output of the tests are\n+\t# a bit different.\n+\tset datfile xcoffvsb\n+    }\n+\n     if { [istarget powerpc*-*-linux*] \\\n \t || ( [istarget mips*-*-linux*] && [at_least_gcc_version 4 3] )} {\n \t# Testing non-PIC libraries is a waste of effort on any target.\n@@ -287,7 +335,15 @@ proc visibility_run {visibility} {\n \t\tsetup_xfail \"arm*-*-linux*\"\n \t    }\n \n-\t    visibility_test $visibility vnp \"visibility ($visibility) (non PIC)\" mainnp.o sh1np.o sh2np.o elfvsb\n+\t    # XCOFF format doesn't know how to handle weak undefined symbols\n+\t    # in shared objects.\n+\t    if { [ string match $visibility \"hidden_weak\" ]\n+\t\t || [ string match $visibility \"protected_weak\" ] } {\n+\t\tsetup_xfail \"*-*-aix*\"\n+\t\tsetup_xfail \"*-*-beos*\"\n+\t    }\n+\n+\t    visibility_test $visibility vnp \"visibility ($visibility) (non PIC)\" mainnp.o sh1np.o sh2np.o $datfile\n \n \t    # Test ELF shared library relocations with a non-zero load\n \t    # address for the library.  Near as I can tell, the R_*_RELATIVE\n@@ -328,9 +384,19 @@ proc visibility_run {visibility} {\n \t\tsetup_xfail \"arm*-*-linux*\"\n \t    }\n \n-\t    visibility_test $visibility vnp \"visibility ($visibility) (non PIC, load offset)\" \\\n-\t\tmainnp.o sh1np.o sh2np.o elfvsb \\\n-\t\t\"-Wl,-T,$srcdir/$subdir/elf-offset.ld,--hash-style=sysv\"\n+\t    # XCOFF format doesn't know how to handle weak undefined symbols\n+\t    # in shared objects.\n+\t    if { [ string match $visibility \"hidden_weak\" ]\n+\t\t || [ string match $visibility \"protected_weak\" ] } {\n+\t\tsetup_xfail \"*-*-aix*\"\n+\t\tsetup_xfail \"*-*-beos*\"\n+\t    }\n+\n+\t    if { ![is_xcoff_format] } {\n+\t\tvisibility_test $visibility vnp \"visibility ($visibility) (non PIC, load offset)\" \\\n+\t\t    mainnp.o sh1np.o sh2np.o $datfile \\\n+\t\t    \"-Wl,-T,$srcdir/$subdir/elf-offset.ld,--hash-style=sysv\"\n+\t    }\n \t}\n \n \t# Now compile the code using -fpic.\n@@ -345,7 +411,7 @@ proc visibility_run {visibility} {\n \t\t    setup_xfail $target_triplet\n \t\t}\n \t    }\n-\t    visibility_test $visibility vp \"visibility ($visibility)\" mainnp.o sh1p.o sh2p.o elfvsb $COMPRESS_LDFLAG\n+\t    visibility_test $visibility vp \"visibility ($visibility)\" mainnp.o sh1p.o sh2p.o $datfile $COMPRESS_LDFLAG\n \t}\n     }}\n \n@@ -392,7 +458,15 @@ proc visibility_run {visibility} {\n \t\tsetup_xfail \"arm*-*-linux*\"\n \t    }\n \n-\t    visibility_test $visibility vmpnp \"visibility ($visibility) (PIC main, non PIC so)\" mainp.o sh1np.o sh2np.o elfvsb\n+\t    # XCOFF format doesn't know how to handle weak undefined symbols\n+\t    # in shared objects.\n+\t    if { [ string match $visibility \"hidden_weak\" ]\n+\t\t || [ string match $visibility \"protected_weak\" ] } {\n+\t\tsetup_xfail \"*-*-aix*\"\n+\t\tsetup_xfail \"*-*-beos*\"\n+\t    }\n+\n+\t    visibility_test $visibility vmpnp \"visibility ($visibility) (PIC main, non PIC so)\" mainp.o sh1np.o sh2np.o $datfile\n \t} else {\n \t    unsupported \"visibility (PIC main, non PIC so)\"\n \t}\n@@ -405,7 +479,16 @@ proc visibility_run {visibility} {\n \t\t    setup_xfail $target_triplet\n \t\t}\n \t    }\n-\t    visibility_test $visibility vmpp \"visibility ($visibility) (PIC main)\" mainp.o sh1p.o sh2p.o elfvsb\n+\n+\t    # XCOFF format doesn't know how to handle weak undefined symbols\n+\t    # in shared objects.\n+\t    if { [ string match $visibility \"hidden_weak\" ]\n+\t\t || [ string match $visibility \"protected_weak\" ] } {\n+\t\tsetup_xfail \"*-*-aix*\"\n+\t\tsetup_xfail \"*-*-beos*\"\n+\t    }\n+\n+\t    visibility_test $visibility vmpp \"visibility ($visibility) (PIC main)\" mainp.o sh1p.o sh2p.o $datfile\n \t} else {\n \t    unsupported \"visibility ($visibility) (PIC main)\"\n \t}\n@@ -461,7 +544,12 @@ if { ![ld_compile \"$CC_FOR_TARGET -g $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$\n    if { ![ld_compile \"$CC_FOR_TARGET -g $NOSANITIZE_CFLAGS $NOLTO_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh3.c tmpdir/sh3.o] } {\n \tunsupported \"weak hidden symbol\"\n     } else {\n-\tif ![ld_link $ld tmpdir/sh3.so \"-shared tmpdir/sh3.o\"] {\n+\tset shared \"-shared\"\n+\tif { [is_xcoff_format] } {\n+\t    # On AIX, setup imports and exports.\n+\t    append shared \" -bexpall\"\n+\t}\n+\tif ![ld_link $ld tmpdir/sh3.so \"$shared tmpdir/sh3.o\"] {\n \t    fail \"weak hidden symbol\"\n \t} else {\n \t    if ![ld_link $ld tmpdir/weak \"tmpdir/test.o tmpdir/sh3.so\"] {"
    },
    {
      "sha": "aa75969583c9e399a0d1731e9fa794db6bb70e3a",
      "filename": "ld/testsuite/ld-vsb/xcoffvsb.dat",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/xcoffvsb.dat",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bc481f352d61bb2962e983a1c1c1fdad0230b7/ld/testsuite/ld-vsb/xcoffvsb.dat",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-vsb/xcoffvsb.dat?ref=a8bc481f352d61bb2962e983a1c1c1fdad0230b7",
      "patch": "@@ -0,0 +1,24 @@\n+mainvar == 1\n+overriddenvar == 2\n+shlibvar1 == 3\n+shlib_mainvar () == 1\n+shlib_shlibvar1 () == 3\n+shlib_shlibvar2 () == 4\n+shlib_shlibcall () == 5\n+shlib_maincall () == 6\n+main_called () == 6\n+shlib_checkfunptr1 (shlib_shlibvar1) == 1\n+shlib_checkfunptr2 (main_called) == 1\n+shlib_getfunptr1 () == shlib_shlibvar1\n+shlib_getfunptr2 () == main_called\n+shlib_check () == 1\n+visibility_check () == 1\n+visibility_checkfunptr () == 1\n+main_visibility_check () == 1\n+visibility_checkvar () == 1\n+visibility_checkvarptr () == 1\n+main_visibility_checkvar () == 1\n+main_visibility_checkcom () == 1\n+shlib_visibility_checkcom () == 1\n+main_visibility_checkweak () == 1\n+shlib_visibility_checkweak () == 1"
    }
  ]
}