{
  "sha": "c32e6a04f42b8e4a1392ee4b87d040c06b917ef5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzMyZTZhMDRmNDJiOGU0YTEzOTJlZTRiODdkMDQwYzA2YjkxN2VmNQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-07-11T18:35:13Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-07-22T03:23:12Z"
    },
    "message": "Use block_enum instead of int for better typesafety\n\ngdb/ChangeLog:\n\n2019-07-21  Christian Biesinger  <cbiesinger@google.com>\n\n\t* symtab.c (lookup_symbol_in_objfile_symtabs): Change int to block_enum.\n\t(lookup_symbol_in_objfile): Change int to block_enum and add a\n\tgdb_assert to make sure block_index is GLOBAL_BLOCK or STATIC_BLOCK.",
    "tree": {
      "sha": "b556abc4d0b27a5fb9bbd9b8f98e99457ec15a9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b556abc4d0b27a5fb9bbd9b8f98e99457ec15a9a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c32e6a04f42b8e4a1392ee4b87d040c06b917ef5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c32e6a04f42b8e4a1392ee4b87d040c06b917ef5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c32e6a04f42b8e4a1392ee4b87d040c06b917ef5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c32e6a04f42b8e4a1392ee4b87d040c06b917ef5/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c8cdc1e08312a238a9138b55ae080ceeab14845c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8cdc1e08312a238a9138b55ae080ceeab14845c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c8cdc1e08312a238a9138b55ae080ceeab14845c"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 8,
    "deletions": 4
  },
  "files": [
    {
      "sha": "ce1cdcf9e70e4faa38a2b01da20ef28fd049b26b",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c32e6a04f42b8e4a1392ee4b87d040c06b917ef5/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c32e6a04f42b8e4a1392ee4b87d040c06b917ef5/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=c32e6a04f42b8e4a1392ee4b87d040c06b917ef5",
      "patch": "@@ -92,7 +92,8 @@ struct block_symbol lookup_local_symbol (const char *name,\n \t\t\t\t\t enum language language);\n \n static struct block_symbol\n-  lookup_symbol_in_objfile (struct objfile *objfile, int block_index,\n+  lookup_symbol_in_objfile (struct objfile *objfile,\n+\t\t\t    enum block_enum block_index,\n \t\t\t    const char *name, const domain_enum domain);\n \n /* Type of the data stored on the program space.  */\n@@ -2244,8 +2245,9 @@ lookup_global_symbol_from_objfile (struct objfile *main_objfile,\n    static symbols.  */\n \n static struct block_symbol\n-lookup_symbol_in_objfile_symtabs (struct objfile *objfile, int block_index,\n-\t\t\t\t  const char *name, const domain_enum domain)\n+lookup_symbol_in_objfile_symtabs (struct objfile *objfile,\n+\t\t\t\t  enum block_enum block_index, const char *name,\n+\t\t\t\t  const domain_enum domain)\n {\n   gdb_assert (block_index == GLOBAL_BLOCK || block_index == STATIC_BLOCK);\n \n@@ -2516,11 +2518,13 @@ lookup_symbol_in_static_block (const char *name,\n    BLOCK_INDEX is one of GLOBAL_BLOCK or STATIC_BLOCK.  */\n \n static struct block_symbol\n-lookup_symbol_in_objfile (struct objfile *objfile, int block_index,\n+lookup_symbol_in_objfile (struct objfile *objfile, enum block_enum block_index,\n \t\t\t  const char *name, const domain_enum domain)\n {\n   struct block_symbol result;\n \n+  gdb_assert (block_index == GLOBAL_BLOCK || block_index == STATIC_BLOCK);\n+\n   if (symbol_lookup_debug)\n     {\n       fprintf_unfiltered (gdb_stdlog,"
    }
  ]
}