{
  "sha": "0b27c27d0d3060171876736f05c39f9c86a65d3e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGIyN2MyN2QwZDMwNjAxNzE4NzY3MzZmMDVjMzlmOWM4NmE2NWQzZQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-01T22:22:28Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-05T18:06:18Z"
    },
    "message": "Add block['var'] accessor\n\nCurrently we support iteration on blocks; this patch extends that to make\nsubscript access work as well.\n\ngdb/ChangeLog:\n\n2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n\n\t* NEWS: Mention dictionary access on blocks.\n\t* python/py-block.c (blpy_getitem): New function.\n\t(block_object_as_mapping): New struct.\n\t(block_object_type): Use new struct for tp_as_mapping field.\n\ngdb/doc/ChangeLog:\n\n2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n\n\t* python.texi (Blocks In Python): Document dictionary access on blocks.\n\ngdb/testsuite/ChangeLog:\n\n2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n\n\t* gdb.python/py-block.exp: Test dictionary access on blocks.",
    "tree": {
      "sha": "e9ea50193b9ee06ba7468ee9bce4440343286c51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e9ea50193b9ee06ba7468ee9bce4440343286c51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b27c27d0d3060171876736f05c39f9c86a65d3e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b27c27d0d3060171876736f05c39f9c86a65d3e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b27c27d0d3060171876736f05c39f9c86a65d3e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b27c27d0d3060171876736f05c39f9c86a65d3e/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4ee94178afbe062bc244d28595f86d63633a7af7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ee94178afbe062bc244d28595f86d63633a7af7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4ee94178afbe062bc244d28595f86d63633a7af7"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 73,
    "deletions": 2
  },
  "files": [
    {
      "sha": "b17b2526ede2e8f15bba7a67de97a0cde385bab4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -1,3 +1,10 @@\n+2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* NEWS: Mention dictionary access on blocks.\n+\t* python/py-block.c (blpy_getitem): New function.\n+\t(block_object_as_mapping): New struct.\n+\t(block_object_type): Use new struct for tp_as_mapping field.\n+\n 2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n \n \t* objfiles.h (objfile): Add a comment describing partial symbols."
    },
    {
      "sha": "b4c59e4410d8247b14506c3622b540be21962da7",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -47,6 +47,9 @@\n   ** gdb.Objfile has new methods 'lookup_global_symbol' and\n      'lookup_static_symbol' to lookup a symbol from this objfile only.\n \n+  ** gdb.Block now supports the dictionary syntax for accessing symbols in\n+     this block (e.g. block['local_variable']).\n+\n * New commands\n \n | [COMMAND] | SHELL_COMMAND"
    },
    {
      "sha": "6faf5f359d6a615a37aaf7a9b2114e33a94d4732",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -1,3 +1,7 @@\n+2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* python.texi (Blocks In Python): Document dictionary access on blocks.\n+\n 2019-08-03  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n         * gdb.texinfo (Symbols): Document new args -dirname and -basename"
    },
    {
      "sha": "832283dede8937e5a5726372918fa1e81a2419b5",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -4722,7 +4722,12 @@ A @code{gdb.Block} is iterable.  The iterator returns the symbols\n should not assume that a specific block object will always contain a\n given symbol, since changes in @value{GDBN} features and\n infrastructure may cause symbols move across blocks in a symbol\n-table.\n+table.  You can also use Python's @dfn{dictionary syntax} to access\n+variables in this block, e.g.:\n+\n+@smallexample\n+symbol = some_block['variable']  # symbol is of type gdb.Symbol\n+@end smallexample\n \n The following block-related functions are available in the @code{gdb}\n module:"
    },
    {
      "sha": "4dc47ff169de9af3eea16eb30bc152b1a742175a",
      "filename": "gdb/python/py-block.c",
      "status": "modified",
      "additions": 44,
      "deletions": 1,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/python/py-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/python/py-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-block.c?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -224,6 +224,43 @@ blpy_is_static (PyObject *self, void *closure)\n   Py_RETURN_FALSE;\n }\n \n+/* Given a string, returns the gdb.Symbol representing that symbol in this\n+   block.  If such a symbol does not exist, returns NULL with a Python\n+   exception.  */\n+\n+static PyObject *\n+blpy_getitem (PyObject *self, PyObject *key)\n+{\n+  const struct block *block;\n+\n+  BLPY_REQUIRE_VALID (self, block);\n+\n+  gdb::unique_xmalloc_ptr<char> name = python_string_to_host_string (key);\n+  if (name == nullptr)\n+    return nullptr;\n+\n+  lookup_name_info lookup_name (name.get(), symbol_name_match_type::FULL);\n+\n+  /* We use ALL_BLOCK_SYMBOLS_WITH_NAME instead of block_lookup_symbol so\n+     that we can look up symbols irrespective of the domain, matching the\n+     iterator. It would be confusing if the iterator returns symbols you\n+     can't find via getitem.  */\n+  struct block_iterator iter;\n+  struct symbol *sym = nullptr;\n+  ALL_BLOCK_SYMBOLS_WITH_NAME (block, lookup_name, iter, sym)\n+    {\n+      /* Just stop at the first match */\n+      break;\n+    }\n+\n+  if (sym == nullptr)\n+    {\n+      PyErr_SetObject (PyExc_KeyError, key);\n+      return nullptr;\n+    }\n+  return symbol_to_symbol_object (sym);\n+}\n+\n static void\n blpy_dealloc (PyObject *obj)\n {\n@@ -440,6 +477,12 @@ static gdb_PyGetSetDef block_object_getset[] = {\n   { NULL }  /* Sentinel */\n };\n \n+static PyMappingMethods block_object_as_mapping = {\n+  NULL,\n+  blpy_getitem,\n+  NULL\n+};\n+\n PyTypeObject block_object_type = {\n   PyVarObject_HEAD_INIT (NULL, 0)\n   \"gdb.Block\",\t\t\t  /*tp_name*/\n@@ -453,7 +496,7 @@ PyTypeObject block_object_type = {\n   0,\t\t\t\t  /*tp_repr*/\n   0,\t\t\t\t  /*tp_as_number*/\n   0,\t\t\t\t  /*tp_as_sequence*/\n-  0,\t\t\t\t  /*tp_as_mapping*/\n+  &block_object_as_mapping,\t  /*tp_as_mapping*/\n   0,\t\t\t\t  /*tp_hash */\n   0,\t\t\t\t  /*tp_call*/\n   0,\t\t\t\t  /*tp_str*/"
    },
    {
      "sha": "1a2cb0be18e55984dc4991b59534474d5ffdba27",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -1,3 +1,7 @@\n+2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* gdb.python/py-block.exp: Test dictionary access on blocks.\n+\n 2019-08-05  Simon Marchi  <simon.marchi@efficios.com>\n \n \tPR gdb/24863"
    },
    {
      "sha": "6be1abe7ae093cec95ebb8e148123aa7d040f295",
      "filename": "gdb/testsuite/gdb.python/py-block.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/testsuite/gdb.python/py-block.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b27c27d0d3060171876736f05c39f9c86a65d3e/gdb/testsuite/gdb.python/py-block.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-block.exp?ref=0b27c27d0d3060171876736f05c39f9c86a65d3e",
      "patch": "@@ -43,6 +43,11 @@ gdb_test \"python print (block)\" \"<gdb.Block object at $hex>\" \"check block not No\n gdb_test \"python print (block.function)\" \"None\" \"first anonymous block\"\n gdb_test \"python print (block.start)\" \"${decimal}\" \"check start not None\"\n gdb_test \"python print (block.end)\" \"${decimal}\" \"check end not None\"\n+gdb_test \"python print (block\\['f'\\].name == 'f')\" \"True\" \"check variable access\"\n+gdb_test \"python print (block\\['nonexistent'\\])\" \".*KeyError: 'nonexistent'.*\" \\\n+         \"check nonexistent variable\"\n+gdb_test \"python print (block\\[42\\])\" \".*TypeError: Expected a string.*\" \\\n+         \"check non-string key\"\n \n # Test global/static blocks\n gdb_py_test_silent_cmd \"python frame = gdb.selected_frame()\" \"Get Frame\" 0"
    }
  ]
}