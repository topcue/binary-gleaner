{
  "sha": "cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2M0NjMyMDFjNGJiZTVkMDcwOGVmNGI0NWIxN2ZiN2MzZmVkNmFlZQ==",
  "commit": {
    "author": {
      "name": "Anton Kolesov",
      "email": "Anton.Kolesov@synopsys.com",
      "date": "2017-01-30T15:32:10Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-10-07T16:08:56Z"
    },
    "message": "arc: Add support for Linux coredump files\n\nWith the implemenations in this patch, ARC gdb can handle\ncoredump related matters.  The binutils counter part of\nthis patch has already been pushed [1].\n\nv2 [2]:\n- arc_linux_collect_gregset: Use \"reg <= ARC_LAST_REGNUM\" instead of\n  \"reg < ARC_LAST_REGNUM\" for the condition check of the for-loop.\n- arc-linux-tdep.c: Use \"ARC_LAST_REGNUM < ARRAY_SIZE (...)\" instead of\n  \"ARC_LAST_REGNUM <= ARRAY_SIZE (...)\" for the \"asserts\".\n- Use \"buf + arc_linux_core_reg_offsets[ARC_ERET_REGNUM]\" instead of\n  \"buf + REG_OFF (6)\".\n- Fix a few typos/indentation.\n\nv3 [3]:\n- Use gdb_assert_not_reached(text) instead of gdb_assert (!text).\n- Remove unnecessary braces in the for loop.\n\n[1] arc: Add support for ARC HS extra registers in core files\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=2745674244d6aecddcf636475034bdb9c0a6b4a0\n\n[2] First remarks\nhttps://sourceware.org/pipermail/gdb-patches/2020-September/171912.html\n\n[3] Second remarks\nhttps://sourceware.org/pipermail/gdb-patches/2020-October/172302.html\n\ngdb/ChangeLog:\n\n\t* arc-linux-tdep.h: New file.\n\t* arc-linux-tdep.c (arc_linux_core_reg_offsets,\n\tarc_linux_supply_gregset, arc_linux_supply_v2_regset,\n\tarc_linux_collect_gregset, arc_linux_collect_v2_regset,\n\tarc_linux_gregset, arc_linux_v2_regset,\n\tarc_linux_iterate_over_regset_sections,\n\tarc_linux_core_read_description): Implement.\n\t(arc_linux_init_osabi): Set iterate_over_regset_sections.\n\t* arc-tdep.h (ARC_OFFSET_NO_REGISTER): Declare.\n        (arc_gdbarch_features_create): Add.\n\t* arc-tdep.c (arc_gdbarch_features_create): Not static anymore.",
    "tree": {
      "sha": "0c77080c27a27c9b3f02a506734b3709a1ee5859",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c77080c27a27c9b3f02a506734b3709a1ee5859"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/comments",
  "author": {
    "login": "anthony-kolesov",
    "id": 602123,
    "node_id": "MDQ6VXNlcjYwMjEyMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/602123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/anthony-kolesov",
    "html_url": "https://github.com/anthony-kolesov",
    "followers_url": "https://api.github.com/users/anthony-kolesov/followers",
    "following_url": "https://api.github.com/users/anthony-kolesov/following{/other_user}",
    "gists_url": "https://api.github.com/users/anthony-kolesov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/anthony-kolesov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/anthony-kolesov/subscriptions",
    "organizations_url": "https://api.github.com/users/anthony-kolesov/orgs",
    "repos_url": "https://api.github.com/users/anthony-kolesov/repos",
    "events_url": "https://api.github.com/users/anthony-kolesov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/anthony-kolesov/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "6d2d7c5668f99d1fe9a8da643a43c824b104b337",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d2d7c5668f99d1fe9a8da643a43c824b104b337",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d2d7c5668f99d1fe9a8da643a43c824b104b337"
    }
  ],
  "stats": {
    "total": 274,
    "additions": 270,
    "deletions": 4
  },
  "files": [
    {
      "sha": "3e72d920ae4ec1e30bf51f1350439d3879d43da7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
      "patch": "@@ -1,3 +1,17 @@\n+2020-10-07  Anton Kolesov  <anton.kolesov@synopsys.com>\n+\n+\t* arc-linux-tdep.h: New file.\n+\t* arc-linux-tdep.c (arc_linux_core_reg_offsets,\n+\tarc_linux_supply_gregset, arc_linux_supply_v2_regset,\n+\tarc_linux_collect_gregset, arc_linux_collect_v2_regset,\n+\tarc_linux_gregset, arc_linux_v2_regset,\n+\tarc_linux_iterate_over_regset_sections,\n+\tarc_linux_core_read_description): Implement.\n+\t(arc_linux_init_osabi): Set iterate_over_regset_sections.\n+\t* arc-tdep.h (ARC_OFFSET_NO_REGISTER): Declare.\n+\t(arc_gdbarch_features_create): Add.\n+\t* arc-tdep.c (arc_gdbarch_features_create): Not static anymore.\n+\n 2020-10-07  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* arch/arc.h: Rename \"arc_gdbarch_features\" to"
    },
    {
      "sha": "9ff5f1214a196b1a0a74975ee68673a0f9a9f475",
      "filename": "gdb/arc-linux-tdep.c",
      "status": "modified",
      "additions": 191,
      "deletions": 0,
      "changes": 191,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-linux-tdep.c?ref=cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
      "patch": "@@ -27,7 +27,65 @@\n \n /* ARC header files.  */\n #include \"opcodes/arc-dis.h\"\n+#include \"arc-linux-tdep.h\"\n #include \"arc-tdep.h\"\n+#include \"arch/arc.h\"\n+\n+#define REGOFF(offset) (offset * ARC_REGISTER_SIZE)\n+\n+/* arc_linux_core_reg_offsets[i] is the offset in the .reg section of GDB\n+   regnum i.  Array index is an internal GDB register number, as defined in\n+   arc-tdep.h:arc_regnum.\n+\n+   From include/uapi/asm/ptrace.h in the ARC Linux sources.  */\n+\n+/* The layout of this struct is tightly bound to \"arc_regnum\" enum\n+   in arc-tdep.h.  Any change of order in there, must be reflected\n+   here as well.  */\n+static const int arc_linux_core_reg_offsets[] = {\n+  /* R0 - R12.  */\n+  REGOFF (22), REGOFF (21), REGOFF (20), REGOFF (19),\n+  REGOFF (18), REGOFF (17), REGOFF (16), REGOFF (15),\n+  REGOFF (14), REGOFF (13), REGOFF (12), REGOFF (11),\n+  REGOFF (10),\n+\n+  /* R13 - R25.  */\n+  REGOFF (37), REGOFF (36), REGOFF (35), REGOFF (34),\n+  REGOFF (33), REGOFF (32), REGOFF (31), REGOFF (30),\n+  REGOFF (29), REGOFF (28), REGOFF (27), REGOFF (26),\n+  REGOFF (25),\n+\n+  REGOFF (9),\t\t\t/* R26 (GP) */\n+  REGOFF (8),\t\t\t/* FP */\n+  REGOFF (23),\t\t\t/* SP */\n+  ARC_OFFSET_NO_REGISTER,\t/* ILINK */\n+  ARC_OFFSET_NO_REGISTER,\t/* R30 */\n+  REGOFF (7),\t\t\t/* BLINK */\n+\n+  /* R32 - R59.  */\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER, ARC_OFFSET_NO_REGISTER,\n+  ARC_OFFSET_NO_REGISTER,\n+\n+  REGOFF (4),\t\t\t/* LP_COUNT */\n+  ARC_OFFSET_NO_REGISTER,\t/* RESERVED */\n+  ARC_OFFSET_NO_REGISTER,\t/* LIMM */\n+  ARC_OFFSET_NO_REGISTER,\t/* PCL */\n+\n+  REGOFF (39),\t\t\t/* PC  */\n+  REGOFF (5),\t\t\t/* STATUS32 */\n+  REGOFF (2),\t\t\t/* LP_START */\n+  REGOFF (3),\t\t\t/* LP_END */\n+  REGOFF (1),\t\t\t/* BTA */\n+  REGOFF (6)\t\t\t/* ERET */\n+};\n \n /* Implement the \"cannot_fetch_register\" gdbarch method.  */\n \n@@ -227,6 +285,136 @@ arc_linux_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n     }\n }\n \n+void\n+arc_linux_supply_gregset (const struct regset *regset,\n+\t\t\t  struct regcache *regcache,\n+\t\t\t  int regnum, const void *gregs, size_t size)\n+{\n+  gdb_static_assert (ARC_LAST_REGNUM\n+\t\t     < ARRAY_SIZE (arc_linux_core_reg_offsets));\n+\n+  const bfd_byte *buf = (const bfd_byte *) gregs;\n+\n+  for (int reg = 0; reg <= ARC_LAST_REGNUM; reg++)\n+      if (arc_linux_core_reg_offsets[reg] != ARC_OFFSET_NO_REGISTER)\n+\tregcache->raw_supply (reg, buf + arc_linux_core_reg_offsets[reg]);\n+}\n+\n+void\n+arc_linux_supply_v2_regset (const struct regset *regset,\n+\t\t\t    struct regcache *regcache, int regnum,\n+\t\t\t    const void *v2_regs, size_t size)\n+{\n+  const bfd_byte *buf = (const bfd_byte *) v2_regs;\n+\n+  /* user_regs_arcv2 is defined in linux arch/arc/include/uapi/asm/ptrace.h.  */\n+  regcache->raw_supply (ARC_R30_REGNUM, buf);\n+  regcache->raw_supply (ARC_R58_REGNUM, buf + REGOFF (1));\n+  regcache->raw_supply (ARC_R59_REGNUM, buf + REGOFF (2));\n+}\n+\n+/* Populate BUF with register REGNUM from the REGCACHE.  */\n+\n+static void\n+collect_register (const struct regcache *regcache, struct gdbarch *gdbarch,\n+\t\t  int regnum, gdb_byte *buf)\n+{\n+  /* Skip non-existing registers.  */\n+  if ((arc_linux_core_reg_offsets[regnum] == ARC_OFFSET_NO_REGISTER))\n+    return;\n+\n+  /* The address where the execution has stopped is in pseudo-register\n+     STOP_PC.  However, when kernel code is returning from the exception,\n+     it uses the value from ERET register.  Since, TRAP_S (the breakpoint\n+     instruction) commits, the ERET points to the next instruction.  In\n+     other words: ERET != STOP_PC.  To jump back from the kernel code to\n+     the correct address, ERET must be overwritten by GDB's STOP_PC.  Else,\n+     the program will continue at the address after the current instruction.\n+     */\n+  if (regnum == gdbarch_pc_regnum (gdbarch))\n+    regnum = ARC_ERET_REGNUM;\n+  regcache->raw_collect (regnum, buf + arc_linux_core_reg_offsets[regnum]);\n+}\n+\n+void\n+arc_linux_collect_gregset (const struct regset *regset,\n+\t\t\t   const struct regcache *regcache,\n+\t\t\t   int regnum, void *gregs, size_t size)\n+{\n+  gdb_static_assert (ARC_LAST_REGNUM\n+\t\t     < ARRAY_SIZE (arc_linux_core_reg_offsets));\n+\n+  gdb_byte *buf = (gdb_byte *) gregs;\n+  struct gdbarch *gdbarch = regcache->arch ();\n+\n+  /* regnum == -1 means writing all the registers.  */\n+  if (regnum == -1)\n+    for (int reg = 0; reg <= ARC_LAST_REGNUM; reg++)\n+      collect_register (regcache, gdbarch, reg, buf);\n+  else if (regnum <= ARC_LAST_REGNUM)\n+    collect_register (regcache, gdbarch, regnum, buf);\n+  else\n+    gdb_assert_not_reached (\"Invalid regnum in arc_linux_collect_gregset.\");\n+}\n+\n+void\n+arc_linux_collect_v2_regset (const struct regset *regset,\n+\t\t\t     const struct regcache *regcache, int regnum,\n+\t\t\t     void *v2_regs, size_t size)\n+{\n+  bfd_byte *buf = (bfd_byte *) v2_regs;\n+\n+  regcache->raw_collect (ARC_R30_REGNUM, buf);\n+  regcache->raw_collect (ARC_R58_REGNUM, buf + REGOFF (1));\n+  regcache->raw_collect (ARC_R59_REGNUM, buf + REGOFF (2));\n+}\n+\n+/* Linux regset definitions.  */\n+\n+static const struct regset arc_linux_gregset = {\n+  arc_linux_core_reg_offsets,\n+  arc_linux_supply_gregset,\n+  arc_linux_collect_gregset,\n+};\n+\n+static const struct regset arc_linux_v2_regset = {\n+  NULL,\n+  arc_linux_supply_v2_regset,\n+  arc_linux_collect_v2_regset,\n+};\n+\n+/* Implement the `iterate_over_regset_sections` gdbarch method.  */\n+\n+static void\n+arc_linux_iterate_over_regset_sections (struct gdbarch *gdbarch,\n+\t\t\t\t\titerate_over_regset_sections_cb *cb,\n+\t\t\t\t\tvoid *cb_data,\n+\t\t\t\t\tconst struct regcache *regcache)\n+{\n+  /* There are 40 registers in Linux user_regs_struct, although some of\n+     them are now just a mere paddings, kept to maintain binary\n+     compatibility with older tools.  */\n+  const int sizeof_gregset = 40 * ARC_REGISTER_SIZE;\n+\n+  cb (\".reg\", sizeof_gregset, sizeof_gregset, &arc_linux_gregset, NULL,\n+      cb_data);\n+  cb (\".reg-arc-v2\", ARC_LINUX_SIZEOF_V2_REGSET, ARC_LINUX_SIZEOF_V2_REGSET,\n+      &arc_linux_v2_regset, NULL, cb_data);\n+}\n+\n+/* Implement the `core_read_description` gdbarch method.  */\n+\n+static const struct target_desc *\n+arc_linux_core_read_description (struct gdbarch *gdbarch,\n+\t\t\t\t struct target_ops *target,\n+\t\t\t\t bfd *abfd)\n+{\n+  arc_arch_features features\n+    = arc_arch_features_create (abfd,\n+\t\t\t\tgdbarch_bfd_arch_info (gdbarch)->mach);\n+  return arc_lookup_target_description (features);\n+}\n+\n /* Initialization specific to Linux environment.  */\n \n static void\n@@ -260,6 +448,9 @@ arc_linux_init_osabi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_software_single_step (gdbarch, arc_linux_software_single_step);\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);\n   set_gdbarch_skip_solib_resolver (gdbarch, arc_linux_skip_solib_resolver);\n+  set_gdbarch_iterate_over_regset_sections\n+    (gdbarch, arc_linux_iterate_over_regset_sections);\n+  set_gdbarch_core_read_description (gdbarch, arc_linux_core_read_description);\n \n   /* GNU/Linux uses SVR4-style shared libraries, with 32-bit ints, longs\n      and pointers (ILP32).  */"
    },
    {
      "sha": "c26cacd7029131ea208536d63530196fda3f7374",
      "filename": "gdb/arc-linux-tdep.h",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-linux-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-linux-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-linux-tdep.h?ref=cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
      "patch": "@@ -0,0 +1,52 @@\n+/* Target dependent code for GNU/Linux ARC.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ARC_LINUX_TDEP_H\n+#define ARC_LINUX_TDEP_H\n+\n+#include \"gdbarch.h\"\n+#include \"regset.h\"\n+\n+#define ARC_LINUX_SIZEOF_V2_REGSET (3 * ARC_REGISTER_SIZE)\n+\n+/* Reads registers from the NT_PRSTATUS data array into the regcache.  */\n+\n+void arc_linux_supply_gregset (const struct regset *regset,\n+\t\t\t       struct regcache *regcache, int regnum,\n+\t\t\t       const void *gregs, size_t size);\n+\n+/* Reads regsiters from the NT_ARC_V2 data array into the regcache.  */\n+\n+void arc_linux_supply_v2_regset (const struct regset *regset,\n+\t\t\t\t struct regcache *regcache, int regnum,\n+\t\t\t\t const void *v2_regs, size_t size);\n+\n+/* Writes registers from the regcache into the NT_PRSTATUS data array.  */\n+\n+void arc_linux_collect_gregset (const struct regset *regset,\n+\t\t\t\tconst struct regcache *regcache,\n+\t\t\t\tint regnum, void *gregs, size_t size);\n+\n+/* Writes registers from the regcache into the NT_ARC_V2 data array.  */\n+\n+void arc_linux_collect_v2_regset (const struct regset *regset,\n+\t\t\t\t  const struct regcache *regcache,\n+\t\t\t\t  int regnum, void *v2_regs, size_t size);\n+\n+#endif /* ARC_LINUX_TDEP_H */"
    },
    {
      "sha": "3b7a419dfc18cac4aaebda4b4999ee26c00adce1",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
      "patch": "@@ -1883,10 +1883,9 @@ mach_type_to_arc_isa (const unsigned long mach)\n     }\n }\n \n-/* Common construction code for ARC_ARCH_FEATURES struct.  If there\n-   is no ABFD, then a FEATURE with default values is returned.  */\n+/* See arc-tdep.h.  */\n \n-static arc_arch_features\n+arc_arch_features\n arc_arch_features_create (const bfd *abfd, const unsigned long mach)\n {\n   /* Use 4 as a fallback value.  */"
    },
    {
      "sha": "09fcbeab9c785ceb2a3232f3d7ceba5413c63232",
      "filename": "gdb/arc-tdep.h",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee/gdb/arc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.h?ref=cc463201c4bbe5d0708ef4b45b17fb7c3fed6aee",
      "patch": "@@ -85,7 +85,9 @@ enum arc_regnum\n     ARC_LP_END_REGNUM,\n     /* Branch target address.  */\n     ARC_BTA_REGNUM,\n-    ARC_LAST_AUX_REGNUM = ARC_BTA_REGNUM,\n+    /* Exception return address.  */\n+    ARC_ERET_REGNUM,\n+    ARC_LAST_AUX_REGNUM = ARC_ERET_REGNUM,\n     ARC_LAST_REGNUM = ARC_LAST_AUX_REGNUM,\n \n     /* Additional ABI constants.  */\n@@ -105,6 +107,9 @@ enum arc_regnum\n /* STATUS32 register: current instruction is a delay slot.  */\n #define ARC_STATUS32_DE_MASK (1 << 6)\n \n+/* Special value for register offset arrays.  */\n+#define ARC_OFFSET_NO_REGISTER (-1)\n+\n #define arc_print(fmt, args...) fprintf_unfiltered (gdb_stdlog, fmt, ##args)\n \n extern int arc_debug;\n@@ -182,4 +187,9 @@ CORE_ADDR arc_insn_get_branch_target (const struct arc_instruction &insn);\n \n CORE_ADDR arc_insn_get_linear_next_pc (const struct arc_instruction &insn);\n \n+/* Create an arc_arch_features instance from the provided data.  */\n+\n+arc_arch_features arc_arch_features_create (const bfd *abfd,\n+\t\t\t\t\t    const unsigned long mach);\n+\n #endif /* ARC_TDEP_H */"
    }
  ]
}