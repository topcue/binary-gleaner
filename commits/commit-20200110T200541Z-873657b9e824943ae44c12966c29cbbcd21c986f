{
  "sha": "873657b9e824943ae44c12966c29cbbcd21c986f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODczNjU3YjllODI0OTQzYWU0NGMxMjk2NmMyOWNiYmNkMjFjOTg2Zg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:41Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:41Z"
    },
    "message": "Preserve selected thread in all-stop w/ background execution\n\nIn non-stop mode, if you resume the program in the background (with\n\"continue&\", for example), then gdb makes sure to not switch the\ncurrent thread behind your back.  That means that you can be sure that\nthe commands you type apply to the thread you selected, even if some\nother thread that was running in the background hits some event just\nwhile you're typing.\n\nIn all-stop mode, however, if you resume the program in the\nbackground, gdb let's the current thread switch behind your back.\n\nThis is bogus, of course.  All-stop and non-stop background\nresumptions should behave the same.\n\nThis patch fixes that, and adds a testcase that exposes the bad\nbehavior in current master.\n\nThe fork-running-state.exp changes are necessary because that\npreexisting testcase was expecting the old behavior:\n\nBefore:\n\n  continue &\n  Continuing.\n  (gdb)\n  [Attaching after process 8199 fork to child process 8203]\n  [New inferior 2 (process 8203)]\n  info threads\n    Id   Target Id                      Frame\n    1.1  process 8199 \"fork-running-st\" (running)\n  * 2.1  process 8203 \"fork-running-st\" (running)\n  (gdb)\n\nAfter:\n\n  continue &\n  Continuing.\n  (gdb)\n  [Attaching after process 24660 fork to child process 24664]\n  [New inferior 2 (process 24664)]\n  info threads\n    Id   Target Id                       Frame\n  * 1.1  process 24660 \"fork-running-st\" (running)\n    2.1  process 24664 \"fork-running-st\" (running)\n  (gdb)\n\nHere we see that before this patch GDB switches current inferior to\nthe new inferior behind the user's back, as a side effect of handling\nthe fork.\n\nThe delete_exited_threads call in inferior_appeared is there to fix an\nissue that Baris found in a previous version of this patch.  The\nfetch_inferior_event change increases the refcount of the current\nthread, and in case the fetched inferior event denotes a thread exit,\nthe thread will not be deleted right away.  A non-deleted but exited\nthread stays in the inferior's thread list.  This, in turn, causes the\n\"init_thread_list\" call in inferior.c to be skipped.  A consequence is\nthat the global thread ID counter is not restarted if the current\nthread exits, and then the inferior is restarted:\n\n (gdb) start\n Temporary breakpoint 1 at 0x4004d6: file main.c, line 21.\n Starting program: /tmp/main\n\n Temporary breakpoint 1, main () at main.c:21\n 21        foo ();\n (gdb) info threads -gid\n   Id   GId  Target Id            Frame\n * 1    1    process 16106 \"main\" main () at main.c:21\n (gdb) c\n Continuing.\n [Inferior 1 (process 16106) exited normally]\n (gdb) start\n Temporary breakpoint 2 at 0x4004d6: file main.c, line 21.\n Starting program: /tmp/main\n\n Temporary breakpoint 2, main () at main.c:21\n 21        foo ();\n (gdb) info threads -gid\n   Id   GId  Target Id            Frame\n * 1    2    process 16138 \"main\" main () at main.c:21\n       ^^^\n\nNotice that GId == 2 above.  It should have been \"1\" instead.\n\nThe new tids-git-reset.exp testcase exercises the problem above.\n\ngdb/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* gdbthread.h (scoped_restore_current_thread)\n\t<dont_restore, restore, m_dont_restore>: Declare.\n\t* thread.c (thread_alive): Add assertion.  Return bool.\n\t(switch_to_thread_if_alive): New.\n\t(prune_threads): Switch inferior/thread.\n\t(print_thread_info_1): Switch thread before calling target methods.\n\t(scoped_restore_current_thread::restore): New, factored out from\n\t...\n\t(scoped_restore_current_thread::~scoped_restore_current_thread):\n\t... this.\n\t(scoped_restore_current_thread::scoped_restore_current_thread):\n\tAdd assertion.\n\t(thread_apply_all_command, thread_select): Use\n\tswitch_to_thread_if_alive.\n\ngdb/testsuite/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/fork-running-state.exp (do_test): Adjust expected\n\toutput.\n\t* gdb.threads/async.c: New.\n\t* gdb.threads/async.exp: New.\n\t* gdb.multi/tids-gid-reset.c: New.\n\t* gdb.multi/tids-gid-reset.exp: New.",
    "tree": {
      "sha": "151b26a7c25ecb41375900ae9cdf52eeef701a4f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/151b26a7c25ecb41375900ae9cdf52eeef701a4f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/873657b9e824943ae44c12966c29cbbcd21c986f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/873657b9e824943ae44c12966c29cbbcd21c986f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/873657b9e824943ae44c12966c29cbbcd21c986f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/873657b9e824943ae44c12966c29cbbcd21c986f/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8"
    }
  ],
  "stats": {
    "total": 386,
    "additions": 363,
    "deletions": 23
  },
  "files": [
    {
      "sha": "541683f0bf1a4fa4aa663bd7f765d2ebac02affe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -1,3 +1,20 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdbthread.h (scoped_restore_current_thread)\n+\t<dont_restore, restore, m_dont_restore>: Declare.\n+\t* thread.c (thread_alive): Add assertion.  Return bool.\n+\t(switch_to_thread_if_alive): New.\n+\t(prune_threads): Switch inferior/thread.\n+\t(print_thread_info_1): Switch thread before calling target methods.\n+\t(scoped_restore_current_thread::restore): New, factored out from\n+\t...\n+\t(scoped_restore_current_thread::~scoped_restore_current_thread):\n+\t... this.\n+\t(scoped_restore_current_thread::scoped_restore_current_thread):\n+\tAdd assertion.\n+\t(thread_apply_all_command, thread_select): Use\n+\tswitch_to_thread_if_alive.\n+\n 2020-01-10  George Barrett  <bob@bob131.so>\n \n \t* stap-probe.c (stap_modify_semaphore): Don't check for null"
    },
    {
      "sha": "5f1e3bb11c117f907e11c4c811ef147bc5aa87a4",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -645,7 +645,13 @@ class scoped_restore_current_thread\n \n   DISABLE_COPY_AND_ASSIGN (scoped_restore_current_thread);\n \n+  /* Cancel restoring on scope exit.  */\n+  void dont_restore () { m_dont_restore = true; }\n+\n private:\n+  void restore ();\n+\n+  bool m_dont_restore = false;\n   /* Use the \"class\" keyword here, because of a clash with a \"thread_info\"\n      function in the Darwin API.  */\n   class thread_info *m_thread;"
    },
    {
      "sha": "98829252e5cf065cf6232f9b139b32de7ad0b607",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -247,6 +247,7 @@ inferior_appeared (struct inferior *inf, int pid)\n {\n   /* If this is the first inferior with threads, reset the global\n      thread id.  */\n+  delete_exited_threads ();\n   if (!any_thread_p ())\n     init_thread_list ();\n "
    },
    {
      "sha": "d876634f19b4b42be5d1539d7deff20149efa757",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 23,
      "deletions": 8,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -3039,6 +3039,11 @@ proceed (CORE_ADDR addr, enum gdb_signal siggnal)\n \n   finish_state.release ();\n \n+  /* If we've switched threads above, switch back to the previously\n+     current thread.  We don't want the user to see a different\n+     selected thread.  */\n+  switch_to_thread (cur_thr);\n+\n   /* Tell the event loop to wait for it to stop.  If the target\n      supports asynchronous execution, it'll do this from within\n      target_resume.  */\n@@ -3693,14 +3698,11 @@ fetch_inferior_event (void *client_data)\n \tset_current_traceframe (-1);\n       }\n \n-    gdb::optional<scoped_restore_current_thread> maybe_restore_thread;\n-\n-    if (non_stop)\n-      /* In non-stop mode, the user/frontend should not notice a thread\n-\t switch due to internal events.  Make sure we reverse to the\n-\t user selected thread and frame after handling the event and\n-\t running any breakpoint commands.  */\n-      maybe_restore_thread.emplace ();\n+    /* The user/frontend should not notice a thread switch due to\n+       internal events.  Make sure we revert to the user selected\n+       thread and frame after handling the event and running any\n+       breakpoint commands.  */\n+    scoped_restore_current_thread restore_thread;\n \n     overlay_cache_invalid = 1;\n     /* Flush target cache before starting to handle each event.  Target\n@@ -3777,6 +3779,19 @@ fetch_inferior_event (void *client_data)\n \t\tinferior_event_handler (INF_EXEC_COMPLETE, NULL);\n \t\tcmd_done = 1;\n \t      }\n+\n+\t    /* If we got a TARGET_WAITKIND_NO_RESUMED event, then the\n+\t       previously selected thread is gone.  We have two\n+\t       choices - switch to no thread selected, or restore the\n+\t       previously selected thread (now exited).  We chose the\n+\t       later, just because that's what GDB used to do.  After\n+\t       this, \"info threads\" says \"The current thread <Thread\n+\t       ID 2> has terminated.\" instead of \"No thread\n+\t       selected.\".  */\n+\t    if (!non_stop\n+\t\t&& cmd_done\n+\t\t&& ecs->ws.kind != TARGET_WAITKIND_NO_RESUMED)\n+\t      restore_thread.dont_restore ();\n \t  }\n       }\n "
    },
    {
      "sha": "4a2591e4a5264b9d40a7cce830fc0bdaf63c94b2",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -1,3 +1,12 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/fork-running-state.exp (do_test): Adjust expected\n+\toutput.\n+\t* gdb.threads/async.c: New.\n+\t* gdb.threads/async.exp: New.\n+\t* gdb.multi/tids-gid-reset.c: New.\n+\t* gdb.multi/tids-gid-reset.exp: New.\n+\n 2020-01-10  George Barrett  <bob@bob131.so>\n \n \t* gdb.base/stap-probe.c (relocation_marker): Add dummy variable"
    },
    {
      "sha": "f28f18c8854375b5b37036b36da6fc3ccd6c8022",
      "filename": "gdb/testsuite/gdb.base/fork-running-state.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 14,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.base/fork-running-state.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.base/fork-running-state.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/fork-running-state.exp?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -98,30 +98,19 @@ proc do_test { detach_on_fork follow_fork non_stop schedule_multiple } {\n \n     set not_nl \"\\[^\\r\\n\\]*\"\n \n-    if {$detach_on_fork == \"on\" && $non_stop == \"on\" && $follow_fork == \"child\"} {\n+    if {$detach_on_fork == \"on\" && $follow_fork == \"child\"} {\n \tgdb_test \"info threads\" \\\n \t    \"  2.1 ${not_nl}\\\\\\(running\\\\\\).*No selected thread.*\"\n-    } elseif {$detach_on_fork == \"on\" && $follow_fork == \"child\"} {\n-\tgdb_test \"info threads\" \\\n-\t    \"\\\\\\* 2.1 ${not_nl}\\\\\\(running\\\\\\)\"\n     } elseif {$detach_on_fork == \"on\"} {\n \tgdb_test \"info threads\" \\\n \t    \"\\\\\\* 1 ${not_nl}\\\\\\(running\\\\\\)\"\n-    } elseif {$non_stop == \"on\"\n-\t      || ($schedule_multiple == \"on\" && $follow_fork == \"parent\")} {\n+    } elseif {$non_stop == \"on\" || $schedule_multiple == \"on\"} {\n \t# Both parent and child should be marked running, and the\n \t# parent should be selected.\n \tgdb_test \"info threads\" \\\n \t    [multi_line \\\n \t\t \"\\\\\\* 1.1 ${not_nl} \\\\\\(running\\\\\\)${not_nl}\" \\\n \t\t \"  2.1 ${not_nl} \\\\\\(running\\\\\\)\"]\n-    } elseif {$schedule_multiple == \"on\" && $follow_fork == \"child\"} {\n-\t# Both parent and child should be marked running, and the\n-\t# child should be selected.\n-\tgdb_test \"info threads\" \\\n-\t    [multi_line \\\n-\t\t \"  1.1 ${not_nl} \\\\\\(running\\\\\\)${not_nl}\" \\\n-\t\t \"\\\\\\* 2.1 ${not_nl} \\\\\\(running\\\\\\)\"]\n     } else {\n \tset test \"only $follow_fork marked running\"\n \tgdb_test_multiple \"info threads\" $test {\n@@ -131,7 +120,7 @@ proc do_test { detach_on_fork follow_fork non_stop schedule_multiple } {\n \t    -re \"\\\\\\* 1.1 ${not_nl}\\\\\\(running\\\\\\)\\r\\n  2.1 ${not_nl}\\r\\n$gdb_prompt $\" {\n \t\tgdb_assert [string eq $follow_fork \"parent\"] $test\n \t    }\n-\t    -re \"1.1 ${not_nl}\\r\\n\\\\\\* 2.1 ${not_nl}\\\\\\(running\\\\\\)\\r\\n$gdb_prompt $\" {\n+\t    -re \"\\\\\\* 1.1 ${not_nl}\\r\\n  2.1 ${not_nl}\\\\\\(running\\\\\\)\\r\\n$gdb_prompt $\" {\n \t\tgdb_assert [string eq $follow_fork \"child\"] $test\n \t    }\n \t}"
    },
    {
      "sha": "60cde1e0e8238299eba9384db7401e9fca4b15e8",
      "filename": "gdb/testsuite/gdb.multi/tids-gid-reset.c",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.multi/tids-gid-reset.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.multi/tids-gid-reset.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/tids-gid-reset.c?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -0,0 +1,22 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main (void)\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "0a3151210c9a3fc180fd94db953f9e987e649c89",
      "filename": "gdb/testsuite/gdb.multi/tids-gid-reset.exp",
      "status": "added",
      "additions": 96,
      "deletions": 0,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.multi/tids-gid-reset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.multi/tids-gid-reset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/tids-gid-reset.exp?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -0,0 +1,96 @@\n+# Copyright 2015-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check that letting the inferior exit and restarting it again resets\n+# the global TID counter, and thus the new thread 1.1 should end up\n+# with global TID == 1.\n+#\n+# Also, check the same but with another inferior still running, in\n+# which case the new thread 1.1 should end up with global TID == 3.\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} {pthreads debug}] } {\n+    return -1\n+}\n+\n+with_test_prefix \"single-inferior\" {\n+    with_test_prefix \"before restart\" {\n+\tclean_restart ${testfile}\n+\n+\tif { ![runto_main] } then {\n+\t    return -1\n+\t}\n+\n+\tgdb_test \"info threads -gid\" \"\\\\* 1 +1 +.*\"\n+    }\n+\n+    with_test_prefix \"restart\" {\n+\tgdb_continue_to_end\n+\tif { ![runto_main] } then {\n+\t    return -1\n+\t}\n+    }\n+\n+    with_test_prefix \"after restart\" {\n+\tgdb_test \"info threads -gid\" \"\\\\* 1 +1 +.*\"\n+    }\n+}\n+\n+# For the following tests, multiple inferiors are needed, therefore\n+# non-extended gdbserver is not supported.\n+if [use_gdb_stub] {\n+    untested \"using gdb stub\"\n+    return\n+}\n+\n+# Test with multiple inferiors.  This time, since we restart inferior\n+# 1 while inferior 2 still has threads, then the new thread 1.1 should\n+# end up with GID == 3, since we won't be able to reset the global\n+# thread ID counter.\n+with_test_prefix \"multi-inferior\" {\n+    gdb_test \"add-inferior\" \"Added inferior 2.*\" \"add empty inferior 2\"\n+    gdb_test \"inferior 2\" \"Switching to inferior 2 .*\" \"switch to inferior 2\"\n+    gdb_load ${binfile}\n+\n+    if ![runto_main] then {\n+\tfail \"starting inferior 2\"\n+\treturn\n+    }\n+\n+    gdb_test \"inferior 1\" \"Switching to inferior 1 .*\" \\\n+\t\"switch back to inferior 1\"\n+\n+    with_test_prefix \"before restart\" {\n+\tgdb_test \"info threads -gid\" \\\n+\t    [multi_line \\\n+\t\t \"\\\\* 1\\.1 +1 +.*\" \\\n+\t\t \"  2\\.1 +2 +.*\"]\n+    }\n+\n+    with_test_prefix \"restart\" {\n+\tgdb_continue_to_end\n+\tif { ![runto_main] } then {\n+\t    return -1\n+\t}\n+    }\n+\n+    with_test_prefix \"after restart\" {\n+\tgdb_test \"info threads -gid\" \\\n+\t    [multi_line \\\n+\t\t \"\\\\* 1\\.1 +3 +.*\" \\\n+\t\t \"  2\\.1 +2 +.*\"]\n+    }\n+}"
    },
    {
      "sha": "66492706df10be08b63ce67a371352f4125cb58a",
      "filename": "gdb/testsuite/gdb.threads/async.c",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.threads/async.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.threads/async.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/async.c?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -0,0 +1,70 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <stdlib.h>\n+#include <pthread.h>\n+\n+#define NUM 2\n+\n+static pthread_barrier_t threads_started_barrier;\n+\n+static void *\n+thread_function (void *arg)\n+{\n+  pthread_barrier_wait (&threads_started_barrier);\n+\n+  while (1)\n+    {\n+      /* Sleep a bit to give the other threads a chance to run.  */\n+      usleep (1); /* set breakpoint here */\n+    }\n+\n+  pthread_exit (NULL);\n+}\n+\n+static void\n+all_started (void)\n+{\n+}\n+\n+int\n+main ()\n+{\n+  pthread_t threads[NUM];\n+  long i;\n+\n+  pthread_barrier_init (&threads_started_barrier, NULL, NUM + 1);\n+\n+  for (i = 1; i <= NUM; i++)\n+    {\n+      int res;\n+\n+      res = pthread_create (&threads[i - 1],\n+\t\t\t    NULL,\n+\t\t\t    thread_function, NULL);\n+    }\n+\n+  pthread_barrier_wait (&threads_started_barrier);\n+\n+  all_started ();\n+\n+  sleep (180);\n+\n+  exit (EXIT_SUCCESS);\n+}"
    },
    {
      "sha": "d93b6eb90e882b357b55b60e2746ed6b3ea7b5e1",
      "filename": "gdb/testsuite/gdb.threads/async.exp",
      "status": "added",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.threads/async.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/testsuite/gdb.threads/async.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/async.exp?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -0,0 +1,98 @@\n+# Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile {debug pthreads}] == -1} {\n+    return -1\n+}\n+\n+# At this point GDB will be busy handling the breakpoint hits and\n+# re-resuming the program.  Even if GDB internally switches thread\n+# context, the user should not notice it.  The following part of the\n+# testcase ensures that.\n+\n+# Switch to thread EXPECTED_THR, and then confirm that the thread\n+# stays selected.\n+\n+proc test_current_thread {expected_thr} {\n+    global decimal\n+    global gdb_prompt\n+    global binfile\n+\n+    clean_restart $binfile\n+\n+    if {![runto \"all_started\"]} {\n+\tfail \"could not run to all_started\"\n+\treturn\n+    }\n+\n+    # Set a breakpoint that continuously fires but doeesn't cause a stop.\n+    gdb_breakpoint [concat [gdb_get_line_number \"set breakpoint here\"] \" if 0\"]\n+\n+    gdb_test \"thread $expected_thr\" \"Switching to thread $expected_thr .*\" \\\n+\t\"switch to thread $expected_thr\"\n+\n+    # Continue the program in the background.\n+    set test \"continue&\"\n+    gdb_test_multiple \"continue&\" $test {\n+\t-re \"Continuing\\\\.\\r\\n$gdb_prompt \" {\n+\t    pass $test\n+\t}\n+    }\n+\n+    set test \"current thread is $expected_thr\"\n+    set fails 0\n+    for {set i 0} {$i < 10} {incr i} {\n+\tafter 200\n+\n+\tset cur_thread 0\n+\tgdb_test_multiple \"thread\" $test {\n+\t    -re \"Current thread is ($decimal) .*$gdb_prompt \" {\n+\t\tset cur_thread $expect_out(1,string)\n+\t    }\n+\t}\n+\n+\tif {$cur_thread != $expected_thr} {\n+\t    incr fails\n+\t}\n+    }\n+\n+    gdb_assert {$fails == 0} $test\n+\n+    # Explicitly interrupt the target, because in all-stop/remote,\n+    # that's all we can do when the target is running.  If we don't do\n+    # this, we'd time out trying to kill the target, while bringing\n+    # down gdb & gdbserver.\n+    set test \"interrupt\"\n+    gdb_test_multiple $test $test {\n+\t-re \"^interrupt\\r\\n$gdb_prompt \" {\n+\t    gdb_test_multiple \"\" $test {\n+\t\t-re \"Thread .* received signal SIGINT, Interrupt\\\\.\" {\n+\t\t    pass $test\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+# Try once with each thread as current, to avoid missing a bug just\n+# because some part of GDB manages to switch to the right thread by\n+# chance.\n+for {set thr 1} {$thr <= 3} {incr thr} {\n+    with_test_prefix \"thread $thr\" {\n+\ttest_current_thread $thr\n+    }\n+}"
    },
    {
      "sha": "630899c8cb86301127fc214680379f9d1680dfe0",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/873657b9e824943ae44c12966c29cbbcd21c986f/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=873657b9e824943ae44c12966c29cbbcd21c986f",
      "patch": "@@ -1375,7 +1375,8 @@ restore_selected_frame (struct frame_id a_frame_id, int frame_level)\n     }\n }\n \n-scoped_restore_current_thread::~scoped_restore_current_thread ()\n+void\n+scoped_restore_current_thread::restore ()\n {\n   /* If an entry of thread_info was previously selected, it won't be\n      deleted because we've increased its refcount.  The thread represented\n@@ -1402,6 +1403,22 @@ scoped_restore_current_thread::~scoped_restore_current_thread ()\n       && target_has_stack\n       && target_has_memory)\n     restore_selected_frame (m_selected_frame_id, m_selected_frame_level);\n+}\n+\n+scoped_restore_current_thread::~scoped_restore_current_thread ()\n+{\n+  if (!m_dont_restore)\n+    {\n+      try\n+\t{\n+\t  restore ();\n+\t}\n+      catch (const gdb_exception &ex)\n+\t{\n+\t  /* We're in a dtor, there's really nothing else we can do\n+\t     but swallow the exception.  */\n+\t}\n+    }\n \n   if (m_thread != NULL)\n     m_thread->decref ();"
    }
  ]
}