{
  "sha": "41e37c9d0ac9dfbdaf725112d510cb10e5854f3d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDFlMzdjOWQwYWM5ZGZiZGFmNzI1MTEyZDUxMGNiMTBlNTg1NGYzZA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-03T12:45:53Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-03T12:45:53Z"
    },
    "message": "[gdb/testsuite] Add untested case in selftest_setup\n\nWhen building gdb with \"-Wall -O2 -g -flto=auto\", I run into:\n...\nFAIL: gdb.gdb/python-helper.exp: breakpoint in captured_main \\\n  (got interactive prompt)\nFAIL: gdb.gdb/python-helper.exp: run until breakpoint at captured_main\nWARNING: Couldn't test self\n...\nand similar in gdb.gdb/selftest.exp.\n\nThe first FAIL in more detail:\n...\n(gdb) break captured_main^M\nFunction \"captured_main\" not defined.^M\nMake breakpoint pending on future shared library load? (y or [n]) n^M\n(gdb) FAIL: gdb.gdb/python-helper.exp: breakpoint in captured_main \\\n  (got interactive prompt)\n...\n\nThe problem is that lto has optimized away the captured_main function\nand consequently the selftests dependent on that cannot run.\n\nFix this by:\n- using gdb_breakpoint to detect failure to set the breakpoint\n- handling the failure to set a breakpoint by calling untested\n- not emitting the warning if we've already got untested\nsuch that we have:\n...\n(gdb) UNTESTED: gdb.gdb/python-helper.exp: Cannot set breakpoint at \\\n  captured_main, skipping testcase.\n...\n\ngdb/testsuite/ChangeLog:\n\n2021-09-02  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/selftest-support.exp: Emit untested when not being able to set\n\tbreakpoint.",
    "tree": {
      "sha": "5e4c4e4bb08a115b74448c3abedb9c5741afd989",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5e4c4e4bb08a115b74448c3abedb9c5741afd989"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/41e37c9d0ac9dfbdaf725112d510cb10e5854f3d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41e37c9d0ac9dfbdaf725112d510cb10e5854f3d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/41e37c9d0ac9dfbdaf725112d510cb10e5854f3d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41e37c9d0ac9dfbdaf725112d510cb10e5854f3d/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "669d5115345a3f3dc1c06aec31098eb4b349a6d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/669d5115345a3f3dc1c06aec31098eb4b349a6d0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/669d5115345a3f3dc1c06aec31098eb4b349a6d0"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 9,
    "deletions": 7
  },
  "files": [
    {
      "sha": "325ea997d5e271e44f1ad7c4ff7659a3bf06b970",
      "filename": "gdb/testsuite/lib/selftest-support.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41e37c9d0ac9dfbdaf725112d510cb10e5854f3d/gdb/testsuite/lib/selftest-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41e37c9d0ac9dfbdaf725112d510cb10e5854f3d/gdb/testsuite/lib/selftest-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/selftest-support.exp?ref=41e37c9d0ac9dfbdaf725112d510cb10e5854f3d",
      "patch": "@@ -40,6 +40,8 @@ proc find_gdb { arg } {\n # EXECUTABLE is the gdb to use.\n # FUNCTION is the function to break in, either captured_main\n # or captured_command_loop.\n+# Return 0 in case of success, -1 in case of failure, and -2 in case of\n+# skipping the test-case.\n \n proc selftest_setup { executable function } {\n     global gdb_prompt\n@@ -73,14 +75,14 @@ proc selftest_setup { executable function } {\n \n     if { $gdb_file_cmd_debug_info != \"debug\" } then {\n \tuntested \"no debug information, skipping testcase.\"\n-\treturn -1\n+\treturn -2\n     }\n \n-    # Set a breakpoint at main.  Allow more than one location, as\n-    # workaround for PR26096 - \"gdb sets breakpoint at cold clone\".\n-    gdb_test \"break $function\" \\\n-            \"Breakpoint.*at.* (file.*, line|locations).*\" \\\n-            \"breakpoint in $function\"\n+    # Set a breakpoint at $function.\n+    if { [gdb_breakpoint $function \"no-message\"] != 1 } {\n+\tuntested \"Cannot set breakpoint at $function, skipping testcase.\"\n+\treturn -2\n+    }\n \n     # run yourself\n     # It may take a very long time for the inferior gdb to start (lynx),\n@@ -165,7 +167,7 @@ proc do_self_tests {function body} {\n     gdb_exit\n     catch \"remote_file host delete $file\"\n \n-    if {$result < 0} then {\n+    if {$result == -1} then {\n \twarning \"Couldn't test self\"\n     }\n }"
    }
  ]
}