{
  "sha": "373d7ac0f158764e32d621b4d311771189001f1c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzczZDdhYzBmMTU4NzY0ZTMyZDYyMWI0ZDMxMTc3MTE4OTAwMWYxYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-18T22:30:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-18T22:33:04Z"
    },
    "message": "gdb: change print format of flag enums with value 0\n\nIf a flag enum has value 0 and the enumeration type does not have an\nenumerator with value 0, we currently print:\n\n  $1 = (unknown: 0x0)\n\nI don't like the display of \"unknown\" here, since for flags, 0 is a\nan expected value.  It just means that no flags are set.  This patch\nmakes it so that we print it as a simple 0 in this situation:\n\n  $1 = 0\n\nIf there is an enumerator with value 0, it is still printed using that\nenumerator, for example (from the test):\n\n  $1 = FE_NONE\n\ngdb/ChangeLog:\n\n\t* valprint.c (generic_val_print_enum_1): When printing a flag\n\tenum with value 0 and there is no enumerator with value 0, print\n\tjust \"0\" instead of \"(unknown: 0x0)\".\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/printcmds.exp (test_print_enums): Update expected\n\toutput.",
    "tree": {
      "sha": "b84c51bb2cf862f65a44d85abd3d8fe8d5f5b3cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b84c51bb2cf862f65a44d85abd3d8fe8d5f5b3cd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/373d7ac0f158764e32d621b4d311771189001f1c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/373d7ac0f158764e32d621b4d311771189001f1c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/373d7ac0f158764e32d621b4d311771189001f1c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/373d7ac0f158764e32d621b4d311771189001f1c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b29a2df0002f541b5408ee28f1f8e88c844d2ffc"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 36,
    "deletions": 8
  },
  "files": [
    {
      "sha": "9d295682e8deb0c22df34bf5722758708b224261",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373d7ac0f158764e32d621b4d311771189001f1c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373d7ac0f158764e32d621b4d311771189001f1c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=373d7ac0f158764e32d621b4d311771189001f1c",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* valprint.c (generic_val_print_enum_1): When printing a flag\n+\tenum with value 0 and there is no enumerator with value 0, print\n+\tjust \"0\" instead of \"(unknown: 0x0)\".\n+\n 2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* valprint.c (generic_val_print_enum_1): Print unknown part of"
    },
    {
      "sha": "8c09052f9f5c073ee4ebb294147d0d9171851b63",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373d7ac0f158764e32d621b4d311771189001f1c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373d7ac0f158764e32d621b4d311771189001f1c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=373d7ac0f158764e32d621b4d311771189001f1c",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.base/printcmds.exp (test_print_enums): Update expected\n+\toutput.\n+\n 2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.base/printcmds.exp (test_print_enums): Expect hex values"
    },
    {
      "sha": "bd2afc8696f0ee142634b5ce473ea9081e1957f2",
      "filename": "gdb/testsuite/gdb.base/printcmds.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373d7ac0f158764e32d621b4d311771189001f1c/gdb/testsuite/gdb.base/printcmds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373d7ac0f158764e32d621b4d311771189001f1c/gdb/testsuite/gdb.base/printcmds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.exp?ref=373d7ac0f158764e32d621b4d311771189001f1c",
      "patch": "@@ -743,7 +743,7 @@ proc test_print_enums {} {\n     gdb_test \"print (enum flag_enum) 0x0\" [string_to_regexp \" = FE_NONE\"]\n \n     # Print a flag enum with value 0, where no enumerator has value 0.\n-    gdb_test \"print flag_enum_without_zero\" [string_to_regexp \" = (unknown: 0x0)\"]\n+    gdb_test \"print flag_enum_without_zero\" [string_to_regexp \" = 0\"]\n \n     # Print a flag enum with unknown bits set.\n     gdb_test \"print (enum flag_enum) 0xf1\" [string_to_regexp \" = (FE_ONE | unknown: 0xf0)\"]"
    },
    {
      "sha": "ee370228eda541792b5688d6d29ebf364ec31323",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 24,
      "deletions": 7,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373d7ac0f158764e32d621b4d311771189001f1c/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373d7ac0f158764e32d621b4d311771189001f1c/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=373d7ac0f158764e32d621b4d311771189001f1c",
      "patch": "@@ -635,7 +635,6 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \t appropriate.  The enum may have multiple enumerators representing\n \t the same bit, in which case we choose to only print the first one\n \t we find.  */\n-      fputs_filtered (\"(\", stream);\n       for (i = 0; i < len; ++i)\n \t{\n \t  QUIT;\n@@ -647,24 +646,42 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \n \t  if ((val & enumval) != 0)\n \t    {\n-\t      if (!first)\n+\t      if (first)\n+\t\t{\n+\t\t  fputs_filtered (\"(\", stream);\n+\t\t  first = 0;\n+\t\t}\n+\t      else\n \t\tfputs_filtered (\" | \", stream);\n-\t      first = 0;\n \n \t      val &= ~TYPE_FIELD_ENUMVAL (type, i);\n \t      fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n \t    }\n \t}\n \n-      if (first || val != 0)\n+      if (val != 0)\n \t{\n-\t  if (!first)\n+\t  /* There are leftover bits, print them.  */\n+\t  if (first)\n+\t    fputs_filtered (\"(\", stream);\n+\t  else\n \t    fputs_filtered (\" | \", stream);\n+\n \t  fputs_filtered (\"unknown: 0x\", stream);\n \t  print_longest (stream, 'x', 0, val);\n+\t  fputs_filtered (\")\", stream);\n+\t}\n+      else if (first)\n+\t{\n+\t  /* Nothing has been printed and the value is 0, the enum value must\n+\t     have been 0.  */\n+\t  fputs_filtered (\"0\", stream);\n+\t}\n+      else\n+\t{\n+\t  /* Something has been printed, close the parenthesis.  */\n+\t  fputs_filtered (\")\", stream);\n \t}\n-\n-      fputs_filtered (\")\", stream);\n     }\n   else\n     print_longest (stream, 'd', 0, val);"
    }
  ]
}