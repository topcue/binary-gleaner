{
  "sha": "bb6203bf1db908741de9355a6ae6969324e381d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmI2MjAzYmYxZGI5MDg3NDFkZTkzNTVhNmFlNjk2OTMyNGUzODFkOA==",
  "commit": {
    "author": {
      "name": "Alexandra H\u00e1jkov\u00e1",
      "email": "ahajkova@redhat.com",
      "date": "2021-05-20T18:55:35Z"
    },
    "committer": {
      "name": "Alexandra H\u00e1jkov\u00e1",
      "email": "ahajkova@redhat.com",
      "date": "2021-05-20T19:03:47Z"
    },
    "message": "cli-script: use unique_ptr to not leak next struct\n\nIn cli/cli-script.c, process_next_line() allocates memory\nwhich will eventually end up being assigned to the 'next'\nfield in struct command_line.  However, in a case\nrecurse_read_control_structure returns 'invalid_control'\nthis memory is leaked. This commit uses std::unique_ptr\nas appropriate to prevent this leakage.\n\nThis issue was found by coverity scanning.\n\ngdb/ChangeLog:\n\n        * cli/cli-script.h (command_line_up): New unique_ptr typedef.\n\t* cli/cli-script.c (multi_line_command_p): Use unique_ptr\n        command_line_up instead of struct command_line.\n\t(build_command_line): Likewise.\n\t(get_command_line): Update the cmd function call parameter.\n\t(process_next_line):  Use unique_ptr command_line_up instead\n        of struct command_line.\n\t(recurse_read_control_structure): Change the the type of\n        next to command_line_up.\n\t(read_command_lines_1): Change type of `next' to be\n        command_line_up and update all references of `next'\n        accordingly.",
    "tree": {
      "sha": "23cf6d55b4b3d7f5fb5a391991e52b7b2e69a029",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/23cf6d55b4b3d7f5fb5a391991e52b7b2e69a029"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bb6203bf1db908741de9355a6ae6969324e381d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb6203bf1db908741de9355a6ae6969324e381d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bb6203bf1db908741de9355a6ae6969324e381d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb6203bf1db908741de9355a6ae6969324e381d8/comments",
  "author": {
    "login": "sasshka",
    "id": 7370031,
    "node_id": "MDQ6VXNlcjczNzAwMzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7370031?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sasshka",
    "html_url": "https://github.com/sasshka",
    "followers_url": "https://api.github.com/users/sasshka/followers",
    "following_url": "https://api.github.com/users/sasshka/following{/other_user}",
    "gists_url": "https://api.github.com/users/sasshka/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sasshka/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sasshka/subscriptions",
    "organizations_url": "https://api.github.com/users/sasshka/orgs",
    "repos_url": "https://api.github.com/users/sasshka/repos",
    "events_url": "https://api.github.com/users/sasshka/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sasshka/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sasshka",
    "id": 7370031,
    "node_id": "MDQ6VXNlcjczNzAwMzE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7370031?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sasshka",
    "html_url": "https://github.com/sasshka",
    "followers_url": "https://api.github.com/users/sasshka/followers",
    "following_url": "https://api.github.com/users/sasshka/following{/other_user}",
    "gists_url": "https://api.github.com/users/sasshka/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sasshka/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sasshka/subscriptions",
    "organizations_url": "https://api.github.com/users/sasshka/orgs",
    "repos_url": "https://api.github.com/users/sasshka/repos",
    "events_url": "https://api.github.com/users/sasshka/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sasshka/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a01ec4c0368048fb5ea1ba1b3af9afbd651b529",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a01ec4c0368048fb5ea1ba1b3af9afbd651b529",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a01ec4c0368048fb5ea1ba1b3af9afbd651b529"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 55,
    "deletions": 36
  },
  "files": [
    {
      "sha": "916b17e3951606feee3340eb33c3f174b0bafa8b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6203bf1db908741de9355a6ae6969324e381d8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6203bf1db908741de9355a6ae6969324e381d8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bb6203bf1db908741de9355a6ae6969324e381d8",
      "patch": "@@ -1,3 +1,19 @@\n+2021-05-20  Alexandra H\u00e1jkov\u00e1  <ahajkova@redhat.com>\n+\t    Pedro Alves  <pedro@palves.net>\n+\n+\t* cli/cli-script.h (command_line_up): New unique_ptr typedef.\n+\t* cli/cli-script.c (multi_line_command_p): Use unique_ptr\n+\tcommand_line_up instead of struct command_line.\n+\t(build_command_line): Likewise.\n+\t(get_command_line): Update the cmd function call parameter.\n+\t(process_next_line):  Use unique_ptr command_line_up instead\n+\tof struct command_line.\n+\t(recurse_read_control_structure): Change the the type of\n+\tnext to command_line_up.\n+\t(read_command_lines_1): Change type of `next' to be\n+\tcommand_line_up and update all references of `next'\n+\taccordingly.\n+\n 2021-05-20  Alexandra H\u00e1jkov\u00e1  <ahajkova@redhat.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."
    },
    {
      "sha": "984636779023ac92abc5b87323281b8620beeac7",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 36,
      "deletions": 36,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6203bf1db908741de9355a6ae6969324e381d8/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6203bf1db908741de9355a6ae6969324e381d8/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=bb6203bf1db908741de9355a6ae6969324e381d8",
      "patch": "@@ -155,7 +155,7 @@ multi_line_command_p (enum command_control_type type)\n /* Allocate, initialize a new command line structure for one of the\n    control commands (if/while).  */\n \n-static struct command_line *\n+static command_line_up\n build_command_line (enum command_control_type type, const char *args)\n {\n   if (args == NULL || *args == '\\0')\n@@ -171,7 +171,7 @@ build_command_line (enum command_control_type type, const char *args)\n     }\n   gdb_assert (args != NULL);\n \n-  return new struct command_line (type, xstrdup (args));\n+  return command_line_up (new command_line (type, xstrdup (args)));\n }\n \n /* Build and return a new command structure for the control commands\n@@ -181,7 +181,7 @@ counted_command_line\n get_command_line (enum command_control_type type, const char *arg)\n {\n   /* Allocate and build a new command line structure.  */\n-  counted_command_line cmd (build_command_line (type, arg),\n+  counted_command_line cmd (build_command_line (type, arg).release (),\n \t\t\t    command_lines_deleter ());\n \n   /* Read in the body of this command.  */\n@@ -957,7 +957,7 @@ line_first_arg (const char *p)\n    Otherwise, only \"end\" is recognized.  */\n \n static enum misc_command_type\n-process_next_line (const char *p, struct command_line **command,\n+process_next_line (const char *p, command_line_up *command,\n \t\t   int parse_commands,\n \t\t   gdb::function_view<void (const char *)> validator)\n \n@@ -1055,32 +1055,22 @@ process_next_line (const char *p, struct command_line **command,\n \t  *command = build_command_line (guile_control, \"\");\n \t}\n       else if (p_end - p == 10 && startswith (p, \"loop_break\"))\n-\t*command = new struct command_line (break_control);\n+\t*command = command_line_up (new command_line (break_control));\n       else if (p_end - p == 13 && startswith (p, \"loop_continue\"))\n-\t*command = new struct command_line (continue_control);\n+\t*command = command_line_up (new command_line (continue_control));\n       else\n \tnot_handled = 1;\n     }\n \n   if (!parse_commands || not_handled)\n     {\n       /* A normal command.  */\n-      *command = new struct command_line (simple_control,\n-\t\t\t\t\t  savestring (p, p_end - p));\n+      *command = command_line_up (new command_line (simple_control,\n+\t\t\t\t\t\t    savestring (p, p_end - p)));\n     }\n \n   if (validator)\n-    {\n-      try\n-\t{\n-\t  validator ((*command)->line);\n-\t}\n-      catch (const gdb_exception &ex)\n-\t{\n-\t  free_command_lines (command);\n-\t  throw;\n-\t}\n-    }\n+    validator ((*command)->line);\n \n   /* Nothing special.  */\n   return ok_command;\n@@ -1097,10 +1087,11 @@ recurse_read_control_structure (gdb::function_view<const char * ()> read_next_li\n {\n   enum misc_command_type val;\n   enum command_control_type ret;\n-  struct command_line *child_tail, *next;\n+  struct command_line *child_tail;\n   counted_command_line *current_body = &current_cmd->body_list_0;\n+  command_line_up next;\n \n-  child_tail = NULL;\n+  child_tail = nullptr;\n \n   /* Sanity checks.  */\n   if (current_cmd->control_type == simple_control)\n@@ -1111,8 +1102,8 @@ recurse_read_control_structure (gdb::function_view<const char * ()> read_next_li\n     {\n       dont_repeat ();\n \n-      next = NULL;\n-      val = process_next_line (read_next_line_func (), &next, \n+      next = nullptr;\n+      val = process_next_line (read_next_line_func (), &next,\n \t\t\t       current_cmd->control_type != python_control\n \t\t\t       && current_cmd->control_type != guile_control\n \t\t\t       && current_cmd->control_type != compile_control,\n@@ -1144,7 +1135,7 @@ recurse_read_control_structure (gdb::function_view<const char * ()> read_next_li\n \t      && current_body == &current_cmd->body_list_0)\n \t    {\n \t      current_body = &current_cmd->body_list_1;\n-\t      child_tail = NULL;\n+\t      child_tail = nullptr;\n \t      continue;\n \t    }\n \t  else\n@@ -1154,21 +1145,26 @@ recurse_read_control_structure (gdb::function_view<const char * ()> read_next_li\n \t    }\n \t}\n \n-      if (child_tail)\n+      /* Transfer ownership of NEXT to the command's body list.  */\n+      if (child_tail != nullptr)\n \t{\n-\t  child_tail->next = next;\n+\t  child_tail->next = next.release ();\n+\t  child_tail = child_tail->next;\n \t}\n       else\n-\t*current_body = counted_command_line (next, command_lines_deleter ());\n-\n-      child_tail = next;\n+\t{\n+\t  child_tail = next.get ();\n+\t  *current_body = counted_command_line (next.release (),\n+\t\t\t\t\t\tcommand_lines_deleter ());\n+\t}\n \n       /* If the latest line is another control structure, then recurse\n \t on it.  */\n-      if (multi_line_command_p (next->control_type))\n+      if (multi_line_command_p (child_tail->control_type))\n \t{\n \t  control_level++;\n-\t  ret = recurse_read_control_structure (read_next_line_func, next,\n+\t  ret = recurse_read_control_structure (read_next_line_func,\n+\t\t\t\t\t\tchild_tail,\n \t\t\t\t\t\tvalidator);\n \t  control_level--;\n \n@@ -1240,10 +1236,11 @@ read_command_lines_1 (gdb::function_view<const char * ()> read_next_line_func,\n \t\t      int parse_commands,\n \t\t      gdb::function_view<void (const char *)> validator)\n {\n-  struct command_line *tail, *next;\n+  struct command_line *tail;\n   counted_command_line head (nullptr, command_lines_deleter ());\n   enum command_control_type ret;\n   enum misc_command_type val;\n+  command_line_up next;\n \n   control_level = 0;\n   tail = NULL;\n@@ -1273,23 +1270,26 @@ read_command_lines_1 (gdb::function_view<const char * ()> read_next_line_func,\n       if (multi_line_command_p (next->control_type))\n \t{\n \t  control_level++;\n-\t  ret = recurse_read_control_structure (read_next_line_func, next,\n+\t  ret = recurse_read_control_structure (read_next_line_func, next.get (),\n \t\t\t\t\t\tvalidator);\n \t  control_level--;\n \n \t  if (ret == invalid_control)\n \t    break;\n \t}\n \n+      /* Transfer ownership of NEXT to the HEAD list.  */\n       if (tail)\n \t{\n-\t  tail->next = next;\n+\t  tail->next = next.release ();\n+\t  tail = tail->next;\n \t}\n       else\n \t{\n-\t  head = counted_command_line (next, command_lines_deleter ());\n+\t  tail = next.get ();\n+\t  head = counted_command_line (next.release (),\n+\t\t\t\t       command_lines_deleter ());\n \t}\n-      tail = next;\n     }\n \n   dont_repeat ();"
    },
    {
      "sha": "8c98fdde65563c76265dc2d79878208b8eabcd33",
      "filename": "gdb/cli/cli-script.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6203bf1db908741de9355a6ae6969324e381d8/gdb/cli/cli-script.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6203bf1db908741de9355a6ae6969324e381d8/gdb/cli/cli-script.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.h?ref=bb6203bf1db908741de9355a6ae6969324e381d8",
      "patch": "@@ -66,6 +66,9 @@ struct command_lines_deleter\n /* A reference-counted struct command_line.  */\n typedef std::shared_ptr<command_line> counted_command_line;\n \n+/* A unique_ptr specialization for command_line.  */\n+typedef std::unique_ptr<command_line, command_lines_deleter> command_line_up;\n+\n /* * Structure for saved commands lines (for breakpoints, defined\n    commands, etc).  */\n "
    }
  ]
}