{
  "sha": "816995444667f936c918bc76f3945105c4e1ec1b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODE2OTk1NDQ0NjY3ZjkzNmM5MThiYzc2ZjM5NDUxMDVjNGUxZWMxYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-31T04:23:27Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-31T04:34:21Z"
    },
    "message": "alpha-vms: sanity checks for image_write\n\n\t* vms-alpha.c (image_write): Check bounds for sections without\n\tcontents too.  Error on non-zero write to section without\n\tcontents.\n\t(_bfd_vms_slurp_etir): Check return of image_write* functions.",
    "tree": {
      "sha": "27a1eaa1afd76a1468ce87332a10ed51ac44e51b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/27a1eaa1afd76a1468ce87332a10ed51ac44e51b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/816995444667f936c918bc76f3945105c4e1ec1b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/816995444667f936c918bc76f3945105c4e1ec1b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/816995444667f936c918bc76f3945105c4e1ec1b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/816995444667f936c918bc76f3945105c4e1ec1b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b3b360dec78845e30e7994cd633905da5668a96c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3b360dec78845e30e7994cd633905da5668a96c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b3b360dec78845e30e7994cd633905da5668a96c"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 52,
    "deletions": 25
  },
  "files": [
    {
      "sha": "1878fd79716df9e930d72c6f3cd8c72aca72194b",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/816995444667f936c918bc76f3945105c4e1ec1b/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/816995444667f936c918bc76f3945105c4e1ec1b/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=816995444667f936c918bc76f3945105c4e1ec1b",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* vms-alpha.c (image_write): Check bounds for sections without\n+\tcontents too.  Error on non-zero write to section without\n+\tcontents.\n+\t(_bfd_vms_slurp_etir): Check return of image_write* functions.\n+\n 2020-03-31  Alan Modra  <amodra@gmail.com>\n \n \t* tekhex.c (pass_over): Check is_eof before reading buffer."
    },
    {
      "sha": "713697ae46961929bf07d56807e4c1900d42a3d6",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 45,
      "deletions": 25,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/816995444667f936c918bc76f3945105c4e1ec1b/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/816995444667f936c918bc76f3945105c4e1ec1b/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=816995444667f936c918bc76f3945105c4e1ec1b",
      "patch": "@@ -1611,26 +1611,35 @@ dst_retrieve_location (bfd *abfd, bfd_vma *loc)\n static bfd_boolean\n image_write (bfd *abfd, unsigned char *ptr, unsigned int size)\n {\n+  asection *sec = PRIV (image_section);\n+  size_t off = PRIV (image_offset);\n+\n+  /* Check bounds.  */\n+  if (off > sec->size\n+      || size > sec->size - off)\n+    {\n+      bfd_set_error (bfd_error_bad_value);\n+      return FALSE;\n+    }\n+\n #if VMS_DEBUG\n   _bfd_vms_debug (8, \"image_write from (%p, %d) to (%ld)\\n\", ptr, size,\n-\t\t  (long)PRIV (image_offset));\n+\t\t  (long) off));\n #endif\n \n   if (PRIV (image_section)->contents != NULL)\n+    memcpy (sec->contents + off, ptr, size);\n+  else\n     {\n-      asection *sec = PRIV (image_section);\n-      size_t off = PRIV (image_offset);\n-\n-      /* Check bounds.  */\n-      if (off > sec->size\n-\t  || size > sec->size - off)\n-\t{\n-\t  bfd_set_error (bfd_error_bad_value);\n-\t  return FALSE;\n-\t}\n-\n-      memcpy (sec->contents + off, ptr, size);\n+      unsigned int i;\n+      for (i = 0; i < size; i++)\n+\tif (ptr[i] != 0)\n+\t  {\n+\t    bfd_set_error (bfd_error_bad_value);\n+\t    return FALSE;\n+\t  }\n     }\n+\n #if VMS_DEBUG\n   _bfd_hexdump (9, ptr, size, 0);\n #endif\n@@ -1998,7 +2007,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t    return FALSE;\n \t  if (rel1 != RELC_NONE)\n \t    goto bad_context;\n-\t  image_write_b (abfd, (unsigned int) op1 & 0xff);\n+\t  if (!image_write_b (abfd, (unsigned int) op1 & 0xff))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store word: pop stack, write word\n@@ -2008,7 +2018,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t    return FALSE;\n \t  if (rel1 != RELC_NONE)\n \t    goto bad_context;\n-\t  image_write_w (abfd, (unsigned int) op1 & 0xffff);\n+\t  if (!image_write_w (abfd, (unsigned int) op1 & 0xffff))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store longword: pop stack, write longword\n@@ -2034,7 +2045,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t      if (!alpha_vms_add_lw_reloc (info))\n \t\treturn FALSE;\n \t    }\n-\t  image_write_l (abfd, op1);\n+\t  if (!image_write_l (abfd, op1))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store quadword: pop stack, write quadword\n@@ -2056,7 +2068,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t      if (!alpha_vms_add_qw_reloc (info))\n \t\treturn FALSE;\n \t    }\n-\t  image_write_q (abfd, op1);\n+\t  if (!image_write_q (abfd, op1))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store immediate repeated: pop stack for repeat count\n@@ -2074,7 +2087,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t    if (rel1 != RELC_NONE)\n \t      goto bad_context;\n \t    while (op1-- > 0)\n-\t      image_write (abfd, ptr + 4, size);\n+\t      if (!image_write (abfd, ptr + 4, size))\n+\t\treturn FALSE;\n \t  }\n \t  break;\n \n@@ -2099,7 +2113,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t\t    return FALSE;\n \t\t}\n \t    }\n-\t  image_write_q (abfd, op1);\n+\t  if (!image_write_q (abfd, op1))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store code address: write address of entry point\n@@ -2131,7 +2146,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t\t  abort ();\n \t\t}\n \t    }\n-\t  image_write_q (abfd, op1);\n+\t  if (!image_write_q (abfd, op1))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store offset to psect: pop stack, add low 32 bits to base of psect\n@@ -2145,7 +2161,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \n \t  op1 = alpha_vms_fix_sec_rel (abfd, info, rel1, op1);\n \t  rel1 = RELC_REL;\n-\t  image_write_q (abfd, op1);\n+\t  if (!image_write_q (abfd, op1))\n+\t    return FALSE;\n \t  break;\n \n \t  /* Store immediate\n@@ -2158,7 +2175,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t    if (ptr + 4 > maxptr)\n \t      goto corrupt_etir;\n \t    size = bfd_getl32 (ptr);\n-\t    image_write (abfd, ptr + 4, size);\n+\t    if (!image_write (abfd, ptr + 4, size))\n+\t      return FALSE;\n \t  }\n \t  break;\n \n@@ -2173,7 +2191,8 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n #if 0\n \t  abort ();\n #endif\n-\t  image_write_l (abfd, op1);\n+\t  if (!image_write_l (abfd, op1))\n+\t    return FALSE;\n \t  break;\n \n \tcase ETIR__C_STO_RB:\n@@ -2246,8 +2265,9 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t      op1 = 0;\n \t      op2 = 0;\n \t    }\n-\t  image_write_q (abfd, op1);\n-\t  image_write_q (abfd, op2);\n+\t  if (!image_write_q (abfd, op1)\n+\t      || !image_write_q (abfd, op2))\n+\t    return FALSE;\n \t  break;\n \n \t  /* 205 Store-conditional NOP at address of global"
    }
  ]
}