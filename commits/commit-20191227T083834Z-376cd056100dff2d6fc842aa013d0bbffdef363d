{
  "sha": "376cd056100dff2d6fc842aa013d0bbffdef363d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzc2Y2QwNTYxMDBkZmYyZDZmYzg0MmFhMDEzZDBiYmZmZGVmMzYzZA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-12-27T08:38:34Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-12-27T08:38:34Z"
    },
    "message": "x86-64: fix Intel64 handling of branch with data16 prefix\n\nThe expectation of x86-64-branch-3 for \"call\" / \"jmp\" with an obvious\ndirect destination to translate to an indirect _far_ branch is plain\nwrong. The operand size prefix should have no effect at all on the\ninterpretation of the operand. The main underlying issue here is that\nthe Intel64 templates of the direct branches don't include Disp16, yet\nvarious assumptions exist that it would always be there when there's\nalso Disp32/Disp32S, toggled by the operand size prefix (which is\nbeing ignored by direct branches in Intel64 mode).\n\nAlong these lines it was also wrong to base the displacement width\ndecision solely on the operand size prefix: REX.W cancels this effect\nand hence needs taking into consideration, too.\n\nA disassembler change is needed here as well: XBEGIN was wrongly treated\nthe same as direct CALL/JMP, which isn't the case - the operand size\nprefix does affect displacement size there, it's merely ignored when it\ncomes to updating [ER]IP.",
    "tree": {
      "sha": "2fb3cf2b8cfcc1a3fe9cdda133e21fa0e4146377",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2fb3cf2b8cfcc1a3fe9cdda133e21fa0e4146377"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/376cd056100dff2d6fc842aa013d0bbffdef363d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/376cd056100dff2d6fc842aa013d0bbffdef363d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/376cd056100dff2d6fc842aa013d0bbffdef363d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/376cd056100dff2d6fc842aa013d0bbffdef363d/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48bcea9f48cce70005307befbc604de3618bbaf7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48bcea9f48cce70005307befbc604de3618bbaf7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48bcea9f48cce70005307befbc604de3618bbaf7"
    }
  ],
  "stats": {
    "total": 112,
    "additions": 85,
    "deletions": 27
  },
  "files": [
    {
      "sha": "578d76fe1aa96dbf99ab7a5ee73837aa02261950",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -1,3 +1,16 @@\n+2019-12-27  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (flip_code16): New.\n+\t(output_branch, output_jump): Use it.\n+\t(i386_displacement): Restrict template set to just direct\n+\tbranches when handling a respective operand. Don't set Disp16\n+\twhen in Intel64 mode and there's a respective template.\n+\t* testsuite/gas/i386/i386.exp: Convert x86-64-branch-3 from list\n+\tto dump test. Drop its XFail again.\n+\t* testsuite/gas/i386/x86-64-branch-3.d: New.\n+\t* testsuite/gas/i386/x86-64-branch-3.l: Delete.\n+\t* testsuite/gas/i386/x86-64-branch-3.s: Add XBEGIN case.\n+\n 2019-12-27  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (i386_addressing_mode): Declare."
    },
    {
      "sha": "770fa527a06787284aff9523f08b501031a84850",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 39,
      "deletions": 5,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -7861,6 +7861,18 @@ build_modrm_byte (void)\n   return default_seg;\n }\n \n+static unsigned int\n+flip_code16 (unsigned int code16)\n+{\n+  gas_assert (i.tm.operands == 1);\n+\n+  return !(i.prefix[REX_PREFIX] & REX_W)\n+\t && (code16 ? i.tm.operand_types[0].bitfield.disp32\n+\t\t      || i.tm.operand_types[0].bitfield.disp32s\n+\t\t    : i.tm.operand_types[0].bitfield.disp16)\n+\t ? CODE16 : 0;\n+}\n+\n static void\n output_branch (void)\n {\n@@ -7880,7 +7892,7 @@ output_branch (void)\n     {\n       prefix = 1;\n       i.prefixes -= 1;\n-      code16 ^= CODE16;\n+      code16 ^= flip_code16(code16);\n     }\n   /* Pentium4 branch hints.  */\n   if (i.prefix[SEG_PREFIX] == CS_PREFIX_OPCODE /* not taken */\n@@ -8022,7 +8034,7 @@ output_jump (void)\n \t{\n \t  FRAG_APPEND_1_CHAR (DATA_PREFIX_OPCODE);\n \t  i.prefixes -= 1;\n-\t  code16 ^= CODE16;\n+\t  code16 ^= flip_code16(code16);\n \t}\n \n       size = 4;\n@@ -9960,12 +9972,34 @@ i386_displacement (char *disp_start, char *disp_end)\n     }\n   else\n     {\n-      /* For PC-relative branches, the width of the displacement\n-\t is dependent upon data size, not address size.  */\n+      /* For PC-relative branches, the width of the displacement may be\n+\t dependent upon data size, but is never dependent upon address size.\n+\t Also make sure to not unintentionally match against a non-PC-relative\n+\t branch template.  */\n+      static templates aux_templates;\n+      const insn_template *t = current_templates->start;\n+      bfd_boolean has_intel64 = FALSE;\n+\n+      aux_templates.start = t;\n+      while (++t < current_templates->end)\n+\t{\n+\t  if (t->opcode_modifier.jump\n+\t      != current_templates->start->opcode_modifier.jump)\n+\t    break;\n+\t  if (t->opcode_modifier.intel64)\n+\t    has_intel64 = TRUE;\n+\t}\n+      if (t < current_templates->end)\n+\t{\n+\t  aux_templates.end = t;\n+\t  current_templates = &aux_templates;\n+\t}\n+\n       override = (i.prefix[DATA_PREFIX] != 0);\n       if (flag_code == CODE_64BIT)\n \t{\n-\t  if (override || i.suffix == WORD_MNEM_SUFFIX)\n+\t  if ((override || i.suffix == WORD_MNEM_SUFFIX)\n+\t      && (!intel64 || !has_intel64))\n \t    bigdisp.bitfield.disp16 = 1;\n \t  else\n \t    bigdisp.bitfield.disp32s = 1;"
    },
    {
      "sha": "59a2723319a3805d211922be4d1eb99995abac2f",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -1120,8 +1120,7 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n \n \trun_dump_test \"x86-64-jump\"\n \trun_dump_test \"x86-64-branch-2\"\n-\tsetup_xfail \"*-*-*\"\n-\trun_list_test \"x86-64-branch-3\" \"-al -mintel64\"\n+\trun_dump_test \"x86-64-branch-3\"\n \trun_list_test \"x86-64-branch-4\" \"-al -mintel64\"\n \n \trun_dump_test \"x86-64-gotpcrel\""
    },
    {
      "sha": "c66647cd80490a2ca9b1c32b210fdc6cedfd917f",
      "filename": "gas/testsuite/gas/i386/x86-64-branch-3.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/testsuite/gas/i386/x86-64-branch-3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/testsuite/gas/i386/x86-64-branch-3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-branch-3.d?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -0,0 +1,16 @@\n+#as: -J -mintel64\n+#objdump: -dwr -Mintel64\n+#name: x86-64 branch 3\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <bar-0x6>:\n+[ \t]*[a-f0-9]+:\t66 e9 00 00 00 00    \tdata16 jmpq 6 <bar>\t2: R_X86_64_PLT32\tfoo-0x4\n+\n+0+6 <bar>:\n+[ \t]*[a-f0-9]+:\t89 c3                \tmov    %eax,%ebx\n+[ \t]*[a-f0-9]+:\t66 e8 00 00 00 00    \tdata16 callq e <bar\\+0x8>\ta: R_X86_64_PLT32\tfoo-0x4\n+[ \t]*[a-f0-9]+:\t66 c7 f8 00 00       \txbeginw 13 <bar\\+0xd>\t11: R_X86_64_PC16\tfoo-0x2\n+#pass"
    },
    {
      "sha": "de3c2dd49b39ea2bd12194b558e89ec751442c95",
      "filename": "gas/testsuite/gas/i386/x86-64-branch-3.l",
      "status": "removed",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48bcea9f48cce70005307befbc604de3618bbaf7/gas/testsuite/gas/i386/x86-64-branch-3.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48bcea9f48cce70005307befbc604de3618bbaf7/gas/testsuite/gas/i386/x86-64-branch-3.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-branch-3.l?ref=48bcea9f48cce70005307befbc604de3618bbaf7",
      "patch": "@@ -1,17 +0,0 @@\n-.*: Assembler messages:\n-.*:2: Warning: indirect jmp without `\\*'\n-.*:7: Warning: indirect call without `\\*'\n-GAS LISTING .*\n-\n-\n-[ \t]*1[ \t]+\\.text\n-[ \t]*2[ \t]+0000 66FF2C25 \t\tdata16 jmp foo\n-\\*\\*\\*\\*  Warning: indirect jmp without `\\*'\n-[ \t]*2[ \t]+00000000 \n-[ \t]*3[ \t]+\n-[ \t]*4[ \t]+bar:\n-[ \t]*5[ \t]+0008 89C3     \t\tmov %eax, %ebx\n-[ \t]*6[ \t]+\n-[ \t]*7[ \t]+000a 66FF1C25 \t\tdata16 call foo\n-\\*\\*\\*\\*  Warning: indirect call without `\\*'\n-[ \t]*7[ \t]+00000000 "
    },
    {
      "sha": "42bdac001fcf61fff15ec4ebfe46cee2fa500d82",
      "filename": "gas/testsuite/gas/i386/x86-64-branch-3.s",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/testsuite/gas/i386/x86-64-branch-3.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/gas/testsuite/gas/i386/x86-64-branch-3.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-branch-3.s?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -5,3 +5,5 @@ bar:\n \tmov %eax, %ebx\n \n \tdata16 call foo\n+\n+\tdata16 xbegin foo"
    },
    {
      "sha": "9a1512304270b09c101b564c2ce7d2e89d544569",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-27  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (Jdqw): Define.\n+\t(dqw_mode): Adjust associated comment.\n+\t(rm_table): Use Jdqw for XBEGIN.\n+\t(OP_J): Handle dqw_mode.\n+\n 2019-12-27  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (process_i386_operand_type): Don't set Disp32 for"
    },
    {
      "sha": "6693b706293e8a76be1ea698de20d1a5bb0f1f67",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/376cd056100dff2d6fc842aa013d0bbffdef363d/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/376cd056100dff2d6fc842aa013d0bbffdef363d/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=376cd056100dff2d6fc842aa013d0bbffdef363d",
      "patch": "@@ -296,6 +296,7 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define I1 { OP_I, const_1_mode }\n #define Jb { OP_J, b_mode }\n #define Jv { OP_J, v_mode }\n+#define Jdqw { OP_J, dqw_mode }\n #define Cm { OP_C, m_mode }\n #define Dm { OP_D, m_mode }\n #define Td { OP_T, d_mode }\n@@ -558,7 +559,8 @@ enum\n   v_bndmk_mode,\n   /* operand size depends on REX prefixes.  */\n   dq_mode,\n-  /* registers like dq_mode, memory like w_mode.  */\n+  /* registers like dq_mode, memory like w_mode, displacements like\n+     v_mode without considering Intel64 ISA.  */\n   dqw_mode,\n   /* bounds operand */\n   bnd_mode,\n@@ -10969,7 +10971,7 @@ static const struct dis386 rm_table[][8] = {\n   },\n   {\n     /* RM_C7_REG_7 */\n-    { \"xbeginT\",\t{ Skip_MODRM, Jv }, 0 },\n+    { \"xbeginT\",\t{ Skip_MODRM, Jdqw }, 0 },\n   },\n   {\n     /* RM_0F01_REG_0 */\n@@ -14828,10 +14830,12 @@ OP_J (int bytemode, int sizeflag)\n       break;\n     case v_mode:\n       if (isa64 == amd64)\n+    case dqw_mode:\n \tUSED_REX (REX_W);\n       if ((sizeflag & DFLAG)\n \t  || (address_mode == mode_64bit\n-\t      && (isa64 != amd64 || (rex & REX_W))))\n+\t      && ((isa64 != amd64 && bytemode != dqw_mode)\n+\t\t  || (rex & REX_W))))\n \tdisp = get32s ();\n       else\n \t{"
    }
  ]
}