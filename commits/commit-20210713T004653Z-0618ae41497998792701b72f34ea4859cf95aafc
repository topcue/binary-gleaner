{
  "sha": "0618ae41497998792701b72f34ea4859cf95aafc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDYxOGFlNDE0OTc5OTg3OTI3MDFiNzJmMzRlYTQ4NTljZjk1YWFmYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-18T18:05:28Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-13T00:46:53Z"
    },
    "message": "gdb: optimize all_matching_threads_iterator\n\nall_matching_threads_iterator is used extensively in some pretty fast\npaths, often under the all_non_exited_threads function.\n\nIf a filter target and thread-specific ptid are given, it iterates on\nall threads of all inferiors of that target, to ultimately yield exactly\non thread.  And this happens quite often, which means we unnecessarily\nspend time iterating on threads to find the one we are looking for.  The\nsame thing happens if an inferior-specific ptid is given, although there\nthe iterator yields all the threads of that inferior.\n\nIn those cases, the callers of all_non_exited_threads could have\ndifferent behaviors depending on the kind of ptid, to avoid this\ninefficiency, but that would be very tedious.  Using\nall_non_exited_threads has the advantage that one simple implementation\ncan work seamlessly on multiple threads or on one specific thread, just\nby playing with the ptid.\n\nInstead, optimize all_matching_threads_iterator directly to detect these\ndifferent cases and limiting what we iterate on to just what we need.\n\n - if filter_ptid is minus_one_ptid, do as we do now: filter inferiors\n   based on filter_target, iterate on all of the matching inferiors'\n   threads\n - if filter_ptid is a pid-only ptid (then a filter_target must\n   necessarily be given), look up that inferior and iterate on all its\n   threads\n - otherwise, filter_ptid is a thread-specific ptid, so look up that\n   specific thread and \"iterate\" only on it\n\nFor the last case, what was an iteration on all threads of the filter\ntarget now becomes a call to find_thread_ptid, which is quite efficient\nnow thanks to inferior::ptid_thread_map.\n\ngdb/ChangeLog:\n\n\t* thread-iter.h (class all_matching_threads_iterator)\n\t<all_matching_threads_iterator>: Use default.\n\t<enum class mode>: New.\n\t<m_inf, m_thr>: Initialize.\n\t<m_filter_ptid>: Remove.\n\t* thread-iter.c (all_matching_threads_iterator::m_inf_matches):\n\tDon't filter on m_filter_ptid.\n\t(all_matching_threads_iterator::all_matching_threads_iterator):\n\tChoose path based on filter_ptid (all threads, all threads of\n\tinferior, single thread).\n\t(all_matching_threads_iterator::advance): Likewise.\n\nChange-Id: Ic6a19845f5f760fa1b8eac8145793c0ff431bbc9",
    "tree": {
      "sha": "1b4c9ca5eb76562fead388a9b5e13ff18ac67a08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1b4c9ca5eb76562fead388a9b5e13ff18ac67a08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0618ae41497998792701b72f34ea4859cf95aafc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0618ae41497998792701b72f34ea4859cf95aafc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0618ae41497998792701b72f34ea4859cf95aafc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0618ae41497998792701b72f34ea4859cf95aafc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/922cc93d5da6a6dc422b7e7a09ee745414d67457"
    }
  ],
  "stats": {
    "total": 167,
    "additions": 107,
    "deletions": 60
  },
  "files": [
    {
      "sha": "e56ccd857b0ab47ff1e812d3cf146e4e58748853",
      "filename": "gdb/thread-iter.c",
      "status": "modified",
      "additions": 90,
      "deletions": 48,
      "changes": 138,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0618ae41497998792701b72f34ea4859cf95aafc/gdb/thread-iter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0618ae41497998792701b72f34ea4859cf95aafc/gdb/thread-iter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread-iter.c?ref=0618ae41497998792701b72f34ea4859cf95aafc",
      "patch": "@@ -75,72 +75,114 @@ all_threads_iterator::advance ()\n bool\n all_matching_threads_iterator::m_inf_matches ()\n {\n-  return ((m_filter_target == nullptr\n-\t   || m_filter_target == m_inf->process_target ())\n-\t  && (m_filter_ptid == minus_one_ptid\n-\t      || m_filter_ptid.pid () == m_inf->pid));\n+  return (m_filter_target == nullptr\n+\t  || m_filter_target == m_inf->process_target ());\n }\n \n /* See thread-iter.h.  */\n \n all_matching_threads_iterator::all_matching_threads_iterator\n   (process_stratum_target *filter_target, ptid_t filter_ptid)\n-    : m_filter_target (filter_target),\n-      m_filter_ptid (filter_ptid)\n+  : m_filter_target (filter_target)\n {\n-  gdb_assert ((filter_target == nullptr && filter_ptid == minus_one_ptid)\n-\t      || filter_target->stratum () == process_stratum);\n-\n-  for (inferior &inf : inferior_list)\n+  if (filter_ptid == minus_one_ptid)\n     {\n-      m_inf = &inf;\n-      if (m_inf_matches ())\n-\tfor (auto thr_iter = m_inf->thread_list.begin ();\n-\t     thr_iter != m_inf->thread_list.end ();\n-\t     ++thr_iter)\n-\t  {\n-\t    if (thr_iter->ptid.matches (m_filter_ptid))\n-\t      {\n-\t\tm_thr = &*thr_iter;\n-\t\treturn;\n-\t      }\n-\t  }\n+      /* Iterate on all threads of all inferiors, possibly filtering on\n+         FILTER_TARGET.  */\n+      m_mode = mode::ALL_THREADS;\n+\n+      /* Seek the first thread of the first matching inferior.  */\n+      for (inferior &inf : inferior_list)\n+\t{\n+\t  m_inf = &inf;\n+\n+\t  if (!m_inf_matches ()\n+\t      || inf.thread_list.empty ())\n+\t    continue;\n+\n+\t  m_thr = &inf.thread_list.front ();\n+\t  return;\n+\t}\n     }\n+  else\n+    {\n+      gdb_assert (filter_target != nullptr);\n \n-  m_thr = nullptr;\n+      if (filter_ptid.is_pid ())\n+\t{\n+\t  /* Iterate on all threads of the given inferior.  */\n+\t  m_mode = mode::ALL_THREADS_OF_INFERIOR;\n+\n+\t  m_inf = find_inferior_pid (filter_target, filter_ptid.pid ());\n+\t  if (m_inf != nullptr)\n+\t    m_thr = &m_inf->thread_list.front ();\n+\t}\n+      else\n+\t{\n+\t  /* Iterate on a single thread.  */\n+\t  m_mode = mode::SINGLE_THREAD;\n+\n+\t  m_thr = find_thread_ptid (filter_target, filter_ptid);\n+\t}\n+    }\n }\n \n /* See thread-iter.h.  */\n \n void\n all_matching_threads_iterator::advance ()\n {\n-  intrusive_list<inferior>::iterator inf_iter (m_inf);\n-  intrusive_list<thread_info>::iterator thr_iter (m_thr);\n+  switch (m_mode)\n+    {\n+    case mode::ALL_THREADS:\n+      {\n+\tintrusive_list<inferior>::iterator inf_iter (m_inf);\n+\tintrusive_list<thread_info>::iterator thr_iter\n+\t  = m_inf->thread_list.iterator_to (*m_thr);\n+\n+\t/* The loop below is written in the natural way as-if we'd always\n+\t   start at the beginning of the inferior list.  This fast forwards\n+\t   the algorithm to the actual current position.  */\n+\tgoto start;\n+\n+\tfor (; inf_iter != inferior_list.end (); ++inf_iter)\n+\t  {\n+\t    m_inf = &*inf_iter;\n \n-  /* The loop below is written in the natural way as-if we'd always\n-     start at the beginning of the inferior list.  This fast forwards\n-     the algorithm to the actual current position.  */\n-  goto start;\n+\t    if (!m_inf_matches ())\n+\t      continue;\n \n-  for (; inf_iter != inferior_list.end (); ++inf_iter)\n-    {\n-      m_inf = &*inf_iter;\n-      if (m_inf_matches ())\n-\t{\n-\t  thr_iter = m_inf->thread_list.begin ();\n-\t  while (thr_iter != m_inf->thread_list.end ())\n-\t    {\n-\t      if (thr_iter->ptid.matches (m_filter_ptid))\n-\t\t{\n-\t\t  m_thr = &*thr_iter;\n-\t\t  return;\n-\t\t}\n-\t    start:\n-\t      ++thr_iter;\n-\t    }\n-\t}\n-    }\n+\t    thr_iter = m_inf->thread_list.begin ();\n+\t    while (thr_iter != m_inf->thread_list.end ())\n+\t      {\n+\t\tm_thr = &*thr_iter;\n+\t\treturn;\n \n-  m_thr = nullptr;\n+\t      start:\n+\t\t++thr_iter;\n+\t      }\n+\t  }\n+      }\n+      m_thr = nullptr;\n+      break;\n+\n+    case mode::ALL_THREADS_OF_INFERIOR:\n+      {\n+\tintrusive_list<thread_info>::iterator thr_iter\n+\t  = m_inf->thread_list.iterator_to (*m_thr);\n+\t++thr_iter;\n+\tif (thr_iter != m_inf->thread_list.end ())\n+\t  m_thr = &*thr_iter;\n+\telse\n+\t  m_thr = nullptr;\n+\tbreak;\n+      }\n+\n+    case mode::SINGLE_THREAD:\n+      m_thr = nullptr;\n+      break;\n+\n+    default:\n+      gdb_assert_not_reached (\"invalid mode value\");\n+    }\n }"
    },
    {
      "sha": "6700f5593b9101f5e6decfd4aa46d6da207c7e19",
      "filename": "gdb/thread-iter.h",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0618ae41497998792701b72f34ea4859cf95aafc/gdb/thread-iter.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0618ae41497998792701b72f34ea4859cf95aafc/gdb/thread-iter.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread-iter.h?ref=0618ae41497998792701b72f34ea4859cf95aafc",
      "patch": "@@ -99,12 +99,7 @@ class all_matching_threads_iterator\n \t\t\t\t ptid_t filter_ptid);\n \n   /* Create a one-past-end iterator.  */\n-  all_matching_threads_iterator ()\n-    : m_inf (nullptr),\n-      m_thr (nullptr),\n-      m_filter_target (nullptr),\n-      m_filter_ptid (minus_one_ptid)\n-  {}\n+  all_matching_threads_iterator () = default;\n \n   thread_info *operator* () const { return m_thr; }\n \n@@ -124,20 +119,30 @@ class all_matching_threads_iterator\n   /* Advance to next thread, skipping filtered threads.  */\n   void advance ();\n \n-  /* True if M_INF matches the process identified by\n-     M_FILTER_PTID.  */\n+  /* True if M_INF has the process target M_FILTER_TARGET.  */\n   bool m_inf_matches ();\n \n private:\n+  enum class mode\n+  {\n+    /* All threads, possibly filtered down to a single target.  */\n+    ALL_THREADS,\n+\n+    /* All threads of the given inferior.  */\n+    ALL_THREADS_OF_INFERIOR,\n+\n+    /* A specific thread.  */\n+    SINGLE_THREAD,\n+  } m_mode;\n+\n   /* The current inferior.  */\n-  inferior *m_inf;\n+  inferior *m_inf = nullptr;\n \n   /* The current thread.  */\n-  thread_info *m_thr;\n+  thread_info *m_thr = nullptr;\n \n-  /* The filter.  */\n+  /* The target we filter on (may be nullptr).  */\n   process_stratum_target *m_filter_target;\n-  ptid_t m_filter_ptid;\n };\n \n /* Filter for filtered_iterator.  Filters out exited threads.  */"
    }
  ]
}