{
  "sha": "3d63690a0316d92cf248542ee12a3fc8b30152ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q2MzY5MGEwMzE2ZDkyY2YyNDg1NDJlZTEyYTNmYzhiMzAxNTJlYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-01T14:29:20Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-07T10:26:11Z"
    },
    "message": "gdb/testsuite: Add gdb_test_name variable\n\nThis commit adds a new feature to gdb_test_multiple, an automatically\ncreated variable gdb_test_name.  The idea is to make it easier to\nwrite tests using gdb_test_multiple, and avoid places where the string\npassed to pass/fail within an action element is different to the\nmessage passed to the top level gdb_test_multiple.\n\nAs an example, previously you might write this:\n\n    gdb_test_multiple \"print foo\" \"test foo\" {\n       -re \"expected output 1\" {\n           pass \"test foo\"\n       }\n       -re \"expected output 2\" {\n           fail \"test foo\"\n       }\n    }\n\nThis is OK, but it's easy for the pass/fail strings to come out of\nsync, or contain a typo.  A better version would look like this:\n\n    set testname \"test foo\"\n    gdb_test_multiple \"print foo\" $testname {\n       -re \"expected output 1\" {\n           pass $testname\n       }\n       -re \"expected output 2\" {\n           fail $testname\n       }\n    }\n\nThis is better, but its a bit of a drag having to create a new\nvariable each time.\n\nAfter this patch you can now write this:\n\n    gdb_test_multiple \"print foo\" \"test foo\" {\n       -re \"expected output 1\" {\n           pass $gdb_test_name\n       }\n       -re \"expected output 2\" {\n           fail $gdb_test_name\n       }\n    }\n\nThe $gdb_test_name is setup by gdb_test_multiple, and cleaned up once\nthe test has completed.  Nested calls to gdb_test_multiple are\nsupported, though $gdb_test_name will only ever contain the inner most\ntest message (which is probably what you want).\n\nMy only regret is that '$gdb_test_name' is so long, but I wanted\nsomething that was unlikely to clash with any existing variable name,\nor anything that a user is likely to want to use.\n\nI've tested this on x86-64/GNU Linux and see no test regressions, and\nI've converted one test script over to make use of this new technique\nboth as an example, and to ensure that the new facility doesn't get\nbroken.  I have no plans to convert all tests over to this technique,\nbut I hope others will find this useful for writing tests in the\nfuture.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/gdb.exp (gdb_test_multiple): Add gdb_test_name mechanism.\n\t* gdb.base/annota1.exp: Update to use gdb_test_name.",
    "tree": {
      "sha": "d7d4e61e1e13b0cbc511f60a373fbd82addc74d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d7d4e61e1e13b0cbc511f60a373fbd82addc74d5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d63690a0316d92cf248542ee12a3fc8b30152ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d63690a0316d92cf248542ee12a3fc8b30152ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d63690a0316d92cf248542ee12a3fc8b30152ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d63690a0316d92cf248542ee12a3fc8b30152ea/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "760f7560fded879ddd072340bb2bdcd701cd1f7b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/760f7560fded879ddd072340bb2bdcd701cd1f7b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/760f7560fded879ddd072340bb2bdcd701cd1f7b"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 69,
    "deletions": 32
  },
  "files": [
    {
      "sha": "e2c3351e677ef16d7bec8a92321967ac0a95ea26",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d63690a0316d92cf248542ee12a3fc8b30152ea/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d63690a0316d92cf248542ee12a3fc8b30152ea/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3d63690a0316d92cf248542ee12a3fc8b30152ea",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* lib/gdb.exp (gdb_test_multiple): Add gdb_test_name mechanism.\n+\t* gdb.base/annota1.exp: Update to use gdb_test_name.\n+\n 2019-10-07  Weimin Pan  <weimin.pan@oracle.com>\n \n \t* gdb.base/ctf-whatis.exp: New file."
    },
    {
      "sha": "2d4737f533f03aac2ec86f2f4592839f0afce4c6",
      "filename": "gdb/testsuite/gdb.base/annota1.exp",
      "status": "modified",
      "additions": 28,
      "deletions": 30,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d63690a0316d92cf248542ee12a3fc8b30152ea/gdb/testsuite/gdb.base/annota1.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d63690a0316d92cf248542ee12a3fc8b30152ea/gdb/testsuite/gdb.base/annota1.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/annota1.exp?ref=3d63690a0316d92cf248542ee12a3fc8b30152ea",
      "patch": "@@ -97,11 +97,11 @@ gdb_expect {\n #\n gdb_test_multiple \"info break\" \"breakpoint info\" {\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n\\r\\n\\032\\032breakpoints-headers\\r\\n\\r\\n\\032\\032field 0\\r\\nNum     \\r\\n\\032\\032field 1\\r\\nType           \\r\\n\\032\\032field 2\\r\\nDisp \\r\\n\\032\\032field 3\\r\\nEnb \\r\\n\\032\\032field 4\\r\\nAddress    +\\r\\n\\032\\032field 5\\r\\nWhat\\r\\n\\r\\n\\032\\032breakpoints-table\\r\\n\\r\\n\\032\\032record\\r\\n\\r\\n\\032\\032field 0\\r\\n1       \\r\\n\\032\\032field 1\\r\\nbreakpoint     \\r\\n\\032\\032field 2\\r\\nkeep \\r\\n\\032\\032field 3\\r\\ny   \\r\\n\\032\\032field 4\\r\\n$hex +\\r\\n\\032\\032field 5\\r\\nin main at ${escapedsrcfile}:$main_line\\r\\n\\r\\n\\032\\032breakpoints-table-end\\r\\n$gdb_prompt$\" {\n-\tpass \"breakpoint info\"\n+\tpass $gdb_test_name\n     }\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n\\r\\n\\032\\032breakpoints-headers\\r\\n\\r\\n\\032\\032field 0\\r\\nNum     \\r\\n\\032\\032field 1\\r\\nType           \\r\\n\\032\\032field 2\\r\\nDisp \\r\\n\\032\\032field 3\\r\\nEnb \\r\\n\\032\\032field 4\\r\\nAddress    +\\r\\n\\032\\032field 5\\r\\nWhat\\r\\n\\r\\n\\032\\032breakpoints-table\\r\\n\\r\\n\\032\\032record\\r\\n\\r\\n\\032\\032field 0\\r\\n1       \\r\\n\\032\\032field 1\\r\\nbreakpoint     \\r\\n\\032\\032field 2\\r\\nkeep \\r\\n\\032\\032field 3\\r\\ny   \\r\\n\\032\\032field 4\\r\\n$hex +\\r\\n\\032\\032field 5\\r\\nin main at .*${srcfile}:$main_line\\r\\n\\r\\n\\032\\032breakpoints-table-end\\r\\n$gdb_prompt$\" {\n \tsetup_xfail \"*-*-*\" 1270\n-\tfail \"breakpoint info\"\n+\tfail $gdb_test_name\n     }\n }\n \n@@ -147,7 +147,7 @@ gdb_test_multiple \"run\" \"run until main breakpoint\" {\n \t\t    \"\\032\\032source.*$srcfile:$main_line:.*:beg:$hex\\r\\n\\r\\n\" \\\n \t\t    \"\\032\\032frame-end\\r\\n\\r\\n\" \\\n \t\t    \"\\032\\032stopped.*$gdb_prompt$\" } ] {\n-\tpass \"run until main breakpoint\"\n+\tpass $gdb_test_name\n     }\n }\n #exp_internal 0\n@@ -160,7 +160,7 @@ gdb_test_multiple \"run\" \"run until main breakpoint\" {\n #\n gdb_test_multiple \"next\" \"go after array init line\" {\n     -re \"source .*annota1.c.*$gdb_prompt$\" {\n-\tpass \"go after array init line\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -179,7 +179,7 @@ gdb_test_multiple \"next\" \"go after array init line\" {\n #\n gdb_test_multiple \"print my_array\" \"print array\" {\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n\\r\\n\\032\\032value-history-begin 1 -\\r\\n.*= \\r\\n\\032\\032value-history-value\\r\\n.\\r\\n\\032\\032array-section-begin 0 -\\r\\n1\\r\\n\\032\\032elt\\r\\n, 2\\r\\n\\032\\032elt\\r\\n, 3\\r\\n\\032\\032elt\\r\\n\\r\\n\\032\\032array-section-end\\r\\n.\\r\\n\\r\\n\\032\\032value-history-end\\r\\n$gdb_prompt$\" {\n-\tpass \"print array\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -193,7 +193,7 @@ gdb_test_multiple \"print my_array\" \"print array\" {\n #exp_internal 1\n gdb_test_multiple \"print non_existent_value\" \"print non_existent_value\" {\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n\\r\\n\\032\\032error-begin\\r\\nNo symbol \\\"non_existent_value\\\" in current context.\\r\\n\\r\\n\\032\\032error\\r\\n$gdb_prompt$\" {\n-\tpass \"print non_existent_value\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -204,7 +204,7 @@ gdb_test_multiple \"print non_existent_value\" \"print non_existent_value\" {\n #\n gdb_test_multiple \"break handle_USR1\" \"break handle_USR1\" {\n     -re  \"\\r\\n\\032\\032post-prompt\\r\\nBreakpoint.*at $hex: file.*$srcfile, line.*\\r\\n\\032\\032breakpoints-invalid\\r\\n.*$gdb_prompt$\" {\n-\tpass \"break handle_USR1\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -213,10 +213,10 @@ gdb_test_multiple \"break handle_USR1\" \"break handle_USR1\" {\n #\n gdb_test_multiple \"break printf\" \"break printf\" {\n     -re  \"\\r\\n\\032\\032post-prompt\\r\\nBreakpoint.*at $hex.*\\032\\032breakpoints-invalid\\r\\n.*$gdb_prompt$\" {\n-\tpass \"break printf\" \n+\tpass $gdb_test_name\n     }\n     -re  \"\\r\\n\\032\\032post-prompt\\r\\nwarning: Breakpoint address adjusted from $hex to $hex.\\r\\n\\r\\n\\032\\032breakpoints-invalid\\r\\nBreakpoint.*at $hex.*$gdb_prompt$\" {\n-\tpass \"break printf\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -229,9 +229,9 @@ set pat_end \"\\r\\n\\032\\032breakpoint 3\\r\\n\\r\\nBreakpoint 3, \\r\\n\\032\\032frame-beg\n \n gdb_test_multiple \"continue\" \"continue to printf\" {\n     -re \"${pat_begin}($pat_adjust)?$pat_end\" {\n-\tpass \"continue to printf\"\n+\tpass $gdb_test_name\n     }\n-    -re \".*$gdb_prompt$\"     { fail \"continue to printf\" }\n+    -re \".*$gdb_prompt$\"     { fail $gdb_test_name }\n }\n \n #\n@@ -246,11 +246,11 @@ set pat_end \"\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\n \n gdb_test_multiple \"backtrace\" \"backtrace from shlibrary\" {\n     -re \"$pat_begin$escapedsrcfile$pat_end\" {\n-\tpass \"backtrace from shlibrary\"\n+\tpass $gdb_test_name\n     }\n     -re \"$pat_begin.*$srcfile$pat_end\" {\n \tsetup_xfail \"*-*-*\" 1270\n-\tfail \"backtrace from shlibrary\"\n+\tfail $gdb_test_name\n     }\n }\n \n@@ -269,11 +269,11 @@ if [target_info exists gdb,nosignals] {\n } else {\n     gdb_test_multiple \"signal SIGUSR1\" \"send SIGUSR1\" {\n \t-re \"\\r\\n\\032\\032post-prompt\\r\\nContinuing with signal SIGUSR1.\\r\\n\\r\\n\\032\\032starting\\(\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)|\\(\\r\\n\\r\\n\\032\\032breakpoints-invalid\\)\\)+\\r\\n\\r\\n\\032\\032breakpoint 2\\r\\n\\r\\nBreakpoint 2, \\r\\n\\032\\032frame-begin 0 $hex\\r\\n\\r\\n\\032\\032frame-function-name\\r\\nhandle_USR1\\r\\n\\032\\032frame-args\\r\\n \\\\(\\r\\n\\032\\032arg-begin\\r\\nsig\\r\\n\\032\\032arg-name-end\\r\\n=\\r\\n\\032\\032arg-value -\\r\\n$decimal\\r\\n\\032\\032arg-end\\r\\n\\\\)\\r\\n\\032\\032frame-source-begin\\r\\n at \\r\\n\\032\\032frame-source-file\\r\\n${escapedsrcfile}\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\\r\\n.*\\r\\n\\032\\032frame-source-end\\r\\n\\r\\n\\r\\n\\032\\032source.*annota1.c:.*:.*:beg:$hex\\r\\n$decimal\\[^\\r\\n\\]+\\r\\n\\r\\n\\032\\032frame-end\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n-\t    pass \"send SIGUSR1\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"\\r\\n\\032\\032post-prompt\\r\\nContinuing with signal SIGUSR1.\\r\\n\\r\\n\\032\\032starting\\(\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)|\\(\\r\\n\\r\\n\\032\\032breakpoints-invalid\\)\\)+\\r\\n\\r\\n\\032\\032breakpoint 2\\r\\n\\r\\nBreakpoint 2, \\r\\n\\032\\032frame-begin 0 $hex\\r\\n\\r\\n\\032\\032frame-function-name\\r\\nhandle_USR1\\r\\n\\032\\032frame-args\\r\\n \\\\(\\r\\n\\032\\032arg-begin\\r\\nsig\\r\\n\\032\\032arg-name-end\\r\\n=\\r\\n\\032\\032arg-value -\\r\\n$decimal\\r\\n\\032\\032arg-end\\r\\n\\\\)\\r\\n\\032\\032frame-source-begin\\r\\n at \\r\\n\\032\\032frame-source-file\\r\\n.*${srcfile}\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\\r\\n.*\\r\\n\\032\\032frame-source-end\\r\\n\\r\\n\\r\\n\\032\\032source.*annota1.c:.*:.*:beg:$hex\\r\\n$decimal\\[^\\r\\n\\]+\\r\\n\\r\\n\\032\\032frame-end\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n \t    setup_xfail \"*-*-*\" 1270\n-\t    fail \"send SIGUSR1\"\n+\t    fail $gdb_test_name\n \t}\n     }\n \n@@ -283,7 +283,7 @@ if [target_info exists gdb,nosignals] {\n     #\n     gdb_test_multiple \"backtrace\" \"backtrace @ signal handler\" {\n \t-re \"frame-begin 0 $hex\\r\\n#0.*frame-end.*frame-begin 1 $hex\\r\\n#1.*(\\032\\032signal-handler-caller\\r\\n.signal handler called.\\r\\n\\r\\n)+\\032\\032frame-end\\r\\n\\r\\n\\032\\032frame-begin 2 $hex\\r\\n#2.*(frame-begin 3 $hex\\r\\n#3.*)*frame-end.*$gdb_prompt$\" {\n-\t    pass \"backtrace @ signal handler\"\n+\t    pass $gdb_test_name\n \t}\n     }\n }\n@@ -293,34 +293,33 @@ if [target_info exists gdb,nosignals] {\n #\n gdb_test_multiple \"delete 1\" \"delete bp 1\" {\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n${breakpoints_invalid}$gdb_prompt$\" {\n-\tpass \"delete bp 1\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"delete 2\" \"delete bp 2\" {\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n${breakpoints_invalid}$gdb_prompt$\" {\n-\tpass \"delete bp 2\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"delete 3\" \"delete bp 3\" {\n     -re \"\\r\\n\\032\\032post-prompt\\r\\n${breakpoints_invalid}$gdb_prompt$\" {\n-\tpass \"delete bp 3\"\n+\tpass $gdb_test_name\n     }\n }\n \n #\n # break in main, after value is initialized. This is in preparation\n # to test the annotate output for the display command.\n #\n-set test \"break in main\"\n-gdb_test_multiple \"break ${srcfile}:${main_line}\" $test {\n+gdb_test_multiple \"break ${srcfile}:${main_line}\" \"break in main\" {\n     -re \"post-prompt.*Breakpoint 4 at $hex: file ${escapedsrcfile}, line $main_line.*\\032\\032breakpoints-invalid.*$gdb_prompt$\" {\n-\tpass $test\n+\tpass $gdb_test_name\n     }\n     -re \"post-prompt.*Breakpoint 4 at $hex: file .*${srcfile}, line $main_line.*\\032\\032breakpoints-invalid.*$gdb_prompt$\" {\n \tsetup_xfail \"*-*-*\" 1270\n-\tfail $test\n+\tfail $gdb_test_name\n     }\n }\n \n@@ -405,12 +404,11 @@ gdb_test_multiple \"next\" \"breakpoint ignore count\" {\n \n # Get the inferior's PID for later.\n \n-set test \"get inferior pid\"\n set pid -1\n-gdb_test_multiple \"info inferior 1\" \"$test\" {\n+gdb_test_multiple \"info inferior 1\" \"get inferior pid\" {\n     -re \"process (\\[0-9\\]*).*$gdb_prompt$\" {\n \tset pid $expect_out(1,string)\n-\tpass \"$test\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -429,7 +427,7 @@ if [target_info exists gdb,nosignals] {\n } else {\n     gdb_test_multiple \"signal SIGTRAP\" \"signal sent\" {\n \t-re \".*\\032\\032post-prompt\\r\\nContinuing with signal SIGTRAP.\\r\\n\\r\\n\\032\\032starting\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)+\\r\\n\\r\\n\\032\\032signalled\\r\\n\\r\\nProgram terminated with signal \\r\\n\\032\\032signal-name\\r\\nSIGTRAP\\r\\n\\032\\032signal-name-end\\r\\n, \\r\\n\\032\\032signal-string\\r\\nTrace.breakpoint trap\\r\\n\\032\\032signal-string-end\\r\\n.\\r\\nThe program no longer exists.\\r\\n\\r\\n\\032\\032thread-exited,id=\\\"${decimal}\\\",group-id=\\\"i${decimal}\\\"\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n-\t    pass \"signal sent\"\n+\t    pass $gdb_test_name\n \t}\n     }\n }\n@@ -482,13 +480,13 @@ proc thread_test {} {\n \n \tgdb_test_multiple \"continue\" \"new thread\" {\n \t    -re \"\\032\\032new-thread.*\\r\\n$gdb_prompt$\" {\n-\t\tpass \"new thread\"\n+\t\tpass $gdb_test_name\n \t    }\n \t}\n \n     gdb_test_multiple \"continue\" \"thread exit\" {\n \t    -re \"\\032\\032thread-exited,id=\\\"${decimal}\\\",group-id=\\\"i${decimal}\\\".*\\r\\n$gdb_prompt$\" {\n-\t\tpass \"thread exit\"\n+\t\tpass $gdb_test_name\n \t    }\n     }\n     }\n@@ -497,7 +495,7 @@ proc thread_test {} {\n proc thread_switch {} {\n     gdb_test_multiple \"thread 1\" \"thread switch\" {\n \t-re \".*\\032\\032thread-changed\" {\n-\t    pass \"thread switch\"\n+\t    pass $gdb_test_name\n \t}\n     }\n }"
    },
    {
      "sha": "50db45d1b1456bbc146a51e49e77e99734ecede0",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 36,
      "deletions": 2,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d63690a0316d92cf248542ee12a3fc8b30152ea/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d63690a0316d92cf248542ee12a3fc8b30152ea/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=3d63690a0316d92cf248542ee12a3fc8b30152ea",
      "patch": "@@ -719,10 +719,24 @@ proc gdb_internal_error_resync {} {\n #\n # gdb_test_multiple \"print foo\" \"test foo\" {\n #    -re \"expected output 1\" {\n-#        pass \"print foo\"\n+#        pass \"test foo\"\n #    }\n #    -re \"expected output 2\" {\n-#        fail \"print foo\"\n+#        fail \"test foo\"\n+#    }\n+# }\n+#\n+# Within action elements you can also make use of the variable\n+# gdb_test_name.  This variable is setup automatically by\n+# gdb_test_multiple, and contains the value of MESSAGE.  You can then\n+# write this, which is equivalent to the above:\n+#\n+# gdb_test_multiple \"print foo\" \"test foo\" {\n+#    -re \"expected output 1\" {\n+#        pass $gdb_test_name\n+#    }\n+#    -re \"expected output 2\" {\n+#        fail $gdb_test_name\n #    }\n # }\n #\n@@ -1038,8 +1052,28 @@ proc gdb_test_multiple { command message user_code { prompt_regexp \"\" } } {\n \t}\n     }\n \n+    # Create gdb_test_name in the parent scope.  If this variable\n+    # already exists, which it might if we have nested calls to\n+    # gdb_test_multiple, then preserve the old value, otherwise,\n+    # create a new variable in the parent scope.\n+    upvar gdb_test_name gdb_test_name\n+    if { [info exists gdb_test_name] } {\n+\tset gdb_test_name_old \"$gdb_test_name\"\n+    }\n+    set gdb_test_name \"$message\"\n+\n     set result 0\n     set code [catch {gdb_expect $code} string]\n+\n+    # Clean up the gdb_test_name variable.  If we had a\n+    # previous value then restore it, otherwise, delete the variable\n+    # from the parent scope.\n+    if { [info exists gdb_test_name_old] } {\n+\tset gdb_test_name \"$gdb_test_name_old\"\n+    } else {\n+\tunset gdb_test_name\n+    }\n+\n     if {$code == 1} {\n \tglobal errorInfo errorCode\n \treturn -code error -errorinfo $errorInfo -errorcode $errorCode $string"
    }
  ]
}