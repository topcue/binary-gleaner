{
  "sha": "d22670f0780f4d296325d35049f0d57791ef6d73",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDIyNjcwZjA3ODBmNGQyOTYzMjVkMzUwNDlmMGQ1Nzc5MWVmNmQ3Mw==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-10-13T06:12:29Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-11-27T20:05:09Z"
    },
    "message": "Test case for BZ 25065\n\nRunning a GDB with the fix for BZ 25065 should cause these new tests\nto all pass.\n\nWhen run against a GDB without the fix, there will be 2 unresolved\ntestcases.  This is what I see in the gdb.sum file when I try it using\na GDB without the fix:\n\nERROR: GDB process no longer exists\nUNRESOLVED: gdb.dwarf2/imported-unit.exp: ptype main::Foo\nERROR: Couldn't send ptype main::foo to GDB.\nUNRESOLVED: gdb.dwarf2/imported-unit.exp: ptype main::foo\n\nThese are \"unresolved\" versus outright failures due to the fact that\nGDB dies (segfaults) during the running of the test.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/imported-unit.exp: New file.\n\t* gdb.dwarf2/imported-unit.c: New file.\n\nChange-Id: I073fe69b81bd258951615f752df8e95b6e33a271",
    "tree": {
      "sha": "b68106270ac53e6115fe2a4645a060cf7b3df8e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b68106270ac53e6115fe2a4645a060cf7b3df8e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d22670f0780f4d296325d35049f0d57791ef6d73",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d22670f0780f4d296325d35049f0d57791ef6d73",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d22670f0780f4d296325d35049f0d57791ef6d73",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d22670f0780f4d296325d35049f0d57791ef6d73/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8d9a2568651d55eb518d3ac6c0dd0b4719da7f77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d9a2568651d55eb518d3ac6c0dd0b4719da7f77",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8d9a2568651d55eb518d3ac6c0dd0b4719da7f77"
    }
  ],
  "stats": {
    "total": 218,
    "additions": 218,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3a6e925785ae6109427389e2fdb89406fdfa4373",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d22670f0780f4d296325d35049f0d57791ef6d73/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d22670f0780f4d296325d35049f0d57791ef6d73/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d22670f0780f4d296325d35049f0d57791ef6d73",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-27  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdb.dwarf2/imported-unit.exp: New file.\n+\t* gdb.dwarf2/imported-unit.c: New file.\n+\n 2019-11-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.mi/mi-fortran-modules-2.f90: New file."
    },
    {
      "sha": "3c665c507eacf63e11469cb71de3778d633a4c5e",
      "filename": "gdb/testsuite/gdb.dwarf2/imported-unit.c",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d22670f0780f4d296325d35049f0d57791ef6d73/gdb/testsuite/gdb.dwarf2/imported-unit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d22670f0780f4d296325d35049f0d57791ef6d73/gdb/testsuite/gdb.dwarf2/imported-unit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/imported-unit.c?ref=d22670f0780f4d296325d35049f0d57791ef6d73",
      "patch": "@@ -0,0 +1,56 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Using the DWARF assembler - see imported-unit.exp - we'll be constructing\n+   debug info corresponding to the following C++ code that also might have\n+   been compiled using -flto...\n+\n+  int main()\n+  {\n+    class Foo {\n+    public:\n+      int doit ()\n+      {\n+\treturn 0;\n+      }\n+    };\n+\n+    Foo foo;\n+\n+    return foo.doit ();\n+  }\n+\n+  An attempt was made to try to use the above code directly, but\n+  finding the start and end address of doit turned out to be\n+  difficult.\n+*/\n+\n+\n+int doit (void)\n+{\n+  asm (\"doit_label: .globl doit_label\");\n+\n+  return 0;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  asm (\"main_label: .globl main_label\");\n+\n+  return doit ();\n+}"
    },
    {
      "sha": "25d44874c12e3b0ec9272d0386e27b0f683e81ec",
      "filename": "gdb/testsuite/gdb.dwarf2/imported-unit.exp",
      "status": "added",
      "additions": 157,
      "deletions": 0,
      "changes": 157,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d22670f0780f4d296325d35049f0d57791ef6d73/gdb/testsuite/gdb.dwarf2/imported-unit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d22670f0780f4d296325d35049f0d57791ef6d73/gdb/testsuite/gdb.dwarf2/imported-unit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/imported-unit.exp?ref=d22670f0780f4d296325d35049f0d57791ef6d73",
      "patch": "@@ -0,0 +1,157 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Import a CU into an \"artificial\" CU.  For each DW_TAG DIE in the\n+# artificial CU, use DW_AT_abstract_origin to refer to a DIE in the\n+# imported CU.  This DWARF file organization is frequently found in\n+# programs compiled with -flto (and -g) using GCC.\n+#\n+# This test reproduces the bug described in BZ 25065 without relying\n+# on specific compiler versions or use of optimization switches, in\n+# this case -flto.\n+\n+if [skip_cplus_tests] {\n+    continue\n+}\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+};\n+\n+standard_testfile .c .S\n+\n+# ${testfile} is now \"implref-struct\".  srcfile2 is \"implref-struct.S\".\n+set executable ${testfile}\n+set asm_file [standard_output_file ${srcfile2}]\n+\n+# We need to know the size of integer and address types in order\n+# to write some of the debugging info we'd like to generate.\n+if [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} {debug c++}] {\n+    return -1\n+}\n+\n+# Create the DWARF.\n+Dwarf::assemble $asm_file {\n+    declare_labels cu_label main_label doit_label int_label\n+    declare_labels Foo_label Foo_pointer_type doit_self_label\n+    declare_labels foo_label Foo_destructor_obj_pointer_label\n+    declare_labels Foo_constructor_obj_pointer_label\n+    set int_size [get_sizeof \"int\" 4]\n+    set addr_size [get_sizeof \"void *\" 8]\n+\n+    global srcdir subdir srcfile\n+\n+    extern main\n+    extern doit\n+\n+    set main_range [function_range main ${srcdir}/${subdir}/${srcfile}]\n+    set main_start [lindex $main_range 0]\n+    set main_length [lindex $main_range 1]\n+\n+    set doit_range [function_range doit ${srcdir}/${subdir}/${srcfile}]\n+    set doit_start [lindex $doit_range 0]\n+    set doit_length [lindex $doit_range 1]\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C_plus_plus}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    imported_unit {\n+\t\t{import :$cu_label ref_addr}\n+\t    }\n+\t    subprogram {\n+\t\t{abstract_origin :$main_label}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_length\" addr}\n+\t    } {\n+\t\tsubprogram {\n+\t\t    {abstract_origin :$doit_label}\n+\t\t    {low_pc $doit_start addr}\n+\t\t    {high_pc \"$doit_start + $doit_length\" addr}\n+\t\t} {\n+\t\t    formal_parameter {\n+\t\t\t{abstract_origin :$doit_self_label}\n+\t\t    }\n+\t\t}\n+\t        DW_TAG_variable {\n+\t\t    {abstract_origin :$foo_label}\n+\t\t    {location 4 data1}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+\tcu_label: compile_unit {\n+\t    {language @DW_LANG_C_plus_plus}\n+\t    {name \"imported_unit.c\"}\n+\t} {\n+\t    int_label: base_type {\n+\t\t{byte_size $int_size sdata}\n+\t\t{encoding @DW_ATE_signed}\n+\t\t{name int}\n+\t    }\n+\n+\t    main_label: subprogram {\n+\t\t{name main}\n+\t\t{type :$int_label}\n+\t\t{external 1 flag}\n+\t    } {\n+\t\tFoo_label: class_type {\n+\t\t    {name Foo}\n+\t\t    {byte_size 1 sdata}\n+\t\t} {\n+\t\t    doit_label: subprogram {\n+\t\t\t{name doit}\n+\t\t\t{type :$int_label}\n+\t\t\t{accessibility 1 DW_FORM_data1}\n+\t\t    } {\n+\t\t\tdoit_self_label: formal_parameter {\n+\t\t\t    {name this}\n+\t\t\t    {artificial 1 DW_FORM_flag_present}\n+\t\t\t    {type :$Foo_pointer_type}\n+\t\t\t}\n+\t\t    }\n+\t\t    Foo_pointer_type: pointer_type {\n+\t\t\t{byte_size $addr_size sdata}\n+\t\t\t{type :$Foo_label}\n+\t\t    }\n+\t\t}\n+\t\tfoo_label: DW_TAG_variable {\n+\t\t    {name foo}\n+\t\t    {type :$Foo_label}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+gdb_test_no_output \"set language c++\"\n+\n+# Sanity check\n+gdb_test \"ptype main\" \"= int \\\\(void\\\\)\"\n+\n+# Each of these tests caused a segfault prior to fixing BZ 25065.\n+gdb_test \"ptype main::Foo\" \"= class Foo \\{\\\\s+public:\\\\s+int doit\\\\(void\\\\);\\\\s+\\}\"\n+gdb_test \"ptype main::foo\" \"= class Foo \\{\\\\s+public:\\\\s+int doit\\\\(void\\\\);\\\\s+\\}\""
    }
  ]
}