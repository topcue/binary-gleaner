{
  "sha": "17417fb0ec9842de1774e1e76f1f11c00cdafc47",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTc0MTdmYjBlYzk4NDJkZTE3NzRlMWU3NmYxZjExYzAwY2RhZmM0Nw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-31T13:01:25Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-31T13:15:13Z"
    },
    "message": "gdb, gdbsupport: add debug_prefixed_printf, remove boilerplate functions\n\nThe *_debug_print_1 functions are all very similar, the only difference\nbeing the subsystem name.  Remove them all and make the logging macros\nuse a new debug_prefixed_printf function directly.\n\ngdb/ChangeLog:\n\n\t* infrun.c (infrun_debug_printf_1): Remove.\n\t(displaced_debug_printf_1): Remove.\n\t(stop_all_threads): Use debug_prefixed_printf.\n\t* infrun.h (infrun_debug_printf_1): Remove.\n\t(infrun_debug_printf): Use debug_prefixed_printf.\n\t(displaced_debug_printf_1): Remove.\n\t(displaced_debug_printf): Use debug_prefixed_printf.\n\t* linux-nat.c (linux_nat_debug_printf_1): Remove.\n\t(linux_nat_debug_printf): Use debug_prefixed_printf.\n\ngdbsupport/ChangeLog:\n\n\t* common-debug.cc (debug_prefixed_printf): New.\n\t* common-debug.h (debug_prefixed_printf): New declaration.\n\t* event-loop.cc (event_loop_debug_printf_1): Remove.\n\t* event-loop.h (event_loop_debug_printf_1): Remove.\n\t(event_loop_debug_printf): Use debug_prefixed_printf.\n\t(event_loop_ui_debug_printf): Use debug_prefixed_printf.\n\nChange-Id: Ib323087c7257f0060121d302055c41eb64aa60c6",
    "tree": {
      "sha": "861a3725250f36d393f8fbb222b303191cdc3511",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/861a3725250f36d393f8fbb222b303191cdc3511"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/17417fb0ec9842de1774e1e76f1f11c00cdafc47",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17417fb0ec9842de1774e1e76f1f11c00cdafc47",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/17417fb0ec9842de1774e1e76f1f11c00cdafc47",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17417fb0ec9842de1774e1e76f1f11c00cdafc47/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19dd0ae5e7369bee07fb4fb2f3aeef1ed6d78dfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19dd0ae5e7369bee07fb4fb2f3aeef1ed6d78dfd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19dd0ae5e7369bee07fb4fb2f3aeef1ed6d78dfd"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 56,
    "deletions": 79
  },
  "files": [
    {
      "sha": "78ab40b2a0847ca65f07f61d3cad1ec2019fdf01",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -1,3 +1,15 @@\n+2020-10-31  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* infrun.c (infrun_debug_printf_1): Remove.\n+\t(displaced_debug_printf_1): Remove.\n+\t(stop_all_threads): Use debug_prefixed_printf.\n+\t* infrun.h (infrun_debug_printf_1): Remove.\n+\t(infrun_debug_printf): Use debug_prefixed_printf.\n+\t(displaced_debug_printf_1): Remove.\n+\t(displaced_debug_printf): Use debug_prefixed_printf.\n+\t* linux-nat.c (linux_nat_debug_printf_1): Remove.\n+\t(linux_nat_debug_printf): Use debug_prefixed_printf.\n+\n 2020-10-31  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* configure: Re-generate."
    },
    {
      "sha": "53d7209c69fc2961c84a9bc8aceb81d2e9e4811f",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 2,
      "deletions": 24,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -104,17 +104,6 @@ static int infrun_is_async = -1;\n \n /* See infrun.h.  */\n \n-void\n-infrun_debug_printf_1 (const char *func_name, const char *fmt, ...)\n-{\n-  va_list ap;\n-  va_start (ap, fmt);\n-  debug_prefixed_vprintf (\"infrun\", func_name, fmt, ap);\n-  va_end (ap);\n-}\n-\n-/* See infrun.h.  */\n-\n void\n infrun_async (int enable)\n {\n@@ -179,17 +168,6 @@ show_debug_infrun (struct ui_file *file, int from_tty,\n   fprintf_filtered (file, _(\"Inferior debugging is %s.\\n\"), value);\n }\n \n-/* See infrun.h.  */\n-\n-void\n-displaced_debug_printf_1 (const char *func_name, const char *fmt, ...)\n-{\n-  va_list ap;\n-  va_start (ap, fmt);\n-  debug_prefixed_vprintf (\"displaced\", func_name, fmt, ap);\n-  va_end (ap);\n-}\n-\n /* Support for disabling address space randomization.  */\n \n bool disable_randomization = true;\n@@ -4667,10 +4645,10 @@ stop_all_threads (void)\n \t  target_thread_events (false);\n \t}\n \n-      /* Use infrun_debug_printf_1 directly to get a meaningful function\n+      /* Use debug_prefixed_printf directly to get a meaningful function\n          name.  */\n       if (debug_infrun)\n-\tinfrun_debug_printf_1 (\"stop_all_threads\", \"done\");\n+\tdebug_prefixed_printf (\"infrun\", \"stop_all_threads\", \"done\");\n     };\n \n   /* Request threads to stop, and then wait for the stops.  Because"
    },
    {
      "sha": "93b8aeb8eaa0578b841e6319c7a85d1c417c6e7c",
      "filename": "gdb/infrun.h",
      "status": "modified",
      "additions": 4,
      "deletions": 20,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/infrun.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/infrun.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.h?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -31,34 +31,18 @@ struct thread_info;\n /* True if we are debugging run control.  */\n extern unsigned int debug_infrun;\n \n-/* Print an \"infrun\" debug statement.  Should be used through\n-   infrun_debug_printf.  */\n-void ATTRIBUTE_PRINTF (2, 3) infrun_debug_printf_1\n-  (const char *func_name, const char *fmt, ...);\n+/* Print an \"infrun\" debug statement.  */\n \n #define infrun_debug_printf(fmt, ...) \\\n-  do \\\n-    { \\\n-      if (debug_infrun) \\\n-\tinfrun_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n-    } \\\n-  while (0)\n+  debug_prefixed_printf (\"infrun\", __func__, fmt, ##__VA_ARGS__)\n \n /* True if we are debugging displaced stepping.  */\n extern bool debug_displaced;\n \n-/* Print a \"displaced\" debug statement.  Should be used through\n-   displaced_debug_printf.  */\n-void ATTRIBUTE_PRINTF (2, 3) displaced_debug_printf_1\n-  (const char *func_name, const char *fmt, ...);\n+/* Print a \"displaced\" debug statement.  */\n \n #define displaced_debug_printf(fmt, ...) \\\n-  do \\\n-    { \\\n-      if (debug_displaced) \\\n-\tdisplaced_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n-    } \\\n-  while (0)\n+  debug_prefixed_printf (\"displaced\", __func__, fmt, ##__VA_ARGS__)\n \n /* Nonzero if we want to give control to the user when we're notified\n    of shared library events by the dynamic linker.  */"
    },
    {
      "sha": "d79ea842c2d74a51be1d5c68b65ec3f01fd2d40a",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 16,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -199,24 +199,10 @@ show_debug_linux_nat (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-/* Print a debug statement.  Should be used through linux_nat_debug_printf.  */\n-\n-static void ATTRIBUTE_PRINTF (2, 3)\n-linux_nat_debug_printf_1 (const char *func_name, const char *fmt, ...)\n-{\n-  va_list ap;\n-  va_start (ap, fmt);\n-  debug_prefixed_vprintf (\"linux-nat\", func_name, fmt, ap);\n-  va_end (ap);\n-}\n+/* Print a linux-nat debug statement.  */\n \n #define linux_nat_debug_printf(fmt, ...) \\\n-  do \\\n-    { \\\n-      if (debug_linux_nat) \\\n-\tlinux_nat_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n-    } \\\n-  while (0)\n+  debug_prefixed_printf (\"linux-nat\", __func__, fmt, ##__VA_ARGS__)\n \n struct simple_pid_list\n {"
    },
    {
      "sha": "5cfb6108c6a1887891ee7baae8ae86d2fc225116",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-31  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* common-debug.cc (debug_prefixed_printf): New.\n+\t* common-debug.h (debug_prefixed_printf): New declaration.\n+\t* event-loop.cc (event_loop_debug_printf_1): Remove.\n+\t* event-loop.h (event_loop_debug_printf_1): Remove.\n+\t(event_loop_debug_printf): Use debug_prefixed_printf.\n+\t(event_loop_ui_debug_printf): Use debug_prefixed_printf.\n+\n 2020-10-31  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* common.m4: Replace AC_TRY_COMPILE with AC_COMPILE_IFELSE +"
    },
    {
      "sha": "38f6023f497578fded4b7c689f8c488b153f4ee1",
      "filename": "gdbsupport/common-debug.cc",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/common-debug.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/common-debug.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-debug.cc?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -39,8 +39,21 @@ debug_printf (const char *fmt, ...)\n /* See gdbsupport/common-debug.h.  */\n \n void\n-debug_prefixed_vprintf (const char *module, const char *func, const char *format,\n-\t\t\tva_list args)\n+debug_prefixed_printf (const char *module, const char *func,\n+\t\t       const char *format, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, format);\n+  debug_prefixed_vprintf (module, func, format, ap);\n+  va_end (ap);\n+}\n+\n+/* See gdbsupport/common-debug.h.  */\n+\n+void\n+debug_prefixed_vprintf (const char *module, const char *func,\n+\t\t\tconst char *format, va_list args)\n {\n   debug_printf (\"[%s] %s: \", module, func);\n   debug_vprintf (format, args);"
    },
    {
      "sha": "f9ddccab06331e3c97c5ceafa566a1f28f518757",
      "filename": "gdbsupport/common-debug.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/common-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/common-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-debug.h?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -41,6 +41,12 @@ extern void debug_vprintf (const char *format, va_list ap)\n /* Print a debug statement prefixed with the module and function name, and\n    with a newline at the end.  */\n \n+extern void ATTRIBUTE_PRINTF (3, 4) debug_prefixed_printf\n+  (const char *module, const char *func, const char *format, ...);\n+\n+/* Print a debug statement prefixed with the module and function name, and\n+   with a newline at the end.  */\n+\n extern void ATTRIBUTE_PRINTF (3, 0) debug_prefixed_vprintf\n   (const char *module, const char *func, const char *format, va_list args);\n "
    },
    {
      "sha": "21c48ca035962d76c3a05ea45522932790d47065",
      "filename": "gdbsupport/event-loop.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/event-loop.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/event-loop.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.cc?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -912,14 +912,3 @@ poll_timers (void)\n \n   return 0;\n }\n-\n-/* See event-loop.h.  */\n-\n-void\n-event_loop_debug_printf_1 (const char *func_name, const char *fmt, ...)\n-{\n-  va_list args;\n-  va_start (args, fmt);\n-  debug_prefixed_vprintf (\"event-loop\", func_name, fmt, args);\n-  va_end (args);\n-}"
    },
    {
      "sha": "68808997364b287f8c71aa485b733286790f6197",
      "filename": "gdbsupport/event-loop.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/event-loop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17417fb0ec9842de1774e1e76f1f11c00cdafc47/gdbsupport/event-loop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.h?ref=17417fb0ec9842de1774e1e76f1f11c00cdafc47",
      "patch": "@@ -126,26 +126,26 @@ enum class debug_event_loop_kind\n /* True if we are printing event loop debug statements.  */\n extern debug_event_loop_kind debug_event_loop;\n \n-/* Print an \"event loop\" debug statement.  Should be used through\n-   event_loop_debug_printf.  */\n-void ATTRIBUTE_PRINTF (2, 3) event_loop_debug_printf_1\n-  (const char *func_name, const char *fmt, ...);\n+/* Print an \"event loop\" debug statement.  */\n \n #define event_loop_debug_printf(fmt, ...) \\\n   do \\\n     { \\\n       if (debug_event_loop != debug_event_loop_kind::OFF) \\\n-\tevent_loop_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n+\tdebug_prefixed_printf (\"event-loop\", __func__, fmt, ##__VA_ARGS__); \\\n     } \\\n   while (0)\n \n+/* Print an \"event loop\" debug statement that is know to come from a UI-related\n+   event (e.g. calling the event handler for the fd of the CLI).  */\n+\n #define event_loop_ui_debug_printf(is_ui, fmt, ...) \\\n   do \\\n     { \\\n       if (debug_event_loop == debug_event_loop_kind::ALL \\\n \t  || (debug_event_loop == debug_event_loop_kind::ALL_EXCEPT_UI \\\n \t      && !is_ui)) \\\n-\tevent_loop_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n+\tdebug_prefixed_printf (\"event-loop\", __func__, fmt, ##__VA_ARGS__); \\\n     } \\\n   while (0)\n "
    }
  ]
}