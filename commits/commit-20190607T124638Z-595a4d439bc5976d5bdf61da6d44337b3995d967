{
  "sha": "595a4d439bc5976d5bdf61da6d44337b3995d967",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTk1YTRkNDM5YmM1OTc2ZDViZGY2MWRhNmQ0NDMzN2IzOTk1ZDk2Nw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-06-06T12:59:56Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-06-07T12:46:38Z"
    },
    "message": "libctf: explicitly cast more size_t types used in printf()s\n\nUnsigned long will always be adequate (the only cases involving an\nssize_t are cases in which no error can be generated, or in which\nnegative output would require a seriously corrupted file: the latter has\nbeen rewritten on a branch in any case).\n\nTested on x86_64-pc-linux-gnu, x86_64-unknown-freebsd12.0,\nsparc-sun-solaris2.11, i686-pc-cygwin, i686-w64-mingw32.\n\nlibctf/\n\t* ctf-dump.c (ctf_dump_format_type): Cast size_t's used in printf()s.\n\t(ctf_dump_objts): Likewise.\n\t(ctf_dump_funcs): Likewise.\n\t(ctf_dump_member): Likewise.\n\t(ctf_dump_str): Likewise.",
    "tree": {
      "sha": "209d7dac14e1b2cecbcfd7de8581da1fc81a1d20",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/209d7dac14e1b2cecbcfd7de8581da1fc81a1d20"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/595a4d439bc5976d5bdf61da6d44337b3995d967",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/595a4d439bc5976d5bdf61da6d44337b3995d967",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/595a4d439bc5976d5bdf61da6d44337b3995d967",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/595a4d439bc5976d5bdf61da6d44337b3995d967/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5e73be11b24b6c4b7ecec5f762784c4bb40ec18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5e73be11b24b6c4b7ecec5f762784c4bb40ec18",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f5e73be11b24b6c4b7ecec5f762784c4bb40ec18"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 17,
    "deletions": 7
  },
  "files": [
    {
      "sha": "20f9816efd4a7340c0f1a5fc7cae7b6fd279b6a2",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/595a4d439bc5976d5bdf61da6d44337b3995d967/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/595a4d439bc5976d5bdf61da6d44337b3995d967/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=595a4d439bc5976d5bdf61da6d44337b3995d967",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-06  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-dump.c (ctf_dump_format_type): Cast size_t's used in printf()s.\n+\t(ctf_dump_objts): Likewise.\n+\t(ctf_dump_funcs): Likewise.\n+\t(ctf_dump_member): Likewise.\n+\t(ctf_dump_str): Likewise.\n+\n 2019-06-06  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-archive.c (arc_mmap_header): Mark fd as potentially unused."
    },
    {
      "sha": "3dac435eba39e0587e4a3aa86c928edfee4d62ef",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/595a4d439bc5976d5bdf61da6d44337b3995d967/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/595a4d439bc5976d5bdf61da6d44337b3995d967/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=595a4d439bc5976d5bdf61da6d44337b3995d967",
      "patch": "@@ -122,7 +122,8 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id)\n       else\n \t{\n \t  if (asprintf (&bit, \" %lx: %s (size %lx)\", id, buf[0] == '\\0' ?\n-\t\t\t\"(nameless)\" : buf, ctf_type_size (fp, id)) < 0)\n+\t\t\t\"(nameless)\" : buf,\n+\t\t\t(unsigned long) ctf_type_size (fp, id)) < 0)\n \t    goto oom;\n \t}\n       free (buf);\n@@ -211,12 +212,12 @@ ctf_dump_objts (ctf_file_t *fp, ctf_dump_state_t *state)\n       sym_name = ctf_lookup_symbol_name (fp, i);\n       if (sym_name[0] == '\\0')\n \t{\n-\t  if (asprintf (&str, \"%lx -> \", i) < 0)\n+\t  if (asprintf (&str, \"%lx -> \", (unsigned long) i) < 0)\n \t    return (ctf_set_errno (fp, ENOMEM));\n \t}\n       else\n \t{\n-\t  if (asprintf (&str, \"%s (%lx) -> \", sym_name, i) < 0)\n+\t  if (asprintf (&str, \"%s (%lx) -> \", sym_name, (unsigned long) i) < 0)\n \t    return (ctf_set_errno (fp, ENOMEM));\n \t}\n \n@@ -279,12 +280,12 @@ ctf_dump_funcs (ctf_file_t *fp, ctf_dump_state_t *state)\n       sym_name = ctf_lookup_symbol_name (fp, i);\n       if (sym_name[0] == '\\0')\n \t{\n-\t  if (asprintf (&bit, \"%lx \", i) < 0)\n+\t  if (asprintf (&bit, \"%lx \", (unsigned long) i) < 0)\n \t    goto oom;\n \t}\n       else\n \t{\n-\t  if (asprintf (&bit, \"%s (%lx) \", sym_name, i) < 0)\n+\t  if (asprintf (&bit, \"%s (%lx) \", sym_name, (unsigned long) i) < 0)\n \t    goto oom;\n \t}\n       str = ctf_str_append (str, bit);\n@@ -369,7 +370,7 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n \n   if (asprintf (&bit, \"    [0x%lx] (ID 0x%lx) (kind %i) %s %s (aligned at 0x%lx\",\n \t\toffset, id, ctf_type_kind (state->cdm_fp, id), typestr, name,\n-\t\tctf_type_align (state->cdm_fp, id)) < 0)\n+\t\t(unsigned long) ctf_type_align (state->cdm_fp, id)) < 0)\n     goto oom;\n   *state->cdm_str = ctf_str_append (*state->cdm_str, bit);\n   free (typestr);\n@@ -440,7 +441,8 @@ ctf_dump_str (ctf_file_t *fp, ctf_dump_state_t *state)\n \t fp->ctf_str[CTF_STRTAB_0].cts_len;)\n     {\n       char *str;\n-      if (asprintf (&str, \"%lx: %s\", s - fp->ctf_str[CTF_STRTAB_0].cts_strs,\n+      if (asprintf (&str, \"%lx: %s\",\n+\t\t    (unsigned long) (s - fp->ctf_str[CTF_STRTAB_0].cts_strs),\n \t\t    s) < 0)\n \treturn (ctf_set_errno (fp, ENOMEM));\n       ctf_dump_append (state, str);"
    }
  ]
}