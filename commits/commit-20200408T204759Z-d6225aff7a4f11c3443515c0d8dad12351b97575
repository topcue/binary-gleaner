{
  "sha": "d6225aff7a4f11c3443515c0d8dad12351b97575",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDYyMjVhZmY3YTRmMTFjMzQ0MzUxNWMwZDhkYWQxMjM1MWI5NzU3NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:59Z"
    },
    "message": "Add read_pc / write_pc support to win32-low\n\nThis changes win32-low.c to implement the read_pc and write_pc\nmethods.  A subsequent patch will need these.\n\nNote that I have no way to test, or even compile, the win32-arm-low.c\nchange.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.h (win32_process_target::read_pc)\n\t(win32_process_target::write_pc): Declare.\n\t* win32-low.c (win32_process_target::read_pc)\n\t(win32_process_target::write_pc): New methods.\n\t* win32-i386-low.c (i386_win32_get_pc, i386_win32_set_pc): New\n\tfunctions.\n\t(the_low_target): Update.\n\t* win32-arm-low.c (arm_win32_get_pc, arm_win32_set_pc): New\n\tfunctions.\n\t(the_low_target): Update.",
    "tree": {
      "sha": "15a0f1a7bd457f0e21a3a2f55d5c36d79c233638",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/15a0f1a7bd457f0e21a3a2f55d5c36d79c233638"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d6225aff7a4f11c3443515c0d8dad12351b97575",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6225aff7a4f11c3443515c0d8dad12351b97575",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d6225aff7a4f11c3443515c0d8dad12351b97575",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6225aff7a4f11c3443515c0d8dad12351b97575/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "71fbdbafe07a4edb2ac88705e03e2cb14b3c77da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/71fbdbafe07a4edb2ac88705e03e2cb14b3c77da",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/71fbdbafe07a4edb2ac88705e03e2cb14b3c77da"
    }
  ],
  "stats": {
    "total": 103,
    "additions": 103,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ee66a4b6d99d62c8837ebe56669ff906b12c4c43",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=d6225aff7a4f11c3443515c0d8dad12351b97575",
      "patch": "@@ -1,3 +1,16 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.h (win32_process_target::read_pc)\n+\t(win32_process_target::write_pc): Declare.\n+\t* win32-low.c (win32_process_target::read_pc)\n+\t(win32_process_target::write_pc): New methods.\n+\t* win32-i386-low.c (i386_win32_get_pc, i386_win32_set_pc): New\n+\tfunctions.\n+\t(the_low_target): Update.\n+\t* win32-arm-low.c (arm_win32_get_pc, arm_win32_set_pc): New\n+\tfunctions.\n+\t(the_low_target): Update.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.c (win32_kill, get_child_debug_event): Use"
    },
    {
      "sha": "77200112df135e25c515ba6792225451d9b9cdca",
      "filename": "gdbserver/win32-arm-low.cc",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-arm-low.cc?ref=d6225aff7a4f11c3443515c0d8dad12351b97575",
      "patch": "@@ -115,6 +115,27 @@ arm_arch_setup (void)\n static const unsigned long arm_wince_breakpoint = 0xe6000010;\n #define arm_wince_breakpoint_len 4\n \n+/* Implement win32_target_ops \"get_pc\" method.  */\n+\n+static CORE_ADDR\n+arm_win32_get_pc (struct regcache *regcache)\n+{\n+  uint32_t pc;\n+\n+  collect_register_by_name (regcache, \"pc\", &pc);\n+  return (CORE_ADDR) pc;\n+}\n+\n+/* Implement win32_target_ops \"set_pc\" method.  */\n+\n+static void\n+arm_win32_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+{\n+  uint32_t newpc = pc;\n+\n+  supply_register_by_name (regcache, \"pc\", &newpc);\n+}\n+\n struct win32_target_ops the_low_target = {\n   arm_arch_setup,\n   sizeof (mappings) / sizeof (mappings[0]),\n@@ -127,6 +148,8 @@ struct win32_target_ops the_low_target = {\n   NULL, /* single_step */\n   (const unsigned char *) &arm_wince_breakpoint,\n   arm_wince_breakpoint_len,\n+  arm_win32_get_pc,\n+  arm_win32_set_pc,\n   /* Watchpoint related functions.  See target.h for comments.  */\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */"
    },
    {
      "sha": "eac15b5694a8e4c4477b6bfe93ae5f44f259bd3f",
      "filename": "gdbserver/win32-i386-low.cc",
      "status": "modified",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-i386-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-i386-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-i386-low.cc?ref=d6225aff7a4f11c3443515c0d8dad12351b97575",
      "patch": "@@ -450,6 +450,50 @@ i386_arch_setup (void)\n   win32_tdesc = tdesc;\n }\n \n+/* Implement win32_target_ops \"get_pc\" method.  */\n+\n+static CORE_ADDR\n+i386_win32_get_pc (struct regcache *regcache)\n+{\n+  bool use_64bit = register_size (regcache->tdesc, 0) == 8;\n+\n+  if (use_64bit)\n+    {\n+      uint64_t pc;\n+\n+      collect_register_by_name (regcache, \"rip\", &pc);\n+      return (CORE_ADDR) pc;\n+    }\n+  else\n+    {\n+      uint32_t pc;\n+\n+      collect_register_by_name (regcache, \"eip\", &pc);\n+      return (CORE_ADDR) pc;\n+    }\n+}\n+\n+/* Implement win32_target_ops \"set_pc\" method.  */\n+\n+static void\n+i386_win32_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+{\n+  bool use_64bit = register_size (regcache->tdesc, 0) == 8;\n+\n+  if (use_64bit)\n+    {\n+      uint64_t newpc = pc;\n+\n+      supply_register_by_name (regcache, \"rip\", &newpc);\n+    }\n+  else\n+    {\n+      uint32_t newpc = pc;\n+\n+      supply_register_by_name (regcache, \"eip\", &newpc);\n+    }\n+}\n+\n struct win32_target_ops the_low_target = {\n   i386_arch_setup,\n   sizeof (mappings) / sizeof (mappings[0]),\n@@ -462,6 +506,8 @@ struct win32_target_ops the_low_target = {\n   i386_single_step,\n   &i386_win32_breakpoint,\n   i386_win32_breakpoint_len,\n+  i386_win32_get_pc,\n+  i386_win32_set_pc,\n   i386_supports_z_point_type,\n   i386_insert_point,\n   i386_remove_point,"
    },
    {
      "sha": "131eacb13c4110e7eb22a36d174f1147ebf10101",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=d6225aff7a4f11c3443515c0d8dad12351b97575",
      "patch": "@@ -1659,6 +1659,18 @@ win32_process_target::sw_breakpoint_from_kind (int kind, int *size)\n   return the_low_target.breakpoint;\n }\n \n+CORE_ADDR\n+win32_process_target::read_pc (struct regcache *regcache)\n+{\n+  return (*the_low_target.get_pc) (regcache);\n+}\n+\n+void\n+win32_process_target::write_pc (struct regcache *regcache, CORE_ADDR pc)\n+{\n+  return (*the_low_target.set_pc) (regcache, pc);\n+}\n+\n /* The win32 target ops object.  */\n \n static win32_process_target the_win32_target;"
    },
    {
      "sha": "56ff8a9baf2a8360881adc5178fed5c667739a4d",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6225aff7a4f11c3443515c0d8dad12351b97575/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=d6225aff7a4f11c3443515c0d8dad12351b97575",
      "patch": "@@ -63,6 +63,11 @@ struct win32_target_ops\n   const unsigned char *breakpoint;\n   int breakpoint_len;\n \n+  /* Get the PC register from REGCACHE.  */\n+  CORE_ADDR (*get_pc) (struct regcache *regcache);\n+  /* Set the PC register in REGCACHE.  */\n+  void (*set_pc) (struct regcache *regcache, CORE_ADDR newpc);\n+\n   /* Breakpoint/Watchpoint related functions.  See target.h for comments.  */\n   int (*supports_z_point_type) (char z_type);\n   int (*insert_point) (enum raw_bkpt_type type, CORE_ADDR addr,\n@@ -142,6 +147,10 @@ class win32_process_target : public process_stratum_target\n   int get_tib_address (ptid_t ptid, CORE_ADDR *addr) override;\n \n   const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n+  CORE_ADDR read_pc (regcache *regcache) override;\n+\n+  void write_pc (regcache *regcache, CORE_ADDR pc) override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}