{
  "sha": "6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmVlYjVjNTUzMWYwMjM4ZDM2N2EyZjNmMTUyMGFlM2UyNDAxZjdlYQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:55Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:08Z"
    },
    "message": "gdbserver: turn target ops 'stopped_by_watchpoint' and 'stopped_data_address' into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's stopped_by_watchpoint and\n\tstopped_data_address ops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t* target.cc (process_target::stopped_by_watchpoint): Define.\n\t(process_target::stopped_data_address): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* remote-utils.cc (prepare_resume_reply): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_stopped_by_watchpoint): Turn into ...\n\t(linux_process_target::stopped_by_watchpoint): ... this.\n\t(linux_stopped_data_address): Turn into ...\n\t(linux_process_target::stopped_data_address): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_stopped_by_watchpoint): Turn into ...\n\t(nto_process_target::stopped_by_watchpoint): ... this.\n\t(nto_stopped_data_address): Turn into ...\n\t(nto_process_target::stopped_data_address): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.\n\t(win32_stopped_by_watchpoint): Turn into ...\n\t(win32_process_target::stopped_by_watchpoint): ... this.\n\t(win32_stopped_data_address): Turn into ...\n\t(win32_process_target::stopped_data_address): ... this.\n\t* win32-low.h (class win32_process_target): Update.",
    "tree": {
      "sha": "78bd9c69913ee64f4fc7ba3cb18a4beb2d09e854",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/78bd9c69913ee64f4fc7ba3cb18a4beb2d09e854"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22aa6223a0f6f7b8f5439166de2bbbb940ca9804",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22aa6223a0f6f7b8f5439166de2bbbb940ca9804",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22aa6223a0f6f7b8f5439166de2bbbb940ca9804"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 83,
    "deletions": 37
  },
  "files": [
    {
      "sha": "f7ac9a877cecf33490e82d1ae7246668af9f0cdb",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -1,3 +1,36 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's stopped_by_watchpoint and\n+\tstopped_data_address ops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t* target.cc (process_target::stopped_by_watchpoint): Define.\n+\t(process_target::stopped_data_address): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* remote-utils.cc (prepare_resume_reply): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_stopped_by_watchpoint): Turn into ...\n+\t(linux_process_target::stopped_by_watchpoint): ... this.\n+\t(linux_stopped_data_address): Turn into ...\n+\t(linux_process_target::stopped_data_address): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_stopped_by_watchpoint): Turn into ...\n+\t(nto_process_target::stopped_by_watchpoint): ... this.\n+\t(nto_stopped_data_address): Turn into ...\n+\t(nto_process_target::stopped_data_address): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\t(win32_stopped_by_watchpoint): Turn into ...\n+\t(win32_process_target::stopped_by_watchpoint): ... this.\n+\t(win32_stopped_data_address): Turn into ...\n+\t(win32_process_target::stopped_data_address): ... this.\n+\t* win32-low.h (class win32_process_target): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's supports_hardware_single_step op into"
    },
    {
      "sha": "5a5c6372823c31e7fcef8d7fc6f9e931396bcefa",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -269,7 +269,6 @@ static int linux_wait_for_event_filtered (ptid_t wait_ptid, ptid_t filter_ptid,\n \t\t\t\t\t  int *wstat, int options);\n static int linux_wait_for_event (ptid_t ptid, int *wstat, int options);\n static struct lwp_info *add_lwp (ptid_t ptid);\n-static int linux_stopped_by_watchpoint (void);\n static void mark_lwp_dead (struct lwp_info *lwp, int wstat);\n static int lwp_is_marked_dead (struct lwp_info *lwp);\n static void proceed_all_lwps (void);\n@@ -6044,16 +6043,16 @@ linux_supports_software_single_step (void)\n   return can_software_single_step ();\n }\n \n-static int\n-linux_stopped_by_watchpoint (void)\n+bool\n+linux_process_target::stopped_by_watchpoint ()\n {\n   struct lwp_info *lwp = get_thread_lwp (current_thread);\n \n   return lwp->stop_reason == TARGET_STOPPED_BY_WATCHPOINT;\n }\n \n-static CORE_ADDR\n-linux_stopped_data_address (void)\n+CORE_ADDR\n+linux_process_target::stopped_data_address ()\n {\n   struct lwp_info *lwp = get_thread_lwp (current_thread);\n \n@@ -7376,8 +7375,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_stopped_by_watchpoint,\n-  linux_stopped_data_address,\n #if defined(__UCLIBC__) && defined(HAS_NOMMU)\t      \\\n     && defined(PT_TEXT_ADDR) && defined(PT_DATA_ADDR) \\\n     && defined(PT_TEXT_END_ADDR)"
    },
    {
      "sha": "af2a0c6671eba2c44699bd9ef3175ce0c19c0944",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -332,6 +332,10 @@ class linux_process_target : public process_target\n   bool supports_stopped_by_hw_breakpoint () override;\n \n   bool supports_hardware_single_step () override;\n+\n+  bool stopped_by_watchpoint () override;\n+\n+  CORE_ADDR stopped_data_address () override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "e9dfccede0581541439ea417bf6041ea80703817",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -735,8 +735,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* stopped_by_watchpoint */\n-  NULL,  /* stopped_data_address */\n   NULL,  /* read_offsets */\n   NULL,  /* get_tls_address */\n   NULL,  /* hostio_last_error */"
    },
    {
      "sha": "53020a25e733e0575094eccff2be4cd7d5a73ba5",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -878,12 +878,12 @@ nto_process_target::supports_hardware_single_step ()\n /* Check if the reason of stop for current thread (CURRENT_INFERIOR) is\n    a watchpoint.\n \n-   Return 1 if stopped by watchpoint, 0 otherwise.  */\n+   Return true if stopped by watchpoint, false otherwise.  */\n \n-static int\n-nto_stopped_by_watchpoint (void)\n+bool\n+nto_process_target::stopped_by_watchpoint ()\n {\n-  int ret = 0;\n+  bool ret = false;\n \n   TRACE (\"%s\\n\", __func__);\n   if (nto_inferior.ctl_fd != -1 && current_thread != NULL)\n@@ -899,7 +899,7 @@ nto_stopped_by_watchpoint (void)\n \t  err = devctl (nto_inferior.ctl_fd, DCMD_PROC_STATUS, &status,\n \t\t\tsizeof (status), 0);\n \t  if (err == EOK && (status.flags & watchmask))\n-\t    ret = 1;\n+\t    ret = true;\n \t}\n     }\n   TRACE (\"%s: %s\\n\", __func__, ret ? \"yes\" : \"no\");\n@@ -910,8 +910,8 @@ nto_stopped_by_watchpoint (void)\n \n    Return inferior's instruction pointer value, or 0 on error.  */ \n \n-static CORE_ADDR\n-nto_stopped_data_address (void)\n+CORE_ADDR\n+nto_process_target::stopped_data_address ()\n {\n   CORE_ADDR ret = (CORE_ADDR)0;\n \n@@ -956,8 +956,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_stopped_by_watchpoint,\n-  nto_stopped_data_address,\n   NULL, /* nto_read_offsets */\n   NULL, /* thread_db_set_tls_address */\n   hostio_last_error_from_errno,"
    },
    {
      "sha": "c3e7099e702c9f11a76e12489f89cd4070cca0f8",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -94,6 +94,10 @@ class nto_process_target : public process_target\n \t\t    int size, raw_breakpoint *bp) override;\n \n   bool supports_hardware_single_step () override;\n+\n+  bool stopped_by_watchpoint () override;\n+\n+  CORE_ADDR stopped_data_address () override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "316f04e32ee34862dfceb7ad24e4d3ee28b3f786",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -1214,16 +1214,15 @@ prepare_resume_reply (char *buf, ptid_t ptid,\n \n \tregcache = get_thread_regcache (current_thread, 1);\n \n-\tif (the_target->stopped_by_watchpoint != NULL\n-\t    && (*the_target->stopped_by_watchpoint) ())\n+\tif (the_target->pt->stopped_by_watchpoint ())\n \t  {\n \t    CORE_ADDR addr;\n \t    int i;\n \n \t    memcpy (buf, \"watch:\", 6);\n \t    buf += 6;\n \n-\t    addr = (*the_target->stopped_data_address) ();\n+\t    addr = the_target->pt->stopped_data_address ();\n \n \t    /* Convert each byte of the address into two hexadecimal\n \t       chars.  Note that we take sizeof (void *) instead of"
    },
    {
      "sha": "00f5f794b85b30070782f003cce57b0cea0d3da2",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -469,3 +469,15 @@ process_target::supports_hardware_single_step ()\n {\n   return false;\n }\n+\n+bool\n+process_target::stopped_by_watchpoint ()\n+{\n+  return false;\n+}\n+\n+CORE_ADDR\n+process_target::stopped_data_address ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "83595fad520c683f5f85296bd3d248cba7b1b88c",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -70,15 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Returns 1 if target was stopped due to a watchpoint hit, 0 otherwise.  */\n-\n-  int (*stopped_by_watchpoint) (void);\n-\n-  /* Returns the address associated with the watchpoint that hit, if any;\n-     returns 0 otherwise.  */\n-\n-  CORE_ADDR (*stopped_data_address) (void);\n-\n   /* Reports the text, data offsets of the executable.  This is\n      needed for uclinux where the executable is relocated during load\n      time.  */\n@@ -476,6 +467,14 @@ class process_target\n \n   /* Returns true if the target can do hardware single step.  */\n   virtual bool supports_hardware_single_step ();\n+\n+  /* Returns true if target was stopped due to a watchpoint hit, false\n+     otherwise.  */\n+  virtual bool stopped_by_watchpoint ();\n+\n+  /* Returns the address associated with the watchpoint that hit, if any;\n+     returns 0 otherwise.  */\n+  virtual CORE_ADDR stopped_data_address ();\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "ff62bcefb0da89118057fa248991a39f435553be",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -283,17 +283,17 @@ win32_process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n     return 1;\n }\n \n-static int\n-win32_stopped_by_watchpoint (void)\n+bool\n+win32_process_target::stopped_by_watchpoint ()\n {\n   if (the_low_target.stopped_by_watchpoint != NULL)\n     return the_low_target.stopped_by_watchpoint ();\n   else\n-    return 0;\n+    return false;\n }\n \n-static CORE_ADDR\n-win32_stopped_data_address (void)\n+CORE_ADDR\n+win32_process_target::stopped_data_address ()\n {\n   if (the_low_target.stopped_data_address != NULL)\n     return the_low_target.stopped_data_address ();\n@@ -1844,8 +1844,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  win32_stopped_by_watchpoint,\n-  win32_stopped_data_address,\n   NULL, /* read_offsets */\n   NULL, /* get_tls_address */\n #ifdef _WIN32_WCE"
    },
    {
      "sha": "b2b8a6dedc326270005e123d547f62f1b318148e",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "patch": "@@ -148,6 +148,10 @@ class win32_process_target : public process_target\n \t\t    int size, raw_breakpoint *bp) override;\n \n   bool supports_hardware_single_step () override;\n+\n+  bool stopped_by_watchpoint () override;\n+\n+  CORE_ADDR stopped_data_address () override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}