{
  "sha": "b868a2393bfd65221fe94e4ef2eebf218dee5a71",
  "node_id": "C_kwDOANOeidoAKGI4NjhhMjM5M2JmZDY1MjIxZmU5NGU0ZWYyZWViZjIxOGRlZTVhNzE",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-07-07T03:21:20Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-10-31T08:50:44Z"
    },
    "message": "sim: nltvals: localize TARGET_<open> defines\n\nCode should not be using these directly, instead they should be\nresolving these dynamically via the open_map.  Rework the common\ncallback code that was using the defines to use symbolic names\ninstead, and localize some of the defines in the ARM code (since\nit's a bit unclear how many different APIs it supports currently),\nthen remove the defines out of the header so no new code can rely on\nthem.",
    "tree": {
      "sha": "21a05a8a3759bf111590424492a108128fda227e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/21a05a8a3759bf111590424492a108128fda227e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b868a2393bfd65221fe94e4ef2eebf218dee5a71",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b868a2393bfd65221fe94e4ef2eebf218dee5a71",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b868a2393bfd65221fe94e4ef2eebf218dee5a71",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b868a2393bfd65221fe94e4ef2eebf218dee5a71/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "88c8370b25c6a76cb7de19a3ef50a34abc090756",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88c8370b25c6a76cb7de19a3ef50a34abc090756",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/88c8370b25c6a76cb7de19a3ef50a34abc090756"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 40,
    "deletions": 25
  },
  "files": [
    {
      "sha": "a8ef7e4a82d9c8fb0cec7334506f0f3811e98d85",
      "filename": "sim/arm/armos.c",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b868a2393bfd65221fe94e4ef2eebf218dee5a71/sim/arm/armos.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b868a2393bfd65221fe94e4ef2eebf218dee5a71/sim/arm/armos.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/arm/armos.c?ref=b868a2393bfd65221fe94e4ef2eebf218dee5a71",
      "patch": "@@ -31,11 +31,6 @@\n #include <errno.h>\n #include <limits.h>\n #include <string.h>\n-#include \"targ-vals.h\"\n-\n-#ifndef TARGET_O_BINARY\n-#define TARGET_O_BINARY 0\n-#endif\n \n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\t\t/* For SEEK_SET etc.  */\n@@ -188,7 +183,17 @@ ARMul_OSInit (ARMul_State * state)\n    return TRUE;\n }\n \n-static int translate_open_mode[] =\n+/* These are libgloss defines, but seem to be common across all supported ARM\n+   targets at the moment.  These should get moved to the callback open_map.  */\n+#define TARGET_O_BINARY 0\n+#define TARGET_O_APPEND 0x8\n+#define TARGET_O_CREAT 0x200\n+#define TARGET_O_RDONLY 0x0\n+#define TARGET_O_RDWR 0x2\n+#define TARGET_O_TRUNC 0x400\n+#define TARGET_O_WRONLY 0x1\n+\n+static const int translate_open_mode[] =\n {\n   TARGET_O_RDONLY,\t\t/* \"r\"   */\n   TARGET_O_RDONLY + TARGET_O_BINARY,\t/* \"rb\"  */"
    },
    {
      "sha": "941f4302b6e4785e00376785f0e3046a83780b8f",
      "filename": "sim/common/callback.c",
      "status": "modified",
      "additions": 28,
      "deletions": 14,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b868a2393bfd65221fe94e4ef2eebf218dee5a71/sim/common/callback.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b868a2393bfd65221fe94e4ef2eebf218dee5a71/sim/common/callback.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/callback.c?ref=b868a2393bfd65221fe94e4ef2eebf218dee5a71",
      "patch": "@@ -37,7 +37,6 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n #include \"sim/callback.h\"\n-#include \"targ-vals.h\"\n /* For xmalloc.  */\n #include \"libiberty.h\"\n \n@@ -886,29 +885,44 @@ cb_target_to_host_open (host_callback *cb, int target_val)\n {\n   int host_val = 0;\n   CB_TARGET_DEFS_MAP *m;\n+  int o_rdonly = 0;\n+  int o_wronly = 0;\n+  int o_rdwr = 0;\n+  int o_binary = 0;\n+  int o_rdwrmask;\n \n+  /* O_RDONLY can be (and usually is) 0 which needs to be treated specially.  */\n   for (m = &cb->open_map[0]; m->host_val != -1; ++m)\n     {\n-      switch (m->target_val)\n+      if (!strcmp (m->name, \"O_RDONLY\"))\n+\to_rdonly = m->target_val;\n+      else if (!strcmp (m->name, \"O_WRONLY\"))\n+\to_wronly = m->target_val;\n+      else if (!strcmp (m->name, \"O_RDWR\"))\n+\to_rdwr = m->target_val;\n+      else if (!strcmp (m->name, \"O_BINARY\"))\n+\to_binary = m->target_val;\n+    }\n+  o_rdwrmask = o_rdonly | o_wronly | o_rdwr;\n+\n+  for (m = &cb->open_map[0]; m->host_val != -1; ++m)\n+    {\n+      if (m->target_val == o_rdonly || m->target_val == o_wronly\n+\t  || m->target_val == o_rdwr)\n \t{\n-\t  /* O_RDONLY can be (and usually is) 0 which needs to be treated\n-\t     specially.  */\n-\tcase TARGET_O_RDONLY :\n-\tcase TARGET_O_WRONLY :\n-\tcase TARGET_O_RDWR :\n-\t  if ((target_val & (TARGET_O_RDONLY | TARGET_O_WRONLY | TARGET_O_RDWR))\n-\t      == m->target_val)\n+\t  if ((target_val & o_rdwrmask) == m->target_val)\n \t    host_val |= m->host_val;\n \t  /* Handle the host/target differentiating between binary and\n              text mode.  Only one case is of importance */\n-#if ! defined (TARGET_O_BINARY) && defined (O_BINARY)\n-\t  host_val |= O_BINARY;\n+#ifdef O_BINARY\n+\t  if (o_binary == 0)\n+\t    host_val |= O_BINARY;\n #endif\n-\t  break;\n-\tdefault :\n+\t}\n+      else\n+\t{\n \t  if ((m->target_val & target_val) == m->target_val)\n \t    host_val |= m->host_val;\n-\t  break;\n \t}\n     }\n "
    },
    {
      "sha": "2c7288bd605631a4b1b99ec591b111d41b81dbd1",
      "filename": "sim/common/gentmap.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b868a2393bfd65221fe94e4ef2eebf218dee5a71/sim/common/gentmap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b868a2393bfd65221fe94e4ef2eebf218dee5a71/sim/common/gentmap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gentmap.c?ref=b868a2393bfd65221fe94e4ef2eebf218dee5a71",
      "patch": "@@ -39,11 +39,6 @@ gen_targ_vals_h (void)\n     printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n   printf (\"\\n\");\n \n-  printf (\"/* open flag values */\\n\");\n-  for (t = &open_tdefs[0]; t->symbol; ++t)\n-    printf (\"#define TARGET_%s 0x%x\\n\", t->symbol, t->value);\n-  printf (\"\\n\");\n-\n   printf (\"#endif /* TARG_VALS_H */\\n\");\n }\n \n@@ -78,6 +73,7 @@ gen_targ_map_c (void)\n   printf (\"CB_TARGET_DEFS_MAP cb_init_open_map[] = {\\n\");\n   for (t = &open_tdefs[0]; t->symbol; ++t)\n     {\n+      printf (\"#define TARGET_%s 0x%x\\n\", t->symbol, t->value);\n       printf (\"#ifdef %s\\n\", t->symbol);\n       printf (\"  { \\\"%s\\\", %s, TARGET_%s },\\n\", t->symbol, t->symbol, t->symbol);\n       printf (\"#endif\\n\");"
    }
  ]
}