{
  "sha": "c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzFiNWMxZWJjOTM4YjZkYzAyNzczNjNiOGM0N2Q3NWIwYjVhNjIxZg==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-03T23:10:32Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-16T06:44:36Z"
    },
    "message": "Use an accessor function for general_symbol_info::language\n\nAlso renames the member variable to m_language to make code easier to read\nwhen more functions become member functions.\n\nI was originally hoping to eventually make m_language private (after a few\nmore patches), but unfortunately then it no longer counts as a POD type,\nwhich means gdbsupport/poison.h won't let us use memset to initialize\nthis type, which psymtabs rely on to clear padding bytes so that bcache\ncan work properly.\n\ngdb/ChangeLog:\n\n2019-12-15  Christian Biesinger  <cbiesinger@google.com>\n\n\t* ada-lang.c (ada_add_block_symbols): Update.\n\t(ada_collect_symbol_completion_matches): Update.\n\t* ax-gdb.c (gen_expr): Update.\n\t* block.c (block_lookup_symbol): Update.\n\t(block_lookup_symbol_primary): Update.\n\t(block_find_symbol): Update.\n\t* cp-namespace.c (cp_lookup_symbol_imports_or_template): Update.\n\t* dbxread.c (process_one_symbol): Update.\n\t* dictionary.c (insert_symbol_hashed): Update.\n\t(collate_pending_symbols_by_language): Update.\n\t(mdict_add_symbol): Update.\n\t* dwarf-index-write.c (write_psymbols): Update.\n\t* dwarf2read.c (fixup_go_packaging): Update.\n\t* findvar.c (read_var_value): Update.\n\t* ft32-tdep.c (ft32_skip_prologue): Update.\n\t* go-lang.c (go_symbol_package_name): Update.\n\t* language.h (scoped_switch_to_sym_language_if_auto::\n\tscoped_switch_to_sym_language_if_auto): Update.\n\t* linespec.c (find_method): Update.\n\t(find_label_symbols_in_block): Update.\n\t* mdebugread.c (parse_symbol): Update.\n\t* mi/mi-cmd-stack.c (list_arg_or_local): Update.\n\t* minsyms.c (add_minsym_to_demangled_hash_table): Update.\n\t(minimal_symbol_reader::install): Update.\n\t* moxie-tdep.c (moxie_skip_prologue): Update.\n\t* parse.c (parse_exp_in_context): Update.\n\t* psymtab.c (psymbol_name_matches): Update.\n\t(match_partial_symbol): Update.\n\t(lookup_partial_symbol): Update.\n\t(psymbol_hash): Update.\n\t(psymbol_compare): Update.\n\t* python/py-framefilter.c (extract_sym): Update.\n\t(py_print_single_arg): Update.\n\t* stabsread.c (define_symbol): Update.\n\t* stack.c (print_frame_arg): Update.\n\t(find_frame_funname): Update.\n\t(info_frame_command_core): Update.\n\t* symfile.c (set_initial_language): Update.\n\t* symtab.c (symbol_set_demangled_name): Update.\n\t(symbol_get_demangled_name): Update.\n\t(symbol_set_language): Update.\n\t(symbol_find_demangled_name): Update.\n\t(symbol_set_names): Update.\n\t(general_symbol_info::natural_name): Update.\n\t(general_symbol_info::demangled_name): Update.\n\t(general_symbol_info::search_name): Update.\n\t(symbol_matches_search_name): Update.\n\t(eq_symbol_entry): Update.\n\t(iterate_over_symbols): Update.\n\t(completion_list_add_symbol): Update.\n\t(completion_list_add_msymbol): Update.\n\t(completion_list_add_fields): Update.\n\t* symtab.h (struct general_symbol_info) <language>: New function.\n\t<language>: Rename to...\n\t<m_language>: ...this.\n\t(SYMBOL_LANGUAGE): Remove.\n\t(MSYMBOL_LANGUAGE): Remove.\n\t(struct symbol) <ctor>: Update.\n\t* xstormy16-tdep.c (xstormy16_skip_prologue): Update.\n\nChange-Id: I6464d477457e61639c63ddf8b145e407a35c235a",
    "tree": {
      "sha": "cd54633651ff68399debc38f92e762b15b607aa2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd54633651ff68399debc38f92e762b15b607aa2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "747cfc8c6bb23d40b3fa987f6c3df9d3a0d7b817",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/747cfc8c6bb23d40b3fa987f6c3df9d3a0d7b817",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/747cfc8c6bb23d40b3fa987f6c3df9d3a0d7b817"
    }
  ],
  "stats": {
    "total": 255,
    "additions": 156,
    "deletions": 99
  },
  "files": [
    {
      "sha": "60cf8c152f777abf4de5ef136f45d1acd539dc5d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -1,3 +1,65 @@\n+2019-12-15  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* ada-lang.c (ada_add_block_symbols): Update.\n+\t(ada_collect_symbol_completion_matches): Update.\n+\t* ax-gdb.c (gen_expr): Update.\n+\t* block.c (block_lookup_symbol): Update.\n+\t(block_lookup_symbol_primary): Update.\n+\t(block_find_symbol): Update.\n+\t* cp-namespace.c (cp_lookup_symbol_imports_or_template): Update.\n+\t* dbxread.c (process_one_symbol): Update.\n+\t* dictionary.c (insert_symbol_hashed): Update.\n+\t(collate_pending_symbols_by_language): Update.\n+\t(mdict_add_symbol): Update.\n+\t* dwarf-index-write.c (write_psymbols): Update.\n+\t* dwarf2read.c (fixup_go_packaging): Update.\n+\t* findvar.c (read_var_value): Update.\n+\t* ft32-tdep.c (ft32_skip_prologue): Update.\n+\t* go-lang.c (go_symbol_package_name): Update.\n+\t* language.h (scoped_switch_to_sym_language_if_auto::\n+\tscoped_switch_to_sym_language_if_auto): Update.\n+\t* linespec.c (find_method): Update.\n+\t(find_label_symbols_in_block): Update.\n+\t* mdebugread.c (parse_symbol): Update.\n+\t* mi/mi-cmd-stack.c (list_arg_or_local): Update.\n+\t* minsyms.c (add_minsym_to_demangled_hash_table): Update.\n+\t(minimal_symbol_reader::install): Update.\n+\t* moxie-tdep.c (moxie_skip_prologue): Update.\n+\t* parse.c (parse_exp_in_context): Update.\n+\t* psymtab.c (psymbol_name_matches): Update.\n+\t(match_partial_symbol): Update.\n+\t(lookup_partial_symbol): Update.\n+\t(psymbol_hash): Update.\n+\t(psymbol_compare): Update.\n+\t* python/py-framefilter.c (extract_sym): Update.\n+\t(py_print_single_arg): Update.\n+\t* stabsread.c (define_symbol): Update.\n+\t* stack.c (print_frame_arg): Update.\n+\t(find_frame_funname): Update.\n+\t(info_frame_command_core): Update.\n+\t* symfile.c (set_initial_language): Update.\n+\t* symtab.c (symbol_set_demangled_name): Update.\n+\t(symbol_get_demangled_name): Update.\n+\t(symbol_set_language): Update.\n+\t(symbol_find_demangled_name): Update.\n+\t(symbol_set_names): Update.\n+\t(general_symbol_info::natural_name): Update.\n+\t(general_symbol_info::demangled_name): Update.\n+\t(general_symbol_info::search_name): Update.\n+\t(symbol_matches_search_name): Update.\n+\t(eq_symbol_entry): Update.\n+\t(iterate_over_symbols): Update.\n+\t(completion_list_add_symbol): Update.\n+\t(completion_list_add_msymbol): Update.\n+\t(completion_list_add_fields): Update.\n+\t* symtab.h (struct general_symbol_info) <language>: New function.\n+\t<language>: Rename to...\n+\t<m_language>: ...this.\n+\t(SYMBOL_LANGUAGE): Remove.\n+\t(MSYMBOL_LANGUAGE): Remove.\n+\t(struct symbol) <ctor>: Update.\n+\t* xstormy16-tdep.c (xstormy16_skip_prologue): Update.\n+\n 2019-12-15  Christian Biesinger  <cbiesinger@google.com>\n \n \t* ada-exp.y (write_ambiguous_var): Call symbol_set_language to"
    },
    {
      "sha": "030c4aa131b5981f9931c3506eaa4b63b0ebd7f9",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -6220,8 +6220,7 @@ ada_add_block_symbols (struct obstack *obstackp,\n        sym != NULL;\n        sym = block_iter_match_next (lookup_name, &iter))\n     {\n-      if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n-\t\t\t\t SYMBOL_DOMAIN (sym), domain))\n+      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain))\n \t{\n \t  if (SYMBOL_CLASS (sym) != LOC_UNRESOLVED)\n \t    {\n@@ -6260,7 +6259,7 @@ ada_add_block_symbols (struct obstack *obstackp,\n \n       ALL_BLOCK_SYMBOLS (block, iter, sym)\n       {\n-        if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n+        if (symbol_matches_domain (sym->language (),\n                                    SYMBOL_DOMAIN (sym), domain))\n           {\n             int cmp;\n@@ -6428,7 +6427,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n \t  if (completion_skip_symbol (mode, msymbol))\n \t    continue;\n \n-\t  language symbol_language = MSYMBOL_LANGUAGE (msymbol);\n+\t  language symbol_language = msymbol->language ();\n \n \t  /* Ada minimal symbols won't have their language set to Ada.  If\n \t     we let completion_list_add_name compare using the\n@@ -6466,7 +6465,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n \t  continue;\n \n \tcompletion_list_add_name (tracker,\n-\t\t\t\t  SYMBOL_LANGUAGE (sym),\n+\t\t\t\t  sym->language (),\n \t\t\t\t  sym->linkage_name (),\n \t\t\t\t  lookup_name, text, word);\n       }\n@@ -6487,7 +6486,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n \t\tcontinue;\n \n \t      completion_list_add_name (tracker,\n-\t\t\t\t\tSYMBOL_LANGUAGE (sym),\n+\t\t\t\t\tsym->language (),\n \t\t\t\t\tsym->linkage_name (),\n \t\t\t\t\tlookup_name, text, word);\n \t    }\n@@ -6509,7 +6508,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n \t\tcontinue;\n \n \t      completion_list_add_name (tracker,\n-\t\t\t\t\tSYMBOL_LANGUAGE (sym),\n+\t\t\t\t\tsym->language (),\n \t\t\t\t\tsym->linkage_name (),\n \t\t\t\t\tlookup_name, text, word);\n \t    }"
    },
    {
      "sha": "d25413ea1f2f15ac1d05353865a9425e4c088b7b",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -2230,7 +2230,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n \n \tb = block_for_pc (ax->scope);\n \tfunc = block_linkage_function (b);\n-\tlang = language_def (SYMBOL_LANGUAGE (func));\n+\tlang = language_def (func->language ());\n \n \tsym = lookup_language_this (lang, b).symbol;\n \tif (!sym)"
    },
    {
      "sha": "58441bfe8993c37a94cf26148bc9420eaafb0db6",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -729,7 +729,7 @@ block_lookup_symbol (const struct block *block, const char *name,\n \t     STRUCT vs VAR domain symbols.  So if a matching symbol is found,\n \t     make sure there is no \"better\" matching symbol, i.e., one with\n \t     exactly the same domain.  PR 16253.  */\n-\t  if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n+\t  if (symbol_matches_domain (sym->language (),\n \t\t\t\t     SYMBOL_DOMAIN (sym), domain))\n \t    other = better_symbol (other, sym, domain);\n \t}\n@@ -750,7 +750,7 @@ block_lookup_symbol (const struct block *block, const char *name,\n \n       ALL_BLOCK_SYMBOLS_WITH_NAME (block, lookup_name, iter, sym)\n \t{\n-\t  if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n+\t  if (symbol_matches_domain (sym->language (),\n \t\t\t\t     SYMBOL_DOMAIN (sym), domain))\n \t    {\n \t      sym_found = sym;\n@@ -819,8 +819,7 @@ block_lookup_symbol_primary (const struct block *block, const char *name,\n \t STRUCT vs VAR domain symbols.  So if a matching symbol is found,\n \t make sure there is no \"better\" matching symbol, i.e., one with\n \t exactly the same domain.  PR 16253.  */\n-      if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n-\t\t\t\t SYMBOL_DOMAIN (sym), domain))\n+      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain))\n \tother = better_symbol (other, sym, domain);\n     }\n \n@@ -847,8 +846,7 @@ block_find_symbol (const struct block *block, const char *name,\n     {\n       /* MATCHER is deliberately called second here so that it never sees\n \t a non-domain-matching symbol.  */\n-      if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n-\t\t\t\t SYMBOL_DOMAIN (sym), domain)\n+      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain)\n \t  && matcher (sym, data))\n \treturn sym;\n     }"
    },
    {
      "sha": "20067cdd0360ae535099a54f44e9251adf782eb8",
      "filename": "gdb/cp-namespace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/cp-namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/cp-namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-namespace.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -516,7 +516,7 @@ cp_lookup_symbol_imports_or_template (const char *scope,\n \t\t\t  domain_name (domain));\n     }\n \n-  if (function != NULL && SYMBOL_LANGUAGE (function) == language_cplus)\n+  if (function != NULL && function->language () == language_cplus)\n     {\n       /* Search the function's template parameters.  */\n       if (SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION (function))"
    },
    {
      "sha": "ecfa89ae0cd0269679c5bd9b8434a9c35a1099fa",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -2456,7 +2456,7 @@ process_one_symbol (int type, int desc, CORE_ADDR valu, const char *name,\n \t\t\t\tcstk.start_addr, cstk.start_addr + valu);\n \n \t  /* For C++, set the block's scope.  */\n-\t  if (SYMBOL_LANGUAGE (cstk.name) == language_cplus)\n+\t  if (cstk.name->language () == language_cplus)\n \t    cp_set_block_scope (cstk.name, block, &objfile->objfile_obstack);\n \n \t  /* May be switching to an assembler file which may not be using\n@@ -2823,7 +2823,7 @@ process_one_symbol (int type, int desc, CORE_ADDR valu, const char *name,\n \t\t\t\t\tcstk.start_addr, valu);\n \n \t\t  /* For C++, set the block's scope.  */\n-\t\t  if (SYMBOL_LANGUAGE (cstk.name) == language_cplus)\n+\t\t  if (cstk.name->language () == language_cplus)\n \t\t    cp_set_block_scope (cstk.name, block,\n \t\t\t\t\t&objfile->objfile_obstack);\n \t\t}"
    },
    {
      "sha": "125a062d80d88c3ec4d82da83314f09b51eb8eff",
      "filename": "gdb/dictionary.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dictionary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dictionary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dictionary.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -640,9 +640,9 @@ insert_symbol_hashed (struct dictionary *dict,\n \n   /* We don't want to insert a symbol into a dictionary of a different\n      language.  The two may not use the same hashing algorithm.  */\n-  gdb_assert (SYMBOL_LANGUAGE (sym) == DICT_LANGUAGE (dict)->la_language);\n+  gdb_assert (sym->language () == DICT_LANGUAGE (dict)->la_language);\n \n-  hash = search_name_hash (SYMBOL_LANGUAGE (sym), sym->search_name ());\n+  hash = search_name_hash (sym->language (), sym->search_name ());\n   hash_index = hash % DICT_HASHED_NBUCKETS (dict);\n   sym->hash_next = buckets[hash_index];\n   buckets[hash_index] = sym;\n@@ -928,7 +928,7 @@ collate_pending_symbols_by_language (const struct pending *symbol_list)\n     {\n       for (int i = list_counter->nsyms - 1; i >= 0; --i)\n \t{\n-\t  enum language language = SYMBOL_LANGUAGE (list_counter->symbol[i]);\n+\t  enum language language = list_counter->symbol[i]->language ();\n \t  nsyms[language].push_back (list_counter->symbol[i]);\n \t}\n     }\n@@ -1116,13 +1116,13 @@ void\n mdict_add_symbol (struct multidictionary *mdict, struct symbol *sym)\n {\n   struct dictionary *dict\n-    = find_language_dictionary (mdict, SYMBOL_LANGUAGE (sym));\n+    = find_language_dictionary (mdict, sym->language ());\n \n   if (dict == nullptr)\n     {\n       /* SYM is of a new language that we haven't previously seen.\n \t Create a new dictionary for it.  */\n-      dict = create_new_language_dictionary (mdict, SYMBOL_LANGUAGE (sym));\n+      dict = create_new_language_dictionary (mdict, sym->language ());\n     }\n \n   dict_add_symbol (dict, sym);"
    },
    {
      "sha": "66c2368b9c14d244b600b18b578e3e40da0a247c",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -543,7 +543,7 @@ write_psymbols (struct mapped_symtab *symtab,\n     {\n       struct partial_symbol *psym = *psymp;\n \n-      if (psym->ginfo.language == language_ada)\n+      if (psym->ginfo.language () == language_ada)\n \terror (_(\"Ada is not currently supported by the index; \"\n \t\t \"use the DWARF 5 index instead\"));\n \n@@ -690,7 +690,7 @@ class debug_names\n       return;\n     const char *name = psym->ginfo.search_name ();\n \n-    if (psym->ginfo.language == language_ada)\n+    if (psym->ginfo.language () == language_ada)\n       {\n \t/* We want to ensure that the Ada main function's name appears\n \t   verbatim in the index.  However, this name will be of the"
    },
    {
      "sha": "6a09d5568b3bf6963b0afa7de63819d672c63660",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -9916,7 +9916,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n \t{\n \t  struct symbol *sym = list->symbol[i];\n \n-\t  if (SYMBOL_LANGUAGE (sym) == language_go\n+\t  if (sym->language () == language_go\n \t      && SYMBOL_CLASS (sym) == LOC_BLOCK)\n \t    {\n \t      char *this_package_name = go_symbol_package_name (sym);"
    },
    {
      "sha": "18dd3cd04f5254247d22f9e8e1ba0fd715565b53",
      "filename": "gdb/findvar.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/findvar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/findvar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/findvar.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -807,7 +807,7 @@ struct value *\n read_var_value (struct symbol *var, const struct block *var_block,\n \t\tstruct frame_info *frame)\n {\n-  const struct language_defn *lang = language_def (SYMBOL_LANGUAGE (var));\n+  const struct language_defn *lang = language_def (var->language ());\n \n   gdb_assert (lang != NULL);\n   gdb_assert (lang->la_read_var_value != NULL);"
    },
    {
      "sha": "56c2165037b654c8e641d06d2afc0f68d85185e2",
      "filename": "gdb/ft32-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ft32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/ft32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ft32-tdep.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -299,7 +299,7 @@ ft32_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t  /* Found a function.  */\n \t  sym = lookup_symbol (func_name, NULL, VAR_DOMAIN, NULL).symbol;\n \t  /* Don't use line number debug info for assembly source files.  */\n-\t  if ((sym != NULL) && SYMBOL_LANGUAGE (sym) != language_asm)\n+\t  if ((sym != NULL) && sym->language () != language_asm)\n \t    {\n \t      sal = find_pc_line (func_addr, 0);\n \t      if (sal.end && sal.end < func_end)"
    },
    {
      "sha": "b527d9f72eec31dbe002773f0a5af0f92a2163df",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -420,7 +420,7 @@ go_symbol_package_name (const struct symbol *sym)\n   char *name_buf;\n   char *result;\n \n-  gdb_assert (SYMBOL_LANGUAGE (sym) == language_go);\n+  gdb_assert (sym->language () == language_go);\n   name_buf = unpack_mangled_go_symbol (mangled_name,\n \t\t\t\t       &package_name, &object_name,\n \t\t\t\t       &method_type_package_name,"
    },
    {
      "sha": "14d6fac30371313efc70c5c7316c751ff838b52a",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -715,7 +715,7 @@ class scoped_switch_to_sym_language_if_auto\n       {\n \tm_lang = current_language->la_language;\n \tm_switched = true;\n-\tset_language (SYMBOL_LANGUAGE (sym));\n+\tset_language (sym->language ());\n       }\n     else\n       {"
    },
    {
      "sha": "9c17331a9343514edc02a621ed0cb43393fc4d97",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -3683,7 +3683,7 @@ find_method (struct linespec_state *self, std::vector<symtab *> *file_symtabs,\n       gdb_assert (!pspace->executing_startup);\n       set_current_program_space (pspace);\n       t = check_typedef (SYMBOL_TYPE (sym));\n-      find_methods (t, SYMBOL_LANGUAGE (sym),\n+      find_methods (t, sym->language (),\n \t\t    method_name, &result_names, &superclass_vec);\n \n       /* Handle all items from a single program space at once; and be\n@@ -3696,7 +3696,7 @@ find_method (struct linespec_state *self, std::vector<symtab *> *file_symtabs,\n \t     this program space, consider superclasses.  */\n \t  if (result_names.size () == last_result_len)\n \t    find_superclass_methods (std::move (superclass_vec), method_name,\n-\t\t\t\t     SYMBOL_LANGUAGE (sym), &result_names);\n+\t\t\t\t     sym->language (), &result_names);\n \n \t  /* We have a list of candidate symbol names, so now we\n \t     iterate over the symbol tables looking for all\n@@ -3998,7 +3998,7 @@ find_label_symbols_in_block (const struct block *block,\n \n       ALL_BLOCK_SYMBOLS (block, iter, sym)\n \t{\n-\t  if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n+\t  if (symbol_matches_domain (sym->language (),\n \t\t\t\t     SYMBOL_DOMAIN (sym), LABEL_DOMAIN)\n \t      && cmp (sym->search_name (), name, name_len) == 0)\n \t    {"
    },
    {
      "sha": "ceffc012c11f7fca6aa19567e7436277d2da2d65",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -794,11 +794,11 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \n       /* All functions in C++ have prototypes.  For C we don't have enough\n          information in the debug info.  */\n-      if (SYMBOL_LANGUAGE (s) == language_cplus)\n+      if (s->language () == language_cplus)\n \tTYPE_PROTOTYPED (SYMBOL_TYPE (s)) = 1;\n \n       /* Create and enter a new lexical context.  */\n-      b = new_block (FUNCTION_BLOCK, SYMBOL_LANGUAGE (s));\n+      b = new_block (FUNCTION_BLOCK, s->language ());\n       SYMBOL_BLOCK_VALUE (s) = b;\n       BLOCK_FUNCTION (b) = s;\n       BLOCK_START (b) = BLOCK_END (b) = sh->value;"
    },
    {
      "sha": "6cd255d072003e811bfc74848c65283bcabbada8",
      "filename": "gdb/mi/mi-cmd-stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/mi/mi-cmd-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/mi/mi-cmd-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-stack.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -543,7 +543,7 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n \t      get_no_prettyformat_print_options (&opts);\n \t      opts.deref_ref = 1;\n \t      common_val_print (arg->val, &stb, 0, &opts,\n-\t\t\t\tlanguage_def (SYMBOL_LANGUAGE (arg->sym)));\n+\t\t\t\tlanguage_def (arg->sym->language ()));\n \t    }\n \t  catch (const gdb_exception_error &except)\n \t    {"
    },
    {
      "sha": "6afa3936337a767e9c83e748e337906a42dd7a5e",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -162,7 +162,7 @@ add_minsym_to_demangled_hash_table (struct minimal_symbol *sym,\n {\n   if (sym->demangled_hash_next == NULL)\n     {\n-      objfile->per_bfd->demangled_hash_languages.set (MSYMBOL_LANGUAGE (sym));\n+      objfile->per_bfd->demangled_hash_languages.set (sym->language ());\n \n       struct minimal_symbol **table\n \t= objfile->per_bfd->msymbol_demangled_hash;\n@@ -1420,8 +1420,7 @@ minimal_symbol_reader::install ()\n \t\t  build_minimal_symbol_hash_tables.  */\n \t       if (msym->search_name () != msym->linkage_name ())\n \t\t hash_values[idx].minsym_demangled_hash\n-\t\t   = search_name_hash (MSYMBOL_LANGUAGE (msym),\n-\t\t\t\t       msym->search_name ());\n+\t\t   = search_name_hash (msym->language (), msym->search_name ());\n \t     }\n \t   {\n \t     /* To limit how long we hold the lock, we only acquire it here"
    },
    {
      "sha": "0c38438697131208c11690d409a23a599d48fb63",
      "filename": "gdb/moxie-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/moxie-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/moxie-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/moxie-tdep.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -232,7 +232,7 @@ moxie_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t  sym = lookup_symbol (func_name, NULL, VAR_DOMAIN, NULL).symbol;\n \t  /* Don't use line number debug info for assembly source\n \t     files.  */\n-\t  if (sym && SYMBOL_LANGUAGE (sym) != language_asm)\n+\t  if (sym && sym->language () != language_asm)\n \t    {\n \t      sal = find_pc_line (func_addr, 0);\n \t      if (sal.end && sal.end < func_end)"
    },
    {
      "sha": "399f776a71cb1b1be5bd0dd520bd365f30d81053",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -1098,7 +1098,7 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n       struct symbol *func = block_linkage_function (block);\n \n       if (func != NULL)\n-        lang = language_def (SYMBOL_LANGUAGE (func));\n+        lang = language_def (func->language ());\n       if (lang == NULL || lang->la_language == language_unknown)\n         lang = current_language;\n     }"
    },
    {
      "sha": "28b452b07ff016b9268bd45e8c4e65094af88baf",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -531,7 +531,7 @@ static bool\n psymbol_name_matches (partial_symbol *psym,\n \t\t      const lookup_name_info &lookup_name)\n {\n-  const language_defn *lang = language_def (psym->ginfo.language);\n+  const language_defn *lang = language_def (psym->ginfo.language ());\n   symbol_name_matcher_ftype *name_match\n     = get_symbol_name_matcher (lang, lookup_name);\n   return name_match (psym->ginfo.search_name (), lookup_name, NULL);\n@@ -581,7 +581,7 @@ match_partial_symbol (struct objfile *objfile,\n \t  center = bottom + (top - bottom) / 2;\n \t  gdb_assert (center < top);\n \n-\t  enum language lang = (*center)->ginfo.language;\n+\t  enum language lang = (*center)->ginfo.language ();\n \t  const char *lang_ln\n \t    = name.language_lookup_name (lang).c_str ();\n \n@@ -596,7 +596,7 @@ match_partial_symbol (struct objfile *objfile,\n       while (top <= real_top\n \t     && psymbol_name_matches (*top, name))\n \t{\n-\t  if (symbol_matches_domain ((*top)->ginfo.language,\n+\t  if (symbol_matches_domain ((*top)->ginfo.language (),\n \t\t\t\t     (*top)->domain, domain))\n \t    return *top;\n \t  top++;\n@@ -610,7 +610,7 @@ match_partial_symbol (struct objfile *objfile,\n     {\n       for (psym = start; psym < start + length; psym++)\n \t{\n-\t  if (symbol_matches_domain ((*psym)->ginfo.language,\n+\t  if (symbol_matches_domain ((*psym)->ginfo.language (),\n \t\t\t\t     (*psym)->domain, domain)\n \t      && psymbol_name_matches (*psym, name))\n \t    return *psym;\n@@ -719,7 +719,7 @@ lookup_partial_symbol (struct objfile *objfile,\n       while (top <= real_top && symbol_matches_search_name (&(*top)->ginfo,\n \t\t\t\t\t\t\t    lookup_name))\n \t{\n-\t  if (symbol_matches_domain ((*top)->ginfo.language,\n+\t  if (symbol_matches_domain ((*top)->ginfo.language (),\n \t\t\t\t     (*top)->domain, domain))\n \t    return *top;\n \t  top++;\n@@ -733,7 +733,7 @@ lookup_partial_symbol (struct objfile *objfile,\n     {\n       for (psym = start; psym < start + length; psym++)\n \t{\n-\t  if (symbol_matches_domain ((*psym)->ginfo.language,\n+\t  if (symbol_matches_domain ((*psym)->ginfo.language (),\n \t\t\t\t     (*psym)->domain, domain)\n \t      && symbol_matches_search_name (&(*psym)->ginfo, lookup_name))\n \t    return *psym;\n@@ -1526,7 +1526,7 @@ psymbol_hash (const void *addr, int length)\n {\n   unsigned long h = 0;\n   struct partial_symbol *psymbol = (struct partial_symbol *) addr;\n-  unsigned int lang = psymbol->ginfo.language;\n+  unsigned int lang = psymbol->ginfo.language ();\n   unsigned int domain = psymbol->domain;\n   unsigned int theclass = psymbol->aclass;\n \n@@ -1553,7 +1553,7 @@ psymbol_compare (const void *addr1, const void *addr2, int length)\n \n   return (memcmp (&sym1->ginfo.value, &sym2->ginfo.value,\n                   sizeof (sym1->ginfo.value)) == 0\n-\t  && sym1->ginfo.language == sym2->ginfo.language\n+\t  && sym1->ginfo.language () == sym2->ginfo.language ()\n           && sym1->domain == sym2->domain\n           && sym1->aclass == sym2->aclass\n \t  /* Note that psymbol names are interned via"
    },
    {
      "sha": "fd03d313e9ea6260e474e1b52f292adee3f0544f",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -109,7 +109,7 @@ extract_sym (PyObject *obj, gdb::unique_xmalloc_ptr<char> *name,\n \t from the symbol.  If mode is not \"auto\", then the language\n \t has been explicitly set, use that.  */\n       if (language_mode == language_mode_auto)\n-\t*language = language_def (SYMBOL_LANGUAGE (*sym));\n+\t*language = language_def ((*sym)->language ());\n       else\n \t*language = current_language;\n     }\n@@ -320,7 +320,7 @@ py_print_single_arg (struct ui_out *out,\n     {\n       if (fa->val == NULL && fa->error == NULL)\n \treturn;\n-      language = language_def (SYMBOL_LANGUAGE (fa->sym));\n+      language = language_def (fa->sym->language ());\n       val = fa->val;\n     }\n   else\n@@ -349,14 +349,14 @@ py_print_single_arg (struct ui_out *out,\n       string_file stb;\n \n       fprintf_symbol_filtered (&stb, fa->sym->print_name (),\n-\t\t\t       SYMBOL_LANGUAGE (fa->sym),\n+\t\t\t       fa->sym->language (),\n \t\t\t       DMGL_PARAMS | DMGL_ANSI);\n       if (fa->entry_kind == print_entry_values_compact)\n \t{\n \t  stb.puts (\"=\");\n \n \t  fprintf_symbol_filtered (&stb, fa->sym->print_name (),\n-\t\t\t\t   SYMBOL_LANGUAGE (fa->sym),\n+\t\t\t\t   fa->sym->language (),\n \t\t\t\t   DMGL_PARAMS | DMGL_ANSI);\n \t}\n       if (fa->entry_kind == print_entry_values_only"
    },
    {
      "sha": "1b5426e28426bb6074fd849c45adf48d291b5e91",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -740,7 +740,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n     normal:\n       std::string new_name;\n \n-      if (SYMBOL_LANGUAGE (sym) == language_cplus)\n+      if (sym->language () == language_cplus)\n \t{\n \t  char *name = (char *) alloca (p - string + 1);\n \n@@ -758,7 +758,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \tSYMBOL_SET_NAMES (sym, gdb::string_view (string, p - string), true,\n \t\t\t  objfile);\n \n-      if (SYMBOL_LANGUAGE (sym) == language_cplus)\n+      if (sym->language () == language_cplus)\n \tcp_scan_for_anonymous_namespaces (get_buildsym_compunit (), sym,\n \t\t\t\t\t  objfile);\n \n@@ -1225,7 +1225,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n          This is important to do, because of forward references:\n          The cleanup of undefined types stored in undef_types only uses\n          STRUCT_DOMAIN symbols to perform the replacement.  */\n-      synonym = (SYMBOL_LANGUAGE (sym) == language_ada && p[-2] != 'T');\n+      synonym = (sym->language () == language_ada && p[-2] != 'T');\n \n       /* Typedef */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);"
    },
    {
      "sha": "228205248710d32cac4454f40c2cd5e11f0b5685",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -428,15 +428,15 @@ print_frame_arg (const frame_print_options &fp_opts,\n   annotate_arg_emitter arg_emitter;\n   ui_out_emit_tuple tuple_emitter (uiout, NULL);\n   fprintf_symbol_filtered (&stb, arg->sym->print_name (),\n-\t\t\t   SYMBOL_LANGUAGE (arg->sym), DMGL_PARAMS | DMGL_ANSI);\n+\t\t\t   arg->sym->language (), DMGL_PARAMS | DMGL_ANSI);\n   if (arg->entry_kind == print_entry_values_compact)\n     {\n       /* It is OK to provide invalid MI-like stream as with\n \t PRINT_ENTRY_VALUE_COMPACT we never use MI.  */\n       stb.puts (\"=\");\n \n       fprintf_symbol_filtered (&stb, arg->sym->print_name (),\n-\t\t\t       SYMBOL_LANGUAGE (arg->sym),\n+\t\t\t       arg->sym->language (),\n \t\t\t       DMGL_PARAMS | DMGL_ANSI);\n     }\n   if (arg->entry_kind == print_entry_values_only\n@@ -474,7 +474,7 @@ print_frame_arg (const frame_print_options &fp_opts,\n \t      /* Use the appropriate language to display our symbol, unless the\n \t\t user forced the language to a specific language.  */\n \t      if (language_mode == language_mode_auto)\n-\t\tlanguage = language_def (SYMBOL_LANGUAGE (arg->sym));\n+\t\tlanguage = language_def (arg->sym->language ());\n \t      else\n \t\tlanguage = current_language;\n \n@@ -1261,7 +1261,7 @@ find_frame_funname (struct frame_info *frame, enum language *funlang,\n     {\n       const char *print_name = func->print_name ();\n \n-      *funlang = SYMBOL_LANGUAGE (func);\n+      *funlang = func->language ();\n       if (funcp)\n \t*funcp = func;\n       if (*funlang == language_cplus)\n@@ -1291,7 +1291,7 @@ find_frame_funname (struct frame_info *frame, enum language *funlang,\n       if (msymbol.minsym != NULL)\n \t{\n \t  funname.reset (xstrdup (msymbol.minsym->print_name ()));\n-\t  *funlang = MSYMBOL_LANGUAGE (msymbol.minsym);\n+\t  *funlang = msymbol.minsym->language ();\n \t}\n     }\n \n@@ -1495,7 +1495,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n   if (func)\n     {\n       funname = func->print_name ();\n-      funlang = SYMBOL_LANGUAGE (func);\n+      funlang = func->language ();\n       if (funlang == language_cplus)\n \t{\n \t  /* It seems appropriate to use print_name() here,\n@@ -1517,7 +1517,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n       if (msymbol.minsym != NULL)\n \t{\n \t  funname = msymbol.minsym->print_name ();\n-\t  funlang = MSYMBOL_LANGUAGE (msymbol.minsym);\n+\t  funlang = msymbol.minsym->language ();\n \t}\n     }\n   calling_frame_info = get_prev_frame (fi);"
    },
    {
      "sha": "5ca89b45b350f1cb4ff71a7a6616aa7f21ec9105",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -1697,7 +1697,7 @@ set_initial_language (void)\n       struct symbol *sym = lookup_symbol (name, NULL, VAR_DOMAIN, NULL).symbol;\n \n       if (sym != NULL)\n-\tlang = SYMBOL_LANGUAGE (sym);\n+\tlang = sym->language ();\n     }\n \n   if (lang == language_unknown)"
    },
    {
      "sha": "a082ee21a90898cc3f1b3310940175ccf12fceac",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 29,
      "deletions": 31,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -675,7 +675,7 @@ symbol_set_demangled_name (struct general_symbol_info *gsymbol,\n                            const char *name,\n                            struct obstack *obstack)\n {\n-  if (gsymbol->language == language_ada)\n+  if (gsymbol->language () == language_ada)\n     {\n       if (name == NULL)\n \t{\n@@ -697,7 +697,7 @@ symbol_set_demangled_name (struct general_symbol_info *gsymbol,\n const char *\n symbol_get_demangled_name (const struct general_symbol_info *gsymbol)\n {\n-  if (gsymbol->language == language_ada)\n+  if (gsymbol->language () == language_ada)\n     {\n       if (!gsymbol->ada_mangled)\n \treturn NULL;\n@@ -716,16 +716,16 @@ symbol_set_language (struct general_symbol_info *gsymbol,\n                      enum language language,\n \t\t     struct obstack *obstack)\n {\n-  gsymbol->language = language;\n-  if (gsymbol->language == language_cplus\n-      || gsymbol->language == language_d\n-      || gsymbol->language == language_go\n-      || gsymbol->language == language_objc\n-      || gsymbol->language == language_fortran)\n+  gsymbol->m_language = language;\n+  if (language == language_cplus\n+      || language == language_d\n+      || language == language_go\n+      || language == language_objc\n+      || language == language_fortran)\n     {\n       symbol_set_demangled_name (gsymbol, NULL, obstack);\n     }\n-  else if (gsymbol->language == language_ada)\n+  else if (language == language_ada)\n     {\n       gdb_assert (gsymbol->ada_mangled == 0);\n       gsymbol->language_specific.obstack = obstack;\n@@ -819,12 +819,12 @@ symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n   char *demangled = NULL;\n   int i;\n \n-  if (gsymbol->language == language_unknown)\n-    gsymbol->language = language_auto;\n+  if (gsymbol->language () == language_unknown)\n+    gsymbol->m_language = language_auto;\n \n-  if (gsymbol->language != language_auto)\n+  if (gsymbol->language () != language_auto)\n     {\n-      const struct language_defn *lang = language_def (gsymbol->language);\n+      const struct language_defn *lang = language_def (gsymbol->language ());\n \n       language_sniff_from_mangled_name (lang, mangled, &demangled);\n       return demangled;\n@@ -837,7 +837,7 @@ symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n \n       if (language_sniff_from_mangled_name (lang, mangled, &demangled))\n \t{\n-\t  gsymbol->language = l;\n+\t  gsymbol->m_language = l;\n \t  return demangled;\n \t}\n     }\n@@ -864,7 +864,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n {\n   struct demangled_name_entry **slot;\n \n-  if (gsymbol->language == language_ada)\n+  if (gsymbol->language () == language_ada)\n     {\n       /* In Ada, we do the symbol lookups using the mangled name, so\n          we can save some space by not storing the demangled name.  */\n@@ -898,7 +898,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n   if (*slot == NULL\n       /* A C version of the symbol may have already snuck into the table.\n \t This happens to, e.g., main.init (__go_init_main).  Cope.  */\n-      || (gsymbol->language == language_go && (*slot)->demangled == nullptr))\n+      || (gsymbol->language () == language_go && (*slot)->demangled == nullptr))\n     {\n       /* A 0-terminated copy of the linkage name.  Callers must set COPY_NAME\n          to true if the string might not be nullterminated.  We have to make\n@@ -959,11 +959,11 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t    (gdb::string_view (mangled_ptr, linkage_name.length ()));\n \t}\n       (*slot)->demangled = std::move (demangled_name);\n-      (*slot)->language = gsymbol->language;\n+      (*slot)->language = gsymbol->language ();\n     }\n-  else if (gsymbol->language == language_unknown\n-\t   || gsymbol->language == language_auto)\n-    gsymbol->language = (*slot)->language;\n+  else if (gsymbol->language () == language_unknown\n+\t   || gsymbol->language () == language_auto)\n+    gsymbol->m_language = (*slot)->language;\n \n   gsymbol->name = (*slot)->mangled.data ();\n   if ((*slot)->demangled != nullptr)\n@@ -978,7 +978,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n const char *\n general_symbol_info::natural_name () const\n {\n-  switch (language)\n+  switch (language ())\n     {\n     case language_cplus:\n     case language_d:\n@@ -1003,7 +1003,7 @@ general_symbol_info::demangled_name () const\n {\n   const char *dem_name = NULL;\n \n-  switch (language)\n+  switch (language ())\n     {\n     case language_cplus:\n     case language_d:\n@@ -1026,7 +1026,7 @@ general_symbol_info::demangled_name () const\n const char *\n general_symbol_info::search_name () const\n {\n-  if (language == language_ada)\n+  if (language () == language_ada)\n     return name;\n   else\n     return natural_name ();\n@@ -1039,7 +1039,7 @@ symbol_matches_search_name (const struct general_symbol_info *gsymbol,\n \t\t\t    const lookup_name_info &name)\n {\n   symbol_name_matcher_ftype *name_match\n-    = get_symbol_name_matcher (language_def (gsymbol->language), name);\n+    = get_symbol_name_matcher (language_def (gsymbol->language ()), name);\n   return name_match (gsymbol->search_name (), name, NULL);\n }\n \n@@ -1219,8 +1219,7 @@ eq_symbol_entry (const struct symbol_cache_slot *slot,\n \t  if (!SYMBOL_MATCHES_SEARCH_NAME (sym, lookup_name))\n \t    return 0;\n \n-\t  if (!symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n-\t\t\t\t      slot_domain, domain))\n+\t  if (!symbol_matches_domain (sym->language (), slot_domain, domain))\n \t    return 0;\n \t}\n     }\n@@ -2846,8 +2845,7 @@ iterate_over_symbols (const struct block *block,\n \n   ALL_BLOCK_SYMBOLS_WITH_NAME (block, name, iter, sym)\n     {\n-      if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n-\t\t\t\t SYMBOL_DOMAIN (sym), domain))\n+      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain))\n \t{\n \t  struct block_symbol block_sym = {sym, block};\n \n@@ -5262,7 +5260,7 @@ completion_list_add_symbol (completion_tracker &tracker,\n \t\t\t    const lookup_name_info &lookup_name,\n \t\t\t    const char *text, const char *word)\n {\n-  completion_list_add_name (tracker, SYMBOL_LANGUAGE (sym),\n+  completion_list_add_name (tracker, sym->language (),\n \t\t\t    sym->natural_name (),\n \t\t\t    lookup_name, text, word);\n }\n@@ -5275,7 +5273,7 @@ completion_list_add_msymbol (completion_tracker &tracker,\n \t\t\t     const lookup_name_info &lookup_name,\n \t\t\t     const char *text, const char *word)\n {\n-  completion_list_add_name (tracker, MSYMBOL_LANGUAGE (sym),\n+  completion_list_add_name (tracker, sym->language (),\n \t\t\t    sym->natural_name (),\n \t\t\t    lookup_name, text, word);\n }\n@@ -5409,7 +5407,7 @@ completion_list_add_fields (completion_tracker &tracker,\n       if (c == TYPE_CODE_UNION || c == TYPE_CODE_STRUCT)\n \tfor (j = TYPE_N_BASECLASSES (t); j < TYPE_NFIELDS (t); j++)\n \t  if (TYPE_FIELD_NAME (t, j))\n-\t    completion_list_add_name (tracker, SYMBOL_LANGUAGE (sym),\n+\t    completion_list_add_name (tracker, sym->language (),\n \t\t\t\t      TYPE_FIELD_NAME (t, j),\n \t\t\t\t      lookup_name, text, word);\n     }"
    },
    {
      "sha": "09e2a20a3657155cd2cd41ae62ada492efc1dff0",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -425,6 +425,9 @@ struct general_symbol_info\n   void set_linkage_name (const char *linkage_name)\n   { name = linkage_name; }\n \n+  enum language language () const\n+  { return m_language; }\n+\n   /* Name of the symbol.  This is a required field.  Storage for the\n      name is allocated on the objfile_obstack for the associated\n      objfile.  For languages like C++ that make a distinction between\n@@ -479,7 +482,7 @@ struct general_symbol_info\n      This is used to select one of the fields from the language specific\n      union above.  */\n \n-  ENUM_BITFIELD(language) language : LANGUAGE_BITS;\n+  ENUM_BITFIELD(language) m_language : LANGUAGE_BITS;\n \n   /* This is only used by Ada.  If set, then the 'demangled_name' field\n      of language_specific is valid.  Otherwise, the 'obstack' field is\n@@ -522,7 +525,6 @@ extern CORE_ADDR get_symbol_address (const struct symbol *sym);\n #define SYMBOL_VALUE_COMMON_BLOCK(symbol) (symbol)->value.common_block\n #define SYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n #define SYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n-#define SYMBOL_LANGUAGE(symbol)\t\t(symbol)->language\n #define SYMBOL_SECTION(symbol)\t\t(symbol)->section\n #define SYMBOL_OBJ_SECTION(objfile, symbol)\t\t\t\\\n   (((symbol)->section >= 0)\t\t\t\t\\\n@@ -741,7 +743,6 @@ extern CORE_ADDR get_msymbol_address (struct objfile *objf,\n #define MSYMBOL_VALUE_BYTES(symbol)\t(symbol)->value.bytes\n #define MSYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n #define MSYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n-#define MSYMBOL_LANGUAGE(symbol)\t(symbol)->language\n #define MSYMBOL_SECTION(symbol)\t\t(symbol)->section\n #define MSYMBOL_OBJ_SECTION(objfile, symbol)\t\t\t\\\n   (((symbol)->section >= 0)\t\t\t\t\\\n@@ -1098,7 +1099,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n       name = nullptr;\n       value.ivalue = 0;\n       language_specific.obstack = nullptr;\n-      language = language_unknown;\n+      m_language = language_unknown;\n       ada_mangled = 0;\n       section = 0;\n       /* GCC 4.8.5 (on CentOS 7) does not correctly compile class-"
    },
    {
      "sha": "52a6f3e2aa786a2032d18f1d5c688fcce551c044",
      "filename": "gdb/xstormy16-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/xstormy16-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f/gdb/xstormy16-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xstormy16-tdep.c?ref=c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "patch": "@@ -430,7 +430,7 @@ xstormy16_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n       /* Found a function.  */\n       sym = lookup_symbol (func_name, NULL, VAR_DOMAIN, NULL).symbol;\n       /* Don't use line number debug info for assembly source files.  */\n-      if (sym && SYMBOL_LANGUAGE (sym) != language_asm)\n+      if (sym && sym->language () != language_asm)\n \t{\n \t  sal = find_pc_line (func_addr, 0);\n \t  if (sal.end && sal.end < func_end)"
    }
  ]
}