{
  "sha": "bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQ2ZDg2MDFmMzA0ZDAzZWNkZWJlMWIxYTdkNDg2NjY4NDVhOTFhYQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-05-04T13:29:04Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-05-04T13:29:04Z"
    },
    "message": "Define bfd_realloc(ptr,0) to return allocated memory, whilst bfd_realloc_or_free(ptr,0) frees ptr.\n\n\t* libbfd.c (bfd_malloc): Provide some documenation.  Treat a size\n\tof 0 as 1.\n\t(bfd_realloc): Likewise.\n\t(bfd_zmalloc): Likewise.\n\t(bfd_realloc_or_free): Provide some documentation.  Treat a size\n\tof 0 as a request to free.\n\t* libbfd-in.h (bfd_realloc): Remove prototype.\n\t(bfd_realloc_or_free): Remove prototype.\n\t(bfd_zmalloc): Remove prototype.\n\t* libbfd.h: Regenerate.",
    "tree": {
      "sha": "5880baf07238e954bd33f97c546dbabb3070dc7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5880baf07238e954bd33f97c546dbabb3070dc7f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a8d6316b67d52eaa1b7b311084ddff71a66f7cc0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8d6316b67d52eaa1b7b311084ddff71a66f7cc0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a8d6316b67d52eaa1b7b311084ddff71a66f7cc0"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 117,
    "deletions": 23
  },
  "files": [
    {
      "sha": "0eb8618f6f99ac272b01acd8ad9037ef7045fcbc",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
      "patch": "@@ -1,3 +1,16 @@\n+2021-05-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* libbfd.c (bfd_malloc): Provide some documenation.  Treat a size\n+\tof 0 as 1.\n+\t(bfd_realloc): Likewise.\n+\t(bfd_zmalloc): Likewise.\n+\t(bfd_realloc_or_free): Provide some documentation.  Treat a size\n+\tof 0 as a request to free.\n+\t* libbfd-in.h (bfd_realloc): Remove prototype.\n+\t(bfd_realloc_or_free): Remove prototype.\n+\t(bfd_zmalloc): Remove prototype.\n+\t* libbfd.h: Regenerate.\n+\n 2021-05-03  Jan Beulich  <jbeulich@suse.com>\n \n \t* elf32-i386.c (elf_howto_table): Switch all 32-bit relocs to"
    },
    {
      "sha": "d0abcc241f898786d15073fcc4ed136149a63549",
      "filename": "bfd/libbfd-in.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/libbfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/libbfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd-in.h?ref=bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
      "patch": "@@ -110,12 +110,6 @@ struct areltdata\n \n extern void *bfd_malloc\n   (bfd_size_type) ATTRIBUTE_HIDDEN;\n-extern void *bfd_realloc\n-  (void *, bfd_size_type) ATTRIBUTE_HIDDEN;\n-extern void *bfd_realloc_or_free\n-  (void *, bfd_size_type) ATTRIBUTE_HIDDEN;\n-extern void *bfd_zmalloc\n-  (bfd_size_type) ATTRIBUTE_HIDDEN;\n \n static inline char *\n bfd_strdup (const char *str)"
    },
    {
      "sha": "892f291dbd97d253f65ea3fc7414944accc94310",
      "filename": "bfd/libbfd.c",
      "status": "modified",
      "additions": 96,
      "deletions": 11,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/libbfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/libbfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.c?ref=bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
      "patch": "@@ -258,6 +258,20 @@ _bfd_dummy_target (bfd *ignore_abfd ATTRIBUTE_UNUSED)\n #define SSIZE_MAX ((size_t) -1 >> 1)\n #endif\n \n+/*\n+INTERNAL_FUNCTION\n+\tbfd_malloc\n+\n+SYNOPSIS\n+\textern void * bfd_malloc (bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n+DESCRIPTION\n+\tReturns a pointer to an allocated block of memory that is at least\n+\tSIZE bytes long.  If SIZE is 0 then it will be treated as if it were\n+\t1.  If SIZE is too big then NULL will be returned.\n+\t\n+\tReturns NULL upon error and sets bfd_error.\n+*/\n void *\n bfd_malloc (bfd_size_type size)\n {\n@@ -272,13 +286,36 @@ bfd_malloc (bfd_size_type size)\n       return NULL;\n     }\n \n-  ptr = malloc (sz);\n-  if (ptr == NULL && sz != 0)\n+  ptr = malloc (sz ? sz : 1);\n+  if (ptr == NULL)\n     bfd_set_error (bfd_error_no_memory);\n \n   return ptr;\n }\n \n+/*\n+INTERNAL_FUNCTION\n+\tbfd_realloc\n+\n+SYNOPSIS\n+\textern void * bfd_realloc (void * MEM, bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n+DESCRIPTION\n+\tReturns a pointer to an allocated block of memory that is at least\n+\tSIZE bytes long.  If SIZE is 0 then it will be treated as if it were\n+\t1.  If SIZE is too big then NULL will be returned.\n+\t\n+\tIf MEM is not NULL then it must point to an allocated block of memory.\n+\tIf this block is large enough then MEM may be used as the return\n+\tvalue for this function, but this is not guaranteed.\n+\n+\tIf MEM is not returned then the first N bytes in the returned block\n+\twill be identical to the first N bytes in region pointed to by MEM,\n+\twhere N is the lessor of SIZE and the length of the region of memory\n+\tcurrently addressed by MEM.\n+\n+\tReturns NULL upon error and sets bfd_error.\n+*/\n void *\n bfd_realloc (void *ptr, bfd_size_type size)\n {\n@@ -296,37 +333,85 @@ bfd_realloc (void *ptr, bfd_size_type size)\n       return NULL;\n     }\n \n-  ret = realloc (ptr, sz);\n+  /* The behaviour of realloc(0) is implementation defined,\n+     but for this function we always allocate memory.  */\n+  ret = realloc (ptr, sz ? sz : 1);\n \n-  if (ret == NULL && sz != 0)\n+  if (ret == NULL)\n     bfd_set_error (bfd_error_no_memory);\n \n   return ret;\n }\n \n-/* Reallocate memory using realloc.\n-   If this fails the pointer is freed before returning.  */\n+/*\n+INTERNAL_FUNCTION\n+\tbfd_realloc_or_free\n+\n+SYNOPSIS\n+\textern void * bfd_realloc_or_free (void * MEM, bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n \n+DESCRIPTION\n+\tReturns a pointer to an allocated block of memory that is at least\n+\tSIZE bytes long.  If SIZE is 0 then no memory will be allocated,\n+\tMEM will be freed, and NULL will be returned.  This will not cause\n+\tbfd_error to be set.\n+\n+\tIf SIZE is too big then NULL will be returned and bfd_error will be\n+\tset. \n+\t\n+\tIf MEM is not NULL then it must point to an allocated block of memory.\n+\tIf this block is large enough then MEM may be used as the return\n+\tvalue for this function, but this is not guaranteed.\n+\n+\tIf MEM is not returned then the first N bytes in the returned block\n+\twill be identical to the first N bytes in region pointed to by MEM,\n+\twhere N is the lessor of SIZE and the length of the region of memory\n+\tcurrently addressed by MEM.\n+*/\n void *\n bfd_realloc_or_free (void *ptr, bfd_size_type size)\n {\n-  void *ret = bfd_realloc (ptr, size);\n+  void *ret;\n \n-  if (ret == NULL && size > 0)\n+  /* The behaviour of realloc(0) is implementation defined, but\n+     for this function we treat it is always freeing the memory.  */\n+  if (size == 0)\n+    {\n+      free (ptr);\n+      return NULL;\n+    }\n+      \n+  ret = bfd_realloc (ptr, size);\n+  if (ret == NULL)\n     free (ptr);\n \n   return ret;\n }\n \n-/* Allocate memory using malloc and clear it.  */\n+/*\n+INTERNAL_FUNCTION\n+\tbfd_zmalloc\n \n+SYNOPSIS\n+\textern void * bfd_zmalloc (bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n+DESCRIPTION\n+\tReturns a pointer to an allocated block of memory that is at least\n+\tSIZE bytes long.  If SIZE is 0 then it will be treated as if it were\n+\t1.  If SIZE is too big then NULL will be returned.\n+\t\n+\tReturns NULL upon error and sets bfd_error.\n+\n+\tIf NULL is not returned then the allocated block of memory will\n+\thave been cleared.\n+*/\n void *\n bfd_zmalloc (bfd_size_type size)\n {\n   void *ptr = bfd_malloc (size);\n \n-  if (ptr != NULL && size > 0)\n-    memset (ptr, 0, (size_t) size);\n+  if (ptr != NULL)\n+    memset (ptr, 0, size ? (size_t) size : 1);\n \n   return ptr;\n }"
    },
    {
      "sha": "f3a32fa428530d8e06abda06ec7f90bab27a80a7",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd6d8601f304d03ecdebe1b1a7d48666845a91aa/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
      "patch": "@@ -115,12 +115,6 @@ struct areltdata\n \n extern void *bfd_malloc\n   (bfd_size_type) ATTRIBUTE_HIDDEN;\n-extern void *bfd_realloc\n-  (void *, bfd_size_type) ATTRIBUTE_HIDDEN;\n-extern void *bfd_realloc_or_free\n-  (void *, bfd_size_type) ATTRIBUTE_HIDDEN;\n-extern void *bfd_zmalloc\n-  (bfd_size_type) ATTRIBUTE_HIDDEN;\n \n static inline char *\n bfd_strdup (const char *str)\n@@ -966,6 +960,14 @@ _bfd_malloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n   return NULL;\n }\n /* Extracted from libbfd.c.  */\n+extern void * bfd_malloc (bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n+extern void * bfd_realloc (void * MEM, bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n+extern void * bfd_realloc_or_free (void * MEM, bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n+extern void * bfd_zmalloc (bfd_size_type SIZE) ATTRIBUTE_HIDDEN;\n+\n bool bfd_write_bigendian_4byte_int (bfd *, unsigned int);\n \n unsigned int bfd_log2 (bfd_vma x);"
    }
  ]
}