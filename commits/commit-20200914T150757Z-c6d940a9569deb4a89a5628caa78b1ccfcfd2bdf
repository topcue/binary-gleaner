{
  "sha": "c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzZkOTQwYTk1NjlkZWI0YTg5YTU2MjhjYWE3OGIxY2NmY2ZkMmJkZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:57Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:57Z"
    },
    "message": "gdb: remove TYPE_UNSIGNED\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_UNSIGNED): Remove, replace all uses with\n\ttype::is_unsigned.\n\nChange-Id: I84f76f5cd44ff7294e421d317376a9e476bc8666",
    "tree": {
      "sha": "c5d25c2c2cd369f74ed393926638302e9da95c02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c5d25c2c2cd369f74ed393926638302e9da95c02"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "653223d3561b5976d12ade101113af9d08348b8c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/653223d3561b5976d12ade101113af9d08348b8c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/653223d3561b5976d12ade101113af9d08348b8c"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 88,
    "deletions": 86
  },
  "files": [
    {
      "sha": "477243393631575820782be69ec14278e2b91e54",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_UNSIGNED): Remove, replace all uses with\n+\ttype::is_unsigned.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <is_unsigned, set_is_unsigned>: New"
    },
    {
      "sha": "61e8e57552cac13e4981612463788a2e26bc89ca",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -1885,7 +1885,7 @@ aarch64_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t  if (len < 4)\n \t    {\n \t      /* Promote to 32 bit integer.  */\n-\t      if (TYPE_UNSIGNED (arg_type))\n+\t      if (arg_type->is_unsigned ())\n \t\targ_type = builtin_type (gdbarch)->builtin_uint32;\n \t      else\n \t\targ_type = builtin_type (gdbarch)->builtin_int32;"
    },
    {
      "sha": "c014d1c4b98b32204d5e9a8eded7a52a44dc2ea1",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -701,7 +701,7 @@ umax_of_size (int size)\n static LONGEST\n max_of_type (struct type *t)\n {\n-  if (TYPE_UNSIGNED (t))\n+  if (t->is_unsigned ())\n     return (LONGEST) umax_of_size (TYPE_LENGTH (t));\n   else\n     return max_of_size (TYPE_LENGTH (t));\n@@ -711,7 +711,7 @@ max_of_type (struct type *t)\n static LONGEST\n min_of_type (struct type *t)\n {\n-  if (TYPE_UNSIGNED (t)) \n+  if (t->is_unsigned ())\n     return 0;\n   else\n     return min_of_size (TYPE_LENGTH (t));\n@@ -2276,7 +2276,7 @@ has_negatives (struct type *type)\n     default:\n       return 0;\n     case TYPE_CODE_INT:\n-      return !TYPE_UNSIGNED (type);\n+      return !type->is_unsigned ();\n     case TYPE_CODE_RANGE:\n       return type->bounds ()->low.const_val () - type->bounds ()->bias < 0;\n     }\n@@ -9354,7 +9354,7 @@ ada_value_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n   if (v2 == 0)\n     error (_(\"second operand of %s must not be zero.\"), op_string (op));\n \n-  if (TYPE_UNSIGNED (type1) || op == BINOP_MOD)\n+  if (type1->is_unsigned () || op == BINOP_MOD)\n     return value_binop (arg1, arg2, op);\n \n   v1 = value_as_long (arg1);\n@@ -11444,7 +11444,7 @@ ada_is_modular_type (struct type *type)\n \n   return (subranged_type != NULL && type->code () == TYPE_CODE_RANGE\n           && subranged_type->code () == TYPE_CODE_INT\n-          && TYPE_UNSIGNED (subranged_type));\n+          && subranged_type->is_unsigned ());\n }\n \n /* Assuming ada_is_modular_type (TYPE), the modulus of TYPE.  */"
    },
    {
      "sha": "3616711ef09e64d0530c0617e882ddb4cb6e2821",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -398,7 +398,7 @@ ada_print_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n       break;\n \n     case TYPE_CODE_INT:\n-      print_longest (stream, TYPE_UNSIGNED (type) ? 'u' : 'd', 0, val);\n+      print_longest (stream, type->is_unsigned () ? 'u' : 'd', 0, val);\n       break;\n \n     case TYPE_CODE_CHAR:\n@@ -1129,7 +1129,7 @@ ada_value_print (struct value *val0, struct ui_file *stream,\n          type is indicated by the quoted string anyway.  */\n       if (TYPE_LENGTH (TYPE_TARGET_TYPE (type)) != sizeof (char)\n \t  || TYPE_TARGET_TYPE (type)->code () != TYPE_CODE_INT\n-\t  || TYPE_UNSIGNED (TYPE_TARGET_TYPE (type)))\n+\t  || TYPE_TARGET_TYPE (type)->is_unsigned ())\n \t{\n \t  fprintf_filtered (stream, \"(\");\n \t  type_print (type, \"\", stream, -1);"
    },
    {
      "sha": "78272f7a8b8bfd51fc367c1516e5992a8823093f",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -444,7 +444,7 @@ static void\n gen_sign_extend (struct agent_expr *ax, struct type *type)\n {\n   /* Do we need to sign-extend this?  */\n-  if (!TYPE_UNSIGNED (type))\n+  if (!type->is_unsigned ())\n     ax_ext (ax, TYPE_LENGTH (type) * TARGET_CHAR_BIT);\n }\n \n@@ -458,7 +458,7 @@ gen_extend (struct agent_expr *ax, struct type *type)\n   int bits = TYPE_LENGTH (type) * TARGET_CHAR_BIT;\n \n   /* I just had to.  */\n-  ((TYPE_UNSIGNED (type) ? ax_zero_ext : ax_ext) (ax, bits));\n+  ((type->is_unsigned () ? ax_zero_ext : ax_ext) (ax, bits));\n }\n \n \n@@ -871,8 +871,8 @@ type_wider_than (struct type *type1, struct type *type2)\n {\n   return (TYPE_LENGTH (type1) > TYPE_LENGTH (type2)\n \t  || (TYPE_LENGTH (type1) == TYPE_LENGTH (type2)\n-\t      && TYPE_UNSIGNED (type1)\n-\t      && !TYPE_UNSIGNED (type2)));\n+\t      && type1->is_unsigned ()\n+\t      && !type2->is_unsigned ()));\n }\n \n \n@@ -899,15 +899,15 @@ gen_conversion (struct agent_expr *ax, struct type *from, struct type *to)\n      then we need to extend.  */\n   else if (TYPE_LENGTH (to) == TYPE_LENGTH (from))\n     {\n-      if (TYPE_UNSIGNED (from) != TYPE_UNSIGNED (to))\n+      if (from->is_unsigned () != to->is_unsigned ())\n \tgen_extend (ax, to);\n     }\n \n   /* If we're converting to a wider type, and becoming unsigned, then\n      we need to zero out any possible sign bits.  */\n   else if (TYPE_LENGTH (to) > TYPE_LENGTH (from))\n     {\n-      if (TYPE_UNSIGNED (to))\n+      if (to->is_unsigned ())\n \tgen_extend (ax, to);\n     }\n }\n@@ -1162,8 +1162,7 @@ gen_binop (struct agent_expr *ax, struct axs_value *value,\n       || (value2->type->code () != TYPE_CODE_INT))\n     error (_(\"Invalid combination of types in %s.\"), name);\n \n-  ax_simple (ax,\n-\t     TYPE_UNSIGNED (value1->type) ? op_unsigned : op);\n+  ax_simple (ax, value1->type->is_unsigned () ? op_unsigned : op);\n   if (may_carry)\n     gen_extend (ax, value1->type);\t/* catch overflow */\n   value->type = value1->type;\n@@ -1399,7 +1398,7 @@ gen_bitfield_ref (struct agent_expr *ax, struct axs_value *value,\n     ax_simple (ax, aop_bit_or);\n \n   /* Sign- or zero-extend the value as appropriate.  */\n-  ((TYPE_UNSIGNED (type) ? ax_zero_ext : ax_ext) (ax, end - start));\n+  ((type->is_unsigned () ? ax_zero_ext : ax_ext) (ax, end - start));\n \n   /* This is *not* an lvalue.  Ugh.  */\n   value->kind = axs_rvalue;"
    },
    {
      "sha": "636ac84b8e75db0ac2ce8720b3def2a4089ab135",
      "filename": "gdb/compile/compile-c-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/compile/compile-c-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/compile/compile-c-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-support.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -256,7 +256,7 @@ generate_register_struct (struct ui_file *stream, struct gdbarch *gdbarch,\n \n \t\t  if (mode != NULL)\n \t\t    {\n-\t\t      if (TYPE_UNSIGNED (regtype))\n+\t\t      if (regtype->is_unsigned ())\n \t\t\tfputs_unfiltered (\"unsigned \", stream);\n \t\t      fprintf_unfiltered (stream,\n \t\t\t\t\t  \"int %s\""
    },
    {
      "sha": "a34550a78585ee8e8ae24136695d8a39ace8d362",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -130,7 +130,7 @@ convert_enum (compile_c_instance *context, struct type *type)\n   gcc_type int_type, result;\n   int i;\n \n-  int_type = context->plugin ().int_type_v0 (TYPE_UNSIGNED (type),\n+  int_type = context->plugin ().int_type_v0 (type->is_unsigned (),\n \t\t\t\t\t     TYPE_LENGTH (type));\n \n   result = context->plugin ().build_enum_type (int_type);\n@@ -199,12 +199,12 @@ convert_int (compile_c_instance *context, struct type *type)\n \t  gdb_assert (TYPE_LENGTH (type) == 1);\n \t  return context->plugin ().char_type ();\n \t}\n-      return context->plugin ().int_type (TYPE_UNSIGNED (type),\n+      return context->plugin ().int_type (type->is_unsigned (),\n \t\t\t\t\t  TYPE_LENGTH (type),\n \t\t\t\t\t  type->name ());\n     }\n   else\n-    return context->plugin ().int_type_v0 (TYPE_UNSIGNED (type),\n+    return context->plugin ().int_type_v0 (type->is_unsigned (),\n \t\t\t\t\t   TYPE_LENGTH (type));\n }\n "
    },
    {
      "sha": "647cfc5d64a744240b001c6ccd7cd1dc2e425f3c",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -929,7 +929,7 @@ compile_cplus_convert_enum (compile_cplus_instance *instance, struct type *type,\n   instance->enter_scope (std::move (scope));\n \n   gcc_type int_type\n-    = instance->plugin ().get_int_type (TYPE_UNSIGNED (type),\n+    = instance->plugin ().get_int_type (type->is_unsigned (),\n \t\t\t\t\tTYPE_LENGTH (type), nullptr);\n   gcc_type result\n     = instance->plugin ().start_enum_type (name.get (), int_type,\n@@ -1022,7 +1022,7 @@ compile_cplus_convert_int (compile_cplus_instance *instance, struct type *type)\n     }\n \n   return instance->plugin ().get_int_type\n-    (TYPE_UNSIGNED (type), TYPE_LENGTH (type), type->name ());\n+    (type->is_unsigned (), TYPE_LENGTH (type), type->name ());\n }\n \n /* Convert a floating-point type to its gcc representation.  */"
    },
    {
      "sha": "ab511d5852280c423d50f86b0d6cefd0376bd58b",
      "filename": "gdb/dwarf2/expr.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/dwarf2/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/dwarf2/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -366,7 +366,7 @@ base_types_equal_p (struct type *t1, struct type *t2)\n {\n   if (t1->code () != t2->code ())\n     return 0;\n-  if (TYPE_UNSIGNED (t1) != TYPE_UNSIGNED (t2))\n+  if (t1->is_unsigned () != t2->is_unsigned ())\n     return 0;\n   return TYPE_LENGTH (t1) == TYPE_LENGTH (t2);\n }\n@@ -1087,7 +1087,7 @@ dwarf_expr_context::execute_stack_op (const gdb_byte *op_ptr,\n \t      case DW_OP_shr:\n \t\tdwarf_require_integral (value_type (first));\n \t\tdwarf_require_integral (value_type (second));\n-\t\tif (!TYPE_UNSIGNED (value_type (first)))\n+\t\tif (!value_type (first)->is_unsigned ())\n \t\t  {\n \t\t    struct type *utype\n \t\t      = get_unsigned_type (this->gdbarch, value_type (first));\n@@ -1104,7 +1104,7 @@ dwarf_expr_context::execute_stack_op (const gdb_byte *op_ptr,\n \t      case DW_OP_shra:\n \t\tdwarf_require_integral (value_type (first));\n \t\tdwarf_require_integral (value_type (second));\n-\t\tif (TYPE_UNSIGNED (value_type (first)))\n+\t\tif (value_type (first)->is_unsigned ())\n \t\t  {\n \t\t    struct type *stype\n \t\t      = get_signed_type (this->gdbarch, value_type (first));"
    },
    {
      "sha": "c18ac7087ae29d06ac8b37b1d0d1a4432fe1fc07",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -2603,7 +2603,7 @@ dwarf2_evaluate_property (const struct dynamic_prop *prop,\n \n \t\tstruct type *type = check_typedef (baton->property_type);\n \t\tif (TYPE_LENGTH (type) < sizeof (CORE_ADDR)\n-\t\t    && !TYPE_UNSIGNED (type))\n+\t\t    && !type->is_unsigned ())\n \t\t  {\n \t\t    /* If we have a valid return candidate and it's value\n \t\t       is signed, we have to sign-extend the value because"
    },
    {
      "sha": "b461bd1ab6312fbb7eb1dac684e474e67b07177c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -9499,7 +9499,7 @@ alloc_rust_variant (struct obstack *obstack, struct type *type,\n   part->is_unsigned\n     = (discriminant_index == -1\n        ? false\n-       : TYPE_UNSIGNED (type->field (discriminant_index).type ()));\n+       : type->field (discriminant_index).type ()->is_unsigned ());\n   part->variants = gdb::array_view<variant> (variants, n_variants);\n \n   void *storage = obstack_alloc (obstack, sizeof (gdb::array_view<variant_part>));\n@@ -15358,7 +15358,7 @@ create_one_variant_part (variant_part &result,\n     {\n       result.discriminant_index = iter->second;\n       result.is_unsigned\n-\t= TYPE_UNSIGNED (fi->fields[result.discriminant_index].field.type ());\n+\t= fi->fields[result.discriminant_index].field.type ()->is_unsigned ();\n     }\n \n   size_t n = builder.variants.size ();\n@@ -18355,10 +18355,10 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n   negative_mask =\n     -((ULONGEST) 1 << (TYPE_LENGTH (base_type) * TARGET_CHAR_BIT - 1));\n   if (low.kind () == PROP_CONST\n-      && !TYPE_UNSIGNED (base_type) && (low.const_val () & negative_mask))\n+      && !base_type->is_unsigned () && (low.const_val () & negative_mask))\n     low.set_const_val (low.const_val () | negative_mask);\n   if (high.kind () == PROP_CONST\n-      && !TYPE_UNSIGNED (base_type) && (high.const_val () & negative_mask))\n+      && !base_type->is_unsigned () && (high.const_val () & negative_mask))\n     high.set_const_val (high.const_val () | negative_mask);\n \n   /* Check for bit and byte strides.  */\n@@ -24087,7 +24087,7 @@ dwarf2_cu::addr_type () const\n   if (TYPE_LENGTH (addr_type) == addr_size)\n     return addr_type;\n \n-  addr_type = addr_sized_int_type (TYPE_UNSIGNED (addr_type));\n+  addr_type = addr_sized_int_type (addr_type->is_unsigned ());\n   return addr_type;\n }\n "
    },
    {
      "sha": "3587dfeae07284701c689dfd9607c71f2a452775",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -500,8 +500,8 @@ binop_promote (const struct language_defn *language, struct gdbarch *gdbarch,\n       const struct builtin_type *builtin = builtin_type (gdbarch);\n       unsigned int promoted_len1 = TYPE_LENGTH (type1);\n       unsigned int promoted_len2 = TYPE_LENGTH (type2);\n-      int is_unsigned1 = TYPE_UNSIGNED (type1);\n-      int is_unsigned2 = TYPE_UNSIGNED (type2);\n+      int is_unsigned1 = type1->is_unsigned ();\n+      int is_unsigned2 = type2->is_unsigned ();\n       unsigned int result_len;\n       int unsigned_operation;\n "
    },
    {
      "sha": "0ccb3c68d3eaf51eb682ad8cf263ede9af63e3b5",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -827,7 +827,7 @@ push_kind_type (LONGEST val, struct type *type)\n {\n   int ival;\n \n-  if (TYPE_UNSIGNED (type))\n+  if (type->is_unsigned ())\n     {\n       ULONGEST uval = static_cast <ULONGEST> (val);\n       if (uval > INT_MAX)"
    },
    {
      "sha": "56499376989aedf145f9e19001388d06c19bba7b",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -1088,7 +1088,7 @@ get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)\n     case TYPE_CODE_INT:\n       if (TYPE_LENGTH (type) > sizeof (LONGEST))\t/* Too big */\n \treturn -1;\n-      if (!TYPE_UNSIGNED (type))\n+      if (!type->is_unsigned ())\n \t{\n \t  *lowp = -(1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1));\n \t  *highp = -*lowp - 1;\n@@ -1811,7 +1811,7 @@ get_unsigned_type_max (struct type *type, ULONGEST *max)\n   unsigned int n;\n \n   type = check_typedef (type);\n-  gdb_assert (type->code () == TYPE_CODE_INT && TYPE_UNSIGNED (type));\n+  gdb_assert (type->code () == TYPE_CODE_INT && type->is_unsigned ());\n   gdb_assert (TYPE_LENGTH (type) <= sizeof (ULONGEST));\n \n   /* Written this way to avoid overflow.  */\n@@ -1828,7 +1828,7 @@ get_signed_type_minmax (struct type *type, LONGEST *min, LONGEST *max)\n   unsigned int n;\n \n   type = check_typedef (type);\n-  gdb_assert (type->code () == TYPE_CODE_INT && !TYPE_UNSIGNED (type));\n+  gdb_assert (type->code () == TYPE_CODE_INT && !type->is_unsigned ());\n   gdb_assert (TYPE_LENGTH (type) <= sizeof (LONGEST));\n \n   n = TYPE_LENGTH (type) * TARGET_CHAR_BIT;\n@@ -3989,7 +3989,7 @@ check_types_equal (struct type *type1, struct type *type2,\n \n   if (type1->code () != type2->code ()\n       || TYPE_LENGTH (type1) != TYPE_LENGTH (type2)\n-      || TYPE_UNSIGNED (type1) != TYPE_UNSIGNED (type2)\n+      || type1->is_unsigned () != type2->is_unsigned ()\n       || TYPE_NOSIGN (type1) != TYPE_NOSIGN (type2)\n       || TYPE_ENDIANITY_NOT_DEFAULT (type1) != TYPE_ENDIANITY_NOT_DEFAULT (type2)\n       || TYPE_VARARGS (type1) != TYPE_VARARGS (type2)\n@@ -4272,9 +4272,9 @@ rank_one_type_parm_int (struct type *parm, struct type *arg, struct value *value\n \t      else\t\t/* signed/unsigned char -> plain char */\n \t\treturn INTEGER_CONVERSION_BADNESS;\n \t    }\n-\t  else if (TYPE_UNSIGNED (parm))\n+\t  else if (parm->is_unsigned ())\n \t    {\n-\t      if (TYPE_UNSIGNED (arg))\n+\t      if (arg->is_unsigned ())\n \t\t{\n \t\t  /* unsigned int -> unsigned int, or\n \t\t     unsigned long -> unsigned long */\n@@ -4304,7 +4304,7 @@ rank_one_type_parm_int (struct type *parm, struct type *arg, struct value *value\n \t\t    return INTEGER_CONVERSION_BADNESS;\n \t\t}\n \t    }\n-\t  else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))\n+\t  else if (!TYPE_NOSIGN (arg) && !arg->is_unsigned ())\n \t    {\n \t      if (integer_types_same_name_p (parm->name (),\n \t\t\t\t\t     arg->name ()))\n@@ -4394,14 +4394,14 @@ rank_one_type_parm_char (struct type *parm, struct type *arg, struct value *valu\n \t  else\n \t    return INTEGER_CONVERSION_BADNESS;\n \t}\n-      else if (TYPE_UNSIGNED (parm))\n+      else if (parm->is_unsigned ())\n \t{\n-\t  if (TYPE_UNSIGNED (arg))\n+\t  if (arg->is_unsigned ())\n \t    return EXACT_MATCH_BADNESS;\n \t  else\n \t    return INTEGER_PROMOTION_BADNESS;\n \t}\n-      else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))\n+      else if (!TYPE_NOSIGN (arg) && !arg->is_unsigned ())\n \treturn EXACT_MATCH_BADNESS;\n       else\n \treturn INTEGER_CONVERSION_BADNESS;\n@@ -5064,7 +5064,7 @@ recursive_dump_type (struct type *type, int spaces)\n   puts_filtered (\"\\n\");\n \n   printfi_filtered (spaces, \"flags\");\n-  if (TYPE_UNSIGNED (type))\n+  if (type->is_unsigned ())\n     {\n       puts_filtered (\" TYPE_UNSIGNED\");\n     }"
    },
    {
      "sha": "bd03df45d02d38758a64152ad36360a61268b5a4",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -210,11 +210,6 @@ enum type_instance_flag_value : unsigned\n \n DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n-/* * Unsigned integer type.  If this is not set for a TYPE_CODE_INT,\n-   the type is signed (unless TYPE_NOSIGN (below) is set).  */\n-\n-#define TYPE_UNSIGNED(t)\t((t)->is_unsigned ())\n-\n /* * No sign for this type.  In C++, \"char\", \"signed char\", and\n    \"unsigned char\" are distinct types; so we need an extra flag to\n    indicate the absence of a sign!  */\n@@ -1068,6 +1063,9 @@ struct type\n     return this->bounds ()->bit_stride ();\n   }\n \n+  /* Unsigned integer type.  If this is not set for a TYPE_CODE_INT,\n+     the type is signed (unless TYPE_NOSIGN is set).  */\n+\n   bool is_unsigned () const\n   {\n     return this->main_type->m_flag_unsigned;"
    },
    {
      "sha": "c297c45dacb1dfdc8eb7dd01163c3ab5734aed06",
      "filename": "gdb/guile/scm-math.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/guile/scm-math.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/guile/scm-math.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-math.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -527,7 +527,7 @@ vlscm_convert_typed_number (const char *func_name, int obj_arg_pos, SCM obj,\n   if (is_integral_type (type)\n       || type->code () == TYPE_CODE_PTR)\n     {\n-      if (TYPE_UNSIGNED (type))\n+      if (type->is_unsigned ())\n \t{\n \t  ULONGEST max;\n \n@@ -573,7 +573,7 @@ vlscm_convert_typed_number (const char *func_name, int obj_arg_pos, SCM obj,\n static int\n vlscm_integer_fits_p (SCM obj, struct type *type)\n {\n-  if (TYPE_UNSIGNED (type))\n+  if (type->is_unsigned ())\n     {\n       ULONGEST max;\n "
    },
    {
      "sha": "ae7937c435df1410106948bc9d8bdba145cf602a",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -888,7 +888,7 @@ gdbscm_value_to_integer (SCM self)\n     }\n \n   GDBSCM_HANDLE_GDB_EXCEPTION (exc);\n-  if (TYPE_UNSIGNED (type))\n+  if (type->is_unsigned ())\n     return gdbscm_scm_from_ulongest (l);\n   else\n     return gdbscm_scm_from_longest (l);\n@@ -930,7 +930,7 @@ gdbscm_value_to_real (SCM self)\n \t  d = target_float_to_host_double (value_contents (value), type);\n \t  check = value_from_host_double (type, d);\n \t}\n-      else if (TYPE_UNSIGNED (type))\n+      else if (type->is_unsigned ())\n \t{\n \t  d = (ULONGEST) value_as_long (value);\n \t  check = value_from_ulongest (type, (ULONGEST) d);"
    },
    {
      "sha": "963d12596be63e8d4242204f190ab3315d171107",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -381,7 +381,7 @@ m2_get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)\n     case TYPE_CODE_CHAR:\n       if (TYPE_LENGTH (type) < sizeof (LONGEST))\n \t{\n-\t  if (!TYPE_UNSIGNED (type))\n+\t  if (!type->is_unsigned ())\n \t    {\n \t      *lowp = -(1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1));\n \t      *highp = -*lowp - 1;"
    },
    {
      "sha": "b55bfbaa4c8dd65aa499a9210df1509c63ea2e2d",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -5091,7 +5091,7 @@ mips_n32n64_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t\t\t   || typecode == TYPE_CODE_INT))\n \t\t      || (partial_len < 4\n \t\t\t  && typecode == TYPE_CODE_INT\n-\t\t\t  && !TYPE_UNSIGNED (arg_type)))\n+\t\t\t  && !arg_type->is_unsigned ()))\n \t\t    regval = extract_signed_integer (val, partial_len,\n \t\t\t\t\t\t     byte_order);\n \t\t  else"
    },
    {
      "sha": "9b9ce183293120d949e4d72ef53386424d2b08d4",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -99,7 +99,7 @@ lookup_opencl_vector_type (struct gdbarch *gdbarch, enum type_code code,\n       if (types[i]->code () == TYPE_CODE_ARRAY && TYPE_VECTOR (types[i])\n \t  && get_array_bounds (types[i], &lowb, &highb)\n \t  && TYPE_TARGET_TYPE (types[i])->code () == code\n-\t  && TYPE_UNSIGNED (TYPE_TARGET_TYPE (types[i])) == flag_unsigned\n+\t  && TYPE_TARGET_TYPE (types[i])->is_unsigned () == flag_unsigned\n \t  && TYPE_LENGTH (TYPE_TARGET_TYPE (types[i])) == el_length\n \t  && TYPE_LENGTH (types[i]) == length\n \t  && highb - lowb + 1 == n)\n@@ -338,7 +338,7 @@ create_value (struct gdbarch *gdbarch, struct value *val, enum noside noside,\n       struct type *dst_type =\n \tlookup_opencl_vector_type (gdbarch, elm_type->code (),\n \t\t\t\t   TYPE_LENGTH (elm_type),\n-\t\t\t\t   TYPE_UNSIGNED (elm_type), n);\n+\t\t\t\t   elm_type->is_unsigned (), n);\n \n       if (dst_type == NULL)\n \tdst_type = init_vector_type (elm_type, n);\n@@ -602,7 +602,7 @@ vector_relop (struct expression *exp, struct value *val1, struct value *val2,\n   /* Check whether the vector types are compatible.  */\n   if (eltype1->code () != eltype2->code ()\n       || TYPE_LENGTH (eltype1) != TYPE_LENGTH (eltype2)\n-      || TYPE_UNSIGNED (eltype1) != TYPE_UNSIGNED (eltype2)\n+      || eltype1->is_unsigned () != eltype2->is_unsigned ()\n       || lowb1 != lowb2 || highb1 != highb2)\n     error (_(\"Cannot perform operation on vectors with different types\"));\n \n@@ -912,7 +912,7 @@ Cannot perform conditional operation on incompatible types\"));\n \t  /* Throw an error if the types of arg2 or arg3 are incompatible.  */\n \t  if (eltype2->code () != eltype3->code ()\n \t      || TYPE_LENGTH (eltype2) != TYPE_LENGTH (eltype3)\n-\t      || TYPE_UNSIGNED (eltype2) != TYPE_UNSIGNED (eltype3)\n+\t      || eltype2->is_unsigned () != eltype3->is_unsigned ()\n \t      || lowb2 != lowb3 || highb2 != highb3)\n \t    error (_(\"\\\n Cannot perform operation on vectors with different types\"));"
    },
    {
      "sha": "8fff581f7366f910f53ea55afdacce72a6ea6f82",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -368,7 +368,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n      a negative signed value (e.g. \"print/u (short)-1\" should print 65535\n      (if shorts are 16 bits) instead of 4294967295).  */\n   if (options->format != 'c'\n-      && (options->format != 'd' || TYPE_UNSIGNED (type)))\n+      && (options->format != 'd' || type->is_unsigned ()))\n     {\n       if (len < TYPE_LENGTH (type) && byte_order == BFD_ENDIAN_BIG)\n \tvaladdr += TYPE_LENGTH (type) - len;\n@@ -452,7 +452,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n     case 0:\n       if (type->code () != TYPE_CODE_FLT)\n \t{\n-\t  print_decimal_chars (stream, valaddr, len, !TYPE_UNSIGNED (type),\n+\t  print_decimal_chars (stream, valaddr, len, !type->is_unsigned (),\n \t\t\t       byte_order);\n \t  break;\n \t}\n@@ -478,7 +478,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n \t  val_long.emplace (unpack_long (type, valaddr));\n \n \topts.format = 0;\n-\tif (TYPE_UNSIGNED (type))\n+\tif (type->is_unsigned ())\n \t  type = builtin_type (gdbarch)->builtin_true_unsigned_char;\n  \telse\n \t  type = builtin_type (gdbarch)->builtin_true_char;"
    },
    {
      "sha": "2d9e77aef2bbc100f717020ab4ae2d5a86826ab2",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -1694,7 +1694,7 @@ valpy_int (PyObject *self)\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n \n-  if (TYPE_UNSIGNED (type))\n+  if (type->is_unsigned ())\n     return gdb_py_object_from_ulongest (l).release ();\n   else\n     return gdb_py_object_from_longest (l).release ();\n@@ -1730,7 +1730,7 @@ valpy_long (PyObject *self)\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n \n-  if (TYPE_UNSIGNED (type))\n+  if (type->is_unsigned ())\n     return gdb_py_long_from_ulongest (l);\n   else\n     return gdb_py_long_from_longest (l);"
    },
    {
      "sha": "a0310a0b9d61dcb58897a49276d98f69d8e4d5c5",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -212,7 +212,7 @@ static bool\n rust_u8_type_p (struct type *type)\n {\n   return (type->code () == TYPE_CODE_INT\n-\t  && TYPE_UNSIGNED (type)\n+\t  && type->is_unsigned ()\n \t  && TYPE_LENGTH (type) == 1);\n }\n \n@@ -223,7 +223,7 @@ rust_chartype_p (struct type *type)\n {\n   return (type->code () == TYPE_CODE_CHAR\n \t  && TYPE_LENGTH (type) == 4\n-\t  && TYPE_UNSIGNED (type));\n+\t  && type->is_unsigned ());\n }\n \n /* If VALUE represents a trait object pointer, return the underlying\n@@ -542,7 +542,7 @@ rust_value_print_inner (struct value *val, struct ui_file *stream,\n \n     case TYPE_CODE_INT:\n       /* Recognize the unit type.  */\n-      if (TYPE_UNSIGNED (type) && TYPE_LENGTH (type) == 0\n+      if (type->is_unsigned () && TYPE_LENGTH (type) == 0\n \t  && type->name () != NULL && strcmp (type->name (), \"()\") == 0)\n \t{\n \t  fputs_filtered (\"()\", stream);"
    },
    {
      "sha": "bc6f98e0484c5890b1053838a03b6f783a746edb",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -1818,7 +1818,7 @@ s390_handle_arg (struct s390_arg_state *as, struct value *arg,\n \t  /* Place value in least significant bits of the register or\n \t     memory word and sign- or zero-extend to full word size.\n \t     This also applies to a struct or union.  */\n-\t  val = TYPE_UNSIGNED (type)\n+\t  val = type->is_unsigned ()\n \t    ? extract_unsigned_integer (value_contents (arg),\n \t\t\t\t\tlength, byte_order)\n \t    : extract_signed_integer (value_contents (arg),\n@@ -2046,7 +2046,7 @@ s390_register_return_value (struct gdbarch *gdbarch, struct type *type,\n       if (out != NULL)\n \tregcache->cooked_read_part (S390_R2_REGNUM, word_size - length, length,\n \t\t\t\t    out);\n-      else if (TYPE_UNSIGNED (type))\n+      else if (type->is_unsigned ())\n \tregcache_cooked_write_unsigned\n \t  (regcache, S390_R2_REGNUM,\n \t   extract_unsigned_integer (in, length, byte_order));"
    },
    {
      "sha": "054b67e2f28f4a664617a6774f5bcfd723bd10f2",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -1091,9 +1091,9 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t      && SYMBOL_TYPE (sym)->code () == TYPE_CODE_INT)\n \t    {\n \t      SYMBOL_TYPE (sym) =\n-\t\tTYPE_UNSIGNED (SYMBOL_TYPE (sym))\n-\t\t? objfile_type (objfile)->builtin_unsigned_int\n-\t\t: objfile_type (objfile)->builtin_int;\n+\t\t(SYMBOL_TYPE (sym)->is_unsigned ()\n+\t\t ? objfile_type (objfile)->builtin_unsigned_int\n+\t\t : objfile_type (objfile)->builtin_int);\n \t    }\n \t  break;\n \t}"
    },
    {
      "sha": "f9e73feecd27c79c87b1eeab0ace1a769693cf38",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -629,7 +629,7 @@ print_type_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n       break;\n \n     case TYPE_CODE_INT:\n-      print_longest (stream, TYPE_UNSIGNED (type) ? 'u' : 'd', 0, val);\n+      print_longest (stream, type->is_unsigned () ? 'u' : 'd', 0, val);\n       break;\n \n     case TYPE_CODE_CHAR:"
    },
    {
      "sha": "82f11db3d56a4f8166219a1e5abf7c69049fc1cd",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -883,7 +883,7 @@ value_args_as_target_float (struct value *arg1, struct value *arg2,\n   else if (is_integral_type (type1))\n     {\n       *eff_type_x = type2;\n-      if (TYPE_UNSIGNED (type1))\n+      if (type1->is_unsigned ())\n \ttarget_float_from_ulongest (x, *eff_type_x, value_as_long (arg1));\n       else\n \ttarget_float_from_longest (x, *eff_type_x, value_as_long (arg1));\n@@ -902,7 +902,7 @@ value_args_as_target_float (struct value *arg1, struct value *arg2,\n   else if (is_integral_type (type2))\n     {\n       *eff_type_y = type1;\n-      if (TYPE_UNSIGNED (type2))\n+      if (type2->is_unsigned ())\n \ttarget_float_from_ulongest (y, *eff_type_y, value_as_long (arg2));\n       else\n \ttarget_float_from_longest (y, *eff_type_y, value_as_long (arg2));\n@@ -940,9 +940,9 @@ promotion_type (struct type *type1, struct type *type2)\n \tresult_type = type1;\n       else if (TYPE_LENGTH (type2) > TYPE_LENGTH (type1))\n \tresult_type = type2;\n-      else if (TYPE_UNSIGNED (type1))\n+      else if (type1->is_unsigned ())\n \tresult_type = type1;\n-      else if (TYPE_UNSIGNED (type2))\n+      else if (type2->is_unsigned ())\n \tresult_type = type2;\n       else\n \tresult_type = type1;\n@@ -1162,7 +1162,7 @@ scalar_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n       else\n \tresult_type = promotion_type (type1, type2);\n \n-      if (TYPE_UNSIGNED (result_type))\n+      if (result_type->is_unsigned ())\n \t{\n \t  LONGEST v2_signed = value_as_long (arg2);\n \t  ULONGEST v1, v2, v = 0;\n@@ -1497,7 +1497,7 @@ vector_binop (struct value *val1, struct value *val2, enum exp_opcode op)\n \n   if (eltype1->code () != eltype2->code ()\n       || elsize != TYPE_LENGTH (eltype2)\n-      || TYPE_UNSIGNED (eltype1) != TYPE_UNSIGNED (eltype2)\n+      || eltype1->is_unsigned () != eltype2->is_unsigned ()\n       || low_bound1 != low_bound2 || high_bound1 != high_bound2)\n     error (_(\"Cannot perform operation on vectors with different types\"));\n "
    },
    {
      "sha": "60f6041d053888d118903020cb9c65775e0556d9",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -462,7 +462,7 @@ value_cast (struct type *type, struct value *arg2)\n \t}\n \n       /* The only option left is an integral type.  */\n-      if (TYPE_UNSIGNED (type2))\n+      if (type2->is_unsigned ())\n \treturn value_from_ulongest (to_type, value_as_long (arg2));\n       else\n \treturn value_from_longest (to_type, value_as_long (arg2));\n@@ -1230,7 +1230,7 @@ value_assign (struct value *toval, struct value *fromval)\n       LONGEST valmask = (((ULONGEST) 1) << value_bitsize (toval)) - 1;\n \n       fieldval &= valmask;\n-      if (!TYPE_UNSIGNED (type) \n+      if (!type->is_unsigned () \n \t  && (fieldval & (valmask ^ (valmask >> 1))))\n \tfieldval |= ~valmask;\n "
    },
    {
      "sha": "676bdd6a7f0ba8f5238c8a7f04139a7e92ddb7c1",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -769,7 +769,7 @@ generic_value_print_char (struct value *value, struct ui_file *stream,\n       const gdb_byte *valaddr = value_contents_for_printing (value);\n \n       LONGEST val = unpack_long (type, valaddr);\n-      if (TYPE_UNSIGNED (type))\n+      if (type->is_unsigned ())\n \tfprintf_filtered (stream, \"%u\", (unsigned int) val);\n       else\n \tfprintf_filtered (stream, \"%d\", (int) val);"
    },
    {
      "sha": "f5eb5641d9beae2afb79524de4b25204658c67ee",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "patch": "@@ -2761,7 +2761,7 @@ unpack_long (struct type *type, const gdb_byte *valaddr)\n   enum bfd_endian byte_order = type_byte_order (type);\n   enum type_code code = type->code ();\n   int len = TYPE_LENGTH (type);\n-  int nosign = TYPE_UNSIGNED (type);\n+  int nosign = type->is_unsigned ();\n \n   switch (code)\n     {\n@@ -3145,7 +3145,7 @@ unpack_bits_as_long (struct type *field_type, const gdb_byte *valaddr,\n     {\n       valmask = (((ULONGEST) 1) << bitsize) - 1;\n       val &= valmask;\n-      if (!TYPE_UNSIGNED (field_type))\n+      if (!field_type->is_unsigned ())\n \t{\n \t  if (val & (valmask ^ (valmask >> 1)))\n \t    {"
    }
  ]
}