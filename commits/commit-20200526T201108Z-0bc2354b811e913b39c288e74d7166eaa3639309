{
  "sha": "0bc2354b811e913b39c288e74d7166eaa3639309",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGJjMjM1NGI4MTFlOTEzYjM5YzI4OGU3NGQ3MTY2ZWFhMzYzOTMwOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-26T20:11:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-26T20:11:08Z"
    },
    "message": "Fix bugs in 'val and 'pos with range types\n\nIn Ada, the 'val and 'pos attributes can be used to map from an\nenumeration constant to its position in the enum and vice versa.\nThese operators did not work properly when the type in question was a\nsubrange of an enum type with \"holes\".\n\ngdb/ChangeLog\n2020-05-26  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (value_val_atr): Handle TYPE_CODE_RANGE.\n\t* gdbtypes.c (discrete_position): Handle TYPE_CODE_RANGE.\n\ngdb/testsuite/ChangeLog\n2020-05-26  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/arr_acc_idx_w_gap.exp: Add enum subrange tests.\n\t* gdb.ada/arr_acc_idx_w_gap/enum_with_gap.ads (Enum_Subrange): New\n\ttype.\n\t* gdb.ada/arr_acc_idx_w_gap/enum_with_gap_main.adb (V): New\n\tvariable.",
    "tree": {
      "sha": "e807e4fde40111f355fd7605933120fe13e3d52c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e807e4fde40111f355fd7605933120fe13e3d52c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0bc2354b811e913b39c288e74d7166eaa3639309",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0bc2354b811e913b39c288e74d7166eaa3639309",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0bc2354b811e913b39c288e74d7166eaa3639309",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0bc2354b811e913b39c288e74d7166eaa3639309/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0db49895f30daea6edcc57e4c5003fd02a747c2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0db49895f30daea6edcc57e4c5003fd02a747c2b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0db49895f30daea6edcc57e4c5003fd02a747c2b"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 28,
    "deletions": 2
  },
  "files": [
    {
      "sha": "00d36ab767a18d24eaa5c18e86e8ee872205ee2d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-26  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (value_val_atr): Handle TYPE_CODE_RANGE.\n+\t* gdbtypes.c (discrete_position): Handle TYPE_CODE_RANGE.\n+\n 2020-05-25  Cristiano De Alti  <cristiano_dealti@hotmail.com>\n \n \tPR gdb/13519"
    },
    {
      "sha": "5ffb2d6ac9594244561999c0820269579ec93b44",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -9148,6 +9148,9 @@ value_val_atr (struct type *type, struct value *arg)\n   if (!integer_type_p (value_type (arg)))\n     error (_(\"'VAL requires integral argument\"));\n \n+  if (type->code () == TYPE_CODE_RANGE)\n+    type = TYPE_TARGET_TYPE (type);\n+\n   if (type->code () == TYPE_CODE_ENUM)\n     {\n       long pos = value_as_long (arg);"
    },
    {
      "sha": "2ee69899a935911819e4b49de35e8d21e9f16741",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -1155,6 +1155,9 @@ get_array_bounds (struct type *type, LONGEST *low_bound, LONGEST *high_bound)\n int\n discrete_position (struct type *type, LONGEST val, LONGEST *pos)\n {\n+  if (type->code () == TYPE_CODE_RANGE)\n+    type = TYPE_TARGET_TYPE (type);\n+\n   if (type->code () == TYPE_CODE_ENUM)\n     {\n       int i;"
    },
    {
      "sha": "0cc377f56e0ebc0084b4cdb30a39ba60e1d3c17b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-26  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/arr_acc_idx_w_gap.exp: Add enum subrange tests.\n+\t* gdb.ada/arr_acc_idx_w_gap/enum_with_gap.ads (Enum_Subrange): New\n+\ttype.\n+\t* gdb.ada/arr_acc_idx_w_gap/enum_with_gap_main.adb (V): New\n+\tvariable.\n+\n 2020-05-26  Christian Biesinger  <cbiesinger@google.com>\n \n \t* Makefile.in: Use = instead of == for the test command"
    },
    {
      "sha": "c08070ea53c6e42101b415842bfcdf0088b1cc75",
      "filename": "gdb/testsuite/gdb.ada/arr_acc_idx_w_gap.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap.exp?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -53,3 +53,7 @@ gdb_test \"print indexed_by_enum(lit2..lit4)\" \\\n          \" = \\\\(lit2 => 43, 42, 41\\\\)\"\n gdb_test \"print s(2..4)\" \\\n          \" = \\\"ell\\\"\"\n+\n+gdb_test \"print v\" \" = lit3\"\n+gdb_test \"print enum_subrange'pos(v)\" \" = 3\"\n+gdb_test \"print enum_subrange'val(3)\" \" = lit3\""
    },
    {
      "sha": "719380077e18c208317e1e773101529d3da6b0b3",
      "filename": "gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap.ads",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap.ads?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -34,14 +34,16 @@ package Enum_With_Gap is\n      );\n    for Enum_With_Gaps'size use 16;\n \n+   type Enum_Subrange is new Enum_With_Gaps range Lit1 .. Lit3;\n+\n    type MyWord is range 0 .. 16#FFFF# ;\n    for MyWord'Size use 16;\n \n    type AR is array (Enum_With_Gaps range <>) of MyWord;\n    type AR_Access is access AR;\n-   \n+\n    type String_Access is access String;\n-   \n+\n    procedure Do_Nothing (E : AR_Access);\n    procedure Do_Nothing (E : String_Access);\n "
    },
    {
      "sha": "752b883798028dd436e7d9e62a6d6fd010f8d429",
      "filename": "gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap_main.adb",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap_main.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bc2354b811e913b39c288e74d7166eaa3639309/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap_main.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/arr_acc_idx_w_gap/enum_with_gap_main.adb?ref=0bc2354b811e913b39c288e74d7166eaa3639309",
      "patch": "@@ -19,6 +19,7 @@ procedure Enum_With_Gap_Main is\n    Indexed_By_Enum : AR_Access :=\n      new AR'(LIT1 => 1,  LIT2 => 43, LIT3 => 42, LIT4 => 41);\n    S : String_Access := new String'(\"Hello!\");\n+   V : Enum_Subrange := LIT3;\n begin\n    Do_Nothing (Indexed_By_Enum); --  BREAK\n    Do_Nothing (S);"
    }
  ]
}