{
  "sha": "2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmU5NTNhY2FjMmVmNDVhZmExMGUwYjJjNGM2YzIzZmI1MjcxOGEyNg==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-11-17T21:48:48Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-11-18T19:14:26Z"
    },
    "message": "Fix a bunch of python leaks due to missing calls to tp_free in *_dealloc functions.\n\nvalgrind reports leaks in many python tests, such as:\n==17162== VALGRIND_GDB_ERROR_BEGIN\n==17162== 8,208 (5,472 direct, 2,736 indirect) bytes in 57 blocks are definitely lost in loss record 7,551 of 7,679\n==17162==    at 0x4835753: malloc (vg_replace_malloc.c:307)\n==17162==    by 0x6EAFD1: _PyObject_New (object.c:279)\n==17162==    by 0x4720E6: blpy_iter(_object*) (py-block.c:92)\n==17162==    by 0x698772: PyObject_GetIter (abstract.c:2577)\n==17162==    by 0x2343BE: _PyEval_EvalFrameDefault (ceval.c:3159)\n==17162==    by 0x22E9E2: function_code_fastcall (call.c:283)\n==17162==    by 0x2340A8: _PyObject_Vectorcall (abstract.h:127)\n==17162==    by 0x2340A8: call_function (ceval.c:4987)\n==17162==    by 0x2340A8: _PyEval_EvalFrameDefault (ceval.c:3486)\n==17162==    by 0x22E9E2: function_code_fastcall (call.c:283)\n==17162==    by 0x82172B: _PyObject_Vectorcall (abstract.h:127)\n==17162==    by 0x82172B: method_vectorcall (classobject.c:67)\n==17162==    by 0x6AF474: _PyObject_Vectorcall (abstract.h:127)\n==17162==    by 0x6AF474: _PyObject_CallNoArg (abstract.h:153)\n==17162==    by 0x6AF474: _PyObject_CallFunctionVa (call.c:914)\n==17162==    by 0x6B0673: callmethod (call.c:1010)\n==17162==    by 0x6B0673: _PyObject_CallMethod_SizeT (call.c:1103)\n==17162==    by 0x477DFE: gdb_PyObject_CallMethod<> (python-internal.h:182)\n==17162==    by 0x477DFE: get_py_iter_from_func(_object*, char const*) (py-framefilter.c:272)\n==17162==    by 0x4791B4: py_print_args (py-framefilter.c:706)\n==17162==    by 0x4791B4: py_print_frame(_object*, enum_flags<frame_filter_flag>, ext_lang_frame_args, ui_out*, int, htab*) (py-framefilter.c:960)\n==17162==    by 0x47A130: gdbpy_apply_frame_filter(extension_language_defn const*, frame_info*, enum_flags<frame_filter_flag>, ext_lang_frame_args, ui_out*, int, int) (py-framefilter.c:1236)\n==17162==    by 0x369C39: apply_ext_lang_frame_filter(frame_info*, enum_flags<frame_filter_flag>, ext_lang_frame_args, ui_out*, int, int) (extension.c:563)\n==17162==    by 0x4EC9C9: backtrace_command_1 (stack.c:2031)\n==17162==    by 0x4EC9C9: backtrace_command(char const*, int) (stack.c:2183)\n...\n\nMost of the leaks in python tests are due to the fact that many\nPyObject xxxxx_dealloc functions are missing the line to free self\nor obj such as:\n   Py_TYPE (self)->tp_free (self);\nor\n   Py_TYPE (obj)->tp_free (obj);\n\nWith this patch, the number of python tests leaking decreases from 52 to 12.\n\ngdb/ChangeLog\n\n2019-11-18  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* python/py-block.c (blpy_dealloc): Call tp_free.\n\t(blpy_block_syms_dealloc): Likewise.\n\t* python/py-finishbreakpoint.c (bpfinishpy_dealloc): Likewise.\n\t* python/py-inferior.c (infpy_dealloc): Likewise.\n\t* python/py-lazy-string.c (stpy_dealloc): Likewise.\n\t* python/py-linetable.c (ltpy_iterator_dealloc): Likewise.\n\t* python/py-symbol.c (sympy_dealloc): Likewise.\n\t* python/py-symtab.c (stpy_dealloc): Likewise.\n\t* python/py-type.c (typy_iterator_dealloc): Likewise.",
    "tree": {
      "sha": "e926b119e747eb7fc696f5340ce2a43cd5cb6faf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e926b119e747eb7fc696f5340ce2a43cd5cb6faf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "6edc43ec327c2b74e10b80774fa6ecde3dc58537",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6edc43ec327c2b74e10b80774fa6ecde3dc58537",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6edc43ec327c2b74e10b80774fa6ecde3dc58537"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 21,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0dfc96ade114d1f2e86c17fbfa36143e88d57bcf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -1,3 +1,15 @@\n+2019-11-18  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* python/py-block.c (blpy_dealloc): Call tp_free.\n+\t(blpy_block_syms_dealloc): Likewise.\n+\t* python/py-finishbreakpoint.c (bpfinishpy_dealloc): Likewise.\n+\t* python/py-inferior.c (infpy_dealloc): Likewise.\n+\t* python/py-lazy-string.c (stpy_dealloc): Likewise.\n+\t* python/py-linetable.c (ltpy_iterator_dealloc): Likewise.\n+\t* python/py-symbol.c (sympy_dealloc): Likewise.\n+\t* python/py-symtab.c (stpy_dealloc): Likewise.\n+\t* python/py-type.c (typy_iterator_dealloc): Likewise.\n+\n 2019-11-18  Christian Biesinger  <cbiesinger@google.com>\n \n \t* symtab.h (struct symbol) <owner>: Initialize explicitly in the"
    },
    {
      "sha": "54c3be9b1a42e8958040b47f829d5dc75ae11057",
      "filename": "gdb/python/py-block.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-block.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -276,6 +276,7 @@ blpy_dealloc (PyObject *obj)\n   if (block->next)\n     block->next->prev = block->prev;\n   block->block = NULL;\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n /* Given a block, and a block_object that has previously been\n@@ -370,6 +371,7 @@ blpy_block_syms_dealloc (PyObject *obj)\n   block_syms_iterator_object *iter_obj = (block_syms_iterator_object *) obj;\n \n   Py_XDECREF (iter_obj->source);\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n /* Implementation of gdb.Block.is_valid (self) -> Boolean."
    },
    {
      "sha": "fc20575aea67863cc7e3ff96316aa58f23a31cd8",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -83,6 +83,7 @@ bpfinishpy_dealloc (PyObject *self)\n   Py_XDECREF (self_bpfinish->function_value);\n   Py_XDECREF (self_bpfinish->return_type);\n   Py_XDECREF (self_bpfinish->return_value);\n+  Py_TYPE (self)->tp_free (self);\n }\n \n /* Triggered when gdbpy_should_stop is about to execute the `stop' callback"
    },
    {
      "sha": "d475263df99d729e6c4eb603de99dc692c3de741",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -856,6 +856,7 @@ infpy_dealloc (PyObject *obj)\n     return;\n \n   set_inferior_data (inf, infpy_inf_data_key, NULL);\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n /* Clear the INFERIOR pointer in an Inferior object and clear the"
    },
    {
      "sha": "74f14a94eb9705aa4d76f5e5dd12e8f3fd44d857",
      "filename": "gdb/python/py-lazy-string.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-lazy-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-lazy-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-lazy-string.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -156,6 +156,7 @@ stpy_dealloc (PyObject *self)\n   lazy_string_object *self_string = (lazy_string_object *) self;\n \n   xfree (self_string->encoding);\n+  Py_TYPE (self)->tp_free (self);\n }\n \n /* Low level routine to create a <gdb.LazyString> object."
    },
    {
      "sha": "96a5d3515b665f89f1a14ef7e414d999e52c59d9",
      "filename": "gdb/python/py-linetable.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-linetable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-linetable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-linetable.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -369,6 +369,7 @@ ltpy_iterator_dealloc (PyObject *obj)\n   ltpy_iterator_object *iter_obj = (ltpy_iterator_object *) obj;\n \n   Py_DECREF (iter_obj->source);\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n /* Return a reference to the line table iterator.  */"
    },
    {
      "sha": "b112ce115f1ba25d06d3c3e2f8c602043072d97c",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -357,6 +357,7 @@ sympy_dealloc (PyObject *obj)\n   if (sym_obj->next)\n     sym_obj->next->prev = sym_obj->prev;\n   sym_obj->symbol = NULL;\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n /* Implementation of"
    },
    {
      "sha": "49c6a0ac544d62b9f61b3cac30fb5ccd483b3042",
      "filename": "gdb/python/py-symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symtab.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -253,6 +253,7 @@ stpy_dealloc (PyObject *obj)\n   if (symtab->next)\n     symtab->next->prev = symtab->prev;\n   symtab->symtab = NULL;\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n "
    },
    {
      "sha": "e4350993dd4f9e0a0721504d9ca8a3684c9e5c01",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e953acac2ef45afa10e0b2c4c6c23fb52718a26/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=2e953acac2ef45afa10e0b2c4c6c23fb52718a26",
      "patch": "@@ -1325,6 +1325,7 @@ typy_iterator_dealloc (PyObject *obj)\n   typy_iterator_object *iter_obj = (typy_iterator_object *) obj;\n \n   Py_DECREF (iter_obj->source);\n+  Py_TYPE (obj)->tp_free (obj);\n }\n \n /* Create a new Type referring to TYPE.  */"
    }
  ]
}