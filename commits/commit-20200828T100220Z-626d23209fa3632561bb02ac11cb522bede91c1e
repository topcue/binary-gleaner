{
  "sha": "626d23209fa3632561bb02ac11cb522bede91c1e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjI2ZDIzMjA5ZmEzNjMyNTYxYmIwMmFjMTFjYjUyMmJlZGU5MWMxZQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-08-28T10:02:20Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-08-28T10:02:20Z"
    },
    "message": "[gdb/breakpoint] Handle setting breakpoint on label without address\n\nConsider test-case test.c:\n...\n$ cat test.c\nint main (void) {\n  return 0;\n L1:\n  (void)0;\n}\n...\n\nCompiled with debug info:\n...\n$ gcc test.c -g\n...\n\nWhen attempting to set a breakpoint at L1, which is a label without address:\n...\n <1><f4>: Abbrev Number: 2 (DW_TAG_subprogram)\n    <f5>   DW_AT_name        : main\n <2><115>: Abbrev Number: 3 (DW_TAG_label)\n    <116>   DW_AT_name        : L1\n    <119>   DW_AT_decl_file   : 1\n    <11a>   DW_AT_decl_line   : 5\n <2><11b>: Abbrev Number: 0\n...\nwe run into an internal-error:\n...\n$ gdb -batch a.out -ex \"b main:L1\"\nlinespec.c:3233: internal-error: void \\\n  decode_line_full(const event_location*, int, program_space*, symtab*, \\\n  int, linespec_result*, const char*, const char*): \\\n  Assertion `result.size () == 1 || canonical->pre_expanded' failed.\nA problem internal to GDB has been detected,\nfurther debugging may prove unreliable.\n...\n\nFix this by detecting the error condition in decode_line_full instead, and\nthrowing an error, such that we have instead:\n...\n(gdb) b main:L1\nLocation main:L1 not available\n(gdb)\n...\n\nUnfortunately, to call event_location_to_string, which is used to get the\nlocation name in the error message, we need to pass a non-const struct\nevent_location, because the call may cache the string in the struct (See\nEL_STRING).  So, we change the prototype of decode_line_full accordingly, and\neverywhere this propages to.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2020-08-28  Tom de Vries  <tdevries@suse.de>\n\n\tPR breakpoint/26544\n\t* breakpoint.c (parse_breakpoint_sals): Remove const from struct\n\tevent_location.\n\t(create_breakpoint): Same.\n\t(base_breakpoint_decode_location): Same.\n\t(bkpt_create_sals_from_location): Same.\n\t(bkpt_decode_location): Same.\n\t(bkpt_probe_create_sals_from_location): Same.\n\t(bkpt_probe_decode_location): Same.\n\t(tracepoint_create_sals_from_location): Same.\n\t(tracepoint_decode_location): Same.\n\t(tracepoint_probe_decode_location): Same.\n\t(strace_marker_create_sals_from_location): Same.\n\t(strace_marker_decode_location): Same.\n\t(create_sals_from_location_default): Same.\n\t(decode_location_default): Same.\n\t* breakpoint.h (struct breakpoint_ops): Same.\n\t(create_breakpoint): Same.\n\t* linespec.h (decode_line_full): Same.\n\t* linespec.c (decode_line_full): Same.  Throw error if\n\tresult.size () == 0.\n\ngdb/testsuite/ChangeLog:\n\n2020-08-28  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/label-without-address.c: New test.\n\t* gdb.base/label-without-address.exp: New file.",
    "tree": {
      "sha": "a82be0be29eee3081670b6b44ba715df383268c8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a82be0be29eee3081670b6b44ba715df383268c8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/626d23209fa3632561bb02ac11cb522bede91c1e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/626d23209fa3632561bb02ac11cb522bede91c1e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/626d23209fa3632561bb02ac11cb522bede91c1e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/626d23209fa3632561bb02ac11cb522bede91c1e/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0861f561ebdd283e389c2c2fdb099bffadffecfa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0861f561ebdd283e389c2c2fdb099bffadffecfa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0861f561ebdd283e389c2c2fdb099bffadffecfa"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 117,
    "deletions": 23
  },
  "files": [
    {
      "sha": "034c95ac31c8404d30cba914de46863797f1bb68",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -1,3 +1,27 @@\n+2020-08-28  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR breakpoint/26544\n+\t* breakpoint.c (parse_breakpoint_sals): Remove const from struct\n+\tevent_location.\n+\t(create_breakpoint): Same.\n+\t(base_breakpoint_decode_location): Same.\n+\t(bkpt_create_sals_from_location): Same.\n+\t(bkpt_decode_location): Same.\n+\t(bkpt_probe_create_sals_from_location): Same.\n+\t(bkpt_probe_decode_location): Same.\n+\t(tracepoint_create_sals_from_location): Same.\n+\t(tracepoint_decode_location): Same.\n+\t(tracepoint_probe_decode_location): Same.\n+\t(strace_marker_create_sals_from_location): Same.\n+\t(strace_marker_decode_location): Same.\n+\t(create_sals_from_location_default): Same.\n+\t(decode_location_default): Same.\n+\t* breakpoint.h (struct breakpoint_ops): Same.\n+\t(create_breakpoint): Same.\n+\t* linespec.h (decode_line_full): Same.\n+\t* linespec.c (decode_line_full): Same.  Throw error if\n+\tresult.size () == 0.\n+\n 2020-08-27  Pedro Alves  <pedro@palves.net>\n \n \tPR gdb/26524"
    },
    {
      "sha": "670cba0057850a197f1ce8d363b1d0fe7e6414c0",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -89,7 +89,7 @@ static void map_breakpoint_numbers (const char *,\n static void breakpoint_re_set_default (struct breakpoint *);\n \n static void\n-  create_sals_from_location_default (const struct event_location *location,\n+  create_sals_from_location_default (struct event_location *location,\n \t\t\t\t     struct linespec_result *canonical,\n \t\t\t\t     enum bptype type_wanted);\n \n@@ -104,7 +104,7 @@ static void create_breakpoints_sal_default (struct gdbarch *,\n \t\t\t\t\t    int, int, int, unsigned);\n \n static std::vector<symtab_and_line> decode_location_default\n-  (struct breakpoint *b, const struct event_location *location,\n+  (struct breakpoint *b, struct event_location *location,\n    struct program_space *search_pspace);\n \n static int can_use_hardware_watchpoint\n@@ -8948,7 +8948,7 @@ create_breakpoints_sal (struct gdbarch *gdbarch,\n    the caller's responsibility to free them.  */\n \n static void\n-parse_breakpoint_sals (const struct event_location *location,\n+parse_breakpoint_sals (struct event_location *location,\n \t\t       struct linespec_result *canonical)\n {\n   struct symtab_and_line cursal;\n@@ -9213,7 +9213,7 @@ breakpoint_ops_for_event_location (const struct event_location *location,\n \n int\n create_breakpoint (struct gdbarch *gdbarch,\n-\t\t   const struct event_location *location,\n+\t\t   struct event_location *location,\n \t\t   const char *cond_string,\n \t\t   int thread, const char *extra_string,\n \t\t   int parse_extra,\n@@ -12266,7 +12266,7 @@ base_breakpoint_print_recreate (struct breakpoint *b, struct ui_file *fp)\n \n static void\n base_breakpoint_create_sals_from_location\n-  (const struct event_location *location,\n+  (struct event_location *location,\n    struct linespec_result *canonical,\n    enum bptype type_wanted)\n {\n@@ -12291,7 +12291,7 @@ base_breakpoint_create_breakpoints_sal (struct gdbarch *gdbarch,\n \n static std::vector<symtab_and_line>\n base_breakpoint_decode_location (struct breakpoint *b,\n-\t\t\t\t const struct event_location *location,\n+\t\t\t\t struct event_location *location,\n \t\t\t\t struct program_space *search_pspace)\n {\n   internal_error_pure_virtual_called ();\n@@ -12514,7 +12514,7 @@ bkpt_print_recreate (struct breakpoint *tp, struct ui_file *fp)\n }\n \n static void\n-bkpt_create_sals_from_location (const struct event_location *location,\n+bkpt_create_sals_from_location (struct event_location *location,\n \t\t\t\tstruct linespec_result *canonical,\n \t\t\t\tenum bptype type_wanted)\n {\n@@ -12545,7 +12545,7 @@ bkpt_create_breakpoints_sal (struct gdbarch *gdbarch,\n \n static std::vector<symtab_and_line>\n bkpt_decode_location (struct breakpoint *b,\n-\t\t      const struct event_location *location,\n+\t\t      struct event_location *location,\n \t\t      struct program_space *search_pspace)\n {\n   return decode_location_default (b, location, search_pspace);\n@@ -12718,7 +12718,7 @@ bkpt_probe_remove_location (struct bp_location *bl,\n }\n \n static void\n-bkpt_probe_create_sals_from_location (const struct event_location *location,\n+bkpt_probe_create_sals_from_location (struct event_location *location,\n \t\t\t\t      struct linespec_result *canonical,\n \t\t\t\t      enum bptype type_wanted)\n {\n@@ -12732,7 +12732,7 @@ bkpt_probe_create_sals_from_location (const struct event_location *location,\n \n static std::vector<symtab_and_line>\n bkpt_probe_decode_location (struct breakpoint *b,\n-\t\t\t    const struct event_location *location,\n+\t\t\t    struct event_location *location,\n \t\t\t    struct program_space *search_pspace)\n {\n   std::vector<symtab_and_line> sals = parse_probes (location, search_pspace, NULL);\n@@ -12826,7 +12826,7 @@ tracepoint_print_recreate (struct breakpoint *self, struct ui_file *fp)\n }\n \n static void\n-tracepoint_create_sals_from_location (const struct event_location *location,\n+tracepoint_create_sals_from_location (struct event_location *location,\n \t\t\t\t      struct linespec_result *canonical,\n \t\t\t\t      enum bptype type_wanted)\n {\n@@ -12857,7 +12857,7 @@ tracepoint_create_breakpoints_sal (struct gdbarch *gdbarch,\n \n static std::vector<symtab_and_line>\n tracepoint_decode_location (struct breakpoint *b,\n-\t\t\t    const struct event_location *location,\n+\t\t\t    struct event_location *location,\n \t\t\t    struct program_space *search_pspace)\n {\n   return decode_location_default (b, location, search_pspace);\n@@ -12869,7 +12869,7 @@ struct breakpoint_ops tracepoint_breakpoint_ops;\n \n static void\n tracepoint_probe_create_sals_from_location\n-  (const struct event_location *location,\n+  (struct event_location *location,\n    struct linespec_result *canonical,\n    enum bptype type_wanted)\n {\n@@ -12879,7 +12879,7 @@ tracepoint_probe_create_sals_from_location\n \n static std::vector<symtab_and_line>\n tracepoint_probe_decode_location (struct breakpoint *b,\n-\t\t\t\t  const struct event_location *location,\n+\t\t\t\t  struct event_location *location,\n \t\t\t\t  struct program_space *search_pspace)\n {\n   /* We use the same method for breakpoint on probes.  */\n@@ -12960,7 +12960,7 @@ dprintf_after_condition_true (struct bpstats *bs)\n    markers (`-m').  */\n \n static void\n-strace_marker_create_sals_from_location (const struct event_location *location,\n+strace_marker_create_sals_from_location (struct event_location *location,\n \t\t\t\t\t struct linespec_result *canonical,\n \t\t\t\t\t enum bptype type_wanted)\n {\n@@ -13030,7 +13030,7 @@ strace_marker_create_breakpoints_sal (struct gdbarch *gdbarch,\n \n static std::vector<symtab_and_line>\n strace_marker_decode_location (struct breakpoint *b,\n-\t\t\t       const struct event_location *location,\n+\t\t\t       struct event_location *location,\n \t\t\t       struct program_space *search_pspace)\n {\n   struct tracepoint *tp = (struct tracepoint *) b;\n@@ -13713,7 +13713,7 @@ breakpoint_re_set_default (struct breakpoint *b)\n    calls parse_breakpoint_sals.  Return 1 for success, zero for failure.  */\n \n static void\n-create_sals_from_location_default (const struct event_location *location,\n+create_sals_from_location_default (struct event_location *location,\n \t\t\t\t   struct linespec_result *canonical,\n \t\t\t\t   enum bptype type_wanted)\n {\n@@ -13750,7 +13750,7 @@ create_breakpoints_sal_default (struct gdbarch *gdbarch,\n \n static std::vector<symtab_and_line>\n decode_location_default (struct breakpoint *b,\n-\t\t\t const struct event_location *location,\n+\t\t\t struct event_location *location,\n \t\t\t struct program_space *search_pspace)\n {\n   struct linespec_result canonical;"
    },
    {
      "sha": "a5fead914922ef83a9df68e008867d69077e35db",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -609,7 +609,7 @@ struct breakpoint_ops\n      `create_sals_from_location_default'.\n \n      This function is called inside `create_breakpoint'.  */\n-  void (*create_sals_from_location) (const struct event_location *location,\n+  void (*create_sals_from_location) (struct event_location *location,\n \t\t\t\t     struct linespec_result *canonical,\n \t\t\t\t     enum bptype type_wanted);\n \n@@ -636,7 +636,7 @@ struct breakpoint_ops\n      This function is called inside `location_to_sals'.  */\n   std::vector<symtab_and_line> (*decode_location)\n     (struct breakpoint *b,\n-     const struct event_location *location,\n+     struct event_location *location,\n      struct program_space *search_pspace);\n \n   /* Return true if this breakpoint explains a signal.  See\n@@ -1386,7 +1386,7 @@ enum breakpoint_create_flags\n    Returns true if any breakpoint was created; false otherwise.  */\n \n extern int create_breakpoint (struct gdbarch *gdbarch,\n-\t\t\t      const struct event_location *location,\n+\t\t\t      struct event_location *location,\n \t\t\t      const char *cond_string, int thread,\n \t\t\t      const char *extra_string,\n \t\t\t      int parse_extra,"
    },
    {
      "sha": "e8f3d594c3a03d2d15347de7e822b07c877c402c",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -3201,7 +3201,7 @@ event_location_to_sals (linespec_parser *parser,\n /* See linespec.h.  */\n \n void\n-decode_line_full (const struct event_location *location, int flags,\n+decode_line_full (struct event_location *location, int flags,\n \t\t  struct program_space *search_pspace,\n \t\t  struct symtab *default_symtab,\n \t\t  int default_line, struct linespec_result *canonical,\n@@ -3230,6 +3230,10 @@ decode_line_full (const struct event_location *location, int flags,\n \t\t\t\t\t\t\t\tlocation);\n   state = PARSER_STATE (&parser);\n \n+  if (result.size () == 0)\n+    throw_error (NOT_SUPPORTED_ERROR, _(\"Location %s not available\"),\n+\t\t event_location_to_string (location));\n+\n   gdb_assert (result.size () == 1 || canonical->pre_expanded);\n   canonical->pre_expanded = 1;\n "
    },
    {
      "sha": "9c2c8988fbcd5c58c0c7c8f0e737a52eb93f0da4",
      "filename": "gdb/linespec.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/linespec.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/linespec.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.h?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -124,7 +124,7 @@ extern std::vector<symtab_and_line>\n    strcmp sense) to FILTER will be returned; all others will be\n    filtered out.  */\n \n-extern void decode_line_full (const struct event_location *location, int flags,\n+extern void decode_line_full (struct event_location *location, int flags,\n \t\t\t      struct program_space *search_pspace,\n \t\t\t      struct symtab *default_symtab, int default_line,\n \t\t\t      struct linespec_result *canonical,"
    },
    {
      "sha": "6335ece30d754b340c6d9df320617ed87426eb3d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-28  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/label-without-address.c: New test.\n+\t* gdb.base/label-without-address.exp: New file.\n+\n 2020-08-27  Pedro Alves  <pedro@palves.net>\n \n \tPR gdb/26523"
    },
    {
      "sha": "f0d4a42268768186a2e07fdd8ec9830fedfb4bf4",
      "filename": "gdb/testsuite/gdb.base/label-without-address.c",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/testsuite/gdb.base/label-without-address.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/testsuite/gdb.base/label-without-address.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/label-without-address.c?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -0,0 +1,24 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main (void)\n+{\n+  return 0;\n+ L1:\n+  (void)0;\n+}"
    },
    {
      "sha": "0fcb1fd19a9dd80fee0e57d301834e2b5bfff304",
      "filename": "gdb/testsuite/gdb.base/label-without-address.exp",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/testsuite/gdb.base/label-without-address.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626d23209fa3632561bb02ac11cb522bede91c1e/gdb/testsuite/gdb.base/label-without-address.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/label-without-address.exp?ref=626d23209fa3632561bb02ac11cb522bede91c1e",
      "patch": "@@ -0,0 +1,37 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+set supported 0\n+gdb_test_multiple \"l main:L1\" \"\" {\n+    -wrap -re \"No label \\\"L1\\\" defined in function \\\"main\\\"\\.\" {\n+\tunsupported $gdb_test_name\n+    }\n+    -wrap -re \"L1:\\r\\n.*\" {\n+\tpass $gdb_test_name\n+\tset supported 1\n+    }\n+}\n+\n+if { ! $supported } {\n+    return -1\n+}\n+\n+gdb_test \"break main:L1\" \"Location main:L1 not available\""
    }
  ]
}