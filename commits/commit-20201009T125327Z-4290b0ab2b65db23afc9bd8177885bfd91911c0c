{
  "sha": "4290b0ab2b65db23afc9bd8177885bfd91911c0c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDI5MGIwYWIyYjY1ZGIyM2FmYzliZDgxNzc4ODViZmQ5MTkxMWMwYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-09T00:29:33Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-09T12:53:27Z"
    },
    "message": "[GOLD] internal error in relocate, at powerpc.cc:10473\n\nGOT relocations can refer directly to a function in a fixed position\nexecutable, unlike ADDR64 which needs a global entry stub, or branch\nrelocs, which need PLT stubs.\n\n\t* powerpc.cc (is_got_reloc): New function.\n\t(Target_powerpc::Relocate::relocate): Use it here, exclude GOT\n\trelocs when looking for stubs.",
    "tree": {
      "sha": "1a61e6787591d50752f0b9e9dec57be28f3ac421",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1a61e6787591d50752f0b9e9dec57be28f3ac421"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4290b0ab2b65db23afc9bd8177885bfd91911c0c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4290b0ab2b65db23afc9bd8177885bfd91911c0c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4290b0ab2b65db23afc9bd8177885bfd91911c0c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4290b0ab2b65db23afc9bd8177885bfd91911c0c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32930e4edbc06bc6f10c435dbcc63131715df678",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32930e4edbc06bc6f10c435dbcc63131715df678",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32930e4edbc06bc6f10c435dbcc63131715df678"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 21,
    "deletions": 7
  },
  "files": [
    {
      "sha": "0c00d96f4eb7408b1f76a7cc53cc7ad5872a0c10",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4290b0ab2b65db23afc9bd8177885bfd91911c0c/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4290b0ab2b65db23afc9bd8177885bfd91911c0c/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=4290b0ab2b65db23afc9bd8177885bfd91911c0c",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc (is_got_reloc): New function.\n+\t(Target_powerpc::Relocate::relocate): Use it here, exclude GOT\n+\trelocs when looking for stubs.\n+\n 2020-10-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* testsuite/split_i386.sh: Updated for --split-stack-adjust-size"
    },
    {
      "sha": "f9eb4f98bdace607373e0ca3ad80f9e9cb5bbf2c",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4290b0ab2b65db23afc9bd8177885bfd91911c0c/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4290b0ab2b65db23afc9bd8177885bfd91911c0c/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=4290b0ab2b65db23afc9bd8177885bfd91911c0c",
      "patch": "@@ -1884,6 +1884,19 @@ is_plt16_reloc(unsigned int r_type)\n \t  || (size == 64 && r_type == elfcpp::R_PPC64_PLT16_LO_DS));\n }\n \n+// GOT_TYPE_STANDARD (ie. not TLS) GOT relocs\n+inline bool\n+is_got_reloc(unsigned int r_type)\n+{\n+  return (r_type == elfcpp::R_POWERPC_GOT16\n+\t  || r_type == elfcpp::R_POWERPC_GOT16_LO\n+\t  || r_type == elfcpp::R_POWERPC_GOT16_HI\n+\t  || r_type == elfcpp::R_POWERPC_GOT16_HA\n+\t  || r_type == elfcpp::R_PPC64_GOT16_DS\n+\t  || r_type == elfcpp::R_PPC64_GOT16_LO_DS\n+\t  || r_type == elfcpp::R_PPC64_GOT_PCREL34);\n+}\n+\n // If INSN is an opcode that may be used with an @tls operand, return\n // the transformed insn for TLS optimisation, otherwise return 0.  If\n // REG is non-zero only match an insn with RB or RA equal to REG.\n@@ -10381,6 +10394,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n        ? gsym->use_plt_offset(Scan::get_reference_flags(r_type, target))\n        : object->local_has_plt_offset(r_sym));\n   if (has_plt_offset\n+      && !is_got_reloc(r_type)\n       && !is_plt16_reloc<size>(r_type)\n       && r_type != elfcpp::R_PPC64_PLT_PCREL34\n       && r_type != elfcpp::R_PPC64_PLT_PCREL34_NOTOC\n@@ -10523,13 +10537,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       elfcpp::Swap<32, big_endian>::writeval(iview + 1, pnop & 0xffffffff);\n       r_type = elfcpp::R_POWERPC_NONE;\n     }\n-  else if (r_type == elfcpp::R_POWERPC_GOT16\n-\t   || r_type == elfcpp::R_POWERPC_GOT16_LO\n-\t   || r_type == elfcpp::R_POWERPC_GOT16_HI\n-\t   || r_type == elfcpp::R_POWERPC_GOT16_HA\n-\t   || r_type == elfcpp::R_PPC64_GOT16_DS\n-\t   || r_type == elfcpp::R_PPC64_GOT16_LO_DS\n-\t   || r_type == elfcpp::R_PPC64_GOT_PCREL34)\n+  else if (is_got_reloc(r_type))\n     {\n       if (gsym != NULL)\n \t{"
    }
  ]
}