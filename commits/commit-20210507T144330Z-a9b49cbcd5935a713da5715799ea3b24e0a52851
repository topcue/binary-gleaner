{
  "sha": "a9b49cbcd5935a713da5715799ea3b24e0a52851",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTliNDljYmNkNTkzNWE3MTNkYTU3MTU3OTllYTNiMjRlMGE1Mjg1MQ==",
  "commit": {
    "author": {
      "name": "Marco Barisione",
      "email": "mbarisione@undo.io",
      "date": "2021-05-07T14:43:30Z"
    },
    "committer": {
      "name": "Marco Barisione",
      "email": "mbarisione@undo.io",
      "date": "2021-05-07T14:43:30Z"
    },
    "message": "gdb: add lookup_cmd_exact to simplify a common pattern\n\nIn code dealing with commands, there's a pattern repeated a few times of\ncalling lookup_cmd with some speficic arguments and then using strcmp\non the returned command to check for an exact match.\nAs a later patch would add a few more similar lines of code, this patch\nadds a new lookup_cmd_exact function which simplify this use case.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.c (lookup_cmd_exact): Add.\n\t* cli/cli-script.c (do_define_command): Use lookup_cmd_exact.\n\t(define_prefix_command): Ditto.\n\t* command.h: Add lookup_cmd_exact.",
    "tree": {
      "sha": "efd3e48a50d31f4622598915d43f304b38420155",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/efd3e48a50d31f4622598915d43f304b38420155"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9b49cbcd5935a713da5715799ea3b24e0a52851",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9b49cbcd5935a713da5715799ea3b24e0a52851",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9b49cbcd5935a713da5715799ea3b24e0a52851",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9b49cbcd5935a713da5715799ea3b24e0a52851/comments",
  "author": {
    "login": "barisione",
    "id": 4679325,
    "node_id": "MDQ6VXNlcjQ2NzkzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4679325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisione",
    "html_url": "https://github.com/barisione",
    "followers_url": "https://api.github.com/users/barisione/followers",
    "following_url": "https://api.github.com/users/barisione/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisione/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisione/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisione/subscriptions",
    "organizations_url": "https://api.github.com/users/barisione/orgs",
    "repos_url": "https://api.github.com/users/barisione/repos",
    "events_url": "https://api.github.com/users/barisione/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisione/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisione",
    "id": 4679325,
    "node_id": "MDQ6VXNlcjQ2NzkzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4679325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisione",
    "html_url": "https://github.com/barisione",
    "followers_url": "https://api.github.com/users/barisione/followers",
    "following_url": "https://api.github.com/users/barisione/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisione/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisione/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisione/subscriptions",
    "organizations_url": "https://api.github.com/users/barisione/orgs",
    "repos_url": "https://api.github.com/users/barisione/repos",
    "events_url": "https://api.github.com/users/barisione/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisione/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "97834047e13bb9f30430331c27b11412a5ed6950",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97834047e13bb9f30430331c27b11412a5ed6950",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/97834047e13bb9f30430331c27b11412a5ed6950"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 40,
    "deletions": 17
  },
  "files": [
    {
      "sha": "f48a9add4d4ea2a663bd1645c501f357d4fe1f91",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9b49cbcd5935a713da5715799ea3b24e0a52851/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9b49cbcd5935a713da5715799ea3b24e0a52851/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=a9b49cbcd5935a713da5715799ea3b24e0a52851",
      "patch": "@@ -1875,6 +1875,21 @@ lookup_cmd (const char **line, struct cmd_list_element *list,\n   return 0;\n }\n \n+/* See command.h.  */\n+\n+struct cmd_list_element *\n+lookup_cmd_exact (const char *name,\n+\t\t  struct cmd_list_element *list,\n+\t\t  bool ignore_help_classes)\n+{\n+  const char *tem = name;\n+  struct cmd_list_element *cmd = lookup_cmd (&tem, list, \"\", NULL, -1,\n+\t\t\t\t\t     ignore_help_classes);\n+  if (cmd != nullptr && strcmp (name, cmd->name) != 0)\n+    cmd = nullptr;\n+  return cmd;\n+}\n+\n /* We are here presumably because an alias or command in TEXT is\n    deprecated and a warning message should be generated.  This\n    function decodes TEXT and potentially generates a warning message"
    },
    {
      "sha": "0544f3efb1badf64312609ac16d2816c8d0e2a50",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 6,
      "deletions": 17,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9b49cbcd5935a713da5715799ea3b24e0a52851/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9b49cbcd5935a713da5715799ea3b24e0a52851/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=a9b49cbcd5935a713da5715799ea3b24e0a52851",
      "patch": "@@ -1391,7 +1391,7 @@ do_define_command (const char *comname, int from_tty,\n       CMD_POST_HOOK\n     };\n   struct cmd_list_element *c, *newc, *hookc = 0, **list;\n-  const char *tem, *comfull;\n+  const char *comfull;\n   int  hook_type      = CMD_NO_HOOK;\n   int  hook_name_size = 0;\n    \n@@ -1403,11 +1403,7 @@ do_define_command (const char *comname, int from_tty,\n   comfull = comname;\n   list = validate_comname (&comname);\n \n-  /* Look it up, and verify that we got an exact match.  */\n-  tem = comname;\n-  c = lookup_cmd (&tem, *list, \"\", NULL, -1, 1);\n-  if (c && strcmp (comname, c->name) != 0)\n-    c = 0;\n+  c = lookup_cmd_exact (comname, *list);\n \n   if (c && commands == nullptr)\n     {\n@@ -1448,11 +1444,9 @@ do_define_command (const char *comname, int from_tty,\n \n   if (hook_type != CMD_NO_HOOK)\n     {\n-      /* Look up cmd it hooks, and verify that we got an exact match.  */\n-      tem = comname + hook_name_size;\n-      hookc = lookup_cmd (&tem, *list, \"\", NULL, -1, 0);\n-      if (hookc && strcmp (comname + hook_name_size, hookc->name) != 0)\n-\thookc = 0;\n+      /* Look up cmd it hooks.  */\n+      hookc = lookup_cmd_exact (comname + hook_name_size, *list,\n+\t\t\t\t/* ignore_help_classes = */ false);\n       if (!hookc && commands == nullptr)\n \t{\n \t  warning (_(\"Your new `%s' command does not \"\n@@ -1593,17 +1587,12 @@ static void\n define_prefix_command (const char *comname, int from_tty)\n {\n   struct cmd_list_element *c, **list;\n-  const char *tem;\n   const char *comfull;\n \n   comfull = comname;\n   list = validate_comname (&comname);\n \n-  /* Look it up, and verify that we got an exact match.  */\n-  tem = comname;\n-  c = lookup_cmd (&tem, *list, \"\", NULL, -1, 1);\n-  if (c != nullptr && strcmp (comname, c->name) != 0)\n-    c = nullptr;\n+  c = lookup_cmd_exact (comname, *list);\n \n   if (c != nullptr && c->theclass != class_user)\n     error (_(\"Command \\\"%s\\\" is built-in.\"), comfull);"
    },
    {
      "sha": "827a19637a2d14921772846d6f0468d4fc5a9a48",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9b49cbcd5935a713da5715799ea3b24e0a52851/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9b49cbcd5935a713da5715799ea3b24e0a52851/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=a9b49cbcd5935a713da5715799ea3b24e0a52851",
      "patch": "@@ -326,6 +326,25 @@ extern struct cmd_list_element *lookup_cmd_1\n \t struct cmd_list_element **result_list, std::string *default_args,\n \t int ignore_help_classes, bool lookup_for_completion_p = false);\n \n+/* Look up the command called NAME in the command list LIST.\n+\n+   Unlike LOOKUP_CMD, partial matches are ignored and only exact matches\n+   on NAME are considered.\n+\n+   LIST is a chain of struct cmd_list_element's.\n+\n+   If IGNORE_HELP_CLASSES is true (the default), ignore any command list\n+   elements which are actually help classes rather than commands (i.e.\n+   the function field of the struct cmd_list_element is null).\n+\n+   If found, return the struct cmd_list_element for that command,\n+   otherwise return NULLPTR.  */\n+\n+extern struct cmd_list_element *lookup_cmd_exact\n+\t\t\t(const char *name,\n+\t\t\t struct cmd_list_element *list,\n+\t\t\t bool ignore_help_classes = true);\n+\n extern struct cmd_list_element *deprecate_cmd (struct cmd_list_element *,\n \t\t\t\t\t       const char * );\n "
    }
  ]
}