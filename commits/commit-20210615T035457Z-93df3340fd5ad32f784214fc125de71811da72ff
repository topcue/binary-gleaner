{
  "sha": "93df3340fd5ad32f784214fc125de71811da72ff",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTNkZjMzNDBmZDVhZDMyZjc4NDIxNGZjMTI1ZGU3MTgxMWRhNzJmZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-11T04:53:57Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-15T03:54:57Z"
    },
    "message": "readelf: report DF_1_PIE as \"Position-Independent Executable\"\n\nI finally found time to teach readelf to identify PIEs in the file\nheader display and program header display.  So in place of\n\"DYN (Shared object file)\" which isn't completely true, show\n\"DYN (Position-Independent Executable file)\".\n\nIt requires a little bit of untangling code in readelf due to\nprocess_program_headers setting up dynamic_addr and dynamic_size,\nneeded to scan .dynamic for the DT_FLAGS_1 entry, and\nprocess_program_headers itself wanting to display the file type in\nsome cases.  At first I modified process_program_header using a\n\"probe\" parameter similar to get_section_headers in order to inhibit\noutput, but decided it was cleaner to separate out\nlocate_dynamic_sections.\n\nbinutils/\n\t* readelf.c (locate_dynamic_section, is_pie): New functions.\n\t(get_file_type): Replace e_type parameter with filedata.  Call\n\tis_pie for ET_DYN.  Update all callers.\n\t(process_program_headers): Use local variables dynamic_addr and\n\tdynamic_size, updating filedata on exit from function.  Set\n\tdynamic_size of 1 to indicate no dynamic section or segment.\n\tUpdate tests of dynamic_size throughout.\n\t* testsuite/binutils-all/x86-64/pr27708.dump: Update expected output.\nld/\n\t* testsuite/ld-pie/vaddr-0.d: Update expected output.\ngdb/\n\t* testsuite/lib/gdb.exp (exec_is_pie): Match new PIE readelf output.",
    "tree": {
      "sha": "573e4cdcb23a0dd6db96fba29bd3e19962935678",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/573e4cdcb23a0dd6db96fba29bd3e19962935678"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/93df3340fd5ad32f784214fc125de71811da72ff",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93df3340fd5ad32f784214fc125de71811da72ff",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/93df3340fd5ad32f784214fc125de71811da72ff",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93df3340fd5ad32f784214fc125de71811da72ff/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79afa8caab2eef71b6463e04d2d2f2152106cd93",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79afa8caab2eef71b6463e04d2d2f2152106cd93",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79afa8caab2eef71b6463e04d2d2f2152106cd93"
    }
  ],
  "stats": {
    "total": 199,
    "additions": 155,
    "deletions": 44
  },
  "files": [
    {
      "sha": "c70a45a6a962f02476c5df0e4f947accdb597b84",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -1,3 +1,14 @@\n+2021-06-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (locate_dynamic_section, is_pie): New functions.\n+\t(get_file_type): Replace e_type parameter with filedata.  Call\n+\tis_pie for ET_DYN.  Update all callers.\n+\t(process_program_headers): Use local variables dynamic_addr and\n+\tdynamic_size, updating filedata on exit from function.  Set\n+\tdynamic_size of 1 to indicate no dynamic section or segment.\n+\tUpdate tests of dynamic_size throughout.\n+\t* testsuite/binutils-all/x86-64/pr27708.dump: Update expected output.\n+\n 2021-06-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf.c (struct abbrev_attr): Change type of implicit_const."
    },
    {
      "sha": "e104a7ed2a16b171c0fc692bf7572c702ea60d07",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 133,
      "deletions": 41,
      "changes": 174,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -2339,17 +2339,108 @@ get_dynamic_type (Filedata * filedata, unsigned long type)\n     }\n }\n \n+static bool get_program_headers (Filedata *);\n+static bool get_dynamic_section (Filedata *);\n+\n+static void\n+locate_dynamic_section (Filedata *filedata)\n+{\n+  unsigned long dynamic_addr = 0;\n+  bfd_size_type dynamic_size = 0;\n+\n+  if (filedata->file_header.e_phnum != 0\n+      && get_program_headers (filedata))\n+    {\n+      Elf_Internal_Phdr *segment;\n+      unsigned int i;\n+\n+      for (i = 0, segment = filedata->program_headers;\n+\t   i < filedata->file_header.e_phnum;\n+\t   i++, segment++)\n+\t{\n+\t  if (segment->p_type == PT_DYNAMIC)\n+\t    {\n+\t      dynamic_addr = segment->p_offset;\n+\t      dynamic_size = segment->p_filesz;\n+\n+\t      if (filedata->section_headers != NULL)\n+\t\t{\n+\t\t  Elf_Internal_Shdr *sec;\n+\n+\t\t  sec = find_section (filedata, \".dynamic\");\n+\t\t  if (sec != NULL)\n+\t\t    {\n+\t\t      if (sec->sh_size == 0\n+\t\t\t  || sec->sh_type == SHT_NOBITS)\n+\t\t\t{\n+\t\t\t  dynamic_addr = 0;\n+\t\t\t  dynamic_size = 0;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  dynamic_addr = sec->sh_offset;\n+\t\t\t  dynamic_size = sec->sh_size;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\n+\t      if (dynamic_addr > filedata->file_size\n+\t\t  || (dynamic_size > filedata->file_size - dynamic_addr))\n+\t\t{\n+\t\t  dynamic_addr = 0;\n+\t\t  dynamic_size = 0;\n+\t\t}\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  filedata->dynamic_addr = dynamic_addr;\n+  filedata->dynamic_size = dynamic_size ? dynamic_size : 1;\n+}\n+\n+static bool\n+is_pie (Filedata *filedata)\n+{\n+  Elf_Internal_Dyn *entry;\n+\n+  if (filedata->dynamic_size == 0)\n+    locate_dynamic_section (filedata);\n+  if (filedata->dynamic_size <= 1)\n+    return false;\n+\n+  if (!get_dynamic_section (filedata))\n+    return false;\n+\n+  for (entry = filedata->dynamic_section;\n+       entry < filedata->dynamic_section + filedata->dynamic_nent;\n+       entry++)\n+    {\n+      if (entry->d_tag == DT_FLAGS_1)\n+\t{\n+\t  if ((entry->d_un.d_val & DF_1_PIE) != 0)\n+\t    return true;\n+\t  break;\n+\t}\n+    }\n+  return false;\n+}\n+\n static char *\n-get_file_type (unsigned e_type)\n+get_file_type (Filedata *filedata)\n {\n+  unsigned e_type = filedata->file_header.e_type;\n   static char buff[64];\n \n   switch (e_type)\n     {\n     case ET_NONE: return _(\"NONE (None)\");\n     case ET_REL:  return _(\"REL (Relocatable file)\");\n     case ET_EXEC: return _(\"EXEC (Executable file)\");\n-    case ET_DYN:  return _(\"DYN (Shared object file)\");\n+    case ET_DYN:\n+      if (is_pie (filedata))\n+\treturn _(\"DYN (Position-Independent Executable file)\");\n+      else\n+\treturn _(\"DYN (Shared object file)\");\n     case ET_CORE: return _(\"CORE (Core file)\");\n \n     default:\n@@ -5168,7 +5259,7 @@ process_file_header (Filedata * filedata)\n       printf (_(\"  ABI Version:                       %d\\n\"),\n \t      header->e_ident[EI_ABIVERSION]);\n       printf (_(\"  Type:                              %s\\n\"),\n-\t      get_file_type (header->e_type));\n+\t      get_file_type (filedata));\n       printf (_(\"  Machine:                           %s\\n\"),\n \t      get_machine_name (header->e_machine));\n       printf (_(\"  Version:                           0x%lx\\n\"),\n@@ -5379,27 +5470,21 @@ get_program_headers (Filedata * filedata)\n   return false;\n }\n \n-/* Returns TRUE if the program headers were loaded.  */\n+/* Print program header info and locate dynamic section.  */\n \n-static bool\n+static void\n process_program_headers (Filedata * filedata)\n {\n   Elf_Internal_Phdr * segment;\n   unsigned int i;\n   Elf_Internal_Phdr * previous_load = NULL;\n \n-  filedata->dynamic_addr = 0;\n-  filedata->dynamic_size = 0;\n-\n   if (filedata->file_header.e_phnum == 0)\n     {\n       /* PR binutils/12467.  */\n       if (filedata->file_header.e_phoff != 0)\n-\t{\n-\t  warn (_(\"possibly corrupt ELF header - it has a non-zero program\"\n-\t\t  \" header offset, but no program headers\\n\"));\n-\t  return false;\n-\t}\n+\twarn (_(\"possibly corrupt ELF header - it has a non-zero program\"\n+\t\t\" header offset, but no program headers\\n\"));\n       else if (do_segments)\n \t{\n \t  if (filedata->is_separate)\n@@ -5408,17 +5493,16 @@ process_program_headers (Filedata * filedata)\n \t  else\n \t    printf (_(\"\\nThere are no program headers in this file.\\n\"));\n \t}\n-      return true;\n+      goto no_headers;\n     }\n \n   if (do_segments && !do_header)\n     {\n       if (filedata->is_separate)\n \tprintf (\"\\nIn linked file '%s' the ELF file type is %s\\n\",\n-\t\tfiledata->file_name,\n-\t\tget_file_type (filedata->file_header.e_type));\n+\t\tfiledata->file_name, get_file_type (filedata));\n       else\n-\tprintf (_(\"\\nElf file type is %s\\n\"), get_file_type (filedata->file_header.e_type));\n+\tprintf (_(\"\\nElf file type is %s\\n\"), get_file_type (filedata));\n       printf (_(\"Entry point 0x%s\\n\"), bfd_vmatoa (\"x\", filedata->file_header.e_entry));\n       printf (ngettext (\"There is %d program header, starting at offset %s\\n\",\n \t\t\t\"There are %d program headers, starting at offset %s\\n\",\n@@ -5428,7 +5512,7 @@ process_program_headers (Filedata * filedata)\n     }\n \n   if (! get_program_headers (filedata))\n-    return true;\n+    goto no_headers;\n \n   if (do_segments)\n     {\n@@ -5452,6 +5536,8 @@ process_program_headers (Filedata * filedata)\n \t}\n     }\n \n+  unsigned long dynamic_addr = 0;\n+  bfd_size_type dynamic_size = 0;\n   for (i = 0, segment = filedata->program_headers;\n        i < filedata->file_header.e_phnum;\n        i++, segment++)\n@@ -5577,13 +5663,13 @@ process_program_headers (Filedata * filedata)\n \t  break;\n \n \tcase PT_DYNAMIC:\n-\t  if (filedata->dynamic_addr)\n+\t  if (dynamic_addr)\n \t    error (_(\"more than one dynamic segment\\n\"));\n \n \t  /* By default, assume that the .dynamic section is the first\n \t     section in the DYNAMIC segment.  */\n-\t  filedata->dynamic_addr = segment->p_offset;\n-\t  filedata->dynamic_size = segment->p_filesz;\n+\t  dynamic_addr = segment->p_offset;\n+\t  dynamic_size = segment->p_filesz;\n \n \t  /* Try to locate the .dynamic section. If there is\n \t     a section header table, we can easily locate it.  */\n@@ -5594,27 +5680,28 @@ process_program_headers (Filedata * filedata)\n \t      sec = find_section (filedata, \".dynamic\");\n \t      if (sec == NULL || sec->sh_size == 0)\n \t\t{\n-                  /* A corresponding .dynamic section is expected, but on\n-                     IA-64/OpenVMS it is OK for it to be missing.  */\n-                  if (!is_ia64_vms (filedata))\n-                    error (_(\"no .dynamic section in the dynamic segment\\n\"));\n+\t\t  /* A corresponding .dynamic section is expected, but on\n+\t\t     IA-64/OpenVMS it is OK for it to be missing.  */\n+\t\t  if (!is_ia64_vms (filedata))\n+\t\t    error (_(\"no .dynamic section in the dynamic segment\\n\"));\n \t\t  break;\n \t\t}\n \n \t      if (sec->sh_type == SHT_NOBITS)\n \t\t{\n-\t\t  filedata->dynamic_size = 0;\n+\t\t  dynamic_addr = 0;\n+\t\t  dynamic_size = 0;\n \t\t  break;\n \t\t}\n \n-\t      filedata->dynamic_addr = sec->sh_offset;\n-\t      filedata->dynamic_size = sec->sh_size;\n+\t      dynamic_addr = sec->sh_offset;\n+\t      dynamic_size = sec->sh_size;\n \n \t      /* The PT_DYNAMIC segment, which is used by the run-time\n \t\t loader,  should exactly match the .dynamic section.  */\n \t      if (do_checks\n-\t\t  && (filedata->dynamic_addr != segment->p_offset\n-\t\t      || filedata->dynamic_size != segment->p_filesz))\n+\t\t  && (dynamic_addr != segment->p_offset\n+\t\t      || dynamic_size != segment->p_filesz))\n \t\twarn (_(\"\\\n the .dynamic section is not the same as the dynamic segment\\n\"));\n \t    }\n@@ -5623,12 +5710,12 @@ the .dynamic section is not the same as the dynamic segment\\n\"));\n \t     segment.  Check this after matching against the section headers\n \t     so we don't warn on debuginfo file (which have NOBITS .dynamic\n \t     sections).  */\n-\t  if (filedata->dynamic_addr > filedata->file_size\n-\t      || (filedata->dynamic_size\n-\t\t  > filedata->file_size - filedata->dynamic_addr))\n+\t  if (dynamic_addr > filedata->file_size\n+\t      || (dynamic_size > filedata->file_size - dynamic_addr))\n \t    {\n \t      error (_(\"the dynamic segment offset + size exceeds the size of the file\\n\"));\n-\t      filedata->dynamic_addr = filedata->dynamic_size = 0;\n+\t      dynamic_addr = 0;\n+\t      dynamic_size = 0;\n \t    }\n \t  break;\n \n@@ -5685,7 +5772,13 @@ the .dynamic section is not the same as the dynamic segment\\n\"));\n \t}\n     }\n \n-  return true;\n+  filedata->dynamic_addr = dynamic_addr;\n+  filedata->dynamic_size = dynamic_size ? dynamic_size : 1;\n+  return;\n+\n+ no_headers:\n+  filedata->dynamic_addr = 0;\n+  filedata->dynamic_size = 1;\n }\n \n \n@@ -10610,7 +10703,7 @@ process_dynamic_section (Filedata * filedata)\n {\n   Elf_Internal_Dyn * entry;\n \n-  if (filedata->dynamic_size == 0)\n+  if (filedata->dynamic_size <= 1)\n     {\n       if (do_dynamic)\n \t{\n@@ -21374,9 +21467,9 @@ process_object (Filedata * filedata)\n     /* Without loaded section groups we cannot process unwind.  */\n     do_unwind = false;\n \n-  res = process_program_headers (filedata);\n-  if (res)\n-    res = process_dynamic_section (filedata);\n+  process_program_headers (filedata);\n+\n+  res = process_dynamic_section (filedata);\n \n   if (! process_relocs (filedata))\n     res = false;\n@@ -21422,8 +21515,7 @@ process_object (Filedata * filedata)\n \t    {\n \t      if (! process_section_groups (d->handle))\n \t\tres = false;\n-\t      if (! process_program_headers (d->handle))\n-\t\tres = false;\n+\t      process_program_headers (d->handle);\n \t      if (! process_dynamic_section (d->handle))\n \t\tres = false;\n \t      if (! process_relocs (d->handle))"
    },
    {
      "sha": "c99147140034174decf2201ccad19b1ea26dd14e",
      "filename": "binutils/testsuite/binutils-all/x86-64/pr27708.dump",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/binutils/testsuite/binutils-all/x86-64/pr27708.dump",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/binutils/testsuite/binutils-all/x86-64/pr27708.dump",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/x86-64/pr27708.dump?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -1,5 +1,5 @@\n \n-Elf file type is DYN (Shared object file)\n+Elf file type is DYN (Position-Independent Executable file)\n Entry point 0x5f0\n There are 11 program headers, starting at offset 64\n "
    },
    {
      "sha": "c56c129d0b1f7b66d3f7c78303cbabd7bdaf0757",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/lib/gdb.exp (exec_is_pie): Match new PIE readelf output.\n+\n 2021-06-14  Mike Frysinger  <vapier@gentoo.org>\n \n \t* Makefile.in (GNULIB_BUILDDIR): Rename to ..."
    },
    {
      "sha": "4bb2da31c1f3139403faf807337fca7a03b36a80",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -6078,7 +6078,7 @@ proc exec_is_pie { executable } {\n     if { $res != 0 } {\n \treturn -1\n     }\n-    set res [regexp -line {^[ \\t]*Type:[ \\t]*DYN \\(Shared object file\\)$} \\\n+    set res [regexp -line {^[ \\t]*Type:[ \\t]*DYN \\((Position-Independent Executable|Shared object) file\\)$} \\\n \t\t $output]\n     if { $res == 1 } {\n \treturn 1"
    },
    {
      "sha": "a1b85b1eea53355b638f293f7bf373bdc3cd3347",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/ld-pie/vaddr-0.d: Update expected output.\n+\n 2021-06-11  Alan Modra  <amodra@gmail.com>\n \n \tPR 27952"
    },
    {
      "sha": "69f7b10e7a8f98ea6ff49881ae6c2f0d9fbf089f",
      "filename": "ld/testsuite/ld-pie/vaddr-0.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93df3340fd5ad32f784214fc125de71811da72ff/ld/testsuite/ld-pie/vaddr-0.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93df3340fd5ad32f784214fc125de71811da72ff/ld/testsuite/ld-pie/vaddr-0.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-pie/vaddr-0.d?ref=93df3340fd5ad32f784214fc125de71811da72ff",
      "patch": "@@ -5,5 +5,5 @@\n \n ELF Header:\n #...\n-  Type:                              DYN \\(Shared object file\\)\n+  Type:                              DYN \\(Position-Independent Executable file\\)\n #pass"
    }
  ]
}