{
  "sha": "06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDZkM2U1YjAwNDZkNjllM2RhMzQ1MGQyZWIwN2MyOWYwYzFhMTg5YQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-12-31T17:41:38Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-03T21:24:00Z"
    },
    "message": "gdb: Remove a cleanup from find_overload_match\n\nThis patch changes cp-support.c:cp_func_name to return a\n'gdb::unique_xmalloc_ptr<char>' instead of a 'char *'.  This allows a\ncleanup to be removed from valops.c:find_overload_match.\n\ngdb/ChangeLog:\n\n\t* compile/compile-cplus-types.c\n\t(compile_cplus_instance::decl_name): Handle changes to\n\tcp_func_name.\n\t* cp-support.c (cp_func_name): Update header comment, update\n\treturn type.\n\t* cp-support.h (cp_func_name): Update return type in declaration.\n\t* valops.c (find_overload_match): Move temp_func local to top\n\tlevel of function and change its type.  Use temp_func to hold and\n\tdelete temporary string obtained from cp_func_name.",
    "tree": {
      "sha": "e0b86260f64d08ee047298504ee0b3228c1081f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e0b86260f64d08ee047298504ee0b3228c1081f8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "66644cd32ba63e7fda70e455766b438631ec0b61",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66644cd32ba63e7fda70e455766b438631ec0b61",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/66644cd32ba63e7fda70e455766b438631ec0b61"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 23,
    "deletions": 14
  },
  "files": [
    {
      "sha": "3e677dcde2bbcda88121a9c8c1f4553d069e64a1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
      "patch": "@@ -1,3 +1,15 @@\n+2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* compile/compile-cplus-types.c\n+\t(compile_cplus_instance::decl_name): Handle changes to\n+\tcp_func_name.\n+\t* cp-support.c (cp_func_name): Update header comment, update\n+\treturn type.\n+\t* cp-support.h (cp_func_name): Update return type in declaration.\n+\t* valops.c (find_overload_match): Move temp_func local to top\n+\tlevel of function and change its type.  Use temp_func to hold and\n+\tdelete temporary string obtained from cp_func_name.\n+\n 2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* remote.c (remote_target::remote_check_symbols): Convert `msg` to"
    },
    {
      "sha": "910a874550d519af6e7c65cff0076a2eca52d009",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
      "patch": "@@ -63,9 +63,9 @@ compile_cplus_instance::decl_name (const char *natural)\n   if (natural == nullptr)\n     return nullptr;\n \n-  char *name = cp_func_name (natural);\n+  gdb::unique_xmalloc_ptr<char> name = cp_func_name (natural);\n   if (name != nullptr)\n-    return gdb::unique_xmalloc_ptr<char> (name);\n+    return name;\n \n   return gdb::unique_xmalloc_ptr<char> (xstrdup (natural));\n }"
    },
    {
      "sha": "489bcca2b8d912ed31d166430c835cdd738342e9",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
      "patch": "@@ -808,10 +808,9 @@ method_name_from_physname (const char *physname)\n /* If FULL_NAME is the demangled name of a C++ function (including an\n    arg list, possibly including namespace/class qualifications),\n    return a new string containing only the function name (without the\n-   arg list/class qualifications).  Otherwise, return NULL.  The\n-   caller is responsible for freeing the memory in question.  */\n+   arg list/class qualifications).  Otherwise, return NULL.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n cp_func_name (const char *full_name)\n {\n   gdb::unique_xmalloc_ptr<char> ret;\n@@ -820,14 +819,14 @@ cp_func_name (const char *full_name)\n \n   info = cp_demangled_name_to_comp (full_name, NULL);\n   if (!info)\n-    return NULL;\n+    return nullptr;\n \n   ret_comp = unqualified_name_from_comp (info->tree);\n \n   if (ret_comp != NULL)\n     ret = cp_comp_to_string (ret_comp, 10);\n \n-  return ret.release ();\n+  return ret;\n }\n \n /* Helper for cp_remove_params.  DEMANGLED_NAME is the name of a"
    },
    {
      "sha": "2677e1bfcaf7426cd8bf25eab5e834b6b33bd0b5",
      "filename": "gdb/cp-support.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/cp-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/cp-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.h?ref=06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
      "patch": "@@ -96,7 +96,7 @@ extern unsigned int cp_find_first_component (const char *name);\n \n extern unsigned int cp_entire_prefix_len (const char *name);\n \n-extern char *cp_func_name (const char *full_name);\n+extern gdb::unique_xmalloc_ptr<char> cp_func_name (const char *full_name);\n \n extern gdb::unique_xmalloc_ptr<char> cp_remove_params\n   (const char *demanged_name);"
    },
    {
      "sha": "1a9d6a6f95838c5ebac5f081fd4f215cf0484ed6",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06d3e5b0046d69e3da3450d2eb07c29f0c1a189a/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=06d3e5b0046d69e3da3450d2eb07c29f0c1a189a",
      "patch": "@@ -2520,6 +2520,7 @@ find_overload_match (gdb::array_view<value *> args,\n \n   const char *obj_type_name = NULL;\n   const char *func_name = NULL;\n+  gdb::unique_xmalloc_ptr<char> temp_func;\n   enum oload_classification match_quality;\n   enum oload_classification method_match_quality = INCOMPATIBLE;\n   enum oload_classification src_method_match_quality = INCOMPATIBLE;\n@@ -2666,20 +2667,17 @@ find_overload_match (gdb::array_view<value *> args,\n               && TYPE_CODE (check_typedef (SYMBOL_TYPE (fsym)))\n \t      == TYPE_CODE_FUNC)\n             {\n-\t      char *temp_func;\n-\n \t      temp_func = cp_func_name (qualified_name);\n \n \t      /* If cp_func_name did not remove anything, the name of the\n \t         symbol did not include scope or argument types - it was\n \t         probably a C-style function.  */\n-\t      if (temp_func)\n+\t      if (temp_func != nullptr)\n \t\t{\n-\t\t  make_cleanup (xfree, temp_func);\n-\t\t  if (strcmp (temp_func, qualified_name) == 0)\n+\t\t  if (strcmp (temp_func.get (), qualified_name) == 0)\n \t\t    func_name = NULL;\n \t\t  else\n-\t\t    func_name = temp_func;\n+\t\t    func_name = temp_func.get ();\n \t\t}\n             }\n         }"
    }
  ]
}