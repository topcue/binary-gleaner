{
  "sha": "ca683e3a86d081fcf43685bee840086bd4c07443",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2E2ODNlM2E4NmQwODFmY2Y0MzY4NWJlZTg0MDA4NmJkNGMwNzQ0Mw==",
  "commit": {
    "author": {
      "name": "Alexandre Oliva",
      "email": "oliva@adacore.com",
      "date": "2019-08-02T18:40:32Z"
    },
    "committer": {
      "name": "Alexandre Oliva",
      "email": "aoliva@redhat.com",
      "date": "2019-08-02T18:40:32Z"
    },
    "message": "support Ada EH ABI v1\n\nA new pair of hooks used by Ada exception handlers, for correct\nrelease of reraised exception occurrences, involves the introduction\nof new v1 symbols that GDB should use when available.  The older, v0\nABI remains available in newer runtimes for bootstrapping purposes\nonly.\n\n\nfor  gdb/ChangeLog\n\n\t* ada-lang.c (exception_support_info_v0): Renamed from...\n\t(default_exception_support_info): ... this.  Create new\n\tdefinition for v1.\n\t(ada_has_this_exception_support): Look up catch_handlers_sym.\n\t(ada_exception_support_info_sniffer): Try v0 after default.",
    "tree": {
      "sha": "24e3b703237f1bf13fc5077adc17978bf7cc0c1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/24e3b703237f1bf13fc5077adc17978bf7cc0c1f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca683e3a86d081fcf43685bee840086bd4c07443",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca683e3a86d081fcf43685bee840086bd4c07443",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca683e3a86d081fcf43685bee840086bd4c07443",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca683e3a86d081fcf43685bee840086bd4c07443/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "89c52ae3a20e8d84a250095781c1e022af542b3f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89c52ae3a20e8d84a250095781c1e022af542b3f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89c52ae3a20e8d84a250095781c1e022af542b3f"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 57,
    "deletions": 3
  },
  "files": [
    {
      "sha": "27c310e755147a8e100a3476e8e153b8dc24fa9f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca683e3a86d081fcf43685bee840086bd4c07443/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca683e3a86d081fcf43685bee840086bd4c07443/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ca683e3a86d081fcf43685bee840086bd4c07443",
      "patch": "@@ -1,3 +1,11 @@\n+2019-08-02  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* ada-lang.c (exception_support_info_v0): Renamed from...\n+\t(default_exception_support_info): ... this.  Create new\n+\tdefinition for v1.\n+\t(ada_has_this_exception_support): Look up catch_handlers_sym.\n+\t(ada_exception_support_info_sniffer): Try v0 after default.\n+\n 2019-08-01  Tom Tromey  <tromey@adacore.com>\n \n \t* ia64-libunwind-tdep.h (struct libunwind_descr): Include"
    },
    {
      "sha": "15a7a902b824a864cad9785f0a45fbc17752a38d",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 49,
      "deletions": 3,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca683e3a86d081fcf43685bee840086bd4c07443/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca683e3a86d081fcf43685bee840086bd4c07443/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=ca683e3a86d081fcf43685bee840086bd4c07443",
      "patch": "@@ -11867,9 +11867,22 @@ static CORE_ADDR ada_unhandled_exception_name_addr_from_raise (void);\n \n /* The following exception support info structure describes how to\n    implement exception catchpoints with the latest version of the\n-   Ada runtime (as of 2007-03-06).  */\n+   Ada runtime (as of 2019-08-??).  */\n \n static const struct exception_support_info default_exception_support_info =\n+{\n+  \"__gnat_debug_raise_exception\", /* catch_exception_sym */\n+  \"__gnat_unhandled_exception\", /* catch_exception_unhandled_sym */\n+  \"__gnat_debug_raise_assert_failure\", /* catch_assert_sym */\n+  \"__gnat_begin_handler_v1\", /* catch_handlers_sym */\n+  ada_unhandled_exception_name_addr\n+};\n+\n+/* The following exception support info structure describes how to\n+   implement exception catchpoints with an earlier version of the\n+   Ada runtime (as of 2007-03-06) using v0 of the EH ABI.  */\n+\n+static const struct exception_support_info exception_support_info_v0 =\n {\n   \"__gnat_debug_raise_exception\", /* catch_exception_sym */\n   \"__gnat_unhandled_exception\", /* catch_exception_unhandled_sym */\n@@ -11938,8 +11951,34 @@ ada_has_this_exception_support (const struct exception_support_info *einfo)\n   /* Make sure that the symbol we found corresponds to a function.  */\n \n   if (SYMBOL_CLASS (sym) != LOC_BLOCK)\n-    error (_(\"Symbol \\\"%s\\\" is not a function (class = %d)\"),\n-           SYMBOL_LINKAGE_NAME (sym), SYMBOL_CLASS (sym));\n+    {\n+      error (_(\"Symbol \\\"%s\\\" is not a function (class = %d)\"),\n+\t     SYMBOL_LINKAGE_NAME (sym), SYMBOL_CLASS (sym));\n+      return 0;\n+    }\n+\n+  sym = standard_lookup (einfo->catch_handlers_sym, NULL, VAR_DOMAIN);\n+  if (sym == NULL)\n+    {\n+      struct bound_minimal_symbol msym\n+\t= lookup_minimal_symbol (einfo->catch_handlers_sym, NULL, NULL);\n+\n+      if (msym.minsym && MSYMBOL_TYPE (msym.minsym) != mst_solib_trampoline)\n+\terror (_(\"Your Ada runtime appears to be missing some debugging \"\n+\t\t \"information.\\nCannot insert Ada exception catchpoint \"\n+\t\t \"in this configuration.\"));\n+\n+      return 0;\n+    }\n+\n+  /* Make sure that the symbol we found corresponds to a function.  */\n+\n+  if (SYMBOL_CLASS (sym) != LOC_BLOCK)\n+    {\n+      error (_(\"Symbol \\\"%s\\\" is not a function (class = %d)\"),\n+\t     SYMBOL_LINKAGE_NAME (sym), SYMBOL_CLASS (sym));\n+      return 0;\n+    }\n \n   return 1;\n }\n@@ -11966,6 +12005,13 @@ ada_exception_support_info_sniffer (void)\n       return;\n     }\n \n+  /* Try the v0 exception suport info.  */\n+  if (ada_has_this_exception_support (&exception_support_info_v0))\n+    {\n+      data->exception_info = &exception_support_info_v0;\n+      return;\n+    }\n+\n   /* Try our fallback exception suport info.  */\n   if (ada_has_this_exception_support (&exception_support_info_fallback))\n     {"
    }
  ]
}