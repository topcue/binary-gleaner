{
  "sha": "e911c6663bb8cff9e6968a885b81d5dd484de031",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTkxMWM2NjYzYmI4Y2ZmOWU2OTY4YTg4NWI4MWQ1ZGQ0ODRkZTAzMQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2020-09-16T18:40:05Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2020-09-16T18:40:05Z"
    },
    "message": "Require kinfo_get_file and kinfo_get_vmmap for FreeBSD hosts.\n\nFreeBSD systems have provided these functions in libutil since 7.1\nrelease.  The most recent release without support is 6.4 released in\nNovember of 2008.\n\nThis also requires libutil-freebsd on GNU/kFreeBSD systems.  I assume\nthat those systems have supported kinfo_get_file and kinfo_get_vmmap\nover a similar timeframe.\n\ngdb/ChangeLog:\n\n\t* configure.ac: Remove check for kinfo_getvmmap().\n\t* configure, config.in: Regenerate.\n\t* fbsd-nat.c (fbsd_read_mapping): Remove\n\t(fbsd_nat_target::find_memory_regions): Remove the procfs version.\n\t(fbsd_nat_target::info_proc): Assume kinfo_getfile() and\n\tkinfo_get_vmmap() are always present.\n\ngdbsupport/ChangeLog:\n\n\t* common.m4 (GDB_AC_COMMON): Refactor checks for kinfo_getfile().\n\t* configure, config.in: Regenerate.",
    "tree": {
      "sha": "57b7386b1444d9a498ff26af28c48d2feae723c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/57b7386b1444d9a498ff26af28c48d2feae723c7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e911c6663bb8cff9e6968a885b81d5dd484de031",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e911c6663bb8cff9e6968a885b81d5dd484de031",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e911c6663bb8cff9e6968a885b81d5dd484de031",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e911c6663bb8cff9e6968a885b81d5dd484de031/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1f17d372496e18f93cad8ccec15d83530e41206f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f17d372496e18f93cad8ccec15d83530e41206f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1f17d372496e18f93cad8ccec15d83530e41206f"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 53,
    "deletions": 178
  },
  "files": [
    {
      "sha": "7159398dfc7fd26995cbea5189938b3a73e0e427",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-16  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* configure.ac: Remove check for kinfo_getvmmap().\n+\t* configure, config.in: Regenerate.\n+\t* fbsd-nat.c (fbsd_read_mapping): Remove\n+\t(fbsd_nat_target::find_memory_regions): Remove the procfs version.\n+\t(fbsd_nat_target::info_proc): Assume kinfo_getfile() and\n+\tkinfo_get_vmmap() are always present.\n+\n 2020-09-16  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-nat.c: Always include support for"
    },
    {
      "sha": "3e741c6ee71462472ce19e184f181f0b60490c3e",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -211,12 +211,9 @@\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n-/* Define to 1 if your system has the kinfo_getfile function. */\n+/* Define to 1 if you have the `kinfo_getfile' function. */\n #undef HAVE_KINFO_GETFILE\n \n-/* Define to 1 if your system has the kinfo_getvmmap function. */\n-#undef HAVE_KINFO_GETVMMAP\n-\n /* Define if you have <langinfo.h> and nl_langinfo(CODESET). */\n #undef HAVE_LANGINFO_CODESET\n "
    },
    {
      "sha": "a8942ecbd5d654ec522b769adeab2a5cdc03d7c6",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 15,
      "deletions": 62,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -8270,67 +8270,6 @@ fi\n \n \n \n-# On FreeBSD we may need libutil for kinfo_getvmmap (used by fbsd-nat.c).\n-# On GNU/kFreeBSD systems, FreeBSD libutil is renamed to libutil-freebsd.\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing kinfo_getvmmap\" >&5\n-$as_echo_n \"checking for library containing kinfo_getvmmap... \" >&6; }\n-if ${ac_cv_search_kinfo_getvmmap+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  ac_func_search_save_LIBS=$LIBS\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-/* Override any GCC internal prototype to avoid an error.\n-   Use char because int might match the return type of a GCC\n-   builtin and then its argument prototype would still apply.  */\n-#ifdef __cplusplus\n-extern \"C\"\n-#endif\n-char kinfo_getvmmap ();\n-int\n-main ()\n-{\n-return kinfo_getvmmap ();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-for ac_lib in '' util util-freebsd; do\n-  if test -z \"$ac_lib\"; then\n-    ac_res=\"none required\"\n-  else\n-    ac_res=-l$ac_lib\n-    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n-  fi\n-  if ac_fn_c_try_link \"$LINENO\"; then :\n-  ac_cv_search_kinfo_getvmmap=$ac_res\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext\n-  if ${ac_cv_search_kinfo_getvmmap+:} false; then :\n-  break\n-fi\n-done\n-if ${ac_cv_search_kinfo_getvmmap+:} false; then :\n-\n-else\n-  ac_cv_search_kinfo_getvmmap=no\n-fi\n-rm conftest.$ac_ext\n-LIBS=$ac_func_search_save_LIBS\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_kinfo_getvmmap\" >&5\n-$as_echo \"$ac_cv_search_kinfo_getvmmap\" >&6; }\n-ac_res=$ac_cv_search_kinfo_getvmmap\n-if test \"$ac_res\" != no; then :\n-  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n-\n-$as_echo \"#define HAVE_KINFO_GETVMMAP 1\" >>confdefs.h\n-\n-fi\n-\n-\n \n       if test \"X$prefix\" = \"XNONE\"; then\n     acl_final_prefix=\"$ac_default_prefix\"\n@@ -13567,6 +13506,9 @@ _ACEOF\n fi\n \n \n+  # On FreeBSD we need libutil for the kinfo_get* functions.  On\n+  # GNU/kFreeBSD systems, FreeBSD libutil is renamed to libutil-freebsd.\n+  # Figure out which one to use.\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing kinfo_getfile\" >&5\n $as_echo_n \"checking for library containing kinfo_getfile... \" >&6; }\n if ${ac_cv_search_kinfo_getfile+:} false; then :\n@@ -13621,9 +13563,20 @@ ac_res=$ac_cv_search_kinfo_getfile\n if test \"$ac_res\" != no; then :\n   test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n \n-$as_echo \"#define HAVE_KINFO_GETFILE 1\" >>confdefs.h\n+fi\n+\n+\n+  # Define HAVE_KINFO_GETFILE if kinfo_getfile is available.\n+  for ac_func in kinfo_getfile\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"kinfo_getfile\" \"ac_cv_func_kinfo_getfile\"\n+if test \"x$ac_cv_func_kinfo_getfile\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_KINFO_GETFILE 1\n+_ACEOF\n \n fi\n+done\n \n \n   # Check for std::thread.  This does not work on some platforms, like"
    },
    {
      "sha": "6b4b0fa85109d1e0d0a1610fece2ce13295befb9",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -474,12 +474,6 @@ AC_SEARCH_LIBS(socketpair, socket)\n # Link in zlib if we can.  This allows us to read compressed debug sections.\n AM_ZLIB\n \n-# On FreeBSD we may need libutil for kinfo_getvmmap (used by fbsd-nat.c).\n-# On GNU/kFreeBSD systems, FreeBSD libutil is renamed to libutil-freebsd.\n-AC_SEARCH_LIBS(kinfo_getvmmap, util util-freebsd,\n-  [AC_DEFINE(HAVE_KINFO_GETVMMAP, 1,\n-            [Define to 1 if your system has the kinfo_getvmmap function. ])])\n-\n AM_ICONV\n \n # GDB may fork/exec the iconv program to get the list of supported character"
    },
    {
      "sha": "ac88fbc87f7d5228bafab51cad69d20ce5674526",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 101,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -34,12 +34,7 @@\n #include <sys/signal.h>\n #include <sys/sysctl.h>\n #include <sys/user.h>\n-#if defined(HAVE_KINFO_GETFILE) || defined(HAVE_KINFO_GETVMMAP)\n #include <libutil.h>\n-#endif\n-#if !defined(HAVE_KINFO_GETVMMAP)\n-#include \"gdbsupport/filestuff.h\"\n-#endif\n \n #include \"elf-bfd.h\"\n #include \"fbsd-nat.h\"\n@@ -71,7 +66,6 @@ fbsd_nat_target::pid_to_exec_file (int pid)\n   return NULL;\n }\n \n-#ifdef HAVE_KINFO_GETVMMAP\n /* Iterate over all the memory regions in the current inferior,\n    calling FUNC for each memory region.  DATA is passed as the last\n    argument to FUNC.  */\n@@ -124,77 +118,6 @@ fbsd_nat_target::find_memory_regions (find_memory_region_ftype func,\n     }\n   return 0;\n }\n-#else\n-static int\n-fbsd_read_mapping (FILE *mapfile, unsigned long *start, unsigned long *end,\n-\t\t   char *protection)\n-{\n-  /* FreeBSD 5.1-RELEASE uses a 256-byte buffer.  */\n-  char buf[256];\n-  int resident, privateresident;\n-  unsigned long obj;\n-  int ret = EOF;\n-\n-  /* As of FreeBSD 5.0-RELEASE, the layout is described in\n-     /usr/src/sys/fs/procfs/procfs_map.c.  Somewhere in 5.1-CURRENT a\n-     new column was added to the procfs map.  Therefore we can't use\n-     fscanf since we need to support older releases too.  */\n-  if (fgets (buf, sizeof buf, mapfile) != NULL)\n-    ret = sscanf (buf, \"%lx %lx %d %d %lx %s\", start, end,\n-\t\t  &resident, &privateresident, &obj, protection);\n-\n-  return (ret != 0 && ret != EOF);\n-}\n-\n-/* Iterate over all the memory regions in the current inferior,\n-   calling FUNC for each memory region.  DATA is passed as the last\n-   argument to FUNC.  */\n-\n-int\n-fbsd_nat_target::find_memory_regions (find_memory_region_ftype func,\n-\t\t\t\t      void *data)\n-{\n-  pid_t pid = inferior_ptid.pid ();\n-  unsigned long start, end, size;\n-  char protection[4];\n-  int read, write, exec;\n-\n-  std::string mapfilename = string_printf (\"/proc/%ld/map\", (long) pid);\n-  gdb_file_up mapfile (fopen (mapfilename.c_str (), \"r\"));\n-  if (mapfile == NULL)\n-    error (_(\"Couldn't open %s.\"), mapfilename.c_str ());\n-\n-  if (info_verbose)\n-    fprintf_filtered (gdb_stdout, \n-\t\t      \"Reading memory regions from %s\\n\", mapfilename.c_str ());\n-\n-  /* Now iterate until end-of-file.  */\n-  while (fbsd_read_mapping (mapfile.get (), &start, &end, &protection[0]))\n-    {\n-      size = end - start;\n-\n-      read = (strchr (protection, 'r') != 0);\n-      write = (strchr (protection, 'w') != 0);\n-      exec = (strchr (protection, 'x') != 0);\n-\n-      if (info_verbose)\n-\t{\n-\t  fprintf_filtered (gdb_stdout, \n-\t\t\t    \"Save segment, %ld bytes at %s (%c%c%c)\\n\",\n-\t\t\t    size, paddress (target_gdbarch (), start),\n-\t\t\t    read ? 'r' : '-',\n-\t\t\t    write ? 'w' : '-',\n-\t\t\t    exec ? 'x' : '-');\n-\t}\n-\n-      /* Invoke the callback function to create the corefile segment.\n-\t Pass MODIFIED as true, we do not know the real modification state.  */\n-      func (start, size, read, write, exec, 1, data);\n-    }\n-\n-  return 0;\n-}\n-#endif\n \n /* Fetch the command line for a running process.  */\n \n@@ -251,21 +174,15 @@ fbsd_fetch_kinfo_proc (pid_t pid, struct kinfo_proc *kp)\n bool\n fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n {\n-#ifdef HAVE_KINFO_GETFILE\n   gdb::unique_xmalloc_ptr<struct kinfo_file> fdtbl;\n   int nfd = 0;\n-#endif\n   struct kinfo_proc kp;\n   pid_t pid;\n   bool do_cmdline = false;\n   bool do_cwd = false;\n   bool do_exe = false;\n-#ifdef HAVE_KINFO_GETFILE\n   bool do_files = false;\n-#endif\n-#ifdef HAVE_KINFO_GETVMMAP\n   bool do_mappings = false;\n-#endif\n   bool do_status = false;\n \n   switch (what)\n@@ -275,11 +192,9 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n       do_cwd = true;\n       do_exe = true;\n       break;\n-#ifdef HAVE_KINFO_GETVMMAP\n     case IP_MAPPINGS:\n       do_mappings = true;\n       break;\n-#endif\n     case IP_STATUS:\n     case IP_STAT:\n       do_status = true;\n@@ -293,21 +208,15 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n     case IP_CWD:\n       do_cwd = true;\n       break;\n-#ifdef HAVE_KINFO_GETFILE\n     case IP_FILES:\n       do_files = true;\n       break;\n-#endif\n     case IP_ALL:\n       do_cmdline = true;\n       do_cwd = true;\n       do_exe = true;\n-#ifdef HAVE_KINFO_GETFILE\n       do_files = true;\n-#endif\n-#ifdef HAVE_KINFO_GETVMMAP\n       do_mappings = true;\n-#endif\n       do_status = true;\n       break;\n     default:\n@@ -327,10 +236,8 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n     error (_(\"Invalid arguments.\"));\n \n   printf_filtered (_(\"process %d\\n\"), pid);\n-#ifdef HAVE_KINFO_GETFILE\n   if (do_cwd || do_exe || do_files)\n     fdtbl.reset (kinfo_getfile (pid, &nfd));\n-#endif\n \n   if (do_cmdline)\n     {\n@@ -343,7 +250,6 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n   if (do_cwd)\n     {\n       const char *cwd = NULL;\n-#ifdef HAVE_KINFO_GETFILE\n       struct kinfo_file *kf = fdtbl.get ();\n       for (int i = 0; i < nfd; i++, kf++)\n \t{\n@@ -353,7 +259,6 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n \t      break;\n \t    }\n \t}\n-#endif\n       if (cwd != NULL)\n \tprintf_filtered (\"cwd = '%s'\\n\", cwd);\n       else\n@@ -362,7 +267,6 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n   if (do_exe)\n     {\n       const char *exe = NULL;\n-#ifdef HAVE_KINFO_GETFILE\n       struct kinfo_file *kf = fdtbl.get ();\n       for (int i = 0; i < nfd; i++, kf++)\n \t{\n@@ -372,15 +276,13 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n \t      break;\n \t    }\n \t}\n-#endif\n       if (exe == NULL)\n \texe = pid_to_exec_file (pid);\n       if (exe != NULL)\n \tprintf_filtered (\"exe = '%s'\\n\", exe);\n       else\n \twarning (_(\"unable to fetch executable path name\"));\n     }\n-#ifdef HAVE_KINFO_GETFILE\n   if (do_files)\n     {\n       struct kinfo_file *kf = fdtbl.get ();\n@@ -398,8 +300,6 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n       else\n \twarning (_(\"unable to fetch list of open files\"));\n     }\n-#endif\n-#ifdef HAVE_KINFO_GETVMMAP\n   if (do_mappings)\n     {\n       int nvment;\n@@ -421,7 +321,6 @@ fbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n       else\n \twarning (_(\"unable to fetch virtual memory map\"));\n     }\n-#endif\n   if (do_status)\n     {\n       if (!fbsd_fetch_kinfo_proc (pid, &kp))"
    },
    {
      "sha": "d46f8c77bb02a0eec10e91f932e090f0b47d035a",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-16  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* common.m4 (GDB_AC_COMMON): Refactor checks for kinfo_getfile().\n+\t* configure, config.in: Regenerate.\n+\n 2020-09-14  Pedro Alves  <pedro@palves.net>\n \n \t* enum-flags.h: Include \"traits.h\"."
    },
    {
      "sha": "2b5750e81d1f855f46c9f0cb65a43823552b1220",
      "filename": "gdbsupport/common.m4",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/common.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/common.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common.m4?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -86,9 +86,13 @@ AC_DEFUN([GDB_AC_COMMON], [\n \n   AC_CHECK_MEMBERS([struct stat.st_blocks, struct stat.st_blksize])\n \n-  AC_SEARCH_LIBS(kinfo_getfile, util util-freebsd,\n-    [AC_DEFINE(HAVE_KINFO_GETFILE, 1,\n-\t      [Define to 1 if your system has the kinfo_getfile function. ])])\n+  # On FreeBSD we need libutil for the kinfo_get* functions.  On\n+  # GNU/kFreeBSD systems, FreeBSD libutil is renamed to libutil-freebsd.\n+  # Figure out which one to use.\n+  AC_SEARCH_LIBS(kinfo_getfile, util util-freebsd)\n+\n+  # Define HAVE_KINFO_GETFILE if kinfo_getfile is available.\n+  AC_CHECK_FUNCS(kinfo_getfile)\n \n   # Check for std::thread.  This does not work on some platforms, like\n   # mingw and DJGPP."
    },
    {
      "sha": "ecc6fa559f7cb35667702df34d9a4ec9f207bcaf",
      "filename": "gdbsupport/config.in",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/config.in?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -112,7 +112,7 @@\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n-/* Define to 1 if your system has the kinfo_getfile function. */\n+/* Define to 1 if you have the `kinfo_getfile' function. */\n #undef HAVE_KINFO_GETFILE\n \n /* Define if you have <langinfo.h> and nl_langinfo(CODESET). */"
    },
    {
      "sha": "a37f3c232ce525f8e59a8698a3a9511e463ad2a5",
      "filename": "gdbsupport/configure",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e911c6663bb8cff9e6968a885b81d5dd484de031/gdbsupport/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/configure?ref=e911c6663bb8cff9e6968a885b81d5dd484de031",
      "patch": "@@ -8976,6 +8976,9 @@ _ACEOF\n fi\n \n \n+  # On FreeBSD we need libutil for the kinfo_get* functions.  On\n+  # GNU/kFreeBSD systems, FreeBSD libutil is renamed to libutil-freebsd.\n+  # Figure out which one to use.\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing kinfo_getfile\" >&5\n $as_echo_n \"checking for library containing kinfo_getfile... \" >&6; }\n if ${ac_cv_search_kinfo_getfile+:} false; then :\n@@ -9030,9 +9033,20 @@ ac_res=$ac_cv_search_kinfo_getfile\n if test \"$ac_res\" != no; then :\n   test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n \n-$as_echo \"#define HAVE_KINFO_GETFILE 1\" >>confdefs.h\n+fi\n+\n+\n+  # Define HAVE_KINFO_GETFILE if kinfo_getfile is available.\n+  for ac_func in kinfo_getfile\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"kinfo_getfile\" \"ac_cv_func_kinfo_getfile\"\n+if test \"x$ac_cv_func_kinfo_getfile\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_KINFO_GETFILE 1\n+_ACEOF\n \n fi\n+done\n \n \n   # Check for std::thread.  This does not work on some platforms, like"
    }
  ]
}