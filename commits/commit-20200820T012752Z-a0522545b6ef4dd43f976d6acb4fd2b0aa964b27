{
  "sha": "a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTA1MjI1NDViNmVmNGRkNDNmOTc2ZDZhY2I0ZmQyYjBhYTk2NGIyNw==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2020-08-18T12:24:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-20T01:27:52Z"
    },
    "message": "Remove --reduce-memory-overheads and --hash-size arguments.\n\n\t* NEWS: Mention --reduce-memory-overheads and --hash-size arguments\n\toptions.\n\t* as.c: Remove the options from help.\n\t* doc/as.texi: Remove options.\n\t* doc/internals.texi: Remove hash from documentation.\n\t* hash.c (struct hash_entry): Remove.\n\t(struct hash_control): Likewise.\n\t(set_gas_hash_table_size): Likewise.\n\t(hash_new_sized): Likewise.\n\t(hash_new): Likewise.\n\t(hash_die): Likewise.\n\t(hash_lookup): Likewise.\n\t(hash_insert): Likewise.\n\t(hash_jam): Likewise.\n\t(hash_replace): Likewise.\n\t(hash_find): Likewise.\n\t(hash_find_n): Likewise.\n\t(hash_delete): Likewise.\n\t(hash_traverse): Likewise.\n\t(hash_print_statistics): Likewise.\n\t(TABLES): Likewise.\n\t(STATBUFSIZE): Likewise.\n\t(main): Likewise.\n\t(what): Likewise.\n\t(destroy): Likewise.\n\t(applicatee): Likewise.\n\t(whattable): Likewise.\n\t* hash.h (struct hash_control): Likewise.\n\t(set_gas_hash_table_size): Likewise.\n\t(hash_new): Likewise.\n\t(hash_new_sized): Likewise.\n\t(hash_die): Likewise.\n\t(hash_insert): Likewise.\n\t(hash_jam): Likewise.\n\t(hash_replace): Likewise.\n\t(hash_find): Likewise.\n\t(hash_find_n): Likewise.\n\t(hash_delete): Likewise.\n\t(hash_traverse): Likewise.\n\t(hash_print_statistics): Likewise.",
    "tree": {
      "sha": "719fe72e7b9174a60bfe4e2f32d895ccfe9f55b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/719fe72e7b9174a60bfe4e2f32d895ccfe9f55b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "629310abec8811510177101f3c7992dfd4be24dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/629310abec8811510177101f3c7992dfd4be24dd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/629310abec8811510177101f3c7992dfd4be24dd"
    }
  ],
  "stats": {
    "total": 751,
    "additions": 47,
    "deletions": 704
  },
  "files": [
    {
      "sha": "0ba47b886065163ae9fb0e3c0fc0b625bb2e687c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -1,3 +1,46 @@\n+2020-08-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* NEWS: Mention --reduce-memory-overheads and --hash-size arguments\n+\toptions.\n+\t* as.c: Remove the options from help.\n+\t* doc/as.texi: Remove options.\n+\t* doc/internals.texi: Remove hash from documentation.\n+\t* hash.c (struct hash_entry): Remove.\n+\t(struct hash_control): Likewise.\n+\t(set_gas_hash_table_size): Likewise.\n+\t(hash_new_sized): Likewise.\n+\t(hash_new): Likewise.\n+\t(hash_die): Likewise.\n+\t(hash_lookup): Likewise.\n+\t(hash_insert): Likewise.\n+\t(hash_jam): Likewise.\n+\t(hash_replace): Likewise.\n+\t(hash_find): Likewise.\n+\t(hash_find_n): Likewise.\n+\t(hash_delete): Likewise.\n+\t(hash_traverse): Likewise.\n+\t(hash_print_statistics): Likewise.\n+\t(TABLES): Likewise.\n+\t(STATBUFSIZE): Likewise.\n+\t(main): Likewise.\n+\t(what): Likewise.\n+\t(destroy): Likewise.\n+\t(applicatee): Likewise.\n+\t(whattable): Likewise.\n+\t* hash.h (struct hash_control): Likewise.\n+\t(set_gas_hash_table_size): Likewise.\n+\t(hash_new): Likewise.\n+\t(hash_new_sized): Likewise.\n+\t(hash_die): Likewise.\n+\t(hash_insert): Likewise.\n+\t(hash_jam): Likewise.\n+\t(hash_replace): Likewise.\n+\t(hash_find): Likewise.\n+\t(hash_find_n): Likewise.\n+\t(hash_delete): Likewise.\n+\t(hash_traverse): Likewise.\n+\t(hash_print_statistics): Likewise.\n+\n 2020-08-20  Martin Liska  <mliska@suse.cz>\n \n \t* config/obj-coff-seh.c (seh_hash_insert): Port to use new"
    },
    {
      "sha": "66afd0357ba83283f2f1f9ca49ee782f60123b11",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Removed --reduce-memory-overheads and --hash-size as gas now\n+  uses hash tables that can be expand and shrink automatically.\n+\n * Add {disp16} pseudo prefix to x86 assembler.\n \n * Add support for Intel AMX instructions."
    },
    {
      "sha": "c8d7c55d6f53a2c0aef90733bcdd436b46de8037",
      "filename": "gas/as.c",
      "status": "modified",
      "additions": 1,
      "deletions": 21,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/as.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/as.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/as.c?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -346,10 +346,6 @@ Options:\\n\\\n   fprintf (stream, _(\"\\\n   --gdwarf-sections       generate per-function section names for DWARF line information\\n\"));\n   fprintf (stream, _(\"\\\n-  --hash-size=<value>     set the hash table size close to <value>\\n\"));\n-  fprintf (stream, _(\"\\\n-  --help                  show this message and exit\\n\"));\n-  fprintf (stream, _(\"\\\n   --target-help           show target specific options\\n\"));\n   fprintf (stream, _(\"\\\n   -I DIR                  add DIR to search list for .include directives\\n\"));\n@@ -372,10 +368,6 @@ Options:\\n\\\n   fprintf (stream, _(\"\\\n   -R                      fold data section into text section\\n\"));\n   fprintf (stream, _(\"\\\n-  --reduce-memory-overheads \\n\\\n-                          prefer smaller memory use at the cost of longer\\n\\\n-                          assembly times\\n\"));\n-  fprintf (stream, _(\"\\\n   --statistics            print various measured statistics from execution\\n\"));\n   fprintf (stream, _(\"\\\n   --strip-local-absolute  strip local absolute symbols\\n\"));\n@@ -1100,22 +1092,10 @@ This program has absolutely no warranty.\\n\"));\n \t  break;\n \n \tcase OPTION_REDUCE_MEMORY_OVERHEADS:\n-\t  /* The only change we make at the moment is to reduce\n-\t     the size of the hash tables that we use.  */\n-\t  set_gas_hash_table_size (4051);\n \t  break;\n \n \tcase OPTION_HASH_TABLE_SIZE:\n-\t  {\n-\t    unsigned long new_size;\n-\n-            new_size = strtoul (optarg, NULL, 0);\n-            if (new_size)\n-              set_gas_hash_table_size (new_size);\n-            else\n-              as_fatal (_(\"--hash-size needs a numeric argument\"));\n-\t    break;\n-\t  }\n+\t  break;\n \t}\n     }\n "
    },
    {
      "sha": "4f86e21a898a2b312ee48afeb1b65e0e512aed59",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -238,7 +238,6 @@ gcc(1), ld(1), and the Info entries for @file{binutils} and @file{ld}.\n  [@b{--listing-cont-lines}=@var{NUM}] [@b{--keep-locals}]\n  [@b{--no-pad-sections}]\n  [@b{-o} @var{objfile}] [@b{-R}]\n- [@b{--hash-size}=@var{NUM}] [@b{--reduce-memory-overheads}]\n  [@b{--statistics}]\n  [@b{-v}] [@b{-version}] [@b{--version}]\n  [@b{-W}] [@b{--warn}] [@b{--fatal-warnings}] [@b{-w}] [@b{-x}]\n@@ -875,18 +874,6 @@ Name the object-file output from @command{@value{AS}} @var{objfile}.\n @item -R\n Fold the data section into the text section.\n \n-@item --hash-size=@var{number}\n-Set the default size of GAS's hash tables to a prime number close to\n-@var{number}.  Increasing this value can reduce the length of time it takes the\n-assembler to perform its tasks, at the expense of increasing the assembler's\n-memory requirements.  Similarly reducing this value can reduce the memory\n-requirements at the expense of speed.\n-\n-@item --reduce-memory-overheads\n-This option reduces GAS's memory requirements, at the expense of making the\n-assembly processes slower.  Currently this switch is a synonym for\n-@samp{--hash-size=4051}, but in the future it may have other effects as well.\n-\n @ifset ELF\n @item --sectname-subst\n Honor substitution sequences in section names."
    },
    {
      "sha": "a690d7877289323bc8503de57880682f7f431652",
      "filename": "gas/doc/internals.texi",
      "status": "modified",
      "additions": 0,
      "deletions": 32,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/doc/internals.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/doc/internals.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/internals.texi?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -1915,38 +1915,6 @@ type is narrow enough, a decimal number will be produced; otherwise, it will be\n in hexadecimal.  The value itself is not examined to make this determination.\n @end deftypefun\n \n-@node Hash tables\n-@subsection Hash tables\n-@cindex hash tables\n-\n-@deftypefun @{@} @{struct hash_control *@} hash_new (void)\n-Creates the hash table control structure.\n-@end deftypefun\n-\n-@deftypefun @{@} void hash_die (struct hash_control *)\n-Destroy a hash table.\n-@end deftypefun\n-\n-@deftypefun @{@} void *hash_delete (struct hash_control *, const char *, int)\n-Deletes entry from the hash table, returns the value it had.  If the last\n-arg is non-zero, free memory allocated for this entry and all entries\n-allocated more recently than this entry.\n-@end deftypefun\n-\n-@deftypefun @{@} void *hash_replace (struct hash_control *, const char *, void *)\n-Updates the value for an entry already in the table, returning the old value.\n-If no entry was found, just returns NULL.\n-@end deftypefun\n-\n-@deftypefun @{@} @{const char *@} hash_insert (struct hash_control *, const char *, void *)\n-Inserting a value already in the table is an error.\n-Returns an error message or NULL.\n-@end deftypefun\n-\n-@deftypefun @{@} @{const char *@} hash_jam (struct hash_control *, const char *, void *)\n-Inserts if the value isn't already present, updates it if it is.\n-@end deftypefun\n-\n @node Test suite\n @section Test suite\n @cindex test suite"
    },
    {
      "sha": "42fe5a203586b85938c051d8ff040c392001b7a7",
      "filename": "gas/hash.c",
      "status": "modified",
      "additions": 0,
      "deletions": 574,
      "changes": 574,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/hash.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/hash.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/hash.c?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -18,395 +18,7 @@\n    Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA\n    02110-1301, USA.  */\n \n-/* This version of the hash table code is a wholescale replacement of\n-   the old hash table code, which was fairly bad.  This is based on\n-   the hash table code in BFD, but optimized slightly for the\n-   assembler.  The assembler does not need to derive structures that\n-   are stored in the hash table.  Instead, it always stores a pointer.\n-   The assembler uses the hash table mostly to store symbols, and we\n-   don't need to confuse the symbol structure with a hash table\n-   structure.  */\n-\n #include \"as.h\"\n-#include \"safe-ctype.h\"\n-#include \"obstack.h\"\n-\n-/* An entry in a hash table.  */\n-\n-struct hash_entry {\n-  /* Next entry for this hash code.  */\n-  struct hash_entry *next;\n-  /* String being hashed.  */\n-  const char *string;\n-  /* Hash code.  This is the full hash code, not the index into the\n-     table.  */\n-  unsigned long hash;\n-  /* Pointer being stored in the hash table.  */\n-  void *data;\n-};\n-\n-/* A hash table.  */\n-\n-struct hash_control {\n-  /* The hash array.  */\n-  struct hash_entry **table;\n-  /* The number of slots in the hash table.  */\n-  unsigned int size;\n-  /* An obstack for this hash table.  */\n-  struct obstack memory;\n-\n-#ifdef HASH_STATISTICS\n-  /* Statistics.  */\n-  unsigned long lookups;\n-  unsigned long hash_compares;\n-  unsigned long string_compares;\n-  unsigned long insertions;\n-  unsigned long replacements;\n-  unsigned long deletions;\n-#endif /* HASH_STATISTICS */\n-};\n-\n-/* The default number of entries to use when creating a hash table.\n-   Note this value can be reduced to 4051 by using the command line\n-   switch --reduce-memory-overheads, or set to other values by using\n-   the --hash-size=<NUMBER> switch.  */\n-\n-static unsigned long gas_hash_table_size = 65537;\n-\n-void\n-set_gas_hash_table_size (unsigned long size)\n-{\n-  gas_hash_table_size = bfd_hash_set_default_size (size);\n-}\n-\n-/* Create a hash table.  This return a control block.  */\n-\n-struct hash_control *\n-hash_new_sized (unsigned long size)\n-{\n-  unsigned long alloc;\n-  struct hash_control *ret;\n-\n-  ret = XNEW (struct hash_control);\n-  obstack_begin (&ret->memory, chunksize);\n-  alloc = size * sizeof (struct hash_entry *);\n-  ret->table = (struct hash_entry **) obstack_alloc (&ret->memory, alloc);\n-  memset (ret->table, 0, alloc);\n-  ret->size = size;\n-\n-#ifdef HASH_STATISTICS\n-  ret->lookups = 0;\n-  ret->hash_compares = 0;\n-  ret->string_compares = 0;\n-  ret->insertions = 0;\n-  ret->replacements = 0;\n-  ret->deletions = 0;\n-#endif\n-\n-  return ret;\n-}\n-\n-struct hash_control *\n-hash_new (void)\n-{\n-  return hash_new_sized (gas_hash_table_size);\n-}\n-\n-/* Delete a hash table, freeing all allocated memory.  */\n-\n-void\n-hash_die (struct hash_control *table)\n-{\n-  obstack_free (&table->memory, 0);\n-  free (table);\n-}\n-\n-/* Look up a string in a hash table.  This returns a pointer to the\n-   hash_entry, or NULL if the string is not in the table.  If PLIST is\n-   not NULL, this sets *PLIST to point to the start of the list which\n-   would hold this hash entry.  If PHASH is not NULL, this sets *PHASH\n-   to the hash code for KEY.\n-\n-   Each time we look up a string, we move it to the start of the list\n-   for its hash code, to take advantage of referential locality.  */\n-\n-static struct hash_entry *\n-hash_lookup (struct hash_control *table, const char *key, size_t len,\n-\t     struct hash_entry ***plist, unsigned long *phash)\n-{\n-  unsigned long hash;\n-  size_t n;\n-  unsigned int c;\n-  unsigned int hindex;\n-  struct hash_entry **list;\n-  struct hash_entry *p;\n-  struct hash_entry *prev;\n-\n-#ifdef HASH_STATISTICS\n-  ++table->lookups;\n-#endif\n-\n-  hash = 0;\n-  for (n = 0; n < len; n++)\n-    {\n-      c = key[n];\n-      hash += c + (c << 17);\n-      hash ^= hash >> 2;\n-    }\n-  hash += len + (len << 17);\n-  hash ^= hash >> 2;\n-\n-  if (phash != NULL)\n-    *phash = hash;\n-\n-  hindex = hash % table->size;\n-  list = table->table + hindex;\n-\n-  if (plist != NULL)\n-    *plist = list;\n-\n-  prev = NULL;\n-  for (p = *list; p != NULL; p = p->next)\n-    {\n-#ifdef HASH_STATISTICS\n-      ++table->hash_compares;\n-#endif\n-\n-      if (p->hash == hash)\n-\t{\n-#ifdef HASH_STATISTICS\n-\t  ++table->string_compares;\n-#endif\n-\n-\t  if (strncmp (p->string, key, len) == 0 && p->string[len] == '\\0')\n-\t    {\n-\t      if (prev != NULL)\n-\t\t{\n-\t\t  prev->next = p->next;\n-\t\t  p->next = *list;\n-\t\t  *list = p;\n-\t\t}\n-\n-\t      return p;\n-\t    }\n-\t}\n-\n-      prev = p;\n-    }\n-\n-  return NULL;\n-}\n-\n-/* Insert an entry into a hash table.  This returns NULL on success.\n-   On error, it returns a printable string indicating the error.  It\n-   is considered to be an error if the entry already exists in the\n-   hash table.  */\n-\n-const char *\n-hash_insert (struct hash_control *table, const char *key, void *val)\n-{\n-  struct hash_entry *p;\n-  struct hash_entry **list;\n-  unsigned long hash;\n-\n-  p = hash_lookup (table, key, strlen (key), &list, &hash);\n-  if (p != NULL)\n-    return \"exists\";\n-\n-#ifdef HASH_STATISTICS\n-  ++table->insertions;\n-#endif\n-\n-  p = (struct hash_entry *) obstack_alloc (&table->memory, sizeof (*p));\n-  p->string = key;\n-  p->hash = hash;\n-  p->data = val;\n-\n-  p->next = *list;\n-  *list = p;\n-\n-  return NULL;\n-}\n-\n-/* Insert or replace an entry in a hash table.  This returns NULL on\n-   success.  On error, it returns a printable string indicating the\n-   error.  If an entry already exists, its value is replaced.  */\n-\n-const char *\n-hash_jam (struct hash_control *table, const char *key, void *val)\n-{\n-  struct hash_entry *p;\n-  struct hash_entry **list;\n-  unsigned long hash;\n-\n-  p = hash_lookup (table, key, strlen (key), &list, &hash);\n-  if (p != NULL)\n-    {\n-#ifdef HASH_STATISTICS\n-      ++table->replacements;\n-#endif\n-\n-      p->data = val;\n-    }\n-  else\n-    {\n-#ifdef HASH_STATISTICS\n-      ++table->insertions;\n-#endif\n-\n-      p = (struct hash_entry *) obstack_alloc (&table->memory, sizeof (*p));\n-      p->string = key;\n-      p->hash = hash;\n-      p->data = val;\n-\n-      p->next = *list;\n-      *list = p;\n-    }\n-\n-  return NULL;\n-}\n-\n-/* Replace an existing entry in a hash table.  This returns the old\n-   value stored for the entry.  If the entry is not found in the hash\n-   table, this does nothing and returns NULL.  */\n-\n-void *\n-hash_replace (struct hash_control *table, const char *key, void *value)\n-{\n-  struct hash_entry *p;\n-  void *ret;\n-\n-  p = hash_lookup (table, key, strlen (key), NULL, NULL);\n-  if (p == NULL)\n-    return NULL;\n-\n-#ifdef HASH_STATISTICS\n-  ++table->replacements;\n-#endif\n-\n-  ret = p->data;\n-\n-  p->data = value;\n-\n-  return ret;\n-}\n-\n-/* Find an entry in a hash table, returning its value.  Returns NULL\n-   if the entry is not found.  */\n-\n-void *\n-hash_find (struct hash_control *table, const char *key)\n-{\n-  struct hash_entry *p;\n-\n-  p = hash_lookup (table, key, strlen (key), NULL, NULL);\n-  if (p == NULL)\n-    return NULL;\n-\n-  return p->data;\n-}\n-\n-/* As hash_find, but KEY is of length LEN and is not guaranteed to be\n-   NUL-terminated.  */\n-\n-void *\n-hash_find_n (struct hash_control *table, const char *key, size_t len)\n-{\n-  struct hash_entry *p;\n-\n-  p = hash_lookup (table, key, len, NULL, NULL);\n-  if (p == NULL)\n-    return NULL;\n-\n-  return p->data;\n-}\n-\n-/* Delete an entry from a hash table.  This returns the value stored\n-   for that entry, or NULL if there is no such entry.  */\n-\n-void *\n-hash_delete (struct hash_control *table, const char *key, int freeme)\n-{\n-  struct hash_entry *p;\n-  struct hash_entry **list;\n-\n-  p = hash_lookup (table, key, strlen (key), &list, NULL);\n-  if (p == NULL)\n-    return NULL;\n-\n-  if (p != *list)\n-    abort ();\n-\n-#ifdef HASH_STATISTICS\n-  ++table->deletions;\n-#endif\n-\n-  *list = p->next;\n-\n-  if (freeme)\n-    obstack_free (&table->memory, p);\n-\n-  return p->data;\n-}\n-\n-/* Traverse a hash table.  Call the function on every entry in the\n-   hash table.  */\n-\n-void\n-hash_traverse (struct hash_control *table,\n-\t       void (*pfn) (const char *key, void *value))\n-{\n-  unsigned int i;\n-\n-  for (i = 0; i < table->size; ++i)\n-    {\n-      struct hash_entry *p;\n-\n-      for (p = table->table[i]; p != NULL; p = p->next)\n-\t(*pfn) (p->string, p->data);\n-    }\n-}\n-\n-/* Print hash table statistics on the specified file.  NAME is the\n-   name of the hash table, used for printing a header.  */\n-\n-void\n-hash_print_statistics (FILE *f ATTRIBUTE_UNUSED,\n-\t\t       const char *name ATTRIBUTE_UNUSED,\n-\t\t       struct hash_control *table ATTRIBUTE_UNUSED)\n-{\n-#ifdef HASH_STATISTICS\n-  unsigned int i;\n-  unsigned long total;\n-  unsigned long empty;\n-\n-  fprintf (f, \"%s hash statistics:\\n\", name);\n-  fprintf (f, \"\\t%lu lookups\\n\", table->lookups);\n-  fprintf (f, \"\\t%lu hash comparisons\\n\", table->hash_compares);\n-  fprintf (f, \"\\t%lu string comparisons\\n\", table->string_compares);\n-  fprintf (f, \"\\t%lu insertions\\n\", table->insertions);\n-  fprintf (f, \"\\t%lu replacements\\n\", table->replacements);\n-  fprintf (f, \"\\t%lu deletions\\n\", table->deletions);\n-\n-  total = 0;\n-  empty = 0;\n-  for (i = 0; i < table->size; ++i)\n-    {\n-      struct hash_entry *p;\n-\n-      if (table->table[i] == NULL)\n-\t++empty;\n-      else\n-\t{\n-\t  for (p = table->table[i]; p != NULL; p = p->next)\n-\t    ++total;\n-\t}\n-    }\n-\n-  fprintf (f, \"\\t%g average chain length\\n\", (double) total / table->size);\n-  fprintf (f, \"\\t%lu empty slots\\n\", empty);\n-#endif\n-}\n \n /* Insert ELEMENT into HTAB.  If the element exists, it is overwritten.  */\n \n@@ -431,189 +43,3 @@ htab_print_statistics (FILE *f, const char *name, htab_t table)\n   fprintf (f, \"\\t%lu elements\\n\", (unsigned long) htab_elements (table));\n   fprintf (f, \"\\t%lu table size\\n\", (unsigned long) htab_size (table));\n }\n-\f\n-#ifdef TEST\n-\n-/* This test program is left over from the old hash table code.  */\n-\n-/* Number of hash tables to maintain (at once) in any testing.  */\n-#define TABLES (6)\n-\n-/* We can have 12 statistics.  */\n-#define STATBUFSIZE (12)\n-\n-/* Display statistics here.  */\n-int statbuf[STATBUFSIZE];\n-\n-/* Human farts here.  */\n-char answer[100];\n-\n-/* We test many hash tables at once.  */\n-char *hashtable[TABLES];\n-\n-/* Points to current hash_control.  */\n-char *h;\n-char **pp;\n-char *p;\n-char *name;\n-char *value;\n-int size;\n-int used;\n-char command;\n-\n-/* Number 0:TABLES-1 of current hashed symbol table.  */\n-int number;\n-\n-int\n-main ()\n-{\n-  void applicatee ();\n-  void destroy ();\n-  char *what ();\n-  int *ip;\n-\n-  number = 0;\n-  h = 0;\n-  printf (\"type h <RETURN> for help\\n\");\n-  for (;;)\n-    {\n-      printf (\"hash_test command: \");\n-      gets (answer);\n-      command = answer[0];\n-      command = TOLOWER (command);\t/* Ecch!  */\n-      switch (command)\n-\t{\n-\tcase '#':\n-\t  printf (\"old hash table #=%d.\\n\", number);\n-\t  whattable ();\n-\t  break;\n-\tcase '?':\n-\t  for (pp = hashtable; pp < hashtable + TABLES; pp++)\n-\t    {\n-\t      printf (\"address of hash table #%d control block is %xx\\n\",\n-\t\t      pp - hashtable, *pp);\n-\t    }\n-\t  break;\n-\tcase 'a':\n-\t  hash_traverse (h, applicatee);\n-\t  break;\n-\tcase 'd':\n-\t  hash_traverse (h, destroy);\n-\t  hash_die (h);\n-\t  break;\n-\tcase 'f':\n-\t  p = hash_find (h, name = what (\"symbol\"));\n-\t  printf (\"value of \\\"%s\\\" is \\\"%s\\\"\\n\", name, p ? p : \"NOT-PRESENT\");\n-\t  break;\n-\tcase 'h':\n-\t  printf (\"# show old, select new default hash table number\\n\");\n-\t  printf (\"? display all hashtable control block addresses\\n\");\n-\t  printf (\"a apply a simple display-er to each symbol in table\\n\");\n-\t  printf (\"d die: destroy hashtable\\n\");\n-\t  printf (\"f find value of nominated symbol\\n\");\n-\t  printf (\"h this help\\n\");\n-\t  printf (\"i insert value into symbol\\n\");\n-\t  printf (\"j jam value into symbol\\n\");\n-\t  printf (\"n new hashtable\\n\");\n-\t  printf (\"r replace a value with another\\n\");\n-\t  printf (\"s say what %% of table is used\\n\");\n-\t  printf (\"q exit this program\\n\");\n-\t  printf (\"x delete a symbol from table, report its value\\n\");\n-\t  break;\n-\tcase 'i':\n-\t  p = hash_insert (h, name = what (\"symbol\"), value = what (\"value\"));\n-\t  if (p)\n-\t    {\n-\t      printf (\"symbol=\\\"%s\\\"  value=\\\"%s\\\"  error=%s\\n\", name, value,\n-\t\t      p);\n-\t    }\n-\t  break;\n-\tcase 'j':\n-\t  p = hash_jam (h, name = what (\"symbol\"), value = what (\"value\"));\n-\t  if (p)\n-\t    {\n-\t      printf (\"symbol=\\\"%s\\\"  value=\\\"%s\\\"  error=%s\\n\", name, value, p);\n-\t    }\n-\t  break;\n-\tcase 'n':\n-\t  h = hashtable[number] = (char *) hash_new ();\n-\t  break;\n-\tcase 'q':\n-\t  exit (EXIT_SUCCESS);\n-\tcase 'r':\n-\t  p = hash_replace (h, name = what (\"symbol\"), value = what (\"value\"));\n-\t  printf (\"old value was \\\"%s\\\"\\n\", p ? p : \"{}\");\n-\t  break;\n-\tcase 's':\n-\t  hash_say (h, statbuf, STATBUFSIZE);\n-\t  for (ip = statbuf; ip < statbuf + STATBUFSIZE; ip++)\n-\t    {\n-\t      printf (\"%d \", *ip);\n-\t    }\n-\t  printf (\"\\n\");\n-\t  break;\n-\tcase 'x':\n-\t  p = hash_delete (h, name = what (\"symbol\"));\n-\t  printf (\"old value was \\\"%s\\\"\\n\", p ? p : \"{}\");\n-\t  break;\n-\tdefault:\n-\t  printf (\"I can't understand command \\\"%c\\\"\\n\", command);\n-\t  break;\n-\t}\n-    }\n-}\n-\n-char *\n-what (description)\n-     char *description;\n-{\n-  printf (\"   %s : \", description);\n-  gets (answer);\n-  return xstrdup (answer);\n-}\n-\n-void\n-destroy (string, value)\n-     char *string;\n-     char *value;\n-{\n-  free (string);\n-  free (value);\n-}\n-\n-void\n-applicatee (string, value)\n-     char *string;\n-     char *value;\n-{\n-  printf (\"%.20s-%.20s\\n\", string, value);\n-}\n-\n-/* Determine number: what hash table to use.\n-   Also determine h: points to hash_control.  */\n-\n-void\n-whattable ()\n-{\n-  for (;;)\n-    {\n-      printf (\"   what hash table (%d:%d) ?  \", 0, TABLES - 1);\n-      gets (answer);\n-      sscanf (answer, \"%d\", &number);\n-      if (number >= 0 && number < TABLES)\n-\t{\n-\t  h = hashtable[number];\n-\t  if (!h)\n-\t    {\n-\t      printf (\"warning: current hash-table-#%d. has no hash-control\\n\", number);\n-\t    }\n-\t  return;\n-\t}\n-      else\n-\t{\n-\t  printf (\"invalid hash table number: %d\\n\", number);\n-\t}\n-    }\n-}\n-\n-#endif /* TEST */"
    },
    {
      "sha": "e5bccc1f72c539070710762ee707eb9024cf265c",
      "filename": "gas/hash.h",
      "status": "modified",
      "additions": 0,
      "deletions": 64,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/hash.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27/gas/hash.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/hash.h?ref=a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "patch": "@@ -21,70 +21,6 @@\n #ifndef HASH_H\n #define HASH_H\n \n-struct hash_control;\n-\n-/* Set the size of the hash table used.  */\n-\n-void set_gas_hash_table_size (unsigned long);\n-\n-/* Create a hash table.  This return a control block.  */\n-\n-extern struct hash_control *hash_new (void);\n-extern struct hash_control *hash_new_sized (unsigned long);\n-\n-/* Delete a hash table, freeing all allocated memory.  */\n-\n-extern void hash_die (struct hash_control *);\n-\n-/* Insert an entry into a hash table.  This returns NULL on success.\n-   On error, it returns a printable string indicating the error.  It\n-   is considered to be an error if the entry already exists in the\n-   hash table.  */\n-\n-extern const char *hash_insert (struct hash_control *,\n-\t\t\t\tconst char *key, void *value);\n-\n-/* Insert or replace an entry in a hash table.  This returns NULL on\n-   success.  On error, it returns a printable string indicating the\n-   error.  If an entry already exists, its value is replaced.  */\n-\n-extern const char *hash_jam (struct hash_control *,\n-\t\t\t     const char *key, void *value);\n-\n-/* Replace an existing entry in a hash table.  This returns the old\n-   value stored for the entry.  If the entry is not found in the hash\n-   table, this does nothing and returns NULL.  */\n-\n-extern void *hash_replace (struct hash_control *, const char *key,\n-\t\t\t void *value);\n-\n-/* Find an entry in a hash table, returning its value.  Returns NULL\n-   if the entry is not found.  */\n-\n-extern void *hash_find (struct hash_control *, const char *key);\n-\n-/* As hash_find, but KEY is of length LEN and is not guaranteed to be\n-   NUL-terminated.  */\n-\n-extern void *hash_find_n (struct hash_control *, const char *key, size_t len);\n-\n-/* Delete an entry from a hash table.  This returns the value stored\n-   for that entry, or NULL if there is no such entry.  */\n-\n-extern void *hash_delete (struct hash_control *, const char *key, int);\n-\n-/* Traverse a hash table.  Call the function on every entry in the\n-   hash table.  */\n-\n-extern void hash_traverse (struct hash_control *,\n-\t\t\t   void (*pfn) (const char *key, void *value));\n-\n-/* Print hash table statistics on the specified file.  NAME is the\n-   name of the hash table, used for printing a header.  */\n-\n-extern void hash_print_statistics (FILE *, const char *name,\n-\t\t\t\t   struct hash_control *);\n-\n /* Insert ELEMENT into HTAB.  If the element exists, it is overwritten.  */\n \n extern void htab_insert (htab_t, void *);"
    }
  ]
}