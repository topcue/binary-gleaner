{
  "sha": "e365e234ab7fc245656ec24131afce2b1327576e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTM2NWUyMzRhYjdmYzI0NTY1NmVjMjQxMzFhZmNlMmIxMzI3NTc2ZQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-03-06T07:55:03Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-03-06T07:55:03Z"
    },
    "message": "x86: fold (supposed to be) identical code\n\nThe Q and L suffix exclusion checks in match_template() ought to be\n(kept) in sync as far as their FPU and SIMD aspects go. This was\nalready violated by only the Q one checking for active broadcast.\nConvert the code such that there'll be only one instance of the logic,\nthe more that subsequently the logic is liable to need further\nrefinement / extension. (The alternative would be to drop all SIMD-ness\nfrom the L part, but it is in principle possible to enable all sorts of\nSIMD support with just a pre-386 CPU, via suitable .arch directives.)",
    "tree": {
      "sha": "53dbc05eba00897b7662407bb310a9d48c01856e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/53dbc05eba00897b7662407bb310a9d48c01856e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e365e234ab7fc245656ec24131afce2b1327576e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e365e234ab7fc245656ec24131afce2b1327576e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e365e234ab7fc245656ec24131afce2b1327576e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e365e234ab7fc245656ec24131afce2b1327576e/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "672a349b01af9c566f0000e983ad96b8ba455b9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/672a349b01af9c566f0000e983ad96b8ba455b9a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/672a349b01af9c566f0000e983ad96b8ba455b9a"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 20,
    "deletions": 27
  },
  "files": [
    {
      "sha": "461a13e2e71640134450c916b355c5c5ff200f30",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e365e234ab7fc245656ec24131afce2b1327576e/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e365e234ab7fc245656ec24131afce2b1327576e/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e365e234ab7fc245656ec24131afce2b1327576e",
      "patch": "@@ -1,3 +1,9 @@\n+2020-03-06  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (match_template): Fold duplicate code in\n+\tlogic rejecting certain suffixes in certain modes. Drop\n+\tpointless \"else\".\n+\n 2020-03-06  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (process_suffix): Exlucde !vexw insns"
    },
    {
      "sha": "5366b6ff313ef86e03e0517448af9cdbc68791f9",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 14,
      "deletions": 27,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e365e234ab7fc245656ec24131afce2b1327576e/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e365e234ab7fc245656ec24131afce2b1327576e/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=e365e234ab7fc245656ec24131afce2b1327576e",
      "patch": "@@ -5874,43 +5874,30 @@ match_template (char mnem_suffix)\n       for (j = 0; j < MAX_OPERANDS; j++)\n \toperand_types[j] = t->operand_types[j];\n \n-      /* In general, don't allow 64-bit operands in 32-bit mode.  */\n-      if (i.suffix == QWORD_MNEM_SUFFIX\n-\t  && flag_code != CODE_64BIT\n+      /* In general, don't allow\n+\t - 64-bit operands outside of 64-bit mode,\n+\t - 32-bit operands on pre-386.  */\n+      if (((i.suffix == QWORD_MNEM_SUFFIX\n+\t    && flag_code != CODE_64BIT\n+\t    && (t->base_opcode != 0x0fc7\n+\t\t|| t->extension_opcode != 1 /* cmpxchg8b */))\n+\t   || (i.suffix == LONG_MNEM_SUFFIX\n+\t       && !cpu_arch_flags.bitfield.cpui386))\n \t  && (intel_syntax\n \t      ? (t->opcode_modifier.mnemonicsize != IGNORESIZE\n-\t         && !t->opcode_modifier.broadcast\n+\t\t && !t->opcode_modifier.broadcast\n \t\t && !intel_float_operand (t->name))\n \t      : intel_float_operand (t->name) != 2)\n \t  && ((operand_types[0].bitfield.class != RegMMX\n \t       && operand_types[0].bitfield.class != RegSIMD)\n \t      || (operand_types[t->operands > 1].bitfield.class != RegMMX\n-\t\t  && operand_types[t->operands > 1].bitfield.class != RegSIMD))\n-\t  && (t->base_opcode != 0x0fc7\n-\t      || t->extension_opcode != 1 /* cmpxchg8b */))\n-\tcontinue;\n-\n-      /* In general, don't allow 32-bit operands on pre-386.  */\n-      else if (i.suffix == LONG_MNEM_SUFFIX\n-\t       && !cpu_arch_flags.bitfield.cpui386\n-\t       && (intel_syntax\n-\t\t   ? (t->opcode_modifier.mnemonicsize != IGNORESIZE\n-\t\t      && !intel_float_operand (t->name))\n-\t\t   : intel_float_operand (t->name) != 2)\n-\t       && ((operand_types[0].bitfield.class != RegMMX\n-\t\t    && operand_types[0].bitfield.class != RegSIMD)\n-\t\t   || (operand_types[t->operands > 1].bitfield.class != RegMMX\n-\t\t       && operand_types[t->operands > 1].bitfield.class\n-\t\t\t  != RegSIMD)))\n+\t\t  && operand_types[t->operands > 1].bitfield.class != RegSIMD)))\n \tcontinue;\n \n       /* Do not verify operands when there are none.  */\n-      else\n-\t{\n-\t  if (!t->operands)\n-\t    /* We've found a match; break out of loop.  */\n-\t    break;\n-\t}\n+      if (!t->operands)\n+\t/* We've found a match; break out of loop.  */\n+\tbreak;\n \n       if (!t->opcode_modifier.jump\n \t  || t->opcode_modifier.jump == JUMP_ABSOLUTE)"
    }
  ]
}