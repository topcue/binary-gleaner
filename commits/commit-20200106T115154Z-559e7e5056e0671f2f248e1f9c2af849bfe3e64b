{
  "sha": "559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTU5ZTdlNTA1NmUwNjcxZjJmMjQ4ZTFmOWMyYWY4NDliZmUzZTY0Yg==",
  "commit": {
    "author": {
      "name": "Eli Zaretskii",
      "email": "eliz@gnu.org",
      "date": "2020-01-06T11:51:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-06T11:51:54Z"
    },
    "message": "Improve process exit status macros on MinGW\n\nWhen a Windows program is terminated by a fatal exception, its exit\ncode is the value of that exception, as defined by the various\nEXCEPTION_* symbols in the Windows API headers.  This commit emulates\nWTERMSIG etc. by translating the fatal exception codes to more-or-less\nequivalent Posix signals.\n\ngdb/ChangeLog:\n2020-01-06  Eli Zaretskii  <eliz@gnu.org>\n\t    Pedro Alves  <palves@redhat.com>\n\n\t* Makefile.in (COMMON_SFILES): Add gdbsupport/gdb_wait.c.\n\t* windows-tdep.c: New enumeration of WINDOWS_SIG* signals.\n\t(windows_gdb_signal_to_target): New function, uses the above\n\tenumeration to convert GDB internal signal codes to equivalent\n\tWindows codes.\n\t(windows_init_abi): Call set_gdbarch_gdb_signal_to_target.\n\t* windows-nat.c: Include \"gdb_wait.h\".\n\t(get_windows_debug_event): Extract the fatal exception from the\n\texit status and convert to the equivalent Posix signal number.\n\t* cli/cli-cmds.c (exit_status_set_internal_vars): Account for the\n\tpossibility that WTERMSIG returns GDB_SIGNAL_UNKNOWN.\n\t* gdbsupport/gdb_wait.c: New file, implements\n\twindows_status_to_termsig.\n\t* gdbsupport/gdb_wait.h (WIFEXITED, WIFSIGNALED, WEXITSTATUS)\n\t(WTERMSIG) [__MINGW32__]: Separate definitions for MinGW.\n\ngdb/gdbserver/ChangeLog:\n2020-01-06  Eli Zaretskii  <eliz@gnu.org>\n\t    Pedro Alves  <palves@redhat.com>\n\n\t* win32-low.c (get_child_debug_event): Extract the fatal exception\n\tfrom the exit status and convert to the equivalent Posix signal\n\tnumber.\n\t(win32_wait): Allow TARGET_WAITKIND_SIGNALLED status as well.\n\t* Makefile.in (OBS, SFILES): Add gdb_wait.[co].",
    "tree": {
      "sha": "72cbb9abc638d724015998beb33c2341e31ebff8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72cbb9abc638d724015998beb33c2341e31ebff8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/comments",
  "author": {
    "login": "Eli-Zaretskii",
    "id": 20908835,
    "node_id": "MDQ6VXNlcjIwOTA4ODM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Eli-Zaretskii",
    "html_url": "https://github.com/Eli-Zaretskii",
    "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers",
    "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}",
    "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions",
    "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs",
    "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos",
    "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "49078ece048d0871508218203744f95e68ba5b4a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49078ece048d0871508218203744f95e68ba5b4a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/49078ece048d0871508218203744f95e68ba5b4a"
    }
  ],
  "stats": {
    "total": 332,
    "additions": 322,
    "deletions": 10
  },
  "files": [
    {
      "sha": "22acbc0433060f2082edfee229bed6a680a9e8cf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -1,3 +1,22 @@\n+2020-01-06  Eli Zaretskii  <eliz@gnu.org>\n+\t    Pedro Alves  <palves@redhat.com>\n+\n+\t* Makefile.in (COMMON_SFILES): Add gdbsupport/gdb_wait.c.\n+\t* windows-tdep.c: New enumeration of WINDOWS_SIG* signals.\n+\t(windows_gdb_signal_to_target): New function, uses the above\n+\tenumeration to convert GDB internal signal codes to equivalent\n+\tWindows codes.\n+\t(windows_init_abi): Call set_gdbarch_gdb_signal_to_target.\n+\t* windows-nat.c: Include \"gdb_wait.h\".\n+\t(get_windows_debug_event): Extract the fatal exception from the\n+\texit status and convert to the equivalent Posix signal number.\n+\t* cli/cli-cmds.c (exit_status_set_internal_vars): Account for the\n+\tpossibility that WTERMSIG returns GDB_SIGNAL_UNKNOWN.\n+\t* gdbsupport/gdb_wait.c: New file, implements\n+\twindows_status_to_termsig.\n+\t* gdbsupport/gdb_wait.h (WIFEXITED, WIFSIGNALED, WEXITSTATUS)\n+\t(WTERMSIG) [__MINGW32__]: Separate definitions for MinGW.\n+\n 2020-01-05  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* tui/tui-layout.c (tui_add_win_to_layout): Use tui_set_layout not"
    },
    {
      "sha": "0bc8142d2a039a15e5d71b2bfbaf79a54fc045e2",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -986,6 +986,7 @@ COMMON_SFILES = \\\n \tgdbsupport/gdb-dlfcn.c \\\n \tgdbsupport/gdb_tilde_expand.c \\\n \tgdbsupport/gdb_vecs.c \\\n+\tgdbsupport/gdb_wait.c \\\n \tgdbsupport/netstuff.c \\\n \tgdbsupport/new-op.c \\\n \tgdbsupport/pathstuff.c \\"
    },
    {
      "sha": "c2ba3a4238ab64a0a2fa9a2ffb158f12237d50a8",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -800,6 +800,18 @@ exit_status_set_internal_vars (int exit_status)\n   clear_internalvar (var_signal);\n   if (WIFEXITED (exit_status))\n     set_internalvar_integer (var_code, WEXITSTATUS (exit_status));\n+#ifdef __MINGW32__\n+  else if (WIFSIGNALED (exit_status) && WTERMSIG (exit_status) == -1)\n+    {\n+      /* The -1 condition can happen on MinGW, if we don't recognize\n+\t the fatal exception code encoded in the exit status; see\n+\t gdbsupport/gdb_wait.c.  We don't want to lose information in\n+\t the exit status in that case.  Record it as a normal exit\n+\t with the full exit status, including the higher 0xC0000000\n+\t bits.  */\n+      set_internalvar_integer (var_code, exit_status);\n+    }\n+#endif\n   else if (WIFSIGNALED (exit_status))\n     set_internalvar_integer (var_signal, WTERMSIG (exit_status));\n   else"
    },
    {
      "sha": "63778e2d2a3581595ef5f3cf9a3baa57f29f28ba",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -1,3 +1,12 @@\n+2020-01-06  Eli Zaretskii  <eliz@gnu.org>\n+\t    Pedro Alves  <palves@redhat.com>\n+\n+\t* win32-low.c (get_child_debug_event): Extract the fatal exception\n+\tfrom the exit status and convert to the equivalent Posix signal\n+\tnumber.\n+\t(win32_wait): Allow TARGET_WAITKIND_SIGNALLED status as well.\n+\t* Makefile.in (OBS, SFILES): Add gdb_wait.[co].\n+\n 2020-01-01  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* Makefile.in: Use INSTALL_PROGRAM_ENV."
    },
    {
      "sha": "1125426778b8d3e5566740b70c60941b1283e045",
      "filename": "gdb/gdbserver/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/Makefile.in?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -217,6 +217,7 @@ SFILES = \\\n \t$(srcdir)/gdbsupport/gdb-dlfcn.c \\\n \t$(srcdir)/gdbsupport/gdb_tilde_expand.c \\\n \t$(srcdir)/gdbsupport/gdb_vecs.c \\\n+\t$(srcdir)/gdbsupport/gdb_wait.c \\\n \t$(srcdir)/gdbsupport/netstuff.c \\\n \t$(srcdir)/gdbsupport/new-op.c \\\n \t$(srcdir)/gdbsupport/pathstuff.c \\\n@@ -264,6 +265,7 @@ OBS = \\\n \tgdbsupport/gdb-dlfcn.o \\\n \tgdbsupport/gdb_tilde_expand.o \\\n \tgdbsupport/gdb_vecs.o \\\n+\tgdbsupport/gdb_wait.o \\\n \tgdbsupport/netstuff.o \\\n \tgdbsupport/new-op.o \\\n \tgdbsupport/pathstuff.o \\"
    },
    {
      "sha": "340f65bbf95a49ccf4677adc972d62673f4ca8e3",
      "filename": "gdb/gdbserver/win32-low.c",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbserver/win32-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbserver/win32-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/win32-low.c?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -34,6 +34,7 @@\n #include <process.h>\n #include \"gdbsupport/gdb_tilde_expand.h\"\n #include \"gdbsupport/common-inferior.h\"\n+#include \"gdbsupport/gdb_wait.h\"\n \n #ifndef USE_WIN32API\n #include <sys/cygwin.h>\n@@ -1511,8 +1512,24 @@ get_child_debug_event (struct target_waitstatus *ourstatus)\n \t\t\"for pid=%u tid=%x\\n\",\n \t\t(unsigned) current_event.dwProcessId,\n \t\t(unsigned) current_event.dwThreadId));\n-      ourstatus->kind = TARGET_WAITKIND_EXITED;\n-      ourstatus->value.integer = current_event.u.ExitProcess.dwExitCode;\n+      {\n+\tDWORD exit_status = current_event.u.ExitProcess.dwExitCode;\n+\t/* If the exit status looks like a fatal exception, but we\n+\t   don't recognize the exception's code, make the original\n+\t   exit status value available, to avoid losing information.  */\n+\tint exit_signal\n+\t  = WIFSIGNALED (exit_status) ? WTERMSIG (exit_status) : -1;\n+\tif (exit_signal == -1)\n+\t  {\n+\t    ourstatus->kind = TARGET_WAITKIND_EXITED;\n+\t    ourstatus->value.integer = exit_status;\n+\t  }\n+\telse\n+\t  {\n+\t    ourstatus->kind = TARGET_WAITKIND_SIGNALLED;\n+\t    ourstatus->value.sig = gdb_signal_from_host (exit_signal);\n+\t  }\n+      }\n       child_continue (DBG_CONTINUE, -1);\n       CloseHandle (current_process_handle);\n       current_process_handle = NULL;\n@@ -1607,6 +1624,7 @@ win32_wait (ptid_t ptid, struct target_waitstatus *ourstatus, int options)\n \t  win32_clear_inferiors ();\n \t  return ptid_t (current_event.dwProcessId);\n \tcase TARGET_WAITKIND_STOPPED:\n+\tcase TARGET_WAITKIND_SIGNALLED:\n \tcase TARGET_WAITKIND_LOADED:\n \t  OUTMSG2 ((\"Child Stopped with signal = %d \\n\",\n \t\t    ourstatus->value.sig));"
    },
    {
      "sha": "037ba643db44817ee5d34e88a5e13cff0419dc79",
      "filename": "gdb/gdbsupport/gdb_wait.c",
      "status": "added",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbsupport/gdb_wait.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbsupport/gdb_wait.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/gdb_wait.c?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -0,0 +1,83 @@\n+/* Support code for standard wait macros in gdb_wait.h.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"common-defs.h\"\n+\n+#ifdef __MINGW32__\n+\n+/* The underlying idea is that when a Windows program is terminated by\n+   a fatal exception, its exit code is the value of that exception, as\n+   defined by the various EXCEPTION_* symbols in the Windows API\n+   headers.  We thus emulate WTERMSIG etc. by translating the fatal\n+   exception codes to more-or-less equivalent Posix signals.\n+\n+   The translation below is not perfect, because a program could\n+   legitimately exit normally with a status whose value happens to\n+   have the high bits set, but that's extremely rare, to say the\n+   least, and it is deemed such a negligibly small probability of\n+   false positives is justified by the utility of reporting the\n+   terminating signal in the \"normal\" cases.  */\n+\n+# include \"gdb/signals.h\"\t/* for enum gdb_signal */\n+\n+# define WIN32_LEAN_AND_MEAN\n+# include <windows.h>\t\t/* for EXCEPTION_* constants */\n+\n+struct xlate_status\n+{\n+  /* The exit status (actually, fatal exception code).  */\n+  DWORD status;\n+\n+  /* The corresponding signal value.  */\n+  int sig;\n+};\n+\n+int\n+windows_status_to_termsig (unsigned long status)\n+{\n+  static const xlate_status status_xlate_tbl[] =\n+    {\n+     {EXCEPTION_ACCESS_VIOLATION,\t  SIGSEGV},\n+     {EXCEPTION_IN_PAGE_ERROR,\t\t  SIGSEGV},\n+     {EXCEPTION_INVALID_HANDLE,\t\t  SIGSEGV},\n+     {EXCEPTION_ILLEGAL_INSTRUCTION,\t  SIGILL},\n+     {EXCEPTION_NONCONTINUABLE_EXCEPTION, SIGILL},\n+     {EXCEPTION_ARRAY_BOUNDS_EXCEEDED,\t  SIGSEGV},\n+     {EXCEPTION_FLT_DENORMAL_OPERAND,\t  SIGFPE},\n+     {EXCEPTION_FLT_DIVIDE_BY_ZERO,\t  SIGFPE},\n+     {EXCEPTION_FLT_INEXACT_RESULT,\t  SIGFPE},\n+     {EXCEPTION_FLT_INVALID_OPERATION,\t  SIGFPE},\n+     {EXCEPTION_FLT_OVERFLOW,\t\t  SIGFPE},\n+     {EXCEPTION_FLT_STACK_CHECK,\t  SIGFPE},\n+     {EXCEPTION_FLT_UNDERFLOW,\t\t  SIGFPE},\n+     {EXCEPTION_INT_DIVIDE_BY_ZERO,\t  SIGFPE},\n+     {EXCEPTION_INT_OVERFLOW,\t\t  SIGFPE},\n+     {EXCEPTION_PRIV_INSTRUCTION,\t  SIGILL},\n+     {EXCEPTION_STACK_OVERFLOW,\t\t  SIGSEGV},\n+     {CONTROL_C_EXIT,\t\t\t  SIGTERM}\n+    };\n+\n+  for (const xlate_status &x : status_xlate_tbl)\n+    if (x.status == status)\n+      return x.sig;\n+\n+  return -1;\n+}\n+\n+#endif\t/* __MINGW32__ */"
    },
    {
      "sha": "3563b9cb954cfd3fafcdd668a7c50a6283fb15d8",
      "filename": "gdb/gdbsupport/gdb_wait.h",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbsupport/gdb_wait.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/gdbsupport/gdb_wait.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/gdb_wait.h?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -38,20 +38,33 @@\n    in POSIX.1.  We fail to define WNOHANG and WUNTRACED, which POSIX.1\n    <sys/wait.h> defines, since our code does not use waitpid() (but\n    NOTE exception for GNU/Linux below).  We also fail to declare\n-   wait() and waitpid().  */\n+   wait() and waitpid().\n+\n+   For MinGW, we use the fact that when a Windows program is\n+   terminated by a fatal exception, its exit code is the value of that\n+   exception, as defined by the various EXCEPTION_* symbols in the\n+   Windows API headers.  See also gdb_wait.c.  */\n \n #ifndef\tWIFEXITED\n-#define WIFEXITED(w)\t(((w)&0377) == 0)\n+# ifdef __MINGW32__\n+#  define WIFEXITED(w)\t(((w) & 0xC0000000) == 0)\n+# else\n+#  define WIFEXITED(w)\t(((w)&0377) == 0)\n+# endif\n #endif\n \n #ifndef\tWIFSIGNALED\n-#define WIFSIGNALED(w)\t(((w)&0377) != 0177 && ((w)&~0377) == 0)\n+# ifdef __MINGW32__\n+#  define WIFSIGNALED(w)\t(((w) & 0xC0000000) == 0xC0000000)\n+# else\n+#  define WIFSIGNALED(w)\t(((w)&0377) != 0177 && ((w)&~0377) == 0)\n+# endif\n #endif\n \n #ifndef\tWIFSTOPPED\n #ifdef IBM6000\n \n-/* Unfortunately, the above comment (about being compatible in all Unix \n+/* Unfortunately, the above comment (about being compatible in all Unix\n    systems) is not quite correct for AIX, sigh.  And AIX 3.2 can generate\n    status words like 0x57c (sigtrap received after load), and gdb would\n    choke on it.  */\n@@ -64,11 +77,20 @@\n #endif\n \n #ifndef\tWEXITSTATUS\n-#define WEXITSTATUS(w)\t(((w) >> 8) & 0377) /* same as WRETCODE */\n+# ifdef __MINGW32__\n+#  define WEXITSTATUS(w)\t((w) & ~0xC0000000)\n+# else\n+#  define WEXITSTATUS(w)\t(((w) >> 8) & 0377) /* same as WRETCODE */\n+# endif\n #endif\n \n #ifndef\tWTERMSIG\n-#define WTERMSIG(w)\t((w) & 0177)\n+# ifdef __MINGW32__\n+extern int windows_status_to_termsig (unsigned long);\n+#  define WTERMSIG(w)\twindows_status_to_termsig (w)\n+# else\n+#  define WTERMSIG(w)\t((w) & 0177)\n+# endif\n #endif\n \n #ifndef\tWSTOPSIG"
    },
    {
      "sha": "36a47f7cdbc28be0e4791a9e40795580a572166f",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -68,6 +68,7 @@\n #include \"inf-child.h\"\n #include \"gdbsupport/gdb_tilde_expand.h\"\n #include \"gdbsupport/pathstuff.h\"\n+#include \"gdbsupport/gdb_wait.h\"\n \n #define AdjustTokenPrivileges\t\tdyn_AdjustTokenPrivileges\n #define DebugActiveProcessStop\t\tdyn_DebugActiveProcessStop\n@@ -1627,8 +1628,23 @@ get_windows_debug_event (struct target_ops *ops,\n \t  windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n \t\t\t\t\t current_event.dwThreadId),\n \t\t\t\t 0, true /* main_thread_p */);\n-\t  ourstatus->kind = TARGET_WAITKIND_EXITED;\n-\t  ourstatus->value.integer = current_event.u.ExitProcess.dwExitCode;\n+\t  DWORD exit_status = current_event.u.ExitProcess.dwExitCode;\n+\t  /* If the exit status looks like a fatal exception, but we\n+\t     don't recognize the exception's code, make the original\n+\t     exit status value available, to avoid losing\n+\t     information.  */\n+\t  int exit_signal\n+\t    = WIFSIGNALED (exit_status) ? WTERMSIG (exit_status) : -1;\n+\t  if (exit_signal == -1)\n+\t    {\n+\t      ourstatus->kind = TARGET_WAITKIND_EXITED;\n+\t      ourstatus->value.integer = exit_status;\n+\t    }\n+\t  else\n+\t    {\n+\t      ourstatus->kind = TARGET_WAITKIND_SIGNALLED;\n+\t      ourstatus->value.sig = gdb_signal_from_host (exit_signal);\n+\t    }\n \t  thread_id = current_event.dwThreadId;\n \t}\n       break;"
    },
    {
      "sha": "58f8838b885d20fdd01b24dadbc82bfa1b4c7714",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 130,
      "deletions": 0,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/559e7e5056e0671f2f248e1f9c2af849bfe3e64b/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=559e7e5056e0671f2f248e1f9c2af849bfe3e64b",
      "patch": "@@ -35,6 +35,57 @@\n #include \"solib-target.h\"\n #include \"gdbcore.h\"\n \n+/* Windows signal numbers differ between MinGW flavors and between\n+   those and Cygwin.  The below enumeration was gleaned from the\n+   respective headers; the ones marked with MinGW64/Cygwin are defined\n+   only by MinGW64 and Cygwin, not by mingw.org's MinGW.  FIXME: We\n+   should really have distinct MinGW vs Cygwin OSABIs, and two\n+   separate enums, selected at runtime.  */\n+\n+enum\n+  {\n+   WINDOWS_SIGHUP = 1,\t/* MinGW64/Cygwin */\n+   WINDOWS_SIGINT = 2,\n+   WINDOWS_SIGQUIT = 3,\t/* MinGW64/Cygwin */\n+   WINDOWS_SIGILL = 4,\n+   WINDOWS_SIGTRAP = 5,\t/* MinGW64/Cygwin */\n+#ifdef __CYGWIN__\n+   WINDOWS_SGABRT = 6,\n+#else\n+   WINDOWS_SIGIOT = 6,\t/* MinGW64 */\n+#endif\n+   WINDOWS_SIGEMT = 7,\t/* MinGW64/Cygwin */\n+   WINDOWS_SIGFPE = 8,\n+   WINDOWS_SIGKILL = 9,\t/* MinGW64/Cygwin */\n+   WINDOWS_SIGBUS = 10,\t/* MinGW64/Cygwin */\n+   WINDOWS_SIGSEGV = 11,\n+   WINDOWS_SIGSYS = 12,\t/* MinGW64/Cygwin */\n+   WINDOWS_SIGPIPE = 13,/* MinGW64/Cygwin */\n+   WINDOWS_SIGALRM = 14,/* MinGW64/Cygwin */\n+   WINDOWS_SIGTERM = 15,\n+#ifdef __CYGWIN__\n+   WINDOWS_SIGURG = 16,\n+   WINDOWS_SIGSTOP = 17,\n+   WINDOWS_SIGTSTP = 18,\n+   WINDOWS_SIGCONT = 19,\n+   WINDOWS_SIGCHLD = 20,\n+   WINDOWS_SIGTTIN = 21,\n+   WINDOWS_SIGTTOU = 22,\n+   WINDOWS_SIGIO = 23,\n+   WINDOWS_SIGXCPU = 24,\n+   WINDOWS_SIGXFSZ = 25,\n+   WINDOWS_SIGVTALRM = 26,\n+   WINDOWS_SIGPROF = 27,\n+   WINDOWS_SIGWINCH = 28,\n+   WINDOWS_SIGLOST = 29,\n+   WINDOWS_SIGUSR1 = 30,\n+   WINDOWS_SIGUSR2 = 31\n+#else\n+   WINDOWS_SIGBREAK = 21,\n+   WINDOWS_SIGABRT = 22\n+#endif\n+  };\n+\n struct cmd_list_element *info_w32_cmdlist;\n \n typedef struct thread_information_block_32\n@@ -461,6 +512,83 @@ init_w32_command_list (void)\n     }\n }\n \n+/* Implementation of `gdbarch_gdb_signal_to_target'.  */\n+\n+static int\n+windows_gdb_signal_to_target (struct gdbarch *gdbarch, enum gdb_signal signal)\n+{\n+  switch (signal)\n+    {\n+    case GDB_SIGNAL_0:\n+      return 0;\n+    case GDB_SIGNAL_HUP:\n+      return WINDOWS_SIGHUP;\n+    case GDB_SIGNAL_INT:\n+      return WINDOWS_SIGINT;\n+    case GDB_SIGNAL_QUIT:\n+      return WINDOWS_SIGQUIT;\n+    case GDB_SIGNAL_ILL:\n+      return WINDOWS_SIGILL;\n+    case GDB_SIGNAL_TRAP:\n+      return WINDOWS_SIGTRAP;\n+    case GDB_SIGNAL_ABRT:\n+      return WINDOWS_SIGABRT;\n+    case GDB_SIGNAL_EMT:\n+      return WINDOWS_SIGEMT;\n+    case GDB_SIGNAL_FPE:\n+      return WINDOWS_SIGFPE;\n+    case GDB_SIGNAL_KILL:\n+      return WINDOWS_SIGKILL;\n+    case GDB_SIGNAL_BUS:\n+      return WINDOWS_SIGBUS;\n+    case GDB_SIGNAL_SEGV:\n+      return WINDOWS_SIGSEGV;\n+    case GDB_SIGNAL_SYS:\n+      return WINDOWS_SIGSYS;\n+    case GDB_SIGNAL_PIPE:\n+      return WINDOWS_SIGPIPE;\n+    case GDB_SIGNAL_ALRM:\n+      return WINDOWS_SIGALRM;\n+    case GDB_SIGNAL_TERM:\n+      return WINDOWS_SIGTERM;\n+#ifdef __CYGWIN__\n+    case GDB_SIGNAL_URG:\n+      return WINDOWS_SIGURG;\n+    case GDB_SIGNAL_STOP:\n+      return WINDOWS_SIGSTOP;\n+    case GDB_SIGNAL_TSTP:\n+      return WINDOWS_SIGTSTP;\n+    case GDB_SIGNAL_CONT:\n+      return WINDOWS_SIGCONT;\n+    case GDB_SIGNAL_CHLD:\n+      return WINDOWS_SIGCHLD;\n+    case GDB_SIGNAL_TTIN:\n+      return WINDOWS_SIGTTIN;\n+    case GDB_SIGNAL_TTOU:\n+      return WINDOWS_SIGTTOU;\n+    case GDB_SIGNAL_IO:\n+      return WINDOWS_SIGIO;\n+    case GDB_SIGNAL_XCPU:\n+      return WINDOWS_SIGXCPU;\n+    case GDB_SIGNAL_XFSZ:\n+      return WINDOWS_SIGXFSZ;\n+    case GDB_SIGNAL_VTALRM:\n+      return WINDOWS_SIGVTALRM;\n+    case GDB_SIGNAL_PROF:\n+      return WINDOWS_SIGPROF;\n+    case GDB_SIGNAL_WINCH:\n+      return WINDOWS_SIGWINCH;\n+    case GDB_SIGNAL_PWR:\n+      return WINDOWS_SIGLOST;\n+    case GDB_SIGNAL_USR1:\n+      return WINDOWS_SIGUSR1;\n+    case GDB_SIGNAL_USR2:\n+      return WINDOWS_SIGUSR2;\n+#endif\t/* __CYGWIN__ */\n+    }\n+  return -1;\n+}\n+\n /* To be called from the various GDB_OSABI_CYGWIN handlers for the\n    various Windows architectures and machine types.  */\n \n@@ -477,6 +605,8 @@ windows_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_iterate_over_objfiles_in_search_order\n     (gdbarch, windows_iterate_over_objfiles_in_search_order);\n \n+  set_gdbarch_gdb_signal_to_target (gdbarch, windows_gdb_signal_to_target);\n+\n   set_solib_ops (gdbarch, &solib_target_so_ops);\n }\n "
    }
  ]
}