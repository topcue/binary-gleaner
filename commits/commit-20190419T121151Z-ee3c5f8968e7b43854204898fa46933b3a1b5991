{
  "sha": "ee3c5f8968e7b43854204898fa46933b3a1b5991",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWUzYzVmODk2OGU3YjQzODU0MjA0ODk4ZmE0NjkzM2IzYTFiNTk5MQ==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-04-13T08:22:41Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-04-19T12:11:51Z"
    },
    "message": "Fix GDB crash when registers cannot be modified.\n\nThis crash was detected when using GDB with the valgrind gdbserver.\nTo reproduce:\n\nvalgrind sleep 10000\n\nIn another window:\ngdb\ntarget remote | vgdb\np printf(\"make sleep print something\\n\")\n=>\nterminate called after throwing an instance of 'gdb_exception_error'\nAborted\n\nThe problem is that the valgrind gdbserver does not allow to change\nregisters when the inferior is blocked in a system call.\nGDB then raises an exception.  The exception causes the destructor\nof\n typedef std::unique_ptr<infcall_suspend_state, infcall_suspend_state_deleter>\n    infcall_suspend_state_up;\nto be called.  This destructor itself tries to restore the value of\nthe registers, and fails similarly.  We must catch the exception in\nthe destructor to avoid crashing GDB.\nIf the destructor encounters a problem, no warning is produced if\nthere is an uncaught exception, as in this case, the user will already\nbe informed of a problem via this exception.\n\nWith this change, no crash anymore, and all the valgrind 3.15 tests\npass succesfully.\n\ngdb/ChangeLog\n2019-04-19  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* inferior.h (struct infcall_suspend_state_deleter):\n\tCatch exception in destructor to avoid crash.",
    "tree": {
      "sha": "59b78218902b3c266b13401735161727c92d74dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/59b78218902b3c266b13401735161727c92d74dc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ee3c5f8968e7b43854204898fa46933b3a1b5991",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee3c5f8968e7b43854204898fa46933b3a1b5991",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ee3c5f8968e7b43854204898fa46933b3a1b5991",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee3c5f8968e7b43854204898fa46933b3a1b5991/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d563b953142db796f61425a1a300f0feddcdcd55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d563b953142db796f61425a1a300f0feddcdcd55",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d563b953142db796f61425a1a300f0feddcdcd55"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 12,
    "deletions": 1
  },
  "files": [
    {
      "sha": "9e0e3b30e882b061d42deb291d926acca552e3a6",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee3c5f8968e7b43854204898fa46933b3a1b5991/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee3c5f8968e7b43854204898fa46933b3a1b5991/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=ee3c5f8968e7b43854204898fa46933b3a1b5991",
      "patch": "@@ -68,7 +68,18 @@ struct infcall_suspend_state_deleter\n {\n   void operator() (struct infcall_suspend_state *state) const\n   {\n-    restore_infcall_suspend_state (state);\n+    try\n+      {\n+\trestore_infcall_suspend_state (state);\n+      }\n+    catch (const gdb_exception_error &e)\n+      {\n+\t/* If we are restoring the inferior state due to an exception,\n+\t   some error message will be printed.  So, only warn the user\n+\t   when we cannot restore during normal execution.  */\n+\tif (!std::uncaught_exception ())\n+\t  warning (_(\"Failed to restore inferior state: %s\"), e.what ());\n+      }\n   }\n };\n "
    }
  ]
}