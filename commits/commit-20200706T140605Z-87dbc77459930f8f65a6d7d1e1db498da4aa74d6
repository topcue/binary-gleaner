{
  "sha": "87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODdkYmM3NzQ1OTkzMGY4ZjY1YTZkN2QxZTFkYjQ5OGRhNGFhNzRkNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-07T22:07:52Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-06T14:06:05Z"
    },
    "message": "gdb/python: Add architecture method to gdb.PendingFrame\n\nIt could be useful to determine the architecture of a frame being\nunwound during the frame unwind process, that is, before we have a\ngdb.Frame, but when we only have a gdb.PendingFrame.\n\nThe PendingFrame already has a pointer to the gdbarch internally, this\ncommit just exposes an 'architecture' method to Python, and has this\nreturn a gdb.Architecture object (list gdb.Frame.architecture does).\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention new Python API method.\n\t* python/py-unwind.c (pending_framepy_architecture): New function.\n\t(pending_frame_object_methods): Add architecture method.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-unwind.py (TestUnwinder::__call__): Add test for\n\tgdb.PendingFrame.architecture method.\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Unwinding Frames in Python): Document\n\tPendingFrame.architecture method.",
    "tree": {
      "sha": "df54e9f4653014f2558bdecaad050f1b0da24dc1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/df54e9f4653014f2558bdecaad050f1b0da24dc1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3bc98c0c832f5bdca364e083f92be687dbf494cc"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 54,
    "deletions": 1
  },
  "files": [
    {
      "sha": "1fac9a516faab3493777abc39b321dc7d7c9a37a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention new Python API method.\n+\t* python/py-unwind.c (pending_framepy_architecture): New function.\n+\t(pending_frame_object_methods): Add architecture method.\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdbarch.c: Regenerate."
    },
    {
      "sha": "29db0734f87451b20b3aafe040ea67d6dc0793fc",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -117,6 +117,9 @@ GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*\n   ** Commands written in Python can be in the \"TUI\" help class by\n      registering with the new constant gdb.COMMAND_TUI.\n \n+  ** New method gdb.PendingFrame.architecture () to retrieve the\n+     architecture of the pending frame.\n+\n *** Changes in GDB 9\n \n * 'thread-exited' event is now available in the annotations interface."
    },
    {
      "sha": "82ed257fb8401bf62c484e587c1cf4561e9912d1",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texi (Unwinding Frames in Python): Document\n+\tPendingFrame.architecture method.\n+\n 2020-06-26  Eli Zaretskii  <eliz@gnu.org>\n \n \t* gdb.texinfo (Shell Commands): More accurate description of use"
    },
    {
      "sha": "fff7e5b0128af1540f07cff1fd829a997224f6b2",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -2518,6 +2518,12 @@ Each attribute value should be an instance of @code{gdb.Value}.\n \n @end defun\n \n+@defun PendingFrame.architecture ()\n+Return the @code{gdb.Architecture} (@pxref{Architectures In Python})\n+for this @code{gdb.PendingFrame}.  This represents the architecture of\n+the particular frame being unwound.\n+@end defun\n+\n @subheading Unwinder Output: UnwindInfo\n \n Use @code{PendingFrame.create_unwind_info} method described above to"
    },
    {
      "sha": "1cef491cedf5b7495ee9d4a15c1d61789cc67d6f",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -441,6 +441,22 @@ pending_framepy_create_unwind_info (PyObject *self, PyObject *args)\n                                     frame_id_build_special (sp, pc, special));\n }\n \n+/* Implementation of PendingFrame.architecture (self) -> gdb.Architecture.  */\n+\n+static PyObject *\n+pending_framepy_architecture (PyObject *self, PyObject *args)\n+{\n+  pending_frame_object *pending_frame = (pending_frame_object *) self;\n+\n+  if (pending_frame->frame_info == NULL)\n+    {\n+      PyErr_SetString (PyExc_ValueError,\n+                       \"Attempting to read register from stale PendingFrame\");\n+      return NULL;\n+    }\n+  return gdbarch_to_arch_object (pending_frame->gdbarch);\n+}\n+\n /* frame_unwind.this_id method.  */\n \n static void\n@@ -671,6 +687,10 @@ static PyMethodDef pending_frame_object_methods[] =\n     \"create_unwind_info (FRAME_ID) -> gdb.UnwindInfo\\n\"\n     \"Construct UnwindInfo for this PendingFrame, using FRAME_ID\\n\"\n     \"to identify it.\" },\n+  { \"architecture\",\n+    pending_framepy_architecture, METH_NOARGS,\n+    \"architecture () -> gdb.Architecture\\n\"\n+    \"The architecture for this PendingFrame.\" },\n   {NULL}  /* Sentinel */\n };\n "
    },
    {
      "sha": "bf5b89bd0f787dc03eb3543cd52cc3e47e2936ff",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-unwind.py (TestUnwinder::__call__): Add test for\n+\tgdb.PendingFrame.architecture method.\n+\n 2020-07-06  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.dwarf2/dw2-ranges-base.exp: Test line-table order."
    },
    {
      "sha": "d01da80f25ba509975cc64abbc756c7d88199e84",
      "filename": "gdb/testsuite/gdb.python/py-unwind.py",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/testsuite/gdb.python/py-unwind.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87dbc77459930f8f65a6d7d1e1db498da4aa74d6/gdb/testsuite/gdb.python/py-unwind.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-unwind.py?ref=87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "patch": "@@ -30,7 +30,6 @@ def sp(self):\n     def pc(self):\n         return self._pc\n \n-\n class TestUnwinder(Unwinder):\n     AMD64_RBP = 6\n     AMD64_RSP = 7\n@@ -69,6 +68,15 @@ def __call__(self, pending_frame):\n         This unwinder recognizes the corrupt frames by checking that\n         *RBP == RBP, and restores previous RBP from the word above it.\n         \"\"\"\n+\n+        # Check that we can access the architecture of the pending\n+        # frame, and that this is the same architecture as for the\n+        # currently selected inferior.\n+        inf_arch = gdb.selected_inferior ().architecture ()\n+        frame_arch = pending_frame.architecture ()\n+        if (inf_arch != frame_arch):\n+            raise gdb.GdbError (\"architecture mismatch\")\n+\n         try:\n             # NOTE: the registers in Unwinder API can be referenced\n             # either by name or by number. The code below uses both"
    }
  ]
}