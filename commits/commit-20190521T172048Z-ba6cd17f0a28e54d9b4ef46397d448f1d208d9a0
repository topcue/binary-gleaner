{
  "sha": "ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmE2Y2QxN2YwYTI4ZTU0ZDliNGVmNDYzOTdkNDQ4ZjFkMjA4ZDlhMA==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-21T17:20:48Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-21T17:20:48Z"
    },
    "message": "[binutils, ARM] <spec_reg> changes for VMRS and VMSR instructions\n\nThis patch makes changes to the <spec_reg> operand for VMRS and VMSR\ninstructions as per the Armv8.1-M Mainline.\nNew <spec_reg> options to support are:\n\n0b0010: FPSCR_nzcvqc, access to FPSCR condition and saturation flags.\n0b1100: VPR, privileged only access to the VPR register.\n0b1101: P0, access to VPR.P0 predicate fields\n0b1110: FPCXT_NS, enables saving and restoring of Non-secure floating\npoint context.\n0b1111: FPCXT_S, enables saving and restoring of Secure floating point\ncontext\n\n*** gas/ChangeLog ***\n\n2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-arm.c (parse_operands): Update case OP_RVC to\n\tparse p0 and P0.\n\t(do_vmrs): Add checks for valid operands with respect to\n\tcpu and fpu options.\n\t(do_vmsr): Likewise.\n\t(reg_names): New reg_names for FPSCR_nzcvqc, VPR, FPCXT_NS\n\tand FPCXT_S.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg.d: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg.s: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad1.d: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad2.d: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad3.d: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad1.l: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad2.l: New.\n\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad3.l: New.\n\t* testsuite/gas/arm/vfp1xD.d: Updated to allow new valid values.\n\t* testsuite/gas/arm/vfp1xD_t2.d: Likewise.\n\n*** opcodes/ChangeLog ***\n\n2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm-dis.c (coprocessor_opcodes): New instructions for VMRS\n\tand VMSR with the new operands.",
    "tree": {
      "sha": "18c44358148197dc435b153c1b6f730135971ee3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/18c44358148197dc435b153c1b6f730135971ee3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea"
    }
  ],
  "stats": {
    "total": 239,
    "additions": 220,
    "deletions": 19
  },
  "files": [
    {
      "sha": "8b100367d11d4569d9704d91b9c59b08e2841b51",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -1,3 +1,23 @@\n+2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-arm.c (parse_operands): Update case OP_RVC to\n+\tparse p0 and P0.\n+\t(do_vmrs): Add checks for valid operands with respect to\n+\tcpu and fpu options.\n+\t(do_vmsr): Likewise.\n+\t(reg_names): New reg_names for FPSCR_nzcvqc, VPR, FPCXT_NS\n+\tand FPCXT_S.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg.d: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg.s: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad1.d: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad2.d: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad3.d: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad1.l: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad2.l: New.\n+\t* testsuite/gas/arm/armv8_1-m-spec-reg-bad3.l: New.\n+\t* testsuite/gas/arm/vfp1xD.d: Updated to allow new valid values.\n+\t* testsuite/gas/arm/vfp1xD_t2.d: Likewise.\n+\n 2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/tc-arm.c (TOGGLE_BIT): New."
    },
    {
      "sha": "679361d951e27853f58db5d00cbf7dea8707144e",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 95,
      "deletions": 11,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -7236,7 +7236,20 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  break;\n \t  /* Also accept generic coprocessor regs for unknown registers.  */\n \t  coproc_reg:\n-\t  po_reg_or_fail (REG_TYPE_CN);\n+\t  po_reg_or_goto (REG_TYPE_CN, vpr_po);\n+\t  break;\n+\t  /* Also accept P0 or p0 for VPR.P0.  Since P0 is already an\n+\t     existing register with a value of 0, this seems like the\n+\t     best way to parse P0.  */\n+\t  vpr_po:\n+\t  if (strncasecmp (str, \"P0\", 2) == 0)\n+\t    {\n+\t      str += 2;\n+\t      inst.operands[i].isreg = 1;\n+\t      inst.operands[i].reg = 13;\n+\t    }\n+\t  else\n+\t    goto failure;\n \t  break;\n \tcase OP_RMF:   po_reg_or_fail (REG_TYPE_MVF);\t  break;\n \tcase OP_RMD:   po_reg_or_fail (REG_TYPE_MVD);\t  break;\n@@ -9836,10 +9849,42 @@ do_vmrs (void)\n       return;\n     }\n \n-  /* MVFR2 is only valid at ARMv8-A.  */\n-  if (inst.operands[1].reg == 5)\n-    constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_armv8),\n-\t\t_(BAD_FPU));\n+  switch (inst.operands[1].reg)\n+    {\n+    /* MVFR2 is only valid for Armv8-A.  */\n+    case 5:\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_armv8),\n+\t\t  _(BAD_FPU));\n+      break;\n+\n+    /* Check for new Armv8.1-M Mainline changes to <spec_reg>.  */\n+    case 1: /* fpscr.  */\n+      constraint (!(ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)\n+\t\t    || ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd)),\n+\t\t  _(BAD_FPU));\n+      break;\n+\n+    case 14: /* fpcxt_ns.  */\n+    case 15: /* fpcxt_s.  */\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_v8_1m_main),\n+\t\t  _(\"selected processor does not support instruction\"));\n+      break;\n+\n+    case  2: /* fpscr_nzcvqc.  */\n+    case 12: /* vpr.  */\n+    case 13: /* p0.  */\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_v8_1m_main)\n+\t\t  || (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)\n+\t\t      && !ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd)),\n+\t\t  _(\"selected processor does not support instruction\"));\n+      if (inst.operands[0].reg != 2\n+\t  && !ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\tas_warn (_(\"accessing MVE system register without MVE is UNPREDICTABLE\"));\n+      break;\n+\n+    default:\n+      break;\n+    }\n \n   /* APSR_ sets isvec. All other refs to PC are illegal.  */\n   if (!inst.operands[0].isvec && Rt == REG_PC)\n@@ -9867,10 +9912,42 @@ do_vmsr (void)\n       return;\n     }\n \n-  /* MVFR2 is only valid for ARMv8-A.  */\n-  if (inst.operands[0].reg == 5)\n-    constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_armv8),\n-\t\t_(BAD_FPU));\n+  switch (inst.operands[0].reg)\n+    {\n+    /* MVFR2 is only valid for Armv8-A.  */\n+    case 5:\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_armv8),\n+\t\t  _(BAD_FPU));\n+      break;\n+\n+    /* Check for new Armv8.1-M Mainline changes to <spec_reg>.  */\n+    case  1: /* fpcr.  */\n+      constraint (!(ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)\n+\t\t    || ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd)),\n+\t\t  _(BAD_FPU));\n+      break;\n+\n+    case 14: /* fpcxt_ns.  */\n+    case 15: /* fpcxt_s.  */\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_v8_1m_main),\n+\t\t  _(\"selected processor does not support instruction\"));\n+      break;\n+\n+    case  2: /* fpscr_nzcvqc.  */\n+    case 12: /* vpr.  */\n+    case 13: /* p0.  */\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_v8_1m_main)\n+\t\t  || (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)\n+\t\t      && !ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd)),\n+\t\t  _(\"selected processor does not support instruction\"));\n+      if (inst.operands[0].reg != 2\n+\t  && !ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\tas_warn (_(\"accessing MVE system register without MVE is UNPREDICTABLE\"));\n+      break;\n+\n+    default:\n+      break;\n+    }\n \n   /* If we get through parsing the register name, we just insert the number\n      generated into the instruction without further validation.  */\n@@ -22813,6 +22890,10 @@ static const struct reg_entry reg_names[] =\n   REGDEF(mvfr0,7,VFC), REGDEF(mvfr1,6,VFC),\n   REGDEF(MVFR0,7,VFC), REGDEF(MVFR1,6,VFC),\n   REGDEF(mvfr2,5,VFC), REGDEF(MVFR2,5,VFC),\n+  REGDEF(fpscr_nzcvqc,2,VFC), REGDEF(FPSCR_nzcvqc,2,VFC),\n+  REGDEF(vpr,12,VFC), REGDEF(VPR,12,VFC),\n+  REGDEF(fpcxt_ns,14,VFC), REGDEF(FPCXT_NS,14,VFC),\n+  REGDEF(fpcxt_s,15,VFC), REGDEF(FPCXT_S,15,VFC),\n \n   /* Maverick DSP coprocessor registers.  */\n   REGSET(mvf,MVF),  REGSET(mvd,MVD),  REGSET(mvfx,MVFX),  REGSET(mvdx,MVDX),\n@@ -24440,11 +24521,14 @@ static const struct asm_opcode insns[] =\n \n #undef  ARM_VARIANT\n #define ARM_VARIANT  & fpu_vfp_ext_v1xd  /* VFP V1xD (single precision).  */\n+#undef THUMB_VARIANT\n+#define THUMB_VARIANT  & arm_ext_v6t2\n+ mcCE(vmrs,\tef00a10, 2, (APSR_RR, RVC),   vmrs),\n+ mcCE(vmsr,\tee00a10, 2, (RVC, RR),        vmsr),\n+#undef THUMB_VARIANT\n \n   /* Moves and type conversions.  */\n  cCE(\"fmstat\",\tef1fa10, 0, (),\t\t      noargs),\n- cCE(\"vmrs\",\tef00a10, 2, (APSR_RR, RVC),   vmrs),\n- cCE(\"vmsr\",\tee00a10, 2, (RVC, RR),        vmsr),\n  cCE(\"fsitos\",\teb80ac0, 2, (RVS, RVS),\t      vfp_sp_monadic),\n  cCE(\"fuitos\",\teb80a40, 2, (RVS, RVS),\t      vfp_sp_monadic),\n  cCE(\"ftosis\",\tebd0a40, 2, (RVS, RVS),\t      vfp_sp_monadic),"
    },
    {
      "sha": "a8936142599693f08bc3e1440b0998d327cd15f1",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.d?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid VMSR/VMRS no mve or fp\n+#source: armv8_1-m-spec-reg.s\n+#as: -march=armv8.1-m.main\n+#error_output: armv8_1-m-spec-reg-bad1.l"
    },
    {
      "sha": "0b139ef13583875f88fc41b3bdd00ba337e7f468",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.l",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad1.l?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,9 @@\n+.*: Assembler messages:\n+.*: selected FPU does not support instruction -- `vmrs r0,FPSCR'\n+.*: selected processor does not support instruction -- `vmrs r1,FPSCR_nzcvqc'\n+.*: selected processor does not support instruction -- `vmrs r2,VPR'\n+.*: selected processor does not support instruction -- `vmrs r3,P0'\n+.*: selected FPU does not support instruction -- `vmsr fpscr,r0'\n+.*: selected processor does not support instruction -- `vmsr fpscr_nzcvqc,r1'\n+.*: selected processor does not support instruction -- `vmsr vpr,r2'\n+.*: selected processor does not support instruction -- `vmsr p0,r3'"
    },
    {
      "sha": "a02beea7382984abaa65fe98fead451602b2c01d",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.d?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid VMSR/VMRS no mve\n+#source: armv8_1-m-spec-reg.s\n+#as: -march=armv8.1-m.main+fp\n+#warning_output: armv8_1-m-spec-reg-bad2.l"
    },
    {
      "sha": "d04fe775ccde680049804760960e9ee431eb453e",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.l",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad2.l?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,5 @@\n+.*: Assembler messages:\n+.*: Warning: accessing MVE system register without MVE is UNPREDICTABLE\n+.*: Warning: accessing MVE system register without MVE is UNPREDICTABLE\n+.*: Warning: accessing MVE system register without MVE is UNPREDICTABLE\n+.*: Warning: accessing MVE system register without MVE is UNPREDICTABLE"
    },
    {
      "sha": "1e897884203d92d2bbb2cd44e63677c1ab94af47",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.d?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid VMSR/VMRS Only FPSCR allowed\n+#source: armv8_1-m-spec-reg.s\n+#as: -march=armv6t2 -mfpu=vfpxd\n+#error_output: armv8_1-m-spec-reg-bad3.l"
    },
    {
      "sha": "0f4d3cc6fcedb893fba43a0b7b3c0980618793b3",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.l",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg-bad3.l?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,11 @@\n+.*: Assembler messages:\n+.*: selected processor does not support instruction -- `vmrs r1,FPSCR_nzcvqc'\n+.*: selected processor does not support instruction -- `vmrs r2,VPR'\n+.*: selected processor does not support instruction -- `vmrs r3,P0'\n+.*: selected processor does not support instruction -- `vmrs r4,FPCXT_NS'\n+.*: selected processor does not support instruction -- `vmrs r5,FPCXT_S'\n+.*: selected processor does not support instruction -- `vmsr fpscr_nzcvqc,r1'\n+.*: selected processor does not support instruction -- `vmsr vpr,r2'\n+.*: selected processor does not support instruction -- `vmsr p0,r3'\n+.*: selected processor does not support instruction -- `vmsr fpcxt_ns,r4'\n+.*: selected processor does not support instruction -- `vmsr fpcxt_s,r5'"
    },
    {
      "sha": "35a6e172fadaaf6b241b60550359743c0634b15c",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg.d",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg.d?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,20 @@\n+#name: Valid Armv8.1-M Mainline <spec_reg> change\n+#source: armv8_1-m-spec-reg.s\n+#as: -march=armv8.1-m.main+mve\n+#objdump: -dr --prefix-addresses --show-raw-insn -marmv8.1-m.main\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section .text:\n+0[0-9a-f]+ <[^>]+> eef1 0a10 \tvmrs\tr0, fpscr\n+0[0-9a-f]+ <[^>]+> eef2 1a10 \tvmrs\tr1, fpscr_nzcvqc\n+0[0-9a-f]+ <[^>]+> eefc 2a10 \tvmrs\tr2, vpr\n+0[0-9a-f]+ <[^>]+> eefd 3a10 \tvmrs\tr3, p0\n+0[0-9a-f]+ <[^>]+> eefe 4a10 \tvmrs\tr4, fpcxt_ns\n+0[0-9a-f]+ <[^>]+> eeff 5a10 \tvmrs\tr5, fpcxt_s\n+0[0-9a-f]+ <[^>]+> eee1 0a10 \tvmsr\tfpscr, r0\n+0[0-9a-f]+ <[^>]+> eee2 1a10 \tvmsr\tfpscr_nzcvqc, r1\n+0[0-9a-f]+ <[^>]+> eeec 2a10 \tvmsr\tvpr, r2\n+0[0-9a-f]+ <[^>]+> eeed 3a10 \tvmsr\tp0, r3\n+0[0-9a-f]+ <[^>]+> eeee 4a10 \tvmsr\tfpcxt_ns, r4\n+0[0-9a-f]+ <[^>]+> eeef 5a10 \tvmsr\tfpcxt_s, r5"
    },
    {
      "sha": "37157658b1e69d0f8b9e4f1fa9684449b18cfe95",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-spec-reg.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/armv8_1-m-spec-reg.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-spec-reg.s?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -0,0 +1,15 @@\n+\t.syntax unified\n+func:\n+\tvmrs r0, FPSCR\n+\tvmrs r1, FPSCR_nzcvqc\n+\tvmrs r2, VPR\n+\tvmrs r3, P0\n+\tvmrs r4, FPCXT_NS\n+\tvmrs r5, FPCXT_S\n+\n+\tvmsr fpscr, r0\n+\tvmsr fpscr_nzcvqc, r1\n+\tvmsr vpr, r2\n+\tvmsr p0, r3\n+\tvmsr fpcxt_ns, r4\n+\tvmsr fpcxt_s, r5"
    },
    {
      "sha": "079f7a17e597c7155a844e39b9837fad93e877d5",
      "filename": "gas/testsuite/gas/arm/vfp1xD.d",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/vfp1xD.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/vfp1xD.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/vfp1xD.d?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -243,12 +243,12 @@ Disassembly of section .text:\n 0+3a4 <[^>]*> eefa0a10 \t(vmrs|fmrx)\tr0, fpinst2\t@ Impl def\n 0+3a8 <[^>]*> eef70a10 \t(vmrs|fmrx)\tr0, mvfr0\n 0+3ac <[^>]*> eef60a10 \t(vmrs|fmrx)\tr0, mvfr1\n-0+3b0 <[^>]*> eefc0a10 \t(vmrs|fmrx)\tr0, <impl def 0xc>\n+0+3b0 <[^>]*> eefc0a10 \t(vmrs|fmrx)\tr0, (vpr|<impl def 0xc>)\n 0+3b4 <[^>]*> eee90a10 \t(vmsr|fmxr)\tfpinst, r0\t@ Impl def\n 0+3b8 <[^>]*> eeea0a10 \t(vmsr|fmxr)\tfpinst2, r0\t@ Impl def\n 0+3bc <[^>]*> eee70a10 \t(vmsr|fmxr)\tmvfr0, r0\n 0+3c0 <[^>]*> eee60a10 \t(vmsr|fmxr)\tmvfr1, r0\n-0+3c4 <[^>]*> eeec0a10 \t(vmsr|fmxr)\t<impl def 0xc>, r0\n+0+3c4 <[^>]*> eeec0a10 \t(vmsr|fmxr)\t(vpr|<impl def 0xc>), r0\n 0+3c8 <[^>]*> eef10a10 \tvmrs\tr0, fpscr\n 0+3cc <[^>]*> eef11a10 \tvmrs\tr1, fpscr\n 0+3d0 <[^>]*> eef12a10 \tvmrs\tr2, fpscr\n@@ -282,14 +282,14 @@ Disassembly of section .text:\n 0+440 <[^>]*> eee82a10 \tvmsr\tfpexc, r2\n 0+444 <[^>]*> eee93a10 \tvmsr\tfpinst, r3\t@ Impl def\n 0+448 <[^>]*> eeea4a10 \tvmsr\tfpinst2, r4\t@ Impl def\n-0+44c <[^>]*> eeef5a10 \tvmsr\t(c15|<impl def 0xf>), r5\n+0+44c <[^>]*> eeef5a10 \tvmsr\t(c15|<impl def 0xf>|fpcxt_s), r5\n 0+450 <[^>]*> eef03a10 \tvmrs\tr3, fpsid\n 0+454 <[^>]*> eef64a10 \tvmrs\tr4, mvfr1\n 0+458 <[^>]*> eef75a10 \tvmrs\tr5, mvfr0\n 0+45c <[^>]*> eef86a10 \tvmrs\tr6, fpexc\n 0+460 <[^>]*> eef97a10 \tvmrs\tr7, fpinst\t@ Impl def\n 0+464 <[^>]*> eefa8a10 \tvmrs\tr8, fpinst2\t@ Impl def\n-0+468 <[^>]*> eeff9a10 \tvmrs\tr9, (c15|<impl def 0xf>)\n+0+468 <[^>]*> eeff9a10 \tvmrs\tr9, (c15|<impl def 0xf>|fpcxt_s)\n 0+46c <[^>]*> e1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n 0+470 <[^>]*> e1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n 0+474 <[^>]*> e1a00000 \tnop\t\t\t; \\(mov r0, r0\\)"
    },
    {
      "sha": "248185d448621e98303a6f8e04d316a395bb0ec7",
      "filename": "gas/testsuite/gas/arm/vfp1xD_t2.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/vfp1xD_t2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/gas/testsuite/gas/arm/vfp1xD_t2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/vfp1xD_t2.d?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -257,12 +257,12 @@ Disassembly of section .text:\n 0+3c0 <[^>]*> eefa 0a10 \t(vmrs|fmrx)\tr0, fpinst2\t@ Impl def\n 0+3c4 <[^>]*> eef7 0a10 \t(vmrs|fmrx)\tr0, mvfr0\n 0+3c8 <[^>]*> eef6 0a10 \t(vmrs|fmrx)\tr0, mvfr1\n-0+3cc <[^>]*> eefc 0a10 \t(vmrs|fmrx)\tr0, <impl def 0xc>\n+0+3cc <[^>]*> eefc 0a10 \t(vmrs|fmrx)\tr0, (<impl def 0xc>|vpr)\n 0+3d0 <[^>]*> eee9 0a10 \t(vmsr|fmxr)\tfpinst, r0\t@ Impl def\n 0+3d4 <[^>]*> eeea 0a10 \t(vmsr|fmxr)\tfpinst2, r0\t@ Impl def\n 0+3d8 <[^>]*> eee7 0a10 \t(vmsr|fmxr)\tmvfr0, r0\n 0+3dc <[^>]*> eee6 0a10 \t(vmsr|fmxr)\tmvfr1, r0\n-0+3e0 <[^>]*> eeec 0a10 \t(vmsr|fmxr)\t<impl def 0xc>, r0\n+0+3e0 <[^>]*> eeec 0a10 \t(vmsr|fmxr)\t(<impl def 0xc>|vpr), r0\n 0+3e4 <[^>]*> bf00      \tnop\n 0+3e6 <[^>]*> bf00      \tnop\n 0+3e8 <[^>]*> bf00      \tnop"
    },
    {
      "sha": "3964e7470cc3632dfc97d9054cef1f5acb9f1bf7",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -1,3 +1,8 @@\n+2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm-dis.c (coprocessor_opcodes): New instructions for VMRS\n+\tand VMSR with the new operands.\n+\n 2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n \n \t* arm-dis.c (enum mve_instructions): New enum"
    },
    {
      "sha": "0503d9365d19633d0dacce367ba4acaf2beb6f6a",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 22,
      "deletions": 2,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=ba6cd17f0a28e54d9b4ef46397d448f1d208d9a0",
      "patch": "@@ -809,8 +809,10 @@ static const struct sopcode32 coprocessor_opcodes[] =\n   /* Floating point coprocessor (VFP) instructions.  */\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n     0x0ee00a10, 0x0fff0fff, \"vmsr%c\\tfpsid, %12-15r\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n+  {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD | FPU_MVE),\n     0x0ee10a10, 0x0fff0fff, \"vmsr%c\\tfpscr, %12-15r\"},\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0x0ee20a10, 0x0fff0fff, \"vmsr%c\\tfpscr_nzcvqc, %12-15r\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n     0x0ee60a10, 0x0fff0fff, \"vmsr%c\\tmvfr1, %12-15r\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n@@ -823,12 +825,22 @@ static const struct sopcode32 coprocessor_opcodes[] =\n     0x0ee90a10, 0x0fff0fff, \"vmsr%c\\tfpinst, %12-15r\\t@ Impl def\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n     0x0eea0a10, 0x0fff0fff, \"vmsr%c\\tfpinst2, %12-15r\\t@ Impl def\"},\n+  {ANY, ARM_FEATURE_COPROC (FPU_MVE),\n+    0x0eec0a10, 0x0fff0fff, \"vmsr%c\\tvpr, %12-15r\"},\n+  {ANY, ARM_FEATURE_COPROC (FPU_MVE),\n+    0x0eed0a10, 0x0fff0fff, \"vmsr%c\\tp0, %12-15r\"},\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0x0eee0a10, 0x0fff0fff, \"vmsr%c\\tfpcxt_ns, %12-15r\"},\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0x0eef0a10, 0x0fff0fff, \"vmsr%c\\tfpcxt_s, %12-15r\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n     0x0ef00a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpsid\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n     0x0ef1fa10, 0x0fffffff, \"vmrs%c\\tAPSR_nzcv, fpscr\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n+  {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD | FPU_MVE),\n     0x0ef10a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpscr\"},\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0x0ef20a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpscr_nzcvqc\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_ARMV8),\n     0x0ef50a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, mvfr2\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n@@ -841,6 +853,14 @@ static const struct sopcode32 coprocessor_opcodes[] =\n     0x0ef90a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpinst\\t@ Impl def\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1xD),\n     0x0efa0a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpinst2\\t@ Impl def\"},\n+  {ANY, ARM_FEATURE_COPROC (FPU_MVE),\n+    0x0efc0a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, vpr\"},\n+  {ANY, ARM_FEATURE_COPROC (FPU_MVE),\n+    0x0efd0a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, p0\"},\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0x0efe0a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpcxt_ns\"},\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0x0eff0a10, 0x0fff0fff, \"vmrs%c\\t%12-15r, fpcxt_s\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1),\n     0x0e000b10, 0x0fd00fff, \"vmov%c.32\\t%z2[%21d], %12-15r\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_V1),"
    }
  ]
}