{
  "sha": "2adab65cc07f07a581d57b05dfbc100952fab748",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmFkYWI2NWNjMDdmMDdhNTgxZDU3YjA1ZGZiYzEwMDk1MmZhYjc0OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T01:14:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T01:24:02Z"
    },
    "message": "Introduce expression::first_opcode\n\nThis adds a new helper method, expression::first_opcode, that extracts\nthe outermost opcode of an expression.  This simplifies some patches\nin the expression rewrite series.\n\nNote that this patch requires the earlier patch to avoid manual\ndissection of OP_TYPE operations.\n\n2020-12-15  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (varobj_create): Use first_opcode.\n\t* value.c (init_if_undefined_command): Use first_opcode.\n\t* typeprint.c (whatis_exp): Use first_opcode.\n\t* tracepoint.c (validate_actionline): Use first_opcode.\n\t(encode_actions_1): Use first_opcode.\n\t* stack.c (return_command): Use first_opcode.\n\t* expression.h (struct expression) <first_opcode>: New method.\n\t* eval.c (parse_and_eval_type): Use first_opcode.\n\t* dtrace-probe.c (dtrace_process_dof_probe): Use first_opcode.",
    "tree": {
      "sha": "cf31db8beca37152fd15d8fc9308350dc3cb0150",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf31db8beca37152fd15d8fc9308350dc3cb0150"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2adab65cc07f07a581d57b05dfbc100952fab748",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2adab65cc07f07a581d57b05dfbc100952fab748",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2adab65cc07f07a581d57b05dfbc100952fab748",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2adab65cc07f07a581d57b05dfbc100952fab748/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ab8280d7dbe01f51929d221621d38450f31895d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ab8280d7dbe01f51929d221621d38450f31895d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ab8280d7dbe01f51929d221621d38450f31895d"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 31,
    "deletions": 11
  },
  "files": [
    {
      "sha": "58075c921bb1073805612049202f8938241d0cad",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -1,3 +1,15 @@\n+2020-12-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (varobj_create): Use first_opcode.\n+\t* value.c (init_if_undefined_command): Use first_opcode.\n+\t* typeprint.c (whatis_exp): Use first_opcode.\n+\t* tracepoint.c (validate_actionline): Use first_opcode.\n+\t(encode_actions_1): Use first_opcode.\n+\t* stack.c (return_command): Use first_opcode.\n+\t* expression.h (struct expression) <first_opcode>: New method.\n+\t* eval.c (parse_and_eval_type): Use first_opcode.\n+\t* dtrace-probe.c (dtrace_process_dof_probe): Use first_opcode.\n+\n 2020-12-15  Tom Tromey  <tom@tromey.com>\n \n \t* f-lang.c (evaluate_subexp_f): Update."
    },
    {
      "sha": "b709390039f4859a81d2959ee47d3b699edac4ee",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -492,7 +492,7 @@ dtrace_process_dof_probe (struct objfile *objfile,\n \t    {\n \t    }\n \n-\t  if (expr != NULL && expr.get ()->elts[0].opcode == OP_TYPE)\n+\t  if (expr != NULL && expr->first_opcode () == OP_TYPE)\n \t    type = value_type (evaluate_type (expr.get ()));\n \n \t  args.emplace_back (type, std::move (type_str), std::move (expr));"
    },
    {
      "sha": "2d088c8818d342e2967af194e3eaa9f911f10a51",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -3104,7 +3104,7 @@ parse_and_eval_type (const char *p, int length)\n   tmp[length + 2] = '0';\n   tmp[length + 3] = '\\0';\n   expression_up expr = parse_expression (tmp);\n-  if (expr->elts[0].opcode != UNOP_CAST)\n+  if (expr->first_opcode () != UNOP_CAST)\n     error (_(\"Internal error in eval_type.\"));\n   return expr->elts[1].type;\n }"
    },
    {
      "sha": "c07111c316f64bd158f15a3cd9658882d9132438",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -91,6 +91,13 @@ struct expression\n \n   void resize (size_t);\n \n+  /* Return the opcode for the outermost sub-expression of this\n+     expression.  */\n+  enum exp_opcode first_opcode () const\n+  {\n+      return elts[0].opcode;\n+  }\n+\n   /* Language it was entered in.  */\n   const struct language_defn *language_defn;\n   /* Architecture it was parsed in.  */"
    },
    {
      "sha": "943b3db08753a0fa4460fa83e87228589750f3b4",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -2770,8 +2770,8 @@ return_command (const char *retval_exp, int from_tty)\n \treturn_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (thisfun));\n       if (return_type == NULL)\n       \t{\n-\t  if (retval_expr->elts[0].opcode != UNOP_CAST\n-\t      && retval_expr->elts[0].opcode != UNOP_CAST_TYPE)\n+\t  if (retval_expr->first_opcode () != UNOP_CAST\n+\t      && retval_expr->first_opcode () != UNOP_CAST_TYPE)\n \t    error (_(\"Return value type not available for selected \"\n \t\t     \"stack frame.\\n\"\n \t\t     \"Please use an explicit cast of the value to return.\"));"
    },
    {
      "sha": "cb2b3b65c33a3bf704b5e9b27d9271325590028c",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -687,7 +687,7 @@ validate_actionline (const char *line, struct breakpoint *b)\n \t      expression_up exp = parse_exp_1 (&p, loc->address,\n \t\t\t\t\t       block_for_pc (loc->address), 1);\n \n-\t      if (exp->elts[0].opcode == OP_VAR_VALUE)\n+\t      if (exp->first_opcode () == OP_VAR_VALUE)\n \t\t{\n \t\t  if (SYMBOL_CLASS (exp->elts[2].symbol) == LOC_CONST)\n \t\t    {\n@@ -1383,7 +1383,7 @@ encode_actions_1 (struct command_line *action,\n \t\t\t\t\t\t   block_for_pc (tloc->address),\n \t\t\t\t\t\t   1);\n \n-\t\t  switch (exp->elts[0].opcode)\n+\t\t  switch (exp->first_opcode ())\n \t\t    {\n \t\t    case OP_REGISTER:\n \t\t      {"
    },
    {
      "sha": "49877710fa424701223b3b369483cbd301e1ad47",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -493,7 +493,7 @@ whatis_exp (const char *exp, int show)\n       val = evaluate_type (expr.get ());\n       type = value_type (val);\n \n-      if (show == -1 && expr->elts[0].opcode == OP_TYPE)\n+      if (show == -1 && expr->first_opcode () == OP_TYPE)\n \t{\n \t  /* The user expression names a type directly.  */\n "
    },
    {
      "sha": "9584fc13c27d4c852abe9eb38935c3a4dd5d0ff3",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -1981,7 +1981,7 @@ init_if_undefined_command (const char* args, int from_tty)\n   /* Validate the expression.\n      Was the expression an assignment?\n      Or even an expression at all?  */\n-  if (expr->nelts == 0 || expr->elts[0].opcode != BINOP_ASSIGN)\n+  if (expr->nelts == 0 || expr->first_opcode () != BINOP_ASSIGN)\n     error (_(\"Init-if-undefined requires an assignment expression.\"));\n \n   /* Extract the variable from the parsed expression."
    },
    {
      "sha": "6a95e1ec0c20f86ebb2bb7ec59aefce0e841f0ec",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2adab65cc07f07a581d57b05dfbc100952fab748/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=2adab65cc07f07a581d57b05dfbc100952fab748",
      "patch": "@@ -311,9 +311,10 @@ varobj_create (const char *objname,\n \t}\n \n       /* Don't allow variables to be created for types.  */\n-      if (var->root->exp->elts[0].opcode == OP_TYPE\n-\t  || var->root->exp->elts[0].opcode == OP_TYPEOF\n-\t  || var->root->exp->elts[0].opcode == OP_DECLTYPE)\n+      enum exp_opcode opcode = var->root->exp->first_opcode ();\n+      if (opcode == OP_TYPE\n+\t  || opcode == OP_TYPEOF\n+\t  || opcode == OP_DECLTYPE)\n \t{\n \t  fprintf_unfiltered (gdb_stderr, \"Attempt to use a type name\"\n \t\t\t      \" as an expression.\\n\");"
    }
  ]
}