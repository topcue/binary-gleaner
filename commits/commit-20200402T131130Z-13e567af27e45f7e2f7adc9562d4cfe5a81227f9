{
  "sha": "13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTNlNTY3YWYyN2U0NWY3ZTJmN2FkYzk1NjJkNGNmZTVhODEyMjdmOQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:30Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:30Z"
    },
    "message": "gdbserver/linux-low: turn 'get_thread_area' into a method\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'get_thread_area' linux target op into a method of\n\tprocess_stratum_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the op.\n\t(class linux_process_target) <stuck_in_jump_pad>\n\t<linux_fast_tracepoint_collecting>\n\t<low_get_thread_area>: Declare.\n\t* linux-low.cc (supports_fast_tracepoints): Remove.\n\t(linux_fast_tracepoint_collecting): Turn into...\n\t(linux_process_target::linux_fast_tracepoint_collecting): ...this.\n\t(linux_process_target::low_get_thread_area): Define.\n\t(stuck_in_jump_pad_callback): Turn into...\n\t(linux_process_target::stuck_in_jump_pad): ...this.\n\n\tUpdate the caller below.\n\n\t(linux_process_target::stabilize_threads)\n\n\t* linux-x86-low.cc (class x86_target) <low_get_thread_area>:\n\tDeclare.\n\t(x86_get_thread_area): Turn into...\n\t(x86_target::low_get_thread_area): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-aarch64-low.cc (class aarch64_target) <low_get_thread_area>:\n\tDeclare.\n\t(aarch64_get_thread_area): Turn into...\n\t(aarch64_target::low_get_thread_area): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ppc-low.cc (class ppc_target) <low_get_thread_area>:\n\tDeclare.\n\t(ppc_get_thread_area): Turn into...\n\t(ppc_target::low_get_thread_area): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-s390-low.cc (class s390_target) <low_get_thread_area>:\n\tDeclare.\n\t(s390_get_thread_area): Turn into...\n\t(s390_target::low_get_thread_area): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-arm-low.cc (the_low_target): Remove the op field.\n\t* linux-bfin-low.cc (the_low_target): Ditto.\n\t* linux-crisv32-low.cc (the_low_target): Ditto.\n\t* linux-m32r-low.cc (the_low_target): Ditto.\n\t* linux-m68k-low.cc (the_low_target): Ditto.\n\t* linux-sh-low.cc (the_low_target): Ditto.\n\t* linux-tic6x-low.cc (the_low_target): Ditto.\n\t* linux-tile-low.cc (the_low_target): Ditto.\n\t* linux-xtensa-low.cc (the_low_target): Ditto.",
    "tree": {
      "sha": "8e20fd88af9941f10c160841960d4ab04378caa5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8e20fd88af9941f10c160841960d4ab04378caa5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "47f70aa7685c0a7fad4ca76964a4199a5b5edd1c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47f70aa7685c0a7fad4ca76964a4199a5b5edd1c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/47f70aa7685c0a7fad4ca76964a4199a5b5edd1c"
    }
  ],
  "stats": {
    "total": 160,
    "additions": 103,
    "deletions": 57
  },
  "files": [
    {
      "sha": "e0c1f20720ee16507c5a4f116fc23339cd7676c4",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -1,3 +1,53 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'get_thread_area' linux target op into a method of\n+\tprocess_stratum_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the op.\n+\t(class linux_process_target) <stuck_in_jump_pad>\n+\t<linux_fast_tracepoint_collecting>\n+\t<low_get_thread_area>: Declare.\n+\t* linux-low.cc (supports_fast_tracepoints): Remove.\n+\t(linux_fast_tracepoint_collecting): Turn into...\n+\t(linux_process_target::linux_fast_tracepoint_collecting): ...this.\n+\t(linux_process_target::low_get_thread_area): Define.\n+\t(stuck_in_jump_pad_callback): Turn into...\n+\t(linux_process_target::stuck_in_jump_pad): ...this.\n+\n+\tUpdate the caller below.\n+\n+\t(linux_process_target::stabilize_threads)\n+\n+\t* linux-x86-low.cc (class x86_target) <low_get_thread_area>:\n+\tDeclare.\n+\t(x86_get_thread_area): Turn into...\n+\t(x86_target::low_get_thread_area): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-aarch64-low.cc (class aarch64_target) <low_get_thread_area>:\n+\tDeclare.\n+\t(aarch64_get_thread_area): Turn into...\n+\t(aarch64_target::low_get_thread_area): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ppc-low.cc (class ppc_target) <low_get_thread_area>:\n+\tDeclare.\n+\t(ppc_get_thread_area): Turn into...\n+\t(ppc_target::low_get_thread_area): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-s390-low.cc (class s390_target) <low_get_thread_area>:\n+\tDeclare.\n+\t(s390_get_thread_area): Turn into...\n+\t(s390_target::low_get_thread_area): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-arm-low.cc (the_low_target): Remove the op field.\n+\t* linux-bfin-low.cc (the_low_target): Ditto.\n+\t* linux-crisv32-low.cc (the_low_target): Ditto.\n+\t* linux-m32r-low.cc (the_low_target): Ditto.\n+\t* linux-m68k-low.cc (the_low_target): Ditto.\n+\t* linux-sh-low.cc (the_low_target): Ditto.\n+\t* linux-tic6x-low.cc (the_low_target): Ditto.\n+\t* linux-tile-low.cc (the_low_target): Ditto.\n+\t* linux-xtensa-low.cc (the_low_target): Ditto.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tRemote the 'supports_tracepoints' linux target op and let the"
    },
    {
      "sha": "c58fb44ec8a689ed4c0fe83eca037c9675b26b23",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -107,6 +107,8 @@ class aarch64_target : public linux_process_target\n   void low_new_fork (process_info *parent, process_info *child) override;\n \n   void low_prepare_to_resume (lwp_info *lwp) override;\n+\n+  int low_get_thread_area (int lwpid, CORE_ADDR *addrp) override;\n };\n \n /* The singleton target ops object.  */\n@@ -731,10 +733,10 @@ aarch64_target::supports_tracepoints ()\n     }\n }\n \n-/* Implementation of linux_target_ops method \"get_thread_area\".  */\n+/* Implementation of linux target ops method \"low_get_thread_area\".  */\n \n-static int\n-aarch64_get_thread_area (int lwpid, CORE_ADDR *addrp)\n+int\n+aarch64_target::low_get_thread_area (int lwpid, CORE_ADDR *addrp)\n {\n   struct iovec iovec;\n   uint64_t reg;\n@@ -3149,7 +3151,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_get_thread_area,\n   aarch64_install_fast_tracepoint_jump_pad,\n   aarch64_emit_ops,\n   aarch64_get_min_fast_tracepoint_insn_len,"
    },
    {
      "sha": "e52341da63a614778313c54044b2ce01e402a6c5",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -1117,7 +1117,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "7a11c5b7b096619b4af86ef23c1955c826b6a9ef",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -171,7 +171,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "1aecd252ce75a202b0ebc0455da6ab17d41838ed",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -468,7 +468,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "7172194610889fc31d23ecedea3c3414929e6cc6",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 20,
      "deletions": 30,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -322,16 +322,6 @@ linux_process_target::low_decr_pc_after_break ()\n   return 0;\n }\n \n-/* Returns true if this target can support fast tracepoints.  This\n-   does not mean that the in-process agent has been loaded in the\n-   inferior.  */\n-\n-static int\n-supports_fast_tracepoints (void)\n-{\n-  return the_low_target.install_fast_tracepoint_jump_pad != NULL;\n-}\n-\n /* True if LWP is stopped in its stepping range.  */\n \n static int\n@@ -1997,29 +1987,29 @@ handle_tracepoints (struct lwp_info *lwp)\n   return 0;\n }\n \n-/* Convenience wrapper.  Returns information about LWP's fast tracepoint\n-   collection status.  */\n-\n-static fast_tpoint_collect_result\n-linux_fast_tracepoint_collecting (struct lwp_info *lwp,\n-\t\t\t\t  struct fast_tpoint_collect_status *status)\n+fast_tpoint_collect_result\n+linux_process_target::linux_fast_tracepoint_collecting\n+  (lwp_info *lwp, fast_tpoint_collect_status *status)\n {\n   CORE_ADDR thread_area;\n   struct thread_info *thread = get_lwp_thread (lwp);\n \n-  if (the_low_target.get_thread_area == NULL)\n-    return fast_tpoint_collect_result::not_collecting;\n-\n   /* Get the thread area address.  This is used to recognize which\n      thread is which when tracing with the in-process agent library.\n      We don't read anything from the address, and treat it as opaque;\n      it's the address itself that we assume is unique per-thread.  */\n-  if ((*the_low_target.get_thread_area) (lwpid_of (thread), &thread_area) == -1)\n+  if (low_get_thread_area (lwpid_of (thread), &thread_area) == -1)\n     return fast_tpoint_collect_result::not_collecting;\n \n   return fast_tracepoint_collecting (thread_area, lwp->stop_pc, status);\n }\n \n+int\n+linux_process_target::low_get_thread_area (int lwpid, CORE_ADDR *addrp)\n+{\n+  return -1;\n+}\n+\n bool\n linux_process_target::maybe_move_out_of_jump_pad (lwp_info *lwp, int *wstat)\n {\n@@ -2834,7 +2824,6 @@ unsuspend_all_lwps (struct lwp_info *except)\n     });\n }\n \n-static bool stuck_in_jump_pad_callback (thread_info *thread);\n static bool lwp_running (thread_info *thread);\n \n /* Stabilize threads (move out of jump pads).\n@@ -2870,7 +2859,10 @@ static bool lwp_running (thread_info *thread);\n void\n linux_process_target::stabilize_threads ()\n {\n-  thread_info *thread_stuck = find_thread (stuck_in_jump_pad_callback);\n+  thread_info *thread_stuck = find_thread ([this] (thread_info *thread)\n+\t\t\t\t{\n+\t\t\t\t  return stuck_in_jump_pad (thread);\n+\t\t\t\t});\n \n   if (thread_stuck != NULL)\n     {\n@@ -2926,7 +2918,10 @@ linux_process_target::stabilize_threads ()\n \n   if (debug_threads)\n     {\n-      thread_stuck = find_thread (stuck_in_jump_pad_callback);\n+      thread_stuck = find_thread ([this] (thread_info *thread)\n+\t\t       {\n+\t\t\t return stuck_in_jump_pad (thread);\n+\t\t       });\n \n       if (thread_stuck != NULL)\n \tdebug_printf (\"couldn't stabilize, LWP %ld got stuck in jump pad\\n\",\n@@ -3949,13 +3944,8 @@ linux_process_target::wait_for_sigstop ()\n     }\n }\n \n-/* Returns true if THREAD is stopped in a jump pad, and we can't\n-   move it out, because we need to report the stop event to GDB.  For\n-   example, if the user puts a breakpoint in the jump pad, it's\n-   because she wants to debug it.  */\n-\n-static bool\n-stuck_in_jump_pad_callback (thread_info *thread)\n+bool\n+linux_process_target::stuck_in_jump_pad (thread_info *thread)\n {\n   struct lwp_info *lwp = get_thread_lwp (thread);\n "
    },
    {
      "sha": "58e5e67c1982e9247f62b82cd65a6355318c0dfe",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -131,10 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  /* Fill ADDRP with the thread area address of LWPID.  Returns 0 on\n-     success, -1 on failure.  */\n-  int (*get_thread_area) (int lwpid, CORE_ADDR *addrp);\n-\n   /* Install a fast tracepoint jump pad.  See target.h for\n      comments.  */\n   int (*install_fast_tracepoint_jump_pad) (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n@@ -624,6 +620,17 @@ class linux_process_target : public process_stratum_target\n   ptid_t filter_exit_event (lwp_info *event_child,\n \t\t\t    target_waitstatus *ourstatus);\n \n+  /* Returns true if THREAD is stopped in a jump pad, and we can't\n+     move it out, because we need to report the stop event to GDB.  For\n+     example, if the user puts a breakpoint in the jump pad, it's\n+     because she wants to debug it.  */\n+  bool stuck_in_jump_pad (thread_info *thread);\n+\n+  /* Convenience wrapper.  Returns information about LWP's fast tracepoint\n+     collection status.  */\n+  fast_tpoint_collect_result linux_fast_tracepoint_collecting\n+    (lwp_info *lwp, fast_tpoint_collect_status *status);\n+\n protected:\n   /* The architecture-specific \"low\" methods are listed below.  */\n \n@@ -710,6 +717,10 @@ class linux_process_target : public process_stratum_target\n   /* Hook to call prior to resuming a thread.  */\n   virtual void low_prepare_to_resume (lwp_info *lwp);\n \n+  /* Fill ADDRP with the thread area address of LWPID.  Returns 0 on\n+     success, -1 on failure.  */\n+  virtual int low_get_thread_area (int lwpid, CORE_ADDR *addrp);\n+\n   /* How many bytes the PC should be decremented after a break.  */\n   virtual int low_decr_pc_after_break ();\n };"
    },
    {
      "sha": "48dadd69f7ec057b294bd29970ebc86461762218",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -161,7 +161,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "acbb6dde1d7e86da334347f6db28c6e2c1165368",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -265,7 +265,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "5935c42a7764f9e8200edb19ee995cbda81a4c01",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -86,6 +86,8 @@ class ppc_target : public linux_process_target\n \n   int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\tint size, raw_breakpoint *bp) override;\n+\n+  int low_get_thread_area (int lwpid, CORE_ADDR *addrp) override;\n };\n \n /* The singleton target ops object.  */\n@@ -1040,8 +1042,8 @@ ppc_target::supports_tracepoints ()\n    don't read anything from the address, and treat it as opaque; it's\n    the address itself that we assume is unique per-thread.  */\n \n-static int\n-ppc_get_thread_area (int lwpid, CORE_ADDR *addr)\n+int\n+ppc_target::low_get_thread_area (int lwpid, CORE_ADDR *addr)\n {\n   struct lwp_info *lwp = find_lwp_pid (ptid_t (lwpid));\n   struct thread_info *thr = get_lwp_thread (lwp);\n@@ -3431,7 +3433,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_get_thread_area,\n   ppc_install_fast_tracepoint_jump_pad,\n   ppc_emit_ops,\n   ppc_get_min_fast_tracepoint_insn_len,"
    },
    {
      "sha": "28a0a8b449f1834f5966ca07212823197b90f23d",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -88,6 +88,8 @@ class s390_target : public linux_process_target\n   int low_decr_pc_after_break () override;\n \n   bool low_breakpoint_at (CORE_ADDR pc) override;\n+\n+  int low_get_thread_area (int lwpid, CORE_ADDR *addrp) override;\n };\n \n /* The singleton target ops object.  */\n@@ -780,10 +782,10 @@ s390_target::supports_tracepoints ()\n   return true;\n }\n \n-/* Implementation of linux_target_ops method \"get_thread_area\".  */\n+/* Implementation of linux target ops method \"low_get_thread_area\".  */\n \n-static int\n-s390_get_thread_area (int lwpid, CORE_ADDR *addrp)\n+int\n+s390_target::low_get_thread_area (int lwpid, CORE_ADDR *addrp)\n {\n   CORE_ADDR res = ptrace (PTRACE_PEEKUSER, lwpid, (long) PT_ACR0, (long) 0);\n #ifdef __s390x__\n@@ -2847,7 +2849,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_get_thread_area,\n   s390_install_fast_tracepoint_jump_pad,\n   s390_emit_ops,\n   s390_get_min_fast_tracepoint_insn_len,"
    },
    {
      "sha": "30a966d5b4f34bb746d8c31f15e0ec92d025d11a",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -192,7 +192,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "f0f9917c6f079c63d24b4a904c7d01da981bbe77",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -423,7 +423,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "d64d63bdeae0840e6dc618973bd908644b6d9394",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -224,7 +224,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    },
    {
      "sha": "664d0d9f19912cf924eebaf6a44f5d540e82cfc3",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -158,6 +158,8 @@ class x86_target : public linux_process_target\n \n   void low_prepare_to_resume (lwp_info *lwp) override;\n \n+  int low_get_thread_area (int lwpid, CORE_ADDR *addrp) override;\n+\n private:\n \n   /* Update all the target description of all processes; a new GDB\n@@ -311,8 +313,8 @@ ps_get_thread_area (struct ps_prochandle *ph,\n    don't read anything from the address, and treat it as opaque; it's\n    the address itself that we assume is unique per-thread.  */\n \n-static int\n-x86_get_thread_area (int lwpid, CORE_ADDR *addr)\n+int\n+x86_target::low_get_thread_area (int lwpid, CORE_ADDR *addr)\n {\n #ifdef __x86_64__\n   int use_64bit = is_64bit_tdesc ();\n@@ -2969,7 +2971,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_get_thread_area,\n   x86_install_fast_tracepoint_jump_pad,\n   x86_emit_ops,\n   x86_get_min_fast_tracepoint_insn_len,"
    },
    {
      "sha": "7bef61ac32994813404027b09497bf654459273f",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e567af27e45f7e2f7adc9562d4cfe5a81227f9/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "patch": "@@ -329,7 +329,6 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_thread_area */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* get_min_fast_tracepoint_insn_len */"
    }
  ]
}