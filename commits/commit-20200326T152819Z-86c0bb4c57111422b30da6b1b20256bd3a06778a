{
  "sha": "86c0bb4c57111422b30da6b1b20256bd3a06778a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODZjMGJiNGM1NzExMTQyMmIzMGRhNmIxYjIwMjU2YmQzYTA2Nzc4YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:19Z"
    },
    "message": "Convert read_indirect_line_string to a method\n\nThis changes read_indirect_line_string to be a method on\ndwarf2_per_objfile.  This makes it a bit simpler to share between\nfiles.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.h (struct dwarf2_per_objfile) <read_line_string>:\n\tDeclare method.\n\t* dwarf2/read.c (read_attribute_value): Update.\n\t(dwarf2_per_objfile::read_line_string): Rename from\n\tread_indirect_line_string.\n\t(read_formatted_entries): Update.",
    "tree": {
      "sha": "f5f8e063e99150eb56000aa93825a3bc1791bbe6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f5f8e063e99150eb56000aa93825a3bc1791bbe6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/86c0bb4c57111422b30da6b1b20256bd3a06778a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86c0bb4c57111422b30da6b1b20256bd3a06778a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/86c0bb4c57111422b30da6b1b20256bd3a06778a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86c0bb4c57111422b30da6b1b20256bd3a06778a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2ef46c2fbbd18c3f411ef294c2c6694a1308a5a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ef46c2fbbd18c3f411ef294c2c6694a1308a5a5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2ef46c2fbbd18c3f411ef294c2c6694a1308a5a5"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 29,
    "deletions": 20
  },
  "files": [
    {
      "sha": "5e25a9befb56bd0e74622f4fb530c1ab789e28d1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86c0bb4c57111422b30da6b1b20256bd3a06778a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86c0bb4c57111422b30da6b1b20256bd3a06778a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=86c0bb4c57111422b30da6b1b20256bd3a06778a",
      "patch": "@@ -1,3 +1,12 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_objfile) <read_line_string>:\n+\tDeclare method.\n+\t* dwarf2/read.c (read_attribute_value): Update.\n+\t(dwarf2_per_objfile::read_line_string): Rename from\n+\tread_indirect_line_string.\n+\t(read_formatted_entries): Update.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/macro.c (dwarf_decode_macro_bytes): Use objfile local"
    },
    {
      "sha": "dbd5b6a48022c4db062e0961ddb924fb7b8c4368",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 20,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86c0bb4c57111422b30da6b1b20256bd3a06778a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86c0bb4c57111422b30da6b1b20256bd3a06778a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=86c0bb4c57111422b30da6b1b20256bd3a06778a",
      "patch": "@@ -1251,10 +1251,6 @@ static const char *read_indirect_string\n   (struct dwarf2_per_objfile *dwarf2_per_objfile, bfd *, const gdb_byte *,\n    const struct comp_unit_head *, unsigned int *);\n \n-static const char *read_indirect_line_string\n-  (struct dwarf2_per_objfile *dwarf2_per_objfile, bfd *, const gdb_byte *,\n-   const struct comp_unit_head *, unsigned int *);\n-\n static const char *read_indirect_string_at_offset\n   (struct dwarf2_per_objfile *dwarf2_per_objfile, LONGEST str_offset);\n \n@@ -18550,9 +18546,9 @@ read_attribute_value (const struct die_reader_specs *reader,\n     case DW_FORM_line_strp:\n       if (!cu->per_cu->is_dwz)\n \t{\n-\t  DW_STRING (attr) = read_indirect_line_string (dwarf2_per_objfile,\n-\t\t\t\t\t\t\tabfd, info_ptr,\n-\t\t\t\t\t\t\tcu_header, &bytes_read);\n+\t  DW_STRING (attr)\n+\t    = dwarf2_per_objfile->read_line_string (info_ptr, cu_header,\n+\t\t\t\t\t\t    &bytes_read);\n \t  DW_STRING_IS_CANONICAL (attr) = 0;\n \t  info_ptr += bytes_read;\n \t  break;\n@@ -18786,21 +18782,17 @@ read_indirect_string (struct dwarf2_per_objfile *dwarf2_per_objfile, bfd *abfd,\n   return read_indirect_string_at_offset (dwarf2_per_objfile, str_offset);\n }\n \n-/* Return pointer to string at .debug_line_str offset as read from BUF.\n-   BUF is assumed to be in a compilation unit described by CU_HEADER.\n-   Return *BYTES_READ_PTR count of bytes read from BUF.  */\n+/* See read.h.  */\n \n-static const char *\n-read_indirect_line_string (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t\t   bfd *abfd, const gdb_byte *buf,\n+const char *\n+dwarf2_per_objfile::read_line_string (const gdb_byte *buf,\n \t\t\t   const struct comp_unit_head *cu_header,\n \t\t\t   unsigned int *bytes_read_ptr)\n {\n+  bfd *abfd = objfile->obfd;\n   LONGEST str_offset = cu_header->read_offset (abfd, buf, bytes_read_ptr);\n \n-  return dwarf2_per_objfile->line_str.read_string (dwarf2_per_objfile->objfile,\n-\t\t\t\t\t\t   str_offset,\n-\t\t\t\t\t\t   \"DW_FORM_line_strp\");\n+  return line_str.read_string (objfile, str_offset, \"DW_FORM_line_strp\");\n }\n \n /* Given index ADDR_INDEX in .debug_addr, fetch the value.\n@@ -19284,10 +19276,10 @@ read_formatted_entries (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t      break;\n \n \t    case DW_FORM_line_strp:\n-\t      string.emplace (read_indirect_line_string (dwarf2_per_objfile,\n-\t\t\t\t\t\t\t abfd, buf,\n-\t\t\t\t\t\t\t cu_header,\n-\t\t\t\t\t\t\t &bytes_read));\n+\t      string.emplace\n+\t\t(dwarf2_per_objfile->read_line_string (buf,\n+\t\t\t\t\t\t       cu_header,\n+\t\t\t\t\t\t       &bytes_read));\n \t      buf += bytes_read;\n \t      break;\n "
    },
    {
      "sha": "039113f87e992c3bb412d2ff3afba66ccdf15997",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86c0bb4c57111422b30da6b1b20256bd3a06778a/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86c0bb4c57111422b30da6b1b20256bd3a06778a/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=86c0bb4c57111422b30da6b1b20256bd3a06778a",
      "patch": "@@ -110,6 +110,14 @@ struct dwarf2_per_objfile\n \n   /* Free all cached compilation units.  */\n   void free_cached_comp_units ();\n+\n+  /* Return pointer to string at .debug_line_str offset as read from BUF.\n+     BUF is assumed to be in a compilation unit described by CU_HEADER.\n+     Return *BYTES_READ_PTR count of bytes read from BUF.  */\n+  const char *read_line_string (const gdb_byte *buf,\n+\t\t\t\tconst struct comp_unit_head *cu_header,\n+\t\t\t\tunsigned int *bytes_read_ptr);\n+\n private:\n   /* This function is mapped across the sections and remembers the\n      offset and size of each of the debugging sections we are"
    }
  ]
}