{
  "sha": "7c043ba695a3cee067554b1e871e60f7934512b4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2MwNDNiYTY5NWEzY2VlMDY3NTU0YjFlODcxZTYwZjc5MzQ1MTJiNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:33Z"
    },
    "message": "Add horizontal splitting to TUI layout\n\nThis changes the TUI layout engine to add horizontal splitting.  Now,\nwindows can be side-by-side.\n\nA horizontal split is defined using the \"-horizontal\" parameter to\n\"tui new-layout\".\n\nThis also adds the first \"winheight\" test to the test suite.  One open\nquestion is whether we want a new \"winwidth\" command, now that\nhorizontal layouts are possible.  This is easily done using the\ngeneric layout code.\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\tPR tui/17850:\n\t* tui/tui-win.c (tui_gen_win_info::max_width): New method.\n\t* tui/tui-layout.h (class tui_layout_base) <get_sizes>: Add\n\t\"height\" argument.\n\t(class tui_layout_window) <get_sizes>: Likewise.\n\t(class tui_layout_split) <tui_layout_split>: Add \"vertical\"\n\targument.\n\t<get_sizes>: Add \"height\" argument.\n\t<m_vertical>: New field.\n\t* tui/tui-layout.c (tui_layout_split::clone): Update.\n\t(tui_layout_split::get_sizes): Add \"height\" argument.\n\t(tui_layout_split::adjust_size, tui_layout_split::apply): Update.\n\t(tui_new_layout_command): Parse \"-horizontal\".\n\t(_initialize_tui_layout): Update help string.\n\t(tui_layout_split::specification): Add \"-horizontal\" when needed.\n\t* tui/tui-layout.c (tui_layout_window::get_sizes): Add \"height\"\n\targument.\n\t* tui/tui-data.h (struct tui_gen_win_info) <max_width, min_width>:\n\tNew methods.\n\ngdb/doc/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\tPR tui/17850:\n\t* gdb.texinfo (TUI Commands): Document horizontal layouts.\n\ngdb/testsuite/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\tPR tui/17850:\n\t* gdb.tui/new-layout.exp: Add horizontal layout and winheight\n\ttests.\n\nChange-Id: I38b35e504f34698578af86686be03c0fefd954ae",
    "tree": {
      "sha": "6943c911cf3ad9ad274ead117e0dd60a2de89858",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6943c911cf3ad9ad274ead117e0dd60a2de89858"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c043ba695a3cee067554b1e871e60f7934512b4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c043ba695a3cee067554b1e871e60f7934512b4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c043ba695a3cee067554b1e871e60f7934512b4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c043ba695a3cee067554b1e871e60f7934512b4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6bc5664858d6869513b9b98861c813675231e5b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bc5664858d6869513b9b98861c813675231e5b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6bc5664858d6869513b9b98861c813675231e5b5"
    }
  ],
  "stats": {
    "total": 270,
    "additions": 207,
    "deletions": 63
  },
  "files": [
    {
      "sha": "83293187444ff6179a32574e2fa0c5a657093055",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -1,3 +1,25 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\tPR tui/17850:\n+\t* tui/tui-win.c (tui_gen_win_info::max_width): New method.\n+\t* tui/tui-layout.h (class tui_layout_base) <get_sizes>: Add\n+\t\"height\" argument.\n+\t(class tui_layout_window) <get_sizes>: Likewise.\n+\t(class tui_layout_split) <tui_layout_split>: Add \"vertical\"\n+\targument.\n+\t<get_sizes>: Add \"height\" argument.\n+\t<m_vertical>: New field.\n+\t* tui/tui-layout.c (tui_layout_split::clone): Update.\n+\t(tui_layout_split::get_sizes): Add \"height\" argument.\n+\t(tui_layout_split::adjust_size, tui_layout_split::apply): Update.\n+\t(tui_new_layout_command): Parse \"-horizontal\".\n+\t(_initialize_tui_layout): Update help string.\n+\t(tui_layout_split::specification): Add \"-horizontal\" when needed.\n+\t* tui/tui-layout.c (tui_layout_window::get_sizes): Add \"height\"\n+\targument.\n+\t* tui/tui-data.h (struct tui_gen_win_info) <max_width, min_width>:\n+\tNew methods.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-layout.h (enum tui_adjust_result): New."
    },
    {
      "sha": "18703247fa61109b11cfe68715208d23096a653c",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -17,6 +17,8 @@\n * The $_siginfo convenience variable now also works on Windows targets,\n   and will display the EXCEPTION_RECORD of the last handled exception.\n \n+* TUI windows can now be arranged horizontally.\n+\n * New commands\n \n set exec-file-mismatch -- Set exec-file-mismatch handling (ask|warn|off)."
    },
    {
      "sha": "2b6bbc87693f02c4047e574fafe4cabad941bcdf",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\tPR tui/17850:\n+\t* gdb.texinfo (TUI Commands): Document horizontal layouts.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.texinfo (TUI Overview): Mention user layouts."
    },
    {
      "sha": "0645fb05946a4fdec6724adef915f07f51405850",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -27998,11 +27998,23 @@ List and give the size of all displayed windows.\n Create a new TUI layout.  The new layout will be named @var{name}, and\n can be accessed using the @code{layout} command (see below).\n \n-Each @var{window} parameter is the name of a window to display.  The\n-windows will be displayed from top to bottom in the order listed.  The\n-names of the windows are the same as the ones given to the\n+Each @var{window} parameter is either the name of a window to display,\n+or a window description.  The windows will be displayed from top to\n+bottom in the order listed.\n+\n+The names of the windows are the same as the ones given to the\n @code{focus} command (see below); additional, the @code{status}\n-window can be specified.\n+window can be specified.  Note that, because it is of fixed height,\n+the weight assigned to the status window is of no importance.  It is\n+conventional to use @samp{0} here.\n+\n+A window description looks a bit like an invocation of @code{tui\n+new-layout}, and is of the form\n+@{@r{[}@code{-horizontal}@r{]}@var{window} @var{weight} @r{[}@var{window} @var{weight}@dots{}@r{]}@}.\n+\n+This specifies a sub-layout.  If @code{-horizontal} is given, the\n+windows in this description will be arranged side-by-side, rather than\n+top-to-bottom.\n \n Each @var{weight} is an integer.  It is the weight of this window\n relative to all the other windows in the layout.  These numbers are\n@@ -28019,6 +28031,17 @@ and register windows, followed by the status window, and then finally\n the command window.  The non-status windows all have the same weight,\n so the terminal will be split into three roughly equal sections.\n \n+Here is a more complex example, showing a horizontal layout:\n+\n+@example\n+(gdb) tui new-layout example @{-horizontal src 1 asm 1@} 2 status 0 cmd 1\n+@end example\n+\n+This will result in side-by-side source and assembly windows; with the\n+status and command window being beneath these, filling the entire\n+width of the terminal.  Because they have weight 2, the source and\n+assembly windows will be twice the height of the command window.\n+\n @item layout @var{name}\n @kindex layout\n Changes which TUI windows are displayed.  The @var{name} parameter"
    },
    {
      "sha": "8f2fbdf2660db794d5c0ef8d3a27594c54100982",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\tPR tui/17850:\n+\t* gdb.tui/new-layout.exp: Add horizontal layout and winheight\n+\ttests.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.tui/new-layout.exp: Add sub-layout tests."
    },
    {
      "sha": "b71de7de5fa1e4d4ea676fad04a9ff29316930f7",
      "filename": "gdb/testsuite/gdb.tui/new-layout.exp",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/testsuite/gdb.tui/new-layout.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/testsuite/gdb.tui/new-layout.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.tui/new-layout.exp?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -52,6 +52,11 @@ gdb_test_no_output \"tui new-layout example2 {asm 1 status 0} 1 cmd 1\"\n gdb_test \"help layout example2\" \\\n     \"Apply the \\\"example2\\\" layout.*tui new-layout example2 {asm 1 status 0} 1 cmd 1\"\n \n+gdb_test_no_output \"tui new-layout h {-horizontal asm 1 src 1} 1 status 0 cmd 1\"\n+\n+gdb_test \"help layout h\" \\\n+    \"Apply the \\\"h\\\" layout.*tui new-layout h {-horizontal asm 1 src 1} 1 status 0 cmd 1\"\n+\n if {![Term::enter_tui]} {\n     unsupported \"TUI not supported\"\n }\n@@ -62,4 +67,18 @@ gdb_assert {![string match \"No Source Available\" $text]} \\\n \n Term::command \"layout example\"\n Term::check_contents \"example layout shows assembly\" \\\n-    \"No Assembly Available\"\n+    \"$hex <main>\"\n+\n+Term::command \"layout h\"\n+Term::check_box \"left window box\" 0 0 40 15\n+Term::check_box \"right window box\" 39 0 41 15\n+Term::check_contents \"horizontal display\" \\\n+    \"$hex <main>.*21.*return 0\"\n+\n+Term::command \"winheight src - 5\"\n+Term::check_box \"left window box after shrink\" 0 0 40 10\n+Term::check_box \"right window box after shrink\" 39 0 41 10\n+\n+Term::command \"winheight src + 5\"\n+Term::check_box \"left window box after grow\" 0 0 40 15\n+Term::check_box \"right window box after grow\" 39 0 41 15"
    },
    {
      "sha": "e15ac585c980c8cfb04cb66f17b4b72babbe2327",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -82,6 +82,15 @@ struct tui_gen_win_info\n   /* Compute the minimum height of this window.  */\n   virtual int min_height () const = 0;\n \n+  /* Compute the maximum width of this window.  */\n+  int max_width () const;\n+\n+  /* Compute the minimum width of this window.  */\n+  int min_width () const\n+  {\n+    return 3;\n+  }\n+\n   /* Return true if this window can be boxed.  */\n   virtual bool can_box () const\n   {"
    },
    {
      "sha": "c10378617c2e67b3b29b70bccc1793cc254d17eb",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 94,
      "deletions": 53,
      "changes": 147,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -355,12 +355,20 @@ tui_layout_window::apply (int x_, int y_, int width_, int height_)\n /* See tui-layout.h.  */\n \n void\n-tui_layout_window::get_sizes (int *min_height, int *max_height)\n+tui_layout_window::get_sizes (bool height, int *min_value, int *max_value)\n {\n   if (m_window == nullptr)\n     m_window = tui_get_window_by_name (m_contents);\n-  *min_height = m_window->min_height ();\n-  *max_height = m_window->max_height ();\n+  if (height)\n+    {\n+      *min_value = m_window->min_height ();\n+      *max_value = m_window->max_height ();\n+    }\n+  else\n+    {\n+      *min_value = m_window->min_width ();\n+      *max_value = m_window->max_width ();\n+    }\n }\n \n /* See tui-layout.h.  */\n@@ -430,7 +438,7 @@ tui_layout_split::add_window (const char *name, int weight)\n std::unique_ptr<tui_layout_base>\n tui_layout_split::clone () const\n {\n-  tui_layout_split *result = new tui_layout_split ();\n+  tui_layout_split *result = new tui_layout_split (m_vertical);\n   for (const split &item : m_splits)\n     {\n       std::unique_ptr<tui_layout_base> next = item.layout->clone ();\n@@ -443,16 +451,29 @@ tui_layout_split::clone () const\n /* See tui-layout.h.  */\n \n void\n-tui_layout_split::get_sizes (int *min_height, int *max_height)\n+tui_layout_split::get_sizes (bool height, int *min_value, int *max_value)\n {\n-  *min_height = 0;\n-  *max_height = 0;\n+  *min_value = 0;\n+  *max_value = 0;\n+  bool first_time = true;\n   for (const split &item : m_splits)\n     {\n       int new_min, new_max;\n-      item.layout->get_sizes (&new_min, &new_max);\n-      *min_height += new_min;\n-      *max_height += new_max;\n+      item.layout->get_sizes (height, &new_min, &new_max);\n+      /* For the mismatch case, the first time through we want to set\n+\t the min and max to the computed values -- the \"first_time\"\n+\t check here is just a funny way of doing that.  */\n+      if (height == m_vertical || first_time)\n+\t{\n+\t  *min_value += new_min;\n+\t  *max_value += new_max;\n+\t}\n+      else\n+\t{\n+\t  *min_value = std::max (*min_value, new_min);\n+\t  *max_value = std::min (*max_value, new_max);\n+\t}\n+      first_time = false;\n     }\n }\n \n@@ -502,6 +523,8 @@ tui_layout_split::adjust_size (const char *name, int new_height)\n \treturn HANDLED;\n       if (adjusted == FOUND)\n \t{\n+\t  if (!m_vertical)\n+\t    return FOUND;\n \t  found_index = i;\n \t  break;\n \t}\n@@ -524,7 +547,7 @@ tui_layout_split::adjust_size (const char *name, int new_height)\n       int index = (found_index + 1 + i) % m_splits.size ();\n \n       int new_min, new_max;\n-      m_splits[index].layout->get_sizes (&new_min, &new_max);\n+      m_splits[index].layout->get_sizes (m_vertical, &new_min, &new_max);\n \n       if (delta < 0)\n \t{\n@@ -571,23 +594,23 @@ tui_layout_split::apply (int x_, int y_, int width_, int height_)\n   width = width_;\n   height = height_;\n \n-  struct height_info\n+  struct size_info\n   {\n-    int height;\n-    int min_height;\n-    int max_height;\n+    int size;\n+    int min_size;\n+    int max_size;\n     /* True if this window will share a box border with the previous\n        window in the list.  */\n     bool share_box;\n   };\n \n-  std::vector<height_info> info (m_splits.size ());\n+  std::vector<size_info> info (m_splits.size ());\n \n-  /* Step 1: Find the min and max height of each sub-layout.\n-     Fixed-sized layouts are given their desired height, and then the\n+  /* Step 1: Find the min and max size of each sub-layout.\n+     Fixed-sized layouts are given their desired size, and then the\n      remaining space is distributed among the remaining windows\n      according to the weights given.  */\n-  int available_height = height;\n+  int available_size = m_vertical ? height : width;\n   int last_index = -1;\n   int total_weight = 0;\n   for (int i = 0; i < m_splits.size (); ++i)\n@@ -597,7 +620,8 @@ tui_layout_split::apply (int x_, int y_, int width_, int height_)\n       /* Always call get_sizes, to ensure that the window is\n \t instantiated.  This is a bit gross but less gross than adding\n \t special cases for this in other places.  */\n-      m_splits[i].layout->get_sizes (&info[i].min_height, &info[i].max_height);\n+      m_splits[i].layout->get_sizes (m_vertical, &info[i].min_size,\n+\t\t\t\t     &info[i].max_size);\n \n       if (!m_applied\n \t  && cmd_win_already_exists\n@@ -607,70 +631,76 @@ tui_layout_split::apply (int x_, int y_, int width_, int height_)\n \t  /* If this layout has never been applied, then it means the\n \t     user just changed the layout.  In this situation, it's\n \t     desirable to keep the size of the command window the\n-\t     same.  Setting the min and max heights this way ensures\n+\t     same.  Setting the min and max sizes this way ensures\n \t     that the resizing step, below, does the right thing with\n \t     this window.  */\n-\t  info[i].min_height = TUI_CMD_WIN->height;\n-\t  info[i].max_height = TUI_CMD_WIN->height;\n+\t  info[i].min_size = (m_vertical\n+\t\t\t      ? TUI_CMD_WIN->height\n+\t\t\t      : TUI_CMD_WIN->width);\n+\t  info[i].max_size = info[i].min_size;\n \t}\n \n-      if (info[i].min_height == info[i].max_height)\n-\tavailable_height -= info[i].min_height;\n+      if (info[i].min_size == info[i].max_size)\n+\tavailable_size -= info[i].min_size;\n       else\n \t{\n \t  last_index = i;\n \t  total_weight += m_splits[i].weight;\n \t}\n \n       /* Two adjacent boxed windows will share a border, making a bit\n-\t more height available.  */\n+\t more size available.  */\n       if (i > 0\n \t  && m_splits[i - 1].layout->bottom_boxed_p ()\n \t  && m_splits[i].layout->top_boxed_p ())\n \tinfo[i].share_box = true;\n     }\n \n-  /* Step 2: Compute the height of each sub-layout.  Fixed-sized items\n+  /* Step 2: Compute the size of each sub-layout.  Fixed-sized items\n      are given their fixed size, while others are resized according to\n      their weight.  */\n-  int used_height = 0;\n+  int used_size = 0;\n   for (int i = 0; i < m_splits.size (); ++i)\n     {\n       /* Compute the height and clamp to the allowable range.  */\n-      info[i].height = available_height * m_splits[i].weight / total_weight;\n-      if (info[i].height > info[i].max_height)\n-\tinfo[i].height = info[i].max_height;\n-      if (info[i].height < info[i].min_height)\n-\tinfo[i].height = info[i].min_height;\n-      /* If there is any leftover height, just redistribute it to the\n+      info[i].size = available_size * m_splits[i].weight / total_weight;\n+      if (info[i].size > info[i].max_size)\n+\tinfo[i].size = info[i].max_size;\n+      if (info[i].size < info[i].min_size)\n+\tinfo[i].size = info[i].min_size;\n+      /* If there is any leftover size, just redistribute it to the\n \t last resizeable window, by dropping it from the allocated\n-\t height.  We could try to be fancier here perhaps, by\n-\t redistributing this height among all windows, not just the\n+\t size.  We could try to be fancier here perhaps, by\n+\t redistributing this size among all windows, not just the\n \t last window.  */\n-      if (info[i].min_height != info[i].max_height)\n+      if (info[i].min_size != info[i].max_size)\n \t{\n-\t  used_height += info[i].height;\n+\t  used_size += info[i].size;\n \t  if (info[i].share_box)\n-\t    --used_height;\n+\t    --used_size;\n \t}\n     }\n \n-  /* Allocate any leftover height.  */\n-  if (available_height >= used_height && last_index != -1)\n-    info[last_index].height += available_height - used_height;\n+  /* Allocate any leftover size.  */\n+  if (available_size >= used_size && last_index != -1)\n+    info[last_index].size += available_size - used_size;\n \n   /* Step 3: Resize.  */\n-  int height_accum = 0;\n+  int size_accum = 0;\n+  const int maximum = m_vertical ? height : width;\n   for (int i = 0; i < m_splits.size (); ++i)\n     {\n       /* If we fall off the bottom, just make allocations overlap.\n \t GIGO.  */\n-      if (height_accum + info[i].height > height)\n-\theight_accum = height - info[i].height;\n+      if (size_accum + info[i].size > maximum)\n+\tsize_accum = maximum - info[i].size;\n       else if (info[i].share_box)\n-\t--height_accum;\n-      m_splits[i].layout->apply (x, y + height_accum, width, info[i].height);\n-      height_accum += info[i].height;\n+\t--size_accum;\n+      if (m_vertical)\n+\tm_splits[i].layout->apply (x, y + size_accum, width, info[i].size);\n+      else\n+\tm_splits[i].layout->apply (x + size_accum, y, info[i].size, height);\n+      size_accum += info[i].size;\n     }\n \n   m_applied = true;\n@@ -716,6 +746,9 @@ tui_layout_split::specification (ui_file *output, int depth)\n   if (depth > 0)\n     fputs_unfiltered (\"{\", output);\n \n+  if (!m_vertical)\n+    fputs_unfiltered (\"-horizontal \", output);\n+\n   bool first = true;\n   for (auto &item : m_splits)\n     {\n@@ -839,8 +872,13 @@ tui_new_layout_command (const char *spec, int from_tty)\n   if (new_name[0] == '-')\n     error (_(\"Layout name cannot start with '-'\"));\n \n+  bool is_vertical = true;\n+  spec = skip_spaces (spec);\n+  if (check_for_argument (&spec, \"-horizontal\"))\n+    is_vertical = false;\n+\n   std::vector<std::unique_ptr<tui_layout_split>> splits;\n-  splits.emplace_back (new tui_layout_split);\n+  splits.emplace_back (new tui_layout_split (is_vertical));\n   std::unordered_set<std::string> seen_windows;\n   while (true)\n     {\n@@ -850,8 +888,11 @@ tui_new_layout_command (const char *spec, int from_tty)\n \n       if (spec[0] == '{')\n \t{\n-\t  splits.emplace_back (new tui_layout_split);\n-\t  ++spec;\n+\t  is_vertical = true;\n+\t  spec = skip_spaces (spec + 1);\n+\t  if (check_for_argument (&spec, \"-horizontal\"))\n+\t    is_vertical = false;\n+\t  splits.emplace_back (new tui_layout_split (is_vertical));\n \t  continue;\n \t}\n \n@@ -940,12 +981,12 @@ Usage: layout prev | next | LAYOUT-NAME\"),\n \n   add_cmd (\"new-layout\", class_tui, tui_new_layout_command,\n \t   _(\"Create a new TUI layout.\\n\\\n-Usage: tui new-layout NAME WINDOW WEIGHT [WINDOW WEIGHT]...\\n\\\n+Usage: tui new-layout [-horizontal] NAME WINDOW WEIGHT [WINDOW WEIGHT]...\\n\\\n Create a new TUI layout.  The new layout will be named NAME,\\n\\\n and can be accessed using \\\"layout NAME\\\".\\n\\\n The windows will be displayed in the specified order.\\n\\\n A WINDOW can also be of the form:\\n\\\n-  { NAME WEIGHT [NAME WEIGHT]... }\\n\\\n+  { [-horizontal] NAME WEIGHT [NAME WEIGHT]... }\\n\\\n This form indicates a sub-frame.\\n\\\n Each WEIGHT is an integer, which holds the relative size\\n\\\n to be allocated to the window.\"),"
    },
    {
      "sha": "6607e8d40d8c2f8dd6ea328f8ad5243db5ea1f41",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -58,8 +58,9 @@ class tui_layout_base\n   /* Change the size and location of this layout.  */\n   virtual void apply (int x, int y, int width, int height) = 0;\n \n-  /* Return the minimum and maximum height of this layout.  */\n-  virtual void get_sizes (int *min_height, int *max_height) = 0;\n+  /* Return the minimum and maximum height or width of this layout.\n+     HEIGHT is true to fetch height, false to fetch width.  */\n+  virtual void get_sizes (bool height, int *min_value, int *max_value) = 0;\n \n   /* True if the topmost item in this layout is boxed.  */\n   virtual bool top_boxed_p () const = 0;\n@@ -142,7 +143,7 @@ class tui_layout_window : public tui_layout_base\n \n protected:\n \n-  void get_sizes (int *min_height, int *max_height) override;\n+  void get_sizes (bool height, int *min_value, int *max_value) override;\n \n private:\n \n@@ -159,7 +160,12 @@ class tui_layout_split : public tui_layout_base\n {\n public:\n \n-  tui_layout_split () = default;\n+  /* Create a new layout.  If VERTICAL is true, then windows in this\n+     layout will be arranged vertically.  */\n+  explicit tui_layout_split (bool vertical = true)\n+    : m_vertical (vertical)\n+  {\n+  }\n \n   DISABLE_COPY_AND_ASSIGN (tui_layout_split);\n \n@@ -191,7 +197,7 @@ class tui_layout_split : public tui_layout_base\n \n protected:\n \n-  void get_sizes (int *min_height, int *max_height) override;\n+  void get_sizes (bool height, int *min_value, int *max_value) override;\n \n private:\n \n@@ -209,6 +215,9 @@ class tui_layout_split : public tui_layout_base\n   /* The splits.  */\n   std::vector<split> m_splits;\n \n+  /* True if the windows in this split are arranged vertically.  */\n+  bool m_vertical;\n+\n   /* True if this layout has already been applied at least once.  */\n   bool m_applied = false;\n };"
    },
    {
      "sha": "ef78e91b6fe2d9e63457d32bd08efc6c70fa0cce",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c043ba695a3cee067554b1e871e60f7934512b4/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=7c043ba695a3cee067554b1e871e60f7934512b4",
      "patch": "@@ -952,6 +952,14 @@ tui_win_info::max_height () const\n   return tui_term_height () - 2;\n }\n \n+/* See tui-data.h.  */\n+\n+int\n+tui_gen_win_info::max_width () const\n+{\n+  return tui_term_width () - 2;\n+}\n+\n static void\n parse_scrolling_args (const char *arg, \n \t\t      struct tui_win_info **win_to_scroll,"
    }
  ]
}