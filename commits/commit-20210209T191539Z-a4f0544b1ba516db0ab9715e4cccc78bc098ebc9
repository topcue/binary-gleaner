{
  "sha": "a4f0544b1ba516db0ab9715e4cccc78bc098ebc9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTRmMDU0NGIxYmE1MTZkYjBhYjk3MTVlNGNjY2M3OGJjMDk4ZWJjOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-02-09T19:15:39Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-02-09T19:15:39Z"
    },
    "message": "Avoid crash in resolve_dynamic_struct\n\nresolve_dynamic_struct says:\n\n  gdb_assert (type->num_fields () > 0);\n\nHowever, a certain Ada program has a structure with no fields but with\na dynamic size, causing this assertion to fire.\n\nIt is difficult to be certain, but we think this is a compiler bug.\nHowever, in the meantime this assertion does not seem to be checking\nany kind of internal consistency; so this patch removes it.\n\ngdb/ChangeLog\n2021-02-09  Tom Tromey  <tromey@adacore.com>\n\n\t* gdbtypes.c (resolve_dynamic_struct): Handle structure with no\n\tfields.",
    "tree": {
      "sha": "07aec25a2cab2d32c06ce5b78cdba48f8972e30e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/07aec25a2cab2d32c06ce5b78cdba48f8972e30e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5f128a25f235195d1970ec07aec57004dfb90237",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f128a25f235195d1970ec07aec57004dfb90237",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5f128a25f235195d1970ec07aec57004dfb90237"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 9,
    "deletions": 4
  },
  "files": [
    {
      "sha": "6470c996a301e1cf732be6d7f73a13d73e44dba1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a4f0544b1ba516db0ab9715e4cccc78bc098ebc9",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdbtypes.c (resolve_dynamic_struct): Handle structure with no\n+\tfields.\n+\n 2021-02-08  Shahab Vahedi  <shahab@synopsys.com>\n \n \tPR tdep/27369"
    },
    {
      "sha": "1b2d4836959edff40130233cb26ff0ff90108f4c",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a4f0544b1ba516db0ab9715e4cccc78bc098ebc9/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=a4f0544b1ba516db0ab9715e4cccc78bc098ebc9",
      "patch": "@@ -2545,7 +2545,6 @@ resolve_dynamic_struct (struct type *type,\n   unsigned resolved_type_bit_length = 0;\n \n   gdb_assert (type->code () == TYPE_CODE_STRUCT);\n-  gdb_assert (type->num_fields () > 0);\n \n   resolved_type = copy_type (type);\n \n@@ -2564,9 +2563,10 @@ resolve_dynamic_struct (struct type *type,\n \t((struct field *)\n \t TYPE_ALLOC (resolved_type,\n \t\t     resolved_type->num_fields () * sizeof (struct field)));\n-      memcpy (resolved_type->fields (),\n-\t      type->fields (),\n-\t      resolved_type->num_fields () * sizeof (struct field));\n+      if (type->num_fields () > 0)\n+\tmemcpy (resolved_type->fields (),\n+\t\ttype->fields (),\n+\t\tresolved_type->num_fields () * sizeof (struct field));\n     }\n \n   for (i = 0; i < resolved_type->num_fields (); ++i)"
    }
  ]
}