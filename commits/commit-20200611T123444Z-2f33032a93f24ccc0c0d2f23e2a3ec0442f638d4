{
  "sha": "2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmYzMzAzMmE5M2YyNGNjYzBjMGQyZjIzZTJhM2VjMDQ0MmY2MzhkNA==",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2020-06-11T12:34:44Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-11T12:34:44Z"
    },
    "message": "Compute proper length for dynamic types of TYPE_CODE_TYPEDEF\n\nThis patch fixes gdb/21356 in which we hit an assertion in\nvalue_contents_bits_eq:\n\n(gdb) p container_object2\n(gdb) p container_object2\n$1 = {_container_member2 = 15, _vla_struct_object2 = {_some_member = 0,\n    _vla_field = {\n../../src/gdb/value.c:829: internal-error: \\\n  int value_contents_bits_eq(const value*, int, const value*, int, int): \\\n  Assertion `offset1 + length \\\n             <= TYPE_LENGTH (val1->enclosing_type) * TARGET_CHAR_BIT' failed.\n\nThis is happening because TYPE_LENGTH (val1->enclosing_type) is erroneously\nbased on enclosing_type, which is a typedef, instead of the actual underlying\ntype.\n\nThis can be traced back to resolve_dynamic_struct, where the size of the\ntype is computed:\n...\n        TYPE_FIELD_TYPE (resolved_type, i)\n          = resolve_dynamic_type_internal (TYPE_FIELD_TYPE (resolved_type, i),\n                                           &pinfo, 0);\n        gdb_assert (TYPE_FIELD_LOC_KIND (resolved_type, i)\n                    == FIELD_LOC_KIND_BITPOS);\n\n        new_bit_length = TYPE_FIELD_BITPOS (resolved_type, i);\n        if (TYPE_FIELD_BITSIZE (resolved_type, i) != 0)\n          new_bit_length += TYPE_FIELD_BITSIZE (resolved_type, i);\n        else\n          new_bit_length += (TYPE_LENGTH (TYPE_FIELD_TYPE (resolved_type, i))\n                             * TARGET_CHAR_BIT);\n...\n\nIn this function, resolved_type is TYPE_CODE_TYPEDEF which is not what we\nwant to use to calculate the size of the actual field.\n\nThis patch fixes this and the similar problem in resolve_dynamic_union.\n\ngdb/ChangeLog:\n2020-06-11  Keith Seitz  <keiths@redhat.com>\n\n\tPR gdb/21356\n\t* gdbtypes.c (resolve_dynamic_union, resolve_dynamic_struct):\n\tResolve typedefs for type length calculations.\n\ngdb/testsuite/ChangeLog:\n2020-06-11  Keith Seitz  <keiths@redhat.com>\n\n\tPR gdb/21356\n\t* gdb.base/vla-datatypes.c (vla_factory): Add typedef for struct\n\tvla_struct.\n\tAdd new struct vla_typedef and union vla_typedef_union and\n\tcorresponding instantiation objects.\n\tInitialize new objects.\n\t* gdb.base/vla-datatypes.exp: Add tests for vla_typedef_struct_object\n\tand vla_typedef_union_object.\n\tFixup type for vla_struct_object.",
    "tree": {
      "sha": "dfb49ff990e5712cc6f88c62efbbd480f576489f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dfb49ff990e5712cc6f88c62efbbd480f576489f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/comments",
  "author": null,
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a8baf0a32b8f8fe151762c6c0136fef4bae2facd"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 60,
    "deletions": 6
  },
  "files": [
    {
      "sha": "e006943e4935a65bf5cfeb79417bb555a09018fe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-11  Keith Seitz  <keiths@redhat.com>\n+\n+\tPR gdb/21356\n+\t* gdbtypes.c (resolve_dynamic_union, resolve_dynamic_struct):\n+\tResolve typedefs for type length calculations.\n+\n 2020-06-10  Tom de Vries  <tdevries@suse.de>\n \n \tPR ada/24713"
    },
    {
      "sha": "cdf88a4a7d153882793ec0fea877ff3a9e9999d1",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
      "patch": "@@ -2264,8 +2264,10 @@ resolve_dynamic_union (struct type *type,\n       t = resolve_dynamic_type_internal (resolved_type->field (i).type (),\n \t\t\t\t\t addr_stack, 0);\n       resolved_type->field (i).set_type (t);\n-      if (TYPE_LENGTH (t) > max_len)\n-\tmax_len = TYPE_LENGTH (t);\n+\n+      struct type *real_type = check_typedef (t);\n+      if (TYPE_LENGTH (real_type) > max_len)\n+\tmax_len = TYPE_LENGTH (real_type);\n     }\n \n   TYPE_LENGTH (resolved_type) = max_len;\n@@ -2521,8 +2523,12 @@ resolve_dynamic_struct (struct type *type,\n       if (TYPE_FIELD_BITSIZE (resolved_type, i) != 0)\n \tnew_bit_length += TYPE_FIELD_BITSIZE (resolved_type, i);\n       else\n-\tnew_bit_length += (TYPE_LENGTH (resolved_type->field (i).type ())\n-\t\t\t   * TARGET_CHAR_BIT);\n+\t{\n+\t  struct type *real_type\n+\t    = check_typedef (resolved_type->field (i).type ());\n+\n+\t  new_bit_length += (TYPE_LENGTH (real_type) * TARGET_CHAR_BIT);\n+\t}\n \n       /* Normally, we would use the position and size of the last field\n \t to determine the size of the enclosing structure.  But GCC seems"
    },
    {
      "sha": "7ff7de2b52614065fefd50ea6b557707ac2e4723",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
      "patch": "@@ -1,3 +1,15 @@\n+2020-06-11  Keith Seitz  <keiths@redhat.com>\n+\n+\tPR gdb/21356\n+\t* gdb.base/vla-datatypes.c (vla_factory): Add typedef for struct\n+\tvla_struct.\n+\tAdd new struct vla_typedef and union vla_typedef_union and\n+\tcorresponding instantiation objects.\n+\tInitialize new objects.\n+\t* gdb.base/vla-datatypes.exp: Add tests for vla_typedef_struct_object\n+\tand vla_typedef_union_object.\n+\tFixup type for vla_struct_object.\n+\n 2020-06-11  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (with_override): New proc, factored out of ..."
    },
    {
      "sha": "682319fbdeb0c79a76a257724dd58ccdfdaf8392",
      "filename": "gdb/testsuite/gdb.base/vla-datatypes.c",
      "status": "modified",
      "additions": 27,
      "deletions": 1,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/testsuite/gdb.base/vla-datatypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/testsuite/gdb.base/vla-datatypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/vla-datatypes.c?ref=2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
      "patch": "@@ -50,7 +50,10 @@ vla_factory (int n)\n   {\n     int something;\n     int vla_field[n];\n-  } vla_struct_object;\n+  };\n+  /* Define a typedef for a VLA structure.  */\n+  typedef struct vla_struct vla_struct_typedef;\n+  vla_struct_typedef vla_struct_object;\n \n   struct inner_vla_struct\n   {\n@@ -59,14 +62,33 @@ vla_factory (int n)\n     int after;\n   } inner_vla_struct_object;\n \n+  /* Define a structure which uses a typedef for the VLA field\n+     to make sure that GDB creates the proper type for this field,\n+     preventing a possible assertion failure (see gdb/21356).  */\n+  struct vla_struct_typedef_struct_member\n+  {\n+    int something;\n+    vla_struct_typedef vla_object;\n+  } vla_struct_typedef_struct_member_object;\n+\n   union vla_union\n   {\n     int vla_field[n];\n   } vla_union_object;\n \n+  /* Like vla_struct_typedef_struct_member but a union type.  */\n+  union vla_struct_typedef_union_member\n+  {\n+    int something;\n+    vla_struct_typedef vla_object;\n+  } vla_struct_typedef_union_member_object;\n+\n   vla_struct_object.something = n;\n   inner_vla_struct_object.something = n;\n   inner_vla_struct_object.after = n;\n+  vla_struct_typedef_struct_member_object.something = n * 2;\n+  vla_struct_typedef_struct_member_object.vla_object.something = n * 3;\n+  vla_struct_typedef_union_member_object.vla_object.something = n + 1;\n   for (i = 0; i < n; i++)\n     {\n       int_vla[i] = i*2;\n@@ -85,6 +107,10 @@ vla_factory (int n)\n       vla_struct_object.vla_field[i] = i*2;\n       vla_union_object.vla_field[i] = i*2;\n       inner_vla_struct_object.vla_field[i] = i*2;\n+      vla_struct_typedef_struct_member_object.vla_object.vla_field[i]\n+\t= i * 3;\n+      vla_struct_typedef_union_member_object.vla_object.vla_field[i]\n+\t= i * 3 - 1;\n     }\n \n   size_t int_size        = sizeof(int_vla);     /* vlas_filled */"
    },
    {
      "sha": "e8d84579fedfd2ce229d12f42f490cf9a0570b50",
      "filename": "gdb/testsuite/gdb.base/vla-datatypes.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/testsuite/gdb.base/vla-datatypes.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4/gdb/testsuite/gdb.base/vla-datatypes.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/vla-datatypes.exp?ref=2f33032a93f24ccc0c0d2f23e2a3ec0442f638d4",
      "patch": "@@ -45,6 +45,10 @@ gdb_test \"print vla_struct_object\" \\\n     \"\\\\\\{something = 5, vla_field = \\\\\\{0, 2, 4, 6, 8\\\\\\}\\\\\\}\"\n gdb_test \"print vla_union_object\" \\\n     \"\\\\\\{vla_field = \\\\\\{0, 2, 4, 6, 8\\\\\\}\\\\\\}\"\n+gdb_test \"print vla_struct_typedef_struct_member_object\" \\\n+    \"\\\\\\{something = 10, vla_object = \\\\\\{something = 15, vla_field = \\\\\\{0, 3, 6, 9, 12\\\\\\}\\\\\\}\\\\\\}\"\n+gdb_test \"print vla_struct_typedef_union_member_object\" \\\n+    \"\\\\\\{something = 6, vla_object = \\\\\\{something = 6, vla_field = \\\\\\{-1, 2, 5, 8, 11\\\\\\}\\\\\\}\\\\\\}\"\n \n # Check whatis of VLA's.\n gdb_test \"whatis int_vla\" \"type = int \\\\\\[5\\\\\\]\"\n@@ -61,7 +65,7 @@ gdb_test \"whatis unsigned_short_vla\" \\\n gdb_test \"whatis unsigned_char_vla\" \"type = unsigned char \\\\\\[5\\\\\\]\"\n gdb_test \"whatis foo_vla\" \"type = struct foo \\\\\\[5\\\\\\]\"\n gdb_test \"whatis bar_vla\" \"type = BAR \\\\\\[5\\\\\\]\"\n-gdb_test \"whatis vla_struct_object\" \"type = struct vla_struct\"\n+gdb_test \"whatis vla_struct_object\" \"type = vla_struct_typedef\"\n gdb_test \"whatis vla_union_object\" \"type = union vla_union\"\n \n # Check ptype of VLA's."
    }
  ]
}