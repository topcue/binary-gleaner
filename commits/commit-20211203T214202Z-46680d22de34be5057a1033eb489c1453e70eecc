{
  "sha": "46680d22de34be5057a1033eb489c1453e70eecc",
  "node_id": "C_kwDOANOeidoAKDQ2NjgwZDIyZGUzNGJlNTA1N2ExMDMzZWI0ODljMTQ1M2U3MGVlY2M",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-26T03:50:22Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-03T21:42:02Z"
    },
    "message": "gdb: trivial changes to use array_view\n\nChange a few relatively obvious spots using value contents to propagate\nthe use array_view a bit more.\n\nChange-Id: I5338a60986f06d5969fec803d04f8423c9288a15",
    "tree": {
      "sha": "db791e2bf4f581d656b2353f971c367be16263be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/db791e2bf4f581d656b2353f971c367be16263be"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/46680d22de34be5057a1033eb489c1453e70eecc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46680d22de34be5057a1033eb489c1453e70eecc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/46680d22de34be5057a1033eb489c1453e70eecc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46680d22de34be5057a1033eb489c1453e70eecc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2a50938ab740296a1d6df67feea9401e57e4d90e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a50938ab740296a1d6df67feea9401e57e4d90e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2a50938ab740296a1d6df67feea9401e57e4d90e"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 19,
    "deletions": 32
  },
  "files": [
    {
      "sha": "896d80d87bf16b913be6fc9281b59f3ec30e63e1",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46680d22de34be5057a1033eb489c1453e70eecc/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46680d22de34be5057a1033eb489c1453e70eecc/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=46680d22de34be5057a1033eb489c1453e70eecc",
      "patch": "@@ -1261,7 +1261,7 @@ frame_unwind_register_value (frame_info *next_frame, int regnum)\n \t  else\n \t    {\n \t      int i;\n-\t      const gdb_byte *buf = value_contents (value).data ();\n+\t      gdb::array_view<const gdb_byte> buf = value_contents (value);\n \n \t      fprintf_unfiltered (&debug_file, \" bytes=\");\n \t      fprintf_unfiltered (&debug_file, \"[\");"
    },
    {
      "sha": "9ab8fbe30c0e0970aacc83447367f34df55cb887",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46680d22de34be5057a1033eb489c1453e70eecc/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46680d22de34be5057a1033eb489c1453e70eecc/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=46680d22de34be5057a1033eb489c1453e70eecc",
      "patch": "@@ -1317,9 +1317,8 @@ eval_op_rust_struct_anon (struct type *expect_type, struct expression *exp,\n \n       if (rust_enum_p (type))\n \t{\n-\t  gdb::array_view<const gdb_byte> view (value_contents (lhs).data (),\n-\t\t\t\t\t\tTYPE_LENGTH (type));\n-\t  type = resolve_dynamic_type (type, view, value_address (lhs));\n+\t  type = resolve_dynamic_type (type, value_contents (lhs),\n+\t\t\t\t       value_address (lhs));\n \n \t  if (rust_empty_enum_p (type))\n \t    error (_(\"Cannot access field %d of empty enum %s\"),\n@@ -1380,9 +1379,8 @@ eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n   struct type *type = value_type (lhs);\n   if (type->code () == TYPE_CODE_STRUCT && rust_enum_p (type))\n     {\n-      gdb::array_view<const gdb_byte> view (value_contents (lhs).data (),\n-\t\t\t\t\t    TYPE_LENGTH (type));\n-      type = resolve_dynamic_type (type, view, value_address (lhs));\n+      type = resolve_dynamic_type (type, value_contents (lhs),\n+\t\t\t\t   value_address (lhs));\n \n       if (rust_empty_enum_p (type))\n \terror (_(\"Cannot access field %s of empty enum %s\"),"
    },
    {
      "sha": "5ce931395cb29e1aefb813e301bd997fb2eaa548",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46680d22de34be5057a1033eb489c1453e70eecc/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46680d22de34be5057a1033eb489c1453e70eecc/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=46680d22de34be5057a1033eb489c1453e70eecc",
      "patch": "@@ -933,12 +933,10 @@ fixed_point_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n \t  type2 = type1;\n \t}\n \n-      v1.read_fixed_point (gdb::make_array_view (value_contents (arg1).data (),\n-\t\t\t\t\t\t TYPE_LENGTH (type1)),\n+      v1.read_fixed_point (value_contents (arg1),\n \t\t\t   type_byte_order (type1), type1->is_unsigned (),\n \t\t\t   type1->fixed_point_scaling_factor ());\n-      v2.read_fixed_point (gdb::make_array_view (value_contents (arg2).data (),\n-\t\t\t\t\t\t TYPE_LENGTH (type2)),\n+      v2.read_fixed_point (value_contents (arg2),\n \t\t\t   type_byte_order (type2), type2->is_unsigned (),\n \t\t\t   type2->fixed_point_scaling_factor ());\n     }\n@@ -948,8 +946,7 @@ fixed_point_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n       value *fp_val = allocate_value (type1);\n \n       fp.write_fixed_point\n-\t(gdb::make_array_view (value_contents_raw (fp_val).data (),\n-\t\t\t       TYPE_LENGTH (type1)),\n+\t(value_contents_raw (fp_val),\n \t type_byte_order (type1),\n \t type1->is_unsigned (),\n \t type1->fixed_point_scaling_factor ());"
    },
    {
      "sha": "e0214c5d2f484150b9b8381add3aeb535109fec8",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 10,
      "deletions": 18,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46680d22de34be5057a1033eb489c1453e70eecc/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46680d22de34be5057a1033eb489c1453e70eecc/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=46680d22de34be5057a1033eb489c1453e70eecc",
      "patch": "@@ -351,9 +351,8 @@ value_to_gdb_mpq (struct value *value)\n \t\t  || is_fixed_point_type (type));\n \n       gdb_mpz vz;\n-      vz.read (gdb::make_array_view (value_contents (value).data (),\n-\t\t\t\t     TYPE_LENGTH (type)),\n-\t       type_byte_order (type), type->is_unsigned ());\n+      vz.read (value_contents (value), type_byte_order (type),\n+\t       type->is_unsigned ());\n       mpq_set_z (result.val, vz.val);\n \n       if (is_fixed_point_type (type))\n@@ -392,8 +391,7 @@ value_cast_to_fixed_point (struct type *to_type, struct value *from_val)\n   /* Finally, create the result value, and pack the unscaled value\n      in it.  */\n   struct value *result = allocate_value (to_type);\n-  unscaled.write (gdb::make_array_view (value_contents_raw (result).data (),\n-\t\t\t\t\tTYPE_LENGTH (to_type)),\n+  unscaled.write (value_contents_raw (result),\n \t\t  type_byte_order (to_type),\n \t\t  to_type->is_unsigned ());\n \n@@ -554,11 +552,10 @@ value_cast (struct type *type, struct value *arg2)\n \t{\n \t  gdb_mpq fp_val;\n \n-\t  fp_val.read_fixed_point\n-\t    (gdb::make_array_view (value_contents (arg2).data (),\n-\t\t\t\t   TYPE_LENGTH (type2)),\n-\t     type_byte_order (type2), type2->is_unsigned (),\n-\t     type2->fixed_point_scaling_factor ());\n+\t  fp_val.read_fixed_point (value_contents (arg2),\n+\t\t\t\t   type_byte_order (type2),\n+\t\t\t\t   type2->is_unsigned (),\n+\t\t\t\t   type2->fixed_point_scaling_factor ());\n \n \t  struct value *v = allocate_value (to_type);\n \t  target_float_from_host_double (value_contents_raw (v).data (),\n@@ -1255,14 +1252,9 @@ value_assign (struct value *toval, struct value *fromval)\n \t\t\t\t\t   value_contents (fromval).data ());\n \t      }\n \t    else\n-\t      {\n-\t\tgdb::array_view<const gdb_byte> contents\n-\t\t  = gdb::make_array_view (value_contents (fromval).data (),\n-\t\t\t\t\t  TYPE_LENGTH (type));\n-\t\tput_frame_register_bytes (frame, value_reg,\n-\t\t\t\t\t  value_offset (toval),\n-\t\t\t\t\t  contents);\n-\t      }\n+\t      put_frame_register_bytes (frame, value_reg,\n+\t\t\t\t\tvalue_offset (toval),\n+\t\t\t\t\tvalue_contents (fromval));\n \t  }\n \n \tgdb::observers::register_changed.notify (frame, value_reg);"
    },
    {
      "sha": "7d939ab11dbf2d1020d0f470aef6a44e527990cb",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46680d22de34be5057a1033eb489c1453e70eecc/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46680d22de34be5057a1033eb489c1453e70eecc/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=46680d22de34be5057a1033eb489c1453e70eecc",
      "patch": "@@ -4011,7 +4011,7 @@ value_fetch_lazy_register (struct value *val)\n       else\n \t{\n \t  int i;\n-\t  const gdb_byte *buf = value_contents (new_val).data ();\n+\t  gdb::array_view<const gdb_byte> buf = value_contents (new_val);\n \n \t  if (VALUE_LVAL (new_val) == lval_register)\n \t    fprintf_unfiltered (&debug_file, \" register=%d\","
    }
  ]
}