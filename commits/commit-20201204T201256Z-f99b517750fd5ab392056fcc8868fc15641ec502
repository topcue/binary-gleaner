{
  "sha": "f99b517750fd5ab392056fcc8868fc15641ec502",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Zjk5YjUxNzc1MGZkNWFiMzkyMDU2ZmNjODg2OGZjMTU2NDFlYzUwMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-04T20:09:43Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-04T20:12:56Z"
    },
    "message": "Remove redundant typedefs\n\nI was inspired by this patch of Simon's:\n\nhttps://sourceware.org/pipermail/gdb-patches/2020-November/173522.html\n\n... to remove other typedefs that are no longer necessary now that gdb\nuses C++.\n\nI didn't remove absolutely every one -- I didn't touch the tdep files.\nHowever, I removed many of them.  In some cases, I removed an existing\ndifferent struct tag.\n\n2020-12-04  Tom Tromey  <tromey@adacore.com>\n\n\t* linespec.c (struct linespec_token): Rename; remove typedef.\n\t* guile/scm-block.c (struct block_smob): Remove typedef.\n\t(struct block_syms_progress_smob): Likewise.\n\t* guile/scm-symbol.c (struct symbol_smob): Remove typedef.\n\t* guile/scm-symtab.c (symtab_smob): Remove typedef.\n\t(struct sal_smob): Remove typedef.\n\t* guile/scm-param.c (struct param_smob): Remove typedef.\n\t* guile/scm-progspace.c (struct pspace_smob): Rename.\n\t* guile/scm-objfile.c (struct objfile_smob): Rename.\n\t* guile/scm-iterator.c (struct iterator_smob): Rename.\n\t* guile/scm-frame.c (struct frame_smob): Rename.\n\t* guile/scm-arch.c (struct arch_smob): Rename.\n\t* guile/scm-type.c (struct field_smob): Remove typedef.\n\t(struct type_smob): Rename.\n\t* guile/scm-cmd.c (struct command_smob): Remove typedef.\n\t* guile/scm-ports.c (struct ioscm_memory_port): Remove typedef.\n\t* guile/scm-value.c (struct value_smob): Remove typedef.\n\t* guile/scm-lazy-string.c (lazy_string_smob): Remove typedef.\n\t* guile/guile-internal.h (struct scheme_variable)\n\t(struct scheme_function, struct scheme_integer_constant)\n\t(struct gdb_smob, struct chained_gdb_smob)\n\t(struct eqable_gdb_smob, arch_smob, frame_smob, iterator_smob)\n\t(objfile_smob, pspace_smob, type_smob): Remove typedef.\n\t* guile/scm-pretty-print.c (pretty_printer_smob): Remove typedef.\n\t(struct pretty_printer_worker_smob): Remove typedef.\n\t* guile/scm-exception.c (struct exception_smob): Remove typedef.\n\t* python/py-block.c (struct block_object): Remove typedef.\n\t(block_syms_iterator_object): Update.\n\t(set_block): Update.\n\t(block_syms_iterator_object): Remove typedef.\n\t* python/py-inferior.c (struct membuf_object): Remove typedef.\n\t* python/py-symtab.c (struct symtab_object): Remove typedef.\n\t(set_symtab): Update.\n\t(sal_object): Remove typedef.\n\t(set_sal): Update.\n\t* python/py-frame.c (frame_object): Remove typedef.\n\t* python/py-record-btrace.c (struct btpy_list_object): Remove\n\ttypedef.\n\t* python/py-arch.c (struct arch_object): Remove typedef.\n\t* python/py-linetable.c (struct linetable_entry_object)\n\t(linetable_object, struct ltpy_iterator_object): Remove typedef.\n\t* python/py-events.h (eventregistry_object): Remove typedef.\n\t(struct events_object): Remove typedef.\n\t* python/python-internal.h (gdbpy_breakpoint_object): Remove\n\ttypedef.\n\t(thread_object): Remove typedef.\n\t* python/py-progspace.c (pspace_object): Remove typedef.\n\t* python/py-value.c (struct value_object): Remove typedef.\n\t* python/py-record.h (recpy_record_object): Remove typedef.\n\t(struct recpy_element_object): Remove typedef.\n\t* python/py-lazy-string.c (lazy_string_object): Remove typedef.\n\t* python/py-objfile.c (objfile_object): Remove typedef.\n\t* python/py-cmd.c (struct cmdpy_object): Remove typedef.\n\t* python/py-type.c (type_object): Remove typedef.\n\t(typy_iterator_object): Update.\n\t(set_type): Update.\n\t(field_object): Remove typedef.\n\t(typy_iterator_object): Remove typedef.\n\t* python/py-registers.c (register_descriptor_iterator_object):\n\tRemove typedef.\n\t(struct register_descriptor_object)\n\t(struct reggroup_iterator_object, struct reggroup_object): Remove\n\ttypedef.\n\t* python/py-record.c (recpy_gap_object): Remove typedef.\n\t* python/py-symbol.c (symbol_object): Remove typedef.\n\t(set_symbol): Update.\n\t* python/py-event.h (event_object): Remove typedef.\n\t* python/py-param.c (parmpy_object): Remove typedef.\n\t* python/py-instruction.c (struct py_insn_obj): Remove typedef.\n\t* python/py-unwind.c (struct pending_frame_object): Remove typedef.\n\t(unwind_info_object, struct cached_frame_info): Likewise.",
    "tree": {
      "sha": "6d3420e2f259d3aae138b9e27d0e49a7b43ab68b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d3420e2f259d3aae138b9e27d0e49a7b43ab68b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f99b517750fd5ab392056fcc8868fc15641ec502",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f99b517750fd5ab392056fcc8868fc15641ec502",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f99b517750fd5ab392056fcc8868fc15641ec502",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f99b517750fd5ab392056fcc8868fc15641ec502/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e633b1172a5cf5d099644474e03f9228dc870b25",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e633b1172a5cf5d099644474e03f9228dc870b25",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e633b1172a5cf5d099644474e03f9228dc870b25"
    }
  ],
  "stats": {
    "total": 387,
    "additions": 225,
    "deletions": 162
  },
  "files": [
    {
      "sha": "eae761b7f129965e59be39a2825a0bee94f78d45",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -1,3 +1,77 @@\n+2020-12-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* linespec.c (struct linespec_token): Rename; remove typedef.\n+\t* guile/scm-block.c (struct block_smob): Remove typedef.\n+\t(struct block_syms_progress_smob): Likewise.\n+\t* guile/scm-symbol.c (struct symbol_smob): Remove typedef.\n+\t* guile/scm-symtab.c (symtab_smob): Remove typedef.\n+\t(struct sal_smob): Remove typedef.\n+\t* guile/scm-param.c (struct param_smob): Remove typedef.\n+\t* guile/scm-progspace.c (struct pspace_smob): Rename.\n+\t* guile/scm-objfile.c (struct objfile_smob): Rename.\n+\t* guile/scm-iterator.c (struct iterator_smob): Rename.\n+\t* guile/scm-frame.c (struct frame_smob): Rename.\n+\t* guile/scm-arch.c (struct arch_smob): Rename.\n+\t* guile/scm-type.c (struct field_smob): Remove typedef.\n+\t(struct type_smob): Rename.\n+\t* guile/scm-cmd.c (struct command_smob): Remove typedef.\n+\t* guile/scm-ports.c (struct ioscm_memory_port): Remove typedef.\n+\t* guile/scm-value.c (struct value_smob): Remove typedef.\n+\t* guile/scm-lazy-string.c (lazy_string_smob): Remove typedef.\n+\t* guile/guile-internal.h (struct scheme_variable)\n+\t(struct scheme_function, struct scheme_integer_constant)\n+\t(struct gdb_smob, struct chained_gdb_smob)\n+\t(struct eqable_gdb_smob, arch_smob, frame_smob, iterator_smob)\n+\t(objfile_smob, pspace_smob, type_smob): Remove typedef.\n+\t* guile/scm-pretty-print.c (pretty_printer_smob): Remove typedef.\n+\t(struct pretty_printer_worker_smob): Remove typedef.\n+\t* guile/scm-exception.c (struct exception_smob): Remove typedef.\n+\t* python/py-block.c (struct block_object): Remove typedef.\n+\t(block_syms_iterator_object): Update.\n+\t(set_block): Update.\n+\t(block_syms_iterator_object): Remove typedef.\n+\t* python/py-inferior.c (struct membuf_object): Remove typedef.\n+\t* python/py-symtab.c (struct symtab_object): Remove typedef.\n+\t(set_symtab): Update.\n+\t(sal_object): Remove typedef.\n+\t(set_sal): Update.\n+\t* python/py-frame.c (frame_object): Remove typedef.\n+\t* python/py-record-btrace.c (struct btpy_list_object): Remove\n+\ttypedef.\n+\t* python/py-arch.c (struct arch_object): Remove typedef.\n+\t* python/py-linetable.c (struct linetable_entry_object)\n+\t(linetable_object, struct ltpy_iterator_object): Remove typedef.\n+\t* python/py-events.h (eventregistry_object): Remove typedef.\n+\t(struct events_object): Remove typedef.\n+\t* python/python-internal.h (gdbpy_breakpoint_object): Remove\n+\ttypedef.\n+\t(thread_object): Remove typedef.\n+\t* python/py-progspace.c (pspace_object): Remove typedef.\n+\t* python/py-value.c (struct value_object): Remove typedef.\n+\t* python/py-record.h (recpy_record_object): Remove typedef.\n+\t(struct recpy_element_object): Remove typedef.\n+\t* python/py-lazy-string.c (lazy_string_object): Remove typedef.\n+\t* python/py-objfile.c (objfile_object): Remove typedef.\n+\t* python/py-cmd.c (struct cmdpy_object): Remove typedef.\n+\t* python/py-type.c (type_object): Remove typedef.\n+\t(typy_iterator_object): Update.\n+\t(set_type): Update.\n+\t(field_object): Remove typedef.\n+\t(typy_iterator_object): Remove typedef.\n+\t* python/py-registers.c (register_descriptor_iterator_object):\n+\tRemove typedef.\n+\t(struct register_descriptor_object)\n+\t(struct reggroup_iterator_object, struct reggroup_object): Remove\n+\ttypedef.\n+\t* python/py-record.c (recpy_gap_object): Remove typedef.\n+\t* python/py-symbol.c (symbol_object): Remove typedef.\n+\t(set_symbol): Update.\n+\t* python/py-event.h (event_object): Remove typedef.\n+\t* python/py-param.c (parmpy_object): Remove typedef.\n+\t* python/py-instruction.c (struct py_insn_obj): Remove typedef.\n+\t* python/py-unwind.c (struct pending_frame_object): Remove typedef.\n+\t(unwind_info_object, struct cached_frame_info): Likewise.\n+\n 2020-12-04  Tom Tromey  <tromey@adacore.com>\n \n \t* value.c (value_internal_function_name): Make return type const."
    },
    {
      "sha": "4dd7023fbf9dc52baf8a595d03f476a96e049010",
      "filename": "gdb/guile/guile-internal.h",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/guile-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/guile-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile-internal.h?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -40,12 +40,12 @@ typedef int excp_matcher_func (SCM key);\n \n /* Scheme variables to define during initialization.  */\n \n-typedef struct\n+struct scheme_variable\n {\n   const char *name;\n   SCM value;\n   const char *doc_string;\n-} scheme_variable;\n+};\n \n /* End of scheme_variable table mark.  */\n \n@@ -89,27 +89,27 @@ as_a_scm_t_subr (SCM (*func) (SCM, SCM, SCM))\n \n /* Scheme functions to define during initialization.  */\n \n-typedef struct\n+struct scheme_function\n {\n   const char *name;\n   int required;\n   int optional;\n   int rest;\n   scm_t_subr func;\n   const char *doc_string;\n-} scheme_function;\n+};\n \n /* End of scheme_function table mark.  */\n \n #define END_FUNCTIONS { NULL, 0, 0, 0, NULL, NULL }\n \n /* Useful for defining a set of constants.  */\n \n-typedef struct\n+struct scheme_integer_constant\n {\n   const char *name;\n   int value;\n-} scheme_integer_constant;\n+};\n \n #define END_INTEGER_CONSTANTS { NULL, 0 }\n \n@@ -239,20 +239,20 @@ extern int gdbscm_guile_version_is_at_least (int major, int minor, int micro);\n #define GDB_SMOB_HEAD \\\n   int empty_base_class;\n \n-typedef struct\n+struct gdb_smob\n {\n   GDB_SMOB_HEAD\n-} gdb_smob;\n+};\n \n-typedef struct _chained_gdb_smob\n+struct chained_gdb_smob\n {\n   GDB_SMOB_HEAD\n \n-  struct _chained_gdb_smob *prev;\n-  struct _chained_gdb_smob *next;\n-} chained_gdb_smob;\n+  chained_gdb_smob *prev;\n+  chained_gdb_smob *next;\n+};\n \n-typedef struct _eqable_gdb_smob\n+struct eqable_gdb_smob\n {\n   GDB_SMOB_HEAD\n \n@@ -267,7 +267,7 @@ typedef struct _eqable_gdb_smob\n      we need to invalidate the objects: we can do that using the same hashtab\n      used to record the smob for eq-ability.  */\n   SCM containing_scm;\n-} eqable_gdb_smob;\n+};\n \n #undef GDB_SMOB_HEAD\n \n@@ -416,7 +416,7 @@ extern void gdbscm_enter_repl (void);\n \n /* scm-arch.c */\n \n-typedef struct _arch_smob arch_smob;\n+struct arch_smob;\n \n extern struct gdbarch *arscm_get_gdbarch (arch_smob *a_smob);\n \n@@ -447,7 +447,7 @@ extern char *gdbscm_canonicalize_command_name (const char *name,\n \n /* scm-frame.c */\n \n-typedef struct _frame_smob frame_smob;\n+struct frame_smob;\n \n extern int frscm_is_frame (SCM scm);\n \n@@ -458,7 +458,7 @@ extern struct frame_info *frscm_frame_smob_to_frame (frame_smob *);\n \n /* scm-iterator.c */\n \n-typedef struct _iterator_smob iterator_smob;\n+struct iterator_smob;\n \n extern SCM itscm_iterator_smob_object (iterator_smob *i_smob);\n \n@@ -500,7 +500,7 @@ extern void lsscm_val_print_lazy_string\n \n /* scm-objfile.c */\n \n-typedef struct _objfile_smob objfile_smob;\n+struct objfile_smob;\n \n extern SCM ofscm_objfile_smob_pretty_printers (objfile_smob *o_smob);\n \n@@ -510,7 +510,7 @@ extern SCM ofscm_scm_from_objfile (struct objfile *objfile);\n \n /* scm-progspace.c */\n \n-typedef struct _pspace_smob pspace_smob;\n+struct pspace_smob;\n \n extern SCM psscm_pspace_smob_pretty_printers (const pspace_smob *);\n \n@@ -557,7 +557,7 @@ extern SCM stscm_scm_from_sal (struct symtab_and_line sal);\n \n /* scm-type.c */\n \n-typedef struct _type_smob type_smob;\n+struct type_smob;\n \n extern int tyscm_is_type (SCM scm);\n "
    },
    {
      "sha": "ce9d9f193d55fd0cecb3ee136c605e16641c0527",
      "filename": "gdb/guile/scm-arch.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-arch.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -26,10 +26,9 @@\n #include \"arch-utils.h\"\n #include \"guile-internal.h\"\n \n-/* The <gdb:arch> smob.\n-   The typedef for this struct is in guile-internal.h.  */\n+/* The <gdb:arch> smob.  */\n \n-struct _arch_smob\n+struct arch_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;"
    },
    {
      "sha": "1a898fa65eaf4b9ea4c24ea96ca723ff94f3bda5",
      "filename": "gdb/guile/scm-block.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-block.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -30,7 +30,7 @@\n \n /* A smob describing a gdb block.  */\n \n-typedef struct _block_smob\n+struct block_smob\n {\n   /* This always appears first.\n      We want blocks to be eq?-able.  And we need to be able to invalidate\n@@ -44,7 +44,7 @@ typedef struct _block_smob\n      between a block and an object file.  When a block is created also\n      store a pointer to the object file for later use.  */\n   struct objfile *objfile;\n-} block_smob;\n+};\n \n /* To iterate over block symbols from Scheme we need to store\n    struct block_iterator somewhere.  This is stored in the \"progress\" field\n@@ -54,7 +54,7 @@ typedef struct _block_smob\n    Remember: While iterating over block symbols, you must continually check\n    whether the block is still valid.  */\n \n-typedef struct\n+struct block_syms_progress_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n@@ -64,7 +64,7 @@ typedef struct\n \n   /* Has the iterator been initialized flag.  */\n   int initialized_p;\n-} block_syms_progress_smob;\n+};\n \n static const char block_smob_name[] = \"gdb:block\";\n static const char block_syms_progress_smob_name[] = \"gdb:block-symbols-iterator\";"
    },
    {
      "sha": "bf079a27511bec01bdb66bacabb1f224c36545d6",
      "filename": "gdb/guile/scm-cmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-cmd.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -37,7 +37,7 @@\n    any side-effects.  This means that the smob needs to store everything\n    that was passed to make-command.  */\n \n-typedef struct _command_smob\n+struct command_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n@@ -85,7 +85,7 @@ typedef struct _command_smob\n      the object since a reference to it comes from non-gc-managed space\n      (the command context pointer).  */\n   SCM containing_scm;\n-} command_smob;\n+};\n \n static const char command_smob_name[] = \"gdb:command\";\n "
    },
    {
      "sha": "a6c6a5ece90491828d7d0b1f53009367270a721a",
      "filename": "gdb/guile/scm-exception.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-exception.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-exception.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-exception.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -37,15 +37,15 @@\n    One important invariant is that <gdb:exception> smobs are never a valid\n    result of a function, other than to signify an exception occurred.  */\n \n-typedef struct\n+struct exception_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n \n   /* The key and args parameters to \"throw\".  */\n   SCM key;\n   SCM args;\n-} exception_smob;\n+};\n \n static const char exception_smob_name[] = \"gdb:exception\";\n "
    },
    {
      "sha": "f09968937db47161774cf206892b6ea378f0412c",
      "filename": "gdb/guile/scm-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-frame.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -32,10 +32,9 @@\n #include \"value.h\"\n #include \"guile-internal.h\"\n \n-/* The <gdb:frame> smob.\n-   The typedef for this struct is in guile-internal.h.  */\n+/* The <gdb:frame> smob.  */\n \n-struct _frame_smob\n+struct frame_smob\n {\n   /* This always appears first.  */\n   eqable_gdb_smob base;"
    },
    {
      "sha": "71f5eea874cda92d4450fe7910f6935bc8c9aadc",
      "filename": "gdb/guile/scm-iterator.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-iterator.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-iterator.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-iterator.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -55,10 +55,9 @@\n \n /* A smob for iterating over something.\n    Typically this is used when computing a list of everything is\n-   too expensive.\n-   The typedef for this struct is in guile-internal.h.  */\n+   too expensive.  */\n \n-struct _iterator_smob\n+struct iterator_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;"
    },
    {
      "sha": "978f695d8f10bd4f509b07187fb49070c05310b1",
      "filename": "gdb/guile/scm-lazy-string.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-lazy-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-lazy-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-lazy-string.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -29,7 +29,7 @@\n \n /* The <gdb:lazy-string> smob.  */\n \n-typedef struct\n+struct lazy_string_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n@@ -58,7 +58,7 @@ typedef struct\n      This is recorded as an SCM object so that we take advantage of support for\n      preserving the type should its owning objfile go away.  */\n   SCM type;\n-} lazy_string_smob;\n+};\n \n static const char lazy_string_smob_name[] = \"gdb:lazy-string\";\n "
    },
    {
      "sha": "77b1cd33f5e2de5fac049d3be17a6f223a083b9f",
      "filename": "gdb/guile/scm-objfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-objfile.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -25,10 +25,9 @@\n #include \"language.h\"\n #include \"guile-internal.h\"\n \n-/* The <gdb:objfile> smob.\n-   The typedef for this struct is in guile-internal.h.  */\n+/* The <gdb:objfile> smob.  */\n \n-struct _objfile_smob\n+struct objfile_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;"
    },
    {
      "sha": "19ca45e390c199ab793dd47989e9da70da857cd8",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -62,7 +62,7 @@ union pascm_variable\n    N.B. There is no free function for this smob.\n    All objects pointed to by this smob must live in GC space.  */\n \n-typedef struct _param_smob\n+struct param_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n@@ -112,7 +112,7 @@ typedef struct _param_smob\n      protect/unprotect the object since a reference to it comes from\n      non-gc-managed space (the command context pointer).  */\n   SCM containing_scm;\n-} param_smob;\n+};\n \n static const char param_smob_name[] = \"gdb:parameter\";\n "
    },
    {
      "sha": "f071c2f573c82d85e36fc839a51a8b02b3a5ad4f",
      "filename": "gdb/guile/scm-ports.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-ports.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-ports.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-ports.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -59,7 +59,7 @@ class ioscm_file_port : public ui_file\n \n /* Data for a memory port.  */\n \n-typedef struct\n+struct ioscm_memory_port\n {\n   /* Bounds of memory range this port is allowed to access: [start, end).\n      This means that 0xff..ff is not accessible.  I can live with that.  */\n@@ -80,7 +80,7 @@ typedef struct\n      the user to specify these values to help get something similar.  */\n   unsigned read_buf_size, write_buf_size;\n #endif\n-} ioscm_memory_port;\n+};\n \n /* Copies of the original system input/output/error ports.\n    These are recorded for debugging purposes.  */"
    },
    {
      "sha": "0bbcc4de57981e48ddfc62df7dbea547bb83f321",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -59,7 +59,7 @@ enum display_hint\n \n /* The <gdb:pretty-printer> smob.  */\n \n-typedef struct\n+struct pretty_printer_smob\n {\n   /* This must appear first.  */\n   gdb_smob base;\n@@ -77,11 +77,11 @@ typedef struct\n   SCM lookup;\n \n   /* Note: Attaching subprinters to this smob is left to Scheme.  */\n-} pretty_printer_smob;\n+};\n \n /* The <gdb:pretty-printer-worker> smob.  */\n \n-typedef struct\n+struct pretty_printer_worker_smob\n {\n   /* This must appear first.  */\n   gdb_smob base;\n@@ -99,7 +99,7 @@ typedef struct\n      The iterator returns a pair for each iteration: (name . value),\n      where \"value\" can have the same types as to_string.  */\n   SCM children;\n-} pretty_printer_worker_smob;\n+};\n \n static const char pretty_printer_smob_name[] =\n   \"gdb:pretty-printer\";"
    },
    {
      "sha": "9f93a9843a34f0a86e8bbb6d7c28db680a33cac4",
      "filename": "gdb/guile/scm-progspace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-progspace.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -28,10 +28,9 @@\n /* NOTE: Python exports the name \"Progspace\", so we export \"progspace\".\n    Internally we shorten that to \"pspace\".  */\n \n-/* The <gdb:progspace> smob.\n-   The typedef for this struct is in guile-internal.h.  */\n+/* The <gdb:progspace> smob.  */\n \n-struct _pspace_smob\n+struct pspace_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;"
    },
    {
      "sha": "9810ec95c30294513478f188cd3a514e8e9115e5",
      "filename": "gdb/guile/scm-symbol.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symbol.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -30,14 +30,14 @@\n \n /* The <gdb:symbol> smob.  */\n \n-typedef struct\n+struct symbol_smob\n {\n   /* This always appears first.  */\n   eqable_gdb_smob base;\n \n   /* The GDB symbol structure this smob is wrapping.  */\n   struct symbol *symbol;\n-} symbol_smob;\n+};\n \n static const char symbol_smob_name[] = \"gdb:symbol\";\n "
    },
    {
      "sha": "eb83a161a3f3ec234f09e7428e03b6b32fb7b984",
      "filename": "gdb/guile/scm-symtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symtab.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -29,7 +29,7 @@\n \n /* A <gdb:symtab> smob.  */\n \n-typedef struct\n+struct symtab_smob\n {\n   /* This always appears first.\n      eqable_gdb_smob is used so that symtabs are eq?-able.\n@@ -42,15 +42,15 @@ typedef struct\n      If this is NULL the symtab is invalid.  This can happen when the\n      underlying objfile is freed.  */\n   struct symtab *symtab;\n-} symtab_smob;\n+};\n \n /* A <gdb:sal> smob.\n    A smob describing a gdb symtab-and-line object.\n    A sal is associated with an objfile.  All access must be gated by checking\n    the validity of symtab_scm.\n    TODO: Sals are not eq?-able at the moment, or even comparable.  */\n \n-typedef struct\n+struct sal_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n@@ -67,7 +67,7 @@ typedef struct\n      this pointer will not be updated.  Use symtab_scm instead to determine\n      if this sal is valid.  */\n   struct symtab_and_line sal;\n-} sal_smob;\n+};\n \n static const char symtab_smob_name[] = \"gdb:symtab\";\n /* \"symtab-and-line\" is pretty long, and \"sal\" is short and unique.  */"
    },
    {
      "sha": "a2640f23bcbe308d1d736f4fd2fcdf9e2a78f354",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -34,10 +34,9 @@\n /* The <gdb:type> smob.\n    The type is chained with all types associated with its objfile, if any.\n    This lets us copy the underlying struct type when the objfile is\n-   deleted.\n-   The typedef for this struct is in guile-internal.h.  */\n+   deleted.  */\n \n-struct _type_smob\n+struct type_smob\n {\n   /* This always appears first.\n      eqable_gdb_smob is used so that types are eq?-able.\n@@ -52,7 +51,7 @@ struct _type_smob\n \n /* A field smob.  */\n \n-typedef struct\n+struct field_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n@@ -62,7 +61,7 @@ typedef struct\n \n   /* The field number in TYPE_SCM.  */\n   int field_num;\n-} field_smob;\n+};\n \n static const char type_smob_name[] = \"gdb:type\";\n static const char field_smob_name[] = \"gdb:field\";"
    },
    {
      "sha": "e1b0020c98aa4e70f87b6f0d8201968e72733f88",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -34,16 +34,16 @@\n \n /* The <gdb:value> smob.  */\n \n-typedef struct _value_smob\n+struct value_smob\n {\n   /* This always appears first.  */\n   gdb_smob base;\n \n   /* Doubly linked list of values in values_in_scheme.\n      IWBN to use a chained_gdb_smob instead, which is doable, it just requires\n      a bit more casting than normal.  */\n-  struct _value_smob *next;\n-  struct _value_smob *prev;\n+  value_smob *next;\n+  value_smob *prev;\n \n   struct value *value;\n \n@@ -55,7 +55,7 @@ typedef struct _value_smob\n   SCM address;\n   SCM type;\n   SCM dynamic_type;\n-} value_smob;\n+};\n \n static const char value_smob_name[] = \"gdb:value\";\n "
    },
    {
      "sha": "3bf16c504a267fb0135f6f9e13caca3a91c54a01",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -260,7 +260,7 @@ const char * const linespec_keywords[] = { \"if\", \"thread\", \"task\", \"-force-condi\n \n /* A token of the linespec lexer  */\n \n-struct ls_token\n+struct linespec_token\n {\n   /* The type of the token  */\n   linespec_token_type type;\n@@ -275,7 +275,6 @@ struct ls_token\n     const char *keyword;\n   } data;\n };\n-typedef struct ls_token linespec_token;\n \n #define LS_TOKEN_STOKEN(TOK) (TOK).data.string\n #define LS_TOKEN_KEYWORD(TOK) (TOK).data.keyword"
    },
    {
      "sha": "ac64335ae74e07e86e097944afc69423cd39cea3",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -23,10 +23,10 @@\n #include \"disasm.h\"\n #include \"python-internal.h\"\n \n-typedef struct arch_object_type_object {\n+struct arch_object {\n   PyObject_HEAD\n   struct gdbarch *gdbarch;\n-} arch_object;\n+};\n \n static struct gdbarch_data *arch_object_data = NULL;\n "
    },
    {
      "sha": "aadc1e7702b3e2848ea8cefaa0202a3a444df356",
      "filename": "gdb/python/py-block.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-block.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -24,7 +24,7 @@\n #include \"python-internal.h\"\n #include \"objfiles.h\"\n \n-typedef struct blpy_block_object {\n+struct block_object {\n   PyObject_HEAD\n   /* The GDB block structure that represents a frame's code block.  */\n   const struct block *block;\n@@ -34,11 +34,11 @@ typedef struct blpy_block_object {\n   struct objfile *objfile;\n   /* Keep track of all blocks with a doubly-linked list.  Needed for\n      block invalidation if the source object file has been freed.  */\n-  struct blpy_block_object *prev;\n-  struct blpy_block_object *next;\n-} block_object;\n+  block_object *prev;\n+  block_object *next;\n+};\n \n-typedef struct {\n+struct block_syms_iterator_object {\n   PyObject_HEAD\n   /* The block.  */\n   const struct block *block;\n@@ -49,8 +49,8 @@ typedef struct {\n   /* Pointer back to the original source block object.  Needed to\n      check if the block is still valid, and has not been invalidated\n      when an object file has been freed.  */\n-  struct blpy_block_object *source;\n-} block_syms_iterator_object;\n+  block_object *source;\n+};\n \n /* Require a valid block.  All access to block_object->block should be\n    gated by this call.  */\n@@ -293,7 +293,7 @@ set_block (block_object *obj, const struct block *block,\n   if (objfile)\n     {\n       obj->objfile = objfile;\n-      obj->next = ((struct blpy_block_object *)\n+      obj->next = ((block_object *)\n \t\t   objfile_data (objfile, blpy_objfile_data_key));\n       if (obj->next)\n \tobj->next->prev = obj;"
    },
    {
      "sha": "b3e8daf9321ecb018b75066bc577ac94dfe64ba2",
      "filename": "gdb/python/py-cmd.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-cmd.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -66,8 +66,6 @@ struct cmdpy_object\n   struct cmd_list_element *sub_list;\n };\n \n-typedef struct cmdpy_object cmdpy_object;\n-\n extern PyTypeObject cmdpy_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"cmdpy_object\");\n "
    },
    {
      "sha": "5832a568efc984608182d8d7bb8dda9423a4e4d6",
      "filename": "gdb/python/py-event.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-event.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-event.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-event.h?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -32,12 +32,12 @@\n #include \"py-event-types.def\"\n #undef GDB_PY_DEFINE_EVENT_TYPE\n \n-typedef struct\n+struct event_object\n {\n   PyObject_HEAD\n \n   PyObject *dict;\n-} event_object;\n+};\n \n extern int emit_continue_event (ptid_t ptid);\n extern int emit_exited_event (const LONGEST *exit_code, struct inferior *inf);"
    },
    {
      "sha": "1cd0d9ba2531d5a09999dc29da512e2628dd796c",
      "filename": "gdb/python/py-events.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-events.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-events.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-events.h?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -27,17 +27,17 @@\n /* Stores a list of objects to be notified when the event for which this\n    registry tracks occurs.  */\n \n-typedef struct\n+struct eventregistry_object\n {\n   PyObject_HEAD\n \n   PyObject *callbacks;\n-} eventregistry_object;\n+};\n \n /* Struct holding references to event registries both in python and c.\n    This is meant to be a singleton.  */\n \n-typedef struct\n+struct events_object\n {\n #define GDB_PY_DEFINE_EVENT(name)\t\t\\\n   eventregistry_object *name;\n@@ -46,7 +46,7 @@ typedef struct\n \n   PyObject *module;\n \n-} events_object;\n+};\n \n /* Python events singleton.  */\n extern events_object gdb_py_events;"
    },
    {
      "sha": "6b2b29d786464005f2fa96b88e9544da749fbce5",
      "filename": "gdb/python/py-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-frame.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -28,7 +28,7 @@\n #include \"symfile.h\"\n #include \"objfiles.h\"\n \n-typedef struct {\n+struct frame_object {\n   PyObject_HEAD\n   struct frame_id frame_id;\n   struct gdbarch *gdbarch;\n@@ -42,7 +42,7 @@ typedef struct {\n      ID as the  previous frame).  Whenever get_prev_frame returns NULL, we\n      record the frame_id of the next frame and set FRAME_ID_IS_NEXT to 1.  */\n   int frame_id_is_next;\n-} frame_object;\n+};\n \n /* Require a valid frame.  This must be called inside a TRY_CATCH, or\n    another context in which a gdb exception is allowed.  */"
    },
    {
      "sha": "89a822192c8ec65c7381a3468d47485fa42e4e88",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -61,14 +61,14 @@ extern PyTypeObject inferior_object_type\n \n static const struct inferior_data *infpy_inf_data_key;\n \n-typedef struct {\n+struct membuf_object {\n   PyObject_HEAD\n   void *buffer;\n \n   /* These are kept just for mbpy_str.  */\n   CORE_ADDR addr;\n   CORE_ADDR length;\n-} membuf_object;\n+};\n \n extern PyTypeObject membuf_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"membuf_object\");"
    },
    {
      "sha": "374fb90ca47f52e5dff8031303661537067050dc",
      "filename": "gdb/python/py-instruction.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-instruction.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-instruction.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-instruction.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -28,9 +28,9 @@ PyTypeObject py_insn_type = {\n \n /* Python instruction object.  */\n \n-typedef struct {\n+struct py_insn_obj {\n   PyObject_HEAD\n-} py_insn_obj;\n+};\n \n /* Getter function for gdb.Instruction attributes.  */\n "
    },
    {
      "sha": "070923cddeb0addc81e12ca842425164d3424d1f",
      "filename": "gdb/python/py-lazy-string.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-lazy-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-lazy-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-lazy-string.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -24,7 +24,7 @@\n #include \"valprint.h\"\n #include \"language.h\"\n \n-typedef struct {\n+struct lazy_string_object {\n   PyObject_HEAD\n \n   /*  Holds the address of the lazy string.  */\n@@ -51,7 +51,7 @@ typedef struct {\n      This is recorded as a PyObject so that we take advantage of support for\n      preserving the type should its owning objfile go away.  */\n   PyObject *type;\n-} lazy_string_object;\n+};\n \n extern PyTypeObject lazy_string_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"lazy_string_object\");"
    },
    {
      "sha": "e384d954d8d6288120ffd3fb59778b117acea6f0",
      "filename": "gdb/python/py-linetable.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-linetable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-linetable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-linetable.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -20,37 +20,37 @@\n #include \"defs.h\"\n #include \"python-internal.h\"\n \n-typedef struct {\n+struct linetable_entry_object {\n   PyObject_HEAD\n   /* The line table source line.  */\n   int line;\n   /* The pc associated with the source line.  */\n   CORE_ADDR pc;\n-} linetable_entry_object;\n+};\n \n extern PyTypeObject linetable_entry_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"linetable_entry_object\");\n \n-typedef struct {\n+struct linetable_object {\n   PyObject_HEAD\n   /* The symtab python object.  We store the Python object here as the\n      underlying symtab can become invalid, and we have to run validity\n      checks on it.  */\n   PyObject *symtab;\n-} linetable_object;\n+};\n \n extern PyTypeObject linetable_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"linetable_object\");\n \n-typedef struct {\n+struct ltpy_iterator_object {\n   PyObject_HEAD\n   /* The current entry in the line table for the iterator  */\n   int current_index;\n   /* Pointer back to the original source line table object.  Needed to\n      check if the line table is still valid, and has not been invalidated\n      when an object file has been freed.  */\n   PyObject *source;\n-} ltpy_iterator_object;\n+};\n \n extern PyTypeObject ltpy_iterator_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"ltpy_iterator_object\");"
    },
    {
      "sha": "e88c77eb03ad06a3b050dd4d47152a1d5b483ad5",
      "filename": "gdb/python/py-objfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-objfile.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -25,7 +25,7 @@\n #include \"build-id.h\"\n #include \"symtab.h\"\n \n-typedef struct\n+struct objfile_object\n {\n   PyObject_HEAD\n \n@@ -50,7 +50,7 @@ typedef struct\n \n   /* The debug method matcher list.  */\n   PyObject *xmethods;\n-} objfile_object;\n+};\n \n extern PyTypeObject objfile_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"objfile_object\");"
    },
    {
      "sha": "df45e563b4da7a730b7ceb69f644f2c9005f33b6",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -91,8 +91,6 @@ struct parmpy_object\n   const char **enumeration;\n };\n \n-typedef struct parmpy_object parmpy_object;\n-\n extern PyTypeObject parmpy_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"parmpy_object\");\n "
    },
    {
      "sha": "ac8f6d577277183810f199cec71c3930dbb93905",
      "filename": "gdb/python/py-progspace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-progspace.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -27,7 +27,7 @@\n #include \"solib.h\"\n #include \"block.h\"\n \n-typedef struct\n+struct pspace_object\n {\n   PyObject_HEAD\n \n@@ -52,7 +52,7 @@ typedef struct\n \n   /* The debug method list.  */\n   PyObject *xmethods;\n-} pspace_object;\n+};\n \n extern PyTypeObject pspace_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"pspace_object\");"
    },
    {
      "sha": "93c3f7c93128842b55d750b12a71086e1a9c7b7b",
      "filename": "gdb/python/py-record-btrace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-record-btrace.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -40,7 +40,7 @@\n \n /* Python object for btrace record lists.  */\n \n-typedef struct {\n+struct btpy_list_object {\n   PyObject_HEAD\n \n   /* The thread this list belongs to.  */\n@@ -57,7 +57,7 @@ typedef struct {\n \n   /* Either &BTPY_CALL_TYPE or &RECPY_INSN_TYPE.  */\n   PyTypeObject* element_type;\n-} btpy_list_object;\n+};\n \n /* Python type for btrace lists.  */\n "
    },
    {
      "sha": "3ea7833eb35dc10c2f28f77b4d33af816478651b",
      "filename": "gdb/python/py-record.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-record.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-record.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-record.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -50,7 +50,7 @@ PyTypeObject recpy_gap_type = {\n };\n \n /* Python RecordGap object.  */\n-typedef struct\n+struct recpy_gap_object\n {\n   PyObject_HEAD\n \n@@ -62,7 +62,7 @@ typedef struct\n \n   /* Element number.  */\n   Py_ssize_t number;\n-} recpy_gap_object;\n+};\n \n /* Implementation of record.method.  */\n "
    },
    {
      "sha": "b771f321ce20ff1c90ebb9d9ef8f48de5a565e69",
      "filename": "gdb/python/py-record.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-record.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-record.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-record.h?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -25,7 +25,7 @@\n #include \"record.h\"\n \n /* Python Record object.  */\n-typedef struct\n+struct recpy_record_object\n {\n   PyObject_HEAD\n \n@@ -34,12 +34,12 @@ typedef struct\n \n   /* The current recording method.  */\n   enum record_method method;\n-} recpy_record_object;\n+};\n \n /* Python recorded element object.  This is generic enough to represent\n    recorded instructions as well as recorded function call segments, hence the\n    generic name.  */\n-typedef struct\n+struct recpy_element_object\n {\n   PyObject_HEAD\n \n@@ -51,7 +51,7 @@ typedef struct\n \n   /* Element number.  */\n   Py_ssize_t number;\n-} recpy_element_object;\n+};\n \n /* Python RecordInstruction type.  */\n extern PyTypeObject recpy_insn_type;"
    },
    {
      "sha": "7e9dc1d8cd7c6946d3fb31248ff8a1da0ce29042",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -30,7 +30,7 @@\n static struct gdbarch_data *gdbpy_register_object_data = NULL;\n \n /* Structure for iterator over register descriptors.  */\n-typedef struct {\n+struct register_descriptor_iterator_object {\n   PyObject_HEAD\n \n   /* The register group that the user is iterating over.  This will never\n@@ -42,46 +42,46 @@ typedef struct {\n \n   /* Pointer back to the architecture we're finding registers for.  */\n   struct gdbarch *gdbarch;\n-} register_descriptor_iterator_object;\n+};\n \n extern PyTypeObject register_descriptor_iterator_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"register_descriptor_iterator_object\");\n \n /* A register descriptor.  */\n-typedef struct {\n+struct register_descriptor_object {\n   PyObject_HEAD\n \n   /* The register this is a descriptor for.  */\n   int regnum;\n \n   /* The architecture this is a register for.  */\n   struct gdbarch *gdbarch;\n-} register_descriptor_object;\n+};\n \n extern PyTypeObject register_descriptor_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"register_descriptor_object\");\n \n /* Structure for iterator over register groups.  */\n-typedef struct {\n+struct reggroup_iterator_object {\n   PyObject_HEAD\n \n   /* The last register group returned.  Initially this will be NULL.  */\n   struct reggroup *reggroup;\n \n   /* Pointer back to the architecture we're finding registers for.  */\n   struct gdbarch *gdbarch;\n-} reggroup_iterator_object;\n+};\n \n extern PyTypeObject reggroup_iterator_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"reggroup_iterator_object\");\n \n /* A register group object.  */\n-typedef struct {\n+struct reggroup_object {\n   PyObject_HEAD\n \n   /* The register group being described.  */\n   struct reggroup *reggroup;\n-} reggroup_object;\n+};\n \n extern PyTypeObject reggroup_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"reggroup_object\");"
    },
    {
      "sha": "edcb51fcc1257d7ea181a7f71d8b4bb2c687eace",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -25,17 +25,17 @@\n #include \"objfiles.h\"\n #include \"symfile.h\"\n \n-typedef struct sympy_symbol_object {\n+struct symbol_object {\n   PyObject_HEAD\n   /* The GDB symbol structure this object is wrapping.  */\n   struct symbol *symbol;\n   /* A symbol object is associated with an objfile, so keep track with\n      doubly-linked list, rooted in the objfile.  This lets us\n      invalidate the underlying struct symbol when the objfile is\n      deleted.  */\n-  struct sympy_symbol_object *prev;\n-  struct sympy_symbol_object *next;\n-} symbol_object;\n+  symbol_object *prev;\n+  symbol_object *next;\n+};\n \n /* Require a valid symbol.  All access to symbol_object->symbol should be\n    gated by this call.  */\n@@ -307,7 +307,7 @@ set_symbol (symbol_object *obj, struct symbol *symbol)\n     {\n       struct objfile *objfile = symbol_objfile (symbol);\n \n-      obj->next = ((struct sympy_symbol_object *)\n+      obj->next = ((symbol_object *)\n \t\t   objfile_data (objfile, sympy_objfile_data_key));\n       if (obj->next)\n \tobj->next->prev = obj;"
    },
    {
      "sha": "33cb67cb9e2a3beef4ea9e61417f18dae7938050",
      "filename": "gdb/python/py-symtab.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symtab.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -25,17 +25,17 @@\n #include \"objfiles.h\"\n #include \"block.h\"\n \n-typedef struct stpy_symtab_object {\n+struct symtab_object {\n   PyObject_HEAD\n   /* The GDB Symbol table structure.  */\n   struct symtab *symtab;\n   /* A symtab object is associated with an objfile, so keep track with\n      a doubly-linked list, rooted in the objfile.  This allows\n      invalidation of the underlying struct symtab when the objfile is\n      deleted.  */\n-  struct stpy_symtab_object *prev;\n-  struct stpy_symtab_object *next;\n-} symtab_object;\n+  symtab_object *prev;\n+  symtab_object *next;\n+};\n \n extern PyTypeObject symtab_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"symtab_object\");\n@@ -54,7 +54,7 @@ static const struct objfile_data *stpy_objfile_data_key;\n       }\t\t\t\t\t\t\t \\\n   } while (0)\n \n-typedef struct salpy_sal_object {\n+struct sal_object {\n   PyObject_HEAD\n   /* The GDB Symbol table structure.  */\n   PyObject *symtab;\n@@ -64,9 +64,9 @@ typedef struct salpy_sal_object {\n      track with a doubly-linked list, rooted in the objfile.  This\n      allows invalidation of the underlying struct symtab_and_line\n      when the objfile is deleted.  */\n-  struct salpy_sal_object *prev;\n-  struct salpy_sal_object *next;\n-} sal_object;\n+  sal_object *prev;\n+  sal_object *next;\n+};\n \n extern PyTypeObject sal_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"sal_object\");\n@@ -378,8 +378,8 @@ set_sal (sal_object *sal_obj, struct symtab_and_line sal)\n       symtab *symtab = symtab_object_to_symtab (sal_obj->symtab);\n \n       sal_obj->next\n-\t= ((struct salpy_sal_object *) objfile_data (SYMTAB_OBJFILE (symtab),\n-\t\t\t\t\t\t     salpy_objfile_data_key));\n+\t= ((sal_object *) objfile_data (SYMTAB_OBJFILE (symtab),\n+\t\t\t\t\tsalpy_objfile_data_key));\n       if (sal_obj->next)\n \tsal_obj->next->prev = sal_obj;\n \n@@ -405,7 +405,7 @@ set_symtab (symtab_object *obj, struct symtab *symtab)\n   if (symtab)\n     {\n       obj->next\n-\t= ((struct stpy_symtab_object *)\n+\t= ((symtab_object *)\n \t   objfile_data (SYMTAB_OBJFILE (symtab), stpy_objfile_data_key));\n       if (obj->next)\n \tobj->next->prev = obj;"
    },
    {
      "sha": "1c7cacbddf32082999607ffadb9c28bc72504878",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -28,43 +28,43 @@\n #include \"language.h\"\n #include \"typeprint.h\"\n \n-typedef struct pyty_type_object\n+struct type_object\n {\n   PyObject_HEAD\n   struct type *type;\n \n   /* If a Type object is associated with an objfile, it is kept on a\n      doubly-linked list, rooted in the objfile.  This lets us copy the\n      underlying struct type when the objfile is deleted.  */\n-  struct pyty_type_object *prev;\n-  struct pyty_type_object *next;\n-} type_object;\n+  struct type_object *prev;\n+  struct type_object *next;\n+};\n \n extern PyTypeObject type_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"type_object\");\n \n /* A Field object.  */\n-typedef struct pyty_field_object\n+struct field_object\n {\n   PyObject_HEAD\n \n   /* Dictionary holding our attributes.  */\n   PyObject *dict;\n-} field_object;\n+};\n \n extern PyTypeObject field_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"field_object\");\n \n /* A type iterator object.  */\n-typedef struct {\n+struct typy_iterator_object {\n   PyObject_HEAD\n   /* The current field index.  */\n   int field;\n   /* What to return.  */\n   enum gdbpy_iter_kind kind;\n   /* Pointer back to the original source type object.  */\n-  struct pyty_type_object *source;\n-} typy_iterator_object;\n+  type_object *source;\n+};\n \n extern PyTypeObject type_iterator_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"typy_iterator_object\");\n@@ -1101,7 +1101,7 @@ set_type (type_object *obj, struct type *type)\n     {\n       struct objfile *objfile = TYPE_OBJFILE (type);\n \n-      obj->next = ((struct pyty_type_object *)\n+      obj->next = ((type_object *)\n \t\t   objfile_data (objfile, typy_objfile_data_key));\n       if (obj->next)\n \tobj->next->prev = obj;"
    },
    {
      "sha": "c01e6b1aa1da0b0876503060ed264d1924b4cf42",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -31,7 +31,7 @@\n #define TRACE_PY_UNWIND(level, args...) if (pyuw_debug >= level)  \\\n   { fprintf_unfiltered (gdb_stdlog, args); }\n \n-typedef struct\n+struct pending_frame_object\n {\n   PyObject_HEAD\n \n@@ -40,7 +40,7 @@ typedef struct\n \n   /* Its architecture, passed by the sniffer caller.  */\n   struct gdbarch *gdbarch;\n-} pending_frame_object;\n+};\n \n /* Saved registers array item.  */\n \n@@ -59,7 +59,7 @@ struct saved_reg\n /* The data we keep for the PyUnwindInfo: pending_frame, saved registers\n    and frame ID.  */\n \n-typedef struct\n+struct unwind_info_object\n {\n   PyObject_HEAD\n \n@@ -71,12 +71,12 @@ typedef struct\n \n   /* Saved registers array.  */\n   std::vector<saved_reg> *saved_regs;\n-} unwind_info_object;\n+};\n \n /* The data we keep for a frame we can unwind: frame ID and an array of\n    (register_number, register_value) pairs.  */\n \n-typedef struct\n+struct cached_frame_info\n {\n   /* Frame ID.  */\n   struct frame_id frame_id;\n@@ -88,7 +88,7 @@ typedef struct\n   int reg_count;\n \n   cached_reg_t reg[];\n-} cached_frame_info;\n+};\n \n extern PyTypeObject pending_frame_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"pending_frame_object\");"
    },
    {
      "sha": "c1ff8e8eca94b97d4eda4976021edc6dc64071cd",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -53,15 +53,15 @@\n #define builtin_type_pychar \\\n   language_string_char_type (python_language, python_gdbarch)\n \n-typedef struct value_object {\n+struct value_object {\n   PyObject_HEAD\n   struct value_object *next;\n   struct value_object *prev;\n   struct value *value;\n   PyObject *address;\n   PyObject *type;\n   PyObject *dynamic_type;\n-} value_object;\n+};\n \n /* List of all values which are currently exposed to Python. It is\n    maintained so that when an objfile is discarded, preserve_values"
    },
    {
      "sha": "3fdfedefbea1fb5fe8740c11975f4fdf6618383a",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f99b517750fd5ab392056fcc8868fc15641ec502/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=f99b517750fd5ab392056fcc8868fc15641ec502",
      "patch": "@@ -318,7 +318,7 @@ extern PyTypeObject frame_object_type\n extern PyTypeObject thread_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"thread_object\");\n \n-typedef struct gdbpy_breakpoint_object\n+struct gdbpy_breakpoint_object\n {\n   PyObject_HEAD\n \n@@ -331,7 +331,7 @@ typedef struct gdbpy_breakpoint_object\n \n   /* 1 is this is a FinishBreakpoint object, 0 otherwise.  */\n   int is_finish_bp;\n-} gdbpy_breakpoint_object;\n+};\n \n /* Require that BREAKPOINT be a valid breakpoint ID; throw a Python\n    exception if it is invalid.  */\n@@ -361,7 +361,7 @@ typedef struct gdbpy_breakpoint_object\n extern gdbpy_breakpoint_object *bppy_pending_object;\n \n \n-typedef struct\n+struct thread_object\n {\n   PyObject_HEAD\n \n@@ -370,7 +370,7 @@ typedef struct\n \n   /* The Inferior object to which this thread belongs.  */\n   PyObject *inf_obj;\n-} thread_object;\n+};\n \n struct inferior_object;\n "
    }
  ]
}