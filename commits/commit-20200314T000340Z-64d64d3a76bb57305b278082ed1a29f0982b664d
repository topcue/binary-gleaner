{
  "sha": "64d64d3a76bb57305b278082ed1a29f0982b664d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjRkNjRkM2E3NmJiNTczMDViMjc4MDgyZWQxYTI5ZjA5ODJiNjY0ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:40Z"
    },
    "message": "Rewrite pascal_value_print_inner\n\nThis rewrites pascal_value_print_inner, copying in the body of\npascal_val_print_inner and adusting as needed.  This will form the\nbase of future changes to fully convert this to using the value-based\nAPI.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* p-valprint.c (pascal_value_print_inner): Rewrite.",
    "tree": {
      "sha": "f7f5b431ae4892dc47142ed8f5c48c3f86cb985e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f7f5b431ae4892dc47142ed8f5c48c3f86cb985e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64d64d3a76bb57305b278082ed1a29f0982b664d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64d64d3a76bb57305b278082ed1a29f0982b664d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64d64d3a76bb57305b278082ed1a29f0982b664d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64d64d3a76bb57305b278082ed1a29f0982b664d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6a95a1f58dd9dabcade13f7a332eed601baf25f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a95a1f58dd9dabcade13f7a332eed601baf25f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6a95a1f58dd9dabcade13f7a332eed601baf25f8"
    }
  ],
  "stats": {
    "total": 342,
    "additions": 340,
    "deletions": 2
  },
  "files": [
    {
      "sha": "07b5d627ea4ad8523d72db919556c96d216f04e3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64d64d3a76bb57305b278082ed1a29f0982b664d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64d64d3a76bb57305b278082ed1a29f0982b664d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=64d64d3a76bb57305b278082ed1a29f0982b664d",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* p-valprint.c (pascal_value_print_inner): Rewrite.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* f-valprint.c (f_value_print_innner): Rewrite."
    },
    {
      "sha": "7a54d30e980e8a941bbd4c8a97e3394f27ca6013",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 336,
      "deletions": 2,
      "changes": 338,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64d64d3a76bb57305b278082ed1a29f0982b664d/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64d64d3a76bb57305b278082ed1a29f0982b664d/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=64d64d3a76bb57305b278082ed1a29f0982b664d",
      "patch": "@@ -434,8 +434,342 @@ pascal_value_print_inner (struct value *val, struct ui_file *stream,\n \t\t\t  const struct value_print_options *options)\n \n {\n-  pascal_val_print (value_type (val), value_embedded_offset (val),\n-\t\t    value_address (val), stream, recurse, val, options);\n+  struct type *type = check_typedef (value_type (val));\n+  struct gdbarch *gdbarch = get_type_arch (type);\n+  enum bfd_endian byte_order = type_byte_order (type);\n+  unsigned int i = 0;\t/* Number of characters printed */\n+  unsigned len;\n+  struct type *elttype;\n+  unsigned eltlen;\n+  int length_pos, length_size, string_pos;\n+  struct type *char_type;\n+  CORE_ADDR addr;\n+  int want_space = 0;\n+  const gdb_byte *valaddr = value_contents_for_printing (val);\n+\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_ARRAY:\n+      {\n+\tLONGEST low_bound, high_bound;\n+\n+\tif (get_array_bounds (type, &low_bound, &high_bound))\n+\t  {\n+\t    len = high_bound - low_bound + 1;\n+\t    elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\t    eltlen = TYPE_LENGTH (elttype);\n+\t    if (options->prettyformat_arrays)\n+\t      {\n+\t\tprint_spaces_filtered (2 + 2 * recurse, stream);\n+\t      }\n+\t    /* If 's' format is used, try to print out as string.\n+\t       If no format is given, print as string if element type\n+\t       is of TYPE_CODE_CHAR and element size is 1,2 or 4.  */\n+\t    if (options->format == 's'\n+\t\t|| ((eltlen == 1 || eltlen == 2 || eltlen == 4)\n+\t\t    && TYPE_CODE (elttype) == TYPE_CODE_CHAR\n+\t\t    && options->format == 0))\n+\t      {\n+\t\t/* If requested, look for the first null char and only print\n+\t\t   elements up to it.  */\n+\t\tif (options->stop_print_at_null)\n+\t\t  {\n+\t\t    unsigned int temp_len;\n+\n+\t\t    /* Look for a NULL char.  */\n+\t\t    for (temp_len = 0;\n+\t\t\t extract_unsigned_integer (valaddr + temp_len * eltlen,\n+\t\t\t\t\t\t   eltlen, byte_order)\n+\t\t\t   && temp_len < len && temp_len < options->print_max;\n+\t\t\t temp_len++);\n+\t\t    len = temp_len;\n+\t\t  }\n+\n+\t\tLA_PRINT_STRING (stream, TYPE_TARGET_TYPE (type),\n+\t\t\t\t valaddr, len, NULL, 0, options);\n+\t\ti = len;\n+\t      }\n+\t    else\n+\t      {\n+\t\tfprintf_filtered (stream, \"{\");\n+\t\t/* If this is a virtual function table, print the 0th\n+\t\t   entry specially, and the rest of the members normally.  */\n+\t\tif (pascal_object_is_vtbl_ptr_type (elttype))\n+\t\t  {\n+\t\t    i = 1;\n+\t\t    fprintf_filtered (stream, \"%d vtable entries\", len - 1);\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    i = 0;\n+\t\t  }\n+\t\tvalue_print_array_elements (val, stream, recurse, options, i);\n+\t\tfprintf_filtered (stream, \"}\");\n+\t      }\n+\t    break;\n+\t  }\n+\t/* Array of unspecified length: treat like pointer to first elt.  */\n+\taddr = value_address (val);\n+      }\n+      goto print_unpacked_pointer;\n+\n+    case TYPE_CODE_PTR:\n+      if (options->format && options->format != 's')\n+\t{\n+\t  value_print_scalar_formatted (val, options, 0, stream);\n+\t  break;\n+\t}\n+      if (options->vtblprint && pascal_object_is_vtbl_ptr_type (type))\n+\t{\n+\t  /* Print the unmangled name if desired.  */\n+\t  /* Print vtable entry - we only get here if we ARE using\n+\t     -fvtable_thunks.  (Otherwise, look under TYPE_CODE_STRUCT.)  */\n+\t  /* Extract the address, assume that it is unsigned.  */\n+\t  addr = extract_unsigned_integer (valaddr,\n+\t\t\t\t\t   TYPE_LENGTH (type), byte_order);\n+\t  print_address_demangle (options, gdbarch, addr, stream, demangle);\n+\t  break;\n+\t}\n+      check_typedef (TYPE_TARGET_TYPE (type));\n+\n+      addr = unpack_pointer (type, valaddr);\n+    print_unpacked_pointer:\n+      elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+      if (TYPE_CODE (elttype) == TYPE_CODE_FUNC)\n+\t{\n+\t  /* Try to print what function it points to.  */\n+\t  print_address_demangle (options, gdbarch, addr, stream, demangle);\n+\t  return;\n+\t}\n+\n+      if (options->addressprint && options->format != 's')\n+\t{\n+\t  fputs_filtered (paddress (gdbarch, addr), stream);\n+\t  want_space = 1;\n+\t}\n+\n+      /* For a pointer to char or unsigned char, also print the string\n+\t pointed to, unless pointer is null.  */\n+      if (((TYPE_LENGTH (elttype) == 1\n+\t   && (TYPE_CODE (elttype) == TYPE_CODE_INT\n+\t      || TYPE_CODE (elttype) == TYPE_CODE_CHAR))\n+\t  || ((TYPE_LENGTH (elttype) == 2 || TYPE_LENGTH (elttype) == 4)\n+\t      && TYPE_CODE (elttype) == TYPE_CODE_CHAR))\n+\t  && (options->format == 0 || options->format == 's')\n+\t  && addr != 0)\n+\t{\n+\t  if (want_space)\n+\t    fputs_filtered (\" \", stream);\n+\t  /* No wide string yet.  */\n+\t  i = val_print_string (elttype, NULL, addr, -1, stream, options);\n+\t}\n+      /* Also for pointers to pascal strings.  */\n+      /* Note: this is Free Pascal specific:\n+\t as GDB does not recognize stabs pascal strings\n+\t Pascal strings are mapped to records\n+\t with lowercase names PM.  */\n+      if (is_pascal_string_type (elttype, &length_pos, &length_size,\n+\t\t\t\t &string_pos, &char_type, NULL)\n+\t  && addr != 0)\n+\t{\n+\t  ULONGEST string_length;\n+\t  gdb_byte *buffer;\n+\n+\t  if (want_space)\n+\t    fputs_filtered (\" \", stream);\n+\t  buffer = (gdb_byte *) xmalloc (length_size);\n+\t  read_memory (addr + length_pos, buffer, length_size);\n+\t  string_length = extract_unsigned_integer (buffer, length_size,\n+\t\t\t\t\t\t    byte_order);\n+\t  xfree (buffer);\n+\t  i = val_print_string (char_type, NULL,\n+\t\t\t\taddr + string_pos, string_length,\n+\t\t\t\tstream, options);\n+\t}\n+      else if (pascal_object_is_vtbl_member (type))\n+\t{\n+\t  /* Print vtbl's nicely.  */\n+\t  CORE_ADDR vt_address = unpack_pointer (type, valaddr);\n+\t  struct bound_minimal_symbol msymbol =\n+\t    lookup_minimal_symbol_by_pc (vt_address);\n+\n+\t  /* If 'symbol_print' is set, we did the work above.  */\n+\t  if (!options->symbol_print\n+\t      && (msymbol.minsym != NULL)\n+\t      && (vt_address == BMSYMBOL_VALUE_ADDRESS (msymbol)))\n+\t    {\n+\t      if (want_space)\n+\t\tfputs_filtered (\" \", stream);\n+\t      fputs_filtered (\"<\", stream);\n+\t      fputs_filtered (msymbol.minsym->print_name (), stream);\n+\t      fputs_filtered (\">\", stream);\n+\t      want_space = 1;\n+\t    }\n+\t  if (vt_address && options->vtblprint)\n+\t    {\n+\t      struct value *vt_val;\n+\t      struct symbol *wsym = NULL;\n+\t      struct type *wtype;\n+\n+\t      if (want_space)\n+\t\tfputs_filtered (\" \", stream);\n+\n+\t      if (msymbol.minsym != NULL)\n+\t\t{\n+\t\t  const char *search_name = msymbol.minsym->search_name ();\n+\t\t  wsym = lookup_symbol_search_name (search_name, NULL,\n+\t\t\t\t\t\t    VAR_DOMAIN).symbol;\n+\t\t}\n+\n+\t      if (wsym)\n+\t\t{\n+\t\t  wtype = SYMBOL_TYPE (wsym);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  wtype = TYPE_TARGET_TYPE (type);\n+\t\t}\n+\t      vt_val = value_at (wtype, vt_address);\n+\t      common_val_print (vt_val, stream, recurse + 1, options,\n+\t\t\t\tcurrent_language);\n+\t      if (options->prettyformat)\n+\t\t{\n+\t\t  fprintf_filtered (stream, \"\\n\");\n+\t\t  print_spaces_filtered (2 + 2 * recurse, stream);\n+\t\t}\n+\t    }\n+\t}\n+\n+      return;\n+\n+    case TYPE_CODE_REF:\n+    case TYPE_CODE_ENUM:\n+    case TYPE_CODE_FLAGS:\n+    case TYPE_CODE_FUNC:\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_INT:\n+    case TYPE_CODE_FLT:\n+    case TYPE_CODE_VOID:\n+    case TYPE_CODE_ERROR:\n+    case TYPE_CODE_UNDEF:\n+    case TYPE_CODE_BOOL:\n+    case TYPE_CODE_CHAR:\n+      generic_value_print (val, stream, recurse, options, &p_decorations);\n+      break;\n+\n+    case TYPE_CODE_UNION:\n+      if (recurse && !options->unionprint)\n+\t{\n+\t  fprintf_filtered (stream, \"{...}\");\n+\t  break;\n+\t}\n+      /* Fall through.  */\n+    case TYPE_CODE_STRUCT:\n+      if (options->vtblprint && pascal_object_is_vtbl_ptr_type (type))\n+\t{\n+\t  /* Print the unmangled name if desired.  */\n+\t  /* Print vtable entry - we only get here if NOT using\n+\t     -fvtable_thunks.  (Otherwise, look under TYPE_CODE_PTR.)  */\n+\t  /* Extract the address, assume that it is unsigned.  */\n+\t  print_address_demangle\n+\t    (options, gdbarch,\n+\t     extract_unsigned_integer (valaddr\n+\t\t\t\t       + TYPE_FIELD_BITPOS (type,\n+\t\t\t\t\t\t\t    VTBL_FNADDR_OFFSET) / 8,\n+\t\t\t\t       TYPE_LENGTH (TYPE_FIELD_TYPE (type,\n+\t\t\t\t\t\t\t\t     VTBL_FNADDR_OFFSET)),\n+\t\t\t\t       byte_order),\n+\t     stream, demangle);\n+\t}\n+      else\n+\t{\n+          if (is_pascal_string_type (type, &length_pos, &length_size,\n+                                     &string_pos, &char_type, NULL))\n+\t    {\n+\t      len = extract_unsigned_integer (valaddr + length_pos,\n+\t\t\t\t\t      length_size, byte_order);\n+\t      LA_PRINT_STRING (stream, char_type, valaddr + string_pos,\n+\t\t\t       len, NULL, 0, options);\n+\t    }\n+\t  else\n+\t    pascal_object_print_value_fields (type, valaddr, 0,\n+\t\t\t\t\t      value_address (val), stream,\n+\t\t\t\t\t      recurse, val, options,\n+\t\t\t\t\t      NULL, 0);\n+\t}\n+      break;\n+\n+    case TYPE_CODE_SET:\n+      elttype = TYPE_INDEX_TYPE (type);\n+      elttype = check_typedef (elttype);\n+      if (TYPE_STUB (elttype))\n+\t{\n+\t  fprintf_styled (stream, metadata_style.style (), \"<incomplete type>\");\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  struct type *range = elttype;\n+\t  LONGEST low_bound, high_bound;\n+\t  int need_comma = 0;\n+\n+\t  fputs_filtered (\"[\", stream);\n+\n+\t  int bound_info = get_discrete_bounds (range, &low_bound, &high_bound);\n+\t  if (low_bound == 0 && high_bound == -1 && TYPE_LENGTH (type) > 0)\n+\t    {\n+\t      /* If we know the size of the set type, we can figure out the\n+\t      maximum value.  */\n+\t      bound_info = 0;\n+\t      high_bound = TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1;\n+\t      TYPE_HIGH_BOUND (range) = high_bound;\n+\t    }\n+\tmaybe_bad_bstring:\n+\t  if (bound_info < 0)\n+\t    {\n+\t      fputs_styled (\"<error value>\", metadata_style.style (), stream);\n+\t      goto done;\n+\t    }\n+\n+\t  for (i = low_bound; i <= high_bound; i++)\n+\t    {\n+\t      int element = value_bit_index (type, valaddr, i);\n+\n+\t      if (element < 0)\n+\t\t{\n+\t\t  i = element;\n+\t\t  goto maybe_bad_bstring;\n+\t\t}\n+\t      if (element)\n+\t\t{\n+\t\t  if (need_comma)\n+\t\t    fputs_filtered (\", \", stream);\n+\t\t  print_type_scalar (range, i, stream);\n+\t\t  need_comma = 1;\n+\n+\t\t  if (i + 1 <= high_bound\n+\t\t      && value_bit_index (type, valaddr, ++i))\n+\t\t    {\n+\t\t      int j = i;\n+\n+\t\t      fputs_filtered (\"..\", stream);\n+\t\t      while (i + 1 <= high_bound\n+\t\t\t     && value_bit_index (type, valaddr, ++i))\n+\t\t\tj = i;\n+\t\t      print_type_scalar (range, j, stream);\n+\t\t    }\n+\t\t}\n+\t    }\n+\tdone:\n+\t  fputs_filtered (\"]\", stream);\n+\t}\n+      break;\n+\n+    default:\n+      error (_(\"Invalid pascal type code %d in symbol table.\"),\n+\t     TYPE_CODE (type));\n+    }\n }\n \n \f"
    }
  ]
}