{
  "sha": "055c879fcf242e43a6ef8190f83905109922da93",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDU1Yzg3OWZjZjI0MmU0M2E2ZWY4MTkwZjgzOTA1MTA5OTIyZGE5Mw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:58:38Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:58:38Z"
    },
    "message": "gdb: remove iterate_over_bp_locations function\n\nRemove it, change users (well, a single one) to use all_bp_locations.\nThis requires moving all_bp_locations to breakpoint.h to expose it.\n\ngdb/ChangeLog:\n\n\t* breakpoint.h (iterate_over_bp_locations): Remove.  Update\n\tusers to use all_bp_locations.\n\t(all_bp_locations): New.\n\t* breakpoint.c (all_bp_locations): Make non-static.\n\t(iterate_over_bp_locations): Remove.\n\nChange-Id: Iaf1f716d6c2c5b2975579b3dc113a86f5d0975be",
    "tree": {
      "sha": "540862da9c8482b7adfe5151f0d32f42d2445cdd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/540862da9c8482b7adfe5151f0d32f42d2445cdd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/055c879fcf242e43a6ef8190f83905109922da93",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/055c879fcf242e43a6ef8190f83905109922da93",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/055c879fcf242e43a6ef8190f83905109922da93",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/055c879fcf242e43a6ef8190f83905109922da93/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 25,
    "deletions": 29
  },
  "files": [
    {
      "sha": "66a16df8c9523ead5ed27298c171ee348ecf8821",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/055c879fcf242e43a6ef8190f83905109922da93/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/055c879fcf242e43a6ef8190f83905109922da93/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=055c879fcf242e43a6ef8190f83905109922da93",
      "patch": "@@ -1,3 +1,11 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* breakpoint.h (iterate_over_bp_locations): Remove.  Update\n+\tusers to use all_bp_locations.\n+\t(all_bp_locations): New.\n+\t* breakpoint.c (all_bp_locations): Make non-static.\n+\t(iterate_over_bp_locations): Remove.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* breakpoint.h (iterate_over_breakpoints): Remove.  Update"
    },
    {
      "sha": "4d5c0dd5982017755298b798402d81b05e35868e",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 10,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/055c879fcf242e43a6ef8190f83905109922da93/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/055c879fcf242e43a6ef8190f83905109922da93/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=055c879fcf242e43a6ef8190f83905109922da93",
      "patch": "@@ -521,7 +521,9 @@ all_tracepoints ()\n \n static std::vector<bp_location *> bp_locations;\n \n-static const std::vector<bp_location *> &\n+/* See breakpoint.h.  */\n+\n+const std::vector<bp_location *> &\n all_bp_locations ()\n {\n   return bp_locations;\n@@ -2913,15 +2915,6 @@ insert_breakpoints (void)\n   update_global_location_list (UGLL_INSERT);\n }\n \n-/* Invoke CALLBACK for each of bp_location.  */\n-\n-void\n-iterate_over_bp_locations (gdb::function_view<void (bp_location *)> callback)\n-{\n-  for (bp_location *loc : all_bp_locations ())\n-    callback (loc);\n-}\n-\n /* This is used when we need to synch breakpoint conditions between GDB and the\n    target.  It is the case with deleting and disabling of breakpoints when using\n    always-inserted mode.  */"
    },
    {
      "sha": "e40504f14ed3fe2b6be5d6393d7c3e6882dca0af",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/055c879fcf242e43a6ef8190f83905109922da93/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/055c879fcf242e43a6ef8190f83905109922da93/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=055c879fcf242e43a6ef8190f83905109922da93",
      "patch": "@@ -1313,9 +1313,6 @@ extern void breakpoint_init_inferior (enum inf_context);\n \n extern void breakpoint_auto_delete (bpstat);\n \n-extern void iterate_over_bp_locations\n-  (gdb::function_view<void (bp_location *)> callback);\n-\n /* Return the chain of command lines to execute when this breakpoint\n    is hit.  */\n extern struct command_line *breakpoint_commands (struct breakpoint *b);\n@@ -1755,6 +1752,10 @@ using tracepoint_range = next_adapter<breakpoint, tracepoint_iterator>;\n \n tracepoint_range all_tracepoints ();\n \n+/* Return a range to iterate over all breakpoint locations.  */\n+\n+const std::vector<bp_location *> &all_bp_locations ();\n+\n /* Nonzero if the specified PC cannot be a location where functions\n    have been inlined.  */\n "
    },
    {
      "sha": "e3b8abc4929ce31cb906aa9147fd58709e2e0c88",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/055c879fcf242e43a6ef8190f83905109922da93/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/055c879fcf242e43a6ef8190f83905109922da93/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=055c879fcf242e43a6ef8190f83905109922da93",
      "patch": "@@ -1719,29 +1719,23 @@ struct record_full_breakpoint\n    active.  */\n static std::vector<record_full_breakpoint> record_full_breakpoints;\n \n-static void\n-record_full_sync_record_breakpoints (struct bp_location *loc)\n-{\n-  if (loc->loc_type != bp_loc_software_breakpoint)\n-      return;\n-\n-  if (loc->inserted)\n-    {\n-      record_full_breakpoints.emplace_back\n-\t(loc->target_info.placed_address_space,\n-\t loc->target_info.placed_address,\n-\t 1);\n-    }\n-}\n-\n /* Sync existing breakpoints to record_full_breakpoints.  */\n \n static void\n record_full_init_record_breakpoints (void)\n {\n   record_full_breakpoints.clear ();\n \n-  iterate_over_bp_locations (record_full_sync_record_breakpoints);\n+  for (bp_location *loc : all_bp_locations ())\n+    {\n+      if (loc->loc_type != bp_loc_software_breakpoint)\n+\tcontinue;\n+\n+      if (loc->inserted)\n+\trecord_full_breakpoints.emplace_back\n+\t  (loc->target_info.placed_address_space,\n+\t   loc->target_info.placed_address, 1);\n+    }\n }\n \n /* Behavior is conditional on RECORD_FULL_IS_REPLAY.  We will not actually"
    }
  ]
}