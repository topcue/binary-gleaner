{
  "sha": "a269fbf12dcc621c45030ab9956ae28053878b7c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTI2OWZiZjEyZGNjNjIxYzQ1MDMwYWI5OTU2YWUyODA1Mzg3OGI3Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-27T19:48:44Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-10T20:34:09Z"
    },
    "message": "Change solib-aix.c to use type-safe registry\n\nThis changes solib-aix.c to use the type-safe registry, and removes a\nuse of VEC in the process.\n\ngdb/ChangeLog\n2019-07-10  Tom Tromey  <tromey@adacore.com>\n\n\t* solib-aix.c (lm_info_aix_p): Remove typedef.  Don't define VEC.\n\t(struct solib_aix_inferior_data) <library_list>: Change type.\n\t(solib_aix_inferior_data_handle): Change type.\n\t(get_solib_aix_inferior_data): Update.\n\t(solib_aix_free_library_list): Remove.\n\t(library_list_start_library): Update.\n\t(solib_aix_parse_libraries, solib_aix_get_library_list): Change\n\treturn type.\n\t(solib_aix_get_library_list)\n\t(solib_aix_solib_create_inferior_hook, solib_aix_current_sos)\n\t(solib_aix_normal_stop_observer, _initialize_solib_aix): Update.",
    "tree": {
      "sha": "32942baf407fbdff25d915f3846cb07b1abf5084",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/32942baf407fbdff25d915f3846cb07b1abf5084"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a269fbf12dcc621c45030ab9956ae28053878b7c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a269fbf12dcc621c45030ab9956ae28053878b7c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a269fbf12dcc621c45030ab9956ae28053878b7c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a269fbf12dcc621c45030ab9956ae28053878b7c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c294730c54f15ea69b18025025c0f191e5876301",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c294730c54f15ea69b18025025c0f191e5876301",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c294730c54f15ea69b18025025c0f191e5876301"
    }
  ],
  "stats": {
    "total": 159,
    "additions": 62,
    "deletions": 97
  },
  "files": [
    {
      "sha": "fb01bd6b2d7067ec1ca0ad0008c41daf90ddd828",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a269fbf12dcc621c45030ab9956ae28053878b7c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a269fbf12dcc621c45030ab9956ae28053878b7c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a269fbf12dcc621c45030ab9956ae28053878b7c",
      "patch": "@@ -1,3 +1,17 @@\n+2019-07-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* solib-aix.c (lm_info_aix_p): Remove typedef.  Don't define VEC.\n+\t(struct solib_aix_inferior_data) <library_list>: Change type.\n+\t(solib_aix_inferior_data_handle): Change type.\n+\t(get_solib_aix_inferior_data): Update.\n+\t(solib_aix_free_library_list): Remove.\n+\t(library_list_start_library): Update.\n+\t(solib_aix_parse_libraries, solib_aix_get_library_list): Change\n+\treturn type.\n+\t(solib_aix_get_library_list)\n+\t(solib_aix_solib_create_inferior_hook, solib_aix_current_sos)\n+\t(solib_aix_normal_stop_observer, _initialize_solib_aix): Update.\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* solib-dsbt.c (struct dsbt_info): Add initializers."
    },
    {
      "sha": "d13b651944150fb0c7749558f2dafd95383020e3",
      "filename": "gdb/solib-aix.c",
      "status": "modified",
      "additions": 48,
      "deletions": 97,
      "changes": 145,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a269fbf12dcc621c45030ab9956ae28053878b7c/gdb/solib-aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a269fbf12dcc621c45030ab9956ae28053878b7c/gdb/solib-aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-aix.c?ref=a269fbf12dcc621c45030ab9956ae28053878b7c",
      "patch": "@@ -59,26 +59,23 @@ struct lm_info_aix : public lm_info_base\n   ULONGEST data_size = 0;\n };\n \n-typedef lm_info_aix *lm_info_aix_p;\n-DEF_VEC_P(lm_info_aix_p);\n-\n /* This module's per-inferior data.  */\n \n struct solib_aix_inferior_data\n {\n-  /* The list of shared libraries.  NULL if not computed yet.\n+  /* The list of shared libraries.\n \n      Note that the first element of this list is always the main\n      executable, which is not technically a shared library.  But\n      we need that information to perform its relocation, and\n      the same principles applied to shared libraries also apply\n      to the main executable.  So it's simpler to keep it as part\n      of this list.  */\n-  VEC (lm_info_aix_p) *library_list;\n+  gdb::optional<std::vector<lm_info_aix>> library_list;\n };\n \n /* Key to our per-inferior data.  */\n-static const struct inferior_data *solib_aix_inferior_data_handle;\n+static inferior_key<solib_aix_inferior_data> solib_aix_inferior_data_handle;\n \n /* Return this module's data for the given inferior.\n    If none is found, add a zero'ed one now.  */\n@@ -88,13 +85,9 @@ get_solib_aix_inferior_data (struct inferior *inf)\n {\n   struct solib_aix_inferior_data *data;\n \n-  data = ((struct solib_aix_inferior_data *)\n-\t  inferior_data (inf, solib_aix_inferior_data_handle));\n+  data = solib_aix_inferior_data_handle.get (inf);\n   if (data == NULL)\n-    {\n-      data = XCNEW (struct solib_aix_inferior_data);\n-      set_inferior_data (inf, solib_aix_inferior_data_handle, data);\n-    }\n+    data = solib_aix_inferior_data_handle.emplace (inf);\n \n   return data;\n }\n@@ -103,7 +96,7 @@ get_solib_aix_inferior_data (struct inferior *inf)\n \n /* Dummy implementation if XML support is not compiled in.  */\n \n-static VEC (lm_info_aix_p) *\n+static gdb::optional<std::vector<lm_info_aix>>\n solib_aix_parse_libraries (const char *library)\n {\n   static int have_warned;\n@@ -115,14 +108,7 @@ solib_aix_parse_libraries (const char *library)\n                  \"at compile time\"));\n     }\n \n-  return NULL;\n-}\n-\n-/* Dummy implementation if XML support is not compiled in.  */\n-\n-static void\n-solib_aix_free_library_list (void *p)\n-{\n+  return {};\n }\n \n #else /* HAVE_LIBEXPAT */\n@@ -137,30 +123,30 @@ library_list_start_library (struct gdb_xml_parser *parser,\n \t\t\t    void *user_data,\n \t\t\t    std::vector<gdb_xml_value> &attributes)\n {\n-  VEC (lm_info_aix_p) **list = (VEC (lm_info_aix_p) **) user_data;\n-  lm_info_aix *item = new lm_info_aix;\n+  std::vector<lm_info_aix> *list = (std::vector<lm_info_aix> *) user_data;\n+  lm_info_aix item;\n   struct gdb_xml_value *attr;\n \n   attr = xml_find_attribute (attributes, \"name\");\n-  item->filename = xstrdup ((const char *) attr->value.get ());\n+  item.filename = (const char *) attr->value.get ();\n \n   attr = xml_find_attribute (attributes, \"member\");\n   if (attr != NULL)\n-    item->member_name = xstrdup ((const char *) attr->value.get ());\n+    item.member_name = (const char *) attr->value.get ();\n \n   attr = xml_find_attribute (attributes, \"text_addr\");\n-  item->text_addr = * (ULONGEST *) attr->value.get ();\n+  item.text_addr = * (ULONGEST *) attr->value.get ();\n \n   attr = xml_find_attribute (attributes, \"text_size\");\n-  item->text_size = * (ULONGEST *) attr->value.get ();\n+  item.text_size = * (ULONGEST *) attr->value.get ();\n \n   attr = xml_find_attribute (attributes, \"data_addr\");\n-  item->data_addr = * (ULONGEST *) attr->value.get ();\n+  item.data_addr = * (ULONGEST *) attr->value.get ();\n \n   attr = xml_find_attribute (attributes, \"data_size\");\n-  item->data_size = * (ULONGEST *) attr->value.get ();\n+  item.data_size = * (ULONGEST *) attr->value.get ();\n \n-  VEC_safe_push (lm_info_aix_p, *list, item);\n+  list->push_back (std::move (item));\n }\n \n /* Handle the start of a <library-list-aix> element.  */\n@@ -180,25 +166,6 @@ library_list_start_list (struct gdb_xml_parser *parser,\n                    version);\n }\n \n-/* Discard the constructed library list.  */\n-\n-static void\n-solib_aix_free_library_list (void *p)\n-{\n-  VEC (lm_info_aix_p) **result = (VEC (lm_info_aix_p) **) p;\n-  lm_info_aix *info;\n-  int ix;\n-\n-  if (solib_aix_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"DEBUG: solib_aix_free_library_list\\n\");\n-\n-  for (ix = 0; VEC_iterate (lm_info_aix_p, *result, ix, info); ix++)\n-    delete info;\n-\n-  VEC_free (lm_info_aix_p, *result);\n-  *result = NULL;\n-}\n-\n /* The allowed elements and attributes for an AIX library list\n    described in XML format.  The root element is a <library-list-aix>.  */\n \n@@ -235,34 +202,26 @@ static const struct gdb_xml_element library_list_elements[] =\n };\n \n /* Parse LIBRARY, a string containing the loader info in XML format,\n-   and return an lm_info_aix_p vector.\n+   and return a vector of lm_info_aix objects.\n \n-   Return NULL if the parsing failed.  */\n+   Return an empty option if the parsing failed.  */\n \n-static VEC (lm_info_aix_p) *\n+static gdb::optional<std::vector<lm_info_aix>>\n solib_aix_parse_libraries (const char *library)\n {\n-  VEC (lm_info_aix_p) *result = NULL;\n-  auto cleanup = make_scope_exit ([&] ()\n-    {\n-      solib_aix_free_library_list (&result);\n-    });\n+  std::vector<lm_info_aix> result;\n \n   if (gdb_xml_parse_quick (_(\"aix library list\"), \"library-list-aix.dtd\",\n-                           library_list_elements, library, &result) == 0)\n-    {\n-      /* Parsed successfully, keep the result.  */\n-      cleanup.release ();\n-      return result;\n-    }\n+\t\t\t   library_list_elements, library, &result) == 0)\n+    return result;\n \n-  return NULL;\n+  return {};\n }\n \n #endif /* HAVE_LIBEXPAT */\n \n-/* Return the loader info for the given inferior (INF), or NULL if\n-   the list could not be computed.\n+/* Return the loader info for the given inferior (INF), or an empty\n+   option if the list could not be computed.\n \n    Cache the result in per-inferior data, so as to avoid recomputing it\n    each time this function is called.\n@@ -271,14 +230,14 @@ solib_aix_parse_libraries (const char *library)\n    is not NULL, then print a warning including WARNING_MSG and\n    a description of the error.  */\n \n-static VEC (lm_info_aix_p) *\n+static gdb::optional<std::vector<lm_info_aix>> &\n solib_aix_get_library_list (struct inferior *inf, const char *warning_msg)\n {\n   struct solib_aix_inferior_data *data;\n \n   /* If already computed, return the cached value.  */\n   data = get_solib_aix_inferior_data (inf);\n-  if (data->library_list != NULL)\n+  if (data->library_list.has_value ())\n     return data->library_list;\n \n   gdb::optional<gdb::char_vector> library_document\n@@ -288,7 +247,7 @@ solib_aix_get_library_list (struct inferior *inf, const char *warning_msg)\n     {\n       warning (_(\"%s (failed to read TARGET_OBJECT_LIBRARIES_AIX)\"),\n \t       warning_msg);\n-      return NULL;\n+      return data->library_list;\n     }\n \n   if (solib_aix_debug)\n@@ -297,11 +256,8 @@ solib_aix_get_library_list (struct inferior *inf, const char *warning_msg)\n \t\t\tlibrary_document->data ());\n \n   data->library_list = solib_aix_parse_libraries (library_document->data ());\n-  if (data->library_list == NULL && warning_msg != NULL)\n-    {\n-      warning (_(\"%s (missing XML support?)\"), warning_msg);\n-      return NULL;\n-    }\n+  if (!data->library_list.has_value () && warning_msg != NULL)\n+    warning (_(\"%s (missing XML support?)\"), warning_msg);\n \n   return data->library_list;\n }\n@@ -497,28 +453,25 @@ static void\n solib_aix_solib_create_inferior_hook (int from_tty)\n {\n   const char *warning_msg = \"unable to relocate main executable\";\n-  VEC (lm_info_aix_p) *library_list;\n-  lm_info_aix *exec_info;\n \n   /* We need to relocate the main executable...  */\n \n-  library_list = solib_aix_get_library_list (current_inferior (),\n-\t\t\t\t\t     warning_msg);\n-  if (library_list == NULL)\n+  gdb::optional<std::vector<lm_info_aix>> &library_list\n+    = solib_aix_get_library_list (current_inferior (), warning_msg);\n+  if (!library_list.has_value ())\n     return;  /* Warning already printed.  */\n \n-  if (VEC_length (lm_info_aix_p, library_list) < 1)\n+  if (library_list->empty ())\n     {\n       warning (_(\"unable to relocate main executable (no info from loader)\"));\n       return;\n     }\n \n-  exec_info = VEC_index (lm_info_aix_p, library_list, 0);\n-\n+  lm_info_aix &exec_info = (*library_list)[0];\n   if (symfile_objfile != NULL)\n     {\n       gdb::unique_xmalloc_ptr<struct section_offsets> offsets\n-\t= solib_aix_get_section_offsets (symfile_objfile, exec_info);\n+\t= solib_aix_get_section_offsets (symfile_objfile, &exec_info);\n \n       objfile_relocate (symfile_objfile, offsets.get ());\n     }\n@@ -530,45 +483,45 @@ static struct so_list *\n solib_aix_current_sos (void)\n {\n   struct so_list *start = NULL, *last = NULL;\n-  VEC (lm_info_aix_p) *library_list;\n-  lm_info_aix *info;\n   int ix;\n \n-  library_list = solib_aix_get_library_list (current_inferior (), NULL);\n-  if (library_list == NULL)\n+  gdb::optional<std::vector<lm_info_aix>> &library_list\n+    = solib_aix_get_library_list (current_inferior (), NULL);\n+  if (!library_list.has_value ())\n     return NULL;\n \n   /* Build a struct so_list for each entry on the list.\n      We skip the first entry, since this is the entry corresponding\n      to the main executable, not a shared library.  */\n-  for (ix = 1; VEC_iterate (lm_info_aix_p, library_list, ix, info); ix++)\n+  for (ix = 1; ix < library_list->size (); ix++)\n     {\n       struct so_list *new_solib = XCNEW (struct so_list);\n       std::string so_name;\n \n-      if (info->member_name.empty ())\n+      lm_info_aix &info = (*library_list)[ix];\n+      if (info.member_name.empty ())\n \t{\n-\t /* INFO->FILENAME is probably not an archive, but rather\n+\t /* INFO.FILENAME is probably not an archive, but rather\n \t    a shared object.  Unusual, but it should be possible\n \t    to link a program against a shared object directory,\n \t    without having to put it in an archive first.  */\n-\t so_name = info->filename;\n+\t so_name = info.filename;\n \t}\n       else\n \t{\n \t /* This is the usual case on AIX, where the shared object\n \t    is a member of an archive.  Create a synthetic so_name\n \t    that follows the same convention as AIX's ldd tool\n \t    (Eg: \"/lib/libc.a(shr.o)\").  */\n-\t so_name = string_printf (\"%s(%s)\", info->filename.c_str (),\n-\t\t\t\t  info->member_name.c_str ());\n+\t so_name = string_printf (\"%s(%s)\", info.filename.c_str (),\n+\t\t\t\t  info.member_name.c_str ());\n \t}\n       strncpy (new_solib->so_original_name, so_name.c_str (),\n \t       SO_NAME_MAX_PATH_SIZE - 1);\n       new_solib->so_name[SO_NAME_MAX_PATH_SIZE - 1] = '\\0';\n       memcpy (new_solib->so_name, new_solib->so_original_name,\n \t      SO_NAME_MAX_PATH_SIZE);\n-      new_solib->lm_info = new lm_info_aix (*info);\n+      new_solib->lm_info = new lm_info_aix (info);\n \n       /* Add it to the list.  */\n       if (!start)\n@@ -758,7 +711,7 @@ solib_aix_normal_stop_observer (struct bpstats *unused_1, int unused_2)\n   /* The inferior execution has been resumed, and it just stopped\n      again.  This means that the list of shared libraries may have\n      evolved.  Reset our cached value.  */\n-  solib_aix_free_library_list (&data->library_list);\n+  data->library_list.reset ();\n }\n \n /* Implements the \"show debug aix-solib\" command.  */\n@@ -789,8 +742,6 @@ _initialize_solib_aix (void)\n     = solib_aix_in_dynsym_resolve_code;\n   solib_aix_so_ops.bfd_open = solib_aix_bfd_open;\n \n-  solib_aix_inferior_data_handle = register_inferior_data ();\n-\n   gdb::observers::normal_stop.attach (solib_aix_normal_stop_observer);\n \n   /* Debug this file's internals.  */"
    }
  ]
}