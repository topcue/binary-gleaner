{
  "sha": "2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM2Y2NmY2ZkZGUxZDRjMWNiZWM4NmExMzU1YmNlMDkzMTRlOWI4NA==",
  "commit": {
    "author": {
      "name": "Andrea Corallo",
      "email": "andrea.corallo@arm.com",
      "date": "2021-06-03T14:48:05Z"
    },
    "committer": {
      "name": "Andrea Corallo",
      "email": "andrea.corallo@arm.com",
      "date": "2021-07-26T12:18:24Z"
    },
    "message": "PATCH [5/10] arm: Extend again arm_feature_set struct to provide more bits\n\ninclude/\n2021-06-11  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* opcode/arm.h (arm_feature_set): Extend 'core' field.\n\t(ARM_CPU_HAS_FEATURE, ARM_FSET_CPU_SUBSET, ARM_CPU_IS_ANY)\n\t(ARM_MERGE_FEATURE_SETS, ARM_CLEAR_FEATURE, ARM_FEATURE_EQUAL)\n\t(ARM_FEATURE_ZERO, ARM_FEATURE_CORE_EQUAL): Account for\n\t'core[2]'.\n\t(ARM_FEATURE_CORE_HIGH_HIGH): New macro.",
    "tree": {
      "sha": "ad9dd5250937e59c18da4c0ab6eefb4db6442eef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ad9dd5250937e59c18da4c0ab6eefb4db6442eef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84/comments",
  "author": {
    "login": "AndreaCorallo",
    "id": 6765576,
    "node_id": "MDQ6VXNlcjY3NjU1NzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AndreaCorallo",
    "html_url": "https://github.com/AndreaCorallo",
    "followers_url": "https://api.github.com/users/AndreaCorallo/followers",
    "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}",
    "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions",
    "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs",
    "repos_url": "https://api.github.com/users/AndreaCorallo/repos",
    "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "AndreaCorallo",
    "id": 6765576,
    "node_id": "MDQ6VXNlcjY3NjU1NzY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AndreaCorallo",
    "html_url": "https://github.com/AndreaCorallo",
    "followers_url": "https://api.github.com/users/AndreaCorallo/followers",
    "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}",
    "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions",
    "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs",
    "repos_url": "https://api.github.com/users/AndreaCorallo/repos",
    "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce537a7db788ab002aa50750d456999bc45ff485",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce537a7db788ab002aa50750d456999bc45ff485",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce537a7db788ab002aa50750d456999bc45ff485"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 16,
    "deletions": 4
  },
  "files": [
    {
      "sha": "1152e78122251c86be5d04f27f9168e8590e4736",
      "filename": "include/opcode/arm.h",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84/include/opcode/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84/include/opcode/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/arm.h?ref=2c6ccfcfdde1d4c1cbec86a1355bce09314e9b84",
      "patch": "@@ -427,31 +427,35 @@\n    and use macro ARM_FEATURE to initialize the feature set variable.  */\n typedef struct\n {\n-  unsigned long core[2];\n+  unsigned long core[3];\n   unsigned long coproc;\n } arm_feature_set;\n \n /* Test whether CPU and FEAT have any features in common.  */\n #define ARM_CPU_HAS_FEATURE(CPU,FEAT) \\\n   (((CPU).core[0] & (FEAT).core[0]) != 0 \\\n    || ((CPU).core[1] & (FEAT).core[1]) != 0 \\\n+   || ((CPU).core[2] & (FEAT).core[2]) != 0 \\\n    || ((CPU).coproc & (FEAT).coproc) != 0)\n \n /* Tests whether the features of A are a subset of B.  */\n #define ARM_FSET_CPU_SUBSET(A,B) \\\n   (((A).core[0] & (B).core[0]) == (A).core[0] \\\n    && ((A).core[1] & (B).core[1]) == (A).core[1] \\\n+   && ((A).core[2] & (B).core[2]) == (A).core[2] \\\n    && ((A).coproc & (B).coproc) == (A).coproc)\n \n #define ARM_CPU_IS_ANY(CPU) \\\n   ((CPU).core[0] == ((arm_feature_set)ARM_ANY).core[0] \\\n-   && (CPU).core[1] == ((arm_feature_set)ARM_ANY).core[1])\n+   && (CPU).core[1] == ((arm_feature_set)ARM_ANY).core[1] \\\n+   && (CPU).core[2] == ((arm_feature_set)ARM_ANY).core[2])\n \n #define ARM_MERGE_FEATURE_SETS(TARG,F1,F2)\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       (TARG).core[0] = (F1).core[0] | (F2).core[0];\t\\\n       (TARG).core[1] = (F1).core[1] | (F2).core[1];\t\\\n+      (TARG).core[2] = (F1).core[2] | (F2).core[2];\t\\\n       (TARG).coproc = (F1).coproc | (F2).coproc;\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n@@ -461,24 +465,32 @@ typedef struct\n     {\t\t\t\t\t\t\t\\\n       (TARG).core[0] = (F1).core[0] &~ (F2).core[0];\t\\\n       (TARG).core[1] = (F1).core[1] &~ (F2).core[1];\t\\\n+      (TARG).core[2] = (F1).core[2] &~ (F2).core[2];\t\\\n       (TARG).coproc = (F1).coproc &~ (F2).coproc;\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n #define ARM_FEATURE_EQUAL(T1,T2)\t\t\\\n   (   (T1).core[0] == (T2).core[0]\t\t\\\n    && (T1).core[1] == (T2).core[1]\t\t\\\n+   && (T1).core[2] == (T2).core[2]\t\t\\\n    && (T1).coproc  == (T2).coproc)\n \n #define ARM_FEATURE_ZERO(T)\t\t\t\\\n-  ((T).core[0] == 0 && (T).core[1] == 0 && (T).coproc == 0)\n+  ((T).core[0] == 0\t\t\t\t\\\n+   && (T).core[1] == 0\t\t\t\t\\\n+   && (T).core[2] == 0\t\t\t\t\\\n+   && (T).coproc == 0)\n \n #define ARM_FEATURE_CORE_EQUAL(T1, T2)\t\t\\\n-  ((T1).core[0] == (T2).core[0] && (T1).core[1] == (T2).core[1])\n+  ((T1).core[0] == (T2).core[0]\t\t\t\\\n+   && (T1).core[1] == (T2).core[1]\t\t\\\n+   && (T1).core[2] == (T2).core[2])\n \n #define ARM_FEATURE_LOW(core, coproc) {{(core), 0}, (coproc)}\n #define ARM_FEATURE_CORE(core1, core2) {{(core1), (core2)}, 0}\n #define ARM_FEATURE_CORE_LOW(core) {{(core), 0}, 0}\n #define ARM_FEATURE_CORE_HIGH(core) {{0, (core)}, 0}\n+#define ARM_FEATURE_CORE_HIGH_HIGH(core) {{0, 0, (core)}, 0}\n #define ARM_FEATURE_COPROC(coproc) {{0, 0}, (coproc)}\n #define ARM_FEATURE(core1, core2, coproc) {{(core1), (core2)}, (coproc)}"
    }
  ]
}