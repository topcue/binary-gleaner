{
  "sha": "5e500d33230ce2683001038177ad335365764793",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWU1MDBkMzMyMzBjZTI2ODMwMDEwMzgxNzdhZDMzNTM2NTc2NDc5Mw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-30T18:56:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-30T18:56:08Z"
    },
    "message": "gdb: handle non-const property types in ada_modulus (PR ada/26318)\n\nPR 26318 shows that running `maint print symbols` on an Ada binary,\ncompiled with an Ada distribution that includes debug info for the\nstandard library, triggers this assertion:\n\n    /home/simark/src/binutils-gdb/gdb/gdbtypes.h:526: internal-error: LONGEST dynamic_prop::const_val() const: Assertion `m_kind == PROP_CONST' failed.\n\nThe problem is in particular when printing type\n`system__object_reader__decoded_ada_name__TTdecodedSP1___XDL_0`, which\nhas a dynamic high bound (PROP_LOCLIST kind).  When printing a concrete\nvalue of this type, this type gets resolved to a type with a constant\nhigh bound, so ada_modulus can return this constant value.\n\nHowever, when printing the dynamic range type on its own, such as with\n`maint print symbols`, the high bound is still of kind PROP_LOCLIST.\nWhen ada_modulus tries to access the property as a const value, the\nassert triggers.\n\nThere's no sensible numerical value to return in this case.  Ideally,\nada_modulus would return something to the caller indicating that the\nvalue is dynamic and therefore can't be returned as an integer.  The\ncallers would handle it, for example `maint print symbols` would say\nthat the high bound of the type is dynamic.\n\nHowever, this patch implements the simpler fix of returning 0 in that\ncase.  It kind of restores the previous behavior of before we validated\nthe dynamic property kind in the getters, where we would just return\nwhatever random integer value was in `const_val`.  Except now it's\nconsistently 0.\n\nThis is what we had before we added dynamic property getters:\n\n$ ./gdb -q ~/foo -ex \"maint expand-symtabs\" -ex \"maint print symbols\" -batch | grep 'typedef <system__object_reader__decoded_ada_name__TTdecodedSP1'\n     typedef <system__object_reader__decoded_ada_name__TTdecodedSP1: mod 107820865988257;\n\nand this is what we have now:\n\n$ ./gdb -q ~/foo -ex \"maint expand-symtabs\" -ex \"maint print symbols\" -batch | grep 'typedef <system__object_reader__decoded_ada_name__TTdecodedSP1'\n     typedef <system__object_reader__decoded_ada_name__TTdecodedSP1: mod 0;\n\nThe value 107820865988257 is the `baton` field of the property's union\ninterpreted as an integer, so a bogus value.\n\ngdb/ChangeLog:\n\n\tPR ada/26318\n\t* ada-lang.c (ada_modulus): Return 0 if property is not of const\n\tkind.\n\nChange-Id: I3f6d343a9c3cd7cd62a4fc591943a43541223d50",
    "tree": {
      "sha": "66e9dd74aba605f5213392bd8866452d7f20fac1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66e9dd74aba605f5213392bd8866452d7f20fac1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e500d33230ce2683001038177ad335365764793",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e500d33230ce2683001038177ad335365764793",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e500d33230ce2683001038177ad335365764793",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e500d33230ce2683001038177ad335365764793/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "78319c1568ce20c41f5002e61bd9427a1cf59aac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78319c1568ce20c41f5002e61bd9427a1cf59aac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/78319c1568ce20c41f5002e61bd9427a1cf59aac"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 14,
    "deletions": 1
  },
  "files": [
    {
      "sha": "9e718361a6140a13b48acf48afc1cb8cd7b4533b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e500d33230ce2683001038177ad335365764793/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e500d33230ce2683001038177ad335365764793/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e500d33230ce2683001038177ad335365764793",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-30  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR ada/26318\n+\t* ada-lang.c (ada_modulus): Return 0 if property is not of const\n+\tkind.\n+\n 2020-07-30  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* breakpoint.c (set_breakpoint_condition): Do minor refactoring."
    },
    {
      "sha": "29951528e5e506b5174f8dbcffab3d4bc0c32bba",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e500d33230ce2683001038177ad335365764793/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e500d33230ce2683001038177ad335365764793/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=5e500d33230ce2683001038177ad335365764793",
      "patch": "@@ -11452,7 +11452,14 @@ ada_is_modular_type (struct type *type)\n ULONGEST\n ada_modulus (struct type *type)\n {\n-  return (ULONGEST) type->bounds ()->high.const_val () + 1;\n+  const dynamic_prop &high = type->bounds ()->high;\n+\n+  if (high.kind () == PROP_CONST)\n+    return (ULONGEST) high.const_val () + 1;\n+\n+  /* If TYPE is unresolved, the high bound might be a location list.  Return\n+     0, for lack of a better value to return.  */\n+  return 0;\n }\n \f\n "
    }
  ]
}