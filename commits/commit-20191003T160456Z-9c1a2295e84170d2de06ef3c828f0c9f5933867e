{
  "sha": "9c1a2295e84170d2de06ef3c828f0c9f5933867e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWMxYTIyOTVlODQxNzBkMmRlMDZlZjNjODI4ZjBjOWY1OTMzODY3ZQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-08-09T21:53:50Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:56Z"
    },
    "message": "libctf: get the encoding of non-ints/fps in the dynamic space right\n\nIf you call ctf_type_encoding() on a slice, you are meant to get the\nencoding of the slice with the format of the underlying type.  If\nyou call it on a non-int, non-fp, non-slice, you're meant to get the\nerror ECTF_INTNOTFP.\n\nNone of this was implemented for types in the dynamic space (which, now,\nis *all* types in writable containers).  Instead, we were always\nreturning the encoding as if it were a float, which for all other types\nconsulted the wrong part of a discriminated union and returned garbage.\n(Curiously, existing users were more disturbed by the lack of an error\nin the non-int/fp/slice case than they were about getting garbage back.)\n\nlibctf/\n\t* ctf-types.c (ctf_type_encoding): Fix the dynamic case to\n\twork right for non-int/fps.",
    "tree": {
      "sha": "7b12d11479fa4c3c8cbdb79ebc86e476b9eac721",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b12d11479fa4c3c8cbdb79ebc86e476b9eac721"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9c1a2295e84170d2de06ef3c828f0c9f5933867e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c1a2295e84170d2de06ef3c828f0c9f5933867e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9c1a2295e84170d2de06ef3c828f0c9f5933867e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c1a2295e84170d2de06ef3c828f0c9f5933867e/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1a6ab13e712348c59c2757457b9f913a333f3c92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a6ab13e712348c59c2757457b9f913a333f3c92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1a6ab13e712348c59c2757457b9f913a333f3c92"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 26,
    "deletions": 1
  },
  "files": [
    {
      "sha": "74dfbef83738059ee11f201dcb58c45e4e0efed2",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c1a2295e84170d2de06ef3c828f0c9f5933867e/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c1a2295e84170d2de06ef3c828f0c9f5933867e/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=9c1a2295e84170d2de06ef3c828f0c9f5933867e",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-09  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-types.c (ctf_type_encoding): Fix the dynamic case to\n+\twork right for non-int/fps.\n+\n 2019-08-08  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-types.c (ctf_type_name): Don't strlen a potentially-"
    },
    {
      "sha": "27cbfb94d00bc748e93375d3c480c1ef80e3eb8b",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c1a2295e84170d2de06ef3c828f0c9f5933867e/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c1a2295e84170d2de06ef3c828f0c9f5933867e/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=9c1a2295e84170d2de06ef3c828f0c9f5933867e",
      "patch": "@@ -739,7 +739,27 @@ ctf_type_encoding (ctf_file_t *fp, ctf_id_t type, ctf_encoding_t *ep)\n \n   if ((dtd = ctf_dynamic_type (ofp, type)) != NULL)\n     {\n-      *ep = dtd->dtd_u.dtu_enc;\n+      switch (LCTF_INFO_KIND (fp, tp->ctt_info))\n+\t{\n+\tcase CTF_K_INTEGER:\n+\tcase CTF_K_FLOAT:\n+\t  *ep = dtd->dtd_u.dtu_enc;\n+\t  break;\n+\tcase CTF_K_SLICE:\n+\t  {\n+\t    const ctf_slice_t *slice;\n+\t    ctf_encoding_t underlying_en;\n+\t    slice = &dtd->dtd_u.dtu_slice;\n+\n+\t    data = ctf_type_encoding (fp, slice->cts_type, &underlying_en);\n+\t    ep->cte_format = underlying_en.cte_format;\n+\t    ep->cte_offset = slice->cts_offset;\n+\t    ep->cte_bits = slice->cts_bits;\n+\t    break;\n+\t  }\n+\tdefault:\n+\t  return (ctf_set_errno (ofp, ECTF_NOTINTFP));\n+\t}\n       return 0;\n     }\n "
    }
  ]
}