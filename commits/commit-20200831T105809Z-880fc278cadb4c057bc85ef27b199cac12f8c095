{
  "sha": "880fc278cadb4c057bc85ef27b199cac12f8c095",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODgwZmMyNzhjYWRiNGMwNTdiYzg1ZWYyN2IxOTljYWMxMmY4YzA5NQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-30T23:37:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-31T10:58:09Z"
    },
    "message": "crx: ubsan: cannot be represented\n\n\t* config/tc-crx.c: Formatting.\n\t(CRX_PRINT): Wrap params in parentheses.  Remove parens from uses\n\tthroughout file.\n\t(reset_vars, get_register, get_copregister, get_optype, get_opbits),\n\t(get_opflags, get_number_of_operands, parse_operand, gettrap),\n\t(handle_LoadStor, getconstant, check_range, getreg_image),\n\t(parse_operands, parse_insn, print_operand, print_constant),\n\t(exponent2scale, mask_reg, process_label_constant, set_operand),\n\t(assemble_insn, print_insn): Delete unnecessary forward declaration.\n\t(print_insn): Make static.\n\t(print_constant): Make \"constant\" unsigned.\n\t(assemble_insn): Tidy REVERSE_MATCH index calc.\n\t* expr.c (generic_bignum_to_int32): Cast elements to valueT.",
    "tree": {
      "sha": "0875024ec19c0956599bcd83eea0cbe687653121",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0875024ec19c0956599bcd83eea0cbe687653121"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/880fc278cadb4c057bc85ef27b199cac12f8c095",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/880fc278cadb4c057bc85ef27b199cac12f8c095",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/880fc278cadb4c057bc85ef27b199cac12f8c095",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/880fc278cadb4c057bc85ef27b199cac12f8c095/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c1f138f9557a14678f6f988975cba441f56e6137",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1f138f9557a14678f6f988975cba441f56e6137",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c1f138f9557a14678f6f988975cba441f56e6137"
    }
  ],
  "stats": {
    "total": 244,
    "additions": 116,
    "deletions": 128
  },
  "files": [
    {
      "sha": "38c7f70b22e74d374faac7b44023adb21eeb5916",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880fc278cadb4c057bc85ef27b199cac12f8c095/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880fc278cadb4c057bc85ef27b199cac12f8c095/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=880fc278cadb4c057bc85ef27b199cac12f8c095",
      "patch": "@@ -1,3 +1,19 @@\n+2020-08-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-crx.c: Formatting.\n+\t(CRX_PRINT): Wrap params in parentheses.  Remove parens from uses\n+\tthroughout file.\n+\t(reset_vars, get_register, get_copregister, get_optype, get_opbits),\n+\t(get_opflags, get_number_of_operands, parse_operand, gettrap),\n+\t(handle_LoadStor, getconstant, check_range, getreg_image),\n+\t(parse_operands, parse_insn, print_operand, print_constant),\n+\t(exponent2scale, mask_reg, process_label_constant, set_operand),\n+\t(assemble_insn, print_insn): Delete unnecessary forward declaration.\n+\t(print_insn): Make static.\n+\t(print_constant): Make \"constant\" unsigned.\n+\t(assemble_insn): Tidy REVERSE_MATCH index calc.\n+\t* expr.c (generic_bignum_to_int32): Cast elements to valueT.\n+\n 2020-08-31  Alan Modra  <amodra@gmail.com>\n \n \tPR 26509"
    },
    {
      "sha": "041b9eb777895f06ee105a22b5d30bec4532b8d9",
      "filename": "gas/config/tc-crx.c",
      "status": "modified",
      "additions": 98,
      "deletions": 126,
      "changes": 224,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880fc278cadb4c057bc85ef27b199cac12f8c095/gas/config/tc-crx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880fc278cadb4c057bc85ef27b199cac12f8c095/gas/config/tc-crx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-crx.c?ref=880fc278cadb4c057bc85ef27b199cac12f8c095",
      "patch": "@@ -47,7 +47,7 @@\n \n /* Assign a number NUM, shifted by SHIFT bytes, into a location\n    pointed by index BYTE of array 'output_opcode'.  */\n-#define CRX_PRINT(BYTE, NUM, SHIFT)   output_opcode[BYTE] |= (NUM << SHIFT)\n+#define CRX_PRINT(BYTE, NUM, SHIFT)   output_opcode[BYTE] |= (NUM) << (SHIFT)\n \n /* Operand errors.  */\n typedef enum\n@@ -140,31 +140,8 @@ const relax_typeS md_relax_table[] =\n   {0xfffffe, -0x1000000, 6, 0}\t\t/* 24 */\n };\n \n-static void    reset_vars\t        (char *);\n-static reg     get_register\t        (char *);\n-static copreg  get_copregister\t        (char *);\n-static argtype get_optype\t        (operand_type);\n-static int     get_opbits\t        (operand_type);\n-static int     get_opflags\t        (operand_type);\n-static int     get_number_of_operands   (void);\n-static void    parse_operand\t        (char *, ins *);\n-static int     gettrap\t\t        (const char *);\n-static void    handle_LoadStor\t        (const char *);\n-static int     get_cinv_parameters      (const char *);\n-static long    getconstant\t\t(long, int);\n-static op_err  check_range\t\t(long *, int, unsigned int, int);\n-static int     getreg_image\t        (int);\n-static void    parse_operands\t        (ins *, char *);\n-static void    parse_insn\t        (ins *, char *);\n-static void    print_operand\t        (int, int, argument *);\n-static void    print_constant\t        (int, int, argument *);\n-static int     exponent2scale\t        (int);\n-static void    mask_reg\t\t        (int, unsigned short *);\n-static void    process_label_constant   (char *, ins *);\n-static void    set_operand\t        (char *, ins *);\n-static char *  preprocess_reglist       (char *, int *);\n-static int     assemble_insn\t        (char *, ins *);\n-static void    print_insn\t        (ins *);\n+static int     get_cinv_parameters\t(const char *);\n+static char *  preprocess_reglist\t(char *, int *);\n static void    warn_if_needed\t\t(ins *);\n static int     adjust_if_needed\t\t(ins *);\n \n@@ -618,42 +595,42 @@ process_label_constant (char *str, ins * crx_ins)\n       switch (cur_arg->type)\n \t{\n \tcase arg_cr:\n-          if (IS_INSN_TYPE (LD_STOR_INS_INC))\n+\t  if (IS_INSN_TYPE (LD_STOR_INS_INC))\n \t    crx_ins->rtype = BFD_RELOC_CRX_REGREL12;\n-          else if (IS_INSN_TYPE (CSTBIT_INS)\n+\t  else if (IS_INSN_TYPE (CSTBIT_INS)\n \t\t   || IS_INSN_TYPE (STOR_IMM_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_REGREL28;\n-          else\n+\t  else\n \t    crx_ins->rtype = BFD_RELOC_CRX_REGREL32;\n \t  break;\n \n \tcase arg_idxr:\n-\t    crx_ins->rtype = BFD_RELOC_CRX_REGREL22;\n+\t  crx_ins->rtype = BFD_RELOC_CRX_REGREL22;\n \t  break;\n \n \tcase arg_c:\n-          if (IS_INSN_MNEMONIC (\"bal\") || IS_INSN_TYPE (DCR_BRANCH_INS))\n+\t  if (IS_INSN_MNEMONIC (\"bal\") || IS_INSN_TYPE (DCR_BRANCH_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_REL16;\n \t  else if (IS_INSN_TYPE (BRANCH_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_REL8;\n-          else if (IS_INSN_TYPE (LD_STOR_INS) || IS_INSN_TYPE (STOR_IMM_INS)\n+\t  else if (IS_INSN_TYPE (LD_STOR_INS) || IS_INSN_TYPE (STOR_IMM_INS)\n \t\t   || IS_INSN_TYPE (CSTBIT_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_ABS32;\n \t  else if (IS_INSN_TYPE (BRANCH_NEQ_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_REL4;\n-          else if (IS_INSN_TYPE (CMPBR_INS) || IS_INSN_TYPE (COP_BRANCH_INS))\n+\t  else if (IS_INSN_TYPE (CMPBR_INS) || IS_INSN_TYPE (COP_BRANCH_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_REL8_CMP;\n \t  break;\n \n \tcase arg_ic:\n-          if (IS_INSN_TYPE (ARITH_INS))\n+\t  if (IS_INSN_TYPE (ARITH_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_IMM32;\n \t  else if (IS_INSN_TYPE (ARITH_BYTE_INS))\n \t    crx_ins->rtype = BFD_RELOC_CRX_IMM16;\n \t  break;\n \tdefault:\n \t  break;\n-      }\n+\t}\n       break;\n \n     default:\n@@ -782,7 +759,7 @@ set_operand (char *operand, ins * crx_ins)\n       if (c == ')')\n \tcur_arg->scale = 0;\n       else\n-        {\n+\t{\n \t  while (*operandE != ')')\n \t    operandE++;\n \t  *operandE = '\\0';\n@@ -796,12 +773,12 @@ set_operand (char *operand, ins * crx_ins)\n \t  scale_val = scale.X_add_number;\n \n \t  /* Check if the scale value is legal.  */\n-          if (scale_val != 1 && scale_val != 2\n-              && scale_val != 4 && scale_val != 8)\n+\t  if (scale_val != 1 && scale_val != 2\n+\t      && scale_val != 4 && scale_val != 8)\n \t    as_bad (_(\"Illegal Scale - `%d'\"), scale_val);\n \n \t  cur_arg->scale = exponent2scale (scale_val);\n-        }\n+\t}\n       break;\n \n     default:\n@@ -849,7 +826,7 @@ parse_operand (char *operand, ins * crx_ins)\n       if (strchr (operand, '(') != NULL)\n \tcur_arg->type = arg_icr;\n       else\n-        cur_arg->type = arg_ic;\n+\tcur_arg->type = arg_ic;\n       goto set_params;\n       break;\n \n@@ -864,14 +841,14 @@ parse_operand (char *operand, ins * crx_ins)\n       break;\n \n     default:\n-\tbreak;\n+      break;\n     }\n \n   if (strchr (operand, '(') != NULL)\n     {\n       if (strchr (operand, ',') != NULL\n-          && (strchr (operand, ',') > strchr (operand, '(')))\n-\t    cur_arg->type = arg_idxr;\n+\t  && (strchr (operand, ',') > strchr (operand, '(')))\n+\tcur_arg->type = arg_idxr;\n       else\n \tcur_arg->type = arg_cr;\n     }\n@@ -906,12 +883,12 @@ parse_operands (ins * crx_ins, char *operands)\n   while (*operandT != '\\0')\n     {\n       if (*operandT == ',' && bracket_flag != 1 && sq_bracket_flag != 1)\n-        {\n+\t{\n \t  *operandT++ = '\\0';\n \t  operand[op_num++] = strdup (operandH);\n-          operandH = operandT;\n-          continue;\n-        }\n+\t  operandH = operandT;\n+\t  continue;\n+\t}\n \n       if (*operandT == ' ')\n \tas_bad (_(\"Illegal operands (whitespace): `%s'\"), ins_parse);\n@@ -1169,8 +1146,7 @@ static void\n print_constant (int nbits, int shift, argument *arg)\n {\n   unsigned long mask = 0;\n-\n-  long constant = getconstant (arg->constant, nbits);\n+  unsigned long constant = getconstant (arg->constant, nbits);\n \n   switch (nbits)\n   {\n@@ -1191,7 +1167,7 @@ print_constant (int nbits, int shift, argument *arg)\n \t      output_opcode[0]    output_opcode[1]     */\n \n       CRX_PRINT (0, (constant >> WORD_SHIFT) & mask, 0);\n-      CRX_PRINT (1, (constant & 0xFFFF), WORD_SHIFT);\n+      CRX_PRINT (1, constant & 0xFFFF, WORD_SHIFT);\n       break;\n \n     case 16:\n@@ -1455,9 +1431,9 @@ assemble_insn (char *mnemonic, ins *insn)\n   /* Operand error (used for issuing various constant error messages).  */\n   op_err op_error, const_err = OP_LEGAL;\n \n-/* Retrieve data (based on FUNC) for each operand of a given instruction.  */\n-#define GET_CURRENT_DATA(FUNC, ARRAY)\t\t\t\t  \\\n-  for (i = 0; i < insn->nargs; i++)\t\t\t\t  \\\n+  /* Retrieve data (based on FUNC) for each operand of a given instruction.  */\n+#define GET_CURRENT_DATA(FUNC, ARRAY)\t\t\t\\\n+  for (i = 0; i < insn->nargs; i++)\t\t\t\\\n     ARRAY[i] = FUNC (instruction->operands[i].op_type)\n \n #define GET_CURRENT_TYPE    GET_CURRENT_DATA(get_optype, cur_type)\n@@ -1500,7 +1476,7 @@ assemble_insn (char *mnemonic, ins *insn)\n \n       /* Check for type compatibility.  */\n       for (i = 0; i < insn->nargs; i++)\n-        {\n+\t{\n \t  if (cur_type[i] != insn->arg[i].type)\n \t    {\n \t      if (invalid_optype == -1)\n@@ -1516,32 +1492,29 @@ assemble_insn (char *mnemonic, ins *insn)\n \t     Index 0\t  -->> 1\n \t     Index 1\t  -->> 0\n \t     Other index  -->> stays the same.  */\n-\t  int j = instruction->flags & REVERSE_MATCH ?\n-\t\t  i == 0 ? 1 :\n-\t\t  i == 1 ? 0 : i :\n-\t\t  i;\n+\t  int j = (instruction->flags & REVERSE_MATCH) && i <= 1 ? 1 - i : i;\n \n \t  /* Only check range - don't update the constant's value, since the\n \t     current instruction may not be the last we try to match.\n \t     The constant's value will be updated later, right before printing\n \t     it to the object file.  */\n-  \t  if ((insn->arg[j].X_op == O_constant)\n-\t       && (op_error = check_range (&insn->arg[j].constant, cur_size[j],\n-\t\t\t\t\t   cur_flags[j], 0)))\n-  \t    {\n+\t  if ((insn->arg[j].X_op == O_constant)\n+\t      && (op_error = check_range (&insn->arg[j].constant, cur_size[j],\n+\t\t\t\t\t  cur_flags[j], 0)))\n+\t    {\n \t      if (invalid_const == -1)\n-\t      {\n-\t\tinvalid_const = j + 1;\n-\t\tconst_err = op_error;\n-\t      }\n+\t\t{\n+\t\t  invalid_const = j + 1;\n+\t\t  const_err = op_error;\n+\t\t}\n \t      goto next_insn;\n \t    }\n \t  /* For symbols, we make sure the relocation size (which was already\n \t     determined) is sufficient.  */\n \t  else if ((insn->arg[j].X_op == O_symbol)\n-\t\t    && ((bfd_reloc_type_lookup (stdoutput, insn->rtype))->bitsize\n-\t\t\t > cur_size[j]))\n-\t\t  goto next_insn;\n+\t\t   && ((bfd_reloc_type_lookup (stdoutput, insn->rtype))->bitsize\n+\t\t       > cur_size[j]))\n+\t    goto next_insn;\n \t}\n       found_const_within_range = 1;\n \n@@ -1562,30 +1535,32 @@ assemble_insn (char *mnemonic, ins *insn)\n       else if (!found_same_argument_types)\n \tas_bad (_(\"Illegal type of operand (arg %d)\"), invalid_optype);\n       else if (!found_const_within_range)\n-      {\n-\tswitch (const_err)\n \t{\n-\tcase OP_OUT_OF_RANGE:\n-\t  as_bad (_(\"Operand out of range (arg %d)\"), invalid_const);\n-\t  break;\n-\tcase OP_NOT_EVEN:\n-\t  as_bad (_(\"Operand has odd displacement (arg %d)\"), invalid_const);\n-\t  break;\n-\tcase OP_ILLEGAL_DISPU4:\n-\t  as_bad (_(\"Invalid DISPU4 operand value (arg %d)\"), invalid_const);\n-\t  break;\n-\tcase OP_ILLEGAL_CST4:\n-\t  as_bad (_(\"Invalid CST4 operand value (arg %d)\"), invalid_const);\n-\t  break;\n-\tcase OP_NOT_UPPER_64KB:\n-\t  as_bad (_(\"Operand value is not within upper 64 KB (arg %d)\"),\n-\t\t    invalid_const);\n-\t  break;\n-\tdefault:\n-\t  as_bad (_(\"Illegal operand (arg %d)\"), invalid_const);\n-\t  break;\n+\t  switch (const_err)\n+\t    {\n+\t    case OP_OUT_OF_RANGE:\n+\t      as_bad (_(\"Operand out of range (arg %d)\"), invalid_const);\n+\t      break;\n+\t    case OP_NOT_EVEN:\n+\t      as_bad (_(\"Operand has odd displacement (arg %d)\"),\n+\t\t      invalid_const);\n+\t      break;\n+\t    case OP_ILLEGAL_DISPU4:\n+\t      as_bad (_(\"Invalid DISPU4 operand value (arg %d)\"),\n+\t\t      invalid_const);\n+\t      break;\n+\t    case OP_ILLEGAL_CST4:\n+\t      as_bad (_(\"Invalid CST4 operand value (arg %d)\"), invalid_const);\n+\t      break;\n+\t    case OP_NOT_UPPER_64KB:\n+\t      as_bad (_(\"Operand value is not within upper 64 KB (arg %d)\"),\n+\t\t      invalid_const);\n+\t      break;\n+\t    default:\n+\t      as_bad (_(\"Illegal operand (arg %d)\"), invalid_const);\n+\t      break;\n+\t    }\n \t}\n-      }\n \n       return 0;\n     }\n@@ -1603,28 +1578,25 @@ assemble_insn (char *mnemonic, ins *insn)\n \tGET_CURRENT_SIZE;\n \n       for (i = 0; i < insn->nargs; i++)\n-        {\n-\t  int j = instruction->flags & REVERSE_MATCH ?\n-\t\t  i == 0 ? 1 :\n-\t\t  i == 1 ? 0 : i :\n-\t\t  i;\n+\t{\n+\t  int j = (instruction->flags & REVERSE_MATCH) && i <= 1 ? 1 - i : i;\n \n \t  /* This time, update constant value before printing it.  */\n-  \t  if ((insn->arg[j].X_op == O_constant)\n-\t       && (check_range (&insn->arg[j].constant, cur_size[j],\n-\t\t\t\tcur_flags[j], 1) != OP_LEGAL))\n-\t      as_fatal (_(\"Illegal operand (arg %d)\"), j+1);\n+\t  if ((insn->arg[j].X_op == O_constant)\n+\t      && (check_range (&insn->arg[j].constant, cur_size[j],\n+\t\t\t       cur_flags[j], 1) != OP_LEGAL))\n+\t    as_fatal (_(\"Illegal operand (arg %d)\"), j+1);\n \t}\n \n       /* First, copy the instruction's opcode.  */\n       output_opcode[0] = BIN (instruction->match, instruction->match_bits);\n \n       for (i = 0; i < insn->nargs; i++)\n-        {\n+\t{\n \t  cur_arg_num = i;\n-          print_operand (cur_size[i], instruction->operands[i].shift,\n+\t  print_operand (cur_size[i], instruction->operands[i].shift,\n \t\t\t &insn->arg[i]);\n-        }\n+\t}\n     }\n \n   return 1;\n@@ -1681,26 +1653,26 @@ adjust_if_needed (ins *insn)\n     {\n       if ((instruction->operands[0].op_type == cst4)\n \t  && instruction->operands[1].op_type == regr)\n-        {\n-          if (insn->arg[0].constant == 0 && insn->arg[1].r == r0)\n+\t{\n+\t  if (insn->arg[0].constant == 0 && insn->arg[1].r == r0)\n \t    {\n \t      instruction++;\n \t      ret_value = 1;\n \t    }\n-        }\n+\t}\n     }\n \n   /* Optimization: Omit a zero displacement in bit operations,\n      saving 2-byte encoding space (e.g., 'cbitw $8, 0(r1)').  */\n   if (IS_INSN_TYPE (CSTBIT_INS))\n     {\n       if ((instruction->operands[1].op_type == rbase_disps12)\n-\t   && (insn->arg[1].X_op == O_constant)\n-\t   && (insn->arg[1].constant == 0))\n-            {\n-              instruction--;\n-\t      ret_value = 1;\n-            }\n+\t  && (insn->arg[1].X_op == O_constant)\n+\t  && (insn->arg[1].constant == 0))\n+\t{\n+\t  instruction--;\n+\t  ret_value = 1;\n+\t}\n     }\n \n   return ret_value;\n@@ -1766,21 +1738,21 @@ preprocess_reglist (char *param, int *allocated)\n \n       /* Coprocessor register c<N>.  */\n       if (IS_INSN_TYPE (COP_REG_INS))\n-        {\n-          if (((cr = get_copregister (reg_name)) == nullcopregister)\n+\t{\n+\t  if (((cr = get_copregister (reg_name)) == nullcopregister)\n \t      || (crx_copregtab[cr-MAX_REG].type != CRX_C_REGTYPE))\n \t    as_fatal (_(\"Illegal register `%s' in cop-register list\"), reg_name);\n \t  mask_reg (getreg_image (cr - c0), &mask);\n-        }\n+\t}\n       /* Coprocessor Special register cs<N>.  */\n       else if (IS_INSN_TYPE (COPS_REG_INS))\n-        {\n-          if (((cr = get_copregister (reg_name)) == nullcopregister)\n+\t{\n+\t  if (((cr = get_copregister (reg_name)) == nullcopregister)\n \t      || (crx_copregtab[cr-MAX_REG].type != CRX_CS_REGTYPE))\n \t    as_fatal (_(\"Illegal register `%s' in cop-special-register list\"),\n \t\t      reg_name);\n \t  mask_reg (getreg_image (cr - cs0), &mask);\n-        }\n+\t}\n       /* User register u<N>.  */\n       else if (instruction->flags & USER_REG)\n \t{\n@@ -1794,15 +1766,15 @@ preprocess_reglist (char *param, int *allocated)\n \t      lo_found = 1;\n \t      goto next_inst;\n \t    }\n-          else if (((r = get_register (reg_name)) == nullregister)\n-\t      || (crx_regtab[r].type != CRX_U_REGTYPE))\n+\t  else if (((r = get_register (reg_name)) == nullregister)\n+\t\t   || (crx_regtab[r].type != CRX_U_REGTYPE))\n \t    as_fatal (_(\"Illegal register `%s' in user register list\"), reg_name);\n \n \t  mask_reg (getreg_image (r - u0), &mask);\n \t}\n       /* General purpose register r<N>.  */\n       else\n-        {\n+\t{\n \t  if (streq(reg_name, \"hi\"))\n \t    {\n \t      hi_found = 1;\n@@ -1813,20 +1785,20 @@ preprocess_reglist (char *param, int *allocated)\n \t      lo_found = 1;\n \t      goto next_inst;\n \t    }\n-          else if (((r = get_register (reg_name)) == nullregister)\n-\t      || (crx_regtab[r].type != CRX_R_REGTYPE))\n+\t  else if (((r = get_register (reg_name)) == nullregister)\n+\t\t   || (crx_regtab[r].type != CRX_R_REGTYPE))\n \t    as_fatal (_(\"Illegal register `%s' in register list\"), reg_name);\n \n \t  mask_reg (getreg_image (r - r0), &mask);\n-        }\n+\t}\n \n       if (++reg_counter > MAX_REGS_IN_MASK16)\n \tas_bad (_(\"Maximum %d bits may be set in `mask16' operand\"),\n \t\tMAX_REGS_IN_MASK16);\n \n     next_inst:\n       while (!ISALNUM (*paramP) && *paramP != '}')\n-\t  paramP++;\n+\tparamP++;\n     }\n \n   if (*++paramP != '\\0')\n@@ -1864,7 +1836,7 @@ preprocess_reglist (char *param, int *allocated)\n /* Print the instruction.\n    Handle also cases where the instruction is relaxable/relocatable.  */\n \n-void\n+static void\n print_insn (ins *insn)\n {\n   unsigned int i, j, insn_size;"
    },
    {
      "sha": "da4fbcf8cd6821586c26c5fd470589a1c568c414",
      "filename": "gas/expr.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880fc278cadb4c057bc85ef27b199cac12f8c095/gas/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880fc278cadb4c057bc85ef27b199cac12f8c095/gas/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.c?ref=880fc278cadb4c057bc85ef27b199cac12f8c095",
      "patch": "@@ -224,8 +224,8 @@ static valueT\n generic_bignum_to_int32 (void)\n {\n   valueT number =\n-\t   ((generic_bignum[1] & LITTLENUM_MASK) << LITTLENUM_NUMBER_OF_BITS)\n-\t   | (generic_bignum[0] & LITTLENUM_MASK);\n+    ((((valueT) generic_bignum[1] & LITTLENUM_MASK) << LITTLENUM_NUMBER_OF_BITS)\n+     | ((valueT) generic_bignum[0] & LITTLENUM_MASK));\n   number &= 0xffffffff;\n   return number;\n }"
    }
  ]
}