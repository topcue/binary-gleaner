{
  "sha": "db2534b704e5f1227decd2a0cfe62bff1d2bee65",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGIyNTM0YjcwNGU1ZjEyMjdkZWNkMmEwY2ZlNjJiZmYxZDJiZWU2NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-27T13:35:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-28T16:19:57Z"
    },
    "message": "Fix Ada overloading with 'null'\n\nCurrently, the Ada expression parser treats 'null' as an integer 0.\nHowever, this causes overloading to fail in certain cases.\n\nThis patch changes the Ada expression parser to use a special type for\n'null'.  I chose pointer-to-int0, because I think that's not likely to\nbe needed for any other Ada expression.  Note this works because a\n\"mod 1\" type has an underlying non-zero byte size; the test includes a\ncheck for this.\n\nThe output is changed so that \"print null\", by default, shows \"null\".\nAnd, ada_type_match is changed both to recognize the special null type\nand to remove a bit of weird code related to how pointers are treated\nfor overload type matching.\n\nTested on x86-64 Fedora 32.  Because this only touches Ada, and Joel\nalready approved it internally at AdaCore, I am checking it in.\n\ngdb/ChangeLog\n2021-04-28  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-exp.y (primary): Use new type for null pointer.\n\t* ada-lang.c (ada_type_match): Remove \"may_deref\"\n\tparameter.  Handle null pointer.\n\t(ada_args_match): Update.\n\t* ada-valprint.c (ada_value_print_ptr, ada_value_print):\n\tHandle null pointer.\n\ngdb/testsuite/ChangeLog\n2021-04-28  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/null_overload.exp: New file.\n\t* gdb.ada/null_overload/foo.adb: New file.",
    "tree": {
      "sha": "86db8952ae49240f8e209b74606ad43673d79ca9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/86db8952ae49240f8e209b74606ad43673d79ca9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/db2534b704e5f1227decd2a0cfe62bff1d2bee65",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/db2534b704e5f1227decd2a0cfe62bff1d2bee65",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/db2534b704e5f1227decd2a0cfe62bff1d2bee65",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/db2534b704e5f1227decd2a0cfe62bff1d2bee65/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e43c3e2a741256e9520f59bd08d9e74f9da0c631",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e43c3e2a741256e9520f59bd08d9e74f9da0c631",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e43c3e2a741256e9520f59bd08d9e74f9da0c631"
    }
  ],
  "stats": {
    "total": 137,
    "additions": 121,
    "deletions": 16
  },
  "files": [
    {
      "sha": "fa25ceec7d6328d404a3e0da1c5008e4149d30fa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -1,3 +1,12 @@\n+2021-04-28  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-exp.y (primary): Use new type for null pointer.\n+\t* ada-lang.c (ada_type_match): Remove \"may_deref\"\n+\tparameter.  Handle null pointer.\n+\t(ada_args_match): Update.\n+\t* ada-valprint.c (ada_value_print_ptr, ada_value_print):\n+\tHandle null pointer.\n+\n 2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention new commands."
    },
    {
      "sha": "3652376b62329d0fc9d15af0e9bc8ef1b9d9079b",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -891,7 +891,11 @@ primary\t:\tFLOAT\n \t;\n \n primary\t:\tNULL_PTR\n-\t\t\t{ write_int (pstate, 0, type_int (pstate)); }\n+\t\t\t{\n+\t\t\t  struct type *null_ptr_type\n+\t\t\t    = lookup_pointer_type (parse_type (pstate)->builtin_int0);\n+\t\t\t  write_int (pstate, 0, null_ptr_type);\n+\t\t\t}\n \t;\n \n primary\t:\tSTRING"
    },
    {
      "sha": "0b50a788ac9026cc34a1f50eab27344b3a38fd8e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -95,8 +95,6 @@ static struct type *desc_index_type (struct type *, int);\n \n static int desc_arity (struct type *);\n \n-static int ada_type_match (struct type *, struct type *, int);\n-\n static int ada_args_match (struct symbol *, struct value **, int);\n \n static struct value *make_array_descriptor (struct type *, struct value *);\n@@ -3492,14 +3490,12 @@ ada_resolve_variable (struct symbol *sym, const struct block *block,\n   return candidates[i];\n }\n \n-/* Return non-zero if formal type FTYPE matches actual type ATYPE.  If\n-   MAY_DEREF is non-zero, the formal may be a pointer and the actual\n-   a non-pointer.  */\n+/* Return non-zero if formal type FTYPE matches actual type ATYPE.  */\n /* The term \"match\" here is rather loose.  The match is heuristic and\n    liberal.  */\n \n static int\n-ada_type_match (struct type *ftype, struct type *atype, int may_deref)\n+ada_type_match (struct type *ftype, struct type *atype)\n {\n   ftype = ada_check_typedef (ftype);\n   atype = ada_check_typedef (atype);\n@@ -3514,12 +3510,13 @@ ada_type_match (struct type *ftype, struct type *atype, int may_deref)\n     default:\n       return ftype->code () == atype->code ();\n     case TYPE_CODE_PTR:\n-      if (atype->code () == TYPE_CODE_PTR)\n-\treturn ada_type_match (TYPE_TARGET_TYPE (ftype),\n-\t\t\t       TYPE_TARGET_TYPE (atype), 0);\n-      else\n-\treturn (may_deref\n-\t\t&& ada_type_match (TYPE_TARGET_TYPE (ftype), atype, 0));\n+      if (atype->code () != TYPE_CODE_PTR)\n+\treturn 0;\n+      atype = TYPE_TARGET_TYPE (atype);\n+      /* This can only happen if the actual argument is 'null'.  */\n+      if (atype->code () == TYPE_CODE_INT && TYPE_LENGTH (atype) == 0)\n+\treturn 1;\n+      return ada_type_match (TYPE_TARGET_TYPE (ftype), atype);\n     case TYPE_CODE_INT:\n     case TYPE_CODE_ENUM:\n     case TYPE_CODE_RANGE:\n@@ -3580,7 +3577,7 @@ ada_args_match (struct symbol *func, struct value **actuals, int n_actuals)\n \t  struct type *ftype = ada_check_typedef (func_type->field (i).type ());\n \t  struct type *atype = ada_check_typedef (value_type (actuals[i]));\n \n-\t  if (!ada_type_match (ftype, atype, 1))\n+\t  if (!ada_type_match (ftype, atype))\n \t    return 0;\n \t}\n     }"
    },
    {
      "sha": "d516a4d134e8e3e8853581d4c6e174c799f84e28",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -719,6 +719,14 @@ ada_value_print_ptr (struct value *val,\n \t\t     struct ui_file *stream, int recurse,\n \t\t     const struct value_print_options *options)\n {\n+  if (!options->format\n+      && TYPE_TARGET_TYPE (value_type (val))->code () == TYPE_CODE_INT\n+      && TYPE_LENGTH (TYPE_TARGET_TYPE (value_type (val))) == 0)\n+    {\n+      fputs_filtered (\"null\", stream);\n+      return;\n+    }\n+\n   common_val_print (val, stream, recurse, options, language_def (language_c));\n \n   struct type *type = ada_check_typedef (value_type (val));\n@@ -1096,8 +1104,11 @@ ada_value_print (struct value *val0, struct ui_file *stream,\n   struct type *type = ada_check_typedef (value_type (val));\n   struct value_print_options opts;\n \n-  /* If it is a pointer, indicate what it points to.  */\n-  if (type->code () == TYPE_CODE_PTR)\n+  /* If it is a pointer, indicate what it points to; but not for\n+     \"void *\" pointers.  */\n+  if (type->code () == TYPE_CODE_PTR\n+      && !(TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_INT\n+\t   && TYPE_LENGTH (TYPE_TARGET_TYPE (type)) == 0))\n     {\n       /* Hack:  don't print (char *) for char strings.  Their\n \t type is indicated by the quoted string anyway.  */"
    },
    {
      "sha": "d4ed915881ba2678fea916856859fe711c39c76e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-28  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/null_overload.exp: New file.\n+\t* gdb.ada/null_overload/foo.adb: New file.\n+\n 2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-startup-opt.exp: New file."
    },
    {
      "sha": "e5b40de22f17590179d51eb29515322cb25f787c",
      "filename": "gdb/testsuite/gdb.ada/null_overload.exp",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/testsuite/gdb.ada/null_overload.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/testsuite/gdb.ada/null_overload.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/null_overload.exp?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -0,0 +1,37 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile foo\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n+    return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"START\" ${testdir}/foo.adb]\n+runto \"foo.adb:$bp_location\"\n+\n+gdb_test \"print f(null)\" \" = true\"\n+gdb_test \"print f(r_access'(null))\" \" = true\"\n+gdb_test \"print f(0)\" \" = false\"\n+\n+gdb_test \"print null\" \" = null\"\n+gdb_test \"print/d null\" \" = 0\"\n+gdb_test \"print U_Ptr\" \" = \\\\\\(access foo\\\\.u_0\\\\\\) 0x0\""
    },
    {
      "sha": "9a18606af390aaa4bff28a7f8672e895189d567d",
      "filename": "gdb/testsuite/gdb.ada/null_overload/foo.adb",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/testsuite/gdb.ada/null_overload/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db2534b704e5f1227decd2a0cfe62bff1d2bee65/gdb/testsuite/gdb.ada/null_overload/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/null_overload/foo.adb?ref=db2534b704e5f1227decd2a0cfe62bff1d2bee65",
      "patch": "@@ -0,0 +1,42 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+procedure Foo is\n+\n+   type R_Type is null record;\n+   type R_Access is access R_Type;\n+\n+   type U_0 is mod 1;\n+   type U_P_T is access all U_0;\n+\n+   function F (R : R_Access) return Boolean is\n+   begin\n+      return True;\n+   end F;\n+\n+   function F (I : Integer) return Boolean is\n+   begin\n+      return False;\n+   end F;\n+\n+   B1 : constant Boolean := F (null);\n+   B2 : constant Boolean := F (0);\n+\n+   U : U_0 := 0;\n+   U_Ptr : U_P_T := null;\n+\n+begin\n+   null; -- START\n+end Foo;"
    }
  ]
}