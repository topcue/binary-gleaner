{
  "sha": "242a115951fe55e62036bac555017eb817ca1aa6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjQyYTExNTk1MWZlNTVlNjIwMzZiYWM1NTUwMTdlYjgxN2NhMWFhNg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-03-28T06:23:32Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-03-28T06:40:31Z"
    },
    "message": "PR24392, Clang warning Wtautological-constant-out-of-range-compare\n\n\tPR 24392\n\t* configure.ac: Invoke AC_CHECK_SIZEOF(int).\n\t* configure: Regenerate.\n\t* coffgen.c (coff_get_reloc_upper_bound): Replace gcc diagnostic\n\tworkaround with SIZEOF_LONG vs. SIZEOF_INT check.\n\t* elf.c (_bfd_elf_get_reloc_upper_bound): Likewise.\n\t* elf64-sparc.c (elf64_sparc_get_reloc_upper_bound): Likewise.\n\t* mach-o.c (bfd_mach_o_get_reloc_upper_bound): Likewise.",
    "tree": {
      "sha": "c7e676c00296cd37ed77da28fa4b43d43e835887",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c7e676c00296cd37ed77da28fa4b43d43e835887"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/242a115951fe55e62036bac555017eb817ca1aa6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/242a115951fe55e62036bac555017eb817ca1aa6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/242a115951fe55e62036bac555017eb817ca1aa6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/242a115951fe55e62036bac555017eb817ca1aa6/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96a86c01d119372f4af5aff2501d3104e6c1a8e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96a86c01d119372f4af5aff2501d3104e6c1a8e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96a86c01d119372f4af5aff2501d3104e6c1a8e3"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 53,
    "deletions": 29
  },
  "files": [
    {
      "sha": "4dd3f27a31d935273613325360bc9a787414954c",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -1,3 +1,14 @@\n+2019-03-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24392\n+\t* configure.ac: Invoke AC_CHECK_SIZEOF(int).\n+\t* configure: Regenerate.\n+\t* coffgen.c (coff_get_reloc_upper_bound): Replace gcc diagnostic\n+\tworkaround with SIZEOF_LONG vs. SIZEOF_INT check.\n+\t* elf.c (_bfd_elf_get_reloc_upper_bound): Likewise.\n+\t* elf64-sparc.c (elf64_sparc_get_reloc_upper_bound): Likewise.\n+\t* mach-o.c (bfd_mach_o_get_reloc_upper_bound): Likewise.\n+\n 2019-03-21  Jim Wilson  <jimw@sifive.com>\n \n \tPR 24365"
    },
    {
      "sha": "139ff9749a6186dbdf28b3b79042680f125e2894",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -2007,10 +2007,6 @@ coff_get_normalized_symtab (bfd *abfd)\n   return internal;\n }\n \n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Wtype-limits\"\n-#endif\n long\n coff_get_reloc_upper_bound (bfd *abfd, sec_ptr asect)\n {\n@@ -2019,16 +2015,15 @@ coff_get_reloc_upper_bound (bfd *abfd, sec_ptr asect)\n       bfd_set_error (bfd_error_invalid_operation);\n       return -1;\n     }\n+#if SIZEOF_LONG == SIZEOF_INT\n   if (asect->reloc_count >= LONG_MAX / sizeof (arelent *))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return -1;\n     }\n+#endif\n   return (asect->reloc_count + 1) * sizeof (arelent *);\n }\n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic pop\n-#endif\n \n asymbol *\n coff_make_empty_symbol (bfd *abfd)"
    },
    {
      "sha": "202ef205ec6ff331942f0ebeecbaac2f6dbfa332",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -13367,6 +13367,39 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of int\" >&5\n+$as_echo_n \"checking size of int... \" >&6; }\n+if ${ac_cv_sizeof_int+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (int))\" \"ac_cv_sizeof_int\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_int\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (int)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_int=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_int\" >&5\n+$as_echo \"$ac_cv_sizeof_int\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_INT $ac_cv_sizeof_int\n+_ACEOF\n+\n+\n \n if test \"x${ac_cv_sizeof_void_p}\" = \"x8\"; then\n   host64=true"
    },
    {
      "sha": "4cd946db00e9a095e16bc0dc7a7c82372d0dbc60",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -189,6 +189,7 @@ AC_TYPE_LONG_DOUBLE\n AC_CHECK_TYPES([long long], [AC_CHECK_SIZEOF(long long)])\n AC_CHECK_SIZEOF(void *)\n AC_CHECK_SIZEOF(long)\n+AC_CHECK_SIZEOF(int)\n \n if test \"x${ac_cv_sizeof_void_p}\" = \"x8\"; then\n   host64=true"
    },
    {
      "sha": "13f96e8840e69bccedb71e16e60b20df72f18bb1",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -8268,25 +8268,19 @@ _bfd_elf_get_dynamic_symtab_upper_bound (bfd *abfd)\n   return symtab_size;\n }\n \n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Wtype-limits\"\n-#endif\n long\n _bfd_elf_get_reloc_upper_bound (bfd *abfd ATTRIBUTE_UNUSED,\n \t\t\t\tsec_ptr asect)\n {\n-\n+#if SIZEOF_LONG == SIZEOF_INT\n   if (asect->reloc_count >= LONG_MAX / sizeof (arelent *))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return -1;\n     }\n+#endif\n   return (asect->reloc_count + 1) * sizeof (arelent *);\n }\n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic pop\n-#endif\n \n /* Canonicalize the relocs.  */\n "
    },
    {
      "sha": "55a1db911e9aa4072b2a8421e72621ce02738722",
      "filename": "bfd/elf64-sparc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/elf64-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/elf64-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-sparc.c?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -34,23 +34,18 @@\n    section can represent up to two relocs, we must tell the user to allocate\n    more space.  */\n \n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Wtype-limits\"\n-#endif\n static long\n elf64_sparc_get_reloc_upper_bound (bfd *abfd ATTRIBUTE_UNUSED, asection *sec)\n {\n+#if SIZEOF_LONG == SIZEOF_INT\n   if (sec->reloc_count >= LONG_MAX / 2 / sizeof (arelent *))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return -1;\n     }\n+#endif\n   return (sec->reloc_count * 2 + 1) * sizeof (arelent *);\n }\n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic pop\n-#endif\n \n static long\n elf64_sparc_get_dynamic_reloc_upper_bound (bfd *abfd)"
    },
    {
      "sha": "122a0c26ccc1144d161d2c96063629c9245949b8",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/242a115951fe55e62036bac555017eb817ca1aa6/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/242a115951fe55e62036bac555017eb817ca1aa6/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=242a115951fe55e62036bac555017eb817ca1aa6",
      "patch": "@@ -1417,24 +1417,19 @@ bfd_mach_o_write_dyld_info (bfd *abfd, bfd_mach_o_load_command *command)\n   return TRUE;\n }\n \n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic push\n-# pragma GCC diagnostic ignored \"-Wtype-limits\"\n-#endif\n long\n bfd_mach_o_get_reloc_upper_bound (bfd *abfd ATTRIBUTE_UNUSED,\n \t\t\t\t  asection *asect)\n {\n+#if SIZEOF_LONG == SIZEOF_INT\n    if (asect->reloc_count >= LONG_MAX / sizeof (arelent *))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return -1;\n     }\n+#endif\n  return (asect->reloc_count + 1) * sizeof (arelent *);\n }\n-#if GCC_VERSION >= 4003\n-# pragma GCC diagnostic pop\n-#endif\n \n /* In addition to the need to byte-swap the symbol number, the bit positions\n    of the fields in the relocation information vary per target endian-ness.  */"
    }
  ]
}