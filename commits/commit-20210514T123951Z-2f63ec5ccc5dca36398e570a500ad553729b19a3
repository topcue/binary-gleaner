{
  "sha": "2f63ec5ccc5dca36398e570a500ad553729b19a3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmY2M2VjNWNjYzVkY2EzNjM5OGU1NzBhNTAwYWQ1NTM3MjliMTlhMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-11T12:40:24Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-14T12:39:51Z"
    },
    "message": "gdb: some int to bool conversion in remote.c\n\nConvert a couple of local variables from int to bool.  There should be\nno user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* remote.c (check_pending_events_prevent_wildcard_vcont): Change\n\targument type, update and re-wrap, header comment.\n\t(remote_target::commit_resumed): Convert any_process_wildcard and\n\tmay_global_wildcard_vcont from int to bool.",
    "tree": {
      "sha": "375511c982ef6a23f8636d7d08e75f860970a43b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/375511c982ef6a23f8636d7d08e75f860970a43b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f63ec5ccc5dca36398e570a500ad553729b19a3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f63ec5ccc5dca36398e570a500ad553729b19a3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f63ec5ccc5dca36398e570a500ad553729b19a3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f63ec5ccc5dca36398e570a500ad553729b19a3/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75f03fa77434ad49f1e7d333e0c93048639806e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75f03fa77434ad49f1e7d333e0c93048639806e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75f03fa77434ad49f1e7d333e0c93048639806e3"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 21,
    "deletions": 17
  },
  "files": [
    {
      "sha": "4bed8c2b60457e21079d15bc7f6cfda97844c757",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f63ec5ccc5dca36398e570a500ad553729b19a3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f63ec5ccc5dca36398e570a500ad553729b19a3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2f63ec5ccc5dca36398e570a500ad553729b19a3",
      "patch": "@@ -1,3 +1,10 @@\n+2021-05-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* remote.c (check_pending_events_prevent_wildcard_vcont): Change\n+\targument type, update and re-wrap, header comment.\n+\t(remote_target::commit_resumed): Convert any_process_wildcard and\n+\tmay_global_wildcard_vcont from int to bool.\n+\n 2021-05-14  Kent Cheung  <kent.cheung@arm.com>\n \n \t* cp-valprint.c (cp_print_value): Replaced duplicate code."
    },
    {
      "sha": "aa98f5f951e8ec074fa2859c27284a70e3d53b58",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 14,
      "deletions": 17,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f63ec5ccc5dca36398e570a500ad553729b19a3/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f63ec5ccc5dca36398e570a500ad553729b19a3/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=2f63ec5ccc5dca36398e570a500ad553729b19a3",
      "patch": "@@ -780,7 +780,7 @@ class remote_target : public process_stratum_target\n   int stop_reply_queue_length ();\n \n   void check_pending_events_prevent_wildcard_vcont\n-    (int *may_global_wildcard_vcont);\n+    (bool *may_global_wildcard_vcont);\n \n   void discard_pending_stop_replies_in_queue ();\n   struct stop_reply *remote_notif_remove_queued_reply (ptid_t ptid);\n@@ -6634,9 +6634,6 @@ vcont_builder::push_action (ptid_t ptid, bool step, gdb_signal siggnal)\n void\n remote_target::commit_resumed ()\n {\n-  int any_process_wildcard;\n-  int may_global_wildcard_vcont;\n-\n   /* If connected in all-stop mode, we'd send the remote resume\n      request directly from remote_resume.  Likewise if\n      reverse-debugging, as there are no defined vCont actions for\n@@ -6693,7 +6690,7 @@ remote_target::commit_resumed ()\n      (vCont;c).  We can still send process-wide wildcards though.  */\n \n   /* Start by assuming a global wildcard (vCont;c) is possible.  */\n-  may_global_wildcard_vcont = 1;\n+  bool may_global_wildcard_vcont = true;\n \n   /* And assume every process is individually wildcard-able too.  */\n   for (inferior *inf : all_non_exited_inferiors (this))\n@@ -6721,7 +6718,7 @@ remote_target::commit_resumed ()\n \n \t  /* And if we can't wildcard a process, we can't wildcard\n \t     everything either.  */\n-\t  may_global_wildcard_vcont = 0;\n+\t  may_global_wildcard_vcont = false;\n \t  continue;\n \t}\n \n@@ -6732,7 +6729,7 @@ remote_target::commit_resumed ()\n \t can't do a global wildcard, as that would resume the fork\n \t child.  */\n       if (is_pending_fork_parent_thread (tp))\n-\tmay_global_wildcard_vcont = 0;\n+\tmay_global_wildcard_vcont = false;\n     }\n \n   /* We didn't have any resumed thread pending a vCont resume, so nothing to\n@@ -6782,13 +6779,13 @@ remote_target::commit_resumed ()\n   /* Now check whether we can send any process-wide wildcard.  This is\n      to avoid sending a global wildcard in the case nothing is\n      supposed to be resumed.  */\n-  any_process_wildcard = 0;\n+  bool any_process_wildcard = false;\n \n   for (inferior *inf : all_non_exited_inferiors (this))\n     {\n       if (get_remote_inferior (inf)->may_wildcard_vcont)\n \t{\n-\t  any_process_wildcard = 1;\n+\t  any_process_wildcard = true;\n \t  break;\n \t}\n     }\n@@ -7271,15 +7268,15 @@ remote_target::remove_new_fork_children (threads_listing_context *context)\n       context->remove_thread (event->ws.value.related_pid);\n }\n \n-/* Check whether any event pending in the vStopped queue would prevent\n-   a global or process wildcard vCont action.  Clear\n-   *may_global_wildcard if we can't do a global wildcard (vCont;c),\n-   and clear the event inferior's may_wildcard_vcont flag if we can't\n-   do a process-wide wildcard resume (vCont;c:pPID.-1).  */\n+/* Check whether any event pending in the vStopped queue would prevent a\n+   global or process wildcard vCont action.  Set *may_global_wildcard to\n+   false if we can't do a global wildcard (vCont;c), and clear the event\n+   inferior's may_wildcard_vcont flag if we can't do a process-wide\n+   wildcard resume (vCont;c:pPID.-1).  */\n \n void\n remote_target::check_pending_events_prevent_wildcard_vcont\n-  (int *may_global_wildcard)\n+  (bool *may_global_wildcard)\n {\n   struct notif_client *notif = &notif_client_stop;\n \n@@ -7292,12 +7289,12 @@ remote_target::check_pending_events_prevent_wildcard_vcont\n \n       if (event->ws.kind == TARGET_WAITKIND_FORKED\n \t  || event->ws.kind == TARGET_WAITKIND_VFORKED)\n-\t*may_global_wildcard = 0;\n+\t*may_global_wildcard = false;\n \n       /* This may be the first time we heard about this process.\n \t Regardless, we must not do a global wildcard resume, otherwise\n \t we'd resume this process too.  */\n-      *may_global_wildcard = 0;\n+      *may_global_wildcard = false;\n       if (event->ptid != null_ptid)\n \t{\n \t  inferior *inf = find_inferior_ptid (this, event->ptid);"
    }
  ]
}