{
  "sha": "f761cb13a903da6a5a1b3f9a5cb984600124ac31",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Zjc2MWNiMTNhOTAzZGE2YTVhMWIzZjlhNWNiOTg0NjAwMTI0YWMzMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-14T00:41:28Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-14T06:54:19Z"
    },
    "message": "asan: readelf: memory leaks\n\n\t* readelf.c (dump_section_as_strings): Free memory on error exit.\n\t(dump_section_as_bytes, process_notes_at): Likewise.\n\t(get_build_id): Free enote.",
    "tree": {
      "sha": "6e1df6192e7784bda1498f8559cb00ef62d6074f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6e1df6192e7784bda1498f8559cb00ef62d6074f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f761cb13a903da6a5a1b3f9a5cb984600124ac31",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f761cb13a903da6a5a1b3f9a5cb984600124ac31",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f761cb13a903da6a5a1b3f9a5cb984600124ac31",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f761cb13a903da6a5a1b3f9a5cb984600124ac31/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "02a8180e6f6146f95593001247f6cd080bdb7b38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02a8180e6f6146f95593001247f6cd080bdb7b38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/02a8180e6f6146f95593001247f6cd080bdb7b38"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 36,
    "deletions": 8
  },
  "files": [
    {
      "sha": "9a64b0de2458e722abbc172e5ec1dea6cbeec51d",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f761cb13a903da6a5a1b3f9a5cb984600124ac31/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f761cb13a903da6a5a1b3f9a5cb984600124ac31/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=f761cb13a903da6a5a1b3f9a5cb984600124ac31",
      "patch": "@@ -1,3 +1,9 @@\n+2020-03-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (dump_section_as_strings): Free memory on error exit.\n+\t(dump_section_as_bytes, process_notes_at): Likewise.\n+\t(get_build_id): Free enote.\n+\n 2020-03-13  Kamil Rytarowski  <n54@gmx.com>\n \n \t* readelf.c (get_netbsd_elfcore_note_type): Add support for"
    },
    {
      "sha": "b106e8c816f7daa50ca502a91edf6bb31cbbb64b",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 30,
      "deletions": 8,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f761cb13a903da6a5a1b3f9a5cb984600124ac31/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f761cb13a903da6a5a1b3f9a5cb984600124ac31/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=f761cb13a903da6a5a1b3f9a5cb984600124ac31",
      "patch": "@@ -13682,7 +13682,7 @@ dump_section_as_strings (Elf_Internal_Shdr * section, Filedata * filedata)\n \t    {\n \t      warn (_(\"section '%s' has unsupported compress type: %d\\n\"),\n \t\t    printable_section_name (filedata, section), chdr.ch_type);\n-\t      return FALSE;\n+\t      goto error_out;\n \t    }\n \t  uncompressed_size = chdr.ch_size;\n \t  start += compression_header_size;\n@@ -13714,7 +13714,7 @@ dump_section_as_strings (Elf_Internal_Shdr * section, Filedata * filedata)\n \t    {\n \t      error (_(\"Unable to decompress section %s\\n\"),\n \t\t     printable_section_name (filedata, section));\n-\t      return FALSE;\n+\t      goto error_out;\n \t    }\n \t}\n       else\n@@ -13850,6 +13850,10 @@ dump_section_as_strings (Elf_Internal_Shdr * section, Filedata * filedata)\n \n   putchar ('\\n');\n   return TRUE;\n+\n+error_out:\n+  free (real_start);\n+  return FALSE;\n }\n \n static bfd_boolean\n@@ -13889,7 +13893,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n \t    {\n \t      warn (_(\"section '%s' has unsupported compress type: %d\\n\"),\n \t\t    printable_section_name (filedata, section), chdr.ch_type);\n-\t      return FALSE;\n+\t      goto error_out;\n \t    }\n \t  uncompressed_size = chdr.ch_size;\n \t  start += compression_header_size;\n@@ -13924,7 +13928,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n \t      error (_(\"Unable to decompress section %s\\n\"),\n \t\t     printable_section_name (filedata, section));\n \t      /* FIXME: Print the section anyway ?  */\n-\t      return FALSE;\n+\t      goto error_out;\n \t    }\n \t}\n       else\n@@ -13934,7 +13938,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n   if (relocate)\n     {\n       if (! apply_relocations (filedata, section, start, section_size, NULL, NULL))\n-\treturn FALSE;\n+\tgoto error_out;\n     }\n   else\n     {\n@@ -14004,6 +14008,10 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n \n   putchar ('\\n');\n   return TRUE;\n+\n+ error_out:\n+  free (real_start);\n+  return FALSE;\n }\n \n static ctf_sect_t *\n@@ -14317,7 +14325,10 @@ get_build_id (void * data)\n       if (align < 4)\n         align = 4;\n       else if (align != 4 && align != 8)\n-        continue;\n+\t{\n+\t  free (enote);\n+\t  continue;\n+\t}\n \n       end = (char *) enote + length;\n       data_remaining = end - (char *) enote;\n@@ -14330,6 +14341,7 @@ get_build_id (void * data)\n \t      warn (_(\"\\\n malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n \t\t    printable_section_name (filedata, shdr));\n+\t      free (enote);\n               continue;\n             }\n           data_remaining -= min_notesz;\n@@ -14356,6 +14368,7 @@ malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n \t      warn (_(\"\\\n malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n \t\t    printable_section_name (filedata, shdr));\n+\t      free (enote);\n               continue;\n             }\n           data_remaining -= min_notesz;\n@@ -14380,6 +14393,7 @@ malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n \t  warn (_(\"\\\n malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n \t\tprintable_section_name (filedata, shdr));\n+\t  free (enote);\n           continue;\n         }\n \n@@ -14394,14 +14408,19 @@ malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n \n           build_id = malloc (inote.descsz * 2 + 1);\n           if (build_id == NULL)\n-\t    return NULL;\n+\t    {\n+\t      free (enote);\n+\t      return NULL;\n+\t    }\n \n           for (j = 0; j < inote.descsz; ++j)\n             sprintf (build_id + (j * 2), \"%02x\", inote.descdata[j] & 0xff);\n           build_id[inote.descsz * 2] = '\\0';\n+\t  free (enote);\n \n           return (unsigned char *) build_id;\n         }\n+      free (enote);\n     }\n \n   return NULL;\n@@ -19425,7 +19444,10 @@ process_notes_at (Filedata *           filedata,\n       if (pnotes)\n \t{\n \t  if (! apply_relocations (filedata, section, (unsigned char *) pnotes, length, NULL, NULL))\n-\t    return FALSE;\n+\t    {\n+\t      free (pnotes);\n+\t      return FALSE;\n+\t    }\n \t}\n     }\n   else"
    }
  ]
}