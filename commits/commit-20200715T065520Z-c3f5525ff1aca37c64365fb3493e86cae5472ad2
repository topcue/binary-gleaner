{
  "sha": "c3f5525ff1aca37c64365fb3493e86cae5472ad2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzNmNTUyNWZmMWFjYTM3YzY0MzY1ZmIzNDkzZTg2Y2FlNTQ3MmFkMg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-15T06:55:20Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-15T06:55:20Z"
    },
    "message": "x86: make PUSH/POP disassembly uniform\n\nIrrespective of their encoding the resulting output should look the\nsame. Therefore wire the handling of PUSH/POP with GPR operands\nencoded in the main opcode byte to the same logic used for other\noperands. This frees up yet another macro character.",
    "tree": {
      "sha": "df86751aac9ff6f0edde8b37a14afda7ed890f88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/df86751aac9ff6f0edde8b37a14afda7ed890f88"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3f5525ff1aca37c64365fb3493e86cae5472ad2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3f5525ff1aca37c64365fb3493e86cae5472ad2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3f5525ff1aca37c64365fb3493e86cae5472ad2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3f5525ff1aca37c64365fb3493e86cae5472ad2/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2e018c340310c0cd13f72d3dc8f6465936c5443",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2e018c340310c0cd13f72d3dc8f6465936c5443",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2e018c340310c0cd13f72d3dc8f6465936c5443"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 27,
    "deletions": 30
  },
  "files": [
    {
      "sha": "f5907bc8029ec987116673823c103bf25a2754a8",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3f5525ff1aca37c64365fb3493e86cae5472ad2/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3f5525ff1aca37c64365fb3493e86cae5472ad2/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=c3f5525ff1aca37c64365fb3493e86cae5472ad2",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-15  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (dis386): Adjust 'V' description. Use P-based\n+\tconstruct for push/pop of register.\n+\t(putop): Honor cond when handling 'P'. Drop handling of plain\n+\t'V'.\n+\n 2020-07-15  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (dis386): Adjust 'P', 'T', 'U', and '@'"
    },
    {
      "sha": "2742cf23be00d788c545d1ec1985b0bde1bc4aec",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 20,
      "deletions": 30,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3f5525ff1aca37c64365fb3493e86cae5472ad2/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3f5525ff1aca37c64365fb3493e86cae5472ad2/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=c3f5525ff1aca37c64365fb3493e86cae5472ad2",
      "patch": "@@ -1747,8 +1747,7 @@ struct dis386 {\n    'T' => print 'w', 'l'/'d', or 'q' if instruction has an operand size\n \t  prefix or if suffix_always is true.\n    'U' unused.\n-   'V' => print 'q' in 64bit mode if instruction has no operand size\n-\t  prefix and behave as 'S' otherwise\n+   'V' unused.\n    'W' => print 'b', 'w' or 'l' ('d' in Intel mode)\n    'X' => print 's', 'd' depending on data16 prefix (for XMM)\n    'Y' unused.\n@@ -1877,23 +1876,23 @@ static const struct dis386 dis386[] = {\n   { \"dec{S|}\",\t\t{ RMeSI }, 0 },\n   { \"dec{S|}\",\t\t{ RMeDI }, 0 },\n   /* 50 */\n-  { \"pushV\",\t\t{ RMrAX }, 0 },\n-  { \"pushV\",\t\t{ RMrCX }, 0 },\n-  { \"pushV\",\t\t{ RMrDX }, 0 },\n-  { \"pushV\",\t\t{ RMrBX }, 0 },\n-  { \"pushV\",\t\t{ RMrSP }, 0 },\n-  { \"pushV\",\t\t{ RMrBP }, 0 },\n-  { \"pushV\",\t\t{ RMrSI }, 0 },\n-  { \"pushV\",\t\t{ RMrDI }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrAX }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrCX }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrDX }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrBX }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrSP }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrBP }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrSI }, 0 },\n+  { \"push{!P|}\",\t\t{ RMrDI }, 0 },\n   /* 58 */\n-  { \"popV\",\t\t{ RMrAX }, 0 },\n-  { \"popV\",\t\t{ RMrCX }, 0 },\n-  { \"popV\",\t\t{ RMrDX }, 0 },\n-  { \"popV\",\t\t{ RMrBX }, 0 },\n-  { \"popV\",\t\t{ RMrSP }, 0 },\n-  { \"popV\",\t\t{ RMrBP }, 0 },\n-  { \"popV\",\t\t{ RMrSI }, 0 },\n-  { \"popV\",\t\t{ RMrDI }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrAX }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrCX }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrDX }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrBX }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrSP }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrBP }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrSI }, 0 },\n+  { \"pop{!P|}\",\t\t{ RMrDI }, 0 },\n   /* 60 */\n   { X86_64_TABLE (X86_64_60) },\n   { X86_64_TABLE (X86_64_61) },\n@@ -10647,7 +10646,8 @@ putop (const char *in_template, int sizeflag)\n \tcase 'P':\n \t  if (l == 0)\n \t    {\n-\t      if (need_modrm && modrm.mod == 3 && !(sizeflag & SUFFIX_ALWAYS))\n+\t      if (((need_modrm && modrm.mod == 3) || !cond)\n+\t\t  && !(sizeflag & SUFFIX_ALWAYS))\n \t\tbreak;\n \t  /* Fall through.  */\n \tcase 'T':\n@@ -10744,17 +10744,7 @@ putop (const char *in_template, int sizeflag)\n \t  break;\n \tcase 'V':\n \t  if (l == 0)\n-\t    {\n-\t      if (intel_syntax)\n-\t\tbreak;\n-\t      if (address_mode == mode_64bit\n-\t\t  && ((sizeflag & DFLAG) || (rex & REX_W)))\n-\t\t{\n-\t\t  if (sizeflag & SUFFIX_ALWAYS)\n-\t\t    *obufp++ = 'q';\n-\t\t  break;\n-\t\t}\n-\t    }\n+\t    abort ();\n \t  else if (l == 1 && last[0] == 'L')\n \t    {\n \t      if (rex & REX_W)"
    }
  ]
}