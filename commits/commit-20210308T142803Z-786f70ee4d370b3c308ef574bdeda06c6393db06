{
  "sha": "786f70ee4d370b3c308ef574bdeda06c6393db06",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzg2ZjcwZWU0ZDM3MGIzYzMwOGVmNTc0YmRlZGEwNmM2MzkzZGIwNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:03Z"
    },
    "message": "Split out eval_op_ind\n\nThis splits UNOP_IND into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (eval_op_ind): New function.\n\t(evaluate_subexp_standard): Use it.",
    "tree": {
      "sha": "c4b30856c0385e00d678d9efdbb01460d35a7632",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c4b30856c0385e00d678d9efdbb01460d35a7632"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/786f70ee4d370b3c308ef574bdeda06c6393db06",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/786f70ee4d370b3c308ef574bdeda06c6393db06",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/786f70ee4d370b3c308ef574bdeda06c6393db06",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/786f70ee4d370b3c308ef574bdeda06c6393db06/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "24338fb9d964135fced728e943d0e8e80df3840b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24338fb9d964135fced728e943d0e8e80df3840b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/24338fb9d964135fced728e943d0e8e80df3840b"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 60,
    "deletions": 45
  },
  "files": [
    {
      "sha": "794b88343d237b60e3c8b36093b7b9fb76c082cc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/786f70ee4d370b3c308ef574bdeda06c6393db06/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/786f70ee4d370b3c308ef574bdeda06c6393db06/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=786f70ee4d370b3c308ef574bdeda06c6393db06",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (eval_op_ind): New function.\n+\t(evaluate_subexp_standard): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (eval_op_lognot): New function."
    },
    {
      "sha": "e1e0e05149fc5ee96fdd5629f26183962e2ea298",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 55,
      "deletions": 45,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/786f70ee4d370b3c308ef574bdeda06c6393db06/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/786f70ee4d370b3c308ef574bdeda06c6393db06/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=786f70ee4d370b3c308ef574bdeda06c6393db06",
      "patch": "@@ -1824,6 +1824,60 @@ eval_op_lognot (struct type *expect_type, struct expression *exp,\n     }\n }\n \n+/* A helper function for UNOP_IND.  */\n+\n+static struct value *\n+eval_op_ind (struct type *expect_type, struct expression *exp,\n+\t     enum noside noside, enum exp_opcode op,\n+\t     struct value *arg1)\n+{\n+  struct type *type = check_typedef (value_type (arg1));\n+  if (type->code () == TYPE_CODE_METHODPTR\n+      || type->code () == TYPE_CODE_MEMBERPTR)\n+    error (_(\"Attempt to dereference pointer \"\n+\t     \"to member without an object\"));\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+  if (unop_user_defined_p (op, arg1))\n+    return value_x_unop (arg1, op, noside);\n+  else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    {\n+      type = check_typedef (value_type (arg1));\n+\n+      /* If the type pointed to is dynamic then in order to resolve the\n+\t dynamic properties we must actually dereference the pointer.\n+\t There is a risk that this dereference will have side-effects\n+\t in the inferior, but being able to print accurate type\n+\t information seems worth the risk. */\n+      if ((type->code () != TYPE_CODE_PTR\n+\t   && !TYPE_IS_REFERENCE (type))\n+\t  || !is_dynamic_type (TYPE_TARGET_TYPE (type)))\n+\t{\n+\t  if (type->code () == TYPE_CODE_PTR\n+\t      || TYPE_IS_REFERENCE (type)\n+\t      /* In C you can dereference an array to get the 1st elt.  */\n+\t      || type->code () == TYPE_CODE_ARRAY)\n+\t    return value_zero (TYPE_TARGET_TYPE (type),\n+\t\t\t       lval_memory);\n+\t  else if (type->code () == TYPE_CODE_INT)\n+\t    /* GDB allows dereferencing an int.  */\n+\t    return value_zero (builtin_type (exp->gdbarch)->builtin_int,\n+\t\t\t       lval_memory);\n+\t  else\n+\t    error (_(\"Attempt to take contents of a non-pointer value.\"));\n+\t}\n+    }\n+\n+  /* Allow * on an integer so we can cast it to whatever we want.\n+     This returns an int, which seems like the most C-like thing to\n+     do.  \"long long\" variables are rare enough that\n+     BUILTIN_TYPE_LONGEST would seem to be a mistake.  */\n+  if (type->code () == TYPE_CODE_INT)\n+    return value_at_lazy (builtin_type (exp->gdbarch)->builtin_int,\n+\t\t\t  (CORE_ADDR) value_as_address (arg1));\n+  return value_ind (arg1);\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -2693,51 +2747,7 @@ evaluate_subexp_standard (struct type *expect_type,\n       if (expect_type && expect_type->code () == TYPE_CODE_PTR)\n \texpect_type = TYPE_TARGET_TYPE (check_typedef (expect_type));\n       arg1 = evaluate_subexp (expect_type, exp, pos, noside);\n-      type = check_typedef (value_type (arg1));\n-      if (type->code () == TYPE_CODE_METHODPTR\n-\t  || type->code () == TYPE_CODE_MEMBERPTR)\n-\terror (_(\"Attempt to dereference pointer \"\n-\t\t \"to member without an object\"));\n-      if (noside == EVAL_SKIP)\n-\treturn eval_skip_value (exp);\n-      if (unop_user_defined_p (op, arg1))\n-\treturn value_x_unop (arg1, op, noside);\n-      else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t{\n-\t  type = check_typedef (value_type (arg1));\n-\n-\t  /* If the type pointed to is dynamic then in order to resolve the\n-\t     dynamic properties we must actually dereference the pointer.\n-\t     There is a risk that this dereference will have side-effects\n-\t     in the inferior, but being able to print accurate type\n-\t     information seems worth the risk. */\n-\t  if ((type->code () != TYPE_CODE_PTR\n-\t       && !TYPE_IS_REFERENCE (type))\n-\t      || !is_dynamic_type (TYPE_TARGET_TYPE (type)))\n-\t    {\n-\t      if (type->code () == TYPE_CODE_PTR\n-\t\t  || TYPE_IS_REFERENCE (type)\n-\t\t  /* In C you can dereference an array to get the 1st elt.  */\n-\t\t  || type->code () == TYPE_CODE_ARRAY)\n-\t\treturn value_zero (TYPE_TARGET_TYPE (type),\n-\t\t\t\t   lval_memory);\n-\t      else if (type->code () == TYPE_CODE_INT)\n-\t\t/* GDB allows dereferencing an int.  */\n-\t\treturn value_zero (builtin_type (exp->gdbarch)->builtin_int,\n-\t\t\t\t   lval_memory);\n-\t      else\n-\t\terror (_(\"Attempt to take contents of a non-pointer value.\"));\n-\t    }\n-\t}\n-\n-      /* Allow * on an integer so we can cast it to whatever we want.\n-\t This returns an int, which seems like the most C-like thing to\n-\t do.  \"long long\" variables are rare enough that\n-\t BUILTIN_TYPE_LONGEST would seem to be a mistake.  */\n-      if (type->code () == TYPE_CODE_INT)\n-\treturn value_at_lazy (builtin_type (exp->gdbarch)->builtin_int,\n-\t\t\t      (CORE_ADDR) value_as_address (arg1));\n-      return value_ind (arg1);\n+      return eval_op_ind (expect_type, exp, noside, op, arg1);\n \n     case UNOP_ADDR:\n       /* C++: check for and handle pointer to members.  */"
    }
  ]
}