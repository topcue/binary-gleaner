{
  "sha": "0ac553107c601cc9c4c340338e0fc7e0ce8375cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGFjNTUzMTA3YzYwMWNjOWM0YzM0MDMzOGUwZmM3ZTBjZTgzNzVjYw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-18T20:28:24Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-18T22:08:14Z"
    },
    "message": "Don't write to inferior_ptid in remote.c\n\ngdb/ChangeLog:\n2020-06-18  Pedro Alves  <palves@redhat.com>\n\n\t* remote.c (remote_target::remote_notice_new_inferior): Use\n\tswitch_to_thread instead of writing to inferior_ptid directly.\n\t(remote_target::add_current_inferior_and_thread): Use\n\tswitch_to_no_thread instead of writing to inferior_ptid directly.\n\t(extended_remote_target::attach): Use switch_to_inferior_no_thread\n\tand switch_to_thread instead of using set_current_inferior or\n\twriting to inferior_ptid directly.",
    "tree": {
      "sha": "88f159eaad394c47aecc79314be75eb4fdb136aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88f159eaad394c47aecc79314be75eb4fdb136aa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0ac553107c601cc9c4c340338e0fc7e0ce8375cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ac553107c601cc9c4c340338e0fc7e0ce8375cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0ac553107c601cc9c4c340338e0fc7e0ce8375cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ac553107c601cc9c4c340338e0fc7e0ce8375cc/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5233f39b8b999f2675fb9493149e878c281e1d60",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5233f39b8b999f2675fb9493149e878c281e1d60",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5233f39b8b999f2675fb9493149e878c281e1d60"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 28,
    "deletions": 16
  },
  "files": [
    {
      "sha": "334c227574be6d1328990cda368e8166f54cfb69",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac553107c601cc9c4c340338e0fc7e0ce8375cc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac553107c601cc9c4c340338e0fc7e0ce8375cc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0ac553107c601cc9c4c340338e0fc7e0ce8375cc",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-18  Pedro Alves  <palves@redhat.com>\n+\n+\t* remote.c (remote_target::remote_notice_new_inferior): Use\n+\tswitch_to_thread instead of writing to inferior_ptid directly.\n+\t(remote_target::add_current_inferior_and_thread): Use\n+\tswitch_to_no_thread instead of writing to inferior_ptid directly.\n+\t(extended_remote_target::attach): Use switch_to_inferior_no_thread\n+\tand switch_to_thread instead of using set_current_inferior or\n+\twriting to inferior_ptid directly.\n+\n 2020-06-18  Pedro Alves  <palves@redhat.com>\n \n \t* tracectf.c (ctf_target_open): Switch to added thread instead of"
    },
    {
      "sha": "fd89f2c0840afd4a661e69472ab849db6a7d6cb8",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac553107c601cc9c4c340338e0fc7e0ce8375cc/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac553107c601cc9c4c340338e0fc7e0ce8375cc/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=0ac553107c601cc9c4c340338e0fc7e0ce8375cc",
      "patch": "@@ -2493,8 +2493,9 @@ remote_target::remote_notice_new_inferior (ptid_t currthread, int executing)\n \t    thread_change_ptid (this, inferior_ptid, currthread);\n \t  else\n \t    {\n-\t      remote_add_thread (currthread, running, executing);\n-\t      inferior_ptid = currthread;\n+\t      thread_info *thr\n+\t\t= remote_add_thread (currthread, running, executing);\n+\t      switch_to_thread (thr);\n \t    }\n \t  return;\n \t}\n@@ -4346,9 +4347,10 @@ remote_target::add_current_inferior_and_thread (char *wait_status)\n   struct remote_state *rs = get_remote_state ();\n   bool fake_pid_p = false;\n \n-  inferior_ptid = null_ptid;\n+  switch_to_no_thread ();\n \n-  /* Now, if we have thread information, update inferior_ptid.  */\n+  /* Now, if we have thread information, update the current thread's\n+     ptid.  */\n   ptid_t curr_ptid = get_current_thread (wait_status);\n \n   if (curr_ptid != null_ptid)\n@@ -5760,7 +5762,7 @@ remote_target::remote_detach_1 (inferior *inf, int from_tty)\n     }\n   else\n     {\n-      inferior_ptid = null_ptid;\n+      switch_to_no_thread ();\n       detach_inferior (current_inferior ());\n     }\n }\n@@ -5906,33 +5908,33 @@ extended_remote_target::attach (const char *args, int from_tty)\n \t     target_pid_to_str (ptid_t (pid)).c_str ());\n     }\n \n-  set_current_inferior (remote_add_inferior (false, pid, 1, 0));\n+  switch_to_inferior_no_thread (remote_add_inferior (false, pid, 1, 0));\n \n   inferior_ptid = ptid_t (pid);\n \n   if (target_is_non_stop_p ())\n     {\n-      struct thread_info *thread;\n-\n       /* Get list of threads.  */\n       update_thread_list ();\n \n-      thread = first_thread_of_inferior (current_inferior ());\n-      if (thread)\n-\tinferior_ptid = thread->ptid;\n-      else\n-\tinferior_ptid = ptid_t (pid);\n+      thread_info *thread = first_thread_of_inferior (current_inferior ());\n+      if (thread != nullptr)\n+\tswitch_to_thread (thread);\n \n       /* Invalidate our notion of the remote current thread.  */\n       record_currthread (rs, minus_one_ptid);\n     }\n   else\n     {\n-      /* Now, if we have thread information, update inferior_ptid.  */\n-      inferior_ptid = remote_current_thread (inferior_ptid);\n+      /* Now, if we have thread information, update the main thread's\n+\t ptid.  */\n+      ptid_t curr_ptid = remote_current_thread (ptid_t (pid));\n \n       /* Add the main thread to the thread list.  */\n-      thread_info *thr = add_thread_silent (this, inferior_ptid);\n+      thread_info *thr = add_thread_silent (this, curr_ptid);\n+\n+      switch_to_thread (thr);\n+\n       /* Don't consider the thread stopped until we've processed the\n \t saved stop reply.  */\n       set_executing (this, thr->ptid, true);"
    }
  ]
}