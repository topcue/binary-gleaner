{
  "sha": "ed2a222951020d1117c5e1d4f37e82fd26761267",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQyYTIyMjk1MTAyMGQxMTE3YzVlMWQ0ZjM3ZTgyZmQyNjc2MTI2Nw==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-13T12:12:34Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-29T18:43:04Z"
    },
    "message": "Load system gdbinit files from a directory\n\nAdds a configure option --with-system-gdbinit-dir to specify a directory\nin which to look for gdbinit files.  All files in this directory are\nloaded on startup (subject to -n/-nx as usual) as long as the extension\nmatches a known and enabled scripting language (.gdb/.py/.scm).\n\nThis also changes get_ext_lang_of_file to support \".gdb\" files, similar\nto get_ext_lang_defn's handling of EXT_LANG_GDB.\n\ngdb/ChangeLog:\n\n2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n\n\t* NEWS: Mention new --with-system-gdbinit-dir option.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Add new option --with-system-gdbinit-dir.\n\t* extension.c (get_ext_lang_of_file): Return extension_language_gdb\n\tfor a \".gdb\" suffix.\n\t* main.c (get_init_files): Change system_gdbinit argument to\n\ta vector and return the files in SYSTEM_GDBINIT_DIR in\n\taddition to SYSTEM_GDBINIT.\n\t(captured_main_1): Update.\n\t(print_gdb_help): Update.\n\t* top.c (print_gdb_configuration): Also print the value of\n\tSYSTEM_GDBINIT_DIR.\n\ngdb/doc/ChangeLog:\n\n2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n\n\t* Makefile.in: Also set SYSTEM_GDBINIT_DIR for the info manual\n\tgeneration.\n\t* gdb.texinfo (many sections): Document new --with-system-gdbinit-dir\n\toption.\n\nChange-Id: If233859ecc21bc6421d589b37cd658a3c7d030f2",
    "tree": {
      "sha": "dfdcc500b315f3d576b8b8e0fa1a9ced2104da32",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dfdcc500b315f3d576b8b8e0fa1a9ced2104da32"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed2a222951020d1117c5e1d4f37e82fd26761267",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2a222951020d1117c5e1d4f37e82fd26761267",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed2a222951020d1117c5e1d4f37e82fd26761267",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2a222951020d1117c5e1d4f37e82fd26761267/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "70cf683455e1a3429d517a2e25a36c438474cfde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70cf683455e1a3429d517a2e25a36c438474cfde",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/70cf683455e1a3429d517a2e25a36c438474cfde"
    }
  ],
  "stats": {
    "total": 257,
    "additions": 235,
    "deletions": 22
  },
  "files": [
    {
      "sha": "5cf1ae71af976ebc432268dae64f95e5ab9f85a8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -1,3 +1,19 @@\n+2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* NEWS: Mention new --with-system-gdbinit-dir option.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add new option --with-system-gdbinit-dir.\n+\t* extension.c (get_ext_lang_of_file): Return extension_language_gdb\n+\tfor a \".gdb\" suffix.\n+\t* main.c (get_init_files): Change system_gdbinit argument to\n+\ta vector and return the files in SYSTEM_GDBINIT_DIR in\n+\taddition to SYSTEM_GDBINIT.\n+\t(captured_main_1): Update.\n+\t(print_gdb_help): Update.\n+\t* top.c (print_gdb_configuration): Also print the value of\n+\tSYSTEM_GDBINIT_DIR.\n+\n 2019-10-28  Christian Biesinger  <cbiesinger@google.com>\n \n \t* gdbsupport/common-utils.h (startswith): Add an overloaded version"
    },
    {
      "sha": "761359862a3ab97a51bd16c02ca549910152a13b",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -46,6 +46,12 @@\n   The 'outer_function::' prefix is only needed if 'inner_function' is\n   not visible in the current scope.\n \n+* In addition to the system-wide gdbinit file, if configured with\n+ --with-system-gdbinit-dir, GDB will now also load files in that directory\n+ as system gdbinit files, unless the -nx or -n flag is provided.  Files\n+ with extensions .gdb, .py and .scm are supported as long as GDB was\n+ compiled with support for that language.\n+\n * Python API\n \n   ** The gdb.Value type has a new method 'format_string' which returns a"
    },
    {
      "sha": "fc05f154b7263e8a5027cbf7e7fb33a13a9055fd",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -681,6 +681,13 @@\n /* automatically load a system-wide gdbinit file */\n #undef SYSTEM_GDBINIT\n \n+/* automatically load system-wide gdbinit files from this directory */\n+#undef SYSTEM_GDBINIT_DIR\n+\n+/* Define if the system-gdbinit-dir directory should be relocated when GDB is\n+   moved. */\n+#undef SYSTEM_GDBINIT_DIR_RELOCATABLE\n+\n /* Define if the system-gdbinit directory should be relocated when GDB is\n    moved. */\n #undef SYSTEM_GDBINIT_RELOCATABLE"
    },
    {
      "sha": "e8059039bd50011fda23ca60f1e467766a336fb5",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -697,6 +697,7 @@ WIN32LIBS\n SER_HARDWIRE\n WERROR_CFLAGS\n WARN_CFLAGS\n+SYSTEM_GDBINIT_DIR\n SYSTEM_GDBINIT\n TARGET_SYSTEM_ROOT\n CONFIG_LDFLAGS\n@@ -888,6 +889,7 @@ with_libipt_prefix\n with_included_regex\n with_sysroot\n with_system_gdbinit\n+with_system_gdbinit_dir\n enable_werror\n enable_build_warnings\n enable_gdb_build_warnings\n@@ -1624,6 +1626,9 @@ Optional Packages:\n   --with-sysroot[=DIR]    search for usr/lib et al within DIR\n   --with-system-gdbinit=PATH\n                           automatically load a system-wide gdbinit file\n+  --with-system-gdbinit-dir=PATH\n+                          automatically load system-wide gdbinit files from\n+                          this directory\n   --with-lzma             support lzma compression (auto/yes/no)\n   --with-liblzma-prefix[=DIR]  search for liblzma in DIR/include and DIR/lib\n   --without-liblzma-prefix     don't search for liblzma in includedir and libdir\n@@ -15184,6 +15189,52 @@ _ACEOF\n \n \n \n+# Check whether --with-system-gdbinit-dir was given.\n+if test \"${with_system_gdbinit_dir+set}\" = set; then :\n+  withval=$with_system_gdbinit_dir;\n+    SYSTEM_GDBINIT_DIR=$withval\n+else\n+  SYSTEM_GDBINIT_DIR=\n+fi\n+\n+\n+  test \"x$prefix\" = xNONE && prefix=\"$ac_default_prefix\"\n+  test \"x$exec_prefix\" = xNONE && exec_prefix='${prefix}'\n+  ac_define_dir=`eval echo $SYSTEM_GDBINIT_DIR`\n+  ac_define_dir=`eval echo $ac_define_dir`\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SYSTEM_GDBINIT_DIR \"$ac_define_dir\"\n+_ACEOF\n+\n+\n+\n+\n+  if test \"x$exec_prefix\" = xNONE || test \"x$exec_prefix\" = 'x${prefix}'; then\n+     if test \"x$prefix\" = xNONE; then\n+     \ttest_prefix=/usr/local\n+     else\n+\ttest_prefix=$prefix\n+     fi\n+  else\n+     test_prefix=$exec_prefix\n+  fi\n+  value=0\n+  case ${ac_define_dir} in\n+     \"${test_prefix}\"|\"${test_prefix}/\"*|\\\n+\t'${exec_prefix}'|'${exec_prefix}/'*)\n+     value=1\n+     ;;\n+  esac\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SYSTEM_GDBINIT_DIR_RELOCATABLE $value\n+_ACEOF\n+\n+\n+\n+\n+\n # Check whether --enable-werror was given.\n if test \"${enable_werror+set}\" = set; then :\n   enableval=$enable_werror; case \"${enableval}\" in"
    },
    {
      "sha": "354bb7b4b68e2f8d2bea5499f0b2925203bac912",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -1795,6 +1795,9 @@ GDB_AC_DEFINE_RELOCATABLE(TARGET_SYSTEM_ROOT, sysroot, ${ac_define_dir})\n GDB_AC_WITH_DIR(SYSTEM_GDBINIT, system-gdbinit,\n     [automatically load a system-wide gdbinit file],\n     [])\n+GDB_AC_WITH_DIR(SYSTEM_GDBINIT_DIR, system-gdbinit-dir,\n+    [automatically load system-wide gdbinit files from this directory],\n+    [])\n \n AM_GDB_WARNINGS\n AM_GDB_UBSAN"
    },
    {
      "sha": "c1538be6d4bc9e73b9238cf0539d4a3d7b3df5c2",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* Makefile.in: Also set SYSTEM_GDBINIT_DIR for the info manual\n+\tgeneration.\n+\t* gdb.texinfo (many sections): Document new --with-system-gdbinit-dir\n+\toption.\n+\n 2019-10-23  Tom Tromey  <tom@tromey.com>\n \n \t* Makefile.in (READLINE_DIR): Update."
    },
    {
      "sha": "6588a0c9fe7cb041dbfd269ee11bda08973d9802",
      "filename": "gdb/doc/Makefile.in",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/doc/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/doc/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/Makefile.in?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -41,6 +41,7 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_DATA = @INSTALL_DATA@\n \n SYSTEM_GDBINIT = @SYSTEM_GDBINIT@\n+SYSTEM_GDBINIT_DIR = @SYSTEM_GDBINIT_DIR@\n \n mkinstalldirs = $(SHELL) $(srcdir)/../../mkinstalldirs\n \n@@ -425,6 +426,9 @@ GDBvn.texi : version.subst\n \tif [ -n \"$(SYSTEM_GDBINIT)\" ]; then \\\n \t  echo \"@set SYSTEM_GDBINIT $(SYSTEM_GDBINIT)\" >> ./GDBvn.new; \\\n \tfi\n+\tif [ -n \"$(SYSTEM_GDBINIT_DIR)\" ]; then \\\n+\t  echo \"@set SYSTEM_GDBINIT_DIR $(SYSTEM_GDBINIT_DIR)\" >> ./GDBvn.new; \\\n+\tfi\n \tmv GDBvn.new GDBvn.texi\n \n version.subst: $(gdbdir)/version.in $(gdbdir)/../bfd/version.h"
    },
    {
      "sha": "db3d15b05e8de4dea443e4ea0ff8bd8cadd8c26f",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 66,
      "deletions": 8,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -1083,6 +1083,16 @@ Its location is specified with the @code{--with-system-gdbinit}\n configure option (@pxref{System-wide configuration}).\n It is loaded first when @value{GDBN} starts, before command line options\n have been processed.\n+@item @file{system.gdbinit.d}\n+This is the system-wide init directory.\n+Its location is specified with the @code{--with-system-gdbinit-dir}\n+configure option (@pxref{System-wide configuration}).\n+Files in this directory are loaded in alphabetical order immediately after\n+system.gdbinit (if enabled) when @value{GDBN} starts, before command line\n+options have been processed.  Files need to have a recognized scripting\n+language extension (@file{.py}/@file{.scm}) or be named with a @file{.gdb}\n+extension to be interpreted as regular @value{GDBN} commands.  @value{GDBN}\n+will not recurse into any subdirectories of this directory.\n @item @file{~/.gdbinit}\n This is the init file in your home directory.\n It is loaded next, after @file{system.gdbinit}, and before\n@@ -1315,8 +1325,11 @@ Sets up the command interpreter as specified by the command line\n @cindex init file\n Reads the system-wide @dfn{init file} (if @option{--with-system-gdbinit} was\n used when building @value{GDBN}; @pxref{System-wide configuration,\n- ,System-wide configuration and settings}) and executes all the commands in\n-that file.\n+ ,System-wide configuration and settings}) and the files in the system-wide\n+gdbinit directory (if @option{--with-system-gdbinit-dir} was used) and executes\n+all the commands in those files.  The files need to be named with a @file{.gdb}\n+extension to be interpreted as @value{GDBN} commands, or they can be written\n+in a supported scripting language with an appropriate file extension.\n \n @anchor{Home Directory Init File}\n @item\n@@ -26283,6 +26296,13 @@ Display the current value of the @code{script-extension} option.\n \n @end table\n \n+@ifset SYSTEM_GDBINIT_DIR\n+This setting is not used for files in the system-wide gdbinit directory.\n+Files in that directory must have an extension matching their language,\n+or have a @file{.gdb} extension to be interpreted as regular @value{GDBN}\n+commands.  @xref{Startup}.\n+@end ifset\n+\n @node Sequences\n @section Canned Sequences of Commands\n \n@@ -37054,6 +37074,14 @@ directory under the configured prefix, and @value{GDBN} is moved to\n another location after being built, the location of the system-wide\n init file will be adjusted accordingly.\n \n+@item --with-system-gdbinit-dir=@var{directory}\n+Configure @value{GDBN} to automatically load init files from a\n+system-wide directory.  @var{directory} should be an absolute directory\n+name.  If @var{directory} is in a directory under the configured\n+prefix, and @value{GDBN} is moved to another location after being\n+built, the location of the system-wide init directory will be\n+adjusted accordingly.\n+\n @item --enable-build-warnings\n When building the @value{GDBN} sources, ask the compiler to warn about\n any code which looks even vaguely suspicious.  It passes many\n@@ -37079,24 +37107,28 @@ was first introduced in GCC 4.9.\n @section System-wide configuration and settings\n @cindex system-wide init file\n \n-@value{GDBN} can be configured to have a system-wide init file;\n-this file will be read and executed at startup (@pxref{Startup, , What\n-@value{GDBN} does during startup}).\n+@value{GDBN} can be configured to have a system-wide init file and a\n+system-wide init file directory; this file and files in that directory\n+(if they have a recognized file extension) will be read and executed at\n+startup (@pxref{Startup, , What @value{GDBN} does during startup}).\n \n-Here is the corresponding configure option:\n+Here are the corresponding configure options:\n \n @table @code\n @item --with-system-gdbinit=@var{file}\n Specify that the default location of the system-wide init file is\n @var{file}.\n+@item --with-system-gdbinit-dir=@var{directory}\n+Specify that the default location of the system-wide init file directory\n+is @var{directory}.\n @end table\n \n If @value{GDBN} has been configured with the option @option{--prefix=$prefix},\n-it may be subject to relocation.  Two possible cases:\n+they may be subject to relocation.  Two possible cases:\n \n @itemize @bullet\n @item \n-If the default location of this init file contains @file{$prefix},\n+If the default location of this init file/directory contains @file{$prefix},\n it will be subject to relocation.  Suppose that the configure options\n are @option{--prefix=$prefix --with-system-gdbinit=$prefix/etc/gdbinit};\n if @value{GDBN} is moved from @file{$prefix} to @file{$install}, the system\n@@ -37122,6 +37154,14 @@ initialization.  If the data-directory is changed after @value{GDBN} has\n started with the @code{set data-directory} command, the file will not be\n reread.\n \n+This applies similarly to the system-wide directory specified in\n+@option{--with-system-gdbinit-dir}.\n+\n+Any supported scripting language can be used for these init files, as long\n+as the file extension matches the scripting language.  To be interpreted\n+as regular @value{GDBN} commands, the files needs to have a @file{.gdb}\n+extension.\n+\n @menu\n * System-wide Configuration Scripts::  Installed System-wide Configuration Scripts\n @end menu\n@@ -45611,6 +45651,10 @@ Richard M. Stallman and Roland H. Pesch, July 1991.\n @value{SYSTEM_GDBINIT}\n @end ifset\n \n+@ifset SYSTEM_GDBINIT_DIR\n+@value{SYSTEM_GDBINIT_DIR}/*\n+@end ifset\n+\n ~/.gdbinit\n \n ./.gdbinit\n@@ -45652,6 +45696,20 @@ See more in\n the @value{GDBN} manual in node @code{System-wide configuration}\n -- shell command @code{info -f gdb -n 'System-wide configuration'}.\n @end ifset\n+@ifset SYSTEM_GDBINIT_DIR\n+@item @value{SYSTEM_GDBINIT_DIR}\n+@end ifset\n+@ifclear SYSTEM_GDBINIT_DIR\n+@item (not enabled with @code{--with-system-gdbinit-dir} during compilation)\n+@end ifclear\n+System-wide initialization directory.  All files in this directory are\n+executed on startup unless user specified @value{GDBN} option @code{-nx} or\n+@code{-n}, as long as they have a recognized file extension.\n+See more in\n+@ifset man\n+the @value{GDBN} manual in node @code{System-wide configuration}\n+-- shell command @code{info -f gdb -n 'System-wide configuration'}.\n+@end ifset\n @ifclear man\n @ref{System-wide configuration}.\n @end ifclear"
    },
    {
      "sha": "1fb4b48003a755dd49e98d1413a8418dff88d4a1",
      "filename": "gdb/extension.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/extension.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/extension.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.c?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -154,6 +154,9 @@ get_ext_lang_of_file (const char *file)\n   int i;\n   const struct extension_language_defn *extlang;\n \n+  if (has_extension (file, extension_language_gdb.suffix))\n+    return &extension_language_gdb;\n+\n   ALL_EXTENSION_LANGUAGES (i, extlang)\n     {\n       if (has_extension (file, extlang->suffix))"
    },
    {
      "sha": "a0512549da583c36290df0e1e548765b992731fc",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 68,
      "deletions": 14,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -45,6 +45,7 @@\n #include \"event-top.h\"\n #include \"infrun.h\"\n #include \"gdbsupport/signals-state-save-restore.h\"\n+#include <algorithm>\n #include <vector>\n #include \"gdbsupport/pathstuff.h\"\n #include \"cli/cli-style.h\"\n@@ -198,7 +199,8 @@ relocate_gdb_directory (const char *initial, bool relocatable)\n    otherwise.  */\n \n static std::string\n-relocate_gdbinit_path_maybe_in_datadir (const std::string& file)\n+relocate_gdbinit_path_maybe_in_datadir (const std::string &file,\n+\t\t\t\t\tbool relocatable)\n {\n   size_t datadir_len = strlen (GDB_DATADIR);\n \n@@ -221,9 +223,8 @@ relocate_gdbinit_path_maybe_in_datadir (const std::string& file)\n     }\n   else\n     {\n-      relocated_path = relocate_path (gdb_program_name,\n-\t\t\t\t      file.c_str (),\n-\t\t\t\t      SYSTEM_GDBINIT_RELOCATABLE);\n+      relocated_path = relocate_path (gdb_program_name, file.c_str (),\n+\t\t\t\t      relocatable);\n     }\n     return relocated_path;\n }\n@@ -234,11 +235,11 @@ relocate_gdbinit_path_maybe_in_datadir (const std::string& file)\n    to be loaded, then SYSTEM_GDBINIT (resp. HOME_GDBINIT and\n    LOCAL_GDBINIT) is set to the empty string.  */\n static void\n-get_init_files (std::string *system_gdbinit,\n+get_init_files (std::vector<std::string> *system_gdbinit,\n \t\tstd::string *home_gdbinit,\n \t\tstd::string *local_gdbinit)\n {\n-  static std::string sysgdbinit;\n+  static std::vector<std::string> sysgdbinit;\n   static std::string homeinit;\n   static std::string localinit;\n   static int initialized = 0;\n@@ -250,10 +251,51 @@ get_init_files (std::string *system_gdbinit,\n       if (SYSTEM_GDBINIT[0])\n \t{\n \t  std::string relocated_sysgdbinit\n-\t    = relocate_gdbinit_path_maybe_in_datadir (SYSTEM_GDBINIT);\n+\t    = relocate_gdbinit_path_maybe_in_datadir\n+\t\t(SYSTEM_GDBINIT, SYSTEM_GDBINIT_RELOCATABLE);\n \t  if (!relocated_sysgdbinit.empty ()\n \t      && stat (relocated_sysgdbinit.c_str (), &s) == 0)\n-\t    sysgdbinit = relocated_sysgdbinit;\n+\t    sysgdbinit.push_back (relocated_sysgdbinit);\n+\t}\n+      if (SYSTEM_GDBINIT_DIR[0])\n+\t{\n+\t  std::string relocated_gdbinit_dir\n+\t    = relocate_gdbinit_path_maybe_in_datadir\n+\t\t(SYSTEM_GDBINIT_DIR, SYSTEM_GDBINIT_DIR_RELOCATABLE);\n+\t  if (!relocated_gdbinit_dir.empty ()) {\n+\t    gdb_dir_up dir (opendir (relocated_gdbinit_dir.c_str ()));\n+\t    if (dir != nullptr)\n+\t      {\n+\t\tstd::vector<std::string> files;\n+\t\tfor (;;)\n+\t\t  {\n+\t\t    struct dirent *ent = readdir (dir.get ());\n+\t\t    if (ent == nullptr)\n+\t\t      break;\n+\t\t    std::string name (ent->d_name);\n+\t\t    if (name == \".\" || name == \"..\")\n+\t\t      continue;\n+\t\t    /* ent->d_type is not available on all systems (e.g. mingw,\n+\t\t       Solaris), so we have to call stat().  */\n+\t\t    std::string filename\n+\t\t      = relocated_gdbinit_dir + SLASH_STRING + name;\n+\t\t    if (stat (filename.c_str (), &s) != 0\n+\t\t\t|| !S_ISREG (s.st_mode))\n+\t\t      continue;\n+\t\t    const struct extension_language_defn *extlang\n+\t\t      = get_ext_lang_of_file (filename.c_str ());\n+\t\t    /* We effectively don't support \"set script-extension\n+\t\t       off/soft\", because we are loading system init files here,\n+\t\t       so it does not really make sense to depend on a\n+\t\t       setting.  */\n+\t\t    if (extlang != nullptr && ext_lang_present_p (extlang))\n+\t\t      files.push_back (std::move (filename));\n+\t\t  }\n+\t\tstd::sort (files.begin (), files.end ());\n+\t\tsysgdbinit.insert (sysgdbinit.end (),\n+\t\t\t\t   files.begin (), files.end ());\n+\t      }\n+\t  }\n \t}\n \n       const char *homedir = getenv (\"HOME\");\n@@ -913,7 +955,7 @@ captured_main_1 (struct captured_main_args *context)\n   /* Lookup gdbinit files.  Note that the gdbinit file name may be\n      overridden during file initialization, so get_init_files should be\n      called after gdb_init.  */\n-  std::string system_gdbinit;\n+  std::vector<std::string> system_gdbinit;\n   std::string home_gdbinit;\n   std::string local_gdbinit;\n   get_init_files (&system_gdbinit, &home_gdbinit, &local_gdbinit);\n@@ -993,7 +1035,10 @@ captured_main_1 (struct captured_main_args *context)\n      processed; it sets global parameters, which are independent of\n      what file you are debugging or what directory you are in.  */\n   if (!system_gdbinit.empty () && !inhibit_gdbinit)\n-    ret = catch_command_errors (source_script, system_gdbinit.c_str (), 0);\n+    {\n+      for (const std::string &file : system_gdbinit)\n+\tret = catch_command_errors (source_script, file.c_str (), 0);\n+    }\n \n   /* Read and execute $HOME/.gdbinit file, if it exists.  This is done\n      *before* all the command line arguments are processed; it sets\n@@ -1211,7 +1256,7 @@ gdb_main (struct captured_main_args *args)\n static void\n print_gdb_help (struct ui_file *stream)\n {\n-  std::string system_gdbinit;\n+  std::vector<std::string> system_gdbinit;\n   std::string home_gdbinit;\n   std::string local_gdbinit;\n \n@@ -1292,9 +1337,18 @@ Other options:\\n\\n\\\n At startup, GDB reads the following init files and executes their commands:\\n\\\n \"), stream);\n   if (!system_gdbinit.empty ())\n-    fprintf_unfiltered (stream, _(\"\\\n-   * system-wide init file: %s\\n\\\n-\"), system_gdbinit.c_str ());\n+    {\n+      std::string output;\n+      for (size_t idx = 0; idx < system_gdbinit.size (); ++idx)\n+        {\n+\t  output += system_gdbinit[idx];\n+\t  if (idx < system_gdbinit.size () - 1)\n+\t    output += \", \";\n+\t}\n+      fprintf_unfiltered (stream, _(\"\\\n+   * system-wide init files: %s\\n\\\n+\"), output.c_str ());\n+    }\n   if (!home_gdbinit.empty ())\n     fprintf_unfiltered (stream, _(\"\\\n    * user-specific init file: %s\\n\\"
    },
    {
      "sha": "a443159e3e7f492909148168c05a275023e552c2",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2a222951020d1117c5e1d4f37e82fd26761267/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=ed2a222951020d1117c5e1d4f37e82fd26761267",
      "patch": "@@ -1513,6 +1513,10 @@ This GDB was configured as follows:\\n\\\n     fprintf_filtered (stream, _(\"\\\n              --with-system-gdbinit=%s%s\\n\\\n \"), SYSTEM_GDBINIT, SYSTEM_GDBINIT_RELOCATABLE ? \" (relocatable)\" : \"\");\n+  if (SYSTEM_GDBINIT_DIR[0])\n+    fprintf_filtered (stream, _(\"\\\n+             --with-system-gdbinit-dir=%s%s\\n\\\n+\"), SYSTEM_GDBINIT_DIR, SYSTEM_GDBINIT_DIR_RELOCATABLE ? \" (relocatable)\" : \"\");\n     /* We assume \"relocatable\" will be printed at least once, thus we always\n        print this text.  It's a reasonably safe assumption for now.  */\n     fprintf_filtered (stream, _(\"\\n\\"
    }
  ]
}