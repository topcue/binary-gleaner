{
  "sha": "7ffa82e1222fbe038dedf3531c655969fdda5c16",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2ZmYTgyZTEyMjJmYmUwMzhkZWRmMzUzMWM2NTU5NjlmZGRhNWMxNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-11T22:41:13Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-24T23:44:16Z"
    },
    "message": "gdb: Better frame tracking for inline frames\n\nThis commit improves GDB's handling of inline functions when there are\nmore than one inline function in a stack, so for example if we have a\nstack like:\n\n   main -> aaa -> bbb -> ccc -> ddd\n\nAnd aaa, bbb, and ccc are all inline within main GDB should (when\ngiven sufficient debug information) be able to step from main through\naaa, bbb, and ccc.  Unfortunately, this currently doesn't work, here's\nan example session:\n\n  (gdb) start\n  Temporary breakpoint 1 at 0x4003b0: file test.c, line 38.\n  Starting program: /project/gdb/tests/inline/test\n\n  Temporary breakpoint 1, main () at test.c:38\n  38\t  global_var = 0;\n  (gdb) step\n  39\t  return aaa () + 1;\n  (gdb) step\n  aaa () at test.c:39\n  39\t  return aaa () + 1;\n  (gdb) step\n  bbb () at test.c:39\n  39\t  return aaa () + 1;\n  (gdb) step\n  ccc () at test.c:39\n  39\t  return aaa () + 1;\n  (gdb) step\n  ddd () at test.c:32\n  32\t  return global_var;\n  (gdb) bt\n  #0  ddd () at test.c:32\n  #1  0x00000000004003c1 in ccc () at test.c:39\n  #2  bbb () at test.c:26\n  #3  aaa () at test.c:14\n  #4  main () at test.c:39\n\nNotice that once we get to line 39 in main, GDB keeps reporting line\n39 in main as the location despite understanding that the inferior is\nstepping through the nested inline functions with each use of step.\n\nThe problem is that as soon as the inferior stops we call\nskip_inline_frames (from inline-frame.c) which calculates the\ninferiors current state in relation to inline functions - it figures\nout if we're in an inline function, and if we are counts how many\ninline frames there are at the current location.\n\nSo, in our example above, when we step from line 38 in main to line 39\nwe stop at a location that is simultaneously in all of main, aaa, bbb,\nand ccc.  The block structure reflects the order in which the\nfunctions would be called, with ccc being the most inner block and\nmain being the most outer block.  When we stop GDB naturally finds the\nblock for ccc, however within skip_inline_frames we spot that bbb,\naaa, and main are super-blocks of the current location and that each\nlayer represents an inline function.  The skip_inline_frames then\nrecords the depth of inline functions (3 in this case for aaa, bbb,\nand ccc) and also the symbol of the outermost inline function (in this\ncase 'aaa' as main isn't an inline function, it just has things inline\nwithin it).\n\nNow GDB understands the stack to be main -> aaa -> bbb -> ccc,\nhowever, the state initialised in skip_inline_frames starts off\nindicating that we should hide 3 frames from the user, so we report\nthat we're in main at line 39.  The location of main, line 39 is\nderived by asking the inline function state for the last symbol in the\nstack (aaa in this case), and then asking for it's location - the\nlocation of an inlined function symbol is its call site, so main, line\n39 in this case.\n\nIf the user then asks GDB to step we don't actually move the inferior\nat all, instead we spot that we are in an inline function stack,\nlookup the inline state data, and reduce the skip depth by 1.  We then\nreport to the user that GDB has stopped.  GDB now understands that we\nare in 'aaa'.  In order to get the precise location we again ask GDB\nfor the last symbol from the inline data structure, and we are again\ntold 'aaa', we then get the location from 'aaa', and report that we\nare in main, line 39.\n\nHopefully it's clear what the mistake here is, once we've reduced the\ninline skip depth we should not be using 'aaa' to compute the precise\nlocation, instead we should be using 'bbb'.  That is what this patch\ndoes.\n\nNow, when we call skip_inline_frames instead of just recording the\nlast skipped symbol we now record all symbols in the inline frame\nstack.  When we ask GDB for the last skipped symbol we return a symbol\nbased on how many frames we are skipping, not just the last know\nsymbol.\n\nWith this fix in place, the same session as above now looks much\nbetter:\n\n  (gdb) start\n  Temporary breakpoint 1 at 0x4003b0: file test.c, line 38.\n  Starting program: /project/gdb/tests/inline/test\n\n  Temporary breakpoint 1, main () at test.c:38\n  38\t  global_var = 0;\n  (gdb) s\n  39\t  return aaa () + 1;\n  (gdb) s\n  aaa () at test.c:14\n  14\t  return bbb () + 1;\n  (gdb) s\n  bbb () at test.c:26\n  26\t  return ccc () + 1;\n  (gdb) s\n  ccc () at test.c:20\n  20\t  return ddd () + 1;\n  (gdb) s\n  ddd () at test.c:32\n  32\t  return global_var;\n  (gdb) bt\n  #0  ddd () at test.c:32\n  #1  0x00000000004003c1 in ccc () at test.c:20\n  #2  bbb () at test.c:26\n  #3  aaa () at test.c:14\n  #4  main () at test.c:39\n\ngdb/ChangeLog:\n\n\t* frame.c (find_frame_sal): Move call to get_next_frame into more\n\tinner scope.\n\t* inline-frame.c (inilne_state) <inline_state>: Update argument\n\ttypes.\n\t(inilne_state) <skipped_symbol>: Rename to...\n\t(inilne_state) <skipped_symbols>: ...this, and change to a vector.\n\t(skip_inline_frames): Build vector of skipped symbols and use this\n\tto reate the inline_state.\n\t(inline_skipped_symbol): Add a comment and some assertions, fetch\n\tskipped symbol from the list.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-inline-many-frames.c: New file.\n\t* gdb.dwarf2/dw2-inline-many-frames.exp: New file.\n\nChange-Id: I99def5ffb44eb9e58cda4b449bf3d91ab0386c62",
    "tree": {
      "sha": "6b6ec5b3b54bf2547bc6e58df726847ce9f6fe6c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6b6ec5b3b54bf2547bc6e58df726847ce9f6fe6c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7ffa82e1222fbe038dedf3531c655969fdda5c16",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ffa82e1222fbe038dedf3531c655969fdda5c16",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7ffa82e1222fbe038dedf3531c655969fdda5c16",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ffa82e1222fbe038dedf3531c655969fdda5c16/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b"
    }
  ],
  "stats": {
    "total": 594,
    "additions": 579,
    "deletions": 15
  },
  "files": [
    {
      "sha": "855e928c03d92fa67b9035699af933e7476dd637",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7ffa82e1222fbe038dedf3531c655969fdda5c16",
      "patch": "@@ -1,3 +1,16 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* frame.c (find_frame_sal): Move call to get_next_frame into more\n+\tinner scope.\n+\t* inline-frame.c (inilne_state) <inline_state>: Update argument\n+\ttypes.\n+\t(inilne_state) <skipped_symbol>: Rename to...\n+\t(inilne_state) <skipped_symbols>: ...this, and change to a vector.\n+\t(skip_inline_frames): Build vector of skipped symbols and use this\n+\tto reate the inline_state.\n+\t(inline_skipped_symbol): Add a comment and some assertions, fetch\n+\tskipped symbol from the list.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* buildsym.c (lte_is_less_than): Delete."
    },
    {
      "sha": "d74d1d5c7c5d57c1e455ad379415873fe25447c0",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=7ffa82e1222fbe038dedf3531c655969fdda5c16",
      "patch": "@@ -2508,14 +2508,15 @@ find_frame_sal (frame_info *frame)\n   int notcurrent;\n   CORE_ADDR pc;\n \n-  /* If the next frame represents an inlined function call, this frame's\n-     sal is the \"call site\" of that inlined function, which can not\n-     be inferred from get_frame_pc.  */\n-  next_frame = get_next_frame (frame);\n   if (frame_inlined_callees (frame) > 0)\n     {\n       struct symbol *sym;\n \n+      /* If the current frame has some inlined callees, and we have a next\n+\t frame, then that frame must be an inlined frame.  In this case\n+\t this frame's sal is the \"call site\" of the next frame's inlined\n+\t function, which can not be inferred from get_frame_pc.  */\n+      next_frame = get_next_frame (frame);\n       if (next_frame)\n \tsym = get_frame_function (next_frame);\n       else"
    },
    {
      "sha": "c650195e570e8d44b455aa5a3e13aaf29b7fe5f6",
      "filename": "gdb/inline-frame.c",
      "status": "modified",
      "additions": 19,
      "deletions": 11,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/inline-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/inline-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inline-frame.c?ref=7ffa82e1222fbe038dedf3531c655969fdda5c16",
      "patch": "@@ -37,9 +37,9 @@\n struct inline_state\n {\n   inline_state (thread_info *thread_, int skipped_frames_, CORE_ADDR saved_pc_,\n-\t\tsymbol *skipped_symbol_)\n+\t\tstd::vector<symbol *> &&skipped_symbols_)\n     : thread (thread_), skipped_frames (skipped_frames_), saved_pc (saved_pc_),\n-      skipped_symbol (skipped_symbol_)\n+      skipped_symbols (std::move (skipped_symbols_))\n   {}\n \n   /* The thread this data relates to.  It should be a currently\n@@ -56,10 +56,10 @@ struct inline_state\n      any skipped frames.  */\n   CORE_ADDR saved_pc;\n \n-  /* Only valid if SKIPPED_FRAMES is non-zero.  This is the symbol\n-     of the outermost skipped inline function.  It's used to find the\n-     call site of the current frame.  */\n-  struct symbol *skipped_symbol;\n+  /* Only valid if SKIPPED_FRAMES is non-zero.  This is the list of all\n+     function symbols that have been skipped, from inner most to outer\n+     most.  It is used to find the call site of the current frame.  */\n+  std::vector<struct symbol *> skipped_symbols;\n };\n \n static std::vector<inline_state> inline_states;\n@@ -341,7 +341,7 @@ void\n skip_inline_frames (thread_info *thread, bpstat stop_chain)\n {\n   const struct block *frame_block, *cur_block;\n-  struct symbol *last_sym = NULL;\n+  std::vector<struct symbol *> skipped_syms;\n   int skip_count = 0;\n \n   /* This function is called right after reinitializing the frame\n@@ -369,7 +369,7 @@ skip_inline_frames (thread_info *thread, bpstat stop_chain)\n \t\t    break;\n \n \t\t  skip_count++;\n-\t\t  last_sym = BLOCK_FUNCTION (cur_block);\n+\t\t  skipped_syms.push_back (BLOCK_FUNCTION (cur_block));\n \t\t}\n \t      else\n \t\tbreak;\n@@ -382,7 +382,8 @@ skip_inline_frames (thread_info *thread, bpstat stop_chain)\n     }\n \n   gdb_assert (find_inline_frame_state (thread) == NULL);\n-  inline_states.emplace_back (thread, skip_count, this_pc, last_sym);\n+  inline_states.emplace_back (thread, skip_count, this_pc,\n+\t\t\t      std::move (skipped_syms));\n \n   if (skip_count != 0)\n     reinit_frame_cache ();\n@@ -421,9 +422,16 @@ struct symbol *\n inline_skipped_symbol (thread_info *thread)\n {\n   inline_state *state = find_inline_frame_state (thread);\n-\n   gdb_assert (state != NULL);\n-  return state->skipped_symbol;\n+\n+  /* This should only be called when we are skipping at least one frame,\n+     hence SKIPPED_FRAMES will be greater than zero when we get here.\n+     We initialise SKIPPED_FRAMES at the same time as we build\n+     SKIPPED_SYMBOLS, hence it should be true that SKIPPED_FRAMES never\n+     indexes outside of the SKIPPED_SYMBOLS vector.  */\n+  gdb_assert (state->skipped_frames > 0);\n+  gdb_assert (state->skipped_frames <= state->skipped_symbols.size ());\n+  return state->skipped_symbols[state->skipped_frames - 1];\n }\n \n /* Return the number of functions inlined into THIS_FRAME.  Some of"
    },
    {
      "sha": "d56c26daafc3bce21d3542ad48fbad02cb7b500b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7ffa82e1222fbe038dedf3531c655969fdda5c16",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-inline-many-frames.c: New file.\n+\t* gdb.dwarf2/dw2-inline-many-frames.exp: New file.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.dwarf2/dw2-inline-stepping.c: New file."
    },
    {
      "sha": "37905c1f07ec299913731e2b3e4b5a98f4cd0a3b",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.c",
      "status": "added",
      "additions": 158,
      "deletions": 0,
      "changes": 158,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.c?ref=7ffa82e1222fbe038dedf3531c655969fdda5c16",
      "patch": "@@ -0,0 +1,158 @@\n+/* Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This test sets up a call stack that looks like this:\n+\n+   #11     #10    #9     #8     #7     #6     #5     #4     #3     #2     #1     #0\n+   main -> aaa -> bbb -> ccc -> ddd -> eee -> fff -> ggg -> hhh -> iii -> jjj -> kkk\n+   \\_______________________/    \\________/    \\______________________/    \\________/\n+      Inline sequence #1          Normal          Inline sequence #2        Normal\n+\n+   We use the 'start' command to move into main, after that we 'step'\n+   through each function until we are in kkk.  We then use the 'up' command\n+   to look back at each from to main.\n+\n+   The test checks that we can handle and step through sequences of more\n+   than one inline frame (so 'main .... ccc', and 'fff .... iii'), and also\n+   that we can move around in a stack that contains more than one disjoint\n+   sequence of inline frames.\n+\n+   The order of the functions in this file is deliberately mixed up so that\n+   the line numbers are not \"all ascending\" or \"all descending\" in the line\n+   table.  */\n+\n+#define INLINE_FUNCTION __attribute__ ((always_inline)) static inline\n+#define NON_INLINE_FUNCTION __attribute__ ((noinline))\n+\n+volatile int global_var = 0;\n+\n+INLINE_FUNCTION int aaa ();\n+INLINE_FUNCTION int bbb ();\n+INLINE_FUNCTION int ccc ();\n+\n+NON_INLINE_FUNCTION int ddd ();\n+NON_INLINE_FUNCTION int eee ();\n+NON_INLINE_FUNCTION int fff ();\n+\n+INLINE_FUNCTION int ggg ();\n+INLINE_FUNCTION int hhh ();\n+INLINE_FUNCTION int iii ();\n+\n+NON_INLINE_FUNCTION int jjj ();\n+NON_INLINE_FUNCTION int kkk ();\n+\n+INLINE_FUNCTION int\n+aaa ()\n+{\t\t\t\t\t\t/* aaa prologue */\n+  asm (\"aaa_label: .globl aaa_label\");\n+  return bbb () + 1;\t\t\t\t/* aaa return */\n+}\t\t\t\t\t\t/* aaa end */\n+\n+NON_INLINE_FUNCTION int\n+jjj ()\n+{\t\t\t\t\t\t/* jjj prologue */\n+  int ans;\n+  asm (\"jjj_label: .globl jjj_label\");\n+  ans = kkk () + 1;\t\t\t\t/* jjj return */\n+  asm (\"jjj_label2: .globl jjj_label2\");\n+  return ans;\n+}\t\t\t\t\t\t/* jjj end */\n+\n+INLINE_FUNCTION int\n+ggg ()\n+{\t\t\t\t\t\t/* ggg prologue */\n+  asm (\"ggg_label: .globl ggg_label\");\n+  return hhh () + 1;\t\t\t\t/* ggg return */\n+}\t\t\t\t\t\t/* ggg end */\n+\n+INLINE_FUNCTION int\n+ccc ()\n+{\t\t\t\t\t\t/* ccc prologue */\n+  asm (\"ccc_label: .globl ccc_label\");\n+  return ddd () + 1;\t\t\t\t/* ccc return */\n+}\t\t\t\t\t\t/* ccc end */\n+\n+NON_INLINE_FUNCTION int\n+fff ()\n+{\t\t\t\t\t\t/* fff prologue */\n+  int ans;\n+  asm (\"fff_label: .globl fff_label\");\n+  ans = ggg () + 1;\t\t\t\t/* fff return */\n+  asm (\"fff_label2: .globl fff_label2\");\n+  return ans;\n+}\t\t\t\t\t\t/* fff end */\n+\n+NON_INLINE_FUNCTION int\n+kkk ()\n+{\t\t\t\t\t\t/* kkk prologue */\n+  asm (\"kkk_label: .globl kkk_label\");\n+  return global_var;\t\t\t\t/* kkk return */\n+}\t\t\t\t\t\t/* kkk end */\n+\n+INLINE_FUNCTION int\n+bbb ()\n+{\t\t\t\t\t\t/* bbb prologue */\n+  asm (\"bbb_label: .globl bbb_label\");\n+  return ccc () + 1;\t\t\t\t/* bbb return */\n+}\t\t\t\t\t\t/* bbb end */\n+\n+INLINE_FUNCTION int\n+hhh ()\n+{\t\t\t\t\t\t/* hhh prologue */\n+  asm (\"hh_label: .globl hhh_label\");\n+  return iii () + 1;\t\t\t\t/* hhh return */\n+}\t\t\t\t\t\t/* hhh end */\n+\n+int\n+main ()\n+{\t\t\t\t\t\t/* main prologue */\n+  int ans;\n+  asm (\"main_label: .globl main_label\");\n+  global_var = 0;\t\t\t\t/* main set global_var */\n+  asm (\"main_label2: .globl main_label2\");\n+  ans = aaa () + 1;\t\t\t\t/* main call aaa */\n+  asm (\"main_label3: .globl main_label3\");\n+  return ans;\n+}\t\t\t\t\t\t/* main end */\n+\n+NON_INLINE_FUNCTION int\n+ddd ()\n+{\t\t\t\t\t\t/* ddd prologue */\n+  int ans;\n+  asm (\"ddd_label: .globl ddd_label\");\n+  ans =  eee () + 1;\t\t\t\t/* ddd return */\n+  asm (\"ddd_label2: .globl ddd_label2\");\n+  return ans;\n+}\t\t\t\t\t\t/* ddd end */\n+\n+INLINE_FUNCTION int\n+iii ()\n+{\t\t\t\t\t\t/* iii prologue */\n+  int ans;\n+  asm (\"iii_label: .globl iii_label\");\n+  ans = jjj () + 1;\t\t\t\t/* iii return */\n+  asm (\"iii_label2: .globl iii_label2\");\n+  return ans;\n+}\t\t\t\t\t\t/* iii end */\n+\n+NON_INLINE_FUNCTION int\n+eee ()\n+{\t\t\t\t\t\t/* eee prologue */\n+  int ans;\n+  asm (\"eee_label: .globl eee_label\");\n+  ans = fff () + 1;\t\t\t\t/* eee return */\n+  asm (\"eee_label2: .globl eee_label2\");\n+  return ans;\n+}\t\t\t\t\t\t/* eee end */"
    },
    {
      "sha": "146af8c6ef70806ded399a62bac7c1336bc31408",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp",
      "status": "added",
      "additions": 379,
      "deletions": 0,
      "changes": 379,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ffa82e1222fbe038dedf3531c655969fdda5c16/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp?ref=7ffa82e1222fbe038dedf3531c655969fdda5c16",
      "patch": "@@ -0,0 +1,379 @@\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test shows the importance of not corrupting the order of line\n+# table information.  When multiple lines are given for the same\n+# address the compiler usually lists these in the order in which we\n+# would expect to encounter them.  When stepping through nested inline\n+# frames the last line given for an address is assumed by GDB to be\n+# the most inner frame, and this is what GDB displays.\n+#\n+# If we corrupt the order of the line table entries then GDB will\n+# display the wrong line as being the inner most frame.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# The .c files use __attribute__.\n+if [get_compiler_info] {\n+    return -1\n+}\n+if !$gcc_compiled {\n+    return 0\n+}\n+\n+standard_testfile dw2-inline-many-frames.c dw2-inline-many-frames.S\n+\n+# Extract the start, length, and end for function called NAME and\n+# create suitable variables in the callers scope.\n+proc get_func_info { name } {\n+    global srcdir subdir srcfile\n+\n+    upvar 1 \"${name}_start\" func_start\n+    upvar 1 \"${name}_len\" func_len\n+    upvar 1 \"${name}_end\" func_end\n+\n+    lassign [function_range ${name} [list ${srcdir}/${subdir}/$srcfile]] \\\n+\tfunc_start func_len\n+    set func_end \"$func_start + $func_len\"\n+}\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile srcfile2\n+    declare_labels ranges_label lines_label\n+    declare_labels aaa_label bbb_label ccc_label\n+    declare_labels ggg_label hhh_label iii_label\n+\n+    get_func_info main\n+    get_func_info ddd\n+    get_func_info eee\n+    get_func_info fff\n+    get_func_info jjj\n+    get_func_info kkk\n+\n+    set call_in_main [gdb_get_line_number \"main call aaa\"]\n+    set call_in_aaa [gdb_get_line_number \"aaa return\"]\n+    set call_in_bbb [gdb_get_line_number \"bbb return\"]\n+    set call_in_ccc [gdb_get_line_number \"ccc return\"]\n+    set call_in_fff [gdb_get_line_number \"fff return\"]\n+    set call_in_ggg [gdb_get_line_number \"ggg return\"]\n+    set call_in_hhh [gdb_get_line_number \"hhh return\"]\n+    set call_in_iii [gdb_get_line_number \"iii return\"]\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name dw2-inline-stepping.c}\n+\t    {low_pc 0 addr}\n+\t    {stmt_list ${lines_label} DW_FORM_sec_offset}\n+\t    {ranges ${ranges_label} DW_FORM_sec_offset}\n+\t} {\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name ddd}\n+\t\t{low_pc $ddd_start addr}\n+\t\t{high_pc \"$ddd_start + $ddd_len\" addr}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name eee}\n+\t\t{low_pc $eee_start addr}\n+\t\t{high_pc \"$eee_start + $eee_len\" addr}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name jjj}\n+\t\t{low_pc $jjj_start addr}\n+\t\t{high_pc \"$jjj_start + $jjj_len\" addr}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name kkk}\n+\t\t{low_pc $kkk_start addr}\n+\t\t{high_pc \"$kkk_start + $kkk_len\" addr}\n+\t    }\n+\t    aaa_label: subprogram {\n+\t\t{name aaa}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    bbb_label: subprogram {\n+\t\t{name bbb}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    ccc_label: subprogram {\n+\t\t{name ccc}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    ggg_label: subprogram {\n+\t\t{name ggg}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    hhh_label: subprogram {\n+\t\t{name hhh}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    iii_label: subprogram {\n+\t\t{name iii}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name main}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_len\" addr}\n+\t    } {\n+\t\tinlined_subroutine {\n+\t\t    {abstract_origin %$aaa_label}\n+\t\t    {low_pc main_label2 addr}\n+\t\t    {high_pc main_label3 addr}\n+\t\t    {call_file 1 data1}\n+\t\t    {call_line $call_in_main data1}\n+\t\t} {\n+\t\t    inlined_subroutine {\n+\t\t\t{abstract_origin %$bbb_label}\n+\t\t\t{low_pc main_label2 addr}\n+\t\t\t{high_pc main_label3 addr}\n+\t\t\t{call_file 1 data1}\n+\t\t\t{call_line $call_in_aaa data1}\n+\t\t    }  {\n+\t\t\tinlined_subroutine {\n+\t\t\t    {abstract_origin %$ccc_label}\n+\t\t\t    {low_pc main_label2 addr}\n+\t\t\t    {high_pc main_label3 addr}\n+\t\t\t    {call_file 1 data1}\n+\t\t\t    {call_line $call_in_bbb data1}\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name fff}\n+\t\t{low_pc $fff_start addr}\n+\t\t{high_pc \"$fff_start + $fff_len\" addr}\n+\t    }  {\n+\t\tinlined_subroutine {\n+\t\t    {abstract_origin %$ggg_label}\n+\t\t    {low_pc fff_label addr}\n+\t\t    {high_pc main_label2 addr}\n+\t\t    {call_file 1 data1}\n+\t\t    {call_line $call_in_fff data1}\n+\t\t} {\n+\t\t    inlined_subroutine {\n+\t\t\t{abstract_origin %$hhh_label}\n+\t\t\t{low_pc fff_label addr}\n+\t\t\t{high_pc fff_label2 addr}\n+\t\t\t{call_file 1 data1}\n+\t\t\t{call_line $call_in_ggg data1}\n+\t\t    }  {\n+\t\t\tinlined_subroutine {\n+\t\t\t    {abstract_origin %$iii_label}\n+\t\t\t    {low_pc fff_label addr}\n+\t\t\t    {high_pc fff_label2 addr}\n+\t\t\t    {call_file 1 data1}\n+\t\t\t    {call_line $call_in_hhh data1}\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    lines {version 2} lines_label {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address $main_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main set global_var\"] - [gdb_get_line_number \"main prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main call aaa\"] - [gdb_get_line_number \"main set global_var\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"aaa return\"] - [gdb_get_line_number \"main call aaa\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"bbb return\"] - [gdb_get_line_number \"aaa return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"ccc return\"] - [gdb_get_line_number \"bbb return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label3}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main end\"] - [gdb_get_line_number \"ccc return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $main_end}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $ddd_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"ddd prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address ddd_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"ddd return\"] - [gdb_get_line_number \"ddd prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address ddd_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"ddd end\"] - [gdb_get_line_number \"ddd return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $ddd_end}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $eee_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"eee prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address eee_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"eee return\"] - [gdb_get_line_number \"eee prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address eee_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"eee end\"] - [gdb_get_line_number \"eee return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $eee_end}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $fff_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"fff prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address fff_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"fff return\"] - [gdb_get_line_number \"fff prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address fff_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"ggg return\"] - [gdb_get_line_number \"fff return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address fff_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"hhh return\"] - [gdb_get_line_number \"ggg return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address fff_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"iii return\"] - [gdb_get_line_number \"hhh return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address fff_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"fff end\"] - [gdb_get_line_number \"fff return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $fff_end}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $jjj_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"jjj prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address jjj_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"jjj return\"] - [gdb_get_line_number \"jjj prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address jjj_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"jjj end\"] - [gdb_get_line_number \"jjj return\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $jjj_end}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $kkk_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"kkk prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address kkk_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"kkk return\"] - [gdb_get_line_number \"kkk prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $kkk_end}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+\n+    ranges {is_64 [is_64_target]} {\n+\tranges_label: sequence {\n+\t    {range {${main_start}} ${main_end}}\n+\t    {range {${ddd_start}} ${ddd_end}}\n+\t    {range {${eee_start}} ${eee_end}}\n+\t    {range {${fff_start}} ${fff_end}}\n+\t    {range {${jjj_start}} ${jjj_end}}\n+\t    {range {${kkk_start}} ${kkk_end}}\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# First we step through all of the functions until we get the 'kkk'.\n+set patterns [list \"main call aaa\" \\\n+\t\t  \"aaa return\" \\\n+\t\t  \"bbb return\" \\\n+\t\t  \"ccc return\" \\\n+\t\t  \"ddd return\" \\\n+\t\t  \"eee return\" \\\n+\t\t  \"fff return\" \\\n+\t\t  \"ggg return\" \\\n+\t\t  \"hhh return\" \\\n+\t\t  \"iii return\" \\\n+\t\t  \"jjj return\" \\\n+\t\t  \"kkk return\" ]\n+foreach p $patterns {\n+    gdb_test \"step\" \"/\\\\* $p \\\\*/\" \\\n+\t\"step to '$p'\"\n+}\n+\n+# Now check the backtrace.\n+set line_in_main [gdb_get_line_number \"main call aaa\"]\n+set line_in_aaa [gdb_get_line_number \"aaa return\"]\n+set line_in_bbb [gdb_get_line_number \"bbb return\"]\n+set line_in_ccc [gdb_get_line_number \"ccc return\"]\n+set line_in_ddd [gdb_get_line_number \"ddd return\"]\n+set line_in_eee [gdb_get_line_number \"eee return\"]\n+set line_in_fff [gdb_get_line_number \"fff return\"]\n+set line_in_ggg [gdb_get_line_number \"ggg return\"]\n+set line_in_hhh [gdb_get_line_number \"hhh return\"]\n+set line_in_iii [gdb_get_line_number \"iii return\"]\n+set line_in_jjj [gdb_get_line_number \"jjj return\"]\n+set line_in_kkk [gdb_get_line_number \"kkk return\"]\n+\n+gdb_test \"bt\" [multi_line \\\n+\t\t   \"#0  kkk \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_kkk}\" \\\n+\t\t   \"#1  $hex in jjj \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_jjj}\" \\\n+\t\t   \"#2  $hex in iii \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_iii}\" \\\n+\t\t   \"#3  hhh \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_hhh}\" \\\n+\t\t   \"#4  ggg \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_ggg}\" \\\n+\t\t   \"#5  fff \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_fff}\" \\\n+\t\t   \"#6  $hex in eee \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_eee}\" \\\n+\t\t   \"#7  $hex in ddd \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_ddd}\" \\\n+\t\t   \"#8  $hex in ccc \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_ccc}\" \\\n+\t\t   \"#9  bbb \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_bbb}\" \\\n+\t\t   \"#10 aaa \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_aaa}\" \\\n+\t\t   \"#11 main \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:${line_in_main}\" ]\n+\n+# Now check we can use 'up' to inspect each frame correctly.\n+set patterns [list  \\\n+\t\t  \"jjj return\" \\\n+\t\t  \"iii return\" \\\n+\t\t  \"hhh return\" \\\n+\t\t  \"ggg return\" \\\n+\t\t  \"fff return\" \\\n+\t\t  \"eee return\" \\\n+\t\t  \"ddd return\" \\\n+\t\t  \"ccc return\" \\\n+\t\t  \"bbb return\" \\\n+\t\t  \"aaa return\" \\\n+\t\t  \"main call aaa\" ]\n+foreach p $patterns {\n+    gdb_test \"up\" \"/\\\\* $p \\\\*/\" \\\n+\t\"up to '$p'\"\n+}"
    }
  ]
}