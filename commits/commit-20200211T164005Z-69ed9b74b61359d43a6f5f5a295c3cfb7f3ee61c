{
  "sha": "69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjllZDliNzRiNjEzNTlkNDNhNmY1ZjVhMjk1YzNjZmI3ZjNlZTYxYw==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-02-11T16:39:35Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-02-11T16:40:05Z"
    },
    "message": "Remove use of deprecated_add_core_fns in cris_tdep.c\n\nThe non-deprecated equivalent is implementing the gdbarch function\niterate_over_regset_sections, this patch does that.\n\nTested by generating a core file on cris under qemu and comparing\nthe output of \"info registers\".\n\nThis also fixes this warning when loading cris core files:\n  warning: Unexpected size of section `.reg/164' in core file.\n\ngdb/ChangeLog:\n\n2020-02-11  Christian Biesinger  <cbiesinger@google.com>\n\n\t* cris-tdep.c (cris_supply_gregset): Change signature to match\n\twhat struct regset expects.\n\t(cris_regset): New struct.\n\t(fetch_core_registers): Remove.\n\t(cris_iterate_over_regset_sections): New function.\n\t(_initialize_cris_tdep): Don't call deprecated_add_core_fns.\n\t(cris_gdbarch_init): Call set_gdbarch_iterate_over_regset_sections.\n\nChange-Id: Ieef895b5a2fdc797d1a913cd1c0c07563edfe8e7",
    "tree": {
      "sha": "8f26400b7fe10291763e8f5078f67cc186f7068a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8f26400b7fe10291763e8f5078f67cc186f7068a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f6be87130b5b327075a09c05e78532816f186995",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6be87130b5b327075a09c05e78532816f186995",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f6be87130b5b327075a09c05e78532816f186995"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 37,
    "deletions": 43
  },
  "files": [
    {
      "sha": "91d7cec98af99c36d73b741d0ae4b5a5ca8c1be9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
      "patch": "@@ -1,3 +1,13 @@\n+2020-02-11  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* cris-tdep.c (cris_supply_gregset): Change signature to match\n+\twhat struct regset expects.\n+\t(cris_regset): New struct.\n+\t(fetch_core_registers): Remove.\n+\t(cris_iterate_over_regset_sections): New function.\n+\t(_initialize_cris_tdep): Don't call deprecated_add_core_fns.\n+\t(cris_gdbarch_init): Call set_gdbarch_iterate_over_regset_sections.\n+\n 2020-02-11  Christian Biesinger  <cbiesinger@google.com>\n \n \t* arch/arm.h (enum gdb_regnum): Add comment for the FP0..7"
    },
    {
      "sha": "e619811429fbedf1f0080131fb44407769b3d990",
      "filename": "gdb/cris-tdep.c",
      "status": "modified",
      "additions": 27,
      "deletions": 43,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c/gdb/cris-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c/gdb/cris-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-tdep.c?ref=69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
      "patch": "@@ -37,6 +37,7 @@\n #include \"osabi.h\"\n #include \"arch-utils.h\"\n #include \"regcache.h\"\n+#include \"regset.h\"\n \n #include \"objfiles.h\"\n \n@@ -3761,21 +3762,28 @@ typedef cris_elf_greg_t crisv32_elf_gregset_t[CRISV32_ELF_NGREG];\n /* Unpack a cris_elf_gregset_t into GDB's register cache.  */\n \n static void \n-cris_supply_gregset (struct regcache *regcache, cris_elf_gregset_t *gregsetp)\n+cris_supply_gregset (const struct regset *regset, struct regcache *regcache,\n+\t\t     int regnum, const void *gregs, size_t len)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n   int i;\n-  cris_elf_greg_t *regp = *gregsetp;\n+  const cris_elf_greg_t *regp = static_cast<const cris_elf_greg_t *>(gregs);\n+\n+  if (len != sizeof (cris_elf_gregset_t)\n+      && len != sizeof (crisv32_elf_gregset_t))\n+    warning (_(\"wrong size gregset struct in core file\"));\n+  gdb_assert (len >= sizeof (crisv32_elf_gregset_t));\n \n   /* The kernel dumps all 32 registers as unsigned longs, but supply_register\n      knows about the actual size of each register so that's no problem.  */\n   for (i = 0; i < NUM_GENREGS + NUM_SPECREGS; i++)\n     {\n-      regcache->raw_supply (i, (char *)&regp[i]);\n+      if (regnum == -1 || regnum == i)\n+\tregcache->raw_supply (i, (char *)&regp[i]);\n     }\n \n-  if (tdep->cris_version == 32)\n+  if (tdep->cris_version == 32 && (regnum == -1 || regnum == ERP_REGNUM))\n     {\n       /* Needed to set pseudo-register PC for CRISv32.  */\n       /* FIXME: If ERP is in a delay slot at this point then the PC will\n@@ -3788,47 +3796,24 @@ cris_supply_gregset (struct regcache *regcache, cris_elf_gregset_t *gregsetp)\n     }\n }\n \n-/*  Use a local version of this function to get the correct types for\n-    regsets, until multi-arch core support is ready.  */\n+static const struct regset cris_regset = {\n+  nullptr,\n+  cris_supply_gregset,\n+  /* We don't need a collect function because we only use this for core files\n+     (via iterate_over_regset_sections).  */\n+  nullptr,\n+  REGSET_VARIABLE_SIZE\n+};\n \n-static void\n-fetch_core_registers (struct regcache *regcache,\n-\t\t      gdb_byte *core_reg_sect, unsigned core_reg_size,\n-                      int which, CORE_ADDR reg_addr)\n+static void cris_iterate_over_regset_sections (struct gdbarch *gdbarch,\n+\t\t\t\t\t       iterate_over_regset_sections_cb *cb,\n+\t\t\t\t\t       void *cb_data,\n+\t\t\t\t\t       const struct regcache *regcache)\n {\n-  cris_elf_gregset_t gregset;\n-\n-  switch (which)\n-    {\n-    case 0:\n-      if (core_reg_size != sizeof (cris_elf_gregset_t)\n-\t  && core_reg_size != sizeof (crisv32_elf_gregset_t))\n-        {\n-          warning (_(\"wrong size gregset struct in core file\"));\n-        }\n-      else\n-        {\n-          memcpy (&gregset, core_reg_sect, sizeof (gregset));\n-          cris_supply_gregset (regcache, &gregset);\n-        }\n-\n-    default:\n-      /* We've covered all the kinds of registers we know about here,\n-         so this must be something we wouldn't know what to do with\n-         anyway.  Just ignore it.  */\n-      break;\n-    }\n+  cb (\".reg\", sizeof (crisv32_elf_gregset_t), sizeof (crisv32_elf_gregset_t),\n+      &cris_regset, NULL, cb_data);\n }\n \n-static struct core_fns cris_elf_core_fns =\n-{\n-  bfd_target_elf_flavour,               /* core_flavour */\n-  default_check_format,                 /* check_format */\n-  default_core_sniffer,                 /* core_sniffer */\n-  fetch_core_registers,                 /* core_read_registers */\n-  NULL                                  /* next */\n-};\n-\n void _initialize_cris_tdep ();\n void\n _initialize_cris_tdep ()\n@@ -3868,8 +3853,6 @@ Makes GDB use the NRP register instead of the ERP register in certain cases.\"),\n \t\t\t   NULL, /* FIXME: i18n: Usage of Dwarf-2 CFI\n \t\t\t\t    for CRIS is %d.  */\n \t\t\t   &setlist, &showlist);\n-\n-  deprecated_add_core_fns (&cris_elf_core_fns);\n }\n \n /* Prints out all target specific values.  */\n@@ -4059,6 +4042,7 @@ cris_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   set_gdbarch_breakpoint_kind_from_pc (gdbarch, cris_breakpoint_kind_from_pc);\n   set_gdbarch_sw_breakpoint_from_kind (gdbarch, cris_sw_breakpoint_from_kind);\n+  set_gdbarch_iterate_over_regset_sections (gdbarch, cris_iterate_over_regset_sections);\n   \n   if (tdep->cris_dwarf2_cfi == 1)\n     {"
    }
  ]
}