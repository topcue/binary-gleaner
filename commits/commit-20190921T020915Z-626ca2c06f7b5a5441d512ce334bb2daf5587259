{
  "sha": "626ca2c06f7b5a5441d512ce334bb2daf5587259",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjI2Y2EyYzA2ZjdiNWE1NDQxZDUxMmNlMzM0YmIyZGFmNTU4NzI1OQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-01T16:53:03Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-21T02:09:15Z"
    },
    "message": "Replace solib_global_lookup with gdbarch_iterate_over_objfiles_in_search_order\n\nAll implementations of either function use it for the same purpose (except\nDarwin, which is a no-op): to prefer a symbol in the current objfile over\nsymbols with the same name in other objfiles. There does not seem to be a\nreason to have both mechanisms for that purpose.\n\ngdb/ChangeLog:\n\n2019-09-20  Christian Biesinger  <cbiesinger@google.com>\n\n\t* solib-darwin.c (darwin_lookup_lib_symbol): Remove.\n\t(_initialize_darwin_solib): Don't set\n\tdarwin_so_ops.lookup_lib_global_symbol.\n\t* solib-svr4.c (set_solib_svr4_fetch_link_map_offsets): Call\n\tset_gdbarch_iterate_over_objfiles_in_search_order.\n\t(elf_lookup_lib_symbol): Rename to...\n\t(svr4_iterate_over_objfiles_in_search_order): this, and update\n\tto iterate semantics.\n\t(_initialize_svr4_solib): Don't set lookup_lib_global_symbol.\n\t* solib.c (solib_global_lookup): Remove.\n\t* solist.h (struct target_so_ops): Remove lookup_lib_global_symbol.\n\t(solib_global_lookup): Remove.\n\t* symtab.c (lookup_global_or_static_symbol): Remove call to\n\tsolib_global_lookup.",
    "tree": {
      "sha": "723e3e58dfe155b25bd9cdab2830aee1ee976381",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/723e3e58dfe155b25bd9cdab2830aee1ee976381"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/626ca2c06f7b5a5441d512ce334bb2daf5587259",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/626ca2c06f7b5a5441d512ce334bb2daf5587259",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/626ca2c06f7b5a5441d512ce334bb2daf5587259",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/626ca2c06f7b5a5441d512ce334bb2daf5587259/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40c9c8deb94be6576f5729172dce117cbe155856",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40c9c8deb94be6576f5729172dce117cbe155856",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40c9c8deb94be6576f5729172dce117cbe155856"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 55,
    "deletions": 59
  },
  "files": [
    {
      "sha": "3d0975afd8165a7cae158e798c7871a7cf916b09",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=626ca2c06f7b5a5441d512ce334bb2daf5587259",
      "patch": "@@ -1,3 +1,20 @@\n+2019-09-20  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* solib-darwin.c (darwin_lookup_lib_symbol): Remove.\n+\t(_initialize_darwin_solib): Don't set\n+\tdarwin_so_ops.lookup_lib_global_symbol.\n+\t* solib-svr4.c (set_solib_svr4_fetch_link_map_offsets): Call\n+\tset_gdbarch_iterate_over_objfiles_in_search_order.\n+\t(elf_lookup_lib_symbol): Rename to...\n+\t(svr4_iterate_over_objfiles_in_search_order): this, and update\n+\tto iterate semantics.\n+\t(_initialize_svr4_solib): Don't set lookup_lib_global_symbol.\n+\t* solib.c (solib_global_lookup): Remove.\n+\t* solist.h (struct target_so_ops): Remove lookup_lib_global_symbol.\n+\t(solib_global_lookup): Remove.\n+\t* symtab.c (lookup_global_or_static_symbol): Remove call to\n+\tsolib_global_lookup.\n+\n 2019-09-20  Joel Brobecker  <brobecker@adacore.com>\n \n \t* NEWS: Move entries about default MI version now being"
    },
    {
      "sha": "286e38558f20331e5af8847da792eed2adc2752e",
      "filename": "gdb/solib-darwin.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solib-darwin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solib-darwin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-darwin.c?ref=626ca2c06f7b5a5441d512ce334bb2daf5587259",
      "patch": "@@ -638,14 +638,6 @@ darwin_relocate_section_addresses (struct so_list *so,\n     so->addr_low = sec->addr;\n }\n \f\n-static struct block_symbol\n-darwin_lookup_lib_symbol (struct objfile *objfile,\n-\t\t\t  const char *name,\n-\t\t\t  const domain_enum domain)\n-{\n-  return {};\n-}\n-\n static gdb_bfd_ref_ptr\n darwin_bfd_open (const char *pathname)\n {\n@@ -687,6 +679,5 @@ _initialize_darwin_solib (void)\n   darwin_so_ops.current_sos = darwin_current_sos;\n   darwin_so_ops.open_symbol_file_object = open_symbol_file_object;\n   darwin_so_ops.in_dynsym_resolve_code = darwin_in_dynsym_resolve_code;\n-  darwin_so_ops.lookup_lib_global_symbol = darwin_lookup_lib_symbol;\n   darwin_so_ops.bfd_open = darwin_bfd_open;\n }"
    },
    {
      "sha": "dc635491058a7af4d974bfd0e4403eabdb6bc935",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 37,
      "deletions": 19,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=626ca2c06f7b5a5441d512ce334bb2daf5587259",
      "patch": "@@ -51,6 +51,10 @@ static int svr4_have_link_map_offsets (void);\n static void svr4_relocate_main_executable (void);\n static void svr4_free_library_list (void *p_list);\n static void probes_table_remove_objfile_probes (struct objfile *objfile);\n+static void svr4_iterate_over_objfiles_in_search_order (\n+  struct gdbarch *gdbarch, iterate_over_objfiles_in_search_order_cb_ftype *cb,\n+  void *cb_data, struct objfile *objfile);\n+\n \n /* On SVR4 systems, a list of symbols in the dynamic linker where\n    GDB can try to place a breakpoint to monitor shared library\n@@ -3102,6 +3106,8 @@ set_solib_svr4_fetch_link_map_offsets (struct gdbarch *gdbarch,\n   ops->fetch_link_map_offsets = flmo;\n \n   set_solib_ops (gdbarch, &svr4_so_ops);\n+  set_gdbarch_iterate_over_objfiles_in_search_order\n+    (gdbarch, svr4_iterate_over_objfiles_in_search_order);\n }\n \n /* Fetch a link_map_offsets structure using the architecture-specific\n@@ -3200,32 +3206,45 @@ svr4_lp64_fetch_link_map_offsets (void)\n \n struct target_so_ops svr4_so_ops;\n \n-/* Lookup global symbol for ELF DSOs linked with -Bsymbolic.  Those DSOs have a\n+/* Search order for ELF DSOs linked with -Bsymbolic.  Those DSOs have a\n    different rule for symbol lookup.  The lookup begins here in the DSO, not in\n    the main executable.  */\n \n-static struct block_symbol\n-elf_lookup_lib_symbol (struct objfile *objfile,\n-\t\t       const char *name,\n-\t\t       const domain_enum domain)\n+static void\n+svr4_iterate_over_objfiles_in_search_order\n+  (struct gdbarch *gdbarch,\n+   iterate_over_objfiles_in_search_order_cb_ftype *cb,\n+   void *cb_data, struct objfile *current_objfile)\n {\n-  bfd *abfd;\n-\n-  if (objfile == symfile_objfile)\n-    abfd = exec_bfd;\n-  else\n+  bool checked_current_objfile = false;\n+  if (current_objfile != nullptr)\n     {\n-      /* OBJFILE should have been passed as the non-debug one.  */\n-      gdb_assert (objfile->separate_debug_objfile_backlink == NULL);\n+      bfd *abfd;\n \n-      abfd = objfile->obfd;\n-    }\n+      if (current_objfile->separate_debug_objfile_backlink != nullptr)\n+        current_objfile = current_objfile->separate_debug_objfile_backlink;\n \n-  if (abfd == NULL || scan_dyntag (DT_SYMBOLIC, abfd, NULL, NULL) != 1)\n-    return {};\n+      if (current_objfile == symfile_objfile)\n+\tabfd = exec_bfd;\n+      else\n+\tabfd = current_objfile->obfd;\n+\n+      if (abfd != nullptr &&\n+\t  scan_dyntag (DT_SYMBOLIC, abfd, nullptr, nullptr) == 1)\n+\t{\n+\t  checked_current_objfile = true;\n+\t  if (cb (current_objfile, cb_data) != 0)\n+\t    return;\n+\t}\n+    }\n \n-  return lookup_global_symbol_from_objfile (objfile, GLOBAL_BLOCK, name,\n-\t\t\t\t\t    domain);\n+  for (objfile *objfile : current_program_space->objfiles ())\n+    {\n+      if (checked_current_objfile && objfile == current_objfile)\n+\tcontinue;\n+      if (cb (objfile, cb_data) != 0)\n+\treturn;\n+    }\n }\n \n void\n@@ -3242,7 +3261,6 @@ _initialize_svr4_solib (void)\n   svr4_so_ops.open_symbol_file_object = open_symbol_file_object;\n   svr4_so_ops.in_dynsym_resolve_code = svr4_in_dynsym_resolve_code;\n   svr4_so_ops.bfd_open = solib_bfd_open;\n-  svr4_so_ops.lookup_lib_global_symbol = elf_lookup_lib_symbol;\n   svr4_so_ops.same = svr4_same;\n   svr4_so_ops.keep_data_in_core = svr4_keep_data_in_core;\n   svr4_so_ops.update_breakpoints = svr4_update_solib_event_breakpoints;"
    },
    {
      "sha": "5b1246929b5b1346447f43de8954a0001bb1b93a",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 0,
      "deletions": 15,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=626ca2c06f7b5a5441d512ce334bb2daf5587259",
      "patch": "@@ -1441,21 +1441,6 @@ show_auto_solib_add (struct ui_file *file, int from_tty,\n }\n \n \n-/* Handler for library-specific lookup of global symbol NAME in OBJFILE.  Call\n-   the library-specific handler if it is installed for the current target.  */\n-\n-struct block_symbol\n-solib_global_lookup (struct objfile *objfile,\n-\t\t     const char *name,\n-\t\t     const domain_enum domain)\n-{\n-  const struct target_so_ops *ops = solib_ops (target_gdbarch ());\n-\n-  if (ops->lookup_lib_global_symbol != NULL)\n-    return ops->lookup_lib_global_symbol (objfile, name, domain);\n-  return {};\n-}\n-\n /* Lookup the value for a specific symbol from dynamic symbol table.  Look\n    up symbol from ABFD.  MATCH_SYM is a callback function to determine\n    whether to pick up a symbol.  DATA is the input of this callback"
    },
    {
      "sha": "ee99fc815b5da3cc50e61b5d8fe4f17b906094af",
      "filename": "gdb/solist.h",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solist.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/solist.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solist.h?ref=626ca2c06f7b5a5441d512ce334bb2daf5587259",
      "patch": "@@ -139,12 +139,6 @@ struct target_so_ops\n \t\t\t      unsigned o_flags,\n \t\t\t      gdb::unique_xmalloc_ptr<char> *temp_pathname);\n \n-  /* Hook for looking up global symbols in a library-specific way.  */\n-  struct block_symbol (*lookup_lib_global_symbol)\n-    (struct objfile *objfile,\n-     const char *name,\n-     const domain_enum domain);\n-\n   /* Given two so_list objects, one from the GDB thread list\n      and another from the list returned by current_sos, return 1\n      if they represent the same library.\n@@ -209,9 +203,4 @@ extern gdb_bfd_ref_ptr solib_bfd_open (const char *in_pathname);\n /* FIXME: gdbarch needs to control this variable.  */\n extern struct target_so_ops *current_target_so_ops;\n \n-/* Handler for library-specific global symbol lookup in solib.c.  */\n-struct block_symbol solib_global_lookup (struct objfile *objfile,\n-\t\t\t\t\t    const char *name,\n-\t\t\t\t\t    const domain_enum domain);\n-\n #endif"
    },
    {
      "sha": "54c7ed9c7c784a91f9cd1e2d2afcd5115f3c54e5",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/626ca2c06f7b5a5441d512ce334bb2daf5587259/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=626ca2c06f7b5a5441d512ce334bb2daf5587259",
      "patch": "@@ -2634,11 +2634,7 @@ lookup_global_or_static_symbol (const char *name,\n       return result;\n     }\n \n-  /* Call library-specific lookup procedure.  */\n-  if (objfile != NULL)\n-    result = solib_global_lookup (objfile, name, domain);\n-\n-  /* If that didn't work go a global search (of global blocks, heh).  */\n+  /* Do a global search (of global blocks, heh).  */\n   if (result.symbol == NULL)\n     {\n       memset (&lookup_data, 0, sizeof (lookup_data));"
    }
  ]
}