{
  "sha": "e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
  "node_id": "C_kwDOANOeidoAKGUxZTFhZTZlOWI1ZTc2ZGFlZDIyYzhiMmViNzlmYTNiNWFkZTMzMzU",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-21T08:06:20Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-27T00:27:21Z"
    },
    "message": "sim: testsuite: fix objdir handling\n\nThe tests assume that the cwd is the objdir directory and write its\nintermediates to there all the time.  When using runtest's --objdir\nsetting though, this puts the files in the wrong place.  This isn't\na big problem currently as we never change --objdir, but in order to\nsupport parallel test execution, we're going to start setting that\noption, so clean up the code ahead of time.\n\nWe also have to tweak some of the cris tests which were making\nassumptions about the argv[0] value.",
    "tree": {
      "sha": "205dafa026bd39afbe1d4d2897ce1300edd3ad83",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/205dafa026bd39afbe1d4d2897ce1300edd3ad83"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2"
    }
  ],
  "stats": {
    "total": 88,
    "additions": 46,
    "deletions": 42
  },
  "files": [
    {
      "sha": "671d63c30b8fc4dd44145a5d1c44d1f6e98be469",
      "filename": "sim/Makefile.in",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/Makefile.in?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -1251,12 +1251,12 @@ CLEANFILES = common/version.c common/version.c-stamp \\\n \ttestsuite/common/bits32m31.c testsuite/common/bits64m0.c \\\n \ttestsuite/common/bits64m63.c\n DISTCLEANFILES = \n-MOSTLYCLEANFILES = core $(am__append_5) site-srcdir.exp testrun.log \\\n-\ttestrun.sum $(am__append_7) $(am__append_10) $(am__append_12) \\\n-\t$(am__append_15) $(am__append_17) $(am__append_19) \\\n-\t$(am__append_21) $(am__append_24) $(am__append_26) \\\n-\t$(am__append_29) $(am__append_31) $(am__append_33) \\\n-\t$(am__append_36) $(am__append_38)\n+MOSTLYCLEANFILES = core $(am__append_5) site-sim-config.exp \\\n+\ttestrun.log testrun.sum $(am__append_7) $(am__append_10) \\\n+\t$(am__append_12) $(am__append_15) $(am__append_17) \\\n+\t$(am__append_19) $(am__append_21) $(am__append_24) \\\n+\t$(am__append_26) $(am__append_29) $(am__append_31) \\\n+\t$(am__append_33) $(am__append_36) $(am__append_38)\n AM_CFLAGS = $(WERROR_CFLAGS) $(WARN_CFLAGS)\n AM_CPPFLAGS = -I$(srcroot)/include $(SIM_INLINE) -I$(srcdir)/common\n COMPILE_FOR_BUILD = $(CC_FOR_BUILD) $(AM_CPPFLAGS) $(CFLAGS_FOR_BUILD)\n@@ -1336,7 +1336,7 @@ common_libcommon_a_SOURCES = \\\n \n \n # Tweak the site.exp so it works with plain `runtest` from user.\n-EXTRA_DEJAGNU_SITE_CONFIG = site-srcdir.exp\n+EXTRA_DEJAGNU_SITE_CONFIG = site-sim-config.exp\n \n # Custom verbose test variables that automake doesn't provide (yet?).\n AM_V_RUNTEST = $(AM_V_RUNTEST_@AM_V@)\n@@ -2662,8 +2662,11 @@ common/version.c-stamp: $(srcroot)/gdb/version.in $(srcroot)/bfd/version.h $(src\n @SIM_ENABLE_IGEN_TRUE@igen/%-main.o: igen/%.c\n @SIM_ENABLE_IGEN_TRUE@\t$(AM_V_CC)$(COMPILE_FOR_BUILD) -DMAIN -c $< -o $@\n \n-site-srcdir.exp: Makefile\n-\t$(AM_V_GEN)echo \"set srcdir \\\"$(srcdir)/testsuite\\\"\" > $@\n+site-sim-config.exp: Makefile\n+\t$(AM_V_GEN)( \\\n+\techo \"set builddir \\\"$(builddir)\\\"\"; \\\n+\techo \"set srcdir \\\"$(srcdir)/testsuite\\\"\"; \\\n+\t) > $@\n \n check-DEJAGNU: site.exp\n \t$(AM_V_RUNTEST)LC_ALL=C; export LC_ALL; \\"
    },
    {
      "sha": "f250d23092584d0c10119df1ce2992ff14cfb084",
      "filename": "sim/testsuite/bfin/allinsn.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/bfin/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/bfin/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/bfin/allinsn.exp?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -4,8 +4,10 @@ if [istarget bfin-*-elf] {\n     # all machines\n     set all_machs \"bfin\"\n \n+    global objdir\n+\n     # See if we have a preprocessor available.\n-    if { [target_compile $srcdir/$subdir/usp.S compilercheck.x \"preprocess\" \\\n+    if { [target_compile $srcdir/$subdir/usp.S $objdir/compilercheck.x \"preprocess\" \\\n \t  [list \"incdir=$srcdir/$subdir\"]] == \"\" } {\n \tset has_cpp 1\n     } {\n@@ -14,7 +16,7 @@ if [istarget bfin-*-elf] {\n     }\n \n     # See if we have a compiler available.\n-    if { [target_compile $srcdir/$subdir/argc.c compilercheck.x \"executable\" \\\n+    if { [target_compile $srcdir/$subdir/argc.c $objdir/compilercheck.x \"executable\" \\\n \t  [list \"incdir=$srcdir/$subdir\" \"additional_flags=-msim\"]] == \"\" } {\n \tset has_cc 1\n     } {"
    },
    {
      "sha": "bd51d73432fb0f3bb64f1c49e692ce55da2ab34c",
      "filename": "sim/testsuite/cris/c/c.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/c.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/c.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/c.exp?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -31,7 +31,8 @@ if [istarget cris*-*-elf] {\n }\n \n # Using target_compile, since it is less noisy,\n-if { [target_compile $srcdir/$subdir/hello.c compilercheck.x \\\n+global objdir\n+if { [target_compile $srcdir/$subdir/hello.c $objdir/compilercheck.x \\\n \t  \"executable\" \"\" ] == \"\" } {\n     set has_cc 1\n \n@@ -43,7 +44,7 @@ if { [target_compile $srcdir/$subdir/hello.c compilercheck.x \\\n     # detrimental effects on the executable from the specs and\n     # -static in the board ldflags, we just add -Bdynamic.\n     if [regexp \"(.*/lib)/libc.so\" \\\n-\t    [target_compile $srcdir/$subdir/hello.c compilercheck.x \\\n+\t    [target_compile $srcdir/$subdir/hello.c $objdir/compilercheck.x \\\n \t\t \"executable\" \\\n \t\t \"ldflags=-print-file-name=libc.so -Wl,-Bdynamic\"] \\\n \t    xxx libcsodir]  {\n@@ -169,7 +170,7 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \n     verbose -log \"Compiling $src with $opts(cc)\"\n \n-    if { [target_compile $src \"$testname.x\" \"executable\" \"$opts(cc)\" ] != \"\" } {\n+    if { [target_compile $src \"$objdir/$testname.x\" \"executable\" \"$opts(cc)\" ] != \"\" } {\n \tunresolved $testname\n \tcontinue\n     }\n@@ -192,7 +193,7 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \teval setup_kfail $opts(kfail)\n     }\n \n-    set result [sim_run \"$testname.x\" \"$opts(sim,$mach)\" \"$opts(progoptions)\" \\\n+    set result [sim_run \"$objdir/$testname.x\" \"$opts(sim,$mach)\" \"$opts(progoptions)\" \\\n \t\"\" \"\"]\n     set return_code [lindex $result 0]\n     set output [lindex $result 1]"
    },
    {
      "sha": "92d12bfc437133ab50b4e63878db44febce2cf4f",
      "filename": "sim/testsuite/cris/c/openpf1.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/openpf1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/openpf1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/openpf1.c?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -21,7 +21,7 @@ int main (int argc, char *argv[])\n       if (fnam == NULL)\n \tabort ();\n       strcpy (fnam, \"/\");\n-      strcat (fnam, argv[0]);\n+      strcat (fnam, basename (argv[0]));\n     }\n \n   f = fopen (fnam, \"rb\");"
    },
    {
      "sha": "3b62837017c4a666d21223ea1813a6992f314a98",
      "filename": "sim/testsuite/cris/c/rename2.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/rename2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/rename2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/rename2.c?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -17,12 +17,6 @@ void err (const char *s)\n \n int main (int argc, char *argv[])\n {\n-  /* Avoid getting files with random characters due to errors\n-     elsewhere.  */\n-  if (argc != 1\n-      || (argv[0][0] != '.' && argv[0][0] != '/' && argv[0][0] != 'r'))\n-    abort ();\n-\n   if (rename (argv[0], NULL) != -1\n       || errno != EFAULT)\n     err (\"rename 1 \");"
    },
    {
      "sha": "eac4da9ea8d94dc982eeb926c93a120d3597c329",
      "filename": "sim/testsuite/cris/c/stat3.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/stat3.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/c/stat3.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/stat3.c?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -13,7 +13,7 @@ int main (int argc, char *argv[])\n   char path[1024] = \"/\";\n   struct stat buf;\n \n-  strcat (path, argv[0]);\n+  strcat (path, basename (argv[0]));\n   if (stat (\".\", &buf) != 0\n       || !S_ISDIR (buf.st_mode))\n     abort ();"
    },
    {
      "sha": "42de37d896cdcccd7743fc0cd89651ff6e705597",
      "filename": "sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/hw/rv-n-cris/rvc.exp?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -21,6 +21,7 @@\n proc sim_has_rv_and_cris {} {\n     global srcdir\n     global subdir\n+    global objdir\n     global SIMFLAGS_FOR_TARGET\n \n     # We need to assemble and link a trivial program and pass that, in\n@@ -34,7 +35,7 @@ proc sim_has_rv_and_cris {} {\n \tset SIMFLAGS_FOR_TARGET \"\"\n     }\n \n-    set comp_output [target_assemble $srcdir/$subdir/quit.s quit.o \\\n+    set comp_output [target_assemble $srcdir/$subdir/quit.s $objdir/quit.o \\\n \t\t\t \"-I$srcdir/$subdir\"]\n \n     if ![string match \"\" $comp_output] {\n@@ -43,7 +44,7 @@ proc sim_has_rv_and_cris {} {\n \treturn 0\n     }\n \n-    set comp_output [target_link quit.o quit.x \"\"]\n+    set comp_output [target_link $objdir/quit.o $objdir/quit.x \"\"]\n \n     if ![string match \"\" $comp_output] {\n \tverbose -log \"$comp_output\" 3\n@@ -52,7 +53,7 @@ proc sim_has_rv_and_cris {} {\n     }\n \n     set result \\\n-\t[sim_run quit.x \\\n+\t[sim_run $objdir/quit.x \\\n \t     \"$SIMFLAGS_FOR_TARGET --hw-device rv --hw-device cris --hw-info\" \\\n \t     \"\" \"\" \"\"]\n     set return_code [lindex $result 0]\n@@ -117,8 +118,8 @@ if [istarget cris*-*-*] {\n     # See the logic in sim-defs.exp for more details.\n     set sim [board_info target sim]\n     if [string equal \"\" $sim] {\n-\tglobal objdir\n-\tset rvdummy \"$objdir/cris/rvdummy\"\n+\tglobal builddir\n+\tset rvdummy \"$builddir/cris/rvdummy\"\n     } else {\n \tset rvdummy \"[file dirname [board_info target sim]]/rvdummy\"\n     }"
    },
    {
      "sha": "405f1b7f9f81d06ac088fd432fb651cfe5942f7c",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -40,13 +40,13 @@ proc sim_tool_path {} {\n     global sim_path\n     set sim \"$sim_path\"\n     if [string equal \"\" $sim] {\n-\tglobal objdir\n+\tglobal builddir\n \tglobal subdir\n \tset arch \"$subdir\"\n \twhile { [file dirname $arch] != \".\" } {\n \t    set arch [file dirname $arch]\n \t}\n-\treturn \"$objdir/$arch/run\"\n+\treturn \"$builddir/$arch/run\"\n     }\n     return \"$sim\"\n }\n@@ -181,7 +181,7 @@ proc sim_run { prog sim_opts prog_opts redir options } {\n # optional for xfail.\n \n proc run_sim_test { name requested_machs } {\n-    global subdir srcdir\n+    global subdir srcdir objdir\n     global opts\n     global cpu_option\n     global cpu_option_sep\n@@ -328,16 +328,16 @@ proc run_sim_test { name requested_machs } {\n \t}\n \n \tif [string match \"*.c\" $sourcefile] {\n-\t    set comp_output [target_compile $sourcefile ${name}.x \"executable\" \\\n+\t    set comp_output [target_compile $sourcefile $objdir/${name}.x \"executable\" \\\n \t\t[list \"incdir=$srcdir/$subdir\" \"additional_flags=$c_as_options $c_ld_options $opts(cc,$mach)\"]]\n \t    set method \"compiling/linking\"\n \t} else {\n \t    if [string match \"*.S\" $sourcefile] {\n-\t\tset comp_output [target_compile $sourcefile ${name}.o \"object\" \\\n+\t\tset comp_output [target_compile $sourcefile $objdir/${name}.o \"object\" \\\n \t\t    [list \"incdir=$srcdir/$subdir\" \"additional_flags=$c_as_options\"]]\n \t\tset method \"compiling\"\n \t    } else {\n-\t\tset comp_output [target_assemble $sourcefile ${name}.o \"$as_options\"]\n+\t\tset comp_output [target_assemble $sourcefile $objdir/${name}.o \"$as_options\"]\n \t\tset method \"assembling\"\n \t    }\n \n@@ -347,7 +347,7 @@ proc run_sim_test { name requested_machs } {\n \t\tcontinue\n \t    }\n \n-\t    set comp_output [target_link ${name}.o ${name}.x \"$opts(ld,$mach)\"]\n+\t    set comp_output [target_link $objdir/${name}.o $objdir/${name}.x \"$opts(ld,$mach)\"]\n \t    set method \"linking\"\n \t}\n \n@@ -368,7 +368,7 @@ proc run_sim_test { name requested_machs } {\n \t    set options \"$options timeout=$opts(timeout)\"\n \t}\n \n-\tset result [sim_run ${name}.x \"$opts(sim,$mach) $SIMFLAGS_FOR_TARGET\" \"$opts(progopts)\" \"\" \"$options\"]\n+\tset result [sim_run $objdir/${name}.x \"$opts(sim,$mach) $SIMFLAGS_FOR_TARGET\" \"$opts(progopts)\" \"\" \"$options\"]\n \tset return_code [lindex $result 0]\n \tset output [lindex $result 1]\n \n@@ -383,7 +383,7 @@ proc run_sim_test { name requested_machs } {\n \t    if { \"$opts(xerror)\" == \"no\" } {\n \t\tif [string match $opts(output) $output] {\n \t\t    pass \"$mach $testname\"\n-\t\t    file delete ${name}.o ${name}.x\n+\t\t    file delete $objdir/${name}.o $objdir/${name}.x\n \t\t} else {\n \t\t    verbose -log \"status:  $return_code\" 3\n \t\t    verbose -log \"output:  $output\" 3\n@@ -400,7 +400,7 @@ proc run_sim_test { name requested_machs } {\n \t    } else {\n \t\tif [string match $opts(output) $output] {\n \t\t    pass \"$mach $testname\"\n-\t\t    file delete ${name}.o ${name}.x\n+\t\t    file delete $objdir/${name}.o $objdir/${name}.x\n \t\t} else {\n \t\t    verbose -log \"status:  $return_code\" 3\n \t\t    verbose -log \"output:  $output\" 3"
    },
    {
      "sha": "5ffa9eca745cc5cf0a4487db8a40a49c59ba99e3",
      "filename": "sim/testsuite/local.mk",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/local.mk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335/sim/testsuite/local.mk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/local.mk?ref=e1e1ae6e9b5e76daed22c8b2eb79fa3b5ade3335",
      "patch": "@@ -16,16 +16,19 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n # Tweak the site.exp so it works with plain `runtest` from user.\n-EXTRA_DEJAGNU_SITE_CONFIG = site-srcdir.exp\n+EXTRA_DEJAGNU_SITE_CONFIG = site-sim-config.exp\n \n # Custom verbose test variables that automake doesn't provide (yet?).\n AM_V_RUNTEST = $(AM_V_RUNTEST_@AM_V@)\n AM_V_RUNTEST_ = $(AM_V_RUNTEST_@AM_DEFAULT_V@)\n AM_V_RUNTEST_0 =  @echo \"  RUNTEST  $(RUNTESTFLAGS)\";\n AM_V_RUNTEST_1 =\n \n-site-srcdir.exp: Makefile\n-\t$(AM_V_GEN)echo \"set srcdir \\\"$(srcdir)/testsuite\\\"\" > $@\n+site-sim-config.exp: Makefile\n+\t$(AM_V_GEN)( \\\n+\techo \"set builddir \\\"$(builddir)\\\"\"; \\\n+\techo \"set srcdir \\\"$(srcdir)/testsuite\\\"\"; \\\n+\t) > $@\n \n check-DEJAGNU: site.exp\n \t$(AM_V_RUNTEST)LC_ALL=C; export LC_ALL; \\\n@@ -37,6 +40,6 @@ check-DEJAGNU: site.exp\n \tfi\n \n MOSTLYCLEANFILES += \\\n-\tsite-srcdir.exp testrun.log testrun.sum\n+\tsite-sim-config.exp testrun.log testrun.sum\n \n include %D%/common/local.mk"
    }
  ]
}