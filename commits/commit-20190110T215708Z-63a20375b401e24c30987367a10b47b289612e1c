{
  "sha": "63a20375b401e24c30987367a10b47b289612e1c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjNhMjAzNzViNDAxZTI0YzMwOTg3MzY3YTEwYjQ3YjI4OTYxMmUxYw==",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-01-10T21:57:08Z"
    },
    "committer": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-01-10T21:57:08Z"
    },
    "message": "gdb/23712: Cleanup/Remove temporary dictionary functions\n\nNow that multidictionary's are being used, there is no longer any need\nto retain the four temporary functions introduced in the beginning of\nthis series.\n\nThis patch removes them.\n\nAs an additional cleanup, since the single-language dictionaries are\nno longer used outside dictionary.c, make all of those functions\nstatic.\n\ngdb/ChangeLog:\n\n\tPR gdb/23712\n\tPR symtab/23010\n\t* dictionary.c (pending_to_vector): Remove.\n\t(dict_create_hashed_1, dict_create_linear_1, dict_add_pending_1):\n\tRemove _1 suffix, replacing functions of the same name.  Update\n\tall callers.\n\t(dict_create_hashed, dict_create_hashed_expandable)\n\t(dict_create_linear, dict_create_linear_expandable, dict_free)\n\t(dict_add_symbol, dict_add_pending, dict_size, dict_empty):\n\tMake functions static.",
    "tree": {
      "sha": "e8f460e9ab226ca14f19c84e03593d9faa95294a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e8f460e9ab226ca14f19c84e03593d9faa95294a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/63a20375b401e24c30987367a10b47b289612e1c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63a20375b401e24c30987367a10b47b289612e1c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/63a20375b401e24c30987367a10b47b289612e1c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63a20375b401e24c30987367a10b47b289612e1c/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "b026f59345a336cabf74719fce9f96cab7c7ab4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b026f59345a336cabf74719fce9f96cab7c7ab4d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b026f59345a336cabf74719fce9f96cab7c7ab4d"
    }
  ],
  "stats": {
    "total": 110,
    "additions": 36,
    "deletions": 74
  },
  "files": [
    {
      "sha": "092534b47363b9edf08c3674894fd97e0be16a62",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63a20375b401e24c30987367a10b47b289612e1c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63a20375b401e24c30987367a10b47b289612e1c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=63a20375b401e24c30987367a10b47b289612e1c",
      "patch": "@@ -1,3 +1,16 @@\n+2019-01-10  Keith Seitz  <keiths@redhat.com>\n+\n+\tPR gdb/23712\n+\tPR symtab/23010\n+\t* dictionary.c (pending_to_vector): Remove.\n+\t(dict_create_hashed_1, dict_create_linear_1, dict_add_pending_1):\n+\tRemove _1 suffix, replacing functions of the same name.  Update\n+\tall callers.\n+\t(dict_create_hashed, dict_create_hashed_expandable)\n+\t(dict_create_linear, dict_create_linear_expandable, dict_free)\n+\t(dict_add_symbol, dict_add_pending, dict_size, dict_empty):\n+\tMake functions static.\n+\n 2019-01-10  Keith Seitz  <keiths@redhat.com>\n \n \tPR gdb/23712"
    },
    {
      "sha": "88eff2fa439a2a4c60d5db0687ba5b07f26271d5",
      "filename": "gdb/dictionary.c",
      "status": "modified",
      "additions": 23,
      "deletions": 74,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63a20375b401e24c30987367a10b47b289612e1c/gdb/dictionary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63a20375b401e24c30987367a10b47b289612e1c/gdb/dictionary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dictionary.c?ref=63a20375b401e24c30987367a10b47b289612e1c",
      "patch": "@@ -342,31 +342,14 @@ static void insert_symbol_hashed (struct dictionary *dict,\n \n static void expand_hashtable (struct dictionary *dict);\n \n-/* A function to convert a linked list into a vector.  */\n-\n-static std::vector<symbol *>\n-pending_to_vector (const struct pending *symbol_list)\n-{\n-  std::vector<symbol *> symlist;\n-\n-  for (const struct pending *list_counter = symbol_list;\n-       list_counter != nullptr; list_counter = list_counter->next)\n-    {\n-      for (int i = list_counter->nsyms - 1; i >= 0; --i)\n-\tsymlist.push_back (list_counter->symbol[i]);\n-    }\n-\n-  return symlist;\n-}\n-\n /* The creation functions.  */\n \n-/* A function to transition dict_create_hashed to new API.  */\n+/* Create a hashed dictionary of a given language.  */\n \n static struct dictionary *\n-dict_create_hashed_1 (struct obstack *obstack,\n-\t\t      enum language language,\n-\t\t      const std::vector<symbol *> &symbol_list)\n+dict_create_hashed (struct obstack *obstack,\n+\t\t    enum language language,\n+\t\t    const std::vector<symbol *> &symbol_list)\n {\n   /* Allocate the dictionary.  */\n   struct dictionary *retval = XOBNEW (obstack, struct dictionary);\n@@ -388,21 +371,9 @@ dict_create_hashed_1 (struct obstack *obstack,\n   return retval;\n }\n \n-/* See dictionary.h.  */\n-\n-struct dictionary *\n-dict_create_hashed (struct obstack *obstack,\n-\t\t    enum language language,\n-\t\t    const struct pending *symbol_list)\n-{\n-  std::vector<symbol *> symlist = pending_to_vector (symbol_list);\n-\n-  return dict_create_hashed_1 (obstack, language, symlist);\n-}\n+/* Create an expandable hashed dictionary of a given language.  */\n \n-/* See dictionary.h.  */\n-\n-extern struct dictionary *\n+static struct dictionary *\n dict_create_hashed_expandable (enum language language)\n {\n   struct dictionary *retval = XNEW (struct dictionary);\n@@ -417,12 +388,12 @@ dict_create_hashed_expandable (enum language language)\n   return retval;\n }\n \n-/* A function to transition dict_create_linear to new API.  */\n+/* Create a linear dictionary of a given language.  */\n \n static struct dictionary *\n-dict_create_linear_1 (struct obstack *obstack,\n-\t\t      enum language language,\n-\t\t      const std::vector<symbol *> &symbol_list)\n+dict_create_linear (struct obstack *obstack,\n+\t\t    enum language language,\n+\t\t    const std::vector<symbol *> &symbol_list)\n {\n   struct dictionary *retval = XOBNEW (obstack, struct dictionary);\n   DICT_VECTOR (retval) = &dict_linear_vector;\n@@ -442,21 +413,9 @@ dict_create_linear_1 (struct obstack *obstack,\n   return retval;\n }\n \n-/* See dictionary.h.  */\n-\n-struct dictionary *\n-dict_create_linear (struct obstack *obstack,\n-\t\t    enum language language,\n-\t\t    const struct pending *symbol_list)\n-{\n-  std::vector<symbol *> symlist = pending_to_vector (symbol_list);\n-\n-  return dict_create_linear_1 (obstack, language, symlist);\n-}\n-\n-/* See dictionary.h.  */\n+/* Create an expandable linear dictionary of a given language.  */\n \n-struct dictionary *\n+static struct dictionary *\n dict_create_linear_expandable (enum language language)\n {\n   struct dictionary *retval = XNEW (struct dictionary);\n@@ -476,42 +435,32 @@ dict_create_linear_expandable (enum language language)\n /* Free the memory used by a dictionary that's not on an obstack.  (If\n    any.)  */\n \n-void\n+static void\n dict_free (struct dictionary *dict)\n {\n   (DICT_VECTOR (dict))->free (dict);\n }\n \n /* Add SYM to DICT.  DICT had better be expandable.  */\n \n-void\n+static void\n dict_add_symbol (struct dictionary *dict, struct symbol *sym)\n {\n   (DICT_VECTOR (dict))->add_symbol (dict, sym);\n }\n \n-/* A function to transition dict_add_pending to new API.  */\n+/* Utility to add a list of symbols to a dictionary.\n+   DICT must be an expandable dictionary.  */\n \n static void\n-dict_add_pending_1 (struct dictionary *dict,\n-\t\t    const std::vector<symbol *> &symbol_list)\n+dict_add_pending (struct dictionary *dict,\n+\t\t  const std::vector<symbol *> &symbol_list)\n {\n   /* Preserve ordering by reversing the list.  */\n   for (auto sym = symbol_list.rbegin (); sym != symbol_list.rend (); ++sym)\n     dict_add_symbol (dict, *sym);\n }\n \n-/* Utility to add a list of symbols to a dictionary.\n-   DICT must be an expandable dictionary.  */\n-\n-void\n-dict_add_pending (struct dictionary *dict, const struct pending *symbol_list)\n-{\n-  std::vector<symbol *> symlist = pending_to_vector (symbol_list);\n-\n-  dict_add_pending_1 (dict, symlist);\n-}\n-\n /* Initialize ITERATOR to point at the first symbol in DICT, and\n    return that first symbol, or NULL if DICT is empty.  */\n \n@@ -548,7 +497,7 @@ dict_iter_match_next (const lookup_name_info &name,\n     ->iter_match_next (name, iterator);\n }\n \n-int\n+static int\n dict_size (const struct dictionary *dict)\n {\n   return (DICT_VECTOR (dict))->size (dict);\n@@ -560,7 +509,7 @@ dict_size (const struct dictionary *dict)\n \n /* Test to see if DICT is empty.  */\n \n-int\n+static int\n dict_empty (struct dictionary *dict)\n {\n   struct dict_iterator iter;\n@@ -1019,7 +968,7 @@ mdict_create_hashed (struct obstack *obstack,\n       std::vector<symbol *> symlist = pair.second;\n \n       retval->dictionaries[idx++]\n-\t= dict_create_hashed_1 (obstack, language, symlist);\n+\t= dict_create_hashed (obstack, language, symlist);\n     }\n \n   return retval;\n@@ -1064,7 +1013,7 @@ mdict_create_linear (struct obstack *obstack,\n       std::vector<symbol *> symlist = pair.second;\n \n       retval->dictionaries[idx++]\n-\t= dict_create_linear_1 (obstack, language, symlist);\n+\t= dict_create_linear (obstack, language, symlist);\n     }\n \n   return retval;\n@@ -1210,7 +1159,7 @@ mdict_add_pending (struct multidictionary *mdict,\n \t  dict = create_new_language_dictionary (mdict, language);\n \t}\n \n-      dict_add_pending_1 (dict, symlist);\n+      dict_add_pending (dict, symlist);\n     }\n }\n "
    }
  ]
}