{
  "sha": "fe7266674110f34eacf2e9d2b308f76d33ce50ed",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU3MjY2Njc0MTEwZjM0ZWFjZjJlOWQyYjMwOGY3NmQzM2NlNTBlZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-07T16:35:06Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-07T16:35:06Z"
    },
    "message": "Fix normal_stop latent bug\n\nTARGET_WAITKIND_NO_RESUMED doesn't have an associated event thread, so\nwe shouldn't be referring to inferior_thread() assuming it points to\none.\n\nThis was caught on the multi-target branch, where we always switch to\nno-thread-selected whenever we start handling an event, exactly to\ncatch places that incorrectly use \"inferior_ptid/inferior_thread()\"\nwithout switching to the right event thread / target.\n\nHere, on the branch, we assert in inferior_thread() because\nTARGET_WAITKIND_NO_RESUMED doesn't have an associated event thread, so\ninferior_ptid is still null_ptid.\n\ngdb/ChangeLog:\n2019-03-07  Pedro Alves  <palves@redhat.com>\n\n\t* infrun.c (normal_stop): Also check for\n\tTARGET_WAITKIND_NO_RESUMED before referring to inferior_thread().",
    "tree": {
      "sha": "3fbd535992b05f1586534c519f0989c48e7d857a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3fbd535992b05f1586534c519f0989c48e7d857a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe7266674110f34eacf2e9d2b308f76d33ce50ed",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe7266674110f34eacf2e9d2b308f76d33ce50ed",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe7266674110f34eacf2e9d2b308f76d33ce50ed",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe7266674110f34eacf2e9d2b308f76d33ce50ed/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7584bb30cf380cff9cc3914b1b523c5a1a5b4302",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7584bb30cf380cff9cc3914b1b523c5a1a5b4302",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7584bb30cf380cff9cc3914b1b523c5a1a5b4302"
    }
  ],
  "stats": {
    "total": 8,
    "additions": 7,
    "deletions": 1
  },
  "files": [
    {
      "sha": "5614e7887d1d2ae524f1b7709795bf1690149943",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7266674110f34eacf2e9d2b308f76d33ce50ed/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7266674110f34eacf2e9d2b308f76d33ce50ed/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe7266674110f34eacf2e9d2b308f76d33ce50ed",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-07  Pedro Alves  <palves@redhat.com>\n+\n+\t* infrun.c (normal_stop): Also check for\n+\tTARGET_WAITKIND_NO_RESUMED before referring to inferior_thread().\n+\n 2019-03-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-lang.c (value_from_host_double): Moved to..."
    },
    {
      "sha": "33e5d434b3582cdf189887fb985331ab64f0b6a4",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7266674110f34eacf2e9d2b308f76d33ce50ed/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7266674110f34eacf2e9d2b308f76d33ce50ed/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=fe7266674110f34eacf2e9d2b308f76d33ce50ed",
      "patch": "@@ -8146,7 +8146,8 @@ normal_stop (void)\n   if (target_has_execution)\n     {\n       if (last.kind != TARGET_WAITKIND_SIGNALLED\n-\t  && last.kind != TARGET_WAITKIND_EXITED)\n+\t  && last.kind != TARGET_WAITKIND_EXITED\n+\t  && last.kind != TARGET_WAITKIND_NO_RESUMED)\n \t/* Delete the breakpoint we stopped at, if it wants to be deleted.\n \t   Delete any breakpoint that is to be deleted at the next stop.  */\n \tbreakpoint_auto_delete (inferior_thread ()->control.stop_bpstat);"
    }
  ]
}