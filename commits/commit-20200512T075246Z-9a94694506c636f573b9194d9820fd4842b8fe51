{
  "sha": "9a94694506c636f573b9194d9820fd4842b8fe51",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWE5NDY5NDUwNmM2MzZmNTczYjkxOTRkOTgyMGZkNDg0MmI4ZmU1MQ==",
  "commit": {
    "author": {
      "name": "Mihails Strasuns via Gdb-patches",
      "email": "gdb-patches@sourceware.org",
      "date": "2020-03-31T17:13:51Z"
    },
    "committer": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-05-12T07:52:46Z"
    },
    "message": "[gdb/testsuite] use args as lib list for jit-elf tests\n\nOld usage: jit-elf-main lib.so 2\nNew usage: jit-elf-main lib.so.1 lib.so.2\n\nRefactoring necessary to support running tests over multiple jit\nbinaries rather than mapping the same binary muultiple times.\n\ngdb/testsuite/ChangeLog:\n\n2020-02-18  Mihails Strasuns  <mihails.strasuns@intel.com>\n\n\t* gdb.base/jit-elf-main.c: Read lib list from argc/argv.\n\t* gdb.base/jit-elf.exp: Compile N jit libraries and use the list.\n\t* gdb.base/jit-elf-so.exp: Ditto.",
    "tree": {
      "sha": "daf79b08ab75330e55effe78e4884010bdd75ef4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/daf79b08ab75330e55effe78e4884010bdd75ef4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a94694506c636f573b9194d9820fd4842b8fe51",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a94694506c636f573b9194d9820fd4842b8fe51",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a94694506c636f573b9194d9820fd4842b8fe51",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a94694506c636f573b9194d9820fd4842b8fe51/comments",
  "author": null,
  "committer": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "111b33f0b8d4872296bb0173bb82b0c5ddb9785d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/111b33f0b8d4872296bb0173bb82b0c5ddb9785d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/111b33f0b8d4872296bb0173bb82b0c5ddb9785d"
    }
  ],
  "stats": {
    "total": 394,
    "additions": 252,
    "deletions": 142
  },
  "files": [
    {
      "sha": "acfd17d417940649728b35802adf502c263e04ce",
      "filename": "gdb/testsuite/gdb.base/jit-elf-main.c",
      "status": "modified",
      "additions": 23,
      "deletions": 33,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a94694506c636f573b9194d9820fd4842b8fe51/gdb/testsuite/gdb.base/jit-elf-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a94694506c636f573b9194d9820fd4842b8fe51/gdb/testsuite/gdb.base/jit-elf-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-main.c?ref=9a94694506c636f573b9194d9820fd4842b8fe51",
      "patch": "@@ -45,9 +45,9 @@\n #endif /* !ElfW  */\n \n static void\n-usage (const char *const argv0)\n+usage (void)\n {\n-  fprintf (stderr, \"Usage: %s library [count]\\n\", argv0);\n+  fprintf (stderr, \"Usage: jit-elf-main libraries...\\n\");\n   exit (1);\n }\n \n@@ -106,49 +106,39 @@ int mypid;\n int\n MAIN (int argc, char *argv[])\n {\n-  /* These variables are here so they can easily be set from jit.exp.  */\n-  const char *libname = NULL;\n-  int count = 0, i, fd;\n-  struct stat st;\n-\n+  int i;\n   alarm (300);\n+  /* Used as backing storage for GDB to populate argv.  */\n+  char *fake_argv[10];\n \n   mypid = getpid ();\n-\n-  count = count;  /* gdb break here 0  */\n+  /* gdb break here 0  */\n \n   if (argc < 2)\n     {\n-      usage (argv[0]);\n+      usage ();\n       exit (1);\n     }\n \n-  if (libname == NULL)\n-    /* Only set if not already set from GDB.  */\n-    libname = argv[1];\n-\n-  if (argc > 2 && count == 0)\n-    /* Only set if not already set from GDB.  */\n-    count = atoi (argv[2]);\n-\n-  printf (\"%s:%d: libname = %s, count = %d\\n\", __FILE__, __LINE__,\n-\t  libname, count);\n-\n-  if ((fd = open (libname, O_RDONLY)) == -1)\n+  for (i = 1; i < argc; ++i)\n     {\n-      fprintf (stderr, \"open (\\\"%s\\\", O_RDONLY): %s\\n\", libname,\n-\t       strerror (errno));\n-      exit (1);\n-    }\n+      struct stat st;\n+      int fd;\n \n-  if (fstat (fd, &st) != 0)\n-    {\n-      fprintf (stderr, \"fstat (\\\"%d\\\"): %s\\n\", fd, strerror (errno));\n-      exit (1);\n-    }\n+      printf (\"%s:%d: libname = %s, i = %d\\n\", __FILE__, __LINE__, argv[i], i);\n+      if ((fd = open (argv[i], O_RDONLY)) == -1)\n+\t{\n+\t  fprintf (stderr, \"open (\\\"%s\\\", O_RDONLY): %s\\n\", argv[i],\n+\t\t   strerror (errno));\n+\t  exit (1);\n+\t}\n+\n+      if (fstat (fd, &st) != 0)\n+\t{\n+\t  fprintf (stderr, \"fstat (\\\"%d\\\"): %s\\n\", fd, strerror (errno));\n+\t  exit (1);\n+\t}\n \n-  for (i = 0; i < count; ++i)\n-    {\n       const void *const addr = mmap (0, st.st_size, PROT_READ|PROT_WRITE,\n \t\t\t\t     MAP_PRIVATE, fd, 0);\n       struct jit_code_entry *const entry = calloc (1, sizeof (*entry));"
    },
    {
      "sha": "4f50c443f0f31494cd0fe9fb9446b405e09b704c",
      "filename": "gdb/testsuite/gdb.base/jit-elf-so.exp",
      "status": "modified",
      "additions": 135,
      "deletions": 48,
      "changes": 183,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a94694506c636f573b9194d9820fd4842b8fe51/gdb/testsuite/gdb.base/jit-elf-so.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a94694506c636f573b9194d9820fd4842b8fe51/gdb/testsuite/gdb.base/jit-elf-so.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-so.exp?ref=9a94694506c636f573b9194d9820fd4842b8fe51",
      "patch": "@@ -26,48 +26,105 @@ if {[get_compiler_info]} {\n     return 1\n }\n \n+# The \"real\" main of this test, which loads jit-elf-main\n+# as a shared library.\n+set main_loader_basename jit-elf-dlmain\n+set main_loader_srcfile ${srcdir}/${subdir}/${main_loader_basename}.c\n+set main_loader_binfile [standard_output_file ${main_loader_basename}]\n+\n+# The main code that loads and registers JIT objects.\n+set main_solib_basename jit-elf-main\n+set main_solib_srcfile ${srcdir}/${subdir}/${main_solib_basename}.c\n+set main_solib_binfile [standard_output_file ${main_solib_basename}.so]\n+\n+# The shared library that gets loaded as JIT objects.\n+set jit_solib_basename jit-elf-solib\n+set jit_solib_srcfile ${srcdir}/${subdir}/${jit_solib_basename}.c\n+\n+# Compile jit-elf-main.c as a shared library.\n #\n-# test running programs\n+# OPTIONS is passed to gdb_compile when compiling the program.\n #\n+# On success, return 0.\n+# On failure, return -1.\n+proc compile_jit_elf_main_as_so {options} {\n+    global main_solib_srcfile main_solib_binfile\n+    set options [concat $options debug]\n+\n+    if { [gdb_compile_shlib ${main_solib_srcfile} ${main_solib_binfile} \\\n+\t    $options] != \"\" } {\n+\tuntested \"failed to compile ${main_solib_basename}.c as a shared library\"\n+\treturn -1\n+    }\n \n-set testfile jit-elf-dlmain\n-set srcfile ${testfile}.c\n-set binfile [standard_output_file ${testfile}]\n-if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable {debug shlib_load}] != \"\" } {\n-    untested \"failed to compile\"\n-    return -1\n+    return 0\n }\n \n-set testfile2 jit-elf-main\n-set srcfile2 ${testfile2}.c\n-set binfile2 [standard_output_file ${testfile2}.so]\n-set binfile2_dlopen [shlib_target_file ${testfile2}.so]\n-if { [gdb_compile_shlib \"${srcdir}/${subdir}/${srcfile2}\" ${binfile2} {debug additional_flags=\"-DMAIN=jit_dl_main\"}] != \"\" } {\n-    untested \"failed to compile main shared library\"\n-    return -1\n+# Compile the testcase shared library loader.\n+#\n+# OPTIONS is passed to gdb_compile when compiling the binary.\n+#\n+# On success, return 0.\n+# On failure, return -1.\n+proc compile_jit_dlmain {options} {\n+    global main_loader_srcfile main_loader_binfile\n+    set options [concat $options debug]\n+\n+    if { [gdb_compile ${main_loader_srcfile} ${main_loader_binfile} \\\n+\t    executable $options] != \"\" } {\n+\tuntested \"failed to compile ${main_loader_basename}.c as an executable\"\n+\treturn -1\n+    }\n+\n+    return 0\n }\n \n-set solib_testfile \"jit-elf-solib\"\n-set solib_srcfile \"${srcdir}/${subdir}/${solib_testfile}.c\"\n-set solib_binfile [standard_output_file ${solib_testfile}.so]\n-set solib_binfile_test_msg \"SHLIBDIR/${solib_testfile}.so\"\n+# Compile jit-elf-solib.c as a shared library in multiple copies and\n+# upload them to the target.\n+#\n+# On success, return a list of target path to the shared libraries.\n+# On failure, return -1.\n+proc compile_and_download_n_jit_so {count} {\n+    global jit_solib_basename jit_solib_srcfile\n+    set binfiles_target {}\n+\n+    for {set i 1} {$i <= $count} {incr i} {\n+\tset binfile [standard_output_file ${jit_solib_basename}.$i.so]\n+\n+\t# Note: compiling without debug info by default: some test\n+\t# do symbol renaming by munging on ELF symbol table, and that\n+\t# wouldn't work for .debug sections.  Also, output for \"info\n+\t# function\" changes when debug info is present.\n+\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} {}] != \"\" } {\n+\t    untested \"failed to compile ${jit_solib_basename}.c as a shared library\"\n+\t    return -1\n+\t}\n \n-# Note: compiling without debug info: the library goes through symbol\n-# renaming by munging on its symbol table, and that wouldn't work for .debug\n-# sections.  Also, output for \"info function\" changes when debug info is resent.\n-if { [gdb_compile_shlib ${solib_srcfile} ${solib_binfile} {}] != \"\" } {\n-    untested \"failed to compile jit shared library\"\n-    return -1\n+\tset path [gdb_remote_download target ${binfile}]\n+\tlappend binfiles_target $path\n+    }\n+\n+    return $binfiles_target\n }\n \n-set solib_binfile_target [gdb_remote_download target ${solib_binfile}]\n+# Run $main_loader_binfile and load $main_solib_binfile in\n+# GDB.  Check jit-related debug output and matches `info function`\n+# output for a jit loaded function using MATCH_STR.\n+#\n+# SOLIB_BINFILES_TARGETS is a list of shared libraries to pass\n+# as arguments when running $main_loader_binfile.\n+# MATCH_STR is a regular expression that output of `info function`\n+# must match.\n+proc one_jit_test {solib_binfiles_target match_str} {\n+    set count [llength $solib_binfiles_target]\n \n-proc one_jit_test {count match_str} {\n     with_test_prefix \"one_jit_test-$count\" {\n-\tglobal verbose testfile srcfile2 binfile2 binfile2_dlopen solib_binfile_target solib_binfile_test_msg\n+\tglobal verbose\n+\tglobal main_loader_binfile main_loader_srcfile\n+\tglobal main_solib_binfile main_solib_srcfile\n \n-\tclean_restart $testfile\n-\tgdb_load_shlib $binfile2\n+\tclean_restart $main_loader_binfile\n+\tgdb_load_shlib $main_solib_binfile\n \n \t# This is just to help debugging when things fail\n \tif {$verbose > 0} {\n@@ -79,23 +136,32 @@ proc one_jit_test {count match_str} {\n \t    return\n \t}\n \n-\tgdb_breakpoint [gdb_get_line_number \"break here before-dlopen\" ]\n+\tgdb_breakpoint [gdb_get_line_number \"break here before-dlopen\" \\\n+\t\t\t    $main_loader_srcfile]\n \tgdb_continue_to_breakpoint \"break here before-dlopen\"\n-\t# Poke desired values directly into inferior instead of using \"set args\"\n-\t# because \"set args\" does not work under gdbserver.\n-\tgdb_test_no_output \"set var jit_libname = \\\"$binfile2_dlopen\\\"\"\n+\tgdb_test_no_output \"set var jit_libname = \\\"$main_solib_binfile\\\"\" \\\n+\t    \"setting library name\"\n \n-\tgdb_breakpoint [gdb_get_line_number \"break here after-dlopen\" ]\n+\tgdb_breakpoint [gdb_get_line_number \"break here after-dlopen\" \\\n+\t\t\t$main_loader_srcfile]\n \tgdb_continue_to_breakpoint \"break here after-dlopen\"\n \n-\tgdb_breakpoint \"$srcfile2:[gdb_get_line_number {break here 0} $srcfile2]\"\n+\tset line [gdb_get_line_number {break here 0} $main_solib_srcfile]\n+\tgdb_breakpoint \"$main_solib_srcfile:$line\"\n \tgdb_continue_to_breakpoint \"break here 0\"\n \n-\tgdb_test_no_output \"set var argc = 2\"\n-\tgdb_test_no_output \"set var libname = \\\"$solib_binfile_target\\\"\" \"set var libname = \\\"$solib_binfile_test_msg\\\"\"\n-\tgdb_test_no_output \"set var count = $count\"\n+\t# Poke desired values directly into inferior instead of using \"set args\"\n+\t# because \"set args\" does not work under gdbserver.\n+\tgdb_test_no_output \"set var argc=[expr $count + 1]\" \"forging argc\"\n+\tgdb_test_no_output \"set var argv=fake_argv\" \"forging argv\"\n+\tfor {set i 1} {$i <= $count} {incr i} {\n+\t    set binfile_target [lindex $solib_binfiles_target [expr $i-1]]\n+\t    gdb_test_no_output \"set var argv\\[$i\\]=\\\"${binfile_target}\\\"\" \\\n+\t\t\"forging argv\\[$i\\]\"\n+\t}\n \n-\tgdb_breakpoint \"$srcfile2:[gdb_get_line_number {break here 1} $srcfile2]\"\n+\tset line [gdb_get_line_number {break here 1} $main_solib_srcfile]\n+\tgdb_breakpoint \"$main_solib_srcfile:$line\"\n \tgdb_continue_to_breakpoint \"break here 1\"\n \n \tgdb_test \"info function jit_function\" \"$match_str\"\n@@ -106,21 +172,42 @@ proc one_jit_test {count match_str} {\n \t    gdb_test \"maintenance info break\"\n \t}\n \n-\tgdb_breakpoint \"$srcfile2:[gdb_get_line_number {break here 2} $srcfile2]\"\n+\tset line [gdb_get_line_number {break here 2} $main_solib_srcfile]\n+\tgdb_breakpoint \"$main_solib_srcfile:$line\"\n \tgdb_continue_to_breakpoint \"break here 2\"\n+\n \t# All jit librares must have been unregistered\n \tgdb_test \"info function jit_function\" \\\n \t    \"All functions matching regular expression \\\"jit_function\\\":\" \\\n \t    \"info function jit_function after unregistration\"\n     }\n }\n \n-one_jit_test 1 \"${hex}  jit_function_0000\"\n-one_jit_test 2 \"${hex}  jit_function_0000\\[\\r\\n\\]+${hex}  jit_function_0001\"\n+# Compile the main code (which loads the JIT objects) as a shared library.\n+if { [compile_jit_elf_main_as_so {additional_flags=\"-DMAIN=jit_dl_main\"}] < 0 } {\n+    return\n+}\n+\n+# Compile the \"real\" main for this test.\n+if { [compile_jit_dlmain {shlib_load}] < 0 } {\n+    return\n+}\n \n-# We don't intend to load the .so as a JIT debuginfo reader, but we\n-# need some handy file name for a completion test.\n-gdb_test \\\n-    \"complete jit-reader-load [standard_output_file ${solib_testfile}.s]\" \\\n-    \"jit-reader-load $solib_binfile\" \\\n-    \"test jit-reader-load filename completion\"\n+# Compile two shared libraries to use as JIT objects.\n+set jit_solibs_target [compile_and_download_n_jit_so 2]\n+if { $jit_solibs_target == -1 } {\n+    return\n+}\n+\n+one_jit_test [lindex $jit_solibs_target 0] \"${hex}  jit_function_0001\"\n+one_jit_test $jit_solibs_target \"${hex}  jit_function_0001\\[\\r\\n\\]+${hex}  jit_function_0002\"\n+\n+foreach solib $jit_solibs_target {\n+    # We don't intend to load the .so as a JIT debuginfo reader, but we\n+    # need some handy file name for a completion test.\n+    set input [string range $solib 0 [expr { [string length $solib] - 2 }]]\n+    gdb_test \\\n+\t\"complete jit-reader-load [standard_output_file $input]\" \\\n+\t\"jit-reader-load $solib\" \\\n+\t\"test jit-reader-load filename completion [file tail $solib]\"\n+}"
    },
    {
      "sha": "98da57bd50f0c29f2ef19818ff80b33d8f0f006a",
      "filename": "gdb/testsuite/gdb.base/jit-elf.exp",
      "status": "modified",
      "additions": 94,
      "deletions": 61,
      "changes": 155,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a94694506c636f573b9194d9820fd4842b8fe51/gdb/testsuite/gdb.base/jit-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a94694506c636f573b9194d9820fd4842b8fe51/gdb/testsuite/gdb.base/jit-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf.exp?ref=9a94694506c636f573b9194d9820fd4842b8fe51",
      "patch": "@@ -23,48 +23,70 @@ if {[get_compiler_info]} {\n     return 1\n }\n \n-# Compile the testcase program and library.  BINSUFFIX is the suffix\n-# to append to the program and library filenames, to make them unique\n-# between invocations.  OPTIONS is passed to gdb_compile when\n-# compiling the program.\n-\n-proc compile_jit_test {testname binsuffix options} {\n-    global testfile srcfile binfile srcdir subdir\n-    global solib_testfile solib_srcfile solib_binfile solib_binfile_test_msg\n-    global solib_binfile_target\n-\n-    set testfile jit-elf-main\n-    set srcfile ${testfile}.c\n-    set binfile [standard_output_file $testfile$binsuffix]\n-    if { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" \\\n-\t      executable [concat debug $options]] != \"\" } {\n-\tuntested $testname\n-\treturn -1\n-    }\n+# The main code that loads and registers JIT objects.\n+set main_basename jit-elf-main\n+set main_srcfile ${srcdir}/${subdir}/${main_basename}.c\n+set main_binfile [standard_output_file ${main_basename}]\n \n-    set solib_testfile \"jit-elf-solib\"\n-    set solib_srcfile \"${srcdir}/${subdir}/${solib_testfile}.c\"\n-    set solib_binfile [standard_output_file ${solib_testfile}$binsuffix.so]\n-    set solib_binfile_test_msg \"SHLIBDIR/${solib_testfile}$binsuffix.so\"\n-\n-    # Note: compiling without debug info: the library goes through\n-    # symbol renaming by munging on its symbol table, and that\n-    # wouldn't work for .debug sections.  Also, output for \"info\n-    # function\" changes when debug info is present.\n-    if { [gdb_compile_shlib ${solib_srcfile} ${solib_binfile} {-fPIC}] != \"\" } {\n-\tuntested $testname\n-\treturn -1\n-    }\n+# The shared library that gets loaded as JIT objects.\n+set jit_solib_basename jit-elf-solib\n+set jit_solib_srcfile ${srcdir}/${subdir}/${jit_solib_basename}.c\n \n-    set solib_binfile_target [gdb_remote_download target ${solib_binfile}]\n+# Compile jit-elf-main.c as an executable.\n+#\n+# BINSUFFIX is appended to the binary name.\n+# OPTIONS is passed to gdb_compile when compiling the program.\n+#\n+# On success, return 0.\n+# On failure, return -1.\n+proc compile_jit_main {binsuffix options} {\n+    global main_binfile main_srcfile main_basename\n+\n+    set binfile ${main_binfile}${binsuffix}\n+    set options [concat $options debug]\n+\n+    if { [gdb_compile ${main_srcfile} ${binfile} \\\n+\t  executable $options] != \"\" } {\n+\t      untested \"failed to compile ${main_basename}.c\"\n+\t      return -1\n+    }\n \n     return 0\n }\n \n+# Compile jit-elf-solib.c as a shared library in multiple copies and\n+# upload them to the target.\n+#\n+# On success, return a list of target paths to the shared libraries.\n+# On failure, return -1.\n+proc compile_and_download_n_jit_so {count} {\n+    global jit_solib_basename jit_solib_srcfile\n+    set binfiles_target {}\n+\n+    for {set i 1} {$i <= $count} {incr i} {\n+\tset binfile [standard_output_file ${jit_solib_basename}.$i.so]\n+\n+\t# Note: compiling without debug info by default: some test\n+\t# do symbol renaming by munging on ELF symbol table, and that\n+\t# wouldn't work for .debug sections.  Also, output for \"info\n+\t# function\" changes when debug info is present.\n+\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} {}] != \"\" } {\n+\t    untested \"failed to compile ${jit_solib_basename}.c as a shared library\"\n+\t    return -1\n+\t}\n+\n+\tset path [gdb_remote_download target ${binfile}]\n+\tlappend binfiles_target $path\n+    }\n+\n+    return $binfiles_target\n+}\n+\n # Detach, restart GDB, and re-attach to the program.\n \n proc clean_reattach {} {\n-    global decimal gdb_prompt srcfile testfile\n+    global decimal gdb_prompt\n+    global main_binfile main_srcfile\n \n     # Get PID of test program.\n     set testpid -1\n@@ -79,11 +101,11 @@ proc clean_reattach {} {\n     gdb_test_no_output \"set var wait_for_gdb = 1\"\n     gdb_test \"detach\" \"Detaching from .*\"\n \n-    clean_restart $testfile\n+    clean_restart ${main_binfile}\n \n     set test \"attach\"\n     gdb_test_multiple \"attach $testpid\" \"$test\" {\n-\t-re \"Attaching to program.*.*main.*at .*$srcfile:.*$gdb_prompt $\" {\n+\t-re \"Attaching to program.*.*main.*at .*$main_srcfile:.*$gdb_prompt $\" {\n \t    pass \"$test\"\n \t}\n     }\n@@ -94,7 +116,9 @@ proc clean_reattach {} {\n # Continue to LOCATION in the program.  If REATTACH, detach and\n # re-attach to the program from scratch.\n proc continue_to_test_location {location reattach} {\n-    gdb_breakpoint [gdb_get_line_number $location]\n+    global main_srcfile\n+\n+    gdb_breakpoint [gdb_get_line_number $location $main_srcfile]\n     gdb_continue_to_breakpoint $location\n     if {$reattach} {\n \twith_test_prefix \"$location\" {\n@@ -103,11 +127,14 @@ proc continue_to_test_location {location reattach} {\n     }\n }\n \n-proc one_jit_test {count match_str reattach} {\n+proc one_jit_test {jit_solibs_target match_str reattach} {\n+    set count [llength $jit_solibs_target]\n+\n     with_test_prefix \"one_jit_test-$count\" {\n-\tglobal verbose testfile solib_binfile_target solib_binfile_test_msg\n+\tglobal verbose\n+\tglobal main_binfile main_srcfile\n \n-\tclean_restart $testfile\n+\tclean_restart ${main_binfile}\n \n \t# This is just to help debugging when things fail\n \tif {$verbose > 0} {\n@@ -119,14 +146,20 @@ proc one_jit_test {count match_str reattach} {\n \t    return\n \t}\n \n-\tgdb_breakpoint [gdb_get_line_number \"break here 0\"]\n-\tgdb_continue_to_breakpoint \"break here 0\"\n-\n \t# Poke desired values directly into inferior instead of using \"set args\"\n \t# because \"set args\" does not work under gdbserver.\n-\tgdb_test_no_output \"set var argc = 2\"\n-\tgdb_test_no_output \"set var libname = \\\"$solib_binfile_target\\\"\" \"set var libname = \\\"$solib_binfile_test_msg\\\"\"\n-\tgdb_test_no_output \"set var count = $count\"\n+\tincr count\n+\tgdb_test_no_output \"set var argc=$count\" \"forging argc\"\n+\tgdb_test_no_output \"set var argv=fake_argv\" \"forging argv\"\n+\tfor {set i 1} {$i < $count} {incr i} {\n+\t    set jit_solib_target [lindex $jit_solibs_target [expr $i-1]]\n+\t    gdb_test_no_output \"set var argv\\[$i\\]=\\\"${jit_solib_target}\\\"\" \\\n+\t\t\"forging argv\\[$i\\]\"\n+\t}\n+\n+\tgdb_breakpoint [gdb_get_line_number \"break here 0\" $main_srcfile]\n+\tgdb_continue_to_breakpoint \"break here 0\"\n+\n \n \tcontinue_to_test_location \"break here 1\" $reattach\n \n@@ -146,31 +179,31 @@ proc one_jit_test {count match_str reattach} {\n     }\n }\n \n-if {[compile_jit_test jit.exp \"\" {}] < 0} {\n+# Compile two shared libraries to use as JIT objects.\n+set jit_solibs_target [compile_and_download_n_jit_so 2]\n+if { $jit_solibs_target == -1 } {\n     return\n }\n-one_jit_test 1 \"${hex}  jit_function_0000\" 0\n-one_jit_test 2 \"${hex}  jit_function_0000\\[\\r\\n\\]+${hex}  jit_function_0001\" 0\n+\n+# Compile the main code (which loads the JIT objects).\n+if { [compile_jit_main \"\" {}] == 0 } {\n+    one_jit_test [lindex $jit_solibs_target 0] \"${hex}  jit_function_0001\" 0\n+    one_jit_test $jit_solibs_target \"${hex}  jit_function_0001\\[\\r\\n\\]+${hex}  jit_function_0002\" 0\n+}\n \n # Test attaching to an inferior with some JIT libraries already\n # registered.  We reuse the normal test, and detach/reattach at\n # specific interesting points.\n if {[can_spawn_for_attach]} {\n-    if {[compile_jit_test \"jit.exp attach tests\" \\\n-\t     \"-attach\" {additional_flags=-DATTACH=1}] < 0} {\n-\treturn\n-    }\n-\n-    with_test_prefix attach {\n-\tone_jit_test 2 \"${hex}  jit_function_0000\\[\\r\\n\\]+${hex}  jit_function_0001\" 1\n+    if { [compile_jit_main \"-attach\" {additional_flags=-DATTACH=1}] == 0 } {\n+\twith_test_prefix attach {\n+\t    one_jit_test $jit_solibs_target \"${hex}  jit_function_0001\\[\\r\\n\\]+${hex}  jit_function_0002\" 1\n+\t}\n     }\n }\n \n-with_test_prefix PIE {\n-    if {[compile_jit_test \"jit.exp PIE tests\" \\\n-\t     \"-pie\" {additional_flags=-fPIE ldflags=-pie}] < 0} {\n-\treturn\n+if { [compile_jit_main \"-pie\" {additional_flags=-fPIE ldflags=-pie}] == 0 } {\n+    with_test_prefix PIE {\n+\tone_jit_test [lindex $jit_solibs_target 0] \"${hex}  jit_function_0001\" 0\n     }\n-\n-    one_jit_test 1 \"${hex}  jit_function_0000\" 0\n }"
    }
  ]
}