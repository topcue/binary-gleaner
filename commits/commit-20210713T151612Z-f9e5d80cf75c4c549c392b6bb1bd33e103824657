{
  "sha": "f9e5d80cf75c4c549c392b6bb1bd33e103824657",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjllNWQ4MGNmNzVjNGM1NDljMzkyYjZiYjFiZDMzZTEwMzgyNDY1Nw==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-13T15:16:12Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-13T15:16:12Z"
    },
    "message": "arm-fbsd-nat: Use fetch_register_set and store_register_set.",
    "tree": {
      "sha": "d2845a4590896b4d1300bd0b36bbe888b9da6fa7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d2845a4590896b4d1300bd0b36bbe888b9da6fa7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f9e5d80cf75c4c549c392b6bb1bd33e103824657",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e5d80cf75c4c549c392b6bb1bd33e103824657",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f9e5d80cf75c4c549c392b6bb1bd33e103824657",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e5d80cf75c4c549c392b6bb1bd33e103824657/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "05dfb57c685d84877649dc582743e82583620af6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05dfb57c685d84877649dc582743e82583620af6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/05dfb57c685d84877649dc582743e82583620af6"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 8,
    "deletions": 73
  },
  "files": [
    {
      "sha": "f9fb8e1999a9c49d257efc50f2d38ec98e89db1f",
      "filename": "gdb/arm-fbsd-nat.c",
      "status": "modified",
      "additions": 8,
      "deletions": 73,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e5d80cf75c4c549c392b6bb1bd33e103824657/gdb/arm-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e5d80cf75c4c549c392b6bb1bd33e103824657/gdb/arm-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-fbsd-nat.c?ref=f9e5d80cf75c4c549c392b6bb1bd33e103824657",
      "patch": "@@ -25,7 +25,6 @@\n #include <machine/reg.h>\n \n #include \"fbsd-nat.h\"\n-#include \"arm-tdep.h\"\n #include \"arm-fbsd-tdep.h\"\n #include \"inf-ptrace.h\"\n \n@@ -38,56 +37,17 @@ struct arm_fbsd_nat_target : public fbsd_nat_target\n \n static arm_fbsd_nat_target the_arm_fbsd_nat_target;\n \n-/* Determine if PT_GETREGS fetches REGNUM.  */\n-\n-static bool\n-getregs_supplies (int regnum)\n-{\n-  return ((regnum >= ARM_A1_REGNUM && regnum <= ARM_PC_REGNUM)\n-\t  || regnum == ARM_PS_REGNUM);\n-}\n-\n-#ifdef PT_GETVFPREGS\n-/* Determine if PT_GETVFPREGS fetches REGNUM.  */\n-\n-static bool\n-getvfpregs_supplies (int regnum)\n-{\n-  return ((regnum >= ARM_D0_REGNUM && regnum <= ARM_D31_REGNUM)\n-\t  || regnum == ARM_FPSCR_REGNUM);\n-}\n-#endif\n-\n /* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this\n    for all registers.  */\n \n void\n arm_fbsd_nat_target::fetch_registers (struct regcache *regcache, int regnum)\n {\n-  pid_t pid = get_ptrace_pid (regcache->ptid ());\n-\n-  if (regnum == -1 || getregs_supplies (regnum))\n-    {\n-      struct reg regs;\n-\n-      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n-\tperror_with_name (_(\"Couldn't get registers\"));\n-\n-      regcache->supply_regset (&arm_fbsd_gregset, regnum, &regs,\n-\t\t\t       sizeof (regs));\n-    }\n-\n+  fetch_register_set<struct reg> (regcache, regnum, PT_GETREGS,\n+\t\t\t\t  &arm_fbsd_gregset);\n #ifdef PT_GETVFPREGS\n-  if (regnum == -1 || getvfpregs_supplies (regnum))\n-    {\n-      struct vfpreg vfpregs;\n-\n-      if (ptrace (PT_GETVFPREGS, pid, (PTRACE_TYPE_ARG3) &vfpregs, 0) == -1)\n-\tperror_with_name (_(\"Couldn't get floating point status\"));\n-\n-      regcache->supply_regset (&arm_fbsd_vfpregset, regnum, &vfpregs,\n-\t\t\t       sizeof (vfpregs));\n-    }\n+  fetch_register_set<struct vfpreg> (regcache, regnum, PT_GETVFPREGS,\n+\t\t\t\t     &arm_fbsd_vfpregset);\n #endif\n }\n \n@@ -97,36 +57,11 @@ arm_fbsd_nat_target::fetch_registers (struct regcache *regcache, int regnum)\n void\n arm_fbsd_nat_target::store_registers (struct regcache *regcache, int regnum)\n {\n-  pid_t pid = get_ptrace_pid (regcache->ptid ());\n-\n-  if (regnum == -1 || getregs_supplies (regnum))\n-    {\n-      struct reg regs;\n-\n-      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n-\tperror_with_name (_(\"Couldn't get registers\"));\n-\n-      regcache->collect_regset (&arm_fbsd_gregset, regnum, &regs,\n-\t\t\t       sizeof (regs));\n-\n-      if (ptrace (PT_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n-\tperror_with_name (_(\"Couldn't write registers\"));\n-    }\n-\n+  store_register_set<struct reg> (regcache, regnum, PT_GETREGS, PT_SETREGS,\n+\t\t\t\t  &arm_fbsd_gregset);\n #ifdef PT_GETVFPREGS\n-  if (regnum == -1 || getvfpregs_supplies (regnum))\n-    {\n-      struct vfpreg vfpregs;\n-\n-      if (ptrace (PT_GETVFPREGS, pid, (PTRACE_TYPE_ARG3) &vfpregs, 0) == -1)\n-\tperror_with_name (_(\"Couldn't get floating point status\"));\n-\n-      regcache->collect_regset (&arm_fbsd_vfpregset, regnum, &vfpregs,\n-\t\t\t\tsizeof (vfpregs));\n-\n-      if (ptrace (PT_SETVFPREGS, pid, (PTRACE_TYPE_ARG3) &vfpregs, 0) == -1)\n-\tperror_with_name (_(\"Couldn't write floating point status\"));\n-    }\n+  store_register_set<struct vfpreg> (regcache, regnum, PT_GETVFPREGS,\n+\t\t\t\t     PT_SETVFPREGS, &arm_fbsd_vfpregset);\n #endif\n }\n "
    }
  ]
}