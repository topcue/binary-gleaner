{
  "sha": "abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
  "node_id": "C_kwDOANOeidoAKGFiYmJkNGEzZTBjYTUxMTMyZTdmYjMxYTQzZjg5NmQyOTg5NGRhZTA",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-08-11T12:24:33Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-28T11:21:22Z"
    },
    "message": "gdb: use libbacktrace to create a better backtrace for fatal signals\n\nGDB recently gained the ability to print a backtrace when a fatal\nsignal is encountered.  This backtrace is produced using the backtrace\nand backtrace_symbols_fd API available in glibc.\n\nHowever, in order for this API to actually map addresses to symbol\nnames it is required that the application (GDB) be compiled with\n-rdynamic, which GDB is not by default.\n\nAs a result, the backtrace produced often looks like this:\n\n  Fatal signal: Bus error\n  ----- Backtrace -----\n  ./gdb/gdb[0x80ec00]\n  ./gdb/gdb[0x80ed56]\n  /lib64/libc.so.6(+0x3c6b0)[0x7fc2ce1936b0]\n  /lib64/libc.so.6(__poll+0x4f)[0x7fc2ce24da5f]\n  ./gdb/gdb[0x15495ba]\n  ./gdb/gdb[0x15489b8]\n  ./gdb/gdb[0x9b794d]\n  ./gdb/gdb[0x9b7a6d]\n  ./gdb/gdb[0x9b943b]\n  ./gdb/gdb[0x9b94a1]\n  ./gdb/gdb[0x4175dd]\n  /lib64/libc.so.6(__libc_start_main+0xf3)[0x7fc2ce17e1a3]\n  ./gdb/gdb[0x4174de]\n  ---------------------\n\nThis is OK if you have access to the exact same build of GDB, you can\nmanually map the addresses back to symbols, however, it is next to\nuseless if all you have is a backtrace copied into a bug report.\n\nGCC uses libbacktrace for printing a backtrace when it encounters an\nerror.  In recent commits I added this library into the binutils-gdb\nrepository, and in this commit I allow this library to be used by\nGDB.  Now (when GDB is compiled with debug information) the backtrace\nlooks like this:\n\n  ----- Backtrace -----\n  0x80ee08 gdb_internal_backtrace\n  \t../../src/gdb/event-top.c:989\n  0x80ef0b handle_fatal_signal\n  \t../../src/gdb/event-top.c:1036\n  0x7f24539dd6af ???\n  0x7f2453a97a5f ???\n  0x154976f gdb_wait_for_event\n  \t../../src/gdbsupport/event-loop.cc:613\n  0x1548b6d _Z16gdb_do_one_eventv\n  \t../../src/gdbsupport/event-loop.cc:237\n  0x9b7b02 start_event_loop\n  \t../../src/gdb/main.c:421\n  0x9b7c22 captured_command_loop\n  \t../../src/gdb/main.c:481\n  0x9b95f0 captured_main\n  \t../../src/gdb/main.c:1353\n  0x9b9656 _Z8gdb_mainP18captured_main_args\n  \t../../src/gdb/main.c:1368\n  0x4175ec main\n  \t../../src/gdb/gdb.c:32\n  ---------------------\n\nWhich seems much more useful.\n\nUse of libbacktrace is optional.  If GDB is configured with\n--disable-libbacktrace then the libbacktrace directory will not be\nbuilt, and GDB will not try to use this library.  In this case GDB\nwould try to use the old backtrace and backtrace_symbols_fd API.\n\nAll of the functions related to writing the backtrace of GDB itself\nhave been moved into the new files gdb/by-utils.{c,h}.",
    "tree": {
      "sha": "95373a55ae00731fc4a37d1f361bbd81314a7f5d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/95373a55ae00731fc4a37d1f361bbd81314a7f5d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "890026e31759ae00c6bbb7eb41b5fe89580a256f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/890026e31759ae00c6bbb7eb41b5fe89580a256f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/890026e31759ae00c6bbb7eb41b5fe89580a256f"
    }
  ],
  "stats": {
    "total": 360,
    "additions": 315,
    "deletions": 45
  },
  "files": [
    {
      "sha": "5a3bb9522792ef44cbb1042d9b9483d3cf503faf",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -248,6 +248,10 @@ GDBFLAGS =\n GNULIB_PARENT_DIR = ..\n include $(GNULIB_PARENT_DIR)/gnulib/Makefile.gnulib.inc\n \n+# For libbacktrace.\n+LIBBACKTRACE_INC=@LIBBACKTRACE_INC@\n+LIBBACKTRACE_LIB=@LIBBACKTRACE_LIB@\n+\n SUPPORT = ../gdbsupport\n LIBSUPPORT = $(SUPPORT)/libgdbsupport.a\n INCSUPPORT = -I$(srcdir)/.. -I..\n@@ -614,9 +618,9 @@ INTERNAL_CFLAGS_BASE = \\\n \t$(GLOBAL_CFLAGS) $(PROFILE_CFLAGS) \\\n \t$(GDB_CFLAGS) $(OPCODES_CFLAGS) $(READLINE_CFLAGS) $(ZLIBINC) \\\n \t$(BFD_CFLAGS) $(INCLUDE_CFLAGS) $(LIBDECNUMBER_CFLAGS) \\\n-\t$(INTL_CFLAGS) $(INCGNU) $(INCSUPPORT) $(ENABLE_CFLAGS) \\\n-\t$(INTERNAL_CPPFLAGS) $(SRCHIGH_CFLAGS) $(TOP_CFLAGS) $(PTHREAD_CFLAGS) \\\n-\t$(DEBUGINFOD_CFLAGS)\n+\t$(INTL_CFLAGS) $(INCGNU) $(INCSUPPORT) $(LIBBACKTRACE_INC) \\\n+\t$(ENABLE_CFLAGS) $(INTERNAL_CPPFLAGS) $(SRCHIGH_CFLAGS) \\\n+\t$(TOP_CFLAGS) $(PTHREAD_CFLAGS) $(DEBUGINFOD_CFLAGS)\n INTERNAL_WARN_CFLAGS = $(INTERNAL_CFLAGS_BASE) $(GDB_WARN_CFLAGS)\n INTERNAL_CFLAGS = $(INTERNAL_WARN_CFLAGS) $(GDB_WERROR_CFLAGS)\n \n@@ -637,12 +641,12 @@ INTERNAL_LDFLAGS = \\\n # LIBIBERTY appears twice on purpose.\n CLIBS = $(SIM) $(READLINE) $(OPCODES) $(LIBCTF) $(BFD) $(ZLIB) \\\n         $(LIBSUPPORT) $(INTL) $(LIBIBERTY) $(LIBDECNUMBER) \\\n-\t$(XM_CLIBS) $(GDBTKLIBS) \\\n+\t$(XM_CLIBS) $(GDBTKLIBS)  $(LIBBACKTRACE_LIB) \\\n \t@LIBS@ @GUILE_LIBS@ @PYTHON_LIBS@ \\\n \t$(LIBEXPAT) $(LIBLZMA) $(LIBBABELTRACE) $(LIBIPT) \\\n \t$(WIN32LIBS) $(LIBGNU) $(LIBGNU_EXTRA_LIBS) $(LIBICONV) \\\n \t$(LIBMPFR) $(LIBGMP) $(SRCHIGH_LIBS) $(LIBXXHASH) $(PTHREAD_LIBS) \\\n-\t$(DEBUGINFOD_LIBS)\n+\t$(DEBUGINFOD_LIBS) $(LIBBABELTRACE_LIB)\n CDEPS = $(NAT_CDEPS) $(SIM) $(BFD) $(READLINE_DEPS) $(CTF_DEPS) \\\n \t$(OPCODES) $(INTL_DEPS) $(LIBIBERTY) $(CONFIG_DEPS) $(LIBGNU) \\\n \t$(LIBSUPPORT)\n@@ -995,6 +999,7 @@ COMMON_SFILES = \\\n \tbreak-catch-syscall.c \\\n \tbreak-catch-throw.c \\\n \tbreakpoint.c \\\n+\tbt-utils.c \\\n \tbtrace.c \\\n \tbuild-id.c \\\n \tbuildsym-legacy.c \\\n@@ -1256,6 +1261,7 @@ HFILES_NO_SRCDIR = \\\n \tbreakpoint.h \\\n \tbsd-kvm.h \\\n \tbsd-uthread.h \\\n+\tbt-utils.h \\\n \tbuild-id.h \\\n \tbuildsym-legacy.h \\\n \tbuildsym.h \\"
    },
    {
      "sha": "b5e0a0ed004bd3177ab691414201d80428d012b1",
      "filename": "gdb/bt-utils.c",
      "status": "added",
      "additions": 170,
      "deletions": 0,
      "changes": 170,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/bt-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/bt-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bt-utils.c?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -0,0 +1,170 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"bt-utils.h\"\n+#include \"command.h\"\n+#include \"gdbcmd.h\"\n+#include \"top.h\"\n+#include \"cli/cli-decode.h\"\n+\n+/* See bt-utils.h.  */\n+\n+void\n+gdb_internal_backtrace_set_cmd (const char *args, int from_tty,\n+\t\t\t\tcmd_list_element *c)\n+{\n+  gdb_assert (c->type == set_cmd);\n+  gdb_assert (c->var_type == var_boolean);\n+  gdb_assert (c->var != nullptr);\n+\n+#ifndef GDB_PRINT_INTERNAL_BACKTRACE\n+  bool *var_ptr = (bool *) c->var;\n+\n+  if (*var_ptr)\n+    {\n+      *var_ptr = false;\n+      error (_(\"support for this feature is not compiled into GDB\"));\n+    }\n+#endif\n+}\n+\n+#ifdef GDB_PRINT_INTERNAL_BACKTRACE_USING_LIBBACKTRACE\n+\n+/* Callback used by libbacktrace if it encounters an error.  */\n+\n+static void\n+libbacktrace_error (void *data, const char *errmsg, int errnum)\n+{\n+  /* A negative errnum indicates no debug info was available, just\n+     skip printing a backtrace in this case.  */\n+  if (errnum < 0)\n+    return;\n+\n+  const auto sig_write = [] (const char *msg) -> void\n+  {\n+    gdb_stderr->write_async_safe (msg, strlen (msg));\n+  };\n+\n+  sig_write (\"error creating backtrace: \");\n+  sig_write (errmsg);\n+  if (errnum > 0)\n+    {\n+      char buf[20];\n+      snprintf (buf, sizeof (buf), \": %d\", errnum);\n+      buf[sizeof (buf) - 1] = '\\0';\n+\n+      sig_write (buf);\n+    }\n+  sig_write (\"\\n\");\n+}\n+\n+/* Callback used by libbacktrace to print a single stack frame.  */\n+\n+static int\n+libbacktrace_print (void *data, uintptr_t pc, const char *filename,\n+\t\t    int lineno, const char *function)\n+{\n+  const auto sig_write = [] (const char *msg) -> void\n+  {\n+    gdb_stderr->write_async_safe (msg, strlen (msg));\n+  };\n+\n+  /* Buffer to print addresses and line numbers into.  An 8-byte address\n+     with '0x' prefix and a null terminator requires 20 characters.  This\n+     also feels like it should be enough to represent line numbers in most\n+     files.  We are also careful to ensure we don't overflow this buffer.  */\n+  char buf[20];\n+\n+  snprintf (buf, sizeof (buf), \"0x%lx \", pc);\n+  buf[sizeof (buf) - 1] = '\\0';\n+  sig_write (buf);\n+  sig_write (function == nullptr ? \"???\" : function);\n+  if (filename != nullptr)\n+    {\n+      sig_write (\"\\n\\t\");\n+      sig_write (filename);\n+      sig_write (\":\");\n+      snprintf (buf, sizeof (buf), \"%d\", lineno);\n+      buf[sizeof (buf) - 1] = '\\0';\n+      sig_write (buf);\n+    }\n+  sig_write (\"\\n\");\n+\n+  return function != nullptr && strcmp (function, \"main\") == 0;\n+}\n+\n+/* Write a backtrace to GDB's stderr in an async safe manor.  This is a\n+   backtrace of GDB, not any running inferior, and is to be used when GDB\n+   crashes or hits some other error condition.  */\n+\n+static void\n+gdb_internal_backtrace_1 ()\n+{\n+  static struct backtrace_state *state = nullptr;\n+\n+  if (state == nullptr)\n+    state = backtrace_create_state (nullptr, 0, libbacktrace_error, nullptr);\n+\n+  backtrace_full (state, 0, libbacktrace_print, libbacktrace_error, nullptr);\n+}\n+\n+#elif defined GDB_PRINT_INTERNAL_BACKTRACE_USING_EXECINFO\n+\n+/* See the comment on previous version of this function.  */\n+\n+static void\n+gdb_internal_backtrace_1 ()\n+{\n+  const auto sig_write = [] (const char *msg) -> void\n+  {\n+    gdb_stderr->write_async_safe (msg, strlen (msg));\n+  };\n+\n+  /* Allow up to 25 frames of backtrace.  */\n+  void *buffer[25];\n+  int frames = backtrace (buffer, ARRAY_SIZE (buffer));\n+\n+  backtrace_symbols_fd (buffer, frames, gdb_stderr->fd ());\n+  if (frames == ARRAY_SIZE (buffer))\n+    sig_write (_(\"Backtrace might be incomplete.\\n\"));\n+}\n+\n+#endif\n+\n+/* See bt-utils.h.  */\n+\n+void\n+gdb_internal_backtrace ()\n+{\n+  if (current_ui == nullptr)\n+    return;\n+\n+  const auto sig_write = [] (const char *msg) -> void\n+  {\n+    gdb_stderr->write_async_safe (msg, strlen (msg));\n+  };\n+\n+  sig_write (_(\"----- Backtrace -----\\n\"));\n+\n+  if (gdb_stderr->fd () > -1)\n+    gdb_internal_backtrace_1 ();\n+  else\n+    sig_write (_(\"Backtrace unavailable\\n\"));\n+\n+  sig_write (\"---------------------\\n\");\n+}"
    },
    {
      "sha": "433aa23614b3c8e218382ec920430e7ebbdbdf34",
      "filename": "gdb/bt-utils.h",
      "status": "added",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/bt-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/bt-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bt-utils.h?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -0,0 +1,69 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Support for printing a backtrace when GDB hits an error.  This is not\n+   for printing backtraces of the inferior, but backtraces of GDB itself.  */\n+\n+#ifdef HAVE_LIBBACKTRACE\n+# include \"backtrace.h\"\n+# include \"backtrace-supported.h\"\n+# if BACKTRACE_SUPPORTED && (! BACKTRACE_USES_MALLOC)\n+#  define GDB_PRINT_INTERNAL_BACKTRACE\n+#  define GDB_PRINT_INTERNAL_BACKTRACE_USING_LIBBACKTRACE\n+# endif\n+#endif\n+\n+#if defined HAVE_EXECINFO_H\t\t\t\\\n+  && defined HAVE_EXECINFO_BACKTRACE\t\t\\\n+  && !defined PRINT_BACKTRACE_ON_FATAL_SIGNAL\n+# include <execinfo.h>\n+# define GDB_PRINT_INTERNAL_BACKTRACE\n+# define GDB_PRINT_INTERNAL_BACKTRACE_USING_EXECINFO\n+#endif\n+\n+/* Define GDB_PRINT_INTERNAL_BACKTRACE_INIT_ON.  This is a boolean value\n+   that can be used as an initial value for a set/show user setting, where\n+   the setting controls printing a GDB internal backtrace.\n+\n+   If backtrace printing is supported then this will have the value true,\n+   but if backtrace printing is not supported then this has the value\n+   false.  */\n+#ifdef GDB_PRINT_INTERNAL_BACKTRACE\n+# define GDB_PRINT_INTERNAL_BACKTRACE_INIT_ON true\n+#else\n+# define GDB_PRINT_INTERNAL_BACKTRACE_INIT_ON false\n+#endif\n+\n+/* Print a backtrace of the current GDB process to the current\n+   gdb_stderr.  The output is done in a signal async manor, so it is safe\n+   to call from signal handlers.  */\n+\n+extern void gdb_internal_backtrace ();\n+\n+/* A generic function that can be used as the set function for any set\n+   command that enables printing of an internal backtrace.  Command C must\n+   be a boolean set command.\n+\n+   If GDB doesn't support printing a backtrace, and the user has tried to\n+   set the variable associated with command C to true, then the associated\n+   variable will be set back to false, and an error thrown.\n+\n+   If GDB does support printing a backtrace then this function does\n+   nothing.  */\n+\n+extern void gdb_internal_backtrace_set_cmd (const char *args, int from_tty,\n+\t\t\t\t\t    cmd_list_element *c);"
    },
    {
      "sha": "c61f7a9135267da5f1356219d1621a38133bf764",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -228,6 +228,9 @@\n /* Define if you have the babeltrace library. */\n #undef HAVE_LIBBABELTRACE\n \n+/* Define if libbacktrace is being used. */\n+#undef HAVE_LIBBACKTRACE\n+\n /* Define to 1 if debuginfod is enabled. */\n #undef HAVE_LIBDEBUGINFOD\n "
    },
    {
      "sha": "7c8335f2576e5ca3a126dab42b0df03d5b1817bf",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -636,6 +636,8 @@ LIBCTF\n LTLIBBABELTRACE\n LIBBABELTRACE\n HAVE_LIBBABELTRACE\n+LIBBACKTRACE_LIB\n+LIBBACKTRACE_INC\n HAVE_NATIVE_GCORE_HOST\n NAT_GENERATED_FILES\n XM_CLIBS\n@@ -925,6 +927,7 @@ with_tcl\n with_tk\n with_x\n enable_sim\n+enable_libbacktrace\n with_babeltrace\n with_libbabeltrace_prefix\n with_libbabeltrace_type\n@@ -1601,6 +1604,8 @@ Optional Features:\n                           gcc is used\n   --enable-ubsan          enable undefined behavior sanitizer (auto/yes/no)\n   --enable-sim            link gdb with simulator\n+  --enable-libbacktrace   use libbacktrace to write a backtrace after a fatal\n+                          signal.\n   --enable-libctf         Handle .ctf type-info sections [default=yes]\n   --enable-unit-tests     Enable the inclusion of unit tests when compiling\n                           GDB\n@@ -18659,6 +18664,33 @@ _ACEOF\n \n fi\n \n+# Setup possible use of libbacktrace.\n+# Check whether --enable-libbacktrace was given.\n+if test \"${enable_libbacktrace+set}\" = set; then :\n+  enableval=$enable_libbacktrace; case \"${enableval}\" in\n+  yes)  enable_libbacktrace=yes ;;\n+  no)   enable_libbacktrace=no  ;;\n+  *)    as_fn_error $? \"bad value ${enableval} for --enable-libbacktrace option\" \"$LINENO\" 5 ;;\n+esac\n+else\n+  enable_libbacktrace=yes\n+fi\n+\n+\n+if test \"${enable_libbacktrace}\" == \"yes\"; then\n+  LIBBACKTRACE_INC=\"-I$srcdir/../libbacktrace/ -I../libbacktrace/\"\n+  LIBBACKTRACE_LIB=../libbacktrace/.libs/libbacktrace.a\n+\n+$as_echo \"#define HAVE_LIBBACKTRACE 1\" >>confdefs.h\n+\n+else\n+  LIBBACKTRACE_INC=\n+  LIBBACKTRACE_LIB=\n+fi\n+\n+\n+\n+\n # Check for babeltrace and babeltrace-ctf\n \n # Check whether --with-babeltrace was given."
    },
    {
      "sha": "0d91be59cd6159fba8c1e961bac231c48055c583",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -2131,6 +2131,29 @@ if test x\"${gdb_osabi}\" != x ; then\n \t\t       [Define to the default OS ABI for this configuration.])\n fi\n \n+# Setup possible use of libbacktrace.\n+AC_ARG_ENABLE([libbacktrace],\n+[AS_HELP_STRING([--enable-libbacktrace],\n+                [use libbacktrace to write a backtrace after a fatal signal.])],\n+[case \"${enableval}\" in\n+  yes)  enable_libbacktrace=yes ;;\n+  no)   enable_libbacktrace=no  ;;\n+  *)    AC_MSG_ERROR(bad value ${enableval} for --enable-libbacktrace option) ;;\n+esac],\n+enable_libbacktrace=yes)\n+\n+if test \"${enable_libbacktrace}\" == \"yes\"; then\n+  LIBBACKTRACE_INC=\"-I$srcdir/../libbacktrace/ -I../libbacktrace/\"\n+  LIBBACKTRACE_LIB=../libbacktrace/.libs/libbacktrace.a\n+  AC_DEFINE(HAVE_LIBBACKTRACE, 1, [Define if libbacktrace is being used.])\n+else\n+  LIBBACKTRACE_INC=\n+  LIBBACKTRACE_LIB=\n+fi\n+\n+AC_SUBST(LIBBACKTRACE_INC)\n+AC_SUBST(LIBBACKTRACE_LIB)\n+\n # Check for babeltrace and babeltrace-ctf\n AC_ARG_WITH(babeltrace,\n   AS_HELP_STRING([--with-babeltrace], [include babeltrace support (auto/yes/no)]),"
    },
    {
      "sha": "64c624ce4d746f3e60086e581ae72f7e79a66e6a",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 7,
      "deletions": 40,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abbbd4a3e0ca51132e7fb31a43f896d29894dae0/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "patch": "@@ -41,15 +41,12 @@\n #include \"gdbsupport/gdb_select.h\"\n #include \"gdbsupport/gdb-sigmask.h\"\n #include \"async-event.h\"\n+#include \"bt-utils.h\"\n \n /* readline include files.  */\n #include \"readline/readline.h\"\n #include \"readline/history.h\"\n \n-#ifdef HAVE_EXECINFO_H\n-# include <execinfo.h>\n-#endif /* HAVE_EXECINFO_H */\n-\n /* readline defines this.  */\n #undef savestring\n \n@@ -102,12 +99,7 @@ int call_stdin_event_handler_again_p;\n \n /* When true GDB will produce a minimal backtrace when a fatal signal is\n    reached (within GDB code).  */\n-static bool bt_on_fatal_signal\n-#ifdef HAVE_EXECINFO_BACKTRACE\n-  = true;\n-#else\n-  = false;\n-#endif /* HAVE_EXECINFO_BACKTRACE */\n+static bool bt_on_fatal_signal = GDB_PRINT_INTERNAL_BACKTRACE_INIT_ON;\n \n /* Implement 'maintenance show backtrace-on-fatal-signal'.  */\n \n@@ -118,20 +110,6 @@ show_bt_on_fatal_signal (struct ui_file *file, int from_tty,\n   fprintf_filtered (file, _(\"Backtrace on a fatal signal is %s.\\n\"), value);\n }\n \n-/* Implement 'maintenance set backtrace-on-fatal-signal'.  */\n-\n-static void\n-set_bt_on_fatal_signal (const char *args, int from_tty, cmd_list_element *c)\n-{\n-#ifndef HAVE_EXECINFO_BACKTRACE\n-  if (bt_on_fatal_signal)\n-    {\n-      bt_on_fatal_signal = false;\n-      error (_(\"support for this feature is not compiled into GDB\"));\n-    }\n-#endif\n-}\n-\n /* Signal handling variables.  */\n /* Each of these is a pointer to a function that the event loop will\n    invoke if the corresponding signal has received.  The real signal\n@@ -904,7 +882,7 @@ unblock_signal (int sig)\n static void ATTRIBUTE_NORETURN\n handle_fatal_signal (int sig)\n {\n-#ifdef HAVE_EXECINFO_BACKTRACE\n+#ifdef GDB_PRINT_INTERNAL_BACKTRACE\n   const auto sig_write = [] (const char *msg) -> void\n   {\n     gdb_stderr->write_async_safe (msg, strlen (msg));\n@@ -917,19 +895,8 @@ handle_fatal_signal (int sig)\n       sig_write (strsignal (sig));\n       sig_write (\"\\n\");\n \n-      /* Allow up to 25 frames of backtrace.  */\n-      void *buffer[25];\n-      int frames = backtrace (buffer, ARRAY_SIZE (buffer));\n-      sig_write (_(\"----- Backtrace -----\\n\"));\n-      if (gdb_stderr->fd () > -1)\n-\t{\n-\t  backtrace_symbols_fd (buffer, frames, gdb_stderr->fd ());\n-\t  if (frames == ARRAY_SIZE (buffer))\n-\t    sig_write (_(\"Backtrace might be incomplete.\\n\"));\n-\t}\n-      else\n-\tsig_write (_(\"Backtrace unavailable\\n\"));\n-      sig_write (\"---------------------\\n\");\n+      gdb_internal_backtrace ();\n+\n       sig_write (_(\"A fatal error internal to GDB has been detected, \"\n \t\t   \"further\\ndebugging is not possible.  GDB will now \"\n \t\t   \"terminate.\\n\\n\"));\n@@ -944,7 +911,7 @@ handle_fatal_signal (int sig)\n \n       gdb_stderr->flush ();\n     }\n-#endif /* HAVE_EXECINF_BACKTRACE */\n+#endif\n \n   /* If possible arrange for SIG to have its default behaviour (which\n      should be to terminate the current process), unblock SIG, and reraise\n@@ -1449,7 +1416,7 @@ Use \\\"on\\\" to enable, \\\"off\\\" to disable.\\n\\\n If enabled, GDB will produce a minimal backtrace if it encounters a fatal\\n\\\n signal from within GDB itself.  This is a mechanism to help diagnose\\n\\\n crashes within GDB, not a mechanism for debugging inferiors.\"),\n-\t\t\t   set_bt_on_fatal_signal,\n+\t\t\t   gdb_internal_backtrace_set_cmd,\n \t\t\t   show_bt_on_fatal_signal,\n \t\t\t   &maintenance_set_cmdlist,\n \t\t\t   &maintenance_show_cmdlist);"
    }
  ]
}