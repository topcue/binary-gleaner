{
  "sha": "f29d7f6b83f60ca8dd64ec89ea803f79324ac12f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjI5ZDdmNmI4M2Y2MGNhOGRkNjRlYzg5ZWE4MDNmNzkzMjRhYzEyZg==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-30T21:47:37Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-27T21:38:22Z"
    },
    "message": "Compute msymbol hash codes in parallel\n\nThis is for the msymbol_hash and msymbol_demangled_hash hashtables\nin objfile_per_bfd_storage. This basically computes those hash\ncodes together with the demangled symbol name in the background,\nbefore it inserts the symbols in the hash table.\n\ngdb/ChangeLog:\n\n2019-11-27  Christian Biesinger  <cbiesinger@google.com>\n\n\t* minsyms.c (add_minsym_to_hash_table): Use a previously computed\n\thash code if possible.\n\t(add_minsym_to_demangled_hash_table): Likewise.\n\t(minimal_symbol_reader::install): Compute the hash codes for msymbol\n\ton the background thread.\n\t* symtab.h (struct minimal_symbol) <hash_value, demangled_hash_value>:\n\tAdd these fields.\n\nChange-Id: Ifaa3346e9998f05743bff9e2eaad3f83b954d071",
    "tree": {
      "sha": "0327aeb93cbae0184589a04016d2c923d6e866b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0327aeb93cbae0184589a04016d2c923d6e866b2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e76b224615f88255a3fd20d613983dde6cc240b3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e76b224615f88255a3fd20d613983dde6cc240b3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e76b224615f88255a3fd20d613983dde6cc240b3"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 41,
    "deletions": 15
  },
  "files": [
    {
      "sha": "64c8ab52cf1ddfbf252e2839e4273207e461eb6a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f29d7f6b83f60ca8dd64ec89ea803f79324ac12f",
      "patch": "@@ -1,3 +1,13 @@\n+2019-11-27  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* minsyms.c (add_minsym_to_hash_table): Use a previously computed\n+\thash code if possible.\n+\t(add_minsym_to_demangled_hash_table): Likewise.\n+\t(minimal_symbol_reader::install): Compute the hash codes for msymbol\n+\ton the background thread.\n+\t* symtab.h (struct minimal_symbol) <hash_value, demangled_hash_value>:\n+\tAdd these fields.\n+\n 2019-11-27  Christian Biesinger  <cbiesinger@google.com>\n \n \t* minsyms.c (minimal_symbol_reader::install): Also compute the hash"
    },
    {
      "sha": "94240c9955e1b873bf2e5d6234f6cd87a70a56bb",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 31,
      "deletions": 15,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f29d7f6b83f60ca8dd64ec89ea803f79324ac12f/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=f29d7f6b83f60ca8dd64ec89ea803f79324ac12f",
      "patch": "@@ -141,12 +141,12 @@ msymbol_hash (const char *string)\n /* Add the minimal symbol SYM to an objfile's minsym hash table, TABLE.  */\n static void\n add_minsym_to_hash_table (struct minimal_symbol *sym,\n-\t\t\t  struct minimal_symbol **table)\n+\t\t\t  struct minimal_symbol **table,\n+\t\t\t  unsigned int hash_value)\n {\n   if (sym->hash_next == NULL)\n     {\n-      unsigned int hash\n-\t= msymbol_hash (sym->linkage_name ()) % MINIMAL_SYMBOL_HASH_SIZE;\n+      unsigned int hash = hash_value % MINIMAL_SYMBOL_HASH_SIZE;\n \n       sym->hash_next = table[hash];\n       table[hash] = sym;\n@@ -157,18 +157,16 @@ add_minsym_to_hash_table (struct minimal_symbol *sym,\n    TABLE.  */\n static void\n add_minsym_to_demangled_hash_table (struct minimal_symbol *sym,\n-\t\t\t\t    struct objfile *objfile)\n+\t\t\t\t    struct objfile *objfile,\n+\t\t\t\t    unsigned int hash_value)\n {\n   if (sym->demangled_hash_next == NULL)\n     {\n-      unsigned int hash = search_name_hash (MSYMBOL_LANGUAGE (sym),\n-\t\t\t\t\t    sym->search_name ());\n-\n       objfile->per_bfd->demangled_hash_languages.set (MSYMBOL_LANGUAGE (sym));\n \n       struct minimal_symbol **table\n \t= objfile->per_bfd->msymbol_demangled_hash;\n-      unsigned int hash_index = hash % MINIMAL_SYMBOL_HASH_SIZE;\n+      unsigned int hash_index = hash_value % MINIMAL_SYMBOL_HASH_SIZE;\n       sym->demangled_hash_next = table[hash_index];\n       table[hash_index] = sym;\n     }\n@@ -1266,30 +1264,39 @@ struct computed_hash_values\n   size_t name_length;\n   /* Hash code (using fast_hash) of the linkage_name.  */\n   hashval_t mangled_name_hash;\n+  /* The msymbol_hash of the linkage_name.  */\n+  unsigned int minsym_hash;\n+  /* The msymbol_hash of the search_name.  */\n+  unsigned int minsym_demangled_hash;\n };\n \n /* Build (or rebuild) the minimal symbol hash tables.  This is necessary\n    after compacting or sorting the table since the entries move around\n    thus causing the internal minimal_symbol pointers to become jumbled.  */\n   \n static void\n-build_minimal_symbol_hash_tables (struct objfile *objfile)\n+build_minimal_symbol_hash_tables\n+  (struct objfile *objfile,\n+   const std::vector<computed_hash_values>& hash_values)\n {\n   int i;\n   struct minimal_symbol *msym;\n \n   /* (Re)insert the actual entries.  */\n-  for ((i = objfile->per_bfd->minimal_symbol_count,\n+  int mcount = objfile->per_bfd->minimal_symbol_count;\n+  for ((i = 0,\n \tmsym = objfile->per_bfd->msymbols.get ());\n-       i > 0;\n-       i--, msym++)\n+       i < mcount;\n+       i++, msym++)\n     {\n       msym->hash_next = 0;\n-      add_minsym_to_hash_table (msym, objfile->per_bfd->msymbol_hash);\n+      add_minsym_to_hash_table (msym, objfile->per_bfd->msymbol_hash,\n+\t\t\t\thash_values[i].minsym_hash);\n \n       msym->demangled_hash_next = 0;\n       if (msym->search_name () != msym->linkage_name ())\n-\tadd_minsym_to_demangled_hash_table (msym, objfile);\n+\tadd_minsym_to_demangled_hash_table\n+\t  (msym, objfile, hash_values[i].minsym_demangled_hash);\n     }\n }\n \n@@ -1404,6 +1411,15 @@ minimal_symbol_reader::install ()\n \t\t   hash_values[idx].mangled_name_hash\n \t\t     = fast_hash (msym->name, hash_values[idx].name_length);\n \t\t }\n+\t       hash_values[idx].minsym_hash\n+\t\t = msymbol_hash (msym->linkage_name ());\n+\t       /* We only use this hash code if the search name differs\n+\t\t  from the linkage name.  See the code in\n+\t\t  build_minimal_symbol_hash_tables.  */\n+\t       if (msym->search_name () != msym->linkage_name ())\n+\t\t hash_values[idx].minsym_demangled_hash\n+\t\t   = search_name_hash (MSYMBOL_LANGUAGE (msym),\n+\t\t\t\t       msym->search_name ());\n \t     }\n \t   {\n \t     /* To limit how long we hold the lock, we only acquire it here\n@@ -1425,7 +1441,7 @@ minimal_symbol_reader::install ()\n \t   }\n \t });\n \n-      build_minimal_symbol_hash_tables (m_objfile);\n+      build_minimal_symbol_hash_tables (m_objfile, hash_values);\n     }\n }\n "
    }
  ]
}