{
  "sha": "21987b9c060033d367abc50c29f786df4c21b10c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjE5ODdiOWMwNjAwMzNkMzY3YWJjNTBjMjlmNzg2ZGY0YzIxYjEwYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-09-29T14:50:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-26T21:02:57Z"
    },
    "message": "Add RAII class for blocking gdb signals\n\nThis adds configury support and an RAII class that can be used to\ntemporarily block signals that are used by gdb.  (This class is not\nused in this patch, but it split out for easier review.)\n\nThe idea of this patch is that these signals should only be delivered\nto the main thread.  So, when creating a background thread, they are\ntemporarily blocked; the blocked state is inherited by the new thread.\n\nThe sigprocmask man page says:\n\n    The use of sigprocmask() is unspecified in a multithreaded\n    process; see pthread_sigmask(3).\n\nThis patch changes gdb to use pthread_sigmask when appropriate, by\nintroducing a convenience define.\n\nI've updated gdbserver as well, because I had to touch gdbsupport, and\nbecause the threading patches will make it link against the thread\nlibrary.\n\nI chose not to touch the NTO code, because I don't know anything about\nthat platform and because I cannot test it.\n\nFinally, this modifies an existing spot in the Guile layer to use the\nnew facility.\n\ngdb/ChangeLog\n2019-11-26  Tom Tromey  <tom@tromey.com>\n\n\t* gdbsupport/signals-state-save-restore.c (original_signal_mask):\n\tRemove comment.\n\t(save_original_signals_state, restore_original_signals_state): Use\n\tgdb_sigmask.\n\t* linux-nat.c (block_child_signals, restore_child_signals_mask)\n\t(_initialize_linux_nat): Use gdb_sigmask.\n\t* guile/guile.c (_initialize_guile): Use block_signals.\n\t* Makefile.in (HFILES_NO_SRCDIR): Add gdb-sigmask.h.\n\t* gdbsupport/gdb-sigmask.h: New file.\n\t* event-top.c (async_sigtstp_handler): Use gdb_sigmask.\n\t* cp-support.c (gdb_demangle): Use gdb_sigmask.\n\t* gdbsupport/common.m4 (GDB_AC_COMMON): Check for\n\tpthread_sigmask.\n\t* configure, config.in: Rebuild.\n\t* gdbsupport/block-signals.h: New file.\n\ngdb/gdbserver/ChangeLog\n2019-11-26  Tom Tromey  <tom@tromey.com>\n\n\t* remote-utils.c (block_unblock_async_io): Use gdb_sigmask.\n\t* linux-low.c (linux_wait_for_event_filtered, linux_async): Use\n\tgdb_sigmask.\n\t* configure, config.in: Rebuild.\n\nChange-Id: If3f37dc57dd859c226e9e4d79458a0514746e8c6",
    "tree": {
      "sha": "6071a96c314722b150c9a228478d594ed11c68b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6071a96c314722b150c9a228478d594ed11c68b0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/21987b9c060033d367abc50c29f786df4c21b10c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21987b9c060033d367abc50c29f786df4c21b10c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/21987b9c060033d367abc50c29f786df4c21b10c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21987b9c060033d367abc50c29f786df4c21b10c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e03027845ecc877621ea71bc342a30ecf2999ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e03027845ecc877621ea71bc342a30ecf2999ff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5e03027845ecc877621ea71bc342a30ecf2999ff"
    }
  ],
  "stats": {
    "total": 429,
    "additions": 391,
    "deletions": 38
  },
  "files": [
    {
      "sha": "9d4fe360b27d16d5a8800fb4d52b465099ece624",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -1,3 +1,21 @@\n+2019-11-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbsupport/signals-state-save-restore.c (original_signal_mask):\n+\tRemove comment.\n+\t(save_original_signals_state, restore_original_signals_state): Use\n+\tgdb_sigmask.\n+\t* linux-nat.c (block_child_signals, restore_child_signals_mask)\n+\t(_initialize_linux_nat): Use gdb_sigmask.\n+\t* guile/guile.c (_initialize_guile): Use block_signals.\n+\t* Makefile.in (HFILES_NO_SRCDIR): Add gdb-sigmask.h.\n+\t* gdbsupport/gdb-sigmask.h: New file.\n+\t* event-top.c (async_sigtstp_handler): Use gdb_sigmask.\n+\t* cp-support.c (gdb_demangle): Use gdb_sigmask.\n+\t* gdbsupport/common.m4 (GDB_AC_COMMON): Check for\n+\tpthread_sigmask.\n+\t* configure, config.in: Rebuild.\n+\t* gdbsupport/block-signals.h: New file.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* acinclude.m4: Include ax_pthread.m4."
    },
    {
      "sha": "8d248ae780268d183252bda16c4b6472491adb8c",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -1473,6 +1473,7 @@ HFILES_NO_SRCDIR = \\\n \tgdbsupport/fileio.h \\\n \tgdbsupport/format.h \\\n \tgdbsupport/gdb-dlfcn.h \\\n+\tgdbsupport/gdb-sigmask.h \\\n \tgdbsupport/gdb_assert.h \\\n \tgdbsupport/gdb_binary_search.h \\\n \tgdbsupport/gdb_tilde_expand.h \\"
    },
    {
      "sha": "61e63e2330033ef94cfb6a5dea752ca861ec5cbd",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -342,6 +342,9 @@\n /* Have PTHREAD_PRIO_INHERIT. */\n #undef HAVE_PTHREAD_PRIO_INHERIT\n \n+/* Define to 1 if you have the `pthread_sigmask' function. */\n+#undef HAVE_PTHREAD_SIGMASK\n+\n /* Define to 1 if you have the `ptrace64' function. */\n #undef HAVE_PTRACE64\n "
    },
    {
      "sha": "dd936d247e395a6a860df17db78efdd4f1aa9ef8",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 82,
      "deletions": 0,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -2520,6 +2520,73 @@ fi\n   as_fn_set_status $ac_retval\n \n } # ac_fn_cxx_try_link\n+\n+# ac_fn_cxx_check_func LINENO FUNC VAR\n+# ------------------------------------\n+# Tests whether FUNC exists, setting the cache variable VAR accordingly\n+ac_fn_cxx_check_func ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+/* Define $2 to an innocuous variant, in case <limits.h> declares $2.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $2 innocuous_$2\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $2 (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $2\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char $2 ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined __stub_$2 || defined __stub___$2\n+choke me\n+#endif\n+\n+int\n+main ()\n+{\n+return $2 ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_cxx_check_func\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -14263,6 +14330,21 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gdb_cv_cxx_std_thread\" >&5\n $as_echo \"$gdb_cv_cxx_std_thread\" >&6; }\n+\n+    # This check must be here, while LIBS includes any necessary\n+    # threading library.\n+    for ac_func in pthread_sigmask\n+do :\n+  ac_fn_cxx_check_func \"$LINENO\" \"pthread_sigmask\" \"ac_cv_func_pthread_sigmask\"\n+if test \"x$ac_cv_func_pthread_sigmask\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_PTHREAD_SIGMASK 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n     LIBS=\"$save_LIBS\"\n     CXXFLAGS=\"$save_CXXFLAGS\"\n   fi"
    },
    {
      "sha": "f1ddc74976d12175c1a5809b0246dca5e988ffe4",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -37,6 +37,7 @@\n #include \"gdbsupport/gdb_setjmp.h\"\n #include \"safe-ctype.h\"\n #include \"gdbsupport/selftest.h\"\n+#include \"gdbsupport/gdb-sigmask.h\"\n \n #define d_left(dc) (dc)->u.s_binary.left\n #define d_right(dc) (dc)->u.s_binary.right\n@@ -1572,7 +1573,7 @@ gdb_demangle (const char *name, int options)\n \t  sigset_t segv_sig_set;\n \t  sigemptyset (&segv_sig_set);\n \t  sigaddset (&segv_sig_set, SIGSEGV);\n-\t  sigprocmask (SIG_UNBLOCK, &segv_sig_set, NULL);\n+\t  gdb_sigmask (SIG_UNBLOCK, &segv_sig_set, NULL);\n #endif\n \n \t  if (!error_reported)"
    },
    {
      "sha": "6c6e0ff3baae9f4be672d0308f8cf924d3fc6c81",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -40,6 +40,7 @@\n #include \"gdbsupport/buffer.h\"\n #include \"ser-event.h\"\n #include \"gdb_select.h\"\n+#include \"gdbsupport/gdb-sigmask.h\"\n \n /* readline include files.  */\n #include \"readline/readline.h\"\n@@ -1127,7 +1128,7 @@ async_sigtstp_handler (gdb_client_data arg)\n     sigset_t zero;\n \n     sigemptyset (&zero);\n-    sigprocmask (SIG_SETMASK, &zero, 0);\n+    gdb_sigmask (SIG_SETMASK, &zero, 0);\n   }\n #elif HAVE_SIGSETMASK\n   sigsetmask (0);"
    },
    {
      "sha": "00b0a0df025690be0f28289f81d0744c196af2a9",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -1,3 +1,10 @@\n+2019-11-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* remote-utils.c (block_unblock_async_io): Use gdb_sigmask.\n+\t* linux-low.c (linux_wait_for_event_filtered, linux_async): Use\n+\tgdb_sigmask.\n+\t* configure, config.in: Rebuild.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* Makefile.in (PTHREAD_CFLAGS, PTHREAD_LIBS): New variables."
    },
    {
      "sha": "3027ffa1b1c1f6c086c5f258060052e05a528746",
      "filename": "gdb/gdbserver/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/config.in?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -195,6 +195,9 @@\n /* Have PTHREAD_PRIO_INHERIT. */\n #undef HAVE_PTHREAD_PRIO_INHERIT\n \n+/* Define to 1 if you have the `pthread_sigmask' function. */\n+#undef HAVE_PTHREAD_SIGMASK\n+\n /* Define if the target supports PTRACE_GETFPXREGS for extended register\n    access. */\n #undef HAVE_PTRACE_GETFPXREGS"
    },
    {
      "sha": "8d34a6c30594f4335d7c87420180ee0025caf1dc",
      "filename": "gdb/gdbserver/configure",
      "status": "modified",
      "additions": 128,
      "deletions": 0,
      "changes": 128,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/configure?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -1972,6 +1972,119 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_decl\n \n+# ac_fn_cxx_try_link LINENO\n+# -------------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded.\n+ac_fn_cxx_try_link ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  rm -f conftest.$ac_objext conftest$ac_exeext\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>conftest.err\n+  ac_status=$?\n+  if test -s conftest.err; then\n+    grep -v '^ *+' conftest.err >conftest.er1\n+    cat conftest.er1 >&5\n+    mv -f conftest.er1 conftest.err\n+  fi\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && {\n+\t test -z \"$ac_cxx_werror_flag\" ||\n+\t test ! -s conftest.err\n+       } && test -s conftest$ac_exeext && {\n+\t test \"$cross_compiling\" = yes ||\n+\t test -x conftest$ac_exeext\n+       }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+\tac_retval=1\n+fi\n+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n+  # interfere with the next link command; also delete a directory that is\n+  # left behind by Apple's compiler.  We do this before executing the actions.\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_cxx_try_link\n+\n+# ac_fn_cxx_check_func LINENO FUNC VAR\n+# ------------------------------------\n+# Tests whether FUNC exists, setting the cache variable VAR accordingly\n+ac_fn_cxx_check_func ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+/* Define $2 to an innocuous variant, in case <limits.h> declares $2.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define $2 innocuous_$2\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $2 (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef $2\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char $2 ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined __stub_$2 || defined __stub___$2\n+choke me\n+#endif\n+\n+int\n+main ()\n+{\n+return $2 ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_cxx_check_func\n+\n # ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n # --------------------------------------------\n # Tries to find the compile-time value of EXPR in a program that includes\n@@ -7609,6 +7722,21 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gdb_cv_cxx_std_thread\" >&5\n $as_echo \"$gdb_cv_cxx_std_thread\" >&6; }\n+\n+    # This check must be here, while LIBS includes any necessary\n+    # threading library.\n+    for ac_func in pthread_sigmask\n+do :\n+  ac_fn_cxx_check_func \"$LINENO\" \"pthread_sigmask\" \"ac_cv_func_pthread_sigmask\"\n+if test \"x$ac_cv_func_pthread_sigmask\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_PTHREAD_SIGMASK 1\n+_ACEOF\n+\n+fi\n+done\n+\n+\n     LIBS=\"$save_LIBS\"\n     CXXFLAGS=\"$save_CXXFLAGS\"\n   fi"
    },
    {
      "sha": "688a3954028ae40a268b4f8bf2879e034989d724",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -50,6 +50,7 @@\n #include \"gdbsupport/common-inferior.h\"\n #include \"nat/fork-inferior.h\"\n #include \"gdbsupport/environ.h\"\n+#include \"gdbsupport/gdb-sigmask.h\"\n #include \"gdbsupport/scoped_restore.h\"\n #ifndef ELFMAG0\n /* Don't include <linux/elf.h> here.  If it got included by gdb_proc_service.h\n@@ -2689,7 +2690,7 @@ linux_wait_for_event_filtered (ptid_t wait_ptid, ptid_t filter_ptid,\n   /* Make sure SIGCHLD is blocked until the sigsuspend below.  Block\n      all signals while here.  */\n   sigfillset (&block_mask);\n-  sigprocmask (SIG_BLOCK, &block_mask, &prev_mask);\n+  gdb_sigmask (SIG_BLOCK, &block_mask, &prev_mask);\n \n   /* Always pull all events out of the kernel.  We'll randomly select\n      an event LWP out of all that have events, to prevent\n@@ -2775,7 +2776,7 @@ linux_wait_for_event_filtered (ptid_t wait_ptid, ptid_t filter_ptid,\n \t{\n \t  if (debug_threads)\n \t    debug_printf (\"LLW: exit (no unwaited-for LWP)\\n\");\n-\t  sigprocmask (SIG_SETMASK, &prev_mask, NULL);\n+\t  gdb_sigmask (SIG_SETMASK, &prev_mask, NULL);\n \t  return -1;\n \t}\n \n@@ -2785,7 +2786,7 @@ linux_wait_for_event_filtered (ptid_t wait_ptid, ptid_t filter_ptid,\n \t  if (debug_threads)\n \t    debug_printf (\"WNOHANG set, no event found\\n\");\n \n-\t  sigprocmask (SIG_SETMASK, &prev_mask, NULL);\n+\t  gdb_sigmask (SIG_SETMASK, &prev_mask, NULL);\n \t  return 0;\n \t}\n \n@@ -2794,11 +2795,11 @@ linux_wait_for_event_filtered (ptid_t wait_ptid, ptid_t filter_ptid,\n \tdebug_printf (\"sigsuspend'ing\\n\");\n \n       sigsuspend (&prev_mask);\n-      sigprocmask (SIG_SETMASK, &prev_mask, NULL);\n+      gdb_sigmask (SIG_SETMASK, &prev_mask, NULL);\n       goto retry;\n     }\n \n-  sigprocmask (SIG_SETMASK, &prev_mask, NULL);\n+  gdb_sigmask (SIG_SETMASK, &prev_mask, NULL);\n \n   current_thread = event_thread;\n \n@@ -6215,15 +6216,15 @@ linux_async (int enable)\n       sigemptyset (&mask);\n       sigaddset (&mask, SIGCHLD);\n \n-      sigprocmask (SIG_BLOCK, &mask, NULL);\n+      gdb_sigmask (SIG_BLOCK, &mask, NULL);\n \n       if (enable)\n \t{\n \t  if (pipe (linux_event_pipe) == -1)\n \t    {\n \t      linux_event_pipe[0] = -1;\n \t      linux_event_pipe[1] = -1;\n-\t      sigprocmask (SIG_UNBLOCK, &mask, NULL);\n+\t      gdb_sigmask (SIG_UNBLOCK, &mask, NULL);\n \n \t      warning (\"creating event pipe failed.\");\n \t      return previous;\n@@ -6249,7 +6250,7 @@ linux_async (int enable)\n \t  linux_event_pipe[1] = -1;\n \t}\n \n-      sigprocmask (SIG_UNBLOCK, &mask, NULL);\n+      gdb_sigmask (SIG_UNBLOCK, &mask, NULL);\n     }\n \n   return previous;"
    },
    {
      "sha": "c7f97f3fbef71ed1224de7434894642f30195c4f",
      "filename": "gdb/gdbserver/remote-utils.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/remote-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbserver/remote-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/remote-utils.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -28,6 +28,7 @@\n #include \"gdbsupport/rsp-low.h\"\n #include \"gdbsupport/netstuff.h\"\n #include \"gdbsupport/filestuff.h\"\n+#include \"gdbsupport/gdb-sigmask.h\"\n #include <ctype.h>\n #if HAVE_SYS_IOCTL_H\n #include <sys/ioctl.h>\n@@ -807,7 +808,7 @@ block_unblock_async_io (int block)\n \n   sigemptyset (&sigio_set);\n   sigaddset (&sigio_set, SIGIO);\n-  sigprocmask (block ? SIG_BLOCK : SIG_UNBLOCK, &sigio_set, NULL);\n+  gdb_sigmask (block ? SIG_BLOCK : SIG_UNBLOCK, &sigio_set, NULL);\n #endif\n }\n "
    },
    {
      "sha": "3f11aba1f8f0c497980cbe35d582f4f7213ff959",
      "filename": "gdb/gdbsupport/block-signals.h",
      "status": "added",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/block-signals.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/block-signals.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/block-signals.h?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -0,0 +1,67 @@\n+/* Block signals used by gdb\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDBSUPPORT_BLOCK_SIGNALS_H\n+#define GDBSUPPORT_BLOCK_SIGNALS_H\n+\n+#include <signal.h>\n+\n+#include \"gdbsupport/gdb-sigmask.h\"\n+\n+namespace gdb\n+{\n+\n+/* This is an RAII class that temporarily blocks the signals needed by\n+   gdb.  This can be used before starting a new thread to ensure that\n+   this thread starts with the appropriate signals blocked.  */\n+class block_signals\n+{\n+public:\n+  block_signals ()\n+  {\n+#ifdef HAVE_SIGPROCMASK\n+    sigset_t mask;\n+    sigemptyset (&mask);\n+    sigaddset (&mask, SIGINT);\n+    sigaddset (&mask, SIGCHLD);\n+    sigaddset (&mask, SIGALRM);\n+    sigaddset (&mask, SIGWINCH);\n+    gdb_sigmask (SIG_BLOCK, &mask, &m_old_mask);\n+#endif\n+  }\n+\n+  ~block_signals ()\n+  {\n+#ifdef HAVE_SIGPROCMASK\n+    gdb_sigmask (SIG_SETMASK, &m_old_mask, nullptr);\n+#endif\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (block_signals);\n+\n+private:\n+\n+#ifdef HAVE_SIGPROCMASK\n+  sigset_t m_old_mask;\n+#endif\n+};\n+\n+}\n+\n+#endif /* GDBSUPPORT_BLOCK_SIGNALS_H */"
    },
    {
      "sha": "e993b20248757846cdbbbbd89740b06dae21f809",
      "filename": "gdb/gdbsupport/common.m4",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/common.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/common.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/common.m4?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -54,6 +54,11 @@ AC_DEFUN([GDB_AC_COMMON], [\n     [[std::thread t(callback);]])],\n \t\t\t\t  gdb_cv_cxx_std_thread=yes,\n \t\t\t\t  gdb_cv_cxx_std_thread=no)])\n+\n+    # This check must be here, while LIBS includes any necessary\n+    # threading library.\n+    AC_CHECK_FUNCS([pthread_sigmask])\n+\n     LIBS=\"$save_LIBS\"\n     CXXFLAGS=\"$save_CXXFLAGS\"\n   fi"
    },
    {
      "sha": "08ad9734e5b87002d3e23eba607efb71d545f8fa",
      "filename": "gdb/gdbsupport/gdb-sigmask.h",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/gdb-sigmask.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/gdb-sigmask.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/gdb-sigmask.h?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -0,0 +1,45 @@\n+/* sigprocmask wrapper for gdb\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDBSUPPORT_GDB_SIGMASK_H\n+#define GDBSUPPORT_GDB_SIGMASK_H\n+\n+#include <signal.h>\n+\n+#ifdef HAVE_SIGPROCMASK\n+\n+#ifdef HAVE_PTHREAD_SIGMASK\n+#define gdb_sigmask pthread_sigmask\n+#else\n+#define gdb_sigmask sigprocmask\n+#endif\n+\n+#else /* HAVE_SIGPROCMASK */\n+\n+/* Other code checks HAVE_SIGPROCMASK, but if there happened to be a\n+   system that only had pthread_sigmask, we could still use it with\n+   some extra changes.  */\n+#ifdef HAVE_PTHREAD_SIGMASK\n+#error pthead_sigmask available without sigprocmask - please report\n+#endif\n+\n+#endif /* HAVE_SIGPROCMASK */\n+\n+\n+#endif /* GDBSUPPORT_GDB_SIGMASK_H */"
    },
    {
      "sha": "25a8220976832c0aa9efc33e8214783c3d20c37b",
      "filename": "gdb/gdbsupport/signals-state-save-restore.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/signals-state-save-restore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/gdbsupport/signals-state-save-restore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/signals-state-save-restore.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -17,6 +17,7 @@\n \n #include \"common-defs.h\"\n #include \"signals-state-save-restore.h\"\n+#include \"gdbsupport/gdb-sigmask.h\"\n \n #include <signal.h>\n \n@@ -25,10 +26,6 @@\n #ifdef HAVE_SIGACTION\n static struct sigaction original_signal_actions[NSIG];\n \n-/* Note that we use sigprocmask without worrying about threads because\n-   the save/restore functions are called either from main, or after a\n-   fork.  In both cases, we know the calling process is single\n-   threaded.  */\n static sigset_t original_signal_mask;\n #endif\n \n@@ -41,7 +38,7 @@ save_original_signals_state (bool quiet)\n   int i;\n   int res;\n \n-  res = sigprocmask (0,  NULL, &original_signal_mask);\n+  res = gdb_sigmask (0,  NULL, &original_signal_mask);\n   if (res == -1)\n     perror_with_name ((\"sigprocmask\"));\n \n@@ -110,7 +107,7 @@ restore_original_signals_state (void)\n \tperror_with_name ((\"sigaction\"));\n     }\n \n-  res = sigprocmask (SIG_SETMASK,  &original_signal_mask, NULL);\n+  res = gdb_sigmask (SIG_SETMASK,  &original_signal_mask, NULL);\n   if (res == -1)\n     perror_with_name ((\"sigprocmask\"));\n #endif"
    },
    {
      "sha": "d745c56ec68aa07e041193aa449b9589bd1787a8",
      "filename": "gdb/guile/guile.c",
      "status": "modified",
      "additions": 10,
      "deletions": 18,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/guile/guile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/guile/guile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -36,6 +36,7 @@\n #include \"guile-internal.h\"\n #endif\n #include <signal.h>\n+#include \"gdbsupport/block-signals.h\"\n \n /* The Guile version we're using.\n    We *could* use the macros in libguile/version.h but that would preclude\n@@ -798,10 +799,6 @@ _initialize_guile (void)\n \n #if HAVE_GUILE\n   {\n-#ifdef HAVE_SIGPROCMASK\n-    sigset_t sigchld_mask, prev_mask;\n-#endif\n-\n     /* The Python support puts the C side in module \"_gdb\", leaving the Python\n        side to define module \"gdb\" which imports \"_gdb\".  There is evidently no\n        similar convention in Guile so we skip this.  */\n@@ -813,25 +810,20 @@ _initialize_guile (void)\n     scm_set_automatic_finalization_enabled (0);\n #endif\n \n-#ifdef HAVE_SIGPROCMASK\n-    /* Before we initialize Guile, block SIGCHLD.\n+    /* Before we initialize Guile, block signals needed by gdb\n+       (especially SIGCHLD).\n        This is done so that all threads created during Guile initialization\n        have SIGCHLD blocked.  PR 17247.\n        Really libgc and Guile should do this, but we need to work with\n        libgc 7.4.x.  */\n-    sigemptyset (&sigchld_mask);\n-    sigaddset (&sigchld_mask, SIGCHLD);\n-    sigprocmask (SIG_BLOCK, &sigchld_mask, &prev_mask);\n-#endif\n-\n-    /* scm_with_guile is the most portable way to initialize Guile.\n-       Plus we need to initialize the Guile support while in Guile mode\n-       (e.g., called from within a call to scm_with_guile).  */\n-    scm_with_guile (call_initialize_gdb_module, NULL);\n+    {\n+      gdb::block_signals blocker;\n \n-#ifdef HAVE_SIGPROCMASK\n-    sigprocmask (SIG_SETMASK, &prev_mask, NULL);\n-#endif\n+      /* scm_with_guile is the most portable way to initialize Guile.\n+\t Plus we need to initialize the Guile support while in Guile mode\n+\t (e.g., called from within a call to scm_with_guile).  */\n+      scm_with_guile (call_initialize_gdb_module, NULL);\n+    }\n \n     /* Set Guile's backtrace to match the \"set guile print-stack\" default.\n        [N.B. The two settings are still separate.]"
    },
    {
      "sha": "465b2acd946c9ff463c43c0783f23baa365e3c46",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21987b9c060033d367abc50c29f786df4c21b10c/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21987b9c060033d367abc50c29f786df4c21b10c/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=21987b9c060033d367abc50c29f786df4c21b10c",
      "patch": "@@ -67,6 +67,7 @@\n #include \"nat/linux-namespaces.h\"\n #include \"gdbsupport/fileio.h\"\n #include \"gdbsupport/scope-exit.h\"\n+#include \"gdbsupport/gdb-sigmask.h\"\n \n /* This comment documents high-level logic of this file.\n \n@@ -764,7 +765,7 @@ block_child_signals (sigset_t *prev_mask)\n   if (!sigismember (&blocked_mask, SIGCHLD))\n     sigaddset (&blocked_mask, SIGCHLD);\n \n-  sigprocmask (SIG_BLOCK, &blocked_mask, prev_mask);\n+  gdb_sigmask (SIG_BLOCK, &blocked_mask, prev_mask);\n }\n \n /* Restore child signals mask, previously returned by\n@@ -773,7 +774,7 @@ block_child_signals (sigset_t *prev_mask)\n static void\n restore_child_signals_mask (sigset_t *prev_mask)\n {\n-  sigprocmask (SIG_SETMASK, prev_mask, NULL);\n+  gdb_sigmask (SIG_SETMASK, prev_mask, NULL);\n }\n \n /* Mask of signals to pass directly to the inferior.  */\n@@ -4564,7 +4565,7 @@ Enables printf debugging output.\"),\n   sigaction (SIGCHLD, &sigchld_action, NULL);\n \n   /* Make sure we don't block SIGCHLD during a sigsuspend.  */\n-  sigprocmask (SIG_SETMASK, NULL, &suspend_mask);\n+  gdb_sigmask (SIG_SETMASK, NULL, &suspend_mask);\n   sigdelset (&suspend_mask, SIGCHLD);\n \n   sigemptyset (&blocked_mask);"
    }
  ]
}