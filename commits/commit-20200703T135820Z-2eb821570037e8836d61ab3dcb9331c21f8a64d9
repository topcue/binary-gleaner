{
  "sha": "2eb821570037e8836d61ab3dcb9331c21f8a64d9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmViODIxNTcwMDM3ZTg4MzZkNjFhYjNkY2I5MzMxYzIxZjhhNjRkOQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-07-03T12:34:22Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-07-03T13:58:20Z"
    },
    "message": "Remove stale -DNO_PROTOTYPES bits from gdb testsuite\n\nThe gdb.base/call-sc.exp, gdb.base/structs.exp and\ngdb.base/structs2.exp testcases still try compiling the sources with\n-DNO_PROTOTYPES, but the corresponding sources don't have any #ifdef\nNO_PROTOTYPES any longer.  Those were removed throughout years ago.\n\nOTOH, gdb.base/ovlymgr.h does check for NO_PROTOTYPES, but no .exp\nfile compiles it with -DNO_PROTOTYPES.\n\ngdb.base/reread.exp and gdb.base/varargs.exp set a 'prototypes'\nglobal, which is a stale bit left behind when the \"try-compiling\nwithout and then with -DNO_PROTOTYPES\" logic was around.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/call-sc.exp (start_scalars_test): Use\n\tprepare_for_testing and don't try compiling with -DNO_PROTOTYPES.\n\t* gdb.base/overlays.c: Remove references to PARAMS.\n\t* gdb.base/ovlymgr.h (PARAMS): Delete, and remove all references.\n\t* gdb.base/reread.exp: Don't set 'prototypes' global.\n\t* gdb.base/structs.exp (start_structs_test): Use\n\tprepare_for_testing and don't try compiling with -DNO_PROTOTYPES.\n\t* gdb.base/structs2.exp: Don't set 'prototypes' global.  Use\n\tprepare_for_testing and don't try compiling with -DNO_PROTOTYPES.\n\tDon't issue \"set width 0\".  Remove gdb_stop_suppressing_tests\n\tcall.\n\t* gdb.base/varargs.exp: Don't set 'prototypes' global.",
    "tree": {
      "sha": "47c3fc7b3beecb00174c8d0d4770589e65b71ca6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/47c3fc7b3beecb00174c8d0d4770589e65b71ca6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2eb821570037e8836d61ab3dcb9331c21f8a64d9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2eb821570037e8836d61ab3dcb9331c21f8a64d9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2eb821570037e8836d61ab3dcb9331c21f8a64d9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2eb821570037e8836d61ab3dcb9331c21f8a64d9/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9adda7af10c354a62146d917a30a2fae8df370d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9adda7af10c354a62146d917a30a2fae8df370d1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9adda7af10c354a62146d917a30a2fae8df370d1"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 27,
    "deletions": 67
  },
  "files": [
    {
      "sha": "47e4d7c509a1c458df46a72d2168034ac41d0836",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -1,3 +1,18 @@\n+2020-07-03  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/call-sc.exp (start_scalars_test): Use\n+\tprepare_for_testing and don't try compiling with -DNO_PROTOTYPES.\n+\t* gdb.base/overlays.c: Remove references to PARAMS.\n+\t* gdb.base/ovlymgr.h (PARAMS): Delete, and remove all references.\n+\t* gdb.base/reread.exp: Don't set 'prototypes' global.\n+\t* gdb.base/structs.exp (start_structs_test): Use\n+\tprepare_for_testing and don't try compiling with -DNO_PROTOTYPES.\n+\t* gdb.base/structs2.exp: Don't set 'prototypes' global.  Use\n+\tprepare_for_testing and don't try compiling with -DNO_PROTOTYPES.\n+\tDon't issue \"set width 0\".  Remove gdb_stop_suppressing_tests\n+\tcall.\n+\t* gdb.base/varargs.exp: Don't set 'prototypes' global.\n+\n 2020-07-03  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/m32rovly.c: Delete."
    },
    {
      "sha": "9544dcc40494fbe6c57e76f629f21d7e2c5f08c1",
      "filename": "gdb/testsuite/gdb.base/call-sc.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 13,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/call-sc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/call-sc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/call-sc.exp?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -55,21 +55,10 @@ proc start_scalars_test { type } {\n     set testfile \"call-sc-${type}\"\n \n     set binfile [standard_output_file ${testfile}]\n-    if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable \"${flags}\"] != \"\" } {\n-\t# built the second test case since we can't use prototypes\n-\twarning \"Prototypes not supported, rebuilding with -DNO_PROTOTYPES\"\n-\tif  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable \"${flags} additional_flags=-DNO_PROTOTYPES\"] != \"\" } {\n-\t    untested \"failed to compile\"\n-\t    return -1\n-\t}\n+    if { [prepare_for_testing \"failed to prepare\" $binfile $srcfile $flags] } {\n+\treturn -1\n     }\n \n-    # Start with a fresh gdb.\n-    gdb_exit\n-    gdb_start\n-    gdb_reinitialize_dir $srcdir/$subdir\n-    gdb_load ${binfile}\n-\n     # Make certain that the output is consistent\n     with_test_prefix \"testfile=$testfile\" {\n \tgdb_test_no_output \"set print sevenbit-strings\""
    },
    {
      "sha": "e9dc9a0b586c0687aea3f986abb03e9bb0352013",
      "filename": "gdb/testsuite/gdb.base/overlays.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/overlays.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/overlays.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/overlays.c?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -3,10 +3,10 @@\n \n #include \"ovlymgr.h\"\n \n-extern int foo PARAMS((int));\n-extern int bar PARAMS((int));\n-extern int baz PARAMS((int));\n-extern int grbx PARAMS((int));\n+extern int foo (int);\n+extern int bar (int);\n+extern int baz (int);\n+extern int grbx (int);\n \n int main ()\n {"
    },
    {
      "sha": "16335056724392608cfd8698fdac48b4571c982a",
      "filename": "gdb/testsuite/gdb.base/ovlymgr.h",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/ovlymgr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/ovlymgr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ovlymgr.h?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -2,16 +2,9 @@\n  * Sample runtime overlay manager.\n  */\n \n-#ifdef NO_PROTOTYPES\n-#define PARAMS(paramlist) ()\n-#else\n-#define PARAMS(paramlist) paramlist\n-#endif\n-\n typedef enum { FALSE, TRUE } bool;\n \n /* Entry Points: */\n \n-bool OverlayLoad   PARAMS((unsigned long ovlyno));\n-bool OverlayUnload PARAMS((unsigned long ovlyno));\n-\n+bool OverlayLoad (unsigned long ovlyno);\n+bool OverlayUnload (unsigned long ovlyno);"
    },
    {
      "sha": "f824156cc3912353241a44254723fbc04d3be562",
      "filename": "gdb/testsuite/gdb.base/reread.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/reread.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/reread.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/reread.exp?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -13,8 +13,6 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n-set prototypes 1\n-\n # Build programs in PIE mode, to reproduce PR 21555.\n foreach_with_prefix opts {\n     { \"\" \"\" }"
    },
    {
      "sha": "db258f9c7c7988771e9021082dc26f52b57afd26",
      "filename": "gdb/testsuite/gdb.base/structs.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 13,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/structs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/structs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/structs.exp?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -66,21 +66,10 @@ proc start_structs_test { types } {\n     }\n \n     set binfile [standard_output_file ${testfile}]\n-    if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable \"${flags}\"] != \"\" } {\n-\t# built the second test case since we can't use prototypes\n-\twarning \"Prototypes not supported, rebuilding with -DNO_PROTOTYPES\"\n-\tif  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable \"${flags} additional_flags=-DNO_PROTOTYPES\"] != \"\" } {\n-\t    untested \"failed to compile\"\n-\t    return -1\n-\t}\n+    if { [prepare_for_testing \"failed to prepare\" $binfile $srcfile $flags] } {\n+\treturn -1\n     }\n \n-    # Start with a fresh gdb.\n-    gdb_exit\n-    gdb_start\n-    gdb_reinitialize_dir $srcdir/$subdir\n-    gdb_load ${binfile}\n-\n     # Make certain that the output is consistent\n     with_test_prefix \"types=$types\" {\n \tgdb_test_no_output \"set print sevenbit-strings\""
    },
    {
      "sha": "8a7d9c693783dc6812f4802188c52a166b3b5cbc",
      "filename": "gdb/testsuite/gdb.base/structs2.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 24,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/structs2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/structs2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/structs2.exp?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -13,7 +13,6 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n-set prototypes 1\n standard_testfile .c\n \n # Create and source the file that provides information about the compiler\n@@ -22,30 +21,15 @@ if [get_compiler_info] {\n     return -1\n }\n \n-# build the first test case\n-if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable {debug}] != \"\" } {\n-    # built the second test case since we can't use prototypes\n-    warning \"Prototypes not supported, rebuilding with -DNO_PROTOTYPES\"\n-    if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable {debug additional_flags=-DNO_PROTOTYPES}] != \"\" } {\n-\tuntested \"failed to compile\"\n-\treturn -1\n-    }\n-    set prototypes 0\n+if { [prepare_for_testing \"failed to prepare\" $binfile $srcfile {debug}] } {\n+    return -1\n }\n \n-# Start with a fresh gdb.\n-\n-clean_restart ${binfile}\n-\n-gdb_test_no_output \"set width 0\"\n-\n if ![runto_main] then {\n     fail \"can't run to main\"\n     return 0\n }\n \n-# Ok, we're finally ready to actually do our tests.\n-\n gdb_test \"f\" \\\n     \".*bkpt = 0.*\" \\\n     \"structs2 sanity check\"\n@@ -67,9 +51,3 @@ if [test_compiler_info gcc-3-*] {\n gdb_test \"continue\" \\\n     \".*pr_char=-126.*pr_uchar=120.*pr_short=-32536.*pr_ushort=32000.*bkpt = 1.*\" \\\n     \"structs2 continue2\"\n-\n-# End of tests.\n-\n-gdb_stop_suppressing_tests\n-\n-return 0"
    },
    {
      "sha": "40dcd087a6fa62709f4939ea854a481183ad3257",
      "filename": "gdb/testsuite/gdb.base/varargs.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/varargs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eb821570037e8836d61ab3dcb9331c21f8a64d9/gdb/testsuite/gdb.base/varargs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/varargs.exp?ref=2eb821570037e8836d61ab3dcb9331c21f8a64d9",
      "patch": "@@ -29,8 +29,6 @@\n \n \n \n-set prototypes 0\n-\n standard_testfile .c\n \n if [get_compiler_info] {"
    }
  ]
}