{
  "sha": "3b6acaee895303e1800f5a9e3c20127c185a1209",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2I2YWNhZWU4OTUzMDNlMTgwMGY1YTllM2MyMDEyN2MxODVhMTIwOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-03T17:31:19Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-03T17:31:20Z"
    },
    "message": "Update more calls to add_prefix_cmd\n\nI looked at all the calls to add_prefix_cmd, and replaced them with\ncalls to add_basic_prefix_cmd or add_show_prefix_cmd when appropriate.\nThis makes gdb's command language a bit more regular.  I don't think\nthere's a significant downside.\n\nNote that this patch removes a couple of tests.  The removed ones are\ncompletely redundant.\n\ngdb/ChangeLog\n2020-05-03  Tom Tromey  <tom@tromey.com>\n\n\t* breakpoint.c (catch_command, tcatch_command): Remove.\n\t(_initialize_breakpoint): Use add_basic_prefix_cmd,\n\tadd_show_prefix_cmd.\n\t(set_breakpoint_cmd, show_breakpoint_cmd): Remove\n\t* utils.c (set_internal_problem_cmd, show_internal_problem_cmd):\n\tRemove.\n\t(add_internal_problem_command): Use add_basic_prefix_cmd,\n\tadd_show_prefix_cmd.\n\t* mips-tdep.c (set_mipsfpu_command): Remove.\n\t(_initialize_mips_tdep): Use add_basic_prefix_cmd.\n\t* dwarf2/index-cache.c (set_index_cache_command): Remove.\n\t(_initialize_index_cache): Use add_basic_prefix_cmd.\n\t* memattr.c (dummy_cmd): Remove.\n\t(_initialize_mem): Use add_basic_prefix_cmd, add_show_prefix_cmd.\n\t* tui/tui-win.c (set_tui_cmd, show_tui_cmd): Remove.\n\t(_initialize_tui_win): Use add_basic_prefix_cmd,\n\tadd_show_prefix_cmd.\n\t* cli/cli-logging.c (set_logging_command): Remove.\n\t(_initialize_cli_logging): Use add_basic_prefix_cmd,\n\tadd_show_prefix_cmd.\n\t(show_logging_command): Remove.\n\t* target.c (target_command): Remove.\n\t(add_target): Use add_basic_prefix_cmd.\n\ngdb/testsuite/ChangeLog\n2020-05-03  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.base/sepdebug.exp: Remove \"catch\" test.\n\t* gdb.base/break.exp: Remove \"catch\" test.\n\t* gdb.base/default.exp: Update expected output.",
    "tree": {
      "sha": "d4b8cfaaf780a7794aee8d33ee3cb6c43a5fa497",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d4b8cfaaf780a7794aee8d33ee3cb6c43a5fa497"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3b6acaee895303e1800f5a9e3c20127c185a1209",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b6acaee895303e1800f5a9e3c20127c185a1209",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3b6acaee895303e1800f5a9e3c20127c185a1209",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b6acaee895303e1800f5a9e3c20127c185a1209/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c69ad65744134f0c28432cc7c5204b9950f0b2c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c69ad65744134f0c28432cc7c5204b9950f0b2c7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c69ad65744134f0c28432cc7c5204b9950f0b2c7"
    }
  ],
  "stats": {
    "total": 259,
    "additions": 86,
    "deletions": 173
  },
  "files": [
    {
      "sha": "9a611ae939d93cf2dc7eb6edb2eaf0d751c4e5f5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -1,3 +1,29 @@\n+2020-05-03  Tom Tromey  <tom@tromey.com>\n+\n+\t* breakpoint.c (catch_command, tcatch_command): Remove.\n+\t(_initialize_breakpoint): Use add_basic_prefix_cmd,\n+\tadd_show_prefix_cmd.\n+\t(set_breakpoint_cmd, show_breakpoint_cmd): Remove\n+\t* utils.c (set_internal_problem_cmd, show_internal_problem_cmd):\n+\tRemove.\n+\t(add_internal_problem_command): Use add_basic_prefix_cmd,\n+\tadd_show_prefix_cmd.\n+\t* mips-tdep.c (set_mipsfpu_command): Remove.\n+\t(_initialize_mips_tdep): Use add_basic_prefix_cmd.\n+\t* dwarf2/index-cache.c (set_index_cache_command): Remove.\n+\t(_initialize_index_cache): Use add_basic_prefix_cmd.\n+\t* memattr.c (dummy_cmd): Remove.\n+\t(_initialize_mem): Use add_basic_prefix_cmd, add_show_prefix_cmd.\n+\t* tui/tui-win.c (set_tui_cmd, show_tui_cmd): Remove.\n+\t(_initialize_tui_win): Use add_basic_prefix_cmd,\n+\tadd_show_prefix_cmd.\n+\t* cli/cli-logging.c (set_logging_command): Remove.\n+\t(_initialize_cli_logging): Use add_basic_prefix_cmd,\n+\tadd_show_prefix_cmd.\n+\t(show_logging_command): Remove.\n+\t* target.c (target_command): Remove.\n+\t(add_target): Use add_basic_prefix_cmd.\n+\n 2020-05-02  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* gdbtypes.h (enum dynamic_prop_node_kind): Fix typo."
    },
    {
      "sha": "4cba77400974f4d44914fc11689f4bed62607c25",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 33,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -11214,19 +11214,8 @@ init_ada_exception_breakpoint (struct breakpoint *b,\n   b->language = language_ada;\n }\n \n-static void\n-catch_command (const char *arg, int from_tty)\n-{\n-  error (_(\"Catch requires an event name.\"));\n-}\n \f\n \n-static void\n-tcatch_command (const char *arg, int from_tty)\n-{\n-  error (_(\"Catch requires an event name.\"));\n-}\n-\n /* Compare two breakpoints and return a strcmp-like result.  */\n \n static int\n@@ -14335,16 +14324,6 @@ enable_delete_command (const char *args, int from_tty)\n      });\n }\n \f\n-static void\n-set_breakpoint_cmd (const char *args, int from_tty)\n-{\n-}\n-\n-static void\n-show_breakpoint_cmd (const char *args, int from_tty)\n-{\n-}\n-\n /* Invalidate last known value of any hardware watchpoint if\n    the memory which that value represents has been written to by\n    GDB itself.  */\n@@ -15614,15 +15593,15 @@ Convenience variable \\\"$bpnum\\\" contains the number of the last\\n\\\n breakpoint set.\"),\n \t   &maintenanceinfolist);\n \n-  add_prefix_cmd (\"catch\", class_breakpoint, catch_command, _(\"\\\n+  add_basic_prefix_cmd (\"catch\", class_breakpoint, _(\"\\\n Set catchpoints to catch events.\"),\n-\t\t  &catch_cmdlist, \"catch \",\n-\t\t  0/*allow-unknown*/, &cmdlist);\n+\t\t\t&catch_cmdlist, \"catch \",\n+\t\t\t0/*allow-unknown*/, &cmdlist);\n \n-  add_prefix_cmd (\"tcatch\", class_breakpoint, tcatch_command, _(\"\\\n+  add_basic_prefix_cmd (\"tcatch\", class_breakpoint, _(\"\\\n Set temporary catchpoints to catch events.\"),\n-\t\t  &tcatch_cmdlist, \"tcatch \",\n-\t\t  0/*allow-unknown*/, &cmdlist);\n+\t\t\t&tcatch_cmdlist, \"tcatch \",\n+\t\t\t0/*allow-unknown*/, &cmdlist);\n \n   add_catch_command (\"fork\", _(\"Catch calls to fork.\"),\n \t\t     catch_fork_command_1,\n@@ -15799,18 +15778,18 @@ Use the 'source' command in another debug session to restore them.\"),\n   c = add_com_alias (\"save-tracepoints\", \"save tracepoints\", class_trace, 0);\n   deprecate_cmd (c, \"save tracepoints\");\n \n-  add_prefix_cmd (\"breakpoint\", class_maintenance, set_breakpoint_cmd, _(\"\\\n+  add_basic_prefix_cmd (\"breakpoint\", class_maintenance, _(\"\\\n Breakpoint specific settings.\\n\\\n Configure various breakpoint-specific variables such as\\n\\\n pending breakpoint behavior.\"),\n-\t\t  &breakpoint_set_cmdlist, \"set breakpoint \",\n-\t\t  0/*allow-unknown*/, &setlist);\n-  add_prefix_cmd (\"breakpoint\", class_maintenance, show_breakpoint_cmd, _(\"\\\n+\t\t\t&breakpoint_set_cmdlist, \"set breakpoint \",\n+\t\t\t0/*allow-unknown*/, &setlist);\n+  add_show_prefix_cmd (\"breakpoint\", class_maintenance, _(\"\\\n Breakpoint specific settings.\\n\\\n Configure various breakpoint-specific variables such as\\n\\\n pending breakpoint behavior.\"),\n-\t\t  &breakpoint_show_cmdlist, \"show breakpoint \",\n-\t\t  0/*allow-unknown*/, &showlist);\n+\t\t       &breakpoint_show_cmdlist, \"show breakpoint \",\n+\t\t       0/*allow-unknown*/, &showlist);\n \n   add_setshow_auto_boolean_cmd (\"pending\", no_class,\n \t\t\t\t&pending_break_support, _(\"\\"
    },
    {
      "sha": "a58cdcec8766a831ef1d138492e9715903488e56",
      "filename": "gdb/cli/cli-logging.c",
      "status": "modified",
      "additions": 6,
      "deletions": 43,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/cli/cli-logging.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/cli/cli-logging.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-logging.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -165,55 +165,18 @@ set_logging_off (const char *args, int from_tty)\n   saved_filename = NULL;\n }\n \n-static void\n-set_logging_command (const char *args, int from_tty)\n-{\n-  printf_unfiltered (_(\"\\\"set logging\\\" lets you log output to a file.\\n\"\n-\t\t       \"Usage: set logging on [FILENAME]\\n\"\n-\t\t       \"       set logging off\\n\"\n-\t\t       \"       set logging file FILENAME\\n\"\n-\t\t       \"       set logging overwrite [on|off]\\n\"\n-\t\t       \"       set logging redirect [on|off]\\n\"));\n-}\n-\n-static void\n-show_logging_command (const char *args, int from_tty)\n-{\n-  if (saved_filename)\n-    printf_unfiltered (_(\"Currently logging to \\\"%s\\\".\\n\"), saved_filename);\n-  if (saved_filename == NULL\n-      || strcmp (logging_filename, saved_filename) != 0)\n-    printf_unfiltered (_(\"Future logs will be written to %s.\\n\"),\n-\t\t       logging_filename);\n-\n-  if (logging_overwrite)\n-    printf_unfiltered (_(\"Logs will overwrite the log file.\\n\"));\n-  else\n-    printf_unfiltered (_(\"Logs will be appended to the log file.\\n\"));\n-\n-  if (logging_redirect)\n-    printf_unfiltered (_(\"Output will be sent only to the log file.\\n\"));\n-  else\n-    printf_unfiltered (_(\"Output will be logged and displayed.\\n\"));\n-\n-  if (debug_redirect)\n-    printf_unfiltered (_(\"Debug output will be sent only to the log file.\\n\"));\n-  else\n-    printf_unfiltered (_(\"Debug output will be logged and displayed.\\n\"));\n-}\n-\n void _initialize_cli_logging ();\n void\n _initialize_cli_logging ()\n {\n   static struct cmd_list_element *set_logging_cmdlist, *show_logging_cmdlist;\n \n-  add_prefix_cmd (\"logging\", class_support, set_logging_command,\n-\t\t  _(\"Set logging options.\"), &set_logging_cmdlist,\n-\t\t  \"set logging \", 0, &setlist);\n-  add_prefix_cmd (\"logging\", class_support, show_logging_command,\n-\t\t  _(\"Show logging options.\"), &show_logging_cmdlist,\n-\t\t  \"show logging \", 0, &showlist);\n+  add_basic_prefix_cmd (\"logging\", class_support,\n+\t\t\t_(\"Set logging options.\"), &set_logging_cmdlist,\n+\t\t\t\"set logging \", 0, &setlist);\n+  add_show_prefix_cmd (\"logging\", class_support,\n+\t\t       _(\"Show logging options.\"), &show_logging_cmdlist,\n+\t\t       \"show logging \", 0, &showlist);\n   add_setshow_boolean_cmd (\"overwrite\", class_support, &logging_overwrite, _(\"\\\n Set whether logging overwrites or appends to the log file.\"), _(\"\\\n Show whether logging overwrites or appends to the log file.\"), _(\"\\"
    },
    {
      "sha": "23e938b010256dfe39557e98d33a5d91b4a16bf9",
      "filename": "gdb/dwarf2/index-cache.c",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/dwarf2/index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/dwarf2/index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -246,15 +246,6 @@ index_cache::make_index_filename (const bfd_build_id *build_id,\n   return m_dir + SLASH_STRING + build_id_str + suffix;\n }\n \n-/* \"set index-cache\" handler.  */\n-\n-static void\n-set_index_cache_command (const char *arg, int from_tty)\n-{\n-  printf_unfiltered (_(\"\\\n-Missing arguments.  See \\\"help set index-cache\\\" for help.\\n\"));\n-}\n-\n /* True when we are executing \"show index-cache\".  This is used to improve the\n    printout a little bit.  */\n static bool in_show_index_cache_command = false;\n@@ -341,9 +332,10 @@ _initialize_index_cache ()\n     warning (_(\"Couldn't determine a path for the index cache directory.\"));\n \n   /* set index-cache */\n-  add_prefix_cmd (\"index-cache\", class_files, set_index_cache_command,\n-\t\t  _(\"Set index-cache options.\"), &set_index_cache_prefix_list,\n-\t\t  \"set index-cache \", false, &setlist);\n+  add_basic_prefix_cmd (\"index-cache\", class_files,\n+\t\t\t_(\"Set index-cache options.\"),\n+\t\t\t&set_index_cache_prefix_list,\n+\t\t\t\"set index-cache \", false, &setlist);\n \n   /* show index-cache */\n   add_prefix_cmd (\"index-cache\", class_files, show_index_cache_command,"
    },
    {
      "sha": "e38bc5c33ab6720e450fe34b6ba6dac42fc86b23",
      "filename": "gdb/memattr.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/memattr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/memattr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/memattr.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -586,11 +586,6 @@ delete_mem_command (const char *args, int from_tty)\n   dont_repeat ();\n }\n \n-static void\n-dummy_cmd (const char *args, int from_tty)\n-{\n-}\n-\n static struct cmd_list_element *mem_set_cmdlist;\n static struct cmd_list_element *mem_show_cmdlist;\n \n@@ -628,14 +623,14 @@ Do \\\"info mem\\\" to see current list of IDs.\"), &deletelist);\n   add_info (\"mem\", info_mem_command,\n \t    _(\"Memory region attributes.\"));\n \n-  add_prefix_cmd (\"mem\", class_vars, dummy_cmd, _(\"\\\n+  add_basic_prefix_cmd (\"mem\", class_vars, _(\"\\\n Memory regions settings.\"),\n-\t\t  &mem_set_cmdlist, \"set mem \",\n-\t\t  0/* allow-unknown */, &setlist);\n-  add_prefix_cmd (\"mem\", class_vars, dummy_cmd, _(\"\\\n+\t\t\t&mem_set_cmdlist, \"set mem \",\n+\t\t\t0/* allow-unknown */, &setlist);\n+  add_show_prefix_cmd (\"mem\", class_vars, _(\"\\\n Memory regions settings.\"),\n-\t\t  &mem_show_cmdlist, \"show mem  \",\n-\t\t  0/* allow-unknown */, &showlist);\n+\t\t       &mem_show_cmdlist, \"show mem  \",\n+\t\t       0/* allow-unknown */, &showlist);\n \n   add_setshow_boolean_cmd (\"inaccessible-by-default\", no_class,\n \t\t\t\t  &inaccessible_by_default, _(\"\\"
    },
    {
      "sha": "e3d8581c9c9a5130d93a5d035ae499d2cf490b54",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -6916,14 +6916,6 @@ show_mipsfpu_command (const char *args, int from_tty)\n }\n \n \n-static void\n-set_mipsfpu_command (const char *args, int from_tty)\n-{\n-  printf_unfiltered (\"\\\"set mipsfpu\\\" must be followed by \\\"double\\\", \"\n-\t\t     \"\\\"single\\\",\\\"none\\\" or \\\"auto\\\".\\n\");\n-  show_mipsfpu_command (args, from_tty);\n-}\n-\n static void\n set_mipsfpu_single_command (const char *args, int from_tty)\n {\n@@ -9018,9 +9010,9 @@ and is updated automatically from ELF file flags if available.\"),\n   /* Let the user turn off floating point and set the fence post for\n      heuristic_proc_start.  */\n \n-  add_prefix_cmd (\"mipsfpu\", class_support, set_mipsfpu_command,\n-\t\t  _(\"Set use of MIPS floating-point coprocessor.\"),\n-\t\t  &mipsfpulist, \"set mipsfpu \", 0, &setlist);\n+  add_basic_prefix_cmd (\"mipsfpu\", class_support,\n+\t\t\t_(\"Set use of MIPS floating-point coprocessor.\"),\n+\t\t\t&mipsfpulist, \"set mipsfpu \", 0, &setlist);\n   add_cmd (\"single\", class_support, set_mipsfpu_single_command,\n \t   _(\"Select single-precision MIPS floating-point coprocessor.\"),\n \t   &mipsfpulist);"
    },
    {
      "sha": "6982a806e3eb427ab33b2e375d86e18876ba7009",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -168,15 +168,6 @@ show_targetdebug (struct ui_file *file, int from_tty,\n   fprintf_filtered (file, _(\"Target debugging is %s.\\n\"), value);\n }\n \n-/* The user just typed 'target' without the name of a target.  */\n-\n-static void\n-target_command (const char *arg, int from_tty)\n-{\n-  fputs_filtered (\"Argument required (target name).  Try `help target'\\n\",\n-\t\t  gdb_stdout);\n-}\n-\n int\n target_has_all_memory_1 (void)\n {\n@@ -269,13 +260,13 @@ add_target (const target_info &t, target_open_ftype *func,\n   func_slot = func;\n \n   if (targetlist == NULL)\n-    add_prefix_cmd (\"target\", class_run, target_command, _(\"\\\n+    add_basic_prefix_cmd (\"target\", class_run, _(\"\\\n Connect to a target machine or process.\\n\\\n The first argument is the type or protocol of the target machine.\\n\\\n Remaining arguments are interpreted by the target protocol.  For more\\n\\\n information on the arguments for a particular protocol, type\\n\\\n `help target ' followed by the protocol name.\"),\n-\t\t    &targetlist, \"target \", 0, &cmdlist);\n+\t\t\t  &targetlist, \"target \", 0, &cmdlist);\n   c = add_cmd (t.shortname, no_class, t.doc, &targetlist);\n   set_cmd_context (c, (void *) &t);\n   set_cmd_sfunc (c, open_target);"
    },
    {
      "sha": "2984996641f2fa84bb094e549f8e0a536ba8e08b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-03  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.base/sepdebug.exp: Remove \"catch\" test.\n+\t* gdb.base/break.exp: Remove \"catch\" test.\n+\t* gdb.base/default.exp: Update expected output.\n+\n 2020-05-02  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (supports_mpx_check_pointer_bounds): New proc."
    },
    {
      "sha": "8c7ce42d805869f040795d2ed95a8c549851a2fe",
      "filename": "gdb/testsuite/gdb.base/break.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/gdb.base/break.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/gdb.base/break.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/break.exp?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -469,10 +469,6 @@ gdb_test \"info break\" \"Num     Type.*Disp Enb Address.*What.*\\[\\r\\n\\]\n #\n if ![runto_main] then { fail \"break tests suppressed\" }\n \n-gdb_test \"catch\" \\\n-    \"Catch requires an event name.\" \\\n-    \"catch requires an event name\"\n-\n gdb_test \"catch fork\" \"Catchpoint \\[0-9\\]+ \\\\(fork\\\\)\" \\\n     \"set catch fork, never expected to trigger\"\n "
    },
    {
      "sha": "95b92c4871696332ac5a81c3f8e6b6faed648a4c",
      "filename": "gdb/testsuite/gdb.base/default.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/gdb.base/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/gdb.base/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/default.exp?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -78,7 +78,7 @@ gdb_test \"call\" \"The history is empty..*\"\n \n \n #test catch\n-gdb_test \"catch\" \"Catch requires an event name..*\"\n+gdb_test \"catch\" \"List of catch subcommands:(\\[^\\r\\n\\]*\\[\\r\\n\\])+Type \\\"help catch\\\" followed by catch subcommand name for full documentation.(\\[^\\r\\n\\]*\\[\\r\\n\\])+Command name abbreviations are allowed if unambiguous.\"\n \n #test cd\n gdb_test \"cd\" \"Working directory \\[^\\r\\n\\]*\\(\\r\\n \\\\(canonically \\[^\\r\\n\\]*\\\\)\\)?\\\\.\"\n@@ -794,7 +794,7 @@ gdb_expect {\n }\n \n #test target\n-gdb_test \"target\" \"Argument required .target name.*\"\n+gdb_test \"target\" \"List of target subcommands:(\\[^\\r\\n\\]*\\[\\r\\n\\])+Type \\\"help target\\\" followed by target subcommand name for full documentation.(\\[^\\r\\n\\]*\\[\\r\\n\\])+Command name abbreviations are allowed if unambiguous.\"\n #test tbreak\n gdb_test \"tbreak\" \"No default breakpoint address now.\"\n #test thread"
    },
    {
      "sha": "bdbfa2c98eeced0effc4057e5acc67cf6787f837",
      "filename": "gdb/testsuite/gdb.base/sepdebug.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/gdb.base/sepdebug.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/testsuite/gdb.base/sepdebug.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/sepdebug.exp?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -280,9 +280,6 @@ gdb_test \"info break\" \"Num     Type.*Disp Enb Address.*What.*\\[\\r\\n\\]\n #\n if ![runto_main] then { fail \"sepdebug tests suppressed\" }\n \n-gdb_test \"catch\" \"Catch requires an event name.*\" \\\n-    \"catch requires an event name\"\n-\n gdb_test \"catch fork\" \"Catchpoint \\[0-9\\]+ \\\\(fork\\\\)\" \\\n     \"set catch fork, never expected to trigger\"\n "
    },
    {
      "sha": "a78837fe6896d5a6508bc6dc646cc16c4fc35f4a",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 8,
      "deletions": 18,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -298,16 +298,6 @@ tui_update_variables ()\n   return need_redraw;\n }\n \n-static void\n-set_tui_cmd (const char *args, int from_tty)\n-{\n-}\n-\n-static void\n-show_tui_cmd (const char *args, int from_tty)\n-{\n-}\n-\n static struct cmd_list_element *tuilist;\n \n struct cmd_list_element **\n@@ -1004,14 +994,14 @@ _initialize_tui_win ()\n \n   /* Define the classes of commands.\n      They will appear in the help list in the reverse of this order.  */\n-  add_prefix_cmd (\"tui\", class_tui, set_tui_cmd,\n-                  _(\"TUI configuration variables.\"),\n-\t\t  &tui_setlist, \"set tui \",\n-\t\t  0 /* allow-unknown */, &setlist);\n-  add_prefix_cmd (\"tui\", class_tui, show_tui_cmd,\n-                  _(\"TUI configuration variables.\"),\n-\t\t  &tui_showlist, \"show tui \",\n-\t\t  0 /* allow-unknown */, &showlist);\n+  add_basic_prefix_cmd (\"tui\", class_tui,\n+\t\t\t_(\"TUI configuration variables.\"),\n+\t\t\t&tui_setlist, \"set tui \",\n+\t\t\t0 /* allow-unknown */, &setlist);\n+  add_show_prefix_cmd (\"tui\", class_tui,\n+\t\t       _(\"TUI configuration variables.\"),\n+\t\t       &tui_showlist, \"show tui \",\n+\t\t       0 /* allow-unknown */, &showlist);\n \n   add_com (\"refresh\", class_tui, tui_refresh_all_command,\n            _(\"Refresh the terminal display.\"));"
    },
    {
      "sha": "989b13d0e0f3882eab9e872c149116368e05c1d6",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 11,
      "deletions": 25,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b6acaee895303e1800f5a9e3c20127c185a1209/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=3b6acaee895303e1800f5a9e3c20127c185a1209",
      "patch": "@@ -469,18 +469,6 @@ demangler_warning (const char *file, int line, const char *string, ...)\n   va_end (ap);\n }\n \n-/* Dummy functions to keep add_prefix_cmd happy.  */\n-\n-static void\n-set_internal_problem_cmd (const char *args, int from_tty)\n-{\n-}\n-\n-static void\n-show_internal_problem_cmd (const char *args, int from_tty)\n-{\n-}\n-\n /* When GDB reports an internal problem (error or warning) it gives\n    the user the opportunity to quit GDB and/or create a core file of\n    the current debug session.  This function registers a few commands\n@@ -515,19 +503,17 @@ add_internal_problem_command (struct internal_problem *problem)\n   show_doc = xstrprintf (_(\"Show what GDB does when %s is detected.\"),\n \t\t\t problem->name);\n \n-  add_prefix_cmd (problem->name,\n-\t\t  class_maintenance, set_internal_problem_cmd, set_doc,\n-\t\t  set_cmd_list,\n-\t\t  concat (\"maintenance set \", problem->name, \" \",\n-\t\t\t  (char *) NULL),\n-\t\t  0/*allow-unknown*/, &maintenance_set_cmdlist);\n-\n-  add_prefix_cmd (problem->name,\n-\t\t  class_maintenance, show_internal_problem_cmd, show_doc,\n-\t\t  show_cmd_list,\n-\t\t  concat (\"maintenance show \", problem->name, \" \",\n-\t\t\t  (char *) NULL),\n-\t\t  0/*allow-unknown*/, &maintenance_show_cmdlist);\n+  add_basic_prefix_cmd (problem->name, class_maintenance, set_doc,\n+\t\t\tset_cmd_list,\n+\t\t\tconcat (\"maintenance set \", problem->name, \" \",\n+\t\t\t\t(char *) NULL),\n+\t\t\t0/*allow-unknown*/, &maintenance_set_cmdlist);\n+\n+  add_show_prefix_cmd (problem->name, class_maintenance, show_doc,\n+\t\t       show_cmd_list,\n+\t\t       concat (\"maintenance show \", problem->name, \" \",\n+\t\t\t       (char *) NULL),\n+\t\t       0/*allow-unknown*/, &maintenance_show_cmdlist);\n \n   if (problem->user_settable_should_quit)\n     {"
    }
  ]
}