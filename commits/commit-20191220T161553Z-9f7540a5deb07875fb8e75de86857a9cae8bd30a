{
  "sha": "9f7540a5deb07875fb8e75de86857a9cae8bd30a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWY3NTQwYTVkZWIwNzg3NWZiOGU3NWRlODY4NTdhOWNhZThiZDMwYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-13T00:56:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-12-20T16:15:53Z"
    },
    "message": "Use symtab_and_line when updating TUI windows\n\nThis changes a few TUI source window methods to take a symtab_and_line\nrather than separate symtab and tui_line_or_address parameters.  A\nsymtab_and_line already incorporates the same information, so this\nseemed simpler.  Also, it helps avoid the problem that the source and\ndisassembly windows need different information -- both forms are\npresent in the SAL.\n\ngdb/ChangeLog\n2019-12-20  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (struct tui_source_window_base)\n\t<set_contents, update_source_window_as_is, update_source_window>:\n\tTake a sal, not a separate symtab and tui_line_or_address.\n\t* tui/tui-winsource.c (tui_source_window_base::update_source_window)\n\t(tui_source_window_base::update_source_window_as_is): Take a sal,\n\tnot a separate symtab and tui_line_or_address.\n\t(tui_update_source_windows_with_addr)\n\t(tui_update_source_windows_with_line)\n\t(tui_source_window_base::rerender)\n\t(tui_source_window_base::refill): Update.\n\t* tui/tui-source.h (struct tui_source_window) <set_contents>: Take\n\ta sal, not a separate symtab and tui_line_or_address.\n\t* tui/tui-source.c (tui_source_window::set_contents): Take a sal,\n\tnot a separate symtab and tui_line_or_address.\n\t(tui_source_window::maybe_update): Update.\n\t* tui/tui-disasm.h (struct tui_disasm_window) <set_contents>: Take\n\ta sal, not a separate symtab and tui_line_or_address.\n\t* tui/tui-disasm.c (tui_disasm_window::set_contents): Take a sal,\n\tnot a separate symtab and tui_line_or_address.\n\t(tui_disasm_window::do_scroll_vertical)\n\t(tui_disasm_window::maybe_update): Update.\n\nChange-Id: I6974a03589930a0f910c657ef50b7f6f7397c87d",
    "tree": {
      "sha": "0e096b931c7d2ee08da1ac95d2cf24245320aa8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e096b931c7d2ee08da1ac95d2cf24245320aa8a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9f7540a5deb07875fb8e75de86857a9cae8bd30a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f7540a5deb07875fb8e75de86857a9cae8bd30a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9f7540a5deb07875fb8e75de86857a9cae8bd30a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f7540a5deb07875fb8e75de86857a9cae8bd30a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "57e4b379e96383c4c7ee0aa0bb9b81018688f47d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57e4b379e96383c4c7ee0aa0bb9b81018688f47d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/57e4b379e96383c4c7ee0aa0bb9b81018688f47d"
    }
  ],
  "stats": {
    "total": 169,
    "additions": 88,
    "deletions": 81
  },
  "files": [
    {
      "sha": "feb406be6b6ed541cddadf2c0d9d63bfe724b66f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -1,3 +1,27 @@\n+2019-12-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (struct tui_source_window_base)\n+\t<set_contents, update_source_window_as_is, update_source_window>:\n+\tTake a sal, not a separate symtab and tui_line_or_address.\n+\t* tui/tui-winsource.c (tui_source_window_base::update_source_window)\n+\t(tui_source_window_base::update_source_window_as_is): Take a sal,\n+\tnot a separate symtab and tui_line_or_address.\n+\t(tui_update_source_windows_with_addr)\n+\t(tui_update_source_windows_with_line)\n+\t(tui_source_window_base::rerender)\n+\t(tui_source_window_base::refill): Update.\n+\t* tui/tui-source.h (struct tui_source_window) <set_contents>: Take\n+\ta sal, not a separate symtab and tui_line_or_address.\n+\t* tui/tui-source.c (tui_source_window::set_contents): Take a sal,\n+\tnot a separate symtab and tui_line_or_address.\n+\t(tui_source_window::maybe_update): Update.\n+\t* tui/tui-disasm.h (struct tui_disasm_window) <set_contents>: Take\n+\ta sal, not a separate symtab and tui_line_or_address.\n+\t* tui/tui-disasm.c (tui_disasm_window::set_contents): Take a sal,\n+\tnot a separate symtab and tui_line_or_address.\n+\t(tui_disasm_window::do_scroll_vertical)\n+\t(tui_disasm_window::maybe_update): Update.\n+\n 2019-12-20  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.c (tui_source_window_base::refill): Use"
    },
    {
      "sha": "376343be6617dc9cd7821625fc5bdd41a2c10b24",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -200,8 +200,7 @@ tui_find_disassembly_address (struct gdbarch *gdbarch, CORE_ADDR pc, int from)\n /* Function to set the disassembly window's content.  */\n bool\n tui_disasm_window::set_contents (struct gdbarch *arch,\n-\t\t\t\t struct symtab *s,\n-\t\t\t\t struct tui_line_or_address line_or_addr)\n+\t\t\t\t const struct symtab_and_line &sal)\n {\n   int i;\n   int offset = horizontal_offset;\n@@ -211,8 +210,7 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n   int tab_len = tui_tab_width;\n   int insn_pos;\n \n-  gdb_assert (line_or_addr.loa == LOA_ADDRESS);\n-  CORE_ADDR pc = line_or_addr.u.addr;\n+  CORE_ADDR pc = sal.pc;\n   if (pc == 0)\n     return false;\n \n@@ -323,17 +321,17 @@ tui_disasm_window::do_scroll_vertical (int num_to_scroll)\n   if (!content.empty ())\n     {\n       CORE_ADDR pc;\n-      struct tui_line_or_address val;\n \n       pc = start_line_or_addr.u.addr;\n       if (num_to_scroll >= 0)\n \tnum_to_scroll++;\n       else\n \t--num_to_scroll;\n \n-      val.loa = LOA_ADDRESS;\n-      val.u.addr = tui_find_disassembly_address (gdbarch, pc, num_to_scroll);\n-      update_source_window_as_is (gdbarch, NULL, val);\n+      symtab_and_line sal {};\n+      sal.pspace = current_program_space;\n+      sal.pc = tui_find_disassembly_address (gdbarch, pc, num_to_scroll);\n+      update_source_window_as_is (gdbarch, sal);\n     }\n }\n \n@@ -383,7 +381,10 @@ tui_disasm_window::maybe_update (struct frame_info *fi, symtab_and_line sal)\n   a.loa = LOA_ADDRESS;\n   a.u.addr = low;\n   if (!addr_is_displayed (sal.pc))\n-    update_source_window (frame_arch, sal.symtab, a);\n+    {\n+      sal.pc = low;\n+      update_source_window (frame_arch, sal);\n+    }\n   else\n     {\n       a.u.addr = sal.pc;"
    },
    {
      "sha": "e46cf1ad77ad98bb1157964f770f7bd160be3bf0",
      "filename": "gdb/tui/tui-disasm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.h?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -56,8 +56,7 @@ struct tui_disasm_window : public tui_source_window_base\n   void do_scroll_vertical (int num_to_scroll) override;\n \n   bool set_contents (struct gdbarch *gdbarch,\n-\t\t     struct symtab *s,\n-\t\t     struct tui_line_or_address line_or_addr) override;\n+\t\t     const struct symtab_and_line &sal) override;\n \n private:\n   /* Answer whether a particular line number or address is displayed"
    },
    {
      "sha": "0728263b8c5f180fdc5b425473d80861774baf7a",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -42,11 +42,10 @@\n /* Function to display source in the source window.  */\n bool\n tui_source_window::set_contents (struct gdbarch *arch,\n-\t\t\t\t struct symtab *s, \n-\t\t\t\t struct tui_line_or_address line_or_addr)\n+\t\t\t\t const struct symtab_and_line &sal)\n {\n-  gdb_assert (line_or_addr.loa == LOA_LINE);\n-  int line_no = line_or_addr.u.line_no;\n+  struct symtab *s = sal.symtab;\n+  int line_no = sal.line;\n \n   if (s == NULL)\n     return false;\n@@ -201,14 +200,16 @@ tui_source_window::maybe_update (struct frame_info *fi, symtab_and_line sal)\n   bool source_already_displayed = (sal.symtab != 0\n \t\t\t\t   && showing_source_p (m_fullname.get ()));\n \n-  struct tui_line_or_address l;\n-\n-  l.loa = LOA_LINE;\n-  l.u.line_no = start_line;\n   if (!(source_already_displayed && line_is_displayed (sal.line)))\n-    update_source_window (get_frame_arch (fi), sal.symtab, l);\n+    {\n+      sal.line = start_line;\n+      update_source_window (get_frame_arch (fi), sal);\n+    }\n   else\n     {\n+      struct tui_line_or_address l;\n+\n+      l.loa = LOA_LINE;\n       l.u.line_no = sal.line;\n       set_is_exec_point_at (l);\n     }"
    },
    {
      "sha": "beff9bc29a32ba73ccffd5b2406c15746708f2d4",
      "filename": "gdb/tui/tui-source.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.h?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -61,8 +61,7 @@ struct tui_source_window : public tui_source_window_base\n   void do_scroll_vertical (int num_to_scroll) override;\n \n   bool set_contents (struct gdbarch *gdbarch,\n-\t\t     struct symtab *s,\n-\t\t     struct tui_line_or_address line_or_addr) override;\n+\t\t     const struct symtab_and_line &sal) override;\n \n private:\n "
    },
    {
      "sha": "cad7deab804e7fd9824a4b89511454d47976276a",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 39,
      "deletions": 53,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -167,11 +167,10 @@ tui_source_window_base::style_changed ()\n void\n tui_source_window_base::update_source_window\n   (struct gdbarch *gdbarch,\n-   struct symtab *s,\n-   struct tui_line_or_address line_or_addr)\n+   const struct symtab_and_line &sal)\n {\n   horizontal_offset = 0;\n-  update_source_window_as_is (gdbarch, s, line_or_addr);\n+  update_source_window_as_is (gdbarch, sal);\n }\n \n \n@@ -180,10 +179,9 @@ tui_source_window_base::update_source_window\n void\n tui_source_window_base::update_source_window_as_is\n   (struct gdbarch *gdbarch,\n-   struct symtab *s,\n-   struct tui_line_or_address line_or_addr)\n+   const struct symtab_and_line &sal)\n {\n-  bool ret = set_contents (gdbarch, s, line_or_addr);\n+  bool ret = set_contents (gdbarch, sal);\n \n   if (!ret)\n     erase_source_content ();\n@@ -194,12 +192,10 @@ tui_source_window_base::update_source_window_as_is\n       update_exec_info ();\n       if (type == SRC_WIN)\n \t{\n-\t  symtab_and_line sal;\n+\t  symtab_and_line new_sal = sal;\n \n-\t  sal.line = line_or_addr.u.line_no + (content.size () - 2);\n-\t  sal.symtab = s;\n-\t  sal.pspace = SYMTAB_PSPACE (s);\n-\t  set_current_source_symtab_and_line (sal);\n+\t  new_sal.line = sal.line + (content.size () - 2);\n+\t  set_current_source_symtab_and_line (new_sal);\n \t}\n     }\n }\n@@ -213,21 +209,12 @@ tui_update_source_windows_with_addr (struct gdbarch *gdbarch, CORE_ADDR addr)\n   if (addr != 0)\n     {\n       struct symtab_and_line sal = find_pc_line (addr, 0);\n-      struct tui_line_or_address l;\n       \n       if (TUI_DISASM_WIN != nullptr)\n-\t{\n-\t  l.loa = LOA_ADDRESS;\n-\t  l.u.addr = addr;\n-\t  TUI_DISASM_WIN->update_source_window (gdbarch, sal.symtab, l);\n-\t}\n+\tTUI_DISASM_WIN->update_source_window (gdbarch, sal);\n \n       if (TUI_SRC_WIN != nullptr)\n-\t{\n-\t  l.loa = LOA_LINE;\n-\t  l.u.line_no = sal.line;\n-\t  TUI_SRC_WIN->update_source_window (gdbarch, sal.symtab, l);\n-\t}\n+\tTUI_SRC_WIN->update_source_window (gdbarch, sal);\n     }\n   else\n     {\n@@ -243,11 +230,15 @@ tui_update_source_windows_with_line (struct symtab *s, int line)\n {\n   struct gdbarch *gdbarch;\n   CORE_ADDR pc;\n-  struct tui_line_or_address l;\n+  struct symtab_and_line sal;\n \n   if (!s)\n     return;\n \n+  sal.pspace = current_program_space;\n+  sal.symtab = s;\n+  sal.line = line;\n+\n   gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n \n   switch (tui_current_layout ())\n@@ -258,16 +249,11 @@ tui_update_source_windows_with_line (struct symtab *s, int line)\n       tui_update_source_windows_with_addr (gdbarch, pc);\n       break;\n     default:\n-      l.loa = LOA_LINE;\n-      l.u.line_no = line;\n-      TUI_SRC_WIN->update_source_window (gdbarch, s, l);\n+      find_line_pc (s, line, &pc);\n+      sal.pc = pc;\n+      TUI_SRC_WIN->update_source_window (gdbarch, sal);\n       if (tui_current_layout () == SRC_DISASSEM_COMMAND)\n-\t{\n-\t  find_line_pc (s, line, &pc);\n-\t  l.loa = LOA_ADDRESS;\n-\t  l.u.addr = pc;\n-\t  TUI_DISASM_WIN->update_source_window (gdbarch, s, l);\n-\t}\n+\tTUI_DISASM_WIN->update_source_window (gdbarch, sal);\n       break;\n     }\n }\n@@ -366,33 +352,26 @@ tui_source_window_base::rerender ()\n {\n   if (!content.empty ())\n     {\n-      struct tui_line_or_address line_or_addr;\n       struct symtab_and_line cursal\n \t= get_current_source_symtab_and_line ();\n \n-      line_or_addr = start_line_or_addr;\n-      update_source_window (gdbarch, cursal.symtab, line_or_addr);\n+      if (start_line_or_addr.loa == LOA_LINE)\n+\tcursal.line = start_line_or_addr.u.line_no;\n+      else\n+\tcursal.pc = start_line_or_addr.u.addr;\n+      update_source_window (gdbarch, cursal);\n     }\n   else if (deprecated_safe_get_selected_frame () != NULL)\n     {\n-      struct tui_line_or_address line;\n       struct symtab_and_line cursal\n \t= get_current_source_symtab_and_line ();\n       struct frame_info *frame = deprecated_safe_get_selected_frame ();\n       struct gdbarch *gdbarch = get_frame_arch (frame);\n \n       struct symtab *s = find_pc_line_symtab (get_frame_pc (frame));\n-      if (type == SRC_WIN)\n-\t{\n-\t  line.loa = LOA_LINE;\n-\t  line.u.line_no = cursal.line;\n-\t}\n-      else\n-\t{\n-\t  line.loa = LOA_ADDRESS;\n-\t  find_line_pc (s, cursal.line, &line.u.addr);\n-\t}\n-      update_source_window (gdbarch, s, line);\n+      if (type != SRC_WIN)\n+\tfind_line_pc (s, cursal.line, &cursal.pc);\n+      update_source_window (gdbarch, cursal);\n     }\n   else\n     erase_source_content ();\n@@ -403,17 +382,24 @@ tui_source_window_base::rerender ()\n void\n tui_source_window_base::refill ()\n {\n-  symtab *s = nullptr;\n+  symtab_and_line sal {};\n \n   if (type == SRC_WIN)\n     {\n-      symtab_and_line cursal = get_current_source_symtab_and_line ();\n-      s = (cursal.symtab == NULL\n-\t   ? find_pc_line_symtab (get_frame_pc (get_selected_frame (NULL)))\n-\t   : cursal.symtab);\n+      sal = get_current_source_symtab_and_line ();\n+      if (sal.symtab == NULL)\n+\tsal = find_pc_line (get_frame_pc (get_selected_frame (NULL)), 0);\n     }\n \n-  update_source_window_as_is (gdbarch, s, start_line_or_addr);\n+  if (sal.pspace == nullptr)\n+    sal.pspace = current_program_space;\n+\n+  if (start_line_or_addr.loa == LOA_LINE)\n+    sal.line = start_line_or_addr.u.line_no;\n+  else\n+    sal.pc = start_line_or_addr.u.addr;\n+\n+  update_source_window_as_is (gdbarch, sal);\n }\n \n /* Scroll the source forward or backward horizontally.  */"
    },
    {
      "sha": "dde56a7ac24858a09acd82fc2ae4c8f4183d9fce",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f7540a5deb07875fb8e75de86857a9cae8bd30a/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=9f7540a5deb07875fb8e75de86857a9cae8bd30a",
      "patch": "@@ -88,8 +88,7 @@ struct tui_source_window_base : public tui_win_info\n   void rerender () override;\n \n   virtual bool set_contents (struct gdbarch *gdbarch,\n-\t\t\t     struct symtab *s,\n-\t\t\t     struct tui_line_or_address line_or_addr) = 0;\n+\t\t\t     const struct symtab_and_line &sal) = 0;\n \n public:\n \n@@ -111,11 +110,9 @@ struct tui_source_window_base : public tui_win_info\n   virtual void maybe_update (struct frame_info *fi, symtab_and_line sal) = 0;\n \n   void update_source_window_as_is  (struct gdbarch *gdbarch,\n-\t\t\t\t    struct symtab *s,\n-\t\t\t\t    struct tui_line_or_address line_or_addr);\n+\t\t\t\t    const struct symtab_and_line &sal);\n   void update_source_window (struct gdbarch *gdbarch,\n-\t\t\t     struct symtab *s,\n-\t\t\t     struct tui_line_or_address line_or_addr);\n+\t\t\t     const struct symtab_and_line &sal);\n \n   /* Scan the source window and the breakpoints to update the\n      break_mode information for each line.  Returns true if something"
    }
  ]
}