{
  "sha": "432b5c40220d80d539284f0ee8f6d081d39f0578",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDMyYjVjNDAyMjBkODBkNTM5Mjg0ZjBlZThmNmQwODFkMzlmMDU3OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T19:57:25Z"
    },
    "message": "Make some tui_source_window_base members \"protected\"\n\nThis renames a few members of tui_source_window_base, and makes them\n\"protected\".\n\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-layout.c (extract_display_start_addr): Rewrite.\n\t* tui/tui-disasm.h (struct tui_disasm_window)\n\t<display_start_addr>: Declare.\n\t* tui/tui-source.h (struct tui_source_window)\n\t<display_start_addr>: Declare.\n\t* tui/tui-winsource.h (struct tui_source_window_base)\n\t<show_source_line, display_start_addr>: New methods.\n\t<m_horizontal_offset, m_start_line_or_addr, m_gdbarch, m_content>:\n\tRename and move to protected section.\n\t* tui/tui-winsource.c (tui_source_window_base::update_source_window)\n\t(tui_source_window_base::do_erase_source_content): Update.\n\t(tui_source_window_base::show_source_line): Now a method.\n\t(tui_source_window_base::show_source_content)\n\t(tui_source_window_base::tui_source_window_base)\n\t(tui_source_window_base::rerender)\n\t(tui_source_window_base::refill)\n\t(tui_source_window_base::do_scroll_horizontal)\n\t(tui_source_window_base::set_is_exec_point_at)\n\t(tui_source_window_base::update_breakpoint_info)\n\t(tui_source_window_base::update_exec_info): Update.\n\t* tui/tui-source.c (tui_source_window::set_contents)\n\t(tui_source_window::showing_source_p)\n\t(tui_source_window::do_scroll_vertical)\n\t(tui_source_window::location_matches_p)\n\t(tui_source_window::line_is_displayed): Update.\n\t(tui_source_window::display_start_addr): New method.\n\t* tui/tui-disasm.c (tui_disasm_window::set_contents)\n\t(tui_disasm_window::do_scroll_vertical)\n\t(tui_disasm_window::location_matches_p): Update.\n\t(tui_disasm_window::display_start_addr): New method.\n\nChange-Id: I74d72b9da5f458664427db643a108634690c6e19",
    "tree": {
      "sha": "31e9ee9a0c8d1536ee566ce46291adbfd37b32d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31e9ee9a0c8d1536ee566ce46291adbfd37b32d4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/432b5c40220d80d539284f0ee8f6d081d39f0578",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/432b5c40220d80d539284f0ee8f6d081d39f0578",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/432b5c40220d80d539284f0ee8f6d081d39f0578",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/432b5c40220d80d539284f0ee8f6d081d39f0578/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/01b1af321f804ef6dfd40d3054c8757f31096ea8"
    }
  ],
  "stats": {
    "total": 251,
    "additions": 151,
    "deletions": 100
  },
  "files": [
    {
      "sha": "a644ea78398b60ae079f3d38c4b52e152f6f8413",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -1,3 +1,36 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-layout.c (extract_display_start_addr): Rewrite.\n+\t* tui/tui-disasm.h (struct tui_disasm_window)\n+\t<display_start_addr>: Declare.\n+\t* tui/tui-source.h (struct tui_source_window)\n+\t<display_start_addr>: Declare.\n+\t* tui/tui-winsource.h (struct tui_source_window_base)\n+\t<show_source_line, display_start_addr>: New methods.\n+\t<m_horizontal_offset, m_start_line_or_addr, m_gdbarch, m_content>:\n+\tRename and move to protected section.\n+\t* tui/tui-winsource.c (tui_source_window_base::update_source_window)\n+\t(tui_source_window_base::do_erase_source_content): Update.\n+\t(tui_source_window_base::show_source_line): Now a method.\n+\t(tui_source_window_base::show_source_content)\n+\t(tui_source_window_base::tui_source_window_base)\n+\t(tui_source_window_base::rerender)\n+\t(tui_source_window_base::refill)\n+\t(tui_source_window_base::do_scroll_horizontal)\n+\t(tui_source_window_base::set_is_exec_point_at)\n+\t(tui_source_window_base::update_breakpoint_info)\n+\t(tui_source_window_base::update_exec_info): Update.\n+\t* tui/tui-source.c (tui_source_window::set_contents)\n+\t(tui_source_window::showing_source_p)\n+\t(tui_source_window::do_scroll_vertical)\n+\t(tui_source_window::location_matches_p)\n+\t(tui_source_window::line_is_displayed): Update.\n+\t(tui_source_window::display_start_addr): New method.\n+\t* tui/tui-disasm.c (tui_disasm_window::set_contents)\n+\t(tui_disasm_window::do_scroll_vertical)\n+\t(tui_disasm_window::location_matches_p): Update.\n+\t(tui_disasm_window::display_start_addr): New method.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* NEWS: Add entry for gdb.register_window_type."
    },
    {
      "sha": "d684b02fd12efa7c331ea0d1c987b462c0c261c3",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 25,
      "deletions": 17,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -318,7 +318,7 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \t\t\t\t const struct symtab_and_line &sal)\n {\n   int i;\n-  int offset = horizontal_offset;\n+  int offset = m_horizontal_offset;\n   int max_lines, line_width;\n   CORE_ADDR cur_pc;\n   struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n@@ -329,9 +329,9 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n   if (pc == 0)\n     return false;\n \n-  gdbarch = arch;\n-  start_line_or_addr.loa = LOA_ADDRESS;\n-  start_line_or_addr.u.addr = pc;\n+  m_gdbarch = arch;\n+  m_start_line_or_addr.loa = LOA_ADDRESS;\n+  m_start_line_or_addr.u.addr = pc;\n   cur_pc = locator->addr;\n \n   /* Window size, excluding highlight box.  */\n@@ -341,16 +341,16 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n   /* Get temporary table that will hold all strings (addr & insn).  */\n   std::vector<tui_asm_line> asm_lines;\n   size_t addr_size = 0;\n-  tui_disassemble (gdbarch, asm_lines, pc, max_lines, &addr_size);\n+  tui_disassemble (m_gdbarch, asm_lines, pc, max_lines, &addr_size);\n \n   /* Align instructions to the same column.  */\n   insn_pos = (1 + (addr_size / tab_len)) * tab_len;\n \n   /* Now construct each line.  */\n-  content.resize (max_lines);\n+  m_content.resize (max_lines);\n   for (i = 0; i < max_lines; i++)\n     {\n-      tui_source_element *src = &content[i];\n+      tui_source_element *src = &m_content[i];\n \n       std::string line;\n       CORE_ADDR addr;\n@@ -448,36 +448,36 @@ tui_get_low_disassembly_address (struct gdbarch *gdbarch,\n void\n tui_disasm_window::do_scroll_vertical (int num_to_scroll)\n {\n-  if (!content.empty ())\n+  if (!m_content.empty ())\n     {\n       CORE_ADDR pc;\n \n-      pc = start_line_or_addr.u.addr;\n+      pc = m_start_line_or_addr.u.addr;\n \n       symtab_and_line sal {};\n       sal.pspace = current_program_space;\n-      sal.pc = tui_find_disassembly_address (gdbarch, pc, num_to_scroll);\n-      update_source_window_as_is (gdbarch, sal);\n+      sal.pc = tui_find_disassembly_address (m_gdbarch, pc, num_to_scroll);\n+      update_source_window_as_is (m_gdbarch, sal);\n     }\n }\n \n bool\n tui_disasm_window::location_matches_p (struct bp_location *loc, int line_no)\n {\n-  return (content[line_no].line_or_addr.loa == LOA_ADDRESS\n-\t  && content[line_no].line_or_addr.u.addr == loc->address);\n+  return (m_content[line_no].line_or_addr.loa == LOA_ADDRESS\n+\t  && m_content[line_no].line_or_addr.u.addr == loc->address);\n }\n \n bool\n tui_disasm_window::addr_is_displayed (CORE_ADDR addr) const\n {\n-  if (content.size () < SCROLL_THRESHOLD)\n+  if (m_content.size () < SCROLL_THRESHOLD)\n     return false;\n \n-  for (size_t i = 0; i < content.size () - SCROLL_THRESHOLD; ++i)\n+  for (size_t i = 0; i < m_content.size () - SCROLL_THRESHOLD; ++i)\n     {\n-      if (content[i].line_or_addr.loa == LOA_ADDRESS\n-\t  && content[i].line_or_addr.u.addr == addr)\n+      if (m_content[i].line_or_addr.loa == LOA_ADDRESS\n+\t  && m_content[i].line_or_addr.u.addr == addr)\n \treturn true;\n     }\n \n@@ -515,3 +515,11 @@ tui_disasm_window::maybe_update (struct frame_info *fi, symtab_and_line sal)\n       set_is_exec_point_at (a);\n     }\n }\n+\n+void\n+tui_disasm_window::display_start_addr (struct gdbarch **gdbarch_p,\n+\t\t\t\t       CORE_ADDR *addr_p)\n+{\n+  *gdbarch_p = m_gdbarch;\n+  *addr_p = m_start_line_or_addr.u.addr;\n+}"
    },
    {
      "sha": "0eb6c9e7290371aaf49a305c7ce754a64e991b34",
      "filename": "gdb/tui/tui-disasm.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.h?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -48,6 +48,9 @@ struct tui_disasm_window : public tui_source_window_base\n     do_erase_source_content (_(\"[ No Assembly Available ]\"));\n   }\n \n+  void display_start_addr (struct gdbarch **gdbarch_p,\n+\t\t\t   CORE_ADDR *addr_p) override;\n+\n protected:\n \n   void do_scroll_vertical (int num_to_scroll) override;"
    },
    {
      "sha": "b2c47c018c105eee28487d176fdf351397826a5b",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 5,
      "deletions": 17,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -274,27 +274,15 @@ tui_remove_some_windows ()\n static void\n extract_display_start_addr (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n {\n-  struct gdbarch *gdbarch = nullptr;\n-  CORE_ADDR addr = 0;\n-  CORE_ADDR pc;\n-  struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n-\n   if (TUI_SRC_WIN != nullptr)\n-    {\n-      gdbarch = TUI_SRC_WIN->gdbarch;\n-      find_line_pc (cursal.symtab,\n-\t\t    TUI_SRC_WIN->start_line_or_addr.u.line_no,\n-\t\t    &pc);\n-      addr = pc;\n-    }\n+    TUI_SRC_WIN->display_start_addr (gdbarch_p, addr_p);\n   else if (TUI_DISASM_WIN != nullptr)\n+    TUI_DISASM_WIN->display_start_addr (gdbarch_p, addr_p);\n+  else\n     {\n-      gdbarch = TUI_DISASM_WIN->gdbarch;\n-      addr = TUI_DISASM_WIN->start_line_or_addr.u.addr;\n+      *gdbarch_p = nullptr;\n+      *addr_p = 0;\n     }\n-\n-  *gdbarch_p = gdbarch;\n-  *addr_p = addr;\n }\n \n void"
    },
    {
      "sha": "7bc1220a87624e41d2a8ba1815935660ddeaaf9a",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 28,
      "deletions": 19,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -74,9 +74,9 @@ tui_source_window::set_contents (struct gdbarch *arch,\n   m_fullname = make_unique_xstrdup (symtab_to_fullname (s));\n \n   cur_line = 0;\n-  gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n-  start_line_or_addr.loa = LOA_LINE;\n-  cur_line_no = start_line_or_addr.u.line_no = line_no;\n+  m_gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n+  m_start_line_or_addr.loa = LOA_LINE;\n+  cur_line_no = m_start_line_or_addr.u.line_no = line_no;\n \n   int digits = 0;\n   if (compact_source)\n@@ -88,16 +88,15 @@ tui_source_window::set_contents (struct gdbarch *arch,\n     }\n \n   const char *iter = srclines.c_str ();\n-  content.resize (nlines);\n+  m_content.resize (nlines);\n   while (cur_line < nlines)\n     {\n-      struct tui_source_element *element\n-\t= &content[cur_line];\n+      struct tui_source_element *element = &m_content[cur_line];\n \n       std::string text;\n       if (*iter != '\\0')\n \ttext = tui_copy_source_line (&iter, cur_line_no,\n-\t\t\t\t     horizontal_offset,\n+\t\t\t\t     m_horizontal_offset,\n \t\t\t\t     line_width, digits);\n \n       /* Set whether element is the execution point\n@@ -109,7 +108,7 @@ tui_source_window::set_contents (struct gdbarch *arch,\n \t\t\t symtab_to_fullname (s)) == 0\n \t   && cur_line_no == locator->line_no);\n \n-      content[cur_line].line = std::move (text);\n+      m_content[cur_line].line = std::move (text);\n \n       cur_line++;\n       cur_line_no++;\n@@ -124,7 +123,7 @@ tui_source_window::set_contents (struct gdbarch *arch,\n bool\n tui_source_window::showing_source_p (const char *fullname) const\n {\n-  return (!content.empty ()\n+  return (!m_content.empty ()\n \t  && (filename_cmp (tui_locator_win_info_ptr ()->full_name.c_str (),\n \t\t\t    fullname) == 0));\n }\n@@ -134,11 +133,11 @@ tui_source_window::showing_source_p (const char *fullname) const\n void\n tui_source_window::do_scroll_vertical (int num_to_scroll)\n {\n-  if (!content.empty ())\n+  if (!m_content.empty ())\n     {\n       struct symtab *s;\n       struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n-      struct gdbarch *arch = gdbarch;\n+      struct gdbarch *arch = m_gdbarch;\n \n       if (cursal.symtab == NULL)\n \t{\n@@ -149,11 +148,11 @@ tui_source_window::do_scroll_vertical (int num_to_scroll)\n       else\n \ts = cursal.symtab;\n \n-      int line_no = start_line_or_addr.u.line_no + num_to_scroll;\n+      int line_no = m_start_line_or_addr.u.line_no + num_to_scroll;\n       const std::vector<off_t> *offsets;\n       if (g_source_cache.get_line_charpos (s, &offsets)\n \t  && line_no > offsets->size ())\n-\tline_no = start_line_or_addr.u.line_no;\n+\tline_no = m_start_line_or_addr.u.line_no;\n       if (line_no <= 0)\n \tline_no = 1;\n \n@@ -167,8 +166,8 @@ tui_source_window::do_scroll_vertical (int num_to_scroll)\n bool\n tui_source_window::location_matches_p (struct bp_location *loc, int line_no)\n {\n-  return (content[line_no].line_or_addr.loa == LOA_LINE\n-\t  && content[line_no].line_or_addr.u.line_no == loc->line_number\n+  return (m_content[line_no].line_or_addr.loa == LOA_LINE\n+\t  && m_content[line_no].line_or_addr.u.line_no == loc->line_number\n \t  && loc->symtab != NULL\n \t  && filename_cmp (m_fullname.get (),\n \t\t\t   symtab_to_fullname (loc->symtab)) == 0);\n@@ -179,13 +178,13 @@ tui_source_window::location_matches_p (struct bp_location *loc, int line_no)\n bool\n tui_source_window::line_is_displayed (int line) const\n {\n-  if (content.size () < SCROLL_THRESHOLD)\n+  if (m_content.size () < SCROLL_THRESHOLD)\n     return false;\n \n-  for (size_t i = 0; i < content.size () - SCROLL_THRESHOLD; ++i)\n+  for (size_t i = 0; i < m_content.size () - SCROLL_THRESHOLD; ++i)\n     {\n-      if (content[i].line_or_addr.loa == LOA_LINE\n-\t  && content[i].line_or_addr.u.line_no == line)\n+      if (m_content[i].line_or_addr.loa == LOA_LINE\n+\t  && m_content[i].line_or_addr.u.line_no == line)\n \treturn true;\n     }\n \n@@ -216,3 +215,13 @@ tui_source_window::maybe_update (struct frame_info *fi, symtab_and_line sal)\n       set_is_exec_point_at (l);\n     }\n }\n+\n+void\n+tui_source_window::display_start_addr (struct gdbarch **gdbarch_p,\n+\t\t\t\t       CORE_ADDR *addr_p)\n+{\n+  struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n+\n+  *gdbarch_p = m_gdbarch;\n+  find_line_pc (cursal.symtab, m_start_line_or_addr.u.line_no, addr_p);\n+}"
    },
    {
      "sha": "1df84cf304c2d258b826b03442e56f2e8c37483d",
      "filename": "gdb/tui/tui-source.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.h?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -53,6 +53,9 @@ struct tui_source_window : public tui_source_window_base\n     do_erase_source_content (_(\"[ No Source Available ]\"));\n   }\n \n+  void display_start_addr (struct gdbarch **gdbarch_p,\n+\t\t\t   CORE_ADDR *addr_p) override;\n+\n protected:\n \n   void do_scroll_vertical (int num_to_scroll) override;"
    },
    {
      "sha": "b5ba59e2f7a4d475b19a648eb87f07c73f927ef4",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 39,
      "deletions": 39,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -169,7 +169,7 @@ tui_source_window_base::update_source_window\n   (struct gdbarch *gdbarch,\n    const struct symtab_and_line &sal)\n {\n-  horizontal_offset = 0;\n+  m_horizontal_offset = 0;\n   update_source_window_as_is (gdbarch, sal);\n }\n \n@@ -229,7 +229,7 @@ tui_source_window_base::do_erase_source_content (const char *str)\n   int x_pos;\n   int half_width = (width - 2) / 2;\n \n-  content.clear ();\n+  m_content.clear ();\n   if (handle != NULL)\n     {\n       werase (handle.get ());\n@@ -250,46 +250,46 @@ tui_source_window_base::do_erase_source_content (const char *str)\n \n \n /* Redraw the complete line of a source or disassembly window.  */\n-static void\n-tui_show_source_line (struct tui_source_window_base *win_info, int lineno)\n+void\n+tui_source_window_base::show_source_line (int lineno)\n {\n   struct tui_source_element *line;\n   int x;\n \n-  line = &win_info->content[lineno - 1];\n+  line = &m_content[lineno - 1];\n   if (line->is_exec_point)\n-    tui_set_reverse_mode (win_info->handle.get (), true);\n+    tui_set_reverse_mode (handle.get (), true);\n \n-  wmove (win_info->handle.get (), lineno, TUI_EXECINFO_SIZE);\n-  tui_puts (line->line.c_str (), win_info->handle.get ());\n+  wmove (handle.get (), lineno, TUI_EXECINFO_SIZE);\n+  tui_puts (line->line.c_str (), handle.get ());\n   if (line->is_exec_point)\n-    tui_set_reverse_mode (win_info->handle.get (), false);\n+    tui_set_reverse_mode (handle.get (), false);\n \n   /* Clear to end of line but stop before the border.  */\n-  x = getcurx (win_info->handle.get ());\n-  while (x + 1 < win_info->width)\n+  x = getcurx (handle.get ());\n+  while (x + 1 < width)\n     {\n-      waddch (win_info->handle.get (), ' ');\n-      x = getcurx (win_info->handle.get ());\n+      waddch (handle.get (), ' ');\n+      x = getcurx (handle.get ());\n     }\n }\n \n void\n tui_source_window_base::show_source_content ()\n {\n-  gdb_assert (!content.empty ());\n+  gdb_assert (!m_content.empty ());\n \n-  for (int lineno = 1; lineno <= content.size (); lineno++)\n-    tui_show_source_line (this, lineno);\n+  for (int lineno = 1; lineno <= m_content.size (); lineno++)\n+    show_source_line (lineno);\n \n   check_and_display_highlight_if_needed ();\n   refresh_window ();\n }\n \n tui_source_window_base::tui_source_window_base ()\n {\n-  start_line_or_addr.loa = LOA_ADDRESS;\n-  start_line_or_addr.u.addr = 0;\n+  m_start_line_or_addr.loa = LOA_ADDRESS;\n+  m_start_line_or_addr.u.addr = 0;\n \n   gdb::observers::source_styling_changed.attach\n     (std::bind (&tui_source_window::style_changed, this),\n@@ -313,16 +313,16 @@ tui_source_window_base::update_tab_width ()\n void\n tui_source_window_base::rerender ()\n {\n-  if (!content.empty ())\n+  if (!m_content.empty ())\n     {\n       struct symtab_and_line cursal\n \t= get_current_source_symtab_and_line ();\n \n-      if (start_line_or_addr.loa == LOA_LINE)\n-\tcursal.line = start_line_or_addr.u.line_no;\n+      if (m_start_line_or_addr.loa == LOA_LINE)\n+\tcursal.line = m_start_line_or_addr.u.line_no;\n       else\n-\tcursal.pc = start_line_or_addr.u.addr;\n-      update_source_window (gdbarch, cursal);\n+\tcursal.pc = m_start_line_or_addr.u.addr;\n+      update_source_window (m_gdbarch, cursal);\n     }\n   else if (deprecated_safe_get_selected_frame () != NULL)\n     {\n@@ -361,25 +361,25 @@ tui_source_window_base::refill ()\n   if (sal.pspace == nullptr)\n     sal.pspace = current_program_space;\n \n-  if (start_line_or_addr.loa == LOA_LINE)\n-    sal.line = start_line_or_addr.u.line_no;\n+  if (m_start_line_or_addr.loa == LOA_LINE)\n+    sal.line = m_start_line_or_addr.u.line_no;\n   else\n-    sal.pc = start_line_or_addr.u.addr;\n+    sal.pc = m_start_line_or_addr.u.addr;\n \n-  update_source_window_as_is (gdbarch, sal);\n+  update_source_window_as_is (m_gdbarch, sal);\n }\n \n /* Scroll the source forward or backward horizontally.  */\n \n void\n tui_source_window_base::do_scroll_horizontal (int num_to_scroll)\n {\n-  if (!content.empty ())\n+  if (!m_content.empty ())\n     {\n-      int offset = horizontal_offset + num_to_scroll;\n+      int offset = m_horizontal_offset + num_to_scroll;\n       if (offset < 0)\n \toffset = 0;\n-      horizontal_offset = offset;\n+      m_horizontal_offset = offset;\n       refill ();\n     }\n }\n@@ -395,23 +395,23 @@ tui_source_window_base::set_is_exec_point_at (struct tui_line_or_address l)\n   int i;\n \n   i = 0;\n-  while (i < content.size ())\n+  while (i < m_content.size ())\n     {\n       bool new_state;\n       struct tui_line_or_address content_loa =\n-\tcontent[i].line_or_addr;\n+\tm_content[i].line_or_addr;\n \n       if (content_loa.loa == l.loa\n \t  && ((l.loa == LOA_LINE && content_loa.u.line_no == l.u.line_no)\n               || (l.loa == LOA_ADDRESS && content_loa.u.addr == l.u.addr)))\n         new_state = true;\n       else\n \tnew_state = false;\n-      if (new_state != content[i].is_exec_point)\n+      if (new_state != m_content[i].is_exec_point)\n         {\n           changed = true;\n-          content[i].is_exec_point = new_state;\n-          tui_show_source_line (this, i + 1);\n+          m_content[i].is_exec_point = new_state;\n+          show_source_line (i + 1);\n         }\n       i++;\n     }\n@@ -445,11 +445,11 @@ tui_source_window_base::update_breakpoint_info\n   int i;\n   bool need_refresh = false;\n \n-  for (i = 0; i < content.size (); i++)\n+  for (i = 0; i < m_content.size (); i++)\n     {\n       struct tui_source_element *line;\n \n-      line = &content[i];\n+      line = &m_content[i];\n       if (current_only && !line->is_exec_point)\n          continue;\n \n@@ -498,9 +498,9 @@ void\n tui_source_window_base::update_exec_info ()\n {\n   update_breakpoint_info (nullptr, true);\n-  for (int i = 0; i < content.size (); i++)\n+  for (int i = 0; i < m_content.size (); i++)\n     {\n-      struct tui_source_element *src_element = &content[i];\n+      struct tui_source_element *src_element = &m_content[i];\n       char element[TUI_EXECINFO_SIZE] = \"   \";\n \n       /* Now update the exec info content based upon the state"
    },
    {
      "sha": "501dd31ccfd5f5af9031e96e0c63fa278d49c092",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/432b5c40220d80d539284f0ee8f6d081d39f0578/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=432b5c40220d80d539284f0ee8f6d081d39f0578",
      "patch": "@@ -90,6 +90,18 @@ struct tui_source_window_base : public tui_win_info\n   virtual bool set_contents (struct gdbarch *gdbarch,\n \t\t\t     const struct symtab_and_line &sal) = 0;\n \n+  /* Redraw the complete line of a source or disassembly window.  */\n+  void show_source_line (int lineno);\n+\n+  /* Used for horizontal scroll.  */\n+  int m_horizontal_offset = 0;\n+  struct tui_line_or_address m_start_line_or_addr;\n+\n+  /* Architecture associated with code at this location.  */\n+  struct gdbarch *m_gdbarch = nullptr;\n+\n+  std::vector<tui_source_element> m_content;\n+\n public:\n \n   /* Refill the source window's source cache and update it.  If this\n@@ -125,14 +137,9 @@ struct tui_source_window_base : public tui_win_info\n   /* Erase the source content.  */\n   virtual void erase_source_content () = 0;\n \n-  /* Used for horizontal scroll.  */\n-  int horizontal_offset = 0;\n-  struct tui_line_or_address start_line_or_addr;\n-\n-  /* Architecture associated with code at this location.  */\n-  struct gdbarch *gdbarch = nullptr;\n-\n-  std::vector<tui_source_element> content;\n+  /* Return the start address and gdbarch.  */\n+  virtual void display_start_addr (struct gdbarch **gdbarch_p,\n+\t\t\t\t   CORE_ADDR *addr_p) = 0;\n \n private:\n "
    }
  ]
}