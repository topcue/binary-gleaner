{
  "sha": "2c830f547588220588f2a0a876b86e3f9062f9e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM4MzBmNTQ3NTg4MjIwNTg4ZjJhMGE4NzZiODZlM2Y5MDYyZjllMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Change some uses of DW_STRING to string method\n\nThis changes some of the simpler spots to use attribute::string rather\nthan DW_STRING.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (partial_die_info::read)\n\t(dwarf2_const_value_attr, anonymous_struct_prefix, )\n\t(dwarf2_name, dwarf2_fetch_constant_bytes): Use\n\tattribute::as_string.",
    "tree": {
      "sha": "66da4ee30bf5e021ce49b3825afe59007351255e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66da4ee30bf5e021ce49b3825afe59007351255e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c830f547588220588f2a0a876b86e3f9062f9e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c830f547588220588f2a0a876b86e3f9062f9e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c830f547588220588f2a0a876b86e3f9062f9e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c830f547588220588f2a0a876b86e3f9062f9e1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6c412691f9a2c9adaa3fdd057dcad6dcd68f13ec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c412691f9a2c9adaa3fdd057dcad6dcd68f13ec",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6c412691f9a2c9adaa3fdd057dcad6dcd68f13ec"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 43,
    "deletions": 28
  },
  "files": [
    {
      "sha": "f6e0138713f7e5358ae35588e506f0ae776d688e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c830f547588220588f2a0a876b86e3f9062f9e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c830f547588220588f2a0a876b86e3f9062f9e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2c830f547588220588f2a0a876b86e3f9062f9e1",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (partial_die_info::read)\n+\t(dwarf2_const_value_attr, anonymous_struct_prefix, )\n+\t(dwarf2_name, dwarf2_fetch_constant_bytes): Use\n+\tattribute::as_string.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/attribute.c (attribute::address): Don't use DW_UNSND or"
    },
    {
      "sha": "70d2091148710fe947f80c62c740a7766cb1ae39",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 36,
      "deletions": 28,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c830f547588220588f2a0a876b86e3f9062f9e1/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c830f547588220588f2a0a876b86e3f9062f9e1/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2c830f547588220588f2a0a876b86e3f9062f9e1",
      "patch": "@@ -19017,11 +19017,11 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t      /* These tags always have simple identifiers already; no need\n \t\t to canonicalize them.  */\n \t      canonical_name = 1;\n-\t      raw_name = DW_STRING (&attr);\n+\t      raw_name = attr.as_string ();\n \t      break;\n \t    default:\n \t      canonical_name = 0;\n-\t      raw_name = DW_STRING (&attr);\n+\t      raw_name = attr.as_string ();\n \t      break;\n \t    }\n \t  break;\n@@ -21863,7 +21863,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n     case DW_FORM_GNU_strp_alt:\n       /* DW_STRING is already allocated on the objfile obstack, point\n \t directly to it.  */\n-      *bytes = (const gdb_byte *) DW_STRING (attr);\n+      *bytes = (const gdb_byte *) attr->as_string ();\n       break;\n     case DW_FORM_block1:\n     case DW_FORM_block2:\n@@ -22307,21 +22307,22 @@ anonymous_struct_prefix (struct die_info *die, struct dwarf2_cu *cu)\n     return NULL;\n \n   attr = dw2_linkage_name_attr (die, cu);\n-  if (attr == NULL || DW_STRING (attr) == NULL)\n+  const char *attr_name = attr->as_string ();\n+  if (attr == NULL || attr_name == NULL)\n     return NULL;\n \n   /* dwarf2_name had to be already called.  */\n   gdb_assert (DW_STRING_IS_CANONICAL (attr));\n \n   /* Strip the base name, keep any leading namespaces/classes.  */\n-  base = strrchr (DW_STRING (attr), ':');\n-  if (base == NULL || base == DW_STRING (attr) || base[-1] != ':')\n+  base = strrchr (attr_name, ':');\n+  if (base == NULL || base == attr_name || base[-1] != ':')\n     return \"\";\n \n   struct objfile *objfile = cu->per_objfile->objfile;\n   return obstack_strndup (&objfile->per_bfd->storage_obstack,\n-\t\t\t  DW_STRING (attr),\n-\t\t\t  &base[-1] - DW_STRING (attr));\n+\t\t\t  attr_name,\n+\t\t\t  &base[-1] - attr_name);\n }\n \n /* Return the name of the namespace/class that DIE is defined within,\n@@ -22588,7 +22589,8 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n   struct objfile *objfile = cu->per_objfile->objfile;\n \n   attr = dwarf2_attr (die, DW_AT_name, cu);\n-  if ((!attr || !DW_STRING (attr))\n+  const char *attr_name = attr == nullptr ? nullptr : attr->as_string ();\n+  if (attr_name == nullptr\n       && die->tag != DW_TAG_namespace\n       && die->tag != DW_TAG_class_type\n       && die->tag != DW_TAG_interface_type\n@@ -22606,11 +22608,11 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n     case DW_TAG_enumerator:\n       /* These tags always have simple identifiers already; no need\n \t to canonicalize them.  */\n-      return DW_STRING (attr);\n+      return attr_name;\n \n     case DW_TAG_namespace:\n-      if (attr != NULL && DW_STRING (attr) != NULL)\n-\treturn DW_STRING (attr);\n+      if (attr_name != nullptr)\n+\treturn attr_name;\n       return CP_ANONYMOUS_NAMESPACE_STR;\n \n     case DW_TAG_class_type:\n@@ -22621,39 +22623,40 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n \t structures or unions.  These were of the form \"._%d\" in GCC 4.1,\n \t or simply \"<anonymous struct>\" or \"<anonymous union>\" in GCC 4.3\n \t and GCC 4.4.  We work around this problem by ignoring these.  */\n-      if (attr && DW_STRING (attr)\n-\t  && (startswith (DW_STRING (attr), \"._\")\n-\t      || startswith (DW_STRING (attr), \"<anonymous\")))\n+      if (attr_name != nullptr\n+\t  && (startswith (attr_name, \"._\")\n+\t      || startswith (attr_name, \"<anonymous\")))\n \treturn NULL;\n \n       /* GCC might emit a nameless typedef that has a linkage name.  See\n \t http://gcc.gnu.org/bugzilla/show_bug.cgi?id=47510.  */\n-      if (!attr || DW_STRING (attr) == NULL)\n+      if (!attr || attr_name == NULL)\n \t{\n \t  attr = dw2_linkage_name_attr (die, cu);\n-\t  if (attr == NULL || DW_STRING (attr) == NULL)\n+\t  if (attr == NULL || attr_name == NULL)\n \t    return NULL;\n \n-\t  /* Avoid demangling DW_STRING (attr) the second time on a second\n+\t  /* Avoid demangling attr_name the second time on a second\n \t     call for the same DIE.  */\n \t  if (!DW_STRING_IS_CANONICAL (attr))\n \t    {\n \t      gdb::unique_xmalloc_ptr<char> demangled\n-\t\t(gdb_demangle (DW_STRING (attr), DMGL_TYPES));\n+\t\t(gdb_demangle (attr_name, DMGL_TYPES));\n \t      if (demangled == nullptr)\n \t\treturn nullptr;\n \n \t      DW_STRING (attr) = objfile->intern (demangled.get ());\n \t      DW_STRING_IS_CANONICAL (attr) = 1;\n \t    }\n \n-\t  /* Strip any leading namespaces/classes, keep only the base name.\n-\t     DW_AT_name for named DIEs does not contain the prefixes.  */\n-\t  const char *base = strrchr (DW_STRING (attr), ':');\n-\t  if (base && base > DW_STRING (attr) && base[-1] == ':')\n+\t  /* Strip any leading namespaces/classes, keep only the\n+\t     base name.  DW_AT_name for named DIEs does not\n+\t     contain the prefixes.  */\n+\t  const char *base = strrchr (attr_name, ':');\n+\t  if (base && base > attr_name && base[-1] == ':')\n \t    return &base[1];\n \t  else\n-\t    return DW_STRING (attr);\n+\t    return attr_name;\n \t}\n       break;\n \n@@ -22663,11 +22666,13 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n \n   if (!DW_STRING_IS_CANONICAL (attr))\n     {\n-      DW_STRING (attr) = dwarf2_canonicalize_name (DW_STRING (attr), cu,\n+      DW_STRING (attr) = dwarf2_canonicalize_name (attr_name, cu,\n \t\t\t\t\t\t   objfile);\n       DW_STRING_IS_CANONICAL (attr) = 1;\n     }\n-  return DW_STRING (attr);\n+\n+  /* We might have changed it just above.  */\n+  return attr->as_string ();\n }\n \n /* Return the die that this die in an extension of, or NULL if there\n@@ -23177,8 +23182,11 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n     case DW_FORM_GNU_strp_alt:\n       /* DW_STRING is already allocated on the objfile obstack, point\n \t directly to it.  */\n-      result = (const gdb_byte *) DW_STRING (attr);\n-      *len = strlen (DW_STRING (attr));\n+      {\n+\tconst char *attr_name = attr->as_string ();\n+\tresult = (const gdb_byte *) attr_name;\n+\t*len = strlen (attr_name);\n+      }\n       break;\n     case DW_FORM_block1:\n     case DW_FORM_block2:"
    }
  ]
}