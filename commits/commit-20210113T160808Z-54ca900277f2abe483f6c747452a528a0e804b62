{
  "sha": "54ca900277f2abe483f6c747452a528a0e804b62",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTRjYTkwMDI3N2YyYWJlNDgzZjZjNzQ3NDUyYTUyOGEwZTgwNGI2Mg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-13T15:48:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-13T16:08:08Z"
    },
    "message": "gdb: convert jit to new-style debug macros\n\nHere's a sample output, with infrun debug enabled as well to show\nnesting:\n\n    [infrun] fetch_inferior_event: enter\n      [infrun] print_target_wait_results: target_wait (-1.0.0 [process -1], status) =\n      [infrun] print_target_wait_results:   4116727.4116727.0 [process 4116727],\n      [infrun] print_target_wait_results:   status->kind = stopped, signal = GDB_SIGNAL_TRAP\n      [infrun] handle_inferior_event: status->kind = stopped, signal = GDB_SIGNAL_TRAP\n      [infrun] start_step_over: enter\n        [infrun] start_step_over: stealing global queue of threads to step, length = 0\n        [infrun] operator(): step-over queue now empty\n      [infrun] start_step_over: exit\n      [infrun] handle_signal_stop: stop_pc=0x555555555229\n      [infrun] handle_jit_event: handling bp_jit_event\n      [jit] jit_read_descriptor: descriptor_addr = 0x5555555580b0\n      [jit] jit_register_code: symfile_addr = 0x7000000, symfile_size = 15560\n      [jit] jit_bfd_try_read_symtab: symfile_addr = 0x7000000, symfile_size = 15560\n      [jit] jit_breakpoint_re_set_internal: breakpoint_addr = 0x555555555229\n      [infrun] process_event_stop_test: BPSTAT_WHAT_SINGLE\n      [infrun] process_event_stop_test: no stepping, continue\n      [infrun] resume_1: step=1, signal=GDB_SIGNAL_0, trap_expected=1, current thread [process 4116727] at 0x555555555229\n      [infrun] prepare_to_wait: prepare_to_wait\n    [infrun] fetch_inferior_event: exit\n\ngdb/ChangeLog:\n\n\t* jit.c (jit_debug_printf): New, use throughout file.\n\nChange-Id: Ic0f5eb3ffc926fb555de4914e7dc1076ada63a97",
    "tree": {
      "sha": "b2ec535f8960f0a1010dcd9cbf39b4c43b884012",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b2ec535f8960f0a1010dcd9cbf39b4c43b884012"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/54ca900277f2abe483f6c747452a528a0e804b62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54ca900277f2abe483f6c747452a528a0e804b62",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/54ca900277f2abe483f6c747452a528a0e804b62",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54ca900277f2abe483f6c747452a528a0e804b62/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b634d11d61e3236f4602e9461dba67d1320f65e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b634d11d61e3236f4602e9461dba67d1320f65e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b634d11d61e3236f4602e9461dba67d1320f65e3"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 28,
    "deletions": 40
  },
  "files": [
    {
      "sha": "a4731898d4822270cd066279e62b2afe235c754f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54ca900277f2abe483f6c747452a528a0e804b62/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54ca900277f2abe483f6c747452a528a0e804b62/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=54ca900277f2abe483f6c747452a528a0e804b62",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.c (jit_debug_printf): New, use throughout file.\n+\n 2021-01-12  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* infrun.c (normal_stop): Fix indentation."
    },
    {
      "sha": "d10cc70222cb08870861a57d6ccb1be6ca662e6f",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 24,
      "deletions": 40,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54ca900277f2abe483f6c747452a528a0e804b62/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54ca900277f2abe483f6c747452a528a0e804b62/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=54ca900277f2abe483f6c747452a528a0e804b62",
      "patch": "@@ -62,6 +62,11 @@ static struct gdbarch_data *jit_gdbarch_data;\n \n static bool jit_debug = false;\n \n+/* Print a \"jit\" debug statement.  */\n+\n+#define jit_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (jit_debug, \"jit\", fmt, ##__VA_ARGS__)\n+\n static void\n show_jit_debug (struct ui_file *file, int from_tty,\n \t\tstruct cmd_list_element *c, const char *value)\n@@ -103,9 +108,8 @@ jit_reader_load (const char *file_name)\n   reader_init_fn_type *init_fn;\n   struct gdb_reader_funcs *funcs = NULL;\n \n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog, _(\"Opening shared object %s.\\n\"),\n-\t\t\tfile_name);\n+  jit_debug_printf (\"Opening shared object %s\", file_name);\n+\n   gdb_dlhandle_up so = gdb_dlopen (file_name);\n \n   init_fn = (reader_init_fn_type *) gdb_dlsym (so, reader_init_fn_sym);\n@@ -211,10 +215,7 @@ jit_read_descriptor (gdbarch *gdbarch,\n \n   CORE_ADDR addr = MSYMBOL_VALUE_ADDRESS (jiter, objf_data->descriptor);\n \n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"jit_read_descriptor, descriptor_addr = %s\\n\",\n-\t\t\tpaddress (gdbarch, addr));\n+  jit_debug_printf (\"descriptor_addr = %s\", paddress (gdbarch, addr));\n \n   /* Figure out how big the descriptor is on the remote and how to read it.  */\n   ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n@@ -668,9 +669,9 @@ jit_reader_try_read_symtab (struct jit_code_entry *code_entry,\n \tstatus = 0;\n     }\n \n-  if (jit_debug && status == 0)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"Could not read symtab using the loaded JIT reader.\\n\");\n+  if (status == 0)\n+    jit_debug_printf (\"Could not read symtab using the loaded JIT reader.\");\n+\n   return status;\n }\n \n@@ -686,12 +687,9 @@ jit_bfd_try_read_symtab (struct jit_code_entry *code_entry,\n   struct objfile *objfile;\n   const struct bfd_arch_info *b;\n \n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"jit_bfd_try_read_symtab, symfile_addr = %s, \"\n-\t\t\t\"symfile_size = %s\\n\",\n-\t\t\tpaddress (gdbarch, code_entry->symfile_addr),\n-\t\t\tpulongest (code_entry->symfile_size));\n+  jit_debug_printf (\"symfile_addr = %s, symfile_size = %s\",\n+\t\t    paddress (gdbarch, code_entry->symfile_addr),\n+\t\t    pulongest (code_entry->symfile_size));\n \n   gdb_bfd_ref_ptr nbfd (gdb_bfd_open_from_target_memory\n       (code_entry->symfile_addr, code_entry->symfile_size, gnutarget));\n@@ -752,12 +750,9 @@ jit_register_code (struct gdbarch *gdbarch,\n {\n   int success;\n \n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"jit_register_code, symfile_addr = %s, \"\n-\t\t\t\"symfile_size = %s\\n\",\n-\t\t\tpaddress (gdbarch, code_entry->symfile_addr),\n-\t\t\tpulongest (code_entry->symfile_size));\n+  jit_debug_printf (\"symfile_addr = %s, symfile_size = %s\",\n+\t\t    paddress (gdbarch, code_entry->symfile_addr),\n+\t\t    pulongest (code_entry->symfile_size));\n \n   success = jit_reader_try_read_symtab (code_entry, entry_addr);\n \n@@ -845,11 +840,7 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch, program_space *pspace)\n       CORE_ADDR addr = MSYMBOL_VALUE_ADDRESS (the_objfile,\n \t\t\t\t\t      objf_data->register_code);\n \n-      if (jit_debug)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"jit_breakpoint_re_set_internal, \"\n-\t\t\t    \"breakpoint_addr = %s\\n\",\n-\t\t\t    paddress (gdbarch, addr));\n+      jit_debug_printf (\"breakpoint_addr = %s\", paddress (gdbarch, addr));\n \n       /* Check if we need to re-create the breakpoint.  */\n       if (objf_data->cached_code_address == addr)\n@@ -893,10 +884,7 @@ jit_unwind_reg_set_impl (struct gdb_unwind_callbacks *cb, int dwarf_regnum,\n \t\t\t\t\t  dwarf_regnum);\n   if (gdb_reg == -1)\n     {\n-      if (jit_debug)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    _(\"Could not recognize DWARF regnum %d\"),\n-\t\t\t    dwarf_regnum);\n+      jit_debug_printf (\"Could not recognize DWARF regnum %d\", dwarf_regnum);\n       value->free (value);\n       return;\n     }\n@@ -987,14 +975,11 @@ jit_frame_sniffer (const struct frame_unwind *self,\n   /* Try to coax the provided unwinder to unwind the stack */\n   if (funcs->unwind (funcs, &callbacks) == GDB_SUCCESS)\n     {\n-      if (jit_debug)\n-\tfprintf_unfiltered (gdb_stdlog, _(\"Successfully unwound frame using \"\n-\t\t\t\t\t  \"JIT reader.\\n\"));\n+      jit_debug_printf (\"Successfully unwound frame using JIT reader.\");\n       return 1;\n     }\n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog, _(\"Could not unwind frame using \"\n-\t\t\t\t      \"JIT reader.\\n\"));\n+\n+  jit_debug_printf (\"Could not unwind frame using JIT reader.\");\n \n   jit_dealloc_cache (this_frame, *cache);\n   *cache = NULL;\n@@ -1105,8 +1090,7 @@ jit_inferior_init (inferior *inf)\n   struct gdbarch *gdbarch = inf->gdbarch;\n   program_space *pspace = inf->pspace;\n \n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"jit_inferior_init\\n\");\n+  jit_debug_printf (\"called\");\n \n   jit_prepend_unwinder (gdbarch);\n \n@@ -1254,7 +1238,7 @@ _initialize_jit ()\n   add_setshow_boolean_cmd (\"jit\", class_maintenance, &jit_debug,\n \t\t\t   _(\"Set JIT debugging.\"),\n \t\t\t   _(\"Show JIT debugging.\"),\n-\t\t\t   _(\"When non-zero, JIT debugging is enabled.\"),\n+\t\t\t   _(\"When set, JIT debugging is enabled.\"),\n \t\t\t   NULL,\n \t\t\t   show_jit_debug,\n \t\t\t   &setdebuglist, &showdebuglist);"
    }
  ]
}