{
  "sha": "5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWMzZjFlNWJmYzBjZjQ1ZDhiYzczNGFhYmFmMDIyNWI3MmEzMTA5Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:41Z"
    },
    "message": "Move sym_fns::qf to objfile\n\nCurrently the \"partial\" symbol reader is attached to the objfile's\nsymbol functions.  However, in order to allow multiple separate\npartial symbol readers, this association must be changed.  This patch\nmoves the \"qf\" member out of sym_fns as a step toward that goal.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* psymtab.c (require_partial_symbols): Check that 'sf' is not\n\tnull.\n\t* xcoffread.c (xcoff_sym_fns): Update.\n\t* symfile.h (struct sym_fns) <qf>: Remove.\n\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n\t* symfile-debug.c (objfile::has_partial_symbols)\n\t(objfile::find_last_source_symtab)\n\t(objfile::forget_cached_source_info)\n\t(objfile::map_symtabs_matching_filename, objfile::lookup_symbol)\n\t(objfile::print_stats, objfile::dump)\n\t(objfile::expand_symtabs_for_function)\n\t(objfile::expand_all_symtabs)\n\t(objfile::expand_symtabs_with_fullname)\n\t(objfile::map_matching_symbols)\n\t(objfile::expand_symtabs_matching)\n\t(objfile::find_pc_sect_compunit_symtab)\n\t(objfile::map_symbol_filenames)\n\t(objfile::find_compunit_symtab_by_address)\n\t(objfile::lookup_global_symbol_language, debug_sym_fns)\n\t(install_symfile_debug_logging): Update.\n\t* objfiles.h (struct objfile) <qf>: New member.\n\t* mipsread.c (ecoff_sym_fns): Update.\n\t* machoread.c (macho_sym_fns): Update.\n\t* elfread.c (elf_sym_fns_gdb_index, elf_sym_fns_debug_names):\n\tDon't declare.\n\t(elf_symfile_read, elf_sym_fns, elf_sym_fns_lazy_psyms): Update.\n\t* dbxread.c (aout_sym_fns): Update.\n\t* coffread.c (coff_sym_fns): Update.",
    "tree": {
      "sha": "e80ff71d12c21e772aa63f6d5d5318215a932eb6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e80ff71d12c21e772aa63f6d5d5318215a932eb6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9b99dcc8dbc4367b2d2af78ee896508b67f5517a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b99dcc8dbc4367b2d2af78ee896508b67f5517a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9b99dcc8dbc4367b2d2af78ee896508b67f5517a"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 77,
    "deletions": 89
  },
  "files": [
    {
      "sha": "55487d416b6df691b62a4bdf8331dd1e9ef8c412",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -1,3 +1,34 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* psymtab.c (require_partial_symbols): Check that 'sf' is not\n+\tnull.\n+\t* xcoffread.c (xcoff_sym_fns): Update.\n+\t* symfile.h (struct sym_fns) <qf>: Remove.\n+\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n+\t* symfile-debug.c (objfile::has_partial_symbols)\n+\t(objfile::find_last_source_symtab)\n+\t(objfile::forget_cached_source_info)\n+\t(objfile::map_symtabs_matching_filename, objfile::lookup_symbol)\n+\t(objfile::print_stats, objfile::dump)\n+\t(objfile::expand_symtabs_for_function)\n+\t(objfile::expand_all_symtabs)\n+\t(objfile::expand_symtabs_with_fullname)\n+\t(objfile::map_matching_symbols)\n+\t(objfile::expand_symtabs_matching)\n+\t(objfile::find_pc_sect_compunit_symtab)\n+\t(objfile::map_symbol_filenames)\n+\t(objfile::find_compunit_symtab_by_address)\n+\t(objfile::lookup_global_symbol_language, debug_sym_fns)\n+\t(install_symfile_debug_logging): Update.\n+\t* objfiles.h (struct objfile) <qf>: New member.\n+\t* mipsread.c (ecoff_sym_fns): Update.\n+\t* machoread.c (macho_sym_fns): Update.\n+\t* elfread.c (elf_sym_fns_gdb_index, elf_sym_fns_debug_names):\n+\tDon't declare.\n+\t(elf_symfile_read, elf_sym_fns, elf_sym_fns_lazy_psyms): Update.\n+\t* dbxread.c (aout_sym_fns): Update.\n+\t* coffread.c (coff_sym_fns): Update.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.h (symbol_compare_ftype, symbol_filename_ftype)"
    },
    {
      "sha": "676deec8cbe905e6a1f18bb662155289dc3fd232",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -2180,7 +2180,6 @@ static const struct sym_fns coff_sym_fns =\n   default_symfile_relocate,\t/* sym_relocate: Relocate a debug\n \t\t\t\t   section.  */\n   NULL,\t\t\t\t/* sym_probe_fns */\n-  &psym_functions\n };\n \n void _initialize_coffread ();"
    },
    {
      "sha": "9003822a0f1cbd610fcf830e95fa142ccd40188f",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -3130,7 +3130,6 @@ static const struct sym_fns aout_sym_fns =\n   NULL,\n   default_symfile_relocate,\t/* Relocate a debug section.  */\n   NULL,\t\t\t\t/* sym_probe_fns */\n-  &psym_functions\n };\n \n void _initialize_dbxread ();"
    },
    {
      "sha": "3ba7221bfc9548f10fe50f549fa6cd8432da7d87",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 40,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -54,8 +54,6 @@\n #include \"dwarf2/public.h\"\n \n /* Forward declarations.  */\n-extern const struct sym_fns elf_sym_fns_gdb_index;\n-extern const struct sym_fns elf_sym_fns_debug_names;\n extern const struct sym_fns elf_sym_fns_lazy_psyms;\n \n /* The struct elfinfo is available only during ELF symbol table and\n@@ -1272,10 +1270,10 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t  switch (index_kind)\n \t    {\n \t    case dw_index_kind::GDB_INDEX:\n-\t      objfile_set_sym_fns (objfile, &elf_sym_fns_gdb_index);\n+\t      objfile->qf = &dwarf2_gdb_index_functions;\n \t      break;\n \t    case dw_index_kind::DEBUG_NAMES:\n-\t      objfile_set_sym_fns (objfile, &elf_sym_fns_debug_names);\n+\t      objfile->qf = &dwarf2_debug_names_functions;\n \t      break;\n \t    }\n \t}\n@@ -1437,7 +1435,6 @@ static const struct sym_fns elf_sym_fns =\n   NULL,\n   default_symfile_relocate,\t/* Relocate a debug section.  */\n   &elf_probe_fns,\t\t/* sym_probe_fns */\n-  &psym_functions\n };\n \n /* The same as elf_sym_fns, but not registered and lazily reads\n@@ -1455,41 +1452,6 @@ const struct sym_fns elf_sym_fns_lazy_psyms =\n   NULL,\n   default_symfile_relocate,\t/* Relocate a debug section.  */\n   &elf_probe_fns,\t\t/* sym_probe_fns */\n-  &psym_functions\n-};\n-\n-/* The same as elf_sym_fns, but not registered and uses the\n-   DWARF-specific GNU index rather than psymtab.  */\n-const struct sym_fns elf_sym_fns_gdb_index =\n-{\n-  elf_new_init,\t\t\t/* init anything gbl to entire symab */\n-  elf_symfile_init,\t\t/* read initial info, setup for sym_red() */\n-  elf_symfile_read,\t\t/* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n-  elf_symfile_finish,\t\t/* finished with file, cleanup */\n-  default_symfile_offsets,\t/* Translate ext. to int. relocation */\n-  elf_symfile_segments,\t\t/* Get segment information from a file.  */\n-  NULL,\n-  default_symfile_relocate,\t/* Relocate a debug section.  */\n-  &elf_probe_fns,\t\t/* sym_probe_fns */\n-  &dwarf2_gdb_index_functions\n-};\n-\n-/* The same as elf_sym_fns, but not registered and uses the\n-   DWARF-specific .debug_names index rather than psymtab.  */\n-const struct sym_fns elf_sym_fns_debug_names =\n-{\n-  elf_new_init,\t\t\t/* init anything gbl to entire symab */\n-  elf_symfile_init,\t\t/* read initial info, setup for sym_red() */\n-  elf_symfile_read,\t\t/* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n-  elf_symfile_finish,\t\t/* finished with file, cleanup */\n-  default_symfile_offsets,\t/* Translate ext. to int. relocation */\n-  elf_symfile_segments,\t\t/* Get segment information from a file.  */\n-  NULL,\n-  default_symfile_relocate,\t/* Relocate a debug section.  */\n-  &elf_probe_fns,\t\t/* sym_probe_fns */\n-  &dwarf2_debug_names_functions\n };\n \n /* STT_GNU_IFUNC resolver vector to be installed to gnu_ifunc_fns_p.  */"
    },
    {
      "sha": "44baaa26f654bf7093ba6a14a3b4d2bac8560e7d",
      "filename": "gdb/machoread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/machoread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/machoread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/machoread.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -958,7 +958,6 @@ static const struct sym_fns macho_sym_fns = {\n   NULL,\n   macho_symfile_relocate,\t/* Relocate a debug section.  */\n   NULL,\t\t\t\t/* sym_get_probes */\n-  &psym_functions\n };\n \n void _initialize_machoread ();"
    },
    {
      "sha": "3f0697b9150cb30e7e0c8df4bc8a141a27d1d27d",
      "filename": "gdb/mipsread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/mipsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/mipsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mipsread.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -376,7 +376,6 @@ static const struct sym_fns ecoff_sym_fns =\n   NULL,\n   default_symfile_relocate,\t/* Relocate a debug section.  */\n   NULL,\t\t\t\t/* sym_probe_fns */\n-  &psym_functions\n };\n \n void _initialize_mipsread ();"
    },
    {
      "sha": "8d4a23ae0447e9a441184a11925d26af2b4a621d",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -677,6 +677,10 @@ struct objfile\n \n   const struct sym_fns *sf = nullptr;\n \n+  /* The \"quick\" (aka partial) symbol functions for this symbol\n+     reader.  */\n+  const struct quick_symbol_functions *qf = nullptr;\n+\n   /* Per objfile data-pointers required by other GDB modules.  */\n \n   REGISTRY_FIELDS {};"
    },
    {
      "sha": "8c02fa253dcabd5a190642a75f17de7cc5607674",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -84,7 +84,8 @@ require_partial_symbols (struct objfile *objfile, bool verbose)\n     {\n       objfile->flags |= OBJF_PSYMTABS_READ;\n \n-      if (objfile->sf->sym_read_psymbols)\n+      if (objfile->sf != nullptr\n+\t  && objfile->sf->sym_read_psymbols)\n \t{\n \t  if (verbose)\n \t    printf_filtered (_(\"Reading symbols from %s...\\n\"),"
    },
    {
      "sha": "da3439d79280e82919a76ee5e445a869be17a577",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 36,
      "deletions": 39,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -84,8 +84,8 @@ objfile::has_partial_symbols ()\n       && sf != nullptr\n       && sf->sym_read_psymbols != NULL)\n     retval = true;\n-  else if (sf != nullptr)\n-    retval = sf->qf->has_symbols (this);\n+  else if (qf != nullptr)\n+    retval = qf->has_symbols (this);\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog, \"qf->has_symbols (%s) = %d\\n\",\n@@ -103,8 +103,8 @@ objfile::find_last_source_symtab ()\n     fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (sf != nullptr)\n-    retval = sf->qf->find_last_source_symtab (this);\n+  if (qf != nullptr)\n+    retval = qf->find_last_source_symtab (this);\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (...) = %s\\n\",\n@@ -120,8 +120,8 @@ objfile::forget_cached_source_info ()\n     fprintf_filtered (gdb_stdlog, \"qf->forget_cached_source_info (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (sf != nullptr)\n-    sf->qf->forget_cached_source_info (this);\n+  if (qf != nullptr)\n+    qf->forget_cached_source_info (this);\n }\n \n bool\n@@ -138,8 +138,8 @@ objfile::map_symtabs_matching_filename\n \t\t      host_address_to_string (&callback));\n \n   bool retval = false;\n-  if (sf != nullptr)\n-    retval = (sf->qf->map_symtabs_matching_filename\n+  if (qf != nullptr)\n+    retval = (qf->map_symtabs_matching_filename\n \t      (this, name, real_path, callback));\n \n   if (debug_symfile)\n@@ -161,8 +161,8 @@ objfile::lookup_symbol (block_enum kind, const char *name, domain_enum domain)\n \t\t      objfile_debug_name (this), kind, name,\n \t\t      domain_name (domain));\n \n-  if (sf != nullptr)\n-    retval = sf->qf->lookup_symbol (this, kind, name, domain);\n+  if (qf != nullptr)\n+    retval = qf->lookup_symbol (this, kind, name, domain);\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog, \"qf->lookup_symbol (...) = %s\\n\",\n@@ -180,8 +180,8 @@ objfile::print_stats ()\n     fprintf_filtered (gdb_stdlog, \"qf->print_stats (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (sf != nullptr)\n-    sf->qf->print_stats (this);\n+  if (qf != nullptr)\n+    qf->print_stats (this);\n }\n \n void\n@@ -191,8 +191,8 @@ objfile::dump ()\n     fprintf_filtered (gdb_stdlog, \"qf->dump (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (sf != nullptr)\n-    sf->qf->dump (this);\n+  if (qf != nullptr)\n+    qf->dump (this);\n }\n \n void\n@@ -203,8 +203,8 @@ objfile::expand_symtabs_for_function (const char *func_name)\n \t\t      \"qf->expand_symtabs_for_function (%s, \\\"%s\\\")\\n\",\n \t\t      objfile_debug_name (this), func_name);\n \n-  if (sf != nullptr)\n-    sf->qf->expand_symtabs_for_function (this, func_name);\n+  if (qf != nullptr)\n+    qf->expand_symtabs_for_function (this, func_name);\n }\n \n void\n@@ -214,8 +214,8 @@ objfile::expand_all_symtabs ()\n     fprintf_filtered (gdb_stdlog, \"qf->expand_all_symtabs (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (sf != nullptr)\n-    sf->qf->expand_all_symtabs (this);\n+  if (qf != nullptr)\n+    qf->expand_all_symtabs (this);\n }\n \n void\n@@ -226,8 +226,8 @@ objfile::expand_symtabs_with_fullname (const char *fullname)\n \t\t      \"qf->expand_symtabs_with_fullname (%s, \\\"%s\\\")\\n\",\n \t\t      objfile_debug_name (this), fullname);\n \n-  if (sf != nullptr)\n-    sf->qf->expand_symtabs_with_fullname (this, fullname);\n+  if (qf != nullptr)\n+    qf->expand_symtabs_with_fullname (this, fullname);\n }\n \n void\n@@ -244,9 +244,9 @@ objfile::map_matching_symbols\n \t\t      domain_name (domain), global,\n \t\t      host_address_to_string (ordered_compare));\n \n-  if (sf != nullptr)\n-    sf->qf->map_matching_symbols (this, name, domain, global,\n-\t\t\t\t  callback, ordered_compare);\n+  if (qf != nullptr)\n+    qf->map_matching_symbols (this, name, domain, global,\n+\t\t\t      callback, ordered_compare);\n }\n \n void\n@@ -266,9 +266,9 @@ objfile::expand_symtabs_matching\n \t\t      host_address_to_string (&expansion_notify),\n \t\t      search_domain_name (kind));\n \n-  if (sf != nullptr)\n-    sf->qf->expand_symtabs_matching (this, file_matcher, lookup_name,\n-\t\t\t\t     symbol_matcher, expansion_notify, kind);\n+  if (qf != nullptr)\n+    qf->expand_symtabs_matching (this, file_matcher, lookup_name,\n+\t\t\t\t symbol_matcher, expansion_notify, kind);\n }\n \n struct compunit_symtab *\n@@ -288,10 +288,9 @@ objfile::find_pc_sect_compunit_symtab (struct bound_minimal_symbol msymbol,\n \t\t      host_address_to_string (section),\n \t\t      warn_if_readin);\n \n-  if (sf != nullptr)\n-    retval\n-      = sf->qf->find_pc_sect_compunit_symtab (this, msymbol, pc, section,\n-\t\t\t\t\t      warn_if_readin);\n+  if (qf != nullptr)\n+    retval = qf->find_pc_sect_compunit_symtab (this, msymbol, pc, section,\n+\t\t\t\t\t       warn_if_readin);\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n@@ -315,8 +314,8 @@ objfile::map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n \t\t      host_address_to_string (data),\n \t\t      need_fullname);\n \n-  if (sf != nullptr)\n-    sf->qf->map_symbol_filenames (this, fun, data, need_fullname);\n+  if (qf != nullptr)\n+    qf->map_symbol_filenames (this, fun, data, need_fullname);\n }\n \n struct compunit_symtab *\n@@ -329,8 +328,8 @@ objfile::find_compunit_symtab_by_address (CORE_ADDR address)\n \t\t      hex_string (address));\n \n   struct compunit_symtab *result = NULL;\n-  if (sf != nullptr && sf->qf->find_compunit_symtab_by_address != NULL)\n-    result = sf->qf->find_compunit_symtab_by_address (this, address);\n+  if (qf != nullptr && qf->find_compunit_symtab_by_address != NULL)\n+    result = qf->find_compunit_symtab_by_address (this, address);\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n@@ -349,9 +348,9 @@ objfile::lookup_global_symbol_language (const char *name,\n {\n   enum language result = language_unknown;\n \n-  if (sf != nullptr && sf->qf->lookup_global_symbol_language != nullptr)\n-    result = sf->qf->lookup_global_symbol_language (this, name, domain,\n-\t\t\t\t\t\t    symbol_found_p);\n+  if (qf != nullptr && qf->lookup_global_symbol_language != nullptr)\n+    result = qf->lookup_global_symbol_language (this, name, domain,\n+\t\t\t\t\t\tsymbol_found_p);\n   else\n     *symbol_found_p = false;\n \n@@ -516,7 +515,6 @@ static const struct sym_fns debug_sym_fns =\n   debug_sym_read_linetable,\n   debug_sym_relocate,\n   &debug_sym_probe_fns,\n-  nullptr\n };\n \f\n /* Install the debugging versions of the symfile functions for OBJFILE.\n@@ -555,7 +553,6 @@ install_symfile_debug_logging (struct objfile *objfile)\n   COPY_SF_PTR (real_sf, debug_data, sym_relocate, debug_sym_relocate);\n   if (real_sf->sym_probe_fns)\n     debug_data->debug_sf.sym_probe_fns = &debug_sym_probe_fns;\n-  debug_data->debug_sf.qf = real_sf->qf;\n \n #undef COPY_SF_PTR\n "
    },
    {
      "sha": "d56d623c588078ecf51508e3c51ecc43abdc1f3e",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -904,6 +904,7 @@ syms_from_objfile_1 (struct objfile *objfile,\n   const int mainline = add_flags & SYMFILE_MAINLINE;\n \n   objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n+  objfile->qf = &psym_functions;\n \n   if (objfile->sf == NULL)\n     {\n@@ -2554,6 +2555,7 @@ reread_symbols (void)\n \t     based on whether .gdb_index is present, and we need it to\n \t     start over.  PR symtab/15885  */\n \t  objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n+\t  objfile->qf = &psym_functions;\n \n \t  build_objfile_section_table (objfile);\n "
    },
    {
      "sha": "2c37f88d7631e863e769736e0fa42151215ec26c",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -180,10 +180,6 @@ struct sym_fns\n   /* If non-NULL, this objfile has probe support, and all the probe\n      functions referred to here will be non-NULL.  */\n   const struct sym_probe_fns *sym_probe_fns;\n-\n-  /* The \"quick\" (aka partial) symbol functions for this symbol\n-     reader.  */\n-  const struct quick_symbol_functions *qf;\n };\n \n extern section_addr_info"
    },
    {
      "sha": "e0e7a8f0f5ea0f9d657b27c2856e7260d3d505a8",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "patch": "@@ -3006,7 +3006,6 @@ static const struct sym_fns xcoff_sym_fns =\n   aix_process_linenos,\n   default_symfile_relocate,\t/* Relocate a debug section.  */\n   NULL,\t\t\t\t/* sym_probe_fns */\n-  &psym_functions\n };\n \n /* Same as xcoff_get_n_import_files, but for core files.  */"
    }
  ]
}