{
  "sha": "e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTZlZDcxNmNkNTUxNGMwOGI5ZDdjNDY5ZDE4NWIxYWExNzdkYmMyMg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:18:33Z"
    },
    "message": "Migrate rest of compile commands to new options framework\n\nAs I was in the neighbourhood, I converted the other \"compile\"\nsubcommands to the new options framework too.  Specifically, \"compile\ncode\" and \"compile file\".\n\nThe user-visible changes are:\n\n  - All abbreviations of \"-raw\" are accepted now, instead of just -r.\n    Obviously that means \"-ra\" is now accepted.\n\n  - Option completion now works.\n\n  - \"compile file\" did not have a completer yet, and now it knows to\n    complete on filenames.\n\n  - You couldn't use \"compile file\" with a file named \"-something\".\n    You can now, with \"compile file -- -something\".\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* compile/compile.c (struct compile_options): New.\n\t(compile_flag_option_def, compile_command_option_defs)\n\t(make_compile_options_def_group): New.\n\t(compile_file_command): Handle options with\n\tgdb::option::process_options.\n\t(compile_file_command_completer): New function.\n\t(compile_code_command): Handle options with\n\tgdb::option::process_options.\n\t(compile_code_command_completer): New function.\n\t(_initialize_compiler): Install completers for \"compile code\" and\n\t\"compile file\".  Mention available options in \"compile code\" and\n\t\"compile code\"'s help.\n\t* completer.c (advance_to_completion_word): New, factored out from\n\t...\n\t(advance_to_expression_complete_word_point): ... this.\n\t(advance_to_filename_complete_word_point): New.\n\t* completer.h (advance_to_filename_complete_word_point): New\n\tdeclaration.\n\ngdb/testsuite/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.compile/compile.exp: Adjust expected output to option\n\tprocessing changes.",
    "tree": {
      "sha": "525665341239f4e18870f5c6406deefb0a79944b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/525665341239f4e18870f5c6406deefb0a79944b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7d8062de98203eeec70d4439ab460b9ef50a2e0f"
    }
  ],
  "stats": {
    "total": 251,
    "additions": 181,
    "deletions": 70
  },
  "files": [
    {
      "sha": "9e3629abf14e5a2ae4346843ca6ec26a87bd170e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
      "patch": "@@ -1,3 +1,24 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* compile/compile.c (struct compile_options): New.\n+\t(compile_flag_option_def, compile_command_option_defs)\n+\t(make_compile_options_def_group): New.\n+\t(compile_file_command): Handle options with\n+\tgdb::option::process_options.\n+\t(compile_file_command_completer): New function.\n+\t(compile_code_command): Handle options with\n+\tgdb::option::process_options.\n+\t(compile_code_command_completer): New function.\n+\t(_initialize_compiler): Install completers for \"compile code\" and\n+\t\"compile file\".  Mention available options in \"compile code\" and\n+\t\"compile code\"'s help.\n+\t* completer.c (advance_to_completion_word): New, factored out from\n+\t...\n+\t(advance_to_expression_complete_word_point): ... this.\n+\t(advance_to_filename_complete_word_point): New.\n+\t* completer.h (advance_to_filename_complete_word_point): New\n+\tdeclaration.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* compile/compile.c: Include \"cli/cli-option.h\"."
    },
    {
      "sha": "b467254fe83071dfa0fcc3b279fb094e675ddf6f",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 111,
      "deletions": 58,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
      "patch": "@@ -236,85 +236,109 @@ show_compile_debug (struct ui_file *file, int from_tty,\n \n \f\n \n-/* Check *ARG for a \"-raw\" or \"-r\" argument.  Return 0 if not seen.\n-   Return 1 if seen and update *ARG.  */\n+/* Options for the compile command.  */\n \n-static int\n-check_raw_argument (const char **arg)\n+struct compile_options\n {\n-  *arg = skip_spaces (*arg);\n+  /* For -raw.  */\n+  int raw = false;\n+};\n+\n+using compile_flag_option_def\n+  = gdb::option::flag_option_def<compile_options>;\n+\n+static const gdb::option::option_def compile_command_option_defs[] = {\n+\n+  compile_flag_option_def {\n+    \"raw\",\n+    [] (compile_options *opts) { return &opts->raw; },\n+    N_(\"Suppress automatic 'void _gdb_expr () { CODE }' wrapping.\"),\n+  },\n+\n+};\n \n-  if (arg != NULL\n-      && (check_for_argument (arg, \"-raw\", sizeof (\"-raw\") - 1)\n-\t  || check_for_argument (arg, \"-r\", sizeof (\"-r\") - 1)))\n-      return 1;\n-  return 0;\n+/* Create an option_def_group for the \"compile\" command's options,\n+   with OPTS as context.  */\n+\n+static gdb::option::option_def_group\n+make_compile_options_def_group (compile_options *opts)\n+{\n+  return {compile_command_option_defs, opts};\n }\n \n /* Handle the input from the 'compile file' command.  The \"compile\n    file\" command is used to evaluate an expression contained in a file\n    that may contain calls to the GCC compiler.  */\n \n static void\n-compile_file_command (const char *arg, int from_tty)\n+compile_file_command (const char *args, int from_tty)\n {\n-  enum compile_i_scope_types scope = COMPILE_I_SIMPLE_SCOPE;\n-\n   scoped_restore save_async = make_scoped_restore (&current_ui->async, 0);\n \n-  /* Check the user did not just <enter> after command.  */\n-  if (arg == NULL)\n-    error (_(\"You must provide a filename for this command.\"));\n+  /* Check if a -raw option is provided.  */\n \n-  /* Check if a raw (-r|-raw) argument is provided.  */\n-  if (arg != NULL && check_raw_argument (&arg))\n-    {\n-      scope = COMPILE_I_RAW_SCOPE;\n-      arg = skip_spaces (arg);\n-    }\n+  compile_options options;\n \n-  /* After processing arguments, check there is a filename at the end\n-     of the command.  */\n-  if (arg[0] == '\\0')\n-    error (_(\"You must provide a filename with the raw option set.\"));\n+  const gdb::option::option_def_group group\n+    = make_compile_options_def_group (&options);\n+  gdb::option::process_options\n+    (&args, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR,\n+     group);\n+\n+  enum compile_i_scope_types scope\n+    = options.raw ? COMPILE_I_RAW_SCOPE : COMPILE_I_SIMPLE_SCOPE;\n+\n+  args = skip_spaces (args);\n \n-  if (arg[0] == '-')\n-    error (_(\"Unknown argument specified.\"));\n+  /* After processing options, check whether we have a filename.  */\n+  if (args == nullptr || args[0] == '\\0')\n+    error (_(\"You must provide a filename for this command.\"));\n \n-  arg = skip_spaces (arg);\n-  gdb::unique_xmalloc_ptr<char> abspath = gdb_abspath (arg);\n+  args = skip_spaces (args);\n+  gdb::unique_xmalloc_ptr<char> abspath = gdb_abspath (args);\n   std::string buffer = string_printf (\"#include \\\"%s\\\"\\n\", abspath.get ());\n   eval_compile_command (NULL, buffer.c_str (), scope, NULL);\n }\n \n+/* Completer for the \"compile file\" command.  */\n+\n+static void\n+compile_file_command_completer (struct cmd_list_element *ignore,\n+\t\t\t\tcompletion_tracker &tracker,\n+\t\t\t\tconst char *text, const char *word)\n+{\n+  const gdb::option::option_def_group group\n+    = make_compile_options_def_group (nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, group))\n+    return;\n+\n+  word = advance_to_filename_complete_word_point (tracker, text);\n+  filename_completer (ignore, tracker, text, word);\n+}\n+\n /* Handle the input from the 'compile code' command.  The\n    \"compile code\" command is used to evaluate an expression that may\n    contain calls to the GCC compiler.  The language expected in this\n    compile command is the language currently set in GDB.  */\n \n static void\n-compile_code_command (const char *arg, int from_tty)\n+compile_code_command (const char *args, int from_tty)\n {\n-  enum compile_i_scope_types scope = COMPILE_I_SIMPLE_SCOPE;\n-\n   scoped_restore save_async = make_scoped_restore (&current_ui->async, 0);\n \n-  if (arg != NULL && check_raw_argument (&arg))\n-    {\n-      scope = COMPILE_I_RAW_SCOPE;\n-      arg = skip_spaces (arg);\n-    }\n+  compile_options options;\n \n-  arg = skip_spaces (arg);\n+  const gdb::option::option_def_group group\n+    = make_compile_options_def_group (&options);\n+  gdb::option::process_options\n+    (&args, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, group);\n \n-  if (arg != NULL && !check_for_argument (&arg, \"--\", sizeof (\"--\") - 1))\n-    {\n-      if (arg[0] == '-')\n-\terror (_(\"Unknown argument specified.\"));\n-    }\n+  enum compile_i_scope_types scope\n+    = options.raw ? COMPILE_I_RAW_SCOPE : COMPILE_I_SIMPLE_SCOPE;\n \n-  if (arg && *arg)\n-    eval_compile_command (NULL, arg, scope, NULL);\n+  if (args && *args)\n+    eval_compile_command (NULL, args, scope, NULL);\n   else\n     {\n       counted_command_line l = get_command_line (compile_control, \"\");\n@@ -324,6 +348,23 @@ compile_code_command (const char *arg, int from_tty)\n     }\n }\n \n+/* Completer for the \"compile code\" command.  */\n+\n+static void\n+compile_code_command_completer (struct cmd_list_element *ignore,\n+\t\t\t\tcompletion_tracker &tracker,\n+\t\t\t\tconst char *text, const char *word)\n+{\n+  const gdb::option::option_def_group group\n+    = make_compile_options_def_group (nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, group))\n+    return;\n+\n+  word = advance_to_expression_complete_word_point (tracker, text);\n+  symbol_completer (ignore, tracker, text, word);\n+}\n+\n /* Callback for compile_print_command.  */\n \n void\n@@ -927,15 +968,16 @@ Command to compile source code and inject it into the inferior.\"),\n \t\t  &compile_command_list, \"compile \", 1, &cmdlist);\n   add_com_alias (\"expression\", \"compile\", class_obscure, 0);\n \n-  add_cmd (\"code\", class_obscure, compile_code_command,\n-\t   _(\"\\\n+  const auto compile_opts = make_compile_options_def_group (nullptr);\n+\n+  static const std::string compile_code_help\n+    = gdb::option::build_help (N_(\"\\\n Compile, inject, and execute code.\\n\\\n \\n\\\n-Usage: compile code [-r|-raw] [--] [CODE]\\n\\\n--r|-raw: Suppress automatic 'void _gdb_expr () { CODE }' wrapping.\\n\\\n---: Do not parse any options beyond this delimiter.  All text to the\\n\\\n-    right will be treated as source code.\\n\\\n+Usage: compile code [OPTION]... [CODE]\\n\\\n \\n\\\n+Options:\\n\\\n+%OPTIONS%\\n\\\n The source code may be specified as a simple one line expression, e.g.:\\n\\\n \\n\\\n     compile code printf(\\\"Hello world\\\\n\\\");\\n\\\n@@ -944,16 +986,27 @@ Alternatively, you can type a multiline expression by invoking\\n\\\n this command with no argument.  GDB will then prompt for the\\n\\\n expression interactively; type a line containing \\\"end\\\" to\\n\\\n indicate the end of the expression.\"),\n-\t   &compile_command_list);\n+\t\t\t       compile_opts);\n \n-  c = add_cmd (\"file\", class_obscure, compile_file_command,\n-\t       _(\"\\\n+  c = add_cmd (\"code\", class_obscure, compile_code_command,\n+\t       compile_code_help.c_str (),\n+\t       &compile_command_list);\n+  set_cmd_completer_handle_brkchars (c, compile_code_command_completer);\n+\n+static const std::string compile_file_help\n+    = gdb::option::build_help (N_(\"\\\n Evaluate a file containing source code.\\n\\\n \\n\\\n-Usage: compile file [-r|-raw] [FILENAME]\\n\\\n--r|-raw: Suppress automatic 'void _gdb_expr () { CODE }' wrapping.\"),\n+Usage: compile file [OPTION].. [FILENAME]\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\"),\n+\t\t\t       compile_opts);\n+\n+  c = add_cmd (\"file\", class_obscure, compile_file_command,\n+\t       compile_file_help.c_str (),\n \t       &compile_command_list);\n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer_handle_brkchars (c, compile_file_command_completer);\n \n   const auto compile_print_opts = make_value_print_options_def_group (nullptr);\n "
    },
    {
      "sha": "0f4e7f9ca75f1fd936831821b4f7b2d6410de057",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
      "patch": "@@ -352,16 +352,18 @@ gdb_rl_find_completion_word (struct gdb_rl_completion_word_info *info,\n   return line_buffer + point;\n }\n \n-/* See completer.h.  */\n+/* Find the completion word point for TEXT, emulating the algorithm\n+   readline uses to find the word point, using WORD_BREAK_CHARACTERS\n+   as word break characters.  */\n \n-const char *\n-advance_to_expression_complete_word_point (completion_tracker &tracker,\n-\t\t\t\t\t   const char *text)\n+static const char *\n+advance_to_completion_word (completion_tracker &tracker,\n+\t\t\t    const char *word_break_characters,\n+\t\t\t    const char *text)\n {\n   gdb_rl_completion_word_info info;\n \n-  info.word_break_characters\n-    = current_language->la_word_break_characters ();\n+  info.word_break_characters = word_break_characters;\n   info.quote_characters = gdb_completer_quote_characters;\n   info.basic_quote_characters = rl_basic_quote_characters;\n \n@@ -382,6 +384,26 @@ advance_to_expression_complete_word_point (completion_tracker &tracker,\n \n /* See completer.h.  */\n \n+const char *\n+advance_to_expression_complete_word_point (completion_tracker &tracker,\n+\t\t\t\t\t   const char *text)\n+{\n+  const char *brk_chars = current_language->la_word_break_characters ();\n+  return advance_to_completion_word (tracker, brk_chars, text);\n+}\n+\n+/* See completer.h.  */\n+\n+const char *\n+advance_to_filename_complete_word_point (completion_tracker &tracker,\n+\t\t\t\t\t const char *text)\n+{\n+  const char *brk_chars = gdb_completer_file_name_break_characters;\n+  return advance_to_completion_word (tracker, brk_chars, text);\n+}\n+\n+/* See completer.h.  */\n+\n bool\n completion_tracker::completes_to_completion_word (const char *word)\n {"
    },
    {
      "sha": "58fe84f4fee6a048319e24e31d79b63a8512a246",
      "filename": "gdb/completer.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/completer.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/completer.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.h?ref=e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
      "patch": "@@ -532,10 +532,15 @@ extern const char *completion_find_completion_word (completion_tracker &tracker,\n    completion word point for TEXT, emulating the algorithm readline\n    uses to find the word point, using the current language's word\n    break characters.  */\n-\n const char *advance_to_expression_complete_word_point\n   (completion_tracker &tracker, const char *text);\n \n+/* Assuming TEXT is an filename, find the completion word point for\n+   TEXT, emulating the algorithm readline uses to find the word\n+   point.  */\n+extern const char *advance_to_filename_complete_word_point\n+  (completion_tracker &tracker, const char *text);\n+\n extern char **gdb_rl_attempted_completion_function (const char *text,\n \t\t\t\t\t\t    int start, int end);\n "
    },
    {
      "sha": "3684bfad63a7f79329def813cc32c1df5d172bb9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
      "patch": "@@ -1,3 +1,8 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.compile/compile.exp: Adjust expected output to option\n+\tprocessing changes.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/options.exp: Build executable."
    },
    {
      "sha": "20a6a72386c216534b70c94dd13bb5ea48bbd7c1",
      "filename": "gdb/testsuite/gdb.compile/compile.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/testsuite/gdb.compile/compile.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6ed716cd5514c08b9d7c469d185b1aa177dbc22/gdb/testsuite/gdb.compile/compile.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.compile/compile.exp?ref=e6ed716cd5514c08b9d7c469d185b1aa177dbc22",
      "patch": "@@ -325,7 +325,7 @@ gdb_test_no_output \"set debug compile off\"\n gdb_test \"show debug compile\" \"Compile debugging is .*\"\n gdb_test \"show compile-args\" \\\n     \"Compile command command-line arguments are .*\"\n-gdb_test \"compile code -z\" \"Unknown argument.*\"\n+gdb_test \"compile code -z\" \"Unrecognized option at: -z\"\n \n gdb_test \"set lang rust\" \\\n     \"Warning: the current language does not match this frame.\"\n@@ -340,12 +340,17 @@ gdb_test \"compile file\" \\\n     \"You must provide a filename for this command.*\" \\\n     \"Test compile file without a filename\"\n gdb_test \"compile file -r\" \\\n-    \"You must provide a filename with the raw option set.*\" \\\n+    \"You must provide a filename for this command.*\" \\\n     \"Test compile file and raw option without a filename\"\n gdb_test \"compile file -z\" \\\n-    \"Unknown argument.*\" \\\n-    \"test compile file with unknown argument\"\n-\n+    \"Unrecognized option at: -z\" \\\n+    \"test compile file with unknown option\"\n+gdb_test \"compile file -z --\" \\\n+    \"Unrecognized option at: -z --\" \\\n+    \"test compile file with unknown option plus --\"\n+gdb_test \"compile file -raw -- -raw\" \\\n+    \"/-raw: No such file or directory.*\" \\\n+    \"test compile file \\\"-raw\\\" file\"\n \n # LOC_CONST tests.\n "
    }
  ]
}