{
  "sha": "21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjE0MDFmYzdiZjY3ZGJmNzNmNGEzZWRhNGJjZmM1OGZhNDIxMTU4NA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-11-24T13:11:31Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-11-25T08:43:51Z"
    },
    "message": "Duplicate output sections in scripts\n\nPreviously, ld merged duplicate output sections if such existed in\nscripts, except for those with a constraint of SPECIAL.  This makes\nscripts with duplicate output section statements create duplicate\noutput sections in the linker output file.\n\n\t* ldlang.c (lang_output_section_statement_lookup): Change \"create\"\n\tparameter to a tristate, if 2 then always create a new output\n\tsection statement.  Update all callers, with\n\tlang_enter_output_section_statement using \"2\".\n\t(map_input_to_output_sections): Don't ignore SPECIAL constraint\n\there.\n\t* ldlang.h (lang_output_section_statement_type): Update prototype.\n\t(lang_output_section_find): Update.",
    "tree": {
      "sha": "e3c07e14b0b760173b5abeb0269a191352cec45e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e3c07e14b0b760173b5abeb0269a191352cec45e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6595cf3ce81572a8941bd9d16d6518091e6e6937",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6595cf3ce81572a8941bd9d16d6518091e6e6937",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6595cf3ce81572a8941bd9d16d6518091e6e6937"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 45,
    "deletions": 42
  },
  "files": [
    {
      "sha": "d7280efb36a45bc896561ae931a4ad08b1ace84c",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
      "patch": "@@ -1,3 +1,14 @@\n+2020-11-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldlang.c (lang_output_section_statement_lookup): Change \"create\"\n+\tparameter to a tristate, if 2 then always create a new output\n+\tsection statement.  Update all callers, with\n+\tlang_enter_output_section_statement using \"2\".\n+\t(map_input_to_output_sections): Don't ignore SPECIAL constraint\n+\there.\n+\t* ldlang.h (lang_output_section_statement_type): Update prototype.\n+\t(lang_output_section_find): Update.\n+\n 2020-11-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gold/26939"
    },
    {
      "sha": "41000da1e15a6d58250b6c36132ada899598c74c",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 32,
      "deletions": 40,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
      "patch": "@@ -1305,7 +1305,7 @@ lang_init (void)\n   first_file = lang_add_input_file (NULL, lang_input_file_is_marker_enum,\n \t\t\t\t    NULL);\n   abs_output_section =\n-    lang_output_section_statement_lookup (BFD_ABS_SECTION_NAME, 0, TRUE);\n+    lang_output_section_statement_lookup (BFD_ABS_SECTION_NAME, 0, 1);\n \n   abs_output_section->bfd_section = bfd_abs_section_ptr;\n \n@@ -1464,19 +1464,21 @@ lang_output_section_get (const asection *output_section)\n \n /* Find or create an output_section_statement with the given NAME.\n    If CONSTRAINT is non-zero match one with that constraint, otherwise\n-   match any non-negative constraint.  If CREATE, always make a\n-   new output_section_statement for SPECIAL CONSTRAINT.  */\n+   match any non-negative constraint.  If CREATE is 0 return NULL when\n+   no match exists.  If CREATE is 1, create an output_section_statement\n+   when no match exists or if CONSTRAINT is SPECIAL.  If CREATE is 2,\n+   always make a new output_section_statement.  */\n \n lang_output_section_statement_type *\n lang_output_section_statement_lookup (const char *name,\n \t\t\t\t      int constraint,\n-\t\t\t\t      bfd_boolean create)\n+\t\t\t\t      int create)\n {\n   struct out_section_hash_entry *entry;\n \n   entry = ((struct out_section_hash_entry *)\n \t   bfd_hash_lookup (&output_section_statement_table, name,\n-\t\t\t    create, FALSE));\n+\t\t\t    create != 0, FALSE));\n   if (entry == NULL)\n     {\n       if (create)\n@@ -1491,23 +1493,19 @@ lang_output_section_statement_lookup (const char *name,\n       struct out_section_hash_entry *last_ent;\n \n       name = entry->s.output_section_statement.name;\n-      if (create && constraint == SPECIAL)\n-\t/* Not traversing to the end reverses the order of the second\n-\t   and subsequent SPECIAL sections in the hash table chain,\n-\t   but that shouldn't matter.  */\n-\tlast_ent = entry;\n-      else\n-\tdo\n-\t  {\n-\t    if (constraint == entry->s.output_section_statement.constraint\n-\t\t|| (constraint == 0\n-\t\t    && entry->s.output_section_statement.constraint >= 0))\n-\t      return &entry->s.output_section_statement;\n-\t    last_ent = entry;\n-\t    entry = (struct out_section_hash_entry *) entry->root.next;\n-\t  }\n-\twhile (entry != NULL\n-\t       && name == entry->s.output_section_statement.name);\n+      do\n+\t{\n+\t  if (create != 2\n+\t      && !(create && constraint == SPECIAL)\n+\t      && (constraint == entry->s.output_section_statement.constraint\n+\t\t  || (constraint == 0\n+\t\t      && entry->s.output_section_statement.constraint >= 0)))\n+\t    return &entry->s.output_section_statement;\n+\t  last_ent = entry;\n+\t  entry = (struct out_section_hash_entry *) entry->root.next;\n+\t}\n+      while (entry != NULL\n+\t     && name == entry->s.output_section_statement.name);\n \n       if (!create)\n \treturn NULL;\n@@ -4175,22 +4173,18 @@ map_input_to_output_sections\n \t  break;\n \tcase lang_output_section_statement_enum:\n \t  tos = &s->output_section_statement;\n-\t  if (tos->constraint != 0)\n+\t  if (tos->constraint == ONLY_IF_RW\n+\t      || tos->constraint == ONLY_IF_RO)\n \t    {\n-\t      if (tos->constraint != ONLY_IF_RW\n-\t\t  && tos->constraint != ONLY_IF_RO)\n-\t\tbreak;\n \t      tos->all_input_readonly = TRUE;\n \t      check_input_sections (tos->children.head, tos);\n \t      if (tos->all_input_readonly != (tos->constraint == ONLY_IF_RO))\n-\t\t{\n-\t\t  tos->constraint = -1;\n-\t\t  break;\n-\t\t}\n+\t\ttos->constraint = -1;\n \t    }\n-\t  map_input_to_output_sections (tos->children.head,\n-\t\t\t\t\ttarget,\n-\t\t\t\t\ttos);\n+\t  if (tos->constraint >= 0)\n+\t    map_input_to_output_sections (tos->children.head,\n+\t\t\t\t\t  target,\n+\t\t\t\t\t  tos);\n \t  break;\n \tcase lang_output_statement_enum:\n \t  break;\n@@ -4270,7 +4264,7 @@ map_input_to_output_sections\n \t\t place them in amongst other sections then the address\n \t\t will affect following script sections, which is\n \t\t likely to surprise naive users.  */\n-\t      tos = lang_output_section_statement_lookup (name, 0, TRUE);\n+\t      tos = lang_output_section_statement_lookup (name, 0, 1);\n \t      tos->addr_tree = s->address_statement.address;\n \t      if (tos->bfd_section == NULL)\n \t\tinit_os (tos, 0);\n@@ -7206,8 +7200,7 @@ ldlang_place_orphan (asection *s)\n   if (config.orphan_handling == orphan_handling_discard)\n     {\n       lang_output_section_statement_type *os;\n-      os = lang_output_section_statement_lookup (DISCARD_SECTION_NAME, 0,\n-\t\t\t\t\t\t TRUE);\n+      os = lang_output_section_statement_lookup (DISCARD_SECTION_NAME, 0, 1);\n       if (os->addr_tree == NULL\n \t  && (bfd_link_relocatable (&link_info)\n \t      || (s->flags & (SEC_LOAD | SEC_ALLOC)) == 0))\n@@ -7230,7 +7223,7 @@ ldlang_place_orphan (asection *s)\n       os = ldemul_place_orphan (s, name, constraint);\n       if (os == NULL)\n \t{\n-\t  os = lang_output_section_statement_lookup (name, constraint, TRUE);\n+\t  os = lang_output_section_statement_lookup (name, constraint, 1);\n \t  if (os->addr_tree == NULL\n \t      && (bfd_link_relocatable (&link_info)\n \t\t  || (s->flags & (SEC_LOAD | SEC_ALLOC)) == 0))\n@@ -7277,8 +7270,7 @@ lang_place_orphans (void)\n \t\t    {\n \t\t      if (default_common_section == NULL)\n \t\t\tdefault_common_section\n-\t\t\t  = lang_output_section_statement_lookup (\".bss\", 0,\n-\t\t\t\t\t\t\t\t  TRUE);\n+\t\t\t  = lang_output_section_statement_lookup (\".bss\", 0, 1);\n \t\t      lang_add_section (&default_common_section->children, s,\n \t\t\t\t\tNULL, default_common_section);\n \t\t    }\n@@ -7420,7 +7412,7 @@ lang_enter_output_section_statement (const char *output_section_statement_name,\n   lang_output_section_statement_type *os;\n \n   os = lang_output_section_statement_lookup (output_section_statement_name,\n-\t\t\t\t\t     constraint, TRUE);\n+\t\t\t\t\t     constraint, 2);\n   current_section = os;\n \n   if (os->addr_tree == NULL)"
    },
    {
      "sha": "0f1b607f7358fc413f708b563cf6649358b43ad5",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21401fc7bf67dbf73f4a3eda4bcfc58fa4211584/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=21401fc7bf67dbf73f4a3eda4bcfc58fa4211584",
      "patch": "@@ -586,7 +586,7 @@ extern asection *section_for_dot\n        statement = statement->next)\n \n #define lang_output_section_find(NAME) \\\n-  lang_output_section_statement_lookup (NAME, 0, FALSE)\n+  lang_output_section_statement_lookup (NAME, 0, 0)\n \n extern void lang_process\n   (void);\n@@ -605,7 +605,7 @@ extern void lang_add_keepsyms_file\n extern lang_output_section_statement_type *lang_output_section_get\n   (const asection *);\n extern lang_output_section_statement_type *lang_output_section_statement_lookup\n-  (const char *, int, bfd_boolean);\n+  (const char *, int, int);\n extern lang_output_section_statement_type *next_matching_output_section_statement\n   (lang_output_section_statement_type *, int);\n extern void ldlang_add_undef"
    }
  ]
}