{
  "sha": "de54374205650be71237ce51ef7981d30ddd78dc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGU1NDM3NDIwNTY1MGJlNzEyMzdjZTUxZWY3OTgxZDMwZGRkNzhkYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-06-16T23:55:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-06-17T00:02:20Z"
    },
    "message": "Use macros for TUI window names\n\nChristian pointed out that tui-layout.c hard-codes various window\nnames.  This patch changes the code to use the macros from tui-data.h\ninstead.  For each window, I searched for uses of the name; but I only\nfound any in tui-layout.c.  This also adds a new macro to account for\nthe \"status\" window.\n\ngdb/ChangeLog\n2020-06-16  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-data.h (STATUS_NAME): New macro.\n\t* tui/tui-layout.c (tui_remove_some_windows)\n\t(initialize_known_windows, tui_register_window)\n\t(tui_layout_split::remove_windows, initialize_layouts)\n\t(tui_new_layout_command): Don't use hard-coded window names.",
    "tree": {
      "sha": "5183c6afd027d38fd840495d678666e01ee4a9fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5183c6afd027d38fd840495d678666e01ee4a9fe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/de54374205650be71237ce51ef7981d30ddd78dc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de54374205650be71237ce51ef7981d30ddd78dc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/de54374205650be71237ce51ef7981d30ddd78dc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de54374205650be71237ce51ef7981d30ddd78dc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a350efd4fb368a35ada608f6bc26ccd3bed0ae6b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a350efd4fb368a35ada608f6bc26ccd3bed0ae6b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a350efd4fb368a35ada608f6bc26ccd3bed0ae6b"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 41,
    "deletions": 32
  },
  "files": [
    {
      "sha": "f9d989d2444637cfdc3d7c8a8c28343bb086ed49",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de54374205650be71237ce51ef7981d30ddd78dc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de54374205650be71237ce51ef7981d30ddd78dc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=de54374205650be71237ce51ef7981d30ddd78dc",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-16  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-data.h (STATUS_NAME): New macro.\n+\t* tui/tui-layout.c (tui_remove_some_windows)\n+\t(initialize_known_windows, tui_register_window)\n+\t(tui_layout_split::remove_windows, initialize_layouts)\n+\t(tui_new_layout_command): Don't use hard-coded window names.\n+\n 2020-06-16  Tom Tromey  <tom@tromey.com>\n \n \tPR tui/25348:"
    },
    {
      "sha": "abe77272291ad0c60cdbdb03fe0d45ce1317bfc8",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de54374205650be71237ce51ef7981d30ddd78dc/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de54374205650be71237ce51ef7981d30ddd78dc/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=de54374205650be71237ce51ef7981d30ddd78dc",
      "patch": "@@ -130,6 +130,7 @@ struct tui_gen_win_info\n #define CMD_NAME                \"cmd\"\n #define DATA_NAME               \"regs\"\n #define DISASSEM_NAME           \"asm\"\n+#define STATUS_NAME\t\t\"status\"\n #define MIN_WIN_HEIGHT          3\n #define MIN_CMD_WIN_HEIGHT      3\n "
    },
    {
      "sha": "8164b346370efa63815f63540e87ec2a2043c7dd",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 32,
      "deletions": 32,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de54374205650be71237ce51ef7981d30ddd78dc/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de54374205650be71237ce51ef7981d30ddd78dc/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=de54374205650be71237ce51ef7981d30ddd78dc",
      "patch": "@@ -255,7 +255,7 @@ tui_remove_some_windows ()\n {\n   tui_win_info *focus = tui_win_with_focus ();\n \n-  if (strcmp (focus->name (), \"cmd\") == 0)\n+  if (strcmp (focus->name (), CMD_NAME) == 0)\n     {\n       /* Try leaving the source or disassembly window.  If neither\n \t exists, just do nothing.  */\n@@ -373,18 +373,18 @@ initialize_known_windows ()\n {\n   known_window_types = new std::unordered_map<std::string, window_factory>;\n \n-  known_window_types->emplace (\"src\",\n+  known_window_types->emplace (SRC_NAME,\n \t\t\t       make_standard_window<SRC_WIN,\n \t\t\t\t\t\t    tui_source_window>);\n-  known_window_types->emplace (\"cmd\",\n+  known_window_types->emplace (CMD_NAME,\n \t\t\t       make_standard_window<CMD_WIN, tui_cmd_window>);\n-  known_window_types->emplace (\"regs\",\n+  known_window_types->emplace (DATA_NAME,\n \t\t\t       make_standard_window<DATA_WIN,\n \t\t\t\t\t\t    tui_data_window>);\n-  known_window_types->emplace (\"asm\",\n+  known_window_types->emplace (DISASSEM_NAME,\n \t\t\t       make_standard_window<DISASSEM_WIN,\n \t\t\t\t\t\t    tui_disasm_window>);\n-  known_window_types->emplace (\"status\", get_locator_window);\n+  known_window_types->emplace (STATUS_NAME, get_locator_window);\n }\n \n /* See tui-layout.h.  */\n@@ -394,8 +394,8 @@ tui_register_window (const char *name, window_factory &&factory)\n {\n   std::string name_copy = name;\n \n-  if (name_copy == \"src\" || name_copy == \"cmd\" || name_copy == \"regs\"\n-      || name_copy == \"asm\" || name_copy == \"status\")\n+  if (name_copy == SRC_NAME || name_copy == CMD_NAME || name_copy == DATA_NAME\n+      || name_copy == DISASSEM_NAME || name_copy == STATUS_NAME)\n     error (_(\"Window type \\\"%s\\\" is built-in\"), name);\n \n   known_window_types->emplace (std::move (name_copy),\n@@ -791,8 +791,8 @@ tui_layout_split::remove_windows (const char *name)\n       if (this_name == nullptr)\n \tm_splits[i].layout->remove_windows (name);\n       else if (strcmp (this_name, name) == 0\n-\t       || strcmp (this_name, \"cmd\") == 0\n-\t       || strcmp (this_name, \"status\") == 0)\n+\t       || strcmp (this_name, CMD_NAME) == 0\n+\t       || strcmp (this_name, STATUS_NAME) == 0)\n \t{\n \t  /* Keep.  */\n \t}\n@@ -888,37 +888,37 @@ initialize_layouts ()\n   tui_layout_split *layout;\n \n   layout = new tui_layout_split ();\n-  layout->add_window (\"src\", 2);\n-  layout->add_window (\"status\", 0);\n-  layout->add_window (\"cmd\", 1);\n-  add_layout_command (\"src\", layout);\n+  layout->add_window (SRC_NAME, 2);\n+  layout->add_window (STATUS_NAME, 0);\n+  layout->add_window (CMD_NAME, 1);\n+  add_layout_command (SRC_NAME, layout);\n \n   layout = new tui_layout_split ();\n-  layout->add_window (\"asm\", 2);\n-  layout->add_window (\"status\", 0);\n-  layout->add_window (\"cmd\", 1);\n-  add_layout_command (\"asm\", layout);\n+  layout->add_window (DISASSEM_NAME, 2);\n+  layout->add_window (STATUS_NAME, 0);\n+  layout->add_window (CMD_NAME, 1);\n+  add_layout_command (DISASSEM_NAME, layout);\n \n   layout = new tui_layout_split ();\n-  layout->add_window (\"src\", 1);\n-  layout->add_window (\"asm\", 1);\n-  layout->add_window (\"status\", 0);\n-  layout->add_window (\"cmd\", 1);\n+  layout->add_window (SRC_NAME, 1);\n+  layout->add_window (DISASSEM_NAME, 1);\n+  layout->add_window (STATUS_NAME, 0);\n+  layout->add_window (CMD_NAME, 1);\n   add_layout_command (\"split\", layout);\n \n   layout = new tui_layout_split ();\n-  layout->add_window (\"regs\", 1);\n-  layout->add_window (\"src\", 1);\n-  layout->add_window (\"status\", 0);\n-  layout->add_window (\"cmd\", 1);\n+  layout->add_window (DATA_NAME, 1);\n+  layout->add_window (SRC_NAME, 1);\n+  layout->add_window (STATUS_NAME, 0);\n+  layout->add_window (CMD_NAME, 1);\n   layouts.emplace_back (layout);\n   src_regs_layout = layout;\n \n   layout = new tui_layout_split ();\n-  layout->add_window (\"regs\", 1);\n-  layout->add_window (\"asm\", 1);\n-  layout->add_window (\"status\", 0);\n-  layout->add_window (\"cmd\", 1);\n+  layout->add_window (DATA_NAME, 1);\n+  layout->add_window (DISASSEM_NAME, 1);\n+  layout->add_window (STATUS_NAME, 0);\n+  layout->add_window (CMD_NAME, 1);\n   layouts.emplace_back (layout);\n   asm_regs_layout = layout;\n }\n@@ -1010,8 +1010,8 @@ tui_new_layout_command (const char *spec, int from_tty)\n     error (_(\"Missing '}' in layout specification\"));\n   if (seen_windows.empty ())\n     error (_(\"New layout does not contain any windows\"));\n-  if (seen_windows.find (\"cmd\") == seen_windows.end ())\n-    error (_(\"New layout does not contain the \\\"cmd\\\" window\"));\n+  if (seen_windows.find (CMD_NAME) == seen_windows.end ())\n+    error (_(\"New layout does not contain the \\\"\" CMD_NAME \"\\\" window\"));\n \n   gdb::unique_xmalloc_ptr<char> cmd_name\n     = make_unique_xstrdup (new_name.c_str ());"
    }
  ]
}