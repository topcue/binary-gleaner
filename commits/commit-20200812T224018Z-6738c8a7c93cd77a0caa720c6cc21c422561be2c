{
  "sha": "6738c8a7c93cd77a0caa720c6cc21c422561be2c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjczOGM4YTdjOTNjZDc3YTBjYWE3MjBjNmNjMjFjNDIyNTYxYmUyYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-12T14:01:28Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-12T22:40:18Z"
    },
    "message": "PowerPC64 --no-pcrel-optimize\n\nThis new option effectively ignores R_PPC64_PCREL_OPT, disabling the\noptimization of instructions marked by that relocation.  The patch\nalso disables GOT indirect to GOT/TOC pointer relative code editing\nwhen --no-toc-optimize.\n\nbfd/\n\t* elf64-ppc.h (struct ppc64_elf_params): Add no_pcrel_opt.\n\t* elf64-ppc.c (ppc64_elf_relocate_section): Disable GOT reloc\n\toptimizations when --no-toc-optimize.  Disable R_PPC64_PCREL_OPT\n\toptimization when --no-pcrel-optimize.\nld/\n\t* emultempl/ppc64elf.em (params): Init new field.\n\t(enum ppc64_opt): Add OPTION_NO_PCREL_OPT.\n\t(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS),\n\t(PARSE_AND_LIST_ARGS_CASES): Support --no-pcrel-optimize.",
    "tree": {
      "sha": "fbb7e126a4d5a43d2292ecd1faafb1a781d08dde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fbb7e126a4d5a43d2292ecd1faafb1a781d08dde"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6738c8a7c93cd77a0caa720c6cc21c422561be2c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6738c8a7c93cd77a0caa720c6cc21c422561be2c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6738c8a7c93cd77a0caa720c6cc21c422561be2c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6738c8a7c93cd77a0caa720c6cc21c422561be2c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75e100a30d5dfdd3ac2b0391c17173645fc77633"
    }
  ],
  "stats": {
    "total": 145,
    "additions": 86,
    "deletions": 59
  },
  "files": [
    {
      "sha": "31a4c0be67d9c0fa85d29000a8b34d45111e7203",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6738c8a7c93cd77a0caa720c6cc21c422561be2c/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6738c8a7c93cd77a0caa720c6cc21c422561be2c/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=6738c8a7c93cd77a0caa720c6cc21c422561be2c",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.h (struct ppc64_elf_params): Add no_pcrel_opt.\n+\t* elf64-ppc.c (ppc64_elf_relocate_section): Disable GOT reloc\n+\toptimizations when --no-toc-optimize.  Disable R_PPC64_PCREL_OPT\n+\toptimization when --no-pcrel-optimize.\n+\n 2020-08-13  Alan Modra  <amodra@gmail.com>\n \n \tPR 26348"
    },
    {
      "sha": "5cbf9acfcd1cb077805fa88ec59d29b57f544d21",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 58,
      "deletions": 58,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6738c8a7c93cd77a0caa720c6cc21c422561be2c/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6738c8a7c93cd77a0caa720c6cc21c422561be2c/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=6738c8a7c93cd77a0caa720c6cc21c422561be2c",
      "patch": "@@ -15903,7 +15903,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t  break;\n \n \tcase R_PPC64_GOT16_DS:\n-\t  if ((h ? h->elf.type : ELF_ST_TYPE (sym->st_info)) == STT_GNU_IFUNC)\n+\t  if ((h ? h->elf.type : ELF_ST_TYPE (sym->st_info)) == STT_GNU_IFUNC\n+\t      || !htab->do_toc_opt)\n \t    break;\n \t  from = TOCstart + htab->sec_info[input_section->id].toc_off;\n \t  if (relocation + addend - from + 0x8000 < 0x10000\n@@ -15922,7 +15923,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \n \tcase R_PPC64_GOT16_LO_DS:\n \tcase R_PPC64_GOT16_HA:\n-\t  if ((h ? h->elf.type : ELF_ST_TYPE (sym->st_info)) == STT_GNU_IFUNC)\n+\t  if ((h ? h->elf.type : ELF_ST_TYPE (sym->st_info)) == STT_GNU_IFUNC\n+\t      || !htab->do_toc_opt)\n \t    break;\n \t  from = TOCstart + htab->sec_info[input_section->id].toc_off;\n \t  if (relocation + addend - from + 0x80008000ULL < 0x100000000ULL\n@@ -15945,34 +15947,38 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t  break;\n \n \tcase R_PPC64_GOT_PCREL34:\n-\t  if ((h ? h->elf.type : ELF_ST_TYPE (sym->st_info)) == STT_GNU_IFUNC)\n+\t  if ((h ? h->elf.type : ELF_ST_TYPE (sym->st_info)) == STT_GNU_IFUNC\n+\t      || !htab->do_toc_opt)\n \t    break;\n \t  from = (rel->r_offset\n \t\t  + input_section->output_section->vma\n \t\t  + input_section->output_offset);\n-\t  if (relocation - from + (1ULL << 33) < 1ULL << 34\n-\t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n-\t    {\n-\t      offset = rel->r_offset;\n-\t      pinsn = bfd_get_32 (input_bfd, contents + offset);\n-\t      pinsn <<= 32;\n-\t      pinsn |= bfd_get_32 (input_bfd, contents + offset + 4);\n-\t      if ((pinsn & ((-1ULL << 50) | (63ULL << 26)))\n-\t\t   == ((1ULL << 58) | (1ULL << 52) | (57ULL << 26) /* pld */))\n-\t\t{\n-\t\t  /* Replace with paddi.  */\n-\t\t  pinsn += (2ULL << 56) + (14ULL << 26) - (57ULL << 26);\n-\t\t  r_type = R_PPC64_PCREL34;\n-\t\t  rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n-\t\t  bfd_put_32 (input_bfd, pinsn >> 32, contents + offset);\n-\t\t  bfd_put_32 (input_bfd, pinsn, contents + offset + 4);\n-\t\t  goto pcrelopt;\n-\t\t}\n-\t    }\n-\t  break;\n+\t  if (!(relocation - from + (1ULL << 33) < 1ULL << 34\n+\t\t&& SYMBOL_REFERENCES_LOCAL (info, &h->elf)))\n+\t    break;\n+\n+\t  offset = rel->r_offset;\n+\t  pinsn = bfd_get_32 (input_bfd, contents + offset);\n+\t  pinsn <<= 32;\n+\t  pinsn |= bfd_get_32 (input_bfd, contents + offset + 4);\n+\t  if ((pinsn & ((-1ULL << 50) | (63ULL << 26)))\n+\t      != ((1ULL << 58) | (1ULL << 52) | (57ULL << 26) /* pld */))\n+\t    break;\n+\n+\t  /* Replace with paddi.  */\n+\t  pinsn += (2ULL << 56) + (14ULL << 26) - (57ULL << 26);\n+\t  r_type = R_PPC64_PCREL34;\n+\t  rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n+\t  bfd_put_32 (input_bfd, pinsn >> 32, contents + offset);\n+\t  bfd_put_32 (input_bfd, pinsn, contents + offset + 4);\n+\t  /* Fall through.  */\n \n \tcase R_PPC64_PCREL34:\n-\t  if (SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t  if (!htab->params->no_pcrel_opt\n+\t      && rel + 1 < relend\n+\t      && rel[1].r_offset == rel->r_offset\n+\t      && rel[1].r_info == ELF64_R_INFO (0, R_PPC64_PCREL_OPT)\n+\t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n \t    {\n \t      offset = rel->r_offset;\n \t      pinsn = bfd_get_32 (input_bfd, contents + offset);\n@@ -15982,43 +15988,37 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t   == ((1ULL << 58) | (2ULL << 56) | (1ULL << 52)\n \t\t       | (14ULL << 26) /* paddi */))\n \t\t{\n-\t\tpcrelopt:\n-\t\t  if (rel + 1 < relend\n-\t\t      && rel[1].r_offset == offset\n-\t\t      && rel[1].r_info == ELF64_R_INFO (0, R_PPC64_PCREL_OPT))\n+\t\t  bfd_vma off2 = rel[1].r_addend;\n+\t\t  if (off2 == 0)\n+\t\t    /* zero means next insn.  */\n+\t\t    off2 = 8;\n+\t\t  off2 += offset;\n+\t\t  if (off2 + 4 <= input_section->size)\n \t\t    {\n-\t\t      bfd_vma off2 = rel[1].r_addend;\n-\t\t      if (off2 == 0)\n-\t\t\t/* zero means next insn.  */\n-\t\t\toff2 = 8;\n-\t\t      off2 += offset;\n-\t\t      if (off2 + 4 <= input_section->size)\n+\t\t      uint64_t pinsn2;\n+\t\t      bfd_signed_vma addend_off;\n+\t\t      pinsn2 = bfd_get_32 (input_bfd, contents + off2);\n+\t\t      pinsn2 <<= 32;\n+\t\t      if ((pinsn2 & (63ULL << 58)) == 1ULL << 58)\n \t\t\t{\n-\t\t\t  uint64_t pinsn2;\n-\t\t\t  bfd_signed_vma addend_off;\n-\t\t\t  pinsn2 = bfd_get_32 (input_bfd, contents + off2);\n-\t\t\t  pinsn2 <<= 32;\n+\t\t\t  if (off2 + 8 > input_section->size)\n+\t\t\t    break;\n+\t\t\t  pinsn2 |= bfd_get_32 (input_bfd,\n+\t\t\t\t\t\tcontents + off2 + 4);\n+\t\t\t}\n+\t\t      if (xlate_pcrel_opt (&pinsn, &pinsn2, &addend_off))\n+\t\t\t{\n+\t\t\t  addend += addend_off;\n+\t\t\t  rel->r_addend = addend;\n+\t\t\t  bfd_put_32 (input_bfd, pinsn >> 32,\n+\t\t\t\t      contents + offset);\n+\t\t\t  bfd_put_32 (input_bfd, pinsn,\n+\t\t\t\t      contents + offset + 4);\n+\t\t\t  bfd_put_32 (input_bfd, pinsn2 >> 32,\n+\t\t\t\t      contents + off2);\n \t\t\t  if ((pinsn2 & (63ULL << 58)) == 1ULL << 58)\n-\t\t\t    {\n-\t\t\t      if (off2 + 8 > input_section->size)\n-\t\t\t\tbreak;\n-\t\t\t      pinsn2 |= bfd_get_32 (input_bfd,\n-\t\t\t\t\t\t    contents + off2 + 4);\n-\t\t\t    }\n-\t\t\t  if (xlate_pcrel_opt (&pinsn, &pinsn2, &addend_off))\n-\t\t\t    {\n-\t\t\t      addend += addend_off;\n-\t\t\t      rel->r_addend = addend;\n-\t\t\t      bfd_put_32 (input_bfd, pinsn >> 32,\n-\t\t\t\t\t  contents + offset);\n-\t\t\t      bfd_put_32 (input_bfd, pinsn,\n-\t\t\t\t\t  contents + offset + 4);\n-\t\t\t      bfd_put_32 (input_bfd, pinsn2 >> 32,\n-\t\t\t\t\t  contents + off2);\n-\t\t\t      if ((pinsn2 & (63ULL << 58)) == 1ULL << 58)\n-\t\t\t\tbfd_put_32 (input_bfd, pinsn2,\n-\t\t\t\t\t    contents + off2 + 4);\n-\t\t\t    }\n+\t\t\t    bfd_put_32 (input_bfd, pinsn2,\n+\t\t\t\t\tcontents + off2 + 4);\n \t\t\t}\n \t\t    }\n \t\t}"
    },
    {
      "sha": "a7230de81c037df3f212fd851015bd21b4797f33",
      "filename": "bfd/elf64-ppc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6738c8a7c93cd77a0caa720c6cc21c422561be2c/bfd/elf64-ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6738c8a7c93cd77a0caa720c6cc21c422561be2c/bfd/elf64-ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.h?ref=6738c8a7c93cd77a0caa720c6cc21c422561be2c",
      "patch": "@@ -57,6 +57,9 @@ struct ppc64_elf_params\n   /* Whether to use power10 instructions in linkage stubs.  */\n   int power10_stubs;\n \n+  /* Whether R_PPC64_PCREL_OPT should be ignored.  */\n+  int no_pcrel_opt;\n+\n   /* Whether to canonicalize .opd so that there are no overlapping\n      .opd entries.  */\n   int non_overlapping_opd;"
    },
    {
      "sha": "71b0d45b1401ba23ddae08d1fc412794845d2e4d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6738c8a7c93cd77a0caa720c6cc21c422561be2c/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6738c8a7c93cd77a0caa720c6cc21c422561be2c/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=6738c8a7c93cd77a0caa720c6cc21c422561be2c",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/ppc64elf.em (params): Init new field.\n+\t(enum ppc64_opt): Add OPTION_NO_PCREL_OPT.\n+\t(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS),\n+\t(PARSE_AND_LIST_ARGS_CASES): Support --no-pcrel-optimize.\n+\n 2020-08-10  Nick Clifton  <nickc@redhat.com>\n \n \tPR ld/21351"
    },
    {
      "sha": "42b9bd48fcc458a6d6ae2920154fae68264f3f99",
      "filename": "ld/emultempl/ppc64elf.em",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6738c8a7c93cd77a0caa720c6cc21c422561be2c/ld/emultempl/ppc64elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6738c8a7c93cd77a0caa720c6cc21c422561be2c/ld/emultempl/ppc64elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ppc64elf.em?ref=6738c8a7c93cd77a0caa720c6cc21c422561be2c",
      "patch": "@@ -38,7 +38,7 @@ static struct ppc64_elf_params params = { NULL,\n \t\t\t\t\t  &ppc_layout_sections_again,\n \t\t\t\t\t  1, -1, -1, 0,\n \t\t\t\t\t  ${DEFAULT_PLT_STATIC_CHAIN-0}, -1, 5,\n-\t\t\t\t\t  -1, -1, 0, -1, -1, 0};\n+\t\t\t\t\t  -1, -1, 0, 0, -1, -1, 0};\n \n /* Fake input file for stubs.  */\n static lang_input_statement_type *stub_file;\n@@ -686,6 +686,7 @@ enum ppc64_opt\n   OPTION_NO_PLT_LOCALENTRY,\n   OPTION_POWER10_STUBS,\n   OPTION_NO_POWER10_STUBS,\n+  OPTION_NO_PCREL_OPT,\n   OPTION_STUBSYMS,\n   OPTION_NO_STUBSYMS,\n   OPTION_SAVRES,\n@@ -717,6 +718,7 @@ PARSE_AND_LIST_LONGOPTS=${PARSE_AND_LIST_LONGOPTS}'\n   { \"plt-localentry\", optional_argument, NULL, OPTION_PLT_LOCALENTRY },\n   { \"no-plt-localentry\", no_argument, NULL, OPTION_NO_PLT_LOCALENTRY },\n   { \"power10-stubs\", optional_argument, NULL, OPTION_POWER10_STUBS },\n+  { \"no-pcrel-optimize\", no_argument, NULL, OPTION_NO_PCREL_OPT },\n   { \"no-power10-stubs\", no_argument, NULL, OPTION_NO_POWER10_STUBS },\n   { \"emit-stub-syms\", no_argument, NULL, OPTION_STUBSYMS },\n   { \"no-emit-stub-syms\", no_argument, NULL, OPTION_NO_STUBSYMS },\n@@ -776,6 +778,9 @@ PARSE_AND_LIST_OPTIONS=${PARSE_AND_LIST_OPTIONS}'\n   --power10-stubs [=auto]     Use Power10 PLT call stubs (default auto)\\n\"\n \t\t   ));\n   fprintf (file, _(\"\\\n+  --no-pcrel-optimize         Don'\\''t perform R_PPC64_PCREL_OPT optimization\\n\"\n+\t\t   ));\n+  fprintf (file, _(\"\\\n   --no-power10-stubs          Don'\\''t use Power10 PLT call stubs\\n\"\n \t\t   ));\n   fprintf (file, _(\"\\\n@@ -909,6 +914,10 @@ PARSE_AND_LIST_ARGS_CASES=${PARSE_AND_LIST_ARGS_CASES}'\n       params.power10_stubs = 0;\n       break;\n \n+    case OPTION_NO_PCREL_OPT:\n+      params.no_pcrel_opt = 1;\n+      break;\n+\n     case OPTION_STUBSYMS:\n       params.emit_stub_syms = 1;\n       break;\n@@ -985,6 +994,7 @@ PARSE_AND_LIST_ARGS_CASES=${PARSE_AND_LIST_ARGS_CASES}'\n       params.no_multi_toc = 1;\n       no_toc_sort = 1;\n       params.plt_static_chain = 1;\n+      params.no_pcrel_opt = 1;\n       return FALSE;\n '\n "
    }
  ]
}