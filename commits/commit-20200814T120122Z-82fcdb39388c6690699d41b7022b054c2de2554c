{
  "sha": "82fcdb39388c6690699d41b7022b054c2de2554c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODJmY2RiMzkzODhjNjY5MDY5OWQ0MWI3MDIyYjA1NGMyZGUyNTU0Yw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-14T10:49:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-14T12:01:22Z"
    },
    "message": "PR26388, objdump debug dump memory leaks\n\nnum_debug_info_entries is used not just as a count but also as a flag\n(DEBUG_INFO_UNAVAILABLE) after some errors.  That means\nnum_debug_info_entries can't be used when cleaning up malloc'd info.\n\n\tPR 26388\n\t* dwarf.c (free_debug_memory): Free alloc_num_debug_info_entries\n\tof debug_information.  Correct test of max_loc_offsets and\n\tmax_range_lists.\n\t* rddbg.c (read_debugging_info): Free dhandle on error.",
    "tree": {
      "sha": "6b1b98eb38205802317aa297108d6a6b25533cd4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6b1b98eb38205802317aa297108d6a6b25533cd4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/82fcdb39388c6690699d41b7022b054c2de2554c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82fcdb39388c6690699d41b7022b054c2de2554c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/82fcdb39388c6690699d41b7022b054c2de2554c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82fcdb39388c6690699d41b7022b054c2de2554c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc0efc4bd704f09f59dd87e354c734f902017094",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc0efc4bd704f09f59dd87e354c734f902017094",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc0efc4bd704f09f59dd87e354c734f902017094"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 21,
    "deletions": 13
  },
  "files": [
    {
      "sha": "7a6479b008e1f7039077c25de8bb6a5a0d74249d",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82fcdb39388c6690699d41b7022b054c2de2554c/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82fcdb39388c6690699d41b7022b054c2de2554c/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=82fcdb39388c6690699d41b7022b054c2de2554c",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26388\n+\t* dwarf.c (free_debug_memory): Free alloc_num_debug_info_entries\n+\tof debug_information.  Correct test of max_loc_offsets and\n+\tmax_range_lists.\n+\t* rddbg.c (read_debugging_info): Free dhandle on error.\n+\n 2020-08-14  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/binutils-all/mangled.s: Use dc.a rather than dc.d."
    },
    {
      "sha": "5275994871849f5ab00de7ae6f8ea52dba5e1bba",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82fcdb39388c6690699d41b7022b054c2de2554c/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82fcdb39388c6690699d41b7022b054c2de2554c/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=82fcdb39388c6690699d41b7022b054c2de2554c",
      "patch": "@@ -10777,18 +10777,15 @@ free_debug_memory (void)\n \n   if (debug_information != NULL)\n     {\n-      if (num_debug_info_entries != DEBUG_INFO_UNAVAILABLE)\n+      for (i = 0; i < alloc_num_debug_info_entries; i++)\n \t{\n-\t  for (i = 0; i < num_debug_info_entries; i++)\n+\t  if (debug_information [i].max_loc_offsets)\n \t    {\n-\t      if (!debug_information [i].max_loc_offsets)\n-\t\t{\n-\t\t  free (debug_information [i].loc_offsets);\n-\t\t  free (debug_information [i].have_frame_base);\n-\t\t}\n-\t      if (!debug_information [i].max_range_lists)\n-\t\tfree (debug_information [i].range_lists);\n+\t      free (debug_information [i].loc_offsets);\n+\t      free (debug_information [i].have_frame_base);\n \t    }\n+\t  if (debug_information [i].max_range_lists)\n+\t    free (debug_information [i].range_lists);\n \t}\n       free (debug_information);\n       debug_information = NULL;"
    },
    {
      "sha": "f8ea2f99afaa5a6f04c094bd59c3125962766279",
      "filename": "binutils/rddbg.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82fcdb39388c6690699d41b7022b054c2de2554c/binutils/rddbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82fcdb39388c6690699d41b7022b054c2de2554c/binutils/rddbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/rddbg.c?ref=82fcdb39388c6690699d41b7022b054c2de2554c",
      "patch": "@@ -43,7 +43,8 @@ static void free_saved_stabs (void);\n    pointer.  */\n \n void *\n-read_debugging_info (bfd *abfd, asymbol **syms, long symcount, bfd_boolean no_messages)\n+read_debugging_info (bfd *abfd, asymbol **syms, long symcount,\n+\t\t     bfd_boolean no_messages)\n {\n   void *dhandle;\n   bfd_boolean found;\n@@ -54,13 +55,13 @@ read_debugging_info (bfd *abfd, asymbol **syms, long symcount, bfd_boolean no_me\n \n   if (! read_section_stabs_debugging_info (abfd, syms, symcount, dhandle,\n \t\t\t\t\t   &found))\n-    return NULL;\n+    goto err_exit;\n \n   if (bfd_get_flavour (abfd) == bfd_target_aout_flavour)\n     {\n       if (! read_symbol_stabs_debugging_info (abfd, syms, symcount, dhandle,\n \t\t\t\t\t      &found))\n-\treturn NULL;\n+\tgoto err_exit;\n     }\n \n   /* Try reading the COFF symbols if we didn't find any stabs in COFF\n@@ -70,7 +71,7 @@ read_debugging_info (bfd *abfd, asymbol **syms, long symcount, bfd_boolean no_me\n       && symcount > 0)\n     {\n       if (! parse_coff (abfd, syms, symcount, dhandle))\n-\treturn NULL;\n+\tgoto err_exit;\n       found = TRUE;\n     }\n \n@@ -79,6 +80,8 @@ read_debugging_info (bfd *abfd, asymbol **syms, long symcount, bfd_boolean no_me\n       if (! no_messages)\n \tnon_fatal (_(\"%s: no recognized debugging information\"),\n \t\t   bfd_get_filename (abfd));\n+    err_exit:\n+      free (dhandle);\n       return NULL;\n     }\n "
    }
  ]
}