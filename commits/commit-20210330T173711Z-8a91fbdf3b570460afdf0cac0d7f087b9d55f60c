{
  "sha": "8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGE5MWZiZGYzYjU3MDQ2MGFmZGYwY2FjMGQ3ZjA4N2I5ZDU1ZjYwYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-03-30T17:37:11Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-03-30T17:37:11Z"
    },
    "message": "gdb/dwarf: disable per-BFD resource sharing for -readnow objfiles\n\nNew in v2:\n\n  - Disable sharing only for -readnow objfiles, not all objfiles.\n\nAs described in PR 27541, we hit an internal error when loading a binary\nthe standard way and then loading it with the -readnow option:\n\n    $ ./gdb -nx -q --data-directory=data-directory ~/a.out -ex \"set confirm off\" -ex \"file -readnow ~/a.out\"\n    Reading symbols from /home/simark/a.out...\n    Reading symbols from ~/a.out...\n    /home/simark/src/binutils-gdb/gdb/dwarf2/read.c:8098: internal-error: void create_all_comp_units(dwarf2_per_objfile*): Assertion `per_objfile->per_bfd->all_comp_units.empty ()' failed.\n\nThis is a recurring problem that exposes a design issue in the DWARF\nper-BFD sharing feature.  Things work well when loading a binary with\nthe same method (with/without index, with/without readnow) twice in a\nrow.  But they don't work so well when loading a binary with different\nmethods.  See this previous fix, for example:\n\n    efb763a5ea35 (\"gdb: check for partial symtab presence in dwarf2_initialize_objfile\")\n\nThat one handled the case where the first load is normal (uses partial\nsymbols) and the second load uses an index.\n\nThe problem is that when loading an objfile with a method A, we create a\ndwarf2_per_bfd and some dwarf2_per_cu_data and initialize them with the\ndata belonging to that method.  When loading another obfile sharing the\nsame BFD but with a different method B, it's not clear how to re-use the\ndwarf2_per_bfd/dwarf2_per_cu_data previously created, because they\ncontain the data specific to method A.\n\nI think the most sensible fix would be to not share a dwarf2_per_bfd\nbetween two objfiles loaded with different methods.  That means that two\nobjfiles sharing the same BFD and loaded the same way would share a\ndwarf2_per_bfd.  Two objfiles sharing the same BFD but loaded with\ndifferent methods would use two different dwarf2_per_bfd structures.\n\nHowever, this isn't a trivial change.  So to fix the known issue quickly\n(including in the gdb 10 branch), this patch just disables all\ndwarf2_per_bfd sharing for objfiles using READNOW.\n\nGeneralize the gdb.base/index-cache-load-twice.exp test to test all\nthe possible combinations of loading a file with partial symtabs, index\nand readnow.  Move it to gdb.dwarf2, since it really exercises features\nof the DWARF reader.\n\ngdb/ChangeLog:\n\n\tPR gdb/27541\n\t* dwarf2/read.c (dwarf2_has_info): Don't share dwarf2_per_bfd\n\twith objfiles using READNOW.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/27541\n\t* gdb.base/index-cache-load-twice.exp: Remove.\n\t* gdb.base/index-cache-load-twice.c: Remove.\n\t* gdb.dwarf2/per-bfd-sharing.exp: New.\n\t* gdb.dwarf2/per-bfd-sharing.c: New.\n\nChange-Id: I9ffcf1e136f3e75242f70e4e58e4ba1fd3083389",
    "tree": {
      "sha": "221ffec33f1726400c34965b3ee4eaa6cfce0262",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/221ffec33f1726400c34965b3ee4eaa6cfce0262"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b953e70356feb6161a2c1c5b18dbebcdb7ea0c94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b953e70356feb6161a2c1c5b18dbebcdb7ea0c94",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b953e70356feb6161a2c1c5b18dbebcdb7ea0c94"
    }
  ],
  "stats": {
    "total": 168,
    "additions": 122,
    "deletions": 46
  },
  "files": [
    {
      "sha": "a4400b3a77cdd00e3edd5082bf3a638bb979a5a7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-30  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27541\n+\t* dwarf2/read.c (dwarf2_has_info): Don't share dwarf2_per_bfd\n+\twith objfiles using READNOW.\n+\n 2021-03-29  Tom Tromey  <tromey@adacore.com>\n \n \t* top.c (check_frame_language_change): Update."
    },
    {
      "sha": "24183014cf4b3d77faa5fb1c9d493b3b4b3e1156",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
      "patch": "@@ -1951,9 +1951,14 @@ dwarf2_has_info (struct objfile *objfile,\n     {\n       dwarf2_per_bfd *per_bfd;\n \n-      /* We can share a \"dwarf2_per_bfd\" with other objfiles if the BFD\n-\t doesn't require relocations.  */\n-      if (!gdb_bfd_requires_relocations (objfile->obfd))\n+      /* We can share a \"dwarf2_per_bfd\" with other objfiles if the\n+\t BFD doesn't require relocations.\n+\n+\t We don't share with objfiles for which -readnow was requested,\n+\t because it would complicate things when loading the same BFD with\n+\t -readnow and then without -readnow.  */\n+      if (!gdb_bfd_requires_relocations (objfile->obfd)\n+\t  && (objfile->flags & OBJF_READNOW) == 0)\n \t{\n \t  /* See if one has been created for this BFD yet.  */\n \t  per_bfd = dwarf2_per_bfd_bfd_data_key.get (objfile->obfd);"
    },
    {
      "sha": "c5cae58b3997470356e174e23ad55c32d1ba17b9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-30  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27541\n+\t* gdb.base/index-cache-load-twice.exp: Remove.\n+\t* gdb.base/index-cache-load-twice.c: Remove.\n+\t* gdb.dwarf2/per-bfd-sharing.exp: New.\n+\t* gdb.dwarf2/per-bfd-sharing.c: New.\n+\n 2021-03-30  Tom de Vries  <tdevries@suse.de>\n \n \tPR testsuite/27604"
    },
    {
      "sha": "f442527d81f88cd1605cbc3a1982cc6f31a485a9",
      "filename": "gdb/testsuite/gdb.base/index-cache-load-twice.exp",
      "status": "removed",
      "additions": 0,
      "deletions": 42,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b953e70356feb6161a2c1c5b18dbebcdb7ea0c94/gdb/testsuite/gdb.base/index-cache-load-twice.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b953e70356feb6161a2c1c5b18dbebcdb7ea0c94/gdb/testsuite/gdb.base/index-cache-load-twice.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/index-cache-load-twice.exp?ref=b953e70356feb6161a2c1c5b18dbebcdb7ea0c94",
      "patch": "@@ -1,42 +0,0 @@\n-#   Copyright 2020-2021 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-\n-# This test checks that loading a file twice with the index cache enabled does\n-# not crash.\n-\n-standard_testfile\n-\n-lassign [remote_exec host mktemp -d] ret cache_dir\n-\n-# The output of mktemp contains an end of line, remove it.\n-set cache_dir [string trimright $cache_dir \\r\\n]\n-\n-if { $ret != 0 } {\n-    fail \"couldn't create temporary cache dir\"\n-    return\n-}\n-\n-save_vars { GDBFLAGS } {\n-    set GDBFLAGS \"$GDBFLAGS -iex \\\"set index-cache directory $cache_dir\\\"\"\n-    set GDBFLAGS \"$GDBFLAGS -iex \\\"set index-cache on\\\"\"\n-\n-    if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile \\\n-\t  {debug additional_flags=-Wl,--build-id}] } {\n-\treturn\n-    }\n-\n-    # This file command would generate an internal error.\n-    gdb_file_cmd [standard_output_file $testfile]\n-}"
    },
    {
      "sha": "455ea3d54074d0602b4db5cf853c9e6bb78f71ad",
      "filename": "gdb/testsuite/gdb.dwarf2/per-bfd-sharing.c",
      "status": "renamed",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/testsuite/gdb.dwarf2/per-bfd-sharing.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/testsuite/gdb.dwarf2/per-bfd-sharing.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/per-bfd-sharing.c?ref=8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
      "patch": "@@ -15,8 +15,14 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+static\n+int foo (int a, int b)\n+{\n+  return a + b;\n+}\n+\n int\n main (void)\n {\n-  return 0;\n+  return foo (2, 3);\n }",
      "previous_filename": "gdb/testsuite/gdb.base/index-cache-load-twice.c"
    },
    {
      "sha": "22ab91f8f65e784234aac25fa269b9f50fdd2007",
      "filename": "gdb/testsuite/gdb.dwarf2/per-bfd-sharing.exp",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/testsuite/gdb.dwarf2/per-bfd-sharing.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a91fbdf3b570460afdf0cac0d7f087b9d55f60c/gdb/testsuite/gdb.dwarf2/per-bfd-sharing.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/per-bfd-sharing.exp?ref=8a91fbdf3b570460afdf0cac0d7f087b9d55f60c",
      "patch": "@@ -0,0 +1,93 @@\n+#   Copyright 2020-2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test checks that loading a file with different methods (partial symtabs,\n+# index, readnow) does not crash.\n+\n+standard_testfile\n+\n+lassign [remote_exec host mktemp -d] ret cache_dir\n+\n+# The output of mktemp contains an end of line, remove it.\n+set cache_dir [string trimright $cache_dir \\r\\n]\n+\n+if { $ret != 0 } {\n+    fail \"couldn't create temporary cache dir\"\n+    return\n+}\n+\n+verbose -log \"Index cache dir: $cache_dir\"\n+\n+if { [build_executable \"failed to prepare\" $testfile $srcfile \\\n+\t  {debug additional_flags=-Wl,--build-id}] == -1 } {\n+    return\n+}\n+\n+# Populate the index-cache.\n+with_test_prefix \"populate index cache\" {\n+    clean_restart\n+\n+    gdb_test_no_output \"set index-cache directory $cache_dir\" \\\n+\t\"set index-cache directory\"\n+    gdb_test_no_output \"set index-cache on\"\n+    gdb_test \"file $binfile\" \"Reading symbols from .*\" \"file\"\n+}\n+\n+proc load_binary { method } {\n+    global binfile\n+    global hex\n+\n+    if { $method == \"standard\" } {\n+\tgdb_test \"file $binfile\" \"Reading symbols from .*\" \"file\"\n+    } elseif { $method == \"index\" } {\n+\tgdb_test_no_output \"set index-cache on\"\n+\tgdb_test \"file $binfile\" \"Reading symbols from .*\" \"file index\"\n+\tgdb_test_no_output \"set index-cache off\"\n+    } elseif { $method == \"readnow\" } {\n+\tgdb_test \"file -readnow $binfile\" \\\n+\t    \"Reading symbols from .*Expanding full symbols from .*\" \\\n+\t    \"file readnow\"\n+    } else {\n+\terror \"unknown method\"\n+    }\n+\n+    # Print a static function: seeing it and its signature confirms GDB\n+    # sees some symbols.\n+    gdb_test \"print foo\" \" = {int \\\\(int, int\\\\)} $hex <foo>\"\n+}\n+\n+set methods {standard index readnow}\n+\n+foreach_with_prefix first $methods {\n+    foreach_with_prefix second $methods {\n+\tforeach_with_prefix third $methods {\n+\t    # Start with a clean GDB.\n+\t    clean_restart\n+\n+\t    # Set the index cache dir, but don't enable the index-cache, it will\n+\t    # be enabled only when needed, when loading a file with the \"index\"\n+\t    # method.\n+\t    gdb_test_no_output \"set index-cache directory $cache_dir\" \\\n+\t\t\"set index-cache directory\"\n+\n+\t    # Avoid GDB asking whether we really want to load a new binary.\n+\t    gdb_test_no_output \"set confirm off\"\n+\n+\t    with_test_prefix \"load first\" { load_binary $first }\n+\t    with_test_prefix \"load second\" { load_binary $second }\n+\t    with_test_prefix \"load third\" { load_binary $third }\n+\t}\n+    }\n+}"
    }
  ]
}