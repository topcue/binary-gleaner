{
  "sha": "4196ab2a6d348f76c0e5e78252e44d9c631636d2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDE5NmFiMmE2ZDM0OGY3NmMwZTVlNzgyNTJlNDRkOWM2MzE2MzZkMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-14T15:18:21Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-15T13:42:21Z"
    },
    "message": "Replace write_inferior_memory with target_write_memory\n\ntarget_write_memory is just a simple wrapper for\nwrite_inferior_memory.  Because target_write_memory is needed for\ngdbsupport, and because gdb uses the name \"target_write_memory\"\neverywhere, this patch renames write_inferior_memory and removes the\nwrapper.  I think this brings gdb and gdbserver slightly more in sync.\n\ngdb/gdbserver/ChangeLog\n2019-08-15  Tom Tromey  <tromey@adacore.com>\n\n\t* tracepoint.c (write_inferior_data_pointer)\n\t(write_inferior_integer, write_inferior_int8)\n\t(write_inferior_uinteger, m_tracepoint_action_download)\n\t(r_tracepoint_action_download, x_tracepoint_action_download)\n\t(l_tracepoint_action_download, clear_inferior_trace_buffer)\n\t(download_agent_expr, download_tracepoint_1)\n\t(download_trace_state_variables, upload_fast_traceframes): Update.\n\t* server.c (gdb_write_memory): Update.\n\t* remote-utils.c (relocate_instruction): Update.\n\t* proc-service.c (ps_pdwrite): Update.\n\t* mem-break.c (remove_memory_breakpoint)\n\t(delete_fast_tracepoint_jump, set_fast_tracepoint_jump)\n\t(uninsert_fast_tracepoint_jumps_at)\n\t(reinsert_fast_tracepoint_jumps_at): Update.\n\t* linux-x86-low.c (append_insns)\n\t(i386_install_fast_tracepoint_jump_pad)\n\t(amd64_write_goto_address, i386_write_goto_address): Update.\n\t* linux-s390-low.c (append_insns, s390_write_goto_address):\n\tUpdate.\n\t* linux-ppc-low.c (ppc_relocate_instruction)\n\t(ppc_install_fast_tracepoint_jump_pad, emit_insns)\n\t(ppc_write_goto_address): Update.\n\t* linux-aarch64-low.c (append_insns): Update.\n\t* target.h (struct target_ops): Update.\n\t(write_inferior_memory): Don't declare.\n\t* target.c (target_write_memory): Rename from\n\twrite_inferior_memory.  Remove old target_write_memory.",
    "tree": {
      "sha": "94cdb8e141b9a10aa46f5234ae0ee5219443b872",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/94cdb8e141b9a10aa46f5234ae0ee5219443b872"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4196ab2a6d348f76c0e5e78252e44d9c631636d2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4196ab2a6d348f76c0e5e78252e44d9c631636d2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4196ab2a6d348f76c0e5e78252e44d9c631636d2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4196ab2a6d348f76c0e5e78252e44d9c631636d2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6778d00df0fbc7fe53801717eb934a5d7b9674a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6778d00df0fbc7fe53801717eb934a5d7b9674a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6778d00df0fbc7fe53801717eb934a5d7b9674a"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 89,
    "deletions": 68
  },
  "files": [
    {
      "sha": "f53668672b8566c5b43636d2e98dd24c7e1368ca",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1,3 +1,33 @@\n+2019-08-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* tracepoint.c (write_inferior_data_pointer)\n+\t(write_inferior_integer, write_inferior_int8)\n+\t(write_inferior_uinteger, m_tracepoint_action_download)\n+\t(r_tracepoint_action_download, x_tracepoint_action_download)\n+\t(l_tracepoint_action_download, clear_inferior_trace_buffer)\n+\t(download_agent_expr, download_tracepoint_1)\n+\t(download_trace_state_variables, upload_fast_traceframes): Update.\n+\t* server.c (gdb_write_memory): Update.\n+\t* remote-utils.c (relocate_instruction): Update.\n+\t* proc-service.c (ps_pdwrite): Update.\n+\t* mem-break.c (remove_memory_breakpoint)\n+\t(delete_fast_tracepoint_jump, set_fast_tracepoint_jump)\n+\t(uninsert_fast_tracepoint_jumps_at)\n+\t(reinsert_fast_tracepoint_jumps_at): Update.\n+\t* linux-x86-low.c (append_insns)\n+\t(i386_install_fast_tracepoint_jump_pad)\n+\t(amd64_write_goto_address, i386_write_goto_address): Update.\n+\t* linux-s390-low.c (append_insns, s390_write_goto_address):\n+\tUpdate.\n+\t* linux-ppc-low.c (ppc_relocate_instruction)\n+\t(ppc_install_fast_tracepoint_jump_pad, emit_insns)\n+\t(ppc_write_goto_address): Update.\n+\t* linux-aarch64-low.c (append_insns): Update.\n+\t* target.h (struct target_ops): Update.\n+\t(write_inferior_memory): Don't declare.\n+\t* target.c (target_write_memory): Rename from\n+\twrite_inferior_memory.  Remove old target_write_memory.\n+\n 2019-08-15  Tom Tromey  <tromey@adacore.com>\n \n \t* target.c (write_inferior_memory): Use std::vector."
    },
    {
      "sha": "33095ea752d5fee69e66b814dc865d8c876a5085",
      "filename": "gdb/gdbserver/linux-aarch64-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-aarch64-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-aarch64-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-aarch64-low.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1626,11 +1626,11 @@ append_insns (CORE_ADDR *to, size_t len, const uint32_t *buf)\n   for (i = 0; i < len; i++)\n     le_buf[i] = htole32 (buf[i]);\n \n-  write_inferior_memory (*to, (const unsigned char *) le_buf, byte_len);\n+  target_write_memory (*to, (const unsigned char *) le_buf, byte_len);\n \n   xfree (le_buf);\n #else\n-  write_inferior_memory (*to, (const unsigned char *) buf, byte_len);\n+  target_write_memory (*to, (const unsigned char *) buf, byte_len);\n #endif\n \n   *to += byte_len;"
    },
    {
      "sha": "8a0965bd20aeb45306a9fd6f5695dc36ae767e89",
      "filename": "gdb/gdbserver/linux-ppc-low.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-ppc-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-ppc-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-ppc-low.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1535,12 +1535,12 @@ ppc_relocate_instruction (CORE_ADDR *to, CORE_ADDR oldloc)\n \n \t  /* Jump over the unconditional branch.  */\n \t  insn = (insn & ~0xfffc) | 0x8;\n-\t  write_inferior_memory (*to, (unsigned char *) &insn, 4);\n+\t  target_write_memory (*to, (unsigned char *) &insn, 4);\n \t  *to += 4;\n \n \t  /* Build a unconditional branch and copy LK bit.  */\n \t  insn = (18 << 26) | (0x3fffffc & newrel) | (insn & 0x3);\n-\t  write_inferior_memory (*to, (unsigned char *) &insn, 4);\n+\t  target_write_memory (*to, (unsigned char *) &insn, 4);\n \t  *to += 4;\n \n \t  return;\n@@ -1563,14 +1563,14 @@ ppc_relocate_instruction (CORE_ADDR *to, CORE_ADDR oldloc)\n \t  bdnz_insn |= (insn ^ (1 << 22)) & (1 << 22);\n \t  bf_insn |= (insn ^ (1 << 24)) & (1 << 24);\n \n-\t  write_inferior_memory (*to, (unsigned char *) &bdnz_insn, 4);\n+\t  target_write_memory (*to, (unsigned char *) &bdnz_insn, 4);\n \t  *to += 4;\n-\t  write_inferior_memory (*to, (unsigned char *) &bf_insn, 4);\n+\t  target_write_memory (*to, (unsigned char *) &bf_insn, 4);\n \t  *to += 4;\n \n \t  /* Build a unconditional branch and copy LK bit.  */\n \t  insn = (18 << 26) | (0x3fffffc & newrel) | (insn & 0x3);\n-\t  write_inferior_memory (*to, (unsigned char *) &insn, 4);\n+\t  target_write_memory (*to, (unsigned char *) &insn, 4);\n \t  *to += 4;\n \n \t  return;\n@@ -1583,14 +1583,14 @@ ppc_relocate_instruction (CORE_ADDR *to, CORE_ADDR oldloc)\n \n \t  /* Build a unconditional branch and copy LK bit.  */\n \t  insn = (18 << 26) | (0x3fffffc & newrel) | (insn & 0x3);\n-\t  write_inferior_memory (*to, (unsigned char *) &insn, 4);\n+\t  target_write_memory (*to, (unsigned char *) &insn, 4);\n \t  *to += 4;\n \n \t  return;\n \t}\n     }\n \n-  write_inferior_memory (*to, (unsigned char *) &insn, 4);\n+  target_write_memory (*to, (unsigned char *) &insn, 4);\n   *to += 4;\n }\n \n@@ -1750,7 +1750,7 @@ ppc_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n   p += GEN_ADDI (p, 1, 1, frame_size);\n \n   /* Flush instructions to inferior memory.  */\n-  write_inferior_memory (buildaddr, (unsigned char *) buf, (p - buf) * 4);\n+  target_write_memory (buildaddr, (unsigned char *) buf, (p - buf) * 4);\n \n   /* Now, insert the original instruction to execute in the jump pad.  */\n   *adjusted_insn_addr = buildaddr + (p - buf) * 4;\n@@ -1780,7 +1780,7 @@ ppc_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n     }\n   /* b <tpaddr+4> */\n   p += GEN_B (p, offset);\n-  write_inferior_memory (buildaddr, (unsigned char *) buf, (p - buf) * 4);\n+  target_write_memory (buildaddr, (unsigned char *) buf, (p - buf) * 4);\n   *jump_entry = buildaddr + (p - buf) * 4;\n \n   /* The jump pad is now built.  Wire in a jump to our jump pad.  This\n@@ -1816,7 +1816,7 @@ static void\n emit_insns (uint32_t *buf, int n)\n {\n   n = n * sizeof (uint32_t);\n-  write_inferior_memory (current_insn_ptr, (unsigned char *) buf, n);\n+  target_write_memory (current_insn_ptr, (unsigned char *) buf, n);\n   current_insn_ptr += n;\n }\n \n@@ -2604,7 +2604,7 @@ ppc_write_goto_address (CORE_ADDR from, CORE_ADDR to, int size)\n     }\n \n   if (!emit_error)\n-    write_inferior_memory (from, (unsigned char *) &insn, 4);\n+    target_write_memory (from, (unsigned char *) &insn, 4);\n }\n \n /* Table of emit ops for 32-bit.  */"
    },
    {
      "sha": "cd90181308125f6ca5f4ab819a56b4b05f5cfabb",
      "filename": "gdb/gdbserver/linux-s390-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-s390-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-s390-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-s390-low.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1036,7 +1036,7 @@ static const unsigned char s390_ft_exit_gpr_zarch[] = {\n static void\n append_insns (CORE_ADDR *to, size_t len, const unsigned char *buf)\n {\n-  write_inferior_memory (*to, buf, len);\n+  target_write_memory (*to, buf, len);\n   *to += len;\n }\n \n@@ -1793,7 +1793,7 @@ s390_write_goto_address (CORE_ADDR from, CORE_ADDR to, int size)\n     }\n \n   memcpy (buf, &sdiff, sizeof sdiff);\n-  write_inferior_memory (from, buf, sizeof sdiff);\n+  target_write_memory (from, buf, sizeof sdiff);\n }\n \n /* Preparation for emitting a literal pool of given size.  Loads the address"
    },
    {
      "sha": "cafff6b109bea9fedeaab6fb59b65e4e21b451f0",
      "filename": "gdb/gdbserver/linux-x86-low.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-x86-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/linux-x86-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-x86-low.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1007,7 +1007,7 @@ x86_supports_tracepoints (void)\n static void\n append_insns (CORE_ADDR *to, size_t len, const unsigned char *buf)\n {\n-  write_inferior_memory (*to, buf, len);\n+  target_write_memory (*to, buf, len);\n   *to += len;\n }\n \n@@ -1385,7 +1385,7 @@ i386_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n       offset = *jump_entry - (*trampoline + sizeof (jump_insn));\n       memcpy (buf, jump_insn, sizeof (jump_insn));\n       memcpy (buf + 1, &offset, 4);\n-      write_inferior_memory (*trampoline, buf, sizeof (jump_insn));\n+      target_write_memory (*trampoline, buf, sizeof (jump_insn));\n \n       /* Use a 16-bit relative jump instruction to jump to the trampoline.  */\n       offset = (*trampoline - (tpaddr + sizeof (small_jump_insn))) & 0xffff;\n@@ -1780,7 +1780,7 @@ amd64_write_goto_address (CORE_ADDR from, CORE_ADDR to, int size)\n     }\n \n   memcpy (buf, &diff, sizeof (int));\n-  write_inferior_memory (from, buf, sizeof (int));\n+  target_write_memory (from, buf, sizeof (int));\n }\n \n static void\n@@ -2398,7 +2398,7 @@ i386_write_goto_address (CORE_ADDR from, CORE_ADDR to, int size)\n     }\n \n   memcpy (buf, &diff, sizeof (int));\n-  write_inferior_memory (from, buf, sizeof (int));\n+  target_write_memory (from, buf, sizeof (int));\n }\n \n static void"
    },
    {
      "sha": "582fcac1632a226452c88ba9a614b18cf871e5b7",
      "filename": "gdb/gdbserver/mem-break.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/mem-break.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/mem-break.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/mem-break.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -401,15 +401,15 @@ remove_memory_breakpoint (struct raw_breakpoint *bp)\n   int err;\n \n   /* Since there can be trap breakpoints inserted in the same address\n-     range, we use `write_inferior_memory', which takes care of\n+     range, we use `target_write_memory', which takes care of\n      layering breakpoints on top of fast tracepoints, and on top of\n      the buffer we pass it.  This works because the caller has already\n      either unlinked the breakpoint or marked it uninserted.  Also\n      note that we need to pass the current shadow contents, because\n-     write_inferior_memory updates any shadow memory with what we pass\n+     target_write_memory updates any shadow memory with what we pass\n      here, and we want that to be a nop.  */\n   memcpy (buf, bp->old_data, bp_size (bp));\n-  err = write_inferior_memory (bp->pc, buf, bp_size (bp));\n+  err = target_write_memory (bp->pc, buf, bp_size (bp));\n   if (err != 0)\n     {\n       if (debug_threads)\n@@ -578,17 +578,17 @@ delete_fast_tracepoint_jump (struct fast_tracepoint_jump *todel)\n \t      *bp_link = bp->next;\n \n \t      /* Since there can be breakpoints inserted in the same\n-\t\t address range, we use `write_inferior_memory', which\n+\t\t address range, we use `target_write_memory', which\n \t\t takes care of layering breakpoints on top of fast\n \t\t tracepoints, and on top of the buffer we pass it.\n \t\t This works because we've already unlinked the fast\n \t\t tracepoint jump above.  Also note that we need to\n \t\t pass the current shadow contents, because\n-\t\t write_inferior_memory updates any shadow memory with\n+\t\t target_write_memory updates any shadow memory with\n \t\t what we pass here, and we want that to be a nop.  */\n \t      buf = (unsigned char *) alloca (bp->length);\n \t      memcpy (buf, fast_tracepoint_jump_shadow (bp), bp->length);\n-\t      ret = write_inferior_memory (bp->pc, buf, bp->length);\n+\t      ret = target_write_memory (bp->pc, buf, bp->length);\n \t      if (ret != 0)\n \t\t{\n \t\t  /* Something went wrong, relink the jump.  */\n@@ -672,14 +672,14 @@ set_fast_tracepoint_jump (CORE_ADDR where,\n   proc->fast_tracepoint_jumps = jp;\n \n   /* Since there can be trap breakpoints inserted in the same address\n-     range, we use use `write_inferior_memory', which takes care of\n+     range, we use use `target_write_memory', which takes care of\n      layering breakpoints on top of fast tracepoints, on top of the\n      buffer we pass it.  This works because we've already linked in\n      the fast tracepoint jump above.  Also note that we need to pass\n-     the current shadow contents, because write_inferior_memory\n+     the current shadow contents, because target_write_memory\n      updates any shadow memory with what we pass here, and we want\n      that to be a nop.  */\n-  err = write_inferior_memory (where, buf, length);\n+  err = target_write_memory (where, buf, length);\n   if (err != 0)\n     {\n       if (debug_threads)\n@@ -721,17 +721,17 @@ uninsert_fast_tracepoint_jumps_at (CORE_ADDR pc)\n       jp->inserted = 0;\n \n       /* Since there can be trap breakpoints inserted in the same\n-\t address range, we use use `write_inferior_memory', which\n+\t address range, we use use `target_write_memory', which\n \t takes care of layering breakpoints on top of fast\n \t tracepoints, and on top of the buffer we pass it.  This works\n \t because we've already marked the fast tracepoint fast\n \t tracepoint jump uninserted above.  Also note that we need to\n \t pass the current shadow contents, because\n-\t write_inferior_memory updates any shadow memory with what we\n+\t target_write_memory updates any shadow memory with what we\n \t pass here, and we want that to be a nop.  */\n       buf = (unsigned char *) alloca (jp->length);\n       memcpy (buf, fast_tracepoint_jump_shadow (jp), jp->length);\n-      err = write_inferior_memory (jp->pc, buf, jp->length);\n+      err = target_write_memory (jp->pc, buf, jp->length);\n       if (err != 0)\n \t{\n \t  jp->inserted = 1;\n@@ -769,16 +769,16 @@ reinsert_fast_tracepoint_jumps_at (CORE_ADDR where)\n   jp->inserted = 1;\n \n   /* Since there can be trap breakpoints inserted in the same address\n-     range, we use `write_inferior_memory', which takes care of\n+     range, we use `target_write_memory', which takes care of\n      layering breakpoints on top of fast tracepoints, and on top of\n      the buffer we pass it.  This works because we've already marked\n      the fast tracepoint jump inserted above.  Also note that we need\n      to pass the current shadow contents, because\n-     write_inferior_memory updates any shadow memory with what we pass\n+     target_write_memory updates any shadow memory with what we pass\n      here, and we want that to be a nop.  */\n   buf = (unsigned char *) alloca (jp->length);\n   memcpy (buf, fast_tracepoint_jump_shadow (jp), jp->length);\n-  err = write_inferior_memory (where, buf, jp->length);\n+  err = target_write_memory (where, buf, jp->length);\n   if (err != 0)\n     {\n       jp->inserted = 0;"
    },
    {
      "sha": "c5ebff208a9feb5c58863fc919d4aaf88c50292e",
      "filename": "gdb/gdbserver/proc-service.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/proc-service.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/proc-service.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/proc-service.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -91,7 +91,7 @@ ps_err_e\n ps_pdwrite (gdb_ps_prochandle_t ph, psaddr_t addr,\n \t    gdb_ps_write_buf_t buf, gdb_ps_size_t size)\n {\n-  if (write_inferior_memory ((uintptr_t) addr, (const gdb_byte *) buf, size)\n+  if (target_write_memory ((uintptr_t) addr, (const gdb_byte *) buf, size)\n       != 0)\n     return PS_ERR;\n   return PS_OK;"
    },
    {
      "sha": "665fc66c53dbdd1d2551dcd7e5b69fecbe960cc5",
      "filename": "gdb/gdbserver/remote-utils.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/remote-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/remote-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/remote-utils.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1636,15 +1636,15 @@ relocate_instruction (CORE_ADDR *to, CORE_ADDR oldloc)\n \t{\n \t  if (decode_X_packet (&cs.own_buf[1], len - 1, &mem_addr,\n \t\t\t       &mem_len, &mem_buf) < 0\n-\t      || write_inferior_memory (mem_addr, mem_buf, mem_len) != 0)\n+\t      || target_write_memory (mem_addr, mem_buf, mem_len) != 0)\n \t    write_enn (cs.own_buf);\n \t  else\n \t    write_ok (cs.own_buf);\n \t}\n       else\n \t{\n \t  decode_M_packet (&cs.own_buf[1], &mem_addr, &mem_len, &mem_buf);\n-\t  if (write_inferior_memory (mem_addr, mem_buf, mem_len) == 0)\n+\t  if (target_write_memory (mem_addr, mem_buf, mem_len) == 0)\n \t    write_ok (cs.own_buf);\n \t  else\n \t    write_enn (cs.own_buf);"
    },
    {
      "sha": "127cd3840bcbc5cafb453aea7b5eabfc1553c242",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -1026,7 +1026,7 @@ gdb_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)\n       if (ret == 0)\n \t{\n \t  if (set_desired_thread ())\n-\t    ret = write_inferior_memory (memaddr, myaddr, len);\n+\t    ret = target_write_memory (memaddr, myaddr, len);\n \t  else\n \t    ret = EIO;\n \t  done_accessing_memory ();"
    },
    {
      "sha": "6f6b448ecf4ee53c2223ef7762f6c151818332af",
      "filename": "gdb/gdbserver/target.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/target.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -146,9 +146,11 @@ target_read_uint32 (CORE_ADDR memaddr, uint32_t *result)\n   return read_inferior_memory (memaddr, (gdb_byte *) result, sizeof (*result));\n }\n \n+/* See target/target.h.  */\n+\n int\n-write_inferior_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n-\t\t       int len)\n+target_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n+\t\t     ssize_t len)\n {\n   /* Make a copy of the data because check_mem_write may need to\n      update it.  */\n@@ -157,14 +159,6 @@ write_inferior_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n   return (*the_target->write_memory) (memaddr, buffer.data (), len);\n }\n \n-/* See target/target.h.  */\n-\n-int\n-target_write_memory (CORE_ADDR memaddr, const gdb_byte *myaddr, ssize_t len)\n-{\n-  return write_inferior_memory (memaddr, myaddr, len);\n-}\n-\n ptid_t\n mywait (ptid_t ptid, struct target_waitstatus *ourstatus, int options,\n \tint connected_wait)"
    },
    {
      "sha": "67167cca2d3d4c3a55326c3651b135e3ac222660",
      "filename": "gdb/gdbserver/target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/target.h?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -167,7 +167,7 @@ struct target_ops\n   int (*read_memory) (CORE_ADDR memaddr, unsigned char *myaddr, int len);\n \n   /* Write memory to the inferior process.  This should generally be\n-     called through write_inferior_memory, which handles breakpoint shadowing.\n+     called through target_write_memory, which handles breakpoint shadowing.\n \n      Write LEN bytes from the buffer at MYADDR to MEMADDR.\n \n@@ -726,9 +726,6 @@ void done_accessing_memory (void);\n \n int read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len);\n \n-int write_inferior_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n-\t\t\t   int len);\n-\n int set_desired_thread ();\n \n const char *target_pid_to_str (ptid_t);"
    },
    {
      "sha": "0d0263956d307488c2577aa92617e812b042e4ea",
      "filename": "gdb/gdbserver/tracepoint.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4196ab2a6d348f76c0e5e78252e44d9c631636d2/gdb/gdbserver/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/tracepoint.c?ref=4196ab2a6d348f76c0e5e78252e44d9c631636d2",
      "patch": "@@ -440,26 +440,26 @@ static int\n write_inferior_data_pointer (CORE_ADDR symaddr, CORE_ADDR val)\n {\n   void *pval = (void *) (uintptr_t) val;\n-  return write_inferior_memory (symaddr,\n+  return target_write_memory (symaddr,\n \t\t\t\t(unsigned char *) &pval, sizeof (pval));\n }\n \n static int\n write_inferior_integer (CORE_ADDR symaddr, int val)\n {\n-  return write_inferior_memory (symaddr, (unsigned char *) &val, sizeof (val));\n+  return target_write_memory (symaddr, (unsigned char *) &val, sizeof (val));\n }\n \n static int\n write_inferior_int8 (CORE_ADDR symaddr, int8_t val)\n {\n-  return write_inferior_memory (symaddr, (unsigned char *) &val, sizeof (val));\n+  return target_write_memory (symaddr, (unsigned char *) &val, sizeof (val));\n }\n \n static int\n write_inferior_uinteger (CORE_ADDR symaddr, unsigned int val)\n {\n-  return write_inferior_memory (symaddr, (unsigned char *) &val, sizeof (val));\n+  return target_write_memory (symaddr, (unsigned char *) &val, sizeof (val));\n }\n \n static CORE_ADDR target_malloc (ULONGEST size);\n@@ -517,7 +517,7 @@ m_tracepoint_action_download (const struct tracepoint_action *action)\n {\n   CORE_ADDR ipa_action = target_malloc (sizeof (struct collect_memory_action));\n \n-  write_inferior_memory (ipa_action, (unsigned char *) action,\n+  target_write_memory (ipa_action, (unsigned char *) action,\n \t\t\t sizeof (struct collect_memory_action));\n \n   return ipa_action;\n@@ -540,7 +540,7 @@ r_tracepoint_action_download (const struct tracepoint_action *action)\n {\n   CORE_ADDR ipa_action = target_malloc (sizeof (struct collect_registers_action));\n \n-  write_inferior_memory (ipa_action, (unsigned char *) action,\n+  target_write_memory (ipa_action, (unsigned char *) action,\n \t\t\t sizeof (struct collect_registers_action));\n \n   return ipa_action;\n@@ -560,7 +560,7 @@ x_tracepoint_action_download (const struct tracepoint_action *action)\n   CORE_ADDR ipa_action = target_malloc (sizeof (struct eval_expr_action));\n   CORE_ADDR expr;\n \n-  write_inferior_memory (ipa_action, (unsigned char *) action,\n+  target_write_memory (ipa_action, (unsigned char *) action,\n \t\t\t sizeof (struct eval_expr_action));\n   expr = download_agent_expr (((struct eval_expr_action *) action)->expr);\n   write_inferior_data_pointer (ipa_action\n@@ -608,7 +608,7 @@ l_tracepoint_action_download (const struct tracepoint_action *action)\n   CORE_ADDR ipa_action\n     = target_malloc (sizeof (struct collect_static_trace_data_action));\n \n-  write_inferior_memory (ipa_action, (unsigned char *) action,\n+  target_write_memory (ipa_action, (unsigned char *) action,\n \t\t\t sizeof (struct collect_static_trace_data_action));\n \n   return ipa_action;\n@@ -1458,14 +1458,14 @@ clear_inferior_trace_buffer (void)\n   ipa_trace_buffer_ctrl.wrap = ipa_trace_buffer_hi;\n \n   /* A traceframe with zeroed fields marks the end of trace data.  */\n-  write_inferior_memory (ipa_sym_addrs.addr_trace_buffer_ctrl,\n+  target_write_memory (ipa_sym_addrs.addr_trace_buffer_ctrl,\n \t\t\t (unsigned char *) &ipa_trace_buffer_ctrl,\n \t\t\t sizeof (ipa_trace_buffer_ctrl));\n \n   write_inferior_uinteger (ipa_sym_addrs.addr_trace_buffer_ctrl_curr, 0);\n \n   /* A traceframe with zeroed fields marks the end of trace data.  */\n-  write_inferior_memory (ipa_trace_buffer_lo,\n+  target_write_memory (ipa_trace_buffer_lo,\n \t\t\t (unsigned char *) &ipa_traceframe,\n \t\t\t sizeof (ipa_traceframe));\n \n@@ -6009,12 +6009,12 @@ download_agent_expr (struct agent_expr *expr)\n   CORE_ADDR expr_bytes;\n \n   expr_addr = target_malloc (sizeof (*expr));\n-  write_inferior_memory (expr_addr, (unsigned char *) expr, sizeof (*expr));\n+  target_write_memory (expr_addr, (unsigned char *) expr, sizeof (*expr));\n \n   expr_bytes = target_malloc (expr->length);\n   write_inferior_data_pointer (expr_addr + offsetof (struct agent_expr, bytes),\n \t\t\t       expr_bytes);\n-  write_inferior_memory (expr_bytes, expr->bytes, expr->length);\n+  target_write_memory (expr_bytes, expr->bytes, expr->length);\n \n   return expr_addr;\n }\n@@ -6067,7 +6067,7 @@ download_tracepoint_1 (struct tracepoint *tpoint)\n      tracepoints before clearing our own copy.  */\n   target_tracepoint.hit_count = 0;\n \n-  write_inferior_memory (tpptr, (unsigned char *) &target_tracepoint,\n+  target_write_memory (tpptr, (unsigned char *) &target_tracepoint,\n \t\t\t sizeof (target_tracepoint));\n \n   if (tpoint->cond)\n@@ -6279,14 +6279,14 @@ download_trace_state_variables (void)\n \t Assume no next, fixup when needed.  */\n       target_tsv.next = NULL;\n \n-      write_inferior_memory (ptr, (unsigned char *) &target_tsv,\n+      target_write_memory (ptr, (unsigned char *) &target_tsv,\n \t\t\t     sizeof (target_tsv));\n \n       if (tsv->name != NULL)\n \t{\n \t  size_t size = strlen (tsv->name) + 1;\n \t  CORE_ADDR name_addr = target_malloc (size);\n-\t  write_inferior_memory (name_addr,\n+\t  target_write_memory (name_addr,\n \t\t\t\t (unsigned char *) tsv->name, size);\n \t  write_inferior_data_pointer (ptr\n \t\t\t\t       + offsetof (struct trace_state_variable,\n@@ -6548,7 +6548,7 @@ upload_fast_traceframes (void)\n \t\t   (int) (ipa_trace_buffer_hi - ipa_trace_buffer_lo));\n     }\n \n-  if (write_inferior_memory (ipa_trace_buffer_ctrl_addr,\n+  if (target_write_memory (ipa_trace_buffer_ctrl_addr,\n \t\t\t     (unsigned char *) &ipa_trace_buffer_ctrl,\n \t\t\t     sizeof (struct ipa_trace_buffer_control)))\n     return;"
    }
  ]
}