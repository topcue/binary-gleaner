{
  "sha": "ca4987847046f288573278237673ded42a2dead8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2E0OTg3ODQ3MDQ2ZjI4ODU3MzI3ODIzNzY3M2RlZDQyYTJkZWFkOA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-10T15:16:48Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-10T15:16:48Z"
    },
    "message": "[gdb/testsuite] Add string_list_to_regexp\n\nA regexp pattern with escapes like this is hard to read:\n...\nset re \"~\\\"\\[$\\]$decimal = 1\\\\\\\\n\\\"\\r\\n\\\\^done\"\n...\n\nWe can make it more readable by spacing out parts (which allows us to also use\nthe curly braces where that's convenient):\n...\nset re [list \"~\" {\"} {[$]} $decimal \" = 1\" \"\\\\\\\\\" \"n\" {\"} \"\\r\\n\" \"\\\\^\" \"done\"]\nset re [join $re \"\"]\n...\nor by using string_to_regexp:\n...\nset re [list \\\n            [string_to_regexp {~\"$}] \\\n            $decimal \\\n            [string_to_regexp \" = 1\\\\n\\\"\\r\\n^done\"]]\nset re [join $re \"\"]\n...\nNote: we have to avoid applying string_to_list to decimal, which is already a\nregexp.\n\nAdd a proc string_list_to_regexp to make it easy to do both:\n...\nset re [list \\\n            [string_list_to_regexp ~ {\"} $] \\\n            $decimal \\\n            [string_list_to_regexp \" = 1\" \\\\ n {\"} \\r\\n ^ done]]\n...\n\nAlso add a test-case gdb.testsuite/string_to_regexp.exp.",
    "tree": {
      "sha": "5d1fed8166541752f297268b45e437b1258123da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d1fed8166541752f297268b45e437b1258123da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca4987847046f288573278237673ded42a2dead8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca4987847046f288573278237673ded42a2dead8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca4987847046f288573278237673ded42a2dead8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca4987847046f288573278237673ded42a2dead8/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 78,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2dfd2db586870f0544f44abea9a80dd5d54f954f",
      "filename": "gdb/testsuite/gdb.testsuite/string_to_regexp.exp",
      "status": "added",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca4987847046f288573278237673ded42a2dead8/gdb/testsuite/gdb.testsuite/string_to_regexp.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca4987847046f288573278237673ded42a2dead8/gdb/testsuite/gdb.testsuite/string_to_regexp.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.testsuite/string_to_regexp.exp?ref=ca4987847046f288573278237673ded42a2dead8",
      "patch": "@@ -0,0 +1,66 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Testsuite self-tests for string_to_regexp/string_list_to_regexp.\n+# The former is not explicitly tested, assuming string_list_to_regexp uses\n+# string_to_regexp.\n+\n+set test_nr 0\n+\n+proc test_regexp { args } {\n+    global test_nr\n+    incr test_nr\n+\n+    set fargs {}\n+    set farg 1\n+    foreach arg $args {\n+\tif { $farg } {\n+\t    if { $arg == \"--\" } {\n+\t\tset farg 0\n+\t\tcontinue\n+\t    }\n+\t    lappend fargs $arg\n+\t} else {\n+\t    set re $arg\n+\t    break\n+\t}\n+    }\n+    set res [string_list_to_regexp {*}$fargs]\n+\n+    set test \"#$test_nr: got expected re\"\n+    if { $res eq $re } {\n+\tpass $test\n+    } else {\n+\tverbose -log \"Expecting '$re'\"\n+\tverbose -log \"Got '$res'\"\n+\tfail $test\n+    }\n+\n+    set test \"#$test_nr: re matches string\"\n+    set str [join $fargs \"\"]\n+    if { [regexp $re $str] } {\n+\tpass $test\n+    } else {\n+\tverbose -log \"Matching '$str'\"\n+\tverbose -log \"Failed against '$re'\"\n+\tfail $test\n+    }\n+}\n+\n+test_regexp abc -- abc\n+test_regexp abc def -- abcdef\n+test_regexp {\\\\} -- {\\\\\\\\}\n+test_regexp \"\\n\" -- \"\\n\"\n+test_regexp {\\n} -- {\\\\n}\n+test_regexp {\\\\} n -- {\\\\\\\\n}"
    },
    {
      "sha": "42452d93b56f5f3b9b683d912b2ccebe2cee6640",
      "filename": "gdb/testsuite/lib/gdb-utils.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca4987847046f288573278237673ded42a2dead8/gdb/testsuite/lib/gdb-utils.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca4987847046f288573278237673ded42a2dead8/gdb/testsuite/lib/gdb-utils.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb-utils.exp?ref=ca4987847046f288573278237673ded42a2dead8",
      "patch": "@@ -38,6 +38,18 @@ proc string_to_regexp {str} {\n     return $result\n }\n \n+# Given a list of strings, adds backslashes as needed to each string to\n+# create a regexp that will match the string, and join the result.\n+\n+proc string_list_to_regexp { args } {\n+    set result \"\"\n+    foreach arg $args {\n+\tset arg [string_to_regexp $arg]\n+       append result $arg\n+    }\n+    return $result\n+}\n+\n # Wrap STR in an ANSI terminal escape sequences -- one to set the\n # style to STYLE, and one to reset the style to the default.  The\n # return value is suitable for use as a regular expression."
    }
  ]
}