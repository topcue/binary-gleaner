{
  "sha": "ee87f50b8d2a0599675657a9fd2774c08261b29c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWU4N2Y1MGI4ZDJhMDU5OTY3NTY1N2E5ZmQyNzc0YzA4MjYxYjI5Yw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-29T13:33:11Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-02-04T16:01:53Z"
    },
    "message": "libctf: always name nameless types \"\", never NULL\n\nThe ctf_type_name_raw and ctf_type_aname_raw functions, which return the\nraw, unadorned name of CTF types, have one unfortunate wrinkle: they\nreturn NULL not only on error but when returning the name of types\nwithout a name in writable dicts.  This was unintended: it not only\nmakes it impossible to reliably tell if a given call to\nctf_type_name_raw failed (due to a bad string offset say), but also\ncomplicates all its callers, who now have to check for both NULL and \"\".\n\nThe written-out form of CTF has no concept of a NULL pointer instead of\na string: all null strings are strtab offset 0, \"\".  So the more we can\ndo to remove this distinction from the writable form, the less complex\nthe rest of our code needs to be.\n\nArmour against NULL in multiple places, arranging to return \"\" from\nctf_type_name_raw if offset 0 is passed in, and removing a risky\noptimization from ctf_str_add* that avoided doing anything if a NULL was\npassed in: this added needless irregularity to the functions' API\nsurface, since \"\" and NULL should be treated identically, and in the\ncase of ctf_str_add_ref, we shouldn't skip adding the passed-in REF to\nthe list of references to be updated no matter what the content of the\nstring happens to be.\n\nThis means we can simplify the deduplicator a tiny bit, also fixing a\nbug (latent when used by ld) where if the input dict was writable,\nwe failed to realise when types were nameless and could end up creating\ndeeply unhelpful synthetic forwards with no name, which we just banned\na few commits ago, so the link failed.\n\nlibctf/ChangeLog\n2021-01-27  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-string.c (ctf_str_add): Treat adding a NULL as adding \"\".\n\t(ctf_str_add_ref): Likewise.\n\t(ctf_str_add_external): Likewise.\n\t* ctf-types.c (ctf_type_name_raw): Always return \"\" for offset 0.\n\t* ctf-dedup.c (ctf_dedup_multiple_input_dicts): Don't armour\n\tagainst NULL name.\n\t(ctf_dedup_maybe_synthesize_forward): Likewise.",
    "tree": {
      "sha": "45c5ffd6921c24a3120dd414947d9563171769a2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45c5ffd6921c24a3120dd414947d9563171769a2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ee87f50b8d2a0599675657a9fd2774c08261b29c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee87f50b8d2a0599675657a9fd2774c08261b29c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ee87f50b8d2a0599675657a9fd2774c08261b29c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee87f50b8d2a0599675657a9fd2774c08261b29c/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5dacd11ddcf98c3893dfed1563feaf2a1a518389",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5dacd11ddcf98c3893dfed1563feaf2a1a518389",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5dacd11ddcf98c3893dfed1563feaf2a1a518389"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 26,
    "deletions": 8
  },
  "files": [
    {
      "sha": "35c22d9fa48d214f1c67b4f14fc80bdc512c4b55",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=ee87f50b8d2a0599675657a9fd2774c08261b29c",
      "patch": "@@ -1,3 +1,13 @@\n+2021-01-27  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-string.c (ctf_str_add): Treat adding a NULL as adding \"\".\n+\t(ctf_str_add_ref): Likewise.\n+\t(ctf_str_add_external): Likewise.\n+\t* ctf-types.c (ctf_type_name_raw): Always return \"\" for offset 0.\n+\t* ctf-dedup.c (ctf_dedup_multiple_input_dicts): Don't armour\n+\tagainst NULL name.\n+\t(ctf_dedup_maybe_synthesize_forward): Likewise.\n+\n 2021-01-27  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-create.c (ctf_serialize): Fix shadowing."
    },
    {
      "sha": "001c2483a205e964f26bcbe85b4f15436a43676f",
      "filename": "libctf/ctf-dedup.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ctf-dedup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ctf-dedup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dedup.c?ref=ee87f50b8d2a0599675657a9fd2774c08261b29c",
      "patch": "@@ -1776,7 +1776,7 @@ ctf_dedup_multiple_input_dicts (ctf_dict_t *output, ctf_dict_t **inputs,\n   name = ctf_type_name_raw (input_fp, input_id);\n \n   if ((fwdkind == CTF_K_STRUCT || fwdkind == CTF_K_UNION)\n-      && name && name[0] != '\\0')\n+      && name[0] != '\\0')\n     {\n       const void *origin;\n \n@@ -2375,20 +2375,19 @@ ctf_dedup_maybe_synthesize_forward (ctf_dict_t *output, ctf_dict_t *target,\n   ctf_dedup_t *td = &target->ctf_dedup;\n   int kind;\n   int fwdkind;\n-  const char *name;\n+  const char *name = ctf_type_name_raw (input, id);\n   const char *decorated;\n   void *v;\n   ctf_id_t emitted_forward;\n \n   if (!ctf_dynset_exists (od->cd_conflicting_types, hval, NULL)\n       || target->ctf_flags & LCTF_CHILD\n-      || !ctf_type_name_raw (input, id)\n+      || name[0] == '\\0'\n       || (((kind = ctf_type_kind_unsliced (input, id)) != CTF_K_STRUCT\n \t   && kind != CTF_K_UNION && kind != CTF_K_FORWARD)))\n     return 0;\n \n   fwdkind = ctf_type_kind_forwarded (input, id);\n-  name = ctf_type_name_raw (input, id);\n \n   ctf_dprintf (\"Using synthetic forward for conflicted struct/union with \"\n \t       \"hval %s\\n\", hval);"
    },
    {
      "sha": "91ad2e36db7f76e8c1289c24ea077108c92fccca",
      "filename": "libctf/ctf-string.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ctf-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ctf-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-string.c?ref=ee87f50b8d2a0599675657a9fd2774c08261b29c",
      "patch": "@@ -218,8 +218,9 @@ uint32_t\n ctf_str_add (ctf_dict_t *fp, const char *str)\n {\n   ctf_str_atom_t *atom;\n+\n   if (!str)\n-    return 0;\n+    str = \"\";\n \n   atom = ctf_str_add_ref_internal (fp, str, FALSE, TRUE, 0);\n   if (!atom)\n@@ -235,8 +236,9 @@ uint32_t\n ctf_str_add_ref (ctf_dict_t *fp, const char *str, uint32_t *ref)\n {\n   ctf_str_atom_t *atom;\n+\n   if (!str)\n-    return 0;\n+    str = \"\";\n \n   atom = ctf_str_add_ref_internal (fp, str, TRUE, TRUE, ref);\n   if (!atom)\n@@ -251,8 +253,9 @@ int\n ctf_str_add_external (ctf_dict_t *fp, const char *str, uint32_t offset)\n {\n   ctf_str_atom_t *atom;\n+\n   if (!str)\n-    return 0;\n+    str = \"\";\n \n   atom = ctf_str_add_ref_internal (fp, str, FALSE, FALSE, 0);\n   if (!atom)"
    },
    {
      "sha": "57a284d82e75fe8a865e274c761e518312b0259a",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee87f50b8d2a0599675657a9fd2774c08261b29c/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=ee87f50b8d2a0599675657a9fd2774c08261b29c",
      "patch": "@@ -922,7 +922,10 @@ ctf_type_name (ctf_dict_t *fp, ctf_id_t type, char *buf, size_t len)\n }\n \n /* Lookup the given type ID and return its raw, unadorned, undecorated name.\n-   The name will live as long as its ctf_dict_t does.  */\n+   The name will live as long as its ctf_dict_t does.\n+\n+   The only decoration is that a NULL return always means an error: nameless\n+   types return a null string.  */\n \n const char *\n ctf_type_name_raw (ctf_dict_t *fp, ctf_id_t type)\n@@ -932,6 +935,9 @@ ctf_type_name_raw (ctf_dict_t *fp, ctf_id_t type)\n   if ((tp = ctf_lookup_by_id (&fp, type)) == NULL)\n     return NULL;\t\t/* errno is set for us.  */\n \n+  if (tp->ctt_name == 0)\n+    return \"\";\n+\n   return ctf_strraw (fp, tp->ctt_name);\n }\n "
    }
  ]
}