{
  "sha": "2a78304e29bf783142001958730d4adf8f6a1f09",
  "node_id": "C_kwDOANOeidoAKDJhNzgzMDRlMjliZjc4MzE0MjAwMTk1ODczMGQ0YWRmOGY2YTFmMDk",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2022-01-17T09:25:08Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2022-01-17T09:25:08Z"
    },
    "message": "x86: constify disassembler static data\n\nNow that the code is intended to be largely thread-safe, we'd better not\nhave any writable static objects.",
    "tree": {
      "sha": "22fdeeafc4b0d118699bf5a0ec72a3be0d429906",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22fdeeafc4b0d118699bf5a0ec72a3be0d429906"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2a78304e29bf783142001958730d4adf8f6a1f09",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a78304e29bf783142001958730d4adf8f6a1f09",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2a78304e29bf783142001958730d4adf8f6a1f09",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a78304e29bf783142001958730d4adf8f6a1f09/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "45cf0dc2ecd2354c6f8e6d3f5d19f8012c97d978",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/45cf0dc2ecd2354c6f8e6d3f5d19f8012c97d978",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/45cf0dc2ecd2354c6f8e6d3f5d19f8012c97d978"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 58,
    "deletions": 58
  },
  "files": [
    {
      "sha": "bee7b372f0320ca799473cb82b7166872d625fc0",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 58,
      "deletions": 58,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a78304e29bf783142001958730d4adf8f6a1f09/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a78304e29bf783142001958730d4adf8f6a1f09/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=2a78304e29bf783142001958730d4adf8f6a1f09",
      "patch": "@@ -219,22 +219,22 @@ struct instr_info\n   vex;\n   unsigned char need_vex;\n \n-  const char **names64;\n-  const char **names32;\n-  const char **names16;\n-  const char **names8;\n-  const char **names8rex;\n-  const char **names_seg;\n+  const char *const *names64;\n+  const char *const *names32;\n+  const char *const *names16;\n+  const char *const *names8;\n+  const char *const *names8rex;\n+  const char *const *names_seg;\n   const char *index64;\n   const char *index32;\n-  const char **index16;\n-  const char **names_bnd;\n-  const char **names_mm;\n-  const char **names_xmm;\n-  const char **names_ymm;\n-  const char **names_zmm;\n-  const char **names_tmm;\n-  const char **names_mask;\n+  const char *const *index16;\n+  const char *const *names_bnd;\n+  const char *const *names_mm;\n+  const char *const *names_xmm;\n+  const char *const *names_ymm;\n+  const char *const *names_zmm;\n+  const char *const *names_tmm;\n+  const char *const *names_mask;\n \n   /* Remember if the current op is a jump instruction.  */\n   bool op_is_jump;\n@@ -2423,80 +2423,80 @@ struct op\n    need to update onebyte_has_modrm or twobyte_has_modrm.  */\n #define MODRM_CHECK  if (!ins->need_modrm) abort ()\n \n-static const char *intel_names64[] = {\n+static const char *const intel_names64[] = {\n   \"rax\", \"rcx\", \"rdx\", \"rbx\", \"rsp\", \"rbp\", \"rsi\", \"rdi\",\n   \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\"\n };\n-static const char *intel_names32[] = {\n+static const char *const intel_names32[] = {\n   \"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\",\n   \"r8d\", \"r9d\", \"r10d\", \"r11d\", \"r12d\", \"r13d\", \"r14d\", \"r15d\"\n };\n-static const char *intel_names16[] = {\n+static const char *const intel_names16[] = {\n   \"ax\", \"cx\", \"dx\", \"bx\", \"sp\", \"bp\", \"si\", \"di\",\n   \"r8w\", \"r9w\", \"r10w\", \"r11w\", \"r12w\", \"r13w\", \"r14w\", \"r15w\"\n };\n-static const char *intel_names8[] = {\n+static const char *const intel_names8[] = {\n   \"al\", \"cl\", \"dl\", \"bl\", \"ah\", \"ch\", \"dh\", \"bh\",\n };\n-static const char *intel_names8rex[] = {\n+static const char *const intel_names8rex[] = {\n   \"al\", \"cl\", \"dl\", \"bl\", \"spl\", \"bpl\", \"sil\", \"dil\",\n   \"r8b\", \"r9b\", \"r10b\", \"r11b\", \"r12b\", \"r13b\", \"r14b\", \"r15b\"\n };\n-static const char *intel_names_seg[] = {\n+static const char *const intel_names_seg[] = {\n   \"es\", \"cs\", \"ss\", \"ds\", \"fs\", \"gs\", \"?\", \"?\",\n };\n-static const char *intel_index64 = \"riz\";\n-static const char *intel_index32 = \"eiz\";\n-static const char *intel_index16[] = {\n+static const char intel_index64[] = \"riz\";\n+static const char intel_index32[] = \"eiz\";\n+static const char *const intel_index16[] = {\n   \"bx+si\", \"bx+di\", \"bp+si\", \"bp+di\", \"si\", \"di\", \"bp\", \"bx\"\n };\n \n-static const char *att_names64[] = {\n+static const char *const att_names64[] = {\n   \"%rax\", \"%rcx\", \"%rdx\", \"%rbx\", \"%rsp\", \"%rbp\", \"%rsi\", \"%rdi\",\n   \"%r8\", \"%r9\", \"%r10\", \"%r11\", \"%r12\", \"%r13\", \"%r14\", \"%r15\"\n };\n-static const char *att_names32[] = {\n+static const char *const att_names32[] = {\n   \"%eax\", \"%ecx\", \"%edx\", \"%ebx\", \"%esp\", \"%ebp\", \"%esi\", \"%edi\",\n   \"%r8d\", \"%r9d\", \"%r10d\", \"%r11d\", \"%r12d\", \"%r13d\", \"%r14d\", \"%r15d\"\n };\n-static const char *att_names16[] = {\n+static const char *const att_names16[] = {\n   \"%ax\", \"%cx\", \"%dx\", \"%bx\", \"%sp\", \"%bp\", \"%si\", \"%di\",\n   \"%r8w\", \"%r9w\", \"%r10w\", \"%r11w\", \"%r12w\", \"%r13w\", \"%r14w\", \"%r15w\"\n };\n-static const char *att_names8[] = {\n+static const char *const att_names8[] = {\n   \"%al\", \"%cl\", \"%dl\", \"%bl\", \"%ah\", \"%ch\", \"%dh\", \"%bh\",\n };\n-static const char *att_names8rex[] = {\n+static const char *const att_names8rex[] = {\n   \"%al\", \"%cl\", \"%dl\", \"%bl\", \"%spl\", \"%bpl\", \"%sil\", \"%dil\",\n   \"%r8b\", \"%r9b\", \"%r10b\", \"%r11b\", \"%r12b\", \"%r13b\", \"%r14b\", \"%r15b\"\n };\n-static const char *att_names_seg[] = {\n+static const char *const att_names_seg[] = {\n   \"%es\", \"%cs\", \"%ss\", \"%ds\", \"%fs\", \"%gs\", \"%?\", \"%?\",\n };\n-static const char *att_index64 = \"%riz\";\n-static const char *att_index32 = \"%eiz\";\n-static const char *att_index16[] = {\n+static const char att_index64[] = \"%riz\";\n+static const char att_index32[] = \"%eiz\";\n+static const char *const att_index16[] = {\n   \"%bx,%si\", \"%bx,%di\", \"%bp,%si\", \"%bp,%di\", \"%si\", \"%di\", \"%bp\", \"%bx\"\n };\n \n-static const char *intel_names_mm[] = {\n+static const char *const intel_names_mm[] = {\n   \"mm0\", \"mm1\", \"mm2\", \"mm3\",\n   \"mm4\", \"mm5\", \"mm6\", \"mm7\"\n };\n-static const char *att_names_mm[] = {\n+static const char *const att_names_mm[] = {\n   \"%mm0\", \"%mm1\", \"%mm2\", \"%mm3\",\n   \"%mm4\", \"%mm5\", \"%mm6\", \"%mm7\"\n };\n \n-static const char *intel_names_bnd[] = {\n+static const char *const intel_names_bnd[] = {\n   \"bnd0\", \"bnd1\", \"bnd2\", \"bnd3\"\n };\n \n-static const char *att_names_bnd[] = {\n+static const char *const att_names_bnd[] = {\n   \"%bnd0\", \"%bnd1\", \"%bnd2\", \"%bnd3\"\n };\n \n-static const char *intel_names_xmm[] = {\n+static const char *const intel_names_xmm[] = {\n   \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\",\n   \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\",\n   \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\",\n@@ -2506,7 +2506,7 @@ static const char *intel_names_xmm[] = {\n   \"xmm24\", \"xmm25\", \"xmm26\", \"xmm27\",\n   \"xmm28\", \"xmm29\", \"xmm30\", \"xmm31\"\n };\n-static const char *att_names_xmm[] = {\n+static const char *const att_names_xmm[] = {\n   \"%xmm0\", \"%xmm1\", \"%xmm2\", \"%xmm3\",\n   \"%xmm4\", \"%xmm5\", \"%xmm6\", \"%xmm7\",\n   \"%xmm8\", \"%xmm9\", \"%xmm10\", \"%xmm11\",\n@@ -2517,7 +2517,7 @@ static const char *att_names_xmm[] = {\n   \"%xmm28\", \"%xmm29\", \"%xmm30\", \"%xmm31\"\n };\n \n-static const char *intel_names_ymm[] = {\n+static const char *const intel_names_ymm[] = {\n   \"ymm0\", \"ymm1\", \"ymm2\", \"ymm3\",\n   \"ymm4\", \"ymm5\", \"ymm6\", \"ymm7\",\n   \"ymm8\", \"ymm9\", \"ymm10\", \"ymm11\",\n@@ -2527,7 +2527,7 @@ static const char *intel_names_ymm[] = {\n   \"ymm24\", \"ymm25\", \"ymm26\", \"ymm27\",\n   \"ymm28\", \"ymm29\", \"ymm30\", \"ymm31\"\n };\n-static const char *att_names_ymm[] = {\n+static const char *const att_names_ymm[] = {\n   \"%ymm0\", \"%ymm1\", \"%ymm2\", \"%ymm3\",\n   \"%ymm4\", \"%ymm5\", \"%ymm6\", \"%ymm7\",\n   \"%ymm8\", \"%ymm9\", \"%ymm10\", \"%ymm11\",\n@@ -2538,7 +2538,7 @@ static const char *att_names_ymm[] = {\n   \"%ymm28\", \"%ymm29\", \"%ymm30\", \"%ymm31\"\n };\n \n-static const char *intel_names_zmm[] = {\n+static const char *const intel_names_zmm[] = {\n   \"zmm0\", \"zmm1\", \"zmm2\", \"zmm3\",\n   \"zmm4\", \"zmm5\", \"zmm6\", \"zmm7\",\n   \"zmm8\", \"zmm9\", \"zmm10\", \"zmm11\",\n@@ -2548,7 +2548,7 @@ static const char *intel_names_zmm[] = {\n   \"zmm24\", \"zmm25\", \"zmm26\", \"zmm27\",\n   \"zmm28\", \"zmm29\", \"zmm30\", \"zmm31\"\n };\n-static const char *att_names_zmm[] = {\n+static const char *const att_names_zmm[] = {\n   \"%zmm0\", \"%zmm1\", \"%zmm2\", \"%zmm3\",\n   \"%zmm4\", \"%zmm5\", \"%zmm6\", \"%zmm7\",\n   \"%zmm8\", \"%zmm9\", \"%zmm10\", \"%zmm11\",\n@@ -2559,19 +2559,19 @@ static const char *att_names_zmm[] = {\n   \"%zmm28\", \"%zmm29\", \"%zmm30\", \"%zmm31\"\n };\n \n-static const char *intel_names_tmm[] = {\n+static const char *const intel_names_tmm[] = {\n   \"tmm0\", \"tmm1\", \"tmm2\", \"tmm3\",\n   \"tmm4\", \"tmm5\", \"tmm6\", \"tmm7\"\n };\n-static const char *att_names_tmm[] = {\n+static const char *const att_names_tmm[] = {\n   \"%tmm0\", \"%tmm1\", \"%tmm2\", \"%tmm3\",\n   \"%tmm4\", \"%tmm5\", \"%tmm6\", \"%tmm7\"\n };\n \n-static const char *intel_names_mask[] = {\n+static const char *const intel_names_mask[] = {\n   \"k0\", \"k1\", \"k2\", \"k3\", \"k4\", \"k5\", \"k6\", \"k7\"\n };\n-static const char *att_names_mask[] = {\n+static const char *const att_names_mask[] = {\n   \"%k0\", \"%k1\", \"%k2\", \"%k3\", \"%k4\", \"%k5\", \"%k6\", \"%k7\"\n };\n \n@@ -10185,7 +10185,7 @@ static const struct dis386 float_reg[][8] = {\n   },\n };\n \n-static char *fgrps[][8] = {\n+static const char *const fgrps[][8] = {\n   /* Bad opcode 0 */\n   {\n     \"(bad)\",\"(bad)\",\"(bad)\",\"(bad)\",\"(bad)\",\"(bad)\",\"(bad)\",\"(bad)\",\n@@ -11283,7 +11283,7 @@ static void\n print_register (instr_info *ins, unsigned int reg, unsigned int rexmask,\n \t\tint bytemode, int sizeflag)\n {\n-  const char **names;\n+  const char *const *names;\n \n   USED_REX (rexmask);\n   if (ins->rex & rexmask)\n@@ -11524,8 +11524,8 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t\t\t || bytemode == bnd_mode\n \t\t\t || bytemode == bnd_swap_mode);\n       bool check_gather = false;\n-      const char **indexes64 = ins->names64;\n-      const char **indexes32 = ins->names32;\n+      const char *const *indexes64 = ins->names64;\n+      const char *const *indexes32 = ins->names32;\n \n       havesib = 0;\n       havebase = 1;\n@@ -12556,7 +12556,7 @@ OP_MMX (instr_info *ins, int bytemode ATTRIBUTE_UNUSED,\n \tint sizeflag ATTRIBUTE_UNUSED)\n {\n   int reg = ins->modrm.reg;\n-  const char **names;\n+  const char *const *names;\n \n   ins->used_prefixes |= (ins->prefixes & PREFIX_DATA);\n   if (ins->prefixes & PREFIX_DATA)\n@@ -12574,7 +12574,7 @@ OP_MMX (instr_info *ins, int bytemode ATTRIBUTE_UNUSED,\n static void\n print_vector_reg (instr_info *ins, unsigned int reg, int bytemode)\n {\n-  const char **names;\n+  const char *const *names;\n \n   if (bytemode == xmmq_mode\n       || bytemode == evex_half_bcst_xmmqh_mode\n@@ -12670,7 +12670,7 @@ static void\n OP_EM (instr_info *ins, int bytemode, int sizeflag)\n {\n   int reg;\n-  const char **names;\n+  const char *const *names;\n \n   if (ins->modrm.mod != 3)\n     {\n@@ -13040,8 +13040,8 @@ OP_Monitor (instr_info *ins, int bytemode ATTRIBUTE_UNUSED,\n   /* monitor %{e,r,}ax,%ecx,%edx\"  */\n   if (!ins->intel_syntax)\n     {\n-      const char **names = (ins->address_mode == mode_64bit\n-\t\t\t    ? ins->names64 : ins->names32);\n+      const char *const *names = (ins->address_mode == mode_64bit\n+\t\t\t\t  ? ins->names64 : ins->names32);\n \n       if (ins->prefixes & PREFIX_ADDR)\n \t{\n@@ -13217,7 +13217,7 @@ CMPXCHG8B_Fixup (instr_info *ins, int bytemode, int sizeflag)\n static void\n XMM_Fixup (instr_info *ins, int reg, int sizeflag ATTRIBUTE_UNUSED)\n {\n-  const char **names;\n+  const char *const *names;\n \n   if (ins->need_vex)\n     {\n@@ -13261,7 +13261,7 @@ static void\n OP_VEX (instr_info *ins, int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n {\n   int reg, modrm_reg, sib_index = -1;\n-  const char **names;\n+  const char *const *names;\n \n   if (!ins->need_vex)\n     abort ();\n@@ -13432,7 +13432,7 @@ static void\n OP_REG_VexI4 (instr_info *ins, int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n {\n   int reg;\n-  const char **names = ins->names_xmm;\n+  const char *const *names = ins->names_xmm;\n \n   FETCH_DATA (ins->info, ins->codep + 1);\n   reg = *ins->codep++;"
    }
  ]
}