{
  "sha": "dd68a12bc4b19c50c31fe357335bb8ee9a3322fc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQ2OGExMmJjNGIxOWM1MGMzMWZlMzU3MzM1YmI4ZWU5YTMzMjJmYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-19T04:23:44Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-19T05:01:48Z"
    },
    "message": "PR25191, internal error in _bfd_elf_set_section_contents\n\nThis PR copies a fuzzed PE input file to ELF output, in the process\nconfusing the ELF backend by copying COFF-only section flags to the\noutput.  SEC_COFF_SHARED has the same value as SEC_ELF_COMPRESS.  One\napproach to fixing this problem is of course not to reuse flag bits,\nbut we've run out.  So this patch only copies section flags that are\nin the bfd_applicable_section_flags set when changing the flavour of\nthe output file.\n\n\tPR 25191\n\t* objcopy.c (is_nondebug_keep_contents_section): Use bfd_get_flavour.\n\t(copy_object): Likewise.\n\t(setup_section): Likewise.  If flavour of input and output files\n\tdiffer, restrict section flags to the intersection of input and\n\toutput bfd_applicable_section_flags.",
    "tree": {
      "sha": "cb7ca99d9ebd27d86aa0fd0ac26eb022522da14b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb7ca99d9ebd27d86aa0fd0ac26eb022522da14b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f14080d440fab16dcb498c1a46864a5a1be37aaa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f14080d440fab16dcb498c1a46864a5a1be37aaa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f14080d440fab16dcb498c1a46864a5a1be37aaa"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 24,
    "deletions": 10
  },
  "files": [
    {
      "sha": "4fabf0cb063ed5ee5bf54d6ada8410ce6506ebd5",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=dd68a12bc4b19c50c31fe357335bb8ee9a3322fc",
      "patch": "@@ -1,3 +1,12 @@\n+2019-11-19  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25191\n+\t* objcopy.c (is_nondebug_keep_contents_section): Use bfd_get_flavour.\n+\t(copy_object): Likewise.\n+\t(setup_section): Likewise.  If flavour of input and output files\n+\tdiffer, restrict section flags to the intersection of input and\n+\toutput bfd_applicable_section_flags.\n+\n 2019-11-19  Alan Modra  <amodra@gmail.com>\n \n \t* bucomm.c (bfd_nonfatal_message): Add a space between program"
    },
    {
      "sha": "551378da399c8a793a951bb21b9af1b31bd65f99",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 15,
      "deletions": 10,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd68a12bc4b19c50c31fe357335bb8ee9a3322fc/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=dd68a12bc4b19c50c31fe357335bb8ee9a3322fc",
      "patch": "@@ -1421,16 +1421,16 @@ static bfd_boolean\n is_nondebug_keep_contents_section (bfd *ibfd, asection *isection)\n {\n   /* Always keep ELF note sections.  */\n-  if (ibfd->xvec->flavour == bfd_target_elf_flavour)\n-    return (elf_section_type (isection) == SHT_NOTE);\n+  if (bfd_get_flavour (ibfd) == bfd_target_elf_flavour)\n+    return elf_section_type (isection) == SHT_NOTE;\n \n   /* Always keep the .buildid section for PE/COFF.\n \n      Strictly, this should be written \"always keep the section storing the debug\n      directory\", but that may be the .text section for objects produced by some\n      tools, which it is not sensible to keep.  */\n-  if (ibfd->xvec->flavour == bfd_target_coff_flavour)\n-    return (strcmp (bfd_section_name (isection), \".buildid\") == 0);\n+  if (bfd_get_flavour (ibfd) == bfd_target_coff_flavour)\n+    return strcmp (bfd_section_name (isection), \".buildid\") == 0;\n \n   return FALSE;\n }\n@@ -2585,7 +2585,7 @@ copy_object (bfd *ibfd, bfd *obfd, const bfd_arch_info_type *input_arch)\n       return FALSE;\n     }\n \n-  if (ibfd->xvec->flavour != bfd_target_elf_flavour)\n+  if (bfd_get_flavour (ibfd) != bfd_target_elf_flavour)\n     {\n       if ((do_debug_sections & compress) != 0\n \t  && do_debug_sections != compress)\n@@ -2683,7 +2683,7 @@ copy_object (bfd *ibfd, bfd *obfd, const bfd_arch_info_type *input_arch)\n       pe_data_type *pe = pe_data (obfd);\n \n       /* Copy PE parameters before changing them.  */\n-      if (ibfd->xvec->flavour == bfd_target_coff_flavour\n+      if (bfd_get_flavour (ibfd) == bfd_target_coff_flavour\n \t  && bfd_pei_p (ibfd))\n \tpe->pe_opthdr = pe_data (ibfd)->pe_opthdr;\n \n@@ -3922,11 +3922,16 @@ setup_section (bfd *ibfd, sec_ptr isection, void *obfdarg)\n   /* Get the, possibly new, name of the output section.  */\n   name = bfd_section_name (isection);\n   flags = bfd_section_flags (isection);\n+  if (bfd_get_flavour (ibfd) != bfd_get_flavour (obfd))\n+    {\n+      flags &= bfd_applicable_section_flags (ibfd);\n+      flags &= bfd_applicable_section_flags (obfd);\n+    }\n   name = find_section_rename (name, &flags);\n \n   /* Prefix sections.  */\n-  if ((prefix_alloc_sections_string)\n-      && (bfd_section_flags (isection) & SEC_ALLOC))\n+  if (prefix_alloc_sections_string\n+      && (bfd_section_flags (isection) & SEC_ALLOC) != 0)\n     prefix = prefix_alloc_sections_string;\n   else if (prefix_sections_string)\n     prefix = prefix_sections_string;\n@@ -3952,7 +3957,7 @@ setup_section (bfd *ibfd, sec_ptr isection, void *obfdarg)\n \t   && !is_nondebug_keep_contents_section (ibfd, isection))\n     {\n       flags &= ~(SEC_HAS_CONTENTS | SEC_LOAD | SEC_GROUP);\n-      if (obfd->xvec->flavour == bfd_target_elf_flavour)\n+      if (bfd_get_flavour (obfd) == bfd_target_elf_flavour)\n \t{\n \t  make_nobits = TRUE;\n \n@@ -4055,7 +4060,7 @@ setup_section (bfd *ibfd, sec_ptr isection, void *obfdarg)\n       if (gsym != NULL)\n \t{\n \t  gsym->flags |= BSF_KEEP;\n-\t  if (ibfd->xvec->flavour == bfd_target_elf_flavour)\n+\t  if (bfd_get_flavour (ibfd) == bfd_target_elf_flavour)\n \t    elf_group_id (isection) = gsym;\n \t}\n     }"
    }
  ]
}