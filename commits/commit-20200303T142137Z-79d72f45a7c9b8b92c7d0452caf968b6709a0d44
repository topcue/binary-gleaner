{
  "sha": "79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzlkNzJmNDVhN2M5YjhiOTJjN2QwNDUyY2FmOTY4YjY3MDlhMGQ0NA==",
  "commit": {
    "author": {
      "name": "Hongtao Liu",
      "email": "hongtao.liu@intel.com",
      "date": "2020-03-03T14:21:37Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-03T14:21:37Z"
    },
    "message": "x86: Improve -malign-branch\n\nAccording to intel SDM manual, not all compare flag-modifying instructions\nare marcro-fusible with subsequent jcc instructions. For those non-fusible\ninstructions, -malign-branch doesn't need to align them, only jcc itself\nneeds to be aligned.\n\nHere are 2 restrictions which separate macro-fusible instruction from not\n\nRestriction 1:\nIf TEST/AND/CMP/ADD/SUB/INC/DEC is one of the following format:\n\n   cmp m, imm\n   add m, imm\n   sub m, imm\n   test m, imm\n   and m, imm\n   inc m\n   dec m\n\nit is unfusible with any jcc instruction.\n\nRestriction 2:\n\n/* Table 3-2. Macro-Fusible Instructions in Haswell Microarchitecture\n   Note it also works for Skylake and Cascadelake.\n---------------------------------------------------------------------\n|   JCC   | ADD/SUB/CMP | INC/DEC | TEST/AND |\n| ------  | ----------- | ------- | -------- |\n|   Jo    |      N      |    N    |     Y    |\n|   Jno   |      N      |    N    |     Y    |\n|  Jc/Jb  |      Y      |    N    |     Y    |\n| Jae/Jnb |      Y      |    N    |     Y    |\n|  Je/Jz  |      Y      |    Y    |     Y    |\n| Jne/Jnz |      Y      |    Y    |     Y    |\n| Jna/Jbe |      Y      |    N    |     Y    |\n| Ja/Jnbe |      Y      |    N    |     Y    |\n|   Js    |      N      |    N    |     Y    |\n|   Jns   |      N      |    N    |     Y    |\n|  Jp/Jpe |      N      |    N    |     Y    |\n| Jnp/Jpo |      N      |    N    |     Y    |\n| Jl/Jnge |      Y      |    Y    |     Y    |\n| Jge/Jnl |      Y      |    Y    |     Y    |\n| Jle/Jng |      Y      |    Y    |     Y    |\n| Jg/Jnle |      Y      |    Y    |     Y    |\n\nUpdate maybe_fused_with_jcc_p to check if operands of CMP like instructions\ncan be fused with condition jump.\n\n\t* gas/config/tc-i386.h (i386_tc_frag_data): Add member mf_type.\n\t(TC_FRAG_INIT): Init mf_type.\n\t* gas/config/tc-i386.c (enum mf_jcc_kind): New enum.\n\t(enum mf_cmp_kind): Ditto.\n\t(maybe_fused_with_jcc_p): Add argument mf_cmp_p to get\n\tmf_type of corresponding instructons, exclude unfusible\n\tinstructions.\n\t(add_fused_jcc_padding_frag_p): Likewise.\n\t(add_branch_padding_frag_p): Likewise.\n\t(output_insn): Record mf_type for corresponding instructions.\n\t(i386_macro_fusible_p): New function.\n\t(i386_next_fusible_jcc_frag): Rename from i386_next_jcc_frag,\n\tadd argument cmp_fragP to return next fusible jcc frag only.\n\t(i386_classify_machine_dependant_frag): Seperate macro-fusible\n\tinstructions from condition jump.\n\t* gas/testsuite/gas/i386/align-branch-9.s: New file.\n\t* gas/testsuite/gas/i386/align-branch-9.d: Ditto.\n\t* gas/testsuite/gas/i386/x86-64-align-branch-9.s: Ditto.\n\t* gas/testsuite/gas/i386/x86-64-align-branch-9.d: Ditto.\n\t* gas/testsuite/gas/i386/i386.exp: Run new tests.",
    "tree": {
      "sha": "1cfe668a14e35d6787222a7d6ab4ff159af70597",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1cfe668a14e35d6787222a7d6ab4ff159af70597"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/comments",
  "author": {
    "login": "algebra84",
    "id": 22926165,
    "node_id": "MDQ6VXNlcjIyOTI2MTY1",
    "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/algebra84",
    "html_url": "https://github.com/algebra84",
    "followers_url": "https://api.github.com/users/algebra84/followers",
    "following_url": "https://api.github.com/users/algebra84/following{/other_user}",
    "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions",
    "organizations_url": "https://api.github.com/users/algebra84/orgs",
    "repos_url": "https://api.github.com/users/algebra84/repos",
    "events_url": "https://api.github.com/users/algebra84/events{/privacy}",
    "received_events_url": "https://api.github.com/users/algebra84/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bb7b70ab85fb9d185d1fa6bad192c90fe9c17ff3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb7b70ab85fb9d185d1fa6bad192c90fe9c17ff3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bb7b70ab85fb9d185d1fa6bad192c90fe9c17ff3"
    }
  ],
  "stats": {
    "total": 410,
    "additions": 378,
    "deletions": 32
  },
  "files": [
    {
      "sha": "dc745aa7d214eea568e9daaf6641edce31c92296",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 133,
      "deletions": 32,
      "changes": 165,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -687,6 +687,27 @@ static unsigned int align_branch = (align_branch_jcc_bit\n \t\t\t\t    | align_branch_fused_bit\n \t\t\t\t    | align_branch_jmp_bit);\n \n+/* Types of condition jump used by macro-fusion.  */\n+enum mf_jcc_kind\n+  {\n+    mf_jcc_jo = 0,  /* base opcode 0x70  */\n+    mf_jcc_jc,      /* base opcode 0x72  */\n+    mf_jcc_je,      /* base opcode 0x74  */\n+    mf_jcc_jna,     /* base opcode 0x76  */\n+    mf_jcc_js,      /* base opcode 0x78  */\n+    mf_jcc_jp,      /* base opcode 0x7a  */\n+    mf_jcc_jl,      /* base opcode 0x7c  */\n+    mf_jcc_jle,     /* base opcode 0x7e  */\n+  };\n+\n+/* Types of compare flag-modifying insntructions used by macro-fusion.  */\n+enum mf_cmp_kind\n+  {\n+    mf_cmp_test_and,  /* test/cmp */\n+    mf_cmp_alu_cmp,  /* add/sub/cmp */\n+    mf_cmp_incdec  /* inc/dec */\n+  };\n+\n /* The maximum padding size for fused jcc.  CMP like instruction can\n    be 9 bytes and jcc can be 6 bytes.  Leave room just in case for\n    prefixes.   */\n@@ -8374,10 +8395,22 @@ encoding_length (const fragS *start_frag, offsetT start_off,\n }\n \n /* Return 1 for test, and, cmp, add, sub, inc and dec which may\n-   be macro-fused with conditional jumps.  */\n+   be macro-fused with conditional jumps.\n+   NB: If TEST/AND/CMP/ADD/SUB/INC/DEC is of RIP relative address,\n+   or is one of the following format:\n+\n+    cmp m, imm\n+    add m, imm\n+    sub m, imm\n+   test m, imm\n+    and m, imm\n+    inc m\n+    dec m\n+\n+   it is unfusible.  */\n \n static int\n-maybe_fused_with_jcc_p (void)\n+maybe_fused_with_jcc_p (enum mf_cmp_kind* mf_cmp_p)\n {\n   /* No RIP address.  */\n   if (i.base_reg && i.base_reg->reg_num == RegIP)\n@@ -8387,44 +8420,62 @@ maybe_fused_with_jcc_p (void)\n   if (is_any_vex_encoding (&i.tm))\n     return 0;\n \n-  /* and, add, sub with destination register.  */\n-  if ((i.tm.base_opcode >= 0x20 && i.tm.base_opcode <= 0x25)\n-      || i.tm.base_opcode <= 5\n+  /* add, sub without add/sub m, imm.  */\n+  if (i.tm.base_opcode <= 5\n       || (i.tm.base_opcode >= 0x28 && i.tm.base_opcode <= 0x2d)\n       || ((i.tm.base_opcode | 3) == 0x83\n-\t  && ((i.tm.extension_opcode | 1) == 0x5\n+\t  && (i.tm.extension_opcode == 0x5\n \t      || i.tm.extension_opcode == 0x0)))\n-    return (i.types[1].bitfield.class == Reg\n-\t    || i.types[1].bitfield.instance == Accum);\n+    {\n+      *mf_cmp_p = mf_cmp_alu_cmp;\n+      return !(i.mem_operands && i.imm_operands);\n+    }\n \n-  /* test, cmp with any register.  */\n+  /* and without and m, imm.  */\n+  if ((i.tm.base_opcode >= 0x20 && i.tm.base_opcode <= 0x25)\n+      || ((i.tm.base_opcode | 3) == 0x83\n+\t  && i.tm.extension_opcode == 0x4))\n+    {\n+      *mf_cmp_p = mf_cmp_test_and;\n+      return !(i.mem_operands && i.imm_operands);\n+    }\n+\n+  /* test without test m imm.  */\n   if ((i.tm.base_opcode | 1) == 0x85\n       || (i.tm.base_opcode | 1) == 0xa9\n       || ((i.tm.base_opcode | 1) == 0xf7\n-\t  && i.tm.extension_opcode == 0)\n-      || (i.tm.base_opcode >= 0x38 && i.tm.base_opcode <= 0x3d)\n+\t  && i.tm.extension_opcode == 0))\n+    {\n+      *mf_cmp_p = mf_cmp_test_and;\n+      return !(i.mem_operands && i.imm_operands);\n+    }\n+\n+  /* cmp without cmp m, imm.  */\n+  if ((i.tm.base_opcode >= 0x38 && i.tm.base_opcode <= 0x3d)\n       || ((i.tm.base_opcode | 3) == 0x83\n \t  && (i.tm.extension_opcode == 0x7)))\n-    return (i.types[0].bitfield.class == Reg\n-\t    || i.types[0].bitfield.instance == Accum\n-\t    || i.types[1].bitfield.class == Reg\n-\t    || i.types[1].bitfield.instance == Accum);\n+    {\n+      *mf_cmp_p = mf_cmp_alu_cmp;\n+      return !(i.mem_operands && i.imm_operands);\n+    }\n \n-  /* inc, dec with any register.   */\n+  /* inc, dec without inc/dec m.   */\n   if ((i.tm.cpu_flags.bitfield.cpuno64\n        && (i.tm.base_opcode | 0xf) == 0x4f)\n       || ((i.tm.base_opcode | 1) == 0xff\n \t  && i.tm.extension_opcode <= 0x1))\n-    return (i.types[0].bitfield.class == Reg\n-\t    || i.types[0].bitfield.instance == Accum);\n+    {\n+      *mf_cmp_p = mf_cmp_incdec;\n+      return !i.mem_operands;\n+    }\n \n   return 0;\n }\n \n /* Return 1 if a FUSED_JCC_PADDING frag should be generated.  */\n \n static int\n-add_fused_jcc_padding_frag_p (void)\n+add_fused_jcc_padding_frag_p (enum mf_cmp_kind* mf_cmp_p)\n {\n   /* NB: Don't work with COND_JUMP86 without i386.  */\n   if (!align_branch_power\n@@ -8433,7 +8484,7 @@ add_fused_jcc_padding_frag_p (void)\n       || !(align_branch & align_branch_fused_bit))\n     return 0;\n \n-  if (maybe_fused_with_jcc_p ())\n+  if (maybe_fused_with_jcc_p (mf_cmp_p))\n     {\n       if (last_insn.kind == last_insn_other\n \t  || last_insn.seg != now_seg)\n@@ -8481,7 +8532,8 @@ add_branch_prefix_frag_p (void)\n /* Return 1 if a BRANCH_PADDING frag should be generated.  */\n \n static int\n-add_branch_padding_frag_p (enum align_branch_kind *branch_p)\n+add_branch_padding_frag_p (enum align_branch_kind *branch_p,\n+\t\t\t   enum mf_jcc_kind *mf_jcc_p)\n {\n   int add_padding;\n \n@@ -8503,6 +8555,9 @@ add_branch_padding_frag_p (enum align_branch_kind *branch_p)\n \t}\n       else\n \t{\n+\t  /* Because J<cc> and JN<cc> share same group in macro-fusible table,\n+\t     igore the lowest bit.  */\n+\t  *mf_jcc_p = (i.tm.base_opcode & 0x0e) >> 1;\n \t  *branch_p = align_branch_jcc;\n \t  if ((align_branch & align_branch_jcc_bit))\n \t    add_padding = 1;\n@@ -8573,6 +8628,10 @@ output_insn (void)\n   offsetT insn_start_off;\n   fragS *fragP = NULL;\n   enum align_branch_kind branch = align_branch_none;\n+  /* The initializer is arbitrary just to avoid uninitialized error.\n+     it's actually either assigned in add_branch_padding_frag_p\n+     or never be used.  */\n+  enum mf_jcc_kind mf_jcc = mf_jcc_jo;\n \n #if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n   if (IS_ELF && x86_used_note)\n@@ -8665,7 +8724,7 @@ output_insn (void)\n   insn_start_frag = frag_now;\n   insn_start_off = frag_now_fix ();\n \n-  if (add_branch_padding_frag_p (&branch))\n+  if (add_branch_padding_frag_p (&branch, &mf_jcc))\n     {\n       char *p;\n       /* Branch can be 8 bytes.  Leave some room for prefixes.  */\n@@ -8686,6 +8745,7 @@ output_insn (void)\n \t\tENCODE_RELAX_STATE (BRANCH_PADDING, 0),\n \t\tNULL, 0, p);\n \n+      fragP->tc_frag_data.mf_type = mf_jcc;\n       fragP->tc_frag_data.branch_type = branch;\n       fragP->tc_frag_data.max_bytes = max_branch_padding_size;\n     }\n@@ -8705,6 +8765,7 @@ output_insn (void)\n       unsigned char *q;\n       unsigned int j;\n       unsigned int prefix;\n+      enum mf_cmp_kind mf_cmp;\n \n       if (avoid_fence\n \t  && (i.tm.base_opcode == 0xfaee8\n@@ -8731,7 +8792,7 @@ output_insn (void)\n       if (branch)\n \t/* Skip if this is a branch.  */\n \t;\n-      else if (add_fused_jcc_padding_frag_p ())\n+      else if (add_fused_jcc_padding_frag_p (&mf_cmp))\n \t{\n \t  /* Make room for padding.  */\n \t  frag_grow (MAX_FUSED_JCC_PADDING_SIZE);\n@@ -8743,6 +8804,7 @@ output_insn (void)\n \t\t    ENCODE_RELAX_STATE (FUSED_JCC_PADDING, 0),\n \t\t    NULL, 0, p);\n \n+\t  fragP->tc_frag_data.mf_type = mf_cmp;\n \t  fragP->tc_frag_data.branch_type = align_branch_fused;\n \t  fragP->tc_frag_data.max_bytes = MAX_FUSED_JCC_PADDING_SIZE;\n \t}\n@@ -10948,6 +11010,42 @@ elf_symbol_resolved_in_segment_p (symbolS *fr_symbol, offsetT fr_var)\n }\n #endif\n \n+/* Table 3-2. Macro-Fusible Instructions in Haswell Microarchitecture\n+   Note also work for Skylake and Cascadelake.\n+---------------------------------------------------------------------\n+|   JCC   | ADD/SUB/CMP | INC/DEC | TEST/AND |\n+| ------  | ----------- | ------- | -------- |\n+|   Jo    |      N      |    N    |     Y    |\n+|   Jno   |      N      |    N    |     Y    |\n+|  Jc/Jb  |      Y      |    N    |     Y    |\n+| Jae/Jnb |      Y      |    N    |     Y    |\n+|  Je/Jz  |      Y      |    Y    |     Y    |\n+| Jne/Jnz |      Y      |    Y    |     Y    |\n+| Jna/Jbe |      Y      |    N    |     Y    |\n+| Ja/Jnbe |      Y      |    N    |     Y    |\n+|   Js    |      N      |    N    |     Y    |\n+|   Jns   |      N      |    N    |     Y    |\n+|  Jp/Jpe |      N      |    N    |     Y    |\n+| Jnp/Jpo |      N      |    N    |     Y    |\n+| Jl/Jnge |      Y      |    Y    |     Y    |\n+| Jge/Jnl |      Y      |    Y    |     Y    |\n+| Jle/Jng |      Y      |    Y    |     Y    |\n+| Jg/Jnle |      Y      |    Y    |     Y    |\n+---------------------------------------------------------------------  */\n+static int\n+i386_macro_fusible_p (enum mf_cmp_kind mf_cmp, enum mf_jcc_kind mf_jcc)\n+{\n+  if (mf_cmp == mf_cmp_alu_cmp)\n+    return ((mf_jcc >= mf_jcc_jc && mf_jcc <= mf_jcc_jna)\n+\t    || mf_jcc == mf_jcc_jl || mf_jcc == mf_jcc_jle);\n+  if (mf_cmp == mf_cmp_incdec)\n+    return (mf_jcc == mf_jcc_je || mf_jcc == mf_jcc_jl\n+\t    || mf_jcc == mf_jcc_jle);\n+  if (mf_cmp == mf_cmp_test_and)\n+    return 1;\n+  return 0;\n+}\n+\n /* Return the next non-empty frag.  */\n \n static fragS *\n@@ -10967,20 +11065,23 @@ i386_next_non_empty_frag (fragS *fragP)\n /* Return the next jcc frag after BRANCH_PADDING.  */\n \n static fragS *\n-i386_next_jcc_frag (fragS *fragP)\n+i386_next_fusible_jcc_frag (fragS *maybe_cmp_fragP, fragS *pad_fragP)\n {\n-  if (!fragP)\n+  fragS *branch_fragP;\n+  if (!pad_fragP)\n     return NULL;\n \n-  if (fragP->fr_type == rs_machine_dependent\n-      && (TYPE_FROM_RELAX_STATE (fragP->fr_subtype)\n+  if (pad_fragP->fr_type == rs_machine_dependent\n+      && (TYPE_FROM_RELAX_STATE (pad_fragP->fr_subtype)\n \t  == BRANCH_PADDING))\n     {\n-      fragP = i386_next_non_empty_frag (fragP);\n-      if (fragP->fr_type != rs_machine_dependent)\n+      branch_fragP = i386_next_non_empty_frag (pad_fragP);\n+      if (branch_fragP->fr_type != rs_machine_dependent)\n \treturn NULL;\n-      if (TYPE_FROM_RELAX_STATE (fragP->fr_subtype) == COND_JUMP)\n-\treturn fragP;\n+      if (TYPE_FROM_RELAX_STATE (branch_fragP->fr_subtype) == COND_JUMP\n+\t  && i386_macro_fusible_p (maybe_cmp_fragP->tc_frag_data.mf_type,\n+\t\t\t\t   pad_fragP->tc_frag_data.mf_type))\n+\treturn branch_fragP;\n     }\n \n   return NULL;\n@@ -11025,7 +11126,7 @@ i386_classify_machine_dependent_frag (fragS *fragP)\n \t       */\n \t    cmp_fragP = i386_next_non_empty_frag (next_fragP);\n \t    pad_fragP = i386_next_non_empty_frag (cmp_fragP);\n-\t    branch_fragP = i386_next_jcc_frag (pad_fragP);\n+\t    branch_fragP = i386_next_fusible_jcc_frag (next_fragP, pad_fragP);\n \t    if (branch_fragP)\n \t      {\n \t\t/* The BRANCH_PADDING frag is merged with the"
    },
    {
      "sha": "93678c22822b5baf6a3c55e1a7948d3545b56d91",
      "filename": "gas/config/tc-i386.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/config/tc-i386.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/config/tc-i386.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.h?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -273,6 +273,7 @@ struct i386_tc_frag_data\n   unsigned char prefix_length;\n   unsigned char default_prefix;\n   unsigned char cmp_size;\n+  unsigned int mf_type : 3;\n   unsigned int classified : 1;\n   unsigned int branch_type : 3;\n };\n@@ -299,6 +300,7 @@ struct i386_tc_frag_data\n      (FRAGP)->tc_frag_data.cmp_size = 0;\t\t\t\\\n      (FRAGP)->tc_frag_data.classified = 0;\t\t\t\\\n      (FRAGP)->tc_frag_data.branch_type = 0;\t\t\t\\\n+     (FRAGP)->tc_frag_data.mf_type = 0;\t\t\t\\\n    }\t\t\t\t\t\t\t\t\\\n  while (0)\n "
    },
    {
      "sha": "6340817d048eb286bbc4df31dcab44e4400cca94",
      "filename": "gas/testsuite/gas/i386/align-branch-9.d",
      "status": "added",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/align-branch-9.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/align-branch-9.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/align-branch-9.d?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -0,0 +1,78 @@\n+#as: -mbranches-within-32B-boundaries\n+#objdump: -dw\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <foo>:\n+   0:\t65 a3 01 00 00 00    \tmov    %eax,%gs:0x1\n+   6:\t55                   \tpush   %ebp\n+   7:\t55                   \tpush   %ebp\n+   8:\t55                   \tpush   %ebp\n+   9:\t55                   \tpush   %ebp\n+   a:\t89 e5                \tmov    %esp,%ebp\n+   c:\t89 7d f8             \tmov    %edi,-0x8\\(%ebp\\)\n+   f:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  12:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  15:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  18:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  1b:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  1e:\t39 c5                \tcmp    %eax,%ebp\n+  20:\t70 62                \tjo     84 <foo\\+0x84>\n+  22:\t89 73 f4             \tmov    %esi,-0xc\\(%ebx\\)\n+  25:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  28:\t89 7d f8             \tmov    %edi,-0x8\\(%ebp\\)\n+  2b:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  2e:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  31:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  34:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  37:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  3a:\t5d                   \tpop    %ebp\n+  3b:\t5d                   \tpop    %ebp\n+  3c:\t5d                   \tpop    %ebp\n+  3d:\t74 45                \tje     84 <foo\\+0x84>\n+  3f:\t5d                   \tpop    %ebp\n+  40:\t74 42                \tje     84 <foo\\+0x84>\n+  42:\t89 44 24 fc          \tmov    %eax,-0x4\\(%esp\\)\n+  46:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  49:\t89 7d f8             \tmov    %edi,-0x8\\(%ebp\\)\n+  4c:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  4f:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  52:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  55:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  58:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  5b:\t5d                   \tpop    %ebp\n+  5c:\teb 2c                \tjmp    8a <foo\\+0x8a>\n+  5e:\t66 90                \txchg   %ax,%ax\n+  60:\teb 28                \tjmp    8a <foo\\+0x8a>\n+  62:\teb 26                \tjmp    8a <foo\\+0x8a>\n+  64:\t89 45 fc             \tmov    %eax,-0x4\\(%ebp\\)\n+  67:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  6a:\t89 7d f8             \tmov    %edi,-0x8\\(%ebp\\)\n+  6d:\t5d                   \tpop    %ebp\n+  6e:\t5d                   \tpop    %ebp\n+  6f:\t40                   \tinc    %eax\n+  70:\t72 12                \tjb     84 <foo\\+0x84>\n+  72:\t36 36 89 45 fc       \tss mov %eax,%ss:-0x4\\(%ebp\\)\n+  77:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  7a:\t89 7d f8             \tmov    %edi,-0x8\\(%ebp\\)\n+  7d:\t89 75 f4             \tmov    %esi,-0xc\\(%ebp\\)\n+  80:\t21 c3                \tand    %eax,%ebx\n+  82:\t7c 06                \tjl     8a <foo\\+0x8a>\n+  84:\t8b 45 f4             \tmov    -0xc\\(%ebp\\),%eax\n+  87:\t89 45 fc             \tmov    %eax,-0x4\\(%ebp\\)\n+  8a:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  90:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  96:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  9c:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  a2:\t89 75 0c             \tmov    %esi,0xc\\(%ebp\\)\n+  a5:\te9 fc ff ff ff       \tjmp    a6 <foo\\+0xa6>\n+  aa:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  b0:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  b6:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  bc:\t89 b5 50 fb ff ff    \tmov    %esi,-0x4b0\\(%ebp\\)\n+  c2:\t89 75 00             \tmov    %esi,0x0\\(%ebp\\)\n+  c5:\t74 c3                \tje     8a <foo\\+0x8a>\n+  c7:\t74 c1                \tje     8a <foo\\+0x8a>\n+#pass"
    },
    {
      "sha": "357abe30f97fbe843394cded1a2259954c7a1ee0",
      "filename": "gas/testsuite/gas/i386/align-branch-9.s",
      "status": "added",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/align-branch-9.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/align-branch-9.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/align-branch-9.s?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -0,0 +1,74 @@\n+  .text\n+  .globl  foo\n+  .p2align  4\n+foo:\n+  movl\t%eax, %gs:0x1\n+  pushl  %ebp\n+  pushl  %ebp\n+  pushl  %ebp\n+  pushl  %ebp\n+  movl  %esp, %ebp\n+  movl  %edi, -8(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  cmp  %eax, %ebp\n+  jo  .L_2\n+  movl  %esi, -12(%ebx)\n+  movl  %esi, -12(%ebp)\n+  movl  %edi, -8(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  popl  %ebp\n+  popl  %ebp\n+  popl  %ebp\n+  je  .L_2\n+  popl  %ebp\n+  je  .L_2\n+  movl  %eax, -4(%esp)\n+  movl  %esi, -12(%ebp)\n+  movl  %edi, -8(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %esi, -12(%ebp)\n+  popl  %ebp\n+  jmp  .L_3\n+  jmp  .L_3\n+  jmp  .L_3\n+  movl  %eax, -4(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %edi, -8(%ebp)\n+  popl  %ebp\n+  popl  %ebp\n+  inc  %eax\n+  jc  .L_2\n+  movl  %eax, -4(%ebp)\n+  movl  %esi, -12(%ebp)\n+  movl  %edi, -8(%ebp)\n+  movl  %esi, -12(%ebp)\n+  and  %eax, %ebx\n+  jl  .L_3\n+.L_2:\n+  movl  -12(%ebp), %eax\n+  movl  %eax, -4(%ebp)\n+.L_3:\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, 12(%ebp)\n+  jmp  bar\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, -1200(%ebp)\n+  movl  %esi, (%ebp)\n+  je .L_3\n+  je .L_3"
    },
    {
      "sha": "8fc621f2bbdf71e067d60b6e10f87b17c2471a8c",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -525,6 +525,7 @@ if [expr ([istarget \"i*86-*-*\"] ||  [istarget \"x86_64-*-*\"]) && [gas_32_check]]\n     run_dump_test \"align-branch-6\"\n     run_dump_test \"align-branch-7\"\n     run_dump_test \"align-branch-8\"\n+    run_dump_test \"align-branch-9\"\n \n     # These tests require support for 8 and 16 bit relocs,\n     # so we only run them for ELF and COFF targets.\n@@ -1100,6 +1101,7 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n     run_dump_test \"x86-64-align-branch-6\"\n     run_dump_test \"x86-64-align-branch-7\"\n     run_dump_test \"x86-64-align-branch-8\"\n+    run_dump_test \"x86-64-align-branch-9\"\n \n     if { ![istarget \"*-*-aix*\"]\n       && ![istarget \"*-*-beos*\"]"
    },
    {
      "sha": "1041fd04833178c4d37760d6e52e654e77cabf21",
      "filename": "gas/testsuite/gas/i386/x86-64-align-branch-9.d",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/x86-64-align-branch-9.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/x86-64-align-branch-9.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-align-branch-9.d?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -0,0 +1,46 @@\n+#as: -mbranches-within-32B-boundaries\n+#objdump: -dw\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <foo>:\n+   0:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+   3:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+   6:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+   9:\t89 d1                \tmov    %edx,%ecx\n+   b:\t31 c0                \txor    %eax,%eax\n+   d:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  10:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  13:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  16:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  19:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  1c:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  1f:\t80 fa 02             \tcmp    \\$0x2,%dl\n+  22:\t70 df                \tjo     3 <foo\\+0x3>\n+  24:\t2e 2e 2e 2e 31 c0    \tcs cs cs cs xor %eax,%eax\n+  2a:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  2d:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  30:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  33:\t89 d1                \tmov    %edx,%ecx\n+  35:\t31 c0                \txor    %eax,%eax\n+  37:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  3a:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  3d:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  40:\tf6 c2 02             \ttest   \\$0x2,%dl\n+  43:\t75 e8                \tjne    2d <foo\\+0x2d>\n+  45:\t31 c0                \txor    %eax,%eax\n+  47:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  4a:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  4d:\t89 d1                \tmov    %edx,%ecx\n+  4f:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  52:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  55:\t89 d1                \tmov    %edx,%ecx\n+  57:\tc1 e9 02             \tshr    \\$0x2,%ecx\n+  5a:\t89 d1                \tmov    %edx,%ecx\n+  5c:\t31 c0                \txor    %eax,%eax\n+  5e:\tff c0                \tinc    %eax\n+  60:\t76 cb                \tjbe    2d <foo\\+0x2d>\n+  62:\t31 c0                \txor    %eax,%eax\n+#pass"
    },
    {
      "sha": "917579bda401899b1507f998ca122dee6b4a642a",
      "filename": "gas/testsuite/gas/i386/x86-64-align-branch-9.s",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/x86-64-align-branch-9.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79d72f45a7c9b8b92c7d0452caf968b6709a0d44/gas/testsuite/gas/i386/x86-64-align-branch-9.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-align-branch-9.s?ref=79d72f45a7c9b8b92c7d0452caf968b6709a0d44",
      "patch": "@@ -0,0 +1,43 @@\n+\t.text\n+\t.p2align 4,,15\n+foo:\n+\tshrl\t$2, %ecx\n+.L1:\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tmovl\t%edx, %ecx\n+\txorl\t%eax, %eax\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tcmpb\t$2, %dl\n+\tjo\t.L1\n+\txorl\t%eax, %eax\n+\tshrl\t$2, %ecx\n+.L2:\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tmovl\t%edx, %ecx\n+\txorl\t%eax, %eax\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\ttestb\t$2, %dl\n+\tjne\t.L2\n+\txorl\t%eax, %eax\n+.L3:\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tmovl\t%edx, %ecx\n+\tshrl\t$2, %ecx\n+\tshrl\t$2, %ecx\n+\tmovl\t%edx, %ecx\n+\tshrl\t$2, %ecx\n+\tmovl\t%edx, %ecx\n+\txorl\t%eax, %eax\n+\tinc\t%eax\n+\tjbe\t.L2\n+\txorl\t%eax, %eax"
    }
  ]
}