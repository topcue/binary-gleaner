{
  "sha": "2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjQ4MGI2ZmE5NDZiYjJkMmRjOTkzYjFjNGE4M2E4ZTEyNThhNzVlOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-18T05:07:44Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-18T08:08:13Z"
    },
    "message": "More signed overflow fixes\n\nThe arc fix in create_map avoiding signed overflow by casting an\nunsigned char to unsigned int before shifting, shows one of the\ndangers of blinding doing that.  The problem in this case was that the\nvariable storing the value, newAuxRegister->address, was a long.\nUsing the unsigned cast meant that the 32-bit value was zero extended\nwhen long is 64 bits.  Previously we had a sign extension.  Net result\nwas that comparisons in arcExtMap_auxRegName didn't match.  Of course,\nI could have cast the 32-bit unsigned value back to signed before\nstoring in a long, but it's neater to just use an unsigned int for the\naddress.\n\nopcodes/\n\t* alpha-opc.c (OP): Avoid signed overflow.\n\t* arm-dis.c (print_insn): Likewise.\n\t* mcore-dis.c (print_insn_mcore): Likewise.\n\t* pj-dis.c (get_int): Likewise.\n\t* ppc-opc.c (EBD15, EBD15BI): Likewise.\n\t* score7-dis.c (s7_print_insn): Likewise.\n\t* tic30-dis.c (print_insn_tic30): Likewise.\n\t* v850-opc.c (insert_SELID): Likewise.\n\t* vax-dis.c (print_insn_vax): Likewise.\n\t* arc-ext.c (create_map): Likewise.\n\t(struct ExtAuxRegister): Make \"address\" field unsigned int.\n\t(arcExtMap_auxRegName): Pass unsigned address.\n\t(dump_ARC_extmap): Adjust.\n\t* arc-ext.h (arcExtMap_auxRegName): Update prototype.",
    "tree": {
      "sha": "ce542aad0a4875a62960e77e23c4729b92d87da4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce542aad0a4875a62960e77e23c4729b92d87da4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a422785822ec9302f681c8fbc6ba2cc35231b09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a422785822ec9302f681c8fbc6ba2cc35231b09",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a422785822ec9302f681c8fbc6ba2cc35231b09"
    }
  ],
  "stats": {
    "total": 129,
    "additions": 70,
    "deletions": 59
  },
  "files": [
    {
      "sha": "96993a3ee68c40d03d6feb387549c8febec784ee",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -1,3 +1,20 @@\n+2019-12-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* alpha-opc.c (OP): Avoid signed overflow.\n+\t* arm-dis.c (print_insn): Likewise.\n+\t* mcore-dis.c (print_insn_mcore): Likewise.\n+\t* pj-dis.c (get_int): Likewise.\n+\t* ppc-opc.c (EBD15, EBD15BI): Likewise.\n+\t* score7-dis.c (s7_print_insn): Likewise.\n+\t* tic30-dis.c (print_insn_tic30): Likewise.\n+\t* v850-opc.c (insert_SELID): Likewise.\n+\t* vax-dis.c (print_insn_vax): Likewise.\n+\t* arc-ext.c (create_map): Likewise.\n+\t(struct ExtAuxRegister): Make \"address\" field unsigned int.\n+\t(arcExtMap_auxRegName): Pass unsigned address.\n+\t(dump_ARC_extmap): Adjust.\n+\t* arc-ext.h (arcExtMap_auxRegName): Update prototype.\n+\n 2019-12-17  Alan Modra  <amodra@gmail.com>\n \n \t* visium-dis.c (print_insn_visium): Avoid signed overflow."
    },
    {
      "sha": "94a023cdfe86522e76e7d31dd5b76d1753558204",
      "filename": "opcodes/alpha-opc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/alpha-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/alpha-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/alpha-opc.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -332,7 +332,7 @@ const unsigned alpha_num_operands = sizeof(alpha_operands)/sizeof(*alpha_operand\n /* Macros used to form opcodes.  */\n \n /* The main opcode.  */\n-#define OP(x)\t\t(((x) & 0x3F) << 26)\n+#define OP(x)\t\t(((x) & 0x3Fu) << 26)\n #define OP_MASK\t\t0xFC000000\n \n /* Branch format instructions.  */"
    },
    {
      "sha": "bc676687914ab2f4833167458e67aa57d44114c5",
      "filename": "opcodes/arc-ext.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/arc-ext.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/arc-ext.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arc-ext.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -53,7 +53,7 @@\n \n struct ExtAuxRegister\n {\n-  long\t\t\t  address;\n+  unsigned\t\t  address;\n   char *\t\t  name;\n   struct ExtAuxRegister * next;\n };\n@@ -191,8 +191,8 @@ create_map (unsigned char *block,\n \t    char *aux_name = xstrdup ((char *) (p + 6));\n \n \t    newAuxRegister->name = aux_name;\n-\t    newAuxRegister->address = (p[2] << 24) | (p[3] << 16)\n-\t      | (p[4] << 8) | p[5];\n+\t    newAuxRegister->address = (((unsigned) p[2] << 24) | (p[3] << 16)\n+\t\t\t\t       | (p[4] << 8) | p[5]);\n \t    newAuxRegister->next = arc_extension_map.auxRegisters;\n \t    arc_extension_map.auxRegisters = newAuxRegister;\n \t    break;\n@@ -406,7 +406,7 @@ arcExtMap_condCodeName (int code)\n /* Get the name of an extension auxiliary register.  */\n \n const char *\n-arcExtMap_auxRegName (long address)\n+arcExtMap_auxRegName (unsigned address)\n {\n   /* Walk the list of auxiliary register names and find the name.  */\n   struct ExtAuxRegister *r;\n@@ -463,7 +463,7 @@ dump_ARC_extmap (void)\n \n     while (r)\n     {\n-\tprintf (\"AUX : %s %ld\\n\", r->name, r->address);\n+\tprintf (\"AUX : %s %u\\n\", r->name, r->address);\n \tr = r->next;\n     }\n "
    },
    {
      "sha": "4127d1873611a09bcd874e694ab40bb2922aa14a",
      "filename": "opcodes/arc-ext.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/arc-ext.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/arc-ext.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arc-ext.h?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -125,7 +125,7 @@ extern void build_ARC_extmap (bfd *);\n /* Accessor functions.  */\n extern enum ExtReadWrite arcExtMap_coreReadWrite (int);\n extern const char * arcExtMap_coreRegName (int);\n-extern const char * arcExtMap_auxRegName (long);\n+extern const char * arcExtMap_auxRegName (unsigned);\n extern const char * arcExtMap_condCodeName (int);\n extern const extInstruction_t *arcExtMap_insn (int, unsigned long long);\n extern struct arc_opcode *arcExtMap_genOpcode (const extInstruction_t *,"
    },
    {
      "sha": "12eae61bb5957e67375b52b32d10de927289a08c",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -11705,7 +11705,7 @@ static int\n print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)\n {\n   unsigned char b[4];\n-  long\t\tgiven;\n+  unsigned long given;\n   int           status;\n   int           is_thumb = FALSE;\n   int           is_data = FALSE;\n@@ -11885,9 +11885,9 @@ print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)\n \n       status = info->read_memory_func (pc, (bfd_byte *) b, 4, info);\n       if (little_code)\n-\tgiven = (b[0]) | (b[1] << 8) | (b[2] << 16) | (b[3] << 24);\n+\tgiven = (b[0]) | (b[1] << 8) | (b[2] << 16) | ((unsigned) b[3] << 24);\n       else\n-\tgiven = (b[3]) | (b[2] << 8) | (b[1] << 16) | (b[0] << 24);\n+\tgiven = (b[3]) | (b[2] << 8) | (b[1] << 16) | ((unsigned) b[0] << 24);\n     }\n   else\n     {"
    },
    {
      "sha": "5b3acb80e2804c18417af78d71c593afd534e0c7",
      "filename": "opcodes/mcore-dis.c",
      "status": "modified",
      "additions": 26,
      "deletions": 31,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/mcore-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/mcore-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mcore-dis.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -196,18 +196,14 @@ print_insn_mcore (bfd_vma memaddr,\n \n \tcase BR:\n \t  {\n-\t    long val = inst & 0x3FF;\n+\t    uint32_t val = ((inst & 0x3FF) ^ 0x400) - 0x400;\n \n-\t    if (inst & 0x400)\n-\t      val |= 0xFFFFFC00;\n-\n-\t    (*print_func) (stream, \"\\t0x%lx\", (long)(memaddr + 2 + (val << 1)));\n+\t    val = memaddr + 2 + (val << 1);\n+\t    (*print_func) (stream, \"\\t0x%x\", val);\n \n \t    if (strcmp (mcore_table[i].name, \"bsr\") == 0)\n \t      {\n \t\t/* For bsr, we'll try to get a symbol for the target.  */\n-\t\tval = memaddr + 2 + (val << 1);\n-\n \t\tif (info->print_address_func && val != 0)\n \t\t  {\n \t\t    (*print_func) (stream, \"\\t// \");\n@@ -219,19 +215,18 @@ print_insn_mcore (bfd_vma memaddr,\n \n \tcase BL:\n \t  {\n-\t    long val;\n-\t    val = (inst & 0x000F);\n-\t    (*print_func) (stream, \"\\t%s, 0x%lx\",\n+\t    uint32_t val = inst & 0x000F;\n+\t    (*print_func) (stream, \"\\t%s, 0x%x\",\n \t\t\t   grname[(inst >> 4) & 0xF],\n-\t\t\t   (long) (memaddr - (val << 1)));\n+\t\t\t   (uint32_t) (memaddr - (val << 1)));\n \t  }\n \t  break;\n \n \tcase LR:\n \t  {\n-\t    unsigned long val;\n+\t    uint32_t val;\n \n-\t    val = (memaddr + 2 + ((inst & 0xFF) << 2)) & 0xFFFFFFFC;\n+\t    val = (memaddr + 2 + ((inst & 0xFF) << 2)) & ~3;\n \n \t    /* We are not reading an instruction, so allow\n \t       reads to extend beyond the next symbol.  */\n@@ -244,27 +239,27 @@ print_insn_mcore (bfd_vma memaddr,\n \t      }\n \n \t    if (info->endian == BFD_ENDIAN_LITTLE)\n-\t      val = (ibytes[3] << 24) | (ibytes[2] << 16)\n-\t\t| (ibytes[1] << 8) | (ibytes[0]);\n+\t      val = (((unsigned) ibytes[3] << 24) | (ibytes[2] << 16)\n+\t\t     | (ibytes[1] << 8) | (ibytes[0]));\n \t    else\n-\t      val = (ibytes[0] << 24) | (ibytes[1] << 16)\n-\t\t| (ibytes[2] << 8) | (ibytes[3]);\n+\t      val = (((unsigned) ibytes[0] << 24) | (ibytes[1] << 16)\n+\t\t     | (ibytes[2] << 8) | (ibytes[3]));\n \n \t    /* Removed [] around literal value to match ABI syntax 12/95.  */\n-\t    (*print_func) (stream, \"\\t%s, 0x%lX\", grname[(inst >> 8) & 0xF], val);\n+\t    (*print_func) (stream, \"\\t%s, 0x%X\", grname[(inst >> 8) & 0xF], val);\n \n \t    if (val == 0)\n-\t      (*print_func) (stream, \"\\t// from address pool at 0x%lx\",\n-\t\t\t     (long) (memaddr + 2\n-\t\t\t\t     + ((inst & 0xFF) << 2)) & 0xFFFFFFFC);\n+\t      (*print_func) (stream, \"\\t// from address pool at 0x%x\",\n+\t\t\t     (uint32_t) (memaddr + 2\n+\t\t\t\t\t + ((inst & 0xFF) << 2)) & ~3);\n \t  }\n \t  break;\n \n \tcase LJ:\n \t  {\n-\t    unsigned long val;\n+\t    uint32_t val;\n \n-\t    val = (memaddr + 2 + ((inst & 0xFF) << 2)) & 0xFFFFFFFC;\n+\t    val = (memaddr + 2 + ((inst & 0xFF) << 2)) & ~3;\n \n \t    /* We are not reading an instruction, so allow\n \t       reads to extend beyond the next symbol.  */\n@@ -277,14 +272,14 @@ print_insn_mcore (bfd_vma memaddr,\n \t      }\n \n \t    if (info->endian == BFD_ENDIAN_LITTLE)\n-\t      val = (ibytes[3] << 24) | (ibytes[2] << 16)\n-\t\t| (ibytes[1] << 8) | (ibytes[0]);\n+\t      val = (((unsigned) ibytes[3] << 24) | (ibytes[2] << 16)\n+\t\t     | (ibytes[1] << 8) | (ibytes[0]));\n \t    else\n-\t      val = (ibytes[0] << 24) | (ibytes[1] << 16)\n-\t\t| (ibytes[2] << 8) | (ibytes[3]);\n+\t      val = (((unsigned) ibytes[0] << 24) | (ibytes[1] << 16)\n+\t\t     | (ibytes[2] << 8) | (ibytes[3]));\n \n \t    /* Removed [] around literal value to match ABI syntax 12/95.  */\n-\t    (*print_func) (stream, \"\\t0x%lX\", val);\n+\t    (*print_func) (stream, \"\\t0x%X\", val);\n \t    /* For jmpi/jsri, we'll try to get a symbol for the target.  */\n \t    if (info->print_address_func && val != 0)\n \t      {\n@@ -293,9 +288,9 @@ print_insn_mcore (bfd_vma memaddr,\n \t      }\n \t    else\n \t      {\n-\t\t(*print_func) (stream, \"\\t// from address pool at 0x%lx\",\n-\t\t\t       (long) (memaddr + 2\n-\t\t\t\t       + ((inst & 0xFF) << 2)) & 0xFFFFFFFC);\n+\t\t(*print_func) (stream, \"\\t// from address pool at 0x%x\",\n+\t\t\t       (uint32_t) (memaddr + 2\n+\t\t\t\t\t   + ((inst & 0xFF) << 2)) & ~3);\n \t      }\n \t  }\n \t  break;"
    },
    {
      "sha": "62f2a2f670c955a51ef19578e9cab7b1151c4e2a",
      "filename": "opcodes/pj-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/pj-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/pj-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/pj-dis.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -32,10 +32,10 @@ get_int (bfd_vma memaddr, int *iptr, struct disassemble_info *info)\n   unsigned char ival[4];\n   int status = info->read_memory_func (memaddr, ival, 4, info);\n \n-  *iptr = (ival[0] << 24)\n-    | (ival[1] << 16)\n-    | (ival[2] << 8)\n-    | (ival[3] << 0);\n+  *iptr = (((unsigned) ival[0] << 24)\n+\t   | (ival[1] << 16)\n+\t   | (ival[2] << 8)\n+\t   | (ival[3] << 0));\n \n   return status;\n }"
    },
    {
      "sha": "403c9daff53bcfa33bf8ebffcf0afe8bd4f1439a",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -2967,7 +2967,7 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n \n /* A BD15 form instruction for extended conditional branch mnemonics.  */\n #define EBD15(op, aa, bo, lk)\t\t\t\\\n-  (((op) & 0x3f) << 26)\t\t\t\t\\\n+  (((op) & 0x3fu) << 26)\t\t\t\\\n   | (((aa) & 0xf) << 22)\t\t\t\\\n   | (((bo) & 0x3) << 20)\t\t\t\\\n   | ((lk) & 1)\n@@ -2976,7 +2976,7 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n /* A BD15 form instruction for extended conditional branch mnemonics\n    with BI.  */\n #define EBD15BI(op, aa, bo, bi, lk)\t\t\\\n-  ((((op) & 0x3f) << 26)\t\t\t\\\n+  ((((op) & 0x3fu) << 26)\t\t\t\\\n    | (((aa) & 0xf) << 22)\t\t\t\\\n    | (((bo) & 0x3) << 20)\t\t\t\\\n    | (((bi) & 0x3) << 16)\t\t\t\\"
    },
    {
      "sha": "2dbc6674cc407c4356dfdac27b738d5024081fd2",
      "filename": "opcodes/score7-dis.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/score7-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/score7-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/score7-dis.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -871,7 +871,7 @@ int\n s7_print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)\n {\n   unsigned char b[4];\n-  long given;\n+  unsigned long given;\n   long ridparity;\n   int status;\n   bfd_boolean insn_pce_p = FALSE;\n@@ -907,11 +907,11 @@ s7_print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)\n \n   if (little)\n     {\n-      given = (b[0]) | (b[1] << 8) | (b[2] << 16) | (b[3] << 24);\n+      given = (b[0]) | (b[1] << 8) | (b[2] << 16) | ((unsigned) b[3] << 24);\n     }\n   else\n     {\n-      given = (b[0] << 24) | (b[1] << 16) | (b[2] << 8) | (b[3]);\n+      given = ((unsigned) b[0] << 24) | (b[1] << 16) | (b[2] << 8) | (b[3]);\n     }\n \n   if ((given & 0x80008000) == 0x80008000)"
    },
    {
      "sha": "a695159d77c5142dfa68cde83c923c21f1677fa1",
      "filename": "opcodes/tic30-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/tic30-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/tic30-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/tic30-dis.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -696,8 +696,10 @@ print_insn_tic30 (bfd_vma pc, disassemble_info *info)\n   bfd_vma bufaddr = pc - info->buffer_vma;\n \n   /* Obtain the current instruction word from the buffer.  */\n-  insn_word = (*(info->buffer + bufaddr) << 24) | (*(info->buffer + bufaddr + 1) << 16) |\n-    (*(info->buffer + bufaddr + 2) << 8) | *(info->buffer + bufaddr + 3);\n+  insn_word = (((unsigned) *(info->buffer + bufaddr) << 24)\n+\t       | (*(info->buffer + bufaddr + 1) << 16)\n+\t       | (*(info->buffer + bufaddr + 2) << 8)\n+\t       | *(info->buffer + bufaddr + 3));\n   _pc = pc / 4;\n   /* Get the instruction refered to by the current instruction word\n      and print it out based on its type.  */"
    },
    {
      "sha": "dcb4a3bbedbea70978c4bf73f972d0c97a912506",
      "filename": "opcodes/v850-opc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/v850-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/v850-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/v850-opc.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -693,14 +693,10 @@ extract_WIDTH_L (unsigned long insn, int * invalid)\n static unsigned long\n insert_SELID (unsigned long insn, long selid, const char ** errmsg)\n {\n-  unsigned long ret;\n-\n-  if (selid > 0x1f || selid < 0)\n+  if ((unsigned long) selid > 0x1f)\n     * errmsg = _(selid_out_of_range);\n \n-  ret = (insn | ((selid & 0x1f) << 27));\n-\n-  return ret;\n+  return insn | ((selid & 0x1fUL) << 27);\n }\n \n static unsigned long"
    },
    {
      "sha": "0b331412d39952c590f8c8c8a62e28c62a73714f",
      "filename": "opcodes/vax-dis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/vax-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8/opcodes/vax-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/vax-dis.c?ref=2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "patch": "@@ -440,7 +440,8 @@ print_insn_vax (bfd_vma memaddr, disassemble_info *info)\n       int offset;\n \n       FETCH_DATA (info, buffer + 4);\n-      offset = buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];\n+      offset = ((unsigned) buffer[3] << 24 | buffer[2] << 16\n+\t\t| buffer[1] << 8 | buffer[0]);\n       (*info->fprintf_func) (info->stream, \".long 0x%08x\", offset);\n \n       return 4;"
    }
  ]
}