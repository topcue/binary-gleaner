{
  "sha": "a1499830feea0dc134e8b08d7cc5b6a52e370294",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTE0OTk4MzBmZWVhMGRjMTM0ZThiMDhkN2NjNWI2YTUyZTM3MDI5NA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-04T12:36:47Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-04T12:36:47Z"
    },
    "message": "[gdb/testsuite] Fix gdb.reverse/insn-reverse-x86.c for -m32\n\nWhen running test-case gdb.reverse/insn-reverse.exp with target board\nunix/-m32, we get:\n...\nspawn -ignore SIGHUP gcc -fno-stack-protector -fdiagnostics-color=never \\\n  -c -g -m32 -o insn-reverse0.o insn-reverse.c^M\ninsn-reverse-x86.c: Assembler messages:^M\ninsn-reverse-x86.c:88: Error: bad register name `%r8w'^M\n....\n\nFix this by guarding x86_64 assembly in insn-reverse-x86.c with #ifdef\n__x86_64__.\n\nTested on x86_64-linux, with native and unix/-m32.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-04  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.reverse/insn-reverse-x86.c: Guard x86_64 assembly with #ifdef\n\t__x86_64__.",
    "tree": {
      "sha": "caaf3dd7059a43ac12797a9b7a3b4ccdf884f5b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/caaf3dd7059a43ac12797a9b7a3b4ccdf884f5b4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a1499830feea0dc134e8b08d7cc5b6a52e370294",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1499830feea0dc134e8b08d7cc5b6a52e370294",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a1499830feea0dc134e8b08d7cc5b6a52e370294",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1499830feea0dc134e8b08d7cc5b6a52e370294/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 13,
    "deletions": 0
  },
  "files": [
    {
      "sha": "e7408a033ebc70a3055f61ae5af6fe33bfc42c65",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1499830feea0dc134e8b08d7cc5b6a52e370294/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1499830feea0dc134e8b08d7cc5b6a52e370294/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a1499830feea0dc134e8b08d7cc5b6a52e370294",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-04  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.reverse/insn-reverse-x86.c: Guard x86_64 assembly with #ifdef\n+\t__x86_64__.\n+\n 2020-12-04  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.reverse/insn-reverse.c (test_nr): New var."
    },
    {
      "sha": "4392cb66defc06d13f14c38a7c5b7a7bf145f65c",
      "filename": "gdb/testsuite/gdb.reverse/insn-reverse-x86.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1499830feea0dc134e8b08d7cc5b6a52e370294/gdb/testsuite/gdb.reverse/insn-reverse-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1499830feea0dc134e8b08d7cc5b6a52e370294/gdb/testsuite/gdb.reverse/insn-reverse-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.reverse/insn-reverse-x86.c?ref=a1499830feea0dc134e8b08d7cc5b6a52e370294",
      "patch": "@@ -85,6 +85,7 @@ rdrand (void)\n   __asm__ volatile (\"rdrand %%sp;\" : \"=r\" (number));\n   __asm__ volatile (\"mov %%ax, %%sp;\" : \"=r\" (number));\n \n+#ifdef __x86_64__\n   __asm__ volatile (\"rdrand %%r8w;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%r9w;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%r10w;\" : \"=r\" (number));\n@@ -93,13 +94,15 @@ rdrand (void)\n   __asm__ volatile (\"rdrand %%r13w;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%r14w;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%r15w;\" : \"=r\" (number));\n+#endif\n \n   /* 32-bit random numbers.  */\n   __asm__ volatile (\"rdrand %%eax;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%ebx;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%ecx;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%edx;\" : \"=r\" (number));\n \n+#ifdef __x86_64__\n   __asm__ volatile (\"mov %%rdi, %%rax;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%edi;\" : \"=r\" (number));\n   __asm__ volatile (\"mov %%rax, %%rdi;\" : \"=r\" (number));\n@@ -155,6 +158,7 @@ rdrand (void)\n   __asm__ volatile (\"rdrand %%r13;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%r14;\" : \"=r\" (number));\n   __asm__ volatile (\"rdrand %%r15;\" : \"=r\" (number));\n+#endif\n }\n \n /* Test rdseed support for various output registers.  */\n@@ -190,6 +194,7 @@ rdseed (void)\n   __asm__ volatile (\"rdseed %%sp;\" : \"=r\" (seed));\n   __asm__ volatile (\"mov %%ax, %%sp;\" : \"=r\" (seed));\n \n+#ifdef __x86_64__\n   __asm__ volatile (\"rdseed %%r8w;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%r9w;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%r10w;\" : \"=r\" (seed));\n@@ -198,13 +203,15 @@ rdseed (void)\n   __asm__ volatile (\"rdseed %%r13w;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%r14w;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%r15w;\" : \"=r\" (seed));\n+#endif\n \n   /* 32-bit random seeds.  */\n   __asm__ volatile (\"rdseed %%eax;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%ebx;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%ecx;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%edx;\" : \"=r\" (seed));\n \n+#ifdef __x86_64__\n   __asm__ volatile (\"mov %%rdi, %%rax;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%edi;\" : \"=r\" (seed));\n   __asm__ volatile (\"mov %%rax, %%rdi;\" : \"=r\" (seed));\n@@ -260,6 +267,7 @@ rdseed (void)\n   __asm__ volatile (\"rdseed %%r13;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%r14;\" : \"=r\" (seed));\n   __asm__ volatile (\"rdseed %%r15;\" : \"=r\" (seed));\n+#endif\n }\n \n /* Initialize arch-specific bits.  */"
    }
  ]
}