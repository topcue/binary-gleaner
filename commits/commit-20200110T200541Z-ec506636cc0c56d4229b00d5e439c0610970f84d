{
  "sha": "ec506636cc0c56d4229b00d5e439c0610970f84d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWM1MDY2MzZjYzBjNTZkNDIyOWIwMGQ1ZTQzOWMwNjEwOTcwZjg0ZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:41Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:41Z"
    },
    "message": "Don't rely on inferior_ptid in record_full_wait\n\nThe multi-target patch sets inferior_ptid to null_ptid before handling\na target event, and thus before calling target_wait, in order to catch\nplaces in target_ops::wait implementations that are incorrectly\nrelying on inferior_ptid (which could otherwise be a ptid of a\ndifferent target, for example).  That caught this instance in\nrecord-full.c.\n\nFix it by saving the last resumed ptid, and then using it in\nrecord_full_wait_1, just like how the last \"step\" argument passed to\nrecord_full_target::resume is handled too.\n\ngdb/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* record-full.c (record_full_resume_ptid): New global.\n\t(record_full_target::resume): Set it.\n\t(record_full_wait_1): Use record_full_resume_ptid instead of\n\tinferior_ptid.",
    "tree": {
      "sha": "3d01f04f7b4fb3ed19797d16503b07d80c094f2a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d01f04f7b4fb3ed19797d16503b07d80c094f2a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ec506636cc0c56d4229b00d5e439c0610970f84d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec506636cc0c56d4229b00d5e439c0610970f84d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ec506636cc0c56d4229b00d5e439c0610970f84d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec506636cc0c56d4229b00d5e439c0610970f84d/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "873657b9e824943ae44c12966c29cbbcd21c986f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/873657b9e824943ae44c12966c29cbbcd21c986f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/873657b9e824943ae44c12966c29cbbcd21c986f"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 20,
    "deletions": 1
  },
  "files": [
    {
      "sha": "dba48a52aeaa0ce9d345fe57c4de39e5b345170e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec506636cc0c56d4229b00d5e439c0610970f84d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec506636cc0c56d4229b00d5e439c0610970f84d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ec506636cc0c56d4229b00d5e439c0610970f84d",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* record-full.c (record_full_resume_ptid): New global.\n+\t(record_full_target::resume): Set it.\n+\t(record_full_wait_1): Use record_full_resume_ptid instead of\n+\tinferior_ptid.\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* gdbthread.h (scoped_restore_current_thread)"
    },
    {
      "sha": "c5ef59015b687a0188714fbcdf258262ab3234f3",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec506636cc0c56d4229b00d5e439c0610970f84d/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec506636cc0c56d4229b00d5e439c0610970f84d/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=ec506636cc0c56d4229b00d5e439c0610970f84d",
      "patch": "@@ -1036,6 +1036,9 @@ record_full_base_target::async (int enable)\n   beneath ()->async (enable);\n }\n \n+/* The PTID and STEP arguments last passed to\n+   record_full_target::resume.  */\n+static ptid_t record_full_resume_ptid = null_ptid;\n static int record_full_resume_step = 0;\n \n /* True if we've been resumed, and so each record_full_wait call should\n@@ -1064,6 +1067,7 @@ static enum exec_direction_kind record_full_execution_dir = EXEC_FORWARD;\n void\n record_full_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n {\n+  record_full_resume_ptid = inferior_ptid;\n   record_full_resume_step = step;\n   record_full_resumed = 1;\n   record_full_execution_dir = ::execution_direction;\n@@ -1190,7 +1194,8 @@ record_full_wait_1 (struct target_ops *ops,\n \t  /* This is not a single step.  */\n \t  ptid_t ret;\n \t  CORE_ADDR tmp_pc;\n-\t  struct gdbarch *gdbarch = target_thread_architecture (inferior_ptid);\n+\t  struct gdbarch *gdbarch\n+\t    = target_thread_architecture (record_full_resume_ptid);\n \n \t  while (1)\n \t    {"
    },
    {
      "sha": "1ec7b900b133cdadb293e5ee63d985587b334163",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec506636cc0c56d4229b00d5e439c0610970f84d/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec506636cc0c56d4229b00d5e439c0610970f84d/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=ec506636cc0c56d4229b00d5e439c0610970f84d",
      "patch": "@@ -478,6 +478,13 @@ struct target_ops\n       TARGET_DEFAULT_NORETURN (noprocess ());\n     virtual void commit_resume ()\n       TARGET_DEFAULT_IGNORE ();\n+    /* See target_wait's description.  Note that implementations of\n+       this method must not assume that inferior_ptid on entry is\n+       pointing at the thread or inferior that ends up reporting an\n+       event.  The reported event could be for some other thread in\n+       the current inferior or even for a different process of the\n+       current target.  inferior_ptid may also be null_ptid on\n+       entry.  */\n     virtual ptid_t wait (ptid_t, struct target_waitstatus *,\n \t\t\t int TARGET_DEBUG_PRINTER (target_debug_print_options))\n       TARGET_DEFAULT_FUNC (default_target_wait);"
    }
  ]
}