{
  "sha": "584a927c5ad0d18e9995a0049066b6c503bb7482",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTg0YTkyN2M1YWQwZDE4ZTk5OTVhMDA0OTA2NmI2YzUwM2JiNzQ4Mg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-01T11:12:33Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-06-15T23:29:35Z"
    },
    "message": "gdb/fortran: Show the type for non allocated / associated types\n\nShow the type of not-allocated and/or not-associated types.  For array\ntypes and pointer to array types we are going to print the number of\nranks.\n\nConsider this Fortran program:\n\n  program test\n    integer, allocatable :: vla (:)\n    logical l\n    allocate (vla(5:12))\n    l = allocated (vla)\n  end program test\n\nAnd this GDB session with current HEAD:\n\n  (gdb) start\n  ...\n  2\t  integer, allocatable :: vla (:)\n  (gdb) n\n  4\t  allocate (vla(5:12))\n  (gdb) ptype vla\n  type = <not allocated>\n  (gdb) p vla\n  $1 = <not allocated>\n  (gdb)\n\nAnd the same session with this patch applied:\n\n  (gdb) start\n  ...\n  2\t  integer, allocatable :: vla (:)\n  (gdb) n\n  4\t  allocate (vla(5:12))\n  (gdb) ptype vla\n  type = integer(kind=4), allocatable (:)\n  (gdb) p vla\n  $1 = <not allocated>\n  (gdb)\n\nThe type of 'vla' is now printed correctly, while the value itself\nstill shows as '<not allocated>'.  How GDB prints the type of\nassociated pointers has changed in a similar way.\n\ngdb/ChangeLog:\n\n\t* f-typeprint.c (f_print_type): Don't return early for not\n\tassociated or not allocated types.\n\t(f_type_print_varspec_suffix): Add print_rank parameter and print\n\tranks of array types in case they dangling.\n\t(f_type_print_base): Add print_rank parameter.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/pointers.f90: New file.\n\t* gdb.fortran/print_type.exp: New file.\n\t* gdb.fortran/vla-ptype.exp: Adapt expected results.\n\t* gdb.fortran/vla-type.exp: Likewise.\n\t* gdb.fortran/vla-value.exp: Likewise.\n\t* gdb.mi/mi-vla-fortran.exp: Likewise.",
    "tree": {
      "sha": "e7235e42ae1098ff109a169478c77dc1ef97accd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e7235e42ae1098ff109a169478c77dc1ef97accd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/584a927c5ad0d18e9995a0049066b6c503bb7482",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/584a927c5ad0d18e9995a0049066b6c503bb7482",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/584a927c5ad0d18e9995a0049066b6c503bb7482",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/584a927c5ad0d18e9995a0049066b6c503bb7482/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/30056ea04ae3ecd828e2a06e12e6f174ae6659c9"
    }
  ],
  "stats": {
    "total": 340,
    "additions": 283,
    "deletions": 57
  },
  "files": [
    {
      "sha": "77c5115d6b9d8a4a2a29845894ec1ac613c4a72b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -1,3 +1,12 @@\n+2019-06-16  Bernhard Heckel  <bernhard.heckel@intel.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-typeprint.c (f_print_type): Don't return early for not\n+\tassociated or not allocated types.\n+\t(f_type_print_varspec_suffix): Add print_rank parameter and print\n+\tranks of array types in case they dangling.\n+\t(f_type_print_base): Add print_rank parameter.\n+\n 2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention new MI commands."
    },
    {
      "sha": "17ac02f4ccf7d7592bad79eb07f67264eb1c048f",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 50,
      "deletions": 40,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -37,7 +37,7 @@ static void f_type_print_args (struct type *, struct ui_file *);\n #endif\n \n static void f_type_print_varspec_suffix (struct type *, struct ui_file *, int,\n-\t\t\t\t\t int, int, int);\n+\t\t\t\t\t int, int, int, bool);\n \n void f_type_print_varspec_prefix (struct type *, struct ui_file *,\n \t\t\t\t  int, int);\n@@ -53,18 +53,6 @@ f_print_type (struct type *type, const char *varstring, struct ui_file *stream,\n {\n   enum type_code code;\n \n-  if (type_not_associated (type))\n-    {\n-      val_print_not_associated (stream);\n-      return;\n-    }\n-\n-  if (type_not_allocated (type))\n-    {\n-      val_print_not_allocated (stream);\n-      return;\n-    }\n-\n   f_type_print_base (type, stream, show, level);\n   code = TYPE_CODE (type);\n   if ((varstring != NULL && *varstring != '\\0')\n@@ -96,7 +84,7 @@ f_print_type (struct type *type, const char *varstring, struct ui_file *stream,\n \n       demangled_args = (*varstring != '\\0'\n \t\t\t&& varstring[strlen (varstring) - 1] == ')');\n-      f_type_print_varspec_suffix (type, stream, show, 0, demangled_args, 0);\n+      f_type_print_varspec_suffix (type, stream, show, 0, demangled_args, 0, false);\n    }\n }\n \n@@ -161,12 +149,17 @@ f_type_print_varspec_prefix (struct type *type, struct ui_file *stream,\n \n /* Print any array sizes, function arguments or close parentheses\n    needed after the variable name (to describe its type).\n-   Args work like c_type_print_varspec_prefix.  */\n+   Args work like c_type_print_varspec_prefix.\n+\n+   PRINT_RANK_ONLY is true when TYPE is an array which should be printed\n+   without the upper and lower bounds being specified, this will occur\n+   when the array is not allocated or not associated and so there are no\n+   known upper or lower bounds.  */\n \n static void\n f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n \t\t\t     int show, int passed_a_ptr, int demangled_args,\n-\t\t\t     int arrayprint_recurse_level)\n+\t\t\t     int arrayprint_recurse_level, bool print_rank_only)\n {\n   /* No static variables are permitted as an error call may occur during\n      execution of this function.  */\n@@ -188,36 +181,52 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n \tfprintf_filtered (stream, \"(\");\n \n       if (type_not_associated (type))\n-        val_print_not_associated (stream);\n+\tprint_rank_only = true;\n       else if (type_not_allocated (type))\n-        val_print_not_allocated (stream);\n-      else\n-        {\n-          if (TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_ARRAY)\n-            f_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n-                                        0, 0, arrayprint_recurse_level);\n+\tprint_rank_only = true;\n+      else if ((TYPE_ASSOCIATED_PROP (type)\n+\t\t&& PROP_CONST != TYPE_DYN_PROP_KIND (TYPE_ASSOCIATED_PROP (type)))\n+\t       || (TYPE_ALLOCATED_PROP (type)\n+\t\t   && PROP_CONST != TYPE_DYN_PROP_KIND (TYPE_ALLOCATED_PROP (type)))\n+\t       || (TYPE_DATA_LOCATION (type)\n+\t\t   && PROP_CONST != TYPE_DYN_PROP_KIND (TYPE_DATA_LOCATION (type))))\n+\t{\n+\t  /* This case exist when we ptype a typename which has the dynamic\n+\t     properties but cannot be resolved as there is no object.  */\n+\t  print_rank_only = true;\n+\t}\n \n-          LONGEST lower_bound = f77_get_lowerbound (type);\n+      if (TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_ARRAY)\n+\tf_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n+\t\t\t\t     0, 0, arrayprint_recurse_level,\n+\t\t\t\t     print_rank_only);\n \n-          if (lower_bound != 1)\t/* Not the default.  */\n+      if (print_rank_only)\n+\tfprintf_filtered (stream, \":\");\n+      else\n+\t{\n+\t  LONGEST lower_bound = f77_get_lowerbound (type);\n+\t  if (lower_bound != 1)\t/* Not the default.  */\n             fprintf_filtered (stream, \"%s:\", plongest (lower_bound));\n \n-          /* Make sure that, if we have an assumed size array, we\n-             print out a warning and print the upperbound as '*'.  */\n+\t  /* Make sure that, if we have an assumed size array, we\n+\t       print out a warning and print the upperbound as '*'.  */\n \n-          if (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n-            fprintf_filtered (stream, \"*\");\n-          else\n-            {\n-              LONGEST upper_bound = f77_get_upperbound (type);\n+\t  if (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+\t    fprintf_filtered (stream, \"*\");\n+\t  else\n+\t    {\n+\t      LONGEST upper_bound = f77_get_upperbound (type);\n \n               fputs_filtered (plongest (upper_bound), stream);\n-            }\n+\t    }\n+\t}\n+\n+      if (TYPE_CODE (TYPE_TARGET_TYPE (type)) != TYPE_CODE_ARRAY)\n+\tf_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n+\t\t\t\t     0, 0, arrayprint_recurse_level,\n+\t\t\t\t     print_rank_only);\n \n-          if (TYPE_CODE (TYPE_TARGET_TYPE (type)) != TYPE_CODE_ARRAY)\n-            f_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n-                                        0, 0, arrayprint_recurse_level);\n-        }\n       if (arrayprint_recurse_level == 1)\n \tfprintf_filtered (stream, \")\");\n       else\n@@ -228,7 +237,7 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n     case TYPE_CODE_PTR:\n     case TYPE_CODE_REF:\n       f_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0, 1, 0,\n-\t\t\t\t   arrayprint_recurse_level);\n+\t\t\t\t   arrayprint_recurse_level, false);\n       fprintf_filtered (stream, \" )\");\n       break;\n \n@@ -237,7 +246,8 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n \tint i, nfields = TYPE_NFIELDS (type);\n \n \tf_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n-\t\t\t\t     passed_a_ptr, 0, arrayprint_recurse_level);\n+\t\t\t\t     passed_a_ptr, 0,\n+\t\t\t\t     arrayprint_recurse_level, false);\n \tif (passed_a_ptr)\n \t  fprintf_filtered (stream, \") \");\n \tfprintf_filtered (stream, \"(\");\n@@ -416,7 +426,7 @@ f_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t      fputs_filtered (\" :: \", stream);\n \t      fputs_filtered (TYPE_FIELD_NAME (type, index), stream);\n \t      f_type_print_varspec_suffix (TYPE_FIELD_TYPE (type, index),\n-\t\t\t\t\t   stream, show - 1, 0, 0, 0);\n+\t\t\t\t\t   stream, show - 1, 0, 0, 0, false);\n \t      fputs_filtered (\"\\n\", stream);\n \t    }\n \t  fprintfi_filtered (level, stream, \"End Type \");"
    },
    {
      "sha": "2efadd139b93950944c8ca74a39328cf242905dd",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -1,3 +1,13 @@\n+2019-06-16  Bernhard Heckel  <bernhard.heckel@intel.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/pointers.f90: New file.\n+\t* gdb.fortran/print_type.exp: New file.\n+\t* gdb.fortran/vla-ptype.exp: Adapt expected results.\n+\t* gdb.fortran/vla-type.exp: Likewise.\n+\t* gdb.fortran/vla-value.exp: Likewise.\n+\t* gdb.mi/mi-vla-fortran.exp: Likewise.\n+\n 2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.mi/mi-catch-cpp-exceptions.cc: New file."
    },
    {
      "sha": "cb7010d4a4fd0b8d6c5397394ba816f33145481d",
      "filename": "gdb/testsuite/gdb.fortran/pointers.f90",
      "status": "added",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/pointers.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/pointers.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/pointers.f90?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -0,0 +1,80 @@\n+! Copyright 2019 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+program pointers\n+\n+  type :: two\n+    integer, allocatable :: ivla1 (:)\n+    integer, allocatable :: ivla2 (:, :)\n+  end type two\n+\n+  logical, target :: logv\n+  complex, target :: comv\n+  character, target :: charv\n+  character (len=3), target :: chara\n+  integer, target :: intv\n+  integer, target, dimension (10,2) :: inta\n+  real, target :: realv\n+  type(two), target :: twov\n+\n+  logical, pointer :: logp\n+  complex, pointer :: comp\n+  character, pointer :: charp\n+  character (len=3), pointer :: charap\n+  integer, pointer :: intp\n+  integer, pointer, dimension (:,:) :: intap\n+  real, pointer :: realp\n+  type(two), pointer :: twop\n+\n+  nullify (logp)\n+  nullify (comp)\n+  nullify (charp)\n+  nullify (charap)\n+  nullify (intp)\n+  nullify (intap)\n+  nullify (realp)\n+  nullify (twop)\n+\n+  logp => logv    ! Before pointer assignment\n+  comp => comv\n+  charp => charv\n+  charap => chara\n+  intp => intv\n+  intap => inta\n+  realp => realv\n+  twop => twov\n+\n+  logv = associated(logp)     ! Before value assignment\n+  comv = cmplx(1,2)\n+  charv = \"a\"\n+  chara = \"abc\"\n+  intv = 10\n+  inta(:,:) = 1\n+  inta(3,1) = 3\n+  realv = 3.14\n+\n+  allocate (twov%ivla1(3))\n+  allocate (twov%ivla2(2,2))\n+  twov%ivla1(1) = 11\n+  twov%ivla1(2) = 12\n+  twov%ivla1(3) = 13\n+  twov%ivla2(1,1) = 211\n+  twov%ivla2(2,1) = 221\n+  twov%ivla2(1,2) = 212\n+  twov%ivla2(2,2) = 222\n+\n+  intv = intv + 1 ! After value assignment\n+\n+end program pointers"
    },
    {
      "sha": "2d6fb34e4e3656df984728ec1430a1d66b819311",
      "filename": "gdb/testsuite/gdb.fortran/print_type.exp",
      "status": "added",
      "additions": 114,
      "deletions": 0,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/print_type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/print_type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/print_type.exp?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -0,0 +1,114 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check how GDB handles printing pointers, both when associated, and\n+# when not associated.\n+\n+standard_testfile \"pointers.f90\"\n+load_lib fortran.exp\n+\n+if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+    {debug f90 quiet}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+# Depending on the compiler being used, the type names can be printed\n+# differently.\n+set logical [fortran_logical4]\n+set real [fortran_real4]\n+set int [fortran_int4]\n+set complex [fortran_complex4]\n+\n+# Print the inferior variable VAR_NAME, and check that the result\n+# matches the string TYPE.\n+proc check_pointer_type { var_name type } {\n+    gdb_test \"ptype ${var_name}\" \\\n+\t\"type = PTR TO -> \\\\( ${type} \\\\)\"\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Before pointer assignment\"]\n+gdb_continue_to_breakpoint \"Before pointer assignment\"\n+\n+with_test_prefix \"pointers not associated\" {\n+    check_pointer_type \"logp\" \"$logical\"\n+    check_pointer_type \"comp\" \"$complex\"\n+    check_pointer_type \"charp\" \"character\\\\*1\"\n+    check_pointer_type \"charap\" \"character\\\\*3\"\n+    check_pointer_type \"intp\" \"$int\"\n+\n+    # Current gfortran seems to not mark 'intap' as a pointer.  Intels\n+    # Fortran compiler does though.\n+    set test \"ptype intap\"\n+    gdb_test_multiple \"ptype intap\" $test {\n+\t-re \"type = PTR TO -> \\\\( $int \\\\(:,:\\\\) \\\\)\\r\\n$gdb_prompt $\" {\n+\t    pass $test\n+\t}\n+\t-re \"type = $int \\\\(:,:\\\\)\\r\\n$gdb_prompt $\" {\n+\t    pass $test\n+\t}\n+    }\n+\n+    check_pointer_type \"realp\" \"$real\"\n+    check_pointer_type \"twop\" \\\n+\t[multi_line \"Type two\" \\\n+\t     \"    $int, allocatable :: ivla1\\\\(:\\\\)\" \\\n+\t     \"    $int, allocatable :: ivla2\\\\(:,:\\\\)\" \\\n+\t     \"End Type two\"]\n+}\n+\n+gdb_test \"ptype two\" \\\n+    [multi_line \"type = Type two\" \\\n+\t \"    $int, allocatable :: ivla1\\\\(:\\\\)\" \\\n+\t \"    $int, allocatable :: ivla2\\\\(:,:\\\\)\" \\\n+\t \"End Type two\"]\n+\n+gdb_breakpoint [gdb_get_line_number \"Before value assignment\"]\n+gdb_continue_to_breakpoint \"Before value assignment\"\n+gdb_test \"ptype twop\" \\\n+    [multi_line \"type = PTR TO -> \\\\( Type two\" \\\n+                \"    $int, allocatable :: ivla1\\\\(:\\\\)\" \\\n+                \"    $int, allocatable :: ivla2\\\\(:,:\\\\)\" \\\n+                \"End Type two \\\\)\"]\n+\n+gdb_breakpoint [gdb_get_line_number \"After value assignment\"]\n+gdb_continue_to_breakpoint \"After value assignment\"\n+gdb_test \"ptype logv\" \"type = $logical\"\n+gdb_test \"ptype comv\" \"type = $complex\"\n+gdb_test \"ptype charv\" \"type = character\\\\*1\"\n+gdb_test \"ptype chara\" \"type = character\\\\*3\"\n+gdb_test \"ptype intv\" \"type = $int\"\n+gdb_test \"ptype inta\" \"type = $int \\\\(10,2\\\\)\"\n+gdb_test \"ptype realv\" \"type = $real\"\n+\n+gdb_test \"ptype logp\" \"type = PTR TO -> \\\\( $logical \\\\)\"\n+gdb_test \"ptype comp\" \"type = PTR TO -> \\\\( $complex \\\\)\"\n+gdb_test \"ptype charp\" \"type = PTR TO -> \\\\( character\\\\*1 \\\\)\"\n+gdb_test \"ptype charap\" \"type = PTR TO -> \\\\( character\\\\*3 \\\\)\"\n+gdb_test \"ptype intp\" \"type = PTR TO -> \\\\( $int \\\\)\"\n+set test \"ptype intap\"\n+gdb_test_multiple $test $test {\n+    -re \"type = $int \\\\(10,2\\\\)\\r\\n$gdb_prompt $\" {\n+        pass $test\n+    }\n+    -re \"type = PTR TO -> \\\\( $int \\\\(10,2\\\\)\\\\)\\r\\n$gdb_prompt $\" {\n+        pass $test\n+    }\n+}\n+gdb_test \"ptype realp\" \"type = PTR TO -> \\\\( $real \\\\)\""
    },
    {
      "sha": "a4c3c9c703027893fd2ae832ac76750dd13c452d",
      "filename": "gdb/testsuite/gdb.fortran/vla-ptype.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/vla-ptype.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/vla-ptype.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-ptype.exp?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -32,9 +32,9 @@ set real [fortran_real4]\n # Check the ptype of various VLA states and pointer to VLA's.\n gdb_breakpoint [gdb_get_line_number \"vla1-init\"]\n gdb_continue_to_breakpoint \"vla1-init\"\n-gdb_test \"ptype vla1\" \"type = <not allocated>\" \"ptype vla1 not initialized\"\n-gdb_test \"ptype vla2\" \"type = <not allocated>\" \"ptype vla2 not initialized\"\n-gdb_test \"ptype pvla\" \"type = <not associated>\" \"ptype pvla not initialized\"\n+gdb_test \"ptype vla1\" \"type = $real, allocatable \\\\(:,:,:\\\\)\" \"ptype vla1 not initialized\"\n+gdb_test \"ptype vla2\" \"type = $real, allocatable \\\\(:,:,:\\\\)\" \"ptype vla2 not initialized\"\n+gdb_test \"ptype pvla\" \"type = $real \\\\(:,:,:\\\\)\" \"ptype pvla not initialized\"\n gdb_test \"ptype vla1(3, 6, 9)\" \"no such vector element \\\\\\(vector not allocated\\\\\\)\" \\\n   \"ptype vla1(3, 6, 9) not initialized\"\n gdb_test \"ptype vla2(5, 45, 20)\" \\\n@@ -81,20 +81,20 @@ gdb_test \"ptype vla2(5, 45, 20)\" \"type = $real\" \\\n \n gdb_breakpoint [gdb_get_line_number \"pvla-deassociated\"]\n gdb_continue_to_breakpoint \"pvla-deassociated\"\n-gdb_test \"ptype pvla\" \"type = <not associated>\" \"ptype pvla deassociated\"\n+gdb_test \"ptype pvla\" \"type = $real \\\\(:,:,:\\\\)\" \"ptype pvla deassociated\"\n gdb_test \"ptype pvla(5, 45, 20)\" \\\n   \"no such vector element \\\\\\(vector not associated\\\\\\)\" \\\n   \"ptype pvla(5, 45, 20) not associated\"\n \n gdb_breakpoint [gdb_get_line_number \"vla1-deallocated\"]\n gdb_continue_to_breakpoint \"vla1-deallocated\"\n-gdb_test \"ptype vla1\" \"type = <not allocated>\" \"ptype vla1 not allocated\"\n+gdb_test \"ptype vla1\" \"type = $real, allocatable \\\\(:,:,:\\\\)\" \"ptype vla1 not allocated\"\n gdb_test \"ptype vla1(3, 6, 9)\" \"no such vector element \\\\\\(vector not allocated\\\\\\)\" \\\n   \"ptype vla1(3, 6, 9) not allocated\"\n \n gdb_breakpoint [gdb_get_line_number \"vla2-deallocated\"]\n gdb_continue_to_breakpoint \"vla2-deallocated\"\n-gdb_test \"ptype vla2\" \"type = <not allocated>\" \"ptype vla2 not allocated\"\n+gdb_test \"ptype vla2\" \"type = $real, allocatable \\\\(:,:,:\\\\)\" \"ptype vla2 not allocated\"\n gdb_test \"ptype vla2(5, 45, 20)\" \\\n   \"no such vector element \\\\\\(vector not allocated\\\\\\)\" \\\n   \"ptype vla2(5, 45, 20) not allocated\""
    },
    {
      "sha": "b88a3d042d13bb100393c3f8b3baf3cfd53a4c5c",
      "filename": "gdb/testsuite/gdb.fortran/vla-type.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/vla-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/vla-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-type.exp?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -132,7 +132,10 @@ gdb_test \"ptype fivearr(2)%tone\" \\\n                      \"End Type one\" ]\n \n # Check allocation status of dynamic array and it's dynamic members\n-gdb_test \"ptype fivedynarr\" \"type = <not allocated>\"\n+gdb_test \"ptype fivedynarr\" \\\n+         [multi_line \"type = Type five\" \\\n+                     \"    Type one :: tone\" \\\n+                     \"End Type five, allocatable \\\\(:\\\\)\" ]\n gdb_test \"next\" \"\"\n gdb_test \"ptype fivedynarr(2)\" \\\n          [multi_line \"type = Type five\" \\\n@@ -141,7 +144,7 @@ gdb_test \"ptype fivedynarr(2)\" \\\n          \"ptype fivedynarr(2), tone is not allocated\"\n gdb_test \"ptype fivedynarr(2)%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int, allocatable :: ivla\\\\(<not allocated>\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(:,:,:\\\\)\" \\\n                      \"End Type one\" ] \\\n          \"ptype fivedynarr(2)%tone, not allocated\"\n "
    },
    {
      "sha": "3cf5d6750050c1fb1c39706a961f5a4556f901f2",
      "filename": "gdb/testsuite/gdb.fortran/vla-value.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/vla-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.fortran/vla-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-value.exp?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -35,7 +35,7 @@ gdb_breakpoint [gdb_get_line_number \"vla1-init\"]\n gdb_continue_to_breakpoint \"vla1-init\"\n gdb_test \"print vla1\" \" = <not allocated>\" \"print non-allocated vla1\"\n gdb_test \"print &vla1\" \\\n-  \" = \\\\\\(PTR TO -> \\\\\\( $real, allocatable \\\\\\(<not allocated>\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n+  \" = \\\\\\(PTR TO -> \\\\\\( $real, allocatable \\\\\\(:,:,:\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n   \"print non-allocated &vla1\"\n gdb_test \"print vla1(1,1,1)\" \"no such vector element \\\\\\(vector not allocated\\\\\\)\" \\\n   \"print member in non-allocated vla1 (1)\"\n@@ -76,7 +76,7 @@ gdb_test \"print vla1(9, 9, 9)\" \" = 999\" \\\n # Try to access values in undefined pointer to VLA (dangling)\n gdb_test \"print pvla\" \" = <not associated>\" \"print undefined pvla\"\n gdb_test \"print &pvla\" \\\n-  \" = \\\\\\(PTR TO -> \\\\\\( $real \\\\\\(<not associated>\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n+  \" = \\\\\\(PTR TO -> \\\\\\( $real \\\\\\(:,:,:\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n   \"print non-associated &pvla\"\n gdb_test \"print pvla(1, 3, 8)\" \"no such vector element \\\\\\(vector not associated\\\\\\)\" \\\n   \"print undefined pvla(1,3,8)\"\n@@ -134,7 +134,7 @@ if ![runto MAIN__] then {\n     continue\n }\n gdb_breakpoint [gdb_get_line_number \"vla2-allocated\"]\n-gdb_continue_to_breakpoint \"vla2-allocated\"\n+gdb_continue_to_breakpoint \"vla2-allocated, second time\"\n # Many instructions to be executed when step over this line, and it is\n # slower in remote debugging.  Increase the timeout to avoid timeout\n # fail.\n@@ -151,13 +151,13 @@ gdb_test \"next\" \"\\\\d+.*vla1\\\\(1, 3, 8\\\\) = 1001\" \"next (2)\"\n gdb_test \"print \\$myvar(3,6,9)\" \" = 1311\" \"print \\$myvar(3,6,9)\"\n \n gdb_breakpoint [gdb_get_line_number \"pvla-associated\"]\n-gdb_continue_to_breakpoint \"pvla-associated\"\n+gdb_continue_to_breakpoint \"pvla-associated, second time\"\n gdb_test_no_output \"set \\$mypvar = pvla\" \"set \\$mypvar = pvla\"\n gdb_test \"print \\$mypvar(1,3,8)\" \" = 1001\" \"print \\$mypvar(1,3,8)\"\n \n # deallocate pointer and make sure user defined variable still has the\n # right value.\n gdb_breakpoint [gdb_get_line_number \"pvla-deassociated\"]\n-gdb_continue_to_breakpoint \"pvla-deassociated\"\n+gdb_continue_to_breakpoint \"pvla-deassociated, second time\"\n gdb_test \"print \\$mypvar(1,3,8)\" \" = 1001\" \\\n   \"print \\$mypvar(1,3,8) after deallocated\""
    },
    {
      "sha": "ec04bbe5a69771b5adaaa3d7d05155e478a6cb3e",
      "filename": "gdb/testsuite/gdb.mi/mi-vla-fortran.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.mi/mi-vla-fortran.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/584a927c5ad0d18e9995a0049066b6c503bb7482/gdb/testsuite/gdb.mi/mi-vla-fortran.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-vla-fortran.exp?ref=584a927c5ad0d18e9995a0049066b6c503bb7482",
      "patch": "@@ -51,10 +51,10 @@ mi_expect_stop \"breakpoint-hit\" \"vla\" \"\" \".*vla.f90\" \"$bp_lineno\" \\\n mi_gdb_test \"500-data-evaluate-expression vla1\" \\\n   \"500\\\\^done,value=\\\"<not allocated>\\\"\" \"evaluate not allocated vla, before allocation\"\n \n-mi_create_varobj_checked vla1_not_allocated vla1 \"<not allocated>\" \\\n+mi_create_varobj_checked vla1_not_allocated vla1 \"$real, allocatable \\\\(:\\\\)\" \\\n   \"create local variable vla1_not_allocated\"\n mi_gdb_test \"501-var-info-type vla1_not_allocated\" \\\n-  \"501\\\\^done,type=\\\"<not allocated>\\\"\" \\\n+  \"501\\\\^done,type=\\\"$real, allocatable \\\\(:\\\\)\\\"\" \\\n   \"info type variable vla1_not_allocated\"\n mi_gdb_test \"502-var-show-format vla1_not_allocated\" \\\n   \"502\\\\^done,format=\\\"natural\\\"\" \\\n@@ -146,10 +146,10 @@ gdb_expect {\n     -re \"580\\\\^done,value=\\\"<not associated>\\\".*${mi_gdb_prompt}$\" {\n \tpass $test\n \n-\tmi_create_varobj_checked pvla2_not_associated pvla2 \"<not associated>\" \\\n+\tmi_create_varobj_checked pvla2_not_associated pvla2 \"$real \\\\(:,:\\\\)\" \\\n \t    \"create local variable pvla2_not_associated\"\n \tmi_gdb_test \"581-var-info-type pvla2_not_associated\" \\\n-\t    \"581\\\\^done,type=\\\"<not associated>\\\"\" \\\n+\t    \"581\\\\^done,type=\\\"$real \\\\(:,:\\\\)\\\"\" \\\n \t    \"info type variable pvla2_not_associated\"\n \tmi_gdb_test \"582-var-show-format pvla2_not_associated\" \\\n \t    \"582\\\\^done,format=\\\"natural\\\"\" \\"
    }
  ]
}