{
  "sha": "5e22e966a02123478a3c5e067f911a3d180060af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWUyMmU5NjZhMDIxMjM0NzhhM2M1ZTA2N2Y5MTFhM2QxODAwNjBhZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:54Z"
    },
    "message": "Remove dwarf2_cu->per_cu->dwarf2_per_objfile references\n\nChange spots that access the dwarf2_per_objfile object through this\npattern:\n\n  dwarf2_cu->per_cu->dwarf2_per_objfile\n\nto\n\n  dwarf2_cu->per_objfile\n\nThis allows removing many references to\ndwarf2_per_cu_data::dwarf2_per_objfile.\n\nAgain, I hope the following ChangeLog entry will be fine.  I'd rather not\nlist all the affected functions, as it would be time-consuming and a bit\npointless.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c: Replace\n\tdwarf2_cu->per_cu->dwarf2_per_objfile references with\n\tdwarf2_cu->per_objfile throughout.\n\nChange-Id: I00f44e88295f70ae805a4b18e8144ca92154612e",
    "tree": {
      "sha": "5241b764b7644df45afdb826d6c358cb4e0f9d0d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5241b764b7644df45afdb826d6c358cb4e0f9d0d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e22e966a02123478a3c5e067f911a3d180060af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e22e966a02123478a3c5e067f911a3d180060af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e22e966a02123478a3c5e067f911a3d180060af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e22e966a02123478a3c5e067f911a3d180060af/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "97a1449a95e34910e74ea24914f765314c2d8d1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97a1449a95e34910e74ea24914f765314c2d8d1b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/97a1449a95e34910e74ea24914f765314c2d8d1b"
    }
  ],
  "stats": {
    "total": 298,
    "additions": 133,
    "deletions": 165
  },
  "files": [
    {
      "sha": "e2a7a5f0078bf983206f6daf359ea383897a2f8c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e22e966a02123478a3c5e067f911a3d180060af/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e22e966a02123478a3c5e067f911a3d180060af/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e22e966a02123478a3c5e067f911a3d180060af",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c: Replace\n+\tdwarf2_cu->per_cu->dwarf2_per_objfile references with\n+\tdwarf2_cu->per_objfile throughout.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.c (dw2_do_instantiate_symtab): Add per_objfile"
    },
    {
      "sha": "294afc9a217cf597ec22c1a1b397d7e56d65ea6d",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 127,
      "deletions": 165,
      "changes": 292,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e22e966a02123478a3c5e067f911a3d180060af/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e22e966a02123478a3c5e067f911a3d180060af/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5e22e966a02123478a3c5e067f911a3d180060af",
      "patch": "@@ -3131,8 +3131,7 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n {\n   struct dwarf2_cu *cu = reader->cu;\n   struct dwarf2_per_cu_data *this_cu = cu->per_cu;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct dwarf2_per_cu_data *lh_cu;\n   struct attribute *attr;\n   void **slot;\n@@ -6491,8 +6490,7 @@ fill_in_sig_entry_from_dwo_entry (struct dwarf2_per_objfile *dwarf2_per_objfile,\n static struct signatured_type *\n lookup_dwo_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct dwo_file *dwo_file;\n   struct dwo_unit find_dwo_entry, *dwo_entry;\n   struct signatured_type find_sig_entry, *sig_entry;\n@@ -6558,8 +6556,7 @@ lookup_dwo_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n static struct signatured_type *\n lookup_dwp_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct dwp_file *dwp_file = get_dwp_file (dwarf2_per_objfile);\n   struct dwo_unit *dwo_entry;\n   struct signatured_type find_sig_entry, *sig_entry;\n@@ -6604,8 +6601,7 @@ lookup_dwp_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n static struct signatured_type *\n lookup_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n   if (cu->dwo_unit\n       && dwarf2_per_objfile->per_bfd->using_index)\n@@ -7286,8 +7282,7 @@ allocate_type_unit_groups_table ()\n static struct type_unit_group *\n create_type_unit_group (struct dwarf2_cu *cu, sect_offset line_offset_struct)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct dwarf2_per_cu_data *per_cu;\n   struct type_unit_group *tu_group;\n \n@@ -7330,8 +7325,7 @@ create_type_unit_group (struct dwarf2_cu *cu, sect_offset line_offset_struct)\n static struct type_unit_group *\n get_type_unit_group (struct dwarf2_cu *cu, const struct attribute *stmt_list)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct tu_stats *tu_stats = &dwarf2_per_objfile->per_bfd->tu_stats;\n   struct type_unit_group *tu_group;\n   void **slot;\n@@ -7413,7 +7407,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \t\t\t\t  enum language pretend_language)\n {\n   struct dwarf2_cu *cu = reader->cu;\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct dwarf2_per_cu_data *per_cu = cu->per_cu;\n   CORE_ADDR baseaddr;\n@@ -7595,8 +7589,7 @@ build_type_psymtabs_reader (const struct die_reader_specs *reader,\n \t\t\t    const gdb_byte *info_ptr,\n \t\t\t    struct die_info *type_unit_die)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = reader->cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = reader->cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwarf2_cu *cu = reader->cu;\n   struct dwarf2_per_cu_data *per_cu = cu->per_cu;\n@@ -8150,12 +8143,11 @@ scan_partial_symbols (struct partial_die_info *first_die, CORE_ADDR *lowpc,\n \t\t  {\n \t\t    error (_(\"Dwarf Error: DW_TAG_imported_unit is not\"\n \t\t\t     \" supported in type units [in module %s]\"),\n-\t\t\t   objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t\t   objfile_name (cu->per_objfile->objfile));\n \t\t  }\n \n \t\tper_cu = dwarf2_find_containing_comp_unit\n-\t\t\t   (pdi->d.sect_off, pdi->is_dwz,\n-\t\t\t    cu->per_cu->dwarf2_per_objfile);\n+\t\t\t   (pdi->d.sect_off, pdi->is_dwz, cu->per_objfile);\n \n \t\t/* Go read the partial unit, if needed.  */\n \t\tif (per_cu->v.psymtab == NULL)\n@@ -8325,8 +8317,7 @@ partial_die_full_name (struct partial_die_info *pdi,\n static void\n add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR addr = 0;\n@@ -8576,7 +8567,7 @@ add_partial_subprogram (struct partial_die_info *pdi,\n             *highpc = pdi->highpc;\n \t  if (set_addrmap)\n \t    {\n-\t      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+\t      struct objfile *objfile = cu->per_objfile->objfile;\n \t      struct gdbarch *gdbarch = objfile->arch ();\n \t      CORE_ADDR baseaddr;\n \t      CORE_ADDR this_highpc;\n@@ -8670,7 +8661,7 @@ peek_die_abbrev (const die_reader_specs &reader,\n \t\t const gdb_byte *info_ptr, unsigned int *bytes_read)\n {\n   dwarf2_cu *cu = reader.cu;\n-  bfd *abfd = cu->per_cu->dwarf2_per_objfile->objfile->obfd;\n+  bfd *abfd = cu->per_objfile->objfile->obfd;\n   unsigned int abbrev_number\n     = read_unsigned_leb128 (abfd, info_ptr, bytes_read);\n \n@@ -9251,8 +9242,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n \t\tpackage_name = std::move (this_package_name);\n \t      else\n \t\t{\n-\t\t  struct objfile *objfile\n-\t\t    = cu->per_cu->dwarf2_per_objfile->objfile;\n+\t\t  struct objfile *objfile = cu->per_objfile->objfile;\n \t\t  if (strcmp (package_name.get (), this_package_name.get ()) != 0)\n \t\t    complaint (_(\"Symtab %s has objects from two different Go packages: %s and %s\"),\n \t\t\t       (symbol_symtab (sym) != NULL\n@@ -9267,7 +9257,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n \n   if (package_name != NULL)\n     {\n-      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+      struct objfile *objfile = cu->per_objfile->objfile;\n       const char *saved_package_name = objfile->intern (package_name.get ());\n       struct type *type = init_type (objfile, TYPE_CODE_MODULE, 0,\n \t\t\t\t     saved_package_name);\n@@ -9597,7 +9587,7 @@ rust_union_quirks (struct dwarf2_cu *cu)\n {\n   gdb_assert (cu->language == language_rust);\n   for (type *type_ : cu->rust_unions)\n-    quirk_rust_enum (type_, cu->per_cu->dwarf2_per_objfile->objfile);\n+    quirk_rust_enum (type_, cu->per_objfile->objfile);\n   /* We don't need this any more.  */\n   cu->rust_unions.clear ();\n }\n@@ -9894,7 +9884,7 @@ process_imported_unit_die (struct die_info *die, struct dwarf2_cu *cu)\n     {\n       error (_(\"Dwarf Error: DW_TAG_imported_unit is not\"\n \t       \" supported in type units [in module %s]\"),\n-\t     objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t     objfile_name (cu->per_objfile->objfile));\n     }\n \n   attr = dwarf2_attr (die, DW_AT_import, cu);\n@@ -9903,8 +9893,7 @@ process_imported_unit_die (struct die_info *die, struct dwarf2_cu *cu)\n       sect_offset sect_off = attr->get_ref_die_offset ();\n       bool is_dwz = (attr->form == DW_FORM_GNU_ref_alt || cu->per_cu->is_dwz);\n       dwarf2_per_cu_data *per_cu\n-\t= dwarf2_find_containing_comp_unit (sect_off, is_dwz,\n-\t\t\t\t\t    cu->per_cu->dwarf2_per_objfile);\n+\t= dwarf2_find_containing_comp_unit (sect_off, is_dwz, cu->per_objfile);\n \n       /* We're importing a C++ compilation unit with tag DW_TAG_compile_unit\n \t into another compilation unit, at root level.  Regard this as a hint,\n@@ -10182,7 +10171,7 @@ dwarf2_compute_name (const char *name,\n \t\t     struct die_info *die, struct dwarf2_cu *cu,\n \t\t     int physname)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n \n   if (name == NULL)\n     name = dwarf2_name (die, cu);\n@@ -10425,7 +10414,7 @@ dwarf2_full_name (const char *name, struct die_info *die, struct dwarf2_cu *cu)\n static const char *\n dwarf2_physname (const char *name, struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   const char *retval, *mangled = NULL, *canon = NULL;\n   int need_copy = 1;\n \n@@ -10595,7 +10584,7 @@ using_directives (struct dwarf2_cu *cu)\n static void\n read_import_statement (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct attribute *import_attr;\n   struct die_info *imported_die, *child_die;\n   struct dwarf2_cu *imported_cu;\n@@ -10815,8 +10804,7 @@ static void\n handle_DW_AT_stmt_list (struct die_info *die, struct dwarf2_cu *cu,\n \t\t\tconst char *comp_dir, CORE_ADDR lowpc) /* ARI: editCase function */\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct attribute *attr;\n   struct line_header line_header_local;\n   hashval_t line_header_local_hash;\n@@ -10912,8 +10900,7 @@ handle_DW_AT_stmt_list (struct die_info *die, struct dwarf2_cu *cu,\n static void\n read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR lowpc = ((CORE_ADDR) -1);\n@@ -12994,7 +12981,7 @@ inherit_abstract_dies (struct die_info *die, struct dwarf2_cu *cu)\n static void\n read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct context_stack *newobj;\n   CORE_ADDR lowpc;\n@@ -13195,7 +13182,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n static void\n read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR lowpc, highpc;\n   struct die_info *child_die;\n@@ -13275,7 +13262,7 @@ read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n static void\n read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_objfile;\n   struct objfile *objfile = per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR pc, baseaddr;\n@@ -13427,7 +13414,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n       struct die_info *target_die;\n \n       target_die = follow_die_ref (die, attr, &target_cu);\n-      gdb_assert (target_cu->per_cu->dwarf2_per_objfile->objfile == objfile);\n+      gdb_assert (target_cu->per_objfile->objfile == objfile);\n       if (die_is_declaration (target_die, target_cu))\n \t{\n \t  const char *target_physname;\n@@ -13620,7 +13607,7 @@ read_variable (struct die_info *die, struct dwarf2_cu *cu)\n \n       if (containing_type != NULL)\n \t{\n-\t  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+\t  struct objfile *objfile = cu->per_objfile->objfile;\n \n \t  storage = new (&objfile->objfile_obstack) rust_vtable_symbol;\n \t  storage->concrete_type = containing_type;\n@@ -13641,8 +13628,9 @@ read_variable (struct die_info *die, struct dwarf2_cu *cu)\n       struct dwarf2_cu *origin_cu = cu;\n       struct die_info *origin_die\n \t= follow_die_ref (die, abstract_origin, &origin_cu);\n-      dwarf2_per_objfile *dpo = cu->per_cu->dwarf2_per_objfile;\n-      dpo->per_bfd->abstract_to_concrete[origin_die->sect_off].push_back (die->sect_off);\n+      dwarf2_per_objfile *per_objfile = cu->per_objfile;\n+      per_objfile->per_bfd->abstract_to_concrete\n+\t[origin_die->sect_off].push_back (die->sect_off);\n     }\n }\n \n@@ -13658,8 +13646,7 @@ static bool\n dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n \t\t\t Callback &&callback)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   bfd *obfd = objfile->obfd;\n   /* Base address selection entry.  */\n@@ -13819,9 +13806,8 @@ static int\n dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n \t\t       Callback &&callback)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-      = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   struct comp_unit_head *cu_header = &cu->header;\n   bfd *obfd = objfile->obfd;\n   unsigned int addr_size = cu_header->addr_size;\n@@ -13837,14 +13823,14 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n \n   base = cu->base_address;\n \n-  dwarf2_per_objfile->per_bfd->ranges.read (objfile);\n-  if (offset >= dwarf2_per_objfile->per_bfd->ranges.size)\n+  per_objfile->per_bfd->ranges.read (objfile);\n+  if (offset >= per_objfile->per_bfd->ranges.size)\n     {\n       complaint (_(\"Offset %d out of bounds for DW_AT_ranges attribute\"),\n \t\t offset);\n       return 0;\n     }\n-  buffer = dwarf2_per_objfile->per_bfd->ranges.buffer + offset;\n+  buffer = per_objfile->per_bfd->ranges.buffer + offset;\n \n   baseaddr = objfile->text_section_offset ();\n \n@@ -13899,7 +13885,7 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n       /* A not-uncommon case of bad debug info.\n \t Don't pollute the addrmap with bad data.  */\n       if (range_beginning + baseaddr == 0\n-\t  && !dwarf2_per_objfile->per_bfd->has_section_at_zero)\n+\t  && !per_objfile->per_bfd->has_section_at_zero)\n \t{\n \t  complaint (_(\".debug_ranges entry has start address of zero\"\n \t\t       \" [in module %s]\"), objfile_name (objfile));\n@@ -13921,7 +13907,7 @@ dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,\n \t\t    CORE_ADDR *high_return, struct dwarf2_cu *cu,\n \t\t    dwarf2_psymtab *ranges_pst)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   const CORE_ADDR baseaddr = objfile->text_section_offset ();\n   int low_set = 0;\n@@ -13989,8 +13975,7 @@ dwarf2_get_pc_bounds (struct die_info *die, CORE_ADDR *lowpc,\n \t\t      CORE_ADDR *highpc, struct dwarf2_cu *cu,\n \t\t      dwarf2_psymtab *pst)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct attribute *attr;\n   struct attribute *attr_high;\n   CORE_ADDR low = 0;\n@@ -14165,7 +14150,7 @@ static void\n dwarf2_record_block_ranges (struct die_info *die, struct block *block,\n                             CORE_ADDR baseaddr, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct attribute *attr;\n   struct attribute *attr_high;\n@@ -14373,8 +14358,8 @@ handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n \t    SET_FIELD_BITPOS (*field, offset * bits_per_byte);\n \t  else\n \t    {\n-\t      struct objfile *objfile\n-\t\t= cu->per_cu->dwarf2_per_objfile->objfile;\n+\t      dwarf2_per_objfile *per_objfile = cu->per_objfile;\n+\t      struct objfile *objfile = per_objfile->objfile;\n \t      struct dwarf2_locexpr_baton *dlbaton\n \t\t= XOBNEW (&objfile->objfile_obstack,\n \t\t\t  struct dwarf2_locexpr_baton);\n@@ -14384,7 +14369,7 @@ handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n \t\t of the field, not the value.  This is why\n \t\t is_reference is set to false here.  */\n \t      dlbaton->is_reference = false;\n-\t      dlbaton->per_objfile = cu->per_cu->dwarf2_per_objfile;\n+\t      dlbaton->per_objfile = per_objfile;\n \t      dlbaton->per_cu = cu->per_cu;\n \n \t      SET_FIELD_DWARF_BLOCK (*field, dlbaton);\n@@ -14401,7 +14386,7 @@ static void\n dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \t\t  struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct nextfield *new_field;\n   struct attribute *attr;\n@@ -14821,7 +14806,7 @@ add_variant_property (struct field_info *fip, struct type *type,\n   for (int i = 0; i < fip->fields.size (); ++i)\n     offset_map[fip->fields[i].offset] = i;\n \n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   gdb::array_view<variant_part> parts\n     = create_variant_parts (&objfile->objfile_obstack, offset_map, fip,\n \t\t\t    fip->variant_parts);\n@@ -14982,7 +14967,7 @@ static void\n dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n \t\t      struct type *type, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct attribute *attr;\n   int i;\n   struct fnfieldlist *flp = nullptr;\n@@ -15282,7 +15267,7 @@ get_alignment (struct dwarf2_cu *cu, struct die_info *die)\n       complaint (_(\"DW_AT_alignment must have constant form\"\n \t\t   \" - DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n       return 0;\n     }\n \n@@ -15295,7 +15280,7 @@ get_alignment (struct dwarf2_cu *cu, struct die_info *die)\n \t  complaint (_(\"DW_AT_alignment value must not be negative\"\n \t\t       \" - DIE at %s [in module %s]\"),\n \t\t     sect_offset_str (die->sect_off),\n-\t\t     objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t     objfile_name (cu->per_objfile->objfile));\n \t  return 0;\n \t}\n       align = val;\n@@ -15308,15 +15293,15 @@ get_alignment (struct dwarf2_cu *cu, struct die_info *die)\n       complaint (_(\"DW_AT_alignment value must not be zero\"\n \t\t   \" - DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n       return 0;\n     }\n   if ((align & (align - 1)) != 0)\n     {\n       complaint (_(\"DW_AT_alignment value must be a power of 2\"\n \t\t   \" - DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n       return 0;\n     }\n \n@@ -15334,7 +15319,7 @@ maybe_set_alignment (struct dwarf2_cu *cu, struct die_info *die,\n     complaint (_(\"DW_AT_alignment value too large\"\n \t\t \" - DIE at %s [in module %s]\"),\n \t       sect_offset_str (die->sect_off),\n-\t       objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t       objfile_name (cu->per_objfile->objfile));\n }\n \n /* Check if the given VALUE is a valid enum dwarf_calling_convention\n@@ -15398,7 +15383,7 @@ is_valid_DW_AT_calling_convention_for_subroutine (ULONGEST value)\n static struct type *\n read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct type *type;\n   struct attribute *attr;\n   const char *name;\n@@ -15547,7 +15532,7 @@ handle_variant_part (struct die_info *die, struct type *type,\n       complaint (_(\"nested DW_TAG_variant_part seen \"\n \t\t   \"- DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n       return;\n     }\n   else\n@@ -15579,7 +15564,7 @@ handle_variant_part (struct die_info *die, struct type *type,\n       complaint (_(\"DW_AT_discr does not have DIE reference form\"\n \t\t   \" - DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n     }\n \n   for (die_info *child_die = die->child;\n@@ -15602,15 +15587,15 @@ handle_variant (struct die_info *die, struct type *type,\n       complaint (_(\"saw DW_TAG_variant outside DW_TAG_variant_part \"\n \t\t   \"- DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n       return;\n     }\n   if (fi->current_variant_part->processing_variant)\n     {\n       complaint (_(\"nested DW_TAG_variant seen \"\n \t\t   \"- DIE at %s [in module %s]\"),\n \t\t sect_offset_str (die->sect_off),\n-\t\t objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t objfile_name (cu->per_objfile->objfile));\n       return;\n     }\n \n@@ -15703,7 +15688,7 @@ handle_struct_member_die (struct die_info *child_die, struct type *type,\n static void\n process_structure_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct die_info *child_die;\n   struct type *type;\n \n@@ -15994,7 +15979,7 @@ update_enumeration_type_from_children (struct die_info *die,\n static struct type *\n read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct type *type;\n   struct attribute *attr;\n   const char *name;\n@@ -16146,7 +16131,7 @@ process_enumeration_scope (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n read_array_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct die_info *child_die;\n   struct type *type;\n   struct type *element_type, *range_type, *index_type;\n@@ -16177,7 +16162,7 @@ read_array_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  complaint (_(\"unable to read array DW_AT_byte_stride \"\n \t\t       \" - DIE at %s [in module %s]\"),\n \t\t     sect_offset_str (die->sect_off),\n-\t\t     objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t     objfile_name (cu->per_objfile->objfile));\n \t  /* Ignore this attribute.  We will likely not be able to print\n \t     arrays of this type correctly, but there is little we can do\n \t     to help if we cannot read the attribute's value.  */\n@@ -16353,7 +16338,7 @@ mark_common_block_symbol_computed (struct symbol *sym,\n \t\t\t\t   struct attribute *member_loc,\n \t\t\t\t   struct dwarf2_cu *cu)\n {\n-  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_objfile;\n   struct objfile *objfile = per_objfile->objfile;\n   struct dwarf2_locexpr_baton *baton;\n   gdb_byte *ptr;\n@@ -16444,7 +16429,7 @@ read_common_block (struct die_info *die, struct dwarf2_cu *cu)\n \n   if (die->child != NULL)\n     {\n-      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+      struct objfile *objfile = cu->per_objfile->objfile;\n       struct die_info *child_die;\n       size_t n_entries = 0, size;\n       struct common_block *common_block;\n@@ -16515,7 +16500,7 @@ read_common_block (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n read_namespace_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   const char *previous_prefix, *name;\n   int is_anonymous;\n   struct type *type;\n@@ -16554,7 +16539,7 @@ read_namespace_type (struct die_info *die, struct dwarf2_cu *cu)\n static void\n read_namespace (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   int is_anonymous;\n \n   /* Add a symbol associated to this if we haven't seen the namespace\n@@ -16599,7 +16584,7 @@ read_namespace (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n read_module_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   const char *module_name;\n   struct type *type;\n \n@@ -16666,8 +16651,7 @@ namespace_name (struct die_info *die, int *is_anonymous, struct dwarf2_cu *cu)\n static struct type *\n read_tag_pointer_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct gdbarch *gdbarch\n-    = cu->per_cu->dwarf2_per_objfile->objfile->arch ();\n+  struct gdbarch *gdbarch = cu->per_objfile->objfile->arch ();\n   struct comp_unit_head *cu_header = &cu->header;\n   struct type *type;\n   struct attribute *attr_byte_size;\n@@ -16725,7 +16709,7 @@ read_tag_pointer_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  complaint (_(\"Invalid DW_AT_alignment\"\n \t\t       \" - DIE at %s [in module %s]\"),\n \t\t     sect_offset_str (die->sect_off),\n-\t\t     objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t     objfile_name (cu->per_objfile->objfile));\n \t}\n       else\n \t{\n@@ -16760,8 +16744,7 @@ read_tag_ptr_to_member_type (struct die_info *die, struct dwarf2_cu *cu)\n     type = lookup_methodptr_type (to_type);\n   else if (check_typedef (to_type)->code () == TYPE_CODE_FUNC)\n     {\n-      struct type *new_type\n-\t= alloc_type (cu->per_cu->dwarf2_per_objfile->objfile);\n+      struct type *new_type = alloc_type (cu->per_objfile->objfile);\n \n       smash_to_method_type (new_type, domain, TYPE_TARGET_TYPE (to_type),\n \t\t\t    to_type->fields (), to_type->num_fields (),\n@@ -16925,7 +16908,7 @@ read_tag_atomic_type (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n read_tag_string_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct type *type, *range_type, *index_type, *char_type;\n   struct attribute *attr;\n@@ -17064,7 +17047,7 @@ prototyped_function_p (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct type *type;\t\t/* Type that this function returns.  */\n   struct type *ftype;\t\t/* Function that returns above type.  */\n   struct attribute *attr;\n@@ -17203,7 +17186,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n read_typedef (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   const char *name = NULL;\n   struct type *this_type, *target_type;\n \n@@ -17348,7 +17331,7 @@ dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n static struct type *\n read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct type *type;\n   struct attribute *attr;\n   int encoding = 0, bits = 0;\n@@ -17405,7 +17388,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \t    if (name == nullptr)\n \t      {\n \t\tstruct obstack *obstack\n-\t\t  = &cu->per_cu->dwarf2_per_objfile->objfile->objfile_obstack;\n+\t\t  = &cu->per_objfile->objfile->objfile_obstack;\n \t\tname = obconcat (obstack, \"_Complex \", type->name (),\n \t\t\t\t nullptr);\n \t      }\n@@ -17491,7 +17474,7 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n \t\t      struct type *default_type)\n {\n   struct dwarf2_property_baton *baton;\n-  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_objfile;\n   struct objfile *objfile = per_objfile->objfile;\n   struct obstack *obstack = &objfile->objfile_obstack;\n \n@@ -17733,7 +17716,7 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n     complaint (_(\"Missing DW_AT_lower_bound \"\n \t\t\t\t      \"- DIE at %s [in module %s]\"),\n \t       sect_offset_str (die->sect_off),\n-\t       objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t       objfile_name (cu->per_objfile->objfile));\n \n   struct attribute *attr_ub, *attr_count;\n   attr = attr_ub = dwarf2_attr (die, DW_AT_upper_bound, cu);\n@@ -17754,12 +17737,12 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n \t    complaint (_(\"Unresolved DW_AT_upper_bound \"\n \t\t\t \"- DIE at %s [in module %s]\"),\n \t\t       sect_offset_str (die->sect_off),\n-\t\t       objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t       objfile_name (cu->per_objfile->objfile));\n \t  if (attr_count != NULL)\n \t    complaint (_(\"Unresolved DW_AT_count \"\n \t\t\t \"- DIE at %s [in module %s]\"),\n \t\t       sect_offset_str (die->sect_off),\n-\t\t       objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t       objfile_name (cu->per_objfile->objfile));\n \t}\n     }\n \n@@ -17804,7 +17787,7 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  complaint (_(\"Found DW_AT_bit_stride and DW_AT_byte_stride \"\n \t\t       \"- DIE at %s [in module %s]\"),\n \t\t     sect_offset_str (die->sect_off),\n-\t\t     objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t     objfile_name (cu->per_objfile->objfile));\n \t  attr_bit_stride = nullptr;\n \t}\n       else\n@@ -17859,8 +17842,7 @@ read_unspecified_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct type *type;\n \n-  type = init_type (cu->per_cu->dwarf2_per_objfile->objfile, TYPE_CODE_VOID,0,\n-\t\t    NULL);\n+  type = init_type (cu->per_objfile->objfile, TYPE_CODE_VOID, 0, NULL);\n   type->set_name (dwarf2_name (die, cu));\n \n   /* In Ada, an unspecified type is typically used when the description\n@@ -18109,7 +18091,7 @@ load_partial_dies (const struct die_reader_specs *reader,\n \t\t   const gdb_byte *info_ptr, int building_psymtab)\n {\n   struct dwarf2_cu *cu = reader->cu;\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct partial_die_info *parent_die, *last_die, *first_die = NULL;\n   unsigned int bytes_read;\n   unsigned int load_all = 0;\n@@ -18383,8 +18365,7 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t\t\tconst struct abbrev_info &abbrev, const gdb_byte *info_ptr)\n {\n   struct dwarf2_cu *cu = reader->cu;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   unsigned int i;\n   int has_low_pc_attr = 0;\n   int has_high_pc_attr = 0;\n@@ -18646,8 +18627,7 @@ dwarf2_cu::find_partial_die (sect_offset sect_off)\n static const struct cu_partial_die_info\n find_partial_die (sect_offset sect_off, int offset_in_dwz, struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwarf2_per_cu_data *per_cu = NULL;\n   struct partial_die_info *pd = NULL;\n@@ -18753,7 +18733,7 @@ guess_partial_die_structure_name (struct partial_die_info *struct_pdi,\n \t\t\t\t\t\tchild_pdi->linkage_name));\n \t  if (actual_class_name != NULL)\n \t    {\n-\t      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+\t      struct objfile *objfile = cu->per_objfile->objfile;\n \t      struct_pdi->name = objfile->intern (actual_class_name.get ());\n \t    }\n \t  break;\n@@ -18839,7 +18819,7 @@ partial_die_info::fixup (struct dwarf2_cu *cu)\n      children, see if we can determine the namespace from their linkage\n      name.  */\n   if (cu->language == language_cplus\n-      && !cu->per_cu->dwarf2_per_objfile->per_bfd->types.empty ()\n+      && !cu->per_objfile->per_bfd->types.empty ()\n       && die_parent == NULL\n       && has_children\n       && (tag == DW_TAG_class_type\n@@ -18870,7 +18850,7 @@ partial_die_info::fixup (struct dwarf2_cu *cu)\n \t  else\n \t    base = demangled.get ();\n \n-\t  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+\t  struct objfile *objfile = cu->per_objfile->objfile;\n \t  name = objfile->intern (base);\n \t}\n     }\n@@ -18925,8 +18905,7 @@ lookup_loclist_base (struct dwarf2_cu *cu)\n static CORE_ADDR\n read_loclist_index (struct dwarf2_cu *cu, ULONGEST loclist_index)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   bfd *abfd = objfile->obfd;\n   ULONGEST loclist_base = lookup_loclist_base (cu);\n@@ -19008,8 +18987,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n \t\t      bool *need_reprocess)\n {\n   struct dwarf2_cu *cu = reader->cu;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   bfd *abfd = reader->abfd;\n   struct comp_unit_head *cu_header = &cu->header;\n@@ -19364,7 +19342,7 @@ read_addr_index_1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n static CORE_ADDR\n read_addr_index (struct dwarf2_cu *cu, unsigned int addr_index)\n {\n-  return read_addr_index_1 (cu->per_cu->dwarf2_per_objfile, addr_index,\n+  return read_addr_index_1 (cu->per_objfile, addr_index,\n \t\t\t    cu->addr_base, cu->header.addr_size);\n }\n \n@@ -19374,7 +19352,7 @@ static CORE_ADDR\n read_addr_index_from_leb128 (struct dwarf2_cu *cu, const gdb_byte *info_ptr,\n \t\t\t     unsigned int *bytes_read)\n {\n-  bfd *abfd = cu->per_cu->dwarf2_per_objfile->objfile->obfd;\n+  bfd *abfd = cu->per_objfile->objfile->obfd;\n   unsigned int addr_index = read_unsigned_leb128 (abfd, info_ptr, bytes_read);\n \n   return read_addr_index (cu, addr_index);\n@@ -19432,8 +19410,7 @@ read_str_index (struct dwarf2_cu *cu,\n \t\tstruct dwarf2_section_info *str_offsets_section,\n \t\tULONGEST str_offsets_base, ULONGEST str_index)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const char *objf_name = objfile_name (objfile);\n   bfd *abfd = objfile->obfd;\n@@ -19485,7 +19462,7 @@ read_dwo_str_index (const struct die_reader_specs *reader, ULONGEST str_index)\n static const char *\n read_stub_str_index (struct dwarf2_cu *cu, ULONGEST str_index)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   const char *objf_name = objfile_name (objfile);\n   static const char form_name[] = \"DW_FORM_GNU_str_index\";\n   static const char str_offsets_attr_name[] = \"DW_AT_str_offsets\";\n@@ -19497,8 +19474,8 @@ read_stub_str_index (struct dwarf2_cu *cu, ULONGEST str_index)\n \t   (long) cu->header.offset_size, objf_name);\n \n   return read_str_index (cu,\n-\t\t\t &cu->per_cu->dwarf2_per_objfile->per_bfd->str,\n-\t\t\t &cu->per_cu->dwarf2_per_objfile->per_bfd->str_offsets,\n+\t\t\t &cu->per_objfile->per_bfd->str,\n+\t\t\t &cu->per_objfile->per_bfd->str_offsets,\n \t\t\t *cu->str_offsets_base, str_index);\n }\n \n@@ -19624,7 +19601,7 @@ dwarf2_string_attr (struct die_info *die, unsigned int name, struct dwarf2_cu *c\n         complaint (_(\"string type expected for attribute %s for \"\n \t\t     \"DIE at %s in module %s\"),\n \t\t   dwarf_attr_name (name), sect_offset_str (die->sect_off),\n-\t\t   objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t\t   objfile_name (cu->per_objfile->objfile));\n     }\n \n   return str;\n@@ -19704,8 +19681,7 @@ static struct dwarf2_section_info *\n get_debug_line_section (struct dwarf2_cu *cu)\n {\n   struct dwarf2_section_info *section;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n   /* For TUs in DWO files, the DW_AT_stmt_list attribute lives in the\n      DWO file.  */\n@@ -19737,8 +19713,7 @@ static line_header_up\n dwarf_decode_line_header (sect_offset sect_off, struct dwarf2_cu *cu)\n {\n   struct dwarf2_section_info *section;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n   section = get_debug_line_section (cu);\n   section->read (dwarf2_per_objfile->objfile);\n@@ -20215,7 +20190,7 @@ lnp_state_machine::check_line_address (struct dwarf2_cu *cu,\n       /* This line table is for a function which has been\n \t GCd by the linker.  Ignore it.  PR gdb/12528 */\n \n-      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+      struct objfile *objfile = cu->per_objfile->objfile;\n       long line_offset = line_ptr - get_debug_line_section (cu)->buffer;\n \n       complaint (_(\".debug_line address at offset 0x%lx is 0 [in module %s]\"),\n@@ -20240,7 +20215,7 @@ dwarf_decode_lines_1 (struct line_header *lh, struct dwarf2_cu *cu,\n   unsigned int bytes_read, extended_len;\n   unsigned char op_code, extended_op;\n   CORE_ADDR baseaddr;\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   bfd *abfd = objfile->obfd;\n   struct gdbarch *gdbarch = objfile->arch ();\n   /* True if we're recording line info (as opposed to building partial\n@@ -20469,7 +20444,7 @@ dwarf_decode_lines (struct line_header *lh, const char *comp_dir,\n \t\t    struct dwarf2_cu *cu, dwarf2_psymtab *pst,\n \t\t    CORE_ADDR lowpc, int decode_mapping)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   const int decode_for_pst_p = (pst != NULL);\n \n   if (decode_mapping)\n@@ -20584,7 +20559,7 @@ static void\n var_decode_location (struct attribute *attr, struct symbol *sym,\n \t\t     struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   struct comp_unit_head *cu_header = &cu->header;\n \n   /* NOTE drow/2003-01-30: There used to be a comment and some special\n@@ -20663,8 +20638,7 @@ static struct symbol *\n new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t    struct symbol *space)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct symbol *sym = NULL;\n@@ -21075,7 +21049,7 @@ static gdb_byte *\n dwarf2_const_value_data (const struct attribute *attr, struct obstack *obstack,\n \t\t\t struct dwarf2_cu *cu, LONGEST *value, int bits)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   enum bfd_endian byte_order = bfd_big_endian (objfile->obfd) ?\n \t\t\t\tBFD_ENDIAN_BIG : BFD_ENDIAN_LITTLE;\n   LONGEST l = DW_UNSND (attr);\n@@ -21110,7 +21084,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n \t\t\t LONGEST *value, const gdb_byte **bytes,\n \t\t\t struct dwarf2_locexpr_baton **baton)\n {\n-  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_objfile;\n   struct objfile *objfile = per_objfile->objfile;\n   struct comp_unit_head *cu_header = &cu->header;\n   struct dwarf_block *blk;\n@@ -21215,7 +21189,7 @@ static void\n dwarf2_const_value (const struct attribute *attr, struct symbol *sym,\n \t\t    struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   LONGEST value;\n   const gdb_byte *bytes;\n   struct dwarf2_locexpr_baton *baton;\n@@ -21252,7 +21226,7 @@ die_type (struct die_info *die, struct dwarf2_cu *cu)\n   type_attr = dwarf2_attr (die, DW_AT_type, cu);\n   if (!type_attr)\n     {\n-      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+      struct objfile *objfile = cu->per_objfile->objfile;\n       /* A missing DW_AT_type represents a void type.  */\n       return objfile_type (objfile)->builtin_void;\n     }\n@@ -21311,7 +21285,7 @@ static struct type *\n die_containing_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct attribute *type_attr;\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n \n   type_attr = dwarf2_attr (die, DW_AT_containing_type, cu);\n   if (!type_attr)\n@@ -21326,8 +21300,7 @@ die_containing_type (struct die_info *die, struct dwarf2_cu *cu)\n static struct type *\n build_error_marker_type (struct dwarf2_cu *cu, struct die_info *die)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   char *saved;\n \n@@ -21350,8 +21323,7 @@ static struct type *\n lookup_die_type (struct die_info *die, const struct attribute *attr,\n \t\t struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct type *this_type;\n \n@@ -21534,7 +21506,7 @@ guess_full_die_structure_name (struct die_info *die, struct dwarf2_cu *cu)\n   struct die_info *spec_die;\n   struct dwarf2_cu *spec_cu;\n   struct die_info *child;\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n \n   spec_cu = cu;\n   spec_die = die_specification (die, &spec_cu);\n@@ -21617,7 +21589,7 @@ anonymous_struct_prefix (struct die_info *die, struct dwarf2_cu *cu)\n   if (base == NULL || base == DW_STRING (attr) || base[-1] != ':')\n     return \"\";\n \n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   return obstack_strndup (&objfile->per_bfd->storage_obstack,\n \t\t\t  DW_STRING (attr),\n \t\t\t  &base[-1] - DW_STRING (attr));\n@@ -21641,8 +21613,7 @@ anonymous_struct_prefix (struct die_info *die, struct dwarf2_cu *cu)\n static const char *\n determine_prefix (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct die_info *parent, *spec_die;\n   struct dwarf2_cu *spec_cu;\n   struct type *parent_type;\n@@ -21885,7 +21856,7 @@ static const char *\n dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct attribute *attr;\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n \n   attr = dwarf2_attr (die, DW_AT_name, cu);\n   if ((!attr || !DW_STRING (attr))\n@@ -22190,7 +22161,7 @@ follow_die_ref_or_sig (struct die_info *src_die, const struct attribute *attr,\n     {\n       dump_die_for_error (src_die);\n       error (_(\"Dwarf Error: Expected reference attribute [in module %s]\"),\n-\t     objfile_name ((*ref_cu)->per_cu->dwarf2_per_objfile->objfile));\n+\t     objfile_name ((*ref_cu)->per_objfile->objfile));\n     }\n \n   return die;\n@@ -22207,8 +22178,7 @@ follow_die_offset (sect_offset sect_off, int offset_in_dwz,\n {\n   struct die_info temp_die;\n   struct dwarf2_cu *target_cu, *cu = *ref_cu;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n   gdb_assert (cu->per_cu != NULL);\n \n@@ -22274,7 +22244,7 @@ follow_die_ref (struct die_info *src_die, const struct attribute *attr,\n     error (_(\"Dwarf Error: Cannot find DIE at %s referenced from DIE \"\n \t   \"at %s [in module %s]\"),\n \t   sect_offset_str (sect_off), sect_offset_str (src_die->sect_off),\n-\t   objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n+\t   objfile_name (cu->per_objfile->objfile));\n \n   return die;\n }\n@@ -22607,8 +22577,7 @@ follow_die_sig_1 (struct die_info *src_die, struct signatured_type *sig_type,\n \t\t\t\t\t\t to_underlying (temp_die.sect_off));\n   if (die)\n     {\n-      struct dwarf2_per_objfile *dwarf2_per_objfile\n-\t= (*ref_cu)->per_cu->dwarf2_per_objfile;\n+      struct dwarf2_per_objfile *dwarf2_per_objfile = (*ref_cu)->per_objfile;\n \n       /* For .gdb_index version 7 keep track of included TUs.\n \t http://sourceware.org/bugzilla/show_bug.cgi?id=15021.  */\n@@ -22652,7 +22621,7 @@ follow_die_sig (struct die_info *src_die, const struct attribute *attr,\n       error (_(\"Dwarf Error: Cannot find signatured DIE %s referenced\"\n                \" from DIE at %s [in module %s]\"),\n              hex_string (signature), sect_offset_str (src_die->sect_off),\n-\t     objfile_name ((*ref_cu)->per_cu->dwarf2_per_objfile->objfile));\n+\t     objfile_name ((*ref_cu)->per_objfile->objfile));\n     }\n \n   die = follow_die_sig_1 (src_die, sig_type, ref_cu);\n@@ -22662,7 +22631,7 @@ follow_die_sig (struct die_info *src_die, const struct attribute *attr,\n       error (_(\"Dwarf Error: Problem reading signatured DIE %s referenced\"\n \t       \" from DIE at %s [in module %s]\"),\n \t     hex_string (signature), sect_offset_str (src_die->sect_off),\n-\t     objfile_name ((*ref_cu)->per_cu->dwarf2_per_objfile->objfile));\n+\t     objfile_name ((*ref_cu)->per_objfile->objfile));\n     }\n \n   return die;\n@@ -22675,8 +22644,7 @@ static struct type *\n get_signatured_type (struct die_info *die, ULONGEST signature,\n \t\t     struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct signatured_type *sig_type;\n   struct dwarf2_cu *type_cu;\n   struct die_info *type_die;\n@@ -22749,8 +22717,7 @@ get_DW_AT_signature_type (struct die_info *die, const struct attribute *attr,\n     }\n   else\n     {\n-      struct dwarf2_per_objfile *dwarf2_per_objfile\n-\t= cu->per_cu->dwarf2_per_objfile;\n+      struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n       complaint (_(\"Dwarf Error: DW_AT_signature has bad form %s in DIE\"\n \t\t   \" at %s [in module %s]\"),\n@@ -22842,7 +22809,7 @@ read_signatured_type (struct signatured_type *sig_type)\n static CORE_ADDR\n decode_locdesc (struct dwarf_block *blk, struct dwarf2_cu *cu, bool *computed)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = cu->per_objfile->objfile;\n   size_t i;\n   size_t size = blk->size;\n   const gdb_byte *data = blk->data;\n@@ -23145,8 +23112,7 @@ static void\n dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n \t\t     int section_is_gnu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const struct line_header *lh = cu->line_header;\n   unsigned int offset_size = cu->header.offset_size;\n@@ -23199,8 +23165,7 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n static struct dwarf2_section_info *\n cu_debug_loc_section (struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n   if (cu->dwo_unit)\n     {\n@@ -23219,8 +23184,7 @@ fill_in_loclist_baton (struct dwarf2_cu *cu,\n \t\t       struct dwarf2_loclist_baton *baton,\n \t\t       const struct attribute *attr)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct dwarf2_section_info *section = cu_debug_loc_section (cu);\n \n   section->read (dwarf2_per_objfile->objfile);\n@@ -23243,8 +23207,7 @@ static void\n dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n \t\t\t     struct dwarf2_cu *cu, int is_block)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwarf2_section_info *section = cu_debug_loc_section (cu);\n \n@@ -23711,8 +23674,7 @@ per_cu_offset_and_type_eq (const void *item_lhs, const void *item_rhs)\n static struct type *\n set_die_type (struct die_info *die, struct type *type, struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct dwarf2_per_cu_offset_and_type **slot, ofs;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct attribute *attr;"
    }
  ]
}