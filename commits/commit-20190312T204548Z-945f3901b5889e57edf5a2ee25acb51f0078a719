{
  "sha": "945f3901b5889e57edf5a2ee25acb51f0078a719",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTQ1ZjM5MDFiNTg4OWU1N2VkZjVhMmVlMjVhY2I1MWYwMDc4YTcxOQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:39:02Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:45:48Z"
    },
    "message": "Add a helper function to resolve TLS variable addresses for FreeBSD.\n\nThe fbsd_get_thread_local_address function accepts the base address of\na thread's DTV array and the base address of an object file's link map\nand uses this to compute a TLS variable's address.  FreeBSD\narchitectures use an architecture-specific method to determine the\naddress of the DTV array pointer and call this helper function to\nperform the rest of the address calculation.\n\n\t* fbsd-tdep.c (fbsd_pspace_data_handle): New variable.\n\t(struct fbsd_pspace_data): New type.\n\t(get_fbsd_pspace_data, fbsd_pspace_data_cleanup)\n\t(fbsd_read_integer_by_name, fbsd_fetch_rtld_offsets)\n\t(fbsd_get_tls_index, fbsd_get_thread_local_address): New function.\n\t(_initialize_fbsd_tdep): Initialize 'fbsd_pspace_data_handle'.\n\t* fbsd-tdep.c (fbsd_get_thread_local_address): New prototype.",
    "tree": {
      "sha": "6f5f49f7bc52cc23fb577de1a84106b81e68c88b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f5f49f7bc52cc23fb577de1a84106b81e68c88b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/945f3901b5889e57edf5a2ee25acb51f0078a719",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/945f3901b5889e57edf5a2ee25acb51f0078a719",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/945f3901b5889e57edf5a2ee25acb51f0078a719",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/945f3901b5889e57edf5a2ee25acb51f0078a719/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef0bd2046f58fac69577892c2d3b44b20d027476",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef0bd2046f58fac69577892c2d3b44b20d027476",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ef0bd2046f58fac69577892c2d3b44b20d027476"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 174,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ae7203a03da573442c7fd163b3a5e425dbdcd9db",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/945f3901b5889e57edf5a2ee25acb51f0078a719/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/945f3901b5889e57edf5a2ee25acb51f0078a719/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=945f3901b5889e57edf5a2ee25acb51f0078a719",
      "patch": "@@ -1,3 +1,13 @@\n+2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* fbsd-tdep.c (fbsd_pspace_data_handle): New variable.\n+\t(struct fbsd_pspace_data): New type.\n+\t(get_fbsd_pspace_data, fbsd_pspace_data_cleanup)\n+\t(fbsd_read_integer_by_name, fbsd_fetch_rtld_offsets)\n+\t(fbsd_get_tls_index, fbsd_get_thread_local_address): New function.\n+\t(_initialize_fbsd_tdep): Initialize 'fbsd_pspace_data_handle'.\n+\t* fbsd-tdep.c (fbsd_get_thread_local_address): New prototype.\n+\n 2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* gdbtypes.c (lookup_struct_elt): New function."
    },
    {
      "sha": "f06836216d9ed865668834c753579fd6d1961f1e",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 153,
      "deletions": 0,
      "changes": 153,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/945f3901b5889e57edf5a2ee25acb51f0078a719/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/945f3901b5889e57edf5a2ee25acb51f0078a719/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=945f3901b5889e57edf5a2ee25acb51f0078a719",
      "patch": "@@ -24,6 +24,7 @@\n #include \"regcache.h\"\n #include \"regset.h\"\n #include \"gdbthread.h\"\n+#include \"objfiles.h\"\n #include \"xml-syscall.h\"\n #include <sys/socket.h>\n #include <arpa/inet.h>\n@@ -444,6 +445,41 @@ get_fbsd_gdbarch_data (struct gdbarch *gdbarch)\n \t  gdbarch_data (gdbarch, fbsd_gdbarch_data_handle));\n }\n \n+/* Per-program-space data for FreeBSD architectures.  */\n+static const struct program_space_data *fbsd_pspace_data_handle;\n+\n+struct fbsd_pspace_data\n+{\n+  /* Offsets in the runtime linker's 'Obj_Entry' structure.  */\n+  LONGEST off_linkmap;\n+  LONGEST off_tlsindex;\n+  bool rtld_offsets_valid;\n+};\n+\n+static struct fbsd_pspace_data *\n+get_fbsd_pspace_data (struct program_space *pspace)\n+{\n+  struct fbsd_pspace_data *data;\n+\n+  data = ((struct fbsd_pspace_data *)\n+\t  program_space_data (pspace, fbsd_pspace_data_handle));\n+  if (data == NULL)\n+    {\n+      data = XCNEW (struct fbsd_pspace_data);\n+      set_program_space_data (pspace, fbsd_pspace_data_handle, data);\n+    }\n+\n+  return data;\n+}\n+\n+/* The cleanup callback for FreeBSD architecture per-program-space data.  */\n+\n+static void\n+fbsd_pspace_data_cleanup (struct program_space *pspace, void *data)\n+{\n+  xfree (data);\n+}\n+\n /* This is how we want PTIDs from core files to be printed.  */\n \n static const char *\n@@ -1932,6 +1968,121 @@ fbsd_get_syscall_number (struct gdbarch *gdbarch, thread_info *thread)\n   internal_error (__FILE__, __LINE__, _(\"fbsd_get_sycall_number called\"));\n }\n \n+/* Read an integer symbol value from the current target.  */\n+\n+static LONGEST\n+fbsd_read_integer_by_name (struct gdbarch *gdbarch, const char *name)\n+{\n+  bound_minimal_symbol ms = lookup_minimal_symbol (name, NULL, NULL);\n+  if (ms.minsym == NULL)\n+    error (_(\"Unable to resolve symbol '%s'\"), name);\n+\n+  gdb_byte buf[4];\n+  if (target_read_memory (BMSYMBOL_VALUE_ADDRESS (ms), buf, sizeof buf) != 0)\n+    error (_(\"Unable to read value of '%s'\"), name);\n+\n+  return extract_signed_integer (buf, sizeof buf, gdbarch_byte_order (gdbarch));\n+}\n+\n+/* Lookup offsets of fields in the runtime linker's 'Obj_Entry'\n+   structure needed to determine the TLS index of an object file.  */\n+\n+static void\n+fbsd_fetch_rtld_offsets (struct gdbarch *gdbarch, struct fbsd_pspace_data *data)\n+{\n+  TRY\n+    {\n+      /* Fetch offsets from debug symbols in rtld.  */\n+      struct symbol *obj_entry_sym\n+\t= lookup_symbol_in_language (\"Struct_Obj_Entry\", NULL, STRUCT_DOMAIN,\n+\t\t\t\t     language_c, NULL).symbol;\n+      if (obj_entry_sym == NULL)\n+\terror (_(\"Unable to find Struct_Obj_Entry symbol\"));\n+      data->off_linkmap = lookup_struct_elt (SYMBOL_TYPE(obj_entry_sym),\n+\t\t\t\t\t     \"linkmap\", 0).offset / 8;\n+      data->off_tlsindex = lookup_struct_elt (SYMBOL_TYPE(obj_entry_sym),\n+\t\t\t\t\t      \"tlsindex\", 0).offset / 8;\n+      data->rtld_offsets_valid = true;\n+      return;\n+    }\n+  CATCH (e, RETURN_MASK_ERROR)\n+    {\n+      data->off_linkmap = -1;\n+    }\n+  END_CATCH\n+\n+  TRY\n+    {\n+      /* Fetch offsets from global variables in libthr.  Note that\n+\t this does not work for single-threaded processes that are not\n+\t linked against libthr.  */\n+      data->off_linkmap = fbsd_read_integer_by_name (gdbarch,\n+\t\t\t\t\t\t     \"_thread_off_linkmap\");\n+      data->off_tlsindex = fbsd_read_integer_by_name (gdbarch,\n+\t\t\t\t\t\t      \"_thread_off_tlsindex\");\n+      data->rtld_offsets_valid = true;\n+      return;\n+    }\n+  CATCH (e, RETURN_MASK_ERROR)\n+    {\n+      data->off_linkmap = -1;\n+    }\n+  END_CATCH\n+}\n+\n+/* Helper function to read the TLS index of an object file associated\n+   with a link map entry at LM_ADDR.  */\n+\n+static LONGEST\n+fbsd_get_tls_index (struct gdbarch *gdbarch, CORE_ADDR lm_addr)\n+{\n+  struct fbsd_pspace_data *data = get_fbsd_pspace_data (current_program_space);\n+\n+  if (!data->rtld_offsets_valid)\n+    fbsd_fetch_rtld_offsets (gdbarch, data);\n+\n+  if (data->off_linkmap == -1)\n+    throw_error (TLS_GENERIC_ERROR,\n+\t\t _(\"Cannot fetch runtime linker structure offsets\"));\n+\n+  /* Simulate container_of to convert from LM_ADDR to the Obj_Entry\n+     pointer and then compute the offset of the tlsindex member.  */\n+  CORE_ADDR tlsindex_addr = lm_addr - data->off_linkmap + data->off_tlsindex;\n+\n+  gdb_byte buf[4];\n+  if (target_read_memory (tlsindex_addr, buf, sizeof buf) != 0)\n+    throw_error (TLS_GENERIC_ERROR,\n+\t\t _(\"Cannot find thread-local variables on this target\"));\n+\n+  return extract_signed_integer (buf, sizeof buf, gdbarch_byte_order (gdbarch));\n+}\n+\n+/* See fbsd-tdep.h.  */\n+\n+CORE_ADDR\n+fbsd_get_thread_local_address (struct gdbarch *gdbarch, CORE_ADDR dtv_addr,\n+\t\t\t       CORE_ADDR lm_addr, CORE_ADDR offset)\n+{\n+  LONGEST tls_index = fbsd_get_tls_index (gdbarch, lm_addr);\n+\n+  gdb_byte buf[gdbarch_ptr_bit (gdbarch) / TARGET_CHAR_BIT];\n+  if (target_read_memory (dtv_addr, buf, sizeof buf) != 0)\n+    throw_error (TLS_GENERIC_ERROR,\n+\t\t _(\"Cannot find thread-local variables on this target\"));\n+\n+  const struct builtin_type *builtin = builtin_type (gdbarch);\n+  CORE_ADDR addr = gdbarch_pointer_to_address (gdbarch,\n+\t\t\t\t\t       builtin->builtin_data_ptr, buf);\n+\n+  addr += (tls_index + 1) * TYPE_LENGTH (builtin->builtin_data_ptr);\n+  if (target_read_memory (addr, buf, sizeof buf) != 0)\n+    throw_error (TLS_GENERIC_ERROR,\n+\t\t _(\"Cannot find thread-local variables on this target\"));\n+\n+  addr = gdbarch_pointer_to_address (gdbarch, builtin->builtin_data_ptr, buf);\n+  return addr + offset;\n+}\n+\n /* To be called from GDB_OSABI_FREEBSD handlers. */\n \n void\n@@ -1957,4 +2108,6 @@ _initialize_fbsd_tdep (void)\n {\n   fbsd_gdbarch_data_handle =\n     gdbarch_data_register_post_init (init_fbsd_gdbarch_data);\n+  fbsd_pspace_data_handle\n+    = register_program_space_data_with_cleanup (NULL, fbsd_pspace_data_cleanup);\n }"
    },
    {
      "sha": "0e29508c9fa71794cd6635b3ecede732bf870ad4",
      "filename": "gdb/fbsd-tdep.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/945f3901b5889e57edf5a2ee25acb51f0078a719/gdb/fbsd-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/945f3901b5889e57edf5a2ee25acb51f0078a719/gdb/fbsd-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.h?ref=945f3901b5889e57edf5a2ee25acb51f0078a719",
      "patch": "@@ -60,4 +60,15 @@ extern void fbsd_info_proc_mappings_entry (int addr_bit, ULONGEST kve_start,\n \t\t\t\t\t   int kve_flags, int kve_protection,\n \t\t\t\t\t   const void *kve_path);\n \n+/* Helper function to fetch the address of a thread-local variable.\n+   DTV_ADDR is the base address of the thread's dtv array.  LM_ADDR is\n+   the address of the link_map structure for the associated object\n+   file.  OFFSET is the offset of the variable in the object file's\n+   thread-local variable block.  */\n+\n+extern CORE_ADDR fbsd_get_thread_local_address (struct gdbarch *gdbarch,\n+\t\t\t\t\t\tCORE_ADDR dtv_addr,\n+\t\t\t\t\t\tCORE_ADDR lm_addr,\n+\t\t\t\t\t\tCORE_ADDR offset);\n+\n #endif /* fbsd-tdep.h */"
    }
  ]
}