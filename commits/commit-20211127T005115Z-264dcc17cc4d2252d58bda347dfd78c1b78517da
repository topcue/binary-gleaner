{
  "sha": "264dcc17cc4d2252d58bda347dfd78c1b78517da",
  "node_id": "C_kwDOANOeidoAKDI2NGRjYzE3Y2M0ZDIyNTJkNThiZGEzNDdkZmQ3OGMxYjc4NTE3ZGE",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-11T05:36:52Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-27T00:51:15Z"
    },
    "message": "sim: testsuite: unify basic C compiler checks\n\nBoth bfin & cris ports test the C compiler to see if it works, but in\ntheir own way.  Unify the checks in the common code so we can leverage\nthem in more ports in the future, and collapse the bfin & cris code.",
    "tree": {
      "sha": "31da57f3638243a7ff8c24c940dcd21e5842d6db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31da57f3638243a7ff8c24c940dcd21e5842d6db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/264dcc17cc4d2252d58bda347dfd78c1b78517da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/264dcc17cc4d2252d58bda347dfd78c1b78517da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/264dcc17cc4d2252d58bda347dfd78c1b78517da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/264dcc17cc4d2252d58bda347dfd78c1b78517da/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c0d6a6e5828882040bbb55bafea6b188a18fc000",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0d6a6e5828882040bbb55bafea6b188a18fc000",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c0d6a6e5828882040bbb55bafea6b188a18fc000"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 53,
    "deletions": 40
  },
  "files": [
    {
      "sha": "a9dc08457b2689c38137c80cf6cfa0ad05e72edd",
      "filename": "sim/testsuite/bfin/allinsn.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 30,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/bfin/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/bfin/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/bfin/allinsn.exp?ref=264dcc17cc4d2252d58bda347dfd78c1b78517da",
      "patch": "@@ -1,42 +1,16 @@\n # Analog Devices Blackfin simulator testsuite\n \n+# Set a default CPU to satisfy bfin-elf-gcc requirements.  BF537 should work\n+# with all standard Blackfin toolchains.\n+set CC_FOR_TARGET \"[find_gcc] -mcpu=bf537\"\n sim_init\n+unset CC_FOR_TARGET\n \n if [istarget bfin-*-elf] {\n     # all machines\n     set all_machs \"bfin\"\n \n-    global objdir\n-\n-    # See if we have a preprocessor available.\n-    if { [target_compile $srcdir/$subdir/usp.S $objdir/compilercheck.x \"preprocess\" \\\n-\t  [list \"incdir=$srcdir/$subdir\"]] == \"\" } {\n-\tset has_cpp 1\n-    } {\n-\tverbose -log \"Can't execute preprocessor\"\n-\tset has_cpp 0\n-    }\n-\n-    # See if we have a compiler available.\n-    if { [target_compile $srcdir/$subdir/argc.c $objdir/compilercheck.x \"executable\" \\\n-\t  [list \"incdir=$srcdir/$subdir\" \"additional_flags=-msim\"]] == \"\" } {\n-\tset has_cc 1\n-    } {\n-\tverbose -log \"Can't execute C compiler\"\n-\tset has_cc 0\n-    }\n-\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.\\[csS\\]]] {\n-\t# If we don't have a compiler available, skip tests :(.\n-\tif { $has_cpp == 0 && [string match \"*.S\" $src] } {\n-\t    untested $src\n-\t    continue\n-\t}\n-\tif { $has_cc == 0 && [string match \"*.c\" $src] } {\n-\t    untested $src\n-\t    continue\n-\t}\n-\n \t# If we're only testing specific files and this isn't one of them,\n \t# skip it.\n \tif ![runtest_file_p $runtests $src] {"
    },
    {
      "sha": "dfafa003bf5b4825995b1add2c5956425982f9c9",
      "filename": "sim/testsuite/cris/c/c.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 10,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/cris/c/c.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/cris/c/c.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/c.exp?ref=264dcc17cc4d2252d58bda347dfd78c1b78517da",
      "patch": "@@ -33,30 +33,26 @@ if [istarget cris*-*-elf] {\n }\n \n # Using target_compile, since it is less noisy,\n-global objdir\n-if { [target_compile $srcdir/$subdir/hello.c $objdir/compilercheck.x \\\n-\t  \"executable\" \"\" ] == \"\" } {\n-    set has_cc 1\n-\n+global global_cc_works\n+if { $global_cc_works == 1 } {\n     # Now check if we can link a program dynamically, and where\n     # libc.so is located.  If it is, we provide a sym link to the\n     # directory (which must end in /lib) in [pwd], so /lib/ld.so.1 is\n     # found (which must reside along libc.so).  We don't bother\n     # replacing the board ldflags like below as we don't care about\n     # detrimental effects on the executable from the specs and\n     # -static in the board ldflags, we just add -Bdynamic.\n+    global objdir\n     if [regexp \"(.*/lib)/libc.so\" \\\n-\t    [target_compile $srcdir/$subdir/hello.c $objdir/compilercheck.x \\\n+\t    [target_compile $srcdir/lib/compilercheck.c $objdir/compilercheck.x \\\n \t\t \"executable\" \\\n \t\t \"ldflags=-print-file-name=libc.so -Wl,-Bdynamic\"] \\\n \t    xxx libcsodir]  {\n \tfile delete lib \n \tverbose -log \"Creating link to $libcsodir in [pwd]\"\n \tfile link lib $libcsodir\n     }\n-} {\n-    verbose -log \"Can't execute C compiler\"\n-    set has_cc 0\n+    file delete $objdir/compilercheck.x\n }\n \n # Like istarget, except take a list of targets as a string.\n@@ -92,7 +88,7 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     }\n \n     # Note absence of CC in results, but don't make a big fuss over it.\n-    if { $has_cc == 0 } {\n+    if { $global_cc_works == 0 } {\n \tuntested $testname\n \tcontinue\n     }"
    },
    {
      "sha": "63a95770547983261c01b3b4a503d1646af6f293",
      "filename": "sim/testsuite/lib/compilercheck.c",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/lib/compilercheck.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/lib/compilercheck.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/compilercheck.c?ref=264dcc17cc4d2252d58bda347dfd78c1b78517da",
      "patch": "@@ -0,0 +1,5 @@\n+/* Used by the test harness to verify working compiler & preprocessor.  */\n+int main()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "f399d2f3da1db1e8392bf452286a25f751a980ac",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/264dcc17cc4d2252d58bda347dfd78c1b78517da/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=264dcc17cc4d2252d58bda347dfd78c1b78517da",
      "patch": "@@ -33,11 +33,35 @@ proc sim_init { args } {\n     # all simulators.\n     unset_currtarget_info ldscript\n \n+    sim_init_toolchain\n+\n     # Need to return an empty string.  This tells dejagnu to *not* re-run us\n     # with the exact test that we're about to run.\n     return \"\"\n }\n \n+# Initialize the toolchain settings for this port.\n+# Needs to be called once per-port.\n+\n+proc sim_init_toolchain {} {\n+    global objdir\n+    global srcdir\n+    global global_cpp_works\n+    global global_cc_works\n+\n+    # See if we have a preprocessor available.\n+    set result [target_compile $srcdir/lib/compilercheck.c \\\n+\t\t$objdir/compilercheck.x \"preprocess\" \"\"]\n+    set global_cpp_works [string equal \"\" \"$result\"]\n+\n+    # See if we have a compiler available.\n+    set result [target_compile $srcdir/lib/compilercheck.c \\\n+\t\t$objdir/compilercheck.x \"executable\" \"\"]\n+    set global_cc_works [string equal \"\" \"$result\"]\n+\n+    file delete $objdir/compilercheck.x\n+}\n+\n # Print the version of the simulator being tested.\n # Required by dejagnu.\n \n@@ -185,6 +209,8 @@ proc run_sim_test { name requested_machs } {\n     global cpu_option\n     global cpu_option_sep\n     global SIMFLAGS_FOR_TARGET\n+    global global_cpp_works\n+    global global_cc_works\n \n     if ![file exists $sim_path] {\n \tunsupported \"$name: missing simulator $sim_path\"\n@@ -327,11 +353,23 @@ proc run_sim_test { name requested_machs } {\n \t}\n \n \tif [string match \"*.c\" $sourcefile] {\n+\t    # If we don't have a compiler available, skip tests :(.\n+\t    if { $global_cc_works == 0 } {\n+\t\tuntested $subdir/$name\n+\t\treturn\n+\t    }\n+\n \t    set comp_output [target_compile $sourcefile $objdir/${name}.x \"executable\" \\\n \t\t[list \"incdir=$srcdir/$subdir\" \"additional_flags=$c_as_options $c_ld_options $opts(cc,$mach)\"]]\n \t    set method \"compiling/linking\"\n \t} else {\n \t    if [string match \"*.S\" $sourcefile] {\n+\t\t# If we don't have a preprocessor available, skip tests :(.\n+\t\tif { $global_cpp_works == 0 } {\n+\t\t    untested $subdir/$name\n+\t\t    return\n+\t\t}\n+\n \t\tset comp_output [target_compile $sourcefile $objdir/${name}.o \"object\" \\\n \t\t    [list \"incdir=$srcdir/$subdir\" \"additional_flags=$c_as_options\"]]\n \t\tset method \"compiling\""
    }
  ]
}