{
  "sha": "36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzZkMzc4Y2Y4NmM3YjRlZDI2ZjJhNDVjYzFhNGVhMWEzODAyYjRlMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:07Z"
    },
    "message": "Remove DW_ADDR\n\nThis removes DW_ADDR in favor of accessor methods.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_attribute_reprocess, read_attribute_value)\n\t(dwarf2_const_value_attr, dump_die_shallow)\n\t(dwarf2_fetch_constant_bytes): Update.\n\t* dwarf2/attribute.h (struct attribute) <form_is_ref>: Update\n\tcomment.\n\t<set_address>: New method.\n\t(DW_ADDR): Remove.\n\t* dwarf2/attribute.c (attribute::form_is_ref): Update comment.\n\t(attribute::as_string, attribute::as_address): Add assert.",
    "tree": {
      "sha": "1af0d2c0107441ec8c042ee406257ee13c79a902",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1af0d2c0107441ec8c042ee406257ee13c79a902"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe56917a86c37fbf4399583f4fa041227594d187",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe56917a86c37fbf4399583f4fa041227594d187",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe56917a86c37fbf4399583f4fa041227594d187"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 37,
    "deletions": 9
  },
  "files": [
    {
      "sha": "328c7a69bc6a1e97bca31e54084920e9bd55fc33",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
      "patch": "@@ -1,3 +1,15 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_attribute_reprocess, read_attribute_value)\n+\t(dwarf2_const_value_attr, dump_die_shallow)\n+\t(dwarf2_fetch_constant_bytes): Update.\n+\t* dwarf2/attribute.h (struct attribute) <form_is_ref>: Update\n+\tcomment.\n+\t<set_address>: New method.\n+\t(DW_ADDR): Remove.\n+\t* dwarf2/attribute.c (attribute::form_is_ref): Update comment.\n+\t(attribute::as_string, attribute::as_address): Add assert.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_cutu_die_from_dwo): Use OBSTACK_ZALLOC."
    },
    {
      "sha": "7783c468a261d1fc20c6d28e73c394494f91a37d",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
      "patch": "@@ -36,6 +36,8 @@ attribute::as_address () const\n {\n   CORE_ADDR addr;\n \n+  gdb_assert (!requires_reprocessing);\n+\n   if (form != DW_FORM_addr && form != DW_FORM_addrx\n       && form != DW_FORM_GNU_addr_index)\n     {\n@@ -80,6 +82,7 @@ attribute::form_is_string () const\n const char *\n attribute::as_string () const\n {\n+  gdb_assert (!requires_reprocessing);\n   if (form_is_string ())\n     return u.str;\n   return nullptr;"
    },
    {
      "sha": "356e71e3c2cda705d8f8d5a6062e7c05aebf06f4",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
      "patch": "@@ -111,8 +111,9 @@ struct attribute\n \n   bool form_is_constant () const;\n \n-  /* DW_ADDR is always stored already as sect_offset; despite for the forms\n-     besides DW_FORM_ref_addr it is stored as cu_offset in the DWARF file.  */\n+  /* The address is always stored already as sect_offset; despite for\n+     the forms besides DW_FORM_ref_addr it is stored as cu_offset in\n+     the DWARF file.  */\n \n   bool form_is_ref () const\n   {\n@@ -223,6 +224,17 @@ struct attribute\n     requires_reprocessing = 1;\n   }\n \n+  /* Set this attribute to an address.  */\n+  void set_address (CORE_ADDR addr)\n+  {\n+    gdb_assert (form == DW_FORM_addr\n+\t\t|| ((form == DW_FORM_addrx\n+\t\t     || form == DW_FORM_GNU_addr_index)\n+\t\t    && requires_reprocessing));\n+    u.addr = addr;\n+    requires_reprocessing = 0;\n+  }\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 15;\n \n@@ -265,6 +277,5 @@ struct attribute\n /* Get at parts of an attribute structure.  */\n \n #define DW_UNSND(attr)     ((attr)->u.unsnd)\n-#define DW_ADDR(attr)\t   ((attr)->u.addr)\n \n #endif /* GDB_DWARF2_ATTRIBUTE_H */"
    },
    {
      "sha": "a6d29364abf9d68e0f24a009d5e1c0094d0a6038",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=36d378cf86c7b4ed26f2a45cc1a4ea1a3802b4e1",
      "patch": "@@ -19640,7 +19640,8 @@ read_attribute_reprocess (const struct die_reader_specs *reader,\n     {\n       case DW_FORM_addrx:\n       case DW_FORM_GNU_addr_index:\n-        DW_ADDR (attr) = read_addr_index (cu, attr->as_unsigned_reprocess ());\n+\tattr->set_address (read_addr_index (cu,\n+\t\t\t\t\t    attr->as_unsigned_reprocess ()));\n         break;\n       case DW_FORM_loclistx:\n \t DW_UNSND (attr) = read_loclist_index (cu, DW_UNSND (attr));\n@@ -19707,8 +19708,9 @@ read_attribute_value (const struct die_reader_specs *reader,\n     case DW_FORM_addr:\n       {\n \tstruct gdbarch *gdbarch = objfile->arch ();\n-\tDW_ADDR (attr) = cu->header.read_address (abfd, info_ptr, &bytes_read);\n-\tDW_ADDR (attr) = gdbarch_adjust_dwarf2_addr (gdbarch, DW_ADDR (attr));\n+\tCORE_ADDR addr = cu->header.read_address (abfd, info_ptr, &bytes_read);\n+\taddr = gdbarch_adjust_dwarf2_addr (gdbarch, addr);\n+\tattr->set_address (addr);\n \tinfo_ptr += bytes_read;\n       }\n       break;\n@@ -21871,7 +21873,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n \n \tdata[0] = DW_OP_addr;\n \tstore_unsigned_integer (&data[1], cu_header->addr_size,\n-\t\t\t\tbyte_order, DW_ADDR (attr));\n+\t\t\t\tbyte_order, attr->as_address ());\n \tdata[cu_header->addr_size + 1] = DW_OP_stack_value;\n       }\n       break;\n@@ -22741,7 +22743,7 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \tcase DW_FORM_addrx:\n \tcase DW_FORM_GNU_addr_index:\n \t  fprintf_unfiltered (f, \"address: \");\n-\t  fputs_filtered (hex_string (DW_ADDR (&die->attrs[i])), f);\n+\t  fputs_filtered (hex_string (die->attrs[i].as_address ()), f);\n \t  break;\n \tcase DW_FORM_block2:\n \tcase DW_FORM_block4:\n@@ -23185,7 +23187,7 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n \n \t*len = cu->header.addr_size;\n \ttem = (gdb_byte *) obstack_alloc (obstack, *len);\n-\tstore_unsigned_integer (tem, *len, byte_order, DW_ADDR (attr));\n+\tstore_unsigned_integer (tem, *len, byte_order, attr->as_address ());\n \tresult = tem;\n       }\n       break;"
    }
  ]
}