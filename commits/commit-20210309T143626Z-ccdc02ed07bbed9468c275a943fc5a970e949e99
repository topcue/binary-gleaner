{
  "sha": "ccdc02ed07bbed9468c275a943fc5a970e949e99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2NkYzAyZWQwN2JiZWQ5NDY4YzI3NWE5NDNmYzVhOTcwZTk0OWU5OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-09T14:36:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-09T14:36:26Z"
    },
    "message": "Fix function call regression in new evaluator\n\nThe internal AdaCore test suite revealed a bug in the new evaluator.\nA hunk of evaluate_funcall was not correctly transcribed.  This was\nnot caught in my original testing because the feature in question was\napparently not tested in gdb.\n\nThis patch fixes the oversight.  The idea here is that ordinary\nfunction calls should use the function's formal parameter types as the\nexpected types of subexpressions.\n\nRegression tested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-03-09  Tom Tromey  <tromey@adacore.com>\n\n\t* eval.c (operation::evaluate_funcall): Use function formal\n\tparameter types when evaluating.\n\ngdb/testsuite/ChangeLog\n2021-03-09  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.base/cast-call.exp: New file.\n\t* gdb.base/cast-call.c: New file.",
    "tree": {
      "sha": "da564e8abf704100761bc9f9bb28145dd51df327",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/da564e8abf704100761bc9f9bb28145dd51df327"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ccdc02ed07bbed9468c275a943fc5a970e949e99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccdc02ed07bbed9468c275a943fc5a970e949e99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ccdc02ed07bbed9468c275a943fc5a970e949e99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccdc02ed07bbed9468c275a943fc5a970e949e99/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5dc75cf3254c1b3c5b62125f47b543407836a4b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5dc75cf3254c1b3c5b62125f47b543407836a4b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5dc75cf3254c1b3c5b62125f47b543407836a4b6"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 94,
    "deletions": 1
  },
  "files": [
    {
      "sha": "97fcd5e579e0df85ffe7f026f9bd518ffca12298",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ccdc02ed07bbed9468c275a943fc5a970e949e99",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* eval.c (operation::evaluate_funcall): Use function formal\n+\tparameter types when evaluating.\n+\n 2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb-gdb.py.in (StructMainTypePrettyPrinter) <owner_to_string>:"
    },
    {
      "sha": "530ff152134a282d24101962d4fd2923ba843ff1",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=ccdc02ed07bbed9468c275a943fc5a970e949e99",
      "patch": "@@ -687,8 +687,16 @@ operation::evaluate_funcall (struct type *expect_type,\n   std::vector<value *> vals (args.size ());\n \n   value *callee = evaluate_with_coercion (exp, noside);\n+  struct type *type = value_type (callee);\n+  if (type->code () == TYPE_CODE_PTR)\n+    type = TYPE_TARGET_TYPE (type);\n   for (int i = 0; i < args.size (); ++i)\n-    vals[i] = args[i]->evaluate_with_coercion (exp, noside);\n+    {\n+      if (i < type->num_fields ())\n+\tvals[i] = args[i]->evaluate (type->field (i).type (), exp, noside);\n+      else\n+\tvals[i] = args[i]->evaluate_with_coercion (exp, noside);\n+    }\n \n   return evaluate_subexp_do_call (exp, noside, callee, vals,\n \t\t\t\t  function_name, expect_type);"
    },
    {
      "sha": "4ea506cc9dfb5ce8fb5f7c2f74595631777bf7cc",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=ccdc02ed07bbed9468c275a943fc5a970e949e99",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.base/cast-call.exp: New file.\n+\t* gdb.base/cast-call.c: New file.\n+\n 2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.gdb/python-helper.exp: New file."
    },
    {
      "sha": "bceae1b6ab76a0e968dc193c434d9368d2fa8d0c",
      "filename": "gdb/testsuite/gdb.base/cast-call.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/testsuite/gdb.base/cast-call.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/testsuite/gdb.base/cast-call.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/cast-call.c?ref=ccdc02ed07bbed9468c275a943fc5a970e949e99",
      "patch": "@@ -0,0 +1,37 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+struct thestruct\n+{\n+  int x;\n+};\n+\n+int\n+f (struct thestruct value)\n+{\n+  return value.x;\n+}\n+\n+int\n+main ()\n+{\n+  struct thestruct y;\n+  y.x = 0;\n+\n+  int result = f (y);\t\t/* STOP */\n+  return 0;\n+}"
    },
    {
      "sha": "96f84f107fccc94821aba1cf9183014782069e7a",
      "filename": "gdb/testsuite/gdb.base/cast-call.exp",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/testsuite/gdb.base/cast-call.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccdc02ed07bbed9468c275a943fc5a970e949e99/gdb/testsuite/gdb.base/cast-call.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/cast-call.exp?ref=ccdc02ed07bbed9468c275a943fc5a970e949e99",
      "patch": "@@ -0,0 +1,38 @@\n+# This testcase is part of GDB, the GNU debugger.\n+\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+\n+if {[target_info exists gdb,cannot_call_functions]} {\n+    unsupported \"this target can not call functions\"\n+    continue\n+}\n+\n+standard_testfile .c\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} $srcfile] } {\n+    return -1\n+}\n+\n+if {![runto_main]} {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"STOP\"]\n+gdb_continue_to_breakpoint \"STOP\"\n+\n+gdb_test \"print f({73})\" \" = 73\" \"call f with braced argument\""
    }
  ]
}