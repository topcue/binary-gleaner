{
  "sha": "91f2597bd24d171c1337a4629f8237aa47c59082",
  "node_id": "C_kwDOANOeidoAKDkxZjI1OTdiZDI0ZDE3MWMxMzM3YTQ2MjlmODIzN2FhNDdjNTkwODI",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-08-12T17:24:59Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-28T11:21:22Z"
    },
    "message": "gdb: print backtrace for internal error/warning\n\nThis commit builds on previous work to allow GDB to print a backtrace\nof itself when GDB encounters an internal-error or internal-warning.\nThis fixes PR gdb/26377.\n\nThere's not many places where we call internal_warning, and I guess in\nmost cases the user would probably continue their debug session.  And\nso, in order to avoid cluttering up the output, by default, printing\nof a backtrace is off for internal-warnings.\n\nIn contrast, printing of a backtrace is on by default for\ninternal-errors, as I figure that in most cases hitting an\ninternal-error is going to be the end of the debug session.\n\nWhether a backtrace is printed or not can be controlled with the new\nsettings:\n\n  maintenance set internal-error backtrace on|off\n  maintenance show internal-error backtrace\n\n  maintenance set internal-warning backtrace on|off\n  maintenance show internal-warning backtrace\n\nHere is an example of what an internal-error now looks like with the\nbacktrace included:\n\n  (gdb) maintenance internal-error blah\n  ../../src.dev-3/gdb/maint.c:82: internal-error: blah\n  A problem internal to GDB has been detected,\n  further debugging may prove unreliable.\n  ----- Backtrace -----\n  0x5c61ca gdb_internal_backtrace_1\n  \t../../src.dev-3/gdb/bt-utils.c:123\n  0x5c626d _Z22gdb_internal_backtracev\n  \t../../src.dev-3/gdb/bt-utils.c:165\n  0xe33237 internal_vproblem\n  \t../../src.dev-3/gdb/utils.c:393\n  0xe33539 _Z15internal_verrorPKciS0_P13__va_list_tag\n  \t../../src.dev-3/gdb/utils.c:470\n  0x1549652 _Z14internal_errorPKciS0_z\n  \t../../src.dev-3/gdbsupport/errors.cc:55\n  0x9c7982 maintenance_internal_error\n  \t../../src.dev-3/gdb/maint.c:82\n  0x636f57 do_simple_func\n  \t../../src.dev-3/gdb/cli/cli-decode.c:97\n   .... snip, lots more backtrace lines ....\n  ---------------------\n  ../../src.dev-3/gdb/maint.c:82: internal-error: blah\n  A problem internal to GDB has been detected,\n  further debugging may prove unreliable.\n  Quit this debugging session? (y or n) y\n\n  This is a bug, please report it.  For instructions, see:\n  <https://www.gnu.org/software/gdb/bugs/>.\n\n  ../../src.dev-3/gdb/maint.c:82: internal-error: blah\n  A problem internal to GDB has been detected,\n  further debugging may prove unreliable.\n  Create a core file of GDB? (y or n) n\n\nMy hope is that this backtrace might make it slightly easier to\ndiagnose GDB issues if all that is provided is the console output, I\nfind that we frequently get reports of an assert being hit that is\nlocated in pretty generic code (frame.c, value.c, etc) and it is not\nalways obvious how we might have arrived at the assert.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=26377",
    "tree": {
      "sha": "930307c3ee14c5578dc90785324c6a653e1109a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/930307c3ee14c5578dc90785324c6a653e1109a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/91f2597bd24d171c1337a4629f8237aa47c59082",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91f2597bd24d171c1337a4629f8237aa47c59082",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/91f2597bd24d171c1337a4629f8237aa47c59082",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91f2597bd24d171c1337a4629f8237aa47c59082/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abbbd4a3e0ca51132e7fb31a43f896d29894dae0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/abbbd4a3e0ca51132e7fb31a43f896d29894dae0"
    }
  ],
  "stats": {
    "total": 211,
    "additions": 174,
    "deletions": 37
  },
  "files": [
    {
      "sha": "1e25cb8cc3694384eb191e02f4fb695ad6eb4536",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=91f2597bd24d171c1337a4629f8237aa47c59082",
      "patch": "@@ -19,6 +19,14 @@ show source open\n   to open and read source code files, which can be useful if the files\n   are located over a slow network connection.\n \n+maint set internal-error backtrace on|off\n+maint show internal-error backtrace\n+maint set internal-warning backtrace on|off\n+maint show internal-warning backtrace\n+  GDB can now print a backtrace of itself when it encounters either an\n+  internal-error, or an internal-warning.  This is on by default for\n+  internal-error and off by default for internal-warning.\n+\n * Python API\n \n   ** New function gdb.add_history(), which takes a gdb.Value object"
    },
    {
      "sha": "d4e4174be5d863bfcab342c279c162acfe35c996",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=91f2597bd24d171c1337a4629f8237aa47c59082",
      "patch": "@@ -39257,6 +39257,19 @@ demangler warnings always create a core file and this cannot be\n disabled.\n @end table\n \n+@kindex maint set internal-error\n+@kindex maint show internal-error\n+@kindex maint set internal-warning\n+@kindex maint show internal-warning\n+@item maint set internal-error backtrace @r{[}on|off@r{]}\n+@itemx maint show internal-error backtrace\n+@itemx maint set internal-warning backtrace @r{[}on|off@r{]}\n+@itemx maint show internal-warning backtrace\n+When @value{GDBN} reports an internal problem (error or warning) it is\n+possible to have a backtrace of @value{GDBN} printed to stderr.  This\n+is @samp{on} by default for @code{internal-error} and @samp{off} by\n+default for @code{internal-warning}.\n+\n @kindex maint packet\n @item maint packet @var{text}\n If @value{GDBN} is talking to an inferior via the serial protocol,"
    },
    {
      "sha": "d988cf742b4cbd9c8f8791e66349ae5213edd44d",
      "filename": "gdb/testsuite/gdb.base/bt-on-error-and-warning.exp",
      "status": "added",
      "additions": 118,
      "deletions": 0,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/testsuite/gdb.base/bt-on-error-and-warning.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/testsuite/gdb.base/bt-on-error-and-warning.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/bt-on-error-and-warning.exp?ref=91f2597bd24d171c1337a4629f8237aa47c59082",
      "patch": "@@ -0,0 +1,118 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that GDB can print a backtrace when it encounters an internal\n+# error or an internal warning, and that this functionality can be\n+# switched off.\n+\n+standard_testfile bt-on-fatal-signal.c\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile]} {\n+    return -1\n+}\n+\n+# Check we can run to main.  If this works this time then we just\n+# assume that it will work later on (when we repeatedly restart GDB).\n+if ![runto_main] then {\n+    untested \"run to main\"\n+    return -1\n+}\n+\n+# Check that the backtrace-on-fatal-signal feature is supported.  If\n+# this target doesn't have the backtrace function available then\n+# trying to turn this on will give an error, in which case we just\n+# skip this test.\n+gdb_test_multiple \"maint set internal-error backtrace on\" \\\n+    \"check backtrace is supported\" {\n+    -re \"support for this feature is not compiled into GDB\" {\n+\tuntested \"feature not supported\"\n+\treturn -1\n+    }\n+    -re \"$gdb_prompt $\" {\n+\tpass $gdb_test_name\n+    }\n+}\n+\n+# MODE should be either 'on' or 'off', while PROBLEM_TYPE should be\n+# 'internal-error' or 'internal-warning'.  This proc sets the\n+# backtrace printing for PROBLEM_TYPE to MODE, then uses 'maint\n+# PROBLEM_TYPE foobar' to raise a fake error or warning.\n+#\n+# We then check that a backtrace either is, or isn't printed, inline\n+# with MODE.\n+proc run_test {problem_type mode} {\n+\n+    with_test_prefix \"problem=${problem_type}, mode=${mode}\" {\n+\tgdb_test_no_output \"maint set ${problem_type} backtrace ${mode}\"\n+\n+\tset header_lines 0\n+\tset bt_lines 0\n+\n+\tgdb_test_multiple \"maint ${problem_type} foobar\" \"scan for backtrace\" {\n+\t    -early -re \"^\\r\\n\" {\n+\t\texp_continue\n+\t    }\n+\t    -early -re \"^maint ${problem_type} foobar\\r\\n\" {\n+\t\texp_continue\n+\t    }\n+\t    -early -re \"^\\[^\\r\\n\\]+: ${problem_type}: foobar\\r\\n\" {\n+\t\tincr header_lines\n+\t\texp_continue\n+\t    }\n+\t    -early -re \"^A problem internal to GDB has been detected,\\r\\n\" {\n+\t\tincr header_lines\n+\t\texp_continue\n+\t    }\n+\t    -early -re \"^further debugging may prove unreliable\\\\.\\r\\n\" {\n+\t\tincr header_lines\n+\t\texp_continue\n+\t    }\n+\t    -early -re \"^----- Backtrace -----\\r\\n\" {\n+\t\tincr bt_lines\n+\t\texp_continue\n+\t    }\n+\t    -early -re \"^\\[^-\\].+\\r\\n---------------------\\r\\n\" {\n+\t\tincr bt_lines\n+\t\texp_continue\n+\t    }\n+\t    eof {\n+\t\tfail ${gdb_test_name}\n+\t\treturn\n+\t    }\n+\t    -re \"$::gdb_prompt $\" {\n+\t\tpass ${gdb_test_name}\n+\t    }\n+\t}\n+\n+\tgdb_assert { ${header_lines} == 3 }\n+\tif { $mode == \"on\" } {\n+\t    gdb_assert { ${bt_lines} == 2 }\n+\t} else {\n+\t    gdb_assert { ${bt_lines} == 0 }\n+\t}\n+    }\n+}\n+\n+# For each problem type (error or warning) raise a fake problem using\n+# the maintenance commands and check that a backtrace is (or isn't)\n+# printed, depending on the user setting.\n+foreach problem_type { internal-error internal-warning } {\n+    gdb_test_no_output \"maint set ${problem_type} corefile no\"\n+    gdb_test_no_output \"maint set ${problem_type} quit no\"\n+\n+    foreach mode { on off } {\n+\trun_test ${problem_type} ${mode}\n+    }\n+}"
    },
    {
      "sha": "8875d00fdb115926df3d54fc338d24ede2a47a49",
      "filename": "gdb/testsuite/gdb.base/bt-on-fatal-signal.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 36,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/testsuite/gdb.base/bt-on-fatal-signal.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/testsuite/gdb.base/bt-on-fatal-signal.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/bt-on-fatal-signal.exp?ref=91f2597bd24d171c1337a4629f8237aa47c59082",
      "patch": "@@ -135,39 +135,3 @@ foreach test_data {{SEGV \"Segmentation fault\"} \\\n \tgdb_exit\n     }\n }\n-\n-# Check that when we get an internal error and choose to dump core, we\n-# don't print a backtrace to the console.\n-with_test_prefix \"internal-error\" {\n-    # Restart GDB.\n-    clean_restart $binfile\n-\n-    set saw_bt_start false\n-\n-    gdb_test_multiple \"maint internal-error foo\" \"\" {\n-\t-early -re \"internal-error: foo\\r\\n\" {\n-\t    exp_continue\n-\t}\n-\t-early -re \"^A problem internal to GDB has been detected,\\r\\n\" {\n-\t    exp_continue\n-\t}\n-\t-early -re \"^further debugging may prove unreliable\\\\.\\r\\n\" {\n-\t    exp_continue\n-\t}\n-\t-early -re \"^Quit this debugging session\\\\? \\\\(y or n\\\\)\" {\n-\t    send_gdb \"y\\n\"\n-\t    exp_continue\n-\t}\n-\t-early -re \"^Create a core file of GDB\\\\? \\\\(y or n\\\\)\" {\n-\t    send_gdb \"y\\n\"\n-\t    exp_continue\n-\t}\n-\t-early -re \"----- Backtrace -----\\r\\n\" {\n-\t    set saw_bt_start true\n-\t    exp_continue\n-\t}\n-\teof {\n-\t    gdb_assert { [expr ! $saw_bt_start] }\n-\t}\n-    }\n-}"
    },
    {
      "sha": "f6f90d7365baa00d9ebc8e570806df69e731ef39",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 35,
      "deletions": 1,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f2597bd24d171c1337a4629f8237aa47c59082/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=91f2597bd24d171c1337a4629f8237aa47c59082",
      "patch": "@@ -75,6 +75,7 @@\n #include \"gdbarch.h\"\n #include \"cli-out.h\"\n #include \"gdbsupport/gdb-safe-ctype.h\"\n+#include \"bt-utils.h\"\n \n void (*deprecated_error_begin_hook) (void);\n \n@@ -304,6 +305,13 @@ struct internal_problem\n \n   /* Like SHOULD_QUIT, but whether GDB should dump core.  */\n   const char *should_dump_core;\n+\n+  /* Like USER_SETTABLE_SHOULD_QUIT but for SHOULD_PRINT_BACKTRACE.  */\n+  bool user_settable_should_print_backtrace;\n+\n+  /* When this is true GDB will print a backtrace when a problem of this\n+     type is encountered.  */\n+  bool should_print_backtrace;\n };\n \n /* Report a problem, internal to GDB, to the user.  Once the problem\n@@ -377,9 +385,13 @@ internal_vproblem (struct internal_problem *problem,\n   /* Emit the message unless query will emit it below.  */\n   if (problem->should_quit != internal_problem_ask\n       || !confirm\n-      || !filtered_printing_initialized ())\n+      || !filtered_printing_initialized ()\n+      || problem->should_print_backtrace)\n     fprintf_unfiltered (gdb_stderr, \"%s\\n\", reason.c_str ());\n \n+  if (problem->should_print_backtrace)\n+    gdb_internal_backtrace ();\n+\n   if (problem->should_quit == internal_problem_ask)\n     {\n       /* Default (yes/batch case) is to quit GDB.  When in batch mode\n@@ -449,6 +461,7 @@ internal_vproblem (struct internal_problem *problem,\n \n static struct internal_problem internal_error_problem = {\n   \"internal-error\", true, internal_problem_ask, true, internal_problem_ask,\n+  true, GDB_PRINT_INTERNAL_BACKTRACE_INIT_ON\n };\n \n void\n@@ -460,6 +473,7 @@ internal_verror (const char *file, int line, const char *fmt, va_list ap)\n \n static struct internal_problem internal_warning_problem = {\n   \"internal-warning\", true, internal_problem_ask, true, internal_problem_ask,\n+  true, false\n };\n \n void\n@@ -470,6 +484,7 @@ internal_vwarning (const char *file, int line, const char *fmt, va_list ap)\n \n static struct internal_problem demangler_warning_problem = {\n   \"demangler-warning\", true, internal_problem_ask, false, internal_problem_no,\n+  false, false\n };\n \n void\n@@ -571,6 +586,25 @@ add_internal_problem_command (struct internal_problem *problem)\n \t\t\t    set_cmd_list,\n \t\t\t    show_cmd_list);\n     }\n+\n+  if (problem->user_settable_should_print_backtrace)\n+    {\n+      std::string set_bt_doc\n+\t= string_printf (_(\"Set whether GDB should print a backtrace of \"\n+\t\t\t   \"GDB when %s is detected.\"), problem->name);\n+      std::string show_bt_doc\n+\t= string_printf (_(\"Show whether GDB will print a backtrace of \"\n+\t\t\t   \"GDB when %s is detected.\"), problem->name);\n+      add_setshow_boolean_cmd (\"backtrace\", class_maintenance,\n+\t\t\t       &problem->should_print_backtrace,\n+\t\t\t       set_bt_doc.c_str (),\n+\t\t\t       show_bt_doc.c_str (),\n+\t\t\t       NULL, /* help_doc */\n+\t\t\t       gdb_internal_backtrace_set_cmd,\n+\t\t\t       NULL, /* showfunc */\n+\t\t\t       set_cmd_list,\n+\t\t\t       show_cmd_list);\n+    }\n }\n \n /* Return a newly allocated string, containing the PREFIX followed"
    }
  ]
}