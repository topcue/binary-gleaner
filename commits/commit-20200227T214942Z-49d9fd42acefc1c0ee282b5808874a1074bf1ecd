{
  "sha": "49d9fd42acefc1c0ee282b5808874a1074bf1ecd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDlkOWZkNDJhY2VmYzFjMGVlMjgyYjU4MDg4NzRhMTA3NGJmMWVjZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-27T03:53:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-27T21:49:42Z"
    },
    "message": ".idata symbols should be reported with i or I flag by nm\n\n\tPR 24511\n\t* syms.c (stt): Trim off all but 'e', 'i' and 'p' entries.\n\t(coff_section_type): Adjust comment.\n\t(decode_section_type): Likewise.  Call coff_section_type before\n\tdecode_section_type.\n\t(bfd_decode_symclass): Use 'c' for common sections other than\n\tthe standard one.",
    "tree": {
      "sha": "3c8bd0797cc2ab936cc18e7165c19b5247b1643c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3c8bd0797cc2ab936cc18e7165c19b5247b1643c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/49d9fd42acefc1c0ee282b5808874a1074bf1ecd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49d9fd42acefc1c0ee282b5808874a1074bf1ecd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/49d9fd42acefc1c0ee282b5808874a1074bf1ecd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49d9fd42acefc1c0ee282b5808874a1074bf1ecd/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3104d9ee223133b9f5be4ec96b3f986e4fbc893e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3104d9ee223133b9f5be4ec96b3f986e4fbc893e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3104d9ee223133b9f5be4ec96b3f986e4fbc893e"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 21,
    "deletions": 22
  },
  "files": [
    {
      "sha": "6b267094320bcbd2c0976d563a58714942ed27a4",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49d9fd42acefc1c0ee282b5808874a1074bf1ecd/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49d9fd42acefc1c0ee282b5808874a1074bf1ecd/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=49d9fd42acefc1c0ee282b5808874a1074bf1ecd",
      "patch": "@@ -1,3 +1,13 @@\n+2020-02-27  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24511\n+\t* syms.c (stt): Trim off all but 'e', 'i' and 'p' entries.\n+\t(coff_section_type): Adjust comment.\n+\t(decode_section_type): Likewise.  Call coff_section_type before\n+\tdecode_section_type.\n+\t(bfd_decode_symclass): Use 'c' for common sections other than\n+\tthe standard one.\n+\n 2020-02-27  Alan Modra  <amodra@gmail.com>\n \n \t* coff-rs6000.c (_bfd_xcoff_read_ar_hdr): Put all data in one"
    },
    {
      "sha": "c1de8ebab17c5e7633357d765c0dcc60ca308b9e",
      "filename": "bfd/syms.c",
      "status": "modified",
      "additions": 11,
      "deletions": 22,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49d9fd42acefc1c0ee282b5808874a1074bf1ecd/bfd/syms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49d9fd42acefc1c0ee282b5808874a1074bf1ecd/bfd/syms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/syms.c?ref=49d9fd42acefc1c0ee282b5808874a1074bf1ecd",
      "patch": "@@ -565,39 +565,23 @@ struct section_to_type\n   char type;\n };\n \n-/* Map section names to POSIX/BSD single-character symbol types.\n+/* Map special section names to POSIX/BSD single-character symbol types.\n    This table is probably incomplete.  It is sorted for convenience of\n    adding entries.  Since it is so short, a linear search is used.  */\n static const struct section_to_type stt[] =\n {\n-  {\".bss\", 'b'},\n-  {\"code\", 't'},\t\t/* MRI .text */\n-  {\".data\", 'd'},\n-  {\"*DEBUG*\", 'N'},\n-  {\".debug\", 'N'},\t\t/* MSVC's .debug (non-standard debug syms) */\n   {\".drectve\", 'i'},\t\t/* MSVC's .drective section */\n   {\".edata\", 'e'},\t\t/* MSVC's .edata (export) section */\n-  {\".fini\", 't'},\t\t/* ELF fini section */\n   {\".idata\", 'i'},\t\t/* MSVC's .idata (import) section */\n-  {\".init\", 't'},\t\t/* ELF init section */\n   {\".pdata\", 'p'},\t\t/* MSVC's .pdata (stack unwind) section */\n-  {\".rdata\", 'r'},\t\t/* Read only data.  */\n-  {\".rodata\", 'r'},\t\t/* Read only data.  */\n-  {\".sbss\", 's'},\t\t/* Small BSS (uninitialized data).  */\n-  {\".scommon\", 'c'},\t\t/* Small common.  */\n-  {\".sdata\", 'g'},\t\t/* Small initialized data.  */\n-  {\".text\", 't'},\n-  {\"vars\", 'd'},\t\t/* MRI .data */\n-  {\"zerovars\", 'b'},\t\t/* MRI .bss */\n   {0, 0}\n };\n \n /* Return the single-character symbol type corresponding to\n    section S, or '?' for an unknown COFF section.\n \n    Check for leading strings which match, followed by a number, '.',\n-   or '$' so .text5 matches the .text entry, but .init_array doesn't\n-   match the .init entry.  */\n+   or '$' so .idata5 matches the .idata entry.  */\n \n static char\n coff_section_type (const char *s)\n@@ -619,7 +603,7 @@ coff_section_type (const char *s)\n    SECTION, or '?' for an unknown section.  This uses section flags to\n    identify sections.\n \n-   FIXME These types are unhandled: c, i, e, p.  If we handled these also,\n+   FIXME These types are unhandled: e, i, p.  If we handled these also,\n    we could perhaps obsolete coff_section_type.  */\n \n static char\n@@ -668,7 +652,12 @@ bfd_decode_symclass (asymbol *symbol)\n   char c;\n \n   if (symbol->section && bfd_is_com_section (symbol->section))\n-    return 'C';\n+    {\n+      if (symbol->section == bfd_com_section_ptr)\n+\treturn 'C';\n+      else\n+\treturn 'c';\n+    }\n   if (bfd_is_und_section (symbol->section))\n     {\n       if (symbol->flags & BSF_WEAK)\n@@ -705,9 +694,9 @@ bfd_decode_symclass (asymbol *symbol)\n     c = 'a';\n   else if (symbol->section)\n     {\n-      c = decode_section_type (symbol->section);\n+      c = coff_section_type (symbol->section->name);\n       if (c == '?')\n-\tc = coff_section_type (symbol->section->name);\n+\tc = decode_section_type (symbol->section);\n     }\n   else\n     return '?';"
    }
  ]
}