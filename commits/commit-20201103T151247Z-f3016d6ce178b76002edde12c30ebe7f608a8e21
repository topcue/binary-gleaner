{
  "sha": "f3016d6ce178b76002edde12c30ebe7f608a8e21",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjMwMTZkNmNlMTc4Yjc2MDAyZWRkZTEyYzMwZWJlN2Y2MDhhOGUyMQ==",
  "commit": {
    "author": {
      "name": "Howard Chu",
      "email": "hyc@symas.com",
      "date": "2020-11-03T15:12:47Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-11-03T15:12:47Z"
    },
    "message": "Add an option to the archiver to add a section recording library dependencies.\n\n\t* ar.c (long_options): Add --record-libdeps.\n\t(usage): Mention the new option.\n\t(decode_options): Handle the new option.\n\t(replace_members): If necessary, create a bfd to hold the libdeps\n\tdescription.\n\t* binemul.c (ar_emul_append_bfd): New function.\n\t(ar_emul_replace_bfd): New function.\n\t(ar_emul_default_append): Replace file_name and target arguments\n\twith new_bfd argument.\n\t(ar_emul_default_replace): Likewise.\n\t* binemul.h: Update prototypes.\n\t(struct bin_emulation_xfer_struct): Update fields.\n\t* doc/binutils.texi: Document the new option.\n\t* NEWS: Mention the new feature.\n\t* emul_aix.c (ar_emul_aix_append): Update.\n\t(ar_emul_aix_replace): Likewise.\n\t* testsuite/binutils-all/ar.exp: Add test of new feature.",
    "tree": {
      "sha": "c8c1943182747f75bafa7c34c4b7562ea7dfbbce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c8c1943182747f75bafa7c34c4b7562ea7dfbbce"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f3016d6ce178b76002edde12c30ebe7f608a8e21",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3016d6ce178b76002edde12c30ebe7f608a8e21",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f3016d6ce178b76002edde12c30ebe7f608a8e21",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3016d6ce178b76002edde12c30ebe7f608a8e21/comments",
  "author": {
    "login": "hyc",
    "id": 306354,
    "node_id": "MDQ6VXNlcjMwNjM1NA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/306354?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hyc",
    "html_url": "https://github.com/hyc",
    "followers_url": "https://api.github.com/users/hyc/followers",
    "following_url": "https://api.github.com/users/hyc/following{/other_user}",
    "gists_url": "https://api.github.com/users/hyc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hyc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hyc/subscriptions",
    "organizations_url": "https://api.github.com/users/hyc/orgs",
    "repos_url": "https://api.github.com/users/hyc/repos",
    "events_url": "https://api.github.com/users/hyc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hyc/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fd65497db4098140490e59e3dbf4709da5536081",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd65497db4098140490e59e3dbf4709da5536081",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fd65497db4098140490e59e3dbf4709da5536081"
    }
  ],
  "stats": {
    "total": 255,
    "additions": 210,
    "deletions": 45
  },
  "files": [
    {
      "sha": "3d6732f0eaa11de2673c117be776815255872c26",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -1,3 +1,23 @@\n+2020-11-03  Howard Chu  <hyc@symas.com>\n+\n+\t* ar.c (long_options): Add --record-libdeps.\n+\t(usage): Mention the new option.\n+\t(decode_options): Handle the new option.\n+\t(replace_members): If necessary, create a bfd to hold the libdeps\n+\tdescription.\n+\t* binemul.c (ar_emul_append_bfd): New function.\n+\t(ar_emul_replace_bfd): New function.\n+\t(ar_emul_default_append): Replace file_name and target arguments\n+\twith new_bfd argument.\n+\t(ar_emul_default_replace): Likewise.\n+\t* binemul.h: Update prototypes.\n+\t(struct bin_emulation_xfer_struct): Update fields.\n+\t* doc/binutils.texi: Document the new option.\n+\t* NEWS: Mention the new feature.\n+\t* emul_aix.c (ar_emul_aix_append): Update.\n+\t(ar_emul_aix_replace): Likewise.\n+\t* testsuite/binutils-all/ar.exp: Add test of new feature.\n+\n 2020-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26703"
    },
    {
      "sha": "02a19ea09bccda89da52039b5973a2889514713d",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -1,5 +1,10 @@\n -*- text -*-\n \n+* The ar tool's previously unused l modifier is now used for specifying\n+  dependencies of a static library. The arguments of this option\n+  (or --record-libdeps long form option) will be stored verbatim in the\n+  __.LIBDEP member of the archive, which the linker may read at link time.\n+\n * Readelf can now display the contents of LTO symbol table sections when asked\n   to do so via the --lto-syms command line option.\n "
    },
    {
      "sha": "56c758cc1af010c0d9689ea870c8c8d08a937749",
      "filename": "binutils/ar.c",
      "status": "modified",
      "additions": 80,
      "deletions": 6,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/ar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/ar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ar.c?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -138,6 +138,11 @@ static bfd_boolean full_pathname = FALSE;\n /* Whether to create a \"thin\" archive (symbol index only -- no files).  */\n static bfd_boolean make_thin_archive = FALSE;\n \n+#define LIBDEPS\t\"__.LIBDEP\"\n+/* Text to store in the __.LIBDEP archive element for the linker to use.  */\n+static char * libdeps = NULL;\n+static bfd *  libdeps_bfd = NULL;\n+\n static int show_version = 0;\n \n static int show_help = 0;\n@@ -166,6 +171,7 @@ static struct option long_options[] =\n   {\"target\", required_argument, NULL, OPTION_TARGET},\n   {\"version\", no_argument, &show_version, 1},\n   {\"output\", required_argument, NULL, OPTION_OUTPUT},\n+  {\"record-libdeps\", required_argument, NULL, 'l'},\n   {NULL, no_argument, NULL, 0}\n };\n \n@@ -329,13 +335,15 @@ usage (int help)\n   fprintf (s, _(\" generic modifiers:\\n\"));\n   fprintf (s, _(\"  [c]          - do not warn if the library had to be created\\n\"));\n   fprintf (s, _(\"  [s]          - create an archive index (cf. ranlib)\\n\"));\n+  fprintf (s, _(\"  [l <text> ]  - specify the dependencies of this library\\n\"));\n   fprintf (s, _(\"  [S]          - do not build a symbol table\\n\"));\n   fprintf (s, _(\"  [T]          - make a thin archive\\n\"));\n   fprintf (s, _(\"  [v]          - be verbose\\n\"));\n   fprintf (s, _(\"  [V]          - display the version number\\n\"));\n   fprintf (s, _(\"  @<file>      - read options from <file>\\n\"));\n   fprintf (s, _(\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\"));\n   fprintf (s, _(\"  --output=DIRNAME - specify the output directory for extraction operations\\n\"));\n+  fprintf (s, _(\"  --record-libdeps=<text> - specify the dependencies of this library\\n\"));\n #if BFD_SUPPORTS_PLUGINS\n   fprintf (s, _(\" optional:\\n\"));\n   fprintf (s, _(\"  --plugin <p> - load the specified plugin\\n\"));\n@@ -487,7 +495,7 @@ decode_options (int argc, char **argv)\n       argv = new_argv;\n     }\n \n-  while ((c = getopt_long (argc, argv, \"hdmpqrtxlcoOVsSuvabiMNfPTDU\",\n+  while ((c = getopt_long (argc, argv, \"hdmpqrtxl:coOVsSuvabiMNfPTDU\",\n \t\t\t   long_options, NULL)) != EOF)\n     {\n       switch (c)\n@@ -535,6 +543,9 @@ decode_options (int argc, char **argv)\n           operation = extract;\n           break;\n         case 'l':\n+          if (libdeps != NULL)\n+            fatal (_(\"libdeps specified more than once\"));\n+          libdeps = optarg;\n           break;\n         case 'c':\n           silent_create = 1;\n@@ -847,6 +858,49 @@ main (int argc, char **argv)\n       if (operation == extract && bfd_is_thin_archive (arch))\n \tfatal (_(\"`x' cannot be used on thin archives.\"));\n \n+      if (libdeps != NULL)\n+\t{\n+\t  char **new_files;\n+\t  bfd_size_type reclen = strlen (libdeps) + 1;\n+\n+\t  /* Create a bfd to contain the dependencies.\n+\t     It inherits its type from arch, but we must set the type to\n+\t     \"binary\" otherwise bfd_bwrite() will fail.  After writing, we\n+\t     must set the type back to \"plugin\" otherwise adding it to the\n+\t     archive will fail.  */\n+\t  libdeps_bfd = bfd_create (LIBDEPS, arch);\n+\t  if (libdeps_bfd == NULL)\n+\t    fatal (_(\"Cannot create libdeps record.\"));\n+\n+\t  if (bfd_find_target (\"binary\", libdeps_bfd) == NULL)\n+\t    fatal (_(\"Cannot set libdeps record type to binary.\"));\n+\n+\t  if (! bfd_set_format (libdeps_bfd, bfd_object))\n+\t    fatal (_(\"Cannot set libdeps object format.\"));\n+\n+\t  if (! bfd_make_writable (libdeps_bfd))\n+\t    fatal (_(\"Cannot make libdeps object writable.\"));\n+\n+\t  if (bfd_bwrite (libdeps, reclen, libdeps_bfd) != reclen)\n+\t    fatal (_(\"Cannot write libdeps record.\"));\n+\n+\t  if (! bfd_make_readable (libdeps_bfd))\n+\t    fatal (_(\"Cannot make libdeps object readable.\"));\n+\n+\t  if (bfd_find_target (\"plugin\", libdeps_bfd) == NULL)\n+\t    fatal (_(\"Cannot reset libdeps record type.\"));\n+\n+\t  /* Append our libdeps record to the list of files\n+\t     being operated on.  */\n+\t  new_files = xmalloc ((file_count + 2) * sizeof (char *));\n+\t  for (i = 0; i < file_count; i++)\n+\t    new_files[i] = files[i];\n+\t  new_files[i++] = LIBDEPS;\n+\t  file_count = i;\n+\t  files = new_files;\n+\t  files[i] = NULL;\n+\t}\n+\n       switch (operation)\n \t{\n \tcase print_table:\n@@ -1432,6 +1486,7 @@ replace_members (bfd *arch, char **files_to_move, bfd_boolean quick)\n \t\t\t\tnormalize (bfd_get_filename (current), arch)) == 0\n \t\t  && current->arelt_data != NULL)\n \t\t{\n+\t\t  bfd_boolean replaced;\n \t\t  if (newer_only)\n \t\t    {\n \t\t      struct stat fsbuf, asbuf;\n@@ -1453,8 +1508,19 @@ replace_members (bfd *arch, char **files_to_move, bfd_boolean quick)\n \n \t\t  after_bfd = get_pos_bfd (&arch->archive_next, pos_after,\n \t\t\t\t\t   bfd_get_filename (current));\n-\t\t  if (ar_emul_replace (after_bfd, *files_to_move,\n-\t\t\t\t       target, verbose))\n+\t\t  if (libdeps_bfd != NULL\n+\t\t      && FILENAME_CMP (normalize (*files_to_move, arch),\n+\t\t\t\t       LIBDEPS) == 0)\n+\t\t    {\n+\t\t      replaced = ar_emul_replace_bfd (after_bfd, libdeps_bfd,\n+\t\t\t\t\t\t      verbose);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      replaced = ar_emul_replace (after_bfd, *files_to_move,\n+\t\t\t\t\t\t  target, verbose);\n+\t\t    }\n+\t\t  if (replaced)\n \t\t    {\n \t\t      /* Snip out this entry from the chain.  */\n \t\t      *current_ptr = (*current_ptr)->archive_next;\n@@ -1470,9 +1536,17 @@ replace_members (bfd *arch, char **files_to_move, bfd_boolean quick)\n       /* Add to the end of the archive.  */\n       after_bfd = get_pos_bfd (&arch->archive_next, pos_end, NULL);\n \n-      if (ar_emul_append (after_bfd, *files_to_move, target,\n-\t\t\t  verbose, make_thin_archive))\n-\tchanged = TRUE;\n+      if (libdeps_bfd != NULL\n+\t  && FILENAME_CMP (normalize (*files_to_move, arch), LIBDEPS) == 0)\n+        {\n+\t  changed |= ar_emul_append_bfd (after_bfd, libdeps_bfd,\n+\t\t\t\t\t verbose, make_thin_archive);\n+\t}\n+      else\n+        {\n+\t  changed |= ar_emul_append (after_bfd, *files_to_move, target,\n+\t\t\t\t     verbose, make_thin_archive);\n+\t}\n \n     next_file:;\n "
    },
    {
      "sha": "8a0512ebd9b5753e3369c3d9d4bfa3da19bbc300",
      "filename": "binutils/binemul.c",
      "status": "modified",
      "additions": 37,
      "deletions": 16,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/binemul.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/binemul.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/binemul.c?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -41,9 +41,24 @@ ar_emul_default_usage (FILE *fp)\n bfd_boolean\n ar_emul_append (bfd **after_bfd, char *file_name, const char *target,\n \t\tbfd_boolean verbose, bfd_boolean flatten)\n+{\n+  bfd *new_bfd;\n+\n+  new_bfd = bfd_openr (file_name, target);\n+  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);\n+  if (bin_dummy_emulation.ar_append)\n+    return bin_dummy_emulation.ar_append (after_bfd, new_bfd,\n+\t\t\t\t\t  verbose, flatten);\n+\n+  return FALSE;\n+}\n+\n+bfd_boolean\n+ar_emul_append_bfd (bfd **after_bfd, bfd *new_bfd,\n+\t\tbfd_boolean verbose, bfd_boolean flatten)\n {\n   if (bin_dummy_emulation.ar_append)\n-    return bin_dummy_emulation.ar_append (after_bfd, file_name, target,\n+    return bin_dummy_emulation.ar_append (after_bfd, new_bfd,\n \t\t\t\t\t  verbose, flatten);\n \n   return FALSE;\n@@ -93,38 +108,44 @@ do_ar_emul_append (bfd **after_bfd, bfd *new_bfd,\n }\n \n bfd_boolean\n-ar_emul_default_append (bfd **after_bfd, char *file_name,\n-\t\t\tconst char *target, bfd_boolean verbose,\n-\t\t\tbfd_boolean flatten)\n+ar_emul_default_append (bfd **after_bfd, bfd *new_bfd,\n+\t\t\tbfd_boolean verbose, bfd_boolean flatten)\n {\n-  bfd *new_bfd;\n-\n-  new_bfd = bfd_openr (file_name, target);\n-  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);\n   return do_ar_emul_append (after_bfd, new_bfd, verbose, flatten, any_ok);\n }\n \n bfd_boolean\n ar_emul_replace (bfd **after_bfd, char *file_name, const char *target,\n \t\t bfd_boolean verbose)\n {\n+  bfd *new_bfd;\n+\n+  new_bfd = bfd_openr (file_name, target);\n+  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);\n+\n   if (bin_dummy_emulation.ar_replace)\n-    return bin_dummy_emulation.ar_replace (after_bfd, file_name,\n-\t\t\t\t\t   target, verbose);\n+    return bin_dummy_emulation.ar_replace (after_bfd, new_bfd,\n+\t\t\t\t\t   verbose);\n \n   return FALSE;\n }\n \n bfd_boolean\n-ar_emul_default_replace (bfd **after_bfd, char *file_name,\n-\t\t\t const char *target, bfd_boolean verbose)\n+ar_emul_replace_bfd (bfd **after_bfd, bfd *new_bfd,\n+\t\t bfd_boolean verbose)\n {\n-  bfd *new_bfd;\n+  if (bin_dummy_emulation.ar_replace)\n+    return bin_dummy_emulation.ar_replace (after_bfd, new_bfd,\n+\t\t\t\t\t   verbose);\n \n-  new_bfd = bfd_openr (file_name, target);\n-  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);\n+  return FALSE;\n+}\n \n-  AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, file_name);\n+bfd_boolean\n+ar_emul_default_replace (bfd **after_bfd, bfd *new_bfd,\n+\t\t\t bfd_boolean verbose)\n+{\n+  AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, bfd_get_filename (new_bfd));\n \n   new_bfd->archive_next = *after_bfd;\n   *after_bfd = new_bfd;"
    },
    {
      "sha": "57b2e20b7a1cfde6cb8e9abdeefbe49f1d094c4d",
      "filename": "binutils/binemul.h",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/binemul.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/binemul.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/binemul.h?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -30,15 +30,19 @@ extern void ar_emul_usage (FILE *);\n extern void ar_emul_default_usage (FILE *);\n extern bfd_boolean ar_emul_append (bfd **, char *, const char *,\n \t\t\t\t   bfd_boolean, bfd_boolean);\n-extern bfd_boolean ar_emul_default_append (bfd **, char *, const char *,\n+extern bfd_boolean ar_emul_append_bfd (bfd **, bfd *,\n+\t\t\t\t       bfd_boolean, bfd_boolean);\n+extern bfd_boolean ar_emul_default_append (bfd **, bfd *,\n \t\t\t\t\t   bfd_boolean, bfd_boolean);\n extern bfd_boolean do_ar_emul_append (bfd **, bfd *,\n \t\t\t\t      bfd_boolean, bfd_boolean,\n \t\t\t\t      bfd_boolean (*)(bfd *));\n extern bfd_boolean ar_emul_replace (bfd **, char *, const char *,\n \t\t\t\t    bfd_boolean);\n-extern bfd_boolean ar_emul_default_replace (bfd **, char *,\n-\t\t\t\t\t    const char *, bfd_boolean);\n+extern bfd_boolean ar_emul_replace_bfd (bfd **, bfd *,\n+\t\t\t\t\tbfd_boolean);\n+extern bfd_boolean ar_emul_default_replace (bfd **, bfd *,\n+\t\t\t\t\t    bfd_boolean);\n extern bfd_boolean ar_emul_parse_arg (char *);\n extern bfd_boolean ar_emul_default_parse_arg (char *);\n \n@@ -61,9 +65,8 @@ typedef struct bin_emulation_xfer_struct\n {\n   /* Print out the extra options.  */\n   void (* ar_usage) (FILE *fp);\n-  bfd_boolean (* ar_append) (bfd **, char *, const char *, bfd_boolean,\n-\t\t\t     bfd_boolean);\n-  bfd_boolean (* ar_replace) (bfd **, char *, const char *, bfd_boolean);\n+  bfd_boolean (* ar_append) (bfd **, bfd *, bfd_boolean, bfd_boolean);\n+  bfd_boolean (* ar_replace) (bfd **, bfd *, bfd_boolean);\n   bfd_boolean (* ar_parse_arg) (char *);\n }\n bin_emulation_xfer_type;"
    },
    {
      "sha": "41fd92a908aa7e4471daa4ecfc0e50ed0c39c3f0",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -170,7 +170,7 @@ in the section entitled ``GNU Free Documentation License''.\n @c man title ar create, modify, and extract from archives\n \n @smallexample\n-ar [-]@var{p}[@var{mod}] [@option{--plugin} @var{name}] [@option{--target} @var{bfdname}] [@option{--output} @var{dirname}] [@var{relpos}] [@var{count}] @var{archive} [@var{member}@dots{}]\n+ar [-]@var{p}[@var{mod}] [@option{--plugin} @var{name}] [@option{--target} @var{bfdname}] [@option{--output} @var{dirname}] [@option{--record-libdeps} @var{libdeps}] [@var{relpos}] [@var{count}] @var{archive} [@var{member}@dots{}]\n ar -M [ <mri-script ]\n @end smallexample\n \n@@ -196,7 +196,9 @@ characters (typical of formats related to coff).\n @cindex libraries\n @command{ar} is considered a binary utility because archives of this sort\n are most often used as @dfn{libraries} holding commonly needed\n-subroutines.\n+subroutines.  Since libraries often will depend on other libraries,\n+@command{ar} can also record the dependencies of a library when the\n+@option{--record-libdeps} option is specified.\n \n @cindex symbol index\n @command{ar} creates an index to the symbols defined in relocatable\n@@ -254,7 +256,7 @@ program.\n \n @smallexample\n @c man begin SYNOPSIS ar\n-ar [@option{-X32_64}] [@option{-}]@var{p}[@var{mod}] [@option{--plugin} @var{name}] [@option{--target} @var{bfdname}] [@option{--output} @var{dirname}] [@var{relpos}] [@var{count}] @var{archive} [@var{member}@dots{}]\n+ar [@option{-X32_64}] [@option{-}]@var{p}[@var{mod}] [@option{--plugin} @var{name}] [@option{--target} @var{bfdname}] [@option{--output} @var{dirname}] [@option{--record-libdeps} @var{libdeps}] [@var{relpos}] [@var{count}] @var{archive} [@var{member}@dots{}]\n @c man end\n @end smallexample\n \n@@ -448,9 +450,14 @@ member must be present as the @var{relpos} argument, before the\n @var{archive} specification.  (same as @samp{b}).\n \n @item l\n-This modifier is accepted but not used.\n+@c This modifier was accepted but not used.\n @c whaffor ar l modifier??? presumably compat; with\n @c what???---doc@@cygnus.com, 25jan91\n+Specify dependencies of this library.  The dependencies must immediately\n+follow this option character, must use the same syntax as the linker\n+command line, and must be specified within a single argument.  I.e., if\n+multiple items are needed, they must be quoted to form a single command\n+line argument.  For example @samp{L \"-L/usr/local/lib -lmydep1 -lmydep2\"}\n \n @item N\n Uses the @var{count} parameter.  This is used if there are multiple\n@@ -592,6 +599,10 @@ Note - although the presence of this option does imply a @option{x}\n extraction operation that option must still be included on the command\n line.\n \n+@item --record-libdeps @var{libdeps}\n+The @option{--record-libdeps} option is identical to the @option{l} modifier,\n+just handled in long form.\n+\n @end table\n @c man end\n "
    },
    {
      "sha": "726cb3b70c546d02cc7812bd06d856c115e113e1",
      "filename": "binutils/emul_aix.c",
      "status": "modified",
      "additions": 3,
      "deletions": 13,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/emul_aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/emul_aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/emul_aix.c?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -67,30 +67,20 @@ check_aix (bfd *try_bfd)\n }\n \n static bfd_boolean\n-ar_emul_aix_append (bfd **after_bfd, char *file_name, const char *target,\n+ar_emul_aix_append (bfd **after_bfd, bfd *new_bfd,\n \t\t    bfd_boolean verbose, bfd_boolean flatten)\n {\n-  bfd *new_bfd;\n-\n-  new_bfd = bfd_openr (file_name, target);\n-  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);\n-\n   return do_ar_emul_append (after_bfd, new_bfd, verbose, flatten, check_aix);\n }\n \n static bfd_boolean\n-ar_emul_aix_replace (bfd **after_bfd, char *file_name, const char *target,\n+ar_emul_aix_replace (bfd **after_bfd, bfd *new_bfd,\n \t\t     bfd_boolean verbose)\n {\n-  bfd *new_bfd;\n-\n-  new_bfd = bfd_openr (file_name, target);\n-  AR_EMUL_ELEMENT_CHECK (new_bfd, file_name);\n-\n   if (!check_aix (new_bfd))\n     return FALSE;\n \n-  AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, file_name);\n+  AR_EMUL_REPLACE_PRINT_VERBOSE (verbose, bfd_get_filename (new_bfd));\n \n   new_bfd->archive_next = *after_bfd;\n   *after_bfd = new_bfd;"
    },
    {
      "sha": "273a0a3909a2e4280365bd22d07cd25215f2d822",
      "filename": "binutils/testsuite/binutils-all/ar.exp",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/testsuite/binutils-all/ar.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3016d6ce178b76002edde12c30ebe7f608a8e21/binutils/testsuite/binutils-all/ar.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/ar.exp?ref=f3016d6ce178b76002edde12c30ebe7f608a8e21",
      "patch": "@@ -715,6 +715,46 @@ proc many_files { } {\n     pass $testname\n }\n \n+proc test_add_dependencies { } {\n+    global AR\n+    global AS\n+    global srcdir\n+    global subdir\n+    global obj\n+\n+    set testname \"ar adding library dependencies\"\n+\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n+\tunresolved $testname\n+\treturn\n+    }\n+\n+    if [is_remote host] {\n+\tset archive artest.a\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n+\tremote_file host delete $archive\n+    } else {\n+\tset archive tmpdir/artest.a\n+\tset objfile tmpdir/bintest.${obj}\n+    }\n+\n+    remote_file build delete tmpdir/artest.a\n+\n+    set got [binutils_run $AR \"-r -c $archive --record-libdeps /foo/bar ${objfile}\"]\n+    if ![string match \"\" $got] {\n+\tfail $testname\n+\treturn\n+    }\n+\n+    set got [binutils_run $AR \"-t $archive\"]\n+    if ![string match \"*bintest.${obj}\r__.LIBDEP*\" $got] {\n+\tfail $testname\n+\treturn\n+    }\n+\n+    pass $testname\n+}\n+\n # Run the tests.\n \n # Only run the bfdtest checks if the programs exist.  Since these\n@@ -743,6 +783,7 @@ move_an_element\n empty_archive\n extract_an_element\n many_files\n+test_add_dependencies\n \n if { [is_elf_format] && [supports_gnu_unique] } {\n     unique_symbol"
    }
  ]
}