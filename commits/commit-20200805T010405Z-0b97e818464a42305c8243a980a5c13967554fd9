{
  "sha": "0b97e818464a42305c8243a980a5c13967554fd9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI5N2U4MTg0NjRhNDIzMDVjODI0M2E5ODBhNWMxMzk2NzU1NGZkOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-05T00:33:00Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-05T01:04:05Z"
    },
    "message": "PR26337, Malloc size error in objdump\n\nA malloc failure triggered by a fuzzed object file isn't a real\nproblem unless objdump doesn't exit cleanly after the failure, which\nit does.  However we have bfd_malloc_and_get_section to sanity check\nsize of uncompressed sections before allocating memory.  Use it.\n\n\tPR 26337\n\t* objdump.c (load_specific_debug_section): Don't malloc space for\n\tsection contents, use bfd_malloc_and_get_section.",
    "tree": {
      "sha": "ab9e326ba16cecab9599dc2ddc96ebdcc7ae86fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab9e326ba16cecab9599dc2ddc96ebdcc7ae86fd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b97e818464a42305c8243a980a5c13967554fd9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b97e818464a42305c8243a980a5c13967554fd9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b97e818464a42305c8243a980a5c13967554fd9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b97e818464a42305c8243a980a5c13967554fd9/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b7563b2492962421e1795e2eca61beffbb45e08d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7563b2492962421e1795e2eca61beffbb45e08d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b7563b2492962421e1795e2eca61beffbb45e08d"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 9,
    "deletions": 4
  },
  "files": [
    {
      "sha": "a924ae2618dfd9c5f00d71a34859bd5b23de0233",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b97e818464a42305c8243a980a5c13967554fd9/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b97e818464a42305c8243a980a5c13967554fd9/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=0b97e818464a42305c8243a980a5c13967554fd9",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-05  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26337\n+\t* objdump.c (load_specific_debug_section): Don't malloc space for\n+\tsection contents, use bfd_malloc_and_get_section.\n+\n 2020-07-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.am (AM_CPPFLAGS): Add LARGEFILE_CPPFLAGS."
    },
    {
      "sha": "1b48cd3efdc9c19e80a79663ba814f16abc2a96a",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b97e818464a42305c8243a980a5c13967554fd9/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b97e818464a42305c8243a980a5c13967554fd9/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=0b97e818464a42305c8243a980a5c13967554fd9",
      "patch": "@@ -3545,6 +3545,7 @@ load_specific_debug_section (enum dwarf_section_display_enum debug,\n       if (streq (section->filename, bfd_get_filename (abfd)))\n \treturn TRUE;\n       free (section->start);\n+      section->start = NULL;\n     }\n \n   section->filename = bfd_get_filename (abfd);\n@@ -3557,22 +3558,20 @@ load_specific_debug_section (enum dwarf_section_display_enum debug,\n   alloced = amt = section->size + 1;\n   if (alloced != amt || alloced == 0)\n     {\n-      section->start = NULL;\n       free_debug_section (debug);\n       printf (_(\"\\nSection '%s' has an invalid size: %#llx.\\n\"),\n \t      sanitize_string (section->name),\n \t      (unsigned long long) section->size);\n       return FALSE;\n     }\n-  section->start = contents = malloc (alloced);\n-  if (section->start == NULL\n-      || !bfd_get_full_section_contents (abfd, sec, &contents))\n+  if (!bfd_malloc_and_get_section (abfd, sec, &contents))\n     {\n       free_debug_section (debug);\n       printf (_(\"\\nCan't get contents for section '%s'.\\n\"),\n \t      sanitize_string (section->name));\n       return FALSE;\n     }\n+  section->start = contents;\n   /* Ensure any string section has a terminating NUL.  */\n   section->start[section->size] = 0;\n "
    }
  ]
}