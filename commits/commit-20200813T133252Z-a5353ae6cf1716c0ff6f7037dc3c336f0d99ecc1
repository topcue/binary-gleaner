{
  "sha": "a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTUzNTNhZTZjZjE3MTZjMGZmNmY3MDM3ZGMzYzMzNmYwZDk5ZWNjMQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-08-13T13:32:52Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-08-13T13:32:52Z"
    },
    "message": "[ARM, sim] Fix build failure with -Werror (PR26365)\n\nThere is a bit of a situation in the ARM sim with regards to the handling\nof argv. sim_open () gets a const char **argv, but ARM's sim_open gets\nclever and decides to modify argv in place via sim_target_parse_command_line.\nI'm not sure why.\n\nIn any case, here's a fix that makes the code modify a copy of argv instead.\n\nsim/arm/ChangeLog:\n\n2020-08-13  Luis Machado  <luis.machado@linaro.org>\n\n\tPR sim/26365\n\n\t* wrapper.c (sim_target_parse_command_line): Free discarded argv\n\tentries.\n\t(sim_open): Use a duplicate of argv instead of the original argv.",
    "tree": {
      "sha": "855e49a518963e4865728d74a02d433945909918",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/855e49a518963e4865728d74a02d433945909918"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 38,
    "deletions": 12
  },
  "files": [
    {
      "sha": "1c8f89ab76113d354e7c9e1072615847824858ee",
      "filename": "sim/arm/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1/sim/arm/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1/sim/arm/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/arm/ChangeLog?ref=a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-13  Luis Machado  <luis.machado@linaro.org>\n+\n+\tPR sim/26365\n+\n+\t* wrapper.c (sim_target_parse_command_line): Free discarded argv\n+\tentries.\n+\t(sim_open): Use a duplicate of argv instead of the original argv.\n+\n 2020-01-17  Christian Biesinger  <cbiesinger@google.com>\n \n \t* iwmmxt.c: Fix spelling error (seperate)."
    },
    {
      "sha": "68f8242288f19dd4170e2160140c69b88d429353",
      "filename": "sim/arm/wrapper.c",
      "status": "modified",
      "additions": 30,
      "deletions": 12,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1/sim/arm/wrapper.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1/sim/arm/wrapper.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/arm/wrapper.c?ref=a5353ae6cf1716c0ff6f7037dc3c336f0d99ecc1",
      "patch": "@@ -672,7 +672,10 @@ sim_target_parse_command_line (int argc, char ** argv)\n \t{\n \t  /* Remove this option from the argv array.  */\n \t  for (arg = i; arg < argc; arg ++)\n-\t    argv[arg] = argv[arg + 1];\n+\t    {\n+\t      free (argv[arg]);\n+\t      argv[arg] = argv[arg + 1];\n+\t    }\n \t  argc --;\n \t  i --;\n \t  trace_funcs = 1;\n@@ -683,7 +686,10 @@ sim_target_parse_command_line (int argc, char ** argv)\n \t{\n \t  /* Remove this option from the argv array.  */\n \t  for (arg = i; arg < argc; arg ++)\n-\t    argv[arg] = argv[arg + 1];\n+\t    {\n+\t      free (argv[arg]);\n+\t      argv[arg] = argv[arg + 1];\n+\t    }\n \t  argc --;\n \t  i --;\n \t  disas = 1;\n@@ -697,7 +703,10 @@ sim_target_parse_command_line (int argc, char ** argv)\n \t{\n \t  /* Remove this option from the argv array.  */\n \t  for (arg = i; arg < argc; arg ++)\n-\t    argv[arg] = argv[arg + 1];\n+\t    {\n+\t      free (argv[arg]);\n+\t      argv[arg] = argv[arg + 1];\n+\t    }\n \t  argc --;\n \n \t  ptr = argv[i];\n@@ -733,7 +742,10 @@ sim_target_parse_command_line (int argc, char ** argv)\n \n       /* Remove this option from the argv array.  */\n       for (arg = i; arg < argc; arg ++)\n-\targv[arg] = argv[arg + 1];\n+\t{\n+\t  free (argv[arg]);\n+\t  argv[arg] = argv[arg + 1];\n+\t}\n       argc --;\n       i --;\n     }\n@@ -774,6 +786,7 @@ sim_open (SIM_OPEN_KIND kind,\n \t  char * const *argv)\n {\n   int i;\n+  char **argv_copy;\n   SIM_DESC sd = sim_state_alloc (kind, cb);\n   SIM_ASSERT (STATE_MAGIC (sd) == SIM_MAGIC_NUMBER);\n \n@@ -836,21 +849,24 @@ sim_open (SIM_OPEN_KIND kind,\n \n   sim_callback = cb;\n \n-  sim_target_parse_arg_array (argv);\n+  /* Copy over the argv contents so we can modify them.  */\n+  argv_copy = dupargv (argv);\n \n-  if (argv[1] != NULL)\n+  sim_target_parse_arg_array (argv_copy);\n+\n+  if (argv_copy[1] != NULL)\n     {\n       int i;\n \n       /* Scan for memory-size switches.  */\n-      for (i = 0; (argv[i] != NULL) && (argv[i][0] != 0); i++)\n-\tif (argv[i][0] == '-' && argv[i][1] == 'm')\n+      for (i = 0; (argv_copy[i] != NULL) && (argv_copy[i][0] != 0); i++)\n+\tif (argv_copy[i][0] == '-' && argv_copy[i][1] == 'm')\n \t  {\n-\t    if (argv[i][2] != '\\0')\n-\t      mem_size = atoi (&argv[i][2]);\n-\t    else if (argv[i + 1] != NULL)\n+\t    if (argv_copy[i][2] != '\\0')\n+\t      mem_size = atoi (&argv_copy[i][2]);\n+\t    else if (argv_copy[i + 1] != NULL)\n \t      {\n-\t\tmem_size = atoi (argv[i + 1]);\n+\t\tmem_size = atoi (argv_copy[i + 1]);\n \t\ti++;\n \t      }\n \t    else\n@@ -862,6 +878,8 @@ sim_open (SIM_OPEN_KIND kind,\n \t  }\n     }\n \n+  freeargv (argv_copy);\n+\n   return sd;\n }\n "
    }
  ]
}