{
  "sha": "24b21115f522cd0fbe55986cd914a593576294ef",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRiMjExMTVmNTIyY2QwZmJlNTU5ODZjZDkxNGE1OTM1NzYyOTRlZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T19:18:49Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T19:18:49Z"
    },
    "message": "gdb: fix tab after space indentation issues\n\nI spotted some indentation issues where we had some spaces followed by\ntabs at beginning of line, that I wanted to fix.  So while at it, I did\na quick grep to find and fix all I could find.\n\ngdb/ChangeLog:\n\n\t* Fix tab after space indentation issues throughout.\n\nChange-Id: I1acb414dd9c593b474ae2b8667496584df4316fd",
    "tree": {
      "sha": "6f2f71d9ede68e21d0371cc5db25b50d64de53af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f2f71d9ede68e21d0371cc5db25b50d64de53af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24b21115f522cd0fbe55986cd914a593576294ef",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24b21115f522cd0fbe55986cd914a593576294ef",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24b21115f522cd0fbe55986cd914a593576294ef",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24b21115f522cd0fbe55986cd914a593576294ef/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "01add95bed9afd5e7815439c3967db976be53f80",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01add95bed9afd5e7815439c3967db976be53f80",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/01add95bed9afd5e7815439c3967db976be53f80"
    }
  ],
  "stats": {
    "total": 280,
    "additions": 142,
    "deletions": 138
  },
  "files": [
    {
      "sha": "03910c0634c1e55eb1a6e962bdb5ba810dac1c6d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1,3 +1,7 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* Fix tab after space indentation issues throughout.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* Fix some indentation mistakes throughout."
    },
    {
      "sha": "6ed6b65e705b4bb42b5c1662bb01955d9a7204d6",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2169,9 +2169,9 @@ decode_constrained_packed_array (struct value *arr)\n       && ada_is_modular_type (value_type (arr)))\n     {\n        /* This is a (right-justified) modular type representing a packed\n- \t array with no wrapper.  In order to interpret the value through\n- \t the (left-justified) packed array type we just built, we must\n- \t first left-justify it.  */\n+\t  array with no wrapper.  In order to interpret the value through\n+\t  the (left-justified) packed array type we just built, we must\n+\t  first left-justify it.  */\n       int bit_size, bit_pos;\n       ULONGEST mod;\n "
    },
    {
      "sha": "0ab4d7ba9b5b4ed086aac6c5ded7e89c68e547cb",
      "filename": "gdb/aix-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/aix-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/aix-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aix-thread.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -433,13 +433,13 @@ pdc_read_regs (pthdb_user_t user,\n \t  if (!ptrace64aix (PTT_READ_SPRS, tid, \n \t\t\t    (unsigned long) &sprs64, 0, NULL))\n \t    memset (&sprs64, 0, sizeof (sprs64));\n-      \t  memcpy (&context->msr, &sprs64, sizeof(sprs64));\n+\t  memcpy (&context->msr, &sprs64, sizeof(sprs64));\n \t}\n       else\n \t{\n \t  if (!ptrace32 (PTT_READ_SPRS, tid, (uintptr_t) &sprs32, 0, NULL))\n \t    memset (&sprs32, 0, sizeof (sprs32));\n-      \t  memcpy (&context->msr, &sprs32, sizeof(sprs32));\n+\t  memcpy (&context->msr, &sprs32, sizeof(sprs32));\n \t}\n     }  \n   return 0;"
    },
    {
      "sha": "91305ddeb4495a107f37c846884c658a447e0be2",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2018,8 +2018,8 @@ amd64_analyze_stack_align (CORE_ADDR pc, CORE_ADDR current_pc,\n \n      \"andq $-XXX, %rsp\" can be either 4 bytes or 7 bytes:\n      \n-     \t0x48 0x83 0xe4 0xf0\t\t\tandq $-16, %rsp\n-     \t0x48 0x81 0xe4 0x00 0xff 0xff 0xff\tandq $-256, %rsp\n+\t0x48 0x83 0xe4 0xf0\t\t\tandq $-16, %rsp\n+\t0x48 0x81 0xe4 0x00 0xff 0xff 0xff\tandq $-256, %rsp\n    */\n \n   gdb_byte buf[18];\n@@ -2182,13 +2182,13 @@ amd64_x32_analyze_stack_align (CORE_ADDR pc, CORE_ADDR current_pc,\n \n      \"andq $-XXX, %rsp\" can be either 4 bytes or 7 bytes:\n      \n-     \t0x48 0x83 0xe4 0xf0\t\t\tandq $-16, %rsp\n-     \t0x48 0x81 0xe4 0x00 0xff 0xff 0xff\tandq $-256, %rsp\n+\t0x48 0x83 0xe4 0xf0\t\t\tandq $-16, %rsp\n+\t0x48 0x81 0xe4 0x00 0xff 0xff 0xff\tandq $-256, %rsp\n \n      \"andl $-XXX, %esp\" can be either 3 bytes or 6 bytes:\n      \n-     \t0x83 0xe4 0xf0\t\t\tandl $-16, %esp\n-     \t0x81 0xe4 0x00 0xff 0xff 0xff\tandl $-256, %esp\n+\t0x83 0xe4 0xf0\t\t\tandl $-16, %esp\n+\t0x81 0xe4 0x00 0xff 0xff 0xff\tandl $-256, %esp\n    */\n \n   gdb_byte buf[19];\n@@ -3342,9 +3342,9 @@ void\n _initialize_amd64_tdep ()\n {\n   gdbarch_register_osabi (bfd_arch_i386, bfd_mach_x86_64, GDB_OSABI_NONE,\n- \t\t\t  amd64_none_init_abi);\n+\t\t\t  amd64_none_init_abi);\n   gdbarch_register_osabi (bfd_arch_i386, bfd_mach_x64_32, GDB_OSABI_NONE,\n- \t\t\t  amd64_x32_none_init_abi);\n+\t\t\t  amd64_x32_none_init_abi);\n }\n \f\n "
    },
    {
      "sha": "e95b8330fd671bd1d9f95a85b1978d54d693166a",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -429,17 +429,17 @@ amd64_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n       gdb_byte buf[4];\n \n       if (target_read_memory (pc + 1, buf, sizeof buf) == 0)\n- \t{\n- \t  struct bound_minimal_symbol s;\n- \t  CORE_ADDR call_dest;\n+\t{\n+\t  struct bound_minimal_symbol s;\n+\t  CORE_ADDR call_dest;\n \n \t  call_dest = pc + 5 + extract_signed_integer (buf, 4, byte_order);\n- \t  s = lookup_minimal_symbol_by_pc (call_dest);\n- \t  if (s.minsym != NULL\n- \t      && s.minsym->linkage_name () != NULL\n- \t      && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n- \t    pc += 5;\n- \t}\n+\t  s = lookup_minimal_symbol_by_pc (call_dest);\n+\t  if (s.minsym != NULL\n+\t      && s.minsym->linkage_name () != NULL\n+\t      && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n+\t    pc += 5;\n+\t}\n     }\n \n   return pc;"
    },
    {
      "sha": "857a52a9a5137c5e95d9d2f811d3645802f6d2d1",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -4614,15 +4614,15 @@ displaced_write_reg (regcache *regs, arm_displaced_step_copy_insn_closure *dsc,\n \n \tcase BX_WRITE_PC:\n \t  bx_write_pc (regs, val);\n-  \t  break;\n+\t  break;\n \n \tcase LOAD_WRITE_PC:\n \t  load_write_pc (regs, dsc, val);\n-  \t  break;\n+\t  break;\n \n \tcase ALU_WRITE_PC:\n \t  alu_write_pc (regs, dsc, val);\n-  \t  break;\n+\t  break;\n \n \tcase CANNOT_WRITE_PC:\n \t  warning (_(\"Instruction wrote to PC in an unexpected way when \""
    },
    {
      "sha": "aa6b348dffde8a6b9d612c0604d248d13b491413",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -785,7 +785,7 @@ set_condition_evaluation_mode (const char *args, int from_tty,\n \t     target.  */\n \t  for (bp_location *loc : all_bp_locations ())\n \t    mark_breakpoint_location_modified (loc);\n-  \t}\n+\t}\n       else\n \t{\n \t  /* Manually mark non-duplicate locations to synch conditions\n@@ -10712,7 +10712,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n \t  gdbarch *caller_arch = frame_unwind_caller_arch (wp_frame);\n \t  CORE_ADDR caller_pc = frame_unwind_caller_pc (wp_frame);\n \n- \t  scope_breakpoint\n+\t  scope_breakpoint\n \t    = create_internal_breakpoint (caller_arch, caller_pc,\n \t\t\t\t\t  bp_watchpoint_scope,\n \t\t\t\t\t  &momentary_breakpoint_ops);"
    },
    {
      "sha": "0135363bc5a5d98d29bb84f4435d7a3fdc7a2383",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -968,25 +968,25 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t\t   symbol lookup which returned no match.  */\n \t\tbreak;\n \t      }\n- \t    else if (cs->c_secnum == N_ABS)\n- \t      {\n- \t\t/* Use the correct minimal symbol type (and don't\n- \t\t   relocate) for absolute values.  */\n- \t\tms_type = mst_abs;\n- \t\tsec = cs_to_section (cs, objfile);\n- \t\ttmpaddr = cs->c_value;\n- \t      }\n+\t    else if (cs->c_secnum == N_ABS)\n+\t      {\n+\t\t/* Use the correct minimal symbol type (and don't\n+\t\t   relocate) for absolute values.  */\n+\t\tms_type = mst_abs;\n+\t\tsec = cs_to_section (cs, objfile);\n+\t\ttmpaddr = cs->c_value;\n+\t      }\n \t    else\n \t      {\n \t\tasection *bfd_section = cs_to_bfd_section (cs, objfile);\n \n \t\tsec = cs_to_section (cs, objfile);\n \t\ttmpaddr = cs->c_value;\n- \t\t/* Statics in a PE file also get relocated.  */\n- \t\tif (cs->c_sclass == C_EXT\n- \t\t    || cs->c_sclass == C_THUMBEXTFUNC\n- \t\t    || cs->c_sclass == C_THUMBEXT\n- \t\t    || (pe_file && (cs->c_sclass == C_STAT)))\n+\t\t/* Statics in a PE file also get relocated.  */\n+\t\tif (cs->c_sclass == C_EXT\n+\t\t    || cs->c_sclass == C_THUMBEXTFUNC\n+\t\t    || cs->c_sclass == C_THUMBEXT\n+\t\t    || (pe_file && (cs->c_sclass == C_STAT)))\n \t\t  offset = objfile->section_offsets[sec];\n \n \t\tif (bfd_section->flags & SEC_CODE)"
    },
    {
      "sha": "cf35880b509b48735804a9e861ad3d9232037717",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1434,10 +1434,10 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t  if (!p)\n \t    continue;\t\t/* Not a debugging symbol.   */\n \n- \t  sym_len = 0;\n+\t  sym_len = 0;\n \t  sym_name = NULL;\t/* pacify \"gcc -Werror\" */\n- \t  if (psymtab_language == language_cplus)\n- \t    {\n+\t  if (psymtab_language == language_cplus)\n+\t    {\n \t      std::string name (namestring, p - namestring);\n \t      gdb::unique_xmalloc_ptr<char> new_name\n \t\t= cp_canonicalize_string (name.c_str ());\n@@ -1449,11 +1449,11 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t}\n \t    }\n \n- \t  if (sym_len == 0)\n- \t    {\n- \t      sym_name = namestring;\n- \t      sym_len = p - namestring;\n- \t    }\n+\t  if (sym_len == 0)\n+\t    {\n+\t      sym_name = namestring;\n+\t      sym_len = p - namestring;\n+\t    }\n \n \t  /* Main processing section for debugging symbols which\n \t     the initial read through the symbol tables needs to worry\n@@ -2400,10 +2400,10 @@ process_one_symbol (int type, int desc, CORE_ADDR valu, const char *name,\n \t  struct block *block;\n \n \t  if (outermost_context_p ())\n- \t    {\n+\t    {\n \t      lbrac_mismatch_complaint (symnum);\n- \t      break;\n- \t    }\n+\t      break;\n+\t    }\n \n \t  /* The following check is added before recording line 0 at\n \t     end of function so as to handle hand-generated stabs"
    },
    {
      "sha": "4b78add0a5af84f0eb61d57654a0215deb916e79",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1649,7 +1649,7 @@ struct index_wip_file\n \t\t  const char *suffix)\n   {\n     filename = (std::string (dir) + SLASH_STRING + basename\n-    \t\t+ suffix);\n+\t\t+ suffix);\n \n     filename_temp = make_temp_filename (filename);\n "
    },
    {
      "sha": "098df173c087c2d80bc45fcb7a0c83e9f3d81023",
      "filename": "gdb/frv-linux-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/frv-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/frv-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frv-linux-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -200,19 +200,19 @@ frv_linux_sigcontext_reg_addr (struct frame_info *this_frame, int regno,\n       else if (tramp_type == RT_SIGTRAMP)\n \t{\n \t  /* For a realtime sigtramp frame, SP + 12 contains a pointer\n- \t     to a ucontext struct.  The ucontext struct contains a\n- \t     sigcontext struct starting 24 bytes in.  (The offset of\n- \t     uc_mcontext within struct ucontext is derived as follows: \n- \t     stack_t is a 12-byte struct and struct sigcontext is\n- \t     8-byte aligned.  This gives an offset of 8 + 12 + 4 (for\n- \t     padding) = 24.)  */\n+\t     to a ucontext struct.  The ucontext struct contains a\n+\t     sigcontext struct starting 24 bytes in.  (The offset of\n+\t     uc_mcontext within struct ucontext is derived as follows: \n+\t     stack_t is a 12-byte struct and struct sigcontext is\n+\t     8-byte aligned.  This gives an offset of 8 + 12 + 4 (for\n+\t     padding) = 24.)  */\n \t  if (target_read_memory (sp + 12, buf, sizeof buf) != 0)\n \t    {\n \t      warning (_(\"Can't read realtime sigtramp frame.\"));\n \t      return 0;\n \t    }\n \t  sc_addr = extract_unsigned_integer (buf, sizeof buf, byte_order);\n- \t  sc_addr += 24;\n+\t  sc_addr += 24;\n \t}\n       else\n \tinternal_error (__FILE__, __LINE__, _(\"not a signal trampoline\"));"
    },
    {
      "sha": "1773aa336075ff8b048e313ac652b2d2d3f1c892",
      "filename": "gdb/gnu-nat.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/gnu-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/gnu-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.h?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -165,8 +165,8 @@ struct gnu_nat_target : public inf_child_target\n   void inf_validate_task_sc (struct inf *inf);\n   void inf_restore_exc_ports (struct inf *inf);\n   void inf_set_threads_resume_sc (struct inf *inf,\n-  \t\t\t\tstruct proc *run_thread,\n-  \t\t\t\tint run_others);\n+\t\t\t\t  struct proc *run_thread,\n+\t\t\t\t  int run_others);\n   int inf_set_threads_resume_sc_for_signal_thread (struct inf *inf);\n   void inf_resume (struct inf *inf);\n   void inf_set_step_thread (struct inf *inf, struct proc *proc);"
    },
    {
      "sha": "21e58f3c392603e037d20a57227a1557f21bb2a9",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2156,9 +2156,9 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n      if (get_frame_pc (this_frame) >= prologue_end\n \t && (u->Save_SP || u->alloca_frame) && fp != 0)\n       {\n- \tcache->base = fp;\n+\tcache->base = fp;\n  \n- \tif (hppa_debug)\n+\tif (hppa_debug)\n \t  fprintf_unfiltered (gdb_stdlog, \" (base=%s) [frame pointer]\",\n \t\t\t      paddress (gdbarch, cache->base));\n       }\n@@ -2976,7 +2976,7 @@ hppa_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n       if (in_plt_section (pc))\n \t{\n \t  /* Sanity check: are we pointing to the PLT stub?  */\n-  \t  if (!hppa_match_insns (gdbarch, pc, hppa_plt_stub, insn))\n+\t  if (!hppa_match_insns (gdbarch, pc, hppa_plt_stub, insn))\n \t    {\n \t      warning (_(\"Cannot resolve PLT stub at %s.\"),\n \t\t       paddress (gdbarch, pc));"
    },
    {
      "sha": "f15fd625b121ffa44ec870b9cc19b2d200ba86f3",
      "filename": "gdb/i386-fbsd-nat.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/i386-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/i386-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-nat.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -73,14 +73,14 @@ i386_fbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n       ULONGEST eflags;\n \n       /* Workaround for a bug in FreeBSD.  Make sure that the trace\n- \t flag is off when doing a continue.  There is a code path\n- \t through the kernel which leaves the flag set when it should\n- \t have been cleared.  If a process has a signal pending (such\n- \t as SIGALRM) and we do a PT_STEP, the process never really has\n- \t a chance to run because the kernel needs to notify the\n- \t debugger that a signal is being sent.  Therefore, the process\n- \t never goes through the kernel's trap() function which would\n- \t normally clear it.  */\n+\t flag is off when doing a continue.  There is a code path\n+\t through the kernel which leaves the flag set when it should\n+\t have been cleared.  If a process has a signal pending (such\n+\t as SIGALRM) and we do a PT_STEP, the process never really has\n+\t a chance to run because the kernel needs to notify the\n+\t debugger that a signal is being sent.  Therefore, the process\n+\t never goes through the kernel's trap() function which would\n+\t normally clear it.  */\n \n       regcache_cooked_read_unsigned (regcache, I386_EFLAGS_REGNUM,\n \t\t\t\t     &eflags);"
    },
    {
      "sha": "7d7b464f8d9bb4c60431bb890fee83fadcff0d33",
      "filename": "gdb/i386-linux-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/i386-linux-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/i386-linux-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.h?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -47,7 +47,7 @@ extern void i386_linux_report_signal_info (struct gdbarch *gdbarch,\n extern const struct target_desc *i386_linux_read_description (uint64_t xcr0);\n \n /* Format of XSAVE extended state is:\n- \tstruct\n+\tstruct\n \t{\n \t  fxsave_bytes[0..463]\n \t  sw_usable_bytes[464..511]"
    },
    {
      "sha": "973085ef3370d5d6be52d357803edae2c188dc4f",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1276,8 +1276,8 @@ i386_analyze_stack_align (CORE_ADDR pc, CORE_ADDR current_pc,\n \n      \"andl $-XXX, %esp\" can be either 3 bytes or 6 bytes:\n      \n-     \t0x83 0xe4 0xf0\t\t\tandl $-16, %esp\n-     \t0x81 0xe4 0x00 0xff 0xff 0xff\tandl $-256, %esp\n+\t0x83 0xe4 0xf0\t\t\tandl $-16, %esp\n+\t0x81 0xe4 0x00 0xff 0xff 0xff\tandl $-256, %esp\n    */\n \n   gdb_byte buf[14];\n@@ -1941,20 +1941,20 @@ i386_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n       gdb_byte buf[4];\n \n       if (target_read_code (pc + 1, buf, sizeof buf) == 0)\n- \t{\n+\t{\n \t  /* Make sure address is computed correctly as a 32bit\n \t     integer even if CORE_ADDR is 64 bit wide.  */\n- \t  struct bound_minimal_symbol s;\n- \t  CORE_ADDR call_dest;\n+\t  struct bound_minimal_symbol s;\n+\t  CORE_ADDR call_dest;\n \n \t  call_dest = pc + 5 + extract_signed_integer (buf, 4, byte_order);\n \t  call_dest = call_dest & 0xffffffffU;\n- \t  s = lookup_minimal_symbol_by_pc (call_dest);\n- \t  if (s.minsym != NULL\n- \t      && s.minsym->linkage_name () != NULL\n- \t      && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n- \t    pc += 5;\n- \t}\n+\t  s = lookup_minimal_symbol_by_pc (call_dest);\n+\t  if (s.minsym != NULL\n+\t      && s.minsym->linkage_name () != NULL\n+\t      && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n+\t    pc += 5;\n+\t}\n     }\n \n   return pc;"
    },
    {
      "sha": "38947ca265e84a4a4333c31a1ca2ee57c22fff31",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1472,7 +1472,7 @@ get_return_value (struct value *function, struct type *value_type)\n      calls are made async, this will likely be made the norm.  */\n \n   switch (gdbarch_return_value (gdbarch, function, value_type,\n-  \t\t\t\tNULL, NULL, NULL))\n+\t\t\t\tNULL, NULL, NULL))\n     {\n     case RETURN_VALUE_REGISTER_CONVENTION:\n     case RETURN_VALUE_ABI_RETURNS_ADDRESS:"
    },
    {
      "sha": "e9624d2a9b6e55c5ebd418e0800aa8a03a61c31f",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -7248,7 +7248,7 @@ process_event_stop_test (struct execution_control_state *ecs)\n   bool refresh_step_info = true;\n   if ((ecs->event_thread->suspend.stop_pc == stop_pc_sal.pc)\n       && (ecs->event_thread->current_line != stop_pc_sal.line\n- \t  || ecs->event_thread->current_symtab != stop_pc_sal.symtab))\n+\t  || ecs->event_thread->current_symtab != stop_pc_sal.symtab))\n     {\n       /* We are at a different line.  */\n "
    },
    {
      "sha": "eb1eac20af7363d069a0fd59593c916a88beb455",
      "filename": "gdb/macroscope.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/macroscope.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/macroscope.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macroscope.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -121,8 +121,8 @@ default_macro_scope (void)\n \t symbol files loaded, then get_current_or_default would raise an\n \t error.  But `set width' shouldn't raise an error just because\n \t it can't decide which scope to macro-expand its argument in.  */\n-      struct symtab_and_line cursal = \n-      \t\t\tget_current_source_symtab_and_line ();\n+      struct symtab_and_line cursal\n+\t= get_current_source_symtab_and_line ();\n       \n       sal.symtab = cursal.symtab;\n       sal.line = cursal.line;"
    },
    {
      "sha": "e386bacdcf2f2e0f85e27d827f85cb9461ee27d2",
      "filename": "gdb/mi/mi-cmd-disas.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mi/mi-cmd-disas.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mi/mi-cmd-disas.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-disas.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -202,6 +202,6 @@ mi_cmd_disassemble (const char *command, char **argv, int argc)\n     }\n \n   gdb_disassembly (gdbarch, uiout,\n-  \t\t   disasm_flags,\n+\t\t   disasm_flags,\n \t\t   how_many, low, high);\n }"
    },
    {
      "sha": "38f1cb80b861a32f67e90f20d9449e83c3f8f788",
      "filename": "gdb/mi/mi-cmd-var.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mi/mi-cmd-var.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mi/mi-cmd-var.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-var.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -701,7 +701,7 @@ varobj_update_one (struct varobj *var, enum print_values print_values,\n \t  break;\n \tcase VAROBJ_INVALID:\n \t  uiout->field_string (\"in_scope\", \"invalid\");\n- \t  break;\n+\t  break;\n \t}\n \n       if (r.status != VAROBJ_INVALID)"
    },
    {
      "sha": "a32ae5e3a29a27157fbc156b36f7244fcac3730e",
      "filename": "gdb/mips-netbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mips-netbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mips-netbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-netbsd-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -266,7 +266,7 @@ mipsnbsd_get_longjmp_target (struct frame_info *frame, CORE_ADDR *pc)\n   jb_addr = get_frame_register_unsigned (frame, MIPS_A0_REGNUM);\n \n   if (target_read_memory (jb_addr + NBSD_MIPS_JB_OFFSET (gdbarch), buf,\n-  \t\t\t  NBSD_MIPS_JB_ELEMENT_SIZE (gdbarch)))\n+\t\t\t  NBSD_MIPS_JB_ELEMENT_SIZE (gdbarch)))\n     return 0;\n \n   *pc = extract_unsigned_integer (buf, NBSD_MIPS_JB_ELEMENT_SIZE (gdbarch),"
    },
    {
      "sha": "dbace1212508d9286f847e5c36c75d18c0f5326e",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -4284,7 +4284,7 @@ heuristic-fence-post' command.\\n\",\n \n \t/* On MIPS16, any one of the following is likely to be the\n \t   start of a function:\n-  \t   extend save\n+\t   extend save\n \t   save\n \t   entry\n \t   addiu sp,-n"
    },
    {
      "sha": "0c4fadd49f7b0a0a5518047f1feb368af6e8c0c1",
      "filename": "gdb/nat/linux-namespaces.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nat/linux-namespaces.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nat/linux-namespaces.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-namespaces.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -771,15 +771,15 @@ mnsh_maybe_mourn_peer (void)\n \n #define mnsh_send_open(helper, filename, flags, mode) \\\n   mnsh_send_message (helper->sock, MNSH_REQ_OPEN, -1, flags, mode, \\\n-    \t\t     filename, strlen (filename) + 1)\n+\t\t     filename, strlen (filename) + 1)\n \n #define mnsh_send_unlink(helper, filename) \\\n   mnsh_send_message (helper->sock, MNSH_REQ_UNLINK, -1, 0, 0, \\\n-    \t\t     filename, strlen (filename) + 1)\n+\t\t     filename, strlen (filename) + 1)\n \n #define mnsh_send_readlink(helper, filename) \\\n   mnsh_send_message (helper->sock, MNSH_REQ_READLINK, -1, 0, 0, \\\n-    \t\t     filename, strlen (filename) + 1)\n+\t\t     filename, strlen (filename) + 1)\n \n /* Receive a message from the helper.  Issue an assertion failure if\n    the message isn't a correctly-formatted MNSH_RET_INT.  Set RESULT"
    },
    {
      "sha": "b4eb7bf6d27b695e32c129f482ad7940e5980dde",
      "filename": "gdb/nat/x86-dregs.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nat/x86-dregs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nat/x86-dregs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/x86-dregs.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -252,7 +252,7 @@ Invalid hardware breakpoint type %d in x86_length_and_rw_bits.\\n\"),\n \treturn (DR_LEN_4 | rw);\n       case 8:\n \tif (TARGET_HAS_DR_LEN_8)\n- \t  return (DR_LEN_8 | rw);\n+\t  return (DR_LEN_8 | rw);\n \t/* FALL THROUGH */\n       default:\n \tinternal_error (__FILE__, __LINE__, _(\"\\"
    },
    {
      "sha": "8fd3695da2d251ff9be139c31d75e6c8160fd1cb",
      "filename": "gdb/nios2-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nios2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nios2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nios2-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1375,7 +1375,7 @@ nios2_analyze_prologue (struct gdbarch *gdbarch, const CORE_ADDR start_pc,\n \t  /* ORHI  rb, ra, uimm   (also used for MOVHI) */\n \t  if (rb != 0)\n \t    {\n-  \t      value[rb].reg    = (value[ra].reg == 0) ? 0 : -1;\n+\t      value[rb].reg    = (value[ra].reg == 0) ? 0 : -1;\n \t      value[rb].offset = value[ra].offset | (uimm << 16);\n \t    }\n \t}"
    },
    {
      "sha": "1d21153bb4c0620e95bcaf2941af09302890332b",
      "filename": "gdb/nto-procfs.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nto-procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/nto-procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nto-procfs.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1142,7 +1142,7 @@ nto_procfs_target::mourn_inferior ()\n    the string \"a b c d\", and as output it would fill in argv with\n    the four arguments \"a\", \"b\", \"c\", \"d\".  The only additional\n    functionality is simple quoting.  The gdb command:\n-  \trun a \"b c d\" f\n+\trun a \"b c d\" f\n    will fill in argv with the three args \"a\", \"b c d\", \"e\".  */\n static void\n breakup_args (char *scratch, char **argv)"
    },
    {
      "sha": "3dcc75a4c83ca1ae94ad82e05234c2cccd3df424",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -109,7 +109,7 @@ pascal_is_string_type (struct type *type,int *length_pos, int *length_size,\n \t    *string_pos = TYPE_FIELD_BITPOS (type, 1) / TARGET_CHAR_BIT;\n \t  if (char_type)\n \t    *char_type = TYPE_TARGET_TYPE (type->field (1).type ());\n- \t  if (arrayname)\n+\t  if (arrayname)\n \t    *arrayname = TYPE_FIELD_NAME (type, 1);\n \t return 2;\n \t};\n@@ -135,7 +135,7 @@ pascal_is_string_type (struct type *type,int *length_pos, int *length_size,\n \t      if ((*char_type)->code () == TYPE_CODE_ARRAY)\n \t\t*char_type = TYPE_TARGET_TYPE (*char_type);\n \t    }\n- \t  if (arrayname)\n+\t  if (arrayname)\n \t    *arrayname = TYPE_FIELD_NAME (type, 2);\n \t return 3;\n \t};"
    },
    {
      "sha": "3abb9877e8031c71c96022eac3214a8fc7d39584",
      "filename": "gdb/ppc-sysv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/ppc-sysv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/ppc-sysv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-sysv-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1326,7 +1326,7 @@ ppc64_sysv_abi_push_freg (struct gdbarch *gdbarch,\n       && type->code () == TYPE_CODE_FLT)\n     {\n       /* Floats and doubles go in f1 .. f13.  32-bit floats are converted\n- \t to double first.  */\n+\t to double first.  */\n       if (argpos->regcache && argpos->freg <= 13)\n \t{\n \t  int regnum = tdep->ppc_fp0_regnum + argpos->freg;"
    },
    {
      "sha": "22fa5c074d1c9ad6fab1064901b9c2608a09e1ab",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -508,7 +508,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n \topts.format = 0;\n \tif (type->is_unsigned ())\n \t  type = builtin_type (gdbarch)->builtin_true_unsigned_char;\n- \telse\n+\telse\n \t  type = builtin_type (gdbarch)->builtin_true_char;\n \n \tvalue_print (value_from_longest (type, *val_long), stream, &opts);"
    },
    {
      "sha": "9e157c6e04892b2db66cd62540b288d5a7295ae2",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1236,11 +1236,11 @@ record_full_wait_1 (struct target_ops *ops,\n \n \t\t      if (!record_full_message_wrapper_safe (regcache,\n \t\t\t\t\t\t\t     GDB_SIGNAL_0))\n-  \t\t\t{\n+\t\t\t{\n \t\t\t   status->kind = TARGET_WAITKIND_STOPPED;\n \t\t\t   status->value.sig = GDB_SIGNAL_0;\n \t\t\t   break;\n-  \t\t\t}\n+\t\t\t}\n \n \t\t      process_stratum_target *proc_target\n \t\t\t= current_inferior ()->process_target ();"
    },
    {
      "sha": "fde0c612975a34bf89ca97d640250b00ab83b549",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2102,13 +2102,13 @@ _initialize_regcache ()\n \n #if GDB_SELF_TEST\n   selftests::register_test (\"get_thread_arch_aspace_regcache\",\n-  \t\t\t    selftests::get_thread_arch_aspace_regcache_test);\n+\t\t\t    selftests::get_thread_arch_aspace_regcache_test);\n   selftests::register_test (\"registers_changed_ptid_all\",\n \t\t\t    selftests::registers_changed_ptid_all_test);\n   selftests::register_test (\"registers_changed_ptid_target\",\n-  \t\t\t    selftests::registers_changed_ptid_target_test);\n+\t\t\t    selftests::registers_changed_ptid_target_test);\n   selftests::register_test (\"registers_changed_ptid_target_pid\",\n-  \t\t\t    selftests::registers_changed_ptid_target_pid_test);\n+\t\t\t    selftests::registers_changed_ptid_target_pid_test);\n   selftests::register_test (\"registers_changed_ptid_target_ptid\",\n \t\t\t    selftests::registers_changed_ptid_target_ptid_test);\n "
    },
    {
      "sha": "9b465d77343feee261147b413062e8d67ac12e27",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -9790,7 +9790,7 @@ remote_target::read_frame (gdb::char_vector *buf_p)\n \t  {\n \t    int repeat;\n \n- \t    csum += c;\n+\t    csum += c;\n \t    c = readchar (remote_timeout);\n \t    csum += c;\n \t    repeat = c - ' ' + 3;\t/* Compute repeat count.  */"
    },
    {
      "sha": "ed73f90316ad8484cc235254a60d6ec562340136",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1872,12 +1872,12 @@ skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR lim_pc,\n \t  continue;\n \t}\n       else if ((op & 0xffff0000) == 0x38210000)\n- \t{\t\t\t/* addi r1,r1,SIMM */\n- \t  fdata->frameless = 0;\n- \t  fdata->offset += SIGNED_SHORT (op);\n- \t  offset = fdata->offset;\n- \t  continue;\n- \t}\n+\t{\t\t\t/* addi r1,r1,SIMM */\n+\t  fdata->frameless = 0;\n+\t  fdata->offset += SIGNED_SHORT (op);\n+\t  offset = fdata->offset;\n+\t  continue;\n+\t}\n       /* Load up minimal toc pointer.  Do not treat an epilogue restore\n \t of r31 as a minimal TOC load.  */\n       else if (((op >> 22) == 0x20f\t||\t/* l r31,... or l r30,...  */\n@@ -1890,7 +1890,7 @@ skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR lim_pc,\n \n \t  /* move parameters from argument registers to local variable\n \t     registers */\n- \t}\n+\t}\n       else if ((op & 0xfc0007fe) == 0x7c000378 &&\t/* mr(.)  Rx,Ry */\n \t       (((op >> 21) & 31) >= 3) &&              /* R3 >= Ry >= R10 */\n \t       (((op >> 21) & 31) <= 10) &&\n@@ -2081,7 +2081,7 @@ skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc, CORE_ADDR lim_pc,\n \t    }\n \n \t  continue;\n-      \t}\n+\t}\n       /* Store gen register S at (r31+r0).\n \t Store param on stack when offset from SP bigger than 4 bytes.  */\n       /* 000100 sssss 11111 00000 01100100000 */"
    },
    {
      "sha": "7d1bc535ed94da087b4de1859756cff5ace1609f",
      "filename": "gdb/serial.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/serial.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/serial.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/serial.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -284,7 +284,7 @@ serial_fdopen_ops (const int fd, const struct serial_ops *ops)\n     {\n       ops = serial_interface_lookup (\"terminal\");\n       if (!ops)\n- \tops = serial_interface_lookup (\"hardwire\");\n+\tops = serial_interface_lookup (\"hardwire\");\n     }\n \n   if (!ops)"
    },
    {
      "sha": "4dd5d9fbb3085d56ae3a0644a7f1584a0c429fa7",
      "filename": "gdb/sh-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/sh-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/sh-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sh-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1406,8 +1406,8 @@ sh_return_value_nofpu (struct gdbarch *gdbarch, struct value *function,\n {\n   struct type *func_type = function ? value_type (function) : NULL;\n \n-  if (sh_use_struct_convention_nofpu (\n-  \tsh_is_renesas_calling_convention (func_type), type))\n+  if (sh_use_struct_convention_nofpu\n+\t(sh_is_renesas_calling_convention (func_type), type))\n     return RETURN_VALUE_STRUCT_CONVENTION;\n   if (writebuf)\n     sh_store_return_value_nofpu (type, regcache, writebuf);"
    },
    {
      "sha": "c993e25a892e0abbcc1d87a4a0eb180b2bb75fd7",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1322,7 +1322,7 @@ print_source_lines_base (struct symtab *s, int line, int stopline,\n \t    uiout->field_string (\"file\", symtab_to_filename_for_display (s),\n \t\t\t\t file_name_style.style ());\n \t  if (uiout->is_mi_like_p () || !uiout->test_flags (ui_source_list))\n- \t    {\n+\t    {\n \t      const char *s_fullname = symtab_to_fullname (s);\n \t      char *local_fullname;\n \n@@ -1333,7 +1333,7 @@ print_source_lines_base (struct symtab *s, int line, int stopline,\n \t      strcpy (local_fullname, s_fullname);\n \n \t      uiout->field_string (\"fullname\", local_fullname);\n- \t    }\n+\t    }\n \n \t  uiout->text (\"\\n\");\n \t}"
    },
    {
      "sha": "72cb351d2f8ff380bd04cd46bf279d31e4e7e286",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -3001,7 +3001,7 @@ read_struct_fields (struct stab_field_info *fip, const char **pp,\n    the type for the base class, and a terminating semicolon.\n \n    A typical example, with two base classes, would be \"!2,020,19;0264,21;\".\n-   \t\t\t\t\t\t       ^^ ^ ^ ^  ^ ^  ^\n+\t\t\t\t\t\t       ^^ ^ ^ ^  ^ ^  ^\n \tBaseclass information marker __________________|| | | |  | |  |\n \tNumber of baseclasses __________________________| | | |  | |  |\n \tVisibility specifiers (2) ________________________| | |  | |  |"
    },
    {
      "sha": "aa20018ad9f0646471e1964e4d0cf60a9207cbd7",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2769,7 +2769,7 @@ return_command (const char *retval_exp, int from_tty)\n       if (thisfun != NULL)\n \treturn_type = TYPE_TARGET_TYPE (SYMBOL_TYPE (thisfun));\n       if (return_type == NULL)\n-      \t{\n+\t{\n \t  if (retval_expr->first_opcode () != UNOP_CAST\n \t      && retval_expr->first_opcode () != UNOP_CAST_TYPE)\n \t    error (_(\"Return value type not available for selected \""
    },
    {
      "sha": "03a865eeded343be4d1f46b30cfba2575db95a4f",
      "filename": "gdb/stubs/sh-stub.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stubs/sh-stub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stubs/sh-stub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/sh-stub.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -418,10 +418,10 @@ getpacket (void)\n \n       if (ch == '#')\n \t{\n- \t  ch = getDebugChar ();\n- \t  xmitcsum = hex (ch) << 4;\n- \t  ch = getDebugChar ();\n- \t  xmitcsum += hex (ch);\n+\t  ch = getDebugChar ();\n+\t  xmitcsum = hex (ch) << 4;\n+\t  ch = getDebugChar ();\n+\t  xmitcsum += hex (ch);\n \n \t  if (checksum != xmitcsum)\n \t    {\n@@ -437,7 +437,7 @@ getpacket (void)\n \t\t  putDebugChar (buffer[0]);\n \t\t  putDebugChar (buffer[1]);\n \n- \t\t  return &buffer[3];\n+\t\t  return &buffer[3];\n \t\t}\n \n \t      return &buffer[0];"
    },
    {
      "sha": "acb7743184de10638b1a906b3f22577a772ee2a5",
      "filename": "gdb/stubs/sparc-stub.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stubs/sparc-stub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/stubs/sparc-stub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/sparc-stub.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -204,7 +204,7 @@ asm(\"\n recursive_trap:\n \tst\t%l5, [%lo(in_trap_handler) + %l4]\n \tsub\t%sp,(16+1+6+1+72)*4,%sp\t! Make room for input & locals\n- \t\t\t\t\t! + hidden arg + arg spill\n+\t\t\t\t\t! + hidden arg + arg spill\n \t\t\t\t\t! + doubleword alignment\n \t\t\t\t\t! + registers[72] local var\n "
    },
    {
      "sha": "5ae3093095cc69866c200e7e011a5f14271beec2",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -415,7 +415,7 @@ relative_addr_info_to_section_offsets (section_offsets &section_offsets,\n \n       osp = &addrs[i];\n       if (osp->sectindex == -1)\n-  \tcontinue;\n+\tcontinue;\n \n       /* Record all sections in offsets.  */\n       /* The section_offsets in the objfile are here filled in using"
    },
    {
      "sha": "5ad1c8a817db62ea0421770d852f66ebee3928f4",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -1609,7 +1609,7 @@ maintenance_print_symbol_cache_statistics (const char *args, int from_tty)\n       /* If the cache hasn't been created yet, avoid creating one.  */\n       cache = symbol_cache_key.get (pspace);\n       if (cache == NULL)\n- \tprintf_filtered (\"  empty, no stats available\\n\");\n+\tprintf_filtered (\"  empty, no stats available\\n\");\n       else\n \tsymbol_cache_stats (cache);\n     }"
    },
    {
      "sha": "83a32ec8252d0156fdb911ed2922b9a2ce95bcb4",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2388,7 +2388,7 @@ tfind_line_command (const char *args, int from_tty)\n   if (sal.line > 0 && find_line_pc_range (sal, &start_pc, &end_pc))\n     {\n       if (start_pc == end_pc)\n-  \t{\n+\t{\n \t  printf_filtered (\"Line %d of \\\"%s\\\"\",\n \t\t\t   sal.line,\n \t\t\t   symtab_to_filename_for_display (sal.symtab));\n@@ -2403,9 +2403,9 @@ tfind_line_command (const char *args, int from_tty)\n \t      && start_pc != end_pc)\n \t    printf_filtered (\"Attempting to find line %d instead.\\n\",\n \t\t\t     sal.line);\n-  \t  else\n+\t  else\n \t    error (_(\"Cannot find a good line.\"));\n-  \t}\n+\t}\n       }\n     else\n       {"
    },
    {
      "sha": "05d95ea7d6ad8b862a625d17af4029a12fb357aa",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -2600,7 +2600,7 @@ windows_nat_target::create_inferior (const char *exec_file,\n     {\n       sh = get_shell ();\n       if (cygwin_conv_path (CCP_POSIX_TO_WIN_W, sh, shell, __PMAX) < 0)\n-      \terror (_(\"Error starting executable via shell: %d\"), errno);\n+\terror (_(\"Error starting executable via shell: %d\"), errno);\n #ifdef __USEWIDE\n       len = sizeof (L\" -c 'exec  '\") + mbstowcs (NULL, exec_file, 0)\n \t    + mbstowcs (NULL, allargs, 0) + 2;"
    },
    {
      "sha": "246921253d2b0ba75d54095347bb3fc5857eceb5",
      "filename": "gdb/xtensa-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24b21115f522cd0fbe55986cd914a593576294ef/gdb/xtensa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24b21115f522cd0fbe55986cd914a593576294ef/gdb/xtensa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xtensa-tdep.c?ref=24b21115f522cd0fbe55986cd914a593576294ef",
      "patch": "@@ -768,7 +768,7 @@ xtensa_coprocessor_register_group (struct reggroup *group)\n static int\n xtensa_register_reggroup_p (struct gdbarch *gdbarch,\n \t\t\t    int regnum,\n-    \t\t\t    struct reggroup *group)\n+\t\t\t    struct reggroup *group)\n {\n   xtensa_register_t* reg = &gdbarch_tdep (gdbarch)->regmap[regnum];\n   xtensa_register_type_t type = reg->type;\n@@ -2852,7 +2852,7 @@ execute_code (struct gdbarch *gdbarch, CORE_ADDR current_pc, CORE_ADDR wb)\n \t\t  xtensa_write_register (arreg, a7_saved);\n \t\t}\n \t      return xtWindowUnderflow;\n- \t    default: /* Simply skip this insns.  */\n+\t    default: /* Simply skip this insns.  */\n \t      continue;\n \t    }\n \n@@ -2965,7 +2965,7 @@ Unable to decode Xtensa Window Interrupt Handler's code.\"));\n \n    int main()\n    {\tint local_var = 1;\n-   \t....\n+\t....\n    }\n \n    because, for this source code, both Xtensa compilers will generate two"
    }
  ]
}