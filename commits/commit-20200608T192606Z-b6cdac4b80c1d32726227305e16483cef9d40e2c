{
  "sha": "b6cdac4b80c1d32726227305e16483cef9d40e2c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjZjZGFjNGI4MGMxZDMyNzI2MjI3MzA1ZTE2NDgzY2VmOWQ0MGUyYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-08T19:26:06Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-08T19:26:06Z"
    },
    "message": "gdb: remove FIELD_TYPE macro\n\nRemove the `FIELD_TYPE` macro, changing all the call sites to use\n`field::type` directly.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (FIELD_TYPE): Remove.  Change all call sites\n\tto use field::type instead.\n\nChange-Id: I7673fedaa276e485189c87991a9043495da22ef5",
    "tree": {
      "sha": "e0c9024b3fdc965e0543515761772f6e154e04cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e0c9024b3fdc965e0543515761772f6e154e04cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b6cdac4b80c1d32726227305e16483cef9d40e2c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6cdac4b80c1d32726227305e16483cef9d40e2c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b6cdac4b80c1d32726227305e16483cef9d40e2c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6cdac4b80c1d32726227305e16483cef9d40e2c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5d14b6e5d6525ce462c30501644922a10f8682eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d14b6e5d6525ce462c30501644922a10f8682eb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5d14b6e5d6525ce462c30501644922a10f8682eb"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 21,
    "deletions": 18
  },
  "files": [
    {
      "sha": "c658014d0754f015f764800b68ba6a087c5ec2fe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-08  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (FIELD_TYPE): Remove.  Change all call sites\n+\tto use field::type instead.\n+\n 2020-06-08  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct field) <type, set_type>: New methods."
    },
    {
      "sha": "f44e4eee84fe0cbb36bc7076ff56ff5faacc7285",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -9605,7 +9605,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \n       /* We need a way to find the correct discriminant given a\n \t variant name.  For convenience we build a map here.  */\n-      struct type *enum_type = FIELD_TYPE (*disr_field);\n+      struct type *enum_type = disr_field->type ();\n       std::unordered_map<std::string, ULONGEST> discriminant_map;\n       for (int i = 0; i < enum_type->num_fields (); ++i)\n \t{\n@@ -14867,8 +14867,7 @@ create_one_variant_part (variant_part &result,\n     {\n       result.discriminant_index = iter->second;\n       result.is_unsigned\n-\t= TYPE_UNSIGNED (FIELD_TYPE\n-\t\t\t (fi->fields[result.discriminant_index].field));\n+\t= TYPE_UNSIGNED (fi->fields[result.discriminant_index].field.type ());\n     }\n \n   size_t n = builder.variants.size ();"
    },
    {
      "sha": "a94fe8dd84a9c142ac610dc8b45770c274f77e7a",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -1802,7 +1802,7 @@ lookup_struct_elt_type (struct type *type, const char *name, int noerr)\n {\n   struct_elt elt = lookup_struct_elt (type, name, noerr);\n   if (elt.field != NULL)\n-    return FIELD_TYPE (*elt.field);\n+    return elt.field->type ();\n   else\n     return NULL;\n }\n@@ -4085,7 +4085,7 @@ check_types_equal (struct type *type1, struct type *type2,\n \t\t\t      FIELD_LOC_KIND (*field1));\n \t    }\n \n-\t  worklist->emplace_back (FIELD_TYPE (*field1), FIELD_TYPE (*field2));\n+\t  worklist->emplace_back (field1->type (), field2->type ());\n \t}\n     }\n \n@@ -5673,7 +5673,7 @@ append_composite_type_field_aligned (struct type *t, const char *name,\n \t{\n \t  SET_FIELD_BITPOS (f[0],\n \t\t\t    (FIELD_BITPOS (f[-1])\n-\t\t\t     + (TYPE_LENGTH (FIELD_TYPE (f[-1]))\n+\t\t\t     + (TYPE_LENGTH (f[-1].type ())\n \t\t\t\t* TARGET_CHAR_BIT)));\n \n \t  if (alignment)"
    },
    {
      "sha": "d1132d333280441e6ece2471ea25f205afbfda71",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -1610,7 +1610,6 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n   (TYPE_CPLUS_SPECIFIC(thistype)->virtual_field_bits == NULL ? 0 \\\n     : B_TST(TYPE_CPLUS_SPECIFIC(thistype)->virtual_field_bits, (index)))\n \n-#define FIELD_TYPE(thisfld) ((thisfld).type ())\n #define FIELD_NAME(thisfld) ((thisfld).name)\n #define FIELD_LOC_KIND(thisfld) ((thisfld).loc_kind)\n #define FIELD_BITPOS_LVAL(thisfld) ((thisfld).loc.bitpos)\n@@ -1638,7 +1637,7 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define FIELD_ARTIFICIAL(thisfld) ((thisfld).artificial)\n #define FIELD_BITSIZE(thisfld) ((thisfld).bitsize)\n \n-#define TYPE_FIELD_TYPE(thistype, n) FIELD_TYPE((thistype)->field (n))\n+#define TYPE_FIELD_TYPE(thistype, n) ((thistype)->field (n).type ())\n #define TYPE_FIELD_NAME(thistype, n) FIELD_NAME((thistype)->field (n))\n #define TYPE_FIELD_LOC_KIND(thistype, n) FIELD_LOC_KIND ((thistype)->field (n))\n #define TYPE_FIELD_BITPOS(thistype, n) FIELD_BITPOS ((thistype)->field (n))"
    },
    {
      "sha": "8aa3e68f123906c2c595fc34aab69cf41814d396",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -137,28 +137,28 @@ build_gdb_vtable_type (struct gdbarch *arch)\n   FIELD_NAME (*field) = \"vcall_and_vbase_offsets\";\n   field->set_type (lookup_array_range_type (ptrdiff_type, 0, -1));\n   SET_FIELD_BITPOS (*field, offset * TARGET_CHAR_BIT);\n-  offset += TYPE_LENGTH (FIELD_TYPE (*field));\n+  offset += TYPE_LENGTH (field->type ());\n   field++;\n \n   /* ptrdiff_t offset_to_top; */\n   FIELD_NAME (*field) = \"offset_to_top\";\n   field->set_type (ptrdiff_type);\n   SET_FIELD_BITPOS (*field, offset * TARGET_CHAR_BIT);\n-  offset += TYPE_LENGTH (FIELD_TYPE (*field));\n+  offset += TYPE_LENGTH (field->type ());\n   field++;\n \n   /* void *type_info; */\n   FIELD_NAME (*field) = \"type_info\";\n   field->set_type (void_ptr_type);\n   SET_FIELD_BITPOS (*field, offset * TARGET_CHAR_BIT);\n-  offset += TYPE_LENGTH (FIELD_TYPE (*field));\n+  offset += TYPE_LENGTH (field->type ());\n   field++;\n \n   /* void (*virtual_functions[0]) (); */\n   FIELD_NAME (*field) = \"virtual_functions\";\n   field->set_type (lookup_array_range_type (ptr_to_void_fn_type, 0, -1));\n   SET_FIELD_BITPOS (*field, offset * TARGET_CHAR_BIT);\n-  offset += TYPE_LENGTH (FIELD_TYPE (*field));\n+  offset += TYPE_LENGTH (field->type ());\n   field++;\n \n   /* We assumed in the allocation above that there were four fields.  */\n@@ -1041,14 +1041,14 @@ build_std_type_info_type (struct gdbarch *arch)\n   FIELD_NAME (*field) = \"_vptr.type_info\";\n   field->set_type (void_ptr_type);\n   SET_FIELD_BITPOS (*field, offset * TARGET_CHAR_BIT);\n-  offset += TYPE_LENGTH (FIELD_TYPE (*field));\n+  offset += TYPE_LENGTH (field->type ());\n   field++;\n \n   /* The name.  */\n   FIELD_NAME (*field) = \"__name\";\n   field->set_type (char_ptr_type);\n   SET_FIELD_BITPOS (*field, offset * TARGET_CHAR_BIT);\n-  offset += TYPE_LENGTH (FIELD_TYPE (*field));\n+  offset += TYPE_LENGTH (field->type ());\n   field++;\n \n   gdb_assert (field == (field_list + 2));"
    },
    {
      "sha": "a36f0ba71cf4d829de37be90a7a1e12d01784b36",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -1147,8 +1147,8 @@ gdbscm_field_type (SCM self)\n   struct field *field = tyscm_field_smob_to_field (f_smob);\n \n   /* A field can have a NULL type in some situations.  */\n-  if (FIELD_TYPE (*field))\n-    return tyscm_scm_from_type (FIELD_TYPE (*field));\n+  if (field->type ())\n+    return tyscm_scm_from_type (field->type ());\n   return SCM_BOOL_F;\n }\n "
    },
    {
      "sha": "0ee7a37256301ecf5b3a92da907984d82b00675f",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -1652,7 +1652,7 @@ s390_effective_inner_type (struct type *type, unsigned int min_size)\n \t    continue;\n \t  if (inner != NULL)\n \t    return type;\n-\t  inner = FIELD_TYPE (f);\n+\t  inner = f.type ();\n \t}\n \n       if (inner == NULL)"
    },
    {
      "sha": "bb8ab8300a9adfe9dff9ab1226f6a63269e0460c",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6cdac4b80c1d32726227305e16483cef9d40e2c/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=b6cdac4b80c1d32726227305e16483cef9d40e2c",
      "patch": "@@ -2917,7 +2917,7 @@ read_one_struct_field (struct stab_field_info *fip, const char **pp,\n          Note that forward refs cannot be packed,\n          and treat enums as if they had the width of ints.  */\n \n-      struct type *field_type = check_typedef (FIELD_TYPE (fip->list->field));\n+      struct type *field_type = check_typedef (fip->list->field.type ());\n \n       if (field_type->code () != TYPE_CODE_INT\n \t  && field_type->code () != TYPE_CODE_RANGE"
    }
  ]
}