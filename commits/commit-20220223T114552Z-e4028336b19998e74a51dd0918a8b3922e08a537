{
  "sha": "e4028336b19998e74a51dd0918a8b3922e08a537",
  "node_id": "C_kwDOANOeidoAKGU0MDI4MzM2YjE5OTk4ZTc0YTUxZGQwOTE4YThiMzkyMmUwOGE1Mzc",
  "commit": {
    "author": {
      "name": "Patrick O'Neill",
      "email": "patrick@rivosinc.com",
      "date": "2022-01-21T17:22:46Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2022-02-23T11:45:52Z"
    },
    "message": "RISC-V: PR28733, add missing extension info to 'unrecognized opcode' error\n\nCurrently we report errors as \"unrecognized opcode `fence.i'\" when the\nopcode isn't part of the selected extensions.\nThis patch expands that error message to include the missing extension\ninformation. For example, now the error message would be \"unrecognized\nopcode `fence.i', extension `zifencei' required\".\nIf the opcode is not a part of any extension, the error message reverts\nto \"unrecognized opcode `<op statement>'\".\n\nSigned-off-by: Patrick O'Neill <patrick@rivosinc.com>\n\nbfd/\n\tpr 28733\n\t* elfxx-riscv.c (riscv_multi_subset_supports_ext): New function,\n\tused to return the extension string for each INSN_CLASS_*.\n\t* elfxx-riscv.h: Added extern riscv_multi_subset_supports_ext.\ngas/\n\tpr 28733\n\t* config/tc-riscv.c (struct riscv_ip_error): New structure,\n\tcontains information about errors that occur within the riscv_ip.\n\t(riscv_ip): Use struct riscv_ip_error to report more detailed errors.\n\t* testsuite/gas/riscv/c-fld-fsd-fail.l: Updated.\n\t* testsuite/gas/riscv/march-imply-i2p1-01.: Likewise.",
    "tree": {
      "sha": "4c350a0187b397546a7a109acb0e1163e563e2b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4c350a0187b397546a7a109acb0e1163e563e2b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4028336b19998e74a51dd0918a8b3922e08a537",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4028336b19998e74a51dd0918a8b3922e08a537",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4028336b19998e74a51dd0918a8b3922e08a537",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4028336b19998e74a51dd0918a8b3922e08a537/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "df0a549ebdae74ef9d233243b869d424e6a33c73",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df0a549ebdae74ef9d233243b869d424e6a33c73",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df0a549ebdae74ef9d233243b869d424e6a33c73"
    }
  ],
  "stats": {
    "total": 202,
    "additions": 166,
    "deletions": 36
  },
  "files": [
    {
      "sha": "d74e7a584eb6175440429d8e98aec37f055853e2",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 94,
      "deletions": 0,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4028336b19998e74a51dd0918a8b3922e08a537/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4028336b19998e74a51dd0918a8b3922e08a537/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=e4028336b19998e74a51dd0918a8b3922e08a537",
      "patch": "@@ -2402,3 +2402,97 @@ riscv_multi_subset_supports (riscv_parse_subset_t *rps,\n       return false;\n     }\n }\n+\n+/* Each instuction is belonged to an instruction class INSN_CLASS_*.\n+   Call riscv_subset_supports_ext to determine the missing extension.  */\n+\n+const char *\n+riscv_multi_subset_supports_ext (riscv_parse_subset_t *rps,\n+\t\t\t\t enum riscv_insn_class insn_class)\n+{\n+  switch (insn_class)\n+    {\n+    case INSN_CLASS_I:\n+      return \"i\";\n+    case INSN_CLASS_ZICSR:\n+      return \"zicsr\";\n+    case INSN_CLASS_ZIFENCEI:\n+      return \"zifencei\";\n+    case INSN_CLASS_ZIHINTPAUSE:\n+      return \"zihintpause\";\n+    case INSN_CLASS_M:\n+      return \"m\";\n+    case INSN_CLASS_A:\n+      return \"a\";\n+    case INSN_CLASS_F:\n+      return \"f\";\n+    case INSN_CLASS_D:\n+      return \"d\";\n+    case INSN_CLASS_Q:\n+      return \"q\";\n+    case INSN_CLASS_C:\n+      return \"c\";\n+    case INSN_CLASS_F_AND_C:\n+      if (!riscv_subset_supports (rps, \"f\")\n+\t  && !riscv_subset_supports (rps, \"c\"))\n+\treturn \"f' and `c\";\n+      else if (!riscv_subset_supports (rps, \"f\"))\n+\treturn \"f\";\n+      else\n+\treturn \"c\";\n+    case INSN_CLASS_D_AND_C:\n+      if (!riscv_subset_supports (rps, \"d\")\n+\t  && !riscv_subset_supports (rps, \"c\"))\n+\treturn \"d' and `c\";\n+      else if (!riscv_subset_supports (rps, \"d\"))\n+\treturn \"d\";\n+      else\n+\treturn \"c\";\n+    case INSN_CLASS_F_OR_ZFINX:\n+      return \"f' or `zfinx\";\n+    case INSN_CLASS_D_OR_ZDINX:\n+      return \"d' or `zdinx\";\n+    case INSN_CLASS_Q_OR_ZQINX:\n+      return \"q' or `zqinx\";\n+    case INSN_CLASS_ZBA:\n+      return \"zba\";\n+    case INSN_CLASS_ZBB:\n+      return \"zbb\";\n+    case INSN_CLASS_ZBC:\n+      return \"zbc\";\n+    case INSN_CLASS_ZBS:\n+      return \"zbs\";\n+    case INSN_CLASS_ZBKB:\n+      return \"zbkb\";\n+    case INSN_CLASS_ZBKC:\n+      return \"zbkc\";\n+    case INSN_CLASS_ZBKX:\n+      return \"zbkx\";\n+    case INSN_CLASS_ZBB_OR_ZBKB:\n+      return \"zbb' or `zbkb\";\n+    case INSN_CLASS_ZBC_OR_ZBKC:\n+      return \"zbc' or `zbkc\";\n+    case INSN_CLASS_ZKND:\n+      return \"zknd\";\n+    case INSN_CLASS_ZKNE:\n+      return \"zkne\";\n+    case INSN_CLASS_ZKNH:\n+      return \"zknh\";\n+    case INSN_CLASS_ZKND_OR_ZKNE:\n+      return \"zknd' or `zkne\";\n+    case INSN_CLASS_ZKSED:\n+      return \"zksed\";\n+    case INSN_CLASS_ZKSH:\n+      return \"zksh\";\n+    case INSN_CLASS_V:\n+      return \"v' or `zve64x' or `zve32x\";\n+    case INSN_CLASS_ZVEF:\n+      return \"v' or `zve64d' or `zve64f' or `zve32f\";\n+    case INSN_CLASS_SVINVAL:\n+      return \"svinval\";\n+    default:\n+      rps->error_handler\n+        (_(\"internal: unreachable INSN_CLASS_*\"));\n+      return NULL;\n+    }\n+}"
    },
    {
      "sha": "ea7126bdb4dd3c4f8482ce8abb06dc41b5ecd779",
      "filename": "bfd/elfxx-riscv.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4028336b19998e74a51dd0918a8b3922e08a537/bfd/elfxx-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4028336b19998e74a51dd0918a8b3922e08a537/bfd/elfxx-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.h?ref=e4028336b19998e74a51dd0918a8b3922e08a537",
      "patch": "@@ -104,6 +104,9 @@ riscv_subset_supports (riscv_parse_subset_t *, const char *);\n extern bool\n riscv_multi_subset_supports (riscv_parse_subset_t *, enum riscv_insn_class);\n \n+extern const char *\n+riscv_multi_subset_supports_ext (riscv_parse_subset_t *, enum riscv_insn_class);\n+\n extern void\n bfd_elf32_riscv_set_data_segment_info (struct bfd_link_info *, int *);\n extern void"
    },
    {
      "sha": "322e0f070baab8c1e8a1cfe942b4152b9158f49c",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 47,
      "deletions": 14,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4028336b19998e74a51dd0918a8b3922e08a537/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4028336b19998e74a51dd0918a8b3922e08a537/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=e4028336b19998e74a51dd0918a8b3922e08a537",
      "patch": "@@ -89,6 +89,20 @@ struct riscv_csr_extra\n   struct riscv_csr_extra *next;\n };\n \n+/* This structure contains information about errors that occur within the\n+   riscv_ip function */\n+struct riscv_ip_error\n+{\n+  /* General error message */\n+  const char* msg;\n+\n+  /* Statement that caused the error */\n+  char* statement;\n+\n+  /* Missing extension that needs to be enabled */\n+  const char* missing_ext;\n+};\n+\n #ifndef DEFAULT_ARCH\n #define DEFAULT_ARCH \"riscv64\"\n #endif\n@@ -2221,7 +2235,7 @@ riscv_is_priv_insn (insn_t insn)\n    side effect, it sets the global variable imm_reloc to the type of\n    relocation to do if one of the operands is an address expression.  */\n \n-static const char *\n+static struct riscv_ip_error\n riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t  bfd_reloc_code_real_type *imm_reloc, htab_t hash)\n {\n@@ -2234,7 +2248,10 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n   unsigned int regno;\n   int argnum;\n   const struct percent_op_match *p;\n-  const char *error = \"unrecognized opcode\";\n+  struct riscv_ip_error error;\n+  error.msg = \"unrecognized opcode\";\n+  error.statement = str;\n+  error.missing_ext = NULL;\n   /* Indicate we are assembling instruction with CSR.  */\n   bool insn_with_csr = false;\n \n@@ -2257,10 +2274,15 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \tcontinue;\n \n       if (!riscv_multi_subset_supports (&riscv_rps_as, insn->insn_class))\n-\tcontinue;\n+\t{\n+\t  error.missing_ext = riscv_multi_subset_supports_ext (&riscv_rps_as,\n+\t\t\t\t\t\t\t       insn->insn_class);\n+\t  continue;\n+\t}\n \n       /* Reset error message of the previous round.  */\n-      error = _(\"illegal operands\");\n+      error.msg = _(\"illegal operands\");\n+      error.missing_ext = NULL;\n       create_insn (ip, insn);\n       argnum = 1;\n \n@@ -2310,14 +2332,14 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t      && riscv_subset_supports (&riscv_rps_as, \"zve32x\")\n \t\t      && !riscv_subset_supports (&riscv_rps_as, \"zve64x\"))\n \t\t    {\n-\t\t      error = _(\"illegal opcode for zve32x\");\n+\t\t      error.msg = _(\"illegal opcode for zve32x\");\n \t\t      break;\n \t\t    }\n \t\t}\n \t      if (*asarg != '\\0')\n \t\tbreak;\n \t      /* Successful assembly.  */\n-\t      error = NULL;\n+\t      error.msg = NULL;\n \t      insn_with_csr = false;\n \t      goto out;\n \n@@ -3253,11 +3275,16 @@ md_assemble (char *str)\n \n   riscv_mapping_state (MAP_INSN, 0);\n \n-  const char *error = riscv_ip (str, &insn, &imm_expr, &imm_reloc, op_hash);\n+  const struct riscv_ip_error error = riscv_ip (str, &insn, &imm_expr,\n+\t\t\t\t\t\t&imm_reloc, op_hash);\n \n-  if (error)\n+  if (error.msg)\n     {\n-      as_bad (\"%s `%s'\", error, str);\n+      if (error.missing_ext)\n+\tas_bad (\"%s `%s', extension `%s' required\", error.msg,\n+\t\terror.statement, error.missing_ext);\n+      else\n+\tas_bad (\"%s `%s'\", error.msg, error.statement);\n       return;\n     }\n \n@@ -4266,17 +4293,23 @@ s_riscv_insn (int x ATTRIBUTE_UNUSED)\n \n   riscv_mapping_state (MAP_INSN, 0);\n \n-  const char *error = riscv_ip (str, &insn, &imm_expr,\n+  struct riscv_ip_error error = riscv_ip (str, &insn, &imm_expr,\n \t\t\t\t&imm_reloc, insn_type_hash);\n-  if (error)\n+  if (error.msg)\n     {\n       char *save_in = input_line_pointer;\n-      error = riscv_ip_hardcode (str, &insn, &imm_expr, error);\n+      error.msg = riscv_ip_hardcode (str, &insn, &imm_expr, error.msg);\n       input_line_pointer = save_in;\n     }\n \n-  if (error)\n-    as_bad (\"%s `%s'\", error, str);\n+  if (error.msg)\n+    {\n+      if (error.missing_ext)\n+\tas_bad (\"%s `%s', extension `%s' required\", error.msg, error.statement,\n+\t\terror.missing_ext);\n+      else\n+\tas_bad (\"%s `%s'\", error.msg, error.statement);\n+    }\n   else\n     {\n       gas_assert (insn.insn_mo->pinfo != INSN_MACRO);"
    },
    {
      "sha": "b701fac14c0bf993599a12d8a5f59d9ff3a42adf",
      "filename": "gas/testsuite/gas/riscv/c-fld-fsd-fail.l",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4028336b19998e74a51dd0918a8b3922e08a537/gas/testsuite/gas/riscv/c-fld-fsd-fail.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4028336b19998e74a51dd0918a8b3922e08a537/gas/testsuite/gas/riscv/c-fld-fsd-fail.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/c-fld-fsd-fail.l?ref=e4028336b19998e74a51dd0918a8b3922e08a537",
      "patch": "@@ -1,3 +1,3 @@\n .*: Assembler messages:\n-.*: Error: unrecognized opcode `fld fa0,0\\(a0\\)'\n-.*: Error: unrecognized opcode `fsd fa0,0\\(a0\\)'\n+.*: Error: unrecognized opcode `fld fa0,0\\(a0\\)', extension `d' required\n+.*: Error: unrecognized opcode `fsd fa0,0\\(a0\\)', extension `d' required"
    },
    {
      "sha": "7fbee14fe8341403bd47f253c8f8b57be8c91073",
      "filename": "gas/testsuite/gas/riscv/march-imply-i2p1-01.l",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4028336b19998e74a51dd0918a8b3922e08a537/gas/testsuite/gas/riscv/march-imply-i2p1-01.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4028336b19998e74a51dd0918a8b3922e08a537/gas/testsuite/gas/riscv/march-imply-i2p1-01.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-imply-i2p1-01.l?ref=e4028336b19998e74a51dd0918a8b3922e08a537",
      "patch": "@@ -1,21 +1,21 @@\n .*Assembler messages:\n-.*Error: unrecognized opcode `csrr t0,ustatus'\n-.*Error: unrecognized opcode `csrwi ustatus,0x0'\n-.*Error: unrecognized opcode `csrsi ustatus,0x0'\n-.*Error: unrecognized opcode `csrci ustatus,0x0'\n-.*Error: unrecognized opcode `csrw ustatus,t0'\n-.*Error: unrecognized opcode `csrw ustatus,0x0'\n-.*Error: unrecognized opcode `csrs ustatus,t0'\n-.*Error: unrecognized opcode `csrs ustatus,0x0'\n-.*Error: unrecognized opcode `csrc ustatus,t0'\n-.*Error: unrecognized opcode `csrc ustatus,0x0'\n-.*Error: unrecognized opcode `csrrwi t0,ustatus,0x0'\n-.*Error: unrecognized opcode `csrrsi t0,ustatus,0x0'\n-.*Error: unrecognized opcode `csrrci t0,ustatus,0x0'\n-.*Error: unrecognized opcode `csrrw t0,ustatus,t0'\n-.*Error: unrecognized opcode `csrrw t0,ustatus,0x0'\n-.*Error: unrecognized opcode `csrrs t0,ustatus,t0'\n-.*Error: unrecognized opcode `csrrs t0,ustatus,0x0'\n-.*Error: unrecognized opcode `csrrc t0,ustatus,t0'\n-.*Error: unrecognized opcode `csrrc t0,ustatus,0x0'\n-.*Error: unrecognized opcode `fence.i'\n+.*Error: unrecognized opcode `csrr t0,ustatus', extension `zicsr' required\n+.*Error: unrecognized opcode `csrwi ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrsi ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrci ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrw ustatus,t0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrw ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrs ustatus,t0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrs ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrc ustatus,t0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrc ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrwi t0,ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrsi t0,ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrci t0,ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrw t0,ustatus,t0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrw t0,ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrs t0,ustatus,t0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrs t0,ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrc t0,ustatus,t0', extension `zicsr' required\n+.*Error: unrecognized opcode `csrrc t0,ustatus,0x0', extension `zicsr' required\n+.*Error: unrecognized opcode `fence.i', extension `zifencei' required"
    }
  ]
}