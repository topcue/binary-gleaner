{
  "sha": "5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWUzM2Q1ZjRlMWE1ZjJjMzU1NmVlMzE3MTVkZGMwMzBkMDM5YjU5Nw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-22T20:55:14Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-22T20:55:14Z"
    },
    "message": "gdb: add type::num_fields / type::set_num_fields\n\nAdd the `num_fields` and `set_num_fields` methods on `struct type`, in\norder to remove the `TYPE_NFIELDS` macro.  In this patch, the\n`TYPE_NFIELDS` macro is changed to use `type::num_fields`, so all the\ncall sites that are used to set the number of fields are changed to use\n`type::set_num_fields`.  The next patch will remove `TYPE_NFIELDS`\ncompletely.\n\nI think that in the future, we should consider making the interface of\n`struct type` better.  For example, right now it's possible for the\nnumber of fields property and the actual number of fields set to be out\nof sync.  However, I want to keep the existing behavior in this patch,\njust translate from macros to methods.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <num_fields, set_num_fields>: New\n\tmethods.\n\t(TYPE_NFIELDS): Use type::num_fields.  Change all call sites\n\tthat modify the number of fields to use type::set_num_fields\n\tinstead.\n\nChange-Id: I5ad9de5be4097feaf942d111077434bf91d13dc5",
    "tree": {
      "sha": "e58db956a72805d8a2a800cf0b913fd5808933ed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e58db956a72805d8a2a800cf0b913fd5808933ed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9392ebb3bbe4a43726ee8939c5447d88c7d3c1e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9392ebb3bbe4a43726ee8939c5447d88c7d3c1e4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9392ebb3bbe4a43726ee8939c5447d88c7d3c1e4"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 62,
    "deletions": 43
  },
  "files": [
    {
      "sha": "9656bf907d908c214860a5f4c35f5afec57d61e7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-22  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <num_fields, set_num_fields>: New\n+\tmethods.\n+\t(TYPE_NFIELDS): Use type::num_fields.  Change all call sites\n+\tthat modify the number of fields to use type::set_num_fields\n+\tinstead.\n+\n 2020-05-22  Tom Tromey  <tromey@adacore.com>\n \n \t* compile/compile-object-load.h (munmap_list_free): Don't"
    },
    {
      "sha": "a477f27797e24b03d1454a2e5363399225f8fc0e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -8021,7 +8021,6 @@ empty_record (struct type *templ)\n   struct type *type = alloc_type_copy (templ);\n \n   type->set_code (TYPE_CODE_STRUCT);\n-  TYPE_NFIELDS (type) = 0;\n   TYPE_FIELDS (type) = NULL;\n   INIT_NONE_SPECIFIC (type);\n   type->set_name (\"<empty>\");\n@@ -8078,7 +8077,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n   rtype = alloc_type_copy (type);\n   rtype->set_code (TYPE_CODE_STRUCT);\n   INIT_NONE_SPECIFIC (rtype);\n-  TYPE_NFIELDS (rtype) = nfields;\n+  rtype->set_num_fields (nfields);\n   TYPE_FIELDS (rtype) = (struct field *)\n     TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n   memset (TYPE_FIELDS (rtype), 0, sizeof (struct field) * nfields);\n@@ -8246,7 +8245,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n         {\n           for (f = variant_field + 1; f < TYPE_NFIELDS (rtype); f += 1)\n             TYPE_FIELDS (rtype)[f - 1] = TYPE_FIELDS (rtype)[f];\n-          TYPE_NFIELDS (rtype) -= 1;\n+\t  rtype->set_num_fields (rtype->num_fields () - 1);\n         }\n       else\n         {\n@@ -8353,7 +8352,7 @@ template_to_static_fixed_type (struct type *type0)\n \t      TYPE_TARGET_TYPE (type0) = type = alloc_type_copy (type0);\n \t      type->set_code (type0->code ());\n \t      INIT_NONE_SPECIFIC (type);\n-\t      TYPE_NFIELDS (type) = nfields;\n+\t      type->set_num_fields (nfields);\n \t      TYPE_FIELDS (type) = (struct field *)\n \t\tTYPE_ALLOC (type, nfields * sizeof (struct field));\n \t      memcpy (TYPE_FIELDS (type), TYPE_FIELDS (type0),\n@@ -8402,7 +8401,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n   rtype = alloc_type_copy (type);\n   rtype->set_code (TYPE_CODE_STRUCT);\n   INIT_NONE_SPECIFIC (rtype);\n-  TYPE_NFIELDS (rtype) = nfields;\n+  rtype->set_num_fields (nfields);\n   TYPE_FIELDS (rtype) =\n     (struct field *) TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n   memcpy (TYPE_FIELDS (rtype), TYPE_FIELDS (type),\n@@ -8425,7 +8424,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n \n       for (f = variant_field + 1; f < nfields; f += 1)\n         TYPE_FIELDS (rtype)[f - 1] = TYPE_FIELDS (rtype)[f];\n-      TYPE_NFIELDS (rtype) -= 1;\n+      rtype->set_num_fields (rtype->num_fields () - 1);\n     }\n   else\n     {"
    },
    {
      "sha": "f66607cd736575377bfb24a7554b0961d266b02b",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -271,7 +271,7 @@ buildsym_compunit::finish_block_internal\n \t    }\n \t  if (nparams > 0)\n \t    {\n-\t      TYPE_NFIELDS (ftype) = nparams;\n+\t      ftype->set_num_fields (nparams);\n \t      TYPE_FIELDS (ftype) = (struct field *)\n \t\tTYPE_ALLOC (ftype, nparams * sizeof (struct field));\n "
    },
    {
      "sha": "2732421a35cd5d2ccb59e2c7ff18b98c85198750",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -1455,7 +1455,7 @@ patch_type (struct type *type, struct type *real_type)\n   int field_size = TYPE_NFIELDS (real_target) * sizeof (struct field);\n \n   TYPE_LENGTH (target) = TYPE_LENGTH (real_target);\n-  TYPE_NFIELDS (target) = TYPE_NFIELDS (real_target);\n+  target->set_num_fields (TYPE_NFIELDS (real_target));\n   TYPE_FIELDS (target) = (struct field *) TYPE_ALLOC (target,\n \t\t\t\t\t\t      field_size);\n \n@@ -1883,7 +1883,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  INIT_CPLUS_SPECIFIC (type);\n \t  TYPE_LENGTH (type) = 0;\n \t  TYPE_FIELDS (type) = 0;\n-\t  TYPE_NFIELDS (type) = 0;\n+\t  type->set_num_fields (0);\n \t}\n       else\n \t{\n@@ -1903,7 +1903,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  INIT_CPLUS_SPECIFIC (type);\n \t  TYPE_LENGTH (type) = 0;\n \t  TYPE_FIELDS (type) = 0;\n-\t  TYPE_NFIELDS (type) = 0;\n+\t  type->set_num_fields (0);\n \t}\n       else\n \t{\n@@ -1924,7 +1924,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  type->set_name (NULL);\n \t  TYPE_LENGTH (type) = 0;\n \t  TYPE_FIELDS (type) = 0;\n-\t  TYPE_NFIELDS (type) = 0;\n+\t  type->set_num_fields (0);\n \t}\n       else\n \t{\n@@ -2040,7 +2040,7 @@ coff_read_struct_type (int index, int length, int lastsym,\n     }\n   /* Now create the vector of fields, and record how big it is.  */\n \n-  TYPE_NFIELDS (type) = nfields;\n+  type->set_num_fields (nfields);\n   TYPE_FIELDS (type) = (struct field *)\n     TYPE_ALLOC (type, sizeof (struct field) * nfields);\n \n@@ -2120,7 +2120,7 @@ coff_read_enum_type (int index, int length, int lastsym,\n   else /* Assume ints.  */\n     TYPE_LENGTH (type) = gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT;\n   type->set_code (TYPE_CODE_ENUM);\n-  TYPE_NFIELDS (type) = nsyms;\n+  type->set_num_fields (nsyms);\n   TYPE_FIELDS (type) = (struct field *)\n     TYPE_ALLOC (type, sizeof (struct field) * nsyms);\n "
    },
    {
      "sha": "31f927e3bc9fe86bf5f358b4f0eb1136f717bba8",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -308,7 +308,7 @@ attach_fields_to_type (struct ctf_field_info *fip, struct type *type)\n     return;\n \n   /* Record the field count, allocate space for the array of fields.  */\n-  TYPE_NFIELDS (type) = nfields;\n+  type->set_num_fields (nfields);\n   TYPE_FIELDS (type)\n     = (struct field *) TYPE_ZALLOC (type, sizeof (struct field) * nfields);\n \n@@ -1139,7 +1139,7 @@ add_stt_func (struct ctf_context *ccp, unsigned long idx)\n   ftype = get_tid_type (ccp->of, tid);\n   if (finfo.ctc_flags & CTF_FUNC_VARARG)\n     TYPE_VARARGS (ftype) = 1;\n-  TYPE_NFIELDS (ftype) = argc;\n+  ftype->set_num_fields (argc);\n \n   /* If argc is 0, it has a \"void\" type.  */\n   if (argc != 0)"
    },
    {
      "sha": "975227ea7a271d076175798604d617ddc37d5894",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -9362,7 +9362,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       /* Smash this type to be a structure type.  We have to do this\n \t because the type has already been recorded.  */\n       type->set_code (TYPE_CODE_STRUCT);\n-      TYPE_NFIELDS (type) = 3;\n+      type->set_num_fields (3);\n       /* Save the field we care about.  */\n       struct field saved_field = TYPE_FIELD (type, 0);\n       TYPE_FIELDS (type)\n@@ -9461,7 +9461,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       memcpy (new_fields + 1, TYPE_FIELDS (type),\n \t      TYPE_NFIELDS (type) * sizeof (struct field));\n       TYPE_FIELDS (type) = new_fields;\n-      TYPE_NFIELDS (type) = TYPE_NFIELDS (type) + 1;\n+      type->set_num_fields (TYPE_NFIELDS (type) + 1);\n \n       /* Install the discriminant at index 0 in the union.  */\n       TYPE_FIELD (type, 0) = *disr_field;\n@@ -9509,7 +9509,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t  struct type *sub_type = TYPE_FIELD_TYPE (type, i);\n \t  if (TYPE_NFIELDS (sub_type) > 0)\n \t    {\n-\t      --TYPE_NFIELDS (sub_type);\n+\t      sub_type->set_num_fields (sub_type->num_fields () - 1);\n \t      ++TYPE_FIELDS (sub_type);\n \t    }\n \t  TYPE_FIELD_NAME (type, i) = variant_name;\n@@ -14804,7 +14804,7 @@ dwarf2_attach_fields_to_type (struct field_info *fip, struct type *type,\n \n   /* Record the field count, allocate space for the array of fields,\n      and create blank accessibility bitfields if necessary.  */\n-  TYPE_NFIELDS (type) = nfields;\n+  type->set_num_fields (nfields);\n   TYPE_FIELDS (type) = (struct field *)\n     TYPE_ZALLOC (type, sizeof (struct field) * nfields);\n \n@@ -15933,7 +15933,7 @@ update_enumeration_type_from_children (struct die_info *die,\n \n   if (!fields.empty ())\n     {\n-      TYPE_NFIELDS (type) = fields.size ();\n+      type->set_num_fields (fields.size ());\n       TYPE_FIELDS (type) = (struct field *)\n \tTYPE_ALLOC (type, sizeof (struct field) * fields.size ());\n       memcpy (TYPE_FIELDS (type), fields.data (),\n@@ -17084,7 +17084,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n \t}\n \n       /* Allocate storage for parameters and fill them in.  */\n-      TYPE_NFIELDS (ftype) = nparams;\n+      ftype->set_num_fields (nparams);\n       TYPE_FIELDS (ftype) = (struct field *)\n \tTYPE_ZALLOC (ftype, nparams * sizeof (struct field));\n "
    },
    {
      "sha": "023b629c1aa7bb363e78b5e1d3d33326fa005cf8",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -682,7 +682,7 @@ fake_method::fake_method (type_instance_flags flags,\n      neither an objfile nor a gdbarch.  As a result we must manually\n      allocate memory for auxiliary fields, and free the memory ourselves\n      when we are done with it.  */\n-  TYPE_NFIELDS (type) = num_types;\n+  type->set_num_fields (num_types);\n   TYPE_FIELDS (type) = (struct field *)\n     xzalloc (sizeof (struct field) * num_types);\n "
    },
    {
      "sha": "f42657ab8f9208cedde979b4a8c59c1426c6f52d",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -562,7 +562,7 @@ lookup_function_type_with_arguments (struct type *type,\n \tTYPE_PROTOTYPED (fn) = 1;\n     }\n \n-  TYPE_NFIELDS (fn) = nparams;\n+  fn->set_num_fields (nparams);\n   TYPE_FIELDS (fn)\n     = (struct field *) TYPE_ZALLOC (fn, nparams * sizeof (struct field));\n   for (i = 0; i < nparams; ++i)\n@@ -1281,7 +1281,7 @@ create_array_type_with_stride (struct type *result_type,\n   result_type->set_code (TYPE_CODE_ARRAY);\n   TYPE_TARGET_TYPE (result_type) = element_type;\n \n-  TYPE_NFIELDS (result_type) = 1;\n+  result_type->set_num_fields (1);\n   TYPE_FIELDS (result_type) =\n     (struct field *) TYPE_ZALLOC (result_type, sizeof (struct field));\n   TYPE_INDEX_TYPE (result_type) = range_type;\n@@ -1380,7 +1380,7 @@ create_set_type (struct type *result_type, struct type *domain_type)\n     result_type = alloc_type_copy (domain_type);\n \n   result_type->set_code (TYPE_CODE_SET);\n-  TYPE_NFIELDS (result_type) = 1;\n+  result_type->set_num_fields (1);\n   TYPE_FIELDS (result_type)\n     = (struct field *) TYPE_ZALLOC (result_type, sizeof (struct field));\n \n@@ -1550,7 +1550,7 @@ smash_to_method_type (struct type *type, struct type *self_type,\n   TYPE_TARGET_TYPE (type) = to_type;\n   set_type_self_type (type, self_type);\n   TYPE_FIELDS (type) = args;\n-  TYPE_NFIELDS (type) = nargs;\n+  type->set_num_fields (nargs);\n   if (varargs)\n     TYPE_VARARGS (type) = 1;\n   TYPE_LENGTH (type) = 1;\t/* In practice, this is never needed.  */\n@@ -2402,8 +2402,8 @@ compute_variant_fields (struct type *type,\n   for (const auto &part : parts)\n     compute_variant_fields_inner (type, addr_stack, part, flags);\n \n-  TYPE_NFIELDS (resolved_type) = std::count (flags.begin (), flags.end (),\n-\t\t\t\t\t     true);\n+  resolved_type->set_num_fields\n+    (std::count (flags.begin (), flags.end (), true));\n   TYPE_FIELDS (resolved_type)\n     = (struct field *) TYPE_ALLOC (resolved_type,\n \t\t\t\t   TYPE_NFIELDS (resolved_type)\n@@ -5558,7 +5558,7 @@ arch_flags_type (struct gdbarch *gdbarch, const char *name, int bit)\n \n   type = arch_type (gdbarch, TYPE_CODE_FLAGS, bit, name);\n   TYPE_UNSIGNED (type) = 1;\n-  TYPE_NFIELDS (type) = 0;\n+  type->set_num_fields (0);\n   /* Pre-allocate enough space assuming every field is one bit.  */\n   TYPE_FIELDS (type)\n     = (struct field *) TYPE_ZALLOC (type, bit * sizeof (struct field));\n@@ -5587,7 +5587,7 @@ append_flags_type_field (struct type *type, int start_bitpos, int nr_bits,\n   TYPE_FIELD_TYPE (type, field_nr) = field_type;\n   SET_FIELD_BITPOS (TYPE_FIELD (type, field_nr), start_bitpos);\n   TYPE_FIELD_BITSIZE (type, field_nr) = nr_bits;\n-  ++TYPE_NFIELDS (type);\n+  type->set_num_fields (type->num_fields () + 1);\n }\n \n /* Special version of append_flags_type_field to add a flag field.\n@@ -5630,7 +5630,7 @@ append_composite_type_field_raw (struct type *t, const char *name,\n {\n   struct field *f;\n \n-  TYPE_NFIELDS (t) = TYPE_NFIELDS (t) + 1;\n+  t->set_num_fields (TYPE_NFIELDS (t) + 1);\n   TYPE_FIELDS (t) = XRESIZEVEC (struct field, TYPE_FIELDS (t),\n \t\t\t\tTYPE_NFIELDS (t));\n   f = &(TYPE_FIELDS (t)[TYPE_NFIELDS (t) - 1]);"
    },
    {
      "sha": "da8d5e2a1199b457af540e4d066a2620230dc40f",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -901,6 +901,18 @@ struct type\n     this->main_type->name = name;\n   }\n \n+  /* Get the number of fields of this type.  */\n+  int num_fields () const\n+  {\n+    return this->main_type->nfields;\n+  }\n+\n+  /* Set the number of fields of this type.  */\n+  void set_num_fields (int num_fields)\n+  {\n+    this->main_type->nfields = num_fields;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -1446,7 +1458,7 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_NFIELDS(thistype) TYPE_MAIN_TYPE(thistype)->nfields\n+#define TYPE_NFIELDS(thistype) ((thistype)->num_fields ())\n #define TYPE_FIELDS(thistype) TYPE_MAIN_TYPE(thistype)->flds_bnds.fields\n \n #define TYPE_INDEX_TYPE(type) TYPE_FIELD_TYPE (type, 0)"
    },
    {
      "sha": "b05443193832313f06f385ef5b9fb5f7ce0cb43b",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -165,7 +165,7 @@ build_gdb_vtable_type (struct gdbarch *arch)\n   gdb_assert (field == (field_list + 4));\n \n   t = arch_type (arch, TYPE_CODE_STRUCT, offset * TARGET_CHAR_BIT, NULL);\n-  TYPE_NFIELDS (t) = field - field_list;\n+  t->set_num_fields (field - field_list);\n   TYPE_FIELDS (t) = field_list;\n   t->set_name (\"gdb_gnu_v3_abi_vtable\");\n   INIT_CPLUS_SPECIFIC (t);\n@@ -1054,7 +1054,7 @@ build_std_type_info_type (struct gdbarch *arch)\n   gdb_assert (field == (field_list + 2));\n \n   t = arch_type (arch, TYPE_CODE_STRUCT, offset * TARGET_CHAR_BIT, NULL);\n-  TYPE_NFIELDS (t) = field - field_list;\n+  t->set_num_fields (field - field_list);\n   TYPE_FIELDS (t) = field_list;\n   t->set_name (\"gdb_gnu_v3_type_info\");\n   INIT_CPLUS_SPECIFIC (t);"
    },
    {
      "sha": "1b499ccad34c47e66c7a28070f4d945aa0a92401",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -1017,7 +1017,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \n \tt->set_code (type_code);\n \tTYPE_LENGTH (t) = sh->value;\n-\tTYPE_NFIELDS (t) = nfields;\n+\tt->set_num_fields (nfields);\n \tTYPE_FIELDS (t) = f = ((struct field *)\n \t\t\t       TYPE_ALLOC (t,\n \t\t\t\t\t   nfields * sizeof (struct field)));\n@@ -1186,7 +1186,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t\t{\n \t\t  struct block_iterator iter;\n \n-\t\t  TYPE_NFIELDS (ftype) = nparams;\n+\t\t  ftype->set_num_fields (nparams);\n \t\t  TYPE_FIELDS (ftype) = (struct field *)\n \t\t    TYPE_ALLOC (ftype, nparams * sizeof (struct field));\n \n@@ -1733,7 +1733,7 @@ parse_type (int fd, union aux_ext *ax, unsigned int aux_index, int *bs,\n   /* Deal with range types.  */\n   if (t->bt == btRange)\n     {\n-      TYPE_NFIELDS (tp) = 0;\n+      tp->set_num_fields (0);\n       TYPE_RANGE_DATA (tp) = ((struct range_bounds *)\n \t\t\t  TYPE_ZALLOC (tp, sizeof (struct range_bounds)));\n       TYPE_LOW_BOUND (tp) = AUX_GET_DNLOW (bigend, ax);"
    },
    {
      "sha": "f0bea374ecb20f40ece3cc7b8c41a6c9c96a1eb3",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -984,7 +984,7 @@ rust_composite_type (struct type *original,\n   result->set_code (TYPE_CODE_STRUCT);\n   result->set_name (name);\n \n-  TYPE_NFIELDS (result) = nfields;\n+  result->set_num_fields (nfields);\n   TYPE_FIELDS (result)\n     = (struct field *) TYPE_ZALLOC (result, nfields * sizeof (struct field));\n "
    },
    {
      "sha": "c3da9a239b4b33f9cce7bc5df4ab430e924c33e5",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -1009,7 +1009,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t      TYPE_FIELD_TYPE (ftype, nparams) = ptype;\n \t      TYPE_FIELD_ARTIFICIAL (ftype, nparams++) = 0;\n \t    }\n-\t  TYPE_NFIELDS (ftype) = nparams;\n+\t  ftype->set_num_fields (nparams);\n \t  TYPE_PROTOTYPED (ftype) = 1;\n \t}\n       break;\n@@ -1850,7 +1850,7 @@ read_type (const char **pp, struct objfile *objfile)\n           for (t = arg_types, i = num_args - 1; t; t = t->next, i--)\n             TYPE_FIELD_TYPE (func_type, i) = t->type;\n         }\n-        TYPE_NFIELDS (func_type) = num_args;\n+        func_type->set_num_fields (num_args);\n         TYPE_PROTOTYPED (func_type) = 1;\n \n         type = func_type;\n@@ -3308,7 +3308,7 @@ attach_fields_to_type (struct stab_field_info *fip, struct type *type,\n      non-public fields.  Record the field count, allocate space for the\n      array of fields, and create blank visibility bitfields if necessary.  */\n \n-  TYPE_NFIELDS (type) = nfields;\n+  type->set_num_fields (nfields);\n   TYPE_FIELDS (type) = (struct field *)\n     TYPE_ALLOC (type, sizeof (struct field) * nfields);\n   memset (TYPE_FIELDS (type), 0, sizeof (struct field) * nfields);\n@@ -3654,7 +3654,7 @@ read_enum_type (const char **pp, struct type *type,\n   TYPE_STUB (type) = 0;\n   if (unsigned_enum)\n     TYPE_UNSIGNED (type) = 1;\n-  TYPE_NFIELDS (type) = nsyms;\n+  type->set_num_fields (nsyms);\n   TYPE_FIELDS (type) = (struct field *)\n     TYPE_ALLOC (type, sizeof (struct field) * nsyms);\n   memset (TYPE_FIELDS (type), 0, sizeof (struct field) * nsyms);"
    },
    {
      "sha": "d7c498f2e93bac7c6eff75de6d2712aa1ff70e96",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e33d5f4e1a5f2c3556ee31715ddc030d039b597/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=5e33d5f4e1a5f2c3556ee31715ddc030d039b597",
      "patch": "@@ -751,7 +751,7 @@ create_enum (struct gdbarch *gdbarch, int bit, const char *name,\n   int i;\n \n   type = arch_type (gdbarch, TYPE_CODE_ENUM, bit, name);\n-  TYPE_NFIELDS (type) = count;\n+  type->set_num_fields (count);\n   TYPE_FIELDS (type) = (struct field *)\n     TYPE_ZALLOC (type, sizeof (struct field) * count);\n   TYPE_UNSIGNED (type) = 1;"
    }
  ]
}