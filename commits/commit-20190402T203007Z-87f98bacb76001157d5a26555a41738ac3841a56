{
  "sha": "87f98bacb76001157d5a26555a41738ac3841a56",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODdmOThiYWNiNzYwMDExNTdkNWEyNjU1NWE0MTczOGFjMzg0MWE1Ng==",
  "commit": {
    "author": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-04-02T20:30:07Z"
    },
    "committer": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-04-02T20:30:07Z"
    },
    "message": "RISC-V: Don't check ABI flags if no code section.\n\nThis fixes a glib build failure reported in PR 24389.  Using ld -b binary\ncreates an object file with no elf header flags set which has the wrong ABI\ninfo for riscv64-linux.  But the file also has no code sections, so I added\ncode borrowed from the arm port that only checks the ELF header ABI flags if\nthere is a code section.\n\n\tbfd/\n\tPR 24389\n\t* elfnn-riscv.c (_bfd_riscv_elf_merge_private_bfd_data): Move read of\n\tELF header flags to after check for ELF object file.  Loop through\n\tsections looking for code sections, if none, then skip ABI checks.",
    "tree": {
      "sha": "3529ddd9b4ec1826ab636c55ee0b2552e10330f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3529ddd9b4ec1826ab636c55ee0b2552e10330f2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/87f98bacb76001157d5a26555a41738ac3841a56",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87f98bacb76001157d5a26555a41738ac3841a56",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/87f98bacb76001157d5a26555a41738ac3841a56",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87f98bacb76001157d5a26555a41738ac3841a56/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "4c7c79dd9858438a25fcc37ba419baa00d31978d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c7c79dd9858438a25fcc37ba419baa00d31978d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c7c79dd9858438a25fcc37ba419baa00d31978d"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 39,
    "deletions": 2
  },
  "files": [
    {
      "sha": "ca5a3a1176b3067224185a6df27bf584e09438f7",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87f98bacb76001157d5a26555a41738ac3841a56/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87f98bacb76001157d5a26555a41738ac3841a56/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=87f98bacb76001157d5a26555a41738ac3841a56",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-02  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR 24389\n+\t* elfnn-riscv.c (_bfd_riscv_elf_merge_private_bfd_data): Move read of\n+\tELF header flags to after check for ELF object file.  Loop through\n+\tsections looking for code sections, if none, then skip ABI checks.\n+\n 2019-03-30  Andrew Waterman  <andrew@sifive.com>\n \n \t* elfnn-riscv.c (_bfd_riscv_relax_call): Only check ARCH_SIZE for"
    },
    {
      "sha": "964b6bdcbcc6caef76b14584d74d77ef4e15bd96",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 32,
      "deletions": 2,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87f98bacb76001157d5a26555a41738ac3841a56/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87f98bacb76001157d5a26555a41738ac3841a56/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=87f98bacb76001157d5a26555a41738ac3841a56",
      "patch": "@@ -3086,8 +3086,7 @@ static bfd_boolean\n _bfd_riscv_elf_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n {\n   bfd *obfd = info->output_bfd;\n-  flagword new_flags = elf_elfheader (ibfd)->e_flags;\n-  flagword old_flags = elf_elfheader (obfd)->e_flags;\n+  flagword new_flags, old_flags;\n \n   if (!is_riscv_elf (ibfd) || !is_riscv_elf (obfd))\n     return TRUE;\n@@ -3107,13 +3106,44 @@ _bfd_riscv_elf_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n   if (!riscv_merge_attributes (ibfd, info))\n     return FALSE;\n \n+  new_flags = elf_elfheader (ibfd)->e_flags;\n+  old_flags = elf_elfheader (obfd)->e_flags;\n+\n   if (! elf_flags_init (obfd))\n     {\n       elf_flags_init (obfd) = TRUE;\n       elf_elfheader (obfd)->e_flags = new_flags;\n       return TRUE;\n     }\n \n+  /* Check to see if the input BFD actually contains any sections.  If not,\n+     its flags may not have been initialized either, but it cannot actually\n+     cause any incompatibility.  Do not short-circuit dynamic objects; their\n+     section list may be emptied by elf_link_add_object_symbols.\n+\n+     Also check to see if there are no code sections in the input.  In this\n+     case, there is no need to check for code specific flags.  */\n+  if (!(ibfd->flags & DYNAMIC))\n+    {\n+      bfd_boolean null_input_bfd = TRUE;\n+      bfd_boolean only_data_sections = TRUE;\n+      asection *sec;\n+\n+      for (sec = ibfd->sections; sec != NULL; sec = sec->next)\n+\t{\n+\t  if ((bfd_get_section_flags (ibfd, sec)\n+\t       & (SEC_LOAD | SEC_CODE | SEC_HAS_CONTENTS))\n+\t      == (SEC_LOAD | SEC_CODE | SEC_HAS_CONTENTS))\n+\t    only_data_sections = FALSE;\n+\n+\t  null_input_bfd = FALSE;\n+\t  break;\n+\t}\n+\n+      if (null_input_bfd || only_data_sections)\n+\treturn TRUE;\n+    }\n+\n   /* Disallow linking different float ABIs.  */\n   if ((old_flags ^ new_flags) & EF_RISCV_FLOAT_ABI)\n     {"
    }
  ]
}