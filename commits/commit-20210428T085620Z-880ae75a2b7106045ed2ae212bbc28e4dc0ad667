{
  "sha": "880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODgwYWU3NWEyYjcxMDYwNDVlZDJhZTIxMmJiYzI4ZTRkYzBhZDY2Nw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-22T17:17:01Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-28T08:56:20Z"
    },
    "message": "gdb delay guile initialization until gdbscm_finish_initialization\n\nLike with the previous commit, this commit delays the initialisation\nof the guile extension language until gdbscm_finish_initialization.\n\nThis is mostly about splitting the existing gdbscm_initialize_*\nfunctions in two, all the calls to register_objfile_data_with_cleanup,\ngdbarch_data_register_post_init, etc are moved into new _initialize_*\nfunctions, but everything else is left in the gdbscm_initialize_*\nfunctions.\n\nThen the call to code previously in _initialize_guile is moved into\ngdbscm_finish_initialization.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* guile/guile.c (gdbscm_set_backtrace): Add declaration.\n\t(gdbscm_finish_initialization): Add code moved from\n\t_initialize_guile.\n\t(_initialize_guile): Move code to gdbscm_finish_initialization.\n\t* guile/scm-arch.c (gdbscm_initialize_arches): Move some code into\n\t_initialize_scm_arch.\n\t(_initialize_scm_arch): New function.\n\t* guile/scm-block.c (gdbscm_initialize_blocks): Move some code\n\tinto _initialize_scm_block.\n\t(_initialize_scm_block): New function.\n\t* guile/scm-frame.c (gdbscm_initialize_frames): Move some code\n\tinto _initialize_scm_frame.\n\t(_initialize_scm_frame): New function.\n\t* guile/scm-objfile.c (gdbscm_initialize_objfiles): Move some code\n\tinto _initialize_scm_objfile.\n\t(_initialize_scm_objfile): New function.\n\t* guile/scm-progspace.c (gdbscm_initialize_pspaces): Move some\n\tcode into _initialize_scm_progspace.\n\t(_initialize_scm_progspace): New function.\n\t* guile/scm-symbol.c (gdbscm_initialize_symbols): Move some code\n\tinto _initialize_scm_symbol.\n\t(_initialize_scm_symbol): New function.\n\t* guile/scm-symtab.c (gdbscm_initialize_symtabs): Move some code\n\tinto _initialize_scm_symtab.\n\t(_initialize_scm_symtab): New function.\n\t* guile/scm-type.c (gdbscm_initialize_types): Move some code into\n\t_initialize_scm_type.\n\t(_initialize_scm_type): New function.",
    "tree": {
      "sha": "400699c81d144b8186b1b123ca94cf79b60a3ea5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/400699c81d144b8186b1b123ca94cf79b60a3ea5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e3685bf250d9ecda5058912d6624e77d7a2b07e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8e3685bf250d9ecda5058912d6624e77d7a2b07e"
    }
  ],
  "stats": {
    "total": 151,
    "additions": 109,
    "deletions": 42
  },
  "files": [
    {
      "sha": "9c7dcd8eee78afc00d86f16f94d5f372314fa205",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -1,3 +1,34 @@\n+2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* guile/guile.c (gdbscm_set_backtrace): Add declaration.\n+\t(gdbscm_finish_initialization): Add code moved from\n+\t_initialize_guile.\n+\t(_initialize_guile): Move code to gdbscm_finish_initialization.\n+\t* guile/scm-arch.c (gdbscm_initialize_arches): Move some code into\n+\t_initialize_scm_arch.\n+\t(_initialize_scm_arch): New function.\n+\t* guile/scm-block.c (gdbscm_initialize_blocks): Move some code\n+\tinto _initialize_scm_block.\n+\t(_initialize_scm_block): New function.\n+\t* guile/scm-frame.c (gdbscm_initialize_frames): Move some code\n+\tinto _initialize_scm_frame.\n+\t(_initialize_scm_frame): New function.\n+\t* guile/scm-objfile.c (gdbscm_initialize_objfiles): Move some code\n+\tinto _initialize_scm_objfile.\n+\t(_initialize_scm_objfile): New function.\n+\t* guile/scm-progspace.c (gdbscm_initialize_pspaces): Move some\n+\tcode into _initialize_scm_progspace.\n+\t(_initialize_scm_progspace): New function.\n+\t* guile/scm-symbol.c (gdbscm_initialize_symbols): Move some code\n+\tinto _initialize_scm_symbol.\n+\t(_initialize_scm_symbol): New function.\n+\t* guile/scm-symtab.c (gdbscm_initialize_symtabs): Move some code\n+\tinto _initialize_scm_symtab.\n+\t(_initialize_scm_symtab): New function.\n+\t* guile/scm-type.c (gdbscm_initialize_types): Move some code into\n+\t_initialize_scm_type.\n+\t(_initialize_scm_type): New function.\n+\n 2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-arch.c (_initialize_py_arch): New function."
    },
    {
      "sha": "9c2a40b61be7eb8994d9ab22290d89309800586a",
      "filename": "gdb/guile/guile.c",
      "status": "modified",
      "additions": 35,
      "deletions": 39,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/guile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/guile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -81,6 +81,7 @@ static int gdbscm_initialized (const struct extension_language_defn *);\n static void gdbscm_eval_from_control_command\n   (const struct extension_language_defn *, struct command_line *);\n static script_sourcer_func gdbscm_source_script;\n+static void gdbscm_set_backtrace (int enable);\n \n int gdb_scheme_initialized;\n \n@@ -644,6 +645,40 @@ call_initialize_gdb_module (void *data)\n static void\n gdbscm_finish_initialization (const struct extension_language_defn *extlang)\n {\n+#if HAVE_GUILE\n+  /* The Python support puts the C side in module \"_gdb\", leaving the\n+     Python side to define module \"gdb\" which imports \"_gdb\".  There is\n+     evidently no similar convention in Guile so we skip this.  */\n+\n+#if HAVE_GUILE_MANUAL_FINALIZATION\n+  /* Our SMOB free functions are not thread-safe, as GDB itself is not\n+     intended to be thread-safe.  Disable automatic finalization so that\n+     finalizers aren't run in other threads.  */\n+  scm_set_automatic_finalization_enabled (0);\n+#endif\n+\n+  /* Before we initialize Guile, block signals needed by gdb (especially\n+     SIGCHLD).  This is done so that all threads created during Guile\n+     initialization have SIGCHLD blocked.  PR 17247.  Really libgc and\n+     Guile should do this, but we need to work with libgc 7.4.x.  */\n+  {\n+    gdb::block_signals blocker;\n+\n+    /* scm_with_guile is the most portable way to initialize Guile.  Plus\n+       we need to initialize the Guile support while in Guile mode (e.g.,\n+       called from within a call to scm_with_guile).  */\n+    scm_with_guile (call_initialize_gdb_module, NULL);\n+  }\n+\n+  /* Set Guile's backtrace to match the \"set guile print-stack\" default.\n+     [N.B. The two settings are still separate.]  But only do this after\n+     we've initialized Guile, it's nice to see a backtrace if there's an\n+     error during initialization.  OTOH, if the error is that gdb/init.scm\n+     wasn't found because gdb is being run from the build tree, the\n+     backtrace is more noise than signal.  Sigh.  */\n+  gdbscm_set_backtrace (0);\n+#endif\n+\n   /* Restore the environment to the user interaction one.  */\n   scm_set_current_module (scm_interaction_environment ());\n }\n@@ -770,43 +805,4 @@ void\n _initialize_guile ()\n {\n   install_gdb_commands ();\n-\n-#if HAVE_GUILE\n-  {\n-    /* The Python support puts the C side in module \"_gdb\", leaving the Python\n-       side to define module \"gdb\" which imports \"_gdb\".  There is evidently no\n-       similar convention in Guile so we skip this.  */\n-\n-#if HAVE_GUILE_MANUAL_FINALIZATION\n-    /* Our SMOB free functions are not thread-safe, as GDB itself is not\n-       intended to be thread-safe.  Disable automatic finalization so that\n-       finalizers aren't run in other threads.  */\n-    scm_set_automatic_finalization_enabled (0);\n-#endif\n-\n-    /* Before we initialize Guile, block signals needed by gdb\n-       (especially SIGCHLD).\n-       This is done so that all threads created during Guile initialization\n-       have SIGCHLD blocked.  PR 17247.\n-       Really libgc and Guile should do this, but we need to work with\n-       libgc 7.4.x.  */\n-    {\n-      gdb::block_signals blocker;\n-\n-      /* scm_with_guile is the most portable way to initialize Guile.\n-\t Plus we need to initialize the Guile support while in Guile mode\n-\t (e.g., called from within a call to scm_with_guile).  */\n-      scm_with_guile (call_initialize_gdb_module, NULL);\n-    }\n-\n-    /* Set Guile's backtrace to match the \"set guile print-stack\" default.\n-       [N.B. The two settings are still separate.]\n-       But only do this after we've initialized Guile, it's nice to see a\n-       backtrace if there's an error during initialization.\n-       OTOH, if the error is that gdb/init.scm wasn't found because gdb is\n-       being run from the build tree, the backtrace is more noise than signal.\n-       Sigh.  */\n-    gdbscm_set_backtrace (0);\n-  }\n-#endif\n }"
    },
    {
      "sha": "863e5026b4c31b0c52a0f8b5a612a4017acc7f50",
      "filename": "gdb/guile/scm-arch.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-arch.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -650,7 +650,12 @@ gdbscm_initialize_arches (void)\n   scm_set_smob_print (arch_smob_tag, arscm_print_arch_smob);\n \n   gdbscm_define_functions (arch_functions, 1);\n+}\n \n+void _initialize_scm_arch ();\n+void\n+_initialize_scm_arch ()\n+{\n   arch_object_data\n     = gdbarch_data_register_post_init (arscm_object_data_init);\n }"
    },
    {
      "sha": "e7a1083fdc99a1f7bb1a7bc6aef65073268c3bd7",
      "filename": "gdb/guile/scm-block.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-block.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -799,7 +799,12 @@ gdbscm_initialize_blocks (void)\n \t\t\t\tgdbscm_documentation_symbol,\n \t\t\t\tgdbscm_scm_from_c_string (\"\\\n Internal function to assist the block symbols iterator.\"));\n+}\n \n+void _initialize_scm_block ();\n+void\n+_initialize_scm_block ()\n+{\n   /* Register an objfile \"free\" callback so we can properly\n      invalidate blocks when an object file is about to be deleted.  */\n   bkscm_objfile_data_key"
    },
    {
      "sha": "9d5dfa698bca0ed0ec2dcb31c1971722ebd6aec9",
      "filename": "gdb/guile/scm-frame.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-frame.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -1174,7 +1174,12 @@ gdbscm_initialize_frames (void)\n   gdbscm_define_functions (frame_functions, 1);\n \n   block_keyword = scm_from_latin1_keyword (\"block\");\n+}\n \n+void _initialize_scm_frame ();\n+void\n+_initialize_scm_frame ()\n+{\n   /* Register an inferior \"free\" callback so we can properly\n      invalidate frames when an inferior file is about to be deleted.  */\n   frscm_inferior_data_key"
    },
    {
      "sha": "30e63f374e7410363a224f1a4893108085d81d5a",
      "filename": "gdb/guile/scm-objfile.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-objfile.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -428,7 +428,12 @@ gdbscm_initialize_objfiles (void)\n   scm_set_smob_print (objfile_smob_tag, ofscm_print_objfile_smob);\n \n   gdbscm_define_functions (objfile_functions, 1);\n+}\n \n+void _initialize_scm_objfile ();\n+void\n+_initialize_scm_objfile ()\n+{\n   ofscm_objfile_data_key\n     = register_objfile_data_with_cleanup (NULL, ofscm_handle_objfile_deleted);\n }"
    },
    {
      "sha": "d28dba9e3f7da491255b6b2685ef07f227d1feac",
      "filename": "gdb/guile/scm-progspace.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-progspace.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -417,7 +417,12 @@ gdbscm_initialize_pspaces (void)\n   scm_set_smob_print (pspace_smob_tag, psscm_print_pspace_smob);\n \n   gdbscm_define_functions (pspace_functions, 1);\n+}\n \n+void _initialize_scm_progspace ();\n+void\n+_initialize_scm_progspace ()\n+{\n   psscm_pspace_data_key\n     = register_program_space_data_with_cleanup (NULL,\n \t\t\t\t\t\tpsscm_handle_pspace_deleted);"
    },
    {
      "sha": "324f64a149213d663f645f8948a3e51214be1372",
      "filename": "gdb/guile/scm-symbol.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symbol.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -817,7 +817,12 @@ gdbscm_initialize_symbols (void)\n   block_keyword = scm_from_latin1_keyword (\"block\");\n   domain_keyword = scm_from_latin1_keyword (\"domain\");\n   frame_keyword = scm_from_latin1_keyword (\"frame\");\n+}\n \n+void _initialize_scm_symbol ();\n+void\n+_initialize_scm_symbol ()\n+{\n   /* Register an objfile \"free\" callback so we can properly\n      invalidate symbols when an object file is about to be deleted.  */\n   syscm_objfile_data_key"
    },
    {
      "sha": "b4edcef8678e89e03764f640f059720d9fa39cea",
      "filename": "gdb/guile/scm-symtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symtab.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -688,7 +688,12 @@ gdbscm_initialize_symtabs (void)\n   scm_set_smob_print (sal_smob_tag, stscm_print_sal_smob);\n \n   gdbscm_define_functions (symtab_functions, 1);\n+}\n \n+void _initialize_scm_symtab ();\n+void\n+_initialize_scm_symtab ()\n+{\n   /* Register an objfile \"free\" callback so we can properly\n      invalidate symbol tables, and symbol table and line data\n      structures when an object file that is about to be deleted.  */"
    },
    {
      "sha": "8d9c2c5f9a4e5b54c4c493393db9e762be40e2ba",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/880ae75a2b7106045ed2ae212bbc28e4dc0ad667/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=880ae75a2b7106045ed2ae212bbc28e4dc0ad667",
      "patch": "@@ -1505,11 +1505,16 @@ Internal function to assist the type fields iterator.\"));\n \n   block_keyword = scm_from_latin1_keyword (\"block\");\n \n+  global_types_map = gdbscm_create_eqable_gsmob_ptr_map (tyscm_hash_type_smob,\n+\t\t\t\t\t\t\t tyscm_eq_type_smob);\n+}\n+\n+void _initialize_scm_type ();\n+void\n+_initialize_scm_type ()\n+{\n   /* Register an objfile \"free\" callback so we can properly copy types\n      associated with the objfile when it's about to be deleted.  */\n   tyscm_objfile_data_key\n     = register_objfile_data_with_cleanup (save_objfile_types, NULL);\n-\n-  global_types_map = gdbscm_create_eqable_gsmob_ptr_map (tyscm_hash_type_smob,\n-\t\t\t\t\t\t\t tyscm_eq_type_smob);\n }"
    }
  ]
}