{
  "sha": "ea142fbfc9c1708a83d3532257d6728e1f5c142e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWExNDJmYmZjOWMxNzA4YTgzZDM1MzIyNTdkNjcyOGUxZjVjMTQyZQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-07-08T09:00:25Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-07-08T09:13:46Z"
    },
    "message": "Fix breakpoints on file reloads for PIE binaries\n\nWhen a binary is built using PIE, reloading the file will cause GDB to error\non restart.  For example:\ngdb ./a.out\n(gdb) break main\n(gdb) run\n(gdb) file ./a.out\n(gdb) continue\n\nWill cause GDB to error with:\nContinuing.\nWarning:\nCannot insert breakpoint 1.\nCannot access memory at address 0x9e0\nCommand aborted.\n\nThis is due to the symbol offsets not being relocated after reloading the file.\n\nFix is to ensure solib_create_inferior_hook is called, in the same manner as\ninfrun.c:follow_exec().\n\nExpand the idempotent test to cover PIE scenarios.\n\ngdb/ChangeLog:\n\n\t* symfile.c (symbol_file_command): Call solib_create_inferior_hook.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/break-idempotent.exp: Test both PIE and non PIE.",
    "tree": {
      "sha": "f352e1434244ad934830c0a0fc50ea63e835a9ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f352e1434244ad934830c0a0fc50ea63e835a9ae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ea142fbfc9c1708a83d3532257d6728e1f5c142e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea142fbfc9c1708a83d3532257d6728e1f5c142e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ea142fbfc9c1708a83d3532257d6728e1f5c142e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea142fbfc9c1708a83d3532257d6728e1f5c142e/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "62a47958bd6e3cbd909c2f19cd4669a9670ce4f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62a47958bd6e3cbd909c2f19cd4669a9670ce4f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/62a47958bd6e3cbd909c2f19cd4669a9670ce4f1"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 56,
    "deletions": 30
  },
  "files": [
    {
      "sha": "218bbf62234a5a0cbb2b9eeb2744636e7fc7f11a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ea142fbfc9c1708a83d3532257d6728e1f5c142e",
      "patch": "@@ -1,3 +1,7 @@\n+2019-08-04  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* symfile.c (symbol_file_command): Call solib_create_inferior_hook.\n+\n 2019-07-04  Tom Tromey  <tom@tromey.com>\n \n \tPR tui/24724:"
    },
    {
      "sha": "dc6bdf3fd4a49f7ae4268d15abc0c71742328f05",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=ea142fbfc9c1708a83d3532257d6728e1f5c142e",
      "patch": "@@ -1672,7 +1672,19 @@ symbol_file_command (const char *args, int from_tty)\n \n       validate_readnow_readnever (flags);\n \n+      /* Set SYMFILE_DEFER_BP_RESET because the proper displacement for a PIE\n+\t (Position Independent Executable) main symbol file will only be\n+\t computed by the solib_create_inferior_hook below.  Without it,\n+\t breakpoint_re_set would fail to insert the breakpoints with the zero\n+\t displacement.  */\n+      add_flags |= SYMFILE_DEFER_BP_RESET;\n+\n       symbol_file_add_main_1 (name, add_flags, flags, offset);\n+\n+      solib_create_inferior_hook (from_tty);\n+\n+      /* Now it's safe to re-add the breakpoints.  */\n+      breakpoint_re_set ();\n     }\n }\n "
    },
    {
      "sha": "a6d6843d9692acdf9601f442cc34320c90634468",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=ea142fbfc9c1708a83d3532257d6728e1f5c142e",
      "patch": "@@ -1,3 +1,7 @@\n+2019-07-08  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.base/break-idempotent.exp: Test both PIE and non PIE.\n+\n 2019-07-04  Pedro Alves  <palves@redhat.com>\n \n \t* lib/gdb.exp (foreach_with_prefix): Don't return early if"
    },
    {
      "sha": "96f91c50f906955b289b7ee7dfd65dc7c375e79a",
      "filename": "gdb/testsuite/gdb.base/break-idempotent.exp",
      "status": "modified",
      "additions": 36,
      "deletions": 30,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/testsuite/gdb.base/break-idempotent.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea142fbfc9c1708a83d3532257d6728e1f5c142e/gdb/testsuite/gdb.base/break-idempotent.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/break-idempotent.exp?ref=ea142fbfc9c1708a83d3532257d6728e1f5c142e",
      "patch": "@@ -36,23 +36,6 @@\n \n standard_testfile\n \n-if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n-    return -1\n-}\n-\n-if ![runto_main] then {\n-    fail \"can't run to main\"\n-    return 0\n-}\n-\n-if [is_remote host] {\n-    set arg [remote_download host $binfile]\n-    if { $arg == \"\" } {\n-\tperror \"download failed\"\n-\treturn -1\n-    }\n-}\n-\n # Force a breakpoint re-set in GDB.  Currently this is done by\n # reloading symbols with the \"file\" command.\n \n@@ -62,11 +45,11 @@ proc force_breakpoint_re_set {} {\n     set test \"file \\$binfile\"\n     gdb_test_multiple \"file $binfile\" $test {\n \t-re \"Are you sure you want to change the file. .*y or n. $\" {\n-\t    send_gdb \"y\\n\"\n+\t    send_gdb \"y\\n\" optional\n \t    exp_continue\n \t}\n \t-re \"Load new symbol table from \\\".*\\\".*y or n. $\" {\n-\t    send_gdb \"y\\n\"\n+\t    send_gdb \"y\\n\" optional\n \t    exp_continue\n \t}\n \t-re \"Reading symbols from.*$gdb_prompt $\" {\n@@ -123,7 +106,7 @@ proc set_breakpoint { break_command } {\n proc test_break { always_inserted break_command } {\n     set cmd [lindex [split \"$break_command\"] 0]\n \n-    with_test_prefix \"always-inserted $always_inserted: $cmd\" {\n+    with_test_prefix \"$cmd\" {\n \tdelete_breakpoints\n \n \tif ![runto_main] then {\n@@ -163,20 +146,43 @@ proc test_break { always_inserted break_command } {\n     }\n }\n \n-foreach always_inserted { \"off\" \"on\" } {\n-    test_break $always_inserted \"break\"\n+# The testcase uses the \"file\" command to force breakpoint re-set in\n+# GDB.  Test both with and without PIE, as GDB used to mishandle\n+# breakpoint re-set when reloading PIEs.\n+foreach_with_prefix pie { \"nopie\" \"pie\" } {\n+\n+    set opts {debug}\n+    lappend opts $pie\n \n-    if {![skip_hw_breakpoint_tests]} {\n-\ttest_break $always_inserted \"hbreak\"\n+    set binfile [standard_output_file $testfile-$pie]\n+\n+    if {[prepare_for_testing \"failed to prepare\" $binfile $srcfile $opts]} {\n+\tcontinue\n     }\n \n-    if {![skip_hw_watchpoint_tests]} {\n-\ttest_break $always_inserted \"watch\"\n+    if [is_remote host] {\n+\tset arg [remote_download host $binfile]\n+\tif { $arg == \"\" } {\n+\t    untested \"download failed\"\n+\t    continue\n+\t}\n     }\n \n-    if {![skip_hw_watchpoint_access_tests]\n-\t&& ![skip_hw_watchpoint_multi_tests]} {\n-\ttest_break $always_inserted \"rwatch\"\n-\ttest_break $always_inserted \"awatch\"\n+    foreach_with_prefix always_inserted { \"off\" \"on\" } {\n+\ttest_break $always_inserted \"break\"\n+\n+\tif {![skip_hw_breakpoint_tests]} {\n+\t    test_break $always_inserted \"hbreak\"\n+\t}\n+\n+\tif {![skip_hw_watchpoint_tests]} {\n+\t    test_break $always_inserted \"watch\"\n+\t}\n+\n+\tif {![skip_hw_watchpoint_access_tests]\n+\t    && ![skip_hw_watchpoint_multi_tests]} {\n+\t    test_break $always_inserted \"rwatch\"\n+\t    test_break $always_inserted \"awatch\"\n+\t}\n     }\n }"
    }
  ]
}