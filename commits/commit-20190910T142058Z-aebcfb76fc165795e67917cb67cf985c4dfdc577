{
  "sha": "aebcfb76fc165795e67917cb67cf985c4dfdc577",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWViY2ZiNzZmYzE2NTc5NWU2NzkxN2NiNjdjZjk4NWM0ZGZkYzU3Nw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-09-10T14:20:58Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-09-10T14:20:58Z"
    },
    "message": "Enhance the disassembler so that it will reliably determine whether a reloc applies to the middle of the next insn.\n\n\tPR 24907\nbinutils* objdump.c (null_print): New function.\n\t(disassemble_bytes): Delete previous_octets local and replace with\n\ta test of the max_reloc_offset_into_insn field of the\n\tbfd_arch_info structure.  If a reloc is a potential match for the\n\tnext insn, then perform a dummy disassembly in order to calculate\n\tits real length.\n\nbfd\t* archures.c (bfd_arch_info_type): Add max_reloc_offset_into_insn\n\tfield.\n\t(bfd_default_arch_struct): Initialise the new field.\n\t* bfd-in2.h: Regenerate.\n\t* cpu-aarch64.c: Initialise the new field.\n\t* cpu-alpha.c: Likewise.\n\t* cpu-arc.c: Likewise.\n\t* cpu-arm.c: Likewise.\n\t* cpu-avr.c: Likewise.\n\t* cpu-bfin.c: Likewise.\n\t* cpu-bpf.c: Likewise.\n\t* cpu-cr16.c: Likewise.\n\t* cpu-cr16c.c: Likewise.\n\t* cpu-cris.c: Likewise.\n\t* cpu-crx.c: Likewise.\n\t* cpu-csky.c: Likewise.\n\t* cpu-d10v.c: Likewise.\n\t* cpu-d30v.c: Likewise.\n\t* cpu-dlx.c: Likewise.\n\t* cpu-epiphany.c: Likewise.\n\t* cpu-fr30.c: Likewise.\n\t* cpu-frv.c: Likewise.\n\t* cpu-ft32.c: Likewise.\n\t* cpu-h8300.c: Likewise.\n\t* cpu-hppa.c: Likewise.\n\t* cpu-i386.c: Likewise.\n\t* cpu-ia64.c: Likewise.\n\t* cpu-iamcu.c: Likewise.\n\t* cpu-ip2k.c: Likewise.\n\t* cpu-iq2000.c: Likewise.\n\t* cpu-k1om.c: Likewise.\n\t* cpu-l1om.c: Likewise.\n\t* cpu-lm32.c: Likewise.\n\t* cpu-m10200.c: Likewise.\n\t* cpu-m10300.c: Likewise.\n\t* cpu-m32c.c: Likewise.\n\t* cpu-m32r.c: Likewise.\n\t* cpu-m68hc11.c: Likewise.\n\t* cpu-m68hc12.c: Likewise.\n\t* cpu-m68k.c: Likewise.\n\t* cpu-m9s12x.c: Likewise.\n\t* cpu-m9s12xg.c: Likewise.\n\t* cpu-mcore.c: Likewise.\n\t* cpu-mep.c: Likewise.\n\t* cpu-metag.c: Likewise.\n\t* cpu-microblaze.c: Likewise.\n\t* cpu-mips.c: Likewise.\n\t* cpu-mmix.c: Likewise.\n\t* cpu-moxie.c: Likewise.\n\t* cpu-msp430.c: Likewise.\n\t* cpu-mt.c: Likewise.\n\t* cpu-nds32.c: Likewise.\n\t* cpu-nfp.c: Likewise.\n\t* cpu-nios2.c: Likewise.\n\t* cpu-ns32k.c: Likewise.\n\t* cpu-or1k.c: Likewise.\n\t* cpu-pdp11.c: Likewise.\n\t* cpu-pj.c: Likewise.\n\t* cpu-plugin.c: Likewise.\n\t* cpu-powerpc.c: Likewise.\n\t* cpu-pru.c: Likewise.\n\t* cpu-riscv.c: Likewise.\n\t* cpu-rl78.c: Likewise.\n\t* cpu-rs6000.c: Likewise.\n\t* cpu-rx.c: Likewise.\n\t* cpu-s12z.c: Likewise.\n\t* cpu-s390.c: Likewise.\n\t* cpu-score.c: Likewise.\n\t* cpu-sh.c: Likewise.\n\t* cpu-sparc.c: Likewise.\n\t* cpu-spu.c: Likewise.\n\t* cpu-tic30.c: Likewise.\n\t* cpu-tic4x.c: Likewise.\n\t* cpu-tic54x.c: Likewise.\n\t* cpu-tic6x.c: Likewise.\n\t* cpu-tic80.c: Likewise.\n\t* cpu-tilegx.c: Likewise.\n\t* cpu-tilepro.c: Likewise.\n\t* cpu-v850.c: Likewise.\n\t* cpu-v850_rh850.c: Likewise.\n\t* cpu-vax.c: Likewise.\n\t* cpu-visium.c: Likewise.\n\t* cpu-wasm32.c: Likewise.\n\t* cpu-xc16x.c: Likewise.\n\t* cpu-xgate.c: Likewise.\n\t* cpu-xstormy16.c: Likewise.\n\t* cpu-xtensa.c: Likewise.\n\t* cpu-z80.c: Likewise.\n\t* cpu-z8k.c: Likewise.\n\ngas\t* testsuite/gas/arm/pr24907.s: New test.\n\t* testsuite/gas/arm/pr24907.d: Expected disassembly.",
    "tree": {
      "sha": "3c4539161437c15ad09750a9cfc7e0696f3a2986",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3c4539161437c15ad09750a9cfc7e0696f3a2986"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aebcfb76fc165795e67917cb67cf985c4dfdc577",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aebcfb76fc165795e67917cb67cf985c4dfdc577",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aebcfb76fc165795e67917cb67cf985c4dfdc577",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aebcfb76fc165795e67917cb67cf985c4dfdc577/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "efd0b3103f0fbbaa8dac86d82263b46a88b27461",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd0b3103f0fbbaa8dac86d82263b46a88b27461",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/efd0b3103f0fbbaa8dac86d82263b46a88b27461"
    }
  ],
  "stats": {
    "total": 3832,
    "additions": 1280,
    "deletions": 2552
  },
  "files": [
    {
      "sha": "8b6b843a6f58de46d47db78c868e39a0e6459bee",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -1,3 +1,96 @@\n+2019-09-10  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24907\n+\t* archures.c (bfd_arch_info_type): Add max_reloc_offset_into_insn\n+\tfield.\n+\t(bfd_default_arch_struct): Initialise the new field.\n+\t* bfd-in2.h: Regenerate.\n+\t* cpu-aarch64.c: Initialise the new field.\n+\t* cpu-alpha.c: Likewise.\n+\t* cpu-arc.c: Likewise.\n+\t* cpu-arm.c: Likewise.\n+\t* cpu-avr.c: Likewise.\n+\t* cpu-bfin.c: Likewise.\n+\t* cpu-bpf.c: Likewise.\n+\t* cpu-cr16.c: Likewise.\n+\t* cpu-cr16c.c: Likewise.\n+\t* cpu-cris.c: Likewise.\n+\t* cpu-crx.c: Likewise.\n+\t* cpu-csky.c: Likewise.\n+\t* cpu-d10v.c: Likewise.\n+\t* cpu-d30v.c: Likewise.\n+\t* cpu-dlx.c: Likewise.\n+\t* cpu-epiphany.c: Likewise.\n+\t* cpu-fr30.c: Likewise.\n+\t* cpu-frv.c: Likewise.\n+\t* cpu-ft32.c: Likewise.\n+\t* cpu-h8300.c: Likewise.\n+\t* cpu-hppa.c: Likewise.\n+\t* cpu-i386.c: Likewise.\n+\t* cpu-ia64.c: Likewise.\n+\t* cpu-iamcu.c: Likewise.\n+\t* cpu-ip2k.c: Likewise.\n+\t* cpu-iq2000.c: Likewise.\n+\t* cpu-k1om.c: Likewise.\n+\t* cpu-l1om.c: Likewise.\n+\t* cpu-lm32.c: Likewise.\n+\t* cpu-m10200.c: Likewise.\n+\t* cpu-m10300.c: Likewise.\n+\t* cpu-m32c.c: Likewise.\n+\t* cpu-m32r.c: Likewise.\n+\t* cpu-m68hc11.c: Likewise.\n+\t* cpu-m68hc12.c: Likewise.\n+\t* cpu-m68k.c: Likewise.\n+\t* cpu-m9s12x.c: Likewise.\n+\t* cpu-m9s12xg.c: Likewise.\n+\t* cpu-mcore.c: Likewise.\n+\t* cpu-mep.c: Likewise.\n+\t* cpu-metag.c: Likewise.\n+\t* cpu-microblaze.c: Likewise.\n+\t* cpu-mips.c: Likewise.\n+\t* cpu-mmix.c: Likewise.\n+\t* cpu-moxie.c: Likewise.\n+\t* cpu-msp430.c: Likewise.\n+\t* cpu-mt.c: Likewise.\n+\t* cpu-nds32.c: Likewise.\n+\t* cpu-nfp.c: Likewise.\n+\t* cpu-nios2.c: Likewise.\n+\t* cpu-ns32k.c: Likewise.\n+\t* cpu-or1k.c: Likewise.\n+\t* cpu-pdp11.c: Likewise.\n+\t* cpu-pj.c: Likewise.\n+\t* cpu-plugin.c: Likewise.\n+\t* cpu-powerpc.c: Likewise.\n+\t* cpu-pru.c: Likewise.\n+\t* cpu-riscv.c: Likewise.\n+\t* cpu-rl78.c: Likewise.\n+\t* cpu-rs6000.c: Likewise.\n+\t* cpu-rx.c: Likewise.\n+\t* cpu-s12z.c: Likewise.\n+\t* cpu-s390.c: Likewise.\n+\t* cpu-score.c: Likewise.\n+\t* cpu-sh.c: Likewise.\n+\t* cpu-sparc.c: Likewise.\n+\t* cpu-spu.c: Likewise.\n+\t* cpu-tic30.c: Likewise.\n+\t* cpu-tic4x.c: Likewise.\n+\t* cpu-tic54x.c: Likewise.\n+\t* cpu-tic6x.c: Likewise.\n+\t* cpu-tic80.c: Likewise.\n+\t* cpu-tilegx.c: Likewise.\n+\t* cpu-tilepro.c: Likewise.\n+\t* cpu-v850.c: Likewise.\n+\t* cpu-v850_rh850.c: Likewise.\n+\t* cpu-vax.c: Likewise.\n+\t* cpu-visium.c: Likewise.\n+\t* cpu-wasm32.c: Likewise.\n+\t* cpu-xc16x.c: Likewise.\n+\t* cpu-xgate.c: Likewise.\n+\t* cpu-xstormy16.c: Likewise.\n+\t* cpu-xtensa.c: Likewise.\n+\t* cpu-z80.c: Likewise.\n+\t* cpu-z8k.c: Likewise.\n+\n 2019-09-09  Phil Blundell  <pb@pbcl.net>\n \n \tbinutils 2.33 branch created."
    },
    {
      "sha": "02c8e4ec93e822746c728ec2dd413e65601064d8",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -584,6 +584,16 @@ DESCRIPTION\n .\t\t  bfd_boolean code);\n .\n .  const struct bfd_arch_info *next;\n+.\n+.  {* On some architectures the offset for a relocation can point into\n+.     the middle of an instruction.  This field specifies the maximum\n+.     offset such a relocation can have (in octets).  This affects the\n+.     behaviour of the disassembler, since a value greater than zero\n+.     means that it may need to disassemble an instruction twice, once\n+.     to get its length and then a second time to display it.  If the\n+.     value is negative then this has to be done for every single\n+.     instruction, regardless of the offset of the reloc.  *}\n+.  signed int max_reloc_offset_into_insn;\n .}\n .bfd_arch_info_type;\n .\n@@ -929,12 +939,13 @@ DESCRIPTION\n .extern const bfd_arch_info_type bfd_default_arch_struct;\n */\n \n-const bfd_arch_info_type bfd_default_arch_struct = {\n+const bfd_arch_info_type bfd_default_arch_struct =\n+{\n   32, 32, 8, bfd_arch_unknown, 0, \"unknown\", \"unknown\", 2, TRUE,\n   bfd_default_compatible,\n   bfd_default_scan,\n   bfd_arch_default_fill,\n-  0,\n+  0, 0\n };\n \n /*"
    },
    {
      "sha": "690ba9a6fdbc838596ac8fb2679a952c4b037c79",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -2514,6 +2514,16 @@ typedef struct bfd_arch_info\n                  bfd_boolean code);\n \n   const struct bfd_arch_info *next;\n+\n+  /* On some architectures the offset for a relocation can point into\n+     the middle of an instruction.  This field specifies the maximum\n+     offset such a relocation can have (in octets).  This affects the\n+     behaviour of the disassembler, since a value greater than zero\n+     means that it may need to disassemble an instruction twice, once\n+     to get its length and then a second time to display it.  If the\n+     value is negative then this has to be done for every single\n+     instruction, regardless of the offset of the reloc.  */\n+  signed int max_reloc_offset_into_insn;\n }\n bfd_arch_info_type;\n "
    },
    {
      "sha": "fbffb79b639a525965ffae968fe043a64cebef32",
      "filename": "bfd/cpu-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-aarch64.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -104,7 +104,7 @@ scan (const struct bfd_arch_info *info, const char *string)\n #define N(NUMBER, PRINT, WORDSIZE, DEFAULT, NEXT)\t\t\\\n   { WORDSIZE, WORDSIZE, 8, bfd_arch_aarch64, NUMBER,\t\t\\\n     \"aarch64\", PRINT, 4, DEFAULT, compatible, scan,\t\t\\\n-    bfd_arch_default_fill, NEXT }\n+      bfd_arch_default_fill, NEXT, 0 }\n \n static const bfd_arch_info_type bfd_aarch64_arch_ilp32 =\n   N (bfd_mach_aarch64_ilp32, \"aarch64:ilp32\", 32, FALSE, NULL);"
    },
    {
      "sha": "c4221d86bced2518b96de206d96f9c1d5877f94d",
      "filename": "bfd/cpu-alpha.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-alpha.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,19 +24,20 @@\n \n #define N(BITS_WORD, BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT) \\\n   {\t\t\t\t\t\t\t\\\n-    BITS_WORD, /* bits in a word */\t\t\t\\\n-    BITS_ADDR, /* bits in an address */\t\t\t\\\n-    8,\t/* 8 bits in a byte */\t\t\t\t\\\n+    BITS_WORD, /* Bits in a word.  */\t\t\t\\\n+    BITS_ADDR, /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n     bfd_arch_alpha,\t\t\t\t\t\\\n     NUMBER,\t\t\t\t\t\t\\\n     \"alpha\",\t\t\t\t\t\t\\\n     PRINT,\t\t\t\t\t\t\\\n-    3,\t\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power. */\t\t\\\n     DEFAULT,\t\t\t\t\t\t\\\n     bfd_default_compatible,\t\t\t\t\\\n     bfd_default_scan,\t\t\t\t\t\\\n     bfd_arch_default_fill,\t\t\t\t\\\n     NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n \n #define NN(index) (&arch_info_struct[index])"
    },
    {
      "sha": "906ca1d8743a106d781137a9076ba76168a0ef59",
      "filename": "bfd/cpu-arc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arc.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -27,20 +27,21 @@ static const bfd_arch_info_type *\n arc_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b);\n \n #define ARC(mach, print_name, default_p, next) \\\n-{\t\t\t\t\t\\\n-    32,\t/* 32 bits in a word  */\t\\\n-    32,\t/* 32 bits in an address  */\t\\\n-    8,\t/* 8 bits in a byte  */\t\t\\\n+  {\t\t\t\t\t       \\\n+    32,\t/* Bits in a word.  */\t\t\\\n+    32,\t/* Bits in an address.  */\t\\\n+    8,\t/* Bits in a byte.  */\t\t\\\n     bfd_arch_arc,\t\t\t\\\n     mach,\t\t\t\t\\\n     \"arc\",\t\t\t\t\\\n     print_name,\t\t\t\t\\\n-    4, /* section alignment power  */\t\\\n+    4, /* Section alignment power.  */\t\\\n     default_p,\t\t\t\t\\\n     arc_compatible,\t\t\t\\\n     bfd_default_scan,\t\t\t\\\n     bfd_arch_default_fill,\t\t\\\n     next,\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n \n static const bfd_arch_info_type arch_info_struct[] ="
    },
    {
      "sha": "71a78daf1196c86e3bd9ac4959b7881390110f09",
      "filename": "bfd/cpu-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arm.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -221,7 +221,7 @@ scan (const struct bfd_arch_info *info, const char *string)\n \n #define N(number, print, default, next)  \\\n {  32, 32, 8, bfd_arch_arm, number, \"arm\", print, 4, default, compatible, \\\n-   scan, bfd_arch_default_fill, next }\n+    scan, bfd_arch_default_fill, next, 0 }\n \n static const bfd_arch_info_type arch_info_struct[] =\n {"
    },
    {
      "sha": "621c48bba975b327426909a084076517c5d1abc5",
      "filename": "bfd/cpu-avr.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-avr.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -82,9 +82,9 @@ compatible (const bfd_arch_info_type * a,\n \n #define N(addr_bits, machine, print, default, next)\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  8,\t\t\t\t/* 8 bits in a word.  */\t\\\n-  addr_bits,\t\t\t/* bits in an address.  */\t\\\n-  8,\t\t\t\t/* 8 bits in a byte.  */\t\\\n+  8,\t\t\t\t/* Bits in a word.  */\t\t\\\n+  addr_bits,\t\t\t/* Bits in an address.  */\t\\\n+  8,\t\t\t\t/* Bits in a byte.  */\t\t\\\n   bfd_arch_avr,\t\t\t\t\t\t\t\\\n   machine,\t\t\t/* Machine number.  */\t\t\\\n   \"avr\",\t\t\t/* Architecture name.   */\t\\\n@@ -94,7 +94,8 @@ compatible (const bfd_arch_info_type * a,\n   compatible,\t\t\t\t\t\t\t\\\n   bfd_default_scan,\t\t\t\t\t\t\\\n   bfd_arch_default_fill,\t\t\t\t\t\\\n-  next\t\t\t\t\t\t\t\t\\\n+  next,\t\t\t\t\t\t\t\t\\\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\t\\\n }\n \n static const bfd_arch_info_type arch_info_struct[] ="
    },
    {
      "sha": "03f388e9b035e6656d3e7c84e8a8ac7da53a7e66",
      "filename": "bfd/cpu-bfin.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-bfin.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -37,5 +37,6 @@ const bfd_arch_info_type bfd_bfin_arch =\n     bfd_default_compatible,\n     bfd_default_scan,\n     bfd_arch_default_fill,\n-    0,\n+    NULL,\n+    0 /* Maximum offset of a reloc from the start of an insn.  */\n   };"
    },
    {
      "sha": "4d92ca4e4f86387aefd2210fd75c3c59e5afb12a",
      "filename": "bfd/cpu-bpf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-bpf.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,7 +25,7 @@\n \n const bfd_arch_info_type bfd_bpf_arch =\n {\n-  64,\t\t\t\t/* Bits per word */\n+  64,\t\t\t\t/* Bits per word.  */\n   64,\t\t\t\t/* Bits per address.  */\n   8,\t\t\t\t/* Bits per byte.  */\n   bfd_arch_bpf,\t\t\t/* Architecture.  */\n@@ -37,5 +37,6 @@ const bfd_arch_info_type bfd_bpf_arch =\n   bfd_default_compatible,\t/* Architecture comparison fn.  */\n   bfd_default_scan,\t\t/* String to architecture convert fn.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "bd3bfb32b6ad9dbbf16e45d0b193bf4da45d55d2",
      "filename": "bfd/cpu-cr16.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-cr16.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n \n \n const bfd_arch_info_type bfd_cr16_arch =\n-  {\n-    16,\t\t      /* 16 bits in a word.  */\n-    32,\t\t      /* 32 bits in an address.  */\n-    8,\t\t      /*  8 bits in a byte.  */\n-    bfd_arch_cr16,    /* enum bfd_architecture arch.  */\n-    bfd_mach_cr16,\n-    \"cr16\",\t      /* Arch name.  */\n-    \"cr16\",\t      /* Printable name.  */\n-    1,\t\t      /* Unsigned int section alignment power.  */\n-    TRUE,\t      /* The one and only.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+ 16,\t\t      /* Bits in a word.  */\n+ 32,\t\t      /* Bits in an address.  */\n+ 8,\t\t      /* Bits in a byte.  */\n+ bfd_arch_cr16,       /* Architecture number.  */\n+ bfd_mach_cr16,\n+ \"cr16\",\t      /* Arch name.  */\n+ \"cr16\",\t      /* Printable name.  */\n+ 1,\t\t      /* Section alignment power.  */\n+ TRUE,\t      \t      /* The one and only.  */\n+ bfd_default_compatible,\n+ bfd_default_scan,\n+ bfd_arch_default_fill,\n+ NULL,\n+ 0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "ed4a818971871ba1f598545cab88b71186460502",
      "filename": "bfd/cpu-cr16c.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-cr16c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-cr16c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-cr16c.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,18 +23,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_cr16c_arch =\n-  {\n-    16,\t\t/* 16 bits in a word.  */\n-    32,\t\t/* 32 bits in an address.  */\n-    8,\t\t/*  8 bits in a byte.  */\n-    bfd_arch_cr16c,\n-    bfd_mach_cr16c,\n-    \"cr16c\",\n-    \"cr16c\",\n-    1,\n-    TRUE,\t/* The one and only.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  16,\t\t/* Bits in a word.  */\n+  32,\t\t/* Bits in an address.  */\n+  8,\t\t/* Bits in a byte.  */\n+  bfd_arch_cr16c,\n+  bfd_mach_cr16c,\n+  \"cr16c\",\n+  \"cr16c\",\n+  1,\n+  TRUE,\t\t/* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "c6b819f2405382d37746fa5c50370218b7cc7021",
      "filename": "bfd/cpu-cris.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-cris.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -67,7 +67,7 @@ get_compatible (const bfd_arch_info_type *a,\n \n #define N(NUMBER, PRINT, NEXT)  \\\n  { 32, 32, 8, bfd_arch_cris, NUMBER, \"cris\", PRINT, 1, FALSE, \\\n-   get_compatible, bfd_default_scan, bfd_arch_default_fill, NEXT }\n+     get_compatible, bfd_default_scan, bfd_arch_default_fill, NEXT, 0 }\n \n static const bfd_arch_info_type bfd_cris_arch_compat_v10_v32 =\n  N (bfd_mach_cris_v10_v32, \"cris:common_v10_v32\", NULL);\n@@ -97,8 +97,9 @@ const bfd_arch_info_type bfd_cris_arch =\n   bfd_default_scan,\t\t/* Check if a bfd_arch_info_type is a\n \t\t\t\t   match.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  &bfd_cris_arch_v32\t\t/* Pointer to next bfd_arch_info_type in\n+  &bfd_cris_arch_v32,\t\t/* Pointer to next bfd_arch_info_type in\n \t\t\t\t   the same family.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };\n \n /*"
    },
    {
      "sha": "d181edb56ba1ae6892bf89b63951223a655e0cbd",
      "filename": "bfd/cpu-crx.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-crx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-crx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-crx.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n \n \n const bfd_arch_info_type bfd_crx_arch =\n-  {\n-    16,\t\t/* 16 bits in a word.  */\n-    32,\t\t/* 32 bits in an address.  */\n-    8,\t\t/*  8 bits in a byte.  */\n-    bfd_arch_crx, /* enum bfd_architecture arch.  */\n-    bfd_mach_crx,\n-    \"crx\",\t/* Arch name.  */\n-    \"crx\",\t/* Printable name.  */\n-    1,\t\t/* Unsigned int section alignment power.  */\n-    TRUE,\t/* The one and only.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  16,\t\t/* Bits in a word.  */\n+  32,\t\t/* Bits in an address.  */\n+  8,\t\t/* Bits in a byte.  */\n+  bfd_arch_crx, /* Architecture number.  */\n+  bfd_mach_crx,\n+  \"crx\",\t/* Arch name.  */\n+  \"crx\",\t/* Printable name.  */\n+  1,\t\t/* Section alignment power.  */\n+  TRUE,\t\t/* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "463dce564fb2903cc2d53ccff0acd8acab1cec22",
      "filename": "bfd/cpu-csky.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-csky.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,21 +23,22 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n-#define N(NUMBER, PRINT, ISDEFAULT, NEXT)  \\\n-{                                                                      \\\n-  32,                     /* 32 bits in a word */                      \\\n-  32,                     /* 32 bits in an address */                  \\\n-  8,                      /* 8 bits in a byte */                       \\\n-  bfd_arch_csky,          /* Architecture */                           \\\n-  NUMBER,                 /* Machine number */                         \\\n-  \"csky\",                 /* Architecture name */                      \\\n-  PRINT,                  /* Printable name */                         \\\n-  3,                      /* Section align power */                    \\\n-  ISDEFAULT,              /* Is this the default architecture ? */     \\\n-  bfd_default_compatible, /* Architecture comparison function */       \\\n-  bfd_default_scan,       /* String to architecture conversion */      \\\n-  bfd_arch_default_fill,                                               \\\n-  NEXT                    /* Next in list */                           \\\n+#define N(NUMBER, PRINT, ISDEFAULT, NEXT)\t\t\t        \\\n+{                                                                       \\\n+  32,                     /* Bits in a word.  */                        \\\n+  32,                     /* Bits in an address.  */                    \\\n+  8,                      /* Bits in a byte.  */                        \\\n+  bfd_arch_csky,          /* Architecture.  */                          \\\n+  NUMBER,                 /* Machine number.  */                        \\\n+  \"csky\",                 /* Architecture name.  */                     \\\n+  PRINT,                  /* Printable name.  */                        \\\n+  3,                      /* Section align power.  */                   \\\n+  ISDEFAULT,              /* Is this the default architecture ?  */\t\\\n+  bfd_default_compatible, /* Architecture comparison function.  */\t\\\n+  bfd_default_scan,       /* String to architecture conversion.  */\t\\\n+  bfd_arch_default_fill,\t\t\t\t\t\t\\\n+  NEXT,                   /* Next in list.  */\t\t\t\t\\\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\t\t\\\n }\n \n static const bfd_arch_info_type arch_info_struct[] ="
    },
    {
      "sha": "f78fe88435cf5573725728ba2a7e11aa0dc761c6",
      "filename": "bfd/cpu-d10v.c",
      "status": "modified",
      "additions": 21,
      "deletions": 45,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-d10v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-d10v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-d10v.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,53 +23,29 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    16,         /* Bits in a word.  */\t\t\t\\\n+    18,         /* Bits in an address.  */\t\t\\\n+    8,\t        /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_d10v,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"d10v\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    4,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n static const bfd_arch_info_type d10v_ts3_info =\n-{\n-  16,\t/* 16 bits in a word.  */\n-  18,\t/* really 16 bits in an address, but code has 18 bit range.  */\n-  8,\t/* 8 bits in a byte.  */\n-  bfd_arch_d10v,\n-  bfd_mach_d10v_ts3,\n-  \"d10v\",\n-  \"d10v:ts3\",\n-  4,\t/* Section alignment power.  */\n-  FALSE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  0,\n-};\n+  N (bfd_mach_d10v_ts3, \"d10v:ts3\", FALSE, NULL);\n \n static const bfd_arch_info_type d10v_ts2_info =\n-{\n-  16,\n-  18,\n-  8,\n-  bfd_arch_d10v,\n-  bfd_mach_d10v_ts2,\n-  \"d10v\",\n-  \"d10v:ts2\",\n-  4,\n-  FALSE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  & d10v_ts3_info,\n-};\n+  N (bfd_mach_d10v_ts2, \"d10v:ts2\", FALSE, & d10v_ts3_info);\n \n const bfd_arch_info_type bfd_d10v_arch =\n-{\n-  16,\n-  18,\n-  8,\n-  bfd_arch_d10v,\n-  bfd_mach_d10v,\n-  \"d10v\",\n-  \"d10v\",\n-  4,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  & d10v_ts2_info,\n-};\n+  N (bfd_mach_d10v, \"d10v\", TRUE, & d10v_ts2_info);"
    },
    {
      "sha": "f987f1c4bfb7c88f9a4d83f0a05e254911aa99b0",
      "filename": "bfd/cpu-d30v.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-d30v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-d30v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-d30v.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,17 +25,18 @@\n \n const bfd_arch_info_type bfd_d30v_arch =\n {\n-    32,\t/* Bits in a word.  */\n-    32,\t/* Bits in an address.  */\n-    8,\t/* Bits in a byte.  */\n-    bfd_arch_d30v,\n-    0,\n-    \"d30v\",\n-    \"d30v\",\n-    4, /* Section alignment power.  */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+  32,\t/* Bits in a word.  */\n+  32,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_d30v,\n+  0,\n+  \"d30v\",\n+  \"d30v\",\n+  4, /* Section alignment power.  */\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "445515c43751d2893600e3d4c4301d3a04366537",
      "filename": "bfd/cpu-dlx.c",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-dlx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-dlx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-dlx.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_dlx_arch =\n-  {\n-    32,\t/* 32 bits in a word.  */\n-    32,\t/* 32 bits in an address.  */\n-    8,\t/* 8 bits in a byte.  */\n-    bfd_arch_dlx,\n-    0,\t/* Only 1 machine.  */\n-    \"dlx\",\n-    \"dlx\",\n-    4,\n-    TRUE, /* The one and only.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+{\n+  32,\t/* Bits in a word.  */\n+  32,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_dlx,\n+  0,\t/* Machine number.  */\n+  \"dlx\",\n+  \"dlx\",\n+  4,\n+  TRUE, /* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "dace97483dbbd0e7574fa5d2229b81f46b12ef63",
      "filename": "bfd/cpu-epiphany.c",
      "status": "modified",
      "additions": 21,
      "deletions": 30,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-epiphany.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-epiphany.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-epiphany.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,36 +23,27 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(NUMBER, PRINT, ALIGN, DEFAULT, NEXT)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,         /* Bits in a word.  */\t\t\t\\\n+    32,         /* Bits in an address.  */\t\t\\\n+    8,\t        /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_epiphany,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"epiphany\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    ALIGN,\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_epiphany16_arch =\n-{\n-  32,\t\t\t\t/* Bits per word */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_epiphany,\t\t/* Architecture.  */\n-  bfd_mach_epiphany16,\t\t/* Machine.  */\n-  \"epiphany\",\t\t\t/* Architecture name.  */\n-  \"epiphany16\",\t\t\t/* Machine name.  */\n-  1,\t\t\t\t/* Section align power.  */\n-  FALSE,\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n-};\n+  N (bfd_mach_epiphany16, \"epiphany16\", 1, FALSE, NULL);\n \n const bfd_arch_info_type bfd_epiphany_arch =\n-{\n-  32,\t\t\t\t/* Bits per word - not really true.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_epiphany,\t\t/* Architecture.  */\n-  bfd_mach_epiphany32,\t\t/* Machine.  */\n-  \"epiphany\",\t\t\t/* Architecture name.  */\n-  \"epiphany32\",\t\t\t/* Machine name.  */\n-  2,\t\t\t\t/* Section align power.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  & bfd_epiphany16_arch\t/* Next in list.  */\n-};\n+  N (bfd_mach_epiphany32, \"epiphany32\", 2, TRUE, & bfd_epiphany16_arch);\n+"
    },
    {
      "sha": "28b7460d5df330bf6621beff28ec9cce1c5daecf",
      "filename": "bfd/cpu-fr30.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-fr30.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-fr30.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-fr30.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_fr30_arch =\n {\n-  32,\t\t\t\t/* bits per word */\n-  32,\t\t\t\t/* bits per address */\n-  8,\t\t\t\t/* bits per byte */\n-  bfd_arch_fr30,\t\t/* architecture */\n-  bfd_mach_fr30,\t\t/* machine */\n-  \"fr30\",\t\t\t/* architecture name */\n-  \"fr30\",\t\t\t/* printable name */\n-  4,\t\t\t\t/* section align power */\n-  TRUE,\t\t\t\t/* the default ? */\n-  bfd_default_compatible,\t/* architecture comparison fn */\n-  bfd_default_scan,\t\t/* string to architecture convert fn */\n+  32,\t\t\t\t/* Bits per word.  */\n+  32,\t\t\t\t/* Bits per address.  */\n+  8,\t\t\t\t/* Bits per byte.  */\n+  bfd_arch_fr30,\t\t/* Architecture.  */\n+  bfd_mach_fr30,\t\t/* Machine.  */\n+  \"fr30\",\t\t\t/* Architecture name.  */\n+  \"fr30\",\t\t\t/* Printable name.  */\n+  4,\t\t\t\t/* Section align power.  */\n+  TRUE,\t\t\t\t/* The default ?  */\n+  bfd_default_compatible,\t/* Architecture comparison fn.  */\n+  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* next in list */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "622258f0b9cf195292c50a0af77ca550a170cc42",
      "filename": "bfd/cpu-frv.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-frv.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,19 +24,20 @@\n \n #define FRV_ARCH(MACHINE, NAME, DEFAULT, NEXT)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  32,\t\t\t\t/* 32 bits in a word */\t\t\t\\\n-  32,\t\t\t\t/* 32 bits in an address */\t\t\\\n-  8,\t\t\t\t/* 8 bits in a byte */\t\t\t\\\n-  bfd_arch_frv,\t\t\t/* architecture */\t\t\t\\\n-  MACHINE,\t\t\t/* which machine */\t\t\t\\\n-  \"frv\",\t\t\t/* architecture name */\t\t\t\\\n-  NAME,\t\t\t\t/* machine name */\t\t\t\\\n-  4,\t\t\t\t/* default alignment */\t\t\t\\\n-  DEFAULT,\t\t\t/* is this the default? */\t\t\\\n-  bfd_default_compatible,\t/* architecture comparison fn */\t\\\n-  bfd_default_scan,\t\t/* string to architecture convert fn */\t\\\n+  32,\t\t\t\t/* Bits in a word.  */\t\t\t\\\n+  32,\t\t\t\t/* Bits in an address.  */\t\t\\\n+  8,\t\t\t\t/* Bits in a byte.  */\t\t\t\\\n+  bfd_arch_frv,\t\t\t/* Architecture number.  */\t\t\\\n+  MACHINE,\t\t\t/* Machine number.  */\t\t\t\\\n+  \"frv\",\t\t\t/* Architecture name.  */\t\t\\\n+  NAME,\t\t\t\t/* Machine name.  */\t\t\t\\\n+  4,\t\t\t\t/* Section alignment.  */\t\t\\\n+  DEFAULT,\t\t\t/* Is this the default?  */\t\t\\\n+  bfd_default_compatible,\t/* Architecture comparison fn.  */\t\\\n+  bfd_default_scan,\t\t/* String to architecture convert fn. */\\\n   bfd_arch_default_fill,\t/* Default fill.  */\t\t\t\\\n-  NEXT\t\t\t\t/* next in list */\t\t\t\\\n+  NEXT,\t\t\t\t/* Next in list.  */\t\t\t\\\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\t\t\\\n }\n \n static const bfd_arch_info_type arch_info_300"
    },
    {
      "sha": "3c33e3fdf02b5d99eb94cc51cb4cb0b8514686d9",
      "filename": "bfd/cpu-ft32.c",
      "status": "modified",
      "additions": 24,
      "deletions": 47,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ft32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ft32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-ft32.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,54 +22,31 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,        /* Bits in a word.  */\t\t\t\\\n+    32,        /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_ft32,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"ft32\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    2,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n \n static const bfd_arch_info_type arch_info_struct[] =\n-  {\n-    {\n-      32,\t\t/* 32 bits in a word.  */\n-      32,\t\t/* 32 bits in an address.  */\n-      8,\t\t/*  8 bits in a byte.  */\n-      bfd_arch_ft32,\t/* enum bfd_architecture arch.  */\n-      bfd_mach_ft32,\n-      \"ft32\",\t\t/* Arch name.  */\n-      \"ft32\",\t\t/* Printable name.  */\n-      2,\t\t/* Unsigned int section alignment power.  */\n-      FALSE,\t\t/* The one and only.  */\n-      bfd_default_compatible,\n-      bfd_default_scan,\n-      bfd_arch_default_fill,\n-      &arch_info_struct[1],\n-    },\n-    {\n-      32,\t\t/* 32 bits in a word.  */\n-      32,\t\t/* 32 bits in an address.  */\n-      8,\t\t/*  8 bits in a byte.  */\n-      bfd_arch_ft32,\t/* enum bfd_architecture arch.  */\n-      bfd_mach_ft32b,\n-      \"ft32b\",\t\t/* Arch name.  */\n-      \"ft32b\",\t\t/* Printable name.  */\n-      2,\t\t/* Unsigned int section alignment power.  */\n-      FALSE,\t\t/* The one and only.  */\n-      bfd_default_compatible,\n-      bfd_default_scan,\n-      bfd_arch_default_fill,\n-      0,\n-    },\n-  };\n+{\n+  N (bfd_mach_ft32, \"ft32\", FALSE, &arch_info_struct[1]),\n+  N (bfd_mach_ft32b, \"ft32b\", FALSE, NULL)\n+};\n \n const bfd_arch_info_type bfd_ft32_arch =\n-  {\n-    32,\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t/*  8 bits in a byte.  */\n-    bfd_arch_ft32,\t/* enum bfd_architecture arch.  */\n-    bfd_mach_ft32,\n-    \"ft32\",\t\t/* Arch name.  */\n-    \"ft32\",\t\t/* Printable name.  */\n-    2,\t\t\t/* Unsigned int section alignment power.  */\n-    TRUE,\t\t/* The one and only.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    arch_info_struct,\n-  };\n+  N (bfd_mach_ft32, \"ft32\", TRUE, arch_info_struct);\n+"
    },
    {
      "sha": "53dd4ec52b53d6ee5b57216b88406774a6871e1b",
      "filename": "bfd/cpu-h8300.c",
      "status": "modified",
      "additions": 11,
      "deletions": 105,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-h8300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-h8300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-h8300.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -113,124 +113,30 @@ compatible (const bfd_arch_info_type *in, const bfd_arch_info_type *out)\n     return in;\n }\n \n+#define N(word, addr, number, name, print, default, next)\t  \\\n+  { word, addr, 8, bfd_arch_h8300, number, name, print, 1, default, \\\n+    compatible, h8300_scan, bfd_arch_default_fill, next, 0 }\n+\n static const bfd_arch_info_type h8300sxn_info_struct =\n-{\n-  32,\t\t\t\t/* 32 bits in a word */\n-  16,\t\t\t\t/* 16 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300sxn,\n-  \"h8300sxn\",\t\t\t/* arch_name  */\n-  \"h8300sxn\",\t\t\t/* printable name */\n-  1,\n-  FALSE,\t\t\t/* the default machine */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  0\n-};\n+  N (32, 16, bfd_mach_h8300sxn, \"h8300sxn\", \"h8300sxn\", FALSE, NULL);\n \n static const bfd_arch_info_type h8300sx_info_struct =\n-{\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300sx,\n-  \"h8300sx\",\t\t\t/* arch_name  */\n-  \"h8300sx\",\t\t\t/* printable name */\n-  1,\n-  FALSE,\t\t\t/* the default machine */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  &h8300sxn_info_struct\n-};\n+  N (32, 32, bfd_mach_h8300sx, \"h8300sx\", \"h8300sx\", FALSE, &h8300sxn_info_struct);\n \n static const bfd_arch_info_type h8300sn_info_struct =\n-{\n-  32,\t\t\t\t/* 32 bits in a word.  */\n-  16,\t\t\t\t/* 16 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300sn,\n-  \"h8300sn\",\t\t\t/* Architecture name.  */\n-  \"h8300sn\",\t\t\t/* Printable name.  */\n-  1,\n-  FALSE,\t\t\t/* The default machine.  */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  &h8300sx_info_struct\n-};\n+  N (32, 16, bfd_mach_h8300sn, \"h8300sn\", \"h8300sn\", FALSE, &h8300sx_info_struct);\n \n static const bfd_arch_info_type h8300hn_info_struct =\n-{\n-  32,\t\t\t\t/* 32 bits in a word.  */\n-  16,\t\t\t\t/* 16 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300hn,\n-  \"h8300hn\",\t\t\t/* Architecture name.  */\n-  \"h8300hn\",\t\t\t/* Printable name.  */\n-  1,\n-  FALSE,\t\t\t/* The default machine.  */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  &h8300sn_info_struct\n-};\n+  N (32, 16, bfd_mach_h8300hn, \"h8300hn\", \"h8300hn\", FALSE, &h8300sn_info_struct);\n \n static const bfd_arch_info_type h8300s_info_struct =\n-{\n-  32,\t\t\t\t/* 32 bits in a word.  */\n-  32,\t\t\t\t/* 32 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300s,\n-  \"h8300s\",\t\t\t/* Architecture name.  */\n-  \"h8300s\",\t\t\t/* Printable name.  */\n-  1,\n-  FALSE,\t\t\t/* The default machine.  */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  & h8300hn_info_struct\n-};\n+  N (32, 32, bfd_mach_h8300s, \"h8300s\", \"h8300s\", FALSE, & h8300hn_info_struct);\n \n static const bfd_arch_info_type h8300h_info_struct =\n-{\n-  32,\t\t\t\t/* 32 bits in a word.  */\n-  32,\t\t\t\t/* 32 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300h,\n-  \"h8300h\",\t\t\t/* Architecture name.  */\n-  \"h8300h\",\t\t\t/* Printable name.  */\n-  1,\n-  FALSE,\t\t\t/* The default machine.  */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  &h8300s_info_struct\n-};\n+  N (32, 32, bfd_mach_h8300h, \"h8300h\", \"h8300h\", FALSE, &h8300s_info_struct);\n \n const bfd_arch_info_type bfd_h8300_arch =\n-{\n-  16,\t\t\t\t/* 16 bits in a word.  */\n-  16,\t\t\t\t/* 16 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_h8300,\n-  bfd_mach_h8300,\n-  \"h8300\",\t\t\t/* Architecture name.  */\n-  \"h8300\",\t\t\t/* Printable name.  */\n-  1,\n-  TRUE,\t\t\t\t/* The default machine.  */\n-  compatible,\n-  h8300_scan,\n-  bfd_arch_default_fill,\n-  &h8300h_info_struct\n-};\n+  N (16, 16, bfd_mach_h8300, \"h8300\", \"h8300\", TRUE, &h8300h_info_struct);\n \n /* Pad the given address to 32 bits, converting 16-bit and 24-bit\n    addresses into the values they would have had on a h8s target.  */"
    },
    {
      "sha": "2bcc0312daf85f0ee2d5e448768efe9a90b5d0e1",
      "filename": "bfd/cpu-hppa.c",
      "status": "modified",
      "additions": 25,
      "deletions": 62,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-hppa.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,72 +22,35 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(BITS, NUMBER, PRINT, DEFAULT, NEXT) \\\n+  {\t\t\t\t\t\t\t\\\n+    BITS,      /* Bits in a word.  */\t\t\t\\\n+    BITS,      /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_hppa,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"hppa\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n+\n static const bfd_arch_info_type bfd_hppa10_arch =\n-{\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_hppa,\n-  bfd_mach_hppa10,\t\t/* By convention PA1.0 = 10 */\n-  \"hppa\",\n-  \"hppa1.0\",\n-  3,\n-  TRUE,\t\t\t\t/* Unless we use 1.1 specific features */\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  0,\n-};\n+  N (32, bfd_mach_hppa10, \"hppa1.0\", TRUE, NULL);\n \n-/* PA2.0 in narrow mode */\n+/* PA2.0 in narrow mode.  */\n static const bfd_arch_info_type bfd_hppa20_arch =\n-{\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_hppa,\n-  bfd_mach_hppa20,\t\t/* By convention PA2.0 = 20 */\n-  \"hppa\",\n-  \"hppa2.0\",\n-  3,\n-  FALSE,\t\t\t/* Unless we use 1.1 specific features */\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  &bfd_hppa10_arch,\n-};\n+  N (32, bfd_mach_hppa20, \"hppa2.0\", FALSE, &bfd_hppa10_arch);\n \n-/* PA2.0 in wide mode */\n+/* PA2.0 in wide mode.  */\n static const bfd_arch_info_type bfd_hppa20w_arch =\n-{\n-  64,\t\t\t\t/* 64 bits in a word */\n-  64,\t\t\t\t/* 64 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_hppa,\n-  bfd_mach_hppa20w,\t\t/* ??? How best to describe wide mode here?  */\n-  \"hppa\",\n-  \"hppa2.0w\",\n-  3,\n-  FALSE,\t\t\t/* Unless we use 1.1 specific features */\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  &bfd_hppa20_arch,\n-};\n+  N (64, bfd_mach_hppa20w, \"hppa2.0w\", FALSE, &bfd_hppa20_arch);\n \n const bfd_arch_info_type bfd_hppa_arch =\n-{\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_hppa,\n-  bfd_mach_hppa11,\t\t/* By convention PA1.1 = 11 */\n-  \"hppa\",\n-  \"hppa1.1\",\n-  3,\n-  FALSE,\t\t\t/* 1.1 specific features used */\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  &bfd_hppa20w_arch,\n-};\n+  N (32, bfd_mach_hppa11, \"hppa1.1\", FALSE, &bfd_hppa20w_arch);"
    },
    {
      "sha": "5df643551986c24308f64451da20a48e7178e8a9",
      "filename": "bfd/cpu-i386.c",
      "status": "modified",
      "additions": 39,
      "deletions": 150,
      "changes": 189,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-i386.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -130,173 +130,62 @@ bfd_arch_i386_onebyte_nop_fill (bfd_size_type count,\n   return fill;\n }\n \n+#define N(BITS, MACH, NAME, PRINT, DEF, FILL, NEXT)\t\\\n+  { BITS, /* Bits in a word.  */\t\t\\\n+    BITS, /* Bits in an address.  */\t\t\\\n+    8,    /* Bits in a byte. */\t\t\t\\\n+    bfd_arch_i386,\t\t\t\t\\\n+    MACH, /* Machine number.  */\t\t\\\n+    NAME,\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\\\n+    3,   /* Section alignment power.  */\t\\\n+    DEF, /* Default architecture version ?  */\t\\\n+    bfd_i386_compatible,\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\\\n+    FILL,\t\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\\\n+    0 /* Maximum instruction length.  */\t\\\n+  }\n+\n \n static const bfd_arch_info_type bfd_x64_32_nacl_arch =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_x64_32_nacl,\n-  \"i386\",\n-  \"i386:x64-32:nacl\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_onebyte_nop_fill,\n-  NULL\n-};\n+  N (64, bfd_mach_x64_32_nacl, \"i386\", \"i386:x64-32:nacl\",\n+     FALSE, bfd_arch_i386_onebyte_nop_fill, NULL);\n \n static const bfd_arch_info_type bfd_x86_64_nacl_arch =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_x86_64_nacl,\n-  \"i386\",\n-  \"i386:x86-64:nacl\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_onebyte_nop_fill,\n-  &bfd_x64_32_nacl_arch\n-};\n+  N (64, bfd_mach_x86_64_nacl, \"i386\", \"i386:x86-64:nacl\",\n+     FALSE, bfd_arch_i386_onebyte_nop_fill, &bfd_x64_32_nacl_arch);\n \n const bfd_arch_info_type bfd_i386_nacl_arch =\n-{\n-  32,\t/* 32 bits in a word */\n-  32,\t/* 32 bits in an address */\n-  8,\t/* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_i386_i386_nacl,\n-  \"i386\",\n-  \"i386:nacl\",\n-  3,\n-  TRUE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_onebyte_nop_fill,\n-  &bfd_x86_64_nacl_arch\n-};\n+  N (32, bfd_mach_i386_i386_nacl, \"i386\", \"i386:nacl\",\n+     TRUE, bfd_arch_i386_onebyte_nop_fill, &bfd_x86_64_nacl_arch);\n+\n \n static const bfd_arch_info_type bfd_x64_32_arch_intel_syntax =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_x64_32_intel_syntax,\n-  \"i386:intel\",\n-  \"i386:x64-32:intel\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_long_nop_fill,\n-  &bfd_i386_nacl_arch\n-};\n+  N (64, bfd_mach_x64_32_intel_syntax, \"i386:intel\", \"i386:x64-32:intel\",\n+     FALSE, bfd_arch_i386_long_nop_fill, &bfd_i386_nacl_arch);\n \n static const bfd_arch_info_type bfd_x86_64_arch_intel_syntax =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_x86_64_intel_syntax,\n-  \"i386:intel\",\n-  \"i386:x86-64:intel\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_long_nop_fill,\n-  &bfd_x64_32_arch_intel_syntax,\n-};\n+  N (64, bfd_mach_x86_64_intel_syntax, \"i386:intel\", \"i386:x86-64:intel\",\n+     FALSE, bfd_arch_i386_long_nop_fill, &bfd_x64_32_arch_intel_syntax);\n \n static const bfd_arch_info_type bfd_i386_arch_intel_syntax =\n-{\n-  32,\t/* 32 bits in a word */\n-  32,\t/* 32 bits in an address */\n-  8,\t/* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_i386_i386_intel_syntax,\n-  \"i386:intel\",\n-  \"i386:intel\",\n-  3,\n-  TRUE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  &bfd_x86_64_arch_intel_syntax\n-};\n+  N (32, bfd_mach_i386_i386_intel_syntax, \"i386:intel\", \"i386:intel\",\n+     TRUE, bfd_arch_i386_short_nop_fill, &bfd_x86_64_arch_intel_syntax);\n+\n \n static const bfd_arch_info_type i8086_arch =\n-{\n-  32,\t/* 32 bits in a word */\n-  32,\t/* 32 bits in an address (well, not really) */\n-  8,\t/* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_i386_i8086,\n-  \"i8086\",\n-  \"i8086\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  &bfd_i386_arch_intel_syntax\n-};\n+  N (32, bfd_mach_i386_i8086, \"i8086\", \"i8086\",\n+     FALSE, bfd_arch_i386_short_nop_fill, &bfd_i386_arch_intel_syntax);\n \n static const bfd_arch_info_type bfd_x64_32_arch =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_x64_32,\n-  \"i386\",\n-  \"i386:x64-32\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_long_nop_fill,\n-  &i8086_arch\n-};\n+  N (64, bfd_mach_x64_32, \"i386\", \"i386:x64-32\",\n+     FALSE, bfd_arch_i386_long_nop_fill, &i8086_arch);\n \n static const bfd_arch_info_type bfd_x86_64_arch =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_x86_64,\n-  \"i386\",\n-  \"i386:x86-64\",\n-  3,\n-  FALSE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_long_nop_fill,\n-  &bfd_x64_32_arch\n-};\n+  N (64, bfd_mach_x86_64, \"i386\", \"i386:x86-64\",\n+     FALSE, bfd_arch_i386_long_nop_fill, &bfd_x64_32_arch);\n \n const bfd_arch_info_type bfd_i386_arch =\n-{\n-  32,\t/* 32 bits in a word */\n-  32,\t/* 32 bits in an address */\n-  8,\t/* 8 bits in a byte */\n-  bfd_arch_i386,\n-  bfd_mach_i386_i386,\n-  \"i386\",\n-  \"i386\",\n-  3,\n-  TRUE,\n-  bfd_i386_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  &bfd_x86_64_arch\n-};\n+  N (32, bfd_mach_i386_i386, \"i386\", \"i386\",\n+     TRUE, bfd_arch_i386_short_nop_fill, &bfd_x86_64_arch);"
    },
    {
      "sha": "300007ade6f6e852c8887f3026bc5d2f56d8e732",
      "filename": "bfd/cpu-ia64.c",
      "status": "modified",
      "additions": 20,
      "deletions": 30,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-ia64.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,38 +23,28 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT) \\\n+  {\t\t\t\t\t\t\t\\\n+    64,        /* Bits in a word.  */\t\t\t\\\n+    BITS_ADDR, /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_ia64,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"ia64\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_ia64_elf32_arch =\n-  {\n-    64,\t/* 64 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_ia64,\n-    bfd_mach_ia64_elf32,\n-    \"ia64\",\n-    \"ia64-elf32\",\n-    3,\t/* log2 of section alignment */\n-    TRUE, /* the one and only */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+  N (32, bfd_mach_ia64_elf32, \"ia64-elf32\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_ia64_arch =\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_ia64,\n-    bfd_mach_ia64_elf64,\n-    \"ia64\",\n-    \"ia64-elf64\",\n-    3,\t/* log2 of section alignment */\n-    TRUE, /* the one and only */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_ia64_elf32_arch,\n-  };\n+  N (64, bfd_mach_ia64_elf64, \"ia64-elf64\", TRUE, &bfd_ia64_elf32_arch);\n \n #include \"cpu-ia64-opc.c\""
    },
    {
      "sha": "6630a7a662f8371ef4eaed33fcaa63de23f17b50",
      "filename": "bfd/cpu-iamcu.c",
      "status": "modified",
      "additions": 8,
      "deletions": 30,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-iamcu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-iamcu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-iamcu.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,36 +25,14 @@\n extern void * bfd_arch_i386_short_nop_fill (bfd_size_type, bfd_boolean,\n \t\t\t\t\t    bfd_boolean);\n \n+#define N(number, name, print, next)\t\t\t     \\\n+  { 32, 32, 8, bfd_arch_iamcu, number, name, print, 3, TRUE, \\\n+    bfd_default_compatible, bfd_default_scan,\t\t     \\\n+    bfd_arch_i386_short_nop_fill, next, 0 }\n+\n static const bfd_arch_info_type bfd_iamcu_arch_intel_syntax =\n-{\n-  32, /* 32 bits in a word */\n-  32, /* 32 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_iamcu,\n-  bfd_mach_i386_iamcu_intel_syntax,\n-  \"iamcu:intel\",\n-  \"iamcu:intel\",\n-  3,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  0\n-};\n+  N (bfd_mach_i386_iamcu_intel_syntax, \"iamcu:intel\", \"iamcu:intel\", NULL);\n \n const bfd_arch_info_type bfd_iamcu_arch =\n-{\n-  32, /* 32 bits in a word */\n-  32, /* 32 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_iamcu,\n-  bfd_mach_i386_iamcu,\n-  \"iamcu\",\n-  \"iamcu\",\n-  3,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  &bfd_iamcu_arch_intel_syntax\n-};\n+  N (bfd_mach_i386_iamcu, \"iamcu\", \"iamcu\", &bfd_iamcu_arch_intel_syntax);\n+"
    },
    {
      "sha": "217229dfd17dcf3e2ba8f297be0bad612ba4c3da",
      "filename": "bfd/cpu-ip2k.c",
      "status": "modified",
      "additions": 21,
      "deletions": 30,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ip2k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ip2k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-ip2k.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,36 +22,27 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,         /* Bits in a word.  */\t\t\t\\\n+    16,         /* Bits in an address.  */\t\t\\\n+    8,\t        /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_ip2k,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"ip2k\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    1,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_ip2k_nonext_arch =\n-{\n-  32,\t\t\t\t/* Bits per word - not really true.  */\n-  16,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_ip2k,\t\t/* Architecture.  */\n-  bfd_mach_ip2022,\t\t/* Machine.  */\n-  \"ip2k\",\t\t\t/* Architecture name.  */\n-  \"ip2022\",\t\t\t/* Machine name.  */\n-  1,\t\t\t\t/* Section align power.  */\n-  FALSE,\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n-};\n+  N (bfd_mach_ip2022, \"ip2022\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_ip2k_arch =\n-{\n-  32,\t\t\t\t/* Bits per word - not really true.  */\n-  16,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_ip2k,\t\t/* Architecture.  */\n-  bfd_mach_ip2022ext,\t\t/* Machine.  */\n-  \"ip2k\",\t\t\t/* Architecture name.  */\n-  \"ip2022ext\",\t\t\t/* Machine name.  */\n-  1,\t\t\t\t/* Section align power.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  & bfd_ip2k_nonext_arch\t/* Next in list.  */\n-};\n+  N (bfd_mach_ip2022ext, \"ip2022ext\", TRUE, & bfd_ip2k_nonext_arch);\n+"
    },
    {
      "sha": "a8d09478bbd040a6a6899fb4aaeff2b795e87678",
      "filename": "bfd/cpu-iq2000.c",
      "status": "modified",
      "additions": 21,
      "deletions": 32,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-iq2000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-iq2000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-iq2000.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,38 +22,27 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n-static const bfd_arch_info_type arch_info_struct[] =\n-{\n-  {\n-    32,\t\t\t\t/* bits per word */\n-    32,\t\t\t\t/* bits per address */\n-    8,\t\t\t\t/* bits per byte */\n-    bfd_arch_iq2000,\t\t/* architecture */\n-    bfd_mach_iq10,\t\t/* machine */\n-    \"iq2000\",\t\t\t/* architecture name */\n-    \"iq10\",\t\t\t/* printable name */\n-    3,\t\t\t\t/* section align power */\n-    FALSE,\t\t\t/* the default ? */\n-    bfd_default_compatible,\t/* architecture comparison fn */\n-    bfd_default_scan,\t\t/* string to architecture convert fn */\n-    bfd_arch_default_fill,\t/* Default fill.  */\n-    NULL\t\t\t/* next in list */\n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,         /* Bits in a word.  */\t\t\t\\\n+    32,         /* Bits in an address.  */\t\t\\\n+    8,\t        /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_iq2000,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"iq2000\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n-};\n+\n+static const bfd_arch_info_type arch_info_struct =\n+  N (bfd_mach_iq10, \"iq10\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_iq2000_arch =\n-{\n-  32,\t\t\t\t/* bits per word */\n-  32,\t\t\t\t/* bits per address */\n-  8,\t\t\t\t/* bits per byte */\n-  bfd_arch_iq2000,\t\t/* architecture */\n-  bfd_mach_iq2000,\t\t/* machine */\n-  \"iq2000\",\t\t\t/* architecture name */\n-  \"iq2000\",\t\t\t/* printable name */\n-  3,\t\t\t\t/* section align power */\n-  TRUE,\t\t\t\t/* the default ? */\n-  bfd_default_compatible,\t/* architecture comparison fn */\n-  bfd_default_scan,\t\t/* string to architecture convert fn */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  &arch_info_struct[0],\t\t/* next in list */\n-};\n+  N (bfd_mach_iq2000, \"iq2000\", TRUE, &arch_info_struct);\n+"
    },
    {
      "sha": "f5bcec168da40b3476f4981e2d4bec22a67826a6",
      "filename": "bfd/cpu-k1om.c",
      "status": "modified",
      "additions": 8,
      "deletions": 30,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-k1om.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-k1om.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-k1om.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,36 +25,14 @@\n extern void * bfd_arch_i386_short_nop_fill (bfd_size_type, bfd_boolean,\n \t\t\t\t\t    bfd_boolean);\n \n+#define N(number, name, print, next)\t\t\t     \\\n+  { 64, 64, 8, bfd_arch_k1om, number, name, print, 3, TRUE, \\\n+    bfd_default_compatible, bfd_default_scan,\t\t     \\\n+    bfd_arch_i386_short_nop_fill, next, 9 }\n+\n static const bfd_arch_info_type bfd_k1om_arch_intel_syntax =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_k1om,\n-  bfd_mach_k1om_intel_syntax,\n-  \"k1om:intel\",\n-  \"k1om:intel\",\n-  3,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  0\n-};\n+  N (bfd_mach_k1om_intel_syntax, \"k1om:intel\", \"k1om:intel\", NULL);\n \n const bfd_arch_info_type bfd_k1om_arch =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_k1om,\n-  bfd_mach_k1om,\n-  \"k1om\",\n-  \"k1om\",\n-  3,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  &bfd_k1om_arch_intel_syntax\n-};\n+  N (bfd_mach_k1om, \"k1om\", \"k1om\", &bfd_k1om_arch_intel_syntax);\n+"
    },
    {
      "sha": "063a5aa1e7a1b36799975daa1e9fc46f721e0070",
      "filename": "bfd/cpu-l1om.c",
      "status": "modified",
      "additions": 7,
      "deletions": 30,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-l1om.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-l1om.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-l1om.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,36 +25,13 @@\n extern void * bfd_arch_i386_short_nop_fill (bfd_size_type, bfd_boolean,\n \t\t\t\t\t    bfd_boolean);\n \n+#define N(number, name, print, next)\t\t\t     \\\n+  { 64, 64, 8, bfd_arch_l1om, number, name, print, 3, TRUE, \\\n+    bfd_default_compatible, bfd_default_scan,\t\t     \\\n+    bfd_arch_i386_short_nop_fill, next, 0 }\n+\n static const bfd_arch_info_type bfd_l1om_arch_intel_syntax =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_l1om,\n-  bfd_mach_l1om_intel_syntax,\n-  \"l1om:intel\",\n-  \"l1om:intel\",\n-  3,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  0\n-};\n+  N (bfd_mach_l1om_intel_syntax, \"l1om:intel\", \"l1om:intel\", NULL);\n \n const bfd_arch_info_type bfd_l1om_arch =\n-{\n-  64, /* 64 bits in a word */\n-  64, /* 64 bits in an address */\n-  8,  /* 8 bits in a byte */\n-  bfd_arch_l1om,\n-  bfd_mach_l1om,\n-  \"l1om\",\n-  \"l1om\",\n-  3,\n-  TRUE,\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_i386_short_nop_fill,\n-  &bfd_l1om_arch_intel_syntax\n-};\n+  N (bfd_mach_l1om, \"l1om\", \"l1om\", &bfd_l1om_arch_intel_syntax);"
    },
    {
      "sha": "9711e0654eba24a9730175ebda8e9ef86816e7f5",
      "filename": "bfd/cpu-lm32.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-lm32.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,17 +25,18 @@\n \n const bfd_arch_info_type bfd_lm32_arch =\n {\n-    32,\t\t\t\t  /* Bits in word.  */\n-    32,\t\t\t\t  /* Bits in address.  */\n-    8,\t\t\t\t  /* Bits in byte.  */\n-    bfd_arch_lm32,\t\t  /* Enum bfd_architecture.  */\n-    bfd_mach_lm32,\t\t  /* Machine number.  */\n-    \"lm32\",\t\t\t  /* Architecture name.  */\n-    \"lm32\",\t\t\t  /* Printable name.  */\n-    4,\t\t\t\t  /* Alignment.  */\n-    TRUE,\t\t\t  /* Is this the default machine for the target.  */\n-    bfd_default_compatible,\t  /* Function callback to test if two files have compatible machines.  */\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    NULL\t\t\t  /* Next.  */\n+  32,\t\t\t  /* Bits in word.  */\n+  32,\t\t\t  /* Bits in address.  */\n+  8,\t\t\t  /* Bits in byte.  */\n+  bfd_arch_lm32,\t  /* Enum bfd_architecture.  */\n+  bfd_mach_lm32,\t  /* Machine number.  */\n+  \"lm32\",\t\t  /* Architecture name.  */\n+  \"lm32\",\t\t  /* Printable name.  */\n+  4,\t\t\t  /* Alignment.  */\n+  TRUE,\t\t\t  /* Is this the default machine for the target.  */\n+  bfd_default_compatible, /* Function callback to test if two files have compatible machines.  */\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\t\t\t  /* Next.  */\n+  0 \t\t\t  /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "96faeb9c9610239a3aca406d3321df3a5413ada3",
      "filename": "bfd/cpu-m10200.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m10200.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,18 +23,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_mn10200_arch =\n-  {\n-    16, /* 16 bits in a word */\n-    24, /* 16 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_mn10200,\n-    200,\n-    \"mn10200\",\n-    \"mn10200\",\n-    2,\n-    TRUE, /* the one and only */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  16, /* Bits in a word.  */\n+  24, /* Bits in an address.  */\n+  8,  /* Bits in a byte.  */\n+  bfd_arch_mn10200,\n+  200,\n+  \"mn10200\",\n+  \"mn10200\",\n+  2,\n+  TRUE,   /* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "2681b71edd9f3220fa57e2115032c5580c4ae814",
      "filename": "bfd/cpu-m10300.c",
      "status": "modified",
      "additions": 21,
      "deletions": 45,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m10300.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,53 +22,29 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(NUMBER, NAME, PRINT, DEFAULT, NEXT)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,         /* Bits in a word.  */\t\t\t\\\n+    32,         /* Bits in an address.  */\t\t\\\n+    8,\t        /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_mn10300,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    NAME,\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    2,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_am33_2_arch =\n-  {\n-    32, /* 32 bits in a word */\n-    32, /* 32 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_mn10300,\n-    332,\n-    \"am33_2\",\n-    \"am33-2\",\n-    2,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+  N (bfd_mach_am33_2, \"am33_2\", \"am33-2\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_am33_arch =\n-  {\n-    32, /* 32 bits in a word */\n-    32, /* 32 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_mn10300,\n-    330,\n-    \"am33\",\n-    \"am33\",\n-    2,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_am33_2_arch,\n-  };\n+  N (bfd_mach_am33, \"am33\", \"am33\", FALSE, &bfd_am33_2_arch);\n \n const bfd_arch_info_type bfd_mn10300_arch =\n-  {\n-    32, /* 32 bits in a word */\n-    32, /* 32 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_mn10300,\n-    300,\n-    \"mn10300\",\n-    \"mn10300\",\n-    2,\n-    TRUE, /* the one and only */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_am33_arch,\n-  };\n+  N (bfd_mach_mn10300, \"mn10300\", \"mn10300\", TRUE, &bfd_am33_arch);"
    },
    {
      "sha": "86e6b783d582b65f30cb198d84423a9023569e3b",
      "filename": "bfd/cpu-m32c.c",
      "status": "modified",
      "additions": 8,
      "deletions": 33,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m32c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m32c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m32c.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -35,38 +35,13 @@ m32c_scan (const bfd_arch_info_type * info, const char * string)\n   return bfd_default_scan (info, string);\n }\n \n-static const bfd_arch_info_type arch_info_struct[] =\n-{\n-  {\n-    32,\t\t\t\t/* bits per word */\n-    32,\t\t\t\t/* bits per address */\n-    8,\t\t\t\t/* bits per byte */\n-    bfd_arch_m32c,\t\t/* architecture */\n-    bfd_mach_m32c,\t\t/* machine */\n-    \"m32c\",\t\t\t/* architecture name */\n-    \"m32c\",\t\t\t/* printable name */\n-    3,\t\t\t\t/* section align power */\n-    FALSE,\t\t\t/* the default ? */\n-    bfd_default_compatible,\t/* architecture comparison fn */\n-    m32c_scan,\t\t\t/* string to architecture convert fn */\n-    bfd_arch_default_fill,\t/* Default fill.  */\n-    NULL\t\t\t/* next in list */\n-  },\n-};\n+#define N(number, print, align, default, next)\t\t\t   \\\n+{ 32, 32, 8, bfd_arch_m32c, number, \"m32c\", print, align, default, \\\n+  bfd_default_compatible, m32c_scan, bfd_arch_default_fill, next, 0 }\n+\n+static const bfd_arch_info_type arch_info_struct =\n+  N (bfd_mach_m32c, \"m32c\", 3, FALSE, NULL);\n \n const bfd_arch_info_type bfd_m32c_arch =\n-{\n-  32,\t\t\t\t/* Bits per word.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_m32c,\t\t/* Architecture.  */\n-  bfd_mach_m16c,\t\t/* Machine.  */\n-  \"m32c\",\t\t\t/* Architecture name.  */\n-  \"m16c\",\t\t\t/* Printable name.  */\n-  4,\t\t\t\t/* Section align power.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  m32c_scan,\t\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  &arch_info_struct[0],\t\t/* Next in list.  */\n-};\n+  N (bfd_mach_m16c, \"m16c\", 4, TRUE, &arch_info_struct);\n+"
    },
    {
      "sha": "c911d238653231dae62d82902f12c2176730bbf8",
      "filename": "bfd/cpu-m32r.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m32r.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,8 +23,8 @@\n #include \"libbfd.h\"\n \n #define N(number, print, default, next)  \\\n-{  32, 32, 8, bfd_arch_m32r, number, \"m32r\", print, 4, default, \\\n-     bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next }\n+{ 32, 32, 8, bfd_arch_m32r, number, \"m32r\", print, 4, default, \\\n+  bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n #define M32R2_NEXT   & arch_info_struct [1]\n #define NEXT\t     & arch_info_struct [0]"
    },
    {
      "sha": "23841f88d8bf995d7b37fc6eb8169979726f5a57",
      "filename": "bfd/cpu-m68hc11.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m68hc11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m68hc11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m68hc11.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_m68hc11_arch =\n {\n-    16,\t/* 16 bits in a word */\n-    16,\t/* 16 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_m68hc11,\n-    0,\n-    \"m68hc11\",\n-    \"m68hc11\",\n-    4, /* section alignment power */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+  16,\t/* Bits in a word.  */\n+  16,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_m68hc11,\n+  0,\n+  \"m68hc11\",\n+  \"m68hc11\",\n+  4, /* Section alignment power.  */\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "15b41c75b750ba5fdc4b8781f3555177c1a10bbc",
      "filename": "bfd/cpu-m68hc12.c",
      "status": "modified",
      "additions": 21,
      "deletions": 30,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m68hc12.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m68hc12.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m68hc12.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,36 +22,27 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    16,        /* Bits in a word.  */\t\t\t\\\n+    32,        /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_m68hc12,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"m68hc12\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    4,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_m68hc12s_arch =\n-{\n-    16,\t/* 16 bits in a word */\n-    32,\t/* 16 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_m68hc12,\n-    bfd_mach_m6812s,\n-    \"m68hc12:HCS12\",\n-    \"m68hc12\",\n-    4, /* section alignment power */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-};\n+  N (bfd_mach_m6812s, \"m68hc12:HCS12\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_m68hc12_arch =\n-{\n-    16,\t/* 16 bits in a word */\n-    32,\t/* 16 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_m68hc12,\n-    0,\n-    \"m68hc12\",\n-    \"m68hc12\",\n-    4, /* section alignment power */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_m68hc12s_arch,\n-};\n+  N (bfd_mach_m6812_default, \"m68hc12\", TRUE, &bfd_m68hc12s_arch);\n+"
    },
    {
      "sha": "b3d3358edeec1d3eb0554c54f7ba0efcf86594ff",
      "filename": "bfd/cpu-m68k.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m68k.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -30,7 +30,7 @@ bfd_m68k_compatible (const bfd_arch_info_type *a,\n \n #define N(name, print,d,next)  \\\n {  32, 32, 8, bfd_arch_m68k, name, \"m68k\",print,2,d,bfd_m68k_compatible, \\\n-   bfd_default_scan, bfd_arch_default_fill, next, }\n+   bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n static const bfd_arch_info_type arch_info_struct[] =\n   {"
    },
    {
      "sha": "4cd4ba1044e9e0321770442f10a3a4f3dcc78229",
      "filename": "bfd/cpu-m9s12x.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m9s12x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m9s12x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m9s12x.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n \n const bfd_arch_info_type bfd_m9s12x_arch =\n {\n-    16,\t/* 16 bits in a word.  */\n-    32,\t/* 16 bits in an address.  */\n-    8,\t/* 8 bits in a byte.  */\n-    bfd_arch_m9s12x,\n-    0,\n-    \"m9s12x\",\n-    \"m9s12x\",\n-    4, /* Section alignment power.  */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+  16,\t/* Bits in a word.  */\n+  32,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_m9s12x,\n+  0,\n+  \"m9s12x\",\n+  \"m9s12x\",\n+  4,    /* Section alignment power.  */\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0     /* Maximum offset of a reloc from the start of an insn.  */\n };\n "
    },
    {
      "sha": "91a4822d1d2341ed0eada91f239b36f92ad861e4",
      "filename": "bfd/cpu-m9s12xg.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m9s12xg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-m9s12xg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-m9s12xg.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n \n const bfd_arch_info_type bfd_m9s12xg_arch =\n {\n-    16,\t/* 16 bits in a word.  */\n-    32,\t/* 16 bits in an address.  */\n-    8,\t/* 8 bits in a byte.  */\n-    bfd_arch_m9s12xg,\n-    0,\n-    \"m9s12xg\",\n-    \"m9s12xg\",\n-    4, /* Section alignment power.  */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+  16,\t/* Bits in a word.  */\n+  32,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_m9s12xg,\n+  0,\n+  \"m9s12xg\",\n+  \"m9s12xg\",\n+  4,    /* Section alignment power.  */\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0    /* Maximum offset of a reloc from the start of an insn.  */\n };\n "
    },
    {
      "sha": "36c0b63e77fc479fe822e1fb281737bf39666754",
      "filename": "bfd/cpu-mcore.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-mcore.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_mcore_arch =\n {\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n-  bfd_arch_mcore,\t\t/* Architecture */\n-  0,\t\t\t\t/* Machine number - 0 for now */\n-  \"MCore\",\t\t\t/* Architecture name */\n-  \"MCore\",\t\t\t/* Printable name */\n-  3,\t\t\t\t/* Section align power */\n-  TRUE,\t\t\t\t/* Is this the default architecture ? */\n-  bfd_default_compatible,\t/* Architecture comparison function */\n-  bfd_default_scan,\t\t/* String to architecture conversion */\n+  32,\t\t\t\t/* Bits in a word.  */\n+  32,\t\t\t\t/* Bits in an address.  */\n+  8,\t\t\t\t/* Bits in a byte.  */\n+  bfd_arch_mcore,\t\t/* Architecture number.  */\n+  0,\t\t\t\t/* Machine number - 0 for now.  */\n+  \"MCore\",\t\t\t/* Architecture name.  */\n+  \"MCore\",\t\t\t/* Machine name.  */\n+  3,\t\t\t\t/* Section align power.  */\n+  TRUE,\t\t\t\t/* Is this the default architecture ?  */\n+  bfd_default_compatible,\t/* Architecture comparison function.  */\n+  bfd_default_scan,\t\t/* String to architecture conversion.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list */\n+  NULL,\t\t\t\t/* Next in list */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "cc10c662ea48cf30ae6201622b5d77e25aedffae",
      "filename": "bfd/cpu-mep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-mep.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,8 +22,8 @@\n #include \"libbfd.h\"\n \n #define MA(x, n, def, y) { 32, 32, 8, bfd_arch_mep, x, \"mep\", n, \\\n-\t2, def, bfd_default_compatible, bfd_default_scan, \\\n-\tbfd_arch_default_fill, y }\n+\t\t\t   2, def, bfd_default_compatible, bfd_default_scan, \\\n+\t\t\t   bfd_arch_default_fill, y, 0 }\n \n static const bfd_arch_info_type bfd_c5_arch = MA (bfd_mach_mep_c5, \"c5\", FALSE, NULL);\n static const bfd_arch_info_type bfd_h1_arch = MA (bfd_mach_mep_h1, \"h1\", FALSE, & bfd_c5_arch);"
    },
    {
      "sha": "60805b808c4f8ac6ce3f530da46273b1705c2ce7",
      "filename": "bfd/cpu-metag.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-metag.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -37,5 +37,6 @@ const bfd_arch_info_type bfd_metag_arch =\n   bfd_default_compatible,\t/* Architecture comparison fn.  */\n   bfd_default_scan,\t\t/* String to architecture convert fn.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "4e05d73f01ba673f5b3df0b0eb2fee15421c215c",
      "filename": "bfd/cpu-microblaze.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-microblaze.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,10 +25,10 @@\n \n const bfd_arch_info_type bfd_microblaze_arch =\n {\n-  32,\t\t\t\t/* 32 bits in a word.  */\n-  32,\t\t\t\t/* 32 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_microblaze,\t\t/* Architecture.  */\n+  32,\t\t\t\t/* Bits in a word.  */\n+  32,\t\t\t\t/* Bits in an address.  */\n+  8,\t\t\t\t/* Bits in a byte.  */\n+  bfd_arch_microblaze,\t\t/* Architecture number.  */\n   0,\t\t\t\t/* Machine number - 0 for now.  */\n   \"microblaze\",\t\t\t/* Architecture name.  */\n   \"MicroBlaze\",\t\t\t/* Printable name.  */\n@@ -37,5 +37,6 @@ const bfd_arch_info_type bfd_microblaze_arch =\n   bfd_default_compatible,\t/* Architecture comparison function.  */\n   bfd_default_scan,\t\t/* String to architecture conversion.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "15adcd4e2c874ce34e2fd23bdfa16c85d9dc31eb",
      "filename": "bfd/cpu-mips.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-mips.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -43,9 +43,9 @@ mips_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n \n #define N(BITS_WORD, BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT)\t\t\\\n   {\t\t\t\t\t\t\t\\\n-    BITS_WORD, /*  bits in a word */\t\t\t\\\n-    BITS_ADDR, /* bits in an address */\t\t\t\\\n-    8,\t/* 8 bits in a byte */\t\t\t\t\\\n+    BITS_WORD,  /* Bits in a word.  */\t\t\t\\\n+    BITS_ADDR,  /* Bits in an address.  */\t\t\\\n+    8,\t        /* Bits in a byte.  */\t\t\t\\\n     bfd_arch_mips,\t\t\t\t\t\\\n     NUMBER,\t\t\t\t\t\t\\\n     \"mips\",\t\t\t\t\t\t\\\n@@ -56,6 +56,7 @@ mips_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n     bfd_default_scan,\t\t\t\t\t\\\n     bfd_arch_default_fill,\t\t\t\t\\\n     NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n \n enum\n@@ -150,19 +151,19 @@ static const bfd_arch_info_type arch_info_struct[] =\n   N (64, 64, bfd_mach_mipsisa64r5,\"mips:isa64r5\", FALSE, NN(I_mipsisa64r5)),\n   N (64, 64, bfd_mach_mipsisa64r6,\"mips:isa64r6\", FALSE, NN(I_mipsisa64r6)),\n   N (64, 64, bfd_mach_mips_sb1, \"mips:sb1\",\t  FALSE, NN(I_sb1)),\n-  N (64, 64, bfd_mach_mips_loongson_2e, \"mips:loongson_2e\",\t  FALSE, NN(I_loongson_2e)),\n-  N (64, 64, bfd_mach_mips_loongson_2f, \"mips:loongson_2f\",\t  FALSE, NN(I_loongson_2f)),\n+  N (64, 64, bfd_mach_mips_loongson_2e, \"mips:loongson_2e\", FALSE, NN(I_loongson_2e)),\n+  N (64, 64, bfd_mach_mips_loongson_2f, \"mips:loongson_2f\", FALSE, NN(I_loongson_2f)),\n   N (64, 64, bfd_mach_mips_gs464, \"mips:gs464\",\t  FALSE, NN(I_gs464)),\n-  N (64, 64, bfd_mach_mips_gs464e, \"mips:gs464e\",\t  FALSE, NN(I_gs464e)),\n-  N (64, 64, bfd_mach_mips_gs264e, \"mips:gs264e\",\t  FALSE, NN(I_gs264e)),\n+  N (64, 64, bfd_mach_mips_gs464e, \"mips:gs464e\", FALSE, NN(I_gs464e)),\n+  N (64, 64, bfd_mach_mips_gs264e, \"mips:gs264e\", FALSE, NN(I_gs264e)),\n   N (64, 64, bfd_mach_mips_octeon,\"mips:octeon\",  FALSE, NN(I_mipsocteon)),\n-  N (64, 64, bfd_mach_mips_octeonp,\"mips:octeon+\",  FALSE, NN(I_mipsocteonp)),\n-  N (64, 64, bfd_mach_mips_octeon2,\"mips:octeon2\",  FALSE, NN(I_mipsocteon2)),\n-  N (64, 64, bfd_mach_mips_octeon3, \"mips:octeon3\",  FALSE, NN(I_mipsocteon3)),\n-  N (64, 64, bfd_mach_mips_xlr, \"mips:xlr\",\t  FALSE, NN(I_xlr)),\n+  N (64, 64, bfd_mach_mips_octeonp,\"mips:octeon+\", FALSE, NN(I_mipsocteonp)),\n+  N (64, 64, bfd_mach_mips_octeon2,\"mips:octeon2\", FALSE, NN(I_mipsocteon2)),\n+  N (64, 64, bfd_mach_mips_octeon3, \"mips:octeon3\", FALSE, NN(I_mipsocteon3)),\n+  N (64, 64, bfd_mach_mips_xlr, \"mips:xlr\",\t   FALSE, NN(I_xlr)),\n   N (32, 32, bfd_mach_mips_interaptiv_mr2, \"mips:interaptiv-mr2\", FALSE,\n      NN(I_interaptiv_mr2)),\n-  N (64, 64, bfd_mach_mips_micromips,\"mips:micromips\",FALSE,0)\n+  N (64, 64, bfd_mach_mips_micromips, \"mips:micromips\", FALSE, NULL)\n };\n \n /* The default architecture is mips:3000, but with a machine number of"
    },
    {
      "sha": "8bedeb2d2ff8dc64141ba511860827066c92ca12",
      "filename": "bfd/cpu-mmix.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-mmix.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,19 +25,20 @@\n \n const bfd_arch_info_type\n bfd_mmix_arch =\n- {\n-   64,\t\t\t\t/* 64 bits in a word.  */\n-   64,\t\t\t\t/* 64 bits in an address.  */\n-   8,\t\t\t\t/* 8 bits in a byte.  */\n-   bfd_arch_mmix,\t\t/* Architecture.  */\n-   0,\t\t\t\t/* Machine number - 0 for now.  */\n-   /* Sorry, these are by custom and creeping assumption lower-case.  */\n-   \"mmix\",\t\t\t/* Architecture name.  */\n-   \"mmix\",\t\t\t/* Printable name.  */\n-   3,\t\t\t\t/* Section align power.  */\n-   TRUE,\t\t\t/* This is the default architecture.  */\n-   bfd_default_compatible,\t/* Architecture comparison function.  */\n-   bfd_default_scan,\t\t/* String to architecture conversion.  */\n-   bfd_arch_default_fill,\t/* Default fill.  */\n-   NULL\t\t\t\t/* Next in list.  */\n+{\n+  64,\t\t\t\t/* Bits in a word.  */\n+  64,\t\t\t\t/* Bits in an address.  */\n+  8,\t\t\t\t/* Bits in a byte.  */\n+  bfd_arch_mmix,\t\t/* Architecture number.  */\n+  0,\t\t\t\t/* Machine number - 0 for now.  */\n+  /* Sorry, these are by custom and creeping assumption lower-case.  */\n+  \"mmix\",\t\t\t/* Architecture name.  */\n+  \"mmix\",\t\t\t/* Printable name.  */\n+  3,\t\t\t\t/* Section align power.  */\n+  TRUE,\t\t\t/* This is the default architecture.  */\n+  bfd_default_compatible,\t/* Architecture comparison function.  */\n+  bfd_default_scan,\t\t/* String to architecture conversion.  */\n+  bfd_arch_default_fill,\t/* Default fill.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "e200e1a4a5b3967c6add0a2243cdd83ffe35184a",
      "filename": "bfd/cpu-moxie.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-moxie.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-moxie.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-moxie.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n \n \n const bfd_arch_info_type bfd_moxie_arch =\n-  {\n-    32,\t\t      /* 32 bits in a word.  */\n-    32,\t\t      /* 32 bits in an address.  */\n-    8,\t\t      /*  8 bits in a byte.  */\n-    bfd_arch_moxie,   /* enum bfd_architecture arch.  */\n-    bfd_mach_moxie,\n-    \"moxie\",\t      /* Arch name.  */\n-    \"moxie\",\t      /* Printable name.  */\n-    2,\t\t      /* Unsigned int section alignment power.  */\n-    TRUE,\t      /* The one and only.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  32,\t\t      /* Bits in a word.  */\n+  32,\t\t      /* Bits in an address.  */\n+  8,\t\t      /* Bits in a byte.  */\n+  bfd_arch_moxie,     /* Architecture Number.  */\n+  bfd_mach_moxie,     /* Machine number.  */\n+  \"moxie\",\t      /* Arch name.  */\n+  \"moxie\",\t      /* Printable name.  */\n+  2,\t\t      /* Section alignment power.  */\n+  TRUE,\t              /* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "94d570d82cec30a71a92b4cdeba0f6e6b50cc93a",
      "filename": "bfd/cpu-msp430.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-msp430.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -43,9 +43,9 @@ compatible (const bfd_arch_info_type * a,\n \n #define N(addr_bits, machine, print, default, next)\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  16,\t\t\t\t/* 16 bits in a word.  */\t\\\n+  16,\t\t\t\t/* Bits in a word.  */\t\t\\\n   addr_bits,\t\t\t/* Bits in an address.  */\t\\\n-  8,\t\t\t\t/* 8 bits in a byte.  */\t\\\n+  8,\t\t\t\t/* Bits in a byte.  */\t\t\\\n   bfd_arch_msp430,\t\t\t\t\t\t\\\n   machine,\t\t\t/* Machine number.  */\t\t\\\n   \"msp430\",\t\t\t/* Architecture name.   */\t\\\n@@ -55,7 +55,8 @@ compatible (const bfd_arch_info_type * a,\n   compatible,\t\t\t\t\t\t\t\\\n   bfd_default_scan,\t\t\t\t\t\t\\\n   bfd_arch_default_fill,\t\t\t\t\t\\\n-  next\t\t\t\t\t\t\t\t\\\n+  next,\t\t\t\t\t\t\t\t\\\n+  0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n }\n \n static const bfd_arch_info_type arch_info_struct[] ="
    },
    {
      "sha": "c6a320f17c230a2ed901d9a1ee607960ef8abe05",
      "filename": "bfd/cpu-mt.c",
      "status": "modified",
      "additions": 23,
      "deletions": 46,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-mt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-mt.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,54 +22,31 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n-const bfd_arch_info_type arch_info_struct[] =\n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,   /* Bits in a word.  */\t\t\t\\\n+    32,   /* Bits in an address.  */\t\t\t\\\n+    8,\t  /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_mt,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"mt\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    1,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n+const bfd_arch_info_type arch_info_struct[2] =\n {\n-{\n-  32,\t\t\t\t/* Bits per word - not really true.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_mt,\t\t\t/* Architecture.  */\n-  bfd_mach_mrisc2,\t\t/* Machine.  */\n-  \"mt\",\t\t\t\t/* Architecture name.  */\n-  \"ms1-003\",\t\t\t/* Printable name.  */\n-  1,\t\t\t\t/* Section align power.  */\n-  FALSE,\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  &arch_info_struct[1]\t\t/* Next in list.  */\n-},\n-{\n-  32,\t\t\t\t/* Bits per word - not really true.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_mt,\t\t\t/* Architecture.  */\n-  bfd_mach_ms2,\t\t\t/* Machine.  */\n-  \"mt\",\t\t\t\t/* Architecture name.  */\n-  \"ms2\",\t\t\t/* Printable name.  */\n-  1,\t\t\t\t/* Section align power.  */\n-  FALSE,\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n-},\n+  N (bfd_mach_mrisc2, \"ms1-003\", FALSE, arch_info_struct + 1),\n+  N (bfd_mach_ms2,    \"ms2\",     FALSE, NULL)\n };\n \n const bfd_arch_info_type bfd_mt_arch =\n-{\n-  32,\t\t\t\t/* Bits per word - not really true.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_mt,\t\t\t/* Architecture.  */\n-  bfd_mach_ms1,\t\t\t/* Machine.  */\n-  \"mt\",\t\t\t\t/* Architecture name.  */\n-  \"ms1\",\t\t\t/* Printable name.  */\n-  1,\t\t\t\t/* Section align power.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  &arch_info_struct[0]\t\t/* Next in list.  */\n-};\n+  N (bfd_mach_ms1,    \"ms1\",     TRUE, arch_info_struct);\n+\n "
    },
    {
      "sha": "cfa15a033c4d9f8d22846c66dd10d25f78ca5ecf",
      "filename": "bfd/cpu-nds32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-nds32.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -26,7 +26,7 @@\n \n #define N(number, print, default, next)  \\\n     {32, 32, 8, bfd_arch_nds32, number, \"nds32\", print, 4, default, \\\n-     bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next }\n+     bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n #define NEXT\t\t&arch_info_struct[0]\n #define NDS32V2_NEXT\t&arch_info_struct[1]"
    },
    {
      "sha": "a242d7b74a11f024eeed72ff263ec8b2a6f2552a",
      "filename": "bfd/cpu-nfp.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-nfp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-nfp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-nfp.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -50,13 +50,12 @@ bfd_nfp_compatible (const bfd_arch_info_type * a,\n   bfd_nfp_compatible,\t\t\t\t\t\t\\\n   bfd_default_scan,\t\t\t\t\t\t\\\n   bfd_arch_default_fill,\t\t\t\t\t\\\n-  next\t\t\t\t\t\t\t\t\\\n+  next,\t\t\t\t\t\t\t\t\\\n+  0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n }\n \n-static const bfd_arch_info_type arch_info_struct[] =\n-{\n-  N (bfd_mach_nfp3200, \"NFP-32xx\", FALSE, NULL)\n-};\n+static const bfd_arch_info_type arch_info_struct =\n+  N (bfd_mach_nfp3200, \"NFP-32xx\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_nfp_arch =\n-  N (bfd_mach_nfp6000, \"NFP-6xxx\", TRUE, &arch_info_struct[0]);\n+  N (bfd_mach_nfp6000, \"NFP-6xxx\", TRUE, &arch_info_struct);"
    },
    {
      "sha": "907d318447dea9b9045c0d009bb47e4db52f71cb",
      "filename": "bfd/cpu-nios2.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-nios2.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -44,11 +44,11 @@ nios2_compatible (const bfd_arch_info_type *a,\n   return a;\n }\n \n-#define N(BITS_WORD, BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT)\t\t\\\n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n   {\t\t\t\t\t\t\t\\\n-    BITS_WORD, /*  bits in a word */\t\t\t\\\n-    BITS_ADDR, /* bits in an address */\t\t\t\\\n-    8,\t/* 8 bits in a byte */\t\t\t\t\\\n+    32, /* Bits in a word.  */\t\t\t\t\\\n+    32, /* Bits in an address.  */\t\t\t\\\n+    8,\t/* Bits in a byte.  */\t\t\t\t\\\n     bfd_arch_nios2,\t\t\t\t\t\\\n     NUMBER,\t\t\t\t\t\t\\\n     \"nios2\",\t\t\t\t\t\t\\\n@@ -58,17 +58,18 @@ nios2_compatible (const bfd_arch_info_type *a,\n     nios2_compatible,\t\t\t\t\t\\\n     bfd_default_scan,\t\t\t\t\t\\\n     bfd_arch_default_fill,\t\t\t\t\\\n-    NEXT\t\t\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n \n #define NIOS2R1_NEXT &arch_info_struct[0]\n #define NIOS2R2_NEXT &arch_info_struct[1]\n \n-static const bfd_arch_info_type arch_info_struct[] =\n+static const bfd_arch_info_type arch_info_struct[2] =\n {\n-  N (32, 32, bfd_mach_nios2r1, \"nios2:r1\", FALSE, NIOS2R2_NEXT),\n-  N (32, 32, bfd_mach_nios2r2, \"nios2:r2\", FALSE, NULL),\n+  N (bfd_mach_nios2r1, \"nios2:r1\", FALSE, NIOS2R2_NEXT),\n+  N (bfd_mach_nios2r2, \"nios2:r2\", FALSE, NULL),\n };\n \n const bfd_arch_info_type bfd_nios2_arch =\n-  N (32, 32, 0, \"nios2\", TRUE, NIOS2R1_NEXT);\n+  N (bfd_mach_nios2, \"nios2\", TRUE, NIOS2R1_NEXT);"
    },
    {
      "sha": "bc6523b7485f4c52202b474b25a1911a116c1fe4",
      "filename": "bfd/cpu-ns32k.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ns32k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-ns32k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-ns32k.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -26,16 +26,16 @@\n #include \"ns32k.h\"\n \n #define N(machine, printable, d, next)  \\\n-{  32, 32, 8, bfd_arch_ns32k, machine, \"ns32k\",printable,3,d, \\\n-   bfd_default_compatible,bfd_default_scan,bfd_arch_default_fill,next, }\n+ { 32, 32, 8, bfd_arch_ns32k, machine, \"ns32k\",printable,3,d, \\\n+   bfd_default_compatible,bfd_default_scan,bfd_arch_default_fill,next, 0 }\n \n static const bfd_arch_info_type arch_info_struct[] =\n {\n-  N(32532,\"ns32k:32532\",TRUE, 0), /* The word ns32k will match this too.  */\n+  N (32532, \"ns32k:32532\", TRUE, 0), /* The word ns32k will match this too.  */\n };\n \n const bfd_arch_info_type bfd_ns32k_arch =\n-  N(32032,\"ns32k:32032\",FALSE, &arch_info_struct[0]);\n+  N (32032, \"ns32k:32032\", FALSE, &arch_info_struct[0]);\n \n bfd_vma\n _bfd_ns32k_get_displacement (bfd_byte *buffer, int size)"
    },
    {
      "sha": "cd9fda376e64d308bd64161e343a61d9b2a135e5",
      "filename": "bfd/cpu-or1k.c",
      "status": "modified",
      "additions": 21,
      "deletions": 33,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-or1k.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -21,39 +21,27 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n-const bfd_arch_info_type bfd_or1k_arch;\n-const bfd_arch_info_type bfd_or1knd_arch;\n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,     /* Bits in a word.  */\t\t\t\\\n+    32,     /* Bits in an address.  */\t\t\t\\\n+    8,\t    /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_or1k,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    4,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n \n-const bfd_arch_info_type bfd_or1k_arch =\n-  {\n-    32,\t\t  /* 32 bits in a word.  */\n-    32,\t\t  /* 32 bits in an address.  */\n-    8,\t\t  /* 8 bits in a byte.  */\n-    bfd_arch_or1k,\n-    bfd_mach_or1k,\n-    \"or1k\",\n-    \"or1k\",\n-    4,\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_or1knd_arch,\n-  };\n \n const bfd_arch_info_type bfd_or1knd_arch =\n-  {\n-    32,\t\t  /* 32 bits in a word.  */\n-    32,\t\t  /* 32 bits in an address.  */\n-    8,\t\t  /* 8 bits in a byte.  */\n-    bfd_arch_or1k,\n-    bfd_mach_or1knd,\n-    \"or1knd\",\n-    \"or1knd\",\n-    4,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    NULL,\n-  };\n+  N (bfd_mach_or1knd, \"or1knd\", FALSE, NULL);\n+\n+const bfd_arch_info_type bfd_or1k_arch =\n+  N (bfd_mach_or1k, \"or1k\", TRUE, &bfd_or1knd_arch);"
    },
    {
      "sha": "0d6a50c266a253269845ba89cd84e51c8c90a816",
      "filename": "bfd/cpu-pdp11.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-pdp11.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,19 +23,20 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_pdp11_arch =\n-  {\n-    16,\t/* 16 bits in a word */\n-    16,\t/* 16 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_pdp11,\n-    0,\t/* only 1 machine */\n-    \"pdp11\",\n-    \"pdp11\",\n-    1,\t\t/* alignment = 16 bit */\n-    TRUE, /* the one and only */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  16,\t/* Bits in a word.  */\n+  16,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_pdp11,\n+  0,\t/* Only 1 machine.  */\n+  \"pdp11\",\n+  \"pdp11\",\n+  1,\t/* Alignment = 16 bit.  */\n+  TRUE, /* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};\n "
    },
    {
      "sha": "cf5f491e3eb8aaf944d94ce249a9fbaff4dd4a1a",
      "filename": "bfd/cpu-pj.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-pj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-pj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-pj.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,17 +25,18 @@\n \n const bfd_arch_info_type bfd_pj_arch =\n {\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n+  32,\t\t\t\t/* Bits in a word.  */\n+  32,\t\t\t\t/* Bits in an address.  */\n+  8,\t\t\t\t/* Bits in a byte.  */\n   bfd_arch_pj,\n   0,\n-  \"pj\",\t\t\t\t/* arch_name  */\n-  \"pj\",\t\t\t\t/* printable name */\n+  \"pj\",\t\t\t\t/* Arch_name.  */\n+  \"pj\",\t\t\t\t/* Printable name.  */\n   1,\n-  TRUE,\t\t\t\t/* the default machine */\n+  TRUE,\t\t\t\t/* The default machine.  */\n   bfd_default_compatible,\n   bfd_default_scan,\n   bfd_arch_default_fill,\n-  0\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "53f0c234577d03e4e6f1afe62daba0616ec9a201",
      "filename": "bfd/cpu-plugin.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-plugin.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,9 +24,9 @@\n \n const bfd_arch_info_type bfd_plugin_arch =\n {\n-  32,\t/* 32 bits in a word.  */\n-  32,\t/* 32 bits in an address.  */\n-  8,\t/* 8 bits in a byte.  */\n+  32,\t/* Bits in a word.  */\n+  32,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n   bfd_arch_plugin,\n   0,\t/* Only 1 machine.  */\n   \"plugin\",\n@@ -36,5 +36,6 @@ const bfd_arch_info_type bfd_plugin_arch =\n   bfd_default_compatible,\n   bfd_default_scan,\n   bfd_arch_default_fill,\n-  0\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "49594678d3a4319b8923996e0db1ef01e8df7772",
      "filename": "bfd/cpu-powerpc.c",
      "status": "modified",
      "additions": 50,
      "deletions": 351,
      "changes": 401,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-powerpc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-powerpc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-powerpc.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -48,375 +48,74 @@ powerpc_compatible (const bfd_arch_info_type *a,\n   /*NOTREACHED*/\n }\n \n+#define N(BITS, NUMBER, PRINT, DEFAULT, NEXT)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    BITS,      /* Bits in a word.  */\t\t\t\\\n+    BITS,      /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_powerpc,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"powerpc\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    powerpc_compatible,\t\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_powerpc_archs[] =\n {\n #if BFD_DEFAULT_TARGET_SIZE == 64\n-  /* Default arch must come first.  */\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc64,\n-    \"powerpc\",\n-    \"powerpc:common64\",\n-    3,\n-    TRUE, /* default for 64 bit target */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[1]\n-  },\n+  /* Default for 64 bit target.  */\n+  N (64, bfd_mach_ppc64, \"powerpc:common64\", TRUE, bfd_powerpc_archs + 1),\n   /* elf32-ppc:ppc_elf_object_p relies on the default 32 bit arch\n      being immediately after the 64 bit default.  */\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc, /* for the POWER/PowerPC common architecture */\n-    \"powerpc\",\n-    \"powerpc:common\",\n-    3,\n-    FALSE,\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[2],\n-  },\n+  N (32, bfd_mach_ppc, \"powerpc:common\", FALSE, bfd_powerpc_archs + 2),\n #else\n   /* Default arch must come first.  */\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc, /* for the POWER/PowerPC common architecture */\n-    \"powerpc\",\n-    \"powerpc:common\",\n-    3,\n-    TRUE, /* default for 32 bit target */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[1],\n-  },\n+  N (32, bfd_mach_ppc, \"powerpc:common\", TRUE, bfd_powerpc_archs + 1),\n   /* elf64-ppc:ppc64_elf_object_p relies on the default 64 bit arch\n      being immediately after the 32 bit default.  */\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc64,\n-    \"powerpc\",\n-    \"powerpc:common64\",\n-    3,\n-    FALSE,\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[2]\n-  },\n+  N (64, bfd_mach_ppc64, \"powerpc:common64\", FALSE, bfd_powerpc_archs + 2),\n #endif\n+  N (32, bfd_mach_ppc_603,      \"powerpc:603\",     FALSE, bfd_powerpc_archs + 3),\n+  N (32, bfd_mach_ppc_ec603e,   \"powerpc:EC603e\",  FALSE, bfd_powerpc_archs + 4),\n+  N (32, bfd_mach_ppc_604,      \"powerpc:604\",     FALSE, bfd_powerpc_archs + 5),\n+  N (32, bfd_mach_ppc_403,      \"powerpc:403\",     FALSE, bfd_powerpc_archs + 6),\n+  N (32, bfd_mach_ppc_601,      \"powerpc:601\",     FALSE, bfd_powerpc_archs + 7),\n+  N (64, bfd_mach_ppc_620,      \"powerpc:620\",     FALSE, bfd_powerpc_archs + 8),\n+  N (64, bfd_mach_ppc_630,      \"powerpc:630\",     FALSE, bfd_powerpc_archs + 9),\n+  N (64, bfd_mach_ppc_a35,      \"powerpc:a35\",     FALSE, bfd_powerpc_archs + 10),\n+  N (64, bfd_mach_ppc_rs64ii,   \"powerpc:rs64ii\",  FALSE, bfd_powerpc_archs + 11),\n+  N (64, bfd_mach_ppc_rs64iii,  \"powerpc:rs64iii\", FALSE, bfd_powerpc_archs + 12),\n+  N (32, bfd_mach_ppc_7400,     \"powerpc:7400\",    FALSE, bfd_powerpc_archs + 13),\n+  N (32, bfd_mach_ppc_e500,     \"powerpc:e500\",    FALSE, bfd_powerpc_archs + 14),\n+  N (32, bfd_mach_ppc_e500mc,   \"powerpc:e500mc\",  FALSE, bfd_powerpc_archs + 15),\n+  N (64, bfd_mach_ppc_e500mc64, \"powerpc:e500mc64\",FALSE, bfd_powerpc_archs + 16),\n+  N (32, bfd_mach_ppc_860,      \"powerpc:MPC8XX\",  FALSE, bfd_powerpc_archs + 17),\n+  N (32, bfd_mach_ppc_750,      \"powerpc:750\",     FALSE, bfd_powerpc_archs + 18),\n+  N (32, bfd_mach_ppc_titan,    \"powerpc:titan\",   FALSE, bfd_powerpc_archs + 19),\n+\n   {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_603,\n-    \"powerpc\",\n-    \"powerpc:603\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[3]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_ec603e,\n-    \"powerpc\",\n-    \"powerpc:EC603e\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[4]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_604,\n-    \"powerpc\",\n-    \"powerpc:604\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[5]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_403,\n-    \"powerpc\",\n-    \"powerpc:403\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[6]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_601,\n-    \"powerpc\",\n-    \"powerpc:601\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[7]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_620,\n-    \"powerpc\",\n-    \"powerpc:620\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[8]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_630,\n-    \"powerpc\",\n-    \"powerpc:630\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[9]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_a35,\n-    \"powerpc\",\n-    \"powerpc:a35\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[10]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_rs64ii,\n-    \"powerpc\",\n-    \"powerpc:rs64ii\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[11]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_rs64iii,\n-    \"powerpc\",\n-    \"powerpc:rs64iii\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[12]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_7400,\n-    \"powerpc\",\n-    \"powerpc:7400\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[13]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_e500,\n-    \"powerpc\",\n-    \"powerpc:e500\",\n-    3,\n-    FALSE,\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[14]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_e500mc,\n-    \"powerpc\",\n-    \"powerpc:e500mc\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[15]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_e500mc64,\n-    \"powerpc\",\n-    \"powerpc:e500mc64\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[16]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_860,\n-    \"powerpc\",\n-    \"powerpc:MPC8XX\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[17]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_750,\n-    \"powerpc\",\n-    \"powerpc:750\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[18]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_titan,\n-    \"powerpc\",\n-    \"powerpc:titan\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[19]\n-  },\n-  {\n-    16,\t/* 16 or 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n+    16,\t/* Bits in a word.  */\n+    32,\t/* Bits in an address.  */\n+    8,\t/* Bits in a byte.  */\n     bfd_arch_powerpc,\n     bfd_mach_ppc_vle,\n     \"powerpc\",\n     \"powerpc:vle\",\n     3,\n-    FALSE, /* not the default */\n+    FALSE, /* Not the default.  */\n     powerpc_compatible,\n     bfd_default_scan,\n     bfd_arch_default_fill,\n-    &bfd_powerpc_archs[20]\n+    bfd_powerpc_archs + 20,\n+    0 /* Maximum offset of a reloc from the start of an insn.  */\n   },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_e5500,\n-    \"powerpc\",\n-    \"powerpc:e5500\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_powerpc_archs[21]\n-  },\n-  {\n-    64,\t/* 64 bits in a word */\n-    64,\t/* 64 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_powerpc,\n-    bfd_mach_ppc_e6500,\n-    \"powerpc\",\n-    \"powerpc:e6500\",\n-    3,\n-    FALSE, /* not the default */\n-    powerpc_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0\n-  }\n+\n+  N (64, bfd_mach_ppc_e5500, \"powerpc:e5500\", FALSE, bfd_powerpc_archs + 21),\n+  N (64, bfd_mach_ppc_e6500, \"powerpc:e6500\", FALSE, NULL)\n };"
    },
    {
      "sha": "99be27eca5e7d7f68bf1a8b44fc7edfc77700427",
      "filename": "bfd/cpu-pru.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-pru.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -37,7 +37,8 @@\n     bfd_default_compatible,\t\t\t\t\\\n     bfd_default_scan,\t\t\t\t\t\\\n     bfd_arch_default_fill,\t\t\t\t\\\n-    NEXT\t\t\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n \n const bfd_arch_info_type bfd_pru_arch = N (32, 32, 0, \"pru\", TRUE, NULL);"
    },
    {
      "sha": "aca7ade0af3e879eea4f5dd963effc2bd30759fd",
      "filename": "bfd/cpu-riscv.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-riscv.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -39,11 +39,11 @@ riscv_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n   return a;\n }\n \n-#define N(BITS_WORD, BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT)\t\\\n+#define N(BITS, NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    BITS_WORD, /*  bits in a word */\t\t\t\t\\\n-    BITS_ADDR, /* bits in an address */\t\t\t\t\\\n-    8,\t/* 8 bits in a byte */\t\t\t\t\t\\\n+    BITS,      /* Bits in a word.  */\t\t\t\t\\\n+    BITS,      /* Bits in an address.  */\t\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\t\\\n     bfd_arch_riscv,\t\t\t\t\t\t\\\n     NUMBER,\t\t\t\t\t\t\t\\\n     \"riscv\",\t\t\t\t\t\t\t\\\n@@ -54,6 +54,7 @@ riscv_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n     bfd_default_scan,\t\t\t\t\t\t\\\n     bfd_arch_default_fill,\t\t\t\t\t\\\n     NEXT,\t\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */\\\n   }\n \n /* This enum must be kept in the same order as arch_info_struct.  */\n@@ -69,11 +70,11 @@ enum\n    and each entry except the last should end with NN (my enum value).  */\n static const bfd_arch_info_type arch_info_struct[] =\n {\n-  N (64, 64, bfd_mach_riscv64, \"riscv:rv64\", FALSE, NN (I_riscv64)),\n-  N (32, 32, bfd_mach_riscv32, \"riscv:rv32\", FALSE, 0)\n+  N (64, bfd_mach_riscv64, \"riscv:rv64\", FALSE, NN (I_riscv64)),\n+  N (32, bfd_mach_riscv32, \"riscv:rv32\", FALSE, NULL)\n };\n \n /* The default architecture is riscv:rv64.  */\n \n const bfd_arch_info_type bfd_riscv_arch =\n-  N (64, 64, 0, \"riscv\", TRUE, &arch_info_struct[0]);\n+  N (64, 0, \"riscv\", TRUE, &arch_info_struct[0]);"
    },
    {
      "sha": "acc4ab91c657c69faad3ab1280a7ee63bb051142",
      "filename": "bfd/cpu-rl78.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-rl78.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-rl78.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-rl78.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -36,5 +36,6 @@ const bfd_arch_info_type bfd_rl78_arch =\n   bfd_default_compatible,\t/* Architecture comparison fn.  */\n   bfd_default_scan,\t\t/* String to architecture convert fn.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "46ecca924705bfda0fdbce5c8e4abdb1da812ebe",
      "filename": "bfd/cpu-rs6000.c",
      "status": "modified",
      "additions": 23,
      "deletions": 61,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-rs6000.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -46,68 +46,30 @@ rs6000_compatible (const bfd_arch_info_type *a,\n   /*NOTREACHED*/\n }\n \n-static const bfd_arch_info_type arch_info_struct[] =\n-{\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_rs6000,\n-    bfd_mach_rs6k_rs1,\n-    \"rs6000\",\n-    \"rs6000:rs1\",\n-    3,\n-    FALSE, /* not the default */\n-    rs6000_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[1]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_rs6000,\n-    bfd_mach_rs6k_rsc,\n-    \"rs6000\",\n-    \"rs6000:rsc\",\n-    3,\n-    FALSE, /* not the default */\n-    rs6000_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[2]\n-  },\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_rs6000,\n-    bfd_mach_rs6k_rs2,\n-    \"rs6000\",\n-    \"rs6000:rs2\",\n-    3,\n-    FALSE, /* not the default */\n-    rs6000_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0\n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,        /* Bits in a word.  */\t\t\t\\\n+    32,        /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_rs6000,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"rs6000\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    rs6000_compatible,\t\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n+\n+static const bfd_arch_info_type arch_info_struct[3] =\n+{\n+  N (bfd_mach_rs6k_rs1, \"rs6000:rs1\", FALSE, arch_info_struct + 1),\n+  N (bfd_mach_rs6k_rsc, \"rs6000:rsc\", FALSE, arch_info_struct + 2),\n+  N (bfd_mach_rs6k_rs2, \"rs6000:rs2\", FALSE, NULL)\n };\n \n const bfd_arch_info_type bfd_rs6000_arch =\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_rs6000,\n-    bfd_mach_rs6k,\t/* POWER common architecture */\n-    \"rs6000\",\n-    \"rs6000:6000\",\n-    3,\n-    TRUE, /* the default */\n-    rs6000_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[0]\n-  };\n+  N (bfd_mach_rs6k, \"rs6000:6000\", TRUE, arch_info_struct + 0);"
    },
    {
      "sha": "ecdb98ff59a891af35bcd9d563ad88f7a4edde29",
      "filename": "bfd/cpu-rx.c",
      "status": "modified",
      "additions": 11,
      "deletions": 61,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-rx.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,68 +22,18 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n-static const bfd_arch_info_type arch_info_struct[] =\n+#define N(mach, name, align, def, next)\t\t\t\t\\\n+  { 32, 32, 8, bfd_arch_rx, mach, \"rx\", name, align, def,\t\\\n+    bfd_default_compatible, bfd_default_scan,\t\t\t\\\n+    bfd_arch_default_fill, next, 0 }\n+\n+static const bfd_arch_info_type arch_info_struct[3] =\n {\n-  {\n-    32,\t\t\t\t/* Bits per word.  */\n-    32,\t\t\t\t/* Bits per address.  */\n-    8,\t\t\t\t/* Bits per byte.  */\n-    bfd_arch_rx,\t\t/* Architecture.  */\n-    bfd_mach_rx,\t\t/* Machine.  */\n-    \"rx\",\t\t\t/* Architecture name.  */\n-    \"rx\",\t\t\t/* Printable name.  */\n-    3,\t\t\t\t/* Section align power.  */\n-    FALSE,\t\t\t/* The default ?  */\n-    bfd_default_compatible,\t/* Architecture comparison fn.  */\n-    bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-    bfd_arch_default_fill,\t/* Default fill.  */\n-    &arch_info_struct[1]\t/* Next in list.  */\n-  },\n-  {\n-    32,\t\t\t\t/* Bits per word.  */\n-    32,\t\t\t\t/* Bits per address.  */\n-    8,\t\t\t\t/* Bits per byte.  */\n-    bfd_arch_rx,\t\t/* Architecture.  */\n-    bfd_mach_rx_v2,\t\t/* Machine.  */\n-    \"rx:v2\",\t\t\t/* Architecture name.  */\n-    \"rx:v2\",\t\t\t/* Printable name.  */\n-    3,\t\t\t\t/* Section align power.  */\n-    FALSE,\t\t\t/* The default ?  */\n-    bfd_default_compatible,\t/* Architecture comparison fn.  */\n-    bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-    bfd_arch_default_fill,\t/* Default fill.  */\n-    &arch_info_struct[2]\t/* Next in list.  */\n-  },\n-  {\n-    32,\t\t\t\t/* Bits per word.  */\n-    32,\t\t\t\t/* Bits per address.  */\n-    8,\t\t\t\t/* Bits per byte.  */\n-    bfd_arch_rx,\t\t/* Architecture.  */\n-    bfd_mach_rx_v3,\t\t/* Machine.  */\n-    \"rx:v3\",\t\t\t/* Architecture name.  */\n-    \"rx:v3\",\t\t\t/* Printable name.  */\n-    3,\t\t\t\t/* Section align power.  */\n-    FALSE,\t\t\t/* The default ?  */\n-    bfd_default_compatible,\t/* Architecture comparison fn.  */\n-    bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-    bfd_arch_default_fill,\t/* Default fill.  */\n-    NULL\t\t\t/* Next in list.  */\n-  },\n+  N (bfd_mach_rx,    \"rx\",    3, FALSE, arch_info_struct + 1),\n+  N (bfd_mach_rx_v2, \"rx:v2\", 3, FALSE, arch_info_struct + 2),\n+  N (bfd_mach_rx_v3, \"rx:v3\", 3, FALSE, NULL)\n };\n \n const bfd_arch_info_type bfd_rx_arch =\n-{\n-  32,\t\t\t\t/* Bits per word.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_rx,\t\t\t/* Architecture.  */\n-  bfd_mach_rx,\t\t\t/* Machine.  */\n-  \"rx\",\t\t\t\t/* Architecture name.  */\n-  \"rx\",\t\t\t\t/* Printable name.  */\n-  4,\t\t\t\t/* Section align power.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  & arch_info_struct[0],\t/* Next in list.  */\n-};\n+  N (bfd_mach_rx,    \"rx\",    4, TRUE, arch_info_struct + 0);\n+"
    },
    {
      "sha": "4ad2eafbb15e3435805d1f8663ce258153cb581e",
      "filename": "bfd/cpu-s12z.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-s12z.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-s12z.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-s12z.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n \n const bfd_arch_info_type bfd_s12z_arch =\n {\n-    16,\t/* 16 bits in a word.  */\n-    24,\t/* 24 bits in an address.  */\n-    8,\t/* 8 bits in a byte.  */\n-    bfd_arch_s12z,\n-    0,\n-    \"s12z\",\n-    \"s12z\",\n-    4, /* Section alignment power.  */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+  16,\t/* Bits in a word.  */\n+  24,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_s12z,\n+  0,\n+  \"s12z\",\n+  \"s12z\",\n+  4,    /* Section alignment power.  */\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0    /* Maximum offset of a reloc from the start of an insn.  */\n };\n "
    },
    {
      "sha": "f906472435d98d148c6ef4d8c3a1c8bf051e8b62",
      "filename": "bfd/cpu-s390.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-s390.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,19 +25,20 @@\n \n #define N(bits, number, print, is_default, next)\t\\\n   {\t\t\t\t\t\t\t\\\n-    bits,\t       /* bits in a word */\t\t\\\n-    bits,\t       /* bits in an address */\t\t\\\n-    8,\t\t       /* bits in a byte */\t\t\\\n+    bits,\t       /* Bits in a word.  */\t\t\\\n+    bits,\t       /* Bits in an address.  */\t\\\n+    8,\t\t       /* Bits in a byte.  */\t\t\\\n     bfd_arch_s390,\t\t\t\t\t\\\n     number,\t\t\t\t\t\t\\\n     \"s390\",\t\t\t\t\t\t\\\n     print,\t\t\t\t\t\t\\\n-    3,\t\t       /* section alignment power */\t\\\n+    3,\t\t       /* Section alignment power */\t\\\n     is_default,\t\t\t\t\t\t\\\n     bfd_default_compatible,\t\t\t\t\\\n     bfd_default_scan,\t\t\t\t\t\\\n     bfd_arch_default_fill,\t\t\t\t\\\n-    next\t\t\t\t\t\t\\\n+    next,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }\n \n #if BFD_DEFAULT_TARGET_SIZE == 64"
    },
    {
      "sha": "5bf9c6bdf26faf2db4a056a8b853210c97f4c045",
      "filename": "bfd/cpu-score.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-score.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -43,11 +43,11 @@ compatible (const bfd_arch_info_type * a, const bfd_arch_info_type * b)\n   return a;\n }\n \n-#define N(addr_bits, machine, print, default, next)\t\t\\\n+#define N(machine, print, default, next)\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  32,\t\t\t\t/* 16 bits in a word.  */\t\\\n+  32,\t\t\t\t/* Bits in a word.  */\t\t\\\n   32,\t\t\t\t/* Bits in an address.  */\t\\\n-  8,\t\t\t\t/* 8 bits in a byte.  */\t\\\n+  8,\t\t\t\t/* Bits in a byte.  */\t\t\\\n   bfd_arch_score,\t\t\t\t\t\t\\\n   machine,\t\t\t/* Machine number.  */\t\t\\\n   \"score\",\t\t\t/* Architecture name.   */\t\\\n@@ -57,13 +57,14 @@ compatible (const bfd_arch_info_type * a, const bfd_arch_info_type * b)\n   compatible,\t\t\t\t\t\t\t\\\n   bfd_default_scan,\t\t\t\t\t\t\\\n   bfd_arch_default_fill,\t\t\t\t\t\\\n-  next\t\t\t\t\t\t\t\t\\\n+  next,\t\t\t\t\t\t\t\t\\\n+  0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n }\n \n static const bfd_arch_info_type arch_info_struct[] =\n {\n-  N (16, bfd_mach_score3, \"score3\", FALSE, NULL),\n+  N (bfd_mach_score3, \"score3\", FALSE, NULL),\n };\n \n const bfd_arch_info_type bfd_score_arch =\n-  N (16, bfd_mach_score7, \"score7\", TRUE, & arch_info_struct[0]);\n+  N (bfd_mach_score7, \"score7\", TRUE, & arch_info_struct[0]);"
    },
    {
      "sha": "37edace29bc5f116cb445a98803fafc3b7b17fa7",
      "filename": "bfd/cpu-sh.c",
      "status": "modified",
      "additions": 38,
      "deletions": 321,
      "changes": 359,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-sh.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,333 +24,50 @@\n #include \"libbfd.h\"\n #include \"../opcodes/sh-opc.h\"\n \n-#define SH_NEXT\t\t\t\t   arch_info_struct + 0\n-#define SH2_NEXT\t\t\t   arch_info_struct + 1\n-#define SH2E_NEXT\t\t\t   arch_info_struct + 2\n-#define SH_DSP_NEXT\t\t\t   arch_info_struct + 3\n-#define SH3_NEXT\t\t\t   arch_info_struct + 4\n-#define SH3_NOMMU_NEXT\t\t\t   arch_info_struct + 5\n-#define SH3_DSP_NEXT\t\t\t   arch_info_struct + 6\n-#define SH3E_NEXT\t\t\t   arch_info_struct + 7\n-#define SH4_NEXT\t\t\t   arch_info_struct + 8\n-#define SH4A_NEXT\t\t\t   arch_info_struct + 9\n-#define SH4AL_DSP_NEXT\t\t\t   arch_info_struct + 10\n-#define SH4_NOFPU_NEXT\t\t\t   arch_info_struct + 11\n-#define SH4_NOMMU_NOFPU_NEXT\t\t   arch_info_struct + 12\n-#define SH4A_NOFPU_NEXT\t\t\t   arch_info_struct + 13\n-#define SH2A_NEXT\t\t\t   arch_info_struct + 14\n-#define SH2A_NOFPU_NEXT\t\t\t   arch_info_struct + 15\n-#define SH2A_NOFPU_OR_SH4_NOMMU_NOFPU_NEXT arch_info_struct + 16\n-#define SH2A_NOFPU_OR_SH3_NOMMU_NEXT\t   arch_info_struct + 17\n-#define SH2A_OR_SH4_NEXT\t\t   arch_info_struct + 18\n-#define SH2A_OR_SH3E_NEXT\t\t   NULL\n+\n+#define N(NUMBER, PRINT, DEFAULT, NEXT)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,     /* Bits in a word.  */\t\t\t\\\n+    32,     /* Bits in an address.  */\t\t\t\\\n+    8,\t    /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_sh,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"sh\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    1,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n \n static const bfd_arch_info_type arch_info_struct[] =\n {\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2e,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2e\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2E_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh_dsp,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh-dsp\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH_DSP_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh3,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh3\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH3_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh3_nommu,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh3-nommu\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH3_NOMMU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh3_dsp,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh3-dsp\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH3_DSP_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh3e,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh3e\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH3E_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh4,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh4\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH4_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh4a,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh4a\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH4A_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh4al_dsp,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh4al-dsp\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH4AL_DSP_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh4_nofpu,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh4-nofpu\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH4_NOFPU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh4_nommu_nofpu,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh4-nommu-nofpu\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH4_NOMMU_NOFPU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh4a_nofpu,\n-    \"sh\",\t\t\t/* Architecture name.   */\n-    \"sh4a-nofpu\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH4A_NOFPU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2a,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2a\",\t\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2A_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2a_nofpu,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2a-nofpu\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2A_NOFPU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2a_nofpu_or_sh4_nommu_nofpu,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2a-nofpu-or-sh4-nommu-nofpu\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2A_NOFPU_OR_SH4_NOMMU_NOFPU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2a_nofpu_or_sh3_nommu,\n-    \"sh\",\t\t\t/* Architecture name. .  */\n-    \"sh2a-nofpu-or-sh3-nommu\",\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2A_NOFPU_OR_SH3_NOMMU_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2a_or_sh4,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2a-or-sh4\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2A_OR_SH4_NEXT\n-  },\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    8,\t\t\t\t/* 8 bits in a byte.  */\n-    bfd_arch_sh,\n-    bfd_mach_sh2a_or_sh3e,\n-    \"sh\",\t\t\t/* Architecture name.  */\n-    \"sh2a-or-sh3e\",\t\t/* Machine name.  */\n-    1,\n-    FALSE,\t\t\t/* Not the default.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    SH2A_OR_SH3E_NEXT\n-  },\n+  N (bfd_mach_sh2,          \"sh2\",       FALSE, arch_info_struct + 1),\n+  N (bfd_mach_sh2e,         \"sh2e\",      FALSE, arch_info_struct + 2),\n+  N (bfd_mach_sh_dsp,       \"sh-dsp\",    FALSE, arch_info_struct + 3),\n+  N (bfd_mach_sh3,          \"sh3\",       FALSE, arch_info_struct + 4),\n+  N (bfd_mach_sh3_nommu,    \"sh3-nommu\", FALSE, arch_info_struct + 5),\n+  N (bfd_mach_sh3_dsp,      \"sh3-dsp\",   FALSE, arch_info_struct + 6),\n+  N (bfd_mach_sh3e,         \"sh3e\",      FALSE, arch_info_struct + 7),\n+  N (bfd_mach_sh4,          \"sh4\",       FALSE, arch_info_struct + 8),\n+  N (bfd_mach_sh4a,         \"sh4a\",      FALSE, arch_info_struct + 9),\n+  N (bfd_mach_sh4al_dsp,    \"sh4al-dsp\", FALSE, arch_info_struct + 10),\n+  N (bfd_mach_sh4_nofpu,    \"sh4-nofpu\", FALSE, arch_info_struct + 11),\n+  N (bfd_mach_sh4_nommu_nofpu, \"sh4-nommu-nofpu\", FALSE, arch_info_struct + 12),\n+  N (bfd_mach_sh4a_nofpu,   \"sh4a-nofpu\", FALSE, arch_info_struct + 13),\n+  N (bfd_mach_sh2a,         \"sh2a\",       FALSE, arch_info_struct + 14),\n+  N (bfd_mach_sh2a_nofpu,   \"sh2a-nofpu\", FALSE, arch_info_struct + 15),\n+  N (bfd_mach_sh2a_nofpu_or_sh4_nommu_nofpu, \"sh2a-nofpu-or-sh4-nommu-nofpu\", FALSE, arch_info_struct + 16),\n+  N (bfd_mach_sh2a_nofpu_or_sh3_nommu, \"sh2a-nofpu-or-sh3-nommu\", FALSE, arch_info_struct + 17),\n+  N (bfd_mach_sh2a_or_sh4,  \"sh2a-or-sh4\",  FALSE, arch_info_struct + 18),\n+  N (bfd_mach_sh2a_or_sh3e, \"sh2a-or-sh3e\", FALSE, NULL)\n };\n \n const bfd_arch_info_type bfd_sh_arch =\n-{\n-  32,\t\t\t\t/* 32 bits in a word.  */\n-  32,\t\t\t\t/* 32 bits in an address.  */\n-  8,\t\t\t\t/* 8 bits in a byte.  */\n-  bfd_arch_sh,\n-  bfd_mach_sh,\n-  \"sh\",\t\t\t\t/* Architecture name.   */\n-  \"sh\",\t\t\t\t/* Machine name.  */\n-  1,\n-  TRUE,\t\t\t\t/* The default machine.  */\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  SH_NEXT\n-};\n-\n+  N (bfd_mach_sh, \"sh\", TRUE, arch_info_struct + 0);\n \n /* This table defines the mappings from the BFD internal numbering\n    system to the opcodes internal flags system."
    },
    {
      "sha": "e7f30fb342b5d8b746f438121e3f8d10ba123101",
      "filename": "bfd/cpu-sparc.c",
      "status": "modified",
      "additions": 40,
      "deletions": 330,
      "changes": 370,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-sparc.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,338 +22,48 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(BITS, NUMBER, PRINT, DEFAULT, NEXT) \\\n+  {\t\t\t\t\t\t\t\\\n+    BITS,      /* Bits in a word.  */\t\t\t\\\n+    BITS,      /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_sparc,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"sparc\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n static const bfd_arch_info_type arch_info_struct[] =\n {\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_sparclet,\n-    \"sparc\",\n-    \"sparc:sparclet\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[1],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_sparclite,\n-    \"sparc\",\n-    \"sparc:sparclite\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[2],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plus,\n-    \"sparc\",\n-    \"sparc:v8plus\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[3],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusa,\n-    \"sparc\",\n-    \"sparc:v8plusa\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[4],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_sparclite_le,\n-    \"sparc\",\n-    \"sparc:sparclite_le\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[5],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9,\n-    \"sparc\",\n-    \"sparc:v9\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[6],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9a,\n-    \"sparc\",\n-    \"sparc:v9a\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[7],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusb,\n-    \"sparc\",\n-    \"sparc:v8plusb\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[8],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9b,\n-    \"sparc\",\n-    \"sparc:v9b\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[9],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusc,\n-    \"sparc\",\n-    \"sparc:v8plusc\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[10],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9c,\n-    \"sparc\",\n-    \"sparc:v9c\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[11],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusd,\n-    \"sparc\",\n-    \"sparc:v8plusd\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[12],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9d,\n-    \"sparc\",\n-    \"sparc:v9d\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[13],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8pluse,\n-    \"sparc\",\n-    \"sparc:v8pluse\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[14],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9e,\n-    \"sparc\",\n-    \"sparc:v9e\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[15],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusv,\n-    \"sparc\",\n-    \"sparc:v8plusv\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[16],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9v,\n-    \"sparc\",\n-    \"sparc:v9v\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[17],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusm,\n-    \"sparc\",\n-    \"sparc:v8plusm\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[18],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9m,\n-    \"sparc\",\n-    \"sparc:v9m\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[19],\n-  },\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v8plusm8,\n-    \"sparc\",\n-    \"sparc:v8plusm8\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[20],\n-  },\n-  {\n-    64,\t/* bits in a word */\n-    64,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc_v9m8,\n-    \"sparc\",\n-    \"sparc:v9m8\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  }\n+  N (32, bfd_mach_sparc_sparclet,     \"sparc:sparclet\",     FALSE, arch_info_struct + 1),\n+  N (32, bfd_mach_sparc_sparclite,    \"sparc:sparclite\",    FALSE, arch_info_struct + 2),\n+  N (32, bfd_mach_sparc_v8plus,       \"sparc:v8plus\",       FALSE, arch_info_struct + 3),\n+  N (32, bfd_mach_sparc_v8plusa,      \"sparc:v8plusa\",      FALSE, arch_info_struct + 4),\n+  N (32, bfd_mach_sparc_sparclite_le, \"sparc:sparclite_le\", FALSE, arch_info_struct + 5),\n+  N (64, bfd_mach_sparc_v9,           \"sparc:v9\",           FALSE, arch_info_struct + 6),\n+  N (64, bfd_mach_sparc_v9a,          \"sparc:v9a\",          FALSE, arch_info_struct + 7),\n+  N (32, bfd_mach_sparc_v8plusb,      \"sparc:v8plusb\",      FALSE, arch_info_struct + 8),\n+  N (64, bfd_mach_sparc_v9b,          \"sparc:v9b\",          FALSE, arch_info_struct + 9),\n+  N (32, bfd_mach_sparc_v8plusc,      \"sparc:v8plusc\",      FALSE, arch_info_struct + 10),\n+  N (64, bfd_mach_sparc_v9c,          \"sparc:v9c\",          FALSE, arch_info_struct + 11),\n+  N (32, bfd_mach_sparc_v8plusd,      \"sparc:v8plusd\",      FALSE, arch_info_struct + 12),\n+  N (64, bfd_mach_sparc_v9d,          \"sparc:v9d\",          FALSE, arch_info_struct + 13),\n+  N (32, bfd_mach_sparc_v8pluse,      \"sparc:v8pluse\",      FALSE, arch_info_struct + 14),\n+  N (64, bfd_mach_sparc_v9e,          \"sparc:v9e\",          FALSE, arch_info_struct + 15),\n+  N (32, bfd_mach_sparc_v8plusv,      \"sparc:v8plusv\",      FALSE, arch_info_struct + 16),\n+  N (64, bfd_mach_sparc_v9v,          \"sparc:v9v\",          FALSE, arch_info_struct + 17),\n+  N (32, bfd_mach_sparc_v8plusm,      \"sparc:v8plusm\",      FALSE, arch_info_struct + 18),\n+  N (64, bfd_mach_sparc_v9m,          \"sparc:v9m\",          FALSE, arch_info_struct + 19),\n+  N (32, bfd_mach_sparc_v8plusm8,     \"sparc:v8plusm8\",     FALSE, arch_info_struct + 20),\n+  N (64, bfd_mach_sparc_v9m8,         \"sparc:v9m8\",         FALSE, NULL)\n };\n \n const bfd_arch_info_type bfd_sparc_arch =\n-  {\n-    32,\t/* bits in a word */\n-    32,\t/* bits in an address */\n-    8,\t/* bits in a byte */\n-    bfd_arch_sparc,\n-    bfd_mach_sparc,\n-    \"sparc\",\n-    \"sparc\",\n-    3,\n-    TRUE, /* the default */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &arch_info_struct[0],\n-  };\n+  N (32, bfd_mach_sparc, \"sparc\", TRUE, arch_info_struct);"
    },
    {
      "sha": "af66045319f73ef45d6ce880fcf2db12f4637071",
      "filename": "bfd/cpu-spu.c",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-spu.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -20,7 +20,6 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n-\n static const bfd_arch_info_type *\n spu_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n {\n@@ -35,21 +34,20 @@ spu_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n   /*NOTREACHED*/\n }\n \n-const bfd_arch_info_type bfd_spu_arch[] =\n+const bfd_arch_info_type bfd_spu_arch =\n {\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_spu,\t/* architecture */\n-    bfd_mach_spu,\t/* machine */\n-    \"spu\",\t\t/* architecture name */\n-    \"spu:256K\",\t\t/* printable name */\n-    3,\t\t\t/* aligned power */\n-    TRUE,\t\t/* the default machine for the architecture */\n-    spu_compatible,\t/* the spu is only compatible with itself, see above */\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\t\t\t/* next -- there are none! */\n-  }\n+  32,\t\t\t/* Bits in a word.  */\n+  32,\t\t\t/* Bits in an address.  */\n+  8,\t\t\t/* Bits in a byte.  */\n+  bfd_arch_spu,\t\t/* Architecture number.  */\n+  bfd_mach_spu,\t\t/* Machine number.  */\n+  \"spu\",\t\t/* Architecture name.  */\n+  \"spu:256K\",\t\t/* Printable name.  */\n+  3,\t\t\t/* Section alignment power.  */\n+  TRUE,\t\t\t/* Default machine.  */\n+  spu_compatible,\t/* The spu is only compatible with itself, see above.  */\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\t\t\t/* Next -- there are none!  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "606d66353b494b6166ca8e8ebd2fd2ef03bdfb1d",
      "filename": "bfd/cpu-tic30.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic30.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic30.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tic30.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_tic30_arch =\n {\n-  32,\t\t\t\t/* 32 bits in a word */\n-  32,\t\t\t\t/* 32 bits in an address */\n-  8,\t\t\t\t/* 8 bits in a byte */\n+  32,\t\t\t\t/* Bits in a word.  */\n+  32,\t\t\t\t/* Bits in an address.  */\n+  8,\t\t\t\t/* Bits in a byte.  */\n   bfd_arch_tic30,\n-  0,\t\t\t\t/* only 1 machine */\n+  0,\t\t\t\t/* Only 1 machine.  */\n   \"tic30\",\n   \"tms320c30\",\n   2,\n-  TRUE,\t\t\t\t/* the one and only */\n+  TRUE,\t\t\t\t/* The one and only.  */\n   bfd_default_compatible,\n   bfd_default_scan,\n   bfd_arch_default_fill,\n-  0,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "cf87bfedf5bf7d5bc955b8a20949c66f64886804",
      "filename": "bfd/cpu-tic4x.c",
      "status": "modified",
      "additions": 19,
      "deletions": 32,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic4x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic4x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tic4x.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -45,39 +45,26 @@ tic4x_scan (const struct bfd_arch_info *info,\n   return FALSE;\n }\n \n+#define N(NUMBER, NAME, PRINT, DEFAULT, NEXT)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    32,        /* Bits in a word.  */\t\t\t\\\n+    32,        /* Bits in an address.  */\t\t\\\n+    32,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_tic4x,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    NAME,\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    0,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    tic4x_scan,\t\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n \n const bfd_arch_info_type bfd_tic3x_arch =\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    32,\t\t\t\t/* 32 bits in a byte.  */\n-    bfd_arch_tic4x,\n-    bfd_mach_tic3x,\t\t/* Machine number.  */\n-    \"tic3x\",\t\t\t/* Architecture name.  */\n-    \"tms320c3x\",\t\t/* Printable name.  */\n-    0,\t\t\t\t/* Alignment power.  */\n-    FALSE,\t\t\t/* Not the default architecture.  */\n-    bfd_default_compatible,\n-    tic4x_scan,\n-    bfd_arch_default_fill,\n-    0\n-  };\n+  N (bfd_mach_tic3x, \"tic3x\", \"tms320c3x\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_tic4x_arch =\n-  {\n-    32,\t\t\t\t/* 32 bits in a word.  */\n-    32,\t\t\t\t/* 32 bits in an address.  */\n-    32,\t\t\t\t/* 32 bits in a byte.  */\n-    bfd_arch_tic4x,\n-    bfd_mach_tic4x,\t\t/* Machine number.  */\n-    \"tic4x\",\t\t\t/* Architecture name.  */\n-    \"tms320c4x\",\t\t/* Printable name.  */\n-    0,\t\t\t\t/* Alignment power.  */\n-    TRUE,\t\t\t/* The default architecture.  */\n-    bfd_default_compatible,\n-    tic4x_scan,\n-    bfd_arch_default_fill,\n-    &bfd_tic3x_arch,\n-  };\n-\n-\n+  N (bfd_mach_tic4x, \"tic4x\", \"tms320c4x\", TRUE, &bfd_tic3x_arch);"
    },
    {
      "sha": "67e6e6ca8077e2733bcd456cb00fe58cf896fd56",
      "filename": "bfd/cpu-tic54x.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic54x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic54x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tic54x.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_tic54x_arch =\n {\n-  16,\t\t\t\t/* 16 bits in a word */\n-  16,\t\t\t\t/* 16 bits in an address (except '548) */\n-  16,\t\t\t\t/* 16 bits in a byte */\n+  16,\t\t\t\t/* Bits in a word.  */\n+  16,\t\t\t\t/* Bits in an address (except '548).  */\n+  16,\t\t\t\t/* Bits in a byte.  */\n   bfd_arch_tic54x,\n-  0,\t\t\t\t/* only 1 machine */\n+  0,\t\t\t\t/* Only 1 machine.  */\n   \"tic54x\",\n   \"tms320c54x\",\n   1,\n-  TRUE,\t\t\t\t/* the one and only */\n+  TRUE,\t\t\t\t/* The one and only.  */\n   bfd_default_compatible,\n   bfd_default_scan,\n   bfd_arch_default_fill,\n-  0,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "286927ba63364c0ed0bfb1c153b3f48e671b5c24",
      "filename": "bfd/cpu-tic6x.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tic6x.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,18 +23,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_tic6x_arch =\n-  {\n-    32, /* 32 bits in a word.  */\n-    32, /* 32 bits in an address.  */\n-    8, /* 8 bits in a byte.  */\n-    bfd_arch_tic6x, /* Architecture.  */\n-    0, /* No BFD machine numbers needed.  */\n-    \"tic6x\", /* Architecture name.  */\n-    \"tic6x\", /* Printable name.  */\n-    2, /* Section alignment power.  */\n-    TRUE, /* Default machine for this architecture.  */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  32, /* Bits in a word.  */\n+  32, /* Bits in an address.  */\n+  8,  /* Bits in a byte.  */\n+  bfd_arch_tic6x, /* Architecture.  */\n+  0,  /* No BFD machine numbers needed.  */\n+  \"tic6x\", /* Architecture name.  */\n+  \"tic6x\", /* Printable name.  */\n+  2, /* Section alignment power.  */\n+  TRUE, /* Default machine for this architecture.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "2fcbd9ddc460a7b1df59b2f08763b7252d6f38f8",
      "filename": "bfd/cpu-tic80.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tic80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tic80.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_tic80_arch =\n-  {\n-    32,\t\t\t\t/* 32 bits in a word */\n-    32,\t\t\t\t/* 32 bits in an address */\n-    8,\t\t\t\t/* 8 bits in a byte */\n-    bfd_arch_tic80,\t\t/* bfd_architecture enum */\n-    0,\t\t\t\t/* only 1 machine */\n-    \"tic80\",\t\t\t/* architecture name */\n-    \"tic80\",\t\t\t/* printable name */\n-    2,\t\t\t\t/* section alignment power */\n-    TRUE,\t\t\t/* default machine for architecture */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    NULL,\t\t\t\t/* Pointer to next in chain */\n-  };\n+{\n+  32,\t\t\t\t/* Bits in a word.  */\n+  32,\t\t\t\t/* Bits in an address.  */\n+  8,\t\t\t\t/* Bits in a byte.  */\n+  bfd_arch_tic80,\t\t/* Architecture number.  */\n+  0,\t\t\t\t/* Only 1 machine.  */\n+  \"tic80\",\t\t\t/* Architecture name.  */\n+  \"tic80\",\t\t\t/* Printable name.  */\n+  2,\t\t\t\t/* Section alignment power.  */\n+  TRUE,\t\t\t\t/* Default machine.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\t\t\t\t/* Pointer to next in chain.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "633dde8d9700f225565ff5736ccde29044f01fc8",
      "filename": "bfd/cpu-tilegx.c",
      "status": "modified",
      "additions": 21,
      "deletions": 30,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tilegx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tilegx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tilegx.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -22,36 +22,27 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(BITS, NUMBER, PRINT, DEFAULT, NEXT)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    BITS,      /* Bits in a word.  */\t\t\t\\\n+    BITS,      /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_tilegx,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"tilegx\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    3,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type bfd_tilegx32_arch =\n-  {\n-    32, /* 32 bits in a word */\n-    32, /* 32 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_tilegx,\n-    bfd_mach_tilegx32,\n-    \"tilegx32\",\n-    \"tilegx32\",\n-    3,\n-    FALSE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+  N (32, bfd_mach_tilegx32, \"tilegx32\", FALSE, NULL);\n \n const bfd_arch_info_type bfd_tilegx_arch =\n-  {\n-    64, /* 64 bits in a word */\n-    64, /* 64 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_tilegx,\n-    bfd_mach_tilegx,\n-    \"tilegx\",\n-    \"tilegx\",\n-    3,\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    &bfd_tilegx32_arch,\n-  };\n+  N (64, bfd_mach_tilegx, \"tilegx\", TRUE, &bfd_tilegx32_arch);\n+"
    },
    {
      "sha": "82ad8d2d0489a9c86ae51ae58918df9ff10d4343",
      "filename": "bfd/cpu-tilepro.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tilepro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-tilepro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tilepro.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -23,18 +23,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_tilepro_arch =\n-  {\n-    32, /* 32 bits in a word */\n-    32, /* 32 bits in an address */\n-    8,  /* 8 bits in a byte */\n-    bfd_arch_tilepro,\n-    bfd_mach_tilepro,\n-    \"tilepro\",\n-    \"tilepro\",\n-    3,\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  32, /* Bits in a word.  */\n+  32, /* Bits in an address.  */\n+  8,  /* Bits in a byte.  */\n+  bfd_arch_tilepro,\n+  bfd_mach_tilepro,\n+  \"tilepro\",\n+  \"tilepro\",\n+  3,\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "0daea285ef9678ca789bf71b9c001fd9dc9cfe5f",
      "filename": "bfd/cpu-v850.c",
      "status": "modified",
      "additions": 10,
      "deletions": 15,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-v850.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,23 +24,18 @@\n #include \"safe-ctype.h\"\n \n #define N(number, print, default, next)  \\\n-{  32, 32, 8, bfd_arch_v850, number, \"v850\", print \":old-gcc-abi\", 2, default, \\\n-   bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next }\n+ { 32, 32, 8, bfd_arch_v850, number, \"v850\", print \":old-gcc-abi\", 2, default, \\\n+   bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n-#define NEXT NULL\n-\n-static const bfd_arch_info_type arch_info_struct[] =\n+static const bfd_arch_info_type arch_info_struct[6] =\n {\n-  N (bfd_mach_v850e3v5, \"v850e3v5\",\tFALSE, & arch_info_struct[1]),\n-  N (bfd_mach_v850e3v5, \"v850e2v4\",\tFALSE, & arch_info_struct[2]),\n-  N (bfd_mach_v850e2v3, \"v850e2v3\",\tFALSE, & arch_info_struct[3]),\n-  N (bfd_mach_v850e2,\t\"v850e2\",\tFALSE, & arch_info_struct[4]),\n-  N (bfd_mach_v850e1,\t\"v850e1\",\tFALSE, & arch_info_struct[5]),\n-  N (bfd_mach_v850e,\t\"v850e\",\tFALSE, NULL)\n+  N (bfd_mach_v850e3v5, \"v850e3v5\", FALSE, arch_info_struct + 1),\n+  N (bfd_mach_v850e3v5, \"v850e2v4\", FALSE, arch_info_struct + 2),\n+  N (bfd_mach_v850e2v3, \"v850e2v3\", FALSE, arch_info_struct + 3),\n+  N (bfd_mach_v850e2,\t\"v850e2\",   FALSE, arch_info_struct + 4),\n+  N (bfd_mach_v850e1,\t\"v850e1\",   FALSE, arch_info_struct + 5),\n+  N (bfd_mach_v850e,\t\"v850e\",    FALSE, NULL)\n };\n \n-#undef  NEXT\n-#define NEXT & arch_info_struct[0]\n-\n const bfd_arch_info_type bfd_v850_arch =\n-  N (bfd_mach_v850, \"v850\", TRUE, NEXT);\n+  N (bfd_mach_v850,     \"v850\",     TRUE,  arch_info_struct + 0);"
    },
    {
      "sha": "4c84226f23a7bef23d40345c1ba0394f6d7f8191",
      "filename": "bfd/cpu-v850_rh850.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-v850_rh850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-v850_rh850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-v850_rh850.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,8 +24,8 @@\n #include \"safe-ctype.h\"\n \n #define R(number, print, default, next)  \\\n-{  32, 32, 8, bfd_arch_v850_rh850, number, \"v850\", print, 2, default, \\\n-   bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next }\n+ { 32, 32, 8, bfd_arch_v850_rh850, number, \"v850\", print, 2, default, \\\n+   bfd_default_compatible, bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n static const bfd_arch_info_type arch_info_struct[] =\n {"
    },
    {
      "sha": "3e9a4024a71d543ba4110aa1fa7128fe9323018c",
      "filename": "bfd/cpu-vax.c",
      "status": "modified",
      "additions": 16,
      "deletions": 15,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-vax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-vax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-vax.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,18 +24,19 @@\n #include \"libbfd.h\"\n \n const bfd_arch_info_type bfd_vax_arch =\n-  {\n-    32,\t/* 32 bits in a word */\n-    32,\t/* 32 bits in an address */\n-    8,\t/* 8 bits in a byte */\n-    bfd_arch_vax,\n-    0,\t/* only 1 machine */\n-    \"vax\",\n-    \"vax\",\n-    3,\n-    TRUE, /* the one and only */\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n-  };\n+{\n+  32,\t/* Bits in a word.  */\n+  32,\t/* Bits in an address.  */\n+  8,\t/* Bits in a byte.  */\n+  bfd_arch_vax,\n+  0,\t/* Only 1 machine.  */\n+  \"vax\",\n+  \"vax\",\n+  3,\n+  TRUE, /* The one and only.  */\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n+};"
    },
    {
      "sha": "a1204de99135ed3814ba35e24504266b0252cbb6",
      "filename": "bfd/cpu-visium.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-visium.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-visium.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-visium.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -25,17 +25,18 @@\n \n const bfd_arch_info_type bfd_visium_arch =\n {\n-  32,\t\t\t\t/* bits per word */\n-  32,\t\t\t\t/* bits per address */\n-  8,\t\t\t\t/* bits per byte */\n-  bfd_arch_visium,\t\t/* architecture */\n-  bfd_mach_visium,\t\t/* machine */\n-  \"visium\",\t\t\t/* architecture name */\n-  \"visium\",\t\t\t/* printable name */\n-  2,\t\t\t\t/* section align power */\n-  TRUE,\t\t\t\t/* the default ? */\n-  bfd_default_compatible,\t/* architecture comparison fn */\n-  bfd_default_scan,\t\t/* string to architecture convert fn */\n-  bfd_arch_default_fill,\t/* default fill */\n-  NULL\t\t\t\t/* next in list */\n+  32,\t\t\t\t/* Bits per word.  */\n+  32,\t\t\t\t/* Bits per address.  */\n+  8,\t\t\t\t/* Bits per byte.  */\n+  bfd_arch_visium,\t\t/* Architecture number.  */\n+  bfd_mach_visium,\t\t/* Machine number.  */\n+  \"visium\",\t\t\t/* Architecture name.  */\n+  \"visium\",\t\t\t/* Machine name.  */\n+  2,\t\t\t\t/* Section align power.  */\n+  TRUE,\t\t\t\t/* The default ?  */\n+  bfd_default_compatible,\t/* Architecture comparison fn.  */\n+  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n+  bfd_arch_default_fill,\t/* Default fill.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "142e3c2853ad946fe3df7a6b71dcb914e0fbff32",
      "filename": "bfd/cpu-wasm32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-wasm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-wasm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-wasm32.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,8 +24,8 @@\n #include \"libiberty.h\"\n \n #define N(number, print, default, next)  \\\n-{  32, 32, 8, bfd_arch_wasm32, number, \"wasm32\", \"wasm32\", 4, default, bfd_default_compatible, \\\n-   bfd_default_scan, bfd_arch_default_fill, next }\n+ { 32, 32, 8, bfd_arch_wasm32, number, \"wasm32\", \"wasm32\", 4, default, bfd_default_compatible, \\\n+   bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n static const bfd_arch_info_type arch_info_struct[] =\n {"
    },
    {
      "sha": "3605c3c34bd8e7290e767651acdfdb365a4f6c78",
      "filename": "bfd/cpu-xc16x.c",
      "status": "modified",
      "additions": 22,
      "deletions": 45,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xc16x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xc16x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-xc16x.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,53 +24,30 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n \n+#define N(BITS_ADDR, NUMBER, PRINT, DEFAULT, NEXT)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    16,        /* Bits in a word.  */\t\t\t\\\n+    BITS_ADDR, /* Bits in an address.  */\t\t\\\n+    8,\t       /* Bits in a byte.  */\t\t\t\\\n+    bfd_arch_xc16x,\t\t\t\t\t\\\n+    NUMBER,\t\t\t\t\t\t\\\n+    \"xc16x\",\t\t\t\t\t\t\\\n+    PRINT,\t\t\t\t\t\t\\\n+    1,\t\t/* Section alignment power.  */\t\t\\\n+    DEFAULT,\t\t\t\t\t\t\\\n+    bfd_default_compatible,\t\t\t\t\\\n+    bfd_default_scan,\t\t\t\t\t\\\n+    bfd_arch_default_fill,\t\t\t\t\\\n+    NEXT,\t\t\t\t\t\t\\\n+    0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n+  }\n+\n const bfd_arch_info_type xc16xs_info_struct =\n-{\n-  16,\t\t\t\t/* Bits per word.  */\n-  16,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_xc16x,\t\t/* Architecture.  */\n-  bfd_mach_xc16xs,\t\t/* Machine.  */\n-  \"xc16x\",\t\t\t/* Architecture name.  */\n-  \"xc16xs\",\t\t\t/* Printable name.  */\n-  1,\t\t\t\t/* Section alignment - 16 bit.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n-};\n+  N (16, bfd_mach_xc16xs, \"xc16xs\", FALSE, NULL);\n \n const bfd_arch_info_type xc16xl_info_struct =\n-{\n-  16,\t\t\t\t/* Bits per word.  */\n-  32,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_xc16x,\t\t/* Architecture.  */\n-  bfd_mach_xc16xl,\t\t/* Machine.  */\n-  \"xc16x\",\t\t\t/* Architecture name.  */\n-  \"xc16xl\",\t\t\t/* Printable name.  */\n-  1,\t\t\t\t/* Section alignment - 16 bit.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  & xc16xs_info_struct\t\t/* Next in list.  */\n-};\n+  N (32, bfd_mach_xc16xl, \"xc16xl\", FALSE, & xc16xs_info_struct);\n \n const bfd_arch_info_type bfd_xc16x_arch =\n-{\n-  16,\t\t\t\t/* Bits per word.  */\n-  16,\t\t\t\t/* Bits per address.  */\n-  8,\t\t\t\t/* Bits per byte.  */\n-  bfd_arch_xc16x,\t\t/* Architecture.  */\n-  bfd_mach_xc16x,\t\t/* Machine.  */\n-  \"xc16x\",\t\t\t/* Architecture name.  */\n-  \"xc16x\",\t\t\t/* Printable name.  */\n-  1,\t\t\t\t/* Section alignment - 16 bit.  */\n-  TRUE,\t\t\t\t/* The default ?  */\n-  bfd_default_compatible,\t/* Architecture comparison fn.  */\n-  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n-  bfd_arch_default_fill,\t/* Default fill.  */\n-  & xc16xl_info_struct\t\t/* Next in list.  */\n-};\n+  N (16, bfd_mach_xc16x, \"xc16x\", TRUE, & xc16xl_info_struct);\n+"
    },
    {
      "sha": "720a7382a5cb45452f15282981054af0429c4f34",
      "filename": "bfd/cpu-xgate.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xgate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xgate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-xgate.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_xgate_arch =\n {\n-    16, /* 16 bits in a word.  */\n-    32, /* 32 bits used as 16 bit address and PPAGE value.  */\n-    8,  /* 8 bits in a byte.  */\n-    bfd_arch_xgate,\n-    bfd_mach_xgate,\n-    \"xgate\",\n-    \"xgate\",\n-    4,\t/* Section alignment power.  */\n-    TRUE,\n-    bfd_default_compatible,\n-    bfd_default_scan,\n-    bfd_arch_default_fill,\n-    0,\n+  16, /* Bits in a word.  */\n+  32, /* Bits used as 16 bit address and PPAGE value.  */\n+  8,  /* Bits in a byte.  */\n+  bfd_arch_xgate,\n+  bfd_mach_xgate,\n+  \"xgate\",\n+  \"xgate\",\n+  4,\t/* Section alignment power.  */\n+  TRUE,\n+  bfd_default_compatible,\n+  bfd_default_scan,\n+  bfd_arch_default_fill,\n+  NULL,\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "84aa391a9cc9d721295c7bc3849d91ca50cb1b0f",
      "filename": "bfd/cpu-xstormy16.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xstormy16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xstormy16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-xstormy16.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -24,17 +24,18 @@\n \n const bfd_arch_info_type bfd_xstormy16_arch =\n {\n-  16,\t\t\t\t/* bits per word */\n-  32,\t\t\t\t/* bits per address */\n-  8,\t\t\t\t/* bits per byte */\n-  bfd_arch_xstormy16,\t\t/* architecture */\n-  bfd_mach_xstormy16,\t\t/* machine */\n-  \"xstormy16\",\t\t\t/* architecture name */\n-  \"xstormy16\",\t\t\t/* printable name */\n-  2,\t\t\t\t/* section align power */\n-  TRUE,\t\t\t\t/* the default ? */\n-  bfd_default_compatible,\t/* architecture comparison fn */\n-  bfd_default_scan,\t\t/* string to architecture convert fn */\n+  16,\t\t\t\t/* Bits per word.  */\n+  32,\t\t\t\t/* Bits per address.  */\n+  8,\t\t\t\t/* Bits per byte.  */\n+  bfd_arch_xstormy16,\t\t/* Architecture.  */\n+  bfd_mach_xstormy16,\t\t/* Machine.  */\n+  \"xstormy16\",\t\t\t/* Architecture name.  */\n+  \"xstormy16\",\t\t\t/* Printable name.  */\n+  2,\t\t\t\t/* Section align power.  */\n+  TRUE,\t\t\t\t/* The default ?  */\n+  bfd_default_compatible,\t/* Architecture comparison fn.  */\n+  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* next in list */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "47668d6e2a48876c50d5a905167d4c47f2b4a395",
      "filename": "bfd/cpu-xtensa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-xtensa.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -36,5 +36,6 @@ const bfd_arch_info_type bfd_xtensa_arch =\n   bfd_default_compatible,\t/* Architecture comparison fn.  */\n   bfd_default_scan,\t\t/* String to architecture convert fn.  */\n   bfd_arch_default_fill,\t/* Default fill.  */\n-  NULL\t\t\t\t/* Next in list.  */\n+  NULL,\t\t\t\t/* Next in list.  */\n+  0 /* Maximum offset of a reloc from the start of an insn.  */\n };"
    },
    {
      "sha": "7d3b8649e38cd1e8ff356b00bae7b0e9f51008e7",
      "filename": "bfd/cpu-z80.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-z80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-z80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-z80.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -41,8 +41,8 @@ compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n }\n \n #define N(name,print,default,next)  \\\n-{ 16, 16, 8, bfd_arch_z80, name, \"z80\", print, 0, default, \\\n-  compatible, bfd_default_scan, bfd_arch_default_fill, next }\n+ { 16, 16, 8, bfd_arch_z80, name, \"z80\", print, 0, default, \\\n+   compatible, bfd_default_scan, bfd_arch_default_fill, next, 0 }\n \n #define M(n) &arch_info_struct[n]\n "
    },
    {
      "sha": "56ee56aac0711dcd5543fb17f9acba9f0eb2a21c",
      "filename": "bfd/cpu-z8k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-z8k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/bfd/cpu-z8k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-z8k.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -37,12 +37,12 @@ compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n static const bfd_arch_info_type arch_info_struct[] =\n {\n   { 32, 16, 8, bfd_arch_z8k, bfd_mach_z8002, \"z8k\", \"z8002\", 1, FALSE,\n-    compatible, bfd_default_scan, bfd_arch_default_fill, 0 }\n+    compatible, bfd_default_scan, bfd_arch_default_fill, NULL, 0 }\n };\n \n const bfd_arch_info_type bfd_z8k_arch =\n {\n   32, 32, 8, bfd_arch_z8k, bfd_mach_z8001, \"z8k\", \"z8001\", 1, TRUE,\n   compatible, bfd_default_scan, bfd_arch_default_fill,\n-  &arch_info_struct[0]\n+  &arch_info_struct[0], 0\n };"
    },
    {
      "sha": "7ccf842955bf21f6dcd62085111bf21e6698b48a",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-10  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24907\n+\t* objdump.c (null_print): New function.\n+\t(disassemble_bytes): Delete previous_octets local and replace with\n+\ta test of the max_reloc_offset_into_insn field of the\n+\tbfd_arch_info structure.  If a reloc is a potential match for the\n+\tnext insn, then perform a dummy disassembly in order to calculate\n+\tits real length.\n+\n 2019-09-09  Phil Blundell  <pb@pbcl.net>\n \n \tbinutils 2.33 branch created."
    },
    {
      "sha": "2303fe4abf810b3cf9090e3a3ef4349dac809781",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 35,
      "deletions": 15,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -1836,6 +1836,12 @@ objdump_sprintf (SFILE *f, const char *format, ...)\n \n #define DEFAULT_SKIP_ZEROES_AT_END 3\n \n+static int\n+null_print (const void * stream ATTRIBUTE_UNUSED, const char * format ATTRIBUTE_UNUSED, ...)\n+{\n+  return 1;\n+}\n+\n /* Disassemble some data in memory between given values.  */\n \n static void\n@@ -1903,10 +1909,7 @@ disassemble_bytes (struct disassemble_info * inf,\n     {\n       bfd_vma z;\n       bfd_boolean need_nl = FALSE;\n-      int previous_octets;\n \n-      /* Remember the length of the previous instruction.  */\n-      previous_octets = octets;\n       octets = 0;\n \n       /* Make sure we don't use relocs from previous instructions.  */\n@@ -1990,26 +1993,43 @@ disassemble_bytes (struct disassemble_info * inf,\n \t\t  && *relppp < relppend)\n \t\t{\n \t\t  bfd_signed_vma distance_to_rel;\n+\t\t  int insn_size = 0;\n \n \t\t  distance_to_rel = (**relppp)->address\n \t\t    - (rel_offset + addr_offset);\n \n+\t\t  if (distance_to_rel > 0\n+\t\t      && aux->abfd->arch_info->max_reloc_offset_into_insn <= distance_to_rel)\n+\t\t    {\n+\t\t      /* This reloc *might* apply to the current insn,\n+\t\t\t starting somewhere inside it.  Discover the length\n+\t\t\t of the current insn so that the check below will\n+\t\t\t work.  */\n+\t\t      if (insn_width)\n+\t\t\tinsn_size = insn_width;\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* We find the length by calling the dissassembler\n+\t\t\t     function with a dummy print handler.  This should\n+\t\t\t     work unless the disassembler is not expecting to\n+\t\t\t     be called multiple times for the same address.\n+\n+\t\t\t     This does mean disassembling the instruction\n+\t\t\t     twice, but we only do this when there is a high\n+\t\t\t     probability that there is a reloc that will\n+\t\t\t     affect the instruction.  */\n+\t\t\t  inf->fprintf_func = (fprintf_ftype) null_print;\n+\t\t\t  insn_size = disassemble_fn (section->vma\n+\t\t\t\t\t\t      + addr_offset, inf);\n+\t\t\t  inf->fprintf_func = (fprintf_ftype) objdump_sprintf;\n+\t\t\t}\n+\t\t    }\n+\n \t\t  /* Check to see if the current reloc is associated with\n \t\t     the instruction that we are about to disassemble.  */\n \t\t  if (distance_to_rel == 0\n-\t\t      /* FIXME: This is wrong.  We are trying to catch\n-\t\t\t relocs that are addressed part way through the\n-\t\t\t current instruction, as might happen with a packed\n-\t\t\t VLIW instruction.  Unfortunately we do not know the\n-\t\t\t length of the current instruction since we have not\n-\t\t\t disassembled it yet.  Instead we take a guess based\n-\t\t\t upon the length of the previous instruction.  The\n-\t\t\t proper solution is to have a new target-specific\n-\t\t\t disassembler function which just returns the length\n-\t\t\t of an instruction at a given address without trying\n-\t\t\t to display its disassembly. */\n \t\t      || (distance_to_rel > 0\n-\t\t\t  && distance_to_rel < (bfd_signed_vma) (previous_octets/ opb)))\n+\t\t\t  && distance_to_rel < (bfd_signed_vma) (insn_size / opb)))\n \t\t    {\n \t\t      inf->flags |= INSN_HAS_RELOC;\n \t\t      aux->reloc = **relppp;"
    },
    {
      "sha": "444bd16987bf9e33122c4553d919668d4793f488",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -1,3 +1,9 @@\n+2019-09-10  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24907\n+\t* testsuite/gas/arm/pr24907.s: New test.\n+\t* testsuite/gas/arm/pr24907.d: Expected disassembly.\n+\n 2019-09-09  Phil Blundell  <pb@pbcl.net>\n \n \tbinutils 2.33 branch created."
    },
    {
      "sha": "8268d4bdc151c538316e04ea4bbf34e3dbaeb88b",
      "filename": "gas/testsuite/gas/arm/pr24907.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/gas/testsuite/gas/arm/pr24907.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/gas/testsuite/gas/arm/pr24907.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/pr24907.d?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -0,0 +1,19 @@\n+# name: Disassembling variable width insns with relocs (PR 24907)\n+# as:\n+# objdump: -d\n+# This test is only valid on ELF based ports.\n+#notarget: *-*-pe *-*-wince *-*-vxworks\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.text:\n+\n+0+000 <foo>:\n+   0:\t46c0      \tnop\t\t\t; .*\n+   2:\tf7ff fffe \tbl\t0 <log_func>\n+   6:\te002      \tb\\.n\te <func\\+0x2>\n+   8:\tf7ff fffe \tbl\tc <func>\n+\n+0+000c <func>:\n+   c:\t46c0      \tnop\t\t\t; .*\n+   e:\t46c0      \tnop\t\t\t; .*"
    },
    {
      "sha": "ee8114e5747f29bbc74a63ec52ac05b8253f5fc9",
      "filename": "gas/testsuite/gas/arm/pr24907.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aebcfb76fc165795e67917cb67cf985c4dfdc577/gas/testsuite/gas/arm/pr24907.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aebcfb76fc165795e67917cb67cf985c4dfdc577/gas/testsuite/gas/arm/pr24907.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/pr24907.s?ref=aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "patch": "@@ -0,0 +1,16 @@\n+\t.syntax unified\n+\t.text\n+\t.thumb\n+\n+.global foo\n+foo:\n+\tnop\n+\tbl  log_func\n+\tb.n .L1\n+\tbl  func\n+\n+.global func\n+func:\n+\tnop\n+.L1:\n+\tnop"
    }
  ]
}