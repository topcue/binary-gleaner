{
  "sha": "491144b5e21bbfd41969c175aebb663976f59058",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDkxMTQ0YjVlMjFiYmZkNDE5NjljMTc1YWViYjY2Mzk3NmY1OTA1OA==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-14T19:36:58Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-18T00:35:12Z"
    },
    "message": "Change boolean options to bool instead of int\n\nThis is for add_setshow_boolean_cmd as well as the gdb::option interface.\n\ngdb/ChangeLog:\n\n2019-09-17  Christian Biesinger  <cbiesinger@google.com>\n\n\t* ada-lang.c (ada_ignore_descriptive_types_p): Change to bool.\n\t(print_signatures): Likewise.\n\t(trust_pad_over_xvs): Likewise.\n\t* arch/aarch64-insn.c (aarch64_debug): Likewise.\n\t* arch/aarch64-insn.h (aarch64_debug): Likewise.\n\t* arm-linux-nat.c (arm_apcs_32): Likewise.\n\t* arm-linux-tdep.c (arm_apcs_32): Likewise.\n\t* arm-nbsd-nat.c (arm_apcs_32): Likewise.\n\t* arm-tdep.c (arm_debug): Likewise.\n\t(arm_apcs_32): Likewise.\n\t* auto-load.c (debug_auto_load): Likewise.\n\t(auto_load_gdb_scripts): Likewise.\n\t(global_auto_load): Likewise.\n\t(auto_load_local_gdbinit): Likewise.\n\t(auto_load_local_gdbinit_loaded): Likewise.\n\t* auto-load.h (global_auto_load): Likewise.\n\t(auto_load_local_gdbinit): Likewise.\n\t(auto_load_local_gdbinit_loaded): Likewise.\n\t* breakpoint.c (disconnected_dprintf): Likewise.\n\t(breakpoint_proceeded): Likewise.\n\t(automatic_hardware_breakpoints): Likewise.\n\t(always_inserted_mode): Likewise.\n\t(target_exact_watchpoints): Likewise.\n\t(_initialize_breakpoint): Update.\n\t* breakpoint.h (target_exact_watchpoints): Change to bool.\n\t* btrace.c (maint_btrace_pt_skip_pad): Likewise.\n\t* cli/cli-cmds.c (trace_commands): Likewise.\n\t* cli/cli-cmds.h (trace_commands): Likewise.\n\t* cli/cli-decode.c (add_setshow_boolean_cmd): Change int* argument\n\tto bool*.\n\t* cli/cli-logging.c (logging_overwrite): Change to bool.\n\t(logging_redirect): Likewise.\n\t(debug_redirect): Likewise.\n\t* cli/cli-option.h (option_def) <boolean>: Change return type to bool*.\n\t(struct boolean_option_def) <get_var_address_cb_>: Change return type\n\tto bool.\n\t<boolean_option_def>: Update.\n\t(struct flag_option_def): Change default type of Context to bool\n\tfrom int.\n\t<flag_option_def>: Change return type of var_address_cb_ to bool*.\n\t* cli/cli-setshow.c (do_set_command): Cast to bool* instead of int*.\n\t(get_setshow_command_value_string): Likewise.\n\t* cli/cli-style.c (cli_styling): Change to bool.\n\t(source_styling): Likewise.\n\t* cli/cli-style.h (source_styling): Likewise.\n\t(cli_styling): Likewise.\n\t* cli/cli-utils.h (struct qcs_flags) <quiet, cont, silent>: Change\n\tto bool.\n\t* command.h (var_types): Update comment.\n\t(add_setshow_boolean_cmd): Change int* var argument to bool*.\n\t* compile/compile-cplus-types.c (debug_compile_cplus_types): Change to\n\tbool.\n\t(debug_compile_cplus_scopes): Likewise.\n\t* compile/compile-internal.h (compile_debug): Likewise.\n\t* compile/compile.c (compile_debug): Likewise.\n\t(struct compile_options) <raw>: Likewise.\n\t* cp-support.c (catch_demangler_crashes): Likewise.\n\t* cris-tdep.c (usr_cmd_cris_version_valid): Likewise.\n\t(usr_cmd_cris_dwarf2_cfi): Likewise.\n\t* csky-tdep.c (csky_debug): Likewise.\n\t* darwin-nat.c (enable_mach_exceptions): Likewise.\n\t* dcache.c (dcache_enabled_p): Likewise.\n\t* defs.h (info_verbose): Likewise.\n\t* demangle.c (demangle): Likewise.\n\t(asm_demangle): Likewise.\n\t* dwarf-index-cache.c (debug_index_cache): Likewise.\n\t* dwarf2-frame.c (dwarf2_frame_unwinders_enabled_p): Likewise.\n\t* dwarf2-frame.h (dwarf2_frame_unwinders_enabled_p): Likewise.\n\t* dwarf2read.c (check_physname): Likewise.\n\t(use_deprecated_index_sections): Likewise.\n\t(dwarf_always_disassemble): Likewise.\n\t* eval.c (overload_resolution): Likewise.\n\t* event-top.c (set_editing_cmd_var): Likewise.\n\t(exec_done_display_p): Likewise.\n\t* event-top.h (set_editing_cmd_var): Likewise.\n\t(exec_done_display_p): Likewise.\n\t* exec.c (write_files): Likewise.\n\t* fbsd-nat.c (debug_fbsd_lwp): Likewise\n\t(debug_fbsd_nat): Likewise.\n\t* frame.h (struct frame_print_options) <print_raw_frame_arguments>:\n\tLikewise.\n\t(struct set_backtrace_options) <backtrace_past_main>: Likewise.\n\t<backtrace_past_entry> Likewise.\n\t* gdb-demangle.h (demangle): Likewise.\n\t(asm_demangle): Likewise.\n\t* gdb_bfd.c (bfd_sharing): Likewise.\n\t* gdbcore.h (write_files): Likewise.\n\t* gdbsupport/common-debug.c (show_debug_regs): Likewise.\n\t* gdbsupport/common-debug.h (show_debug_regs): Likewise.\n\t* gdbthread.h (print_thread_events): Likewise.\n\t* gdbtypes.c (opaque_type_resolution): Likewise.\n\t(strict_type_checking): Likewise.\n\t* gnu-nat.c (gnu_debug_flag): Likewise.\n\t* guile/scm-auto-load.c (auto_load_guile_scripts): Likewise.\n\t* guile/scm-param.c (pascm_variable): Add boolval.\n\t(add_setshow_generic): Update.\n\t(pascm_param_value): Update.\n\t(pascm_set_param_value_x): Update.\n\t* hppa-tdep.c (hppa_debug): Change to bool..\n\t* infcall.c (may_call_functions_p): Likewise.\n\t(coerce_float_to_double_p): Likewise.\n\t(unwind_on_signal_p): Likewise.\n\t(unwind_on_terminating_exception_p): Likewise.\n\t* infcmd.c (startup_with_shell): Likewise.\n\t* inferior.c (print_inferior_events): Likewise.\n\t* inferior.h (startup_with_shell): Likewise.\n\t(print_inferior_events): Likewise.\n\t* infrun.c (step_stop_if_no_debug): Likewise.\n\t(detach_fork): Likewise.\n\t(debug_displaced): Likewise.\n\t(disable_randomization): Likewise.\n\t(non_stop): Likewise.\n\t(non_stop_1): Likewise.\n\t(observer_mode): Likewise.\n\t(observer_mode_1): Likewise.\n\t(set_observer_mode): Update.\n\t(sched_multi): Change to bool.\n\t* infrun.h (debug_displaced): Likewise.\n\t(sched_multi): Likewise.\n\t(step_stop_if_no_debug): Likewise.\n\t(non_stop): Likewise.\n\t(disable_randomization): Likewise.\n\t* linux-tdep.c (use_coredump_filter): Likewise.\n\t(dump_excluded_mappings): Likewise.\n\t* linux-thread-db.c (auto_load_thread_db): Likewise.\n\t(check_thread_db_on_load): Likewise.\n\t* main.c (captured_main_1): Update.\n\t* maint-test-options.c (struct test_options_opts) <flag_opt, xx1_opt,\n\txx2_opt, boolean_opt>: Change to bool.\n\t* maint-test-settings.c (maintenance_test_settings_boolean): Likewise.\n\t* maint.c (maintenance_profile_p): Likewise.\n\t(per_command_time): Likewise.\n\t(per_command_space): Likewise.\n\t(per_command_symtab): Likewise.\n\t* memattr.c (inaccessible_by_default): Likewise.\n\t* mi/mi-main.c (mi_async): Likewise.\n\t(mi_async_1): Likewise.\n\t* mips-tdep.c (mips64_transfers_32bit_regs_p): Likewise.\n\t* nat/fork-inferior.h (startup_with_shell): Likewise.\n\t* nat/linux-namespaces.c (debug_linux_namespaces): Likewise.\n\t* nat/linux-namespaces.h (debug_linux_namespaces): Likewise.\n\t* nios2-tdep.c (nios2_debug): Likewise.\n\t* or1k-tdep.c (or1k_debug): Likewise.\n\t* parse.c (parser_debug): Likewise.\n\t* parser-defs.h (parser_debug): Likewise.\n\t* printcmd.c (print_symbol_filename): Likewise.\n\t* proc-api.c (procfs_trace): Likewise.\n\t* python/py-auto-load.c (auto_load_python_scripts): Likewise.\n\t* python/py-param.c (union parmpy_variable): Add \"bool boolval\" field.\n\t(set_parameter_value): Update.\n\t(add_setshow_generic): Update.\n\t* python/py-value.c (copy_py_bool_obj): Change argument from int*\n\tto bool*.\n\t* python/python.c (gdbpy_parameter_value): Cast to bool* instead of\n\tint*.\n\t* ravenscar-thread.c (ravenscar_task_support): Change to bool.\n\t* record-btrace.c (record_btrace_target::store_registers): Update.\n\t* record-full.c (record_full_memory_query): Change to bool.\n\t(record_full_stop_at_limit): Likewise.\n\t* record-full.h (record_full_memory_query): Likewise.\n\t* remote-notif.c (notif_debug): Likewise.\n\t* remote-notif.h (notif_debug): Likewise.\n\t* remote.c (use_range_stepping): Likewise.\n\t(interrupt_on_connect): Likewise.\n\t(remote_break): Likewise.\n\t* ser-tcp.c (tcp_auto_retry): Likewise.\n\t* ser-unix.c (serial_hwflow): Likewise.\n\t* skip.c (debug_skip): Likewise.\n\t* solib-aix.c (solib_aix_debug): Likewise.\n\t* spu-tdep.c (spu_stop_on_load_p): Likewise.\n\t(spu_auto_flush_cache_p): Likewise.\n\t* stack.c (struct backtrace_cmd_options) <full, no_filters, hide>:\n\tLikewise.\n\t(struct info_print_options) <quiet>: Likewise.\n\t* symfile-debug.c (debug_symfile): Likewise.\n\t* symfile.c (auto_solib_add): Likewise.\n\t(separate_debug_file_debug): Likewise.\n\t* symfile.h (auto_solib_add): Likewise.\n\t(separate_debug_file_debug): Likewise.\n\t* symtab.c (basenames_may_differ): Likewise.\n\t(struct filename_partial_match_opts) <dirname, basename>: Likewise.\n\t(struct info_print_options) <quiet, exclude_minsyms>: Likewise.\n\t(struct info_types_options) <quiet>: Likewise.\n\t* symtab.h (demangle): Likewise.\n\t(basenames_may_differ): Likewise.\n\t* target-dcache.c (stack_cache_enabled_1): Likewise.\n\t(code_cache_enabled_1): Likewise.\n\t* target.c (trust_readonly): Likewise.\n\t(may_write_registers): Likewise.\n\t(may_write_memory): Likewise.\n\t(may_insert_breakpoints): Likewise.\n\t(may_insert_tracepoints): Likewise.\n\t(may_insert_fast_tracepoints): Likewise.\n\t(may_stop): Likewise.\n\t(auto_connect_native_target): Likewise.\n\t(target_stop_and_wait): Update.\n\t(target_async_permitted): Change to bool.\n\t(target_async_permitted_1): Likewise.\n\t(may_write_registers_1): Likewise.\n\t(may_write_memory_1): Likewise.\n\t(may_insert_breakpoints_1): Likewise.\n\t(may_insert_tracepoints_1): Likewise.\n\t(may_insert_fast_tracepoints_1): Likewise.\n\t(may_stop_1): Likewise.\n\t* target.h (target_async_permitted): Likewise.\n\t(may_write_registers): Likewise.\n\t(may_write_memory): Likewise.\n\t(may_insert_breakpoints): Likewise.\n\t(may_insert_tracepoints): Likewise.\n\t(may_insert_fast_tracepoints): Likewise.\n\t(may_stop): Likewise.\n\t* thread.c (struct info_threads_opts) <show_global_ids>: Likewise.\n\t(make_thread_apply_all_options_def_group): Change argument from int*\n\tto bool*.\n\t(thread_apply_all_command): Update.\n\t(print_thread_events): Change to bool.\n\t* top.c (confirm): Likewise.\n\t(command_editing_p): Likewise.\n\t(history_expansion_p): Likewise.\n\t(write_history_p): Likewise.\n\t(info_verbose): Likewise.\n\t* top.h (confirm): Likewise.\n\t(history_expansion_p): Likewise.\n\t* tracepoint.c (disconnected_tracing): Likewise.\n\t(circular_trace_buffer): Likewise.\n\t* typeprint.c (print_methods): Likewise.\n\t(print_typedefs): Likewise.\n\t* utils.c (debug_timestamp): Likewise.\n\t(sevenbit_strings): Likewise.\n\t(pagination_enabled): Likewise.\n\t* utils.h (sevenbit_strings): Likewise.\n\t(pagination_enabled): Likewise.\n\t* valops.c (overload_resolution): Likewise.\n\t* valprint.h (struct value_print_options) <prettyformat_arrays,\n\tprettyformat_structs, vtblprint, unionprint, addressprint, objectprint,\n\tstop_print_at_null, print_array_indexes, deref_ref, static_field_print,\n\tpascal_static_field_print, raw, summary, symbol_print, finish_print>:\n\tLikewise.\n\t* windows-nat.c (new_console): Likewise.\n\t(cygwin_exceptions): Likewise.\n\t(new_group): Likewise.\n\t(debug_exec): Likewise.\n\t(debug_events): Likewise.\n\t(debug_memory): Likewise.\n\t(debug_exceptions): Likewise.\n\t(useshell): Likewise.\n\t* windows-tdep.c (maint_display_all_tib): Likewise.\n\t* xml-support.c (debug_xml): Likewise.",
    "tree": {
      "sha": "f503bcf0b55add5fb3428e512a96e77d772701cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f503bcf0b55add5fb3428e512a96e77d772701cb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/491144b5e21bbfd41969c175aebb663976f59058",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/491144b5e21bbfd41969c175aebb663976f59058",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/491144b5e21bbfd41969c175aebb663976f59058",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/491144b5e21bbfd41969c175aebb663976f59058/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ac0ecee1cf1c00e35ffc5096a23a8f7eea4a844",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ac0ecee1cf1c00e35ffc5096a23a8f7eea4a844",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ac0ecee1cf1c00e35ffc5096a23a8f7eea4a844"
    }
  ],
  "stats": {
    "total": 867,
    "additions": 563,
    "deletions": 304
  },
  "files": [
    {
      "sha": "8cb5bfeeb98e3cd2e47ccd290b49ed0d35ba1a0e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 251,
      "deletions": 0,
      "changes": 251,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -1,3 +1,254 @@\n+2019-09-17  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* ada-lang.c (ada_ignore_descriptive_types_p): Change to bool.\n+\t(print_signatures): Likewise.\n+\t(trust_pad_over_xvs): Likewise.\n+\t* arch/aarch64-insn.c (aarch64_debug): Likewise.\n+\t* arch/aarch64-insn.h (aarch64_debug): Likewise.\n+\t* arm-linux-nat.c (arm_apcs_32): Likewise.\n+\t* arm-linux-tdep.c (arm_apcs_32): Likewise.\n+\t* arm-nbsd-nat.c (arm_apcs_32): Likewise.\n+\t* arm-tdep.c (arm_debug): Likewise.\n+\t(arm_apcs_32): Likewise.\n+\t* auto-load.c (debug_auto_load): Likewise.\n+\t(auto_load_gdb_scripts): Likewise.\n+\t(global_auto_load): Likewise.\n+\t(auto_load_local_gdbinit): Likewise.\n+\t(auto_load_local_gdbinit_loaded): Likewise.\n+\t* auto-load.h (global_auto_load): Likewise.\n+\t(auto_load_local_gdbinit): Likewise.\n+\t(auto_load_local_gdbinit_loaded): Likewise.\n+\t* breakpoint.c (disconnected_dprintf): Likewise.\n+\t(breakpoint_proceeded): Likewise.\n+\t(automatic_hardware_breakpoints): Likewise.\n+\t(always_inserted_mode): Likewise.\n+\t(target_exact_watchpoints): Likewise.\n+\t(_initialize_breakpoint): Update.\n+\t* breakpoint.h (target_exact_watchpoints): Change to bool.\n+\t* btrace.c (maint_btrace_pt_skip_pad): Likewise.\n+\t* cli/cli-cmds.c (trace_commands): Likewise.\n+\t* cli/cli-cmds.h (trace_commands): Likewise.\n+\t* cli/cli-decode.c (add_setshow_boolean_cmd): Change int* argument\n+\tto bool*.\n+\t* cli/cli-logging.c (logging_overwrite): Change to bool.\n+\t(logging_redirect): Likewise.\n+\t(debug_redirect): Likewise.\n+\t* cli/cli-option.h (option_def) <boolean>: Change return type to bool*.\n+\t(struct boolean_option_def) <get_var_address_cb_>: Change return type\n+\tto bool.\n+\t<boolean_option_def>: Update.\n+\t(struct flag_option_def): Change default type of Context to bool\n+\tfrom int.\n+\t<flag_option_def>: Change return type of var_address_cb_ to bool*.\n+\t* cli/cli-setshow.c (do_set_command): Cast to bool* instead of int*.\n+\t(get_setshow_command_value_string): Likewise.\n+\t* cli/cli-style.c (cli_styling): Change to bool.\n+\t(source_styling): Likewise.\n+\t* cli/cli-style.h (source_styling): Likewise.\n+\t(cli_styling): Likewise.\n+\t* cli/cli-utils.h (struct qcs_flags) <quiet, cont, silent>: Change\n+\tto bool.\n+\t* command.h (var_types): Update comment.\n+\t(add_setshow_boolean_cmd): Change int* var argument to bool*.\n+\t* compile/compile-cplus-types.c (debug_compile_cplus_types): Change to\n+\tbool.\n+\t(debug_compile_cplus_scopes): Likewise.\n+\t* compile/compile-internal.h (compile_debug): Likewise.\n+\t* compile/compile.c (compile_debug): Likewise.\n+\t(struct compile_options) <raw>: Likewise.\n+\t* cp-support.c (catch_demangler_crashes): Likewise.\n+\t* cris-tdep.c (usr_cmd_cris_version_valid): Likewise.\n+\t(usr_cmd_cris_dwarf2_cfi): Likewise.\n+\t* csky-tdep.c (csky_debug): Likewise.\n+\t* darwin-nat.c (enable_mach_exceptions): Likewise.\n+\t* dcache.c (dcache_enabled_p): Likewise.\n+\t* defs.h (info_verbose): Likewise.\n+\t* demangle.c (demangle): Likewise.\n+\t(asm_demangle): Likewise.\n+\t* dwarf-index-cache.c (debug_index_cache): Likewise.\n+\t* dwarf2-frame.c (dwarf2_frame_unwinders_enabled_p): Likewise.\n+\t* dwarf2-frame.h (dwarf2_frame_unwinders_enabled_p): Likewise.\n+\t* dwarf2read.c (check_physname): Likewise.\n+\t(use_deprecated_index_sections): Likewise.\n+\t(dwarf_always_disassemble): Likewise.\n+\t* eval.c (overload_resolution): Likewise.\n+\t* event-top.c (set_editing_cmd_var): Likewise.\n+\t(exec_done_display_p): Likewise.\n+\t* event-top.h (set_editing_cmd_var): Likewise.\n+\t(exec_done_display_p): Likewise.\n+\t* exec.c (write_files): Likewise.\n+\t* fbsd-nat.c (debug_fbsd_lwp): Likewise\n+\t(debug_fbsd_nat): Likewise.\n+\t* frame.h (struct frame_print_options) <print_raw_frame_arguments>:\n+\tLikewise.\n+\t(struct set_backtrace_options) <backtrace_past_main>: Likewise.\n+\t<backtrace_past_entry> Likewise.\n+\t* gdb-demangle.h (demangle): Likewise.\n+\t(asm_demangle): Likewise.\n+\t* gdb_bfd.c (bfd_sharing): Likewise.\n+\t* gdbcore.h (write_files): Likewise.\n+\t* gdbsupport/common-debug.c (show_debug_regs): Likewise.\n+\t* gdbsupport/common-debug.h (show_debug_regs): Likewise.\n+\t* gdbthread.h (print_thread_events): Likewise.\n+\t* gdbtypes.c (opaque_type_resolution): Likewise.\n+\t(strict_type_checking): Likewise.\n+\t* gnu-nat.c (gnu_debug_flag): Likewise.\n+\t* guile/scm-auto-load.c (auto_load_guile_scripts): Likewise.\n+\t* guile/scm-param.c (pascm_variable): Add boolval.\n+\t(add_setshow_generic): Update.\n+\t(pascm_param_value): Update.\n+\t(pascm_set_param_value_x): Update.\n+\t* hppa-tdep.c (hppa_debug): Change to bool..\n+\t* infcall.c (may_call_functions_p): Likewise.\n+\t(coerce_float_to_double_p): Likewise.\n+\t(unwind_on_signal_p): Likewise.\n+\t(unwind_on_terminating_exception_p): Likewise.\n+\t* infcmd.c (startup_with_shell): Likewise.\n+\t* inferior.c (print_inferior_events): Likewise.\n+\t* inferior.h (startup_with_shell): Likewise.\n+\t(print_inferior_events): Likewise.\n+\t* infrun.c (step_stop_if_no_debug): Likewise.\n+\t(detach_fork): Likewise.\n+\t(debug_displaced): Likewise.\n+\t(disable_randomization): Likewise.\n+\t(non_stop): Likewise.\n+\t(non_stop_1): Likewise.\n+\t(observer_mode): Likewise.\n+\t(observer_mode_1): Likewise.\n+\t(set_observer_mode): Update.\n+\t(sched_multi): Change to bool.\n+\t* infrun.h (debug_displaced): Likewise.\n+\t(sched_multi): Likewise.\n+\t(step_stop_if_no_debug): Likewise.\n+\t(non_stop): Likewise.\n+\t(disable_randomization): Likewise.\n+\t* linux-tdep.c (use_coredump_filter): Likewise.\n+\t(dump_excluded_mappings): Likewise.\n+\t* linux-thread-db.c (auto_load_thread_db): Likewise.\n+\t(check_thread_db_on_load): Likewise.\n+\t* main.c (captured_main_1): Update.\n+\t* maint-test-options.c (struct test_options_opts) <flag_opt, xx1_opt,\n+\txx2_opt, boolean_opt>: Change to bool.\n+\t* maint-test-settings.c (maintenance_test_settings_boolean): Likewise.\n+\t* maint.c (maintenance_profile_p): Likewise.\n+\t(per_command_time): Likewise.\n+\t(per_command_space): Likewise.\n+\t(per_command_symtab): Likewise.\n+\t* memattr.c (inaccessible_by_default): Likewise.\n+\t* mi/mi-main.c (mi_async): Likewise.\n+\t(mi_async_1): Likewise.\n+\t* mips-tdep.c (mips64_transfers_32bit_regs_p): Likewise.\n+\t* nat/fork-inferior.h (startup_with_shell): Likewise.\n+\t* nat/linux-namespaces.c (debug_linux_namespaces): Likewise.\n+\t* nat/linux-namespaces.h (debug_linux_namespaces): Likewise.\n+\t* nios2-tdep.c (nios2_debug): Likewise.\n+\t* or1k-tdep.c (or1k_debug): Likewise.\n+\t* parse.c (parser_debug): Likewise.\n+\t* parser-defs.h (parser_debug): Likewise.\n+\t* printcmd.c (print_symbol_filename): Likewise.\n+\t* proc-api.c (procfs_trace): Likewise.\n+\t* python/py-auto-load.c (auto_load_python_scripts): Likewise.\n+\t* python/py-param.c (union parmpy_variable): Add \"bool boolval\" field.\n+\t(set_parameter_value): Update.\n+\t(add_setshow_generic): Update.\n+\t* python/py-value.c (copy_py_bool_obj): Change argument from int*\n+\tto bool*.\n+\t* python/python.c (gdbpy_parameter_value): Cast to bool* instead of\n+\tint*.\n+\t* ravenscar-thread.c (ravenscar_task_support): Change to bool.\n+\t* record-btrace.c (record_btrace_target::store_registers): Update.\n+\t* record-full.c (record_full_memory_query): Change to bool.\n+\t(record_full_stop_at_limit): Likewise.\n+\t* record-full.h (record_full_memory_query): Likewise.\n+\t* remote-notif.c (notif_debug): Likewise.\n+\t* remote-notif.h (notif_debug): Likewise.\n+\t* remote.c (use_range_stepping): Likewise.\n+\t(interrupt_on_connect): Likewise.\n+\t(remote_break): Likewise.\n+\t* ser-tcp.c (tcp_auto_retry): Likewise.\n+\t* ser-unix.c (serial_hwflow): Likewise.\n+\t* skip.c (debug_skip): Likewise.\n+\t* solib-aix.c (solib_aix_debug): Likewise.\n+\t* spu-tdep.c (spu_stop_on_load_p): Likewise.\n+\t(spu_auto_flush_cache_p): Likewise.\n+\t* stack.c (struct backtrace_cmd_options) <full, no_filters, hide>:\n+\tLikewise.\n+\t(struct info_print_options) <quiet>: Likewise.\n+\t* symfile-debug.c (debug_symfile): Likewise.\n+\t* symfile.c (auto_solib_add): Likewise.\n+\t(separate_debug_file_debug): Likewise.\n+\t* symfile.h (auto_solib_add): Likewise.\n+\t(separate_debug_file_debug): Likewise.\n+\t* symtab.c (basenames_may_differ): Likewise.\n+\t(struct filename_partial_match_opts) <dirname, basename>: Likewise.\n+\t(struct info_print_options) <quiet, exclude_minsyms>: Likewise.\n+\t(struct info_types_options) <quiet>: Likewise.\n+\t* symtab.h (demangle): Likewise.\n+\t(basenames_may_differ): Likewise.\n+\t* target-dcache.c (stack_cache_enabled_1): Likewise.\n+\t(code_cache_enabled_1): Likewise.\n+\t* target.c (trust_readonly): Likewise.\n+\t(may_write_registers): Likewise.\n+\t(may_write_memory): Likewise.\n+\t(may_insert_breakpoints): Likewise.\n+\t(may_insert_tracepoints): Likewise.\n+\t(may_insert_fast_tracepoints): Likewise.\n+\t(may_stop): Likewise.\n+\t(auto_connect_native_target): Likewise.\n+\t(target_stop_and_wait): Update.\n+\t(target_async_permitted): Change to bool.\n+\t(target_async_permitted_1): Likewise.\n+\t(may_write_registers_1): Likewise.\n+\t(may_write_memory_1): Likewise.\n+\t(may_insert_breakpoints_1): Likewise.\n+\t(may_insert_tracepoints_1): Likewise.\n+\t(may_insert_fast_tracepoints_1): Likewise.\n+\t(may_stop_1): Likewise.\n+\t* target.h (target_async_permitted): Likewise.\n+\t(may_write_registers): Likewise.\n+\t(may_write_memory): Likewise.\n+\t(may_insert_breakpoints): Likewise.\n+\t(may_insert_tracepoints): Likewise.\n+\t(may_insert_fast_tracepoints): Likewise.\n+\t(may_stop): Likewise.\n+\t* thread.c (struct info_threads_opts) <show_global_ids>: Likewise.\n+\t(make_thread_apply_all_options_def_group): Change argument from int*\n+\tto bool*.\n+\t(thread_apply_all_command): Update.\n+\t(print_thread_events): Change to bool.\n+\t* top.c (confirm): Likewise.\n+\t(command_editing_p): Likewise.\n+\t(history_expansion_p): Likewise.\n+\t(write_history_p): Likewise.\n+\t(info_verbose): Likewise.\n+\t* top.h (confirm): Likewise.\n+\t(history_expansion_p): Likewise.\n+\t* tracepoint.c (disconnected_tracing): Likewise.\n+\t(circular_trace_buffer): Likewise.\n+\t* typeprint.c (print_methods): Likewise.\n+\t(print_typedefs): Likewise.\n+\t* utils.c (debug_timestamp): Likewise.\n+\t(sevenbit_strings): Likewise.\n+\t(pagination_enabled): Likewise.\n+\t* utils.h (sevenbit_strings): Likewise.\n+\t(pagination_enabled): Likewise.\n+\t* valops.c (overload_resolution): Likewise.\n+\t* valprint.h (struct value_print_options) <prettyformat_arrays,\n+\tprettyformat_structs, vtblprint, unionprint, addressprint, objectprint,\n+\tstop_print_at_null, print_array_indexes, deref_ref, static_field_print,\n+\tpascal_static_field_print, raw, summary, symbol_print, finish_print>:\n+\tLikewise.\n+\t* windows-nat.c (new_console): Likewise.\n+\t(cygwin_exceptions): Likewise.\n+\t(new_group): Likewise.\n+\t(debug_exec): Likewise.\n+\t(debug_events): Likewise.\n+\t(debug_memory): Likewise.\n+\t(debug_exceptions): Likewise.\n+\t(useshell): Likewise.\n+\t* windows-tdep.c (maint_display_all_tib): Likewise.\n+\t* xml-support.c (debug_xml): Likewise.\n+\n 2019-09-17  Mike Gulick  <mgulick@mathworks.com>\n \n \t* source.c (prepare_path_for_appending): New function."
    },
    {
      "sha": "c34733e754f6fa2bf473317a35c14d132cf0b4ca",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -358,7 +358,7 @@ maint_show_ada_cmd (const char *args, int from_tty)\n \n /* The \"maintenance ada set/show ignore-descriptive-type\" value.  */\n \n-static int ada_ignore_descriptive_types_p = 0;\n+static bool ada_ignore_descriptive_types_p = false;\n \n \t\t\t/* Inferior-specific data.  */\n \n@@ -3795,7 +3795,7 @@ sort_choices (struct block_symbol syms[], int nsyms)\n \n /* Whether GDB should display formals and return types for functions in the\n    overloads selection menu.  */\n-static int print_signatures = 1;\n+static bool print_signatures = true;\n \n /* Print the signature for SYM on STREAM according to the FLAGS options.  For\n    all but functions, the signature is just the name of the symbol.  For\n@@ -9299,7 +9299,7 @@ ada_is_string_type (struct type *type)\n \n    Set to True if the debugger should trust the contents of PAD types.\n    Otherwise, ignore the PAD type if there is a parallel XVS type.  */\n-static int trust_pad_over_xvs = 1;\n+static bool trust_pad_over_xvs = true;\n \n /* True if TYPE is a struct type introduced by the compiler to force the\n    alignment of a value.  Such types have a single field with a"
    },
    {
      "sha": "48d0be83ff9156450e36e6b213a78a1f21a37f23",
      "filename": "gdb/arch/aarch64-insn.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/arch/aarch64-insn.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/arch/aarch64-insn.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -20,7 +20,7 @@\n #include \"aarch64-insn.h\"\n \n /* Toggle this file's internal debugging dump.  */\n-int aarch64_debug = 0;\n+bool aarch64_debug = false;\n \n /* Extract a signed value from a bit field within an instruction\n    encoding."
    },
    {
      "sha": "47a825b11420aa5c27e0e9e68c6318abde6c1c9d",
      "filename": "gdb/arch/aarch64-insn.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/arch/aarch64-insn.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/arch/aarch64-insn.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -19,7 +19,7 @@\n #ifndef ARCH_AARCH64_INSN_H\n #define ARCH_AARCH64_INSN_H\n \n-extern int aarch64_debug;\n+extern bool aarch64_debug;\n \n /* List of opcodes that we need for building the jump pad and relocating\n    an instruction.  */"
    },
    {
      "sha": "ef44e68d31987cd5428209fa99fd1be5bec472f4",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -66,7 +66,7 @@\n #define PTRACE_SETHBPREGS 30\n #endif\n \n-extern int arm_apcs_32;\n+extern bool arm_apcs_32;\n \n class arm_linux_nat_target final : public linux_nat_target\n {"
    },
    {
      "sha": "31ea4564dbbaefa15d78c0bddbb3ffa8f5de0be9",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -56,7 +56,7 @@\n #include \"user-regs.h\"\n #include <ctype.h>\n #include \"elf/common.h\"\n-extern int arm_apcs_32;\n+extern bool arm_apcs_32;\n \n /* Under ARM GNU/Linux the traditional way of performing a breakpoint\n    is to execute a particular software interrupt, rather than use a"
    },
    {
      "sha": "38a9e954b920ac1c678ddfa6d202499eb9645f70",
      "filename": "gdb/arm-nbsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-nat.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -40,7 +40,7 @@ class arm_netbsd_nat_target final : public inf_ptrace_target\n \n static arm_netbsd_nat_target the_arm_netbsd_nat_target;\n \n-extern int arm_apcs_32;\n+extern bool arm_apcs_32;\n \n static void\n arm_supply_gregset (struct regcache *regcache, struct reg *gregset)"
    },
    {
      "sha": "0650485bf04e6ee81c930babd9a1ff07e140a35a",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -65,7 +65,7 @@\n #include \"gdbsupport/selftest.h\"\n #endif\n \n-static int arm_debug;\n+static bool arm_debug;\n \n /* Macros for setting and testing a bit in a minimal symbol that marks\n    it as Thumb function.  The MSB of the minimal symbol's \"info\" field\n@@ -296,7 +296,7 @@ static CORE_ADDR arm_analyze_prologue (struct gdbarch *gdbarch,\n \n /* Set to true if the 32-bit mode is in use.  */\n \n-int arm_apcs_32 = 1;\n+bool arm_apcs_32 = true;\n \n /* Return the bit mask in ARM_PS_REGNUM that indicates Thumb mode.  */\n "
    },
    {
      "sha": "9798ab1a06768c95599113015d78baf7e2744002",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -61,7 +61,7 @@ static void maybe_print_script_not_found_warning\n    const char *section_name, unsigned offset);\n \n /* Value of the 'set debug auto-load' configuration variable.  */\n-static int debug_auto_load = 0;\n+static bool debug_auto_load = false;\n \n /* \"show\" command for the debug_auto_load configuration variable.  */\n \n@@ -79,7 +79,7 @@ show_debug_auto_load (struct ui_file *file, int from_tty,\n    set auto-load gdb-scripts on|off\n    This is true if we should auto-load associated scripts when an objfile\n    is opened, false otherwise.  */\n-static int auto_load_gdb_scripts = 1;\n+static bool auto_load_gdb_scripts = true;\n \n /* \"show\" command for the auto_load_gdb_scripts configuration variable.  */\n \n@@ -110,16 +110,16 @@ auto_load_gdb_scripts_enabled (const struct extension_language_defn *extlang)\n    This flag exists to facilitate deferring auto-loading during start-up\n    until after ./.gdbinit has been read; it may augment the search directories\n    used to find the scripts.  */\n-int global_auto_load = 1;\n+bool global_auto_load = true;\n \n /* Auto-load .gdbinit file from the current directory?  */\n-int auto_load_local_gdbinit = 1;\n+bool auto_load_local_gdbinit = true;\n \n /* Absolute pathname to the current directory .gdbinit, if it exists.  */\n char *auto_load_local_gdbinit_pathname = NULL;\n \n-/* Boolean value if AUTO_LOAD_LOCAL_GDBINIT_PATHNAME has been loaded.  */\n-int auto_load_local_gdbinit_loaded = 0;\n+/* if AUTO_LOAD_LOCAL_GDBINIT_PATHNAME has been loaded.  */\n+bool auto_load_local_gdbinit_loaded = false;\n \n /* \"show\" command for the auto_load_local_gdbinit configuration variable.  */\n "
    },
    {
      "sha": "ab865e9fa5199f507cb2b63fcb83c3681eaef949",
      "filename": "gdb/auto-load.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/auto-load.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/auto-load.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -25,11 +25,11 @@ struct program_space;\n struct auto_load_pspace_info;\n struct extension_language_defn;\n \n-extern int global_auto_load;\n+extern bool global_auto_load;\n \n-extern int auto_load_local_gdbinit;\n+extern bool auto_load_local_gdbinit;\n extern char *auto_load_local_gdbinit_pathname;\n-extern int auto_load_local_gdbinit_loaded;\n+extern bool auto_load_local_gdbinit_loaded;\n \n extern struct auto_load_pspace_info *\n   get_auto_load_pspace_data_for_loading (struct program_space *pspace);"
    },
    {
      "sha": "8ef3aac0c1aa8baa38b38d6417fba56db783abfc",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -290,7 +290,7 @@ static char *dprintf_channel;\n \n /* True if dprintf commands should continue to operate even if GDB\n    has disconnected.  */\n-static int disconnected_dprintf = 1;\n+static bool disconnected_dprintf = true;\n \n struct command_line *\n breakpoint_commands (struct breakpoint *b)\n@@ -301,7 +301,7 @@ breakpoint_commands (struct breakpoint *b)\n /* Flag indicating that a command has proceeded the inferior past the\n    current breakpoint.  */\n \n-static int breakpoint_proceeded;\n+static bool breakpoint_proceeded;\n \n const char *\n bpdisp_text (enum bpdisp disp)\n@@ -346,11 +346,11 @@ show_pending_break_support (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-/* If 1, gdb will automatically use hardware breakpoints for breakpoints\n+/* If true, gdb will automatically use hardware breakpoints for breakpoints\n    set with \"break\" but falling in read-only memory.\n-   If 0, gdb will warn about such breakpoints, but won't automatically\n+   If false, gdb will warn about such breakpoints, but won't automatically\n    use hardware breakpoints.  */\n-static int automatic_hardware_breakpoints;\n+static bool automatic_hardware_breakpoints;\n static void\n show_automatic_hardware_breakpoints (struct ui_file *file, int from_tty,\n \t\t\t\t     struct cmd_list_element *c,\n@@ -368,7 +368,7 @@ show_automatic_hardware_breakpoints (struct ui_file *file, int from_tty,\n    breakpoints until the next resume, and removes them again when the\n    target fully stops.  This is a bit safer in case GDB crashes while\n    processing user input.  */\n-static int always_inserted_mode = 0;\n+static bool always_inserted_mode = false;\n \n static void\n show_always_inserted_mode (struct ui_file *file, int from_tty,\n@@ -477,7 +477,7 @@ static int executing_breakpoint_commands;\n static int overlay_events_enabled;\n \n /* See description in breakpoint.h. */\n-int target_exact_watchpoints = 0;\n+bool target_exact_watchpoints = false;\n \n /* Walk the following statement or block through all breakpoints.\n    ALL_BREAKPOINTS_SAFE does so even if the statement deletes the\n@@ -15954,7 +15954,7 @@ Usage: agent-printf \\\"format string\\\", ARG1, ARG2, ARG3, ..., ARGN\\n\\\n This supports most C printf format specifications, like %s, %d, etc.\\n\\\n This is useful for formatted output in user-defined commands.\"));\n \n-  automatic_hardware_breakpoints = 1;\n+  automatic_hardware_breakpoints = true;\n \n   gdb::observers::about_to_proceed.attach (breakpoint_about_to_proceed);\n   gdb::observers::thread_exit.attach (remove_threaded_breakpoints);"
    },
    {
      "sha": "49380e30c263a24954bf78786dc791c305328826",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -675,7 +675,7 @@ enum watchpoint_triggered\n    only one register per watchpoint, thus assuming that all acesses that\n    modify a memory location happen at its starting address. */\n \n-extern int target_exact_watchpoints;\n+extern bool target_exact_watchpoints;\n \n /* Note that the ->silent field is not currently used by any commands\n    (though the code is in there if it was to be, and set_raw_breakpoint"
    },
    {
      "sha": "1b809fb5c084fe15db7367b048ef3da56c297a22",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -51,7 +51,7 @@ static struct cmd_list_element *maint_btrace_pt_set_cmdlist;\n static struct cmd_list_element *maint_btrace_pt_show_cmdlist;\n \n /* Control whether to skip PAD packets when computing the packet history.  */\n-static int maint_btrace_pt_skip_pad = 1;\n+static bool maint_btrace_pt_skip_pad = true;\n \n static void btrace_add_pc (struct thread_info *tp);\n "
    },
    {
      "sha": "59c71f675619e7e0259a71ea1716977c95ee646f",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -165,7 +165,7 @@ struct cmd_list_element *showchecklist;\n /* Command tracing state.  */\n \n int source_verbose = 0;\n-int trace_commands = 0;\n+bool trace_commands = false;\n \f\n /* 'script-extension' option support.  */\n "
    },
    {
      "sha": "1a8b9a0d5068dbd61ac01d2e6055442f88991c5b",
      "filename": "gdb/cli/cli-cmds.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-cmds.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-cmds.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -139,7 +139,7 @@ extern gdb::optional<open_script>\n /* Command tracing state.  */\n \n extern int source_verbose;\n-extern int trace_commands;\n+extern bool trace_commands;\n \n /* Common code for the \"with\" and \"maintenance with\" commands.\n    SET_CMD_PREFIX is the spelling of the corresponding \"set\" command"
    },
    {
      "sha": "debffbc0f74e7db7565b8209bbf0cd7814db0d7f",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -589,7 +589,7 @@ const char * const boolean_enums[] = { \"on\", \"off\", NULL };\n    Returns the new command element.  */\n \n cmd_list_element *\n-add_setshow_boolean_cmd (const char *name, enum command_class theclass, int *var,\n+add_setshow_boolean_cmd (const char *name, enum command_class theclass, bool *var,\n \t\t\t const char *set_doc, const char *show_doc,\n \t\t\t const char *help_doc,\n \t\t\t cmd_const_sfunc_ftype *set_func,"
    },
    {
      "sha": "22b540b4812e2ea6ba8ece75df29cf0273753441",
      "filename": "gdb/cli/cli-logging.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-logging.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-logging.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-logging.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -33,7 +33,7 @@ show_logging_filename (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-static int logging_overwrite;\n+static bool logging_overwrite;\n \n static void\n maybe_warn_already_logging ()\n@@ -61,8 +61,8 @@ show_logging_overwrite (struct ui_file *file, int from_tty,\n }\n \n /* Value as configured by the user.  */\n-static int logging_redirect;\n-static int debug_redirect;\n+static bool logging_redirect;\n+static bool debug_redirect;\n \n static void\n set_logging_redirect (const char *args,"
    },
    {
      "sha": "3fd0c0cdae94c757a46fa314fdf18b806909e2e3",
      "filename": "gdb/cli/cli-option.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-option.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-option.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-option.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -82,7 +82,7 @@ struct option_def\n      returns the address of some member.  */\n   union\n     {\n-      int *(*boolean) (const option_def &, void *ctx);\n+      bool *(*boolean) (const option_def &, void *ctx);\n       unsigned int *(*uinteger) (const option_def &, void *ctx);\n       int *(*integer) (const option_def &, void *ctx);\n       const char **(*enumeration) (const option_def &, void *ctx);\n@@ -155,7 +155,7 @@ template<typename Context>\n struct boolean_option_def : option_def\n {\n   boolean_option_def (const char *long_option_,\n-\t\t      int *(*get_var_address_cb_) (Context *),\n+\t\t      bool *(*get_var_address_cb_) (Context *),\n \t\t      show_value_ftype *show_cmd_cb_,\n \t\t      const char *set_doc_,\n \t\t      const char *show_doc_ = nullptr,\n@@ -165,19 +165,19 @@ struct boolean_option_def : option_def\n \t\t  show_cmd_cb_,\n \t\t  set_doc_, show_doc_, help_doc_)\n   {\n-    var_address.boolean = detail::get_var_address<int, Context>;\n+    var_address.boolean = detail::get_var_address<bool, Context>;\n   }\n };\n \n /* A flag command line option.  This is a var_boolean option under the\n    hood, but unlike boolean options, flag options don't take an on/off\n    argument.  */\n \n-template<typename Context = int>\n+template<typename Context = bool>\n struct flag_option_def : boolean_option_def<Context>\n {\n   flag_option_def (const char *long_option_,\n-\t\t     int *(*var_address_cb_) (Context *),\n+\t\t     bool *(*var_address_cb_) (Context *),\n \t\t     const char *set_doc_,\n \t\t     const char *help_doc_ = nullptr)\n     : boolean_option_def<Context> (long_option_,"
    },
    {
      "sha": "d8391597acf9d4772604b8076c363dcda019ff58",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -416,9 +416,9 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \n \tif (val < 0)\n \t  error (_(\"\\\"on\\\" or \\\"off\\\" expected.\"));\n-\tif (val != *(int *) c->var)\n+\tif (val != *(bool *) c->var)\n \t  {\n-\t    *(int *) c->var = val;\n+\t    *(bool *) c->var = val;\n \n \t    option_changed = 1;\n \t  }\n@@ -588,7 +588,7 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \t  break;\n \tcase var_boolean:\n \t  {\n-\t    const char *opt = *(int *) c->var ? \"on\" : \"off\";\n+\t    const char *opt = *(bool *) c->var ? \"on\" : \"off\";\n \n \t    gdb::observers::command_param_changed.notify (name, opt);\n \t  }\n@@ -645,7 +645,7 @@ get_setshow_command_value_string (cmd_list_element *c)\n \tstb.puts (*(char **) c->var);\n       break;\n     case var_boolean:\n-      stb.puts (*(int *) c->var ? \"on\" : \"off\");\n+      stb.puts (*(bool *) c->var ? \"on\" : \"off\");\n       break;\n     case var_auto_boolean:\n       switch (*(enum auto_boolean*) c->var)"
    },
    {
      "sha": "ea301774d22896f60d1a3973f86a56126a35668c",
      "filename": "gdb/cli/cli-style.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -26,15 +26,15 @@\n /* True if styling is enabled.  */\n \n #if defined (__MSDOS__) || defined (__CYGWIN__)\n-int cli_styling = 0;\n+bool cli_styling = false;\n #else\n-int cli_styling = 1;\n+bool cli_styling = true;\n #endif\n \n /* True if source styling is enabled.  Note that this is only\n    consulted when cli_styling is true.  */\n \n-int source_styling = 1;\n+bool source_styling = true;\n \n /* Name of colors; must correspond to ui_file_style::basic_color.  */\n static const char * const cli_colors[] = {"
    },
    {
      "sha": "826162f5788e51fe6a9394581071bce225ddd621",
      "filename": "gdb/cli/cli-style.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-style.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-style.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -110,9 +110,9 @@ extern cli_style_option title_style;\n \n \n /* True if source styling is enabled.  */\n-extern int source_styling;\n+extern bool source_styling;\n \n /* True if styling is enabled.  */\n-extern int cli_styling;\n+extern bool cli_styling;\n \n #endif /* CLI_CLI_STYLE_H */"
    },
    {
      "sha": "33b8663e9ae9ddc9ee79b6ee3246daa8102dfaa1",
      "filename": "gdb/cli/cli-utils.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cli/cli-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -215,9 +215,9 @@ check_for_argument (char **str, const char *arg)\n \n struct qcs_flags\n {\n-  int quiet = false;\n-  int cont = false;\n-  int silent = false;\n+  bool quiet = false;\n+  bool cont = false;\n+  bool silent = false;\n };\n \n /* Validate FLAGS.  Throws an error if both FLAGS->CONT and"
    },
    {
      "sha": "cf190ef649d26bfe726969ce8493902036f18d2c",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -62,8 +62,8 @@ cmd_types;\n /* Types of \"set\" or \"show\" command.  */\n typedef enum var_types\n   {\n-    /* \"on\" or \"off\".  *VAR is an integer which is nonzero for on,\n-       zero for off.  */\n+    /* \"on\" or \"off\".  *VAR is a bool which is true for on,\n+       false for off.  */\n     var_boolean,\n \n     /* \"on\" / \"true\" / \"enable\" or \"off\" / \"false\" / \"disable\" or\n@@ -331,7 +331,7 @@ extern void add_setshow_auto_boolean_cmd (const char *name,\n extern cmd_list_element *\n   add_setshow_boolean_cmd (const char *name,\n \t\t\t   enum command_class theclass,\n-\t\t\t   int *var,\n+\t\t\t   bool *var,\n \t\t\t   const char *set_doc, const char *show_doc,\n \t\t\t   const char *help_doc,\n \t\t\t   cmd_const_sfunc_ftype *set_func,"
    },
    {
      "sha": "042c2afbe90e0ad0abbaf357937c674c13d75f45",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -41,11 +41,11 @@ const char *compile_cplus_instance::m_default_cflags = \"-std=gnu++11\";\n \n /* Flag to enable internal debugging.  */\n \n-static int debug_compile_cplus_types = 0;\n+static bool debug_compile_cplus_types = false;\n \n /* Flag to enable internal scope switching debugging.  */\n \n-static int debug_compile_cplus_scopes = 0;\n+static bool debug_compile_cplus_scopes = false;\n \n /* Forward declarations.  */\n "
    },
    {
      "sha": "9c0e98941089d3f9ee07f9de9d0e29dd724cfd38",
      "filename": "gdb/compile/compile-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/compile/compile-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/compile/compile-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-internal.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -21,7 +21,7 @@\n \n /* Debugging flag for the \"compile\" family of commands.  */\n \n-extern int compile_debug;\n+extern bool compile_debug;\n \n struct block;\n "
    },
    {
      "sha": "5c3400ffec89d1b30ca4663fcb91819d3e1a8034",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -56,7 +56,7 @@ static struct cmd_list_element *compile_command_list;\n \n /* Debug flag for \"compile\" commands.  */\n \n-int compile_debug;\n+bool compile_debug;\n \n /* Object of this type are stored in the compiler's symbol_err_map.  */\n \n@@ -241,7 +241,7 @@ show_compile_debug (struct ui_file *file, int from_tty,\n struct compile_options\n {\n   /* For -raw.  */\n-  int raw = false;\n+  bool raw = false;\n };\n \n using compile_flag_option_def"
    },
    {
      "sha": "cd732b60e7d9c6a7d89588dada4666756d161794",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -1469,10 +1469,10 @@ cp_lookup_rtti_type (const char *name, const struct block *block)\n \n #ifdef HAVE_WORKING_FORK\n \n-/* If nonzero, attempt to catch crashes in the demangler and print\n+/* If true, attempt to catch crashes in the demangler and print\n    useful debugging information.  */\n \n-static int catch_demangler_crashes = 1;\n+static bool catch_demangler_crashes = true;\n \n /* Stack context and environment for demangler crash recovery.  */\n "
    },
    {
      "sha": "706f65db28ed3393156839cf77e579ef705068a3",
      "filename": "gdb/cris-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/cris-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/cris-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -148,7 +148,7 @@ extern const struct cris_spec_reg cris_spec_regs[];\n static unsigned int usr_cmd_cris_version;\n \n /* Indicates whether to trust the above variable.  */\n-static int usr_cmd_cris_version_valid = 0;\n+static bool usr_cmd_cris_version_valid = false;\n \n static const char cris_mode_normal[] = \"normal\";\n static const char cris_mode_guru[] = \"guru\";\n@@ -163,7 +163,7 @@ static const char *const cris_modes[] = {\n static const char *usr_cmd_cris_mode = cris_mode_normal;\n \n /* Whether to make use of Dwarf-2 CFI (default on).  */\n-static int usr_cmd_cris_dwarf2_cfi = 1;\n+static bool usr_cmd_cris_dwarf2_cfi = true;\n \n /* Sigtramp identification code copied from i386-linux-tdep.c.  */\n "
    },
    {
      "sha": "a6f78a187cff8651c621ec1e3740d4b1ea6e6f12",
      "filename": "gdb/csky-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/csky-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/csky-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/csky-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -59,7 +59,7 @@\n #include <vector>\n \n /* Control debugging information emitted in this file.  */\n-static int csky_debug = 0;\n+static bool csky_debug = false;\n \n static struct reggroup *cr_reggroup;\n static struct reggroup *fr_reggroup;"
    },
    {
      "sha": "ceef36473d01be48cbc94287418eeedeccfc8c45",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -120,7 +120,7 @@ static vm_size_t mach_page_size;\n \n /* If Set, catch all mach exceptions (before they are converted to signals\n    by the kernel).  */\n-static int enable_mach_exceptions;\n+static bool enable_mach_exceptions;\n \n /* Inferior that should report a fake stop event.  */\n static struct inferior *darwin_inf_fake_stop;"
    },
    {
      "sha": "509782c319ac9b4b4609b4f371e23536d3dcba70",
      "filename": "gdb/dcache.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/dcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/dcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dcache.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -126,7 +126,7 @@ static int dcache_read_line (DCACHE *dcache, struct dcache_block *db);\n \n static struct dcache_block *dcache_alloc (DCACHE *dcache, CORE_ADDR addr);\n \n-static int dcache_enabled_p = 0; /* OBSOLETE */\n+static bool dcache_enabled_p = false; /* OBSOLETE */\n \n static void\n show_dcache_enabled_p (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "f12ba366ccf07fffcb1c01b4bee0b8a6b4f76a79",
      "filename": "gdb/defs.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/defs.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -314,7 +314,7 @@ struct ui;\n \n extern int input_interactive_p (struct ui *);\n \n-extern int info_verbose;\n+extern bool info_verbose;\n \n /* From printcmd.c */\n "
    },
    {
      "sha": "cfe3421b23c9e2f29a7589fb11ec37a75b783b0e",
      "filename": "gdb/demangle.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/demangle.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -44,7 +44,7 @@\n #endif\n \n /* See documentation in gdb-demangle.h.  */\n-int demangle = 1;\n+bool demangle = true;\n \n static void\n show_demangle (struct ui_file *file, int from_tty,\n@@ -57,7 +57,7 @@ show_demangle (struct ui_file *file, int from_tty,\n }\n \n /* See documentation in gdb-demangle.h.  */\n-int asm_demangle = 0;\n+bool asm_demangle = false;\n \n static void\n show_asm_demangle (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "d00d6511abb43c60499cef4d8defe1cfa6fa7aec",
      "filename": "gdb/dwarf-index-cache.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf-index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf-index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-cache.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -32,8 +32,8 @@\n #include <string>\n #include <stdlib.h>\n \n-/* When set to 1, show debug messages about the index cache.  */\n-static int debug_index_cache = 0;\n+/* When set to true, show debug messages about the index cache.  */\n+static bool debug_index_cache = false;\n \n /* The index cache directory, used for \"set/show index-cache directory\".  */\n static char *index_cache_directory = NULL;"
    },
    {
      "sha": "e18b35e7dba09d2022336c4f01540b0a49071c42",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -171,7 +171,7 @@ static CORE_ADDR read_encoded_value (struct comp_unit *unit, gdb_byte encoding,\n \f\n \n /* See dwarf2-frame.h.  */\n-int dwarf2_frame_unwinders_enabled_p = 1;\n+bool dwarf2_frame_unwinders_enabled_p = true;\n \n /* Store the length the expression for the CFA in the `cfa_reg' field,\n    which is unused in that case.  */"
    },
    {
      "sha": "3c54f0950e0b05e37c4eae0ab418ce1c35455915",
      "filename": "gdb/dwarf2-frame.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf2-frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf2-frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -201,7 +201,7 @@ struct dwarf2_frame_state\n    registered with the gdbarch.  Not all architectures can or do use the\n    DWARF unwinders.  Setting this to true on a target that does not\n    otherwise support the DWARF unwinders has no effect.  */\n-extern int dwarf2_frame_unwinders_enabled_p;\n+extern bool dwarf2_frame_unwinders_enabled_p;\n \n /* Set the architecture-specific register state initialization\n    function for GDBARCH to INIT_REG.  */"
    },
    {
      "sha": "ea9904c416291a8f3e4bb2809e3cf230e30cd6c1",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -102,11 +102,11 @@ static unsigned int dwarf_die_debug = 0;\n /* When non-zero, dump line number entries as they are read in.  */\n static unsigned int dwarf_line_debug = 0;\n \n-/* When non-zero, cross-check physname against demangler.  */\n-static int check_physname = 0;\n+/* When true, cross-check physname against demangler.  */\n+static bool check_physname = false;\n \n-/* When non-zero, do not reject deprecated .gdb_index sections.  */\n-static int use_deprecated_index_sections = 0;\n+/* When true, do not reject deprecated .gdb_index sections.  */\n+static bool use_deprecated_index_sections = false;\n \n static const struct objfile_key<dwarf2_per_objfile> dwarf2_objfile_data_key;\n \n@@ -25837,7 +25837,7 @@ show_dwarf_cmd (const char *args, int from_tty)\n   cmd_show_list (show_dwarf_cmdlist, from_tty, \"\");\n }\n \n-int dwarf_always_disassemble;\n+bool dwarf_always_disassemble;\n \n static void\n show_dwarf_always_disassemble (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "f8915b99578e6dfcad6b943c43a3336ed6f37423",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -43,7 +43,7 @@\n #include <ctype.h>\n \n /* This is defined in valops.c */\n-extern int overload_resolution;\n+extern bool overload_resolution;\n \n /* Prototypes for local functions.  */\n "
    },
    {
      "sha": "0b05b2f85a52e6ca0a5c79885f8ed30bcf24e766",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -86,11 +86,11 @@ static void async_sigterm_handler (gdb_client_data arg);\n    ezannoni: as of 1999-04-29 I expect that this\n    variable will not be used after gdb is changed to use the event\n    loop as default engine, and event-top.c is merged into top.c.  */\n-int set_editing_cmd_var;\n+bool set_editing_cmd_var;\n \n /* This is used to display the notification of the completion of an\n    asynchronous execution command.  */\n-int exec_done_display_p = 0;\n+bool exec_done_display_p = false;\n \n /* Used by the stdin event handler to compensate for missed stdin events.\n    Setting this to a non-zero value inside an stdin callback makes the callback"
    },
    {
      "sha": "1dc7b13d4f8adb5f515fed5114bf4f04628cd46b",
      "filename": "gdb/event-top.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/event-top.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/event-top.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -52,8 +52,8 @@ extern void async_enable_stdin (void);\n /* Exported variables from event-top.c.\n    FIXME: these should really go into top.h.  */\n \n-extern int set_editing_cmd_var;\n-extern int exec_done_display_p;\n+extern bool set_editing_cmd_var;\n+extern bool exec_done_display_p;\n extern struct prompts the_prompts;\n extern void (*after_char_processing_hook) (void);\n extern int call_stdin_event_handler_again_p;"
    },
    {
      "sha": "4e4cacffda07e97a3d17a14fddded7d700cb3d02",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -84,7 +84,7 @@ static exec_target exec_ops;\n \n /* Whether to open exec and core files read-only or read-write.  */\n \n-int write_files = 0;\n+bool write_files = false;\n static void\n show_write_files (struct ui_file *file, int from_tty,\n \t\t  struct cmd_list_element *c, const char *value)"
    },
    {
      "sha": "0274ff542eaf419a605884a2a18f0e51ba8bdd59",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -832,8 +832,8 @@ fbsd_nat_target::xfer_partial (enum target_object object,\n }\n \n #ifdef PT_LWPINFO\n-static int debug_fbsd_lwp;\n-static int debug_fbsd_nat;\n+static bool debug_fbsd_lwp;\n+static bool debug_fbsd_nat;\n \n static void\n show_fbsd_lwp_debug (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "624bc87c9d3fabb7c608d1890c61217641432ab1",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -808,9 +808,9 @@ struct frame_print_options\n   const char *print_frame_info = print_frame_info_auto;\n   const char *print_entry_values = print_entry_values_default;\n \n-  /* If non-zero, don't invoke pretty-printers for frame\n+  /* If true, don't invoke pretty-printers for frame\n      arguments.  */\n-  int print_raw_frame_arguments;\n+  bool print_raw_frame_arguments;\n };\n \n /* The values behind the global \"set print ...\" settings.  */\n@@ -931,11 +931,11 @@ struct set_backtrace_options\n {\n   /* Flag to indicate whether backtraces should continue past\n      main.  */\n-  int backtrace_past_main = 0;\n+  bool backtrace_past_main = false;\n \n   /* Flag to indicate whether backtraces should continue past\n      entry.  */\n-  int backtrace_past_entry = 0;\n+  bool backtrace_past_entry = false;\n \n   /* Upper bound on the number of backtrace levels.  Note this is not\n      exposed as a command option, because \"backtrace\" and \"frame"
    },
    {
      "sha": "327a63313b40947b9199e2db585edb30d7b2d287",
      "filename": "gdb/gdb-demangle.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdb-demangle.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdb-demangle.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb-demangle.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -19,14 +19,14 @@\n #ifndef GDB_DEMANGLE_H\n #define GDB_DEMANGLE_H\n \n-/* Nonzero means that encoded C++/ObjC names should be printed out in their\n+/* True means that encoded C++/ObjC names should be printed out in their\n    C++/ObjC form rather than raw.  */\n-extern int demangle;\n+extern bool demangle;\n \n-/* Nonzero means that encoded C++/ObjC names should be printed out in their\n+/* True means that encoded C++/ObjC names should be printed out in their\n    C++/ObjC form even in assembler language displays.  If this is set, but\n-   DEMANGLE is zero, names are printed raw, i.e. DEMANGLE controls.  */\n-extern int asm_demangle;\n+   DEMANGLE is false, names are printed raw, i.e. DEMANGLE controls.  */\n+extern bool asm_demangle;\n \n /* Check if a character is one of the commonly used C++ marker characters.  */\n extern int is_cplus_marker (int);"
    },
    {
      "sha": "a17460a8a00d4e665a9a4b5bc11d4f18642a953a",
      "filename": "gdb/gdb_bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdb_bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdb_bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -137,7 +137,7 @@ static htab_t gdb_bfd_cache;\n /* When true gdb will reuse an existing bfd object if the filename,\n    modification time, and file size all match.  */\n \n-static int bfd_sharing = 1;\n+static bool bfd_sharing = true;\n static void\n show_bfd_sharing  (struct ui_file *file, int from_tty,\n \t\t   struct cmd_list_element *c, const char *value)"
    },
    {
      "sha": "cac91c097bab310693788d5de69a6f9d3931d41d",
      "filename": "gdb/gdbcore.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbcore.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -137,7 +137,7 @@ extern void specify_exec_file_hook (void (*hook) (const char *filename));\n \n /* Whether to open exec and core files read-only or read-write.  */\n \n-extern int write_files;\n+extern bool write_files;\n \n /* Open and set up the core file bfd.  */\n "
    },
    {
      "sha": "7e7e5c3f018955ba98c78d08f3deae057805314a",
      "filename": "gdb/gdbsupport/common-debug.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbsupport/common-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbsupport/common-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/common-debug.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -22,7 +22,7 @@\n \n /* See gdbsupport/common-debug.h.  */\n \n-int show_debug_regs;\n+bool show_debug_regs;\n \n /* See gdbsupport/common-debug.h.  */\n "
    },
    {
      "sha": "5584f0984421634fa73da1c7eb561a5f0ddb689e",
      "filename": "gdb/gdbsupport/common-debug.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbsupport/common-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbsupport/common-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/common-debug.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -20,10 +20,10 @@\n #ifndef COMMON_COMMON_DEBUG_H\n #define COMMON_COMMON_DEBUG_H\n \n-/* Set to nonzero to enable debugging of hardware breakpoint/\n+/* Set to true to enable debugging of hardware breakpoint/\n    watchpoint support code.  */\n \n-extern int show_debug_regs;\n+extern bool show_debug_regs;\n \n /* Print a formatted message to the appropriate channel for\n    debugging output for the client.  */"
    },
    {
      "sha": "0daea9c2dac2a369d4fae11773708f00dadf20cd",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -623,7 +623,7 @@ extern void thread_command (const char *tidstr, int from_tty);\n \n /* Print notices on thread events (attach, detach, etc.), set with\n    `set print thread-events'.  */\n-extern int print_thread_events;\n+extern bool print_thread_events;\n \n /* Prints the list of threads and their details on UIOUT.  If\n    REQUESTED_THREADS, a list of GDB ids/ranges, is not NULL, only"
    },
    {
      "sha": "afda89e43fc99b568370640bb9b2812aa4790959",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -116,7 +116,7 @@ const struct floatformat *floatformats_ibm_long_double[BFD_ENDIAN_UNKNOWN] = {\n \n /* Should opaque types be resolved?  */\n \n-static int opaque_type_resolution = 1;\n+static bool opaque_type_resolution = true;\n \n /* A flag to enable printing of debugging information of C++\n    overloading.  */\n@@ -125,7 +125,7 @@ unsigned int overload_debug = 0;\n \n /* A flag to enable strict type checking.  */\n \n-static int strict_type_checking = 1;\n+static bool strict_type_checking = true;\n \n /* A function to show whether opaque types are resolved.  */\n "
    },
    {
      "sha": "b55c75b097607458f722aa8291e774e0a489697f",
      "filename": "gdb/gnu-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/gnu-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/gnu-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -93,7 +93,7 @@ int proc_wait_pid = 0;\n /* The number of wait requests we've sent, and expect replies from.  */\n int proc_waits_pending = 0;\n \n-int gnu_debug_flag = 0;\n+bool gnu_debug_flag = false;\n \n /* Forward decls */\n "
    },
    {
      "sha": "4685969348098c8211b711d1ee373380474b22ca",
      "filename": "gdb/guile/scm-auto-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/guile/scm-auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/guile/scm-auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-auto-load.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -30,7 +30,7 @@\n    set auto-load guile-scripts on|off\n    This is true if we should auto-load associated Guile scripts when an\n    objfile is opened, false otherwise.  */\n-static int auto_load_guile_scripts = 1;\n+static bool auto_load_guile_scripts = true;\n \n /* \"show\" command for the auto_load_guile_scripts configuration variable.  */\n "
    },
    {
      "sha": "6d24c2c37b7f8b29cd1cb5ca8d057dd11e528612",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -31,7 +31,10 @@\n \n union pascm_variable\n {\n-  /* Hold an integer value, for boolean and integer types.  */\n+  /* Hold an boolean value.  */\n+  bool boolval;\n+\n+  /* Hold an integer value.  */\n   int intval;\n \n   /* Hold an auto_boolean.  */\n@@ -365,7 +368,7 @@ add_setshow_generic (enum var_types param_type, enum command_class cmd_class,\n     {\n     case var_boolean:\n       add_setshow_boolean_cmd (cmd_name, cmd_class,\n-\t\t\t       &self->value.intval,\n+\t\t\t       &self->value.boolval,\n \t\t\t       set_doc, show_doc, help_doc,\n \t\t\t       set_func, show_func,\n \t\t\t       set_list, show_list);\n@@ -606,7 +609,7 @@ pascm_param_value (enum var_types type, void *var,\n \n     case var_boolean:\n       {\n-\tif (* (int *) var)\n+\tif (* (bool *) var)\n \t  return SCM_BOOL_T;\n \telse\n \t  return SCM_BOOL_F;\n@@ -717,7 +720,7 @@ pascm_set_param_value_x (enum var_types type, union pascm_variable *var,\n     case var_boolean:\n       SCM_ASSERT_TYPE (gdbscm_is_bool (value), value, arg_pos, func_name,\n \t\t       _(\"boolean\"));\n-      var->intval = gdbscm_is_true (value);\n+      var->boolval = gdbscm_is_true (value);\n       break;\n \n     case var_auto_boolean:"
    },
    {
      "sha": "b1f71883ec38d68d3c4d986f5be1cac4356a6870",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -41,7 +41,7 @@\n #include \"hppa-tdep.h\"\n #include <algorithm>\n \n-static int hppa_debug = 0;\n+static bool hppa_debug = false;\n \n /* Some local constants.  */\n static const int hppa32_num_regs = 128;"
    },
    {
      "sha": "726f14d525fb3d338f2a34b702bc604f9d2e2f72",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -55,7 +55,7 @@\n    asynchronous inferior function call implementation, and that in\n    turn means restructuring the code so that it is event driven.  */\n \n-static int may_call_functions_p = 1;\n+static bool may_call_functions_p = true;\n static void\n show_may_call_functions_p (struct ui_file *file, int from_tty,\n \t\t\t   struct cmd_list_element *c,\n@@ -86,7 +86,7 @@ show_may_call_functions_p (struct ui_file *file, int from_tty,\n    trust the debug information; the user can override this behavior\n    with \"set coerce-float-to-double 0\".  */\n \n-static int coerce_float_to_double_p = 1;\n+static bool coerce_float_to_double_p = true;\n static void\n show_coerce_float_to_double_p (struct ui_file *file, int from_tty,\n \t\t\t       struct cmd_list_element *c, const char *value)\n@@ -104,7 +104,7 @@ show_coerce_float_to_double_p (struct ui_file *file, int from_tty,\n \n    The default is to stop in the frame where the signal was received.  */\n \n-static int unwind_on_signal_p = 0;\n+static bool unwind_on_signal_p = false;\n static void\n show_unwind_on_signal_p (struct ui_file *file, int from_tty,\n \t\t\t struct cmd_list_element *c, const char *value)\n@@ -127,7 +127,7 @@ show_unwind_on_signal_p (struct ui_file *file, int from_tty,\n    The default is to unwind the frame if a std::terminate call is\n    made.  */\n \n-static int unwind_on_terminating_exception_p = 1;\n+static bool unwind_on_terminating_exception_p = true;\n \n static void\n show_unwind_on_terminating_exception_p (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "dc82ef043fe85deaef3419e7171e6148af06f977",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -105,7 +105,7 @@ int stopped_by_random_signal;\n \n /* See inferior.h.  */\n \n-int startup_with_shell = 1;\n+bool startup_with_shell = true;\n \n \f\n /* Accessor routines.  */"
    },
    {
      "sha": "cf2175494d166620abd014aab1199b0cbf0f096e",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -46,7 +46,7 @@ struct inferior *inferior_list = NULL;\n static int highest_inferior_num;\n \n /* See inferior.h.  */\n-int print_inferior_events = 1;\n+bool print_inferior_events = true;\n \n /* The Current Inferior.  This is a strong reference.  I.e., whenever\n    an inferior is the current inferior, its refcount is"
    },
    {
      "sha": "3a64a7cfeaeaba36d66332cfd421bed657d376b2",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -244,7 +244,7 @@ extern void prepare_execution_command (struct target_ops *target,\n \n    The catch-exec traps expected during start-up will be one more if\n    the target is started up with a shell.  */\n-extern int startup_with_shell;\n+extern bool startup_with_shell;\n \n /* Nonzero if stopped due to completion of a stack dummy routine.  */\n \n@@ -257,7 +257,7 @@ extern int stopped_by_random_signal;\n \n /* Print notices on inferior events (attach, detach, etc.), set with\n    `set print inferior-events'.  */\n-extern int print_inferior_events;\n+extern bool print_inferior_events;\n \n /* Anything but NO_STOP_QUIETLY means we expect a trap and the caller\n    will handle it themselves.  STOP_QUIETLY is used when running in"
    },
    {
      "sha": "be29cbe4f51ff97a4d10ee6ff0cf23fbdbe230d6",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -136,7 +136,7 @@ mark_infrun_async_event_handler (void)\n /* When set, stop the 'step' command if we enter a function which has\n    no line number information.  The normal behavior is that we step\n    over such function.  */\n-int step_stop_if_no_debug = 0;\n+bool step_stop_if_no_debug = false;\n static void\n show_step_stop_if_no_debug (struct ui_file *file, int from_tty,\n \t\t\t    struct cmd_list_element *c, const char *value)\n@@ -155,9 +155,9 @@ static ptid_t previous_inferior_ptid;\n    Exactly which branch is detached depends on 'set follow-fork-mode'\n    setting.  */\n \n-static int detach_fork = 1;\n+static bool detach_fork = true;\n \n-int debug_displaced = 0;\n+bool debug_displaced = false;\n static void\n show_debug_displaced (struct ui_file *file, int from_tty,\n \t\t      struct cmd_list_element *c, const char *value)\n@@ -176,7 +176,7 @@ show_debug_infrun (struct ui_file *file, int from_tty,\n \n /* Support for disabling address space randomization.  */\n \n-int disable_randomization = 1;\n+bool disable_randomization = true;\n \n static void\n show_disable_randomization (struct ui_file *file, int from_tty,\n@@ -205,8 +205,8 @@ set_disable_randomization (const char *args, int from_tty,\n \n /* User interface for non-stop mode.  */\n \n-int non_stop = 0;\n-static int non_stop_1 = 0;\n+bool non_stop = false;\n+static bool non_stop_1 = false;\n \n static void\n set_non_stop (const char *args, int from_tty,\n@@ -234,8 +234,8 @@ show_non_stop (struct ui_file *file, int from_tty,\n    non-stop, in which all GDB operations that might affect the\n    target's execution have been disabled.  */\n \n-int observer_mode = 0;\n-static int observer_mode_1 = 0;\n+bool observer_mode = false;\n+static bool observer_mode_1 = false;\n \n static void\n set_observer_mode (const char *args, int from_tty,\n@@ -256,7 +256,7 @@ set_observer_mode (const char *args, int from_tty,\n   /* We can insert fast tracepoints in or out of observer mode,\n      but enable them if we're going into this mode.  */\n   if (observer_mode)\n-    may_insert_fast_tracepoints = 1;\n+    may_insert_fast_tracepoints = true;\n   may_stop = !observer_mode;\n   update_target_permissions ();\n \n@@ -265,7 +265,7 @@ set_observer_mode (const char *args, int from_tty,\n   if (observer_mode)\n     {\n       pagination_enabled = 0;\n-      non_stop = non_stop_1 = 1;\n+      non_stop = non_stop_1 = true;\n     }\n \n   if (from_tty)\n@@ -289,13 +289,11 @@ show_observer_mode (struct ui_file *file, int from_tty,\n void\n update_observer_mode (void)\n {\n-  int newval;\n-\n-  newval = (!may_insert_breakpoints\n-\t    && !may_insert_tracepoints\n-\t    && may_insert_fast_tracepoints\n-\t    && !may_stop\n-\t    && non_stop);\n+  bool newval = (!may_insert_breakpoints\n+\t\t && !may_insert_tracepoints\n+\t\t && may_insert_fast_tracepoints\n+\t\t && !may_stop\n+\t\t && non_stop);\n \n   /* Let the user know if things change.  */\n   if (newval != observer_mode)\n@@ -2089,7 +2087,7 @@ set_schedlock_func (const char *args, int from_tty, struct cmd_list_element *c)\n /* True if execution commands resume all threads of all processes by\n    default; otherwise, resume only threads of the current inferior\n    process.  */\n-int sched_multi = 0;\n+bool sched_multi = false;\n \n /* Try to setup for software single stepping over the specified location.\n    Return 1 if target_resume() should use hardware single step."
    },
    {
      "sha": "2b2a3a3e44462ac826d5af17acf869d406a5dbbd",
      "filename": "gdb/infrun.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/infrun.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/infrun.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -30,7 +30,7 @@ struct return_value_info;\n extern unsigned int debug_infrun;\n \n /* True if we are debugging displaced stepping.  */\n-extern int debug_displaced;\n+extern bool debug_displaced;\n \n /* Nonzero if we want to give control to the user when we're notified\n    of shared library events by the dynamic linker.  */\n@@ -39,24 +39,24 @@ extern int stop_on_solib_events;\n /* True if execution commands resume all threads of all processes by\n    default; otherwise, resume only threads of the current inferior\n    process.  */\n-extern int sched_multi;\n+extern bool sched_multi;\n \n /* When set, stop the 'step' command if we enter a function which has\n    no line number information.  The normal behavior is that we step\n    over such function.  */\n-extern int step_stop_if_no_debug;\n+extern bool step_stop_if_no_debug;\n \n /* If set, the inferior should be controlled in non-stop mode.  In\n    this mode, each thread is controlled independently.  Execution\n    commands apply only to the selected thread by default, and stop\n    events stop only the thread that had the event -- the other threads\n    are kept running freely.  */\n-extern int non_stop;\n+extern bool non_stop;\n \n /* When set (default), the target should attempt to disable the\n    operating system's address space randomization feature when\n    starting an inferior.  */\n-extern int disable_randomization;\n+extern bool disable_randomization;\n \n /* Returns a unique identifier for the current stop.  This can be used\n    to tell whether a command has proceeded the inferior past the"
    },
    {
      "sha": "ff888a90678b0cbb3932a609cd347eeb9c3367ce",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -91,12 +91,12 @@ struct smaps_vmflags\n /* Whether to take the /proc/PID/coredump_filter into account when\n    generating a corefile.  */\n \n-static int use_coredump_filter = 1;\n+static bool use_coredump_filter = true;\n \n /* Whether the value of smaps_vmflags->exclude_coredump should be\n    ignored, including mappings marked with the VM_DONTDUMP flag in\n    the dump.  */\n-static int dump_excluded_mappings = 0;\n+static bool dump_excluded_mappings = false;\n \n /* This enum represents the signals' numbers on a generic architecture\n    running the Linux kernel.  The definition of \"generic\" comes from"
    },
    {
      "sha": "100434e2c9d748f2a90b3597f73bcf406ed1565e",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -110,13 +110,13 @@ class thread_db_target final : public target_ops\n \n static char *libthread_db_search_path;\n \n-/* Set to non-zero if thread_db auto-loading is enabled\n+/* Set to true if thread_db auto-loading is enabled\n    by the \"set auto-load libthread-db\" command.  */\n-static int auto_load_thread_db = 1;\n+static bool auto_load_thread_db = true;\n \n-/* Set to non-zero if load-time libthread_db tests have been enabled\n+/* Set to true if load-time libthread_db tests have been enabled\n    by the \"maintenence set check-libthread-db\" command.  */\n-static int check_thread_db_on_load = 0;\n+static bool check_thread_db_on_load = false;\n \n /* \"show\" command for the auto_load_thread_db configuration variable.  */\n "
    },
    {
      "sha": "7fab8ff8dad5789a1585c462e5cc425c5f3295c1",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -594,6 +594,9 @@ captured_main_1 (struct captured_main_args *context)\n       OPT_READNOW,\n       OPT_READNEVER\n     };\n+    /* This struct requires int* in the struct, but write_files is a bool.\n+       So use this temporary int that we write back after argument parsing.  */\n+    int write_files_1 = 0;\n     static struct option long_options[] =\n     {\n       {\"tui\", no_argument, 0, OPT_TUI},\n@@ -658,7 +661,7 @@ captured_main_1 (struct captured_main_args *context)\n       {\"w\", no_argument, NULL, OPT_WINDOWS},\n       {\"windows\", no_argument, NULL, OPT_WINDOWS},\n       {\"statistics\", no_argument, 0, OPT_STATISTICS},\n-      {\"write\", no_argument, &write_files, 1},\n+      {\"write\", no_argument, &write_files_1, 1},\n       {\"args\", no_argument, &set_args, 1},\n       {\"l\", required_argument, 0, 'l'},\n       {\"return-child-result\", no_argument, &return_child_result, 1},\n@@ -842,6 +845,7 @@ captured_main_1 (struct captured_main_args *context)\n \t\t   gdb_program_name);\n \t  }\n       }\n+    write_files = (write_files_1 != 0);\n \n     if (batch_flag)\n       {"
    },
    {
      "sha": "9bda34a3fd2431665642f0004446d1dd3c6fd909",
      "filename": "gdb/maint-test-options.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/maint-test-options.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/maint-test-options.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint-test-options.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -126,10 +126,10 @@ static const char *const test_options_enum_values_choices[] =\n \n struct test_options_opts\n {\n-  int flag_opt = 0;\n-  int xx1_opt = 0;\n-  int xx2_opt = 0;\n-  int boolean_opt = 0;\n+  bool flag_opt = false;\n+  bool xx1_opt = false;\n+  bool xx2_opt = false;\n+  bool boolean_opt = false;\n   const char *enum_opt = test_options_enum_values_xxx;\n   unsigned int uint_opt = 0;\n   int zuint_unl_opt = 0;"
    },
    {
      "sha": "86d201a3c6f2db38cdac6e8a1d526d78c73ac4a5",
      "filename": "gdb/maint-test-settings.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/maint-test-settings.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/maint-test-settings.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint-test-settings.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -50,7 +50,7 @@ maintenance_show_test_settings_cmd (const char *args, int from_tty)\n /* Control variables for all the \"maintenance set/show test-settings\n    xxx\" commands.  */\n \n-static int maintenance_test_settings_boolean;\n+static bool maintenance_test_settings_boolean;\n \n static auto_boolean maintenance_test_settings_auto_boolean = AUTO_BOOLEAN_AUTO;\n "
    },
    {
      "sha": "b8eb93827c8f7494815a41721487f298589ab1b5",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -770,7 +770,7 @@ maintenance_with_cmd_completer (struct cmd_list_element *ignore,\n \n /* Profiling support.  */\n \n-static int maintenance_profile_p;\n+static bool maintenance_profile_p;\n static void\n show_maintenance_profile_p (struct ui_file *file, int from_tty,\n \t\t\t    struct cmd_list_element *c, const char *value)\n@@ -841,17 +841,17 @@ maintenance_set_profile_cmd (const char *args, int from_tty,\n }\n #endif\n \f\n-/* If nonzero, display time usage both at startup and for each command.  */\n+/* If true, display time usage both at startup and for each command.  */\n \n-static int per_command_time;\n+static bool per_command_time;\n \n-/* If nonzero, display space usage both at startup and for each command.  */\n+/* If true, display space usage both at startup and for each command.  */\n \n-static int per_command_space;\n+static bool per_command_space;\n \n-/* If nonzero, display basic symtab stats for each command.  */\n+/* If true, display basic symtab stats for each command.  */\n \n-static int per_command_symtab;\n+static bool per_command_symtab;\n \n /* mt per-command commands.  */\n "
    },
    {
      "sha": "0475780b29f837eb1588d92c1f4a39fc19d88537",
      "filename": "gdb/memattr.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/memattr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/memattr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/memattr.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -53,7 +53,7 @@ static bool target_mem_regions_valid;\n /* If this flag is set, gdb will assume that memory ranges not\n    specified by the memory map have type MEM_NONE, and will\n    emit errors on all accesses to that memory.  */\n-static int inaccessible_by_default = 1;\n+static bool inaccessible_by_default = true;\n \n static void\n show_inaccessible_by_default (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "2ece360205666dd676b375054722486136d43b31",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -101,11 +101,11 @@ static void output_register (struct frame_info *, int regnum, int format,\n \t\t\t     int skip_unavailable);\n \n /* Controls whether the frontend wants MI in async mode.  */\n-static int mi_async = 0;\n+static bool mi_async = false;\n \n /* The set command writes to this variable.  If the inferior is\n    executing, mi_async is *not* updated.  */\n-static int mi_async_1 = 0;\n+static bool mi_async_1 = false;\n \n static void\n set_mi_async_command (const char *args, int from_tty,"
    },
    {
      "sha": "37a1b2a0b8f372554babca69889da144f416aa76",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -858,7 +858,7 @@ static int heuristic_fence_post = 0;\n    register N.  NOTE: This defines the pseudo register type so need to\n    rebuild the architecture vector.  */\n \n-static int mips64_transfers_32bit_regs_p = 0;\n+static bool mips64_transfers_32bit_regs_p = false;\n \n static void\n set_mips64_transfers_32bit_regs (const char *args, int from_tty,"
    },
    {
      "sha": "065496c38279105e101c781c6db893a13d8cea7c",
      "filename": "gdb/nat/fork-inferior.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/nat/fork-inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/nat/fork-inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/fork-inferior.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -72,7 +72,7 @@ extern ptid_t startup_inferior (pid_t pid, int ntraps,\n \n    The catch-exec traps expected during start-up will be one more if\n    the target is started up with a shell.  */\n-extern int startup_with_shell;\n+extern bool startup_with_shell;\n \n /* Perform any necessary tasks before a fork/vfork takes place.  ARGS\n    is a string containing all the arguments received by the inferior."
    },
    {
      "sha": "8cadea9be2665d878cdb2afb403d647e81f8197e",
      "filename": "gdb/nat/linux-namespaces.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/nat/linux-namespaces.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/nat/linux-namespaces.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-namespaces.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -31,7 +31,7 @@\n #include \"gdbsupport/scope-exit.h\"\n \n /* See nat/linux-namespaces.h.  */\n-int debug_linux_namespaces;\n+bool debug_linux_namespaces;\n \n /* Handle systems without fork.  */\n "
    },
    {
      "sha": "fe7e8a452ee579a615f374f309632b64ee0859ba",
      "filename": "gdb/nat/linux-namespaces.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/nat/linux-namespaces.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/nat/linux-namespaces.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-namespaces.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -20,9 +20,9 @@\n #ifndef NAT_LINUX_NAMESPACES_H\n #define NAT_LINUX_NAMESPACES_H\n \n-/* Set to nonzero to enable debugging of Linux namespaces code.  */\n+/* Set to true to enable debugging of Linux namespaces code.  */\n \n-extern int debug_linux_namespaces;\n+extern bool debug_linux_namespaces;\n \n /* Enumeration of Linux namespace types.  */\n "
    },
    {
      "sha": "cb17e4f3750be302b66d6dcef0806f2758ecfef9",
      "filename": "gdb/nios2-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/nios2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/nios2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nios2-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -52,7 +52,7 @@\n \n /* Control debugging information emitted in this file.  */\n \n-static int nios2_debug = 0;\n+static bool nios2_debug = false;\n \n /* The following structures are used in the cache for prologue\n    analysis; see the reg_value and reg_saved tables in"
    },
    {
      "sha": "6a6dce1527340d58ad078f29c29dc227de20c7f0",
      "filename": "gdb/or1k-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/or1k-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/or1k-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -50,7 +50,7 @@\n \n /* Global debug flag.  */\n \n-static int or1k_debug = 0;\n+static bool or1k_debug = false;\n \n static void\n show_or1k_debug (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "a17cae6b55195b95d2eec126639fc8a484bfec7b",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -74,8 +74,8 @@ show_expressiondebug (struct ui_file *file, int from_tty,\n }\n \n \n-/* Non-zero if an expression parser should set yydebug.  */\n-int parser_debug;\n+/* True if an expression parser should set yydebug.  */\n+bool parser_debug;\n \n static void\n show_parserdebug (struct ui_file *file, int from_tty,"
    },
    {
      "sha": "64aa9b8b1e0c71340450a8cbe87ecd5c1ad900e9",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -32,7 +32,7 @@ struct language_defn;\n struct internalvar;\n class innermost_block_tracker;\n \n-extern int parser_debug;\n+extern bool parser_debug;\n \n /* A class that can be used to build a \"struct expression\".  */\n "
    },
    {
      "sha": "b3f7b59863b32f7cc93c113ee8b55473352c1f1e",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -100,7 +100,7 @@ show_max_symbolic_offset (struct ui_file *file, int from_tty,\n \n /* Append the source filename and linenumber of the symbol when\n    printing a symbolic value as `<symbol at filename:linenum>' if set.  */\n-static int print_symbol_filename = 0;\n+static bool print_symbol_filename = false;\n static void\n show_print_symbol_filename (struct ui_file *file, int from_tty,\n \t\t\t    struct cmd_list_element *c, const char *value)"
    },
    {
      "sha": "214b26f40cf1fcefbe6ed5c25bf9d6123173f9e4",
      "filename": "gdb/proc-api.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/proc-api.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/proc-api.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/proc-api.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -50,7 +50,7 @@ struct trans {\n   const char *desc;             /* Short description of value */\n };\n \n-static int   procfs_trace    = 0;\n+static bool  procfs_trace   = false;\n static FILE *procfs_file     = NULL;\n static char *procfs_filename;\n "
    },
    {
      "sha": "ade2aa1b3778b5125125d1979330bd9ee0467f53",
      "filename": "gdb/python/py-auto-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/py-auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/py-auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-auto-load.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -29,7 +29,7 @@\n    set auto-load python-scripts on|off\n    This is true if we should auto-load associated Python scripts when an\n    objfile is opened, false otherwise.  */\n-static int auto_load_python_scripts = 1;\n+static bool auto_load_python_scripts = true;\n \n /* \"show\" command for the auto_load_python_scripts configuration variable.  */\n "
    },
    {
      "sha": "4794366583acba2b500c7c5f1fa48ad447a909d4",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -55,7 +55,10 @@ struct parm_constant parm_constants[] =\n /* A union that can hold anything described by enum var_types.  */\n union parmpy_variable\n {\n-  /* Hold an integer value, for boolean and integer types.  */\n+  /* Hold a boolean value.  */\n+  bool boolval;\n+\n+  /* Hold an integer value.  */\n   int intval;\n \n   /* Hold an auto_boolean.  */\n@@ -198,7 +201,7 @@ set_parameter_value (parmpy_object *self, PyObject *value)\n       cmp = PyObject_IsTrue (value);\n       if (cmp < 0)\n \t  return -1;\n-      self->value.intval = cmp;\n+      self->value.boolval = cmp;\n       break;\n \n     case var_auto_boolean:\n@@ -475,7 +478,7 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n     case var_boolean:\n \n       add_setshow_boolean_cmd (cmd_name, cmdclass,\n-\t\t\t       &self->value.intval, set_doc, show_doc,\n+\t\t\t       &self->value.boolval, set_doc, show_doc,\n \t\t\t       help_doc, get_set_value, get_show_value,\n \t\t\t       set_list, show_list);\n "
    },
    {
      "sha": "1428b7abe5c7b0038ac561c96d3571e363c8780c",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -580,15 +580,15 @@ valpy_string (PyObject *self, PyObject *args, PyObject *kw)\n \t\t\t   encoding, errors);\n }\n \n-/* Given a Python object, copy its truth value to a C int (the value\n+/* Given a Python object, copy its truth value to a C bool (the value\n    pointed by dest).\n    If src_obj is NULL, then *dest is not modified.\n \n    Return true in case of success (including src_obj being NULL), false\n    in case of error.  */\n \n static bool\n-copy_py_bool_obj (int *dest, PyObject *src_obj)\n+copy_py_bool_obj (bool *dest, PyObject *src_obj)\n {\n   if (src_obj)\n     {"
    },
    {
      "sha": "ddf0e72d26f797b1b67d33b5d3b6eea797dc98a3",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -441,7 +441,7 @@ gdbpy_parameter_value (enum var_types type, void *var)\n \n     case var_boolean:\n       {\n-\tif (* (int *) var)\n+\tif (* (bool *) var)\n \t  Py_RETURN_TRUE;\n \telse\n \t  Py_RETURN_FALSE;"
    },
    {
      "sha": "0cc7e1dc75a7ba4571db30f7eb5e05615caa52d1",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -57,8 +57,8 @@\n    is running, switching to its corresponding ptid, and then performing\n    the operation on that ptid using the target beneath us.  */\n \n-/* If non-null, ravenscar task support is enabled.  */\n-static int ravenscar_task_support = 1;\n+/* If true, ravenscar task support is enabled.  */\n+static bool ravenscar_task_support = true;\n \n static const char running_thread_name[] = \"__gnat_running_thread_table\";\n "
    },
    {
      "sha": "d402d8733dd3889b8dccae8375e20d412b91393b",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -1560,7 +1560,7 @@ record_btrace_target::store_registers (struct regcache *regcache, int regno)\n       && record_is_replaying (regcache->ptid ()))\n     error (_(\"Cannot write registers while replaying.\"));\n \n-  gdb_assert (may_write_registers != 0);\n+  gdb_assert (may_write_registers);\n \n   this->beneath ()->store_registers (regcache, regno);\n }"
    },
    {
      "sha": "c1d124f51926bfd8f2491f81f293f3097bcf1fef",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -159,7 +159,7 @@ struct record_full_entry\n \n /* If true, query if PREC cannot record memory\n    change of next instruction.  */\n-int record_full_memory_query = 0;\n+bool record_full_memory_query = false;\n \n struct record_full_core_buf_entry\n {\n@@ -196,8 +196,8 @@ static struct record_full_entry *record_full_list = &record_full_first;\n static struct record_full_entry *record_full_arch_list_head = NULL;\n static struct record_full_entry *record_full_arch_list_tail = NULL;\n \n-/* 1 ask user. 0 auto delete the last struct record_full_entry.  */\n-static int record_full_stop_at_limit = 1;\n+/* true ask user. false auto delete the last struct record_full_entry.  */\n+static bool record_full_stop_at_limit = true;\n /* Maximum allowed number of insns in execution log.  */\n static unsigned int record_full_insn_max_num\n \t= DEFAULT_RECORD_FULL_INSN_MAX_NUM;"
    },
    {
      "sha": "d1eff9760e23a1403853abdf2f5881890e64c8bd",
      "filename": "gdb/record-full.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/record-full.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/record-full.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -20,7 +20,7 @@\n #ifndef RECORD_FULL_H\n #define RECORD_FULL_H\n \n-extern int record_full_memory_query;\n+extern bool record_full_memory_query;\n \n extern int record_full_arch_list_add_reg (struct regcache *regcache, int num);\n extern int record_full_arch_list_add_mem (CORE_ADDR addr, int len);"
    },
    {
      "sha": "2ff7b3b66c6c8ee686c1910a3f5ce1c7e5b1e52e",
      "filename": "gdb/remote-notif.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/remote-notif.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/remote-notif.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-notif.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -41,7 +41,7 @@\n #include \"infrun.h\"\n #include \"gdbcmd.h\"\n \n-int notif_debug = 0;\n+bool notif_debug = false;\n \n /* Supported clients of notifications.  */\n "
    },
    {
      "sha": "c735cc2918a51647c39a28dc7db7f84bb09183ac",
      "filename": "gdb/remote-notif.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/remote-notif.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/remote-notif.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-notif.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -129,6 +129,6 @@ remote_notif_state *remote_notif_state_allocate (remote_target *remote);\n \n extern struct notif_client notif_client_stop;\n \n-extern int notif_debug;\n+extern bool notif_debug;\n \n #endif /* REMOTE_NOTIF_H */"
    },
    {
      "sha": "e39366d8b209ac15d155ccae6bc2c3a1f47a18d8",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -1038,7 +1038,7 @@ static struct cmd_list_element *remote_show_cmdlist;\n \n /* Controls whether GDB is willing to use range stepping.  */\n \n-static int use_range_stepping = 1;\n+static bool use_range_stepping = true;\n \n /* The max number of chars in debug output.  The rest of chars are\n    omitted.  */\n@@ -1492,12 +1492,12 @@ show_interrupt_sequence (struct ui_file *file, int from_tty,\n    to the remote target when gdb connects to it.\n    This is mostly needed when you debug the Linux kernel: The Linux kernel\n    expects BREAK g which is Magic SysRq g for connecting gdb.  */\n-static int interrupt_on_connect = 0;\n+static bool interrupt_on_connect = false;\n \n /* This variable is used to implement the \"set/show remotebreak\" commands.\n    Since these commands are now deprecated in favor of \"set/show remote\n    interrupt-sequence\", it no longer has any effect on the code.  */\n-static int remote_break;\n+static bool remote_break;\n \n static void\n set_remotebreak (const char *args, int from_tty, struct cmd_list_element *c)"
    },
    {
      "sha": "079f24828e921d087b273a9c0613204df69c3c6a",
      "filename": "gdb/ser-tcp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/ser-tcp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/ser-tcp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-tcp.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -72,7 +72,7 @@ static struct cmd_list_element *tcp_show_cmdlist;\n \n /* Whether to auto-retry refused connections.  */\n \n-static int tcp_auto_retry = 1;\n+static bool tcp_auto_retry = true;\n \n /* Timeout period for connections, in seconds.  */\n "
    },
    {
      "sha": "c49bd84eb63c84481060aeb1a51cc0c8fd477d91",
      "filename": "gdb/ser-unix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/ser-unix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/ser-unix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-unix.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -41,7 +41,7 @@ struct hardwire_ttystate\n \n #ifdef CRTSCTS\n /* Boolean to explicitly enable or disable h/w flow control.  */\n-static int serial_hwflow;\n+static bool serial_hwflow;\n static void\n show_serial_hwflow (struct ui_file *file, int from_tty,\n \t\t    struct cmd_list_element *c, const char *value)"
    },
    {
      "sha": "a549aca897c8489e60cdc1fafd798851d15d9500",
      "filename": "gdb/skip.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/skip.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/skip.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/skip.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -39,7 +39,7 @@\n \n /* True if we want to print debug printouts related to file/function\n    skipping. */\n-static int debug_skip = 0;\n+static bool debug_skip = false;\n \n class skiplist_entry\n {"
    },
    {
      "sha": "1a25a0d4a93117c81f8927da812796076c4bbcb9",
      "filename": "gdb/solib-aix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/solib-aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/solib-aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-aix.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -30,7 +30,7 @@\n \n /* Variable controlling the output of the debugging traces for\n    this module.  */\n-static int solib_aix_debug;\n+static bool solib_aix_debug;\n \n /* Our private data in struct so_list.  */\n "
    },
    {
      "sha": "d01f3af30093bce5eb464e890a2817d542907fce",
      "filename": "gdb/spu-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/spu-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/spu-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/spu-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -52,9 +52,9 @@ static struct cmd_list_element *setspucmdlist = NULL;\n static struct cmd_list_element *showspucmdlist = NULL;\n \n /* Whether to stop for new SPE contexts.  */\n-static int spu_stop_on_load_p = 0;\n+static bool spu_stop_on_load_p = false;\n /* Whether to automatically flush the SW-managed cache.  */\n-static int spu_auto_flush_cache_p = 1;\n+static bool spu_auto_flush_cache_p = true;\n \n \n /* The tdep structure.  */"
    },
    {
      "sha": "0f7fbf5e6efc531aaad968edaf34916be2642061",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -183,9 +183,9 @@ pretty-printers for that value.\")\n \n struct backtrace_cmd_options\n {\n-  int full = 0;\n-  int no_filters = 0;\n-  int hide = 0;\n+  bool full = false;\n+  bool no_filters = false;\n+  bool hide = false;\n };\n \n using bt_flag_option_def\n@@ -2423,7 +2423,7 @@ print_frame_local_vars (struct frame_info *frame,\n \n struct info_print_options\n {\n-  int quiet = false;\n+  bool quiet = false;\n   char *type_regexp = nullptr;\n \n   ~info_print_options ()"
    },
    {
      "sha": "37959bf0d408dc96c89843f9f134bc56fb01c9be",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -48,8 +48,8 @@ struct debug_sym_fns_data\n static const struct objfile_key<debug_sym_fns_data>\n   symfile_debug_objfile_data_key;\n \n-/* If non-zero all calls to the symfile functions are logged.  */\n-static int debug_symfile = 0;\n+/* If true all calls to the symfile functions are logged.  */\n+static bool debug_symfile = false;\n \n /* Return non-zero if symfile debug logging is installed.  */\n "
    },
    {
      "sha": "5252c727aa5bc705d826539b1677db82eb6a8ae0",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -143,7 +143,7 @@ static const char *print_symbol_loading = print_symbol_loading_full;\n \n /* See symfile.h.  */\n \n-int auto_solib_add = 1;\n+bool auto_solib_add = true;\n \f\n \n /* Return non-zero if symbol-loading messages should be printed.\n@@ -1265,7 +1265,7 @@ symbol_file_clear (int from_tty)\n \n /* See symfile.h.  */\n \n-int separate_debug_file_debug = 0;\n+bool separate_debug_file_debug = false;\n \n static int\n separate_debug_file_exists (const std::string &name, unsigned long crc,"
    },
    {
      "sha": "642a5e223a32576fc2445415a5fb7bdf526d54e7",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -439,7 +439,7 @@ extern section_addr_info\n \n \t\t\t/*   Variables   */\n \n-/* If non-zero, shared library symbols will be added automatically\n+/* If true, shared library symbols will be added automatically\n    when the inferior is created, new libraries are loaded, or when\n    attaching to the inferior.  This is almost always what users will\n    want to have happen; but for very large programs, the startup time\n@@ -449,7 +449,7 @@ extern section_addr_info\n    library symbols are not loaded, commands like \"info fun\" will *not*\n    report all the functions that are actually present.  */\n \n-extern int auto_solib_add;\n+extern bool auto_solib_add;\n \n /* From symfile.c */\n \n@@ -625,6 +625,6 @@ extern gdb_bfd_ref_ptr find_separate_debug_file_in_section (struct objfile *);\n \n /* True if we are printing debug output about separate debug info files.  */\n \n-extern int separate_debug_file_debug;\n+extern bool separate_debug_file_debug;\n \n #endif /* !defined(SYMFILE_H) */"
    },
    {
      "sha": "e2edad4fb1119c05120c222f375e614f481a1fd9",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -241,10 +241,10 @@ static unsigned int new_symbol_cache_size = DEFAULT_SYMBOL_CACHE_SIZE;\n    the original value from here.  */\n static unsigned int symbol_cache_size = DEFAULT_SYMBOL_CACHE_SIZE;\n \n-/* Non-zero if a file may be known by two different basenames.\n+/* True if a file may be known by two different basenames.\n    This is the uncommon case, and significantly slows down gdb.\n    Default set to \"off\" to not slow down the common case.  */\n-int basenames_may_differ = 0;\n+bool basenames_may_differ = false;\n \n /* Allow the user to configure the debugger behavior with respect\n    to multiple-choice menus when more than one symbol matches during\n@@ -4131,10 +4131,10 @@ operator_chars (const char *p, const char **end)\n struct filename_partial_match_opts\n {\n   /* Only match the directory name part.   */\n-  int dirname = false;\n+  bool dirname = false;\n \n   /* Only match the basename part.  */\n-  int basename = false;\n+  bool basename = false;\n };\n \n /* Data structure to maintain printing state for output_source_filename.  */\n@@ -4912,8 +4912,8 @@ symtab_symbol_info (bool quiet, bool exclude_minsyms,\n \n struct info_print_options\n {\n-  int quiet = false;\n-  int exclude_minsyms = false;\n+  bool quiet = false;\n+  bool exclude_minsyms = false;\n   char *type_regexp = nullptr;\n \n   ~info_print_options ()\n@@ -5010,7 +5010,7 @@ info_functions_command (const char *args, int from_tty)\n \n struct info_types_options\n {\n-  int quiet = false;\n+  bool quiet = false;\n };\n \n /* The options used by the 'info types' command.  */"
    },
    {
      "sha": "d0465987749511b43211a7ab91fa7673f5ad9388",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -544,7 +544,7 @@ extern const char *symbol_demangled_name\n \n #define SYMBOL_PRINT_NAME(symbol)\t\t\t\t\t\\\n   (demangle ? SYMBOL_NATURAL_NAME (symbol) : SYMBOL_LINKAGE_NAME (symbol))\n-extern int demangle;\n+extern bool demangle;\n \n /* Macro that returns the name to be used when sorting and searching symbols.\n    In C++, we search for the demangled form of a name,\n@@ -2064,7 +2064,7 @@ extern unsigned int symtab_create_debug;\n \n extern unsigned int symbol_lookup_debug;\n \n-extern int basenames_may_differ;\n+extern bool basenames_may_differ;\n \n int compare_filenames_for_search (const char *filename,\n \t\t\t\t  const char *search_name);"
    },
    {
      "sha": "c8a415512c5b3d06e6b4b65bcdb8f981ba43110e",
      "filename": "gdb/target-dcache.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/target-dcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/target-dcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-dcache.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -77,7 +77,7 @@ target_dcache_get_or_init (void)\n }\n \n /* The option sets this.  */\n-static int stack_cache_enabled_1 = 1;\n+static bool stack_cache_enabled_1 = true;\n /* And set_stack_cache updates this.\n    The reason for the separation is so that we don't flush the cache for\n    on->on transitions.  */\n@@ -114,7 +114,7 @@ stack_cache_enabled_p (void)\n \n /* The option sets this.  */\n \n-static int code_cache_enabled_1 = 1;\n+static bool code_cache_enabled_1 = true;\n \n /* And set_code_cache updates this.\n    The reason for the separation is so that we don't flush the cache for"
    },
    {
      "sha": "599e22a724ceddbcd96deeeb5fac146505dbcbc8",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -128,10 +128,10 @@ current_top_target ()\n \n static struct cmd_list_element *targetlist = NULL;\n \n-/* Nonzero if we should trust readonly sections from the\n+/* True if we should trust readonly sections from the\n    executable when reading memory.  */\n \n-static int trust_readonly = 0;\n+static bool trust_readonly = false;\n \n /* Nonzero if we should show true memory content including\n    memory breakpoint inserted by gdb.  */\n@@ -142,17 +142,17 @@ static int show_memory_breakpoints = 0;\n    operations; they are useful for targets that need to prevent\n    inadvertant disruption, such as in non-stop mode.  */\n \n-int may_write_registers = 1;\n+bool may_write_registers = true;\n \n-int may_write_memory = 1;\n+bool may_write_memory = true;\n \n-int may_insert_breakpoints = 1;\n+bool may_insert_breakpoints = true;\n \n-int may_insert_tracepoints = 1;\n+bool may_insert_tracepoints = true;\n \n-int may_insert_fast_tracepoints = 1;\n+bool may_insert_fast_tracepoints = true;\n \n-int may_stop = 1;\n+bool may_stop = true;\n \n /* Non-zero if we want to see trace of target level stuff.  */\n \n@@ -2374,7 +2374,7 @@ target_require_runnable (void)\n \n /* Whether GDB is allowed to fall back to the default run target for\n    \"run\", \"attach\", etc. when no target is connected yet.  */\n-static int auto_connect_native_target = 1;\n+static bool auto_connect_native_target = true;\n \n static void\n show_auto_connect_native_target (struct ui_file *file, int from_tty,\n@@ -3356,9 +3356,9 @@ void\n target_stop_and_wait (ptid_t ptid)\n {\n   struct target_waitstatus status;\n-  int was_non_stop = non_stop;\n+  bool was_non_stop = non_stop;\n \n-  non_stop = 1;\n+  non_stop = true;\n   target_stop (ptid);\n \n   memset (&status, 0, sizeof (status));\n@@ -3841,11 +3841,11 @@ target_thread_events (int enable)\n \n /* Controls if targets can report that they can/are async.  This is\n    just for maintainers to use when debugging gdb.  */\n-int target_async_permitted = 1;\n+bool target_async_permitted = true;\n \n /* The set command writes to this variable.  If the inferior is\n    executing, target_async_permitted is *not* updated.  */\n-static int target_async_permitted_1 = 1;\n+static bool target_async_permitted_1 = true;\n \n static void\n maint_set_target_async_command (const char *args, int from_tty,\n@@ -3933,12 +3933,12 @@ maint_show_target_non_stop_command (struct ui_file *file, int from_tty,\n \n /* Temporary copies of permission settings.  */\n \n-static int may_write_registers_1 = 1;\n-static int may_write_memory_1 = 1;\n-static int may_insert_breakpoints_1 = 1;\n-static int may_insert_tracepoints_1 = 1;\n-static int may_insert_fast_tracepoints_1 = 1;\n-static int may_stop_1 = 1;\n+static bool may_write_registers_1 = true;\n+static bool may_write_memory_1 = true;\n+static bool may_insert_breakpoints_1 = true;\n+static bool may_insert_tracepoints_1 = true;\n+static bool may_insert_fast_tracepoints_1 = true;\n+static bool may_stop_1 = true;\n \n /* Make the user-set values match the real values again.  */\n "
    },
    {
      "sha": "c2f62031749d46271cb1cd953a267d340c09fde1",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -1802,7 +1802,7 @@ extern int target_has_execution_current (void);\n   (current_top_target ()->get_thread_control_capabilities () & tc_schedlock)\n \n /* Controls whether async mode is permitted.  */\n-extern int target_async_permitted;\n+extern bool target_async_permitted;\n \n /* Can the target support asynchronous execution?  */\n #define target_can_async_p() (current_top_target ()->can_async_p ())\n@@ -2482,12 +2482,12 @@ extern int remote_timeout;\n extern scoped_restore_tmpl<int>\n     make_scoped_restore_show_memory_breakpoints (int show);\n \n-extern int may_write_registers;\n-extern int may_write_memory;\n-extern int may_insert_breakpoints;\n-extern int may_insert_tracepoints;\n-extern int may_insert_fast_tracepoints;\n-extern int may_stop;\n+extern bool may_write_registers;\n+extern bool may_write_memory;\n+extern bool may_insert_breakpoints;\n+extern bool may_insert_tracepoints;\n+extern bool may_insert_fast_tracepoints;\n+extern bool may_stop;\n \n extern void update_target_permissions (void);\n "
    },
    {
      "sha": "17bc642b84debe5c8cadedfed428765de70191f0",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -1204,7 +1204,7 @@ print_thread_info (struct ui_out *uiout, const char *requested_threads,\n struct info_threads_opts\n {\n   /* For \"-gid\".  */\n-  int show_global_ids = 0;\n+  bool show_global_ids = false;\n };\n \n static const gdb::option::option_def info_threads_option_defs[] = {\n@@ -1574,7 +1574,7 @@ static const gdb::option::option_def thr_qcs_flags_option_defs[] = {\n    ASCENDING and FLAGS as context.  */\n \n static inline std::array<gdb::option::option_def_group, 2>\n-make_thread_apply_all_options_def_group (int *ascending,\n+make_thread_apply_all_options_def_group (bool *ascending,\n \t\t\t\t\t qcs_flags *flags)\n {\n   return {{\n@@ -1603,7 +1603,7 @@ make_thread_apply_options_def_group (qcs_flags *flags)\n static void\n thread_apply_all_command (const char *cmd, int from_tty)\n {\n-  int ascending = false;\n+  bool ascending = false;\n   qcs_flags flags;\n \n   auto group = make_thread_apply_all_options_def_group (&ascending,\n@@ -1951,7 +1951,7 @@ thread_find_command (const char *arg, int from_tty)\n }\n \n /* Print notices when new threads are attached and detached.  */\n-int print_thread_events = 1;\n+bool print_thread_events = true;\n static void\n show_print_thread_events (struct ui_file *file, int from_tty,\n \t\t\t  struct cmd_list_element *c, const char *value)"
    },
    {
      "sha": "49e6daae94972ecef3094b400a004363543156de",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -115,7 +115,7 @@ extern char lang_frame_mismatch_warn[];\t\t/* language.c */\n /* Flag for whether we want to confirm potentially dangerous\n    operations.  Default is yes.  */\n \n-int confirm = 1;\n+bool confirm = true;\n \n static void\n show_confirm (struct ui_file *file, int from_tty,\n@@ -850,15 +850,15 @@ gdb_readline_no_editing (const char *prompt)\n /* Variables which control command line editing and history\n    substitution.  These variables are given default values at the end\n    of this file.  */\n-static int command_editing_p;\n+static bool command_editing_p;\n \n /* NOTE 1999-04-29: This variable will be static again, once we modify\n    gdb to use the event loop as the default command loop and we merge\n    event-top.c into this file, top.c.  */\n \n-/* static */ int history_expansion_p;\n+/* static */ bool history_expansion_p;\n \n-static int write_history_p;\n+static bool write_history_p;\n static void\n show_write_history_p (struct ui_file *file, int from_tty,\n \t\t      struct cmd_list_element *c, const char *value)\n@@ -1876,7 +1876,7 @@ show_history (const char *args, int from_tty)\n   cmd_show_list (showhistlist, from_tty, \"\");\n }\n \n-int info_verbose = 0;\t\t/* Default verbose msgs off.  */\n+bool info_verbose = false;\t/* Default verbose msgs off.  */\n \n /* Called by do_set_command.  An elaborate joke.  */\n void"
    },
    {
      "sha": "176104f1fd15efb9e9fb61a3daf20dddb5979f7e",
      "filename": "gdb/top.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/top.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/top.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -217,7 +217,7 @@ extern void ui_register_input_event_handler (struct ui *ui);\n extern void ui_unregister_input_event_handler (struct ui *ui);\n \n /* From top.c.  */\n-extern int confirm;\n+extern bool confirm;\n extern int inhibit_gdbinit;\n \n /* Print the GDB version banner to STREAM.  If INTERACTIVE is false,\n@@ -280,7 +280,7 @@ extern void gdb_init (char *);\n /* Variables from top.c.  */\n extern int source_line_number;\n extern std::string source_file_name;\n-extern int history_expansion_p;\n+extern bool history_expansion_p;\n extern int server_command;\n extern char *lim_at_start;\n "
    },
    {
      "sha": "c2c5f4224622b3c141c819b0d26432309acd3bd3",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -131,12 +131,12 @@ static struct cmd_list_element *tfindlist;\n /* List of expressions to collect by default at each tracepoint hit.  */\n char *default_collect;\n \n-static int disconnected_tracing;\n+static bool disconnected_tracing;\n \n /* This variable controls whether we ask the target for a linear or\n    circular trace buffer.  */\n \n-static int circular_trace_buffer;\n+static bool circular_trace_buffer;\n \n /* This variable is the requested trace buffer size, or -1 to indicate\n    that we don't care and leave it up to the target to set a size.  */"
    },
    {
      "sha": "41d95c2afb23dcb804f21e5b271e20184f74879b",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -727,7 +727,7 @@ show_print_type (const char *args, int from_tty)\n   cmd_show_list (showprinttypelist, from_tty, \"\");\n }\n \n-static int print_methods = 1;\n+static bool print_methods = true;\n \n static void\n set_print_type_methods (const char *args,\n@@ -744,7 +744,7 @@ show_print_type_methods (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-static int print_typedefs = 1;\n+static bool print_typedefs = true;\n \n static void\n set_print_type_typedefs (const char *args,"
    },
    {
      "sha": "b2535ebefd3805c27ebcc41b94d2a0cdc0eaeab1",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -99,13 +99,13 @@ static std::chrono::steady_clock::duration prompt_for_continue_wait_time;\n \n /* A flag indicating whether to timestamp debugging messages.  */\n \n-static int debug_timestamp = 0;\n+static bool debug_timestamp = false;\n \n-/* Nonzero means that strings with character values >0x7F should be printed\n-   as octal escapes.  Zero means just print the value (e.g. it's an\n+/* True means that strings with character values >0x7F should be printed\n+   as octal escapes.  False means just print the value (e.g. it's an\n    international character, and the terminal or window can cope.)  */\n \n-int sevenbit_strings = 0;\n+bool sevenbit_strings = false;\n static void\n show_sevenbit_strings (struct ui_file *file, int from_tty,\n \t\t       struct cmd_list_element *c, const char *value)\n@@ -119,7 +119,7 @@ show_sevenbit_strings (struct ui_file *file, int from_tty,\n \n const char *warning_pre_print = \"\\nwarning: \";\n \n-int pagination_enabled = 1;\n+bool pagination_enabled = true;\n static void\n show_pagination_enabled (struct ui_file *file, int from_tty,\n \t\t\t struct cmd_list_element *c, const char *value)"
    },
    {
      "sha": "7cdc73ef54f3d3150b5cdbf4ac70efcedaa27047",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -32,7 +32,7 @@ extern void initialize_utils (void);\n \n /* String utilities.  */\n \n-extern int sevenbit_strings;\n+extern bool sevenbit_strings;\n \n /* Modes of operation for strncmp_iw_with_mode.  */\n \n@@ -316,7 +316,7 @@ extern void wrap_here (const char *);\n \n extern void reinitialize_more_filter (void);\n \n-extern int pagination_enabled;\n+extern bool pagination_enabled;\n \n extern struct ui_file **current_ui_gdb_stdout_ptr (void);\n extern struct ui_file **current_ui_gdb_stdin_ptr (void);"
    },
    {
      "sha": "fc7a4c5918d977dccddee01f8a435bda6ddf8cee",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -97,7 +97,7 @@ static CORE_ADDR allocate_space_in_inferior (int);\n \n static struct value *cast_into_complex (struct type *, struct value *);\n \n-int overload_resolution = 0;\n+bool overload_resolution = false;\n static void\n show_overload_resolution (struct ui_file *file, int from_tty,\n \t\t\t  struct cmd_list_element *c, "
    },
    {
      "sha": "6d57554594c2a022eda2477a4ec17253511f7daa",
      "filename": "gdb/valprint.h",
      "status": "modified",
      "additions": 22,
      "deletions": 22,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/valprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/valprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.h?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -30,23 +30,23 @@ struct value_print_options\n   enum val_prettyformat prettyformat;\n \n   /* Controls pretty formatting of arrays.  */\n-  int prettyformat_arrays;\n+  bool prettyformat_arrays;\n \n   /* Controls pretty formatting of structures.  */\n-  int prettyformat_structs;\n+  bool prettyformat_structs;\n \n   /* Controls printing of virtual tables.  */\n-  int vtblprint;\n+  bool vtblprint;\n \n   /* Controls printing of nested unions.  */\n-  int unionprint;\n+  bool unionprint;\n \n   /* Controls printing of addresses.  */\n-  int addressprint;\n+  bool addressprint;\n \n   /* Controls looking up an object's derived type using what we find\n      in its vtables.  */\n-  int objectprint;\n+  bool objectprint;\n \n   /* Maximum number of chars to print for a string pointer value or vector\n      contents, or UINT_MAX for no limit.  Note that \"set print elements 0\"\n@@ -66,40 +66,40 @@ struct value_print_options\n   int format;\n \n   /* Stop printing at null character?  */\n-  int stop_print_at_null;\n+  bool stop_print_at_null;\n \n   /* True if we should print the index of each element when printing\n      an array.  */\n-  int print_array_indexes;\n+  bool print_array_indexes;\n \n-  /* If nonzero, then dereference references, otherwise just print\n+  /* If true, then dereference references, otherwise just print\n      them like pointers.  */\n-  int deref_ref;\n+  bool deref_ref;\n \n-  /* If nonzero, print static fields.  */\n-  int static_field_print;\n+  /* If true, print static fields.  */\n+  bool static_field_print;\n \n-  /* If nonzero, print static fields for Pascal.  FIXME: C++ has a\n+  /* If true, print static fields for Pascal.  FIXME: C++ has a\n      flag, why not share with Pascal too?  */\n-  int pascal_static_field_print;\n+  bool pascal_static_field_print;\n \n-  /* If non-zero don't do Python pretty-printing.  */\n-  int raw;\n+  /* If true, don't do Python pretty-printing.  */\n+  bool raw;\n \n-  /* If nonzero, print the value in \"summary\" form.\n-     If raw and summary are both non-zero, don't print non-scalar values\n+  /* If true, print the value in \"summary\" form.\n+     If raw and summary are both true, don't print non-scalar values\n      (\"...\" is printed instead).  */\n-  int summary;\n+  bool summary;\n \n-  /* If nonzero, when printing a pointer, print the symbol to which it\n+  /* If true, when printing a pointer, print the symbol to which it\n      points, if any.  */\n-  int symbol_print;\n+  bool symbol_print;\n \n   /* Maximum print depth when printing nested aggregates.  */\n   int max_depth;\n \n   /* Whether \"finish\" should print the value.  */\n-  int finish_print;\n+  bool finish_print;\n };\n \n /* Create an option_def_group for the value_print options, with OPTS"
    },
    {
      "sha": "c4fde913af33bae7affd26a6ecc16362a02f8a1a",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -245,16 +245,16 @@ static int saw_create;\n static int open_process_used = 0;\n \n /* User options.  */\n-static int new_console = 0;\n+static bool new_console = false;\n #ifdef __CYGWIN__\n-static int cygwin_exceptions = 0;\n+static bool cygwin_exceptions = false;\n #endif\n-static int new_group = 1;\n-static int debug_exec = 0;\t\t/* show execution */\n-static int debug_events = 0;\t\t/* show events from kernel */\n-static int debug_memory = 0;\t\t/* show target memory accesses */\n-static int debug_exceptions = 0;\t/* show target exceptions */\n-static int useshell = 0;\t\t/* use shell for subprocesses */\n+static bool new_group = true;\n+static bool debug_exec = false;\t\t/* show execution */\n+static bool debug_events = false;\t/* show events from kernel */\n+static bool debug_memory = false;\t/* show target memory accesses */\n+static bool debug_exceptions = false;\t/* show target exceptions */\n+static bool useshell = false;\t\t/* use shell for subprocesses */\n \n /* This vector maps GDB's idea of a register's number into an offset\n    in the windows exception context vector."
    },
    {
      "sha": "bb69a79996ac8ad798d48190fbacc61a79cb556a",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -100,7 +100,7 @@ static const int MAX_TIB64 =\n   sizeof (thread_information_64) / sizeof (uint64_t);\n static const int FULL_TIB_SIZE = 0x1000;\n \n-static int maint_display_all_tib = 0;\n+static bool maint_display_all_tib = false;\n \n /* Define Thread Local Base pointer type.  */\n "
    },
    {
      "sha": "eaf99efa6b972047231c36c2372d4231e4e7bb66",
      "filename": "gdb/xml-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/491144b5e21bbfd41969c175aebb663976f59058/gdb/xml-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/491144b5e21bbfd41969c175aebb663976f59058/gdb/xml-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.c?ref=491144b5e21bbfd41969c175aebb663976f59058",
      "patch": "@@ -26,7 +26,7 @@\n #include <string>\n \n /* Debugging flag.  */\n-static int debug_xml;\n+static bool debug_xml;\n \n /* The contents of this file are only useful if XML support is\n    available.  */"
    }
  ]
}