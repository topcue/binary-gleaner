{
  "sha": "d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDVhYjEyMmM0OGZlYzFlYjYxNzU5OGMwMmM2ZWZkZjliYTFlZTIzZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:14Z"
    },
    "message": "Introduce scope_operation\n\nThis adds class scope_operation, an implementation of OP_SCOPE.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class scope_operation): New.\n\t* eval.c (eval_op_scope): No longer static.\n\t(scope_operation::evaluate_for_address): New method.\n\t* ax-gdb.c (scope_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "0dd3301e5acbc2e0fe2b8c27d9d7306aba9234b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0dd3301e5acbc2e0fe2b8c27d9d7306aba9234b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cae26a0cb05be806ae97d4fabc1cb8e6773a1512",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cae26a0cb05be806ae97d4fabc1cb8e6773a1512",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cae26a0cb05be806ae97d4fabc1cb8e6773a1512"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 69,
    "deletions": 1
  },
  "files": [
    {
      "sha": "bfc191f16199a14dbea0c531095d8d35a455af7f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class scope_operation): New.\n+\t* eval.c (eval_op_scope): No longer static.\n+\t(scope_operation::evaluate_for_address): New method.\n+\t* ax-gdb.c (scope_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expprint.c (float_const_operation::dump): New method."
    },
    {
      "sha": "6d568a71e030bdda56abd6a4fee637dacfef8259",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
      "patch": "@@ -2301,6 +2301,19 @@ operation::generate_ax (struct expression *exp,\n     }\n }\n \n+void\n+scope_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t struct agent_expr *ax,\n+\t\t\t\t struct axs_value *value,\n+\t\t\t\t struct type *cast_type)\n+{\n+  struct type *type = std::get<0> (m_storage);\n+  const std::string &name = std::get<1> (m_storage);\n+  int found = gen_aggregate_elt_ref (ax, value, type, name.c_str ());\n+  if (!found)\n+    error (_(\"There is no field named %s\"), name.c_str ());\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "452f088a515987f19daa2a0812191d9cf26d0a15",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
      "patch": "@@ -1185,7 +1185,7 @@ is_integral_or_integral_reference (struct type *type)\n \n /* Helper function that implements the body of OP_SCOPE.  */\n \n-static struct value *\n+struct value *\n eval_op_scope (struct type *expect_type, struct expression *exp,\n \t       enum noside noside,\n \t       struct type *type, const char *string)\n@@ -3289,6 +3289,18 @@ operation::evaluate_for_address (struct expression *exp, enum noside noside)\n   return evaluate_subexp_for_address_base (exp, noside, val);\n }\n \n+value *\n+scope_operation::evaluate_for_address (struct expression *exp,\n+\t\t\t\t       enum noside noside)\n+{\n+  value *x = value_aggregate_elt (std::get<0> (m_storage),\n+\t\t\t\t  std::get<1> (m_storage).c_str (),\n+\t\t\t\t  NULL, 1, noside);\n+  if (x == NULL)\n+    error (_(\"There is no field named %s\"), std::get<1> (m_storage).c_str ());\n+  return x;\n+}\n+\n }\n \n /* Evaluate like `evaluate_subexp' except coercing arrays to pointers."
    },
    {
      "sha": "cd1a16172b8c9e1c6a62b1e0be222a3a224f2a26",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d5ab122c48fec1eb617598c02c6efdf9ba1ee23f/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=d5ab122c48fec1eb617598c02c6efdf9ba1ee23f",
      "patch": "@@ -41,6 +41,11 @@ extern void gen_expr_structop (struct expression *exp,\n \t\t\t       const char *name,\n \t\t\t       struct agent_expr *ax, struct axs_value *value);\n \n+extern struct value *eval_op_scope (struct type *expect_type,\n+\t\t\t\t    struct expression *exp,\n+\t\t\t\t    enum noside noside,\n+\t\t\t\t    struct type *type, const char *string);\n+\n namespace expr\n {\n \n@@ -415,6 +420,37 @@ class float_const_operation\n   float_data m_data;\n };\n \n+class scope_operation\n+  : public maybe_constant_operation<struct type *, std::string>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    return eval_op_scope (expect_type, exp, noside,\n+\t\t\t  std::get<0> (m_storage),\n+\t\t\t  std::get<1> (m_storage).c_str ());\n+  }\n+\n+  value *evaluate_for_address (struct expression *exp,\n+\t\t\t       enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_SCOPE; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}