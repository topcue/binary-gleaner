{
  "sha": "5bc113360ccc33797a3f882e02824a5c426da175",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWJjMTEzMzYwY2NjMzM3OTdhM2Y4ODJlMDI4MjRhNWM0MjZkYTE3NQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-16T06:17:02Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-16T08:09:28Z"
    },
    "message": "Move fixup fx_bit_fixP and fx_im_disp fields to TC_FIX_TYPE\n\nThese are only used by dlx and ns32k.\n\n\t* write.h: Don't include bit_fix.h.\n\t(struct fix): Rearrange some fields.  Delete fx_im_disp and\n\tfx_bit_fixP.  Use bitfields for fx_size and fx_pcrel_adjust.\n\t* write.c (fix_new_internal): Don't init fx_im_disp and fx_bit_fixP.\n\t(fixup_segment): Don't exclude overflow checks on fx_bit_fixP.\n\t(print_fixup): Don't print im_disp.\n\t* config/tc-cris.c (md_apply_fix): Remove tests of fx_bit_fixP\n\tand fx_im_disp.\n\t* config/tc-dlx.c (md_apply_fix): Remove wrong debug code.  Set\n\tfx_no_overflow when fx_bit_fixP.\n\t* config/tc-dlx.h: Include bit_fix.h.\n\t(TC_FIX_TYPE, tc_fix_data, TC_INIT_FIX_DATA): Define.\n\t* config/tc-ns32k.c (fix_new_ns32k, fix_new_ns32k_exp): Set\n\tfx_no_overflow when bit_fixP.\n\t* config/tc-ns32k.h (TC_FIX_TYPE): Add fx_bit_fixP and fx_im_disp.\n\t(fix_im_disp, fix_bit_fixP): Adjust to suit.\n\t(TC_INIT_FIX_DATA, TC_FIX_DATA_PRINT): Likewise.",
    "tree": {
      "sha": "601325a80476ae04c4e93d1a61c3e3359694b9f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/601325a80476ae04c4e93d1a61c3e3359694b9f8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5bc113360ccc33797a3f882e02824a5c426da175",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bc113360ccc33797a3f882e02824a5c426da175",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5bc113360ccc33797a3f882e02824a5c426da175",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bc113360ccc33797a3f882e02824a5c426da175/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 66,
    "deletions": 68
  },
  "files": [
    {
      "sha": "d74071bf12f5c11cac3acd49b9253d5bff171610",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -1,3 +1,23 @@\n+2019-04-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* write.h: Don't include bit_fix.h.\n+\t(struct fix): Rearrange some fields.  Delete fx_im_disp and\n+\tfx_bit_fixP.  Use bitfields for fx_size and fx_pcrel_adjust.\n+\t* write.c (fix_new_internal): Don't init fx_im_disp and fx_bit_fixP.\n+\t(fixup_segment): Don't exclude overflow checks on fx_bit_fixP.\n+\t(print_fixup): Don't print im_disp.\n+\t* config/tc-cris.c (md_apply_fix): Remove tests of fx_bit_fixP\n+\tand fx_im_disp.\n+\t* config/tc-dlx.c (md_apply_fix): Remove wrong debug code.  Set\n+\tfx_no_overflow when fx_bit_fixP.\n+\t* config/tc-dlx.h: Include bit_fix.h.\n+\t(TC_FIX_TYPE, tc_fix_data, TC_INIT_FIX_DATA): Define.\n+\t* config/tc-ns32k.c (fix_new_ns32k, fix_new_ns32k_exp): Set\n+\tfx_no_overflow when bit_fixP.\n+\t* config/tc-ns32k.h (TC_FIX_TYPE): Add fx_bit_fixP and fx_im_disp.\n+\t(fix_im_disp, fix_bit_fixP): Adjust to suit.\n+\t(TC_INIT_FIX_DATA, TC_FIX_DATA_PRINT): Likewise.\n+\n 2019-04-16  Alan Modra  <amodra@gmail.com>\n \n \t* write.h (struct fix <fx_where>): Make unsigned."
    },
    {
      "sha": "198a2d71c9e7b88d6e26ddadd3f7c16f7eba0efd",
      "filename": "gas/config/tc-cris.c",
      "status": "modified",
      "additions": 8,
      "deletions": 16,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-cris.c?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -4054,23 +4054,15 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n   if (fixP->fx_addsy == 0 && !fixP->fx_pcrel)\n     fixP->fx_done = 1;\n \n-  if (fixP->fx_bit_fixP || fixP->fx_im_disp != 0)\n-    {\n-      as_bad_where (fixP->fx_file, fixP->fx_line, _(\"Invalid relocation\"));\n-      fixP->fx_done = 1;\n-    }\n-  else\n-    {\n-      /* We can't actually support subtracting a symbol.  */\n-      if (fixP->fx_subsy != (symbolS *) NULL)\n-\tas_bad_where (fixP->fx_file, fixP->fx_line,\n-\t\t      _(\"expression too complex\"));\n+  /* We can't actually support subtracting a symbol.  */\n+  if (fixP->fx_subsy != (symbolS *) NULL)\n+    as_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t  _(\"expression too complex\"));\n \n-      /* This operand-type is scaled.  */\n-      if (fixP->fx_r_type == BFD_RELOC_CRIS_LAPCQ_OFFSET)\n-\tval /= 2;\n-      cris_number_to_imm (buf, val, fixP->fx_size, fixP, seg);\n-    }\n+  /* This operand-type is scaled.  */\n+  if (fixP->fx_r_type == BFD_RELOC_CRIS_LAPCQ_OFFSET)\n+    val /= 2;\n+  cris_number_to_imm (buf, val, fixP->fx_size, fixP, seg);\n }\n \n /* All relocations are relative to the location just after the fixup;"
    },
    {
      "sha": "0b0fe2f1502fa6196a4d8a2d0e22e470ae479bdb",
      "filename": "gas/config/tc-dlx.c",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-dlx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-dlx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-dlx.c?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -1014,10 +1014,6 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  free (fixP->fx_bit_fixP);\n \t  fixP->fx_bit_fixP = NULL;\n \t}\n-#ifdef DEBUG\n-      else\n-\tknow ((fixP->fx_bit_fixP != NULL));\n-#endif\n       break;\n \n     case RELOC_DLX_HI16:\n@@ -1027,10 +1023,6 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  free (fixP->fx_bit_fixP);\n \t  fixP->fx_bit_fixP = NULL;\n \t}\n-#ifdef DEBUG\n-      else\n-\tknow ((fixP->fx_bit_fixP != NULL));\n-#endif\n       break;\n \n     case RELOC_DLX_REL26:\n@@ -1040,10 +1032,6 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  free (fixP->fx_bit_fixP);\n \t  fixP->fx_bit_fixP = NULL;\n \t}\n-#ifdef DEBUG\n-      else\n-\tknow ((fixP->fx_bit_fixP != NULL));\n-#endif\n       break;\n \n     case BFD_RELOC_VTABLE_INHERIT:\n@@ -1066,6 +1054,8 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n   number_to_chars_bigendian (place, val, fixP->fx_size);\n   if (fixP->fx_addsy == NULL)\n     fixP->fx_done = 1;\n+  if (fixP->fx_bit_fixP != NULL)\n+    fixP->fx_no_overflow = 1;\n }\n \n const char *md_shortopts = \"\";"
    },
    {
      "sha": "03659345d9660b834d6ee81b97a7909124010661",
      "filename": "gas/config/tc-dlx.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-dlx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-dlx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-dlx.h?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -31,6 +31,12 @@\n \n #define LEX_DOLLAR 1\n \n+#include \"bit_fix.h\"\n+\n+#define TC_FIX_TYPE bit_fixS *\n+#define tc_fix_data fx_bit_fixP\n+#define TC_INIT_FIX_DATA(FIX) do (FIX)->fx_bit_fixP = NULL; while (0)\n+\n extern void dlx_pop_insert         (void);\n extern int dlx_unrecognized_line   (int);\n extern bfd_boolean md_dlx_fix_adjustable  (struct fix *);"
    },
    {
      "sha": "75cdabae8857a4d2fa2dfa5155cd0a7e172f3b2c",
      "filename": "gas/config/tc-ns32k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-ns32k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-ns32k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ns32k.c?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -1331,7 +1331,7 @@ fix_new_ns32k (fragS *frag,\t\t/* Which frag? */\n   fix_bsr (fixP) = bsr;\n   fix_bit_fixP (fixP) = bit_fixP;\n   /* We have a MD overflow check for displacements.  */\n-  fixP->fx_no_overflow = (im_disp != 0);\n+  fixP->fx_no_overflow = im_disp != 0 || bit_fixP != NULL;\n }\n \n static void\n@@ -1359,7 +1359,7 @@ fix_new_ns32k_exp (fragS *frag,\t\t/* Which frag? */\n   fix_bsr (fixP) = bsr;\n   fix_bit_fixP (fixP) = bit_fixP;\n   /* We have a MD overflow check for displacements.  */\n-  fixP->fx_no_overflow = (im_disp != 0);\n+  fixP->fx_no_overflow = im_disp != 0 || bit_fixP != NULL;\n }\n \n /* Convert number to chars in correct order.  */"
    },
    {
      "sha": "d905f663845945a0a3749ea0f4bcb91c5c25ee3c",
      "filename": "gas/config/tc-ns32k.h",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-ns32k.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/config/tc-ns32k.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ns32k.h?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -91,14 +91,16 @@ extern const struct relax_type md_relax_table[];\n   struct\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       fragS *      opcode_fragP;\t\t\\\n+      bit_fixS *   fx_bit_fixP;\t\t\t\\\n       unsigned int opcode_offset;\t\t\\\n       unsigned int bsr : 1;\t\t\t\\\n+      unsigned int fx_im_disp : 2;\t\t\\\n     }\n \n /* Accessor macros for things which may move around.\n    See comments in write.h.  */\n-#define fix_im_disp(X)       (X)->fx_im_disp\n-#define fix_bit_fixP(X)      (X)->fx_bit_fixP\n+#define fix_im_disp(X)       (X)->tc_fix_data.fx_im_disp\n+#define fix_bit_fixP(X)      (X)->tc_fix_data.fx_bit_fixP\n #define fix_opcode_frag(X)   (X)->tc_fix_data.opcode_fragP\n #define fix_opcode_offset(X) (X)->tc_fix_data.opcode_offset\n #define fix_bsr(X)           (X)->tc_fix_data.bsr\n@@ -108,16 +110,20 @@ extern const struct relax_type md_relax_table[];\n      {\t\t\t\t\t\t\\\n        fix_opcode_frag(X) = NULL;\t\t\\\n        fix_opcode_offset(X) = 0;\t\t\\\n+       fix_bit_fixP(X) = NULL;\t\t\t\\\n        fix_bsr(X) = 0;\t\t\t\t\\\n+       fix_im_disp(X) = 0;\t\t\t\\\n      }\t\t\t\t\t\t\\\n   while (0)\n \n #define TC_FIX_DATA_PRINT(FILE, FIX)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"opcode_frag=%ld, operand offset=%d, bsr=%d\\n\",\t\\\n-\t      (unsigned long) fix_opcode_frag (FIX),\t\t\t\\\n-\t      fix_opcode_offset (FIX),\t\t\t\t\t\\\n-\t      fix_bsr (FIX));\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"opcode_frag=%ld, operand offset=%d, bsr=%d, \"\t\\\n+\t       \"im_disp=%d\\n\",\t\t\t\t\t\t\\\n+\t       (unsigned long) fix_opcode_frag (FIX),\t\t\t\\\n+\t       fix_opcode_offset (FIX),\t\t\t\t\t\\\n+\t       fix_bsr (FIX),\t\t\t\t\t\t\\\n+\t       fix_im_disp (FIX));\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"
    },
    {
      "sha": "050fbe8da62e7e14ebf390fde333f9b3b8df394b",
      "filename": "gas/write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.c?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -174,9 +174,7 @@ fix_new_internal (fragS *frag,\t\t/* Which frag?  */\n   fixP->fx_dot_frag = dot_frag;\n   fixP->fx_pcrel = pcrel;\n   fixP->fx_r_type = r_type;\n-  fixP->fx_im_disp = 0;\n   fixP->fx_pcrel_adjust = 0;\n-  fixP->fx_bit_fixP = 0;\n   fixP->fx_addnumber = 0;\n   fixP->fx_tcbit = 0;\n   fixP->fx_tcbit2 = 0;\n@@ -1093,7 +1091,7 @@ fixup_segment (fixS *fixP, segT this_segment)\n \t    symbol_mark_used_in_reloc (fixP->fx_subsy);\n \t}\n \n-      if (!fixP->fx_bit_fixP && !fixP->fx_no_overflow && fixP->fx_size != 0)\n+      if (!fixP->fx_no_overflow && fixP->fx_size != 0)\n \t{\n \t  if (fixP->fx_size < sizeof (valueT))\n \t    {\n@@ -1131,7 +1129,7 @@ fixup_segment (fixS *fixP, segT this_segment)\n \t\t\t  (long) add_number,\n \t\t\t  (long) (fragP->fr_address + fixP->fx_where));\n #endif\n-\t}\t\t\t/* Not a bit fix.  */\n+\t}\n \n #ifdef TC_VALIDATE_FIX\n     skip:  ATTRIBUTE_UNUSED_LABEL\n@@ -3142,14 +3140,6 @@ print_fixup (fixS *fixp)\n     fprintf (stderr, \" pcrel\");\n   if (fixp->fx_pcrel_adjust)\n     fprintf (stderr, \" pcrel_adjust=%d\", fixp->fx_pcrel_adjust);\n-  if (fixp->fx_im_disp)\n-    {\n-#ifdef TC_NS32K\n-      fprintf (stderr, \" im_disp=%d\", fixp->fx_im_disp);\n-#else\n-      fprintf (stderr, \" im_disp\");\n-#endif\n-    }\n   if (fixp->fx_tcbit)\n     fprintf (stderr, \" tcbit\");\n   if (fixp->fx_done)"
    },
    {
      "sha": "96ad791d228cf475e58fa8d66dff6c75011277d8",
      "filename": "gas/write.h",
      "status": "modified",
      "additions": 14,
      "deletions": 20,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bc113360ccc33797a3f882e02824a5c426da175/gas/write.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bc113360ccc33797a3f882e02824a5c426da175/gas/write.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.h?ref=5bc113360ccc33797a3f882e02824a5c426da175",
      "patch": "@@ -40,28 +40,21 @@\n #define FAKE_LABEL_CHAR '\\001'\n #endif\n \n-#include \"bit_fix.h\"\n-\n /*\n  * FixSs may be built up in any order.\n  */\n \n struct fix\n {\n+  /* Next fixS in linked list, or NULL.  */\n+  struct fix *fx_next;\n+\n   /* These small fields are grouped together for compactness of\n      this structure, and efficiency of access on some architectures.  */\n \n   /* Is this a pc-relative relocation?  */\n   unsigned fx_pcrel : 1;\n \n-  /* Is this value an immediate displacement?  */\n-  /* Only used on ns32k; merge it into TC_FIX_TYPE sometime.  */\n-  unsigned fx_im_disp : 2;\n-\n-  /* Some bits for the CPU specific code.  */\n-  unsigned fx_tcbit : 1;\n-  unsigned fx_tcbit2 : 1;\n-\n   /* Has this relocation already been applied?  */\n   unsigned fx_done : 1;\n \n@@ -75,11 +68,20 @@ struct fix\n   /* The value is signed when checking for overflow.  */\n   unsigned fx_signed : 1;\n \n+  /* Some bits for the CPU specific code.  */\n+  unsigned fx_tcbit : 1;\n+  unsigned fx_tcbit2 : 1;\n+\n+  /* Spare bits.  */\n+  unsigned fx_unused : 10;\n+\n   /* pc-relative offset adjust (only used by some CPU specific code) */\n-  signed char fx_pcrel_adjust;\n+  int fx_pcrel_adjust : 8;\n \n   /* How many bytes are involved? */\n-  unsigned char fx_size;\n+  unsigned fx_size : 8;\n+\n+  bfd_reloc_code_real_type fx_r_type;\n \n   /* Which frag does this fix apply to?  */\n   fragS *fx_frag;\n@@ -102,14 +104,6 @@ struct fix\n   /* The frag fx_dot_value is based on.  */\n   fragS *fx_dot_frag;\n \n-  /* Next fixS in linked list, or NULL.  */\n-  struct fix *fx_next;\n-\n-  /* If NULL, no bitfix's to do.  */\n-  bit_fixS *fx_bit_fixP;\n-\n-  bfd_reloc_code_real_type fx_r_type;\n-\n   /* This field is sort of misnamed.  It appears to be a sort of random\n      scratch field, for use by the back ends.  The main gas code doesn't\n      do anything but initialize it to zero.  The use of it does need to"
    }
  ]
}