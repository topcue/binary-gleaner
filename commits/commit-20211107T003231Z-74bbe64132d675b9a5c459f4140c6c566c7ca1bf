{
  "sha": "74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
  "node_id": "C_kwDOANOeidoAKDc0YmJlNjQxMzJkNjc1YjlhNWM0NTlmNDE0MGM2YzU2NmM3Y2ExYmY",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-06T16:44:56Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-07T00:32:31Z"
    },
    "message": "sim: sh: rework register layout with anonymous unions & structs\n\nNow that we require C11, we can leverage anonymous unions & structs\nto fix a long standing issue with the SH register layout.  The use\nof sregs.i for sh-dsp has generated a lot of compiler warnings about\nthe access being out of bounds -- it only has 7 elements declared,\nbut code goes beyond that to reach into the fregs that follow.  But\nnow that we have anonymous unions, we can reduce the nested names\nand have sregs cover all of these registers.",
    "tree": {
      "sha": "a1be45e9a9bc2ff74d2c2e72a57ac5459f9e2535",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1be45e9a9bc2ff74d2c2e72a57ac5459f9e2535"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eea68ebb33f5a221d9ac8335ddff68d07246720a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eea68ebb33f5a221d9ac8335ddff68d07246720a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eea68ebb33f5a221d9ac8335ddff68d07246720a"
    }
  ],
  "stats": {
    "total": 172,
    "additions": 82,
    "deletions": 90
  },
  "files": [
    {
      "sha": "c922cfe43b96e85b9ddec0b4e08b698ab281b236",
      "filename": "sim/sh/gencode.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/sim/sh/gencode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/sim/sh/gencode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/sh/gencode.c?ref=74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
      "patch": "@@ -354,7 +354,7 @@ static op tab[] =\n \n   /* sh4a */\n   { \"\", \"\", \"clrdmxy\", \"0000000010001000\",\n-    \"saved_state.asregs.cregs.named.sr &= ~(SR_MASK_DMX | SR_MASK_DMY);\"\n+    \"saved_state.asregs.sr &= ~(SR_MASK_DMX | SR_MASK_DMY);\"\n   },\n \n   { \"\", \"0\", \"cmp/eq #<imm>,R0\", \"10001000i8*1....\",\n@@ -1342,14 +1342,14 @@ static op tab[] =\n \n   /* sh4a */\n   { \"\", \"\", \"setdmx\", \"0000000010011000\",\n-    \"saved_state.asregs.cregs.named.sr |=  SR_MASK_DMX;\"\n-    \"saved_state.asregs.cregs.named.sr &= ~SR_MASK_DMY;\"\n+    \"saved_state.asregs.sr |=  SR_MASK_DMX;\"\n+    \"saved_state.asregs.sr &= ~SR_MASK_DMY;\"\n   },\n \n   /* sh4a */\n   { \"\", \"\", \"setdmy\", \"0000000011001000\",\n-    \"saved_state.asregs.cregs.named.sr |=  SR_MASK_DMY;\"\n-    \"saved_state.asregs.cregs.named.sr &= ~SR_MASK_DMX;\"\n+    \"saved_state.asregs.sr |=  SR_MASK_DMY;\"\n+    \"saved_state.asregs.sr &= ~SR_MASK_DMX;\"\n   },\n \n   /* sh-dsp */"
    },
    {
      "sha": "4cac8de89d53a7821c8a4fd43ad99de9721fe8de",
      "filename": "sim/sh/interp.c",
      "status": "modified",
      "additions": 54,
      "deletions": 54,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/sim/sh/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/sim/sh/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/sh/interp.c?ref=74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
      "patch": "@@ -120,23 +120,23 @@ static int maskl = 0;\n #define UR \t(unsigned int) R\n #define UR \t(unsigned int) R\n #define SR0 \tsaved_state.asregs.regs[0]\n-#define CREG(n)\t(saved_state.asregs.cregs.i[(n)])\n-#define GBR \tsaved_state.asregs.cregs.named.gbr\n-#define VBR \tsaved_state.asregs.cregs.named.vbr\n-#define DBR \tsaved_state.asregs.cregs.named.dbr\n-#define TBR \tsaved_state.asregs.cregs.named.tbr\n-#define IBCR\tsaved_state.asregs.cregs.named.ibcr\n-#define IBNR\tsaved_state.asregs.cregs.named.ibnr\n-#define BANKN\t(saved_state.asregs.cregs.named.ibnr & 0x1ff)\n-#define ME\t((saved_state.asregs.cregs.named.ibnr >> 14) & 0x3)\n-#define SSR\tsaved_state.asregs.cregs.named.ssr\n-#define SPC\tsaved_state.asregs.cregs.named.spc\n-#define SGR \tsaved_state.asregs.cregs.named.sgr\n-#define SREG(n)\t(saved_state.asregs.sregs.i[(n)])\n-#define MACH \tsaved_state.asregs.sregs.named.mach\n-#define MACL \tsaved_state.asregs.sregs.named.macl\n-#define PR\tsaved_state.asregs.sregs.named.pr\n-#define FPUL\tsaved_state.asregs.sregs.named.fpul\n+#define CREG(n)\t(saved_state.asregs.cregs[(n)])\n+#define GBR \tsaved_state.asregs.gbr\n+#define VBR \tsaved_state.asregs.vbr\n+#define DBR \tsaved_state.asregs.dbr\n+#define TBR \tsaved_state.asregs.tbr\n+#define IBCR\tsaved_state.asregs.ibcr\n+#define IBNR\tsaved_state.asregs.ibnr\n+#define BANKN\t(saved_state.asregs.ibnr & 0x1ff)\n+#define ME\t((saved_state.asregs.ibnr >> 14) & 0x3)\n+#define SSR\tsaved_state.asregs.ssr\n+#define SPC\tsaved_state.asregs.spc\n+#define SGR \tsaved_state.asregs.sgr\n+#define SREG(n)\t(saved_state.asregs.sregs[(n)])\n+#define MACH \tsaved_state.asregs.mach\n+#define MACL \tsaved_state.asregs.macl\n+#define PR\tsaved_state.asregs.pr\n+#define FPUL\tsaved_state.asregs.fpul\n \n #define PC insn_ptr\n \n@@ -145,8 +145,8 @@ static int maskl = 0;\n /* Alternate bank of registers r0-r7 */\n \n /* Note: code controling SR handles flips between BANK0 and BANK1 */\n-#define Rn_BANK(n) (saved_state.asregs.cregs.named.bank[(n)])\n-#define SET_Rn_BANK(n, EXP) do { saved_state.asregs.cregs.named.bank[(n)] = (EXP); } while (0)\n+#define Rn_BANK(n) (saved_state.asregs.bank[(n)])\n+#define SET_Rn_BANK(n, EXP) do { saved_state.asregs.bank[(n)] = (EXP); } while (0)\n \n \n /* Manipulate SR */\n@@ -167,28 +167,28 @@ static int maskl = 0;\n #define SR_MASK_RC 0x0fff0000\n #define SR_RC_INCREMENT -0x00010000\n \n-#define BO\t((saved_state.asregs.cregs.named.sr & SR_MASK_BO) != 0)\n-#define CS\t((saved_state.asregs.cregs.named.sr & SR_MASK_CS) != 0)\n-#define M \t((saved_state.asregs.cregs.named.sr & SR_MASK_M) != 0)\n-#define Q \t((saved_state.asregs.cregs.named.sr & SR_MASK_Q) != 0)\n-#define S \t((saved_state.asregs.cregs.named.sr & SR_MASK_S) != 0)\n-#define T \t((saved_state.asregs.cregs.named.sr & SR_MASK_T) != 0)\n-#define LDST\t((saved_state.asregs.cregs.named.ldst) != 0)\n-\n-#define SR_BL ((saved_state.asregs.cregs.named.sr & SR_MASK_BL) != 0)\n-#define SR_RB ((saved_state.asregs.cregs.named.sr & SR_MASK_RB) != 0)\n-#define SR_MD ((saved_state.asregs.cregs.named.sr & SR_MASK_MD) != 0)\n-#define SR_DMY ((saved_state.asregs.cregs.named.sr & SR_MASK_DMY) != 0)\n-#define SR_DMX ((saved_state.asregs.cregs.named.sr & SR_MASK_DMX) != 0)\n-#define SR_RC ((saved_state.asregs.cregs.named.sr & SR_MASK_RC))\n+#define BO\t((saved_state.asregs.sr & SR_MASK_BO) != 0)\n+#define CS\t((saved_state.asregs.sr & SR_MASK_CS) != 0)\n+#define M \t((saved_state.asregs.sr & SR_MASK_M) != 0)\n+#define Q \t((saved_state.asregs.sr & SR_MASK_Q) != 0)\n+#define S \t((saved_state.asregs.sr & SR_MASK_S) != 0)\n+#define T \t((saved_state.asregs.sr & SR_MASK_T) != 0)\n+#define LDST\t((saved_state.asregs.ldst) != 0)\n+\n+#define SR_BL ((saved_state.asregs.sr & SR_MASK_BL) != 0)\n+#define SR_RB ((saved_state.asregs.sr & SR_MASK_RB) != 0)\n+#define SR_MD ((saved_state.asregs.sr & SR_MASK_MD) != 0)\n+#define SR_DMY ((saved_state.asregs.sr & SR_MASK_DMY) != 0)\n+#define SR_DMX ((saved_state.asregs.sr & SR_MASK_DMX) != 0)\n+#define SR_RC ((saved_state.asregs.sr & SR_MASK_RC))\n \n /* Note: don't use this for privileged bits */\n #define SET_SR_BIT(EXP, BIT) \\\n do { \\\n   if ((EXP) & 1) \\\n-    saved_state.asregs.cregs.named.sr |= (BIT); \\\n+    saved_state.asregs.sr |= (BIT); \\\n   else \\\n-    saved_state.asregs.cregs.named.sr &= ~(BIT); \\\n+    saved_state.asregs.sr &= ~(BIT); \\\n } while (0)\n \n #define SET_SR_BO(EXP) SET_SR_BIT ((EXP), SR_MASK_BO)\n@@ -205,16 +205,16 @@ do { \\\n #define SET_SR_Q(EXP) SET_SR_BIT ((EXP), SR_MASK_Q)\n #define SET_SR_S(EXP) SET_SR_BIT ((EXP), SR_MASK_S)\n #define SET_SR_T(EXP) SET_SR_BIT ((EXP), SR_MASK_T)\n-#define SET_LDST(EXP) (saved_state.asregs.cregs.named.ldst = ((EXP) != 0))\n+#define SET_LDST(EXP) (saved_state.asregs.ldst = ((EXP) != 0))\n \n /* stc currently relies on being able to read SR without modifications.  */\n-#define GET_SR() (saved_state.asregs.cregs.named.sr - 0)\n+#define GET_SR() (saved_state.asregs.sr - 0)\n \n #define SET_SR(x) set_sr (x)\n \n #define SET_RC(x) \\\n-  (saved_state.asregs.cregs.named.sr \\\n-   = (saved_state.asregs.cregs.named.sr & 0xf000ffff) | ((x) & 0xfff) << 16)\n+  (saved_state.asregs.sr \\\n+   = (saved_state.asregs.sr & 0xf000ffff) | ((x) & 0xfff) << 16)\n \n /* Manipulate FPSCR */\n \n@@ -229,10 +229,10 @@ do { \\\n static void\n set_fpscr1 (int x)\n {\n-  int old = saved_state.asregs.sregs.named.fpscr;\n-  saved_state.asregs.sregs.named.fpscr = (x);\n+  int old = saved_state.asregs.fpscr;\n+  saved_state.asregs.fpscr = (x);\n   /* swap the floating point register banks */\n-  if ((saved_state.asregs.sregs.named.fpscr ^ old) & FPSCR_MASK_FR\n+  if ((saved_state.asregs.fpscr ^ old) & FPSCR_MASK_FR\n       /* Ignore bit change if simulating sh-dsp.  */\n       && ! target_dsp)\n     {\n@@ -243,13 +243,13 @@ set_fpscr1 (int x)\n }\n \n /* sts relies on being able to read fpscr directly.  */\n-#define GET_FPSCR()  (saved_state.asregs.sregs.named.fpscr)\n+#define GET_FPSCR()  (saved_state.asregs.fpscr)\n #define SET_FPSCR(x) \\\n do { \\\n   set_fpscr1 (x); \\\n } while (0)\n \n-#define DSR  (saved_state.asregs.sregs.named.fpscr)\n+#define DSR  (saved_state.asregs.fpscr)\n \n #define RAISE_EXCEPTION(x) \\\n   (saved_state.asregs.exception = x, saved_state.asregs.insn_end = 0)\n@@ -410,15 +410,15 @@ set_dr (int n, double exp)\n #define XF(n) (saved_state.asregs.fregs[(n) >> 5].i[(n) & 0x1f])\n #define SET_XF(n,EXP) (saved_state.asregs.fregs[(n) >> 5].i[(n) & 0x1f] = (EXP))\n \n-#define RS saved_state.asregs.cregs.named.rs\n-#define RE saved_state.asregs.cregs.named.re\n-#define MOD (saved_state.asregs.cregs.named.mod)\n+#define RS saved_state.asregs.rs\n+#define RE saved_state.asregs.re\n+#define MOD (saved_state.asregs.mod)\n #define SET_MOD(i) \\\n (MOD = (i), \\\n  MOD_ME = (unsigned) MOD >> 16 | (SR_DMY ? ~0xffff : (SR_DMX ? 0 : 0x10000)), \\\n  MOD_DELTA = (MOD & 0xffff) - ((unsigned) MOD >> 16))\n \n-#define DSP_R(n) saved_state.asregs.sregs.i[(n)]\n+#define DSP_R(n) saved_state.asregs.sregs[(n)]\n #define DSP_GRD(n) DSP_R ((n) + 8)\n #define GET_DSP_GRD(n) ((n | 2) == 7 ? SEXT (DSP_GRD (n)) : SIGN32 (DSP_R (n)))\n #define A1 DSP_R (5)\n@@ -485,12 +485,12 @@ set_sr (int new_sr)\n       int i, tmp;\n       for (i = 0; i < 8; i++)\n \t{\n-\t  tmp = saved_state.asregs.cregs.named.bank[i];\n-\t  saved_state.asregs.cregs.named.bank[i] = saved_state.asregs.regs[i];\n+\t  tmp = saved_state.asregs.bank[i];\n+\t  saved_state.asregs.bank[i] = saved_state.asregs.regs[i];\n \t  saved_state.asregs.regs[i] = tmp;\n \t}\n     }\n-  saved_state.asregs.cregs.named.sr = new_sr;\n+  saved_state.asregs.sr = new_sr;\n   SET_MOD (MOD);\n }\n \n@@ -1768,7 +1768,7 @@ sim_resume (SIM_DESC sd, int step, int siggnal)\n   CHECK_INSN_PTR (insn_ptr);\n \n #ifndef PR\n-  PR = saved_state.asregs.sregs.named.pr;\n+  PR = saved_state.asregs.pr;\n #endif\n   /*T = GET_SR () & SR_MASK_T;*/\n   prevlock = saved_state.asregs.prevlock;\n@@ -1849,7 +1849,7 @@ sim_resume (SIM_DESC sd, int step, int siggnal)\n     }\n   if (saved_state.asregs.insn_end == loop.end)\n     {\n-      saved_state.asregs.cregs.named.sr += SR_RC_INCREMENT;\n+      saved_state.asregs.sr += SR_RC_INCREMENT;\n       if (SR_RC)\n \tinsn_ptr = loop.start;\n       else\n@@ -1876,7 +1876,7 @@ sim_resume (SIM_DESC sd, int step, int siggnal)\n   saved_state.asregs.insts += insts;\n   saved_state.asregs.pc = PH2T (insn_ptr);\n #ifndef PR\n-  saved_state.asregs.sregs.named.pr = PR;\n+  saved_state.asregs.pr = PR;\n #endif\n \n   saved_state.asregs.prevlock = prevlock;"
    },
    {
      "sha": "da9d72decb7498f6cfeb293b5bf8adea670b95d9",
      "filename": "sim/sh/sim-main.h",
      "status": "modified",
      "additions": 23,
      "deletions": 31,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/sim/sh/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/74bbe64132d675b9a5c459f4140c6c566c7ca1bf/sim/sh/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/sh/sim-main.h?ref=74bbe64132d675b9a5c459f4140c6c566c7ca1bf",
      "patch": "@@ -36,34 +36,26 @@ typedef union\n     int pc;\n \n     /* System registers.  For sh-dsp this also includes A0 / X0 / X1 / Y0 / Y1\n-       which are located in fregs, i.e. strictly speaking, these are\n-       out-of-bounds accesses of sregs.i .  This wart of the code could be\n-       fixed by making fregs part of sregs, and including pc too - to avoid\n-       alignment repercussions - but this would cause very onerous union /\n-       structure nesting, which would only be managable with anonymous\n-       unions and structs.  */\n-    union\n-      {\n-\tstruct\n-\t  {\n-\t    int mach;\n-\t    int macl;\n-\t    int pr;\n-\t    int dummy3, dummy4;\n-\t    int fpul; /* A1 for sh-dsp -  but only for movs etc.  */\n-\t    int fpscr; /* dsr for sh-dsp */\n-\t  } named;\n-\tint i[7];\n-      } sregs;\n-\n-    /* sh3e / sh-dsp */\n-    union fregs_u\n-      {\n-\tfloat f[16];\n-\tdouble d[8];\n-\tint i[16];\n-      }\n-    fregs[2];\n+       which are located in fregs.  Probably should include pc too - to avoid\n+       alignment repercussions.  */\n+    union {\n+      struct {\n+\tint mach;\n+\tint macl;\n+\tint pr;\n+\tint dummy3, dummy4;\n+\tint fpul; /* A1 for sh-dsp -  but only for movs etc.  */\n+\tint fpscr; /* dsr for sh-dsp */\n+\n+\t/* sh3e / sh-dsp */\n+\tunion fregs_u {\n+\t  float f[16];\n+\t  double d[8];\n+\t  int i[16];\n+\t} fregs[2];\n+      };\n+      int sregs[39];\n+    };\n \n     /* Control registers; on the SH4, ldc / stc is privileged, except when\n        accessing gbr.  */\n@@ -88,9 +80,9 @@ typedef union\n \t    int tbr;\n \t    int ibcr;\t\t/* sh2a bank control register */\n \t    int ibnr;\t\t/* sh2a bank number register */\n-\t  } named;\n-\tint i[16];\n-      } cregs;\n+\t  };\n+\tint cregs[16];\n+      };\n \n     unsigned char *insn_end;\n "
    }
  ]
}