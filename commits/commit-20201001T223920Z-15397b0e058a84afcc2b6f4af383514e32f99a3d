{
  "sha": "15397b0e058a84afcc2b6f4af383514e32f99a3d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTUzOTdiMGUwNThhODRhZmNjMmI2ZjRhZjM4MzUxNGUzMmY5OWEzZA==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-09-23T02:26:37Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-01T22:39:20Z"
    },
    "message": "Refactor the NetBSD amd64 gdbserver support\n\nReplace the pre-C++ construct of netbsd_target_ops, netbsd_regset_info\nand netbsd_tdesc with C++ inheritance approach found in the Linux\ngdbserver code. Add netbsd_amd64_target, that inherits from the\nnetbsd_process_target class and add proper singleton object for\nthe_netbsd_target, initialized from netbsd_amd64_target.\n\nCall low_arch_setup () on post process creation, which sets machine\nspecific properties of the traced process.\n\nRemove global singleton the_netbsd_target object from the generic\ngdbserver code.\n\nThis refactoring introduces no functional change from the end-user\npoint of view.\n\ngdbserver/ChangeLog:\n\n\t* netbsd-amd64-low.cc (netbsd_x86_64_arch_setup): Remove.\n\t(netbsd_target_regsets): Now const.\n\t(the_low_target): Remove.\n\t(class netbsd_amd64_target, the_netbsd_amd64_target)\n\t(the_netbsd_target): Add.\n\t* netbsd-low.cc (netbsd_process_target::post_create_inferior): Call\n\tlow_arch_setup ().\n\t(netbsd_process_target::fetch_registers)\n\t(netbsd_process_target::store_registers, initialize_low): Update.\n\t(the_netbsd_target): Remove.\n\t* netbsd-low.h (netbsd_target_regsets, netbsd_target_ops)\n\t(the_low_target, netbsd_tdesc): Remove.\n\t(netbsd_process_target::get_regs_info)\n\t(netbsd_process_target::low_arch_setup): Add.",
    "tree": {
      "sha": "e5c4cf8c479d501fa645bb58158b4ce3b7a28a12",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e5c4cf8c479d501fa645bb58158b4ce3b7a28a12"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/15397b0e058a84afcc2b6f4af383514e32f99a3d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15397b0e058a84afcc2b6f4af383514e32f99a3d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/15397b0e058a84afcc2b6f4af383514e32f99a3d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15397b0e058a84afcc2b6f4af383514e32f99a3d/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2a2a24a8e78427ff8667d625f5befbe88c328bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2a2a24a8e78427ff8667d625f5befbe88c328bb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2a2a24a8e78427ff8667d625f5befbe88c328bb"
    }
  ],
  "stats": {
    "total": 113,
    "additions": 67,
    "deletions": 46
  },
  "files": [
    {
      "sha": "383e3d3d484b6facf4eb1b54ec9ce72363e167d1",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=15397b0e058a84afcc2b6f4af383514e32f99a3d",
      "patch": "@@ -1,3 +1,20 @@\n+2020-10-01  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* netbsd-amd64-low.cc (netbsd_x86_64_arch_setup): Remove.\n+\t(netbsd_target_regsets): Now const.\n+\t(the_low_target): Remove.\n+\t(class netbsd_amd64_target, the_netbsd_amd64_target)\n+\t(the_netbsd_target): Add.\n+\t* netbsd-low.cc (netbsd_process_target::post_create_inferior): Call\n+\tlow_arch_setup ().\n+\t(netbsd_process_target::fetch_registers)\n+\t(netbsd_process_target::store_registers, initialize_low): Update.\n+\t(the_netbsd_target): Remove.\n+\t* netbsd-low.h (netbsd_target_regsets, netbsd_target_ops)\n+\t(the_low_target, netbsd_tdesc): Remove.\n+\t(netbsd_process_target::get_regs_info)\n+\t(netbsd_process_target::low_arch_setup): Add.\n+\n 2020-09-23  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* win32-low.cc: Remove local wow64_process variable."
    },
    {
      "sha": "c59ebc8f2cf41d85701fabbe4b9aa08a449a785c",
      "filename": "gdbserver/netbsd-amd64-low.cc",
      "status": "modified",
      "additions": 36,
      "deletions": 17,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/netbsd-amd64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/netbsd-amd64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-amd64-low.cc?ref=15397b0e058a84afcc2b6f4af383514e32f99a3d",
      "patch": "@@ -155,22 +155,9 @@ netbsd_x86_64_store_gregset (struct regcache *regcache, const char *buf)\n   netbsd_x86_64_supply_gp (AMD64_GS_REGNUM, GS);\n }\n \n-/* Implements the netbsd_target_ops.arch_setup routine.  */\n-\n-static void\n-netbsd_x86_64_arch_setup (void)\n-{\n-  struct target_desc *tdesc\n-    = amd64_create_target_description (X86_XSTATE_SSE_MASK, false, false, false);\n-\n-  init_target_desc (tdesc, amd64_expedite_regs);\n-\n-  netbsd_tdesc = tdesc;\n-}\n-\n /* Description of all the x86-netbsd register sets.  */\n \n-struct netbsd_regset_info netbsd_target_regsets[] =\n+static const struct netbsd_regset_info netbsd_target_regsets[] =\n {\n  /* General Purpose Registers.  */\n  {PT_GETREGS, PT_SETREGS, sizeof (struct reg),\n@@ -179,9 +166,41 @@ struct netbsd_regset_info netbsd_target_regsets[] =\n  {0, 0, -1, NULL, NULL }\n };\n \n-/* The netbsd_target_ops vector for x86-netbsd.  */\n+/* NetBSD target op definitions for the amd64 architecture.  */\n \n-struct netbsd_target_ops the_low_target =\n+class netbsd_amd64_target : public netbsd_process_target\n {\n- netbsd_x86_64_arch_setup,\n+protected:\n+  const netbsd_regset_info *get_regs_info () override;\n+\n+  void low_arch_setup () override;\n };\n+\n+/* Return the information to access registers.  */\n+\n+const netbsd_regset_info *\n+netbsd_amd64_target::get_regs_info ()\n+{\n+  return netbsd_target_regsets;\n+}\n+\n+/* Architecture-specific setup for the current process.  */\n+\n+void\n+netbsd_amd64_target::low_arch_setup ()\n+{\n+  target_desc *tdesc\n+    = amd64_create_target_description (X86_XSTATE_SSE_MASK, false, false, false);\n+\n+  init_target_desc (tdesc, amd64_expedite_regs);\n+\n+  current_process ()->tdesc = tdesc;\n+}\n+\n+/* The singleton target ops object.  */\n+\n+static netbsd_amd64_target the_netbsd_amd64_target;\n+\n+/* The NetBSD target ops object.  */\n+\n+netbsd_process_target *the_netbsd_target = &the_netbsd_amd64_target;"
    },
    {
      "sha": "7bec55a56acb2526b3f307269b2fffbea76da702",
      "filename": "gdbserver/netbsd-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/netbsd-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/netbsd-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.cc?ref=15397b0e058a84afcc2b6f4af383514e32f99a3d",
      "patch": "@@ -114,6 +114,8 @@ netbsd_process_target::post_create_inferior ()\n {\n   pid_t pid = current_process ()->pid;\n   netbsd_nat::enable_proc_events (pid);\n+\n+  low_arch_setup ();\n }\n \n /* Implement the attach target_ops method.  */\n@@ -504,7 +506,7 @@ netbsd_process_target::thread_alive (ptid_t ptid)\n void\n netbsd_process_target::fetch_registers (struct regcache *regcache, int regno)\n {\n-  struct netbsd_regset_info *regset = netbsd_target_regsets;\n+  const netbsd_regset_info *regset = get_regs_info ();\n   ptid_t inferior_ptid = ptid_of (current_thread);\n \n   while (regset->size >= 0)\n@@ -525,7 +527,7 @@ netbsd_process_target::fetch_registers (struct regcache *regcache, int regno)\n void\n netbsd_process_target::store_registers (struct regcache *regcache, int regno)\n {\n-  struct netbsd_regset_info *regset = netbsd_target_regsets;\n+  const netbsd_regset_info *regset = get_regs_info ();\n   ptid_t inferior_ptid = ptid_of (current_thread);\n \n   while (regset->size >= 0)\n@@ -1317,13 +1319,8 @@ netbsd_process_target::supports_read_auxv ()\n   return true;\n }\n \n-/* The NetBSD target ops object.  */\n-\n-static netbsd_process_target the_netbsd_target;\n-\n void\n initialize_low ()\n {\n-  set_target_ops (&the_netbsd_target);\n-  the_low_target.arch_setup ();\n+  set_target_ops (the_netbsd_target);\n }"
    },
    {
      "sha": "c229a0f9f617a41565849f0c63758a592b378d12",
      "filename": "gdbserver/netbsd-low.h",
      "status": "modified",
      "additions": 9,
      "deletions": 21,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/netbsd-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15397b0e058a84afcc2b6f4af383514e32f99a3d/gdbserver/netbsd-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.h?ref=15397b0e058a84afcc2b6f4af383514e32f99a3d",
      "patch": "@@ -35,21 +35,6 @@ struct netbsd_regset_info\n   void (*store_function) (struct regcache *regcache, const char *buf);\n };\n \n-/* A list of regsets for the target being debugged, terminated by an entry\n-   where the size is negative.\n-\n-   This list should be created by the target-specific code.  */\n-\n-extern struct netbsd_regset_info netbsd_target_regsets[];\n-\n-/* The target-specific operations for NetBSD support.  */\n-\n-struct netbsd_target_ops\n-{\n-  /* Architecture-specific setup.  */\n-  void (*arch_setup) ();\n-};\n-\n /* Target ops definitions for a NetBSD target.  */\n \n class netbsd_process_target : public process_stratum_target\n@@ -141,14 +126,17 @@ class netbsd_process_target : public process_stratum_target\n   const char *thread_name (ptid_t thread) override;\n \n   bool supports_catch_syscall () override;\n-};\n \n-/* The inferior's target description.  This is a global because the\n-   NetBSD ports support neither bi-arch nor multi-process.  */\n+protected:\n+  /* The architecture-specific \"low\" methods are listed below.  */\n \n-extern struct netbsd_target_ops the_low_target;\n+  /* Return the information to access registers.  */\n+  virtual const netbsd_regset_info *get_regs_info () = 0;\n+\n+  /* Architecture-specific setup for the current process.  */\n+  virtual void low_arch_setup () = 0;\n+};\n \n-/* XXX: multilib */\n-extern const struct target_desc *netbsd_tdesc;\n+extern netbsd_process_target *the_netbsd_target;\n \n #endif /* GDBSERVER_NETBSD_LOW_H */"
    }
  ]
}