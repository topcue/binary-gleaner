{
  "sha": "d50c08025d41b2efc70dbb384fc691f2d9632463",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDUwYzA4MDI1ZDQxYjJlZmM3MGRiYjM4NGZjNjkxZjJkOTYzMjQ2Mw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-09T09:27:57Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:18Z"
    },
    "message": "libctf, open: fix opening CTF in binaries with no symtab\n\nThis is a perfectly possible case, and half of ctf_bfdopen_ctfsect\nhandled it fine.  The other half hit a divide by zero or two before we\ngot that far, and had no code path to load the strtab from anywhere\nin the absence of a symtab to point at it in any case.\n\nSo, as a fallback, if there is no symtab, try loading \".strtab\"\nexplicitly by name, like we used to before we started looking for the\nstrtab the symtab used.\n\nOf course, such a strtab is not kept hold of by BFD, so this means we\nhave to bring back the code to possibly explicitly free the strtab that\nwe read in.\n\nlibctf/\n\t* ctf-impl.h (struct ctf_archive_internal) <ctfi_free_strsect>\n\tNew.\n\t* ctf-open-bfd.c (ctf_bfdopen_ctfsect): Explicitly open a strtab\n\tif the input has no symtab, rather than dividing by\n\tzero. Arrange to free it later via ctfi_free_ctfsect.\n\t* ctf-archive.c (ctf_new_archive_internal): Do not\n\tctfi_free_strsect by default.\n\t(ctf_arc_close): Possibly free it here.",
    "tree": {
      "sha": "f32f5a1ea26d5cedd9d159135ea48a16aa3f4d94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f32f5a1ea26d5cedd9d159135ea48a16aa3f4d94"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d50c08025d41b2efc70dbb384fc691f2d9632463",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d50c08025d41b2efc70dbb384fc691f2d9632463",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d50c08025d41b2efc70dbb384fc691f2d9632463",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d50c08025d41b2efc70dbb384fc691f2d9632463/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "70447401740235d828c4b7b87e398eeae4801094",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70447401740235d828c4b7b87e398eeae4801094",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/70447401740235d828c4b7b87e398eeae4801094"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 70,
    "deletions": 26
  },
  "files": [
    {
      "sha": "3f82c641af2b4c224bfd41d43c4c036834304202",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=d50c08025d41b2efc70dbb384fc691f2d9632463",
      "patch": "@@ -1,3 +1,14 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (struct ctf_archive_internal) <ctfi_free_strsect>\n+\tNew.\n+\t* ctf-open-bfd.c (ctf_bfdopen_ctfsect): Explicitly open a strtab\n+\tif the input has no symtab, rather than dividing by\n+\tzero. Arrange to free it later via ctfi_free_ctfsect.\n+\t* ctf-archive.c (ctf_new_archive_internal): Do not\n+\tctfi_free_strsect by default.\n+\t(ctf_arc_close): Possibly free it here.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-dump.c (ctf_is_slice): Delete, unnecessary."
    },
    {
      "sha": "e33f1cc9eaf3cc4186153b8b877b9c16ece53547",
      "filename": "libctf/ctf-archive.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ctf-archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ctf-archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-archive.c?ref=d50c08025d41b2efc70dbb384fc691f2d9632463",
      "patch": "@@ -368,6 +368,7 @@ ctf_new_archive_internal (int is_archive, int unmap_on_close,\n   if (strsect)\n      memcpy (&arci->ctfi_strsect, strsect, sizeof (struct ctf_sect));\n   arci->ctfi_free_symsect = 0;\n+  arci->ctfi_free_strsect = 0;\n   arci->ctfi_unmap_on_close = unmap_on_close;\n \n   return arci;\n@@ -493,6 +494,8 @@ ctf_arc_close (ctf_archive_t *arc)\n     ctf_file_close (arc->ctfi_file);\n   if (arc->ctfi_free_symsect)\n     free ((void *) arc->ctfi_symsect.cts_data);\n+  if (arc->ctfi_free_strsect)\n+    free ((void *) arc->ctfi_strsect.cts_data);\n   free (arc->ctfi_data);\n   if (arc->ctfi_bfd_close)\n     arc->ctfi_bfd_close (arc);"
    },
    {
      "sha": "913a2647ed27f3d371d713fea77c7c4a4975fd35",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=d50c08025d41b2efc70dbb384fc691f2d9632463",
      "patch": "@@ -333,6 +333,7 @@ struct ctf_archive_internal\n   ctf_sect_t ctfi_symsect;\n   ctf_sect_t ctfi_strsect;\n   int ctfi_free_symsect;\n+  int ctfi_free_strsect;\n   void *ctfi_data;\n   bfd *ctfi_abfd;\t\t    /* Optional source of section data.  */\n   void (*ctfi_bfd_close) (struct ctf_archive_internal *);"
    },
    {
      "sha": "9fcce2fa9cdc7d98c4f2f8c312c2080c8de9e6fb",
      "filename": "libctf/ctf-open-bfd.c",
      "status": "modified",
      "additions": 55,
      "deletions": 26,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ctf-open-bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d50c08025d41b2efc70dbb384fc691f2d9632463/libctf/ctf-open-bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open-bfd.c?ref=d50c08025d41b2efc70dbb384fc691f2d9632463",
      "patch": "@@ -94,46 +94,69 @@ ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n   ctf_sect_t *symsectp = NULL;\n   ctf_sect_t *strsectp = NULL;\n   const char *bfderrstr = NULL;\n+  char *strtab_alloc = NULL;\n \n #ifdef HAVE_BFD_ELF\n   ctf_sect_t symsect, strsect;\n-  Elf_Internal_Shdr *strhdr;\n   Elf_Internal_Shdr *symhdr = &elf_symtab_hdr (abfd);\n-  size_t symcount = symhdr->sh_size / symhdr->sh_entsize;\n+  size_t symcount;\n   Elf_Internal_Sym *isymbuf;\n-  bfd_byte *symtab;\n+  bfd_byte *symtab = NULL;\n   const char *strtab = NULL;\n+  size_t strsize;\n   /* TODO: handle SYMTAB_SHNDX.  */\n \n-  if ((symtab = malloc (symhdr->sh_size)) == NULL)\n+  /* Get the symtab, and the strtab associated with it.  */\n+  if (elf_tdata (abfd) && symhdr && symhdr->sh_size && symhdr->sh_entsize)\n     {\n-      bfderrstr = \"Cannot malloc symbol table\";\n-      goto err;\n-    }\n+      symcount = symhdr->sh_size / symhdr->sh_entsize;\n+      if ((symtab = malloc (symhdr->sh_size)) == NULL)\n+\t{\n+\t  bfderrstr = \"Cannot malloc symbol table\";\n+\t  goto err;\n+\t}\n \n-  isymbuf = bfd_elf_get_elf_syms (abfd, symhdr, symcount, 0,\n-\t\t\t\t  NULL, symtab, NULL);\n-  free (isymbuf);\n-  if (isymbuf == NULL)\n-    {\n-      bfderrstr = \"Cannot read symbol table\";\n-      goto err_free_sym;\n-    }\n+      isymbuf = bfd_elf_get_elf_syms (abfd, symhdr, symcount, 0,\n+\t\t\t\t      NULL, symtab, NULL);\n+      free (isymbuf);\n+      if (isymbuf == NULL)\n+\t{\n+\t  bfderrstr = \"Cannot read symbol table\";\n+\t  goto err_free_sym;\n+\t}\n+\n+      if (elf_elfsections (abfd) != NULL\n+\t  && symhdr->sh_link < elf_numsections (abfd))\n+\t{\n+\t  Elf_Internal_Shdr *strhdr = elf_elfsections (abfd)[symhdr->sh_link];\n \n-  if (elf_elfsections (abfd) != NULL\n-      && symhdr->sh_link < elf_numsections (abfd))\n+\t  strsize = strhdr->sh_size;\n+\t  if (strhdr->contents == NULL)\n+\t    {\n+\t      if ((strtab = bfd_elf_get_str_section (abfd, symhdr->sh_link)) == NULL)\n+\t\t{\n+\t\t  bfderrstr = \"Cannot read string table\";\n+\t\t  goto err_free_sym;\n+\t\t}\n+\t    }\n+\t  else\n+\t    strtab = (const char *) strhdr->contents;\n+\t}\n+    }\n+  else\t\t/* No symtab: just try getting .strtab by name.  */\n     {\n-      strhdr = elf_elfsections (abfd)[symhdr->sh_link];\n-      if (strhdr->contents == NULL)\n+      bfd_byte *str_bcontents;\n+      asection *str_asect;\n+\n+      if ((str_asect = bfd_get_section_by_name (abfd, \".strtab\")) != NULL)\n \t{\n-\t  if ((strtab = bfd_elf_get_str_section (abfd, symhdr->sh_link)) == NULL)\n+\t  if (bfd_malloc_and_get_section (abfd, str_asect, &str_bcontents))\n \t    {\n-\t      bfderrstr = \"Cannot read string table\";\n-\t      goto err_free_sym;\n+\t      strtab = (const char *) str_bcontents;\n+\t      strtab_alloc = (char *) str_bcontents;\n+\t      strsize = str_asect->size;\n \t    }\n \t}\n-      else\n-\tstrtab = (const char *) strhdr->contents;\n     }\n \n   if (strtab)\n@@ -144,9 +167,12 @@ ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n \n       strsect.cts_data = strtab;\n       strsect.cts_name = \".strtab\";\n-      strsect.cts_size = strhdr->sh_size;\n+      strsect.cts_size = strsize;\n       strsectp = &strsect;\n+    }\n \n+  if (symtab)\n+    {\n       assert (symhdr->sh_entsize == get_elf_backend_data (abfd)->s->sizeof_sym);\n       symsect.cts_name = \".symtab\";\n       symsect.cts_entsize = symhdr->sh_entsize;\n@@ -159,13 +185,16 @@ ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n   arci = ctf_arc_bufopen (ctfsect, symsectp, strsectp, errp);\n   if (arci)\n     {\n-      /* Request freeing of the symsect.  */\n+      /* Request freeing of the symsect and possibly the strsect.  */\n       arci->ctfi_free_symsect = 1;\n+      if (strtab_alloc)\n+\tarci->ctfi_free_strsect = 1;\n       return arci;\n     }\n #ifdef HAVE_BFD_ELF\n  err_free_sym:\n   free (symtab);\n+  free (strtab_alloc);\n #endif\n err: _libctf_unused_;\n   if (bfderrstr)"
    }
  ]
}