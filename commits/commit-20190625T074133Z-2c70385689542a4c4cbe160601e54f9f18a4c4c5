{
  "sha": "2c70385689542a4c4cbe160601e54f9f18a4c4c5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM3MDM4NTY4OTU0MmE0YzRjYmUxNjA2MDFlNTRmOWYxOGE0YzRjNQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@novell.com",
      "date": "2019-06-25T07:41:33Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-06-25T07:41:33Z"
    },
    "message": "x86: correct / adjust debug printing\n\nFor quite some time we've been using combinations of bits for\nspecifying various registers in operands and templates. I think it was\nAlan who had indicated that likely the debug printing would need\nadjustment as a result. Here we go.\n\nAccumulator handling for GPRs gets changed to match that for FPU regs.\nFor this to work, OPERAND_TYPE_ACC{32,64} get repurposed, with their\noriginal uses replaced by direct checks of the two bits of interest,\nwhich is cheaper than operand_type_equal() invocations.\n\nFor SIMD registers nothing similar appears to be needed, as respective\noperands get stripped from the (copy of the) template before pt() is\nreached.\n\nThe type change on pi() is to silence a compiler diagnostic. Arguably\nits other parameter could also be const-qualified.",
    "tree": {
      "sha": "4e3fac1720511587ea3672d30794c14116a770b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4e3fac1720511587ea3672d30794c14116a770b2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c70385689542a4c4cbe160601e54f9f18a4c4c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c70385689542a4c4cbe160601e54f9f18a4c4c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c70385689542a4c4cbe160601e54f9f18a4c4c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c70385689542a4c4cbe160601e54f9f18a4c4c5/comments",
  "author": null,
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4970191fa557c4769697fb41db06f2dcb5f7de2e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4970191fa557c4769697fb41db06f2dcb5f7de2e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4970191fa557c4769697fb41db06f2dcb5f7de2e"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 48,
    "deletions": 23
  },
  "files": [
    {
      "sha": "7272221aecdefbebf73dc0a404403bde8271646f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c70385689542a4c4cbe160601e54f9f18a4c4c5/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c70385689542a4c4cbe160601e54f9f18a4c4c5/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=2c70385689542a4c4cbe160601e54f9f18a4c4c5",
      "patch": "@@ -1,3 +1,12 @@\n+2019-06-25  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* tc-i386.c (acc32, acc64): Delete.\n+\t(pi): Make first parameter pinter-to-const.\n+\t(type_names): Remove Acc. Add acc8, acc16, acc32, and acc64.\n+\t(pt): Use operand_type_equal().\n+\t(match_template): Replace use of acc32.\n+\t(process_suffix): Replace use of acc64.\n+\n 2019-06-25  Jan Beulich  <jbeulich@suse.com>\n \n \t* doc/c-i386.texi: Mark -mavxscalar= and -mvexwig as dangrous to"
    },
    {
      "sha": "6c5d5b46c7477b944c00b912b0371b9b64b55a46",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c70385689542a4c4cbe160601e54f9f18a4c4c5/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c70385689542a4c4cbe160601e54f9f18a4c4c5/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=2c70385689542a4c4cbe160601e54f9f18a4c4c5",
      "patch": "@@ -1895,8 +1895,6 @@ operand_type_xor (i386_operand_type x, i386_operand_type y)\n   return x;\n }\n \n-static const i386_operand_type acc32 = OPERAND_TYPE_ACC32;\n-static const i386_operand_type acc64 = OPERAND_TYPE_ACC64;\n static const i386_operand_type disp16 = OPERAND_TYPE_DISP16;\n static const i386_operand_type disp32 = OPERAND_TYPE_DISP32;\n static const i386_operand_type disp32s = OPERAND_TYPE_DISP32S;\n@@ -3004,7 +3002,7 @@ static void pe (expressionS *);\n static void ps (symbolS *);\n \n static void\n-pi (char *line, i386_insn *x)\n+pi (const char *line, i386_insn *x)\n {\n   unsigned int j;\n \n@@ -3105,6 +3103,10 @@ const type_names[] =\n   { OPERAND_TYPE_REG16, \"r16\" },\n   { OPERAND_TYPE_REG32, \"r32\" },\n   { OPERAND_TYPE_REG64, \"r64\" },\n+  { OPERAND_TYPE_ACC8, \"acc8\" },\n+  { OPERAND_TYPE_ACC16, \"acc16\" },\n+  { OPERAND_TYPE_ACC32, \"acc32\" },\n+  { OPERAND_TYPE_ACC64, \"acc64\" },\n   { OPERAND_TYPE_IMM8, \"i8\" },\n   { OPERAND_TYPE_IMM8, \"i8s\" },\n   { OPERAND_TYPE_IMM16, \"i16\" },\n@@ -3127,7 +3129,6 @@ const type_names[] =\n   { OPERAND_TYPE_FLOATACC, \"FAcc\" },\n   { OPERAND_TYPE_SREG2, \"SReg2\" },\n   { OPERAND_TYPE_SREG3, \"SReg3\" },\n-  { OPERAND_TYPE_ACC, \"Acc\" },\n   { OPERAND_TYPE_JUMPABSOLUTE, \"Jump Absolute\" },\n   { OPERAND_TYPE_REGMMX, \"rMMX\" },\n   { OPERAND_TYPE_REGXMM, \"rXMM\" },\n@@ -3146,7 +3147,7 @@ pt (i386_operand_type t)\n   for (j = 0; j < ARRAY_SIZE (type_names); j++)\n     {\n       a = operand_type_and (t, type_names[j].mask);\n-      if (!operand_type_all_zero (&a))\n+      if (operand_type_equal (&a, &type_names[j].mask))\n \tfprintf (stdout, \"%s, \",  type_names[j].name);\n     }\n   fflush (stdout);\n@@ -5814,8 +5815,8 @@ match_template (char mnem_suffix)\n \t     zero-extend %eax to %rax.  */\n \t  if (flag_code == CODE_64BIT\n \t      && t->base_opcode == 0x90\n-\t      && operand_type_equal (&i.types [0], &acc32)\n-\t      && operand_type_equal (&i.types [1], &acc32))\n+\t      && i.types[0].bitfield.acc && i.types[0].bitfield.dword\n+\t      && i.types[1].bitfield.acc && i.types[1].bitfield.dword)\n \t    continue;\n \t  /* xrelease mov %eax, <disp> is another special case. It must not\n \t     match the accumulator-only encoding of mov.  */\n@@ -6409,8 +6410,8 @@ process_suffix (void)\n \t  && ! (i.operands == 2\n \t\t&& i.tm.base_opcode == 0x90\n \t\t&& i.tm.extension_opcode == None\n-\t\t&& operand_type_equal (&i.types [0], &acc64)\n-\t\t&& operand_type_equal (&i.types [1], &acc64)))\n+\t\t&& i.types[0].bitfield.acc && i.types[0].bitfield.qword\n+\t\t&& i.types[1].bitfield.acc && i.types[1].bitfield.qword))\n \ti.rex |= REX_W;\n \n       break;"
    },
    {
      "sha": "e669421a9645a047b67f3eb73f5f69269bd5aa2d",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c70385689542a4c4cbe160601e54f9f18a4c4c5/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c70385689542a4c4cbe160601e54f9f18a4c4c5/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=2c70385689542a4c4cbe160601e54f9f18a4c4c5",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-25  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init): Correct OPERAND_TYPE_DEBUG\n+\tentry. Drop OPERAND_TYPE_ACC entry. Add OPERAND_TYPE_ACC8 and\n+\tOPERAND_TYPE_ACC16 entries. Adjust OPERAND_TYPE_ACC32 and\n+\tOPERAND_TYPE_ACC64 entries.\n+\t* i386-init.h: Re-generate.\n+\n 2019-06-25  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (Edqa, dqa_mode, EVEX_W_0F2A_P_1, EVEX_W_0F7B_P_1):"
    },
    {
      "sha": "c0325ed16b90520b956373622c50081b46e95cee",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c70385689542a4c4cbe160601e54f9f18a4c4c5/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c70385689542a4c4cbe160601e54f9f18a4c4c5/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=2c70385689542a4c4cbe160601e54f9f18a4c4c5",
      "patch": "@@ -435,7 +435,7 @@ static initializer operand_type_init[] =\n   { \"OPERAND_TYPE_TEST\",\n     \"Test\" },\n   { \"OPERAND_TYPE_DEBUG\",\n-    \"FloatReg\" },\n+    \"Debug\" },\n   { \"OPERAND_TYPE_FLOATREG\",\n     \"FloatReg\" },\n   { \"OPERAND_TYPE_FLOATACC\",\n@@ -444,8 +444,6 @@ static initializer operand_type_init[] =\n     \"SReg2\" },\n   { \"OPERAND_TYPE_SREG3\",\n     \"SReg3\" },\n-  { \"OPERAND_TYPE_ACC\",\n-    \"Acc\" },\n   { \"OPERAND_TYPE_JUMPABSOLUTE\",\n     \"JumpAbsolute\" },\n   { \"OPERAND_TYPE_REGMMX\",\n@@ -460,10 +458,14 @@ static initializer operand_type_init[] =\n     \"RegMask\" },\n   { \"OPERAND_TYPE_ESSEG\",\n     \"EsSeg\" },\n+  { \"OPERAND_TYPE_ACC8\",\n+    \"Acc|Byte\" },\n+  { \"OPERAND_TYPE_ACC16\",\n+    \"Acc|Word\" },\n   { \"OPERAND_TYPE_ACC32\",\n-    \"Reg32|Acc|Dword\" },\n+    \"Acc|Dword\" },\n   { \"OPERAND_TYPE_ACC64\",\n-    \"Reg64|Acc|Qword\" },\n+    \"Acc|Qword\" },\n   { \"OPERAND_TYPE_DISP16_32\",\n     \"Disp16|Disp32\" },\n   { \"OPERAND_TYPE_ANYDISP\","
    },
    {
      "sha": "735403a34c446b42cf6f70f977c2d68016166a0f",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c70385689542a4c4cbe160601e54f9f18a4c4c5/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c70385689542a4c4cbe160601e54f9f18a4c4c5/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=2c70385689542a4c4cbe160601e54f9f18a4c4c5",
      "patch": "@@ -1458,8 +1458,8 @@\n       0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n@@ -1482,11 +1482,6 @@\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0 } }\n \n-#define OPERAND_TYPE_ACC \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n-\n #define OPERAND_TYPE_JUMPABSOLUTE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n@@ -1522,13 +1517,23 @@\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0 } }\n \n+#define OPERAND_TYPE_ACC8 \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0 } }\n+\n+#define OPERAND_TYPE_ACC16 \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0 } }\n+\n #define OPERAND_TYPE_ACC32 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0 } }\n "
    }
  ]
}