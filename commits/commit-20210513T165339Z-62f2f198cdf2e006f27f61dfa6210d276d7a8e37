{
  "sha": "62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjJmMmYxOThjZGYyZTAwNmYyN2Y2MWRmYTYyMTBkMjc2ZDdhOGUzNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-13T15:56:03Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-13T16:53:39Z"
    },
    "message": "gdb/testsuite: resolve duplicate test names in gdb.guile/*.exp\n\nThis commit resolves almost all of the remaining duplicate test names\nin gdb.guile/*.exp.  This is done by either:\n\n - Making use of with_test_prefix,\n - Giving tests a unique name,\n - Extending the existing name to make it unique,\n - Not printing PASS lines for simple setup commands (e.g. loading\n   support modules, or adjusting GDB internal settings not relating to\n   guile).\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.guile/scm-frame-args.exp: Add with_test_prefix to resolve\n\tduplicate test names.\n\t* gdb.guile/scm-parameter.exp: Provide test names to avoid\n\tduplicate names based on the command being run.\n\t* gdb.guile/scm-symbol.exp: Extend test name to make it unique.\n\t* gdb.guile/scm-type.exp (restart_gdb): Don't print PASS line when\n\tloading a support module.\n\t(test_equality): Update test name to match the actual test, making\n\tthe name unique in the process.\n\t* gdb.guile/scm-value.exp (test_value_in_inferior): Add test names\n\tto resolve duplicate tests.\n\t(test_inferior_function_call): Likewise.\n\t(test_subscript_regression): Likewise.",
    "tree": {
      "sha": "6fa3e6250917022760259a8a9ddeebcc6091a5ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6fa3e6250917022760259a8a9ddeebcc6091a5ee"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c6f801d8e6740d9c1dfa7ff4a9ed2ec160a5e1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c6f801d8e6740d9c1dfa7ff4a9ed2ec160a5e1d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c6f801d8e6740d9c1dfa7ff4a9ed2ec160a5e1d"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 69,
    "deletions": 45
  },
  "files": [
    {
      "sha": "287313f5d01f101341f91525baab0e5dc33b1a2d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
      "patch": "@@ -1,3 +1,19 @@\n+2021-05-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.guile/scm-frame-args.exp: Add with_test_prefix to resolve\n+\tduplicate test names.\n+\t* gdb.guile/scm-parameter.exp: Provide test names to avoid\n+\tduplicate names based on the command being run.\n+\t* gdb.guile/scm-symbol.exp: Extend test name to make it unique.\n+\t* gdb.guile/scm-type.exp (restart_gdb): Don't print PASS line when\n+\tloading a support module.\n+\t(test_equality): Update test name to match the actual test, making\n+\tthe name unique in the process.\n+\t* gdb.guile/scm-value.exp (test_value_in_inferior): Add test names\n+\tto resolve duplicate tests.\n+\t(test_inferior_function_call): Likewise.\n+\t(test_subscript_regression): Likewise.\n+\n 2021-05-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* lib/guile.exp (gdb_scm_load_file): Use empty test name to"
    },
    {
      "sha": "89603cfc917b798de9b76aead0e7a47f668259fc",
      "filename": "gdb/testsuite/gdb.guile/scm-frame-args.exp",
      "status": "modified",
      "additions": 28,
      "deletions": 30,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-frame-args.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-frame-args.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-frame-args.exp?ref=62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
      "patch": "@@ -37,37 +37,35 @@ gdb_breakpoint [gdb_get_line_number \"break-here\"]\n gdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n \n # Test all combinations with raw off.\n-\n gdb_test_no_output \"set print raw-frame-arguments off\"\n-\n-gdb_test_no_output \"set print frame-arguments none\"\n-gdb_test \"frame\" \".*foo \\\\(x=\\[.\\]{3}, ss=\\[.\\]{3}\\\\).*\" \\\n-    \"frame pretty,none\"\n-\n-#gdb_test_no_output \"set guile print-stack full\"\n-\n-gdb_test_no_output \"set print frame-arguments scalars\"\n-gdb_test \"frame\" \".*foo \\\\(x=42, ss=super struct = {\\[.\\]{3}}\\\\).*\" \\\n-    \"frame pretty,scalars\"\n-\n-gdb_test_no_output \"set print frame-arguments all\"\n-gdb_test \"frame\" \\\n-    \".*foo \\\\(x=42, ss=super struct = {a = m=<1>, b = m=<2>}\\\\).*\" \\\n-    \"frame pretty,all\"\n+with_test_prefix \"raw-frame-arguments=off\" {\n+    gdb_test_no_output \"set print frame-arguments none\"\n+    gdb_test \"frame\" \".*foo \\\\(x=\\[.\\]{3}, ss=\\[.\\]{3}\\\\).*\" \\\n+\t\"frame pretty,none\"\n+\n+    gdb_test_no_output \"set print frame-arguments scalars\"\n+    gdb_test \"frame\" \".*foo \\\\(x=42, ss=super struct = {\\[.\\]{3}}\\\\).*\" \\\n+\t\"frame pretty,scalars\"\n+\n+    gdb_test_no_output \"set print frame-arguments all\"\n+    gdb_test \"frame\" \\\n+\t\".*foo \\\\(x=42, ss=super struct = {a = m=<1>, b = m=<2>}\\\\).*\" \\\n+\t\"frame pretty,all\"\n+}\n \n # Test all combinations with raw on.\n-\n gdb_test_no_output \"set print raw-frame-arguments on\"\n-\n-gdb_test_no_output \"set print frame-arguments none\"\n-gdb_test \"frame\" \".*foo \\\\(x=\\[.\\]{3}, ss=\\[.\\]{3}\\\\).*\" \\\n-    \"frame raw,none\"\n-\n-gdb_test_no_output \"set print frame-arguments scalars\"\n-gdb_test \"frame\" \".*foo \\\\(x=42, ss=\\[.\\]{3}\\\\).*\" \\\n-    \"frame raw,scalars\"\n-\n-gdb_test_no_output \"set print frame-arguments all\"\n-gdb_test \"frame\" \\\n-    \".*foo \\\\(x=42, ss={a = {m = 1}, b = {m = 2}}\\\\).*\" \\\n-    \"frame raw,all\"\n+with_test_prefix \"raw-frame-arguments=on\" {\n+    gdb_test_no_output \"set print frame-arguments none\"\n+    gdb_test \"frame\" \".*foo \\\\(x=\\[.\\]{3}, ss=\\[.\\]{3}\\\\).*\" \\\n+\t\"frame raw,none\"\n+\n+    gdb_test_no_output \"set print frame-arguments scalars\"\n+    gdb_test \"frame\" \".*foo \\\\(x=42, ss=\\[.\\]{3}\\\\).*\" \\\n+\t\"frame raw,scalars\"\n+\n+    gdb_test_no_output \"set print frame-arguments all\"\n+    gdb_test \"frame\" \\\n+\t\".*foo \\\\(x=42, ss={a = {m = 1}, b = {m = 2}}\\\\).*\" \\\n+\t\"frame raw,all\"\n+}"
    },
    {
      "sha": "67120b23366451bd24599f7a115fdeb77486d9c7",
      "filename": "gdb/testsuite/gdb.guile/scm-parameter.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-parameter.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-parameter.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-parameter.exp?ref=62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
      "patch": "@@ -161,11 +161,14 @@ gdb_test_multiline \"restricted gdb parameter\" \\\n     \"end\"\n \n with_test_prefix \"test-restricted-param\" {\n-    gdb_test \"show test-restricted-param\" \"The value of the restricted parameter is 2.\"\n+    gdb_test \"show test-restricted-param\" \"The value of the restricted parameter is 2.\" \\\n+\t\"test-restricted-param is initially 2\"\n     gdb_test_no_output \"set test-restricted-param 10\"\n-    gdb_test \"show test-restricted-param\" \"The value of the restricted parameter is 10.\"\n+    gdb_test \"show test-restricted-param\" \"The value of the restricted parameter is 10.\" \\\n+\t\"test-restricted-param is now 10\"\n     gdb_test \"set test-restricted-param 42\" \"Error: Range of parameter is 0-10.\"\n-    gdb_test \"show test-restricted-param\" \"The value of the restricted parameter is 2.\"\n+    gdb_test \"show test-restricted-param\" \"The value of the restricted parameter is 2.\" \\\n+\t\"test-restricted-param is back to 2 again\"\n }\n \n # Test registering a parameter that already exists."
    },
    {
      "sha": "38fe6026a0ed949377d913d7f32cb4b2a276d81b",
      "filename": "gdb/testsuite/gdb.guile/scm-symbol.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-symbol.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-symbol.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-symbol.exp?ref=62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
      "patch": "@@ -182,7 +182,7 @@ if ![gdb_guile_runto_main] {\n }\n \n gdb_breakpoint [gdb_get_line_number \"Break at end.\"]\n-gdb_continue_to_breakpoint \"Break at end.\"\n+gdb_continue_to_breakpoint \"Break at end again\"\n gdb_scm_test_silent_cmd \"guile (define a (car (lookup-symbol \\\"a\\\")))\" \\\n     \"get variable a for unload\"\n gdb_test \"guile (print (symbol-valid? a))\" \\"
    },
    {
      "sha": "ccde98ca224a9ae7cd659ab4fbaeecb188a0a6f4",
      "filename": "gdb/testsuite/gdb.guile/scm-type.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-type.exp?ref=62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
      "patch": "@@ -55,7 +55,7 @@ proc restart_gdb {exefile} {\n \treturn 0\n     }\n     gdb_scm_test_silent_cmd \"guile (use-modules (gdb iterator))\" \\\n-\t\"load iterator module\"\n+\t\"load iterator module\" 0\n \n     return 1\n }\n@@ -176,9 +176,9 @@ proc test_equality {lang} {\n \tgdb_test \"guile (print (eq? (value-type st) (value-type ar)))\" \\\n \t    \"= #f\" \"test type eq? on not-equal types\"\n \tgdb_test \"guile (print (equal? (value-type st) (value-type st)))\" \\\n-\t    \"= #t\" \"test type eq? on equal types\"\n+\t    \"= #t\" \"test type equal? on equal types\"\n \tgdb_test \"guile (print (equal? (value-type st) (value-type ar)))\" \\\n-\t    \"= #f\" \"test type eq? on not-equal types\"\n+\t    \"= #f\" \"test type equal? on not-equal types\"\n \n \tif {$lang == \"c++\"} {\n \t    gdb_scm_test_silent_cmd \"guile (define c (parse-and-eval \\\"c\\\"))\" \\"
    },
    {
      "sha": "bd5b14999d8a1a3b38d2d54a0040054c35be876a",
      "filename": "gdb/testsuite/gdb.guile/scm-value.exp",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62f2f198cdf2e006f27f61dfa6210d276d7a8e37/gdb/testsuite/gdb.guile/scm-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-value.exp?ref=62f2f198cdf2e006f27f61dfa6210d276d7a8e37",
      "patch": "@@ -132,21 +132,26 @@ proc test_value_in_inferior {} {\n \tgdb_test \"gu (print (value-lazy? inval))\" \\\n \t    \"#t\"\n \tgdb_test \"gu (define inval2 (value-add inval 1))\" \\\n-\t    \"ERROR: Cannot access memory at address 0x0.*\" $test\n+\t    \"ERROR: Cannot access memory at address 0x0.*\" \\\n+\t    \"$test, using value in value-add\"\n \tgdb_test \"gu (value-fetch-lazy! inval))\" \\\n-\t    \"ERROR: Cannot access memory at address 0x0.*\" $test\n+\t    \"ERROR: Cannot access memory at address 0x0.*\" \\\n+\t    \"$test, using value in value-fetch-lazy!\"\n     }\n     gdb_test_no_output \"gu (define argc-lazy (parse-and-eval \\\"argc\\\"))\"\n     gdb_test_no_output \"gu (define argc-notlazy (parse-and-eval \\\"argc\\\"))\"\n     gdb_test_no_output \"gu (value-fetch-lazy! argc-notlazy)\"\n-    gdb_test \"gu (print (value-lazy? argc-lazy))\" \"= #t\"\n+    gdb_test \"gu (print (value-lazy? argc-lazy))\" \"= #t\" \\\n+\t\"argc-lazy is initially lazy\"\n     gdb_test \"gu (print (value-lazy? argc-notlazy))\" \"= #f\"\n     gdb_test \"print argc\" \"= 1\" \"sanity check argc\"\n-    gdb_test \"gu (print (value-lazy? argc-lazy))\" \"= #t\"\n+    gdb_test \"gu (print (value-lazy? argc-lazy))\" \"= #t\" \\\n+\t\"argc-lazy is still lazy after argc is printed\"\n     gdb_test_no_output \"set argc=2\"\n     gdb_test \"gu (print argc-notlazy)\" \"= 1\"\n     gdb_test \"gu (print argc-lazy)\" \"= 2\"\n-    gdb_test \"gu (print (value-lazy? argc-lazy))\" \"= #f\"\n+    gdb_test \"gu (print (value-lazy? argc-lazy))\" \"= #f\" \\\n+\t\"argc-lazy is no longer lazy\"\n \n     # Test string fetches, both partial and whole.\n     gdb_test \"print st\" \"\\\"divide et impera\\\"\"\n@@ -239,7 +244,8 @@ proc test_inferior_function_call {} {\n \t\"= void\"\n \n     # Correct inferior call with arguments.\n-    gdb_test \"p/x fp2\" \"= $hex.*\"\n+    gdb_test \"p/x fp2\" \"= $hex.*\" \\\n+\t\"place fp2 into value history, the first time\"\n     gdb_scm_test_silent_cmd \"gu (define fp2 (history-ref 0))\" \\\n \t\"get fp2 value from history\"\n     gdb_scm_test_silent_cmd \"gu (set! fp2 (value-dereference fp2))\" \\\n@@ -255,7 +261,8 @@ proc test_inferior_function_call {} {\n \t\"ERROR: .*: Wrong type argument in position 1 \\\\(expecting function \\\\(value of TYPE_CODE_FUNC\\\\)\\\\): .*\"\n \n     # Incorrect number of arguments.\n-    gdb_test \"p/x fp2\" \"= $hex.*\"\n+    gdb_test \"p/x fp2\" \"= $hex.*\" \\\n+\t\"place fp2 into value history, the second time\"\n     gdb_scm_test_silent_cmd \"gu (define fp3 (history-ref 0))\" \\\n \t\"get fp3 value from history\"\n     gdb_scm_test_silent_cmd \"gu (set! fp3 (value-dereference fp3))\" \\\n@@ -334,7 +341,7 @@ proc test_subscript_regression {exefile lang} {\n     }\n \n     gdb_breakpoint [gdb_get_line_number \"break to inspect struct and union\"]\n-    gdb_continue_to_breakpoint \"break to inspect struct and union\"\n+    gdb_continue_to_breakpoint \"break to inspect struct and union in $lang\"\n \n     gdb_scm_test_silent_cmd \"gu (define intv (make-value 1))\" \\\n \t\"Create int value for subscript test\""
    }
  ]
}