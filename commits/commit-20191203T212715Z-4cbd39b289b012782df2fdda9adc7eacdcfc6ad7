{
  "sha": "4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGNiZDM5YjI4OWIwMTI3ODJkZjJmZGRhOWFkYzdlYWNkY2ZjNmFkNw==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-03T00:58:35Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-03T21:27:15Z"
    },
    "message": "Replace hash function from bcache with fast_hash\n\nThis function is not just slower than xxhash, it is slower than\neven libiberty's iterative_hash, so there does not seem to be\na reason for it to exist.\n\n------------------------------------------------------------\nBenchmark                     Time           CPU Iterations\n------------------------------------------------------------\nBM_xxh3                      11 ns         11 ns   66127192\nBM_xxh32                     19 ns         19 ns   36792609\nBM_xxh64                     16 ns         16 ns   42941328\nBM_city32                    26 ns         26 ns   27028370\nBM_city64                    17 ns         17 ns   40472793\nBM_iterative_hash            77 ns         77 ns    9088854\nBM_bcache_hash              125 ns        125 ns    5599232\n\ngdb/ChangeLog:\n\n2019-12-03  Christian Biesinger  <cbiesinger@google.com>\n\n\t* bcache.c (hash): Remove.\n\t(hash_continue): Remove.\n\t* bcache.h (hash): Remove.\n\t(hash_continue): Remove.\n\t(struct bcache) <ctor>: Update.\n\t* psymtab.c (psymbol_hash): Update.\n\t* stabsread.c (hashname): Update.\n\t* utils.h (fast_hash): Add an argument for a start value,\n\tdefaulting to zero.\n\nChange-Id: I107f013eda5fdd3293326b5a206be43155dae0f8",
    "tree": {
      "sha": "f52aba927c48c83dca2923c7c3c0c55657ca29c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f52aba927c48c83dca2923c7c3c0c55657ca29c1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "82f910ea9cce04b0faabfcd022d9d8949567541e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82f910ea9cce04b0faabfcd022d9d8949567541e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/82f910ea9cce04b0faabfcd022d9d8949567541e"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 32,
    "deletions": 44
  },
  "files": [
    {
      "sha": "d12bd1c5a5767dee4b3959690b3a21404bce1082",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
      "patch": "@@ -1,3 +1,15 @@\n+2019-12-03  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* bcache.c (hash): Remove.\n+\t(hash_continue): Remove.\n+\t* bcache.h (hash): Remove.\n+\t(hash_continue): Remove.\n+\t(struct bcache) <ctor>: Update.\n+\t* psymtab.c (psymbol_hash): Update.\n+\t* stabsread.c (hashname): Update.\n+\t* utils.h (fast_hash): Add an argument for a start value,\n+\tdefaulting to zero.\n+\n 2019-12-03  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \t* symtab.c (symbol_cache_clear_slot):  Move close to cleared type.\n \t(destroy_block_symbol_cache): New function."
    },
    {
      "sha": "497efe96cbffa8280772d871e4e0e0d472c635a5",
      "filename": "gdb/bcache.c",
      "status": "modified",
      "additions": 0,
      "deletions": 25,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/bcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/bcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.c?ref=4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
      "patch": "@@ -51,31 +51,6 @@ struct bstring\n   d;\n };\n \n-/* The old hash function was stolen from SDBM. This is what DB 3.0\n-   uses now, and is better than the old one.  */\n-\f\n-unsigned long\n-hash(const void *addr, int length)\n-{\n-  return hash_continue (addr, length, 0);\n-}\n-\n-/* Continue the calculation of the hash H at the given address.  */\n-\n-unsigned long\n-hash_continue (const void *addr, int length, unsigned long h)\n-{\n-  const unsigned char *k, *e;\n-\n-  k = (const unsigned char *)addr;\n-  e = k+length;\n-  for (; k< e;++k)\n-    {\n-      h *=16777619;\n-      h ^= *k;\n-    }\n-  return (h);\n-}\n \f\n /* Growing the bcache's hash table.  */\n "
    },
    {
      "sha": "f26f79dca39c1191e1c60f8fab304e08bb4622e5",
      "filename": "gdb/bcache.h",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/bcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/bcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.h?ref=4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
      "patch": "@@ -138,23 +138,18 @@\n \n struct bstring;\n \n-/* The hash functions */\n-extern unsigned long hash (const void *addr, int length);\n-extern unsigned long hash_continue (const void *addr, int length,\n-                                    unsigned long h);\n-\n struct bcache\n {\n   /* Allocate a bcache.  HASH_FN and COMPARE_FN can be used to pass in\n      custom hash, and compare functions to be used by this bcache.  If\n-     HASH_FUNCTION is NULL hash() is used and if COMPARE_FUNCTION is\n+     HASH_FUNCTION is NULL fast_hash() is used and if COMPARE_FUNCTION is\n      NULL memcmp() is used.  */\n \n   explicit bcache (unsigned long (*hash_fn)(const void *,\n \t\t\t\t\t    int length) = nullptr,\n \t\t   int (*compare_fn)(const void *, const void *,\n \t\t\t\t     int length) = nullptr)\n-    : m_hash_function (hash_fn == nullptr ? hash : hash_fn),\n+    : m_hash_function (hash_fn == nullptr ? default_hash : hash_fn),\n       m_compare_function (compare_fn == nullptr ? compare : compare_fn)\n   {\n   }\n@@ -217,6 +212,12 @@ struct bcache\n   /* Default compare function.  */\n   static int compare (const void *addr1, const void *addr2, int length);\n \n+  /* Default hash function.  */\n+  static unsigned long default_hash (const void *ptr, int length)\n+  {\n+    return fast_hash (ptr, length, 0);\n+  }\n+\n   /* Expand the hash table.  */\n   void expand_hash_table ();\n };"
    },
    {
      "sha": "2cbc6d4f65f7207e7b244b8cae4ccb1da0b64d03",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
      "patch": "@@ -1530,14 +1530,13 @@ psymbol_hash (const void *addr, int length)\n   unsigned int domain = psymbol->domain;\n   unsigned int theclass = psymbol->aclass;\n \n-  h = hash_continue (&psymbol->ginfo.value, sizeof (psymbol->ginfo.value), h);\n-  h = hash_continue (&lang, sizeof (unsigned int), h);\n-  h = hash_continue (&domain, sizeof (unsigned int), h);\n-  h = hash_continue (&theclass, sizeof (unsigned int), h);\n+  h = fast_hash (&psymbol->ginfo.value, sizeof (psymbol->ginfo.value), h);\n+  h = fast_hash (&lang, sizeof (unsigned int), h);\n+  h = fast_hash (&domain, sizeof (unsigned int), h);\n+  h = fast_hash (&theclass, sizeof (unsigned int), h);\n   /* Note that psymbol names are interned via symbol_set_names, so\n      there's no need to hash the contents of the name here.  */\n-  h = hash_continue (&psymbol->ginfo.name,\n-\t\t     sizeof (psymbol->ginfo.name), h);\n+  h = fast_hash (&psymbol->ginfo.name, sizeof (psymbol->ginfo.name), h);\n \n   return h;\n }"
    },
    {
      "sha": "91a73dd10db94bcbc46d36f544619ed235d0a432",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
      "patch": "@@ -4778,7 +4778,7 @@ find_name_end (const char *name)\n int\n hashname (const char *name)\n {\n-  return hash (name, strlen (name)) % HASHSIZE;\n+  return fast_hash (name, strlen (name)) % HASHSIZE;\n }\n \n /* Initializer for this module.  */"
    },
    {
      "sha": "c8337f2301790b7bb4e481530d9f6e55747b53d4",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cbd39b289b012782df2fdda9adc7eacdcfc6ad7/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=4cbd39b289b012782df2fdda9adc7eacdcfc6ad7",
      "patch": "@@ -571,17 +571,18 @@ extern void copy_bitwise (gdb_byte *dest, ULONGEST dest_offset,\n \t\t\t  const gdb_byte *source, ULONGEST source_offset,\n \t\t\t  ULONGEST nbits, int bits_big_endian);\n \n-/* A fast hashing function.  This can be used to hash strings in a fast way\n+/* A fast hashing function.  This can be used to hash data in a fast way\n    when the length is known.  If no fast hashing library is available, falls\n-   back to iterative_hash from libiberty.  */\n+   back to iterative_hash from libiberty.  START_VALUE can be set to\n+   continue hashing from a previous value.  */\n \n static inline unsigned int\n-fast_hash (const char* str, size_t len)\n+fast_hash (const void *ptr, size_t len, unsigned int start_value = 0)\n {\n #ifdef HAVE_LIBXXHASH\n-  return XXH64 (str, len, 0);\n+  return XXH64 (ptr, len, start_value);\n #else\n-  return iterative_hash (str, len, 0);\n+  return iterative_hash (ptr, len, start_value);\n #endif\n }\n "
    }
  ]
}