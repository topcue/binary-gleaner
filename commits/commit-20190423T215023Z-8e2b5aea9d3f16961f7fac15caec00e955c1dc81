{
  "sha": "8e2b5aea9d3f16961f7fac15caec00e955c1dc81",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGUyYjVhZWE5ZDNmMTY5NjFmN2ZhYzE1Y2FlYzAwZTk1NWMxZGM4MQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:37:03Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:23Z"
    },
    "message": "gdb/mep: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* mep-tdep.c (mep_unwind_pc): Delete.\n\t(mep_unwind_sp): Delete.\n\t(mep_dummy_id): Delete.\n\t(mep_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "32d8554c6838ba31b28622b647a841683c00a2ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/32d8554c6838ba31b28622b647a841683c00a2ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e2b5aea9d3f16961f7fac15caec00e955c1dc81",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e2b5aea9d3f16961f7fac15caec00e955c1dc81",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e2b5aea9d3f16961f7fac15caec00e955c1dc81",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e2b5aea9d3f16961f7fac15caec00e955c1dc81/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 8,
    "deletions": 29
  },
  "files": [
    {
      "sha": "f819b1ba1394a4d8f701cae470ebc3d0eb8e2a1a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e2b5aea9d3f16961f7fac15caec00e955c1dc81/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e2b5aea9d3f16961f7fac15caec00e955c1dc81/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8e2b5aea9d3f16961f7fac15caec00e955c1dc81",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* mep-tdep.c (mep_unwind_pc): Delete.\n+\t(mep_unwind_sp): Delete.\n+\t(mep_dummy_id): Delete.\n+\t(mep_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* m68hc11-tdep.c (m68hc11_unwind_pc): Delete."
    },
    {
      "sha": "5b1d64c991cfa41256766f5fcd48f49bdab3fcb8",
      "filename": "gdb/mep-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 29,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e2b5aea9d3f16961f7fac15caec00e955c1dc81/gdb/mep-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e2b5aea9d3f16961f7fac15caec00e955c1dc81/gdb/mep-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mep-tdep.c?ref=8e2b5aea9d3f16961f7fac15caec00e955c1dc81",
      "patch": "@@ -2061,23 +2061,6 @@ static const struct frame_unwind mep_frame_unwind = {\n   default_frame_sniffer\n };\n \n-\n-/* Our general unwinding function can handle unwinding the PC.  */\n-static CORE_ADDR\n-mep_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, MEP_PC_REGNUM);\n-}\n-\n-\n-/* Our general unwinding function can handle unwinding the SP.  */\n-static CORE_ADDR\n-mep_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, MEP_SP_REGNUM);\n-}\n-\n-\n \f\n /* Return values.  */\n \n@@ -2334,15 +2317,6 @@ mep_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   return sp;\n }\n \n-\n-static struct frame_id\n-mep_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  CORE_ADDR sp = get_frame_register_unsigned (this_frame, MEP_SP_REGNUM);\n-  return frame_id_build (sp, get_frame_pc (this_frame));\n-}\n-\n-\n \f\n /* Initialization.  */\n \n@@ -2461,8 +2435,6 @@ mep_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   /* Frames and frame unwinding.  */\n   frame_unwind_append_unwinder (gdbarch, &mep_frame_unwind);\n-  set_gdbarch_unwind_pc (gdbarch, mep_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, mep_unwind_sp);\n   set_gdbarch_inner_than (gdbarch, core_addr_lessthan);\n   set_gdbarch_frame_args_skip (gdbarch, 0);\n \n@@ -2472,7 +2444,6 @@ mep_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   /* Inferior function calls.  */\n   set_gdbarch_frame_align (gdbarch, mep_frame_align);\n   set_gdbarch_push_dummy_call (gdbarch, mep_push_dummy_call);\n-  set_gdbarch_dummy_id (gdbarch, mep_dummy_id);\n \n   return gdbarch;\n }"
    }
  ]
}