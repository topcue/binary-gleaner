{
  "sha": "b7e60d85da12a1819671473db8550c9f076e8f38",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjdlNjBkODVkYTEyYTE4MTk2NzE0NzNkYjg1NTBjOWYwNzZlOGYzOA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-06T18:29:19Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-06T18:29:19Z"
    },
    "message": "Eliminate fork_info::clobber_regs\n\nAll fork_save_infrun_state callers pass '1' as CLOBBER_REGS nowadays.\n\nThe larger hunk in fork_save_infrun_state is just a reindentation.\n\ngdb/ChangeLog:\n2019-03-06  Pedro Alves  <palves@redhat.com>\n\n\t* linux-fork.c (fork_info::clobber_regs): Delete.\n\t(fork_load_infrun_state): Remove reference to 'clobber_regs'.\n\t(fork_save_infrun_state): Remove 'clobber_regs' parameter.  Update\n\tcomment.  Adjust.\n\t(scoped_switch_fork_info::scoped_switch_fork_info)\n\t(checkpoint_command, linux_fork_context): Adjust\n\tfork_save_infrun_state calls.",
    "tree": {
      "sha": "113919f762a9afb6f61c521403726046d1b7a5aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/113919f762a9afb6f61c521403726046d1b7a5aa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b7e60d85da12a1819671473db8550c9f076e8f38",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7e60d85da12a1819671473db8550c9f076e8f38",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b7e60d85da12a1819671473db8550c9f076e8f38",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7e60d85da12a1819671473db8550c9f076e8f38/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e52c971f17ac747a065388b54a909f44b5582cd9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e52c971f17ac747a065388b54a909f44b5582cd9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e52c971f17ac747a065388b54a909f44b5582cd9"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 45,
    "deletions": 44
  },
  "files": [
    {
      "sha": "14231bacacee8e1789472697e7daf9c07a776326",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b7e60d85da12a1819671473db8550c9f076e8f38/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b7e60d85da12a1819671473db8550c9f076e8f38/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b7e60d85da12a1819671473db8550c9f076e8f38",
      "patch": "@@ -1,3 +1,13 @@\n+2019-03-06  Pedro Alves  <palves@redhat.com>\n+\n+\t* linux-fork.c (fork_info::clobber_regs): Delete.\n+\t(fork_load_infrun_state): Remove reference to 'clobber_regs'.\n+\t(fork_save_infrun_state): Remove 'clobber_regs' parameter.  Update\n+\tcomment.  Adjust.\n+\t(scoped_switch_fork_info::scoped_switch_fork_info)\n+\t(checkpoint_command, linux_fork_context): Adjust\n+\tfork_save_infrun_state calls.\n+\n 2019-03-06  Pedro Alves  <palves@redhat.com>\n \n \t* linux-fork.c (inf_has_multiple_thread_cb): Delete."
    },
    {
      "sha": "51e8fddbc2351cde5ca879a1df3882f10f6f44c0",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 35,
      "deletions": 44,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b7e60d85da12a1819671473db8550c9f076e8f38/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b7e60d85da12a1819671473db8550c9f076e8f38/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=b7e60d85da12a1819671473db8550c9f076e8f38",
      "patch": "@@ -77,9 +77,6 @@ struct fork_info\n \n   CORE_ADDR pc = 0;\n \n-  /* True if we should restore saved regs.  */\n-  int clobber_regs = 0;\n-\n   /* Set of open file descriptors' offsets.  */\n   off_t *filepos = nullptr;\n \n@@ -223,7 +220,7 @@ fork_load_infrun_state (struct fork_info *fp)\n \n   linux_nat_switch_fork (fp->ptid);\n \n-  if (fp->savedregs && fp->clobber_regs)\n+  if (fp->savedregs)\n     get_current_regcache ()->restore (fp->savedregs);\n \n   registers_changed ();\n@@ -245,11 +242,10 @@ fork_load_infrun_state (struct fork_info *fp)\n     }\n }\n \n-/* Save infrun state for the fork PTID.\n-   Exported for use by linux child_follow_fork.  */\n+/* Save infrun state for the fork FP.  */\n \n static void\n-fork_save_infrun_state (struct fork_info *fp, int clobber_regs)\n+fork_save_infrun_state (struct fork_info *fp)\n {\n   char path[PATH_MAX];\n   struct dirent *de;\n@@ -260,44 +256,39 @@ fork_save_infrun_state (struct fork_info *fp, int clobber_regs)\n \n   fp->savedregs = new readonly_detached_regcache (*get_current_regcache ());\n   fp->pc = regcache_read_pc (get_current_regcache ());\n-  fp->clobber_regs = clobber_regs;\n \n-  if (clobber_regs)\n+  /* Now save the 'state' (file position) of all open file descriptors.\n+     Unfortunately fork does not take care of that for us...  */\n+  snprintf (path, PATH_MAX, \"/proc/%ld/fd\", (long) fp->ptid.pid ());\n+  if ((d = opendir (path)) != NULL)\n     {\n-      /* Now save the 'state' (file position) of all open file descriptors.\n-\t Unfortunately fork does not take care of that for us...  */\n-      snprintf (path, PATH_MAX, \"/proc/%ld/fd\",\n-\t\t(long) fp->ptid.pid ());\n-      if ((d = opendir (path)) != NULL)\n+      long tmp;\n+\n+      fp->maxfd = 0;\n+      while ((de = readdir (d)) != NULL)\n \t{\n-\t  long tmp;\n-\n-\t  fp->maxfd = 0;\n-\t  while ((de = readdir (d)) != NULL)\n-\t    {\n-\t      /* Count open file descriptors (actually find highest\n-\t\t numbered).  */\n-\t      tmp = strtol (&de->d_name[0], NULL, 10);\n-\t      if (fp->maxfd < tmp)\n-\t\tfp->maxfd = tmp;\n-\t    }\n-\t  /* Allocate array of file positions.  */\n-\t  fp->filepos = XRESIZEVEC (off_t, fp->filepos, fp->maxfd + 1);\n-\n-\t  /* Initialize to -1 (invalid).  */\n-\t  for (tmp = 0; tmp <= fp->maxfd; tmp++)\n-\t    fp->filepos[tmp] = -1;\n-\n-\t  /* Now find actual file positions.  */\n-\t  rewinddir (d);\n-\t  while ((de = readdir (d)) != NULL)\n-\t    if (isdigit (de->d_name[0]))\n-\t      {\n-\t\ttmp = strtol (&de->d_name[0], NULL, 10);\n-\t\tfp->filepos[tmp] = call_lseek (tmp, 0, SEEK_CUR);\n-\t      }\n-\t  closedir (d);\n+\t  /* Count open file descriptors (actually find highest\n+\t     numbered).  */\n+\t  tmp = strtol (&de->d_name[0], NULL, 10);\n+\t  if (fp->maxfd < tmp)\n+\t    fp->maxfd = tmp;\n \t}\n+      /* Allocate array of file positions.  */\n+      fp->filepos = XRESIZEVEC (off_t, fp->filepos, fp->maxfd + 1);\n+\n+      /* Initialize to -1 (invalid).  */\n+      for (tmp = 0; tmp <= fp->maxfd; tmp++)\n+\tfp->filepos[tmp] = -1;\n+\n+      /* Now find actual file positions.  */\n+      rewinddir (d);\n+      while ((de = readdir (d)) != NULL)\n+\tif (isdigit (de->d_name[0]))\n+\t  {\n+\t    tmp = strtol (&de->d_name[0], NULL, 10);\n+\t    fp->filepos[tmp] = call_lseek (tmp, 0, SEEK_CUR);\n+\t  }\n+      closedir (d);\n     }\n }\n \n@@ -421,7 +412,7 @@ class scoped_switch_fork_info\n \tgdb_assert (m_oldfp != nullptr);\n \tnewfp = find_fork_ptid (pptid);\n \tgdb_assert (newfp != nullptr);\n-\tfork_save_infrun_state (m_oldfp, 1);\n+\tfork_save_infrun_state (m_oldfp);\n \tremove_breakpoints ();\n \tfork_load_infrun_state (newfp);\n \tinsert_breakpoints ();\n@@ -718,7 +709,7 @@ checkpoint_command (const char *args, int from_tty)\n       fork_list.emplace_front (inferior_ptid.pid ());\n     }\n \n-  fork_save_infrun_state (fp, 1);\n+  fork_save_infrun_state (fp);\n   fp->parent_ptid = last_target_ptid;\n }\n \n@@ -733,7 +724,7 @@ linux_fork_context (struct fork_info *newfp, int from_tty)\n   oldfp = find_fork_ptid (inferior_ptid);\n   gdb_assert (oldfp != NULL);\n \n-  fork_save_infrun_state (oldfp, 1);\n+  fork_save_infrun_state (oldfp);\n   remove_breakpoints ();\n   fork_load_infrun_state (newfp);\n   insert_breakpoints ();"
    }
  ]
}