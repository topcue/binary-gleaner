{
  "sha": "e758e19c596f8d0683f6c8ca750eb4e79071523d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTc1OGUxOWM1OTZmOGQwNjgzZjZjOGNhNzUwZWI0ZTc5MDcxNTIzZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:59Z"
    },
    "message": "Share some inferior-related Windows code\n\nThis adds a couple of functions to nat/windows-nat.c and changes gdb\nand gdbserver to use them.  One function checks the list of pending\nstops for a match (not yet used by gdbserver, but will be in a\nsubsequent patch); and the other is a wrapper for ContinueDebugEvent\nthat always uses the last \"real\" stop event.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (windows_continue): Use matching_pending_stop and\n\tcontinue_last_debug_event.\n\t* nat/windows-nat.h (matching_pending_stop)\n\t(continue_last_debug_event): Declare.\n\t* nat/windows-nat.c (DEBUG_EVENTS): New define.\n\t(matching_pending_stop, continue_last_debug_event): New\n\tfunctions.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.c (child_continue): Call continue_last_debug_event.",
    "tree": {
      "sha": "a353862ef878e18d32918f5c5ed803836ada23cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a353862ef878e18d32918f5c5ed803836ada23cd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e758e19c596f8d0683f6c8ca750eb4e79071523d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e758e19c596f8d0683f6c8ca750eb4e79071523d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e758e19c596f8d0683f6c8ca750eb4e79071523d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e758e19c596f8d0683f6c8ca750eb4e79071523d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8d30e395779603a8d36fa8bdfddba88a312552f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d30e395779603a8d36fa8bdfddba88a312552f4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8d30e395779603a8d36fa8bdfddba88a312552f4"
    }
  ],
  "stats": {
    "total": 108,
    "additions": 77,
    "deletions": 31
  },
  "files": [
    {
      "sha": "3929faf089edfad4435f11ee96ca3fffa46112d0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e758e19c596f8d0683f6c8ca750eb4e79071523d",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (windows_continue): Use matching_pending_stop and\n+\tcontinue_last_debug_event.\n+\t* nat/windows-nat.h (matching_pending_stop)\n+\t(continue_last_debug_event): Declare.\n+\t* nat/windows-nat.c (DEBUG_EVENTS): New define.\n+\t(matching_pending_stop, continue_last_debug_event): New\n+\tfunctions.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (MS_VC_EXCEPTION): Move to nat/windows-nat.c."
    },
    {
      "sha": "2c2454b6f6f7768e86e9836d4ca5b2476e3ce7ec",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=e758e19c596f8d0683f6c8ca750eb4e79071523d",
      "patch": "@@ -37,6 +37,10 @@ DWORD desired_stop_thread_id = -1;\n std::vector<pending_stop> pending_stops;\n EXCEPTION_RECORD siginfo_er;\n \n+/* Note that 'debug_events' must be locally defined in the relevant\n+   functions.  */\n+#define DEBUG_EVENTS(x)\tif (debug_events) debug_printf x\n+\n windows_thread_info::~windows_thread_info ()\n {\n   CloseHandle (h);\n@@ -312,4 +316,46 @@ handle_exception (struct target_waitstatus *ourstatus, bool debug_exceptions)\n #undef DEBUG_EXCEPTION_SIMPLE\n }\n \n+/* See nat/windows-nat.h.  */\n+\n+bool\n+matching_pending_stop (bool debug_events)\n+{\n+  /* If there are pending stops, and we might plausibly hit one of\n+     them, we don't want to actually continue the inferior -- we just\n+     want to report the stop.  In this case, we just pretend to\n+     continue.  See the comment by the definition of \"pending_stops\"\n+     for details on why this is needed.  */\n+  for (const auto &item : pending_stops)\n+    {\n+      if (desired_stop_thread_id == -1\n+\t  || desired_stop_thread_id == item.thread_id)\n+\t{\n+\t  DEBUG_EVENTS ((\"windows_continue - pending stop anticipated, \"\n+\t\t\t \"desired=0x%x, item=0x%x\\n\",\n+\t\t\t desired_stop_thread_id, item.thread_id));\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+/* See nat/windows-nat.h.  */\n+\n+BOOL\n+continue_last_debug_event (DWORD continue_status, bool debug_events)\n+{\n+  DEBUG_EVENTS ((\"ContinueDebugEvent (cpid=%d, ctid=0x%x, %s);\\n\",\n+\t\t  (unsigned) last_wait_event.dwProcessId,\n+\t\t  (unsigned) last_wait_event.dwThreadId,\n+\t\t  continue_status == DBG_CONTINUE ?\n+\t\t  \"DBG_CONTINUE\" : \"DBG_EXCEPTION_NOT_HANDLED\"));\n+\n+  return ContinueDebugEvent (last_wait_event.dwProcessId,\n+\t\t\t     last_wait_event.dwThreadId,\n+\t\t\t     continue_status);\n+}\n+\n+\n }"
    },
    {
      "sha": "0e9316577ba9efd267d6a075066c025f46bfc1e4",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=e758e19c596f8d0683f6c8ca750eb4e79071523d",
      "patch": "@@ -225,6 +225,19 @@ typedef enum\n extern handle_exception_result handle_exception\n   (struct target_waitstatus *ourstatus, bool debug_exceptions);\n \n+/* Return true if there is a pending stop matching\n+   desired_stop_thread_id.  If DEBUG_EVENTS is true, logging will be\n+   enabled.  */\n+\n+extern bool matching_pending_stop (bool debug_events);\n+\n+/* A simple wrapper for ContinueDebugEvent that continues the last\n+   waited-for event.  If DEBUG_EVENTS is true, logging will be\n+   enabled.  */\n+\n+extern BOOL continue_last_debug_event (DWORD continue_status,\n+\t\t\t\t       bool debug_events);\n+\n }\n \n #endif"
    },
    {
      "sha": "d04dc06f3bf7cd7bfd31f0addff2827f0af05729",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 25,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=e758e19c596f8d0683f6c8ca750eb4e79071523d",
      "patch": "@@ -1239,28 +1239,8 @@ windows_continue (DWORD continue_status, int id, int killed)\n \n   desired_stop_thread_id = id;\n \n-  /* If there are pending stops, and we might plausibly hit one of\n-     them, we don't want to actually continue the inferior -- we just\n-     want to report the stop.  In this case, we just pretend to\n-     continue.  See the comment by the definition of \"pending_stops\"\n-     for details on why this is needed.  */\n-  for (const auto &item : pending_stops)\n-    {\n-      if (desired_stop_thread_id == -1\n-\t  || desired_stop_thread_id == item.thread_id)\n-\t{\n-\t  DEBUG_EVENTS ((\"windows_continue - pending stop anticipated, \"\n-\t\t\t \"desired=0x%x, item=0x%x\\n\",\n-\t\t\t desired_stop_thread_id, item.thread_id));\n-\t  return TRUE;\n-\t}\n-    }\n-\n-  DEBUG_EVENTS ((\"ContinueDebugEvent (cpid=%d, ctid=0x%x, %s);\\n\",\n-\t\t  (unsigned) last_wait_event.dwProcessId,\n-\t\t  (unsigned) last_wait_event.dwThreadId,\n-\t\t  continue_status == DBG_CONTINUE ?\n-\t\t  \"DBG_CONTINUE\" : \"DBG_EXCEPTION_NOT_HANDLED\"));\n+  if (matching_pending_stop (debug_events))\n+    return TRUE;\n \n   for (windows_thread_info *th : thread_list)\n     if (id == -1 || id == (int) th->tid)\n@@ -1333,9 +1313,7 @@ windows_continue (DWORD continue_status, int id, int killed)\n \tth->suspend ();\n       }\n \n-  res = ContinueDebugEvent (last_wait_event.dwProcessId,\n-\t\t\t    last_wait_event.dwThreadId,\n-\t\t\t    continue_status);\n+  res = continue_last_debug_event (continue_status, debug_events);\n \n   if (!res)\n     error (_(\"Failed to resume program execution\""
    },
    {
      "sha": "6793795376ea2b9ebc8af541fb8c50a677cc0a65",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=e758e19c596f8d0683f6c8ca750eb4e79071523d",
      "patch": "@@ -1,3 +1,7 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.c (child_continue): Call continue_last_debug_event.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.c (handle_exception): Remove."
    },
    {
      "sha": "33f6470015376774c0ebe377ec1a6dcfe27fdf6f",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e758e19c596f8d0683f6c8ca750eb4e79071523d/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=e758e19c596f8d0683f6c8ca750eb4e79071523d",
      "patch": "@@ -433,12 +433,7 @@ child_continue (DWORD continue_status, int thread_id)\n     });\n   faked_breakpoint = 0;\n \n-  if (!ContinueDebugEvent (current_event.dwProcessId,\n-\t\t\t   current_event.dwThreadId,\n-\t\t\t   continue_status))\n-    return FALSE;\n-\n-  return TRUE;\n+  return continue_last_debug_event (continue_status, debug_threads);\n }\n \n /* Fetch register(s) from the current thread context.  */"
    }
  ]
}