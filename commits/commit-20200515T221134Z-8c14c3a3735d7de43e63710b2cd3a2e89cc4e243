{
  "sha": "8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGMxNGMzYTM3MzVkN2RlNDNlNjM3MTBiMmNkM2EyZTg5Y2M0ZTI0Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-15T22:11:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-15T22:11:34Z"
    },
    "message": "Remove allocate_symbol et al\n\nThis removes allocate_symbol, allocate_template_symbol, and\ninitialize_objfile_symbol in favor of changing the default values for\nsymbol members, and updating the one per-arch caller.\n\ngdb/ChangeLog\n2020-05-15  Tom Tromey  <tom@tromey.com>\n\n\t* language.c (language_alloc_type_symbol): Set\n\tSYMBOL_SECTION.\n\t* symtab.c (initialize_objfile_symbol): Remove.\n\t(allocate_symbol): Remove.\n\t(allocate_template_symbol): Remove.\n\t* dwarf2/read.c (fixup_go_packaging): Use \"new\".\n\t(new_symbol): Use \"new\".\n\t(read_variable): Don't call initialize_objfile_symbol.  Use\n\t\"new\".\n\t(read_func_scope): Use \"new\".\n\t* xcoffread.c (process_xcoff_symbol): Don't call\n\tinitialize_objfile_symbol.\n\t(SYMBOL_DUP): Remove.\n\t* coffread.c (process_coff_symbol, coff_read_enum_type): Use\n\t\"new\".\n\t* symtab.h (allocate_symbol, initialize_objfile_symbol)\n\t(allocate_template_symbol): Don't declare.\n\t(struct symbol): Add copy constructor.  Change defaults.\n\t* jit.c (finalize_symtab): Use \"new\".\n\t* ctfread.c (ctf_add_enum_member_cb, new_symbol, ctf_add_var_cb):\n\tUse \"new\".\n\t* stabsread.c (patch_block_stabs, define_symbol, read_enum_type)\n\t(common_block_end): Use \"new\".\n\t* mdebugread.c (parse_symbol): Use \"new\".\n\t(new_symbol): Likewise.",
    "tree": {
      "sha": "2fe8466fc509fbb3ddf291c3216c1a22aae7a129",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2fe8466fc509fbb3ddf291c3216c1a22aae7a129"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b4a1a8dbe6b15414c586d8fc6dbaecdcf4046f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b4a1a8dbe6b15414c586d8fc6dbaecdcf4046f3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b4a1a8dbe6b15414c586d8fc6dbaecdcf4046f3"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 52,
    "deletions": 71
  },
  "files": [
    {
      "sha": "4b6294f4faff146667c24201d832a71e6056cfc2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -1,3 +1,31 @@\n+2020-05-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* language.c (language_alloc_type_symbol): Set\n+\tSYMBOL_SECTION.\n+\t* symtab.c (initialize_objfile_symbol): Remove.\n+\t(allocate_symbol): Remove.\n+\t(allocate_template_symbol): Remove.\n+\t* dwarf2/read.c (fixup_go_packaging): Use \"new\".\n+\t(new_symbol): Use \"new\".\n+\t(read_variable): Don't call initialize_objfile_symbol.  Use\n+\t\"new\".\n+\t(read_func_scope): Use \"new\".\n+\t* xcoffread.c (process_xcoff_symbol): Don't call\n+\tinitialize_objfile_symbol.\n+\t(SYMBOL_DUP): Remove.\n+\t* coffread.c (process_coff_symbol, coff_read_enum_type): Use\n+\t\"new\".\n+\t* symtab.h (allocate_symbol, initialize_objfile_symbol)\n+\t(allocate_template_symbol): Don't declare.\n+\t(struct symbol): Add copy constructor.  Change defaults.\n+\t* jit.c (finalize_symtab): Use \"new\".\n+\t* ctfread.c (ctf_add_enum_member_cb, new_symbol, ctf_add_var_cb):\n+\tUse \"new\".\n+\t* stabsread.c (patch_block_stabs, define_symbol, read_enum_type)\n+\t(common_block_end): Use \"new\".\n+\t* mdebugread.c (parse_symbol): Use \"new\".\n+\t(new_symbol): Likewise.\n+\n 2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* NEWS: Mention changes to help and apropos."
    },
    {
      "sha": "7e3cb4a6fdac6bea698c5a13083eaaf391fd7bca",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -1556,7 +1556,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \t\t     union internal_auxent *aux,\n \t\t     struct objfile *objfile)\n {\n-  struct symbol *sym = allocate_symbol (objfile);\n+  struct symbol *sym = new (&objfile->objfile_obstack) symbol;\n   char *name;\n \n   name = cs->c_name;\n@@ -2095,7 +2095,7 @@ coff_read_enum_type (int index, int length, int lastsym,\n       switch (ms->c_sclass)\n \t{\n \tcase C_MOE:\n-\t  sym = allocate_symbol (objfile);\n+\t  sym = new (&objfile->objfile_obstack) symbol;\n \n \t  name = obstack_strdup (&objfile->objfile_obstack, name);\n \t  sym->set_linkage_name (name);"
    },
    {
      "sha": "74355a019b95afd485b4bc5a349cf9bb973db426",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -407,7 +407,7 @@ ctf_add_enum_member_cb (const char *name, int enum_value, void *arg)\n \n   if (name != NULL)\n     {\n-      struct symbol *sym = allocate_symbol (ccp->of);\n+      struct symbol *sym = new (&ccp->of->objfile_obstack) symbol;\n       OBJSTAT (ccp->of, n_syms++);\n \n       sym->set_language (language_c, &ccp->of->objfile_obstack);\n@@ -436,7 +436,7 @@ new_symbol (struct ctf_context *ccp, struct type *type, ctf_id_t tid)\n   gdb::unique_xmalloc_ptr<char> name (ctf_type_aname_raw (fp, tid));\n   if (name != NULL)\n     {\n-      sym = allocate_symbol (objfile);\n+      sym = new (&objfile->objfile_obstack) symbol;\n       OBJSTAT (objfile, n_syms++);\n \n       sym->set_language (language_c, &objfile->objfile_obstack);\n@@ -1071,7 +1071,7 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n \t  complaint (_(\"ctf_add_var_cb: %s has NO type (%ld)\"), name, id);\n \t  type = objfile_type (ccp->of)->builtin_error;\n \t}\n-\tsym = allocate_symbol (ccp->of);\n+\tsym = new (&ccp->of->objfile_obstack) symbol;\n \tOBJSTAT (ccp->of, n_syms++);\n \tSYMBOL_TYPE (sym) = type;\n \tSYMBOL_DOMAIN (sym) = VAR_DOMAIN;"
    },
    {
      "sha": "245ce07de748b55754f4502f7e250e46ea311ea7",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -9172,7 +9172,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n \t\t\t\t     saved_package_name);\n       struct symbol *sym;\n \n-      sym = allocate_symbol (objfile);\n+      sym = new (&objfile->objfile_obstack) symbol;\n       sym->set_language (language_go, &objfile->objfile_obstack);\n       sym->compute_and_set_names (saved_package_name, false, objfile->per_bfd);\n       /* This is not VAR_DOMAIN because we want a way to ensure a lookup of,\n@@ -12983,7 +12983,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n       if (child_die->tag == DW_TAG_template_type_param\n \t  || child_die->tag == DW_TAG_template_value_param)\n \t{\n-\t  templ_func = allocate_template_symbol (objfile);\n+\t  templ_func = new (&objfile->objfile_obstack) template_symbol;\n \t  templ_func->subclass = SYMBOL_TEMPLATE;\n \t  break;\n \t}\n@@ -13546,8 +13546,7 @@ read_variable (struct die_info *die, struct dwarf2_cu *cu)\n \t{\n \t  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n \n-\t  storage = new (&objfile->objfile_obstack) rust_vtable_symbol ();\n-\t  initialize_objfile_symbol (storage);\n+\t  storage = new (&objfile->objfile_obstack) rust_vtable_symbol;\n \t  storage->concrete_type = containing_type;\n \t  storage->subclass = SYMBOL_RUST_VTABLE;\n \t}\n@@ -20606,7 +20605,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n       if (space)\n \tsym = space;\n       else\n-\tsym = allocate_symbol (objfile);\n+\tsym = new (&objfile->objfile_obstack) symbol;\n       OBJSTAT (objfile, n_syms++);\n \n       /* Cache this symbol's name and the name's demangled form (if any).  */"
    },
    {
      "sha": "1b5ef46469e0ccd41709f74e03b153d02026f24c",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -655,7 +655,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n   for (gdb_block &gdb_block_iter : stab->blocks)\n     {\n       struct block *new_block = allocate_block (&objfile->objfile_obstack);\n-      struct symbol *block_name = allocate_symbol (objfile);\n+      struct symbol *block_name = new (&objfile->objfile_obstack) symbol;\n       struct type *block_type = arch_type (objfile->arch (),\n \t\t\t\t\t   TYPE_CODE_VOID,\n \t\t\t\t\t   TARGET_CHAR_BIT,"
    },
    {
      "sha": "3dc22a7a4798ddae67eef5d278ef87dec54f98b3",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -1041,6 +1041,7 @@ language_alloc_type_symbol (enum language lang, struct type *type)\n   symbol->set_language (lang, nullptr);\n   symbol->owner.arch = gdbarch;\n   SYMBOL_OBJFILE_OWNED (symbol) = 0;\n+  SYMBOL_SECTION (symbol) = 0;\n   SYMBOL_TYPE (symbol) = type;\n   SYMBOL_DOMAIN (symbol) = VAR_DOMAIN;\n   SYMBOL_ACLASS_INDEX (symbol) = LOC_TYPEDEF;"
    },
    {
      "sha": "ba53512636e417dadfb581cf126d1a3a191c67f3",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -1056,7 +1056,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t\tFIELD_NAME (*f) = debug_info->ss + cur_fdr->issBase + tsym.iss;\n \t\tFIELD_BITSIZE (*f) = 0;\n \n-\t\tenum_sym = allocate_symbol (mdebugread_objfile);\n+\t\tenum_sym = new (&mdebugread_objfile->objfile_obstack) symbol;\n \t\tenum_sym->set_linkage_name\n \t\t  (obstack_strdup (&mdebugread_objfile->objfile_obstack,\n \t\t\t\t   f->name));\n@@ -4721,7 +4721,7 @@ new_block (enum block_type type, enum language language)\n static struct symbol *\n new_symbol (const char *name)\n {\n-  struct symbol *s = allocate_symbol (mdebugread_objfile);\n+  struct symbol *s = new (&mdebugread_objfile->objfile_obstack) symbol;\n \n   s->set_language (psymtab_language, &mdebugread_objfile->objfile_obstack);\n   s->compute_and_set_names (name, true, mdebugread_objfile->per_bfd);"
    },
    {
      "sha": "716b5f3f531d891e303c25c7d095f7be9629f816",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -423,7 +423,7 @@ patch_block_stabs (struct pending *symbols, struct pending_stabs *stabs,\n \t      /* On xcoff, if a global is defined and never referenced,\n \t         ld will remove it from the executable.  There is then\n \t         a N_GSYM stab for it, but no regular (C_EXT) symbol.  */\n-\t      sym = allocate_symbol (objfile);\n+\t      sym = new (&objfile->objfile_obstack) symbol;\n \t      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n \t      SYMBOL_ACLASS_INDEX (sym) = LOC_OPTIMIZED_OUT;\n \t      sym->set_linkage_name\n@@ -687,7 +687,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n      e.g. \":t10=*2\" or a nameless enum like \" :T16=ered:0,green:1,blue:2,;\" */\n   nameless = (p == string || ((string[0] == ' ') && (string[1] == ':')));\n \n-  current_symbol = sym = allocate_symbol (objfile);\n+  current_symbol = sym = new (&objfile->objfile_obstack) symbol;\n \n   if (processing_gcc_compilation)\n     {\n@@ -1307,7 +1307,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       if (synonym)\n         {\n           /* Create the STRUCT_DOMAIN clone.  */\n-          struct symbol *struct_sym = allocate_symbol (objfile);\n+          struct symbol *struct_sym = new (&objfile->objfile_obstack) symbol;\n \n           *struct_sym = *sym;\n           SYMBOL_ACLASS_INDEX (struct_sym) = LOC_TYPEDEF;\n@@ -1349,7 +1349,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       if (synonym)\n \t{\n \t  /* Clone the sym and then modify it.  */\n-\t  struct symbol *typedef_sym = allocate_symbol (objfile);\n+\t  struct symbol *typedef_sym = new (&objfile->objfile_obstack) symbol;\n \n \t  *typedef_sym = *sym;\n \t  SYMBOL_ACLASS_INDEX (typedef_sym) = LOC_TYPEDEF;\n@@ -3632,7 +3632,7 @@ read_enum_type (const char **pp, struct type *type,\n       if (nbits != 0)\n \treturn error_type (pp, objfile);\n \n-      sym = allocate_symbol (objfile);\n+      sym = new (&objfile->objfile_obstack) symbol;\n       sym->set_linkage_name (name);\n       sym->set_language (get_current_subfile ()->language,\n \t\t\t &objfile->objfile_obstack);\n@@ -4299,7 +4299,7 @@ common_block_end (struct objfile *objfile)\n       return;\n     }\n \n-  sym = allocate_symbol (objfile);\n+  sym = new (&objfile->objfile_obstack) symbol;\n   /* Note: common_block_name already saved on objfile_obstack.  */\n   sym->set_linkage_name (common_block_name);\n   SYMBOL_ACLASS_INDEX (sym) = LOC_BLOCK;"
    },
    {
      "sha": "16ebe4d39f41d7c3cf84e8d131078c014ede174d",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 0,
      "deletions": 36,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -6355,42 +6355,6 @@ initialize_ordinary_address_classes (void)\n \n \f\n \n-/* Initialize the symbol SYM, and mark it as being owned by an objfile.  */\n-\n-void\n-initialize_objfile_symbol (struct symbol *sym)\n-{\n-  SYMBOL_OBJFILE_OWNED (sym) = 1;\n-  SYMBOL_SECTION (sym) = -1;\n-}\n-\n-/* Allocate and initialize a new 'struct symbol' on OBJFILE's\n-   obstack.  */\n-\n-struct symbol *\n-allocate_symbol (struct objfile *objfile)\n-{\n-  struct symbol *result = new (&objfile->objfile_obstack) symbol ();\n-\n-  initialize_objfile_symbol (result);\n-\n-  return result;\n-}\n-\n-/* Allocate and initialize a new 'struct template_symbol' on OBJFILE's\n-   obstack.  */\n-\n-struct template_symbol *\n-allocate_template_symbol (struct objfile *objfile)\n-{\n-  struct template_symbol *result;\n-\n-  result = new (&objfile->objfile_obstack) template_symbol ();\n-  initialize_objfile_symbol (result);\n-\n-  return result;\n-}\n-\n /* See symtab.h.  */\n \n struct objfile *"
    },
    {
      "sha": "aaf42a576a41630405741737b9b4f0e8b5c48df5",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -1107,7 +1107,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n     /* Class-initialization of bitfields is only allowed in C++20.  */\n     : domain (UNDEF_DOMAIN),\n       aclass_index (0),\n-      is_objfile_owned (0),\n+      is_objfile_owned (1),\n       is_argument (0),\n       is_inlined (0),\n       maybe_copied (0),\n@@ -1120,12 +1120,14 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n       language_specific.obstack = nullptr;\n       m_language = language_unknown;\n       ada_mangled = 0;\n-      section = 0;\n+      section = -1;\n       /* GCC 4.8.5 (on CentOS 7) does not correctly compile class-\n          initialization of unions, so we initialize it manually here.  */\n       owner.symtab = nullptr;\n     }\n \n+  symbol (const symbol &) = default;\n+\n   /* Data type of value */\n \n   struct type *type = nullptr;\n@@ -2331,12 +2333,6 @@ const char *\n   demangle_for_lookup (const char *name, enum language lang,\n \t\t       demangle_result_storage &storage);\n \n-struct symbol *allocate_symbol (struct objfile *);\n-\n-void initialize_objfile_symbol (struct symbol *);\n-\n-struct template_symbol *allocate_template_symbol (struct objfile *);\n-\n /* Test to see if the symbol of language SYMBOL_LANGUAGE specified by\n    SYMNAME (which is already demangled for C++ symbols) matches\n    SYM_TEXT in the first SYM_TEXT_LEN characters.  If so, add it to"
    },
    {
      "sha": "93bdb9b6a6567827205b2a1dfa7d376b2ec40371",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c14c3a3735d7de43e63710b2cd3a2e89cc4e243/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=8c14c3a3735d7de43e63710b2cd3a2e89cc4e243",
      "patch": "@@ -1521,11 +1521,6 @@ read_xcoff_symtab (struct objfile *objfile, legacy_psymtab *pst)\n     }\n }\n \n-#define\tSYMBOL_DUP(SYMBOL1, SYMBOL2)\t\\\n-  (SYMBOL2) = new (&objfile->objfile_obstack) symbol (); \\\n-  *(SYMBOL2) = *(SYMBOL1);\n-\n-\n #define\tSYMNAME_ALLOC(NAME, ALLOCED)\t\\\n   ((ALLOCED) ? (NAME) : obstack_strdup (&objfile->objfile_obstack, \\\n \t\t\t\t\t(NAME)))\n@@ -1561,8 +1556,6 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n   if (name[0] == '.')\n     ++name;\n \n-  initialize_objfile_symbol (sym);\n-\n   /* default assumptions */\n   SET_SYMBOL_VALUE_ADDRESS (sym, cs->c_value + off);\n   SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n@@ -1578,7 +1571,7 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n       SYMBOL_TYPE (sym) = objfile_type (objfile)->nodebug_text_symbol;\n \n       SYMBOL_ACLASS_INDEX (sym) = LOC_BLOCK;\n-      SYMBOL_DUP (sym, sym2);\n+      sym2 = new (&objfile->objfile_obstack) symbol (*sym);\n \n       if (cs->c_sclass == C_EXT || C_WEAKEXT)\n \tadd_symbol_to_list (sym2, get_global_symbols ());"
    }
  ]
}