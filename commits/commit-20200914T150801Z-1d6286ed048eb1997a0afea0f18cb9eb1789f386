{
  "sha": "1d6286ed048eb1997a0afea0f18cb9eb1789f386",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWQ2Mjg2ZWQwNDhlYjE5OTdhMGFmZWEwZjE4Y2I5ZWIxNzg5ZjM4Ng==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:01Z"
    },
    "message": "gdb: add type::has_varargs / type::set_has_varargs\n\nAdd the `has_varargs` and `set_has_varargs` methods on `struct type`, in\norder to remove the `TYPE_VARARGS` macro.  In this patch, the macro is\nchanged to use the getter, so all the call sites of the macro that are\nused as a setter are changed to use the setter method directly.  The\nnext patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <has_varargs, set_has_varargs>: New methods.\n\t(TYPE_VARARGS): Use type::has_varargs, change all write call sites to\n\tuse type::set_has_varargs.\n\nChange-Id: I898a1093ae40808b37a7c6fced7f6fa2aae604de",
    "tree": {
      "sha": "48207320acbbca8f9252bb1d11ca41d3780c4564",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/48207320acbbca8f9252bb1d11ca41d3780c4564"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1d6286ed048eb1997a0afea0f18cb9eb1789f386",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d6286ed048eb1997a0afea0f18cb9eb1789f386",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1d6286ed048eb1997a0afea0f18cb9eb1789f386",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d6286ed048eb1997a0afea0f18cb9eb1789f386/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7f9f399b34b7e2278eb1e8d6b7653e2b38070c55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f9f399b34b7e2278eb1e8d6b7653e2b38070c55",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7f9f399b34b7e2278eb1e8d6b7653e2b38070c55"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 24,
    "deletions": 7
  },
  "files": [
    {
      "sha": "e8fecf714cfe881d7585eace66aab56dfd88d007",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <has_varargs, set_has_varargs>: New methods.\n+\t(TYPE_VARARGS): Use type::has_varargs, change all write call sites to\n+\tuse type::set_has_varargs.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_PROTOTYPED): Remove, replace all"
    },
    {
      "sha": "0237b486253d4786348d4dc8d1839a8c82a5de78",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "patch": "@@ -1142,7 +1142,7 @@ add_stt_func (struct ctf_context *ccp, unsigned long idx)\n   tid = ctf_lookup_by_symbol (ccp->fp, idx);\n   ftype = get_tid_type (ccp->of, tid);\n   if (finfo.ctc_flags & CTF_FUNC_VARARG)\n-    TYPE_VARARGS (ftype) = 1;\n+    ftype->set_has_varargs (true);\n   ftype->set_num_fields (argc);\n \n   /* If argc is 0, it has a \"void\" type.  */"
    },
    {
      "sha": "e61eda73de4b5238b60285adc484c1c45c1c9d21",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "patch": "@@ -17707,7 +17707,8 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  if (child_die->tag == DW_TAG_formal_parameter)\n \t    nparams++;\n \t  else if (child_die->tag == DW_TAG_unspecified_parameters)\n-\t    TYPE_VARARGS (ftype) = 1;\n+\t    ftype->set_has_varargs (true);\n+\n \t  child_die = child_die->sibling;\n \t}\n "
    },
    {
      "sha": "d87b8dae110aee34d435280710eb65d851a1fdad",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "patch": "@@ -665,7 +665,7 @@ fake_method::fake_method (type_instance_flags flags,\n       if (param_types[num_types - 1] == NULL)\n \t{\n \t  --num_types;\n-\t  TYPE_VARARGS (type) = 1;\n+\t  type->set_has_varargs (true);\n \t}\n       else if (check_typedef (param_types[num_types - 1])->code ()\n \t       == TYPE_CODE_VOID)"
    },
    {
      "sha": "2ff458af9089df3b4bc7bf8ae0a1d09212992216",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "patch": "@@ -552,7 +552,7 @@ lookup_function_type_with_arguments (struct type *type,\n       if (param_types[nparams - 1] == NULL)\n \t{\n \t  --nparams;\n-\t  TYPE_VARARGS (fn) = 1;\n+\t  fn->set_has_varargs (true);\n \t}\n       else if (check_typedef (param_types[nparams - 1])->code ()\n \t       == TYPE_CODE_VOID)\n@@ -1556,7 +1556,7 @@ smash_to_method_type (struct type *type, struct type *self_type,\n   type->set_fields (args);\n   type->set_num_fields (nargs);\n   if (varargs)\n-    TYPE_VARARGS (type) = 1;\n+    type->set_has_varargs (true);\n   TYPE_LENGTH (type) = 1;\t/* In practice, this is never needed.  */\n }\n "
    },
    {
      "sha": "e1b0d442f1c569baabf31f40ac1ad71cf19320d0",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d6286ed048eb1997a0afea0f18cb9eb1789f386/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "patch": "@@ -219,7 +219,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n /* * FIXME drow/2002-06-03:  Only used for methods, but applies as well\n    to functions.  */\n \n-#define TYPE_VARARGS(t)\t\t(TYPE_MAIN_TYPE (t)->flag_varargs)\n+#define TYPE_VARARGS(t)\t\t((t)->has_varargs ())\n \n /* * Identify a vector type.  Gcc is handling this by adding an extra\n    attribute to the array type.  We slurp that in as a new flag of a\n@@ -828,7 +828,7 @@ struct main_type\n   unsigned int m_flag_stub : 1;\n   unsigned int m_flag_target_stub : 1;\n   unsigned int m_flag_prototyped : 1;\n-  unsigned int flag_varargs : 1;\n+  unsigned int m_flag_varargs : 1;\n   unsigned int flag_vector : 1;\n   unsigned int flag_stub_supported : 1;\n   unsigned int flag_gnu_ifunc : 1;\n@@ -1108,6 +1108,16 @@ struct type\n     this->main_type->m_flag_prototyped = is_prototyped;\n   }\n \n+  bool has_varargs () const\n+  {\n+    return this->main_type->m_flag_varargs;\n+  }\n+\n+  void set_has_varargs (bool has_varargs)\n+  {\n+    this->main_type->m_flag_varargs = has_varargs;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    }
  ]
}