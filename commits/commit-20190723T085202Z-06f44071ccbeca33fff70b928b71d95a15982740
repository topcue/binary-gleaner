{
  "sha": "06f44071ccbeca33fff70b928b71d95a15982740",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDZmNDQwNzFjY2JlY2EzM2ZmZjcwYjkyOGI3MWQ5NWExNTk4Mjc0MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-23T08:16:38Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-23T08:52:02Z"
    },
    "message": "ELF final_write_processing\n\nMove setting of OSABI to final_write_processing, after symbols are\nwritten.  This allows OSABI to be set based on symbols actually\nwritten to the output rather than assuming input symbols will be\noutput.\n\nCorrects object files such as the one generated on powerpc64le-linux\nby ld-powerpc/pr23927.s which has a local STT_GNU_IFUNC symbol but\nprior to this patch the file was marked ELFOSABI_NONE.\n\n\t* elf-bfd.h (enum elf_gnu_osabi): Rename from elf_gnu_symbols.\n\tRemove none, any, all enums.\n\t(struct elf_obj_tdata): Rename has_gnu_symbols field to has_gnu_osabi.\n\t(_bfd_elf_final_write_processing): Declare.\n\t* elf.c (_bfd_elf_write_object_contents): Unconditionally call\n\telf_backend_final_write_processing.\n\t(_bfd_elf_post_process_headers): Move body of function to..\n\t(_bfd_elf_final_write_processing): ..here, but set EI_OSABI byte\n\tonly when not already set.  Adjust for rename.\n\t* elfxx-target.h (elf_backend_final_write_processing): Default to\n\t_bfd_elf_final_write_processing.\n\t* elf-hppa.h (elf_hppa_final_write_processing): Call\n\t_bfd_elf_final_write_processing.\n\t* elf-m10300.c (_bfd_mn10300_elf_final_write_processing): Likewise.\n\t* elf-nacl.c (nacl_final_write_processing): Likewise.\n\t* elf-vxworks.c (elf_vxworks_final_write_processing): Likewise.\n\t* elf32-arc.c (arc_elf_final_write_processing): Likewise.\n\t* elf32-avr.c (bfd_elf_avr_final_write_processing): Likewise.\n\t* elf32-bfin.c (elf32_bfin_final_write_processing): Likewise.\n\t* elf32-cr16.c (_bfd_cr16_elf_final_write_processing): Likewise.\n\t* elf32-cris.c (cris_elf_final_write_processing): Likewise.\n\t* elf32-h8300.c (elf32_h8_final_write_processing): Likewise.\n\t* elf32-lm32.c (lm32_elf_final_write_processing): Likewise.\n\t* elf32-m32r.c (m32r_elf_final_write_processing): Likewise.\n\t* elf32-m68k.c (elf_m68k_final_write_processing): Likewise.\n\t* elf32-msp430.c (bfd_elf_msp430_final_write_processing): Likewise.\n\t* elf32-nds32.c (nds32_elf_final_write_processing): Likewise.\n\t* elf32-or1k.c (or1k_elf_final_write_processing): Likewise.\n\t* elf32-pj.c (pj_elf_final_write_processing): Likewise.\n\t* elf32-v850.c (v850_elf_final_write_processing): Likewise.\n\t* elf32-xc16x.c (elf32_xc16x_final_write_processing): Likewise.\n\t* elf32-xtensa.c (elf_xtensa_final_write_processing): Likewise.\n\t* elf64-ia64-vms.c (elf64_vms_final_write_processing): Likewise.\n\t* elfnn-ia64.c (elfNN_ia64_final_write_processing): Likewise.\n\t* elf32-arm.c (arm_final_write_processing): Split out from..\n\t(elf32_arm_final_write_processing): ..here.  Call\n\t_bfd_elf_final_write_processing.\n\t(elf32_arm_nacl_final_write_processing): Adjust.\n\t* elfxx-mips.c (_bfd_mips_final_write_processing): Split out from..\n\t(_bfd_mips_elf_final_write_processing): ..here.  Call\n\t_bfd_elf_final_write_processing.\n\t* elfxx-mips.h (_bfd_mips_final_write_processing): Declare.\n\t* elf32-mips.c (mips_vxworks_final_write_processing): Adjust.\n\t* elf32-ppc.c (ppc_final_write_processing): Split out from..\n\t(ppc_elf_final_write_processing): ..here.  Call\n\t_bfd_elf_final_write_processing.\n\t(ppc_elf_vxworks_final_write_processing): Adjust.\n\t* elf32-sparc.c (sparc_final_write_processing): Split out from..\n\t(elf32_sparc_final_write_processing): ..here.  Call\n\t_bfd_elf_final_write_processing.\n\t(elf32_sparc_vxworks_final_write_processing): Adjust.\n\t* elf32-d10v.c (elf_backend_final_write_processing): Don't define.\n\t* elf32-d30v.c (elf_backend_final_write_processing): Don't define.\n\t* elf32-m68hc11.c (elf_backend_final_write_processing): Don't define.\n\t* elf32-m68hc12.c (elf_backend_final_write_processing): Don't define.\n\t* elf32-s12z.c (elf_backend_final_write_processing): Don't define.\n\t* elf32-i386.c (elf_i386_check_relocs): Don't set has_gnu_symbols.\n\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n\t* elflink.c (elf_link_add_object_symbols): Likewise.\n\t(elf_link_output_symstrtab): Set has_gnu_osabi for symbols here\n\tinstead.",
    "tree": {
      "sha": "c96aae3c1815856852a99cb7dac89061a85a0af2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c96aae3c1815856852a99cb7dac89061a85a0af2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/06f44071ccbeca33fff70b928b71d95a15982740",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06f44071ccbeca33fff70b928b71d95a15982740",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/06f44071ccbeca33fff70b928b71d95a15982740",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06f44071ccbeca33fff70b928b71d95a15982740/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec49711a16785636a5b9eac3a92bd00382fcb1a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec49711a16785636a5b9eac3a92bd00382fcb1a9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec49711a16785636a5b9eac3a92bd00382fcb1a9"
    }
  ],
  "stats": {
    "total": 274,
    "additions": 175,
    "deletions": 99
  },
  "files": [
    {
      "sha": "3a19099b6f7d9d2a49fa517dad54929d83968d1d",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1,3 +1,67 @@\n+2019-07-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (enum elf_gnu_osabi): Rename from elf_gnu_symbols.\n+\tRemove none, any, all enums.\n+\t(struct elf_obj_tdata): Rename has_gnu_symbols field to has_gnu_osabi.\n+\t(_bfd_elf_final_write_processing): Declare.\n+\t* elf.c (_bfd_elf_write_object_contents): Unconditionally call\n+\telf_backend_final_write_processing.\n+\t(_bfd_elf_post_process_headers): Move body of function to..\n+\t(_bfd_elf_final_write_processing): ..here, but set EI_OSABI byte\n+\tonly when not already set.  Adjust for rename.\n+\t* elfxx-target.h (elf_backend_final_write_processing): Default to\n+\t_bfd_elf_final_write_processing.\n+\t* elf-hppa.h (elf_hppa_final_write_processing): Call\n+\t_bfd_elf_final_write_processing.\n+\t* elf-m10300.c (_bfd_mn10300_elf_final_write_processing): Likewise.\n+\t* elf-nacl.c (nacl_final_write_processing): Likewise.\n+\t* elf-vxworks.c (elf_vxworks_final_write_processing): Likewise.\n+\t* elf32-arc.c (arc_elf_final_write_processing): Likewise.\n+\t* elf32-avr.c (bfd_elf_avr_final_write_processing): Likewise.\n+\t* elf32-bfin.c (elf32_bfin_final_write_processing): Likewise.\n+\t* elf32-cr16.c (_bfd_cr16_elf_final_write_processing): Likewise.\n+\t* elf32-cris.c (cris_elf_final_write_processing): Likewise.\n+\t* elf32-h8300.c (elf32_h8_final_write_processing): Likewise.\n+\t* elf32-lm32.c (lm32_elf_final_write_processing): Likewise.\n+\t* elf32-m32r.c (m32r_elf_final_write_processing): Likewise.\n+\t* elf32-m68k.c (elf_m68k_final_write_processing): Likewise.\n+\t* elf32-msp430.c (bfd_elf_msp430_final_write_processing): Likewise.\n+\t* elf32-nds32.c (nds32_elf_final_write_processing): Likewise.\n+\t* elf32-or1k.c (or1k_elf_final_write_processing): Likewise.\n+\t* elf32-pj.c (pj_elf_final_write_processing): Likewise.\n+\t* elf32-v850.c (v850_elf_final_write_processing): Likewise.\n+\t* elf32-xc16x.c (elf32_xc16x_final_write_processing): Likewise.\n+\t* elf32-xtensa.c (elf_xtensa_final_write_processing): Likewise.\n+\t* elf64-ia64-vms.c (elf64_vms_final_write_processing): Likewise.\n+\t* elfnn-ia64.c (elfNN_ia64_final_write_processing): Likewise.\n+\t* elf32-arm.c (arm_final_write_processing): Split out from..\n+\t(elf32_arm_final_write_processing): ..here.  Call\n+\t_bfd_elf_final_write_processing.\n+\t(elf32_arm_nacl_final_write_processing): Adjust.\n+\t* elfxx-mips.c (_bfd_mips_final_write_processing): Split out from..\n+\t(_bfd_mips_elf_final_write_processing): ..here.  Call\n+\t_bfd_elf_final_write_processing.\n+\t* elfxx-mips.h (_bfd_mips_final_write_processing): Declare.\n+\t* elf32-mips.c (mips_vxworks_final_write_processing): Adjust.\n+\t* elf32-ppc.c (ppc_final_write_processing): Split out from..\n+\t(ppc_elf_final_write_processing): ..here.  Call\n+\t_bfd_elf_final_write_processing.\n+\t(ppc_elf_vxworks_final_write_processing): Adjust.\n+\t* elf32-sparc.c (sparc_final_write_processing): Split out from..\n+\t(elf32_sparc_final_write_processing): ..here.  Call\n+\t_bfd_elf_final_write_processing.\n+\t(elf32_sparc_vxworks_final_write_processing): Adjust.\n+\t* elf32-d10v.c (elf_backend_final_write_processing): Don't define.\n+\t* elf32-d30v.c (elf_backend_final_write_processing): Don't define.\n+\t* elf32-m68hc11.c (elf_backend_final_write_processing): Don't define.\n+\t* elf32-m68hc12.c (elf_backend_final_write_processing): Don't define.\n+\t* elf32-s12z.c (elf_backend_final_write_processing): Don't define.\n+\t* elf32-i386.c (elf_i386_check_relocs): Don't set has_gnu_symbols.\n+\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n+\t* elflink.c (elf_link_add_object_symbols): Likewise.\n+\t(elf_link_output_symstrtab): Set has_gnu_osabi for symbols here\n+\tinstead.\n+\n 2019-07-23  Omar Majid  <omajid@redhat.com>\n \n \t* coffcode.h (coff_set_arch_mach_hook): Handle I386_APPLE_MAGIC,"
    },
    {
      "sha": "134496ed271f19b11135bc678f031b327d7df93c",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1812,13 +1812,10 @@ struct output_elf_obj_tdata\n /* Indicate if the bfd contains symbols that have the STT_GNU_IFUNC\n    symbol type or STB_GNU_UNIQUE binding.  Used to set the osabi\n    field in the ELF header structure.  */\n-enum elf_gnu_symbols\n+enum elf_gnu_osabi\n {\n-  elf_gnu_symbol_none = 0,\n-  elf_gnu_symbol_any = 1 << 0,\n-  elf_gnu_symbol_ifunc = (elf_gnu_symbol_any | 1 << 1),\n-  elf_gnu_symbol_unique = (elf_gnu_symbol_any | 1 << 2),\n-  elf_gnu_symbol_all = (elf_gnu_symbol_ifunc | elf_gnu_symbol_unique)\n+  elf_gnu_osabi_ifunc = 1 << 1,\n+  elf_gnu_osabi_unique = 1 << 2,\n };\n \n typedef struct elf_section_list\n@@ -1939,9 +1936,8 @@ struct elf_obj_tdata\n      or was found via a DT_NEEDED entry.  */\n   ENUM_BITFIELD (dynamic_lib_link_class) dyn_lib_class : 4;\n \n-  /* Whether if the bfd contains symbols that have the STT_GNU_IFUNC\n-     symbol type or STB_GNU_UNIQUE binding.  */\n-  ENUM_BITFIELD (elf_gnu_symbols) has_gnu_symbols : 3;\n+  /* Whether the bfd uses OS specific bits that require ELFOSABI_GNU.  */\n+  ENUM_BITFIELD (elf_gnu_osabi) has_gnu_osabi : 3;\n \n   /* Whether if the bfd contains the GNU_PROPERTY_NO_COPY_ON_PROTECTED\n      property.  */\n@@ -2336,7 +2332,9 @@ extern bfd_boolean _bfd_elf_setup_sections\n extern struct bfd_link_hash_entry *bfd_elf_define_start_stop\n   (struct bfd_link_info *, const char *, asection *);\n \n-extern void _bfd_elf_post_process_headers (bfd * , struct bfd_link_info *);\n+extern void _bfd_elf_post_process_headers (bfd *, struct bfd_link_info *);\n+\n+extern void _bfd_elf_final_write_processing (bfd *, bfd_boolean);\n \n extern const bfd_target *bfd_elf32_object_p\n   (bfd *);"
    },
    {
      "sha": "45b432ee62ef1c8451fe7645d398d453ba27aca1",
      "filename": "bfd/elf-hppa.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-hppa.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-hppa.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-hppa.h?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -924,8 +924,7 @@ elf_hppa_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr, asection *sec)\n }\n \n static void\n-elf_hppa_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf_hppa_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   int mach = bfd_get_mach (abfd);\n \n@@ -948,6 +947,7 @@ elf_hppa_final_write_processing (bfd *abfd,\n \t\t\t\t\t a step backwards with the ELF\n \t\t\t\t\t based toolchains.  */\n \t\t\t\t      | EF_PARISC_TRAPNIL);\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Comparison function for qsort to sort unwind section during a"
    },
    {
      "sha": "e497e02b0dd325642a098881b634ca7372f27c1a",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -4668,8 +4668,7 @@ elf_mn10300_mach (flagword flags)\n    number.  */\n \n static void\n-_bfd_mn10300_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+_bfd_mn10300_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -4691,6 +4690,7 @@ _bfd_mn10300_elf_final_write_processing (bfd *abfd,\n \n   elf_elfheader (abfd)->e_flags &= ~ (EF_MN10300_MACH);\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "5f808066913668312fc415d3c8892beb0351cb09",
      "filename": "bfd/elf-nacl.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-nacl.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-nacl.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-nacl.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -321,7 +321,7 @@ nacl_modify_program_headers (bfd *abfd, struct bfd_link_info *info)\n }\n \n void\n-nacl_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+nacl_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   struct elf_segment_map *seg;\n   for (seg = elf_seg_map (abfd); seg != NULL; seg = seg->next)\n@@ -354,4 +354,5 @@ nacl_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n \n \tfree (fill);\n       }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }"
    },
    {
      "sha": "32eb5a9ccfbe15b6cc2a1af60f05fd74bc8f399f",
      "filename": "bfd/elf-vxworks.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-vxworks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf-vxworks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-vxworks.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -213,8 +213,7 @@ elf_vxworks_emit_relocs (bfd *output_bfd,\n /* Set the sh_link and sh_info fields on the static plt relocation secton.  */\n \n void\n-elf_vxworks_final_write_processing (bfd *abfd,\n-\t\t\t\t    bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   asection * sec;\n   struct bfd_elf_section_data *d;\n@@ -229,6 +228,7 @@ elf_vxworks_final_write_processing (bfd *abfd,\n   sec = bfd_get_section_by_name (abfd, \".plt\");\n   if (sec)\n     d->this_hdr.sh_info = elf_section_data (sec)->this_idx;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Add the dynamic entries required by VxWorks.  These point to the"
    },
    {
      "sha": "55bb0916ee77ae17ceee51be17c8720a797e2225",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -6553,8 +6553,7 @@ _bfd_elf_write_object_contents (bfd *abfd)\n \t  || !_bfd_elf_strtab_emit (abfd, elf_shstrtab (abfd))))\n     return FALSE;\n \n-  if (bed->elf_backend_final_write_processing)\n-    (*bed->elf_backend_final_write_processing) (abfd, elf_linker (abfd));\n+  (*bed->elf_backend_final_write_processing) (abfd, elf_linker (abfd));\n \n   if (!bed->s->write_shdrs_and_ehdr (abfd))\n     return FALSE;\n@@ -12103,20 +12102,27 @@ asection _bfd_elf_large_com_section\n \t\t      \"LARGE_COMMON\", 0, SEC_IS_COMMON);\n \n void\n-_bfd_elf_post_process_headers (bfd * abfd,\n-\t\t\t       struct bfd_link_info * link_info ATTRIBUTE_UNUSED)\n+_bfd_elf_post_process_headers (bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t\t       struct bfd_link_info *info ATTRIBUTE_UNUSED)\n {\n-  Elf_Internal_Ehdr * i_ehdrp;\t/* ELF file header, internal form.  */\n+}\n+\n+void\n+_bfd_elf_final_write_processing (bfd *abfd,\n+\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+{\n+  Elf_Internal_Ehdr *i_ehdrp;\t/* ELF file header, internal form.  */\n \n   i_ehdrp = elf_elfheader (abfd);\n \n-  i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;\n+  if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE)\n+    i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;\n \n   /* To make things simpler for the loader on Linux systems we set the\n      osabi field to ELFOSABI_GNU if the binary contains symbols of\n      the STT_GNU_IFUNC type or STB_GNU_UNIQUE binding.  */\n   if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE\n-      && elf_tdata (abfd)->has_gnu_symbols)\n+      && elf_tdata (abfd)->has_gnu_osabi)\n     i_ehdrp->e_ident[EI_OSABI] = ELFOSABI_GNU;\n }\n "
    },
    {
      "sha": "ad5757acc94e19c2ec81d82371b25857adda3750",
      "filename": "bfd/elf32-arc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arc.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1017,8 +1017,7 @@ arc_elf_object_p (bfd * abfd)\n    This gets the ARC architecture right based on the machine number.  */\n \n static void\n-arc_elf_final_write_processing (bfd * abfd,\n-\t\t\t\tbfd_boolean linker ATTRIBUTE_UNUSED)\n+arc_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long emf;\n   int osver = bfd_elf_get_obj_attr_int (abfd, OBJ_ATTR_PROC,\n@@ -1052,6 +1051,7 @@ arc_elf_final_write_processing (bfd * abfd,\n     e_flags |= E_ARC_OSABI_V3;\n \n   elf_elfheader (abfd)->e_flags |=  e_flags;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n #ifdef ARC_ENABLE_DEBUG"
    },
    {
      "sha": "631394916b7f2b2c615c23c4af6d922ca3d12898",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -17915,11 +17915,18 @@ elf32_arm_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,\n }\n \n static void\n-elf32_arm_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+arm_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n {\n   bfd_arm_update_notes (abfd, ARM_NOTE_SECTION);\n }\n \n+static void\n+elf32_arm_final_write_processing (bfd *abfd, bfd_boolean linker)\n+{\n+  arm_final_write_processing (abfd, linker);\n+  _bfd_elf_final_write_processing (abfd, linker);\n+}\n+\n /* Return TRUE if this is an unwinding table entry.  */\n \n static bfd_boolean\n@@ -20596,7 +20603,7 @@ elf32_arm_nacl_modify_segment_map (bfd *abfd, struct bfd_link_info *info)\n static void\n elf32_arm_nacl_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n-  elf32_arm_final_write_processing (abfd, linker);\n+  arm_final_write_processing (abfd, linker);\n   nacl_final_write_processing (abfd, linker);\n }\n \n@@ -20751,7 +20758,7 @@ elf32_arm_vxworks_link_hash_table_create (bfd *abfd)\n static void\n elf32_arm_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n-  elf32_arm_final_write_processing (abfd, linker);\n+  arm_final_write_processing (abfd, linker);\n   elf_vxworks_final_write_processing (abfd, linker);\n }\n "
    },
    {
      "sha": "135030b3aad8aa09dbb6f132ea2ea96aa1a3cc3e",
      "filename": "bfd/elf32-avr.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-avr.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1537,8 +1537,7 @@ elf32_avr_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n    number.  */\n \n static void\n-bfd_elf_avr_final_write_processing (bfd *abfd,\n-\t\t\t\t    bfd_boolean linker ATTRIBUTE_UNUSED)\n+bfd_elf_avr_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -1621,6 +1620,7 @@ bfd_elf_avr_final_write_processing (bfd *abfd,\n   elf_elfheader (abfd)->e_machine = EM_AVR;\n   elf_elfheader (abfd)->e_flags &= ~ EF_AVR_MACH;\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Set the right machine number.  */"
    },
    {
      "sha": "5b8f5b92642ae942b1b2f035a4a35e891c803b58",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1134,13 +1134,13 @@ bfd_boolean elf32_bfin_code_in_l1 = 0;\n bfd_boolean elf32_bfin_data_in_l1 = 0;\n \n static void\n-elf32_bfin_final_write_processing (bfd *abfd,\n-\t\t\t\t   bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf32_bfin_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   if (elf32_bfin_code_in_l1)\n     elf_elfheader (abfd)->e_flags |= EF_BFIN_CODE_IN_L1;\n   if (elf32_bfin_data_in_l1)\n     elf_elfheader (abfd)->e_flags |= EF_BFIN_DATA_IN_L1;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Return TRUE if the name is a local label."
    },
    {
      "sha": "3569c81e0ab60b072ebbef4a214502301301584e",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1674,8 +1674,7 @@ elf_cr16_mach (flagword flags)\n    number.  */\n \n static void\n-_bfd_cr16_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t      bfd_boolean linker ATTRIBUTE_UNUSED)\n+_bfd_cr16_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n   switch (bfd_get_mach (abfd))\n@@ -1685,9 +1684,8 @@ _bfd_cr16_elf_final_write_processing (bfd *abfd,\n \tval = EM_CR16;\n \tbreak;\n     }\n-\n-\n  elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n "
    },
    {
      "sha": "0fc1eb38cecb5e87c112ec283f6cc73cabc9c63b",
      "filename": "bfd/elf32-cris.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cris.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -3830,8 +3830,7 @@ cris_elf_object_p (bfd *abfd)\n    flags from mach type.  */\n \n static void\n-cris_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+cris_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long e_flags = elf_elfheader (abfd)->e_flags;\n \n@@ -3859,6 +3858,7 @@ cris_elf_final_write_processing (bfd *abfd,\n     }\n \n   elf_elfheader (abfd)->e_flags = e_flags;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Set the mach type from e_flags value.  */"
    },
    {
      "sha": "a03ce632868ef6b4bbaadec8cc2753012010a4bb",
      "filename": "bfd/elf32-d10v.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-d10v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-d10v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-d10v.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -543,7 +543,6 @@ elf32_d10v_relocate_section (bfd *output_bfd,\n #define elf_info_to_howto\t\t     NULL\n #define elf_info_to_howto_rel\t\t     d10v_info_to_howto_rel\n #define elf_backend_object_p\t\t     0\n-#define elf_backend_final_write_processing   0\n #define elf_backend_gc_mark_hook\t     elf32_d10v_gc_mark_hook\n #define elf_backend_check_relocs\t     elf32_d10v_check_relocs\n #define elf_backend_relocate_section\t     elf32_d10v_relocate_section"
    },
    {
      "sha": "f006b669faefc1178ab575427fe1f066a524e4b0",
      "filename": "bfd/elf32-d30v.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-d30v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-d30v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-d30v.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -561,6 +561,5 @@ d30v_info_to_howto_rela (bfd *abfd,\n #define elf_info_to_howto\td30v_info_to_howto_rela\n #define elf_info_to_howto_rel\td30v_info_to_howto_rel\n #define elf_backend_object_p\t0\n-#define elf_backend_final_write_processing\t0\n \n #include \"elf32-target.h\""
    },
    {
      "sha": "40680fa3f59efdf5b212b4d1b393babe86ca351f",
      "filename": "bfd/elf32-h8300.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-h8300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-h8300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-h8300.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -31,7 +31,6 @@ static bfd_boolean elf32_h8_info_to_howto\n static bfd_boolean elf32_h8_info_to_howto_rel\n   (bfd *, arelent *, Elf_Internal_Rela *);\n static unsigned long elf32_h8_mach (flagword);\n-static void elf32_h8_final_write_processing (bfd *, bfd_boolean);\n static bfd_boolean elf32_h8_object_p (bfd *);\n static bfd_boolean elf32_h8_merge_private_bfd_data\n   (bfd *, struct bfd_link_info *);\n@@ -585,8 +584,7 @@ elf32_h8_mach (flagword flags)\n    into the flags field in the object file.  */\n \n static void\n-elf32_h8_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf32_h8_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -624,6 +622,7 @@ elf32_h8_final_write_processing (bfd *abfd,\n \n   elf_elfheader (abfd)->e_flags &= ~ (EF_H8_MACH);\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Return nonzero if ABFD represents a valid H8 ELF object file; also"
    },
    {
      "sha": "d7a61d7a481caff10e6065a05a5cb98c168ef779",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1575,10 +1575,6 @@ elf_i386_check_relocs (bfd *abfd,\n \n \t  /* It is referenced by a non-shared object. */\n \t  h->ref_regular = 1;\n-\n-\t  if (h->type == STT_GNU_IFUNC)\n-\t    elf_tdata (info->output_bfd)->has_gnu_symbols\n-\t      |= elf_gnu_symbol_ifunc;\n \t}\n \n       if (r_type == R_386_GOT32X"
    },
    {
      "sha": "255dc4e2c0cd45dff92e63b93ed50858839e9b85",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -556,7 +556,7 @@ lm32_elf_object_p (bfd *abfd)\n /* Set machine type flags just before file is written out. */\n \n static void\n-lm32_elf_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+lm32_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   elf_elfheader (abfd)->e_machine = EM_LATTICEMICO32;\n   elf_elfheader (abfd)->e_flags &=~ EF_LM32_MACH;\n@@ -568,6 +568,7 @@ lm32_elf_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n       default:\n \tabort ();\n     }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Set the GP value for OUTPUT_BFD.  Returns FALSE if this is a"
    },
    {
      "sha": "3fcde4a6141565d85ef318c1ba4fbc7517eb0946",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -3404,8 +3404,7 @@ m32r_elf_object_p (bfd *abfd)\n /* Store the machine number in the flags field.  */\n \n static void\n-m32r_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+m32r_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -3419,6 +3418,7 @@ m32r_elf_final_write_processing (bfd *abfd,\n \n   elf_elfheader (abfd)->e_flags &=~ EF_M32R_ARCH;\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Function to keep M32R specific file flags.  */"
    },
    {
      "sha": "828a43299ad728d86693dd12d2fc1d10ddead26e",
      "filename": "bfd/elf32-m68hc11.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m68hc11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m68hc11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc11.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1306,7 +1306,6 @@ static const struct bfd_elf_special_section elf32_m68hc11_special_sections[] =\n #define elf_backend_relocate_section elf32_m68hc11_relocate_section\n #define elf_backend_add_symbol_hook  elf32_m68hc11_add_symbol_hook\n #define elf_backend_object_p\t0\n-#define elf_backend_final_write_processing\t0\n #define elf_backend_can_gc_sections\t\t1\n #define elf_backend_special_sections  elf32_m68hc11_special_sections\n #define elf_backend_merge_symbol_attribute elf32_m68hc11_merge_symbol_attribute"
    },
    {
      "sha": "97c513258d71df872add44dae5eaf3a051f1f08a",
      "filename": "bfd/elf32-m68hc12.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m68hc12.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m68hc12.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc12.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -654,7 +654,6 @@ static const struct bfd_elf_special_section elf32_m68hc12_special_sections[] =\n #define elf_backend_check_relocs     elf32_m68hc11_check_relocs\n #define elf_backend_relocate_section elf32_m68hc11_relocate_section\n #define elf_backend_object_p\t\tm68hc12_elf_set_mach_from_flags\n-#define elf_backend_final_write_processing\t0\n #define elf_backend_can_gc_sections\t\t1\n #define elf_backend_special_sections elf32_m68hc12_special_sections\n #define elf_backend_post_process_headers     elf32_m68hc11_post_process_headers"
    },
    {
      "sha": "3840b136de4bac7b1457609ba637f015847118f8",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1054,8 +1054,7 @@ elf32_m68k_object_p (bfd *abfd)\n    field based on the machine number.  */\n \n static void\n-elf_m68k_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf_m68k_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   int mach = bfd_get_mach (abfd);\n   unsigned long e_flags = elf_elfheader (abfd)->e_flags;\n@@ -1108,6 +1107,7 @@ elf_m68k_final_write_processing (bfd *abfd,\n \t}\n       elf_elfheader (abfd)->e_flags = e_flags;\n     }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Keep m68k-specific flags in the ELF header.  */"
    },
    {
      "sha": "370dc90914f8e3bc721e6c4e955f482a059224da",
      "filename": "bfd/elf32-mips.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-mips.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -2646,7 +2646,7 @@ static const struct ecoff_debug_swap mips_elf32_ecoff_debug_swap = {\n static void\n mips_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n-  _bfd_mips_elf_final_write_processing (abfd, linker);\n+  _bfd_mips_final_write_processing (abfd, linker);\n   elf_vxworks_final_write_processing (abfd, linker);\n }\n "
    },
    {
      "sha": "aecc122c004b57b519f079b12c79425251c490c6",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1386,8 +1386,7 @@ elf32_msp430_relocate_section (bfd * output_bfd ATTRIBUTE_UNUSED,\n    number.  */\n \n static void\n-bfd_elf_msp430_final_write_processing (bfd * abfd,\n-\t\t\t\t       bfd_boolean linker ATTRIBUTE_UNUSED)\n+bfd_elf_msp430_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -1422,6 +1421,7 @@ bfd_elf_msp430_final_write_processing (bfd * abfd,\n   elf_elfheader (abfd)->e_machine = EM_MSP430;\n   elf_elfheader (abfd)->e_flags &= ~EF_MSP430_MACH;\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Set the right machine number.  */"
    },
    {
      "sha": "9959cbe5e7a462b3ab96ca5bb1d00d7829aca8b4",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -6673,8 +6673,7 @@ nds32_elf_object_p (bfd *abfd)\n /* Store the machine number in the flags field.  */\n \n static void\n-nds32_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t  bfd_boolean linker ATTRIBUTE_UNUSED)\n+nds32_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n   static unsigned int cur_mach = 0;\n@@ -6711,6 +6710,7 @@ nds32_elf_final_write_processing (bfd *abfd,\n \n   elf_elfheader (abfd)->e_flags &= ~EF_NDS_ARCH;\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Function to keep NDS32 specific file flags.  */"
    },
    {
      "sha": "9b795fb06ed30b56ca8a1a06eb8a952db6ac76c9",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -3157,8 +3157,7 @@ or1k_elf_object_p (bfd *abfd)\n /* Store the machine number in the flags field.  */\n \n static void\n-or1k_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+or1k_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   switch (bfd_get_mach (abfd))\n     {\n@@ -3169,6 +3168,7 @@ or1k_elf_final_write_processing (bfd *abfd,\n       elf_elfheader (abfd)->e_flags |= EF_OR1K_NODELAY;\n       break;\n     }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "d4fcebc0f2293aa6dc8fdd07b268c6ba3e8515e8",
      "filename": "bfd/elf32-pj.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-pj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-pj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pj.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -337,11 +337,11 @@ pj_elf_info_to_howto (bfd *abfd,\n    e_flags field.  */\n \n static void\n-pj_elf_final_write_processing (bfd *abfd,\n-\t\t\t       bfd_boolean linker ATTRIBUTE_UNUSED)\n+pj_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   elf_elfheader (abfd)->e_flags |= EF_PICOJAVA_ARCH;\n   elf_elfheader (abfd)->e_flags |= EF_PICOJAVA_GNUCALLS;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n #define TARGET_BIG_SYM\t\tpj_elf32_vec"
    },
    {
      "sha": "b1ae0de4e5bb1a7c6e867b7ddc6cfeab5c7a2ad4",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1705,7 +1705,7 @@ ppc_elf_write_section (bfd *abfd ATTRIBUTE_UNUSED,\n /* Finally we can generate the output section.  */\n \n static void\n-ppc_elf_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+ppc_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n {\n   bfd_byte *buffer;\n   asection *asec;\n@@ -1756,6 +1756,13 @@ ppc_elf_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n \n   apuinfo_list_finish ();\n }\n+\n+static void\n+ppc_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+{\n+  ppc_final_write_processing (abfd, linker);\n+  _bfd_elf_final_write_processing (abfd, linker);\n+}\n \f\n static bfd_boolean\n is_nonpic_glink_stub (bfd *abfd, asection *glink, bfd_vma off)\n@@ -10490,7 +10497,7 @@ ppc_elf_vxworks_add_symbol_hook (bfd *abfd,\n static void\n ppc_elf_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n-  ppc_elf_final_write_processing (abfd, linker);\n+  ppc_final_write_processing (abfd, linker);\n   elf_vxworks_final_write_processing (abfd, linker);\n }\n "
    },
    {
      "sha": "ba6498505a2a1b76d5b24001aa6bce98bb692840",
      "filename": "bfd/elf32-s12z.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-s12z.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-s12z.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-s12z.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -317,6 +317,5 @@ s12z_elf_set_mach_from_flags (bfd *abfd)\n #define elf_info_to_howto\t\t\tNULL\n #define elf_info_to_howto_rel\t\t\ts12z_info_to_howto_rel\n #define elf_backend_object_p\t\t\ts12z_elf_set_mach_from_flags\n-#define elf_backend_final_write_processing\tNULL\n \n #include \"elf32-target.h\""
    },
    {
      "sha": "e6d18d377c715feb17b35fdc7e714b4ff5846304",
      "filename": "bfd/elf32-sparc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sparc.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -117,8 +117,7 @@ elf32_sparc_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n    We need to set the e_machine field appropriately.  */\n \n static void\n-elf32_sparc_final_write_processing (bfd *abfd,\n-\t\t\t\t    bfd_boolean linker ATTRIBUTE_UNUSED)\n+sparc_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n {\n   switch (bfd_get_mach (abfd))\n     {\n@@ -157,6 +156,13 @@ elf32_sparc_final_write_processing (bfd *abfd,\n     }\n }\n \n+static void\n+elf32_sparc_final_write_processing (bfd *abfd, bfd_boolean linker)\n+{\n+  sparc_final_write_processing (abfd, linker);\n+  _bfd_elf_final_write_processing (abfd, linker);\n+}\n+\n /* Used to decide how to sort relocs in an optimal manner for the\n    dynamic linker, before writing them out.  */\n \n@@ -324,7 +330,7 @@ elf32_sparc_vxworks_link_hash_table_create (bfd *abfd)\n static void\n elf32_sparc_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n-  elf32_sparc_final_write_processing (abfd, linker);\n+  sparc_final_write_processing (abfd, linker);\n   elf_vxworks_final_write_processing (abfd, linker);\n }\n "
    },
    {
      "sha": "14bffc27aa20ed1108bc00a7ed1eda6c03092479",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -2719,8 +2719,7 @@ v850_elf_object_p (bfd *abfd)\n /* Store the machine number in the flags field.  */\n \n static void\n-v850_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+v850_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -2750,6 +2749,7 @@ v850_elf_final_write_processing (bfd *abfd,\n     default:\n       break;\n     }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Function to keep V850 specific file flags.  */"
    },
    {
      "sha": "ef2a5feba2afa94b18083e1938abe78ab7a2ee35",
      "filename": "bfd/elf32-xc16x.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-xc16x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-xc16x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xc16x.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -417,8 +417,7 @@ elf32_xc16x_relocate_section (bfd *output_bfd,\n \n \n static void\n-elf32_xc16x_final_write_processing (bfd *abfd,\n-\t\t\t\t    bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf32_xc16x_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   unsigned long val;\n \n@@ -439,6 +438,7 @@ elf32_xc16x_final_write_processing (bfd *abfd,\n     }\n \n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n static unsigned long"
    },
    {
      "sha": "66d23a8d63dace60488801ede1b26b86fb3f03b8",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -3463,8 +3463,7 @@ elf_xtensa_object_p (bfd *abfd)\n    number.  */\n \n static void\n-elf_xtensa_final_write_processing (bfd *abfd,\n-\t\t\t\t   bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf_xtensa_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   int mach;\n   unsigned long val;\n@@ -3480,6 +3479,7 @@ elf_xtensa_final_write_processing (bfd *abfd,\n \n   elf_elfheader (abfd)->e_flags &=  (~ EF_XTENSA_MACH);\n   elf_elfheader (abfd)->e_flags |= val;\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n "
    },
    {
      "sha": "0c7144a6f765e641c7ecfa0f84150a29af2d41ad",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -4660,8 +4660,7 @@ elf64_vms_section_processing (bfd *abfd ATTRIBUTE_UNUSED,\n    object file.  */\n \n static void\n-elf64_vms_final_write_processing (bfd *abfd,\n-\t\t\t\t  bfd_boolean linker ATTRIBUTE_UNUSED)\n+elf64_vms_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   Elf_Internal_Shdr *hdr;\n   asection *s;\n@@ -4696,6 +4695,7 @@ elf64_vms_final_write_processing (bfd *abfd,\n       elf_elfheader (abfd)->e_flags = flags;\n       elf_flags_init (abfd) = TRUE;\n     }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "34180c7552a36a8a6478eb812f6549c67f414dd5",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1951,10 +1951,6 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t{\n \t  /* It is referenced by a non-shared object. */\n \t  h->ref_regular = 1;\n-\n-\t  if (h->type == STT_GNU_IFUNC)\n-\t    elf_tdata (info->output_bfd)->has_gnu_symbols\n-\t      |= elf_gnu_symbol_ifunc;\n \t}\n \n       converted_reloc = FALSE;"
    },
    {
      "sha": "2830ee31b9856bda283640205583390c15126538",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -4739,18 +4739,6 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t      (struct bfd_link_hash_entry **) sym_hash)))\n \tgoto error_free_vers;\n \n-      if ((abfd->flags & DYNAMIC) == 0\n-\t  && (bfd_get_flavour (info->output_bfd)\n-\t      == bfd_target_elf_flavour))\n-\t{\n-\t  if (ELF_ST_TYPE (isym->st_info) == STT_GNU_IFUNC)\n-\t    elf_tdata (info->output_bfd)->has_gnu_symbols\n-\t      |= elf_gnu_symbol_ifunc;\n-\t  if ((flags & BSF_GNU_UNIQUE))\n-\t    elf_tdata (info->output_bfd)->has_gnu_symbols\n-\t      |= elf_gnu_symbol_unique;\n-\t}\n-\n       h = *sym_hash;\n       /* We need to make sure that indirect symbol dynamic flags are\n \t updated.  */\n@@ -9411,6 +9399,11 @@ elf_link_output_symstrtab (struct elf_final_link_info *flinfo,\n \treturn ret;\n     }\n \n+  if (ELF_ST_TYPE (elfsym->st_info) == STT_GNU_IFUNC)\n+    elf_tdata (flinfo->output_bfd)->has_gnu_osabi |= elf_gnu_osabi_ifunc;\n+  if (ELF_ST_BIND (elfsym->st_info) == STB_GNU_UNIQUE)\n+    elf_tdata (flinfo->output_bfd)->has_gnu_osabi |= elf_gnu_osabi_unique;\n+\n   if (name == NULL\n       || *name == '\\0'\n       || (input_sec->flags & SEC_EXCLUDE))"
    },
    {
      "sha": "1c9a9042072c9bc30b89a6ba19e6784e10ee60c9",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -1003,8 +1003,7 @@ elfNN_ia64_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr,\n    object file.  */\n \n static void\n-elfNN_ia64_final_write_processing (bfd *abfd,\n-\t\t\t\t   bfd_boolean linker ATTRIBUTE_UNUSED)\n+elfNN_ia64_final_write_processing (bfd *abfd, bfd_boolean linker)\n {\n   Elf_Internal_Shdr *hdr;\n   asection *s;\n@@ -1036,6 +1035,7 @@ elfNN_ia64_final_write_processing (bfd *abfd,\n       elf_elfheader(abfd)->e_flags = flags;\n       elf_flags_init (abfd) = TRUE;\n     }\n+  _bfd_elf_final_write_processing (abfd, linker);\n }\n \n /* Hook called by the linker routine which adds symbols from an object"
    },
    {
      "sha": "f0c092c0f900fa9ce759b16c630dac0ce35542ab",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -12358,8 +12358,8 @@ _bfd_mips_elf_sort_relocs_p (asection *sec)\n    number.  This is used by both the 32-bit and the 64-bit ABI.  */\n \n void\n-_bfd_mips_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t      bfd_boolean linker ATTRIBUTE_UNUSED)\n+_bfd_mips_final_write_processing (bfd *abfd,\n+\t\t\t\t  bfd_boolean linker ATTRIBUTE_UNUSED)\n {\n   unsigned int i;\n   Elf_Internal_Shdr **hdrpp;\n@@ -12438,6 +12438,13 @@ _bfd_mips_elf_final_write_processing (bfd *abfd,\n \t}\n     }\n }\n+\n+void\n+_bfd_mips_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+{\n+  _bfd_mips_final_write_processing (abfd, linker);\n+  _bfd_elf_final_write_processing (abfd, linker);\n+}\n \f\n /* When creating an IRIX5 executable, we need REGINFO and RTPROC\n    segments.  */"
    },
    {
      "sha": "a76680a917db26c907f8fb17ed8a4b854dacd4a1",
      "filename": "bfd/elfxx-mips.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfxx-mips.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfxx-mips.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.h?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -69,6 +69,8 @@ extern bfd_boolean _bfd_mips_elf_finish_dynamic_sections\n   (bfd *, struct bfd_link_info *);\n extern bfd_boolean _bfd_mips_elf_sort_relocs_p\n   (asection *);\n+extern void _bfd_mips_final_write_processing\n+  (bfd *, bfd_boolean);\n extern void _bfd_mips_elf_final_write_processing\n   (bfd *, bfd_boolean);\n extern int _bfd_mips_elf_additional_program_headers"
    },
    {
      "sha": "aecc60f08b0dfe19efb551ac7efa9ae857922575",
      "filename": "bfd/elfxx-target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfxx-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f44071ccbeca33fff70b928b71d95a15982740/bfd/elfxx-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-target.h?ref=06f44071ccbeca33fff70b928b71d95a15982740",
      "patch": "@@ -497,7 +497,7 @@\n #define elf_backend_begin_write_processing\t0\n #endif\n #ifndef elf_backend_final_write_processing\n-#define elf_backend_final_write_processing\t0\n+#define elf_backend_final_write_processing\t_bfd_elf_final_write_processing\n #endif\n #ifndef elf_backend_additional_program_headers\n #define elf_backend_additional_program_headers\t0"
    }
  ]
}