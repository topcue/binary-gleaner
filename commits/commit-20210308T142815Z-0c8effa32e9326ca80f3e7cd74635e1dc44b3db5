{
  "sha": "0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGM4ZWZmYTMyZTkzMjZjYTgwZjNlN2NkNzQ2MzVlMWRjNDRiM2RiNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:15Z"
    },
    "message": "Introduce var_msym_value_operation\n\nThis adds class var_msym_value_operation, which implements\nOP_VAR_MSYM_VALUE.  A new method is added to class operation in order\nto support a special case in minsym evaluation.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expression.h (class operation) <set_outermost>: New method.\n\t* expop.h (class var_msym_value_operation): New.\n\t* eval.c (eval_op_var_msym_value): No longer static.\n\t(var_msym_value_operation::evaluate_for_address)\n\t(var_msym_value_operation::evaluate_for_sizeof)\n\t(var_msym_value_operation::evaluate_for_cast): New methods.\n\t* ax-gdb.c (var_msym_value_operation::do_generate_ax): New\n\tmethod.",
    "tree": {
      "sha": "b6d0af9e6efda5de07f2df3885b698eb24756f0c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b6d0af9e6efda5de07f2df3885b698eb24756f0c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d336c29e3f1b9adc314fcf44af38fb1d2b65b5e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d336c29e3f1b9adc314fcf44af38fb1d2b65b5e6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d336c29e3f1b9adc314fcf44af38fb1d2b65b5e6"
    }
  ],
  "stats": {
    "total": 153,
    "additions": 152,
    "deletions": 1
  },
  "files": [
    {
      "sha": "129a2383da8b873be1191dab022653975f11df9d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
      "patch": "@@ -1,3 +1,14 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expression.h (class operation) <set_outermost>: New method.\n+\t* expop.h (class var_msym_value_operation): New.\n+\t* eval.c (eval_op_var_msym_value): No longer static.\n+\t(var_msym_value_operation::evaluate_for_address)\n+\t(var_msym_value_operation::evaluate_for_sizeof)\n+\t(var_msym_value_operation::evaluate_for_cast): New methods.\n+\t* ax-gdb.c (var_msym_value_operation::do_generate_ax): New\n+\tmethod.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class long_const_operation): New."
    },
    {
      "sha": "602817007035fed6f9e461858920d539a5ab26e7",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
      "patch": "@@ -2324,6 +2324,23 @@ long_const_operation::do_generate_ax (struct expression *exp,\n \t\t   std::get<0> (m_storage));\n }\n \n+void\n+var_msym_value_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t\t  struct agent_expr *ax,\n+\t\t\t\t\t  struct axs_value *value,\n+\t\t\t\t\t  struct type *cast_type)\n+{\n+  gen_msym_var_ref (ax, value, std::get<0> (m_storage),\n+\t\t    std::get<1> (m_storage));\n+\n+  if (value->type->code () == TYPE_CODE_ERROR)\n+    {\n+      if (cast_type == nullptr)\n+\terror_unknown_type (std::get<0> (m_storage)->linkage_name ());\n+      value->type = cast_type;\n+    }\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "85e67f3fb933d09c0f2ee7ab407a0cc397fd48e4",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 68,
      "deletions": 1,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
      "patch": "@@ -1221,7 +1221,7 @@ eval_op_var_entry_value (struct type *expect_type, struct expression *exp,\n \n /* Helper function that implements the body of OP_VAR_MSYM_VALUE.  */\n \n-static struct value *\n+struct value *\n eval_op_var_msym_value (struct type *expect_type, struct expression *exp,\n \t\t\tenum noside noside, bool outermost_p,\n \t\t\tminimal_symbol *msymbol, struct objfile *objfile)\n@@ -3301,6 +3301,22 @@ scope_operation::evaluate_for_address (struct expression *exp,\n   return x;\n }\n \n+value *\n+var_msym_value_operation::evaluate_for_address (struct expression *exp,\n+\t\t\t\t\t\tenum noside noside)\n+{\n+  value *val = evaluate_var_msym_value (noside,\n+\t\t\t\t\tstd::get<1> (m_storage),\n+\t\t\t\t\tstd::get<0> (m_storage));\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    {\n+      struct type *type = lookup_pointer_type (value_type (val));\n+      return value_zero (type, not_lval);\n+    }\n+  else\n+    return value_addr (val);\n+}\n+\n }\n \n /* Evaluate like `evaluate_subexp' except coercing arrays to pointers.\n@@ -3501,6 +3517,25 @@ operation::evaluate_for_sizeof (struct expression *exp, enum noside noside)\n   return evaluate_subexp_for_sizeof_base (exp, value_type (val));\n }\n \n+value *\n+var_msym_value_operation::evaluate_for_sizeof (struct expression *exp,\n+\t\t\t\t\t       enum noside noside)\n+\n+{\n+  minimal_symbol *msymbol = std::get<0> (m_storage);\n+  value *mval = evaluate_var_msym_value (noside,\n+\t\t\t\t\t std::get<1> (m_storage),\n+\t\t\t\t\t msymbol);\n+\n+  struct type *type = value_type (mval);\n+  if (type->code () == TYPE_CODE_ERROR)\n+    error_unknown_type (msymbol->print_name ());\n+\n+  /* FIXME: This should be size_t.  */\n+  struct type *size_type = builtin_type (exp->gdbarch)->builtin_int;\n+  return value_from_longest (size_type, TYPE_LENGTH (type));\n+}\n+\n }\n \n /* Evaluate a subexpression of EXP, at index *POS, and return a value\n@@ -3558,6 +3593,38 @@ evaluate_subexp_for_cast (expression *exp, int *pos,\n   return value_cast (to_type, val);\n }\n \n+namespace expr\n+{\n+\n+value *\n+var_msym_value_operation::evaluate_for_cast (struct type *to_type,\n+\t\t\t\t\t     struct expression *exp,\n+\t\t\t\t\t     enum noside noside)\n+{\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    return value_zero (to_type, not_lval);\n+\n+  value *val = evaluate_var_msym_value (noside,\n+\t\t\t\t\tstd::get<1> (m_storage),\n+\t\t\t\t\tstd::get<0> (m_storage));\n+\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  val = value_cast (to_type, val);\n+\n+  /* Don't allow e.g. '&(int)var_with_no_debug_info'.  */\n+  if (VALUE_LVAL (val) == lval_memory)\n+    {\n+      if (value_lazy (val))\n+\tvalue_fetch_lazy (val);\n+      VALUE_LVAL (val) = not_lval;\n+    }\n+  return val;\n+}\n+\n+}\n+\n /* Parse a type expression in the string [P..P+LENGTH).  */\n \n struct type *"
    },
    {
      "sha": "345cac2997672b558fca4715df93e304adf9d5c0",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
      "patch": "@@ -45,6 +45,12 @@ extern struct value *eval_op_scope (struct type *expect_type,\n \t\t\t\t    struct expression *exp,\n \t\t\t\t    enum noside noside,\n \t\t\t\t    struct type *type, const char *string);\n+extern struct value *eval_op_var_msym_value (struct type *expect_type,\n+\t\t\t\t\t     struct expression *exp,\n+\t\t\t\t\t     enum noside noside,\n+\t\t\t\t\t     bool outermost_p,\n+\t\t\t\t\t     minimal_symbol *msymbol,\n+\t\t\t\t\t     struct objfile *objfile);\n \n namespace expr\n {\n@@ -481,6 +487,52 @@ class long_const_operation\n     override;\n };\n \n+class var_msym_value_operation\n+  : public maybe_constant_operation<minimal_symbol *, struct objfile *>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    return eval_op_var_msym_value (expect_type, exp, noside, m_outermost,\n+\t\t\t\t   std::get<0> (m_storage),\n+\t\t\t\t   std::get<1> (m_storage));\n+  }\n+\n+  value *evaluate_for_sizeof (struct expression *exp, enum noside noside)\n+    override;\n+\n+  value *evaluate_for_address (struct expression *exp, enum noside noside)\n+    override;\n+\n+  value *evaluate_for_cast (struct type *expect_type,\n+\t\t\t    struct expression *exp,\n+\t\t\t    enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_VAR_MSYM_VALUE; }\n+\n+  void set_outermost () override\n+  {\n+    m_outermost = true;\n+  }\n+\n+protected:\n+\n+  /* True if this is the outermost operation in the expression.  */\n+  bool m_outermost = false;\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    },
    {
      "sha": "4d75058dc22ee491a54b94a08b4a33784f0bdbd5",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c8effa32e9326ca80f3e7cd74635e1dc44b3db5/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=0c8effa32e9326ca80f3e7cd74635e1dc44b3db5",
      "patch": "@@ -165,6 +165,10 @@ class operation\n   /* Print this operation to STREAM.  */\n   virtual void dump (struct ui_file *stream, int depth) const = 0;\n \n+  /* Call to indicate that this is the outermost operation in the\n+     expression.  This should almost never be overridden.  */\n+  virtual void set_outermost () { }\n+\n protected:\n \n   /* Called by generate_ax to do the work for this particular"
    }
  ]
}