{
  "sha": "63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjNlMTYzZjI0ZmU4MGZlMTUwOTUyN2U2Y2NmY2ZiOTYyMmY1ZTk5ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-22T18:21:58Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-03-02T18:59:38Z"
    },
    "message": "gdb: Allow GDB to _not_ load a previous command history\n\nThis commit aims to give a cleaner mechanism by which the user can\nprevent GDB from trying to load any previous command history.\n\nCurrently the user can change the path to the history file, either\nusing a command line flag, or by setting the GDBHISTFILE environment\nvariable, and if the path is set to a non-existent file, then\nobviously GDB wont load any command history.  However, this feels like\na bit of a bodge, I'd like to add an official mechanism by which we\ncan disable command history loading.\n\nWhy would we want to prevent command history loading?  The specific\nuse case I have is GDB starting with a CWD that is a network mounted\ndirectory, and there is no command history present.  Still GDB will\naccess the network in order to check for the file.  In my particular\nuse case I'm actually starting a large number of GDB instances in\nparallel, all in the same network mounted directory, the large number\nof network accesses looking for this file introduces a noticeable\ndelay at GDB startup.\n\nThe approach I'm proposing here is a slight adjustment to the current\nrules for setting up the history filename.  Currently, if a user does\nthis, they see an error:\n\n  (gdb) set history filename\n  Argument required (filename to set it to.).\n\nHowever, if a user does this:\n\n  $ GDBHISTFILE= gdb --quiet\n  (gdb) set history save on\n  (gdb) q\n  warning: Could not rename -gdb18416~ to : No such file or directory\n\nSo, we already have a bug in this area.  My plan is to allow the empty\nfilename to be accepted, and for this to mean, neither load, nor save\nthe command history.\n\nThis does mean that we now have two mechanisms to prevent saving the\ncommand history:\n\n  (gdb) set history filename\n\nor\n\n  (gdb) set history save off\n\nBut the only way to prevent loading the command history is to set the\nfilename to the empty string _before_ you get to a GDB prompt, either\nusing a command line option, or the environment variable.\n\nI've updated some of the show commands, for example this session:\n\n  (gdb) set history filename\n  (gdb) show history filename\n  There is no filename currently set for recording the command history in.\n  (gdb) show history save\n  Saving of the history record on exit is off.\n  (gdb) set history save on\n  (gdb) show history save\n  Saving of the history is disabled due to the value of 'history filename'.\n  (gdb) set history filename /tmp/hist\n  (gdb) show history save\n  Saving of the history record on exit is on.\n\nI've updated the manual, and added some tests.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention new behaviour of the history filename.\n\t* top.c (write_history_p): Add comment.\n\t(show_write_history_p): Add header comment, give a different\n\tmessage when history writing is on, but the history filename is\n\tempty.\n\t(history_filename): Add comment.\n\t(history_filename_empty): New function.\n\t(show_history_filename): Add header comment, give a different\n\tmessage when the filename is empty.\n\t(init_history): Compare history_filename against nullptr, and only\n\tread history if the filename is not empty.\n\t(set_history_filename): Add header comment, and only make\n\tnon-empty filenames absolute.\n\t(init_main): Make the filename argument to 'set history filename'\n\toptional.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Command History): Extend description for\n\tGDBHISTFILE and GDBHISTSIZE, add detail about the filename for\n\t'set history filename' being optional.  Describe the effect of an\n\tempty history filename on 'set history save on'.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/default.exp: Remove test of 'set history filename'.\n\t* gdb.base/gdbinit-history.exp: Add tests for setting the history\n\tfilename to the empty string.\n\t* lib/gdb.exp (gdb_init): Unset environment variables GDBHISTFILE\n\tand GDBHISTSIZE.\n\nChange-Id: Ia586e4311182fac99113b60f11ef8a11fbd5450b",
    "tree": {
      "sha": "36d85fd9d5a52b110ecfcd4dd5f70fdf4d36304d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/36d85fd9d5a52b110ecfcd4dd5f70fdf4d36304d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9"
    }
  ],
  "stats": {
    "total": 274,
    "additions": 259,
    "deletions": 15
  },
  "files": [
    {
      "sha": "e303a81673c4ede62be40c1dd8df3ac4ff55343a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -1,3 +1,21 @@\n+2020-03-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention new behaviour of the history filename.\n+\t* top.c (write_history_p): Add comment.\n+\t(show_write_history_p): Add header comment, give a different\n+\tmessage when history writing is on, but the history filename is\n+\tempty.\n+\t(history_filename): Add comment.\n+\t(history_filename_empty): New function.\n+\t(show_history_filename): Add header comment, give a different\n+\tmessage when the filename is empty.\n+\t(init_history): Compare history_filename against nullptr, and only\n+\tread history if the filename is not empty.\n+\t(set_history_filename): Add header comment, and only make\n+\tnon-empty filenames absolute.\n+\t(init_main): Make the filename argument to 'set history filename'\n+\toptional.\n+\n 2020-03-02  Christian Biesinger  <cbiesinger@google.com>\n \n \t* arm-nbsd-nat.c (arm_supply_fparegset): Rename to..."
    },
    {
      "sha": "cbdfcadb411619c922104ec30c175c728689b185",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -33,6 +33,12 @@\n \n * TUI windows can now be arranged horizontally.\n \n+* The command history filename can now be set to the empty string\n+  either using 'set history filename' or by setting 'GDBHISTFILE=' in\n+  the environment.  The effect of setting this filename to the empty\n+  string is that GDB will not try to load any previous command\n+  history.\n+\n * New commands\n \n set exec-file-mismatch -- Set exec-file-mismatch handling (ask|warn|off)."
    },
    {
      "sha": "95b6843c15f587d43632e6b84b1519e62d23f93f",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (Command History): Extend description for\n+\tGDBHISTFILE and GDBHISTSIZE, add detail about the filename for\n+\t'set history filename' being optional.  Describe the effect of an\n+\tempty history filename on 'set history save on'.\n+\n 2020-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.texinfo (Threads): Fix alignment in 'info threads' example"
    },
    {
      "sha": "32e419ead0212c6e5e0fdffb4caa2e92716fd861",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 22,
      "deletions": 3,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -25306,7 +25306,7 @@ history.\n @cindex history file\n @kindex set history filename\n @cindex @env{GDBHISTFILE}, environment variable\n-@item set history filename @var{fname}\n+@item set history filename @r{[}@var{fname}@r{]}\n Set the name of the @value{GDBN} command history file to @var{fname}.\n This is the file where @value{GDBN} reads an initial command history\n list, and where it writes the command history from this session when it\n@@ -25316,15 +25316,29 @@ to the value of the environment variable @code{GDBHISTFILE}, or to\n @file{./.gdb_history} (@file{./_gdb_history} on MS-DOS) if this variable\n is not set.\n \n+The @code{GDBHISTFILE} environment variable is read after processing\n+any @value{GDBN} initialization files (@pxref{Startup}) and after\n+processing any commands passed using command line options (for\n+example, @code{-ex}).\n+\n+If the @var{fname} argument is not given, or if the @code{GDBHISTFILE}\n+is the empty string then @value{GDBN} will neither try to load an\n+existing history file, nor will it try to save the history on exit.\n+\n @cindex save command history\n @kindex set history save\n @item set history save\n @itemx set history save on\n Record command history in a file, whose name may be specified with the\n-@code{set history filename} command.  By default, this option is disabled.\n+@code{set history filename} command.  By default, this option is\n+disabled.  The command history will be recorded when @value{GDBN}\n+exits.  If @code{set history filename} is set to the empty string then\n+history saving is disabled, even when @code{set history save} is\n+@code{on}.\n \n @item set history save off\n-Stop recording command history in a file.\n+Don't record the command history into the file specified by @code{set\n+history filename} when @value{GDBN} exits.\n \n @cindex history size\n @kindex set history size\n@@ -25338,6 +25352,11 @@ are ignored.  If @var{size} is @code{unlimited} or if @env{GDBHISTSIZE} is\n either a negative number or the empty string, then the number of commands\n @value{GDBN} keeps in the history list is unlimited.\n \n+The @code{GDBHISTSIZE} environment variable is read after processing\n+any @value{GDBN} initialization files (@pxref{Startup}) and after\n+processing any commands passed using command line options (for\n+example, @code{-ex}).\n+\n @cindex remove duplicate history\n @kindex set history remove-duplicates\n @item set history remove-duplicates @var{count}"
    },
    {
      "sha": "55c0a3ef60301938cec17930467941cfe25ae6a0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/default.exp: Remove test of 'set history filename'.\n+\t* gdb.base/gdbinit-history.exp: Add tests for setting the history\n+\tfilename to the empty string.\n+\t* lib/gdb.exp (gdb_init): Unset environment variables GDBHISTFILE\n+\tand GDBHISTSIZE.\n+\n 2020-03-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.server/stop-reply-no-thread.exp: Add test where T packet is"
    },
    {
      "sha": "c51ec63eccffc702f495614203ccc29858d77b44",
      "filename": "gdb/testsuite/gdb.base/default.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/gdb.base/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/gdb.base/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/default.exp?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -497,8 +497,6 @@ gdb_test \"set environment\" \"Argument required .environment variable and value.*\"\n gdb_test \"set height\" \"Argument required .integer to set it to.*\"\n #test set history expansion\n gdb_test_no_output \"set history expansion\" \"set history expansion\"\n-#test set history filename\n-gdb_test \"set history filename\" \"Argument required .filename to set it to.*\"\n # Make sure the history ends up in the right place.\n gdb_test_no_output \"set history filename [standard_output_file .gdb_history]\" \\\n     \"set the history filename\""
    },
    {
      "sha": "baa1b49153c07acbfeaca1dadf6882af90c1a9d3",
      "filename": "gdb/testsuite/gdb.base/gdbinit-history.exp",
      "status": "modified",
      "additions": 151,
      "deletions": 0,
      "changes": 151,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/gdb.base/gdbinit-history.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/gdb.base/gdbinit-history.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/gdbinit-history.exp?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -128,6 +128,154 @@ proc test_no_truncation_of_unlimited_history_file { } {\n     }\n }\n \n+# Check that the current command history matches HIST, which is a list\n+# of commands, oldest fist.\n+proc check_history { hist } {\n+\n+    # The show commands we issue here always appears last in the\n+    # commands list.\n+    lappend hist \"show commands\"\n+\n+    # Number all of the entries in the HIST list and convert the list\n+    # into a pattern to match against GDB.\n+    set hist_lines [list]\n+    set idx 1\n+    foreach h $hist {\n+\tlappend hist_lines \"    $idx  $h\"\n+\tincr idx\n+    }\n+    set pattern [eval multi_line $hist_lines]\n+\n+    # Check the history.\n+    gdb_test \"show commands\" \"$pattern.*\"\n+}\n+\n+# Run 'show history filename' and check the output contains the\n+# filename matching PATTERN, unless, PATTERN is the empty string, in\n+# which case match a different output that GDB will give if the\n+# history filename is the empty string.\n+#\n+# TESTNAME is the name for the test, which defaults to the command run\n+# in the test.\n+proc check_history_filename { pattern {testname \"\"} } {\n+\n+    set cmd \"show history filename\"\n+    if { $testname == \"\" } {\n+\tset testname $cmd\n+    }\n+\n+    if { $pattern == \"\" } {\n+\tgdb_test $cmd \\\n+\t    \"There is no filename currently set for recording the command history in.\" \\\n+\t    $testname\n+    } else {\n+\tgdb_test $cmd \\\n+\t    \"The filename in which to record the command history is \\\"$pattern\\\"\\.\" \\\n+\t    $testname\n+    }\n+}\n+\n+# Tests for how GDB handles setting the history filename to the empty\n+# string.\n+proc test_empty_history_filename { } {\n+    global env\n+    global gdb_prompt\n+\n+    set common_history [list \"set height 0\" \"set width 0\"]\n+\n+    set test_dir [standard_output_file history_test]\n+    remote_exec host \"mkdir -p $test_dir\"\n+    foreach entry { { \".gdb_history\" \"xxxxx\" } \\\n+\t\t\t{ \"_gdb_history\" \"xxxxx\" } \\\n+\t\t\t{ \"alt_history\" \"yyyyy\" } } {\n+\tset fn [lindex $entry 0]\n+\tset content [lindex $entry 1]\n+\tset fd [open [standard_output_file \"$test_dir/$fn\"] w]\n+\tputs $fd \"$content\"\n+\tclose $fd\n+    }\n+\n+    with_cwd \"$test_dir\" {\n+\twith_test_prefix \"load default history file\" {\n+\t    # Start GDB and see that the history file was loaded\n+\t    # correctly.\n+\t    gdb_exit\n+\t    gdb_start\n+\t    check_history [concat \"xxxxx\" $common_history]\n+\t    check_history_filename \".*/.gdb_history\"\n+\t}\n+\n+\twith_test_prefix \"load GDBHISTFILE history file\" {\n+\t    # Now restart GDB with GDBHISTFILE set to see that the\n+\t    # \"other\" history file is loaded.\n+\t    save_vars { env(GDBHISTFILE) } {\n+\t\tsetenv GDBHISTFILE \\\n+\t\t    \"$test_dir/alt_history\"\n+\t\tgdb_exit\n+\t\tgdb_start\n+\t\tcheck_history [concat \"yyyyy\" $common_history]\n+\t\tcheck_history_filename \".*/alt_history\"\n+\t    }\n+\t}\n+\n+\twith_test_prefix \"GDBHISTFILE is empty\" {\n+\t    # Now restart GDB with GDBHISTFILE set to indicate don't\n+\t    # load any history file, check none was loaded.\n+\t    save_vars { env(GDBHISTFILE) } {\n+\t    setenv GDBHISTFILE \"\"\n+\t\tgdb_exit\n+\t\tgdb_start\n+\t\tcheck_history $common_history\n+\t\tcheck_history_filename \"\"\n+\t    }\n+\n+\t    # Check that 'show history save' does the right thing when\n+\t    # the history filename is the empty string.\n+\t    gdb_test_no_output \"set history save off\" \\\n+\t\t\"ensure history save is off initially\"\n+\t    gdb_test \"show history save\" \\\n+\t\t\"Saving of the history record on exit is off.\" \\\n+\t\t\"Check history save is off\"\n+\t    gdb_test_no_output \"set history save on\"\n+\t    gdb_test \"show history save\" \\\n+\t\t\"Saving of the history is disabled due to the value of 'history filename'.\" \\\n+\t\t\"Check history save is off due to filename\"\n+\t    gdb_test_no_output \\\n+\t\t\"set history filename $test_dir/alt_history\" \\\n+\t\t\"set history filename at the command line\"\n+\t    check_history_filename \".*/alt_history\" \\\n+\t\t\"check filename after setting at the command line\"\n+\t    gdb_test \"show history save\" \\\n+\t\t\"Saving of the history record on exit is on.\" \\\n+\t\t\"Check history save is on\"\n+\t    gdb_test_no_output \"set history filename\"\n+\t    gdb_test \"show history save\" \\\n+\t\t\"Saving of the history is disabled due to the value of 'history filename'.\" \\\n+\t\t\"Check history save is off due to filename again\"\n+\t    gdb_test_no_output \"set history save off\"\n+\t}\n+\n+\twith_test_prefix \"Use -ex to clear history file\" {\n+\t    # Now restart GDB with the command line '-ex' to indicate\n+\t    # no history file should be loaded.\n+\t    gdb_exit\n+\t    if {[gdb_spawn_with_cmdline_opts \\\n+\t\t     \"-ex \\\"set history filename\\\"\"] != 0} {\n+\t\tfail \"spawn\"\n+\t\treturn\n+\t    }\n+\t    set test \"initial prompt\"\n+\t    gdb_test_multiple \"\" $test {\n+\t\t-re \".*$gdb_prompt $\" {\n+\t\t    pass \"$test\"\n+\t\t}\n+\t    }\n+\t    check_history [list]\n+\t    check_history_filename \"\"\n+\t}\n+    }\n+}\n+\n test_gdbinit_history_setting \"gdbinit-history/unlimited\" \"unlimited\"\n test_gdbinit_history_setting \"gdbinit-history/zero\" \"0\"\n \n@@ -138,3 +286,6 @@ test_no_truncation_of_unlimited_history_file\n # .gdbinit file.\n test_gdbinit_history_setting \"gdbinit-history/unlimited\" \"1000\" \"1000\"\n test_gdbinit_history_setting \"gdbinit-history/unlimited\" \"unlimited\" \"foo\"\n+\n+# Check handling of empty history filename.\n+test_empty_history_filename"
    },
    {
      "sha": "f8f404ff26b2802e89e9bf7edac0763511326bf9",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -5097,6 +5097,12 @@ proc gdb_init { test_file_name } {\n     # tests.\n     setenv TERM \"dumb\"\n \n+    # Ensure that GDBHISTFILE and GDBHISTSIZE are removed from the\n+    # environment, we don't want these modifications to the history\n+    # settings.\n+    unset -nocomplain ::env(GDBHISTFILE)\n+    unset -nocomplain ::env(GDBHISTSIZE)\n+\n     # Initialize GDB's pty with a fixed size, to make sure we avoid pagination\n     # during startup.  See \"man expect\" for details about stty_init.\n     global stty_init"
    },
    {
      "sha": "e2432489dc8b0d82862ca00749aac35f2d03ca70",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 41,
      "deletions": 10,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63e163f24fe80fe1509527e6ccfcfb9622f5e99e/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "patch": "@@ -84,6 +84,8 @@\n \n extern void initialize_all_files (void);\n \n+static bool history_filename_empty (void);\n+\n #define PROMPT(X) the_prompts.prompt_stack[the_prompts.top + X].prompt\n #define PREFIX(X) the_prompts.prompt_stack[the_prompts.top + X].prefix\n #define SUFFIX(X) the_prompts.prompt_stack[the_prompts.top + X].suffix\n@@ -884,13 +886,22 @@ static bool command_editing_p;\n \n /* static */ bool history_expansion_p;\n \n+/* Should we write out the command history on exit?  In order to write out\n+   the history both this flag must be true, and the history_filename\n+   variable must be set to something sensible.  */\n static bool write_history_p;\n+\n+/* Implement 'show history save'.  */\n static void\n show_write_history_p (struct ui_file *file, int from_tty,\n \t\t      struct cmd_list_element *c, const char *value)\n {\n-  fprintf_filtered (file, _(\"Saving of the history record on exit is %s.\\n\"),\n-\t\t    value);\n+  if (!write_history_p || !history_filename_empty ())\n+    fprintf_filtered (file, _(\"Saving of the history record on exit is %s.\\n\"),\n+\t\t      value);\n+  else\n+    fprintf_filtered (file, _(\"Saving of the history is disabled due to \"\n+\t\t\t      \"the value of 'history filename'.\\n\"));\n }\n \n /* The variable associated with the \"set/show history size\"\n@@ -919,14 +930,30 @@ show_history_remove_duplicates (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n+/* The name of the file in which GDB history will be written.  If this is\n+   set to NULL, of the empty string then history will not be written.  */\n static char *history_filename;\n+\n+/* Return true if the history_filename is either NULL or the empty string,\n+   indicating that we should not try to read, nor write out the history.  */\n+static bool\n+history_filename_empty (void)\n+{\n+  return (history_filename == nullptr || *history_filename == '\\0');\n+}\n+\n+/* Implement 'show history filename'.  */\n static void\n show_history_filename (struct ui_file *file, int from_tty,\n \t\t       struct cmd_list_element *c, const char *value)\n {\n-  fprintf_filtered (file, _(\"The filename in which to record \"\n-\t\t\t    \"the command history is \\\"%ps\\\".\\n\"),\n-\t\t    styled_string (file_name_style.style (), value));\n+  if (!history_filename_empty ())\n+    fprintf_filtered (file, _(\"The filename in which to record \"\n+\t\t\t      \"the command history is \\\"%ps\\\".\\n\"),\n+\t\t      styled_string (file_name_style.style (), value));\n+  else\n+    fprintf_filtered (file, _(\"There is no filename currently set for \"\n+\t\t\t      \"recording the command history in.\\n\"));\n }\n \n /* This is like readline(), but it has some gdb-specific behavior.\n@@ -2017,9 +2044,9 @@ init_history (void)\n   set_readline_history_size (history_size_setshow_var);\n \n   tmpenv = getenv (\"GDBHISTFILE\");\n-  if (tmpenv)\n+  if (tmpenv != nullptr)\n     history_filename = xstrdup (tmpenv);\n-  else if (!history_filename)\n+  else if (history_filename == nullptr)\n     {\n       /* We include the current directory so that if the user changes\n          directories the file written will be the same as the one\n@@ -2034,7 +2061,9 @@ init_history (void)\n       gdb::unique_xmalloc_ptr<char> temp (gdb_abspath (fname));\n       history_filename = temp.release ();\n     }\n-  read_history (history_filename);\n+\n+  if (!history_filename_empty ())\n+    read_history (history_filename);\n }\n \n static void\n@@ -2103,14 +2132,16 @@ show_gdb_datadir (struct ui_file *file, int from_tty,\n \t\t\t\t   gdb_datadir.c_str ()));\n }\n \n+/* Implement 'set history filename'.  */\n+\n static void\n set_history_filename (const char *args,\n \t\t      int from_tty, struct cmd_list_element *c)\n {\n   /* We include the current directory so that if the user changes\n      directories the file written will be the same as the one\n      that was read.  */\n-  if (!IS_ABSOLUTE_PATH (history_filename))\n+  if (!history_filename_empty () && !IS_ABSOLUTE_PATH (history_filename))\n     {\n       gdb::unique_xmalloc_ptr<char> temp (gdb_abspath (history_filename));\n \n@@ -2217,7 +2248,7 @@ By default this option is set to 0.\"),\n \t\t\t   show_history_remove_duplicates,\n \t\t\t   &sethistlist, &showhistlist);\n \n-  add_setshow_filename_cmd (\"filename\", no_class, &history_filename, _(\"\\\n+  add_setshow_optional_filename_cmd (\"filename\", no_class, &history_filename, _(\"\\\n Set the filename in which to record the command history.\"), _(\"\\\n Show the filename in which to record the command history.\"), _(\"\\\n (the list of previous commands of which a record is kept).\"),"
    }
  ]
}