{
  "sha": "5f54462c6ab4665adec1f3e4591c095d63eae06a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWY1NDQ2MmM2YWI0NjY1YWRlYzFmM2U0NTkxYzA5NWQ2M2VhZTA2YQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-05T16:36:16Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:18Z"
    },
    "message": "libctf, link: redo cu-mapping handling\n\nNow a bunch of stuff that doesn't apply to ld or any normal use of\nlibctf, piled into one commit so that it's easier to ignore.\n\nThe cu-mapping machinery associates incoming compilation unit names with\noutgoing names of CTF dictionaries that should correspond to them, for\nnon-gdb CTF consumers that would like to group multiple TUs into a\nsingle child dict if conflicting types are found in it (the existing use\ncase is one kernel module, one child CTF dict, even if the kernel module\nis composed of multiple CUs).\n\nThe upcoming deduplicator needs to track not only the mapping from\nincoming CU name to outgoing dict name, but the inverse mapping from\noutgoing dict name to incoming CU name, so it can work over every CTF\ndict we might see in the output and link into it.\n\nSo rejig the ctf-link machinery to do that.  Simultaneously (because\nthey are closely associated and were written at the same time), we add a\nnew CTF_LINK_EMPTY_CU_MAPPINGS flag to ctf_link, which tells the\nctf_link machinery to create empty child dicts for each outgoing CU\nmapping even if no CUs that correspond to it exist in the link.  This is\na bit (OK, quite a lot) of a waste of space, but some existing consumers\nrequire it.  (Nobody else should use it.)\n\nIts value is not consecutive with existing CTF_LINK flag values because\nwe're about to add more flags that are conceptually closer to the\nexisting ones than this one is.\n\ninclude/\n\t* ctf-api.h (CTF_LINK_EMPTY_CU_MAPPINGS): New.\n\nlibctf/\n\t* ctf-impl.h (ctf_file_t): Improve comments.\n\t<ctf_link_cu_mapping>: Split into...\n\t<ctf_link_in_cu_mapping>: ... this...\n\t<ctf_link_out_cu_mapping>: ... and this.\n\t* ctf-create.c (ctf_serialize): Adjust.\n\t* ctf-open.c (ctf_file_close): Likewise.\n\t* ctf-link.c (ctf_create_per_cu): Look things up in the\n\tin_cu_mapping instead of the cu_mapping.\n\t(ctf_link_add_cu_mapping): The deduplicating link will define\n\twhat happens if many FROMs share a TO.\n\t(ctf_link_add_cu_mapping): Create in_cu_mapping and\n\tout_cu_mapping. Do not create ctf_link_outputs here any more, or\n\tcreate per-CU dicts here: they are already created when needed.\n\t(ctf_link_one_variable): Log a debug message if we skip a\n\tvariable due to its type being concealed in a CU-mapped link.\n\t(This is probably too common a case to make into a warning.)\n\t(ctf_link): Create empty per-CU dicts if requested.",
    "tree": {
      "sha": "7b65fc8d4f34b3b13fe5657085abd7b6f0fbdd1c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b65fc8d4f34b3b13fe5657085abd7b6f0fbdd1c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5f54462c6ab4665adec1f3e4591c095d63eae06a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f54462c6ab4665adec1f3e4591c095d63eae06a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5f54462c6ab4665adec1f3e4591c095d63eae06a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f54462c6ab4665adec1f3e4591c095d63eae06a/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3f17159e26fc9b10625725e4d544693741cddb8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3f17159e26fc9b10625725e4d544693741cddb8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3f17159e26fc9b10625725e4d544693741cddb8"
    }
  ],
  "stats": {
    "total": 167,
    "additions": 135,
    "deletions": 32
  },
  "files": [
    {
      "sha": "60d7b9fd115344ea9820b078437d29d877eb125d",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (CTF_LINK_EMPTY_CU_MAPPINGS): New.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ECTF_NEEDSBFD): New."
    },
    {
      "sha": "700a2b1ef5d0623f00651f61d3feaa72d2464fed",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -78,14 +78,18 @@ typedef struct ctf_link_sym\n   uint32_t st_value;\n } ctf_link_sym_t;\n \n-/* Indication of how to share types when linking.  */\n+/* Flags applying to this specific link.  */\n \n /* Share all types that are not in conflict.  The default.  */\n #define CTF_LINK_SHARE_UNCONFLICTED 0x0\n \n /* Share only types that are used by multiple inputs.  Not implemented yet.  */\n #define CTF_LINK_SHARE_DUPLICATED 0x1\n \n+/* Create empty outputs for all registered CU mappings even if no types are\n+   emitted into them.  */\n+#define CTF_LINK_EMPTY_CU_MAPPINGS 0x4\n+\n /* Symbolic names for CTF sections.  */\n \n typedef enum ctf_sect_names"
    },
    {
      "sha": "ba6664fa0aedb53cc9f606cc9d4c0f11d9f4abb9",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -1,3 +1,23 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (ctf_file_t): Improve comments.\n+\t<ctf_link_cu_mapping>: Split into...\n+\t<ctf_link_in_cu_mapping>: ... this...\n+\t<ctf_link_out_cu_mapping>: ... and this.\n+\t* ctf-create.c (ctf_serialize): Adjust.\n+\t* ctf-open.c (ctf_file_close): Likewise.\n+\t* ctf-link.c (ctf_create_per_cu): Look things up in the\n+\tin_cu_mapping instead of the cu_mapping.\n+\t(ctf_link_add_cu_mapping): The deduplicating link will define\n+\twhat happens if many FROMs share a TO.\n+\t(ctf_link_add_cu_mapping): Create in_cu_mapping and\n+\tout_cu_mapping. Do not create ctf_link_outputs here any more, or\n+\tcreate per-CU dicts here: they are already created when needed.\n+\t(ctf_link_one_variable): Log a debug message if we skip a\n+\tvariable due to its type being concealed in a CU-mapped link.\n+\t(This is probably too common a case to make into a warning.)\n+\t(ctf_link): Create empty per-CU dicts if requested.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-link.c (ctf_link_write): Close the fd."
    },
    {
      "sha": "10c6bbf552e1c521b3d5a5da4de68a9c1036aad4",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -538,7 +538,8 @@ ctf_serialize (ctf_file_t *fp)\n   nfp->ctf_errs_warnings = fp->ctf_errs_warnings;\n   nfp->ctf_str_prov_offset = fp->ctf_str_prov_offset;\n   nfp->ctf_syn_ext_strtab = fp->ctf_syn_ext_strtab;\n-  nfp->ctf_link_cu_mapping = fp->ctf_link_cu_mapping;\n+  nfp->ctf_link_in_cu_mapping = fp->ctf_link_in_cu_mapping;\n+  nfp->ctf_link_out_cu_mapping = fp->ctf_link_out_cu_mapping;\n   nfp->ctf_link_type_mapping = fp->ctf_link_type_mapping;\n   nfp->ctf_link_memb_name_changer = fp->ctf_link_memb_name_changer;\n   nfp->ctf_link_memb_name_changer_arg = fp->ctf_link_memb_name_changer_arg;\n@@ -565,7 +566,8 @@ ctf_serialize (ctf_file_t *fp)\n   fp->ctf_link_inputs = NULL;\n   fp->ctf_link_outputs = NULL;\n   fp->ctf_syn_ext_strtab = NULL;\n-  fp->ctf_link_cu_mapping = NULL;\n+  fp->ctf_link_in_cu_mapping = NULL;\n+  fp->ctf_link_out_cu_mapping = NULL;\n   fp->ctf_link_type_mapping = NULL;\n   fp->ctf_parent_unreffed = 1;\n "
    },
    {
      "sha": "46bceb49861dd69af1f4fd1dc802efbf49ec2f55",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -311,12 +311,27 @@ struct ctf_file\n   ctf_list_t ctf_errs_warnings;\t  /* CTF errors and warnings.  */\n   ctf_dynhash_t *ctf_link_inputs; /* Inputs to this link.  */\n   ctf_dynhash_t *ctf_link_outputs; /* Additional outputs from this link.  */\n-  ctf_dynhash_t *ctf_link_type_mapping; /* Map input types to output types.  */\n-  ctf_dynhash_t *ctf_link_cu_mapping;\t/* Map CU names to CTF dict names.  */\n-  /* Allow the caller to Change the name of link archive members.  */\n+\n+  /* Map input types to output types: populated in each output dict.\n+     Key is a ctf_link_type_key_t: value is a type ID.  Used by\n+     nondeduplicating links and ad-hoc ctf_add_type calls only.  */\n+  ctf_dynhash_t *ctf_link_type_mapping;\n+\n+  /* Map input CU names to output CTF dict names: populated in the top-level\n+     output dict.\n+\n+     Key and value are dynamically-allocated strings.  */\n+  ctf_dynhash_t *ctf_link_in_cu_mapping;\n+\n+  /* Map output CTF dict names to input CU names: populated in the top-level\n+     output dict.  A hash of string to hash (set) of strings.  Key and\n+     individual value members are shared with ctf_link_in_cu_mapping.  */\n+  ctf_dynhash_t *ctf_link_out_cu_mapping;\n+\n   /* CTF linker flags.  */\n   int ctf_link_flags;\n \n+  /* Allow the caller to change the name of link archive members.  */\n   ctf_link_memb_name_changer_f *ctf_link_memb_name_changer;\n   void *ctf_link_memb_name_changer_arg; /* Argument for it.  */\n   ctf_dynhash_t *ctf_add_processing; /* Types ctf_add_type is working on now.  */"
    },
    {
      "sha": "3c96604b36aa42b18592cb390fa9a78f9ba35046",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 82,
      "deletions": 25,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -296,10 +296,12 @@ ctf_create_per_cu (ctf_file_t *fp, const char *filename, const char *cuname)\n      dictionary name.  We prefer the filename because this is easier for likely\n      callers to determine.  */\n \n-  if (fp->ctf_link_cu_mapping)\n+  if (fp->ctf_link_in_cu_mapping)\n     {\n-      if (((ctf_name = ctf_dynhash_lookup (fp->ctf_link_cu_mapping, filename)) == NULL) &&\n-\t  ((ctf_name = ctf_dynhash_lookup (fp->ctf_link_cu_mapping, cuname)) == NULL))\n+      if (((ctf_name = ctf_dynhash_lookup (fp->ctf_link_in_cu_mapping,\n+\t\t\t\t\t   filename)) == NULL) &&\n+\t  ((ctf_name = ctf_dynhash_lookup (fp->ctf_link_in_cu_mapping,\n+\t\t\t\t\t   cuname)) == NULL))\n \tctf_name = filename;\n     }\n \n@@ -339,10 +341,7 @@ ctf_create_per_cu (ctf_file_t *fp, const char *filename, const char *cuname)\n \n /* Add a mapping directing that the CU named FROM should have its\n    conflicting/non-duplicate types (depending on link mode) go into a container\n-   named TO.  Many FROMs can share a TO: in this case, the effect on conflicting\n-   types is not yet defined (but in time an auto-renaming algorithm will be\n-   added: ugly, but there is really no right thing one can do in this\n-   situation).\n+   named TO.  Many FROMs can share a TO.\n \n    We forcibly add a container named TO in every case, even though it may well\n    wind up empty, because clients that use this facility usually expect to find\n@@ -352,34 +351,63 @@ int\n ctf_link_add_cu_mapping (ctf_file_t *fp, const char *from, const char *to)\n {\n   int err;\n-  char *f, *t;\n+  char *f = NULL, *t = NULL;\n+  ctf_dynhash_t *one_out;\n+\n+  if (fp->ctf_link_in_cu_mapping == NULL)\n+    fp->ctf_link_in_cu_mapping = ctf_dynhash_create (ctf_hash_string,\n+\t\t\t\t\t\t     ctf_hash_eq_string, free,\n+\t\t\t\t\t\t     free);\n+  if (fp->ctf_link_in_cu_mapping == NULL)\n+    goto oom;\n \n-  if (fp->ctf_link_cu_mapping == NULL)\n-    fp->ctf_link_cu_mapping = ctf_dynhash_create (ctf_hash_string,\n-\t\t\t\t\t\t  ctf_hash_eq_string, free,\n-\t\t\t\t\t\t  free);\n-  if (fp->ctf_link_cu_mapping == NULL)\n-    return ctf_set_errno (fp, ENOMEM);\n+  if (fp->ctf_link_out_cu_mapping == NULL)\n+    fp->ctf_link_out_cu_mapping = ctf_dynhash_create (ctf_hash_string,\n+\t\t\t\t\t\t      ctf_hash_eq_string, free,\n+\t\t\t\t\t\t      (ctf_hash_free_fun)\n+\t\t\t\t\t\t      ctf_dynhash_destroy);\n+  if (fp->ctf_link_out_cu_mapping == NULL)\n+    goto oom;\n \n-  if (fp->ctf_link_outputs == NULL)\n-    fp->ctf_link_outputs = ctf_dynhash_create (ctf_hash_string,\n-\t\t\t\t\t       ctf_hash_eq_string, free,\n-\t\t\t\t\t       (ctf_hash_free_fun)\n-\t\t\t\t\t       ctf_file_close);\n+  f = strdup (from);\n+  t = strdup (to);\n+  if (!f || !t)\n+    goto oom;\n \n-  if (fp->ctf_link_outputs == NULL)\n-    return ctf_set_errno (fp, ENOMEM);\n+  /* Track both in a list from FROM to TO and in a list from TO to a list of\n+     FROM.  The former is used to create TUs with the mapped-to name at need:\n+     the latter is used in deduplicating links to pull in all input CUs\n+     corresponding to a single output CU.  */\n+\n+  if ((err = ctf_dynhash_insert (fp->ctf_link_in_cu_mapping, f, t)) < 0)\n+    {\n+      ctf_set_errno (fp, err);\n+      goto oom_noerrno;\n+    }\n \n+  /* f and t are now owned by the in_cu_mapping: reallocate them.  */\n   f = strdup (from);\n   t = strdup (to);\n   if (!f || !t)\n     goto oom;\n \n-  if (ctf_create_per_cu (fp, t, t) == NULL)\n-    goto oom_noerrno;\t\t\t\t/* Errno is set for us.  */\n+  if ((one_out = ctf_dynhash_lookup (fp->ctf_link_out_cu_mapping, t)) == NULL)\n+    {\n+      if ((one_out = ctf_dynhash_create (ctf_hash_string, ctf_hash_eq_string,\n+\t\t\t\t\t free, NULL)) == NULL)\n+\tgoto oom;\n+      if ((err = ctf_dynhash_insert (fp->ctf_link_out_cu_mapping,\n+\t\t\t\t     t, one_out)) < 0)\n+\t{\n+\t  ctf_dynhash_destroy (one_out);\n+\t  ctf_set_errno (fp, err);\n+\t  goto oom_noerrno;\n+\t}\n+    }\n+  else\n+    free (t);\n \n-  err = ctf_dynhash_insert (fp->ctf_link_cu_mapping, f, t);\n-  if (err)\n+  if (ctf_dynhash_insert (one_out, f, NULL) < 0)\n     {\n       ctf_set_errno (fp, err);\n       goto oom_noerrno;\n@@ -777,6 +805,8 @@ int\n ctf_link (ctf_file_t *fp, int flags)\n {\n   ctf_link_in_member_cb_arg_t arg;\n+  ctf_next_t *i = NULL;\n+  int err;\n \n   memset (&arg, 0, sizeof (struct ctf_link_in_member_cb_arg));\n   arg.out_fp = fp;\n@@ -794,6 +824,33 @@ ctf_link (ctf_file_t *fp, int flags)\n   if (fp->ctf_link_outputs == NULL)\n     return ctf_set_errno (fp, ENOMEM);\n \n+  /* Create empty CUs if requested.  We do not currently claim that multiple\n+     links in succession with CTF_LINK_EMPTY_CU_MAPPINGS set in some calls and\n+     not set in others will do anything especially sensible.  */\n+\n+  if (fp->ctf_link_out_cu_mapping && (flags & CTF_LINK_EMPTY_CU_MAPPINGS))\n+    {\n+      void *v;\n+\n+      while ((err = ctf_dynhash_next (fp->ctf_link_out_cu_mapping, &i, &v,\n+\t\t\t\t      NULL)) == 0)\n+\t{\n+\t  const char *to = (const char *) v;\n+\t  if (ctf_create_per_cu (fp, to, to) == NULL)\n+\t    {\n+\t      ctf_next_destroy (i);\n+\t      return -1;\t\t\t/* Errno is set for us.  */\n+\t    }\n+\t}\n+      if (err != ECTF_NEXT_END)\n+\t{\n+\t  ctf_err_warn (fp, 1, \"Iteration error creating empty CUs: %s\",\n+\t\t\tctf_errmsg (err));\n+\t  ctf_set_errno (fp, err);\n+\t  return -1;\n+\t}\n+    }\n+\n   ctf_dynhash_iter (fp->ctf_link_inputs, ctf_link_one_input_archive,\n \t\t    &arg);\n "
    },
    {
      "sha": "285e0e0ff7105216565b86d6c7c89eb05bea6f53",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f54462c6ab4665adec1f3e4591c095d63eae06a/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=5f54462c6ab4665adec1f3e4591c095d63eae06a",
      "patch": "@@ -1716,7 +1716,8 @@ ctf_file_close (ctf_file_t *fp)\n   ctf_dynhash_destroy (fp->ctf_link_inputs);\n   ctf_dynhash_destroy (fp->ctf_link_outputs);\n   ctf_dynhash_destroy (fp->ctf_link_type_mapping);\n-  ctf_dynhash_destroy (fp->ctf_link_cu_mapping);\n+  ctf_dynhash_destroy (fp->ctf_link_in_cu_mapping);\n+  ctf_dynhash_destroy (fp->ctf_link_out_cu_mapping);\n   ctf_dynhash_destroy (fp->ctf_add_processing);\n \n   for (err = ctf_list_next (&fp->ctf_errs_warnings); err != NULL; err = nerr)"
    }
  ]
}