{
  "sha": "bc31405ebb2c4297ae815ab59f59165014347528",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmMzMTQwNWViYjJjNDI5N2FlODE1YWI1OWY1OTE2NTAxNDM0NzUyOA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-01-27T12:38:10Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-01-27T12:38:29Z"
    },
    "message": "x86-64: Properly encode and decode movsxd\n\nmovsxd is a 64-bit only instruction.  It supports both 16-bit and 32-bit\ndestination registers.  Its AT&T mnemonic is movslq which only supports\n64-bit destination register.  There is also a discrepancy between AMD64\nand Intel64 on movsxd with 16-bit destination register.  AMD64 supports\n32-bit source operand and Intel64 supports 16-bit source operand.\n\nThis patch updates movsxd encoding and decoding to alow 16-bit and 32-bit\ndestination registers.  It also handles movsxd with 16-bit destination\nregister for AMD64 and Intel 64.\n\ngas/\n\n\tPR binutils/25445\n\t* config/tc-i386.c (check_long_reg): Also convert to QWORD for\n\tmovsxd.\n\t* doc/c-i386.texi: Add a node for AMD64 vs. Intel64 ISA\n\tdifferences.  Document movslq and movsxd.\n\t* testsuite/gas/i386/i386.exp: Run PR binutils/25445 tests.\n\t* testsuite/gas/i386/x86-64-movsxd-intel.d: New file.\n\t* testsuite/gas/i386/x86-64-movsxd-intel64-intel.d: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd-intel64-inval.l: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd-intel64-inval.s: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd-intel64.d: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd-intel64.s: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd-inval.l: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd-inval.s: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd.d: Likewise.\n\t* testsuite/gas/i386/x86-64-movsxd.s: Likewise.\n\nopcodes/\n\n\tPR binutils/25445\n\t* i386-dis.c (MOVSXD_Fixup): New function.\n\t(movsxd_mode): New enum.\n\t(x86_64_table): Use MOVSXD_Fixup and movsxd_mode on movsxd.\n\t(intel_operand_size): Handle movsxd_mode.\n\t(OP_E_register): Likewise.\n\t(OP_G): Likewise.\n\t* i386-opc.tbl: Remove Rex64 and allow 32-bit destination\n\tregister on movsxd.  Add movsxd with 16-bit destination register\n\tfor AMD64 and Intel64 ISAs.\n\t* i386-tbl.h: Regenerated.",
    "tree": {
      "sha": "4298be1f20f511497e961d2e672f38b0d2e75bf6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4298be1f20f511497e961d2e672f38b0d2e75bf6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bc31405ebb2c4297ae815ab59f59165014347528",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc31405ebb2c4297ae815ab59f59165014347528",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bc31405ebb2c4297ae815ab59f59165014347528",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc31405ebb2c4297ae815ab59f59165014347528/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3696f67abfc46dcac6c9bbe47f8e25e34b17be5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3696f67abfc46dcac6c9bbe47f8e25e34b17be5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3696f67abfc46dcac6c9bbe47f8e25e34b17be5"
    }
  ],
  "stats": {
    "total": 385,
    "additions": 378,
    "deletions": 7
  },
  "files": [
    {
      "sha": "91097845d467c6b8209bf7f38b2e84533924ff76",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -1,3 +1,22 @@\n+2020-01-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25445\n+\t* config/tc-i386.c (check_long_reg): Also convert to QWORD for\n+\tmovsxd.\n+\t* doc/c-i386.texi: Add a node for AMD64 vs. Intel64 ISA\n+\tdifferences.  Document movslq and movsxd.\n+\t* testsuite/gas/i386/i386.exp: Run PR binutils/25445 tests.\n+\t* testsuite/gas/i386/x86-64-movsxd-intel.d: New file.\n+\t* testsuite/gas/i386/x86-64-movsxd-intel64-intel.d: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd-intel64-inval.l: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd-intel64-inval.s: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd-intel64.d: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd-intel64.s: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd-inval.l: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd-inval.s: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd.d: Likewise.\n+\t* testsuite/gas/i386/x86-64-movsxd.s: Likewise.\n+\n 2020-01-27  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/all/gas.exp: Replace case statements with switch"
    },
    {
      "sha": "e3c971ca499885876d939c0dbfdd493649e51ef8",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -6690,7 +6690,9 @@ check_long_reg (void)\n \t     && i.tm.operand_types[op].bitfield.dword)\n       {\n \tif (intel_syntax\n-\t    && i.tm.opcode_modifier.toqword\n+\t    && (i.tm.opcode_modifier.toqword\n+\t\t/* Also convert to QWORD for MOVSXD.  */\n+\t\t|| i.tm.base_opcode == 0x63)\n \t    && i.types[0].bitfield.class != RegSIMD)\n \t  {\n \t    /* Convert to QWORD.  We want REX byte. */"
    },
    {
      "sha": "9fb681e87297bbae848238139d1dd063846df461",
      "filename": "gas/doc/c-i386.texi",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/doc/c-i386.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/doc/c-i386.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-i386.texi?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -37,6 +37,7 @@ extending the Intel architecture to 64-bits.\n * i386-TBM::                    AMD's Trailing Bit Manipulation Instructions\n * i386-16bit::                  Writing 16-bit Code\n * i386-Arch::                   Specifying an x86 CPU architecture\n+* i386-ISA::                    AMD64 ISA vs. Intel64 ISA\n * i386-Bugs::                   AT&T Syntax bugs\n * i386-Notes::                  Notes\n @end menu\n@@ -856,6 +857,12 @@ Several x87 instructions, @samp{fadd}, @samp{fdiv}, @samp{fdivp},\n assembler with different mnemonics from those in Intel IA32 specification.\n @code{@value{GCC}} generates those instructions with AT&T mnemonic.\n \n+@itemize @bullet\n+@item @samp{movslq} with AT&T mnemonic only accepts 64-bit destination\n+register.  @samp{movsxd} should be used to encode 16-bit or 32-bit\n+destination register with both AT&T and Intel mnemonics.\n+@end itemize\n+\n @node i386-Regs\n @section Register Naming\n \n@@ -1438,6 +1445,17 @@ For example\n  .arch i8086,nojumps\n @end smallexample\n \n+@node i386-ISA\n+@section AMD64 ISA vs. Intel64 ISA\n+\n+There are some discrepancies between AMD64 and Intel64 ISAs.\n+\n+@itemize @bullet\n+@item For @samp{movsxd} with 16-bit destination register, AMD64\n+supports 32-bit source operand and Intel64 supports 16-bit source\n+operand.\n+@end itemize\n+\n @node i386-Bugs\n @section AT&T Syntax bugs\n "
    },
    {
      "sha": "feab8c2be95cff1eb6566a0071b025d4709f91f9",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -1050,6 +1050,12 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n     run_dump_test \"x86-64-movd-intel\"\n     run_dump_test \"x86-64-nop-1\"\n     run_dump_test \"x86-64-nop-2\"\n+    run_dump_test \"x86-64-movsxd\"\n+    run_dump_test \"x86-64-movsxd-intel\"\n+    run_list_test \"x86-64-movsxd-inval\" \"-al\"\n+    run_dump_test \"x86-64-movsxd-intel64\"\n+    run_dump_test \"x86-64-movsxd-intel64-intel\"\n+    run_list_test \"x86-64-movsxd-intel64-inval\" \"-mintel64 -al\"\n     run_dump_test \"x86-64-optimize-1\"\n     run_dump_test \"x86-64-optimize-2\"\n     run_dump_test \"x86-64-optimize-2a\""
    },
    {
      "sha": "b7f55d41681fd102a82e634d6d9002536bf494b2",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-intel.d",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-intel.d?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,26 @@\n+#source: x86-64-movsxd.s\n+#as:\n+#objdump: -dw -Mintel\n+#name: x86-64 movsxd (AMD64) (Intel mode)\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <_start>:\n+ +[a-f0-9]+:\t48 63 c8             \tmovsxd rcx,eax\n+ +[a-f0-9]+:\t48 63 08             \tmovsxd rcx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t63 c8                \tmovsxd ecx,eax\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd cx,eax\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd cx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t48 63 c8             \tmovsxd rcx,eax\n+ +[a-f0-9]+:\t48 63 08             \tmovsxd rcx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t48 63 08             \tmovsxd rcx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t63 c8                \tmovsxd ecx,eax\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd cx,eax\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd cx,DWORD PTR \\[rax\\]\n+#pass"
    },
    {
      "sha": "1145df2971ff15e8007060bbf05f97d9d6a091e5",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-intel64-intel.d",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64-intel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64-intel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-intel64-intel.d?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,26 @@\n+#source: x86-64-movsxd-intel64.s\n+#as: -mintel64\n+#objdump: -dw -Mintel -Mintel64\n+#name: x86-64 movsxd (Intel64) (Intel mode)\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <_start>:\n+ +[a-f0-9]+:\t48 63 c8             \tmovsxd rcx,eax\n+ +[a-f0-9]+:\t48 63 08             \tmovsxd rcx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t63 c8                \tmovsxd ecx,eax\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd cx,ax\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd cx,WORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t48 63 c8             \tmovsxd rcx,eax\n+ +[a-f0-9]+:\t48 63 08             \tmovsxd rcx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t48 63 08             \tmovsxd rcx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t63 c8                \tmovsxd ecx,eax\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t63 08                \tmovsxd ecx,DWORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd cx,ax\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd cx,WORD PTR \\[rax\\]\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd cx,WORD PTR \\[rax\\]\n+#pass"
    },
    {
      "sha": "b3219e0c671685b7576ca87bfbd6e97a67e915da",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.l?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,27 @@\n+.*: Assembler messages:\n+.*:4: Error: .*\n+.*:5: Error: .*\n+.*:6: Error: .*\n+.*:7: Error: .*\n+.*:10: Error: .*\n+.*:11: Error: .*\n+.*:12: Error: .*\n+.*:13: Error: .*\n+.*:14: Error: .*\n+GAS LISTING .*\n+\n+\n+[ \t]*1[ \t]+\\# 64-bit only invalid MOVSXD with Intel64 ISA\n+[ \t]*2[ \t]+\\.text\n+[ \t]*3[ \t]+_start:\n+[ \t]*4[ \t]+movslq\t%eax, %cx\n+[ \t]*5[ \t]+movslq\t%eax, %ecx\n+[ \t]*6[ \t]+movslq\t\\(%rax\\), %ecx\n+[ \t]*7[ \t]+movsxd\t%ax, %ecx\n+[ \t]*8[ \t]+\n+[ \t]*9[ \t]+\\.intel_syntax noprefix\n+[ \t]*10[ \t]+movslq\tcx, ax\n+[ \t]*11[ \t]+movslq\tecx, eax\n+[ \t]*12[ \t]+movslq\tecx, \\[rax\\]\n+[ \t]*13[ \t]+movsxd\tcx, eax\n+[ \t]*14[ \t]+movsxd\tcx, DWORD PTR \\[rax\\]"
    },
    {
      "sha": "2edcaf833029e21b38b1f3234a223ffd020af529",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-intel64-inval.s?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,14 @@\n+# 64-bit only invalid MOVSXD with Intel64 ISA\n+\t.text\n+_start:\n+\tmovslq\t%eax, %cx\n+\tmovslq\t%eax, %ecx\n+\tmovslq\t(%rax), %ecx\n+\tmovsxd\t%ax, %ecx\n+\n+\t.intel_syntax noprefix\n+\tmovslq\tcx, ax\n+\tmovslq\tecx, eax\n+\tmovslq\tecx, [rax]\n+\tmovsxd\tcx, eax\n+\tmovsxd\tcx, DWORD PTR [rax]"
    },
    {
      "sha": "afd26d93a516014787607fcd606f229d99fd01e8",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-intel64.d",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-intel64.d?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,25 @@\n+#as: -mintel64\n+#objdump: -dw -Mintel64\n+#name: x86-64 movsxd (Intel64)\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <_start>:\n+ +[a-f0-9]+:\t48 63 c8             \tmovslq %eax,%rcx\n+ +[a-f0-9]+:\t48 63 08             \tmovslq \\(%rax\\),%rcx\n+ +[a-f0-9]+:\t63 c8                \tmovsxd %eax,%ecx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd %ax,%cx\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd \\(%rax\\),%cx\n+ +[a-f0-9]+:\t48 63 c8             \tmovslq %eax,%rcx\n+ +[a-f0-9]+:\t48 63 08             \tmovslq \\(%rax\\),%rcx\n+ +[a-f0-9]+:\t48 63 08             \tmovslq \\(%rax\\),%rcx\n+ +[a-f0-9]+:\t63 c8                \tmovsxd %eax,%ecx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd %ax,%cx\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd \\(%rax\\),%cx\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd \\(%rax\\),%cx\n+#pass"
    },
    {
      "sha": "842cdef42f506b26f449cfc5c7dd6b3476d845b1",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-intel64.s",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-intel64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-intel64.s?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,20 @@\n+# 64-bit only MOVSXD with Intel64 ISA\n+\t.text\n+_start:\n+\tmovslq\t%eax, %rcx\n+\tmovslq\t(%rax), %rcx\n+\tmovsxd\t%eax, %ecx\n+\tmovsxd\t(%rax), %ecx\n+\tmovsxd\t%ax, %cx\n+\tmovsxd\t(%rax), %cx\n+\n+\t.intel_syntax noprefix\n+\tmovsxd\trcx, eax\n+\tmovsxd\trcx, DWORD PTR [rax]\n+\tmovsxd\trcx, [rax]\n+\tmovsxd\tecx, eax\n+\tmovsxd\tecx, DWORD PTR [rax]\n+\tmovsxd\tecx, [rax]\n+\tmovsxd\tcx, ax\n+\tmovsxd\tcx, WORD PTR [rax]\n+\tmovsxd\tcx, [rax]"
    },
    {
      "sha": "7db46d6af399e38f36c29e73d2e5ec311f2905e1",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-inval.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-inval.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-inval.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-inval.l?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,27 @@\n+.*: Assembler messages:\n+.*:4: Error: .*\n+.*:5: Error: .*\n+.*:6: Error: .*\n+.*:7: Error: .*\n+.*:10: Error: .*\n+.*:11: Error: .*\n+.*:12: Error: .*\n+.*:13: Error: .*\n+.*:14: Error: .*\n+GAS LISTING .*\n+\n+\n+[ \t]*1[ \t]+\\# 64-bit only invalid MOVSXD with AMD64 ISA\n+[ \t]*2[ \t]+\\.text\n+[ \t]*3[ \t]+_start:\n+[ \t]*4[ \t]+movslq\t%ax, %cx\n+[ \t]*5[ \t]+movslq\t%eax, %ecx\n+[ \t]*6[ \t]+movslq\t\\(%rax\\), %ecx\n+[ \t]*7[ \t]+movsxd\t%ax, %cx\n+[ \t]*8[ \t]+\n+[ \t]*9[ \t]+\\.intel_syntax noprefix\n+[ \t]*10[ \t]+movslq\tcx, eax\n+[ \t]*11[ \t]+movslq\tecx, eax\n+[ \t]*12[ \t]+movslq\tecx, \\[rax\\]\n+[ \t]*13[ \t]+movsxd\tcx, ax\n+[ \t]*14[ \t]+movsxd\tcx, WORD PTR \\[rax\\]"
    },
    {
      "sha": "84bf520905776b5f294d006afe7ea7537a411d38",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd-inval.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-inval.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd-inval.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd-inval.s?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,14 @@\n+# 64-bit only invalid MOVSXD with AMD64 ISA\n+\t.text\n+_start:\n+\tmovslq\t%ax, %cx\n+\tmovslq\t%eax, %ecx\n+\tmovslq\t(%rax), %ecx\n+\tmovsxd\t%ax, %cx\n+\n+\t.intel_syntax noprefix\n+\tmovslq\tcx, eax\n+\tmovslq\tecx, eax\n+\tmovslq\tecx, [rax]\n+\tmovsxd\tcx, ax\n+\tmovsxd\tcx, WORD PTR [rax]"
    },
    {
      "sha": "1881fe2e3131a8f4ca494b1a1efc3d6b759d9462",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd.d",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd.d?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,25 @@\n+#as:\n+#objdump: -dw\n+#name: x86-64 movsxd (AMD64)\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <_start>:\n+ +[a-f0-9]+:\t48 63 c8             \tmovslq %eax,%rcx\n+ +[a-f0-9]+:\t48 63 08             \tmovslq \\(%rax\\),%rcx\n+ +[a-f0-9]+:\t63 c8                \tmovsxd %eax,%ecx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd %eax,%cx\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd \\(%rax\\),%cx\n+ +[a-f0-9]+:\t48 63 c8             \tmovslq %eax,%rcx\n+ +[a-f0-9]+:\t48 63 08             \tmovslq \\(%rax\\),%rcx\n+ +[a-f0-9]+:\t48 63 08             \tmovslq \\(%rax\\),%rcx\n+ +[a-f0-9]+:\t63 c8                \tmovsxd %eax,%ecx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t66 63 c8             \tmovsxd %eax,%cx\n+ +[a-f0-9]+:\t63 08                \tmovsxd \\(%rax\\),%ecx\n+ +[a-f0-9]+:\t66 63 08             \tmovsxd \\(%rax\\),%cx\n+#pass"
    },
    {
      "sha": "f0efd59319af9ba325ab13f3a53dee2a4b5d2f71",
      "filename": "gas/testsuite/gas/i386/x86-64-movsxd.s",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/gas/testsuite/gas/i386/x86-64-movsxd.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-movsxd.s?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -0,0 +1,20 @@\n+# 64-bit only MOVSXD with AMD64 ISA\n+\t.text\n+_start:\n+\tmovslq\t%eax, %rcx\n+\tmovslq\t(%rax), %rcx\n+\tmovsxd\t%eax, %ecx\n+\tmovsxd\t(%rax), %ecx\n+\tmovsxd\t%eax, %cx\n+\tmovsxd\t(%rax), %cx\n+\n+\t.intel_syntax noprefix\n+\tmovsxd\trcx, eax\n+\tmovsxd\trcx, DWORD PTR [rax]\n+\tmovsxd\trcx, [rax]\n+\tmovsxd\tecx, eax\n+\tmovsxd\tecx, DWORD PTR [rax]\n+\tmovsxd\tecx, [rax]\n+\tmovsxd\tcx, eax\n+\tmovsxd\tcx, DWORD PTR [rax]\n+\tmovsxd\tcx, [rax]"
    },
    {
      "sha": "3076dac9f54d8cd3e4ef656e9d794ced84d4f603",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -1,3 +1,18 @@\n+2020-01-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Jan Beulich  <jbeulich@suse.com>\n+\n+\tPR binutils/25445\n+\t* i386-dis.c (MOVSXD_Fixup): New function.\n+\t(movsxd_mode): New enum.\n+\t(x86_64_table): Use MOVSXD_Fixup and movsxd_mode on movsxd.\n+\t(intel_operand_size): Handle movsxd_mode.\n+\t(OP_E_register): Likewise.\n+\t(OP_G): Likewise.\n+\t* i386-opc.tbl: Remove Rex64 and allow 32-bit destination\n+\tregister on movsxd.  Add movsxd with 16-bit destination register\n+\tfor AMD64 and Intel64 ISAs.\n+\t* i386-tbl.h: Regenerated.\n+\n 2020-01-27  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR 25403"
    },
    {
      "sha": "e6f73bff20676b7c224e716f7bcccb2feb500c80",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 59,
      "deletions": 2,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -124,6 +124,7 @@ static void OP_Vex_2src_1 (int, int);\n static void OP_Vex_2src_2 (int, int);\n \n static void MOVBE_Fixup (int, int);\n+static void MOVSXD_Fixup (int, int);\n \n static void OP_Mask (int, int);\n \n@@ -556,6 +557,7 @@ enum\n   a_mode,\n   cond_jump_mode,\n   loop_jcxz_mode,\n+  movsxd_mode,\n   v_bnd_mode,\n   /* like v_bnd_mode in 32bit, no RIP-rel in 64bit mode.  */\n   v_bndmk_mode,\n@@ -6873,7 +6875,7 @@ static const struct dis386 x86_64_table[][2] = {\n   /* X86_64_63 */\n   {\n     { \"arpl\", { Ew, Gw }, 0 },\n-    { \"movs{lq|xd}\", { Gv, Ed }, 0 },\n+    { \"movs\", { { OP_G, movsxd_mode }, { MOVSXD_Fixup, movsxd_mode } }, 0 },\n   },\n \n   /* X86_64_6D */\n@@ -13536,6 +13538,13 @@ intel_operand_size (int bytemode, int sizeflag)\n \toappend (\"DWORD PTR \");\n       used_prefixes |= (prefixes & PREFIX_DATA);\n       break;\n+    case movsxd_mode:\n+      if (!(sizeflag & DFLAG) && isa64 == intel64)\n+\toappend (\"WORD PTR \");\n+      else\n+\toappend (\"DWORD PTR \");\n+      used_prefixes |= (prefixes & PREFIX_DATA);\n+      break;\n     case d_mode:\n     case d_scalar_mode:\n     case d_scalar_swap_mode:\n@@ -13921,6 +13930,13 @@ OP_E_register (int bytemode, int sizeflag)\n \t  used_prefixes |= (prefixes & PREFIX_DATA);\n \t}\n       break;\n+    case movsxd_mode:\n+      if (!(sizeflag & DFLAG) && isa64 == intel64)\n+\tnames = names16;\n+      else\n+\tnames = names32;\n+      used_prefixes |= (prefixes & PREFIX_DATA);\n+      break;\n     case va_mode:\n       names = (address_mode == mode_64bit\n \t       ? names64 : names32);\n@@ -14492,12 +14508,14 @@ OP_G (int bytemode, int sizeflag)\n     case dqb_mode:\n     case dqd_mode:\n     case dqw_mode:\n+    case movsxd_mode:\n       USED_REX (REX_W);\n       if (rex & REX_W)\n \toappend (names64[modrm.reg + add]);\n       else\n \t{\n-\t  if ((sizeflag & DFLAG) || bytemode != v_mode)\n+\t  if ((sizeflag & DFLAG)\n+\t      || (bytemode != v_mode && bytemode != movsxd_mode))\n \t    oappend (names32[modrm.reg + add]);\n \t  else\n \t    oappend (names16[modrm.reg + add]);\n@@ -16563,6 +16581,45 @@ MOVBE_Fixup (int bytemode, int sizeflag)\n   OP_M (bytemode, sizeflag);\n }\n \n+static void\n+MOVSXD_Fixup (int bytemode, int sizeflag)\n+{\n+  /* Add proper suffix to \"movsxd\".  */\n+  char *p = mnemonicendp;\n+\n+  switch (bytemode)\n+    {\n+    case movsxd_mode:\n+      if (intel_syntax)\n+\t{\n+\t  *p++ = 'x';\n+\t  *p++ = 'd';\n+\t  goto skip;\n+\t}\n+\n+      USED_REX (REX_W);\n+      if (rex & REX_W)\n+\t{\n+\t  *p++ = 'l';\n+\t  *p++ = 'q';\n+\t}\n+      else\n+\t{\n+\t  *p++ = 'x';\n+\t  *p++ = 'd';\n+\t}\n+      break;\n+    default:\n+      oappend (INTERNAL_DISASSEMBLER_ERROR);\n+      break;\n+    }\n+\n+skip:\n+  mnemonicendp = p;\n+  *p = '\\0';\n+  OP_E (bytemode, sizeflag);\n+}\n+\n static void\n OP_LWPCB_E (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n {"
    },
    {
      "sha": "19793fdcd45ee9261ad3fb63d4087fb79f9003c4",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -135,7 +135,9 @@ movsx, 2, 0x63, None, 1, Cpu64, Modrm|No_bSuf|No_wSuf|No_sSuf|No_qSuf|No_ldSuf|R\n movsx, 2, 0xfbe, None, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IntelSyntax, { Reg8|Byte|BaseIndex, Reg16|Reg32|Reg64 }\n movsx, 2, 0xfbf, None, 2, Cpu386, Modrm|No_bSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IntelSyntax, { Reg16|Word|BaseIndex, Reg32|Reg64 }\n movsx, 2, 0x63, None, 1, Cpu64, Modrm|No_bSuf|No_wSuf|No_sSuf|No_qSuf|No_ldSuf|Rex64|IntelSyntax, { Reg32|Dword|BaseIndex, Reg64 }\n-movsxd, 2, 0x63, None, 1, Cpu64, Modrm|No_bSuf|No_wSuf|No_sSuf|No_qSuf|No_ldSuf|Rex64, { Reg32|Dword|Unspecified|BaseIndex, Reg64 }\n+movsxd, 2, 0x63, None, 1, Cpu64, Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg32|Unspecified|BaseIndex, Reg32|Reg64 }\n+movsxd, 2, 0x63, None, 1, Cpu64, AMD64|Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg32|Unspecified|BaseIndex, Reg16 }\n+movsxd, 2, 0x63, None, 1, Cpu64, Intel64|Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg16|Unspecified|BaseIndex, Reg16 }\n \n // Move with zero extend.\n movzb, 2, 0xfb6, None, 2, Cpu386, Modrm|No_bSuf|No_sSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }"
    },
    {
      "sha": "d1a6c0915a9fd76f4987de22651bef249b5da33a",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 31,
      "deletions": 3,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc31405ebb2c4297ae815ab59f59165014347528/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=bc31405ebb2c4297ae815ab59f59165014347528",
      "patch": "@@ -435,12 +435,40 @@ const insn_template i386_optab[] =\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n+    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n     { { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n \t  0, 0, 0, 0, 1, 0 } },\n-      { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+      { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n+\t  0, 0, 0, 0, 0, 0 } } } },\n+  { \"movsxd\", 0x63, None, 1, 2,\n+    { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n+    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },\n+    { { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n+\t  0, 0, 0, 0, 1, 0 } },\n+      { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n+\t  0, 0, 0, 0, 0, 0 } } } },\n+  { \"movsxd\", 0x63, None, 1, 2,\n+    { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n+    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },\n+    { { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,\n+\t  0, 0, 0, 0, 1, 0 } },\n+      { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0 } } } },\n   { \"movzb\", 0xfb6, None, 2, 2,\n     { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    }
  ]
}