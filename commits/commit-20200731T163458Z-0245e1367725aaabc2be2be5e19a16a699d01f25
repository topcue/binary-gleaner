{
  "sha": "0245e1367725aaabc2be2be5e19a16a699d01f25",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDI0NWUxMzY3NzI1YWFhYmMyYmUyYmU1ZTE5YTE2YTY5OWQwMWYyNQ==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-31T03:51:40Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-31T16:34:58Z"
    },
    "message": "gdb.base/coremaker2.c: Fix compilation problems for x86_64 -m32 multilib\n\nThere are compilation warnings / errors when compiling coremaker2.c\nfor the gdb.base/corefile2.exp tests.  Here's the command to use\non x86_64 linux:\n\nmake check RUNTESTFLAGS=\"--target_board unix/-m32\" \\\n           TESTS=\"gdb.base/corefile2.exp\"\n\nThese are the warnings / errors - I've shortened the paths somewhat:\n\ngdb compile failed, gdb/testsuite/gdb.base/coremaker2.c: In function 'main':\ngdb/testsuite/gdb.base/coremaker2.c:106:11: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  106 |   addr = ((unsigned long long) buf_ro + pagesize) & ~(pagesize - 1);\n      |           ^\ngdb/testsuite/gdb.base/coremaker2.c:108:15: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  108 |   if (addr <= (unsigned long long) buf_ro\n      |               ^\ngdb/testsuite/gdb.base/coremaker2.c:109:18: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  109 |       || addr >= (unsigned long long) buf_ro + sizeof (buf_ro))\n      |                  ^\ngdb/testsuite/gdb.base/coremaker2.c:115:19: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]\n  115 |   mbuf_ro = mmap ((void *) addr, pagesize, PROT_READ,\n      |                   ^\ngdb/testsuite/gdb.base/coremaker2.c:130:11: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  130 |   addr = ((unsigned long long) buf_rw + pagesize) & ~(pagesize - 1);\n      |           ^\ngdb/testsuite/gdb.base/coremaker2.c:132:15: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  132 |   if (addr <= (unsigned long long) buf_rw\n      |               ^\ngdb/testsuite/gdb.base/coremaker2.c:133:18: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]\n  133 |       || addr >= (unsigned long long) buf_rw + sizeof (buf_rw))\n      |                  ^\ngdb/testsuite/gdb.base/coremaker2.c:139:19: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]\n  139 |   mbuf_rw = mmap ((void *) addr, pagesize, PROT_READ,\n      |                   ^\n\nThese were fixed by changing unsigned long long to uintptr_t.\n\nTested on either rawhide or Fedora 32 with architectures: x86_64,\nx86_64/-m32, aarch64, s390x, and ppc64le.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/coremaker2.c: Change all uses of 'unsigned long long'\n\tto 'uintptr_t'\n\t(inttypes.h): Include.",
    "tree": {
      "sha": "30512ce776fc3dc935e8a103feece48f93277c19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30512ce776fc3dc935e8a103feece48f93277c19"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0245e1367725aaabc2be2be5e19a16a699d01f25",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0245e1367725aaabc2be2be5e19a16a699d01f25",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0245e1367725aaabc2be2be5e19a16a699d01f25",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0245e1367725aaabc2be2be5e19a16a699d01f25/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9ef1ec5dca12fce2d9e9d3711c8a4091611c804d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ef1ec5dca12fce2d9e9d3711c8a4091611c804d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9ef1ec5dca12fce2d9e9d3711c8a4091611c804d"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 14,
    "deletions": 7
  },
  "files": [
    {
      "sha": "29dc46aad79bd67cda612bf1448400ac4e1db2f7",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0245e1367725aaabc2be2be5e19a16a699d01f25/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0245e1367725aaabc2be2be5e19a16a699d01f25/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0245e1367725aaabc2be2be5e19a16a699d01f25",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-31  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdb.base/coremaker2.c: Change all uses of 'unsigned long long'\n+\tto 'uintptr_t'\n+\t(inttypes.h): Include.\n+\n 2020-07-31  Kevin Buettner  <kevinb@redhat.com>\n \n \t* gdb.base/coremaker2.c (buf_rw): Increase size to 256 KiB."
    },
    {
      "sha": "d50ed5c0c6eb1fc5ffe4c12ea2d70fac57a0b1c3",
      "filename": "gdb/testsuite/gdb.base/coremaker2.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0245e1367725aaabc2be2be5e19a16a699d01f25/gdb/testsuite/gdb.base/coremaker2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0245e1367725aaabc2be2be5e19a16a699d01f25/gdb/testsuite/gdb.base/coremaker2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/coremaker2.c?ref=0245e1367725aaabc2be2be5e19a16a699d01f25",
      "patch": "@@ -39,11 +39,12 @@\n #include <unistd.h>\n #include <string.h>\n #include <errno.h>\n+#include <inttypes.h>\n \n /* These are globals so that we can find them easily when debugging\n    the core file.  */\n long pagesize;\n-unsigned long long addr;\n+uintptr_t addr;\n char *mbuf_ro;\n char *mbuf_rw;\n \n@@ -106,10 +107,10 @@ main (int argc, char **argv)\n     }\n \n   /* Compute an address that should be within buf_ro.  Complain if not.  */\n-  addr = ((unsigned long long) buf_ro + pagesize) & ~(pagesize - 1);\n+  addr = ((uintptr_t) buf_ro + pagesize) & ~(pagesize - 1);\n \n-  if (addr <= (unsigned long long) buf_ro\n-      || addr >= (unsigned long long) buf_ro + sizeof (buf_ro))\n+  if (addr <= (uintptr_t) buf_ro\n+      || addr >= (uintptr_t) buf_ro + sizeof (buf_ro))\n     {\n       fprintf (stderr, \"Unable to compute a suitable address within buf_ro.\\n\");\n       exit (1);\n@@ -130,10 +131,10 @@ main (int argc, char **argv)\n \n   /* Compute an mmap address within buf_rw.  Complain if it's somewhere\n      else.  */\n-  addr = ((unsigned long long) buf_rw + pagesize) & ~(pagesize - 1);\n+  addr = ((uintptr_t) buf_rw + pagesize) & ~(pagesize - 1);\n \n-  if (addr <= (unsigned long long) buf_rw\n-      || addr >= (unsigned long long) buf_rw + sizeof (buf_rw))\n+  if (addr <= (uintptr_t) buf_rw\n+      || addr >= (uintptr_t) buf_rw + sizeof (buf_rw))\n     {\n       fprintf (stderr, \"Unable to compute a suitable address within buf_rw.\\n\");\n       exit (1);"
    }
  ]
}