{
  "sha": "f10f8617a302f45dae721eae0cd659911f03d864",
  "node_id": "C_kwDOANOeidoAKGYxMGY4NjE3YTMwMmY0NWRhZTcyMWVhZTBjZDY1OTkxMWYwM2Q4NjQ",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2022-01-31T14:36:31Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2022-01-31T14:36:31Z"
    },
    "message": "Import patch from mainline GCC to fix an infinite recusion in the Rust demangler.\n\n\tPR 98886\n\tPR 99935\n\t* rust-demangle.c (struct rust_demangler): Add a recursion\n\tcounter.\n\t(demangle_path): Increment/decrement the recursion counter upon\n\tentry and exit.  Fail if the counter exceeds a fixed limit.\n\t(demangle_type): Likewise.\n\t(rust_demangle_callback): Initialise the recursion counter,\n\tdisabling if requested by the option flags.",
    "tree": {
      "sha": "cd6444637702f0c5d88e39fb8163fa3b07ad879e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd6444637702f0c5d88e39fb8163fa3b07ad879e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f10f8617a302f45dae721eae0cd659911f03d864",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f10f8617a302f45dae721eae0cd659911f03d864",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f10f8617a302f45dae721eae0cd659911f03d864",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f10f8617a302f45dae721eae0cd659911f03d864/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9ff8aa7d418bc508dbd429576b93e30ed9dc5891",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ff8aa7d418bc508dbd429576b93e30ed9dc5891",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9ff8aa7d418bc508dbd429576b93e30ed9dc5891"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 53,
    "deletions": 6
  },
  "files": [
    {
      "sha": "de3a6eeef527eadd2ef3430b63d5bd706f989d90",
      "filename": "libiberty/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f10f8617a302f45dae721eae0cd659911f03d864/libiberty/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f10f8617a302f45dae721eae0cd659911f03d864/libiberty/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/ChangeLog?ref=f10f8617a302f45dae721eae0cd659911f03d864",
      "patch": "@@ -1,3 +1,15 @@\n+2022-01-31  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 98886\n+\tPR 99935\n+\t* rust-demangle.c (struct rust_demangler): Add a recursion\n+\tcounter.\n+\t(demangle_path): Increment/decrement the recursion counter upon\n+\tentry and exit.  Fail if the counter exceeds a fixed limit.\n+\t(demangle_type): Likewise.\n+\t(rust_demangle_callback): Initialise the recursion counter,\n+\tdisabling if requested by the option flags.\n+\n 2022-01-15  Martin Sebor  <msebor@redhat.com>\n \n \t* regex.c: Suppress -Wuse-after-free."
    },
    {
      "sha": "3b24d63892a9732f335860140e481c7bd696fe2f",
      "filename": "libiberty/rust-demangle.c",
      "status": "modified",
      "additions": 41,
      "deletions": 6,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f10f8617a302f45dae721eae0cd659911f03d864/libiberty/rust-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f10f8617a302f45dae721eae0cd659911f03d864/libiberty/rust-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/rust-demangle.c?ref=f10f8617a302f45dae721eae0cd659911f03d864",
      "patch": "@@ -74,6 +74,12 @@ struct rust_demangler\n   /* Rust mangling version, with legacy mangling being -1. */\n   int version;\n \n+  /* Recursion depth.  */\n+  unsigned int recursion;\n+  /* Maximum number of times demangle_path may be called recursively.  */\n+#define RUST_MAX_RECURSION_COUNT  1024\n+#define RUST_NO_RECURSION_LIMIT   ((unsigned int) -1)\n+\n   uint64_t bound_lifetime_depth;\n };\n \n@@ -671,6 +677,15 @@ demangle_path (struct rust_demangler *rdm, int in_value)\n   if (rdm->errored)\n     return;\n \n+  if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    {\n+      ++ rdm->recursion;\n+      if (rdm->recursion > RUST_MAX_RECURSION_COUNT)\n+\t/* FIXME: There ought to be a way to report\n+\t   that the recursion limit has been reached.  */\n+\tgoto fail_return;\n+    }\n+\n   switch (tag = next (rdm))\n     {\n     case 'C':\n@@ -688,10 +703,7 @@ demangle_path (struct rust_demangler *rdm, int in_value)\n     case 'N':\n       ns = next (rdm);\n       if (!ISLOWER (ns) && !ISUPPER (ns))\n-        {\n-          rdm->errored = 1;\n-          return;\n-        }\n+\tgoto fail_return;\n \n       demangle_path (rdm, in_value);\n \n@@ -776,9 +788,15 @@ demangle_path (struct rust_demangler *rdm, int in_value)\n         }\n       break;\n     default:\n-      rdm->errored = 1;\n-      return;\n+      goto fail_return;\n     }\n+  goto pass_return;\n+\n+ fail_return:\n+  rdm->errored = 1;\n+ pass_return:\n+  if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    -- rdm->recursion;\n }\n \n static void\n@@ -870,6 +888,19 @@ demangle_type (struct rust_demangler *rdm)\n       return;\n     }\n \n+   if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    {\n+      ++ rdm->recursion;\n+      if (rdm->recursion > RUST_MAX_RECURSION_COUNT)\n+\t/* FIXME: There ought to be a way to report\n+\t   that the recursion limit has been reached.  */\n+\t{\n+\t  rdm->errored = 1;\n+\t  -- rdm->recursion;\n+\t  return;\n+\t}\n+    }\n+\n   switch (tag)\n     {\n     case 'R':\n@@ -1030,6 +1061,9 @@ demangle_type (struct rust_demangler *rdm)\n       rdm->next--;\n       demangle_path (rdm, 0);\n     }\n+\n+  if (rdm->recursion != RUST_NO_RECURSION_LIMIT)\n+    -- rdm->recursion;\n }\n \n /* A trait in a trait object may have some \"existential projections\"\n@@ -1320,6 +1354,7 @@ rust_demangle_callback (const char *mangled, int options,\n   rdm.skipping_printing = 0;\n   rdm.verbose = (options & DMGL_VERBOSE) != 0;\n   rdm.version = 0;\n+  rdm.recursion = (options & DMGL_NO_RECURSE_LIMIT) ? RUST_NO_RECURSION_LIMIT : 0;\n   rdm.bound_lifetime_depth = 0;\n \n   /* Rust symbols always start with _R (v0) or _ZN (legacy). */"
    }
  ]
}