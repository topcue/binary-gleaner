{
  "sha": "2eab46b176fa315ebc07569280f020c3348c2aa2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmVhYjQ2YjE3NmZhMzE1ZWJjMDc1NjkyODBmMDIwYzMzNDhjMmFhMg==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-01-05T07:55:08Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-01-05T07:55:08Z"
    },
    "message": "GDB crash re-running program on Windows (native)\n\nRunning any program twice on Windows current results in GDB crashing:\n\n    $ gdb -q any_program\n    (gdb) run\n    $ gdb dummy -batch -ex run -ex run\n    [New Thread 684960.0xe5878]\n    [New Thread 684960.0xd75ac]\n    [New Thread 684960.0xddac8]\n    [New Thread 684960.0xc1f50]\n    [Thread 684960.0xd75ac exited with code 0]\n    [Thread 684960.0xddac8 exited with code 0]\n    [Thread 684960.0xc1f50 exited with code 0]\n    [Inferior 1 (process 684960) exited normally]\n    (gdb) run\n    Segmentation fault\n\nThe crash happens while processing the CREATE_PROCESS_DEBUG_EVENT\nfor  the second run; in particular, we have in get_windows_debug_event:\n\n    | case CREATE_PROCESS_DEBUG_EVENT:\n    |   [...]\n    |   if (main_thread_id)\n    |     windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n    |                                    main_thread_id),\n    |                            0);\n\nThe problem is that main_thread_id is the TID of the main thread from\nthe *previous* inferior, and this code is trying to delete that\nthread. The problem is that it is constructing a PTID by pairing\nthe TID of the previous inferior with the PID of the new inferior.\nAs a result, when we dig inside windows_delete_thread to see\nhow it would handle that, we see...\n\n    | delete_thread (find_thread_ptid (ptid));\n\nSince the PTID is bogus, we end up calling delete_thread with\na NULL thread_info. It used to be harmless, turning the delete_thread\ninto a nop, but the following change...\n\n    | commit 080363310650c93ad8e93018bcb6760ba5d32d1c\n    | Date:   Thu Nov 22 16:09:14 2018 +0000\n    | Subject: Per-inferior thread list, thread ranges/iterators, down with ALL_THREADS, etc.\n\n... changed delete_thread to get the list of threads from\nthe inferior, which itself is now accessed via the given\nthread_info. This is the corresponding diff that shows the change:\n\n    | -  for (tp = thread_list; tp; tpprev = tp, tp = tp->next)\n    | +  for (tp = thr->inf->thread_list; tp; tpprev = tp, tp = tp->next)\n\nAs a result of this, passing a NULL thread_info is no longer\nan option!\n\nStepping back a bit, the reason behind deleting the thread late\ncould be found in a patch from Dec 2003, which laconically explains:\n\n    | commit 87a45c96062d658ca83b50aa060a648bf5f5f1ff\n    | Date:   Fri Dec 26 00:39:04 2003 +0000\n    |\n    | * win32-nat.c (get_child_debug_event): Keep main thread id around\n    | even after thread exits since Windows insists on continuing to\n    | report events against it.\n\nA look at the gdb-patches archives did not provide any additional\nclues (https://www.sourceware.org/ml/gdb-patches/2003-12/msg00478.html).\nIt is not clear whether this is still needed or not. This patch\nassumes that whatever isue there was, the versions of Windows\nwe currently support no longer have it.\n\nWith that in mind, this commit fixes the issue by deleting the thread\nwhen the inferior sends the exit-process event as opposed to deleting it\nlater, while starting a new inferior.\n\nThis also restores the printing of the thread-exit notification for\nthe main thread, which was missing before. Looking at the transcript\nof the example shown above, we can see 4 thread creation notifications,\nand only 3 notifications for thread exits. Now creation and exit\nnotifications are balanced.\n\nIn the handling of EXIT_THREAD_DEBUG_EVENT, the main_thread_id\ncheck is removed because deemed unnecessary: The main thread was\nintroduced by a CREATE_PROCESS_DEBUG_EVENT, and thus the kernel\nis expected to report its death via EXIT_PROCESS_DEBUG_EVENT.\n\nAnd finally, because the behavior of delete_thread did change\n(albeit when getting a value we probably never expected to receive),\nthis patch also adds a gdb_assert. The purpose is to provide some\nimmediate information in case there are other callers that mistakenly\ncall delete_thread with a NULL thread info. This can be useful\ninformation when direct debugging of GDB isn't an option.\n\ngdb/ChangeLog:\n\n\t* thread.c (delete_thread_1): Add gdb_assert that THR is not\n\tNULL. Initialize tpprev to NULL instead of assigning it\n\tto NULL on the next statement.\n\t* windows-nat.c (windows_delete_thread): Remove check for\n\tmain_thread_id before printing thread exit notifications.\n\t(get_windows_debug_event) <EXIT_THREAD_DEBUG_EVENT>:\n\tRemove thread ID check against main_thread_id.\n\t<CREATE_PROCESS_DEBUG_EVENT>: Remove call to\n\twindows_delete_thread.\n\t<EXIT_PROCESS_DEBUG_EVENT>: Add call to windows_delete_thread.",
    "tree": {
      "sha": "67d0608d48987876be39ff098ce42a26601e43e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67d0608d48987876be39ff098ce42a26601e43e5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2eab46b176fa315ebc07569280f020c3348c2aa2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2eab46b176fa315ebc07569280f020c3348c2aa2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2eab46b176fa315ebc07569280f020c3348c2aa2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2eab46b176fa315ebc07569280f020c3348c2aa2/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2ee73c7abf6408c543bf297271c83dff8e87ee44",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ee73c7abf6408c543bf297271c83dff8e87ee44",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2ee73c7abf6408c543bf297271c83dff8e87ee44"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 27,
    "deletions": 17
  },
  "files": [
    {
      "sha": "09485a028c37721388f61bc3a2c3207eebddefcd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eab46b176fa315ebc07569280f020c3348c2aa2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eab46b176fa315ebc07569280f020c3348c2aa2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2eab46b176fa315ebc07569280f020c3348c2aa2",
      "patch": "@@ -1,3 +1,16 @@\n+2019-01-05  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* thread.c (delete_thread_1): Add gdb_assert that THR is not\n+\tNULL. Initialize tpprev to NULL instead of assigning it\n+\tto NULL on the next statement.\n+\t* windows-nat.c (windows_delete_thread): Remove check for\n+\tmain_thread_id before printing thread exit notifications.\n+\t(get_windows_debug_event) <EXIT_THREAD_DEBUG_EVENT>:\n+\tRemove thread ID check against main_thread_id.\n+\t<CREATE_PROCESS_DEBUG_EVENT>: Remove call to\n+\twindows_delete_thread.\n+\t<EXIT_PROCESS_DEBUG_EVENT>: Add call to windows_delete_thread.\n+\n 2019-01-04  Tom Tromey  <tom@tromey.com>\n \n \t* compile/compile.c (_initialize_compile): Use upper case for"
    },
    {
      "sha": "a9105f5d7ea32342d1ca8fd1537844f66861d750",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eab46b176fa315ebc07569280f020c3348c2aa2/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eab46b176fa315ebc07569280f020c3348c2aa2/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=2eab46b176fa315ebc07569280f020c3348c2aa2",
      "patch": "@@ -442,15 +442,17 @@ thread_step_over_chain_remove (struct thread_info *tp)\n   step_over_chain_remove (&step_over_queue_head, tp);\n }\n \n-/* Delete thread TP.  If SILENT, don't notify the observer of this\n-   exit.  */\n+/* Delete the thread referenced by THR.  If SILENT, don't notifyi\n+   the observer of this exit.\n+   \n+   THR must not be NULL or a failed assertion will be raised.  */\n \n static void\n delete_thread_1 (thread_info *thr, bool silent)\n {\n-  struct thread_info *tp, *tpprev;\n+  gdb_assert (thr != nullptr);\n \n-  tpprev = NULL;\n+  struct thread_info *tp, *tpprev = NULL;\n \n   for (tp = thr->inf->thread_list; tp; tpprev = tp, tp = tp->next)\n     if (tp == thr)"
    },
    {
      "sha": "57a59b8635cade331e51ecb6c868e99b85e9220a",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 8,
      "deletions": 13,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2eab46b176fa315ebc07569280f020c3348c2aa2/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2eab46b176fa315ebc07569280f020c3348c2aa2/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=2eab46b176fa315ebc07569280f020c3348c2aa2",
      "patch": "@@ -496,7 +496,7 @@ windows_delete_thread (ptid_t ptid, DWORD exit_code)\n \n   if (info_verbose)\n     printf_unfiltered (\"[Deleting %s]\\n\", target_pid_to_str (ptid));\n-  else if (print_thread_events && id != main_thread_id)\n+  else if (print_thread_events)\n     printf_unfiltered (_(\"[%s exited with code %u]\\n\"),\n \t\t       target_pid_to_str (ptid), (unsigned) exit_code);\n   delete_thread (find_thread_ptid (ptid));\n@@ -1560,14 +1560,10 @@ get_windows_debug_event (struct target_ops *ops,\n \t\t     (unsigned) current_event.dwProcessId,\n \t\t     (unsigned) current_event.dwThreadId,\n \t\t     \"EXIT_THREAD_DEBUG_EVENT\"));\n-\n-      if (current_event.dwThreadId != main_thread_id)\n-\t{\n-\t  windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t\t current_event.dwThreadId),\n-\t\t\t\t current_event.u.ExitThread.dwExitCode);\n-\t  th = &dummy_thread_info;\n-\t}\n+      windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n+\t\t\t\t     current_event.dwThreadId),\n+\t\t\t     current_event.u.ExitThread.dwExitCode);\n+      th = &dummy_thread_info;\n       break;\n \n     case CREATE_PROCESS_DEBUG_EVENT:\n@@ -1580,10 +1576,6 @@ get_windows_debug_event (struct target_ops *ops,\n \tbreak;\n \n       current_process_handle = current_event.u.CreateProcessInfo.hProcess;\n-      if (main_thread_id)\n-\twindows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t       main_thread_id),\n-\t\t\t       0);\n       main_thread_id = current_event.dwThreadId;\n       /* Add the main thread.  */\n       th = windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n@@ -1607,6 +1599,9 @@ get_windows_debug_event (struct target_ops *ops,\n \t}\n       else if (saw_create == 1)\n \t{\n+\t  windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n+\t\t\t\t\t main_thread_id),\n+\t\t\t\t 0);\n \t  ourstatus->kind = TARGET_WAITKIND_EXITED;\n \t  ourstatus->value.integer = current_event.u.ExitProcess.dwExitCode;\n \t  thread_id = main_thread_id;"
    }
  ]
}