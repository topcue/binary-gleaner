{
  "sha": "ffff730bf6a939490b5e93a323ba2e4026d27818",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmZmZjczMGJmNmE5Mzk0OTBiNWU5M2EzMjNiYTJlNDAyNmQyNzgxOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:58Z"
    },
    "message": "Split out eval_op_register\n\nThis splits OP_REGISTER into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (eval_op_register): New function.\n\t(evaluate_subexp_standard): Use it.",
    "tree": {
      "sha": "4dbbad29bdc08043c7d02d9e0b4cd327ccb10db3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4dbbad29bdc08043c7d02d9e0b4cd327ccb10db3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ffff730bf6a939490b5e93a323ba2e4026d27818",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffff730bf6a939490b5e93a323ba2e4026d27818",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ffff730bf6a939490b5e93a323ba2e4026d27818",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffff730bf6a939490b5e93a323ba2e4026d27818/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9b1d8af6833dd32ebc03c6372f98c432101dcf92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b1d8af6833dd32ebc03c6372f98c432101dcf92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9b1d8af6833dd32ebc03c6372f98c432101dcf92"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 36,
    "deletions": 21
  },
  "files": [
    {
      "sha": "9d50fe0ca364fb2bac7d7ac1574441d527cbf448",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffff730bf6a939490b5e93a323ba2e4026d27818/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffff730bf6a939490b5e93a323ba2e4026d27818/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ffff730bf6a939490b5e93a323ba2e4026d27818",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (eval_op_register): New function.\n+\t(evaluate_subexp_standard): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (eval_op_func_static_var): New function."
    },
    {
      "sha": "60eb01dfa7139df0eadea978cb1799d2cab099da",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 31,
      "deletions": 21,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffff730bf6a939490b5e93a323ba2e4026d27818/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffff730bf6a939490b5e93a323ba2e4026d27818/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=ffff730bf6a939490b5e93a323ba2e4026d27818",
      "patch": "@@ -1251,6 +1251,36 @@ eval_op_func_static_var (struct type *expect_type, struct expression *exp,\n   return evaluate_var_value (noside, sym.block, sym.symbol);\n }\n \n+/* Helper function that implements the body of OP_REGISTER.  */\n+\n+static struct value *\n+eval_op_register (struct type *expect_type, struct expression *exp,\n+\t\t  enum noside noside, const char *name)\n+{\n+  int regno;\n+  struct value *val;\n+\n+  regno = user_reg_map_name_to_regnum (exp->gdbarch,\n+\t\t\t\t       name, strlen (name));\n+  if (regno == -1)\n+    error (_(\"Register $%s not available.\"), name);\n+\n+  /* In EVAL_AVOID_SIDE_EFFECTS mode, we only need to return\n+     a value with the appropriate register type.  Unfortunately,\n+     we don't have easy access to the type of user registers.\n+     So for these registers, we fetch the register value regardless\n+     of the evaluation mode.  */\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS\n+      && regno < gdbarch_num_cooked_regs (exp->gdbarch))\n+    val = value_zero (register_type (exp->gdbarch, regno), not_lval);\n+  else\n+    val = value_of_register (regno, get_selected_frame (NULL));\n+  if (val == NULL)\n+    error (_(\"Value of register %s not available.\"), name);\n+  else\n+    return val;\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -1348,29 +1378,9 @@ evaluate_subexp_standard (struct type *expect_type,\n     case OP_REGISTER:\n       {\n \tconst char *name = &exp->elts[pc + 2].string;\n-\tint regno;\n-\tstruct value *val;\n \n \t(*pos) += 3 + BYTES_TO_EXP_ELEM (exp->elts[pc + 1].longconst + 1);\n-\tregno = user_reg_map_name_to_regnum (exp->gdbarch,\n-\t\t\t\t\t     name, strlen (name));\n-\tif (regno == -1)\n-\t  error (_(\"Register $%s not available.\"), name);\n-\n-\t/* In EVAL_AVOID_SIDE_EFFECTS mode, we only need to return\n-\t   a value with the appropriate register type.  Unfortunately,\n-\t   we don't have easy access to the type of user registers.\n-\t   So for these registers, we fetch the register value regardless\n-\t   of the evaluation mode.  */\n-\tif (noside == EVAL_AVOID_SIDE_EFFECTS\n-\t    && regno < gdbarch_num_cooked_regs (exp->gdbarch))\n-\t  val = value_zero (register_type (exp->gdbarch, regno), not_lval);\n-\telse\n-\t  val = value_of_register (regno, get_selected_frame (NULL));\n-\tif (val == NULL)\n-\t  error (_(\"Value of register %s not available.\"), name);\n-\telse\n-\t  return val;\n+\treturn eval_op_register (expect_type, exp, noside, name);\n       }\n     case OP_BOOL:\n       (*pos) += 2;"
    }
  ]
}