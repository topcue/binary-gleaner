{
  "sha": "d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d",
  "node_id": "C_kwDOANOeidoAKGQwNDkwZjg5YWQzNjcwZTFjZGJlMDZkYjI1ZjM5MWViNWY5ZjBkNmQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-08T21:40:59Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-08T21:40:59Z"
    },
    "message": "gdb: make dwarf2_find_containing_comp_unit take a dwarf2_per_bfd\n\nWhile reading another patch, I saw that this function didn't need to\ntake a dwarf2_per_objfile, but could take a dwarf2_per_bfd instead.\nIt doesn't change the behavior, but doing this shows that this function\nis objfile-independent (can work with only the shared per-bfd data).\n\nChange-Id: I58f9c9cef6688902e95226480285da2d0005d77f",
    "tree": {
      "sha": "68b9e1014e6bfdc87408a79d836e9fa3146134ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/68b9e1014e6bfdc87408a79d836e9fa3146134ca"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/313f3b21cbcd3475c2fc6030abb26e6c8346d03b"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 16,
    "deletions": 14
  },
  "files": [
    {
      "sha": "00856b86483f4fbde07a17ef2f39f7ea28c02840",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d0490f89ad3670e1cdbe06db25f391eb5f9f0d6d",
      "patch": "@@ -1450,7 +1450,7 @@ static int partial_die_eq (const void *item_lhs, const void *item_rhs);\n \n static struct dwarf2_per_cu_data *dwarf2_find_containing_comp_unit\n   (sect_offset sect_off, unsigned int offset_in_dwz,\n-   dwarf2_per_objfile *per_objfile);\n+   dwarf2_per_bfd *per_bfd);\n \n static void prepare_one_comp_unit (struct dwarf2_cu *cu,\n \t\t\t\t   struct die_info *comp_unit_die,\n@@ -7732,7 +7732,8 @@ scan_partial_symbols (struct partial_die_info *first_die, CORE_ADDR *lowpc,\n \t\t  }\n \n \t\tper_cu = dwarf2_find_containing_comp_unit\n-\t\t\t   (pdi->d.sect_off, pdi->is_dwz, cu->per_objfile);\n+\t\t\t   (pdi->d.sect_off, pdi->is_dwz,\n+\t\t\t    cu->per_objfile->per_bfd);\n \n \t\t/* Go read the partial unit, if needed.  */\n \t\tif (per_cu->v.psymtab == NULL)\n@@ -9612,7 +9613,8 @@ process_imported_unit_die (struct die_info *die, struct dwarf2_cu *cu)\n       bool is_dwz = (attr->form == DW_FORM_GNU_ref_alt || cu->per_cu->is_dwz);\n       dwarf2_per_objfile *per_objfile = cu->per_objfile;\n       dwarf2_per_cu_data *per_cu\n-\t= dwarf2_find_containing_comp_unit (sect_off, is_dwz, per_objfile);\n+\t= dwarf2_find_containing_comp_unit (sect_off, is_dwz,\n+\t\t\t\t\t    per_objfile->per_bfd);\n \n       /* We're importing a C++ compilation unit with tag DW_TAG_compile_unit\n \t into another compilation unit, at root level.  Regard this as a hint,\n@@ -19542,7 +19544,7 @@ find_partial_die (sect_offset sect_off, int offset_in_dwz, struct dwarf2_cu *cu)\n \t}\n       dwarf2_per_cu_data *per_cu\n \t= dwarf2_find_containing_comp_unit (sect_off, offset_in_dwz,\n-\t\t\t\t\t    per_objfile);\n+\t\t\t\t\t    per_objfile->per_bfd);\n \n       cu = per_objfile->get_cu (per_cu);\n       if (cu == NULL || cu->partial_dies == NULL)\n@@ -22374,7 +22376,8 @@ lookup_die_type (struct die_info *die, const struct attribute *attr,\n       struct dwarf2_per_cu_data *per_cu;\n       sect_offset sect_off = attr->get_ref_die_offset ();\n \n-      per_cu = dwarf2_find_containing_comp_unit (sect_off, 1, per_objfile);\n+      per_cu = dwarf2_find_containing_comp_unit (sect_off, 1,\n+\t\t\t\t\t\t per_objfile->per_bfd);\n       this_type = get_die_type_at_offset (sect_off, per_cu, per_objfile);\n     }\n   else if (attr->form_is_ref ())\n@@ -23240,7 +23243,7 @@ follow_die_offset (sect_offset sect_off, int offset_in_dwz,\n       struct dwarf2_per_cu_data *per_cu;\n \n       per_cu = dwarf2_find_containing_comp_unit (sect_off, offset_in_dwz,\n-\t\t\t\t\t\t per_objfile);\n+\t\t\t\t\t\t per_objfile->per_bfd);\n \n       dwarf_read_debug_printf_v (\"target CU offset: %s, \"\n \t\t\t\t \"target CU DIEs loaded: %d\",\n@@ -24472,28 +24475,27 @@ dwarf2_find_containing_comp_unit\n static struct dwarf2_per_cu_data *\n dwarf2_find_containing_comp_unit (sect_offset sect_off,\n \t\t\t\t  unsigned int offset_in_dwz,\n-\t\t\t\t  dwarf2_per_objfile *per_objfile)\n+\t\t\t\t  dwarf2_per_bfd *per_bfd)\n {\n   int low = dwarf2_find_containing_comp_unit\n-    (sect_off, offset_in_dwz, per_objfile->per_bfd->all_comp_units);\n-  dwarf2_per_cu_data *this_cu\n-    = per_objfile->per_bfd->all_comp_units[low].get ();\n+    (sect_off, offset_in_dwz, per_bfd->all_comp_units);\n+  dwarf2_per_cu_data *this_cu = per_bfd->all_comp_units[low].get ();\n \n   if (this_cu->is_dwz != offset_in_dwz || this_cu->sect_off > sect_off)\n     {\n       if (low == 0 || this_cu->is_dwz != offset_in_dwz)\n \terror (_(\"Dwarf Error: could not find partial DIE containing \"\n \t       \"offset %s [in module %s]\"),\n \t       sect_offset_str (sect_off),\n-\t       bfd_get_filename (per_objfile->objfile->obfd));\n+\t       bfd_get_filename (per_bfd->obfd));\n \n-      gdb_assert (per_objfile->per_bfd->all_comp_units[low-1]->sect_off\n+      gdb_assert (per_bfd->all_comp_units[low-1]->sect_off\n \t\t  <= sect_off);\n-      return per_objfile->per_bfd->all_comp_units[low - 1].get ();\n+      return per_bfd->all_comp_units[low - 1].get ();\n     }\n   else\n     {\n-      if (low == per_objfile->per_bfd->all_comp_units.size () - 1\n+      if (low == per_bfd->all_comp_units.size () - 1\n \t  && sect_off >= this_cu->sect_off + this_cu->length)\n \terror (_(\"invalid dwarf2 offset %s\"), sect_offset_str (sect_off));\n       gdb_assert (sect_off < this_cu->sect_off + this_cu->length);"
    }
  ]
}