{
  "sha": "820ed8af6a757408873d8955a2db03b0989fdaeb",
  "node_id": "C_kwDOANOeidoAKDgyMGVkOGFmNmE3NTc0MDg4NzNkODk1NWEyZGIwM2IwOTg5ZmRhZWI",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-02-21T14:07:45Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-02-25T17:50:22Z"
    },
    "message": "gdb: add operator+= and operator+ overload for std::string\n\nThis commit adds operator+= and operator+ overloads for adding\ngdb::unique_xmalloc_ptr<char> to a std::string.  I could only find 3\nplaces in GDB where this was useful right now, and these all make use\nof operator+=.\n\nI've also added a self test for gdb::unique_xmalloc_ptr<char>, which\nmakes use of both operator+= and operator+, so they are both getting\nused/tested.\n\nThere should be no user visible changes after this commit, except when\nrunning 'maint selftest', where the new self test is visible.",
    "tree": {
      "sha": "702c8ff17e87f29eba4bd4db307ee026694bdfba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/702c8ff17e87f29eba4bd4db307ee026694bdfba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/820ed8af6a757408873d8955a2db03b0989fdaeb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/820ed8af6a757408873d8955a2db03b0989fdaeb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/820ed8af6a757408873d8955a2db03b0989fdaeb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/820ed8af6a757408873d8955a2db03b0989fdaeb/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "e8b4efc3cf3d5d2c475b3e5c31439aa5bcd277ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8b4efc3cf3d5d2c475b3e5c31439aa5bcd277ae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e8b4efc3cf3d5d2c475b3e5c31439aa5bcd277ae"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 80,
    "deletions": 3
  },
  "files": [
    {
      "sha": "6cbbc32466eb2ba997ae5928df8d5d520ecd66e6",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/820ed8af6a757408873d8955a2db03b0989fdaeb/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/820ed8af6a757408873d8955a2db03b0989fdaeb/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=820ed8af6a757408873d8955a2db03b0989fdaeb",
      "patch": "@@ -478,6 +478,7 @@ SELFTESTS_SRCS = \\\n \tunittests/tracepoint-selftests.c \\\n \tunittests/tui-selftests.c \\\n \tunittests/ui-file-selftests.c \\\n+\tunittests/unique_xmalloc_ptr_char.c \\\n \tunittests/unpack-selftests.c \\\n \tunittests/utils-selftests.c \\\n \tunittests/vec-utils-selftests.c \\"
    },
    {
      "sha": "0c8d574e6032403188a340a30c887c843b90fea0",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/820ed8af6a757408873d8955a2db03b0989fdaeb/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/820ed8af6a757408873d8955a2db03b0989fdaeb/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=820ed8af6a757408873d8955a2db03b0989fdaeb",
      "patch": "@@ -1438,7 +1438,7 @@ find_separate_debug_file (const char *dir,\n   for (const gdb::unique_xmalloc_ptr<char> &debugdir : debugdir_vec)\n     {\n       debugfile = target_prefix ? \"target:\" : \"\";\n-      debugfile += debugdir.get ();\n+      debugfile += debugdir;\n       debugfile += \"/\";\n       debugfile += drive;\n       debugfile += dir_notarget;\n@@ -1460,7 +1460,7 @@ find_separate_debug_file (const char *dir,\n \t  /* If the file is in the sysroot, try using its base path in\n \t     the global debugfile directory.  */\n \t  debugfile = target_prefix ? \"target:\" : \"\";\n-\t  debugfile += debugdir.get ();\n+\t  debugfile += debugdir;\n \t  debugfile += \"/\";\n \t  debugfile += base_path;\n \t  debugfile += \"/\";\n@@ -1473,7 +1473,7 @@ find_separate_debug_file (const char *dir,\n \t     the sysroot's global debugfile directory.  */\n \t  debugfile = target_prefix ? \"target:\" : \"\";\n \t  debugfile += gdb_sysroot;\n-\t  debugfile += debugdir.get ();\n+\t  debugfile += debugdir;\n \t  debugfile += \"/\";\n \t  debugfile += base_path;\n \t  debugfile += \"/\";"
    },
    {
      "sha": "3eb1b7b44736a7da04f9f7108115de8be71596fc",
      "filename": "gdb/unittests/unique_xmalloc_ptr_char.c",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/820ed8af6a757408873d8955a2db03b0989fdaeb/gdb/unittests/unique_xmalloc_ptr_char.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/820ed8af6a757408873d8955a2db03b0989fdaeb/gdb/unittests/unique_xmalloc_ptr_char.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/unique_xmalloc_ptr_char.c?ref=820ed8af6a757408873d8955a2db03b0989fdaeb",
      "patch": "@@ -0,0 +1,57 @@\n+/* Self tests for gdb::unique_xmalloc_ptr<char>.\n+\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"selftest-arch.h\"\n+#include \"gdbsupport/gdb_unique_ptr.h\"\n+\n+namespace selftests {\n+namespace unpack {\n+\n+static void\n+unique_xmalloc_ptr_char ()\n+{\n+  gdb::unique_xmalloc_ptr<char> a = make_unique_xstrdup (\"abc\");\n+  gdb::unique_xmalloc_ptr<char> b = make_unique_xstrndup (\"defghi\", 3);\n+\n+  SELF_CHECK (strcmp (a.get (), \"abc\") == 0);\n+  SELF_CHECK (strcmp (b.get (), \"def\") == 0);\n+\n+  std::string str = \"xxx\";\n+\n+  /* Check the operator+= overload.  */\n+  str += a;\n+  SELF_CHECK (str == \"xxxabc\");\n+\n+  /* Check the operator+ overload.  */\n+  str = str + b;\n+  SELF_CHECK (str == \"xxxabcdef\");\n+}\n+\n+}\n+}\n+\n+void _initialize_unique_xmalloc_ptr_char ();\n+void\n+_initialize_unique_xmalloc_ptr_char ()\n+{\n+  selftests::register_test (\"unique_xmalloc_ptr_char\",\n+\t\t\t    selftests::unpack::unique_xmalloc_ptr_char);\n+}"
    },
    {
      "sha": "51ee7a4bc94326c1ab462780335d5633d466ac89",
      "filename": "gdbsupport/gdb_unique_ptr.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/820ed8af6a757408873d8955a2db03b0989fdaeb/gdbsupport/gdb_unique_ptr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/820ed8af6a757408873d8955a2db03b0989fdaeb/gdbsupport/gdb_unique_ptr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/gdb_unique_ptr.h?ref=820ed8af6a757408873d8955a2db03b0989fdaeb",
      "patch": "@@ -21,6 +21,7 @@\n #define COMMON_GDB_UNIQUE_PTR_H\n \n #include <memory>\n+#include <string>\n #include \"gdbsupport/gdb-xfree.h\"\n \n namespace gdb\n@@ -74,4 +75,22 @@ make_unique_xstrndup (const char *str, size_t n)\n   return gdb::unique_xmalloc_ptr<char> (xstrndup (str, n));\n }\n \n+/* An overload of operator+= fo adding gdb::unique_xmalloc_ptr<char> to a\n+   std::string.  */\n+\n+static inline std::string &\n+operator+= (std::string &lhs, const gdb::unique_xmalloc_ptr<char> &rhs)\n+{\n+  return lhs += rhs.get ();\n+}\n+\n+/* An overload of operator+ for adding gdb::unique_xmalloc_ptr<char> to a\n+   std::string.  */\n+\n+static inline std::string\n+operator+ (const std::string &lhs, const gdb::unique_xmalloc_ptr<char> &rhs)\n+{\n+  return lhs + rhs.get ();\n+}\n+\n #endif /* COMMON_GDB_UNIQUE_PTR_H */"
    }
  ]
}