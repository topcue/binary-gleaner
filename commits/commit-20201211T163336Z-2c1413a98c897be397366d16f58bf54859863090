{
  "sha": "2c1413a98c897be397366d16f58bf54859863090",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmMxNDEzYTk4Yzg5N2JlMzk3MzY2ZDE2ZjU4YmY1NDg1OTg2MzA5MA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:36Z"
    },
    "message": "Use htab_t in varobj\n\nvarobj.c currently has its own hash table implementation.  This patch\nreplaces it with htab_t, simplifying the code.\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (VAROBJ_TABLE_SIZE): Remove.\n\t(varobj_table): Now htab_t.\n\t(varobj_get_handle, install_variable, uninstall_variable):\n\tUpdate.\n\t(hash_varobj, eq_varobj_and_string): New functions.\n\t(hash_varobj): Update.",
    "tree": {
      "sha": "f3ee3f6139c11e3304f8e00636c3218a292c960b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f3ee3f6139c11e3304f8e00636c3218a292c960b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c1413a98c897be397366d16f58bf54859863090",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1413a98c897be397366d16f58bf54859863090",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c1413a98c897be397366d16f58bf54859863090",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1413a98c897be397366d16f58bf54859863090/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b6433ede0708af00be520abdf9209cd776aab2e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6433ede0708af00be520abdf9209cd776aab2e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b6433ede0708af00be520abdf9209cd776aab2e2"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 44,
    "deletions": 74
  },
  "files": [
    {
      "sha": "0fd9591a4cd42e97231841fc613d8c88bcb9cb6f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1413a98c897be397366d16f58bf54859863090/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1413a98c897be397366d16f58bf54859863090/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2c1413a98c897be397366d16f58bf54859863090",
      "patch": "@@ -1,3 +1,12 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (VAROBJ_TABLE_SIZE): Remove.\n+\t(varobj_table): Now htab_t.\n+\t(varobj_get_handle, install_variable, uninstall_variable):\n+\tUpdate.\n+\t(hash_varobj, eq_varobj_and_string): New functions.\n+\t(hash_varobj): Update.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* inline-frame.c (stopped_by_user_bp_inline_frame): Update."
    },
    {
      "sha": "758753f178c8bc887ff61f74c3f90c94d195360b",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 35,
      "deletions": 74,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1413a98c897be397366d16f58bf54859863090/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1413a98c897be397366d16f58bf54859863090/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=2c1413a98c897be397366d16f58bf54859863090",
      "patch": "@@ -200,12 +200,8 @@ static int format_code[] = { 0, 't', 'd', 'x', 'o', 'z' };\n /* Header of the list of root variable objects.  */\n static struct varobj_root *rootlist;\n \n-/* Prime number indicating the number of buckets in the hash table.  */\n-/* A prime large enough to avoid too many collisions.  */\n-#define VAROBJ_TABLE_SIZE 227\n-\n /* Pointer to the varobj hash table (built at run time).  */\n-static struct vlist **varobj_table;\n+static htab_t varobj_table;\n \n \f\n \n@@ -432,24 +428,13 @@ varobj_gen_name (void)\n struct varobj *\n varobj_get_handle (const char *objname)\n {\n-  struct vlist *cv;\n-  const char *chp;\n-  unsigned int index = 0;\n-  unsigned int i = 1;\n-\n-  for (chp = objname; *chp; chp++)\n-    {\n-      index = (index + (i++ * (unsigned int) *chp)) % VAROBJ_TABLE_SIZE;\n-    }\n+  varobj *var = (varobj *) htab_find_with_hash (varobj_table, objname,\n+\t\t\t\t\t\thtab_hash_string (objname));\n \n-  cv = *(varobj_table + index);\n-  while (cv != NULL && cv->var->obj_name != objname)\n-    cv = cv->next;\n-\n-  if (cv == NULL)\n+  if (var == NULL)\n     error (_(\"Variable object not found\"));\n \n-  return cv->var;\n+  return var;\n }\n \n /* Given the handle, return the name of the object.  */\n@@ -1793,29 +1778,15 @@ delete_variable_1 (int *delcountp, struct varobj *var, bool only_children_p,\n static bool\n install_variable (struct varobj *var)\n {\n-  struct vlist *cv;\n-  struct vlist *newvl;\n-  const char *chp;\n-  unsigned int index = 0;\n-  unsigned int i = 1;\n-\n-  for (chp = var->obj_name.c_str (); *chp; chp++)\n-    {\n-      index = (index + (i++ * (unsigned int) *chp)) % VAROBJ_TABLE_SIZE;\n-    }\n-\n-  cv = *(varobj_table + index);\n-  while (cv != NULL && cv->var->obj_name != var->obj_name)\n-    cv = cv->next;\n-\n-  if (cv != NULL)\n+  hashval_t hash = htab_hash_string (var->obj_name.c_str ());\n+  void **slot = htab_find_slot_with_hash (varobj_table,\n+\t\t\t\t\t  var->obj_name.c_str (),\n+\t\t\t\t\t  hash, INSERT);\n+  if (*slot != nullptr)\n     error (_(\"Duplicate variable object name\"));\n \n   /* Add varobj to hash table.  */\n-  newvl = XNEW (struct vlist);\n-  newvl->next = *(varobj_table + index);\n-  newvl->var = var;\n-  *(varobj_table + index) = newvl;\n+  *slot = var;\n \n   /* If root, add varobj to root list.  */\n   if (is_root_p (var))\n@@ -1835,46 +1806,15 @@ install_variable (struct varobj *var)\n static void\n uninstall_variable (struct varobj *var)\n {\n-  struct vlist *cv;\n-  struct vlist *prev;\n   struct varobj_root *cr;\n   struct varobj_root *prer;\n-  const char *chp;\n-  unsigned int index = 0;\n-  unsigned int i = 1;\n-\n-  /* Remove varobj from hash table.  */\n-  for (chp = var->obj_name.c_str (); *chp; chp++)\n-    {\n-      index = (index + (i++ * (unsigned int) *chp)) % VAROBJ_TABLE_SIZE;\n-    }\n \n-  cv = *(varobj_table + index);\n-  prev = NULL;\n-  while (cv != NULL && cv->var->obj_name != var->obj_name)\n-    {\n-      prev = cv;\n-      cv = cv->next;\n-    }\n+  hashval_t hash = htab_hash_string (var->obj_name.c_str ());\n+  htab_remove_elt_with_hash (varobj_table, var->obj_name.c_str (), hash);\n \n   if (varobjdebug)\n     fprintf_unfiltered (gdb_stdlog, \"Deleting %s\\n\", var->obj_name.c_str ());\n \n-  if (cv == NULL)\n-    {\n-      warning\n-\t(\"Assertion failed: Could not find variable object \\\"%s\\\" to delete\",\n-\t var->obj_name.c_str ());\n-      return;\n-    }\n-\n-  if (prev == NULL)\n-    *(varobj_table + index) = cv->next;\n-  else\n-    prev->next = cv->next;\n-\n-  xfree (cv);\n-\n   /* If root, remove varobj from root list.  */\n   if (is_root_p (var))\n     {\n@@ -2520,11 +2460,32 @@ varobj_invalidate (void)\n   all_root_varobjs (varobj_invalidate_iter, NULL);\n }\n \n+/* A hash function for a varobj.  */\n+\n+static hashval_t\n+hash_varobj (const void *a)\n+{\n+  const varobj *obj = (const varobj *) a;\n+  return htab_hash_string (obj->obj_name.c_str ());\n+}\n+\n+/* A hash table equality function for varobjs.  */\n+\n+static int\n+eq_varobj_and_string (const void *a, const void *b)\n+{\n+  const varobj *obj = (const varobj *) a;\n+  const char *name = (const char *) b;\n+\n+  return obj->obj_name == name;\n+}\n+\n void _initialize_varobj ();\n void\n _initialize_varobj ()\n {\n-  varobj_table = XCNEWVEC (struct vlist *, VAROBJ_TABLE_SIZE);\n+  varobj_table = htab_create_alloc (5, hash_varobj, eq_varobj_and_string,\n+\t\t\t\t    nullptr, xcalloc, xfree);\n \n   add_setshow_zuinteger_cmd (\"varobj\", class_maintenance,\n \t\t\t     &varobjdebug,"
    }
  ]
}