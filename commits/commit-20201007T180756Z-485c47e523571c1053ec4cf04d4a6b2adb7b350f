{
  "sha": "485c47e523571c1053ec4cf04d4a6b2adb7b350f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDg1YzQ3ZTUyMzU3MWMxMDUzZWM0Y2YwNGQ0YTZiMmFkYjdiMzUwZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-07T18:07:55Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-07T18:07:56Z"
    },
    "message": "Add simple_search_memory unit tests\n\nThis adds some unit tests for simple_search_memory.  I tried here to\nreproduce some bugs (PR gdb/11158 and PR gdb/17756), but was unable\nto.\n\ngdb/ChangeLog\n2020-10-07  Tom Tromey  <tromey@adacore.com>\n\n\t* unittests/search-memory-selftests.c: New file.\n\t* Makefile.in (SELFTESTS_SRCS): Add\n\tunittests/search-memory-selftests.c.",
    "tree": {
      "sha": "e8bf2180495c150a288a17f7f2462628afa5ea7b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e8bf2180495c150a288a17f7f2462628afa5ea7b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/485c47e523571c1053ec4cf04d4a6b2adb7b350f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/485c47e523571c1053ec4cf04d4a6b2adb7b350f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/485c47e523571c1053ec4cf04d4a6b2adb7b350f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/485c47e523571c1053ec4cf04d4a6b2adb7b350f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3a135a918614676f3d5b6297714dfa235af3d59d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a135a918614676f3d5b6297714dfa235af3d59d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3a135a918614676f3d5b6297714dfa235af3d59d"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 106,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3c9d07e939e6750de9af64ec30576528123ee514",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/485c47e523571c1053ec4cf04d4a6b2adb7b350f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/485c47e523571c1053ec4cf04d4a6b2adb7b350f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=485c47e523571c1053ec4cf04d4a6b2adb7b350f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-07  Tom Tromey  <tromey@adacore.com>\n+\n+\t* unittests/search-memory-selftests.c: New file.\n+\t* Makefile.in (SELFTESTS_SRCS): Add\n+\tunittests/search-memory-selftests.c.\n+\n 2020-10-07  Tom Tromey  <tromey@adacore.com>\n \n \tPR gdb/16930:"
    },
    {
      "sha": "80b788cdff998ffa440832e709f602aa8d7e3cfc",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/485c47e523571c1053ec4cf04d4a6b2adb7b350f/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/485c47e523571c1053ec4cf04d4a6b2adb7b350f/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=485c47e523571c1053ec4cf04d4a6b2adb7b350f",
      "patch": "@@ -458,6 +458,7 @@ SELFTESTS_SRCS = \\\n \tunittests/scoped_fd-selftests.c \\\n \tunittests/scoped_mmap-selftests.c \\\n \tunittests/scoped_restore-selftests.c \\\n+\tunittests/search-memory-selftests.c \\\n \tunittests/string_view-selftests.c \\\n \tunittests/style-selftests.c \\\n \tunittests/tracepoint-selftests.c \\"
    },
    {
      "sha": "5d2a1b9f9064c400d5ec410538349506d90f251d",
      "filename": "gdb/unittests/search-memory-selftests.c",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/485c47e523571c1053ec4cf04d4a6b2adb7b350f/gdb/unittests/search-memory-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/485c47e523571c1053ec4cf04d4a6b2adb7b350f/gdb/unittests/search-memory-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/search-memory-selftests.c?ref=485c47e523571c1053ec4cf04d4a6b2adb7b350f",
      "patch": "@@ -0,0 +1,99 @@\n+/* Self tests for simple_search_memory for GDB, the GNU debugger.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"gdbsupport/search.h\"\n+\n+namespace selftests {\n+namespace search_memory_tests {\n+\n+static void\n+run_tests ()\n+{\n+  size_t size = 2 * SEARCH_CHUNK_SIZE + 1;\n+\n+  std::vector<gdb_byte> data (size);\n+  data[size - 1] = 'x';\n+\n+  bool read_fully = false;\n+  bool read_off_end = false;\n+  auto read_memory = [&] (CORE_ADDR from, gdb_byte *out, size_t len)\n+    {\n+      if (from + len > data.size ())\n+\tread_off_end = true;\n+      else\n+\tmemcpy (out, &data[from], len);\n+      if (from + len == data.size ())\n+\tread_fully = true;\n+      return true;\n+    };\n+\n+  gdb_byte pattern = 'x';\n+\n+  CORE_ADDR addr = 0;\n+  int result = simple_search_memory (read_memory, 0, data.size (),\n+\t\t\t\t     &pattern, 1, &addr);\n+  /* In this case we don't care if read_fully was set or not.  */\n+  SELF_CHECK (result == 1);\n+  SELF_CHECK (!read_off_end);\n+  SELF_CHECK (addr == size - 1);\n+\n+  addr = 0;\n+  read_fully = false;\n+  read_off_end = false;\n+  pattern = 'q';\n+  result = simple_search_memory (read_memory, 0, data.size (),\n+\t\t\t\t &pattern, 1, &addr);\n+  SELF_CHECK (result == 0);\n+  SELF_CHECK (!read_off_end);\n+  SELF_CHECK (read_fully);\n+  SELF_CHECK (addr == 0);\n+\n+  /* Setup from PR gdb/17756.  */\n+  size = 0x7bb00;\n+  data = std::vector<gdb_byte> (size);\n+  const CORE_ADDR base_addr = 0x08370000;\n+  const gdb_byte wpattern[] = { 0x90, 0x8b, 0x98, 0x8 };\n+  const CORE_ADDR found_addr = 0x837bac8;\n+  memcpy (&data[found_addr - base_addr], wpattern, sizeof (wpattern));\n+\n+  auto read_memory_2 = [&] (CORE_ADDR from, gdb_byte *out, size_t len)\n+    {\n+      memcpy (out, &data[from - base_addr], len);\n+      return true;\n+    };\n+\n+  result = simple_search_memory (read_memory_2, base_addr, data.size (),\n+\t\t\t\t wpattern, sizeof (wpattern), &addr);\n+  SELF_CHECK (result == 1);\n+  SELF_CHECK (addr == found_addr);\n+}\n+\n+} /* namespace search_memory_tests */\n+} /* namespace selftests */\n+\n+\n+void _initialize_search_memory_selftests ();\n+void\n+_initialize_search_memory_selftests ()\n+{\n+  selftests::register_test (\"search_memory\",\n+\t\t\t    selftests::search_memory_tests::run_tests);\n+}"
    }
  ]
}