{
  "sha": "f80120719777e671e871434d727716355d6ab57d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjgwMTIwNzE5Nzc3ZTY3MWU4NzE0MzRkNzI3NzE2MzU1ZDZhYjU3ZA==",
  "commit": {
    "author": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-02-17T10:24:14Z"
    },
    "committer": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-05-12T07:52:46Z"
    },
    "message": "[gdb/testsuite] add lib/jit-elf-helpers.exp\n\nNew utility library to be used by jit-elf tests responsible for\ncompiling binary artifacts. In the next commit the compilation process\nwill become more complicated because of extra mandatory flag - keeping\nit in one place will make tests less fragile.\n\ngdb/testsuite/ChangeLog:\n\n2020-02-18  Mihails Strasuns  <mihails.strasuns@intel.com>\n\n\t* lib/jit-elf-helpers.exp: New file.\n\t* gdb.base/jit-elf.exp: Updated to use jit-elf-helpers.exp.\n\t* gdb.base/jit-elf-so.exp: Updated to use jit-elf-helpers.exp.",
    "tree": {
      "sha": "e0328391d206d1885114ccaa0945a9b3fa8ddf53",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e0328391d206d1885114ccaa0945a9b3fa8ddf53"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f80120719777e671e871434d727716355d6ab57d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f80120719777e671e871434d727716355d6ab57d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f80120719777e671e871434d727716355d6ab57d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f80120719777e671e871434d727716355d6ab57d/comments",
  "author": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a94694506c636f573b9194d9820fd4842b8fe51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a94694506c636f573b9194d9820fd4842b8fe51",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a94694506c636f573b9194d9820fd4842b8fe51"
    }
  ],
  "stats": {
    "total": 199,
    "additions": 93,
    "deletions": 106
  },
  "files": [
    {
      "sha": "51c1d33ff9b14108bcef3fa29b89d0647c125483",
      "filename": "gdb/testsuite/gdb.base/jit-elf-so.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 50,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f80120719777e671e871434d727716355d6ab57d/gdb/testsuite/gdb.base/jit-elf-so.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f80120719777e671e871434d727716355d6ab57d/gdb/testsuite/gdb.base/jit-elf-so.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-so.exp?ref=f80120719777e671e871434d727716355d6ab57d",
      "patch": "@@ -26,6 +26,8 @@ if {[get_compiler_info]} {\n     return 1\n }\n \n+load_lib jit-elf-helpers.exp\n+\n # The \"real\" main of this test, which loads jit-elf-main\n # as a shared library.\n set main_loader_basename jit-elf-dlmain\n@@ -41,25 +43,6 @@ set main_solib_binfile [standard_output_file ${main_solib_basename}.so]\n set jit_solib_basename jit-elf-solib\n set jit_solib_srcfile ${srcdir}/${subdir}/${jit_solib_basename}.c\n \n-# Compile jit-elf-main.c as a shared library.\n-#\n-# OPTIONS is passed to gdb_compile when compiling the program.\n-#\n-# On success, return 0.\n-# On failure, return -1.\n-proc compile_jit_elf_main_as_so {options} {\n-    global main_solib_srcfile main_solib_binfile\n-    set options [concat $options debug]\n-\n-    if { [gdb_compile_shlib ${main_solib_srcfile} ${main_solib_binfile} \\\n-\t    $options] != \"\" } {\n-\tuntested \"failed to compile ${main_solib_basename}.c as a shared library\"\n-\treturn -1\n-    }\n-\n-    return 0\n-}\n-\n # Compile the testcase shared library loader.\n #\n # OPTIONS is passed to gdb_compile when compiling the binary.\n@@ -79,34 +62,6 @@ proc compile_jit_dlmain {options} {\n     return 0\n }\n \n-# Compile jit-elf-solib.c as a shared library in multiple copies and\n-# upload them to the target.\n-#\n-# On success, return a list of target path to the shared libraries.\n-# On failure, return -1.\n-proc compile_and_download_n_jit_so {count} {\n-    global jit_solib_basename jit_solib_srcfile\n-    set binfiles_target {}\n-\n-    for {set i 1} {$i <= $count} {incr i} {\n-\tset binfile [standard_output_file ${jit_solib_basename}.$i.so]\n-\n-\t# Note: compiling without debug info by default: some test\n-\t# do symbol renaming by munging on ELF symbol table, and that\n-\t# wouldn't work for .debug sections.  Also, output for \"info\n-\t# function\" changes when debug info is present.\n-\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} {}] != \"\" } {\n-\t    untested \"failed to compile ${jit_solib_basename}.c as a shared library\"\n-\t    return -1\n-\t}\n-\n-\tset path [gdb_remote_download target ${binfile}]\n-\tlappend binfiles_target $path\n-    }\n-\n-    return $binfiles_target\n-}\n-\n # Run $main_loader_binfile and load $main_solib_binfile in\n # GDB.  Check jit-related debug output and matches `info function`\n # output for a jit loaded function using MATCH_STR.\n@@ -117,7 +72,6 @@ proc compile_and_download_n_jit_so {count} {\n # must match.\n proc one_jit_test {solib_binfiles_target match_str} {\n     set count [llength $solib_binfiles_target]\n-\n     with_test_prefix \"one_jit_test-$count\" {\n \tglobal verbose\n \tglobal main_loader_binfile main_loader_srcfile\n@@ -184,7 +138,8 @@ proc one_jit_test {solib_binfiles_target match_str} {\n }\n \n # Compile the main code (which loads the JIT objects) as a shared library.\n-if { [compile_jit_elf_main_as_so {additional_flags=\"-DMAIN=jit_dl_main\"}] < 0 } {\n+if { [compile_jit_elf_main_as_so $main_solib_srcfile $main_solib_binfile \\\n+\t{additional_flags=\"-DMAIN=jit_dl_main\"}] < 0 } {\n     return\n }\n \n@@ -194,7 +149,8 @@ if { [compile_jit_dlmain {shlib_load}] < 0 } {\n }\n \n # Compile two shared libraries to use as JIT objects.\n-set jit_solibs_target [compile_and_download_n_jit_so 2]\n+set jit_solibs_target [compile_and_download_n_jit_so \\\n+\t\t      $jit_solib_basename $jit_solib_srcfile 2]\n if { $jit_solibs_target == -1 } {\n     return\n }"
    },
    {
      "sha": "68196a0a88afa4cb75fa1f486e3323a130ecfa42",
      "filename": "gdb/testsuite/gdb.base/jit-elf.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 56,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f80120719777e671e871434d727716355d6ab57d/gdb/testsuite/gdb.base/jit-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f80120719777e671e871434d727716355d6ab57d/gdb/testsuite/gdb.base/jit-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf.exp?ref=f80120719777e671e871434d727716355d6ab57d",
      "patch": "@@ -23,67 +23,18 @@ if {[get_compiler_info]} {\n     return 1\n }\n \n+load_lib jit-elf-helpers.exp\n+\n # The main code that loads and registers JIT objects.\n-set main_basename jit-elf-main\n+set main_basename \"jit-elf-main\"\n set main_srcfile ${srcdir}/${subdir}/${main_basename}.c\n set main_binfile [standard_output_file ${main_basename}]\n \n # The shared library that gets loaded as JIT objects.\n set jit_solib_basename jit-elf-solib\n set jit_solib_srcfile ${srcdir}/${subdir}/${jit_solib_basename}.c\n \n-# Compile jit-elf-main.c as an executable.\n-#\n-# BINSUFFIX is appended to the binary name.\n-# OPTIONS is passed to gdb_compile when compiling the program.\n-#\n-# On success, return 0.\n-# On failure, return -1.\n-proc compile_jit_main {binsuffix options} {\n-    global main_binfile main_srcfile main_basename\n-\n-    set binfile ${main_binfile}${binsuffix}\n-    set options [concat $options debug]\n-\n-    if { [gdb_compile ${main_srcfile} ${binfile} \\\n-\t  executable $options] != \"\" } {\n-\t      untested \"failed to compile ${main_basename}.c\"\n-\t      return -1\n-    }\n-\n-    return 0\n-}\n-\n-# Compile jit-elf-solib.c as a shared library in multiple copies and\n-# upload them to the target.\n-#\n-# On success, return a list of target paths to the shared libraries.\n-# On failure, return -1.\n-proc compile_and_download_n_jit_so {count} {\n-    global jit_solib_basename jit_solib_srcfile\n-    set binfiles_target {}\n-\n-    for {set i 1} {$i <= $count} {incr i} {\n-\tset binfile [standard_output_file ${jit_solib_basename}.$i.so]\n-\n-\t# Note: compiling without debug info by default: some test\n-\t# do symbol renaming by munging on ELF symbol table, and that\n-\t# wouldn't work for .debug sections.  Also, output for \"info\n-\t# function\" changes when debug info is present.\n-\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} {}] != \"\" } {\n-\t    untested \"failed to compile ${jit_solib_basename}.c as a shared library\"\n-\t    return -1\n-\t}\n-\n-\tset path [gdb_remote_download target ${binfile}]\n-\tlappend binfiles_target $path\n-    }\n-\n-    return $binfiles_target\n-}\n-\n # Detach, restart GDB, and re-attach to the program.\n-\n proc clean_reattach {} {\n     global decimal gdb_prompt\n     global main_binfile main_srcfile\n@@ -180,13 +131,14 @@ proc one_jit_test {jit_solibs_target match_str reattach} {\n }\n \n # Compile two shared libraries to use as JIT objects.\n-set jit_solibs_target [compile_and_download_n_jit_so 2]\n+set jit_solibs_target [compile_and_download_n_jit_so \\\n+\t\t      $jit_solib_basename $jit_solib_srcfile 2]\n if { $jit_solibs_target == -1 } {\n     return\n }\n \n # Compile the main code (which loads the JIT objects).\n-if { [compile_jit_main \"\" {}] == 0 } {\n+if { [compile_jit_main ${main_srcfile} ${main_binfile} {}] == 0 } {\n     one_jit_test [lindex $jit_solibs_target 0] \"${hex}  jit_function_0001\" 0\n     one_jit_test $jit_solibs_target \"${hex}  jit_function_0001\\[\\r\\n\\]+${hex}  jit_function_0002\" 0\n }\n@@ -195,14 +147,15 @@ if { [compile_jit_main \"\" {}] == 0 } {\n # registered.  We reuse the normal test, and detach/reattach at\n # specific interesting points.\n if {[can_spawn_for_attach]} {\n-    if { [compile_jit_main \"-attach\" {additional_flags=-DATTACH=1}] == 0 } {\n+    if { [compile_jit_main ${main_srcfile} ${main_binfile}\"-attach\" \\\n+\t    {additional_flags=-DATTACH=1}] == 0 } {\n \twith_test_prefix attach {\n \t    one_jit_test $jit_solibs_target \"${hex}  jit_function_0001\\[\\r\\n\\]+${hex}  jit_function_0002\" 1\n \t}\n     }\n }\n \n-if { [compile_jit_main \"-pie\" {additional_flags=-fPIE ldflags=-pie}] == 0 } {\n+if { [compile_jit_main ${main_srcfile} ${main_binfile}\"-pie\" {additional_flags=-fPIE ldflags=-pie}] == 0 } {\n     with_test_prefix PIE {\n \tone_jit_test [lindex $jit_solibs_target 0] \"${hex}  jit_function_0001\" 0\n     }"
    },
    {
      "sha": "91b64f2915d76305e499cb1fa816c62eb15efa18",
      "filename": "gdb/testsuite/lib/jit-elf-helpers.exp",
      "status": "added",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f80120719777e671e871434d727716355d6ab57d/gdb/testsuite/lib/jit-elf-helpers.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f80120719777e671e871434d727716355d6ab57d/gdb/testsuite/lib/jit-elf-helpers.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/jit-elf-helpers.exp?ref=f80120719777e671e871434d727716355d6ab57d",
      "patch": "@@ -0,0 +1,78 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Compile jit-elf-main.c as an executable.\n+#\n+# BINSUFFIX is appended to the binary name.\n+# OPTIONS is passed to gdb_compile when compiling the program.\n+#\n+# On success, return 0.\n+# On failure, return -1.\n+proc compile_jit_main {main_srcfile main_binfile options} {\n+    set options [concat $options debug]\n+\n+    if { [gdb_compile ${main_srcfile} ${main_binfile} \\\n+\t  executable $options] != \"\" } {\n+\t      untested \"failed to compile ${main_basename}.c\"\n+\t      return -1\n+    }\n+\n+    return 0\n+}\n+\n+# Compile jit-elf-main.c as a shared library.\n+#\n+# OPTIONS is passed to gdb_compile when compiling the program.\n+#\n+# On success, return 0.\n+# On failure, return -1.\n+proc compile_jit_elf_main_as_so {main_solib_srcfile main_solib_binfile options} {\n+    set options [concat $options debug]\n+\n+    if { [gdb_compile_shlib ${main_solib_srcfile} ${main_solib_binfile} \\\n+\t    $options] != \"\" } {\n+\tuntested \"failed to compile ${main_solib_basename}.c as a shared library\"\n+\treturn -1\n+    }\n+\n+    return 0\n+}\n+\n+# Compile jit-elf-solib.c as a shared library in multiple copies and\n+# upload them to the target.\n+#\n+# On success, return a list of target path to the shared libraries.\n+# On failure, return -1.\n+proc compile_and_download_n_jit_so {jit_solib_basename jit_solib_srcfile count} {\n+    set binfiles_target {}\n+\n+    for {set i 1} {$i <= $count} {incr i} {\n+\tset binfile [standard_output_file ${jit_solib_basename}.$i.so]\n+\n+\t# Note: compiling without debug info by default: some test\n+\t# do symbol renaming by munging on ELF symbol table, and that\n+\t# wouldn't work for .debug sections.  Also, output for \"info\n+\t# function\" changes when debug info is present.\n+\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} {}] != \"\" } {\n+\t    untested \"failed to compile ${jit_solib_basename}.c as a shared library\"\n+\t    return -1\n+\t}\n+\n+\tset path [gdb_remote_download target ${binfile}]\n+\tlappend binfiles_target $path\n+    }\n+\n+    return $binfiles_target\n+}\n\\ No newline at end of file"
    }
  ]
}