{
  "sha": "c3efb9654847822620010922cb7ea61e8901479c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzNlZmI5NjU0ODQ3ODIyNjIwMDEwOTIyY2I3ZWE2MWU4OTAxNDc5Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-09-29T15:27:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-26T21:02:57Z"
    },
    "message": "Introduce alternate_signal_stack RAII class\n\nThis introduces a new RAII class that temporarily installs an\nalternate signal stack (on systems that have sigaltstack); then\nchanges the one gdb use of sigaltstack to use this class instead.\n\nThis will be used in a later patch, when creating new threads that may\nwant to handle SIGSEGV.\n\ngdb/ChangeLog\n2019-11-26  Tom Tromey  <tom@tromey.com>\n\n\t* main.c (setup_alternate_signal_stack): Remove.\n\t(captured_main_1): Use gdb::alternate_signal_stack.\n\t* gdbsupport/alt-stack.h: New file.\n\nChange-Id: I721c047ae9d51a35fd274a6dbc00a58c6440dae6",
    "tree": {
      "sha": "19776ea09f27af39d30ac52c3c53b8f10435a317",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19776ea09f27af39d30ac52c3c53b8f10435a317"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3efb9654847822620010922cb7ea61e8901479c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3efb9654847822620010922cb7ea61e8901479c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3efb9654847822620010922cb7ea61e8901479c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3efb9654847822620010922cb7ea61e8901479c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "21987b9c060033d367abc50c29f786df4c21b10c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21987b9c060033d367abc50c29f786df4c21b10c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/21987b9c060033d367abc50c29f786df4c21b10c"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 78,
    "deletions": 24
  },
  "files": [
    {
      "sha": "7535016bcc2276af33e49bdb1ceaa7e599220cd6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3efb9654847822620010922cb7ea61e8901479c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3efb9654847822620010922cb7ea61e8901479c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c3efb9654847822620010922cb7ea61e8901479c",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* main.c (setup_alternate_signal_stack): Remove.\n+\t(captured_main_1): Use gdb::alternate_signal_stack.\n+\t* gdbsupport/alt-stack.h: New file.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* gdbsupport/signals-state-save-restore.c (original_signal_mask):"
    },
    {
      "sha": "1708fb4ce924e9413323b1b2476f78299caecdd5",
      "filename": "gdb/gdbsupport/alt-stack.h",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3efb9654847822620010922cb7ea61e8901479c/gdb/gdbsupport/alt-stack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3efb9654847822620010922cb7ea61e8901479c/gdb/gdbsupport/alt-stack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/alt-stack.h?ref=c3efb9654847822620010922cb7ea61e8901479c",
      "patch": "@@ -0,0 +1,70 @@\n+/* Temporarily install an alternate signal stack\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDBSUPPORT_ALT_STACK_H\n+#define GDBSUPPORT_ALT_STACK_H\n+\n+#include <signal.h>\n+\n+namespace gdb\n+{\n+\n+/* Try to set up an alternate signal stack for SIGSEGV handlers.\n+   This allows us to handle SIGSEGV signals generated when the\n+   normal process stack is exhausted.  If this stack is not set\n+   up (sigaltstack is unavailable or fails) and a SIGSEGV is\n+   generated when the normal stack is exhausted then the program\n+   will behave as though no SIGSEGV handler was installed.  */\n+class alternate_signal_stack\n+{\n+public:\n+  alternate_signal_stack ()\n+  {\n+#ifdef HAVE_SIGALTSTACK\n+    m_stack.reset ((char *) xmalloc (SIGSTKSZ));\n+\n+    stack_t stack;\n+    stack.ss_sp = m_stack.get ();\n+    stack.ss_size = SIGSTKSZ;\n+    stack.ss_flags = 0;\n+\n+    sigaltstack (&stack, &m_old_stack);\n+#endif\n+  }\n+\n+  ~alternate_signal_stack ()\n+  {\n+#ifdef HAVE_SIGALTSTACK\n+    sigaltstack (&m_old_stack, nullptr);\n+#endif\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (alternate_signal_stack);\n+\n+private:\n+\n+#ifdef HAVE_SIGALTSTACK\n+  gdb::unique_xmalloc_ptr<char> m_stack;\n+  stack_t m_old_stack;\n+#endif\n+};\n+\n+}\n+\n+#endif /* GDBSUPPORT_ALT_STACK_H */"
    },
    {
      "sha": "1acf53ee926ef122551d8894b95a3558b4e08421",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 24,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3efb9654847822620010922cb7ea61e8901479c/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3efb9654847822620010922cb7ea61e8901479c/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=c3efb9654847822620010922cb7ea61e8901479c",
      "patch": "@@ -52,6 +52,7 @@\n #ifdef GDBTK\n #include \"gdbtk/generic/gdbtk.h\"\n #endif\n+#include \"gdbsupport/alt-stack.h\"\n \n /* The selected interpreter.  This will be used as a set command\n    variable, so it should always be malloc'ed - since\n@@ -334,29 +335,6 @@ get_init_files (std::vector<std::string> *system_gdbinit,\n   *local_gdbinit = localinit;\n }\n \n-/* Try to set up an alternate signal stack for SIGSEGV handlers.\n-   This allows us to handle SIGSEGV signals generated when the\n-   normal process stack is exhausted.  If this stack is not set\n-   up (sigaltstack is unavailable or fails) and a SIGSEGV is\n-   generated when the normal stack is exhausted then the program\n-   will behave as though no SIGSEGV handler was installed.  */\n-\n-static void\n-setup_alternate_signal_stack (void)\n-{\n-#ifdef HAVE_SIGALTSTACK\n-  stack_t ss;\n-\n-  /* FreeBSD versions older than 11.0 use char * for ss_sp instead of\n-     void *.  This cast works with both types.  */\n-  ss.ss_sp = (char *) xmalloc (SIGSTKSZ);\n-  ss.ss_size = SIGSTKSZ;\n-  ss.ss_flags = 0;\n-\n-  sigaltstack(&ss, NULL);\n-#endif\n-}\n-\n /* Call command_loop.  */\n \n /* Prevent inlining this function for the benefit of GDB's selftests\n@@ -898,7 +876,7 @@ captured_main_1 (struct captured_main_args *context)\n   save_original_signals_state (quiet);\n \n   /* Try to set up an alternate signal stack for SIGSEGV handlers.  */\n-  setup_alternate_signal_stack ();\n+  gdb::alternate_signal_stack signal_stack;\n \n   /* Initialize all files.  */\n   gdb_init (gdb_program_name);"
    }
  ]
}