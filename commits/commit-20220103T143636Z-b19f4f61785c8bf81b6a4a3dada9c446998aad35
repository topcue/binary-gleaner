{
  "sha": "b19f4f61785c8bf81b6a4a3dada9c446998aad35",
  "node_id": "C_kwDOANOeidoAKGIxOWY0ZjYxNzg1YzhiZjgxYjZhNGEzZGFkYTljNDQ2OTk4YWFkMzU",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2022-01-03T14:36:36Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2022-01-03T14:36:36Z"
    },
    "message": "[gdb/testsuite] Handle for loop initial decl with gcc 4.8.5\n\nWhen running test-case gdb.threads/schedlock-thread-exit.exp on a system with\nsystem compiler gcc 4.8.5, I run into:\n...\nsrc/gdb/testsuite/gdb.threads/schedlock-thread-exit.c:33:3: error: \\\n  'for' loop initial declarations are only allowed in C99 mode\n...\n\nFix this by:\n- using -std=c99, or\n- using -std=gnu99, in case that's required, or\n- in the case of the jit test-cases, rewriting the for loops.\n\nTested on x86_64-linux, both with gcc 4.8.5 and gcc 7.5.0.",
    "tree": {
      "sha": "5acb0ba8ac24018102db7808034d28899e465e77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5acb0ba8ac24018102db7808034d28899e465e77"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b19f4f61785c8bf81b6a4a3dada9c446998aad35",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b19f4f61785c8bf81b6a4a3dada9c446998aad35",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b19f4f61785c8bf81b6a4a3dada9c446998aad35",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b19f4f61785c8bf81b6a4a3dada9c446998aad35/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1eeb0316304f2d4e2c48aa8887e28c936bfe4f4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1eeb0316304f2d4e2c48aa8887e28c936bfe4f4d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1eeb0316304f2d4e2c48aa8887e28c936bfe4f4d"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 19,
    "deletions": 9
  },
  "files": [
    {
      "sha": "691ce0ae8843e6d9854277d054be53249df526a4",
      "filename": "gdb/testsuite/gdb.base/inferior-args.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.base/inferior-args.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.base/inferior-args.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/inferior-args.exp?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -23,7 +23,8 @@ if [target_info exists noargs] then {\n \n standard_testfile .c\n \n-if {[build_executable \"failed to prepare\" $testfile $srcfile debug] == -1} {\n+if {[build_executable \"failed to prepare\" $testfile $srcfile \\\n+\t {debug additional_flags=-std=c99}] == -1} {\n     return\n }\n "
    },
    {
      "sha": "419a781f86590698836701fbce17aba7ddd18a58",
      "filename": "gdb/testsuite/gdb.base/jit-elf-util.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.base/jit-elf-util.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.base/jit-elf-util.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-util.h?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -54,8 +54,8 @@ load_symbol (void *addr, const char *sym_name)\n   ElfW (Addr) sym_new_addr = 0;\n \n   /* Find `func_name` in symbol_table and return its address.  */\n-\n-  for (int i = 0; i < ehdr->e_shnum; ++i)\n+  int i;\n+  for (i = 0; i < ehdr->e_shnum; ++i)\n     {\n       if (shdr[i].sh_type == SHT_SYMTAB)\n \t{\n@@ -65,7 +65,8 @@ load_symbol (void *addr, const char *sym_name)\n \t  char *const strtab\n \t      = (char *) (addr + shdr[shdr[i].sh_link].sh_offset);\n \n-\t  for (ElfW (Sym) *p = symtab; p < symtab_end; ++p)\n+\t  ElfW (Sym) *p;\n+\t  for (p = symtab; p < symtab_end; ++p)\n \t    {\n \t      const char *s = strtab + p->st_name;\n \t      if (strcmp (s, sym_name) == 0)"
    },
    {
      "sha": "ee67db7caa5e4e8792ac7af746fbda35b5f24d8c",
      "filename": "gdb/testsuite/gdb.base/run-attach-while-running.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.base/run-attach-while-running.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.base/run-attach-while-running.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/run-attach-while-running.exp?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -106,7 +106,8 @@ proc_with_prefix test { non-stop threaded run-or-attach } {\n }\n \n foreach_with_prefix threaded {0 1} {\n-    set options [list debug additional_flags=-DWITH_THREADS=$threaded]\n+    set options [list debug additional_flags=-DWITH_THREADS=$threaded \\\n+\t\t    additional_flags=-std=gnu99]\n     if { $threaded } {\n \tset binfile $binfile_threads\n \tlappend options pthreads"
    },
    {
      "sha": "8661d573cfe21afe0585f9f8be25ec1715499d71",
      "filename": "gdb/testsuite/gdb.mi/interrupt-thread-group.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.mi/interrupt-thread-group.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.mi/interrupt-thread-group.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/interrupt-thread-group.exp?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -24,7 +24,7 @@ set MIFLAGS \"-i=mi\"\n standard_testfile .c\n \n if {[gdb_compile_pthreads \"$srcdir/$subdir/$srcfile\" $binfile \\\n-\texecutable debug] != \"\" } {\n+\t executable {debug additional_flags=-std=gnu99}] != \"\" } {\n     return -1\n }\n "
    },
    {
      "sha": "4c78bed120324489d4ba6fa954924edba0e9b66a",
      "filename": "gdb/testsuite/gdb.python/py-format-string.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.python/py-format-string.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.python/py-format-string.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-format-string.exp?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -33,7 +33,13 @@ if { [skip_python_tests] } { continue }\n proc build_inferior {exefile lang} {\n   global srcdir subdir srcfile testfile hex\n \n-  if { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${exefile}\" executable \"debug $lang\"] != \"\" } {\n+  set flags [list debug $lang]\n+  if { $lang == \"c\" } {\n+    lappend flags additional_flags=-std=c99\n+  }\n+\n+  if { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${exefile}\" \\\n+\t    executable $flags] != \"\" } {\n       untested \"failed to compile in $lang mode\"\n       return -1\n   }"
    },
    {
      "sha": "c76d366e7a250e93203ca4efb60ac5d8093e135f",
      "filename": "gdb/testsuite/gdb.threads/multiple-successive-infcall.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.threads/multiple-successive-infcall.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.threads/multiple-successive-infcall.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/multiple-successive-infcall.exp?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -23,7 +23,7 @@ if [get_compiler_info] {\n }\n \n if {[gdb_compile_pthreads \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" \\\n-  executable {debug}] != \"\" } {\n+  executable {debug additional_flags=-std=gnu99}] != \"\" } {\n   return -1\n }\n "
    },
    {
      "sha": "a6e6d33f4bffe541b0ddafd72ca96def3681e1a8",
      "filename": "gdb/testsuite/gdb.threads/schedlock-thread-exit.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.threads/schedlock-thread-exit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b19f4f61785c8bf81b6a4a3dada9c446998aad35/gdb/testsuite/gdb.threads/schedlock-thread-exit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/schedlock-thread-exit.exp?ref=b19f4f61785c8bf81b6a4a3dada9c446998aad35",
      "patch": "@@ -22,7 +22,8 @@\n \n standard_testfile\n \n-if { [build_executable \"failed to prepare\" ${testfile} ${srcfile} {debug pthreads}] } {\n+if { [build_executable \"failed to prepare\" ${testfile} ${srcfile} \\\n+\t  {debug pthreads additional_flags=-std=c99}] } {\n     return\n }\n "
    }
  ]
}