{
  "sha": "ca793b969c39158aa5fb10508a13d2696bf9c6d2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2E3OTNiOTY5YzM5MTU4YWE1ZmIxMDUwOGExM2QyNjk2YmY5YzZkMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T19:57:25Z"
    },
    "message": "Use error_no_arg in TUI\n\nThis changes a couple of TUI commands to use error_no_arg.  The\ncommands are also simplified a bit, and changed to use other gdb CLI\nutility functions like skip_to_space.  This lets us removes a couple\nof defines that don't interact properly with gettext.\n\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-win.c (tui_set_focus_command)\n\t(tui_set_win_height_command): Use error_no_arg.\n\t(_initialize_tui_win): Update help text.\n\t(FOCUS_USAGE, WIN_HEIGHT_USAGE): Don't define.\n\nChange-Id: I2bf95c2e5cfe1472d068388fa39f0cf07591b76c",
    "tree": {
      "sha": "7a37700af2b14ca6f12c009fa4fb1ba6d4ee3891",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a37700af2b14ca6f12c009fa4fb1ba6d4ee3891"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca793b969c39158aa5fb10508a13d2696bf9c6d2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca793b969c39158aa5fb10508a13d2696bf9c6d2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca793b969c39158aa5fb10508a13d2696bf9c6d2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca793b969c39158aa5fb10508a13d2696bf9c6d2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "432b5c40220d80d539284f0ee8f6d081d39f0578",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/432b5c40220d80d539284f0ee8f6d081d39f0578",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/432b5c40220d80d539284f0ee8f6d081d39f0578"
    }
  ],
  "stats": {
    "total": 167,
    "additions": 77,
    "deletions": 90
  },
  "files": [
    {
      "sha": "059e9cdb199733f9527304bd441df7c5533f9ad0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca793b969c39158aa5fb10508a13d2696bf9c6d2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca793b969c39158aa5fb10508a13d2696bf9c6d2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ca793b969c39158aa5fb10508a13d2696bf9c6d2",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-win.c (tui_set_focus_command)\n+\t(tui_set_win_height_command): Use error_no_arg.\n+\t(_initialize_tui_win): Update help text.\n+\t(FOCUS_USAGE, WIN_HEIGHT_USAGE): Don't define.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-layout.c (extract_display_start_addr): Rewrite."
    },
    {
      "sha": "dad3464ae19a78999bd68b2698772981e167edbc",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 70,
      "deletions": 90,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca793b969c39158aa5fb10508a13d2696bf9c6d2/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca793b969c39158aa5fb10508a13d2696bf9c6d2/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=ca793b969c39158aa5fb10508a13d2696bf9c6d2",
      "patch": "@@ -68,9 +68,6 @@ static void parse_scrolling_args (const char *,\n \t\t\t\t  int *);\n \n \n-#define WIN_HEIGHT_USAGE    \"Usage: winheight WINDOW-NAME [+ | -] NUM-LINES\\n\"\n-#define FOCUS_USAGE         \"Usage: focus [WINDOW-NAME | next | prev]\\n\"\n-\n #ifndef ACS_LRCORNER\n #  define ACS_LRCORNER '+'\n #endif\n@@ -707,29 +704,27 @@ tui_set_focus_command (const char *arg, int from_tty)\n {\n   tui_enable ();\n \n-  if (arg != NULL)\n-    {\n-      struct tui_win_info *win_info = NULL;\n-\n-      if (subset_compare (arg, \"next\"))\n-\twin_info = tui_next_win (tui_win_with_focus ());\n-      else if (subset_compare (arg, \"prev\"))\n-\twin_info = tui_prev_win (tui_win_with_focus ());\n-      else\n-\twin_info = tui_partial_win_by_name (arg);\n+  if (arg == NULL)\n+    error_no_arg (_(\"name of window to focus\"));\n \n-      if (win_info == NULL)\n-\terror (_(\"Unrecognized window name \\\"%s\\\"\"), arg);\n-      if (!win_info->is_visible ())\n-\terror (_(\"Window \\\"%s\\\" is not visible\"), arg);\n+  struct tui_win_info *win_info = NULL;\n \n-      tui_set_win_focus_to (win_info);\n-      keypad (TUI_CMD_WIN->handle.get (), win_info != TUI_CMD_WIN);\n-      printf_filtered (_(\"Focus set to %s window.\\n\"),\n-\t\t       tui_win_with_focus ()->name ());\n-    }\n+  if (subset_compare (arg, \"next\"))\n+    win_info = tui_next_win (tui_win_with_focus ());\n+  else if (subset_compare (arg, \"prev\"))\n+    win_info = tui_prev_win (tui_win_with_focus ());\n   else\n-    error (_(\"Incorrect Number of Arguments.\\n%s\"), FOCUS_USAGE);\n+    win_info = tui_partial_win_by_name (arg);\n+\n+  if (win_info == NULL)\n+    error (_(\"Unrecognized window name \\\"%s\\\"\"), arg);\n+  if (!win_info->is_visible ())\n+    error (_(\"Window \\\"%s\\\" is not visible\"), arg);\n+\n+  tui_set_win_focus_to (win_info);\n+  keypad (TUI_CMD_WIN->handle.get (), win_info != TUI_CMD_WIN);\n+  printf_filtered (_(\"Focus set to %s window.\\n\"),\n+\t\t   tui_win_with_focus ()->name ());\n }\n \n static void\n@@ -875,66 +870,59 @@ tui_set_win_height_command (const char *arg, int from_tty)\n {\n   /* Make sure the curses mode is enabled.  */\n   tui_enable ();\n-  if (arg != NULL)\n-    {\n-      const char *buf = arg;\n-      const char *buf_ptr = buf;\n-      int new_height;\n-      struct tui_win_info *win_info;\n+  if (arg == NULL)\n+    error_no_arg (_(\"name of window\"));\n \n-      buf_ptr = strchr (buf_ptr, ' ');\n-      if (buf_ptr != NULL)\n-\t{\n-\t  /* Validate the window name.  */\n-\t  gdb::string_view wname (buf, buf_ptr - buf);\n-\t  win_info = tui_partial_win_by_name (wname);\n+  const char *buf = arg;\n+  const char *buf_ptr = buf;\n+  int new_height;\n+  struct tui_win_info *win_info;\n \n-\t  if (win_info == NULL)\n-\t    error (_(\"Unrecognized window name \\\"%s\\\"\"), arg);\n-\t  if (!win_info->is_visible ())\n-\t    error (_(\"Window \\\"%s\\\" is not visible\"), arg);\n+  buf_ptr = skip_to_space (buf_ptr);\n \n-\t  /* Process the size.  */\n-\t  buf_ptr = skip_spaces (buf_ptr);\n+  /* Validate the window name.  */\n+  gdb::string_view wname (buf, buf_ptr - buf);\n+  win_info = tui_partial_win_by_name (wname);\n \n-\t  if (*buf_ptr != '\\0')\n-\t    {\n-\t      bool negate = false;\n-\t      bool fixed_size = true;\n-\t      int input_no;;\n-\n-\t      if (*buf_ptr == '+' || *buf_ptr == '-')\n-\t\t{\n-\t\t  if (*buf_ptr == '-')\n-\t\t    negate = true;\n-\t\t  fixed_size = false;\n-\t\t  buf_ptr++;\n-\t\t}\n-\t      input_no = atoi (buf_ptr);\n-\t      if (input_no > 0)\n-\t\t{\n-\t\t  if (negate)\n-\t\t    input_no *= (-1);\n-\t\t  if (fixed_size)\n-\t\t    new_height = input_no;\n-\t\t  else\n-\t\t    new_height = win_info->height + input_no;\n-\n-\t\t  /* Now change the window's height, and adjust\n-\t\t     all other windows around it.  */\n-\t\t  tui_adjust_window_height (win_info, new_height);\n-\t\t  tui_update_gdb_sizes ();\n-\t\t}\n-\t      else\n-\t\twarning (_(\"Invalid window height specified.\\n%s\"),\n-\t\t\t WIN_HEIGHT_USAGE);\n-\t    }\n+  if (win_info == NULL)\n+    error (_(\"Unrecognized window name \\\"%s\\\"\"), arg);\n+  if (!win_info->is_visible ())\n+    error (_(\"Window \\\"%s\\\" is not visible\"), arg);\n+\n+  /* Process the size.  */\n+  buf_ptr = skip_spaces (buf_ptr);\n+\n+  if (*buf_ptr != '\\0')\n+    {\n+      bool negate = false;\n+      bool fixed_size = true;\n+      int input_no;;\n+\n+      if (*buf_ptr == '+' || *buf_ptr == '-')\n+\t{\n+\t  if (*buf_ptr == '-')\n+\t    negate = true;\n+\t  fixed_size = false;\n+\t  buf_ptr++;\n+\t}\n+      input_no = atoi (buf_ptr);\n+      if (input_no > 0)\n+\t{\n+\t  if (negate)\n+\t    input_no *= (-1);\n+\t  if (fixed_size)\n+\t    new_height = input_no;\n+\t  else\n+\t    new_height = win_info->height + input_no;\n+\n+\t  /* Now change the window's height, and adjust\n+\t     all other windows around it.  */\n+\t  tui_adjust_window_height (win_info, new_height);\n+\t  tui_update_gdb_sizes ();\n \t}\n       else\n-\tprintf_filtered (WIN_HEIGHT_USAGE);\n+\terror (_(\"Invalid window height specified\"));\n     }\n-  else\n-    printf_filtered (WIN_HEIGHT_USAGE);\n }\n \n /* See tui-data.h.  */\n@@ -1041,25 +1029,17 @@ Usage: tabset N\"));\n   deprecate_cmd (cmd, \"set tui tab-width\");\n \n   cmd = add_com (\"winheight\", class_tui, tui_set_win_height_command, _(\"\\\n-Set or modify the height of a specified window.\\n\"\n-WIN_HEIGHT_USAGE\n-\"Window names are:\\n\\\n-   src  : the source window\\n\\\n-   cmd  : the command window\\n\\\n-   asm  : the disassembly window\\n\\\n-   regs : the register display\"));\n+Set or modify the height of a specified window.\\n\\\n+Usage: winheight WINDOW-NAME [+ | -] NUM-LINES\\n\\\n+Use \\\"info win\\\" to see the names of the windows currently being displayed.\"));\n   add_com_alias (\"wh\", \"winheight\", class_tui, 0);\n   set_cmd_completer (cmd, winheight_completer);\n   add_info (\"win\", tui_all_windows_info,\n \t    _(\"List of all displayed windows.\"));\n   cmd = add_com (\"focus\", class_tui, tui_set_focus_command, _(\"\\\n-Set focus to named window or next/prev window.\\n\"\n-FOCUS_USAGE\n-\"Valid Window names are:\\n\\\n-   src  : the source window\\n\\\n-   asm  : the disassembly window\\n\\\n-   regs : the register display\\n\\\n-   cmd  : the command window\"));\n+Set focus to named window or next/prev window.\\n\\\n+Usage: focus [WINDOW-NAME | next | prev]\\n\\\n+Use \\\"info win\\\" to see the names of the windows currently being displayed.\"));\n   add_com_alias (\"fs\", \"focus\", class_tui, 0);\n   set_cmd_completer (cmd, focus_completer);\n   add_com (\"+\", class_tui, tui_scroll_forward_command, _(\"\\"
    }
  ]
}