{
  "sha": "5729359001c99ec1c861fde88944926f5fb76ffb",
  "node_id": "C_kwDOANOeidoAKDU3MjkzNTkwMDFjOTllYzFjODYxZmRlODg5NDQ5MjZmNWZiNzZmZmI",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-10-23T04:39:53Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2021-10-28T20:22:13Z"
    },
    "message": "gdb: or1k: add single step for linux native debugging\n\nNeeded for single stepping in Linux, this adds the or1k implementation\nof or1k_software_single_step.  Most of the implementation is borrowed\nfrom the bare metal single step code from or1k_single_step_through_delay\nwhich has been extracted and shared in helper function\nor1k_delay_slot_p.",
    "tree": {
      "sha": "93d423f97ddbee6b1f04c00889724bc521af9160",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93d423f97ddbee6b1f04c00889724bc521af9160"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5729359001c99ec1c861fde88944926f5fb76ffb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5729359001c99ec1c861fde88944926f5fb76ffb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5729359001c99ec1c861fde88944926f5fb76ffb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5729359001c99ec1c861fde88944926f5fb76ffb/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 54,
    "deletions": 19
  },
  "files": [
    {
      "sha": "63c4171e29529ec13ba9b15e2c55b5cc6737dbd1",
      "filename": "gdb/or1k-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5729359001c99ec1c861fde88944926f5fb76ffb/gdb/or1k-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5729359001c99ec1c861fde88944926f5fb76ffb/gdb/or1k-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-linux-tdep.c?ref=5729359001c99ec1c861fde88944926f5fb76ffb",
      "patch": "@@ -154,6 +154,8 @@ or1k_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   /* GNU/Linux uses the dynamic linker included in the GNU C Library.  */\n   set_gdbarch_skip_solib_resolver (gdbarch, glibc_skip_solib_resolver);\n \n+  set_gdbarch_software_single_step (gdbarch, or1k_software_single_step);\n+\n   /* Enable TLS support.  */\n   set_gdbarch_fetch_tls_load_module_address (gdbarch,\n \t\t\t\t\t     svr4_fetch_objfile_link_map);"
    },
    {
      "sha": "4c42e0242f3d5f01cea1ebba8da51fd06a33c074",
      "filename": "gdb/or1k-tdep.c",
      "status": "modified",
      "additions": 47,
      "deletions": 19,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5729359001c99ec1c861fde88944926f5fb76ffb/gdb/or1k-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5729359001c99ec1c861fde88944926f5fb76ffb/gdb/or1k-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-tdep.c?ref=5729359001c99ec1c861fde88944926f5fb76ffb",
      "patch": "@@ -346,6 +346,33 @@ constexpr gdb_byte or1k_break_insn[] = {0x21, 0x00, 0x00, 0x01};\n \n typedef BP_MANIPULATION (or1k_break_insn) or1k_breakpoint;\n \n+static int\n+or1k_delay_slot_p (struct gdbarch *gdbarch, CORE_ADDR pc)\n+{\n+  const CGEN_INSN *insn;\n+  CGEN_FIELDS tmp_fields;\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n+  insn = cgen_lookup_insn (tdep->gdb_cgen_cpu_desc,\n+\t\t\t   NULL,\n+\t\t\t   or1k_fetch_instruction (gdbarch, pc),\n+\t\t\t   NULL, 32, &tmp_fields, 0);\n+\n+  /* NULL here would mean the last instruction was not understood by cgen.\n+     This should not usually happen, but if does its not a delay slot.  */\n+  if (insn == NULL)\n+    return 0;\n+\n+  /* TODO: we should add a delay slot flag to the CGEN_INSN and remove\n+     this hard coded test.  */\n+  return ((CGEN_INSN_NUM (insn) == OR1K_INSN_L_J)\n+\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_JAL)\n+\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_JR)\n+\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_JALR)\n+\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_BNF)\n+\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_BF));\n+}\n+\n /* Implement the single_step_through_delay gdbarch method.  */\n \n static int\n@@ -355,10 +382,7 @@ or1k_single_step_through_delay (struct gdbarch *gdbarch,\n   ULONGEST val;\n   CORE_ADDR ppc;\n   CORE_ADDR npc;\n-  CGEN_FIELDS tmp_fields;\n-  const CGEN_INSN *insn;\n   struct regcache *regcache = get_current_regcache ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n   /* Get the previous and current instruction addresses.  If they are not\n     adjacent, we cannot be in a delay slot.  */\n@@ -370,24 +394,28 @@ or1k_single_step_through_delay (struct gdbarch *gdbarch,\n   if (0x4 != (npc - ppc))\n     return 0;\n \n-  insn = cgen_lookup_insn (tdep->gdb_cgen_cpu_desc,\n-\t\t\t   NULL,\n-\t\t\t   or1k_fetch_instruction (gdbarch, ppc),\n-\t\t\t   NULL, 32, &tmp_fields, 0);\n+  return or1k_delay_slot_p (gdbarch, ppc);\n+}\n \n-  /* NULL here would mean the last instruction was not understood by cgen.\n-     This should not usually happen, but if does its not a delay slot.  */\n-  if (insn == NULL)\n-    return 0;\n+/* or1k_software_single_step() is called just before we want to resume\n+   the inferior, if we want to single-step it but there is no hardware\n+   or kernel single-step support (OpenRISC on GNU/Linux for example).  We\n+   find the target of the coming instruction skipping over delay slots\n+   and breakpoint it.  */\n \n-  /* TODO: we should add a delay slot flag to the CGEN_INSN and remove\n-     this hard coded test.  */\n-  return ((CGEN_INSN_NUM (insn) == OR1K_INSN_L_J)\n-\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_JAL)\n-\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_JR)\n-\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_JALR)\n-\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_BNF)\n-\t  || (CGEN_INSN_NUM (insn) == OR1K_INSN_L_BF));\n+std::vector<CORE_ADDR>\n+or1k_software_single_step (struct regcache *regcache)\n+{\n+  struct gdbarch *gdbarch = regcache->arch ();\n+  CORE_ADDR pc, next_pc;\n+\n+  pc = regcache_read_pc (regcache);\n+  next_pc = pc + 4;\n+\n+  if (or1k_delay_slot_p (gdbarch, pc))\n+    next_pc += 4;\n+\n+  return {next_pc};\n }\n \n /* Name for or1k general registers.  */"
    },
    {
      "sha": "81d902ae49e54f540e2d73dd853537cb34017893",
      "filename": "gdb/or1k-tdep.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5729359001c99ec1c861fde88944926f5fb76ffb/gdb/or1k-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5729359001c99ec1c861fde88944926f5fb76ffb/gdb/or1k-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-tdep.h?ref=5729359001c99ec1c861fde88944926f5fb76ffb",
      "patch": "@@ -52,4 +52,9 @@\n #define OR1K_NUM_TAP_RECORDS         8\n #define OR1K_FRAME_RED_ZONE_SIZE     2536\n \n+/* Single step based on where the current instruction will take us.  */\n+extern std::vector<CORE_ADDR> or1k_software_single_step\n+  (struct regcache *regcache);\n+\n+\n #endif /* OR1K_TDEP_H */"
    }
  ]
}