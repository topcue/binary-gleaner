{
  "sha": "37002871ac2111eb3c88f44659c3c67d2fde1997",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzcwMDI4NzFhYzIxMTFlYjNjODhmNDQ2NTljM2M2N2QyZmRlMTk5Nw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T13:25:56Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T14:53:39Z"
    },
    "message": "libctf, ld: dump enums: generally improve dump formatting\n\nThis commit adds dumping of enumerands in this general form:\n\n    0x3: (kind 8) enum eleven_els (size 0x4) (aligned at 0x4)\n         ELEVEN_ONE: 10\n         ELEVEN_TWO: 11\n         ELEVEN_THREE: -256\n         ELEVEN_FOUR: -255\n         ELEVEN_FIVE: -254\n         ...\n         ELEVEN_SEVEN: -252\n         ELEVEN_EIGHT: -251\n         ELEVEN_NINE: -250\n         ELEVEN_TEN: -249\n         ELEVEN_ELEVEN: -248\n\nThe first and last enumerands in the enumerated type are printed so that\nyou can tell if they've been cut off at one end or the other.  (For now,\nthere is no way to control how many enumerands are printed.)\n\nThe dump output in general is improved, from this sort of thing a few\ndays ago:\n\n     4c: char [0x0:0x8] (size 0x1)\n        [0x0] (ID 0x4c) (kind 1) char:8 (aligned at 0x1, format 0x3, offset:bits 0x0:0x8)\n     4d: char * (size 0x8) -> 4c: char [0x0:0x8] (size 0x1)\n        [0x0] (ID 0x4d) (kind 3) char * (aligned at 0x8)\n[...]\n     5a: struct _IO_FILE (size 0xd8)\n        [0x0] (ID 0x5a) (kind 6) struct _IO_FILE (aligned at 0x4)\n            [0x0] (ID 0x3) (kind 1) int _flags:32 (aligned at 0x4, format 0x1, offset:bits 0x0:0x20)\n            [0x40] (ID 0x4d) (kind 3) char * _IO_read_ptr (aligned at 0x8)\n            [0x80] (ID 0x4d) (kind 3) char * _IO_read_end (aligned at 0x8)\n            [0xc0] (ID 0x4d) (kind 3) char * _IO_read_base (aligned at 0x8)\n     5b: __FILE (size 0xd8) -> 5a: struct _IO_FILE (size 0xd8)\n        [0x0] (ID 0x5b) (kind 10) __FILE (aligned at 0x4)\n            [0x0] (ID 0x3) (kind 1) int _flags:32 (aligned at 0x4, format 0x1, offset:bits 0x0:0x20)\n            [0x40] (ID 0x4d) (kind 3) char * _IO_read_ptr (aligned at 0x8)\n            [0x80] (ID 0x4d) (kind 3) char * _IO_read_end (aligned at 0x8)\n            [0xc0] (ID 0x4d) (kind 3) char * _IO_read_base (aligned at 0x8)\n[...]\n     406: struct coff_link_hash_entry (size 0x60)\n        [0x0] (ID 0x406) (kind 6) struct coff_link_hash_entry (aligned at 0x8)\n            [0x0] (ID 0x2b3) (kind 6) struct bfd_link_hash_entry root (aligned at 0x8)\n                [0x0] (ID 0x1d6) (kind 6) struct bfd_hash_entry root (aligned at 0x8)\n                    [0x0] (ID 0x1d7) (kind 3) struct bfd_hash_entry * next (aligned at 0x8)\n                    [0x40] (ID 0x61) (kind 3) const char * string (aligned at 0x8)\n                    [0x80] (ID 0x1) (kind 1) long unsigned int hash:64 (aligned at 0x8, format 0x0, offset:bits 0x0:0x40)\n                [0xc0] (ID 0x397) (kind 8) enum bfd_link_hash_type  type:8 (aligned at 0x1, format 0x0, offset:bits 0x0:0x8)\n                [0xc8] (ID 0x1c7) (kind 1) unsigned int  non_ir_ref_regular:1 (aligned at 0x1, format 0x0, offset:bits 0x8:0x1)\n                [0xc9] (ID 0x1c8) (kind 1) unsigned int  non_ir_ref_dynamic:1 (aligned at 0x1, format 0x0, offset:bits 0x9:0x1)\n                [0xca] (ID 0x1c9) (kind 1) unsigned int  linker_def:1 (aligned at 0x1, format 0x0, offset:bits 0xa:0x1)\n                [0xcb] (ID 0x1ca) (kind 1) unsigned int  ldscript_def:1 (aligned at 0x1, format 0x0, offset:bits 0xb:0x1)\n                [0xcc] (ID 0x1cb) (kind 1) unsigned int  rel_from_abs:1 (aligned at 0x1, format 0x0, offset:bits 0xc:0x1)\n\n... to this:\n\n    0x4c: (kind 1) char (format 0x3) (size 0x1) (aligned at 0x1)\n    0x4d: (kind 3) char * (size 0x8) (aligned at 0x8) -> 0x4c: (kind 1) char (format 0x3) (size 0x1) (aligned at 0x1)\n    0x5a: (kind 6) struct _IO_FILE (size 0xd8) (aligned at 0x4)\n          [0x0] _flags: ID 0x3: (kind 1) int (format 0x1) (size 0x4) (aligned at 0x4)\n          [0x40] _IO_read_ptr: ID 0x4d: (kind 3) char * (size 0x8) (aligned at 0x8)\n          [0x80] _IO_read_end: ID 0x4d: (kind 3) char * (size 0x8) (aligned at 0x8)\n          [0xc0] _IO_read_base: ID 0x4d: (kind 3) char * (size 0x8) (aligned at 0x8)\n          [0x100] _IO_write_base: ID 0x4d: (kind 3) char * (size 0x8) (aligned at 0x8)\n    0x5b: (kind 10) __FILE (size 0xd8) (aligned at 0x4) -> 0x5a: (kind 6) struct _IO_FILE (size 0xd8) (aligned at 0x4)\n[...]\n    0x406: (kind 6) struct coff_link_hash_entry (size 0x60) (aligned at 0x8)\n           [0x0] root: ID 0x2b3: (kind 6) struct bfd_link_hash_entry (size 0x38) (aligned at 0x8)\n               [0x0] root: ID 0x1d6: (kind 6) struct bfd_hash_entry (size 0x18) (aligned at 0x8)\n                   [0x0] next: ID 0x1d7: (kind 3) struct bfd_hash_entry * (size 0x8) (aligned at 0x8)\n                   [0x40] string: ID 0x61: (kind 3) const char * (size 0x8) (aligned at 0x8)\n                   [0x80] hash: ID 0x1: (kind 1) long unsigned int (format 0x0) (size 0x8) (aligned at 0x8)\n               [0xc0] type: ID 0x397: (kind 8) enum bfd_link_hash_type (format 0x7f2e) (size 0x1) (aligned at 0x1)\n               [0xc8] non_ir_ref_regular: ID 0x1c7: (kind 1) unsigned int:1 [slice 0x8:0x1] (format 0x0) (size 0x1) (aligned at 0x1)\n               [0xc9] non_ir_ref_dynamic: ID 0x1c8: (kind 1) unsigned int:1 [slice 0x9:0x1] (format 0x0) (size 0x1) (aligned at 0x1)\n               [0xca] linker_def: ID 0x1c9: (kind 1) unsigned int:1 [slice 0xa:0x1] (format 0x0) (size 0x1) (aligned at 0x1)\n               [0xcb] ldscript_def: ID 0x1ca: (kind 1) unsigned int:1 [slice 0xb:0x1] (format 0x0) (size 0x1) (aligned at 0x1)\n               [0xcc] rel_from_abs: ID 0x1cb: (kind 1) unsigned int:1 [slice 0xc:0x1] (format 0x0) (size 0x1) (aligned at 0x1)\n[...]\n\nIn particular, indented subsections are only present for actual structs\nand unions, not forwards to them, and the structure itself doesn't add a\nspurious level of indentation; structure field names are easier to spot\n(at the cost of not making them look so much like C field declarations\nany more, but they weren't always shown in valid decl syntax even before\nthis change) the size, type kind, and alignment are shown for all types\nfor which they are meaningful; bitfield info is only shown for actual\nbitfields within structures and not ordinary integral fields; and type\nIDs are never omitted.  Type printing is in general much more consistent\nand there is much less duplicated code in the type dumper.\n\nThere is one user-visible effect outside the dumper: ctf_type_(a)name\nwas erroneously emitting a trailing space on the name of slice types,\neven though a slice of an int and an int with the corresponding encoding\nrepresent the same type and should have the same print form.  This\ntrailing space is now gone.\n\nld/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* testsuite/ld-ctf/array.d: Adjust for dumper changes.\n\t* testsuite/ld-ctf/conflicting-cycle-1.B-1.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-1.B-2.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-1.parent.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-2.A-1.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-2.A-2.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-2.parent.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-3.C-1.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-3.C-2.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-cycle-3.parent.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-enums.d: Likewise.\n\t* testsuite/ld-ctf/conflicting-typedefs.d: Likewise.\n\t* testsuite/ld-ctf/cross-tu-cyclic-conflicting.d: Likewise.\n\t* testsuite/ld-ctf/cross-tu-cyclic-nonconflicting.d: Likewise.\n\t* testsuite/ld-ctf/cross-tu-into-cycle.d: Likewise.\n\t* testsuite/ld-ctf/cross-tu-noncyclic.d: Likewise.\n\t* testsuite/ld-ctf/cycle-1.d: Likewise.\n\t* testsuite/ld-ctf/cycle-2.A.d: Likewise.\n\t* testsuite/ld-ctf/cycle-2.B.d: Likewise.\n\t* testsuite/ld-ctf/cycle-2.C.d: Likewise.\n\t* testsuite/ld-ctf/data-func-conflicted.d: Likewise.\n\t* testsuite/ld-ctf/diag-cttname-null.d: Likewise.\n\t* testsuite/ld-ctf/diag-cuname.d: Likewise.\n\t* testsuite/ld-ctf/diag-parlabel.d: Likewise.\n\t* testsuite/ld-ctf/diag-wrong-magic-number-mixed.d: Likewise.\n\t* testsuite/ld-ctf/forward.d: Likewise.\n\t* testsuite/ld-ctf/function.d: Likewise.\n\t* testsuite/ld-ctf/slice.d: Likewise.\n\t* testsuite/ld-ctf/super-sub-cycles.d: Likewise.\n\t* testsuite/ld-ctf/enums.c: New test.\n\t* testsuite/ld-ctf/enums.d: New test.\n\nlibctf/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-decl.c (ctf_decl_push): Exclude slices from the decl stack.\n\t* ctf-types.c (ctf_type_aname): No longer deal with slices here.\n\t* ctf-dump.c (ctf_dump_membstate_t) <cdm_toplevel_indent>: Constify.\n\t(CTF_FT_REFS): New.\n\t(CTF_FT_BITFIELD): Likewise.\n\t(CTF_FT_ID): Likewise.\n\t(ctf_dump_member): Do not do indentation here. Migrate the\n\ttype-printing parts of this into...\n\t(ctf_dump_format_type): ... here, to be shared by all type printers.\n\tGet the errno value for non-representable types right.  Do not print\n\tbitfield info for non-bitfields.  Improve the format and indentation\n\tof other type output.  Shuffle spacing around to make all indentation\n\teither 'width of column' or 4 chars.\n\t(ctf_dump_label): Pass CTF_FT_REFS to ctf_dump_format_type.\n\t(ctf_dump_objts): Likewise.  Spacing shuffle.\n\t(ctf_dump_var): Likewise.\n\t(type_hex_digits): Migrate down in the file, to above its new user.\n\t(ctf_dump_type): Indent here instead.  Pass CTF_FT_REFS to\n\tctf_dump_format_type. Don't trim off excess linefeeds now we no\n\tlonger generate them.  Dump enumerated types.",
    "tree": {
      "sha": "13187a0c347f828ecb44932fbeeedc52ccf72275",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/13187a0c347f828ecb44932fbeeedc52ccf72275"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/37002871ac2111eb3c88f44659c3c67d2fde1997",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37002871ac2111eb3c88f44659c3c67d2fde1997",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/37002871ac2111eb3c88f44659c3c67d2fde1997",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37002871ac2111eb3c88f44659c3c67d2fde1997/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963"
    }
  ],
  "stats": {
    "total": 769,
    "additions": 443,
    "deletions": 326
  },
  "files": [
    {
      "sha": "213aed02ecb91965ef2ea407182380a4950efb26",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -1,3 +1,37 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* testsuite/ld-ctf/array.d: Adjust for dumper changes.\n+\t* testsuite/ld-ctf/conflicting-cycle-1.B-1.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-1.B-2.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-1.parent.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-2.A-1.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-2.A-2.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-2.parent.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-3.C-1.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-3.C-2.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-cycle-3.parent.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-enums.d: Likewise.\n+\t* testsuite/ld-ctf/conflicting-typedefs.d: Likewise.\n+\t* testsuite/ld-ctf/cross-tu-cyclic-conflicting.d: Likewise.\n+\t* testsuite/ld-ctf/cross-tu-cyclic-nonconflicting.d: Likewise.\n+\t* testsuite/ld-ctf/cross-tu-into-cycle.d: Likewise.\n+\t* testsuite/ld-ctf/cross-tu-noncyclic.d: Likewise.\n+\t* testsuite/ld-ctf/cycle-1.d: Likewise.\n+\t* testsuite/ld-ctf/cycle-2.A.d: Likewise.\n+\t* testsuite/ld-ctf/cycle-2.B.d: Likewise.\n+\t* testsuite/ld-ctf/cycle-2.C.d: Likewise.\n+\t* testsuite/ld-ctf/data-func-conflicted.d: Likewise.\n+\t* testsuite/ld-ctf/diag-cttname-null.d: Likewise.\n+\t* testsuite/ld-ctf/diag-cuname.d: Likewise.\n+\t* testsuite/ld-ctf/diag-parlabel.d: Likewise.\n+\t* testsuite/ld-ctf/diag-wrong-magic-number-mixed.d: Likewise.\n+\t* testsuite/ld-ctf/forward.d: Likewise.\n+\t* testsuite/ld-ctf/function.d: Likewise.\n+\t* testsuite/ld-ctf/slice.d: Likewise.\n+\t* testsuite/ld-ctf/super-sub-cycles.d: Likewise.\n+\t* testsuite/ld-ctf/enums.c: New test.\n+\t* testsuite/ld-ctf/enums.d: New test.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/conflicting-cycle-1.parent.d: Adjust for dumper"
    },
    {
      "sha": "16375620c03c796e6d0a077e3bf7e51750552e51",
      "filename": "ld/testsuite/ld-ctf/array.d",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/array.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/array.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/array.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -20,16 +20,16 @@ Contents of CTF section .ctf:\n   Labels:\n \n   Data objects:\n-    digits -> 0x[0-9a-f]*: int \\[10\\] .*\n-    digits_names -> 0x[0-9a-f]*: char \\*\\[10\\] .*\n+    digits -> 0x[0-9a-f]*: \\(kind 4\\) int \\[10\\] .*\n+    digits_names -> 0x[0-9a-f]*: \\(kind 4\\) char \\*\\[10\\] .*\n \n   Function objects:\n \n   Variables:\n \n   Types:\n #...\n-     0x[0-9a-f]*: .*\\[10\\] .*\n+    0x[0-9a-f]*: \\(kind 4\\) .*\\[10\\] \\(size .*\n #...\n-     0x[0-9a-f]*: .*\\[10\\] .*\n+    0x[0-9a-f]*: \\(kind 4\\) .*\\[10\\] \\(size .*\n #..."
    },
    {
      "sha": "27273c5386fb4e36dc2e55228b0ded439c21d518",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-1.B-1.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-1.B-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-1.B-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-1.B-1.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -30,12 +30,11 @@ CTF archive member: .*/B.c:\n   Function objects:\n \n   Variables:\n-    b ->  0x80000001: struct B \\(size 0x[0-9]*\\)\n+    b -> 0x80000001: \\(kind 6\\) struct B \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Types:\n-     0x8[0-9a-f]*: struct B .*\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 6\\) struct B \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct C \\* c \\(.*\n+    0x8[0-9a-f]*: \\(kind 6\\) struct B .*\n+        *\\[0x0\\] c: ID 0x[0-9a-f]*: \\(kind 3\\) struct C \\* \\(.*\n \n   Strings:\n #..."
    },
    {
      "sha": "28a92f4a73edd8744a31d6ed130e4d193ee09ff3",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-1.B-2.d",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-1.B-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-1.B-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-1.B-2.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -30,13 +30,12 @@ CTF archive member: .*/B-2.c:\n   Function objects:\n \n   Variables:\n-    b ->  0x80000001: struct B \\(.*\n+    b -> 0x80000001: \\(kind 6\\) struct B \\(.*\n \n   Types:\n-     0x8[0-9a-f]*: struct B \\(.*\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 6\\) struct B \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct C \\* c \\(.*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int wombat:32 \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n+    0x8[0-9a-f]*: \\(kind 6\\) struct B \\(.*\n+        *\\[0x0\\] c: ID 0x[0-9a-f]*: \\(kind 3\\) struct C \\* \\(.*\n+        *\\[0x[0-9a-f]*\\] wombat: ID 0x[0-9a-f]*: \\(kind 1\\) int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n #..."
    },
    {
      "sha": "a9755e88db76e69310ff8ee0f6481b97b3d8a29f",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -29,8 +29,7 @@ Contents of CTF section .ctf:\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct B\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct B\n+    0x[0-9a-f]*: \\(kind 9\\) struct B\n #...\n CTF archive member: .*:\n #..."
    },
    {
      "sha": "33ed6e843ce1c06953675bd08f2e5e2041a79c26",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-2.A-1.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-2.A-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-2.A-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-2.A-1.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -29,12 +29,11 @@ CTF archive member: .*/A.c:\n   Function objects:\n \n   Variables:\n-    a ->  0x80000001: struct A \\(size 0x[0-9a-f]*\\)\n+    a -> 0x80000001: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Types:\n-     0x8[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 6\\) struct A \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(aligned at 0x[0-9a-f]*\\)\n+    0x8[0-9a-f]*: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n     0x0: "
    },
    {
      "sha": "a98b66c267e750f4303c9847ca26fdd2c1404d1a",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-2.A-2.d",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-2.A-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-2.A-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-2.A-2.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -29,13 +29,12 @@ CTF archive member: .*/A-2.c:\n   Function objects:\n \n   Variables:\n-    a ->  0x80000001: struct A \\(size 0x[0-9a-f]*\\)\n+    a -> 0x80000001: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Types:\n-     0x8[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 6\\) struct A \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int wombat:32 \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n+    0x8[0-9a-f]*: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x[0-9a-f]*\\] wombat: ID 0x[0-9a-f]*: \\(kind 1\\) int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n     0x0: "
    },
    {
      "sha": "87ec41d69e4fbfb1c5468e4dd12964390a5e85ce",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-2.parent.d",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-2.parent.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-2.parent.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-2.parent.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -28,13 +28,12 @@ Contents of CTF section .ctf:\n   Function objects:\n \n   Variables:\n-    cycle_1 ->  0x[0-9a-f]*: struct cycle_1 \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: struct cycle_1 \\(size 0x[0-9a-f]*\\)\n+    cycle_1 -> 0x[0-9a-f]*: \\(kind 3\\) struct cycle_1 \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: \\(kind 6\\) struct cycle_1 \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Types:\n #...\n-     0x[0-9a-f]*: struct cycle_1 \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct cycle_1 \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* a \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct cycle_1 \\* next \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 6\\) struct cycle_1 \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x[0-9a-f]*\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x[0-9a-f]*\\] next: ID 0x[0-9a-f]*: \\(kind 3\\) struct cycle_1 \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #..."
    },
    {
      "sha": "ac750a776dbe110dd1cfc712d2475830b6b741cc",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-3.C-1.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-3.C-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-3.C-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-3.C-1.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -28,12 +28,11 @@ CTF archive member: .*/C.c:\n   Function objects:\n \n   Variables:\n-    c ->  0x80000001: struct C \\(size 0x[0-9a-f]*\\)\n+    c -> 0x80000001: \\(kind 6\\) struct C \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Types:\n-     0x8[0-9a-f]*: struct C \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 6\\) struct C \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* a \\(aligned at 0x[0-9a-f]*\\)\n+    0x80000001: \\(kind 6\\) struct C \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n     0x0: "
    },
    {
      "sha": "603432f05ad0f90f82f825d253094606c5751bc7",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-3.C-2.d",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-3.C-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-3.C-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-3.C-2.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -28,13 +28,12 @@ CTF archive member: .*/C-2.c:\n   Function objects:\n \n   Variables:\n-    c ->  0x80000001: struct C \\(size 0x[0-9a-f]*\\)\n+    c -> 0x80000001: \\(kind 6\\) struct C \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Types:\n-     0x8[0-9a-f]*: struct C \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 6\\) struct C \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* a \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int wombat:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n+    0x80000001: \\(kind 6\\) struct C \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+                \\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+                \\[0x[0-9a-f]*\\] wombat: ID 0x[0-9a-f]*: \\(kind 1\\) int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n     0x0: "
    },
    {
      "sha": "24f080004cdd59580ff027c5d824cc321730eb7b",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-3.parent.d",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-3.parent.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-cycle-3.parent.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-3.parent.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -30,8 +30,7 @@ Contents of CTF section .ctf:\n \n   Types:\n #...\n-     0x[0-9a-f]*: int \\[0x0:0x[0-9a-f]*\\] \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 1\\) int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "f90aaef44b1e6020bcdedbb204fc8015d24bca7a",
      "filename": "ld/testsuite/ld-ctf/conflicting-enums.d",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-enums.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-enums.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-enums.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -20,16 +20,28 @@ Contents of CTF section .ctf:\n CTF archive member: .*enum.*\\.c:\n #...\n   Types:\n-     0x8[0-9a-f]*: enum day_of_the_week \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 8\\) enum day_of_the_week \\(aligned at 0x[0-9a-f]*\\)\n+    0x80000001: \\(kind 8\\) enum day_of_the_week \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+                Sunday: 0\n+                Monday: 1\n+                Tuesday: 2\n+                Wednesday: 3\n+                Thursday: 4\n+                Friday: 5\n+                Saturday: 6\n \n   Strings:\n #...\n CTF archive member: .*enum.*\\.c:\n #...\n   Types:\n-     0x8[0-9a-f]*: enum day_of_the_week \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x8[0-9a-f]*\\) \\(kind 8\\) enum day_of_the_week \\(aligned at 0x[0-9a-f]*\\)\n+    0x80000001: \\(kind 8\\) enum day_of_the_week \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+                Monday: 0\n+                Tuesday: 1\n+                Wednesday: 2\n+                Thursday: 3\n+                Friday: 4\n+                Saturday: 5\n+                Sunday: 6\n \n   Strings:\n #..."
    },
    {
      "sha": "72082ba553b26b090ed0ef3ec3827a0369900a27",
      "filename": "ld/testsuite/ld-ctf/conflicting-typedefs.d",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-typedefs.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/conflicting-typedefs.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-typedefs.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -14,20 +14,16 @@ Contents of CTF section .ctf:\n     Version: 4 \\(CTF_VERSION_3\\)\n #...\n   Types:\n-     0x1: .*int .*\n-          .*\n-     0x[0-9]:.*int .*\n-          .*\n-     0x[0-9]: word .*\n-           *\\[0x0\\] \\(ID 0x[0-9]\\) \\(kind 10\\) word \\(aligned at 0x[48]\\)\n+    0x1: .*int .*\n+    0x[0-9]:.*int .*\n+    0x[0-9]: \\(kind 10\\) word .* -> 0x[0-9]: \\(kind 1\\) .*int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n #...\n CTF archive member: .*typedef.*\\.c:\n #...\n   Types:\n-     0x80000001: word .*\n-           *\\[0x0\\] \\(ID 0x80000001\\) \\(kind 10\\) word \\(aligned at 0x[48]\\)\n+    0x80000001: \\(kind 10\\) word .* -> 0x[0-9]: \\(kind 1\\) .*int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n \n   Strings:\n #..."
    },
    {
      "sha": "eaf8e79c8adfe24d68c8207ad52b80d8fd6ba6db",
      "filename": "ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d",
      "status": "modified",
      "additions": 12,
      "deletions": 19,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -14,20 +14,15 @@ Contents of CTF section \\.ctf:\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: long int \\[0x0:0x[0-9a-f]*\\] \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) long int:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 1\\) long int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n-     0x[0-9a-f]*: struct B .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct B .*\n #...\n-     0x[0-9a-f]*: int \\[0x0:0x[0-9a-f]*\\] \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 1\\) int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n-     0x[0-9a-f]*: struct A\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct A\n+    0x[0-9a-f]*: \\(kind 9\\) struct A\n #...\n-     0x[0-9a-f]*: struct C .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct C .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct C .*\n #...\n \n   Strings:\n@@ -36,22 +31,20 @@ Contents of CTF section \\.ctf:\n CTF archive member: .*/ld/testsuite/ld-ctf/cross-tu-cyclic-1\\.c:\n #...\n   Types:\n-     0x80.*[0-9a-f]*: struct A .*\n-           *\\[0x0\\] \\(ID 0x80.*\\) \\(kind 6\\) struct A .*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) long int a:.*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* foo .*\n+    0x80[0-9a-f]*: \\(kind 6\\) struct A .*\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 1\\) long int .*\n+        *\\[0x[0-9a-f]*\\] foo: ID 0x[0-9a-f]*\\: \\(kind 3\\) struct B \\* .*\n \n   Strings:\n #...\n \n CTF archive member: .*/ld/testsuite/ld-ctf/cross-tu-cyclic-2\\.c:\n #...\n   Types:\n-     0x80.*[0-9a-f]*: struct A .*\n-           *\\[0x0\\] \\(ID 0x80.*\\) \\(kind 6\\) struct A .*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) long int a:.*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* foo .*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct C \\* bar .*\n+    0x80[0-9a-f]*: \\(kind 6\\) struct A .*\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 1\\) long int .*\n+        *\\[0x[0-9a-f]*\\] foo: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* .*\n+        *\\[0x[0-9a-f]*\\] bar: ID 0x[0-9a-f]*: \\(kind 3\\) struct C \\* .*\n \n   Strings:\n #..."
    },
    {
      "sha": "1a714846d329b9a199791d0824c383e0214f5155",
      "filename": "ld/testsuite/ld-ctf/cross-tu-cyclic-nonconflicting.d",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-cyclic-nonconflicting.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-cyclic-nonconflicting.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cross-tu-cyclic-nonconflicting.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -29,22 +29,16 @@ Contents of CTF section .ctf:\n \n   Types:\n #...\n-     0x[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]\\) \\(kind 6\\) struct A \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) long int a:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* foo \\(aligned at 0x[0-9a-f]*\\)\n-     0x[0-9a-f]*: long int .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) long int:[0-9].*\n-     0x[0-9a-f]*: struct B \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B \\(aligned at 0x[0-9a-f]*\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int foo:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* bar \\(aligned at 0x[0-9a-f]*\\)\n-     0x[0-9a-f]*: struct B \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: struct B \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* \\(aligned at 0x[0-9a-f]*\\)\n-     0x[0-9a-f]*: struct A \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* \\(aligned at 0x[0-9a-f]*\\)\n-     0x[0-9a-f]*: int .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int:.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 1\\) long int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x[0-9a-f]*\\] foo: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 1\\) long int .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct B \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] foo: ID 0x[0-9a-f]*: \\(kind 1\\) int \\(format 0x1\\) \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x[0-9a-f]*\\] bar: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: \\(kind 6\\) struct B \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 1\\) int .*\n \n   Strings:\n #..."
    },
    {
      "sha": "7f3aebc54b7271695654ab81b1e75ee03d2c9ffc",
      "filename": "ld/testsuite/ld-ctf/cross-tu-into-cycle.d",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-into-cycle.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-into-cycle.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cross-tu-into-cycle.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -27,20 +27,16 @@ Contents of CTF section .ctf:\n   Function objects:\n \n   Variables:\n-    a ->  .*\n-    conflicty ->  .*\n+    a -> .*\n+    conflicty -> .*\n \n   Types:\n-     0x[0-9a-f]*: struct A .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct A .*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* foo .*\n-     0x[0-9a-f]*: struct B .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B .*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* next .*\n-     0x[0-9a-f]*: struct B \\* .*\n-           *\\[0x0\\] .*\n-     0x[0-9a-f]*: struct A \\* .*\n-           *\\[0x0\\] .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct A .*\n+        *\\[0x0\\] foo: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct B .*\n+        *\\[0x0\\] next: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* .*\n+    0x[0-9a-f]*: \\(kind 3\\) struct B \\* .*\n+    0x[0-9a-f]*: \\(kind 3\\) struct A \\* .*\n \n   Strings:\n #...\n@@ -56,7 +52,7 @@ CTF archive member: .*/ld/testsuite/ld-ctf/cross-tu-cyclic-[34].c:\n   Function objects:\n \n   Variables:\n-    conflicty ->  .*\n+    conflicty -> .*\n \n   Types:\n "
    },
    {
      "sha": "e8fc7a49aa54c6ec63ad3f2f0c0acc8eca57b18b",
      "filename": "ld/testsuite/ld-ctf/cross-tu-noncyclic.d",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-noncyclic.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cross-tu-noncyclic.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cross-tu-noncyclic.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -29,18 +29,14 @@ Contents of CTF section .ctf:\n \n   Types:\n #...\n-     0x[0-9a-f]*: struct A .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct A .*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) long int a:[0-9]* .*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* foo .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct A .*\n+       *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 1\\) long int .*\n+       *\\[0x[0-9a-f]*\\] foo: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* .*\n #...\n-     0x[0-9a-f]*: struct B .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B .*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int foo:[0-9]* .*\n+    0x[0-9a-f]*: \\(kind 6\\) struct B .*\n+       *\\[0x0\\] foo: ID 0x[0-9a-f]*: \\(kind 1\\) int .*\n #...\n-     0x[0-9a-f]*: struct B \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: struct B .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* .*\n+    0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: \\(kind 6\\) struct B .*\n #...\n-     0x[0-9a-f]*: struct A \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: struct A .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* .*\n+    0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> 0x[0-9a-f]*: \\(kind 6\\) struct A .*\n #..."
    },
    {
      "sha": "e64608e757112e59f6eb1cf4c4b5d986f6e1e219",
      "filename": "ld/testsuite/ld-ctf/cycle-1.d",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cycle-1.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -28,9 +28,8 @@ Contents of CTF section .ctf:\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct cycle_1 \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct cycle_1 \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* a \\(.*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct cycle_1 \\* next \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct cycle_1 \\(.*\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(.*\n+        *\\[0x[0-9a-f]*\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n+        *\\[0x[0-9a-f]*\\] next: ID 0x[0-9a-f]*: \\(kind 3\\) struct cycle_1 \\* \\(.*\n #..."
    },
    {
      "sha": "39d48c14c4ba6da61b493bb400a75d258aab0f86",
      "filename": "ld/testsuite/ld-ctf/cycle-2.A.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-2.A.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-2.A.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cycle-2.A.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -25,13 +25,12 @@ Contents of CTF section .ctf:\n \n   Variables:\n #...\n-    a ->  0x[0-9a-f]*: struct A \\(.*\n+    a -> 0x[0-9a-f]*: \\(kind 6\\) struct A \\(.*\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct A \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct A \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct A \\(.*\n+        *\\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "4babd97bffe58aaebb36262c3453865d6bb5e7cf",
      "filename": "ld/testsuite/ld-ctf/cycle-2.B.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-2.B.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-2.B.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cycle-2.B.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -25,13 +25,12 @@ Contents of CTF section .ctf:\n \n   Variables:\n #...\n-    b ->  0x[0-9a-f]*: struct B \\(.*\n+    b -> 0x[0-9a-f]*: \\(kind 6\\) struct B \\(.*\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct B \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct C \\* c \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct B \\(.*\n+        *\\[0x0\\] c: ID 0x[0-9a-f]*: \\(kind 3\\) struct C \\* \\(.*\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "757483ca7e2db267620f9cbf5455950ae881eb80",
      "filename": "ld/testsuite/ld-ctf/cycle-2.C.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-2.C.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/cycle-2.C.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cycle-2.C.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -25,13 +25,12 @@ Contents of CTF section .ctf:\n \n   Variables:\n #...\n-    c ->  0x[0-9a-f]*: struct C \\(.*\n+    c -> 0x[0-9a-f]*: \\(kind 6\\) struct C \\(.*\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct C \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct C \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* a \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct C \\(.*\n+        *\\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(.*\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "6b1e9145a025dd96ff8aad1beb07914ffbdc02c8",
      "filename": "ld/testsuite/ld-ctf/data-func-conflicted.d",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/data-func-conflicted.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/data-func-conflicted.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/data-func-conflicted.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -20,16 +20,16 @@ Contents of CTF section \\.ctf:\n     String section:\t.*\n #...\n   Data objects:\n-    bar -> 0x[0-9a-f]*: struct var_3 \\(size 0x[0-9a-f]*\\)\n-    var_1 -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_666 -> 0x[0-9a-f]*: foo_t \\* \\(size 0x[0-9a-f]*\\) -> .*\n+    bar -> 0x[0-9a-f]*: \\(kind 6\\) struct var_3 \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+    var_1 -> 0x[0-9a-f]*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_666 -> 0x[0-9a-f]*: \\(kind 3\\) foo_t \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n \n   Function objects:\n-    func_[0-9]* -> 0x[0-9a-f]*: void \\*\\(\\*\\) \\(const char \\*restrict, int \\(\\*\\)\\(\\*\\) \\(const char \\*\\)\\)\n+    func_[0-9]* -> 0x[0-9a-f]*: \\(kind 5\\) void \\*\\(\\*\\) \\(const char \\*restrict, int \\(\\*\\)\\(\\*\\) \\(const char \\*\\)\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n   Types:\n #...\n-   .*: struct var_3 .*\n+    .*: \\(kind 6\\) struct var_3 .*\n #...\n CTF archive member: .*/data-func-1\\.c:\n \n@@ -46,18 +46,19 @@ CTF archive member: .*/data-func-1\\.c:\n   Labels:\n \n   Data objects:\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n-    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x80000001*: \\(kind 10\\) foo_t \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> .*\n #...\n   Function objects:\n \n   Variables:\n \n   Types:\n-     0x80000001: foo_t .* -> .* int .*\n+    0x80000001: \\(kind 10\\) foo_t .* -> .* int .*\n #..."
    },
    {
      "sha": "d1ca0b10c15548ab6a197cd841c56b540ed64bb0",
      "filename": "ld/testsuite/ld-ctf/diag-cttname-null.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-cttname-null.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-cttname-null.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-cttname-null.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -13,11 +13,10 @@ Contents of CTF section .ctf:\n     Version: 4 \\(CTF_VERSION_3\\)\n #...\n   Data objects:\n-    a -> 0x[0-9a-f]*: struct  \\(size 0x[0-9a-f]*\\)\n+    a -> 0x[0-9a-f]*: \\(kind 6\\) struct  \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct  \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct  \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct  \\(.*\n+        *\\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n #..."
    },
    {
      "sha": "e4d49267a2a55ee20f676d83bea5c7bb49076243",
      "filename": "ld/testsuite/ld-ctf/diag-cuname.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-cuname.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-cuname.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-cuname.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -21,17 +21,16 @@ Contents of CTF section .ctf:\n   Labels:\n \n   Data objects:\n-    a -> 0x[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n+    a -> 0x[0-9a-f]*: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n   Function objects:\n \n   Variables:\n \n   Types:\n #...\n-     0x[0-9a-f]*: struct A \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct A \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct A \\(.*\n+        *\\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "bba161cf3093a4d974eb76b0518f3d0a2adaeadf",
      "filename": "ld/testsuite/ld-ctf/diag-parlabel.d",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-parlabel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-parlabel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-parlabel.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -20,17 +20,16 @@ Contents of CTF section .ctf:\n   Labels:\n \n   Data objects:\n-    a -> 0x[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n+    a -> 0x[0-9a-f]*: \\(kind 6\\) struct A \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n   Function objects:\n \n   Variables:\n \n   Types:\n #...\n-     0x[0-9a-f]*: struct A \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct A \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n+    0x[0-9a-f]*: \\(kind 6\\) struct A \\(.*\n+        *\\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "668fa15bf49e26a79a6fc6cb1b225d6e2d81b185",
      "filename": "ld/testsuite/ld-ctf/diag-wrong-magic-number-mixed.d",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-wrong-magic-number-mixed.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/diag-wrong-magic-number-mixed.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-wrong-magic-number-mixed.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -29,9 +29,9 @@ Contents of CTF section .ctf:\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct B \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct C \\* c \\(.*\n+    0x[0-9a-f]*: struct B \\(.*\n+          *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B \\(.*\n+              *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct C \\* c \\(.*\n #...\n   Strings:\n     0x0: "
    },
    {
      "sha": "b7c55870cd31fc85c0e2cc3dd9002c55601c981e",
      "filename": "ld/testsuite/ld-ctf/enums.c",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/enums.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/enums.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/enums.c?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -0,0 +1,3 @@\n+enum nine_els { NINE_ONE, NINE_TWO, NINE_THREE = 256, NINE_FOUR, NINE_FIVE, NINE_SIX, NINE_SEVEN, NINE_EIGHT, NINE_NINE } nine;\n+enum ten_els { TEN_ONE = 10, TEN_TWO, TEN_THREE = -256, TEN_FOUR, TEN_FIVE, TEN_SIX, TEN_SEVEN, TEN_EIGHT, TEN_NINE, TEN_TEN } ten;\n+enum eleven_els { ELEVEN_ONE = 10, ELEVEN_TWO, ELEVEN_THREE = -256, ELEVEN_FOUR, ELEVEN_FIVE, ELEVEN_SIX, ELEVEN_SEVEN, ELEVEN_EIGHT, ELEVEN_NINE, ELEVEN_TEN, ELEVEN_ELEVEN } eleven;"
    },
    {
      "sha": "f1cf70de5af0c7e2c441dcd138e1c661b36c8eaa",
      "filename": "ld/testsuite/ld-ctf/enums.d",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/enums.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/enums.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/enums.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -0,0 +1,54 @@\n+#as:\n+#source: enums.c\n+#objdump: --ctf=.ctf\n+#ld: -shared\n+#name: Enumerated types\n+\n+.*: +file format .*\n+\n+Contents of CTF section .ctf:\n+\n+  Header:\n+    Magic number: 0xdff2\n+    Version: 4 \\(CTF_VERSION_3\\)\n+#...\n+    Compilation unit name: .*enums.c\n+#...\n+    Type section:\t.*\\(0x114 bytes\\)\n+#...\n+  Types:\n+    0x1: \\(kind 8\\) enum nine_els \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+         NINE_ONE: 0\n+         NINE_TWO: 1\n+         NINE_THREE: 256\n+         NINE_FOUR: 257\n+         NINE_FIVE: 258\n+         NINE_SIX: 259\n+         NINE_SEVEN: 260\n+         NINE_EIGHT: 261\n+         NINE_NINE: 262\n+    0x2: \\(kind 8\\) enum ten_els \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+         TEN_ONE: 10\n+         TEN_TWO: 11\n+         TEN_THREE: -256\n+         TEN_FOUR: -255\n+         TEN_FIVE: -254\n+         TEN_SIX: -253\n+         TEN_SEVEN: -252\n+         TEN_EIGHT: -251\n+         TEN_NINE: -250\n+         TEN_TEN: -249\n+    0x3: \\(kind 8\\) enum eleven_els \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+         ELEVEN_ONE: 10\n+         ELEVEN_TWO: 11\n+         ELEVEN_THREE: -256\n+         ELEVEN_FOUR: -255\n+         ELEVEN_FIVE: -254\n+         \\.\\.\\.\n+         ELEVEN_SEVEN: -252\n+         ELEVEN_EIGHT: -251\n+         ELEVEN_NINE: -250\n+         ELEVEN_TEN: -249\n+         ELEVEN_ELEVEN: -248\n+\n+#..."
    },
    {
      "sha": "bb929612125a8a3b15e744647f4549bcf6d34d6e",
      "filename": "ld/testsuite/ld-ctf/forward.d",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/forward.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/forward.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/forward.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -16,8 +16,6 @@ Contents of CTF section .ctf:\n #...\n   Types:\n \n-     0x[0-9a-f]: struct foo\n-          *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct foo\n-     0x[0-9a-f]: struct foo \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]: struct foo\n-          *\\[0x0\\] \\(ID 0x[0-9a-f]\\) \\(kind 3\\) struct foo \\* \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]: \\(kind 9\\) struct foo\n+    0x[0-9a-f]: \\(kind 3\\) struct foo \\* \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\) -> 0x[0-9a-f]: \\(kind 9\\) struct foo\n #..."
    },
    {
      "sha": "1584bdbedfd6df9cefca1179bf6c42c5093ee663",
      "filename": "ld/testsuite/ld-ctf/function.d",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/function.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/function.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/function.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -18,10 +18,9 @@ Contents of CTF section .ctf:\n     String section:\t.*\n #...\n   Function objects:\n-    foo -> 0x[0-9a-f]*: int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\)\n+    foo -> 0x[0-9a-f]*: \\(kind 5\\) int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\) \\(aligned at 0x[0-9a-f]*\\)\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 5\\) int \\(\\*\\) \\(char, int[0-9]*, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\) \\(aligned at 0x[0-9a-f]*\\)\n+    0x[0-9a-f]*: \\(kind 5\\) int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\) \\(aligned at 0x[0-9a-f]*\\)\n #..."
    },
    {
      "sha": "d1167828f475767dd13bdc6e1df08782c47d8c03",
      "filename": "ld/testsuite/ld-ctf/slice.d",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/slice.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/slice.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/slice.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -19,14 +19,14 @@ Contents of CTF section .ctf:\n     String section:\t.*\n #...\n   Data objects:\n-    slices -> 0x[0-9a-f]*: struct slices \\(size 0x[0-9a-f]*\\)\n+    slices -> 0x[0-9a-f]*: \\(kind 6\\) struct slices \\(size 0x[0-9a-f]*\\) \\(aligned at 0x1*\\)\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct slices \\(size 0x[0-9a-f]*\\)\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct slices \\(aligned at 0x1\\)\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int  one:1 \\(aligned at 0x1, format 0x1, offset:bits 0x0:0x1\\)\n-               *\\[0x1\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int  two:2 \\(aligned at 0x1, format 0x1, offset:bits 0x1:0x2\\)\n-               *\\[0x3\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int  six:6 \\(aligned at 0x1, format 0x1, offset:bits 0x3:0x6\\)\n-               *\\[0x9\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int  ten:10 \\(aligned at 0x2, format 0x1, offset:bits 0x9:0xa\\)\n+    0x[0-9a-f]*: \\(kind 6\\) struct slices \\(size 0x[0-9a-f]*\\) \\(aligned at 0x[0-9a-f]*\\)\n+        *\\[0x0\\] one: ID 0x[0-9a-f]*: \\(kind 1\\) int:1 \\[slice 0x0:0x1\\] \\(format 0x1\\) \\(size 0x1\\) \\(aligned at 0x1\\)\n+        *\\[0x1\\] two: ID 0x[0-9a-f]*: \\(kind 1\\) int:2 \\[slice 0x1:0x2\\] \\(format 0x1\\) \\(size 0x1\\) \\(aligned at 0x1\\)\n+        *\\[0x3\\] six: ID 0x[0-9a-f]*: \\(kind 1\\) int:6 \\[slice 0x3:0x6\\] \\(format 0x1\\) \\(size 0x1\\) \\(aligned at 0x1\\)\n+        *\\[0x9\\] ten: ID 0x[0-9a-f]*: \\(kind 1\\) int:10 \\[slice 0x9:0xa\\] \\(format 0x1\\) \\(size 0x2\\) \\(aligned at 0x2\\)\n+\n #..."
    },
    {
      "sha": "67fa358bc542c9aadbcb5b001b97fb8d67bed238",
      "filename": "ld/testsuite/ld-ctf/super-sub-cycles.d",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/super-sub-cycles.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/ld/testsuite/ld-ctf/super-sub-cycles.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/super-sub-cycles.d?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -18,18 +18,17 @@ Contents of CTF section .ctf:\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct A \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct A \\(.*\n-               *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct B b \\(.*\n-                   *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct C c \\(.*\n-                       *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct A \\* a \\(.*\n-                       *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct D d \\(.*\n-                           *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n-                   *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct D d \\(.*\n-                       *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct B \\* b \\(.*\n-               *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct X x \\(.*\n-                   *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct Y y \\(.*\n-                       *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct Z z \\(.*\n-                           *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct Y \\* y \\(.*\n-                           *\\[0x[0-9a-f]*\\] \\(ID 0x[0-9a-f]*\\) \\(kind 3\\) struct D \\* d \\(.*\n+    0x[0-9a-f]: \\(kind 6\\) struct A \\(.*\n+         \\[0x0\\] b: ID 0x[0-9a-f]*: \\(kind 6\\) struct B \\(.*\n+             \\[0x0\\] c: ID 0x[0-9a-f]*: \\(kind 6\\) struct C \\(.*\n+                 \\[0x0\\] a: ID 0x[0-9a-f]*: \\(kind 3\\) struct A \\* \\(.*\n+                 \\[0x[0-9a-f]*\\] d: ID 0x[0-9a-f]*: \\(kind 6\\) struct D \\(.*\n+                     \\[0x[0-9a-f]*\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n+             \\[0x[0-9a-f]*\\] d: ID 0x[0-9a-f]*: \\(kind 6\\) struct D \\(.*\n+                 \\[0x[0-9a-f]*\\] b: ID 0x[0-9a-f]*: \\(kind 3\\) struct B \\* \\(.*\n+         \\[0x[0-9a-f]*\\] x: ID 0x[0-9a-f]*: \\(kind 6\\) struct X \\(.*\n+             \\[0x[0-9a-f]*\\] y: ID 0x[0-9a-f]*: \\(kind 6\\) struct Y \\(.*\n+                 \\[0x[0-9a-f]*\\] z: ID 0x[0-9a-f]*: \\(kind 6\\) struct Z \\(.*\n+                     \\[0x[0-9a-f]*\\] y: ID 0x[0-9a-f]*: \\(kind 3\\) struct Y \\* \\(.*\n+                     \\[0x[0-9a-f]*\\] d: ID 0x[0-9a-f]*: \\(kind 3\\) struct D \\* \\(.*\n #..."
    },
    {
      "sha": "8ba75f32e1f44c13da36a450da9893ca87348fa8",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -1,3 +1,26 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-decl.c (ctf_decl_push): Exclude slices from the decl stack.\n+\t* ctf-types.c (ctf_type_aname): No longer deal with slices here.\n+\t* ctf-dump.c (ctf_dump_membstate_t) <cdm_toplevel_indent>: Constify.\n+\t(CTF_FT_REFS): New.\n+\t(CTF_FT_BITFIELD): Likewise.\n+\t(CTF_FT_ID): Likewise.\n+\t(ctf_dump_member): Do not do indentation here. Migrate the\n+\ttype-printing parts of this into...\n+\t(ctf_dump_format_type): ... here, to be shared by all type printers.\n+\tGet the errno value for non-representable types right.  Do not print\n+\tbitfield info for non-bitfields.  Improve the format and indentation\n+\tof other type output.  Shuffle spacing around to make all indentation\n+\teither 'width of column' or 4 chars.\n+\t(ctf_dump_label): Pass CTF_FT_REFS to ctf_dump_format_type.\n+\t(ctf_dump_objts): Likewise.  Spacing shuffle.\n+\t(ctf_dump_var): Likewise.\n+\t(type_hex_digits): Migrate down in the file, to above its new user.\n+\t(ctf_dump_type): Indent here instead.  Pass CTF_FT_REFS to\n+\tctf_dump_format_type. Don't trim off excess linefeeds now we no\n+\tlonger generate them.  Dump enumerated types.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-types.c (ctf_type_resolve): Improve comment."
    },
    {
      "sha": "269eca42a729f88f0f18023b8cff86764f3a3851",
      "filename": "libctf/ctf-decl.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ctf-decl.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ctf-decl.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-decl.c?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -117,9 +117,10 @@ ctf_decl_push (ctf_decl_t *cd, ctf_dict_t *fp, ctf_id_t type)\n       break;\n \n     case CTF_K_SLICE:\n+      /* Slices themselves have no print representation and should not appear in\n+\t the decl stack.  */\n       ctf_decl_push (cd, fp, ctf_type_reference (fp, type));\n-      prec = CTF_PREC_BASE;\n-      break;\n+      return;\n \n     case CTF_K_VOLATILE:\n     case CTF_K_CONST:"
    },
    {
      "sha": "758d28d76d58a816292b5aafc35b97c15fc08bbc",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 173,
      "deletions": 135,
      "changes": 308,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -47,7 +47,7 @@ typedef struct ctf_dump_membstate\n {\n   char **cdm_str;\n   ctf_dict_t *cdm_fp;\n-  char *cdm_toplevel_indent;\n+  const char *cdm_toplevel_indent;\n } ctf_dump_membstate_t;\n \n static int\n@@ -80,23 +80,29 @@ ctf_dump_free (ctf_dump_state_t *state)\n     }\n }\n \n-/* Return a dump for a single type, without member info: but do show the\n-   type's references.  */\n+/* Return a dump for a single type, without member info: but do optionally show\n+   the type's references.  */\n+\n+#define CTF_FT_REFS     0x2 \t/* Print referenced types.  */\n+#define CTF_FT_BITFIELD 0x4\t/* Print :BITS if a bitfield.  */\n+#define CTF_FT_ID       0x8\t/* Print \"ID: \" in front of type IDs.  */\n \n static char *\n ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n {\n   ctf_id_t new_id;\n   char *str = NULL, *bit = NULL, *buf = NULL;\n \n+  ctf_set_errno (fp, 0);\n   new_id = id;\n   do\n     {\n-      ctf_encoding_t enc;\n+      ctf_encoding_t ep;\n       ctf_arinfo_t ar;\n       int kind, unsliced_kind;\n       const char *nonroot_leader = \"\";\n       const char *nonroot_trailer = \"\";\n+      const char *idstr = \"\";\n \n       id = new_id;\n       if (flag == CTF_ADD_NONROOT)\n@@ -110,15 +116,18 @@ ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n \t{\n \t  if (id == 0 || ctf_errno (fp) == ECTF_NONREPRESENTABLE)\n \t    {\n+\t      ctf_set_errno (fp, ECTF_NONREPRESENTABLE);\n \t      str = str_append (str, \" (type not represented in CTF)\");\n-\t      ctf_set_errno (fp, ECTF_NOTREF);\n-\t      break;\n+\t      return str;\n \t    }\n \n \t  goto err;\n \t}\n \n-      if (asprintf (&bit, \" %s0x%lx: \", nonroot_leader, id) < 0)\n+      if (flag & CTF_FT_ID)\n+\tidstr = \"ID \";\n+      if (asprintf (&bit, \"%s%s0x%lx: (kind %i) \", nonroot_leader, idstr,\n+\t\t    id, ctf_type_kind (fp, id)) < 0)\n \tgoto oom;\n       str = str_append (str, bit);\n       free (bit);\n@@ -129,37 +138,74 @@ ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n \n       free (buf);\n       buf = NULL;\n+\n       unsliced_kind = ctf_type_kind_unsliced (fp, id);\n       kind = ctf_type_kind (fp, id);\n \n-      /* Slices get a different print representation.  */\n-      if (unsliced_kind == CTF_K_SLICE)\n+      if (ctf_type_encoding (fp, id, &ep) == 0)\n \t{\n-\t  ctf_type_encoding (fp, id, &enc);\n-\t  if (asprintf (&bit, \" [slice 0x%x:0x%x]\",\n-\t\t\tenc.cte_offset, enc.cte_bits) < 0)\n+\t  if (ep.cte_bits != ctf_type_size (fp, id) * CHAR_BIT\n+\t      && flag & CTF_FT_BITFIELD)\n+\t    {\n+\t      if (asprintf (&bit, \":%i\", ep.cte_bits) < 0)\n+\t\tgoto oom;\n+\t      str = str_append (str, bit);\n+\t      free (bit);\n+\t      bit = NULL;\n+\t    }\n+\n+\t  if (ep.cte_bits != ctf_type_size (fp, id) * CHAR_BIT\n+\t      || ep.cte_offset != 0)\n+\t    {\n+\t      const char *slice = \"\";\n+\n+\t      if (unsliced_kind == CTF_K_SLICE)\n+\t\tslice = \"slice \";\n+\n+\t      if (asprintf (&bit, \" [%s0x%x:0x%x]\",\n+\t\t\t    slice, ep.cte_offset, ep.cte_bits) < 0)\n+\t\tgoto oom;\n+\t      str = str_append (str, bit);\n+\t      free (bit);\n+\t      bit = NULL;\n+\t    }\n+\n+\t  if (asprintf (&bit, \" (format 0x%x)\", ep.cte_format) < 0)\n \t    goto oom;\n+\t  str = str_append (str, bit);\n+\t  free (bit);\n+\t  bit = NULL;\n \t}\n-      else if (kind == CTF_K_INTEGER)\n+\n+      if (kind != CTF_K_FUNCTION && kind != CTF_K_FORWARD)\n \t{\n-\t  ctf_type_encoding (fp, id, &enc);\n-\t  if (asprintf (&bit, \" [0x%x:0x%x]\",\n-\t\t\tenc.cte_offset, enc.cte_bits) < 0)\n+\t  if (asprintf (&bit, \" (size 0x%lx)\",\n+\t\t\t(unsigned long) ctf_type_size (fp, id)) < 0)\n \t    goto oom;\n+\n+\t  str = str_append (str, bit);\n+\t  free (bit);\n+\t  bit = NULL;\n \t}\n-      str = str_append (str, bit);\n-      free (bit);\n-      bit = NULL;\n \n-      if (kind != CTF_K_FUNCTION && kind != CTF_K_FORWARD)\n-\tif (asprintf (&bit, \" (size 0x%lx)%s\",\n-\t\t      (unsigned long) ctf_type_size (fp, id),\n-\t\t      nonroot_trailer) < 0)\n-\t  goto oom;\n+      if (kind != CTF_K_FORWARD)\n+\t{\n+\t  if (asprintf (&bit, \" (aligned at 0x%lx)\",\n+\t\t\t(unsigned long) ctf_type_align (fp, id)) < 0)\n+\t    goto oom;\n \n-      str = str_append (str, bit);\n-      free (bit);\n-      bit = NULL;\n+\t  str = str_append (str, bit);\n+\t  free (bit);\n+\t  bit = NULL;\n+\t}\n+\n+      if (nonroot_trailer[0] != 0)\n+\tstr = str_append (str, nonroot_trailer);\n+\n+      /* Just exit after one iteration if we are not showing the types this type\n+\t references.  */\n+      if (!(flag & CTF_FT_REFS))\n+\treturn str;\n \n       /* Keep going as long as this type references another.  We consider arrays\n \t to \"reference\" their element type. */\n@@ -173,7 +219,7 @@ ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n       else\n \tnew_id = ctf_type_reference (fp, id);\n       if (new_id != CTF_ERR)\n-\tstr = str_append (str, \" ->\");\n+\tstr = str_append (str, \" -> \");\n     } while (new_id != CTF_ERR);\n \n   if (ctf_errno (fp) != ECTF_NOTREF)\n@@ -363,7 +409,7 @@ ctf_dump_label (const char *name, const ctf_lblinfo_t *info,\n     return (ctf_set_errno (state->cds_fp, errno));\n \n   if ((typestr = ctf_dump_format_type (state->cds_fp, info->ctb_type,\n-\t\t\t\t       CTF_ADD_ROOT)) == NULL)\n+\t\t\t\t       CTF_ADD_ROOT | CTF_FT_REFS)) == NULL)\n     {\n       free (str);\n       return 0;\t\t\t\t/* Swallow the error.  */\n@@ -400,14 +446,14 @@ ctf_dump_objts (ctf_dict_t *fp, ctf_dump_state_t *state, int functions)\n \t has a leading one.   */\n       if (name)\n \t{\n-\t  if (asprintf (&str, \"%s ->\", name) < 0)\n+\t  if (asprintf (&str, \"%s -> \", name) < 0)\n \t    goto oom;\n \t}\n       else\n \tstr = xstrdup (\"\");\n \n       if ((typestr = ctf_dump_format_type (state->cds_fp, id,\n-\t\t\t\t\t   CTF_ADD_ROOT)) == NULL)\n+\t\t\t\t\t   CTF_ADD_ROOT | CTF_FT_REFS)) == NULL)\n \t{\n \t  ctf_dump_append (state, str);\n \t  continue;\t\t\t\t/* Swallow the error.  */\n@@ -438,7 +484,7 @@ ctf_dump_var (const char *name, ctf_id_t type, void *arg)\n     return (ctf_set_errno (state->cds_fp, errno));\n \n   if ((typestr = ctf_dump_format_type (state->cds_fp, type,\n-\t\t\t\t       CTF_ADD_ROOT)) == NULL)\n+\t\t\t\t       CTF_ADD_ROOT | CTF_FT_REFS)) == NULL)\n     {\n       free (str);\n       return 0;\t\t\t/* Swallow the error.  */\n@@ -451,114 +497,38 @@ ctf_dump_var (const char *name, ctf_id_t type, void *arg)\n   return 0;\n }\n \n-/* Report the number of digits in the hexadecimal representation of a type\n-   ID.  */\n-\n-static int\n-type_hex_digits (ctf_id_t id)\n-{\n-  int i = 0;\n-\n-  if (id == 0)\n-    return 1;\n-\n-  for (; id > 0; id >>= 4, i++);\n-  return i;\n-}\n-\n-/* Dump a single member into the string in the membstate.  */\n+/* Dump a single struct/union member into the string in the membstate.  */\n static int\n ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n \t\t int depth, void *arg)\n {\n   ctf_dump_membstate_t *state = arg;\n   char *typestr = NULL;\n   char *bit = NULL;\n-  ctf_encoding_t ep;\n-  int has_encoding = 0;\n-  int opened_paren = 0;\n-\n-  /* Align neatly.  */\n \n+  /* The struct/union itself has already been printed.  */\n   if (depth == 0)\n-    {\n-      if (asprintf (&state->cdm_toplevel_indent, \"     %*s\",\n-\t\t    type_hex_digits (id), \"\") < 0)\n-\tgoto oom;\n-    }\n+    return 0;\n \n-  if (asprintf (&bit, \"%s%*s\", state->cdm_toplevel_indent, depth * 4, \"\") < 0)\n+  if (asprintf (&bit, \"%s%*s\", state->cdm_toplevel_indent, (depth-1)*4, \"\") < 0)\n     goto oom;\n   *state->cdm_str = str_append (*state->cdm_str, bit);\n   free (bit);\n \n-  if ((typestr = ctf_type_aname (state->cdm_fp, id)) == NULL)\n-    {\n-      if (id == 0 || ctf_errno (state->cdm_fp) == ECTF_NONREPRESENTABLE)\n-\t{\n-\t  if (asprintf (&bit, \"[0x%lx] (type not represented in CTF)\",\n-\t\t\toffset) < 0)\n-\t    goto oom;\n-\n-\t  *state->cdm_str = str_append (*state->cdm_str, bit);\n-\t  free (typestr);\n-\t  free (bit);\n-\t  return 0;\n-\t}\n+  if ((typestr = ctf_dump_format_type (state->cdm_fp, id,\n+\t\t\t\t       CTF_ADD_ROOT | CTF_FT_BITFIELD\n+\t\t\t\t       | CTF_FT_ID)) == NULL)\n+    return -1;\t\t\t\t/* errno is set for us.  */\n \n-      return -1;\t\t\t\t/* errno is set for us.  */\n-    }\n-\n-  if (ctf_type_encoding (state->cdm_fp, id, &ep) == 0)\n-    {\n-      has_encoding = 1;\n-      ctf_type_encoding (state->cdm_fp, id, &ep);\n-\n-      if (asprintf (&bit, \"[0x%lx] (ID 0x%lx) (kind %i) %s%s%s:%i \"\n-\t\t    \"(aligned at 0x%lx\", offset, id,\n-\t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n-\t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name,\n-\t\t    ep.cte_bits, (unsigned long) ctf_type_align (state->cdm_fp,\n-\t\t\t\t\t\t\t\t id)) < 0)\n-\tgoto oom;\n-      opened_paren = 1;\n-    }\n-  else if (ctf_type_kind (state->cdm_fp, id) != CTF_K_FORWARD)\n-    {\n-      if (asprintf (&bit, \"[0x%lx] (ID 0x%lx) (kind %i) %s%s%s \"\n-\t\t    \"(aligned at 0x%lx\", offset, id,\n-\t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n-\t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name,\n-\t\t    (unsigned long) ctf_type_align (state->cdm_fp, id)) < 0)\n-\tgoto oom;\n-      opened_paren = 1;\n-    }\n-  else /* Forwards have no alignment.  */\n-    {\n-      if (asprintf (&bit, \"[0x%lx] (ID 0x%lx) (kind %i) %s%s%s\\n\", offset, id,\n-\t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n-\t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name) < 0)\n-\tgoto oom;\n-    }\n+  if (asprintf (&bit, \"[0x%lx] %s: %s\\n\", offset, name, typestr) < 0)\n+    goto oom;\n \n   *state->cdm_str = str_append (*state->cdm_str, bit);\n   free (typestr);\n   free (bit);\n   typestr = NULL;\n   bit = NULL;\n \n-  if (has_encoding)\n-    {\n-      if (asprintf (&bit, \", format 0x%x, offset:bits 0x%x:0x%x\", ep.cte_format,\n-\t\t    ep.cte_offset, ep.cte_bits) < 0)\n-\tgoto oom;\n-      *state->cdm_str = str_append (*state->cdm_str, bit);\n-      free (bit);\n-      bit = NULL;\n-    }\n-\n-  if (opened_paren)\n-    *state->cdm_str = str_append (*state->cdm_str, \")\\n\");\n   return 0;\n \n  oom:\n@@ -567,44 +537,112 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n   return (ctf_set_errno (state->cdm_fp, errno));\n }\n \n+/* Report the number of digits in the hexadecimal representation of a type\n+   ID.  */\n+\n+static int\n+type_hex_digits (ctf_id_t id)\n+{\n+  int i = 0;\n+\n+  if (id == 0)\n+    return 1;\n+\n+  for (; id > 0; id >>= 4, i++);\n+  return i;\n+}\n+\n /* Dump a single type into the cds_items.  */\n static int\n ctf_dump_type (ctf_id_t id, int flag, void *arg)\n {\n   char *str;\n+  char *indent;\n+  int err = 0;\n   ctf_dump_state_t *state = arg;\n   ctf_dump_membstate_t membstate = { &str, state->cds_fp, NULL };\n-  size_t len;\n \n-  if ((str = ctf_dump_format_type (state->cds_fp, id, flag)) == NULL)\n-    goto err;\n+  /* Indent neatly.  */\n+  if (asprintf (&indent, \"    %*s\", type_hex_digits (id), \"\") < 0)\n+    return (ctf_set_errno (state->cds_fp, ENOMEM));\n \n+  /* Dump the type itself.  */\n+  if ((str = ctf_dump_format_type (state->cds_fp, id,\n+\t\t\t\t   flag | CTF_FT_REFS)) == NULL)\n+    goto err;\n   str = str_append (str, \"\\n\");\n-  if ((ctf_type_visit (state->cds_fp, id, ctf_dump_member, &membstate)) < 0)\n+\n+  membstate.cdm_toplevel_indent = indent;\n+\n+  /* Member dumping for structs, unions...  */\n+  if (ctf_type_kind (state->cds_fp, id) == CTF_K_STRUCT\n+      || ctf_type_kind (state->cds_fp, id) == CTF_K_UNION)\n     {\n-      if (id == 0 || ctf_errno (state->cds_fp) == ECTF_NONREPRESENTABLE)\n+      if ((ctf_type_visit (state->cds_fp, id, ctf_dump_member, &membstate)) < 0)\n \t{\n-\t  ctf_dump_append (state, str);\n-\t  return 0;\n+\t  if (id == 0 || ctf_errno (state->cds_fp) == ECTF_NONREPRESENTABLE)\n+\t    {\n+\t      ctf_dump_append (state, str);\n+\t      return 0;\n+\t    }\n+\t  ctf_err_warn (state->cds_fp, 1, ctf_errno (state->cds_fp),\n+\t\t\t_(\"cannot visit members dumping type 0x%lx\"), id);\n+\t  goto err;\n \t}\n-      ctf_err_warn (state->cds_fp, 1, ctf_errno (state->cds_fp),\n-\t\t    _(\"cannot visit members dumping type 0x%lx\"), id);\n-      goto err;\n     }\n-  free (membstate.cdm_toplevel_indent);\n \n-  /* Trim off the last linefeed added by ctf_dump_member().  */\n-  len = strlen (str);\n-  if (str[len-1] == '\\n')\n-    str[len-1] = '\\0';\n+  /* ... and enums, for which we dump the first and last few members and skip\n+     the ones in the middle.  */\n+  if (ctf_type_kind (state->cds_fp, id) == CTF_K_ENUM)\n+    {\n+      int enum_count = ctf_member_count (state->cds_fp, id);\n+      ctf_next_t *it = NULL;\n+      int i = 0;\n+      const char *enumerand;\n+      char *bit;\n+      int value;\n+\n+      while ((enumerand = ctf_enum_next (state->cds_fp, id,\n+\t\t\t\t\t &it, &value)) != NULL)\n+\t{\n+\t  i++;\n+\t  if ((i > 5) && (i < enum_count - 4))\n+\t    continue;\n+\n+\t  str = str_append (str, indent);\n+\n+\t  if (asprintf (&bit, \"%s: %i\\n\", enumerand, value) < 0)\n+\t    {\n+\t      err = ENOMEM;\n+\t      ctf_next_destroy (it);\n+\t      goto err;\n+\t    }\n+\t  str = str_append (str, bit);\n+\t  free (bit);\n+\n+\t  if ((i == 5) && (enum_count > 10))\n+\t    {\n+\t      str = str_append (str, indent);\n+\t      str = str_append (str, \"...\\n\");\n+\t    }\n+\t}\n+      if (ctf_errno (state->cds_fp) != ECTF_NEXT_END)\n+\t{\n+\t  ctf_err_warn (state->cds_fp, 1, ctf_errno (state->cds_fp),\n+\t\t\t_(\"cannot visit enumerands dumping type 0x%lx\"), id);\n+\t  goto err;\n+\t}\n+    }\n \n   ctf_dump_append (state, str);\n+  free (indent);\n+\n   return 0;\n \n  err:\n-  free (membstate.cdm_toplevel_indent);\n+  free (indent);\n   free (str);\n-  return 0;\t\t\t\t/* Swallow the error.  */\n+  return ctf_set_errno (state->cds_fp, err);\n }\n \n /* Dump the string table into the cds_items.  */"
    },
    {
      "sha": "a3d824b88482181a34403833cb5c1b14773dbc43",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37002871ac2111eb3c88f44659c3c67d2fde1997/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=37002871ac2111eb3c88f44659c3c67d2fde1997",
      "patch": "@@ -826,10 +826,6 @@ ctf_type_aname (ctf_dict_t *fp, ctf_id_t type)\n \t    case CTF_K_RESTRICT:\n \t      ctf_decl_sprintf (&cd, \"restrict\");\n \t      break;\n-\t    case CTF_K_SLICE:\n-\t      /* No representation: just changes encoding of contained type,\n-\t\t which is not in any case printed.  Skip it.  */\n-\t      break;\n \t    }\n \n \t  k = cdp->cd_kind;"
    }
  ]
}