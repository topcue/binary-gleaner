{
  "sha": "898066264058f68c4dd26e82e1310db305177c8e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODk4MDY2MjY0MDU4ZjY4YzRkZDI2ZTgyZTEzMTBkYjMwNTE3N2M4ZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-14T18:02:30Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T18:02:30Z"
    },
    "message": "gdb: turn gdb::bcache's function pointers into virtual methods\n\nThe two function pointers optionally passed to gdb::bcache are very good\ncandidates to be turned into virtual methods, this patch does that in\nthe most straightforward / unsurprising way.\n\ngdb/ChangeLog:\n\n\t* bcache.h (struct bcache) <bcache>: Remove constructor.\n\t<m_hash_function, m_compare_function>: Remove.\n\t<~bcache>: Make virtual.\n\t<compare>: Remove static method, introduce virtual method.\n\t<default_hash>: Remove.\n\t<hash>: New virtual method.\n\t* bcache.c (bcache::expand_hash_table): Update.\n\t(bcache::insert): Update.\n\t(bcache::hash): New.\n\t(bcache::compare): Update comment and parameter names.\n\t* gdbtypes.c (types_deeply_equal): Update.\n\t* psymtab.h (struct psymbol_bcache): New struct.\n\t(class psymtab_storage) <psymtab_storage>: Make default.\n\t<psymbol_cache>: Change type to psymbol_bcache.\n\t* psymtab.c (psymtab_storage::psymtab_storage): Remove.\n\t(psymbol_hash): Change to...\n\t(psymbol_bcache::hash): ... this.\n\t(psymbol_compare): Change to...\n\t(psymbol_bcache::compare): ... this.\n\nChange-Id: I41d578e61de8ac1163461a28fbd220d1f855e372",
    "tree": {
      "sha": "fc0b04a903748034dcf5fabf9b650636df7b4725",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fc0b04a903748034dcf5fabf9b650636df7b4725"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/898066264058f68c4dd26e82e1310db305177c8e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/898066264058f68c4dd26e82e1310db305177c8e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/898066264058f68c4dd26e82e1310db305177c8e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/898066264058f68c4dd26e82e1310db305177c8e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2ddc8f011a497d710737ab7637dbf88cbe1398a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ddc8f011a497d710737ab7637dbf88cbe1398a1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2ddc8f011a497d710737ab7637dbf88cbe1398a1"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 72,
    "deletions": 63
  },
  "files": [
    {
      "sha": "0ca89098a0449cf7e69ed76051e4d4128feaadc9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/898066264058f68c4dd26e82e1310db305177c8e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/898066264058f68c4dd26e82e1310db305177c8e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=898066264058f68c4dd26e82e1310db305177c8e",
      "patch": "@@ -1,3 +1,25 @@\n+2020-09-14  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* bcache.h (struct bcache) <bcache>: Remove constructor.\n+\t<m_hash_function, m_compare_function>: Remove.\n+\t<~bcache>: Make virtual.\n+\t<compare>: Remove static method, introduce virtual method.\n+\t<default_hash>: Remove.\n+\t<hash>: New virtual method.\n+\t* bcache.c (bcache::expand_hash_table): Update.\n+\t(bcache::insert): Update.\n+\t(bcache::hash): New.\n+\t(bcache::compare): Update comment and parameter names.\n+\t* gdbtypes.c (types_deeply_equal): Update.\n+\t* psymtab.h (struct psymbol_bcache): New struct.\n+\t(class psymtab_storage) <psymtab_storage>: Make default.\n+\t<psymbol_cache>: Change type to psymbol_bcache.\n+\t* psymtab.c (psymtab_storage::psymtab_storage): Remove.\n+\t(psymbol_hash): Change to...\n+\t(psymbol_bcache::hash): ... this.\n+\t(psymbol_compare): Change to...\n+\t(psymbol_bcache::compare): ... this.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* linux-nat.c (linux_nat_wait_1): Don't use inferior_ptid when"
    },
    {
      "sha": "437db04b1ab817793ab5305753d3df5e74057e0e",
      "filename": "gdb/bcache.c",
      "status": "modified",
      "additions": 14,
      "deletions": 7,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/898066264058f68c4dd26e82e1310db305177c8e/gdb/bcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/898066264058f68c4dd26e82e1310db305177c8e/gdb/bcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.c?ref=898066264058f68c4dd26e82e1310db305177c8e",
      "patch": "@@ -113,7 +113,7 @@ bcache::expand_hash_table ()\n \t  struct bstring **new_bucket;\n \t  next = s->next;\n \n-\t  new_bucket = &new_buckets[(m_hash_function (&s->d.data, s->length)\n+\t  new_bucket = &new_buckets[(this->hash (&s->d.data, s->length)\n \t\t\t\t     % new_num_buckets)];\n \t  s->next = *new_bucket;\n \t  *new_bucket = s;\n@@ -167,7 +167,7 @@ bcache::insert (const void *addr, int length, bool *added)\n   m_total_count++;\n   m_total_size += length;\n \n-  full_hash = m_hash_function (addr, length);\n+  full_hash = this->hash (addr, length);\n \n   half_hash = (full_hash >> 16);\n   hash_index = full_hash % m_num_buckets;\n@@ -180,7 +180,7 @@ bcache::insert (const void *addr, int length, bool *added)\n       if (s->half_hash == half_hash)\n \t{\n \t  if (s->length == length\n-\t      && m_compare_function (&s->d.data, addr, length))\n+\t      && this->compare (&s->d.data, addr, length))\n \t    return &s->d.data;\n \t  else\n \t    m_half_hash_miss_count++;\n@@ -211,13 +211,20 @@ bcache::insert (const void *addr, int length, bool *added)\n }\n \f\n \n-/* Compare the byte string at ADDR1 of lenght LENGHT to the\n-   string at ADDR2.  Return 1 if they are equal.  */\n+/* See bcache.h.  */\n+\n+unsigned long\n+bcache::hash (const void *addr, int length)\n+{\n+  return fast_hash (addr, length, 0);\n+}\n+\n+/* See bcache.h.  */\n \n int\n-bcache::compare (const void *addr1, const void *addr2, int length)\n+bcache::compare (const void *left, const void *right, int length)\n {\n-  return memcmp (addr1, addr2, length) == 0;\n+  return memcmp (left, right, length) == 0;\n }\n \n /* Free all the storage associated with BCACHE.  */"
    },
    {
      "sha": "b92989ff5e891916f9f16baa3ca7c2e222028463",
      "filename": "gdb/bcache.h",
      "status": "modified",
      "additions": 11,
      "deletions": 30,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/898066264058f68c4dd26e82e1310db305177c8e/gdb/bcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/898066264058f68c4dd26e82e1310db305177c8e/gdb/bcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.h?ref=898066264058f68c4dd26e82e1310db305177c8e",
      "patch": "@@ -142,21 +142,7 @@ struct bstring;\n \n struct bcache\n {\n-  /* Allocate a bcache.  HASH_FN and COMPARE_FN can be used to pass in\n-     custom hash, and compare functions to be used by this bcache.  If\n-     HASH_FUNCTION is NULL fast_hash() is used and if COMPARE_FUNCTION is\n-     NULL memcmp() is used.  */\n-\n-  explicit bcache (unsigned long (*hash_fn)(const void *,\n-\t\t\t\t\t    int length) = nullptr,\n-\t\t   int (*compare_fn)(const void *, const void *,\n-\t\t\t\t     int length) = nullptr)\n-    : m_hash_function (hash_fn == nullptr ? default_hash : hash_fn),\n-      m_compare_function (compare_fn == nullptr ? compare : compare_fn)\n-  {\n-  }\n-\n-  ~bcache ();\n+  virtual ~bcache ();\n \n   /* Find a copy of the LENGTH bytes at ADDR in BCACHE.  If BCACHE has\n      never seen those bytes before, add a copy of them to BCACHE.  In\n@@ -175,6 +161,16 @@ struct bcache\n   void print_statistics (const char *type);\n   int memory_used ();\n \n+protected:\n+\n+  /* Hash function to be used for this bcache object.  Defaults to\n+     fast_hash.  */\n+  virtual unsigned long hash (const void *addr, int length);\n+\n+  /* Compare function to be used for this bcache object.  Defaults to\n+     memcmp.  */\n+  virtual int compare (const void *left, const void *right, int length);\n+\n private:\n \n   /* All the bstrings are allocated here.  */\n@@ -205,21 +201,6 @@ struct bcache\n      length/data compare missed.  */\n   unsigned long m_half_hash_miss_count = 0;\n \n-  /* Hash function to be used for this bcache object.  */\n-  unsigned long (*m_hash_function)(const void *addr, int length);\n-\n-  /* Compare function to be used for this bcache object.  */\n-  int (*m_compare_function)(const void *, const void *, int length);\n-\n-  /* Default compare function.  */\n-  static int compare (const void *addr1, const void *addr2, int length);\n-\n-  /* Default hash function.  */\n-  static unsigned long default_hash (const void *ptr, int length)\n-  {\n-    return fast_hash (ptr, length, 0);\n-  }\n-\n   /* Expand the hash table.  */\n   void expand_hash_table ();\n };"
    },
    {
      "sha": "45d62b7de5291340fe75e28022c2a33d5d919ae0",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/898066264058f68c4dd26e82e1310db305177c8e/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/898066264058f68c4dd26e82e1310db305177c8e/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=898066264058f68c4dd26e82e1310db305177c8e",
      "patch": "@@ -4122,7 +4122,7 @@ types_deeply_equal (struct type *type1, struct type *type2)\n   if (type1 == type2)\n     return true;\n \n-  gdb::bcache cache (nullptr, nullptr);\n+  gdb::bcache cache;\n   worklist.emplace_back (type1, type2);\n   return check_types_worklist (&worklist, &cache);\n }"
    },
    {
      "sha": "5791cd19c7cc1785a4f95d052cb99c1f6c27b06a",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 21,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/898066264058f68c4dd26e82e1310db305177c8e/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/898066264058f68c4dd26e82e1310db305177c8e/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=898066264058f68c4dd26e82e1310db305177c8e",
      "patch": "@@ -53,16 +53,6 @@ static struct partial_symbol *find_pc_sect_psymbol (struct objfile *,\n static struct compunit_symtab *psymtab_to_symtab (struct objfile *objfile,\n \t\t\t\t\t\t  struct partial_symtab *pst);\n \n-\f\n-\n-static unsigned long psymbol_hash (const void *addr, int length);\n-static int psymbol_compare (const void *addr1, const void *addr2, int length);\n-\n-psymtab_storage::psymtab_storage ()\n-  : psymbol_cache (psymbol_hash, psymbol_compare)\n-{\n-}\n-\n psymtab_storage::~psymtab_storage ()\n {\n   partial_symtab *iter = psymtabs;\n@@ -1537,13 +1527,10 @@ end_psymtab_common (struct objfile *objfile, struct partial_symtab *pst)\n   sort_pst_symbols (objfile, pst);\n }\n \n-/* Calculate a hash code for the given partial symbol.  The hash is\n-   calculated using the symbol's value, language, domain, class\n-   and name.  These are the values which are set by\n-   add_psymbol_to_bcache.  */\n+/* See psymtab.h.  */\n \n-static unsigned long\n-psymbol_hash (const void *addr, int length)\n+unsigned long\n+psymbol_bcache::hash (const void *addr, int length)\n {\n   unsigned long h = 0;\n   struct partial_symbol *psymbol = (struct partial_symbol *) addr;\n@@ -1562,12 +1549,10 @@ psymbol_hash (const void *addr, int length)\n   return h;\n }\n \n-/* Returns true if the symbol at addr1 equals the symbol at addr2.\n-   For the comparison this function uses a symbols value,\n-   language, domain, class and name.  */\n+/* See psymtab.h.  */\n \n-static int\n-psymbol_compare (const void *addr1, const void *addr2, int length)\n+int\n+psymbol_bcache::compare (const void *addr1, const void *addr2, int length)\n {\n   struct partial_symbol *sym1 = (struct partial_symbol *) addr1;\n   struct partial_symbol *sym2 = (struct partial_symbol *) addr2;"
    },
    {
      "sha": "3c2d65f40ee54a22cb6289c24a8bb17ffad765f3",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/898066264058f68c4dd26e82e1310db305177c8e/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/898066264058f68c4dd26e82e1310db305177c8e/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=898066264058f68c4dd26e82e1310db305177c8e",
      "patch": "@@ -27,6 +27,22 @@\n \n struct partial_symbol;\n \n+/* Specialization of bcache to store partial symbols.  */\n+\n+struct psymbol_bcache : public gdb::bcache\n+{\n+  /* Calculate a hash code for the given partial symbol.  The hash is\n+     calculated using the symbol's value, language, domain, class\n+     and name.  These are the values which are set by\n+     add_psymbol_to_bcache.  */\n+  unsigned long hash (const void *addr, int length) override;\n+\n+  /* Returns true if the symbol LEFT equals the symbol RIGHT.\n+     For the comparison this function uses a symbols value,\n+     language, domain, class and name.  */\n+  int compare (const void *left, const void *right, int length) override;\n+};\n+\n /* An instance of this class manages the partial symbol tables and\n    partial symbols for a given objfile.\n \n@@ -48,9 +64,7 @@ struct partial_symbol;\n class psymtab_storage\n {\n public:\n-\n-  psymtab_storage ();\n-\n+  psymtab_storage () = default;\n   ~psymtab_storage ();\n \n   DISABLE_COPY_AND_ASSIGN (psymtab_storage);\n@@ -121,7 +135,7 @@ class psymtab_storage\n   /* A byte cache where we can stash arbitrary \"chunks\" of bytes that\n      will not change.  */\n \n-  gdb::bcache psymbol_cache;\n+  psymbol_bcache psymbol_cache;\n \n   /* Vectors of all partial symbols read in from file.  The actual data\n      is stored in the objfile_obstack.  */"
    }
  ]
}