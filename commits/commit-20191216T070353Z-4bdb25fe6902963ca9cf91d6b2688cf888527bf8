{
  "sha": "4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGJkYjI1ZmU2OTAyOTYzY2E5Y2Y5MWQ2YjI2ODhjZjg4ODUyN2JmOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-15T23:05:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-16T07:03:53Z"
    },
    "message": "ubsan: nds32: left shift cannot be represented in type 'int'\n\nNote that using 1u in N32_BIT makes all of N32_BIT, __MASK, __MF, __GF\nand __SEXT evaluate as unsigned int (the latter three when when their\nv arg is int or smaller).  This would be a problem if assigning the\nresult to a bfd_vma, long, or other type wider than an int since the\n__SEXT result would be zero extended to the wider type.  Fortunately\nnds32 target code doesn't use wider types unnecessarily.\n\ninclude/\n\t* opcode/nds32.h (N32_BIT): Define using 1u.\n\t(__SEXT): Use __MASK and N32_BIT.\n\t(N32_IMMS): Remove duplicate mask.\nopcodes/\n\t* nds32-dis.c (print_insn16, print_insn32): Remove forward decls.\n\t(struct objdump_disasm_info): Delete.\n\t(nds32_parse_audio_ext, nds32_parse_opcode): Cast result of\n\tN32_IMMS to unsigned before shifting left.",
    "tree": {
      "sha": "c59b543c40bf8bc2d741c3b0ed2b1a5a7397746a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c59b543c40bf8bc2d741c3b0ed2b1a5a7397746a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf950fd4dd4581849a445a76b57514d72074927d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf950fd4dd4581849a445a76b57514d72074927d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf950fd4dd4581849a445a76b57514d72074927d"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 25,
    "deletions": 26
  },
  "files": [
    {
      "sha": "7f6cc9bf558976dae5dc32df73fb12bb1d98895e",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/nds32.h (N32_BIT): Define using 1u.\n+\t(__SEXT): Use __MASK and N32_BIT.\n+\t(N32_IMMS): Remove duplicate mask.\n+\n 2019-12-12  Luis Machado  <luis.machado@linaro.org>\n \n \t* diagnostics.h (DIAGNOSTIC_IGNORE_UNUSED_FUNCTION). Remove"
    },
    {
      "sha": "0e60840f78aa50ff9806411c22f272b4cd58fb43",
      "filename": "include/opcode/nds32.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/include/opcode/nds32.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/include/opcode/nds32.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/nds32.h?ref=4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
      "patch": "@@ -51,11 +51,12 @@ static const int nds32_r54map[] ATTRIBUTE_UNUSED =\n   -1, -1, -1, -1, -1, -1, -1, -1\n };\n \n-#define N32_BIT(n)\t\t(1 << (n))\n+#define N32_BIT(n)\t\t(1u << (n))\n #define __MASK(n)\t\t(N32_BIT (n) - 1)\n #define __MF(v, off, bs)\t(((v) & __MASK (bs)) << (off))\n #define __GF(v, off, bs)\t(((v) >> off) & __MASK (bs))\n-#define __SEXT(v, bs)\t\t((((v) & ((1 << (bs)) - 1)) ^ (1 << ((bs) - 1))) - (1 << ((bs) - 1)))\n+#define __SEXT(v, bs)\t\t\\\n+  ((((v) & __MASK ((bs))) ^ N32_BIT ((bs) - 1)) - N32_BIT ((bs) - 1))\n \n /* Make nds32 instructions.  */\n \n@@ -150,7 +151,7 @@ static const int nds32_r54map[] ATTRIBUTE_UNUSED =\n #define N32_SUB6(insn)\t\t(((insn) >> 0) & 0x3f)\n #define N32_SWID(insn)\t\t(((insn) >> 5) & 0x3ff)\n #define N32_IMMU(insn, bs)\t((insn) & __MASK (bs))\n-#define N32_IMMS(insn, bs)\t((signed) __SEXT (((insn) & __MASK (bs)), bs))\n+#define N32_IMMS(insn, bs)\t((signed) __SEXT ((insn), (bs)))\n #define N32_IMM5U(insn)\t\tN32_IMMU (insn, 5)\n #define N32_IMM12S(insn)\tN32_IMMS (insn, 12)\n #define N32_IMM14S(insn)\tN32_IMMS (insn, 14)"
    },
    {
      "sha": "65ef685d070badacb74d1577f6118d45a344a9dc",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* nds32-dis.c (print_insn16, print_insn32): Remove forward decls.\n+\t(struct objdump_disasm_info): Delete.\n+\t(nds32_parse_audio_ext, nds32_parse_opcode): Cast result of\n+\tN32_IMMS to unsigned before shifting left.\n+\n 2019-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* moxie-dis.c (INST2OFFSET): Don't left shift a signed value."
    },
    {
      "sha": "0e41399ef0523850dc10681371831ee50c051018",
      "filename": "opcodes/nds32-dis.c",
      "status": "modified",
      "additions": 8,
      "deletions": 23,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/opcodes/nds32-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4bdb25fe6902963ca9cf91d6b2688cf888527bf8/opcodes/nds32-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/nds32-dis.c?ref=4bdb25fe6902963ca9cf91d6b2688cf888527bf8",
      "patch": "@@ -72,29 +72,14 @@ extern struct nds32_opcode nds32_opcodes[];\n extern const field_t operand_fields[];\n extern keyword_t *keywords[];\n extern const keyword_t keyword_gpr[];\n-static void print_insn16 (bfd_vma pc, disassemble_info *info,\n-\t\t\t  uint32_t insn, uint32_t parse_mode);\n-static void print_insn32 (bfd_vma pc, disassemble_info *info, uint32_t insn,\n-\t\t\t  uint32_t parse_mode);\n+\n static uint32_t nds32_mask_opcode (uint32_t);\n static void nds32_special_opcode (uint32_t, struct nds32_opcode **);\n static int get_mapping_symbol_type (struct disassemble_info *, int,\n \t\t\t\t    enum map_type *);\n static int is_mapping_symbol (struct disassemble_info *, int,\n \t\t\t      enum map_type *);\n \n-/* define in objdump.c.  */\n-struct objdump_disasm_info\n-{\n-  bfd *              abfd;\n-  asection *         sec;\n-  bfd_boolean        require_sec;\n-  arelent **         dynrelbuf;\n-  long               dynrelcount;\n-  disassembler_ftype disassemble_fn;\n-  arelent *          reloc;\n-};\n-\n /* Hash function for disassemble.  */\n \n static htab_t opcode_htab;\n@@ -128,8 +113,8 @@ nds32_parse_audio_ext (const field_t *pfd,\n   if (pfd->hw_res == HW_INT || pfd->hw_res == HW_UINT)\n     {\n       if (pfd->hw_res == HW_INT)\n-\tint_value =\n-\t  N32_IMMS ((insn >> pfd->bitpos), pfd->bitsize) << pfd->shift;\n+\tint_value = (unsigned) N32_IMMS (insn >> pfd->bitpos,\n+\t\t\t\t\t pfd->bitsize) << pfd->shift;\n       else\n \tint_value = __GF (insn, pfd->bitpos, pfd->bitsize) << pfd->shift;\n \n@@ -321,9 +306,9 @@ nds32_parse_opcode (struct nds32_opcode *opc, bfd_vma pc ATTRIBUTE_UNUSED,\n \t      else if ((pfd->hw_res == HW_INT) || (pfd->hw_res == HW_UINT))\n \t\t{\n \t\t  if (pfd->hw_res == HW_INT)\n-\t\t    int_value =\n-\t\t      N32_IMMS ((insn >> pfd->bitpos),\n-\t\t\t    pfd->bitsize) << pfd->shift;\n+\t\t    int_value\n+\t\t      = (unsigned) N32_IMMS (insn >> pfd->bitpos,\n+\t\t\t\t\t     pfd->bitsize) << pfd->shift;\n \t\t  else\n \t\t    int_value =\n \t\t      __GF (insn, pfd->bitpos, pfd->bitsize) << pfd->shift;\n@@ -411,8 +396,8 @@ nds32_parse_opcode (struct nds32_opcode *opc, bfd_vma pc ATTRIBUTE_UNUSED,\n \t  else if ((pfd->hw_res == HW_INT) || (pfd->hw_res == HW_UINT))\n \t    {\n \t      if (pfd->hw_res == HW_INT)\n-\t\tint_value =\n-\t\t  N32_IMMS ((insn >> pfd->bitpos), pfd->bitsize) << pfd->shift;\n+\t\tint_value = (unsigned) N32_IMMS (insn >> pfd->bitpos,\n+\t\t\t\t\t\t pfd->bitsize) << pfd->shift;\n \t      else\n \t\tint_value =\n \t\t  __GF (insn, pfd->bitpos, pfd->bitsize) << pfd->shift;"
    }
  ]
}