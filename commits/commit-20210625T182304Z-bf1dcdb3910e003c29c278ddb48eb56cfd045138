{
  "sha": "bf1dcdb3910e003c29c278ddb48eb56cfd045138",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmYxZGNkYjM5MTBlMDAzYzI5YzI3OGRkYjQ4ZWI1NmNmZDA0NTEzOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-06-25T18:23:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-06-25T18:23:04Z"
    },
    "message": "Consolidate CU language setting\n\nThe DWARF reader currently sets the CU's language in two different\nspots.  It is primarily done in prepare_one_comp_unit, but\nread_file_scope also checks the producer and may change the language\nbased on the result.\n\nThis patch consolidates all language-setting into\nprepare_one_comp_unit.  set_cu_language is renamed and changed not to\nset language_defn; instead that is done in prepare_one_comp_unit after\nthe correct language enum value is chosen.\n\nThis fixes a minor latent bug, which is that read_file_scope could set\nthe language enum value to language_opencl, but then neglected to\nreset language_defn in this case.\n\ngdb/ChangeLog\n2021-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_file_scope): Don't call set_cu_language.\n\t(dwarf_lang_to_enum_language): Rename from set_cu_language.  Don't\n\tset language_defn.  Handle DW_LANG_OpenCL.\n\t(prepare_one_comp_unit): Check producer and set language_defn.",
    "tree": {
      "sha": "62737349a9aa423cc10b9627593ad0b1a765778b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62737349a9aa423cc10b9627593ad0b1a765778b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf1dcdb3910e003c29c278ddb48eb56cfd045138",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf1dcdb3910e003c29c278ddb48eb56cfd045138",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf1dcdb3910e003c29c278ddb48eb56cfd045138",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf1dcdb3910e003c29c278ddb48eb56cfd045138/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6b95f5ad9684530960eb828c76755a7b27a44e43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b95f5ad9684530960eb828c76755a7b27a44e43",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6b95f5ad9684530960eb828c76755a7b27a44e43"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 48,
    "deletions": 34
  },
  "files": [
    {
      "sha": "721aca30698365ea49499d6eeaa474f71e84a957",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf1dcdb3910e003c29c278ddb48eb56cfd045138/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf1dcdb3910e003c29c278ddb48eb56cfd045138/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf1dcdb3910e003c29c278ddb48eb56cfd045138",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_file_scope): Don't call set_cu_language.\n+\t(dwarf_lang_to_enum_language): Rename from set_cu_language.  Don't\n+\tset language_defn.  Handle DW_LANG_OpenCL.\n+\t(prepare_one_comp_unit): Check producer and set language_defn.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention Python BP_CATCHPOINT feature."
    },
    {
      "sha": "f76a84abf53dcc8755af8bd7065b2a96cf5343a0",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 41,
      "deletions": 34,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf1dcdb3910e003c29c278ddb48eb56cfd045138/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf1dcdb3910e003c29c278ddb48eb56cfd045138/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=bf1dcdb3910e003c29c278ddb48eb56cfd045138",
      "patch": "@@ -1173,8 +1173,6 @@ static const char *read_dwo_str_index (const struct die_reader_specs *reader,\n static const char *read_stub_str_index (struct dwarf2_cu *cu,\n \t\t\t\t\tULONGEST str_index);\n \n-static void set_cu_language (unsigned int, struct dwarf2_cu *);\n-\n static struct attribute *dwarf2_attr (struct die_info *, unsigned int,\n \t\t\t\t      struct dwarf2_cu *);\n \n@@ -10509,16 +10507,6 @@ read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n \n   file_and_directory fnd = find_file_and_directory (die, cu);\n \n-  /* The XLCL doesn't generate DW_LANG_OpenCL because this attribute is not\n-     standardised yet.  As a workaround for the language detection we fall\n-     back to the DW_AT_producer string.  */\n-  if (cu->producer && strstr (cu->producer, \"IBM XL C for OpenCL\") != NULL)\n-    cu->language = language_opencl;\n-\n-  /* Similar hack for Go.  */\n-  if (cu->producer && strstr (cu->producer, \"GNU Go \") != NULL)\n-    set_cu_language (DW_LANG_Go, cu);\n-\n   cu->start_symtab (fnd.name, fnd.comp_dir, lowpc);\n \n   gdb_assert (per_objfile->sym_cu == nullptr);\n@@ -20355,64 +20343,70 @@ leb128_size (const gdb_byte *buf)\n     }\n }\n \n-static void\n-set_cu_language (unsigned int lang, struct dwarf2_cu *cu)\n+static enum language\n+dwarf_lang_to_enum_language (unsigned int lang)\n {\n+  enum language language;\n+\n   switch (lang)\n     {\n     case DW_LANG_C89:\n     case DW_LANG_C99:\n     case DW_LANG_C11:\n     case DW_LANG_C:\n     case DW_LANG_UPC:\n-      cu->language = language_c;\n+      language = language_c;\n       break;\n     case DW_LANG_Java:\n     case DW_LANG_C_plus_plus:\n     case DW_LANG_C_plus_plus_11:\n     case DW_LANG_C_plus_plus_14:\n-      cu->language = language_cplus;\n+      language = language_cplus;\n       break;\n     case DW_LANG_D:\n-      cu->language = language_d;\n+      language = language_d;\n       break;\n     case DW_LANG_Fortran77:\n     case DW_LANG_Fortran90:\n     case DW_LANG_Fortran95:\n     case DW_LANG_Fortran03:\n     case DW_LANG_Fortran08:\n-      cu->language = language_fortran;\n+      language = language_fortran;\n       break;\n     case DW_LANG_Go:\n-      cu->language = language_go;\n+      language = language_go;\n       break;\n     case DW_LANG_Mips_Assembler:\n-      cu->language = language_asm;\n+      language = language_asm;\n       break;\n     case DW_LANG_Ada83:\n     case DW_LANG_Ada95:\n-      cu->language = language_ada;\n+      language = language_ada;\n       break;\n     case DW_LANG_Modula2:\n-      cu->language = language_m2;\n+      language = language_m2;\n       break;\n     case DW_LANG_Pascal83:\n-      cu->language = language_pascal;\n+      language = language_pascal;\n       break;\n     case DW_LANG_ObjC:\n-      cu->language = language_objc;\n+      language = language_objc;\n       break;\n     case DW_LANG_Rust:\n     case DW_LANG_Rust_old:\n-      cu->language = language_rust;\n+      language = language_rust;\n+      break;\n+    case DW_LANG_OpenCL:\n+      language = language_opencl;\n       break;\n     case DW_LANG_Cobol74:\n     case DW_LANG_Cobol85:\n     default:\n-      cu->language = language_minimal;\n+      language = language_minimal;\n       break;\n     }\n-  cu->language_defn = language_def (cu->language);\n+\n+  return language;\n }\n \n /* Return the named attribute or NULL if not there.  */\n@@ -24412,17 +24406,30 @@ prepare_one_comp_unit (struct dwarf2_cu *cu, struct die_info *comp_unit_die,\n {\n   struct attribute *attr;\n \n+  cu->producer = dwarf2_string_attr (comp_unit_die, DW_AT_producer, cu);\n+\n   /* Set the language we're debugging.  */\n   attr = dwarf2_attr (comp_unit_die, DW_AT_language, cu);\n-  if (attr != nullptr)\n-    set_cu_language (attr->constant_value (0), cu);\n-  else\n+  if (cu->producer != nullptr\n+      && strstr (cu->producer, \"IBM XL C for OpenCL\") != NULL)\n     {\n-      cu->language = pretend_language;\n-      cu->language_defn = language_def (cu->language);\n+      /* The XLCL doesn't generate DW_LANG_OpenCL because this\n+\t attribute is not standardised yet.  As a workaround for the\n+\t language detection we fall back to the DW_AT_producer\n+\t string.  */\n+      cu->language = language_opencl;\n     }\n-\n-  cu->producer = dwarf2_string_attr (comp_unit_die, DW_AT_producer, cu);\n+  else if (cu->producer != nullptr\n+\t   && strstr (cu->producer, \"GNU Go \") != NULL)\n+    {\n+      /* Similar hack for Go.  */\n+      cu->language = language_go;\n+    }\n+  else if (attr != nullptr)\n+    cu->language = dwarf_lang_to_enum_language (attr->constant_value (0));\n+  else\n+    cu->language = pretend_language;\n+  cu->language_defn = language_def (cu->language);\n }\n \n /* See read.h.  */"
    }
  ]
}