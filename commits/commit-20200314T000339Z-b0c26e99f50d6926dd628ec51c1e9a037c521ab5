{
  "sha": "b0c26e99f50d6926dd628ec51c1e9a037c521ab5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjBjMjZlOTlmNTBkNjkyNmRkNjI4ZWM1MWMxZTlhMDM3YzUyMWFiNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:39Z"
    },
    "message": "Refactor val_print and common_val_print\n\nThis changes val_print and common_val_print to use a new helper\nfunction.  A theme in the coming patches is that calls to val_print\nitself should be removed.  This is the first such patch; at the end of\nthe series, we'll remove val_print and simplify do_val_print.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (do_val_print): New function, from val_print.\n\t(val_print): Use do_val_print.\n\t(common_val_print): Use do_val_print.",
    "tree": {
      "sha": "3ca0e751437bd63d31d274560fa0fb87e1f393ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ca0e751437bd63d31d274560fa0fb87e1f393ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b0c26e99f50d6926dd628ec51c1e9a037c521ab5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0c26e99f50d6926dd628ec51c1e9a037c521ab5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b0c26e99f50d6926dd628ec51c1e9a037c521ab5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0c26e99f50d6926dd628ec51c1e9a037c521ab5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce3acbe9fa876647649cc88f94264a5c56bf46a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce3acbe9fa876647649cc88f94264a5c56bf46a1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce3acbe9fa876647649cc88f94264a5c56bf46a1"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 50,
    "deletions": 28
  },
  "files": [
    {
      "sha": "2a2b29887f994bc9d6384f7926dddf48c3cfc49f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0c26e99f50d6926dd628ec51c1e9a037c521ab5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0c26e99f50d6926dd628ec51c1e9a037c521ab5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b0c26e99f50d6926dd628ec51c1e9a037c521ab5",
      "patch": "@@ -1,3 +1,9 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (do_val_print): New function, from val_print.\n+\t(val_print): Use do_val_print.\n+\t(common_val_print): Use do_val_print.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* valprint.c (value_print): Use scoped_value_mark."
    },
    {
      "sha": "66da0e607bac1a49373936b97b63d66ffa422321",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 44,
      "deletions": 28,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0c26e99f50d6926dd628ec51c1e9a037c521ab5/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0c26e99f50d6926dd628ec51c1e9a037c521ab5/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=b0c26e99f50d6926dd628ec51c1e9a037c521ab5",
      "patch": "@@ -1033,31 +1033,17 @@ generic_val_print (struct type *type,\n     }\n }\n \n-/* Print using the given LANGUAGE the data of type TYPE located at\n-   VAL's contents buffer + EMBEDDED_OFFSET (within GDB), which came\n-   from the inferior at address ADDRESS + EMBEDDED_OFFSET, onto\n-   stdio stream STREAM according to OPTIONS.  VAL is the whole object\n-   that came from ADDRESS.\n-\n-   The language printers will pass down an adjusted EMBEDDED_OFFSET to\n-   further helper subroutines as subfields of TYPE are printed.  In\n-   such cases, VAL is passed down unadjusted, so\n-   that VAL can be queried for metadata about the contents data being\n-   printed, using EMBEDDED_OFFSET as an offset into VAL's contents\n-   buffer.  For example: \"has this field been optimized out\", or \"I'm\n-   printing an object while inspecting a traceframe; has this\n-   particular piece of data been collected?\".\n+/* Helper function for val_print and common_val_print that does the\n+   work.  Arguments are as to val_print, but FULL_VALUE, if given, is\n+   the value to be printed.  */\n \n-   RECURSE indicates the amount of indentation to supply before\n-   continuation lines; this amount is roughly twice the value of\n-   RECURSE.  */\n-\n-void\n-val_print (struct type *type, LONGEST embedded_offset,\n-\t   CORE_ADDR address, struct ui_file *stream, int recurse,\n-\t   struct value *val,\n-\t   const struct value_print_options *options,\n-\t   const struct language_defn *language)\n+static void\n+do_val_print (struct value *full_value,\n+\t      struct type *type, LONGEST embedded_offset,\n+\t      CORE_ADDR address, struct ui_file *stream, int recurse,\n+\t      struct value *val,\n+\t      const struct value_print_options *options,\n+\t      const struct language_defn *language)\n {\n   int ret = 0;\n   struct value_print_options local_opts = *options;\n@@ -1117,6 +1103,36 @@ val_print (struct type *type, LONGEST embedded_offset,\n     }\n }\n \n+/* Print using the given LANGUAGE the data of type TYPE located at\n+   VAL's contents buffer + EMBEDDED_OFFSET (within GDB), which came\n+   from the inferior at address ADDRESS + EMBEDDED_OFFSET, onto\n+   stdio stream STREAM according to OPTIONS.  VAL is the whole object\n+   that came from ADDRESS.\n+\n+   The language printers will pass down an adjusted EMBEDDED_OFFSET to\n+   further helper subroutines as subfields of TYPE are printed.  In\n+   such cases, VAL is passed down unadjusted, so\n+   that VAL can be queried for metadata about the contents data being\n+   printed, using EMBEDDED_OFFSET as an offset into VAL's contents\n+   buffer.  For example: \"has this field been optimized out\", or \"I'm\n+   printing an object while inspecting a traceframe; has this\n+   particular piece of data been collected?\".\n+\n+   RECURSE indicates the amount of indentation to supply before\n+   continuation lines; this amount is roughly twice the value of\n+   RECURSE.  */\n+\n+void\n+val_print (struct type *type, LONGEST embedded_offset,\n+\t   CORE_ADDR address, struct ui_file *stream, int recurse,\n+\t   struct value *val,\n+\t   const struct value_print_options *options,\n+\t   const struct language_defn *language)\n+{\n+  do_val_print (nullptr, type, embedded_offset, address, stream,\n+\t\trecurse, val, options, language);\n+}\n+\n /* See valprint.h.  */\n \n bool\n@@ -1214,10 +1230,10 @@ common_val_print (struct value *val, struct ui_file *stream, int recurse,\n   if (value_lazy (val))\n     value_fetch_lazy (val);\n \n-  val_print (value_type (val),\n-\t     value_embedded_offset (val), value_address (val),\n-\t     stream, recurse,\n-\t     val, options, language);\n+  do_val_print (val, value_type (val),\n+\t\tvalue_embedded_offset (val), value_address (val),\n+\t\tstream, recurse,\n+\t\tval, options, language);\n }\n \n /* Print on stream STREAM the value VAL according to OPTIONS.  The value"
    }
  ]
}