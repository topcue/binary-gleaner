{
  "sha": "78319c1568ce20c41f5002e61bd9427a1cf59aac",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzgzMTljMTU2OGNlMjBjNDFmNTAwMmU2MWJkOTQyN2ExY2Y1OWFhYw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-30T17:23:38Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-30T17:23:38Z"
    },
    "message": "gdb/breakpoint: refactor 'set_breakpoint_condition'\n\nApply minor refactoring to 'set_breakpoint_condition'.\n\ngdb/ChangeLog:\n2020-07-30  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* breakpoint.c (set_breakpoint_condition): Do minor refactoring.",
    "tree": {
      "sha": "c7f8dc048bdd40d13a5065e231504fceb6cbd198",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c7f8dc048bdd40d13a5065e231504fceb6cbd198"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/78319c1568ce20c41f5002e61bd9427a1cf59aac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78319c1568ce20c41f5002e61bd9427a1cf59aac",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/78319c1568ce20c41f5002e61bd9427a1cf59aac",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78319c1568ce20c41f5002e61bd9427a1cf59aac/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4c55e9702527b73ff301e5c06f2055a606348de1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c55e9702527b73ff301e5c06f2055a606348de1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c55e9702527b73ff301e5c06f2055a606348de1"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 13,
    "deletions": 20
  },
  "files": [
    {
      "sha": "5d5535692c8848d5cdcebe96caf5321b24461fd1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78319c1568ce20c41f5002e61bd9427a1cf59aac/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78319c1568ce20c41f5002e61bd9427a1cf59aac/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=78319c1568ce20c41f5002e61bd9427a1cf59aac",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-30  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* breakpoint.c (set_breakpoint_condition): Do minor refactoring.\n+\n 2020-07-30  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* breakpoint.c (set_breakpoint_condition): Update the condition"
    },
    {
      "sha": "977599db1db40ceccf3814f38e8ef54e8c156a72",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 20,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78319c1568ce20c41f5002e61bd9427a1cf59aac/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78319c1568ce20c41f5002e61bd9427a1cf59aac/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=78319c1568ce20c41f5002e61bd9427a1cf59aac",
      "patch": "@@ -840,16 +840,10 @@ set_breakpoint_condition (struct breakpoint *b, const char *exp,\n       b->cond_string = nullptr;\n \n       if (is_watchpoint (b))\n-\t{\n-\t  struct watchpoint *w = (struct watchpoint *) b;\n-\n-\t  w->cond_exp.reset ();\n-\t}\n+\tstatic_cast<watchpoint *> (b)->cond_exp.reset ();\n       else\n \t{\n-\t  struct bp_location *loc;\n-\n-\t  for (loc = b->loc; loc; loc = loc->next)\n+\t  for (bp_location *loc = b->loc; loc != nullptr; loc = loc->next)\n \t    {\n \t      loc->cond.reset ();\n \n@@ -864,24 +858,19 @@ set_breakpoint_condition (struct breakpoint *b, const char *exp,\n     }\n   else\n     {\n-      const char *arg = exp;\n-\n       if (is_watchpoint (b))\n \t{\n-\t  struct watchpoint *w = (struct watchpoint *) b;\n-\n \t  innermost_block_tracker tracker;\n-\t  arg = exp;\n+\t  const char *arg = exp;\n \t  expression_up new_exp = parse_exp_1 (&arg, 0, 0, 0, &tracker);\n-\t  if (*arg)\n+\t  if (*arg != 0)\n \t    error (_(\"Junk at end of expression\"));\n+\t  watchpoint *w = static_cast<watchpoint *> (b);\n \t  w->cond_exp = std::move (new_exp);\n \t  w->cond_exp_valid_block = tracker.block ();\n \t}\n       else\n \t{\n-\t  struct bp_location *loc;\n-\n \t  /* Parse and set condition expressions.  We make two passes.\n \t     In the first, we parse the condition string to see if it\n \t     is valid in all locations.  If so, the condition would be\n@@ -890,19 +879,19 @@ set_breakpoint_condition (struct breakpoint *b, const char *exp,\n \t     the error and the condition string will be rejected.\n \t     This two-pass approach is taken to avoid setting the\n \t     state of locations in case of a reject.  */\n-\t  for (loc = b->loc; loc; loc = loc->next)\n+\t  for (bp_location *loc = b->loc; loc != nullptr; loc = loc->next)\n \t    {\n-\t      arg = exp;\n+\t      const char *arg = exp;\n \t      parse_exp_1 (&arg, loc->address,\n \t\t\t   block_for_pc (loc->address), 0);\n \t      if (*arg != 0)\n \t\terror (_(\"Junk at end of expression\"));\n \t    }\n \n \t  /* If we reach here, the condition is valid at all locations.  */\n-\t  for (loc = b->loc; loc; loc = loc->next)\n+\t  for (bp_location *loc = b->loc; loc != nullptr; loc = loc->next)\n \t    {\n-\t      arg = exp;\n+\t      const char *arg = exp;\n \t      loc->cond =\n \t\tparse_exp_1 (&arg, loc->address,\n \t\t\t     block_for_pc (loc->address), 0);"
    }
  ]
}