{
  "sha": "336125713fcf9b43960a57724fa39a319036ba38",
  "node_id": "C_kwDOANOeidoAKDMzNjEyNTcxM2ZjZjliNDM5NjBhNTc3MjRmYTM5YTMxOTAzNmJhMzg",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-02-19T13:09:34Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-02-21T11:42:03Z"
    },
    "message": "gdb: avoid nullptr access in dbxread.c from read_dbx_symtab\n\nThis fixes a GDB crash reported in bug pr/28900, related to reading in\nsome stabs debug information.\n\nIn this commit my goal is to stop GDB crashing.  I am not trying to\nensure that GDB makes the best possible use of the available stabs\ndebug information.  At this point I consider stabs a legacy debug\nformat, with only limited support in GDB.\n\nSo, the problem appears to be that, when reading in the stabs data, we\nneed to find a N_SO entry, this is the entry that defines the start of\na compilation unit (or at least the location of a corresponding source\nfile).\n\nIt is while handling an N_SO that GDB creates a psymtab to hold the\nincoming debug information (symbols, etc).\n\nThe problem we hit in the bug is that we encounter some symbol\ninformation (an N_PC entry) outside of an N_SO entry - that is we find\nsome symbol information that is not associated with any source file.\n\nWe already have some protection for this case, look (in\nread_dbx_symtab) at the handling of N_PC entries of type 'F' and 'f',\nif we have no psymtab (the pst variable is nullptr) then we issue a\ncomplaint.  However, for whatever reason, in both 'f' and 'F'\nhandling, there is one place where we assume that the pst\nvariable (the psymtab) is not nullptr.  This is a mistake.\n\nIn this commit, I guard these two locations (in 'f' and 'F' handling)\nso we no longer assume pst is not nullptr.\n\nWhile I was at it, I audited all the other uses of pst in\nread_dbx_symtab, and in every potentially dangerous case I added a\nnullptr check, and issue a suitable complaint if pst is found to be\nnullptr.\n\nIt might well be true that we could/should do something smarter if we\nsee a debug symbol outside of an N_SO entry, and if anyone wanted to\ndo that work, they're welcome too.  But this commit is just about\npreventing the nullptr access, and the subsequent GDB crash.\n\nI don't have any tests for this change, I have no idea how to generate\nweird stabs data for testing.  The original binary from the bug report\nnow loads just fine without GDB crashing.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=28900",
    "tree": {
      "sha": "76a314b73a917c353a51dd8e6f98d343f512e3ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/76a314b73a917c353a51dd8e6f98d343f512e3ef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/336125713fcf9b43960a57724fa39a319036ba38",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/336125713fcf9b43960a57724fa39a319036ba38",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/336125713fcf9b43960a57724fa39a319036ba38",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/336125713fcf9b43960a57724fa39a319036ba38/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "9c6c44713f31f7b27bfe6921de378fa69127a048",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c6c44713f31f7b27bfe6921de378fa69127a048",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9c6c44713f31f7b27bfe6921de378fa69127a048"
    }
  ],
  "stats": {
    "total": 137,
    "additions": 88,
    "deletions": 49
  },
  "files": [
    {
      "sha": "165040dd7ce4fd7ecc29204f03b0c5ff72daf382",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 88,
      "deletions": 49,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336125713fcf9b43960a57724fa39a319036ba38/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336125713fcf9b43960a57724fa39a319036ba38/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=336125713fcf9b43960a57724fa39a319036ba38",
      "patch": "@@ -1461,23 +1461,33 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t  switch (p[1])\n \t    {\n \t    case 'S':\n-\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\tVAR_DOMAIN, LOC_STATIC,\n-\t\t\t\tdata_sect_index,\n-\t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\tnlist.n_value, psymtab_language,\n-\t\t\t\tpartial_symtabs, objfile);\n+\t      if (pst != nullptr)\n+\t\tpst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\t  VAR_DOMAIN, LOC_STATIC,\n+\t\t\t\t  data_sect_index,\n+\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t  nlist.n_value, psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n+\t      else\n+\t\tcomplaint (_(\"static `%*s' appears to be defined \"\n+\t\t\t     \"outside of all compilation units\"),\n+\t\t\t   sym_len, sym_name);\n \t      continue;\n \n \t    case 'G':\n \t      /* The addresses in these entries are reported to be\n \t\t wrong.  See the code that reads 'G's for symtabs.  */\n-\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\tVAR_DOMAIN, LOC_STATIC,\n-\t\t\t\tdata_sect_index,\n-\t\t\t\tpsymbol_placement::GLOBAL,\n-\t\t\t\tnlist.n_value, psymtab_language,\n-\t\t\t\tpartial_symtabs, objfile);\n+\t      if (pst != nullptr)\n+\t\tpst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\t  VAR_DOMAIN, LOC_STATIC,\n+\t\t\t\t  data_sect_index,\n+\t\t\t\t  psymbol_placement::GLOBAL,\n+\t\t\t\t  nlist.n_value, psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n+\t      else\n+\t\tcomplaint (_(\"global `%*s' appears to be defined \"\n+\t\t\t     \"outside of all compilation units\"),\n+\t\t\t   sym_len, sym_name);\n \t      continue;\n \n \t    case 'T':\n@@ -1491,19 +1501,30 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t  || (p == namestring + 1\n \t\t      && namestring[0] != ' '))\n \t\t{\n-\t\t  pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n-\t\t\t\t    true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t    psymbol_placement::STATIC,\n-\t\t\t\t    0, psymtab_language,\n-\t\t\t\t    partial_symtabs, objfile);\n+\t\t  if (pst != nullptr)\n+\t\t    pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t      true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t      psymbol_placement::STATIC,\n+\t\t\t\t      0, psymtab_language,\n+\t\t\t\t      partial_symtabs, objfile);\n+\t\t  else\n+\t\t    complaint (_(\"enum, struct, or union `%*s' appears \"\n+\t\t\t\t \"to be defined outside of all \"\n+\t\t\t\t \"compilation units\"),\n+\t\t\t       sym_len, sym_name);\n \t\t  if (p[2] == 't')\n \t\t    {\n \t\t      /* Also a typedef with the same name.  */\n-\t\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n-\t\t\t\t\ttrue, VAR_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\t\t0, psymtab_language,\n-\t\t\t\t\tpartial_symtabs, objfile);\n+\t\t      if (pst != nullptr)\n+\t\t\tpst->add_psymbol (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t  0, psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n+\t\t      else\n+\t\t\tcomplaint (_(\"typedef `%*s' appears to be defined \"\n+\t\t\t\t     \"outside of all compilation units\"),\n+\t\t\t\t   sym_len, sym_name);\n \t\t      p += 1;\n \t\t    }\n \t\t}\n@@ -1512,11 +1533,16 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t    case 't':\n \t      if (p != namestring)\t/* a name is there, not just :T...  */\n \t\t{\n-\t\t  pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n-\t\t\t\t    true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t    psymbol_placement::STATIC,\n-\t\t\t\t    0, psymtab_language,\n-\t\t\t\t    partial_symtabs, objfile);\n+\t\t  if (pst != nullptr)\n+\t\t    pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t      true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t      psymbol_placement::STATIC,\n+\t\t\t\t      0, psymtab_language,\n+\t\t\t\t      partial_symtabs, objfile);\n+\t\t  else\n+\t\t    complaint (_(\"typename `%*s' appears to be defined \"\n+\t\t\t\t \"outside of all compilation units\"),\n+\t\t\t       sym_len, sym_name);\n \t\t}\n \t    check_enum:\n \t      /* If this is an enumerated type, we need to\n@@ -1574,11 +1600,16 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t\t;\n \t\t      /* Note that the value doesn't matter for\n \t\t\t enum constants in psymtabs, just in symtabs.  */\n-\t\t      pst->add_psymbol (gdb::string_view (p, q - p), true,\n-\t\t\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\t\tpsymbol_placement::STATIC, 0,\n-\t\t\t\t\tpsymtab_language,\n-\t\t\t\t\tpartial_symtabs, objfile);\n+\t\t      if (pst != nullptr)\n+\t\t\tpst->add_psymbol (gdb::string_view (p, q - p), true,\n+\t\t\t\t\t  VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\t\t  psymbol_placement::STATIC, 0,\n+\t\t\t\t\t  psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n+\t\t      else\n+\t\t\tcomplaint (_(\"enum constant `%*s' appears to be defined \"\n+\t\t\t\t     \"outside of all compilation units\"),\n+\t\t\t\t   ((int) (q - p)), p);\n \t\t      /* Point past the name.  */\n \t\t      p = q;\n \t\t      /* Skip over the value.  */\n@@ -1593,11 +1624,17 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \n \t    case 'c':\n \t      /* Constant, e.g. from \"const\" in Pascal.  */\n-\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\tpsymbol_placement::STATIC, 0,\n-\t\t\t\tpsymtab_language,\n-\t\t\t\tpartial_symtabs, objfile);\n+\t      if (pst != nullptr)\n+\t\tpst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\t  VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\t  psymbol_placement::STATIC, 0,\n+\t\t\t\t  psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n+\t      else\n+\t\tcomplaint (_(\"constant `%*s' appears to be defined \"\n+\t\t\t     \"outside of all compilation units\"),\n+\t\t\t   sym_len, sym_name);\n+\n \t      continue;\n \n \t    case 'f':\n@@ -1644,12 +1681,13 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t  pst->set_text_low (nlist.n_value);\n \t\t  textlow_not_set = 0;\n \t\t}\n-\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\tVAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\tSECT_OFF_TEXT (objfile),\n-\t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\tnlist.n_value, psymtab_language,\n-\t\t\t\tpartial_symtabs, objfile);\n+\t      if (pst != nullptr)\n+\t\tpst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\t  VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t  SECT_OFF_TEXT (objfile),\n+\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t  nlist.n_value, psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t      continue;\n \n \t      /* Global functions were ignored here, but now they\n@@ -1699,12 +1737,13 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t  pst->set_text_low (nlist.n_value);\n \t\t  textlow_not_set = 0;\n \t\t}\n-\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\tVAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\tSECT_OFF_TEXT (objfile),\n-\t\t\t\tpsymbol_placement::GLOBAL,\n-\t\t\t\tnlist.n_value, psymtab_language,\n-\t\t\t\tpartial_symtabs, objfile);\n+\t      if (pst != nullptr)\n+\t\tpst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\t  VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t  SECT_OFF_TEXT (objfile),\n+\t\t\t\t  psymbol_placement::GLOBAL,\n+\t\t\t\t  nlist.n_value, psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t      continue;\n \n \t      /* Two things show up here (hopefully); static symbols of"
    }
  ]
}