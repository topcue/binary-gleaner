{
  "sha": "d121c6ce897d34ae168f78cbdacacb109d4833e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDEyMWM2Y2U4OTdkMzRhZTE2OGY3OGNiZGFjYWNiMTA5ZDQ4MzNlNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:40Z"
    },
    "message": "Introduce value_print_array_elements\n\nThis introduces value_print_array_elements, which is an analogue of\nval_print_array_elements that uses the value API.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (value_print_array_elements): New function.\n\t* valprint.h (value_print_array_elements): Declare.",
    "tree": {
      "sha": "c7247e3cadf6babbf5b6552e4999a7e7e9c3f259",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c7247e3cadf6babbf5b6552e4999a7e7e9c3f259"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d121c6ce897d34ae168f78cbdacacb109d4833e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d121c6ce897d34ae168f78cbdacacb109d4833e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d121c6ce897d34ae168f78cbdacacb109d4833e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d121c6ce897d34ae168f78cbdacacb109d4833e6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4dba70eee1fadcb3c1bb50ba17e0fe3512c84180",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4dba70eee1fadcb3c1bb50ba17e0fe3512c84180",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4dba70eee1fadcb3c1bb50ba17e0fe3512c84180"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 135,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f47c14fc09c1f42a06a85b1267f055cf095d094e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d121c6ce897d34ae168f78cbdacacb109d4833e6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d121c6ce897d34ae168f78cbdacacb109d4833e6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d121c6ce897d34ae168f78cbdacacb109d4833e6",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (value_print_array_elements): New function.\n+\t* valprint.h (value_print_array_elements): Declare.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* printcmd.c (print_formatted): Use value_print_scalar_formatted."
    },
    {
      "sha": "07f0a40ebdf3f8c26429aca448a755a3532fb03d",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 124,
      "deletions": 0,
      "changes": 124,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d121c6ce897d34ae168f78cbdacacb109d4833e6/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d121c6ce897d34ae168f78cbdacacb109d4833e6/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=d121c6ce897d34ae168f78cbdacacb109d4833e6",
      "patch": "@@ -2213,6 +2213,130 @@ val_print_array_elements (struct type *type,\n     }\n }\n \n+/* See valprint.h.  */\n+\n+void\n+value_print_array_elements (struct value *val, struct ui_file *stream,\n+\t\t\t    int recurse,\n+\t\t\t    const struct value_print_options *options,\n+\t\t\t    unsigned int i)\n+{\n+  unsigned int things_printed = 0;\n+  unsigned len;\n+  struct type *elttype, *index_type, *base_index_type;\n+  unsigned eltlen;\n+  /* Position of the array element we are examining to see\n+     whether it is repeated.  */\n+  unsigned int rep1;\n+  /* Number of repetitions we have detected so far.  */\n+  unsigned int reps;\n+  LONGEST low_bound, high_bound;\n+  LONGEST low_pos, high_pos;\n+\n+  struct type *type = check_typedef (value_type (val));\n+\n+  elttype = TYPE_TARGET_TYPE (type);\n+  eltlen = type_length_units (check_typedef (elttype));\n+  index_type = TYPE_INDEX_TYPE (type);\n+\n+  if (get_array_bounds (type, &low_bound, &high_bound))\n+    {\n+      if (TYPE_CODE (index_type) == TYPE_CODE_RANGE)\n+\tbase_index_type = TYPE_TARGET_TYPE (index_type);\n+      else\n+\tbase_index_type = index_type;\n+\n+      /* Non-contiguous enumerations types can by used as index types\n+\t in some languages (e.g. Ada).  In this case, the array length\n+\t shall be computed from the positions of the first and last\n+\t literal in the enumeration type, and not from the values\n+\t of these literals.  */\n+      if (!discrete_position (base_index_type, low_bound, &low_pos)\n+\t  || !discrete_position (base_index_type, high_bound, &high_pos))\n+\t{\n+\t  warning (_(\"unable to get positions in array, use bounds instead\"));\n+\t  low_pos = low_bound;\n+\t  high_pos = high_bound;\n+\t}\n+\n+      /* The array length should normally be HIGH_POS - LOW_POS + 1.\n+         But we have to be a little extra careful, because some languages\n+\t such as Ada allow LOW_POS to be greater than HIGH_POS for\n+\t empty arrays.  In that situation, the array length is just zero,\n+\t not negative!  */\n+      if (low_pos > high_pos)\n+\tlen = 0;\n+      else\n+\tlen = high_pos - low_pos + 1;\n+    }\n+  else\n+    {\n+      warning (_(\"unable to get bounds of array, assuming null array\"));\n+      low_bound = 0;\n+      len = 0;\n+    }\n+\n+  annotate_array_section_begin (i, elttype);\n+\n+  for (; i < len && things_printed < options->print_max; i++)\n+    {\n+      scoped_value_mark free_values;\n+\n+      if (i != 0)\n+\t{\n+\t  if (options->prettyformat_arrays)\n+\t    {\n+\t      fprintf_filtered (stream, \",\\n\");\n+\t      print_spaces_filtered (2 + 2 * recurse, stream);\n+\t    }\n+\t  else\n+\t    fprintf_filtered (stream, \", \");\n+\t}\n+      wrap_here (n_spaces (2 + 2 * recurse));\n+      maybe_print_array_index (index_type, i + low_bound,\n+                               stream, options);\n+\n+      rep1 = i + 1;\n+      reps = 1;\n+      /* Only check for reps if repeat_count_threshold is not set to\n+\t UINT_MAX (unlimited).  */\n+      if (options->repeat_count_threshold < UINT_MAX)\n+\t{\n+\t  while (rep1 < len\n+\t\t && value_contents_eq (val, i * eltlen,\n+\t\t\t\t       val, rep1 * eltlen,\n+\t\t\t\t       eltlen))\n+\t    {\n+\t      ++reps;\n+\t      ++rep1;\n+\t    }\n+\t}\n+\n+      struct value *element = value_from_component (val, elttype, eltlen * i);\n+      common_val_print (element, stream, recurse + 1, options,\n+\t\t\tcurrent_language);\n+\n+      if (reps > options->repeat_count_threshold)\n+\t{\n+\t  annotate_elt_rep (reps);\n+\t  fprintf_filtered (stream, \" %p[<repeats %u times>%p]\",\n+\t\t\t    metadata_style.style ().ptr (), reps, nullptr);\n+\t  annotate_elt_rep_end ();\n+\n+\t  i = rep1 - 1;\n+\t  things_printed += options->repeat_count_threshold;\n+\t}\n+      else\n+\t{\n+\t  annotate_elt ();\n+\t  things_printed++;\n+\t}\n+    }\n+  annotate_array_section_end ();\n+  if (i < len)\n+    fprintf_filtered (stream, \"...\");\n+}\n+\n /* Read LEN bytes of target memory at address MEMADDR, placing the\n    results in GDB's memory at MYADDR.  Returns a count of the bytes\n    actually read, and optionally a target_xfer_status value in the"
    },
    {
      "sha": "20a42310a985e77ccaaf37b25620d9ace97d17e7",
      "filename": "gdb/valprint.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d121c6ce897d34ae168f78cbdacacb109d4833e6/gdb/valprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d121c6ce897d34ae168f78cbdacacb109d4833e6/gdb/valprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.h?ref=d121c6ce897d34ae168f78cbdacacb109d4833e6",
      "patch": "@@ -134,6 +134,12 @@ extern void val_print_array_elements (struct type *, LONGEST,\n \t\t\t\t      const struct value_print_options *,\n \t\t\t\t      unsigned int);\n \n+/* Print elements of an array.  */\n+\n+extern void value_print_array_elements (struct value *, struct ui_file *, int,\n+\t\t\t\t\tconst struct value_print_options *,\n+\t\t\t\t\tunsigned int);\n+\n extern void val_print_scalar_formatted (struct type *,\n \t\t\t\t\tLONGEST,\n \t\t\t\t\tstruct value *,"
    }
  ]
}