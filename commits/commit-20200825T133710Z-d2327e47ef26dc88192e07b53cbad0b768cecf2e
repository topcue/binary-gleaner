{
  "sha": "d2327e47ef26dc88192e07b53cbad0b768cecf2e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDIzMjdlNDdlZjI2ZGM4ODE5MmUwN2I1M2NiYWQwYjc2OGNlY2YyZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-25T04:35:10Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-25T13:37:10Z"
    },
    "message": "PR26422, ASAN: elf32_arm_final_link_relocate elf32-arm.c:10351\n\nAlways reading 32 bits in order to extract addends from instruction\nfields is wrong when the field size is smaller.  It also leads to\nreading past the end of the section.  This patch tidies that by\nreading the proper field size, which allows some later refetching of\naddends to disappear.\n\n\tPR 26422\n\t* elf32-arm.c (elf32_arm_final_link_relocate): Use the appropriate\n\tbfd_get_x size function to read addends out of fields.  Apply\n\trightshift adjustment too.  Don't apply the now unnecessary\n\thowto->size shift to branch REL addends.  Don't refetch R_ARM_ABS8\n\tand R_ARM_ABS16 addends.  Don't refetch thumb branch addends.\n\tCorrect R_ARM_THM_JUMP6 addend.",
    "tree": {
      "sha": "05701277805400bae3aac9cf640630a277f0df25",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/05701277805400bae3aac9cf640630a277f0df25"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d2327e47ef26dc88192e07b53cbad0b768cecf2e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2327e47ef26dc88192e07b53cbad0b768cecf2e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d2327e47ef26dc88192e07b53cbad0b768cecf2e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2327e47ef26dc88192e07b53cbad0b768cecf2e/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b8ff233b54d66c5dce5a6d1409fe57e7ea359f43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8ff233b54d66c5dce5a6d1409fe57e7ea359f43",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b8ff233b54d66c5dce5a6d1409fe57e7ea359f43"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 28,
    "deletions": 35
  },
  "files": [
    {
      "sha": "a24957a8c19f707e9158d8e3f599c0377988a18f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2327e47ef26dc88192e07b53cbad0b768cecf2e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2327e47ef26dc88192e07b53cbad0b768cecf2e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=d2327e47ef26dc88192e07b53cbad0b768cecf2e",
      "patch": "@@ -1,3 +1,13 @@\n+2020-08-25  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26422\n+\t* elf32-arm.c (elf32_arm_final_link_relocate): Use the appropriate\n+\tbfd_get_x size function to read addends out of fields.  Apply\n+\trightshift adjustment too.  Don't apply the now unnecessary\n+\thowto->size shift to branch REL addends.  Don't refetch R_ARM_ABS8\n+\tand R_ARM_ABS16 addends.  Don't refetch thumb branch addends.\n+\tCorrect R_ARM_THM_JUMP6 addend.\n+\n 2020-08-25  Alan Modra  <amodra@gmail.com>\n \n \tPR 26419"
    },
    {
      "sha": "8fec76e4e1ddefbac283a8031235b6b860d731e9",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 18,
      "deletions": 35,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2327e47ef26dc88192e07b53cbad0b768cecf2e/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2327e47ef26dc88192e07b53cbad0b768cecf2e/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=d2327e47ef26dc88192e07b53cbad0b768cecf2e",
      "patch": "@@ -10348,16 +10348,22 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \n   if (globals->use_rel)\n     {\n-      addend = bfd_get_32 (input_bfd, hit_data) & howto->src_mask;\n+      bfd_vma sign;\n \n-      if (addend & ((howto->src_mask + 1) >> 1))\n+      switch (howto->size)\n \t{\n-\t  signed_addend = -1;\n-\t  signed_addend &= ~ howto->src_mask;\n-\t  signed_addend |= addend;\n+\tcase 0: addend = bfd_get_8 (input_bfd, hit_data); break;\n+\tcase 1: addend = bfd_get_16 (input_bfd, hit_data); break;\n+\tcase 2: addend = bfd_get_32 (input_bfd, hit_data); break;\n+\tdefault: addend = 0; break;\n \t}\n-      else\n-\tsigned_addend = addend;\n+      /* Note: the addend and signed_addend calculated here are\n+\t incorrect for any split field.  */\n+      addend &= howto->src_mask;\n+      sign = howto->src_mask & ~(howto->src_mask >> 1);\n+      signed_addend = (addend ^ sign) - sign;\n+      signed_addend = (bfd_vma) signed_addend << howto->rightshift;\n+      addend <<= howto->rightshift;\n     }\n   else\n     addend = signed_addend = rel->r_addend;\n@@ -10752,11 +10758,7 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \t  value -= (input_section->output_section->vma\n \t\t    + input_section->output_offset);\n \t  value -= rel->r_offset;\n-\t  if (globals->use_rel)\n-\t    value += (signed_addend << howto->size);\n-\t  else\n-\t    /* RELA addends do not have to be adjusted by howto->size.  */\n-\t    value += signed_addend;\n+\t  value += signed_addend;\n \n \t  signed_addend = value;\n \t  signed_addend >>= howto->rightshift;\n@@ -10860,9 +10862,6 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n       return bfd_reloc_ok;\n \n     case R_ARM_ABS8:\n-      /* PR 16202: Refectch the addend using the correct size.  */\n-      if (globals->use_rel)\n-\taddend = bfd_get_8 (input_bfd, hit_data);\n       value += addend;\n \n       /* There is no way to tell whether the user intended to use a signed or\n@@ -10875,9 +10874,6 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n       return bfd_reloc_ok;\n \n     case R_ARM_ABS16:\n-      /* PR 16202: Refectch the addend using the correct size.  */\n-      if (globals->use_rel)\n-\taddend = bfd_get_16 (input_bfd, hit_data);\n       value += addend;\n \n       /* See comment for R_ARM_ABS8.  */\n@@ -11356,25 +11352,12 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \n \t/* CZB cannot jump backward.  */\n \tif (r_type == R_ARM_THM_JUMP6)\n-\t  reloc_signed_min = 0;\n-\n-\tif (globals->use_rel)\n \t  {\n-\t    /* Need to refetch addend.  */\n-\t    addend = bfd_get_16 (input_bfd, hit_data) & howto->src_mask;\n-\t    if (addend & ((howto->src_mask + 1) >> 1))\n-\t      {\n-\t\tsigned_addend = -1;\n-\t\tsigned_addend &= ~ howto->src_mask;\n-\t\tsigned_addend |= addend;\n-\t      }\n-\t    else\n-\t      signed_addend = addend;\n-\t    /* The value in the insn has been right shifted.  We need to\n-\t       undo this, so that we can perform the address calculation\n-\t       in terms of bytes.  */\n-\t    signed_addend <<= howto->rightshift;\n+\t    reloc_signed_min = 0;\n+\t    if (globals->use_rel)\n+\t      signed_addend = ((addend & 0x200) >> 3) | ((addend & 0xf8) >> 2);\n \t  }\n+\n \trelocation = value + signed_addend;\n \n \trelocation -= (input_section->output_section->vma"
    }
  ]
}