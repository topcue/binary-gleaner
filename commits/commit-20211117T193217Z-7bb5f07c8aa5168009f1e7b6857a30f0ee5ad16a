{
  "sha": "7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
  "node_id": "C_kwDOANOeidoAKDdiYjVmMDdjOGFhNTE2ODAwOWYxZTdiNjg1N2EzMGYwZWU1YWQxNmE",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T19:31:25Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T19:32:17Z"
    },
    "message": "aarch64: [SME] Add MOV and MOVA instructions\n\nThis patch is adding new MOV (alias) and MOVA SME instruction.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (enum sme_hv_slice): new enum.\n\t(struct reloc_entry): Added ZAH and ZAV registers.\n\t(parse_sme_immediate): Immediate parser.\n\t(parse_sme_za_hv_tiles_operand): ZA tile parser.\n\t(parse_sme_za_hv_tiles_operand_index): Index parser.\n\t(parse_operands): Added ZA tile parser calls.\n\t(REGNUMS): New macro. Regs with suffix.\n\t(REGSET16S): New macro. 16 regs with suffix.\n\t* testsuite/gas/aarch64/sme-2-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-2-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-2-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-2.d: New test.\n\t* testsuite/gas/aarch64/sme-2.s: New test.\n\t* testsuite/gas/aarch64/sme-2a.d: New test.\n\t* testsuite/gas/aarch64/sme-2a.s: New test.\n\t* testsuite/gas/aarch64/sme-3-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-3-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-3-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-3.d: New test.\n\t* testsuite/gas/aarch64/sme-3.s: New test.\n\t* testsuite/gas/aarch64/sme-3a.d: New test.\n\t* testsuite/gas/aarch64/sme-3a.s: New test.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New enums\n\tAARCH64_OPND_SME_ZA_HV_idx_src and\n\tAARCH64_OPND_SME_ZA_HV_idx_dest.\n\t(struct aarch64_opnd_info): New ZA tile vector struct.\n\nopcodes/ChangeLog:\n\n\t* aarch64-asm.c (aarch64_ins_sme_za_hv_tiles):\n\tNew inserter.\n\t* aarch64-asm.h (AARCH64_DECL_OPD_INSERTER):\n\tNew inserter ins_sme_za_hv_tiles.\n\t* aarch64-dis.c (aarch64_ext_sme_za_hv_tiles):\n\tNew extractor.\n\t* aarch64-dis.h (AARCH64_DECL_OPD_EXTRACTOR):\n\tNew extractor ext_sme_za_hv_tiles.\n\t* aarch64-opc.c (aarch64_print_operand):\n\tHandle SME_ZA_HV_idx_src and SME_ZA_HV_idx_dest.\n\t* aarch64-opc.h (enum aarch64_field_kind): New enums\n\tFLD_SME_size_10, FLD_SME_Q, FLD_SME_V and FLD_SME_Rv.\n\t(struct aarch64_operand): Increase fields size to 5.\n\t* aarch64-tbl.h (OP_SME_BHSDQ_PM_BHSDQ): New qualifiers\n\taarch64-asm-2.c: Regenerate.\n\taarch64-dis-2.c: Regenerate.\n\taarch64-opc-2.c: Regenerate.",
    "tree": {
      "sha": "e8a7449925ac32ef3a5ebf0db7276c348ca5bb8c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e8a7449925ac32ef3a5ebf0db7276c348ca5bb8c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "971eda734150ea9cdea47be259486c3a8d087037",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/971eda734150ea9cdea47be259486c3a8d087037",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/971eda734150ea9cdea47be259486c3a8d087037"
    }
  ],
  "stats": {
    "total": 1128,
    "additions": 952,
    "deletions": 176
  },
  "files": [
    {
      "sha": "ce761283371d0f926dbb643f07260025be4ba149",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 218,
      "deletions": 1,
      "changes": 219,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -99,6 +99,17 @@ enum vector_el_type\n   NT_merge\n };\n \n+/* SME horizontal or vertical slice indicator, encoded in \"V\".\n+   Values:\n+     0 - Horizontal\n+     1 - vertical\n+*/\n+enum sme_hv_slice\n+{\n+  HV_horizontal = 0,\n+  HV_vertical = 1\n+};\n+\n /* Bits for DEFINED field in vector_type_el.  */\n #define NTA_HASTYPE     1\n #define NTA_HASINDEX    2\n@@ -279,6 +290,8 @@ struct reloc_entry\n   BASIC_REG_TYPE(ZN)\t/* z[0-31] */\t\\\n   BASIC_REG_TYPE(PN)\t/* p[0-15] */\t\\\n   BASIC_REG_TYPE(ZA)\t/* za[0-15] */\t\\\n+  BASIC_REG_TYPE(ZAH)\t/* za[0-15]h */\t\\\n+  BASIC_REG_TYPE(ZAV)\t/* za[0-15]v */\t\\\n   /* Typecheck: any 64-bit int reg         (inc SP exc XZR).  */\t\\\n   MULTI_REG_TYPE(R64_SP, REG_TYPE(R_64) | REG_TYPE(SP_64))\t\t\\\n   /* Typecheck: same, plus SVE registers.  */\t\t\t\t\\\n@@ -4276,6 +4289,178 @@ parse_sme_zada_operand (char **str, aarch64_opnd_qualifier_t *qualifier)\n   return regno;\n }\n \n+/* Parse STR for unsigned, immediate (1-2 digits) in format:\n+\n+     #<imm>\n+     <imm>\n+\n+  Function return TRUE if immediate was found, or FALSE.\n+*/\n+static bool\n+parse_sme_immediate (char **str, int64_t *imm)\n+{\n+  int64_t val;\n+  if (! parse_constant_immediate (str, &val, REG_TYPE_R_N))\n+    return false;\n+\n+  *imm = val;\n+  return true;\n+}\n+\n+/* Parse index with vector select register and immediate:\n+\n+   [<Wv>, <imm>]\n+   [<Wv>, #<imm>]\n+   where <Wv> is in W12-W15 range and # is optional for immediate.\n+\n+   Function performs extra check for mandatory immediate value if REQUIRE_IMM\n+   is set to true.\n+\n+   On success function returns TRUE and populated VECTOR_SELECT_REGISTER and\n+   IMM output.\n+*/\n+static bool\n+parse_sme_za_hv_tiles_operand_index (char **str,\n+                                     int *vector_select_register,\n+                                     int64_t *imm)\n+{\n+  const reg_entry *reg;\n+\n+  if (!skip_past_char (str, '['))\n+    {\n+      set_syntax_error (_(\"expected '['\"));\n+      return false;\n+    }\n+\n+  /* Vector select register W12-W15 encoded in the 2-bit Rv field.  */\n+  reg = parse_reg (str);\n+  if (reg == NULL || reg->type != REG_TYPE_R_32\n+      || reg->number < 12 || reg->number > 15)\n+    {\n+      set_syntax_error (_(\"expected vector select register W12-W15\"));\n+      return false;\n+    }\n+  *vector_select_register = reg->number;\n+\n+  if (!skip_past_char (str, ','))    /* Optional index offset immediate.  */\n+    {\n+      set_syntax_error (_(\"expected ','\"));\n+      return false;\n+    }\n+\n+  if (!parse_sme_immediate (str, imm))\n+    {\n+      set_syntax_error (_(\"index offset immediate expected\"));\n+      return false;\n+    }\n+\n+  if (!skip_past_char (str, ']'))\n+    {\n+      set_syntax_error (_(\"expected ']'\"));\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+/* Parse SME ZA horizontal or vertical vector access to tiles.\n+   Function extracts from STR to SLICE_INDICATOR <HV> horizontal (0) or\n+   vertical (1) ZA tile vector orientation. VECTOR_SELECT_REGISTER\n+   contains <Wv> select register and corresponding optional IMMEDIATE.\n+   In addition QUALIFIER is extracted.\n+\n+   Field format examples:\n+\n+   ZA0<HV>.B[<Wv>, #<imm>]\n+   <ZAn><HV>.H[<Wv>, #<imm>]\n+   <ZAn><HV>.S[<Wv>, #<imm>]\n+   <ZAn><HV>.D[<Wv>, #<imm>]\n+   <ZAn><HV>.Q[<Wv>, #<imm>]\n+\n+   Function returns <ZAda> register number or PARSE_FAIL.\n+*/\n+static int\n+parse_sme_za_hv_tiles_operand (char **str,\n+                               enum sme_hv_slice *slice_indicator,\n+                               int *vector_select_register,\n+                               int *imm,\n+                               aarch64_opnd_qualifier_t *qualifier)\n+{\n+  char *qh, *qv;\n+  int regno;\n+  int regno_limit;\n+  int64_t imm_limit;\n+  int64_t imm_value;\n+  const reg_entry *reg;\n+\n+  qh = qv = *str;\n+  if ((reg = parse_reg_with_qual (&qh, REG_TYPE_ZAH, qualifier)) != NULL)\n+    {\n+      *slice_indicator = HV_horizontal;\n+      *str = qh;\n+    }\n+  else if ((reg = parse_reg_with_qual (&qv, REG_TYPE_ZAV, qualifier)) != NULL)\n+    {\n+      *slice_indicator = HV_vertical;\n+      *str = qv;\n+    }\n+  else\n+    return PARSE_FAIL;\n+  regno = reg->number;\n+\n+  switch (*qualifier)\n+    {\n+    case AARCH64_OPND_QLF_S_B:\n+      regno_limit = 0;\n+      imm_limit = 15;\n+      break;\n+    case AARCH64_OPND_QLF_S_H:\n+      regno_limit = 1;\n+      imm_limit = 7;\n+      break;\n+    case AARCH64_OPND_QLF_S_S:\n+      regno_limit = 3;\n+      imm_limit = 3;\n+      break;\n+    case AARCH64_OPND_QLF_S_D:\n+      regno_limit = 7;\n+      imm_limit = 1;\n+      break;\n+    case AARCH64_OPND_QLF_S_Q:\n+      regno_limit = 15;\n+      imm_limit = 0;\n+      break;\n+    default:\n+      set_syntax_error (_(\"invalid ZA tile element size, allowed b, h, s, d and q\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  /* Check if destination register ZA tile vector is in range for given\n+     instruction variant.  */\n+  if (regno < 0 || regno > regno_limit)\n+    {\n+      set_syntax_error (_(\"ZA tile vector out of range\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  if (!parse_sme_za_hv_tiles_operand_index (str, vector_select_register,\n+                                            &imm_value))\n+    return PARSE_FAIL;\n+\n+  /* Check if optional index offset is in the range for instruction\n+     variant.  */\n+  if (imm_value < 0 || imm_value > imm_limit)\n+    {\n+      set_syntax_error (_(\"index offset out of range\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  *imm = imm_value;\n+\n+  return regno;\n+}\n+\n+\n /* Parse a system register or a PSTATE field name for an MSR/MRS instruction.\n    Returns the encoding for the option, or PARSE_FAIL.\n \n@@ -6989,6 +7174,26 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  info->qualifier = qualifier;\n \t  break;\n \n+\tcase AARCH64_OPND_SME_ZA_HV_idx_src:\n+\tcase AARCH64_OPND_SME_ZA_HV_idx_dest:\n+\t  {\n+\t    enum sme_hv_slice vector_indicator;\n+\t    int vector_select_register;\n+\t    int imm;\n+\t    val = parse_sme_za_hv_tiles_operand (&str, &vector_indicator,\n+\t                                         &vector_select_register,\n+\t                                         &imm,\n+\t                                         &qualifier);\n+\t    if (val == PARSE_FAIL)\n+\t      goto failure;\n+\t    info->za_tile_vector.regno = val;\n+\t    info->za_tile_vector.index.regno = vector_select_register;\n+\t    info->za_tile_vector.index.imm = imm;\n+\t    info->za_tile_vector.v = vector_indicator;\n+\t    info->qualifier = qualifier;\n+\t    break;\n+\t  }\n+\n \tdefault:\n \t  as_fatal (_(\"unhandled operand code %d\"), operands[i]);\n \t}\n@@ -7533,11 +7738,17 @@ aarch64_canonicalize_symbol_name (char *name)\n #define REGDEF(s,n,t) { #s, n, REG_TYPE_##t, true }\n #define REGDEF_ALIAS(s, n, t) { #s, n, REG_TYPE_##t, false}\n #define REGNUM(p,n,t) REGDEF(p##n, n, t)\n+#define REGNUMS(p,n,s,t) REGDEF(p##n##s, n, t)\n #define REGSET16(p,t) \\\n   REGNUM(p, 0,t), REGNUM(p, 1,t), REGNUM(p, 2,t), REGNUM(p, 3,t), \\\n   REGNUM(p, 4,t), REGNUM(p, 5,t), REGNUM(p, 6,t), REGNUM(p, 7,t), \\\n   REGNUM(p, 8,t), REGNUM(p, 9,t), REGNUM(p,10,t), REGNUM(p,11,t), \\\n   REGNUM(p,12,t), REGNUM(p,13,t), REGNUM(p,14,t), REGNUM(p,15,t)\n+#define REGSET16S(p,s,t) \\\n+  REGNUMS(p, 0,s,t), REGNUMS(p, 1,s,t), REGNUMS(p, 2,s,t), REGNUMS(p, 3,s,t), \\\n+  REGNUMS(p, 4,s,t), REGNUMS(p, 5,s,t), REGNUMS(p, 6,s,t), REGNUMS(p, 7,s,t), \\\n+  REGNUMS(p, 8,s,t), REGNUMS(p, 9,s,t), REGNUMS(p,10,s,t), REGNUMS(p,11,s,t), \\\n+  REGNUMS(p,12,s,t), REGNUMS(p,13,s,t), REGNUMS(p,14,s,t), REGNUMS(p,15,s,t)\n #define REGSET31(p,t) \\\n   REGSET16(p, t), \\\n   REGNUM(p,16,t), REGNUM(p,17,t), REGNUM(p,18,t), REGNUM(p,19,t), \\\n@@ -7588,7 +7799,13 @@ static const reg_entry reg_names[] = {\n   REGSET16 (p, PN), REGSET16 (P, PN),\n \n   /* SME ZA tile registers.  */\n-  REGSET16 (za, ZA), REGSET16 (ZA, ZA)\n+  REGSET16 (za, ZA), REGSET16 (ZA, ZA),\n+\n+  /* SME ZA tile registers (horizontal slice).  */\n+  REGSET16S (za, h, ZAH), REGSET16S (ZA, H, ZAH),\n+\n+  /* SME ZA tile registers (vertical slice).  */\n+  REGSET16S (za, v, ZAV), REGSET16S (ZA, V, ZAV)\n };\n \n #undef REGDEF"
    },
    {
      "sha": "0ff10535ae074c64fc6ac112ed36dc138f2386af",
      "filename": "gas/testsuite/gas/aarch64/sme-2-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2-illegal.d?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-2-illegal.s\n+#error_output: sme-2-illegal.l"
    },
    {
      "sha": "d36456175feec10dd99ac3fe5eb9668b4a35c4f5",
      "filename": "gas/testsuite/gas/aarch64/sme-2-illegal.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2-illegal.l?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,27 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 3 -- `mova z0\\.b,p0/m,za1h\\.b\\[w12,#0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 3 -- `mova z0\\.h,p0/m,za2h\\.h\\[w12,#0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 3 -- `mova z0\\.s,p0/m,za4h\\.s\\[w12,#0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 3 -- `mova z0\\.d,p0/m,za8h\\.d\\[w12,#0\\]'\n+[^:]*:[0-9]+: Error: operand 3 must be an SME horizontal or vertical vector access register -- `mova z0\\.q,p0/m,za16h.q\\[w12\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 3 -- `mova z31\\.b,p7/m,za0v\\.b\\[w15,#16\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 3 -- `mova z31\\.h,p7/m,za1v\\.h\\[w15,#8\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 3 -- `mova z31\\.s,p7/m,za3v\\.s\\[w15,#4\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 3 -- `mova z31\\.d,p7/m,za7v\\.d\\[w15,#2\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 3 -- `mova z31\\.q,p7/m,za15v\\.q\\[w15,#1\\]'\n+[^:]*:[0-9]+: Error: expected ',' at operand 3 -- `mova z31\\.q,p7/m,za15v\\.q\\[w15\\]'\n+[^:]*:[0-9]+: Error: expected '\\[' at operand 3 -- `mova z0\\.b,p0/m,za0v.b'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `mova z31\\.b,p7/m,za0v\\.b\\[15,w15\\]'\n+[^:]*:[0-9]+: Error: expected ',' at operand 3 -- `mova z0\\.h,p0/m,za0v\\.h\\[w12\\. 0\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `mova z0\\.s,p0/m,za0v\\.s\\[x12,0]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `mova z0\\.d,p0/m,za0v\\.d\\[w21,0\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[s12\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[d12\\]'\n+[^:]*:[0-9]+: Error: index offset immediate expected at operand 3 -- `mova z0.q,p0/m,za0v\\.q\\[w12,\\]'\n+[^:]*:[0-9]+: Error: expected ',' at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12\\.\\]'\n+[^:]*:[0-9]+: Error: index offset immediate expected at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12,abc\\]'\n+[^:]*:[0-9]+: Error: index offset immediate expected at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12,#abc\\]'\n+[^:]*:[0-9]+: Error: expected '\\]' at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12,1a\\]'\n+[^:]*:[0-9]+: Error: expected '\\]' at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12,#1a\\]'\n+[^:]*:[0-9]+: Error: expected '\\]' at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12,1a2\\]'\n+[^:]*:[0-9]+: Error: expected '\\]' at operand 3 -- `mova z0\\.q,p0/m,za0v\\.q\\[w12,#1a2\\]'"
    },
    {
      "sha": "28eb6719c910b13f327dccdd14fb85c26de0bf71",
      "filename": "gas/testsuite/gas/aarch64/sme-2-illegal.s",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2-illegal.s?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,32 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* MOVA (tile to vector) variant.  */\n+mova\tz0.b, p0/m, za1h.b[w12, #0]\n+mova\tz0.h, p0/m, za2h.h[w12, #0]\n+mova\tz0.s, p0/m, za4h.s[w12, #0]\n+mova\tz0.d, p0/m, za8h.d[w12, #0]\n+mova\tz0.q, p0/m, za16h.q[w12]\n+\n+mova\tz31.b, p7/m, za0v.b[w15, #16]\n+mova\tz31.h, p7/m, za1v.h[w15, #8]\n+mova\tz31.s, p7/m, za3v.s[w15, #4]\n+mova\tz31.d, p7/m, za7v.d[w15, #2]\n+mova    z31.q, p7/m, za15v.q[w15, #1]\n+mova    z31.q, p7/m, za15v.q[w15]\n+\n+/* Syntax issues.  */\n+mova    z0.b, p0/m, za0v.b\n+mova    z31.b, p7/m, za0v.b[15, w15]\n+mova    z0.h, p0/m, za0v.h[w12. 0]\n+mova    z0.s, p0/m, za0v.s[x12, 0]\n+mova    z0.d, p0/m, za0v.d[w21, 0]\n+mova    z0.q, p0/m, za0v.q[s12]\n+mova    z0.q, p0/m, za0v.q[d12]\n+mova    z0.q, p0/m, za0v.q[w12,]\n+mova    z0.q, p0/m, za0v.q[w12.]\n+mova    z0.q, p0/m, za0v.q[w12, abc]\n+mova    z0.q, p0/m, za0v.q[w12, #abc]\n+mova    z0.q, p0/m, za0v.q[w12, 1a]\n+mova    z0.q, p0/m, za0v.q[w12, #1a]\n+mova    z0.q, p0/m, za0v.q[w12, 1a2]\n+mova    z0.q, p0/m, za0v.q[w12, #1a2]"
    },
    {
      "sha": "2764aac83c9d09bcc48ba52728799abe47e21fc3",
      "filename": "gas/testsuite/gas/aarch64/sme-2.d",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2.d?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,43 @@\n+#name: SME extension, MOVA (tile to vector)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0028000 \tmov\tz0.b, p0/m, za0v.b\\[w12, 0\\]\n+   4:\tc0428000 \tmov\tz0.h, p0/m, za0v.h\\[w12, 0\\]\n+   8:\tc0828000 \tmov\tz0.s, p0/m, za0v.s\\[w12, 0\\]\n+   c:\tc0c28000 \tmov\tz0.d, p0/m, za0v.d\\[w12, 0\\]\n+  10:\tc0c38000 \tmov\tz0.q, p0/m, za0v.q\\[w12, 0\\]\n+  14:\tc002fdff \tmov\tz31.b, p7/m, za0v.b\\[w15, 15\\]\n+  18:\tc042fdff \tmov\tz31.h, p7/m, za1v.h\\[w15, 7\\]\n+  1c:\tc082fdff \tmov\tz31.s, p7/m, za3v.s\\[w15, 3\\]\n+  20:\tc0c2fdff \tmov\tz31.d, p7/m, za7v.d\\[w15, 1\\]\n+  24:\tc0c3fdff \tmov\tz31.q, p7/m, za15v.q\\[w15, 0\\]\n+  28:\tc0020000 \tmov\tz0.b, p0/m, za0h.b\\[w12, 0\\]\n+  2c:\tc0420000 \tmov\tz0.h, p0/m, za0h.h\\[w12, 0\\]\n+  30:\tc0820000 \tmov\tz0.s, p0/m, za0h.s\\[w12, 0\\]\n+  34:\tc0c20000 \tmov\tz0.d, p0/m, za0h.d\\[w12, 0\\]\n+  38:\tc0c30000 \tmov\tz0.q, p0/m, za0h.q\\[w12, 0\\]\n+  3c:\tc0027dff \tmov\tz31.b, p7/m, za0h.b\\[w15, 15\\]\n+  40:\tc0427dff \tmov\tz31.h, p7/m, za1h.h\\[w15, 7\\]\n+  44:\tc0827dff \tmov\tz31.s, p7/m, za3h.s\\[w15, 3\\]\n+  48:\tc0c27dff \tmov\tz31.d, p7/m, za7h.d\\[w15, 1\\]\n+  4c:\tc0c37dff \tmov\tz31.q, p7/m, za15h.q\\[w15, 0\\]\n+  50:\tc0027dff \tmov\tz31.b, p7/m, za0h.b\\[w15, 15\\]\n+  54:\tc0427dff \tmov\tz31.h, p7/m, za1h.h\\[w15, 7\\]\n+  58:\tc0827dff \tmov\tz31.s, p7/m, za3h.s\\[w15, 3\\]\n+  5c:\tc0c27dff \tmov\tz31.d, p7/m, za7h.d\\[w15, 1\\]\n+  60:\tc0c37dff \tmov\tz31.q, p7/m, za15h.q\\[w15, 0\\]\n+  64:\tc0027dff \tmov\tz31.b, p7/m, za0h.b\\[w15, 15\\]\n+  68:\tc0427dff \tmov\tz31.h, p7/m, za1h.h\\[w15, 7\\]\n+  6c:\tc0827dff \tmov\tz31.s, p7/m, za3h.s\\[w15, 3\\]\n+  70:\tc0c27dff \tmov\tz31.d, p7/m, za7h.d\\[w15, 1\\]\n+  74:\tc0c37dff \tmov\tz31.q, p7/m, za15h.q\\[w15, 0\\]\n+  78:\tc0c27dff \tmov\tz31.d, p7/m, za7h.d\\[w15, 1\\]\n+  7c:\tc0c37dff \tmov\tz31.q, p7/m, za15h.q\\[w15, 0\\]\n+  80:\tc002a400 \tmov\tz0.b, p1/m, za0v.b\\[w13, 0\\]\n+  84:\tc002a4e0 \tmov\tz0.b, p1/m, za0v.b\\[w13, 7\\]"
    },
    {
      "sha": "a2d0f0a6491b525a06bddc23f89da0b8dbc81a04",
      "filename": "gas/testsuite/gas/aarch64/sme-2.s",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2.s?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,52 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* MOVA (tile to vector) variant.  */\n+mova\tz0.b, p0/m, za0v.b[w12, 0]\n+mova\tz0.h, p0/m, za0v.h[w12, 0]\n+mova\tz0.s, p0/m, za0v.s[w12, 0]\n+mova\tz0.d, p0/m, za0v.d[w12, 0]\n+mova\tz0.q, p0/m, za0v.q[w12, 0]\n+\n+mova\tz31.b, p7/m, za0v.b[w15, 15]\n+mova\tz31.h, p7/m, za1v.h[w15, 7]\n+mova\tz31.s, p7/m, za3v.s[w15, 3]\n+mova\tz31.d, p7/m, za7v.d[w15, 1]\n+mova\tz31.q, p7/m, za15v.q[w15, 0]\n+\n+mova\tz0.b, p0/m, za0h.b[w12, 0]\n+mova\tz0.h, p0/m, za0h.h[w12, 0]\n+mova\tz0.s, p0/m, za0h.s[w12, 0]\n+mova\tz0.d, p0/m, za0h.d[w12, 0]\n+mova\tz0.q, p0/m, za0h.q[w12, 0]\n+\n+mova\tz31.b, p7/m, za0h.b[w15, 15]\n+mova\tz31.h, p7/m, za1h.h[w15, 7]\n+mova\tz31.s, p7/m, za3h.s[w15, 3]\n+mova\tz31.d, p7/m, za7h.d[w15, 1]\n+mova\tz31.q, p7/m, za15h.q[w15, 0]\n+\n+/* Parser checks.  */\n+mova\tz31.b , p7/m , za0h.b [ w15 , 15 ]\n+mova\tz31.h , p7/m , za1h.h [ w15 , 7 ]\n+mova\tz31.s , p7/m , za3h.s [ w15 , 3 ]\n+mova\tz31.d , p7/m , za7h.d [ w15 , 1 ]\n+mova\tz31.q , p7/m , za15h.q [ w15 , #0 ]\n+mova\tz31.b , p7/m , za0h.b [ w15 , #15 ]\n+mova\tz31.h , p7/m , za1h.h [ w15 , #7 ]\n+mova\tz31.s , p7/m , za3h.s [ w15 , #3 ]\n+mova\tz31.d , p7/m , za7h.d [ w15 , #1 ]\n+mova\tz31.q , p7/m , za15h.q [ w15, #0 ]\n+\n+/* Register aliases.  */\n+foo .req w15\n+bar .req za7h\n+baz .req z31\n+\n+mova\tz31.d , p7/m , bar.d [ foo , #1 ]\n+mova\tbaz.q , p7/m , za15h.q [ foo , #0 ]\n+\n+/* Named immediate.  */\n+val_zero = 0\n+val_seven = 7\n+mova z0.b, p1/m, za0v.b[w13, #val_zero]\n+mova z0.b, p1/m, za0v.b[w13, #val_seven]"
    },
    {
      "sha": "9515e3fc6dcdb2f9565b0bd279fda122b70bc8f9",
      "filename": "gas/testsuite/gas/aarch64/sme-2a.d",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2a.d?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,29 @@\n+#name: SME extension, MOV (tile to vector)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0028000 \tmov\tz0\\.b, p0/m, za0v\\.b\\[w12, 0\\]\n+   4:\tc0428000 \tmov\tz0\\.h, p0/m, za0v\\.h\\[w12, 0\\]\n+   8:\tc0828000 \tmov\tz0\\.s, p0/m, za0v\\.s\\[w12, 0\\]\n+   c:\tc0c28000 \tmov\tz0\\.d, p0/m, za0v\\.d\\[w12, 0\\]\n+  10:\tc0c38000 \tmov\tz0\\.q, p0/m, za0v\\.q\\[w12, 0\\]\n+  14:\tc002fdff \tmov\tz31\\.b, p7/m, za0v\\.b\\[w15, 15\\]\n+  18:\tc042fdff \tmov\tz31\\.h, p7/m, za1v\\.h\\[w15, 7\\]\n+  1c:\tc082fdff \tmov\tz31\\.s, p7/m, za3v\\.s\\[w15, 3\\]\n+  20:\tc0c2fdff \tmov\tz31\\.d, p7/m, za7v\\.d\\[w15, 1\\]\n+  24:\tc0c3fdff \tmov\tz31\\.q, p7/m, za15v\\.q\\[w15, 0\\]\n+  28:\tc0020000 \tmov\tz0\\.b, p0/m, za0h\\.b\\[w12, 0\\]\n+  2c:\tc0420000 \tmov\tz0\\.h, p0/m, za0h\\.h\\[w12, 0\\]\n+  30:\tc0820000 \tmov\tz0\\.s, p0/m, za0h\\.s\\[w12, 0\\]\n+  34:\tc0c20000 \tmov\tz0\\.d, p0/m, za0h\\.d\\[w12, 0\\]\n+  38:\tc0c30000 \tmov\tz0\\.q, p0/m, za0h\\.q\\[w12, 0\\]\n+  3c:\tc0027dff \tmov\tz31\\.b, p7/m, za0h\\.b\\[w15, 15\\]\n+  40:\tc0427dff \tmov\tz31\\.h, p7/m, za1h\\.h\\[w15, 7\\]\n+  44:\tc0827dff \tmov\tz31\\.s, p7/m, za3h\\.s\\[w15, 3\\]\n+  48:\tc0c27dff \tmov\tz31\\.d, p7/m, za7h\\.d\\[w15, 1\\]\n+  4c:\tc0c37dff \tmov\tz31\\.q, p7/m, za15h\\.q\\[w15, 0\\]"
    },
    {
      "sha": "4754981875682ac7d05bef95907b0daf185bb69a",
      "filename": "gas/testsuite/gas/aarch64/sme-2a.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2a.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-2a.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-2a.s?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,26 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* MOV alias (tile to vector) variant.  */\n+mov\tz0.b, p0/m, za0v.b[w12, 0]\n+mov\tz0.h, p0/m, za0v.h[w12, 0]\n+mov\tz0.s, p0/m, za0v.s[w12, 0]\n+mov\tz0.d, p0/m, za0v.d[w12, 0]\n+mov\tz0.q, p0/m, za0v.q[w12, 0]\n+\n+mov\tz31.b, p7/m, za0v.b[w15, 15]\n+mov\tz31.h, p7/m, za1v.h[w15, 7]\n+mov\tz31.s, p7/m, za3v.s[w15, 3]\n+mov\tz31.d, p7/m, za7v.d[w15, 1]\n+mov\tz31.q, p7/m, za15v.q[w15, 0]\n+\n+mov\tz0.b, p0/m, za0h.b[w12, 0]\n+mov\tz0.h, p0/m, za0h.h[w12, 0]\n+mov\tz0.s, p0/m, za0h.s[w12, 0]\n+mov\tz0.d, p0/m, za0h.d[w12, 0]\n+mov\tz0.q, p0/m, za0h.q[w12, 0]\n+\n+mov\tz31.b, p7/m, za0h.b[w15, 15]\n+mov\tz31.h, p7/m, za1h.h[w15, 7]\n+mov\tz31.s, p7/m, za3h.s[w15, 3]\n+mov\tz31.d, p7/m, za7h.d[w15, 1]\n+mov\tz31.q, p7/m, za15h.q[w15, 0]"
    },
    {
      "sha": "5ee89d32d0258e2378a0de22a24090ebda3e5ab3",
      "filename": "gas/testsuite/gas/aarch64/sme-3-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3-illegal.d?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-3-illegal.s\n+#error_output: sme-3-illegal.l"
    },
    {
      "sha": "8babf4c7251f639d85e825e5d09182caef0eeb4e",
      "filename": "gas/testsuite/gas/aarch64/sme-3-illegal.l",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3-illegal.l?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,11 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `mova za1v\\.b\\[w12,#0\\],p0/m,z0.b'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `mova za2v\\.h\\[w12,#0\\],p0/m,z0.h'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `mova za4v\\.s\\[w12,#0\\],p0/m,z0.s'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `mova za8v\\.d\\[w12,#0\\],p0/m,z0.d'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `mova za16v\\.q\\[w12\\],p0/m,z0.q'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `mova za0v\\.b\\[w15,#16\\],p7/m,z31.b'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `mova za1v\\.h\\[w15,#8\\],p7/m,z31.h'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `mova za3v\\.s\\[w15,#4\\],p7/m,z31.s'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `mova za7v\\.d\\[w15,#2\\],p7/m,z31.d'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `mova za15v\\.q\\[w15,#1\\],p7/m,z31.q'"
    },
    {
      "sha": "6ed58ec60a118bb18defb489ccc000f1719394e0",
      "filename": "gas/testsuite/gas/aarch64/sme-3-illegal.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3-illegal.s?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,14 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* MOVA (vector to tile) variant.  */\n+mova    za1v.b[w12, #0], p0/m, z0.b\n+mova    za2v.h[w12, #0], p0/m, z0.h\n+mova    za4v.s[w12, #0], p0/m, z0.s\n+mova    za8v.d[w12, #0], p0/m, z0.d\n+mova    za16v.q[w12], p0/m, z0.q\n+\n+mova    za0v.b[w15, #16], p7/m, z31.b\n+mova    za1v.h[w15, #8], p7/m, z31.h\n+mova    za3v.s[w15, #4], p7/m, z31.s\n+mova    za7v.d[w15, #2], p7/m, z31.d\n+mova    za15v.q[w15, #1], p7/m, z31.q"
    },
    {
      "sha": "82f72ac9751f05962cc353e865f4919bcd9fd788",
      "filename": "gas/testsuite/gas/aarch64/sme-3.d",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3.d?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,31 @@\n+#name: SME extension, MOVA (vector to tile)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0008000 \tmov\tza0v\\.b\\[w12, 0\\], p0/m, z0\\.b\n+   4:\tc0408000 \tmov\tza0v\\.h\\[w12, 0\\], p0/m, z0\\.h\n+   8:\tc0808000 \tmov\tza0v\\.s\\[w12, 0\\], p0/m, z0\\.s\n+   c:\tc0c08000 \tmov\tza0v\\.d\\[w12, 0\\], p0/m, z0\\.d\n+  10:\tc0c18000 \tmov\tza0v\\.q\\[w12, 0\\], p0/m, z0\\.q\n+  14:\tc000ffef \tmov\tza0v\\.b\\[w15, 15\\], p7/m, z31\\.b\n+  18:\tc040ffef \tmov\tza1v\\.h\\[w15, 7\\], p7/m, z31\\.h\n+  1c:\tc080ffef \tmov\tza3v\\.s\\[w15, 3\\], p7/m, z31\\.s\n+  20:\tc0c0ffef \tmov\tza7v\\.d\\[w15, 1\\], p7/m, z31\\.d\n+  24:\tc0c1ffef \tmov\tza15v\\.q\\[w15, 0\\], p7/m, z31\\.q\n+  28:\tc0000000 \tmov\tza0h\\.b\\[w12, 0\\], p0/m, z0\\.b\n+  2c:\tc0400000 \tmov\tza0h\\.h\\[w12, 0\\], p0/m, z0\\.h\n+  30:\tc0800000 \tmov\tza0h\\.s\\[w12, 0\\], p0/m, z0\\.s\n+  34:\tc0c00000 \tmov\tza0h\\.d\\[w12, 0\\], p0/m, z0\\.d\n+  38:\tc0c10000 \tmov\tza0h\\.q\\[w12, 0\\], p0/m, z0\\.q\n+  3c:\tc0007fef \tmov\tza0h\\.b\\[w15, 15\\], p7/m, z31\\.b\n+  40:\tc0407fef \tmov\tza1h\\.h\\[w15, 7\\], p7/m, z31\\.h\n+  44:\tc0807fef \tmov\tza3h\\.s\\[w15, 3\\], p7/m, z31\\.s\n+  48:\tc0c07fef \tmov\tza7h\\.d\\[w15, 1\\], p7/m, z31\\.d\n+  4c:\tc0c17fef \tmov\tza15h\\.q\\[w15, 0\\], p7/m, z31\\.q\n+  50:\tc0008000 \tmov\tza0v\\.b\\[w12, 0\\], p0/m, z0\\.b\n+  54:\tc0c17fef \tmov\tza15h\\.q\\[w15, 0\\], p7/m, z31\\.q"
    },
    {
      "sha": "8efc896f3ab8dfbf98a71149fde0c5b57e0bae37",
      "filename": "gas/testsuite/gas/aarch64/sme-3.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3.s?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,31 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* MOVA (vector to tile) variant.  */\n+mova    za0v.b[w12, 0], p0/m, z0.b\n+mova    za0v.h[w12, 0], p0/m, z0.h\n+mova    za0v.s[w12, 0], p0/m, z0.s\n+mova    za0v.d[w12, 0], p0/m, z0.d\n+mova    za0v.q[w12, 0], p0/m, z0.q\n+\n+mova    za0v.b[w15, 15], p7/m, z31.b\n+mova    za1v.h[w15, 7], p7/m, z31.h\n+mova    za3v.s[w15, 3], p7/m, z31.s\n+mova    za7v.d[w15, 1], p7/m, z31.d\n+mova    za15v.q[w15, 0], p7/m, z31.q\n+\n+mova    za0h.b[w12, 0], p0/m, z0.b\n+mova    za0h.h[w12, 0], p0/m, z0.h\n+mova    za0h.s[w12, 0], p0/m, z0.s\n+mova    za0h.d[w12, 0], p0/m, z0.d\n+mova    za0h.q[w12, 0], p0/m, z0.q\n+\n+mova    za0h.b[w15, 15], p7/m, z31.b\n+mova    za1h.h[w15, 7], p7/m, z31.h\n+mova    za3h.s[w15, 3], p7/m, z31.s\n+mova    za7h.d[w15, 1], p7/m, z31.d\n+mova    za15h.q[w15, 0], p7/m, z31.q\n+\n+foo .req w12\n+bar .req w15\n+mova    za0v.b[foo, 0], p0/m, z0.b\n+mova    za15h.q[bar, 0], p7/m, z31.q"
    },
    {
      "sha": "82835ae0dd5367df3b3a116fa5613a9eca2ad7a2",
      "filename": "gas/testsuite/gas/aarch64/sme-3a.d",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3a.d?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,29 @@\n+#name: SME extension, MOV (vector to tile)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0008000 \tmov\tza0v\\.b\\[w12, 0\\], p0/m, z0\\.b\n+   4:\tc0408000 \tmov\tza0v\\.h\\[w12, 0\\], p0/m, z0\\.h\n+   8:\tc0808000 \tmov\tza0v\\.s\\[w12, 0\\], p0/m, z0\\.s\n+   c:\tc0c08000 \tmov\tza0v\\.d\\[w12, 0\\], p0/m, z0\\.d\n+  10:\tc0c18000 \tmov\tza0v\\.q\\[w12, 0\\], p0/m, z0\\.q\n+  14:\tc000ffef \tmov\tza0v\\.b\\[w15, 15\\], p7/m, z31\\.b\n+  18:\tc040ffef \tmov\tza1v\\.h\\[w15, 7\\], p7/m, z31\\.h\n+  1c:\tc080ffef \tmov\tza3v\\.s\\[w15, 3\\], p7/m, z31\\.s\n+  20:\tc0c0ffef \tmov\tza7v\\.d\\[w15, 1\\], p7/m, z31\\.d\n+  24:\tc0c1ffef \tmov\tza15v\\.q\\[w15, 0\\], p7/m, z31\\.q\n+  28:\tc0000000 \tmov\tza0h\\.b\\[w12, 0\\], p0/m, z0\\.b\n+  2c:\tc0400000 \tmov\tza0h\\.h\\[w12, 0\\], p0/m, z0\\.h\n+  30:\tc0800000 \tmov\tza0h\\.s\\[w12, 0\\], p0/m, z0\\.s\n+  34:\tc0c00000 \tmov\tza0h\\.d\\[w12, 0\\], p0/m, z0\\.d\n+  38:\tc0c10000 \tmov\tza0h\\.q\\[w12, 0\\], p0/m, z0\\.q\n+  3c:\tc0007fef \tmov\tza0h\\.b\\[w15, 15\\], p7/m, z31\\.b\n+  40:\tc0407fef \tmov\tza1h\\.h\\[w15, 7\\], p7/m, z31\\.h\n+  44:\tc0807fef \tmov\tza3h\\.s\\[w15, 3\\], p7/m, z31\\.s\n+  48:\tc0c07fef \tmov\tza7h\\.d\\[w15, 1\\], p7/m, z31\\.d\n+  4c:\tc0c17fef \tmov\tza15h\\.q\\[w15, 0\\], p7/m, z31\\.q"
    },
    {
      "sha": "892a30e28cda70e353e19db3b76f20362e654788",
      "filename": "gas/testsuite/gas/aarch64/sme-3a.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3a.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/gas/testsuite/gas/aarch64/sme-3a.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-3a.s?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -0,0 +1,26 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* MOV alias (vector to tile) variant.  */\n+mov    za0v.b[w12, 0], p0/m, z0.b\n+mov    za0v.h[w12, 0], p0/m, z0.h\n+mov    za0v.s[w12, 0], p0/m, z0.s\n+mov    za0v.d[w12, 0], p0/m, z0.d\n+mov    za0v.q[w12, 0], p0/m, z0.q\n+\n+mov    za0v.b[w15, 15], p7/m, z31.b\n+mov    za1v.h[w15, 7], p7/m, z31.h\n+mov    za3v.s[w15, 3], p7/m, z31.s\n+mov    za7v.d[w15, 1], p7/m, z31.d\n+mov    za15v.q[w15, 0], p7/m, z31.q\n+\n+mov    za0h.b[w12, 0], p0/m, z0.b\n+mov    za0h.h[w12, 0], p0/m, z0.h\n+mov    za0h.s[w12, 0], p0/m, z0.s\n+mov    za0h.d[w12, 0], p0/m, z0.d\n+mov    za0h.q[w12, 0], p0/m, z0.q\n+\n+mov    za0h.b[w15, 15], p7/m, z31.b\n+mov    za1h.h[w15, 7], p7/m, z31.h\n+mov    za3h.s[w15, 3], p7/m, z31.s\n+mov    za7h.d[w15, 1], p7/m, z31.d\n+mov    za15h.q[w15, 0], p7/m, z31.q"
    },
    {
      "sha": "249450c1aba856f0bb886f2751251e3c93a1e398",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -447,6 +447,8 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_ZtxN,\t/* SVE vector register list in Zt.  */\n   AARCH64_OPND_SME_ZAda_2b,\t/* SME <ZAda>.S, 2-bits.  */\n   AARCH64_OPND_SME_ZAda_3b,\t/* SME <ZAda>.D, 3-bits.  */\n+  AARCH64_OPND_SME_ZA_HV_idx_src,\t/* SME source ZA tile vector.  */\n+  AARCH64_OPND_SME_ZA_HV_idx_dest,\t/* SME destination ZA tile vector.  */\n   AARCH64_OPND_SME_Pm,\t\t/* SME scalable predicate register, bits [15:13].  */\n   AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n@@ -1114,6 +1116,18 @@ struct aarch64_opnd_info\n \t  uint32_t flags;\n \t} sysreg;\n \n+      /* ZA tile vector, e.g. <ZAn><HV>.D[<Wv>{, <imm>}]  */\n+      struct\n+\t{\n+\t  int regno;      /* <ZAn> */\n+\t  struct\n+\t  {\n+\t    int regno;    /* <Wv>  */\n+\t    int imm;      /* <imm>  */\n+\t  } index;\n+\t  unsigned v : 1;\t/* <HV> horizontal or vertical vector indicator.  */\n+\t} za_tile_vector;\n+\n       const aarch64_cond *cond;\n       /* The encoding of the PSTATE field.  */\n       aarch64_insn pstatefield;"
    },
    {
      "sha": "eda943eb674ee1b946ae7753130d923faefaab0d",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -663,7 +663,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 207:\n     case 209:\n     case 210:\n-    case 211:\n+    case 213:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 15:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -675,7 +675,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 213:\n+    case 215:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -720,7 +720,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 212:\n+    case 214:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -879,6 +879,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 206:\n     case 208:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n+    case 211:\n+    case 212:\n+      return aarch64_ins_sme_za_hv_tiles (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "9a77d0f7d9a7649c79b2a15da2d95006ba70923e",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -1325,6 +1325,61 @@ aarch64_ins_sve_float_zero_one (const aarch64_operand *self,\n   return true;\n }\n \n+/* Encode in SME instruction such as MOVA ZA tile vector register number,\n+   vector indicator, vector selector and immediate.  */\n+bool\n+aarch64_ins_sme_za_hv_tiles (const aarch64_operand *self,\n+                             const aarch64_opnd_info *info,\n+                             aarch64_insn *code,\n+                             const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                             aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int fld_size;\n+  int fld_q;\n+  int fld_v = info->za_tile_vector.v;\n+  int fld_rv = info->za_tile_vector.index.regno - 12;\n+  int fld_zan_imm = info->za_tile_vector.index.imm;\n+  int regno = info->za_tile_vector.regno;\n+\n+  switch (info->qualifier)\n+    {\n+    case AARCH64_OPND_QLF_S_B:\n+      fld_size = 0;\n+      fld_q = 0;\n+      break;\n+    case AARCH64_OPND_QLF_S_H:\n+      fld_size = 1;\n+      fld_q = 0;\n+      fld_zan_imm |= regno << 3;\n+      break;\n+    case AARCH64_OPND_QLF_S_S:\n+      fld_size = 2;\n+      fld_q = 0;\n+      fld_zan_imm |= regno << 2;\n+      break;\n+    case AARCH64_OPND_QLF_S_D:\n+      fld_size = 3;\n+      fld_q = 0;\n+      fld_zan_imm |= regno << 1;\n+      break;\n+    case AARCH64_OPND_QLF_S_Q:\n+      fld_size = 3;\n+      fld_q = 1;\n+      fld_zan_imm = regno;\n+      break;\n+    default:\n+      assert (0);\n+    }\n+\n+  insert_field (self->fields[0], code, fld_size, 0);\n+  insert_field (self->fields[1], code, fld_q, 0);\n+  insert_field (self->fields[2], code, fld_v, 0);\n+  insert_field (self->fields[3], code, fld_rv, 0);\n+  insert_field (self->fields[4], code, fld_zan_imm, 0);\n+\n+  return true;\n+}\n+\n /* Miscellaneous encoding functions.  */\n \n /* Encode size[0], i.e. bit 22, for"
    },
    {
      "sha": "9cbcd7a86307ca900066b358153f5d1aa91b1540",
      "filename": "opcodes/aarch64-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.h?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -98,6 +98,7 @@ AARCH64_DECL_OPD_INSERTER (ins_sve_reglist);\n AARCH64_DECL_OPD_INSERTER (ins_sve_scale);\n AARCH64_DECL_OPD_INSERTER (ins_sve_shlimm);\n AARCH64_DECL_OPD_INSERTER (ins_sve_shrimm);\n+AARCH64_DECL_OPD_INSERTER (ins_sme_za_hv_tiles);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate1);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate2);\n "
    },
    {
      "sha": "6bde0f35d70e6496e4831f0ea7c5b14e84dcf097",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 200,
      "deletions": 171,
      "changes": 371,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -38,23 +38,23 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                     {\n                       if (((word >> 21) & 0x1) == 0)\n                         {\n-                          if (((word >> 22) & 0x1) == 0)\n+                          if (((word >> 29) & 0x1) == 0)\n                             {\n-                              if (((word >> 23) & 0x1) == 0)\n-                                {\n-                                  /* 33222222222211111111110000000000\n-                                     10987654321098765432109876543210\n-                                     xxx00000000xxxxxxxxxxxxxxxxxxxxx\n-                                     udf.  */\n-                                  return 754;\n-                                }\n-                              else\n+                              if (((word >> 30) & 0x1) == 0)\n                                 {\n-                                  if (((word >> 4) & 0x1) == 0)\n+                                  if (((word >> 22) & 0x1) == 0)\n                                     {\n-                                      if (((word >> 29) & 0x1) == 0)\n+                                      if (((word >> 23) & 0x1) == 0)\n                                         {\n-                                          if (((word >> 30) & 0x1) == 0)\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x0000000000xxxxxxxxxxxxxxxxxxxxx\n+                                             udf.  */\n+                                          return 754;\n+                                        }\n+                                      else\n+                                        {\n+                                          if (((word >> 4) & 0x1) == 0)\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n@@ -64,88 +64,110 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                             }\n                                           else\n                                             {\n-                                              if (((word >> 16) & 0x1) == 0)\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x1000000100xxxx0xxxxxxxxxxx0xxxx\n-                                                     addha.  */\n-                                                  return 2348;\n-                                                }\n-                                              else\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x1000000100xxxx1xxxxxxxxxxx0xxxx\n-                                                     addva.  */\n-                                                  return 2350;\n-                                                }\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x0000000100xxxxxxxxxxxxxxxx1xxxx\n+                                                 fmops.  */\n+                                              return 2357;\n                                             }\n                                         }\n-                                      else\n-                                        {\n-                                          /* 33222222222211111111110000000000\n-                                             10987654321098765432109876543210\n-                                             xx100000100xxxxxxxxxxxxxxxx0xxxx\n-                                             smopa.  */\n-                                          return 2360;\n-                                        }\n                                     }\n                                   else\n                                     {\n-                                      if (((word >> 29) & 0x1) == 0)\n+                                      if (((word >> 4) & 0x1) == 0)\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n-                                             xx000000100xxxxxxxxxxxxxxxx1xxxx\n-                                             fmops.  */\n-                                          return 2357;\n+                                             x0000000x10xxxxxxxxxxxxxxxx0xxxx\n+                                             fmopa.  */\n+                                          return 2355;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n-                                             xx100000100xxxxxxxxxxxxxxxx1xxxx\n-                                             smops.  */\n-                                          return 2362;\n+                                             x0000000x10xxxxxxxxxxxxxxxx1xxxx\n+                                             fmops.  */\n+                                          return 2358;\n                                         }\n                                     }\n                                 }\n-                            }\n-                          else\n-                            {\n-                              if (((word >> 4) & 0x1) == 0)\n+                              else\n                                 {\n-                                  if (((word >> 29) & 0x1) == 0)\n+                                  if (((word >> 17) & 0x1) == 0)\n                                     {\n-                                      if (((word >> 30) & 0x1) == 0)\n+                                      if (((word >> 20) & 0x1) == 0)\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n-                                             x0000000x10xxxxxxxxxxxxxxxx0xxxx\n-                                             fmopa.  */\n-                                          return 2355;\n+                                             x1000000xx00xx0xxxxxxxxxxxxxxxxx\n+                                             mov.  */\n+                                          return 2377;\n                                         }\n                                       else\n                                         {\n                                           if (((word >> 16) & 0x1) == 0)\n                                             {\n-                                              /* 33222222222211111111110000000000\n-                                                 10987654321098765432109876543210\n-                                                 x1000000x10xxxx0xxxxxxxxxxx0xxxx\n-                                                 addha.  */\n-                                              return 2349;\n+                                              if (((word >> 22) & 0x1) == 0)\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     x1000000x001xx00xxxxxxxxxxxxxxxx\n+                                                     addha.  */\n+                                                  return 2348;\n+                                                }\n+                                              else\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     x1000000x101xx00xxxxxxxxxxxxxxxx\n+                                                     addha.  */\n+                                                  return 2349;\n+                                                }\n                                             }\n                                           else\n                                             {\n-                                              /* 33222222222211111111110000000000\n-                                                 10987654321098765432109876543210\n-                                                 x1000000x10xxxx1xxxxxxxxxxx0xxxx\n-                                                 addva.  */\n-                                              return 2351;\n+                                              if (((word >> 22) & 0x1) == 0)\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     x1000000x001xx01xxxxxxxxxxxxxxxx\n+                                                     addva.  */\n+                                                  return 2350;\n+                                                }\n+                                              else\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     x1000000x101xx01xxxxxxxxxxxxxxxx\n+                                                     addva.  */\n+                                                  return 2351;\n+                                                }\n                                             }\n                                         }\n                                     }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         x1000000xx0xxx1xxxxxxxxxxxxxxxxx\n+                                         mov.  */\n+                                      return 2376;\n+                                    }\n+                                }\n+                            }\n+                          else\n+                            {\n+                              if (((word >> 4) & 0x1) == 0)\n+                                {\n+                                  if (((word >> 22) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100000x00xxxxxxxxxxxxxxxx0xxxx\n+                                         smopa.  */\n+                                      return 2360;\n+                                    }\n                                   else\n                                     {\n                                       /* 33222222222211111111110000000000\n@@ -157,13 +179,13 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                 }\n                               else\n                                 {\n-                                  if (((word >> 29) & 0x1) == 0)\n+                                  if (((word >> 22) & 0x1) == 0)\n                                     {\n                                       /* 33222222222211111111110000000000\n                                          10987654321098765432109876543210\n-                                         xx000000x10xxxxxxxxxxxxxxxx1xxxx\n-                                         fmops.  */\n-                                      return 2358;\n+                                         xx100000x00xxxxxxxxxxxxxxxx1xxxx\n+                                         smops.  */\n+                                      return 2362;\n                                     }\n                                   else\n                                     {\n@@ -2731,15 +2753,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurb.  */\n-                                                      return 2416;\n+                                                      return 2420;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2424;\n+                                                      return 2428;\n                                                     }\n                                                 }\n                                               else\n@@ -2750,15 +2772,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurh.  */\n-                                                      return 2420;\n+                                                      return 2424;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2427;\n+                                                      return 2431;\n                                                     }\n                                                 }\n                                             }\n@@ -2838,15 +2860,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurb.  */\n-                                                      return 2417;\n+                                                      return 2421;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2425;\n+                                                      return 2429;\n                                                     }\n                                                 }\n                                               else\n@@ -2857,15 +2879,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurh.  */\n-                                                      return 2421;\n+                                                      return 2425;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2428;\n+                                                      return 2432;\n                                                     }\n                                                 }\n                                             }\n@@ -2948,15 +2970,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursb.  */\n-                                                      return 2419;\n+                                                      return 2423;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursw.  */\n-                                                      return 2426;\n+                                                      return 2430;\n                                                     }\n                                                 }\n                                               else\n@@ -2965,7 +2987,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x1011001100xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2423;\n+                                                  return 2427;\n                                                 }\n                                             }\n                                           else\n@@ -2976,15 +2998,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursb.  */\n-                                                  return 2418;\n+                                                  return 2422;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2422;\n+                                                  return 2426;\n                                                 }\n                                             }\n                                         }\n@@ -3470,15 +3492,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx0xx10xxxxxxxxxx\n                                              setf8.  */\n-                                          return 2414;\n+                                          return 2418;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx1xx10xxxxxxxxxx\n                                              setf16.  */\n-                                          return 2415;\n+                                          return 2419;\n                                         }\n                                     }\n                                   else\n@@ -3624,7 +3646,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010000xxxxxxxxx01xxxxxxxxxx\n                                              rmif.  */\n-                                          return 2413;\n+                                          return 2417;\n                                         }\n                                       else\n                                         {\n@@ -4673,7 +4695,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000110xxxxxxxxxx\n                                                                  usdot.  */\n-                                                              return 2433;\n+                                                              return 2437;\n                                                             }\n                                                         }\n                                                     }\n@@ -4747,7 +4769,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000111xxxxxxxxxx\n                                                                  sudot.  */\n-                                                              return 2434;\n+                                                              return 2438;\n                                                             }\n                                                         }\n                                                     }\n@@ -7366,7 +7388,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              010001x0xx0xxxxx011110xxxxxxxxxx\n                                                              usdot.  */\n-                                                          return 2432;\n+                                                          return 2436;\n                                                         }\n                                                     }\n                                                 }\n@@ -9070,7 +9092,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  011001x0100xxx10101xxxxxxxxxxxxx\n                                                                  bfcvtnt.  */\n-                                                              return 2461;\n+                                                              return 2465;\n                                                             }\n                                                         }\n                                                       else\n@@ -9313,15 +9335,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  101001x00x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1rob.  */\n-                                              return 2437;\n+                                              return 2441;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  101001x01x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1roh.  */\n-                                              return 2438;\n+                                              return 2442;\n                                             }\n                                         }\n                                       else\n@@ -9553,7 +9575,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx010xxxxxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2458;\n+                                                      return 2462;\n                                                     }\n                                                   else\n                                                     {\n@@ -9574,15 +9596,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2465;\n+                                                          return 2469;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx1xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2464;\n+                                                          return 2468;\n                                                         }\n                                                     }\n                                                   else\n@@ -9637,7 +9659,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  x11001x0011xxxxx1x0xxxxxxxxxxxxx\n                                                  bfdot.  */\n-                                              return 2457;\n+                                              return 2461;\n                                             }\n                                           else\n                                             {\n@@ -9649,15 +9671,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx0xxxxxxxxxx\n                                                          bfmlalb.  */\n-                                                      return 2463;\n+                                                      return 2467;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx1xxxxxxxxxx\n                                                          bfmlalt.  */\n-                                                      return 2462;\n+                                                      return 2466;\n                                                     }\n                                                 }\n                                               else\n@@ -9708,15 +9730,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x00x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rob.  */\n-                                                  return 2441;\n+                                                  return 2445;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x01x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1roh.  */\n-                                                  return 2442;\n+                                                  return 2446;\n                                                 }\n                                             }\n                                           else\n@@ -10075,7 +10097,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0101xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2435;\n+                                                      return 2439;\n                                                     }\n                                                   else\n                                                     {\n@@ -10108,7 +10130,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx111xxxxxxxxxxxxx\n                                                          bfmmla.  */\n-                                                      return 2459;\n+                                                      return 2463;\n                                                     }\n                                                   else\n                                                     {\n@@ -10138,7 +10160,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2436;\n+                                                      return 2440;\n                                                     }\n                                                   else\n                                                     {\n@@ -10267,7 +10289,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x00xxxxxxxxxx\n                                                                  zip1.  */\n-                                                              return 2445;\n+                                                              return 2449;\n                                                             }\n                                                           else\n                                                             {\n@@ -10277,15 +10299,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000010xxxxxxxxxx\n                                                                      uzp1.  */\n-                                                                  return 2447;\n+                                                                  return 2451;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000110xxxxxxxxxx\n                                                                      trn1.  */\n-                                                                  return 2449;\n+                                                                  return 2453;\n                                                                 }\n                                                             }\n                                                         }\n@@ -10297,7 +10319,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x01xxxxxxxxxx\n                                                                  zip2.  */\n-                                                              return 2446;\n+                                                              return 2450;\n                                                             }\n                                                           else\n                                                             {\n@@ -10307,15 +10329,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000011xxxxxxxxxx\n                                                                      uzp2.  */\n-                                                                  return 2448;\n+                                                                  return 2452;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000111xxxxxxxxxx\n                                                                      trn2.  */\n-                                                                  return 2450;\n+                                                                  return 2454;\n                                                                 }\n                                                             }\n                                                         }\n@@ -11363,15 +11385,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      010001x1000xxxxx100110xxxxxxxxxx\n                                                                      smmla.  */\n-                                                                  return 2429;\n+                                                                  return 2433;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      010001x1100xxxxx100110xxxxxxxxxx\n                                                                      usmmla.  */\n-                                                                  return 2431;\n+                                                                  return 2435;\n                                                                 }\n                                                             }\n                                                           else\n@@ -11380,7 +11402,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x1x10xxxxx100110xxxxxxxxxx\n                                                                  ummla.  */\n-                                                              return 2430;\n+                                                              return 2434;\n                                                             }\n                                                         }\n                                                     }\n@@ -12876,15 +12898,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2439;\n+                                                  return 2443;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2440;\n+                                                  return 2444;\n                                                 }\n                                             }\n                                         }\n@@ -13258,15 +13280,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2443;\n+                                                  return 2447;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2444;\n+                                                  return 2448;\n                                                 }\n                                             }\n                                         }\n@@ -14700,7 +14722,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          011001x110001x10101xxxxxxxxxxxxx\n                                                                          bfcvt.  */\n-                                                                      return 2460;\n+                                                                      return 2464;\n                                                                     }\n                                                                 }\n                                                               else\n@@ -16769,7 +16791,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1001xxxxxxxxxx\n                                                          smmla.  */\n-                                                      return 2451;\n+                                                      return 2455;\n                                                     }\n                                                 }\n                                             }\n@@ -16802,7 +16824,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0101xxxxxxxxxx\n                                                          sdot.  */\n-                                                      return 2377;\n+                                                      return 2381;\n                                                     }\n                                                 }\n                                               else\n@@ -16876,7 +16898,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1011xxxxxxxxxx\n                                                          usmmla.  */\n-                                                      return 2453;\n+                                                      return 2457;\n                                                     }\n                                                 }\n                                             }\n@@ -16909,7 +16931,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0111xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2454;\n+                                                      return 2458;\n                                                     }\n                                                 }\n                                               else\n@@ -16956,15 +16978,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110000xxxxxxxxxxxxxxxxxxxxx\n                                              eor3.  */\n-                                          return 2384;\n+                                          return 2388;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              1x001110100xxxxxxxxxxxxxxxxxxxxx\n                                              xar.  */\n-                                          return 2386;\n+                                          return 2390;\n                                         }\n                                     }\n                                   else\n@@ -16975,7 +16997,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110x10xxxxx0xxxxxxxxxxxxxxx\n                                              sm3ss1.  */\n-                                          return 2388;\n+                                          return 2392;\n                                         }\n                                       else\n                                         {\n@@ -16989,15 +17011,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx00xxxxxxxxxx\n                                                          sm3tt1a.  */\n-                                                      return 2389;\n+                                                      return 2393;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx00xxxxxxxxxx\n                                                          sha512su0.  */\n-                                                      return 2382;\n+                                                      return 2386;\n                                                     }\n                                                 }\n                                               else\n@@ -17006,7 +17028,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx10xxxxxxxxxx\n                                                      sm3tt2a.  */\n-                                                  return 2391;\n+                                                  return 2395;\n                                                 }\n                                             }\n                                           else\n@@ -17019,15 +17041,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx01xxxxxxxxxx\n                                                          sm3tt1b.  */\n-                                                      return 2390;\n+                                                      return 2394;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx01xxxxxxxxxx\n                                                          sm4e.  */\n-                                                      return 2395;\n+                                                      return 2399;\n                                                     }\n                                                 }\n                                               else\n@@ -17036,7 +17058,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx11xxxxxxxxxx\n                                                      sm3tt2b.  */\n-                                                  return 2392;\n+                                                  return 2396;\n                                                 }\n                                             }\n                                         }\n@@ -17217,7 +17239,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx101110xx0xxxxx100101xxxxxxxxxx\n                                                          udot.  */\n-                                                      return 2376;\n+                                                      return 2380;\n                                                     }\n                                                 }\n                                               else\n@@ -17248,7 +17270,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx101x01xxxxxxxxxx\n                                                      ummla.  */\n-                                                  return 2452;\n+                                                  return 2456;\n                                                 }\n                                               else\n                                                 {\n@@ -17267,7 +17289,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx1x1011xxxxxxxxxx\n                                                      bfmmla.  */\n-                                                  return 2468;\n+                                                  return 2472;\n                                                 }\n                                               else\n                                                 {\n@@ -17277,7 +17299,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx1011100x0xxxxx1x1111xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2466;\n+                                                      return 2470;\n                                                     }\n                                                   else\n                                                     {\n@@ -17287,15 +17309,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x01011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2473;\n+                                                          return 2477;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x11011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2472;\n+                                                          return 2476;\n                                                         }\n                                                     }\n                                                 }\n@@ -17879,15 +17901,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          000011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn.  */\n-                                                                      return 2469;\n+                                                                      return 2473;\n                                                                     }\n                                                                   else\n                                                                     {\n                                                                       /* 33222222222211111111110000000000\n                                                                          10987654321098765432109876543210\n                                                                          010011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn2.  */\n-                                                                      return 2470;\n+                                                                      return 2474;\n                                                                     }\n                                                                 }\n                                                             }\n@@ -18205,7 +18227,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                          10987654321098765432109876543210\n                                          1x001110xx1xxxxx0xxxxxxxxxxxxxxx\n                                          bcax.  */\n-                                      return 2387;\n+                                      return 2391;\n                                     }\n                                 }\n                               else\n@@ -18816,7 +18838,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx100000xxxxxxxxxx\n                                                                  sha512h.  */\n-                                                              return 2380;\n+                                                              return 2384;\n                                                             }\n                                                         }\n                                                     }\n@@ -18868,7 +18890,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx110000xxxxxxxxxx\n                                                                  sm3partw1.  */\n-                                                              return 2393;\n+                                                              return 2397;\n                                                             }\n                                                         }\n                                                     }\n@@ -19111,7 +19133,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100010xxxxxxxxxx\n                                                              sha512su1.  */\n-                                                          return 2383;\n+                                                          return 2387;\n                                                         }\n                                                     }\n                                                   else\n@@ -19187,7 +19209,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110010xxxxxxxxxx\n                                                                  sm4ekey.  */\n-                                                              return 2396;\n+                                                              return 2400;\n                                                             }\n                                                         }\n                                                       else\n@@ -20013,7 +20035,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100001xxxxxxxxxx\n                                                              sha512h2.  */\n-                                                          return 2381;\n+                                                          return 2385;\n                                                         }\n                                                     }\n                                                   else\n@@ -20045,7 +20067,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110001xxxxxxxxxx\n                                                                  sm3partw2.  */\n-                                                              return 2394;\n+                                                              return 2398;\n                                                             }\n                                                         }\n                                                       else\n@@ -20285,7 +20307,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100011xxxxxxxxxx\n                                                              rax1.  */\n-                                                          return 2385;\n+                                                          return 2389;\n                                                         }\n                                                     }\n                                                   else\n@@ -20317,15 +20339,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2399;\n+                                                              return 2403;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2403;\n+                                                              return 2407;\n                                                             }\n                                                         }\n                                                     }\n@@ -20347,15 +20369,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2400;\n+                                                              return 2404;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2404;\n+                                                              return 2408;\n                                                             }\n                                                         }\n                                                     }\n@@ -20394,15 +20416,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2397;\n+                                                              return 2401;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2401;\n+                                                              return 2405;\n                                                             }\n                                                         }\n                                                       else\n@@ -20424,15 +20446,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2398;\n+                                                              return 2402;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2402;\n+                                                              return 2406;\n                                                             }\n                                                         }\n                                                       else\n@@ -22240,15 +22262,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2405;\n+                                                  return 2409;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2409;\n+                                                  return 2413;\n                                                 }\n                                             }\n                                           else\n@@ -22270,15 +22292,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2406;\n+                                                  return 2410;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2410;\n+                                                  return 2414;\n                                                 }\n                                             }\n                                           else\n@@ -22784,15 +22806,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2407;\n+                                                  return 2411;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2411;\n+                                                  return 2415;\n                                                 }\n                                             }\n                                         }\n@@ -22814,15 +22836,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2408;\n+                                                  return 2412;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2412;\n+                                                  return 2416;\n                                                 }\n                                             }\n                                         }\n@@ -22878,15 +22900,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  xx001111xxxxxxxx1110x0xxxxxxxxxx\n                                                  sdot.  */\n-                                              return 2379;\n+                                              return 2383;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  xx101111xxxxxxxx1110x0xxxxxxxxxx\n                                                  udot.  */\n-                                              return 2378;\n+                                              return 2382;\n                                             }\n                                         }\n                                     }\n@@ -22989,15 +23011,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111100xxxxxx1111x0xxxxxxxxxx\n                                                          sudot.  */\n-                                                      return 2456;\n+                                                      return 2460;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          xx00111110xxxxxx1111x0xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2455;\n+                                                      return 2459;\n                                                     }\n                                                 }\n                                               else\n@@ -23008,7 +23030,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111101xxxxxx1111x0xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2467;\n+                                                      return 2471;\n                                                     }\n                                                   else\n                                                     {\n@@ -23018,15 +23040,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x000111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2475;\n+                                                          return 2479;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x100111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2474;\n+                                                          return 2478;\n                                                         }\n                                                     }\n                                                 }\n@@ -23513,6 +23535,10 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n   int value;\n   switch (key)\n     {\n+    case 2377: value = 2379; break;\t/* mov --> mova.  */\n+    case 2379: return NULL;\t\t/* mova --> NULL.  */\n+    case 2376: value = 2378; break;\t/* mov --> mova.  */\n+    case 2378: return NULL;\t\t/* mova --> NULL.  */\n     case 12: value = 19; break;\t/* add --> addg.  */\n     case 19: return NULL;\t\t/* addg --> NULL.  */\n     case 16: value = 20; break;\t/* sub --> subg.  */\n@@ -23660,8 +23686,8 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 824: return NULL;\t\t/* fsqrt --> NULL.  */\n     case 832: value = 833; break;\t/* frintz --> frintz.  */\n     case 833: return NULL;\t\t/* frintz --> NULL.  */\n-    case 825: value = 2471; break;\t/* fcvt --> bfcvt.  */\n-    case 2471: return NULL;\t\t/* bfcvt --> NULL.  */\n+    case 825: value = 2475; break;\t/* fcvt --> bfcvt.  */\n+    case 2475: return NULL;\t\t/* bfcvt --> NULL.  */\n     case 834: value = 835; break;\t/* frinta --> frinta.  */\n     case 835: return NULL;\t\t/* frinta --> NULL.  */\n     case 836: value = 837; break;\t/* frintx --> frintx.  */\n@@ -24164,7 +24190,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 207:\n     case 209:\n     case 210:\n-    case 211:\n+    case 213:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n     case 10:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n@@ -24180,7 +24206,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 213:\n+    case 215:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -24226,7 +24252,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 212:\n+    case 214:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -24387,6 +24413,9 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 206:\n     case 208:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n+    case 211:\n+    case 212:\n+      return aarch64_ext_sme_za_hv_tiles (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "94d3f8c75586b8fa1cbd27890b2a5ed4c43dbb4a",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -1748,6 +1748,64 @@ aarch64_ext_sve_float_zero_one (const aarch64_operand *self,\n   return true;\n }\n \n+/* Decode ZA tile vector, vector indicator, vector selector, qualifier and\n+   immediate on numerous SME instruction fields such as MOVA.  */\n+bool\n+aarch64_ext_sme_za_hv_tiles (const aarch64_operand *self,\n+                             aarch64_opnd_info *info, aarch64_insn code,\n+                             const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                             aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int fld_size = extract_field (self->fields[0], code, 0);\n+  int fld_q = extract_field (self->fields[1], code, 0);\n+  int fld_v = extract_field (self->fields[2], code, 0);\n+  int fld_rv = extract_field (self->fields[3], code, 0);\n+  int fld_zan_imm = extract_field (self->fields[4], code, 0);\n+\n+  /* Deduce qualifier encoded in size and Q fields.  */\n+  if (fld_size == 0)\n+    info->qualifier = AARCH64_OPND_QLF_S_B;\n+  else if (fld_size == 1)\n+    info->qualifier = AARCH64_OPND_QLF_S_H;\n+  else if (fld_size == 2)\n+    info->qualifier = AARCH64_OPND_QLF_S_S;\n+  else if (fld_size == 3 && fld_q == 0)\n+    info->qualifier = AARCH64_OPND_QLF_S_D;\n+  else if (fld_size == 3 && fld_q == 1)\n+    info->qualifier = AARCH64_OPND_QLF_S_Q;\n+\n+  info->za_tile_vector.index.regno = fld_rv + 12;\n+  info->za_tile_vector.v = fld_v;\n+\n+  switch (info->qualifier)\n+    {\n+    case AARCH64_OPND_QLF_S_B:\n+      info->za_tile_vector.regno = 0;\n+      info->za_tile_vector.index.imm = fld_zan_imm;\n+      break;\n+    case AARCH64_OPND_QLF_S_H:\n+      info->za_tile_vector.regno = fld_zan_imm >> 3;\n+      info->za_tile_vector.index.imm = fld_zan_imm & 0x07;\n+      break;\n+    case AARCH64_OPND_QLF_S_S:\n+      info->za_tile_vector.regno = fld_zan_imm >> 2;\n+      info->za_tile_vector.index.imm = fld_zan_imm & 0x03;\n+      break;\n+    case AARCH64_OPND_QLF_S_D:\n+      info->za_tile_vector.regno = fld_zan_imm >> 1;\n+      info->za_tile_vector.index.imm = fld_zan_imm & 0x01;\n+      break;\n+    case AARCH64_OPND_QLF_S_Q:\n+      info->za_tile_vector.regno = fld_zan_imm;\n+      info->za_tile_vector.index.imm = 0;\n+      break;\n+    default:\n+      assert (0);\n+    }\n+\n+  return true;\n+}\n+\n /* Decode Zn[MM], where MM has a 7-bit triangular encoding.  The fields\n    array specifies which field to use for Zn.  MM is encoded in the\n    concatenation of imm5 and SVE_tszh, with imm5 being the less"
    },
    {
      "sha": "842ec554d9639ac0bba3abc80e35c1e4871769e2",
      "filename": "opcodes/aarch64-dis.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-dis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-dis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.h?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -122,6 +122,7 @@ AARCH64_DECL_OPD_EXTRACTOR (ext_sve_reglist);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sve_scale);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sve_shlimm);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sve_shrimm);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_hv_tiles);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate1);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate2);\n "
    },
    {
      "sha": "e80cbf20e5265140046f402d1a8297242ed3dfdd",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -235,6 +235,8 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_ZtxN\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zt}, \"a list of SVE vector registers\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZAda_2b\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_ZAda_2b}, \"an SME ZA tile ZA0-ZA3\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZAda_3b\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_ZAda_3b}, \"an SME ZA tile ZA0-ZA7\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_src\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_5}, \"an SME horizontal or vertical vector access register\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_dest\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2}, \"an SME horizontal or vertical vector access register\"},\n   {AARCH64_OPND_CLASS_PRED_REG, \"SME_Pm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Pm}, \"an SVE predicate register\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},"
    },
    {
      "sha": "b12bf3e0f52fb6a73fd2a61d31dfe897ca313f6c",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -242,6 +242,7 @@ const aarch64_field fields[] =\n     { 11,  4 },\t/* imm4: in advsimd ext and advsimd ins instructions.  */\n     {  0,  4 },\t/* imm4_2: in rmif instructions.  */\n     { 10,  4 },\t/* imm4_3: in adddg/subg instructions.  */\n+    {  5,  4 }, /* imm4_5: in SME instructions.  */\n     { 16,  5 },\t/* imm5: in conditional compare (immediate) instructions.  */\n     { 15,  7 },\t/* imm7: in load/store pair pre/post index instructions.  */\n     { 13,  8 },\t/* imm8: in floating-point scalar move immediate inst.  */\n@@ -323,6 +324,10 @@ const aarch64_field fields[] =\n     { 22,  1 }, /* SVE_xs_22: UXTW/SXTW select (bit 22).  */\n     {  0,  2 }, /* SME ZAda tile ZA0-ZA3.  */\n     {  0,  3 }, /* SME ZAda tile ZA0-ZA7.  */\n+    { 22,  2 }, /* SME_size_10: size<1>, size<0> class field, [23:22].  */\n+    { 16,  1 }, /* SME_Q: Q class bit, bit 16.  */\n+    { 15,  1 }, /* SME_V: (horizontal / vertical tiles), bit 15.  */\n+    { 13,  2 }, /* SME_Rv: vector select register W12-W15, bits [14:13].  */\n     { 13,  3 }, /* SME Pm second source scalable predicate register P0-P7.  */\n     { 11,  2 }, /* rotate1: FCMLA immediate rotate.  */\n     { 13,  2 }, /* rotate2: Indexed element FCMLA immediate rotate.  */\n@@ -3355,6 +3360,16 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n                 aarch64_get_qualifier_name (opnd->qualifier));\n       break;\n \n+    case AARCH64_OPND_SME_ZA_HV_idx_src:\n+    case AARCH64_OPND_SME_ZA_HV_idx_dest:\n+      snprintf (buf, size, \"za%d%c.%s[w%d, %d]\",\n+                opnd->za_tile_vector.regno,\n+                opnd->za_tile_vector.v == 1 ? 'v' : 'h',\n+                aarch64_get_qualifier_name (opnd->qualifier),\n+                opnd->za_tile_vector.index.regno,\n+                opnd->za_tile_vector.index.imm);\n+      break;\n+\n     case AARCH64_OPND_CRn:\n     case AARCH64_OPND_CRm:\n       snprintf (buf, size, \"C%\" PRIi64, opnd->imm.value);"
    },
    {
      "sha": "9c657dfb06c364a099088217be4f36f52f203523",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -71,6 +71,7 @@ enum aarch64_field_kind\n   FLD_imm4,\n   FLD_imm4_2,\n   FLD_imm4_3,\n+  FLD_imm4_5,\n   FLD_imm5,\n   FLD_imm7,\n   FLD_imm8,\n@@ -152,6 +153,10 @@ enum aarch64_field_kind\n   FLD_SVE_xs_22,\n   FLD_SME_ZAda_2b,\n   FLD_SME_ZAda_3b,\n+  FLD_SME_size_10,\n+  FLD_SME_Q,\n+  FLD_SME_V,\n+  FLD_SME_Rv,\n   FLD_SME_Pm,\n   FLD_rotate1,\n   FLD_rotate2,\n@@ -186,7 +191,7 @@ struct aarch64_operand\n \n   /* The associated instruction bit-fields; no operand has more than 4\n      bit-fields */\n-  enum aarch64_field_kind fields[4];\n+  enum aarch64_field_kind fields[5];\n \n   /* Brief description */\n   const char *desc;"
    },
    {
      "sha": "5307cda4b3cf4a2d787f49532f3199f57254f193",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "patch": "@@ -2203,6 +2203,14 @@\n {                                                       \\\n   QLF5(S_D,P_M,P_M,S_H,S_H)                             \\\n }\n+#define OP_SME_BHSDQ_PM_BHSDQ                           \\\n+{                                                       \\\n+  QLF3(S_B,P_M,S_B),                                    \\\n+  QLF3(S_H,P_M,S_H),                                    \\\n+  QLF3(S_S,P_M,S_S),                                    \\\n+  QLF3(S_D,P_M,S_D),                                    \\\n+  QLF3(S_Q,P_M,S_Q)                                     \\\n+}\n \n /* e.g. UDOT <Vd>.2S, <Vn>.8B, <Vm>.8B.  */\n #define QL_V3DOT\t   \\\n@@ -5123,6 +5131,11 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n   SME_INSN (\"usmops\", 0xa1800010, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n   SME_I64_INSN (\"usmops\", 0xa1c00010, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n \n+  SME_INSN (\"mov\", 0xc0020000, 0xff3e0200, sme_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SME_ZA_HV_idx_src), OP_SME_BHSDQ_PM_BHSDQ, 0, 0),\n+  SME_INSN (\"mov\", 0xc0000000, 0xff3e0010, sme_misc, 0, OP3 (SME_ZA_HV_idx_dest, SVE_Pg3, SVE_Zn), OP_SME_BHSDQ_PM_BHSDQ, 0, 0),\n+  SME_INSN (\"mova\", 0xc0020000, 0xff3e0200, sme_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SME_ZA_HV_idx_src), OP_SME_BHSDQ_PM_BHSDQ, 0, 0),\n+  SME_INSN (\"mova\", 0xc0000000, 0xff3e0010, sme_misc, 0, OP3 (SME_ZA_HV_idx_dest, SVE_Pg3, SVE_Zn), OP_SME_BHSDQ_PM_BHSDQ, 0, 0),\n+\n   /* SIMD Dot Product (optional in v8.2-A).  */\n   DOT_INSN (\"udot\", 0x2e009400, 0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n   DOT_INSN (\"sdot\", 0xe009400,  0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n@@ -5694,6 +5707,12 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n       \"an SME ZA tile ZA0-ZA3\")\t\t\t\t\t\\\n     Y(SVE_REG, regno, \"SME_ZAda_3b\", 0, F(FLD_SME_ZAda_3b),\t\t\\\n       \"an SME ZA tile ZA0-ZA7\")\t\t\t\t\t\\\n+    Y(SVE_REG, sme_za_hv_tiles, \"SME_ZA_HV_idx_src\", 0,\t\t\t\t\\\n+      F(FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_5),\\\n+      \"an SME horizontal or vertical vector access register\")\t\\\n+    Y(SVE_REG, sme_za_hv_tiles, \"SME_ZA_HV_idx_dest\", 0,\t\t\t\t\\\n+      F(FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2),\\\n+      \"an SME horizontal or vertical vector access register\")\t\\\n     Y(PRED_REG, regno, \"SME_Pm\", 0, F(FLD_SME_Pm),\t\t\t\\\n       \"an SVE predicate register\")\t\t\t\t\t\\\n     Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\"
    }
  ]
}