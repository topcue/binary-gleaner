{
  "sha": "75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzVmYWY1YzQxZDdmYzcxM2I3M2NiYjM1MjNkY2M2Y2EzODU1Zjk4ZQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-14T14:47:05Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-14T14:58:21Z"
    },
    "message": "AArch64: Allow additional sizes in prologue\n\nWhen saving registers to the stack at the start of a function, not all state\nneeds to be saved. For example, only the first 64bits of float registers need\nsaving.  However, a program may choose to store extra state if it wishes,\nthere is nothing preventing it doing so.\n\nThe aarch64_analyze_prologue will error if it detects extra state being\nstored.  Relex this restriction.\n\nTested via aarch64-prologue test.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_analyze_prologue): Allow any valid\n\tregister sizes.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/aarch64-prologue.c: New test.\n\t* gdb.arch/aarch64-prologue.exp: New file.",
    "tree": {
      "sha": "13c3e9db418c097aac541e71db336d8c85289d7b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/13c3e9db418c097aac541e71db336d8c85289d7b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b1c896b365f2dbcd14145a88d103623244cf0fb0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1c896b365f2dbcd14145a88d103623244cf0fb0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b1c896b365f2dbcd14145a88d103623244cf0fb0"
    }
  ],
  "stats": {
    "total": 161,
    "additions": 139,
    "deletions": 22
  },
  "files": [
    {
      "sha": "6f7474f2826b2d988b4e9de9f94b0c432d3cf42f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-tdep.c (aarch64_analyze_prologue): Allow any valid\n+\tregister sizes.\n+\n 2019-08-14  Tom Tromey  <tromey@adacore.com>\n \n \t* darwin-nat.c: Include gdbarch.h."
    },
    {
      "sha": "5e9f7b8ee0aae73079b144c30cd3b4fa308e873e",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 10,
      "deletions": 22,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
      "patch": "@@ -387,17 +387,16 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t{\n \t  unsigned rt = inst.operands[0].reg.regno;\n \t  unsigned rn = inst.operands[1].addr.base_regno;\n-\t  int is64\n-\t    = (aarch64_get_qualifier_esize (inst.operands[0].qualifier) == 8);\n+\t  int size = aarch64_get_qualifier_esize (inst.operands[0].qualifier);\n \n \t  gdb_assert (aarch64_num_of_operands (inst.opcode) == 2);\n \t  gdb_assert (inst.operands[0].type == AARCH64_OPND_Rt);\n \t  gdb_assert (inst.operands[1].type == AARCH64_OPND_ADDR_SIMM9);\n \t  gdb_assert (!inst.operands[1].addr.offset.is_reg);\n \n-\t  stack.store (pv_add_constant (regs[rn],\n-\t\t\t\t\tinst.operands[1].addr.offset.imm),\n-\t\t       is64 ? 8 : 4, regs[rt]);\n+\t  stack.store\n+\t    (pv_add_constant (regs[rn], inst.operands[1].addr.offset.imm),\n+\t     size, regs[rt]);\n \t}\n       else if ((inst.opcode->iclass == ldstpair_off\n \t\t|| (inst.opcode->iclass == ldstpair_indexed\n@@ -409,6 +408,7 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t  unsigned rt2;\n \t  unsigned rn = inst.operands[2].addr.base_regno;\n \t  int32_t imm = inst.operands[2].addr.offset.imm;\n+\t  int size = aarch64_get_qualifier_esize (inst.operands[0].qualifier);\n \n \t  gdb_assert (inst.operands[0].type == AARCH64_OPND_Rt\n \t\t      || inst.operands[0].type == AARCH64_OPND_Ft);\n@@ -430,17 +430,12 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t  rt2 = inst.operands[1].reg.regno;\n \t  if (inst.operands[0].type == AARCH64_OPND_Ft)\n \t    {\n-\t      /* Only bottom 64-bit of each V register (D register) need\n-\t\t to be preserved.  */\n-\t      gdb_assert (inst.operands[0].qualifier == AARCH64_OPND_QLF_S_D);\n \t      rt1 += AARCH64_X_REGISTER_COUNT;\n \t      rt2 += AARCH64_X_REGISTER_COUNT;\n \t    }\n \n-\t  stack.store (pv_add_constant (regs[rn], imm), 8,\n-\t\t       regs[rt1]);\n-\t  stack.store (pv_add_constant (regs[rn], imm + 8), 8,\n-\t\t       regs[rt2]);\n+\t  stack.store (pv_add_constant (regs[rn], imm), size, regs[rt1]);\n+\t  stack.store (pv_add_constant (regs[rn], imm + size), size, regs[rt2]);\n \n \t  if (inst.operands[2].addr.writeback)\n \t    regs[rn] = pv_add_constant (regs[rn], imm);\n@@ -457,21 +452,14 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t  unsigned int rt = inst.operands[0].reg.regno;\n \t  int32_t imm = inst.operands[1].addr.offset.imm;\n \t  unsigned int rn = inst.operands[1].addr.base_regno;\n-\t  bool is64\n-\t    = (aarch64_get_qualifier_esize (inst.operands[0].qualifier) == 8);\n+\t  int size = aarch64_get_qualifier_esize (inst.operands[0].qualifier);\n \t  gdb_assert (inst.operands[0].type == AARCH64_OPND_Rt\n \t\t      || inst.operands[0].type == AARCH64_OPND_Ft);\n \n \t  if (inst.operands[0].type == AARCH64_OPND_Ft)\n-\t    {\n-\t      /* Only bottom 64-bit of each V register (D register) need\n-\t\t to be preserved.  */\n-\t      gdb_assert (inst.operands[0].qualifier == AARCH64_OPND_QLF_S_D);\n-\t      rt += AARCH64_X_REGISTER_COUNT;\n-\t    }\n+\t    rt += AARCH64_X_REGISTER_COUNT;\n \n-\t  stack.store (pv_add_constant (regs[rn], imm),\n-\t\t       is64 ? 8 : 4, regs[rt]);\n+\t  stack.store (pv_add_constant (regs[rn], imm), size, regs[rt]);\n \t  if (inst.operands[1].addr.writeback)\n \t    regs[rn] = pv_add_constant (regs[rn], imm);\n \t}"
    },
    {
      "sha": "6c80a69e065fc69d80786771718137c3a4f0c8c9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.arch/aarch64-prologue.c: New test.\n+\t* gdb.arch/aarch64-prologue.exp: New file.\n+\n 2019-08-13  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.gdb/selftest.exp (send ^C to child process again): Accept also"
    },
    {
      "sha": "aa664f704fb24e60c55f6c4c2ab15af0858556d3",
      "filename": "gdb/testsuite/gdb.arch/aarch64-prologue.c",
      "status": "added",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/testsuite/gdb.arch/aarch64-prologue.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/testsuite/gdb.arch/aarch64-prologue.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-prologue.c?ref=75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
      "patch": "@@ -0,0 +1,83 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+\n+extern void excessiveprologue ();\n+\n+void\n+innerfunc ()\n+{\n+  printf (\"inner\\n\");\n+}\n+\n+/* excessiveprologue saves to the stack in multiple ways.  */\n+\n+asm (\"\\t.section .gnu.sgstubs,\\\"ax\\\",%progbits\\n\"\n+     \"\\t.global excessiveprologue\\n\"\n+     \"\\t.type excessiveprologue, %function\\n\"\n+     \"excessiveprologue:\\n\"\n+     \"\\tstp\tx29, x30, [sp, #-208]!\\n\"\n+     \"\\tmov\tx29, sp\\n\"\n+     \"\\tstp\tw0,w1,[sp,16]\\n\"\n+     \"\\tstp\tx2,x3,[sp,24]\\n\"\n+     \"\\tstr\tw4,[sp,40]\\n\"\n+     \"\\tstr\tx5,[sp,48]\\n\"\n+     \"\\tstur\tw6,[sp,52]\\n\"\n+     \"\\tstur\tx7,[sp,56]\\n\"\n+     \"\\tstp\ts0,s1,[sp,64]\\n\"\n+     \"\\tstp\td2,d3,[sp,72]\\n\"\n+     \"\\tstp\tq4,q5,[sp,96]\\n\"\n+     \"\\tstr\tb6,[sp,128]\\n\"\n+     \"\\tstr\th7,[sp,132]\\n\"\n+     \"\\tstr\ts8,[sp,136]\\n\"\n+     \"\\tstr\td9,[sp,140]\\n\"\n+     \"\\tstr\tq10,[sp,148]\\n\"\n+     \"\\tstur\tb11,[sp,164]\\n\"\n+     \"\\tstur\th12,[sp,160]\\n\"\n+     \"\\tstur\ts13,[sp,172]\\n\"\n+     \"\\tstur\td14,[sp,176]\\n\"\n+     \"\\tstur\tq15,[sp,184]\\n\"\n+     \"\\tbl innerfunc\\n\"\n+     \"\\tldp\tw0,w1,[sp,16]\\n\"\n+     \"\\tldp\tx2,x3,[sp,24]\\n\"\n+     \"\\tldr\tw4,[sp,40]\\n\"\n+     \"\\tldr\tx5,[sp,48]\\n\"\n+     \"\\tldur\tw6,[sp,52]\\n\"\n+     \"\\tldur\tx7,[sp,56]\\n\"\n+     \"\\tldp\ts0,s1,[sp,64]\\n\"\n+     \"\\tldp\td2,d3,[sp,72]\\n\"\n+     \"\\tldp\tq4,q5,[sp,96]\\n\"\n+     \"\\tldr\tb6,[sp,128]\\n\"\n+     \"\\tldr\th7,[sp,132]\\n\"\n+     \"\\tldr\ts8,[sp,136]\\n\"\n+     \"\\tldr\td9,[sp,140]\\n\"\n+     \"\\tldr\tq10,[sp,148]\\n\"\n+     \"\\tldur\tb11,[sp,164]\\n\"\n+     \"\\tldur\th12,[sp,160]\\n\"\n+     \"\\tldur\ts13,[sp,172]\\n\"\n+     \"\\tldur\td14,[sp,176]\\n\"\n+     \"\\tldur\tq15,[sp,184]\\n\"\n+     \"\\tldp\tx29, x30, [sp], #208\\n\"\n+     \"ret\\n\");\n+\n+int\n+main (void)\n+{\n+  excessiveprologue ();\n+  return 0;\n+}"
    },
    {
      "sha": "e31261ad25623d39ea2729e8c1ccb95af9c42d1b",
      "filename": "gdb/testsuite/gdb.arch/aarch64-prologue.exp",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/testsuite/gdb.arch/aarch64-prologue.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75faf5c41d7fc713b73cbb3523dcc6ca3855f98e/gdb/testsuite/gdb.arch/aarch64-prologue.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-prologue.exp?ref=75faf5c41d7fc713b73cbb3523dcc6ca3855f98e",
      "patch": "@@ -0,0 +1,36 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the gdb testsuite.\n+\n+if {![is_aarch64_target]} {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return 1\n+}\n+\n+standard_testfile\n+if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile {nodebug}]} {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+   untested \"could not run to main\"\n+   return -1\n+}\n+\n+# Ensure gdb can break at excessiveprologue then continue.\n+gdb_breakpoint \"excessiveprologue\"\n+gdb_continue_to_breakpoint \"excessiveprologue\"\n+gdb_continue_to_end \"excessiveprologue\" \"continue\" 1"
    }
  ]
}