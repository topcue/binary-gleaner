{
  "sha": "eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWFlMGI1YzNiMmQ2Yjc2YzNlZDgwMTQ2YmM5MzhlMGQ2YjdlOWZlYw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-08-26T15:26:13Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-08-26T15:26:13Z"
    },
    "message": "Fix sanitization problems running the linker testsuite for the alpha-elf target.\n\n\tPR 26416\n\t* elf64-alpha.c (elf64_alpha_relax_tls_get_addr): Test for and\n\tignore local symbols.\n\t(elf64_alpha_relax_got_load): Do not check for local dynamic\n\tsymbols.\n\t(OP_LDA, OP_LDAH, OP_LDQ, OP_BR, OP_BSR): Use unsigned constant\n\tvalues.\n\t(INSN_A) Cast the A parameter to unsigned.\n\t(INSN_AB): Define in terms of INSN_A.\n\t(INSN_ABC): Likewise.\n\t(INSN_ABO): Likewise.\n\t(INSN_AD): Likewise.",
    "tree": {
      "sha": "a741e096dc5fbcf768bc2c18de93667fd491d11b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a741e096dc5fbcf768bc2c18de93667fd491d11b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b74a6c6086033907f4ea1dbd61166ee63b6f0a99",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b74a6c6086033907f4ea1dbd61166ee63b6f0a99",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b74a6c6086033907f4ea1dbd61166ee63b6f0a99"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 27,
    "deletions": 11
  },
  "files": [
    {
      "sha": "9a59177e61df795781f65a80672dad880905d988",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec",
      "patch": "@@ -1,5 +1,18 @@\n 2020-08-26  Nick Clifton  <nickc@redhat.com>\n \n+\tPR 26416\n+\t* elf64-alpha.c (elf64_alpha_relax_tls_get_addr): Test for and\n+\tignore local symbols.\n+\t(elf64_alpha_relax_got_load): Do not check for local dynamic\n+\tsymbols.\n+\t(OP_LDA, OP_LDAH, OP_LDQ, OP_BR, OP_BSR): Use unsigned constant\n+\tvalues.\n+\t(INSN_A) Cast the A parameter to unsigned.\n+\t(INSN_AB): Define in terms of INSN_A.\n+\t(INSN_ABC): Likewise.\n+\t(INSN_ABO): Likewise.\n+\t(INSN_AD): Likewise.\n+\n \tPR 26411\n \t* elfnn-aarch64.c (elfNN_aarch64_relocate_section): Use an\n \tunsigned long constant when creating a mask to test for alignment"
    },
    {
      "sha": "fd1f4b20be138fc878d7784f71edf0a3741fb546",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=eae0b5c3b2d6b76c3ed80146bc938e0d6b7e9fec",
      "patch": "@@ -52,11 +52,11 @@\n \f\n /* Instruction data for plt generation and relaxation.  */\n \n-#define OP_LDA\t\t0x08\n-#define OP_LDAH\t\t0x09\n-#define OP_LDQ\t\t0x29\n-#define OP_BR\t\t0x30\n-#define OP_BSR\t\t0x34\n+#define OP_LDA\t\t0x08U\n+#define OP_LDAH\t\t0x09U\n+#define OP_LDQ\t\t0x29U\n+#define OP_BR\t\t0x30U\n+#define OP_BSR\t\t0x34U\n \n #define INSN_LDA\t(OP_LDA << 26)\n #define INSN_LDAH\t(OP_LDAH << 26)\n@@ -73,11 +73,11 @@\n #define INSN_JMP\t0x68000000\n #define INSN_JSR_MASK\t0xfc00c000\n \n-#define INSN_A(I,A)\t\t(I | (A << 21))\n-#define INSN_AB(I,A,B)\t\t(I | (A << 21) | (B << 16))\n-#define INSN_ABC(I,A,B,C)\t(I | (A << 21) | (B << 16) | C)\n-#define INSN_ABO(I,A,B,O)\t(I | (A << 21) | (B << 16) | ((O) & 0xffff))\n-#define INSN_AD(I,A,D)\t\t(I | (A << 21) | (((D) >> 2) & 0x1fffff))\n+#define INSN_A(I,A)\t\t(I | ((unsigned) A << 21))\n+#define INSN_AB(I,A,B)\t\t(INSN_A (I, A) | (B << 16))\n+#define INSN_ABC(I,A,B,C)\t(INSN_A (I, A) | (B << 16) | C)\n+#define INSN_ABO(I,A,B,O)\t(INSN_A (I, A) | (B << 16) | ((O) & 0xffff))\n+#define INSN_AD(I,A,D)\t\t(INSN_A (I, A) | (((D) >> 2) & 0x1fffff))\n \n /* PLT/GOT Stuff */\n \n@@ -2995,7 +2995,8 @@ elf64_alpha_relax_got_load (struct alpha_relax_info *info, bfd_vma symval,\n     }\n \n   /* Can't relax dynamic symbols.  */\n-  if (alpha_elf_dynamic_symbol_p (&info->h->root, info->link_info))\n+  if (info->h != NULL\n+      && alpha_elf_dynamic_symbol_p (&info->h->root, info->link_info))\n     return TRUE;\n \n   /* Can't use local-exec relocations in shared libraries.  */\n@@ -3463,6 +3464,8 @@ elf64_alpha_relax_tls_get_addr (struct alpha_relax_info *info, bfd_vma symval,\n   bfd_boolean dynamic, use_gottprel;\n   unsigned long new_symndx;\n \n+  if (info->h == NULL)\n+    return TRUE; /* FIXME: Should this be return FALSE ?  */\n   dynamic = alpha_elf_dynamic_symbol_p (&info->h->root, info->link_info);\n \n   /* If a TLS symbol is accessed using IE at least once, there is no point"
    }
  ]
}