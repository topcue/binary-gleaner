{
  "sha": "2c72d5e58a55d3e0f867ffd9421184852f051cb7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM3MmQ1ZTU4YTU1ZDNlMGY4NjdmZmQ5NDIxMTg0ODUyZjA1MWNiNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-28T02:30:30Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-28T02:30:33Z"
    },
    "message": "Rewrite tui_puts\n\nThis rewrites tui_puts.  It now writes as many bytes as possible in a\ncall to waddnstr, letting curses handle multi-byte sequences properly.\n\nNote that tui_puts_internal remains.  It is needed to handle computing\nthe start line of the readline prompt, which is difficult to do\nproperly in the case where redisplaying can also cause the command\nwindow to scroll.  This might be possible to implement by reverting to\nsingle \"character\" output, by using mbsrtowcs for its side effects to\nfind character boundaries in the input.  I have not attempted this.\n\ngdb/ChangeLog\n2020-09-27  Tom Tromey  <tom@tromey.com>\n\n\tPR tui/25342:\n\t* tui/tui-io.c (tui_puts): Rewrite.  Move earlier.",
    "tree": {
      "sha": "30777c30b8de39921bc12251304c487961f7cef1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30777c30b8de39921bc12251304c487961f7cef1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c72d5e58a55d3e0f867ffd9421184852f051cb7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c72d5e58a55d3e0f867ffd9421184852f051cb7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c72d5e58a55d3e0f867ffd9421184852f051cb7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c72d5e58a55d3e0f867ffd9421184852f051cb7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "35a982372fd63da7dd2811d6150b0c61236bbbb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35a982372fd63da7dd2811d6150b0c61236bbbb5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/35a982372fd63da7dd2811d6150b0c61236bbbb5"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 68,
    "deletions": 12
  },
  "files": [
    {
      "sha": "7a73f9a047f9a204c6973fb0b486c1e47b066e64",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c72d5e58a55d3e0f867ffd9421184852f051cb7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c72d5e58a55d3e0f867ffd9421184852f051cb7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2c72d5e58a55d3e0f867ffd9421184852f051cb7",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-27  Tom Tromey  <tom@tromey.com>\n+\n+\tPR tui/25342:\n+\t* tui/tui-io.c (tui_puts): Rewrite.  Move earlier.\n+\n 2020-09-27  Tom Tromey  <tom@tromey.com>\n \n \tPR tui/25342:"
    },
    {
      "sha": "1a2764e21967adcd48e360501f61af2daf8295b4",
      "filename": "gdb/tui/tui-io.c",
      "status": "modified",
      "additions": 63,
      "deletions": 12,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c72d5e58a55d3e0f867ffd9421184852f051cb7/gdb/tui/tui-io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c72d5e58a55d3e0f867ffd9421184852f051cb7/gdb/tui/tui-io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.c?ref=2c72d5e58a55d3e0f867ffd9421184852f051cb7",
      "patch": "@@ -435,6 +435,69 @@ tui_write (const char *buf, size_t length)\n   tui_puts (copy.c_str ());\n }\n \n+/* Print a string in the curses command window.  The output is\n+   buffered.  It is up to the caller to refresh the screen if\n+   necessary.  */\n+\n+void\n+tui_puts (const char *string, WINDOW *w)\n+{\n+  if (w == nullptr)\n+    w = TUI_CMD_WIN->handle.get ();\n+\n+  while (true)\n+    {\n+      const char *next = strpbrk (string, \"\\n\\1\\2\\033\\t\");\n+\n+      /* Print the plain text prefix.  */\n+      size_t n_chars = next == nullptr ? strlen (string) : next - string;\n+      if (n_chars > 0)\n+\twaddnstr (w, string, n_chars);\n+\n+      /* We finished.  */\n+      if (next == nullptr)\n+\tbreak;\n+\n+      char c = *next;\n+      switch (c)\n+\t{\n+\tcase '\\1':\n+\tcase '\\2':\n+\t  /* Ignore these, they are readline escape-marking\n+\t     sequences.  */\n+\t  ++next;\n+\t  break;\n+\n+\tcase '\\n':\n+\tcase '\\t':\n+\t  do_tui_putc (w, c);\n+\t  ++next;\n+\t  break;\n+\n+\tcase '\\033':\n+\t  {\n+\t    size_t bytes_read = apply_ansi_escape (w, next);\n+\t    if (bytes_read > 0)\n+\t      next += bytes_read;\n+\t    else\n+\t      {\n+\t\t/* Just drop the escape.  */\n+\t\t++next;\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  gdb_assert_not_reached (\"missing case in tui_puts\");\n+\t}\n+\n+      string = next;\n+    }\n+\n+  if (TUI_CMD_WIN != nullptr && w == TUI_CMD_WIN->handle.get ())\n+    update_cmdwin_start_line ();\n+}\n+\n static void\n tui_puts_internal (WINDOW *w, const char *string, int *height)\n {\n@@ -480,18 +543,6 @@ tui_puts_internal (WINDOW *w, const char *string, int *height)\n     wrefresh (w);\n }\n \n-/* Print a string in the curses command window.  The output is\n-   buffered.  It is up to the caller to refresh the screen if\n-   necessary.  */\n-\n-void\n-tui_puts (const char *string, WINDOW *w)\n-{\n-  if (w == nullptr)\n-    w = TUI_CMD_WIN->handle.get ();\n-  tui_puts_internal (w, string, nullptr);\n-}\n-\n /* Readline callback.\n    Redisplay the command line with its prompt after readline has\n    changed the edited text.  */"
    }
  ]
}