{
  "sha": "a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTgxMjk1MTJmNmNkMmNlNmNiZjM3OWYzYmVjMDBmZTQxYzMwNGE0Mw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-17T22:33:42Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-17T23:07:41Z"
    },
    "message": "gdb.base/{prologue,symbol-alias}.exp C++ify\n\nMake these testcases work when compiled as C++ programs.\n\nThese testcases use the alias attribute, which requires passing in the\ntarget function's mangled name in C++.  To avoid having to figure out\nhow the functions are mangled, explicitly specify a linkage name.\nThis is preferred over 'extern \"C\"' because that doesn't work with\nstatic functions.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/prologue.c [__cplusplus] (marker): Explicitly specify\n\tlinkage name.\n\t* gdb.base/prologue.exp: Use print /d.\n\t* gdb.base/symbol-alias.exp: Handle C++ output.\n\t* gdb.base/symbol-alias2.c: Handle C++ output.\n\t[__cplusplus] (func): Explicitly specify linkage name.",
    "tree": {
      "sha": "297a93fffb7484c8a67c6567e6b3c5c4fef78b63",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/297a93fffb7484c8a67c6567e6b3c5c4fef78b63"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a83cdcb636a661fe0070160d58b69a27be9ae079",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a83cdcb636a661fe0070160d58b69a27be9ae079",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a83cdcb636a661fe0070160d58b69a27be9ae079"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 23,
    "deletions": 2
  },
  "files": [
    {
      "sha": "b123bb60540d0a9bd597166468043de98866f061",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-17  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.base/prologue.c [__cplusplus] (marker): Explicitly specify\n+\tlinkage name.\n+\t* gdb.base/prologue.exp: Use print /d.\n+\t* gdb.base/symbol-alias.exp: Handle C++ output.\n+\t* gdb.base/symbol-alias2.c: Handle C++ output.\n+\t[__cplusplus] (func): Explicitly specify linkage name.\n+\n 2020-09-17  Pedro Alves  <pedro@palves.net>\n \n \t* gdb.python/py-nested-maps.c (struct key_t): Rename to..."
    },
    {
      "sha": "717bd3f106eb58f5b866db83984e14eef6d49c9d",
      "filename": "gdb/testsuite/gdb.base/prologue.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/prologue.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/prologue.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/prologue.c?ref=a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
      "patch": "@@ -20,6 +20,12 @@ int leaf (void)\n   return 1;\n }\n \n+#ifdef __cplusplus\n+/* So that the alias attribute below work without having to figure out\n+   this function's mangled name.  */\n+int marker (int val) asm (\"marker\");\n+#endif\n+\n int marker (int val)\n {\n   leaf ();"
    },
    {
      "sha": "20ab22efb9edcc0e42b598297ff1b3e048599b55",
      "filename": "gdb/testsuite/gdb.base/prologue.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/prologue.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/prologue.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/prologue.exp?ref=a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
      "patch": "@@ -59,4 +59,4 @@ set pc1 [find_breakpoint_pc \"marker\"]\n \n set pc2 [find_breakpoint_pc \"other\"]\n \n-gdb_test \"print $pc1 == $pc2\" \"\\\\\\$$decimal = 1\" \"same pc from minimal symbol\"\n+gdb_test \"print /d $pc1 == $pc2\" \"\\\\\\$$decimal = 1\" \"same pc from minimal symbol\""
    },
    {
      "sha": "1907cad478d92de5009a1e9f4086c947004c168e",
      "filename": "gdb/testsuite/gdb.base/symbol-alias.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/symbol-alias.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/symbol-alias.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/symbol-alias.exp?ref=a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
      "patch": "@@ -27,7 +27,7 @@ if ![runto_main] then {\n \n # Functions.\n foreach f {\"func\" \"func_alias\"} {\n-    gdb_test \"p $f\" \" = {struct S \\\\*\\\\(void\\\\)} $hex <func>\"\n+    gdb_test \"p $f\" \" = {(struct )?S \\\\*\\\\(void\\\\)} $hex <func(\\\\(\\\\))?>\"\n     gdb_test \"p *${f}()\" \"= {field1 = 1, field2 = 2}\"\n }\n "
    },
    {
      "sha": "2c6185f45168a6bdbe1bbc5773902eaa39814bb3",
      "filename": "gdb/testsuite/gdb.base/symbol-alias2.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/symbol-alias2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8129512f6cd2ce6cbf379f3bec00fe41c304a43/gdb/testsuite/gdb.base/symbol-alias2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/symbol-alias2.c?ref=a8129512f6cd2ce6cbf379f3bec00fe41c304a43",
      "patch": "@@ -23,6 +23,12 @@ struct S\n \n struct S g_var_s = { 1, 2 };\n \n+#ifdef __cplusplus\n+/* So that the alias attribute below work without having to figure out\n+   this function's mangled name.  */\n+static struct S *func (void) asm (\"func\");\n+#endif\n+\n static struct S *\n func (void)\n {"
    }
  ]
}