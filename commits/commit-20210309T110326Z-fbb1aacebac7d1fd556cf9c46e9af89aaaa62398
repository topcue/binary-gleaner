{
  "sha": "fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJiMWFhY2ViYWM3ZDFmZDU1NmNmOWM0NmU5YWY4OWFhYWE2MjM5OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-08T21:24:52Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-09T11:03:26Z"
    },
    "message": "gdb: fix field names of GDB's type main_type structure\n\nIn commit:\n\n  commit 5b7d941b90d1a232dc144dc14850dd2fb63c35da\n  Date:   Fri Jan 22 12:21:09 2021 -0500\n\n      gdb: add owner-related methods to struct type\n\ntwo fields of struct maint_type were renamed.  'flag_objfile_owned'\nbecame 'm_flag_objfile_owned' and 'owner' became 'm_owner'.  Update\nour python helper script to take this into account.\n\nI've added a basic test that uses the self-test framework to load the\npretty printers, and print a type.\n\nThe test relies on stopping in GDB's `value_print` function.\n\ngdb/ChangeLog:\n\n\t* gdb-gdb.py.in (StructMainTypePrettyPrinter) <owner_to_string>:\n\tUpdated fields names flag_objfile_owned to m_flag_objfile_owned,\n\tand owner to m_owner.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.gdb/python-helper.exp: New file.",
    "tree": {
      "sha": "044e79d9b46d403295673509fd6a6d4a4fba88a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/044e79d9b46d403295673509fd6a6d4a4fba88a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "611aa09d994fc5a8a9444075e65f0d6d4ebf4922",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/611aa09d994fc5a8a9444075e65f0d6d4ebf4922",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/611aa09d994fc5a8a9444075e65f0d6d4ebf4922"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 155,
    "deletions": 3
  },
  "files": [
    {
      "sha": "80f541551fad2572d35c3dd90ad33f5cdcfc4f22",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb-gdb.py.in (StructMainTypePrettyPrinter) <owner_to_string>:\n+\tUpdated fields names flag_objfile_owned to m_flag_objfile_owned,\n+\tand owner to m_owner.\n+\n 2021-03-09  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n         * f-exp.h (eval_op_f_loc): Declare."
    },
    {
      "sha": "f58b3073d5c845718845256609583bb13927c92a",
      "filename": "gdb/gdb-gdb.py.in",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/gdb-gdb.py.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/gdb-gdb.py.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb-gdb.py.in?ref=fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
      "patch": "@@ -142,10 +142,10 @@ class StructMainTypePrettyPrinter:\n     def owner_to_string(self):\n         \"\"\"Return an image of component \"owner\".\n         \"\"\"\n-        if self.val['flag_objfile_owned'] != 0:\n-            return \"%s (objfile)\" % self.val['owner']['objfile']\n+        if self.val['m_flag_objfile_owned'] != 0:\n+            return \"%s (objfile)\" % self.val['m_owner']['objfile']\n         else:\n-            return \"%s (gdbarch)\" % self.val['owner']['gdbarch']\n+            return \"%s (gdbarch)\" % self.val['m_owner']['gdbarch']\n \n     def struct_field_location_img(self, field_val):\n         \"\"\"Return an image of the loc component inside the given field"
    },
    {
      "sha": "d3e91f611a97b2f311a325e8ba7a07461c19b553",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.gdb/python-helper.exp: New file.\n+\n 2020-03-04  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n         * gdb.fortran/intrinsics.exp: Add LOC tests."
    },
    {
      "sha": "54c256eb2e0d9e6530fc727fe62d38e2cad420bd",
      "filename": "gdb/testsuite/gdb.gdb/python-helper.exp",
      "status": "added",
      "additions": 142,
      "deletions": 0,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/testsuite/gdb.gdb/python-helper.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbb1aacebac7d1fd556cf9c46e9af89aaaa62398/gdb/testsuite/gdb.gdb/python-helper.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.gdb/python-helper.exp?ref=fbb1aacebac7d1fd556cf9c46e9af89aaaa62398",
      "patch": "@@ -0,0 +1,142 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test exercises the gdb-gdb.py helper script that is generated\n+# into the GDB build directory.  This script is intended for use by\n+# developers to make debugging GDB easier.\n+\n+load_lib selftest-support.exp\n+\n+if [target_info exists gdb,noinferiorio] {\n+    verbose \"Skipping because of no inferiorio capabilities.\"\n+    return\n+}\n+\n+# Find the helper script in the GDB build directory.\n+set py_helper_script [file dirname $GDB]/gdb-gdb.py\n+if { ![file readable $py_helper_script] \\\n+\t || [file type $py_helper_script] != \"file\" } {\n+    untested \"failed to find gdb-gdb.py helper script\"\n+    return\n+}\n+\n+# Start GDB and check that we have python support.\n+gdb_start\n+if { [skip_python_tests] } {\n+    untested \"skipped gdb-gdb.py tests due to lack of python support\"\n+    return\n+}\n+gdb_exit\n+\n+# The main test.  This is called by the self-test framework once GDB\n+# has been started on a copy of itself.\n+proc test_python_helper {} {\n+    global py_helper_script decimal hex gdb_prompt\n+    global inferior_spawn_id\n+\n+    # Source the python helper script.  This script registers the\n+    # pretty printer for the object file called 'gdb', however, in our\n+    # selftests we rename 'gdb' to 'xgdb', so the pretty printer\n+    # doesn't get registered by default.\n+    #\n+    # So, after sourcing the script we do our own objfile scan and\n+    # register the pretty printer for the objfile called 'xgdb'.\n+    gdb_test_no_output \"source $py_helper_script\" \\\n+\t\"source gdb-gdb.py helper script\"\n+    gdb_test [multi_line_input \\\n+\t\t  \"python\" \\\n+\t\t  \"for objfile in gdb.objfiles():\" \\\n+\t\t  \"  if os.path.basename(objfile.filename) == \\\"xgdb\\\":\" \\\n+\t\t  \"    objfile.pretty_printers.append(type_lookup_function)\" \\\n+\t\t  \"end\"] \".*\" \\\n+\t\"register the type pretty printer\"\n+\n+    # Now place a breakpoint somewhere useful.  This can be any function that:\n+    # (a) is easy to reach by issuing a simple gdb command, and\n+    # (b) is unlikely to be modified very often within gdb, and\n+    # (c) has a parameter that is either a 'struct type *' or a 'struct value *'.\n+    gdb_breakpoint value_print\n+\n+    # Adjust the prompt on the outer gdb, this just makes things a\n+    # little clearer when trying to unpick which GDB is active.\n+    gdb_test_multiple \"set prompt (xgdb) \" \"set xgdb prompt\" {\n+\t-re \"\\[(\\]xgdb\\[)\\].*\\[(\\]xgdb\\[)\\] $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    # Send a command to the outer GDB to continue the inner GDB.  The\n+    # stop is being detected from the inner GDB, hence the use of -i\n+    # here.\n+    gdb_test_multiple \"continue\" \"start inner gdb\" {\n+\t-i \"$inferior_spawn_id\"\n+\t-re \"\\r\\n$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    # Send a command to the inner GDB (hence send_inferior), this\n+    # should result in the outer GDB stopping at the breakpoint we\n+    # just created.\n+    send_inferior \"print 1\\n\"\n+    gdb_test_multiple \"\" \"hit breakpoint in inner gdb\" {\n+\t-re \"hit Breakpoint $decimal, value_print.*\\\\(xgdb\\\\) $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    # Now inspect the type of parameter VAL, this should trigger the\n+    # pretty printers.\n+    set answer [multi_line \\\n+\t\t    \"${decimal} = \" \\\n+\t\t    \"{pointer_type = 0x0,\" \\\n+\t\t    \" reference_type = 0x0,\" \\\n+\t\t    \" chain = 0x0,\" \\\n+\t\t    \" instance_flags = 0,\" \\\n+\t\t    \" length = $decimal,\" \\\n+\t\t    \" main_type = $hex}\" \\\n+\t\t    \"\\\\(xgdb\\\\) $\"]\n+    gdb_test_multiple \"print *val->type\" \"pretty print type\" {\n+\t-re \"$answer\" {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re \"There is no member named.*\\r\\n\\\\(xgdb\\\\) $\" {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+\n+    set answer [multi_line \\\n+\t\t    \"$decimal = \" \\\n+\t\t    \"{name = $hex \\\"int\\\",\" \\\n+\t\t    \" code = TYPE_CODE_INT,\" \\\n+\t\t    \" flags = \\[^\\r\\n\\]+,\" \\\n+\t\t    \" owner = $hex \\\\(gdbarch\\\\),\" \\\n+\t\t    \" target_type = 0x0,\" \\\n+\t\t    \" type_specific_field = TYPE_SPECIFIC_NONE}\" \\\n+\t\t    \"\\\\(xgdb\\\\) $\"]\n+    gdb_test_multiple \"print *val->type->main_type\" \"pretty print type->main_type\" {\n+\t-re \"$answer\" {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re \"There is no member named.*\\r\\n\\\\(xgdb\\\\) $\" {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+# Use the self-test framework to run the test.\n+do_self_tests captured_main test_python_helper"
    }
  ]
}