{
  "sha": "8ecb59f8567956c1520b491ea31396363efcb1ef",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGVjYjU5Zjg1Njc5NTZjMTUyMGI0OTFlYTMxMzk2MzYzZWZjYjFlZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-09T13:46:39Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-19T19:23:05Z"
    },
    "message": "Print non-Ada unions without crashing\n\nada-lang.c is a bit too eager trying to decode unions in the Ada style\n-- looking for discriminants and such.  This causes crashes when\nprinting a non-Ada union in Ada mode, something that can easily happen\nwhen printing a value from history or certain registers on AArch64.\n\nThis patch fixes the bug by changing ada-lang.c to only apply special\nAda treatment to types coming from an Ada CU.  This in turn required a\ncouple of surprising changes.\n\nFirst, some of the Ada code was already using HAVE_GNAT_AUX_INFO to\ndecide whether a type had already been fixed -- such types had\nINIT_CPLUS_SPECIFIC called on them.  This patch changes these spots to\nuse the \"none\" identifier instead.\n\nThis then required changing value_rtti_type to avoid changing the\nlanguage-specific object attached to an Ada type, which seems like a\ngood change regardless.\n\nTested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-04-19  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (ada_is_variant_part, ada_to_fixed_type_1):\n\tCheck ADA_TYPE_P.\n\t(empty_record, ada_template_to_fixed_record_type_1)\n\t(template_to_static_fixed_type)\n\t(to_record_with_fixed_variant_part): Use INIT_NONE_SPECIFIC.\n\t* cp-abi.c (value_rtti_type): Check HAVE_CPLUS_STRUCT.\n\t* gdbtypes.h (INIT_NONE_SPECIFIC, ADA_TYPE_P): New\n\tmacros.\n\ngdb/testsuite/ChangeLog\n2019-04-19  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/ptype_union.c: New file.\n\t* gdb.ada/ptype_union.exp: New file.",
    "tree": {
      "sha": "f0e0de7b531df940914dadf2d8a9df74fd079498",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f0e0de7b531df940914dadf2d8a9df74fd079498"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8ecb59f8567956c1520b491ea31396363efcb1ef",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ecb59f8567956c1520b491ea31396363efcb1ef",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8ecb59f8567956c1520b491ea31396363efcb1ef",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ecb59f8567956c1520b491ea31396363efcb1ef/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "62160ec9547cdd21ac7334d9a378ca2930aac61c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62160ec9547cdd21ac7334d9a378ca2930aac61c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/62160ec9547cdd21ac7334d9a378ca2930aac61c"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 116,
    "deletions": 5
  },
  "files": [
    {
      "sha": "013d80b83f21a0851ff64cf9fc6bc2a722896f1c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -1,3 +1,14 @@\n+2019-04-19  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (ada_is_variant_part, ada_to_fixed_type_1):\n+\tCheck ADA_TYPE_P.\n+\t(empty_record, ada_template_to_fixed_record_type_1)\n+\t(template_to_static_fixed_type)\n+\t(to_record_with_fixed_variant_part): Use INIT_NONE_SPECIFIC.\n+\t* cp-abi.c (value_rtti_type): Check HAVE_CPLUS_STRUCT.\n+\t* gdbtypes.h (INIT_NONE_SPECIFIC, ADA_TYPE_P): New\n+\tmacros.\n+\n 2019-04-19  Ilya Yu. Malakhov  <malakhov@mcst.ru>\n \n \tPR symtab/24423:"
    },
    {
      "sha": "250ce438b1a9a6b45851594a6654fbd81c021eed",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -6961,6 +6961,10 @@ ada_is_wrapper_field (struct type *type, int field_num)\n int\n ada_is_variant_part (struct type *type, int field_num)\n {\n+  /* Only Ada types are eligible.  */\n+  if (!ADA_TYPE_P (type))\n+    return 0;\n+\n   struct type *field_type = TYPE_FIELD_TYPE (type, field_num);\n \n   return (TYPE_CODE (field_type) == TYPE_CODE_UNION\n@@ -8258,7 +8262,7 @@ empty_record (struct type *templ)\n   TYPE_CODE (type) = TYPE_CODE_STRUCT;\n   TYPE_NFIELDS (type) = 0;\n   TYPE_FIELDS (type) = NULL;\n-  INIT_CPLUS_SPECIFIC (type);\n+  INIT_NONE_SPECIFIC (type);\n   TYPE_NAME (type) = \"<empty>\";\n   TYPE_LENGTH (type) = 0;\n   return type;\n@@ -8312,7 +8316,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n \n   rtype = alloc_type_copy (type);\n   TYPE_CODE (rtype) = TYPE_CODE_STRUCT;\n-  INIT_CPLUS_SPECIFIC (rtype);\n+  INIT_NONE_SPECIFIC (rtype);\n   TYPE_NFIELDS (rtype) = nfields;\n   TYPE_FIELDS (rtype) = (struct field *)\n     TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n@@ -8587,7 +8591,7 @@ template_to_static_fixed_type (struct type *type0)\n \t    {\n \t      TYPE_TARGET_TYPE (type0) = type = alloc_type_copy (type0);\n \t      TYPE_CODE (type) = TYPE_CODE (type0);\n-\t      INIT_CPLUS_SPECIFIC (type);\n+\t      INIT_NONE_SPECIFIC (type);\n \t      TYPE_NFIELDS (type) = nfields;\n \t      TYPE_FIELDS (type) = (struct field *)\n \t\tTYPE_ALLOC (type, nfields * sizeof (struct field));\n@@ -8636,7 +8640,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n \n   rtype = alloc_type_copy (type);\n   TYPE_CODE (rtype) = TYPE_CODE_STRUCT;\n-  INIT_CPLUS_SPECIFIC (rtype);\n+  INIT_NONE_SPECIFIC (rtype);\n   TYPE_NFIELDS (rtype) = nfields;\n   TYPE_FIELDS (rtype) =\n     (struct field *) TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n@@ -9005,6 +9009,11 @@ ada_to_fixed_type_1 (struct type *type, const gdb_byte *valaddr,\n                    CORE_ADDR address, struct value *dval, int check_tag)\n {\n   type = ada_check_typedef (type);\n+\n+  /* Only un-fixed types need to be handled here.  */\n+  if (!HAVE_GNAT_AUX_INFO (type))\n+    return type;\n+\n   switch (TYPE_CODE (type))\n     {\n     default:"
    },
    {
      "sha": "bbb74d426382fa0662d8b78340e5dc51793fb51f",
      "filename": "gdb/cp-abi.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/cp-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/cp-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-abi.c?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -109,7 +109,8 @@ value_rtti_type (struct value *v, int *full,\n {\n   struct type *ret = NULL;\n \n-  if ((current_cp_abi.rtti_type) == NULL)\n+  if ((current_cp_abi.rtti_type) == NULL\n+      || !HAVE_CPLUS_STRUCT (check_typedef (value_type (v))))\n     return NULL;\n   try\n     {"
    },
    {
      "sha": "a5f6afc6faddb72a3aa8151c07dcd3a30897f163",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -1255,6 +1255,10 @@ extern void allocate_cplus_struct_type (struct type *);\n   (TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_CPLUS_STUFF \\\n    && TYPE_RAW_CPLUS_SPECIFIC (type) !=  &cplus_struct_default)\n \n+#define INIT_NONE_SPECIFIC(type) \\\n+  (TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_NONE, \\\n+   TYPE_MAIN_TYPE (type)->type_specific = {})\n+\n extern const struct gnat_aux_type gnat_aux_default;\n \n extern void allocate_gnat_aux_type (struct type *);\n@@ -1268,6 +1272,12 @@ extern void allocate_gnat_aux_type (struct type *);\n #define HAVE_GNAT_AUX_INFO(type) \\\n   (TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_GNAT_STUFF)\n \n+/* * True if TYPE is known to be an Ada type of some kind.  */\n+#define ADA_TYPE_P(type)\t\t\t\t\t\\\n+  (TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_GNAT_STUFF\t\\\n+    || (TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_NONE\t\\\n+\t&& TYPE_FIXED_INSTANCE (type)))\n+\n #define INIT_FUNC_SPECIFIC(type)\t\t\t\t\t       \\\n   (TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_FUNC,\t\t\t       \\\n    TYPE_MAIN_TYPE (type)->type_specific.func_stuff = (struct func_type *)      \\"
    },
    {
      "sha": "aaa110c558879f24caddd90122a93bbd6c60e91f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-19  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/ptype_union.c: New file.\n+\t* gdb.ada/ptype_union.exp: New file.\n+\n 2019-04-19  Tom Tromey  <tromey@adacore.com>\n \n \tPR symtab/24423:"
    },
    {
      "sha": "eef9c5a92d34311933565cd7feb04664e6cd25b9",
      "filename": "gdb/testsuite/gdb.ada/ptype_union.c",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/testsuite/gdb.ada/ptype_union.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/testsuite/gdb.ada/ptype_union.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/ptype_union.c?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -0,0 +1,41 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+union a\n+{\n+  int l;\n+  double m;\n+};\n+\n+union b\n+{\n+  char *n;\n+  float o;\n+};\n+\n+struct s\n+{\n+  union a af;\n+  union b bf;\n+};\n+\n+struct s global;\n+\n+int main ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "4f33721c817e965bddac5161eccc2e5856906e96",
      "filename": "gdb/testsuite/gdb.ada/ptype_union.exp",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/testsuite/gdb.ada/ptype_union.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ecb59f8567956c1520b491ea31396363efcb1ef/gdb/testsuite/gdb.ada/ptype_union.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/ptype_union.exp?ref=8ecb59f8567956c1520b491ea31396363efcb1ef",
      "patch": "@@ -0,0 +1,34 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile .c\n+\n+if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n+    return -1\n+}\n+\n+# The test case is written in C, because it was easy to make the\n+# required type there; but the bug itself only happens in Ada.\n+gdb_test \"set lang ada\" \"\"\n+\n+gdb_test \"ptype global\" \\\n+    [multi_line \\\n+\t \"type = record\" \\\n+\t \"\\[ \\t\\]*af: a;\" \\\n+\t \"\\[ \\t\\]*bf: b;\" \\\n+\t \"end record\"]\n+\n+gdb_test \"print global\" \\\n+    \" = \\\\(af => \\\\(l => 0, m => 0.0\\\\), bf => \\\\(n => 0x0, o => 0.0\\\\)\\\\)\""
    }
  ]
}