{
  "sha": "6b5a7bc768570edc15532759969cd9bff3f02c28",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmI1YTdiYzc2ODU3MGVkYzE1NTMyNzU5OTY5Y2Q5YmZmM2YwMmMyOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-16T00:44:37Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-16T00:44:37Z"
    },
    "message": "Handle member pointers directly in generic_value_print\n\nTYPE_CODE_MEMBERPTR and TYPE_CODE_METHODPTR are only used for C++, so\nit seems to me that the generic value-printing code ought to handle\nthese cases -- that way, printing these objects will work even when\nthe current language is not C++.  This patch implements this idea.\n\ngdb/ChangeLog\n2020-09-15  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (rust_value_print_inner): Remove TYPE_CODE_MEMBERPTR\n\tand TYPE_CODE_METHODPTR cases.\n\t* c-valprint.c (c_value_print_memberptr): Move to valprint.c.\n\t(c_value_print_inner): Update.\n\t* valprint.c (generic_value_print_memberptr): New function, from\n\tc_value_print_memberptr.\n\t(generic_value_print): Use it.  Call cplus_print_method_ptr.",
    "tree": {
      "sha": "59a29752067c8019fb858be4bc89a44e6c310be9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/59a29752067c8019fb858be4bc89a44e6c310be9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6b5a7bc768570edc15532759969cd9bff3f02c28",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b5a7bc768570edc15532759969cd9bff3f02c28",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6b5a7bc768570edc15532759969cd9bff3f02c28",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b5a7bc768570edc15532759969cd9bff3f02c28/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce0e8d978314a2d7e45be442fa0bc76412110ad4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce0e8d978314a2d7e45be442fa0bc76412110ad4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce0e8d978314a2d7e45be442fa0bc76412110ad4"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 41,
    "deletions": 32
  },
  "files": [
    {
      "sha": "fe4b185e1934b668d133a71e77f12eb12e7294fe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6b5a7bc768570edc15532759969cd9bff3f02c28",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (rust_value_print_inner): Remove TYPE_CODE_MEMBERPTR\n+\tand TYPE_CODE_METHODPTR cases.\n+\t* c-valprint.c (c_value_print_memberptr): Move to valprint.c.\n+\t(c_value_print_inner): Update.\n+\t* valprint.c (generic_value_print_memberptr): New function, from\n+\tc_value_print_memberptr.\n+\t(generic_value_print): Use it.  Call cplus_print_method_ptr.\n+\n 2020-09-15  Tom Tromey  <tromey@adacore.com>\n \n \t* python/python-internal.h (PyInt_FromLong): Remove define."
    },
    {
      "sha": "01b1071cb70878dc727a3bff70a170c31d03fc0e",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 25,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=6b5a7bc768570edc15532759969cd9bff3f02c28",
      "patch": "@@ -416,31 +416,13 @@ c_value_print_int (struct value *val, struct ui_file *stream,\n     }\n }\n \n-/* c_value_print helper for TYPE_CODE_MEMBERPTR.  */\n-\n-static void\n-c_value_print_memberptr (struct value *val, struct ui_file *stream,\n-\t\t\t int recurse,\n-\t\t\t const struct value_print_options *options)\n-{\n-  if (!options->format)\n-    {\n-      struct type *type = check_typedef (value_type (val));\n-      const gdb_byte *valaddr = value_contents_for_printing (val);\n-      cp_print_class_member (valaddr, type, stream, \"&\");\n-    }\n-  else\n-    generic_value_print (val, stream, recurse, options, &c_decorations);\n-}\n-\n /* See c-lang.h.  */\n \n void\n c_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n \t\t     const struct value_print_options *options)\n {\n   struct type *type = value_type (val);\n-  const gdb_byte *valaddr = value_contents_for_printing (val);\n \n   type = check_typedef (type);\n   switch (type->code ())\n@@ -449,10 +431,6 @@ c_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n       c_value_print_array (val, stream, recurse, options);\n       break;\n \n-    case TYPE_CODE_METHODPTR:\n-      cplus_print_method_ptr (valaddr, type, stream);\n-      break;\n-\n     case TYPE_CODE_PTR:\n       c_value_print_ptr (val, stream, recurse, options);\n       break;\n@@ -466,10 +444,8 @@ c_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n       c_value_print_int (val, stream, options);\n       break;\n \n+    case TYPE_CODE_METHODPTR:\n     case TYPE_CODE_MEMBERPTR:\n-      c_value_print_memberptr (val, stream, recurse, options);\n-      break;\n-\n     case TYPE_CODE_REF:\n     case TYPE_CODE_RVALUE_REF:\n     case TYPE_CODE_ENUM:"
    },
    {
      "sha": "fa02b18e6fa1ac010875bfc5fd9105bc64addab6",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=6b5a7bc768570edc15532759969cd9bff3f02c28",
      "patch": "@@ -535,11 +535,6 @@ rust_value_print_inner (struct value *val, struct ui_file *stream,\n       }\n       goto generic_print;\n \n-    case TYPE_CODE_METHODPTR:\n-    case TYPE_CODE_MEMBERPTR:\n-      c_value_print_inner (val, stream, recurse, &opts);\n-      break;\n-\n     case TYPE_CODE_INT:\n       /* Recognize the unit type.  */\n       if (type->is_unsigned () && TYPE_LENGTH (type) == 0"
    },
    {
      "sha": "adfbcc0464b597cb5f6d4f5ae17f7a99d79a424f",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 30,
      "deletions": 2,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b5a7bc768570edc15532759969cd9bff3f02c28/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=6b5a7bc768570edc15532759969cd9bff3f02c28",
      "patch": "@@ -40,6 +40,8 @@\n #include \"gdbarch.h\"\n #include \"cli/cli-style.h\"\n #include \"count-one-bits.h\"\n+#include \"c-lang.h\"\n+#include \"cp-abi.h\"\n \n /* Maximum number of wchars returned from wchar_iterate.  */\n #define MAX_WCHARS 4\n@@ -811,6 +813,27 @@ generic_value_print_complex (struct value *val, struct ui_file *stream,\n   fprintf_filtered (stream, \"%s\", decorations->complex_suffix);\n }\n \n+/* generic_value_print helper for TYPE_CODE_MEMBERPTR.  */\n+\n+static void\n+generic_value_print_memberptr\n+  (struct value *val, struct ui_file *stream,\n+   int recurse,\n+   const struct value_print_options *options,\n+   const struct generic_val_print_decorations *decorations)\n+{\n+  if (!options->format)\n+    {\n+      /* Member pointers are essentially specific to C++, and so if we\n+\t encounter one, we should print it according to C++ rules.  */\n+      struct type *type = check_typedef (value_type (val));\n+      const gdb_byte *valaddr = value_contents_for_printing (val);\n+      cp_print_class_member (valaddr, type, stream, \"&\");\n+    }\n+  else\n+    generic_value_print (val, stream, recurse, options, decorations);\n+}\n+\n /* See valprint.h.  */\n \n void\n@@ -828,7 +851,8 @@ generic_value_print (struct value *val, struct ui_file *stream, int recurse,\n       break;\n \n     case TYPE_CODE_MEMBERPTR:\n-      value_print_scalar_formatted (val, options, 0, stream);\n+      generic_value_print_memberptr (val, stream, recurse, options,\n+\t\t\t\t     decorations);\n       break;\n \n     case TYPE_CODE_PTR:\n@@ -914,9 +938,13 @@ generic_value_print (struct value *val, struct ui_file *stream, int recurse,\n       generic_value_print_complex (val, stream, options, decorations);\n       break;\n \n+    case TYPE_CODE_METHODPTR:\n+      cplus_print_method_ptr (value_contents_for_printing (val), type,\n+\t\t\t      stream);\n+      break;\n+\n     case TYPE_CODE_UNION:\n     case TYPE_CODE_STRUCT:\n-    case TYPE_CODE_METHODPTR:\n     default:\n       error (_(\"Unhandled type code %d in symbol table.\"),\n \t     type->code ());"
    }
  ]
}