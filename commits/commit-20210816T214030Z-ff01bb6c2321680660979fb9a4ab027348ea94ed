{
  "sha": "ff01bb6c2321680660979fb9a4ab027348ea94ed",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmYwMWJiNmMyMzIxNjgwNjYwOTc5ZmI5YTRhYjAyNzM0OGVhOTRlZA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-08-15T20:17:41Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-08-16T21:40:30Z"
    },
    "message": "x86: Don't pad .tfloat directive output\n\n.tfloat output should always be 10 bytes without padding, independent\nof psABIs.  In glibc, x86 assembly codes expect 10-byte .tfloat output.\nThis also reduces .ds.x output and .tfloat output with hex input from\n12 bytes to 10 bytes to match .tfloat output.\n\n\tPR gas/28230\n\t* NEWS: Mention changes of .ds.x output and .tfloat output with\n\thex input.\n\t* config/tc-i386.c (x86_tfloat_pad): Removed.\n\t* config/tc-i386.h (X_PRECISION_PAD): Changed to 0.\n\t(x86_tfloat_pad): Removed.\n\t* testsuite/gas/i386/fp.s: If NO_TFLOAT_PADDING isn't defined,\n\tadd explicit paddings after .tfloat, .ds.x, .dc.x and .dcb.x\n\tdirectives.\n\t* testsuite/gas/i386/i386.exp (ASFLAGS): Append\n\t\"--defsym NO_TFLOAT_PADDING=1\" when running the fp test.",
    "tree": {
      "sha": "41709f4023800706f61c5271a10b2bbf8569be08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/41709f4023800706f61c5271a10b2bbf8569be08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ff01bb6c2321680660979fb9a4ab027348ea94ed",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff01bb6c2321680660979fb9a4ab027348ea94ed",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ff01bb6c2321680660979fb9a4ab027348ea94ed",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff01bb6c2321680660979fb9a4ab027348ea94ed/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "892a1e530379eeea924e938c8a588fbf3845f4fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/892a1e530379eeea924e938c8a588fbf3845f4fa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/892a1e530379eeea924e938c8a588fbf3845f4fa"
    }
  ],
  "stats": {
    "total": 142,
    "additions": 127,
    "deletions": 15
  },
  "files": [
    {
      "sha": "8046ed541a859d68e93738ef7509ba6dda9c31de",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=ff01bb6c2321680660979fb9a4ab027348ea94ed",
      "patch": "@@ -1,5 +1,9 @@\n -*- text -*-\n \n+* Outputs of .ds.x directive and .tfloat directive with hex input from\n+  x86 assembler have been reduced from 12 bytes to 10 bytes to match the\n+  output of .tfloat directive.\n+\n * Add support for Intel AVX512_FP16 instructions.\n \n Changes in 2.37:"
    },
    {
      "sha": "7148c07324709bf05b4a55558df0b92ee59f5e38",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=ff01bb6c2321680660979fb9a4ab027348ea94ed",
      "patch": "@@ -10231,19 +10231,6 @@ x86_cons_fix_new (fragS *frag, unsigned int off, unsigned int len,\n   fix_new_exp (frag, off, len, exp, 0, r);\n }\n \n-/* Return the number of padding LITTLENUMs following a tbyte floating\n-   point value.  */\n-\n-int\n-x86_tfloat_pad (void)\n-{\n-#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n-   if (IS_ELF)\n-     return object_64bit ? 3 : 1;\n-#endif\n-   return 0;\n-}\n-\n /* Export the ABI address size for use by TC_ADDRESS_BYTES for the\n    purpose of the `.dc.a' internal pseudo-op.  */\n "
    },
    {
      "sha": "f50169cbcc07709f280c80ef635eac1ad2072e34",
      "filename": "gas/config/tc-i386.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/config/tc-i386.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/config/tc-i386.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.h?ref=ff01bb6c2321680660979fb9a4ab027348ea94ed",
      "patch": "@@ -135,8 +135,7 @@ extern void x86_cons_fix_new\n (fragS *, unsigned int, unsigned int, expressionS *, bfd_reloc_code_real_type);\n \n #define X_PRECISION     5\n-#define X_PRECISION_PAD x86_tfloat_pad ()\n-extern int x86_tfloat_pad (void);\n+#define X_PRECISION_PAD 0\n \n #define TC_ADDRESS_BYTES x86_address_bytes\n extern int x86_address_bytes (void);"
    },
    {
      "sha": "90854b740add4fcd588dce7795617c077113c81a",
      "filename": "gas/testsuite/gas/i386/fp.s",
      "status": "modified",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/testsuite/gas/i386/fp.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/testsuite/gas/i386/fp.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/fp.s?ref=ff01bb6c2321680660979fb9a4ab027348ea94ed",
      "patch": "@@ -1,6 +1,13 @@\n \t.data\n # .tfloat is 80-bit floating point format.\n \t.tfloat 3.32192809488736218171e0\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n #\t.byte 0x0, 0x88, 0x1b, 0xcd, 0x4b, 0x78, 0x9a, 0xd4, 0x0, 0x40\n # .double is 64-bit floating point format.\n \t.double 3.32192809488736218171e0\n@@ -23,11 +30,39 @@\n \t.p2align 4,0\n \n \t.ds.x 1, -1\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte -1, -1, -1, -1, -1, -1\n+  .else\n+\t.byte -1, -1\n+  .endif\n+.endif\n \t.p2align 4,0xcc\n \n \t.tfloat 0x:3ffe80\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.dc.x 0x:bffd80\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.dcb.x 1, 0x:03ff80\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0xaa\n \n \t.hfloat 1, -2, 0x:3c00\n@@ -39,81 +74,165 @@\n \t.single Inf\n \t.double Inf\n \t.tfloat Inf\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x44\n \n \t.hfloat +Inf\n \t.bfloat16 +Inf\n \t.single +Inf\n \t.double +Inf\n \t.tfloat +Inf\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x33\n \n \t.hfloat -Inf\n \t.bfloat16 -Inf\n \t.single -Inf\n \t.double -Inf\n \t.tfloat -Inf\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x22\n \n \t.hfloat NaN\n \t.bfloat16 NaN\n \t.single NaN\n \t.double NaN\n \t.tfloat NaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x44\n \n \t.hfloat +NaN\n \t.bfloat16 +NaN\n \t.single +NaN\n \t.double +NaN\n \t.tfloat +NaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x33\n \n \t.hfloat -NaN\n \t.bfloat16 -NaN\n \t.single -NaN\n \t.double -NaN\n \t.tfloat -NaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x22\n \n \t.hfloat QNaN\n \t.bfloat16 QNaN\n \t.single QNaN\n \t.double QNaN\n \t.tfloat QNaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x44\n \n \t.hfloat +QNaN\n \t.bfloat16 +QNaN\n \t.single +QNaN\n \t.double +QNaN\n \t.tfloat +QNaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x33\n \n \t.hfloat -QNaN\n \t.bfloat16 -QNaN\n \t.single -QNaN\n \t.double -QNaN\n \t.tfloat -QNaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x22\n \n \t.hfloat SNaN\n \t.bfloat16 SNaN\n \t.single SNaN\n \t.double SNaN\n \t.tfloat SNaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x44\n \n \t.hfloat +SNaN\n \t.bfloat16 +SNaN\n \t.single +SNaN\n \t.double +SNaN\n \t.tfloat +SNaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x33\n \n \t.hfloat -SNaN\n \t.bfloat16 -SNaN\n \t.single -SNaN\n \t.double -SNaN\n \t.tfloat -SNaN\n+.ifndef NO_TFLOAT_PADDING\n+  .ifdef x86_64\n+\t.byte 0, 0, 0, 0, 0, 0\n+  .else\n+\t.byte 0, 0\n+  .endif\n+.endif\n \t.p2align 4,0x22"
    },
    {
      "sha": "189121f1428c6dbd529e7c7996fd4056b3e133d1",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ff01bb6c2321680660979fb9a4ab027348ea94ed/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=ff01bb6c2321680660979fb9a4ab027348ea94ed",
      "patch": "@@ -698,7 +698,10 @@ if [gas_32_check] then {\n \t    run_list_test \"iamcu-inval-1\" \"-march=iamcu -al\"\n \t}\n     } else {\n+\tset saved_ASFLAGS \"$ASFLAGS\"\n+\tappend ASFLAGS \" --defsym NO_TFLOAT_PADDING=1\"\n \trun_dump_test \"fp\"\n+\tset $ASFLAGS \"$saved_ASFLAGS\"\n     }\n \n     # This is a PE specific test."
    }
  ]
}