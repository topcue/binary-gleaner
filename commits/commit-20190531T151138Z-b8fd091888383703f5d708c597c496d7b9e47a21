{
  "sha": "b8fd091888383703f5d708c597c496d7b9e47a21",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjhmZDA5MTg4ODM4MzcwM2Y1ZDcwOGM1OTdjNDk2ZDdiOWU0N2EyMQ==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-04-26T18:52:16Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-05-31T15:11:38Z"
    },
    "message": "Add function execute_command_to_ui_file\n\n2019-05-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* gdbcmd.h (execute_command_to_ui_file): New declaration.\n\ttop.c (execute_command_to_ui_file): New function, mostly a copy\n\tof execute_command_to_string.\n\t(execute_command_to_string): Implement by calling\n\texecute_command_to_ui_file.",
    "tree": {
      "sha": "24b079241f130a85492987818551fb815961a2c8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/24b079241f130a85492987818551fb815961a2c8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b8fd091888383703f5d708c597c496d7b9e47a21",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8fd091888383703f5d708c597c496d7b9e47a21",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b8fd091888383703f5d708c597c496d7b9e47a21",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8fd091888383703f5d708c597c496d7b9e47a21/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "68bb5386b84af4031175bf186269eb6b54b8611d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/68bb5386b84af4031175bf186269eb6b54b8611d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/68bb5386b84af4031175bf186269eb6b54b8611d"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 32,
    "deletions": 13
  },
  "files": [
    {
      "sha": "fbd6bb23ce31ec7b67cebc9b5da3440ad413e112",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b8fd091888383703f5d708c597c496d7b9e47a21/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b8fd091888383703f5d708c597c496d7b9e47a21/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b8fd091888383703f5d708c597c496d7b9e47a21",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* gdbcmd.h (execute_command_to_ui_file): New declaration.\n+\ttop.c (execute_command_to_ui_file): New function, mostly a copy\n+\tof execute_command_to_string.\n+\t(execute_command_to_string): Implement by calling\n+\texecute_command_to_ui_file.\n+\n 2019-05-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* top.h (saved_command_line): Remove declaration."
    },
    {
      "sha": "1b47719f18a2e5253c7ace90e0ef83c59986be05",
      "filename": "gdb/gdbcmd.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b8fd091888383703f5d708c597c496d7b9e47a21/gdb/gdbcmd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b8fd091888383703f5d708c597c496d7b9e47a21/gdb/gdbcmd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbcmd.h?ref=b8fd091888383703f5d708c597c496d7b9e47a21",
      "patch": "@@ -139,6 +139,8 @@ extern void execute_command (const char *, int);\n    as cli_styling.  */\n extern std::string execute_command_to_string (const char *p, int from_tty,\n \t\t\t\t\t      bool term_out);\n+extern void execute_command_to_ui_file (struct ui_file *file,\n+\t\t\t\t\tconst char *p, int from_tty);\n \n extern void print_command_line (struct command_line *, unsigned int,\n \t\t\t\tstruct ui_file *);"
    },
    {
      "sha": "4f55d6af1e6a4fcebce64e9c2eab277b7f648866",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 22,
      "deletions": 13,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b8fd091888383703f5d708c597c496d7b9e47a21/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b8fd091888383703f5d708c597c496d7b9e47a21/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=b8fd091888383703f5d708c597c496d7b9e47a21",
      "patch": "@@ -665,40 +665,49 @@ execute_command (const char *p, int from_tty)\n   cleanup_if_error.release ();\n }\n \n-/* Run execute_command for P and FROM_TTY.  Capture its output into the\n-   returned string, do not display it to the screen.  BATCH_FLAG will be\n+/* Run execute_command for P and FROM_TTY.  Sends its output to FILE,\n+   do not display it to the screen.  BATCH_FLAG will be\n    temporarily set to true.  */\n \n-std::string\n-execute_command_to_string (const char *p, int from_tty,\n-\t\t\t   bool term_out)\n+void\n+execute_command_to_ui_file (struct ui_file *file, const char *p, int from_tty)\n {\n   /* GDB_STDOUT should be better already restored during these\n      restoration callbacks.  */\n   set_batch_flag_and_restore_page_info save_page_info;\n \n   scoped_restore save_async = make_scoped_restore (&current_ui->async, 0);\n \n-  string_file str_file (term_out);\n-\n   {\n-    current_uiout->redirect (&str_file);\n+    current_uiout->redirect (file);\n     ui_out_redirect_pop redirect_popper (current_uiout);\n \n     scoped_restore save_stdout\n-      = make_scoped_restore (&gdb_stdout, &str_file);\n+      = make_scoped_restore (&gdb_stdout, file);\n     scoped_restore save_stderr\n-      = make_scoped_restore (&gdb_stderr, &str_file);\n+      = make_scoped_restore (&gdb_stderr, file);\n     scoped_restore save_stdlog\n-      = make_scoped_restore (&gdb_stdlog, &str_file);\n+      = make_scoped_restore (&gdb_stdlog, file);\n     scoped_restore save_stdtarg\n-      = make_scoped_restore (&gdb_stdtarg, &str_file);\n+      = make_scoped_restore (&gdb_stdtarg, file);\n     scoped_restore save_stdtargerr\n-      = make_scoped_restore (&gdb_stdtargerr, &str_file);\n+      = make_scoped_restore (&gdb_stdtargerr, file);\n \n     execute_command (p, from_tty);\n   }\n+}\n+\n+/* Run execute_command for P and FROM_TTY.  Capture its output into the\n+   returned string, do not display it to the screen.  BATCH_FLAG will be\n+   temporarily set to true.  */\n+\n+std::string\n+execute_command_to_string (const char *p, int from_tty,\n+\t\t\t   bool term_out)\n+{\n+  string_file str_file (term_out);\n \n+  execute_command_to_ui_file (&str_file, p, from_tty);\n   return std::move (str_file.string ());\n }\n "
    }
  ]
}