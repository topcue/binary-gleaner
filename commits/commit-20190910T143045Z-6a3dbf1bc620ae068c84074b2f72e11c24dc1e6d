{
  "sha": "6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmEzZGJmMWJjNjIwYWUwNjhjODQwNzRiMmY3MmUxMWMyNGRjMWU2ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-12T17:00:39Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-09-10T14:30:45Z"
    },
    "message": "Simplify psym_map_matching_symbols\n\nThis introduces a new helper function,\niterate_over_symbols_terminated, and changes psym_map_matching_symbols\nto use it.  A subsequent patch will introduce a new user of this\nfunction in the DWARF reader.\n\ngdb/ChangeLog\n2019-09-10  Tom Tromey  <tromey@adacore.com>\n\n\t* psymtab.c (map_block): Remove.\n\t(psym_map_matching_symbols): Use iterate_over_symbols_terminated.\n\t* symtab.c (iterate_over_symbols_terminated): New function.\n\t* symtab.c (iterate_over_symbols_terminated): Declare.",
    "tree": {
      "sha": "a1672a9db0aec737e60c18c9b80f363049504839",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1672a9db0aec737e60c18c9b80f363049504839"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6969f124b987494df069b032e2e0f36485d3d8bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6969f124b987494df069b032e2e0f36485d3d8bb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6969f124b987494df069b032e2e0f36485d3d8bb"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 36,
    "deletions": 36
  },
  "files": [
    {
      "sha": "129aaad7d202c0aba2781c2c21a6644d43d7089f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
      "patch": "@@ -1,3 +1,10 @@\n+2019-09-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* psymtab.c (map_block): Remove.\n+\t(psym_map_matching_symbols): Use iterate_over_symbols_terminated.\n+\t* symtab.c (iterate_over_symbols_terminated): New function.\n+\t* symtab.c (iterate_over_symbols_terminated): Declare.\n+\n 2019-09-10  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_iterate_over_symbols): Return bool."
    },
    {
      "sha": "81138bbe901f27d8ff1fc60ce31b9247252a1cff",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 36,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
      "patch": "@@ -1168,38 +1168,6 @@ psymtab_to_fullname (struct partial_symtab *ps)\n   return ps->fullname;\n }\n \n-/* For all symbols, s, in BLOCK that are in DOMAIN and match NAME\n-   according to the function MATCH, call CALLBACK(BLOCK, s, DATA).\n-   BLOCK is assumed to come from OBJFILE.  Returns false iff CALLBACK\n-   ever returns false, and otherwise returns true.  */\n-\n-static bool\n-map_block (const char *name, domain_enum domain, struct objfile *objfile,\n-\t   const struct block *block,\n-\t   gdb::function_view<symbol_found_callback_ftype> callback,\n-\t   symbol_name_match_type match)\n-{\n-  struct block_iterator iter;\n-  struct symbol *sym;\n-\n-  lookup_name_info lookup_name (name, match);\n-\n-  for (sym = block_iter_match_first (block, lookup_name, &iter);\n-       sym != NULL;\n-       sym = block_iter_match_next (lookup_name, &iter))\n-    {\n-      if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n-\t\t\t\t SYMBOL_DOMAIN (sym), domain))\n-\t{\n-\t  struct block_symbol block_sym = {sym, block};\n-\t  if (!callback (&block_sym))\n-\t    return false;\n-\t}\n-    }\n-\n-  return true;\n-}\n-\n /* Psymtab version of map_matching_symbols.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n@@ -1214,6 +1182,8 @@ psym_map_matching_symbols\n {\n   const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n \n+  lookup_name_info lookup_name (name, match);\n+\n   for (partial_symtab *ps : require_partial_symbols (objfile, 1))\n     {\n       QUIT;\n@@ -1227,10 +1197,8 @@ psym_map_matching_symbols\n \t  if (cust == NULL)\n \t    continue;\n \t  block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), block_kind);\n-\t  if (!map_block (name, domain, objfile, block, callback, match))\n-\t    return;\n-\t  struct block_symbol block_sym = {nullptr, block};\n-\t  if (!callback (&block_sym))\n+\t  if (!iterate_over_symbols_terminated (block, lookup_name,\n+\t\t\t\t\t\tdomain, callback))\n \t    return;\n \t}\n     }"
    },
    {
      "sha": "e1bf3692a5be9e20868ecdcba025af6f3c5b1038",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
      "patch": "@@ -2847,6 +2847,21 @@ iterate_over_symbols (const struct block *block,\n   return true;\n }\n \n+/* See symtab.h.  */\n+\n+bool\n+iterate_over_symbols_terminated\n+  (const struct block *block,\n+   const lookup_name_info &name,\n+   const domain_enum domain,\n+   gdb::function_view<symbol_found_callback_ftype> callback)\n+{\n+  if (!iterate_over_symbols (block, name, domain, callback))\n+    return false;\n+  struct block_symbol block_sym = {nullptr, block};\n+  return callback (&block_sym);\n+}\n+\n /* Find the compunit symtab associated with PC and SECTION.\n    This will read in debug info as necessary.  */\n "
    },
    {
      "sha": "4fb00cba9f53fc9a12ce762dc4bfdf8f56c5a6b4",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=6a3dbf1bc620ae068c84074b2f72e11c24dc1e6d",
      "patch": "@@ -2106,6 +2106,16 @@ bool iterate_over_symbols (const struct block *block,\n \t\t\t   const domain_enum domain,\n \t\t\t   gdb::function_view<symbol_found_callback_ftype> callback);\n \n+/* Like iterate_over_symbols, but if all calls to CALLBACK return\n+   true, then calls CALLBACK one additional time with a block_symbol\n+   that has a valid block but a NULL symbol.  */\n+\n+bool iterate_over_symbols_terminated\n+  (const struct block *block,\n+   const lookup_name_info &name,\n+   const domain_enum domain,\n+   gdb::function_view<symbol_found_callback_ftype> callback);\n+\n /* Storage type used by demangle_for_lookup.  demangle_for_lookup\n    either returns a const char * pointer that points to either of the\n    fields of this type, or a pointer to the input NAME.  This is done"
    }
  ]
}