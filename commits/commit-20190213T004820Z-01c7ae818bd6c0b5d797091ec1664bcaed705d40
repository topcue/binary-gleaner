{
  "sha": "01c7ae818bd6c0b5d797091ec1664bcaed705d40",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDFjN2FlODE4YmQ2YzBiNWQ3OTcwOTFlYzE2NjRiY2FlZDcwNWQ0MA==",
  "commit": {
    "author": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2019-02-13T00:38:31Z"
    },
    "committer": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2019-02-13T00:48:20Z"
    },
    "message": "Adding a test case\n\ngdb/testsuite/ChangeLog\n2019-02-12  Weimin Pan  <weimin.pan@oracle.com>\n\n            PR breakpoints/21870\n            * gdb.arch/aarch64-dbreg-contents.exp: New file.\n            * gdb.arch/aarch64-dbreg-contents.c: New file.",
    "tree": {
      "sha": "8dcf7f6933e53be520ff0f6ce0d3d8abc38b7f83",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8dcf7f6933e53be520ff0f6ce0d3d8abc38b7f83"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/01c7ae818bd6c0b5d797091ec1664bcaed705d40",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01c7ae818bd6c0b5d797091ec1664bcaed705d40",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/01c7ae818bd6c0b5d797091ec1664bcaed705d40",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01c7ae818bd6c0b5d797091ec1664bcaed705d40/comments",
  "author": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8918f84c04dd63866663d399c58e638052db2ee7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8918f84c04dd63866663d399c58e638052db2ee7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8918f84c04dd63866663d399c58e638052db2ee7"
    }
  ],
  "stats": {
    "total": 185,
    "additions": 185,
    "deletions": 0
  },
  "files": [
    {
      "sha": "1ee4f1bd9bb1d491be130507de55023b605f9945",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01c7ae818bd6c0b5d797091ec1664bcaed705d40/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01c7ae818bd6c0b5d797091ec1664bcaed705d40/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=01c7ae818bd6c0b5d797091ec1664bcaed705d40",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-12  Weimin Pan  <weimin.pan@oracle.com>\n+\n+\tPR breakpoints/21870\n+\t* gdb.arch/aarch64-dbreg-contents.exp: New file.\n+\t* gdb.arch/aarch64-dbreg-contents.c: New file.\n+\n 2019-02-10  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gdb.ada/mi_ref_changeable: New testcase."
    },
    {
      "sha": "010b8b4edbdf26261356fba53d1dfb6dfcce92ce",
      "filename": "gdb/testsuite/gdb.arch/aarch64-dbreg-contents.c",
      "status": "added",
      "additions": 133,
      "deletions": 0,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01c7ae818bd6c0b5d797091ec1664bcaed705d40/gdb/testsuite/gdb.arch/aarch64-dbreg-contents.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01c7ae818bd6c0b5d797091ec1664bcaed705d40/gdb/testsuite/gdb.arch/aarch64-dbreg-contents.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-dbreg-contents.c?ref=01c7ae818bd6c0b5d797091ec1664bcaed705d40",
      "patch": "@@ -0,0 +1,133 @@\n+/* Test case for setting a memory-write unaligned watchpoint on aarch64.\n+\n+  This software is provided 'as-is', without any express or implied\n+  warranty.  In no event will the authors be held liable for any damages\n+  arising from the use of this software.\n+\n+  Permission is granted to anyone to use this software for any purpose,\n+  including commercial applications, and to alter it and redistribute it\n+  freely.  */\n+\n+#define _GNU_SOURCE 1\n+#include <sys/ptrace.h>\n+#include <assert.h>\n+#include <sys/wait.h>\n+#include <stddef.h>\n+#include <errno.h>\n+#include <sys/uio.h>\n+#include <elf.h>\n+\n+static pid_t child;\n+\n+static void\n+cleanup (void)\n+{\n+  if (child > 0)\n+    kill (child, SIGKILL);\n+  child = 0;\n+}\n+\n+#define SET_WATCHPOINT set_watchpoint\n+\n+/* Macros to extract fields from the hardware debug information word.  */\n+#define AARCH64_DEBUG_NUM_SLOTS(x) ((x) & 0xff)\n+#define AARCH64_DEBUG_ARCH(x) (((x) >> 8) & 0xff)\n+/* Macro for the expected version of the ARMv8-A debug architecture.  */\n+#define AARCH64_DEBUG_ARCH_V8 0x6\n+#define DR_CONTROL_ENABLED(ctrl)        (((ctrl) & 0x1) == 1)\n+#define DR_CONTROL_LENGTH(ctrl)         (((ctrl) >> 5) & 0xff)\n+\n+static void\n+set_watchpoint (pid_t pid, volatile void *addr, unsigned len_mask)\n+{\n+  struct user_hwdebug_state dreg_state;\n+  struct iovec iov;\n+  long l;\n+\n+  assert (len_mask >= 0x01);\n+  assert (len_mask <= 0xff);\n+\n+  iov.iov_base = &dreg_state;\n+  iov.iov_len = sizeof (dreg_state);\n+  errno = 0;\n+  l = ptrace (PTRACE_GETREGSET, pid, NT_ARM_HW_WATCH, &iov);\n+  assert (l == 0);\n+  assert (AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8);\n+  assert (AARCH64_DEBUG_NUM_SLOTS (dreg_state.dbg_info) >= 1);\n+\n+  assert (!DR_CONTROL_ENABLED (dreg_state.dbg_regs[0].ctrl));\n+  dreg_state.dbg_regs[0].ctrl |= 1;\n+  assert ( DR_CONTROL_ENABLED (dreg_state.dbg_regs[0].ctrl));\n+\n+  assert (DR_CONTROL_LENGTH (dreg_state.dbg_regs[0].ctrl) == 0);\n+  dreg_state.dbg_regs[0].ctrl |= len_mask << 5;\n+  assert (DR_CONTROL_LENGTH (dreg_state.dbg_regs[0].ctrl) == len_mask);\n+\n+  dreg_state.dbg_regs[0].ctrl |= 2 << 3; // write\n+  dreg_state.dbg_regs[0].ctrl |= 2 << 1; // GDB: ???: enabled at el0\n+  dreg_state.dbg_regs[0].addr = (uintptr_t) addr;\n+\n+  iov.iov_base = &dreg_state;\n+  iov.iov_len = (offsetof (struct user_hwdebug_state, dbg_regs)\n+                 + sizeof (dreg_state.dbg_regs[0]));\n+  errno = 0;\n+  l = ptrace (PTRACE_SETREGSET, pid, NT_ARM_HW_WATCH, &iov);\n+  if (errno != 0)\n+    error (1, errno, \"PTRACE_SETREGSET: NT_ARM_HW_WATCH\");\n+  assert (l == 0);\n+}\n+\n+static volatile long long check;\n+\n+int\n+main (void)\n+{\n+  pid_t got_pid;\n+  int i, status;\n+  long l;\n+\n+  atexit (cleanup);\n+\n+  child = fork ();\n+  assert (child >= 0);\n+  if (child == 0)\n+    {\n+      l = ptrace (PTRACE_TRACEME, 0, NULL, NULL);\n+      assert (l == 0);\n+      i = raise (SIGUSR1);\n+      assert (i == 0);\n+      check = -1;\n+      i = raise (SIGUSR2);\n+      /* NOTREACHED */\n+      assert (0);\n+    }\n+\n+  got_pid = waitpid (child, &status, 0);\n+  assert (got_pid == child);\n+  assert (WIFSTOPPED (status));\n+  assert (WSTOPSIG (status) == SIGUSR1);\n+\n+  /* Add a watchpoint to check.\n+     Restart the child. It will write to check.\n+     Check child has stopped on the watchpoint.  */\n+  SET_WATCHPOINT (child, &check, 0x02);\n+\n+  errno = 0;\n+  l = ptrace (PTRACE_CONT, child, 0l, 0l);\n+  assert_perror (errno);\n+  assert (l == 0);\n+\n+  got_pid = waitpid (child, &status, 0);\n+  assert (got_pid == child);\n+  assert (WIFSTOPPED (status));\n+  if (WSTOPSIG (status) == SIGUSR2)\n+    {\n+      /* We missed the watchpoint - unsupported by hardware?  */\n+      cleanup ();\n+      return 2;\n+    }\n+  assert (WSTOPSIG (status) == SIGTRAP);\n+\n+  cleanup ();\n+  return 0;\n+}"
    },
    {
      "sha": "f6bee02b0ce3b262bd84d4679b51a872ed48bc40",
      "filename": "gdb/testsuite/gdb.arch/aarch64-dbreg-contents.exp",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01c7ae818bd6c0b5d797091ec1664bcaed705d40/gdb/testsuite/gdb.arch/aarch64-dbreg-contents.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01c7ae818bd6c0b5d797091ec1664bcaed705d40/gdb/testsuite/gdb.arch/aarch64-dbreg-contents.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-dbreg-contents.exp?ref=01c7ae818bd6c0b5d797091ec1664bcaed705d40",
      "patch": "@@ -0,0 +1,46 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+#\n+# Make sure that the inferior doesn't assert and exits successfully.\n+#\n+# This test checks that GDB does not alter watchpoints set by an inferior.\n+# It sets a watchpoint on memory then writes to the watched memory.\n+# It will exit with 1 if the watchpoint is not reached.\n+#\n+# See PR breakpoints/21870.\n+\n+if {![is_aarch64_target]} {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return\n+}\n+\n+standard_testfile .c\n+\n+if { [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable {debug}] != \"\" } {\n+     untested \"failed to compile\"\n+     return -1\n+}\n+\n+clean_restart $testfile\n+\n+set test \"run to exit\"\n+gdb_test_multiple \"run\" \"$test\" {\n+    -re \"exited with code 01.*$gdb_prompt $\" {\n+        pass \"$test\"\n+    }\n+    -re \"exited normally.*$gdb_prompt $\" {\n+        pass \"$test\"\n+    }\n+}"
    }
  ]
}