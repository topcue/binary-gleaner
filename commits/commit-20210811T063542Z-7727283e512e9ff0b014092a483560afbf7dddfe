{
  "sha": "7727283e512e9ff0b014092a483560afbf7dddfe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzcyNzI4M2U1MTJlOWZmMGIwMTQwOTJhNDgzNTYwYWZiZjdkZGRmZQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-08-11T06:35:42Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-08-11T06:35:42Z"
    },
    "message": "Arm64: leave .bfloat16 processing to common code\n\nWith x86 support having been implemented by extending atof-ieee.c, avoid\nunnecessary code duplication in md_atof(). This will then also allow to\ntake advantage of adjustments made there without needing to mirror them\nhere.",
    "tree": {
      "sha": "e1edae1528d2be9a6dd0ffc0fac37482def2f1a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1edae1528d2be9a6dd0ffc0fac37482def2f1a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7727283e512e9ff0b014092a483560afbf7dddfe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7727283e512e9ff0b014092a483560afbf7dddfe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7727283e512e9ff0b014092a483560afbf7dddfe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7727283e512e9ff0b014092a483560afbf7dddfe/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2557e081af9fde5552b1b96df04166d1a2df620c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2557e081af9fde5552b1b96df04166d1a2df620c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2557e081af9fde5552b1b96df04166d1a2df620c"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 1,
    "deletions": 49
  },
  "files": [
    {
      "sha": "19a5d49d09067c85aed55739e219cd2259e31f5b",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 49,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7727283e512e9ff0b014092a483560afbf7dddfe/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7727283e512e9ff0b014092a483560afbf7dddfe/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=7727283e512e9ff0b014092a483560afbf7dddfe",
      "patch": "@@ -523,7 +523,7 @@ const char EXP_CHARS[] = \"eE\";\n /* As in 0f12.456  */\n /* or\t 0d1.2345e12  */\n \n-const char FLT_CHARS[] = \"rRsSfFdDxXeEpPhH\";\n+const char FLT_CHARS[] = \"rRsSfFdDxXeEpPhHb\";\n \n /* Prefix character that indicates the start of an immediate value.  */\n #define is_immediate_prefix(C) ((C) == '#')\n@@ -643,54 +643,6 @@ aarch64_get_expression (expressionS *  ep,\n const char *\n md_atof (int type, char *litP, int *sizeP)\n {\n-  /* If this is a bfloat16 type, then parse it slightly differently -\n-     as it does not follow the IEEE standard exactly.  */\n-  if (type == 'b')\n-    {\n-      char * t;\n-      LITTLENUM_TYPE words[MAX_LITTLENUMS];\n-      FLONUM_TYPE generic_float;\n-\n-      t = atof_ieee_detail (input_line_pointer, 1, 8, words, &generic_float);\n-\n-      if (t)\n-\tinput_line_pointer = t;\n-      else\n-\treturn _(\"invalid floating point number\");\n-\n-      switch (generic_float.sign)\n-\t{\n-\t/* Is +Inf.  */\n-\tcase 'P':\n-\t  words[0] = 0x7f80;\n-\t  break;\n-\n-\t/* Is -Inf.  */\n-\tcase 'N':\n-\t  words[0] = 0xff80;\n-\t  break;\n-\n-\t/* Is NaN.  */\n-\t/* bfloat16 has two types of NaN - quiet and signalling.\n-\t   Quiet NaN has bit[6] == 1 && faction != 0, whereas\n-\t   signalling Nan's have bit[0] == 0 && fraction != 0.\n-\t   Chose this specific encoding as it is the same form\n-\t   as used by other IEEE 754 encodings in GAS.  */\n-\tcase 0:\n-\t  words[0] = 0x7fff;\n-\t  break;\n-\n-\tdefault:\n-\t  break;\n-\t}\n-\n-      *sizeP = 2;\n-\n-      md_number_to_chars (litP, (valueT) words[0], sizeof (LITTLENUM_TYPE));\n-\n-      return NULL;\n-    }\n-\n   return ieee_md_atof (type, litP, sizeP, target_big_endian);\n }\n "
    }
  ]
}