{
  "sha": "2085ee26500b2d1b7a11ece8c44395e6403493f4",
  "node_id": "C_kwDOANOeidoAKDIwODVlZTI2NTAwYjJkMWI3YTExZWNlOGM0NDM5NWU2NDAzNDkzZjQ",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-08T00:10:35Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-13T03:30:56Z"
    },
    "message": "Don't pass around expld.dataseg pointer\n\nThe better to see any code that accesses expld.dataseg.\n\n\t* ldexp.c (fold_segment_end): Remove seg parameter.  Adjust calls.\n\t(fold_segment_align, fold_segment_relro_end): Likewise.\n\t* ldlang.c (lang_size_segment): Likewise.\n\t(lang_size_relro_segment_1, lang_find_relro_sections_1): Likewise.",
    "tree": {
      "sha": "c1034f73b7ebc6fddcf1affa2fd2de83006f2771",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c1034f73b7ebc6fddcf1affa2fd2de83006f2771"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2085ee26500b2d1b7a11ece8c44395e6403493f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2085ee26500b2d1b7a11ece8c44395e6403493f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2085ee26500b2d1b7a11ece8c44395e6403493f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2085ee26500b2d1b7a11ece8c44395e6403493f4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7d6aa4b321f2722512be7422394629eec526448b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d6aa4b321f2722512be7422394629eec526448b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7d6aa4b321f2722512be7422394629eec526448b"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 28,
    "deletions": 20
  },
  "files": [
    {
      "sha": "90760e0a8cac1a79b0d4a7098fecef64cc62f586",
      "filename": "ld/ldexp.c",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2085ee26500b2d1b7a11ece8c44395e6403493f4/ld/ldexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2085ee26500b2d1b7a11ece8c44395e6403493f4/ld/ldexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.c?ref=2085ee26500b2d1b7a11ece8c44395e6403493f4",
      "patch": "@@ -340,8 +340,10 @@ update_definedness (const char *name, struct bfd_link_hash_entry *h)\n }\n \n static void\n-fold_segment_end (seg_align_type *seg)\n+fold_segment_end (void)\n {\n+  seg_align_type *seg = &expld.dataseg;\n+\n   if (expld.phase == lang_first_phase_enum\n       || expld.section != bfd_abs_section_ptr)\n     {\n@@ -410,7 +412,7 @@ fold_unary (etree_type *tree)\n \t  break;\n \n \tcase DATA_SEGMENT_END:\n-\t  fold_segment_end (&expld.dataseg);\n+\t  fold_segment_end ();\n \t  break;\n \n \tdefault:\n@@ -447,8 +449,10 @@ arith_result_section (const etree_value_type *lhs)\n }\n \n static void\n-fold_segment_align (seg_align_type *seg, etree_value_type *lhs)\n+fold_segment_align (etree_value_type *lhs)\n {\n+  seg_align_type *seg = &expld.dataseg;\n+\n   seg->relro = exp_seg_relro_start;\n   if (expld.phase == lang_first_phase_enum\n       || expld.section != bfd_abs_section_ptr)\n@@ -494,8 +498,10 @@ fold_segment_align (seg_align_type *seg, etree_value_type *lhs)\n }\n \n static void\n-fold_segment_relro_end (seg_align_type *seg, etree_value_type *lhs)\n+fold_segment_relro_end (etree_value_type *lhs)\n {\n+  seg_align_type *seg = &expld.dataseg;\n+\n   /* Operands swapped!  XXX_SEGMENT_RELRO_END(offset,exp) has offset\n      in expld.result and exp in lhs.  */\n   seg->relro = exp_seg_relro_end;\n@@ -662,11 +668,11 @@ fold_binary (etree_type *tree)\n \t  break;\n \n \tcase DATA_SEGMENT_ALIGN:\n-\t  fold_segment_align (&expld.dataseg, &lhs);\n+\t  fold_segment_align (&lhs);\n \t  break;\n \n \tcase DATA_SEGMENT_RELRO_END:\n-\t  fold_segment_relro_end (&expld.dataseg, &lhs);\n+\t  fold_segment_relro_end (&lhs);\n \t  break;\n \n \tdefault:"
    },
    {
      "sha": "474784c874a44a44b14fadc533b7df7694b37137",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2085ee26500b2d1b7a11ece8c44395e6403493f4/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2085ee26500b2d1b7a11ece8c44395e6403493f4/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=2085ee26500b2d1b7a11ece8c44395e6403493f4",
      "patch": "@@ -5665,9 +5665,10 @@ os_region_check (lang_output_section_statement_type *os,\n }\n \n static void\n-ldlang_check_relro_region (lang_statement_union_type *s,\n-\t\t\t   seg_align_type *seg)\n+ldlang_check_relro_region (lang_statement_union_type *s)\n {\n+  seg_align_type *seg = &expld.dataseg;\n+\n   if (seg->relro == exp_seg_relro_start)\n     {\n       if (!seg->relro_start_stat)\n@@ -6166,7 +6167,7 @@ lang_size_sections_1\n \t\t\t   output_section_statement->bfd_section,\n \t\t\t   &newdot);\n \n-\t    ldlang_check_relro_region (s, &expld.dataseg);\n+\t    ldlang_check_relro_region (s);\n \n \t    expld.dataseg.relro = exp_seg_relro_none;\n \n@@ -6346,10 +6347,11 @@ one_lang_size_sections_pass (bool *relax, bool check_regions)\n }\n \n static bool\n-lang_size_segment (seg_align_type *seg)\n+lang_size_segment (void)\n {\n   /* If XXX_SEGMENT_ALIGN XXX_SEGMENT_END pair was seen, check whether\n      a page could be saved in the data segment.  */\n+  seg_align_type *seg = &expld.dataseg;\n   bfd_vma first, last;\n \n   first = -seg->base & (seg->commonpagesize - 1);\n@@ -6368,8 +6370,9 @@ lang_size_segment (seg_align_type *seg)\n }\n \n static bfd_vma\n-lang_size_relro_segment_1 (seg_align_type *seg)\n+lang_size_relro_segment_1 (void)\n {\n+  seg_align_type *seg = &expld.dataseg;\n   bfd_vma relro_end, desired_end;\n   asection *sec;\n \n@@ -6415,7 +6418,7 @@ lang_size_relro_segment (bool *relax, bool check_regions)\n   if (link_info.relro && expld.dataseg.relro_end)\n     {\n       bfd_vma data_initial_base = expld.dataseg.base;\n-      bfd_vma data_relro_end = lang_size_relro_segment_1 (&expld.dataseg);\n+      bfd_vma data_relro_end = lang_size_relro_segment_1 ();\n \n       lang_reset_memory_regions ();\n       one_lang_size_sections_pass (relax, check_regions);\n@@ -6424,11 +6427,11 @@ lang_size_relro_segment (bool *relax, bool check_regions)\n \t script have increased padding over the original.  Revert.  */\n       if (expld.dataseg.relro_end > data_relro_end)\n \t{\n-\t  expld.dataseg.base = data_initial_base;;\n+\t  expld.dataseg.base = data_initial_base;\n \t  do_reset = true;\n \t}\n     }\n-  else if (lang_size_segment (&expld.dataseg))\n+  else if (lang_size_segment ())\n     do_reset = true;\n \n   return do_reset;\n@@ -7679,15 +7682,14 @@ find_relro_section_callback (lang_wild_statement_type *ptr ATTRIBUTE_UNUSED,\n \n static void\n lang_find_relro_sections_1 (lang_statement_union_type *s,\n-\t\t\t    seg_align_type *seg,\n \t\t\t    bool *has_relro_section)\n {\n   if (*has_relro_section)\n     return;\n \n   for (; s != NULL; s = s->header.next)\n     {\n-      if (s == seg->relro_end_stat)\n+      if (s == expld.dataseg.relro_end_stat)\n \tbreak;\n \n       switch (s->header.type)\n@@ -7699,15 +7701,15 @@ lang_find_relro_sections_1 (lang_statement_union_type *s,\n \t  break;\n \tcase lang_constructors_statement_enum:\n \t  lang_find_relro_sections_1 (constructor_list.head,\n-\t\t\t\t      seg, has_relro_section);\n+\t\t\t\t      has_relro_section);\n \t  break;\n \tcase lang_output_section_statement_enum:\n \t  lang_find_relro_sections_1 (s->output_section_statement.children.head,\n-\t\t\t\t      seg, has_relro_section);\n+\t\t\t\t      has_relro_section);\n \t  break;\n \tcase lang_group_statement_enum:\n \t  lang_find_relro_sections_1 (s->group_statement.children.head,\n-\t\t\t\t      seg, has_relro_section);\n+\t\t\t\t      has_relro_section);\n \t  break;\n \tdefault:\n \t  break;\n@@ -7723,7 +7725,7 @@ lang_find_relro_sections (void)\n   /* Check all sections in the link script.  */\n \n   lang_find_relro_sections_1 (expld.dataseg.relro_start_stat,\n-\t\t\t      &expld.dataseg, &has_relro_section);\n+\t\t\t      &has_relro_section);\n \n   if (!has_relro_section)\n     link_info.relro = false;"
    }
  ]
}