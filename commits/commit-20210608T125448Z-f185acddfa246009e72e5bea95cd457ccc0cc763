{
  "sha": "f185acddfa246009e72e5bea95cd457ccc0cc763",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjE4NWFjZGRmYTI0NjAwOWU3MmU1YmVhOTVjZDQ1N2NjYzBjYzc2Mw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-08T12:54:48Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-08T12:54:48Z"
    },
    "message": "x86: minor improvements to optimize_disp() (part I)\n\n- Do the zero checking first - there's no point in doing anything else\n  in this case.\n- Drop two pointless & where just before it was checked that the\n  respective bits are clear already anyway.",
    "tree": {
      "sha": "1148816865d20cfe6bb57ae578f173e0ff6f049c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1148816865d20cfe6bb57ae578f173e0ff6f049c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f185acddfa246009e72e5bea95cd457ccc0cc763",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f185acddfa246009e72e5bea95cd457ccc0cc763",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f185acddfa246009e72e5bea95cd457ccc0cc763",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f185acddfa246009e72e5bea95cd457ccc0cc763/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4c5d7c03c4dec3dc4ae875696b20747c5a8dafb8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c5d7c03c4dec3dc4ae875696b20747c5a8dafb8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c5d7c03c4dec3dc4ae875696b20747c5a8dafb8"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 18,
    "deletions": 11
  },
  "files": [
    {
      "sha": "5926ffffc3c82909be614f172253753858b3bedd",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f185acddfa246009e72e5bea95cd457ccc0cc763/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f185acddfa246009e72e5bea95cd457ccc0cc763/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f185acddfa246009e72e5bea95cd457ccc0cc763",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (optimize_disp): Drop redundant masking.\n+\tRe-order.\n+\n 2021-06-07  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (i386_att_operand): Re-write handling of"
    },
    {
      "sha": "9dbe6dcd954f90d0948092b5da43c50b7074327a",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f185acddfa246009e72e5bea95cd457ccc0cc763/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f185acddfa246009e72e5bea95cd457ccc0cc763/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=f185acddfa246009e72e5bea95cd457ccc0cc763",
      "patch": "@@ -5880,15 +5880,6 @@ optimize_disp (void)\n \t  {\n \t    offsetT op_disp = i.op[op].disps->X_add_number;\n \n-\t    if (i.types[op].bitfield.disp16\n-\t\t&& (op_disp & ~(offsetT) 0xffff) == 0)\n-\t      {\n-\t\t/* If this operand is at most 16 bits, convert\n-\t\t   to a signed 16 bit number and don't use 64bit\n-\t\t   displacement.  */\n-\t\top_disp = (((op_disp & 0xffff) ^ 0x8000) - 0x8000);\n-\t\ti.types[op].bitfield.disp64 = 0;\n-\t      }\n \t    if (!op_disp && i.types[op].bitfield.baseindex)\n \t      {\n \t\ti.types[op].bitfield.disp8 = 0;\n@@ -5898,9 +5889,21 @@ optimize_disp (void)\n \t\ti.types[op].bitfield.disp64 = 0;\n \t\ti.op[op].disps = 0;\n \t\ti.disp_operands--;\n+\t\tcontinue;\n \t      }\n+\n+\t    if (i.types[op].bitfield.disp16\n+\t\t&& (op_disp & ~(offsetT) 0xffff) == 0)\n+\t      {\n+\t\t/* If this operand is at most 16 bits, convert\n+\t\t   to a signed 16 bit number and don't use 64bit\n+\t\t   displacement.  */\n+\t\top_disp = ((op_disp ^ 0x8000) - 0x8000);\n+\t\ti.types[op].bitfield.disp64 = 0;\n+\t      }\n+\n #ifdef BFD64\n-\t    else if (flag_code == CODE_64BIT)\n+\t    if (flag_code == CODE_64BIT)\n \t      {\n \t\tif (want_disp32 (current_templates->start)\n \t\t    && fits_in_unsigned_long (op_disp))\n@@ -5913,7 +5916,6 @@ optimize_disp (void)\n \t\t    /* If this operand is at most 32 bits, convert\n \t\t       to a signed 32 bit number and don't use 64bit\n \t\t       displacement.  */\n-\t\t    op_disp &= (((offsetT) 2 << 31) - 1);\n \t\t    op_disp = (op_disp ^ ((offsetT) 1 << 31)) - ((addressT) 1 << 31);\n \t\t    i.types[op].bitfield.disp64 = 0;\n \t\t  }"
    }
  ]
}