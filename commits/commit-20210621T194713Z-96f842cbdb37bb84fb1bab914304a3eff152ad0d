{
  "sha": "96f842cbdb37bb84fb1bab914304a3eff152ad0d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTZmODQyY2JkYjM3YmI4NGZiMWJhYjkxNDMwNGEzZWZmMTUyYWQwZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-04T10:41:09Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-21T19:47:13Z"
    },
    "message": "gdb/riscv: add support for vector registers in target descriptions\n\nThis commit adds support to RISC-V GDB for vector registers in the\nincoming target description.\n\nThe vector registers should be described in a feature called\n\"org.gnu.gdb.riscv.vector\", and should contain the register v0 to\nv31.  There's no restriction on the size or type of these registers,\nso the target description can set these up as it requires.\n\nHowever, if the target feature is present then all of the registers\nmust be present, and they must all be the same size, these\nrequirements are, I believe, inline with the RISC-V vector extension.\n\nThe DWARF register numbers for the vector registers have been added,\nand the code to map between GDB's internal numbering and the DWARF\nnumbering has been updated.\n\nI have not yet added a feature/riscv/*.xml file for the vector\nextension, the consequence of this is that we can't, right now, detect\nvector registers on a native target, this patch is all about\nsupporting vectors on a remote target.\n\nIt is worth noting that I don't actually have access to a RISC-V\ntarget with vectors, so the only testing that this patch has had has\nbeen done using 'set tdesc filename ....' to load a target description\nto which I have manually added the vector feature.  This has shown\nthat the vector register feature can be successfully parsed, and that\nthe registers show up in the expected register groups.\n\nAdditionally, the RISC-V vector extension is currently at v0.10, which\nis also the v1.0 draft release.  However, this extension is not yet\nfinalised.  It is possible (but unlikely I think) that the register\nset could change between now and the final release of the vector\nextension.  If this were to happen then we would potentially end up\nchanging the requirements for the new org.gnu.gdb.riscv.vector\nfeature.  I really don't think it is likely that the register set will\nchange this late in the process, and even if it did, changing the\nfeature requirements will not be a problem as far as I am\nconcerned (when the alternative is GDB just continues without this\nfeature for now).\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention new target feature name.\n\t* arch/riscv.c (riscv_create_target_description): GDB doesn't\n\tcurrently create target descriptions containing vector registers.\n\t* arch/riscv.h (struct riscv_gdbarch_features) <vlen>: New member\n\tvariable.\n\t<operator==>: Also compare vlen.\n\t<hash>: Also include vlen.\n\t* riscv-tdep.c (riscv_feature_name_vector): New static global.\n\t(struct riscv_vector_feature): New struct.\n\t(riscv_vector_feature): New static global.\n\t(riscv_register_reggroup_p): Ensure vector registers are part of\n\tthe 'all' group, and part of the 'vector' group.\n\t(riscv_dwarf_reg_to_regnum): Handle vector registers.\n\t(riscv_gdbarch_init): Check vector register feature.\n\t* riscv-tdep.h: Add vector registers to GDB's internal register\n\tnumbers, and to the DWARF register numbers.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (RISC-V Features): Mention vector register feature.",
    "tree": {
      "sha": "93009c3a8c2e392680af0424e86c05fa325d068a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93009c3a8c2e392680af0424e86c05fa325d068a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96f842cbdb37bb84fb1bab914304a3eff152ad0d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96f842cbdb37bb84fb1bab914304a3eff152ad0d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96f842cbdb37bb84fb1bab914304a3eff152ad0d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96f842cbdb37bb84fb1bab914304a3eff152ad0d/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d52b8007213eea4d1f33e3a604481f390d37b52a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d52b8007213eea4d1f33e3a604481f390d37b52a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d52b8007213eea4d1f33e3a604481f390d37b52a"
    }
  ],
  "stats": {
    "total": 183,
    "additions": 177,
    "deletions": 6
  },
  "files": [
    {
      "sha": "11f2154b73e9e7429ac0d8793e69624d79afb211",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -1,3 +1,22 @@\n+2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention new target feature name.\n+\t* arch/riscv.c (riscv_create_target_description): GDB doesn't\n+\tcurrently create target descriptions containing vector registers.\n+\t* arch/riscv.h (struct riscv_gdbarch_features) <vlen>: New member\n+\tvariable.\n+\t<operator==>: Also compare vlen.\n+\t<hash>: Also include vlen.\n+\t* riscv-tdep.c (riscv_feature_name_vector): New static global.\n+\t(struct riscv_vector_feature): New struct.\n+\t(riscv_vector_feature): New static global.\n+\t(riscv_register_reggroup_p): Ensure vector registers are part of\n+\tthe 'all' group, and part of the 'vector' group.\n+\t(riscv_dwarf_reg_to_regnum): Handle vector registers.\n+\t(riscv_gdbarch_init): Check vector register feature.\n+\t* riscv-tdep.h: Add vector registers to GDB's internal register\n+\tnumbers, and to the DWARF register numbers.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention the two new methods."
    },
    {
      "sha": "151c4f113fbc3db69757c7ccd0db2b4a240b2205",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -78,6 +78,11 @@\n   and \"-eiex\" that allow options (that would normally appear in a\n   gdbearlyinit file) to be passed on the command line.\n \n+* For RISC-V targets, the target feature \"org.gnu.gdb.riscv.vector\" is\n+  now understood by GDB, and can be used to describe the vector\n+  registers of a target.  The precise requirements of this register\n+  feature are documented in the GDB manual.\n+\n * New commands\n \n set debug event-loop"
    },
    {
      "sha": "85d60a3e2577b02bae8a407dfe7b5e7c35ea0b3c",
      "filename": "gdb/arch/riscv.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/arch/riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/arch/riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/riscv.c?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -84,6 +84,12 @@ riscv_create_target_description (const struct riscv_gdbarch_features features)\n   else if (features.flen == 8)\n     regnum = create_feature_riscv_64bit_fpu (tdesc.get (), regnum);\n \n+  /* Currently GDB only supports vector features coming from remote\n+     targets.  We don't support creating vector features on native targets\n+     (yet).  */\n+  if (features.vlen != 0)\n+    error (_(\"unable to create vector feature\"));\n+\n   return tdesc;\n }\n "
    },
    {
      "sha": "65a998bb2b933c56b30b59559f3897c003a36b6b",
      "filename": "gdb/arch/riscv.h",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/arch/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/arch/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/riscv.h?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -46,13 +46,20 @@ struct riscv_gdbarch_features\n      that there are no f-registers.  No other value is valid.  */\n   int flen = 0;\n \n+  /* The size of the v-registers in bytes.  The value 0 indicates a target\n+     with no vector registers.  The minimum value for a standard compliant\n+     target should be 16, but GDB doesn't currently mind, and will accept\n+     any vector size.  */\n+  int vlen = 0;\n+\n   /* When true this target is RV32E.  */\n   bool embedded = false;\n \n   /* Equality operator.  */\n   bool operator== (const struct riscv_gdbarch_features &rhs) const\n   {\n-    return (xlen == rhs.xlen && flen == rhs.flen && embedded == rhs.embedded);\n+    return (xlen == rhs.xlen && flen == rhs.flen\n+\t    && embedded == rhs.embedded && vlen == rhs.vlen);\n   }\n \n   /* Inequality operator.  */\n@@ -66,7 +73,8 @@ struct riscv_gdbarch_features\n   {\n     std::size_t val = ((embedded ? 1 : 0) << 10\n \t\t       | (xlen & 0x1f) << 5\n-\t\t       | (flen & 0x1f) << 0);\n+\t\t       | (flen & 0x1f) << 0\n+\t\t       | (vlen & 0xfff) << 11);\n     return val;\n   }\n };"
    },
    {
      "sha": "ad0b2e7c78f089f31a44f93517ce530129350222",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (RISC-V Features): Mention vector register feature.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texi (Unwinding Frames in Python): Mention"
    },
    {
      "sha": "dfc00b120b42ae51219d999ea45c77c9f3adf6d1",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -46349,6 +46349,14 @@ target has floating point hardware, but can be moved into the csr\n feature if the target has the floating point control registers, but no\n other floating point hardware.\n \n+The @samp{org.gnu.gdb.riscv.vector} feature is optional.  If present,\n+it should contain registers @samp{v0} through @samp{v31}, all of which\n+must be the same size.  These requirements are based on the v0.10\n+draft vector extension, as the vector extension is not yet final.  In\n+the event that the register set of the vector extension changes for\n+the final specification, the requirements given here could change for\n+future releases of @value{GDBN}.\n+\n @node RX Features\n @subsection RX Features\n @cindex target descriptions, RX Features"
    },
    {
      "sha": "d942b059f55bfb7e585630d4d8e97de18e191475",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 118,
      "deletions": 3,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -99,6 +99,7 @@ const char *riscv_feature_name_csr = \"org.gnu.gdb.riscv.csr\";\n static const char *riscv_feature_name_cpu = \"org.gnu.gdb.riscv.cpu\";\n static const char *riscv_feature_name_fpu = \"org.gnu.gdb.riscv.fpu\";\n static const char *riscv_feature_name_virtual = \"org.gnu.gdb.riscv.virtual\";\n+static const char *riscv_feature_name_vector = \"org.gnu.gdb.riscv.vector\";\n \n /* Cached information about a frame.  */\n \n@@ -575,6 +576,115 @@ struct riscv_csr_feature : public riscv_register_feature\n \n static const struct riscv_csr_feature riscv_csr_feature;\n \n+/* Class representing the v-registers feature set.  */\n+\n+struct riscv_vector_feature : public riscv_register_feature\n+{\n+  riscv_vector_feature ()\n+    : riscv_register_feature (riscv_feature_name_vector)\n+  {\n+    m_registers =  {\n+      { RISCV_V0_REGNUM + 0, { \"v0\" } },\n+      { RISCV_V0_REGNUM + 1, { \"v1\" } },\n+      { RISCV_V0_REGNUM + 2, { \"v2\" } },\n+      { RISCV_V0_REGNUM + 3, { \"v3\" } },\n+      { RISCV_V0_REGNUM + 4, { \"v4\" } },\n+      { RISCV_V0_REGNUM + 5, { \"v5\" } },\n+      { RISCV_V0_REGNUM + 6, { \"v6\" } },\n+      { RISCV_V0_REGNUM + 7, { \"v7\" } },\n+      { RISCV_V0_REGNUM + 8, { \"v8\" } },\n+      { RISCV_V0_REGNUM + 9, { \"v9\" } },\n+      { RISCV_V0_REGNUM + 10, { \"v10\" } },\n+      { RISCV_V0_REGNUM + 11, { \"v11\" } },\n+      { RISCV_V0_REGNUM + 12, { \"v12\" } },\n+      { RISCV_V0_REGNUM + 13, { \"v13\" } },\n+      { RISCV_V0_REGNUM + 14, { \"v14\" } },\n+      { RISCV_V0_REGNUM + 15, { \"v15\" } },\n+      { RISCV_V0_REGNUM + 16, { \"v16\" } },\n+      { RISCV_V0_REGNUM + 17, { \"v17\" } },\n+      { RISCV_V0_REGNUM + 18, { \"v18\" } },\n+      { RISCV_V0_REGNUM + 19, { \"v19\" } },\n+      { RISCV_V0_REGNUM + 20, { \"v20\" } },\n+      { RISCV_V0_REGNUM + 21, { \"v21\" } },\n+      { RISCV_V0_REGNUM + 22, { \"v22\" } },\n+      { RISCV_V0_REGNUM + 23, { \"v23\" } },\n+      { RISCV_V0_REGNUM + 24, { \"v24\" } },\n+      { RISCV_V0_REGNUM + 25, { \"v25\" } },\n+      { RISCV_V0_REGNUM + 26, { \"v26\" } },\n+      { RISCV_V0_REGNUM + 27, { \"v27\" } },\n+      { RISCV_V0_REGNUM + 28, { \"v28\" } },\n+      { RISCV_V0_REGNUM + 29, { \"v29\" } },\n+      { RISCV_V0_REGNUM + 30, { \"v30\" } },\n+      { RISCV_V0_REGNUM + 31, { \"v31\" } },\n+    };\n+  }\n+\n+  /* Return the preferred name for the register with gdb register number\n+     REGNUM, which must be in the inclusive range RISCV_V0_REGNUM to\n+     RISCV_V0_REGNUM + 31.  */\n+  const char *register_name (int regnum) const\n+  {\n+    gdb_assert (regnum >= RISCV_V0_REGNUM\n+\t\t&& regnum <= RISCV_V0_REGNUM + 31);\n+    regnum -= RISCV_V0_REGNUM;\n+    return m_registers[regnum].names[0];\n+  }\n+\n+  /* Check this feature within TDESC, record the registers from this\n+     feature into TDESC_DATA and update ALIASES and FEATURES.  */\n+  bool check (const struct target_desc *tdesc,\n+\t      struct tdesc_arch_data *tdesc_data,\n+\t      std::vector<riscv_pending_register_alias> *aliases,\n+\t      struct riscv_gdbarch_features *features) const\n+  {\n+    const struct tdesc_feature *feature_vector = tdesc_feature (tdesc);\n+\n+    /* It's fine if this feature is missing.  Update the architecture\n+       feature set and return.  */\n+    if (feature_vector == nullptr)\n+      {\n+\tfeatures->vlen = 0;\n+\treturn true;\n+      }\n+\n+    /* Check all of the vector registers are present.  */\n+    for (const auto &reg : m_registers)\n+      {\n+\tif (!reg.check (tdesc_data, feature_vector, true, aliases))\n+\t  return false;\n+      }\n+\n+    /* Look through all of the vector registers and check they all have the\n+       same bitsize.  Use this bitsize to update the feature set for this\n+       gdbarch.  */\n+    int vector_bitsize = -1;\n+    for (const auto &reg : m_registers)\n+      {\n+\tint reg_bitsize = -1;\n+\tfor (const char *name : reg.names)\n+\t  {\n+\t    if (tdesc_unnumbered_register (feature_vector, name))\n+\t      {\n+\t\treg_bitsize = tdesc_register_bitsize (feature_vector, name);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\tgdb_assert (reg_bitsize != -1);\n+\tif (vector_bitsize == -1)\n+\t  vector_bitsize = reg_bitsize;\n+\telse if (vector_bitsize != reg_bitsize)\n+\t  return false;\n+      }\n+\n+    features->vlen = (vector_bitsize / 8);\n+    return true;\n+  }\n+};\n+\n+/* An instance of the v-register feature set.  */\n+\n+static const struct riscv_vector_feature riscv_vector_feature;\n+\n /* Controls whether we place compressed breakpoints or not.  When in auto\n    mode GDB tries to determine if the target supports compressed\n    breakpoints, and uses them if it does.  */\n@@ -1192,7 +1302,7 @@ riscv_register_reggroup_p (struct gdbarch  *gdbarch, int regnum,\n \n   if (reggroup == all_reggroup)\n     {\n-      if (regnum < RISCV_FIRST_CSR_REGNUM || regnum == RISCV_PRIV_REGNUM)\n+      if (regnum < RISCV_FIRST_CSR_REGNUM || regnum >= RISCV_PRIV_REGNUM)\n \treturn 1;\n       if (riscv_is_regnum_a_named_csr (regnum))\n \treturn 1;\n@@ -1226,7 +1336,7 @@ riscv_register_reggroup_p (struct gdbarch  *gdbarch, int regnum,\n       return 0;\n     }\n   else if (reggroup == vector_reggroup)\n-    return 0;\n+    return (regnum >= RISCV_V0_REGNUM && regnum <= RISCV_V31_REGNUM);\n   else\n     return 0;\n }\n@@ -3320,6 +3430,9 @@ riscv_dwarf_reg_to_regnum (struct gdbarch *gdbarch, int reg)\n   else if (reg >= RISCV_DWARF_FIRST_CSR && reg <= RISCV_DWARF_LAST_CSR)\n     return RISCV_FIRST_CSR_REGNUM + (reg - RISCV_DWARF_FIRST_CSR);\n \n+  else if (reg >= RISCV_DWARF_REGNUM_V0 && reg <= RISCV_DWARF_REGNUM_V31)\n+    return RISCV_V0_REGNUM + (reg - RISCV_DWARF_REGNUM_V0);\n+\n   return -1;\n }\n \n@@ -3488,7 +3601,9 @@ riscv_gdbarch_init (struct gdbarch_info info,\n \t\t  && riscv_virtual_feature.check (tdesc, tdesc_data.get (),\n \t\t\t\t\t\t  &pending_aliases, &features)\n \t\t  && riscv_csr_feature.check (tdesc, tdesc_data.get (),\n-\t\t\t\t\t      &pending_aliases, &features));\n+\t\t\t\t\t      &pending_aliases, &features)\n+\t\t  && riscv_vector_feature.check (tdesc, tdesc_data.get (),\n+\t\t\t\t\t\t &pending_aliases, &features));\n   if (!valid_p)\n     {\n       if (riscv_debug_gdbarch)"
    },
    {
      "sha": "62bf4797d02ee8cfc41926fdf498d4f173967c4d",
      "filename": "gdb/riscv-tdep.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/riscv-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96f842cbdb37bb84fb1bab914304a3eff152ad0d/gdb/riscv-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.h?ref=96f842cbdb37bb84fb1bab914304a3eff152ad0d",
      "patch": "@@ -53,7 +53,11 @@ enum\n \n   RISCV_PRIV_REGNUM = 4161,\n \n-  RISCV_LAST_REGNUM = RISCV_PRIV_REGNUM\n+  RISCV_V0_REGNUM,\n+\n+  RISCV_V31_REGNUM = RISCV_V0_REGNUM + 31,\n+\n+  RISCV_LAST_REGNUM = RISCV_V31_REGNUM\n };\n \n /* RiscV DWARF register numbers.  */\n@@ -63,6 +67,8 @@ enum\n   RISCV_DWARF_REGNUM_X31 = 31,\n   RISCV_DWARF_REGNUM_F0 = 32,\n   RISCV_DWARF_REGNUM_F31 = 63,\n+  RISCV_DWARF_REGNUM_V0 = 96,\n+  RISCV_DWARF_REGNUM_V31 = 127,\n   RISCV_DWARF_FIRST_CSR = 4096,\n   RISCV_DWARF_LAST_CSR = 8191,\n };"
    }
  ]
}