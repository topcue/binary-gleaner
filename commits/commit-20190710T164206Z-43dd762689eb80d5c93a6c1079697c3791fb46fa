{
  "sha": "43dd762689eb80d5c93a6c1079697c3791fb46fa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDNkZDc2MjY4OWViODBkNWM5M2E2YzEwNzk2OTdjMzc5MWZiNDZmYQ==",
  "commit": {
    "author": {
      "name": "Hans-Peter Nilsson",
      "email": "hp@bitrange.com",
      "date": "2019-07-10T16:38:19Z"
    },
    "committer": {
      "name": "Hans-Peter Nilsson",
      "email": "hp@bitrange.com",
      "date": "2019-07-10T16:42:06Z"
    },
    "message": "arm-dis.c (print_insn_coprocessor): Rename index to index_operand.\n\nOlder gcc warns, arguably incorrectly, about name collisions between\nglobal functions and function-local variable names.  Consesus has been\nto rename local variables whenever this is spotted, hence committed as\nobvious.  Note the pre-existing variable named idx; \"index_operand\"\nseemed logical given the context.\n\n\t* arm-dis.c (print_insn_coprocessor): Rename index to\n\tindex_operand.",
    "tree": {
      "sha": "3658a903fc1fbf996329a2defb4df766a67707d3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3658a903fc1fbf996329a2defb4df766a67707d3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/43dd762689eb80d5c93a6c1079697c3791fb46fa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43dd762689eb80d5c93a6c1079697c3791fb46fa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/43dd762689eb80d5c93a6c1079697c3791fb46fa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43dd762689eb80d5c93a6c1079697c3791fb46fa/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "5c458ae8f529a11ecab9db470d80695bb31ecfc5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c458ae8f529a11ecab9db470d80695bb31ecfc5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c458ae8f529a11ecab9db470d80695bb31ecfc5"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 10,
    "deletions": 5
  },
  "files": [
    {
      "sha": "6b55f5c3b10f7b1d4e0becf35880c80dd21b5ba5",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43dd762689eb80d5c93a6c1079697c3791fb46fa/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43dd762689eb80d5c93a6c1079697c3791fb46fa/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=43dd762689eb80d5c93a6c1079697c3791fb46fa",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-10  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* arm-dis.c (print_insn_coprocessor): Rename index to\n+\tindex_operand.\n+\n 2019-07-05  Kito Cheng <kito.cheng@sifive.com>\n \n \t* riscv-opc.c (riscv_insn_types): Add r4 type."
    },
    {
      "sha": "f3b1cc35a0f2d7259d6edfb5a5964b2d217a8701",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43dd762689eb80d5c93a6c1079697c3791fb46fa/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43dd762689eb80d5c93a6c1079697c3791fb46fa/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=43dd762689eb80d5c93a6c1079697c3791fb46fa",
      "patch": "@@ -6767,23 +6767,23 @@ print_mve_vmov_index (struct disassemble_info *info, unsigned long given)\n   unsigned long op1 = arm_decode_field (given, 21, 22);\n   unsigned long op2 = arm_decode_field (given, 5, 6);\n   unsigned long h = arm_decode_field (given, 16, 16);\n-  unsigned long index, esize, targetBeat, idx;\n+  unsigned long index_operand, esize, targetBeat, idx;\n   void *stream = info->stream;\n   fprintf_ftype func = info->fprintf_func;\n \n   if ((op1 & 0x2) == 0x2)\n     {\n-      index = op2;\n+      index_operand = op2;\n       esize = 8;\n     }\n   else if (((op1 & 0x2) == 0x0) && ((op2 & 0x1) == 0x1))\n     {\n-      index = op2  >> 1;\n+      index_operand = op2  >> 1;\n       esize = 16;\n     }\n   else if (((op1 & 0x2) == 0) && ((op2 & 0x3) == 0))\n     {\n-      index = 0;\n+      index_operand = 0;\n       esize = 32;\n     }\n   else\n@@ -6793,7 +6793,7 @@ print_mve_vmov_index (struct disassemble_info *info, unsigned long given)\n     }\n \n   targetBeat =  (op1 & 0x1) | (h << 1);\n-  idx = index + targetBeat * (32/esize);\n+  idx = index_operand + targetBeat * (32/esize);\n \n   func (stream, \"%lu\", idx);\n }"
    }
  ]
}