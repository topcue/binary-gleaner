{
  "sha": "578c64a45a0e47fd0af53c77339ec0c26ef4874a",
  "node_id": "C_kwDOANOeidoAKDU3OGM2NGE0NWEwZTQ3ZmQwYWY1M2M3NzMzOWVjMGMyNmVmNDg3NGE",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-11-18T16:48:19Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-11-18T16:48:19Z"
    },
    "message": "Add multibyte character warning option to the assembler.\n\n\t* as.c (parse_args): Add support for --multibyte-handling.\n\t* as.h (multibyte_handling): Declare.\n\t* app.c (scan_for_multibyte_characters): New function.\n\t(do_scrub_chars): Call the new function if multibyte warning is\n\tenabled.\n\t* input-scrub,c (input_scrub_next_buffer): Call the multibyte\n\tscanning function if multibyte warnings are enabled.\n\t* symbols.c (struct symbol_flags): Add multibyte_warned bit.\n\t(symbol_init): Call the multibyte scanning function if multibyte\n\tsymbol warnings are enabled.\n\t(S_SET_SEGMENT): Likewise.\n\t* NEWS: Mention the new feature.\n\t* doc/as.texi: Document the new feature.\n\t* testsuite/gas/all/multibyte.s: New test source file.\n\t* testsuite/gas/all/multibyte1.d: New test driver file.\n\t* testsuite/gas/all/multibyte1.l: New test expected output.\n\t* testsuite/gas/all/multibyte2.d: New test driver file.\n\t* testsuite/gas/all/multibyte2.l: New test expected output.\n\t* testsuite/gas/all/gas.exp: Run the new tests.",
    "tree": {
      "sha": "b95f61afc34286ad08556eb14848e9ba2d0123a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b95f61afc34286ad08556eb14848e9ba2d0123a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/578c64a45a0e47fd0af53c77339ec0c26ef4874a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/578c64a45a0e47fd0af53c77339ec0c26ef4874a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/578c64a45a0e47fd0af53c77339ec0c26ef4874a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/578c64a45a0e47fd0af53c77339ec0c26ef4874a/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "76eb8ef1ce470ca71b10fae721e32d49998d87b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76eb8ef1ce470ca71b10fae721e32d49998d87b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/76eb8ef1ce470ca71b10fae721e32d49998d87b9"
    }
  ],
  "stats": {
    "total": 215,
    "additions": 205,
    "deletions": 10
  },
  "files": [
    {
      "sha": "8732088c91e870109ed1622022a745d8e0d59fdc",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -1,3 +1,25 @@\n+2021-11-18  Nick Clifton  <nickc@redhat.com>\n+\n+\t* as.c (parse_args): Add support for --multibyte-handling.\n+\t* as.h (multibyte_handling): Declare.\n+\t* app.c (scan_for_multibyte_characters): New function.\n+\t(do_scrub_chars): Call the new function if multibyte warning is\n+\tenabled.\n+\t* input-scrub,c (input_scrub_next_buffer): Call the multibyte\n+\tscanning function if multibyte warnings are enabled.\n+\t* symbols.c (struct symbol_flags): Add multibyte_warned bit.\n+\t(symbol_init): Call the multibyte scanning function if multibyte\n+\tsymbol warnings are enabled.\n+\t(S_SET_SEGMENT): Likewise.\n+\t* NEWS: Mention the new feature.\n+\t* doc/as.texi: Document the new feature.\n+\t* testsuite/gas/all/multibyte.s: New test source file.\n+\t* testsuite/gas/all/multibyte1.d: New test driver file.\n+\t* testsuite/gas/all/multibyte1.l: New test expected output.\n+\t* testsuite/gas/all/multibyte2.d: New test driver file.\n+\t* testsuite/gas/all/multibyte2.l: New test expected output.\n+\t* testsuite/gas/all/gas.exp: Run the new tests.\n+\n 2021-11-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/as.texi (File): Update description of .file 0 directive."
    },
    {
      "sha": "4288e6213ddd96be1f9f002440144f47f0cb0599",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -13,6 +13,14 @@\n \n * Add support for Scalable Matrix Extension (SME) for AArch64.\n \n+* The --multibyte-handling=[allow|warn|warn-sym-only] option tells the\n+  assembler what to when it encoutners multibyte characters in the input.  The\n+  default is to allow them.  Setting the option to \"warn\" will generate a\n+  warning message whenever any multibyte character is encountered.  Using the\n+  option to \"warn-sym-only\" will make the assembler generate a warning whenever a\n+  symbol is defined containing multibyte characters.  (References to undefined\n+  symbols will not generate warnings).\n+\n * Outputs of .ds.x directive and .tfloat directive with hex input from\n   x86 assembler have been reduced from 12 bytes to 10 bytes to match the\n   output of .tfloat directive."
    },
    {
      "sha": "0c15b969007ba5c86b2c83d4f5125eb846d2d64a",
      "filename": "gas/app.c",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/app.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/app.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/app.c?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -345,6 +345,55 @@ process_escape (int ch)\n     }\n }\n \n+#define MULTIBYTE_WARN_COUNT_LIMIT 10\n+static unsigned int multibyte_warn_count = 0;\n+\n+bool\n+scan_for_multibyte_characters (const unsigned char *  start,\n+\t\t\t       const unsigned char *  end,\n+\t\t\t       bool                   warn)\n+{\n+  if (end <= start)\n+    return false;\n+\n+  if (warn && multibyte_warn_count > MULTIBYTE_WARN_COUNT_LIMIT)\n+    return false;\n+\n+  bool found = false;\n+\n+  while (start < end)\n+    {\n+      unsigned char c;\n+\n+      if ((c = * start++) <= 0x7f)\n+\tcontinue;\n+\n+      if (!warn)\n+\treturn true;\n+\n+      found = true;\n+\n+      const char * filename;\n+      unsigned int lineno;\n+\n+      filename = as_where (& lineno);\n+      if (filename == NULL)\n+\tas_warn (_(\"multibyte character (%#x) encountered in input\"), c);\n+      else if (lineno == 0)\n+\tas_warn (_(\"multibyte character (%#x) encountered in %s\"), c, filename);\n+      else\n+\tas_warn (_(\"multibyte character (%#x) encountered in %s at or near line %u\"), c, filename, lineno);\n+\n+      if (++ multibyte_warn_count == MULTIBYTE_WARN_COUNT_LIMIT)\n+\t{\n+\t  as_warn (_(\"further multibyte character warnings suppressed\"));\n+\t  break;\n+\t}\n+    }\n+\n+  return found;\n+}\n+\n /* This function is called to process input characters.  The GET\n    parameter is used to retrieve more input characters.  GET should\n    set its parameter to point to a buffer, and return the length of\n@@ -463,6 +512,11 @@ do_scrub_chars (size_t (*get) (char *, size_t), char *tostart, size_t tolen)\n \treturn 0;\n       from = input_buffer;\n       fromend = from + fromlen;\n+\n+      if (multibyte_handling == multibyte_warn)\n+\t(void) scan_for_multibyte_characters ((const unsigned char *) from,\n+\t\t\t\t\t      (const unsigned char* ) fromend,\n+\t\t\t\t\t      true /* Generate warnings.  */);\n     }\n \n   while (1)"
    },
    {
      "sha": "8af04aa85b8d020aa6ae0b102630708658fb8ca1",
      "filename": "gas/as.c",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/as.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/as.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/as.c?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -474,7 +474,7 @@ parse_args (int * pargc, char *** pargv)\n       OPTION_DEBUG_PREFIX_MAP,\n       OPTION_DEFSYM,\n       OPTION_LISTING_LHS_WIDTH,\n-      OPTION_LISTING_LHS_WIDTH2,\n+      OPTION_LISTING_LHS_WIDTH2, /* = STD_BASE + 10 */\n       OPTION_LISTING_RHS_WIDTH,\n       OPTION_LISTING_CONT_LINES,\n       OPTION_DEPFILE,\n@@ -484,7 +484,7 @@ parse_args (int * pargc, char *** pargv)\n       OPTION_GDWARF_3,\n       OPTION_GDWARF_4,\n       OPTION_GDWARF_5,\n-      OPTION_GDWARF_SECTIONS,\n+      OPTION_GDWARF_SECTIONS, /* = STD_BASE + 20 */\n       OPTION_GDWARF_CIE_VERSION,\n       OPTION_STRIP_LOCAL_ABSOLUTE,\n       OPTION_TRADITIONAL_FORMAT,\n@@ -494,7 +494,7 @@ parse_args (int * pargc, char *** pargv)\n       OPTION_NOEXECSTACK,\n       OPTION_SIZE_CHECK,\n       OPTION_ELF_STT_COMMON,\n-      OPTION_ELF_BUILD_NOTES,\n+      OPTION_ELF_BUILD_NOTES, /* = STD_BASE + 30 */\n       OPTION_SECTNAME_SUBST,\n       OPTION_ALTERNATE,\n       OPTION_AL,\n@@ -503,7 +503,8 @@ parse_args (int * pargc, char *** pargv)\n       OPTION_WARN_FATAL,\n       OPTION_COMPRESS_DEBUG,\n       OPTION_NOCOMPRESS_DEBUG,\n-      OPTION_NO_PAD_SECTIONS /* = STD_BASE + 40 */\n+      OPTION_NO_PAD_SECTIONS,\n+      OPTION_MULTIBYTE_HANDLING  /* = STD_BASE + 40 */\n     /* When you add options here, check that they do\n        not collide with OPTION_MD_BASE.  See as.h.  */\n     };\n@@ -581,6 +582,7 @@ parse_args (int * pargc, char *** pargv)\n     ,{\"target-help\", no_argument, NULL, OPTION_TARGET_HELP}\n     ,{\"traditional-format\", no_argument, NULL, OPTION_TRADITIONAL_FORMAT}\n     ,{\"warn\", no_argument, NULL, OPTION_WARN}\n+    ,{\"multibyte-handling\", required_argument, NULL, OPTION_MULTIBYTE_HANDLING}\n   };\n \n   /* Construct the option lists from the standard list and the target\n@@ -683,6 +685,19 @@ parse_args (int * pargc, char *** pargv)\n \t  flag_traditional_format = 1;\n \t  break;\n \n+\tcase OPTION_MULTIBYTE_HANDLING:\n+\t  if (strcmp (optarg, \"allow\") == 0)\n+\t    multibyte_handling = multibyte_allow;\n+\t  else if (strcmp (optarg, \"warn\") == 0)\n+\t    multibyte_handling = multibyte_warn;\n+\t  else if (strcmp (optarg, \"warn-sym-only\") == 0)\n+\t    multibyte_handling = multibyte_warn_syms;\n+\t  else if (strcmp (optarg, \"warn_sym_only\") == 0)\n+\t    multibyte_handling = multibyte_warn_syms;\n+\t  else\n+\t    as_fatal (_(\"unexpected argument to --multibyte-input-option: '%s'\"), optarg);\n+\t  break;\n+\n \tcase OPTION_VERSION:\n \t  /* This output is intended to follow the GNU standards document.  */\n \t  printf (_(\"GNU assembler %s\\n\"), BFD_VERSION_STRING);"
    },
    {
      "sha": "89dae1b68336aada189f815afeafd8f858f52db2",
      "filename": "gas/as.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/as.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/as.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/as.h?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -344,6 +344,14 @@ COMMON int linkrelax;\n \n COMMON int do_not_pad_sections_to_alignment;\n \n+enum multibyte_input_handling\n+{\n+  multibyte_allow = 0,\n+  multibyte_warn,\n+  multibyte_warn_syms\n+};\n+COMMON enum multibyte_input_handling multibyte_handling;\n+\n /* TRUE if we should produce a listing.  */\n extern int listing;\n \n@@ -450,6 +458,7 @@ void   input_scrub_insert_file (char *);\n char * input_scrub_new_file (const char *);\n char * input_scrub_next_buffer (char **bufp);\n size_t do_scrub_chars (size_t (*get) (char *, size_t), char *, size_t);\n+bool   scan_for_multibyte_characters (const unsigned char *, const unsigned char *, bool);\n int    gen_to_words (LITTLENUM_TYPE *, int, long);\n int    had_err (void);\n int    ignore_input (void);"
    },
    {
      "sha": "b83f50b0bfc01dfac3b62dc82f9f7d5ac86f9370",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 26,
      "deletions": 4,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -245,6 +245,7 @@ gcc(1), ld(1), and the Info entries for @file{binutils} and @file{ld}.\n  [@b{--sectname-subst}] [@b{--size-check=[error|warning]}]\n  [@b{--elf-stt-common=[no|yes]}]\n  [@b{--generate-missing-build-notes=[no|yes]}]\n+ [@b{--multibyte-handling=[allow|warn|warn-sym-only]}]\n  [@b{--target-help}] [@var{target-options}]\n  [@b{--}|@var{files} @dots{}]\n @c\n@@ -871,6 +872,18 @@ Set the maximum width of an input source line, as displayed in a listing, to\n Set the maximum number of lines printed in a listing for a single line of input\n to @var{number} + 1.\n \n+@item --multibyte-handling=allow\n+@itemx --multibyte-handling=warn\n+@itemx --multibyte-handling=warn-sym-only\n+Controls how the assembler handles multibyte characters in the input.  The\n+default (which can be restored by using the @option{allow} argument) is to\n+allow such characters without complaint.  Using the @option{warn} argument will\n+make the assembler generate a warning message whenever any multibyte character\n+is encountered.  Using the @option{warn-sym-only} argument will only cause a\n+warning to be generated when a symbol is defined with a name that contains\n+multibyte characters.  (References to undefined symbols will not generate a\n+warning).\n+\n @item --no-pad-sections\n Stop the assembler for padding the ends of output sections to the alignment\n of that section.  The default is to pad the sections, but this can waste space\n@@ -2966,9 +2979,11 @@ are noted in @ref{Machine Dependencies}.\n @end ifset\n No symbol may begin with a digit.  Case is significant.\n There is no length limit; all characters are significant.  Multibyte characters\n-are supported.  Symbols are delimited by characters not in that set, or by the\n-beginning of a file (since the source program must end with a newline, the end\n-of a file is not a possible symbol delimiter).  @xref{Symbols}.\n+are supported, but note that the setting of the\n+@option{--multibyte-handling} option might prevent their use.  Symbols\n+are delimited by characters not in that set, or by the beginning of a file\n+(since the source program must end with a newline, the end of a file is not a\n+possible symbol delimiter).  @xref{Symbols}.\n \n Symbol names may also be enclosed in double quote @code{\"} characters.  In such\n cases any characters are allowed, except for the NUL character.  If a double\n@@ -3858,11 +3873,18 @@ than @code{Foo}.\n Symbol names do not start with a digit.  An exception to this rule is made for\n Local Labels.  See below.\n \n-Multibyte characters are supported.  To generate a symbol name containing\n+Multibyte characters are supported, but note that the setting of the\n+@option{multibyte-handling} option might prevent their use.\n+To generate a symbol name containing\n multibyte characters enclose it within double quotes and use escape codes. cf\n @xref{Strings}.  Generating a multibyte symbol name from a label is not\n currently supported.\n \n+Since multibyte symbol names are unusual, and could possibly be used\n+maliciously, @command{@value{AS}} provides a command line option\n+(@option{--multibyte-handling=warn-sym-only}) which can be used to generate a\n+warning message whenever a symbol name containing multibyte characters is defined.\n+\n Each symbol has exactly one name.  Each name in an assembly language program\n refers to exactly one symbol.  You may use that symbol name any number of times\n in a program."
    },
    {
      "sha": "c665402220eaaa86a1ef53bdf2befccbd85cf5ec",
      "filename": "gas/input-scrub.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/input-scrub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/input-scrub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/input-scrub.c?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -377,6 +377,11 @@ input_scrub_next_buffer (char **bufp)\n \t  ++p;\n \t}\n \n+      if (multibyte_handling == multibyte_warn)\n+\t(void) scan_for_multibyte_characters ((const unsigned char *) p,\n+\t\t\t\t\t      (const unsigned char *) limit,\n+\t\t\t\t\t      true /* Generate warnings */);\n+\n       /* We found a newline in the newly read chars.  */\n       partial_where = p;\n       partial_size = limit - p;"
    },
    {
      "sha": "889ec66214938a4dbb17a74cbcacbb8d44b0ea88",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 32,
      "deletions": 2,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -82,6 +82,10 @@ struct symbol_flags\n   /* Whether the symbol has been marked to be removed by a .symver\n      directive.  */\n   unsigned int removed : 1;\n+\n+  /* Set when a warning about the symbol containing multibyte characters\n+     is generated.  */\n+  unsigned int multibyte_warned : 1;\n };\n \n /* A pointer in the symbol may point to either a complete symbol\n@@ -198,7 +202,7 @@ static void *\n symbol_entry_find (htab_t table, const char *name)\n {\n   hashval_t hash = htab_hash_string (name);\n-  symbol_entry_t needle = { { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n+  symbol_entry_t needle = { { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n \t\t\t      hash, name, 0, 0, 0 } };\n   return htab_find_with_hash (table, &needle, hash);\n }\n@@ -309,6 +313,18 @@ symbol_init (symbolS *symbolP, const char *name, asection *sec,\n   symbolP->bsym->name = name;\n   symbolP->bsym->section = sec;\n \n+  if (multibyte_handling == multibyte_warn_syms\n+      && ! symbolP->flags.local_symbol\n+      && sec != undefined_section\n+      && ! symbolP->flags.multibyte_warned\n+      && scan_for_multibyte_characters ((const unsigned char *) name,\n+\t\t\t\t\t(const unsigned char *) name + strlen (name),\n+\t\t\t\t\tfalse /* Do not warn.  */))\n+    {\n+      as_warn (_(\"symbol '%s' contains multibyte characters\"), name);\n+      symbolP->flags.multibyte_warned = 1;\n+    }\n+\n   S_SET_VALUE (symbolP, valu);\n \n   symbol_clear_list_pointers (symbolP);\n@@ -2427,7 +2443,21 @@ S_SET_SEGMENT (symbolS *s, segT seg)\n \tabort ();\n     }\n   else\n-    s->bsym->section = seg;\n+    {\n+      if (multibyte_handling == multibyte_warn_syms\n+\t  && ! s->flags.local_symbol\n+\t  && seg != undefined_section\n+\t  && ! s->flags.multibyte_warned\n+\t  && scan_for_multibyte_characters ((const unsigned char *) s->name,\n+\t\t\t\t\t    (const unsigned char *) s->name + strlen (s->name),\n+\t\t\t\t\t    false))\n+\t{\n+\t  as_warn (_(\"symbol '%s' contains multibyte characters\"), s->name);\n+\t  s->flags.multibyte_warned = 1;\n+\t}\n+\n+      s->bsym->section = seg;\n+    }\n }\n \n void"
    },
    {
      "sha": "5eee4f8abfab75685e25ef3717cbd365e8193e9e",
      "filename": "gas/testsuite/gas/all/gas.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/gas.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/gas.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/gas.exp?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -502,3 +502,5 @@ run_dump_test \"nop\"\n run_dump_test \"asciz\"\n run_dump_test \"pr27384\"\n run_dump_test \"pr27381\"\n+run_dump_test \"multibyte1\"\n+run_dump_test \"multibyte2\""
    },
    {
      "sha": "f93ea4666bece33ee677deb0a4ccf293be14cd09",
      "filename": "gas/testsuite/gas/all/multibyte.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/multibyte.s?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -0,0 +1,8 @@\n+\t.text\n+\t.globl\the\u202eoll\u202c\n+he\u202eoll\u202c:\n+\t.nop\n+\t\n+\t.globl\thello\n+hello:\n+\t.nop"
    },
    {
      "sha": "dcbd54d0ff808e33c9f035a0bed24b82170151a2",
      "filename": "gas/testsuite/gas/all/multibyte1.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/multibyte1.d?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -0,0 +1,3 @@\n+#source: multibyte.s\n+#as: --multibyte-handling=warn\n+#warning_output: multibyte1.l"
    },
    {
      "sha": "a592c17055b529a41daa73a33c903da13b24fe9a",
      "filename": "gas/testsuite/gas/all/multibyte1.l",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/multibyte1.l?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -0,0 +1,12 @@\n+[^:]*: Assembler messages:\n+[^:]*: Warning: multibyte character \\(0xe2\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0x80\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0xae\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0xe2\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0x80\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0xac\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0xe2\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0x80\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0xae\\) encountered in .*multibyte.s\n+[^:]*: Warning: multibyte character \\(0xe2\\) encountered in .*multibyte.s\n+[^:]*: Warning: further multibyte character warnings suppressed"
    },
    {
      "sha": "3a268dea4e9b990c49ad711f480c791a9220865b",
      "filename": "gas/testsuite/gas/all/multibyte2.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/multibyte2.d?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -0,0 +1,3 @@\n+#source: multibyte.s\n+#as: --multibyte-handling=warn-sym-only\n+#warning_output: multibyte2.l"
    },
    {
      "sha": "18d7ca5fd28cf3e0dde3048998e2264559786f4e",
      "filename": "gas/testsuite/gas/all/multibyte2.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/578c64a45a0e47fd0af53c77339ec0c26ef4874a/gas/testsuite/gas/all/multibyte2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/multibyte2.l?ref=578c64a45a0e47fd0af53c77339ec0c26ef4874a",
      "patch": "@@ -0,0 +1,2 @@\n+[^:]*: Assembler messages:\n+[^:]*:3: Warning: symbol '.*' contains multibyte characters"
    }
  ]
}