{
  "sha": "545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
  "node_id": "C_kwDOANOeidoAKDU0NWU0OWY1ZWU5MTFiYmNmNTVkYzNkYmViNDliNjIxMDNiMjA1ZDQ",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-12-07T07:07:18Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-12-07T07:07:18Z"
    },
    "message": "[gdb/tdep] Fix inferior plt calls in PIE for i386\n\nConsider test-case test.c:\n...\nint main (void) {\n  void *p = malloc (10);\n  return 0;\n}\n...\n\nWhen compiled to a non-PIE exec:\n...\n$ gcc -m32 test.c\n...\nthe call sequence looks like:\n...\n 8048447:       83 ec 0c                sub    $0xc,%esp\n 804844a:       6a 0a                   push   $0xa\n 804844c:       e8 bf fe ff ff          call   8048310 <malloc@plt>\n...\nwhich calls to:\n...\n08048310 <malloc@plt>:\n 8048310:       ff 25 0c a0 04 08       jmp    *0x804a00c\n 8048316:       68 00 00 00 00          push   $0x0\n 804831b:       e9 e0 ff ff ff          jmp    8048300 <.plt>\n...\nwhere the first insn at 0x8048310 initially jumps to the following address\n0x8048316, read from the .got.plt @ 0x804a00c:\n...\n 804a000 0c9f0408 00000000 00000000 16830408  ................\n 804a010 26830408                             &...\n...\n\nLikewise, when compiled as a PIE:\n...\n$ gcc -m32 -fPIE -pie test.c\n...\nwe have this call sequence (with %ebx setup to point to the .got.plt):\n...\n0000055d <main>:\n 579:   83 ec 0c                sub    $0xc,%esp\n 57c:   6a 0a                   push   $0xa\n 57e:   89 c3                   mov    %eax,%ebx\n 580:   e8 6b fe ff ff          call   3f0 <malloc@plt>\n...\nwhich calls to:\n...\n000003f0 <malloc@plt>:\n 3f0:   ff a3 0c 00 00 00       jmp    *0xc(%ebx)\n 3f6:   68 00 00 00 00          push   $0x0\n 3fb:   e9 e0 ff ff ff          jmp    3e0 <.plt>\n...\nwhere the insn at 0x3f0 initially jumps to following address 0x3f6, read from\nthe .got.plt at offset 0xc:\n...\n 2000 f41e0000 00000000 00000000 f6030000  ................\n 2010 06040000                             ....\n...\n\nWhen instead doing an inferior call to malloc (with nosharedlib to force\nmalloc to resolve to malloc@plt rather than the functions in ld.so or libc.so)\nwith the non-PIE exec, we have the expected:\n...\n$ gdb -q -batch a.out -ex start -ex nosharedlib -ex \"p /x (void *)malloc (10)\"\nTemporary breakpoint 1 at 0x8048444\n\nTemporary breakpoint 1, 0x08048444 in main ()\n$1 = 0x804b160\n...\n\nBut with the PIE exec, we run into:\n...\n$ gdb -q -batch a.out -ex start -ex nosharedlib -ex \"p /x (void *)malloc (10)\"\nTemporary breakpoint 1 at 0x56c\n\nTemporary breakpoint 1, 0x5655556c in main ()\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x565553f0 in malloc@plt ()\n...\n\nThe segfault happens because:\n- the inferior call mechanism doesn't setup %ebx\n- %ebx instead is 0\n- the jump to \"*0xc(%ebx)\" reads from memory at 0xc\n\nFix this by setting up %ebx properly in i386_thiscall_push_dummy_call.\n\nFixes this failure with target board unix/-m32/-pie/-fPIE reported in\nPR28467:\n...\nFAIL: gdb.base/nodebug.exp: p/c (int) array_index(\"abcdef\",2)\n...\n\nTested on x86_64-linux, with target board unix/-m32 and unix/-m32/-fPIE/-pie.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=28467",
    "tree": {
      "sha": "88abf788f10a8b98d4d52b8da3a05aa26b95ec6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88abf788f10a8b98d4d52b8da3a05aa26b95ec6a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dec38d3b11c779e8f386050ed5046aaa4e759db",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9dec38d3b11c779e8f386050ed5046aaa4e759db"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 47,
    "deletions": 1
  },
  "files": [
    {
      "sha": "7bb0dd4b7395d96d484773c01df1b97fdd7e7328",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
      "patch": "@@ -67,6 +67,8 @@\n #include <algorithm>\n #include <unordered_set>\n #include \"producer.h\"\n+#include \"infcall.h\"\n+#include \"maint.h\"\n \n /* Register names.  */\n \n@@ -2778,6 +2780,47 @@ i386_thiscall_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n     regcache->cooked_write (I386_ECX_REGNUM,\n \t\t\t    value_contents_all (args[0]).data ());\n \n+  /* If the PLT is position-independent, the SYSTEM V ABI requires %ebx to be\n+     set to the address of the GOT when doing a call to a PLT address.\n+     Note that we do not try to determine whether the PLT is\n+     position-independent, we just set the register regardless.  */\n+  CORE_ADDR func_addr = find_function_addr (function, nullptr, nullptr);\n+  if (in_plt_section (func_addr))\n+    {\n+      struct objfile *objf = nullptr;\n+      asection *asect = nullptr;\n+      obj_section *osect = nullptr;\n+\n+      /* Get object file containing func_addr.  */\n+      obj_section *func_section = find_pc_section (func_addr);\n+      if (func_section != nullptr)\n+\tobjf = func_section->objfile;\n+\n+      if (objf != nullptr)\n+\t{\n+\t  /* Get corresponding .got.plt or .got section.  */\n+\t  asect = bfd_get_section_by_name (objf->obfd, \".got.plt\");\n+\t  if (asect == nullptr)\n+\t    asect = bfd_get_section_by_name (objf->obfd, \".got\");\n+\t}\n+\n+      if (asect != nullptr)\n+\t/* Translate asection to obj_section.  */\n+\tosect = maint_obj_section_from_bfd_section (objf->obfd, asect, objf);\n+\n+      if (osect != nullptr)\n+\t{\n+\t  /* Store the section address in %ebx.  */\n+\t  store_unsigned_integer (buf, 4, byte_order, osect->addr ());\n+\t  regcache->cooked_write (I386_EBX_REGNUM, buf);\n+\t}\n+      else\n+\t{\n+\t  /* If we would only do this for a position-independent PLT, it would\n+\t     make sense to issue a warning here.  */\n+\t}\n+    }\n+\n   /* MarkK wrote: This \"+ 8\" is all over the place:\n      (i386_frame_this_id, i386_sigtramp_frame_this_id,\n      i386_dummy_id).  It's there, since all frame unwinders for"
    },
    {
      "sha": "4eb983845800340be591a03ec2774cddc6d6d15c",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
      "patch": "@@ -329,7 +329,7 @@ print_objfile_section_info (bfd *abfd, struct obj_section *asect,\n    from ABFD.  It might be that no such wrapper exists (for example debug\n    sections don't have such wrappers) in which case nullptr is returned.  */\n \n-static obj_section *\n+obj_section *\n maint_obj_section_from_bfd_section (bfd *abfd,\n \t\t\t\t    asection *asection,\n \t\t\t\t    objfile *ofile)"
    },
    {
      "sha": "81b3beb703d1d5fb53fca6011bb185f07912e2d1",
      "filename": "gdb/maint.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/gdb/maint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/545e49f5ee911bbcf55dc3dbeb49b62103b205d4/gdb/maint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.h?ref=545e49f5ee911bbcf55dc3dbeb49b62103b205d4",
      "patch": "@@ -63,4 +63,7 @@ class scoped_command_stats\n   int m_start_nr_blocks;\n };\n \n+extern obj_section *maint_obj_section_from_bfd_section (bfd *abfd,\n+\t\t\t\t\t\t\tasection *asection,\n+\t\t\t\t\t\t\tobjfile *ofile);\n #endif /* MAINT_H */"
    }
  ]
}