{
  "sha": "35d1cfc2000388028c8f032e714b576615e8db02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzVkMWNmYzIwMDAzODgwMjhjOGYwMzJlNzE0YjU3NjYxNWU4ZGIwMg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T11:03:30Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:46Z"
    },
    "message": "[PATCH 29/57][Arm][GAS] Add support for MVE instructions: vqdmullt and vqdmullb\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): Add new operand.\n\t(parse_operands): Handle new operand.\n\t(do_mve_vqdmull): New encoding function.\n\t(insns): Add entry for MVE mnemonics.\n\t* testsuite/gas/arm/mve-vqdmull-bad.d: New test.\n\t* testsuite/gas/arm/mve-vqdmull-bad.l: New test.\n\t* testsuite/gas/arm/mve-vqdmull-bad.s: New test.",
    "tree": {
      "sha": "54e70991fbb866371c7f4fc78fd3dc677a55a910",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54e70991fbb866371c7f4fc78fd3dc677a55a910"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/35d1cfc2000388028c8f032e714b576615e8db02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35d1cfc2000388028c8f032e714b576615e8db02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/35d1cfc2000388028c8f032e714b576615e8db02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35d1cfc2000388028c8f032e714b576615e8db02/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42b16635dd63ab3e71c76af130423e0ef16d5995",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42b16635dd63ab3e71c76af130423e0ef16d5995",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/42b16635dd63ab3e71c76af130423e0ef16d5995"
    }
  ],
  "stats": {
    "total": 167,
    "additions": 167,
    "deletions": 0
  },
  "files": [
    {
      "sha": "bcd049364b03eaedd1ce5ecc9387b4433df7abef",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35d1cfc2000388028c8f032e714b576615e8db02/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35d1cfc2000388028c8f032e714b576615e8db02/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=35d1cfc2000388028c8f032e714b576615e8db02",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): Add new operand.\n+\t(parse_operands): Handle new operand.\n+\t(do_mve_vqdmull): New encoding function.\n+\t(insns): Add entry for MVE mnemonics.\n+\t* testsuite/gas/arm/mve-vqdmull-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vqdmull-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vqdmull-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (enum operand_parse_code): Add new operand."
    },
    {
      "sha": "42c9cfbc339e99c739902f9afe7d7e08f0a9a397",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35d1cfc2000388028c8f032e714b576615e8db02/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35d1cfc2000388028c8f032e714b576615e8db02/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=35d1cfc2000388028c8f032e714b576615e8db02",
      "patch": "@@ -6923,6 +6923,7 @@ enum operand_parse_code\n \t\t   GPR (no SP/SP)  */\n   OP_RMQ,\t/* MVE vector register.  */\n   OP_RMQRZ,\t/* MVE vector or ARM register including ZR.  */\n+  OP_RMQRR,     /* MVE vector or ARM register.  */\n \n   /* New operands for Armv8.1-M Mainline.  */\n   OP_LR,\t/* ARM LR register */\n@@ -7281,6 +7282,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  po_reg_or_fail (REG_TYPE_NSDQ);\n \t  inst.error = 0;\n \t  break;\n+\tcase OP_RMQRR:\n+\t  po_reg_or_goto (REG_TYPE_RN, try_rmq);\n+\t  break;\n+\ttry_rmq:\n \tcase OP_RMQ:\n \t  po_reg_or_fail (REG_TYPE_MQ);\n \t  break;\n@@ -17282,6 +17287,35 @@ do_mve_vhcadd (void)\n   inst.is_neon = 1;\n }\n \n+static void\n+do_mve_vqdmull (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQQ, NS_QQR, NS_NULL);\n+  struct neon_type_el et\n+    = neon_check_type (3, rs, N_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n+\n+  if (et.size == 32\n+      && (inst.operands[0].reg == inst.operands[1].reg\n+\t  || (rs == NS_QQQ && inst.operands[0].reg == inst.operands[2].reg)))\n+    as_tsktsk (BAD_MVE_SRCDEST);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  if (rs == NS_QQQ)\n+    {\n+      mve_encode_qqq (et.size == 32, 64);\n+      inst.instruction |= 1;\n+    }\n+  else\n+    {\n+      mve_encode_qqr (64, et.size == 32, 0);\n+      inst.instruction |= 0x3 << 5;\n+    }\n+}\n+\n static void\n do_mve_vadc (void)\n {\n@@ -24838,6 +24872,8 @@ static const struct asm_opcode insns[] =\n  mToC(\"vqdmlah\",   ee000e60,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n  mToC(\"vqdmlash\",  ee001e60,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n  mToC(\"vqrdmlash\", ee001e40,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n+ mToC(\"vqdmullt\",  ee301f00,\t3, (RMQ, RMQ, RMQRR),\t\tmve_vqdmull),\n+ mToC(\"vqdmullb\",  ee300f00,\t3, (RMQ, RMQ, RMQRR),\t\tmve_vqdmull),\n \n #undef THUMB_VARIANT\n #define THUMB_VARIANT & mve_fp_ext"
    },
    {
      "sha": "4eb6fb2dfc665ee696426b1b2a5fff616f2da173",
      "filename": "gas/testsuite/gas/arm/mve-vqdmull-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35d1cfc2000388028c8f032e714b576615e8db02/gas/testsuite/gas/arm/mve-vqdmull-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35d1cfc2000388028c8f032e714b576615e8db02/gas/testsuite/gas/arm/mve-vqdmull-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqdmull-bad.d?ref=35d1cfc2000388028c8f032e714b576615e8db02",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VQDMULLT and VQDMULLB instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vqdmull-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "1ddc335a7ffc90c63147c046824b650a682abbac",
      "filename": "gas/testsuite/gas/arm/mve-vqdmull-bad.l",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35d1cfc2000388028c8f032e714b576615e8db02/gas/testsuite/gas/arm/mve-vqdmull-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35d1cfc2000388028c8f032e714b576615e8db02/gas/testsuite/gas/arm/mve-vqdmull-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqdmull-bad.l?ref=35d1cfc2000388028c8f032e714b576615e8db02",
      "patch": "@@ -0,0 +1,61 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vqdmullt.s8 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vqdmullt.u8 q0,q1,q2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vqdmullt.i16 q0,q1,q2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vqdmullt.s64 q0,q1,q2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vqdmullb.s8 q0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vqdmullb.u8 q0,q1,q2'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vqdmullb.i16 q0,q1,q2'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vqdmullb.s64 q0,q1,q2'\n+[^:]*:18: Error: bad type in SIMD instruction -- `vqdmullt.s8 q0,q1,r2'\n+[^:]*:19: Error: bad type in SIMD instruction -- `vqdmullt.u8 q0,q1,r2'\n+[^:]*:20: Error: bad type in SIMD instruction -- `vqdmullt.i16 q0,q1,r2'\n+[^:]*:21: Error: bad type in SIMD instruction -- `vqdmullt.s64 q0,q1,r2'\n+[^:]*:22: Error: bad type in SIMD instruction -- `vqdmullb.s8 q0,q1,r2'\n+[^:]*:23: Error: bad type in SIMD instruction -- `vqdmullb.u8 q0,q1,r2'\n+[^:]*:24: Error: bad type in SIMD instruction -- `vqdmullb.i16 q0,q1,r2'\n+[^:]*:25: Error: bad type in SIMD instruction -- `vqdmullb.s64 q0,q1,r2'\n+[^:]*:26: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:27: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:28: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:29: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:30: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:31: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:32: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:33: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:34: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:35: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:36: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:36: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:36: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:36: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:36: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:36: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:37: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:37: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:37: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:37: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:37: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:37: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:38: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:38: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:38: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:38: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:38: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:38: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:39: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:39: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:39: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:39: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:39: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:39: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:41: Error: syntax error -- `vqdmullteq.s32 q0,q1,q2'\n+[^:]*:42: Error: syntax error -- `vqdmullteq.s32 q0,q1,q2'\n+[^:]*:44: Error: syntax error -- `vqdmullteq.s32 q0,q1,q2'\n+[^:]*:45: Error: vector predicated instruction should be in VPT/VPST block -- `vqdmulltt.s32 q0,q1,q2'\n+[^:]*:47: Error: instruction missing MVE vector predication code -- `vqdmullt.s32 q0,q1,q2'\n+[^:]*:49: Error: syntax error -- `vqdmullbeq.s32 q0,q1,q2'\n+[^:]*:50: Error: syntax error -- `vqdmullbeq.s32 q0,q1,q2'\n+[^:]*:52: Error: syntax error -- `vqdmullbeq.s32 q0,q1,q2'\n+[^:]*:53: Error: vector predicated instruction should be in VPT/VPST block -- `vqdmullbt.s32 q0,q1,q2'\n+[^:]*:55: Error: instruction missing MVE vector predication code -- `vqdmullb.s32 q0,q1,q2'"
    },
    {
      "sha": "fac7d5f157c6b1caf70acada5db48127bd8eec26",
      "filename": "gas/testsuite/gas/arm/mve-vqdmull-bad.s",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35d1cfc2000388028c8f032e714b576615e8db02/gas/testsuite/gas/arm/mve-vqdmull-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35d1cfc2000388028c8f032e714b576615e8db02/gas/testsuite/gas/arm/mve-vqdmull-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqdmull-bad.s?ref=35d1cfc2000388028c8f032e714b576615e8db02",
      "patch": "@@ -0,0 +1,55 @@\n+.macro cond op, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 q0, q1, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vqdmullt.s8 q0, q1, q2\n+vqdmullt.u8 q0, q1, q2\n+vqdmullt.i16 q0, q1, q2\n+vqdmullt.s64 q0, q1, q2\n+vqdmullb.s8 q0, q1, q2\n+vqdmullb.u8 q0, q1, q2\n+vqdmullb.i16 q0, q1, q2\n+vqdmullb.s64 q0, q1, q2\n+vqdmullt.s8 q0, q1, r2\n+vqdmullt.u8 q0, q1, r2\n+vqdmullt.i16 q0, q1, r2\n+vqdmullt.s64 q0, q1, r2\n+vqdmullb.s8 q0, q1, r2\n+vqdmullb.u8 q0, q1, r2\n+vqdmullb.i16 q0, q1, r2\n+vqdmullb.s64 q0, q1, r2\n+vqdmullt.s32 q0, q0, q2\n+vqdmullt.s32 q0, q1, q0\n+vqdmullb.s32 q0, q0, q2\n+vqdmullb.s32 q0, q1, q0\n+vqdmullt.s32 q0, q0, r2\n+vqdmullb.s32 q0, q0, r2\n+vqdmullt.s16 q0, q0, sp\n+vqdmullt.s16 q0, q0, pc\n+vqdmullb.s16 q0, q0, sp\n+vqdmullb.s16 q0, q0, pc\n+cond vqdmullt, q2\n+cond vqdmullb, q2\n+cond vqdmullt, r2\n+cond vqdmullb, r2\n+it eq\n+vqdmullteq.s32 q0, q1, q2\n+vqdmullteq.s32 q0, q1, q2\n+vpst\n+vqdmullteq.s32 q0, q1, q2\n+vqdmulltt.s32 q0, q1, q2\n+vpst\n+vqdmullt.s32 q0, q1, q2\n+it eq\n+vqdmullbeq.s32 q0, q1, q2\n+vqdmullbeq.s32 q0, q1, q2\n+vpst\n+vqdmullbeq.s32 q0, q1, q2\n+vqdmullbt.s32 q0, q1, q2\n+vpst\n+vqdmullb.s32 q0, q1, q2"
    }
  ]
}