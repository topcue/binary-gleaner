{
  "sha": "6999f067c1b30c1a2c3e41a0f68f74e459652560",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njk5OWYwNjdjMWIzMGMxYTJjM2U0MWEwZjY4Zjc0ZTQ1OTY1MjU2MA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:41Z"
    },
    "message": "Introduce c_value_print_array\n\nThis adds c_value_print_array, a value-based analogue of\nc_val_print_array.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* c-valprint.c (c_value_print_array): New function.\n\t(c_value_print_inner): Use it.",
    "tree": {
      "sha": "301b163a610d30f5553e99f9c820d25a7f30fe98",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/301b163a610d30f5553e99f9c820d25a7f30fe98"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6999f067c1b30c1a2c3e41a0f68f74e459652560",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6999f067c1b30c1a2c3e41a0f68f74e459652560",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6999f067c1b30c1a2c3e41a0f68f74e459652560",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6999f067c1b30c1a2c3e41a0f68f74e459652560/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce80b8bd374e14c1cebe149724274b1894f5f8cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce80b8bd374e14c1cebe149724274b1894f5f8cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce80b8bd374e14c1cebe149724274b1894f5f8cf"
    }
  ],
  "stats": {
    "total": 104,
    "additions": 102,
    "deletions": 2
  },
  "files": [
    {
      "sha": "85894e72a1e8d70969b8654766acdcd6775bbc9e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6999f067c1b30c1a2c3e41a0f68f74e459652560/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6999f067c1b30c1a2c3e41a0f68f74e459652560/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6999f067c1b30c1a2c3e41a0f68f74e459652560",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-valprint.c (c_value_print_array): New function.\n+\t(c_value_print_inner): Use it.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* c-valprint.c (c_value_print_memberptr): New function."
    },
    {
      "sha": "dd4ab728c21ec78aeb2ce85d9562ef7ab8a1bae2",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 97,
      "deletions": 2,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6999f067c1b30c1a2c3e41a0f68f74e459652560/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6999f067c1b30c1a2c3e41a0f68f74e459652560/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=6999f067c1b30c1a2c3e41a0f68f74e459652560",
      "patch": "@@ -335,6 +335,102 @@ c_val_print_array (struct type *type, const gdb_byte *valaddr,\n     }\n }\n \n+/* c_value_print helper for TYPE_CODE_ARRAY.  */\n+\n+static void\n+c_value_print_array (struct value *val,\n+\t\t     struct ui_file *stream, int recurse,\n+\t\t     const struct value_print_options *options)\n+{\n+  struct type *type = check_typedef (value_type (val));\n+  CORE_ADDR address = value_address (val);\n+  const gdb_byte *valaddr = value_contents_for_printing (val);\n+  struct type *unresolved_elttype = TYPE_TARGET_TYPE (type);\n+  struct type *elttype = check_typedef (unresolved_elttype);\n+\n+  if (TYPE_LENGTH (type) > 0 && TYPE_LENGTH (unresolved_elttype) > 0)\n+    {\n+      LONGEST low_bound, high_bound;\n+      int eltlen, len;\n+      enum bfd_endian byte_order = type_byte_order (type);\n+\n+      if (!get_array_bounds (type, &low_bound, &high_bound))\n+\terror (_(\"Could not determine the array high bound\"));\n+\n+      eltlen = TYPE_LENGTH (elttype);\n+      len = high_bound - low_bound + 1;\n+      if (options->prettyformat_arrays)\n+\t{\n+\t  print_spaces_filtered (2 + 2 * recurse, stream);\n+\t}\n+\n+      /* Print arrays of textual chars with a string syntax, as\n+\t long as the entire array is valid.  */\n+      if (c_textual_element_type (unresolved_elttype,\n+\t\t\t\t  options->format)\n+\t  && value_bytes_available (val, 0, TYPE_LENGTH (type))\n+\t  && !value_bits_any_optimized_out (val, 0,\n+\t\t\t\t\t    TARGET_CHAR_BIT * TYPE_LENGTH (type)))\n+\t{\n+\t  int force_ellipses = 0;\n+\n+\t  /* If requested, look for the first null char and only\n+\t     print elements up to it.  */\n+\t  if (options->stop_print_at_null)\n+\t    {\n+\t      unsigned int temp_len;\n+\n+\t      for (temp_len = 0;\n+\t\t   (temp_len < len\n+\t\t    && temp_len < options->print_max\n+\t\t    && extract_unsigned_integer (valaddr + temp_len * eltlen,\n+\t\t\t\t\t\t eltlen, byte_order) != 0);\n+\t\t   ++temp_len)\n+\t\t;\n+\n+\t      /* Force LA_PRINT_STRING to print ellipses if\n+\t\t we've printed the maximum characters and\n+\t\t the next character is not \\000.  */\n+\t      if (temp_len == options->print_max && temp_len < len)\n+\t\t{\n+\t\t  ULONGEST ival\n+\t\t    = extract_unsigned_integer (valaddr + temp_len * eltlen,\n+\t\t\t\t\t\teltlen, byte_order);\n+\t\t  if (ival != 0)\n+\t\t    force_ellipses = 1;\n+\t\t}\n+\n+\t      len = temp_len;\n+\t    }\n+\n+\t  LA_PRINT_STRING (stream, unresolved_elttype, valaddr, len,\n+\t\t\t   NULL, force_ellipses, options);\n+\t}\n+      else\n+\t{\n+\t  unsigned int i = 0;\n+\t  fprintf_filtered (stream, \"{\");\n+\t  /* If this is a virtual function table, print the 0th\n+\t     entry specially, and the rest of the members\n+\t     normally.  */\n+\t  if (cp_is_vtbl_ptr_type (elttype))\n+\t    {\n+\t      i = 1;\n+\t      fprintf_filtered (stream, _(\"%d vtable entries\"),\n+\t\t\t\tlen - 1);\n+\t    }\n+\t  value_print_array_elements (val, stream, recurse, options, i);\n+\t  fprintf_filtered (stream, \"}\");\n+\t}\n+    }\n+  else\n+    {\n+      /* Array of unspecified length: treat like pointer to first elt.  */\n+      print_unpacked_pointer (type, elttype, unresolved_elttype, valaddr,\n+\t\t\t      0, address, stream, recurse, options);\n+    }\n+}\n+\n /* c_val_print helper for TYPE_CODE_PTR.  */\n \n static void\n@@ -657,8 +753,7 @@ c_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n   switch (TYPE_CODE (type))\n     {\n     case TYPE_CODE_ARRAY:\n-      c_val_print_array (type, valaddr, 0, address, stream,\n-\t\t\t recurse, val, options);\n+      c_value_print_array (val, stream, recurse, options);\n       break;\n \n     case TYPE_CODE_METHODPTR:"
    }
  ]
}