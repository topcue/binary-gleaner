{
  "sha": "13bff72615e5a93a6e5f28e83a594125e66ccced",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTNiZmY3MjYxNWU1YTkzYTZlNWYyOGU4M2E1OTQxMjVlNjZjY2NlZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-03T17:38:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-12-12T22:50:54Z"
    },
    "message": "Introduce basic_safe_range\n\nThis introduces the basic_safe_range class, which can be used to\ncreate a basic_safe_iterator.  This also changes basic_safe_iterator\nin two ways.\n\nFirst, it simplifies the constructor.  This seemed unnecessarily\ncomplicated to me, and keeping it this way would prevent the second\nchange...\n\n... which is to add a second constructor for initializing the\none-past-the-end iterator that is stored in basic_safe_iterator.\n\ngdb/ChangeLog\n2019-12-12  Tom Tromey  <tom@tromey.com>\n\n\t* gdbsupport/safe-iterator.h (basic_safe_iterator): Simplify.  Add\n\tsecond constructor.\n\t(basic_safe_range): New class.\n\nChange-Id: Ib351ef6fd435129a5053c64e5561877e1459ab37",
    "tree": {
      "sha": "c909c2989bc3329a5349e165b741f4804ae72942",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c909c2989bc3329a5349e165b741f4804ae72942"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13bff72615e5a93a6e5f28e83a594125e66ccced",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13bff72615e5a93a6e5f28e83a594125e66ccced",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13bff72615e5a93a6e5f28e83a594125e66ccced",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13bff72615e5a93a6e5f28e83a594125e66ccced/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "deeafabb678e59d8585be6d765c7fbd0e7060b6c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/deeafabb678e59d8585be6d765c7fbd0e7060b6c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/deeafabb678e59d8585be6d765c7fbd0e7060b6c"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 53,
    "deletions": 5
  },
  "files": [
    {
      "sha": "368d7f0231331f451978093e4a15bd60ebbdb78c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13bff72615e5a93a6e5f28e83a594125e66ccced/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13bff72615e5a93a6e5f28e83a594125e66ccced/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=13bff72615e5a93a6e5f28e83a594125e66ccced",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbsupport/safe-iterator.h (basic_safe_iterator): Simplify.  Add\n+\tsecond constructor.\n+\t(basic_safe_range): New class.\n+\n 2019-12-12  Tom Tromey  <tom@tromey.com>\n \n \t* progspace.c (program_space::multi_objfile_p): New method."
    },
    {
      "sha": "1a98b426ab28db2b90d24f582a270cbaa95b91a6",
      "filename": "gdb/gdbsupport/safe-iterator.h",
      "status": "modified",
      "additions": 47,
      "deletions": 5,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13bff72615e5a93a6e5f28e83a594125e66ccced/gdb/gdbsupport/safe-iterator.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13bff72615e5a93a6e5f28e83a594125e66ccced/gdb/gdbsupport/safe-iterator.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/safe-iterator.h?ref=13bff72615e5a93a6e5f28e83a594125e66ccced",
      "patch": "@@ -48,17 +48,29 @@ class basic_safe_iterator\n   typedef typename Iterator::iterator_category iterator_category;\n   typedef typename Iterator::difference_type difference_type;\n \n-  /* Construct by forwarding all arguments to the underlying\n-     iterator.  */\n-  template<typename... Args>\n-  explicit basic_safe_iterator (Args &&...args)\n-    : m_it (std::forward<Args> (args)...),\n+  /* Construct using the given argument; the end iterator is default\n+     constructed.  */\n+  template<typename Arg>\n+  explicit basic_safe_iterator (Arg &&arg)\n+    : m_it (std::forward<Arg> (arg)),\n       m_next (m_it)\n   {\n     if (m_it != m_end)\n       ++m_next;\n   }\n \n+  /* Construct the iterator using the first argument, and construct\n+     the end iterator using the second argument.  */\n+  template<typename Arg>\n+  explicit basic_safe_iterator (Arg &&arg, Arg &&arg2)\n+    : m_it (std::forward<Arg> (arg)),\n+      m_next (m_it),\n+      m_end (std::forward<Arg> (arg2))\n+  {\n+    if (m_it != m_end)\n+      ++m_next;\n+  }\n+\n   /* Create a one-past-end iterator.  */\n   basic_safe_iterator ()\n   {}\n@@ -90,4 +102,34 @@ class basic_safe_iterator\n   Iterator m_end {};\n };\n \n+/* A range adapter that wraps another range, and then returns safe\n+   iterators wrapping the original range's iterators.  */\n+\n+template<typename Range>\n+class basic_safe_range\n+{\n+public:\n+\n+  typedef basic_safe_iterator<typename Range::iterator> iterator;\n+\n+  explicit basic_safe_range (Range range)\n+    : m_range (range)\n+  {\n+  }\n+\n+  iterator begin () const\n+  {\n+    return iterator (m_range.begin (), m_range.end ());\n+  }\n+\n+  iterator end () const\n+  {\n+    return iterator (m_range.end (), m_range.end ());\n+  }\n+\n+private:\n+\n+  Range m_range;\n+};\n+\n #endif /* COMMON_SAFE_ITERATOR_H */"
    }
  ]
}