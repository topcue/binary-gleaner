{
  "sha": "7e9c0476a7085cbebdc818d163d5c3bd46da6388",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2U5YzA0NzZhNzA4NWNiZWJkYzgxOGQxNjNkNWMzYmQ0NmRhNjM4OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:42Z"
    },
    "message": "Change how some psymbol readers access the psymtab storage\n\nCurrently, all psymbol readers access the psymtab storage via the\nobjfile.  This is done directly at any spot requiring the storage.\n\nIn order to move psymbols out of the objfile, the psymtab_storage must\nbe passed in explicitly.  This patch consolidates the access of the\nstorage in a single place in these readers, updating various functions\nto pass the storage object around.  \"Hidden\" uses, like\n\"objfile->psymtabs ()\", are also updated.\n\nThe DWARF reader is not yet touched.  That requires more complicated\nchanges.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_end_psymtab): Add partial_symtabs parameter.\n\t(xcoff_end_psymtab): Update.\n\t(scan_xcoff_symtab): Add partial_symtabs parameter.\n\t(xcoff_initial_scan): Update.\n\t* stabsread.h (dbx_end_psymtab): Add partial_symtabs parameter.\n\t* mdebugread.c (mdebug_build_psymtabs): Update.\n\t(parse_partial_symbols): Add partial_symtabs parameter.\n\t* dbxread.c (dbx_symfile_read): Update.\n\t(read_dbx_symtab): Add partial_symtabs parameter.\n\t(read_dbx_symtab): Update.\n\t(dbx_end_psymtab): Add partial_symtabs parameter.",
    "tree": {
      "sha": "91e6634d8595b50acb4d97fdd0dfd05d7754aa2f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/91e6634d8595b50acb4d97fdd0dfd05d7754aa2f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7e9c0476a7085cbebdc818d163d5c3bd46da6388",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e9c0476a7085cbebdc818d163d5c3bd46da6388",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7e9c0476a7085cbebdc818d163d5c3bd46da6388",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e9c0476a7085cbebdc818d163d5c3bd46da6388/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75336a5a2aa345953d0a9de73205457b6d9e27c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75336a5a2aa345953d0a9de73205457b6d9e27c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75336a5a2aa345953d0a9de73205457b6d9e27c2"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 59,
    "deletions": 27
  },
  "files": [
    {
      "sha": "491ddd5e2b20314181333d35371eedf51f6d0288",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7e9c0476a7085cbebdc818d163d5c3bd46da6388",
      "patch": "@@ -1,3 +1,17 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_end_psymtab): Add partial_symtabs parameter.\n+\t(xcoff_end_psymtab): Update.\n+\t(scan_xcoff_symtab): Add partial_symtabs parameter.\n+\t(xcoff_initial_scan): Update.\n+\t* stabsread.h (dbx_end_psymtab): Add partial_symtabs parameter.\n+\t* mdebugread.c (mdebug_build_psymtabs): Update.\n+\t(parse_partial_symbols): Add partial_symtabs parameter.\n+\t* dbxread.c (dbx_symfile_read): Update.\n+\t(read_dbx_symtab): Add partial_symtabs parameter.\n+\t(read_dbx_symtab): Update.\n+\t(dbx_end_psymtab): Add partial_symtabs parameter.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* quick-symbol.h (struct quick_symbol_functions)"
    },
    {
      "sha": "9a470bf81778d98bb15269f183efc7f323e6001f",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=7e9c0476a7085cbebdc818d163d5c3bd46da6388",
      "patch": "@@ -270,7 +270,8 @@ static void dbx_read_symtab (legacy_psymtab *self,\n \n static void dbx_expand_psymtab (legacy_psymtab *, struct objfile *);\n \n-static void read_dbx_symtab (minimal_symbol_reader &, struct objfile *);\n+static void read_dbx_symtab (minimal_symbol_reader &, psymtab_storage *,\n+\t\t\t     struct objfile *);\n \n static legacy_psymtab *find_corresponding_bincl_psymtab (const char *,\n \t\t\t\t\t\t\t\tint);\n@@ -544,7 +545,8 @@ dbx_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \n   /* Read stabs data from executable file and define symbols.  */\n \n-  read_dbx_symtab (reader, objfile);\n+  psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+  read_dbx_symtab (reader, partial_symtabs, objfile);\n \n   /* Install any minimal symbols that have been collected as the current\n      minimal symbols for this objfile.  */\n@@ -946,7 +948,9 @@ function_outside_compilation_unit_complaint (const char *arg1)\n    debugging information is available.  */\n \n static void\n-read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n+read_dbx_symtab (minimal_symbol_reader &reader,\n+\t\t psymtab_storage *partial_symtabs,\n+\t\t struct objfile *objfile)\n {\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct external_nlist *bufp = 0;\t/* =0 avoids gcc -Wall glitch.  */\n@@ -1127,7 +1131,8 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t     which are not the address.  */\n \t\t  && nlist.n_value >= pst->raw_text_low ())\n \t\t{\n-\t\t  dbx_end_psymtab (objfile, pst, psymtab_include_list,\n+\t\t  dbx_end_psymtab (objfile, partial_symtabs,\n+\t\t\t\t   pst, psymtab_include_list,\n \t\t\t\t   includes_used, symnum * symbol_size,\n \t\t\t\t   nlist.n_value > pst->raw_text_high ()\n \t\t\t\t   ? nlist.n_value : pst->raw_text_high (),\n@@ -1242,7 +1247,8 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \n \t\tif (pst)\n \t\t  {\n-\t\t    dbx_end_psymtab (objfile, pst, psymtab_include_list,\n+\t\t    dbx_end_psymtab (objfile, partial_symtabs,\n+\t\t\t\t     pst, psymtab_include_list,\n \t\t\t\t     includes_used, symnum * symbol_size,\n \t\t\t\t     (valu > pst->raw_text_high ()\n \t\t\t\t      ? valu : pst->raw_text_high ()),\n@@ -1813,7 +1819,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t     compiled without debugging info follows this module.  */\n \t  if (pst && gdbarch_sofun_address_maybe_missing (gdbarch))\n \t    {\n-\t      dbx_end_psymtab (objfile, pst,\n+\t      dbx_end_psymtab (objfile, partial_symtabs, pst,\n \t\t\t       psymtab_include_list, includes_used,\n \t\t\t       symnum * symbol_size,\n \t\t\t       (CORE_ADDR) 0, dependency_list,\n@@ -1879,7 +1885,8 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t : lowest_text_address)\n \t+ text_size;\n \n-      dbx_end_psymtab (objfile, pst, psymtab_include_list, includes_used,\n+      dbx_end_psymtab (objfile, partial_symtabs,\n+\t\t       pst, psymtab_include_list, includes_used,\n \t\t       symnum * symbol_size,\n \t\t       (text_end > pst->raw_text_high ()\n \t\t\t? text_end : pst->raw_text_high ()),\n@@ -1923,7 +1930,8 @@ start_psymtab (struct objfile *objfile, const char *filename, CORE_ADDR textlow,\n    FIXME:  List variables and peculiarities of same.  */\n \n legacy_psymtab *\n-dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n+dbx_end_psymtab (struct objfile *objfile, psymtab_storage *partial_symtabs,\n+\t\t legacy_psymtab *pst,\n \t\t const char **include_list, int num_includes,\n \t\t int capping_symbol_offset, CORE_ADDR capping_text,\n \t\t legacy_psymtab **dependency_list,\n@@ -1997,7 +2005,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n \t address, set it to our starting address.  Take care to not set our\n \t own ending address to our starting address.  */\n \n-      for (partial_symtab *p1 : objfile->psymtabs ())\n+      for (partial_symtab *p1 : partial_symtabs->range ())\n \tif (!p1->text_high_valid && p1->text_low_valid && p1 != pst)\n \t  p1->set_text_high (pst->raw_text_low ());\n     }\n@@ -2010,7 +2018,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n   if (number_dependencies)\n     {\n       pst->dependencies\n-\t= objfile->partial_symtabs->allocate_dependencies (number_dependencies);\n+\t= partial_symtabs->allocate_dependencies (number_dependencies);\n       memcpy (pst->dependencies, dependency_list,\n \t      number_dependencies * sizeof (legacy_psymtab *));\n     }\n@@ -2030,7 +2038,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n       /* We could save slight bits of space by only making one of these,\n \t shared by the entire set of include files.  FIXME-someday.  */\n       subpst->dependencies =\n-\tobjfile->partial_symtabs->allocate_dependencies (1);\n+\tpartial_symtabs->allocate_dependencies (1);\n       subpst->dependencies[0] = pst;\n       subpst->number_of_dependencies = 1;\n \n@@ -2050,7 +2058,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n \t is not empty, but we don't realize that.  Fixing that without slowing\n \t things down might be tricky.  */\n \n-      objfile->partial_symtabs->discard_psymtab (pst);\n+      partial_symtabs->discard_psymtab (pst);\n \n       /* Indicate that psymtab was thrown away.  */\n       pst = NULL;"
    },
    {
      "sha": "d178beef7341566acfc2b8917ffc57ab9e1fed6d",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=7e9c0476a7085cbebdc818d163d5c3bd46da6388",
      "patch": "@@ -222,6 +222,7 @@ static int upgrade_type (int, struct type **, int, union aux_ext *,\n \t\t\t int, const char *);\n \n static void parse_partial_symbols (minimal_symbol_reader &,\n+\t\t\t\t   psymtab_storage *,\n \t\t\t\t   struct objfile *);\n \n static int has_opaque_xref (FDR *, SYMR *);\n@@ -357,7 +358,8 @@ mdebug_build_psymtabs (minimal_symbol_reader &reader,\n \t(*swap->swap_fdr_in) (objfile->obfd, fdr_src, fdr_ptr);\n     }\n \n-  parse_partial_symbols (reader, objfile);\n+  psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+  parse_partial_symbols (reader, partial_symtabs, objfile);\n \n #if 0\n   /* Check to make sure file was compiled with -g.  If not, warn the\n@@ -2281,6 +2283,7 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n \n static void\n parse_partial_symbols (minimal_symbol_reader &reader,\n+\t\t       psymtab_storage *partial_symtabs,\n \t\t       struct objfile *objfile)\n {\n   struct gdbarch *gdbarch = objfile->arch ();\n@@ -3642,7 +3645,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n       /* Link pst to FDR.  dbx_end_psymtab returns NULL if the psymtab was\n \t empty and put on the free list.  */\n       fdr_to_pst[f_idx].pst\n-\t= dbx_end_psymtab (objfile, save_pst,\n+\t= dbx_end_psymtab (objfile, partial_symtabs, save_pst,\n \t\t\t   psymtab_include_list, includes_used,\n \t\t\t   -1, save_pst->raw_text_high (),\n \t\t\t   dependency_list, dependencies_used,\n@@ -3666,7 +3669,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t  && save_pst->text_low_valid\n \t  && !(objfile->flags & OBJF_REORDERED))\n \t{\n-\t  for (partial_symtab *iter : objfile->psymtabs ())\n+\t  for (partial_symtab *iter : partial_symtabs->range ())\n \t    {\n \t      if (save_pst != iter\n \t\t  && save_pst->raw_text_low () >= iter->raw_text_low ()\n@@ -3697,7 +3700,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t source files or a reverse .h -> .c dependency for header files.  */\n       pst->number_of_dependencies = 0;\n       pst->dependencies\n-\t= objfile->partial_symtabs->allocate_dependencies (fh->crfd - 1);\n+\t= partial_symtabs->allocate_dependencies (fh->crfd - 1);\n       for (s_idx = 1; s_idx < fh->crfd; s_idx++)\n \t{\n \t  RFDT rh;\n@@ -3726,11 +3729,11 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \n   /* Remove the dummy psymtab created for -O3 images above, if it is\n      still empty, to enable the detection of stripped executables.  */\n-  partial_symtab *pst_del = objfile->partial_symtabs->psymtabs;\n+  partial_symtab *pst_del = partial_symtabs->psymtabs;\n   if (pst_del->next == NULL\n       && pst_del->number_of_dependencies == 0\n       && pst_del->empty ())\n-    objfile->partial_symtabs->discard_psymtab (pst_del);\n+    partial_symtabs->discard_psymtab (pst_del);\n }\n \n /* If the current psymbol has an enumerated type, we need to add"
    },
    {
      "sha": "e9d5663cc970e855a035658a99f056ea46c557ea",
      "filename": "gdb/stabsread.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/stabsread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/stabsread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.h?ref=7e9c0476a7085cbebdc818d163d5c3bd46da6388",
      "patch": "@@ -172,7 +172,8 @@ extern void finish_global_stabs (struct objfile *objfile);\n    they are only used by some stabs readers.  */\n \n extern legacy_psymtab *dbx_end_psymtab\n-  (struct objfile *objfile, legacy_psymtab *pst,\n+  (struct objfile *objfile, psymtab_storage *partial_symtabs,\n+   legacy_psymtab *pst,\n    const char **include_list, int num_includes,\n    int capping_symbol_offset, CORE_ADDR capping_text,\n    legacy_psymtab **dependency_list, int number_dependencies,"
    },
    {
      "sha": "711d8932706dd0693f2cef06d62e430b2dabb4c5",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e9c0476a7085cbebdc818d163d5c3bd46da6388/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=7e9c0476a7085cbebdc818d163d5c3bd46da6388",
      "patch": "@@ -203,6 +203,7 @@ eb_complaint (int arg1)\n static void xcoff_initial_scan (struct objfile *, symfile_add_flags);\n \n static void scan_xcoff_symtab (minimal_symbol_reader &,\n+\t\t\t       psymtab_storage *partial_symtabs,\n \t\t\t       struct objfile *);\n \n static const char *xcoff_next_symbol_text (struct objfile *);\n@@ -1986,7 +1987,8 @@ xcoff_start_psymtab (struct objfile *objfile,\n    are the information for includes and dependencies.  */\n \n static legacy_psymtab *\n-xcoff_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n+xcoff_end_psymtab (struct objfile *objfile, psymtab_storage *partial_symtabs,\n+\t\t   legacy_psymtab *pst,\n \t\t   const char **include_list, int num_includes,\n \t\t   int capping_symbol_number,\n \t\t   legacy_psymtab **dependency_list,\n@@ -2008,7 +2010,7 @@ xcoff_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n   if (number_dependencies)\n     {\n       pst->dependencies\n-\t= objfile->partial_symtabs->allocate_dependencies (number_dependencies);\n+\t= partial_symtabs->allocate_dependencies (number_dependencies);\n       memcpy (pst->dependencies, dependency_list,\n \t      number_dependencies * sizeof (legacy_psymtab *));\n     }\n@@ -2027,7 +2029,7 @@ xcoff_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n       /* We could save slight bits of space by only making one of these,\n \t shared by the entire set of include files.  FIXME-someday.  */\n       subpst->dependencies =\n-\tobjfile->partial_symtabs->allocate_dependencies (1);\n+\tpartial_symtabs->allocate_dependencies (1);\n       subpst->dependencies[0] = pst;\n       subpst->number_of_dependencies = 1;\n \n@@ -2043,7 +2045,7 @@ xcoff_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n       /* Empty psymtabs happen as a result of header files which don't have\n \t any symbols in them.  There can be a lot of them.  */\n \n-      objfile->partial_symtabs->discard_psymtab (pst);\n+      partial_symtabs->discard_psymtab (pst);\n \n       /* Indicate that psymtab was thrown away.  */\n       pst = NULL;\n@@ -2112,6 +2114,7 @@ function_outside_compilation_unit_complaint (const char *arg1)\n \n static void\n scan_xcoff_symtab (minimal_symbol_reader &reader,\n+\t\t   psymtab_storage *partial_symtabs,\n \t\t   struct objfile *objfile)\n {\n   CORE_ADDR toc_offset = 0;\t/* toc offset value in data section.  */\n@@ -2233,7 +2236,7 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t       each program csect, because their text\n \t\t\t       sections need not be adjacent.  */\n \t\t\t    xcoff_end_psymtab\n-\t\t\t      (objfile, pst, psymtab_include_list,\n+\t\t\t      (objfile, partial_symtabs, pst, psymtab_include_list,\n \t\t\t       includes_used, symnum_before, dependency_list,\n \t\t\t       dependencies_used, textlow_not_set);\n \t\t\t    includes_used = 0;\n@@ -2402,7 +2405,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \n \t    if (pst)\n \t      {\n-\t\txcoff_end_psymtab (objfile, pst, psymtab_include_list,\n+\t\txcoff_end_psymtab (objfile, partial_symtabs,\n+\t\t\t\t   pst, psymtab_include_list,\n \t\t\t\t   includes_used, symnum_before,\n \t\t\t\t   dependency_list, dependencies_used,\n \t\t\t\t   textlow_not_set);\n@@ -2819,7 +2823,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \n   if (pst)\n     {\n-      xcoff_end_psymtab (objfile, pst, psymtab_include_list, includes_used,\n+      xcoff_end_psymtab (objfile, partial_symtabs,\n+\t\t\t pst, psymtab_include_list, includes_used,\n \t\t\t ssymnum, dependency_list,\n \t\t\t dependencies_used, textlow_not_set);\n     }\n@@ -2930,7 +2935,8 @@ xcoff_initial_scan (struct objfile *objfile, symfile_add_flags symfile_flags)\n   /* Now that the symbol table data of the executable file are all in core,\n      process them and define symbols accordingly.  */\n \n-  scan_xcoff_symtab (reader, objfile);\n+  psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+  scan_xcoff_symtab (reader, partial_symtabs, objfile);\n \n   /* Install any minimal symbols that have been collected as the current\n      minimal symbols for this objfile.  */"
    }
  ]
}