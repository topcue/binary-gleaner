{
  "sha": "3637a558a50141676f9997979491296dc007168d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzYzN2E1NThhNTAxNDE2NzZmOTk5Nzk3OTQ5MTI5NmRjMDA3MTY4ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-01-23T19:20:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-01-24T03:33:25Z"
    },
    "message": "Use std::vector for \"registers_used\" in compile feature\n\nThis changes the GDB compile code to use std::vector<bool> when\ncomputing which registers are used.  This is a bit more idiomatic, but\nthe main benefit is that it also adds some checking when the libstd++\ndebug mode is enabled.\n\n2021-01-23  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.h (struct symbol_computed_ops) <generate_c_location>:\n\tChange type of \"registers_used\".\n\t* dwarf2/loc.h (dwarf2_compile_property_to_c): Update.\n\t* dwarf2/loc.c (dwarf2_compile_property_to_c)\n\t(locexpr_generate_c_location, loclist_generate_c_location): Change\n\ttype of \"registers_used\".\n\t* compile/compile.h (compile_dwarf_expr_to_c)\n\t(compile_dwarf_bounds_to_c): Update.\n\t* compile/compile-loc2c.c (pushf_register_address)\n\t(pushf_register, do_compile_dwarf_expr_to_c)\n\t(compile_dwarf_expr_to_c, compile_dwarf_bounds_to_c): Change type\n\tof \"registers_used\".\n\t* compile/compile-c.h (generate_c_for_variable_locations):\n\tUpdate.\n\t* compile/compile-c-symbols.c (generate_vla_size)\n\t(generate_c_for_for_one_variable): Change type of\n\t\"registers_used\".\n\t(generate_c_for_variable_locations): Return std::vector.\n\t* compile/compile-c-support.c (generate_register_struct): Change\n\ttype of \"registers_used\".\n\t(compute): Update.",
    "tree": {
      "sha": "6a15b32e0bbf8f7d81f6557cbc0ce0e343bddbd2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a15b32e0bbf8f7d81f6557cbc0ce0e343bddbd2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3637a558a50141676f9997979491296dc007168d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3637a558a50141676f9997979491296dc007168d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3637a558a50141676f9997979491296dc007168d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3637a558a50141676f9997979491296dc007168d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "18454c151f5824564130ba626bd90e9de30444ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18454c151f5824564130ba626bd90e9de30444ef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/18454c151f5824564130ba626bd90e9de30444ef"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 51,
    "deletions": 26
  },
  "files": [
    {
      "sha": "8fa20fae30fa926a8726023c9f900771f817680d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -1,3 +1,27 @@\n+2021-01-23  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.h (struct symbol_computed_ops) <generate_c_location>:\n+\tChange type of \"registers_used\".\n+\t* dwarf2/loc.h (dwarf2_compile_property_to_c): Update.\n+\t* dwarf2/loc.c (dwarf2_compile_property_to_c)\n+\t(locexpr_generate_c_location, loclist_generate_c_location): Change\n+\ttype of \"registers_used\".\n+\t* compile/compile.h (compile_dwarf_expr_to_c)\n+\t(compile_dwarf_bounds_to_c): Update.\n+\t* compile/compile-loc2c.c (pushf_register_address)\n+\t(pushf_register, do_compile_dwarf_expr_to_c)\n+\t(compile_dwarf_expr_to_c, compile_dwarf_bounds_to_c): Change type\n+\tof \"registers_used\".\n+\t* compile/compile-c.h (generate_c_for_variable_locations):\n+\tUpdate.\n+\t* compile/compile-c-symbols.c (generate_vla_size)\n+\t(generate_c_for_for_one_variable): Change type of\n+\t\"registers_used\".\n+\t(generate_c_for_variable_locations): Return std::vector.\n+\t* compile/compile-c-support.c (generate_register_struct): Change\n+\ttype of \"registers_used\".\n+\t(compute): Update.\n+\n 2021-01-23  Tom Tromey  <tom@tromey.com>\n \n \t* compile/compile-internal.h (class compile_instance)"
    },
    {
      "sha": "5f49a0a74f0428bffb745433fd28c9c1aace0275",
      "filename": "gdb/compile/compile-c-support.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-c-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-c-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-support.c?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -213,15 +213,15 @@ write_macro_definitions (const struct block *block, CORE_ADDR pc,\n \n static void\n generate_register_struct (struct ui_file *stream, struct gdbarch *gdbarch,\n-\t\t\t  const unsigned char *registers_used)\n+\t\t\t  const std::vector<bool> &registers_used)\n {\n   int i;\n   int seen = 0;\n \n   fputs_unfiltered (\"struct \" COMPILE_I_SIMPLE_REGISTER_STRUCT_TAG \" {\\n\",\n \t\t    stream);\n \n-  if (registers_used != NULL)\n+  if (!registers_used.empty ())\n     for (i = 0; i < gdbarch_num_regs (gdbarch); ++i)\n       {\n \tif (registers_used[i])\n@@ -572,7 +572,7 @@ class compile_program\n \t   before generating the function header, so we can define the\n \t   register struct before the function body.  This requires a\n \t   temporary stream.  */\n-\tgdb::unique_xmalloc_ptr<unsigned char> registers_used\n+\tstd::vector<bool> registers_used\n \t  = generate_c_for_variable_locations (m_instance, &var_stream, m_arch,\n \t\t\t\t\t       expr_block, expr_pc);\n \n@@ -595,7 +595,7 @@ class compile_program\n \t\t\tmode, mode);\n \t  }\n \n-\tgenerate_register_struct (&buf, m_arch, registers_used.get ());\n+\tgenerate_register_struct (&buf, m_arch, registers_used);\n       }\n \n     AddCodeHeaderPolicy::add_code_header (m_instance->scope (), &buf);"
    },
    {
      "sha": "08ebe0f4f3be7e09a31bb0f03c7f635c5a61677a",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -487,7 +487,7 @@ static void\n generate_vla_size (compile_instance *compiler,\n \t\t   string_file *stream,\n \t\t   struct gdbarch *gdbarch,\n-\t\t   unsigned char *registers_used,\n+\t\t   std::vector<bool> &registers_used,\n \t\t   CORE_ADDR pc,\n \t\t   struct type *type,\n \t\t   struct symbol *sym)\n@@ -541,7 +541,7 @@ static void\n generate_c_for_for_one_variable (compile_instance *compiler,\n \t\t\t\t string_file *stream,\n \t\t\t\t struct gdbarch *gdbarch,\n-\t\t\t\t unsigned char *registers_used,\n+\t\t\t\t std::vector<bool> &registers_used,\n \t\t\t\t CORE_ADDR pc,\n \t\t\t\t struct symbol *sym)\n {\n@@ -606,7 +606,7 @@ generate_c_for_for_one_variable (compile_instance *compiler,\n \n /* See compile-c.h.  */\n \n-gdb::unique_xmalloc_ptr<unsigned char>\n+std::vector<bool>\n generate_c_for_variable_locations (compile_instance *compiler,\n \t\t\t\t   string_file *stream,\n \t\t\t\t   struct gdbarch *gdbarch,\n@@ -618,10 +618,9 @@ generate_c_for_variable_locations (compile_instance *compiler,\n   /* If we're already in the static or global block, there is nothing\n      to write.  */\n   if (static_block == NULL || block == static_block)\n-    return NULL;\n+    return {};\n \n-  gdb::unique_xmalloc_ptr<unsigned char> registers_used\n-    (XCNEWVEC (unsigned char, gdbarch_num_regs (gdbarch)));\n+  std::vector<bool> registers_used (gdbarch_num_regs (gdbarch));\n \n   /* Ensure that a given name is only entered once.  This reflects the\n      reality of shadowing.  */\n@@ -641,7 +640,7 @@ generate_c_for_variable_locations (compile_instance *compiler,\n \t{\n \t  if (!symbol_seen (symhash.get (), sym))\n \t    generate_c_for_for_one_variable (compiler, stream, gdbarch,\n-\t\t\t\t\t     registers_used.get (), pc, sym);\n+\t\t\t\t\t     registers_used, pc, sym);\n \t}\n \n       /* If we just finished the outermost block of a function, we're"
    },
    {
      "sha": "e8082d8a5d5d38ea7bdf332cc98d53ef1735f28c",
      "filename": "gdb/compile/compile-c.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-c.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-c.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c.h?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -66,7 +66,7 @@ class compile_c_instance : public compile_instance\n    register number, where each element indicates if the corresponding\n    register is needed to compute a local variable.  */\n \n-extern gdb::unique_xmalloc_ptr<unsigned char>\n+extern std::vector<bool>\n   generate_c_for_variable_locations\n      (compile_instance *compiler,\n       string_file *stream,"
    },
    {
      "sha": "ee9595c78edb0eb78f0174633e3648a997e6a5de",
      "filename": "gdb/compile/compile-loc2c.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-loc2c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile-loc2c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-loc2c.c?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -511,12 +511,12 @@ print_label (string_file *stream, unsigned int scope, int target)\n \n static void\n pushf_register_address (int indent, string_file *stream,\n-\t\t\tunsigned char *registers_used,\n+\t\t\tstd::vector<bool> &registers_used,\n \t\t\tstruct gdbarch *gdbarch, int regnum)\n {\n   std::string regname = compile_register_name_mangled (gdbarch, regnum);\n \n-  registers_used[regnum] = 1;\n+  registers_used[regnum] = true;\n   pushf (indent, stream,\n \t \"(\" GCC_UINTPTR \") &\" COMPILE_I_SIMPLE_REGISTER_ARG_NAME \"->%s\",\n \t regname.c_str ());\n@@ -529,12 +529,12 @@ pushf_register_address (int indent, string_file *stream,\n \n static void\n pushf_register (int indent, string_file *stream,\n-\t\tunsigned char *registers_used,\n+\t\tstd::vector<bool> &registers_used,\n \t\tstruct gdbarch *gdbarch, int regnum, uint64_t offset)\n {\n   std::string regname = compile_register_name_mangled (gdbarch, regnum);\n \n-  registers_used[regnum] = 1;\n+  registers_used[regnum] = true;\n   if (offset == 0)\n     pushf (indent, stream, COMPILE_I_SIMPLE_REGISTER_ARG_NAME \"->%s\",\n \t   regname.c_str ());\n@@ -579,7 +579,7 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t\t\t    const char *result_name,\n \t\t\t    struct symbol *sym, CORE_ADDR pc,\n \t\t\t    struct gdbarch *arch,\n-\t\t\t    unsigned char *registers_used,\n+\t\t\t    std::vector<bool> &registers_used,\n \t\t\t    unsigned int addr_size,\n \t\t\t    const gdb_byte *op_ptr, const gdb_byte *op_end,\n \t\t\t    CORE_ADDR *initial,\n@@ -1129,7 +1129,8 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n void\n compile_dwarf_expr_to_c (string_file *stream, const char *result_name,\n \t\t\t struct symbol *sym, CORE_ADDR pc,\n-\t\t\t struct gdbarch *arch, unsigned char *registers_used,\n+\t\t\t struct gdbarch *arch,\n+\t\t\t std::vector<bool> &registers_used,\n \t\t\t unsigned int addr_size,\n \t\t\t const gdb_byte *op_ptr, const gdb_byte *op_end,\n \t\t\t dwarf2_per_cu_data *per_cu,\n@@ -1147,7 +1148,8 @@ compile_dwarf_bounds_to_c (string_file *stream,\n \t\t\t   const char *result_name,\n \t\t\t   const struct dynamic_prop *prop,\n \t\t\t   struct symbol *sym, CORE_ADDR pc,\n-\t\t\t   struct gdbarch *arch, unsigned char *registers_used,\n+\t\t\t   struct gdbarch *arch,\n+\t\t\t   std::vector<bool> &registers_used,\n \t\t\t   unsigned int addr_size,\n \t\t\t   const gdb_byte *op_ptr, const gdb_byte *op_end,\n \t\t\t   dwarf2_per_cu_data *per_cu,"
    },
    {
      "sha": "5e733f3e647f3cf4d5d629b4d7f53c827ef1996f",
      "filename": "gdb/compile/compile.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/compile/compile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.h?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -64,7 +64,7 @@ extern void compile_dwarf_expr_to_c (string_file *stream,\n \t\t\t\t     struct symbol *sym,\n \t\t\t\t     CORE_ADDR pc,\n \t\t\t\t     struct gdbarch *arch,\n-\t\t\t\t     unsigned char *registers_used,\n+\t\t\t\t     std::vector<bool> &registers_used,\n \t\t\t\t     unsigned int addr_size,\n \t\t\t\t     const gdb_byte *op_ptr,\n \t\t\t\t     const gdb_byte *op_end,\n@@ -103,7 +103,7 @@ extern void compile_dwarf_bounds_to_c (string_file *stream,\n \t\t\t\t       const struct dynamic_prop *prop,\n \t\t\t\t       struct symbol *sym, CORE_ADDR pc,\n \t\t\t\t       struct gdbarch *arch,\n-\t\t\t\t       unsigned char *registers_used,\n+\t\t\t\t       std::vector<bool> &registers_used,\n \t\t\t\t       unsigned int addr_size,\n \t\t\t\t       const gdb_byte *op_ptr,\n \t\t\t\t       const gdb_byte *op_end,"
    },
    {
      "sha": "aec50da4b6da9437709f3b06849f4274d978bb02",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -2699,7 +2699,7 @@ void\n dwarf2_compile_property_to_c (string_file *stream,\n \t\t\t      const char *result_name,\n \t\t\t      struct gdbarch *gdbarch,\n-\t\t\t      unsigned char *registers_used,\n+\t\t\t      std::vector<bool> &registers_used,\n \t\t\t      const struct dynamic_prop *prop,\n \t\t\t      CORE_ADDR pc,\n \t\t\t      struct symbol *sym)\n@@ -4475,7 +4475,7 @@ locexpr_tracepoint_var_ref (struct symbol *symbol, struct agent_expr *ax,\n static void\n locexpr_generate_c_location (struct symbol *sym, string_file *stream,\n \t\t\t     struct gdbarch *gdbarch,\n-\t\t\t     unsigned char *registers_used,\n+\t\t\t     std::vector<bool> &registers_used,\n \t\t\t     CORE_ADDR pc, const char *result_name)\n {\n   struct dwarf2_locexpr_baton *dlbaton\n@@ -4707,7 +4707,7 @@ loclist_tracepoint_var_ref (struct symbol *symbol, struct agent_expr *ax,\n static void\n loclist_generate_c_location (struct symbol *sym, string_file *stream,\n \t\t\t     struct gdbarch *gdbarch,\n-\t\t\t     unsigned char *registers_used,\n+\t\t\t     std::vector<bool> &registers_used,\n \t\t\t     CORE_ADDR pc, const char *result_name)\n {\n   struct dwarf2_loclist_baton *dlbaton"
    },
    {
      "sha": "2943baf91d2213797f5f75f2a70733d0a1bab880",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -120,7 +120,7 @@ bool dwarf2_evaluate_property (const struct dynamic_prop *prop,\n void dwarf2_compile_property_to_c (string_file *stream,\n \t\t\t\t   const char *result_name,\n \t\t\t\t   struct gdbarch *gdbarch,\n-\t\t\t\t   unsigned char *registers_used,\n+\t\t\t\t   std::vector<bool> &registers_used,\n \t\t\t\t   const struct dynamic_prop *prop,\n \t\t\t\t   CORE_ADDR address,\n \t\t\t\t   struct symbol *sym);"
    },
    {
      "sha": "f060e0ebc15cb76f835f1f425bfcabe9745425fc",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3637a558a50141676f9997979491296dc007168d/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3637a558a50141676f9997979491296dc007168d/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=3637a558a50141676f9997979491296dc007168d",
      "patch": "@@ -1022,7 +1022,7 @@ struct symbol_computed_ops\n \n   void (*generate_c_location) (struct symbol *symbol, string_file *stream,\n \t\t\t       struct gdbarch *gdbarch,\n-\t\t\t       unsigned char *registers_used,\n+\t\t\t       std::vector<bool> &registers_used,\n \t\t\t       CORE_ADDR pc, const char *result_name);\n \n };"
    }
  ]
}