{
  "sha": "22a20dca3a96c481093bdff5e17f1feb0f9e345c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjJhMjBkY2EzYTk2YzQ4MTA5M2JkZmY1ZTE3ZjFmZWIwZjllMzQ1Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-26T19:12:13Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-10T18:43:38Z"
    },
    "message": "Change dbxread.c to use type-safe registry\n\nThis changes dbxread.c to use the type-safe registry.  In a couple of\nspots, you'll see that dbx_objfile_data_key.emplace is called but the\nresult is not used; this is because those functions refer to the key\nvia the various DBX_* macros.\n\n2019-07-10  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb-stabs.h (struct dbx_symfile_info): Add initializers and\n\tdestructor.\n\t(dbx_objfile_data_key): Change type and declare later.\n\t(DBX_SYMFILE_INFO): Rewrite.\n\t* dbxread.c (dbx_objfile_data_key): Change type.\n\t(dbx_symfile_init): Update.\n\t(~dbx_symfile_info): Rename from dbx_free_symfile_info.  Update.\n\t(coffstab_build_psymtabs, elfstab_build_psymtabs)\n\t(stabsect_build_psymtabs, _initialize_dbxread): Update.",
    "tree": {
      "sha": "63871027e7d8f72c66b9726d17f0bc9503721744",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/63871027e7d8f72c66b9726d17f0bc9503721744"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22a20dca3a96c481093bdff5e17f1feb0f9e345c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22a20dca3a96c481093bdff5e17f1feb0f9e345c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22a20dca3a96c481093bdff5e17f1feb0f9e345c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22a20dca3a96c481093bdff5e17f1feb0f9e345c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cb60f4208b2b920614306937b62bf15700824ee0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb60f4208b2b920614306937b62bf15700824ee0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cb60f4208b2b920614306937b62bf15700824ee0"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 42,
    "deletions": 43
  },
  "files": [
    {
      "sha": "e4ac3c7655199868b12c6960a10b2abd0a9adc85",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22a20dca3a96c481093bdff5e17f1feb0f9e345c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22a20dca3a96c481093bdff5e17f1feb0f9e345c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=22a20dca3a96c481093bdff5e17f1feb0f9e345c",
      "patch": "@@ -1,3 +1,15 @@\n+2019-07-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb-stabs.h (struct dbx_symfile_info): Add initializers and\n+\tdestructor.\n+\t(dbx_objfile_data_key): Change type and declare later.\n+\t(DBX_SYMFILE_INFO): Rewrite.\n+\t* dbxread.c (dbx_objfile_data_key): Change type.\n+\t(dbx_symfile_init): Update.\n+\t(~dbx_symfile_info): Rename from dbx_free_symfile_info.  Update.\n+\t(coffstab_build_psymtabs, elfstab_build_psymtabs)\n+\t(stabsect_build_psymtabs, _initialize_dbxread): Update.\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* jit.c (jit_program_space_key): Change type.  Move lower."
    },
    {
      "sha": "00eeb317dc4816245738469c94fa38be1e26dc9f",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 9,
      "deletions": 23,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22a20dca3a96c481093bdff5e17f1feb0f9e345c/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22a20dca3a96c481093bdff5e17f1feb0f9e345c/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=22a20dca3a96c481093bdff5e17f1feb0f9e345c",
      "patch": "@@ -61,7 +61,7 @@\n \n /* Key for dbx-associated data.  */\n \n-const struct objfile_data *dbx_objfile_data_key;\n+objfile_key<dbx_symfile_info> dbx_objfile_data_key;\n \n /* We put a pointer to this structure in the read_symtab_private field\n    of the psymtab.  */\n@@ -590,11 +590,9 @@ dbx_symfile_init (struct objfile *objfile)\n   char *name = bfd_get_filename (sym_bfd);\n   asection *text_sect;\n   unsigned char size_temp[DBX_STRINGTAB_SIZE_SIZE];\n-  struct dbx_symfile_info *dbx;\n \n   /* Allocate struct to keep track of the symfile.  */\n-  dbx = XCNEW (struct dbx_symfile_info);\n-  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n+  dbx_objfile_data_key.emplace (objfile);\n \n   DBX_TEXT_SECTION (objfile) = bfd_get_section_by_name (sym_bfd, \".text\");\n   DBX_DATA_SECTION (objfile) = bfd_get_section_by_name (sym_bfd, \".data\");\n@@ -703,15 +701,12 @@ dbx_symfile_finish (struct objfile *objfile)\n   free_header_files ();\n }\n \n-static void\n-dbx_free_symfile_info (struct objfile *objfile, void *arg)\n+dbx_symfile_info::~dbx_symfile_info ()\n {\n-  struct dbx_symfile_info *dbx = (struct dbx_symfile_info *) arg;\n-\n-  if (dbx->header_files != NULL)\n+  if (header_files != NULL)\n     {\n-      int i = dbx->n_header_files;\n-      struct header_file *hfiles = dbx->header_files;\n+      int i = n_header_files;\n+      struct header_file *hfiles = header_files;\n \n       while (--i >= 0)\n \t{\n@@ -720,8 +715,6 @@ dbx_free_symfile_info (struct objfile *objfile, void *arg)\n \t}\n       xfree (hfiles);\n     }\n-\n-  xfree (dbx);\n }\n \n \f\n@@ -2952,8 +2945,7 @@ coffstab_build_psymtabs (struct objfile *objfile,\n   unsigned int stabsize;\n \n   /* Allocate struct to keep track of stab reading.  */\n-  struct dbx_symfile_info *dbx = XCNEW (struct dbx_symfile_info);\n-  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n+  dbx_objfile_data_key.emplace (objfile);\n \n   DBX_TEXT_ADDR (objfile) = textaddr;\n   DBX_TEXT_SIZE (objfile) = textsize;\n@@ -3041,8 +3033,7 @@ elfstab_build_psymtabs (struct objfile *objfile, asection *stabsect,\n   stabsread_new_init ();\n \n   /* Allocate struct to keep track of stab reading.  */\n-  struct dbx_symfile_info *dbx = XCNEW (struct dbx_symfile_info);\n-  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n+  dbx_objfile_data_key.emplace (objfile);\n \n   /* Find the first and last text address.  dbx_symfile_read seems to\n      want this.  */\n@@ -3122,7 +3113,6 @@ stabsect_build_psymtabs (struct objfile *objfile, char *stab_name,\n   asection *stabsect;\n   asection *stabstrsect;\n   asection *text_sect;\n-  struct dbx_symfile_info *dbx;\n \n   stabsect = bfd_get_section_by_name (sym_bfd, stab_name);\n   stabstrsect = bfd_get_section_by_name (sym_bfd, stabstr_name);\n@@ -3135,8 +3125,7 @@ stabsect_build_psymtabs (struct objfile *objfile, char *stab_name,\n \t     \"but not string section (%s)\"),\n \t   stab_name, stabstr_name);\n \n-  dbx = XCNEW (struct dbx_symfile_info);\n-  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n+  dbx_objfile_data_key.emplace (objfile);\n \n   text_sect = bfd_get_section_by_name (sym_bfd, text_name);\n   if (!text_sect)\n@@ -3201,7 +3190,4 @@ void\n _initialize_dbxread (void)\n {\n   add_symtab_fns (bfd_target_aout_flavour, &aout_sym_fns);\n-\n-  dbx_objfile_data_key\n-    = register_objfile_data_with_cleanup (NULL, dbx_free_symfile_info);\n }"
    },
    {
      "sha": "dfdd20be06d833872b78151a9f890c6d47106fec",
      "filename": "gdb/gdb-stabs.h",
      "status": "modified",
      "additions": 21,
      "deletions": 20,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22a20dca3a96c481093bdff5e17f1feb0f9e345c/gdb/gdb-stabs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22a20dca3a96c481093bdff5e17f1feb0f9e345c/gdb/gdb-stabs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb-stabs.h?ref=22a20dca3a96c481093bdff5e17f1feb0f9e345c",
      "patch": "@@ -27,41 +27,42 @@\n    each others' functions as required.  */\n \n \n-/* The tag used to find the DBX info attached to an objfile.  This is\n-   global because it is referenced by several modules.  */\n-extern const struct objfile_data *dbx_objfile_data_key;\n-\n /* Information is passed among various dbxread routines for accessing\n    symbol files.  A pointer to this structure is kept in the objfile,\n    using the dbx_objfile_data_key.  */\n \n struct dbx_symfile_info\n   {\n-    CORE_ADDR text_addr;\t/* Start of text section */\n-    int text_size;\t\t/* Size of text section */\n-    int symcount;\t\t/* How many symbols are there in the file */\n-    char *stringtab;\t\t/* The actual string table */\n-    int stringtab_size;\t\t/* Its size */\n-    file_ptr symtab_offset;\t/* Offset in file to symbol table */\n-    int symbol_size;\t\t/* Bytes in a single symbol */\n+    ~dbx_symfile_info ();\n+\n+    CORE_ADDR text_addr = 0;\t/* Start of text section */\n+    int text_size = 0;\t\t/* Size of text section */\n+    int symcount = 0;\t\t/* How many symbols are there in the file */\n+    char *stringtab = nullptr;\t\t/* The actual string table */\n+    int stringtab_size = 0;\t\t/* Its size */\n+    file_ptr symtab_offset = 0;\t/* Offset in file to symbol table */\n+    int symbol_size = 0;\t\t/* Bytes in a single symbol */\n \n     /* See stabsread.h for the use of the following.  */\n-    struct header_file *header_files;\n-    int n_header_files;\n-    int n_allocated_header_files;\n+    struct header_file *header_files = nullptr;\n+    int n_header_files = 0;\n+    int n_allocated_header_files = 0;\n \n     /* Pointers to BFD sections.  These are used to speed up the building of\n        minimal symbols.  */\n-    asection *text_section;\n-    asection *data_section;\n-    asection *bss_section;\n+    asection *text_section = nullptr;\n+    asection *data_section = nullptr;\n+    asection *bss_section = nullptr;\n \n     /* Pointer to the separate \".stab\" section, if there is one.  */\n-    asection *stab_section;\n+    asection *stab_section = nullptr;\n   };\n \n-#define DBX_SYMFILE_INFO(o) \\\n-  ((struct dbx_symfile_info *) objfile_data ((o), dbx_objfile_data_key))\n+/* The tag used to find the DBX info attached to an objfile.  This is\n+   global because it is referenced by several modules.  */\n+extern objfile_key<dbx_symfile_info> dbx_objfile_data_key;\n+\n+#define DBX_SYMFILE_INFO(o)\t(dbx_objfile_data_key.get (o))\n #define DBX_TEXT_ADDR(o)\t(DBX_SYMFILE_INFO(o)->text_addr)\n #define DBX_TEXT_SIZE(o)\t(DBX_SYMFILE_INFO(o)->text_size)\n #define DBX_SYMCOUNT(o)\t\t(DBX_SYMFILE_INFO(o)->symcount)"
    }
  ]
}