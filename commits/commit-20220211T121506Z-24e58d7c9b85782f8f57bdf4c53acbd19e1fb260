{
  "sha": "24e58d7c9b85782f8f57bdf4c53acbd19e1fb260",
  "node_id": "C_kwDOANOeidoAKDI0ZTU4ZDdjOWI4NTc4MmY4ZjU3YmRmNGM1M2FjYmQxOWUxZmIyNjA",
  "commit": {
    "author": {
      "name": "Tiezhu Yang",
      "email": "yangtiezhu@loongson.cn",
      "date": "2022-02-11T12:15:06Z"
    },
    "committer": {
      "name": "Tiezhu Yang",
      "email": "yangtiezhu@loongson.cn",
      "date": "2022-02-11T12:15:06Z"
    },
    "message": "gdb: LoongArch: Add initial Linux target support\n\nThis commit adds initial Linux target support for LoongArch.\n\nSigned-off-by: Zhensong Liu <liuzhensong@loongson.cn>\nSigned-off-by: Qing zhang <zhangqing@loongson.cn>\nSigned-off-by: Youling Tang <tangyouling@loongson.cn>\nSigned-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>",
    "tree": {
      "sha": "f4ba915d65bc6aaa15b3e5d76d2ea508679c1ce6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f4ba915d65bc6aaa15b3e5d76d2ea508679c1ce6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24e58d7c9b85782f8f57bdf4c53acbd19e1fb260",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24e58d7c9b85782f8f57bdf4c53acbd19e1fb260",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24e58d7c9b85782f8f57bdf4c53acbd19e1fb260",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24e58d7c9b85782f8f57bdf4c53acbd19e1fb260/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "772d1f343476340874012b80c4c4863dcf98d2e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/772d1f343476340874012b80c4c4863dcf98d2e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/772d1f343476340874012b80c4c4863dcf98d2e2"
    }
  ],
  "stats": {
    "total": 151,
    "additions": 151,
    "deletions": 0
  },
  "files": [
    {
      "sha": "6c040c3c385d93d9d54027eea74c03a3e3c95ea8",
      "filename": "gdb/loongarch-linux-tdep.c",
      "status": "added",
      "additions": 151,
      "deletions": 0,
      "changes": 151,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e58d7c9b85782f8f57bdf4c53acbd19e1fb260/gdb/loongarch-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e58d7c9b85782f8f57bdf4c53acbd19e1fb260/gdb/loongarch-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/loongarch-linux-tdep.c?ref=24e58d7c9b85782f8f57bdf4c53acbd19e1fb260",
      "patch": "@@ -0,0 +1,151 @@\n+/* Target-dependent code for GNU/Linux on LoongArch processors.\n+\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"glibc-tdep.h\"\n+#include \"inferior.h\"\n+#include \"linux-tdep.h\"\n+#include \"loongarch-tdep.h\"\n+#include \"solib-svr4.h\"\n+#include \"target-descriptions.h\"\n+\n+/* Unpack an elf_gregset_t into GDB's register cache.  */\n+\n+static void\n+loongarch_supply_gregset (const struct regset *r,\n+\t\t\t  struct regcache *regcache, int regno,\n+\t\t\t  const void *gprs, size_t len)\n+{\n+  loongarch_gdbarch_tdep *tdep\n+    = (loongarch_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n+  auto regs = tdep->regs;\n+\n+  int regsize = register_size (regcache->arch (), regs.r);\n+  const gdb_byte *buf = nullptr;\n+\n+  if (regno == -1)\n+    {\n+      /* Set $r0 = 0.  */\n+      regcache->raw_supply_zeroed (regs.r);\n+\n+      for (int i = 1; i < 32; i++)\n+\t{\n+\t  buf = (const gdb_byte*) gprs + regsize * i;\n+\t  regcache->raw_supply (regs.r + i, (const void *) buf);\n+\t}\n+\n+      /* Size base (pc) = regsize * regs.pc.  */\n+      buf = (const gdb_byte*) gprs + regsize * regs.pc;\n+      regcache->raw_supply (regs.pc, (const void *) buf);\n+\n+      /* Size base (badv) = regsize * regs.badv.  */\n+      buf = (const gdb_byte*) gprs + regsize * regs.badv;\n+      regcache->raw_supply (regs.badv, (const void *) buf);\n+    }\n+  else if (regs.r == regno)\n+    regcache->raw_supply_zeroed (regno);\n+  else if ((regs.r < regno && regno < regs.r + 32)\n+\t   || regs.pc == regno || regs.badv == regno)\n+    {\n+      /* Offset offset (regno) = regsize * (regno - regs.r).  */\n+      buf = (const gdb_byte*) gprs + regsize * (regno - regs.r);\n+      regcache->raw_supply (regno, (const void *) buf);\n+    }\n+}\n+\n+/* Pack the GDB's register cache value into an elf_gregset_t.  */\n+\n+static void\n+loongarch_fill_gregset (const struct regset *r,\n+\t\t\tconst struct regcache *regcache, int regno,\n+\t\t\tvoid *gprs, size_t len)\n+{\n+  loongarch_gdbarch_tdep *tdep\n+    = (loongarch_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n+  auto regs = tdep->regs;\n+  int regsize = register_size (regcache->arch (), regs.r);\n+  gdb_byte *buf = nullptr;\n+\n+  if (regno == -1)\n+    {\n+      for (int i = 0; i < 32; i++)\n+\t{\n+\t  buf = (gdb_byte *) gprs + regsize * i;\n+\t  regcache->raw_collect (regs.r + i, (void *) buf);\n+\t}\n+\n+      /* Size base (pc) = regsize * regs.pc.  */\n+      buf = (gdb_byte *) gprs + regsize * regs.pc;\n+      regcache->raw_collect (regs.pc, (void *) buf);\n+\n+      /* Size base (badv) = regsize * regs.badv.  */\n+      buf = (gdb_byte *) gprs + regsize * regs.badv;\n+      regcache->raw_collect (regs.badv, (void *) buf);\n+    }\n+  else if ((regs.r <= regno && regno < regs.r + 32)\n+\t   || regs.pc == regno || regs.badv == regno)\n+    {\n+      /* Offset offset (regno) = regsize * (regno - regs.r).  */\n+      buf = (gdb_byte *) gprs + regsize * (regno - regs.r);\n+      regcache->raw_collect (regno, (void *) buf);\n+    }\n+}\n+\n+/* Register set definitions.  */\n+\n+const struct regset loongarch_gregset =\n+{\n+  nullptr,\n+  loongarch_supply_gregset,\n+  loongarch_fill_gregset,\n+};\n+\n+/* Initialize LoongArch Linux ABI info.  */\n+\n+static void\n+loongarch_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n+{\n+  linux_init_abi (info, gdbarch, 0);\n+\n+  set_solib_svr4_fetch_link_map_offsets (gdbarch,\n+\t\t\t\t\t info.bfd_arch_info->bits_per_address == 32\n+\t\t\t\t\t ? linux_ilp32_fetch_link_map_offsets\n+\t\t\t\t\t : linux_lp64_fetch_link_map_offsets);\n+\n+  /* GNU/Linux uses SVR4-style shared libraries.  */\n+  set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);\n+\n+  /* GNU/Linux uses the dynamic linker included in the GNU C Library.  */\n+  set_gdbarch_skip_solib_resolver (gdbarch, glibc_skip_solib_resolver);\n+  /* Enable TLS support.  */\n+  set_gdbarch_fetch_tls_load_module_address (gdbarch, svr4_fetch_objfile_link_map);\n+}\n+\n+/* Initialize LoongArch Linux target support.  */\n+\n+void _initialize_loongarch_linux_tdep ();\n+void\n+_initialize_loongarch_linux_tdep ()\n+{\n+  gdbarch_register_osabi (bfd_arch_loongarch, bfd_mach_loongarch32,\n+                          GDB_OSABI_LINUX, loongarch_linux_init_abi);\n+  gdbarch_register_osabi (bfd_arch_loongarch, bfd_mach_loongarch64,\n+                          GDB_OSABI_LINUX, loongarch_linux_init_abi);\n+}"
    }
  ]
}