{
  "sha": "42bd97a6b1e5fa845af116ce52af1a8a3a58be7c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDJiZDk3YTZiMWU1ZmE4NDVhZjExNmNlNTJhZjFhOGEzYTU4YmU3Yw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-07-04T18:31:21Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-07-10T22:49:34Z"
    },
    "message": "Avoid constant stream of TARGET_WAITKIND_NO_RESUMED\n\nIf we hit the synchronous execution command case described by\nhandle_no_resumed, and handle_no_resumed determines that the event\nshould be ignored, because it found a thread that is executing, we end\nup in prepare_to_wait.\n\nThere, if the current target is not registered in the event loop right\nnow, we call mark_infrun_async_event_handler.  With that event handler\nmarked, the event loop calls again into fetch_inferior_event, which\ncalls target_wait, which returns TARGET_WAITKIND_NO_RESUMED, and we\nend up in handle_no_resumed, again ignoring the event and marking\ninfrun_async_event_handler.  The result is that GDB is now always\nkeeping the CPU 100% busy in this loop, even though it continues to be\nable to react to input and to real target events, because we still go\nthrough the event-loop.\n\nThe problem is that marking of the infrun_async_event_handler in\nprepare_to_wait.  That is there to handle targets that don't support\nasynchronous execution.  So the correct predicate is whether async\nexecution is supported, not whether the target is async right now.\n\ngdb/ChangeLog:\n\n\tPR gdb/26199\n\t* infrun.c (prepare_to_wait): Check target_can_async_p instead of\n\ttarget_is_async_p.",
    "tree": {
      "sha": "5a37f0776f61dd71d9165418a063e92d47cea1a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a37f0776f61dd71d9165418a063e92d47cea1a8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "43667cc6f65e60e2c15f3bb84e45730b537db5fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43667cc6f65e60e2c15f3bb84e45730b537db5fa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/43667cc6f65e60e2c15f3bb84e45730b537db5fa"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 11,
    "deletions": 1
  },
  "files": [
    {
      "sha": "09198ef6ab8f2c56c03c55aaf7aa89da138e1e86",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=42bd97a6b1e5fa845af116ce52af1a8a3a58be7c",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-10  Pedro Alves  <pedro@palves.net>\n+\n+\tPR gdb/26199\n+\t* infrun.c (prepare_to_wait): Check target_can_async_p instead of\n+\ttarget_is_async_p.\n+\n 2020-07-10  Pedro Alves  <pedro@palves.net>\n \n \tPR gdb/26199"
    },
    {
      "sha": "a01e0969cb17943708ecb64f13f165bcea9d7b29",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42bd97a6b1e5fa845af116ce52af1a8a3a58be7c/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=42bd97a6b1e5fa845af116ce52af1a8a3a58be7c",
      "patch": "@@ -8116,7 +8116,11 @@ prepare_to_wait (struct execution_control_state *ecs)\n \n   ecs->wait_some_more = 1;\n \n-  if (!target_is_async_p ())\n+  /* If the target can't async, emulate it by marking the infrun event\n+     handler such that as soon as we get back to the event-loop, we\n+     immediately end up in fetch_inferior_event again calling\n+     target_wait.  */\n+  if (!target_can_async_p ())\n     mark_infrun_async_event_handler ();\n }\n "
    }
  ]
}