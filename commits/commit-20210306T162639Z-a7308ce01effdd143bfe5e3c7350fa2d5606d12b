{
  "sha": "a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTczMDhjZTAxZWZmZGQxNDNiZmU1ZTNjNzM1MGZhMmQ1NjA2ZDEyYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-06T16:26:39Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-06T16:26:39Z"
    },
    "message": "Avoid crash on missing dwz file\n\nIf DWARF contains a reference to a \"dwz\" file, but there is no\n.gnu_debugaltlink section, then gdb will crash.  This happens because\ndwarf2_get_dwz_file will return NULL, but some callers do not expect\nthis.\n\nThis patch changes dwarf2_get_dwz_file so that callers can require a\ndwz file.  Then, it updates the callers that are attempting to process\nreferences to the dwz file to require one.\n\nThis includes a new testcase.  The dwarf.exp changes don't handle the\nnew forms exactly correctly -- they are only handled well enough to\nlet this test case complete.\n\ngdb/ChangeLog\n2021-03-06  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.h (dwarf2_get_dwz_file): Add 'require' parameter.\n\t* dwarf2/read.c (dwarf2_get_dwz_file): Add 'require' parameter.\n\t(get_abbrev_section_for_cu, read_attribute_value)\n\t(get_debug_line_section): Update.\n\t* dwarf2/macro.c (dwarf_decode_macro_bytes): Update.\n\ngdb/testsuite/ChangeLog\n2021-03-06  Tom Tromey  <tom@tromey.com>\n\n\t* lib/dwarf.exp (_handle_DW_FORM): Treat DW_FORM_GNU_ref_alt and\n\tDW_FORM_GNU_strp_alt like DW_FORM_sec_offset.\n\t* gdb.dwarf2/dwznolink.exp: New file.",
    "tree": {
      "sha": "0e10c305165080018d6c81067d0717927c45f473",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e10c305165080018d6c81067d0717927c45f473"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fbedd54644116109834c0e0546e6c32ae3c482f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbedd54644116109834c0e0546e6c32ae3c482f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fbedd54644116109834c0e0546e6c32ae3c482f9"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 97,
    "deletions": 14
  },
  "files": [
    {
      "sha": "00619cc4cd81e2b6cc43c4d3d244075fbaa9e9ac",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (dwarf2_get_dwz_file): Add 'require' parameter.\n+\t* dwarf2/read.c (dwarf2_get_dwz_file): Add 'require' parameter.\n+\t(get_abbrev_section_for_cu, read_attribute_value)\n+\t(get_debug_line_section): Update.\n+\t* dwarf2/macro.c (dwarf_decode_macro_bytes): Update.\n+\n 2021-03-06  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/sect-names.h (struct dwarf2_section_names) <matches>: New"
    },
    {
      "sha": "2ecebe6173c0ddc2ff00c7d65bb428667b68e342",
      "filename": "gdb/dwarf2/macro.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/dwarf2/macro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/dwarf2/macro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.c?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -509,7 +509,8 @@ dwarf_decode_macro_bytes (dwarf2_per_objfile *per_objfile,\n \t\t    || macinfo_type == DW_MACRO_undef_sup\n \t\t    || section_is_dwz)\n \t\t  {\n-\t\t    dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n+\t\t    dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd,\n+\t\t\t\t\t\t\t true);\n \n \t\t    body = dwz->read_string (objfile, str_offset);\n \t\t  }\n@@ -693,7 +694,8 @@ dwarf_decode_macro_bytes (dwarf2_per_objfile *per_objfile,\n \n \t    if (macinfo_type == DW_MACRO_import_sup)\n \t      {\n-\t\tdwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n+\t\tdwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd,\n+\t\t\t\t\t\t     true);\n \n \t\tdwz->macro.read (objfile);\n "
    },
    {
      "sha": "65e2047ef3278347a628a5826e884481c96b42cb",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -2285,7 +2285,7 @@ dwz_search_other_debugdirs (std::string &filename, bfd_byte *buildid,\n /* See dwarf2read.h.  */\n \n struct dwz_file *\n-dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n+dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd, bool require)\n {\n   bfd_size_type buildid_len_arg;\n   size_t buildid_len;\n@@ -2301,7 +2301,11 @@ dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n   if (data == NULL)\n     {\n       if (bfd_get_error () == bfd_error_no_error)\n-\treturn NULL;\n+\t{\n+\t  if (!require)\n+\t    return nullptr;\n+\t  error (_(\"could not read '.gnu_debugaltlink' section\"));\n+\t}\n       error (_(\"could not read '.gnu_debugaltlink' section: %s\"),\n \t     bfd_errmsg (bfd_get_error ()));\n     }\n@@ -6308,7 +6312,7 @@ get_abbrev_section_for_cu (struct dwarf2_per_cu_data *this_cu)\n   dwarf2_per_bfd *per_bfd = this_cu->per_bfd;\n \n   if (this_cu->is_dwz)\n-    abbrev = &dwarf2_get_dwz_file (per_bfd)->abbrev;\n+    abbrev = &dwarf2_get_dwz_file (per_bfd, true)->abbrev;\n   else\n     abbrev = &per_bfd->abbrev;\n \n@@ -20654,7 +20658,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n       /* FALLTHROUGH */\n     case DW_FORM_GNU_strp_alt:\n       {\n-\tdwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n+\tdwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd, true);\n \tLONGEST str_offset = cu_header->read_offset (abfd, info_ptr,\n \t\t\t\t\t\t     &bytes_read);\n \n@@ -21252,7 +21256,7 @@ get_debug_line_section (struct dwarf2_cu *cu)\n     section = &cu->dwo_unit->dwo_file->sections.line;\n   else if (cu->per_cu->is_dwz)\n     {\n-      dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n+      dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd, true);\n \n       section = &dwz->line;\n     }"
    },
    {
      "sha": "b974fe46ef46b80da4b2e1fe7b9369a612418c48",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -633,11 +633,14 @@ struct signatured_type\n   struct dwo_unit *dwo_unit;\n };\n \n-/* Open the separate '.dwz' debug file, if needed.  Return NULL if\n-   there is no .gnu_debugaltlink section in the file.  Error if there\n-   is such a section but the file cannot be found.  */\n-\n-extern dwz_file *dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd);\n+/* Open the separate '.dwz' debug file, if needed.  If there is no\n+   .gnu_debugaltlink section in the file, then the result depends on\n+   REQUIRE: if REQUIRE is true, then error; if REQUIRE is false,\n+   return NULL.  Always error if there is such a section but the file\n+   cannot be found.  */\n+\n+extern dwz_file *dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd,\n+\t\t\t\t      bool require = false);\n \n /* Return the type of the DIE at DIE_OFFSET in the CU named by\n    PER_CU.  */"
    },
    {
      "sha": "ecbb768a423746e339e5ff20a8b95b81daf638a6",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* lib/dwarf.exp (_handle_DW_FORM): Treat DW_FORM_GNU_ref_alt and\n+\tDW_FORM_GNU_strp_alt like DW_FORM_sec_offset.\n+\t* gdb.dwarf2/dwznolink.exp: New file.\n+\n 2021-03-05  Mark Wielaard  <mark@klomp.org>\n \n \t* lib/valgrind.exp (vgdb_start): Add --wait=1 to vgdbcmd."
    },
    {
      "sha": "98976d7e59c3ae80003f1f0e8463c685c3343979",
      "filename": "gdb/testsuite/gdb.dwarf2/dwznolink.exp",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/testsuite/gdb.dwarf2/dwznolink.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/testsuite/gdb.dwarf2/dwznolink.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dwznolink.exp?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -0,0 +1,60 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# No remote host testing either.\n+if {[is_remote host]} {\n+    return 0\n+}\n+\n+standard_testfile main.c dwznolink.S\n+\n+set asm_file [standard_output_file $srcfile2]\n+\n+# The DWARF should contain a reference to a supplementary (\"dwz\")\n+# file, but the section that links to the file should be missing.  At\n+# one point, this caused gdb crashes.\n+Dwarf::assemble $asm_file {\n+    cu {} {\n+\tcompile_unit {{language @DW_LANG_C}} {\n+\t    constant {\n+\t\t{name 0 DW_FORM_GNU_strp_alt}\n+\t\t{type 97 DW_FORM_GNU_ref_alt}\n+\t\t{const_value 99 data1}\n+\t    }\n+\t}\n+    }\n+}\n+\n+# We can't use prepare_for_testing here because we need to check the\n+# 'file' command's output.\n+if {[build_executable $testfile.exp $testfile \\\n+\t [list $srcfile $asm_file] {nodebug quiet}]} {\n+    return -1\n+}\n+\n+gdb_exit\n+gdb_start\n+gdb_reinitialize_dir $srcdir/$subdir\n+\n+gdb_test \"file -readnow $binfile\" \\\n+    \"could not read '.gnu_debugaltlink' section\" \\\n+    \"file $testfile\""
    },
    {
      "sha": "f8fbd3818108c808aa1d1217999041949934b8c9",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7308ce01effdd143bfe5e3c7350fa2d5606d12b/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=a7308ce01effdd143bfe5e3c7350fa2d5606d12b",
      "patch": "@@ -456,6 +456,8 @@ namespace eval Dwarf {\n \t\t_op .${size}byte $value\n \t    }\n \n+\t    DW_FORM_GNU_ref_alt -\n+\t    DW_FORM_GNU_strp_alt -\n \t    DW_FORM_sec_offset {\n \t\tvariable _cu_offset_size\n \t\t_op .${_cu_offset_size}byte $value\n@@ -553,8 +555,6 @@ namespace eval Dwarf {\n \n \t    DW_FORM_GNU_addr_index -\n \t    DW_FORM_GNU_str_index -\n-\t    DW_FORM_GNU_ref_alt -\n-\t    DW_FORM_GNU_strp_alt -\n \n \t    default {\n \t\terror \"unhandled form $form\""
    }
  ]
}