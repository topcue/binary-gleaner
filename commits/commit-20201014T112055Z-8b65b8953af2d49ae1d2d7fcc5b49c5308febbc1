{
  "sha": "8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGI2NWI4OTUzYWYyZDQ5YWUxZDJkN2ZjYzViNDljNTMwOGZlYmJjMQ==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-10-14T11:17:54Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-10-14T11:20:55Z"
    },
    "message": "x86: Remove the prefix byte from non-VEX/EVEX base_opcode\n\nReplace the prefix byte in non-VEX/EVEX base_opcode with PREFIX_0X66,\nPREFIX_0XF2 or PREFIX_0XF3.\n\ngas/\n\n\t* config/tc-i386.c (load_insn_p): Check opcodeprefix == 0 for\n\tbase_opcode == 0xfc7.\n\t(match_template): Likewise.\n\t(process_suffix): Check opcodeprefix == PREFIX_0XF2 for CRC32.\n\t(check_byte_reg): Likewise.\n\t(output_insn): Don't add the 0xf3 prefix twice for PadLock\n\tinstructions.  Don't add prefix from non-VEX/EVEX base_opcode.\n\nopcodes/\n\n\t* i386-gen.c (process_i386_opcode_modifier): Return 1 for\n\tnon-VEX/EVEX/prefix encoding.\n\t(output_i386_opcode): Fail if non-VEX/EVEX/prefix base_opcode\n\thas a prefix byte.\n\t* i386-opc.tbl: Replace the prefix byte in non-VEX/EVEX\n\tbase_opcode with PREFIX_0X66, PREFIX_0XF2 or PREFIX_0XF3.\n\t* i386-tbl.h: Regenerated.",
    "tree": {
      "sha": "6787d9d057850f28f7fd940774843b80871ab90b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6787d9d057850f28f7fd940774843b80871ab90b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c8bd0babc6039a4cef7d60d57b1b68e7a7f2e70",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c8bd0babc6039a4cef7d60d57b1b68e7a7f2e70",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c8bd0babc6039a4cef7d60d57b1b68e7a7f2e70"
    }
  ],
  "stats": {
    "total": 2266,
    "additions": 1165,
    "deletions": 1101
  },
  "files": [
    {
      "sha": "ae54f170cffea9cd97f96c945f219f0ed07f0bc5",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
      "patch": "@@ -1,3 +1,13 @@\n+2020-10-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/tc-i386.c (load_insn_p): Check opcodeprefix == 0 for\n+\tbase_opcode == 0xfc7.\n+\t(match_template): Likewise.\n+\t(process_suffix): Check opcodeprefix == PREFIX_0XF2 for CRC32.\n+\t(check_byte_reg): Likewise.\n+\t(output_insn): Don't add the 0xf3 prefix twice for PadLock\n+\tinstructions.  Don't add prefix from non-VEX/EVEX base_opcode.\n+\n 2020-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/tc-i386.c (build_vex_prefix): Replace vexopcode with"
    },
    {
      "sha": "80b96d0e8f7efb8f9d4c7463846e214305241327",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 19,
      "deletions": 24,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
      "patch": "@@ -4434,6 +4434,7 @@ load_insn_p (void)\n \n       /* cmpxchg8b, cmpxchg16b, xrstors.  */\n       if (i.tm.base_opcode == 0xfc7\n+\t  && i.tm.opcode_modifier.opcodeprefix == 0\n \t  && (i.tm.extension_opcode == 1 || i.tm.extension_opcode == 3))\n \treturn 1;\n \n@@ -4453,6 +4454,7 @@ load_insn_p (void)\n \n       /* vmptrld */\n       if (i.tm.base_opcode == 0xfc7\n+\t  && i.tm.opcode_modifier.opcodeprefix == 0\n \t  && i.tm.extension_opcode == 6)\n \treturn 1;\n \n@@ -6313,8 +6315,9 @@ match_template (char mnem_suffix)\n       j = i.imm_operands + (t->operands > i.imm_operands + 1);\n       if (((i.suffix == QWORD_MNEM_SUFFIX\n \t    && flag_code != CODE_64BIT\n-\t    && (t->base_opcode != 0x0fc7\n-\t\t|| t->extension_opcode != 1 /* cmpxchg8b */))\n+\t    && !(t->base_opcode == 0xfc7\n+\t\t && i.tm.opcode_modifier.opcodeprefix == 0\n+\t\t && t->extension_opcode == 1) /* cmpxchg8b */)\n \t   || (i.suffix == LONG_MNEM_SUFFIX\n \t       && !cpu_arch_flags.bitfield.cpui386))\n \t  && (intel_syntax\n@@ -6759,6 +6762,8 @@ check_string (void)\n static int\n process_suffix (void)\n {\n+  bfd_boolean is_crc32 = FALSE;\n+\n   /* If matched instruction specifies an explicit instruction mnemonic\n      suffix, use it.  */\n   if (i.tm.opcode_modifier.size == SIZE16)\n@@ -6772,6 +6777,9 @@ process_suffix (void)\n \t   && !i.tm.opcode_modifier.addrprefixopreg)\n     {\n       unsigned int numop = i.operands;\n+      /* CRC32 */\n+      is_crc32 = (i.tm.base_opcode == 0xf38f0\n+\t\t  && i.tm.opcode_modifier.opcodeprefix == PREFIX_0XF2);\n \n       /* movsx/movzx want only their source operand considered here, for the\n \t ambiguity checking below.  The suffix will be replaced afterwards\n@@ -6781,8 +6789,7 @@ process_suffix (void)\n \t--i.operands;\n \n       /* crc32 needs REX.W set regardless of suffix / source operand size.  */\n-      if (i.tm.base_opcode == 0xf20f38f0\n-          && i.tm.operand_types[1].bitfield.qword)\n+      if (is_crc32 && i.tm.operand_types[1].bitfield.qword)\n         i.rex |= REX_W;\n \n       /* If there's no instruction mnemonic suffix we try to invent one\n@@ -6793,7 +6800,7 @@ process_suffix (void)\n \t     Destination register type is more significant than source\n \t     register type.  crc32 in SSE4.2 prefers source register\n \t     type. */\n-\t  unsigned int op = i.tm.base_opcode != 0xf20f38f0 ? i.operands : 1;\n+\t  unsigned int op = is_crc32 ? 1 : i.operands;\n \n \t  while (op--)\n \t    if (i.tm.operand_types[op].bitfield.instance == InstanceNone\n@@ -7143,7 +7150,7 @@ process_suffix (void)\n \t\t      || i.tm.operand_types[0].bitfield.instance == RegD\n \t\t      || i.tm.operand_types[1].bitfield.instance == RegD\n \t\t      /* CRC32 */\n-\t\t      || i.tm.base_opcode == 0xf20f38f0))))\n+\t\t      || is_crc32))))\n \ti.tm.base_opcode |= 1;\n       break;\n     }\n@@ -7257,7 +7264,9 @@ check_byte_reg (void)\n \tcontinue;\n \n       /* crc32 only wants its source operand checked here.  */\n-      if (i.tm.base_opcode == 0xf20f38f0 && op)\n+      if (i.tm.base_opcode == 0xf38f0\n+\t  && i.tm.opcode_modifier.opcodeprefix == PREFIX_0XF2\n+\t  && op != 0)\n \tcontinue;\n \n       /* Any other register is bad.  */\n@@ -9302,7 +9311,6 @@ output_insn (void)\n       char *p;\n       unsigned char *q;\n       unsigned int j;\n-      unsigned int prefix;\n       enum mf_cmp_kind mf_cmp;\n \n       if (avoid_fence\n@@ -9382,28 +9390,15 @@ output_insn (void)\n \t      add_prefix (0xf2);\n \t      break;\n \t    case PREFIX_0XF3:\n-\t      add_prefix (0xf3);\n+\t      if (!i.tm.cpu_flags.bitfield.cpupadlock\n+\t\t  || (i.prefix[REP_PREFIX] != 0xf3))\n+\t\tadd_prefix (0xf3);\n \t      break;\n \t    case PREFIX_NONE:\n \t      switch (i.tm.opcode_length)\n \t\t{\n \t\tcase 3:\n-\t\t  if (i.tm.base_opcode & 0xff000000)\n-\t\t    {\n-\t\t      prefix = (i.tm.base_opcode >> 24) & 0xff;\n-\t\t      if (!i.tm.cpu_flags.bitfield.cpupadlock\n-\t\t\t  || prefix != REPE_PREFIX_OPCODE\n-\t\t\t  || (i.prefix[REP_PREFIX] != REPE_PREFIX_OPCODE))\n-\t\t\tadd_prefix (prefix);\n-\t\t    }\n-\t\t  break;\n \t\tcase 2:\n-\t\t  if ((i.tm.base_opcode & 0xff0000) != 0)\n-\t\t    {\n-\t\t      prefix = (i.tm.base_opcode >> 16) & 0xff;\n-\t\t      add_prefix (prefix);\n-\t\t    }\n-\t\t  break;\n \t\tcase 1:\n \t\t  break;\n \t\tcase 0:"
    },
    {
      "sha": "b0cca07831244bc4bd5e3f4ab9e5d7bd30dfe930",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
      "patch": "@@ -1,3 +1,13 @@\n+2020-10-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* i386-gen.c (process_i386_opcode_modifier): Return 1 for\n+\tnon-VEX/EVEX/prefix encoding.\n+\t(output_i386_opcode): Fail if non-VEX/EVEX/prefix base_opcode\n+\thas a prefix byte.\n+\t* i386-opc.tbl: Replace the prefix byte in non-VEX/EVEX\n+\tbase_opcode with PREFIX_0X66, PREFIX_0XF2 or PREFIX_0XF3.\n+\t* i386-tbl.h: Regenerated.\n+\n 2020-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* i386-gen.c (opcode_modifiers): Replace VexOpcode with"
    },
    {
      "sha": "8a42eb93efe8e00b2b82e209a4e36f31bfbb4584",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 52,
      "deletions": 3,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1",
      "patch": "@@ -1161,11 +1161,12 @@ adjust_broadcast_modifier (char **opnd)\n   return bcst_type;\n }\n \n-static void\n+static int\n process_i386_opcode_modifier (FILE *table, char *mod, char **opnd, int lineno)\n {\n   char *str, *next, *last;\n   bitfield modifiers [ARRAY_SIZE (opcode_modifiers)];\n+  unsigned int regular_encoding = 1;\n \n   active_isstring = 0;\n \n@@ -1184,9 +1185,22 @@ process_i386_opcode_modifier (FILE *table, char *mod, char **opnd, int lineno)\n \t    {\n \t      int val = 1;\n \t      if (strcasecmp(str, \"Broadcast\") == 0)\n+\t\t{\n \t\t  val = adjust_broadcast_modifier (opnd);\n+\t\t  regular_encoding = 0;\n+\t\t}\n+\t      else if (strcasecmp(str, \"Vex\") == 0\n+\t\t       || strncasecmp(str, \"Vex=\", 4) == 0\n+\t\t       || strcasecmp(str, \"EVex\") == 0\n+\t\t       || strncasecmp(str, \"EVex=\", 5) == 0\n+\t\t       || strncasecmp(str, \"Disp8MemShift=\", 14) == 0\n+\t\t       || strncasecmp(str, \"Masking=\", 8) == 0\n+\t\t       || strcasecmp(str, \"SAE\") == 0\n+\t\t       || strcasecmp(str, \"IsPrefix\") == 0)\n+\t\tregular_encoding = 0;\n+\n \t      set_bitfield (str, modifiers, val, ARRAY_SIZE (modifiers),\n-\t\t\t  lineno);\n+\t\t\t    lineno);\n \t      if (strcasecmp(str, \"IsString\") == 0)\n \t\tactive_isstring = 1;\n \n@@ -1215,6 +1229,8 @@ process_i386_opcode_modifier (FILE *table, char *mod, char **opnd, int lineno)\n \t\t filename, lineno);\n     }\n   output_opcode_modifier (table, modifiers, ARRAY_SIZE (modifiers));\n+\n+  return regular_encoding;\n }\n \n enum stage {\n@@ -1396,7 +1412,40 @@ output_i386_opcode (FILE *table, const char *name, char *str,\n \n   process_i386_cpu_flag (table, cpu_flags, 0, \",\", \"    \", lineno);\n \n-  process_i386_opcode_modifier (table, opcode_modifier, operand_types, lineno);\n+  if (process_i386_opcode_modifier (table, opcode_modifier,\n+\t\t\t\t    operand_types, lineno))\n+    {\n+      char *end;\n+      unsigned long int length = strtoul (opcode_length, &end, 0);\n+      unsigned long int opcode = strtoul (base_opcode, &end, 0);\n+      switch (length)\n+\t{\n+\tcase 3:\n+\t  if ((opcode >> 24) != 0)\n+\t    fail (_(\"%s: %s: (base_opcode >> 24) != 0: %s\\n\"),\n+\t\t  filename, name, base_opcode);\n+\t  break;\n+\tcase 2:\n+\t  if ((opcode >> 16) != 0)\n+\t    fail (_(\"%s: %s: (base_opcode >> 16) != 0: %s\\n\"),\n+\t\t  filename, name, base_opcode);\n+\t  break;\n+\tcase 1:\n+\t  if ((opcode >> 8) != 0)\n+\t    fail (_(\"%s: %s: (base_opcode >> 8) != 0: %s\\n\"),\n+\t\t  filename, name, base_opcode);\n+\t  break;\n+\tcase 0:\n+\t  if (opcode != 0)\n+\t    fail (_(\"%s: %s: base_opcode != 0: %s\\n\"),\n+\t\t  filename, name, base_opcode);\n+\t  break;\n+\tdefault:\n+\t  fail (_(\"%s: %s: invalid opcode length: %s\\n\"),\n+\t\tfilename, name, opcode_length);\n+\t  break;\n+\t}\n+    }\n \n   fprintf (table, \"    { \");\n "
    },
    {
      "sha": "45759fd8ce4cc75419de1e0f3a054b0f5b01c3cc",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 344,
      "deletions": 344,
      "changes": 688,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1"
    },
    {
      "sha": "bc29229dd2ba9a290ab2618859a56c03aee9cf1c",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 730,
      "deletions": 730,
      "changes": 1460,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=8b65b8953af2d49ae1d2d7fcc5b49c5308febbc1"
    }
  ]
}