{
  "sha": "a409645d13f6cddef4827cf7240c01ec3e09559c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTQwOTY0NWQxM2Y2Y2RkZWY0ODI3Y2Y3MjQwYzAxZWMzZTA5NTU5Yw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:02Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:02Z"
    },
    "message": "gdb: remove TYPE_VARARGS\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_VARARGS): Remove, replace all\n\tuses with type::has_varargs.\n\nChange-Id: Ieea4a64b4bfa4b8be643e68cb403081881133740",
    "tree": {
      "sha": "a446c4702fd973b9e71b1fea594bf3e3aff5a68b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a446c4702fd973b9e71b1fea594bf3e3aff5a68b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a409645d13f6cddef4827cf7240c01ec3e09559c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a409645d13f6cddef4827cf7240c01ec3e09559c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a409645d13f6cddef4827cf7240c01ec3e09559c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a409645d13f6cddef4827cf7240c01ec3e09559c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d6286ed048eb1997a0afea0f18cb9eb1789f386",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d6286ed048eb1997a0afea0f18cb9eb1789f386"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 30,
    "deletions": 27
  },
  "files": [
    {
      "sha": "cde84e1159ff92e710744a5d5d728fccdd96e845",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_VARARGS): Remove, replace all\n+\tuses with type::has_varargs.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <has_varargs, set_has_varargs>: New methods."
    },
    {
      "sha": "1eeaea32dc66e2071b7333d30449a787cfc768b3",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -3694,7 +3694,7 @@ arm_vfp_abi_for_function (struct gdbarch *gdbarch, struct type *func_type)\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n   /* Variadic functions always use the base ABI.  Assume that functions\n      without debug info are not variadic.  */\n-  if (func_type && TYPE_VARARGS (check_typedef (func_type)))\n+  if (func_type && check_typedef (func_type)->has_varargs ())\n     return 0;\n   /* The VFP ABI is only supported as a variant of AAPCS.  */\n   if (tdep->arm_abi != ARM_ABI_AAPCS)"
    },
    {
      "sha": "0c2268f8d0aebbb92d87e94d15eb6d25ccc68be7",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -279,7 +279,7 @@ cp_type_print_method_args (struct type *mtype, const char *prefix,\n {\n   struct field *args = mtype->fields ();\n   int nargs = mtype->num_fields ();\n-  int varargs = TYPE_VARARGS (mtype);\n+  int varargs = mtype->has_varargs ();\n   int i;\n \n   fprintf_symbol_filtered (stream, prefix,\n@@ -591,12 +591,12 @@ c_type_print_args (struct type *type, struct ui_file *stream,\n       printed_any = 1;\n     }\n \n-  if (printed_any && TYPE_VARARGS (type))\n+  if (printed_any && type->has_varargs ())\n     {\n       /* Print out a trailing ellipsis for varargs functions.  Ignore\n \t TYPE_VARARGS if the function has no named arguments; that\n \t represents unprototyped (K&R style) C functions.  */\n-      if (printed_any && TYPE_VARARGS (type))\n+      if (printed_any && type->has_varargs ())\n \t{\n \t  fprintf_filtered (stream, \", \");\n \t  wrap_here (\"    \");"
    },
    {
      "sha": "03536c0ca333c3d3095fa8c456899168b02bea1d",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -153,7 +153,7 @@ convert_func (compile_c_instance *context, struct type *type)\n   int i;\n   gcc_type result, return_type;\n   struct gcc_type_array array;\n-  int is_varargs = TYPE_VARARGS (type) || !type->is_prototyped ();\n+  int is_varargs = type->has_varargs () || !type->is_prototyped ();\n \n   struct type *target_type = TYPE_TARGET_TYPE (type);\n "
    },
    {
      "sha": "8270defa17ce02c3ab9da71d3df85a09f641a775",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -964,7 +964,7 @@ static gcc_type\n compile_cplus_convert_func (compile_cplus_instance *instance,\n \t\t\t    struct type *type, bool strip_artificial)\n {\n-  int is_varargs = TYPE_VARARGS (type);\n+  int is_varargs = type->has_varargs ();\n   struct type *target_type = TYPE_TARGET_TYPE (type);\n \n   /* Functions with no debug info have no return type.  Ideally we'd"
    },
    {
      "sha": "45fdaf863755ff5bc3dc0ccb405d773fbb065f86",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -15631,7 +15631,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n \t\t\t    TYPE_TARGET_TYPE (this_type),\n \t\t\t    this_type->fields (),\n \t\t\t    this_type->num_fields (),\n-\t\t\t    TYPE_VARARGS (this_type));\n+\t\t\t    this_type->has_varargs ());\n \n       /* Handle static member functions.\n          Dwarf2 has no clean way to discern C++ static and non-static\n@@ -15847,7 +15847,7 @@ quirk_gcc_member_function_pointer (struct type *type, struct objfile *objfile)\n   new_type = alloc_type (objfile);\n   smash_to_method_type (new_type, self_type, TYPE_TARGET_TYPE (pfn_type),\n \t\t\tpfn_type->fields (), pfn_type->num_fields (),\n-\t\t\tTYPE_VARARGS (pfn_type));\n+\t\t\tpfn_type->has_varargs ());\n   smash_to_methodptr_type (type, new_type);\n }\n \n@@ -17352,7 +17352,7 @@ read_tag_ptr_to_member_type (struct die_info *die, struct dwarf2_cu *cu)\n \n       smash_to_method_type (new_type, domain, TYPE_TARGET_TYPE (to_type),\n \t\t\t    to_type->fields (), to_type->num_fields (),\n-\t\t\t    TYPE_VARARGS (to_type));\n+\t\t\t    to_type->has_varargs ());\n       type = lookup_methodptr_type (new_type);\n     }\n   else"
    },
    {
      "sha": "5927f5007812775f1dd7e558c380a6d8dd69f6a5",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -3992,7 +3992,7 @@ check_types_equal (struct type *type1, struct type *type2,\n       || type1->is_unsigned () != type2->is_unsigned ()\n       || type1->has_no_signedness () != type2->has_no_signedness ()\n       || TYPE_ENDIANITY_NOT_DEFAULT (type1) != TYPE_ENDIANITY_NOT_DEFAULT (type2)\n-      || TYPE_VARARGS (type1) != TYPE_VARARGS (type2)\n+      || type1->has_varargs () != type2->has_varargs ()\n       || TYPE_VECTOR (type1) != TYPE_VECTOR (type2)\n       || TYPE_NOTTEXT (type1) != TYPE_NOTTEXT (type2)\n       || TYPE_INSTANCE_FLAGS (type1) != TYPE_INSTANCE_FLAGS (type2)\n@@ -5088,7 +5088,7 @@ recursive_dump_type (struct type *type, int spaces)\n     {\n       puts_filtered (\" TYPE_PROTOTYPED\");\n     }\n-  if (TYPE_VARARGS (type))\n+  if (type->has_varargs ())\n     {\n       puts_filtered (\" TYPE_VARARGS\");\n     }"
    },
    {
      "sha": "86d2f8cd9032115eb638904537827e769100e1c8",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -216,11 +216,6 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_ENDIANITY_NOT_DEFAULT(t) (TYPE_MAIN_TYPE (t)->flag_endianity_not_default)\n \n-/* * FIXME drow/2002-06-03:  Only used for methods, but applies as well\n-   to functions.  */\n-\n-#define TYPE_VARARGS(t)\t\t((t)->has_varargs ())\n-\n /* * Identify a vector type.  Gcc is handling this by adding an extra\n    attribute to the array type.  We slurp that in as a new flag of a\n    type.  This is used only in dwarf2read.c.  */\n@@ -1108,6 +1103,9 @@ struct type\n     this->main_type->m_flag_prototyped = is_prototyped;\n   }\n \n+  /* FIXME drow/2002-06-03:  Only used for methods, but applies as well\n+     to functions.  */\n+\n   bool has_varargs () const\n   {\n     return this->main_type->m_flag_varargs;"
    },
    {
      "sha": "fc90797f6d0372466111eb52c88e035f4fafc623",
      "filename": "gdb/nds32-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/nds32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/nds32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nds32-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -1495,7 +1495,7 @@ nds32_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t For ABI2FP+, the caller pushes only named arguments in registers\n \t and pushes all unnamed arguments in stack.  */\n \n-      if (abi_use_fpr && TYPE_VARARGS (func_type)\n+      if (abi_use_fpr && func_type->has_varargs ()\n \t  && i >= func_type->num_fields ())\n \tgoto use_stack;\n "
    },
    {
      "sha": "6ba6503864fe7fc3a6e3f7aa2628b95685c3fc65",
      "filename": "gdb/or1k-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/or1k-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/or1k-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -635,7 +635,7 @@ or1k_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n       int len = TYPE_LENGTH (arg_type);\n       enum type_code typecode = arg_type->code ();\n \n-      if (TYPE_VARARGS (func_type) && argnum >= func_type->num_fields ())\n+      if (func_type->has_varargs () && argnum >= func_type->num_fields ())\n \tbreak; /* end or regular args, varargs go to stack.  */\n \n       /* Extract the value, either a reference or the data.  */"
    },
    {
      "sha": "a79b5f5b0cf628e9207a22c496f14bac4647efa6",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -2589,7 +2589,7 @@ riscv_push_dummy_call (struct gdbarch *gdbarch,\n       arg_type = check_typedef (value_type (arg_value));\n \n       riscv_arg_location (gdbarch, info, &call_info, arg_type,\n-\t\t\t  TYPE_VARARGS (ftype) && i >= ftype->num_fields ());\n+\t\t\t  ftype->has_varargs () && i >= ftype->num_fields ());\n \n       if (info->type != arg_type)\n \targ_value = value_cast (info->type, arg_value);"
    },
    {
      "sha": "b8ab59bd207b32152722fa3356e11159a833d4ba",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -779,7 +779,7 @@ rust_internal_print_type (struct type *type, const char *varstring,\n \n     case TYPE_CODE_FUNC:\n       /* Delegate varargs to the C printer.  */\n-      if (TYPE_VARARGS (type))\n+      if (type->has_varargs ())\n \tgoto c_printer;\n \n       fputs_filtered (\"fn \", stream);"
    },
    {
      "sha": "6401ef236c8be7f438be52bf673bbd7590f1d98f",
      "filename": "gdb/rx-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/rx-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/rx-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rx-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -686,7 +686,7 @@ rx_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n      requiring multiple registers, etc.  We rely instead on the value\n      of the ``arg_reg'' variable to get these other details correct.  */\n \n-  if (TYPE_VARARGS (func_type))\n+  if (func_type->has_varargs ())\n     num_register_candidate_args = func_type->num_fields () - 1;\n   else\n     num_register_candidate_args = 4;"
    },
    {
      "sha": "efe650ae03613b5cc7d5dde7fb58f5a17d66c8ac",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -1939,7 +1939,7 @@ s390_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n      and arg_state.argp with the size of the parameter area.  */\n   for (i = 0; i < nargs; i++)\n     s390_handle_arg (&arg_state, args[i], tdep, word_size, byte_order,\n-\t\t     TYPE_VARARGS (ftype) && i >= ftype->num_fields ());\n+\t\t     ftype->has_varargs () && i >= ftype->num_fields ());\n \n   param_area_start = align_down (arg_state.copy - arg_state.argp, 8);\n \n@@ -1966,7 +1966,7 @@ s390_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   /* Write all parameters.  */\n   for (i = 0; i < nargs; i++)\n     s390_handle_arg (&arg_state, args[i], tdep, word_size, byte_order,\n-\t\t     TYPE_VARARGS (ftype) && i >= ftype->num_fields ());\n+\t\t     ftype->has_varargs () && i >= ftype->num_fields ());\n \n   /* Store return PSWA.  In 31-bit mode, keep addressing mode bit.  */\n   if (word_size == 4)"
    },
    {
      "sha": "2c3342156f41dbb11f2a1ff4a7c0723ddcae19b1",
      "filename": "gdb/sh-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/sh-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/sh-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sh-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -1083,7 +1083,7 @@ sh_push_dummy_call_fpu (struct gdbarch *gdbarch,\n      non-vararg argument to be on the stack, no matter how many\n      registers have been used so far.  */\n   if (sh_is_renesas_calling_convention (func_type)\n-      && TYPE_VARARGS (func_type))\n+      && func_type->has_varargs ())\n     last_reg_arg = func_type->num_fields () - 2;\n \n   /* First force sp to a 4-byte alignment.  */\n@@ -1224,7 +1224,7 @@ sh_push_dummy_call_nofpu (struct gdbarch *gdbarch,\n      non-vararg argument to be on the stack, no matter how many\n      registers have been used so far.  */\n   if (sh_is_renesas_calling_convention (func_type)\n-      && TYPE_VARARGS (func_type))\n+      && func_type->has_varargs ())\n     last_reg_arg = func_type->num_fields () - 2;\n \n   /* First force sp to a 4-byte alignment.  */"
    },
    {
      "sha": "4227e716622a03d01421f17eba490cc24e55396c",
      "filename": "gdb/tic6x-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/tic6x-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/tic6x-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tic6x-tdep.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -889,7 +889,7 @@ tic6x_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \n   /* For a variadic C function, the last explicitly declared argument and all\n      remaining arguments are passed on the stack.  */\n-  if (TYPE_VARARGS (func_type))\n+  if (func_type->has_varargs ())\n     first_arg_on_stack = func_type->num_fields () - 1;\n \n   /* Now make space on the stack for the args.  */"
    },
    {
      "sha": "aba4c70d45e2c437885cc6498231f98f44afa91d",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a409645d13f6cddef4827cf7240c01ec3e09559c/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=a409645d13f6cddef4827cf7240c01ec3e09559c",
      "patch": "@@ -2010,7 +2010,7 @@ search_struct_method (const char *name, struct value **arg1p,\n \t    while (j >= 0)\n \t      {\n \t\tif (!typecmp (TYPE_FN_FIELD_STATIC_P (f, j),\n-\t\t\t      TYPE_VARARGS (TYPE_FN_FIELD_TYPE (f, j)),\n+\t\t\t      TYPE_FN_FIELD_TYPE (f, j)->has_varargs (),\n \t\t\t      TYPE_FN_FIELD_TYPE (f, j)->num_fields (),\n \t\t\t      TYPE_FN_FIELD_ARGS (f, j), args))\n \t\t  {"
    }
  ]
}