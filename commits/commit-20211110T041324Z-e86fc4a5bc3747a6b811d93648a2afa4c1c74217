{
  "sha": "e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
  "node_id": "C_kwDOANOeidoAKGU4NmZjNGE1YmMzNzQ3YTZiODExZDkzNjQ4YTJhZmE0YzFjNzQyMTc",
  "commit": {
    "author": {
      "name": "Cl\u00e9ment Chigot",
      "email": "clement.chigot@atos.net",
      "date": "2021-10-15T14:12:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-10T04:13:24Z"
    },
    "message": "PR 28447: implement multiple parameters for .file on XCOFF\n\nOn XCOFF, \".file\" pseudo-op allows 3 extras parameters to provide\nadditional information to AIX linker, or its debugger. These are\nstored in auxiliary entries of the C_FILE symbol.\n\nbfd/\n\tPR 28447\n\t* coffcode.h (combined_entry_type): Add extrap field.\n\t(coff_bigobj_swap_aux_in): Adjust names of x_file fields.\n\t(coff_bigobj_swap_aux_out): Likewise.\n\t* coffgen.c (coff_write_auxent_fname): New function.\n\t(coff_fix_symbol_name): Write x_file using\n\t coff_write_auxent_fname.\n\t(coff_write_symbol): Likewise.\n\t(coff_write_symbols): Add C_FILE auxiliary entries to\n\tstring table if needed.\n\t(coff_get_normalized_symtab): Adjust names of x_file fields.\n\tNormalize C_FILE auxiliary entries.\n\t(coff_print_symbol): Print C_FILE auxiliary entries.\n\t* coff-rs6000.c (_bfd_xcoff_swap_aux_in): Adjust names of\n\tx_file fields.\n\t(_bfd_xcoff_swap_aux_out): Likewise.\n\t* coff64-rs6000.c (_bfd_xcoff64_swap_aux_in): Likewise.\n\t(_bfd_xcoff64_swap_aux_out): Likewise.\n\t* cofflink.c (_bfd_coff_final_link): Likewise.\n\t(_bfd_coff_link_input_bfd): Likewise.\n\t* coffswap.h (coff_swap_aux_in): Likewise.\n\t* peXXigen.c (_bfd_XXi_swap_aux_in): Likewise.\n\t(_bfd_XXi_swap_aux_out): Likewise.\n\t* xcofflink.c (xcoff_link_input_bfd): Likewise.\n\t* libcoff.h: Regenerate.\ngas/\n\t* config/tc-ppc.c (ppc_file): New function.\n\t* config/tc-ppc.h (OBJ_COFF_MAX_AUXENTRIES): Change to 4.\n\t* testsuite/gas/ppc/aix.exp: Add tests.\n\t* testsuite/gas/ppc/xcoff-file-32.d: New test.\n\t* testsuite/gas/ppc/xcoff-file-64.d: New test.\n\t* testsuite/gas/ppc/xcoff-file.s: New test.\ninclude/\n\t* coff/internal.h (union internal_auxent): Change x_file to be a\n\t  struct instead of a union. Add x_ftype field.\n\t* coff/rs6000.h (union external_auxent): Add x_resv field.\n\t* coff/xcoff.h (XFT_FN): New define.\n\t(XFT_CT): Likewise.\n\t(XFT_CV): Likewise.\n\t(XFT_CD): Likewise.",
    "tree": {
      "sha": "00a19a31cfdddd830170cb363782279a0d39c212",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/00a19a31cfdddd830170cb363782279a0d39c212"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/comments",
  "author": {
    "login": "Helflym",
    "id": 23002587,
    "node_id": "MDQ6VXNlcjIzMDAyNTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/23002587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Helflym",
    "html_url": "https://github.com/Helflym",
    "followers_url": "https://api.github.com/users/Helflym/followers",
    "following_url": "https://api.github.com/users/Helflym/following{/other_user}",
    "gists_url": "https://api.github.com/users/Helflym/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Helflym/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Helflym/subscriptions",
    "organizations_url": "https://api.github.com/users/Helflym/orgs",
    "repos_url": "https://api.github.com/users/Helflym/repos",
    "events_url": "https://api.github.com/users/Helflym/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Helflym/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f493b71179ab70d5e278234cb763eede55d44e61",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f493b71179ab70d5e278234cb763eede55d44e61",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f493b71179ab70d5e278234cb763eede55d44e61"
    }
  ],
  "stats": {
    "total": 355,
    "additions": 273,
    "deletions": 82
  },
  "files": [
    {
      "sha": "1cc2162e7d819c7dddd81944e8e04214f09982a5",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -489,12 +489,13 @@ _bfd_xcoff_swap_aux_in (bfd *abfd, void * ext1, int type ATTRIBUTE_UNUSED,\n     case C_FILE:\n       if (ext->x_file.x_n.x_fname[0] == 0)\n \t{\n-\t  in->x_file.x_n.x_zeroes = 0;\n-\t  in->x_file.x_n.x_offset =\n+\t  in->x_file.x_n.x_n.x_zeroes = 0;\n+\t  in->x_file.x_n.x_n.x_offset =\n \t    H_GET_32 (abfd, ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\tmemcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n+\tmemcpy (in->x_file.x_n.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n+      in->x_file.x_ftype = H_GET_8 (abfd, ext->x_file.x_ftype);\n       break;\n \n       /* RS/6000 \"csect\" auxents.\n@@ -573,14 +574,15 @@ _bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type ATTRIBUTE_UNUSED,\n       break;\n \n     case C_FILE:\n-      if (in->x_file.x_fname[0] == 0)\n+      if (in->x_file.x_n.x_fname[0] == 0)\n \t{\n \t  H_PUT_32 (abfd, 0, ext->x_file.x_n.x_n.x_zeroes);\n-\t  H_PUT_32 (abfd, in->x_file.x_n.x_offset,\n+\t  H_PUT_32 (abfd, in->x_file.x_n.x_n.x_offset,\n \t\t    ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\tmemcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);\n+\tmemcpy (ext->x_file.x_n.x_fname, in->x_file.x_n.x_fname, FILNMLEN);\n+      H_PUT_8 (abfd, in->x_file.x_ftype, ext->x_file.x_ftype);\n       break;\n \n       /* RS/6000 \"csect\" auxents */"
    },
    {
      "sha": "95a31b606c8440a7bfe8c2c9f70dd416a7d1c8d1",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -386,12 +386,13 @@ _bfd_xcoff64_swap_aux_in (bfd *abfd, void *ext1, int type ATTRIBUTE_UNUSED,\n \n       if (ext->x_file.x_n.x_n.x_zeroes[0] == 0)\n \t{\n-\t  in->x_file.x_n.x_zeroes = 0;\n-\t  in->x_file.x_n.x_offset =\n+\t  in->x_file.x_n.x_n.x_zeroes = 0;\n+\t  in->x_file.x_n.x_n.x_offset =\n \t    H_GET_32 (abfd, ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\tmemcpy (in->x_file.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n+\tmemcpy (in->x_file.x_n.x_fname, ext->x_file.x_n.x_fname, FILNMLEN);\n+      in->x_file.x_ftype = H_GET_8 (abfd, ext->x_file.x_ftype);\n       break;\n \n       /* RS/6000 \"csect\" auxents.\n@@ -499,14 +500,15 @@ _bfd_xcoff64_swap_aux_out (bfd *abfd, void *inp, int type ATTRIBUTE_UNUSED,\n       break;\n \n     case C_FILE:\n-      if (in->x_file.x_n.x_zeroes == 0)\n+      if (in->x_file.x_n.x_n.x_zeroes == 0)\n \t{\n \t  H_PUT_32 (abfd, 0, ext->x_file.x_n.x_n.x_zeroes);\n-\t  H_PUT_32 (abfd, in->x_file.x_n.x_offset,\n+\t  H_PUT_32 (abfd, in->x_file.x_n.x_n.x_offset,\n \t\t    ext->x_file.x_n.x_n.x_offset);\n \t}\n       else\n-\tmemcpy (ext->x_file.x_n.x_fname, in->x_file.x_fname, FILNMLEN);\n+\tmemcpy (ext->x_file.x_n.x_fname, in->x_file.x_n.x_fname, FILNMLEN);\n+      H_PUT_8 (abfd, in->x_file.x_ftype, ext->x_file.x_ftype);\n       H_PUT_8 (abfd, _AUX_FILE, ext->x_file.x_auxtype);\n       break;\n "
    },
    {
      "sha": "f0b73a988810bd72bb49aef982ccdf9d7ccaa383",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -326,6 +326,10 @@ CODE_FRAGMENT\n .\n . {* Selector for the union above.  *}\n . bool is_sym;\n+.\n+. {* An extra pointer which can used by format based on COFF (like XCOFF)\n+.    to provide extra information to their backend.  *}\n+. void *extrap;\n .} combined_entry_type;\n .\n .\n@@ -5663,11 +5667,11 @@ coff_bigobj_swap_aux_in (bfd *abfd,\n       if (numaux > 1)\n \t{\n \t  if (indx == 0)\n-\t    memcpy (in->x_file.x_fname, ext->File.Name,\n+\t    memcpy (in->x_file.x_n.x_fname, ext->File.Name,\n \t\t    numaux * sizeof (AUXENT_BIGOBJ));\n \t}\n       else\n-\tmemcpy (in->x_file.x_fname, ext->File.Name, sizeof (ext->File.Name));\n+\tmemcpy (in->x_file.x_n.x_fname, ext->File.Name, sizeof (ext->File.Name));\n       break;\n \n     case C_STAT:\n@@ -5712,7 +5716,7 @@ coff_bigobj_swap_aux_out (bfd * abfd,\n   switch (in_class)\n     {\n     case C_FILE:\n-      memcpy (ext->File.Name, in->x_file.x_fname, sizeof (ext->File.Name));\n+      memcpy (ext->File.Name, in->x_file.x_n.x_fname, sizeof (ext->File.Name));\n \n       return AUXESZ;\n "
    },
    {
      "sha": "40f1ac718e48c74f1a95576a6ed9aa2c8a79f2af",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 105,
      "deletions": 29,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -847,6 +847,34 @@ coff_mangle_symbols (bfd *bfd_ptr)\n     }\n }\n \n+static void\n+coff_write_auxent_fname (bfd *abfd,\n+\t\t\t char *str,\n+\t\t\t union internal_auxent *auxent,\n+\t\t\t bfd_size_type *string_size_p)\n+{\n+  unsigned int str_length = strlen (str);\n+  unsigned int filnmlen = bfd_coff_filnmlen (abfd);\n+\n+  if (bfd_coff_long_filenames (abfd))\n+    {\n+      if (str_length <= filnmlen)\n+\tstrncpy (auxent->x_file.x_n.x_fname, str, filnmlen);\n+      else\n+\t{\n+\t  auxent->x_file.x_n.x_n.x_offset = *string_size_p + STRING_SIZE_SIZE;\n+\t  auxent->x_file.x_n.x_n.x_zeroes = 0;\n+\t  *string_size_p += str_length + 1;\n+\t}\n+    }\n+  else\n+    {\n+      strncpy (auxent->x_file.x_n.x_fname, str, filnmlen);\n+      if (str_length > filnmlen)\n+\tstr[filnmlen] = '\\0';\n+    }\n+}\n+\n static void\n coff_fix_symbol_name (bfd *abfd,\n \t\t      asymbol *symbol,\n@@ -856,7 +884,6 @@ coff_fix_symbol_name (bfd *abfd,\n \t\t      bfd_size_type *debug_string_size_p)\n {\n   unsigned int name_length;\n-  union internal_auxent *auxent;\n   char *name = (char *) (symbol->name);\n \n   if (name == NULL)\n@@ -871,8 +898,6 @@ coff_fix_symbol_name (bfd *abfd,\n   if (native->u.syment.n_sclass == C_FILE\n       && native->u.syment.n_numaux > 0)\n     {\n-      unsigned int filnmlen;\n-\n       if (bfd_coff_force_symnames_in_strings (abfd))\n \t{\n \t  native->u.syment._n._n_n._n_offset =\n@@ -884,27 +909,8 @@ coff_fix_symbol_name (bfd *abfd,\n \tstrncpy (native->u.syment._n._n_name, \".file\", SYMNMLEN);\n \n       BFD_ASSERT (! (native + 1)->is_sym);\n-      auxent = &(native + 1)->u.auxent;\n-\n-      filnmlen = bfd_coff_filnmlen (abfd);\n-\n-      if (bfd_coff_long_filenames (abfd))\n-\t{\n-\t  if (name_length <= filnmlen)\n-\t    strncpy (auxent->x_file.x_fname, name, filnmlen);\n-\t  else\n-\t    {\n-\t      auxent->x_file.x_n.x_offset = *string_size_p + STRING_SIZE_SIZE;\n-\t      auxent->x_file.x_n.x_zeroes = 0;\n-\t      *string_size_p += name_length + 1;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  strncpy (auxent->x_file.x_fname, name, filnmlen);\n-\t  if (name_length > filnmlen)\n-\t    name[filnmlen] = '\\0';\n-\t}\n+      coff_write_auxent_fname (abfd, name, &(native + 1)->u.auxent,\n+\t\t\t       string_size_p);\n     }\n   else\n     {\n@@ -1029,6 +1035,11 @@ coff_write_symbol (bfd *abfd,\n       for (j = 0; j < native->u.syment.n_numaux; j++)\n \t{\n \t  BFD_ASSERT (! (native + j + 1)->is_sym);\n+\n+\t  if (native->u.syment.n_sclass == C_FILE && j > 0)\n+\t    coff_write_auxent_fname (abfd, (char *) (native + j + 1)->extrap,\n+\t\t\t\t     &(native + j + 1)->u.auxent, string_size_p);\n+\n \t  bfd_coff_swap_aux_out (abfd,\n \t\t\t\t &((native + j + 1)->u.auxent),\n \t\t\t\t type, n_sclass, (int) j,\n@@ -1358,6 +1369,7 @@ coff_write_symbols (bfd *abfd)\n \t  size_t name_length = strlen (q->name);\n \t  coff_symbol_type *c_symbol = coff_symbol_from (q);\n \t  size_t maxlen;\n+\t  bool is_c_file = false;\n \n \t  /* Figure out whether the symbol name should go in the string\n \t     table.  Symbol names that are short enough are stored\n@@ -1384,6 +1396,7 @@ coff_write_symbols (bfd *abfd)\n \t  else if (c_symbol->native->u.syment.n_sclass == C_FILE\n \t\t   && c_symbol->native->u.syment.n_numaux > 0)\n \t    {\n+\t      is_c_file=true;\n \t      if (bfd_coff_force_symnames_in_strings (abfd))\n \t\t{\n \t\t  if (bfd_bwrite (\".file\", (bfd_size_type) 6, abfd) != 6)\n@@ -1400,6 +1413,30 @@ coff_write_symbols (bfd *abfd)\n \t\t\t     abfd) != name_length + 1)\n \t\treturn false;\n \t    }\n+\n+\t  /* Add strings for C_FILE aux entries. */\n+\t  if (is_c_file\n+\t      && c_symbol->native->u.syment.n_numaux > 1)\n+\t    {\n+\t      for (int j = 1; j < c_symbol->native->u.syment.n_numaux; j++)\n+\t\t{\n+\t\t  char *str;\n+\t\t  size_t str_length;\n+\n+\t\t  if (c_symbol->native[j + 1].u.auxent.x_file.x_n.x_fname[0] != 0)\n+\t\t    continue;\n+\n+\t\t  str = (char *) c_symbol->native[j + 1].extrap;\n+\t\t  str_length = strlen (str);\n+\t\t  if (str_length > maxlen)\n+\t\t    {\n+\t\t      if (bfd_bwrite ((void *) (str), (bfd_size_type) str_length + 1,\n+\t\t\t\t      abfd) != str_length + 1)\n+\t\t\treturn false;\n+\t\t    }\n+\n+\t\t}\n+\t    }\n \t}\n     }\n   else\n@@ -1872,7 +1909,7 @@ coff_get_normalized_symtab (bfd *abfd)\n \t     the text \".file\" is redundant.  */\n \t  BFD_ASSERT (! aux->is_sym);\n \n-\t  if (aux->u.auxent.x_file.x_n.x_zeroes == 0)\n+\t  if (aux->u.auxent.x_file.x_n.x_n.x_zeroes == 0)\n \t    {\n \t      /* The filename is a long one, point into the string table.  */\n \t      if (string_table == NULL)\n@@ -1882,12 +1919,12 @@ coff_get_normalized_symtab (bfd *abfd)\n \t\t    return NULL;\n \t\t}\n \n-\t      if ((bfd_size_type)(aux->u.auxent.x_file.x_n.x_offset)\n+\t      if ((bfd_size_type)(aux->u.auxent.x_file.x_n.x_n.x_offset)\n \t\t  >= obj_coff_strings_len (abfd))\n \t\tinternal_ptr->u.syment._n._n_n._n_offset = (bfd_hostptr_t) _(\"<corrupt>\");\n \t      else\n \t\tinternal_ptr->u.syment._n._n_n._n_offset =\n-\t\t  (bfd_hostptr_t) (string_table + (aux->u.auxent.x_file.x_n.x_offset));\n+\t\t  (bfd_hostptr_t) (string_table + (aux->u.auxent.x_file.x_n.x_n.x_offset));\n \t    }\n \t  else\n \t    {\n@@ -1899,15 +1936,48 @@ coff_get_normalized_symtab (bfd *abfd)\n \t\tinternal_ptr->u.syment._n._n_n._n_offset =\n \t\t  (bfd_hostptr_t)\n \t\t  copy_name (abfd,\n-\t\t\t     aux->u.auxent.x_file.x_fname,\n+\t\t\t     aux->u.auxent.x_file.x_n.x_fname,\n \t\t\t     internal_ptr->u.syment.n_numaux * symesz);\n \t      else\n \t\tinternal_ptr->u.syment._n._n_n._n_offset =\n \t\t  ((bfd_hostptr_t)\n \t\t   copy_name (abfd,\n-\t\t\t      aux->u.auxent.x_file.x_fname,\n+\t\t\t      aux->u.auxent.x_file.x_n.x_fname,\n \t\t\t      (size_t) bfd_coff_filnmlen (abfd)));\n \t    }\n+\n+\t  /* Normalize other strings available in C_FILE aux entries.  */\n+\t  if (!coff_data (abfd)->pe)\n+\t    for (int numaux = 1; numaux < internal_ptr->u.syment.n_numaux; numaux++)\n+\t      {\n+\t\taux = internal_ptr + numaux + 1;\n+\t\tBFD_ASSERT (! aux->is_sym);\n+\n+\t\tif (aux->u.auxent.x_file.x_n.x_n.x_zeroes == 0)\n+\t\t  {\n+\t\t    /* The string information is a long one, point into the string table.  */\n+\t\t    if (string_table == NULL)\n+\t\t      {\n+\t\t\tstring_table = _bfd_coff_read_string_table (abfd);\n+\t\t\tif (string_table == NULL)\n+\t\t\t  return NULL;\n+\t\t      }\n+\n+\t\t    if ((bfd_size_type)(aux->u.auxent.x_file.x_n.x_n.x_offset)\n+\t\t\t>= obj_coff_strings_len (abfd))\n+\t\t      aux->u.auxent.x_file.x_n.x_n.x_offset = (bfd_hostptr_t) _(\"<corrupt>\");\n+\t\t    else\n+\t\t      aux->u.auxent.x_file.x_n.x_n.x_offset =\n+\t\t\t(bfd_hostptr_t) (string_table + (aux->u.auxent.x_file.x_n.x_n.x_offset));\n+\t\t  }\n+\t\telse\n+\t\t  aux->u.auxent.x_file.x_n.x_n.x_offset =\n+\t\t    ((bfd_hostptr_t)\n+\t\t     copy_name (abfd,\n+\t\t\t\taux->u.auxent.x_file.x_n.x_fname,\n+\t\t\t\t(size_t) bfd_coff_filnmlen (abfd)));\n+\t      }\n+\n \t}\n       else\n \t{\n@@ -2135,6 +2205,12 @@ coff_print_symbol (bfd *abfd,\n \t\t{\n \t\tcase C_FILE:\n \t\t  fprintf (file, \"File \");\n+\t\t  /* Add additional information if this isn't the filename\n+\t\t     auxiliary entry.  */\n+\t\t  if (aux)\n+\t\t    fprintf (file, \"ftype %d fname \\\"%s\\\"\",\n+\t\t\t     auxp->u.auxent.x_file.x_ftype,\n+\t\t\t     (char *) auxp->u.auxent.x_file.x_n.x_n.x_offset);\n \t\t  break;\n \n \t\tcase C_DWARF:"
    },
    {
      "sha": "67d9c62b0b44fc2bb10c1ea3b11764b1f96faecc",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -963,7 +963,7 @@ _bfd_coff_final_link (bfd *abfd,\n \t\t  else\n \t\t    {\n \t\t      BFD_ASSERT (isym.n_numaux == 1);\n-\t\t      iaux.x_file.x_n.x_offset = STRING_SIZE_SIZE + indx;\n+\t\t      iaux.x_file.x_n.x_n.x_offset = STRING_SIZE_SIZE + indx;\n \t\t      bfd_coff_swap_aux_out (abfd, &iaux, isym.n_type, C_FILE,\n \t\t\t\t\t     0, 1, flaginfo.outsyms + symesz);\n \t\t      if (bfd_seek (abfd, pos + symesz, SEEK_SET) != 0\n@@ -2006,29 +2006,29 @@ _bfd_coff_link_input_bfd (struct coff_final_link_info *flaginfo, bfd *input_bfd)\n \t\t{\n \t\t  /* If this is a long filename, we must put it in the\n \t\t     string table.  */\n-\t\t  if (auxp->x_file.x_n.x_zeroes == 0\n-\t\t      && auxp->x_file.x_n.x_offset != 0)\n+\t\t  if (auxp->x_file.x_n.x_n.x_zeroes == 0\n+\t\t      && auxp->x_file.x_n.x_n.x_offset != 0)\n \t\t    {\n \t\t      const char *filename;\n \t\t      bfd_size_type indx;\n \n-\t\t      BFD_ASSERT (auxp->x_file.x_n.x_offset\n+\t\t      BFD_ASSERT (auxp->x_file.x_n.x_n.x_offset\n \t\t\t\t  >= STRING_SIZE_SIZE);\n \t\t      if (strings == NULL)\n \t\t\t{\n \t\t\t  strings = _bfd_coff_read_string_table (input_bfd);\n \t\t\t  if (strings == NULL)\n \t\t\t    return false;\n \t\t\t}\n-\t\t      if ((bfd_size_type) auxp->x_file.x_n.x_offset >= obj_coff_strings_len (input_bfd))\n+\t\t      if ((bfd_size_type) auxp->x_file.x_n.x_n.x_offset >= obj_coff_strings_len (input_bfd))\n \t\t\tfilename = _(\"<corrupt>\");\n \t\t      else\n-\t\t\tfilename = strings + auxp->x_file.x_n.x_offset;\n+\t\t\tfilename = strings + auxp->x_file.x_n.x_n.x_offset;\n \t\t      indx = _bfd_stringtab_add (flaginfo->strtab, filename,\n \t\t\t\t\t\t hash, copy);\n \t\t      if (indx == (bfd_size_type) -1)\n \t\t\treturn false;\n-\t\t      auxp->x_file.x_n.x_offset = STRING_SIZE_SIZE + indx;\n+\t\t      auxp->x_file.x_n.x_n.x_offset = STRING_SIZE_SIZE + indx;\n \t\t    }\n \t\t}\n \t      else if ((isymp->n_sclass != C_STAT || isymp->n_type != T_NULL)"
    },
    {
      "sha": "a8bd932daf7e08e97dffd4bdb1611d74d96c26ee",
      "filename": "bfd/coffswap.h",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coffswap.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/coffswap.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffswap.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -418,8 +418,8 @@ coff_swap_aux_in (bfd *abfd,\n     case C_FILE:\n       if (ext->x_file.x_fname[0] == 0)\n \t{\n-\t  in->x_file.x_n.x_zeroes = 0;\n-\t  in->x_file.x_n.x_offset = H_GET_32 (abfd, ext->x_file.x_n.x_offset);\n+\t  in->x_file.x_n.x_n.x_zeroes = 0;\n+\t  in->x_file.x_n.x_n.x_offset = H_GET_32 (abfd, ext->x_file.x_n.x_offset);\n \t}\n       else\n \t{\n@@ -429,11 +429,11 @@ coff_swap_aux_in (bfd *abfd,\n \t  if (numaux > 1 && coff_data (abfd)->pe)\n \t    {\n \t      if (indx == 0)\n-\t\tmemcpy (in->x_file.x_fname, ext->x_file.x_fname,\n+\t\tmemcpy (in->x_file.x_n.x_fname, ext->x_file.x_fname,\n \t\t\tnumaux * sizeof (AUXENT));\n \t    }\n \t  else\n-\t    memcpy (in->x_file.x_fname, ext->x_file.x_fname, FILNMLEN);\n+\t    memcpy (in->x_file.x_n.x_fname, ext->x_file.x_fname, FILNMLEN);\n #endif\n \t}\n       goto end;\n@@ -522,17 +522,17 @@ coff_swap_aux_out (bfd * abfd,\n   switch (in_class)\n     {\n     case C_FILE:\n-      if (in->x_file.x_fname[0] == 0)\n+      if (in->x_file.x_n.x_fname[0] == 0)\n \t{\n \t  H_PUT_32 (abfd, 0, ext->x_file.x_n.x_zeroes);\n-\t  H_PUT_32 (abfd, in->x_file.x_n.x_offset, ext->x_file.x_n.x_offset);\n+\t  H_PUT_32 (abfd, in->x_file.x_n.x_n.x_offset, ext->x_file.x_n.x_offset);\n \t}\n       else\n \t{\n #if FILNMLEN != E_FILNMLEN\n #error we need to cope with truncating or extending FILNMLEN\n #else\n-\t  memcpy (ext->x_file.x_fname, in->x_file.x_fname, FILNMLEN);\n+\t  memcpy (ext->x_file.x_fname, in->x_file.x_n.x_fname, FILNMLEN);\n #endif\n \t}\n       goto end;"
    },
    {
      "sha": "1b4f988bb0be810cdfd5bcc4b7bed457a6f185ca",
      "filename": "bfd/libcoff.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/libcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/libcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libcoff.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -658,6 +658,10 @@ typedef struct coff_ptr_struct\n \n  /* Selector for the union above.  */\n  bool is_sym;\n+\n+ /* An extra pointer which can used by format based on COFF (like XCOFF)\n+    to provide extra information to their backend.  */\n+ void *extrap;\n } combined_entry_type;\n \n "
    },
    {
      "sha": "e2a9cbb65c1925451d932530d89ee880b1374eb4",
      "filename": "bfd/peXXigen.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/peXXigen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/peXXigen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peXXigen.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -298,11 +298,11 @@ _bfd_XXi_swap_aux_in (bfd *\tabfd,\n     case C_FILE:\n       if (ext->x_file.x_fname[0] == 0)\n \t{\n-\t  in->x_file.x_n.x_zeroes = 0;\n-\t  in->x_file.x_n.x_offset = H_GET_32 (abfd, ext->x_file.x_n.x_offset);\n+\t  in->x_file.x_n.x_n.x_zeroes = 0;\n+\t  in->x_file.x_n.x_n.x_offset = H_GET_32 (abfd, ext->x_file.x_n.x_offset);\n \t}\n       else\n-\tmemcpy (in->x_file.x_fname, ext->x_file.x_fname, FILNMLEN);\n+\tmemcpy (in->x_file.x_n.x_fname, ext->x_file.x_fname, FILNMLEN);\n       return;\n \n     case C_STAT:\n@@ -370,13 +370,13 @@ _bfd_XXi_swap_aux_out (bfd *  abfd,\n   switch (in_class)\n     {\n     case C_FILE:\n-      if (in->x_file.x_fname[0] == 0)\n+      if (in->x_file.x_n.x_fname[0] == 0)\n \t{\n \t  H_PUT_32 (abfd, 0, ext->x_file.x_n.x_zeroes);\n-\t  H_PUT_32 (abfd, in->x_file.x_n.x_offset, ext->x_file.x_n.x_offset);\n+\t  H_PUT_32 (abfd, in->x_file.x_n.x_n.x_offset, ext->x_file.x_n.x_offset);\n \t}\n       else\n-\tmemcpy (ext->x_file.x_fname, in->x_file.x_fname, sizeof (ext->x_file.x_fname));\n+\tmemcpy (ext->x_file.x_fname, in->x_file.x_n.x_fname, sizeof (ext->x_file.x_fname));\n \n       return AUXESZ;\n "
    },
    {
      "sha": "e87ed0e683b5e4380d16c858fc24743f14e30e8e",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -4550,29 +4550,29 @@ xcoff_link_input_bfd (struct xcoff_final_link_info *flinfo,\n \t\t  /* This is the file name (or some comment put in by\n \t\t     the compiler).  If it is long, we must put it in\n \t\t     the string table.  */\n-\t\t  if (aux.x_file.x_n.x_zeroes == 0\n-\t\t      && aux.x_file.x_n.x_offset != 0)\n+\t\t  if (aux.x_file.x_n.x_n.x_zeroes == 0\n+\t\t      && aux.x_file.x_n.x_n.x_offset != 0)\n \t\t    {\n \t\t      const char *filename;\n \t\t      bfd_size_type indx;\n \n-\t\t      BFD_ASSERT (aux.x_file.x_n.x_offset\n+\t\t      BFD_ASSERT (aux.x_file.x_n.x_n.x_offset\n \t\t\t\t  >= STRING_SIZE_SIZE);\n \t\t      if (strings == NULL)\n \t\t\t{\n \t\t\t  strings = _bfd_coff_read_string_table (input_bfd);\n \t\t\t  if (strings == NULL)\n \t\t\t    return false;\n \t\t\t}\n-\t\t      if ((bfd_size_type) aux.x_file.x_n.x_offset >= obj_coff_strings_len (input_bfd))\n+\t\t      if ((bfd_size_type) aux.x_file.x_n.x_n.x_offset >= obj_coff_strings_len (input_bfd))\n \t\t\tfilename = _(\"<corrupt>\");\n \t\t      else\n-\t\t\tfilename = strings + aux.x_file.x_n.x_offset;\n+\t\t\tfilename = strings + aux.x_file.x_n.x_n.x_offset;\n \t\t      indx = _bfd_stringtab_add (flinfo->strtab, filename,\n \t\t\t\t\t\t hash, copy);\n \t\t      if (indx == (bfd_size_type) -1)\n \t\t\treturn false;\n-\t\t      aux.x_file.x_n.x_offset = STRING_SIZE_SIZE + indx;\n+\t\t      aux.x_file.x_n.x_n.x_offset = STRING_SIZE_SIZE + indx;\n \t\t    }\n \t\t}\n \t      else if (CSECT_SYM_P (isymp->n_sclass)"
    },
    {
      "sha": "8750e379158a4e26cdcb2161eaca2912948bcd97",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -107,6 +107,7 @@ static void ppc_es (int);\n static void ppc_csect (int);\n static void ppc_dwsect (int);\n static void ppc_change_csect (symbolS *, offsetT);\n+static void ppc_file (int);\n static void ppc_function (int);\n static void ppc_extern (int);\n static void ppc_lglobl (int);\n@@ -227,6 +228,7 @@ const pseudo_typeS md_pseudo_table[] =\n   { \"ei\",\tppc_biei,\t1 },\n   { \"es\",\tppc_es,\t\t0 },\n   { \"extern\",\tppc_extern,\t0 },\n+  { \"file\",\tppc_file,\t0 },\n   { \"function\",\tppc_function,\t0 },\n   { \"lglobl\",\tppc_lglobl,\t0 },\n   { \"ref\",\tppc_ref,\t0 },\n@@ -5073,6 +5075,67 @@ ppc_stabx (int ignore ATTRIBUTE_UNUSED)\n   demand_empty_rest_of_line ();\n }\n \n+/* The .file pseudo-op. On XCOFF, .file can have several parameters\n+   which are being added to the symbol table to provide additional\n+   information.  */\n+\n+static void\n+ppc_file (int ignore ATTRIBUTE_UNUSED)\n+{\n+  char *sfname, *s1 = NULL, *s2 = NULL, *s3 = NULL;\n+  int length, auxnb = 1;\n+\n+  /* Some assemblers tolerate immediately following '\"'.  */\n+  if ((sfname = demand_copy_string (&length)) != 0)\n+    {\n+      coff_symbol_type *coffsym;\n+      if (*input_line_pointer == ',')\n+\t{\n+\t  ++input_line_pointer;\n+\t  s1 = demand_copy_string (&length);\n+\t  auxnb++;\n+\n+\t  if (*input_line_pointer == ',')\n+\t    {\n+\t      ++input_line_pointer;\n+\t      s2 = demand_copy_string (&length);\n+\t      auxnb++;\n+\n+\t      if (*input_line_pointer == ',')\n+\t\t{\n+\t\t  ++input_line_pointer;\n+\t\t  s3 = demand_copy_string (&length);\n+\t\t  auxnb++;\n+\t\t}\n+\t    }\n+\t}\n+\n+      /* Use coff dot_file creation and adjust auxiliary entries.  */\n+      c_dot_file_symbol (sfname, 0);\n+      S_SET_NUMBER_AUXILIARY (symbol_rootP, auxnb);\n+      coffsym = coffsymbol (symbol_get_bfdsym (symbol_rootP));\n+      coffsym->native[1].u.auxent.x_file.x_ftype = XFT_FN;\n+\n+      if (s1)\n+\t{\n+\t  coffsym->native[2].u.auxent.x_file.x_ftype = XFT_CT;\n+\t  coffsym->native[2].extrap = s1;\n+\t}\n+      if (s2)\n+\t{\n+\t  coffsym->native[3].u.auxent.x_file.x_ftype = XFT_CV;\n+\t  coffsym->native[3].extrap = s2;\n+\t}\n+      if (s3)\n+\t{\n+\t  coffsym->native[4].u.auxent.x_file.x_ftype = XFT_CD;\n+\t  coffsym->native[4].extrap = s3;\n+\t}\n+\n+      demand_empty_rest_of_line ();\n+    }\n+}\n+\n /* The .function pseudo-op.  This takes several arguments.  The first\n    argument seems to be the external name of the symbol.  The second\n    argument seems to be the label for the start of the function.  gcc"
    },
    {
      "sha": "2d0a8865d98c895feaa31533258e1afd865ad0e3",
      "filename": "gas/config/tc-ppc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/config/tc-ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/config/tc-ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -146,7 +146,7 @@ struct ppc_tc_sy\n #define TC_SYMFIELD_TYPE struct ppc_tc_sy\n \n /* We need an additional auxent for function symbols.  */\n-#define OBJ_COFF_MAX_AUXENTRIES 2\n+#define OBJ_COFF_MAX_AUXENTRIES 4\n \n /* Square and curly brackets are permitted in symbol names.  */\n #define LEX_BR 3"
    },
    {
      "sha": "c6d10d5fb84b76586e865b727a6f9dc29ed0b26e",
      "filename": "gas/testsuite/gas/ppc/aix.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/aix.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/aix.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/aix.exp?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -84,4 +84,7 @@ if { [istarget \"powerpc*-*-aix*\"] || [istarget \"rs6000-*-aix*\"] } then {\n \n     run_dump_test \"xcoff-stsym-32\"\n     run_dump_test \"xcoff-stsym-64\"\n+\n+    run_dump_test \"xcoff-file-32\"\n+    run_dump_test \"xcoff-file-64\"\n }"
    },
    {
      "sha": "a831b3b4587758db4885a2beb313ff6bcffe0aca",
      "filename": "gas/testsuite/gas/ppc/xcoff-file-32.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/xcoff-file-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/xcoff-file-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/xcoff-file-32.d?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -0,0 +1,13 @@\n+#as: -a32\n+#source: xcoff-file.s\n+#objdump: -t\n+#name: XCOFF file test (32-bit)\n+\n+.*\n+\n+SYMBOL TABLE:\n+\\[  0\\].*\\(scl 103\\) \\(nx 4\\) .* file.s\n+File \n+File ftype 1 fname \"A long string\"\n+File ftype 2 fname \"short\"\n+File ftype 128 fname \"Another long string inside the strign table.\""
    },
    {
      "sha": "12bb6efc93b3148c2750faeb91da6968aad4beda",
      "filename": "gas/testsuite/gas/ppc/xcoff-file-64.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/xcoff-file-64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/xcoff-file-64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/xcoff-file-64.d?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -0,0 +1,13 @@\n+#as: -a64\n+#source: xcoff-file.s\n+#objdump: -t\n+#name: XCOFF file test (64-bit)\n+\n+.*\n+\n+SYMBOL TABLE:\n+\\[  0\\].*\\(scl 103\\) \\(nx 4\\) .* file.s\n+File \n+File ftype 1 fname \"A long string\"\n+File ftype 2 fname \"short\"\n+File ftype 128 fname \"Another long string inside the strign table.\""
    },
    {
      "sha": "229ab889f4907d0993832f8b8fe66ca75903bf2e",
      "filename": "gas/testsuite/gas/ppc/xcoff-file.s",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/xcoff-file.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/gas/testsuite/gas/ppc/xcoff-file.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/xcoff-file.s?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -0,0 +1 @@\n+.file \"file.s\", \"A long string\", \"short\", \"Another long string inside the strign table.\""
    },
    {
      "sha": "d01af7380c86a9d631038d3f50a432d8d869007b",
      "filename": "include/coff/internal.h",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/include/coff/internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/include/coff/internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/internal.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -578,18 +578,21 @@ union internal_auxent\n     unsigned short x_tvndx;\t/* tv index */\n   }      x_sym;\n \n-  union\n+  struct\n   {\n-    /* PR 17754: We use to FILNMLEN for the size of the x_fname\n-       array, but that causes problems as PE targets use a larger\n-       value.  We cannot use their definition of E_FILNMLEN as this\n-       header can be used without including any PE headers.  */\n-    char x_fname[20];\n-    struct\n-    {\n-      long x_zeroes;\n-      long x_offset;\n-    }      x_n;\n+    union {\n+      /* PR 17754: We use to FILNMLEN for the size of the x_fname\n+\t array, but that causes problems as PE targets use a larger\n+\t value.  We cannot use their definition of E_FILNMLEN as this\n+\t header can be used without including any PE headers.  */\n+      char x_fname[20];\n+      struct\n+      {\n+\tlong x_zeroes;\n+\tlong x_offset;\n+      }      x_n;\n+    } x_n;\n+    unsigned char x_ftype;\n   }     x_file;\n \n   struct"
    },
    {
      "sha": "fd3f01dccbc560f6f94ee9e333156fdbac8cee62",
      "filename": "include/coff/rs6000.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/include/coff/rs6000.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/include/coff/rs6000.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/rs6000.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -176,6 +176,7 @@ union external_auxent {\n       } x_n;\n     } x_n;\n     char x_ftype[1];\n+    char x_resv[3];\n   } x_file;\n \n   struct {"
    },
    {
      "sha": "1cff7dc30d5ec0c3443f00bb527f5433bfb2f630",
      "filename": "include/coff/xcoff.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/include/coff/xcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e86fc4a5bc3747a6b811d93648a2afa4c1c74217/include/coff/xcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/xcoff.h?ref=e86fc4a5bc3747a6b811d93648a2afa4c1c74217",
      "patch": "@@ -190,6 +190,12 @@\n #define XMC_UL     21          /* Read-write uninitialized TLS data */\n #define XMC_TE     22          /* Same as XMC_TC but mapped after it */\n \n+/* x_ftype values:  */\n+#define XFT_FN 0    /* Specifies the source-file name */\n+#define XFT_CT 1    /* Specifies the compiler time stamp */\n+#define XFT_CV 2    /* Specifies the compiler version number */\n+#define XFT_CD 128  /*Specifies compiler-defined information */\n+\n /* The ldhdr structure.  This appears at the start of the .loader\n    section.  */\n "
    }
  ]
}