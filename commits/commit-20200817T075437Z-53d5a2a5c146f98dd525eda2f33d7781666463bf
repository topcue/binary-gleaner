{
  "sha": "53d5a2a5c146f98dd525eda2f33d7781666463bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTNkNWEyYTVjMTQ2Zjk4ZGQ1MjVlZGEyZjMzZDc3ODE2NjY0NjNiZg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-08-17T07:54:37Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-08-17T07:54:37Z"
    },
    "message": "[gdb] Fix printing of unresolved dynamic type\n\nWhen debugging gdb in batch mode with executable mixed-lang-stack and doing a\nbacktrace at breakpt:\n...\n$ gdb --args gdb \\\n  -batch \\\n  outputs/gdb.fortran/mixed-lang-stack/mixed-lang-stack \\\n  -ex \"b breakpt\" \\\n  -ex r \\\n  -ex bt\n...\nand stopping at resolve_dynamic_type to print the type:\n...\n(gdb) b resolve_dynamic_type\nBreakpoint 1 at 0x6b020c: file gdbtypes.c, line 2633.\n(gdb) commands\nType commands for breakpoint(s) 1, one per line.\nEnd with a line saying just \"end\".\n>call recursive_dump_type (type, 0)\n>continue\n>end\n(gdb) run\n...\nwe eventually run into an assert for the dynamic type of \"str\":\n...\nThread 1 \"gdb\" hit Breakpoint 1, resolve_dynamic_type (type=0x22204f0, \\\n  valaddr=..., addr=4199408) at gdbtypes.c:2633\n2633        = {check_typedef (type), valaddr, addr, NULL};\ntype node 0x22204f0\nname '<NULL>' (0x0)\ncode 0xd (TYPE_CODE_STRING)\nlength 0\n  ...\n    nfields 0 0x22204b0\ngdbtypes.h:526: internal-error: LONGEST dynamic_prop::const_val() const: \\\n  Assertion `m_kind == PROP_CONST' failed.\nA problem internal to GDB has been detected,\nfurther debugging may prove unreliable.\n...\nwhen trying to print the high bound of a TYPE_CODE_RANGE, which has m_kind\nPROP_LOCEXPR, while the code in resolve_dynamic_type assumes PROP_CONST.\n\nFix this by extending the printing of TYPE_CODE_RANGE to allow\nPROP_LOCEXPR/PROP_LOCLIST as well, such that we have instead:\n...\n    nfields 0 0x1fbc020\n    low 1  high (dynamic)\n...\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2020-08-17  Tom de Vries  <tdevries@suse.de>\n\n\tPR gdb/26393\n\t* gdbtypes.c (dump_dynamic_prop): New function.\n\t(recursive_dump_type): Use dump_dynamic_prop for TYPE_CODE_RANGE.",
    "tree": {
      "sha": "61bd3fb659893d768c57e713511966bbfe836705",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/61bd3fb659893d768c57e713511966bbfe836705"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53d5a2a5c146f98dd525eda2f33d7781666463bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53d5a2a5c146f98dd525eda2f33d7781666463bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53d5a2a5c146f98dd525eda2f33d7781666463bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53d5a2a5c146f98dd525eda2f33d7781666463bf/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3267445af5ebc69fa7fc7cfe88c22f249d1b26e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3267445af5ebc69fa7fc7cfe88c22f249d1b26e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3267445af5ebc69fa7fc7cfe88c22f249d1b26e"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 34,
    "deletions": 7
  },
  "files": [
    {
      "sha": "3e733a73f0b42c61217eb6a191772b1f78f66213",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53d5a2a5c146f98dd525eda2f33d7781666463bf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53d5a2a5c146f98dd525eda2f33d7781666463bf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=53d5a2a5c146f98dd525eda2f33d7781666463bf",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-17  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR gdb/26393\n+\t* gdbtypes.c (dump_dynamic_prop): New function.\n+\t(recursive_dump_type): Use dump_dynamic_prop for TYPE_CODE_RANGE.\n+\n 2020-08-15  Tom de Vries  <tdevries@suse.de>\n \n \tPR backtrace/26390"
    },
    {
      "sha": "c1eb03d8984451a4e036f89623726c345ff33544",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 28,
      "deletions": 7,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53d5a2a5c146f98dd525eda2f33d7781666463bf/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53d5a2a5c146f98dd525eda2f33d7781666463bf/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=53d5a2a5c146f98dd525eda2f33d7781666463bf",
      "patch": "@@ -4856,6 +4856,29 @@ print_gnat_stuff (struct type *type, int spaces)\n \n static struct obstack dont_print_type_obstack;\n \n+/* Print the dynamic_prop PROP.  */\n+\n+static void\n+dump_dynamic_prop (dynamic_prop const& prop)\n+{\n+  switch (prop.kind ())\n+    {\n+    case PROP_CONST:\n+      printf_filtered (\"%s\", plongest (prop.const_val ()));\n+      break;\n+    case PROP_UNDEFINED:\n+      printf_filtered (\"(undefined)\");\n+      break;\n+    case PROP_LOCEXPR:\n+    case PROP_LOCLIST:\n+      printf_filtered (\"(dynamic)\");\n+      break;\n+    default:\n+      gdb_assert_not_reached (\"unhandled prop kind\");\n+      break;\n+    }\n+}\n+\n void\n recursive_dump_type (struct type *type, int spaces)\n {\n@@ -5115,13 +5138,11 @@ recursive_dump_type (struct type *type, int spaces)\n     }\n   if (type->code () == TYPE_CODE_RANGE)\n     {\n-      printfi_filtered (spaces, \"low %s%s  high %s%s\\n\",\n-\t\t\tplongest (type->bounds ()->low.const_val ()),\n-\t\t\t(type->bounds ()->low.kind () == PROP_UNDEFINED\n-\t\t\t ? \" (undefined)\" : \"\"),\n-\t\t\tplongest (type->bounds ()->high.const_val ()),\n-\t\t\t(type->bounds ()->high.kind () == PROP_UNDEFINED\n-\t\t\t ? \" (undefined)\" : \"\"));\n+      printfi_filtered (spaces, \"low \");\n+      dump_dynamic_prop (type->bounds ()->low);\n+      printf_filtered (\"  high \");\n+      dump_dynamic_prop (type->bounds ()->high);\n+      printf_filtered (\"\\n\");\n     }\n \n   switch (TYPE_SPECIFIC_FIELD (type))"
    }
  ]
}