{
  "sha": "26003a205e207db7985c32ec1964a04652b68413",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjYwMDNhMjA1ZTIwN2RiNzk4NWMzMmVjMTk2NGEwNDY1MmI2ODQxMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-28T17:56:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-08T15:05:41Z"
    },
    "message": "Make exception throwing a bit more efficient\n\nThis makes exception throwing a bit more efficient, by removing some\ncopies.\n\ngdb/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* common/common-exceptions.c (throw_exception): Rename from\n\tthrow_exception_cxx.  Remove old copy.  Make argument const.\n\t(throw_it): Create and throw exception objects directly.\n\t* common/common-exceptions.h (throw_exception): Make argument\n\tconst.\n\t(struct gdb_exception_error): Add constructor.\n\t(struct gdb_exception_quit): Add constructor.",
    "tree": {
      "sha": "9800bd8e170266abe2ecc4f07972ba47f88429ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9800bd8e170266abe2ecc4f07972ba47f88429ff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/26003a205e207db7985c32ec1964a04652b68413",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26003a205e207db7985c32ec1964a04652b68413",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/26003a205e207db7985c32ec1964a04652b68413",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26003a205e207db7985c32ec1964a04652b68413/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d272eb370a4c086a1d0f86a7a94e89328ec8d97e"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 37,
    "deletions": 18
  },
  "files": [
    {
      "sha": "a0d8d091e6e4dee541de4efb9f9fd3c47457940f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26003a205e207db7985c32ec1964a04652b68413/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26003a205e207db7985c32ec1964a04652b68413/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=26003a205e207db7985c32ec1964a04652b68413",
      "patch": "@@ -1,3 +1,13 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/common-exceptions.c (throw_exception): Rename from\n+\tthrow_exception_cxx.  Remove old copy.  Make argument const.\n+\t(throw_it): Create and throw exception objects directly.\n+\t* common/common-exceptions.h (throw_exception): Make argument\n+\tconst.\n+\t(struct gdb_exception_error): Add constructor.\n+\t(struct gdb_exception_quit): Add constructor.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* common/common-exceptions.h (exception_rethrow): Don't declare."
    },
    {
      "sha": "83f2c74bfd482cd098e763818aa44801b37c9f9e",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26003a205e207db7985c32ec1964a04652b68413/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26003a205e207db7985c32ec1964a04652b68413/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=26003a205e207db7985c32ec1964a04652b68413",
      "patch": "@@ -180,8 +180,8 @@ throw_exception_sjlj (struct gdb_exception exception)\n \n /* Implementation of throw_exception that uses C++ try/catch.  */\n \n-static ATTRIBUTE_NORETURN void\n-throw_exception_cxx (struct gdb_exception exception)\n+void\n+throw_exception (const gdb_exception &exception)\n {\n   if (exception.reason == RETURN_QUIT)\n     {\n@@ -197,25 +197,24 @@ throw_exception_cxx (struct gdb_exception exception)\n     gdb_assert_not_reached (\"invalid return reason\");\n }\n \n-void\n-throw_exception (struct gdb_exception exception)\n-{\n-  throw_exception_cxx (exception);\n-}\n-\n static void ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF (3, 0)\n throw_it (enum return_reason reason, enum errors error, const char *fmt,\n \t  va_list ap)\n {\n-  struct gdb_exception e;\n-\n-  /* Create the exception.  */\n-  e.reason = reason;\n-  e.error = error;\n-  e.message.reset (new std::string (string_vprintf (fmt, ap)));\n-\n-  /* Throw the exception.  */\n-  throw_exception (e);\n+  if (reason == RETURN_QUIT)\n+    {\n+      gdb_exception_quit ex (reason, error);\n+      ex.message.reset (new std::string (string_vprintf (fmt, ap)));\n+      throw ex;\n+    }\n+  else if (reason == RETURN_ERROR)\n+    {\n+      gdb_exception_error ex (reason, error);\n+      ex.message.reset (new std::string (string_vprintf (fmt, ap)));\n+      throw ex;\n+    }\n+  else\n+    gdb_assert_not_reached (\"invalid return reason\");\n }\n \n void"
    },
    {
      "sha": "1aedb831a626797705e409fe9acdc9b89c9369ac",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26003a205e207db7985c32ec1964a04652b68413/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26003a205e207db7985c32ec1964a04652b68413/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=26003a205e207db7985c32ec1964a04652b68413",
      "patch": "@@ -214,6 +214,11 @@ extern int exceptions_state_mc_catch (struct gdb_exception *, int);\n \n struct gdb_exception_error : public gdb_exception\n {\n+  gdb_exception_error (enum return_reason r, enum errors e)\n+    : gdb_exception (r, e)\n+  {\n+  }\n+\n   explicit gdb_exception_error (const gdb_exception &ex) noexcept\n     : gdb_exception (ex)\n   {\n@@ -222,6 +227,11 @@ struct gdb_exception_error : public gdb_exception\n \n struct gdb_exception_quit : public gdb_exception\n {\n+  gdb_exception_quit (enum return_reason r, enum errors e)\n+    : gdb_exception (r, e)\n+  {\n+  }\n+\n   explicit gdb_exception_quit (const gdb_exception &ex) noexcept\n     : gdb_exception (ex)\n   {\n@@ -250,7 +260,7 @@ struct gdb_quit_bad_alloc\n /* Throw an exception (as described by \"struct gdb_exception\"),\n    landing in the inner most containing exception handler established\n    using TRY/CATCH.  */\n-extern void throw_exception (struct gdb_exception exception)\n+extern void throw_exception (const gdb_exception &exception)\n      ATTRIBUTE_NORETURN;\n \n /* Throw an exception by executing a LONG JUMP to the inner most"
    }
  ]
}