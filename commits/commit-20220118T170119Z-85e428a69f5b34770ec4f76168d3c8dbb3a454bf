{
  "sha": "85e428a69f5b34770ec4f76168d3c8dbb3a454bf",
  "node_id": "C_kwDOANOeidoAKDg1ZTQyOGE2OWY1YjM0NzcwZWM0Zjc2MTY4ZDNjOGRiYjNhNDU0YmY",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-14T15:53:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-18T17:01:19Z"
    },
    "message": "Use std::string in event_location\n\nThis changes event_location to use std::string, removing some manual\nmemory management, and an unnecessary string copy.",
    "tree": {
      "sha": "6f2d45133c42c15edf45088558956ef5d65b7028",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f2d45133c42c15edf45088558956ef5d65b7028"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85e428a69f5b34770ec4f76168d3c8dbb3a454bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85e428a69f5b34770ec4f76168d3c8dbb3a454bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85e428a69f5b34770ec4f76168d3c8dbb3a454bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85e428a69f5b34770ec4f76168d3c8dbb3a454bf/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b0c285ea552d2ce116efb85af749d69ebbddb59",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b0c285ea552d2ce116efb85af749d69ebbddb59",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b0c285ea552d2ce116efb85af749d69ebbddb59"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 34,
    "deletions": 39
  },
  "files": [
    {
      "sha": "f8369bf8318eba6a93b95c28d5e8d0dba77452b3",
      "filename": "gdb/location.c",
      "status": "modified",
      "additions": 31,
      "deletions": 35,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85e428a69f5b34770ec4f76168d3c8dbb3a454bf/gdb/location.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85e428a69f5b34770ec4f76168d3c8dbb3a454bf/gdb/location.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/location.c?ref=85e428a69f5b34770ec4f76168d3c8dbb3a454bf",
      "patch": "@@ -29,18 +29,15 @@\n #include <ctype.h>\n #include <string.h>\n \n-static gdb::unique_xmalloc_ptr<char> explicit_location_to_string\n+static std::string explicit_location_to_string\n      (const struct explicit_location *explicit_loc);\n \n /* The base class for all an event locations used to set a stop event\n    in the inferior.  */\n \n struct event_location\n {\n-  virtual ~event_location ()\n-  {\n-    xfree (as_string);\n-  }\n+  virtual ~event_location () = default;\n \n   /* Clone this object.  */\n   virtual event_location_up clone () const = 0;\n@@ -49,21 +46,23 @@ struct event_location\n   virtual bool empty_p () const = 0;\n \n   /* Return a string representation of this location.  */\n-  const char *to_string ()\n+  const char *to_string () const\n   {\n-    if (as_string == nullptr)\n+    if (as_string.empty ())\n       as_string = compute_string ();\n-    return as_string;\n+    if (as_string.empty ())\n+      return nullptr;\n+    return as_string.c_str ();\n   }\n \n   DISABLE_COPY_AND_ASSIGN (event_location);\n \n   /* The type of this breakpoint specification.  */\n   enum event_location_type type;\n \n-  /* Cached string representation of this location.  This is used, e.g., to\n-     save stop event locations to file.  Malloc'd.  */\n-  char *as_string = nullptr;\n+  /* Cached string representation of this location.  This is used,\n+     e.g., to save stop event locations to file.  */\n+  mutable std::string as_string;\n \n protected:\n \n@@ -74,15 +73,13 @@ struct event_location\n \n   explicit event_location (const event_location *to_clone)\n     : type (to_clone->type),\n-      as_string (to_clone->as_string == nullptr\n-\t\t ? nullptr\n-\t\t : xstrdup (to_clone->as_string))\n+      as_string (to_clone->as_string)\n   {\n   }\n \n   /* Compute the string representation of this object.  This is called\n      by to_string when needed.  */\n-  virtual char *compute_string () = 0;\n+  virtual std::string compute_string () const = 0;\n };\n \n /* A probe.  */\n@@ -123,9 +120,9 @@ struct event_location_probe : public event_location\n   {\n   }\n \n-  char *compute_string () override\n+  std::string compute_string () const override\n   {\n-    return xstrdup (addr_string);\n+    return addr_string;\n   }\n };\n \n@@ -176,17 +173,17 @@ struct event_location_linespec : public event_location\n       linespec_location.spec_string = xstrdup (linespec_location.spec_string);\n   }\n \n-  char *compute_string () override\n+  std::string compute_string () const override\n   {\n     if (linespec_location.spec_string != nullptr)\n       {\n-\tstruct linespec_location *ls = &linespec_location;\n+\tconst struct linespec_location *ls = &linespec_location;\n \tif (ls->match_type == symbol_name_match_type::FULL)\n-\t  return concat (\"-qualified \", ls->spec_string, (char *) nullptr);\n+\t  return std::string (\"-qualified \") + ls->spec_string;\n \telse\n-\t  return xstrdup (ls->spec_string);\n+\t  return ls->spec_string;\n       }\n-    return nullptr;\n+    return {};\n   }\n };\n \n@@ -199,7 +196,7 @@ struct event_location_address : public event_location\n       address (addr)\n   {\n     if (addr_string != nullptr)\n-      as_string = xstrndup (addr_string, addr_string_len);\n+      as_string = std::string (addr_string, addr_string_len);\n   }\n \n   event_location_up clone () const override\n@@ -222,10 +219,10 @@ struct event_location_address : public event_location\n   {\n   }\n \n-  char *compute_string () override\n+  std::string compute_string () const override\n   {\n     const char *addr_string = core_addr_to_string (address);\n-    return xstrprintf (\"*%s\", addr_string).release ();\n+    return std::string (\"*\") + addr_string;\n   }\n };\n \n@@ -268,9 +265,9 @@ struct event_location_explicit : public event_location\n     copy_loc (&to_clone->explicit_loc);\n   }\n \n-  char *compute_string () override\n+  std::string compute_string () const override\n   {\n-    return explicit_location_to_string (&explicit_loc).release ();\n+    return explicit_location_to_string (&explicit_loc);\n   }\n \n private:\n@@ -354,7 +351,7 @@ const char *\n get_address_string_location (const struct event_location *location)\n {\n   gdb_assert (location->type == ADDRESS_LOCATION);\n-  return location->as_string;\n+  return location->to_string ();\n }\n \n /* See description in location.h.  */\n@@ -406,7 +403,7 @@ get_explicit_location_const (const struct event_location *location)\n    AS_LINESPEC is true if this string should be a linespec.\n    Otherwise it will be output in explicit form.  */\n \n-static gdb::unique_xmalloc_ptr<char>\n+static std::string\n explicit_to_string_internal (bool as_linespec,\n \t\t\t     const struct explicit_location *explicit_loc)\n {\n@@ -457,20 +454,20 @@ explicit_to_string_internal (bool as_linespec,\n \t\t  explicit_loc->line_offset.offset);\n     }\n \n-  return make_unique_xstrdup (buf.c_str ());\n+  return std::move (buf.string ());\n }\n \n /* See description in location.h.  */\n \n-static gdb::unique_xmalloc_ptr<char>\n+static std::string\n explicit_location_to_string (const struct explicit_location *explicit_loc)\n {\n   return explicit_to_string_internal (false, explicit_loc);\n }\n \n /* See description in location.h.  */\n \n-gdb::unique_xmalloc_ptr<char>\n+std::string\n explicit_location_to_linespec (const struct explicit_location *explicit_loc)\n {\n   return explicit_to_string_internal (true, explicit_loc);\n@@ -1020,8 +1017,7 @@ event_location_empty_p (const struct event_location *location)\n \n void\n set_event_location_string (struct event_location *location,\n-\t\t\t   gdb::unique_xmalloc_ptr<char> string)\n+\t\t\t   std::string &&string)\n {\n-  xfree (location->as_string);\n-  location->as_string = string.release ();\n+  location->as_string = std::move (string);\n }"
    },
    {
      "sha": "4cabf26138330a81bcb50e5e2aa80be5a8f64e0d",
      "filename": "gdb/location.h",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85e428a69f5b34770ec4f76168d3c8dbb3a454bf/gdb/location.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85e428a69f5b34770ec4f76168d3c8dbb3a454bf/gdb/location.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/location.h?ref=85e428a69f5b34770ec4f76168d3c8dbb3a454bf",
      "patch": "@@ -112,7 +112,7 @@ extern enum event_location_type\n /* Return a linespec string representation of the given explicit\n    location.  The location must already be canonicalized/valid.  */\n \n-extern gdb::unique_xmalloc_ptr<char>\n+extern std::string\n   explicit_location_to_linespec (const struct explicit_location *explicit_loc);\n \n /* Return a string representation of the LOCATION.\n@@ -275,11 +275,10 @@ extern event_location_up\n \n extern int event_location_empty_p (const struct event_location *location);\n \n-/* Set the location's string representation.  If STRING is NULL, clear\n-   the string representation.  */\n+/* Set the location's string representation.  */\n \n extern void\n   set_event_location_string (struct event_location *location,\n-\t\t\t     gdb::unique_xmalloc_ptr<char> string);\n+\t\t\t     std::string &&string);\n \n #endif /* LOCATION_H */"
    }
  ]
}