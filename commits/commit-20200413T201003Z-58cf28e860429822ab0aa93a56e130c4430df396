{
  "sha": "58cf28e860429822ab0aa93a56e130c4430df396",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NThjZjI4ZTg2MDQyOTgyMmFiMGFhOTNhNTZlMTMwYzQ0MzBkZjM5Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-13T18:42:59Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-13T20:10:03Z"
    },
    "message": "Move start_event_loop out of event-loop.c\n\nA subsequent patch is going to move event-loop.c to gdbsupport.  In a\nreview of an earlier version of this series, Pedro pointed out that\nthe resulting code would be cleaner if start_event_loop were not\nshared -- because gdb and gdbserver have some different needs here --\nand so this moves start_event_loop to main.c.  Because the only caller\nis there, it is also now static.\n\ngdb/ChangeLog\n2020-04-13  Tom Tromey  <tom@tromey.com>\n\n\t* event-loop.h (start_event_loop): Don't declare.\n\t* event-loop.c (start_event_loop): Move...\n\t* main.c (start_event_loop): ...here.  Now static.",
    "tree": {
      "sha": "a9909c52189750a8aa038e7acc61178b32168c5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a9909c52189750a8aa038e7acc61178b32168c5a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/58cf28e860429822ab0aa93a56e130c4430df396",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58cf28e860429822ab0aa93a56e130c4430df396",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/58cf28e860429822ab0aa93a56e130c4430df396",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58cf28e860429822ab0aa93a56e130c4430df396/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b7f999aee35f1a40739adea8b11805ceef061c95",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7f999aee35f1a40739adea8b11805ceef061c95",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b7f999aee35f1a40739adea8b11805ceef061c95"
    }
  ],
  "stats": {
    "total": 117,
    "additions": 62,
    "deletions": 55
  },
  "files": [
    {
      "sha": "8489fa31f65d20e1dbc084a62f09a22690dc53fb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58cf28e860429822ab0aa93a56e130c4430df396/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58cf28e860429822ab0aa93a56e130c4430df396/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=58cf28e860429822ab0aa93a56e130c4430df396",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* event-loop.h (start_event_loop): Don't declare.\n+\t* event-loop.c (start_event_loop): Move...\n+\t* main.c (start_event_loop): ...here.  Now static.\n+\n 2020-04-13  Sergio Durigan Junior  <sergiodj@sergiodj.net>\n \n \t* MAINTAINERS: Update my email address."
    },
    {
      "sha": "36df4767aa931d2006c41be1ffdd8b0e41fbdb23",
      "filename": "gdb/event-loop.c",
      "status": "modified",
      "additions": 0,
      "deletions": 54,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58cf28e860429822ab0aa93a56e130c4430df396/gdb/event-loop.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58cf28e860429822ab0aa93a56e130c4430df396/gdb/event-loop.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-loop.c?ref=58cf28e860429822ab0aa93a56e130c4430df396",
      "patch": "@@ -318,60 +318,6 @@ gdb_do_one_event (void)\n   return 1;\n }\n \n-/* Start up the event loop.  This is the entry point to the event loop\n-   from the command loop.  */\n-\n-void\n-start_event_loop (void)\n-{\n-  /* Loop until there is nothing to do.  This is the entry point to\n-     the event loop engine.  gdb_do_one_event will process one event\n-     for each invocation.  It blocks waiting for an event and then\n-     processes it.  */\n-  while (1)\n-    {\n-      int result = 0;\n-\n-      try\n-\t{\n-\t  result = gdb_do_one_event ();\n-\t}\n-      catch (const gdb_exception &ex)\n-\t{\n-\t  exception_print (gdb_stderr, ex);\n-\n-\t  /* If any exception escaped to here, we better enable\n-\t     stdin.  Otherwise, any command that calls async_disable_stdin,\n-\t     and then throws, will leave stdin inoperable.  */\n-\t  SWITCH_THRU_ALL_UIS ()\n-\t    {\n-\t      async_enable_stdin ();\n-\t    }\n-\t  /* If we long-jumped out of do_one_event, we probably didn't\n-\t     get around to resetting the prompt, which leaves readline\n-\t     in a messed-up state.  Reset it here.  */\n-\t  current_ui->prompt_state = PROMPT_NEEDED;\n-\t  gdb::observers::command_error.notify ();\n-\t  /* This call looks bizarre, but it is required.  If the user\n-\t     entered a command that caused an error,\n-\t     after_char_processing_hook won't be called from\n-\t     rl_callback_read_char_wrapper.  Using a cleanup there\n-\t     won't work, since we want this function to be called\n-\t     after a new prompt is printed.  */\n-\t  if (after_char_processing_hook)\n-\t    (*after_char_processing_hook) ();\n-\t  /* Maybe better to set a flag to be checked somewhere as to\n-\t     whether display the prompt or not.  */\n-\t}\n-\n-      if (result < 0)\n-\tbreak;\n-    }\n-\n-  /* We are done with the event loop.  There are no more event sources\n-     to listen to.  So we exit GDB.  */\n-  return;\n-}\n \f\n \n /* Wrapper function for create_file_handler, so that the caller"
    },
    {
      "sha": "52740c3b9af349c3fe0a3ebfced19704dcfe2cd1",
      "filename": "gdb/event-loop.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58cf28e860429822ab0aa93a56e130c4430df396/gdb/event-loop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58cf28e860429822ab0aa93a56e130c4430df396/gdb/event-loop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-loop.h?ref=58cf28e860429822ab0aa93a56e130c4430df396",
      "patch": "@@ -80,7 +80,6 @@ typedef void (timer_handler_func) (gdb_client_data);\n \n /* Exported functions from event-loop.c */\n \n-extern void start_event_loop (void);\n extern int gdb_do_one_event (void);\n extern void delete_file_handler (int fd);\n extern void add_file_handler (int fd, handler_func *proc, "
    },
    {
      "sha": "67a3d0027e13703c38668a94a426e5abe2cc1074",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58cf28e860429822ab0aa93a56e130c4430df396/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58cf28e860429822ab0aa93a56e130c4430df396/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=58cf28e860429822ab0aa93a56e130c4430df396",
      "patch": "@@ -53,6 +53,7 @@\n #include \"gdbtk/generic/gdbtk.h\"\n #endif\n #include \"gdbsupport/alt-stack.h\"\n+#include \"observable.h\"\n \n /* The selected interpreter.  This will be used as a set command\n    variable, so it should always be malloc'ed - since\n@@ -336,6 +337,61 @@ get_init_files (std::vector<std::string> *system_gdbinit,\n   *local_gdbinit = localinit;\n }\n \n+/* Start up the event loop.  This is the entry point to the event loop\n+   from the command loop.  */\n+\n+static void\n+start_event_loop ()\n+{\n+  /* Loop until there is nothing to do.  This is the entry point to\n+     the event loop engine.  gdb_do_one_event will process one event\n+     for each invocation.  It blocks waiting for an event and then\n+     processes it.  */\n+  while (1)\n+    {\n+      int result = 0;\n+\n+      try\n+\t{\n+\t  result = gdb_do_one_event ();\n+\t}\n+      catch (const gdb_exception &ex)\n+\t{\n+\t  exception_print (gdb_stderr, ex);\n+\n+\t  /* If any exception escaped to here, we better enable\n+\t     stdin.  Otherwise, any command that calls async_disable_stdin,\n+\t     and then throws, will leave stdin inoperable.  */\n+\t  SWITCH_THRU_ALL_UIS ()\n+\t    {\n+\t      async_enable_stdin ();\n+\t    }\n+\t  /* If we long-jumped out of do_one_event, we probably didn't\n+\t     get around to resetting the prompt, which leaves readline\n+\t     in a messed-up state.  Reset it here.  */\n+\t  current_ui->prompt_state = PROMPT_NEEDED;\n+\t  gdb::observers::command_error.notify ();\n+\t  /* This call looks bizarre, but it is required.  If the user\n+\t     entered a command that caused an error,\n+\t     after_char_processing_hook won't be called from\n+\t     rl_callback_read_char_wrapper.  Using a cleanup there\n+\t     won't work, since we want this function to be called\n+\t     after a new prompt is printed.  */\n+\t  if (after_char_processing_hook)\n+\t    (*after_char_processing_hook) ();\n+\t  /* Maybe better to set a flag to be checked somewhere as to\n+\t     whether display the prompt or not.  */\n+\t}\n+\n+      if (result < 0)\n+\tbreak;\n+    }\n+\n+  /* We are done with the event loop.  There are no more event sources\n+     to listen to.  So we exit GDB.  */\n+  return;\n+}\n+\n /* Call command_loop.  */\n \n /* Prevent inlining this function for the benefit of GDB's selftests"
    }
  ]
}