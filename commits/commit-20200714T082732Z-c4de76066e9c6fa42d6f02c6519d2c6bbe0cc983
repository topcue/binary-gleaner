{
  "sha": "c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzRkZTc2MDY2ZTljNmZhNDJkNmYwMmM2NTE5ZDJjNmJiZTBjYzk4Mw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:27:32Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:27:32Z"
    },
    "message": "x86: fold VCMP_Fixup() into CMP_Fixup()\n\nThere's no reason to have two functions and two tables, when the AVX\nfunctionality here is a proper superset of the SSE one.",
    "tree": {
      "sha": "95754fa24aa302befc80931de2902b22b9cda958",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/95754fa24aa302befc80931de2902b22b9cda958"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9ab00b61a9d7d84313b1793255a1bc63b97fd9b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ab00b61a9d7d84313b1793255a1bc63b97fd9b7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9ab00b61a9d7d84313b1793255a1bc63b97fd9b7"
    }
  ],
  "stats": {
    "total": 132,
    "additions": 58,
    "deletions": 74
  },
  "files": [
    {
      "sha": "ed46ed288fab613d65f4ea516e3a492434e3fcc5",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (VCMP_Fixup, VCMP): Delete.\n+\t(simd_cmp_op): Add const.\n+\t(vex_cmp_op): Move up and drop initial 8 entries. Add const.\n+\t(CMP_Fixup): Handle VEX case.\n+\t(prefix_table): Replace VCMP by CMP.\n+\t* i386-dis-evex-prefix.h, i386-dis-evex-w.h: Likewise.\n+\n 2020-07-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (MOVBE_Fixup): Delete."
    },
    {
      "sha": "90d5be22c6f4e023c97b555dcf80dad5f83dc1ca",
      "filename": "opcodes/i386-dis-evex-prefix.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/i386-dis-evex-prefix.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/i386-dis-evex-prefix.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-prefix.h?ref=c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
      "patch": "@@ -291,9 +291,9 @@\n   },\n   /* PREFIX_EVEX_0FC2 */\n   {\n-    { \"vcmppX\",\t{ XMask, Vex, EXx, EXxEVexS, VCMP }, PREFIX_OPCODE },\n+    { \"vcmppX\",\t{ XMask, Vex, EXx, EXxEVexS, CMP }, PREFIX_OPCODE },\n     { VEX_W_TABLE (EVEX_W_0FC2_P_1) },\n-    { \"vcmppX\",\t{ XMask, Vex, EXx, EXxEVexS, VCMP }, PREFIX_OPCODE },\n+    { \"vcmppX\",\t{ XMask, Vex, EXx, EXxEVexS, CMP }, PREFIX_OPCODE },\n     { VEX_W_TABLE (EVEX_W_0FC2_P_3) },\n   },\n   /* PREFIX_EVEX_0FC4 */"
    },
    {
      "sha": "f7460efccd467ce7618f67f82e358c3e30051a80",
      "filename": "opcodes/i386-dis-evex-w.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/i386-dis-evex-w.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/i386-dis-evex-w.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-w.h?ref=c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
      "patch": "@@ -270,12 +270,12 @@\n   },\n   /* EVEX_W_0FC2_P_1 */\n   {\n-    { \"vcmpss\",\t{ XMask, VexScalar, EXxmm_md, EXxEVexS, VCMP }, 0 },\n+    { \"vcmpss\",\t{ XMask, VexScalar, EXxmm_md, EXxEVexS, CMP }, 0 },\n   },\n   /* EVEX_W_0FC2_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vcmpsd\",\t{ XMask, VexScalar, EXxmm_mq, EXxEVexS, VCMP }, 0 },\n+    { \"vcmpsd\",\t{ XMask, VexScalar, EXxmm_mq, EXxEVexS, CMP }, 0 },\n   },\n   /* EVEX_W_0FD2 */\n   {"
    },
    {
      "sha": "9ad7d7b16b5f3b6d1ac63f97e1e600caabc511f2",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 45,
      "deletions": 70,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
      "patch": "@@ -95,7 +95,6 @@ static void OP_Rounding (int, int);\n static void OP_REG_VexI4 (int, int);\n static void OP_VexI4 (int, int);\n static void PCLMUL_Fixup (int, int);\n-static void VCMP_Fixup (int, int);\n static void VPCMP_Fixup (int, int);\n static void VPCOM_Fixup (int, int);\n static void OP_0f07 (int, int);\n@@ -409,7 +408,6 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define XMVexScalarI4 { OP_REG_VexI4, scalar_mode }\n #define VexI4 { OP_VexI4, 0 }\n #define PCLMUL { PCLMUL_Fixup, 0 }\n-#define VCMP { VCMP_Fixup, 0 }\n #define VPCMP { VPCMP_Fixup, 0 }\n #define VPCOM { VPCOM_Fixup, 0 }\n \n@@ -5144,10 +5142,10 @@ static const struct dis386 prefix_table[][4] = {\n \n   /* PREFIX_VEX_0FC2 */\n   {\n-    { \"vcmpps\",\t\t{ XM, Vex, EXx, VCMP }, 0 },\n-    { \"vcmpss\",\t\t{ XMScalar, VexScalar, EXxmm_md, VCMP }, 0 },\n-    { \"vcmppd\",\t\t{ XM, Vex, EXx, VCMP }, 0 },\n-    { \"vcmpsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq, VCMP }, 0 },\n+    { \"vcmpps\",\t\t{ XM, Vex, EXx, CMP }, 0 },\n+    { \"vcmpss\",\t\t{ XMScalar, VexScalar, EXxmm_md, CMP }, 0 },\n+    { \"vcmppd\",\t\t{ XM, Vex, EXx, CMP }, 0 },\n+    { \"vcmpsd\",\t\t{ XMScalar, VexScalar, EXxmm_mq, CMP }, 0 },\n   },\n \n   /* PREFIX_VEX_0FC4 */\n@@ -16111,7 +16109,7 @@ OP_3DNowSuffix (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n   mnemonicendp = obufp;\n }\n \n-static struct op simd_cmp_op[] =\n+static const struct op simd_cmp_op[] =\n {\n   { STRING_COMMA_LEN (\"eq\") },\n   { STRING_COMMA_LEN (\"lt\") },\n@@ -16123,6 +16121,34 @@ static struct op simd_cmp_op[] =\n   { STRING_COMMA_LEN (\"ord\") }\n };\n \n+static const struct op vex_cmp_op[] =\n+{\n+  { STRING_COMMA_LEN (\"eq_uq\") },\n+  { STRING_COMMA_LEN (\"nge\") },\n+  { STRING_COMMA_LEN (\"ngt\") },\n+  { STRING_COMMA_LEN (\"false\") },\n+  { STRING_COMMA_LEN (\"neq_oq\") },\n+  { STRING_COMMA_LEN (\"ge\") },\n+  { STRING_COMMA_LEN (\"gt\") },\n+  { STRING_COMMA_LEN (\"true\") },\n+  { STRING_COMMA_LEN (\"eq_os\") },\n+  { STRING_COMMA_LEN (\"lt_oq\") },\n+  { STRING_COMMA_LEN (\"le_oq\") },\n+  { STRING_COMMA_LEN (\"unord_s\") },\n+  { STRING_COMMA_LEN (\"neq_us\") },\n+  { STRING_COMMA_LEN (\"nlt_uq\") },\n+  { STRING_COMMA_LEN (\"nle_uq\") },\n+  { STRING_COMMA_LEN (\"ord_s\") },\n+  { STRING_COMMA_LEN (\"eq_us\") },\n+  { STRING_COMMA_LEN (\"nge_uq\") },\n+  { STRING_COMMA_LEN (\"ngt_uq\") },\n+  { STRING_COMMA_LEN (\"false_os\") },\n+  { STRING_COMMA_LEN (\"neq_os\") },\n+  { STRING_COMMA_LEN (\"ge_oq\") },\n+  { STRING_COMMA_LEN (\"gt_oq\") },\n+  { STRING_COMMA_LEN (\"true_us\") },\n+};\n+\n static void\n CMP_Fixup (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n {\n@@ -16140,6 +16166,18 @@ CMP_Fixup (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n       sprintf (p, \"%s%s\", simd_cmp_op[cmp_type].name, suffix);\n       mnemonicendp += simd_cmp_op[cmp_type].len;\n     }\n+  else if (need_vex\n+\t   && cmp_type < ARRAY_SIZE (simd_cmp_op) + ARRAY_SIZE (vex_cmp_op))\n+    {\n+      char suffix [3];\n+      char *p = mnemonicendp - 2;\n+      suffix[0] = p[0];\n+      suffix[1] = p[1];\n+      suffix[2] = '\\0';\n+      cmp_type -= ARRAY_SIZE (simd_cmp_op);\n+      sprintf (p, \"%s%s\", vex_cmp_op[cmp_type].name, suffix);\n+      mnemonicendp += vex_cmp_op[cmp_type].len;\n+    }\n   else\n     {\n       /* We have a reserved extension byte.  Output it directly.  */\n@@ -16597,69 +16635,6 @@ OP_XMM_Vex (int bytemode, int sizeflag)\n   OP_XMM (bytemode, sizeflag);\n }\n \n-static struct op vex_cmp_op[] =\n-{\n-  { STRING_COMMA_LEN (\"eq\") },\n-  { STRING_COMMA_LEN (\"lt\") },\n-  { STRING_COMMA_LEN (\"le\") },\n-  { STRING_COMMA_LEN (\"unord\") },\n-  { STRING_COMMA_LEN (\"neq\") },\n-  { STRING_COMMA_LEN (\"nlt\") },\n-  { STRING_COMMA_LEN (\"nle\") },\n-  { STRING_COMMA_LEN (\"ord\") },\n-  { STRING_COMMA_LEN (\"eq_uq\") },\n-  { STRING_COMMA_LEN (\"nge\") },\n-  { STRING_COMMA_LEN (\"ngt\") },\n-  { STRING_COMMA_LEN (\"false\") },\n-  { STRING_COMMA_LEN (\"neq_oq\") },\n-  { STRING_COMMA_LEN (\"ge\") },\n-  { STRING_COMMA_LEN (\"gt\") },\n-  { STRING_COMMA_LEN (\"true\") },\n-  { STRING_COMMA_LEN (\"eq_os\") },\n-  { STRING_COMMA_LEN (\"lt_oq\") },\n-  { STRING_COMMA_LEN (\"le_oq\") },\n-  { STRING_COMMA_LEN (\"unord_s\") },\n-  { STRING_COMMA_LEN (\"neq_us\") },\n-  { STRING_COMMA_LEN (\"nlt_uq\") },\n-  { STRING_COMMA_LEN (\"nle_uq\") },\n-  { STRING_COMMA_LEN (\"ord_s\") },\n-  { STRING_COMMA_LEN (\"eq_us\") },\n-  { STRING_COMMA_LEN (\"nge_uq\") },\n-  { STRING_COMMA_LEN (\"ngt_uq\") },\n-  { STRING_COMMA_LEN (\"false_os\") },\n-  { STRING_COMMA_LEN (\"neq_os\") },\n-  { STRING_COMMA_LEN (\"ge_oq\") },\n-  { STRING_COMMA_LEN (\"gt_oq\") },\n-  { STRING_COMMA_LEN (\"true_us\") },\n-};\n-\n-static void\n-VCMP_Fixup (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n-{\n-  unsigned int cmp_type;\n-\n-  FETCH_DATA (the_info, codep + 1);\n-  cmp_type = *codep++ & 0xff;\n-  if (cmp_type < ARRAY_SIZE (vex_cmp_op))\n-    {\n-      char suffix [3];\n-      char *p = mnemonicendp - 2;\n-      suffix[0] = p[0];\n-      suffix[1] = p[1];\n-      suffix[2] = '\\0';\n-      sprintf (p, \"%s%s\", vex_cmp_op[cmp_type].name, suffix);\n-      mnemonicendp += vex_cmp_op[cmp_type].len;\n-    }\n-  else\n-    {\n-      /* We have a reserved extension byte.  Output it directly.  */\n-      scratchbuf[0] = '$';\n-      print_operand_value (scratchbuf + 1, 1, cmp_type);\n-      oappend_maybe_intel (scratchbuf);\n-      scratchbuf[0] = '\\0';\n-    }\n-}\n-\n static void\n VPCMP_Fixup (int bytemode ATTRIBUTE_UNUSED,\n \t     int sizeflag ATTRIBUTE_UNUSED)"
    }
  ]
}