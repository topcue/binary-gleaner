{
  "sha": "4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGI2OWNlOWI5MTIxMDkwYWM0MmNmOGZhMjBiOTQ5YmJkOWFmZmY5NQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-27T12:14:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-27T12:35:00Z"
    },
    "message": "PR26469 UBSAN: elflink.c:8742 shift exponent 6148914691236511722\n\n\tPR 26469\n\t* elflink.c: Include limits.h.\n\t(CHAR_BIT): Provide fallback define.\n\t(set_symbol_value): Correct complex reloc comment.\n\t(undefined_reference): Set bfd_error.\n\t(BINARY_OP_HEAD, BINARY_OP_TAIL): Split out from..\n\t(BINARY_OP): ..this.\n\t(eval_symbol): Limit shifts.  Force unsigned for left shift.\n\tCatch divide by zero.\n\t* configure.ac (AC_CHECK_HEADERS): Combine, sort and add limits.h.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.",
    "tree": {
      "sha": "196408e74cea24562bea850fc2ff4a8c6850e383",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/196408e74cea24562bea850fc2ff4a8c6850e383"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6fbd4a8e8baa7fe5adcaa1c11c885f741fccd250",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fbd4a8e8baa7fe5adcaa1c11c885f741fccd250",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6fbd4a8e8baa7fe5adcaa1c11c885f741fccd250"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 69,
    "deletions": 25
  },
  "files": [
    {
      "sha": "1d783f73830a0079e5d5ca574e3c96814a781e2a",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
      "patch": "@@ -1,3 +1,18 @@\n+2020-08-27  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26469\n+\t* elflink.c: Include limits.h.\n+\t(CHAR_BIT): Provide fallback define.\n+\t(set_symbol_value): Correct complex reloc comment.\n+\t(undefined_reference): Set bfd_error.\n+\t(BINARY_OP_HEAD, BINARY_OP_TAIL): Split out from..\n+\t(BINARY_OP): ..this.\n+\t(eval_symbol): Limit shifts.  Force unsigned for left shift.\n+\tCatch divide by zero.\n+\t* configure.ac (AC_CHECK_HEADERS): Combine, sort and add limits.h.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2020-08-27  Alan Modra  <amodra@gmail.com>\n \n \tPR 26462"
    },
    {
      "sha": "18fb8aeb50c327604a4f305d03ff2256356ed04a",
      "filename": "bfd/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.in?ref=4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
      "patch": "@@ -143,6 +143,9 @@\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n \n+/* Define to 1 if you have the <limits.h> header file. */\n+#undef HAVE_LIMITS_H\n+\n /* Define to 1 if the system has the type `long double'. */\n #undef HAVE_LONG_DOUBLE\n "
    },
    {
      "sha": "a9c4fd93669e77a46c1fdc77939f8fa17925455d",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 3,
      "deletions": 14,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
      "patch": "@@ -13531,20 +13531,9 @@ $as_echo \"$bfd_cv_build_exeext\" >&6; }\n fi\n \n \n-for ac_header in alloca.h stddef.h string.h strings.h stdlib.h time.h unistd.h wchar.h wctype.h\n-do :\n-  as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n-ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\n-if eval test \\\"x\\$\"$as_ac_Header\"\\\" = x\"yes\"; then :\n-  cat >>confdefs.h <<_ACEOF\n-#define `$as_echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n-_ACEOF\n-\n-fi\n-\n-done\n-\n-for ac_header in fcntl.h sys/file.h sys/time.h sys/stat.h sys/resource.h\n+for ac_header in alloca.h fcntl.h limits.h stddef.h stdlib.h string.h \\\n+\t\t strings.h sys/file.h sys/resource.h sys/stat.h sys/time.h \\\n+\t\t time.h unistd.h wchar.h wctype.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\""
    },
    {
      "sha": "f62659acd7fbe3a62bb4ddd9262d468845d4ce30",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
      "patch": "@@ -243,8 +243,9 @@ AC_SUBST(BFD_HOSTPTR_T)\n \n BFD_CC_FOR_BUILD\n \n-AC_CHECK_HEADERS(alloca.h stddef.h string.h strings.h stdlib.h time.h unistd.h wchar.h wctype.h)\n-AC_CHECK_HEADERS(fcntl.h sys/file.h sys/time.h sys/stat.h sys/resource.h)\n+AC_CHECK_HEADERS(alloca.h fcntl.h limits.h stddef.h stdlib.h string.h \\\n+\t\t strings.h sys/file.h sys/resource.h sys/stat.h sys/time.h \\\n+\t\t time.h unistd.h wchar.h wctype.h)\n GCC_HEADER_STDINT(bfd_stdint.h)\n AC_HEADER_TIME\n AC_HEADER_DIRENT\n@@ -1104,7 +1105,6 @@ AC_MSG_RESULT($bfd_file_ptr)\n AC_SUBST(bfd_file_ptr)\n AC_SUBST(bfd_ufile_ptr)\n \n-dnl AC_CHECK_HEADERS(sys/mman.h)\n AC_FUNC_MMAP\n AC_CHECK_FUNCS(madvise mprotect)\n case ${want_mmap}+${ac_cv_func_mmap_fixed_mapped} in"
    },
    {
      "sha": "5c085b14b79cd5f04ea0b871c8a207fbf779f8f8",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 45,
      "deletions": 8,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b69ce9b9121090ac42cf8fa20b949bbd9afff95/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=4b69ce9b9121090ac42cf8fa20b949bbd9afff95",
      "patch": "@@ -32,6 +32,13 @@\n #include \"plugin.h\"\n #endif\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n /* This struct is used to pass information to routines called via\n    elf_link_hash_traverse which must return failure.  */\n \n@@ -8427,12 +8434,12 @@ struct elf_outext_info\n    implementation of them consists of two parts: complex symbols, and the\n    relocations themselves.\n \n-   The relocations are use a reserved elf-wide relocation type code (R_RELC\n+   The relocations use a reserved elf-wide relocation type code (R_RELC\n    external / BFD_RELOC_RELC internal) and an encoding of relocation field\n    information (start bit, end bit, word width, etc) into the addend.  This\n    information is extracted from CGEN-generated operand tables within gas.\n \n-   Complex symbols are mangled symbols (BSF_RELC external / STT_RELC\n+   Complex symbols are mangled symbols (STT_RELC external / BSF_RELC\n    internal) representing prefix-notation expressions, including but not\n    limited to those sorts of expressions normally encoded as addends in the\n    addend field.  The symbol mangling format is:\n@@ -8607,6 +8614,7 @@ undefined_reference (const char *reftype, const char *name)\n   /* xgettext:c-format */\n   _bfd_error_handler (_(\"undefined %s reference in complex symbol: %s\"),\n \t\t      reftype, name);\n+  bfd_set_error (bfd_error_bad_value);\n }\n \n static bfd_boolean\n@@ -8715,7 +8723,7 @@ eval_symbol (bfd_vma *result,\n       return TRUE;\t\t\t\t\t\t\\\n     }\n \n-#define BINARY_OP(op)\t\t\t\t\t\t\\\n+#define BINARY_OP_HEAD(op)\t\t\t\t\t\\\n   if (strncmp (sym, #op, strlen (#op)) == 0)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       sym += strlen (#op);\t\t\t\t\t\\\n@@ -8728,18 +8736,33 @@ eval_symbol (bfd_vma *result,\n       ++*symp;\t\t\t\t\t\t\t\\\n       if (!eval_symbol (&b, symp, input_bfd, flinfo, dot,\t\\\n \t\t\tisymbuf, locsymcount, signed_p))\t\\\n-\treturn FALSE;\t\t\t\t\t\t\\\n+\treturn FALSE;\n+#define BINARY_OP_TAIL(op)\t\t\t\t\t\\\n       if (signed_p)\t\t\t\t\t\t\\\n \t*result = ((bfd_signed_vma) a) op ((bfd_signed_vma) b);\t\\\n       else\t\t\t\t\t\t\t\\\n \t*result = a op b;\t\t\t\t\t\\\n       return TRUE;\t\t\t\t\t\t\\\n     }\n+#define BINARY_OP(op) BINARY_OP_HEAD(op) BINARY_OP_TAIL(op)\n \n     default:\n       UNARY_OP  (0-);\n-      BINARY_OP (<<);\n-      BINARY_OP (>>);\n+      BINARY_OP_HEAD (<<);\n+      if (b >= sizeof (a) * CHAR_BIT)\n+\t{\n+\t  *result = 0;\n+\t  return TRUE;\n+\t}\n+      signed_p = 0;\n+      BINARY_OP_TAIL (<<);\n+      BINARY_OP_HEAD (>>);\n+      if (b >= sizeof (a) * CHAR_BIT)\n+\t{\n+\t  *result = signed_p && (bfd_signed_vma) a < 0 ? -1 : 0;\n+\t  return TRUE;\n+\t}\n+      BINARY_OP_TAIL (>>);\n       BINARY_OP (==);\n       BINARY_OP (!=);\n       BINARY_OP (<=);\n@@ -8749,8 +8772,22 @@ eval_symbol (bfd_vma *result,\n       UNARY_OP  (~);\n       UNARY_OP  (!);\n       BINARY_OP (*);\n-      BINARY_OP (/);\n-      BINARY_OP (%);\n+      BINARY_OP_HEAD (/);\n+      if (b == 0)\n+\t{\n+\t  _bfd_error_handler (_(\"division by zero\"));\n+\t  bfd_set_error (bfd_error_bad_value);\n+\t  return FALSE;\n+\t}\n+      BINARY_OP_TAIL (/);\n+      BINARY_OP_HEAD (%);\n+      if (b == 0)\n+\t{\n+\t  _bfd_error_handler (_(\"division by zero\"));\n+\t  bfd_set_error (bfd_error_bad_value);\n+\t  return FALSE;\n+\t}\n+      BINARY_OP_TAIL (%);\n       BINARY_OP (^);\n       BINARY_OP (|);\n       BINARY_OP (&);"
    }
  ]
}