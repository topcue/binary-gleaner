{
  "sha": "97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTdhYWM0ZWMzMjkzZGM0YTNmZGI0NWE3NDRhMjk5MWFlNTY1MTRjMg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-12-19T21:30:39Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-12-19T21:37:04Z"
    },
    "message": "gold: Move sym declaration just before use\n\nMove sym declaration just before use to avoid -Wmaybe-uninitialized\nwarning from GCC 11.\n\n\tPR gold/27097\n\t* incremental.cc (Sized_relobj_incr::do_add_symbols): Move sym\n\tdeclaration just before use.\n\t(Sized_incr_dynobj::do_add_symbols): Likewise.\n\t* plugin.cc (Sized_pluginobj::do_add_symbols): Likewise.",
    "tree": {
      "sha": "5d001c56054449c969d72d4c7dc770fd5cd2c14e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d001c56054449c969d72d4c7dc770fd5cd2c14e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "60108e47b5b16b32a62eb32c5e6f929ab2cb5cf1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60108e47b5b16b32a62eb32c5e6f929ab2cb5cf1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/60108e47b5b16b32a62eb32c5e6f929ab2cb5cf1"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 11,
    "deletions": 3
  },
  "files": [
    {
      "sha": "9614a87f76d169e22a3a4eb9428b1a7448d174a2",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
      "patch": "@@ -1,3 +1,11 @@\n+2020-12-19  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR gold/27097\n+\t* incremental.cc (Sized_relobj_incr::do_add_symbols): Move sym\n+\tdeclaration just before use.\n+\t(Sized_incr_dynobj::do_add_symbols): Likewise.\n+\t* plugin.cc (Sized_pluginobj::do_add_symbols): Likewise.\n+\n 2020-12-15  Cary Coutant  <ccoutant@gmail.com>\n \n \t* dwp.cc (class Dwo_file): Use new Ehdr::get_ei_osabi and"
    },
    {
      "sha": "525c92cff66053a97f5e8c4c3eaca379157c4f26",
      "filename": "gold/incremental.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/gold/incremental.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/gold/incremental.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/incremental.cc?ref=97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
      "patch": "@@ -2129,7 +2129,6 @@ Sized_relobj_incr<size, big_endian>::do_add_symbols(\n {\n   const int sym_size = elfcpp::Elf_sizes<size>::sym_size;\n   unsigned char symbuf[sym_size];\n-  elfcpp::Sym<size, big_endian> sym(symbuf);\n   elfcpp::Sym_write<size, big_endian> osym(symbuf);\n \n   typedef typename elfcpp::Elf_types<size>::Elf_WXword Elf_size_type;\n@@ -2196,6 +2195,7 @@ Sized_relobj_incr<size, big_endian>::do_add_symbols(\n       osym.put_st_other(gsym.get_st_other());\n       osym.put_st_shndx(shndx);\n \n+      elfcpp::Sym<size, big_endian> sym(symbuf);\n       Symbol* res = symtab->add_from_incrobj(this, name, NULL, &sym);\n \n       if (shndx != elfcpp::SHN_UNDEF)\n@@ -2730,7 +2730,6 @@ Sized_incr_dynobj<size, big_endian>::do_add_symbols(\n {\n   const int sym_size = elfcpp::Elf_sizes<size>::sym_size;\n   unsigned char symbuf[sym_size];\n-  elfcpp::Sym<size, big_endian> sym(symbuf);\n   elfcpp::Sym_write<size, big_endian> osym(symbuf);\n \n   unsigned int nsyms = this->input_reader_.get_global_symbol_count();\n@@ -2795,6 +2794,7 @@ Sized_incr_dynobj<size, big_endian>::do_add_symbols(\n       osym.put_st_other(gsym.get_st_other());\n       osym.put_st_shndx(shndx);\n \n+      elfcpp::Sym<size, big_endian> sym(symbuf);\n       Sized_symbol<size>* res =\n \t  symtab->add_from_incrobj<size, big_endian>(this, name, NULL, &sym);\n       this->symbols_[i] = res;"
    },
    {
      "sha": "5f5da5dceaac720799460c14dccc8e602c69576b",
      "filename": "gold/plugin.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/gold/plugin.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97aac4ec3293dc4a3fdb45a744a2991ae56514c2/gold/plugin.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/plugin.cc?ref=97aac4ec3293dc4a3fdb45a744a2991ae56514c2",
      "patch": "@@ -1397,7 +1397,6 @@ Sized_pluginobj<size, big_endian>::do_add_symbols(Symbol_table* symtab,\n {\n   const int sym_size = elfcpp::Elf_sizes<size>::sym_size;\n   unsigned char symbuf[sym_size];\n-  elfcpp::Sym<size, big_endian> sym(symbuf);\n   elfcpp::Sym_write<size, big_endian> osym(symbuf);\n \n   Plugin_recorder* recorder = parameters->options().plugins()->recorder();\n@@ -1480,6 +1479,7 @@ Sized_pluginobj<size, big_endian>::do_add_symbols(Symbol_table* symtab,\n       osym.put_st_other(vis, 0);\n       osym.put_st_shndx(shndx);\n \n+      elfcpp::Sym<size, big_endian> sym(symbuf);\n       this->symbols_[i] =\n         symtab->add_from_pluginobj<size, big_endian>(this, name, ver, &sym);\n     }"
    }
  ]
}