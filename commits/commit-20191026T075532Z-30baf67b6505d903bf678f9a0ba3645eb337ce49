{
  "sha": "30baf67b6505d903bf678f9a0ba3645eb337ce49",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzBiYWY2N2I2NTA1ZDkwM2JmNjc4ZjlhMGJhMzY0NWViMzM3Y2U0OQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-26T07:55:32Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-26T07:55:32Z"
    },
    "message": "[gdb] Fix more typos in comments (2)\n\nFix typos in comments.  NFC.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2019-10-26  Tom de Vries  <tdevries@suse.de>\n\n\t* aarch64-linux-tdep.c: Fix typos in comments.\n\t* aarch64-tdep.c: Same.\n\t* ada-lang.c: Same.\n\t* amd64-nat.c: Same.\n\t* arc-tdep.c: Same.\n\t* arch/aarch64-insn.c: Same.\n\t* block.c: Same.\n\t* breakpoint.h: Same.\n\t* btrace.h: Same.\n\t* c-varobj.c: Same.\n\t* cli/cli-decode.c: Same.\n\t* cli/cli-script.c: Same.\n\t* cli/cli-utils.h: Same.\n\t* coff-pe-read.c: Same.\n\t* coffread.c: Same.\n\t* compile/compile-cplus-symbols.c: Same.\n\t* compile/compile-object-run.c: Same.\n\t* completer.c: Same.\n\t* corelow.c: Same.\n\t* cp-support.c: Same.\n\t* demangle.c: Same.\n\t* dwarf-index-write.c: Same.\n\t* dwarf2-frame.c: Same.\n\t* dwarf2-frame.h: Same.\n\t* eval.c: Same.\n\t* frame-base.h: Same.\n\t* frame.h: Same.\n\t* gdbcmd.h: Same.\n\t* gdbtypes.h: Same.\n\t* gnu-nat.c: Same.\n\t* guile/scm-objfile.c: Same.\n\t* i386-tdep.c: Same.\n\t* i386-tdep.h: Same.\n\t* infcall.c: Same.\n\t* infcall.h: Same.\n\t* linux-nat.c: Same.\n\t* m68k-tdep.c: Same.\n\t* macroexp.c: Same.\n\t* memattr.c: Same.\n\t* mi/mi-cmd-disas.c: Same.\n\t* mi/mi-getopt.h: Same.\n\t* mi/mi-main.c: Same.\n\t* minsyms.c: Same.\n\t* nat/aarch64-sve-linux-sigcontext.h: Same.\n\t* objfiles.h: Same.\n\t* ppc-linux-nat.c: Same.\n\t* ppc-linux-tdep.c: Same.\n\t* ppc-tdep.h: Same.\n\t* progspace.h: Same.\n\t* prologue-value.h: Same.\n\t* python/py-evtregistry.c: Same.\n\t* python/py-instruction.h: Same.\n\t* record-btrace.c: Same.\n\t* record-full.c: Same.\n\t* remote.c: Same.\n\t* rs6000-tdep.c: Same.\n\t* ser-tcp.c: Same.\n\t* sol-thread.c: Same.\n\t* sparc-sol2-tdep.c: Same.\n\t* sparc64-tdep.c: Same.\n\t* stabsread.c: Same.\n\t* symfile.c: Same.\n\t* symtab.h: Same.\n\t* target.c: Same.\n\t* tracepoint.c: Same.\n\t* tui/tui-data.h: Same.\n\t* tui/tui-io.c: Same.\n\t* tui/tui-win.c: Same.\n\t* tui/tui.c: Same.\n\t* unittests/rsp-low-selftests.c: Same.\n\t* user-regs.h: Same.\n\t* utils.c: Same.\n\t* utils.h: Same.\n\t* valarith.c: Same.\n\t* valops.c: Same.\n\t* valprint.c: Same.\n\t* valprint.h: Same.\n\t* value.c: Same.\n\t* value.h: Same.\n\t* varobj.c: Same.\n\t* x86-nat.h: Same.\n\t* xtensa-tdep.c: Same.\n\ngdb/gdbserver/ChangeLog:\n\n2019-10-26  Tom de Vries  <tdevries@suse.de>\n\n\t* linux-aarch64-low.c: Fix typos in comments.\n\t* linux-arm-low.c: Same.\n\t* linux-low.c: Same.\n\t* linux-ppc-low.c: Same.\n\t* proc-service.c: Same.\n\t* regcache.h: Same.\n\t* server.c: Same.\n\t* tracepoint.c: Same.\n\t* win32-low.c: Same.\n\ngdb/stubs/ChangeLog:\n\n2019-10-26  Tom de Vries  <tdevries@suse.de>\n\n\t* ia64vms-stub.c: Fix typos in comments.\n\t* m32r-stub.c: Same.\n\t* m68k-stub.c: Same.\n\t* sh-stub.c: Same.\n\ngdb/testsuite/ChangeLog:\n\n2019-10-26  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/bigcore.c: Fix typos in comments.\n\t* gdb.base/ctf-ptype.c: Same.\n\t* gdb.base/long_long.c: Same.\n\t* gdb.dwarf2/dw2-op-out-param.S: Same.\n\t* gdb.python/py-evthreads.c: Same.\n\t* gdb.reverse/i387-stack-reverse.c: Same.\n\t* gdb.trace/tfile.c: Same.\n\t* lib/compiler.c: Same.\n\t* lib/compiler.cc: Same.\n\nChange-Id: I8573d84a577894270179ae30f46c48d806fc1beb",
    "tree": {
      "sha": "74390d021d1a425d2d92b1e0f3d8861290010bff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/74390d021d1a425d2d92b1e0f3d8861290010bff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/30baf67b6505d903bf678f9a0ba3645eb337ce49",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30baf67b6505d903bf678f9a0ba3645eb337ce49",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/30baf67b6505d903bf678f9a0ba3645eb337ce49",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30baf67b6505d903bf678f9a0ba3645eb337ce49/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cc3da765d24068ef9046c19c9d23b1e69e30f6e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cc3da765d24068ef9046c19c9d23b1e69e30f6e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cc3da765d24068ef9046c19c9d23b1e69e30f6e"
    }
  ],
  "stats": {
    "total": 364,
    "additions": 240,
    "deletions": 124
  },
  "files": [
    {
      "sha": "edf7c34f43cb695f783271f05f6fc6c9afdec795",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1,3 +1,88 @@\n+2019-10-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* aarch64-linux-tdep.c: Fix typos in comments.\n+\t* aarch64-tdep.c: Same.\n+\t* ada-lang.c: Same.\n+\t* amd64-nat.c: Same.\n+\t* arc-tdep.c: Same.\n+\t* arch/aarch64-insn.c: Same.\n+\t* block.c: Same.\n+\t* breakpoint.h: Same.\n+\t* btrace.h: Same.\n+\t* c-varobj.c: Same.\n+\t* cli/cli-decode.c: Same.\n+\t* cli/cli-script.c: Same.\n+\t* cli/cli-utils.h: Same.\n+\t* coff-pe-read.c: Same.\n+\t* coffread.c: Same.\n+\t* compile/compile-cplus-symbols.c: Same.\n+\t* compile/compile-object-run.c: Same.\n+\t* completer.c: Same.\n+\t* corelow.c: Same.\n+\t* cp-support.c: Same.\n+\t* demangle.c: Same.\n+\t* dwarf-index-write.c: Same.\n+\t* dwarf2-frame.c: Same.\n+\t* dwarf2-frame.h: Same.\n+\t* eval.c: Same.\n+\t* frame-base.h: Same.\n+\t* frame.h: Same.\n+\t* gdbcmd.h: Same.\n+\t* gdbtypes.h: Same.\n+\t* gnu-nat.c: Same.\n+\t* guile/scm-objfile.c: Same.\n+\t* i386-tdep.c: Same.\n+\t* i386-tdep.h: Same.\n+\t* infcall.c: Same.\n+\t* infcall.h: Same.\n+\t* linux-nat.c: Same.\n+\t* m68k-tdep.c: Same.\n+\t* macroexp.c: Same.\n+\t* memattr.c: Same.\n+\t* mi/mi-cmd-disas.c: Same.\n+\t* mi/mi-getopt.h: Same.\n+\t* mi/mi-main.c: Same.\n+\t* minsyms.c: Same.\n+\t* nat/aarch64-sve-linux-sigcontext.h: Same.\n+\t* objfiles.h: Same.\n+\t* ppc-linux-nat.c: Same.\n+\t* ppc-linux-tdep.c: Same.\n+\t* ppc-tdep.h: Same.\n+\t* progspace.h: Same.\n+\t* prologue-value.h: Same.\n+\t* python/py-evtregistry.c: Same.\n+\t* python/py-instruction.h: Same.\n+\t* record-btrace.c: Same.\n+\t* record-full.c: Same.\n+\t* remote.c: Same.\n+\t* rs6000-tdep.c: Same.\n+\t* ser-tcp.c: Same.\n+\t* sol-thread.c: Same.\n+\t* sparc-sol2-tdep.c: Same.\n+\t* sparc64-tdep.c: Same.\n+\t* stabsread.c: Same.\n+\t* symfile.c: Same.\n+\t* symtab.h: Same.\n+\t* target.c: Same.\n+\t* tracepoint.c: Same.\n+\t* tui/tui-data.h: Same.\n+\t* tui/tui-io.c: Same.\n+\t* tui/tui-win.c: Same.\n+\t* tui/tui.c: Same.\n+\t* unittests/rsp-low-selftests.c: Same.\n+\t* user-regs.h: Same.\n+\t* utils.c: Same.\n+\t* utils.h: Same.\n+\t* valarith.c: Same.\n+\t* valops.c: Same.\n+\t* valprint.c: Same.\n+\t* valprint.h: Same.\n+\t* value.c: Same.\n+\t* value.h: Same.\n+\t* varobj.c: Same.\n+\t* x86-nat.h: Same.\n+\t* xtensa-tdep.c: Same.\n+\n 2019-10-25  Ali Tamur <tamur@google.com>\n \n \t* charset.c (find_charset_names): Reflect API change."
    },
    {
      "sha": "c8e30a4fef24d12bbf8a014f7b7e423a2a0e9e19",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1347,7 +1347,7 @@ aarch64_linux_get_syscall_number (struct gdbarch *gdbarch, thread_info *thread)\n      This function will only ever get called when stopped at the entry or exit\n      of a syscall, so by checking for 0 in x0 (arg0/retval), x1 (arg1), x8\n      (syscall), x29 (FP) and x30 (LR) we can infer:\n-     1) Either inferior is at exit from sucessful execve.\n+     1) Either inferior is at exit from successful execve.\n      2) Or inferior is at entry to a call to io_setup with invalid arguments and\n \ta corrupted FP and LR.\n      It should be safe enough to assume case 1.  */"
    },
    {
      "sha": "af186e4b1be5fd66f69ab517ac9a7543c4117fb2",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1414,7 +1414,7 @@ struct aarch64_call_info\n };\n \n /* Pass a value in a sequence of consecutive X registers.  The caller\n-   is responsbile for ensuring sufficient registers are available.  */\n+   is responsible for ensuring sufficient registers are available.  */\n \n static void\n pass_in_x (struct gdbarch *gdbarch, struct regcache *regcache,"
    },
    {
      "sha": "5b549717a95d596bd6c7bd1765b289a4be8423ea",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -6443,7 +6443,7 @@ ada_is_ignored_field (struct type *type, int field_num)\n \n     /* Anonymous field names should not be printed.\n        brobecker/2007-02-20: I don't think this can actually happen\n-       but we don't want to print the value of annonymous fields anyway.  */\n+       but we don't want to print the value of anonymous fields anyway.  */\n     if (name == NULL)\n       return 1;\n \n@@ -10117,7 +10117,7 @@ ada_value_cast (struct type *type, struct value *arg2)\n     information nor the associated type structure in GDB are able to\n     express such dynamic types.  So what the debugger does is to create\n     \"fixed\" versions of the type that applies to the specific object.\n-    We also informally refer to this opperation as \"fixing\" an object,\n+    We also informally refer to this operation as \"fixing\" an object,\n     which means creating its associated fixed type.\n \n     Example: when printing the value of variable \"Yes\" above, its fixed"
    },
    {
      "sha": "eb54b49b5b20340c540bfb1b3a6cee51cd82a676",
      "filename": "gdb/amd64-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/amd64-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/amd64-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-nat.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -34,7 +34,7 @@\n    register set indexed by register number, and the number of\n    registers supported by the mapping.  We don't need mappings for the\n    floating-point and SSE registers, since the difference between\n-   64-bit and 32-bit variants are negligable.  The difference in the\n+   64-bit and 32-bit variants are negligible.  The difference in the\n    number of SSE registers is already handled by the target code.  */\n \n /* General-purpose register mapping for native 32-bit code.  */"
    },
    {
      "sha": "13b1c7fe10a7dac8a1526ba9cbc92b8c3d2a3a73",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -969,7 +969,7 @@ arc_is_in_prologue (struct gdbarch *gdbarch, const struct arc_instruction &insn,\n   /* Store of some register.  May or may not update base address register.  */\n   if (insn.insn_class == STORE || insn.insn_class == PUSH)\n     {\n-      /* There is definetely at least one operand - register/value being\n+      /* There is definitely at least one operand - register/value being\n \t stored.  */\n       gdb_assert (insn.operands_count > 0);\n \n@@ -1886,7 +1886,7 @@ arc_tdesc_init (struct gdbarch_info info, const struct target_desc **tdesc,\n \t}\n     }\n \n-  /* Mandatory AUX registeres are intentionally few and are common between\n+  /* Mandatory AUX registers are intentionally few and are common between\n      ARCompact and ARC v2, so same code can be used for both.  */\n   feature = tdesc_find_feature (tdesc_loc, aux_minimal_feature_name);\n   if (feature == NULL)"
    },
    {
      "sha": "89bdabcab98bb66e9502d9bdd23acfaa14444e42",
      "filename": "gdb/arch/aarch64-insn.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/arch/aarch64-insn.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/arch/aarch64-insn.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -47,7 +47,7 @@ extract_signed_bitfield (uint32_t insn, unsigned width, unsigned offset)\n    INSN is the instruction opcode.\n \n    MASK specifies the bits within the opcode that are to be tested\n-   agsinst for a match with PATTERN.  */\n+   against for a match with PATTERN.  */\n \n static int\n decode_masked_match (uint32_t insn, uint32_t mask, uint32_t pattern)"
    },
    {
      "sha": "40cd3f4b48e50c6166c1038bf190fa8892eb0b97",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -343,7 +343,7 @@ block_set_using (struct block *block,\n }\n \n /* If BLOCK_NAMESPACE (block) is NULL, allocate it via OBSTACK and\n-   ititialize its members to zero.  */\n+   initialize its members to zero.  */\n \n static void\n block_initialize_namespace (struct block *block, struct obstack *obstack)"
    },
    {
      "sha": "5c8f17ce397e6c23d46699e75378736721b9d32b",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -375,7 +375,7 @@ class bp_location\n   agent_expr_up cmd_bytecode;\n \n   /* Signals that breakpoint conditions and/or commands need to be\n-     re-synched with the target.  This has no use other than\n+     re-synced with the target.  This has no use other than\n      target-side breakpoints.  */\n   bool needs_update = false;\n \n@@ -672,7 +672,7 @@ enum watchpoint_triggered\n \n /* Some targets (e.g., embedded PowerPC) need two debug registers to set\n    a watchpoint over a memory region.  If this flag is true, GDB will use\n-   only one register per watchpoint, thus assuming that all acesses that\n+   only one register per watchpoint, thus assuming that all accesses that\n    modify a memory location happen at its starting address. */\n \n extern bool target_exact_watchpoints;"
    },
    {
      "sha": "d29fec8ba745c4a5b5e5a53edd877698d3eece7a",
      "filename": "gdb/btrace.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/btrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/btrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -445,7 +445,7 @@ extern int btrace_find_insn_by_number (struct btrace_insn_iterator *,\n \t\t\t\t       unsigned int number);\n \n /* Dereference a branch trace call iterator.  Return a pointer to the\n-   function the iterator points to or NULL if the interator points past\n+   function the iterator points to or NULL if the iterator points past\n    the end of the branch trace.  */\n extern const struct btrace_function *\n   btrace_call_get (const struct btrace_call_iterator *);"
    },
    {
      "sha": "aad1859693060441a783750823242d98c3900a29",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -82,7 +82,7 @@ adjust_value_for_child_access (struct value **value,\n \n   /* Pointers to structures are treated just like\n      structures when accessing children.  Don't\n-     dererences pointers to other types.  */\n+     dereference pointers to other types.  */\n   if (TYPE_CODE (*type) == TYPE_CODE_PTR)\n     {\n       struct type *target_type = get_target_type (*type);\n@@ -765,7 +765,7 @@ cplus_describe_child (const struct varobj *parent, int index,\n \t  --type_index;\n \n \t  /* If the type is anonymous and the field has no name,\n-\t     set an appopriate name.  */\n+\t     set an appropriate name.  */\n \t  field_name = TYPE_FIELD_NAME (type, type_index);\n \t  if (field_name == NULL || *field_name == '\\0')\n \t    {"
    },
    {
      "sha": "7ace72fb7e7abb2a01a824f90493a089705a0db6",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1038,7 +1038,7 @@ apropos_cmd (struct ui_file *stream,\n       command that requires subcommands.  Also called by saying just\n       \"help\".)\n \n-   I am going to split this into two seperate comamnds, help_cmd and\n+   I am going to split this into two separate commands, help_cmd and\n    help_list.  */\n \n void\n@@ -1570,7 +1570,7 @@ undef_cmd_error (const char *cmdtype, const char *q)\n    unless ALLOW_UNKNOWN is negative.\n    CMDTYPE precedes the word \"command\" in the error message.\n \n-   If INGNORE_HELP_CLASSES is nonzero, ignore any command list\n+   If IGNORE_HELP_CLASSES is nonzero, ignore any command list\n    elements which are actually help classes rather than commands (i.e.\n    the function field of the struct cmd_list_element is 0).  */\n "
    },
    {
      "sha": "8abd48c678ad6a4865137595c1c9b53b4234ac6c",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -251,7 +251,7 @@ print_command_lines (struct ui_out *uiout, struct command_line *cmd,\n \t}\n \n       /* An if command.  Recursively print both arms before\n-\t continueing.  */\n+\t continuing.  */\n       if (list->control_type == if_control)\n \t{\n \t  uiout->field_fmt (NULL, \"if %s\", list->line);"
    },
    {
      "sha": "43e810ffe0a98057fa0d17ed1220b484f15f33cf",
      "filename": "gdb/cli/cli-utils.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cli/cli-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cli/cli-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -56,7 +56,7 @@ extern void report_unrecognized_option_error (const char *command,\n \n /* Builds the help string for a command documented by PREFIX,\n    followed by the extract_info_print_args help for ENTITY_KIND.  If\n-   DOCUMENT_N_FLAG is true then help text descibing the -n flag is also\n+   DOCUMENT_N_FLAG is true then help text describing the -n flag is also\n    included.  */\n \n const char *info_print_args_help (const char *prefix,"
    },
    {
      "sha": "b05357bb8be8304ef3b4648123726fc1c10cbcc1",
      "filename": "gdb/coff-pe-read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/coff-pe-read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/coff-pe-read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coff-pe-read.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -614,7 +614,7 @@ read_pe_exported_syms (minimal_symbol_reader &reader,\n /* Extract from ABFD the offset of the .text section.\n    This offset is mainly related to the offset within the file.\n    The value was previously expected to be 0x1000 for all files,\n-   but some Windows OS core DLLs seem to use 0x10000 section alignement\n+   but some Windows OS core DLLs seem to use 0x10000 section alignment\n    which modified the return value of that function.\n    Still return default 0x1000 value if ABFD is NULL or\n    if '.text' section is not found, but that should not happen...  */"
    },
    {
      "sha": "12f36b7917b0ea958948ec4047d23479d433a3c5",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -456,7 +456,7 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n     {\n       /* Because the value of these symbols is within a function code\n \t range, these symbols interfere with the symbol-from-address\n-\t reverse lookup; this manifests itselfs in backtraces, or any\n+\t reverse lookup; this manifests itself in backtraces, or any\n \t other commands that prints symbolic addresses.  Just pretend\n \t these symbols do not exist.  */\n       return NULL;"
    },
    {
      "sha": "10ee8566b15f17d5564a5b531ef90ecaebbdb169",
      "filename": "gdb/compile/compile-cplus-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/compile/compile-cplus-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/compile/compile-cplus-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-symbols.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -194,7 +194,7 @@ convert_one_symbol (compile_cplus_instance *instance,\n \t      if (scope.nested_type () != GCC_TYPE_NONE)\n \t\t{\n \t\t  /* We found a symbol for this type that was defined inside\n-\t\t     some other symbol, e.g., a class tyepdef defined.  */\n+\t\t     some other symbol, e.g., a class typedef defined.  */\n \t\t  return;\n \t\t}\n "
    },
    {
      "sha": "8173cfea6809a21366585a1473a05db4ae8298a0",
      "filename": "gdb/compile/compile-object-run.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/compile/compile-object-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/compile/compile-object-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-run.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -77,7 +77,7 @@ do_module_cleanup (void *arg, int registers_valid)\n \n \t  addr_value = value_from_pointer (ptr_type, data->out_value_addr);\n \n-\t  /* SCOPE_DATA would be stale unlesse EXECUTEDP != NULL.  */\n+\t  /* SCOPE_DATA would be stale unless EXECUTEDP != NULL.  */\n \t  compile_print_value (value_ind (addr_value), data->scope_data);\n \t}\n     }"
    },
    {
      "sha": "5f75aaa497b9da8ddad08dd6e7325e67a587e141",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -865,7 +865,7 @@ complete_explicit_location (completion_tracker &tracker,\n \t  else if (quoted_arg_end[1] == ' ')\n \t    {\n \t      /* We're maybe past the explicit location argument.\n-\t\t Skip the argument without interpretion, assuming the\n+\t\t Skip the argument without interpretation, assuming the\n \t\t user may want to create pending breakpoint.  Offer\n \t\t the keyword and explicit location options as possible\n \t\t completions.  */"
    },
    {
      "sha": "b32fa955fdab305a812636518e3b7758db57f8f6",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -330,7 +330,7 @@ maybe_say_no_core_file_now (int from_tty)\n     printf_filtered (_(\"No core file now.\\n\"));\n }\n \n-/* Backward compatability with old way of specifying core files.  */\n+/* Backward compatibility with old way of specifying core files.  */\n \n void\n core_file_command (const char *filename, int from_tty)"
    },
    {
      "sha": "fd7ddc1dbf3782f7058b14ea9041c2e2e472fc84",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -985,7 +985,7 @@ cp_find_first_component_aux (const char *name, int permissive)\n   /* Operator names can show up in unexpected places.  Since these can\n      contain parentheses or angle brackets, they can screw up the\n      recursion.  But not every string 'operator' is part of an\n-     operater name: e.g. you could have a variable 'cooperator'.  So\n+     operator name: e.g. you could have a variable 'cooperator'.  So\n      this variable tells us whether or not we should treat the string\n      'operator' as starting an operator.  */\n   int operator_possible = 1;"
    },
    {
      "sha": "d8b03104d780f799ca62389454075b24ce95c5c0",
      "filename": "gdb/demangle.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/demangle.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -75,7 +75,7 @@ show_asm_demangle (struct ui_file *file, int from_tty,\n \n static const char *current_demangling_style_string;\n \n-/* The array of names of the known demanglyng styles.  Generated by\n+/* The array of names of the known demangling styles.  Generated by\n    _initialize_demangler from libiberty_demanglers[] array.  */\n \n static const char **demangling_style_names;"
    },
    {
      "sha": "48f385efb00968af5b5ceefe1a8814b9c273d3f7",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -951,7 +951,7 @@ class debug_names\n   {\n   public:\n \n-    /* Object costructor to be called for current DWARF2_PER_OBJFILE.\n+    /* Object constructor to be called for current DWARF2_PER_OBJFILE.\n        All .debug_str section strings are automatically stored.  */\n     debug_str_lookup (struct dwarf2_per_objfile *dwarf2_per_objfile)\n       : m_abfd (dwarf2_per_objfile->objfile->obfd),"
    },
    {
      "sha": "c41db791dc6005704754638c65025368822f5715",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1343,7 +1343,7 @@ dwarf2_frame_sniffer (const struct frame_unwind *self,\n   if (!dwarf2_frame_unwinders_enabled_p)\n     return 0;\n \n-  /* Grab an address that is guarenteed to reside somewhere within the\n+  /* Grab an address that is guaranteed to reside somewhere within the\n      function.  get_frame_pc(), with a no-return next function, can\n      end up returning something past the end of this function's body.\n      If the frame we're sniffing for is a signal frame whose start"
    },
    {
      "sha": "d6dbeffd876a7114c26812af3cab9069516f5ed7",
      "filename": "gdb/dwarf2-frame.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/dwarf2-frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/dwarf2-frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -41,7 +41,7 @@ enum dwarf2_frame_reg_rule\n   DWARF2_FRAME_REG_UNSPECIFIED = 0,\n \n   /* The term \"undefined\" comes from the DWARF2 CFI spec which this\n-     code is moddeling; it indicates that the register's value is\n+     code is modeling; it indicates that the register's value is\n      \"undefined\".  GCC uses the less formal term \"unsaved\".  Its\n      definition is a combination of REG_UNDEFINED and REG_UNSPECIFIED.\n      The failure to differentiate the two helps explain a few problems"
    },
    {
      "sha": "139fd68aaa9bcfbca24a8ab56e1c26fb8da4a7ce",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -342,7 +342,7 @@ evaluate_struct_tuple (struct value *struct_val,\n /* Recursive helper function for setting elements of array tuples.\n    The target is ARRAY (which has bounds LOW_BOUND to HIGH_BOUND); the\n    element value is ELEMENT; EXP, POS and NOSIDE are as usual.\n-   Evaluates index expresions and sets the specified element(s) of\n+   Evaluates index expressions and sets the specified element(s) of\n    ARRAY to ELEMENT.  Returns last index value.  */\n \n static LONGEST"
    },
    {
      "sha": "fe51afbd77d499ae06a84da99f6084a0bf7166dd",
      "filename": "gdb/frame-base.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/frame-base.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/frame-base.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame-base.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -36,7 +36,7 @@ struct regcache;\n    debug info.  It is assumed that dwarf2, stabs, ... will each\n    provide their own methods.\n \n-   A typical implmentation will return the same value for base,\n+   A typical implementation will return the same value for base,\n    locals-base and args-base.  That value, however, will likely be\n    different to the frame ID's stack address.  */\n "
    },
    {
      "sha": "936ef50ad653980f62275afb41c5c350196844a9",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -21,7 +21,7 @@\n #define FRAME_H 1\n \n /* The following is the intended naming schema for frame functions.\n-   It isn't 100% consistent, but it is aproaching that.  Frame naming\n+   It isn't 100% consistent, but it is approaching that.  Frame naming\n    schema:\n \n    Prefixes:"
    },
    {
      "sha": "675c25c1f0866e1cfaa9dc81b35dce737a164bfe",
      "filename": "gdb/gdbcmd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbcmd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbcmd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbcmd.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -2,7 +2,7 @@\n    of the possible command languages.  If necessary, a hook (that may be\n    present or not) must be used and set to the appropriate routine by any\n    command language that cares about it.  If you are having to include this\n-   file you are possibly doing things the old way.  This file will disapear.\n+   file you are possibly doing things the old way.  This file will dissapear.\n    fnasser@redhat.com    */\n \n /* Header file for GDB-specific command-line stuff."
    },
    {
      "sha": "d016549e296ec4cc946481148c3cbedb6d39174e",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1,3 +1,15 @@\n+2019-10-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* linux-aarch64-low.c: Fix typos in comments.\n+\t* linux-arm-low.c: Same.\n+\t* linux-low.c: Same.\n+\t* linux-ppc-low.c: Same.\n+\t* proc-service.c: Same.\n+\t* regcache.h: Same.\n+\t* server.c: Same.\n+\t* tracepoint.c: Same.\n+\t* win32-low.c: Same.\n+\n 2019-10-25  Tom Tromey  <tromey@adacore.com>\n \n \t* utils.c (xstrdup): Remove."
    },
    {
      "sha": "87a21a0e7745e8e865267129cd37ab6dd1f8dd34",
      "filename": "gdb/gdbserver/linux-aarch64-low.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-aarch64-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-aarch64-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-aarch64-low.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1948,7 +1948,7 @@ aarch64_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n   for (i = 30; i >= 0; i -= 2)\n     p += emit_stp_q_offset (p, i, i + 1, sp, i * 16);\n \n-  /* Push general puspose registers on the stack.  Note that we do not need\n+  /* Push general purpose registers on the stack.  Note that we do not need\n      to push x31 as it represents the xzr register and not the stack\n      pointer in a STR instruction.\n \n@@ -2116,7 +2116,7 @@ aarch64_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n        ; This instruction is a normal store with memory ordering\n        ; constraints.  Thanks to this we do not have to put a data\n        ; barrier instruction to make sure all data read and writes are done\n-       ; before this instruction is executed.  Furthermore, this instrucion\n+       ; before this instruction is executed.  Furthermore, this instruction\n        ; will trigger an event, letting other threads know they can grab\n        ; the lock.\n        STLR xzr, [x0]\n@@ -2311,7 +2311,7 @@ aarch64_emit_prologue (void)\n      the current stack pointer in the frame pointer.  This way, it is not\n      clobbered when calling C functions.\n \n-     Finally, throughtout every operation, we are using register x0 as the\n+     Finally, throughout every operation, we are using register x0 as the\n      top of the stack, and x1 as a scratch register.  */\n \n   p += emit_stp (p, x0, x1, sp, preindex_memory_operand (-2 * 16));"
    },
    {
      "sha": "22b6be4acc6c6276f972e8d9956bd064ac704548",
      "filename": "gdb/gdbserver/linux-arm-low.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-arm-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-arm-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-arm-low.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -249,7 +249,7 @@ get_next_pcs_is_thumb (struct arm_get_next_pcs *self)\n   return arm_is_thumb_mode ();\n }\n \n-/* Read memory from the inferiror.\n+/* Read memory from the inferior.\n    BYTE_ORDER is ignored and there to keep compatiblity with GDB's\n    read_memory_unsigned_integer. */\n static ULONGEST"
    },
    {
      "sha": "d6b6ce7581632fae6058850bc5a65bd31a00fdb6",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1613,7 +1613,7 @@ linux_detach (process_info *process)\n   complete_ongoing_step_over ();\n \n   /* Stop all threads before detaching.  First, ptrace requires that\n-     the thread is stopped to sucessfully detach.  Second, thread_db\n+     the thread is stopped to successfully detach.  Second, thread_db\n      may need to uninstall thread event breakpoints from memory, which\n      only works with a stopped process anyway.  */\n   stop_all_lwps (0, NULL);"
    },
    {
      "sha": "d6c10c3f97b4ebf52035933da40ea2eb99e7742a",
      "filename": "gdb/gdbserver/linux-ppc-low.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-ppc-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/linux-ppc-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-ppc-low.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1588,7 +1588,7 @@ ppc_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n      6. Restore SP\n      7. Build a jump for back to the program\n      8. Copy/relocate original instruction\n-     9. Build a jump for replacing orignal instruction.  */\n+     9. Build a jump for replacing original instruction.  */\n \n   /* Adjust stack pointer.  */\n   if (is_64)"
    },
    {
      "sha": "512d6c654ad786e5c8a03b65f6cae3eccab57845",
      "filename": "gdb/gdbserver/proc-service.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/proc-service.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/proc-service.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/proc-service.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -21,7 +21,7 @@\n #include \"server.h\"\n \n /* This file is currently tied to GNU/Linux.  It should scale well to\n-   another libthread_db implementation, with the approriate gdbserver\n+   another libthread_db implementation, with the appropriate gdbserver\n    hooks, but for now this means we can use GNU/Linux's target data.  */\n \n #include \"linux-low.h\""
    },
    {
      "sha": "4b2ea1bb2c27277c0a00874eba0b21e903b9356c",
      "filename": "gdb/gdbserver/regcache.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/regcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/regcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/regcache.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -42,7 +42,7 @@ struct regcache : public reg_buffer_common\n   int registers_owned = 0;\n   unsigned char *registers = nullptr;\n #ifndef IN_PROCESS_AGENT\n-  /* One of REG_UNAVAILBLE or REG_VALID.  */\n+  /* One of REG_UNAVAILABLE or REG_VALID.  */\n   unsigned char *register_status = nullptr;\n #endif\n "
    },
    {
      "sha": "59e8a55313e501a2cb39f55e48e52fed9d0680b2",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -79,7 +79,7 @@ static bool exit_requested;\n /* --once: Exit after the first connection has closed.  */\n bool run_once;\n \n-/* Whether to report TARGET_WAITKING_NO_RESUMED events.  */\n+/* Whether to report TARGET_WAITKIND_NO_RESUMED events.  */\n static bool report_no_resumed;\n \n bool non_stop;"
    },
    {
      "sha": "2bd75dfb4aad868bbb8435d40ebb5e6c66b36e3d",
      "filename": "gdb/gdbserver/tracepoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/tracepoint.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1002,7 +1002,7 @@ EXTERN_C_POP\n \n /* Control structure holding the read/write/etc. pointers into the\n    trace buffer.  We need more than one of these to implement a\n-   transaction-like mechanism to garantees that both GDBserver and the\n+   transaction-like mechanism to guarantees that both GDBserver and the\n    in-process agent can try to change the trace buffer\n    simultaneously.  */\n \n@@ -5154,7 +5154,7 @@ traceframe_walk_blocks (unsigned char *database, unsigned int datasize,\n   return NULL;\n }\n \n-/* Look for the block of type TYPE_WANTED in the trameframe starting\n+/* Look for the block of type TYPE_WANTED in the traceframe starting\n    at DATABASE of DATASIZE bytes long.  TFNUM is the traceframe\n    number.  */\n \n@@ -6310,7 +6310,7 @@ download_trace_state_variables (void)\n    into GDBserver's trace buffer.  This always uploads either all or\n    no trace frames.  This is the counter part of\n    `trace_alloc_trace_buffer'.  See its description of the atomic\n-   synching mechanism.  */\n+   syncing mechanism.  */\n \n static void\n upload_fast_traceframes (void)"
    },
    {
      "sha": "449ed5f462fee9167e2416a0caea079781f9beda",
      "filename": "gdb/gdbserver/win32-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/win32-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbserver/win32-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/win32-low.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -146,7 +146,7 @@ win32_set_thread_context (win32_thread_info *th)\n      will often not be true.  In those cases, the context returned by\n      GetThreadContext will not be correct by the time the thread\n      stops, hence we can't set that context back into the thread when\n-     resuming - it will most likelly crash the inferior.\n+     resuming - it will most likely crash the inferior.\n      Unfortunately, there is no way to know when the thread will\n      really stop.  To work around it, we'll only write the context\n      back to the thread when either the user or GDB explicitly change\n@@ -1426,7 +1426,7 @@ get_child_debug_event (struct target_waitstatus *ourstatus)\n   else\n #endif\n     {\n-      /* Keep the wait time low enough for confortable remote\n+      /* Keep the wait time low enough for comfortable remote\n \t interruption, but high enough so gdbserver doesn't become a\n \t bottleneck.  */\n       if (!WaitForDebugEvent (&current_event, 250))"
    },
    {
      "sha": "6d6ff59950fb34946914cb95d79e8c55b13963d6",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -292,7 +292,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n #define TYPE_GNU_IFUNC(t)\t(TYPE_MAIN_TYPE (t)->flag_gnu_ifunc)\n \n /* * Type owner.  If TYPE_OBJFILE_OWNED is true, the type is owned by\n-   the objfile retrieved as TYPE_OBJFILE.  Otherweise, the type is\n+   the objfile retrieved as TYPE_OBJFILE.  Otherwise, the type is\n    owned by an architecture; TYPE_OBJFILE is NULL in this case.  */\n \n #define TYPE_OBJFILE_OWNED(t) (TYPE_MAIN_TYPE (t)->flag_objfile_owned)"
    },
    {
      "sha": "93a50becceb66d33cd52fcde4690e94367f8fbd6",
      "filename": "gdb/gnu-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gnu-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/gnu-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1731,7 +1731,7 @@ S_exception_raise_request (mach_port_t port, mach_port_t reply_port,\n \t}\n     }\n   else\n-    /* A supppressed exception, which ignore.  */\n+    /* A suppressed exception, which ignore.  */\n     {\n       inf->wait.suppress = 1;\n       mach_port_deallocate (mach_task_self (), reply_port);"
    },
    {
      "sha": "7891ec0fcd3dbb5d0414699ba9eb0756155a3082",
      "filename": "gdb/guile/scm-objfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/guile/scm-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/guile/scm-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-objfile.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -346,7 +346,7 @@ gdbscm_execute_objfile_script (const struct extension_language_defn *extlang,\n   ofscm_current_objfile = NULL;\n }\n \n-/* (current-objfile) -> <gdb:obfjile>\n+/* (current-objfile) -> <gdb:objfile>\n    Return the current objfile, or #f if there isn't one.\n    Ideally this would be named ofscm_current_objfile, but that name is\n    taken by the variable recording the current objfile.  */"
    },
    {
      "sha": "52d286a8d73d23225217ae1df8dccff5ba99841f",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1622,7 +1622,7 @@ i386_analyze_frame_setup (struct gdbarch *gdbarch,\n       /* Check for some special instructions that might be migrated by\n \t GCC into the prologue and skip them.  At this point in the\n \t prologue, code should only touch the scratch registers %eax,\n-\t %ecx and %edx, so while the number of posibilities is sheer,\n+\t %ecx and %edx, so while the number of possibilities is sheer,\n \t it is limited.\n \n \t Make sure we only skip these instructions if we later see the"
    },
    {
      "sha": "bcfa7194bb236ee43547475c910869e2c1770fec",
      "filename": "gdb/i386-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/i386-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/i386-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -260,7 +260,7 @@ struct gdbarch_tdep\n \n /* Floating-point registers.  */\n \n-/* All FPU control regusters (except for FIOFF and FOOFF) are 16-bit\n+/* All FPU control registers (except for FIOFF and FOOFF) are 16-bit\n    (at most) in the FPU, but are zero-extended to 32 bits in GDB's\n    register cache.  */\n "
    },
    {
      "sha": "9fc30acd2d8b079b05f060192b3aa27867a57719",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -841,7 +841,7 @@ call_function_by_hand_dummy (struct value *function,\n \t   void parameterless generic dummy frame calls to frameless\n \t   functions will create a sequence of effectively identical\n \t   frames (SP, FP and TOS and PC the same).  This, not\n-\t   suprisingly, results in what appears to be a stack in an\n+\t   surprisingly, results in what appears to be a stack in an\n \t   infinite loop --- when GDB tries to find a generic dummy\n \t   frame on the internal dummy frame stack, it will always\n \t   find the first one."
    },
    {
      "sha": "c3f3fc818c07d440e4ef01c88c728440b3a6d4c5",
      "filename": "gdb/infcall.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/infcall.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/infcall.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -43,7 +43,7 @@ extern CORE_ADDR find_function_addr (struct value *function,\n    function returned.  May fail to return, if a breakpoint or signal\n    is hit during the execution of the function.\n \n-   DFEAULT_RETURN_TYPE is used as function return type if the return\n+   DEFAULT_RETURN_TYPE is used as function return type if the return\n    type is unknown.  This is used when calling functions with no debug\n    info.\n "
    },
    {
      "sha": "bc397961c82d05787cfb9a4aea47e685cf6c7550",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1468,7 +1468,7 @@ linux_nat_target::detach (inferior *inf, int from_tty)\n      inferiors running. */\n \n   /* Stop all threads before detaching.  ptrace requires that the\n-     thread is stopped to sucessfully detach.  */\n+     thread is stopped to successfully detach.  */\n   iterate_over_lwps (ptid_t (pid), stop_callback);\n   /* ... and wait until all of them have reported back that\n      they're no longer running.  */\n@@ -3726,7 +3726,7 @@ linux_nat_target::kill ()\n       ptid_t ptid = ptid_t (inferior_ptid.pid ());\n \n       /* Stop all threads before killing them, since ptrace requires\n-\t that the thread is stopped to sucessfully PTRACE_KILL.  */\n+\t that the thread is stopped to successfully PTRACE_KILL.  */\n       iterate_over_lwps (ptid, stop_callback);\n       /* ... and wait until all of them have reported back that\n \t they're no longer running.  */"
    },
    {
      "sha": "58cbf90426c34c92f96fa7018f7585b720fb6c47",
      "filename": "gdb/m68k-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/m68k-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/m68k-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m68k-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -257,7 +257,7 @@ m68k_value_to_register (struct frame_info *frame, int regnum,\n \n    The 68020/030/040/060 do support an FPU, either as a coprocessor\n    (68881/2) or built-in (68040/68060).  That's why System V release 4\n-   (SVR4) instroduces a new calling convention specified by the SVR4\n+   (SVR4) introduces a new calling convention specified by the SVR4\n    psABI.  Integer values are returned in %d0/%d1, pointer return\n    values in %a0 and floating values in %fp0.  When calling functions\n    returning a structure the caller should pass a pointer to a buffer"
    },
    {
      "sha": "65232bc83927cf9b85191dac1494146521299f23",
      "filename": "gdb/macroexp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/macroexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/macroexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macroexp.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1333,7 +1333,7 @@ expand (const char *id,\n \n \n /* If the single token in SRC_FIRST followed by the tokens in SRC_REST\n-   constitute a macro invokation not forbidden in NO_LOOP, append its\n+   constitute a macro invocation not forbidden in NO_LOOP, append its\n    expansion to DEST and return non-zero.  Otherwise, return zero, and\n    leave DEST unchanged.\n "
    },
    {
      "sha": "8301a3f2621990e517a36728c48e41fbcffd4021",
      "filename": "gdb/memattr.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/memattr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/memattr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/memattr.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -133,7 +133,7 @@ create_user_mem_region (CORE_ADDR lo, CORE_ADDR hi,\n   int ix = std::distance (user_mem_region_list.begin (), it);\n \n   /* Check for an overlapping memory region.  We only need to check\n-     in the vicinity - at most one before and one after the\n+     in the vincinity - at most one before and one after the\n      insertion point.  */\n   for (int i = ix - 1; i < ix + 1; i++)\n     {"
    },
    {
      "sha": "2f919e0a6508d6235b954c7cd9726352401b4624",
      "filename": "gdb/mi/mi-cmd-disas.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/mi/mi-cmd-disas.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/mi/mi-cmd-disas.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-disas.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -36,7 +36,7 @@\n \n    FILENAME: The name of the file where we want disassemble from.\n    LINE: The line around which we want to disassemble. It will\n-   disassemble the function that contins that line.\n+   disassemble the function that contains that line.\n    HOW_MANY: Number of disassembly lines to display. With source, it\n    is the number of disassembly lines only, not counting the source\n    lines.  "
    },
    {
      "sha": "92e193849465d0a34f15bee1152b3268ee9444bd",
      "filename": "gdb/mi/mi-getopt.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/mi/mi-getopt.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/mi/mi-getopt.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-getopt.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -58,7 +58,7 @@ extern int mi_getopt_allow_unknown (const char *prefix, int argc,\n \n /* mi_valid_noargs determines if ARGC/ARGV are a valid set of\n    parameters to satisfy an MI function that is not supposed to\n-   recieve any arguments.\n+   receive any arguments.\n    \n    An MI function that should not receive arguments can still be \n    passed parameters after the special option '--' such as below."
    },
    {
      "sha": "0e99fa39bdda43e0759e72050e646624e3530490",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1234,12 +1234,12 @@ mi_cmd_data_evaluate_expression (const char *command, char **argv, int argc)\n    the ``x'' command.\n    WORD-SIZE: size of each ``word''; 1,2,4, or 8 bytes.\n    NR_ROW: Number of rows.\n-   NR_COL: The number of colums (words per row).\n+   NR_COL: The number of columns (words per row).\n    ASCHAR: (OPTIONAL) Append an ascii character dump to each row.  Use\n    ASCHAR for unprintable characters.\n \n    Reads SIZE*NR_ROW*NR_COL bytes starting at ADDR from memory and\n-   displayes them.  Returns:\n+   displays them.  Returns:\n \n    {addr=\"...\",rowN={wordN=\"...\" ,... [,ascii=\"...\"]}, ...}\n \n@@ -1359,7 +1359,7 @@ mi_cmd_data_read_memory (const char *command, char **argv, int argc)\n   uiout->field_core_addr (\"next-page\", gdbarch, addr + total_bytes);\n   uiout->field_core_addr (\"prev-page\", gdbarch, addr - total_bytes);\n \n-  /* Build the result as a two dimentional table.  */\n+  /* Build the result as a two dimensional table.  */\n   {\n     int row;\n     int row_byte;"
    },
    {
      "sha": "0267472e5de8792875307cbc27624ef04d247bd9",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -737,7 +737,7 @@ lookup_minimal_symbol_by_pc_section (CORE_ADDR pc_in, struct obj_section *sectio\n \t     or equal to the desired pc value, we accomplish two things:\n \t     (1) the case where the pc value is larger than any minimal\n \t     symbol address is trivially solved, (2) the address associated\n-\t     with the hi index is always the one we want when the interation\n+\t     with the hi index is always the one we want when the iteration\n \t     terminates.  In essence, we are iterating the test interval\n \t     down until the pc value is pushed out of it from the high end.\n "
    },
    {
      "sha": "750b210ea076fb069d65f55deb51b9061ea73dc5",
      "filename": "gdb/nat/aarch64-sve-linux-sigcontext.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/nat/aarch64-sve-linux-sigcontext.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/nat/aarch64-sve-linux-sigcontext.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-sve-linux-sigcontext.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -133,7 +133,7 @@ struct sve_context {\n \n struct user_sve_header {\n \t__u32 size; /* total meaningful regset content in bytes */\n-\t__u32 max_size; /* maxmium possible size for this thread */\n+\t__u32 max_size; /* maximum possible size for this thread */\n \t__u16 vl; /* current vector length */\n \t__u16 max_vl; /* maximum possible vector length */\n \t__u16 flags;"
    },
    {
      "sha": "0c044582e437f4e1b3ff89d05598c07b44719e2c",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -69,8 +69,8 @@ struct partial_symbol;\n    testcase are broken for some targets.  In this test the functions\n    are all implemented as part of one file and the testcase is not\n    necessarily linked with a start file (depending on the target).\n-   What happens is, that the first frame is printed normaly and\n-   following frames are treated as being inside the enttry file then.\n+   What happens is, that the first frame is printed normally and\n+   following frames are treated as being inside the entry file then.\n    This way, only the #0 frame is printed in the backtrace output.''\n    Ref \"frame.c\" \"NOTE: vinschen/2003-04-01\".\n "
    },
    {
      "sha": "e14275526c2da464e25475b17e4c44f587da7f57",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -616,7 +616,7 @@ fetch_register (struct regcache *regcache, int tid, int regno)\n   if (altivec_register_p (gdbarch, regno))\n     {\n       /* If this is the first time through, or if it is not the first\n-         time through, and we have comfirmed that there is kernel\n+         time through, and we have confirmed that there is kernel\n          support for such a ptrace request, then go and fetch the\n          register.  */\n       if (have_ptrace_getvrregs)"
    },
    {
      "sha": "fd88a8918c63ad19db65884bc8bd2bc0bd91926d",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -150,7 +150,7 @@ static struct target_so_ops powerpc_so_ops;\n \tExamine the PLT again.  Note that the loading of the shared\n \tlibrary has initialized the PLT to code which loads a constant\n \t(which I think is an index into the GOT) into r11 and then\n-\tbranchs a short distance to the code which actually does the\n+\tbranches a short distance to the code which actually does the\n \tresolving.\n \n \t    (gdb) x/2i 0x100409d4"
    },
    {
      "sha": "ceae0897ad31caf909ee4354d5024d5049b8e4f6",
      "filename": "gdb/ppc-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ppc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ppc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-tdep.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -433,7 +433,7 @@ extern int ppc_process_record (struct gdbarch *gdbarch,\n /* Instruction size.  */\n #define PPC_INSN_SIZE 4\n \n-/* Estimate for the maximum number of instrctions in a function epilogue.  */\n+/* Estimate for the maximum number of instructions in a function epilogue.  */\n #define PPC_MAX_EPILOGUE_INSTRUCTIONS  52\n \n #endif /* ppc-tdep.h */"
    },
    {
      "sha": "c281648b99bff35a98f0c3e10224a6e34ee99357",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -140,7 +140,7 @@ struct program_space\n \n   typedef next_adapter<struct objfile> objfiles_range;\n \n-  /* Return an iterarable object that can be used to iterate over all\n+  /* Return an iterable object that can be used to iterate over all\n      objfiles.  The basic use is in a foreach, like:\n \n      for (objfile *objf : pspace->objfiles ()) { ... }  */"
    },
    {
      "sha": "622830ecbb317ec41b52c35dd2bb45f50ceb3d5f",
      "filename": "gdb/prologue-value.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/prologue-value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/prologue-value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/prologue-value.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -121,7 +121,7 @@ enum prologue_value_kind\n    understand and maintain.  In the approach used here:\n \n    - It's easier to see that the analyzer is correct: you just see\n-     whether the analyzer properly (albiet conservatively) simulates\n+     whether the analyzer properly (albeit conservatively) simulates\n      the effect of each instruction.\n \n    - It's easier to extend the analyzer: you can add support for new"
    },
    {
      "sha": "4ea2bcc284254d9af17183b4b76f9592fb2ce1a3",
      "filename": "gdb/python/py-evtregistry.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/python/py-evtregistry.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/python/py-evtregistry.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-evtregistry.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -112,7 +112,7 @@ gdbpy_initialize_eventregistry (void)\n \t\t\t\t (PyObject *) &eventregistry_object_type);\n }\n \n-/* Retern the number of listeners currently connected to this\n+/* Return the number of listeners currently connected to this\n    registry.  */\n \n int"
    },
    {
      "sha": "2e5a9ac1abfa6cd2dc590e52a95de4c6236ef8b3",
      "filename": "gdb/python/py-instruction.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/python/py-instruction.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/python/py-instruction.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-instruction.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -24,7 +24,7 @@\n \n /* Python type object for the abstract gdb.Instruction class.  This class\n    contains getters for four elements: \"pc\" (int), \"data\" (buffer), \"decode\"\n-   (str) and \"size\" (int) that must be overriden by sub classes.  */\n+   (str) and \"size\" (int) that must be overridden by sub classes.  */\n extern PyTypeObject py_insn_type;\n \n #endif /* PYTHON_PY_INSTRUCTION_H */"
    },
    {
      "sha": "3fd4007fd659d1eaa4cc5c6503b6ea682706d6fc",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1861,7 +1861,7 @@ record_btrace_frame_dealloc_cache (struct frame_info *self, void *this_cache)\n }\n \n /* btrace recording does not store previous memory content, neither the stack\n-   frames content.  Any unwinding would return errorneous results as the stack\n+   frames content.  Any unwinding would return erroneous results as the stack\n    contents no longer matches the changed PC value restored from history.\n    Therefore this unwinder reports any possibly unwound registers as\n    <unavailable>.  */"
    },
    {
      "sha": "5502a019c266d81d1adbeb5e8a8f96a5ca2c12b7",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -53,7 +53,7 @@\n    mode, and we build up an execution log in which, for each executed\n    instruction, we record all changes in memory and register state.\n    This is invisible to the user, to whom it just looks like an\n-   ordinary debugging session (except for performance degredation).\n+   ordinary debugging session (except for performance degradation).\n \n    In replay mode, instead of actually letting the inferior run as a\n    process, we simulate its execution by playing back the recorded"
    },
    {
      "sha": "8ea52d355ae924a5fa39a871bb7974db345c2dff",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -2829,7 +2829,7 @@ remote_target::thread_name (struct thread_info *info)\n \n /* About these extended threadlist and threadinfo packets.  They are\n    variable length packets but, the fields within them are often fixed\n-   length.  They are redundent enough to send over UDP as is the\n+   length.  They are redundant enough to send over UDP as is the\n    remote protocol in general.  There is a matching unit test module\n    in libstub.  */\n "
    },
    {
      "sha": "9c4df4a61d69f166ec6524748d668a44cf7d87a0",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1360,7 +1360,7 @@ rs6000_skip_stack_check (struct gdbarch *gdbarch, const CORE_ADDR start_pc)\n       return pc;\n     }\n \n-  /* Third sequence: No probe; instead, a comparizon between the stack size\n+  /* Third sequence: No probe; instead, a comparison between the stack size\n      limit (saved in a run-time global variable) and the current stack\n      pointer:\n "
    },
    {
      "sha": "37f64b5d08264b873b79773b774edf03895f2d56",
      "filename": "gdb/ser-tcp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ser-tcp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/ser-tcp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-tcp.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -307,7 +307,7 @@ net_open (struct serial *scb, const char *name)\n   /* Flag to indicate whether we've got a connection refused.  It will\n      be true if any of the connections tried was refused.  */\n   bool got_connrefused;\n-  /* If a connection succeeeds, SUCCESS_AINFO will point to the\n+  /* If a connection succeeds, SUCCESS_AINFO will point to the\n      'struct addrinfo' that succeed.  */\n   struct addrinfo *success_ainfo = NULL;\n   unsigned int polls = 0;"
    },
    {
      "sha": "6b4cf2052286e402239fa2743ef886598a774986",
      "filename": "gdb/sol-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/sol-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/sol-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol-thread.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -22,7 +22,7 @@\n    to provide access to the Solaris user-mode thread implementation.\n \n    Solaris threads are true user-mode threads, which are invoked via\n-   the thr_* and pthread_* (native and POSIX respectivly) interfaces.\n+   the thr_* and pthread_* (native and POSIX respectively) interfaces.\n    These are mostly implemented in user-space, with all thread context\n    kept in various structures that live in the user's heap.  These\n    should not be confused with lightweight processes (LWPs), which are\n@@ -253,7 +253,7 @@ td_err_string (td_err_e errcode)\n   return buf;\n }\n \n-/* Return the libthread_db state string assicoated with STATECODE.\n+/* Return the libthread_db state string associated with STATECODE.\n    If STATECODE is unknown, return an appropriate message.  */\n \n static const char *"
    },
    {
      "sha": "0a8a9beae42f7049fe81dc727c03540cee055cff",
      "filename": "gdb/sparc-sol2-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/sparc-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/sparc-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-sol2-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -239,7 +239,7 @@ sparc_sol2_static_transform_name (const char *name)\n      be incorrect in some places, at least for SPARC.  The\n      globalization prefix is encoded into an N_OPT stab, with the form\n      \"G=<prefix>\".  The globalization prefix always seems to start\n-     with a dollar sign '$'; a dot '.' is used as a seperator.  So we\n+     with a dollar sign '$'; a dot '.' is used as a separator.  So we\n      simply strip everything up until the last dot.  */\n \n   if (name[0] == '$')"
    },
    {
      "sha": "873fbaa49b73601c06a3a7faf508f441cc2d2993",
      "filename": "gdb/sparc64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/sparc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/sparc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1199,7 +1199,7 @@ sparc64_16_byte_align_p (struct type *type)\n \n /* Store floating fields of element ELEMENT of an \"parameter array\"\n    that has type TYPE and is stored at BITPOS in VALBUF in the\n-   apropriate registers of REGCACHE.  This function can be called\n+   appropriate registers of REGCACHE.  This function can be called\n    recursively and therefore handles floating types in addition to\n    structures.  */\n "
    },
    {
      "sha": "b99ac201f8474db3717086c71284b581fba3006d",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -4548,7 +4548,7 @@ cleanup_undefined_types_1 (void)\n   undef_types_length = 0;\n }\n \n-/* Try to fix all the undefined types we ecountered while processing\n+/* Try to fix all the undefined types we encountered while processing\n    this unit.  */\n \n void"
    },
    {
      "sha": "835aed9d7afbde6cbba01d92999aa08c155bdfef",
      "filename": "gdb/stubs/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/ChangeLog?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1,3 +1,10 @@\n+2019-10-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* ia64vms-stub.c: Fix typos in comments.\n+\t* m32r-stub.c: Same.\n+\t* m68k-stub.c: Same.\n+\t* sh-stub.c: Same.\n+\n 2019-01-21  Tom Tromey  <tom@tromey.com>\n \n \t* ia64vms-stub.c: Fix includes."
    },
    {
      "sha": "ccf420382e46dae166fa3b3ac027665e424732a9",
      "filename": "gdb/stubs/ia64vms-stub.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/ia64vms-stub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/ia64vms-stub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/ia64vms-stub.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1924,7 +1924,7 @@ sock_write (const unsigned char *buf, int len)\n     }\n }\n \n-/* Compute the cheksum and send the packet.  */\n+/* Compute the checksum and send the packet.  */\n \n static void\n send_pkt (void)\n@@ -2251,7 +2251,7 @@ excp_handler (struct chf$signal_array *sig,\n   /* Self protection.  FIXME: Should be per thread ?  */\n   static int in_handler = 0;\n \n-  /* Completly ignore some conditions (signaled indirectly by this stub).  */\n+  /* Completely ignore some conditions (signaled indirectly by this stub).  */\n   switch (code)\n     {\n     case LIB$_KEYNOTFOU & STS$M_COND_ID:"
    },
    {
      "sha": "40d0ca004063479db1717020bb321fa519b0313f",
      "filename": "gdb/stubs/m32r-stub.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/m32r-stub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/m32r-stub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/m32r-stub.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -542,7 +542,7 @@ handle_exception (int exceptionVector)\n \n /* qCRC support */\n \n-/* Table used by the crc32 function to calcuate the checksum. */\n+/* Table used by the crc32 function to calculate the checksum.  */\n static unsigned long crc32_table[256] = { 0, 0 };\n \n static unsigned long"
    },
    {
      "sha": "7f78a96adbdc3794ef10dd2aa3b4062cb6e23dc7",
      "filename": "gdb/stubs/m68k-stub.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/m68k-stub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/m68k-stub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/m68k-stub.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -45,7 +45,7 @@\n  *  program counter and status register onto the supervisor stack and then\n  *  transfers execution to a location specified in it's vector table.\n  *  The handlers for the exception vectors are hardwired to jmp to an address\n- *  given by the relation:  (exception - 256) * 6.  These are decending \n+ *  given by the relation:  (exception - 256) * 6.  These are descending\n  *  addresses starting from -6, -12, -18, ...  By allowing 6 bytes for\n  *  each entry, a jsr, jmp, bsr, ... can be used to enter the exception \n  *  handler.  Using a jsr to handle an exception has an added benefit of"
    },
    {
      "sha": "c0d14f187921a4e1955a67dedd6aed2484b5f04e",
      "filename": "gdb/stubs/sh-stub.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/sh-stub.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/stubs/sh-stub.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stubs/sh-stub.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -111,7 +111,7 @@\n \t\t\t\t\tr... = register contents\n \tor...\t\tWAA\t\tThe process exited, and AA is\n \t\t\t\t\tthe exit status.  This is only\n-\t\t\t\t\tapplicable for certains sorts of\n+\t\t\t\t\tapplicable for certain sorts of\n \t\t\t\t\ttargets.\n \tkill request\tk\n \n@@ -137,7 +137,7 @@\n \n \tResponses can be run-length encoded to save space.  A '*' means that\n \tthe next character is an ASCII encoding giving a repeat count which\n-\tstands for that many repititions of the character preceding the '*'.\n+\tstands for that many repetitions of the character preceding the '*'.\n \tThe encoding is n+29, yielding a printable character where n >=3 \n \t(which is where rle starts to win).  Don't use an n > 126. \n "
    },
    {
      "sha": "c5d226ec0d176bbea94288349142f5427178b5f1",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1044,7 +1044,7 @@ finish_new_objfile (struct objfile *objfile, symfile_add_flags add_flags)\n    For NAME description see the objfile constructor.\n \n    ADD_FLAGS encodes verbosity, whether this is main symbol file or\n-   extra, such as dynamically loaded code, and what to do with breakpoins.\n+   extra, such as dynamically loaded code, and what to do with breakpoints.\n \n    ADDRS is as described for syms_from_objfile_1, above.\n    ADDRS is ignored when SYMFILE_MAINLINE bit is set in ADD_FLAGS."
    },
    {
      "sha": "53003839adee09c21a59130012a1fea11113f30d",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1044,7 +1044,7 @@ struct symbol_block_ops\n      register, the CFA as defined by DWARF unwinding information, ...\n \n      So this specific method is supposed to compute the frame base address such\n-     as for nested fuctions, the static link computes the same address.  For\n+     as for nested functions, the static link computes the same address.  For\n      instance, considering DWARF debugging information, the static link is\n      computed with DW_AT_static_link and this method must be used to compute\n      the corresponding DW_AT_frame_base attribute.  */"
    },
    {
      "sha": "7c9befcc1c2a50aeb96ad19a55c5da857c7a6185",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -140,7 +140,7 @@ static int show_memory_breakpoints = 0;\n \n /* These globals control whether GDB attempts to perform these\n    operations; they are useful for targets that need to prevent\n-   inadvertant disruption, such as in non-stop mode.  */\n+   inadvertent disruption, such as in non-stop mode.  */\n \n bool may_write_registers = true;\n "
    },
    {
      "sha": "417c2899f029193ed900a5cb11235bd09175dd18",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1,3 +1,15 @@\n+2019-10-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/bigcore.c: Fix typos in comments.\n+\t* gdb.base/ctf-ptype.c: Same.\n+\t* gdb.base/long_long.c: Same.\n+\t* gdb.dwarf2/dw2-op-out-param.S: Same.\n+\t* gdb.python/py-evthreads.c: Same.\n+\t* gdb.reverse/i387-stack-reverse.c: Same.\n+\t* gdb.trace/tfile.c: Same.\n+\t* lib/compiler.c: Same.\n+\t* lib/compiler.cc: Same.\n+\n 2019-10-25  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.reverse/sigall-precsave.exp: Use -wrap and $gdb_test_name in"
    },
    {
      "sha": "3ac7ca90b6d92e8d56df65a87010a6cd4c75486c",
      "filename": "gdb/testsuite/gdb.base/bigcore.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.base/bigcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.base/bigcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/bigcore.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -121,7 +121,7 @@ maximize_rlimit (int resource, const char *prefix)\n   print_string (\"\\n\");\n }\n \n-/* Maintain a doublely linked list.  */\n+/* Maintain a doubly linked list.  */\n struct list\n {\n   struct list *next;\n@@ -194,7 +194,7 @@ main ()\n   }\n   \n   /* Compute an initial chunk size.  The math is dodgy but it works\n-     for the moment.  Perhaphs there's a constant around somewhere.\n+     for the moment.  Perhaps there's a constant around somewhere.\n      Limit this to max_core_size bytes - no point in trying to\n      allocate more than can be written to the corefile.  */\n   {"
    },
    {
      "sha": "5d3580d9b7f02b258bc3782f8c9932cb49049bba",
      "filename": "gdb/testsuite/gdb.base/ctf-ptype.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.base/ctf-ptype.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.base/ctf-ptype.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ctf-ptype.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -17,7 +17,7 @@\n \n /*\n  *\tTest file with lots of different types, for testing the\n- *\t\"ptype\" command on CTF data. It's devired from ptype.c.\n+ *\t\"ptype\" command on CTF data. It's derived from ptype.c.\n  */\n \n /*"
    },
    {
      "sha": "24515856fa61334e01d72dd21d0a46f193780a25",
      "filename": "gdb/testsuite/gdb.base/long_long.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.base/long_long.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.base/long_long.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/long_long.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -80,7 +80,7 @@ int known_types()\n \n int main() {\n \n-   /* Pack Byte, Half, Word and Giant arrays with byte-orderd values.\n+   /* Pack Byte, Half, Word and Giant arrays with byte-ordered values.\n       That way \"(gdb) x\" gives the same output on different\n       architectures.  */\n    pack (b, 1, 2);"
    },
    {
      "sha": "169eb04d73ac589f742c04c354ac0a0d3325c188",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-op-out-param.S",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.dwarf2/dw2-op-out-param.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.dwarf2/dw2-op-out-param.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-op-out-param.S?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -28,7 +28,7 @@\n    like gdb to behave in a user friendly, and helpful way when presented\n    with such dwarf.  */\n \n-/* There are 4 test cases in this assembler file.  In each case funcion\n+/* There are 4 test cases in this assembler file.  In each case function\n    main calls each test function in turn, each test case then calls the\n    breakpt function.\n "
    },
    {
      "sha": "f82494509a4a7c964ff7f415f771e4e2f3c860e9",
      "filename": "gdb/testsuite/gdb.python/py-evthreads.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.python/py-evthreads.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.python/py-evthreads.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-evthreads.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -33,7 +33,7 @@ void* thread3 (void* d)\n void* thread2 (void* d)\n {\n   /* Do not quit thread3 asynchronously wrt thread2 stop - wait first on\n-     thread3_id to stop.  It would complicate testcase receiption of the\n+     thread3_id to stop.  It would complicate testcase reception of the\n      events.  */\n \n   pthread_create (&thread3_id, NULL, thread3, NULL); pthread_join (thread3_id, NULL);"
    },
    {
      "sha": "93d3f4629ad5dc8379569cb589015305a7b567f9",
      "filename": "gdb/testsuite/gdb.reverse/i387-stack-reverse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.reverse/i387-stack-reverse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.reverse/i387-stack-reverse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.reverse/i387-stack-reverse.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -14,7 +14,7 @@ void empty_fpu_stack()\n        \"ffree %st(7)\");\n }   \n \n-/* tests floating point arithmatic */\n+/* tests floating point arithmetic */\n void test_arith_floats()\n {\n   "
    },
    {
      "sha": "402a2d5000a4bab69025825cee5a6d62e7dcf3a6",
      "filename": "gdb/testsuite/gdb.trace/tfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.trace/tfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/gdb.trace/tfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.trace/tfile.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -176,7 +176,7 @@ write_basic_trace_file (void)\n \n   /* Make up a simulated trace buffer.  */\n   /* (Encapsulate better if we're going to do lots of this; note that\n-     buffer endianness is the target program's enddianness.) */\n+     buffer endianness is the target program's endianness.) */\n   trptr = trbuf;\n   tfile_write_16 (1);\n "
    },
    {
      "sha": "917b4eec546fb60ea470d5e0a82edf87acf7291b",
      "filename": "gdb/testsuite/lib/compiler.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/lib/compiler.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/lib/compiler.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/compiler.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -45,7 +45,7 @@ set compiler_info [join {gcc __GNUC__ __GNUC_MINOR__ \"unknown\"} -]\n \n #if defined (__xlc__)\n /* IBM'x xlc compiler. NOTE:  __xlc__ expands to a double quoted string of four\n-   numbers seperated by '.'s: currently \"7.0.0.0\" */\n+   numbers separated by '.'s: currently \"7.0.0.0\" */\n set need_a_set [regsub -all {\\.} [join {xlc __xlc__} -] - compiler_info]\n #endif\n "
    },
    {
      "sha": "a9e69ba8a2fb96265a0b20a11064f129cd2bb28c",
      "filename": "gdb/testsuite/lib/compiler.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/lib/compiler.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/testsuite/lib/compiler.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/compiler.cc?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -33,7 +33,7 @@ set compiler_info [join {gcc __GNUC__ __GNUC_MINOR__ \"unknown\"} -]\n \n #if defined (__xlc__)\n /* IBM'x xlc compiler. NOTE:  __xlc__ expands to a double quoted string of four\n-   numbers seperated by '.'s: currently \"7.0.0.0\" */\n+   numbers separated by '.'s: currently \"7.0.0.0\" */\n set need_a_set [regsub -all {\\.} [join {xlc __xlc__} -] - compiler_info]\n #endif\n "
    },
    {
      "sha": "d62783932b3c8988597787a4a3b10da6051a3c44",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -2136,7 +2136,7 @@ tfind_1 (enum trace_find_type type, int num,\n \t DON'T give an error, but DO change the state of\n \t traceframe_number etc. to invalid.\n \n-\t The rationalle is that if you typed the command, you\n+\t The rationale is that if you typed the command, you\n \t might just have committed a typo or something, and you'd\n \t like to NOT lose your current debugging state.  However\n \t if you're in a user-defined command or especially in a"
    },
    {
      "sha": "8af15735aa1009c1c24de1e7e9b980a087babc88",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -181,7 +181,7 @@ struct tui_win_info : public tui_gen_win_info\n   {\n   }\n \n-  /* Set whether this window is highglighted.  */\n+  /* Set whether this window is highlighted.  */\n   void set_highlight (bool highlight)\n   {\n     is_highlighted = highlight;"
    },
    {
      "sha": "964f2e3323f03bda41887f2dacb8a4ae08cfabdc",
      "filename": "gdb/tui/tui-io.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui-io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui-io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -90,7 +90,7 @@ key_is_start_sequence (int ch)\n    be garbled.  This is implemented with a pipe that TUI reads and\n    readline writes to.  A gdb input handler is created so that reading\n    the pipe is handled automatically.  This will probably not work on\n-   non-Unix platforms.  The best fix is to make readline clean enougth\n+   non-Unix platforms.  The best fix is to make readline clean enough\n    so that is never write on stdout.\n \n    Note SCz/2002-09-01: we now use more readline hooks and it seems"
    },
    {
      "sha": "6df5ea2fb0220f5d5be4fe385ca4caecf0b041d1",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1050,7 +1050,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t  second_win = *(tui_source_windows ().begin ());\n \t\t}\n \t      if (primary_win_info == TUI_CMD_WIN)\n-\t\t{ /* Split the change in height accross the 1st & 2nd\n+\t\t{ /* Split the change in height across the 1st & 2nd\n \t\t     windows, adjusting them as well.  */\n \t\t  /* Subtract the locator.  */\n \t\t  int first_split_diff = diff / 2;\n@@ -1072,7 +1072,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t\t    second_split_diff++;\n \t\t\t}\n \t\t    }\n-\t\t  /* Make sure that the minimum hieghts are\n+\t\t  /* Make sure that the minimum heights are\n \t\t     honored.  */\n \t\t  while ((first_win->height + first_split_diff) < 3)\n \t\t    {"
    },
    {
      "sha": "15683517842155f278262982d8dabc2b8e33e07a",
      "filename": "gdb/tui/tui.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/tui/tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -405,7 +405,7 @@ tui_enable (void)\n   if (tui_active)\n     return;\n \n-  /* To avoid to initialize curses when gdb starts, there is a defered\n+  /* To avoid to initialize curses when gdb starts, there is a deferred\n      curses initialization.  This initialization is made only once\n      and the first time the curses mode is entered.  */\n   if (tui_finish_init)"
    },
    {
      "sha": "541d03055258b0fd589c2bb5cd4b3cbf5fba52b4",
      "filename": "gdb/unittests/rsp-low-selftests.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/unittests/rsp-low-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/unittests/rsp-low-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/rsp-low-selftests.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -34,7 +34,7 @@ static void test_hex2bin_byte_vector ()\n   bv = hex2bin (\"\");\n   SELF_CHECK (bv.size () == 0);\n \n-  /* Test a well-formated hex string.  */\n+  /* Test a well-formatted hex string.  */\n   bv = hex2bin (\"abcd01\");\n   SELF_CHECK (bv.size () == 3);\n   SELF_CHECK (bv[0] == 0xab);"
    },
    {
      "sha": "06aee241e1eec8cd9554023917f0bcbde3c925c9",
      "filename": "gdb/user-regs.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/user-regs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/user-regs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/user-regs.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -36,7 +36,7 @@\n /* TODO: cagney/2003-06-27: Need to think more about how these\n    registers are added, read, and modified.  At present they are kind\n    of assumed to be read-only.  Should it, for instance, return a\n-   register descriptor that contains all the relvent access methods.  */\n+   register descriptor that contains all the relevant access methods.  */\n \n struct frame_info;\n struct gdbarch;"
    },
    {
      "sha": "0c133d15614948707b4380f03bbc19ef545a326b",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1281,7 +1281,7 @@ init_page_info (void)\n \t  || getenv (\"EMACS\") || getenv (\"INSIDE_EMACS\"))\n \t{\n \t  /* The number of lines per page is not mentioned in the terminal\n-\t     description or EMACS evironment variable is set.  This probably\n+\t     description or EMACS environment variable is set.  This probably\n \t     means that paging is not useful, so disable paging.  */\n \t  lines_per_page = UINT_MAX;\n \t}\n@@ -3098,7 +3098,7 @@ parse_pid_to_attach (const char *args)\n   return pid;\n }\n \n-/* Substitute all occurences of string FROM by string TO in *STRINGP.  *STRINGP\n+/* Substitute all occurrences of string FROM by string TO in *STRINGP.  *STRINGP\n    must come from xrealloc-compatible allocator and it may be updated.  FROM\n    needs to be delimited by IS_DIR_SEPARATOR or DIRNAME_SEPARATOR (or be\n    located at the start or end of *STRINGP.  */"
    },
    {
      "sha": "79c8a6fc8d823d7f58672a64b998ea5e4d18a2c9",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -125,7 +125,7 @@ void reset_prompt_for_continue_wait_time (void);\n /* Return the time spent in prompt_for_continue.  */\n std::chrono::steady_clock::duration get_prompt_for_continue_wait_time ();\n \f\n-/* Parsing utilites.  */\n+/* Parsing utilities.  */\n \n extern int parse_pid_to_attach (const char *args);\n "
    },
    {
      "sha": "7f1b24fd539cd8883a24f16d506957544f3788c1",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -335,7 +335,7 @@ value_user_defined_op (struct value **argp, gdb::array_view<value *> args,\n    arg1.operator @ (arg1,arg2) and return that value (where '@' is any\n    binary operator which is legal for GNU C++).\n \n-   OP is the operatore, and if it is BINOP_ASSIGN_MODIFY, then OTHEROP\n+   OP is the operator, and if it is BINOP_ASSIGN_MODIFY, then OTHEROP\n    is the opcode saying how to modify it.  Otherwise, OTHEROP is\n    unused.  */\n "
    },
    {
      "sha": "bfdd781aa96821dd94ea09ed070b1a288f9aa538",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -2820,7 +2820,7 @@ find_overload_match (gdb::array_view<value *> args,\n    contained in QUALIFIED_NAME until it either finds a good match or\n    runs out of namespaces.  It stores the overloaded functions in\n    *OLOAD_SYMS, and the badness vector in *OLOAD_CHAMP_BV.  If NO_ADL,\n-   argument dependent lookup is not performned.  */\n+   argument dependent lookup is not performed.  */\n \n static int\n find_oload_champ_namespace (gdb::array_view<value *> args,"
    },
    {
      "sha": "e0eb8e1839789b25bb0618f7ab18395983488db7",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1720,7 +1720,7 @@ print_decimal_chars (struct ui_file *stream, const gdb_byte *valaddr,\n    * decimal.\n    *\n    * Given a hex number (in nibbles) as XYZ, we start by taking X and\n-   * decemalizing it as \"x1 x2\" in two decimal nibbles.  Then we multiply\n+   * decimalizing it as \"x1 x2\" in two decimal nibbles.  Then we multiply\n    * the nibbles by 16, add Y and re-decimalize.  Repeat with Z.\n    *\n    * The trick is that \"digits\" holds a base-10 number, but sometimes"
    },
    {
      "sha": "24b731ab35726c4f8cba5c73e3aafada7d67d1a8",
      "filename": "gdb/valprint.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/valprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -260,7 +260,7 @@ extern void print_command_completer (struct cmd_list_element *ignore,\n    symbols won't be used except in instances where no symbol was\n    found; otherwise, a minsym might be used in some instances (mostly\n    involving function with non-contiguous address ranges).  Return\n-   0 in case of success, when all the info in the OUT paramters is\n+   0 in case of success, when all the info in the OUT parameters is\n    valid.  Return 1 otherwise.  */\n \n extern int build_address_symbolic (struct gdbarch *,"
    },
    {
      "sha": "47e647afb4c420e0f8fafce15f9085dabd583c33",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -2153,7 +2153,7 @@ value_of_internalvar (struct gdbarch *gdbarch, struct internalvar *var)\n      on this value go back to affect the original internal variable.\n \n      Do not do this for INTERNALVAR_MAKE_VALUE variables, as those have\n-     no underlying modifyable state in the internal variable.\n+     no underlying modifiable state in the internal variable.\n \n      Likewise, if the variable's value is a computed lvalue, we want\n      references to it to produce another computed lvalue, where"
    },
    {
      "sha": "2b5d784a577a74c957ce8bba16b221f7c3337b66",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -568,7 +568,7 @@ extern void mark_value_bits_unavailable (struct value *value,\n    Optimized-out contents are equal to optimized-out contents, and are\n    not equal to non-optimized-out contents.\n \n-   Unavailable contente are equal to unavailable contents, and are not\n+   Unavailable contents are equal to unavailable contents, and are not\n    equal to non-unavailable contents.\n \n    For example, if 'x's represent an unavailable byte, and 'V' and 'Z'"
    },
    {
      "sha": "b7ee619a7784a43445d9a568b449970194792a7c",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1299,7 +1299,7 @@ install_new_value (struct varobj *var, struct value *value, bool initial)\n \t{\n \t  /* For variables that are frozen, or are children of frozen\n \t     variables, we don't do fetch on initial assignment.\n-\t     For non-initial assignemnt we do the fetch, since it means we're\n+\t     For non-initial assignment we do the fetch, since it means we're\n \t     explicitly asked to compare the new value with the old one.  */\n \t  intentionally_not_fetched = true;\n \t}"
    },
    {
      "sha": "36b061b8e79d1bf6b8df04e5a0ff6883f68fecfb",
      "filename": "gdb/x86-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/x86-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/x86-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-nat.h?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -1,6 +1,6 @@\n /* Native-dependent code for x86 (i386 and x86-64).\n \n-   Low level functions to implement Oeprating System specific\n+   Low level functions to implement Operating System specific\n    code to manipulate x86 debug registers.\n \n    Copyright (C) 2009-2019 Free Software Foundation, Inc."
    },
    {
      "sha": "2a430bf527f30bbc45e9671600e6760a8e564118",
      "filename": "gdb/xtensa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/xtensa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30baf67b6505d903bf678f9a0ba3645eb337ce49/gdb/xtensa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xtensa-tdep.c?ref=30baf67b6505d903bf678f9a0ba3645eb337ce49",
      "patch": "@@ -638,7 +638,7 @@ xtensa_pseudo_register_write (struct gdbarch *gdbarch,\n   DEBUGTRACE (\"xtensa_pseudo_register_write (... regnum = %d (%s) ...)\\n\",\n \t      regnum, xtensa_register_name (gdbarch, regnum));\n \n-  /* Renumber register, if aliase a0..a15 on Windowed ABI.  */\n+  /* Renumber register, if aliases a0..a15 on Windowed ABI.  */\n   if (gdbarch_tdep (gdbarch)->isa_use_windowed_registers\n       && (regnum >= gdbarch_tdep (gdbarch)->a0_base)\n       && (regnum <= gdbarch_tdep (gdbarch)->a0_base + 15))"
    }
  ]
}