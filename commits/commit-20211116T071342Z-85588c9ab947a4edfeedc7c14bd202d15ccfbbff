{
  "sha": "85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
  "node_id": "C_kwDOANOeidoAKDg1NTg4YzlhYjk0N2E0ZWRmZWVkYzdjMTRiZDIwMmQxNWNjZmJiZmY",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T06:26:47Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T07:13:42Z"
    },
    "message": "sim: syscall: hoist argc/argn/argnlen to common code\n\nNow that the callback framework supports argv & envp, we can move\nthe Blackfin implementation of these syscalls to the common code.",
    "tree": {
      "sha": "87aaa3c6e70ba77ea654eacc5dc85e924060749f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/87aaa3c6e70ba77ea654eacc5dc85e924060749f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85588c9ab947a4edfeedc7c14bd202d15ccfbbff/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fab6939b01da06e1b5f423a8c7f72160b0a1e35d"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 40,
    "deletions": 33
  },
  "files": [
    {
      "sha": "f41e9b1bd7bb6c3ff2346c383115787716d2c5a9",
      "filename": "sim/bfin/interp.c",
      "status": "modified",
      "additions": 0,
      "deletions": 33,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85588c9ab947a4edfeedc7c14bd202d15ccfbbff/sim/bfin/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85588c9ab947a4edfeedc7c14bd202d15ccfbbff/sim/bfin/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bfin/interp.c?ref=85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
      "patch": "@@ -144,39 +144,6 @@ bfin_syscall (SIM_CPU *cpu)\n       tbuf += sprintf (tbuf, \"exit(%i)\", args[0]);\n       sim_engine_halt (sd, cpu, NULL, PCREG, sim_exited, sc.arg1);\n \n-#ifdef CB_SYS_argc\n-    case CB_SYS_argc:\n-      tbuf += sprintf (tbuf, \"argc()\");\n-      sc.result = countargv ((char **)argv);\n-      break;\n-    case CB_SYS_argnlen:\n-      {\n-      tbuf += sprintf (tbuf, \"argnlen(%u)\", args[0]);\n-\tif (sc.arg1 < countargv ((char **)argv))\n-\t  sc.result = strlen (argv[sc.arg1]);\n-\telse\n-\t  sc.result = -1;\n-      }\n-      break;\n-    case CB_SYS_argn:\n-      {\n-\ttbuf += sprintf (tbuf, \"argn(%u)\", args[0]);\n-\tif (sc.arg1 < countargv ((char **)argv))\n-\t  {\n-\t    const char *argn = argv[sc.arg1];\n-\t    int len = strlen (argn);\n-\t    int written = sc.write_mem (cb, &sc, sc.arg2, argn, len + 1);\n-\t    if (written == len + 1)\n-\t      sc.result = sc.arg2;\n-\t    else\n-\t      sc.result = -1;\n-\t  }\n-\telse\n-\t  sc.result = -1;\n-      }\n-      break;\n-#endif\n-\n     case CB_SYS_gettimeofday:\n       {\n \tstruct timeval _tv, *tv = &_tv;"
    },
    {
      "sha": "df9dd92e6dac43eb2f21f881cd5d94b2a02a2603",
      "filename": "sim/common/syscall.c",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85588c9ab947a4edfeedc7c14bd202d15ccfbbff/sim/common/syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85588c9ab947a4edfeedc7c14bd202d15ccfbbff/sim/common/syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/syscall.c?ref=85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
      "patch": "@@ -141,6 +141,46 @@ cb_syscall (host_callback *cb, CB_SYSCALL *sc)\n \n   switch (cb_target_to_host_syscall (cb, sc->func))\n     {\n+    case CB_SYS_argc:\n+      result = countargv (cb->argv);\n+      break;\n+\n+    case CB_SYS_argnlen:\n+      {\n+\tif (sc->arg1 >= 0 && sc->arg1 < countargv (cb->argv))\n+\t  result = strlen (cb->argv[sc->arg1]);\n+\telse\n+\t  {\n+\t    result = -1;\n+\t    errcode = EINVAL;\n+\t  }\n+      }\n+      break;\n+\n+    case CB_SYS_argn:\n+      {\n+\tif (sc->arg1 >= 0 && sc->arg1 < countargv (cb->argv))\n+\t  {\n+\t    const char *argn = cb->argv[sc->arg1];\n+\t    int len = strlen (argn);\n+\t    int written = sc->write_mem (cb, sc, sc->arg2, argn, len + 1);\n+\n+\t    if (written == len + 1)\n+\t      result = sc->arg2;\n+\t    else\n+\t      {\n+\t\tresult = -1;\n+\t\terrcode = EINVAL;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    result = -1;\n+\t    errcode = EINVAL;\n+\t  }\n+      }\n+      break;\n+\n     case CB_SYS_argvlen :\n       {\n \t/* Compute how much space is required to store the argv,envp"
    }
  ]
}