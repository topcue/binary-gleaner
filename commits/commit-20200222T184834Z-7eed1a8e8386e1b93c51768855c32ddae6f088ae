{
  "sha": "7eed1a8e8386e1b93c51768855c32ddae6f088ae",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2VlZDFhOGU4Mzg2ZTFiOTNjNTE3Njg4NTVjMzJkZGFlNmYwODhhZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:34Z"
    },
    "message": "Change TUI window iteration\n\nThis changes the TUI to track all the instantiated windows in a new\nglobal vector.  After this, iteration over TUI windows is done by\nsimply iterating over this vector.\n\nThis approach makes it simpler to define new window types.  In\nparticular, a subsequent patch will add the ability to define a TUI\nwindow from Python.\n\nNote that this series will not remove tui_win_list.  This will\ncontinue to exist in parallel, only because it was simpler to leave\nthis alone.  Perhaps it could still be removed in the future.\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (struct tui_source_window_iterator)\n\t<inner_iterator>: New etytypedef.\n\t<tui_source_window_iterator>: Take \"end\" parameter.\n\t<tui_source_window_iterator>: Take iterator.\n\t<operator*, advance>: Update.\n\t<m_iter>: Change type.\n\t<m_end>: New field.\n\t(struct tui_source_windows) <begin, end>: Update.\n\t* tui/tui-layout.c (tui_windows): New global.\n\t(tui_apply_current_layout): Clear tui_windows.\n\t(tui_layout_window::apply): Update tui_windows.\n\t* tui/tui-data.h (tui_windows): Declare.\n\t(all_tui_windows): Now inline function.\n\t(class tui_window_iterator, struct all_tui_windows): Remove.\n\nChange-Id: I6ab77976d6326f427178f725434f8f82046e0bbf",
    "tree": {
      "sha": "674c7c3a76e3a1f2f1eb1a1ce6d29467d5a03009",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/674c7c3a76e3a1f2f1eb1a1ce6d29467d5a03009"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7eed1a8e8386e1b93c51768855c32ddae6f088ae",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7eed1a8e8386e1b93c51768855c32ddae6f088ae",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7eed1a8e8386e1b93c51768855c32ddae6f088ae",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7eed1a8e8386e1b93c51768855c32ddae6f088ae/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7c043ba695a3cee067554b1e871e60f7934512b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c043ba695a3cee067554b1e871e60f7934512b4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7c043ba695a3cee067554b1e871e60f7934512b4"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 47,
    "deletions": 76
  },
  "files": [
    {
      "sha": "d0062218a2b70d7beeb4790f44a44524f05fdaf7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7eed1a8e8386e1b93c51768855c32ddae6f088ae",
      "patch": "@@ -1,3 +1,20 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (struct tui_source_window_iterator)\n+\t<inner_iterator>: New etytypedef.\n+\t<tui_source_window_iterator>: Take \"end\" parameter.\n+\t<tui_source_window_iterator>: Take iterator.\n+\t<operator*, advance>: Update.\n+\t<m_iter>: Change type.\n+\t<m_end>: New field.\n+\t(struct tui_source_windows) <begin, end>: Update.\n+\t* tui/tui-layout.c (tui_windows): New global.\n+\t(tui_apply_current_layout): Clear tui_windows.\n+\t(tui_layout_window::apply): Update tui_windows.\n+\t* tui/tui-data.h (tui_windows): Declare.\n+\t(all_tui_windows): Now inline function.\n+\t(class tui_window_iterator, struct all_tui_windows): Remove.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \tPR tui/17850:"
    },
    {
      "sha": "a4601373e11459aa4ee127abbb3dac7c96e73f7a",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 8,
      "deletions": 66,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=7eed1a8e8386e1b93c51768855c32ddae6f088ae",
      "patch": "@@ -238,74 +238,16 @@ extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n #define TUI_DATA_WIN    ((tui_data_window *) tui_win_list[DATA_WIN])\n #define TUI_CMD_WIN     ((tui_cmd_window *) tui_win_list[CMD_WIN])\n \n-/* An iterator that iterates over all windows.  */\n+/* All the windows that are currently instantiated, in layout\n+   order.  */\n+extern std::vector<tui_win_info *> tui_windows;\n \n-class tui_window_iterator\n+/* Return a range adapter for iterating over TUI windows.  */\n+static inline std::vector<tui_win_info *> &\n+all_tui_windows ()\n {\n-public:\n-\n-  typedef tui_window_iterator self_type;\n-  typedef struct tui_win_info *value_type;\n-  typedef struct tui_win_info *&reference;\n-  typedef struct tui_win_info **pointer;\n-  typedef std::forward_iterator_tag iterator_category;\n-  typedef int difference_type;\n-\n-  explicit tui_window_iterator (enum tui_win_type type)\n-    : m_type (type)\n-  {\n-    advance ();\n-  }\n-\n-  tui_window_iterator ()\n-    : m_type (MAX_MAJOR_WINDOWS)\n-  {\n-  }\n-\n-  bool operator!= (const self_type &other) const\n-  {\n-    return m_type != other.m_type;\n-  }\n-\n-  value_type operator* () const\n-  {\n-    gdb_assert (m_type < MAX_MAJOR_WINDOWS);\n-    return tui_win_list[m_type];\n-  }\n-\n-  self_type &operator++ ()\n-  {\n-    ++m_type;\n-    advance ();\n-    return *this;\n-  }\n-\n-private:\n-\n-  void advance ()\n-  {\n-    while (m_type < MAX_MAJOR_WINDOWS && tui_win_list[m_type] == nullptr)\n-      ++m_type;\n-  }\n-\n-  int m_type;\n-};\n-\n-/* A range adapter for iterating over TUI windows.  */\n-\n-struct all_tui_windows\n-{\n-  tui_window_iterator begin () const\n-  {\n-    return tui_window_iterator (SRC_WIN);\n-  }\n-\n-  tui_window_iterator end () const\n-  {\n-    return tui_window_iterator ();\n-  }\n-};\n-\n+  return tui_windows;\n+}\n \n /* Data Manipulation Functions.  */\n extern int tui_term_height (void);"
    },
    {
      "sha": "ad0484018e7fdaca8da057569e6bee2183b13db3",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=7eed1a8e8386e1b93c51768855c32ddae6f088ae",
      "patch": "@@ -61,11 +61,15 @@ static tui_layout_split *applied_skeleton;\n static tui_layout_split *src_regs_layout;\n static tui_layout_split *asm_regs_layout;\n \n+/* See tui-data.h.  */\n+std::vector<tui_win_info *> tui_windows;\n+\n /* See tui-layout.h.  */\n \n void\n tui_apply_current_layout ()\n {\n+  tui_windows.clear ();\n   applied_layout->apply (0, 0, tui_term_width (), tui_term_height ());\n }\n \n@@ -350,6 +354,8 @@ tui_layout_window::apply (int x_, int y_, int width_, int height_)\n   height = height_;\n   gdb_assert (m_window != nullptr);\n   m_window->resize (height, width, x, y);\n+  if (dynamic_cast<tui_win_info *> (m_window) != nullptr)\n+    tui_windows.push_back ((tui_win_info *) m_window);\n }\n \n /* See tui-layout.h.  */"
    },
    {
      "sha": "cae535fab07d438f0938aa089f076b6a4aeefeee",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 16,
      "deletions": 10,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7eed1a8e8386e1b93c51768855c32ddae6f088ae/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=7eed1a8e8386e1b93c51768855c32ddae6f088ae",
      "patch": "@@ -153,21 +153,25 @@ struct tui_source_window_iterator\n {\n public:\n \n+  typedef std::vector<tui_win_info *>::iterator inner_iterator;\n+\n   typedef tui_source_window_iterator self_type;\n   typedef struct tui_source_window_base *value_type;\n   typedef struct tui_source_window_base *&reference;\n   typedef struct tui_source_window_base **pointer;\n   typedef std::forward_iterator_tag iterator_category;\n   typedef int difference_type;\n \n-  explicit tui_source_window_iterator (bool dummy)\n-    : m_iter (SRC_WIN)\n+  explicit tui_source_window_iterator (const inner_iterator &it,\n+\t\t\t\t       const inner_iterator &end)\n+    : m_iter (it),\n+      m_end (end)\n   {\n     advance ();\n   }\n \n-  tui_source_window_iterator ()\n-    : m_iter (tui_win_type (DISASSEM_WIN + 1))\n+  explicit tui_source_window_iterator (const inner_iterator &it)\n+    : m_iter (it)\n   {\n   }\n \n@@ -178,7 +182,7 @@ struct tui_source_window_iterator\n \n   value_type operator* () const\n   {\n-    return (value_type) *m_iter;\n+    return dynamic_cast<tui_source_window_base *> (*m_iter);\n   }\n \n   self_type &operator++ ()\n@@ -192,12 +196,13 @@ struct tui_source_window_iterator\n \n   void advance ()\n   {\n-    tui_window_iterator end;\n-    while (m_iter != end && *m_iter == nullptr)\n+    while (m_iter != m_end\n+\t   && dynamic_cast<tui_source_window_base *> (*m_iter) == nullptr)\n       ++m_iter;\n   }\n \n-  tui_window_iterator m_iter;\n+  inner_iterator m_iter;\n+  inner_iterator m_end;\n };\n \n /* A range adapter for source windows.  */\n@@ -206,12 +211,13 @@ struct tui_source_windows\n {\n   tui_source_window_iterator begin () const\n   {\n-    return tui_source_window_iterator (true);\n+    return tui_source_window_iterator (tui_windows.begin (),\n+\t\t\t\t       tui_windows.end ());\n   }\n \n   tui_source_window_iterator end () const\n   {\n-    return tui_source_window_iterator ();\n+    return tui_source_window_iterator (tui_windows.end ());\n   }\n };\n "
    }
  ]
}