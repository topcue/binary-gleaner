{
  "sha": "54780889e9591f1951272e5baa861dc0fb8c0f02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTQ3ODA4ODllOTU5MWYxOTUxMjcyZTViYWE4NjFkYzBmYjhjMGYwMg==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2016-08-18T06:05:03Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-14T02:54:00Z"
    },
    "message": "sim: h8300: drop separate eightbit memory buffer\n\nThe h8300 sim has its own implementation for memory handling that I'd\nlike to replace with the common sim memory code.  However, it's got a\nweird bit of code it calls \"eightbit mem\" that makes this not as easy\nas it would otherwise be.  The code has this comment:\n/* These define the size of main memory for the simulator.\n\n   Note the size of main memory for the H8/300H is only 256k.  Keeping it\n   small makes the simulator run much faster and consume less memory.\n\n   The linker knows about the limited size of the simulator's main memory\n   on the H8/300H (via the h8300h.sc linker script).  So if you change\n   H8300H_MSIZE, be sure to fix the linker script too.\n\n   Also note that there's a separate \"eightbit\" area aside from main\n   memory.  For simplicity, the simulator assumes any data memory reference\n   outside of main memory refers to the eightbit area (in theory, this\n   can only happen when simulating H8/300H programs).  We make no attempt\n   to catch overlapping addresses, wrapped addresses, etc etc.  */\n\nI've read the H8/300 Programming Manual and the H8/300H Software Manual\nand can't find documentation on it.  The closest I can find is the bits\nabout the exception vectors, but that sounds like a convention where the\nfirst 256 bytes of memory are used for a special purpose.  The sim will\nactually allocate a sep memory buffer of 256 bytes and you address it by\naccessing anywhere outside of main memory.  e.g. I would expect code to\naccess it like:\n\tuint32_t *data = (void *)0;\n\tdata[0] = reset_exception_vector;\nnot like the sim expects like:\n\tuint8_t *data = (void *)0x1000000;\n\tdata[0] = ...;\n\nThe gcc manual has an \"eightbit_data\" attribute:\n\tUse this attribute on the H8/300, H8/300H, and H8S to indicate that\n\tthe specified variable should be placed into the eight-bit data\n\tsection. The compiler generates more efficient code for certain\n\toperations on data in the eight-bit data area. Note the eight-bit\n\tdata area is limited to 256 bytes of data.\n\nAnd the gcc code implies that it's accessed via special addressing:\n   eightbit_data: This variable lives in the 8-bit data area and can\n   be referenced with 8-bit absolute memory addresses.\n\nI'm fairly certain these are referring to the 8-bit addressing modes\nthat allow access to 0xff00 - 0xffff with only an 8-bit immediate.\nThey aren't completely separate address spaces which this eightbit\nmemory buffer occupies.\n\nBut the sim doesn't access its eightbit memory based on specific insns,\nit does it purely on the addresses requested.\n\nUnfortunately, much of this code was authored by Michael Snyder, so I\ncan't ask him :(.  I asked Renesas support and they didn't know:\nhttps://renesasrulz.com/the_vault/f/archive-forum/6952/question-about-eightbit-memory\n\nSo I've come to the conclusion that this was a little sim-specific hack\ndone for <some convenience> and has no relation to real hardware.  And\nas such, let's drop it until someone notices and can provide a reason\nfor why we need to support it.",
    "tree": {
      "sha": "cd68e465cd3901706f0e76923e8406f0522ae46a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd68e465cd3901706f0e76923e8406f0522ae46a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/54780889e9591f1951272e5baa861dc0fb8c0f02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54780889e9591f1951272e5baa861dc0fb8c0f02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/54780889e9591f1951272e5baa861dc0fb8c0f02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54780889e9591f1951272e5baa861dc0fb8c0f02/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9b1deff13c53333118cb48324a95bbf099b0f2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9b1deff13c53333118cb48324a95bbf099b0f2b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9b1deff13c53333118cb48324a95bbf099b0f2b"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 32,
    "deletions": 74
  },
  "files": [
    {
      "sha": "f4d7710f7cb4fab2b07914ff497d02891bd9e697",
      "filename": "sim/h8300/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54780889e9591f1951272e5baa861dc0fb8c0f02/sim/h8300/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54780889e9591f1951272e5baa861dc0fb8c0f02/sim/h8300/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/ChangeLog?ref=54780889e9591f1951272e5baa861dc0fb8c0f02",
      "patch": "@@ -1,3 +1,16 @@\n+2021-01-13  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* compile.c (memory_size): Move definition to top of file.\n+\t(h8_get_memory, h8_set_memory): Assert access is within memory_size.\n+\t(h8_get_eightbit_buf): Delete.\n+\th8_set_eightbit_buf, h8_get_eightbit, h8_set_eightbit): Likewise.\n+\t(GET_MEMORY_L): Delete eightbit references.\n+\t(GET_MEMORY_W, GET_MEMORY_B, SET_MEMORY_L, SET_MEMORY_W,\n+\tSET_MEMORY_B, init_pointers, step_once, sim_load): Likewise.\n+\t(sim_write): Likewise.  Return i instead of size.\n+\t(sim_read): Check addr is within memory_size.\n+\t* sim-main.h (struct h8300_cpu_state): Delete eightbit.\n+\n 2021-01-11  Mike Frysinger  <vapier@gentoo.org>\n \n \t* configure.ac: Call SIM_AC_OPTION_WARNINGS.\n@@ -1287,4 +1300,3 @@ Sun Jan  3 14:15:07 1993  Steve Chamberlain  (sac@thepub.cygnus.com)\n Tue Dec 22 13:56:48 1992  Steve Chamberlain  (sac@thepub.cygnus.com)\n \n \t* new\n-"
    },
    {
      "sha": "47b0577781aaa65bad717c51e163d48e7dd6189d",
      "filename": "sim/h8300/compile.c",
      "status": "modified",
      "additions": 19,
      "deletions": 72,
      "changes": 91,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54780889e9591f1951272e5baa861dc0fb8c0f02/sim/h8300/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54780889e9591f1951272e5baa861dc0fb8c0f02/sim/h8300/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/compile.c?ref=54780889e9591f1951272e5baa861dc0fb8c0f02",
      "patch": "@@ -38,6 +38,8 @@\n \n int debug;\n \n+static int memory_size;\n+\n #define X(op, size)  (op * 4 + size)\n \n #define SP (h8300hmode && !h8300_normal_mode ? SL : SW)\n@@ -251,39 +253,17 @@ h8_set_memory_buf (SIM_DESC sd, unsigned char *ptr)\n static unsigned char\n h8_get_memory (SIM_DESC sd, int idx)\n {\n+  ASSERT (idx < memory_size);\n   return (STATE_CPU (sd, 0)) -> memory[idx];\n }\n \n static void\n h8_set_memory (SIM_DESC sd, int idx, unsigned int val)\n {\n+  ASSERT (idx < memory_size);\n   (STATE_CPU (sd, 0)) -> memory[idx] = (unsigned char) val;\n }\n \n-static unsigned char *\n-h8_get_eightbit_buf (SIM_DESC sd)\n-{\n-  return (STATE_CPU (sd, 0)) -> eightbit;\n-}\n-\n-static void\n-h8_set_eightbit_buf (SIM_DESC sd, unsigned char *ptr)\n-{\n-  (STATE_CPU (sd, 0)) -> eightbit = ptr;\n-}\n-\n-static unsigned char\n-h8_get_eightbit (SIM_DESC sd, int idx)\n-{\n-  return (STATE_CPU (sd, 0)) -> eightbit[idx];\n-}\n-\n-static void\n-h8_set_eightbit (SIM_DESC sd, int idx, unsigned int val)\n-{\n-  (STATE_CPU (sd, 0)) -> eightbit[idx] = (unsigned char) val;\n-}\n-\n static unsigned int\n h8_get_delayed_branch (SIM_DESC sd)\n {\n@@ -424,8 +404,6 @@ int h8300smode  = 0;\n int h8300_normal_mode  = 0;\n int h8300sxmode = 0;\n \n-static int memory_size;\n-\n static int\n get_now (void)\n {\n@@ -1151,41 +1129,31 @@ static unsigned short *wreg[16];\n   ((X) < memory_size \\\n    ? ((h8_get_memory (sd, (X)+0) << 24) | (h8_get_memory (sd, (X)+1) << 16)  \\\n     | (h8_get_memory (sd, (X)+2) <<  8) | (h8_get_memory (sd, (X)+3) <<  0)) \\\n-   : ((h8_get_eightbit (sd, ((X)+0) & 0xff) << 24) \\\n-    | (h8_get_eightbit (sd, ((X)+1) & 0xff) << 16) \\\n-    | (h8_get_eightbit (sd, ((X)+2) & 0xff) <<  8) \\\n-    | (h8_get_eightbit (sd, ((X)+3) & 0xff) <<  0)))\n+   : 0)\n \n #define GET_MEMORY_W(X) \\\n   ((X) < memory_size \\\n-   ? ((h8_get_memory   (sd, (X)+0) << 8) \\\n-    | (h8_get_memory   (sd, (X)+1) << 0)) \\\n-   : ((h8_get_eightbit (sd, ((X)+0) & 0xff) << 8) \\\n-    | (h8_get_eightbit (sd, ((X)+1) & 0xff) << 0)))\n-\n+   ? ((h8_get_memory (sd, (X)+0) << 8) | (h8_get_memory (sd, (X)+1) << 0)) \\\n+   : 0)\n \n #define GET_MEMORY_B(X) \\\n-  ((X) < memory_size ? (h8_get_memory   (sd, (X))) \\\n-                     : (h8_get_eightbit (sd, (X) & 0xff)))\n+  ((X) < memory_size ? h8_get_memory (sd, (X)) : 0)\n \n #define SET_MEMORY_L(X, Y)  \\\n {  register unsigned char *_p; register int __y = (Y); \\\n-   _p = ((X) < memory_size ? h8_get_memory_buf   (sd) +  (X) : \\\n-                             h8_get_eightbit_buf (sd) + ((X) & 0xff)); \\\n+   _p = ((X) < memory_size ? h8_get_memory_buf (sd) + (X) : 0); \\\n    _p[0] = __y >> 24; _p[1] = __y >> 16; \\\n    _p[2] = __y >>  8; _p[3] = __y >>  0; \\\n }\n \n #define SET_MEMORY_W(X, Y) \\\n {  register unsigned char *_p; register int __y = (Y); \\\n-   _p = ((X) < memory_size ? h8_get_memory_buf   (sd) +  (X) : \\\n-                             h8_get_eightbit_buf (sd) + ((X) & 0xff)); \\\n+   _p = ((X) < memory_size ? h8_get_memory_buf (sd) + (X) : 0); \\\n    _p[0] = __y >> 8; _p[1] = __y; \\\n }\n \n #define SET_MEMORY_B(X, Y) \\\n-  ((X) < memory_size ? (h8_set_memory   (sd, (X), (Y))) \\\n-                     : (h8_set_eightbit (sd, (X) & 0xff, (Y))))\n+  ((X) < memory_size ? h8_set_memory (sd, (X), (Y)) : 0)\n \n /* Simulate a memory fetch.\n    Return 0 for success, -1 for failure.\n@@ -1661,13 +1629,10 @@ init_pointers (SIM_DESC sd)\n \n       if (h8_get_memory_buf (sd))\n \tfree (h8_get_memory_buf (sd));\n-      if (h8_get_eightbit_buf (sd))\n-\tfree (h8_get_eightbit_buf (sd));\n \n       h8_set_memory_buf (sd, (unsigned char *) \n \t\t\t calloc (sizeof (char), memory_size));\n       sd->memory_size = memory_size;\n-      h8_set_eightbit_buf (sd, (unsigned char *) calloc (sizeof (char), 256));\n \n       h8_set_mask (sd, memory_size - 1);\n \n@@ -2164,25 +2129,12 @@ step_once (SIM_DESC sd, SIM_CPU *cpu)\n \t\t\t\t    ? h8_get_reg (sd, R4_REGNUM) & 0xffff\n \t\t\t\t    : h8_get_reg (sd, R4_REGNUM) & 0xff);\n \n-\t      _src = (h8_get_reg (sd, R5_REGNUM) < memory_size\n-\t\t      ? h8_get_memory_buf   (sd) + h8_get_reg (sd, R5_REGNUM)\n-\t\t      : h8_get_eightbit_buf (sd) + \n-\t\t       (h8_get_reg (sd, R5_REGNUM) & 0xff));\n+\t      _src = h8_get_memory_buf (sd) + h8_get_reg (sd, R5_REGNUM);\n \t      if ((_src + count) >= (h8_get_memory_buf (sd) + memory_size))\n-\t\t{\n-\t\t  if ((_src + count) >= (h8_get_eightbit_buf (sd) + 0x100))\n-\t\t    goto illegal;\n-\t\t}\n-\t      _dst = (h8_get_reg (sd, R6_REGNUM) < memory_size\n-\t\t      ? h8_get_memory_buf   (sd) + h8_get_reg (sd, R6_REGNUM)\n-\t\t      : h8_get_eightbit_buf (sd) + \n-\t\t       (h8_get_reg (sd, R6_REGNUM) & 0xff));\n-\n+\t\tgoto illegal;\n+\t      _dst = h8_get_memory_buf (sd) + h8_get_reg (sd, R6_REGNUM);\n \t      if ((_dst + count) >= (h8_get_memory_buf (sd) + memory_size))\n-\t\t{\n-\t\t  if ((_dst + count) >= (h8_get_eightbit_buf (sd) + 0x100))\n-\t\t    goto illegal;\n-\t\t}\n+\t\tgoto illegal;\n \t      memcpy (_dst, _src, count);\n \n \t      h8_set_reg (sd, R5_REGNUM, h8_get_reg (sd, R5_REGNUM) + count);\n@@ -4444,11 +4396,9 @@ sim_write (SIM_DESC sd, SIM_ADDR addr, const unsigned char *buffer, int size)\n \t  h8_set_memory    (sd, addr + i, buffer[i]);\n \t}\n       else\n-\t{\n-\t  h8_set_eightbit (sd, (addr + i) & 0xff, buffer[i]);\n-\t}\n+\tbreak;\n     }\n-  return size;\n+  return i;\n }\n \n int\n@@ -4457,10 +4407,10 @@ sim_read (SIM_DESC sd, SIM_ADDR addr, unsigned char *buffer, int size)\n   init_pointers (sd);\n   if (addr < 0)\n     return 0;\n-  if (addr < memory_size)\n+  if (addr + size < memory_size)\n     memcpy (buffer, h8_get_memory_buf (sd) + addr, size);\n   else\n-    memcpy (buffer, h8_get_eightbit_buf (sd) + (addr & 0xff), size);\n+    return 0;\n   return size;\n }\n \n@@ -4835,13 +4785,10 @@ sim_load (SIM_DESC sd, const char *prog, bfd *abfd, int from_tty)\n \n   if (h8_get_memory_buf (sd))\n     free (h8_get_memory_buf (sd));\n-  if (h8_get_eightbit_buf (sd))\n-    free (h8_get_eightbit_buf (sd));\n \n   h8_set_memory_buf (sd, (unsigned char *) \n \t\t     calloc (sizeof (char), memory_size));\n   sd->memory_size = memory_size;\n-  h8_set_eightbit_buf (sd, (unsigned char *) calloc (sizeof (char), 256));\n \n   /* `msize' must be a power of two.  */\n   if ((memory_size & (memory_size - 1)) != 0)"
    },
    {
      "sha": "b6169b3bc126715efa85387b32047a95a2fc0040",
      "filename": "sim/h8300/sim-main.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54780889e9591f1951272e5baa861dc0fb8c0f02/sim/h8300/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54780889e9591f1951272e5baa861dc0fb8c0f02/sim/h8300/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/sim-main.h?ref=54780889e9591f1951272e5baa861dc0fb8c0f02",
      "patch": "@@ -126,7 +126,6 @@ struct _sim_cpu {\n   char **command_line;\t\t/* Pointer to command line arguments.  */\n \n   unsigned char *memory;\n-  unsigned char *eightbit;\n   int mask;\n   \n   sim_cpu_base base;"
    }
  ]
}