{
  "sha": "e4adb93903d4ae0b7ab2b5004364e50627df95f7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTRhZGI5MzkwM2Q0YWUwYjdhYjJiNTAwNDM2NGU1MDYyN2RmOTVmNw==",
  "commit": {
    "author": {
      "name": "Eli Zaretskii",
      "email": "eliz@gnu.org",
      "date": "2019-03-09T06:44:56Z"
    },
    "committer": {
      "name": "Eli Zaretskii",
      "email": "eliz@gnu.org",
      "date": "2019-03-09T06:44:56Z"
    },
    "message": "Support styling on native MS-Windows console\n\ngdb/ChangeLog:\n2019-03-08  Eli Zaretskii  <eliz@gnu.org>\n\n\tPR/24315\n\t* utils.c (can_emit_style_escape) [_WIN32]: Don't disable styling\n\ton MS-Windows if $TERM is not defined.\n\n\t* cli/cli-style.c: Set cli_styling to 1 in the MinGW build.\n\n\t* posix-hdep.c (gdb_console_fputs):\n\t* mingw-hdep.c (rgb_to_16colors, gdb_console_fputs): New\n\tfunctions.\n\t* ui-file.h (gdb_console_fputs): Add prototype.\n\n\t* ui-file.c (stdio_file::puts): Call gdb_console_fputs, and fall\n\tback to fputs only if the former returns zero.",
    "tree": {
      "sha": "75e41ba3c39b128c7b0a8de192851dd4200da786",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/75e41ba3c39b128c7b0a8de192851dd4200da786"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4adb93903d4ae0b7ab2b5004364e50627df95f7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4adb93903d4ae0b7ab2b5004364e50627df95f7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4adb93903d4ae0b7ab2b5004364e50627df95f7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4adb93903d4ae0b7ab2b5004364e50627df95f7/comments",
  "author": {
    "login": "Eli-Zaretskii",
    "id": 20908835,
    "node_id": "MDQ6VXNlcjIwOTA4ODM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Eli-Zaretskii",
    "html_url": "https://github.com/Eli-Zaretskii",
    "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers",
    "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}",
    "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions",
    "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs",
    "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos",
    "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "Eli-Zaretskii",
    "id": 20908835,
    "node_id": "MDQ6VXNlcjIwOTA4ODM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Eli-Zaretskii",
    "html_url": "https://github.com/Eli-Zaretskii",
    "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers",
    "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}",
    "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions",
    "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs",
    "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos",
    "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4639b61ae3bf7c959f35debcb2c6a204fa0b4f1c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4639b61ae3bf7c959f35debcb2c6a204fa0b4f1c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4639b61ae3bf7c959f35debcb2c6a204fa0b4f1c"
    }
  ],
  "stats": {
    "total": 238,
    "additions": 237,
    "deletions": 1
  },
  "files": [
    {
      "sha": "bb10c7d447111a1f6f7328e098f1e2c726a0007e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -1,3 +1,21 @@\n+2019-03-08  Eli Zaretskii  <eliz@gnu.org>\n+\n+\tSupport styling on native MS-Windows console\n+\n+\tPR/24315\n+\t* utils.c (can_emit_style_escape) [_WIN32]: Don't disable styling\n+\ton MS-Windows if $TERM is not defined.\n+\n+\t* cli/cli-style.c: Set cli_styling to 1 in the MinGW build.\n+\n+\t* posix-hdep.c (gdb_console_fputs):\n+\t* mingw-hdep.c (rgb_to_16colors, gdb_console_fputs): New\n+\tfunctions.\n+\t* ui-file.h (gdb_console_fputs): Add prototype.\n+\n+\t* ui-file.c (stdio_file::puts): Call gdb_console_fputs, and fall\n+\tback to fputs only if the former returns zero.\n+\n 2019-03-07  Tom Tromey  <tom@tromey.com>\n \n \t* symmisc.c (print_symbol_bcache_statistics): Update."
    },
    {
      "sha": "ec385dae8a168cfc0446de24e3bbb7ae49243e38",
      "filename": "gdb/cli/cli-style.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/cli/cli-style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/cli/cli-style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.c?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -24,7 +24,7 @@\n \n /* True if styling is enabled.  */\n \n-#if defined(_WIN32) || defined (__CYGWIN__)\n+#if defined (__MSDOS__) || defined (__CYGWIN__)\n int cli_styling = 0;\n #else\n int cli_styling = 1;"
    },
    {
      "sha": "8ed4b44ddce145c1cd567005f6183fdad26edad9",
      "filename": "gdb/mingw-hdep.c",
      "status": "modified",
      "additions": 192,
      "deletions": 0,
      "changes": 192,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/mingw-hdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/mingw-hdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mingw-hdep.c?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -177,3 +177,195 @@ gdb_select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,\n \n   return num_ready;\n }\n+\n+/* Map COLOR's RGB triplet, with 8 bits per component, into 16 Windows\n+   console colors, where each component has just 1 bit, plus a single\n+   intensity bit which affects all 3 components.  */\n+static int\n+rgb_to_16colors (const ui_file_style::color &color)\n+{\n+  uint8_t rgb[3];\n+  color.get_rgb (rgb);\n+\n+  int retval = 0;\n+  for (int i = 0; i < 3; i++)\n+    {\n+      /* Subdivide 256 possible values of each RGB component into 3\n+\t regions: no color, normal color, bright color.  256 / 3 = 85,\n+\t but ui-style.c follows xterm and uses 92 for R and G\n+\t components of the bright-blue color, so we bias the divisor a\n+\t bit to have the bright colors between 9 and 15 identical to\n+\t what ui-style.c expects.  */\n+      int bits = rgb[i] / 93;\n+      retval |= ((bits > 0) << (2 - i)) | ((bits > 1) << 3);\n+    }\n+\n+  return retval;\n+}\n+\n+/* Zero if not yet initialized, 1 if stdout is a console device, else -1.  */\n+static int mingw_console_initialized;\n+\n+/* Handle to stdout . */\n+static HANDLE hstdout = INVALID_HANDLE_VALUE;\n+\n+/* Text attribute to use for normal text (the \"none\" pseudo-color).  */\n+static SHORT  norm_attr;\n+\n+/* The most recently applied style.  */\n+static ui_file_style last_style;\n+\n+/* Alternative for the libc 'fputs' which handles embedded SGR\n+   sequences in support of styling.  */\n+\n+int\n+gdb_console_fputs (const char *linebuf, FILE *fstream)\n+{\n+  if (!mingw_console_initialized)\n+    {\n+      hstdout = (HANDLE)_get_osfhandle (fileno (fstream));\n+      DWORD cmode;\n+      CONSOLE_SCREEN_BUFFER_INFO csbi;\n+\n+      if (hstdout != INVALID_HANDLE_VALUE\n+\t  && GetConsoleMode (hstdout, &cmode) != 0\n+\t  && GetConsoleScreenBufferInfo (hstdout, &csbi))\n+\t{\n+\t  norm_attr = csbi.wAttributes;\n+\t  mingw_console_initialized = 1;\n+\t}\n+      else if (hstdout != INVALID_HANDLE_VALUE)\n+\tmingw_console_initialized = -1; /* valid, but not a console device */\n+    }\n+  /* If our stdout is not a console device, let the default 'fputs'\n+     handle the task. */\n+  if (mingw_console_initialized <= 0)\n+    return 0;\n+\n+  /* Mapping between 8 ANSI colors and Windows console attributes.  */\n+  static int fg_color[] = {\n+    0,\t\t\t\t\t/* black */\n+    FOREGROUND_RED,\t\t\t/* red */\n+    FOREGROUND_GREEN,\t\t\t/* green */\n+    FOREGROUND_GREEN | FOREGROUND_RED,\t/* yellow */\n+    FOREGROUND_BLUE,\t\t\t/* blue */\n+    FOREGROUND_BLUE | FOREGROUND_RED,\t/* magenta */\n+    FOREGROUND_BLUE | FOREGROUND_GREEN, /* cyan */\n+    FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE /* gray */\n+  };\n+  static int bg_color[] = {\n+    0,\t\t\t\t\t/* black */\n+    BACKGROUND_RED,\t\t\t/* red */\n+    BACKGROUND_GREEN,\t\t\t/* green */\n+    BACKGROUND_GREEN | BACKGROUND_RED,\t/* yellow */\n+    BACKGROUND_BLUE,\t\t\t/* blue */\n+    BACKGROUND_BLUE | BACKGROUND_RED,\t/* magenta */\n+    BACKGROUND_BLUE | BACKGROUND_GREEN, /* cyan */\n+    BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE /* gray */\n+  };\n+\n+  ui_file_style style = last_style;\n+  unsigned char c;\n+  size_t n_read;\n+\n+  for ( ; (c = *linebuf) != 0; linebuf += n_read)\n+    {\n+      if (c == '\\033')\n+\t{\n+\t  fflush (fstream);\n+\t  bool parsed = style.parse (linebuf, &n_read);\n+\t  if (n_read <= 0)\t/* should never happen */\n+\t    n_read = 1;\n+\t  if (!parsed)\n+\t    {\n+\t      /* This means we silently swallow SGR sequences we\n+\t\t cannot parse.  */\n+\t      continue;\n+\t    }\n+\t  /* Colors.  */\n+\t  const ui_file_style::color &fg = style.get_foreground ();\n+\t  const ui_file_style::color &bg = style.get_background ();\n+\t  int fgcolor, bgcolor, bright, inverse;\n+\t  if (fg.is_none ())\n+\t    fgcolor = norm_attr & 15;\n+\t  else if (fg.is_basic ())\n+\t    fgcolor = fg_color[fg.get_value () & 15];\n+\t  else\n+\t    fgcolor = rgb_to_16colors (fg);\n+\t  if (bg.is_none ())\n+\t    bgcolor = norm_attr & (15 << 4);\n+\t  else if (bg.is_basic ())\n+\t    bgcolor = bg_color[bg.get_value () & 15];\n+\t  else\n+\t    bgcolor = rgb_to_16colors (bg) << 4;\n+\n+\t  /* Intensity.  */\n+\t  switch (style.get_intensity ())\n+\t    {\n+\t    case ui_file_style::NORMAL:\n+\t    case ui_file_style::DIM:\n+\t      bright = 0;\n+\t      break;\n+\t    case ui_file_style::BOLD:\n+\t      bright = 1;\n+\t      break;\n+\t    default:\n+\t      gdb_assert_not_reached (\"invalid intensity\");\n+\t    }\n+\n+\t  /* Inverse video.  */\n+\t  if (style.is_reverse ())\n+\t    inverse = 1;\n+\t  else\n+\t    inverse = 0;\n+\n+\t  /* Construct the attribute.  */\n+\t  if (inverse)\n+\t    {\n+\t      int t = fgcolor;\n+\t      fgcolor = (bgcolor >> 4);\n+\t      bgcolor = (t << 4);\n+\t    }\n+\t  if (bright)\n+\t    fgcolor |= FOREGROUND_INTENSITY;\n+\n+\t  SHORT attr = (bgcolor & (15 << 4)) | (fgcolor & 15);\n+\n+\t  /* Apply the attribute.  */\n+\t  SetConsoleTextAttribute (hstdout, attr);\n+\t}\n+      else\n+\t{\n+\t  /* When we are about to write newline, we need to clear to\n+\t     EOL with the normal attribute, to avoid spilling the\n+\t     colors to the next screen line.  We assume here that no\n+\t     non-default attribute extends beyond the newline.  */\n+\t  if (c == '\\n')\n+\t    {\n+\t      DWORD nchars;\n+\t      COORD start_pos;\n+\t      DWORD written;\n+\t      CONSOLE_SCREEN_BUFFER_INFO csbi;\n+\n+\t      fflush (fstream);\n+\t      GetConsoleScreenBufferInfo (hstdout, &csbi);\n+\n+\t      if (csbi.wAttributes != norm_attr)\n+\t\t{\n+\t\t  start_pos = csbi.dwCursorPosition;\n+\t\t  nchars = csbi.dwSize.X - start_pos.X;\n+\n+\t\t  FillConsoleOutputAttribute (hstdout, norm_attr, nchars,\n+\t\t\t\t\t      start_pos, &written);\n+\t\t  FillConsoleOutputCharacter (hstdout, ' ', nchars,\n+\t\t\t\t\t      start_pos, &written);\n+\t\t}\n+\t    }\n+\t  fputc (c, fstream);\n+\t  n_read = 1;\n+\t}\n+    }\n+\n+  last_style = style;\n+  return 1;\n+}"
    },
    {
      "sha": "d0f467e1fcc1bf21c3a244d63ea0c7af0724be92",
      "filename": "gdb/posix-hdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/posix-hdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/posix-hdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/posix-hdep.c?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -30,3 +30,11 @@ gdb_select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,\n {\n   return select (n, readfds, writefds, exceptfds, timeout);\n }\n+\n+/* Host-dependent console fputs method.  POSIX platforms always return\n+   zero, to use the default C 'fputs'.  */\n+int\n+gdb_console_fputs (const char *buf, FILE *f)\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "77f6b31ce4b48466ee7902c7ae07a2af14e70227",
      "filename": "gdb/ui-file.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/ui-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/ui-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-file.c?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -236,6 +236,12 @@ stdio_file::write_async_safe (const char *buf, long length_buf)\n void\n stdio_file::puts (const char *linebuffer)\n {\n+  /* This host-dependent function (with implementations in\n+     posix-hdep.c and mingw-hdep.c) is given the opportunity to\n+     process the output first in host-dependent way.  If it does, it\n+     should return non-zero, to avoid calling fputs below.  */\n+  if (gdb_console_fputs (linebuffer, m_file))\n+    return;\n   /* Calling error crashes when we are called from the exception framework.  */\n   if (fputs (linebuffer, m_file))\n     {"
    },
    {
      "sha": "6e6ca1c9cdc29ff9e0dfe21006cf36920a4a04d9",
      "filename": "gdb/ui-file.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/ui-file.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/ui-file.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-file.h?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -101,6 +101,8 @@ extern void ui_file_write_async_safe (struct ui_file *file, const char *buf,\n \n extern long ui_file_read (struct ui_file *file, char *buf, long length_buf);\n \n+extern int gdb_console_fputs (const char *, FILE *);\n+\n /* A std::string-based ui_file.  Can be used as a scratch buffer for\n    collecting output.  */\n "
    },
    {
      "sha": "840779a63075bee17592576dff0d47a50065d0ec",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4adb93903d4ae0b7ab2b5004364e50627df95f7/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=e4adb93903d4ae0b7ab2b5004364e50627df95f7",
      "patch": "@@ -1445,8 +1445,18 @@ can_emit_style_escape (struct ui_file *stream)\n       || !ui_file_isatty (stream))\n     return false;\n   const char *term = getenv (\"TERM\");\n+  /* Windows doesn't by default define $TERM, but can support styles\n+     regardless.  */\n+#ifndef _WIN32\n   if (term == nullptr || !strcmp (term, \"dumb\"))\n     return false;\n+#else\n+  /* But if they do define $TERM, let us behave the same as on Posix\n+     platforms, for the benefit of programs which invoke GDB as their\n+     back-end.  */\n+  if (term && !strcmp (term, \"dumb\"))\n+    return false;\n+#endif\n   return true;\n }\n "
    }
  ]
}