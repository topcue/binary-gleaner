{
  "sha": "c3699833af0343d13d7d39b3c589d3ac5b930137",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzM2OTk4MzNhZjAzNDNkMTNkN2QzOWIzYzU4OWQzYWM1YjkzMDEzNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-27T15:13:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:54Z"
    },
    "message": "Make dwarf2_get_dwz_file take a dwarf2_per_bfd\n\nThis allows removing a per_bfd->dwarf2_per_objfile reference in\nget_abbrev_section_for_cu.\n\nThis requires saving the bfd in dwarf2_per_bfd.  The constructor of\ndwarf2_per_bfd already accepts the bfd, so it's just a matter of saving\nit in a field.\n\nI replaced uses of objfile_name with bfd_get_filename, which should be\nequivalent in this case.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_bfd) <obfd>: New member.\n\t(dwarf2_get_dwz_file): Replace parameter with dwarf2_per_bfd.\n\t* dwarf2/read.c (dwarf2_per_bfd::dwarf2_per_bfd): Assign obfd\n\tfield.\n\t(dwarf2_get_dwz_file): Replace parameter with dwarf2_per_bfd.\n\t(create_cus_from_index): Update.\n\t(dwarf2_read_gdb_index): Update.\n\t(create_cus_from_debug_names): Update.\n\t(dwarf2_read_debug_names): Update.\n\t(get_abbrev_section_for_cu): Update.\n\t(create_all_comp_units): Update.\n\t(read_attribute_value): Update.\n\t(get_debug_line_section): Update.\n\t* dwarf2/index-cache.c (index_cache::store): Update.\n\t* dwarf2/index-write.c (save_gdb_index_command): Update.\n\t* dwarf2/macro.c (dwarf_decode_macro_bytes): Update.\n\nChange-Id: Ifb23f55dda93c499aae57b6a9aff9c6ff9d2f45f",
    "tree": {
      "sha": "ea8bea180c24cb12ed0ce1e7a85dba2eeceb82d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ea8bea180c24cb12ed0ce1e7a85dba2eeceb82d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3699833af0343d13d7d39b3c589d3ac5b930137",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3699833af0343d13d7d39b3c589d3ac5b930137",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3699833af0343d13d7d39b3c589d3ac5b930137",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3699833af0343d13d7d39b3c589d3ac5b930137/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1859c670e9979c1e58ed4e9d83085f732e6936f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1859c670e9979c1e58ed4e9d83085f732e6936f5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1859c670e9979c1e58ed4e9d83085f732e6936f5"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 51,
    "deletions": 28
  },
  "files": [
    {
      "sha": "39fa1aeae47e53699e6395549809583677b748dd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c3699833af0343d13d7d39b3c589d3ac5b930137",
      "patch": "@@ -1,3 +1,22 @@\n+2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_bfd) <obfd>: New member.\n+\t(dwarf2_get_dwz_file): Replace parameter with dwarf2_per_bfd.\n+\t* dwarf2/read.c (dwarf2_per_bfd::dwarf2_per_bfd): Assign obfd\n+\tfield.\n+\t(dwarf2_get_dwz_file): Replace parameter with dwarf2_per_bfd.\n+\t(create_cus_from_index): Update.\n+\t(dwarf2_read_gdb_index): Update.\n+\t(create_cus_from_debug_names): Update.\n+\t(dwarf2_read_debug_names): Update.\n+\t(get_abbrev_section_for_cu): Update.\n+\t(create_all_comp_units): Update.\n+\t(read_attribute_value): Update.\n+\t(get_debug_line_section): Update.\n+\t* dwarf2/index-cache.c (index_cache::store): Update.\n+\t* dwarf2/index-write.c (save_gdb_index_command): Update.\n+\t* dwarf2/macro.c (dwarf_decode_macro_bytes): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2/read.h (struct dwarf2_per_cu_data) <per_bfd>: New"
    },
    {
      "sha": "cb79c87f0338d0e4eef0e318ee80f2b7f5ef6829",
      "filename": "gdb/dwarf2/index-cache.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.c?ref=c3699833af0343d13d7d39b3c589d3ac5b930137",
      "patch": "@@ -108,7 +108,7 @@ index_cache::store (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   /* Get build id of dwz file, if present.  */\n   gdb::optional<std::string> dwz_build_id_str;\n-  const dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+  const dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n   const char *dwz_build_id_ptr = NULL;\n \n   if (dwz != nullptr)"
    },
    {
      "sha": "a113aa653a5dbe9ca102a4db23b6bcf4d5fbe663",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=c3699833af0343d13d7d39b3c589d3ac5b930137",
      "patch": "@@ -1761,7 +1761,8 @@ save_gdb_index_command (const char *arg, int from_tty)\n \t  try\n \t    {\n \t      const char *basename = lbasename (objfile_name (objfile));\n-\t      const dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+\t      const dwz_file *dwz\n+\t\t= dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n \t      const char *dwz_basename = NULL;\n \n \t      if (dwz != NULL)"
    },
    {
      "sha": "a44e2c77035b586a0e81a246de48a2622cfd549f",
      "filename": "gdb/dwarf2/macro.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/macro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/macro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.c?ref=c3699833af0343d13d7d39b3c589d3ac5b930137",
      "patch": "@@ -507,7 +507,7 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t    || section_is_dwz)\n \t\t  {\n \t\t    struct dwz_file *dwz\n-\t\t      = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+\t\t      = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n \n \t\t    body = dwz->read_string (objfile, str_offset);\n \t\t  }\n@@ -644,7 +644,8 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n \t    if (macinfo_type == DW_MACRO_import_sup)\n \t      {\n-\t\tstruct dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+\t\tstruct dwz_file *dwz\n+\t\t  = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n \n \t\tdwz->macro.read (objfile);\n "
    },
    {
      "sha": "aa1c3f0e92be5cd60558ac9776c739bf44aca60b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 22,
      "deletions": 22,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c3699833af0343d13d7d39b3c589d3ac5b930137",
      "patch": "@@ -1752,7 +1752,8 @@ line_header_eq_voidp (const void *item_lhs, const void *item_rhs)\n \n dwarf2_per_bfd::dwarf2_per_bfd (bfd *obfd, const dwarf2_debug_sections *names,\n \t\t\t\tbool can_copy_)\n-  : can_copy (can_copy_)\n+  : obfd (obfd),\n+    can_copy (can_copy_)\n {\n   if (names == NULL)\n     names = &dwarf2_elf_names;\n@@ -2112,19 +2113,19 @@ locate_dwz_sections (bfd *abfd, asection *sectp, void *arg)\n /* See dwarf2read.h.  */\n \n struct dwz_file *\n-dwarf2_get_dwz_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n+dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n {\n   const char *filename;\n   bfd_size_type buildid_len_arg;\n   size_t buildid_len;\n   bfd_byte *buildid;\n \n-  if (dwarf2_per_objfile->per_bfd->dwz_file != NULL)\n-    return dwarf2_per_objfile->per_bfd->dwz_file.get ();\n+  if (per_bfd->dwz_file != NULL)\n+    return per_bfd->dwz_file.get ();\n \n   bfd_set_error (bfd_error_no_error);\n   gdb::unique_xmalloc_ptr<char> data\n-    (bfd_get_alt_debug_link_info (dwarf2_per_objfile->objfile->obfd,\n+    (bfd_get_alt_debug_link_info (per_bfd->obfd,\n \t\t\t\t  &buildid_len_arg, &buildid));\n   if (data == NULL)\n     {\n@@ -2144,7 +2145,7 @@ dwarf2_get_dwz_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   if (!IS_ABSOLUTE_PATH (filename))\n     {\n       gdb::unique_xmalloc_ptr<char> abs\n-\t= gdb_realpath (objfile_name (dwarf2_per_objfile->objfile));\n+\t= gdb_realpath (bfd_get_filename (per_bfd->obfd));\n \n       abs_storage = ldirname (abs.get ()) + SLASH_STRING + filename;\n       filename = abs_storage.c_str ();\n@@ -2165,7 +2166,7 @@ dwarf2_get_dwz_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   if (dwz_bfd == nullptr)\n     {\n       gdb::unique_xmalloc_ptr<char> alt_filename;\n-      const char *origname = dwarf2_per_objfile->objfile->original_name;\n+      const char *origname = bfd_get_filename (per_bfd->obfd);\n \n       scoped_fd fd (debuginfod_debuginfo_query (buildid,\n \t\t\t\t\t\tbuildid_len,\n@@ -2187,18 +2188,17 @@ dwarf2_get_dwz_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   if (dwz_bfd == NULL)\n     error (_(\"could not find '.gnu_debugaltlink' file for %s\"),\n-\t   objfile_name (dwarf2_per_objfile->objfile));\n+\t   bfd_get_filename (per_bfd->obfd));\n \n   std::unique_ptr<struct dwz_file> result\n     (new struct dwz_file (std::move (dwz_bfd)));\n \n   bfd_map_over_sections (result->dwz_bfd.get (), locate_dwz_sections,\n \t\t\t result.get ());\n \n-  gdb_bfd_record_inclusion (dwarf2_per_objfile->objfile->obfd,\n-\t\t\t    result->dwz_bfd.get ());\n-  dwarf2_per_objfile->per_bfd->dwz_file = std::move (result);\n-  return dwarf2_per_objfile->per_bfd->dwz_file.get ();\n+  gdb_bfd_record_inclusion (per_bfd->obfd, result->dwz_bfd.get ());\n+  per_bfd->dwz_file = std::move (result);\n+  return per_bfd->dwz_file.get ();\n }\n \f\n /* DWARF quick_symbols_functions support.  */\n@@ -2526,7 +2526,7 @@ create_cus_from_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   if (dwz_elements == 0)\n     return;\n \n-  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n   create_cus_from_index_list (dwarf2_per_objfile, dwz_list, dwz_elements,\n \t\t\t      &dwz->info, 1);\n }\n@@ -3073,7 +3073,7 @@ dwarf2_read_gdb_index\n \n   /* If there is a .dwz file, read it so we can get its CU list as\n      well.  */\n-  dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+  dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n   if (dwz != NULL)\n     {\n       struct mapped_index dwz_map;\n@@ -5173,7 +5173,7 @@ create_cus_from_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   if (dwz_map.cu_count == 0)\n     return;\n \n-  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n   create_cus_from_debug_names_list (dwarf2_per_objfile, dwz_map, dwz->info,\n \t\t\t\t    true /* is_dwz */);\n }\n@@ -5200,7 +5200,7 @@ dwarf2_read_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   /* If there is a .dwz file, read it so we can get its CU list as\n      well.  */\n-  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n   if (dwz != NULL)\n     {\n       if (!read_debug_names_from_section (objfile,\n@@ -6032,12 +6032,12 @@ static struct dwarf2_section_info *\n get_abbrev_section_for_cu (struct dwarf2_per_cu_data *this_cu)\n {\n   struct dwarf2_section_info *abbrev;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = this_cu->dwarf2_per_objfile;\n+  dwarf2_per_bfd *per_bfd = this_cu->per_bfd;\n \n   if (this_cu->is_dwz)\n-    abbrev = &dwarf2_get_dwz_file (dwarf2_per_objfile)->abbrev;\n+    abbrev = &dwarf2_get_dwz_file (per_bfd)->abbrev;\n   else\n-    abbrev = &dwarf2_per_objfile->per_bfd->abbrev;\n+    abbrev = &per_bfd->abbrev;\n \n   return abbrev;\n }\n@@ -8058,7 +8058,7 @@ create_all_comp_units (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   read_comp_units_from_section (dwarf2_per_objfile, &dwarf2_per_objfile->per_bfd->info,\n \t\t\t\t&dwarf2_per_objfile->per_bfd->abbrev, 0);\n \n-  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n   if (dwz != NULL)\n     read_comp_units_from_section (dwarf2_per_objfile, &dwz->info, &dwz->abbrev,\n \t\t\t\t  1);\n@@ -19103,7 +19103,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n       /* FALLTHROUGH */\n     case DW_FORM_GNU_strp_alt:\n       {\n-\tstruct dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+\tdwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n \tLONGEST str_offset = cu_header->read_offset (abfd, info_ptr,\n \t\t\t\t\t\t     &bytes_read);\n \n@@ -19698,7 +19698,7 @@ get_debug_line_section (struct dwarf2_cu *cu)\n     section = &cu->dwo_unit->dwo_file->sections.line;\n   else if (cu->per_cu->is_dwz)\n     {\n-      struct dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+      dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n \n       section = &dwz->line;\n     }"
    },
    {
      "sha": "e9c74a40a8775da6e2c10c2f4b33437d5924edbc",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3699833af0343d13d7d39b3c589d3ac5b930137/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=c3699833af0343d13d7d39b3c589d3ac5b930137",
      "patch": "@@ -136,6 +136,9 @@ struct dwarf2_per_bfd\n \t\t\tconst dwarf2_debug_sections &names);\n \n public:\n+  /* The corresponding BFD.  */\n+  bfd *obfd;\n+\n   /* Objects that can be shared across objfiles are stored in this\n      obstack or on the psymtab obstack, while objects that are\n      objfile-specific are stored on the objfile obstack.  */\n@@ -578,8 +581,7 @@ struct signatured_type\n    there is no .gnu_debugaltlink section in the file.  Error if there\n    is such a section but the file cannot be found.  */\n \n-extern struct dwz_file *dwarf2_get_dwz_file\n-    (struct dwarf2_per_objfile *dwarf2_per_objfile);\n+extern dwz_file *dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd);\n \n /* Return the type of the DIE at DIE_OFFSET in the CU named by\n    PER_CU.  */"
    }
  ]
}