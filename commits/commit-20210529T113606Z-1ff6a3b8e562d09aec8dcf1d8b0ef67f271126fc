{
  "sha": "1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZmNmEzYjhlNTYyZDA5YWVjOGRjZjFkOGIwZWY2N2YyNzExMjZmYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-28T03:54:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-29T11:36:06Z"
    },
    "message": "PowerPC table driven -Mraw disassembly\n\nopcodes/\n\t* ppc-dis.c (lookup_powerpc): Test deprecated field when -Many.\n\tDon't special case PPC_OPCODE_RAW.\n\t(lookup_prefix): Likewise.\n\t(lookup_vle, lookup_spe2): Similarly.  Add dialect parameter and..\n\t(print_insn_powerpc): ..update caller.\n\t* ppc-opc.c (EXT): Define.\n\t(powerpc_opcodes): Mark extended mnemonics with EXT.\n\t(prefix_opcodes, vle_opcodes): Likewise.\n\t(XISEL, XISEL_MASK): Add cr field and simplify.\n\t(powerpc_opcodes): Use XISEL with extended isel mnemonics and sort\n\tall isel variants to where the base mnemonic belongs.  Sort dstt,\n\tdststt and dssall.\ngas/\n\t* testsuite/gas/ppc/raw.s,\n\t* testsuite/gas/ppc/raw.d: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run it.",
    "tree": {
      "sha": "1873db0b13b3360f8a280dfbcc1195d0a4a49757",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1873db0b13b3360f8a280dfbcc1195d0a4a49757"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d6249f5f1cfc5c37bf026a90a031e8c6463f169b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6249f5f1cfc5c37bf026a90a031e8c6463f169b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d6249f5f1cfc5c37bf026a90a031e8c6463f169b"
    }
  ],
  "stats": {
    "total": 3390,
    "additions": 1755,
    "deletions": 1635
  },
  "files": [
    {
      "sha": "3e2e3c5d0b5ebc6915dd91ebd91f27d136401291",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/gas/ppc/raw.s,\n+\t* testsuite/gas/ppc/raw.d: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run it.\n+\n 2021-05-29  Maciej W. Rozycki  <macro@orcam.me.uk>\n \n \t* testsuite/gas/mips/c0.d: New test."
    },
    {
      "sha": "b5ce36da4d4e0026e5cd3cfecad1d0dbaee19432",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
      "patch": "@@ -151,3 +151,4 @@ run_dump_test \"rop-checks\"\n \n run_dump_test \"dcbt\"\n run_dump_test \"pr27676\"\n+run_dump_test \"raw\""
    },
    {
      "sha": "fff9077559426b4099d7ef08c619d328c622d3e3",
      "filename": "gas/testsuite/gas/ppc/raw.d",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/testsuite/gas/ppc/raw.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/testsuite/gas/ppc/raw.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/raw.d?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
      "patch": "@@ -0,0 +1,62 @@\n+#as: -mpower10\n+#objdump: -d -Mpower10 -Mraw\n+#name: raw disassembly\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+   0:\t(f0 64 24 90|90 24 64 f0) \txxlor   vs3,vs4,vs4\n+   4:\t(f0 64 25 10|10 25 64 f0) \txxlnor  vs3,vs4,vs4\n+   8:\t(f0 64 26 80|80 26 64 f0) \txvcpsgnsp vs3,vs4,vs4\n+   c:\t(10 64 24 84|84 24 64 10) \tvor     v3,v4,v4\n+  10:\t(7c 83 23 78|78 23 83 7c) \tor      r3,r4,r4\n+  14:\t(7c 83 20 f8|f8 20 83 7c) \tnor     r3,r4,r4\n+  18:\t(4c a6 30 42|42 30 a6 4c) \tcrnor   4\\*cr1\\+gt,4\\*cr1\\+eq,4\\*cr1\\+eq\n+  1c:\t(4c e7 39 82|82 39 e7 4c) \tcrxor   4\\*cr1\\+so,4\\*cr1\\+so,4\\*cr1\\+so\n+  20:\t(4c 00 02 42|42 02 00 4c) \tcreqv   lt,lt,lt\n+  24:\t(4c 22 13 82|82 13 22 4c) \tcror    gt,eq,eq\n+  28:\t(f0 64 20 50|50 20 64 f0) \txxpermdi vs3,vs4,vs4,0\n+  2c:\t(f0 64 23 50|50 23 64 f0) \txxpermdi vs3,vs4,vs4,3\n+  30:\t(f0 64 28 50|50 28 64 f0) \txxpermdi vs3,vs4,vs5,0\n+  34:\t(f0 64 2b 50|50 2b 64 f0) \txxpermdi vs3,vs4,vs5,3\n+  38:\t(f0 64 22 50|50 22 64 f0) \txxpermdi vs3,vs4,vs4,2\n+  3c:\t(10 60 23 ca|ca 23 60 10) \tvctsxs  v3,v4,0\n+  40:\t(38 60 00 7b|7b 00 60 38) \taddi    r3,0,123\n+  44:\t(3c 80 01 c8|c8 01 80 3c) \taddis   r4,0,456\n+  48:\t(43 20 ff f8|f8 ff 20 43) \tbc      25,lt,0x40\n+  4c:\t(41 80 00 04|04 00 80 41) \tbc      12,lt,0x50\n+  50:\t(4e 80 00 20|20 00 80 4e) \tbclr    20,lt,0\n+  54:\t(4c c0 04 20|20 04 c0 4c) \tbcctr   6,lt,0\n+  58:\t(4c 83 04 61|61 04 83 4c) \tbctarl  4,so,0\n+  5c:\t(4c 60 00 04|04 00 60 4c) \taddpcis r3,0\n+  60:\t(28 03 04 d2|d2 04 03 28) \tcmpli   cr0,0,r3,1234\n+  64:\t(28 23 04 d2|d2 04 23 28) \tcmpli   cr0,1,r3,1234\n+  68:\t(7c 03 20 00|00 20 03 7c) \tcmp     cr0,0,r3,r4\n+  6c:\t(7c 23 20 00|00 20 23 7c) \tcmp     cr0,1,r3,r4\n+  70:\t(7c 03 20 40|40 20 03 7c) \tcmpl    cr0,0,r3,r4\n+  74:\t(7c 23 20 40|40 20 23 7c) \tcmpl    cr0,1,r3,r4\n+  78:\t(30 64 ff d6|d6 ff 64 30) \taddic   r3,r4,-42\n+  7c:\t(54 83 80 3e|3e 80 83 54) \trlwinm  r3,r4,16,0,31\n+  80:\t(78 83 06 a0|a0 06 83 78) \trldicl  r3,r4,0,58\n+  84:\t(60 00 00 00|00 00 00 60) \tori     r0,r0,0\n+  88:\t(68 00 00 00|00 00 00 68) \txori    r0,r0,0\n+  8c:\t(7e 03 20 08|08 20 03 7e) \ttw      16,r3,r4\n+  90:\t(7c 65 20 50|50 20 65 7c) \tsubf    r3,r5,r4\n+  94:\t(7c 65 20 11|11 20 65 7c) \tsubfc\\.  r3,r5,r4\n+  98:\t(7c 83 00 66|66 00 83 7c) \tmfvsrd  r3,vs4\n+  9c:\t(7c 83 00 67|67 00 83 7c) \tmfvsrd  r3,vs36\n+  a0:\t(7c 6f f1 20|20 f1 6f 7c) \tmtcrf   255,r3\n+  a4:\t(7e 03 21 ec|ec 21 03 7e) \tdcbtst  r3,r4,16\n+  a8:\t(7c e3 21 ec|ec 21 e3 7c) \tdcbtst  r3,r4,7\n+  ac:\t(7d 03 21 ec|ec 21 03 7d) \tdcbtst  r3,r4,8\n+  b0:\t(7e 23 22 2c|2c 22 23 7e) \tdcbt    r3,r4,17\n+  b4:\t(7c 68 02 a6|a6 02 68 7c) \tmfspr   r3,8\n+  b8:\t(7c 69 02 a6|a6 02 69 7c) \tmfspr   r3,9\n+  bc:\t(7c 70 43 a6|a6 43 70 7c) \tmtspr   272,r3\n+  c0:\t(7f 7b db 78|78 db 7b 7f) \tor      r27,r27,r27\n+  c4:\t(7f de f3 78|78 f3 de 7f) \tor      r30,r30,r30\n+  c8:\t(7c 20 04 ac|ac 04 20 7c) \tsync    1,0\n+  cc:\t(06 02 00 00|00 00 02 06) \tpaddi   r3,0,-8589934592,0\n+  d0:\t(38 60 00 00|00 00 60 38) "
    },
    {
      "sha": "f318da5dd2011d6288ce2caddd25bc81653fd53a",
      "filename": "gas/testsuite/gas/ppc/raw.s",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/testsuite/gas/ppc/raw.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/gas/testsuite/gas/ppc/raw.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/raw.s?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
      "patch": "@@ -0,0 +1,52 @@\n+ xxmr 3,4\n+ xxlnot 3,4\n+ xvmovsp 3,4\n+ vmr 3,4\n+ mr 3,4\n+ not 3,4\n+ crnot 5,6\n+ crclr 7\n+ crset 0\n+ crmove 1,2\n+ xxspltd 3,4,0\n+ xxspltd 3,4,1\n+ xxmrghd 3,4,5\n+ xxmrgld 3,4,5\n+ xxswapd 3,4\n+ vctsxs 3,4,0\n+ li 3,123\n+ lis 4,456\n+ bdnz+ .-8\n+ blt .+4\n+ blr\n+ bgectr-\n+ bnutarl\n+ lnia 3\n+ cmplwi 3,1234\n+ cmpldi 3,1234\n+ cmpw 3,4\n+ cmpd 3,4\n+ cmplw 3,4\n+ cmpld 3,4\n+ subic 3,4,42\n+ rotlwi 3,4,16\n+ clrldi 3,4,58\n+ nop\n+ xnop\n+ twlt 3,4\n+ sub 3,4,5\n+ subc. 3,4,5\n+ mffprd 3,4\n+ mfvrd 3,4\n+ mtcr 3\n+ dcbtstt 3,4\n+ dcbtstct 3,4,7\n+ dcbtstds 3,4,8\n+ dcbna 3,4\n+ mflr 3\n+ mfctr 3\n+ mtsprg0 3\n+ yield\n+ mdoom\n+ lwsync\n+ pli 3,-1<<33"
    },
    {
      "sha": "e6b5f3e21672c8b6d4247c4098f4f28c6555279d",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
      "patch": "@@ -1,3 +1,18 @@\n+2021-05-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* ppc-dis.c (lookup_powerpc): Test deprecated field when -Many.\n+\tDon't special case PPC_OPCODE_RAW.\n+\t(lookup_prefix): Likewise.\n+\t(lookup_vle, lookup_spe2): Similarly.  Add dialect parameter and..\n+\t(print_insn_powerpc): ..update caller.\n+\t* ppc-opc.c (EXT): Define.\n+\t(powerpc_opcodes): Mark extended mnemonics with EXT.\n+\t(prefix_opcodes, vle_opcodes): Likewise.\n+\t(XISEL, XISEL_MASK): Add cr field and simplify.\n+\t(powerpc_opcodes): Use XISEL with extended isel mnemonics and sort\n+\tall isel variants to where the base mnemonic belongs.  Sort dstt,\n+\tdststt and dssall.\n+\n 2021-05-29  Maciej W. Rozycki  <macro@orcam.me.uk>\n \n \t* mips-opc.c (mips_builtin_opcodes): Reorder legacy COP0, COP2,"
    },
    {
      "sha": "f25909d1c010689a6bfd655b0e1044023a37931b",
      "filename": "opcodes/ppc-dis.c",
      "status": "modified",
      "additions": 18,
      "deletions": 30,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/opcodes/ppc-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/opcodes/ppc-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-dis.c?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc",
      "patch": "@@ -580,15 +580,14 @@ skip_optional_operands (const unsigned char *opindex,\n static const struct powerpc_opcode *\n lookup_powerpc (uint64_t insn, ppc_cpu_t dialect)\n {\n-  const struct powerpc_opcode *opcode, *opcode_end, *last;\n+  const struct powerpc_opcode *opcode, *opcode_end;\n   unsigned long op;\n \n   /* Get the major opcode of the instruction.  */\n   op = PPC_OP (insn);\n \n   /* Find the first match in the opcode table for this major opcode.  */\n   opcode_end = powerpc_opcodes + powerpc_opcd_indices[op + 1];\n-  last = NULL;\n   for (opcode = powerpc_opcodes + powerpc_opcd_indices[op];\n        opcode < opcode_end;\n        ++opcode)\n@@ -599,8 +598,8 @@ lookup_powerpc (uint64_t insn, ppc_cpu_t dialect)\n \n       if ((insn & opcode->mask) != opcode->opcode\n \t  || ((dialect & PPC_OPCODE_ANY) == 0\n-\t      && ((opcode->flags & dialect) == 0\n-\t\t  || (opcode->deprecated & dialect) != 0)))\n+\t      && (opcode->flags & dialect) == 0)\n+\t  || (opcode->deprecated & dialect) != 0)\n \tcontinue;\n \n       /* Check validity of operands.  */\n@@ -614,32 +613,25 @@ lookup_powerpc (uint64_t insn, ppc_cpu_t dialect)\n       if (invalid)\n \tcontinue;\n \n-      if ((dialect & PPC_OPCODE_RAW) == 0)\n-\treturn opcode;\n-\n-      /* The raw machine insn is one that is not a specialization.  */\n-      if (last == NULL\n-\t  || (last->mask & ~opcode->mask) != 0)\n-\tlast = opcode;\n+      return opcode;\n     }\n \n-  return last;\n+  return NULL;\n }\n \n /* Find a match for INSN in the PREFIX opcode table.  */\n \n static const struct powerpc_opcode *\n lookup_prefix (uint64_t insn, ppc_cpu_t dialect)\n {\n-  const struct powerpc_opcode *opcode, *opcode_end, *last;\n+  const struct powerpc_opcode *opcode, *opcode_end;\n   unsigned long seg;\n \n   /* Get the opcode segment of the instruction.  */\n   seg = PPC_PREFIX_SEG (insn);\n \n   /* Find the first match in the opcode table for this major opcode.  */\n   opcode_end = prefix_opcodes + prefix_opcd_indices[seg + 1];\n-  last = NULL;\n   for (opcode = prefix_opcodes + prefix_opcd_indices[seg];\n        opcode < opcode_end;\n        ++opcode)\n@@ -650,8 +642,8 @@ lookup_prefix (uint64_t insn, ppc_cpu_t dialect)\n \n       if ((insn & opcode->mask) != opcode->opcode\n \t  || ((dialect & PPC_OPCODE_ANY) == 0\n-\t      && ((opcode->flags & dialect) == 0\n-\t\t  || (opcode->deprecated & dialect) != 0)))\n+\t      && (opcode->flags & dialect) == 0)\n+\t  || (opcode->deprecated & dialect) != 0)\n \tcontinue;\n \n       /* Check validity of operands.  */\n@@ -665,22 +657,16 @@ lookup_prefix (uint64_t insn, ppc_cpu_t dialect)\n       if (invalid)\n \tcontinue;\n \n-      if ((dialect & PPC_OPCODE_RAW) == 0)\n-\treturn opcode;\n-\n-      /* The raw machine insn is one that is not a specialization.  */\n-      if (last == NULL\n-\t  || (last->mask & ~opcode->mask) != 0)\n-\tlast = opcode;\n+      return opcode;\n     }\n \n-  return last;\n+  return NULL;\n }\n \n /* Find a match for INSN in the VLE opcode table.  */\n \n static const struct powerpc_opcode *\n-lookup_vle (uint64_t insn)\n+lookup_vle (uint64_t insn, ppc_cpu_t dialect)\n {\n   const struct powerpc_opcode *opcode;\n   const struct powerpc_opcode *opcode_end;\n@@ -711,7 +697,8 @@ lookup_vle (uint64_t insn)\n       insn2 = insn;\n       if (table_op_is_short)\n \tinsn2 >>= 16;\n-      if ((insn2 & table_mask) != table_opcd)\n+      if ((insn2 & table_mask) != table_opcd\n+\t  || (opcode->deprecated & dialect) != 0)\n \tcontinue;\n \n       /* Check validity of operands.  */\n@@ -734,7 +721,7 @@ lookup_vle (uint64_t insn)\n /* Find a match for INSN in the SPE2 opcode table.  */\n \n static const struct powerpc_opcode *\n-lookup_spe2 (uint64_t insn)\n+lookup_spe2 (uint64_t insn, ppc_cpu_t dialect)\n {\n   const struct powerpc_opcode *opcode, *opcode_end;\n   unsigned op, xop, seg;\n@@ -763,7 +750,8 @@ lookup_spe2 (uint64_t insn)\n       int invalid;\n \n       insn2 = insn;\n-      if ((insn2 & table_mask) != table_opcd)\n+      if ((insn2 & table_mask) != table_opcd\n+\t  || (opcode->deprecated & dialect) != 0)\n \tcontinue;\n \n       /* Check validity of operands.  */\n@@ -916,7 +904,7 @@ print_insn_powerpc (bfd_vma memaddr,\n     }\n   if (opcode == NULL && (dialect & PPC_OPCODE_VLE) != 0)\n     {\n-      opcode = lookup_vle (insn);\n+      opcode = lookup_vle (insn, dialect);\n       if (opcode != NULL && PPC_OP_SE_VLE (opcode->mask))\n \t{\n \t  /* The operands will be fetched out of the 16-bit instruction.  */\n@@ -927,7 +915,7 @@ print_insn_powerpc (bfd_vma memaddr,\n   if (opcode == NULL && insn_length == 4)\n     {\n       if ((dialect & PPC_OPCODE_SPE2) != 0)\n-\topcode = lookup_spe2 (insn);\n+\topcode = lookup_spe2 (insn, dialect);\n       if (opcode == NULL)\n \topcode = lookup_powerpc (insn, dialect & ~PPC_OPCODE_ANY);\n       if (opcode == NULL && (dialect & PPC_OPCODE_ANY) != 0)"
    },
    {
      "sha": "e0593c8e24e56041cdcd6aa872df77596cd826a7",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 1601,
      "deletions": 1605,
      "changes": 3206,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=1ff6a3b8e562d09aec8dcf1d8b0ef67f271126fc"
    }
  ]
}