{
  "sha": "64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
  "node_id": "C_kwDOANOeidoAKDY0YjdjYzUwN2I3NzIyNGVlZWZhNjRmNmM2NmE5YzhlMDMyMWIyNmE",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-22T17:28:37Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-24T17:32:14Z"
    },
    "message": "Remove gdb_print_host_address\n\ngdb_print_host_address is just a simple wrapper around\nfprintf_filtered.  However, it is readily replaced in all callers by a\ncombination of %s and call to host_address_to_string.  This also\nsimplifies the code, so I think it's worthwhile to remove this\nfunction.\n\nRegression tested on x86-64 Fedora 64.",
    "tree": {
      "sha": "28cbf1b56bda90741cd1c79b21dbc9cbcc8ca2d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/28cbf1b56bda90741cd1c79b21dbc9cbcc8ca2d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "34b965f7c006e64dbd5546575744daa642d4856f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34b965f7c006e64dbd5546575744daa642d4856f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/34b965f7c006e64dbd5546575744daa642d4856f"
    }
  ],
  "stats": {
    "total": 282,
    "additions": 107,
    "deletions": 175
  },
  "files": [
    {
      "sha": "80e2d51edd58bf1c60c426109122b9c6a40b7ee2",
      "filename": "gdb/dummy-frame.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/dummy-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/dummy-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dummy-frame.c?ref=64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
      "patch": "@@ -405,14 +405,10 @@ fprint_dummy_frames (struct ui_file *file)\n   struct dummy_frame *s;\n \n   for (s = dummy_frame_stack; s != NULL; s = s->next)\n-    {\n-      gdb_print_host_address (s, file);\n-      fprintf_unfiltered (file, \":\");\n-      fprintf_unfiltered (file, \" id=%s\", s->id.id.to_string ().c_str ());\n-      fprintf_unfiltered (file, \", ptid=%s\",\n-\t\t\t  target_pid_to_str (s->id.thread->ptid).c_str ());\n-      fprintf_unfiltered (file, \"\\n\");\n-    }\n+    fprintf_unfiltered (file, \"%s: id=%s, ptid=%s\\n\",\n+\t\t\thost_address_to_string (s),\n+\t\t\ts->id.id.to_string ().c_str (),\n+\t\t\ttarget_pid_to_str (s->id.thread->ptid).c_str ());\n }\n \n static void"
    },
    {
      "sha": "c15d9399a7190fd54dcb397b637a85aa1bc43d3f",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 68,
      "deletions": 93,
      "changes": 161,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
      "patch": "@@ -4901,48 +4901,44 @@ dump_fn_fieldlists (struct type *type, int spaces)\n   int overload_idx;\n   struct fn_field *f;\n \n-  printf_filtered (\"%*sfn_fieldlists \", spaces, \"\");\n-  gdb_print_host_address (TYPE_FN_FIELDLISTS (type), gdb_stdout);\n-  printf_filtered (\"\\n\");\n+  printf_filtered (\"%*sfn_fieldlists %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (TYPE_FN_FIELDLISTS (type)));\n   for (method_idx = 0; method_idx < TYPE_NFN_FIELDS (type); method_idx++)\n     {\n       f = TYPE_FN_FIELDLIST1 (type, method_idx);\n-      printf_filtered (\"%*s[%d] name '%s' (\", spaces + 2, \"\",\n-\t\t       method_idx,\n-\t\t       TYPE_FN_FIELDLIST_NAME (type, method_idx));\n-      gdb_print_host_address (TYPE_FN_FIELDLIST_NAME (type, method_idx),\n-\t\t\t      gdb_stdout);\n-      printf_filtered (_(\") length %d\\n\"),\n-\t\t       TYPE_FN_FIELDLIST_LENGTH (type, method_idx));\n+      printf_filtered\n+\t(\"%*s[%d] name '%s' (%s) length %d\\n\", spaces + 2, \"\",\n+\t method_idx,\n+\t TYPE_FN_FIELDLIST_NAME (type, method_idx),\n+\t host_address_to_string (TYPE_FN_FIELDLIST_NAME (type, method_idx)),\n+\t TYPE_FN_FIELDLIST_LENGTH (type, method_idx));\n       for (overload_idx = 0;\n \t   overload_idx < TYPE_FN_FIELDLIST_LENGTH (type, method_idx);\n \t   overload_idx++)\n \t{\n-\t  printf_filtered (\"%*s[%d] physname '%s' (\",\n-\t\t\t   spaces + 4, \"\", overload_idx,\n-\t\t\t   TYPE_FN_FIELD_PHYSNAME (f, overload_idx));\n-\t  gdb_print_host_address (TYPE_FN_FIELD_PHYSNAME (f, overload_idx),\n-\t\t\t\t  gdb_stdout);\n-\t  printf_filtered (\")\\n\");\n-\t  printf_filtered (\"%*stype \", spaces + 8, \"\");\n-\t  gdb_print_host_address (TYPE_FN_FIELD_TYPE (f, overload_idx), \n-\t\t\t\t  gdb_stdout);\n-\t  printf_filtered (\"\\n\");\n+\t  printf_filtered\n+\t    (\"%*s[%d] physname '%s' (%s)\\n\",\n+\t     spaces + 4, \"\", overload_idx,\n+\t     TYPE_FN_FIELD_PHYSNAME (f, overload_idx),\n+\t     host_address_to_string (TYPE_FN_FIELD_PHYSNAME (f,\n+\t\t\t\t\t\t\t     overload_idx)));\n+\t  printf_filtered\n+\t    (\"%*stype %s\\n\", spaces + 8, \"\",\n+\t     host_address_to_string (TYPE_FN_FIELD_TYPE (f, overload_idx)));\n \n \t  recursive_dump_type (TYPE_FN_FIELD_TYPE (f, overload_idx),\n \t\t\t       spaces + 8 + 2);\n \n-\t  printf_filtered (\"%*sargs \", spaces + 8, \"\");\n-\t  gdb_print_host_address (TYPE_FN_FIELD_ARGS (f, overload_idx), \n-\t\t\t\t  gdb_stdout);\n-\t  printf_filtered (\"\\n\");\n+\t  printf_filtered\n+\t    (\"%*sargs %s\\n\", spaces + 8, \"\",\n+\t     host_address_to_string (TYPE_FN_FIELD_ARGS (f, overload_idx)));\n \t  print_args (TYPE_FN_FIELD_ARGS (f, overload_idx),\n \t\t      TYPE_FN_FIELD_TYPE (f, overload_idx)->num_fields (),\n \t\t      spaces + 8 + 2);\n-\t  printf_filtered (\"%*sfcontext \", spaces + 8, \"\");\n-\t  gdb_print_host_address (TYPE_FN_FIELD_FCONTEXT (f, overload_idx),\n-\t\t\t\t  gdb_stdout);\n-\t  printf_filtered (\"\\n\");\n+\t  printf_filtered\n+\t    (\"%*sfcontext %s\\n\", spaces + 8, \"\",\n+\t     host_address_to_string (TYPE_FN_FIELD_FCONTEXT (f,\n+\t\t\t\t\t\t\t     overload_idx)));\n \n \t  printf_filtered (\"%*sis_const %d\\n\", spaces + 8, \"\",\n \t\t\t   TYPE_FN_FIELD_CONST (f, overload_idx));\n@@ -4969,9 +4965,8 @@ print_cplus_stuff (struct type *type, int spaces)\n {\n   printf_filtered (\"%*svptr_fieldno %d\\n\", spaces, \"\",\n \t\t   TYPE_VPTR_FIELDNO (type));\n-  printf_filtered (\"%*svptr_basetype \", spaces, \"\");\n-  gdb_print_host_address (TYPE_VPTR_BASETYPE (type), gdb_stdout);\n-  puts_filtered (\"\\n\");\n+  printf_filtered (\"%*svptr_basetype %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (TYPE_VPTR_BASETYPE (type)));\n   if (TYPE_VPTR_BASETYPE (type) != NULL)\n     recursive_dump_type (TYPE_VPTR_BASETYPE (type), spaces + 2);\n \n@@ -4981,11 +4976,10 @@ print_cplus_stuff (struct type *type, int spaces)\n \t\t   TYPE_NFN_FIELDS (type));\n   if (TYPE_N_BASECLASSES (type) > 0)\n     {\n-      printf_filtered (\"%*svirtual_field_bits (%d bits at *\",\n-\t\t       spaces, \"\", TYPE_N_BASECLASSES (type));\n-      gdb_print_host_address (TYPE_FIELD_VIRTUAL_BITS (type), \n-\t\t\t      gdb_stdout);\n-      printf_filtered (\")\");\n+      printf_filtered\n+\t(\"%*svirtual_field_bits (%d bits at *%s)\",\n+\t spaces, \"\", TYPE_N_BASECLASSES (type),\n+\t host_address_to_string (TYPE_FIELD_VIRTUAL_BITS (type)));\n \n       print_bit_vector (TYPE_FIELD_VIRTUAL_BITS (type),\n \t\t\tTYPE_N_BASECLASSES (type));\n@@ -4995,22 +4989,20 @@ print_cplus_stuff (struct type *type, int spaces)\n     {\n       if (TYPE_FIELD_PRIVATE_BITS (type) != NULL)\n \t{\n-\t  printf_filtered (\"%*sprivate_field_bits (%d bits at *\",\n-\t\t\t   spaces, \"\", type->num_fields ());\n-\t  gdb_print_host_address (TYPE_FIELD_PRIVATE_BITS (type), \n-\t\t\t\t  gdb_stdout);\n-\t  printf_filtered (\")\");\n+\t  printf_filtered\n+\t    (\"%*sprivate_field_bits (%d bits at *%s)\",\n+\t     spaces, \"\", type->num_fields (),\n+\t     host_address_to_string (TYPE_FIELD_PRIVATE_BITS (type)));\n \t  print_bit_vector (TYPE_FIELD_PRIVATE_BITS (type),\n \t\t\t    type->num_fields ());\n \t  puts_filtered (\"\\n\");\n \t}\n       if (TYPE_FIELD_PROTECTED_BITS (type) != NULL)\n \t{\n-\t  printf_filtered (\"%*sprotected_field_bits (%d bits at *\",\n-\t\t\t   spaces, \"\", type->num_fields ());\n-\t  gdb_print_host_address (TYPE_FIELD_PROTECTED_BITS (type), \n-\t\t\t\t  gdb_stdout);\n-\t  printf_filtered (\")\");\n+\t  printf_filtered\n+\t    (\"%*sprotected_field_bits (%d bits at *%s\",\n+\t     spaces, \"\", type->num_fields (),\n+\t     host_address_to_string (TYPE_FIELD_PROTECTED_BITS (type)));\n \t  print_bit_vector (TYPE_FIELD_PROTECTED_BITS (type),\n \t\t\t    type->num_fields ());\n \t  puts_filtered (\"\\n\");\n@@ -5098,8 +5090,8 @@ recursive_dump_type (struct type *type, int spaces)\n \t{\n \t  if (type == first_dont_print[i])\n \t    {\n-\t      printf_filtered (\"%*stype node \", spaces, \"\");\n-\t      gdb_print_host_address (type, gdb_stdout);\n+\t      printf_filtered (\"%*stype node %s\", spaces, \"\",\n+\t\t\t       host_address_to_string (type));\n \t      printf_filtered (_(\" <same as already seen type>\\n\"));\n \t      return;\n \t    }\n@@ -5108,13 +5100,11 @@ recursive_dump_type (struct type *type, int spaces)\n       obstack_ptr_grow (&dont_print_type_obstack, type);\n     }\n \n-  printf_filtered (\"%*stype node \", spaces, \"\");\n-  gdb_print_host_address (type, gdb_stdout);\n-  printf_filtered (\"\\n\");\n-  printf_filtered (\"%*sname '%s' (\", spaces, \"\",\n-\t\t   type->name () ? type->name () : \"<NULL>\");\n-  gdb_print_host_address (type->name (), gdb_stdout);\n-  printf_filtered (\")\\n\");\n+  printf_filtered (\"%*stype node %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (type));\n+  printf_filtered (\"%*sname '%s' (%s)\\n\", spaces, \"\",\n+\t\t   type->name () ? type->name () : \"<NULL>\",\n+\t\t   host_address_to_string (type->name ()));\n   printf_filtered (\"%*scode 0x%x \", spaces, \"\", type->code ());\n   switch (type->code ())\n     {\n@@ -5201,32 +5191,23 @@ recursive_dump_type (struct type *type, int spaces)\n   printf_filtered (\"%*slength %s\\n\", spaces, \"\",\n \t\t   pulongest (TYPE_LENGTH (type)));\n   if (type->is_objfile_owned ())\n-    {\n-      printf_filtered (\"%*sobjfile \", spaces, \"\");\n-      gdb_print_host_address (type->objfile_owner (), gdb_stdout);\n-    }\n+    printf_filtered (\"%*sobjfile %s\\n\", spaces, \"\",\n+\t\t     host_address_to_string (type->objfile_owner ()));\n   else\n-    {\n-      printf_filtered (\"%*sgdbarch \", spaces, \"\");\n-      gdb_print_host_address (type->arch_owner (), gdb_stdout);\n-    }\n-  printf_filtered (\"\\n\");\n-  printf_filtered (\"%*starget_type \", spaces, \"\");\n-  gdb_print_host_address (TYPE_TARGET_TYPE (type), gdb_stdout);\n-  printf_filtered (\"\\n\");\n+    printf_filtered (\"%*sgdbarch %s\\n\", spaces, \"\",\n+\t\t     host_address_to_string (type->arch_owner ()));\n+  printf_filtered (\"%*starget_type %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (TYPE_TARGET_TYPE (type)));\n   if (TYPE_TARGET_TYPE (type) != NULL)\n     {\n       recursive_dump_type (TYPE_TARGET_TYPE (type), spaces + 2);\n     }\n-  printf_filtered (\"%*spointer_type \", spaces, \"\");\n-  gdb_print_host_address (TYPE_POINTER_TYPE (type), gdb_stdout);\n-  printf_filtered (\"\\n\");\n-  printf_filtered (\"%*sreference_type \", spaces, \"\");\n-  gdb_print_host_address (TYPE_REFERENCE_TYPE (type), gdb_stdout);\n-  printf_filtered (\"\\n\");\n-  printf_filtered (\"%*stype_chain \", spaces, \"\");\n-  gdb_print_host_address (TYPE_CHAIN (type), gdb_stdout);\n-  printf_filtered (\"\\n\");\n+  printf_filtered (\"%*spointer_type %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (TYPE_POINTER_TYPE (type)));\n+  printf_filtered (\"%*sreference_type %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (TYPE_REFERENCE_TYPE (type)));\n+  printf_filtered (\"%*stype_chain %s\\n\", spaces, \"\",\n+\t\t   host_address_to_string (TYPE_CHAIN (type)));\n   printf_filtered (\"%*sinstance_flags 0x%x\", spaces, \"\", \n \t\t   (unsigned) type->instance_flags ());\n   if (TYPE_CONST (type))\n@@ -5331,8 +5312,7 @@ recursive_dump_type (struct type *type, int spaces)\n \t}\n       printf_filtered (\"\\n\");\n     }\n-  gdb_print_host_address (type->fields (), gdb_stdout);\n-  puts_filtered (\"\\n\");\n+  printf (\"%s\\n\", host_address_to_string (type->fields ()));\n   for (idx = 0; idx < type->num_fields (); idx++)\n     {\n       if (type->code () == TYPE_CODE_ENUM)\n@@ -5342,13 +5322,12 @@ recursive_dump_type (struct type *type, int spaces)\n \tprintf_filtered (\"%*s[%d] bitpos %s bitsize %d type \", spaces + 2, \"\",\n \t\t\t idx, plongest (type->field (idx).loc_bitpos ()),\n \t\t\t TYPE_FIELD_BITSIZE (type, idx));\n-      gdb_print_host_address (type->field (idx).type (), gdb_stdout);\n-      printf_filtered (\" name '%s' (\",\n+      printf_filtered (\"%s name '%s' (%s)\\n\",\n+\t\t       host_address_to_string (type->field (idx).type ()),\n \t\t       type->field (idx).name () != NULL\n \t\t       ? type->field (idx).name ()\n-\t\t       : \"<NULL>\");\n-      gdb_print_host_address (type->field (idx).name (), gdb_stdout);\n-      printf_filtered (\")\\n\");\n+\t\t       : \"<NULL>\",\n+\t\t       host_address_to_string (type->field (idx).name ()));\n       if (type->field (idx).type () != NULL)\n \t{\n \t  recursive_dump_type (type->field (idx).type (), spaces + 4);\n@@ -5366,17 +5345,14 @@ recursive_dump_type (struct type *type, int spaces)\n   switch (TYPE_SPECIFIC_FIELD (type))\n     {\n       case TYPE_SPECIFIC_CPLUS_STUFF:\n-\tprintf_filtered (\"%*scplus_stuff \", spaces, \"\");\n-\tgdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), \n-\t\t\t\tgdb_stdout);\n-\tputs_filtered (\"\\n\");\n+\tprintf_filtered (\"%*scplus_stuff %s\\n\", spaces, \"\",\n+\t\t\t host_address_to_string (TYPE_CPLUS_SPECIFIC (type)));\n \tprint_cplus_stuff (type, spaces);\n \tbreak;\n \n       case TYPE_SPECIFIC_GNAT_STUFF:\n-\tprintf_filtered (\"%*sgnat_stuff \", spaces, \"\");\n-\tgdb_print_host_address (TYPE_GNAT_SPECIFIC (type), gdb_stdout);\n-\tputs_filtered (\"\\n\");\n+\tprintf_filtered (\"%*sgnat_stuff %s\\n\", spaces, \"\",\n+\t\t\t host_address_to_string (TYPE_GNAT_SPECIFIC (type)));\n \tprint_gnat_stuff (type, spaces);\n \tbreak;\n \n@@ -5397,9 +5373,8 @@ recursive_dump_type (struct type *type, int spaces)\n \tbreak;\n \n       case TYPE_SPECIFIC_SELF_TYPE:\n-\tprintf_filtered (\"%*sself_type \", spaces, \"\");\n-\tgdb_print_host_address (TYPE_SELF_TYPE (type), gdb_stdout);\n-\tputs_filtered (\"\\n\");\n+\tprintf_filtered (\"%*sself_type %s\\n\", spaces, \"\",\n+\t\t\t host_address_to_string (TYPE_SELF_TYPE (type)));\n \tbreak;\n \n       case TYPE_SPECIFIC_FIXED_POINT:"
    },
    {
      "sha": "d0821b302716424c26497d1c2b62f8849fa32216",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 16,
      "deletions": 30,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
      "patch": "@@ -766,21 +766,17 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n       fprintf_filtered (outfile, \"\\nPartial symtab for source file %s \",\n \t\t\tpsymtab->filename);\n     }\n-  fprintf_filtered (outfile, \"(object \");\n-  gdb_print_host_address (psymtab, outfile);\n-  fprintf_filtered (outfile, \")\\n\\n\");\n-  fprintf_filtered (outfile, \"  Read from object file %s (\",\n-\t\t    objfile_name (objfile));\n-  gdb_print_host_address (objfile, outfile);\n-  fprintf_filtered (outfile, \")\\n\");\n+  fprintf_filtered (outfile, \"(object %s)\\n\\n\",\n+\t\t    host_address_to_string (psymtab));\n+  fprintf_filtered (outfile, \"  Read from object file %s (%s)\\n\",\n+\t\t    objfile_name (objfile),\n+\t\t    host_address_to_string (objfile));\n \n   if (psymtab->readin_p (objfile))\n-    {\n-      fprintf_filtered (outfile,\n-\t\t\t\"  Full symtab was read (at \");\n-      gdb_print_host_address (psymtab->get_compunit_symtab (objfile), outfile);\n-      fprintf_filtered (outfile, \")\\n\");\n-    }\n+    fprintf_filtered\n+      (outfile,\n+       \"  Full symtab was read (at %s)\\n\",\n+       host_address_to_string (psymtab->get_compunit_symtab (objfile)));\n \n   fprintf_filtered (outfile, \"  Symbols cover text addresses \");\n   fputs_filtered (paddress (gdbarch, psymtab->text_low (objfile)), outfile);\n@@ -792,18 +788,11 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n   fprintf_filtered (outfile, \"  Depends on %d other partial symtabs.\\n\",\n \t\t    psymtab->number_of_dependencies);\n   for (i = 0; i < psymtab->number_of_dependencies; i++)\n-    {\n-      fprintf_filtered (outfile, \"    %d \", i);\n-      gdb_print_host_address (psymtab->dependencies[i], outfile);\n-      fprintf_filtered (outfile, \" %s\\n\",\n-\t\t\tpsymtab->dependencies[i]->filename);\n-    }\n+    fprintf_filtered (outfile, \"    %d %s\\n\", i,\n+\t\t      host_address_to_string (psymtab->dependencies[i]));\n   if (psymtab->user != NULL)\n-    {\n-      fprintf_filtered (outfile, \"  Shared partial symtab with user \");\n-      gdb_print_host_address (psymtab->user, outfile);\n-      fprintf_filtered (outfile, \"\\n\");\n-    }\n+    fprintf_filtered (outfile, \"  Shared partial symtab with user %s\\n\",\n+\t\t      host_address_to_string (psymtab->user));\n   if (!psymtab->global_psymbols.empty ())\n     {\n       print_partial_symbols\n@@ -881,12 +870,9 @@ psymbol_functions::dump (struct objfile *objfile)\n       for (psymtab = m_partial_symtabs->psymtabs;\n \t   psymtab != NULL;\n \t   psymtab = psymtab->next)\n-\t{\n-\t  printf_filtered (\"%s at \",\n-\t\t\t   psymtab->filename);\n-\t  gdb_print_host_address (psymtab, gdb_stdout);\n-\t  printf_filtered (\"\\n\");\n-\t}\n+\tprintf_filtered (\"%s at %s\\n\",\n+\t\t\t psymtab->filename,\n+\t\t\t host_address_to_string (psymtab));\n       printf_filtered (\"\\n\\n\");\n     }\n }"
    },
    {
      "sha": "b5e3ef7acaab4c9ea36cc9afcc40118f9aeaa842",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 19,
      "deletions": 29,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
      "patch": "@@ -113,11 +113,9 @@ static void\n dump_objfile (struct objfile *objfile)\n {\n   printf_filtered (\"\\nObject file %s:  \", objfile_name (objfile));\n-  printf_filtered (\"Objfile at \");\n-  gdb_print_host_address (objfile, gdb_stdout);\n-  printf_filtered (\", bfd at \");\n-  gdb_print_host_address (objfile->obfd, gdb_stdout);\n-  printf_filtered (\", %d minsyms\\n\\n\",\n+  printf_filtered (\"Objfile at %s, bfd at %s, %d minsyms\\n\\n\",\n+\t\t   host_address_to_string (objfile),\n+\t\t   host_address_to_string (objfile->obfd),\n \t\t   objfile->per_bfd->minimal_symbol_count);\n \n   objfile->dump ();\n@@ -129,9 +127,9 @@ dump_objfile (struct objfile *objfile)\n \t{\n \t  for (symtab *symtab : compunit_filetabs (cu))\n \t    {\n-\t      printf_filtered (\"%s at \",\n-\t\t\t       symtab_to_filename_for_display (symtab));\n-\t      gdb_print_host_address (symtab, gdb_stdout);\n+\t      printf_filtered (\"%s at %s\",\n+\t\t\t       symtab_to_filename_for_display (symtab),\n+\t\t\t       host_address_to_string (symtab));\n \t      if (SYMTAB_OBJFILE (symtab) != objfile)\n \t\tprintf_filtered (\", NOT ON CHAIN!\");\n \t      printf_filtered (\"\\n\");\n@@ -253,10 +251,9 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n   if (SYMTAB_DIRNAME (symtab) != NULL)\n     fprintf_filtered (outfile, \"Compilation directory is %s\\n\",\n \t\t      SYMTAB_DIRNAME (symtab));\n-  fprintf_filtered (outfile, \"Read from object file %s (\",\n-\t\t    objfile_name (objfile));\n-  gdb_print_host_address (objfile, outfile);\n-  fprintf_filtered (outfile, \")\\n\");\n+  fprintf_filtered (outfile, \"Read from object file %s (%s)\\n\",\n+\t\t    objfile_name (objfile),\n+\t\t    host_address_to_string (objfile));\n   fprintf_filtered (outfile, \"Language: %s\\n\",\n \t\t    language_str (symtab->language));\n \n@@ -286,14 +283,12 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n \t{\n \t  b = BLOCKVECTOR_BLOCK (bv, i);\n \t  depth = block_depth (b) * 2;\n-\t  fprintf_filtered (outfile, \"%*sblock #%03d, object at \",\n-\t\t\t    depth, \"\", i);\n-\t  gdb_print_host_address (b, outfile);\n+\t  fprintf_filtered (outfile, \"%*sblock #%03d, object at %s\",\n+\t\t\t    depth, \"\", i,\n+\t\t\t    host_address_to_string (b));\n \t  if (BLOCK_SUPERBLOCK (b))\n-\t    {\n-\t      fprintf_filtered (outfile, \" under \");\n-\t      gdb_print_host_address (BLOCK_SUPERBLOCK (b), outfile);\n-\t    }\n+\t    fprintf_filtered (outfile, \" under %s\",\n+\t\t\t      host_address_to_string (BLOCK_SUPERBLOCK (b)));\n \t  /* drow/2002-07-10: We could save the total symbols count\n \t     even if we're using a hashtable, but nothing else but this message\n \t     wants it.  */\n@@ -633,16 +628,11 @@ print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n \t  break;\n \n \tcase LOC_BLOCK:\n-\t  fprintf_filtered (outfile, \"block object \");\n-\t  gdb_print_host_address (SYMBOL_BLOCK_VALUE (symbol), outfile);\n-\t  fprintf_filtered (outfile, \", \");\n-\t  fputs_filtered (paddress (gdbarch,\n-\t\t\t\t    BLOCK_START (SYMBOL_BLOCK_VALUE (symbol))),\n-\t\t\t  outfile);\n-\t  fprintf_filtered (outfile, \"..\");\n-\t  fputs_filtered (paddress (gdbarch,\n-\t\t\t\t    BLOCK_END (SYMBOL_BLOCK_VALUE (symbol))),\n-\t\t\t  outfile);\n+\t  fprintf_filtered\n+\t    (outfile, \"block object %s, %s..%s\",\n+\t     host_address_to_string (SYMBOL_BLOCK_VALUE (symbol)),\n+\t     paddress (gdbarch, BLOCK_START (SYMBOL_BLOCK_VALUE (symbol))),\n+\t     paddress (gdbarch, BLOCK_END (SYMBOL_BLOCK_VALUE (symbol))));\n \t  if (section)\n \t    fprintf_filtered (outfile, \" section %s\",\n \t\t\t      bfd_section_name (section->the_bfd_section));"
    },
    {
      "sha": "620ae9f3729e68e7f04e0c34c0e26e9383b15c72",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
      "patch": "@@ -779,14 +779,6 @@ uinteger_pow (ULONGEST v1, LONGEST v2)\n     }\n }\n \n-/* Print a host address.  */\n-\n-void\n-gdb_print_host_address_1 (const void *addr, struct ui_file *stream)\n-{\n-  fprintf_filtered (stream, \"%s\", host_address_to_string (addr));\n-}\n-\n \f\n \n /* An RAII class that sets up to handle input and then tears down"
    },
    {
      "sha": "d86b5645c7b70abed89cc7be4bf36e3e824227ee",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b7cc507b77224eeefa64f6c66a9c8e0321b26a/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=64b7cc507b77224eeefa64f6c66a9c8e0321b26a",
      "patch": "@@ -528,13 +528,6 @@ extern void fputs_highlighted (const char *str, const compiled_regex &highlight,\n \n extern void reset_terminal_style (struct ui_file *stream);\n \n-/* Display the host ADDR on STREAM formatted as ``0x%x''.  */\n-extern void gdb_print_host_address_1 (const void *addr, struct ui_file *stream);\n-\n-/* Wrapper that avoids adding a pointless cast to all callers.  */\n-#define gdb_print_host_address(ADDR, STREAM) \\\n-  gdb_print_host_address_1 ((const void *) ADDR, STREAM)\n-\n /* Return the address only having significant bits.  */\n extern CORE_ADDR address_significant (gdbarch *gdbarch, CORE_ADDR addr);\n "
    }
  ]
}