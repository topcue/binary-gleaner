{
  "sha": "54746ce37a483e235ac128b6f545be9888bf3521",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTQ3NDZjZTM3YTQ4M2UyMzVhYzEyOGI2ZjU0NWJlOTg4OGJmMzUyMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:38Z"
    },
    "message": "C++-ify varobj iteration\n\nThis changes the varobj iteration code to use a C++ class rather than\na C struct with a separate \"ops\" structure.  The only implementation\nis updated to use inheritance.  This simplifies the code quite nicely.\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (update_dynamic_varobj_children, install_visualizer)\n\t(varobj::~varobj): Update.\n\t* varobj-iter.h (struct varobj_iter): Change to interface class.\n\t(struct varobj_iter_ops): Remove.\n\t(varobj_iter_next, varobj_iter_delete): Remove.\n\t* python/py-varobj.c (struct py_varobj_iter): Derive from\n\tvarobj_iter.  Add constructor, destructor.  Rename members.\n\t(py_varobj_iter::~py_varobj_iter): Rename from\n\tpy_varobj_iter_dtor.\n\t(py_varobj_iter::next): Rename from py_varobj_iter_next.\n\t(py_varobj_iter_ops): Remove.\n\t(py_varobj_iter): Rename from py_varobj_iter_ctor.\n\t(py_varobj_iter_new): Remove.\n\t(py_varobj_get_iterator): Update.",
    "tree": {
      "sha": "00098f97c2514f9895f1e7bab52678ed4dba9dee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/00098f97c2514f9895f1e7bab52678ed4dba9dee"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/54746ce37a483e235ac128b6f545be9888bf3521",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54746ce37a483e235ac128b6f545be9888bf3521",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/54746ce37a483e235ac128b6f545be9888bf3521",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54746ce37a483e235ac128b6f545be9888bf3521/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8f168ddd08f1d5fde1a193724cdc40d524039a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8f168ddd08f1d5fde1a193724cdc40d524039a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8f168ddd08f1d5fde1a193724cdc40d524039a7"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 54,
    "deletions": 94
  },
  "files": [
    {
      "sha": "53f87d9b940f8ee7e0c5b855492477aa5e13e303",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54746ce37a483e235ac128b6f545be9888bf3521/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54746ce37a483e235ac128b6f545be9888bf3521/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=54746ce37a483e235ac128b6f545be9888bf3521",
      "patch": "@@ -1,3 +1,20 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (update_dynamic_varobj_children, install_visualizer)\n+\t(varobj::~varobj): Update.\n+\t* varobj-iter.h (struct varobj_iter): Change to interface class.\n+\t(struct varobj_iter_ops): Remove.\n+\t(varobj_iter_next, varobj_iter_delete): Remove.\n+\t* python/py-varobj.c (struct py_varobj_iter): Derive from\n+\tvarobj_iter.  Add constructor, destructor.  Rename members.\n+\t(py_varobj_iter::~py_varobj_iter): Rename from\n+\tpy_varobj_iter_dtor.\n+\t(py_varobj_iter::next): Rename from py_varobj_iter_next.\n+\t(py_varobj_iter_ops): Remove.\n+\t(py_varobj_iter): Rename from py_varobj_iter_ctor.\n+\t(py_varobj_iter_new): Remove.\n+\t(py_varobj_get_iterator): Update.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* varobj.h (all_root_varobjs): Take a function_view."
    },
    {
      "sha": "df6f9c5a953f2dbe642c8a08af3782841a4150e3",
      "filename": "gdb/python/py-varobj.c",
      "status": "modified",
      "additions": 29,
      "deletions": 51,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54746ce37a483e235ac128b6f545be9888bf3521/gdb/python/py-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54746ce37a483e235ac128b6f545be9888bf3521/gdb/python/py-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-varobj.c?ref=54746ce37a483e235ac128b6f545be9888bf3521",
      "patch": "@@ -21,44 +21,53 @@\n /* A dynamic varobj iterator \"class\" for python pretty-printed\n    varobjs.  This inherits struct varobj_iter.  */\n \n-struct py_varobj_iter\n+struct py_varobj_iter : public varobj_iter\n {\n-  /* The 'base class'.  */\n-  struct varobj_iter base;\n+  py_varobj_iter (struct varobj *var, gdbpy_ref<> &&pyiter);\n+  ~py_varobj_iter () override;\n+\n+  varobj_item *next () override;\n+\n+private:\n+\n+  /* The varobj this iterator is listing children for.  */\n+  struct varobj *m_var;\n+\n+  /* The next raw index we will try to check is available.  If it is\n+     equal to number_of_children, then we've already iterated the\n+     whole set.  */\n+  int m_next_raw_index = 0;\n \n   /* The python iterator returned by the printer's 'children' method,\n      or NULL if not available.  */\n-  PyObject *iter;\n+  PyObject *m_iter;\n };\n \n /* Implementation of the 'dtor' method of pretty-printed varobj\n    iterators.  */\n \n-static void\n-py_varobj_iter_dtor (struct varobj_iter *self)\n+py_varobj_iter::~py_varobj_iter ()\n {\n-  struct py_varobj_iter *dis = (struct py_varobj_iter *) self;\n-  gdbpy_enter_varobj enter_py (self->var);\n-  Py_XDECREF (dis->iter);\n+  gdbpy_enter_varobj enter_py (m_var);\n+  Py_XDECREF (m_iter);\n }\n \n /* Implementation of the 'next' method of pretty-printed varobj\n    iterators.  */\n \n-static varobj_item *\n-py_varobj_iter_next (struct varobj_iter *self)\n+varobj_item *\n+py_varobj_iter::next ()\n {\n-  struct py_varobj_iter *t = (struct py_varobj_iter *) self;\n   PyObject *py_v;\n   varobj_item *vitem;\n   const char *name = NULL;\n \n   if (!gdb_python_initialized)\n     return NULL;\n \n-  gdbpy_enter_varobj enter_py (self->var);\n+  gdbpy_enter_varobj enter_py (m_var);\n \n-  gdbpy_ref<> item (PyIter_Next (t->iter));\n+  gdbpy_ref<> item (PyIter_Next (m_iter));\n \n   if (item == NULL)\n     {\n@@ -78,7 +87,7 @@ py_varobj_iter_next (struct varobj_iter *self)\n \t    }\n \n \t  std::string name_str = string_printf (\"<error at %d>\",\n-\t\t\t\t\t\tself->next_raw_index++);\n+\t\t\t\t\t\tm_next_raw_index++);\n \t  item.reset (Py_BuildValue (\"(ss)\", name_str.c_str (),\n \t\t\t\t     value_str.get ()));\n \t  if (item == NULL)\n@@ -107,45 +116,18 @@ py_varobj_iter_next (struct varobj_iter *self)\n     gdbpy_print_stack ();\n   vitem->name = name;\n \n-  self->next_raw_index++;\n+  m_next_raw_index++;\n   return vitem;\n }\n \n-/* The 'vtable' of pretty-printed python varobj iterators.  */\n-\n-static const struct varobj_iter_ops py_varobj_iter_ops =\n-{\n-  py_varobj_iter_dtor,\n-  py_varobj_iter_next\n-};\n-\n /* Constructor of pretty-printed varobj iterators.  VAR is the varobj\n    whose children the iterator will be iterating over.  PYITER is the\n    python iterator actually responsible for the iteration.  */\n \n-static void\n-py_varobj_iter_ctor (struct py_varobj_iter *self,\n-\t\t     struct varobj *var, gdbpy_ref<> &&pyiter)\n+py_varobj_iter::py_varobj_iter (struct varobj *var, gdbpy_ref<> &&pyiter)\n+  : m_var (var),\n+    m_iter (pyiter.release ())\n {\n-  self->base.var = var;\n-  self->base.ops = &py_varobj_iter_ops;\n-  self->base.next_raw_index = 0;\n-  self->iter = pyiter.release ();\n-}\n-\n-/* Allocate and construct a pretty-printed varobj iterator.  VAR is\n-   the varobj whose children the iterator will be iterating over.\n-   PYITER is the python iterator actually responsible for the\n-   iteration.  */\n-\n-static struct py_varobj_iter *\n-py_varobj_iter_new (struct varobj *var, gdbpy_ref<> &&pyiter)\n-{\n-  struct py_varobj_iter *self;\n-\n-  self = XNEW (struct py_varobj_iter);\n-  py_varobj_iter_ctor (self, var, std::move (pyiter));\n-  return self;\n }\n \n /* Return a new pretty-printed varobj iterator suitable to iterate\n@@ -154,8 +136,6 @@ py_varobj_iter_new (struct varobj *var, gdbpy_ref<> &&pyiter)\n struct varobj_iter *\n py_varobj_get_iterator (struct varobj *var, PyObject *printer)\n {\n-  struct py_varobj_iter *py_iter;\n-\n   gdbpy_enter_varobj enter_py (var);\n \n   if (!PyObject_HasAttr (printer, gdbpy_children_cst))\n@@ -176,7 +156,5 @@ py_varobj_get_iterator (struct varobj *var, PyObject *printer)\n       error (_(\"Could not get children iterator\"));\n     }\n \n-  py_iter = py_varobj_iter_new (var, std::move (iter));\n-\n-  return &py_iter->base;\n+  return new py_varobj_iter (var, std::move (iter));\n }"
    },
    {
      "sha": "ed654190ca539e27553c1da3b1aa4596fc660001",
      "filename": "gdb/varobj-iter.h",
      "status": "modified",
      "additions": 3,
      "deletions": 38,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54746ce37a483e235ac128b6f545be9888bf3521/gdb/varobj-iter.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54746ce37a483e235ac128b6f545be9888bf3521/gdb/varobj-iter.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj-iter.h?ref=54746ce37a483e235ac128b6f545be9888bf3521",
      "patch": "@@ -28,50 +28,15 @@ struct varobj_item\n   struct value *value;\n };\n \n-struct varobj_iter_ops;\n-\n /* A dynamic varobj iterator \"class\".  */\n \n struct varobj_iter\n {\n-  /* The 'vtable'.  */\n-  const struct varobj_iter_ops *ops;\n-\n-  /* The varobj this iterator is listing children for.  */\n-  struct varobj *var;\n-\n-  /* The next raw index we will try to check is available.  If it is\n-     equal to number_of_children, then we've already iterated the\n-     whole set.  */\n-  int next_raw_index;\n-};\n-\n-/* The vtable of the varobj iterator class.  */\n+public:\n \n-struct varobj_iter_ops\n-{\n-  /* Destructor.  Releases everything from SELF (but not SELF\n-     itself).  */\n-  void (*dtor) (struct varobj_iter *self);\n+  virtual ~varobj_iter () = default;\n \n-  /* Returns the next object or NULL if it has reached the end.  */\n-  varobj_item *(*next) (struct varobj_iter *self);\n+  virtual varobj_item *next () = 0;\n };\n \n-/* Returns the next varobj or NULL if it has reached the end.  */\n-\n-#define varobj_iter_next(ITER)\t(ITER)->ops->next (ITER)\n-\n-/* Delete a varobj_iter object.  */\n-\n-#define varobj_iter_delete(ITER)\t       \\\n-  do\t\t\t\t\t       \\\n-    {\t\t\t\t\t       \\\n-      if ((ITER) != NULL)\t\t       \\\n-\t{\t\t\t\t       \\\n-\t  (ITER)->ops->dtor (ITER);\t       \\\n-\t  xfree (ITER);\t\t       \\\n-\t}\t\t\t\t       \\\n-    } while (0)\n-\n #endif /* VAROBJ_ITER_H */"
    },
    {
      "sha": "80de679a60799b2bc4d3ada4d56771973e719b47",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54746ce37a483e235ac128b6f545be9888bf3521/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54746ce37a483e235ac128b6f545be9888bf3521/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=54746ce37a483e235ac128b6f545be9888bf3521",
      "patch": "@@ -702,7 +702,7 @@ update_dynamic_varobj_children (struct varobj *var,\n \n   if (update_children || var->dynamic->child_iter == NULL)\n     {\n-      varobj_iter_delete (var->dynamic->child_iter);\n+      delete var->dynamic->child_iter;\n       var->dynamic->child_iter = varobj_get_iterator (var);\n \n       varobj_clear_saved_item (var->dynamic);\n@@ -729,7 +729,7 @@ update_dynamic_varobj_children (struct varobj *var,\n \t}\n       else\n \t{\n-\t  item = varobj_iter_next (var->dynamic->child_iter);\n+\t  item = var->dynamic->child_iter->next ();\n \t  /* Release vitem->value so its lifetime is not bound to the\n \t     execution of a command.  */\n \t  if (item != NULL && item->value != NULL)\n@@ -739,7 +739,7 @@ update_dynamic_varobj_children (struct varobj *var,\n       if (item == NULL)\n \t{\n \t  /* Iteration is done.  Remove iterator from VAR.  */\n-\t  varobj_iter_delete (var->dynamic->child_iter);\n+\t  delete var->dynamic->child_iter;\n \t  var->dynamic->child_iter = NULL;\n \t  break;\n \t}\n@@ -1070,7 +1070,7 @@ install_visualizer (struct varobj_dynamic *var, PyObject *constructor,\n   Py_XDECREF (var->pretty_printer);\n   var->pretty_printer = visualizer;\n \n-  varobj_iter_delete (var->child_iter);\n+  delete var->child_iter;\n   var->child_iter = NULL;\n }\n \n@@ -1881,7 +1881,7 @@ varobj::~varobj ()\n     }\n #endif\n \n-  varobj_iter_delete (var->dynamic->child_iter);\n+  delete var->dynamic->child_iter;\n   varobj_clear_saved_item (var->dynamic);\n \n   if (is_root_p (var))"
    }
  ]
}