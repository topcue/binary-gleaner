{
  "sha": "d0509ba44323dc5550852f0dbdcb2ccc2818d5b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDA1MDliYTQ0MzIzZGM1NTUwODUyZjBkYmRjYjJjY2MyODE4ZDViMw==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-09T19:25:15Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-24T21:45:59Z"
    },
    "message": "Fix compile warning in symtab.c\n\nMy compiler (g++ 8.2) can't tell that *bsc_ptr and *slot_ptr are\nonly used in the cases when it does get initialized. Just initialize\nthe vars earlier to avoid the warning, there does not seem to be a\ndownside to it.\n\n../../gdb/symtab.c: In function \u2018block_symbol lookup_static_symbol(const char*, domain_enum)\u2019:\n../../gdb/symtab.c:1366:11: warning: \u2018slot\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n     xfree (slot->value.not_found.name);\n     ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../gdb/symtab.c:2578:29: note: \u2018slot\u2019 was declared here\n   struct symbol_cache_slot *slot;\n                             ^~~~\n../../gdb/symtab.c:1405:3: warning: \u2018bsc\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n   if (bsc == NULL)\n   ^~\n../../gdb/symtab.c:2577:30: note: \u2018bsc\u2019 was declared here\n   struct block_symbol_cache *bsc;\n                              ^~~\n../../gdb/symtab.c: In function \u2018block_symbol lookup_global_symbol(const char*, const block*, domain_enum)\u2019:\n../../gdb/symtab.c:1366:11: warning: \u2018slot\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n     xfree (slot->value.not_found.name);\n     ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../gdb/symtab.c:2658:29: note: \u2018slot\u2019 was declared here\n   struct symbol_cache_slot *slot;\n                             ^~~~\n../../gdb/symtab.c:1409:14: warning: \u2018bsc\u2019 may be used uninitialized in this function [-Wmaybe-uninitialized]\n       ++bsc->collisions;\n         ~~~~~^~~~~~~~~~\n../../gdb/symtab.c:2657:30: note: \u2018bsc\u2019 was declared here\n   struct block_symbol_cache *bsc;\n                              ^~~\n\ngdb/ChangeLog:\n\n2019-08-22  Christian Biesinger  <cbiesinger@google.com>\n\n\t* symtab.c (symbol_cache_lookup): Always initialize *bsc_ptr and *slot_ptr.",
    "tree": {
      "sha": "9296b35eb056410f6c379afb2ff9a721d39a6200",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9296b35eb056410f6c379afb2ff9a721d39a6200"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d5554a605a8ce908ba04b00fd960d02ca9fc613",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d5554a605a8ce908ba04b00fd960d02ca9fc613",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d5554a605a8ce908ba04b00fd960d02ca9fc613"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 10,
    "deletions": 6
  },
  "files": [
    {
      "sha": "073ed74b4fa10df24d50ce183941e1b1116e3d62",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d0509ba44323dc5550852f0dbdcb2ccc2818d5b3",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-22  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* symtab.c (symbol_cache_lookup): Always initialize *bsc_ptr and\n+\t*slot_ptr.\n+\n 2019-08-23  Sergio Durigan Junior  <sergiodj@redhat.com>\n \n \t* configure.ac: Don't check for 'dlfcn.h' (moved to"
    },
    {
      "sha": "d85c77b4cec821880b8f9834f6cd4fd4b379d77f",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0509ba44323dc5550852f0dbdcb2ccc2818d5b3/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=d0509ba44323dc5550852f0dbdcb2ccc2818d5b3",
      "patch": "@@ -1297,9 +1297,8 @@ set_symbol_cache_size_handler (const char *args, int from_tty,\n    The result is the symbol if found, SYMBOL_LOOKUP_FAILED if a previous lookup\n    failed (and thus this one will too), or NULL if the symbol is not present\n    in the cache.\n-   If the symbol is not present in the cache, then *BSC_PTR and *SLOT_PTR are\n-   set to the cache and slot of the symbol to save the result of a full lookup\n-   attempt.  */\n+   *BSC_PTR and *SLOT_PTR are set to the cache and slot of the symbol, which\n+   can be used to save the result of a full lookup attempt.  */\n \n static struct block_symbol\n symbol_cache_lookup (struct symbol_cache *cache,\n@@ -1326,6 +1325,9 @@ symbol_cache_lookup (struct symbol_cache *cache,\n   hash = hash_symbol_entry (objfile_context, name, domain);\n   slot = bsc->symbols + hash % bsc->size;\n \n+  *bsc_ptr = bsc;\n+  *slot_ptr = slot;\n+\n   if (eq_symbol_entry (slot, objfile_context, name, domain))\n     {\n       if (symbol_lookup_debug)\n@@ -1343,9 +1345,6 @@ symbol_cache_lookup (struct symbol_cache *cache,\n \n   /* Symbol is not present in the cache.  */\n \n-  *bsc_ptr = bsc;\n-  *slot_ptr = slot;\n-\n   if (symbol_lookup_debug)\n     {\n       fprintf_unfiltered (gdb_stdlog,"
    }
  ]
}