{
  "sha": "e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTU1YzY1MzBkYmY5NmJmYmUyZTRhMjMyYzBmZWIxOWMwYTRhMjI5NA==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-15T08:10:52Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-15T08:10:52Z"
    },
    "message": "Move uinteger_pow gdb/valarith.c to gdb/utils.c and make it public\n\nThis is a generic function which I would like to use in a followup\npatch adding support for fixed-point types. So this commit moves it\nout of valarith.c into util.c, and makes it non-static.\n\ngdb/ChangeLog:\n\n        * utils.h (uinteger_pow): Add declaration.\n        * utils.c (uinteger_pow): Moved here (without changes)...\n        * valarith.c (uinteger_pow): ... from here.",
    "tree": {
      "sha": "2924eba4d072b23919374e31ef15ac42b0e8024b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2924eba4d072b23919374e31ef15ac42b0e8024b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b34c74ab9a6b8dc0ace3d0cc67bf62de8a74ea00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b34c74ab9a6b8dc0ace3d0cc67bf62de8a74ea00",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b34c74ab9a6b8dc0ace3d0cc67bf62de8a74ea00"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 43,
    "deletions": 31
  },
  "files": [
    {
      "sha": "5aacbf057f24a23642291619b127408cc1f0258d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* utils.h (uinteger_pow): Add declaration.\n+\t* utils.c (uinteger_pow): Moved here (without changes)...\n+\t* valarith.c (uinteger_pow): ... from here.\n+\n 2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gmp-utils.h,  gmp-utils.h: New file."
    },
    {
      "sha": "3226656e2c32548f83e581195cb543fbae769e25",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
      "patch": "@@ -709,6 +709,36 @@ myread (int desc, char *addr, int len)\n   return orglen;\n }\n \n+/* See utils.h.  */\n+\n+ULONGEST\n+uinteger_pow (ULONGEST v1, LONGEST v2)\n+{\n+  if (v2 < 0)\n+    {\n+      if (v1 == 0)\n+\terror (_(\"Attempt to raise 0 to negative power.\"));\n+      else\n+\treturn 0;\n+    }\n+  else\n+    {\n+      /* The Russian Peasant's Algorithm.  */\n+      ULONGEST v;\n+\n+      v = 1;\n+      for (;;)\n+\t{\n+\t  if (v2 & 1L)\n+\t    v *= v1;\n+\t  v2 >>= 1;\n+\t  if (v2 == 0)\n+\t    return v;\n+\t  v1 *= v1;\n+\t}\n+    }\n+}\n+\n void\n print_spaces (int n, struct ui_file *file)\n {"
    },
    {
      "sha": "a8c65ed81706b5d1266ff4b9d32ec9f0c857f003",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
      "patch": "@@ -593,6 +593,13 @@ extern pid_t wait_to_die_with_timeout (pid_t pid, int *status, int timeout);\n \n extern int myread (int, char *, int);\n \n+/* Integer exponentiation: Return V1**V2, where both arguments\n+   are integers.\n+\n+   Requires V1 != 0 if V2 < 0.\n+   Returns 1 for 0 ** 0.  */\n+extern ULONGEST uinteger_pow (ULONGEST v1, LONGEST v2);\n+\n /* Resource limits used by getrlimit and setrlimit.  */\n \n enum resource_limit_kind"
    },
    {
      "sha": "f6caf3d18044d44e03acb69054c21edecc42b2b8",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=e55c6530dbf96bfbe2e4a232c0feb19c0a4a2294",
      "patch": "@@ -819,37 +819,6 @@ integer_pow (LONGEST v1, LONGEST v2)\n     }\n }\n \n-/* Integer exponentiation: V1**V2, where both arguments are\n-   integers.  Requires V1 != 0 if V2 < 0.  Returns 1 for 0 ** 0.  */\n-\n-static ULONGEST\n-uinteger_pow (ULONGEST v1, LONGEST v2)\n-{\n-  if (v2 < 0)\n-    {\n-      if (v1 == 0)\n-\terror (_(\"Attempt to raise 0 to negative power.\"));\n-      else\n-\treturn 0;\n-    }\n-  else \n-    {\n-      /* The Russian Peasant's Algorithm.  */\n-      ULONGEST v;\n-      \n-      v = 1;\n-      for (;;)\n-\t{\n-\t  if (v2 & 1L) \n-\t    v *= v1;\n-\t  v2 >>= 1;\n-\t  if (v2 == 0)\n-\t    return v;\n-\t  v1 *= v1;\n-\t}\n-    }\n-}\n-\n /* Obtain argument values for binary operation, converting from\n    other types if one of them is not floating point.  */\n static void"
    }
  ]
}