{
  "sha": "0c9150e4de689066b6d7faf326535f573bd29f07",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGM5MTUwZTRkZTY4OTA2NmI2ZDdmYWYzMjY1MzVmNTczYmQyOWYwNw==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-15T08:16:01Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-15T08:16:01Z"
    },
    "message": "Add ptype support for DWARF-based fixed-point types\n\nNote that the ptype information printed for types described\nvia pure DWARF debug info is slightly less informative as\nthe one printed when the information is encoded in the type's\nname, via the GNAT encoding. As a result, the output in\nthe case of DWARF-described fixed point types is slightly\ndifferent. In pratice, this is no real loss because the information\nnot available in DWARF has no bearing on how the type is actually\nstored in memory.\n\ngdb/ChangeLog:\n\n        * ada-typeprint.c (ada_print_type): Add handing of fixed-point\n        range types.\n        * c-typeprint.c (c_type_print_varspec_prefix)\n        (c_type_print_varspec_suffix, c_type_print_base_1): Add\n        TYPE_CODE_FIXED_POINT handling.\n        * p-typeprint.c (pascal_type_print_varspec_prefix)\n        (pascal_type_print_varspec_suffix): Likewise.\n        * typeprint.c (print_type_fixed_point): New function.\n        * typeprint.h (print_type_fixed_point): Add declaration.\n\ngdb/testsuite/ChangeLog:\n\n        * gdb.ada/fixed_points.exp: Add ptype tests.\n        * gdb.dwarf2/dw2-fixed-point.exp: Likewise.",
    "tree": {
      "sha": "62924148c20209d711a6e501d10f787a6db4ffb1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62924148c20209d711a6e501d10f787a6db4ffb1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c9150e4de689066b6d7faf326535f573bd29f07",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c9150e4de689066b6d7faf326535f573bd29f07",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c9150e4de689066b6d7faf326535f573bd29f07",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c9150e4de689066b6d7faf326535f573bd29f07/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b26daff97cd885640e23229a3d164cd9d93c49ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b26daff97cd885640e23229a3d164cd9d93c49ef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b26daff97cd885640e23229a3d164cd9d93c49ef"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 128,
    "deletions": 0
  },
  "files": [
    {
      "sha": "56e54d3efadb74afd60a0763072cdab9f9709930",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -1,3 +1,15 @@\n+2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* ada-typeprint.c (ada_print_type): Add handing of fixed-point\n+\trange types.\n+\t* c-typeprint.c (c_type_print_varspec_prefix)\n+\t(c_type_print_varspec_suffix, c_type_print_base_1): Add\n+\tTYPE_CODE_FIXED_POINT handling.\n+\t* p-typeprint.c (pascal_type_print_varspec_prefix)\n+\t(pascal_type_print_varspec_suffix): Likewise.\n+\t* typeprint.c (print_type_fixed_point): New function.\n+\t* typeprint.h (print_type_fixed_point): Add declaration.\n+\n 2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n \n \t* printcmd.c (print_scalar_formatted): Add fixed-point type"
    },
    {
      "sha": "8abb65bc9e23bb1a0ab8fede178884bf1134caac",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -1046,6 +1046,12 @@ ada_print_type (struct type *type0, const char *varstring,\n       case TYPE_CODE_RANGE:\n \tif (ada_is_gnat_encoded_fixed_point_type (type))\n \t  print_gnat_encoded_fixed_point_type (type, stream);\n+\telse if (is_fixed_point_type (type))\n+\t  {\n+\t    fprintf_filtered (stream, \"<\");\n+\t    print_type_fixed_point (type, stream);\n+\t    fprintf_filtered (stream, \">\");\n+\t  }\n \telse if (ada_is_modular_type (type))\n \t  fprintf_filtered (stream, \"mod %s\", \n \t\t\t    int_string (ada_modulus (type), 10, 0, 0, 1));"
    },
    {
      "sha": "10631fff9a8006baf885dcd03720074d5f95f8b9",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -465,6 +465,7 @@ c_type_print_varspec_prefix (struct type *type,\n     case TYPE_CODE_COMPLEX:\n     case TYPE_CODE_NAMESPACE:\n     case TYPE_CODE_DECFLOAT:\n+    case TYPE_CODE_FIXED_POINT:\n       /* These types need no prefix.  They are listed here so that\n \t gcc -Wall will reveal any types that haven't been handled.  */\n       break;\n@@ -844,6 +845,7 @@ c_type_print_varspec_suffix (struct type *type,\n     case TYPE_CODE_COMPLEX:\n     case TYPE_CODE_NAMESPACE:\n     case TYPE_CODE_DECFLOAT:\n+    case TYPE_CODE_FIXED_POINT:\n       /* These types do not need a suffix.  They are listed so that\n \t gcc -Wall will report types that may not have been\n \t considered.  */\n@@ -1683,6 +1685,10 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n       fprintf_styled (stream, metadata_style.style (), _(\"<range type>\"));\n       break;\n \n+    case TYPE_CODE_FIXED_POINT:\n+      print_type_fixed_point (type, stream);\n+      break;\n+\n     case TYPE_CODE_NAMESPACE:\n       fputs_filtered (\"namespace \", stream);\n       fputs_filtered (type->name (), stream);"
    },
    {
      "sha": "c2c182a9ae9087ff8fa44e67deb6afa60b250412",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -296,6 +296,7 @@ pascal_type_print_varspec_prefix (struct type *type, struct ui_file *stream,\n     case TYPE_CODE_STRING:\n     case TYPE_CODE_COMPLEX:\n     case TYPE_CODE_TYPEDEF:\n+    case TYPE_CODE_FIXED_POINT:\n       /* These types need no prefix.  They are listed here so that\n \t gcc -Wall will reveal any types that haven't been handled.  */\n       break;\n@@ -429,6 +430,7 @@ pascal_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n     case TYPE_CODE_STRING:\n     case TYPE_CODE_COMPLEX:\n     case TYPE_CODE_TYPEDEF:\n+    case TYPE_CODE_FIXED_POINT:\n       /* These types do not need a suffix.  They are listed so that\n \t gcc -Wall will report types that may not have been considered.  */\n       break;"
    },
    {
      "sha": "2c7b5c5a522da04243a04273764fe1de27f39ca9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gdb.ada/fixed_points.exp: Add ptype tests.\n+\t* gdb.dwarf2/dw2-fixed-point.exp: Likewise.\n+\n 2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gdb.dwarf2/dw2-fixed-point.exp: Add \"print /x\" tests."
    },
    {
      "sha": "1fe2eb203cbee46096a0c27926ece96a9cb58a7b",
      "filename": "gdb/testsuite/gdb.ada/fixed_points.exp",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/testsuite/gdb.ada/fixed_points.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/testsuite/gdb.ada/fixed_points.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/fixed_points.exp?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -55,8 +55,44 @@ gdb_test \"ptype Overprecise_Object\" \\\n gdb_test \"print fp1_var\" \\\n          \" = 0.25\"\n \n+gdb_test_multiple \"ptype fp1_var\" \"\" {\n+    -re \"type = <1-byte fixed point \\\\(small = 0\\\\.0625\\\\)>\\r\\n$gdb_prompt $\" {\n+        pass $gdb_test_name\n+    }\n+    -re \"type = delta 0\\\\.1 <'small = 0\\\\.0625>\\r\\n$gdb_prompt $\" {\n+        # The (legacy) output we obtain when the compiler described\n+        # our fixed point types using the GNAT encodings rather than\n+        # standard DWARF.  OK as well.\n+        pass $gdb_test_name\n+    }\n+}\n+\n gdb_test \"print fp2_var\" \\\n          \" = -0.01\"\n \n+gdb_test_multiple \"ptype fp2_var\" \"\" {\n+    -re \"type = <8-byte fixed point \\\\(small = 0\\\\.01\\\\)>\\r\\n$gdb_prompt $\" {\n+        pass $gdb_test_name\n+    }\n+    -re \"type = delta 0\\\\.01\\r\\n$gdb_prompt $\" {\n+        # The (legacy) output we obtain when the compiler described\n+        # our fixed point types using the GNAT encodings rather than\n+        # standard DWARF.  OK as well.\n+        pass $gdb_test_name\n+    }\n+}\n+\n gdb_test \"print fp3_var\" \\\n          \" = 0.1\"\n+\n+gdb_test_multiple \"ptype fp3_var\" \"\" {\n+    -re \"type = <1-byte fixed point \\\\(small = 0\\\\.0333333\\\\)>\\r\\n$gdb_prompt $\" {\n+        pass $gdb_test_name\n+    }\n+    -re \"type = delta 0\\\\.1 <'small = 0\\\\.0333333>\\r\\n$gdb_prompt $\" {\n+        # The (legacy) output we obtain when the compiler described\n+        # our fixed point types using the GNAT encodings rather than\n+        # standard DWARF.  OK as well.\n+        pass $gdb_test_name\n+    }\n+}"
    },
    {
      "sha": "33a7e7485cb09787b3f18131ca8196586d87e9c5",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -142,3 +142,47 @@ gdb_test \"print pck.fp1_range_var\" \\\n \n gdb_test \"print /x pck.fp1_range_var\" \\\n          \" = 0x1\"\n+\n+# Set the language to LANG and do a ptype test on pck__fp1_var,\n+# pck__fp2_var and pck__fp3_var, verifying that the output matches\n+# FP1_RE, FP2_RE, FP2_RE (resp.).\n+\n+proc do_ptype_test {lang fp1_re fp2_re fp3_re fp1_range_re} {\n+    with_test_prefix \"lang=$lang\" {\n+        gdb_test_no_output \"set language $lang\" \\\n+            \"set language to $lang for ptype test\"\n+\n+        gdb_test \"ptype pck__fp1_var\" $fp1_re\n+\n+        gdb_test \"ptype pck__fp2_var\" $fp2_re\n+\n+        gdb_test \"ptype pck__fp3_var\" $fp3_re\n+\n+        if { $lang == \"modula-2\" || $lang == \"pascal\" } {\n+            setup_xfail \"*-*-*\" \"not supported by language\"\n+        }\n+        gdb_test \"ptype pck__fp1_range_var\" $fp1_range_re\n+    }\n+}\n+\n+do_ptype_test \"ada\" \\\n+              \" = <1-byte fixed point \\\\(small = 1/16\\\\)>\" \\\n+              \" = <1-byte fixed point \\\\(small = 1/100\\\\)>\" \\\n+              \" = <1-byte fixed point \\\\(small = 1/30\\\\)>\" \\\n+              \" = <1-byte fixed point \\\\(small = 1/16\\\\)>\"\n+\n+foreach lang [list \"c\" \"d\" \"go\" \"objective-c\" \"opencl\" ] {\n+    do_ptype_test $lang \\\n+                  \" = 1-byte fixed point \\\\(small = 1/16\\\\)\" \\\n+                  \" = 1-byte fixed point \\\\(small = 1/100\\\\)\" \\\n+                  \" = 1-byte fixed point \\\\(small = 1/30\\\\)\" \\\n+                  \" = <range type>\"\n+}\n+\n+foreach lang [list \"fortran\" \"modula-2\" \"pascal\" ] {\n+    do_ptype_test $lang \\\n+                  \" = pck__fp1_type\" \\\n+                  \" = pck__fp2_type\" \\\n+                  \" = pck__fp3_type\" \\\n+                  \" = <range type>\"\n+}"
    },
    {
      "sha": "f947faf315f6566d74f1b0bb53b49f3ef7ba11e2",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -662,6 +662,18 @@ print_type_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n     }\n }\n \n+/* See typeprint.h.  */\n+\n+void\n+print_type_fixed_point (struct type *type, struct ui_file *stream)\n+{\n+  gdb::unique_xmalloc_ptr<char> small_img\n+    = fixed_point_scaling_factor (type).str ();\n+\n+  fprintf_filtered (stream, \"%s-byte fixed point (small = %s)\",\n+\t\t    pulongest (TYPE_LENGTH (type)), small_img.get ());\n+}\n+\n /* Dump details of a type specified either directly or indirectly.\n    Uses the same sort of type lookup mechanism as ptype_command()\n    and whatis_command().  */"
    },
    {
      "sha": "d595cbe208cf3671cc9af76929734c64c407fa78",
      "filename": "gdb/typeprint.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/typeprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c9150e4de689066b6d7faf326535f573bd29f07/gdb/typeprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.h?ref=0c9150e4de689066b6d7faf326535f573bd29f07",
      "patch": "@@ -151,6 +151,11 @@ class typedef_hash_table\n \n void print_type_scalar (struct type * type, LONGEST, struct ui_file *);\n \n+/* Assuming the TYPE is a fixed point type, print its type description\n+   on STREAM.  */\n+\n+void print_type_fixed_point (struct type *type, struct ui_file *stream);\n+\n void c_type_print_args (struct type *, struct ui_file *, int, enum language,\n \t\t\tconst struct type_print_options *);\n "
    }
  ]
}