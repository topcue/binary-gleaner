{
  "sha": "7b63ad86ab1a56812772f266b345ecaa494ece95",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2I2M2FkODZhYjFhNTY4MTI3NzJmMjY2YjM0NWVjYWE0OTRlY2U5NQ==",
  "commit": {
    "author": {
      "name": "Richard Bunt",
      "email": "richard.bunt@arm.com",
      "date": "2019-03-04T15:08:51Z"
    },
    "committer": {
      "name": "Richard Bunt",
      "email": "richard.bunt@arm.com",
      "date": "2019-03-04T15:08:51Z"
    },
    "message": "gdbserver short-circuit-argument-list failures\n\nThis patch fixes test case failures observed when running\nshort-circuit-argument-list.exp with gdb server boards. Thanks to Sergio\nDurigan Junior for pointing this out.\n\nAssertions failed with the native{,-extended}-gdbserver boards as the\nstandard output from the test program appears in a different location\nthan observed on non-gdbserver boards. This standard output was used to\ndetermine whether a function, which had been logically short-circuited,\nwas called or not. Since the location of the standard out cannot be\nrelied upon to verify this, a new mechanism was needed.\n\nThe test program now records function calls in variables named the same\nas the function with a \"_called\" suffix. These variables can then be\nqueried from the test case to verify the occurrence of a call.\n\nA method to reset the call counts has been included in the test case, so\nthat any future assertions added to this test can ensure a fresh set of\ninitial values before proceeding. Not resetting values between groups of\nassertions creates a dependency between them, which increases the\nlikelihood that a single failure causes subsequent assertions to fail.\n\nRegression tested on x86_64, aarch64 and ppc64le.\nRegression tested with Ada on x86_64.\nRegression tested with the native{,-extended}-gdbserver boards on x86_64.",
    "tree": {
      "sha": "c0cfffa9b783150a0c4d3a7f7bf4aa1ac623eac5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c0cfffa9b783150a0c4d3a7f7bf4aa1ac623eac5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7b63ad86ab1a56812772f266b345ecaa494ece95",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b63ad86ab1a56812772f266b345ecaa494ece95",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7b63ad86ab1a56812772f266b345ecaa494ece95",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b63ad86ab1a56812772f266b345ecaa494ece95/comments",
  "author": {
    "login": "RichardABunt",
    "id": 84915683,
    "node_id": "MDQ6VXNlcjg0OTE1Njgz",
    "avatar_url": "https://avatars.githubusercontent.com/u/84915683?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RichardABunt",
    "html_url": "https://github.com/RichardABunt",
    "followers_url": "https://api.github.com/users/RichardABunt/followers",
    "following_url": "https://api.github.com/users/RichardABunt/following{/other_user}",
    "gists_url": "https://api.github.com/users/RichardABunt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RichardABunt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RichardABunt/subscriptions",
    "organizations_url": "https://api.github.com/users/RichardABunt/orgs",
    "repos_url": "https://api.github.com/users/RichardABunt/repos",
    "events_url": "https://api.github.com/users/RichardABunt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RichardABunt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "RichardABunt",
    "id": 84915683,
    "node_id": "MDQ6VXNlcjg0OTE1Njgz",
    "avatar_url": "https://avatars.githubusercontent.com/u/84915683?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RichardABunt",
    "html_url": "https://github.com/RichardABunt",
    "followers_url": "https://api.github.com/users/RichardABunt/followers",
    "following_url": "https://api.github.com/users/RichardABunt/following{/other_user}",
    "gists_url": "https://api.github.com/users/RichardABunt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RichardABunt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RichardABunt/subscriptions",
    "organizations_url": "https://api.github.com/users/RichardABunt/orgs",
    "repos_url": "https://api.github.com/users/RichardABunt/repos",
    "events_url": "https://api.github.com/users/RichardABunt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RichardABunt/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5f20315116c43110c058ec9d787e20f901309f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5f20315116c43110c058ec9d787e20f901309f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f5f20315116c43110c058ec9d787e20f901309f2"
    }
  ],
  "stats": {
    "total": 115,
    "additions": 89,
    "deletions": 26
  },
  "files": [
    {
      "sha": "8805fd9186c0e3668efcc399873cdd087060e5fc",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b63ad86ab1a56812772f266b345ecaa494ece95/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b63ad86ab1a56812772f266b345ecaa494ece95/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7b63ad86ab1a56812772f266b345ecaa494ece95",
      "patch": "@@ -1,3 +1,10 @@\n+2019-03-04  Richard Bunt  <richard.bunt@arm.com>\n+\n+\t* gdb.fortran/short-circuit-argument-list.exp: Remove reliance\n+\ton user program standard output.\n+\t* gdb.fortran/short-circuit-argument-list.f90: Record function\n+\tcalls.\n+\n 2019-02-28  Alan Hayward  <alan.hayward@arm.com>\n \n         * lib/gdbserver-support.exp (gdbserver_start): Check for listen"
    },
    {
      "sha": "c2fb69044e8e55e22920777a1b9677f5d20eed23",
      "filename": "gdb/testsuite/gdb.fortran/short-circuit-argument-list.exp",
      "status": "modified",
      "additions": 54,
      "deletions": 21,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b63ad86ab1a56812772f266b345ecaa494ece95/gdb/testsuite/gdb.fortran/short-circuit-argument-list.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b63ad86ab1a56812772f266b345ecaa494ece95/gdb/testsuite/gdb.fortran/short-circuit-argument-list.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/short-circuit-argument-list.exp?ref=7b63ad86ab1a56812772f266b345ecaa494ece95",
      "patch": "@@ -30,6 +30,20 @@ if {![runto [gdb_get_line_number \"post_truth_table_init\"]]} then {\n     continue\n }\n \n+# Non-zero value to use as the function call count base. Using zero is avoided\n+# as this is a common value in memory.\n+set prime 17\n+\n+# Reset all call counts to the initial value ($prime).\n+proc reset_called_flags { } {\n+    global prime\n+    foreach counter {no_arg no_arg_false one_arg two_arg array} {\n+\tgdb_test_no_output \"set var calls%function_${counter}_called=$prime\"\n+    }\n+}\n+\n+reset_called_flags\n+\n # Vary conditional and input over the standard truth table.\n # Test that the debugger can evaluate expressions of the form\n # a(x,y) .OR./.AND. a(a,b) correctly.\n@@ -49,31 +63,42 @@ foreach_with_prefix arg {\"No\" \"One\" \"Two\"} {\n     set trimmed_args [string trimright $argument_list ,]\n     set arg_lower [string tolower $arg]\n     gdb_test \"p function_no_arg_false() .OR. function_${arg_lower}_arg($trimmed_args)\" \\\n-\t     \" $arg, return true.\\r\\n\\\\\\$$decimal = .TRUE.\"\n-    # Check the skipped function has not printed anything by asserting the\n-    # absence of the full stop from its message.\n+\t     \" = .TRUE.\"\n+    reset_called_flags\n     gdb_test \"p .TRUE. .OR. function_${arg_lower}_arg($trimmed_args)\" \\\n-\t     \"\\[^.\\]\\r\\n\\\\\\$$decimal = .TRUE.\"\n+\t     \" = .TRUE.\"\n+    # Check that none of the short-circuited functions have been called.\n+    gdb_test \"p calls\" \\\n+\t     \" = \\\\\\( function_no_arg_called = $prime, function_no_arg_false_called = $prime, function_one_arg_called = $prime, function_two_arg_called = $prime, function_array_called = $prime \\\\\\)\"\n     append argument_list \" .TRUE.,\"\n }\n \n-# Check nested calls\n-gdb_test \"p function_one_arg(.FALSE. .OR. function_no_arg())\" \\\n-\t \" No, return true.\\r\\n One, return true.\\r\\n\\\\\\$$decimal = .TRUE.\"\n+with_test_prefix \"nested call not skipped\" {\n+    reset_called_flags\n+    # Check nested calls\n+    gdb_test \"p function_one_arg(.FALSE. .OR. function_no_arg())\" \\\n+\t     \" = .TRUE.\"\n+    gdb_test \"p calls\" \\\n+\t     \" = \\\\\\( function_no_arg_called = [expr $prime + 1], function_no_arg_false_called = $prime, function_one_arg_called = [expr $prime + 1], function_two_arg_called = $prime, function_array_called = $prime \\\\\\)\"\n+}\n \n-gdb_test \"p function_one_arg(.TRUE. .OR. function_no_arg())\" \\\n-\t \"\\[^.\\]\\r\\n One, return true.\\r\\n\\\\\\$$decimal = .TRUE.\"\n+with_test_prefix \"nested call skipped\" {\n+    gdb_test \"p function_one_arg(.TRUE. .OR. function_no_arg())\" \\\n+\t     \" = .TRUE.\"\n+    gdb_test \"p calls\" \\\n+\t     \" = \\\\\\( function_no_arg_called = [expr $prime + 1], function_no_arg_false_called = $prime, function_one_arg_called = [expr $prime + 2], function_two_arg_called = $prime, function_array_called = $prime \\\\\\)\"\n+}\n \n # Vary number of components in the expression to skip.\n set expression \"p .TRUE.\"\n foreach_with_prefix expression_components {1 2 3 4} {\n     set expression \"$expression .OR. function_one_arg(.TRUE.)\"\n     gdb_test \"$expression\" \\\n-\t     \"\\\\\\$$decimal = .TRUE.\"\n+\t     \" = .TRUE.\"\n }\n \n # Check parsing skipped substring operations.\n-gdb_test \"p .TRUE. .OR. binary_string(1)\" \"\\\\\\$$decimal = .TRUE.\"\n+gdb_test \"p .TRUE. .OR. binary_string(1)\" \" = .TRUE.\"\n \n # Check parsing skipped substring operations with ranges. These should all\n # return true as the result is > 0.\n@@ -82,25 +107,33 @@ gdb_test \"p .TRUE. .OR. binary_string(1)\" \"\\\\\\$$decimal = .TRUE.\"\n foreach_with_prefix range1 {\"1:2\" \":\" \":2\" \"1:\"} {\n     foreach_with_prefix range2 {\"1:2\" \":\" \":2\" \"1:\"} {\n \tgdb_test \"p .TRUE. .OR. binary_string($range1) .OR. binary_string($range2)\" \\\n-\t\t \"\\\\\\$$decimal = .TRUE.\"\n+\t\t \" = .TRUE.\"\n     }\n }\n \n # Skip multi-dimensional arrays with ranges.\n foreach_with_prefix range1 {\"1:2\" \":\" \":2\" \"1:\"} {\n     foreach_with_prefix range2 {\"1:2\" \":\" \":2\" \"1:\"} {\n \tgdb_test \"p .TRUE. .OR. binary_string($range1) .OR. truth_table($range2, 1)\" \\\n-\t\t \"\\\\\\$$decimal = .TRUE.\"\n+\t\t \" = .TRUE.\"\n     }\n }\n \n # Check evaluation of substring operations in logical expressions.\n-gdb_test \"p .FALSE. .OR. binary_string(1)\" \"\\\\\\$$decimal = .FALSE.\"\n-\n-# Function call and substring skip.\n-gdb_test \"p .TRUE. .OR. function_one_arg(binary_string(1))\" \\\n-\t \"\\\\\\$$decimal = .TRUE.\"\n+gdb_test \"p .FALSE. .OR. binary_string(1)\" \" = .FALSE.\"\n+\n+with_test_prefix \"binary string skip\" {\n+    reset_called_flags\n+    # Function call and substring skip.\n+    gdb_test \"p .TRUE. .OR. function_one_arg(binary_string(1))\" \\\n+\t     \" = .TRUE.\"\n+    gdb_test \"p calls%function_one_arg_called\" \" = $prime\"\n+}\n \n-# Function call and array skip.\n-gdb_test \"p .TRUE. .OR. function_array(binary_string)\" \\\n-\t \"\\\\\\$$decimal = .TRUE.\"\n+with_test_prefix \"array skip\" {\n+    # Function call and array skip.\n+    reset_called_flags\n+    gdb_test \"p .TRUE. .OR. function_array(binary_string)\" \\\n+\t     \" = .TRUE.\"\n+    gdb_test \"p calls%function_array_called\" \" = $prime\"\n+}"
    },
    {
      "sha": "d2ce55f46898f2f45d8a4106b3317836386010a2",
      "filename": "gdb/testsuite/gdb.fortran/short-circuit-argument-list.f90",
      "status": "modified",
      "additions": 28,
      "deletions": 5,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b63ad86ab1a56812772f266b345ecaa494ece95/gdb/testsuite/gdb.fortran/short-circuit-argument-list.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b63ad86ab1a56812772f266b345ecaa494ece95/gdb/testsuite/gdb.fortran/short-circuit-argument-list.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/short-circuit-argument-list.f90?ref=7b63ad86ab1a56812772f266b345ecaa494ece95",
      "patch": "@@ -15,36 +15,59 @@\n \n ! Source code for short-circuit-argument-list.exp.\n \n+module called_state\n+    implicit none\n+    type called_counts\n+\tinteger :: function_no_arg_called = 0\n+\tinteger :: function_no_arg_false_called = 0\n+\tinteger :: function_one_arg_called = 0\n+\tinteger :: function_two_arg_called = 0\n+\tinteger :: function_array_called = 0\n+    end type\n+    type(called_counts) :: calls\n+end module called_state\n+\n logical function function_no_arg()\n-    print *, \"No, return true.\"\n+    use called_state\n+    implicit none\n+    calls%function_no_arg_called = calls%function_no_arg_called + 1\n     function_no_arg = .TRUE.\n end function function_no_arg\n \n logical function function_no_arg_false()\n+    use called_state\n+    implicit none\n+    calls%function_no_arg_false_called = calls%function_no_arg_false_called + 1\n     function_no_arg_false = .FALSE.\n end function function_no_arg_false\n \n logical function function_one_arg(x)\n+    use called_state\n+    implicit none\n     logical, intent(in) :: x\n-    print *, \"One, return true.\"\n+    calls%function_one_arg_called = calls%function_one_arg_called + 1\n     function_one_arg = .TRUE.\n end function function_one_arg\n \n logical function function_two_arg(x, y)\n+    use called_state\n+    implicit none\n     logical, intent(in) :: x, y\n-    print *, \"Two, return true.\"\n+    calls%function_two_arg_called = calls%function_two_arg_called + 1\n     function_two_arg = .TRUE.\n end function function_two_arg\n \n logical function function_array(logical_array)\n+    use called_state\n+    implicit none\n     logical, dimension(4,2), target, intent(in) :: logical_array\n     logical, dimension(:,:), pointer :: p\n-    p => logical_array\n-    print *, \"Array, return true.\", p(1,1), logical_array(1,1)\n+    calls%function_array_called = calls%function_array_called + 1\n     function_array = .TRUE.\n end function function_array\n \n program generate_truth_table\n+    use called_state\n     implicit none\n     interface\n \tlogical function function_no_arg()"
    }
  ]
}