{
  "sha": "7cb6d92a3f723f26830ca23b39ec94c2920936c4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2NiNmQ5MmEzZjcyM2YyNjgzMGNhMjNiMzllYzk0YzI5MjA5MzZjNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-21T14:26:44Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-21T14:26:44Z"
    },
    "message": "gdb: convert arm to new-style debug macros\n\ngdb/ChangeLog:\n\n\t* arm-tdep.c (arm_debug_printf): Add and use throughout file.\n\nChange-Id: Iec5c2955cb79d8c0288ffded2c8a58b7eb7e3554",
    "tree": {
      "sha": "1762b6ad33ef7eeecb7846726d307cd0ebb30783",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1762b6ad33ef7eeecb7846726d307cd0ebb30783"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7cb6d92a3f723f26830ca23b39ec94c2920936c4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cb6d92a3f723f26830ca23b39ec94c2920936c4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7cb6d92a3f723f26830ca23b39ec94c2920936c4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cb6d92a3f723f26830ca23b39ec94c2920936c4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "be07043ea8ea9b22a8db1ff46b557321a7714e9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/be07043ea8ea9b22a8db1ff46b557321a7714e9a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/be07043ea8ea9b22a8db1ff46b557321a7714e9a"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 23,
    "deletions": 19
  },
  "files": [
    {
      "sha": "b51bb152105e1d9b61784fb90c619912a53e0a35",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cb6d92a3f723f26830ca23b39ec94c2920936c4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cb6d92a3f723f26830ca23b39ec94c2920936c4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7cb6d92a3f723f26830ca23b39ec94c2920936c4",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-21  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* arm-tdep.c (arm_debug_printf): Add and use throughout file.\n+\n 2021-01-20  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb_bfd.c (debug_bfd_cache): Change type to bool."
    },
    {
      "sha": "4e2ab32b5ee05ca5ad0fb39a398b1903e18f1228",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cb6d92a3f723f26830ca23b39ec94c2920936c4/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cb6d92a3f723f26830ca23b39ec94c2920936c4/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=7cb6d92a3f723f26830ca23b39ec94c2920936c4",
      "patch": "@@ -68,6 +68,11 @@\n \n static bool arm_debug;\n \n+/* Print an \"arm\" debug statement.  */\n+\n+#define arm_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (arm_debug, \"arm\", fmt, ##__VA_ARGS__)\n+\n /* Macros for setting and testing a bit in a minimal symbol that marks\n    it as Thumb function.  The MSB of the minimal symbol's \"info\" field\n    is used for this purpose.\n@@ -1122,9 +1127,8 @@ thumb_analyze_prologue (struct gdbarch *gdbarch,\n       start += 2;\n     }\n \n-  if (arm_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"Prologue scan stopped at %s\\n\",\n-\t\t\tpaddress (gdbarch, start));\n+  arm_debug_printf (\"Prologue scan stopped at %s\",\n+\t\t    paddress (gdbarch, start));\n \n   if (unrecognized_pc == 0)\n     unrecognized_pc = start;\n@@ -1782,9 +1786,8 @@ arm_analyze_prologue (struct gdbarch *gdbarch,\n \t  cache->saved_regs[regno].set_addr (offset);\n     }\n \n-  if (arm_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"Prologue scan stopped at %s\\n\",\n-\t\t\tpaddress (gdbarch, unrecognized_pc));\n+  arm_debug_printf (\"Prologue scan stopped at %s\",\n+\t\t    paddress (gdbarch, unrecognized_pc));\n \n   return unrecognized_pc;\n }\n@@ -3789,10 +3792,10 @@ arm_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n      passing register.  */\n   if (return_method == return_method_struct)\n     {\n-      if (arm_debug)\n-\tfprintf_unfiltered (gdb_stdlog, \"struct return in %s = %s\\n\",\n-\t\t\t    gdbarch_register_name (gdbarch, argreg),\n-\t\t\t    paddress (gdbarch, struct_addr));\n+      arm_debug_printf (\"struct return in %s = %s\",\n+\t\t\tgdbarch_register_name (gdbarch, argreg),\n+\t\t\tpaddress (gdbarch, struct_addr));\n+\n       regcache_cooked_write_unsigned (regcache, argreg, struct_addr);\n       argreg++;\n     }\n@@ -3938,12 +3941,11 @@ arm_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t\t register.  */\n \t      if (byte_order == BFD_ENDIAN_BIG)\n \t\tregval <<= (ARM_INT_REGISTER_SIZE - partial_len) * 8;\n-\t      if (arm_debug)\n-\t\tfprintf_unfiltered (gdb_stdlog, \"arg %d in %s = 0x%s\\n\",\n-\t\t\t\t    argnum,\n-\t\t\t\t    gdbarch_register_name\n-\t\t\t\t      (gdbarch, argreg),\n-\t\t\t\t    phex (regval, ARM_INT_REGISTER_SIZE));\n+\n+\t      arm_debug_printf (\"arg %d in %s = 0x%s\", argnum,\n+\t\t\t\tgdbarch_register_name (gdbarch, argreg),\n+\t\t\t\tphex (regval, ARM_INT_REGISTER_SIZE));\n+\n \t      regcache_cooked_write_unsigned (regcache, argreg, regval);\n \t      argreg++;\n \t    }\n@@ -3955,9 +3957,7 @@ arm_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t      store_unsigned_integer (buf, partial_len, byte_order, regval);\n \n \t      /* Push the arguments onto the stack.  */\n-\t      if (arm_debug)\n-\t\tfprintf_unfiltered (gdb_stdlog, \"arg %d @ sp + %d\\n\",\n-\t\t\t\t    argnum, nstack);\n+\t      arm_debug_printf (\"arg %d @ sp + %d\", argnum, nstack);\n \t      si = push_stack_item (si, buf, ARM_INT_REGISTER_SIZE);\n \t      nstack += ARM_INT_REGISTER_SIZE;\n \t    }"
    }
  ]
}