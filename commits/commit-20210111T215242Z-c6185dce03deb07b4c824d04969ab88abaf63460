{
  "sha": "c6185dce03deb07b4c824d04969ab88abaf63460",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzYxODVkY2UwM2RlYjA3YjRjODI0ZDA0OTY5YWI4OGFiYWY2MzQ2MA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-11T21:52:42Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-11T21:52:42Z"
    },
    "message": "gdb: convert aarch64 to new-style debug macros\n\nI haven't tried this on an actual aarch64 machine, but I am able to\nexercise it like this:\n\n    (gdb) set debug aarch64\n    (gdb) maintenance selftest aa\n    Running selftest aarch64-analyze-prologue.\n    [aarch64] aarch64_analyze_prologue: prologue analysis gave up addr=0x14 opcode=0xf94013e0\n    Running selftest aarch64-process-record.\n    Ran 2 unit tests, 0 failed\n\ngdb/ChangeLog:\n\n\t* arch/aarch64-insn.h (aarch64_debug_printf): New.\n\t* arch/aarch64-insn.c: Use aarch64_debug_printf.\n\t* aarch64-tdep.c: Use aarch64_debug_printf.\n\nChange-Id: Ifdb40e2816ab8e55a9aabb066d1833d9b5a46094",
    "tree": {
      "sha": "fac41622ea5a0b0f452954afbd3469483f44cc33",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fac41622ea5a0b0f452954afbd3469483f44cc33"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c6185dce03deb07b4c824d04969ab88abaf63460",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6185dce03deb07b4c824d04969ab88abaf63460",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c6185dce03deb07b4c824d04969ab88abaf63460",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6185dce03deb07b4c824d04969ab88abaf63460/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eef401dce1f890921168598fec71495dbf122f59",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eef401dce1f890921168598fec71495dbf122f59",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eef401dce1f890921168598fec71495dbf122f59"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 48,
    "deletions": 61
  },
  "files": [
    {
      "sha": "c33b1d4563bf93615c0ea5cb274daf56f36246e1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c6185dce03deb07b4c824d04969ab88abaf63460",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-11  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* arch/aarch64-insn.h (aarch64_debug_printf): New.\n+\t* arch/aarch64-insn.c: Use aarch64_debug_printf.\n+\t* aarch64-tdep.c: Use aarch64_debug_printf.\n+\n 2021-01-11  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* solib-aix.c (solib_aix_debug_printf): New, use throughout"
    },
    {
      "sha": "5d1d979cd37de8e867a8459b15e6cbf41e36c222",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 34,
      "deletions": 55,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=c6185dce03deb07b4c824d04969ab88abaf63460",
      "patch": "@@ -388,12 +388,10 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t    regs[rd] = regs[rm];\n \t  else\n \t    {\n-\t      if (aarch64_debug)\n-\t\t{\n-\t\t  debug_printf (\"aarch64: prologue analysis gave up \"\n-\t\t\t\t\"addr=%s opcode=0x%x (orr x register)\\n\",\n-\t\t\t\tcore_addr_to_string_nz (start), insn);\n-\t\t}\n+\t      aarch64_debug_printf (\"prologue analysis gave up \"\n+\t\t\t\t    \"addr=%s opcode=0x%x (orr x register)\",\n+\t\t\t\t    core_addr_to_string_nz (start), insn);\n+\n \t      break;\n \t    }\n \t}\n@@ -513,10 +511,9 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t    }\n \t  else\n \t    {\n-\t      if (aarch64_debug)\n-\t\tdebug_printf (\"aarch64: prologue analysis gave up addr=%s\"\n-\t\t\t      \" opcode=0x%x (iclass)\\n\",\n-\t\t\t      core_addr_to_string_nz (start), insn);\n+\t      aarch64_debug_printf (\"prologue analysis gave up addr=%s\"\n+\t\t\t\t    \" opcode=0x%x (iclass)\",\n+\t\t\t\t    core_addr_to_string_nz (start), insn);\n \t      break;\n \t    }\n \n@@ -527,12 +524,10 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t}\n       else\n \t{\n-\t  if (aarch64_debug)\n-\t    {\n-\t      debug_printf (\"aarch64: prologue analysis gave up addr=%s\"\n-\t\t\t    \" opcode=0x%x\\n\",\n-\t\t\t    core_addr_to_string_nz (start), insn);\n-\t    }\n+\t  aarch64_debug_printf (\"prologue analysis gave up addr=%s\"\n+\t\t\t\t\" opcode=0x%x\",\n+\t\t\t\tcore_addr_to_string_nz (start), insn);\n+\n \t  break;\n \t}\n     }\n@@ -1606,12 +1601,10 @@ pass_in_x (struct gdbarch *gdbarch, struct regcache *regcache,\n \t  && (typecode == TYPE_CODE_STRUCT || typecode == TYPE_CODE_UNION))\n \tregval <<= ((X_REGISTER_SIZE - partial_len) * TARGET_CHAR_BIT);\n \n-      if (aarch64_debug)\n-\t{\n-\t  debug_printf (\"arg %d in %s = 0x%s\\n\", info->argnum,\n-\t\t\tgdbarch_register_name (gdbarch, regnum),\n-\t\t\tphex (regval, X_REGISTER_SIZE));\n-\t}\n+      aarch64_debug_printf (\"arg %d in %s = 0x%s\", info->argnum,\n+\t\t\t    gdbarch_register_name (gdbarch, regnum),\n+\t\t\t    phex (regval, X_REGISTER_SIZE));\n+\n       regcache_cooked_write_unsigned (regcache, regnum, regval);\n       len -= partial_len;\n       buf += partial_len;\n@@ -1646,11 +1639,9 @@ pass_in_v (struct gdbarch *gdbarch,\n       memcpy (reg, buf, len);\n       regcache->cooked_write (regnum, reg);\n \n-      if (aarch64_debug)\n-\t{\n-\t  debug_printf (\"arg %d in %s\\n\", info->argnum,\n-\t\t\tgdbarch_register_name (gdbarch, regnum));\n-\t}\n+      aarch64_debug_printf (\"arg %d in %s\", info->argnum,\n+\t\t\t    gdbarch_register_name (gdbarch, regnum));\n+\n       return 1;\n     }\n   info->nsrn = 8;\n@@ -1680,11 +1671,8 @@ pass_on_stack (struct aarch64_call_info *info, struct type *type,\n   if (align > 16)\n     align = 16;\n \n-  if (aarch64_debug)\n-    {\n-      debug_printf (\"arg %d len=%d @ sp + %d\\n\", info->argnum, len,\n-\t\t    info->nsaa);\n-    }\n+  aarch64_debug_printf (\"arg %d len=%d @ sp + %d\\n\", info->argnum, len,\n+\t\t\tinfo->nsaa);\n \n   item.len = len;\n   item.data = buf;\n@@ -1833,13 +1821,11 @@ aarch64_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   /* The struct_return pointer occupies X8.  */\n   if (return_method != return_method_normal)\n     {\n-      if (aarch64_debug)\n-\t{\n-\t  debug_printf (\"struct return in %s = 0x%s\\n\",\n-\t\t\tgdbarch_register_name (gdbarch,\n-\t\t\t\t\t       AARCH64_STRUCT_RETURN_REGNUM),\n-\t\t\tpaddress (gdbarch, struct_addr));\n-\t}\n+      aarch64_debug_printf (\"struct return in %s = 0x%s\",\n+\t\t\t    gdbarch_register_name\n+\t\t\t      (gdbarch, AARCH64_STRUCT_RETURN_REGNUM),\n+\t\t\t    paddress (gdbarch, struct_addr));\n+\n       regcache_cooked_write_unsigned (regcache, AARCH64_STRUCT_RETURN_REGNUM,\n \t\t\t\t      struct_addr);\n     }\n@@ -2246,12 +2232,10 @@ aarch64_extract_return_value (struct type *type, struct regcache *regs,\n \t  gdb_byte buf[register_size (gdbarch, regno)];\n \t  gdb_assert (len <= sizeof (buf));\n \n-\t  if (aarch64_debug)\n-\t    {\n-\t      debug_printf (\"read HFA or HVA return value element %d from %s\\n\",\n-\t\t\t    i + 1,\n-\t\t\t    gdbarch_register_name (gdbarch, regno));\n-\t    }\n+\t  aarch64_debug_printf\n+\t    (\"read HFA or HVA return value element %d from %s\",\n+\t     i + 1, gdbarch_register_name (gdbarch, regno));\n+\n \t  regs->cooked_read (regno, buf);\n \n \t  memcpy (valbuf, buf, len);\n@@ -2358,12 +2342,9 @@ aarch64_store_return_value (struct type *type, struct regcache *regs,\n \t  gdb_byte tmpbuf[register_size (gdbarch, regno)];\n \t  gdb_assert (len <= sizeof (tmpbuf));\n \n-\t  if (aarch64_debug)\n-\t    {\n-\t      debug_printf (\"write HFA or HVA return value element %d to %s\\n\",\n-\t\t\t    i + 1,\n-\t\t\t    gdbarch_register_name (gdbarch, regno));\n-\t    }\n+\t  aarch64_debug_printf\n+\t    (\"write HFA or HVA return value element %d to %s\",\n+\t     i + 1, gdbarch_register_name (gdbarch, regno));\n \n \t  memcpy (tmpbuf, valbuf,\n \t\t  len > V_REGISTER_SIZE ? V_REGISTER_SIZE : len);\n@@ -2438,8 +2419,7 @@ aarch64_return_value (struct gdbarch *gdbarch, struct value *func_value,\n     {\n       if (aarch64_return_in_memory (gdbarch, valtype))\n \t{\n-\t  if (aarch64_debug)\n-\t    debug_printf (\"return value in memory\\n\");\n+\t  aarch64_debug_printf (\"return value in memory\");\n \t  return RETURN_VALUE_STRUCT_CONVENTION;\n \t}\n     }\n@@ -2450,8 +2430,7 @@ aarch64_return_value (struct gdbarch *gdbarch, struct value *func_value,\n   if (readbuf)\n     aarch64_extract_return_value (valtype, regcache, readbuf);\n \n-  if (aarch64_debug)\n-    debug_printf (\"return value in registers\\n\");\n+  aarch64_debug_printf (\"return value in registers\");\n \n   return RETURN_VALUE_REGISTER_CONVENTION;\n }"
    },
    {
      "sha": "6a5abf729bb29a6e90a8038ea489b147f98cf819",
      "filename": "gdb/arch/aarch64-insn.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/arch/aarch64-insn.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/arch/aarch64-insn.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.c?ref=c6185dce03deb07b4c824d04969ab88abaf63460",
      "patch": "@@ -69,12 +69,9 @@ aarch64_decode_adr (CORE_ADDR addr, uint32_t insn, int *is_adrp,\n       else\n \t*offset = (immhi | immlo);\n \n-      if (aarch64_debug)\n-\t{\n-\t  debug_printf (\"decode: 0x%s 0x%x %s x%u, #?\\n\",\n-\t\t\tcore_addr_to_string_nz (addr), insn,\n-\t\t\t*is_adrp ?  \"adrp\" : \"adr\", *rd);\n-\t}\n+      aarch64_debug_printf (\"decode: 0x%s 0x%x %s x%u, #?\",\n+\t\t\t    core_addr_to_string_nz (addr), insn,\n+\t\t\t    *is_adrp ?  \"adrp\" : \"adr\", *rd);\n       return 1;\n     }\n   return 0;"
    },
    {
      "sha": "1e8c5eac940ee017f4b6d2685bbcbaeed0617e3a",
      "filename": "gdb/arch/aarch64-insn.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/arch/aarch64-insn.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6185dce03deb07b4c824d04969ab88abaf63460/gdb/arch/aarch64-insn.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.h?ref=c6185dce03deb07b4c824d04969ab88abaf63460",
      "patch": "@@ -21,6 +21,11 @@\n \n extern bool aarch64_debug;\n \n+/* Print an \"aarch64\" debug statement.  */\n+\n+#define aarch64_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (aarch64_debug, \"aarch64\", fmt, ##__VA_ARGS__)\n+\n /* Support routines for instruction parsing.  */\n \n /* Create a mask of X bits.  */"
    }
  ]
}