{
  "sha": "bd756351a6d3dcff9915c88c26dc0a5811907f90",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQ3NTYzNTFhNmQzZGNmZjk5MTVjODhjMjZkYzBhNTgxMTkwN2Y5MA==",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-02-07T16:58:29Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-02-07T16:59:02Z"
    },
    "message": "AArch64: Add negative tests for Armv8.3-a complex number instructions instructions.\n\nThis patch just adds a few negative tests for the Armv8.3-a complex instructions.\nThese already do the right disassembly without needing a verifier, but adding\nsome tests to make sure that stays that way.\n\ngas/ChangeLog:\n\n\t* testsuite/gas/aarch64/undefined_advsimd_armv8_3.d: New test.\n\t* testsuite/gas/aarch64/undefined_advsimd_armv8_3.s: New test.",
    "tree": {
      "sha": "e4dd937a56cc659bf73d27524150d2363e9c8d52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e4dd937a56cc659bf73d27524150d2363e9c8d52"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd756351a6d3dcff9915c88c26dc0a5811907f90",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd756351a6d3dcff9915c88c26dc0a5811907f90",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd756351a6d3dcff9915c88c26dc0a5811907f90",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd756351a6d3dcff9915c88c26dc0a5811907f90/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6456d318aaa7ea35511dad1f2facf0fb984972e5"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 131,
    "deletions": 0
  },
  "files": [
    {
      "sha": "cbef618bbcaa853c1474b26c8355fe634ad78e05",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd756351a6d3dcff9915c88c26dc0a5811907f90/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd756351a6d3dcff9915c88c26dc0a5811907f90/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=bd756351a6d3dcff9915c88c26dc0a5811907f90",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* testsuite/gas/aarch64/undefined_advsimd_armv8_3.d: New test.\n+\t* testsuite/gas/aarch64/undefined_advsimd_armv8_3.s: New test.\n+\n 2019-02-07  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR binutils/23212"
    },
    {
      "sha": "cb84f3823be626c8ccc1b5d6006613dd1a9440ba",
      "filename": "gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.d",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd756351a6d3dcff9915c88c26dc0a5811907f90/gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd756351a6d3dcff9915c88c26dc0a5811907f90/gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.d?ref=bd756351a6d3dcff9915c88c26dc0a5811907f90",
      "patch": "@@ -0,0 +1,56 @@\n+#as: -march=armv8.3-a\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+[^:]+:\\s+6ec3c441 \tfcmla\tv1.2d, v2.2d, v3.2d, #0\n+[^:]+:\\s+6e03c441 \t.inst\t0x6e03c441 ; undefined\n+[^:]+:\\s+2ec3c441 \t.inst\t0x2ec3c441 ; undefined\n+[^:]+:\\s+2e83c441 \tfcmla\tv1.2s, v2.2s, v3.2s, #0\n+[^:]+:\\s+2e03c441 \t.inst\t0x2e03c441 ; undefined\n+[^:]+:\\s+2ec3c441 \t.inst\t0x2ec3c441 ; undefined\n+[^:]+:\\s+6e83c441 \tfcmla\tv1.4s, v2.4s, v3.4s, #0\n+[^:]+:\\s+6e03c441 \t.inst\t0x6e03c441 ; undefined\n+[^:]+:\\s+2ec3c441 \t.inst\t0x2ec3c441 ; undefined\n+[^:]+:\\s+2e43c441 \tfcmla\tv1.4h, v2.4h, v3.4h, #0\n+[^:]+:\\s+2e03c441 \t.inst\t0x2e03c441 ; undefined\n+[^:]+:\\s+2ec3c441 \t.inst\t0x2ec3c441 ; undefined\n+[^:]+:\\s+6e43c441 \tfcmla\tv1.8h, v2.8h, v3.8h, #0\n+[^:]+:\\s+6e03c441 \t.inst\t0x6e03c441 ; undefined\n+[^:]+:\\s+2ec3c441 \t.inst\t0x2ec3c441 ; undefined\n+[^:]+:\\s+6f831041 \tfcmla\tv1.4s, v2.4s, v3.s\\[0\\], #0\n+[^:]+:\\s+6f031041 \t.inst\t0x6f031041 ; undefined\n+[^:]+:\\s+6fc31041 \t.inst\t0x6fc31041 ; undefined\n+[^:]+:\\s+2f431841 \t.inst\t0x2f431841 ; undefined\n+[^:]+:\\s+6fa31041 \t.inst\t0x6fa31041 ; undefined\n+[^:]+:\\s+2f831041 \t.inst\t0x2f831041 ; undefined\n+[^:]+:\\s+2f431041 \tfcmla\tv1.4h, v2.4h, v3.h\\[0\\], #0\n+[^:]+:\\s+2f031041 \t.inst\t0x2f031041 ; undefined\n+[^:]+:\\s+2fc31041 \t.inst\t0x2fc31041 ; undefined\n+[^:]+:\\s+2f431841 \t.inst\t0x2f431841 ; undefined\n+[^:]+:\\s+2fa31041 \t.inst\t0x2fa31041 ; undefined\n+[^:]+:\\s+2f831041 \t.inst\t0x2f831041 ; undefined\n+[^:]+:\\s+6f431041 \tfcmla\tv1.8h, v2.8h, v3.h\\[0\\], #0\n+[^:]+:\\s+6f031041 \t.inst\t0x6f031041 ; undefined\n+[^:]+:\\s+6fc31041 \t.inst\t0x6fc31041 ; undefined\n+[^:]+:\\s+2f431841 \t.inst\t0x2f431841 ; undefined\n+[^:]+:\\s+6fa31041 \t.inst\t0x6fa31041 ; undefined\n+[^:]+:\\s+2f831041 \t.inst\t0x2f831041 ; undefined\n+[^:]+:\\s+6ec3e441 \tfcadd\tv1.2d, v2.2d, v3.2d, #90\n+[^:]+:\\s+6e03e441 \t.inst\t0x6e03e441 ; undefined\n+[^:]+:\\s+2ec3e441 \t.inst\t0x2ec3e441 ; undefined\n+[^:]+:\\s+2e83e441 \tfcadd\tv1.2s, v2.2s, v3.2s, #90\n+[^:]+:\\s+2e03e441 \t.inst\t0x2e03e441 ; undefined\n+[^:]+:\\s+2ec3e441 \t.inst\t0x2ec3e441 ; undefined\n+[^:]+:\\s+6e83e441 \tfcadd\tv1.4s, v2.4s, v3.4s, #90\n+[^:]+:\\s+6e03e441 \t.inst\t0x6e03e441 ; undefined\n+[^:]+:\\s+2ec3e441 \t.inst\t0x2ec3e441 ; undefined\n+[^:]+:\\s+2e43e441 \tfcadd\tv1.4h, v2.4h, v3.4h, #90\n+[^:]+:\\s+2e03e441 \t.inst\t0x2e03e441 ; undefined\n+[^:]+:\\s+2ec3e441 \t.inst\t0x2ec3e441 ; undefined\n+[^:]+:\\s+6e43e441 \tfcadd\tv1.8h, v2.8h, v3.8h, #90\n+[^:]+:\\s+6e03e441 \t.inst\t0x6e03e441 ; undefined\n+[^:]+:\\s+2ec3e441 \t.inst\t0x2ec3e441 ; undefined"
    },
    {
      "sha": "c702a8084c8d7c8e2502c635d9d85258a18a9719",
      "filename": "gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.s",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd756351a6d3dcff9915c88c26dc0a5811907f90/gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd756351a6d3dcff9915c88c26dc0a5811907f90/gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/undefined_advsimd_armv8_3.s?ref=bd756351a6d3dcff9915c88c26dc0a5811907f90",
      "patch": "@@ -0,0 +1,70 @@\n+# Generates tests to see if the following conditions make the instruction\n+# undefined:\n+#\n+# 1) size == 0\n+# 2) size == 3 && Q == 0\n+#\n+# These patterns can't be created by the assembler so instead manually encode\n+# them from a starting pattern.\n+.macro gen_insns_same opc\n+\t.inst \\opc\n+\t.inst (\\opc & 0xff3fffff) // size == 0\n+\t.inst ((\\opc | 0xc00000) & 0xbfffffff) // size == 3 && Q == 0\n+.endm\n+\n+# Generates tests to see if the following conditions make the instruction\n+# undefined:\n+#\n+# 1) size == 0 || size == 3\n+# 2) size == 1 && H == 1 && Q == 0\n+# 3) size == 2 && (L == 1 || Q == 0)\n+#\n+# These patterns can't be created by the assembler so instead manually encode\n+# them from a starting pattern.\n+.macro gen_insns_elem opc\n+\t.inst \\opc\n+\t.inst (\\opc & 0xff3fffff) // size == 0\n+\t.inst (\\opc | 0xc00000) // size == 3\n+\t.inst ((\\opc | 0x400800) & 0xbf7fffff) // size == 1 && H == 1 && Q == 0\n+\t.inst ((\\opc | 0xa00000) & 0xffbfffff) // size == 2 && L == 1\n+\t.inst ((\\opc | 0x800000) & 0xbfbfffff) // size == 2 && Q == 0\n+.endm\n+\n+# fcmla v1.2d, v2.2d, v3.2d, #0\n+gen_insns_same 0x6ec3c441\n+\n+# fcmla v1.2s, v2.2s, v3.2s, #0\n+gen_insns_same 0x2e83c441\n+\n+# fcmla v1.4s, v2.4s, v3.4s, #0\n+gen_insns_same 0x6e83c441\n+\n+# fcmla v1.4h, v2.4h, v3.4h, #0\n+gen_insns_same 0x2e43c441\n+\n+# fcmla v1.8h, v2.8h, v3.8h, #0\n+gen_insns_same 0x6e43c441\n+\n+# fcmla v1.4s, v2.4s, v3.s[0], #0\n+gen_insns_elem 0x6f831041\n+\n+# fcmla v1.4h, v2.4h, v3.h[0], #0\n+gen_insns_elem 0x2f431041\n+\n+# fcmla v1.8h, v2.8h, v3.h[0], #0\n+gen_insns_elem 0x6f431041\n+\n+# fcadd v1.2d, v2.2d, v3.2d, #90\n+gen_insns_same 0x6ec3e441\n+\n+# fcadd v1.2s, v2.2s, v3.2s, #90\n+gen_insns_same 0x2e83e441\n+\n+# fcadd v1.4s, v2.4s, v3.4s, #90\n+gen_insns_same 0x6e83e441\n+\n+# fcadd v1.4h, v2.4h, v3.4h, #90\n+gen_insns_same 0x2e43e441\n+\n+# fcadd v1.8h, v2.8h, v3.8h, #90\n+gen_insns_same 0x6e43e441"
    }
  ]
}