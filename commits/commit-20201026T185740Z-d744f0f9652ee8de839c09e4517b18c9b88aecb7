{
  "sha": "d744f0f9652ee8de839c09e4517b18c9b88aecb7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDc0NGYwZjk2NTJlZThkZTgzOWMwOWU0NTE3YjE4YzliODhhZWNiNw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-08T16:34:41Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-10-26T18:57:40Z"
    },
    "message": "gdb::handle_eintr, remove need to specify return type\n\nThis eliminates the need to specify the return type when using\nhandle_eintr.  We let the compiler deduce it for us.\n\nAlso, use lowercase for function parameter names.  Uppercase should\nonly be used on template parameters.\n\ngdb/ChangeLog:\n\n\t* nat/linux-waitpid.c: Include \"gdbsupport/eintr.h\".\n\t(my_waitpid): Use gdb::handle_eintr.\n\ngdbserver/ChangeLog:\n\n\t* netbsd-low.cc (netbsd_waitpid, netbsd_process_target::kill)\n\t(netbsd_qxfer_libraries_svr4): Use gdb::handle_eintr without\n\texplicit type.\n\ngdbsupport/ChangeLog:\n\n\t* eintr.h (handle_eintr): Replace Ret template parameter with\n\tErrorValType.  Use it as type of the failure value.  Deduce the\n\tfunction's return type using decltype.  Use lowercase for function\n\tparameter names.",
    "tree": {
      "sha": "8266ed1925a47e82c6f6bdc0e7825f1ac57c8a33",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8266ed1925a47e82c6f6bdc0e7825f1ac57c8a33"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d744f0f9652ee8de839c09e4517b18c9b88aecb7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d744f0f9652ee8de839c09e4517b18c9b88aecb7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d744f0f9652ee8de839c09e4517b18c9b88aecb7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d744f0f9652ee8de839c09e4517b18c9b88aecb7/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "55c3ad8801359ecb166ff3c04c3bd14140f623a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55c3ad8801359ecb166ff3c04c3bd14140f623a1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/55c3ad8801359ecb166ff3c04c3bd14140f623a1"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 40,
    "deletions": 25
  },
  "files": [
    {
      "sha": "00920974c0b42520513bc700a17964d5124d83fa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d744f0f9652ee8de839c09e4517b18c9b88aecb7",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-26  Pedro Alves  <pedro@palves.net>\n+\n+\t* nat/linux-waitpid.c: Include \"gdbsupport/eintr.h\".\n+\t(my_waitpid): Use gdb::handle_eintr.\n+\n 2020-10-25  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* acinclude.m4: Update ptrace.m4 path."
    },
    {
      "sha": "d066239220ab4c6ba173bd67906d1595d50ead4b",
      "filename": "gdb/nat/linux-waitpid.c",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdb/nat/linux-waitpid.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdb/nat/linux-waitpid.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-waitpid.c?ref=d744f0f9652ee8de839c09e4517b18c9b88aecb7",
      "patch": "@@ -22,6 +22,7 @@\n #include \"linux-nat.h\"\n #include \"linux-waitpid.h\"\n #include \"gdbsupport/gdb_wait.h\"\n+#include \"gdbsupport/eintr.h\"\n \n /* Convert wait status STATUS to a string.  Used for printing debug\n    messages only.  */\n@@ -54,13 +55,5 @@ status_to_str (int status)\n int\n my_waitpid (int pid, int *status, int flags)\n {\n-  int ret;\n-\n-  do\n-    {\n-      ret = waitpid (pid, status, flags);\n-    }\n-  while (ret == -1 && errno == EINTR);\n-\n-  return ret;\n+  return gdb::handle_eintr (-1, ::waitpid, pid, status, flags);\n }"
    },
    {
      "sha": "0167163e4e3af48a0bbef1ed5690bc58ac737cd0",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=d744f0f9652ee8de839c09e4517b18c9b88aecb7",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-26  Pedro Alves  <pedro@palves.net>\n+\n+\t* netbsd-low.cc (netbsd_waitpid, netbsd_process_target::kill)\n+\t(netbsd_qxfer_libraries_svr4): Use gdb::handle_eintr without\n+\texplicit type.\n+\n 2020-10-25  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* acinclude.m4: Update ptrace.m4 path."
    },
    {
      "sha": "af54041e7348be75ae5a9c5651169af449590b1d",
      "filename": "gdbserver/netbsd-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbserver/netbsd-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbserver/netbsd-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.cc?ref=d744f0f9652ee8de839c09e4517b18c9b88aecb7",
      "patch": "@@ -232,7 +232,7 @@ netbsd_waitpid (ptid_t ptid, struct target_waitstatus *ourstatus,\n   int options = (target_options & TARGET_WNOHANG) ? WNOHANG : 0;\n \n   pid_t pid\n-    = gdb::handle_eintr<int> (-1, ::waitpid, ptid.pid (), &status, options);\n+    = gdb::handle_eintr (-1, ::waitpid, ptid.pid (), &status, options);\n \n   if (pid == -1)\n     perror_with_name (_(\"Child process unexpectedly missing\"));\n@@ -443,7 +443,7 @@ netbsd_process_target::kill (process_info *process)\n     return -1;\n \n   int status;\n-  if (gdb::handle_eintr<int> (-1, ::waitpid, pid, &status, 0) == -1)\n+  if (gdb::handle_eintr (-1, ::waitpid, pid, &status, 0) == -1)\n     return -1;\n   mourn (process);\n   return 0;\n@@ -1136,15 +1136,15 @@ netbsd_qxfer_libraries_svr4 (const pid_t pid, const char *annex,\n static bool\n elf_64_file_p (const char *file)\n {\n-  int fd = gdb::handle_eintr<int> (-1, ::open, file, O_RDONLY);\n+  int fd = gdb::handle_eintr (-1, ::open, file, O_RDONLY);\n   if (fd < 0)\n     perror_with_name ((\"open\"));\n \n   Elf64_Ehdr header;\n-  ssize_t ret = gdb::handle_eintr<ssize_t> (-1, ::read, fd, &header, sizeof (header));\n+  ssize_t ret = gdb::handle_eintr (-1, ::read, fd, &header, sizeof (header));\n   if (ret == -1)\n     perror_with_name ((\"read\"));\n-  gdb::handle_eintr<int> (-1, ::close, fd);\n+  gdb::handle_eintr (-1, ::close, fd);\n   if (ret != sizeof (header))\n     error (\"Cannot read ELF file header: %s\", file);\n "
    },
    {
      "sha": "2b01a0ba8408bcced929066d1734343bbd231a7e",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=d744f0f9652ee8de839c09e4517b18c9b88aecb7",
      "patch": "@@ -1,3 +1,10 @@\n+2020-10-26  Pedro Alves  <pedro@palves.net>\n+\n+\t* eintr.h (handle_eintr): Replace Ret template parameter with\n+\tErrorValType.  Use it as type of the failure value.  Deduce the\n+\tfunction's return type using decltype.  Use lowercase for function\n+\tparameter names.\n+\n 2020-10-25  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* Makefile.in: Re-generate."
    },
    {
      "sha": "e09704718da9fc31d0c00c7c2a2c33f8c75f90b4",
      "filename": "gdbsupport/eintr.h",
      "status": "modified",
      "additions": 15,
      "deletions": 11,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbsupport/eintr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d744f0f9652ee8de839c09e4517b18c9b88aecb7/gdbsupport/eintr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/eintr.h?ref=d744f0f9652ee8de839c09e4517b18c9b88aecb7",
      "patch": "@@ -43,25 +43,29 @@ namespace gdb\n \n    You could wrap it by writing the wrapped form:\n \n-   ssize_t ret = gdb::handle_eintr<ssize_t> (-1, ::write, pipe[1], \"+\", 1);\n+   ssize_t ret = gdb::handle_eintr (-1, ::write, pipe[1], \"+\", 1);\n \n-   The RET typename specifies the return type of the wrapped system call, which\n-   is typically int or ssize_t.  The R argument specifies the failure value\n-   indicating the interrupted syscall when calling the F function with\n-   the A... arguments.  */\n+   ERRVAL specifies the failure value indicating that the call to the\n+   F function with ARGS... arguments was possibly interrupted with a\n+   signal.  */\n \n-template <typename Ret, typename Fun, typename... Args>\n-inline Ret handle_eintr (const Ret &R, const Fun &F, const Args &... A)\n+template<typename ErrorValType, typename Fun, typename... Args>\n+inline auto\n+handle_eintr (ErrorValType errval, const Fun &f, const Args &... args)\n+  -> decltype (f (args...))\n {\n-  Ret ret;\n+  decltype (f (args...)) ret;\n+\n   do\n     {\n       errno = 0;\n-      ret = F (A...);\n+      ret = f (args...);\n     }\n-  while (ret == R && errno == EINTR);\n+  while (ret == errval && errno == EINTR);\n+\n   return ret;\n }\n-}\n+\n+} /* namespace gdb */\n \n #endif /* GDBSUPPORT_EINTR_H */"
    }
  ]
}