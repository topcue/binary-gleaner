{
  "sha": "b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjAyZjc4ZjkyODU3MjhjZTJkMDVjZTAxZTdiMTQ4ODBmNzBjZDZlNg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-04T21:40:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-04T21:48:32Z"
    },
    "message": "Introduce and use make_unique_xstrdup\n\nAdds an utility function to make it shorter to write the common case\nof wrapping an xstrdup with a unique_xmalloc_ptr, and uses it\nthroughout.\n\nNote: I tried to put this in common/common-utils.h near skip_spaces,\netc. but that is included in common/common-defs.h before\ncommon/gdb_unique_ptr.h is included, so it would fail to compile\nbecause gdb::unique_xmalloc_ptr isn't defined at that point yet.  I\ntried moving the gdb_unique_ptr.h inclusion before common-utils.h, but\nthat doesn't work because gdb_unique_ptr.h depends on common-utils.h\nfor xfree.\n\ngdb/ChangeLog:\n2019-06-04  Pedro Alves  <palves@redhat.com>\n\n\t* common/gdb_unique_ptr.h (make_unique_xstrdup): New.\n\n\t* ada-lang.c (catch_ada_completer): Use make_unique_xstrdup.\n\t* breakpoint.c (condition_completer): Likewise.\n\t* cli/cli-dump.c (scan_expression): Likewise.\n\t* common/filestuff.c (mkdir_recursive): Likewise.\n\t* common/gdb_tilde_expand.c (gdb_tilde_expand_up)\n\t* common/pathstuff.c (gdb_realpath, gdb_realpath_keepfile)\n\t(gdb_abspath): Likewise.\n\t* compile/compile-cplus-types.c\n\t(compile_cplus_instance::decl_name): Likewise.\n\t* completer.c (complete_explicit_location):\n\t(signal_completer, reg_or_group_completer_1): Likewise.\n\t* cp-support.c (cp_remove_params_if_any): Likewise.\n\t* fbsd-tdep.c (fbsd_core_vnode_path): Likewise.\n\t* guile/scm-safe-call.c (gdbscm_safe_eval_string): Likewise.\n\t* infcmd.c (strip_bg_char): Likewise.\n\t* linespec.c (copy_token_string): Likewise.\n\t* mi/mi-main.c (output_cores): Likewise.\n\t* psymtab.c (psymtab_search_name):\n\t* symfile.c (test_set_ext_lang_command): Likewise.\n\t* target.c (target_fileio_read_stralloc): Likewise.\n\t* tui/tui-regs.c (tui_reggroup_completer): Likewise.\n\t* value.c (complete_internalvar): Likewise.\n\ngdb/gdbserver/ChangeLog:\n2019-06-04  Pedro Alves  <palves@redhat.com>\n\n\t* server.c (captured_main): Use make_unique_xstrdup.",
    "tree": {
      "sha": "44de7b0901c72644693ebd089dd24f6f26fa6097",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/44de7b0901c72644693ebd089dd24f6f26fa6097"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3238f7d90715dad7e8da2a8c2486d26124b0c84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3238f7d90715dad7e8da2a8c2486d26124b0c84",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3238f7d90715dad7e8da2a8c2486d26124b0c84"
    }
  ],
  "stats": {
    "total": 110,
    "additions": 65,
    "deletions": 45
  },
  "files": [
    {
      "sha": "79475684548384762b857ae134971b2a6c64abb5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -1,3 +1,30 @@\n+2019-06-04  Pedro Alves  <palves@redhat.com>\n+\n+\t* common/gdb_unique_ptr.h (make_unique_xstrdup): New.\n+\n+\t* ada-lang.c (catch_ada_completer): Use make_unique_xstrdup.\n+\t* breakpoint.c (condition_completer): Likewise.\n+\t* cli/cli-dump.c (scan_expression): Likewise.\n+\t* common/filestuff.c (mkdir_recursive): Likewise.\n+\t* common/gdb_tilde_expand.c (gdb_tilde_expand_up)\n+\t* common/pathstuff.c (gdb_realpath, gdb_realpath_keepfile)\n+\t(gdb_abspath): Likewise.\n+\t* compile/compile-cplus-types.c\n+\t(compile_cplus_instance::decl_name): Likewise.\n+\t* completer.c (complete_explicit_location):\n+\t(signal_completer, reg_or_group_completer_1): Likewise.\n+\t* cp-support.c (cp_remove_params_if_any): Likewise.\n+\t* fbsd-tdep.c (fbsd_core_vnode_path): Likewise.\n+\t* guile/scm-safe-call.c (gdbscm_safe_eval_string): Likewise.\n+\t* infcmd.c (strip_bg_char): Likewise.\n+\t* linespec.c (copy_token_string): Likewise.\n+\t* mi/mi-main.c (output_cores): Likewise.\n+\t* psymtab.c (psymtab_search_name):\n+\t* symfile.c (test_set_ext_lang_command): Likewise.\n+\t* target.c (target_fileio_read_stralloc): Likewise.\n+\t* tui/tui-regs.c (tui_reggroup_completer): Likewise.\n+\t* value.c (complete_internalvar): Likewise.\n+\n 2019-06-04  Christian Biesinger  <cbiesinger@google.com>\n \n \tAdd objfile property to gdb.Type."
    },
    {
      "sha": "22c51fbf082473932192596ff02defe0c67c437a",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -13195,8 +13195,7 @@ catch_ada_completer (struct cmd_list_element *cmd, completion_tracker &tracker,\n   for (const ada_exc_info &info : exceptions)\n     {\n       if (startswith (info.name, word))\n-\ttracker.add_completion\n-\t  (gdb::unique_xmalloc_ptr<char> (xstrdup (info.name)));\n+\ttracker.add_completion (make_unique_xstrdup (info.name));\n     }\n }\n "
    },
    {
      "sha": "ae3dcc0a9525afdab89f1ad92576618ddbbc39f4",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -941,10 +941,7 @@ condition_completer (struct cmd_list_element *cmd,\n \t  xsnprintf (number, sizeof (number), \"%d\", b->number);\n \n \t  if (strncmp (number, text, len) == 0)\n-\t    {\n-\t      gdb::unique_xmalloc_ptr<char> copy (xstrdup (number));\n-\t      tracker.add_completion (std::move (copy));\n-\t    }\n+\t    tracker.add_completion (make_unique_xstrdup (number));\n \t}\n \n       return;"
    },
    {
      "sha": "621bc9373ff76e7d9efef81c0e1b164430d2470a",
      "filename": "gdb/cli/cli-dump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/cli/cli-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/cli/cli-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-dump.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -37,7 +37,7 @@ static gdb::unique_xmalloc_ptr<char>\n scan_expression (const char **cmd, const char *def)\n {\n   if ((*cmd) == NULL || (**cmd) == '\\0')\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (def));\n+    return make_unique_xstrdup (def);\n   else\n     {\n       char *exp;"
    },
    {
      "sha": "c7b8c694055138cea1c66c89154f5251a70d2d50",
      "filename": "gdb/common/filestuff.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/filestuff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/filestuff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/filestuff.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -462,7 +462,7 @@ is_regular_file (const char *name, int *errno_ptr)\n bool\n mkdir_recursive (const char *dir)\n {\n-  gdb::unique_xmalloc_ptr<char> holder (xstrdup (dir));\n+  auto holder = make_unique_xstrdup (dir);\n   char * const start = holder.get ();\n   char *component_start = start;\n   char *component_end = start;"
    },
    {
      "sha": "326df8f6aa9584a4f058e326401bdc773b72201b",
      "filename": "gdb/common/gdb_tilde_expand.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/gdb_tilde_expand.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/gdb_tilde_expand.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/gdb_tilde_expand.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -91,5 +91,5 @@ gdb_tilde_expand_up (const char *dir)\n   gdb_assert (glob.pathc () > 0);\n   /* \"glob\" may return more than one match to the path provided by the\n      user, but we are only interested in the first match.  */\n-  return gdb::unique_xmalloc_ptr<char> (xstrdup (glob.pathv ()[0]));\n+  return make_unique_xstrdup (glob.pathv ()[0]);\n }"
    },
    {
      "sha": "67a5f265353ffe3b75c960ee141b1220cf8ef351",
      "filename": "gdb/common/gdb_unique_ptr.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/gdb_unique_ptr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/gdb_unique_ptr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/gdb_unique_ptr.h?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -56,4 +56,12 @@ struct noop_deleter\n \n } /* namespace gdb */\n \n+/* Dup STR and return a unique_xmalloc_ptr for the result.  */\n+\n+static inline gdb::unique_xmalloc_ptr<char>\n+make_unique_xstrdup (const char *str)\n+{\n+  return gdb::unique_xmalloc_ptr<char> (xstrdup (str));\n+}\n+\n #endif /* COMMON_GDB_UNIQUE_PTR_H */"
    },
    {
      "sha": "e0e048d66546acea292e63c000d321cbb3767195",
      "filename": "gdb/common/pathstuff.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/pathstuff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/common/pathstuff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/pathstuff.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -65,7 +65,7 @@ gdb_realpath (const char *filename)\n        we might not be able to display the original casing in a given\n        path.  */\n     if (len > 0 && len < MAX_PATH)\n-      return gdb::unique_xmalloc_ptr<char> (xstrdup (buf));\n+      return make_unique_xstrdup (buf);\n   }\n #else\n   {\n@@ -77,7 +77,7 @@ gdb_realpath (const char *filename)\n #endif\n \n   /* This system is a lost cause, just dup the buffer.  */\n-  return gdb::unique_xmalloc_ptr<char> (xstrdup (filename));\n+  return make_unique_xstrdup (filename);\n }\n \n /* See common/pathstuff.h.  */\n@@ -92,7 +92,7 @@ gdb_realpath_keepfile (const char *filename)\n   /* Extract the basename of filename, and return immediately\n      a copy of filename if it does not contain any directory prefix.  */\n   if (base_name == filename)\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (filename));\n+    return make_unique_xstrdup (filename);\n \n   dir_name = (char *) alloca ((size_t) (base_name - filename + 2));\n   /* Allocate enough space to store the dir_name + plus one extra\n@@ -135,7 +135,7 @@ gdb_abspath (const char *path)\n     return gdb_tilde_expand_up (path);\n \n   if (IS_ABSOLUTE_PATH (path))\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (path));\n+    return make_unique_xstrdup (path);\n \n   /* Beware the // my son, the Emacs barfs, the botch that catch...  */\n   return gdb::unique_xmalloc_ptr<char>"
    },
    {
      "sha": "d7aef265cf820800e6671f9ccef0712f7f4c162f",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -65,7 +65,7 @@ compile_cplus_instance::decl_name (const char *natural)\n   if (name != nullptr)\n     return name;\n \n-  return gdb::unique_xmalloc_ptr<char> (xstrdup (natural));\n+  return make_unique_xstrdup (natural);\n }\n \n /* Get the access flag for the NUM'th field of TYPE.  */"
    },
    {
      "sha": "d4773f2a77b536e145b5c65e74a11b1ebaf6ff46",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 4,
      "deletions": 15,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -798,9 +798,7 @@ complete_explicit_location (completion_tracker &tracker,\n \t\t   before: \"b -function 'not_loaded_function_yet()'\"\n \t\t   after:  \"b -function 'not_loaded_function_yet()' \"\n \t      */\n-\t      gdb::unique_xmalloc_ptr<char> text_copy\n-\t\t(xstrdup (text));\n-\t      tracker.add_completion (std::move (text_copy));\n+\t      tracker.add_completion (make_unique_xstrdup (text));\n \t    }\n \t  else if (quoted_arg_end[1] == ' ')\n \t    {\n@@ -1723,10 +1721,7 @@ signal_completer (struct cmd_list_element *ignore,\n \tcontinue;\n \n       if (strncasecmp (signame, word, len) == 0)\n-\t{\n-\t  gdb::unique_xmalloc_ptr<char> copy (xstrdup (signame));\n-\t  tracker.add_completion (std::move (copy));\n-\t}\n+\ttracker.add_completion (make_unique_xstrdup (signame));\n     }\n }\n \n@@ -1765,10 +1760,7 @@ reg_or_group_completer_1 (completion_tracker &tracker,\n \t   i++)\n \t{\n \t  if (*name != '\\0' && strncmp (word, name, len) == 0)\n-\t    {\n-\t      gdb::unique_xmalloc_ptr<char> copy (xstrdup (name));\n-\t      tracker.add_completion (std::move (copy));\n-\t    }\n+\t    tracker.add_completion (make_unique_xstrdup (name));\n \t}\n     }\n \n@@ -1782,10 +1774,7 @@ reg_or_group_completer_1 (completion_tracker &tracker,\n \t{\n \t  name = reggroup_name (group);\n \t  if (strncmp (word, name, len) == 0)\n-\t    {\n-\t      gdb::unique_xmalloc_ptr<char> copy (xstrdup (name));\n-\t      tracker.add_completion (std::move (copy));\n-\t    }\n+\t    tracker.add_completion (make_unique_xstrdup (name));\n \t}\n     }\n }"
    },
    {
      "sha": "9ba6ee3ede537f2383f73ba9473905f9cfefc278",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -908,7 +908,7 @@ cp_remove_params_if_any (const char *demangled_name, bool completion_mode)\n      we're completing / matching everything, avoid returning NULL\n      which would make callers interpret the result as an error.  */\n   if (demangled_name[0] == '\\0' && completion_mode)\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (\"\"));\n+    return make_unique_xstrdup (\"\");\n \n   gdb::unique_xmalloc_ptr<char> without_params\n     = cp_remove_params_1 (demangled_name, false);"
    },
    {
      "sha": "e81c6c99bff254bf63cb0f4e6ccba9dec3947f54",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -1266,7 +1266,7 @@ fbsd_core_vnode_path (struct gdbarch *gdbarch, int fd)\n \t  && bfd_get_signed_32 (core_bfd, descdata + KF_FD) == fd)\n \t{\n \t  char *path = (char *) descdata + KF_PATH;\n-\t  return gdb::unique_xmalloc_ptr<char> (xstrdup (path));\n+\t  return make_unique_xstrdup (path);\n \t}\n \n       descdata += structsize;"
    },
    {
      "sha": "bc554bd89c29830269d6a7fb337b482767fefb55",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -1,3 +1,7 @@\n+2019-06-04  Pedro Alves  <palves@redhat.com>\n+\n+\t* server.c (captured_main): Use make_unique_xstrdup.\n+\n 2019-06-02  Tom Tromey  <tom@tromey.com>\n \n \t* gdbreplay.c (fromhex): Remove."
    },
    {
      "sha": "5e93a58fd6bf23d1b3fe35d55409ef0a1deadb50",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -3802,7 +3802,7 @@ captured_main (int argc, char *argv[])\n       int i, n;\n \n       n = argc - (next_arg - argv);\n-      program_path.set (gdb::unique_xmalloc_ptr<char> (xstrdup (next_arg[0])));\n+      program_path.set (make_unique_xstrdup (next_arg[0]));\n       for (i = 1; i < n; i++)\n \tprogram_args.push_back (xstrdup (next_arg[i]));\n       program_args.push_back (NULL);"
    },
    {
      "sha": "14eace5f9cdb56db3f1a14566dec62522cdcd732",
      "filename": "gdb/guile/scm-safe-call.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/guile/scm-safe-call.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/guile/scm-safe-call.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-safe-call.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -404,7 +404,7 @@ gdbscm_safe_eval_string (const char *string, int display_result)\n   result = gdbscm_with_guile (scscm_eval_scheme_string, (void *) &data);\n \n   if (result != NULL)\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (result));\n+    return make_unique_xstrdup (result);\n   return NULL;\n }\n \f"
    },
    {
      "sha": "00b55c828ab83b94141507bfcfa46cf210c39843",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -421,7 +421,7 @@ strip_bg_char (const char *args, int *bg_char_p)\n     }\n \n   *bg_char_p = 0;\n-  return gdb::unique_xmalloc_ptr<char> (xstrdup (args));\n+  return make_unique_xstrdup (args);\n }\n \n /* Common actions to take after creating any sort of inferior, by any"
    },
    {
      "sha": "f0afe1b4ca145d7d65c0fd0bacf03b00d9be7bb1",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -555,7 +555,7 @@ copy_token_string (linespec_token token)\n   const char *str, *s;\n \n   if (token.type == LSTOKEN_KEYWORD)\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (LS_TOKEN_KEYWORD (token)));\n+    return make_unique_xstrdup (LS_TOKEN_KEYWORD (token));\n \n   str = LS_TOKEN_STOKEN (token).ptr;\n   s = remove_trailing_whitespace (str, str + LS_TOKEN_STOKEN (token).length);"
    },
    {
      "sha": "13c310d494c0f348531db91f1c9da73f71c67af0",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -695,7 +695,7 @@ static void\n output_cores (struct ui_out *uiout, const char *field_name, const char *xcores)\n {\n   ui_out_emit_list list_emitter (uiout, field_name);\n-  gdb::unique_xmalloc_ptr<char> cores (xstrdup (xcores));\n+  auto cores = make_unique_xstrdup (xcores);\n   char *p = cores.get ();\n \n   for (p = strtok (p, \",\"); p;  p = strtok (NULL, \",\"))"
    },
    {
      "sha": "6cc7566580abb78bec918e7a8f4cb25545b881e8",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -647,7 +647,7 @@ psymtab_search_name (const char *name)\n       break;\n     }\n \n-  return gdb::unique_xmalloc_ptr<char> (xstrdup (name));\n+  return make_unique_xstrdup (name);\n }\n \n /* Look, in partial_symtab PST, for symbol whose natural name is NAME."
    },
    {
      "sha": "26762d289cae7df0dea1d02b78b549cc8e05648e",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -3877,7 +3877,7 @@ test_set_ext_lang_command ()\n   SELF_CHECK (lang == language_unknown);\n \n   /* Test adding a new extension using the CLI command.  */\n-  gdb::unique_xmalloc_ptr<char> args_holder (xstrdup (\".hello rust\"));\n+  auto args_holder = make_unique_xstrdup (\".hello rust\");\n   ext_args = args_holder.get ();\n   set_ext_lang_command (NULL, 1, NULL);\n "
    },
    {
      "sha": "1c04095fd63c329a4d92331154280d2adf0b4e7b",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -3106,7 +3106,7 @@ target_fileio_read_stralloc (struct inferior *inf, const char *filename)\n     return gdb::unique_xmalloc_ptr<char> (nullptr);\n \n   if (transferred == 0)\n-    return gdb::unique_xmalloc_ptr<char> (xstrdup (\"\"));\n+    return make_unique_xstrdup (\"\");\n \n   bufstr[transferred] = 0;\n "
    },
    {
      "sha": "e6aeedd923115d3c089044f635f5e6d098e5e7dd",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -676,7 +676,7 @@ tui_reggroup_completer (struct cmd_list_element *ignore,\n   for (tmp = extra; *tmp != NULL; ++tmp)\n     {\n       if (strncmp (word, *tmp, len) == 0)\n-\ttracker.add_completion (gdb::unique_xmalloc_ptr<char> (xstrdup (*tmp)));\n+\ttracker.add_completion (make_unique_xstrdup (*tmp));\n     }\n }\n "
    },
    {
      "sha": "71030efed072d69a50786812b35d573a0628e35e",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b02f78f9285728ce2d05ce01e7b14880f70cd6e6/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=b02f78f9285728ce2d05ce01e7b14880f70cd6e6",
      "patch": "@@ -2014,11 +2014,7 @@ complete_internalvar (completion_tracker &tracker, const char *name)\n \n   for (var = internalvars; var; var = var->next)\n     if (strncmp (var->name, name, len) == 0)\n-      {\n-\tgdb::unique_xmalloc_ptr<char> copy (xstrdup (var->name));\n-\n-\ttracker.add_completion (std::move (copy));\n-      }\n+      tracker.add_completion (make_unique_xstrdup (var->name));\n }\n \n /* Create an internal variable with name NAME and with a void value."
    }
  ]
}