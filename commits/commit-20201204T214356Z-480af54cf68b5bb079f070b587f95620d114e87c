{
  "sha": "480af54cf68b5bb079f070b587f95620d114e87c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDgwYWY1NGNmNjhiNWJiMDc5ZjA3MGI1ODdmOTU2MjBkMTE0ZTg3Yw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:56Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:56Z"
    },
    "message": "gdb: make displaced stepping implementation capable of managing multiple buffers\n\nThe displaced_step_buffer class, introduced in the previous patch,\nmanages access to a single displaced step buffer.  Change it into\ndisplaced_step_buffers (note the plural), which manages access to\nmultiple displaced step buffers.\n\nWhen preparing a displaced step for a thread, it looks for an unused\nbuffer.\n\nFor now, all users still pass a single displaced step buffer, so no real\nbehavior change is expected here.  The following patch makes a user pass\nmore than one buffer, so the functionality introduced by this patch is\ngoing to be useful in the next one.\n\ngdb/ChangeLog:\n\n\t* displaced-stepping.h (struct displaced_step_buffer): Rename\n\tto...\n\t(struct displaced_step_buffers): ... this.\n\t<m_addr, m_current_thread, m_copy_insn_closure>: Remove.\n\t<struct displaced_step_buffer>: New inner class.\n\t<m_buffers>: New.\n\t* displaced-stepping.c (displaced_step_buffer::prepare): Rename\n\tto...\n\t(displaced_step_buffers::prepare): ... this, adjust for multiple\n\tbuffers.\n\t(displaced_step_buffer::finish):  Rename to...\n\t(displaced_step_buffers::finish): ... this, adjust for multiple\n\tbuffers.\n\t(displaced_step_buffer::copy_insn_closure_by_addr): Rename to...\n\t(displaced_step_buffers::copy_insn_closure_by_addr): ... this,\n\tadjust for multiple buffers.\n\t(displaced_step_buffer::restore_in_ptid): Rename to...\n\t(displaced_step_buffers::restore_in_ptid): ... this, adjust for\n\tmultiple buffers.\n\t* linux-tdep.h (linux_init_abi): Change supports_displaced_step\n\tfor num_disp_step_buffers.\n\t* linux-tdep.c (struct linux_gdbarch_data)\n\t<num_disp_step_buffers>: New field.\n\t(struct linux_info) <disp_step_buf>: Rename to...\n\t<disp_step_bufs>: ... this, change type to\n\tdisplaced_step_buffers.\n\t(linux_displaced_step_prepare): Use\n\tlinux_gdbarch_data::num_disp_step_buffers to create that number\n\tof buffers.\n\t(linux_displaced_step_finish): Adjust.\n\t(linux_displaced_step_copy_insn_closure_by_addr): Adjust.\n\t(linux_displaced_step_restore_all_in_ptid): Adjust.\n\t(linux_init_abi): Change supports_displaced_step parameter for\n\tnum_disp_step_buffers, save it in linux_gdbarch_data.\n\t* aarch64-linux-tdep.c (aarch64_linux_init_abi): Adjust.\n\t* alpha-linux-tdep.c (alpha_linux_init_abi): Adjust.\n\t* amd64-linux-tdep.c (amd64_linux_init_abi_common): Change\n\tsupports_displaced_step parameter for num_disp_step_buffers.\n\t(amd64_linux_init_abi): Adjust.\n\t(amd64_x32_linux_init_abi): Adjust.\n\t* arc-linux-tdep.c (arc_linux_init_osabi): Adjust.\n\t* arm-linux-tdep.c (arm_linux_init_abi): Adjust.\n\t* bfin-linux-tdep.c (bfin_linux_init_abi): Adjust.\n\t* cris-linux-tdep.c (cris_linux_init_abi): Adjust.\n\t* csky-linux-tdep.c (csky_linux_init_abi): Adjust.\n\t* frv-linux-tdep.c (frv_linux_init_abi): Adjust.\n\t* hppa-linux-tdep.c (hppa_linux_init_abi): Adjust.\n\t* i386-linux-tdep.c (i386_linux_init_abi): Adjust.\n\t* ia64-linux-tdep.c (ia64_linux_init_abi): Adjust.\n\t* m32r-linux-tdep.c (m32r_linux_init_abi): Adjust.\n\t* m68k-linux-tdep.c (m68k_linux_init_abi):\n\t* microblaze-linux-tdep.c (microblaze_linux_init_abi):\n\t* mips-linux-tdep.c (mips_linux_init_abi): Adjust.\n\t* mn10300-linux-tdep.c (am33_linux_init_osabi): Adjust.\n\t* nios2-linux-tdep.c (nios2_linux_init_abi): Adjust.\n\t* or1k-linux-tdep.c (or1k_linux_init_abi): Adjust.\n\t* ppc-linux-tdep.c (ppc_linux_init_abi): Adjust.\n\t* riscv-linux-tdep.c (riscv_linux_init_abi): Adjust.\n\t* rs6000-tdep.c (struct ppc_inferior_data) <disp_step_buf>:\n\tChange type to displaced_step_buffers.\n\t* s390-linux-tdep.c (s390_linux_init_abi_any): Adjust.\n\t* sh-linux-tdep.c (sh_linux_init_abi): Adjust.\n\t* sparc-linux-tdep.c (sparc32_linux_init_abi): Adjust.\n\t* sparc64-linux-tdep.c (sparc64_linux_init_abi): Adjust.\n\t* tic6x-linux-tdep.c (tic6x_uclinux_init_abi): Adjust.\n\t* tilegx-linux-tdep.c (tilegx_linux_init_abi): Adjust.\n\t* xtensa-linux-tdep.c (xtensa_linux_init_abi): Adjust.\n\nChange-Id: Ia9c02f207da2c9e1d9188020139619122392bb70",
    "tree": {
      "sha": "23d825a69feb63ad3a4b4f385bdd62d35c35b67e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/23d825a69feb63ad3a4b4f385bdd62d35c35b67e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/480af54cf68b5bb079f070b587f95620d114e87c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480af54cf68b5bb079f070b587f95620d114e87c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/480af54cf68b5bb079f070b587f95620d114e87c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480af54cf68b5bb079f070b587f95620d114e87c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d965505887c27e8b1d6e84cb06c2b131aad08093",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d965505887c27e8b1d6e84cb06c2b131aad08093",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d965505887c27e8b1d6e84cb06c2b131aad08093"
    }
  ],
  "stats": {
    "total": 421,
    "additions": 295,
    "deletions": 126
  },
  "files": [
    {
      "sha": "514bf6d0c53fd8162a6f67448776cf80c166196d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1,3 +1,73 @@\n+2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* displaced-stepping.h (struct displaced_step_buffer): Rename\n+\tto...\n+\t(struct displaced_step_buffers): ... this.\n+\t<m_addr, m_current_thread, m_copy_insn_closure>: Remove.\n+\t<struct displaced_step_buffer>: New inner class.\n+\t<m_buffers>: New.\n+\t* displaced-stepping.c (displaced_step_buffer::prepare): Rename\n+\tto...\n+\t(displaced_step_buffers::prepare): ... this, adjust for multiple\n+\tbuffers.\n+\t(displaced_step_buffer::finish):  Rename to...\n+\t(displaced_step_buffers::finish): ... this, adjust for multiple\n+\tbuffers.\n+\t(displaced_step_buffer::copy_insn_closure_by_addr): Rename to...\n+\t(displaced_step_buffers::copy_insn_closure_by_addr): ... this,\n+\tadjust for multiple buffers.\n+\t(displaced_step_buffer::restore_in_ptid): Rename to...\n+\t(displaced_step_buffers::restore_in_ptid): ... this, adjust for\n+\tmultiple buffers.\n+\t* linux-tdep.h (linux_init_abi): Change supports_displaced_step\n+\tfor num_disp_step_buffers.\n+\t* linux-tdep.c (struct linux_gdbarch_data)\n+\t<num_disp_step_buffers>: New field.\n+\t(struct linux_info) <disp_step_buf>: Rename to...\n+\t<disp_step_bufs>: ... this, change type to\n+\tdisplaced_step_buffers.\n+\t(linux_displaced_step_prepare): Use\n+\tlinux_gdbarch_data::num_disp_step_buffers to create that number\n+\tof buffers.\n+\t(linux_displaced_step_finish): Adjust.\n+\t(linux_displaced_step_copy_insn_closure_by_addr): Adjust.\n+\t(linux_displaced_step_restore_all_in_ptid): Adjust.\n+\t(linux_init_abi): Change supports_displaced_step parameter for\n+\tnum_disp_step_buffers, save it in linux_gdbarch_data.\n+\t* aarch64-linux-tdep.c (aarch64_linux_init_abi): Adjust.\n+\t* alpha-linux-tdep.c (alpha_linux_init_abi): Adjust.\n+\t* amd64-linux-tdep.c (amd64_linux_init_abi_common): Change\n+\tsupports_displaced_step parameter for num_disp_step_buffers.\n+\t(amd64_linux_init_abi): Adjust.\n+\t(amd64_x32_linux_init_abi): Adjust.\n+\t* arc-linux-tdep.c (arc_linux_init_osabi): Adjust.\n+\t* arm-linux-tdep.c (arm_linux_init_abi): Adjust.\n+\t* bfin-linux-tdep.c (bfin_linux_init_abi): Adjust.\n+\t* cris-linux-tdep.c (cris_linux_init_abi): Adjust.\n+\t* csky-linux-tdep.c (csky_linux_init_abi): Adjust.\n+\t* frv-linux-tdep.c (frv_linux_init_abi): Adjust.\n+\t* hppa-linux-tdep.c (hppa_linux_init_abi): Adjust.\n+\t* i386-linux-tdep.c (i386_linux_init_abi): Adjust.\n+\t* ia64-linux-tdep.c (ia64_linux_init_abi): Adjust.\n+\t* m32r-linux-tdep.c (m32r_linux_init_abi): Adjust.\n+\t* m68k-linux-tdep.c (m68k_linux_init_abi):\n+\t* microblaze-linux-tdep.c (microblaze_linux_init_abi):\n+\t* mips-linux-tdep.c (mips_linux_init_abi): Adjust.\n+\t* mn10300-linux-tdep.c (am33_linux_init_osabi): Adjust.\n+\t* nios2-linux-tdep.c (nios2_linux_init_abi): Adjust.\n+\t* or1k-linux-tdep.c (or1k_linux_init_abi): Adjust.\n+\t* ppc-linux-tdep.c (ppc_linux_init_abi): Adjust.\n+\t* riscv-linux-tdep.c (riscv_linux_init_abi): Adjust.\n+\t* rs6000-tdep.c (struct ppc_inferior_data) <disp_step_buf>:\n+\tChange type to displaced_step_buffers.\n+\t* s390-linux-tdep.c (s390_linux_init_abi_any): Adjust.\n+\t* sh-linux-tdep.c (sh_linux_init_abi): Adjust.\n+\t* sparc-linux-tdep.c (sparc32_linux_init_abi): Adjust.\n+\t* sparc64-linux-tdep.c (sparc64_linux_init_abi): Adjust.\n+\t* tic6x-linux-tdep.c (tic6x_uclinux_init_abi): Adjust.\n+\t* tilegx-linux-tdep.c (tilegx_linux_init_abi): Adjust.\n+\t* xtensa-linux-tdep.c (xtensa_linux_init_abi): Adjust.\n+\n 2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* linux-tdep.c (init_linux_gdbarch_data): Change parameter to"
    },
    {
      "sha": "ce697ff246e16ad55475a07d36091c1165139a3d",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1445,7 +1445,7 @@ aarch64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   tdep->lowest_pc = 0x8000;\n \n-  linux_init_abi (info, gdbarch, true);\n+  linux_init_abi (info, gdbarch, 1);\n \n   set_solib_svr4_fetch_link_map_offsets (gdbarch,\n \t\t\t\t\t svr4_lp64_fetch_link_map_offsets);"
    },
    {
      "sha": "520dd980d88d44b5fc377bd09d56eddcaa1b37e5",
      "filename": "gdb/alpha-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/alpha-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/alpha-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alpha-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -356,7 +356,7 @@ alpha_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep;\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Hook into the DWARF CFI frame unwinder.  */\n   alpha_dwarf2_init_abi (info, gdbarch);"
    },
    {
      "sha": "60707ed7aaffe52b08068ca6b5e0369af8239192",
      "filename": "gdb/amd64-linux-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/amd64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/amd64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1796,11 +1796,11 @@ amd64_dtrace_parse_probe_argument (struct gdbarch *gdbarch,\n \n static void\n amd64_linux_init_abi_common(struct gdbarch_info info, struct gdbarch *gdbarch,\n-\t\t\t    bool supports_displaced_step)\n+\t\t\t    int num_disp_step_buffers)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, supports_displaced_step);\n+  linux_init_abi (info, gdbarch, num_disp_step_buffers);\n \n   tdep->sigtramp_p = amd64_linux_sigtramp_p;\n   tdep->sigcontext_addr = amd64_linux_sigcontext_addr;\n@@ -1880,7 +1880,7 @@ amd64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   if (!valid_p)\n     return;\n \n-  amd64_linux_init_abi_common (info, gdbarch, true);\n+  amd64_linux_init_abi_common (info, gdbarch, 1);\n \n   /* Initialize the amd64_linux_record_tdep.  */\n   /* These values are the size of the type that will be used in a system\n@@ -2095,7 +2095,7 @@ amd64_x32_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   if (!valid_p)\n     return;\n \n-  amd64_linux_init_abi_common (info, gdbarch, false);\n+  amd64_linux_init_abi_common (info, gdbarch, 0);\n \n   /* Initialize the amd64_x32_linux_record_tdep.  */\n   /* These values are the size of the type that will be used in a system"
    },
    {
      "sha": "2bdeaaf0614cd34375996207926ae8b1fa65682e",
      "filename": "gdb/arc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/arc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/arc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -439,7 +439,7 @@ arc_linux_init_osabi (struct gdbarch_info info, struct gdbarch *gdbarch)\n    */\n   tdep->jb_pc = 15;\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Set up target dependent GDB architecture entries.  */\n   set_gdbarch_cannot_fetch_register (gdbarch, arc_linux_cannot_fetch_register);"
    },
    {
      "sha": "11e71e56b46ceaa2e6eab236fbf77214e67fee34",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1721,7 +1721,7 @@ arm_linux_init_abi (struct gdbarch_info info,\n \t\t\t\t\t\t\t\t    NULL };\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, true);\n+  linux_init_abi (info, gdbarch, 1);\n \n   tdep->lowest_pc = 0x8000;\n   if (info.byte_order_for_code == BFD_ENDIAN_BIG)"
    },
    {
      "sha": "bc2bb1aad4533c68ebd287a8e5a43fc4f61d508f",
      "filename": "gdb/bfin-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/bfin-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/bfin-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bfin-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -150,7 +150,7 @@ bfin_linux_get_syscall_number (struct gdbarch *gdbarch,\n static void\n bfin_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Set the sigtramp frame sniffer.  */\n   tramp_frame_prepend_unwinder (gdbarch, &bfin_linux_sigframe);"
    },
    {
      "sha": "4ae1cdd1390aedf68d345a9dd57dccb922fa2cc0",
      "filename": "gdb/cris-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/cris-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/cris-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -35,7 +35,7 @@ cris_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   if (tdep->cris_version == 32)\n     /* Threaded debugging is only supported on CRISv32 for now.  */"
    },
    {
      "sha": "a0d32b5f2d0ca640869079e98a102135ed4114df",
      "filename": "gdb/csky-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/csky-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/csky-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/csky-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -233,7 +233,7 @@ csky_linux_rt_sigreturn_tramp_frame = {\n static void\n csky_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Shared library handling.  */\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);"
    },
    {
      "sha": "10aa3da62ab46b499cf568277c30b4f7ceeb262f",
      "filename": "gdb/displaced-stepping.c",
      "status": "modified",
      "additions": 119,
      "deletions": 59,
      "changes": 178,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/displaced-stepping.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/displaced-stepping.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/displaced-stepping.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -44,82 +44,121 @@ show_debug_displaced (struct ui_file *file, int from_tty,\n }\n \n displaced_step_prepare_status\n-displaced_step_buffer::prepare (thread_info *thread, CORE_ADDR &displaced_pc)\n+displaced_step_buffers::prepare (thread_info *thread, CORE_ADDR &displaced_pc)\n {\n   gdb_assert (!thread->displaced_step_state.in_progress ());\n \n-  /* Is a thread currently using the buffer?  */\n-  if (m_current_thread != nullptr)\n-    {\n-      /* If so, it better not be this thread.  */\n-      gdb_assert (thread != m_current_thread);\n-      return DISPLACED_STEP_PREPARE_STATUS_UNAVAILABLE;\n-    }\n+  /* Sanity check: the thread should not be using a buffer at this point.  */\n+  for (displaced_step_buffer &buf : m_buffers)\n+    gdb_assert (buf.current_thread != thread);\n \n   regcache *regcache = get_thread_regcache (thread);\n   const address_space *aspace = regcache->aspace ();\n   gdbarch *arch = regcache->arch ();\n   ULONGEST len = gdbarch_max_insn_length (arch);\n \n-  if (breakpoint_in_range_p (aspace, m_addr, len))\n-    {\n-      /* There's a breakpoint set in the scratch pad location range\n-\t (which is usually around the entry point).  We'd either\n-\t install it before resuming, which would overwrite/corrupt the\n-\t scratch pad, or if it was already inserted, this displaced\n-\t step would overwrite it.  The latter is OK in the sense that\n-\t we already assume that no thread is going to execute the code\n-\t in the scratch pad range (after initial startup) anyway, but\n-\t the former is unacceptable.  Simply punt and fallback to\n-\t stepping over this breakpoint in-line.  */\n-      displaced_debug_printf (\"breakpoint set in scratch pad.  \"\n-\t\t\t      \"Stepping over breakpoint in-line instead.\");\n+  /* Search for an unused buffer.  */\n+  displaced_step_buffer *buffer = nullptr;\n+  displaced_step_prepare_status fail_status\n+    = DISPLACED_STEP_PREPARE_STATUS_CANT;\n \n-      return DISPLACED_STEP_PREPARE_STATUS_CANT;\n+  for (displaced_step_buffer &candidate : m_buffers)\n+    {\n+      bool bp_in_range = breakpoint_in_range_p (aspace, candidate.addr, len);\n+      bool is_free = candidate.current_thread == nullptr;\n+\n+      if (!bp_in_range)\n+\t{\n+\t  if (is_free)\n+\t    {\n+\t      buffer = &candidate;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* This buffer would be suitable, but it's used right now.  */\n+\t      fail_status = DISPLACED_STEP_PREPARE_STATUS_UNAVAILABLE;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* There's a breakpoint set in the scratch pad location range\n+\t     (which is usually around the entry point).  We'd either\n+\t     install it before resuming, which would overwrite/corrupt the\n+\t     scratch pad, or if it was already inserted, this displaced\n+\t     step would overwrite it.  The latter is OK in the sense that\n+\t     we already assume that no thread is going to execute the code\n+\t     in the scratch pad range (after initial startup) anyway, but\n+\t     the former is unacceptable.  Simply punt and fallback to\n+\t     stepping over this breakpoint in-line.  */\n+\t  displaced_debug_printf (\"breakpoint set in displaced stepping \"\n+\t\t\t\t  \"buffer at %s, can't use.\",\n+\t\t\t\t  paddress (arch, candidate.addr));\n+\t}\n     }\n \n-  m_original_pc = regcache_read_pc (regcache);\n-  displaced_pc = m_addr;\n+  if (buffer == nullptr)\n+    return fail_status;\n+\n+  displaced_debug_printf (\"selected buffer at %s\",\n+\t\t\t  paddress (arch, buffer->addr));\n+\n+  /* Save the original PC of the thread.  */\n+  buffer->original_pc = regcache_read_pc (regcache);\n+\n+  /* Return displaced step buffer address to caller.  */\n+  displaced_pc = buffer->addr;\n \n   /* Save the original contents of the displaced stepping buffer.  */\n-  m_saved_copy.resize (len);\n+  buffer->saved_copy.resize (len);\n \n-  int status = target_read_memory (m_addr, m_saved_copy.data (), len);\n+  int status = target_read_memory (buffer->addr,\n+\t\t\t\t    buffer->saved_copy.data (), len);\n   if (status != 0)\n     throw_error (MEMORY_ERROR,\n \t\t _(\"Error accessing memory address %s (%s) for \"\n \t\t   \"displaced-stepping scratch space.\"),\n-\t\t paddress (arch, m_addr), safe_strerror (status));\n+\t\t paddress (arch, buffer->addr), safe_strerror (status));\n \n   displaced_debug_printf (\"saved %s: %s\",\n-\t\t\t  paddress (arch, m_addr),\n+\t\t\t  paddress (arch, buffer->addr),\n \t\t\t  displaced_step_dump_bytes\n-\t\t\t    (m_saved_copy.data (), len).c_str ());\n+\t\t\t  (buffer->saved_copy.data (), len).c_str ());\n \n   /* Save this in a local variable first, so it's released if code below\n      throws.  */\n   displaced_step_copy_insn_closure_up copy_insn_closure\n-    = gdbarch_displaced_step_copy_insn (arch, m_original_pc, m_addr, regcache);\n+    = gdbarch_displaced_step_copy_insn (arch, buffer->original_pc,\n+\t\t\t\t\tbuffer->addr, regcache);\n \n   if (copy_insn_closure == nullptr)\n     {\n       /* The architecture doesn't know how or want to displaced step\n-        this instruction or instruction sequence.  Fallback to\n-        stepping over the breakpoint in-line.  */\n+\t this instruction or instruction sequence.  Fallback to\n+\t stepping over the breakpoint in-line.  */\n       return DISPLACED_STEP_PREPARE_STATUS_CANT;\n     }\n \n   /* Resume execution at the copy.  */\n-  regcache_write_pc (regcache, m_addr);\n+  regcache_write_pc (regcache, buffer->addr);\n \n   /* This marks the buffer as being in use.  */\n-  m_current_thread = thread;\n+  buffer->current_thread = thread;\n \n   /* Save this, now that we know everything went fine.  */\n-  m_copy_insn_closure = std::move (copy_insn_closure);\n+  buffer->copy_insn_closure = std::move (copy_insn_closure);\n \n-  /* Tell infrun not to try preparing a displaced step again for this inferior.  */\n+  /* Tell infrun not to try preparing a displaced step again for this inferior if\n+     all buffers are taken.  */\n   thread->inf->displaced_step_state.unavailable = true;\n+  for (const displaced_step_buffer &buf : m_buffers)\n+    {\n+      if (buf.current_thread == nullptr)\n+\t{\n+\t  thread->inf->displaced_step_state.unavailable = false;\n+\t  break;\n+\t}\n+    }\n \n   return DISPLACED_STEP_PREPARE_STATUS_OK;\n }\n@@ -152,21 +191,34 @@ displaced_step_instruction_executed_successfully (gdbarch *arch,\n }\n \n displaced_step_finish_status\n-displaced_step_buffer::finish (gdbarch *arch, thread_info *thread,\n-\t\t\t       gdb_signal sig)\n+displaced_step_buffers::finish (gdbarch *arch, thread_info *thread,\n+\t\t\t\tgdb_signal sig)\n {\n   gdb_assert (thread->displaced_step_state.in_progress ());\n-  gdb_assert (thread == m_current_thread);\n+\n+  /* Find the buffer this thread was using.  */\n+  displaced_step_buffer *buffer = nullptr;\n+\n+  for (displaced_step_buffer &candidate : m_buffers)\n+    {\n+      if (candidate.current_thread == thread)\n+\t{\n+\t  buffer = &candidate;\n+\t  break;\n+\t}\n+    }\n+\n+  gdb_assert (buffer != nullptr);\n \n   /* Move this to a local variable so it's released in case something goes\n      wrong.  */\n   displaced_step_copy_insn_closure_up copy_insn_closure\n-    = std::move (m_copy_insn_closure);\n+    = std::move (buffer->copy_insn_closure);\n   gdb_assert (copy_insn_closure != nullptr);\n \n-  /* Reset M_CURRENT_THREAD immediately to mark the buffer as available, in case\n-     something goes wrong below.  */\n-  m_current_thread = nullptr;\n+  /* Reset BUFFER->CURRENT_THREAD immediately to mark the buffer as available,\n+     in case something goes wrong below.  */\n+  buffer->current_thread = nullptr;\n \n   /* Now that a buffer gets freed, tell infrun it can ask us to prepare a displaced\n      step again for this inferior.  Do that here in case something goes wrong\n@@ -175,12 +227,13 @@ displaced_step_buffer::finish (gdbarch *arch, thread_info *thread,\n \n   ULONGEST len = gdbarch_max_insn_length (arch);\n \n-  write_memory_ptid (thread->ptid, m_addr,\n-\t\t     m_saved_copy.data (), len);\n+  /* Restore memory of the buffer.  */\n+  write_memory_ptid (thread->ptid, buffer->addr,\n+\t\t     buffer->saved_copy.data (), len);\n \n   displaced_debug_printf (\"restored %s %s\",\n \t\t\t  target_pid_to_str (thread->ptid).c_str (),\n-\t\t\t  paddress (arch, m_addr));\n+\t\t\t  paddress (arch, buffer->addr));\n \n   regcache *rc = get_thread_regcache (thread);\n \n@@ -189,44 +242,51 @@ displaced_step_buffer::finish (gdbarch *arch, thread_info *thread,\n \n   if (instruction_executed_successfully)\n     {\n-      gdbarch_displaced_step_fixup (arch, copy_insn_closure.get (), m_original_pc,\n-\t\t\t\t    m_addr, rc);\n+      gdbarch_displaced_step_fixup (arch, copy_insn_closure.get (),\n+\t\t\t\t    buffer->original_pc,\n+\t\t\t\t    buffer->addr, rc);\n       return DISPLACED_STEP_FINISH_STATUS_OK;\n     }\n   else\n     {\n       /* Since the instruction didn't complete, all we can do is relocate the\n \t PC.  */\n       CORE_ADDR pc = regcache_read_pc (rc);\n-      pc = m_original_pc + (pc - m_addr);\n+      pc = buffer->original_pc + (pc - buffer->addr);\n       regcache_write_pc (rc, pc);\n       return DISPLACED_STEP_FINISH_STATUS_NOT_EXECUTED;\n     }\n }\n \n const displaced_step_copy_insn_closure *\n-displaced_step_buffer::copy_insn_closure_by_addr (CORE_ADDR addr)\n+displaced_step_buffers::copy_insn_closure_by_addr (CORE_ADDR addr)\n {\n-  if (addr == m_addr)\n-    return m_copy_insn_closure.get ();\n-  else\n-    return nullptr;\n+  for (const displaced_step_buffer &buffer : m_buffers)\n+    {\n+      if (addr == buffer.addr)\n+\treturn buffer.copy_insn_closure.get ();\n+    }\n+\n+  return nullptr;\n }\n \n void\n-displaced_step_buffer::restore_in_ptid (ptid_t ptid)\n+displaced_step_buffers::restore_in_ptid (ptid_t ptid)\n {\n-  if (m_current_thread != nullptr)\n+  for (const displaced_step_buffer &buffer : m_buffers)\n     {\n-      regcache *regcache = get_thread_regcache (m_current_thread);\n+      if (buffer.current_thread == nullptr)\n+\tcontinue;\n+\n+      regcache *regcache = get_thread_regcache (buffer.current_thread);\n       gdbarch *arch = regcache->arch ();\n       ULONGEST len = gdbarch_max_insn_length (arch);\n \n-      write_memory_ptid (ptid, m_addr, m_saved_copy.data (), len);\n+      write_memory_ptid (ptid, buffer.addr, buffer.saved_copy.data (), len);\n \n       displaced_debug_printf (\"restored in ptid %s %s\",\n \t\t\t      target_pid_to_str (ptid).c_str (),\n-\t\t\t      paddress (arch, m_addr));\n+\t\t\t      paddress (arch, buffer.addr));\n     }\n }\n "
    },
    {
      "sha": "d1a1cebb93e17623d93bea8ce481a6a9942dff97",
      "filename": "gdb/displaced-stepping.h",
      "status": "modified",
      "additions": 37,
      "deletions": 16,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/displaced-stepping.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/displaced-stepping.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/displaced-stepping.h?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -20,6 +20,7 @@\n #ifndef DISPLACED_STEPPING_H\n #define DISPLACED_STEPPING_H\n \n+#include \"gdbsupport/array-view.h\"\n #include \"gdbsupport/byte-vector.h\"\n \n struct gdbarch;\n@@ -154,13 +155,19 @@ struct displaced_step_thread_state\n   gdbarch *m_original_gdbarch = nullptr;\n };\n \n-/* Manage access to a single displaced stepping buffer.  */\n+/* Control access to multiple displaced stepping buffers at fixed addresses.  */\n \n-struct displaced_step_buffer\n+struct displaced_step_buffers\n {\n-  explicit displaced_step_buffer (CORE_ADDR buffer_addr)\n-    : m_addr (buffer_addr)\n-  {}\n+  explicit displaced_step_buffers (gdb::array_view<CORE_ADDR> buffer_addrs)\n+  {\n+    gdb_assert (buffer_addrs.size () > 0);\n+\n+    m_buffers.reserve (buffer_addrs.size ());\n+\n+    for (CORE_ADDR buffer_addr : buffer_addrs)\n+      m_buffers.emplace_back (buffer_addr);\n+  }\n \n   displaced_step_prepare_status prepare (thread_info *thread,\n \t\t\t\t\t CORE_ADDR &displaced_pc);\n@@ -174,21 +181,35 @@ struct displaced_step_buffer\n   void restore_in_ptid (ptid_t ptid);\n \n private:\n-  /* Original PC of the instruction being displaced-stepped in this buffer.  */\n-  CORE_ADDR m_original_pc = 0;\n \n-  /* Address of the buffer.  */\n-  const CORE_ADDR m_addr;\n+  /* State of a single buffer.  */\n+\n+  struct displaced_step_buffer\n+  {\n+    explicit displaced_step_buffer (CORE_ADDR addr)\n+      : addr (addr)\n+    {}\n+\n+    /* Address of the buffer.  */\n+    const CORE_ADDR addr;\n+\n+    /* The original PC of the instruction currently being stepped.  */\n+    CORE_ADDR original_pc = 0;\n+\n+    /* If set, the thread currently using the buffer.  If unset, the buffer is not\n+       used.  */\n+    thread_info *current_thread = nullptr;\n \n-  /* If set, the thread currently using the buffer.  */\n-  thread_info *m_current_thread = nullptr;\n+    /* Saved copy of the bytes in the displaced buffer, to be restored once the\n+       buffer is no longer used.  */\n+    gdb::byte_vector saved_copy;\n \n-  /* Saved contents of copy area.  */\n-  gdb::byte_vector m_saved_copy;\n+    /* Closure obtained from gdbarch_displaced_step_copy_insn, to be passed to\n+       gdbarch_displaced_step_fixup_insn.  */\n+    displaced_step_copy_insn_closure_up copy_insn_closure;\n+  };\n \n-  /* The closure provided gdbarch_displaced_step_copy_insn, to be used\n-     for post-step cleanup.  */\n-  displaced_step_copy_insn_closure_up m_copy_insn_closure;\n+  std::vector<displaced_step_buffer> m_buffers;\n };\n \n #endif /* DISPLACED_STEPPING_H */"
    },
    {
      "sha": "c5b20737654fda1caba21e1a2e14b2f0876d6b31",
      "filename": "gdb/frv-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/frv-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/frv-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frv-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -456,7 +456,7 @@ frv_linux_iterate_over_regset_sections (struct gdbarch *gdbarch,\n static void\n frv_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Set the sigtramp frame sniffer.  */\n   frame_unwind_append_unwinder (gdbarch, &frv_linux_sigtramp_frame_unwind); "
    },
    {
      "sha": "ce85f327d1e41ed2c359ae4b68b76e08baeae05f",
      "filename": "gdb/hppa-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/hppa-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/hppa-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -489,7 +489,7 @@ hppa_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* GNU/Linux is always ELF.  */\n   tdep->is_elf = 1;"
    },
    {
      "sha": "90ee30969aa1e3ef652b09cf4952d1b6c2e29411",
      "filename": "gdb/i386-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/i386-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/i386-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -832,7 +832,7 @@ i386_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   gdb_assert (tdesc_data);\n \n-  linux_init_abi (info, gdbarch, true);\n+  linux_init_abi (info, gdbarch, 1);\n \n   /* GNU/Linux uses ELF.  */\n   i386_elf_init_abi (info, gdbarch);"
    },
    {
      "sha": "3a69f758c11fb7006d7659fccbdea9a2469b654c",
      "filename": "gdb/ia64-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/ia64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/ia64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -223,7 +223,7 @@ ia64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   static const char *const stap_register_indirection_suffixes[] = { \"]\",\n \t\t\t\t\t\t\t\t    NULL };\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Set the method of obtaining the sigcontext addresses at which\n      registers are saved.  */"
    },
    {
      "sha": "5ae28d826c1a75d65c2e0ab40f414182a133d22b",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 36,
      "deletions": 18,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -166,9 +166,10 @@ enum\n static struct gdbarch_data *linux_gdbarch_data_handle;\n \n struct linux_gdbarch_data\n-  {\n-    struct type *siginfo_type;\n-  };\n+{\n+  struct type *siginfo_type;\n+  int num_disp_step_buffers;\n+};\n \n static void *\n init_linux_gdbarch_data (struct obstack *obstack)\n@@ -200,8 +201,8 @@ struct linux_info\n      if we tried looking it up but failed.  */\n   int vsyscall_range_p = 0;\n \n-  /* Inferior's displaced step buffer.  */\n-  gdb::optional<displaced_step_buffer> disp_step_buf;\n+  /* Inferior's displaced step buffers.  */\n+  gdb::optional<displaced_step_buffers> disp_step_bufs;\n };\n \n /* Per-inferior data key.  */\n@@ -2540,15 +2541,25 @@ linux_displaced_step_prepare (gdbarch *arch, thread_info *thread,\n {\n   linux_info *per_inferior = get_linux_inferior_data (thread->inf);\n \n-  if (!per_inferior->disp_step_buf.has_value ())\n+  if (!per_inferior->disp_step_bufs.has_value ())\n     {\n+      /* Figure out the location of the buffers.  They are contiguous, starting\n+\t at DISP_STEP_BUF_ADDR.  They are all of size BUF_LEN.  */\n       CORE_ADDR disp_step_buf_addr\n \t= linux_displaced_step_location (thread->inf->gdbarch);\n+      int buf_len = gdbarch_max_insn_length (arch);\n \n-      per_inferior->disp_step_buf.emplace (disp_step_buf_addr);\n+      linux_gdbarch_data *gdbarch_data = get_linux_gdbarch_data (arch);\n+      gdb_assert (gdbarch_data->num_disp_step_buffers > 0);\n+\n+      std::vector<CORE_ADDR> buffers;\n+      for (int i = 0; i < gdbarch_data->num_disp_step_buffers; i++)\n+\tbuffers.push_back (disp_step_buf_addr + i * buf_len);\n+\n+      per_inferior->disp_step_bufs.emplace (buffers);\n     }\n \n-  return per_inferior->disp_step_buf->prepare (thread, displaced_pc);\n+  return per_inferior->disp_step_bufs->prepare (thread, displaced_pc);\n }\n \n /* See linux-tdep.h.  */\n@@ -2558,9 +2569,9 @@ linux_displaced_step_finish (gdbarch *arch, thread_info *thread, gdb_signal sig)\n {\n   linux_info *per_inferior = get_linux_inferior_data (thread->inf);\n \n-  gdb_assert (per_inferior->disp_step_buf.has_value ());\n+  gdb_assert (per_inferior->disp_step_bufs.has_value ());\n \n-  return per_inferior->disp_step_buf->finish (arch, thread, sig);\n+  return per_inferior->disp_step_bufs->finish (arch, thread, sig);\n }\n \n /* See linux-tdep.h.  */\n@@ -2571,10 +2582,10 @@ linux_displaced_step_copy_insn_closure_by_addr (inferior *inf, CORE_ADDR addr)\n   linux_info *per_inferior = linux_inferior_data.get (inf);\n \n   if (per_inferior == nullptr\n-      || !per_inferior->disp_step_buf.has_value ())\n+      || !per_inferior->disp_step_bufs.has_value ())\n     return nullptr;\n \n-  return per_inferior->disp_step_buf->copy_insn_closure_by_addr (addr);\n+  return per_inferior->disp_step_bufs->copy_insn_closure_by_addr (addr);\n }\n \n /* See linux-tdep.h.  */\n@@ -2585,10 +2596,10 @@ linux_displaced_step_restore_all_in_ptid (inferior *parent_inf, ptid_t ptid)\n   linux_info *per_inferior = linux_inferior_data.get (parent_inf);\n \n   if (per_inferior == nullptr\n-      || !per_inferior->disp_step_buf.has_value ())\n+      || !per_inferior->disp_step_bufs.has_value ())\n     return;\n \n-  per_inferior->disp_step_buf->restore_in_ptid (ptid);\n+  per_inferior->disp_step_bufs->restore_in_ptid (ptid);\n }\n \n /* See linux-tdep.h.  */\n@@ -2636,15 +2647,22 @@ show_dump_excluded_mappings (struct ui_file *file, int from_tty,\n }\n \n /* To be called from the various GDB_OSABI_LINUX handlers for the\n-   various GNU/Linux architectures and machine types.  */\n+   various GNU/Linux architectures and machine types.\n+\n+   NUM_DISP_STEP_BUFFERS is the number of displaced step buffers to use.  If 0,\n+   displaced stepping is not supported. */\n \n void\n linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch,\n-\t\tbool supports_displaced_step)\n+\t\tint num_disp_step_buffers)\n {\n-  if (supports_displaced_step)\n+  if (num_disp_step_buffers > 0)\n     {\n-      set_gdbarch_displaced_step_prepare (gdbarch, linux_displaced_step_prepare);\n+      linux_gdbarch_data *gdbarch_data = get_linux_gdbarch_data (gdbarch);\n+      gdbarch_data->num_disp_step_buffers = num_disp_step_buffers;\n+\n+      set_gdbarch_displaced_step_prepare (gdbarch,\n+\t\t\t\t\t  linux_displaced_step_prepare);\n       set_gdbarch_displaced_step_finish (gdbarch, linux_displaced_step_finish);\n       set_gdbarch_displaced_step_copy_insn_closure_by_addr\n \t(gdbarch, linux_displaced_step_copy_insn_closure_by_addr);"
    },
    {
      "sha": "723eec3dc10ba9e1d7eb9f0f637e4cfc2b5a69b4",
      "filename": "gdb/linux-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/linux-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/linux-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.h?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -82,7 +82,7 @@ extern void linux_displaced_step_restore_all_in_ptid (inferior *parent_inf,\n \t\t\t\t\t\t      ptid_t ptid);\n \n extern void linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch,\n-\t\t\t    bool supports_displaced_step);\n+\t\t\t    int num_disp_step_buffers);\n \n extern int linux_is_uclinux (void);\n "
    },
    {
      "sha": "0a1ff780d8c5012e8aa913d80ff77f26012797b2",
      "filename": "gdb/m32r-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/m32r-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/m32r-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m32r-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -449,7 +449,7 @@ static void\n m32r_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Since EVB register is not available for native debug, we reduce\n      the number of registers.  */"
    },
    {
      "sha": "f057915965f97609afa50856443756857d300614",
      "filename": "gdb/m68k-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/m68k-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/m68k-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m68k-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -385,7 +385,7 @@ m68k_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   tdep->jb_pc = M68K_LINUX_JB_PC;\n   tdep->jb_elt_size = M68K_LINUX_JB_ELEMENT_SIZE;"
    },
    {
      "sha": "54f89ec037779fdde37ea2bcb90247a9398592dd",
      "filename": "gdb/microblaze-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/microblaze-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/microblaze-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/microblaze-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -117,7 +117,7 @@ static void\n microblaze_linux_init_abi (struct gdbarch_info info,\n \t\t\t   struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   set_gdbarch_memory_remove_breakpoint (gdbarch,\n \t\t\t\t\tmicroblaze_linux_memory_remove_breakpoint);"
    },
    {
      "sha": "ed95c22008412ba95f7c520dd6359ee61908442d",
      "filename": "gdb/mips-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/mips-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/mips-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1531,7 +1531,7 @@ mips_linux_init_abi (struct gdbarch_info info,\n   enum mips_abi abi = mips_abi (gdbarch);\n   struct tdesc_arch_data *tdesc_data = info.tdesc_data;\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Get the syscall number from the arch's register.  */\n   set_gdbarch_get_syscall_number (gdbarch, mips_linux_get_syscall_number);"
    },
    {
      "sha": "f7586bf3eae98e8a0eb3363bed72c2c0dadc8460",
      "filename": "gdb/mn10300-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/mn10300-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/mn10300-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mn10300-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -704,7 +704,7 @@ am33_linux_sigframe_cache_init (const struct tramp_frame *self,\n static void\n am33_linux_init_osabi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   set_gdbarch_iterate_over_regset_sections\n     (gdbarch, am33_iterate_over_regset_sections);"
    },
    {
      "sha": "0a28c9cca6d6faefd78f2d636e45acbca849c191",
      "filename": "gdb/nios2-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/nios2-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/nios2-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nios2-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -219,7 +219,7 @@ nios2_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Shared library handling.  */\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);"
    },
    {
      "sha": "2779fd0d1e61b73be3787c235ae741c0f06aa1e9",
      "filename": "gdb/or1k-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/or1k-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/or1k-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -140,7 +140,7 @@ or1k_linux_sigframe_init (const struct tramp_frame *self,\n static void\n or1k_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   set_solib_svr4_fetch_link_map_offsets (gdbarch,\n \t\t\t\t\t svr4_ilp32_fetch_link_map_offsets);"
    },
    {
      "sha": "57bdd2d7a7235c20f74466be0d708783c61ec1de",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1993,7 +1993,7 @@ ppc_linux_init_abi (struct gdbarch_info info,\n   static const char *const stap_register_indirection_suffixes[] = { \")\",\n \t\t\t\t\t\t\t\t    NULL };\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* PPC GNU/Linux uses either 64-bit or 128-bit long doubles; where\n      128-bit, they can be either IBM long double or IEEE quad long double."
    },
    {
      "sha": "623c7d9382cce6dbb3199b9b8049c796bbd2a5fc",
      "filename": "gdb/riscv-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/riscv-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/riscv-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -159,7 +159,7 @@ riscv_linux_sigframe_init (const struct tramp_frame *self,\n static void\n riscv_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   set_gdbarch_software_single_step (gdbarch, riscv_software_single_step);\n "
    },
    {
      "sha": "235abd873f7288d715ec4c56df6deb4dbc862157",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -160,7 +160,7 @@ struct ppc_inferior_data\n   /* This is an optional in case we add more fields to ppc_inferior_data, we\n      don't want it instantiated as soon as we get the ppc_inferior_data for an\n      inferior.  */\n-  gdb::optional<displaced_step_buffer> disp_step_buf;\n+  gdb::optional<displaced_step_buffers> disp_step_buf;\n };\n \n static inferior_key<ppc_inferior_data> ppc_inferior_data_key;"
    },
    {
      "sha": "8588d046bd6b15fa8f60f6096c0c796b8a271e04",
      "filename": "gdb/s390-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/s390-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/s390-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -1119,7 +1119,7 @@ s390_linux_init_abi_any (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   tdep->s390_syscall_record = s390_linux_syscall_record;\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Register handling.  */\n   set_gdbarch_core_read_description (gdbarch, s390_core_read_description);"
    },
    {
      "sha": "84bcd3000694af295287911ebd20a452b8cc9698",
      "filename": "gdb/sh-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/sh-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/sh-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sh-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -184,7 +184,7 @@ static struct tramp_frame sh_linux_rt_sigreturn_tramp_frame = {\n static void\n sh_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* GNU/Linux uses SVR4-style shared libraries.  */\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);"
    },
    {
      "sha": "71759e19fa825768fd194b65381c5823fd9400c1",
      "filename": "gdb/sparc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/sparc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/sparc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -422,7 +422,7 @@ sparc32_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   tdep->gregset = &sparc32_linux_gregset;\n   tdep->sizeof_gregset = 152;"
    },
    {
      "sha": "fe1b276bc4e83f9a1a68fe56c8f21b35dcd39484",
      "filename": "gdb/sparc64-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/sparc64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/sparc64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -365,7 +365,7 @@ sparc64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   tdep->gregset = &sparc64_linux_gregset;\n   tdep->sizeof_gregset = 288;"
    },
    {
      "sha": "7820e2da5a0026014cce96660ef9b598b35f7cb0",
      "filename": "gdb/tic6x-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/tic6x-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/tic6x-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tic6x-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -167,7 +167,7 @@ tic6x_uclinux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   /* Shared library handling.  */\n   set_solib_ops (gdbarch, &dsbt_so_ops);"
    },
    {
      "sha": "37c0790a19098c694c9ab0da5046b22e5cc8aa9b",
      "filename": "gdb/tilegx-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/tilegx-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/tilegx-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tilegx-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -111,7 +111,7 @@ tilegx_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   int arch_size = gdbarch_addr_bit (gdbarch);\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   tramp_frame_prepend_unwinder (gdbarch, &tilegx_linux_rt_sigframe);\n "
    },
    {
      "sha": "fccac7d49fc3b0e8900bafd38c074df8ce2daf07",
      "filename": "gdb/xtensa-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480af54cf68b5bb079f070b587f95620d114e87c/gdb/xtensa-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480af54cf68b5bb079f070b587f95620d114e87c/gdb/xtensa-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xtensa-linux-tdep.c?ref=480af54cf68b5bb079f070b587f95620d114e87c",
      "patch": "@@ -110,7 +110,7 @@ xtensa_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n       set_gdbarch_num_pseudo_regs (gdbarch, tdep->num_pseudo_regs);\n     }\n \n-  linux_init_abi (info, gdbarch, false);\n+  linux_init_abi (info, gdbarch, 0);\n \n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, svr4_ilp32_fetch_link_map_offsets);"
    }
  ]
}