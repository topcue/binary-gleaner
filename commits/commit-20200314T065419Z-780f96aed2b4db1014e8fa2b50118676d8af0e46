{
  "sha": "780f96aed2b4db1014e8fa2b50118676d8af0e46",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzgwZjk2YWVkMmI0ZGIxMDE0ZThmYTJiNTAxMTg2NzZkOGFmMGU0Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-14T01:20:22Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-14T06:54:19Z"
    },
    "message": "readelf large memory allocation\n\n\t* elfcomm.h (setup_archive): Update prototype.\n\t* elfcomm.c (setup_archive): Add file_size parameter and sanity\n\tcheck longnames_size.\n\t(setup_nested_archive): Get file size and pass to setup_archive.\n\t* elfedit.c (process_archive): Likewise.\n\t* readelf.c (process_archive): Pass filedata->file_size to\n\tsetup_archive.",
    "tree": {
      "sha": "06cceab0c41b0978c51811e1c280733045ee1488",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/06cceab0c41b0978c51811e1c280733045ee1488"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/780f96aed2b4db1014e8fa2b50118676d8af0e46",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/780f96aed2b4db1014e8fa2b50118676d8af0e46",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/780f96aed2b4db1014e8fa2b50118676d8af0e46",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/780f96aed2b4db1014e8fa2b50118676d8af0e46/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f761cb13a903da6a5a1b3f9a5cb984600124ac31",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f761cb13a903da6a5a1b3f9a5cb984600124ac31",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f761cb13a903da6a5a1b3f9a5cb984600124ac31"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 25,
    "deletions": 7
  },
  "files": [
    {
      "sha": "5101b8c99120e1635f180f6f50910cdb87fc9d62",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=780f96aed2b4db1014e8fa2b50118676d8af0e46",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfcomm.h (setup_archive): Update prototype.\n+\t* elfcomm.c (setup_archive): Add file_size parameter and sanity\n+\tcheck longnames_size.\n+\t(setup_nested_archive): Get file size and pass to setup_archive.\n+\t* elfedit.c (process_archive): Likewise.\n+\t* readelf.c (process_archive): Pass filedata->file_size to\n+\tsetup_archive.\n+\n 2020-03-14  Alan Modra  <amodra@gmail.com>\n \n \t* readelf.c (dump_section_as_strings): Free memory on error exit."
    },
    {
      "sha": "e5c6a32c6da8bb6be398b43f68c39592fb193c75",
      "filename": "binutils/elfcomm.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/elfcomm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/elfcomm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.c?ref=780f96aed2b4db1014e8fa2b50118676d8af0e46",
      "patch": "@@ -607,8 +607,8 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n \n int\n setup_archive (struct archive_info *arch, const char *file_name,\n-\t       FILE *file, bfd_boolean is_thin_archive,\n-\t       bfd_boolean read_symbols)\n+\t       FILE *file, bfd_size_type file_size,\n+\t       bfd_boolean is_thin_archive, bfd_boolean read_symbols)\n {\n   size_t got;\n \n@@ -671,7 +671,8 @@ setup_archive (struct archive_info *arch, const char *file_name,\n \t  return 1;\n \t}\n       /* PR 17531: file: 639d6a26.  */\n-      if ((signed long) arch->longnames_size < 0)\n+      if (arch->longnames_size > file_size\n+\t  || (signed long) arch->longnames_size < 0)\n \t{\n \t  error (_(\"%s: long name table is too big, (size = 0x%lx)\\n\"),\n \t\t file_name, arch->longnames_size);\n@@ -713,6 +714,7 @@ setup_nested_archive (struct archive_info *nested_arch,\n \t\t      const char *member_file_name)\n {\n   FILE * member_file;\n+  struct stat statbuf;\n \n   /* Have we already setup this archive?  */\n   if (nested_arch->file_name != NULL\n@@ -727,8 +729,10 @@ setup_nested_archive (struct archive_info *nested_arch,\n   member_file = fopen (member_file_name, \"rb\");\n   if (member_file == NULL)\n     return 1;\n+  if (fstat (fileno (member_file), &statbuf) < 0)\n+    return 1;\n   return setup_archive (nested_arch, member_file_name, member_file,\n-\t\t\tFALSE, FALSE);\n+\t\t\tstatbuf.st_size, FALSE, FALSE);\n }\n \n /* Release the memory used for the archive information.  */"
    },
    {
      "sha": "731d3dbd346caba5169ebbbff637c1a078a847e2",
      "filename": "binutils/elfcomm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/elfcomm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/elfcomm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.h?ref=780f96aed2b4db1014e8fa2b50118676d8af0e46",
      "patch": "@@ -74,7 +74,7 @@ extern char *adjust_relative_path (const char *, const char *, unsigned long);\n \n /* Read the symbol table and long-name table from an archive.  */\n extern int setup_archive (struct archive_info *, const char *, FILE *,\n-\t\t\t  bfd_boolean, bfd_boolean);\n+\t\t\t  bfd_size_type, bfd_boolean, bfd_boolean);\n \n /* Open and setup a nested archive, if not already open.  */\n extern int setup_nested_archive (struct archive_info *, const char *);"
    },
    {
      "sha": "d0e4e95f4d6ebdfbb88cba87434306ccd8a420bd",
      "filename": "binutils/elfedit.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/elfedit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/elfedit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfedit.c?ref=780f96aed2b4db1014e8fa2b50118676d8af0e46",
      "patch": "@@ -541,6 +541,7 @@ process_archive (const char * file_name, FILE * file,\n   struct archive_info nested_arch;\n   size_t got;\n   int ret;\n+  struct stat statbuf;\n \n   /* The ARCH structure is used to hold information about this archive.  */\n   arch.file_name = NULL;\n@@ -558,7 +559,9 @@ process_archive (const char * file_name, FILE * file,\n   nested_arch.sym_table = NULL;\n   nested_arch.longnames = NULL;\n \n-  if (setup_archive (&arch, file_name, file, is_thin_archive, FALSE) != 0)\n+  if (fstat (fileno (file), &statbuf) < 0\n+      || setup_archive (&arch, file_name, file, statbuf.st_size,\n+\t\t\tis_thin_archive, FALSE) != 0)\n     {\n       ret = 1;\n       goto out;"
    },
    {
      "sha": "0f8a0809c556e99d80a836a08f406369878b15fa",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/780f96aed2b4db1014e8fa2b50118676d8af0e46/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=780f96aed2b4db1014e8fa2b50118676d8af0e46",
      "patch": "@@ -20247,7 +20247,8 @@ process_archive (Filedata * filedata, bfd_boolean is_thin_archive)\n   nested_arch.longnames = NULL;\n \n   if (setup_archive (&arch, filedata->file_name, filedata->handle,\n-\t\t     is_thin_archive, do_archive_index) != 0)\n+\t\t     filedata->file_size, is_thin_archive,\n+\t\t     do_archive_index) != 0)\n     {\n       ret = FALSE;\n       goto out;"
    }
  ]
}