{
  "sha": "b73715df01e6e9b3de5a49cd7bf4170deef48461",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjczNzE1ZGYwMWU2ZTliM2RlNWE0OWNkN2JmNDE3MGRlZWY0ODQ2MQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-04-18T16:05:43Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-04-18T16:05:43Z"
    },
    "message": "[gdb] Handle vfork in thread with follow-fork-mode child\n\nWhen debugging any of the testcases added by this commit, which do a\nvfork in a thread with \"set follow-fork-mode child\" + \"set\ndetach-on-fork on\", we run into this assertion:\n\n...\nsrc/gdb/nat/x86-linux-dregs.c:146: internal-error: \\\n  void x86_linux_update_debug_registers(lwp_info*): \\\n  Assertion `lwp_is_stopped (lwp)' failed.\n...\n\nThe assert is caused by the following: the vfork-child exit or exec\nevent is handled by handle_vfork_child_exec_or_exit, which calls\ntarget_detach to detach from the vfork parent.  During target_detach\nwe call linux_nat_target::detach, which:\n\n#1 - stops all the threads\n#2 - waits for all the threads to be stopped\n#3 - detaches all the threads\n\nHowever, during the second step we run into this code in\nstop_wait_callback:\n\n...\n  /* If this is a vfork parent, bail out, it is not going to report\n     any SIGSTOP until the vfork is done with.  */\n  if (inf->vfork_child != NULL)\n    return 0;\n...\n\nand we don't wait for the threads to be stopped, which results in this\nassert in x86_linux_update_debug_registers triggering during the third\nstep:\n\n...\n  gdb_assert (lwp_is_stopped (lwp));\n...\n\nThe fix is to reset the vfork parent's vfork_child field before\ncalling target_detach in handle_vfork_child_exec_or_exit.  There's\nalready similar code for the other paths handled by\nhandle_vfork_child_exec_or_exit, so this commit refactors the code a\nbit so that all paths share the same code.\n\nThe new tests cover both a vfork child exiting, and a vfork child\nexecing, since both cases would trigger the assertion.\n\nThe new testcases also exercise following the vfork children with \"set\ndetach-on-fork off\", since it doesn't seem to be tested anywhere.\n\nTested on x86_64-linux, using native and native-gdbserver.\n\ngdb/ChangeLog:\n2019-04-18  Tom de Vries  <tdevries@suse.de>\n\t    Pedro Alves  <palves@redhat.com>\n\n\tPR gdb/24454\n\t* infrun.c (handle_vfork_child_exec_or_exit): Reset vfork parent's\n\tvfork_child field before calling target_detach.\n\ngdb/testsuite/ChangeLog:\n2019-04-18  Tom de Vries  <tdevries@suse.de>\n\t    Pedro Alves  <palves@redhat.com>\n\n\tPR gdb/24454\n\t* gdb.threads/vfork-follow-child-exec.c: New file.\n\t* gdb.threads/vfork-follow-child-exec.exp: New file.\n\t* gdb.threads/vfork-follow-child-exit.c: New file.\n\t* gdb.threads/vfork-follow-child-exit.exp: New file.",
    "tree": {
      "sha": "455f78a094cce44476c92fbde678b10bccbddcc3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/455f78a094cce44476c92fbde678b10bccbddcc3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b73715df01e6e9b3de5a49cd7bf4170deef48461",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b73715df01e6e9b3de5a49cd7bf4170deef48461",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b73715df01e6e9b3de5a49cd7bf4170deef48461",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b73715df01e6e9b3de5a49cd7bf4170deef48461/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5d5b0bd35f1f8b8484349c3ec51aa8e19a1627cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d5b0bd35f1f8b8484349c3ec51aa8e19a1627cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5d5b0bd35f1f8b8484349c3ec51aa8e19a1627cf"
    }
  ],
  "stats": {
    "total": 282,
    "additions": 265,
    "deletions": 17
  },
  "files": [
    {
      "sha": "37df561de0b6089a3678cc7091389652a3ff38dd",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 14,
      "deletions": 17,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=b73715df01e6e9b3de5a49cd7bf4170deef48461",
      "patch": "@@ -915,18 +915,22 @@ handle_vfork_child_exec_or_exit (int exec)\n       int resume_parent = -1;\n \n       /* This exec or exit marks the end of the shared memory region\n-\t between the parent and the child.  If the user wanted to\n-\t detach from the parent, now is the time.  */\n+\t between the parent and the child.  Break the bonds.  */\n+      inferior *vfork_parent = inf->vfork_parent;\n+      inf->vfork_parent->vfork_child = NULL;\n+      inf->vfork_parent = NULL;\n \n-      if (inf->vfork_parent->pending_detach)\n+      /* If the user wanted to detach from the parent, now is the\n+\t time.  */\n+      if (vfork_parent->pending_detach)\n \t{\n \t  struct thread_info *tp;\n \t  struct program_space *pspace;\n \t  struct address_space *aspace;\n \n \t  /* follow-fork child, detach-on-fork on.  */\n \n-\t  inf->vfork_parent->pending_detach = 0;\n+\t  vfork_parent->pending_detach = 0;\n \n \t  gdb::optional<scoped_restore_exited_inferior>\n \t    maybe_restore_inferior;\n@@ -941,7 +945,7 @@ handle_vfork_child_exec_or_exit (int exec)\n \t    maybe_restore_thread.emplace ();\n \n \t  /* We're letting loose of the parent.  */\n-\t  tp = any_live_thread_of_inferior (inf->vfork_parent);\n+\t  tp = any_live_thread_of_inferior (vfork_parent);\n \t  switch_to_thread (tp);\n \n \t  /* We're about to detach from the parent, which implicitly\n@@ -964,7 +968,7 @@ handle_vfork_child_exec_or_exit (int exec)\n \t  if (print_inferior_events)\n \t    {\n \t      std::string pidstr\n-\t\t= target_pid_to_str (ptid_t (inf->vfork_parent->pid));\n+\t\t= target_pid_to_str (ptid_t (vfork_parent->pid));\n \n \t      target_terminal::ours_for_output ();\n \n@@ -982,7 +986,7 @@ handle_vfork_child_exec_or_exit (int exec)\n \t\t}\n \t    }\n \n-\t  target_detach (inf->vfork_parent, 0);\n+\t  target_detach (vfork_parent, 0);\n \n \t  /* Put it back.  */\n \t  inf->pspace = pspace;\n@@ -997,10 +1001,7 @@ handle_vfork_child_exec_or_exit (int exec)\n \t  inf->removable = 1;\n \t  set_current_program_space (inf->pspace);\n \n-\t  resume_parent = inf->vfork_parent->pid;\n-\n-\t  /* Break the bonds.  */\n-\t  inf->vfork_parent->vfork_child = NULL;\n+\t  resume_parent = vfork_parent->pid;\n \t}\n       else\n \t{\n@@ -1030,17 +1031,13 @@ handle_vfork_child_exec_or_exit (int exec)\n \t  set_current_program_space (pspace);\n \t  inf->removable = 1;\n \t  inf->symfile_flags = SYMFILE_NO_READ;\n-\t  clone_program_space (pspace, inf->vfork_parent->pspace);\n+\t  clone_program_space (pspace, vfork_parent->pspace);\n \t  inf->pspace = pspace;\n \t  inf->aspace = pspace->aspace;\n \n-\t  resume_parent = inf->vfork_parent->pid;\n-\t  /* Break the bonds.  */\n-\t  inf->vfork_parent->vfork_child = NULL;\n+\t  resume_parent = vfork_parent->pid;\n \t}\n \n-      inf->vfork_parent = NULL;\n-\n       gdb_assert (current_program_space == inf->pspace);\n \n       if (non_stop && resume_parent != -1)"
    },
    {
      "sha": "bdabbba8d6a7e690dd8942754bb3a28e40b821fa",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b73715df01e6e9b3de5a49cd7bf4170deef48461",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-18  Tom de Vries  <tdevries@suse.de>\n+\t    Pedro Alves  <palves@redhat.com>\n+\n+\tPR gdb/24454\n+\t* gdb.threads/vfork-follow-child-exec.c: New file.\n+\t* gdb.threads/vfork-follow-child-exec.exp: New file.\n+\t* gdb.threads/vfork-follow-child-exit.c: New file.\n+\t* gdb.threads/vfork-follow-child-exit.exp: New file.\n+\n 2019-04-15  Leszek Swirski  <leszeks@google.com>\n \n \t* gdb.arch/amd64-eval.cc: New file."
    },
    {
      "sha": "80632d1772f96e09b40d729df0b6cc0fd6eae9eb",
      "filename": "gdb/testsuite/gdb.threads/vfork-follow-child-exec.c",
      "status": "added",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/vfork-follow-child-exec.c?ref=b73715df01e6e9b3de5a49cd7bf4170deef48461",
      "patch": "@@ -0,0 +1,66 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <pthread.h>\n+#include <string.h>\n+#include <stdlib.h>\n+\n+static char *program_name;\n+\n+static void *\n+f (void *arg)\n+{\n+  int res = vfork ();\n+\n+  if (res == -1)\n+    {\n+      perror (\"vfork\");\n+      return NULL;\n+    }\n+  else if (res == 0)\n+    {\n+      /* Child.  */\n+      execl (program_name, program_name, \"1\", NULL);\n+      perror (\"exec\");\n+      abort ();\n+    }\n+  else\n+    {\n+      /* Parent.  */\n+      return NULL;\n+    }\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  pthread_t tid;\n+\n+  if (argc > 1)\n+    {\n+      /* Getting here via execl.  */\n+      return 0;\n+    }\n+\n+  program_name = argv[0];\n+\n+  pthread_create (&tid, NULL, f, NULL);\n+  pthread_join (tid, NULL);\n+  return 0;\n+}"
    },
    {
      "sha": "5a28715fa0d1af7f22d525590345f915b9f63425",
      "filename": "gdb/testsuite/gdb.threads/vfork-follow-child-exec.exp",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exec.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exec.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/vfork-follow-child-exec.exp?ref=b73715df01e6e9b3de5a49cd7bf4170deef48461",
      "patch": "@@ -0,0 +1,64 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+# Test following a vfork child that execs, when the vfork parent is a\n+# threaded program, and it's a non-main thread that vforks.\n+\n+standard_testfile\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile {debug pthreads}]} {\n+    return -1\n+}\n+\n+# DETACH indicates whether \"set detach-on-fork\" is enabled.  It is\n+# either \"on\" or \"off\".\n+\n+proc test_vfork {detach} {\n+    global binfile\n+\n+    clean_restart $binfile\n+\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn 0\n+    }\n+\n+    delete_breakpoints\n+\n+    gdb_test_no_output \"set follow-fork-mode child\"\n+    gdb_test_no_output \"set detach-on-fork $detach\"\n+\n+    if {$detach == \"off\"} {\n+\tgdb_test \"continue\" \\\n+\t    [multi_line \\\n+\t\t \"Attaching after .* vfork to child .*\" \\\n+\t\t \".*New inferior 2 .*\" \\\n+\t\t \".* is executing new program: .*\" \\\n+\t\t \".*Inferior 2 .* exited normally.*\"]\n+    } else {\n+\tgdb_test \"continue\" \\\n+\t    [multi_line \\\n+\t\t \"Attaching after .* vfork to child .*\" \\\n+\t\t \".*New inferior 2 .*\" \\\n+\t\t \".*Detaching vfork parent process .* after child exec.*\" \\\n+\t\t \".*Inferior 1 .* detached.*\" \\\n+\t\t \".*is executing new program: .*\" \\\n+\t\t \".*Inferior 2 .*exited normally.*\"]\n+    }\n+}\n+\n+foreach_with_prefix detach-on-fork {\"off\" \"on\"} {\n+    test_vfork ${detach-on-fork}\n+}"
    },
    {
      "sha": "6ae254cce96f36afa8fee7a588383e5977f1f2ad",
      "filename": "gdb/testsuite/gdb.threads/vfork-follow-child-exit.c",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/vfork-follow-child-exit.c?ref=b73715df01e6e9b3de5a49cd7bf4170deef48461",
      "patch": "@@ -0,0 +1,52 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <pthread.h>\n+\n+static void *\n+f (void *arg)\n+{\n+  int res = vfork ();\n+\n+  if (res == -1)\n+    {\n+      perror (\"vfork\");\n+      return NULL;\n+    }\n+  else if (res == 0)\n+    {\n+      /* Child.  */\n+      _exit (0);\n+    }\n+  else\n+    {\n+      /* Parent.  */\n+      return NULL;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  pthread_t tid;\n+\n+  pthread_create (&tid, NULL, f, NULL);\n+  pthread_join (tid, NULL);\n+  return 0;\n+}"
    },
    {
      "sha": "f07215d41c6316429ad4c7b330431e0ca6707829",
      "filename": "gdb/testsuite/gdb.threads/vfork-follow-child-exit.exp",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b73715df01e6e9b3de5a49cd7bf4170deef48461/gdb/testsuite/gdb.threads/vfork-follow-child-exit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/vfork-follow-child-exit.exp?ref=b73715df01e6e9b3de5a49cd7bf4170deef48461",
      "patch": "@@ -0,0 +1,60 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+# Test following a vfork child that exits, when the vfork parent is a\n+# threaded program, and it's a non-main thread that vforks.\n+\n+standard_testfile\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile {debug pthreads}]} {\n+    return -1\n+}\n+\n+# DETACH indicates whether \"set detach-on-fork\" is enabled.  It is\n+# either \"on\" or \"off\".\n+\n+proc test_vfork {detach} {\n+    global binfile\n+\n+    clean_restart $binfile\n+\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn 0\n+    }\n+\n+    gdb_test_no_output \"set follow-fork-mode child\"\n+    gdb_test_no_output \"set detach-on-fork $detach\"\n+\n+    if {$detach == \"off\"} {\n+\tgdb_test \"continue\" \\\n+\t    [multi_line \\\n+\t\t \"Attaching after .* vfork to child .*\" \\\n+\t\t \".*New inferior 2 .*\" \\\n+\t\t \".*Inferior 2 .*exited normally.*\"]\n+    } else {\n+\tgdb_test \"continue\" \\\n+\t    [multi_line \\\n+\t\t \"Attaching after .* vfork to child .*\" \\\n+\t\t \".*New inferior 2 .*\" \\\n+\t\t \".*Detaching vfork parent process .* after child exit.*\" \\\n+\t\t \".*Inferior 1 .* detached.*\" \\\n+\t\t \".*Inferior 2 .*exited normally.*\"]\n+    }\n+}\n+\n+foreach_with_prefix detach-on-fork {\"off\" \"on\"} {\n+    test_vfork ${detach-on-fork}\n+}"
    }
  ]
}