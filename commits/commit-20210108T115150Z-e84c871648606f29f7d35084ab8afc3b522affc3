{
  "sha": "e84c871648606f29f7d35084ab8afc3b522affc3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTg0Yzg3MTY0ODYwNmYyOWY3ZDM1MDg0YWI4YWZjM2I1MjJhZmZjMw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-01-08T11:51:50Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-01-08T11:51:50Z"
    },
    "message": "Fix places in the AArch64 opcodes library code where a call to assert() has side effects.\n\n\tPR 27129\n\t* aarch64-dis.c (determine_disassembling_preference): Move call to\n\taarch64_match_operands_constraint outside of the assertion.\n\t* aarch64-asm.c (aarch64_ins_limm_1): Remove call to assert.\n\tReplace with a return of FALSE.",
    "tree": {
      "sha": "90e2f5e816d9e038ec9b5e8f561f20297b360a4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/90e2f5e816d9e038ec9b5e8f561f20297b360a4c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e84c871648606f29f7d35084ab8afc3b522affc3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e84c871648606f29f7d35084ab8afc3b522affc3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e84c871648606f29f7d35084ab8afc3b522affc3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e84c871648606f29f7d35084ab8afc3b522affc3/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb932b57cbf99d01145cb4b5c0c64da9157c7f73",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb932b57cbf99d01145cb4b5c0c64da9157c7f73",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fb932b57cbf99d01145cb4b5c0c64da9157c7f73"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 16,
    "deletions": 7
  },
  "files": [
    {
      "sha": "8b25c41a843d01d060ab24ad2f61f1d02d0b879f",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e84c871648606f29f7d35084ab8afc3b522affc3/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e84c871648606f29f7d35084ab8afc3b522affc3/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e84c871648606f29f7d35084ab8afc3b522affc3",
      "patch": "@@ -1,5 +1,11 @@\n 2021-01-08  Nick Clifton  <nickc@redhat.com>\n \n+\tPR 27129\n+\t* aarch64-dis.c (determine_disassembling_preference): Move call to\n+\taarch64_match_operands_constraint outside of the assertion.\n+\t* aarch64-asm.c (aarch64_ins_limm_1): Remove call to assert.\n+\tReplace with a return of FALSE.\n+\n \tPR 27139\n \t* aarch64-opc.c (aarch64_sys_regs): Treat id_aa64mmfr2_el1 as a\n \tcore system register."
    },
    {
      "sha": "eae652e27146e5926fa8071d3869a9386ad22228",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e84c871648606f29f7d35084ab8afc3b522affc3/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e84c871648606f29f7d35084ab8afc3b522affc3/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=e84c871648606f29f7d35084ab8afc3b522affc3",
      "patch": "@@ -545,18 +545,19 @@ aarch64_ins_limm_1 (const aarch64_operand *self,\n \t\t    const aarch64_inst *inst, bfd_boolean invert_p,\n \t\t    aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n {\n+  bfd_boolean res;\n   aarch64_insn value;\n   uint64_t imm = info->imm.value;\n   int esize = aarch64_get_qualifier_esize (inst->operands[0].qualifier);\n \n   if (invert_p)\n     imm = ~imm;\n-  /* The constraint check should have guaranteed this wouldn't happen.  */\n-  assert (aarch64_logical_immediate_p (imm, esize, &value));\n-\n-  insert_fields (code, value, 0, 3, self->fields[2], self->fields[1],\n-\t\t self->fields[0]);\n-  return TRUE;\n+  /* The constraint check should guarantee that this will work.  */\n+  res = aarch64_logical_immediate_p (imm, esize, &value);\n+  if (res)\n+    insert_fields (code, value, 0, 3, self->fields[2], self->fields[1],\n+\t\t   self->fields[0]);\n+  return res;\n }\n \n /* Insert logical/bitmask immediate for e.g. the last operand in"
    },
    {
      "sha": "19482f729ab77329b97d8a82803c63a4bdc16b3b",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e84c871648606f29f7d35084ab8afc3b522affc3/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e84c871648606f29f7d35084ab8afc3b522affc3/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=e84c871648606f29f7d35084ab8afc3b522affc3",
      "patch": "@@ -2729,8 +2729,10 @@ determine_disassembling_preference (struct aarch64_inst *inst,\n \t     successfully converted to the form of ALIAS.  */\n \t  if (convert_to_alias (&copy, alias) == 1)\n \t    {\n+\t      int res;\n \t      aarch64_replace_opcode (&copy, alias);\n-\t      assert (aarch64_match_operands_constraint (&copy, NULL));\n+\t      res = aarch64_match_operands_constraint (&copy, NULL);\n+\t      assert (res == 1);\n \t      DEBUG_TRACE (\"succeed with %s via conversion\", alias->name);\n \t      memcpy (inst, &copy, sizeof (aarch64_inst));\n \t      return;"
    }
  ]
}