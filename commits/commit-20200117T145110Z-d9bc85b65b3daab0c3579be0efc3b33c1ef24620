{
  "sha": "d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDliYzg1YjY1YjNkYWFiMGMzNTc5YmUwZWZjM2IzM2MxZWYyNDYyMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:51:10Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:51:10Z"
    },
    "message": "gdb: remove use of iterate_over_inferiors in py-inferior.c\n\nUse range-based for instead of iterate_over_inferiors in one spot in the Python\ncode.\n\ngdb/ChangeLog:\n\n\t* python/py-inferior.c (build_inferior_list): Remove.\n\t(gdbpy_ref): Use range-based for loop to iterate over inferiors.",
    "tree": {
      "sha": "3ecf1d6a88eab1230f78ff6926727e5389a23021",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ecf1d6a88eab1230f78ff6926727e5389a23021"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9bc85b65b3daab0c3579be0efc3b33c1ef24620/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd267fd1f9de8d22922cb599aff67f3869243020",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd267fd1f9de8d22922cb599aff67f3869243020",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bd267fd1f9de8d22922cb599aff67f3869243020"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 15,
    "deletions": 14
  },
  "files": [
    {
      "sha": "2de025dd6309a687a69601120894ce8cf95ff9ae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9bc85b65b3daab0c3579be0efc3b33c1ef24620/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9bc85b65b3daab0c3579be0efc3b33c1ef24620/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* python/py-inferior.c (build_inferior_list): Remove.\n+\t(gdbpy_ref): Use range-based for loop to iterate over inferiors.\n+\n 2020-01-16  Christian Biesinger  <cbiesinger@google.com>\n \n \t* btrace.c (btrace_compute_ftrace_1): Fix spelling error (Unkown)."
    },
    {
      "sha": "fd7d8a8aa7094b549859dec370520b2cb9a8c616",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 10,
      "deletions": 14,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9bc85b65b3daab0c3579be0efc3b33c1ef24620/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9bc85b65b3daab0c3579be0efc3b33c1ef24620/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
      "patch": "@@ -462,18 +462,6 @@ infpy_get_progspace (PyObject *self, void *closure)\n   return pspace_to_pspace_object (pspace).release ();\n }\n \n-static int\n-build_inferior_list (struct inferior *inf, void *arg)\n-{\n-  PyObject *list = (PyObject *) arg;\n-  gdbpy_ref<inferior_object> inferior = inferior_to_inferior_object (inf);\n-\n-  if (inferior == NULL)\n-    return 0;\n-\n-  return PyList_Append (list, (PyObject *) inferior.get ()) ? 1 : 0;\n-}\n-\n /* Implementation of gdb.inferiors () -> (gdb.Inferior, ...).\n    Returns a tuple of all inferiors.  */\n PyObject *\n@@ -483,8 +471,16 @@ gdbpy_inferiors (PyObject *unused, PyObject *unused2)\n   if (list == NULL)\n     return NULL;\n \n-  if (iterate_over_inferiors (build_inferior_list, list.get ()))\n-    return NULL;\n+  for (inferior *inf : all_inferiors ())\n+    {\n+      gdbpy_ref<inferior_object> inferior = inferior_to_inferior_object (inf);\n+\n+      if (inferior == NULL)\n+\tcontinue;\n+\n+      if (PyList_Append (list.get (), (PyObject *) inferior.get ()) != 0)\n+\treturn NULL;\n+    }\n \n   return PyList_AsTuple (list.get ());\n }"
    }
  ]
}