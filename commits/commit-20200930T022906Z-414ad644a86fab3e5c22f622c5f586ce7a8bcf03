{
  "sha": "414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDE0YWQ2NDRhODZmYWIzZTVjMjJmNjIyYzVmNTg2Y2U3YThiY2YwMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Use setter for attribute's unsigned value\n\nThis adds form_is_unsigned and an unsigned setter method to struct\nattribute, and updates the remaining code.  Now DW_UNSND is no longer\nused as an lvalue.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_attribute_value): Update.\n\t* dwarf2/attribute.h (struct attribute) <form_is_unsigned,\n\tset_unsigned>: New methods.\n\t* dwarf2/attribute.c (attribute::form_is_unsigned): New method.",
    "tree": {
      "sha": "8100a3e2831f5b382d1e173178d5802bca2f5bfc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8100a3e2831f5b382d1e173178d5802bca2f5bfc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1bc397c561f55c1cf67a5e02f5c9305a54155a2e"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 66,
    "deletions": 26
  },
  "files": [
    {
      "sha": "ea0a4ae29a6b14d033faa069a4af13337656baa3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_attribute_value): Update.\n+\t* dwarf2/attribute.h (struct attribute) <form_is_unsigned,\n+\tset_unsigned>: New methods.\n+\t* dwarf2/attribute.c (attribute::form_is_unsigned): New method.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (get_alignment, read_array_order)"
    },
    {
      "sha": "69c59cc8bd8887e047cf6b2bd5344c41f6ce34eb",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
      "patch": "@@ -159,3 +159,26 @@ attribute::constant_value (int default_value) const\n       return default_value;\n     }\n }\n+\n+/* See attribute.h.  */\n+\n+bool\n+attribute::form_is_unsigned () const\n+{\n+  return (form == DW_FORM_ref_addr\n+\t  || form == DW_FORM_GNU_ref_alt\n+\t  || form == DW_FORM_data2\n+\t  || form == DW_FORM_data4\n+\t  || form == DW_FORM_data8\n+\t  || form == DW_FORM_sec_offset\n+\t  || form == DW_FORM_data1\n+\t  || form == DW_FORM_flag\n+\t  || form == DW_FORM_flag_present\n+\t  || form == DW_FORM_udata\n+\t  || form == DW_FORM_rnglistx\n+\t  || form == DW_FORM_ref1\n+\t  || form == DW_FORM_ref2\n+\t  || form == DW_FORM_ref4\n+\t  || form == DW_FORM_ref8\n+\t  || form == DW_FORM_ref_udata);\n+}"
    },
    {
      "sha": "3067e2affa2d028aa5aa23e345ebfcf14372d248",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
      "patch": "@@ -124,6 +124,9 @@ struct attribute\n   /* Check if the attribute's form is a string form.  */\n   bool form_is_string () const;\n \n+  /* Check if the attribute's form is an unsigned integer form.  */\n+  bool form_is_unsigned () const;\n+\n   /* Return DIE offset of this attribute.  Return 0 with complaint if\n      the attribute is not of the required kind.  */\n \n@@ -190,6 +193,13 @@ struct attribute\n     u.snd = snd;\n   }\n \n+  /* Set this attribute to an unsigned integer.  */\n+  void set_unsigned (ULONGEST unsnd)\n+  {\n+    gdb_assert (form_is_unsigned ());\n+    u.unsnd = unsnd;\n+  }\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;"
    },
    {
      "sha": "c572ed43c0bd028174371ad12199807a0ba37643",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/414ad644a86fab3e5c22f622c5f586ce7a8bcf03/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
      "patch": "@@ -19692,15 +19692,16 @@ read_attribute_value (const struct die_reader_specs *reader,\n     {\n     case DW_FORM_ref_addr:\n       if (cu->header.version == 2)\n-\tDW_UNSND (attr) = cu->header.read_address (abfd, info_ptr,\n-\t\t\t\t\t\t   &bytes_read);\n+\tattr->set_unsigned (cu->header.read_address (abfd, info_ptr,\n+\t\t\t\t\t\t     &bytes_read));\n       else\n-\tDW_UNSND (attr) = cu->header.read_offset (abfd, info_ptr,\n-\t\t\t\t\t\t  &bytes_read);\n+\tattr->set_unsigned (cu->header.read_offset (abfd, info_ptr,\n+\t\t\t\t\t\t    &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_GNU_ref_alt:\n-      DW_UNSND (attr) = cu->header.read_offset (abfd, info_ptr, &bytes_read);\n+      attr->set_unsigned (cu->header.read_offset (abfd, info_ptr,\n+\t\t\t\t\t\t  &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_addr:\n@@ -19728,15 +19729,15 @@ read_attribute_value (const struct die_reader_specs *reader,\n       attr->set_block (blk);\n       break;\n     case DW_FORM_data2:\n-      DW_UNSND (attr) = read_2_bytes (abfd, info_ptr);\n+      attr->set_unsigned (read_2_bytes (abfd, info_ptr));\n       info_ptr += 2;\n       break;\n     case DW_FORM_data4:\n-      DW_UNSND (attr) = read_4_bytes (abfd, info_ptr);\n+      attr->set_unsigned (read_4_bytes (abfd, info_ptr));\n       info_ptr += 4;\n       break;\n     case DW_FORM_data8:\n-      DW_UNSND (attr) = read_8_bytes (abfd, info_ptr);\n+      attr->set_unsigned (read_8_bytes (abfd, info_ptr));\n       info_ptr += 8;\n       break;\n     case DW_FORM_data16:\n@@ -19747,7 +19748,8 @@ read_attribute_value (const struct die_reader_specs *reader,\n       attr->set_block (blk);\n       break;\n     case DW_FORM_sec_offset:\n-      DW_UNSND (attr) = cu->header.read_offset (abfd, info_ptr, &bytes_read);\n+      attr->set_unsigned (cu->header.read_offset (abfd, info_ptr,\n+\t\t\t\t\t\t  &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_loclistx:\n@@ -19812,15 +19814,12 @@ read_attribute_value (const struct die_reader_specs *reader,\n       attr->set_block (blk);\n       break;\n     case DW_FORM_data1:\n-      DW_UNSND (attr) = read_1_byte (abfd, info_ptr);\n-      info_ptr += 1;\n-      break;\n     case DW_FORM_flag:\n-      DW_UNSND (attr) = read_1_byte (abfd, info_ptr);\n+      attr->set_unsigned (read_1_byte (abfd, info_ptr));\n       info_ptr += 1;\n       break;\n     case DW_FORM_flag_present:\n-      DW_UNSND (attr) = 1;\n+      attr->set_unsigned (1);\n       break;\n     case DW_FORM_sdata:\n       attr->set_signed (read_signed_leb128 (abfd, info_ptr, &bytes_read));\n@@ -19830,36 +19829,37 @@ read_attribute_value (const struct die_reader_specs *reader,\n       *need_reprocess = true;\n       /* FALLTHROUGH */\n     case DW_FORM_udata:\n-      DW_UNSND (attr) = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);\n+      attr->set_unsigned (read_unsigned_leb128 (abfd, info_ptr, &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_ref1:\n-      DW_UNSND (attr) = (to_underlying (cu->header.sect_off)\n-\t\t\t + read_1_byte (abfd, info_ptr));\n+      attr->set_unsigned ((to_underlying (cu->header.sect_off)\n+\t\t\t   + read_1_byte (abfd, info_ptr)));\n       info_ptr += 1;\n       break;\n     case DW_FORM_ref2:\n-      DW_UNSND (attr) = (to_underlying (cu->header.sect_off)\n-\t\t\t + read_2_bytes (abfd, info_ptr));\n+      attr->set_unsigned ((to_underlying (cu->header.sect_off)\n+\t\t\t   + read_2_bytes (abfd, info_ptr)));\n       info_ptr += 2;\n       break;\n     case DW_FORM_ref4:\n-      DW_UNSND (attr) = (to_underlying (cu->header.sect_off)\n-\t\t\t + read_4_bytes (abfd, info_ptr));\n+      attr->set_unsigned ((to_underlying (cu->header.sect_off)\n+\t\t\t   + read_4_bytes (abfd, info_ptr)));\n       info_ptr += 4;\n       break;\n     case DW_FORM_ref8:\n-      DW_UNSND (attr) = (to_underlying (cu->header.sect_off)\n-\t\t\t + read_8_bytes (abfd, info_ptr));\n+      attr->set_unsigned ((to_underlying (cu->header.sect_off)\n+\t\t\t   + read_8_bytes (abfd, info_ptr)));\n       info_ptr += 8;\n       break;\n     case DW_FORM_ref_sig8:\n       attr->set_signature (read_8_bytes (abfd, info_ptr));\n       info_ptr += 8;\n       break;\n     case DW_FORM_ref_udata:\n-      DW_UNSND (attr) = (to_underlying (cu->header.sect_off)\n-\t\t\t + read_unsigned_leb128 (abfd, info_ptr, &bytes_read));\n+      attr->set_unsigned ((to_underlying (cu->header.sect_off)\n+\t\t\t   + read_unsigned_leb128 (abfd, info_ptr,\n+\t\t\t\t\t\t   &bytes_read)));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_indirect:\n@@ -19942,7 +19942,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n       complaint\n         (_(\"Suspicious DW_AT_byte_size value treated as zero instead of %s\"),\n          hex_string (DW_UNSND (attr)));\n-      DW_UNSND (attr) = 0;\n+      attr->set_unsigned (0);\n     }\n \n   return info_ptr;"
    }
  ]
}