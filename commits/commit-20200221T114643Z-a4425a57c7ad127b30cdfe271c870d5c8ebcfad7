{
  "sha": "a4425a57c7ad127b30cdfe271c870d5c8ebcfad7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTQ0MjVhNTdjN2FkMTI3YjMwY2RmZTI3MWM4NzBkNWM4ZWJjZmFkNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-21T08:52:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-21T11:46:43Z"
    },
    "message": "Fuzzers whining about mach-o support\n\nIt's very easy to make bfd/mach-o.c allocate huge amounts of memory\nwith fuzzed binaries.  This make it a little harder.\n\nThe patch also fixes a number of places where an attempt to detect\noverflow of multiplication was done with code like\n  if (x * 4 < x)\n    /* overflow case */\nThat of course doesn't work.  There are plenty of values of x that\noverflow x * 4 but (x * 4) mod 2^n is greater than x.  For example\nwith 16-bit types, 0x6000 * 4 = 0x18000 mod 2^16 = 0x8000.\n\n\t* mach-o.c (bfd_mach_o_canonicalize_relocs): Fix ineffective\n\toverflow check.\n\t(bfd_mach_o_canonicalize_reloc): Likewise.\n\t(bfd_mach_o_canonicalize_dynamic_reloc): Likewise.  Sanity check\n\tcounts and offsets against file size.\n\t(bfd_mach_o_build_dysymtab): Fix ineffective overflow check.\n\t(bfd_mach_o_mangle_sections): Remove unnecessary overflow check.\n\t(bfd_mach_o_read_symtab_symbols): Sanity check count and offset\n\tagainst file size.  Delete symbol table error message.\n\t(bfd_mach_o_read_dysymtab): Sanity check counts and offsets\n\tagainst file size.\n\t(bfd_mach_o_read_symtab): Likewise.\n\t(bfd_mach_o_read_command): Pass file size.\n\t(bfd_mach_o_scan): Sanity check command count against file size.",
    "tree": {
      "sha": "91eede9d47adea966fe1eaaf57a77b674f9be3c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/91eede9d47adea966fe1eaaf57a77b674f9be3c9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c7adb09f35ad70cefc75c328f7b5a23b19fb8c74",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c7adb09f35ad70cefc75c328f7b5a23b19fb8c74",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c7adb09f35ad70cefc75c328f7b5a23b19fb8c74"
    }
  ],
  "stats": {
    "total": 153,
    "additions": 122,
    "deletions": 31
  },
  "files": [
    {
      "sha": "4ee96e4abc3d4b6bfba9a566e9f5b4d96052b302",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a4425a57c7ad127b30cdfe271c870d5c8ebcfad7",
      "patch": "@@ -1,3 +1,20 @@\n+2020-02-21  Alan Modra  <amodra@gmail.com>\n+\n+\t* mach-o.c (bfd_mach_o_canonicalize_relocs): Fix ineffective\n+\toverflow check.\n+\t(bfd_mach_o_canonicalize_reloc): Likewise.\n+\t(bfd_mach_o_canonicalize_dynamic_reloc): Likewise.  Sanity check\n+\tcounts and offsets against file size.\n+\t(bfd_mach_o_build_dysymtab): Fix ineffective overflow check.\n+\t(bfd_mach_o_mangle_sections): Remove unnecessary overflow check.\n+\t(bfd_mach_o_read_symtab_symbols): Sanity check count and offset\n+\tagainst file size.  Delete symbol table error message.\n+\t(bfd_mach_o_read_dysymtab): Sanity check counts and offsets\n+\tagainst file size.\n+\t(bfd_mach_o_read_symtab): Likewise.\n+\t(bfd_mach_o_read_command): Pass file size.\n+\t(bfd_mach_o_scan): Sanity check command count against file size.\n+\n 2020-02-21  Alan Modra  <amodra@gmail.com>\n \n \tPR 25569"
    },
    {
      "sha": "4b7be6eb4e19c9a2d96a5f4bd5757b57ba909803",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 105,
      "deletions": 31,
      "changes": 136,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a4425a57c7ad127b30cdfe271c870d5c8ebcfad7/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=a4425a57c7ad127b30cdfe271c870d5c8ebcfad7",
      "patch": "@@ -1614,13 +1614,11 @@ bfd_mach_o_canonicalize_relocs (bfd *abfd, unsigned long filepos,\n   bfd_mach_o_backend_data *bed = bfd_mach_o_get_backend_data (abfd);\n   unsigned long i;\n   struct mach_o_reloc_info_external *native_relocs = NULL;\n-  bfd_size_type native_size;\n+  size_t native_size;\n \n   /* Allocate and read relocs.  */\n-  native_size = count * BFD_MACH_O_RELENT_SIZE;\n-\n-  /* PR 17512: file: 09477b57.  */\n-  if (native_size < count)\n+  if (_bfd_mul_overflow (count, BFD_MACH_O_RELENT_SIZE, &native_size))\n+    /* PR 17512: file: 09477b57.  */\n     goto err;\n \n   if (bfd_seek (abfd, filepos, SEEK_SET) != 0)\n@@ -1663,9 +1661,11 @@ bfd_mach_o_canonicalize_reloc (bfd *abfd, asection *asect,\n \n   if (asect->relocation == NULL)\n     {\n-      if (asect->reloc_count * sizeof (arelent) < asect->reloc_count)\n+      size_t amt;\n+\n+      if (_bfd_mul_overflow (asect->reloc_count, sizeof (arelent), &amt))\n \treturn -1;\n-      res = bfd_malloc (asect->reloc_count * sizeof (arelent));\n+      res = bfd_malloc (amt);\n       if (res == NULL)\n \treturn -1;\n \n@@ -1718,12 +1718,30 @@ bfd_mach_o_canonicalize_dynamic_reloc (bfd *abfd, arelent **rels,\n \n   if (mdata->dyn_reloc_cache == NULL)\n     {\n-      if ((dysymtab->nextrel + dysymtab->nlocrel) * sizeof (arelent)\n-\t  < (dysymtab->nextrel + dysymtab->nlocrel))\n-\treturn -1;\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+      size_t amt;\n+\n+      if (filesize != 0)\n+\t{\n+\t  if (dysymtab->extreloff > filesize\n+\t      || dysymtab->nextrel > ((filesize - dysymtab->extreloff)\n+\t\t\t\t      / BFD_MACH_O_RELENT_SIZE)\n+\t      || dysymtab->locreloff > filesize\n+\t      || dysymtab->nlocrel > ((filesize - dysymtab->locreloff)\n+\t\t\t\t      / BFD_MACH_O_RELENT_SIZE))\n+\t    {\n+\t      bfd_set_error (bfd_error_file_truncated);\n+\t      return -1;\n+\t    }\n+\t}\n+      if (_bfd_mul_overflow (dysymtab->nextrel + dysymtab->nlocrel,\n+\t\t\t     sizeof (arelent), &amt))\n+\t{\n+\t  bfd_set_error (bfd_error_file_too_big);\n+\t  return -1;\n+\t}\n \n-      res = bfd_malloc ((dysymtab->nextrel + dysymtab->nlocrel)\n-\t\t\t* sizeof (arelent));\n+      res = bfd_malloc (amt);\n       if (res == NULL)\n \treturn -1;\n \n@@ -2165,14 +2183,15 @@ bfd_mach_o_build_dysymtab (bfd *abfd, bfd_mach_o_dysymtab_command *cmd)\n     {\n       unsigned i;\n       unsigned n;\n+      size_t amt;\n \n       mdata->filelen = FILE_ALIGN (mdata->filelen, 2);\n       cmd->indirectsymoff = mdata->filelen;\n-      mdata->filelen += cmd->nindirectsyms * 4;\n-\n-      if (cmd->nindirectsyms * 4 < cmd->nindirectsyms)\n+      if (_bfd_mul_overflow (cmd->nindirectsyms, 4, &amt))\n \treturn FALSE;\n-      cmd->indirect_syms = bfd_zalloc (abfd, cmd->nindirectsyms * 4);\n+      mdata->filelen += amt;\n+\n+      cmd->indirect_syms = bfd_zalloc (abfd, amt);\n       if (cmd->indirect_syms == NULL)\n \treturn FALSE;\n \n@@ -2571,11 +2590,7 @@ bfd_mach_o_mangle_sections (bfd *abfd, bfd_mach_o_data_struct *mdata)\n     }\n \n   mdata->nsects = nsect;\n-  if (_bfd_mul_overflow (mdata->nsects, sizeof (bfd_mach_o_section *), &amt))\n-    {\n-      bfd_set_error (bfd_error_no_memory);\n-      return FALSE;\n-    }\n+  amt = mdata->nsects * sizeof (bfd_mach_o_section *);\n   mdata->sections = bfd_alloc (abfd, amt);\n   if (mdata->sections == NULL)\n     return FALSE;\n@@ -3921,17 +3936,31 @@ bfd_mach_o_read_symtab_symbols (bfd *abfd)\n   bfd_mach_o_symtab_command *sym = mdata->symtab;\n   unsigned long i;\n   size_t amt;\n+  ufile_ptr filesize;\n \n-  if (sym == NULL || sym->symbols)\n+  if (sym == NULL || sym->nsyms == 0 || sym->symbols)\n     /* Return now if there are no symbols or if already loaded.  */\n     return TRUE;\n \n+  filesize = bfd_get_file_size (abfd);\n+  if (filesize != 0)\n+    {\n+      unsigned int wide = mach_o_wide_p (&mdata->header);\n+      unsigned int symwidth\n+\t= wide ? BFD_MACH_O_NLIST_64_SIZE : BFD_MACH_O_NLIST_SIZE;\n+\n+      if (sym->symoff > filesize\n+\t  || sym->nsyms > (filesize - sym->symoff) / symwidth)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  sym->nsyms = 0;\n+\t  return FALSE;\n+\t}\n+    }\n   if (_bfd_mul_overflow (sym->nsyms, sizeof (bfd_mach_o_asymbol), &amt)\n       || (sym->symbols = bfd_alloc (abfd, amt)) == NULL)\n     {\n       bfd_set_error (bfd_error_no_memory);\n-      _bfd_error_handler (_(\"bfd_mach_o_read_symtab_symbols: \"\n-\t\t\t    \"unable to allocate memory for symbols\"));\n       sym->nsyms = 0;\n       return FALSE;\n     }\n@@ -4273,7 +4302,8 @@ bfd_mach_o_read_thread (bfd *abfd, bfd_mach_o_load_command *command)\n }\n \n static bfd_boolean\n-bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n+bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command,\n+\t\t\t  ufile_ptr filesize)\n {\n   bfd_mach_o_dysymtab_command *cmd = &command->command.dysymtab;\n   bfd_mach_o_data_struct *mdata = bfd_mach_o_get_data (abfd);\n@@ -4315,6 +4345,12 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n       unsigned int module_len = wide ? 56 : 52;\n       size_t amt;\n \n+      if (cmd->modtaboff > filesize\n+\t  || cmd->nmodtab > (filesize - cmd->modtaboff) / module_len)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return FALSE;\n+\t}\n       if (_bfd_mul_overflow (cmd->nmodtab,\n \t\t\t     sizeof (bfd_mach_o_dylib_module), &amt))\n \t{\n@@ -4369,7 +4405,14 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n     {\n       unsigned long i;\n       size_t amt;\n+      struct mach_o_dylib_table_of_contents_external raw;\n \n+      if (cmd->tocoff > filesize\n+\t  || cmd->ntoc > (filesize - cmd->tocoff) / sizeof (raw))\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return FALSE;\n+\t}\n       if (_bfd_mul_overflow (cmd->ntoc,\n \t\t\t     sizeof (bfd_mach_o_dylib_table_of_content), &amt))\n \t{\n@@ -4385,7 +4428,6 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n \n       for (i = 0; i < cmd->ntoc; i++)\n \t{\n-\t  struct mach_o_dylib_table_of_contents_external raw;\n \t  bfd_mach_o_dylib_table_of_content *toc = &cmd->dylib_toc[i];\n \n \t  if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n@@ -4401,6 +4443,12 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n       unsigned int i;\n       size_t amt;\n \n+      if (cmd->indirectsymoff > filesize\n+\t  || cmd->nindirectsyms > (filesize - cmd->indirectsymoff) / 4)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return FALSE;\n+\t}\n       if (_bfd_mul_overflow (cmd->nindirectsyms, sizeof (unsigned int), &amt))\n \t{\n \t  bfd_set_error (bfd_error_file_too_big);\n@@ -4431,6 +4479,12 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n       unsigned int i;\n       size_t amt;\n \n+      if (cmd->extrefsymoff > filesize\n+\t  || cmd->nextrefsyms > (filesize - cmd->extrefsymoff) / 4)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return FALSE;\n+\t}\n       if (_bfd_mul_overflow (cmd->nextrefsyms,\n \t\t\t     sizeof (bfd_mach_o_dylib_reference), &amt))\n \t{\n@@ -4476,7 +4530,8 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n }\n \n static bfd_boolean\n-bfd_mach_o_read_symtab (bfd *abfd, bfd_mach_o_load_command *command)\n+bfd_mach_o_read_symtab (bfd *abfd, bfd_mach_o_load_command *command,\n+\t\t\tufile_ptr filesize)\n {\n   bfd_mach_o_symtab_command *symtab = &command->command.symtab;\n   bfd_mach_o_data_struct *mdata = bfd_mach_o_get_data (abfd);\n@@ -4496,6 +4551,15 @@ bfd_mach_o_read_symtab (bfd *abfd, bfd_mach_o_load_command *command)\n   symtab->symbols = NULL;\n   symtab->strtab = NULL;\n \n+  if (symtab->symoff > filesize\n+      || symtab->nsyms > (filesize - symtab->symoff) / BFD_MACH_O_NLIST_SIZE\n+      || symtab->stroff > filesize\n+      || symtab->strsize > filesize - symtab->stroff)\n+    {\n+      bfd_set_error (bfd_error_file_truncated);\n+      return FALSE;\n+    }\n+\n   if (symtab->nsyms != 0)\n     abfd->flags |= HAS_SYMS;\n \n@@ -4853,7 +4917,8 @@ bfd_mach_o_read_segment_64 (bfd *abfd, bfd_mach_o_load_command *command)\n }\n \n static bfd_boolean\n-bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command)\n+bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command,\n+\t\t\t ufile_ptr filesize)\n {\n   bfd_mach_o_data_struct *mdata = bfd_mach_o_get_data (abfd);\n   struct mach_o_load_command_external raw;\n@@ -4882,7 +4947,7 @@ bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command)\n \treturn FALSE;\n       break;\n     case BFD_MACH_O_LC_SYMTAB:\n-      if (!bfd_mach_o_read_symtab (abfd, command))\n+      if (!bfd_mach_o_read_symtab (abfd, command, filesize))\n \treturn FALSE;\n       break;\n     case BFD_MACH_O_LC_SYMSEG:\n@@ -4931,7 +4996,7 @@ bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command)\n \treturn FALSE;\n       break;\n     case BFD_MACH_O_LC_DYSYMTAB:\n-      if (!bfd_mach_o_read_dysymtab (abfd, command))\n+      if (!bfd_mach_o_read_dysymtab (abfd, command, filesize))\n \treturn FALSE;\n       break;\n     case BFD_MACH_O_LC_PREBIND_CKSUM:\n@@ -5204,10 +5269,19 @@ bfd_mach_o_scan (bfd *abfd,\n     {\n       bfd_mach_o_load_command *cmd;\n       size_t amt;\n+      ufile_ptr filesize = bfd_get_file_size (abfd);\n+\n+      if (filesize == 0)\n+\tfilesize = (ufile_ptr) -1;\n \n       mdata->first_command = NULL;\n       mdata->last_command = NULL;\n \n+      if (header->ncmds > (filesize - hdrsize) / BFD_MACH_O_LC_SIZE)\n+\t{\n+\t  bfd_set_error (bfd_error_file_truncated);\n+\t  return FALSE;\n+\t}\n       if (_bfd_mul_overflow (header->ncmds,\n \t\t\t     sizeof (bfd_mach_o_load_command), &amt))\n \t{\n@@ -5232,7 +5306,7 @@ bfd_mach_o_scan (bfd *abfd,\n \t      cur->offset = prev->offset + prev->len;\n \t    }\n \n-\t  if (!bfd_mach_o_read_command (abfd, cur))\n+\t  if (!bfd_mach_o_read_command (abfd, cur, filesize))\n \t    return FALSE;\n \t}\n     }"
    }
  ]
}