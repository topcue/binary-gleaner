{
  "sha": "6456d318aaa7ea35511dad1f2facf0fb984972e5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjQ1NmQzMThhYWE3ZWEzNTUxMWRhZDFmMmZhY2YwZmI5ODQ5NzJlNQ==",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-02-07T16:55:23Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-02-07T16:56:35Z"
    },
    "message": "AArch64: Add verifier for By elem Single and Double sized instructions.\n\nThe AArch64 instruction set has cut-outs inside instructions encodings for\nwhen a given encoding that would normally fall within the encoding space of\nan instruction is instead undefined.\n\nThis updates the first few instructions FMLA, FMLA, FMUL and FMULX in the case\nwhere sz:L == 11.\n\ngas/ChangeLog:\n\n\tPR binutils/23212\n\t* testsuite/gas/aarch64/undefined_by_elem_sz_l.s: New test.\n\t* testsuite/gas/aarch64/undefined_by_elem_sz_l.d: New test.\n\nopcodes/ChangeLog:\n\n\tPR binutils/23212\n\t* aarch64-opc.h (enum aarch64_field_kind): Add FLD_sz.\n\t* aarch64-opc.c (verify_elem_sd): New.\n\t(fields): Add FLD_sz entr.\n\t* aarch64-tbl.h (_SIMD_INSN): New.\n\t(aarch64_opcode_table): Add elem_sd verifier to fmla, fmls, fmul and\n\tfmulx scalar and vector by element isns.",
    "tree": {
      "sha": "9ef3c078613f20160ad3e37d961e8da7dec79150",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ef3c078613f20160ad3e37d961e8da7dec79150"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6456d318aaa7ea35511dad1f2facf0fb984972e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6456d318aaa7ea35511dad1f2facf0fb984972e5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6456d318aaa7ea35511dad1f2facf0fb984972e5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6456d318aaa7ea35511dad1f2facf0fb984972e5/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b2abe1bd8149dd9ad64432f620c3a034bf23a5fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2abe1bd8149dd9ad64432f620c3a034bf23a5fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b2abe1bd8149dd9ad64432f620c3a034bf23a5fe"
    }
  ],
  "stats": {
    "total": 156,
    "additions": 147,
    "deletions": 9
  },
  "files": [
    {
      "sha": "be2607c30c5c9d9a55594700938196427b9b1dca",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR binutils/23212\n+\t* testsuite/gas/aarch64/undefined_by_elem_sz_l.s: New test.\n+\t* testsuite/gas/aarch64/undefined_by_elem_sz_l.d: New test.\n+\n 2019-02-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/tc-visium.c (md_assemble) <mode_cad>: Align instruction on"
    },
    {
      "sha": "41afa67d2b636b4c4fcb7f5166462ae5e2a6f127",
      "filename": "gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.d",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.d?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -0,0 +1,40 @@\n+#as: -march=armv8.4-a\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+[^:]+:\\s+5f909000 \tfmul\ts0, s0, v16.s\\[0\\]\n+[^:]+:\\s+5ff09000 \t.inst\t0x5ff09000 ; undefined\n+[^:]+:\\s+5f901000 \tfmla\ts0, s0, v16.s\\[0\\]\n+[^:]+:\\s+5ff01000 \t.inst\t0x5ff01000 ; undefined\n+[^:]+:\\s+5f905000 \tfmls\ts0, s0, v16.s\\[0\\]\n+[^:]+:\\s+5ff05000 \t.inst\t0x5ff05000 ; undefined\n+[^:]+:\\s+7f909000 \tfmulx\ts0, s0, v16.s\\[0\\]\n+[^:]+:\\s+7ff09000 \t.inst\t0x7ff09000 ; undefined\n+[^:]+:\\s+5fd09000 \tfmul\td0, d0, v16.d\\[0\\]\n+[^:]+:\\s+5ff09000 \t.inst\t0x5ff09000 ; undefined\n+[^:]+:\\s+5fd01000 \tfmla\td0, d0, v16.d\\[0\\]\n+[^:]+:\\s+5ff01000 \t.inst\t0x5ff01000 ; undefined\n+[^:]+:\\s+5fd05000 \tfmls\td0, d0, v16.d\\[0\\]\n+[^:]+:\\s+5ff05000 \t.inst\t0x5ff05000 ; undefined\n+[^:]+:\\s+7fd09000 \tfmulx\td0, d0, v16.d\\[0\\]\n+[^:]+:\\s+7ff09000 \t.inst\t0x7ff09000 ; undefined\n+[^:]+:\\s+4f909000 \tfmul\tv0.4s, v0.4s, v16.s\\[0\\]\n+[^:]+:\\s+4ff09000 \t.inst\t0x4ff09000 ; undefined\n+[^:]+:\\s+4f901000 \tfmla\tv0.4s, v0.4s, v16.s\\[0\\]\n+[^:]+:\\s+4ff01000 \t.inst\t0x4ff01000 ; undefined\n+[^:]+:\\s+4f905000 \tfmls\tv0.4s, v0.4s, v16.s\\[0\\]\n+[^:]+:\\s+4ff05000 \t.inst\t0x4ff05000 ; undefined\n+[^:]+:\\s+6f909000 \tfmulx\tv0.4s, v0.4s, v16.s\\[0\\]\n+[^:]+:\\s+6ff09000 \t.inst\t0x6ff09000 ; undefined\n+[^:]+:\\s+4fd09000 \tfmul\tv0.2d, v0.2d, v16.d\\[0\\]\n+[^:]+:\\s+4ff09000 \t.inst\t0x4ff09000 ; undefined\n+[^:]+:\\s+4fd01000 \tfmla\tv0.2d, v0.2d, v16.d\\[0\\]\n+[^:]+:\\s+4ff01000 \t.inst\t0x4ff01000 ; undefined\n+[^:]+:\\s+4fd05000 \tfmls\tv0.2d, v0.2d, v16.d\\[0\\]\n+[^:]+:\\s+4ff05000 \t.inst\t0x4ff05000 ; undefined\n+[^:]+:\\s+6fd09000 \tfmulx\tv0.2d, v0.2d, v16.d\\[0\\]\n+[^:]+:\\s+6ff09000 \t.inst\t0x6ff09000 ; undefined"
    },
    {
      "sha": "19e93b035f01f40019d6360480b37af229cb8040",
      "filename": "gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.s",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/undefined_by_elem_sz_l.s?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -0,0 +1,55 @@\n+# Generates tests to see if setting bit 22 (sz) and 21 (L) together correctly\n+# marks the instruction as undefined.  This pattern can't be created by the\n+# assembler so instead manually encode it.\n+.macro gen_insns opc\n+\t.inst \\opc\n+\t.inst (\\opc | 0x600000)\n+.endm\n+\n+# fmul  s0, s0, v16.s[0]\n+gen_insns 0x5f909000\n+\n+# fmla  s0, s0, v16.s[0]\n+gen_insns 0x5f901000\n+\n+# fmls  s0, s0, v16.s[0]\n+gen_insns 0x5f905000\n+\n+# fmulx s0, s0, v16.s[0]\n+gen_insns 0x7f909000\n+\n+# fmul  d0, d0, v16.d[0]\n+gen_insns 0x5fd09000\n+\n+# fmla  d0, d0, v16.d[0]\n+gen_insns 0x5fd01000\n+\n+# fmls  d0, d0, v16.d[0]\n+gen_insns 0x5fd05000\n+\n+# fmulx d0, d0, v16.d[0]\n+gen_insns 0x7fd09000\n+\n+# fmul  v0.4s, v0.4s, v16.s[0]\n+gen_insns 0x4f909000\n+\n+# fmla  v0.4s, v0.4s, v16.s[0]\n+gen_insns 0x4f901000\n+\n+# fmls  v0.4s, v0.4s, v16.s[0]\n+gen_insns 0x4f905000\n+\n+# fmulx v0.4s, v0.4s, v16.s[0]\n+gen_insns 0x6f909000\n+\n+# fmul  v0.2d, v0.2d, v16.d[0]\n+gen_insns 0x4fd09000\n+\n+# fmla  v0.2d, v0.2d, v16.d[0]\n+gen_insns 0x4fd01000\n+\n+# fmls  v0.2d, v0.2d, v16.d[0]\n+gen_insns 0x4fd05000\n+\n+# fmulx v0.2d, v0.2d, v16.d[0]\n+gen_insns 0x6fd09000"
    },
    {
      "sha": "2523b312a9d2a913be7f6cfdd47f786e94486dc0",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -1,3 +1,13 @@\n+2019-02-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR binutils/23212\n+\t* aarch64-opc.h (enum aarch64_field_kind): Add FLD_sz.\n+\t* aarch64-opc.c (verify_elem_sd): New.\n+\t(fields): Add FLD_sz entr.\n+\t* aarch64-tbl.h (_SIMD_INSN): New.\n+\t(aarch64_opcode_table): Add elem_sd verifier to fmla, fmls, fmul and\n+\tfmulx scalar and vector by element isns.\n+\n 2019-02-07  Nick Clifton  <nickc@redhat.com>\n \n \t* po/sv.po: Updated Swedish translation."
    },
    {
      "sha": "a17411622cbc4b8bd29f4a8e9d5ef48029af09d1",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -320,6 +320,7 @@ const aarch64_field fields[] =\n     { 13,  2 }, /* rotate2: Indexed element FCMLA immediate rotate.  */\n     { 12,  1 }, /* rotate3: FCADD immediate rotate.  */\n     { 12,  2 }, /* SM3: Indexed element SM3 2 bits index immediate.  */\n+    { 22,  1 }, /* sz: 1-bit element size select.  */\n };\n \n enum aarch64_operand_class\n@@ -4728,6 +4729,29 @@ verify_ldpsw (const struct aarch64_inst *inst ATTRIBUTE_UNUSED,\n   return ERR_OK;\n }\n \n+/* Verifier for vector by element 3 operands functions where the\n+   conditions `if sz:L == 11 then UNDEFINED` holds.  */\n+\n+static enum err_type\n+verify_elem_sd (const struct aarch64_inst *inst, const aarch64_insn insn,\n+\t\tbfd_vma pc ATTRIBUTE_UNUSED, bfd_boolean encoding,\n+\t\taarch64_operand_error *mismatch_detail ATTRIBUTE_UNUSED,\n+\t\taarch64_instr_sequence *insn_sequence ATTRIBUTE_UNUSED)\n+{\n+  const aarch64_insn undef_pattern = 0x3;\n+  aarch64_insn value;\n+\n+  assert (inst->opcode);\n+  assert (inst->opcode->operands[2] == AARCH64_OPND_Em);\n+  value = encoding ? inst->value : insn;\n+  assert (value);\n+\n+  if (undef_pattern == extract_fields (value, 0, 2, FLD_sz, FLD_L))\n+    return ERR_UND;\n+\n+  return ERR_OK;\n+}\n+\n /* Initialize an instruction sequence insn_sequence with the instruction INST.\n    If INST is NULL the given insn_sequence is cleared and the sequence is left\n    uninitialized.  */"
    },
    {
      "sha": "f6c506d04486fbe885569a741e68d0e83efdfeb0",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -146,7 +146,8 @@ enum aarch64_field_kind\n   FLD_rotate1,\n   FLD_rotate2,\n   FLD_rotate3,\n-  FLD_SM3_imm2\n+  FLD_SM3_imm2,\n+  FLD_sz\n };\n \n /* Field description.  */"
    },
    {
      "sha": "e0c3903cd6224053e2615f5436c8382e9aa0013e",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6456d318aaa7ea35511dad1f2facf0fb984972e5/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=6456d318aaa7ea35511dad1f2facf0fb984972e5",
      "patch": "@@ -2239,6 +2239,8 @@ static const aarch64_feature_set aarch64_feature_memtag =\n   { NAME, OPCODE, MASK, CLASS, OP, FP, OPS, QUALS, FLAGS, 0, 0, NULL }\n #define SIMD_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, OP, SIMD, OPS, QUALS, FLAGS, 0, 0, NULL }\n+#define _SIMD_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,VERIFIER) \\\n+  { NAME, OPCODE, MASK, CLASS, OP, SIMD, OPS, QUALS, FLAGS, 0, 0, VERIFIER }\n #define CRYP_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, 0, CRYPTO, OPS, QUALS, FLAGS, 0, 0, NULL }\n #define _CRC_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n@@ -2420,11 +2422,11 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   SIMD_INSN (\"sqdmull2\",0x4f00b000, 0xff00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT_L2,   F_SIZEQ),\n   SIMD_INSN (\"sqdmulh\", 0x0f00c000, 0xbf00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT,      F_SIZEQ),\n   SIMD_INSN (\"sqrdmulh\",0x0f00d000, 0xbf00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT,      F_SIZEQ),\n-  SIMD_INSN (\"fmla\",    0x0f801000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ),\n+  _SIMD_INSN (\"fmla\",    0x0f801000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,  F_SIZEQ, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmla\",    0x0f001000, 0xbfc0f400, asimdelem, OP3 (Vd, Vn, Em16), QL_ELEMENT_FP_H, F_SIZEQ),\n-  SIMD_INSN (\"fmls\",    0x0f805000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ),\n+  _SIMD_INSN (\"fmls\",    0x0f805000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmls\",    0x0f005000, 0xbfc0f400, asimdelem, OP3 (Vd, Vn, Em16), QL_ELEMENT_FP_H, F_SIZEQ),\n-  SIMD_INSN (\"fmul\",    0x0f809000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ),\n+  _SIMD_INSN (\"fmul\",    0x0f809000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmul\",    0x0f009000, 0xbfc0f400, asimdelem, OP3 (Vd, Vn, Em16), QL_ELEMENT_FP_H, F_SIZEQ),\n   SIMD_INSN (\"mla\",     0x2f000000, 0xbf00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT,      F_SIZEQ),\n   SIMD_INSN (\"umlal\",   0x2f002000, 0xff00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT_L,    F_SIZEQ),\n@@ -2434,7 +2436,7 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   SIMD_INSN (\"umlsl2\",  0x6f006000, 0xff00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT_L2,   F_SIZEQ),\n   SIMD_INSN (\"umull\",   0x2f00a000, 0xff00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT_L,    F_SIZEQ),\n   SIMD_INSN (\"umull2\",  0x6f00a000, 0xff00f400, asimdelem, 0, OP3 (Vd, Vn, Em16), QL_ELEMENT_L2,   F_SIZEQ),\n-  SIMD_INSN (\"fmulx\",   0x2f809000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ),\n+  _SIMD_INSN (\"fmulx\",   0x2f809000, 0xbf80f400, asimdelem, 0, OP3 (Vd, Vn, Em), QL_ELEMENT_FP,   F_SIZEQ, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmulx\",   0x2f009000, 0xbfc0f400, asimdelem, OP3 (Vd, Vn, Em16), QL_ELEMENT_FP_H, F_SIZEQ),\n   RDMA_INSN (\"sqrdmlah\",0x2f00d000, 0xbf00f400, asimdelem, OP3 (Vd, Vn, Em16), QL_ELEMENT,      F_SIZEQ),\n   RDMA_INSN (\"sqrdmlsh\",0x2f00f000, 0xbf00f400, asimdelem, OP3 (Vd, Vn, Em16), QL_ELEMENT,      F_SIZEQ),\n@@ -2748,13 +2750,13 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   SIMD_INSN (\"sqdmull\", 0x5f00b000, 0xff00f400, asisdelem, 0, OP3 (Sd, Sn, Em16), QL_SISDL_HS, F_SSIZE),\n   SIMD_INSN (\"sqdmulh\", 0x5f00c000, 0xff00f400, asisdelem, 0, OP3 (Sd, Sn, Em16), QL_SISD_HS, F_SSIZE),\n   SIMD_INSN (\"sqrdmulh\", 0x5f00d000, 0xff00f400, asisdelem, 0, OP3 (Sd, Sn, Em16), QL_SISD_HS, F_SSIZE),\n-  SIMD_INSN (\"fmla\", 0x5f801000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE),\n+  _SIMD_INSN (\"fmla\", 0x5f801000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmla\", 0x5f001000, 0xffc0f400, asisdelem, OP3 (Sd, Sn, Em16), QL_FP3_H, F_SSIZE),\n-  SIMD_INSN (\"fmls\", 0x5f805000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE),\n+  _SIMD_INSN (\"fmls\", 0x5f805000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmls\", 0x5f005000, 0xffc0f400, asisdelem, OP3 (Sd, Sn, Em16), QL_FP3_H, F_SSIZE),\n-  SIMD_INSN (\"fmul\", 0x5f809000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE),\n+  _SIMD_INSN (\"fmul\", 0x5f809000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmul\", 0x5f009000, 0xffc0f400, asisdelem, OP3 (Sd, Sn, Em16), QL_FP3_H, F_SSIZE),\n-  SIMD_INSN (\"fmulx\", 0x7f809000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE),\n+  _SIMD_INSN (\"fmulx\", 0x7f809000, 0xff80f400, asisdelem, 0, OP3 (Sd, Sn, Em), QL_FP3, F_SSIZE, VERIFIER (elem_sd)),\n   SF16_INSN (\"fmulx\", 0x7f009000, 0xffc0f400, asisdelem, OP3 (Sd, Sn, Em16), QL_FP3_H, F_SSIZE),\n   RDMA_INSN (\"sqrdmlah\", 0x7f00d000, 0xff00f400, asisdelem, OP3 (Sd, Sn, Em16), QL_SISD_HS, F_SSIZE),\n   RDMA_INSN (\"sqrdmlsh\", 0x7f00f000, 0xff00f400, asisdelem, OP3 (Sd, Sn, Em16), QL_SISD_HS, F_SSIZE),"
    }
  ]
}