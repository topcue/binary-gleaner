{
  "sha": "fe01123efb30a273645dc194ae2100197f93a00a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmUwMTEyM2VmYjMwYTI3MzY0NWRjMTk0YWUyMTAwMTk3ZjkzYTAwYQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-21T14:24:02Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-09-02T12:58:48Z"
    },
    "message": "Use gdbarch for probe::get_argument_count\n\nThe probe function get_argument_count does not need a frame, only\nthe current gdbarch.  Switch the code to pass gdbarch instead.\nNo functional changes.\n\ngdb/ChangeLog:\n\n\t* break-catch-throw.c (fetch_probe_arguments): Use gdbarch.\n\t* dtrace-probe.c (dtrace_probe::get_argument_count): Likewise.\n\t* probe.c (probe_safe_evaluate_at_pc) (compute_probe_arg)\n\t(compile_probe_arg): Likewise.\n\t* probe.h (get_argument_count): Likewise.\n\t* solib-svr4.c (solib_event_probe_action): Likewise.\n\t* stap-probe.c (stap_probe::get_argument_count): Likewise.",
    "tree": {
      "sha": "517d24874f46e34adf2c554f39e2a60a27c29efc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/517d24874f46e34adf2c554f39e2a60a27c29efc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe01123efb30a273645dc194ae2100197f93a00a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe01123efb30a273645dc194ae2100197f93a00a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe01123efb30a273645dc194ae2100197f93a00a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe01123efb30a273645dc194ae2100197f93a00a/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e661ef01e50a2cb38c006b0fe444a1b41bfc9400"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 20,
    "deletions": 13
  },
  "files": [
    {
      "sha": "d0e4258c4f7313068b8167580ae1389a55a9d39d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-02  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* break-catch-throw.c (fetch_probe_arguments): Use gdbarch.\n+\t* dtrace-probe.c (dtrace_probe::get_argument_count): Likewise.\n+\t* probe.c (probe_safe_evaluate_at_pc) (compute_probe_arg)\n+\t(compile_probe_arg): Likewise.\n+\t* probe.h (get_argument_count): Likewise.\n+\t* solib-svr4.c (solib_event_probe_action): Likewise.\n+\t* stap-probe.c (stap_probe::get_argument_count): Likewise.\n+\n 2019-09-02  Alan Hayward  <alan.hayward@arm.com>\n \n \t* solib-svr4.c (svr4_find_and_create_probe_breakpoints): Move"
    },
    {
      "sha": "e9523a6eb86014a207b74ffbfa137ae6799467d3",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -115,7 +115,7 @@ fetch_probe_arguments (struct value **arg0, struct value **arg1)\n \t  && pc_probe.prob->get_name () != \"rethrow\"))\n     error (_(\"not stopped at a C++ exception catchpoint\"));\n \n-  n_args = pc_probe.prob->get_argument_count (frame);\n+  n_args = pc_probe.prob->get_argument_count (get_frame_arch (frame));\n   if (n_args < 2)\n     error (_(\"C++ exception catchpoint has too few arguments\"));\n "
    },
    {
      "sha": "e9e71fd4c9e82036dbf9464ed9393ea5580ca37c",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -122,7 +122,7 @@ class dtrace_probe : public probe\n   CORE_ADDR get_relocated_address (struct objfile *objfile) override;\n \n   /* See probe.h.  */\n-  unsigned get_argument_count (struct frame_info *frame) override;\n+  unsigned get_argument_count (struct gdbarch *gdbarch) override;\n \n   /* See probe.h.  */\n   bool can_evaluate_arguments () const override;\n@@ -693,7 +693,7 @@ dtrace_probe::get_relocated_address (struct objfile *objfile)\n /* Implementation of the get_argument_count method.  */\n \n unsigned\n-dtrace_probe::get_argument_count (struct frame_info *frame)\n+dtrace_probe::get_argument_count (struct gdbarch *gdbarch)\n {\n   return m_args.size ();\n }"
    },
    {
      "sha": "8b108d6b02dce8e8dc87a7a01244199b740e93e6",
      "filename": "gdb/probe.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.c?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -695,7 +695,7 @@ probe_safe_evaluate_at_pc (struct frame_info *frame, unsigned n)\n   if (!probe.prob)\n     return NULL;\n \n-  n_args = probe.prob->get_argument_count (frame);\n+  n_args = probe.prob->get_argument_count (get_frame_arch (frame));\n   if (n >= n_args)\n     return NULL;\n \n@@ -818,7 +818,7 @@ compute_probe_arg (struct gdbarch *arch, struct internalvar *ivar,\n   if (pc_probe.prob == NULL)\n     error (_(\"No probe at PC %s\"), core_addr_to_string (pc));\n \n-  n_args = pc_probe.prob->get_argument_count (frame);\n+  n_args = pc_probe.prob->get_argument_count (arch);\n   if (sel == -1)\n     return value_from_longest (builtin_type (arch)->builtin_int, n_args);\n \n@@ -840,7 +840,6 @@ compile_probe_arg (struct internalvar *ivar, struct agent_expr *expr,\n   int sel = (int) (uintptr_t) data;\n   struct bound_probe pc_probe;\n   int n_args;\n-  struct frame_info *frame = get_selected_frame (NULL);\n \n   /* SEL == -1 means \"_probe_argc\".  */\n   gdb_assert (sel >= -1);\n@@ -849,7 +848,7 @@ compile_probe_arg (struct internalvar *ivar, struct agent_expr *expr,\n   if (pc_probe.prob == NULL)\n     error (_(\"No probe at PC %s\"), core_addr_to_string (pc));\n \n-  n_args = pc_probe.prob->get_argument_count (frame);\n+  n_args = pc_probe.prob->get_argument_count (expr->gdbarch);\n \n   if (sel == -1)\n     {"
    },
    {
      "sha": "7410c5aadf69329c6af4cded5ee952f93a04d989",
      "filename": "gdb/probe.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/probe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/probe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.h?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -131,7 +131,7 @@ class probe\n \n   /* Return the number of arguments of the probe.  This function can\n      throw an exception.  */\n-  virtual unsigned get_argument_count (struct frame_info *frame) = 0;\n+  virtual unsigned get_argument_count (struct gdbarch *gdbarch) = 0;\n \n   /* Return 1 if the probe interface can evaluate the arguments of\n      probe, zero otherwise.  See the comments on"
    },
    {
      "sha": "2a44dd69858ae7b0ade6cb07f47f1c1f3ccef3b9",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -1756,7 +1756,7 @@ solib_event_probe_action (struct probe_and_action *pa)\n        arg2: struct link_map *new (optional, for incremental updates)  */\n   try\n     {\n-      probe_argc = pa->prob->get_argument_count (frame);\n+      probe_argc = pa->prob->get_argument_count (get_frame_arch (frame));\n     }\n   catch (const gdb_exception_error &ex)\n     {"
    },
    {
      "sha": "700b657967d3d8471677881b7a278ef4ee2ac26f",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe01123efb30a273645dc194ae2100197f93a00a/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe01123efb30a273645dc194ae2100197f93a00a/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=fe01123efb30a273645dc194ae2100197f93a00a",
      "patch": "@@ -136,7 +136,7 @@ class stap_probe : public probe\n   CORE_ADDR get_relocated_address (struct objfile *objfile) override;\n \n   /* See probe.h.  */\n-  unsigned get_argument_count (struct frame_info *frame) override;\n+  unsigned get_argument_count (struct gdbarch *gdbarch) override;\n \n   /* See probe.h.  */\n   bool can_evaluate_arguments () const override;\n@@ -1301,10 +1301,8 @@ stap_probe::get_relocated_address (struct objfile *objfile)\n    argument string.  */\n \n unsigned\n-stap_probe::get_argument_count (struct frame_info *frame)\n+stap_probe::get_argument_count (struct gdbarch *gdbarch)\n {\n-  struct gdbarch *gdbarch = get_frame_arch (frame);\n-\n   if (!m_have_parsed_args)\n     {\n       if (this->can_evaluate_arguments ())"
    }
  ]
}