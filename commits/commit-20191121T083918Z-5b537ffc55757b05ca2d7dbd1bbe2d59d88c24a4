{
  "sha": "5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI1MzdmZmM1NTc1N2IwNWNhMmQ3ZGJkMWJiZTJkNTlkODhjMjRhNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-21T06:52:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-21T08:39:18Z"
    },
    "message": "PR46, cygwin: FAIL: cdtest with -Ur\n\nSee the comment in pe.sc to understand why ld -Ur won't work.\n\n\tPR 46\nbinutils/\n\t* testsuite/lib/binutils-common.exp (is_pecoff_format): Rewrite\n\twith positive logic and add more target triples.\nld/\n\t* scripttempl/pe.sc: Comment on ld -Ur fail.  Wrap .gcc_exc comment.\n\t* scripttempl/pep.sc: Likewise.\n\t* testsuite/ld-cdtest/cdtest.exp (test2): xfail for pe.",
    "tree": {
      "sha": "19fff230f4870272fd18eff9eb9f571cefe86734",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19fff230f4870272fd18eff9eb9f571cefe86734"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b13e475ed21ee0b57c5ce0f3cf8489a4164734e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b13e475ed21ee0b57c5ce0f3cf8489a4164734e7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b13e475ed21ee0b57c5ce0f3cf8489a4164734e7"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 41,
    "deletions": 13
  },
  "files": [
    {
      "sha": "10ab37ce3da055768a59221d538381e5f105100f",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-21  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/lib/binutils-common.exp (is_pecoff_format): Rewrite\n+\twith positive logic and add more target triples.\n+\n 2019-11-19  Alan Modra  <amodra@gmail.com>\n \n \tPR 24499"
    },
    {
      "sha": "3b229babeb96d848e6ea74e211c15cd4993d2c96",
      "filename": "binutils/testsuite/lib/binutils-common.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/binutils/testsuite/lib/binutils-common.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/binutils/testsuite/lib/binutils-common.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/lib/binutils-common.exp?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -95,14 +95,17 @@ proc is_aout_format {} {\n # True if the object format is known to be PE COFF.\n #\n proc is_pecoff_format {} {\n-    if { ![istarget *-*-mingw*]\n-\t && ![istarget *-*-cygwin*]\n-\t && ![istarget *-*-cegcc*]\n-\t && ![istarget *-*-pe*] } {\n-\treturn 0\n+    if { [istarget *-*-beospe*]\n+\t || [istarget *-*-cegcc*]\n+\t || [istarget *-*-cygwin*]\n+\t || [istarget *-*-interix*]\n+\t || [istarget *-*-mingw*]\n+\t || [istarget *-*-netbsdpe*]\n+\t || [istarget *-*-pe*]\n+\t || [istarget *-*-winnt*] } {\n+\treturn 1\n     }\n-\n-    return 1\n+    return 0\n }\n \n proc is_som_format {} {"
    },
    {
      "sha": "e4e3f7405849e75815c18949e19db95bf73839ab",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -1,3 +1,12 @@\n+2019-11-21  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 46\n+\t* scripttempl/pe.sc: Comment on ld -Ur fail.  Wrap .gcc_exc comment.\n+\t* scripttempl/pep.sc: Likewise.\n+\t* scripttempl/i386beos.sc: Wrap .gcc_exc comment.\n+\t* scripttempl/mcorepe.sc: Likewise.\n+\t* testsuite/ld-cdtest/cdtest.exp (test2): xfail for pe.\n+\n 2019-11-12  Jim Wilson  <jimw@sifive.com>\n \n \tPR 25181"
    },
    {
      "sha": "b45b83fc9ea959d9751a96c5e8d89daae668dd12",
      "filename": "ld/scripttempl/i386beos.sc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/i386beos.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/i386beos.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/i386beos.sc?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -69,7 +69,7 @@ SECTIONS\n     ${CONSTRUCTING+ ___DTOR_LIST__ = .; __DTOR_LIST__ = . ;\n \t\t\tLONG (-1); *(.dtors); *(.dtor);  LONG (0); }\n     ${RELOCATING+ KEEP (*(SORT_NONE(.fini)))}\n-    /* ??? Why is .gcc_exc here?  */\n+    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}\n     ${RELOCATING+ *(.gcc_exc)}\n     ${RELOCATING+ etext = .;}\n     ${RELOCATING+ __text_end__ = .;}"
    },
    {
      "sha": "eea70271bb5c1813da13e74641eb541bc2885a62",
      "filename": "ld/scripttempl/mcorepe.sc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/mcorepe.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/mcorepe.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/mcorepe.sc?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -76,7 +76,7 @@ SECTIONS\n     ${CONSTRUCTING+ ___DTOR_LIST__ = .; __DTOR_LIST__ = . ;\n \t\t\tLONG (-1); *(.dtors); *(.dtor);  LONG (0); }\n     ${RELOCATING+ KEEP (*(SORT_NONE(.fini)))}\n-    /* ??? Why is .gcc_exc here?  */\n+    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}\n     ${RELOCATING+ *(.gcc_exc)}\n     ${RELOCATING+ etext = .;}\n     *(.gcc_except_table)"
    },
    {
      "sha": "8b5e1a1dad77e67ad58ac7cd7ec49a0c2bc46eb5",
      "filename": "ld/scripttempl/pe.sc",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/pe.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/pe.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/pe.sc?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -104,6 +104,7 @@ SECTIONS\n           expectation that they will be overridden by the definitions\n \t  here.  If we PROVIDE the symbols then they will not be\n \t  overridden and global constructors will not be run.\n+\t  See PR 22762 for more details.\n \t  \n \t  This does mean that it is not possible for a user to define\n \t  their own __CTOR_LIST__ and __DTOR_LIST__ symbols; if they do,\n@@ -113,7 +114,9 @@ SECTIONS\n \t  (The custom script can just be a copy of this script with the\n \t  PROVIDE() qualifiers added).\n \n-\t  See PR 22762 for more details.  */\n+\t  In particular this means that ld -Ur does not work, because\n+\t  the proper __CTOR_LIST__ set by ld -Ur is overridden by a\n+\t  bogus __CTOR_LIST__ set by the final link.  See PR 46.  */\n        ___CTOR_LIST__ = .;\n        __CTOR_LIST__ = .;\n        LONG (-1);\n@@ -134,7 +137,7 @@ SECTIONS\n        LONG (0);\n      }\n     ${RELOCATING+KEEP (*(SORT_NONE(.fini)))}\n-    /* ??? Why is .gcc_exc here?  */\n+    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}\n     ${RELOCATING+ *(.gcc_exc)}\n     ${RELOCATING+PROVIDE (etext = .);}\n     ${RELOCATING+PROVIDE (_etext = .);}"
    },
    {
      "sha": "950f578c7a6726f9a0c0edd28f8005d66f977b89",
      "filename": "ld/scripttempl/pep.sc",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/pep.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/scripttempl/pep.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/pep.sc?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -105,6 +105,7 @@ SECTIONS\n           expectation that they will be overridden by the definitions\n \t  here.  If we PROVIDE the symbols then they will not be\n \t  overridden and global constructors will not be run.\n+\t  See PR 22762 for more details.\n \t  \n \t  This does mean that it is not possible for a user to define\n \t  their own __CTOR_LIST__ and __DTOR_LIST__ symbols; if they do,\n@@ -114,7 +115,9 @@ SECTIONS\n \t  (The custom script can just be a copy of this script with the\n \t  PROVIDE() qualifiers added).\n \n-\t  See PR 22762 for more details.  */\n+\t  In particular this means that ld -Ur does not work, because\n+\t  the proper __CTOR_LIST__ set by ld -Ur is overridden by a\n+\t  bogus __CTOR_LIST__ set by the final link.  See PR 46.  */\n        ___CTOR_LIST__ = .;\n        __CTOR_LIST__ = .;\n        LONG (-1); LONG (-1);\n@@ -135,7 +138,7 @@ SECTIONS\n        LONG (0); LONG (0);\n      }\n     ${RELOCATING+KEEP (*(SORT_NONE(.fini)))}\n-    /* ??? Why is .gcc_exc here?  */\n+    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}\n     ${RELOCATING+ *(.gcc_exc)}\n     ${RELOCATING+PROVIDE (etext = .);}\n     ${RELOCATING+ KEEP (*(.gcc_except_table))}"
    },
    {
      "sha": "06285386d63594537a12bb63e17e735850c6b788",
      "filename": "ld/testsuite/ld-cdtest/cdtest.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/testsuite/ld-cdtest/cdtest.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4/ld/testsuite/ld-cdtest/cdtest.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-cdtest/cdtest.exp?ref=5b537ffc55757b05ca2d7dbd1bbe2d59d88c24a4",
      "patch": "@@ -92,6 +92,11 @@ if ![ld_link $CC tmpdir/cdtest {tmpdir/cdtest-foo.o tmpdir/cdtest-bar.o tmpdir/c\n     }\n }\n \n+# PR 46\n+if [is_pecoff_format] {\n+    setup_xfail *-*-*\n+}\n+\n if ![ld_relocate $ld tmpdir/cdtest.o {-Ur tmpdir/cdtest-foo.o tmpdir/cdtest-bar.o tmpdir/cdtest-main.o}] {\n     fail $test2\n } else {"
    }
  ]
}