{
  "sha": "965bc1df876f87dfc502169c0713ad275fba4803",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTY1YmMxZGY4NzZmODdkZmM1MDIxNjljMDcxM2FkMjc1ZmJhNDgwMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-07-06T19:05:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-02T16:48:30Z"
    },
    "message": "Handle compiler-generated suffixes in Ada names\n\nThe compiler may add a suffix to a mangled name.  A typical example\nwould be splitting a function and creating a \".cold\" variant.\n\nThis patch changes Ada decoding (aka demangling) to handle these\nsuffixes.  It also changes the encoding process to handle them as\nwell.\n\nA symbol like \"function.cold\" will now be displayed to the user as\n\"function[cold]\".  The \".\" is not simply preserved because that is\nalready used in Ada.",
    "tree": {
      "sha": "e976d286da3d292e1249118e5561adf9d79cc857",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e976d286da3d292e1249118e5561adf9d79cc857"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/965bc1df876f87dfc502169c0713ad275fba4803",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/965bc1df876f87dfc502169c0713ad275fba4803",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/965bc1df876f87dfc502169c0713ad275fba4803",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/965bc1df876f87dfc502169c0713ad275fba4803/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9698f7141065f5eaea44a17331b3f29ae712a79e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9698f7141065f5eaea44a17331b3f29ae712a79e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9698f7141065f5eaea44a17331b3f29ae712a79e"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 120,
    "deletions": 1
  },
  "files": [
    {
      "sha": "6680a4fd65769eab77bc1eb87bb193ce31bd9ebd",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/965bc1df876f87dfc502169c0713ad275fba4803/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/965bc1df876f87dfc502169c0713ad275fba4803/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=965bc1df876f87dfc502169c0713ad275fba4803",
      "patch": "@@ -846,6 +846,21 @@ const struct ada_opname_map ada_opname_table[] = {\n   {NULL, NULL}\n };\n \n+/* If STR is a decoded version of a compiler-provided suffix (like the\n+   \"[cold]\" in \"symbol[cold]\"), return true.  Otherwise, return\n+   false.  */\n+\n+static bool\n+is_compiler_suffix (const char *str)\n+{\n+  gdb_assert (*str == '[');\n+  ++str;\n+  while (*str != '\\0' && isalpha (*str))\n+    ++str;\n+  /* We accept a missing \"]\" in order to support completion.  */\n+  return *str == '\\0' || (str[0] == ']' && str[1] == '\\0');\n+}\n+\n /* The \"encoded\" form of DECODED, according to GNAT conventions.  If\n    THROW_ERRORS, throw an error if invalid operator name is found.\n    Otherwise, return the empty string in that case.  */\n@@ -861,6 +876,13 @@ ada_encode_1 (const char *decoded, bool throw_errors)\n     {\n       if (*p == '.')\n \tencoding_buffer.append (\"__\");\n+      else if (*p == '[' && is_compiler_suffix (p))\n+\t{\n+\t  encoding_buffer = encoding_buffer + \".\" + (p + 1);\n+\t  if (encoding_buffer.back () == ']')\n+\t    encoding_buffer.pop_back ();\n+\t  break;\n+\t}\n       else if (*p == '\"')\n \t{\n \t  const struct ada_opname_map *mapping;\n@@ -977,6 +999,24 @@ ada_remove_po_subprogram_suffix (const char *encoded, int *len)\n     *len = *len - 1;\n }\n \n+/* If ENCODED ends with a compiler-provided suffix (like \".cold\"),\n+   then update *LEN to remove the suffix and return the offset of the\n+   character just past the \".\".  Otherwise, return -1.  */\n+\n+static int\n+remove_compiler_suffix (const char *encoded, int *len)\n+{\n+  int offset = *len - 1;\n+  while (offset > 0 && isalpha (encoded[offset]))\n+    --offset;\n+  if (offset > 0 && encoded[offset] == '.')\n+    {\n+      *len = offset;\n+      return offset + 1;\n+    }\n+  return -1;\n+}\n+\n /* See ada-lang.h.  */\n \n std::string\n@@ -987,6 +1027,7 @@ ada_decode (const char *encoded, bool wrap)\n   const char *p;\n   int at_start_name;\n   std::string decoded;\n+  int suffix = -1;\n \n   /* With function descriptors on PPC64, the value of a symbol named\n      \".FN\", if it exists, is the entry point of the function \"FN\".  */\n@@ -1007,6 +1048,8 @@ ada_decode (const char *encoded, bool wrap)\n \n   len0 = strlen (encoded);\n \n+  suffix = remove_compiler_suffix (encoded, &len0);\n+\n   ada_remove_trailing_digits (encoded, &len0);\n   ada_remove_po_subprogram_suffix (encoded, &len0);\n \n@@ -1212,6 +1255,10 @@ ada_decode (const char *encoded, bool wrap)\n     if (isupper (decoded[i]) || decoded[i] == ' ')\n       goto Suppress;\n \n+  /* If the compiler added a suffix, append it now.  */\n+  if (suffix >= 0)\n+    decoded = decoded + \"[\" + &encoded[suffix] + \"]\";\n+\n   return decoded;\n \n Suppress:"
    },
    {
      "sha": "32b58f5907a2c7a321b3e10a08be8a2bd70e249b",
      "filename": "gdb/testsuite/gdb.ada/complete.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/965bc1df876f87dfc502169c0713ad275fba4803/gdb/testsuite/gdb.ada/complete.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/965bc1df876f87dfc502169c0713ad275fba4803/gdb/testsuite/gdb.ada/complete.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/complete.exp?ref=965bc1df876f87dfc502169c0713ad275fba4803",
      "patch": "@@ -226,7 +226,7 @@ gdb_test_no_output \"set max-completions unlimited\"\n \n set test \"complete break ada\"\n gdb_test_multiple \"$test\" $test {\n-    -re \"^$test$eol\\(break ada\\[-a-z0-9._@/\\]*$eol\\)+$gdb_prompt $\" {\n+    -re \"^$test$eol\\(break ada\\[\\]\\[a-z0-9._@/-\\]*$eol\\)+$gdb_prompt $\" {\n         pass $test\n     }\n     -re \"\\[A-Z\\].*$gdb_prompt $\" {"
    },
    {
      "sha": "2e4441aee357cfd0508d1a5e50b5396b578b4a24",
      "filename": "gdb/testsuite/gdb.dwarf2/ada-cold-name.exp",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/965bc1df876f87dfc502169c0713ad275fba4803/gdb/testsuite/gdb.dwarf2/ada-cold-name.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/965bc1df876f87dfc502169c0713ad275fba4803/gdb/testsuite/gdb.dwarf2/ada-cold-name.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/ada-cold-name.exp?ref=965bc1df876f87dfc502169c0713ad275fba4803",
      "patch": "@@ -0,0 +1,72 @@\n+# Copyright 2019-2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"cold\" suffix handling.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile ada-linkage-name.c -debug.S\n+\n+# Set up the DWARF for the test.\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+                {DW_AT_language @DW_LANG_Ada95}\n+                {DW_AT_name     $srcfile}\n+                {DW_AT_comp_dir /tmp}\n+        } {\n+\t    declare_labels b_l\n+\n+\t    b_l: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 1 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      bool}\n+\t    }\n+\n+            DW_TAG_subprogram {\n+                {name pck__xtra__function.cold}\n+\t\t{MACRO_AT_range {first}}\n+                {type :$b_l}\n+\t    }\n+\n+            DW_TAG_subprogram {\n+                {name pck__xtra__function}\n+                {MACRO_AT_range {second}}\n+                {type :$b_l}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+gdb_test_no_output \"set language ada\"\n+gdb_breakpoint \"pck.xtra.function\" message\n+gdb_breakpoint \"pck.xtra.function\\[cold\\]\" message\n+gdb_test \"complete break pck.xtra.function\\[co\" \\\n+    \"break pck.xtra.function\\\\\\[cold\\\\\\]\" \\\n+    \"test completion of cold function\""
    }
  ]
}