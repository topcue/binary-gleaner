{
  "sha": "9e021579fa12f4546a53d031f1293753305eec4b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWUwMjE1NzlmYTEyZjQ1NDZhNTNkMDMxZjEyOTM3NTMzMDVlZWM0Yg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:54Z"
    },
    "message": "Add dwarf2_per_objfile field to dwarf2_cu\n\nSubsequent patches will make dwarf2_per_cu_data objfile-independent.\nThis means that the dwarf2_per_cu_data::dwarf2_per_objfile field must\ngo.\n\nThe code using a dwarf2_cu structure currently accesses the current\ndwarf2_per_objfile object through dwarf2_cu->per_cu->dwarf2_per_objfile.\nSince it's ok for the dwarf2_cu to know about the current objfile (a\ndwarf2_cu is always used in the context of a particular objfile), add a\ndwarf2_per_objfile field to dwarf2_cu.  Upcoming patches will gradually\nremove uses of dwarf2_per_cu_data::dwarf2_per_objfile in favor of\ndwarf2_cu::dwarf2_per_objfile, until the former can be removed.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (struct dwarf2_cu) <dwarf2_cu>: Add parameter.\n\t<per_objfile>: New member.\n\t(class cutu_reader) <init_tu_and_read_dwo_dies>: Add parameter.\n\t(cutu_reader::init_tu_and_read_dwo_dies): Add parameter, update\n\tcall to dwarf2_cu.\n\t(cutu_reader::cutu_reader): Update.\n\t(dwarf2_cu::dwarf2_cu): Add parameter, initialize per_objfile.\n\nChange-Id: I8fd0da7371f65baea1ea7787aad08e10453bc565",
    "tree": {
      "sha": "b8e8a1b8fbaa264f5d9a9d67520baf3303297ad8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8e8a1b8fbaa264f5d9a9d67520baf3303297ad8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9e021579fa12f4546a53d031f1293753305eec4b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e021579fa12f4546a53d031f1293753305eec4b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9e021579fa12f4546a53d031f1293753305eec4b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e021579fa12f4546a53d031f1293753305eec4b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae090bdbf8876d4f72f357cf78301b5e8ec13751",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae090bdbf8876d4f72f357cf78301b5e8ec13751",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae090bdbf8876d4f72f357cf78301b5e8ec13751"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 28,
    "deletions": 10
  },
  "files": [
    {
      "sha": "436da4d75c053b03abbcb3ef1df47e0f9ccd7525",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e021579fa12f4546a53d031f1293753305eec4b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e021579fa12f4546a53d031f1293753305eec4b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9e021579fa12f4546a53d031f1293753305eec4b",
      "patch": "@@ -1,3 +1,13 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (struct dwarf2_cu) <dwarf2_cu>: Add parameter.\n+\t<per_objfile>: New member.\n+\t(class cutu_reader) <init_tu_and_read_dwo_dies>: Add parameter.\n+\t(cutu_reader::init_tu_and_read_dwo_dies): Add parameter, update\n+\tcall to dwarf2_cu.\n+\t(cutu_reader::cutu_reader): Update.\n+\t(dwarf2_cu::dwarf2_cu): Add parameter, initialize per_objfile.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_bfd) <die_type_hash>: Move to"
    },
    {
      "sha": "ef64d13947c693d2e44d75c93e012259820897a4",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 18,
      "deletions": 10,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e021579fa12f4546a53d031f1293753305eec4b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e021579fa12f4546a53d031f1293753305eec4b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9e021579fa12f4546a53d031f1293753305eec4b",
      "patch": "@@ -399,7 +399,8 @@ struct delayed_method_info\n /* Internal state when decoding a particular compilation unit.  */\n struct dwarf2_cu\n {\n-  explicit dwarf2_cu (struct dwarf2_per_cu_data *per_cu);\n+  explicit dwarf2_cu (dwarf2_per_cu_data *per_cu,\n+\t\t      dwarf2_per_objfile *per_objfile);\n   ~dwarf2_cu ();\n \n   DISABLE_COPY_AND_ASSIGN (dwarf2_cu);\n@@ -466,6 +467,9 @@ struct dwarf2_cu\n   /* Backlink to our per_cu entry.  */\n   struct dwarf2_per_cu_data *per_cu;\n \n+  /* The dwarf2_per_objfile that owns this.  */\n+  struct dwarf2_per_objfile *per_objfile;\n+\n   /* How many compilation units ago was this CU last referenced?  */\n   int last_used = 0;\n \n@@ -928,7 +932,8 @@ class cutu_reader : public die_reader_specs\n   void keep ();\n \n private:\n-  void init_tu_and_read_dwo_dies (struct dwarf2_per_cu_data *this_cu,\n+  void init_tu_and_read_dwo_dies (dwarf2_per_cu_data *this_cu,\n+\t\t\t\t  dwarf2_per_objfile *per_objfile,\n \t\t\t\t  int use_existing_cu);\n \n   struct dwarf2_per_cu_data *m_this_cu;\n@@ -6888,7 +6893,8 @@ lookup_dwo_unit (struct dwarf2_per_cu_data *this_cu,\n    Read a TU directly from a DWO file, bypassing the stub.  */\n \n void\n-cutu_reader::init_tu_and_read_dwo_dies (struct dwarf2_per_cu_data *this_cu,\n+cutu_reader::init_tu_and_read_dwo_dies (dwarf2_per_cu_data *this_cu,\n+\t\t\t\t\tdwarf2_per_objfile *per_objfile,\n \t\t\t\t\tint use_existing_cu)\n {\n   struct signatured_type *sig_type;\n@@ -6909,7 +6915,7 @@ cutu_reader::init_tu_and_read_dwo_dies (struct dwarf2_per_cu_data *this_cu,\n     {\n       /* If !use_existing_cu, this_cu->cu must be NULL.  */\n       gdb_assert (this_cu->cu == NULL);\n-      m_new_cu.reset (new dwarf2_cu (this_cu));\n+      m_new_cu.reset (new dwarf2_cu (this_cu, per_objfile));\n     }\n \n   /* A future optimization, if needed, would be to use an existing\n@@ -6970,7 +6976,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n       /* Narrow down the scope of possibilities to have to understand.  */\n       gdb_assert (this_cu->is_debug_types);\n       gdb_assert (abbrev_table == NULL);\n-      init_tu_and_read_dwo_dies (this_cu, use_existing_cu);\n+      init_tu_and_read_dwo_dies (this_cu, dwarf2_per_objfile, use_existing_cu);\n       return;\n     }\n \n@@ -6997,7 +7003,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n     {\n       /* If !use_existing_cu, this_cu->cu must be NULL.  */\n       gdb_assert (this_cu->cu == NULL);\n-      m_new_cu.reset (new dwarf2_cu (this_cu));\n+      m_new_cu.reset (new dwarf2_cu (this_cu, dwarf2_per_objfile));\n       cu = m_new_cu.get ();\n     }\n \n@@ -7189,7 +7195,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n   /* This is cheap if the section is already read in.  */\n   section->read (objfile);\n \n-  m_new_cu.reset (new dwarf2_cu (this_cu));\n+  m_new_cu.reset (new dwarf2_cu (this_cu, dwarf2_per_objfile));\n \n   begin_info_ptr = info_ptr = section->buffer + to_underlying (this_cu->sect_off);\n   info_ptr = read_and_check_comp_unit_head (dwarf2_per_objfile,\n@@ -23514,10 +23520,12 @@ run_test ()\n \n #endif /* GDB_SELF_TEST */\n \n-/* Initialize dwarf2_cu CU, owned by PER_CU.  */\n+/* Initialize dwarf2_cu to read PER_CU, in the context of PER_OBJFILE.  */\n \n-dwarf2_cu::dwarf2_cu (struct dwarf2_per_cu_data *per_cu_)\n-  : per_cu (per_cu_),\n+dwarf2_cu::dwarf2_cu (dwarf2_per_cu_data *per_cu,\n+\t\t      dwarf2_per_objfile *per_objfile)\n+  : per_cu (per_cu),\n+    per_objfile (per_objfile),\n     mark (false),\n     has_loclist (false),\n     checked_producer (false),"
    }
  ]
}