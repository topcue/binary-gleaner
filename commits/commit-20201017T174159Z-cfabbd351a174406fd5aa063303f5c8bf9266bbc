{
  "sha": "cfabbd351a174406fd5aa063303f5c8bf9266bbc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2ZhYmJkMzUxYTE3NDQwNmZkNWFhMDYzMzAzZjVjOGJmOTI2NmJiYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-17T17:41:59Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-17T17:41:59Z"
    },
    "message": "Make range types inherit signed-ness from base type\n\nI ran across this comment in valprint.c:\n\n      /* FIXME: create_static_range_type does not set the unsigned bit in a\n         range type (I think it probably should copy it from the target\n         type), so we won't print values which are too large to\n         fit in a signed integer correctly.  */\n\nIt seems to me that a range type ought to inherit its signed-ness from\nthe underlying type, so this patch implements this change, and removes\nthe comment.  (It was also copied into m2-valprint.c.)\n\nI also remove the comment about handling ranges of enums, because I\nthink that comment is incorrect.\n\ngdb/ChangeLog\n2020-10-17  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (generic_value_print): Remove comment.\n\t* m2-valprint.c (m2_value_print_inner): Remove comment.\n\t* gdbtypes.c (create_range_type): Set TYPE_UNSIGNED from base\n\ttype.",
    "tree": {
      "sha": "7ced6e989556f3816728d610997f94bb76f9db72",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7ced6e989556f3816728d610997f94bb76f9db72"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cfabbd351a174406fd5aa063303f5c8bf9266bbc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cfabbd351a174406fd5aa063303f5c8bf9266bbc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cfabbd351a174406fd5aa063303f5c8bf9266bbc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cfabbd351a174406fd5aa063303f5c8bf9266bbc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9717970a4e374218fe74c99cf5bc7f1d45adbf0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9717970a4e374218fe74c99cf5bc7f1d45adbf0e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9717970a4e374218fe74c99cf5bc7f1d45adbf0e"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 8,
    "deletions": 27
  },
  "files": [
    {
      "sha": "fc4b716fff3a85c4f18d3da6f237cdc9ae75847d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cfabbd351a174406fd5aa063303f5c8bf9266bbc",
      "patch": "@@ -1,3 +1,10 @@\n+2020-10-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (generic_value_print): Remove comment.\n+\t* m2-valprint.c (m2_value_print_inner): Remove comment.\n+\t* gdbtypes.c (create_range_type): Set TYPE_UNSIGNED from base\n+\ttype.\n+\n 2020-10-17  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/26317"
    },
    {
      "sha": "e7d9e4cef3e004218d028005803ab09d36877ade",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 10,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=cfabbd351a174406fd5aa063303f5c8bf9266bbc",
      "patch": "@@ -950,16 +950,7 @@ create_range_type (struct type *result_type, struct type *index_type,\n \n   result_type->set_bounds (bounds);\n \n-  if (low_bound->kind () == PROP_CONST && low_bound->const_val () >= 0)\n-    result_type->set_is_unsigned (true);\n-\n-  /* Ada allows the declaration of range types whose upper bound is\n-     less than the lower bound, so checking the lower bound is not\n-     enough.  Make sure we do not mark a range type whose upper bound\n-     is negative as unsigned.  */\n-  if (high_bound->kind () == PROP_CONST && high_bound->const_val () < 0)\n-    result_type->set_is_unsigned (false);\n-\n+  result_type->set_is_unsigned (index_type->is_unsigned ());\n   result_type->set_endianity_is_not_default\n     (index_type->endianity_is_not_default ());\n "
    },
    {
      "sha": "c285543f4bfd5379f1b9732c91b51ed4519b4a12",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=cfabbd351a174406fd5aa063303f5c8bf9266bbc",
      "patch": "@@ -448,13 +448,6 @@ m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n \t  m2_value_print_inner (v, stream, recurse, options);\n \t  break;\n \t}\n-      /* FIXME: create_static_range_type does not set the unsigned bit in a\n-         range type (I think it probably should copy it from the target\n-         type), so we won't print values which are too large to\n-         fit in a signed integer correctly.  */\n-      /* FIXME: Doesn't handle ranges of enums correctly.  (Can't just\n-         print with the target type, though, because the size of our type\n-         and the target type might differ).  */\n       /* FALLTHROUGH */\n \n     case TYPE_CODE_REF:"
    },
    {
      "sha": "dd70a1a3933957998ed6de8ec3560c2ba47635a7",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cfabbd351a174406fd5aa063303f5c8bf9266bbc/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=cfabbd351a174406fd5aa063303f5c8bf9266bbc",
      "patch": "@@ -893,16 +893,6 @@ generic_value_print (struct value *val, struct ui_file *stream, int recurse,\n       break;\n \n     case TYPE_CODE_RANGE:\n-      /* FIXME: create_static_range_type does not set the unsigned bit in a\n-         range type (I think it probably should copy it from the\n-         target type), so we won't print values which are too large to\n-         fit in a signed integer correctly.  */\n-      /* FIXME: Doesn't handle ranges of enums correctly.  (Can't just\n-         print with the target type, though, because the size of our\n-         type and the target type might differ).  */\n-\n-      /* FALLTHROUGH */\n-\n     case TYPE_CODE_INT:\n       generic_value_print_int (val, stream, options);\n       break;"
    }
  ]
}