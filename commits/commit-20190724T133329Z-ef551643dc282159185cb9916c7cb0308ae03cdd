{
  "sha": "ef551643dc282159185cb9916c7cb0308ae03cdd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWY1NTE2NDNkYzI4MjE1OTE4NWNiOTkxNmM3Y2IwMzA4YWUwM2NkZA==",
  "commit": {
    "author": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@gmail.com",
      "date": "2019-07-24T13:33:29Z"
    },
    "committer": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@gmail.com",
      "date": "2019-07-24T13:33:29Z"
    },
    "message": "[ARC] Add linker relaxation.\n\nAdd linker relaxation. The first relaxation added is converting\nGOTPC32 to PCREL relocations. This relaxation doesn't change the size of\nthe binary.\n\nbfd/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* elf32-arc.c (bfd_get_32_me): New function.\n\t(bfd_put_32_me): Likewise.\n\t(arc_elf_relax_section): Likewise.\n\t(bfd_elf32_bfd_relax_section): Define.\n\nld/testsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* ld-arc/relax-local-pic.d: New test.\n\t* ld-arc/relax-local-pic.s: New file.",
    "tree": {
      "sha": "90007b800835a19087ca4580e7a061ca5dad491e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/90007b800835a19087ca4580e7a061ca5dad491e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ef551643dc282159185cb9916c7cb0308ae03cdd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef551643dc282159185cb9916c7cb0308ae03cdd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ef551643dc282159185cb9916c7cb0308ae03cdd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef551643dc282159185cb9916c7cb0308ae03cdd/comments",
  "author": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c54e42531adb7bf8d58bd4c3c8e0c710305959e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c54e42531adb7bf8d58bd4c3c8e0c710305959e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c54e42531adb7bf8d58bd4c3c8e0c710305959e1"
    }
  ],
  "stats": {
    "total": 218,
    "additions": 218,
    "deletions": 0
  },
  "files": [
    {
      "sha": "50027c63f3fbbdaec4892fbb5cd42752ca0637fe",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef551643dc282159185cb9916c7cb0308ae03cdd/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef551643dc282159185cb9916c7cb0308ae03cdd/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ef551643dc282159185cb9916c7cb0308ae03cdd",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-24  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* elf32-arc.c (bfd_get_32_me): New function.\n+\t(bfd_put_32_me): Likewise.\n+\t(arc_elf_relax_section): Likewise.\n+\t(bfd_elf32_bfd_relax_section): Define.\n+\n 2019-07-24  Alan Modra  <amodra@gmail.com>\n \n \t* elf-bfd.h (struct elf_backend_data): Return bfd_boolean from"
    },
    {
      "sha": "b069e3fda5ccf3585dce3ebb83725f0c3e31ec7d",
      "filename": "bfd/elf32-arc.c",
      "status": "modified",
      "additions": 176,
      "deletions": 0,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef551643dc282159185cb9916c7cb0308ae03cdd/bfd/elf32-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef551643dc282159185cb9916c7cb0308ae03cdd/bfd/elf32-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arc.c?ref=ef551643dc282159185cb9916c7cb0308ae03cdd",
      "patch": "@@ -96,6 +96,31 @@ reloc_type_to_name (unsigned int type)\n \n #define USE_REL 1\n \n+static bfd_vma\n+bfd_get_32_me (bfd * abfd,const unsigned char * data)\n+{\n+  bfd_vma value = 0;\n+\n+  if (bfd_big_endian(abfd)) {\n+    value = bfd_get_32 (abfd, data);\n+  }\n+  else {\n+    value = ((bfd_get_8 (abfd, data) & 255) << 16);\n+    value |= ((bfd_get_8 (abfd, data + 1) & 255) << 24);\n+    value |= (bfd_get_8 (abfd, data + 2) & 255);\n+    value |= ((bfd_get_8 (abfd, data + 3) & 255) << 8);\n+  }\n+\n+  return value;\n+}\n+\n+static void\n+bfd_put_32_me (bfd *abfd, bfd_vma value,unsigned char *data)\n+{\n+  bfd_put_16 (abfd, (value & 0xffff0000) >> 16, data);\n+  bfd_put_16 (abfd, value & 0xffff, data + 2);\n+}\n+\n static ATTRIBUTE_UNUSED bfd_boolean\n is_reloc_PC_relative (reloc_howto_type *howto)\n {\n@@ -2968,6 +2993,156 @@ elf32_arc_section_from_shdr (bfd *abfd,\n   return TRUE;\n }\n \n+/* Relaxation hook.\n+\n+   These are the current relaxing opportunities available:\n+\n+   * R_ARC_GOTPC32 => R_ARC_PCREL.\n+\n+*/\n+\n+static bfd_boolean\n+arc_elf_relax_section (bfd *abfd, asection *sec,\n+\t\t       struct bfd_link_info *link_info, bfd_boolean *again)\n+{\n+  Elf_Internal_Shdr *symtab_hdr;\n+  Elf_Internal_Rela *internal_relocs;\n+  Elf_Internal_Rela *irel, *irelend;\n+  bfd_byte *contents = NULL;\n+  Elf_Internal_Sym *isymbuf = NULL;\n+\n+  /* Assume nothing changes.  */\n+  *again = FALSE;\n+\n+  /* We don't have to do anything for a relocatable link, if this\n+     section does not have relocs, or if this is not a code\n+     section.  */\n+  if (bfd_link_relocatable (link_info)\n+      || (sec->flags & SEC_RELOC) == 0\n+      || sec->reloc_count == 0\n+      || (sec->flags & SEC_CODE) == 0)\n+    return TRUE;\n+\n+  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n+\n+  /* Get a copy of the native relocations.  */\n+  internal_relocs = _bfd_elf_link_read_relocs (abfd, sec, NULL, NULL,\n+                                               link_info->keep_memory);\n+  if (internal_relocs == NULL)\n+    goto error_return;\n+\n+  /* Walk through them looking for relaxing opportunities.  */\n+  irelend = internal_relocs + sec->reloc_count;\n+  for (irel = internal_relocs; irel < irelend; irel++)\n+    {\n+      /* If this isn't something that can be relaxed, then ignore\n+         this reloc.  */\n+      if (ELF32_R_TYPE (irel->r_info) != (int) R_ARC_GOTPC32)\n+        continue;\n+\n+      /* Get the section contents if we haven't done so already.  */\n+      if (contents == NULL)\n+        {\n+          /* Get cached copy if it exists.  */\n+          if (elf_section_data (sec)->this_hdr.contents != NULL)\n+            contents = elf_section_data (sec)->this_hdr.contents;\n+          /* Go get them off disk.  */\n+          else if (!bfd_malloc_and_get_section (abfd, sec, &contents))\n+            goto error_return;\n+        }\n+\n+      /* Read this BFD's local symbols if we haven't done so already.  */\n+      if (isymbuf == NULL && symtab_hdr->sh_info != 0)\n+        {\n+          isymbuf = (Elf_Internal_Sym *) symtab_hdr->contents;\n+          if (isymbuf == NULL)\n+            isymbuf = bfd_elf_get_elf_syms (abfd, symtab_hdr,\n+                                            symtab_hdr->sh_info, 0,\n+                                            NULL, NULL, NULL);\n+          if (isymbuf == NULL)\n+            goto error_return;\n+        }\n+\n+      struct elf_link_hash_entry *htop = NULL;\n+\n+      if (ELF32_R_SYM (irel->r_info) >= symtab_hdr->sh_info)\n+\t{\n+\t  /* An external symbol.  */\n+\t  unsigned int indx = ELF32_R_SYM (irel->r_info) - symtab_hdr->sh_info;\n+\t  htop = elf_sym_hashes (abfd)[indx];\n+\t}\n+\n+      if (ELF32_R_TYPE (irel->r_info) == (int) R_ARC_GOTPC32\n+\t  && SYMBOL_REFERENCES_LOCAL (link_info, htop))\n+\t{\n+\t  unsigned int code;\n+\n+\t  /* Get the opcode.  */\n+\t  code = bfd_get_32_me (abfd, contents + irel->r_offset - 4);\n+\n+\t  /* Note that we've changed the relocs, section contents, etc.  */\n+\t  elf_section_data (sec)->relocs = internal_relocs;\n+\t  elf_section_data (sec)->this_hdr.contents = contents;\n+\t  symtab_hdr->contents = (unsigned char *) isymbuf;\n+\n+\t  /* Fix the relocation's type.  */\n+\t  irel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info), R_ARC_PC32);\n+\n+\t  /* ld rA,[pcl,symbol@tgot] -> add rA,pcl,symbol@pcl.  */\n+\t  /* 0010 0bbb aa11 0ZZX DBBB 1111 10AA AAAA.\n+\t           111 00    000 0111        xx xxxx*/\n+\t  code &= ~0x27307F80;\n+\t  BFD_ASSERT (code <= 62UL);\n+\t  code |= 0x27007F80;\n+\n+\t  /* Write back the new instruction.  */\n+\t  bfd_put_32_me (abfd, code, contents + irel->r_offset - 4);\n+\n+\t  /* The size isn't changed, don't redo.  */\n+\t  *again = FALSE;\n+\t}\n+    }\n+\n+  if (isymbuf != NULL\n+      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+    {\n+      if (!link_info->keep_memory)\n+        free (isymbuf);\n+      else\n+       /* Cache the symbols for elf_link_input_bfd.  */\n+       symtab_hdr->contents = (unsigned char *) isymbuf;\n+    }\n+\n+  if (contents != NULL\n+      && elf_section_data (sec)->this_hdr.contents != contents)\n+    {\n+      if (!link_info->keep_memory)\n+        free (contents);\n+      else\n+       /* Cache the section contents for elf_link_input_bfd.  */\n+       elf_section_data (sec)->this_hdr.contents = contents;\n+    }\n+\n+  if (internal_relocs != NULL\n+      && elf_section_data (sec)->relocs != internal_relocs)\n+    free (internal_relocs);\n+\n+  return TRUE;\n+\n+ error_return:\n+  if (isymbuf != NULL\n+      && symtab_hdr->contents != (unsigned char *) isymbuf)\n+    free (isymbuf);\n+  if (contents != NULL\n+      && elf_section_data (sec)->this_hdr.contents != contents)\n+    free (contents);\n+  if (internal_relocs != NULL\n+      && elf_section_data (sec)->relocs != internal_relocs)\n+    free (internal_relocs);\n+\n+  return FALSE;\n+}\n+\n #define TARGET_LITTLE_SYM   arc_elf32_le_vec\n #define TARGET_LITTLE_NAME  \"elf32-littlearc\"\n #define TARGET_BIG_SYM\t    arc_elf32_be_vec\n@@ -2985,6 +3160,7 @@ elf32_arc_section_from_shdr (bfd *abfd,\n #define bfd_elf32_bfd_set_private_flags\t\tarc_elf_set_private_flags\n #define bfd_elf32_bfd_print_private_bfd_data    arc_elf_print_private_bfd_data\n #define bfd_elf32_bfd_copy_private_bfd_data     arc_elf_copy_private_bfd_data\n+#define bfd_elf32_bfd_relax_section\t\tarc_elf_relax_section\n \n #define elf_info_to_howto_rel\t\t     arc_info_to_howto_rel\n #define elf_backend_object_p\t\t     arc_elf_object_p"
    },
    {
      "sha": "b42f4a7ecb923806b08dd71ab32b771e449900dc",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef551643dc282159185cb9916c7cb0308ae03cdd/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef551643dc282159185cb9916c7cb0308ae03cdd/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=ef551643dc282159185cb9916c7cb0308ae03cdd",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-24  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* ld-arc/relax-local-pic.d: New test.\n+\t* ld-arc/relax-local-pic.s: New file.\n+\n 2019-07-22  Martin Liska  <mliska@suse.cz>\n \n \t* testsuite/ld-plugin/lto-3r.d: Remove."
    },
    {
      "sha": "5ed268809ab26c5831e46ea5669a83c7ffbe01c8",
      "filename": "ld/testsuite/ld-arc/relax-local-pic.d",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef551643dc282159185cb9916c7cb0308ae03cdd/ld/testsuite/ld-arc/relax-local-pic.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef551643dc282159185cb9916c7cb0308ae03cdd/ld/testsuite/ld-arc/relax-local-pic.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arc/relax-local-pic.d?ref=ef551643dc282159185cb9916c7cb0308ae03cdd",
      "patch": "@@ -0,0 +1,14 @@\n+#source: relax-local-pic.s\n+#as:\n+#ld: -q -A elf32-arclittle -relax\n+#objdump: -dr\n+\n+[^:]+:     file format elf32-.*arc\n+\n+\n+Disassembly of section \\.text:\n+\n+00000100 <__start>:\n+ 100:\t2700 7f84 0000 [0-9a-f]+ \tadd\tr4,pcl,0x[0-9a-f]+.*\n+\t\t\t104: R_ARC_PC32\ta_in_other_thread\n+ 108:\t1c00 [0-9a-f\\s]+\tst\\s+.*"
    },
    {
      "sha": "66c48b4ad709bec00670110a0ccfa5176da73825",
      "filename": "ld/testsuite/ld-arc/relax-local-pic.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef551643dc282159185cb9916c7cb0308ae03cdd/ld/testsuite/ld-arc/relax-local-pic.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef551643dc282159185cb9916c7cb0308ae03cdd/ld/testsuite/ld-arc/relax-local-pic.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arc/relax-local-pic.s?ref=ef551643dc282159185cb9916c7cb0308ae03cdd",
      "patch": "@@ -0,0 +1,16 @@\n+        .section        .text\n+        .align 4\n+        .global __start\n+        .type __start, @function\n+__start:\n+        ld r4,[pcl,@a_in_other_thread@gotpc]\n+        st 1,[r4]\n+        .size __start, .-__start\n+\n+        .global a_in_other_thread\n+        .section .data\n+        .align 4\n+        .type a_in_other_thread, @object\n+        .size a_in_other_thread, 4\n+a_in_other_thread:\n+        .word -559038737"
    }
  ]
}