{
  "sha": "d0801dd8f22a3e739c6a7d126d45829df981794d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDA4MDFkZDhmMjJhM2U3MzljNmE3ZDEyNmQ0NTgyOWRmOTgxNzk0ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-10T12:56:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-12-12T22:50:55Z"
    },
    "message": "Store objfiles on a std::list\n\nThis removes objfile::next and changes objfiles to be stored in a\nstd::list.\n\ngdb/ChangeLog\n2019-12-12  Tom Tromey  <tom@tromey.com>\n\n\t* progspace.c (program_space::add_objfile)\n\t(program_space::remove_objfile): Update.\n\t(program_space::multi_objfile_p): Remove.\n\t* objfiles.h (struct objfile) <next>: Remove.\n\t* objfiles.c (objfile::objfile): Update.\n\t(put_objfile_before): Update.\n\t(unlink_objfile): Update.\n\t* progspace.h (object_files): Remove.\n\t(struct program_space) <objfiles_head>: Remove.\n\t<objfiles_list>: New member.\n\t<objfiles_range, objfiles_safe_range>: Change type.\n\t(objfiles): Change return type.\n\t(objfiles_safe): Update.\n\t(multi_objfile_p): Rewrite and inline.\n\t(object_files): Remove macro.\n\nChange-Id: Ib4430e3db6f9a390399924379a5c10426c514853",
    "tree": {
      "sha": "be0659729b37d9464c10d7991b1d250b4a785465",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be0659729b37d9464c10d7991b1d250b4a785465"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d0801dd8f22a3e739c6a7d126d45829df981794d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0801dd8f22a3e739c6a7d126d45829df981794d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d0801dd8f22a3e739c6a7d126d45829df981794d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0801dd8f22a3e739c6a7d126d45829df981794d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "13bff72615e5a93a6e5f28e83a594125e66ccced",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13bff72615e5a93a6e5f28e83a594125e66ccced",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/13bff72615e5a93a6e5f28e83a594125e66ccced"
    }
  ],
  "stats": {
    "total": 104,
    "additions": 45,
    "deletions": 59
  },
  "files": [
    {
      "sha": "9b96f3d8fd92cf1951233eb69fe90cf4cdf35169",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d0801dd8f22a3e739c6a7d126d45829df981794d",
      "patch": "@@ -1,3 +1,21 @@\n+2019-12-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* progspace.c (program_space::add_objfile)\n+\t(program_space::remove_objfile): Update.\n+\t(program_space::multi_objfile_p): Remove.\n+\t* objfiles.h (struct objfile) <next>: Remove.\n+\t* objfiles.c (objfile::objfile): Update.\n+\t(put_objfile_before): Update.\n+\t(unlink_objfile): Update.\n+\t* progspace.h (object_files): Remove.\n+\t(struct program_space) <objfiles_head>: Remove.\n+\t<objfiles_list>: New member.\n+\t<objfiles_range, objfiles_safe_range>: Change type.\n+\t(objfiles): Change return type.\n+\t(objfiles_safe): Update.\n+\t(multi_objfile_p): Rewrite and inline.\n+\t(object_files): Remove macro.\n+\n 2019-12-12  Tom Tromey  <tom@tromey.com>\n \n \t* gdbsupport/safe-iterator.h (basic_safe_iterator): Simplify.  Add"
    },
    {
      "sha": "31265c1653d944e32c9a618faf7e97b22e9a4056",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=d0801dd8f22a3e739c6a7d126d45829df981794d",
      "patch": "@@ -54,6 +54,7 @@\n #include \"btrace.h\"\n #include \"gdbsupport/pathstuff.h\"\n \n+#include <algorithm>\n #include <vector>\n \n /* Keep a registry of per-objfile data-pointers required by other GDB"
    },
    {
      "sha": "f9bf102bc80a354c433dff1d4068ce897db434dd",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=d0801dd8f22a3e739c6a7d126d45829df981794d",
      "patch": "@@ -486,12 +486,6 @@ struct objfile\n   }\n \n \n-  /* All struct objfile's are chained together by their next pointers.\n-     The program space field \"objfiles\"  (frequently referenced via\n-     the macro \"object_files\") points to the first link in this chain.  */\n-\n-  struct objfile *next = nullptr;\n-\n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized\n      (i.e., it has not been passed through gdb_realpath)."
    },
    {
      "sha": "d1bf0c6aba3dd5a546661da210101d05fa572f27",
      "filename": "gdb/progspace.c",
      "status": "modified",
      "additions": 14,
      "deletions": 38,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.c?ref=d0801dd8f22a3e739c6a7d126d45829df981794d",
      "patch": "@@ -25,6 +25,7 @@\n #include \"solib.h\"\n #include \"gdbthread.h\"\n #include \"inferior.h\"\n+#include <algorithm>\n \n /* The last program space number assigned.  */\n int last_program_space_num = 0;\n@@ -158,54 +159,29 @@ program_space::~program_space ()\n void\n program_space::add_objfile (struct objfile *objfile, struct objfile *before)\n {\n-  for (struct objfile **objp = &objfiles_head;\n-       *objp != NULL;\n-       objp = &((*objp)->next))\n+  if (before == nullptr)\n+    objfiles_list.push_back (objfile);\n+  else\n     {\n-      if (*objp == before)\n-\t{\n-\t  objfile->next = *objp;\n-\t  *objp = objfile;\n-\t  return;\n-\t}\n+      auto iter = std::find (objfiles_list.begin (), objfiles_list.end (),\n+\t\t\t     before);\n+      gdb_assert (iter != objfiles_list.end ());\n+      objfiles_list.insert (iter, objfile);\n     }\n-\n-  internal_error (__FILE__, __LINE__,\n-\t\t  _(\"put_objfile_before: before objfile not in list\"));\n-\n }\n \n /* See progspace.h.  */\n \n void\n program_space::remove_objfile (struct objfile *objfile)\n {\n-  struct objfile **objpp;\n-\n-  for (objpp = &object_files; *objpp != NULL; objpp = &((*objpp)->next))\n-    {\n-      if (*objpp == objfile)\n-\t{\n-\t  *objpp = (*objpp)->next;\n-\t  objfile->next = NULL;\n-\n-\t  if (objfile == symfile_object_file)\n-\t    symfile_object_file = NULL;\n+  auto iter = std::find (objfiles_list.begin (), objfiles_list.end (),\n+\t\t\t objfile);\n+  gdb_assert (iter != objfiles_list.end ());\n+  objfiles_list.erase (iter);\n \n-\t  return;\n-\t}\n-    }\n-\n-  internal_error (__FILE__, __LINE__,\n-\t\t  _(\"remove_objfile: objfile already unlinked\"));\n-}\n-\n-/* See progspace.h.  */\n-\n-bool\n-program_space::multi_objfile_p () const\n-{\n-  return objfiles_head != nullptr && objfiles_head->next != nullptr;\n+  if (objfile == symfile_object_file)\n+    symfile_object_file = NULL;\n }\n \n /* Copies program space SRC to DEST.  Copies the main executable file,"
    },
    {
      "sha": "a731eb6e24de73461d14eeddfd9cc4078c0308fa",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 12,
      "deletions": 15,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0801dd8f22a3e739c6a7d126d45829df981794d/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=d0801dd8f22a3e739c6a7d126d45829df981794d",
      "patch": "@@ -27,6 +27,7 @@\n #include \"registry.h\"\n #include \"gdbsupport/next-iterator.h\"\n #include \"gdbsupport/safe-iterator.h\"\n+#include <list>\n \n struct target_ops;\n struct bfd;\n@@ -138,20 +139,18 @@ struct program_space\n   program_space (address_space *aspace_);\n   ~program_space ();\n \n-  typedef next_adapter<struct objfile> objfiles_range;\n+  typedef std::list<struct objfile *> objfiles_range;\n \n   /* Return an iterable object that can be used to iterate over all\n      objfiles.  The basic use is in a foreach, like:\n \n      for (objfile *objf : pspace->objfiles ()) { ... }  */\n-  objfiles_range objfiles ()\n+  objfiles_range &objfiles ()\n   {\n-    return objfiles_range (objfiles_head);\n+    return objfiles_list;\n   }\n \n-  typedef next_adapter<struct objfile,\n-\t\t       basic_safe_iterator<next_iterator<objfile>>>\n-    objfiles_safe_range;\n+  typedef basic_safe_range<objfiles_range> objfiles_safe_range;\n \n   /* An iterable object that can be used to iterate over all objfiles.\n      The basic use is in a foreach, like:\n@@ -162,7 +161,7 @@ struct program_space\n      deleted during iteration.  */\n   objfiles_safe_range objfiles_safe ()\n   {\n-    return objfiles_safe_range (objfiles_head);\n+    return objfiles_safe_range (objfiles_list);\n   }\n \n   /* Add OBJFILE to the list of objfiles, putting it just before\n@@ -175,7 +174,10 @@ struct program_space\n \n   /* Return true if there is more than one object file loaded; false\n      otherwise.  */\n-  bool multi_objfile_p () const;\n+  bool multi_objfile_p () const\n+  {\n+    return objfiles_list.size () > 1;\n+  }\n \n \n   /* Pointer to next in linked list.  */\n@@ -228,9 +230,8 @@ struct program_space\n      (e.g. the argument to the \"symbol-file\" or \"file\" command).  */\n   struct objfile *symfile_object_file = NULL;\n \n-  /* All known objfiles are kept in a linked list.  This points to\n-     the head of this list.  */\n-  struct objfile *objfiles_head = NULL;\n+  /* All known objfiles are kept in a linked list.  */\n+  std::list<struct objfile *> objfiles_list;\n \n   /* The set of target sections matching the sections mapped into\n      this program space.  Managed by both exec_ops and solib.c.  */\n@@ -271,10 +272,6 @@ struct address_space\n \n #define symfile_objfile current_program_space->symfile_object_file\n \n-/* All known objfiles are kept in a linked list.  This points to the\n-   root of this list.  */\n-#define object_files current_program_space->objfiles_head\n-\n /* The set of target sections matching the sections mapped into the\n    current program space.  */\n #define current_target_sections (&current_program_space->target_sections)"
    }
  ]
}