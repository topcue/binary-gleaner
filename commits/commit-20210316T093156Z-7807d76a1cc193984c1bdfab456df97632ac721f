{
  "sha": "7807d76a1cc193984c1bdfab456df97632ac721f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzgwN2Q3NmExY2MxOTM5ODRjMWJkZmFiNDU2ZGY5NzYzMmFjNzIxZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-15T14:20:13Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-16T09:31:56Z"
    },
    "message": "gdb/python: fix FrameDecorator regression on Python 2\n\nThis commit:\n\n  commit d1cab9876d72d867b2de82688f5f5a2a4b655edb\n  Date:   Tue Sep 15 11:08:56 2020 -0600\n\n      Don't use gdb_py_long_from_ulongest\n\nIntroduced a regression when GDB is compiled with Python 2.  The frame\nfilter API expects the gdb.FrameDecorator.function () method to return\neither a string (the name of a function) or an address, which GDB then\nuses to lookup a msymbol.\n\nIf the address returned from gdb.FrameDecorator.function () comes from\ngdb.Frame.pc () then before the above commit we would always expect to\nsee a PyLong object.\n\nAfter the above commit we might (on Python 2) get a PyInt object.\n\nThe GDB code does not expect to see a PyInt, and only checks for a\nPyLong, we then see an error message like:\n\n  RuntimeError: FrameDecorator.function: expecting a String, integer or None.\n\nThis commit just adds an additional call to PyInt_Check which handle\nthe missing case.\n\nI had already written a test case to cover this issue before spotting\nthat the gdb.python/py-framefilter.exp test also triggers this\nfailure.  As the new test case is slightly different I have kept it\nin.\n\nThe new test forces the behaviour of gdb.FrameDecorator.function\nreturning an address.  The reason the existing test case hits this is\ndue to the behaviour of the builtin gdb.FrameDecorator base class.  If\nthe base class behaviour ever changed then the return an address case\nwould only be tested by the new test case.\n\ngdb/ChangeLog:\n\n\t* python/py-framefilter.c (py_print_frame): Use PyInt_Check as\n\twell as PyLong_Check for Python 2.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-framefilter-addr.c: New file.\n\t* gdb.python/py-framefilter-addr.exp: New file.\n\t* gdb.python/py-framefilter-addr.py: New file.",
    "tree": {
      "sha": "95e3833e8c321026d4a5064042ef7c6ddc4d99c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/95e3833e8c321026d4a5064042ef7c6ddc4d99c1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7807d76a1cc193984c1bdfab456df97632ac721f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7807d76a1cc193984c1bdfab456df97632ac721f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7807d76a1cc193984c1bdfab456df97632ac721f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7807d76a1cc193984c1bdfab456df97632ac721f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f302f9e26e872a8da4b1d4556ea2eeebeca866e7"
    }
  ],
  "stats": {
    "total": 170,
    "additions": 169,
    "deletions": 1
  },
  "files": [
    {
      "sha": "2e4628b87c592f728b8057ff04fbfd08d467c2cb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7807d76a1cc193984c1bdfab456df97632ac721f",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-framefilter.c (py_print_frame): Use PyInt_Check as\n+\twell as PyLong_Check for Python 2.\n+\n 2021-03-15  Tom Tromey  <tromey@adacore.com>\n \n \tPR build/27579:"
    },
    {
      "sha": "18071982e201d2b357d5277ff38a55999865cde3",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=7807d76a1cc193984c1bdfab456df97632ac721f",
      "patch": "@@ -924,7 +924,11 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \n \t      function = function_to_free.get ();\n \t    }\n-\t  else if (PyLong_Check (py_func.get ()))\n+\t  else if (PyLong_Check (py_func.get ())\n+#if PY_MAJOR_VERSION == 2\n+\t\t   || PyInt_Check (py_func.get ())\n+#endif\n+\t\t   )\n \t    {\n \t      CORE_ADDR addr;\n \t      struct bound_minimal_symbol msymbol;"
    },
    {
      "sha": "1e23b91d9a274bb8c20baf9277eeb8765154babe",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7807d76a1cc193984c1bdfab456df97632ac721f",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-framefilter-addr.c: New file.\n+\t* gdb.python/py-framefilter-addr.exp: New file.\n+\t* gdb.python/py-framefilter-addr.py: New file.\n+\n 2021-03-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.threads/execl.exp: Remove duplicate 'info threads' test."
    },
    {
      "sha": "446ec3ed9b9ec6a77bb46b02cf4588a96b17f0d5",
      "filename": "gdb/testsuite/gdb.python/py-framefilter-addr.c",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/gdb.python/py-framefilter-addr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/gdb.python/py-framefilter-addr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter-addr.c?ref=7807d76a1cc193984c1bdfab456df97632ac721f",
      "patch": "@@ -0,0 +1,40 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+func3 ()\n+{\n+  return 0;\t/* Break here.  */\n+}\n+\n+int\n+func2 ()\n+{\n+  return func3 ();\n+}\n+\n+int\n+func1 ()\n+{\n+  return func2 ();\n+}\n+\n+int\n+main ()\n+{\n+  return func1 ();\n+}"
    },
    {
      "sha": "108509cfcdda2fcd8783706fb1980c5828718981",
      "filename": "gdb/testsuite/gdb.python/py-framefilter-addr.exp",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/gdb.python/py-framefilter-addr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/gdb.python/py-framefilter-addr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter-addr.exp?ref=7807d76a1cc193984c1bdfab456df97632ac721f",
      "patch": "@@ -0,0 +1,61 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the GDB testsuite.  It tests Python-based\n+# frame-filters when the 'function ()' method on FrameDecorator\n+# returns the address for the function being decorated.\n+\n+load_lib gdb-python.exp\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+if ![runto_main] {\n+   return -1\n+}\n+\n+# Run to our test breakpoint.\n+gdb_breakpoint [gdb_get_line_number \"Break here\"]\n+gdb_continue_to_breakpoint \"run to test breakpoint\"\n+\n+gdb_test \"bt\" \\\n+    [multi_line \\\n+\t \"#0  func3 \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:21\" \\\n+\t \"#1  $hex in func2 \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:27\" \\\n+\t \"#2  $hex in func1 \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:33\" \\\n+\t \"#3  $hex in main \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:39\" ] \\\n+    \"backtrace without frame filters\"\n+\n+# Make the frame filters Python script available.\n+set remote_python_file \\\n+    [gdb_remote_download host ${srcdir}/${subdir}/${testfile}.py \\\n+\t ${testfile}.py]\n+\n+# And load it into GDB.\n+gdb_test_no_output \"source ${remote_python_file}\" \"load python file\"\n+\n+gdb_test \"bt\" \\\n+    [multi_line \\\n+\t \"#0  func3 \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:21\" \\\n+\t \"#1  $hex in func2 \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:27\" \\\n+\t \"#2  $hex in func1 \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:33\" \\\n+\t \"#3  $hex in main \\\\(\\\\) at \\[^\\r\\n\\]+/py-framefilter-addr.c:39\" ] \\\n+    \"backtrace with frame filters\""
    },
    {
      "sha": "a27879a4760b567b2627bf7bdf27d4f194a9348c",
      "filename": "gdb/testsuite/gdb.python/py-framefilter-addr.py",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/gdb.python/py-framefilter-addr.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7807d76a1cc193984c1bdfab456df97632ac721f/gdb/testsuite/gdb.python/py-framefilter-addr.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter-addr.py?ref=7807d76a1cc193984c1bdfab456df97632ac721f",
      "patch": "@@ -0,0 +1,52 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+import gdb\n+import itertools\n+from gdb.FrameDecorator import FrameDecorator\n+import copy\n+\n+# A FrameDecorator that just returns gdb.Frame.pc () from 'function'.\n+# We want to ensure that GDB correctly handles this case.\n+class Function_Returns_Address (FrameDecorator):\n+\n+    def __init__(self, fobj):\n+        super (Function_Returns_Address, self).__init__ (fobj)\n+        self._fobj = fobj\n+\n+    def function (self):\n+        frame = self.inferior_frame ()\n+        return frame.pc ()\n+\n+class Frame_Filter ():\n+\n+    def __init__ (self):\n+        self.name = \"function_returns_address\"\n+        self.priority = 100\n+        self.enabled = True\n+        gdb.frame_filters [self.name] = self\n+\n+    def filter (self, frame_iter):\n+        # Python 3.x moved the itertools.imap functionality to map(),\n+        # so check if it is available.\n+        if hasattr(itertools, \"imap\"):\n+            frame_iter = itertools.imap (Function_Returns_Address,\n+                                         frame_iter)\n+        else:\n+            frame_iter = map(Function_Returns_Address, frame_iter)\n+\n+        return frame_iter\n+\n+Frame_Filter()"
    }
  ]
}