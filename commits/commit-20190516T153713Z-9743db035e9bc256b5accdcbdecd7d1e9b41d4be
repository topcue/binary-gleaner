{
  "sha": "9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTc0M2RiMDM1ZTliYzI1NmI1YWNjZGNiZGVjZDdkMWU5YjQxZDRiZQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:02:05Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:13Z"
    },
    "message": "[PATCH 40/57][Arm][OBJDUMP] Add support for MVE instructions: vdup, veor, vfma, vfms, vhadd, vhsub and vrhadd\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(enum mve_unpredictable): Add new reasons.\n\t(enum mve_undefined): Likewise.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(coprocessor_opcodes): Move NEON VDUP from here...\n\t(neon_opcodes): ... to here.\n\t(mve_opcodes): Add new instructions.\n\t(print_mve_undefined):  Handle new reasons.\n\t(print_mve_unpredictable): Likewise.\n\t(print_mve_size): Handle new instructions.\n\t(print_insn_neon): Handle vdup.\n\t(print_insn_mve): Handle new operands.",
    "tree": {
      "sha": "643184203ac78bed459cecb062d6df0511ee731e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/643184203ac78bed459cecb062d6df0511ee731e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9743db035e9bc256b5accdcbdecd7d1e9b41d4be/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "143275ea7e56baf5ad7a736698b79a90b473183a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/143275ea7e56baf5ad7a736698b79a90b473183a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/143275ea7e56baf5ad7a736698b79a90b473183a"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 222,
    "deletions": 14
  },
  "files": [
    {
      "sha": "ef6d3e80e63738971e6efba5b63ae529f74079aa",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9743db035e9bc256b5accdcbdecd7d1e9b41d4be/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9743db035e9bc256b5accdcbdecd7d1e9b41d4be/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
      "patch": "@@ -1,3 +1,21 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(enum mve_unpredictable): Add new reasons.\n+\t(enum mve_undefined): Likewise.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(coprocessor_opcodes): Move NEON VDUP from here...\n+\t(neon_opcodes): ... to here.\n+\t(mve_opcodes): Add new instructions.\n+\t(print_mve_undefined):  Handle new reasons.\n+\t(print_mve_unpredictable): Likewise.\n+\t(print_mve_size): Handle new instructions.\n+\t(print_insn_neon): Handle vdup.\n+\t(print_insn_mve): Handle new operands.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "75cc27bf20481e9c47c414d056807b5a1e5b86c2",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 204,
      "deletions": 14,
      "changes": 218,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9743db035e9bc256b5accdcbdecd7d1e9b41d4be/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9743db035e9bc256b5accdcbdecd7d1e9b41d4be/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
      "patch": "@@ -87,6 +87,17 @@ enum mve_instructions\n   MVE_VCMP_VEC_T4,\n   MVE_VCMP_VEC_T5,\n   MVE_VCMP_VEC_T6,\n+  MVE_VDUP,\n+  MVE_VEOR,\n+  MVE_VFMAS_FP_SCALAR,\n+  MVE_VFMA_FP_SCALAR,\n+  MVE_VFMA_FP,\n+  MVE_VFMS_FP,\n+  MVE_VHADD_T1,\n+  MVE_VHADD_T2,\n+  MVE_VHSUB_T1,\n+  MVE_VHSUB_T2,\n+  MVE_VRHADD,\n   MVE_NONE\n };\n \n@@ -98,11 +109,13 @@ enum mve_unpredictable\n \t\t\t\t   fcB = 1 (vpt).  */\n   UNPRED_R13,\t\t\t/* Unpredictable because r13 (sp) or\n \t\t\t\t   r15 (sp) used.  */\n+  UNPRED_R15,\t\t\t/* Unpredictable because r15 (pc) is used.  */\n   UNPRED_NONE\t\t\t/* No unpredictable behavior.  */\n };\n \n enum mve_undefined\n {\n+  UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n   UNDEF_NONE\t\t\t/* no undefined behavior.  */\n };\n \n@@ -539,18 +552,6 @@ static const struct sopcode32 coprocessor_opcodes[] =\n     0x0c900b01, 0x0f900f01, \"fldmiax%c\\t%16-19r%21'!, %z3\\t;@ Deprecated\"},\n \n   /* Data transfer between ARM and NEON registers.  */\n-  {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0e800b10, 0x0ff00f70, \"vdup%c.32\\t%16-19,7D, %12-15r\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0e800b30, 0x0ff00f70, \"vdup%c.16\\t%16-19,7D, %12-15r\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ea00b10, 0x0ff00f70, \"vdup%c.32\\t%16-19,7Q, %12-15r\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ea00b30, 0x0ff00f70, \"vdup%c.16\\t%16-19,7Q, %12-15r\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ec00b10, 0x0ff00f70, \"vdup%c.8\\t%16-19,7D, %12-15r\"},\n-  {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ee00b10, 0x0ff00f70, \"vdup%c.8\\t%16-19,7Q, %12-15r\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n     0x0c400b10, 0x0ff00fd0, \"vmov%c\\t%0-3,5D, %12-15r, %16-19r\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n@@ -1151,6 +1152,20 @@ static const struct opcode32 neon_opcodes[] =\n     0xf2b00000, 0xffb00810,\n     \"vext%c.8\\t%12-15,22R, %16-19,7R, %0-3,5R, #%8-11d\"},\n \n+  /* Data transfer between ARM and NEON registers.  */\n+  {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n+    0x0e800b10, 0x1ff00f70, \"vdup%c.32\\t%16-19,7D, %12-15r\"},\n+  {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n+    0x0e800b30, 0x1ff00f70, \"vdup%c.16\\t%16-19,7D, %12-15r\"},\n+  {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n+    0x0ea00b10, 0x1ff00f70, \"vdup%c.32\\t%16-19,7Q, %12-15r\"},\n+  {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n+    0x0ea00b30, 0x1ff00f70, \"vdup%c.16\\t%16-19,7Q, %12-15r\"},\n+  {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n+    0x0ec00b10, 0x1ff00f70, \"vdup%c.8\\t%16-19,7D, %12-15r\"},\n+  {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n+    0x0ee00b10, 0x1ff00f70, \"vdup%c.8\\t%16-19,7Q, %12-15r\"},\n+\n   /* Move data element to all lanes.  */\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n     0xf3b40c00, 0xffb70f90, \"vdup%c.32\\t%12-15,22R, %0-3,5D[%19d]\"},\n@@ -1803,10 +1818,12 @@ static const struct opcode32 neon_opcodes[] =\n \n    %%\t\t\t%\n \n+   %c\t\t\tprint condition code\n    %i\t\t\tprint MVE predicate(s) for vpt and vpst\n    %n\t\t\tprint vector comparison code for predicated instruction\n    %v\t\t\tprint vector predicate for instruction in predicated\n \t\t\tblock\n+   %<bitfield>r\t\tprint as an ARM register\n    %<bitfield>Q\t\tprint as a MVE Q register\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n \t\t\tUNPREDICTABLE\n@@ -1908,6 +1925,78 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfe011f40, 0xffc1ff50,\n    \"vcmp%v.s%20-21s\\t%n, %17-19Q, %0-3Z\"},\n \n+  /* Vector VDUP.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VDUP,\n+   0xeea00b10, 0xffb10f5f,\n+   \"vdup%v.%5,22s\\t%17-19,7Q, %12-15r\"},\n+\n+  /* Vector VEOR.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VEOR,\n+   0xff000150, 0xffd11f51,\n+   \"veor%v\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VFMA, vector * scalar.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VFMA_FP_SCALAR,\n+   0xee310e40, 0xefb11f70,\n+   \"vfma%v.f%28s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VFMA floating point.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VFMA_FP,\n+   0xef000c50, 0xffa11f51,\n+   \"vfma%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VFMS floating point.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VFMS_FP,\n+   0xef200c50, 0xffa11f51,\n+   \"vfms%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VFMAS, vector * scalar.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VFMAS_FP_SCALAR,\n+   0xee311e40, 0xefb11f70,\n+   \"vfmas%v.f%28s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VHADD T1.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VHADD_T1,\n+   0xef000040, 0xef811f51,\n+   \"vhadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VHADD T2.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VHADD_T2,\n+   0xee000f40, 0xef811f70,\n+   \"vhadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VHSUB T1.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VHSUB_T1,\n+   0xef000240, 0xef811f51,\n+   \"vhsub%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VHSUB T2.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VHSUB_T2,\n+   0xee001f40, 0xef811f70,\n+   \"vhsub%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VDUP.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VDUP,\n+   0xeea00b10, 0xffb10f5f,\n+   \"vdup%v.%5,22s\\t%17-19,7Q, %12-15r\"},\n+\n+  /* Vector VRHADD.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRHADD,\n+   0xef000140, 0xef811f51,\n+   \"vrhadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n   {ARM_FEATURE_CORE_LOW (0),\n    MVE_NONE,\n    0x00000000, 0x00000000, 0}\n@@ -3913,6 +4002,8 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VHADD_T2:\n+    case MVE_VHSUB_T2:\n     case MVE_VCMP_VEC_T1:\n     case MVE_VCMP_VEC_T2:\n     case MVE_VCMP_VEC_T3:\n@@ -3940,7 +4031,31 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n {\n   *undefined_code = UNDEF_NONE;\n \n-  return FALSE;\n+  switch (matched_insn)\n+    {\n+    case MVE_VDUP:\n+      if (arm_decode_field_multiple (given, 5, 5, 22, 22) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VRHADD:\n+    case MVE_VHADD_T1:\n+    case MVE_VHSUB_T1:\n+      if (arm_decode_field (given, 20, 21) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    default:\n+      return FALSE;\n+    }\n }\n \n /* Return FALSE if GIVEN is not an unpredictable encoding for MATCHED_INSN.\n@@ -3980,6 +4095,43 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VDUP:\n+      {\n+\tunsigned long gpr = arm_decode_field (given, 12, 15);\n+\tif (gpr == 0xd)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13;\n+\t    return TRUE;\n+\t  }\n+\telse if (gpr == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n+    case MVE_VFMA_FP_SCALAR:\n+    case MVE_VFMAS_FP_SCALAR:\n+    case MVE_VHADD_T2:\n+    case MVE_VHSUB_T2:\n+      {\n+\tunsigned long gpr = arm_decode_field (given, 0, 3);\n+\tif (gpr == 0xd)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13;\n+\t    return TRUE;\n+\t  }\n+\telse if (gpr == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -3996,6 +4148,10 @@ print_mve_undefined (struct disassemble_info *info,\n \n   switch (undefined_code)\n     {\n+    case UNDEF_SIZE_3:\n+      func (stream, \"size equals three\");\n+      break;\n+\n     case UNDEF_NONE:\n       break;\n     }\n@@ -4025,6 +4181,10 @@ print_mve_unpredictable (struct disassemble_info *info,\n       func (stream, \"use of r13 (sp)\");\n       break;\n \n+    case UNPRED_R15:\n+      func (stream, \"use of r15 (pc)\");\n+      break;\n+\n     case UNPRED_NONE:\n       break;\n     }\n@@ -4058,12 +4218,17 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VCMP_VEC_T4:\n     case MVE_VCMP_VEC_T5:\n     case MVE_VCMP_VEC_T6:\n+    case MVE_VHADD_T1:\n+    case MVE_VHADD_T2:\n+    case MVE_VHSUB_T1:\n+    case MVE_VHSUB_T2:\n     case MVE_VPT_VEC_T1:\n     case MVE_VPT_VEC_T2:\n     case MVE_VPT_VEC_T3:\n     case MVE_VPT_VEC_T4:\n     case MVE_VPT_VEC_T5:\n     case MVE_VPT_VEC_T6:\n+    case MVE_VRHADD:\n       if (size <= 3)\n \tfunc (stream, \"%s\", mve_vec_sizename[size]);\n       else\n@@ -4072,6 +4237,10 @@ print_mve_size (struct disassemble_info *info,\n \n     case MVE_VCMP_FP_T1:\n     case MVE_VCMP_FP_T2:\n+    case MVE_VFMA_FP_SCALAR:\n+    case MVE_VFMA_FP:\n+    case MVE_VFMS_FP:\n+    case MVE_VFMAS_FP_SCALAR:\n     case MVE_VPT_FP_T1:\n     case MVE_VPT_FP_T2:\n       if (size == 0)\n@@ -4080,6 +4249,23 @@ print_mve_size (struct disassemble_info *info,\n \tfunc (stream, \"16\");\n       break;\n \n+    case MVE_VDUP:\n+      switch (size)\n+\t{\n+\tcase 0:\n+\t  func (stream, \"32\");\n+\t  break;\n+\tcase 1:\n+\t  func (stream, \"16\");\n+\t  break;\n+\tcase 2:\n+\t  func (stream, \"8\");\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }\n@@ -5018,7 +5204,8 @@ print_insn_neon (struct disassemble_info *info, long given, bfd_boolean thumb)\n \t}\n       else if ((given & 0xff000000) == 0xf9000000)\n \tgiven ^= 0xf9000000 ^ 0xf4000000;\n-      else\n+      /* vdup is also a valid neon instruction.  */\n+      else if ((given & 0xff910f5f) != 0xee800b10)\n \treturn FALSE;\n     }\n \n@@ -5557,6 +5744,9 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t\t\t    value,\n \t\t\t\t\t    insn->mve_op);\n \t\t\t    break;\n+\t\t\t  case 'r':\n+\t\t\t    func (stream, \"%s\", arm_regnames[value]);\n+\t\t\t    break;\n \t\t\t  case 'Q':\n \t\t\t    if (value & 0x8)\n \t\t\t      func (stream, \"<illegal reg q%ld.5>\", value);"
    }
  ]
}