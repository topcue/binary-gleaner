{
  "sha": "33d3e18ed79de364401edab99917d351afd39fd8",
  "node_id": "C_kwDOANOeidoAKDMzZDNlMThlZDc5ZGUzNjQ0MDFlZGFiOTk5MTdkMzUxYWZkMzlmZDg",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-11-04T15:07:09Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-11-04T15:07:09Z"
    },
    "message": "Revert \"bfd: Always check sections with the corrupt size\"\n\nThis reverts commit e0f7ea91436dd308a094c4c101fd4169e8245a91.",
    "tree": {
      "sha": "c2775cd5aa98985296420ce901ffc6df91f2e7e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c2775cd5aa98985296420ce901ffc6df91f2e7e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/33d3e18ed79de364401edab99917d351afd39fd8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33d3e18ed79de364401edab99917d351afd39fd8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/33d3e18ed79de364401edab99917d351afd39fd8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33d3e18ed79de364401edab99917d351afd39fd8/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e0f7ea91436dd308a094c4c101fd4169e8245a91",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0f7ea91436dd308a094c4c101fd4169e8245a91",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e0f7ea91436dd308a094c4c101fd4169e8245a91"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 23,
    "deletions": 27
  },
  "files": [
    {
      "sha": "4a2ada3e3eb42b35c2367b8743d7406f8da66cd2",
      "filename": "bfd/compress.c",
      "status": "modified",
      "additions": 23,
      "deletions": 27,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33d3e18ed79de364401edab99917d351afd39fd8/bfd/compress.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33d3e18ed79de364401edab99917d351afd39fd8/bfd/compress.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/compress.c?ref=33d3e18ed79de364401edab99917d351afd39fd8",
      "patch": "@@ -232,7 +232,6 @@ bfd_get_full_section_contents (bfd *abfd, sec_ptr sec, bfd_byte **ptr)\n   bfd_size_type save_rawsize;\n   bfd_byte *compressed_buffer;\n   unsigned int compression_header_size;\n-  ufile_ptr filesize;\n \n   if (abfd->direction != write_direction && sec->rawsize != 0)\n     sz = sec->rawsize;\n@@ -244,37 +243,34 @@ bfd_get_full_section_contents (bfd *abfd, sec_ptr sec, bfd_byte **ptr)\n       return true;\n     }\n \n-  filesize = bfd_get_file_size (abfd);\n-  if (filesize > 0\n-      && filesize < sz\n-      /* PR 24753: Linker created sections can be larger than\n-\t the file size, eg if they are being used to hold stubs.  */\n-      && (bfd_section_flags (sec) & SEC_LINKER_CREATED) == 0\n-      /* PR 24753: Sections which have no content should also be\n-\t excluded as they contain no size on disk.  */\n-      && (bfd_section_flags (sec) & SEC_HAS_CONTENTS) != 0\n-      /* PR 28530: Check compressed sections with the corrupt size.  */\n-      && (sec->compress_status != COMPRESS_SECTION_NONE\n-      /* The MMO file format supports its own special compression\n-\t technique, but it uses COMPRESS_SECTION_NONE when loading\n-\t a section's contents.  */\n-\t  || bfd_get_flavour (abfd) != bfd_target_mmo_flavour))\n-    {\n-      /* PR 24708: Avoid attempts to allocate a ridiculous amount\n-\t of memory.  */\n-      bfd_set_error (bfd_error_file_truncated);\n-      _bfd_error_handler\n-\t/* xgettext:c-format */\n-\t(_(\"error: %pB(%pA) section size (%#\" PRIx64 \" bytes) is larger than file size (%#\" PRIx64 \" bytes)\"),\n-\t abfd, sec, (uint64_t) sz, (uint64_t) filesize);\n-      return false;\n-    }\n-\n   switch (sec->compress_status)\n     {\n     case COMPRESS_SECTION_NONE:\n       if (p == NULL)\n \t{\n+\t  ufile_ptr filesize = bfd_get_file_size (abfd);\n+\t  if (filesize > 0\n+\t      && filesize < sz\n+\t      /* PR 24753: Linker created sections can be larger than\n+\t\t the file size, eg if they are being used to hold stubs.  */\n+\t      && (bfd_section_flags (sec) & SEC_LINKER_CREATED) == 0\n+\t      /* PR 24753: Sections which have no content should also be\n+\t\t excluded as they contain no size on disk.  */\n+\t      && (bfd_section_flags (sec) & SEC_HAS_CONTENTS) != 0\n+\t      /* The MMO file format supports its own special compression\n+\t\t technique, but it uses COMPRESS_SECTION_NONE when loading\n+\t\t a section's contents.  */\n+\t      && bfd_get_flavour (abfd) != bfd_target_mmo_flavour)\n+\t    {\n+\t      /* PR 24708: Avoid attempts to allocate a ridiculous amount\n+\t\t of memory.  */\n+\t      bfd_set_error (bfd_error_file_truncated);\n+\t      _bfd_error_handler\n+\t\t/* xgettext:c-format */\n+\t\t(_(\"error: %pB(%pA) section size (%#\" PRIx64 \" bytes) is larger than file size (%#\" PRIx64 \" bytes)\"),\n+\t\t abfd, sec, (uint64_t) sz, (uint64_t) filesize);\n+\t      return false;\n+\t    }\n \t  p = (bfd_byte *) bfd_malloc (sz);\n \t  if (p == NULL)\n \t    {"
    }
  ]
}