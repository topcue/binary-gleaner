{
  "sha": "596245135106b2a965d809e272dc7c758afdc98f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTk2MjQ1MTM1MTA2YjJhOTY1ZDgwOWUyNzJkYzdjNzU4YWZkYzk4Zg==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-21T16:42:42Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-21T16:42:42Z"
    },
    "message": "Work around problem in DWARF decoding library which can result in attempts to read arbitrary bytes as if they were an LEB128 encoded value.\n\n\t* dwarf.c (skip_attr_bytes): Accept DWARF versions higher than 4\n\twhen processing the DW_FORM_ref_addr form.\n\tSkip bytes in DW_FORM_block and DW_FORM_exprloc forms.\n\tHandle DW_FORM_indirect.\n\t(get_type_signedness): Allow a limited amount of recursion.\n\tDo not attempt to decode types that use the DW_FORM_ref_addr form.\n\t(read_and_display_attr_value): \tDo not attempt to decode types\n\tthat use the DW_FORM_ref_addr form.",
    "tree": {
      "sha": "ca542fe6fb240578801d6d813939fc1a95d471e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca542fe6fb240578801d6d813939fc1a95d471e5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/596245135106b2a965d809e272dc7c758afdc98f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/596245135106b2a965d809e272dc7c758afdc98f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/596245135106b2a965d809e272dc7c758afdc98f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/596245135106b2a965d809e272dc7c758afdc98f/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c21f37a889dbf57077981970a1b6167a0dcb39af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c21f37a889dbf57077981970a1b6167a0dcb39af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c21f37a889dbf57077981970a1b6167a0dcb39af"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 36,
    "deletions": 18
  },
  "files": [
    {
      "sha": "c560bded833da65aa2027403f167149e344dbb5f",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/596245135106b2a965d809e272dc7c758afdc98f/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/596245135106b2a965d809e272dc7c758afdc98f/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=596245135106b2a965d809e272dc7c758afdc98f",
      "patch": "@@ -1,3 +1,14 @@\n+2020-10-21  Nick Clifton  <nickc@redhat.com>\n+\n+\t* dwarf.c (skip_attr_bytes): Accept DWARF versions higher than 4\n+\twhen processing the DW_FORM_ref_addr form.\n+\tSkip bytes in DW_FORM_block and DW_FORM_exprloc forms.\n+\tHandle DW_FORM_indirect.\n+\t(get_type_signedness): Allow a limited amount of recursion.\n+\tDo not attempt to decode types that use the DW_FORM_ref_addr form.\n+\t(read_and_display_attr_value): \tDo not attempt to decode types\n+\tthat use the DW_FORM_ref_addr form.\n+\n 2020-10-20  Alan Modra  <amodra@gmail.com>\n \n \t* readelf.c: Delete whitespace at end of line throughout."
    },
    {
      "sha": "c842aba6c1e7487a2e715f237a8ceae7365907d6",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 25,
      "deletions": 18,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/596245135106b2a965d809e272dc7c758afdc98f/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/596245135106b2a965d809e272dc7c758afdc98f/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=596245135106b2a965d809e272dc7c758afdc98f",
      "patch": "@@ -1868,7 +1868,7 @@ skip_attr_bytes (unsigned long          form,\n     case DW_FORM_ref_addr:\n       if (dwarf_version == 2)\n \tSAFE_BYTE_GET_AND_INC (uvalue, data, pointer_size, end);\n-      else if (dwarf_version == 3 || dwarf_version == 4)\n+      else if (dwarf_version > 2)\n \tSAFE_BYTE_GET_AND_INC (uvalue, data, offset_size, end);\n       else\n \treturn NULL;\n@@ -1920,6 +1920,7 @@ skip_attr_bytes (unsigned long          form,\n \n     case DW_FORM_ref8:\n     case DW_FORM_data8:\n+    case DW_FORM_ref_sig8:\n       data += 8;\n       break;\n \n@@ -1934,6 +1935,7 @@ skip_attr_bytes (unsigned long          form,\n     case DW_FORM_block:\n     case DW_FORM_exprloc:\n       READ_ULEB (uvalue, data, end);\n+      data += uvalue;\n       break;\n \n     case DW_FORM_block1:\n@@ -1951,12 +1953,12 @@ skip_attr_bytes (unsigned long          form,\n       data += 4 + uvalue;\n       break;\n \n-    case DW_FORM_ref_sig8:\n-      data += 8;\n-      break;\n-\n     case DW_FORM_indirect:\n-      /* FIXME: Handle this form.  */\n+      READ_ULEB (form, data, end);\n+      if (form == DW_FORM_implicit_const)\n+\tSKIP_ULEB (data, end);\n+      return skip_attr_bytes (form, data, end, pointer_size, offset_size, dwarf_version, value_return);\n+\n     default:\n       return NULL;\n     }\n@@ -1978,7 +1980,7 @@ get_type_signedness (unsigned char *        start,\n \t\t     dwarf_vma              offset_size,\n \t\t     int                    dwarf_version,\n \t\t     bfd_boolean *          is_signed,\n-\t\t     bfd_boolean\t    is_nested)\n+\t\t     unsigned int\t    nesting)\n {\n   unsigned long   abbrev_number;\n   abbrev_entry *  entry;\n@@ -1997,6 +1999,14 @@ get_type_signedness (unsigned char *        start,\n     /* FIXME: Issue a warning ?  */\n     return;\n \n+#define MAX_NESTING 20\n+  if (nesting > MAX_NESTING)\n+    {\n+      /* FIXME: Warn - or is this expected ?\n+\t NB/ We need to avoid infinite recursion.  */\n+      return;\n+    }\n+\n   for (attr = entry->first_attr;\n        attr != NULL && attr->attribute;\n        attr = attr->next)\n@@ -2019,16 +2029,12 @@ get_type_signedness (unsigned char *        start,\n #endif\n \tcase DW_AT_type:\n \t  /* Recurse.  */\n-\t  if (is_nested)\n-\t    {\n-\t      /* FIXME: Warn - or is this expected ?\n-\t\t NB/ We need to avoid infinite recursion.  */\n-\t      return;\n-\t    }\n \t  if (uvalue >= (size_t) (end - start))\n \t    return;\n-\t  get_type_signedness (start, start + uvalue, end, pointer_size,\n-\t\t\t       offset_size, dwarf_version, is_signed, TRUE);\n+\t  /* We cannot correctly process DW_FORM_ref_addr at the moment.  */\n+\t  if (attr->form != DW_FORM_ref_addr)\n+\t    get_type_signedness (start, start + uvalue, end, pointer_size,\n+\t\t\t\t offset_size, dwarf_version, is_signed, nesting + 1);\n \t  break;\n \n \tcase DW_AT_encoding:\n@@ -2206,7 +2212,6 @@ read_and_display_attr_value (unsigned long           attribute,\n \tSAFE_BYTE_GET_AND_INC (uvalue, data, offset_size, end);\n       else\n \terror (_(\"Internal error: DW_FORM_ref_addr is not supported in DWARF version 1.\\n\"));\n-\n       break;\n \n     case DW_FORM_addr:\n@@ -2663,8 +2668,10 @@ read_and_display_attr_value (unsigned long           attribute,\n \t{\n \t  bfd_boolean is_signed = FALSE;\n \n-\t  get_type_signedness (start, start + uvalue, end, pointer_size,\n-\t\t\t       offset_size, dwarf_version, & is_signed, FALSE);\n+\t  /* We cannot correctly process DW_FORM_ref_addr at the moment.  */\n+\t  if (form != DW_FORM_ref_addr)\n+\t    get_type_signedness (start, start + uvalue, end, pointer_size,\n+\t\t\t\t offset_size, dwarf_version, & is_signed, 0);\n \t  level_type_signed[level] = is_signed;\n \t}\n       break;"
    }
  ]
}