{
  "sha": "bef9ef8ca0f941d743c77cc55b5fe7985990b2a7",
  "node_id": "C_kwDOANOeidoAKGJlZjllZjhjYTBmOTQxZDc0M2M3N2NjNTViNWZlNzk4NTk5MGIyYTc",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-09-27T19:31:21Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-09-27T19:31:23Z"
    },
    "message": "libtool.m4: fix nm BSD flag detection\n\nLibtool needs to get BSD-format (or MS-format) output out of the system\nnm, so that it can scan generated object files for symbol names for\n-export-symbols-regex support.  Some nms need specific flags to turn on\nBSD-formatted output, so libtool checks for this in its AC_PATH_NM.\nUnfortunately the code to do this has a pair of interlocking flaws:\n\n - it runs the test by doing an nm of /dev/null.  Some platforms\n   reasonably refuse to do an nm on a device file, but before now this\n   has only been worked around by assuming that the error message has a\n   specific textual form emitted by Tru64 nm, and that getting this\n   error means this is Tru64 nm and that nm -B would work to produce\n   BSD-format output, even though the test never actually got anything\n   but an error message out of nm -B.  This is fixable by nm'ing *nm\n   itself* (since we necessarily have a path to it).\n\n - the test is entirely skipped if NM is set in the environment, on the\n   grounds that the user has overridden the test: but the user cannot\n   reasonably be expected to know that libtool wants not only nm but\n   also flags forcing BSD-format output.  Worse yet, one such \"user\" is\n   the top-level Cygnus configure script, which neither tests for\n   nor specifies any BSD-format flags.  So platforms needing BSD-format\n   flags always fail to set them when run in a Cygnus tree, breaking\n   -export-symbols-regex on such platforms.  Libtool also needs to\n   augment $LD on some platforms, but this is done unconditionally,\n   augmenting whatever the user specified: the nm check should do the\n   same.\n\n   One wrinkle: if the user has overridden $NM, a path might have been\n   provided: so we use the user-specified path if there was one, and\n   otherwise do the path search as usual.  (If the nm specified doesn't\n   work, this might lead to a few extra pointless path searches -- but\n   the test is going to fail anyway, so that's not a problem.)\n\n(Tested with NM unset, and set to nm, /usr/bin/nm, my-nm where my-nm is a\nsymlink to /usr/bin/nm on the PATH, and /not-on-the-path/my-nm where\n*that* is a symlink to /usr/bin/nm.)\n\nChangeLog\n2021-09-27  Nick Alcock  <nick.alcock@oracle.com>\n\n\tPR libctf/27967\n\t* libtool.m4 (LT_PATH_NM): Try BSDization flags with a user-provided\n\tNM, if there is one.  Run nm on itself, not on /dev/null, to avoid\n\terrors from nms that refuse to work on non-regular files.  Remove\n\tother workarounds for this problem.  Strip out blank lines from the\n\tnm output.",
    "tree": {
      "sha": "003940f0f2dca29ffca164ba3ea7bad813bdb94d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/003940f0f2dca29ffca164ba3ea7bad813bdb94d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bc4b1401129c755eb78d434ae88605478f4299f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc4b1401129c755eb78d434ae88605478f4299f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bc4b1401129c755eb78d434ae88605478f4299f1"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 54,
    "deletions": 43
  },
  "files": [
    {
      "sha": "afa6629abd13cba29f7dbfd188395227b715ce87",
      "filename": "ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ChangeLog?ref=bef9ef8ca0f941d743c77cc55b5fe7985990b2a7",
      "patch": "@@ -1,3 +1,12 @@\n+2021-09-27  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\tPR libctf/27967\n+\t* libtool.m4 (LT_PATH_NM): Try BSDization flags with a user-provided\n+\tNM, if there is one.  Run nm on itself, not on /dev/null, to avoid\n+\terrors from nms that refuse to work on non-regular files.  Remove\n+\tother workarounds for this problem.  Strip out blank lines from the\n+\tnm output.\n+\n 2021-09-27  Nick Alcock  <nick.alcock@oracle.com>\n \n \tPR libctf/27967"
    },
    {
      "sha": "a216bb14e991f45a556401db6417902d17ce552c",
      "filename": "libtool.m4",
      "status": "modified",
      "additions": 45,
      "deletions": 43,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7/libtool.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bef9ef8ca0f941d743c77cc55b5fe7985990b2a7/libtool.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libtool.m4?ref=bef9ef8ca0f941d743c77cc55b5fe7985990b2a7",
      "patch": "@@ -3200,53 +3200,55 @@ _LT_DECL([], [file_magic_cmd], [1],\n \n # LT_PATH_NM\n # ----------\n-# find the pathname to a BSD- or MS-compatible name lister\n+# find the pathname to a BSD- or MS-compatible name lister, and any flags\n+# needed to make it compatible\n AC_DEFUN([LT_PATH_NM],\n [AC_REQUIRE([AC_PROG_CC])dnl\n AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n [if test -n \"$NM\"; then\n-  # Let the user override the test.\n-  lt_cv_path_NM=\"$NM\"\n-else\n-  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n-  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n-    lt_nm_to_check=\"$lt_nm_to_check nm\"\n-  fi\n-  for lt_tmp_nm in $lt_nm_to_check; do\n-    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n-    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n-      IFS=\"$lt_save_ifs\"\n-      test -z \"$ac_dir\" && ac_dir=.\n-      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n-      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n-\t# Check to see if the nm accepts a BSD-compat flag.\n-\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n-\t#   nm: unknown option \"B\" ignored\n-\t# Tru64's nm complains that /dev/null is an invalid object file\n-\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n-\t*/dev/null* | *'Invalid file or object type'*)\n-\t  lt_cv_path_NM=\"$tmp_nm -B\"\n-\t  break\n-\t  ;;\n-\t*)\n-\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n-\t  */dev/null*)\n-\t    lt_cv_path_NM=\"$tmp_nm -p\"\n-\t    break\n-\t    ;;\n-\t  *)\n-\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n-\t    continue # so that we can try to find one that supports BSD flags\n-\t    ;;\n-\t  esac\n-\t  ;;\n-\tesac\n-      fi\n-    done\n-    IFS=\"$lt_save_ifs\"\n-  done\n-  : ${lt_cv_path_NM=no}\n-fi])\n+   # Let the user override the nm to test.\n+   lt_nm_to_check=\"$NM\"\n+ else\n+   lt_nm_to_check=\"${ac_tool_prefix}nm\"\n+   if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n+     lt_nm_to_check=\"$lt_nm_to_check nm\"\n+   fi\n+ fi\n+ for lt_tmp_nm in $lt_nm_to_check; do\n+   lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n+   for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n+     IFS=\"$lt_save_ifs\"\n+     test -z \"$ac_dir\" && ac_dir=.\n+     case \"$lt_tmp_nm\" in\n+     */*|*\\\\*) tmp_nm=\"$lt_tmp_nm\";;\n+     *) tmp_nm=\"$ac_dir/$lt_tmp_nm\";;\n+     esac\n+     if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n+       # Check to see if the nm accepts a BSD-compat flag.\n+       # Adding the `sed 1q' prevents false positives on HP-UX, which says:\n+       #   nm: unknown option \"B\" ignored\n+       case `\"$tmp_nm\" -B \"$tmp_nm\" 2>&1 | grep -v '^ *$' | sed '1q'` in\n+       *$tmp_nm*) lt_cv_path_NM=\"$tmp_nm -B\"\n+\t break\n+\t ;;\n+       *)\n+\t case `\"$tmp_nm\" -p \"$tmp_nm\" 2>&1 | grep -v '^ *$' | sed '1q'` in\n+\t *$tmp_nm*)\n+\t   lt_cv_path_NM=\"$tmp_nm -p\"\n+\t   break\n+\t   ;;\n+\t *)\n+\t   lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n+\t   continue # so that we can try to find one that supports BSD flags\n+\t   ;;\n+\t esac\n+\t ;;\n+       esac\n+     fi\n+   done\n+   IFS=\"$lt_save_ifs\"\n+ done\n+ : ${lt_cv_path_NM=no}])\n if test \"$lt_cv_path_NM\" != \"no\"; then\n   NM=\"$lt_cv_path_NM\"\n else"
    }
  ]
}