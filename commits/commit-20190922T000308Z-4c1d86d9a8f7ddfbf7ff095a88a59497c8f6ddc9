{
  "sha": "4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGMxZDg2ZDlhOGY3ZGRmYmY3ZmYwOTVhODhhNTk0OTdjOGY2ZGRjOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-09-21T23:50:40Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-09-22T00:03:08Z"
    },
    "message": "gdb: make watchpoint::val_valid a bool\n\ngdb/ChangeLog:\n\n\t* breakpoint.h (struct watchpoint) <val_valid>: Change type to\n\tbool.\n\t* breakpoint.c (update_watchpoint): Assign false instead of 0,\n\ttrue instead of 1.\n\t(breakpoint_init_inferior): Likewise.\n\t(watchpoint_check): Likewise.\n\t(watch_command_1): Likewise.\n\t(invalidate_bp_value_on_memory_change): Likewise.",
    "tree": {
      "sha": "b8806e5372e235246ead14e0c6b30a9bd702692d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8806e5372e235246ead14e0c6b30a9bd702692d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8f49fbcc76d846cfcda0d1ad19d5f405a1310f56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f49fbcc76d846cfcda0d1ad19d5f405a1310f56",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8f49fbcc76d846cfcda0d1ad19d5f405a1310f56"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 9,
    "deletions": 8
  },
  "files": [
    {
      "sha": "838c9d136fd131eff5d2a80630b1f2fb3f5b17e4",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9",
      "patch": "@@ -1727,7 +1727,7 @@ update_watchpoint (struct watchpoint *b, int reparse)\n \t to the user when the old value and the new value may actually\n \t be completely different objects.  */\n       b->val = NULL;\n-      b->val_valid = 0;\n+      b->val_valid = false;\n \n       /* Note that unlike with breakpoints, the watchpoint's condition\n \t expression is stored in the breakpoint object, not in the\n@@ -1780,7 +1780,7 @@ update_watchpoint (struct watchpoint *b, int reparse)\n \t  if (b->val_bitsize != 0)\n \t    v = extract_bitfield_from_watchpoint_value (b, v);\n \t  b->val = release_value (v);\n-\t  b->val_valid = 1;\n+\t  b->val_valid = true;\n \t}\n \n       frame_pspace = get_frame_program_space (get_selected_frame (NULL));\n@@ -3900,7 +3900,7 @@ breakpoint_init_inferior (enum inf_context context)\n \t\t  /* Reset val field to force reread of starting value in\n \t\t     insert_breakpoints.  */\n \t\t  w->val.reset (nullptr);\n-\t\t  w->val_valid = 0;\n+\t\t  w->val_valid = false;\n \t\t}\n \t    }\n \t}\n@@ -4877,7 +4877,7 @@ watchpoint_check (bpstat bs)\n \t{\n \t  bs->old_val = b->val;\n \t  b->val = release_value (new_val);\n-\t  b->val_valid = 1;\n+\t  b->val_valid = true;\n \t  if (new_val != NULL)\n \t    value_free_to_mark (mark);\n \t  return WP_VALUE_CHANGED;\n@@ -10717,7 +10717,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n       w->val = val;\n       w->val_bitpos = saved_bitpos;\n       w->val_bitsize = saved_bitsize;\n-      w->val_valid = 1;\n+      w->val_valid = true;\n     }\n \n   if (cond_start)\n@@ -14375,7 +14375,7 @@ invalidate_bp_value_on_memory_change (struct inferior *inferior,\n \t\t  && addr + len > loc->address)\n \t\t{\n \t\t  wp->val = NULL;\n-\t\t  wp->val_valid = 0;\n+\t\t  wp->val_valid = false;\n \t\t}\n \t  }\n       }"
    },
    {
      "sha": "9791032c5e84a0ae766da50c819978807fc817c3",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=4c1d86d9a8f7ddfbf7ff095a88a59497c8f6ddc9",
      "patch": "@@ -817,9 +817,10 @@ struct watchpoint : public breakpoint\n      we do not know the value yet or the value was not readable.  VAL\n      is never lazy.  */\n   value_ref_ptr val;\n-  /* Nonzero if VAL is valid.  If VAL_VALID is set but VAL is NULL,\n+\n+  /* True if VAL is valid.  If VAL_VALID is set but VAL is NULL,\n      then an error occurred reading the value.  */\n-  int val_valid;\n+  bool val_valid;\n \n   /* When watching the location of a bitfield, contains the offset and size of\n      the bitfield.  Otherwise contains 0.  */"
    }
  ]
}