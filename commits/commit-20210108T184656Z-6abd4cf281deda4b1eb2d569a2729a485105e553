{
  "sha": "6abd4cf281deda4b1eb2d569a2729a485105e553",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmFiZDRjZjI4MWRlZGE0YjFlYjJkNTY5YTI3MjlhNDg1MTA1ZTU1Mw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-08T18:46:56Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-08T18:46:56Z"
    },
    "message": "gdb: check for empty strings in get_standard_cache_dir/get_standard_config_dir\n\nAs reported in PR 27157, if some environment variables read at startup\nby GDB are defined but empty, we hit the assert in gdb_abspath:\n\n    $ XDG_CACHE_HOME= ./gdb -nx --data-directory=data-directory -q\n    AddressSanitizer:DEADLYSIGNAL\n    =================================================================\n    ==2007040==ERROR: AddressSanitizer: SEGV on unknown address 0x0000000001b0 (pc 0x5639d4aa4127 bp 0x7ffdac232c00 sp 0x7ffdac232bf0 T0)\n    ==2007040==The signal is caused by a READ memory access.\n    ==2007040==Hint: address points to the zero page.\n        #0 0x5639d4aa4126 in target_stack::top() const /home/smarchi/src/binutils-gdb/gdb/target.h:1334\n        #1 0x5639d4aa41f1 in inferior::top_target() /home/smarchi/src/binutils-gdb/gdb/inferior.h:369\n        #2 0x5639d4a70b1f in current_top_target() /home/smarchi/src/binutils-gdb/gdb/target.c:120\n        #3 0x5639d4b00591 in gdb_readline_wrapper_cleanup::gdb_readline_wrapper_cleanup() /home/smarchi/src/binutils-gdb/gdb/top.c:1046\n        #4 0x5639d4afab31 in gdb_readline_wrapper(char const*) /home/smarchi/src/binutils-gdb/gdb/top.c:1104\n        #5 0x5639d4ccce2c in defaulted_query /home/smarchi/src/binutils-gdb/gdb/utils.c:893\n        #6 0x5639d4ccd6af in query(char const*, ...) /home/smarchi/src/binutils-gdb/gdb/utils.c:985\n        #7 0x5639d4ccaec1 in internal_vproblem /home/smarchi/src/binutils-gdb/gdb/utils.c:373\n        #8 0x5639d4ccb3d1 in internal_verror(char const*, int, char const*, __va_list_tag*) /home/smarchi/src/binutils-gdb/gdb/utils.c:439\n        #9 0x5639d5151a92 in internal_error(char const*, int, char const*, ...) /home/smarchi/src/binutils-gdb/gdbsupport/errors.cc:55\n        #10 0x5639d5162ab4 in gdb_abspath(char const*) /home/smarchi/src/binutils-gdb/gdbsupport/pathstuff.cc:132\n        #11 0x5639d5162fac in get_standard_cache_dir[abi:cxx11]() /home/smarchi/src/binutils-gdb/gdbsupport/pathstuff.cc:228\n        #12 0x5639d3e76a81 in _initialize_index_cache() /home/smarchi/src/binutils-gdb/gdb/dwarf2/index-cache.c:325\n        #13 0x5639d4dbbe92 in initialize_all_files() /home/smarchi/build/binutils-gdb/gdb/init.c:321\n        #14 0x5639d4b00259 in gdb_init(char*) /home/smarchi/src/binutils-gdb/gdb/top.c:2344\n        #15 0x5639d4440715 in captured_main_1 /home/smarchi/src/binutils-gdb/gdb/main.c:950\n        #16 0x5639d444252e in captured_main /home/smarchi/src/binutils-gdb/gdb/main.c:1229\n        #17 0x5639d44425cf in gdb_main(captured_main_args*) /home/smarchi/src/binutils-gdb/gdb/main.c:1254\n        #18 0x5639d3923371 in main /home/smarchi/src/binutils-gdb/gdb/gdb.c:32\n        #19 0x7fa002d3f0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\n        #20 0x5639d392314d in _start (/home/smarchi/build/binutils-gdb/gdb/gdb+0x4d414d)\n\ngdb_abspath doesn't handle empty strings, so handle this case in the\ncallers.  If a variable is defined but empty, I think it's reasonable in\nthis case to just ignore it, as if it was not defined.\n\nNote that this sometimes also lead to a segfault, because the failed\nassertion happens very early during startup, before things are fully\ninitialized.\n\ngdbsupport/ChangeLog:\n\n\tPR gdb/27157\n\t* pathstuff.cc (get_standard_cache_dir, get_standard_config_dir,\n\tfind_gdb_home_config_file): Add empty string check.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/27157\n\t* gdb.base/empty-host-env-vars.exp: New test.\n\nChange-Id: I8654d8e97e74e1dff6d308c111ae4b1bbf07bef9",
    "tree": {
      "sha": "bb998f0fa2a3bba0f59f4b72f0249e8a7c539aed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bb998f0fa2a3bba0f59f4b72f0249e8a7c539aed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6abd4cf281deda4b1eb2d569a2729a485105e553",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6abd4cf281deda4b1eb2d569a2729a485105e553",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6abd4cf281deda4b1eb2d569a2729a485105e553",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6abd4cf281deda4b1eb2d569a2729a485105e553/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d00f086803f2213bf4406278cd3e83d935e27096",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d00f086803f2213bf4406278cd3e83d935e27096",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d00f086803f2213bf4406278cd3e83d935e27096"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 90,
    "deletions": 7
  },
  "files": [
    {
      "sha": "ef3e794916413c9179c0a0e08e5074c5d66ab86f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6abd4cf281deda4b1eb2d569a2729a485105e553/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6abd4cf281deda4b1eb2d569a2729a485105e553/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6abd4cf281deda4b1eb2d569a2729a485105e553",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-08  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27157\n+\t* gdb.base/empty-host-env-vars.exp: New test.\n+\n 2021-01-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/completion.exp: Add a new test."
    },
    {
      "sha": "bd7212e7b655343ba9f310f8669974fabbf89fa8",
      "filename": "gdb/testsuite/gdb.base/empty-host-env-vars.exp",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6abd4cf281deda4b1eb2d569a2729a485105e553/gdb/testsuite/gdb.base/empty-host-env-vars.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6abd4cf281deda4b1eb2d569a2729a485105e553/gdb/testsuite/gdb.base/empty-host-env-vars.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/empty-host-env-vars.exp?ref=6abd4cf281deda4b1eb2d569a2729a485105e553",
      "patch": "@@ -0,0 +1,72 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# GDB reads some environment variables on startup, make sure it behaves\n+# correctly if these variables are defined but empty.\n+\n+set all_env_vars { HOME XDG_CACHE_HOME LOCALAPPDATA XDG_CONFIG_HOME }\n+\n+# Record the initial value of the index-cache directory.\n+clean_restart\n+set index_cache_directory \"\"\n+gdb_test_multiple \"show index-cache directory\" \"\" {\n+    -re -wrap \"The directory of the index cache is \\\"(.*)\\\"\\\\.\" {\n+\tset index_cache_directory $expect_out(1,string)\n+\tset index_cache_directory [string_to_regexp $index_cache_directory]\n+\tpass $gdb_test_name\n+    }\n+}\n+\n+foreach_with_prefix env_var_name $all_env_vars {\n+    # Restore the original state of the environment variable.\n+    save_vars env($env_var_name) {\n+\tset env($env_var_name) {}\n+\tclean_restart\n+\n+\t# Verify that the empty environment variable didn't affect the\n+\t# index-cache directory setting, that we still see the initial value.\n+\t# \"HOME\" is different, because if that  one is unset, GDB isn't even\n+\t# able to compute the default location.  In that case, we expect it to\n+\t# be empty.\n+\tif { $env_var_name == \"HOME\" } {\n+\t    gdb_test \"show index-cache directory\" \\\n+\t\t\"The directory of the index cache is \\\"\\\"\\\\.\"\n+\t} else {\n+\t    gdb_test \"show index-cache directory\" \\\n+\t\t\"The directory of the index cache is \\\"$index_cache_directory\\\"\\\\.\"\n+\t}\n+    }\n+}\n+\n+# Try the same, but with all the env vars set to an empty value at the same\n+# time.\n+with_test_prefix \"all env vars\" {\n+    set save_vars_arg {}\n+    foreach env_var_name $all_env_vars {\n+\tlappend save_vars_arg env($env_var_name)\n+    }\n+\n+    # Restore the original state of all the environment variables.\n+    save_vars $save_vars_arg {\n+\tforeach env_var_name $all_env_vars {\n+\t    set env($env_var_name) {}\n+\t}\n+\n+\tclean_restart\n+\n+\tgdb_test \"show index-cache directory\" \\\n+\t    \"The directory of the index cache is \\\"\\\"\\\\.\"\n+    }\n+}"
    },
    {
      "sha": "d973a6daa4fcbb2b50fa54033ddbe81a5f8b1304",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6abd4cf281deda4b1eb2d569a2729a485105e553/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6abd4cf281deda4b1eb2d569a2729a485105e553/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=6abd4cf281deda4b1eb2d569a2729a485105e553",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-08  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27157\n+\t* pathstuff.cc (get_standard_cache_dir, get_standard_config_dir,\n+\tfind_gdb_home_config_file): Add empty string check.\n+\n 2021-01-06  Mike Frysinger  <vapier@gentoo.org>\n \n \t* common-utils.h (align_up): Fix typo in header comment."
    },
    {
      "sha": "ad13900819efc0478b4576bdecafa79380605f8a",
      "filename": "gdbsupport/pathstuff.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6abd4cf281deda4b1eb2d569a2729a485105e553/gdbsupport/pathstuff.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6abd4cf281deda4b1eb2d569a2729a485105e553/gdbsupport/pathstuff.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/pathstuff.cc?ref=6abd4cf281deda4b1eb2d569a2729a485105e553",
      "patch": "@@ -222,7 +222,7 @@ get_standard_cache_dir ()\n \n #ifndef __APPLE__\n   const char *xdg_cache_home = getenv (\"XDG_CACHE_HOME\");\n-  if (xdg_cache_home != NULL)\n+  if (xdg_cache_home != NULL && xdg_cache_home[0] != '\\0')\n     {\n       /* Make sure the path is absolute and tilde-expanded.  */\n       gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (xdg_cache_home));\n@@ -231,7 +231,7 @@ get_standard_cache_dir ()\n #endif\n \n   const char *home = getenv (\"HOME\");\n-  if (home != NULL)\n+  if (home != NULL && home[0] != '\\0')\n     {\n       /* Make sure the path is absolute and tilde-expanded.  */\n       gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (home));\n@@ -240,14 +240,14 @@ get_standard_cache_dir ()\n \n #ifdef WIN32\n   const char *win_home = getenv (\"LOCALAPPDATA\");\n-  if (win_home != NULL)\n+  if (win_home != NULL && win_home[0] != '\\0')\n     {\n       /* Make sure the path is absolute and tilde-expanded.  */\n       gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (win_home));\n       return string_printf (\"%s/gdb\", abs.get ());\n     }\n #endif\n-    \n+\n   return {};\n }\n \n@@ -289,7 +289,7 @@ get_standard_config_dir ()\n \n #ifndef __APPLE__\n   const char *xdg_config_home = getenv (\"XDG_CONFIG_HOME\");\n-  if (xdg_config_home != NULL)\n+  if (xdg_config_home != NULL && xdg_config_home[0] != '\\0')\n     {\n       /* Make sure the path is absolute and tilde-expanded.  */\n       gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (xdg_config_home));\n@@ -298,7 +298,7 @@ get_standard_config_dir ()\n #endif\n \n   const char *home = getenv (\"HOME\");\n-  if (home != NULL)\n+  if (home != NULL && home[0] != '\\0')\n     {\n       /* Make sure the path is absolute and tilde-expanded.  */\n       gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (home));\n@@ -340,7 +340,7 @@ find_gdb_home_config_file (const char *name, struct stat *buf)\n     }\n \n   const char *homedir = getenv (\"HOME\");\n-  if (homedir != nullptr)\n+  if (homedir != nullptr && homedir[0] != '\\0')\n     {\n       /* Make sure the path is absolute and tilde-expanded.  */\n       gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (homedir));"
    }
  ]
}