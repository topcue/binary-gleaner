{
  "sha": "7c13f4e875fd5eeb0b7a1c301b4b513051822648",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2MxM2Y0ZTg3NWZkNWVlYjBiN2ExYzMwMWI0YjUxMzA1MTgyMjY0OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-12T20:29:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-22T12:39:50Z"
    },
    "message": "gdb: Restore old annotations behaviour when printing frame info\n\nThis undoes most of the changes from these commits:\n\n  commit ec8e2b6d3051f0b4b2a8eee9917898e95046c62f\n  Date:   Fri Jun 14 23:43:00 2019 +0100\n\n      gdb: Don't allow annotations to influence what else GDB prints\n\n  commit 0d3abd8cc936360f8c46502135edd2e646473438\n  Date:   Wed Jun 12 22:34:26 2019 +0100\n\n      gdb: Remove an update of current_source_line and current_source_symtab\n\nas a result of the discussion here:\n\n  https://sourceware.org/pipermail/gdb/2020-April/048468.html\n\nHaving taken time to reflect on the discussion, and reading the\ndocumentation again I believe we should revert GDB's behaviour back to\nhow it used to be.\n\nThe original concern that triggered the initial patch was that when\nannotations were on the current source and line were updated (inside\nthe annotation code), while when annotations are off this update would\nnot occur.  This was incorrect, as printing the source with the call\nto print_source_lines does also update the current source and line.\n\nFurther, the documentation here:\n  https://sourceware.org/gdb/current/onlinedocs/gdb/Source-Annotations.html#Source-Annotations\n\nClearly states:\n\n  \"The following annotation is used instead of displaying source code:\n\n   ^Z^Zsource filename:line:character:middle:addr\n\n   ...\"\n\nSo it is documented that the 'source' annotation is a replacement for,\nand not in addition to, actually printing the source lie.\n\nThere are still a few issues that I can see, these are:\n\n  1. In source.c:info_line_command, when annotations are on we call\n  annotate_source_line, however, if annotations are off then there is\n  no corresponding call to print the source line.  This means that a\n  if a user uses 'info line ...' with annotations on, and then does a\n  'list', they will get different results than if they had done this\n  with annotations off.\n\n  2. It bothers me that the call to annotate_source_line returns a\n  boolean, and that this controls a call to print_source_line (in\n  stack.c:print_frame_info).\n\n  The reason for this is that the source line annotation will only\n  print something if the file is found, and the line number is in\n  range for the file.\n\n  It seems to me like an annotation should always be printed, either\n  one that identifies the file and line, or one that identifies the\n  file and line GDB would like to access, but couldn't.\n\n  I considered changing this, but in the end decided not too, if I\n  extend the existing 'source' annotation to print something in all\n  cases then I risk breaking existing UIs that rely on the file and\n  line always being valid.  If I add a new annotation then this might\n  also break existing UIs that rely on GDB itself printing the error\n  from within print_source_line.\n\nGiven that annotations is deprecated (as I understand it) mechanism\nfor UIs to interact with GDB (in favour of MI) I figure we should just\nrestore the old behaviour, and leave the mini-bugs in until someone\nactually complains.\n\nThis isn't a straight revert of the two commits mentioned above.  I've\nleft annotate_source_line instead of going back to the original\nidentify_source_line, which lived in source.c, but was really\nannotation related.  The API for setting the current source and line\nhas changed since the original patches, so I updated for that change\ntoo.  Finally I wrote the code in stack.c so that we avoided an extra\nlevel of indentation, which I felt made things easier to read.\n\ngdb/ChangeLog:\n\n\t* annotate.c (annotate_source_line): Update return type, add call\n\tto update current symtab and line.\n\t* annotate.h (annotate_source_line): Update return type, and\n\textend header comment.\n\t* source.c (info_line_command): Check annotation_level before\n\tcalling annotate_source_line.\n\t* stack.c (print_frame_info): If calling annotate_source_line\n\treturns true, then don't print any other source line information.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/annota1.exp: Update expected results.\n\t* gdb.cp/annota2.exp: Update expected results, remove duplicate\n\ttest name.\n\t* gdb.cp/annota3.exp: Update expected results.",
    "tree": {
      "sha": "e1cd0f0c3fcb6892cea4a16c3bf3fe3823e51669",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1cd0f0c3fcb6892cea4a16c3bf3fe3823e51669"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c13f4e875fd5eeb0b7a1c301b4b513051822648",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c13f4e875fd5eeb0b7a1c301b4b513051822648",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c13f4e875fd5eeb0b7a1c301b4b513051822648",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c13f4e875fd5eeb0b7a1c301b4b513051822648/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f3fe02b0b8f6865820d8889a8420190063f3235",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f3fe02b0b8f6865820d8889a8420190063f3235",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f3fe02b0b8f6865820d8889a8420190063f3235"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 73,
    "deletions": 20
  },
  "files": [
    {
      "sha": "31550d23b14f5b4a2b4026768de571236bd69634",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -1,3 +1,14 @@\n+2020-05-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* annotate.c (annotate_source_line): Update return type, add call\n+\tto update current symtab and line.\n+\t* annotate.h (annotate_source_line): Update return type, and\n+\textend header comment.\n+\t* source.c (info_line_command): Check annotation_level before\n+\tcalling annotate_source_line.\n+\t* stack.c (print_frame_info): If calling annotate_source_line\n+\treturns true, then don't print any other source line information.\n+\n 2020-05-21  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* lm32-tdep.c (lm32_register_reggroup_p): Fix condition."
    },
    {
      "sha": "0a4e2f27cac0cb8579cc263f034fd51fe79bd783",
      "filename": "gdb/annotate.c",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/annotate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/annotate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/annotate.c?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -435,24 +435,33 @@ annotate_source (const char *filename, int line, int character, int mid,\n \n /* See annotate.h.  */\n \n-void\n+bool\n annotate_source_line (struct symtab *s, int line, int mid_statement,\n \t\t      CORE_ADDR pc)\n {\n   if (annotation_level > 0)\n     {\n       const std::vector<off_t> *offsets;\n       if (!g_source_cache.get_line_charpos (s, &offsets))\n-\treturn;\n-\n-      /* Don't index off the end of the line_charpos array.  */\n+\treturn false;\n       if (line > offsets->size ())\n-\treturn;\n+\treturn false;\n \n       annotate_source (s->fullname, line, (int) (*offsets)[line - 1],\n \t\t       mid_statement, SYMTAB_OBJFILE (s)->arch (),\n \t\t       pc);\n+\n+      /* Update the current symtab and line.  */\n+      symtab_and_line sal;\n+      sal.pspace = SYMTAB_PSPACE (s);\n+      sal.symtab = s;\n+      sal.line = line;\n+      set_current_source_symtab_and_line (sal);\n+\n+      return true;\n     }\n+\n+  return false;\n }\n \n "
    },
    {
      "sha": "70c2f280507b2aea59bd6e75610ec83ba830d19c",
      "filename": "gdb/annotate.h",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/annotate.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/annotate.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/annotate.h?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -92,8 +92,20 @@ struct annotate_arg_emitter\n    character position.\n \n    MID_STATEMENT is nonzero if the PC is not at the beginning of that\n-   line.  */\n-extern void annotate_source_line (struct symtab *s, int line,\n+   line.\n+\n+   The current symtab and line is updated to reflect S and LINE.\n+\n+   Return true if the annotation was printed and the current symtab and\n+   line were updated, otherwise return false, which can happen if the\n+   source file for S can't be found, or LINE is out of range.\n+\n+   This does leave GDB in the weird situation where, even when annotations\n+   are on, we only sometimes print the annotation, and only sometimes\n+   update the current symtab and line.  However, this particular annotation\n+   has behaved this way for some time, and front ends that still use\n+   annotations now depend on this behaviour.  */\n+extern bool annotate_source_line (struct symtab *s, int line,\n \t\t\t\t  int mid_statement, CORE_ADDR pc);\n \n extern void annotate_frame_begin (int, struct gdbarch *, CORE_ADDR);"
    },
    {
      "sha": "0c2b5a4f83de7f57ec587c66cfaa3c5f701f6562",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -1532,7 +1532,7 @@ info_line_command (const char *arg, int from_tty)\n \n \t  /* If this is the only line, show the source code.  If it could\n \t     not find the file, don't do anything special.  */\n-\t  if (sals.size () == 1)\n+\t  if (annotation_level > 0 && sals.size () == 1)\n \t    annotate_source_line (sal.symtab, sal.line, 0, start_pc);\n \t}\n       else"
    },
    {
      "sha": "265e764dc242dca48dda56da9ef5ea69fbf11d79",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -1126,10 +1126,25 @@ print_frame_info (const frame_print_options &fp_opts,\n     {\n       int mid_statement = ((print_what == SRC_LINE)\n \t\t\t   && frame_show_address (frame, sal));\n-      annotate_source_line (sal.symtab, sal.line, mid_statement,\n-\t\t\t    get_frame_pc (frame));\n-\n-      if (deprecated_print_frame_info_listing_hook)\n+      if (annotation_level > 0\n+\t  && annotate_source_line (sal.symtab, sal.line, mid_statement,\n+\t\t\t\t   get_frame_pc (frame)))\n+\t{\n+\t  /* The call to ANNOTATE_SOURCE_LINE already printed the\n+\t     annotation for this source line, so we avoid the two cases\n+\t     below and do not print the actual source line.  The\n+\t     documentation for annotations makes it clear that the source\n+\t     line annotation is printed __instead__ of printing the source\n+\t     line, not as well as.\n+\n+\t     However, if we fail to print the source line, which usually\n+\t     means either the source file is missing, or the requested\n+\t     line is out of range of the file, then we don't print the\n+\t     source annotation, and will pass through the \"normal\" print\n+\t     source line code below, the expectation is that this code\n+\t     will print an appropriate error.  */\n+\t}\n+      else if (deprecated_print_frame_info_listing_hook)\n \tdeprecated_print_frame_info_listing_hook (sal.symtab, sal.line,\n \t\t\t\t\t\t  sal.line + 1, 0);\n       else"
    },
    {
      "sha": "2edec92f0d4c7da630c80c2b13f73b2b9342cfff",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/annota1.exp: Update expected results.\n+\t* gdb.cp/annota2.exp: Update expected results, remove duplicate\n+\ttest name.\n+\t* gdb.cp/annota3.exp: Update expected results.\n+\n 2020-05-20  Simon Marchi  <simon.marchi@efficios.com>\n \n \tPR gdb/26016"
    },
    {
      "sha": "2fdfd65ce86321ab0c2f55277226f9f5b40b7cee",
      "filename": "gdb/testsuite/gdb.base/annota1.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/gdb.base/annota1.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/gdb.base/annota1.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/annota1.exp?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -268,10 +268,10 @@ if [target_info exists gdb,nosignals] {\n     unsupported \"backtrace @ signal handler\"\n } else {\n     gdb_test_multiple \"signal SIGUSR1\" \"send SIGUSR1\" {\n-\t-re \"\\r\\n\\032\\032post-prompt\\r\\nContinuing with signal SIGUSR1.\\r\\n\\r\\n\\032\\032starting\\(\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)|\\(\\r\\n\\r\\n\\032\\032breakpoints-invalid\\)\\)+\\r\\n\\r\\n\\032\\032breakpoint 2\\r\\n\\r\\nBreakpoint 2, \\r\\n\\032\\032frame-begin 0 $hex\\r\\n\\r\\n\\032\\032frame-function-name\\r\\nhandle_USR1\\r\\n\\032\\032frame-args\\r\\n \\\\(\\r\\n\\032\\032arg-begin\\r\\nsig\\r\\n\\032\\032arg-name-end\\r\\n=\\r\\n\\032\\032arg-value -\\r\\n$decimal\\r\\n\\032\\032arg-end\\r\\n\\\\)\\r\\n\\032\\032frame-source-begin\\r\\n at \\r\\n\\032\\032frame-source-file\\r\\n${escapedsrcfile}\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\\r\\n.*\\r\\n\\032\\032frame-source-end\\r\\n\\r\\n\\r\\n\\032\\032source.*annota1.c:.*:.*:beg:$hex\\r\\n$decimal\\[^\\r\\n\\]+\\r\\n\\r\\n\\032\\032frame-end\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n+\t-re \"\\r\\n\\032\\032post-prompt\\r\\nContinuing with signal SIGUSR1.\\r\\n\\r\\n\\032\\032starting\\(\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)|\\(\\r\\n\\r\\n\\032\\032breakpoints-invalid\\)\\)+\\r\\n\\r\\n\\032\\032breakpoint 2\\r\\n\\r\\nBreakpoint 2, \\r\\n\\032\\032frame-begin 0 $hex\\r\\n\\r\\n\\032\\032frame-function-name\\r\\nhandle_USR1\\r\\n\\032\\032frame-args\\r\\n \\\\(\\r\\n\\032\\032arg-begin\\r\\nsig\\r\\n\\032\\032arg-name-end\\r\\n=\\r\\n\\032\\032arg-value -\\r\\n$decimal\\r\\n\\032\\032arg-end\\r\\n\\\\)\\r\\n\\032\\032frame-source-begin\\r\\n at \\r\\n\\032\\032frame-source-file\\r\\n${escapedsrcfile}\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\\r\\n.*\\r\\n\\032\\032frame-source-end\\r\\n\\r\\n\\r\\n\\032\\032source.*annota1.c:.*:.*:beg:$hex\\r\\n\\r\\n\\032\\032frame-end\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n \t    pass $gdb_test_name\n \t}\n-\t-re \"\\r\\n\\032\\032post-prompt\\r\\nContinuing with signal SIGUSR1.\\r\\n\\r\\n\\032\\032starting\\(\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)|\\(\\r\\n\\r\\n\\032\\032breakpoints-invalid\\)\\)+\\r\\n\\r\\n\\032\\032breakpoint 2\\r\\n\\r\\nBreakpoint 2, \\r\\n\\032\\032frame-begin 0 $hex\\r\\n\\r\\n\\032\\032frame-function-name\\r\\nhandle_USR1\\r\\n\\032\\032frame-args\\r\\n \\\\(\\r\\n\\032\\032arg-begin\\r\\nsig\\r\\n\\032\\032arg-name-end\\r\\n=\\r\\n\\032\\032arg-value -\\r\\n$decimal\\r\\n\\032\\032arg-end\\r\\n\\\\)\\r\\n\\032\\032frame-source-begin\\r\\n at \\r\\n\\032\\032frame-source-file\\r\\n.*${srcfile}\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\\r\\n.*\\r\\n\\032\\032frame-source-end\\r\\n\\r\\n\\r\\n\\032\\032source.*annota1.c:.*:.*:beg:$hex\\r\\n$decimal\\[^\\r\\n\\]+\\r\\n\\r\\n\\032\\032frame-end\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n+\t-re \"\\r\\n\\032\\032post-prompt\\r\\nContinuing with signal SIGUSR1.\\r\\n\\r\\n\\032\\032starting\\(\\(\\r\\n\\r\\n\\032\\032frames-invalid\\)|\\(\\r\\n\\r\\n\\032\\032breakpoints-invalid\\)\\)+\\r\\n\\r\\n\\032\\032breakpoint 2\\r\\n\\r\\nBreakpoint 2, \\r\\n\\032\\032frame-begin 0 $hex\\r\\n\\r\\n\\032\\032frame-function-name\\r\\nhandle_USR1\\r\\n\\032\\032frame-args\\r\\n \\\\(\\r\\n\\032\\032arg-begin\\r\\nsig\\r\\n\\032\\032arg-name-end\\r\\n=\\r\\n\\032\\032arg-value -\\r\\n$decimal\\r\\n\\032\\032arg-end\\r\\n\\\\)\\r\\n\\032\\032frame-source-begin\\r\\n at \\r\\n\\032\\032frame-source-file\\r\\n.*${srcfile}\\r\\n\\032\\032frame-source-file-end\\r\\n:\\r\\n\\032\\032frame-source-line\\r\\n.*\\r\\n\\032\\032frame-source-end\\r\\n\\r\\n\\r\\n\\032\\032source.*annota1.c:.*:.*:beg:$hex\\r\\n\\r\\n\\032\\032frame-end\\r\\n\\r\\n\\032\\032stopped\\r\\n$gdb_prompt$\" {\n \t    setup_xfail \"*-*-*\" 1270\n \t    fail $gdb_test_name\n \t}"
    },
    {
      "sha": "2c36c5854ed4f609e46ad56dd6064a2e3f8a1f3c",
      "filename": "gdb/testsuite/gdb.cp/annota2.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/gdb.cp/annota2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/gdb.cp/annota2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/annota2.exp?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -73,9 +73,9 @@ gdb_expect {\n     timeout\t            { fail \"annotation set at level 2 (timeout)\" }\n   }\n \n-gdb_test_multiple \"run\" \"run until main breakpoint\" {\n+gdb_test_multiple \"run\" \"run until main breakpoint, first time\" {\n     -re \"$main_line.*$gdb_prompt$\" {\n-\tpass \"run until main breakpoint\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -189,9 +189,9 @@ set main_line 22\n # run program up to breakpoint.\n #\n \n-gdb_test_multiple \"run\" \"run until main breakpoint\" {\n+gdb_test_multiple \"run\" \"run until main breakpoint, second time\" {\n     -re \"$main_line.*$gdb_prompt$\"    {\n-\tpass \"run until main breakpoint\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -243,7 +243,6 @@ set pat [multi_line \"\" \\\n \t     \"\" \\\n \t     \"\" \\\n \t     \"\\032\\032source .*$srcfile.*beg:$hex\" \\\n-\t     \"$decimal\\[^\\r\\n\\]+\" \\\n \t     \"\" \\\n \t     \"\\032\\032frame-end\" \\\n \t     \"\" \\"
    },
    {
      "sha": "62d522083b6efaf6fa9895daa35c1797f90d58d4",
      "filename": "gdb/testsuite/gdb.cp/annota3.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/gdb.cp/annota3.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c13f4e875fd5eeb0b7a1c301b4b513051822648/gdb/testsuite/gdb.cp/annota3.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/annota3.exp?ref=7c13f4e875fd5eeb0b7a1c301b4b513051822648",
      "patch": "@@ -164,7 +164,7 @@ gdb_expect_list \"set watch on a.x\" \"$gdb_prompt$\" {\n # annotate-watchpoint\n #\n gdb_test_multiple \"next\" \"watch triggered on a.x\" {\n-    -re \"\\r\\n\\032\\032post-prompt\\r\\n\\r\\n\\032\\032starting\\r\\n\\r\\n\\032\\032watchpoint 3\\r\\n.*atchpoint 3: a.x\\r\\n\\r\\nOld value = 0\\r\\nNew value = 1\\r\\n\\r\\n(\\032\\032frame-begin 0 0x\\[0-9a-z\\]+\\r\\n|)main \\\\(\\\\) at .*$srcfile:$decimal\\r\\n\\r\\n\\032\\032source .*$srcfile.*beg:$hex\\r\\n$decimal\\[^\\r\\n\\]+\\r\\n\\r\\n\\032\\032stopped\\r\\n.*$gdb_prompt$\" { \n+    -re \"\\r\\n\\032\\032post-prompt\\r\\n\\r\\n\\032\\032starting\\r\\n\\r\\n\\032\\032watchpoint 3\\r\\n.*atchpoint 3: a.x\\r\\n\\r\\nOld value = 0\\r\\nNew value = 1\\r\\n\\r\\n(\\032\\032frame-begin 0 0x\\[0-9a-z\\]+\\r\\n|)main \\\\(\\\\) at .*$srcfile:$decimal\\r\\n\\r\\n\\032\\032source .*$srcfile.*beg:$hex\\r\\n\\r\\n\\032\\032stopped\\r\\n.*$gdb_prompt$\" {\n \tpass \"watch triggered on a.x\"\n     }\n }"
    }
  ]
}