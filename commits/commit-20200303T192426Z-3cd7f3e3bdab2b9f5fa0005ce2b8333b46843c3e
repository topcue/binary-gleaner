{
  "sha": "3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2NkN2YzZTNiZGFiMmI5ZjVmYTAwMDVjZTJiODMzM2I0Njg0M2MzZQ==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-03T19:24:16Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-03T19:24:26Z"
    },
    "message": "x86: Replace IgnoreSize/DefaultSize with MnemonicSize\n\nSince an instruction template can't have both IgnoreSize and DefaultSize,\nthis patch replaces IgnoreSize and DefaultSize with MnemonicSize.\n\ngas/\n\n\t* config/tc-i386.c (match_template): Replace ignoresize and\n\tdefaultsize with mnemonicsize.\n\t(process_suffix): Likewise.\n\nopcodes/\n\n\t* i386-gen.c (opcode_modifiers): Replace IgnoreSize/DefaultSize\n\twith MnemonicSize.\n\t* i386-opc.h (IGNORESIZE): New.\n\t(DEFAULTSIZE): Likewise.\n\t(IgnoreSize): Removed.\n\t(DefaultSize): Likewise.\n\t(MnemonicSize): New.\n\t(i386_opcode_modifier): Replace ignoresize/defaultsize with\n\tmnemonicsize.\n\t* i386-opc.tbl (IgnoreSize): New.\n\t(DefaultSize): Likewise.\n\t* i386-tbl.h: Regenerated.",
    "tree": {
      "sha": "8aafcd63e6bd6b7c8890192b8ee7dcb5dc6c01f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8aafcd63e6bd6b7c8890192b8ee7dcb5dc6c01f9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e5d66b6a46c7b0353308bfb508b96a59f1addbf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e5d66b6a46c7b0353308bfb508b96a59f1addbf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5e5d66b6a46c7b0353308bfb508b96a59f1addbf"
    }
  ],
  "stats": {
    "total": 21765,
    "additions": 10895,
    "deletions": 10870
  },
  "files": [
    {
      "sha": "ed717afa89d83cbac48b75a3c9b4b19036e2e8eb",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
      "patch": "@@ -1,3 +1,9 @@\n+2020-03-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/tc-i386.c (match_template): Replace ignoresize and\n+\tdefaultsize with mnemonicsize.\n+\t(process_suffix): Likewise.\n+\n 2020-03-03  Sergey Belyashov  <sergey.belyashov@gmail.com>\n \n \tPR 25627"
    },
    {
      "sha": "af0a1cb96081a25f8640979f89dcf0b898bc90fc",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
      "patch": "@@ -5876,7 +5876,7 @@ match_template (char mnem_suffix)\n       if (i.suffix == QWORD_MNEM_SUFFIX\n \t  && flag_code != CODE_64BIT\n \t  && (intel_syntax\n-\t      ? (!t->opcode_modifier.ignoresize\n+\t      ? (t->opcode_modifier.mnemonicsize != IGNORESIZE\n \t         && !t->opcode_modifier.broadcast\n \t\t && !intel_float_operand (t->name))\n \t      : intel_float_operand (t->name) != 2)\n@@ -5892,7 +5892,7 @@ match_template (char mnem_suffix)\n       else if (i.suffix == LONG_MNEM_SUFFIX\n \t       && !cpu_arch_flags.bitfield.cpui386\n \t       && (intel_syntax\n-\t\t   ? (!t->opcode_modifier.ignoresize\n+\t\t   ? (t->opcode_modifier.mnemonicsize != IGNORESIZE\n \t\t      && !intel_float_operand (t->name))\n \t\t   : intel_float_operand (t->name) != 2)\n \t       && ((operand_types[0].bitfield.class != RegMMX\n@@ -6247,7 +6247,7 @@ match_template (char mnem_suffix)\n \tas_warn (_(\"indirect %s without `*'\"), t->name);\n \n       if (t->opcode_modifier.isprefix\n-\t  && t->opcode_modifier.ignoresize)\n+\t  && t->opcode_modifier.mnemonicsize == IGNORESIZE)\n \t{\n \t  /* Warn them that a data or address size prefix doesn't\n \t     affect assembly of the next line of code.  */\n@@ -6371,7 +6371,7 @@ process_suffix (void)\n       else if (i.suffix == BYTE_MNEM_SUFFIX)\n \t{\n \t  if (intel_syntax\n-\t      && i.tm.opcode_modifier.ignoresize\n+\t      && i.tm.opcode_modifier.mnemonicsize == IGNORESIZE\n \t      && i.tm.opcode_modifier.no_bsuf)\n \t    i.suffix = 0;\n \t  else if (!check_byte_reg ())\n@@ -6380,7 +6380,7 @@ process_suffix (void)\n       else if (i.suffix == LONG_MNEM_SUFFIX)\n \t{\n \t  if (intel_syntax\n-\t      && i.tm.opcode_modifier.ignoresize\n+\t      && i.tm.opcode_modifier.mnemonicsize == IGNORESIZE\n \t      && i.tm.opcode_modifier.no_lsuf\n \t      && !i.tm.opcode_modifier.todword\n \t      && !i.tm.opcode_modifier.toqword)\n@@ -6391,7 +6391,7 @@ process_suffix (void)\n       else if (i.suffix == QWORD_MNEM_SUFFIX)\n \t{\n \t  if (intel_syntax\n-\t      && i.tm.opcode_modifier.ignoresize\n+\t      && i.tm.opcode_modifier.mnemonicsize == IGNORESIZE\n \t      && i.tm.opcode_modifier.no_qsuf\n \t      && !i.tm.opcode_modifier.todword\n \t      && !i.tm.opcode_modifier.toqword)\n@@ -6402,13 +6402,14 @@ process_suffix (void)\n       else if (i.suffix == WORD_MNEM_SUFFIX)\n \t{\n \t  if (intel_syntax\n-\t      && i.tm.opcode_modifier.ignoresize\n+\t      && i.tm.opcode_modifier.mnemonicsize == IGNORESIZE\n \t      && i.tm.opcode_modifier.no_wsuf)\n \t    i.suffix = 0;\n \t  else if (!check_word_reg ())\n \t    return 0;\n \t}\n-      else if (intel_syntax && i.tm.opcode_modifier.ignoresize)\n+      else if (intel_syntax\n+\t       && i.tm.opcode_modifier.mnemonicsize == IGNORESIZE)\n \t/* Do nothing if the instruction is going to ignore the prefix.  */\n \t;\n       else\n@@ -6417,7 +6418,8 @@ process_suffix (void)\n       /* Undo the movsx/movzx change done above.  */\n       i.operands = numop;\n     }\n-  else if (i.tm.opcode_modifier.defaultsize && !i.suffix)\n+  else if (i.tm.opcode_modifier.mnemonicsize == DEFAULTSIZE\n+\t   && !i.suffix)\n     {\n       i.suffix = stackop_size;\n       if (stackop_size == LONG_MNEM_SUFFIX)\n@@ -6466,12 +6468,12 @@ process_suffix (void)\n     }\n \n   if (!i.suffix\n-      && (!i.tm.opcode_modifier.defaultsize\n+      && (i.tm.opcode_modifier.mnemonicsize != DEFAULTSIZE\n \t  /* Also cover lret/retf/iret in 64-bit mode.  */\n \t  || (flag_code == CODE_64BIT\n \t      && !i.tm.opcode_modifier.no_lsuf\n \t      && !i.tm.opcode_modifier.no_qsuf))\n-      && !i.tm.opcode_modifier.ignoresize\n+      && i.tm.opcode_modifier.mnemonicsize != IGNORESIZE\n       /* Accept FLDENV et al without suffix.  */\n       && (i.tm.opcode_modifier.no_ssuf || i.tm.opcode_modifier.floatmf))\n     {\n@@ -6544,7 +6546,7 @@ process_suffix (void)\n       if (suffixes & (suffixes - 1))\n \t{\n \t  if (intel_syntax\n-\t      && (!i.tm.opcode_modifier.defaultsize\n+\t      && (i.tm.opcode_modifier.mnemonicsize != DEFAULTSIZE\n \t\t  || operand_check == check_error))\n \t    {\n \t      as_bad (_(\"ambiguous operand size for `%s'\"), i.tm.name);\n@@ -6638,7 +6640,7 @@ process_suffix (void)\n \t size prefix, except for instructions that will ignore this\n \t prefix anyway.  */\n       if (i.suffix != QWORD_MNEM_SUFFIX\n-\t  && !i.tm.opcode_modifier.ignoresize\n+\t  && i.tm.opcode_modifier.mnemonicsize != IGNORESIZE\n \t  && !i.tm.opcode_modifier.floatmf\n \t  && !is_any_vex_encoding (&i.tm)\n \t  && ((i.suffix == LONG_MNEM_SUFFIX) == (flag_code == CODE_16BIT)"
    },
    {
      "sha": "6508515fa875baa45a1bf20b35c4a9210653a9a2",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
      "patch": "@@ -1,3 +1,18 @@\n+2020-03-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* i386-gen.c (opcode_modifiers): Replace IgnoreSize/DefaultSize\n+\twith MnemonicSize.\n+\t* i386-opc.h (IGNORESIZE): New.\n+\t(DEFAULTSIZE): Likewise.\n+\t(IgnoreSize): Removed.\n+\t(DefaultSize): Likewise.\n+\t(MnemonicSize): New.\n+\t(i386_opcode_modifier): Replace ignoresize/defaultsize with\n+\tmnemonicsize.\n+\t* i386-opc.tbl (IgnoreSize): New.\n+\t(DefaultSize): Likewise.\n+\t* i386-tbl.h: Regenerated.\n+\n 2020-03-03  Sergey Belyashov  <sergey.belyashov@gmail.com>\n \n \tPR 25627"
    },
    {
      "sha": "ac7852ee19d04574b3ac71170d1ab8c8486f9db8",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
      "patch": "@@ -622,8 +622,7 @@ static bitfield opcode_modifiers[] =\n   BITFIELD (FloatR),\n   BITFIELD (Size),\n   BITFIELD (CheckRegSize),\n-  BITFIELD (IgnoreSize),\n-  BITFIELD (DefaultSize),\n+  BITFIELD (MnemonicSize),\n   BITFIELD (Anysize),\n   BITFIELD (No_bSuf),\n   BITFIELD (No_wSuf),"
    },
    {
      "sha": "1718ca2751195863fdadaf4943746728e7850f28",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
      "patch": "@@ -427,9 +427,10 @@ enum\n   CheckRegSize,\n   /* instruction ignores operand size prefix and in Intel mode ignores\n      mnemonic size suffix check.  */\n-  IgnoreSize,\n+#define IGNORESIZE\t1\n   /* default insn size depends on mode */\n-  DefaultSize,\n+#define DEFAULTSIZE\t2\n+  MnemonicSize,\n   /* any memory size */\n   Anysize,\n   /* b suffix on instruction illegal */\n@@ -661,8 +662,7 @@ typedef struct i386_opcode_modifier\n   unsigned int floatr:1;\n   unsigned int size:2;\n   unsigned int checkregsize:1;\n-  unsigned int ignoresize:1;\n-  unsigned int defaultsize:1;\n+  unsigned int mnemonicsize:2;\n   unsigned int anysize:1;\n   unsigned int no_bsuf:1;\n   unsigned int no_wsuf:1;"
    },
    {
      "sha": "2c8c0f8f3cd896f78caf6bdec08816aae14f9ae6",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e",
      "patch": "@@ -66,6 +66,9 @@\n #define Size32 Size=SIZE32\n #define Size64 Size=SIZE64\n \n+#define IgnoreSize\tMnemonicSize=IGNORESIZE\n+#define DefaultSize\tMnemonicSize=DEFAULTSIZE\n+\n // RegMem implies a ModR/M byte\n #define RegMem Modrm|RegMem\n "
    },
    {
      "sha": "f8a9d2a945dc91749d9f99385f20d5050ac4414f",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 10851,
      "deletions": 10851,
      "changes": 21702,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=3cd7f3e3bdab2b9f5fa0005ce2b8333b46843c3e"
    }
  ]
}