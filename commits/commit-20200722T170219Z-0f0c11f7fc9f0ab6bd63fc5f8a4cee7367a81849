{
  "sha": "0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGYwYzExZjdmYzlmMGFiNmJkNjNmYzVmOGE0Y2VlNzM2N2E4MTg0OQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-05T17:35:46Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:19Z"
    },
    "message": "libctf, dedup: add deduplicator\n\nThis adds the core deduplicator that the ctf_link machinery calls\n(possibly repeatedly) to link the CTF sections: it takes an array\nof input ctf_file_t's and another array that indicates which entries in\nthe input array are parents of which other entries, and returns an array\nof outputs.  The first output is always the ctf_file_t on which\nctf_link/ctf_dedup/etc was called: the other outputs are child dicts\nthat have the first output as their parent.\n\ninclude/\n\t* ctf-api.h (CTF_LINK_SHARE_DUPLICATED): No longer unimplemented.\nlibctf/\n\t* ctf-impl.h (ctf_type_id_key): New, the key in the\n\tcd_id_to_file_t.\n\t(ctf_dedup): New, core deduplicator state.\n\t(ctf_file_t) <ctf_dedup>: New.\n\t<ctf_dedup_atoms>: New.\n\t<ctf_dedup_atoms_alloc>: New.\n\t(ctf_hash_type_id_key): New prototype.\n\t(ctf_hash_eq_type_id_key): Likewise.\n\t(ctf_dedup_atoms_init): Likewise.\n\t* ctf-hash.c (ctf_hash_eq_type_id_key): New.\n\t(ctf_dedup_atoms_init): Likewise.\n\t* ctf-create.c (ctf_serialize): Adjusted.\n\t(ctf_add_encoded): No longer static.\n\t(ctf_add_reftype): Likewise.\n\t* ctf-open.c (ctf_file_close): Destroy the\n\tctf_dedup_atoms_alloc.\n\t* ctf-dedup.c: New file.\n        * ctf-decls.h [!HAVE_DECL_STPCPY]: Add prototype.\n\t* configure.ac: Check for stpcpy.\n\t* Makefile.am: Add it.\n\t* Makefile.in: Regenerate.\n        * config.h.in: Regenerate.\n        * configure: Regenerate.",
    "tree": {
      "sha": "eff35c0824fa60651cd492f8fa63316da9a205da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eff35c0824fa60651cd492f8fa63316da9a205da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a9b9870206658564272fe17d2079ed9eb6ffb15f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9b9870206658564272fe17d2079ed9eb6ffb15f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a9b9870206658564272fe17d2079ed9eb6ffb15f"
    }
  ],
  "stats": {
    "total": 3425,
    "additions": 3401,
    "deletions": 24
  },
  "files": [
    {
      "sha": "daf0fe2a564331fa879c7916af672edbf4ffc6fb",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (CTF_LINK_SHARE_DUPLICATED): No longer unimplemented.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ctf_link_variable_filter_t): New."
    },
    {
      "sha": "c3683db0996371522969515b7621739a180ae6ff",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -83,7 +83,7 @@ typedef struct ctf_link_sym\n /* Share all types that are not in conflict.  The default.  */\n #define CTF_LINK_SHARE_UNCONFLICTED 0x0\n \n-/* Share only types that are used by multiple inputs.  Not implemented yet.  */\n+/* Share only types that are used by multiple inputs.  */\n #define CTF_LINK_SHARE_DUPLICATED 0x1\n \n /* Create empty outputs for all registered CU mappings even if no types are"
    },
    {
      "sha": "58eb2f61de39e2c740f8f1829743f2dfcf064262",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -1,3 +1,29 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (ctf_type_id_key): New, the key in the\n+\tcd_id_to_file_t.\n+\t(ctf_dedup): New, core deduplicator state.\n+\t(ctf_file_t) <ctf_dedup>: New.\n+\t<ctf_dedup_atoms>: New.\n+\t<ctf_dedup_atoms_alloc>: New.\n+\t(ctf_hash_type_id_key): New prototype.\n+\t(ctf_hash_eq_type_id_key): Likewise.\n+\t(ctf_dedup_atoms_init): Likewise.\n+\t* ctf-hash.c (ctf_hash_eq_type_id_key): New.\n+\t(ctf_dedup_atoms_init): Likewise.\n+\t* ctf-create.c (ctf_serialize): Adjusted.\n+\t(ctf_add_encoded): No longer static.\n+\t(ctf_add_reftype): Likewise.\n+\t* ctf-open.c (ctf_file_close): Destroy the\n+\tctf_dedup_atoms_alloc.\n+\t* ctf-dedup.c: New file.\n+        * ctf-decls.h [!HAVE_DECL_STPCPY]: Add prototype.\n+\t* configure.ac: Check for stpcpy.\n+\t* Makefile.am: Add it.\n+\t* Makefile.in: Regenerate.\n+        * config.h.in: Regenerate.\n+        * configure: Regenerate.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* configure.ac: Add --enable-libctf-hash-debugging."
    },
    {
      "sha": "8b8f0a8cf83de2bb27981d65adfd4b5572911f27",
      "filename": "libctf/Makefile.am",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/Makefile.am?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -43,8 +43,9 @@ libctf_nobfd_la_LIBADD = @SHARED_LIBADD@ $(ZLIB)\n libctf_nobfd_la_LDFLAGS = -version-info 0:0:0 @SHARED_LDFLAGS@ @VERSION_FLAGS@\n libctf_nobfd_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=1\n libctf_nobfd_la_SOURCES = ctf-archive.c ctf-dump.c ctf-create.c ctf-decl.c ctf-error.c \\\n-\t\t\t  ctf-hash.c ctf-labels.c ctf-link.c ctf-lookup.c ctf-open.c \\\n-\t\t\t  ctf-sha1.c ctf-string.c ctf-subr.c ctf-types.c ctf-util.c\n+\t\t\t  ctf-hash.c ctf-labels.c ctf-dedup.c ctf-link.c ctf-lookup.c \\\n+\t\t\t  ctf-open.c ctf-sha1.c ctf-string.c ctf-subr.c ctf-types.c \\\n+\t\t\t  ctf-util.c\n if NEED_CTF_QSORT_R\n libctf_nobfd_la_SOURCES += ctf-qsort_r.c\n endif"
    },
    {
      "sha": "78de09ba10a40df868d3a3b49397e90bb002d09f",
      "filename": "libctf/Makefile.in",
      "status": "modified",
      "additions": 34,
      "deletions": 18,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/Makefile.in?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -166,18 +166,18 @@ am__DEPENDENCIES_1 =\n libctf_nobfd_la_DEPENDENCIES = $(am__DEPENDENCIES_1)\n am__libctf_nobfd_la_SOURCES_DIST = ctf-archive.c ctf-dump.c \\\n \tctf-create.c ctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c \\\n-\tctf-link.c ctf-lookup.c ctf-open.c ctf-sha1.c ctf-string.c \\\n-\tctf-subr.c ctf-types.c ctf-util.c ctf-qsort_r.c\n+\tctf-dedup.c ctf-link.c ctf-lookup.c ctf-open.c ctf-sha1.c \\\n+\tctf-string.c ctf-subr.c ctf-types.c ctf-util.c ctf-qsort_r.c\n @NEED_CTF_QSORT_R_TRUE@am__objects_1 = libctf_nobfd_la-ctf-qsort_r.lo\n am_libctf_nobfd_la_OBJECTS = libctf_nobfd_la-ctf-archive.lo \\\n \tlibctf_nobfd_la-ctf-dump.lo libctf_nobfd_la-ctf-create.lo \\\n \tlibctf_nobfd_la-ctf-decl.lo libctf_nobfd_la-ctf-error.lo \\\n \tlibctf_nobfd_la-ctf-hash.lo libctf_nobfd_la-ctf-labels.lo \\\n-\tlibctf_nobfd_la-ctf-link.lo libctf_nobfd_la-ctf-lookup.lo \\\n-\tlibctf_nobfd_la-ctf-open.lo libctf_nobfd_la-ctf-sha1.lo \\\n-\tlibctf_nobfd_la-ctf-string.lo libctf_nobfd_la-ctf-subr.lo \\\n-\tlibctf_nobfd_la-ctf-types.lo libctf_nobfd_la-ctf-util.lo \\\n-\t$(am__objects_1)\n+\tlibctf_nobfd_la-ctf-dedup.lo libctf_nobfd_la-ctf-link.lo \\\n+\tlibctf_nobfd_la-ctf-lookup.lo libctf_nobfd_la-ctf-open.lo \\\n+\tlibctf_nobfd_la-ctf-sha1.lo libctf_nobfd_la-ctf-string.lo \\\n+\tlibctf_nobfd_la-ctf-subr.lo libctf_nobfd_la-ctf-types.lo \\\n+\tlibctf_nobfd_la-ctf-util.lo $(am__objects_1)\n libctf_nobfd_la_OBJECTS = $(am_libctf_nobfd_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -191,18 +191,18 @@ libctf_nobfd_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\\n @INSTALL_LIBBFD_TRUE@am_libctf_nobfd_la_rpath = -rpath $(libdir)\n am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)\n am__libctf_la_SOURCES_DIST = ctf-archive.c ctf-dump.c ctf-create.c \\\n-\tctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c ctf-link.c \\\n-\tctf-lookup.c ctf-open.c ctf-sha1.c ctf-string.c ctf-subr.c \\\n-\tctf-types.c ctf-util.c ctf-qsort_r.c ctf-open-bfd.c\n+\tctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c ctf-dedup.c \\\n+\tctf-link.c ctf-lookup.c ctf-open.c ctf-sha1.c ctf-string.c \\\n+\tctf-subr.c ctf-types.c ctf-util.c ctf-qsort_r.c ctf-open-bfd.c\n @NEED_CTF_QSORT_R_TRUE@am__objects_2 = libctf_la-ctf-qsort_r.lo\n am__objects_3 = libctf_la-ctf-archive.lo libctf_la-ctf-dump.lo \\\n \tlibctf_la-ctf-create.lo libctf_la-ctf-decl.lo \\\n \tlibctf_la-ctf-error.lo libctf_la-ctf-hash.lo \\\n-\tlibctf_la-ctf-labels.lo libctf_la-ctf-link.lo \\\n-\tlibctf_la-ctf-lookup.lo libctf_la-ctf-open.lo \\\n-\tlibctf_la-ctf-sha1.lo libctf_la-ctf-string.lo \\\n-\tlibctf_la-ctf-subr.lo libctf_la-ctf-types.lo \\\n-\tlibctf_la-ctf-util.lo $(am__objects_2)\n+\tlibctf_la-ctf-labels.lo libctf_la-ctf-dedup.lo \\\n+\tlibctf_la-ctf-link.lo libctf_la-ctf-lookup.lo \\\n+\tlibctf_la-ctf-open.lo libctf_la-ctf-sha1.lo \\\n+\tlibctf_la-ctf-string.lo libctf_la-ctf-subr.lo \\\n+\tlibctf_la-ctf-types.lo libctf_la-ctf-util.lo $(am__objects_2)\n am_libctf_la_OBJECTS = $(am__objects_3) libctf_la-ctf-open-bfd.lo\n libctf_la_OBJECTS = $(am_libctf_la_OBJECTS)\n libctf_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n@@ -457,9 +457,9 @@ libctf_nobfd_la_LIBADD = @SHARED_LIBADD@ $(ZLIB)\n libctf_nobfd_la_LDFLAGS = -version-info 0:0:0 @SHARED_LDFLAGS@ @VERSION_FLAGS@\n libctf_nobfd_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=1\n libctf_nobfd_la_SOURCES = ctf-archive.c ctf-dump.c ctf-create.c \\\n-\tctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c ctf-link.c \\\n-\tctf-lookup.c ctf-open.c ctf-sha1.c ctf-string.c ctf-subr.c \\\n-\tctf-types.c ctf-util.c $(am__append_1)\n+\tctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c ctf-dedup.c \\\n+\tctf-link.c ctf-lookup.c ctf-open.c ctf-sha1.c ctf-string.c \\\n+\tctf-subr.c ctf-types.c ctf-util.c $(am__append_1)\n libctf_la_LIBADD = @BFD_LIBADD@ $(libctf_nobfd_la_LIBADD)\n libctf_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=0\n libctf_la_DEPENDENCIES = @BFD_DEPENDENCIES@\n@@ -581,6 +581,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-archive.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-create.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-decl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-dedup.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-dump.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-error.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-hash.Plo@am__quote@\n@@ -598,6 +599,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-archive.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-create.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-decl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-dedup.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-dump.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-error.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-hash.Plo@am__quote@\n@@ -682,6 +684,13 @@ libctf_nobfd_la-ctf-labels.lo: ctf-labels.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-labels.lo `test -f 'ctf-labels.c' || echo '$(srcdir)/'`ctf-labels.c\n \n+libctf_nobfd_la-ctf-dedup.lo: ctf-dedup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-dedup.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-dedup.Tpo -c -o libctf_nobfd_la-ctf-dedup.lo `test -f 'ctf-dedup.c' || echo '$(srcdir)/'`ctf-dedup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-dedup.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-dedup.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-dedup.c' object='libctf_nobfd_la-ctf-dedup.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-dedup.lo `test -f 'ctf-dedup.c' || echo '$(srcdir)/'`ctf-dedup.c\n+\n libctf_nobfd_la-ctf-link.lo: ctf-link.c\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-link.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-link.Tpo -c -o libctf_nobfd_la-ctf-link.lo `test -f 'ctf-link.c' || echo '$(srcdir)/'`ctf-link.c\n @am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-link.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-link.Plo\n@@ -794,6 +803,13 @@ libctf_la-ctf-labels.lo: ctf-labels.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-labels.lo `test -f 'ctf-labels.c' || echo '$(srcdir)/'`ctf-labels.c\n \n+libctf_la-ctf-dedup.lo: ctf-dedup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-dedup.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-dedup.Tpo -c -o libctf_la-ctf-dedup.lo `test -f 'ctf-dedup.c' || echo '$(srcdir)/'`ctf-dedup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-dedup.Tpo $(DEPDIR)/libctf_la-ctf-dedup.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-dedup.c' object='libctf_la-ctf-dedup.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-dedup.lo `test -f 'ctf-dedup.c' || echo '$(srcdir)/'`ctf-dedup.c\n+\n libctf_la-ctf-link.lo: ctf-link.c\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-link.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-link.Tpo -c -o libctf_la-ctf-link.lo `test -f 'ctf-link.c' || echo '$(srcdir)/'`ctf-link.c\n @am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-link.Tpo $(DEPDIR)/libctf_la-ctf-link.Plo"
    },
    {
      "sha": "5db637c79036d23da3c6e29ff85a7340497e75b8",
      "filename": "libctf/config.h.in",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/config.h.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/config.h.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/config.h.in?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -32,6 +32,10 @@\n    don't. */\n #undef HAVE_DECL_BSWAP_64\n \n+/* Define to 1 if you have the declaration of `stpcpy', and to 0 if you don't.\n+   */\n+#undef HAVE_DECL_STPCPY\n+\n /* Define to 1 if you have the declaration of `vasprintf', and to 0 if you\n    don't. */\n #undef HAVE_DECL_VASPRINTF"
    },
    {
      "sha": "a1f5b7ff09ffa609f2305c33b2c55d6065c93d60",
      "filename": "libctf/configure",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/configure?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -13186,6 +13186,16 @@ fi\n cat >>confdefs.h <<_ACEOF\n #define HAVE_DECL_VASPRINTF $ac_have_decl\n _ACEOF\n+ac_fn_c_check_decl \"$LINENO\" \"stpcpy\" \"ac_cv_have_decl_stpcpy\" \"$ac_includes_default\"\n+if test \"x$ac_cv_have_decl_stpcpy\" = xyes; then :\n+  ac_have_decl=1\n+else\n+  ac_have_decl=0\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_STPCPY $ac_have_decl\n+_ACEOF\n \n \n "
    },
    {
      "sha": "f5ed973b10ddac23a9308b243489eb6218513130",
      "filename": "libctf/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/configure.ac?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -108,7 +108,7 @@ AC_CHECK_FUNCS(pread)\n \n dnl Check for bswap_{16,32,64}\n AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64], [], [], [[#include <byteswap.h>]])\n-AC_CHECK_DECLS([asprintf, vasprintf])\n+AC_CHECK_DECLS([asprintf, vasprintf, stpcpy])\n \n dnl Check for qsort_r.  (Taken from gnulib.)\n AC_CHECK_FUNCS_ONCE([qsort_r])"
    },
    {
      "sha": "35c286c3b4064be9603975e1bd64d6f6c1ce3ee0",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -546,6 +546,9 @@ ctf_serialize (ctf_file_t *fp)\n   nfp->ctf_link_variable_filter = fp->ctf_link_variable_filter;\n   nfp->ctf_link_variable_filter_arg = fp->ctf_link_variable_filter_arg;\n   nfp->ctf_link_flags = fp->ctf_link_flags;\n+  nfp->ctf_dedup_atoms = fp->ctf_dedup_atoms;\n+  nfp->ctf_dedup_atoms_alloc = fp->ctf_dedup_atoms_alloc;\n+  memcpy (&nfp->ctf_dedup, &fp->ctf_dedup, sizeof (fp->ctf_dedup));\n \n   nfp->ctf_snapshot_lu = fp->ctf_snapshots;\n \n@@ -571,11 +574,14 @@ ctf_serialize (ctf_file_t *fp)\n   fp->ctf_link_in_cu_mapping = NULL;\n   fp->ctf_link_out_cu_mapping = NULL;\n   fp->ctf_link_type_mapping = NULL;\n+  fp->ctf_dedup_atoms = NULL;\n+  fp->ctf_dedup_atoms_alloc = NULL;\n   fp->ctf_parent_unreffed = 1;\n \n   fp->ctf_dvhash = NULL;\n   memset (&fp->ctf_dvdefs, 0, sizeof (ctf_list_t));\n   memset (fp->ctf_lookups, 0, sizeof (fp->ctf_lookups));\n+  memset (&fp->ctf_dedup, 0, sizeof (fp->ctf_dedup));\n   fp->ctf_structs.ctn_writable = NULL;\n   fp->ctf_unions.ctn_writable = NULL;\n   fp->ctf_enums.ctn_writable = NULL;\n@@ -878,7 +884,7 @@ clp2 (size_t x)\n   return (x + 1);\n }\n \n-static ctf_id_t\n+ctf_id_t\n ctf_add_encoded (ctf_file_t *fp, uint32_t flag,\n \t\t const char *name, const ctf_encoding_t *ep, uint32_t kind)\n {\n@@ -899,7 +905,7 @@ ctf_add_encoded (ctf_file_t *fp, uint32_t flag,\n   return type;\n }\n \n-static ctf_id_t\n+ctf_id_t\n ctf_add_reftype (ctf_file_t *fp, uint32_t flag, ctf_id_t ref, uint32_t kind)\n {\n   ctf_dtdef_t *dtd;"
    },
    {
      "sha": "e1ada3b9592e1583b17f7f43694e8496630d80f5",
      "filename": "libctf/ctf-decls.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-decls.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-decls.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-decls.h?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -72,4 +72,8 @@ void ctf_qsort_r (void *base, size_t nmemb, size_t size,\n #define MAX(a, b) ((a) > (b) ? (a) : (b))\n #define MIN(a, b) ((a) < (b) ? (a) : (b))\n \n+#if !HAVE_DECL_STPCPY\n+extern char *stpcpy (char *, const char *);\n+#endif\n+\n #endif /* _CTF_DECLS_H */"
    },
    {
      "sha": "77b34f4539d2eeea28d3b939f96435553a4c4c5d",
      "filename": "libctf/ctf-dedup.c",
      "status": "added",
      "additions": 3155,
      "deletions": 0,
      "changes": 3155,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-dedup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-dedup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dedup.c?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849"
    },
    {
      "sha": "297526094cc11bc063c027da549cf0cc59ba3c8b",
      "filename": "libctf/ctf-hash.c",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-hash.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-hash.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-hash.c?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -117,6 +117,28 @@ ctf_hash_eq_type_key (const void *a, const void *b)\n     && (key_a->cltk_idx == key_b->cltk_idx);\n }\n \n+/* Hash a type_id_key.  */\n+unsigned int\n+ctf_hash_type_id_key (const void *ptr)\n+{\n+  ctf_helem_t *hep = (ctf_helem_t *) ptr;\n+  ctf_type_id_key_t *k = (ctf_type_id_key_t *) hep->key;\n+\n+  return htab_hash_pointer ((void *) (uintptr_t) k->ctii_input_num)\n+    + 59 * htab_hash_pointer ((void *) (uintptr_t) k->ctii_type);\n+}\n+\n+int\n+ctf_hash_eq_type_id_key (const void *a, const void *b)\n+{\n+  ctf_helem_t *hep_a = (ctf_helem_t *) a;\n+  ctf_helem_t *hep_b = (ctf_helem_t *) b;\n+  ctf_type_id_key_t *key_a = (ctf_type_id_key_t *) hep_a->key;\n+  ctf_type_id_key_t *key_b = (ctf_type_id_key_t *) hep_b->key;\n+\n+  return (key_a->ctii_input_num == key_b->ctii_input_num)\n+    && (key_a->ctii_type == key_b->ctii_type);\n+}\n \n /* Hash and eq functions for the dynset.  Most of these can just use the\n    underlying hashtab functions directly.   */"
    },
    {
      "sha": "a8a16f77a1ed6e56553cd24eab525ae9018c2200",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 127,
      "deletions": 0,
      "changes": 127,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -247,6 +247,106 @@ typedef struct ctf_link_type_key\n   ctf_id_t cltk_idx;\n } ctf_link_type_key_t;\n \n+/* The structure used as the key in a cd_id_to_file_t on 32-bit platforms.  */\n+typedef struct ctf_type_id_key\n+{\n+  int ctii_input_num;\n+  ctf_id_t ctii_type;\n+} ctf_type_id_key_t;\n+\n+/* Deduplicator state.\n+\n+   The dedup state below uses three terms consistently. A \"hash\" is a\n+   ctf_dynhash_t; a \"hash value\" is the hash value of a type as returned by\n+   ctf_dedup_hash_type; a \"global type ID\" or \"global ID\" is a packed-together\n+   reference to a single ctf_file_t (by array index in an array of inputs) and\n+   ctf_id_t, i.e. a single instance of some hash value in some input.\n+\n+   The deduplication algorithm takes a bunch of inputs and yields a single\n+   shared \"output\" and possibly many outputs corresponding to individual inputs\n+   that still contain types after sharing of unconflicted types.  Almost all\n+   deduplicator state is stored in the struct ctf_dedup in the output, though a\n+   (very) few things are stored in inputs for simplicity's sake, usually if they\n+   are linking together things within the scope of a single TU.\n+\n+   Flushed at the end of every ctf_dedup run.  */\n+\n+typedef struct ctf_dedup\n+{\n+  /* The CTF linker flags in force for this dedup run.  */\n+  int cd_link_flags;\n+\n+  /* On 32-bit platforms only, a hash of global type IDs, in the form of\n+     a ctf_link_type_id_key_t.  */\n+  ctf_dynhash_t *cd_id_to_file_t;\n+\n+  /* Atoms tables of decorated names: maps undecorated name to decorated name.\n+     (The actual allocations are in the CTF file for the former and the real\n+     atoms table for the latter).  Uses the same namespaces as ctf_lookups,\n+     below, but has no need for null-termination.  */\n+  ctf_dynhash_t *cd_decorated_names[4];\n+\n+  /* Map type names to a hash from type hash value -> number of times each value\n+     has appeared.  */\n+  ctf_dynhash_t *cd_name_counts;\n+\n+  /* Map global type IDs to type hash values.  Used to determine if types are\n+     already hashed without having to recompute their hash values again, and to\n+     link types together at later stages.  Forwards that are peeked through to\n+     structs and unions are not represented in here, so lookups that might be\n+     such a type (in practice, all lookups) must go via cd_replaced_types first\n+     to take this into account.  Discarded before each rehashing.  */\n+  ctf_dynhash_t *cd_type_hashes;\n+\n+  /* Maps from the names of structs/unions/enums to a a single GID which is the\n+     only appearance of that type in any input: if it appears in more than one\n+     input, a value which is a GID with an input_num of -1 appears.  Used in\n+     share-duplicated link mode link modes to determine whether structs/unions\n+     can be cited from multiple TUs.  Only populated in that link mode.  */\n+  ctf_dynhash_t *cd_struct_origin;\n+\n+  /* Maps type hash values to a set of hash values of the types that cite them:\n+     i.e., pointing backwards up the type graph.  Used for recursive conflict\n+     marking.  Citations from tagged structures, unions, and forwards do not\n+     appear in this graph.  */\n+  ctf_dynhash_t *cd_citers;\n+\n+  /* Maps type hash values to input global type IDs.  The value is a set (a\n+     hash) of global type IDs.  Discarded before each rehashing.  The result of\n+     the ctf_dedup function.  */\n+  ctf_dynhash_t *cd_output_mapping;\n+\n+  /* A map giving the GID of the first appearance of each type for each type\n+     hash value.  */\n+  ctf_dynhash_t *cd_output_first_gid;\n+\n+  /* Used to ensure that we never try to map a single type ID to more than one\n+     hash.  */\n+  ctf_dynhash_t *cd_output_mapping_guard;\n+\n+  /* Maps the global type IDs of structures in input TUs whose members still\n+     need emission to the global type ID of the already-emitted target type\n+     (which has no members yet) in the appropriate target.  Uniquely, the latter\n+     ID represents a *target* ID (i.e. the cd_output_mapping of some specified\n+     input): we encode the shared (parent) dict with an ID of -1.  */\n+  ctf_dynhash_t *cd_emission_struct_members;\n+\n+  /* A set (a hash) of hash values of conflicting types.  */\n+  ctf_dynset_t *cd_conflicting_types;\n+\n+  /* Maps type hashes to ctf_id_t's in this dictionary.  Populated only at\n+     emission time, in the dictionary where emission is taking place.  */\n+  ctf_dynhash_t *cd_output_emission_hashes;\n+\n+  /* Maps the decorated names of conflicted cross-TU forwards that were forcibly\n+     emitted in this TU to their emitted ctf_id_ts.  Populated only at emission\n+     time, in the dictionary where emission is taking place. */\n+  ctf_dynhash_t *cd_output_emission_conflicted_forwards;\n+\n+  /* Points to the output counterpart of this input dictionary, at emission\n+     time.  */\n+  ctf_file_t *cd_output;\n+} ctf_dedup_t;\n \n /* The ctf_file is the structure used to represent a CTF container to library\n    clients, who see it only as an opaque pointer.  Modifications can therefore\n@@ -346,6 +446,18 @@ struct ctf_file\n   void *ctf_link_variable_filter_arg;           /* Argument for it. */\n \n   ctf_dynhash_t *ctf_add_processing; /* Types ctf_add_type is working on now.  */\n+\n+  /* Atoms table for dedup string storage.  All strings in the ctf_dedup_t are\n+     stored here.  Only the _alloc copy is allocated or freed: the\n+     ctf_dedup_atoms may be pointed to some other CTF dict, to share its atoms.\n+     We keep the atoms table outside the ctf_dedup so that atoms can be\n+     preserved across multiple similar links, such as when doing cu-mapped\n+     links.  */\n+  ctf_dynset_t *ctf_dedup_atoms;\n+  ctf_dynset_t *ctf_dedup_atoms_alloc;\n+\n+  ctf_dedup_t ctf_dedup;\t  /* Deduplicator state.  */\n+\n   char *ctf_tmp_typeslice;\t  /* Storage for slicing up type names.  */\n   size_t ctf_tmp_typeslicelen;\t  /* Size of the typeslice.  */\n   void *ctf_specific;\t\t  /* Data for ctf_get/setspecific().  */\n@@ -451,11 +563,13 @@ typedef unsigned int (*ctf_hash_fun) (const void *ptr);\n extern unsigned int ctf_hash_integer (const void *ptr);\n extern unsigned int ctf_hash_string (const void *ptr);\n extern unsigned int ctf_hash_type_key (const void *ptr);\n+extern unsigned int ctf_hash_type_id_key (const void *ptr);\n \n typedef int (*ctf_hash_eq_fun) (const void *, const void *);\n extern int ctf_hash_eq_integer (const void *, const void *);\n extern int ctf_hash_eq_string (const void *, const void *);\n extern int ctf_hash_eq_type_key (const void *, const void *);\n+extern int ctf_hash_eq_type_id_key (const void *, const void *);\n \n extern int ctf_dynset_eq_string (const void *, const void *);\n \n@@ -526,11 +640,24 @@ extern int ctf_dvd_insert (ctf_file_t *, ctf_dvdef_t *);\n extern void ctf_dvd_delete (ctf_file_t *, ctf_dvdef_t *);\n extern ctf_dvdef_t *ctf_dvd_lookup (const ctf_file_t *, const char *);\n \n+extern ctf_id_t ctf_add_encoded (ctf_file_t *, uint32_t, const char *,\n+\t\t\t\t const ctf_encoding_t *, uint32_t kind);\n+extern ctf_id_t ctf_add_reftype (ctf_file_t *, uint32_t, ctf_id_t,\n+\t\t\t\t uint32_t kind);\n+\n extern void ctf_add_type_mapping (ctf_file_t *src_fp, ctf_id_t src_type,\n \t\t\t\t  ctf_file_t *dst_fp, ctf_id_t dst_type);\n extern ctf_id_t ctf_type_mapping (ctf_file_t *src_fp, ctf_id_t src_type,\n \t\t\t\t  ctf_file_t **dst_fp);\n \n+extern int ctf_dedup_atoms_init (ctf_file_t *);\n+extern int ctf_dedup (ctf_file_t *, ctf_file_t **, uint32_t ninputs,\n+\t\t      uint32_t *parents, int cu_mapped);\n+extern void ctf_dedup_fini (ctf_file_t *, ctf_file_t **, uint32_t);\n+extern ctf_file_t **ctf_dedup_emit (ctf_file_t *, ctf_file_t **,\n+\t\t\t\t    uint32_t ninputs, uint32_t *parents,\n+\t\t\t\t    uint32_t *noutputs, int cu_mapped);\n+\n extern void ctf_decl_init (ctf_decl_t *);\n extern void ctf_decl_fini (ctf_decl_t *);\n extern void ctf_decl_push (ctf_decl_t *, ctf_file_t *, ctf_id_t);"
    },
    {
      "sha": "fee7789a30824f4aacacb53e46729eec3049ed66",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=0f0c11f7fc9f0ab6bd63fc5f8a4cee7367a81849",
      "patch": "@@ -1719,6 +1719,8 @@ ctf_file_close (ctf_file_t *fp)\n   ctf_dynhash_destroy (fp->ctf_link_in_cu_mapping);\n   ctf_dynhash_destroy (fp->ctf_link_out_cu_mapping);\n   ctf_dynhash_destroy (fp->ctf_add_processing);\n+  ctf_dedup_fini (fp, NULL, 0);\n+  ctf_dynset_destroy (fp->ctf_dedup_atoms_alloc);\n \n   for (err = ctf_list_next (&fp->ctf_errs_warnings); err != NULL; err = nerr)\n     {"
    }
  ]
}