{
  "sha": "c541fa7c91ce9d73d6a997cedf2cdc65e35dc139",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzU0MWZhN2M5MWNlOWQ3M2Q2YTk5N2NlZGYyY2RjNjVlMzVkYzEzOQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-20T08:35:36Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-20T08:35:36Z"
    },
    "message": "[gdb/testsuite] Add save_target_board_info\n\nAdd a proc save_target_board_info, similar to save_vars, such that we can do:\n...\nsave_target_board_info { multilib_flags } {\n    global board\n    set board [target_info name]\n    unset_board_info multilib_flags\n    set_board_info multilib_flags \"$override_multilib_flags\"\n    ...\n}\n...\nand use it in gdb_compile_shlib.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-20  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (save_target_board_info): New proc.\n\t(gdb_compile_shlib): Use save_target_board_info.",
    "tree": {
      "sha": "2b9058d2af8ee2329b2bb23b3b310680bc317bf0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b9058d2af8ee2329b2bb23b3b310680bc317bf0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3dc9a557a1e2bdc89443ed91ae5a3cf6699ff97e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dc9a557a1e2bdc89443ed91ae5a3cf6699ff97e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3dc9a557a1e2bdc89443ed91ae5a3cf6699ff97e"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 61,
    "deletions": 19
  },
  "files": [
    {
      "sha": "af6638d482db8885de3ad8ad1c231196ff28611a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c541fa7c91ce9d73d6a997cedf2cdc65e35dc139",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-20  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (save_target_board_info): New proc.\n+\t(gdb_compile_shlib): Use save_target_board_info.\n+\n 2020-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (supports_scalar_storage_order_attribute)"
    },
    {
      "sha": "5bdc7ff8ee977ec7d47b77221ea0fd746e01ce72",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 56,
      "deletions": 19,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c541fa7c91ce9d73d6a997cedf2cdc65e35dc139/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=c541fa7c91ce9d73d6a997cedf2cdc65e35dc139",
      "patch": "@@ -2427,6 +2427,53 @@ proc save_vars { vars body } {\n     }\n }\n \n+# As save_vars, but for variables stored in the board_info for the\n+# target board.\n+#\n+# Usage example:\n+#\n+#   save_target_board_info { multilib_flags } {\n+#       global board\n+#       set board [target_info name]\n+#       unset_board_info multilib_flags\n+#       set_board_info multilib_flags \"$multilib_flags\"\n+#       ...\n+#   }\n+\n+proc save_target_board_info { vars body } {\n+    global board board_info\n+    set board [target_info name]\n+\n+    array set saved_target_board_info { }\n+    set unset_target_board_info { }\n+\n+    foreach var $vars {\n+\tif { [info exists board_info($board,$var)] } {\n+\t    set saved_target_board_info($var) [board_info $board $var]\n+\t} else {\n+\t    lappend unset_target_board_info $var\n+\t}\n+    }\n+\n+    set code [catch {uplevel 1 $body} result]\n+\n+    foreach {var value} [array get saved_target_board_info] {\n+\tunset_board_info $var\n+\tset_board_info $var $value\n+    }\n+\n+    foreach var $unset_target_board_info {\n+\tunset_board_info $var\n+    }\n+\n+    if {$code == 1} {\n+\tglobal errorInfo errorCode\n+\treturn -code $code -errorinfo $errorInfo -errorcode $errorCode $result\n+    } else {\n+\treturn -code $code $result\n+    }\n+}\n+\n # Run tests in BODY with the current working directory (CWD) set to\n # DIR.  When BODY is finished, restore the original CWD.  Return the\n # result of BODY.\n@@ -4422,32 +4469,22 @@ proc gdb_compile_shlib_1 {sources dest options} {\n proc gdb_compile_shlib {sources dest options} {\n     global board\n \n-    # Save multilib_flags.\n-    set board [target_info name]\n-    set save_multilib_flag [board_info $board multilib_flags]\n-\n     # Ignore PIE-related setting in multilib_flags.\n-    set multilib_flag \"\"\n-    foreach op $save_multilib_flag {\n+    set board [target_info name]\n+    set multilib_flags_orig [board_info $board multilib_flags]\n+    set multilib_flags \"\"\n+    foreach op $multilib_flags_orig {\n \tif { $op == \"-pie\" || $op == \"-no-pie\" \\\n \t\t || $op == \"-fPIE\" || $op == \"-fno-PIE\"} {\n \t} else {\n-\t    append multilib_flag \" $op\"\n+\t    append multilib_flags \" $op\"\n \t}\n     }\n-    unset_board_info \"multilib_flags\"\n-    set_board_info multilib_flags \"$multilib_flag\"\n-    set code [catch {gdb_compile_shlib_1 $sources $dest $options} result]\n \n-    # Restore multilib_flags.\n-    unset_board_info \"multilib_flags\"\n-    set_board_info multilib_flags $save_multilib_flag\n-\n-    if {$code == 1} {\n-\tglobal errorInfo errorCode\n-\treturn -code error -errorinfo $errorInfo -errorcode $errorCode $result\n-    } elseif {$code > 1} {\n-\treturn -code $code $result\n+    save_target_board_info { multilib_flags } {\n+\tunset_board_info multilib_flags\n+\tset_board_info multilib_flags \"$multilib_flags\"\n+\tset result [gdb_compile_shlib_1 $sources $dest $options]\n     }\n \n     return $result"
    }
  ]
}