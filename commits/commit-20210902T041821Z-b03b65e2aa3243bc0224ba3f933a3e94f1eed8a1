{
  "sha": "b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjAzYjY1ZTJhYTMyNDNiYzAyMjRiYTNmOTMzYTNlOTRmMWVlZDhhMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-02T00:26:11Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-02T04:18:21Z"
    },
    "message": "SHT_SYMTAB_SHNDX handling\n\n.symtab_shndx section contents is an array, one entry for each symbol\nin .symtab, present when the number of symbols exceeds a little less\nthan 64k.  Since the mapping is 1-1 with symbols there is no need to\nkeep both dest_index and destshndx_index in elf_sym_strtab.  Instead,\njust make sure that the shndx pointers to the swap functions are kept\nNULL when .symtab_shndx does not exist.  Also, strtabcount in the\nlinker's elf hash table is incremented in lock-step with the output\nsymcount, so that can disappear too.",
    "tree": {
      "sha": "a2bc19c802d9ae973d9af4a0203bbe4594759c5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a2bc19c802d9ae973d9af4a0203bbe4594759c5f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/36f61bf2ad936edfb76eda706eb3b081a61d5a5a"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 13,
    "deletions": 30
  },
  "files": [
    {
      "sha": "c247d52c61594c37c3e2e741eaaa587985443616",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
      "patch": "@@ -538,7 +538,6 @@ struct elf_sym_strtab\n {\n   Elf_Internal_Sym sym;\n   unsigned long dest_index;\n-  unsigned long destshndx_index;\n };\n \n struct bfd_link_needed_list\n@@ -622,10 +621,6 @@ struct elf_link_hash_table\n      section.  */\n   struct elf_strtab_hash *dynstr;\n \n-  /* The number of symbol strings found in the link which must be put\n-     into the .strtab section.  */\n-  bfd_size_type strtabcount;\n-\n   /* The array size of the symbol string table, which becomes the\n      .strtab section.  */\n   bfd_size_type strtabsize;"
    },
    {
      "sha": "dea3bb00879fccd8ff6f4d2be93d841e8542d3dc",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
      "patch": "@@ -8095,7 +8095,6 @@ swap_out_syms (bfd *abfd,\n   bfd_byte *outbound_syms;\n   bfd_byte *outbound_shndx;\n   unsigned long outbound_syms_index;\n-  unsigned long outbound_shndx_index;\n   unsigned int idx;\n   unsigned int num_locals;\n   size_t amt;\n@@ -8144,7 +8143,6 @@ swap_out_syms (bfd *abfd,\n   outbound_syms_index = 0;\n \n   outbound_shndx = NULL;\n-  outbound_shndx_index = 0;\n \n   if (elf_symtab_shndx_list (abfd))\n     {\n@@ -8180,10 +8178,7 @@ swap_out_syms (bfd *abfd,\n     sym.st_target_internal = 0;\n     symstrtab[0].sym = sym;\n     symstrtab[0].dest_index = outbound_syms_index;\n-    symstrtab[0].destshndx_index = outbound_shndx_index;\n     outbound_syms_index++;\n-    if (outbound_shndx != NULL)\n-      outbound_shndx_index++;\n   }\n \n   name_local_sections\n@@ -8415,11 +8410,8 @@ Unable to handle section index %x in ELF symbol.  Using ABS instead.\"),\n       idx++;\n       symstrtab[idx].sym = sym;\n       symstrtab[idx].dest_index = outbound_syms_index;\n-      symstrtab[idx].destshndx_index = outbound_shndx_index;\n \n       outbound_syms_index++;\n-      if (outbound_shndx != NULL)\n-\toutbound_shndx_index++;\n     }\n \n   /* Finalize the .strtab section.  */\n@@ -8444,9 +8436,9 @@ Unable to handle section index %x in ELF symbol.  Using ABS instead.\"),\n \t\t\t       (outbound_syms\n \t\t\t\t+ (elfsym->dest_index\n \t\t\t\t   * bed->s->sizeof_sym)),\n-\t\t\t       (outbound_shndx\n-\t\t\t\t+ (elfsym->destshndx_index\n-\t\t\t\t   * sizeof (Elf_External_Sym_Shndx))));\n+\t\t\t       NPTR_ADD (outbound_shndx,\n+\t\t\t\t\t (elfsym->dest_index\n+\t\t\t\t\t  * sizeof (Elf_External_Sym_Shndx))));\n     }\n   free (symstrtab);\n "
    },
    {
      "sha": "77450c8fa8d80d32e60c0e298909a7d5660f1a27",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 10,
      "deletions": 14,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=b03b65e2aa3243bc0224ba3f933a3e94f1eed8a1",
      "patch": "@@ -9916,7 +9916,7 @@ elf_link_output_symstrtab (void *finf,\n \n   hash_table = elf_hash_table (flinfo->info);\n   strtabsize = hash_table->strtabsize;\n-  if (strtabsize <= hash_table->strtabcount)\n+  if (strtabsize <= flinfo->output_bfd->symcount)\n     {\n       strtabsize += strtabsize;\n       hash_table->strtabsize = strtabsize;\n@@ -9927,14 +9927,10 @@ elf_link_output_symstrtab (void *finf,\n       if (hash_table->strtab == NULL)\n \treturn 0;\n     }\n-  hash_table->strtab[hash_table->strtabcount].sym = *elfsym;\n-  hash_table->strtab[hash_table->strtabcount].dest_index\n-    = hash_table->strtabcount;\n-  hash_table->strtab[hash_table->strtabcount].destshndx_index\n-    = flinfo->symshndxbuf ? bfd_get_symcount (flinfo->output_bfd) : 0;\n-\n+  hash_table->strtab[flinfo->output_bfd->symcount].sym = *elfsym;\n+  hash_table->strtab[flinfo->output_bfd->symcount].dest_index\n+    = flinfo->output_bfd->symcount;\n   flinfo->output_bfd->symcount += 1;\n-  hash_table->strtabcount += 1;\n \n   return 1;\n }\n@@ -9954,14 +9950,14 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n   file_ptr pos;\n   bool ret;\n \n-  if (!hash_table->strtabcount)\n+  if (flinfo->output_bfd->symcount == 0)\n     return true;\n \n   BFD_ASSERT (elf_onesymtab (flinfo->output_bfd));\n \n   bed = get_elf_backend_data (flinfo->output_bfd);\n \n-  amt = bed->s->sizeof_sym * hash_table->strtabcount;\n+  amt = bed->s->sizeof_sym * flinfo->output_bfd->symcount;\n   symbuf = (bfd_byte *) bfd_malloc (amt);\n   if (symbuf == NULL)\n     return false;\n@@ -9979,7 +9975,7 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n     }\n \n   /* Now swap out the symbols.  */\n-  for (i = 0; i < hash_table->strtabcount; i++)\n+  for (i = 0; i < flinfo->output_bfd->symcount; i++)\n     {\n       struct elf_sym_strtab *elfsym = &hash_table->strtab[i];\n       if (elfsym->sym.st_name == (unsigned long) -1)\n@@ -9999,13 +9995,13 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n \t\t\t       ((bfd_byte *) symbuf\n \t\t\t\t+ (elfsym->dest_index\n \t\t\t\t   * bed->s->sizeof_sym)),\n-\t\t\t       (flinfo->symshndxbuf\n-\t\t\t\t+ elfsym->destshndx_index));\n+\t\t\t       NPTR_ADD (flinfo->symshndxbuf,\n+\t\t\t\t\t elfsym->dest_index));\n     }\n \n   hdr = &elf_tdata (flinfo->output_bfd)->symtab_hdr;\n   pos = hdr->sh_offset + hdr->sh_size;\n-  amt = hash_table->strtabcount * bed->s->sizeof_sym;\n+  amt = bed->s->sizeof_sym * flinfo->output_bfd->symcount;\n   if (bfd_seek (flinfo->output_bfd, pos, SEEK_SET) == 0\n       && bfd_bwrite (symbuf, amt, flinfo->output_bfd) == amt)\n     {"
    }
  ]
}