{
  "sha": "39f381cb80463bd814da549a927bee4643d4ceac",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzlmMzgxY2I4MDQ2M2JkODE0ZGE1NDlhOTI3YmVlNDY0M2Q0Y2VhYw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-06-23T15:06:38Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-06-23T15:06:38Z"
    },
    "message": "Fix decoding of indexed DWARF strings using pre-DWARF-5 string offset sections.  Fix display of .debug_str_offsets.dwo sections.\n\n\tPR 26160\n\t* dwarf.c (fetch_indexed_string): Detect and handle old style\n\t.debug_str_offset tables.\n\t(display_debug_str_offsets): Likewise.  Also add support for\n\t.debug_str_offsets.dwo sections.",
    "tree": {
      "sha": "8f62b0da715bfa765cabadabdc5da928b1ebe81e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8f62b0da715bfa765cabadabdc5da928b1ebe81e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39f381cb80463bd814da549a927bee4643d4ceac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39f381cb80463bd814da549a927bee4643d4ceac",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39f381cb80463bd814da549a927bee4643d4ceac",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39f381cb80463bd814da549a927bee4643d4ceac/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7e4b9c4cd3b83be4c52eb475a6ef6b3fa4946cc5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e4b9c4cd3b83be4c52eb475a6ef6b3fa4946cc5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7e4b9c4cd3b83be4c52eb475a6ef6b3fa4946cc5"
    }
  ],
  "stats": {
    "total": 104,
    "additions": 72,
    "deletions": 32
  },
  "files": [
    {
      "sha": "c465301957d60a6d561fe6481e96318767c2f9ed",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f381cb80463bd814da549a927bee4643d4ceac/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f381cb80463bd814da549a927bee4643d4ceac/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=39f381cb80463bd814da549a927bee4643d4ceac",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-23  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 26160\n+\t* dwarf.c (fetch_indexed_string): Detect and handle old style\n+\t.debug_str_offset tables.\n+\t(display_debug_str_offsets): Likewise.  Also add support for\n+\t.debug_str_offsets.dwo sections.\n+\n 2020-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/26112"
    },
    {
      "sha": "e2f217ee0ba9961145c253ec1e986bcce08967f6",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 64,
      "deletions": 32,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f381cb80463bd814da549a927bee4643d4ceac/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f381cb80463bd814da549a927bee4643d4ceac/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=39f381cb80463bd814da549a927bee4643d4ceac",
      "patch": "@@ -747,27 +747,37 @@ fetch_indexed_string (dwarf_vma idx, struct cu_tu_set *this_set,\n   if (length == 0xffffffff)\n     {\n       if (offset_size != 8)\n-\twarn (_(\"UGG\"));\n+\twarn (_(\"Expected offset size of 8 but given %s\"), dwarf_vmatoa (\"x\", offset_size));\n       SAFE_BYTE_GET_AND_INC (length, curr, 8, end);\n     }\n   else if (offset_size != 4)\n     {\n-      warn (_(\"ugg\"));\n+      warn (_(\"Expected offset size of 4 but given %s\"), dwarf_vmatoa (\"x\", offset_size));\n     }\n \n-  /* Skip the version and padding bytes.\n-     We assume that they are correct.  */\n-  curr += 4;\n-\n-  /* FIXME: The code below assumes that there is only one table\n-     in the .debug_str_offsets section, so check that now.  */\n-  if ((offset_size == 4 && curr + length < (end - 8))\n-      || (offset_size == 8 && curr + length < (end - 16)))\n+  if (length == 0)\n+    {\n+      /* This is probably an old style .debug_str_offset section which\n+\t just contains offsets and no header (and the first offset is 0).  */\n+      curr = index_section->start;\n+      length = index_section->size;\n+    }\n+  else\n     {\n-      warn (_(\"index table size is too small %s vs %s\\n\"),\n-\t    dwarf_vmatoa (\"x\", length),\n-\t    dwarf_vmatoa (\"x\", index_section->size));\n-      return _(\"<table too small\");\n+      /* Skip the version and padding bytes.\n+\t We assume that they are correct.  */\n+      curr += 4;\n+\n+      /* FIXME: The code below assumes that there is only one table\n+\t in the .debug_str_offsets section, so check that now.  */\n+      if ((offset_size == 4 && curr + length < (end - 8))\n+\t  || (offset_size == 8 && curr + length < (end - 16)))\n+\t{\n+\t  warn (_(\"index table size is too small %s vs %s\\n\"),\n+\t\tdwarf_vmatoa (\"x\", length),\n+\t\tdwarf_vmatoa (\"x\", index_section->size));\n+\t  return _(\"<table too small>\");\n+\t}\n     }\n \n   index_offset = idx * offset_size;\n@@ -5623,7 +5633,7 @@ display_debug_macro (struct dwarf_section *section,\n \t      else\n \t\tprintf (\" DW_MACRO_undef_strx \");\n \t      if (do_wide)\n-\t\tprintf (_(\"(with offset %s) \"), dwarf_vmatoa (NULL, offset));\n+\t\tprintf (_(\"(with offset %s) \"), dwarf_vmatoa (\"x\", offset));\n \t      printf (_(\"lineno : %d macro : %s\\n\"),\n \t\t      lineno, string);\n \t      break;\n@@ -6848,7 +6858,13 @@ display_debug_str_offsets (struct dwarf_section *section,\n   unsigned char *end = start + section->size;\n   unsigned char *curr = start;\n \n-  load_debug_section_with_follow (str, file);\n+  const char * suffix = strrchr (section->name, '.');\n+  bfd_boolean  dwo = (suffix && strcmp (suffix, \".dwo\") == 0) ? TRUE : FALSE;\n+\n+  if (dwo)\n+    load_debug_section_with_follow (str_dwo, file);\n+  else\n+    load_debug_section_with_follow (str, file);\n \n   introduce (section, FALSE);\n \n@@ -6867,19 +6883,32 @@ display_debug_str_offsets (struct dwarf_section *section,\n       else\n \tentry_length = 4;\n \n-      int version;\n-      SAFE_BYTE_GET_AND_INC (version, curr, 2, end);\n-      if (version != 5)\n-\twarn (_(\"Unexpected version number in str_offset header: %#x\\n\"), version);\n+      if (length == 0)\n+\t{\n+\t  /* This is probably an old style .debug_str_offset section which\n+\t     just contains offsets and no header (and the first offset is 0).  */\n+\t  length = section->size;\n+\t  curr   = section->start;\n \n-      int padding;\n-      SAFE_BYTE_GET_AND_INC (padding, curr, 2, end);\n-      if (padding != 0)\n-\twarn (_(\"Unexpected value in str_offset header's padding field: %#x\\n\"), padding);\n+\t  printf (_(\"    Length: %#lx\\n\"), (unsigned long) length);\n+\t  printf (_(\"       Index   Offset [String]\\n\"));\n+\t}\n+      else\n+\t{\n+\t  int version;\n+\t  SAFE_BYTE_GET_AND_INC (version, curr, 2, end);\n+\t  if (version != 5)\n+\t    warn (_(\"Unexpected version number in str_offset header: %#x\\n\"), version);\n+\n+\t  int padding;\n+\t  SAFE_BYTE_GET_AND_INC (padding, curr, 2, end);\n+\t  if (padding != 0)\n+\t    warn (_(\"Unexpected value in str_offset header's padding field: %#x\\n\"), padding);\n \n-      printf (_(\"    Length: %#lx\\n\"), (unsigned long) length);\n-      printf (_(\"    Version: %#lx\\n\"), (unsigned long) version);\n-      printf (_(\"       Index Offset   [String]\\n\"));\n+\t  printf (_(\"    Length: %#lx\\n\"), (unsigned long) length);\n+\t  printf (_(\"    Version: %#lx\\n\"), (unsigned long) version);\n+\t  printf (_(\"       Index   Offset [String]\\n\"));\n+\t}\n \n       unsigned long index;\n       for (index = 0; length >= entry_length && curr < end; index ++)\n@@ -6888,14 +6917,17 @@ display_debug_str_offsets (struct dwarf_section *section,\n \t  const unsigned char * string;\n \n \t  SAFE_BYTE_GET_AND_INC (offset, curr, entry_length, end);\n-\t  string = fetch_indirect_string (offset);\n-\t  printf (\"    %8lu %s %s\\n\", index,\n-\t\t  dwarf_vmatoa (NULL, offset),\n+\t  if (dwo)\n+\t    string = (const unsigned char *)\n+\t      fetch_indexed_string (index, NULL, entry_length, dwo);\n+\t  else\n+\t    string = fetch_indirect_string (offset);\n+\n+\t  printf (\"    %8lu %8s %s\\n\", index, dwarf_vmatoa (\"x\", offset),\n \t\t  string);\n \t}\n     }\n-  /* TODO: Dump the contents.  This is made somewhat difficult by not knowing\n-     what the offset size is for this section.  */\n+\n   return 1;\n }\n "
    }
  ]
}