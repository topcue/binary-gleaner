{
  "sha": "1536146f30900b77c8381930669532f4073df196",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTUzNjE0NmYzMDkwMGI3N2M4MzgxOTMwNjY5NTMyZjQwNzNkZjE5Ng==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-12-08T17:32:34Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-12-11T22:10:50Z"
    },
    "message": "gdb: don't warn about deprecated aliases during tab completion\n\nConsider this gdb session, where on line #3 tab completion is used:\n\n  (gdb) alias xxx_yyy_zzz=break\n  (gdb) maint deprecate xxx_yyy_zzz\n  (gdb) xxx_yyy_<TAB>\n\nThe third line then updates to look like this:\n\n  (gdb) xxx_yyy_Warning: 'xxx_yyy_zzz', an alias for the command 'break' is deprecated.\n  No alternative known.\n\n  zzz\n\nWhat's happened is during tab completion the alias has been resolved\nto the actual command being aliased, and at this stage the warning is\nissued.  Clearly this is not what we want during tab completion.\n\nIn this commit I add a new parameter to the lookup function, a boolean\nthat indicates if the lookup is being done as part of completion.\nThis flag is used to suppress the warning.  Now we get the expected\nbehaviour, the alias completes without any warning, but the warning is\nstill given once the user executes the alias.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.c (lookup_cmd_1): Move header comment into\n\tcommand.h, add extra parameter, and use this to guard giving a\n\twarning.\n\t* command.h (lookup_cmd_1): Add comment from cli/cli-decode.c,\n\tinclude argument names in declaration, add new argument.\n\t* completer.c (complete_line_internal_1): Remove unneeded\n\tbrackets, pass extra argument to lookup_cmd_1.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/completion.exp: Add additional tests.",
    "tree": {
      "sha": "5d743ff450de62eb026bb9dbb99ffe4dc2abee14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d743ff450de62eb026bb9dbb99ffe4dc2abee14"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1536146f30900b77c8381930669532f4073df196",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1536146f30900b77c8381930669532f4073df196",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1536146f30900b77c8381930669532f4073df196",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1536146f30900b77c8381930669532f4073df196/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "966484941738b7a474fb7e4fe29eb5693fc9096c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/966484941738b7a474fb7e4fe29eb5693fc9096c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/966484941738b7a474fb7e4fe29eb5693fc9096c"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 74,
    "deletions": 51
  },
  "files": [
    {
      "sha": "0c6ced3c6c98fd24ba9b50fe3a97480ed1b97c0a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1536146f30900b77c8381930669532f4073df196/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1536146f30900b77c8381930669532f4073df196/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1536146f30900b77c8381930669532f4073df196",
      "patch": "@@ -1,3 +1,13 @@\n+2020-12-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* cli/cli-decode.c (lookup_cmd_1): Move header comment into\n+\tcommand.h, add extra parameter, and use this to guard giving a\n+\twarning.\n+\t* command.h (lookup_cmd_1): Add comment from cli/cli-decode.c,\n+\tinclude argument names in declaration, add new argument.\n+\t* completer.c (complete_line_internal_1): Remove unneeded\n+\tbrackets, pass extra argument to lookup_cmd_1.\n+\n 2020-12-11  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* infrun.h (debug_infrun): Make a bool."
    },
    {
      "sha": "c62b8498060589b8f2919abe595a126aa83f07d4",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 5,
      "deletions": 43,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1536146f30900b77c8381930669532f4073df196/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1536146f30900b77c8381930669532f4073df196/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=1536146f30900b77c8381930669532f4073df196",
      "patch": "@@ -1613,50 +1613,12 @@ valid_user_defined_cmd_name_p (const char *name)\n   return true;\n }\n \n-/* This routine takes a line of TEXT and a CLIST in which to start the\n-   lookup.  When it returns it will have incremented the text pointer past\n-   the section of text it matched, set *RESULT_LIST to point to the list in\n-   which the last word was matched, and will return a pointer to the cmd\n-   list element which the text matches.  It will return NULL if no match at\n-   all was possible.  It will return -1 (cast appropriately, ick) if ambigous\n-   matches are possible; in this case *RESULT_LIST will be set to point to\n-   the list in which there are ambiguous choices (and *TEXT will be set to\n-   the ambiguous text string).\n-\n-   if DEFAULT_ARGS is not null, *DEFAULT_ARGS is set to the found command\n-   default args (possibly empty).\n-\n-   If the located command was an abbreviation, this routine returns the base\n-   command of the abbreviation.  Note that *DEFAULT_ARGS will contain the\n-   default args defined for the alias.\n-\n-   It does no error reporting whatsoever; control will always return\n-   to the superior routine.\n-\n-   In the case of an ambiguous return (-1), *RESULT_LIST will be set to point\n-   at the prefix_command (ie. the best match) *or* (special case) will be NULL\n-   if no prefix command was ever found.  For example, in the case of \"info a\",\n-   \"info\" matches without ambiguity, but \"a\" could be \"args\" or \"address\", so\n-   *RESULT_LIST is set to the cmd_list_element for \"info\".  So in this case\n-   RESULT_LIST should not be interpreted as a pointer to the beginning of a\n-   list; it simply points to a specific command.  In the case of an ambiguous\n-   return *TEXT is advanced past the last non-ambiguous prefix (e.g.\n-   \"info t\" can be \"info types\" or \"info target\"; upon return *TEXT has been\n-   advanced past \"info \").\n-\n-   If RESULT_LIST is NULL, don't set *RESULT_LIST (but don't otherwise\n-   affect the operation).\n-\n-   This routine does *not* modify the text pointed to by TEXT.\n-\n-   If IGNORE_HELP_CLASSES is nonzero, ignore any command list elements which\n-   are actually help classes rather than commands (i.e. the function field of\n-   the struct cmd_list_element is NULL).  */\n+/* See command.h.  */\n \n struct cmd_list_element *\n lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n \t      struct cmd_list_element **result_list, std::string *default_args,\n-\t      int ignore_help_classes)\n+\t      int ignore_help_classes, bool lookup_for_completion_p)\n {\n   char *command;\n   int len, nfound;\n@@ -1715,7 +1677,7 @@ lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n        itself and we will adjust the appropriate DEPRECATED_WARN_USER\n        flags.  */\n \n-      if (found->deprecated_warn_user)\n+      if (found->deprecated_warn_user && !lookup_for_completion_p)\n \tdeprecated_cmd_warning (line);\n \n       /* Return the default_args of the alias, not the default_args\n@@ -1729,8 +1691,8 @@ lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n \n   if (found->prefixlist)\n     {\n-      c = lookup_cmd_1 (text, *found->prefixlist, result_list,\n-\t\t\tdefault_args, ignore_help_classes);\n+      c = lookup_cmd_1 (text, *found->prefixlist, result_list, default_args,\n+\t\t\tignore_help_classes, lookup_for_completion_p);\n       if (!c)\n \t{\n \t  /* Didn't find anything; this is as far as we got.  */"
    },
    {
      "sha": "a6ddaa249059f75ae5850c276073969b5610eff5",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 47,
      "deletions": 5,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1536146f30900b77c8381930669532f4073df196/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1536146f30900b77c8381930669532f4073df196/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=1536146f30900b77c8381930669532f4073df196",
      "patch": "@@ -278,11 +278,53 @@ extern struct cmd_list_element *lookup_cmd (const char **,\n \t\t\t\t\t    std::string *,\n \t\t\t\t\t    int, int);\n \n-extern struct cmd_list_element *lookup_cmd_1 (const char **,\n-\t\t\t\t\t      struct cmd_list_element *,\n-\t\t\t\t\t      struct cmd_list_element **,\n-\t\t\t\t\t      std::string *,\n-\t\t\t\t\t      int);\n+/* This routine takes a line of TEXT and a CLIST in which to start the\n+   lookup.  When it returns it will have incremented the text pointer past\n+   the section of text it matched, set *RESULT_LIST to point to the list in\n+   which the last word was matched, and will return a pointer to the cmd\n+   list element which the text matches.  It will return NULL if no match at\n+   all was possible.  It will return -1 (cast appropriately, ick) if ambigous\n+   matches are possible; in this case *RESULT_LIST will be set to point to\n+   the list in which there are ambiguous choices (and *TEXT will be set to\n+   the ambiguous text string).\n+\n+   if DEFAULT_ARGS is not null, *DEFAULT_ARGS is set to the found command\n+   default args (possibly empty).\n+\n+   If the located command was an abbreviation, this routine returns the base\n+   command of the abbreviation.  Note that *DEFAULT_ARGS will contain the\n+   default args defined for the alias.\n+\n+   It does no error reporting whatsoever; control will always return\n+   to the superior routine.\n+\n+   In the case of an ambiguous return (-1), *RESULT_LIST will be set to point\n+   at the prefix_command (ie. the best match) *or* (special case) will be NULL\n+   if no prefix command was ever found.  For example, in the case of \"info a\",\n+   \"info\" matches without ambiguity, but \"a\" could be \"args\" or \"address\", so\n+   *RESULT_LIST is set to the cmd_list_element for \"info\".  So in this case\n+   RESULT_LIST should not be interpreted as a pointer to the beginning of a\n+   list; it simply points to a specific command.  In the case of an ambiguous\n+   return *TEXT is advanced past the last non-ambiguous prefix (e.g.\n+   \"info t\" can be \"info types\" or \"info target\"; upon return *TEXT has been\n+   advanced past \"info \").\n+\n+   If RESULT_LIST is NULL, don't set *RESULT_LIST (but don't otherwise\n+   affect the operation).\n+\n+   This routine does *not* modify the text pointed to by TEXT.\n+\n+   If IGNORE_HELP_CLASSES is nonzero, ignore any command list elements which\n+   are actually help classes rather than commands (i.e. the function field of\n+   the struct cmd_list_element is NULL).\n+\n+   When LOOKUP_FOR_COMPLETION_P is true the completion is being requested\n+   for the completion engine, no warnings should be printed.  */\n+\n+extern struct cmd_list_element *lookup_cmd_1\n+\t(const char **text, struct cmd_list_element *clist,\n+\t struct cmd_list_element **result_list, std::string *default_args,\n+\t int ignore_help_classes, bool lookup_for_completion_p = false);\n \n extern struct cmd_list_element *deprecate_cmd (struct cmd_list_element *,\n \t\t\t\t\t       const char * );"
    },
    {
      "sha": "4c1ad254b0716dcb7eef9637c2cc427626ee0c2b",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1536146f30900b77c8381930669532f4073df196/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1536146f30900b77c8381930669532f4073df196/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=1536146f30900b77c8381930669532f4073df196",
      "patch": "@@ -1388,9 +1388,8 @@ complete_line_internal_1 (completion_tracker &tracker,\n       result_list = 0;\n     }\n   else\n-    {\n-      c = lookup_cmd_1 (&p, cmdlist, &result_list, NULL, ignore_help_classes);\n-    }\n+    c = lookup_cmd_1 (&p, cmdlist, &result_list, NULL, ignore_help_classes,\n+\t\t      true);\n \n   /* Move p up to the next interesting thing.  */\n   while (*p == ' ' || *p == '\\t')"
    },
    {
      "sha": "f2262f6b3c7d72d72c75b31f78be1d4455d07d2a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1536146f30900b77c8381930669532f4073df196/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1536146f30900b77c8381930669532f4073df196/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1536146f30900b77c8381930669532f4073df196",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/completion.exp: Add additional tests.\n+\n 2020-12-11  Tom de Vries  <tdevries@suse.de>\n \n \tPR testsuite/26991"
    },
    {
      "sha": "14d56a5cc19e6f3c778152084db550811b6b6b69",
      "filename": "gdb/testsuite/gdb.base/completion.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1536146f30900b77c8381930669532f4073df196/gdb/testsuite/gdb.base/completion.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1536146f30900b77c8381930669532f4073df196/gdb/testsuite/gdb.base/completion.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/completion.exp?ref=1536146f30900b77c8381930669532f4073df196",
      "patch": "@@ -962,3 +962,9 @@ foreach_with_prefix cmd { \"watch\" \"awatch\" \"rwatch\" } {\n \t    }\n     }\n }\n+\n+# Check that tab completion of a deprecated alias does not display the\n+# warning about the alias being deprecated during tab completion.\n+gdb_test_no_output \"alias xxx_yyy_zzz=break\"\n+gdb_test_no_output \"maint deprecate xxx_yyy_zzz\"\n+test_gdb_complete_unique \"xxx_yyy_\" \"xxx_yyy_zzz\""
    }
  ]
}