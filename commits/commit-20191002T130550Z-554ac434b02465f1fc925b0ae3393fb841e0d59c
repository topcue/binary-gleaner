{
  "sha": "554ac434b02465f1fc925b0ae3393fb841e0d59c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTU0YWM0MzRiMDI0NjVmMWZjOTI1YjBhZTMzOTNmYjg0MWUwZDU5Yw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-19T17:17:59Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-02T13:05:50Z"
    },
    "message": "gdb: Change a VEC to std::vector in btrace.{c,h}\n\nReplace a VEC with a std::vector in btrace.h, and update btrace.c to\nmatch.  It is worth noting that this code appears to be currently\nuntested by the GDB testsuite.  I've tried to do a like for like\nreplacement when moving to std::vector, with minimal refactoring to\ntry and avoid introducing any bugs.\n\nAs the new vector is inside a union I've currently used a pointer to\nvector, which makes the code slightly uglier than it might otherwise\nbe, but again, due to lack of testing I'm reluctant to start\nrefactoring the code in a big way.\n\ngdb/ChangeLog:\n\n\t* btrace.c (btrace_maint_clear): Update to handle change from VEC\n\tto std::vector.\n\t(btrace_maint_decode_pt): Likewise, and move allocation of the\n\tvector outside of the loop.\n\t(btrace_maint_update_packets): Update to handle change from VEC to\n\tstd::vector.\n\t(btrace_maint_print_packets): Likewise.\n\t(maint_info_btrace_cmd): Likewise.\n\t* btrace.h: Remove use of DEF_VEC_O.\n\t(typedef btrace_pt_packet_s): Delete.\n\t(struct btrace_maint_info) <packets>: Change fromm VEC to\n\tstd::vector.\n\t* gdbsupport/btrace-common.h: Remove 'vec.h' include.",
    "tree": {
      "sha": "0e897b27e89aee707954da34cedf0a95881f8e7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e897b27e89aee707954da34cedf0a95881f8e7f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/554ac434b02465f1fc925b0ae3393fb841e0d59c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/554ac434b02465f1fc925b0ae3393fb841e0d59c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/554ac434b02465f1fc925b0ae3393fb841e0d59c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/554ac434b02465f1fc925b0ae3393fb841e0d59c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46f29a9a260da1a03176682aff63bad03d8f2e8b"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 38,
    "deletions": 25
  },
  "files": [
    {
      "sha": "7d1843179b5ee61cc261b89e0a26c362e2eda00a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=554ac434b02465f1fc925b0ae3393fb841e0d59c",
      "patch": "@@ -1,3 +1,19 @@\n+2019-10-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* btrace.c (btrace_maint_clear): Update to handle change from VEC\n+\tto std::vector.\n+\t(btrace_maint_decode_pt): Likewise, and move allocation of the\n+\tvector outside of the loop.\n+\t(btrace_maint_update_packets): Update to handle change from VEC to\n+\tstd::vector.\n+\t(btrace_maint_print_packets): Likewise.\n+\t(maint_info_btrace_cmd): Likewise.\n+\t* btrace.h: Remove use of DEF_VEC_O.\n+\t(typedef btrace_pt_packet_s): Delete.\n+\t(struct btrace_maint_info) <packets>: Change fromm VEC to\n+\tstd::vector.\n+\t* gdbsupport/btrace-common.h: Remove 'vec.h' include.\n+\n 2019-10-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* btrace.c (btrace_compute_ftrace_bts): Update for std::vector,"
    },
    {
      "sha": "8bed31cdac0bc3bfce4d340aeb9fbbe4d8c12ab5",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 21,
      "deletions": 19,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=554ac434b02465f1fc925b0ae3393fb841e0d59c",
      "patch": "@@ -1825,7 +1825,7 @@ btrace_maint_clear (struct btrace_thread_info *btinfo)\n \n #if defined (HAVE_LIBIPT)\n     case BTRACE_FORMAT_PT:\n-      xfree (btinfo->maint.variant.pt.packets);\n+      delete btinfo->maint.variant.pt.packets;\n \n       btinfo->maint.variant.pt.packets = NULL;\n       btinfo->maint.variant.pt.packet_history.begin = 0;\n@@ -2962,6 +2962,9 @@ btrace_maint_decode_pt (struct btrace_maint_info *maint,\n {\n   int errcode;\n \n+  if (maint->variant.pt.packets == NULL)\n+    maint->variant.pt.packets = new std::vector <btrace_pt_packet>;\n+\n   for (;;)\n     {\n       struct btrace_pt_packet packet;\n@@ -2982,17 +2985,15 @@ btrace_maint_decode_pt (struct btrace_maint_info *maint,\n \t  if (maint_btrace_pt_skip_pad == 0 || packet.packet.type != ppt_pad)\n \t    {\n \t      packet.errcode = pt_errcode (errcode);\n-\t      VEC_safe_push (btrace_pt_packet_s, maint->variant.pt.packets,\n-\t\t\t     &packet);\n+\t      maint->variant.pt.packets->push_back (packet);\n \t    }\n \t}\n \n       if (errcode == -pte_eos)\n \tbreak;\n \n       packet.errcode = pt_errcode (errcode);\n-      VEC_safe_push (btrace_pt_packet_s, maint->variant.pt.packets,\n-\t\t     &packet);\n+      maint->variant.pt.packets->push_back (packet);\n \n       warning (_(\"Error at trace offset 0x%\" PRIx64 \": %s.\"),\n \t       packet.offset, pt_errstr (packet.errcode));\n@@ -3093,11 +3094,14 @@ btrace_maint_update_packets (struct btrace_thread_info *btinfo,\n \n #if defined (HAVE_LIBIPT)\n     case BTRACE_FORMAT_PT:\n-      if (VEC_empty (btrace_pt_packet_s, btinfo->maint.variant.pt.packets))\n+      if (btinfo->maint.variant.pt.packets == nullptr)\n+\tbtinfo->maint.variant.pt.packets = new std::vector <btrace_pt_packet>;\n+\n+      if (btinfo->maint.variant.pt.packets->empty ())\n \tbtrace_maint_update_pt_packets (btinfo);\n \n       *begin = 0;\n-      *end = VEC_length (btrace_pt_packet_s, btinfo->maint.variant.pt.packets);\n+      *end = btinfo->maint.variant.pt.packets->size ();\n       *from = btinfo->maint.variant.pt.packet_history.begin;\n       *to = btinfo->maint.variant.pt.packet_history.end;\n       break;\n@@ -3140,23 +3144,21 @@ btrace_maint_print_packets (struct btrace_thread_info *btinfo,\n #if defined (HAVE_LIBIPT)\n     case BTRACE_FORMAT_PT:\n       {\n-\tVEC (btrace_pt_packet_s) *packets;\n+\tconst std::vector <btrace_pt_packet> &packets\n+\t  = *btinfo->maint.variant.pt.packets;\n \tunsigned int pkt;\n \n-\tpackets = btinfo->maint.variant.pt.packets;\n \tfor (pkt = begin; pkt < end; ++pkt)\n \t  {\n-\t    const struct btrace_pt_packet *packet;\n-\n-\t    packet = VEC_index (btrace_pt_packet_s, packets, pkt);\n+\t    const struct btrace_pt_packet &packet = packets.at (pkt);\n \n \t    printf_unfiltered (\"%u\\t\", pkt);\n-\t    printf_unfiltered (\"0x%\" PRIx64 \"\\t\", packet->offset);\n+\t    printf_unfiltered (\"0x%\" PRIx64 \"\\t\", packet.offset);\n \n-\t    if (packet->errcode == pte_ok)\n-\t      pt_print_packet (&packet->packet);\n+\t    if (packet.errcode == pte_ok)\n+\t      pt_print_packet (&packet.packet);\n \t    else\n-\t      printf_unfiltered (\"[error: %s]\", pt_errstr (packet->errcode));\n+\t      printf_unfiltered (\"[error: %s]\", pt_errstr (packet.errcode));\n \n \t    printf_unfiltered (\"\\n\");\n \t  }\n@@ -3447,9 +3449,9 @@ maint_info_btrace_cmd (const char *args, int from_tty)\n \t\t\t   version.ext != NULL ? version.ext : \"\");\n \n \tbtrace_maint_update_pt_packets (btinfo);\n-\tprintf_unfiltered (_(\"Number of packets: %u.\\n\"),\n-\t\t\t   VEC_length (btrace_pt_packet_s,\n-\t\t\t\t       btinfo->maint.variant.pt.packets));\n+\tprintf_unfiltered (_(\"Number of packets: %zu.\\n\"),\n+\t\t\t   ((btinfo->maint.variant.pt.packets == nullptr)\n+\t\t\t    ? 0 : btinfo->maint.variant.pt.packets->size ()));\n       }\n       break;\n #endif /* defined (HAVE_LIBIPT)  */"
    },
    {
      "sha": "208c089fa7c3a369cd4740ad91dcfeba9e2e0520",
      "filename": "gdb/btrace.h",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/btrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/btrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.h?ref=554ac434b02465f1fc925b0ae3393fb841e0d59c",
      "patch": "@@ -264,9 +264,6 @@ struct btrace_pt_packet\n   struct pt_packet packet;\n };\n \n-/* Define functions operating on a vector of packets.  */\n-typedef struct btrace_pt_packet btrace_pt_packet_s;\n-DEF_VEC_O (btrace_pt_packet_s);\n #endif /* defined (HAVE_LIBIPT)  */\n \n /* Branch trace iteration state for \"maintenance btrace packet-history\".  */\n@@ -300,7 +297,7 @@ struct btrace_maint_info\n     struct\n     {\n       /* A vector of decoded packets.  */\n-      VEC (btrace_pt_packet_s) *packets;\n+      std::vector <btrace_pt_packet> *packets;\n \n       /* The packet history iterator.\n \t We are iterating over the above PACKETS vector.  */"
    },
    {
      "sha": "166d7b1870013bf0cba828e805590aa004e39f10",
      "filename": "gdb/gdbsupport/btrace-common.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/gdbsupport/btrace-common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/554ac434b02465f1fc925b0ae3393fb841e0d59c/gdb/gdbsupport/btrace-common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/btrace-common.h?ref=554ac434b02465f1fc925b0ae3393fb841e0d59c",
      "patch": "@@ -26,8 +26,6 @@\n    inferior.  For presentation purposes, the branch trace is represented as a\n    list of sequential control-flow blocks, one such list per thread.  */\n \n-#include \"vec.h\"\n-\n /* A branch trace block.\n \n    This represents a block of sequential control-flow.  Adjacent blocks will be"
    }
  ]
}