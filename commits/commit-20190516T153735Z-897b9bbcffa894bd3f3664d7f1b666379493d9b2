{
  "sha": "897b9bbcffa894bd3f3664d7f1b666379493d9b2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODk3YjliYmNmZmE4OTRiZDNmMzY2NGQ3ZjFiNjY2Mzc5NDkzZDliMg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:34:44Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 49/57][Arm][OBJDUMP] Add support for MVE complex number instructions\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_rotate): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "3efe454e3dce7d34069d7195a01e7f09aac6ef42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3efe454e3dce7d34069d7195a01e7f09aac6ef42"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/897b9bbcffa894bd3f3664d7f1b666379493d9b2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/897b9bbcffa894bd3f3664d7f1b666379493d9b2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/897b9bbcffa894bd3f3664d7f1b666379493d9b2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/897b9bbcffa894bd3f3664d7f1b666379493d9b2/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1c8f2df85f56d8f3213667e2a11cd480f2a26667",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c8f2df85f56d8f3213667e2a11cd480f2a26667",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c8f2df85f56d8f3213667e2a11cd480f2a26667"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 152,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0247adabda8814c589c457ba10bd8d921d8c6322",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/897b9bbcffa894bd3f3664d7f1b666379493d9b2/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/897b9bbcffa894bd3f3664d7f1b666379493d9b2/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=897b9bbcffa894bd3f3664d7f1b666379493d9b2",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_rotate): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "674d4a80f2b6402012981069c3f8c4635ddf7470",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 142,
      "deletions": 0,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/897b9bbcffa894bd3f3664d7f1b666379493d9b2/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/897b9bbcffa894bd3f3664d7f1b666379493d9b2/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=897b9bbcffa894bd3f3664d7f1b666379493d9b2",
      "patch": "@@ -179,6 +179,11 @@ enum mve_instructions\n   MVE_VDWDUP,\n   MVE_VIWDUP,\n   MVE_VIDUP,\n+  MVE_VCADD_FP,\n+  MVE_VCADD_VEC,\n+  MVE_VHCADD,\n+  MVE_VCMLA_FP,\n+  MVE_VCMUL_FP,\n   MVE_NONE\n };\n \n@@ -1964,6 +1969,7 @@ static const struct opcode32 neon_opcodes[] =\n    %<bitfield>h\t\tprint high half of 64-bit destination reg\n    %<bitfield>k\t\tprint immediate for vector conversion instruction\n    %<bitfield>l\t\tprint low half of 64-bit destination reg\n+   %<bitfield>o\t\tprint rotate value for vcmul\n    %<bitfield>u\t\tprint immediate value for vddup/vdwdup\n    %<bitfield>x\t\tprint the bitfield in hex.\n   */\n@@ -2044,6 +2050,24 @@ static const struct mopcode32 mve_opcodes[] =\n    0xeef10f00, 0xeff31fd1,\n    \"vaddv%5A%v.%u%18-19s\\t%13-15l, %1-3Q\"},\n \n+  /* Vector VCADD floating point.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCADD_FP,\n+   0xfc800840, 0xfea11f51,\n+   \"vcadd%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%24o\"},\n+\n+  /* Vector VCADD.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VCADD_VEC,\n+   0xfe000f00, 0xff810f51,\n+   \"vcadd%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%12o\"},\n+\n+  /* Vector VCMLA.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCMLA_FP,\n+   0xfc200840, 0xfe211f51,\n+   \"vcmla%v.f%20s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%23-24o\"},\n+\n   /* Vector VCMP floating point T1.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VCMP_FP_T1,\n@@ -2147,6 +2171,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee001f40, 0xef811f70,\n    \"vhsub%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n \n+  /* Vector VCMUL.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCMUL_FP,\n+   0xee300e00, 0xefb10f50,\n+   \"vcmul%v.f%28s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%0,12o\"},\n+\n   /* Vector VDUP.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VDUP,\n@@ -2201,6 +2231,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee011f60, 0xff811f70,\n    \"vdwdup%v.u%20-21s\\t%13-15,22Q, %17-19l, %1-3h, #%0,7u\"},\n \n+  /* Vector VHCADD.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VHCADD,\n+   0xee000f00, 0xff810f51,\n+   \"vhcadd%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%12o\"},\n+\n   /* Vector VIWDUP.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VIWDUP,\n@@ -4698,6 +4734,8 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VCADD_VEC:\n+    case MVE_VHCADD:\n     case MVE_VDDUP:\n     case MVE_VIDUP:\n     case MVE_VQRDMLADH:\n@@ -5518,6 +5556,7 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \t  return FALSE;\n       }\n \n+    case MVE_VCMUL_FP:\n     case MVE_VQDMULL_T1:\n       {\n \tunsigned long Qd;\n@@ -5596,6 +5635,58 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VCADD_VEC:\n+    case MVE_VHCADD:\n+      {\n+\tunsigned long Qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\tunsigned long Qm = arm_decode_field_multiple (given, 1, 3, 5, 5);\n+\tif ((Qd == Qm) && arm_decode_field (given, 20, 21) == 2)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_REGS_EQ_AND_SIZE_2;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VCADD_FP:\n+      {\n+\tunsigned long Qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\tunsigned long Qm = arm_decode_field_multiple (given, 1, 3, 5, 5);\n+\tif ((Qd == Qm) && arm_decode_field (given, 20, 20) == 1)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_REGS_EQ_AND_SIZE_1;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VCMLA_FP:\n+      {\n+\tunsigned long Qda;\n+\tunsigned long Qm;\n+\tunsigned long Qn;\n+\n+\tif (arm_decode_field (given, 20, 20) == 1)\n+\t  {\n+\t    Qda = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\t    Qm = arm_decode_field_multiple (given, 1, 3, 5, 5);\n+\t    Qn = arm_decode_field_multiple (given, 17, 19, 7, 7);\n+\n+\t    if ((Qda == Qn) || (Qda == Qm))\n+\t      {\n+\t\t*unpredictable_code = UNPRED_Q_REGS_EQ_AND_SIZE_1;\n+\t\treturn TRUE;\n+\t      }\n+\t    else\n+\t      return FALSE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -6203,6 +6294,49 @@ print_mve_vcvt_size (struct disassemble_info *info,\n     }\n }\n \n+static void\n+print_mve_rotate (struct disassemble_info *info, unsigned long rot,\n+\t\t  unsigned long rot_width)\n+{\n+  void *stream = info->stream;\n+  fprintf_ftype func = info->fprintf_func;\n+\n+  if (rot_width == 1)\n+    {\n+      switch (rot)\n+\t{\n+\tcase 0:\n+\t  func (stream, \"90\");\n+\t  break;\n+\tcase 1:\n+\t  func (stream, \"270\");\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  else if (rot_width == 2)\n+    {\n+      switch (rot)\n+\t{\n+\tcase 0:\n+\t  func (stream, \"0\");\n+\t  break;\n+\tcase 1:\n+\t  func (stream, \"90\");\n+\t  break;\n+\tcase 2:\n+\t  func (stream, \"180\");\n+\t  break;\n+\tcase 3:\n+\t  func (stream, \"270\");\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+}\n+\n static void\n print_instruction_predicate (struct disassemble_info *info)\n {\n@@ -6226,6 +6360,7 @@ print_mve_size (struct disassemble_info *info,\n   switch (matched_insn)\n     {\n     case MVE_VADDV:\n+    case MVE_VCADD_VEC:\n     case MVE_VCMP_VEC_T1:\n     case MVE_VCMP_VEC_T2:\n     case MVE_VCMP_VEC_T3:\n@@ -6236,6 +6371,7 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VDWDUP:\n     case MVE_VHADD_T1:\n     case MVE_VHADD_T2:\n+    case MVE_VHCADD:\n     case MVE_VHSUB_T1:\n     case MVE_VHSUB_T2:\n     case MVE_VIDUP:\n@@ -6296,6 +6432,9 @@ print_mve_size (struct disassemble_info *info,\n \tfunc (stream, \"16\");\n       break;\n \n+    case MVE_VCADD_FP:\n+    case MVE_VCMLA_FP:\n+    case MVE_VCMUL_FP:\n     case MVE_VMLADAV_T1:\n     case MVE_VMLALDAV:\n     case MVE_VMLSDAV_T1:\n@@ -8061,6 +8200,9 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t\tbreak;\n \t\t\t      }\n \t\t\t    break;\n+\t\t\t  case 'o':\n+\t\t\t    print_mve_rotate (info, value, width);\n+\t\t\t    break;\n \t\t\t  case 'r':\n \t\t\t    func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;"
    }
  ]
}