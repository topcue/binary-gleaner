{
  "sha": "7b249e470a82063605c3789f4b2d0378400423de",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2IyNDllNDcwYTgyMDYzNjA1YzM3ODlmNGIyZDAzNzg0MDA0MjNkZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:45Z"
    },
    "message": "Add partial_symtabs parameter to psymtab construction functions\n\nThis adds a partial_symtabs parameter to the psymtab constructors and\nto add_psymbol.  This helps with the overall project of removing the\npartial symtabs from the objfile.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_start_psymtab): Add partial_symtabs parameter.\n\t(xcoff_end_psymtab, scan_xcoff_symtab): Update.\n\t* psymtab.c (partial_symtab::partial_symtab): Add partial_symtabs\n\tparameter.\n\t(add_psymbol_to_bcache): Remove.\n\t(partial_symtab::add_psymbol): Add partial_symtabs parameter.\n\t(partial_symtab::add_psymbol, partial_symtab::partial_symtab):\n\tLikewise.\n\t* psympriv.h (partial_symtab): Add partial_symtabs parameter.\n\t<add_psymbol>: Likewise.\n\t(standard_psymtab, legacy_psymtab): Likewise.\n\t* mdebugread.c (parse_partial_symbols): Update.\n\t(handle_psymbol_enumerators): Add partial_symtabs parameter.\n\t(handle_psymbol_enumerators): Update.\n\t(new_psymtab): Add partial_symtabs parameter.\n\t* dwarf2/read.h (dwarf2_psymtab): Add partial_symtabs parameter.\n\t* dwarf2/read.c (dwarf2_include_psymtab): Add partial_symtabs\n\tparameter.\n\t(dwarf2_create_include_psymtab): Add partial_symtabs parameter.\n\t(create_partial_symtab, add_partial_symbol, dwarf_decode_lines):\n\tUpdate.\n\t* dbxread.c (read_dbx_symtab): Update.\n\t(start_psymtab): Add partial_symtabs parameter.\n\t(dbx_end_psymtab): Update.\n\t* ctfread.c (struct ctf_context) <partial_symtabs>: New member.\n\t(ctf_psymtab): Add partial_symtabs parameter.\n\t(create_partial_symtab, ctf_psymtab_type_cb, ctf_psymtab_var_cb):\n\tUpdate.\n\t(scan_partial_symbols): Add partial_symtabs parameter.\n\t(scan_partial_symbols, elfctf_build_psymtabs)\n\t(ctf_psymtab_add_enums): Update.",
    "tree": {
      "sha": "748b61bd197aa3beff13a90cea71bd40da24e052",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/748b61bd197aa3beff13a90cea71bd40da24e052"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7b249e470a82063605c3789f4b2d0378400423de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b249e470a82063605c3789f4b2d0378400423de",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7b249e470a82063605c3789f4b2d0378400423de",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b249e470a82063605c3789f4b2d0378400423de/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d1eef86d12f5aa2f8461add1180df9db4b59a39d"
    }
  ],
  "stats": {
    "total": 313,
    "additions": 206,
    "deletions": 107
  },
  "files": [
    {
      "sha": "bc746a1616a3f8ff25761e081008d609ebb0ab54",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -1,3 +1,37 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_start_psymtab): Add partial_symtabs parameter.\n+\t(xcoff_end_psymtab, scan_xcoff_symtab): Update.\n+\t* psymtab.c (partial_symtab::partial_symtab): Add partial_symtabs\n+\tparameter.\n+\t(add_psymbol_to_bcache): Remove.\n+\t(partial_symtab::add_psymbol): Add partial_symtabs parameter.\n+\t(partial_symtab::add_psymbol, partial_symtab::partial_symtab):\n+\tLikewise.\n+\t* psympriv.h (partial_symtab): Add partial_symtabs parameter.\n+\t<add_psymbol>: Likewise.\n+\t(standard_psymtab, legacy_psymtab): Likewise.\n+\t* mdebugread.c (parse_partial_symbols): Update.\n+\t(handle_psymbol_enumerators): Add partial_symtabs parameter.\n+\t(handle_psymbol_enumerators): Update.\n+\t(new_psymtab): Add partial_symtabs parameter.\n+\t* dwarf2/read.h (dwarf2_psymtab): Add partial_symtabs parameter.\n+\t* dwarf2/read.c (dwarf2_include_psymtab): Add partial_symtabs\n+\tparameter.\n+\t(dwarf2_create_include_psymtab): Add partial_symtabs parameter.\n+\t(create_partial_symtab, add_partial_symbol, dwarf_decode_lines):\n+\tUpdate.\n+\t* dbxread.c (read_dbx_symtab): Update.\n+\t(start_psymtab): Add partial_symtabs parameter.\n+\t(dbx_end_psymtab): Update.\n+\t* ctfread.c (struct ctf_context) <partial_symtabs>: New member.\n+\t(ctf_psymtab): Add partial_symtabs parameter.\n+\t(create_partial_symtab, ctf_psymtab_type_cb, ctf_psymtab_var_cb):\n+\tUpdate.\n+\t(scan_partial_symbols): Add partial_symtabs parameter.\n+\t(scan_partial_symbols, elfctf_build_psymtabs)\n+\t(ctf_psymtab_add_enums): Update.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.c (read_symbols): Use objfile method."
    },
    {
      "sha": "7713500c1fe0ae045b6ec45b6e6bfd9533423a3d",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 18,
      "deletions": 10,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -115,15 +115,19 @@ struct ctf_context\n {\n   ctf_dict_t *fp;\n   struct objfile *of;\n+  psymtab_storage *partial_symtabs;\n   partial_symtab *pst;\n   struct buildsym_compunit *builder;\n };\n \n /* A partial symtab, specialized for this module.  */\n struct ctf_psymtab : public standard_psymtab\n {\n-  ctf_psymtab (const char *filename, struct objfile *objfile, CORE_ADDR addr)\n-    : standard_psymtab (filename, objfile, addr)\n+  ctf_psymtab (const char *filename,\n+\t       psymtab_storage *partial_symtabs,\n+\t       struct objfile *objfile,\n+\t       CORE_ADDR addr)\n+    : standard_psymtab (filename, partial_symtabs, objfile, addr)\n   {\n   }\n \n@@ -1259,7 +1263,7 @@ ctf_psymtab_add_enums (struct ctf_context *ccp, ctf_id_t tid)\n       ccp->pst->add_psymbol (ename, true,\n \t\t\t     VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t     psymbol_placement::GLOBAL,\n-\t\t\t     0, language_c, ccp->of);\n+\t\t\t     0, language_c, ccp->partial_symtabs, ccp->of);\n     }\n   if (ctf_errno (ccp->fp) != ECTF_NEXT_END)\n     complaint (_(\"ctf_enum_next ctf_psymtab_add_enums failed - %s\"),\n@@ -1359,16 +1363,18 @@ ctf_psymtab::read_symtab (struct objfile *objfile)\n static ctf_psymtab *\n create_partial_symtab (const char *name,\n \t\t       ctf_dict_t *cfp,\n+\t\t       psymtab_storage *partial_symtabs,\n \t\t       struct objfile *objfile)\n {\n   ctf_psymtab *pst;\n   struct ctf_context *ccx;\n \n-  pst = new ctf_psymtab (name, objfile, 0);\n+  pst = new ctf_psymtab (name, partial_symtabs, objfile, 0);\n \n   ccx = XOBNEW (&objfile->objfile_obstack, struct ctf_context);\n   ccx->fp = cfp;\n   ccx->of = objfile;\n+  ccx->partial_symtabs = partial_symtabs;\n   ccx->pst = pst;\n   ccx->builder = nullptr;\n   pst->context = ccx;\n@@ -1434,7 +1440,7 @@ ctf_psymtab_type_cb (ctf_id_t tid, void *arg)\n   ccp->pst->add_psymbol (name.get (), true,\n \t\t\t domain, aclass, section,\n \t\t\t psymbol_placement::GLOBAL,\n-\t\t\t 0, language_c, ccp->of);\n+\t\t\t 0, language_c, ccp->partial_symtabs, ccp->of);\n \n   return 0;\n }\n@@ -1449,19 +1455,20 @@ ctf_psymtab_var_cb (const char *name, ctf_id_t id, void *arg)\n   ccp->pst->add_psymbol (name, true,\n \t\t\t VAR_DOMAIN, LOC_STATIC, -1,\n \t\t\t psymbol_placement::GLOBAL,\n-\t\t\t 0, language_c, ccp->of);\n+\t\t\t 0, language_c, ccp->partial_symtabs, ccp->of);\n   return 0;\n }\n \n /* Setup partial_symtab's describing each source file for which\n    debugging information is available.  */\n \n static void\n-scan_partial_symbols (ctf_dict_t *cfp, struct objfile *of)\n+scan_partial_symbols (ctf_dict_t *cfp, psymtab_storage *partial_symtabs,\n+\t\t      struct objfile *of)\n {\n   bfd *abfd = of->obfd;\n   const char *name = bfd_get_filename (abfd);\n-  ctf_psymtab *pst = create_partial_symtab (name, cfp, of);\n+  ctf_psymtab *pst = create_partial_symtab (name, cfp, partial_symtabs, of);\n \n   struct ctf_context *ccx = pst->context;\n \n@@ -1512,7 +1519,7 @@ scan_partial_symbols (ctf_dict_t *cfp, struct objfile *of)\n       pst->add_psymbol (tname.get (), true,\n \t\t\ttdomain, aclass, -1,\n \t\t\tpsymbol_placement::STATIC,\n-\t\t\t0, language_c, of);\n+\t\t\t0, language_c, partial_symtabs, of);\n     }\n \n   pst->end ();\n@@ -1539,7 +1546,8 @@ elfctf_build_psymtabs (struct objfile *of)\n \t   bfd_get_filename (abfd), ctf_errmsg (err));\n   ctf_dict_key.emplace (of, fp);\n \n-  scan_partial_symbols (fp, of);\n+  psymtab_storage *partial_symtabs = of->partial_symtabs.get ();\n+  scan_partial_symbols (fp, partial_symtabs, of);\n }\n \n #else"
    },
    {
      "sha": "a6f44d5a5649288fad52f8f6c22c086353fb51aa",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 26,
      "deletions": 16,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -298,8 +298,8 @@ static void add_old_header_file (const char *, int);\n \n static void add_this_object_header_file (int);\n \n-static legacy_psymtab *start_psymtab (struct objfile *, const char *,\n-\t\t\t\t\t     CORE_ADDR, int);\n+static legacy_psymtab *start_psymtab (psymtab_storage *, struct objfile *,\n+\t\t\t\t      const char *, CORE_ADDR, int);\n \n /* Free up old header file tables.  */\n \n@@ -1291,7 +1291,7 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \n \t    if (!pst)\n \t      {\n-\t\tpst = start_psymtab (objfile,\n+\t\tpst = start_psymtab (partial_symtabs, objfile,\n \t\t\t\t     namestring, valu,\n \t\t\t\t     first_so_symnum * symbol_size);\n \t\tpst->dirname = dirname_nso;\n@@ -1467,7 +1467,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t\t\tVAR_DOMAIN, LOC_STATIC,\n \t\t\t\tdata_sect_index,\n \t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\tnlist.n_value, psymtab_language, objfile);\n+\t\t\t\tnlist.n_value, psymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t      continue;\n \n \t    case 'G':\n@@ -1477,7 +1478,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t\t\tVAR_DOMAIN, LOC_STATIC,\n \t\t\t\tdata_sect_index,\n \t\t\t\tpsymbol_placement::GLOBAL,\n-\t\t\t\tnlist.n_value, psymtab_language, objfile);\n+\t\t\t\tnlist.n_value, psymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t      continue;\n \n \t    case 'T':\n@@ -1494,14 +1496,16 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t  pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n \t\t\t\t    true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t    psymbol_placement::STATIC,\n-\t\t\t\t    0, psymtab_language, objfile);\n+\t\t\t\t    0, psymtab_language,\n+\t\t\t\t    partial_symtabs, objfile);\n \t\t  if (p[2] == 't')\n \t\t    {\n \t\t      /* Also a typedef with the same name.  */\n \t\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n \t\t\t\t\ttrue, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\t\t0, psymtab_language, objfile);\n+\t\t\t\t\t0, psymtab_language,\n+\t\t\t\t\tpartial_symtabs, objfile);\n \t\t      p += 1;\n \t\t    }\n \t\t}\n@@ -1513,7 +1517,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t  pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n \t\t\t\t    true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t    psymbol_placement::STATIC,\n-\t\t\t\t    0, psymtab_language, objfile);\n+\t\t\t\t    0, psymtab_language,\n+\t\t\t\t    partial_symtabs, objfile);\n \t\t}\n \t    check_enum:\n \t      /* If this is an enumerated type, we need to\n@@ -1574,7 +1579,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t      pst->add_psymbol (gdb::string_view (p, q - p), true,\n \t\t\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t\tpsymbol_placement::STATIC, 0,\n-\t\t\t\t\tpsymtab_language, objfile);\n+\t\t\t\t\tpsymtab_language,\n+\t\t\t\t\tpartial_symtabs, objfile);\n \t\t      /* Point past the name.  */\n \t\t      p = q;\n \t\t      /* Skip over the value.  */\n@@ -1592,7 +1598,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\tpsymbol_placement::STATIC, 0,\n-\t\t\t\tpsymtab_language, objfile);\n+\t\t\t\tpsymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t      continue;\n \n \t    case 'f':\n@@ -1648,7 +1655,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t\t\tVAR_DOMAIN, LOC_BLOCK,\n \t\t\t\tSECT_OFF_TEXT (objfile),\n \t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\tnlist.n_value, psymtab_language, objfile);\n+\t\t\t\tnlist.n_value, psymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t      continue;\n \n \t      /* Global functions were ignored here, but now they\n@@ -1707,7 +1715,8 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n \t\t\t\tVAR_DOMAIN, LOC_BLOCK,\n \t\t\t\tSECT_OFF_TEXT (objfile),\n \t\t\t\tpsymbol_placement::GLOBAL,\n-\t\t\t\tnlist.n_value, psymtab_language, objfile);\n+\t\t\t\tnlist.n_value, psymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t      continue;\n \n \t      /* Two things show up here (hopefully); static symbols of\n@@ -1902,10 +1911,11 @@ read_dbx_symtab (minimal_symbol_reader &reader,\n    (normal).  */\n \n static legacy_psymtab *\n-start_psymtab (struct objfile *objfile, const char *filename, CORE_ADDR textlow,\n-\t       int ldsymoff)\n+start_psymtab (psymtab_storage *partial_symtabs, struct objfile *objfile,\n+\t       const char *filename, CORE_ADDR textlow, int ldsymoff)\n {\n-  legacy_psymtab *result = new legacy_psymtab (filename, objfile, textlow);\n+  legacy_psymtab *result = new legacy_psymtab (filename, partial_symtabs,\n+\t\t\t\t\t       objfile, textlow);\n \n   result->read_symtab_private =\n     XOBNEW (&objfile->objfile_obstack, struct symloc);\n@@ -2028,7 +2038,7 @@ dbx_end_psymtab (struct objfile *objfile, psymtab_storage *partial_symtabs,\n   for (i = 0; i < num_includes; i++)\n     {\n       legacy_psymtab *subpst =\n-\tnew legacy_psymtab (include_list[i], objfile);\n+\tnew legacy_psymtab (include_list[i], partial_symtabs, objfile);\n \n       subpst->read_symtab_private =\n \tXOBNEW (&objfile->objfile_obstack, struct symloc);"
    },
    {
      "sha": "42713983707f750959a753dc50401a15ceb4175c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 18,
      "deletions": 8,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -6237,8 +6237,10 @@ read_abbrev_offset (dwarf2_per_objfile *per_objfile,\n /* A partial symtab that is used only for include files.  */\n struct dwarf2_include_psymtab : public partial_symtab\n {\n-  dwarf2_include_psymtab (const char *filename, struct objfile *objfile)\n-    : partial_symtab (filename, objfile)\n+  dwarf2_include_psymtab (const char *filename,\n+\t\t\t  psymtab_storage *partial_symtabs,\n+\t\t\t  struct objfile *objfile)\n+    : partial_symtab (filename, partial_symtabs, objfile)\n   {\n   }\n \n@@ -6291,10 +6293,13 @@ struct dwarf2_include_psymtab : public partial_symtab\n \n static void\n dwarf2_create_include_psymtab (dwarf2_per_bfd *per_bfd,\n-\t\t\t       const char *name, dwarf2_psymtab *pst,\n+\t\t\t       const char *name,\n+\t\t\t       dwarf2_psymtab *pst,\n+\t\t\t       psymtab_storage *partial_symtabs,\n \t\t\t       struct objfile *objfile)\n {\n-  dwarf2_include_psymtab *subpst = new dwarf2_include_psymtab (name, objfile);\n+  dwarf2_include_psymtab *subpst\n+    = new dwarf2_include_psymtab (name, partial_symtabs, objfile);\n \n   if (!IS_ABSOLUTE_PATH (subpst->filename))\n     subpst->dirname = pst->dirname;\n@@ -7549,7 +7554,8 @@ create_partial_symtab (dwarf2_per_cu_data *per_cu,\n   struct objfile *objfile = per_objfile->objfile;\n   dwarf2_psymtab *pst;\n \n-  pst = new dwarf2_psymtab (name, objfile, per_cu);\n+  pst = new dwarf2_psymtab (name, per_objfile->per_bfd->partial_symtabs.get (),\n+\t\t\t    objfile, per_cu);\n \n   pst->psymtabs_addrmap_supported = true;\n \n@@ -8663,7 +8669,9 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t\t\t\t\t    &objfile->objfile_obstack);\n \t  psymbol.ginfo.set_linkage_name (pdi->linkage_name);\n \t}\n-      cu->per_cu->v.psymtab->add_psymbol (psymbol, *where, objfile);\n+      cu->per_cu->v.psymtab->add_psymbol\n+\t(psymbol, *where, per_objfile->per_bfd->partial_symtabs.get (),\n+\t objfile);\n     }\n }\n \n@@ -21972,8 +21980,10 @@ dwarf_decode_lines (struct line_header *lh, const char *comp_dir,\n \t      psymtab_include_file_name (lh, file_entry, pst,\n \t\t\t\t\t comp_dir, &name_holder);\n \t    if (include_name != NULL)\n-\t      dwarf2_create_include_psymtab (cu->per_objfile->per_bfd,\n-\t\t\t\t\t     include_name, pst, objfile);\n+\t      dwarf2_create_include_psymtab\n+\t\t(cu->per_objfile->per_bfd, include_name, pst,\n+\t\t cu->per_objfile->per_bfd->partial_symtabs.get (),\n+\t\t objfile);\n \t  }\n     }\n   else"
    },
    {
      "sha": "82ab3879a5b79a25ddd7bb156599e3c936a56981",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -406,9 +406,11 @@ dwarf2_per_objfile *get_dwarf2_per_objfile (struct objfile *objfile);\n /* A partial symtab specialized for DWARF.  */\n struct dwarf2_psymtab : public partial_symtab\n {\n-  dwarf2_psymtab (const char *filename, struct objfile *objfile,\n+  dwarf2_psymtab (const char *filename,\n+\t\t  psymtab_storage *partial_symtabs,\n+\t\t  struct objfile *objfile,\n \t\t  dwarf2_per_cu_data *per_cu)\n-    : partial_symtab (filename, objfile, 0),\n+    : partial_symtab (filename, partial_symtabs, objfile, 0),\n       per_cu_data (per_cu)\n   {\n   }"
    },
    {
      "sha": "34ee718e22a7cc657646f2be8941d1452c47d8bd",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 41,
      "deletions": 24,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -252,7 +252,8 @@ static struct symbol *mylookup_symbol (const char *, const struct block *,\n \n static void sort_blocks (struct symtab *);\n \n-static legacy_psymtab *new_psymtab (const char *, struct objfile *);\n+static legacy_psymtab *new_psymtab (const char *, psymtab_storage *,\n+\t\t\t\t    struct objfile *);\n \n static void mdebug_expand_psymtab (legacy_psymtab *pst,\n \t\t\t\t  struct objfile *objfile);\n@@ -265,7 +266,8 @@ static int add_line (struct linetable *, int, CORE_ADDR, int);\n \n static struct linetable *shrink_linetable (struct linetable *);\n \n-static void handle_psymbol_enumerators (struct objfile *, partial_symtab *,\n+static void handle_psymbol_enumerators (struct objfile *, psymtab_storage *,\n+\t\t\t\t\tpartial_symtab *,\n \t\t\t\t\tFDR *, int, CORE_ADDR);\n \n static const char *mdebug_next_symbol_text (struct objfile *);\n@@ -2365,7 +2367,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n   fdr_to_pst = fdr_to_pst_holder.data ();\n   fdr_to_pst++;\n   {\n-    legacy_psymtab *new_pst = new_psymtab (\"\", objfile);\n+    legacy_psymtab *new_pst = new_psymtab (\"\", partial_symtabs, objfile);\n \n     fdr_to_pst[-1].pst = new_pst;\n     FDR_IDX (new_pst) = -1;\n@@ -2601,7 +2603,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \ttextlow = fh->adr;\n       else\n \ttextlow = 0;\n-      pst = new legacy_psymtab (fdr_name (fh), objfile, textlow);\n+      pst = new legacy_psymtab (fdr_name (fh), partial_symtabs, objfile,\n+\t\t\t\ttextlow);\n       pst->read_symtab_private = XOBNEW (&objfile->objfile_obstack, symloc);\n       memset (pst->read_symtab_private, 0, sizeof (struct symloc));\n \n@@ -3038,7 +3041,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t  SECT_OFF_DATA (objfile),\n \t\t\t\t\t  psymbol_placement::STATIC,\n \t\t\t\t\t  sh.value,\n-\t\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t\t  psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\tcontinue;\n \t\t      case 'G':\n \t\t\t/* The addresses in these entries are reported\n@@ -3050,7 +3054,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t  SECT_OFF_DATA (objfile),\n \t\t\t\t\t  psymbol_placement::GLOBAL,\n \t\t\t\t\t  sh.value,\n-\t\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t\t  psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\tcontinue;\n \n \t\t      case 'T':\n@@ -3068,7 +3073,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t      (gdb::string_view (namestring, p - namestring),\n \t\t\t       true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t       psymbol_placement::STATIC, 0, psymtab_language,\n-\t\t\t       objfile);\n+\t\t\t       partial_symtabs, objfile);\n \t\t\t    if (p[2] == 't')\n \t\t\t      {\n \t\t\t\t/* Also a typedef with the same name.  */\n@@ -3077,7 +3082,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t\t     p - namestring),\n \t\t\t\t   true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t   psymbol_placement::STATIC, 0,\n-\t\t\t\t   psymtab_language, objfile);\n+\t\t\t\t   psymtab_language,\n+\t\t\t\t   partial_symtabs, objfile);\n \t\t\t\tp += 1;\n \t\t\t      }\n \t\t\t  }\n@@ -3091,7 +3097,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t\t p - namestring),\n \t\t\t       true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t       psymbol_placement::STATIC, 0, psymtab_language,\n-\t\t\t       objfile);\n+\t\t\t       partial_symtabs, objfile);\n \t\t\t  }\n \t\t      check_enum:\n \t\t\t/* If this is an enumerated type, we need to add\n@@ -3158,7 +3164,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t\t  LOC_CONST, -1,\n \t\t\t\t\t\t  psymbol_placement::STATIC,\n \t\t\t\t\t\t  0, psymtab_language,\n-\t\t\t\t\t\t  objfile);\n+\t\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\t\t/* Point past the name.  */\n \t\t\t\tp = q;\n \t\t\t\t/* Skip over the value.  */\n@@ -3176,7 +3182,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t\t\t    p - namestring),\n \t\t\t\t\t  true, VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t\t  psymbol_placement::STATIC,\n-\t\t\t\t\t  0, psymtab_language, objfile);\n+\t\t\t\t\t  0, psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\tcontinue;\n \n \t\t      case 'f':\n@@ -3192,7 +3199,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t  SECT_OFF_TEXT (objfile),\n \t\t\t\t\t  psymbol_placement::STATIC,\n \t\t\t\t\t  sh.value,\n-\t\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t\t  psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\tcontinue;\n \n \t\t\t/* Global functions were ignored here, but now they\n@@ -3212,7 +3220,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t\t  SECT_OFF_TEXT (objfile),\n \t\t\t\t\t  psymbol_placement::GLOBAL,\n \t\t\t\t\t  sh.value,\n-\t\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t\t  psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\tcontinue;\n \n \t\t\t/* Two things show up here (hopefully); static\n@@ -3446,13 +3455,15 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t      VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t      section,\n \t\t\t\t      psymbol_placement::GLOBAL,\n-\t\t\t\t      sh.value, psymtab_language, objfile);\n+\t\t\t\t      sh.value, psymtab_language,\n+\t\t\t\t      partial_symtabs, objfile);\n \t\t  else\n \t\t    pst->add_psymbol (sym_name, true,\n \t\t\t\t      VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t      section,\n \t\t\t\t      psymbol_placement::STATIC,\n-\t\t\t\t      sh.value, psymtab_language, objfile);\n+\t\t\t\t      sh.value, psymtab_language,\n+\t\t\t\t      partial_symtabs, objfile);\n \n \t\t  procaddr = sh.value;\n \n@@ -3518,10 +3529,11 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t      pst->add_psymbol (sym_name, true,\n \t\t\t\t\tSTRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\t\t0, psymtab_language, objfile);\n+\t\t\t\t\t0, psymtab_language,\n+\t\t\t\t\tpartial_symtabs, objfile);\n \t\t    }\n-\t\t  handle_psymbol_enumerators (objfile, pst, fh,\n-\t\t\t\t\t      sh.st, sh.value);\n+\t\t  handle_psymbol_enumerators (objfile, partial_symtabs,\n+\t\t\t\t\t      pst, fh, sh.st, sh.value);\n \n \t\t  /* Skip over the block.  */\n \t\t  new_sdx = sh.index;\n@@ -3559,7 +3571,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t      pst->add_psymbol (sym_name, true,\n \t\t\t\tVAR_DOMAIN, theclass, section,\n \t\t\t\tpsymbol_placement::STATIC,\n-\t\t\t\tsh.value, psymtab_language, objfile);\n+\t\t\t\tsh.value, psymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t    skip:\n \t      cur_sdx++;\t/* Go to next file symbol.  */\n \t    }\n@@ -3638,7 +3651,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\tVAR_DOMAIN, theclass,\n \t\t\t\tsection,\n \t\t\t\tpsymbol_placement::GLOBAL,\n-\t\t\t\tsvalue, psymtab_language, objfile);\n+\t\t\t\tsvalue, psymtab_language,\n+\t\t\t\tpartial_symtabs, objfile);\n \t    }\n \t}\n \n@@ -3740,7 +3754,9 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n    all the enum constants to the partial symbol table.  */\n \n static void\n-handle_psymbol_enumerators (struct objfile *objfile, partial_symtab *pst,\n+handle_psymbol_enumerators (struct objfile *objfile,\n+\t\t\t    psymtab_storage *partial_symtabs,\n+\t\t\t    partial_symtab *pst,\n \t\t\t    FDR *fh, int stype, CORE_ADDR svalue)\n {\n   const bfd_size_type external_sym_size = debug_swap->external_sym_size;\n@@ -3799,7 +3815,7 @@ handle_psymbol_enumerators (struct objfile *objfile, partial_symtab *pst,\n       pst->add_psymbol (name, true,\n \t\t\tVAR_DOMAIN, LOC_CONST, -1,\n \t\t\tpsymbol_placement::STATIC, 0,\n-\t\t\tpsymtab_language, objfile);\n+\t\t\tpsymtab_language, partial_symtabs, objfile);\n       ext_sym += external_sym_size;\n     }\n }\n@@ -4623,11 +4639,12 @@ new_symtab (const char *name, int maxlines, struct objfile *objfile)\n /* Allocate a new partial_symtab NAME.  */\n \n static legacy_psymtab *\n-new_psymtab (const char *name, struct objfile *objfile)\n+new_psymtab (const char *name, psymtab_storage *partial_symtabs,\n+\t     struct objfile *objfile)\n {\n   legacy_psymtab *psymtab;\n \n-  psymtab = new legacy_psymtab (name, objfile);\n+  psymtab = new legacy_psymtab (name, partial_symtabs, objfile);\n \n   /* Keep a backpointer to the file's symbols.  */\n "
    },
    {
      "sha": "8717bd259e1f8b57fcd7b1f825cdc57ce939a55f",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 24,
      "deletions": 10,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -117,14 +117,18 @@ struct partial_symtab\n      partial symtab will also be installed using\n      psymtab_storage::install.  */\n \n-  partial_symtab (const char *filename, struct objfile *objfile)\n+  partial_symtab (const char *filename,\n+\t\t  psymtab_storage *partial_symtabs,\n+\t\t  struct objfile *objfile)\n     ATTRIBUTE_NONNULL (2) ATTRIBUTE_NONNULL (3);\n \n   /* Like the above, but also sets the initial text low and text high\n      from the ADDR argument, and sets the global- and\n      static-offsets.  */\n \n-  partial_symtab (const char *filename, struct objfile *objfile,\n+  partial_symtab (const char *filename,\n+\t\t  psymtab_storage *partial_symtabs,\n+\t\t  struct objfile *objfile,\n \t\t  CORE_ADDR addr)\n     ATTRIBUTE_NONNULL (2) ATTRIBUTE_NONNULL (3);\n \n@@ -236,6 +240,7 @@ struct partial_symtab\n \t\t    psymbol_placement where,\n \t\t    CORE_ADDR coreaddr,\n \t\t    enum language language,\n+\t\t    psymtab_storage *partial_symtabs,\n \t\t    struct objfile *objfile);\n \n   /* Add a symbol to this partial symbol table of OBJFILE.  The psymbol\n@@ -244,6 +249,7 @@ struct partial_symtab\n \n   void add_psymbol (const partial_symbol &psym,\n \t\t    psymbol_placement where,\n+\t\t    psymtab_storage *partial_symtabs,\n \t\t    struct objfile *objfile);\n \n \n@@ -361,14 +367,18 @@ struct partial_symtab\n    object.  */\n struct standard_psymtab : public partial_symtab\n {\n-  standard_psymtab (const char *filename, struct objfile *objfile)\n-    : partial_symtab (filename, objfile)\n+  standard_psymtab (const char *filename,\n+\t\t    psymtab_storage *partial_symtabs,\n+\t\t    struct objfile *objfile)\n+    : partial_symtab (filename, partial_symtabs, objfile)\n   {\n   }\n \n-  standard_psymtab (const char *filename, struct objfile *objfile,\n+  standard_psymtab (const char *filename,\n+\t\t    psymtab_storage *partial_symtabs,\n+\t\t    struct objfile *objfile,\n \t\t    CORE_ADDR addr)\n-    : partial_symtab (filename, objfile, addr)\n+    : partial_symtab (filename, partial_symtabs, objfile, addr)\n   {\n   }\n \n@@ -399,14 +409,18 @@ struct standard_psymtab : public partial_symtab\n \n struct legacy_psymtab : public standard_psymtab\n {\n-  legacy_psymtab (const char *filename, struct objfile *objfile)\n-    : standard_psymtab (filename, objfile)\n+  legacy_psymtab (const char *filename,\n+\t\t  psymtab_storage *partial_symtabs,\n+\t\t  struct objfile *objfile)\n+    : standard_psymtab (filename, partial_symtabs, objfile)\n   {\n   }\n \n-  legacy_psymtab (const char *filename, struct objfile *objfile,\n+  legacy_psymtab (const char *filename,\n+\t\t  psymtab_storage *partial_symtabs,\n+\t\t  struct objfile *objfile,\n \t\t  CORE_ADDR addr)\n-    : standard_psymtab (filename, objfile, addr)\n+    : standard_psymtab (filename, partial_symtabs, objfile, addr)\n   {\n   }\n "
    },
    {
      "sha": "e662ba16cd606ebd7f5f195d4dbfa67cd0abcbfd",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 16,
      "deletions": 23,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -1447,9 +1447,10 @@ make_psymbol_functions (const std::shared_ptr<psymtab_storage> &storage)\n    the end of the symbol list.  */\n \n partial_symtab::partial_symtab (const char *filename,\n+\t\t\t\tpsymtab_storage *partial_symtabs,\n \t\t\t\tstruct objfile *objfile,\n \t\t\t\tCORE_ADDR textlow)\n-  : partial_symtab (filename, objfile)\n+  : partial_symtab (filename, partial_symtabs, objfile)\n {\n   set_text_low (textlow);\n   set_text_high (raw_text_low ()); /* default */\n@@ -1514,33 +1515,21 @@ psymbol_bcache::compare (const void *addr1, const void *addr2, int length)\n \t  && sym1->ginfo.linkage_name () == sym2->ginfo.linkage_name ());\n }\n \n-/* Helper function, initialises partial symbol structure and stashes\n-   it into objfile's bcache.  Note that our caching mechanism will\n-   use all fields of struct partial_symbol to determine hash value of the\n-   structure.  In other words, having two symbols with the same name but\n-   different domain (or address) is possible and correct.  */\n-\n-static struct partial_symbol *\n-add_psymbol_to_bcache (const partial_symbol &psymbol, struct objfile *objfile,\n-\t\t       bool *added)\n-{\n-  /* Stash the partial symbol away in the cache.  */\n-  return ((struct partial_symbol *)\n-\t  objfile->partial_symtabs->psymbol_cache.insert\n-\t  (&psymbol, sizeof (struct partial_symbol), added));\n-}\n-\n /* See psympriv.h.  */\n \n void\n partial_symtab::add_psymbol (const partial_symbol &psymbol,\n \t\t\t     psymbol_placement where,\n+\t\t\t     psymtab_storage *partial_symtabs,\n \t\t\t     struct objfile *objfile)\n {\n   bool added;\n \n   /* Stash the partial symbol away in the cache.  */\n-  partial_symbol *psym = add_psymbol_to_bcache (psymbol, objfile, &added);\n+  partial_symbol *psym\n+    = ((struct partial_symbol *)\n+       partial_symtabs->psymbol_cache.insert\n+       (&psymbol, sizeof (struct partial_symbol), &added));\n \n   /* Do not duplicate global partial symbols.  */\n   if (where == psymbol_placement::GLOBAL && !added)\n@@ -1563,7 +1552,9 @@ partial_symtab::add_psymbol (gdb::string_view name, bool copy_name,\n \t\t\t     short section,\n \t\t\t     psymbol_placement where,\n \t\t\t     CORE_ADDR coreaddr,\n-\t\t\t     enum language language, struct objfile *objfile)\n+\t\t\t     enum language language,\n+\t\t\t     psymtab_storage *partial_symtabs,\n+\t\t\t     struct objfile *objfile)\n {\n   struct partial_symbol psymbol;\n   memset (&psymbol, 0, sizeof (psymbol));\n@@ -1572,20 +1563,22 @@ partial_symtab::add_psymbol (gdb::string_view name, bool copy_name,\n   psymbol.ginfo.set_section_index (section);\n   psymbol.domain = domain;\n   psymbol.aclass = theclass;\n-  psymbol.ginfo.set_language (language, objfile->partial_symtabs->obstack ());\n+  psymbol.ginfo.set_language (language, partial_symtabs->obstack ());\n   psymbol.ginfo.compute_and_set_names (name, copy_name, objfile->per_bfd);\n \n-  add_psymbol (psymbol, where, objfile);\n+  add_psymbol (psymbol, where, partial_symtabs, objfile);\n }\n \n /* See psympriv.h.  */\n \n-partial_symtab::partial_symtab (const char *filename_, struct objfile *objfile)\n+partial_symtab::partial_symtab (const char *filename_,\n+\t\t\t\tpsymtab_storage *partial_symtabs,\n+\t\t\t\tstruct objfile *objfile)\n   : searched_flag (PST_NOT_SEARCHED),\n     text_low_valid (0),\n     text_high_valid (0)\n {\n-  objfile->partial_symtabs->install_psymtab (this);\n+  partial_symtabs->install_psymtab (this);\n \n   filename = objfile->intern (filename_);\n "
    },
    {
      "sha": "f8d428127dad0b27f0a8d5396f8efd7573d5ee6e",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 25,
      "deletions": 14,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b249e470a82063605c3789f4b2d0378400423de/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b249e470a82063605c3789f4b2d0378400423de/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=7b249e470a82063605c3789f4b2d0378400423de",
      "patch": "@@ -1960,11 +1960,13 @@ static unsigned int first_fun_line_offset;\n    (normal).  */\n \n static legacy_psymtab *\n-xcoff_start_psymtab (struct objfile *objfile,\n+xcoff_start_psymtab (psymtab_storage *partial_symtabs,\n+\t\t     struct objfile *objfile,\n \t\t     const char *filename, int first_symnum)\n {\n   /* We fill in textlow later.  */\n-  legacy_psymtab *result = new legacy_psymtab (filename, objfile, 0);\n+  legacy_psymtab *result = new legacy_psymtab (filename, partial_symtabs,\n+\t\t\t\t\t       objfile, 0);\n \n   result->read_symtab_private =\n     XOBNEW (&objfile->objfile_obstack, struct symloc);\n@@ -2020,7 +2022,7 @@ xcoff_end_psymtab (struct objfile *objfile, psymtab_storage *partial_symtabs,\n   for (i = 0; i < num_includes; i++)\n     {\n       legacy_psymtab *subpst =\n-\tnew legacy_psymtab (include_list[i], objfile);\n+\tnew legacy_psymtab (include_list[i], partial_symtabs, objfile);\n \n       subpst->read_symtab_private = XOBNEW (&objfile->objfile_obstack, symloc);\n       ((struct symloc *) subpst->read_symtab_private)->first_symnum = 0;\n@@ -2244,7 +2246,7 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t    /* Give all psymtabs for this source file the same\n \t\t\t       name.  */\n \t\t\t    pst = xcoff_start_psymtab\n-\t\t\t      (objfile,\n+\t\t\t      (partial_symtabs, objfile,\n \t\t\t       filestring,\n \t\t\t       symnum_before);\n \t\t\t  }\n@@ -2427,7 +2429,7 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t    else\n \t      filestring = namestring;\n \n-\t    pst = xcoff_start_psymtab (objfile,\n+\t    pst = xcoff_start_psymtab (partial_symtabs, objfile,\n \t\t\t\t       filestring,\n \t\t\t\t       symnum_before);\n \t    last_csect_name = NULL;\n@@ -2586,7 +2588,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t  SECT_OFF_DATA (objfile),\n \t\t\t\t  psymbol_placement::STATIC,\n \t\t\t\t  symbol.n_value,\n-\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t  psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t\tcontinue;\n \n \t      case 'G':\n@@ -2598,7 +2601,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t  SECT_OFF_DATA (objfile),\n \t\t\t\t  psymbol_placement::GLOBAL,\n \t\t\t\t  symbol.n_value,\n-\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t  psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t\tcontinue;\n \n \t      case 'T':\n@@ -2616,15 +2620,17 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t\t\t\tp - namestring),\n \t\t\t\t      true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t      psymbol_placement::STATIC,\n-\t\t\t\t      0, psymtab_language, objfile);\n+\t\t\t\t      0, psymtab_language,\n+\t\t\t\t      partial_symtabs, objfile);\n \t\t    if (p[2] == 't')\n \t\t      {\n \t\t\t/* Also a typedef with the same name.  */\n \t\t\tpst->add_psymbol (gdb::string_view (namestring,\n \t\t\t\t\t\t\t    p - namestring),\n \t\t\t\t\t  true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\t  psymbol_placement::STATIC,\n-\t\t\t\t\t  0, psymtab_language, objfile);\n+\t\t\t\t\t  0, psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\tp += 1;\n \t\t      }\n \t\t  }\n@@ -2637,7 +2643,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t\t\t\tp - namestring),\n \t\t\t\t      true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t      psymbol_placement::STATIC,\n-\t\t\t\t      0, psymtab_language, objfile);\n+\t\t\t\t      0, psymtab_language,\n+\t\t\t\t      partial_symtabs, objfile);\n \t\t  }\n \t      check_enum:\n \t\t/* If this is an enumerated type, we need to\n@@ -2699,7 +2706,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\tpst->add_psymbol (gdb::string_view (p, q - p), true,\n \t\t\t\t\t  VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t\t  psymbol_placement::STATIC,\n-\t\t\t\t\t  0, psymtab_language, objfile);\n+\t\t\t\t\t  0, psymtab_language,\n+\t\t\t\t\t  partial_symtabs, objfile);\n \t\t\t/* Point past the name.  */\n \t\t\tp = q;\n \t\t\t/* Skip over the value.  */\n@@ -2718,7 +2726,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t\t\t    p - namestring),\n \t\t\t\t  true, VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t  psymbol_placement::STATIC,\n-\t\t\t\t  0, psymtab_language, objfile);\n+\t\t\t\t  0, psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t\tcontinue;\n \n \t      case 'f':\n@@ -2738,7 +2747,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t  SECT_OFF_TEXT (objfile),\n \t\t\t\t  psymbol_placement::STATIC,\n \t\t\t\t  symbol.n_value,\n-\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t  psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t\tcontinue;\n \n \t\t/* Global functions were ignored here, but now they\n@@ -2769,7 +2779,8 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t\t  SECT_OFF_TEXT (objfile),\n \t\t\t\t  psymbol_placement::GLOBAL,\n \t\t\t\t  symbol.n_value,\n-\t\t\t\t  psymtab_language, objfile);\n+\t\t\t\t  psymtab_language,\n+\t\t\t\t  partial_symtabs, objfile);\n \t\tcontinue;\n \n \t\t/* Two things show up here (hopefully); static symbols of"
    }
  ]
}