{
  "sha": "3112ed9799124edf4d1f9c903da0d59f5a4ca102",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzExMmVkOTc5OTEyNGVkZjRkMWY5YzkwM2RhMGQ1OWY1YTRjYTEwMg==",
  "commit": {
    "author": {
      "name": "Nitika Achra",
      "email": "Nitika.Achra@amd.com",
      "date": "2020-01-16T16:51:06Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-16T16:51:19Z"
    },
    "message": "Support for DWARF5 location lists entries\n\nThis patch handles DW_LLE_base_addressx, DW_LLE_startx_length and\nDW_LLE_start_length.\n\nTested by running the testsuite before and after the patch and there is\nno increase in the number of test cases that fails. Tested with both\n-gdwarf-4 and -gdwarf-5 flags. Also tested -gslit-dwarf along with\n-gdwarf-4 as well as -gdwarf5 flags.\n\nThis is an effort to support DWARF5 in gdb.\n\ngdb/ChangeLog:\n\n\t* dwarf2loc.c (decode_debug_loclists_addresses): Handle\n\tDW_LLE_base_addressx, DW_LLE_startx_length, DW_LLE_start_length.",
    "tree": {
      "sha": "63fc6bd2ce5133d777ac8bf31d46778d3c862d56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/63fc6bd2ce5133d777ac8bf31d46778d3c862d56"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3112ed9799124edf4d1f9c903da0d59f5a4ca102",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3112ed9799124edf4d1f9c903da0d59f5a4ca102",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3112ed9799124edf4d1f9c903da0d59f5a4ca102",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3112ed9799124edf4d1f9c903da0d59f5a4ca102/comments",
  "author": null,
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2da2eaf4ce299c84c5a1f1bc6f7944266cb36d6e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2da2eaf4ce299c84c5a1f1bc6f7944266cb36d6e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2da2eaf4ce299c84c5a1f1bc6f7944266cb36d6e"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 44,
    "deletions": 0
  },
  "files": [
    {
      "sha": "5513bea8182f18d33e0bac03ebdb8821416b968f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3112ed9799124edf4d1f9c903da0d59f5a4ca102/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3112ed9799124edf4d1f9c903da0d59f5a4ca102/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3112ed9799124edf4d1f9c903da0d59f5a4ca102",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-16  Nitika Achra  <Nitika.Achra@amd.com>\n+\n+\t* dwarf2loc.c (decode_debug_loclists_addresses): Handle\n+\tDW_LLE_base_addressx, DW_LLE_startx_length, DW_LLE_start_length.\n+\n 2020-01-15  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* infcmd.c (post_create_inferior): Use get_thread_regcache"
    },
    {
      "sha": "405b239ed421f17dc0621acf174f7631bd7e5e42",
      "filename": "gdb/dwarf2loc.c",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3112ed9799124edf4d1f9c903da0d59f5a4ca102/gdb/dwarf2loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3112ed9799124edf4d1f9c903da0d59f5a4ca102/gdb/dwarf2loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2loc.c?ref=3112ed9799124edf4d1f9c903da0d59f5a4ca102",
      "patch": "@@ -173,6 +173,41 @@ decode_debug_loclists_addresses (struct dwarf2_per_cu_data *per_cu,\n \n   switch (*loc_ptr++)\n     {\n+    case DW_LLE_base_addressx:\n+      *low = 0;\n+      loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n+      if (loc_ptr == NULL)\n+\t return DEBUG_LOC_BUFFER_OVERFLOW;\n+      *high = dwarf2_read_addr_index (per_cu, u64);\n+      *new_ptr = loc_ptr;\n+      return DEBUG_LOC_BASE_ADDRESS;\n+    case DW_LLE_startx_length:\n+      loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n+      if (loc_ptr == NULL)\n+\t return DEBUG_LOC_BUFFER_OVERFLOW;\n+      *low = dwarf2_read_addr_index (per_cu, u64);\n+      *high = *low;\n+      loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n+      if (loc_ptr == NULL)\n+\t return DEBUG_LOC_BUFFER_OVERFLOW;\n+      *high += u64;\n+      *new_ptr = loc_ptr;\n+      return DEBUG_LOC_START_LENGTH;\n+    case DW_LLE_start_length:\n+      if (buf_end - loc_ptr < addr_size)\n+\t return DEBUG_LOC_BUFFER_OVERFLOW;\n+      if (signed_addr_p)\n+\t *low = extract_signed_integer (loc_ptr, addr_size, byte_order);\n+      else\n+\t *low = extract_unsigned_integer (loc_ptr, addr_size, byte_order);\n+      loc_ptr += addr_size;\n+      *high = *low;\n+      loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n+      if (loc_ptr == NULL)\n+\t return DEBUG_LOC_BUFFER_OVERFLOW;\n+      *high += u64;\n+      *new_ptr = loc_ptr;\n+      return DEBUG_LOC_START_LENGTH;\n     case DW_LLE_end_of_list:\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_END_OF_LIST;\n@@ -197,6 +232,10 @@ decode_debug_loclists_addresses (struct dwarf2_per_cu_data *per_cu,\n       *high = u64;\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_START_END;\n+    /* Following cases are not supported yet.  */\n+    case DW_LLE_startx_endx:\n+    case DW_LLE_start_end:\n+    case DW_LLE_default_location:\n     default:\n       return DEBUG_LOC_INVALID_ENTRY;\n     }"
    }
  ]
}