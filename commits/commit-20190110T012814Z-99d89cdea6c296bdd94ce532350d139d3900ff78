{
  "sha": "99d89cdea6c296bdd94ce532350d139d3900ff78",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTlkODljZGVhNmMyOTZiZGQ5NGNlNTMyMzUwZDEzOWQzOTAwZmY3OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-11-23T18:58:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T01:28:14Z"
    },
    "message": "Remove ALL_PSPACE_OBJFILES\n\nThis removes the ALL_PSPACE_OBJFILES macro in favor of ranged for\nloops.\n\ngdb/ChangeLog\n2019-01-09  Tom Tromey  <tom@tromey.com>\n\n\t* probe.c (parse_probes_in_pspace): Use all_objfiles.\n\t* guile/scm-progspace.c (gdbscm_progspace_objfiles): Use\n\tall_objfiles.\n\t* objfiles.h (ALL_PSPACE_OBJFILES): Remove.\n\t* symmisc.c (print_symbol_bcache_statistics)\n\t(print_objfile_statistics, maintenance_print_objfiles)\n\t(maintenance_info_symtabs, maintenance_check_symtabs)\n\t(maintenance_expand_symtabs, maintenance_info_line_tables): Use\n\tall_objfiles.\n\t* source.c (forget_cached_source_info): Use all_objfiles.\n\t* symfile-debug.c (set_debug_symfile): Use all_objfiles.\n\t* elfread.c (elf_gnu_ifunc_resolve_by_cache)\n\t(elf_gnu_ifunc_resolve_by_got): Use all_objfiles.\n\t* objfiles.c (update_section_map): Use all_objfiles.\n\t(shared_objfile_contains_address_p): Likewise.\n\t* psymtab.c (maintenance_info_psymtabs): Use all_objfiles.\n\t* python/py-progspace.c (pspy_get_objfiles): Use all_objfiles.",
    "tree": {
      "sha": "b7f8d547f554f4925fec808d4e6cfd048b09c254",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7f8d547f554f4925fec808d4e6cfd048b09c254"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/99d89cdea6c296bdd94ce532350d139d3900ff78",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99d89cdea6c296bdd94ce532350d139d3900ff78",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/99d89cdea6c296bdd94ce532350d139d3900ff78",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99d89cdea6c296bdd94ce532350d139d3900ff78/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "217083254a26b9e1dc42c43f573054740988c2cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/217083254a26b9e1dc42c43f573054740988c2cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/217083254a26b9e1dc42c43f573054740988c2cf"
    }
  ],
  "stats": {
    "total": 717,
    "additions": 359,
    "deletions": 358
  },
  "files": [
    {
      "sha": "d7d1876415866d140a8055b6049064f1ac366aef",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -1,3 +1,23 @@\n+2019-01-09  Tom Tromey  <tom@tromey.com>\n+\n+\t* probe.c (parse_probes_in_pspace): Use all_objfiles.\n+\t* guile/scm-progspace.c (gdbscm_progspace_objfiles): Use\n+\tall_objfiles.\n+\t* objfiles.h (ALL_PSPACE_OBJFILES): Remove.\n+\t* symmisc.c (print_symbol_bcache_statistics)\n+\t(print_objfile_statistics, maintenance_print_objfiles)\n+\t(maintenance_info_symtabs, maintenance_check_symtabs)\n+\t(maintenance_expand_symtabs, maintenance_info_line_tables): Use\n+\tall_objfiles.\n+\t* source.c (forget_cached_source_info): Use all_objfiles.\n+\t* symfile-debug.c (set_debug_symfile): Use all_objfiles.\n+\t* elfread.c (elf_gnu_ifunc_resolve_by_cache)\n+\t(elf_gnu_ifunc_resolve_by_got): Use all_objfiles.\n+\t* objfiles.c (update_section_map): Use all_objfiles.\n+\t(shared_objfile_contains_address_p): Likewise.\n+\t* psymtab.c (maintenance_info_psymtabs): Use all_objfiles.\n+\t* python/py-progspace.c (pspy_get_objfiles): Use all_objfiles.\n+\n 2019-01-09  Tom Tromey  <tom@tromey.com>\n \n \t* common/next-iterator.h: New file."
    },
    {
      "sha": "9d35febc2f97ec79594442c4f8ab8d2ac9dfb11c",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -758,9 +758,7 @@ elf_gnu_ifunc_record_cache (const char *name, CORE_ADDR addr)\n static int\n elf_gnu_ifunc_resolve_by_cache (const char *name, CORE_ADDR *addr_p)\n {\n-  struct objfile *objfile;\n-\n-  ALL_PSPACE_OBJFILES (current_program_space, objfile)\n+  for (objfile *objfile : all_objfiles (current_program_space))\n     {\n       htab_t htab;\n       struct elf_gnu_ifunc_cache *entry_p;\n@@ -800,13 +798,12 @@ static int\n elf_gnu_ifunc_resolve_by_got (const char *name, CORE_ADDR *addr_p)\n {\n   char *name_got_plt;\n-  struct objfile *objfile;\n   const size_t got_suffix_len = strlen (SYMBOL_GOT_PLT_SUFFIX);\n \n   name_got_plt = (char *) alloca (strlen (name) + got_suffix_len + 1);\n   sprintf (name_got_plt, \"%s\" SYMBOL_GOT_PLT_SUFFIX, name);\n \n-  ALL_PSPACE_OBJFILES (current_program_space, objfile)\n+  for (objfile *objfile : all_objfiles (current_program_space))\n     {\n       bfd *obfd = objfile->obfd;\n       struct gdbarch *gdbarch = get_objfile_arch (objfile);"
    },
    {
      "sha": "9fc650c67c74a0441e93466bddd8d52e784931f5",
      "filename": "gdb/guile/scm-progspace.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/guile/scm-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/guile/scm-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-progspace.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -285,20 +285,19 @@ gdbscm_progspace_objfiles (SCM self)\n {\n   pspace_smob *p_smob\n     = psscm_get_valid_pspace_smob_arg_unsafe (self, SCM_ARG1, FUNC_NAME);\n-  struct objfile *objfile;\n   SCM result;\n \n   result = SCM_EOL;\n \n-  ALL_PSPACE_OBJFILES (p_smob->pspace, objfile)\n-  {\n-    if (objfile->separate_debug_objfile_backlink == NULL)\n-      {\n-\tSCM item = ofscm_scm_from_objfile (objfile);\n+  for (objfile *objfile : all_objfiles (p_smob->pspace))\n+    {\n+      if (objfile->separate_debug_objfile_backlink == NULL)\n+\t{\n+\t  SCM item = ofscm_scm_from_objfile (objfile);\n \n-\tresult = scm_cons (item, result);\n-      }\n-  }\n+\t  result = scm_cons (item, result);\n+\t}\n+    }\n \n   /* We don't really have to return the list in the same order as recorded\n      internally, but for consistency we do.  We still advertise that one"
    },
    {
      "sha": "f8a0dc27dbfc700ec39f597ddfcd08d5106b0376",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -1322,7 +1322,6 @@ update_section_map (struct program_space *pspace,\n   struct objfile_pspace_info *pspace_info;\n   int alloc_size, map_size, i;\n   struct obj_section *s, **map;\n-  struct objfile *objfile;\n \n   pspace_info = get_objfile_pspace_data (pspace);\n   gdb_assert (pspace_info->section_map_dirty != 0\n@@ -1332,7 +1331,7 @@ update_section_map (struct program_space *pspace,\n   xfree (map);\n \n   alloc_size = 0;\n-  ALL_PSPACE_OBJFILES (pspace, objfile)\n+  for (objfile *objfile : all_objfiles (pspace))\n     ALL_OBJFILE_OSECTIONS (objfile, s)\n       if (insert_section_p (objfile->obfd, s->the_bfd_section))\n \talloc_size += 1;\n@@ -1348,7 +1347,7 @@ update_section_map (struct program_space *pspace,\n   map = XNEWVEC (struct obj_section *, alloc_size);\n \n   i = 0;\n-  ALL_PSPACE_OBJFILES (pspace, objfile)\n+  for (objfile *objfile : all_objfiles (pspace))\n     ALL_OBJFILE_OSECTIONS (objfile, s)\n       if (insert_section_p (objfile->obfd, s->the_bfd_section))\n \tmap[i++] = s;\n@@ -1492,9 +1491,7 @@ int\n shared_objfile_contains_address_p (struct program_space *pspace,\n \t\t\t\t   CORE_ADDR address)\n {\n-  struct objfile *objfile;\n-\n-  ALL_PSPACE_OBJFILES (pspace, objfile)\n+  for (objfile *objfile : all_objfiles (pspace))\n     {\n       if ((objfile->flags & OBJF_SHARED) != 0\n \t  && is_addr_in_objfile (address, objfile))"
    },
    {
      "sha": "512869f214e91c243b1b3a255149c6a26b080859",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -586,11 +586,6 @@ class all_objfiles : public next_adapter<struct objfile>\n    ALL_OBJFILES_SAFE works even if you delete the objfile during the\n    traversal.  */\n \n-/* Traverse all object files in program space SS.  */\n-\n-#define ALL_PSPACE_OBJFILES(ss, obj)\t\t\t\t\t\\\n-  for ((obj) = ss->objfiles; (obj) != NULL; (obj) = (obj)->next)\n-\n #define ALL_OBJFILES(obj)\t\t\t    \\\n   for ((obj) = current_program_space->objfiles; \\\n        (obj) != NULL;\t\t\t\t    \\"
    },
    {
      "sha": "865c13f95b1722ffef882660c9aff58db101f582",
      "filename": "gdb/probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -73,9 +73,7 @@ parse_probes_in_pspace (const static_probe_ops *spops,\n \t\t\tconst char *name,\n \t\t\tstd::vector<symtab_and_line> *result)\n {\n-  struct objfile *objfile;\n-\n-  ALL_PSPACE_OBJFILES (search_pspace, objfile)\n+  for (objfile *objfile : all_objfiles (search_pspace))\n     {\n       if (!objfile->sf || !objfile->sf->sym_probe_fns)\n \tcontinue;"
    },
    {
      "sha": "804558e19b9a086ea195002b370ae89ae0174e14",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 98,
      "deletions": 92,
      "changes": 190,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -2031,106 +2031,112 @@ static void\n maintenance_info_psymtabs (const char *regexp, int from_tty)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   if (regexp)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n-      struct partial_symtab *psymtab;\n-\n-      /* We don't want to print anything for this objfile until we\n-         actually find a symtab whose name matches.  */\n-      int printed_objfile_start = 0;\n-\n-      ALL_OBJFILE_PSYMTABS_REQUIRED (objfile, psymtab)\n-\t{\n-\t  QUIT;\n-\n-\t  if (! regexp\n-\t      || re_exec (psymtab->filename))\n-\t    {\n-\t      if (! printed_objfile_start)\n-\t\t{\n-\t\t  printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t  wrap_here (\"  \");\n-\t\t  printf_filtered (\"((struct objfile *) %s)\\n\",\n-\t\t\t\t   host_address_to_string (objfile));\n-\t\t  printed_objfile_start = 1;\n-\t\t}\n-\n-\t      printf_filtered (\"  { psymtab %s \", psymtab->filename);\n-\t      wrap_here (\"    \");\n-\t      printf_filtered (\"((struct partial_symtab *) %s)\\n\",\n-\t\t\t       host_address_to_string (psymtab));\n-\n-\t      printf_filtered (\"    readin %s\\n\",\n-\t\t\t       psymtab->readin ? \"yes\" : \"no\");\n-\t      printf_filtered (\"    fullname %s\\n\",\n-\t\t\t       psymtab->fullname\n-\t\t\t       ? psymtab->fullname : \"(null)\");\n-\t      printf_filtered (\"    text addresses \");\n-\t      fputs_filtered (paddress (gdbarch, psymtab->text_low (objfile)),\n-\t\t\t      gdb_stdout);\n-\t      printf_filtered (\" -- \");\n-\t      fputs_filtered (paddress (gdbarch, psymtab->text_high (objfile)),\n-\t\t\t      gdb_stdout);\n-\t      printf_filtered (\"\\n\");\n-\t      printf_filtered (\"    psymtabs_addrmap_supported %s\\n\",\n-\t\t\t       (psymtab->psymtabs_addrmap_supported\n-\t\t\t\t? \"yes\" : \"no\"));\n-\t      printf_filtered (\"    globals \");\n-\t      if (psymtab->n_global_syms)\n-\t\t{\n-\t\t  auto p = &objfile->global_psymbols[psymtab->globals_offset];\n-\n-\t\t  printf_filtered (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n-\t\t\t\t   host_address_to_string (p),\n-\t\t\t\t   psymtab->n_global_syms);\n-\t\t}\n-\t      else\n-\t\tprintf_filtered (\"(none)\\n\");\n-\t      printf_filtered (\"    statics \");\n-\t      if (psymtab->n_static_syms)\n-\t\t{\n-\t\t  auto p = &objfile->static_psymbols[psymtab->statics_offset];\n-\n-\t\t  printf_filtered (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n-\t\t\t\t   host_address_to_string (p),\n-\t\t\t\t   psymtab->n_static_syms);\n-\t\t}\n-\t      else\n-\t\tprintf_filtered (\"(none)\\n\");\n-\t      printf_filtered (\"    dependencies \");\n-\t      if (psymtab->number_of_dependencies)\n-\t\t{\n-\t\t  int i;\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tstruct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\tstruct partial_symtab *psymtab;\n \n-\t\t  printf_filtered (\"{\\n\");\n-\t\t  for (i = 0; i < psymtab->number_of_dependencies; i++)\n-\t\t    {\n-\t\t      struct partial_symtab *dep = psymtab->dependencies[i];\n+\t/* We don't want to print anything for this objfile until we\n+\t   actually find a symtab whose name matches.  */\n+\tint printed_objfile_start = 0;\n \n-\t\t      /* Note the string concatenation there --- no comma.  */\n-\t\t      printf_filtered (\"      psymtab %s \"\n-\t\t\t\t       \"((struct partial_symtab *) %s)\\n\",\n-\t\t\t\t       dep->filename,\n-\t\t\t\t       host_address_to_string (dep));\n-\t\t    }\n-\t\t  printf_filtered (\"    }\\n\");\n-\t\t}\n-\t      else\n-\t\tprintf_filtered (\"(none)\\n\");\n-\t      printf_filtered (\"  }\\n\");\n-\t    }\n-\t}\n+\tALL_OBJFILE_PSYMTABS_REQUIRED (objfile, psymtab)\n+\t  {\n+\t    QUIT;\n+\n+\t    if (! regexp\n+\t\t|| re_exec (psymtab->filename))\n+\t      {\n+\t\tif (! printed_objfile_start)\n+\t\t  {\n+\t\t    printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n+\t\t    wrap_here (\"  \");\n+\t\t    printf_filtered (\"((struct objfile *) %s)\\n\",\n+\t\t\t\t     host_address_to_string (objfile));\n+\t\t    printed_objfile_start = 1;\n+\t\t  }\n+\n+\t\tprintf_filtered (\"  { psymtab %s \", psymtab->filename);\n+\t\twrap_here (\"    \");\n+\t\tprintf_filtered (\"((struct partial_symtab *) %s)\\n\",\n+\t\t\t\t host_address_to_string (psymtab));\n+\n+\t\tprintf_filtered (\"    readin %s\\n\",\n+\t\t\t\t psymtab->readin ? \"yes\" : \"no\");\n+\t\tprintf_filtered (\"    fullname %s\\n\",\n+\t\t\t\t psymtab->fullname\n+\t\t\t\t ? psymtab->fullname : \"(null)\");\n+\t\tprintf_filtered (\"    text addresses \");\n+\t\tfputs_filtered (paddress (gdbarch,\n+\t\t\t\t\t  psymtab->text_low (objfile)),\n+\t\t\t\tgdb_stdout);\n+\t\tprintf_filtered (\" -- \");\n+\t\tfputs_filtered (paddress (gdbarch,\n+\t\t\t\t\t  psymtab->text_high (objfile)),\n+\t\t\t\tgdb_stdout);\n+\t\tprintf_filtered (\"\\n\");\n+\t\tprintf_filtered (\"    psymtabs_addrmap_supported %s\\n\",\n+\t\t\t\t (psymtab->psymtabs_addrmap_supported\n+\t\t\t\t  ? \"yes\" : \"no\"));\n+\t\tprintf_filtered (\"    globals \");\n+\t\tif (psymtab->n_global_syms)\n+\t\t  {\n+\t\t    auto p\n+\t\t      = &objfile->global_psymbols[psymtab->globals_offset];\n+\n+\t\t    printf_filtered\n+\t\t      (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n+\t\t       host_address_to_string (p),\n+\t\t       psymtab->n_global_syms);\n+\t\t  }\n+\t\telse\n+\t\t  printf_filtered (\"(none)\\n\");\n+\t\tprintf_filtered (\"    statics \");\n+\t\tif (psymtab->n_static_syms)\n+\t\t  {\n+\t\t    auto p\n+\t\t      = &objfile->static_psymbols[psymtab->statics_offset];\n+\n+\t\t    printf_filtered\n+\t\t      (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n+\t\t       host_address_to_string (p),\n+\t\t       psymtab->n_static_syms);\n+\t\t  }\n+\t\telse\n+\t\t  printf_filtered (\"(none)\\n\");\n+\t\tprintf_filtered (\"    dependencies \");\n+\t\tif (psymtab->number_of_dependencies)\n+\t\t  {\n+\t\t    int i;\n+\n+\t\t    printf_filtered (\"{\\n\");\n+\t\t    for (i = 0; i < psymtab->number_of_dependencies; i++)\n+\t\t      {\n+\t\t\tstruct partial_symtab *dep = psymtab->dependencies[i];\n+\n+\t\t\t/* Note the string concatenation there --- no\n+\t\t\t   comma.  */\n+\t\t\tprintf_filtered (\"      psymtab %s \"\n+\t\t\t\t\t \"((struct partial_symtab *) %s)\\n\",\n+\t\t\t\t\t dep->filename,\n+\t\t\t\t\t host_address_to_string (dep));\n+\t\t      }\n+\t\t    printf_filtered (\"    }\\n\");\n+\t\t  }\n+\t\telse\n+\t\t  printf_filtered (\"(none)\\n\");\n+\t\tprintf_filtered (\"  }\\n\");\n+\t      }\n+\t  }\n \n-      if (printed_objfile_start)\n-        printf_filtered (\"}\\n\");\n-    }\n+\tif (printed_objfile_start)\n+\t  printf_filtered (\"}\\n\");\n+      }\n }\n \n /* Check consistency of currently expanded psymtabs vs symtabs.  */"
    },
    {
      "sha": "a17ef69df78a2810a815410d38e3c9024c4ea0c4",
      "filename": "gdb/python/py-progspace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/python/py-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/python/py-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-progspace.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -333,9 +333,7 @@ pspy_get_objfiles (PyObject *self_, PyObject *args)\n \n   if (self->pspace != NULL)\n     {\n-      struct objfile *objf;\n-\n-      ALL_PSPACE_OBJFILES (self->pspace, objf)\n+      for (objfile *objf : all_objfiles (self->pspace))\n \t{\n \t  gdbpy_ref<> item = objfile_to_objfile_object (objf);\n "
    },
    {
      "sha": "85e15c3934b38820f0dfa36dea3f3aa5419173cf",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -377,13 +377,12 @@ void\n forget_cached_source_info (void)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      forget_cached_source_info_for_objfile (objfile);\n-    }\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tforget_cached_source_info_for_objfile (objfile);\n+      }\n \n   g_source_cache.clear ();\n   last_source_visited = NULL;"
    },
    {
      "sha": "b71fa8b0010a3b70ba98852cf7ae17e35967d1f4",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -660,22 +660,21 @@ static void\n set_debug_symfile (const char *args, int from_tty, struct cmd_list_element *c)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      if (debug_symfile)\n-\t{\n-\t  if (!symfile_debug_installed (objfile))\n-\t    install_symfile_debug_logging (objfile);\n-\t}\n-      else\n-\t{\n-\t  if (symfile_debug_installed (objfile))\n-\t    uninstall_symfile_debug_logging (objfile);\n-\t}\n-    }\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tif (debug_symfile)\n+\t  {\n+\t    if (!symfile_debug_installed (objfile))\n+\t      install_symfile_debug_logging (objfile);\n+\t  }\n+\telse\n+\t  {\n+\t    if (symfile_debug_installed (objfile))\n+\t      uninstall_symfile_debug_logging (objfile);\n+\t  }\n+      }\n }\n \n static void"
    },
    {
      "sha": "24ecea39daba3234851db000396c4cf6d1bc9dca",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 209,
      "deletions": 216,
      "changes": 425,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99d89cdea6c296bdd94ce532350d139d3900ff78/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=99d89cdea6c296bdd94ce532350d139d3900ff78",
      "patch": "@@ -62,86 +62,84 @@ void\n print_symbol_bcache_statistics (void)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-  {\n-    QUIT;\n-    printf_filtered (_(\"Byte cache statistics for '%s':\\n\"),\n-\t\t     objfile_name (objfile));\n-    print_bcache_statistics (psymbol_bcache_get_bcache (objfile->psymbol_cache),\n-                             \"partial symbol cache\");\n-    print_bcache_statistics (objfile->per_bfd->macro_cache,\n-\t\t\t     \"preprocessor macro cache\");\n-    print_bcache_statistics (objfile->per_bfd->filename_cache,\n-\t\t\t     \"file name cache\");\n-  }\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tQUIT;\n+\tprintf_filtered (_(\"Byte cache statistics for '%s':\\n\"),\n+\t\t\t objfile_name (objfile));\n+\tprint_bcache_statistics (psymbol_bcache_get_bcache (objfile->psymbol_cache),\n+\t\t\t\t \"partial symbol cache\");\n+\tprint_bcache_statistics (objfile->per_bfd->macro_cache,\n+\t\t\t\t \"preprocessor macro cache\");\n+\tprint_bcache_statistics (objfile->per_bfd->filename_cache,\n+\t\t\t\t \"file name cache\");\n+      }\n }\n \n void\n print_objfile_statistics (void)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n   struct compunit_symtab *cu;\n   struct symtab *s;\n   int i, linetables, blockvectors;\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-  {\n-    QUIT;\n-    printf_filtered (_(\"Statistics for '%s':\\n\"), objfile_name (objfile));\n-    if (OBJSTAT (objfile, n_stabs) > 0)\n-      printf_filtered (_(\"  Number of \\\"stab\\\" symbols read: %d\\n\"),\n-\t\t       OBJSTAT (objfile, n_stabs));\n-    if (objfile->per_bfd->n_minsyms > 0)\n-      printf_filtered (_(\"  Number of \\\"minimal\\\" symbols read: %d\\n\"),\n-\t\t       objfile->per_bfd->n_minsyms);\n-    if (OBJSTAT (objfile, n_psyms) > 0)\n-      printf_filtered (_(\"  Number of \\\"partial\\\" symbols read: %d\\n\"),\n-\t\t       OBJSTAT (objfile, n_psyms));\n-    if (OBJSTAT (objfile, n_syms) > 0)\n-      printf_filtered (_(\"  Number of \\\"full\\\" symbols read: %d\\n\"),\n-\t\t       OBJSTAT (objfile, n_syms));\n-    if (OBJSTAT (objfile, n_types) > 0)\n-      printf_filtered (_(\"  Number of \\\"types\\\" defined: %d\\n\"),\n-\t\t       OBJSTAT (objfile, n_types));\n-    if (objfile->sf)\n-      objfile->sf->qf->print_stats (objfile);\n-    i = linetables = blockvectors = 0;\n-    ALL_OBJFILE_FILETABS (objfile, cu, s)\n-      {\n-        i++;\n-        if (SYMTAB_LINETABLE (s) != NULL)\n-          linetables++;\n-      }\n-    ALL_OBJFILE_COMPUNITS (objfile, cu)\n-      blockvectors++;\n-    printf_filtered (_(\"  Number of symbol tables: %d\\n\"), i);\n-    printf_filtered (_(\"  Number of symbol tables with line tables: %d\\n\"),\n-                     linetables);\n-    printf_filtered (_(\"  Number of symbol tables with blockvectors: %d\\n\"),\n-                     blockvectors);\n-\n-    if (OBJSTAT (objfile, sz_strtab) > 0)\n-      printf_filtered (_(\"  Space used by string tables: %d\\n\"),\n-\t\t       OBJSTAT (objfile, sz_strtab));\n-    printf_filtered (_(\"  Total memory used for objfile obstack: %s\\n\"),\n-\t\t     pulongest (obstack_memory_used (&objfile\n-\t\t\t\t\t\t     ->objfile_obstack)));\n-    printf_filtered (_(\"  Total memory used for BFD obstack: %s\\n\"),\n-\t\t     pulongest (obstack_memory_used (&objfile->per_bfd\n-\t\t\t\t\t\t     ->storage_obstack)));\n-    printf_filtered (_(\"  Total memory used for psymbol cache: %d\\n\"),\n-\t\t     bcache_memory_used (psymbol_bcache_get_bcache\n-\t\t                          (objfile->psymbol_cache)));\n-    printf_filtered (_(\"  Total memory used for macro cache: %d\\n\"),\n-\t\t     bcache_memory_used (objfile->per_bfd->macro_cache));\n-    printf_filtered (_(\"  Total memory used for file name cache: %d\\n\"),\n-\t\t     bcache_memory_used (objfile->per_bfd->filename_cache));\n-  }\n+  for (objfile *objfile : all_objfiles (pspace))\n+    {\n+      QUIT;\n+      printf_filtered (_(\"Statistics for '%s':\\n\"), objfile_name (objfile));\n+      if (OBJSTAT (objfile, n_stabs) > 0)\n+\tprintf_filtered (_(\"  Number of \\\"stab\\\" symbols read: %d\\n\"),\n+\t\t\t OBJSTAT (objfile, n_stabs));\n+      if (objfile->per_bfd->n_minsyms > 0)\n+\tprintf_filtered (_(\"  Number of \\\"minimal\\\" symbols read: %d\\n\"),\n+\t\t\t objfile->per_bfd->n_minsyms);\n+      if (OBJSTAT (objfile, n_psyms) > 0)\n+\tprintf_filtered (_(\"  Number of \\\"partial\\\" symbols read: %d\\n\"),\n+\t\t\t OBJSTAT (objfile, n_psyms));\n+      if (OBJSTAT (objfile, n_syms) > 0)\n+\tprintf_filtered (_(\"  Number of \\\"full\\\" symbols read: %d\\n\"),\n+\t\t\t OBJSTAT (objfile, n_syms));\n+      if (OBJSTAT (objfile, n_types) > 0)\n+\tprintf_filtered (_(\"  Number of \\\"types\\\" defined: %d\\n\"),\n+\t\t\t OBJSTAT (objfile, n_types));\n+      if (objfile->sf)\n+\tobjfile->sf->qf->print_stats (objfile);\n+      i = linetables = blockvectors = 0;\n+      ALL_OBJFILE_FILETABS (objfile, cu, s)\n+\t{\n+\t  i++;\n+\t  if (SYMTAB_LINETABLE (s) != NULL)\n+\t    linetables++;\n+\t}\n+      ALL_OBJFILE_COMPUNITS (objfile, cu)\n+\tblockvectors++;\n+      printf_filtered (_(\"  Number of symbol tables: %d\\n\"), i);\n+      printf_filtered (_(\"  Number of symbol tables with line tables: %d\\n\"),\n+\t\t       linetables);\n+      printf_filtered (_(\"  Number of symbol tables with blockvectors: %d\\n\"),\n+\t\t       blockvectors);\n+\n+      if (OBJSTAT (objfile, sz_strtab) > 0)\n+\tprintf_filtered (_(\"  Space used by string tables: %d\\n\"),\n+\t\t\t OBJSTAT (objfile, sz_strtab));\n+      printf_filtered (_(\"  Total memory used for objfile obstack: %s\\n\"),\n+\t\t       pulongest (obstack_memory_used (&objfile\n+\t\t\t\t\t\t       ->objfile_obstack)));\n+      printf_filtered (_(\"  Total memory used for BFD obstack: %s\\n\"),\n+\t\t       pulongest (obstack_memory_used (&objfile->per_bfd\n+\t\t\t\t\t\t       ->storage_obstack)));\n+      printf_filtered (_(\"  Total memory used for psymbol cache: %d\\n\"),\n+\t\t       bcache_memory_used (psymbol_bcache_get_bcache\n+\t\t\t\t\t   (objfile->psymbol_cache)));\n+      printf_filtered (_(\"  Total memory used for macro cache: %d\\n\"),\n+\t\t       bcache_memory_used (objfile->per_bfd->macro_cache));\n+      printf_filtered (_(\"  Total memory used for file name cache: %d\\n\"),\n+\t\t       bcache_memory_used (objfile->per_bfd->filename_cache));\n+    }\n }\n \n static void\n@@ -749,15 +747,14 @@ static void\n maintenance_print_objfiles (const char *regexp, int from_tty)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   dont_repeat ();\n \n   if (regexp)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n+    for (objfile *objfile : all_objfiles (pspace))\n       {\n \tQUIT;\n \tif (! regexp\n@@ -772,86 +769,85 @@ static void\n maintenance_info_symtabs (const char *regexp, int from_tty)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   dont_repeat ();\n \n   if (regexp)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      struct compunit_symtab *cust;\n-      struct symtab *symtab;\n-\n-      /* We don't want to print anything for this objfile until we\n-         actually find a symtab whose name matches.  */\n-      int printed_objfile_start = 0;\n-\n-      ALL_OBJFILE_COMPUNITS (objfile, cust)\n-\t{\n-\t  int printed_compunit_symtab_start = 0;\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tstruct compunit_symtab *cust;\n+\tstruct symtab *symtab;\n \n-\t  ALL_COMPUNIT_FILETABS (cust, symtab)\n-\t    {\n-\t      QUIT;\n+\t/* We don't want to print anything for this objfile until we\n+\t   actually find a symtab whose name matches.  */\n+\tint printed_objfile_start = 0;\n \n-\t      if (! regexp\n-\t\t  || re_exec (symtab_to_filename_for_display (symtab)))\n-\t\t{\n-\t\t  if (! printed_objfile_start)\n-\t\t    {\n-\t\t      printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t      wrap_here (\"  \");\n-\t\t      printf_filtered (\"((struct objfile *) %s)\\n\",\n-\t\t\t\t       host_address_to_string (objfile));\n-\t\t      printed_objfile_start = 1;\n-\t\t    }\n-\t\t  if (! printed_compunit_symtab_start)\n-\t\t    {\n-\t\t      printf_filtered (\"  { ((struct compunit_symtab *) %s)\\n\",\n-\t\t\t\t       host_address_to_string (cust));\n-\t\t      printf_filtered (\"    debugformat %s\\n\",\n-\t\t\t\t       COMPUNIT_DEBUGFORMAT (cust));\n-\t\t      printf_filtered (\"    producer %s\\n\",\n-\t\t\t\t       COMPUNIT_PRODUCER (cust) != NULL\n-\t\t\t\t       ? COMPUNIT_PRODUCER (cust)\n-\t\t\t\t       : \"(null)\");\n-\t\t      printf_filtered (\"    dirname %s\\n\",\n-\t\t\t\t       COMPUNIT_DIRNAME (cust) != NULL\n-\t\t\t\t       ? COMPUNIT_DIRNAME (cust)\n-\t\t\t\t       : \"(null)\");\n-\t\t      printf_filtered (\"    blockvector\"\n-\t\t\t\t       \" ((struct blockvector *) %s)\\n\",\n-\t\t\t\t       host_address_to_string\n+\tALL_OBJFILE_COMPUNITS (objfile, cust)\n+\t  {\n+\t    int printed_compunit_symtab_start = 0;\n+\n+\t    ALL_COMPUNIT_FILETABS (cust, symtab)\n+\t      {\n+\t\tQUIT;\n+\n+\t\tif (! regexp\n+\t\t    || re_exec (symtab_to_filename_for_display (symtab)))\n+\t\t  {\n+\t\t    if (! printed_objfile_start)\n+\t\t      {\n+\t\t\tprintf_filtered (\"{ objfile %s \", objfile_name (objfile));\n+\t\t\twrap_here (\"  \");\n+\t\t\tprintf_filtered (\"((struct objfile *) %s)\\n\",\n+\t\t\t\t\t host_address_to_string (objfile));\n+\t\t\tprinted_objfile_start = 1;\n+\t\t      }\n+\t\t    if (! printed_compunit_symtab_start)\n+\t\t      {\n+\t\t\tprintf_filtered (\"  { ((struct compunit_symtab *) %s)\\n\",\n+\t\t\t\t\t host_address_to_string (cust));\n+\t\t\tprintf_filtered (\"    debugformat %s\\n\",\n+\t\t\t\t\t COMPUNIT_DEBUGFORMAT (cust));\n+\t\t\tprintf_filtered (\"    producer %s\\n\",\n+\t\t\t\t\t COMPUNIT_PRODUCER (cust) != NULL\n+\t\t\t\t\t ? COMPUNIT_PRODUCER (cust)\n+\t\t\t\t\t : \"(null)\");\n+\t\t\tprintf_filtered (\"    dirname %s\\n\",\n+\t\t\t\t\t COMPUNIT_DIRNAME (cust) != NULL\n+\t\t\t\t\t ? COMPUNIT_DIRNAME (cust)\n+\t\t\t\t\t : \"(null)\");\n+\t\t\tprintf_filtered (\"    blockvector\"\n+\t\t\t\t\t \" ((struct blockvector *) %s)\\n\",\n+\t\t\t\t\t host_address_to_string\n \t\t\t\t         (COMPUNIT_BLOCKVECTOR (cust)));\n-\t\t      printed_compunit_symtab_start = 1;\n-\t\t    }\n-\n-\t\t  printf_filtered (\"\\t{ symtab %s \",\n-\t\t\t\t   symtab_to_filename_for_display (symtab));\n-\t\t  wrap_here (\"    \");\n-\t\t  printf_filtered (\"((struct symtab *) %s)\\n\",\n-\t\t\t\t   host_address_to_string (symtab));\n-\t\t  printf_filtered (\"\\t  fullname %s\\n\",\n-\t\t\t\t   symtab->fullname != NULL\n-\t\t\t\t   ? symtab->fullname\n-\t\t\t\t   : \"(null)\");\n-\t\t  printf_filtered (\"\\t  \"\n-\t\t\t\t   \"linetable ((struct linetable *) %s)\\n\",\n-\t\t\t\t   host_address_to_string (symtab->linetable));\n-\t\t  printf_filtered (\"\\t}\\n\");\n-\t\t}\n-\t    }\n-\n-\t  if (printed_compunit_symtab_start)\n-\t    printf_filtered (\"  }\\n\");\n-\t}\n+\t\t\tprinted_compunit_symtab_start = 1;\n+\t\t      }\n+\n+\t\t    printf_filtered (\"\\t{ symtab %s \",\n+\t\t\t\t     symtab_to_filename_for_display (symtab));\n+\t\t    wrap_here (\"    \");\n+\t\t    printf_filtered (\"((struct symtab *) %s)\\n\",\n+\t\t\t\t     host_address_to_string (symtab));\n+\t\t    printf_filtered (\"\\t  fullname %s\\n\",\n+\t\t\t\t     symtab->fullname != NULL\n+\t\t\t\t     ? symtab->fullname\n+\t\t\t\t     : \"(null)\");\n+\t\t    printf_filtered (\"\\t  \"\n+\t\t\t\t     \"linetable ((struct linetable *) %s)\\n\",\n+\t\t\t\t     host_address_to_string (symtab->linetable));\n+\t\t    printf_filtered (\"\\t}\\n\");\n+\t\t  }\n+\t      }\n+\n+\t    if (printed_compunit_symtab_start)\n+\t      printf_filtered (\"  }\\n\");\n+\t  }\n \n-      if (printed_objfile_start)\n-        printf_filtered (\"}\\n\");\n-    }\n+\tif (printed_objfile_start)\n+\t  printf_filtered (\"}\\n\");\n+      }\n }\n \n /* Check consistency of symtabs.\n@@ -866,49 +862,48 @@ static void\n maintenance_check_symtabs (const char *ignore, int from_tty)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      struct compunit_symtab *cust;\n-\n-      /* We don't want to print anything for this objfile until we\n-         actually find something worth printing.  */\n-      int printed_objfile_start = 0;\n-\n-      ALL_OBJFILE_COMPUNITS (objfile, cust)\n-\t{\n-\t  int found_something = 0;\n-\t  struct symtab *symtab = compunit_primary_filetab (cust);\n-\n-\t  QUIT;\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tstruct compunit_symtab *cust;\n \n-\t  if (COMPUNIT_BLOCKVECTOR (cust) == NULL)\n-\t    found_something = 1;\n-\t  /* Add more checks here.  */\n+\t/* We don't want to print anything for this objfile until we\n+\t   actually find something worth printing.  */\n+\tint printed_objfile_start = 0;\n \n-\t  if (found_something)\n-\t    {\n-\t      if (! printed_objfile_start)\n-\t\t{\n-\t\t  printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t  wrap_here (\"  \");\n-\t\t  printf_filtered (\"((struct objfile *) %s)\\n\",\n-\t\t\t\t   host_address_to_string (objfile));\n-\t\t  printed_objfile_start = 1;\n-\t\t}\n-\t      printf_filtered (\"  { symtab %s\\n\",\n-\t\t\t       symtab_to_filename_for_display (symtab));\n-\t      if (COMPUNIT_BLOCKVECTOR (cust) == NULL)\n-\t\tprintf_filtered (\"    NULL blockvector\\n\");\n-\t      printf_filtered (\"  }\\n\");\n-\t    }\n-\t}\n+\tALL_OBJFILE_COMPUNITS (objfile, cust)\n+\t  {\n+\t    int found_something = 0;\n+\t    struct symtab *symtab = compunit_primary_filetab (cust);\n+\n+\t    QUIT;\n+\n+\t    if (COMPUNIT_BLOCKVECTOR (cust) == NULL)\n+\t      found_something = 1;\n+\t    /* Add more checks here.  */\n+\n+\t    if (found_something)\n+\t      {\n+\t\tif (! printed_objfile_start)\n+\t\t  {\n+\t\t    printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n+\t\t    wrap_here (\"  \");\n+\t\t    printf_filtered (\"((struct objfile *) %s)\\n\",\n+\t\t\t\t     host_address_to_string (objfile));\n+\t\t    printed_objfile_start = 1;\n+\t\t  }\n+\t\tprintf_filtered (\"  { symtab %s\\n\",\n+\t\t\t\t symtab_to_filename_for_display (symtab));\n+\t\tif (COMPUNIT_BLOCKVECTOR (cust) == NULL)\n+\t\t  printf_filtered (\"    NULL blockvector\\n\");\n+\t\tprintf_filtered (\"  }\\n\");\n+\t      }\n+\t  }\n \n-      if (printed_objfile_start)\n-        printf_filtered (\"}\\n\");\n-    }\n+\tif (printed_objfile_start)\n+\t  printf_filtered (\"}\\n\");\n+      }\n }\n \n /* Expand all symbol tables whose name matches an optional regexp.  */\n@@ -917,7 +912,6 @@ static void\n maintenance_expand_symtabs (const char *args, int from_tty)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n   char *regexp = NULL;\n \n   /* We use buildargv here so that we handle spaces in the regexp\n@@ -938,28 +932,28 @@ maintenance_expand_symtabs (const char *args, int from_tty)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      if (objfile->sf)\n-\t{\n-\t  objfile->sf->qf->expand_symtabs_matching\n-\t    (objfile,\n-\t     [&] (const char *filename, bool basenames)\n-\t     {\n-\t       /* KISS: Only apply the regexp to the complete file name.  */\n-\t       return (!basenames\n-\t\t       && (regexp == NULL || re_exec (filename)));\n-\t     },\n-\t     lookup_name_info::match_any (),\n-\t     [] (const char *symname)\n-\t     {\n-\t       /* Since we're not searching on symbols, just return true.  */\n-\t       return true;\n-\t     },\n-\t     NULL,\n-\t     ALL_DOMAIN);\n-\t}\n-    }\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tif (objfile->sf)\n+\t  {\n+\t    objfile->sf->qf->expand_symtabs_matching\n+\t      (objfile,\n+\t       [&] (const char *filename, bool basenames)\n+\t       {\n+\t\t /* KISS: Only apply the regexp to the complete file name.  */\n+\t\t return (!basenames\n+\t\t\t && (regexp == NULL || re_exec (filename)));\n+\t       },\n+\t       lookup_name_info::match_any (),\n+\t       [] (const char *symname)\n+\t       {\n+\t\t /* Since we're not searching on symbols, just return true.  */\n+\t\t return true;\n+\t       },\n+\t       NULL,\n+\t       ALL_DOMAIN);\n+\t  }\n+      }\n }\n \f\n \n@@ -1032,31 +1026,30 @@ static void\n maintenance_info_line_tables (const char *regexp, int from_tty)\n {\n   struct program_space *pspace;\n-  struct objfile *objfile;\n \n   dont_repeat ();\n \n   if (regexp != NULL)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    ALL_PSPACE_OBJFILES (pspace, objfile)\n-    {\n-      struct compunit_symtab *cust;\n-      struct symtab *symtab;\n-\n-      ALL_OBJFILE_COMPUNITS (objfile, cust)\n-\t{\n-\t  ALL_COMPUNIT_FILETABS (cust, symtab)\n-\t    {\n-\t      QUIT;\n+    for (objfile *objfile : all_objfiles (pspace))\n+      {\n+\tstruct compunit_symtab *cust;\n+\tstruct symtab *symtab;\n \n-\t      if (regexp == NULL\n-\t\t  || re_exec (symtab_to_filename_for_display (symtab)))\n-\t\tmaintenance_print_one_line_table (symtab, NULL);\n-\t    }\n-\t}\n-    }\n+\tALL_OBJFILE_COMPUNITS (objfile, cust)\n+\t  {\n+\t    ALL_COMPUNIT_FILETABS (cust, symtab)\n+\t      {\n+\t\tQUIT;\n+\n+\t\tif (regexp == NULL\n+\t\t    || re_exec (symtab_to_filename_for_display (symtab)))\n+\t\t  maintenance_print_one_line_table (symtab, NULL);\n+\t      }\n+\t  }\n+      }\n }\n \n \f"
    }
  ]
}