{
  "sha": "edfe0a0c6561cf838f3f885c22940025a826d900",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWRmZTBhMGM2NTYxY2Y4MzhmM2Y4ODVjMjI5NDAwMjVhODI2ZDkwMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-26T22:41:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-26T22:49:50Z"
    },
    "message": "Remove casts from dwarf2/index-write.c\n\ndwarf2/index-write.c casts pointers to \"dwarf2_psymtab *\", but as far\nas I can tell, it does not actually use any DWARF-specific fields of\nthe psymtab.  So, this patch changes this code to use partial_symtab\ninstead.  This removes nearly every cast, leaving just the unavoidable\none from addrmap iteration.\n\ngdb/ChangeLog\n2020-02-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/index-write.c (psym_index_map): Change type.\n\t(add_address_entry_worker, write_one_signatured_type)\n\t(recursively_count_psymbols, recursively_write_psymbols)\n\t(class debug_names, psyms_seen_size, write_gdbindex)\n\t(write_debug_names): Use partial_symtab, not dwarf2_psymtab.",
    "tree": {
      "sha": "2af64454c203b6f7aff955be32fc95a3ddadea6b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2af64454c203b6f7aff955be32fc95a3ddadea6b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/edfe0a0c6561cf838f3f885c22940025a826d900",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edfe0a0c6561cf838f3f885c22940025a826d900",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/edfe0a0c6561cf838f3f885c22940025a826d900",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edfe0a0c6561cf838f3f885c22940025a826d900/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0d79cdc494d5eb9db26a602d62c92d49f83f407e"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 21,
    "deletions": 13
  },
  "files": [
    {
      "sha": "2bb65e7eaed3830add43283d321162deda03f93e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edfe0a0c6561cf838f3f885c22940025a826d900/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edfe0a0c6561cf838f3f885c22940025a826d900/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=edfe0a0c6561cf838f3f885c22940025a826d900",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/index-write.c (psym_index_map): Change type.\n+\t(add_address_entry_worker, write_one_signatured_type)\n+\t(recursively_count_psymbols, recursively_write_psymbols)\n+\t(class debug_names, psyms_seen_size, write_gdbindex)\n+\t(write_debug_names): Use partial_symtab, not dwarf2_psymtab.\n+\n 2020-02-26  Aaron Merey  <amerey@redhat.com>\n \n \t* Makefile.in: Handle optional debuginfod support."
    },
    {
      "sha": "4b711d0d29a6cf201979586b0147c2fc9c0030d4",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edfe0a0c6561cf838f3f885c22940025a826d900/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edfe0a0c6561cf838f3f885c22940025a826d900/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=edfe0a0c6561cf838f3f885c22940025a826d900",
      "patch": "@@ -399,7 +399,7 @@ write_hash_table (mapped_symtab *symtab, data_buf &output, data_buf &cpool)\n     }\n }\n \n-typedef std::unordered_map<dwarf2_psymtab *, unsigned int> psym_index_map;\n+typedef std::unordered_map<partial_symtab *, unsigned int> psym_index_map;\n \n /* Helper struct for building the address table.  */\n struct addrmap_index_data\n@@ -439,7 +439,7 @@ static int\n add_address_entry_worker (void *datap, CORE_ADDR start_addr, void *obj)\n {\n   struct addrmap_index_data *data = (struct addrmap_index_data *) datap;\n-  dwarf2_psymtab *pst = (dwarf2_psymtab *) obj;\n+  partial_symtab *pst = (partial_symtab *) obj;\n \n   if (data->previous_valid)\n     add_address_entry (data->objfile, data->addr_vec,\n@@ -582,7 +582,7 @@ write_one_signatured_type (void **slot, void *d)\n   struct signatured_type_index_data *info\n     = (struct signatured_type_index_data *) d;\n   struct signatured_type *entry = (struct signatured_type *) *slot;\n-  dwarf2_psymtab *psymtab = entry->per_cu.v.psymtab;\n+  partial_symtab *psymtab = entry->per_cu.v.psymtab;\n \n   write_psymbols (info->symtab,\n \t\t  info->psyms_seen,\n@@ -612,12 +612,12 @@ write_one_signatured_type (void **slot, void *d)\n    if they appeared in this psymtab.  */\n \n static void\n-recursively_count_psymbols (dwarf2_psymtab *psymtab,\n+recursively_count_psymbols (partial_symtab *psymtab,\n \t\t\t    size_t &psyms_seen)\n {\n   for (int i = 0; i < psymtab->number_of_dependencies; ++i)\n     if (psymtab->dependencies[i]->user != NULL)\n-      recursively_count_psymbols ((dwarf2_psymtab *) psymtab->dependencies[i],\n+      recursively_count_psymbols (psymtab->dependencies[i],\n \t\t\t\t  psyms_seen);\n \n   psyms_seen += psymtab->n_global_syms;\n@@ -629,7 +629,7 @@ recursively_count_psymbols (dwarf2_psymtab *psymtab,\n \n static void\n recursively_write_psymbols (struct objfile *objfile,\n-\t\t\t    dwarf2_psymtab *psymtab,\n+\t\t\t    partial_symtab *psymtab,\n \t\t\t    struct mapped_symtab *symtab,\n \t\t\t    std::unordered_set<partial_symbol *> &psyms_seen,\n \t\t\t    offset_type cu_index)\n@@ -639,7 +639,7 @@ recursively_write_psymbols (struct objfile *objfile,\n   for (i = 0; i < psymtab->number_of_dependencies; ++i)\n     if (psymtab->dependencies[i]->user != NULL)\n       recursively_write_psymbols (objfile,\n-\t\t\t\t  (dwarf2_psymtab *) psymtab->dependencies[i],\n+\t\t\t\t  psymtab->dependencies[i],\n \t\t\t\t  symtab, psyms_seen, cu_index);\n \n   write_psymbols (symtab,\n@@ -869,14 +869,14 @@ class debug_names\n      as if they appeared in this psymtab.  */\n   void recursively_write_psymbols\n     (struct objfile *objfile,\n-     dwarf2_psymtab *psymtab,\n+     partial_symtab *psymtab,\n      std::unordered_set<partial_symbol *> &psyms_seen,\n      int cu_index)\n   {\n     for (int i = 0; i < psymtab->number_of_dependencies; ++i)\n       if (psymtab->dependencies[i]->user != NULL)\n \trecursively_write_psymbols\n-\t  (objfile, (dwarf2_psymtab *) psymtab->dependencies[i], psyms_seen, cu_index);\n+\t  (objfile, psymtab->dependencies[i], psyms_seen, cu_index);\n \n     write_psymbols (psyms_seen,\n \t\t    (objfile->partial_symtabs->global_psymbols.data ()\n@@ -1234,7 +1234,7 @@ class debug_names\n   write_one_signatured_type (struct signatured_type *entry,\n \t\t\t     struct signatured_type_index_data *info)\n   {\n-    dwarf2_psymtab *psymtab = entry->per_cu.v.psymtab;\n+    partial_symtab *psymtab = entry->per_cu.v.psymtab;\n \n     write_psymbols (info->psyms_seen,\n \t\t    (info->objfile->partial_symtabs->global_psymbols.data ()\n@@ -1320,7 +1320,7 @@ psyms_seen_size (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   size_t psyms_count = 0;\n   for (dwarf2_per_cu_data *per_cu : dwarf2_per_objfile->all_comp_units)\n     {\n-      dwarf2_psymtab *psymtab = per_cu->v.psymtab;\n+      partial_symtab *psymtab = per_cu->v.psymtab;\n \n       if (psymtab != NULL && psymtab->user == NULL)\n \trecursively_count_psymbols (psymtab, psyms_count);\n@@ -1423,7 +1423,7 @@ write_gdbindex (struct dwarf2_per_objfile *dwarf2_per_objfile, FILE *out_file,\n     {\n       struct dwarf2_per_cu_data *per_cu\n \t= dwarf2_per_objfile->all_comp_units[i];\n-      dwarf2_psymtab *psymtab = per_cu->v.psymtab;\n+      partial_symtab *psymtab = per_cu->v.psymtab;\n \n       /* CU of a shared file from 'dwz -m' may be unused by this main file.\n \t It may be referenced from a local scope but in such case it does not\n@@ -1508,7 +1508,7 @@ write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   for (int i = 0; i < dwarf2_per_objfile->all_comp_units.size (); ++i)\n     {\n       const dwarf2_per_cu_data *per_cu = dwarf2_per_objfile->all_comp_units[i];\n-      dwarf2_psymtab *psymtab = per_cu->v.psymtab;\n+      partial_symtab *psymtab = per_cu->v.psymtab;\n \n       /* CU of a shared file from 'dwz -m' may be unused by this main\n \t file.  It may be referenced from a local scope but in such"
    }
  ]
}