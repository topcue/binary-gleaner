{
  "sha": "27012aba8a638a636940c2813f191383ccd713fd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjcwMTJhYmE4YTYzOGE2MzY5NDBjMjgxM2YxOTEzODNjY2Q3MTNmZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-13T16:41:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-13T16:41:05Z"
    },
    "message": "Remove Irix 6 workaround from DWARF abbrev reader\n\nabbrev_table::read has a workaround for Irix 6.  The last release of\nIrix was in 2006, and (according to Wikipedia) hardware produced after\n2007 cannot run Irix.  I think this workaround can safely be retired.\n\ngdb/ChangeLog\n2021-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/abbrev.c (abbrev_table::read): Remove Irix 6 workaround.",
    "tree": {
      "sha": "bc0df6613a30068e2bd663f019f0c352a6b387a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc0df6613a30068e2bd663f019f0c352a6b387a5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/27012aba8a638a636940c2813f191383ccd713fd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27012aba8a638a636940c2813f191383ccd713fd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/27012aba8a638a636940c2813f191383ccd713fd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27012aba8a638a636940c2813f191383ccd713fd/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e7d9022ba8755005cae79207b5f911b1a9cebed4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7d9022ba8755005cae79207b5f911b1a9cebed4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7d9022ba8755005cae79207b5f911b1a9cebed4"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 13,
    "deletions": 19
  },
  "files": [
    {
      "sha": "4010e6782e4db7ded3c76b5f0eca0a9f668c4d26",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27012aba8a638a636940c2813f191383ccd713fd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27012aba8a638a636940c2813f191383ccd713fd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=27012aba8a638a636940c2813f191383ccd713fd",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/abbrev.c (abbrev_table::read): Remove Irix 6 workaround.\n+\n 2021-03-12  Christian Biesinger  <cbiesinger@google.com>\n \n \tPR threads/27239"
    },
    {
      "sha": "a8bdf7182de2c7cf446e94ab790fb90d421c64c2",
      "filename": "gdb/dwarf2/abbrev.c",
      "status": "modified",
      "additions": 9,
      "deletions": 19,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27012aba8a638a636940c2813f191383ccd713fd/gdb/dwarf2/abbrev.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27012aba8a638a636940c2813f191383ccd713fd/gdb/dwarf2/abbrev.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.c?ref=27012aba8a638a636940c2813f191383ccd713fd",
      "patch": "@@ -84,20 +84,24 @@ abbrev_table::read (struct dwarf2_section_info *section,\n   bfd *abfd = section->get_bfd_owner ();\n   const gdb_byte *abbrev_ptr;\n   struct abbrev_info *cur_abbrev;\n-  unsigned int abbrev_number, bytes_read;\n \n   abbrev_table_up abbrev_table (new struct abbrev_table (sect_off));\n   struct obstack *obstack = &abbrev_table->m_abbrev_obstack;\n \n   /* Caller must ensure this.  */\n   gdb_assert (section->readin);\n   abbrev_ptr = section->buffer + to_underlying (sect_off);\n-  abbrev_number = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);\n-  abbrev_ptr += bytes_read;\n \n-  /* Loop until we reach an abbrev number of 0.  */\n-  while (abbrev_number)\n+  while (true)\n     {\n+      unsigned int bytes_read;\n+      /* Loop until we reach an abbrev number of 0.  */\n+      unsigned int abbrev_number = read_unsigned_leb128 (abfd, abbrev_ptr,\n+\t\t\t\t\t\t\t &bytes_read);\n+      if (abbrev_number == 0)\n+\tbreak;\n+      abbrev_ptr += bytes_read;\n+\n       /* Start without any attrs.  */\n       obstack_blank (obstack, offsetof (abbrev_info, attrs));\n       cur_abbrev = (struct abbrev_info *) obstack_base (obstack);\n@@ -144,20 +148,6 @@ abbrev_table::read (struct dwarf2_section_info *section,\n       cur_abbrev = (struct abbrev_info *) obstack_finish (obstack);\n       cur_abbrev->num_attrs = num_attrs;\n       abbrev_table->add_abbrev (cur_abbrev);\n-\n-      /* Get next abbreviation.\n-\t Under Irix6 the abbreviations for a compilation unit are not\n-\t always properly terminated with an abbrev number of 0.\n-\t Exit loop if we encounter an abbreviation which we have\n-\t already read (which means we are about to read the abbreviations\n-\t for the next compile unit) or if the end of the abbreviation\n-\t table is reached.  */\n-      if ((unsigned int) (abbrev_ptr - section->buffer) >= section->size)\n-\tbreak;\n-      abbrev_number = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);\n-      abbrev_ptr += bytes_read;\n-      if (abbrev_table->lookup_abbrev (abbrev_number) != NULL)\n-\tbreak;\n     }\n \n   return abbrev_table;"
    }
  ]
}