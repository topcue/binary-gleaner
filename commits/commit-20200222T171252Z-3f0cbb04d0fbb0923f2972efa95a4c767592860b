{
  "sha": "3f0cbb04d0fbb0923f2972efa95a4c767592860b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2YwY2JiMDRkMGZiYjA5MjNmMjk3MmVmYTk1YTRjNzY3NTkyODYwYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T17:02:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T17:12:52Z"
    },
    "message": "Style field names in \"print\"\n\nThis changes gdb to use the \"variable\" style when printing field\nnames.  I've added new tests for C and Rust, but not other languages.\n\nI chose \"variable\" because that seemed most straightforward.  However,\nanother option would be to introduce a new \"field\" style.  Similarly,\nthis patch uses the variable style for enumerator constants -- but\nagain, a new style could be used if that's preferred.\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (generic_val_print_enum_1)\n\t(val_print_type_code_flags): Style member names.\n\t* rust-lang.c (val_print_struct, rust_print_enum)\n\t(rust_print_struct_def, rust_internal_print_type): Style member\n\tnames.\n\t* p-valprint.c (pascal_object_print_value_fields): Style member\n\tnames.  Only call fprintf_symbol_filtered for static members.\n\t* m2-typeprint.c (m2_record_fields, m2_enum): Style member names.\n\t* f-valprint.c (f_val_print): Style member names.\n\t* f-typeprint.c (f_type_print_base): Style member names.\n\t* cp-valprint.c (cp_print_value_fields): Style member names.  Only\n\tcall fprintf_symbol_filtered for static members.\n\t(cp_print_class_member): Style member names.\n\t* c-typeprint.c (c_print_type_1, c_type_print_base_1): Style\n\tmember names.\n\t* ada-valprint.c (ada_print_scalar): Style enum names.\n\t(ada_val_print_enum): Likewise.\n\t* ada-typeprint.c (print_enum_type): Style enum names.\n\ngdb/testsuite/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.rust/rust-style.rs: New file.\n\t* gdb.rust/rust-style.exp: New file.\n\t* gdb.base/style.exp: Test structure printing.\n\t* gdb.base/style.c (struct some_struct): New type.\n\t(enum etype): New type.\n\t(struct_value): New global.\n\nChange-Id: I070e1293c6cc830c9ea916af8243410aa384e944",
    "tree": {
      "sha": "2cb2b5e19021553e6ba40a7497e30f39f45fa6d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2cb2b5e19021553e6ba40a7497e30f39f45fa6d0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3f0cbb04d0fbb0923f2972efa95a4c767592860b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f0cbb04d0fbb0923f2972efa95a4c767592860b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3f0cbb04d0fbb0923f2972efa95a4c767592860b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f0cbb04d0fbb0923f2972efa95a4c767592860b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b3c27152b5695177a2cd5adc0d7b0255f99aca0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b3c27152b5695177a2cd5adc0d7b0255f99aca0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b3c27152b5695177a2cd5adc0d7b0255f99aca0"
    }
  ],
  "stats": {
    "total": 222,
    "additions": 190,
    "deletions": 32
  },
  "files": [
    {
      "sha": "ecdce315f7e02747bb7be6e569bd969f7637bea1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -1,3 +1,24 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (generic_val_print_enum_1)\n+\t(val_print_type_code_flags): Style member names.\n+\t* rust-lang.c (val_print_struct, rust_print_enum)\n+\t(rust_print_struct_def, rust_internal_print_type): Style member\n+\tnames.\n+\t* p-valprint.c (pascal_object_print_value_fields): Style member\n+\tnames.  Only call fprintf_symbol_filtered for static members.\n+\t* m2-typeprint.c (m2_record_fields, m2_enum): Style member names.\n+\t* f-valprint.c (f_val_print): Style member names.\n+\t* f-typeprint.c (f_type_print_base): Style member names.\n+\t* cp-valprint.c (cp_print_value_fields): Style member names.  Only\n+\tcall fprintf_symbol_filtered for static members.\n+\t(cp_print_class_member): Style member names.\n+\t* c-typeprint.c (c_print_type_1, c_type_print_base_1): Style\n+\tmember names.\n+\t* ada-valprint.c (ada_print_scalar): Style enum names.\n+\t(ada_val_print_enum): Likewise.\n+\t* ada-typeprint.c (print_enum_type): Style enum names.\n+\n 2020-02-21  Tom Tromey  <tom@tromey.com>\n \n \t* psympriv.h (struct partial_symtab): Update comment."
    },
    {
      "sha": "db4634c0f3b01cf402e444b7e83afde3dd9e8e66",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -326,7 +326,8 @@ print_enum_type (struct type *type, struct ui_file *stream)\n       if (i)\n \tfprintf_filtered (stream, \", \");\n       wrap_here (\"    \");\n-      fputs_filtered (ada_enum_name (TYPE_FIELD_NAME (type, i)), stream);\n+      fputs_styled (ada_enum_name (TYPE_FIELD_NAME (type, i)),\n+\t\t    variable_name_style.style (), stream);\n       if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n \t{\n \t  fprintf_filtered (stream, \" => %s\","
    },
    {
      "sha": "b918caf473ff4bc6e1a009771ab4f31e5e503b12",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -418,7 +418,8 @@ ada_print_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n \t}\n       if (i < len)\n \t{\n-\t  fputs_filtered (ada_enum_name (TYPE_FIELD_NAME (type, i)), stream);\n+\t  fputs_styled (ada_enum_name (TYPE_FIELD_NAME (type, i)),\n+\t\t\tvariable_name_style.style (), stream);\n \t}\n       else\n \t{\n@@ -956,9 +957,11 @@ ada_val_print_enum (struct type *type, const gdb_byte *valaddr,\n       const char *name = ada_enum_name (TYPE_FIELD_NAME (type, i));\n \n       if (name[0] == '\\'')\n-\tfprintf_filtered (stream, \"%ld %s\", (long) val, name);\n+\tfprintf_filtered (stream, \"%ld %ps\", (long) val,\n+\t\t\t  styled_string (variable_name_style.style (),\n+\t\t\t\t\t name));\n       else\n-\tfputs_filtered (name, stream);\n+\tfputs_styled (name, variable_name_style.style (), stream);\n     }\n   else\n     print_longest (stream, 'd', 0, val);"
    },
    {
      "sha": "1f27b5664673ef4c9b2341aba8605d6f1b8a2b22",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -148,7 +148,7 @@ c_print_type_1 (struct type *type,\n       if (code == TYPE_CODE_FUNC || code == TYPE_CODE_METHOD)\n \tfputs_styled (varstring, function_name_style.style (), stream);\n       else\n-\tfputs_filtered (varstring, stream);\n+\tfputs_styled (varstring, variable_name_style.style (), stream);\n \n       /* For demangled function names, we have the arglist as part of\n          the name, so don't print an additional pair of ()'s.  */\n@@ -1595,7 +1595,8 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t      if (i)\n \t\tfprintf_filtered (stream, \", \");\n \t      wrap_here (\"    \");\n-\t      fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+\t      fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\t    variable_name_style.style (), stream);\n \t      if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n \t\t{\n \t\t  fprintf_filtered (stream, \" = %s\","
    },
    {
      "sha": "e936e3ffa3234e80784d1514a82647b9136190e2",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -235,11 +235,16 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t  annotate_field_begin (TYPE_FIELD_TYPE (type, i));\n \n \t  if (field_is_static (&TYPE_FIELD (type, i)))\n-\t    fputs_filtered (\"static \", stream);\n-\t  fprintf_symbol_filtered (stream,\n-\t\t\t\t   TYPE_FIELD_NAME (type, i),\n-\t\t\t\t   current_language->la_language,\n-\t\t\t\t   DMGL_PARAMS | DMGL_ANSI);\n+\t    {\n+\t      fputs_filtered (\"static \", stream);\n+\t      fprintf_symbol_filtered (stream,\n+\t\t\t\t       TYPE_FIELD_NAME (type, i),\n+\t\t\t\t       current_language->la_language,\n+\t\t\t\t       DMGL_PARAMS | DMGL_ANSI);\n+\t    }\n+\t  else\n+\t    fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\t  variable_name_style.style (), stream);\n \t  annotate_field_name_end ();\n \n \t  /* We tweak various options in a few cases below.  */\n@@ -782,7 +787,8 @@ cp_print_class_member (const gdb_byte *valaddr, struct type *type,\n       else\n \tc_type_print_base (self_type, stream, 0, 0, &type_print_raw_options);\n       fprintf_filtered (stream, \"::\");\n-      fputs_filtered (TYPE_FIELD_NAME (self_type, fieldno), stream);\n+      fputs_styled (TYPE_FIELD_NAME (self_type, fieldno),\n+\t\t    variable_name_style.style (), stream);\n     }\n   else\n     fprintf_filtered (stream, \"%ld\", (long) val);"
    },
    {
      "sha": "e4a2beb930b422f705ff4c329b3ccd9ea47da0de",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -435,7 +435,8 @@ f_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t      f_type_print_base (TYPE_FIELD_TYPE (type, index), stream,\n \t\t\t\t show - 1, level + 4);\n \t      fputs_filtered (\" :: \", stream);\n-\t      fputs_filtered (TYPE_FIELD_NAME (type, index), stream);\n+\t      fputs_styled (TYPE_FIELD_NAME (type, index),\n+\t\t\t    variable_name_style.style (), stream);\n \t      f_type_print_varspec_suffix (TYPE_FIELD_TYPE (type, index),\n \t\t\t\t\t   stream, show - 1, 0, 0, 0, false);\n \t      fputs_filtered (\"\\n\", stream);"
    },
    {
      "sha": "a25e61473228d245fd94d6bf0b19c77d629c125a",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -341,7 +341,8 @@ f_val_print (struct type *type, int embedded_offset,\n \t      field_name = TYPE_FIELD_NAME (type, index);\n \t      if (field_name != NULL)\n \t\t{\n-\t\t  fputs_filtered (field_name, stream);\n+\t\t  fputs_styled (field_name, variable_name_style.style (),\n+\t\t\t\tstream);\n \t\t  fputs_filtered (\" = \", stream);\n \t\t}\n "
    },
    {
      "sha": "a4a7689c33eeda556b06301de908da75645a6fec",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -563,7 +563,8 @@ m2_record_fields (struct type *type, struct ui_file *stream, int show,\n \t  QUIT;\n \n \t  print_spaces_filtered (level + 4, stream);\n-\t  fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+\t  fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\tvariable_name_style.style (), stream);\n \t  fputs_filtered (\" : \", stream);\n \t  m2_print_type (TYPE_FIELD_TYPE (type, i),\n \t\t\t \"\",\n@@ -608,7 +609,8 @@ m2_enum (struct type *type, struct ui_file *stream, int show, int level)\n \t  if (i > 0)\n \t    fprintf_filtered (stream, \", \");\n \t  wrap_here (\"    \");\n-\t  fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+\t  fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\tvariable_name_style.style (), stream);\n \t  if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n \t    {\n \t      fprintf_filtered (stream, \" = %s\","
    },
    {
      "sha": "7d087557fd32be6c332e6e9fbe5df95bac0fb38b",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -605,10 +605,16 @@ pascal_object_print_value_fields (struct type *type, const gdb_byte *valaddr,\n \t  annotate_field_begin (TYPE_FIELD_TYPE (type, i));\n \n \t  if (field_is_static (&TYPE_FIELD (type, i)))\n-\t    fputs_filtered (\"static \", stream);\n-\t  fprintf_symbol_filtered (stream, TYPE_FIELD_NAME (type, i),\n-\t\t\t\t   language_cplus,\n-\t\t\t\t   DMGL_PARAMS | DMGL_ANSI);\n+\t    {\n+\t      fputs_filtered (\"static \", stream);\n+\t      fprintf_symbol_filtered (stream,\n+\t\t\t\t       TYPE_FIELD_NAME (type, i),\n+\t\t\t\t       current_language->la_language,\n+\t\t\t\t       DMGL_PARAMS | DMGL_ANSI);\n+\t    }\n+\t  else\n+\t    fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\t  variable_name_style.style (), stream);\n \t  annotate_field_name_end ();\n \t  fputs_filtered (\" = \", stream);\n \t  annotate_field_value ();"
    },
    {
      "sha": "fc48e3486aef940815b04572f438dd9f71e9fa72",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -436,7 +436,8 @@ val_print_struct (struct type *type, int embedded_offset,\n \n       if (!is_tuple && !is_tuple_struct)\n         {\n-\t  fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+\t  fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\tvariable_name_style.style (), stream);\n \t  fputs_filtered (\": \", stream);\n         }\n \n@@ -515,8 +516,9 @@ rust_print_enum (struct type *type, int embedded_offset,\n       first_field = false;\n \n       if (!is_tuple)\n-\tfprintf_filtered (stream, \"%s: \",\n-\t\t\t  TYPE_FIELD_NAME (variant_type, j));\n+\tfprintf_filtered (stream, \"%ps: \",\n+\t\t\t  styled_string (variable_name_style.style (),\n+\t\t\t\t\t TYPE_FIELD_NAME (variant_type, j)));\n \n       val_print (TYPE_FIELD_TYPE (variant_type, j),\n \t\t (embedded_offset\n@@ -792,9 +794,12 @@ rust_print_struct_def (struct type *type, const char *varstring,\n       if (!for_rust_enum || flags->print_offsets)\n \tprint_spaces_filtered (level + 2, stream);\n       if (is_enum)\n-\tfputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+\tfputs_styled (TYPE_FIELD_NAME (type, i), variable_name_style.style (),\n+\t\t      stream);\n       else if (!is_tuple_struct)\n-\tfprintf_filtered (stream, \"%s: \", TYPE_FIELD_NAME (type, i));\n+\tfprintf_filtered (stream, \"%ps: \",\n+\t\t\t  styled_string (variable_name_style.style (),\n+\t\t\t\t\t TYPE_FIELD_NAME (type, i)));\n \n       rust_internal_print_type (TYPE_FIELD_TYPE (type, i), NULL,\n \t\t\t\tstream, (is_enum ? show : show - 1),\n@@ -943,7 +948,9 @@ rust_internal_print_type (struct type *type, const char *varstring,\n \t\t&& name[len] == ':'\n \t\t&& name[len + 1] == ':')\n \t      name += len + 2;\n-\t    fprintfi_filtered (level + 2, stream, \"%s,\\n\", name);\n+\t    fprintfi_filtered (level + 2, stream, \"%ps,\\n\",\n+\t\t\t       styled_string (variable_name_style.style (),\n+\t\t\t\t\t      name));\n \t  }\n \n \tfputs_filtered (\"}\", stream);"
    },
    {
      "sha": "d3f555ef5b3b7ed4d71caaa0ea47645b4213c304",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.rust/rust-style.rs: New file.\n+\t* gdb.rust/rust-style.exp: New file.\n+\t* gdb.base/style.exp: Test structure printing.\n+\t* gdb.base/style.c (struct some_struct): New type.\n+\t(enum etype): New type.\n+\t(struct_value): New global.\n+\n 2020-02-21  Tom de Vries  <tdevries@suse.de>\n \n \tPR go/18926"
    },
    {
      "sha": "cb75b3b915ea8afa56139beb6766eff52a61177a",
      "filename": "gdb/testsuite/gdb.base/style.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.base/style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.base/style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -15,6 +15,21 @@\n \n #define SOME_MACRO 23\n \n+enum etype\n+{\n+  VALUE_ONE = 1,\n+  VALUE_TWO = 2\n+};\n+\n+struct some_struct\n+{\n+  int int_field;\n+  char *string_field;\n+  enum etype e_field;\n+};\n+\n+struct some_struct struct_value = { 23, \"skidoo\", VALUE_TWO };\n+\n int some_called_function (void)\n {\n   return 0;"
    },
    {
      "sha": "47ef8c93c7c09dc7acb1f664038eafe99c7fae78",
      "filename": "gdb/testsuite/gdb.base/style.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.base/style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.base/style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.exp?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -87,6 +87,13 @@ save_vars { env(TERM) } {\n     # Somewhere should see the call to the function.\n     gdb_test \"disassemble main\" \"[style $hex address].*$func.*\"\n \n+    set ifield [style int_field variable]\n+    set sfield [style string_field variable]\n+    set efield [style e_field variable]\n+    set evalue [style VALUE_TWO variable]\n+    gdb_test \"print struct_value\" \\\n+\t\"\\{$ifield = 23,.*$sfield = .*,.*$efield = $evalue.*\"\n+\n     gdb_exit\n     gdb_spawn\n "
    },
    {
      "sha": "ec7e8a1764e52b03f5566c3c48e67fa2ea3aa35b",
      "filename": "gdb/testsuite/gdb.rust/rust-style.exp",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.rust/rust-style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.rust/rust-style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/rust-style.exp?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -0,0 +1,44 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test CLI output styling for Rust.\n+\n+load_lib rust-support.exp\n+if {[skip_rust_tests]} {\n+    continue\n+}\n+\n+save_vars { env(TERM) } {\n+    # We need an ANSI-capable terminal to get the output.\n+    setenv TERM ansi\n+\n+    standard_testfile .rs\n+    if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile \\\n+\t     {debug rust}]} {\n+\treturn -1\n+    }\n+\n+    set line [gdb_get_line_number \"breakpoint\"]\n+    if {![runto ${srcfile}:$line]} {\n+\tuntested \"could not run to breakpoint\"\n+\treturn -1\n+    }\n+\n+    set vfield [style value variable]\n+    set v2field [style value2 variable]\n+    gdb_test \"print v\" \\\n+\t\"Two\\{$vfield: 23, $v2field: 97\\}\"\n+\n+}"
    },
    {
      "sha": "9952f66578c09d5f58754fbd610439cac819a075",
      "filename": "gdb/testsuite/gdb.rust/rust-style.rs",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.rust/rust-style.rs",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/testsuite/gdb.rust/rust-style.rs",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/rust-style.rs?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This program is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3 of the License, or\n+// (at your option) any later version.\n+//\n+// This program is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n+\n+enum EnumType {\n+    One(i32),\n+    Two{value: i32, value2: i32},\n+}\n+\n+fn main() {\n+    let v = EnumType::Two{ value: 23, value2: 97 };\n+\n+    println!(\"\");               // breakpoint\n+}"
    },
    {
      "sha": "8adbb3df45714be5aa23cb842506cb6aa800dbd5",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f0cbb04d0fbb0923f2972efa95a4c767592860b/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=3f0cbb04d0fbb0923f2972efa95a4c767592860b",
      "patch": "@@ -625,7 +625,8 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n     }\n   if (i < len)\n     {\n-      fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+      fputs_styled (TYPE_FIELD_NAME (type, i), variable_name_style.style (),\n+\t\t    stream);\n     }\n   else if (TYPE_FLAG_ENUM (type))\n     {\n@@ -655,7 +656,8 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \t\tfputs_filtered (\" | \", stream);\n \n \t      val &= ~TYPE_FIELD_ENUMVAL (type, i);\n-\t      fputs_filtered (TYPE_FIELD_NAME (type, i), stream);\n+\t      fputs_styled (TYPE_FIELD_NAME (type, i),\n+\t\t\t    variable_name_style.style (), stream);\n \t    }\n \t}\n \n@@ -1268,8 +1270,10 @@ val_print_type_code_flags (struct type *type, const gdb_byte *valaddr,\n \t      && TYPE_FIELD_BITSIZE (type, field) == 1)\n \t    {\n \t      if (val & ((ULONGEST)1 << TYPE_FIELD_BITPOS (type, field)))\n-\t\tfprintf_filtered (stream, \" %s\",\n-\t\t\t\t  TYPE_FIELD_NAME (type, field));\n+\t\tfprintf_filtered\n+\t\t  (stream, \" %ps\",\n+\t\t   styled_string (variable_name_style.style (),\n+\t\t\t\t  TYPE_FIELD_NAME (type, field)));\n \t    }\n \t  else\n \t    {\n@@ -1279,8 +1283,9 @@ val_print_type_code_flags (struct type *type, const gdb_byte *valaddr,\n \n \t      if (field_len < sizeof (ULONGEST) * TARGET_CHAR_BIT)\n \t\tfield_val &= ((ULONGEST) 1 << field_len) - 1;\n-\t      fprintf_filtered (stream, \" %s=\",\n-\t\t\t\tTYPE_FIELD_NAME (type, field));\n+\t      fprintf_filtered (stream, \" %ps=\",\n+\t\t\t\tstyled_string (variable_name_style.style (),\n+\t\t\t\t\t       TYPE_FIELD_NAME (type, field)));\n \t      if (TYPE_CODE (field_type) == TYPE_CODE_ENUM)\n \t\tgeneric_val_print_enum_1 (field_type, field_val, stream);\n \t      else"
    }
  ]
}