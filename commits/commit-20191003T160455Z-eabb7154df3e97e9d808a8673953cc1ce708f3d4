{
  "sha": "eabb7154df3e97e9d808a8673953cc1ce708f3d4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWFiYjcxNTRkZjNlOTdlOWQ4MDhhODY3Mzk1M2NjMWNlNzA4ZjNkNA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-13T20:41:25Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:55Z"
    },
    "message": "libctf: add linking of the variable section\n\nThe compiler describes the name and type of all file-scope variables in\nthis section.  Merging it at link time requires using the type mapping\nadded in the previous commit to determine the appropriate type for the\nvariable in the output, given its type in the input: we check the shared\ncontainer first, and if the type doesn't exist there, it must be a\nconflicted type in the per-CU child, and the variable should go there\ntoo.  We also put the variable in the per-CU child if a variable with\nthe same name but a different type already exists in the parent: we\nignore any such conflict in the child because CTF cannot represent such\nthings, nor can they happen unless a third-party linking program has\noverridden the mapping of CU to CTF archive member name (using machinery\nadded in a later commit).\n\nv3: rewritten using an algorithm that actually works in the case of\n    conflicting names.  Some code motion from the next commit.  Set\n    the per-CU parent name.\nv4: check for strdup failure.\nv5: fix tabdamage.\n\ninclude/\n\t* ctf-api.h (ECTF_INTERNAL): New.\n\nlibctf/\n\t* ctf-link.c (ctf_create_per_cu): New, refactored out of...\n\t(ctf_link_one_type): ... here, with parent-name setting added.\n\t(check_variable): New.\n\t(ctf_link_one_variable): Likewise.\n\t(ctf_link_one_input_archive_member): Call it.\n\t* ctf-error.c (_ctf_errlist): Updated with new errors.",
    "tree": {
      "sha": "ab9fd36c30115b6c8d19ec062f5f14e1e2860cd9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab9fd36c30115b6c8d19ec062f5f14e1e2860cd9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eabb7154df3e97e9d808a8673953cc1ce708f3d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eabb7154df3e97e9d808a8673953cc1ce708f3d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eabb7154df3e97e9d808a8673953cc1ce708f3d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eabb7154df3e97e9d808a8673953cc1ce708f3d4/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "886453cbbc86ba63d8ab1264e9684a7698243eeb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/886453cbbc86ba63d8ab1264e9684a7698243eeb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/886453cbbc86ba63d8ab1264e9684a7698243eeb"
    }
  ],
  "stats": {
    "total": 177,
    "additions": 151,
    "deletions": 26
  },
  "files": [
    {
      "sha": "0122c1d628009d0c65077e109b921fdfab297c1b",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eabb7154df3e97e9d808a8673953cc1ce708f3d4/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eabb7154df3e97e9d808a8673953cc1ce708f3d4/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=eabb7154df3e97e9d808a8673953cc1ce708f3d4",
      "patch": "@@ -1,3 +1,7 @@\n+2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (ECTF_INTERNAL): New.\n+\n 2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (struct ctf_link_sym): New, a symbol in flight to the"
    },
    {
      "sha": "4130a2ecd1934a140be0be4966dc254e4ef281f1",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eabb7154df3e97e9d808a8673953cc1ce708f3d4/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eabb7154df3e97e9d808a8673953cc1ce708f3d4/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=eabb7154df3e97e9d808a8673953cc1ce708f3d4",
      "patch": "@@ -203,7 +203,8 @@ enum\n    ECTF_SLICEOVERFLOW,\t\t/* Overflow of type bitness or offset in slice.  */\n    ECTF_DUMPSECTUNKNOWN,\t/* Unknown section number in dump.  */\n    ECTF_DUMPSECTCHANGED,\t/* Section changed in middle of dump.  */\n-   ECTF_NOTYET\t\t\t/* Feature not yet implemented.  */\n+   ECTF_NOTYET,\t\t\t/* Feature not yet implemented.  */\n+   ECTF_INTERNAL\t\t/* Internal error in link.  */\n   };\n \n /* The CTF data model is inferred to be the caller's data model or the data"
    },
    {
      "sha": "a5995eb25d808d75e2f7722a316d33b2f903a42b",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eabb7154df3e97e9d808a8673953cc1ce708f3d4/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eabb7154df3e97e9d808a8673953cc1ce708f3d4/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=eabb7154df3e97e9d808a8673953cc1ce708f3d4",
      "patch": "@@ -1,3 +1,12 @@\n+2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-link.c (ctf_create_per_cu): New, refactored out of...\n+\t(ctf_link_one_type): ... here, with parent-name setting added.\n+\t(check_variable): New.\n+\t(ctf_link_one_variable): Likewise.\n+\t(ctf_link_one_input_archive_member): Call it.\n+\t* ctf-error.c (_ctf_errlist): Updated with new errors.\n+\n 2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_file_t): New field ctf_link_type_mapping."
    },
    {
      "sha": "93ffc6acc09c470c8a172a0fb2893ad02ed97c15",
      "filename": "libctf/ctf-error.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eabb7154df3e97e9d808a8673953cc1ce708f3d4/libctf/ctf-error.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eabb7154df3e97e9d808a8673953cc1ce708f3d4/libctf/ctf-error.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-error.c?ref=eabb7154df3e97e9d808a8673953cc1ce708f3d4",
      "patch": "@@ -69,7 +69,8 @@ static const char *const _ctf_errlist[] = {\n   \"Overflow of type bitness or offset in slice\",     /* ECTF_SLICEOVERFLOW */\n   \"Unknown section number in dump\",\t\t     /* ECTF_DUMPSECTUNKNOWN */\n   \"Section changed in middle of dump\",\t\t     /* ECTF_DUMPSECTCHANGED */\n-  \"Feature not yet implemented\"\t\t\t     /* ECTF_NOTYET */\n+  \"Feature not yet implemented\",\t\t     /* ECTF_NOTYET */\n+  \"Internal error in link\"\t\t\t     /* ECTF_INTERNAL */\n };\n \n static const int _ctf_nerr = sizeof (_ctf_errlist) / sizeof (_ctf_errlist[0]);"
    },
    {
      "sha": "8dd81d1f124192c335866fd052542fff580bae7f",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 134,
      "deletions": 24,
      "changes": 158,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eabb7154df3e97e9d808a8673953cc1ce708f3d4/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eabb7154df3e97e9d808a8673953cc1ce708f3d4/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=eabb7154df3e97e9d808a8673953cc1ce708f3d4",
      "patch": "@@ -175,6 +175,46 @@ ctf_link_add_ctf (ctf_file_t *fp, ctf_archive_t *ctf, const char *name)\n   return (ctf_set_errno (fp, ENOMEM));\n }\n \n+/* Return a per-CU output CTF dictionary suitable for the given CU, creating and\n+   interning it if need be.  */\n+\n+static ctf_file_t *\n+ctf_create_per_cu (ctf_file_t *fp, const char *filename, const char *cuname)\n+{\n+  ctf_file_t *cu_fp;\n+  char *dynname = NULL;\n+\n+  if ((cu_fp = ctf_dynhash_lookup (fp->ctf_link_outputs, filename)) == NULL)\n+    {\n+      int err;\n+\n+      if ((cu_fp = ctf_create (&err)) == NULL)\n+\t{\n+\t  ctf_dprintf (\"Cannot create per-CU CTF archive for CU %s from \"\n+\t\t       \"input file %s: %s\\n\", cuname, filename,\n+\t\t       ctf_errmsg (err));\n+\t  ctf_set_errno (fp, err);\n+\t  return NULL;\n+\t}\n+\n+      if ((dynname = strdup (filename)) == NULL)\n+\tgoto oom;\n+      if (ctf_dynhash_insert (fp->ctf_link_outputs, dynname, cu_fp) < 0)\n+\tgoto oom;\n+\n+      ctf_import (cu_fp, fp);\n+      ctf_cuname_set (cu_fp, cuname);\n+      ctf_parent_name_set (cu_fp, _CTF_SECTION);\n+    }\n+  return cu_fp;\n+\n+ oom:\n+  free (dynname);\n+  ctf_file_close (cu_fp);\n+  ctf_set_errno (fp, ENOMEM);\n+  return NULL;\n+}\n+\n typedef struct ctf_link_in_member_cb_arg\n {\n   ctf_file_t *out_fp;\n@@ -226,29 +266,9 @@ ctf_link_one_type (ctf_id_t type, int isroot _libctf_unused_, void *arg_)\n       ctf_set_errno (arg->out_fp, 0);\n     }\n \n-  if ((per_cu_out_fp = ctf_dynhash_lookup (arg->out_fp->ctf_link_outputs,\n-\t\t\t\t\t   arg->arcname)) == NULL)\n-    {\n-      int err;\n-\n-      if ((per_cu_out_fp = ctf_create (&err)) == NULL)\n-\t{\n-\t  ctf_dprintf (\"Cannot create per-CU CTF archive for member %s: %s\\n\",\n-\t\t       arg->arcname, ctf_errmsg (err));\n-\t  ctf_set_errno (arg->out_fp, err);\n-\t  return -1;\n-\t}\n-\n-      if (ctf_dynhash_insert (arg->out_fp->ctf_link_outputs, arg->arcname,\n-\t\t\t      per_cu_out_fp) < 0)\n-\t{\n-\t  ctf_set_errno (arg->out_fp, ENOMEM);\n-\t  return -1;\n-\t}\n-\n-      ctf_import (per_cu_out_fp, arg->out_fp);\n-      ctf_cuname_set (per_cu_out_fp, arg->cu_name);\n-    }\n+  if ((per_cu_out_fp = ctf_create_per_cu (arg->out_fp, arg->arcname,\n+\t\t\t\t\t  arg->cu_name)) == NULL)\n+    return -1;\t\t\t\t\t/* Errno is set for us.  */\n \n   if (ctf_add_type (per_cu_out_fp, arg->in_fp, type) != CTF_ERR)\n     return 0;\n@@ -263,6 +283,95 @@ ctf_link_one_type (ctf_id_t type, int isroot _libctf_unused_, void *arg_)\n   return 0;\t\t\t\t\t/* As above: do not lose types.  */\n }\n \n+/* Check if we can safely add a variable with the given type to this container.  */\n+\n+static int\n+check_variable (const char *name, ctf_file_t *fp, ctf_id_t type,\n+\t\tctf_dvdef_t **out_dvd)\n+{\n+  ctf_dvdef_t *dvd;\n+\n+  dvd = ctf_dynhash_lookup (fp->ctf_dvhash, name);\n+  *out_dvd = dvd;\n+  if (!dvd)\n+    return 1;\n+\n+  if (dvd->dvd_type != type)\n+    {\n+      /* Variable here.  Wrong type: cannot add.  Just skip it, because there is\n+\t no way to express this in CTF.  (This might be the parent, in which\n+\t case we'll try adding in the child first, and only then give up.)  */\n+      ctf_dprintf (\"Inexpressible duplicate variable %s skipped.\\n\", name);\n+    }\n+\n+  return 0;\t\t\t\t      /* Already exists.  */\n+}\n+\n+/* Link one variable in.  */\n+\n+static int\n+ctf_link_one_variable (const char *name, ctf_id_t type, void *arg_)\n+{\n+  ctf_link_in_member_cb_arg_t *arg = (ctf_link_in_member_cb_arg_t *) arg_;\n+  ctf_file_t *per_cu_out_fp;\n+  ctf_id_t dst_type = 0;\n+  ctf_file_t *check_fp;\n+  ctf_dvdef_t *dvd;\n+\n+  /* In unconflicted link mode, if this type is mapped to a type in the parent\n+     container, we want to try to add to that first: if it reports a duplicate,\n+     or if the type is in a child already, add straight to the child.  */\n+\n+  check_fp = arg->out_fp;\n+\n+  dst_type = ctf_type_mapping (arg->in_fp, type, &check_fp);\n+  if (dst_type != 0)\n+    {\n+      if (check_fp == arg->out_fp)\n+\t{\n+\t  if (check_variable (name, check_fp, dst_type, &dvd))\n+\t    {\n+\t      /* No variable here: we can add it.  */\n+\t      if (ctf_add_variable (check_fp, name, dst_type) < 0)\n+\t\treturn (ctf_set_errno (arg->out_fp, ctf_errno (check_fp)));\n+\t      return 0;\n+\t    }\n+\n+\t  /* Already present?  Nothing to do.  */\n+\t  if (dvd && dvd->dvd_type == type)\n+\t    return 0;\n+\t}\n+    }\n+\n+  /* Can't add to the parent due to a name clash, or because it references a\n+     type only present in the child.  Try adding to the child, creating if need\n+     be.  */\n+\n+  if ((per_cu_out_fp = ctf_create_per_cu (arg->out_fp, arg->arcname,\n+\t\t\t\t\t  arg->cu_name)) == NULL)\n+    return -1;\t\t\t\t\t/* Errno is set for us.  */\n+\n+  /* If the type was not found, check for it in the child too. */\n+  if (dst_type == 0)\n+    {\n+      check_fp = per_cu_out_fp;\n+      dst_type = ctf_type_mapping (arg->in_fp, type, &check_fp);\n+\n+      if (dst_type == 0)\n+\t{\n+\t  ctf_dprintf (\"Type %lx for variable %s in input file %s not \"\n+\t\t       \"found: skipped.\\n\", type, name, arg->file_name);\n+\t  /* Do not terminate the link: just skip the variable.  */\n+\t  return 0;\n+\t}\n+    }\n+\n+  if (check_variable (name, per_cu_out_fp, dst_type, &dvd))\n+    if (ctf_add_variable (per_cu_out_fp, name, dst_type) < 0)\n+      return (ctf_set_errno (arg->out_fp, ctf_errno (per_cu_out_fp)));\n+  return 0;\n+}\n+\n /* Merge every type and variable in this archive member into the link, so we can\n    relink things that have already had ld run on them.  We use the archive\n    member name, sans any leading '.ctf.', as the CU name for ambiguous types if\n@@ -316,7 +425,8 @@ ctf_link_one_input_archive_member (ctf_file_t *in_fp, const char *name, void *ar\n     arg->cu_name += strlen (\".ctf.\");\n   arg->in_fp = in_fp;\n \n-  err = ctf_type_iter_all (in_fp, ctf_link_one_type, arg);\n+  if ((err = ctf_type_iter_all (in_fp, ctf_link_one_type, arg)) > -1)\n+    err = ctf_variable_iter (in_fp, ctf_link_one_variable, arg);\n \n   arg->in_input_cu_file = 0;\n   free (arg->arcname);"
    }
  ]
}