{
  "sha": "1e42d01772d6b3faf74e622e318eada133e3c695",
  "node_id": "C_kwDOANOeidoAKDFlNDJkMDE3NzJkNmIzZmFmNzRlNjIyZTMxOGVhZGExMzNlM2M2OTU",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T05:31:57Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T18:24:00Z"
    },
    "message": "sim: drop unused gentmap & nltvals.def logic\n\nNow that all ports have switched to target-newlib-* files, there's\nno need for these files & generating things at build time.  So punt\nthe logic and make target-newlib-syscall a hard requirement.",
    "tree": {
      "sha": "547c95a8249a0253a5bb9e3f93ee89fcccb653f7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/547c95a8249a0253a5bb9e3f93ee89fcccb653f7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1e42d01772d6b3faf74e622e318eada133e3c695",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e42d01772d6b3faf74e622e318eada133e3c695",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1e42d01772d6b3faf74e622e318eada133e3c695",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e42d01772d6b3faf74e622e318eada133e3c695/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea"
    }
  ],
  "stats": {
    "total": 453,
    "additions": 31,
    "deletions": 422
  },
  "files": [
    {
      "sha": "bcccc0232a94adc721dceb75a3dea637d55bebe0",
      "filename": "sim/.gitignore",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1e42d01772d6b3faf74e622e318eada133e3c695/sim/.gitignore",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1e42d01772d6b3faf74e622e318eada133e3c695/sim/.gitignore",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/.gitignore?ref=1e42d01772d6b3faf74e622e318eada133e3c695",
      "patch": "@@ -1,7 +1,5 @@\n ChangeLog\n \n-/*/gentmap\n /*/run\n /*/hw-config.h\n-/*/targ-*\n /*/version.c"
    },
    {
      "sha": "2d4159393ac58c790af3e919e256fc617bf53122",
      "filename": "sim/common/Make-common.in",
      "status": "modified",
      "additions": 2,
      "deletions": 36,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1e42d01772d6b3faf74e622e318eada133e3c695/sim/common/Make-common.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1e42d01772d6b3faf74e622e318eada133e3c695/sim/common/Make-common.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/Make-common.in?ref=1e42d01772d6b3faf74e622e318eada133e3c695",
      "patch": "@@ -235,18 +235,12 @@ COMMON_OBJS_NAMES = \\\n \ttarget-newlib-errno.o \\\n \ttarget-newlib-open.o \\\n \ttarget-newlib-signal.o \\\n+\ttarget-newlib-syscall.o \\\n \tversion.o\n COMMON_OBJS = $(COMMON_OBJS_NAMES:%=../common/common_libcommon_a-%)\n \n LIB_OBJS = modules.o syscall.o $(COMMON_OBJS) $(SIM_OBJS)\n \n-# TODO: Migrate everyone to target-newlib-syscall.o.\n-ifeq ($(NL_TARGET),)\n-COMMON_OBJS_NAMES += target-newlib-syscall.o\n-else\n-LIB_OBJS += targ-map.o\n-endif\n-\n COMPILE_FOR_BUILD = $(CC_FOR_BUILD) $(BUILD_CFLAGS)\n LINK_FOR_BUILD = $(CC_FOR_BUILD) $(BUILD_CFLAGS) $(LDFLAGS_FOR_BUILD) -o $@\n \n@@ -266,29 +260,6 @@ run$(EXEEXT): $(SIM_RUN_OBJS) libsim.a $(LIBDEPS)\n \t$(ECHO_CCLD) $(CC) $(ALL_CFLAGS) $(LDFLAGS) -o run$(EXEEXT) \\\n \t  $(SIM_RUN_OBJS) libsim.a $(EXTRA_LIBS)\n \n-# FIXME: Ideally, callback.o and friends live in a library outside of\n-# both the gdb and simulator source trees (e.g. devo/remote.  Not\n-# devo/libremote because this directory would contain more than just\n-# a library).\n-\n-gentmap.o: Makefile $(srccom)/gentmap.c $(srccom)/nltvals.def\n-\t$(ECHO_CC) $(COMPILE_FOR_BUILD) -o $@ -c $(srccom)/gentmap.c $(NL_TARGET)\n-\n-gentmap: gentmap.o\n-\t$(ECHO_CC) $(LINK_FOR_BUILD) $<\n-\n-targ-vals.h targ-map.c: stamp-tvals\n-stamp-tvals: gentmap\n-\t$(ECHO_STAMP) targ-vals.h\n-\t$(SILENCE) ./gentmap -h >tmp-tvals.h\n-\t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-tvals.h targ-vals.h\n-ifneq ($(NL_TARGET),)\n-\t$(ECHO_STAMP) targ-tmap.c\n-\t$(SILENCE) ./gentmap -c >tmp-tmap.c\n-\t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-tmap.c targ-map.c\n-endif\n-\t$(SILENCE) touch $@\n-\n #\n # Rules for building sim-* components.  Triggered by listing the corresponding\n # .o file in the list of simulator targets.\n@@ -413,11 +384,7 @@ all_object_files = $(LIB_OBJS) $(SIM_RUN_OBJS)\n generated_files = \\\n \t$(SIM_EXTRA_DEPS) \\\n \thw-config.h \\\n-\tmodules.c \\\n-\ttarg-vals.h\n-ifneq ($(NL_TARGET),)\n-generated_files += targ-map.c\n-endif\n+\tmodules.c\n \n # Ensure that generated files are created early.  Use order-only\n # dependencies if available.  They require GNU make 3.80 or newer,\n@@ -532,7 +499,6 @@ mostlyclean clean: $(SIM_EXTRA_CLEAN)\n \t\trun$(EXEEXT) libsim.a \\\n \t\thw-config.h stamp-hw \\\n \t\tmodules.c stamp-modules \\\n-\t\tgentmap targ-map.c targ-vals.h stamp-tvals \\\n \t\ttmp-mloop.hin tmp-mloop.h tmp-mloop.cin tmp-mloop.c\n \n distclean maintainer-clean realclean: clean $(SIM_EXTRA_DISTCLEAN)"
    },
    {
      "sha": "3f2422c42160191f7860727279a5e030b6e8c349",
      "filename": "sim/common/gennltvals.py",
      "status": "modified",
      "additions": 28,
      "deletions": 56,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1e42d01772d6b3faf74e622e318eada133e3c695/sim/common/gennltvals.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1e42d01772d6b3faf74e622e318eada133e3c695/sim/common/gennltvals.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gennltvals.py?ref=1e42d01772d6b3faf74e622e318eada133e3c695",
      "patch": "@@ -16,9 +16,9 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n-\"\"\"Helper to generate nltvals.def.\n+\"\"\"Helper to generate target-newlib-* files.\n \n-nltvals.def is a file that describes various newlib/libgloss target values used\n+target-newlib-* are files that describe various newlib/libgloss values used\n by the host/target interface.  This needs to be rerun whenever the newlib source\n changes.  Developers manually run it.\n \n@@ -99,7 +99,7 @@ def extract_syms(cpp: str, srcdir: Path,\n     return ret\n \n \n-def gentvals(output_dir: Path, output: TextIO,\n+def gentvals(output_dir: Path,\n              cpp: str, srctype: str, srcdir: Path,\n              headers: Iterable[str],\n              pattern: str,\n@@ -118,62 +118,37 @@ def gentvals(output_dir: Path, output: TextIO,\n \n     syms = extract_syms(cpp, srcdir, headers, pattern, filter)\n \n-    # If we have a map file, use it directly.\n     target_map = output_dir / f'target-newlib-{srctype}.c'\n-    if target_map.exists():\n-        old_lines = target_map.read_text().splitlines()\n-        start_i = end_i = None\n-        for i, line in enumerate(old_lines):\n-            if START_MARKER in line:\n-                start_i = i\n-            if END_MARKER in line:\n-                end_i = i\n-        assert start_i and end_i\n-        new_lines = old_lines[0:start_i + 1]\n-        new_lines.extend(\n-            f'#ifdef {sym}\\n'\n-            f'  {{ \"{sym}\", {sym}, {val} }},\\n'\n-            f'#endif' for sym, val in sorted(syms.items()))\n-        new_lines.extend(old_lines[end_i:])\n-        target_map.write_text('\\n'.join(new_lines) + '\\n')\n-        return\n-\n-    # Fallback to classic nltvals.def.\n-    if target is not None:\n-        print(f'#ifdef NL_TARGET_{target}', file=output)\n-    print(f'#ifdef {srctype}_defs', file=output)\n-\n-    print('\\n'.join(f'/* from {x} */' for x in headers), file=output)\n-\n-    if target is None:\n-        print(f'/* begin {srctype} target macros */', file=output)\n-    else:\n-        print(f'/* begin {target} {srctype} target macros */', file=output)\n-\n-    for sym, val in sorted(syms.items()):\n-        print(f' {{ \"{sym}\", {val} }},', file=output)\n-\n-    print(f'#undef {srctype}_defs', file=output)\n-    if target is None:\n-        print(f'/* end {srctype} target macros */', file=output)\n-    else:\n-        print(f'/* end {target} {srctype} target macros */', file=output)\n-        print('#endif', file=output)\n-    print('#endif', file=output)\n+    assert target_map.exists(), f'{target_map}: Missing skeleton'\n+    old_lines = target_map.read_text().splitlines()\n+    start_i = end_i = None\n+    for i, line in enumerate(old_lines):\n+        if START_MARKER in line:\n+            start_i = i\n+        if END_MARKER in line:\n+            end_i = i\n+    assert start_i and end_i\n+    new_lines = old_lines[0:start_i + 1]\n+    new_lines.extend(\n+        f'#ifdef {sym}\\n'\n+        f'  {{ \"{sym}\", {sym}, {val} }},\\n'\n+        f'#endif' for sym, val in sorted(syms.items()))\n+    new_lines.extend(old_lines[end_i:])\n+    target_map.write_text('\\n'.join(new_lines) + '\\n')\n \n \n-def gen_common(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n+def gen_common(output_dir: Path, newlib: Path, cpp: str):\n     \"\"\"Generate the common C library constants.\n \n     No arch should override these.\n     \"\"\"\n-    gentvals(output_dir, output, cpp, 'errno', newlib / 'newlib/libc/include',\n+    gentvals(output_dir, cpp, 'errno', newlib / 'newlib/libc/include',\n              ('errno.h', 'sys/errno.h'), 'E[A-Z0-9]*')\n \n-    gentvals(output_dir, output, cpp, 'signal', newlib / 'newlib/libc/include',\n+    gentvals(output_dir, cpp, 'signal', newlib / 'newlib/libc/include',\n              ('signal.h', 'sys/signal.h'), r'SIG[A-Z0-9]*', filter=r'SIGSTKSZ')\n \n-    gentvals(output_dir, output, cpp, 'open', newlib / 'newlib/libc/include',\n+    gentvals(output_dir, cpp, 'open', newlib / 'newlib/libc/include',\n              ('fcntl.h', 'sys/fcntl.h', 'sys/_default_fcntl.h'), r'O_[A-Z0-9]*')\n \n \n@@ -248,16 +223,15 @@ def gen_target_syscall(output_dir: Path, newlib: Path, cpp: str):\n     target_map_h.write_text('\\n'.join(new_lines_h) + '\\n')\n \n \n-def gen_targets(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n+def gen_targets(output_dir: Path, newlib: Path, cpp: str):\n     \"\"\"Generate the target-specific lists.\"\"\"\n     gen_target_syscall(output_dir, newlib, cpp)\n \n \n-def gen(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n+def gen(output_dir: Path, newlib: Path, cpp: str):\n     \"\"\"Generate all the things!\"\"\"\n-    print(FILE_HEADER, file=output)\n-    gen_common(output_dir, output, newlib, cpp)\n-    gen_targets(output_dir, output, newlib, cpp)\n+    gen_common(output_dir, newlib, cpp)\n+    gen_targets(output_dir, newlib, cpp)\n \n \n def get_parser() -> argparse.ArgumentParser:\n@@ -315,9 +289,7 @@ def main(argv: List[str]) -> int:\n     \"\"\"The main entry point for scripts.\"\"\"\n     opts = parse_args(argv)\n \n-    output = (opts.output / 'nltvals.def').open('w', encoding='utf-8')\n-\n-    gen(opts.output, output, opts.newlib, opts.cpp)\n+    gen(opts.output, opts.newlib, opts.cpp)\n     return 0\n \n "
    },
    {
      "sha": "4a55c296694381caa960ed3e4f58cabe1fac164d",
      "filename": "sim/common/gentmap.c",
      "status": "removed",
      "additions": 0,
      "deletions": 79,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea/sim/common/gentmap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea/sim/common/gentmap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gentmap.c?ref=6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea",
      "patch": "@@ -1,79 +0,0 @@\n-/* Generate targ-vals.h and targ-map.c.  */\n-\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n-struct tdefs {\n-  char *symbol;\n-  int value;\n-};\n-\n-static struct tdefs sys_tdefs[] = {\n-#define sys_defs\n-#include \"nltvals.def\"\n-#undef sys_defs\n-  { 0, 0 }\n-};\n-\n-static void\n-gen_targ_vals_h (void)\n-{\n-  struct tdefs *t;\n-\n-  printf (\"/* Target header values needed by the simulator and gdb.  */\\n\");\n-  printf (\"/* This file is machine generated by gentmap.c.  */\\n\\n\");\n-\n-  printf (\"#ifndef TARG_VALS_H\\n\");\n-  printf (\"#define TARG_VALS_H\\n\\n\");\n-\n-  printf (\"/* syscall values */\\n\");\n-  for (t = &sys_tdefs[0]; t->symbol; ++t)\n-    printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n-  printf (\"\\n\");\n-\n-  printf (\"#endif /* TARG_VALS_H */\\n\");\n-}\n-\n-static void\n-gen_targ_map_c (void)\n-{\n-  struct tdefs *t;\n-\n-  printf (\"/* Target value mapping utilities needed by the simulator and gdb.  */\\n\");\n-  printf (\"/* This file is machine generated by gentmap.c.  */\\n\\n\");\n-\n-  printf (\"#include \\\"defs.h\\\"\\n\");\n-  printf (\"#include \\\"ansidecl.h\\\"\\n\");\n-  printf (\"#include \\\"sim/callback.h\\\"\\n\");\n-  printf (\"#include \\\"targ-vals.h\\\"\\n\");\n-  printf (\"\\n\");\n-\n-  printf (\"/* syscall mapping table */\\n\");\n-  printf (\"CB_TARGET_DEFS_MAP cb_init_syscall_map[] = {\\n\");\n-  for (t = &sys_tdefs[0]; t->symbol; ++t)\n-    {\n-      printf (\"#ifdef CB_%s\\n\", t->symbol);\n-      /* Skip the \"SYS_\" prefix for the name.  */\n-      printf (\"  { \\\"%s\\\", CB_%s, TARGET_%s },\\n\", t->symbol + 4, t->symbol, t->symbol);\n-      printf (\"#endif\\n\");\n-    }\n-  printf (\"  { 0, -1, -1 }\\n\");\n-  printf (\"};\\n\\n\");\n-}\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  if (argc != 2)\n-    abort ();\n-\n-  if (strcmp (argv[1], \"-h\") == 0)\n-    gen_targ_vals_h ();\n-  else if (strcmp (argv[1], \"-c\") == 0)\n-    gen_targ_map_c ();\n-  else\n-    abort ();\n-\n-  exit (0);\n-}"
    },
    {
      "sha": "2425b70e490a940c5a0cc1ce6bf8b6bd26ddfbbc",
      "filename": "sim/common/nltvals.def",
      "status": "removed",
      "additions": 0,
      "deletions": 248,
      "changes": 248,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea/sim/common/nltvals.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea/sim/common/nltvals.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/nltvals.def?ref=6cbb891faa7c5c9f8c4d7bc2d816b0c7863ff4ea",
      "patch": "@@ -1,248 +0,0 @@\n-/* Newlib/libgloss macro values needed by remote target support.  */\n-/* This file is machine generated by gennltvals.py.  */\n-#ifdef NL_TARGET_cr16\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin cr16 sys target macros */\n- { \"SYS_ARG\", 24 },\n- { \"SYS_chdir\", 12 },\n- { \"SYS_chmod\", 15 },\n- { \"SYS_chown\", 16 },\n- { \"SYS_close\", 0x402 },\n- { \"SYS_create\", 8 },\n- { \"SYS_execv\", 11 },\n- { \"SYS_execve\", 59 },\n- { \"SYS_exit\", 0x410 },\n- { \"SYS_fork\", 2 },\n- { \"SYS_fstat\", 22 },\n- { \"SYS_getpid\", 20 },\n- { \"SYS_isatty\", 21 },\n- { \"SYS_kill\", 60 },\n- { \"SYS_link\", 9 },\n- { \"SYS_lseek\", 0x405 },\n- { \"SYS_mknod\", 14 },\n- { \"SYS_open\", 0x401 },\n- { \"SYS_pipe\", 42 },\n- { \"SYS_read\", 0x403 },\n- { \"SYS_rename\", 0x406 },\n- { \"SYS_stat\", 38 },\n- { \"SYS_time\", 0x300 },\n- { \"SYS_unlink\", 0x407 },\n- { \"SYS_utime\", 201 },\n- { \"SYS_wait\", 202 },\n- { \"SYS_wait4\", 7 },\n- { \"SYS_write\", 0x404 },\n-#undef sys_defs\n-/* end cr16 sys target macros */\n-#endif\n-#endif\n-#ifdef NL_TARGET_d10v\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin d10v sys target macros */\n- { \"SYS_ARG\", 24 },\n- { \"SYS_chdir\", 12 },\n- { \"SYS_chmod\", 15 },\n- { \"SYS_chown\", 16 },\n- { \"SYS_close\", 6 },\n- { \"SYS_creat\", 8 },\n- { \"SYS_execv\", 11 },\n- { \"SYS_execve\", 59 },\n- { \"SYS_exit\", 1 },\n- { \"SYS_fork\", 2 },\n- { \"SYS_fstat\", 22 },\n- { \"SYS_getpid\", 20 },\n- { \"SYS_isatty\", 21 },\n- { \"SYS_kill\", 60 },\n- { \"SYS_link\", 9 },\n- { \"SYS_lseek\", 19 },\n- { \"SYS_mknod\", 14 },\n- { \"SYS_open\", 5 },\n- { \"SYS_pipe\", 42 },\n- { \"SYS_read\", 3 },\n- { \"SYS_stat\", 38 },\n- { \"SYS_time\", 23 },\n- { \"SYS_unlink\", 10 },\n- { \"SYS_utime\", 201 },\n- { \"SYS_wait\", 202 },\n- { \"SYS_wait4\", 7 },\n- { \"SYS_write\", 4 },\n-#undef sys_defs\n-/* end d10v sys target macros */\n-#endif\n-#endif\n-#ifdef NL_TARGET_mcore\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin mcore sys target macros */\n- { \"SYS_access\", 33 },\n- { \"SYS_close\", 6 },\n- { \"SYS_creat\", 8 },\n- { \"SYS_link\", 9 },\n- { \"SYS_lseek\", 19 },\n- { \"SYS_open\", 5 },\n- { \"SYS_read\", 3 },\n- { \"SYS_time\", 13 },\n- { \"SYS_times\", 43 },\n- { \"SYS_unlink\", 10 },\n- { \"SYS_write\", 4 },\n-#undef sys_defs\n-/* end mcore sys target macros */\n-#endif\n-#endif\n-#ifdef NL_TARGET_riscv\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin riscv sys target macros */\n- { \"SYS_access\", 1033 },\n- { \"SYS_brk\", 214 },\n- { \"SYS_chdir\", 49 },\n- { \"SYS_clock_gettime64\", 403 },\n- { \"SYS_close\", 57 },\n- { \"SYS_dup\", 23 },\n- { \"SYS_exit\", 93 },\n- { \"SYS_exit_group\", 94 },\n- { \"SYS_faccessat\", 48 },\n- { \"SYS_fcntl\", 25 },\n- { \"SYS_fstat\", 80 },\n- { \"SYS_fstatat\", 79 },\n- { \"SYS_getcwd\", 17 },\n- { \"SYS_getdents\", 61 },\n- { \"SYS_getegid\", 177 },\n- { \"SYS_geteuid\", 175 },\n- { \"SYS_getgid\", 176 },\n- { \"SYS_getmainvars\", 2011 },\n- { \"SYS_getpid\", 172 },\n- { \"SYS_gettimeofday\", 169 },\n- { \"SYS_getuid\", 174 },\n- { \"SYS_kill\", 129 },\n- { \"SYS_link\", 1025 },\n- { \"SYS_lseek\", 62 },\n- { \"SYS_lstat\", 1039 },\n- { \"SYS_mkdir\", 1030 },\n- { \"SYS_mmap\", 222 },\n- { \"SYS_mremap\", 216 },\n- { \"SYS_munmap\", 215 },\n- { \"SYS_open\", 1024 },\n- { \"SYS_openat\", 56 },\n- { \"SYS_pread\", 67 },\n- { \"SYS_pwrite\", 68 },\n- { \"SYS_read\", 63 },\n- { \"SYS_rt_sigaction\", 134 },\n- { \"SYS_stat\", 1038 },\n- { \"SYS_time\", 1062 },\n- { \"SYS_times\", 153 },\n- { \"SYS_uname\", 160 },\n- { \"SYS_unlink\", 1026 },\n- { \"SYS_write\", 64 },\n- { \"SYS_writev\", 66 },\n-#undef sys_defs\n-/* end riscv sys target macros */\n-#endif\n-#endif\n-#ifdef NL_TARGET_sh\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin sh sys target macros */\n- { \"SYS_ARG\", 24 },\n- { \"SYS_argc\", 172 },\n- { \"SYS_argn\", 174 },\n- { \"SYS_argnlen\", 173 },\n- { \"SYS_chdir\", 12 },\n- { \"SYS_chmod\", 15 },\n- { \"SYS_chown\", 16 },\n- { \"SYS_close\", 6 },\n- { \"SYS_creat\", 8 },\n- { \"SYS_execv\", 11 },\n- { \"SYS_execve\", 59 },\n- { \"SYS_exit\", 1 },\n- { \"SYS_fork\", 2 },\n- { \"SYS_fstat\", 22 },\n- { \"SYS_ftruncate\", 130 },\n- { \"SYS_getpid\", 20 },\n- { \"SYS_isatty\", 21 },\n- { \"SYS_link\", 9 },\n- { \"SYS_lseek\", 19 },\n- { \"SYS_mknod\", 14 },\n- { \"SYS_open\", 5 },\n- { \"SYS_pipe\", 42 },\n- { \"SYS_read\", 3 },\n- { \"SYS_stat\", 38 },\n- { \"SYS_time\", 23 },\n- { \"SYS_truncate\", 129 },\n- { \"SYS_unlink\", 10 },\n- { \"SYS_utime\", 201 },\n- { \"SYS_wait\", 202 },\n- { \"SYS_wait4\", 7 },\n- { \"SYS_write\", 4 },\n-#undef sys_defs\n-/* end sh sys target macros */\n-#endif\n-#endif\n-#ifdef NL_TARGET_v850\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin v850 sys target macros */\n- { \"SYS_ARG\", 24 },\n- { \"SYS_chdir\", 12 },\n- { \"SYS_chmod\", 15 },\n- { \"SYS_chown\", 16 },\n- { \"SYS_close\", 6 },\n- { \"SYS_creat\", 8 },\n- { \"SYS_execv\", 11 },\n- { \"SYS_execve\", 59 },\n- { \"SYS_exit\", 1 },\n- { \"SYS_fork\", 2 },\n- { \"SYS_fstat\", 22 },\n- { \"SYS_getpid\", 20 },\n- { \"SYS_gettimeofday\", 116 },\n- { \"SYS_isatty\", 21 },\n- { \"SYS_link\", 9 },\n- { \"SYS_lseek\", 19 },\n- { \"SYS_mknod\", 14 },\n- { \"SYS_open\", 5 },\n- { \"SYS_pipe\", 42 },\n- { \"SYS_read\", 3 },\n- { \"SYS_rename\", 134 },\n- { \"SYS_stat\", 38 },\n- { \"SYS_time\", 23 },\n- { \"SYS_times\", 43 },\n- { \"SYS_unlink\", 10 },\n- { \"SYS_utime\", 201 },\n- { \"SYS_wait\", 202 },\n- { \"SYS_wait4\", 7 },\n- { \"SYS_write\", 4 },\n-#undef sys_defs\n-/* end v850 sys target macros */\n-#endif\n-#endif\n-#ifdef sys_defs\n-/* from syscall.h */\n-/* begin sys target macros */\n- { \"SYS_argc\", 22 },\n- { \"SYS_argn\", 24 },\n- { \"SYS_argnlen\", 23 },\n- { \"SYS_argv\", 13 },\n- { \"SYS_argvlen\", 12 },\n- { \"SYS_chdir\", 14 },\n- { \"SYS_chmod\", 16 },\n- { \"SYS_close\", 3 },\n- { \"SYS_exit\", 1 },\n- { \"SYS_fstat\", 10 },\n- { \"SYS_getpid\", 8 },\n- { \"SYS_gettimeofday\", 19 },\n- { \"SYS_kill\", 9 },\n- { \"SYS_link\", 21 },\n- { \"SYS_lseek\", 6 },\n- { \"SYS_open\", 2 },\n- { \"SYS_read\", 4 },\n- { \"SYS_reconfig\", 25 },\n- { \"SYS_stat\", 15 },\n- { \"SYS_time\", 18 },\n- { \"SYS_times\", 20 },\n- { \"SYS_unlink\", 7 },\n- { \"SYS_utime\", 17 },\n- { \"SYS_write\", 5 },\n-#undef sys_defs\n-/* end sys target macros */\n-#endif"
    },
    {
      "sha": "5c669279ae637e45a49f4429683f9ce006fa6078",
      "filename": "sim/mips/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1e42d01772d6b3faf74e622e318eada133e3c695/sim/mips/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1e42d01772d6b3faf74e622e318eada133e3c695/sim/mips/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/Makefile.in?ref=1e42d01772d6b3faf74e622e318eada133e3c695",
      "patch": "@@ -454,7 +454,7 @@ BUILT_SRC_FROM_MULTI = @sim_multi_src@\n SIM_MULTI_IGEN_CONFIGS = @sim_multi_igen_configs@\n \n $(BUILT_SRC_FROM_MULTI): tmp-multi\n-tmp-multi: tmp-mach-multi tmp-itable-multi tmp-run-multi targ-vals.h\n+tmp-multi: tmp-mach-multi tmp-itable-multi tmp-run-multi\n tmp-mach-multi: $(IGEN_INSN) $(IGEN_DC) $(IGEN) $(IGEN_INCLUDE)\n \tfor t in $(SIM_MULTI_IGEN_CONFIGS); do \\\n \t  p=`echo $${t} | sed -e 's/:.*//'` ; \\"
    }
  ]
}