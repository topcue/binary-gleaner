{
  "sha": "f74a6307279f162e892e570448dc2433963db1d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Zjc0YTYzMDcyNzlmMTYyZTg5MmU1NzA0NDhkYzI0MzM5NjNkYjFkOA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-08T08:06:24Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-08T08:06:24Z"
    },
    "message": "x86: convert RegMask and RegBND from bitfield to enumerator\n\nThis is to further shrink the operand type representation.",
    "tree": {
      "sha": "8511668a57eb3a30335ab74559d0adc94bdec513",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8511668a57eb3a30335ab74559d0adc94bdec513"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f74a6307279f162e892e570448dc2433963db1d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f74a6307279f162e892e570448dc2433963db1d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f74a6307279f162e892e570448dc2433963db1d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f74a6307279f162e892e570448dc2433963db1d8/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3528c362d9471524cfe8a76c692081838b292d64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3528c362d9471524cfe8a76c692081838b292d64",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3528c362d9471524cfe8a76c692081838b292d64"
    }
  ],
  "stats": {
    "total": 29153,
    "additions": 14587,
    "deletions": 14566
  },
  "files": [
    {
      "sha": "75e056c7ab016690707a58a3a1b05d8e2ce247f1",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (optimize_encoding, build_modrm_byte,\n+\tcheck_VecOperations, parse_real_register): Use \"class\" instead\n+\tof \"regmask\" and \"regbnd\" fields.\n+\n 2019-11-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (match_mem_size, operand_size_match,"
    },
    {
      "sha": "ba6b82af1897b4196c2525854b7d59ec0b8807bc",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -4154,7 +4154,7 @@ optimize_encoding (void)\n \t  else\n \t    return;\n \t}\n-      else if (i.tm.operand_types[0].bitfield.regmask)\n+      else if (i.tm.operand_types[0].bitfield.class == RegMask)\n \t{\n \t  i.tm.base_opcode &= 0xff;\n \t  i.tm.opcode_modifier.vexw = VEXW0;\n@@ -7682,8 +7682,8 @@ build_modrm_byte (void)\n \t  for (op = 0; op < i.operands; op++)\n \t    {\n \t      if (i.types[op].bitfield.class == Reg\n-\t\t  || i.types[op].bitfield.regbnd\n-\t\t  || i.types[op].bitfield.regmask\n+\t\t  || i.types[op].bitfield.class == RegBND\n+\t\t  || i.types[op].bitfield.class == RegMask\n \t\t  || i.types[op].bitfield.class == SReg\n \t\t  || i.types[op].bitfield.class == RegCR\n \t\t  || i.types[op].bitfield.class == RegDR\n@@ -9238,7 +9238,7 @@ check_VecOperations (char *op_string, char *op_end)\n \t  else if ((mask = parse_register (op_string, &end_op)) != NULL)\n \t    {\n \t      /* k0 can't be used for write mask.  */\n-\t      if (!mask->reg_type.bitfield.regmask || mask->reg_num == 0)\n+\t      if (mask->reg_type.bitfield.class != RegMask || !mask->reg_num)\n \t\t{\n \t\t  as_bad (_(\"`%s%s' can't be used for write mask\"),\n \t\t\t  register_prefix, mask->reg_name);\n@@ -10935,7 +10935,8 @@ parse_real_register (char *reg_string, char **end_op)\n \n   if (!cpu_arch_flags.bitfield.cpuavx512f)\n     {\n-      if (r->reg_type.bitfield.zmmword || r->reg_type.bitfield.regmask)\n+      if (r->reg_type.bitfield.zmmword\n+\t  || r->reg_type.bitfield.class == RegMask)\n \treturn (const reg_entry *) NULL;\n \n       if (!cpu_arch_flags.bitfield.cpuavx)\n@@ -10948,7 +10949,7 @@ parse_real_register (char *reg_string, char **end_op)\n \t}\n     }\n \n-  if (r->reg_type.bitfield.regbnd && !cpu_arch_flags.bitfield.cpumpx)\n+  if (r->reg_type.bitfield.class == RegBND && !cpu_arch_flags.bitfield.cpumpx)\n     return (const reg_entry *) NULL;\n \n   /* Don't allow fake index register unless allow_index_reg isn't 0. */"
    },
    {
      "sha": "496d93053e151c9cde221950028c711e182a2c38",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -1,3 +1,18 @@\n+2019-11-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init): Add Class= to\n+\tOPERAND_TYPE_REGMASK and OPERAND_TYPE_REGBND entries. Move up\n+\tOPERAND_TYPE_REGBND entry.\n+\t(operand_classes): Add RegMask and RegBND entries.\n+\t(operand_types): Drop RegMask and RegBND entry.\n+\t* i386-opc.h (enum operand_class): Add RegMask and RegBND.\n+\t(RegMask, RegBND): Delete.\n+\t(union i386_operand_type): Remove regmask and regbnd fields.\n+\t* i386-opc.tbl (RegMask, RegBND): Define.\n+\t* i386-reg.tbl: Replace RegMask by Class=RegMask and RegBND by\n+\tClass=RegBND.\n+\t* i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-11-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (operand_type_init): Add Class= to"
    },
    {
      "sha": "523510c4aa6a8b372a1b8d752c33550aa1273352",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -448,7 +448,9 @@ static initializer operand_type_init[] =\n   { \"OPERAND_TYPE_REGZMM\",\n     \"Class=RegSIMD|Zmmword\" },\n   { \"OPERAND_TYPE_REGMASK\",\n-    \"RegMask\" },\n+    \"Class=RegMask\" },\n+  { \"OPERAND_TYPE_REGBND\",\n+    \"Class=RegBND\" },\n   { \"OPERAND_TYPE_ESSEG\",\n     \"EsSeg\" },\n   { \"OPERAND_TYPE_ACC8\",\n@@ -481,8 +483,6 @@ static initializer operand_type_init[] =\n     \"Imm32|Imm32S|Imm64|Disp32|Disp64\" },\n   { \"OPERAND_TYPE_ANYIMM\",\n     \"Imm1|Imm8|Imm8S|Imm16|Imm32|Imm32S|Imm64\" },\n-  { \"OPERAND_TYPE_REGBND\",\n-    \"RegBND\" },\n };\n \n typedef struct bitfield\n@@ -689,13 +689,14 @@ static const struct {\n   CLASS (RegTR),\n   CLASS (RegMMX),\n   CLASS (RegSIMD),\n+  CLASS (RegMask),\n+  CLASS (RegBND),\n };\n \n #undef CLASS\n \n static bitfield operand_types[] =\n {\n-  BITFIELD (RegMask),\n   BITFIELD (Imm1),\n   BITFIELD (Imm8),\n   BITFIELD (Imm8S),\n@@ -725,7 +726,6 @@ static bitfield operand_types[] =\n   BITFIELD (Zmmword),\n   BITFIELD (Unspecified),\n   BITFIELD (Anysize),\n-  BITFIELD (RegBND),\n #ifdef OTUnused\n   BITFIELD (OTUnused),\n #endif"
    },
    {
      "sha": "8011282495308e788e9f7290148aa9e5df15d89e",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 87,
      "deletions": 87,
      "changes": 174,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -1365,196 +1365,196 @@\n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n-  { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n-  { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n-  { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n-  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SREG \\\n   { { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_JUMPABSOLUTE \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define OPERAND_TYPE_REGBND \\\n+  { { 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ESSEG \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n-  { { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n-  { { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n-  { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYIMM \\\n-  { { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n-\n-#define OPERAND_TYPE_REGBND \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } }\n+  { { 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }"
    },
    {
      "sha": "dcb8ea3ca373b93ad09d72b71b1206fd50758476",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -715,6 +715,8 @@ enum operand_class\n   RegTR, /* Test register */\n   RegMMX, /* MMX register */\n   RegSIMD, /* XMM/YMM/ZMM registers, distinguished by operand size */\n+  RegMask, /* Vector Mask register */\n+  RegBND, /* Bound register */\n };\n \n /* Position of operand_type bits.  */\n@@ -723,8 +725,6 @@ enum\n {\n   /* Class */\n   Class = CLASS_WIDTH - 1,\n-  /* Vector Mask registers */\n-  RegMask,\n   /* 1 bit immediate */\n   Imm1,\n   /* 8 bit immediate */\n@@ -791,9 +791,6 @@ enum\n   /* Any memory size.  */\n   Anysize,\n \n-  /* Bound register.  */\n-  RegBND,\n-\n   /* The number of bits in i386_operand_type.  */\n   OTNum\n };\n@@ -812,7 +809,6 @@ typedef union i386_operand_type\n   struct\n     {\n       unsigned int class:CLASS_WIDTH;\n-      unsigned int regmask:1;\n       unsigned int imm1:1;\n       unsigned int imm8:1;\n       unsigned int imm8s:1;\n@@ -842,7 +838,6 @@ typedef union i386_operand_type\n       unsigned int zmmword:1;\n       unsigned int unspecified:1;\n       unsigned int anysize:1;\n-      unsigned int regbnd:1;\n #ifdef OTUnused\n       unsigned int unused:(OTNumOfBits - OTUnused);\n #endif"
    },
    {
      "sha": "6ed794c08aeec379a182664212965f2f531cdbb1",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -41,6 +41,10 @@\n #define RegYMM Class=RegSIMD|Ymmword\n #define RegZMM Class=RegSIMD|Zmmword\n \n+#define RegMask Class=RegMask\n+\n+#define RegBND Class=RegBND\n+\n #define Size16 Size=SIZE16\n #define Size32 Size=SIZE32\n #define Size64 Size=SIZE64"
    },
    {
      "sha": "d5ca962631b8842c90f5f410ecec7c218755f77d",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=f74a6307279f162e892e570448dc2433963db1d8",
      "patch": "@@ -96,14 +96,14 @@ r13, Class=Reg|Qword|BaseIndex, RegRex, 5, Dw2Inval, 13\n r14, Class=Reg|Qword|BaseIndex, RegRex, 6, Dw2Inval, 14\n r15, Class=Reg|Qword|BaseIndex, RegRex, 7, Dw2Inval, 15\n // Vector mask registers.\n-k0, RegMask, 0, 0, 93, 118\n-k1, RegMask, 0, 1, 94, 119\n-k2, RegMask, 0, 2, 95, 120\n-k3, RegMask, 0, 3, 96, 121\n-k4, RegMask, 0, 4, 97, 122\n-k5, RegMask, 0, 5, 98, 123\n-k6, RegMask, 0, 6, 99, 124\n-k7, RegMask, 0, 7, 100, 125\n+k0, Class=RegMask, 0, 0, 93, 118\n+k1, Class=RegMask, 0, 1, 94, 119\n+k2, Class=RegMask, 0, 2, 95, 120\n+k3, Class=RegMask, 0, 3, 96, 121\n+k4, Class=RegMask, 0, 4, 97, 122\n+k5, Class=RegMask, 0, 5, 98, 123\n+k6, Class=RegMask, 0, 6, 99, 124\n+k7, Class=RegMask, 0, 7, 100, 125\n // Segment registers.\n es, Class=SReg, 0, 0, 40, 50\n cs, Class=SReg, 0, 1, 41, 51\n@@ -279,10 +279,10 @@ zmm29, Class=RegSIMD|Zmmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n zmm30, Class=RegSIMD|Zmmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n zmm31, Class=RegSIMD|Zmmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n // Bound registers for MPX\n-bnd0, RegBND, 0, 0, Dw2Inval, Dw2Inval\n-bnd1, RegBND, 0, 1, Dw2Inval, Dw2Inval\n-bnd2, RegBND, 0, 2, Dw2Inval, Dw2Inval\n-bnd3, RegBND, 0, 3, Dw2Inval, Dw2Inval\n+bnd0, Class=RegBND, 0, 0, Dw2Inval, Dw2Inval\n+bnd1, Class=RegBND, 0, 1, Dw2Inval, Dw2Inval\n+bnd2, Class=RegBND, 0, 2, Dw2Inval, Dw2Inval\n+bnd3, Class=RegBND, 0, 3, Dw2Inval, Dw2Inval\n // No Class=Reg will make these registers rejected for all purposes except\n // for addressing.  This saves creating one extra type for RIP/EIP.\n rip, Qword, RegRex64, RegIP, Dw2Inval, 16"
    },
    {
      "sha": "b04a98f25bb9aa90bfca62263b6c0b3b97467d75",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 14449,
      "deletions": 14449,
      "changes": 28898,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f74a6307279f162e892e570448dc2433963db1d8/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=f74a6307279f162e892e570448dc2433963db1d8"
    }
  ]
}