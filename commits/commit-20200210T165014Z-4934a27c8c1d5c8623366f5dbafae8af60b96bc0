{
  "sha": "4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDkzNGEyN2M4YzFkNWM4NjIzMzY2ZjVkYmFmYWU4YWY2MGI5NmJjMA==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2020-02-10T16:38:00Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2020-02-10T16:50:14Z"
    },
    "message": "[binutils][arm] arm support for ARMv8.m Custom Datapath Extension\n\nThis patch is part of a series that adds support for the Armv8.m\nARMv8.m Custom Datapath Extension to binutils.\n\nThis patch introduces the Custom Instructions Class 1/2/3 (Single/\nDual, Accumulator/Non-accumulator varianats) to the arm backend.\n\nThe following Custom Instructions are added: cx1, cx1a,\ncx1d, cx1da, cx2, cx2a, cx2d, cx2da, cx3, cx3a, cx3d, cx3da.\n\nSpecification can be found at\nhttps://developer.arm.com/docs/ddi0607/latest\n\nThis patch distinguishes between enabling CDE for different coprocessor\nnumbers by defining multiple architecture flags.  This means that the\nparsing of the architecture extension flags is kept entirely in the\nexisting code path.\n\nWe introduce a new IT block state to indicate the behaviour of these\ninstructions.  This new state allows being used in an IT block or\noutside an IT block, but does not allow the instruction to be used\ninside a VPT block.\nWe need this since the CX*A instruction versions can be used in IT\nblocks, but they aren't to have the conditional suffixes on them.  Hence\nwe need to mark an instruction as allowed in either position.\n\nWe also need a new flag to objdump, in order to determine whether to\ndisassemble an instruction as CDE related or not.\n\nSuccessfully regression tested on arm-none-eabi, and arm-wince-pe.\n\ngas/ChangeLog:\n\n2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/tc-arm.c (arm_ext_cde*): New feature sets for each\n\tCDE coprocessor that can be enabled.\n\t(enum pred_instruction_type): New pred type.\n\t(BAD_NO_VPT): New error message.\n\t(BAD_CDE): New error message.\n\t(BAD_CDE_COPROC): New error message.\n\t(enum operand_parse_code): Add new immediate operands.\n\t(parse_operands): Account for new immediate operands.\n\t(check_cde_operand): New.\n\t(cde_coproc_enabled): New.\n\t(cde_coproc_pos): New.\n\t(cde_handle_coproc): New.\n\t(cxn_handle_predication): New.\n\t(do_custom_instruction_1): New.\n\t(do_custom_instruction_2): New.\n\t(do_custom_instruction_3): New.\n\t(do_cx1): New.\n\t(do_cx1a): New.\n\t(do_cx1d): New.\n\t(do_cx1da): New.\n\t(do_cx2): New.\n\t(do_cx2a): New.\n\t(do_cx2d): New.\n\t(do_cx2da): New.\n\t(do_cx3): New.\n\t(do_cx3a): New.\n\t(do_cx3d): New.\n\t(do_cx3da): New.\n\t(handle_pred_state): Define new IT block behaviour.\n\t(insns): Add newn CX*{,d}{,a} instructions.\n\t(CDE_EXTENSIONS,armv8m_main_ext_table,armv8_1m_main_ext_table):\n\tDefine new cdecp extension strings.\n\t* doc/c-arm.texi: Document new cdecp extension arguments.\n\t* testsuite/gas/arm/cde-scalar.d: New test.\n\t* testsuite/gas/arm/cde-scalar.s: New test.\n\t* testsuite/gas/arm/cde-warnings.d: New test.\n\t* testsuite/gas/arm/cde-warnings.l: New test.\n\t* testsuite/gas/arm/cde-warnings.s: New test.\n\t* testsuite/gas/arm/cde.d: New test.\n\t* testsuite/gas/arm/cde.s: New test.\n\ninclude/ChangeLog:\n\n2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* opcode/arm.h (ARM_EXT2_CDE): New extension macro.\n\t(ARM_EXT2_CDE0): New extension macro.\n\t(ARM_EXT2_CDE1): New extension macro.\n\t(ARM_EXT2_CDE2): New extension macro.\n\t(ARM_EXT2_CDE3): New extension macro.\n\t(ARM_EXT2_CDE4): New extension macro.\n\t(ARM_EXT2_CDE5): New extension macro.\n\t(ARM_EXT2_CDE6): New extension macro.\n\t(ARM_EXT2_CDE7): New extension macro.\n\nopcodes/ChangeLog:\n\n2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* arm-dis.c (struct cdeopcode32): New.\n\t(CDE_OPCODE): New macro.\n\t(cde_opcodes): New disassembly table.\n\t(regnames): New option to table.\n\t(cde_coprocs): New global variable.\n\t(print_insn_cde): New\n\t(print_insn_thumb32): Use print_insn_cde.\n\t(parse_arm_disassembler_options): Parse coprocN args.",
    "tree": {
      "sha": "158a8b56e97476a4a068001bf7c3d90f72a2f162",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/158a8b56e97476a4a068001bf7c3d90f72a2f162"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4b5aaf5f6992319c2c72e080a1a55842640b8732",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b5aaf5f6992319c2c72e080a1a55842640b8732",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4b5aaf5f6992319c2c72e080a1a55842640b8732"
    }
  ],
  "stats": {
    "total": 1577,
    "additions": 1573,
    "deletions": 4
  },
  "files": [
    {
      "sha": "6df870a9519f67f867411db16c7ce2ce6dab740c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -1,3 +1,47 @@\n+2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/tc-arm.c (arm_ext_cde*): New feature sets for each\n+\tCDE coprocessor that can be enabled.\n+\t(enum pred_instruction_type): New pred type.\n+\t(BAD_NO_VPT): New error message.\n+\t(BAD_CDE): New error message.\n+\t(BAD_CDE_COPROC): New error message.\n+\t(enum operand_parse_code): Add new immediate operands.\n+\t(parse_operands): Account for new immediate operands.\n+\t(check_cde_operand): New.\n+\t(cde_coproc_enabled): New.\n+\t(cde_coproc_pos): New.\n+\t(cde_handle_coproc): New.\n+\t(cxn_handle_predication): New.\n+\t(do_custom_instruction_1): New.\n+\t(do_custom_instruction_2): New.\n+\t(do_custom_instruction_3): New.\n+\t(do_cx1): New.\n+\t(do_cx1a): New.\n+\t(do_cx1d): New.\n+\t(do_cx1da): New.\n+\t(do_cx2): New.\n+\t(do_cx2a): New.\n+\t(do_cx2d): New.\n+\t(do_cx2da): New.\n+\t(do_cx3): New.\n+\t(do_cx3a): New.\n+\t(do_cx3d): New.\n+\t(do_cx3da): New.\n+\t(handle_pred_state): Define new IT block behaviour.\n+\t(insns): Add newn CX*{,d}{,a} instructions.\n+\t(CDE_EXTENSIONS,armv8m_main_ext_table,armv8_1m_main_ext_table):\n+\tDefine new cdecp extension strings.\n+\t* doc/c-arm.texi: Document new cdecp extension arguments.\n+\t* testsuite/gas/arm/cde-scalar.d: New test.\n+\t* testsuite/gas/arm/cde-scalar.s: New test.\n+\t* testsuite/gas/arm/cde-warnings.d: New test.\n+\t* testsuite/gas/arm/cde-warnings.l: New test.\n+\t* testsuite/gas/arm/cde-warnings.s: New test.\n+\t* testsuite/gas/arm/cde.d: New test.\n+\t* testsuite/gas/arm/cde.s: New test.\n+\n 2020-02-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/25516"
    },
    {
      "sha": "93d04eecfe8d1985efbcbee044f12a3aede1f675",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 318,
      "deletions": 3,
      "changes": 321,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -282,6 +282,24 @@ static const arm_feature_set arm_ext_i8mm =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM);\n static const arm_feature_set arm_ext_crc =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_CRC);\n+static const arm_feature_set arm_ext_cde =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE);\n+static const arm_feature_set arm_ext_cde0 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE0);\n+static const arm_feature_set arm_ext_cde1 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE1);\n+static const arm_feature_set arm_ext_cde2 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE2);\n+static const arm_feature_set arm_ext_cde3 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE3);\n+static const arm_feature_set arm_ext_cde4 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE4);\n+static const arm_feature_set arm_ext_cde5 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE5);\n+static const arm_feature_set arm_ext_cde6 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE6);\n+static const arm_feature_set arm_ext_cde7 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE7);\n \n static const arm_feature_set arm_arch_any = ARM_ANY;\n static const arm_feature_set fpu_any = FPU_ANY;\n@@ -482,7 +500,9 @@ enum pred_instruction_type\n    VPT_INSN,\t\t   /* The VPT/VPST insn has been parsed.  */\n    MVE_OUTSIDE_PRED_INSN , /* Instruction to indicate a MVE instruction without\n \t\t\t      a predication code.  */\n-   MVE_UNPREDICABLE_INSN   /* MVE instruction that is non-predicable.  */\n+   MVE_UNPREDICABLE_INSN,  /* MVE instruction that is non-predicable.  */\n+   NEUTRAL_IT_NO_VPT_INSN, /* Instruction that can be either inside or outside\n+\t\t\t      an IT block, but must not be in a VPT block.  */\n };\n \n /* The maximum number of operands we need.  */\n@@ -882,6 +902,7 @@ struct asm_opcode\n #define BAD_ADDR_MODE   _(\"instruction does not accept this addressing mode\")\n #define BAD_BRANCH\t_(\"branch must be last instruction in IT block\")\n #define BAD_BRANCH_OFF\t_(\"branch out of range or not a multiple of 2\")\n+#define BAD_NO_VPT\t_(\"instruction not allowed in VPT block\")\n #define BAD_NOT_IT\t_(\"instruction not allowed in IT block\")\n #define BAD_NOT_VPT\t_(\"instruction missing MVE vector predication code\")\n #define BAD_FPU\t\t_(\"selected FPU does not support instruction\")\n@@ -899,6 +920,8 @@ struct asm_opcode\n #define BAD_RANGE\t_(\"branch out of range\")\n #define BAD_FP16\t_(\"selected processor does not support fp16 instruction\")\n #define BAD_BF16\t_(\"selected processor does not support bf16 instruction\")\n+#define BAD_CDE\t_(\"selected processor does not support cde instruction\")\n+#define BAD_CDE_COPROC\t_(\"coprocessor for insn is not enabled for cde\")\n #define UNPRED_REG(R)\t_(\"using \" R \" results in unpredictable behaviour\")\n #define THUMB1_RELOC_ONLY  _(\"relocation valid in thumb1 code only\")\n #define MVE_NOT_IT\t_(\"Warning: instruction is UNPREDICTABLE in an IT \" \\\n@@ -7138,7 +7161,8 @@ enum operand_parse_code\n   OP_I64,\t/*\t\t   1 .. 64 */\n   OP_I64z,\t/*\t\t   0 .. 64 */\n   OP_I255,\t/*\t\t   0 .. 255 */\n-\n+  OP_I511,\t/*\t\t   0 .. 511 */\n+  OP_I8191,\t/*\t\t   0 .. 8191 */\n   OP_I4b,\t/* immediate, prefix optional, 1 .. 4 */\n   OP_I7b,\t/*\t\t\t       0 .. 7 */\n   OP_I15b,\t/*\t\t\t       0 .. 15 */\n@@ -7653,7 +7677,8 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \tcase OP_I64:\t po_imm_or_fail (  1,     64, FALSE);   break;\n \tcase OP_I64z:\t po_imm_or_fail (  0,     64, FALSE);   break;\n \tcase OP_I255:\t po_imm_or_fail (  0,\t 255, FALSE);\tbreak;\n-\n+\tcase OP_I511:\t po_imm_or_fail (  0,\t 511, FALSE);\tbreak;\n+\tcase OP_I8191:   po_imm_or_fail (  0,\t 8191, FALSE);\tbreak;\n \tcase OP_I4b:\t po_imm_or_fail (  1,\t   4, TRUE);\tbreak;\n \tcase OP_oI7b:\n \tcase OP_I7b:\t po_imm_or_fail (  0,\t   7, TRUE);\tbreak;\n@@ -21572,6 +21597,249 @@ do_vummla (void)\n \n }\n \n+static void\n+check_cde_operand (size_t index, int is_dual)\n+{\n+  unsigned Rx = inst.operands[index].reg;\n+  bfd_boolean isvec = inst.operands[index].isvec;\n+  if (is_dual == 0 && thumb_mode)\n+    constraint (\n+\t\t!((Rx <= 14 && Rx != 13) || (Rx == REG_PC && isvec)),\n+\t\t_(\"Register must be r0-r14 except r13, or APSR_nzcv.\"));\n+  else\n+    constraint ( !((Rx <= 10 && Rx % 2 == 0 )),\n+      _(\"Register must be an even register between r0-r10.\"));\n+}\n+\n+static bfd_boolean\n+cde_coproc_enabled (unsigned coproc)\n+{\n+  switch (coproc)\n+  {\n+    case 0: return mark_feature_used (&arm_ext_cde0);\n+    case 1: return mark_feature_used (&arm_ext_cde1);\n+    case 2: return mark_feature_used (&arm_ext_cde2);\n+    case 3: return mark_feature_used (&arm_ext_cde3);\n+    case 4: return mark_feature_used (&arm_ext_cde4);\n+    case 5: return mark_feature_used (&arm_ext_cde5);\n+    case 6: return mark_feature_used (&arm_ext_cde6);\n+    case 7: return mark_feature_used (&arm_ext_cde7);\n+    default: return FALSE;\n+  }\n+}\n+\n+#define cde_coproc_pos 8\n+static void\n+cde_handle_coproc (void)\n+{\n+  unsigned coproc = inst.operands[0].reg;\n+  constraint (coproc > 7, _(\"CDE Coprocessor must be in range 0-7\"));\n+  constraint (!(cde_coproc_enabled (coproc)), BAD_CDE_COPROC);\n+  inst.instruction |= coproc << cde_coproc_pos;\n+}\n+#undef cde_coproc_pos\n+\n+static void\n+cxn_handle_predication (bfd_boolean is_accum)\n+{\n+  /* This function essentially checks for a suffix, not whether the instruction\n+     is inside an IT block or not.\n+     The CX* instructions should never have a conditional suffix -- this is not\n+     mentioned in the syntax.  */\n+  if (conditional_insn ())\n+    inst.error = BAD_SYNTAX;\n+  /* Here we ensure that if the current element  */\n+  else if (is_accum)\n+    set_pred_insn_type (NEUTRAL_IT_NO_VPT_INSN);\n+  else\n+    set_pred_insn_type (OUTSIDE_PRED_INSN);\n+}\n+\n+static void\n+do_custom_instruction_1 (int is_dual, bfd_boolean is_accum)\n+{\n+\n+  constraint (!mark_feature_used (&arm_ext_cde), _(BAD_CDE));\n+\n+  unsigned imm, Rd;\n+\n+  Rd = inst.operands[1].reg;\n+  check_cde_operand (1, is_dual);\n+\n+  if (is_dual == 1)\n+    {\n+      constraint (inst.operands[2].reg != Rd + 1,\n+\t\t  _(\"cx1d requires consecutive destination registers.\"));\n+      imm = inst.operands[3].imm;\n+    }\n+  else if (is_dual == 0)\n+    imm = inst.operands[2].imm;\n+  else\n+    abort ();\n+\n+  inst.instruction |= Rd << 12;\n+  inst.instruction |= (imm & 0x1F80) << 9;\n+  inst.instruction |= (imm & 0x0040) << 1;\n+  inst.instruction |= (imm & 0x003f);\n+\n+  cde_handle_coproc ();\n+  cxn_handle_predication (is_accum);\n+}\n+\n+static void\n+do_custom_instruction_2 (int is_dual, bfd_boolean is_accum)\n+{\n+\n+  constraint (!mark_feature_used (&arm_ext_cde), _(BAD_CDE));\n+\n+  unsigned imm, Rd, Rn;\n+\n+  Rd = inst.operands[1].reg;\n+\n+  if (is_dual == 1)\n+    {\n+      constraint (inst.operands[2].reg != Rd + 1,\n+\t\t  _(\"cx2d requires consecutive destination registers.\"));\n+      imm = inst.operands[4].imm;\n+      Rn = inst.operands[3].reg;\n+    }\n+  else if (is_dual == 0)\n+  {\n+    imm = inst.operands[3].imm;\n+    Rn = inst.operands[2].reg;\n+  }\n+  else\n+    abort ();\n+\n+  check_cde_operand (2 + is_dual, /* is_dual = */0);\n+  check_cde_operand (1, is_dual);\n+\n+  inst.instruction |= Rd << 12;\n+  inst.instruction |= Rn << 16;\n+\n+  inst.instruction |= (imm & 0x0380) << 13;\n+  inst.instruction |= (imm & 0x0040) << 1;\n+  inst.instruction |= (imm & 0x003f);\n+\n+  cde_handle_coproc ();\n+  cxn_handle_predication (is_accum);\n+}\n+\n+static void\n+do_custom_instruction_3 (int is_dual, bfd_boolean is_accum)\n+{\n+\n+  constraint (!mark_feature_used (&arm_ext_cde), _(BAD_CDE));\n+\n+  unsigned imm, Rd, Rn, Rm;\n+\n+  Rd = inst.operands[1].reg;\n+\n+  if (is_dual == 1)\n+    {\n+      constraint (inst.operands[2].reg != Rd + 1,\n+\t\t  _(\"cx3d requires consecutive destination registers.\"));\n+      imm = inst.operands[5].imm;\n+      Rn = inst.operands[3].reg;\n+      Rm = inst.operands[4].reg;\n+    }\n+  else if (is_dual == 0)\n+  {\n+    imm = inst.operands[4].imm;\n+    Rn = inst.operands[2].reg;\n+    Rm = inst.operands[3].reg;\n+  }\n+  else\n+    abort ();\n+\n+  check_cde_operand (1, is_dual);\n+  check_cde_operand (2 + is_dual, /* is_dual = */0);\n+  check_cde_operand (3 + is_dual, /* is_dual = */0);\n+\n+  inst.instruction |= Rd;\n+  inst.instruction |= Rn << 16;\n+  inst.instruction |= Rm << 12;\n+\n+  inst.instruction |= (imm & 0x0038) << 17;\n+  inst.instruction |= (imm & 0x0004) << 5;\n+  inst.instruction |= (imm & 0x0003) << 4;\n+\n+  cde_handle_coproc ();\n+  cxn_handle_predication (is_accum);\n+}\n+\n+static void\n+do_cx1 (void)\n+{\n+  return do_custom_instruction_1 (0, 0);\n+}\n+\n+static void\n+do_cx1a (void)\n+{\n+  return do_custom_instruction_1 (0, 1);\n+}\n+\n+static void\n+do_cx1d (void)\n+{\n+  return do_custom_instruction_1 (1, 0);\n+}\n+\n+static void\n+do_cx1da (void)\n+{\n+  return do_custom_instruction_1 (1, 1);\n+}\n+\n+static void\n+do_cx2 (void)\n+{\n+  return do_custom_instruction_2 (0, 0);\n+}\n+\n+static void\n+do_cx2a (void)\n+{\n+  return do_custom_instruction_2 (0, 1);\n+}\n+\n+static void\n+do_cx2d (void)\n+{\n+  return do_custom_instruction_2 (1, 0);\n+}\n+\n+static void\n+do_cx2da (void)\n+{\n+  return do_custom_instruction_2 (1, 1);\n+}\n+\n+static void\n+do_cx3 (void)\n+{\n+  return do_custom_instruction_3 (0, 0);\n+}\n+\n+static void\n+do_cx3a (void)\n+{\n+  return do_custom_instruction_3 (0, 1);\n+}\n+\n+static void\n+do_cx3d (void)\n+{\n+  return do_custom_instruction_3 (1, 0);\n+}\n+\n+static void\n+do_cx3da (void)\n+{\n+  return do_custom_instruction_3 (1, 1);\n+}\n+\n /* Crypto v1 instructions.  */\n static void\n do_crypto_2op_1 (unsigned elttype, int op)\n@@ -22474,6 +22742,7 @@ handle_pred_state (void)\n \t    gas_assert (0);\n \tcase IF_INSIDE_IT_LAST_INSN:\n \tcase NEUTRAL_IT_INSN:\n+\tcase NEUTRAL_IT_NO_VPT_INSN:\n \t  break;\n \n \tcase VPT_INSN:\n@@ -22537,6 +22806,13 @@ handle_pred_state (void)\n \t    close_automatic_it_block ();\n \t  break;\n \n+\tcase NEUTRAL_IT_NO_VPT_INSN:\n+\t  if (now_pred.type == VECTOR_PRED)\n+\t    {\n+\t      inst.error = BAD_NO_VPT;\n+\t      break;\n+\t    }\n+\t  /* Fallthrough.  */\n \tcase NEUTRAL_IT_INSN:\n \t  now_pred.block_length++;\n \t  now_pred.insn_cond = TRUE;\n@@ -22720,6 +22996,13 @@ handle_pred_state (void)\n \t      }\n \t    break;\n \n+\t  case NEUTRAL_IT_NO_VPT_INSN:\n+\t    if (now_pred.type == VECTOR_PRED)\n+\t      {\n+\t\tinst.error = BAD_NO_VPT;\n+\t\tbreak;\n+\t      }\n+\t    /* Fallthrough.  */\n \t  case NEUTRAL_IT_INSN:\n \t    /* The BKPT instruction is unconditional even in a IT or VPT\n \t       block.  */\n@@ -26099,6 +26382,24 @@ static const struct asm_opcode insns[] =\n  TUF (\"vusmmla\", ca00c40, fca00c40, 3, (RNQ, RNQ, RNQ), vsmmla, vsmmla),\n  TUF (\"vusdot\", c800d00, fc800d00, 3, (RNDQ, RNDQ, RNDQ_RNSC), vusdot, vusdot),\n  TUF (\"vsudot\", c800d10, fc800d10, 3, (RNDQ, RNDQ, RNSC), vsudot, vsudot),\n+\n+#undef\tARM_VARIANT\n+#undef\tTHUMB_VARIANT\n+#define\tTHUMB_VARIANT &arm_ext_cde\n+ ToC (\"cx1\", ee000000, 3, (RCP, APSR_RR, I8191), cx1),\n+ ToC (\"cx1a\", fe000000, 3, (RCP, APSR_RR, I8191), cx1a),\n+ ToC (\"cx1d\", ee000040, 4, (RCP, RR, APSR_RR, I8191), cx1d),\n+ ToC (\"cx1da\", fe000040, 4, (RCP, RR, APSR_RR, I8191), cx1da),\n+\n+ ToC (\"cx2\", ee400000, 4, (RCP, APSR_RR, APSR_RR, I511), cx2),\n+ ToC (\"cx2a\", fe400000, 4, (RCP, APSR_RR, APSR_RR, I511), cx2a),\n+ ToC (\"cx2d\", ee400040, 5, (RCP, RR, APSR_RR, APSR_RR, I511), cx2d),\n+ ToC (\"cx2da\", fe400040, 5, (RCP, RR, APSR_RR, APSR_RR, I511), cx2da),\n+\n+ ToC (\"cx3\", ee800000, 5, (RCP, APSR_RR, APSR_RR, APSR_RR, I63), cx3),\n+ ToC (\"cx3a\", fe800000, 5, (RCP, APSR_RR, APSR_RR, APSR_RR, I63), cx3a),\n+ ToC (\"cx3d\", ee800040, 6, (RCP, RR, APSR_RR, APSR_RR, APSR_RR, I63), cx3d),\n+ ToC (\"cx3da\", fe800040, 6, (RCP, RR, APSR_RR, APSR_RR, APSR_RR, I63), cx3da),\n };\n #undef ARM_VARIANT\n #undef THUMB_VARIANT\n@@ -31280,12 +31581,23 @@ static const struct arm_ext_table armv86a_ext_table[] =\n   { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n };\n \n+#define CDE_EXTENSIONS \\\n+  ARM_ADD (\"cdecp0\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE0)), \\\n+  ARM_ADD (\"cdecp1\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE1)), \\\n+  ARM_ADD (\"cdecp2\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE2)), \\\n+  ARM_ADD (\"cdecp3\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE3)), \\\n+  ARM_ADD (\"cdecp4\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE4)), \\\n+  ARM_ADD (\"cdecp5\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE5)), \\\n+  ARM_ADD (\"cdecp6\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE6)), \\\n+  ARM_ADD (\"cdecp7\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE7))\n+\n static const struct arm_ext_table armv8m_main_ext_table[] =\n {\n   ARM_EXT (\"dsp\", ARM_FEATURE_CORE_LOW (ARM_AEXT_V8M_MAIN_DSP),\n \t\t  ARM_FEATURE_CORE_LOW (ARM_AEXT_V8M_MAIN_DSP)),\n   ARM_EXT (\"fp\", FPU_ARCH_VFP_V5_SP_D16, ALL_FP),\n   ARM_ADD (\"fp.dp\", FPU_ARCH_VFP_V5D16),\n+  CDE_EXTENSIONS,\n   { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n };\n \n@@ -31307,9 +31619,12 @@ static const struct arm_ext_table armv8_1m_main_ext_table[] =\n \t   ARM_FEATURE (ARM_AEXT_V8M_MAIN_DSP,\n \t\t\tARM_EXT2_FP16_INST | ARM_EXT2_MVE | ARM_EXT2_MVE_FP,\n \t\t\tFPU_VFP_V5_SP_D16 | FPU_VFP_EXT_FP16 | FPU_VFP_EXT_FMA)),\n+  CDE_EXTENSIONS,\n   { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n };\n \n+#undef CDE_EXTENSIONS\n+\n static const struct arm_ext_table armv8r_ext_table[] =\n {\n   ARM_ADD (\"crc\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CRC)),"
    },
    {
      "sha": "91803605775418bcc795e163f42b0beaec880967",
      "filename": "gas/doc/c-arm.texi",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/doc/c-arm.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/doc/c-arm.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-arm.texi?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -359,6 +359,14 @@ For @code{armv8-m.main}:\n @code{+fp}: Enables single-precision only VFPv5 instructions with 16\n double-word registers.\n @code{+fp.dp}: Enables VFPv5 instructions with 16 double-word registers.\n+@code{+cdecp0} (CDE extensions for v8-m architecture with coprocessor 0),\n+@code{+cdecp1} (CDE extensions for v8-m architecture with coprocessor 1),\n+@code{+cdecp2} (CDE extensions for v8-m architecture with coprocessor 2),\n+@code{+cdecp3} (CDE extensions for v8-m architecture with coprocessor 3),\n+@code{+cdecp4} (CDE extensions for v8-m architecture with coprocessor 4),\n+@code{+cdecp5} (CDE extensions for v8-m architecture with coprocessor 5),\n+@code{+cdecp6} (CDE extensions for v8-m architecture with coprocessor 6),\n+@code{+cdecp7} (CDE extensions for v8-m architecture with coprocessor 7),\n @code{+nofp}: Disables all FPU instructions.\n @code{+nodsp}: Disables DSP Extension.\n "
    },
    {
      "sha": "36260128f4189746e621419f7b495479013d2a2e",
      "filename": "gas/testsuite/gas/arm/cde-scalar.d",
      "status": "added",
      "additions": 117,
      "deletions": 0,
      "changes": 117,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-scalar.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-scalar.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde-scalar.d?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,117 @@\n+#name: Custom Datapath Extension Scalar bits (CDE)\n+#source: cde-scalar.s\n+#as: -mno-warn-deprecated -march=armv8-m.main+cdecp0+cdecp7 -I$srcdir/$subdir\n+#as: -mno-warn-deprecated -march=armv8-m.main+cdecp0+cdecp1+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7 -I$srcdir/$subdir\n+#objdump: -M force-thumb -dr --show-raw-insn -marmv8-m.main -M coproc0=cde -M coproc7=cde\n+#...\n+00000000 <\\.text>:\n+ *[0-9a-f]+:\tee00 0000 \tcx1\tp0, r0, #0\n+ *[0-9a-f]+:\tee3f 0000 \tcx1\tp0, r0, #8064\n+ *[0-9a-f]+:\tee00 0080 \tcx1\tp0, r0, #64\n+ *[0-9a-f]+:\tee00 003f \tcx1\tp0, r0, #63\n+ *[0-9a-f]+:\tee00 0700 \tcx1\tp7, r0, #0\n+ *[0-9a-f]+:\tee00 f000 \tcx1\tp0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee00 9000 \tcx1\tp0, r9, #0\n+ *[0-9a-f]+:\tfe00 0000 \tcx1a\tp0, r0, #0\n+ *[0-9a-f]+:\tfe3f 0000 \tcx1a\tp0, r0, #8064\n+ *[0-9a-f]+:\tfe00 0080 \tcx1a\tp0, r0, #64\n+ *[0-9a-f]+:\tfe00 003f \tcx1a\tp0, r0, #63\n+ *[0-9a-f]+:\tfe00 0700 \tcx1a\tp7, r0, #0\n+ *[0-9a-f]+:\tfe00 f000 \tcx1a\tp0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe00 9000 \tcx1a\tp0, r9, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe00 0000 \tcx1a\tp0, r0, #0\n+ *[0-9a-f]+:\tee00 0040 \tcx1d\tp0, r0, r1, #0\n+ *[0-9a-f]+:\tee3f 0040 \tcx1d\tp0, r0, r1, #8064\n+ *[0-9a-f]+:\tee00 00c0 \tcx1d\tp0, r0, r1, #64\n+ *[0-9a-f]+:\tee00 007f \tcx1d\tp0, r0, r1, #63\n+ *[0-9a-f]+:\tee00 0740 \tcx1d\tp7, r0, r1, #0\n+ *[0-9a-f]+:\tee00 a040 \tcx1d\tp0, sl, fp, #0\n+ *[0-9a-f]+:\tfe00 0040 \tcx1da\tp0, r0, r1, #0\n+ *[0-9a-f]+:\tfe3f 0040 \tcx1da\tp0, r0, r1, #8064\n+ *[0-9a-f]+:\tfe00 00c0 \tcx1da\tp0, r0, r1, #64\n+ *[0-9a-f]+:\tfe00 007f \tcx1da\tp0, r0, r1, #63\n+ *[0-9a-f]+:\tfe00 0740 \tcx1da\tp7, r0, r1, #0\n+ *[0-9a-f]+:\tfe00 a040 \tcx1da\tp0, sl, fp, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe00 0040 \tcx1da\tp0, r0, r1, #0\n+ *[0-9a-f]+:\tee40 0000 \tcx2\tp0, r0, r0, #0\n+ *[0-9a-f]+:\tee70 0000 \tcx2\tp0, r0, r0, #384\n+ *[0-9a-f]+:\tee40 0080 \tcx2\tp0, r0, r0, #64\n+ *[0-9a-f]+:\tee40 003f \tcx2\tp0, r0, r0, #63\n+ *[0-9a-f]+:\tee40 0700 \tcx2\tp7, r0, r0, #0\n+ *[0-9a-f]+:\tee40 f000 \tcx2\tp0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tee40 9000 \tcx2\tp0, r9, r0, #0\n+ *[0-9a-f]+:\tee4f 0000 \tcx2\tp0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee49 0000 \tcx2\tp0, r0, r9, #0\n+ *[0-9a-f]+:\tfe40 0000 \tcx2a\tp0, r0, r0, #0\n+ *[0-9a-f]+:\tfe70 0000 \tcx2a\tp0, r0, r0, #384\n+ *[0-9a-f]+:\tfe40 0080 \tcx2a\tp0, r0, r0, #64\n+ *[0-9a-f]+:\tfe40 003f \tcx2a\tp0, r0, r0, #63\n+ *[0-9a-f]+:\tfe40 0700 \tcx2a\tp7, r0, r0, #0\n+ *[0-9a-f]+:\tfe40 f000 \tcx2a\tp0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tfe40 9000 \tcx2a\tp0, r9, r0, #0\n+ *[0-9a-f]+:\tfe4f 0000 \tcx2a\tp0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe49 0000 \tcx2a\tp0, r0, r9, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe40 0000 \tcx2a\tp0, r0, r0, #0\n+ *[0-9a-f]+:\tee40 0040 \tcx2d\tp0, r0, r1, r0, #0\n+ *[0-9a-f]+:\tee70 0040 \tcx2d\tp0, r0, r1, r0, #384\n+ *[0-9a-f]+:\tee40 00c0 \tcx2d\tp0, r0, r1, r0, #64\n+ *[0-9a-f]+:\tee40 007f \tcx2d\tp0, r0, r1, r0, #63\n+ *[0-9a-f]+:\tee40 0740 \tcx2d\tp7, r0, r1, r0, #0\n+ *[0-9a-f]+:\tee40 a040 \tcx2d\tp0, sl, fp, r0, #0\n+ *[0-9a-f]+:\tee4f 0040 \tcx2d\tp0, r0, r1, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee49 0040 \tcx2d\tp0, r0, r1, r9, #0\n+ *[0-9a-f]+:\tfe40 0040 \tcx2da\tp0, r0, r1, r0, #0\n+ *[0-9a-f]+:\tfe70 0040 \tcx2da\tp0, r0, r1, r0, #384\n+ *[0-9a-f]+:\tfe40 00c0 \tcx2da\tp0, r0, r1, r0, #64\n+ *[0-9a-f]+:\tfe40 007f \tcx2da\tp0, r0, r1, r0, #63\n+ *[0-9a-f]+:\tfe40 0740 \tcx2da\tp7, r0, r1, r0, #0\n+ *[0-9a-f]+:\tfe40 a040 \tcx2da\tp0, sl, fp, r0, #0\n+ *[0-9a-f]+:\tfe4f 0040 \tcx2da\tp0, r0, r1, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe49 0040 \tcx2da\tp0, r0, r1, r9, #0\n+ *[0-9a-f]+:\tee80 0000 \tcx3\tp0, r0, r0, r0, #0\n+ *[0-9a-f]+:\teef0 0000 \tcx3\tp0, r0, r0, r0, #56\n+ *[0-9a-f]+:\tee80 0080 \tcx3\tp0, r0, r0, r0, #4\n+ *[0-9a-f]+:\tee80 0030 \tcx3\tp0, r0, r0, r0, #3\n+ *[0-9a-f]+:\tee80 0700 \tcx3\tp7, r0, r0, r0, #0\n+ *[0-9a-f]+:\tee80 000f \tcx3\tp0, APSR_nzcv, r0, r0, #0\n+ *[0-9a-f]+:\tee80 0009 \tcx3\tp0, r9, r0, r0, #0\n+ *[0-9a-f]+:\tee8f 0000 \tcx3\tp0, r0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tee89 0000 \tcx3\tp0, r0, r9, r0, #0\n+ *[0-9a-f]+:\tee80 f000 \tcx3\tp0, r0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee80 9000 \tcx3\tp0, r0, r0, r9, #0\n+ *[0-9a-f]+:\tfe80 0000 \tcx3a\tp0, r0, r0, r0, #0\n+ *[0-9a-f]+:\tfef0 0000 \tcx3a\tp0, r0, r0, r0, #56\n+ *[0-9a-f]+:\tfe80 0080 \tcx3a\tp0, r0, r0, r0, #4\n+ *[0-9a-f]+:\tfe80 0030 \tcx3a\tp0, r0, r0, r0, #3\n+ *[0-9a-f]+:\tfe80 0700 \tcx3a\tp7, r0, r0, r0, #0\n+ *[0-9a-f]+:\tfe80 000f \tcx3a\tp0, APSR_nzcv, r0, r0, #0\n+ *[0-9a-f]+:\tfe80 0009 \tcx3a\tp0, r9, r0, r0, #0\n+ *[0-9a-f]+:\tfe8f 0000 \tcx3a\tp0, r0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tfe89 0000 \tcx3a\tp0, r0, r9, r0, #0\n+ *[0-9a-f]+:\tfe80 f000 \tcx3a\tp0, r0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe80 9000 \tcx3a\tp0, r0, r0, r9, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe80 0000 \tcx3a\tp0, r0, r0, r0, #0\n+ *[0-9a-f]+:\tee80 0040 \tcx3d\tp0, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\teef0 0040 \tcx3d\tp0, r0, r1, r0, r0, #56\n+ *[0-9a-f]+:\tee80 00c0 \tcx3d\tp0, r0, r1, r0, r0, #4\n+ *[0-9a-f]+:\tee80 0070 \tcx3d\tp0, r0, r1, r0, r0, #3\n+ *[0-9a-f]+:\tee80 0740 \tcx3d\tp7, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\tee80 004a \tcx3d\tp0, sl, fp, r0, r0, #0\n+ *[0-9a-f]+:\tee8f 0040 \tcx3d\tp0, r0, r1, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tee89 0040 \tcx3d\tp0, r0, r1, r9, r0, #0\n+ *[0-9a-f]+:\tee80 f040 \tcx3d\tp0, r0, r1, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee80 9040 \tcx3d\tp0, r0, r1, r0, r9, #0\n+ *[0-9a-f]+:\tfe80 0040 \tcx3da\tp0, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\tfef0 0040 \tcx3da\tp0, r0, r1, r0, r0, #56\n+ *[0-9a-f]+:\tfe80 00c0 \tcx3da\tp0, r0, r1, r0, r0, #4\n+ *[0-9a-f]+:\tfe80 0070 \tcx3da\tp0, r0, r1, r0, r0, #3\n+ *[0-9a-f]+:\tfe80 0740 \tcx3da\tp7, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\tfe80 004a \tcx3da\tp0, sl, fp, r0, r0, #0\n+ *[0-9a-f]+:\tfe8f 0040 \tcx3da\tp0, r0, r1, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tfe89 0040 \tcx3da\tp0, r0, r1, r9, r0, #0\n+ *[0-9a-f]+:\tfe80 f040 \tcx3da\tp0, r0, r1, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe80 9040 \tcx3da\tp0, r0, r1, r0, r9, #0"
    },
    {
      "sha": "ac188a3aa03f9239262b1958417df45d0b635939",
      "filename": "gas/testsuite/gas/arm/cde-scalar.s",
      "status": "added",
      "additions": 206,
      "deletions": 0,
      "changes": 206,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-scalar.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-scalar.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde-scalar.s?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,206 @@\n+.syntax unified\n+# Extra tests everywhere:\n+# Ensure that setting the register to something in r[1-12] works.\n+\n+# cx1{a} Has arguments in the following form\n+# 111a111000iiiiiidddd0pppi0iiiiii\n+#\n+# Variants to test:\n+# - Base (everything we can set to zero)\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+#   concatenated)\n+# - Each register 9 (0b1001), APSR_nzcv, or all zeros\n+# - Coprocessor num set to 7\n+# - Everything again with the `a` version (to double check parsing).\n+# - Accumulator versions without optional argument (to check parsing)\n+#\n+# IT blocks:\n+#  Non-accumulator versions are UNPREDICTABLE in IT blocks.\n+#  Accumulator versions are allowed in IT blocks.\n+\n+# cx1{a} extra tests.\n+# Arm conditional\n+cx1 p0, r0, #0\n+cx1 p0, r0, #8064\n+cx1 p0, r0, #64\n+cx1 p0, r0, #63\n+cx1 p7, r0, #0\n+cx1 p0, APSR_nzcv, #0\n+cx1 p0, r9, #0\n+cx1a p0, r0, #0\n+cx1a p0, r0, #8064\n+cx1a p0, r0, #64\n+cx1a p0, r0, #63\n+cx1a p7, r0, #0\n+cx1a p0, APSR_nzcv, #0\n+cx1a p0, r9, #0\n+\n+it ne\n+cx1a p0, r0, #0\n+\n+# cx1d{a} encoding of following form:\n+# 111a111000iiiiiidddd0pppi1iiiiii\n+#\n+# Variants to test:\n+# - Base (everything we can set to zero)\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+#   concatenated)\n+# - Destination register 10 (0b1010) or all zeros\n+# - Coprocessor num set to 7\n+# - Everything again with the `a` version (to double check parsing).\n+# - Accumulator versions without optional argument (to check parsing)\n+cx1d p0, r0, r1, #0\n+cx1d p0, r0, r1, #8064\n+cx1d p0, r0, r1, #64\n+cx1d p0, r0, r1, #63\n+cx1d p7, r0, r1, #0\n+cx1d p0, r10, r11, #0\n+cx1da p0, r0, r1, #0\n+cx1da p0, r0, r1, #8064\n+cx1da p0, r0, r1, #64\n+cx1da p0, r0, r1, #63\n+cx1da p7, r0, r1, #0\n+cx1da p0, r10, r11, #0\n+\n+it ne\n+cx1da p0, r0, r1, #0\n+\n+\n+# cx2{a} Has arguments of the following form:\n+# 111a111001iinnnndddd0pppi0iiiiii\n+#\n+# Variants to test:\n+# - Base (everything we can set to zero)\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+#   concatenated)\n+# - Each register 9 (0b1001), APSR_nzcv, or all zeros\n+# - Coprocessor num set to 7\n+# - Everything again with the `a` version (to double check parsing).\n+# - Accumulator versions without optional argument (to check parsing)\n+cx2 p0, r0, r0, #0\n+cx2 p0, r0, r0, #384\n+cx2 p0, r0, r0, #64\n+cx2 p0, r0, r0, #63\n+cx2 p7, r0, r0, #0\n+cx2 p0, APSR_nzcv, r0, #0\n+cx2 p0, r9, r0, #0\n+cx2 p0, r0, APSR_nzcv, #0\n+cx2 p0, r0, r9, #0\n+cx2a p0, r0, r0, #0\n+cx2a p0, r0, r0, #384\n+cx2a p0, r0, r0, #64\n+cx2a p0, r0, r0, #63\n+cx2a p7, r0, r0, #0\n+cx2a p0, APSR_nzcv, r0, #0\n+cx2a p0, r9, r0, #0\n+cx2a p0, r0, APSR_nzcv, #0\n+cx2a p0, r0, r9, #0\n+\n+it ne\n+cx2a p0, r0, r0, #0\n+\n+# cx2d{a} encoding has following form:\n+# 111a111001iinnnndddd0pppi1iiiiii\n+#\n+# - Base (everything we can set to zero)\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+#   concatenated)\n+# - Destination register 10 (0b1010) or all zeros\n+# - Coprocessor num set to 7\n+# - Everything again with the `a` version (to double check parsing).\n+# - Accumulator versions without optional argument (to check parsing)\n+cx2d p0, r0, r1, r0, #0\n+cx2d p0, r0, r1, r0, #384\n+cx2d p0, r0, r1, r0, #64\n+cx2d p0, r0, r1, r0, #63\n+cx2d p7, r0, r1, r0, #0\n+cx2d p0, r10, r11, r0, #0\n+cx2d p0, r0, r1, APSR_nzcv, #0\n+cx2d p0, r0, r1, r9, #0\n+cx2da p0, r0, r1, r0, #0\n+cx2da p0, r0, r1, r0, #384\n+cx2da p0, r0, r1, r0, #64\n+cx2da p0, r0, r1, r0, #63\n+cx2da p7, r0, r1, r0, #0\n+cx2da p0, r10, r11, r0, #0\n+cx2da p0, r0, r1, APSR_nzcv, #0\n+cx2da p0, r0, r1, r9, #0\n+\n+# cx3{a} Has arguments in the following form:\n+# 111a11101iiinnnnmmmm0pppi0iidddd\n+#\n+# Variants to test:\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+# - Base (everything we can set to zero)\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+#   concatenated)\n+# - Each register 9 (0b1001), APSR_nzcv, or all zeros\n+# - Coprocessor num set to 7\n+# - Everything again with the `a` version (to double check parsing).\n+# - Accumulator versions without optional argument (to check parsing)\n+cx3 p0, r0, r0, r0, #0\n+cx3 p0, r0, r0, r0, #56\n+cx3 p0, r0, r0, r0, #4\n+cx3 p0, r0, r0, r0, #3\n+cx3 p7, r0, r0, r0, #0\n+cx3 p0, APSR_nzcv, r0, r0, #0\n+cx3 p0, r9, r0, r0, #0\n+cx3 p0, r0, APSR_nzcv, r0, #0\n+cx3 p0, r0, r9, r0, #0\n+cx3 p0, r0, r0, APSR_nzcv, #0\n+cx3 p0, r0, r0, r9, #0\n+cx3a p0, r0, r0, r0, #0\n+cx3a p0, r0, r0, r0, #56\n+cx3a p0, r0, r0, r0, #4\n+cx3a p0, r0, r0, r0, #3\n+cx3a p7, r0, r0, r0, #0\n+cx3a p0, APSR_nzcv, r0, r0, #0\n+cx3a p0, r9, r0, r0, #0\n+cx3a p0, r0, APSR_nzcv, r0, #0\n+cx3a p0, r0, r9, r0, #0\n+cx3a p0, r0, r0, APSR_nzcv, #0\n+cx3a p0, r0, r0, r9, #0\n+\n+it ne\n+cx3a p0, r0, r0, r0, #0\n+\n+# cx3d{a} encoding has following form:\n+# 111a11101iiinnnnmmmm0pppi1iidddd\n+#\n+# Variants to test:\n+# - Toggle 'a'\n+# - immediates that set each set of `i` to ones in turn.\n+#   (imm = op1:op2:op3  , which is each group of `i` from left to write\n+#   concatenated)\n+# - Destination register 10 (0b1010) or all zeros\n+# - Source register 9 (0b1001), APSR_nzcv, or all zeros\n+\n+# No longer allows APSR_nzcv in destination register\n+cx3d p0, r0, r1, r0, r0, #0\n+cx3d p0, r0, r1, r0, r0, #56\n+cx3d p0, r0, r1, r0, r0, #4\n+cx3d p0, r0, r1, r0, r0, #3\n+cx3d p7, r0, r1, r0, r0, #0\n+cx3d p0, r10, r11, r0, r0, #0\n+cx3d p0, r0, r1, APSR_nzcv, r0, #0\n+cx3d p0, r0, r1, r9, r0, #0\n+cx3d p0, r0, r1, r0, APSR_nzcv, #0\n+cx3d p0, r0, r1, r0, r9, #0\n+cx3da p0, r0, r1, r0, r0, #0\n+cx3da p0, r0, r1, r0, r0, #56\n+cx3da p0, r0, r1, r0, r0, #4\n+cx3da p0, r0, r1, r0, r0, #3\n+cx3da p7, r0, r1, r0, r0, #0\n+cx3da p0, r10, r11, r0, r0, #0\n+cx3da p0, r0, r1, APSR_nzcv, r0, #0\n+cx3da p0, r0, r1, r9, r0, #0\n+cx3da p0, r0, r1, r0, APSR_nzcv, #0\n+cx3da p0, r0, r1, r0, r9, #0\n+\n+"
    },
    {
      "sha": "1421b998d1cd54b8776651919307f273033fe6a2",
      "filename": "gas/testsuite/gas/arm/cde-warnings.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-warnings.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-warnings.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde-warnings.d?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Custom Datapath Extension (CDE) Warnings\n+#source: cde-warnings.s\n+#as: -mno-warn-deprecated -march=armv8.1-m.main+cdecp0+mve -I$srcdir/$subdir\n+#as: -mno-warn-deprecated -march=armv8.1-m.main+cdecp0+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7+mve -I$srcdir/$subdir\n+#error_output: cde-warnings.l"
    },
    {
      "sha": "abbd10aed4af14b96f3dc38a166cbe3ce34bd724",
      "filename": "gas/testsuite/gas/arm/cde-warnings.l",
      "status": "added",
      "additions": 175,
      "deletions": 0,
      "changes": 175,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-warnings.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-warnings.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde-warnings.l?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,175 @@\n+[^ :]+: Assembler messages:\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1 p0,r0,#8192'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1a p0,r0,#8192'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1 p0,r0,#-1'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1a p0,r0,#-1'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx1 p8,r0,#0'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx1a p8,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1 p0,r16,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1a p0,r16,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx1 p0,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx1a p0,r13,#0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `cx1 p0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1ne p0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1ane p0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx1 p1,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx1a p1,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx1 p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx1a p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1 p0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1a p0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx1 p0,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx1a p0,r15,#0'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1d p0,r0,r1,#8192'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1da p0,r0,r1,#8192'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1d p0,r0,r1,#-1'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx1da p0,r0,r1,#-1'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx1d p8,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx1da p8,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx1d p0,r16,r17,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx1da p0,r16,r17,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx1d p0,APSR_nzcv,r15,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx1da p0,APSR_nzcv,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx1d p0,r9,r10,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx1da p0,r9,r10,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx1d p0,r13,r14,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx1da p0,r13,r14,#0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `cx1d p0,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1dne p0,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1dane p0,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx1d p1,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx1da p1,r0,r1,#0'\n+[^ :]+:[0-9]+: Error: cx1d requires consecutive destination registers\\. -- `cx1d p0,r0,r2,#0'\n+[^ :]+:[0-9]+: Error: cx1d requires consecutive destination registers\\. -- `cx1da p0,r0,r2,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx1d p0,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx1da p0,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1d p0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx1da p0,r0,#0'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2 p0,r0,r0,#512'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2a p0,r0,r0,#512'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2 p0,r0,r0,#-1'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2a p0,r0,r0,#-1'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx2 p8,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx2a p8,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2 p0,r16,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2a p0,r16,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2 p0,r0,r16,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2a p0,r0,r16,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2 p0,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2a p0,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2 p0,r0,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2a p0,r0,r13,#0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `cx2 p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2ne p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2ane p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx2 p1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx2a p1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx2 p0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx2a p0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2 p0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2a p0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2 p0,r0,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2a p0,r0,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2 p0,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2a p0,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2d p0,r0,r1,r0,#512'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2da p0,r0,r1,r0,#512'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2d p0,r0,r1,r0,#-1'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx2da p0,r0,r1,r0,#-1'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx2d p8,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx2da p8,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx2d p0,r16,r17,r0,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx2da p0,r16,r17,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2d p0,r0,r1,r16,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2da p0,r0,r1,r16,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx2d p0,APSR_nzcv,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx2da p0,APSR_nzcv,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx2d p0,r9,r10,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx2da p0,r9,r10,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx2d p0,r12,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx2da p0,r12,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2d p0,r0,r1,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2da p0,r0,r1,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2d p0,r0,r1,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx2da p0,r0,r1,r15,#0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `cx2d p0,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2dne p0,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2dane p0,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx2d p1,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx2da p1,r0,r1,r0,#0'\n+[^ :]+:[0-9]+: Error: cx2d requires consecutive destination registers\\. -- `cx2d p0,r0,r2,r0,#0'\n+[^ :]+:[0-9]+: Error: cx2d requires consecutive destination registers\\. -- `cx2da p0,r0,r2,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx2d p0,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx2da p0,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2d p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx2da p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3 p0,r0,r0,r0,#64'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3a p0,r0,r0,r0,#64'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3 p0,r0,r0,r0,#-1'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3a p0,r0,r0,r0,#-1'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx3 p8,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx3a p8,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3 p0,r16,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3a p0,r16,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3 p0,r0,r16,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3a p0,r0,r16,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3 p0,r0,r0,r16,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3a p0,r0,r0,r16,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3 p0,r13,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3a p0,r13,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3 p0,r0,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3a p0,r0,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3 p0,r0,r0,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3a p0,r0,r0,r13,#0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `cx3 p0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3ne p0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3ane p0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx3 p1,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx3a p1,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx3 p0,r0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx3a p0,r0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3 p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3a p0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3 p0,r15,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3a p0,r15,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3 p0,r0,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3a p0,r0,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3 p0,r0,r0,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3a p0,r0,r0,r15,#0'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3d p0,r0,r1,r0,r0,#64'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3da p0,r0,r1,r0,r0,#64'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3d p0,r0,r1,r0,r0,#-1'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `cx3da p0,r0,r1,r0,r0,#-1'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx3d p8,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: CDE Coprocessor must be in range 0-7 -- `cx3da p8,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx3d p0,r16,r17,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx3da p0,r16,r17,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3d p0,r0,r1,r16,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3da p0,r0,r1,r16,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3d p0,r0,r1,r0,r16,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3da p0,r0,r1,r0,r16,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx3d p0,APSR_nzcv,r15,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: ARM register expected -- `cx3da p0,APSR_nzcv,r15,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx3d p0,r9,r10,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx3da p0,r9,r10,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx3d p0,r12,r13,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be an even register between r0-r10\\. -- `cx3da p0,r12,r13,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3d p0,r0,r1,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3da p0,r0,r1,r13,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3d p0,r0,r1,r0,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3da p0,r0,r1,r0,r13,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3d p0,r0,r1,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3da p0,r0,r1,r15,r0,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3d p0,r0,r1,r0,r15,#0'\n+[^ :]+:[0-9]+: Error: Register must be r0-r14 except r13, or APSR_nzcv\\. -- `cx3da p0,r0,r1,r0,r15,#0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `cx3d p0,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3dne p0,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3dane p0,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx3d p1,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: coprocessor for insn is not enabled for cde -- `cx3da p1,r0,r1,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: cx3d requires consecutive destination registers\\. -- `cx3d p0,r0,r2,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: cx3d requires consecutive destination registers\\. -- `cx3da p0,r0,r2,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx3d p0,r0,r1,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `cx3da p0,r0,r1,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3d p0,r0,r0,r0,#0'\n+[^ :]+:[0-9]+: Error: syntax error -- `cx3da p0,r0,r0,r0,#0'"
    },
    {
      "sha": "8e5759a64e44980481330cdc043c40d2d6bacbc6",
      "filename": "gas/testsuite/gas/arm/cde-warnings.s",
      "status": "added",
      "additions": 335,
      "deletions": 0,
      "changes": 335,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-warnings.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde-warnings.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde-warnings.s?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,335 @@\n+.syntax unified\n+# cx1{a}\n+# Immediate out of range.\n+# Each register out of range.\n+# r13 => constrained unpredictable\n+# itblock => constrained unpredictable\n+# Error given when using coprocessor number not enabled on command line.\n+# Too many arguments\n+# Too little arguments\n+# r15 instead of APSR_nzcv\n+\n+cx1 p0, r0, #8192\n+cx1a p0, r0, #8192\n+cx1 p0, r0, #-1\n+cx1a p0, r0, #-1\n+\n+cx1 p8, r0, #0\n+cx1a p8, r0, #0\n+\n+cx1 p0, r16, #0\n+cx1a p0, r16, #0\n+\n+cx1 p0, r13, #0\n+cx1a p0, r13, #0\n+\n+ittt ne\n+cx1 p0, r0, #0\n+cx1ne p0, r0, #0\n+cx1ane p0, r0, #0\n+\n+cx1 p1, r0, #0\n+cx1a p1, r0, #0\n+\n+cx1 p0, r0, r0, #0\n+cx1a p0, r0, r0, #0\n+\n+cx1 p0, #0\n+cx1a p0, #0\n+\n+cx1 p0, r15, #0\n+cx1a p0, r15, #0\n+\n+# cx1d{a}\n+# Immediate out of range.\n+# Each register out of range.\n+# APSR_nzcv disallowed as destination register.\n+# rd<odd> => constrained unpredictable\n+# r< N > 10 > => constrained unpredictable\n+# IT block => constrained unpredictable\n+#\n+# Error given when using coprocessor number not enabled on command line.\n+# Disallow non-incrementing values in destination.\n+# Too many arguments\n+# Too little arguments\n+\n+cx1d p0, r0, r1, #8192\n+cx1da p0, r0, r1, #8192\n+cx1d p0, r0, r1, #-1\n+cx1da p0, r0, r1, #-1\n+\n+cx1d p8, r0, r1, #0\n+cx1da p8, r0, r1, #0\n+\n+cx1d p0, r16, r17, #0\n+cx1da p0, r16, r17, #0\n+\n+cx1d p0, APSR_nzcv, r15, #0\n+cx1da p0, APSR_nzcv, r15, #0\n+\n+cx1d p0, r9, r10, #0\n+cx1da p0, r9, r10, #0\n+\n+cx1d p0, r13, r14, #0\n+cx1da p0, r13, r14, #0\n+\n+ittt ne\n+cx1d p0, r0, r1, #0\n+cx1dne p0, r0, r1, #0\n+cx1dane p0, r0, r1, #0\n+\n+cx1d p1, r0, r1, #0\n+cx1da p1, r0, r1, #0\n+\n+cx1d p0, r0, r2, #0\n+cx1da p0, r0, r2, #0\n+\n+cx1d p0, r0, r1, r0, #0\n+cx1da p0, r0, r1, r0, #0\n+\n+cx1d p0, r0, #0\n+cx1da p0, r0, #0\n+\n+# cx2{a}\n+# Immediate out of range.\n+# Each register out of range.\n+# rd13 => constrained unpredictable\n+# rn13 => constrained unpredictable\n+# IT block => constrained unpredictable\n+#\n+# Error given when using coprocessor number not enabled on command line.\n+# Too many arguments\n+# Too little arguments.\n+# r15 instead of APSR_nzcv\n+\n+cx2 p0, r0, r0, #512\n+cx2a p0, r0, r0, #512\n+cx2 p0, r0, r0, #-1\n+cx2a p0, r0, r0, #-1\n+\n+cx2 p8, r0, r0, #0\n+cx2a p8, r0, r0, #0\n+\n+cx2 p0, r16, r0, #0\n+cx2a p0, r16, r0, #0\n+\n+cx2 p0, r0, r16, #0\n+cx2a p0, r0, r16, #0\n+\n+cx2 p0, r13, r0, #0\n+cx2a p0, r13, r0, #0\n+\n+cx2 p0, r0, r13, #0\n+cx2a p0, r0, r13, #0\n+\n+ittt ne\n+cx2 p0, r0, r0, #0\n+cx2ne p0, r0, r0, #0\n+cx2ane p0, r0, r0, #0\n+\n+cx2 p1, r0, r0, #0\n+cx2a p1, r0, r0, #0\n+\n+cx2 p0, r0, r0, r0, #0\n+cx2a p0, r0, r0, r0, #0\n+\n+cx2 p0, r0, #0\n+cx2a p0, r0, #0\n+\n+cx2 p0, r0, r15, #0\n+cx2a p0, r0, r15, #0\n+\n+cx2 p0, r15, r0, #0\n+cx2a p0, r15, r0, #0\n+\n+# cx2d{a}\n+# Immediate out of range.\n+# Each register out of range.\n+# APSR_nzcv disallowed as destination register.\n+# rd<odd> => constrained unpredictable\n+# rd< N > 10 > => constrained unpredictable\n+# rn13 => constrained unpredictable\n+# IT block => constrained unpredictable\n+#\n+# Error given when using coprocessor number not enabled on command line.\n+# Disallow non-incrementing values in destination.\n+# Too many arguments\n+# Too little arguments\n+cx2d p0, r0, r1, r0, #512\n+cx2da p0, r0, r1, r0, #512\n+cx2d p0, r0, r1, r0, #-1\n+cx2da p0, r0, r1, r0, #-1\n+\n+cx2d p8, r0, r1, r0, #0\n+cx2da p8, r0, r1, r0, #0\n+\n+cx2d p0, r16, r17, r0, #0\n+cx2da p0, r16, r17, r0, #0\n+\n+cx2d p0, r0, r1, r16, #0\n+cx2da p0, r0, r1, r16, #0\n+\n+cx2d p0, APSR_nzcv, r15, r0, #0\n+cx2da p0, APSR_nzcv, r15, r0, #0\n+\n+cx2d p0, r9, r10, r0, #0\n+cx2da p0, r9, r10, r0, #0\n+\n+cx2d p0, r12, r13, r0, #0\n+cx2da p0, r12, r13, r0, #0\n+\n+cx2d p0, r0, r1, r13, #0\n+cx2da p0, r0, r1, r13, #0\n+\n+cx2d p0, r0, r1, r15, #0\n+cx2da p0, r0, r1, r15, #0\n+\n+ittt ne\n+cx2d p0, r0, r1, r0, #0\n+cx2dne p0, r0, r1, r0, #0\n+cx2dane p0, r0, r1, r0, #0\n+\n+cx2d p1, r0, r1, r0, #0\n+cx2da p1, r0, r1, r0, #0\n+\n+cx2d p0, r0, r2, r0, #0\n+cx2da p0, r0, r2, r0, #0\n+\n+cx2d p0, r0, r1, r0, r0, #0\n+cx2da p0, r0, r1, r0, r0, #0\n+\n+cx2d p0, r0, r0, #0\n+cx2da p0, r0, r0, #0\n+\n+# cx2{a}\n+# Immediate out of range.\n+# Each register out of range.\n+# rd13 => constrained unpredictable\n+# rn13 => constrained unpredictable\n+# rm13 => constrained unpredictable\n+# IT block => constrained unpredictable\n+#\n+# Error given when using coprocessor number not enabled on command line.\n+# Too many arguments\n+# Too little arguments.\n+# r15 instead of APSR_nzcv\n+\n+cx3 p0, r0, r0, r0, #64\n+cx3a p0, r0, r0, r0, #64\n+cx3 p0, r0, r0, r0, #-1\n+cx3a p0, r0, r0, r0, #-1\n+\n+cx3 p8, r0, r0, r0, #0\n+cx3a p8, r0, r0, r0, #0\n+\n+cx3 p0, r16, r0, r0, #0\n+cx3a p0, r16, r0, r0, #0\n+\n+cx3 p0, r0, r16, r0, #0\n+cx3a p0, r0, r16, r0, #0\n+\n+cx3 p0, r0, r0, r16, #0\n+cx3a p0, r0, r0, r16, #0\n+\n+cx3 p0, r13, r0, r0, #0\n+cx3a p0, r13, r0, r0, #0\n+\n+cx3 p0, r0, r13, r0, #0\n+cx3a p0, r0, r13, r0, #0\n+\n+cx3 p0, r0, r0, r13, #0\n+cx3a p0, r0, r0, r13, #0\n+\n+ittt ne\n+cx3 p0, r0, r0, r0, #0\n+cx3ne p0, r0, r0, r0, #0\n+cx3ane p0, r0, r0, r0, #0\n+\n+cx3 p1, r0, r0, r0, #0\n+cx3a p1, r0, r0, r0, #0\n+\n+cx3 p0, r0, r0, r0, r0, #0\n+cx3a p0, r0, r0, r0, r0, #0\n+\n+cx3 p0, r0, r0, #0\n+cx3a p0, r0, r0, #0\n+\n+cx3 p0, r15, r0, r0, #0\n+cx3a p0, r15, r0, r0, #0\n+\n+cx3 p0, r0, r15, r0, #0\n+cx3a p0, r0, r15, r0, #0\n+\n+cx3 p0, r0, r0, r15, #0\n+cx3a p0, r0, r0, r15, #0\n+\n+# cx3d{a}\n+# Immediate out of range.\n+# Each register out of range.\n+# APSR_nzcv disallowed as destination register.\n+# rd<odd> => constrained unpredictable\n+# rd< N > 10 > => constrained unpredictable\n+# rn13 => constrained unpredictable\n+# rm13 => constrained unpredictable\n+# rn15 disallowed (pattern matches APSR_nzcv)\n+# rm15 disallowed (pattern matches APSR_nzcv)\n+# IT block => constrained unpredictable\n+#\n+# Error given when using coprocessor number not enabled on command line.\n+# Disallow non-incrementing values in destination.\n+# Too many arguments\n+# Too little arguments\n+cx3d p0, r0, r1, r0, r0, #64\n+cx3da p0, r0, r1, r0, r0, #64\n+cx3d p0, r0, r1, r0, r0, #-1\n+cx3da p0, r0, r1, r0, r0, #-1\n+\n+cx3d p8, r0, r1, r0, r0, #0\n+cx3da p8, r0, r1, r0, r0, #0\n+\n+cx3d p0, r16, r17, r0, r0, #0\n+cx3da p0, r16, r17, r0, r0, #0\n+\n+cx3d p0, r0, r1, r16, r0, #0\n+cx3da p0, r0, r1, r16, r0, #0\n+\n+cx3d p0, r0, r1, r0, r16, #0\n+cx3da p0, r0, r1, r0, r16, #0\n+\n+cx3d p0, APSR_nzcv, r15, r0, r0, #0\n+cx3da p0, APSR_nzcv, r15, r0, r0, #0\n+\n+cx3d p0, r9, r10, r0, r0, #0\n+cx3da p0, r9, r10, r0, r0, #0\n+\n+cx3d p0, r12, r13, r0, r0, #0\n+cx3da p0, r12, r13, r0, r0, #0\n+\n+cx3d p0, r0, r1, r13, r0, #0\n+cx3da p0, r0, r1, r13, r0, #0\n+\n+cx3d p0, r0, r1, r0, r13, #0\n+cx3da p0, r0, r1, r0, r13, #0\n+\n+cx3d p0, r0, r1, r15, r0, #0\n+cx3da p0, r0, r1, r15, r0, #0\n+\n+cx3d p0, r0, r1, r0, r15, #0\n+cx3da p0, r0, r1, r0, r15, #0\n+\n+ittt ne\n+cx3d p0, r0, r1, r0, r0, #0\n+cx3dne p0, r0, r1, r0, r0, #0\n+cx3dane p0, r0, r1, r0, r0, #0\n+\n+cx3d p1, r0, r1, r0, r0, #0\n+cx3da p1, r0, r1, r0, r0, #0\n+\n+cx3d p0, r0, r2, r0, r0, #0\n+cx3da p0, r0, r2, r0, r0, #0\n+\n+cx3d p0, r0, r1, r0, r0, r0, #0\n+cx3da p0, r0, r1, r0, r0, r0, #0\n+\n+cx3d p0, r0, r0, r0, #0\n+cx3da p0, r0, r0, r0, #0"
    },
    {
      "sha": "34de201513b1f89b29397d0663b184ca7d1cdf16",
      "filename": "gas/testsuite/gas/arm/cde.d",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde.d?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,119 @@\n+#name: Custom Datapath Extension (CDE)\n+#source: cde.s\n+#as: -mno-warn-deprecated -march=armv8.1-m.main+cdecp0+cdecp7+mve.fp -I$srcdir/$subdir\n+#as: -mno-warn-deprecated -march=armv8.1-m.main+cdecp0+cdecp7+mve -I$srcdir/$subdir\n+#as: -mno-warn-deprecated -march=armv8.1-m.main+cdecp0+cdecp1+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7+mve.fp -I$srcdir/$subdir\n+#as: -mno-warn-deprecated -march=armv8.1-m.main+cdecp0+cdecp1+cdecp2+cdecp3+cdecp4+cdecp5+cdecp6+cdecp7+mve -I$srcdir/$subdir\n+#objdump: -M force-thumb -dr --show-raw-insn -marmv8.1-m.main -M coproc0=cde -M coproc7=cde\n+#...\n+00000000 <\\.text>:\n+ *[0-9a-f]+:\tee00 0000 \tcx1\tp0, r0, #0\n+ *[0-9a-f]+:\tee3f 0000 \tcx1\tp0, r0, #8064\n+ *[0-9a-f]+:\tee00 0080 \tcx1\tp0, r0, #64\n+ *[0-9a-f]+:\tee00 003f \tcx1\tp0, r0, #63\n+ *[0-9a-f]+:\tee00 0700 \tcx1\tp7, r0, #0\n+ *[0-9a-f]+:\tee00 f000 \tcx1\tp0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee00 9000 \tcx1\tp0, r9, #0\n+ *[0-9a-f]+:\tfe00 0000 \tcx1a\tp0, r0, #0\n+ *[0-9a-f]+:\tfe3f 0000 \tcx1a\tp0, r0, #8064\n+ *[0-9a-f]+:\tfe00 0080 \tcx1a\tp0, r0, #64\n+ *[0-9a-f]+:\tfe00 003f \tcx1a\tp0, r0, #63\n+ *[0-9a-f]+:\tfe00 0700 \tcx1a\tp7, r0, #0\n+ *[0-9a-f]+:\tfe00 f000 \tcx1a\tp0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe00 9000 \tcx1a\tp0, r9, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe00 0000 \tcx1a\tp0, r0, #0\n+ *[0-9a-f]+:\tee00 0040 \tcx1d\tp0, r0, r1, #0\n+ *[0-9a-f]+:\tee3f 0040 \tcx1d\tp0, r0, r1, #8064\n+ *[0-9a-f]+:\tee00 00c0 \tcx1d\tp0, r0, r1, #64\n+ *[0-9a-f]+:\tee00 007f \tcx1d\tp0, r0, r1, #63\n+ *[0-9a-f]+:\tee00 0740 \tcx1d\tp7, r0, r1, #0\n+ *[0-9a-f]+:\tee00 a040 \tcx1d\tp0, sl, fp, #0\n+ *[0-9a-f]+:\tfe00 0040 \tcx1da\tp0, r0, r1, #0\n+ *[0-9a-f]+:\tfe3f 0040 \tcx1da\tp0, r0, r1, #8064\n+ *[0-9a-f]+:\tfe00 00c0 \tcx1da\tp0, r0, r1, #64\n+ *[0-9a-f]+:\tfe00 007f \tcx1da\tp0, r0, r1, #63\n+ *[0-9a-f]+:\tfe00 0740 \tcx1da\tp7, r0, r1, #0\n+ *[0-9a-f]+:\tfe00 a040 \tcx1da\tp0, sl, fp, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe00 0040 \tcx1da\tp0, r0, r1, #0\n+ *[0-9a-f]+:\tee40 0000 \tcx2\tp0, r0, r0, #0\n+ *[0-9a-f]+:\tee70 0000 \tcx2\tp0, r0, r0, #384\n+ *[0-9a-f]+:\tee40 0080 \tcx2\tp0, r0, r0, #64\n+ *[0-9a-f]+:\tee40 003f \tcx2\tp0, r0, r0, #63\n+ *[0-9a-f]+:\tee40 0700 \tcx2\tp7, r0, r0, #0\n+ *[0-9a-f]+:\tee40 f000 \tcx2\tp0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tee40 9000 \tcx2\tp0, r9, r0, #0\n+ *[0-9a-f]+:\tee4f 0000 \tcx2\tp0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee49 0000 \tcx2\tp0, r0, r9, #0\n+ *[0-9a-f]+:\tfe40 0000 \tcx2a\tp0, r0, r0, #0\n+ *[0-9a-f]+:\tfe70 0000 \tcx2a\tp0, r0, r0, #384\n+ *[0-9a-f]+:\tfe40 0080 \tcx2a\tp0, r0, r0, #64\n+ *[0-9a-f]+:\tfe40 003f \tcx2a\tp0, r0, r0, #63\n+ *[0-9a-f]+:\tfe40 0700 \tcx2a\tp7, r0, r0, #0\n+ *[0-9a-f]+:\tfe40 f000 \tcx2a\tp0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tfe40 9000 \tcx2a\tp0, r9, r0, #0\n+ *[0-9a-f]+:\tfe4f 0000 \tcx2a\tp0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe49 0000 \tcx2a\tp0, r0, r9, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe40 0000 \tcx2a\tp0, r0, r0, #0\n+ *[0-9a-f]+:\tee40 0040 \tcx2d\tp0, r0, r1, r0, #0\n+ *[0-9a-f]+:\tee70 0040 \tcx2d\tp0, r0, r1, r0, #384\n+ *[0-9a-f]+:\tee40 00c0 \tcx2d\tp0, r0, r1, r0, #64\n+ *[0-9a-f]+:\tee40 007f \tcx2d\tp0, r0, r1, r0, #63\n+ *[0-9a-f]+:\tee40 0740 \tcx2d\tp7, r0, r1, r0, #0\n+ *[0-9a-f]+:\tee40 a040 \tcx2d\tp0, sl, fp, r0, #0\n+ *[0-9a-f]+:\tee4f 0040 \tcx2d\tp0, r0, r1, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee49 0040 \tcx2d\tp0, r0, r1, r9, #0\n+ *[0-9a-f]+:\tfe40 0040 \tcx2da\tp0, r0, r1, r0, #0\n+ *[0-9a-f]+:\tfe70 0040 \tcx2da\tp0, r0, r1, r0, #384\n+ *[0-9a-f]+:\tfe40 00c0 \tcx2da\tp0, r0, r1, r0, #64\n+ *[0-9a-f]+:\tfe40 007f \tcx2da\tp0, r0, r1, r0, #63\n+ *[0-9a-f]+:\tfe40 0740 \tcx2da\tp7, r0, r1, r0, #0\n+ *[0-9a-f]+:\tfe40 a040 \tcx2da\tp0, sl, fp, r0, #0\n+ *[0-9a-f]+:\tfe4f 0040 \tcx2da\tp0, r0, r1, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe49 0040 \tcx2da\tp0, r0, r1, r9, #0\n+ *[0-9a-f]+:\tee80 0000 \tcx3\tp0, r0, r0, r0, #0\n+ *[0-9a-f]+:\teef0 0000 \tcx3\tp0, r0, r0, r0, #56\n+ *[0-9a-f]+:\tee80 0080 \tcx3\tp0, r0, r0, r0, #4\n+ *[0-9a-f]+:\tee80 0030 \tcx3\tp0, r0, r0, r0, #3\n+ *[0-9a-f]+:\tee80 0700 \tcx3\tp7, r0, r0, r0, #0\n+ *[0-9a-f]+:\tee80 000f \tcx3\tp0, APSR_nzcv, r0, r0, #0\n+ *[0-9a-f]+:\tee80 0009 \tcx3\tp0, r9, r0, r0, #0\n+ *[0-9a-f]+:\tee8f 0000 \tcx3\tp0, r0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tee89 0000 \tcx3\tp0, r0, r9, r0, #0\n+ *[0-9a-f]+:\tee80 f000 \tcx3\tp0, r0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee80 9000 \tcx3\tp0, r0, r0, r9, #0\n+ *[0-9a-f]+:\tfe80 0000 \tcx3a\tp0, r0, r0, r0, #0\n+ *[0-9a-f]+:\tfef0 0000 \tcx3a\tp0, r0, r0, r0, #56\n+ *[0-9a-f]+:\tfe80 0080 \tcx3a\tp0, r0, r0, r0, #4\n+ *[0-9a-f]+:\tfe80 0030 \tcx3a\tp0, r0, r0, r0, #3\n+ *[0-9a-f]+:\tfe80 0700 \tcx3a\tp7, r0, r0, r0, #0\n+ *[0-9a-f]+:\tfe80 000f \tcx3a\tp0, APSR_nzcv, r0, r0, #0\n+ *[0-9a-f]+:\tfe80 0009 \tcx3a\tp0, r9, r0, r0, #0\n+ *[0-9a-f]+:\tfe8f 0000 \tcx3a\tp0, r0, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tfe89 0000 \tcx3a\tp0, r0, r9, r0, #0\n+ *[0-9a-f]+:\tfe80 f000 \tcx3a\tp0, r0, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe80 9000 \tcx3a\tp0, r0, r0, r9, #0\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tfe80 0000 \tcx3a\tp0, r0, r0, r0, #0\n+ *[0-9a-f]+:\tee80 0040 \tcx3d\tp0, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\teef0 0040 \tcx3d\tp0, r0, r1, r0, r0, #56\n+ *[0-9a-f]+:\tee80 00c0 \tcx3d\tp0, r0, r1, r0, r0, #4\n+ *[0-9a-f]+:\tee80 0070 \tcx3d\tp0, r0, r1, r0, r0, #3\n+ *[0-9a-f]+:\tee80 0740 \tcx3d\tp7, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\tee80 004a \tcx3d\tp0, sl, fp, r0, r0, #0\n+ *[0-9a-f]+:\tee8f 0040 \tcx3d\tp0, r0, r1, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tee89 0040 \tcx3d\tp0, r0, r1, r9, r0, #0\n+ *[0-9a-f]+:\tee80 f040 \tcx3d\tp0, r0, r1, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tee80 9040 \tcx3d\tp0, r0, r1, r0, r9, #0\n+ *[0-9a-f]+:\tfe80 0040 \tcx3da\tp0, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\tfef0 0040 \tcx3da\tp0, r0, r1, r0, r0, #56\n+ *[0-9a-f]+:\tfe80 00c0 \tcx3da\tp0, r0, r1, r0, r0, #4\n+ *[0-9a-f]+:\tfe80 0070 \tcx3da\tp0, r0, r1, r0, r0, #3\n+ *[0-9a-f]+:\tfe80 0740 \tcx3da\tp7, r0, r1, r0, r0, #0\n+ *[0-9a-f]+:\tfe80 004a \tcx3da\tp0, sl, fp, r0, r0, #0\n+ *[0-9a-f]+:\tfe8f 0040 \tcx3da\tp0, r0, r1, APSR_nzcv, r0, #0\n+ *[0-9a-f]+:\tfe89 0040 \tcx3da\tp0, r0, r1, r9, r0, #0\n+ *[0-9a-f]+:\tfe80 f040 \tcx3da\tp0, r0, r1, r0, APSR_nzcv, #0\n+ *[0-9a-f]+:\tfe80 9040 \tcx3da\tp0, r0, r1, r0, r9, #0"
    },
    {
      "sha": "1ee18704941aca9069777511c0feaf2004b592b7",
      "filename": "gas/testsuite/gas/arm/cde.s",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/gas/testsuite/gas/arm/cde.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/cde.s?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -0,0 +1,3 @@\n+.syntax unified\n+\n+.include \"cde-scalar.s\""
    },
    {
      "sha": "9c0b5d2ef8ca83a1e174e94b36f8831a4f42379d",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -1,3 +1,16 @@\n+2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opcode/arm.h (ARM_EXT2_CDE): New extension macro.\n+\t(ARM_EXT2_CDE0): New extension macro.\n+\t(ARM_EXT2_CDE1): New extension macro.\n+\t(ARM_EXT2_CDE2): New extension macro.\n+\t(ARM_EXT2_CDE3): New extension macro.\n+\t(ARM_EXT2_CDE4): New extension macro.\n+\t(ARM_EXT2_CDE5): New extension macro.\n+\t(ARM_EXT2_CDE6): New extension macro.\n+\t(ARM_EXT2_CDE7): New extension macro.\n+\n 2020-02-07  Sergey Belyashov  <sergey.belyashov@gmail.com>\n \n \tPR 25469"
    },
    {
      "sha": "979bd20885812504869d39ce374db38fbce429ba",
      "filename": "include/opcode/arm.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/include/opcode/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/include/opcode/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/arm.h?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -79,6 +79,15 @@\n #define ARM_EXT2_CRC\t     0x00080000\t/* ARMv8 CRC32 */\n #define ARM_EXT2_MVE\t     0x00100000\t/* MVE Integer extension.\t   */\n #define ARM_EXT2_MVE_FP\t     0x00200000\t/* MVE Floating Point extension.   */\n+#define ARM_EXT2_CDE\t     0x00400000 /* Custom Datapath Extension.\t   */\n+#define ARM_EXT2_CDE0\t     0x00800000 /* Using CDE coproc 0.\t   */\n+#define ARM_EXT2_CDE1\t     0x01000000 /* Using CDE coproc 1.\t   */\n+#define ARM_EXT2_CDE2\t     0x02000000 /* Using CDE coproc 2.\t   */\n+#define ARM_EXT2_CDE3\t     0x04000000 /* Using CDE coproc 3.\t   */\n+#define ARM_EXT2_CDE4\t     0x08000000 /* Using CDE coproc 4.\t   */\n+#define ARM_EXT2_CDE5\t     0x10000000 /* Using CDE coproc 5.\t   */\n+#define ARM_EXT2_CDE6\t     0x20000000 /* Using CDE coproc 6.\t   */\n+#define ARM_EXT2_CDE7\t     0x40000000 /* Using CDE coproc 7.\t   */\n \n /* Co-processor space extensions.  */\n #define ARM_CEXT_XSCALE\t     0x00000001\t/* Allow MIA etc.\t \t   */"
    },
    {
      "sha": "fb4f2621534811f28ddf558532d812054e4e2dfa",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -1,3 +1,15 @@\n+2020-02-10  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* arm-dis.c (struct cdeopcode32): New.\n+\t(CDE_OPCODE): New macro.\n+\t(cde_opcodes): New disassembly table.\n+\t(regnames): New option to table.\n+\t(cde_coprocs): New global variable.\n+\t(print_insn_cde): New\n+\t(print_insn_thumb32): Use print_insn_cde.\n+\t(parse_arm_disassembler_options): Parse coprocN args.\n+\n 2020-02-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/25516"
    },
    {
      "sha": "2a29887f1695435d45c1d7bb4a917212588d4315",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 209,
      "deletions": 1,
      "changes": 210,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4934a27c8c1d5c8623366f5dbafae8af60b96bc0/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=4934a27c8c1d5c8623366f5dbafae8af60b96bc0",
      "patch": "@@ -355,6 +355,16 @@ struct opcode32\n   const char *  assembler;\t/* How to disassemble this insn.  */\n };\n \n+struct cdeopcode32\n+{\n+  arm_feature_set arch;\t\t/* Architecture defining this insn.  */\n+  uint8_t coproc_shift;\t\t/* coproc is this far into op.  */\n+  uint16_t coproc_mask;\t\t/* Length of coproc field in op.  */\n+  unsigned long value;\t\t/* If arch is 0 then value is a sentinel.  */\n+  unsigned long mask;\t\t/* Recognise insn if (op & mask) == value.  */\n+  const char *  assembler;\t/* How to disassemble this insn.  */\n+};\n+\n /* MVE opcodes.  */\n \n struct mopcode32\n@@ -460,6 +470,54 @@ enum opcode_sentinel_enum\n \n /* Common coprocessor opcodes shared between Arm and Thumb-2.  */\n \n+/* print_insn_cde recognizes the following format control codes:\n+\n+   %%\t\t\t%\n+\n+   %a\t\t\tprint 'a' iff bit 28 is 1\n+   %p\t\t\tprint bits 8-10 as coprocessor\n+   %<bitfield>d\t\tprint as decimal\n+   %<bitfield>r\t\tprint as an ARM register\n+   %<bitfield>n\t\tprint as an ARM register but r15 is APSR_nzcv\n+   %<bitfield>T\t\tprint as an ARM register + 1\n+   %<bitfield>R\t\tas %r but r13 is UNPREDICTABLE\n+   %<bitfield>S\t\tas %r but rX where X > 10 is UNPREDICTABLE\n+   %j\t\t\tprint immediate taken from bits (16..21,7,0..5)\n+   %k\t\t\tprint immediate taken from bits (20..21,7,0..5).\n+   %l\t\t\tprint immediate taken from bits (20..22,7,4..5).  */\n+\n+/* At the moment there is only one valid position for the coprocessor number,\n+   and hence that's encoded in the macro below.  */\n+#define CDE_OPCODE(ARCH, VALUE, MASK, ASM) \\\n+  { ARCH, 8, 7, VALUE, MASK, ASM }\n+static const struct cdeopcode32 cde_opcodes[] =\n+{\n+  /* Custom Datapath Extension instructions.  */\n+  CDE_OPCODE (ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE),\n+\t      0xee000000, 0xefc00840,\n+\t      \"cx1%a\\t%p, %12-15n, #%0-5,7,16-21d\"),\n+  CDE_OPCODE (ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE),\n+\t      0xee000040, 0xefc00840,\n+\t      \"cx1d%a\\t%p, %12-15S, %12-15T, #%0-5,7,16-21d\"),\n+\n+  CDE_OPCODE (ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE),\n+\t      0xee400000, 0xefc00840,\n+\t      \"cx2%a\\t%p, %12-15n, %16-19n, #%0-5,7,20-21d\"),\n+  CDE_OPCODE (ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE),\n+\t      0xee400040, 0xefc00840,\n+\t      \"cx2d%a\\t%p, %12-15S, %12-15T, %16-19n, #%0-5,7,20-21d\"),\n+\n+  CDE_OPCODE (ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE),\n+\t      0xee800000, 0xef800840,\n+\t      \"cx3%a\\t%p, %0-3n, %16-19n, %12-15n, #%4-5,7,20-22d\"),\n+  CDE_OPCODE (ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE),\n+\t      0xee800040, 0xef800840,\n+\t     \"cx3d%a\\t%p, %0-3S, %0-3T, %16-19n, %12-15n, #%4-5,7,20-22d\"),\n+\n+  CDE_OPCODE (ARM_FEATURE_CORE_LOW (0), 0, 0, 0)\n+\n+};\n+\n static const struct sopcode32 coprocessor_opcodes[] =\n {\n   /* XScale instructions.  */\n@@ -5115,7 +5173,8 @@ static const arm_regname regnames[] =\n   { \"reg-names-atpcs\", N_(\"Select register names used in the ATPCS\"),\n     { \"a1\", \"a2\", \"a3\", \"a4\", \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\",  \"v8\",  \"IP\",  \"SP\",  \"LR\",  \"PC\" }},\n   { \"reg-names-special-atpcs\", N_(\"Select special register names used in the ATPCS\"),\n-    { \"a1\", \"a2\", \"a3\", \"a4\", \"v1\", \"v2\", \"v3\", \"WR\", \"v5\", \"SB\", \"SL\",  \"FP\",  \"IP\",  \"SP\",  \"LR\",  \"PC\" }}\n+    { \"a1\", \"a2\", \"a3\", \"a4\", \"v1\", \"v2\", \"v3\", \"WR\", \"v5\", \"SB\", \"SL\",  \"FP\",  \"IP\",  \"SP\",  \"LR\",  \"PC\" }},\n+  { \"coproc<N>=(cde|generic)\", N_(\"Enable CDE extensions for coprocessor N space\"), { NULL } }\n };\n \n static const char *const iwmmxt_wwnames[] =\n@@ -5195,6 +5254,7 @@ static unsigned int regname_selected = 1;\n #define arm_regnames      regnames[regname_selected].reg_names\n \n static bfd_boolean force_thumb = FALSE;\n+static uint16_t cde_coprocs = 0;\n \n /* Current IT instruction state.  This contains the same state as the IT\n    bits in the CPSR.  */\n@@ -8786,6 +8846,121 @@ print_arm_address (bfd_vma pc, struct disassemble_info *info, long given)\n   return (signed long) offset;\n }\n \n+\n+/* Print one cde instruction on INFO->STREAM.\n+   Return TRUE if the instuction matched, FALSE if this is not a\n+   recognised cde instruction.  */\n+static bfd_boolean\n+print_insn_cde (struct disassemble_info *info, long given, bfd_boolean thumb)\n+{\n+  const struct cdeopcode32 *insn;\n+  void *stream = info->stream;\n+  fprintf_ftype func = info->fprintf_func;\n+\n+  if (thumb)\n+  {\n+    /* Manually extract the coprocessor code from a known point.\n+       This position is the same across all CDE instructions.  */\n+    for (insn = cde_opcodes; insn->assembler; insn++)\n+    {\n+      uint16_t coproc = (given >> insn->coproc_shift) & insn->coproc_mask;\n+      uint16_t coproc_mask = 1 << coproc;\n+      if (! (coproc_mask & cde_coprocs))\n+\tcontinue;\n+\n+      if ((given & insn->mask) == insn->value)\n+      {\n+\tbfd_boolean is_unpredictable = FALSE;\n+\tconst char *c;\n+\n+\tfor (c = insn->assembler; *c; c++)\n+\t{\n+\t  if (*c == '%')\n+\t  {\n+\t    switch (*++c)\n+\t    {\n+\t      case '%':\n+\t\tfunc (stream, \"%%\");\n+\t\tbreak;\n+\n+\t      case '0': case '1': case '2': case '3': case '4':\n+\t      case '5': case '6': case '7': case '8': case '9':\n+\t      {\n+\t\tint width;\n+\t\tunsigned long value;\n+\n+\t\tc = arm_decode_bitfield (c, given, &value, &width);\n+\n+\t\tswitch (*c)\n+\t\t{\n+\t\t  case 'S':\n+\t\t    if (value > 10)\n+\t\t      is_unpredictable = TRUE;\n+\t\t    /* Fall through.  */\n+\t\t  case 'R':\n+\t\t    if (value == 13)\n+\t\t      is_unpredictable = TRUE;\n+\t\t    /* Fall through.  */\n+\t\t  case 'r':\n+\t\t    func (stream, \"%s\", arm_regnames[value]);\n+\t\t    break;\n+\n+\t\t  case 'n':\n+\t\t    if (value == 15)\n+\t\t      func (stream, \"%s\", \"APSR_nzcv\");\n+\t\t    else\n+\t\t      func (stream, \"%s\", arm_regnames[value]);\n+\t\t    break;\n+\n+\t\t  case 'T':\n+\t\t    func (stream, \"%s\", arm_regnames[value + 1]);\n+\t\t    break;\n+\n+\t\t  case 'd':\n+\t\t    func (stream, \"%ld\", value);\n+\t\t    break;\n+\n+\t\tdefault:\n+\t\t  abort ();\n+\t\t}\n+\t      }\n+\t    break;\n+\n+\t    case 'p':\n+\t      {\n+\t\tuint8_t proc_number = (given >> 8) & 0x7;\n+\t\tfunc (stream, \"p%u\", proc_number);\n+\t\tbreak;\n+\t      }\n+\n+\t    case 'a':\n+\t      {\n+\t\tuint8_t a_offset = 28;\n+\t\tif (given & (1 << a_offset))\n+\t\t  func (stream, \"a\");\n+\t\tbreak;\n+\t      }\n+\t  default:\n+\t    abort ();\n+\t  }\n+\t}\n+\telse\n+\t  func (stream, \"%c\", *c);\n+      }\n+\n+      if (is_unpredictable)\n+\tfunc (stream, UNPREDICTABLE_INSTRUCTION);\n+\n+      return TRUE;\n+      }\n+    }\n+    return FALSE;\n+  }\n+  else\n+    return FALSE;\n+}\n+\n+\n /* Print one neon instruction on INFO->STREAM.\n    Return TRUE if the instuction matched, FALSE if this is not a\n    recognised neon instruction.  */\n@@ -10587,6 +10762,9 @@ print_insn_thumb32 (bfd_vma pc, struct disassemble_info *info, long given)\n   if (is_mve && print_insn_mve (info, given))\n     return;\n \n+  if (print_insn_cde (info, given, TRUE))\n+    return;\n+\n   if (print_insn_generic_coprocessor (pc, info, given, TRUE))\n     return;\n \n@@ -11356,6 +11534,36 @@ parse_arm_disassembler_options (const char *options)\n \tforce_thumb = 1;\n       else if (CONST_STRNEQ (opt, \"no-force-thumb\"))\n \tforce_thumb = 0;\n+      else if (CONST_STRNEQ (opt, \"coproc\"))\n+\t{\n+\t  const char *procptr = opt + sizeof (\"coproc\") - 1;\n+\t  char *endptr;\n+\t  uint8_t coproc_number = strtol (procptr, &endptr, 10);\n+\t  if (endptr != procptr + 1 || coproc_number > 7)\n+\t    {\n+\t      opcodes_error_handler (_(\"cde coprocessor not between 0-7: %s\"),\n+\t\t\t\t     opt);\n+\t      continue;\n+\t    }\n+\t  if (*endptr != '=')\n+\t    {\n+\t      opcodes_error_handler (_(\"coproc must have an argument: %s\"),\n+\t\t\t\t     opt);\n+\t      continue;\n+\t    }\n+\t  endptr += 1;\n+\t  if (CONST_STRNEQ (endptr, \"generic\"))\n+\t    cde_coprocs &= ~(1 << coproc_number);\n+\t  else if (CONST_STRNEQ (endptr, \"cde\")\n+\t\t   || CONST_STRNEQ (endptr, \"CDE\"))\n+\t    cde_coprocs |= (1 << coproc_number);\n+\t  else\n+\t    {\n+\t      opcodes_error_handler (\n+\t\t  _(\"coprocN argument takes options \\\"generic\\\",\"\n+\t\t    \" \\\"cde\\\", or \\\"CDE\\\": %s\"), opt);\n+\t    }\n+\t}\n       else\n \t/* xgettext: c-format */\n \topcodes_error_handler (_(\"unrecognised disassembler option: %s\"), opt);"
    }
  ]
}