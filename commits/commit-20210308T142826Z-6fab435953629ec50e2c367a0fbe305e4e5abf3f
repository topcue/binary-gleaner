{
  "sha": "6fab435953629ec50e2c367a0fbe305e4e5abf3f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmZhYjQzNTk1MzYyOWVjNTBlMmMzNjdhMGZiZTMwNWU0ZTVhYmYzZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:26Z"
    },
    "message": "Implement some Rust operations\n\nThis implements some straightforward Rust operations, using existing\ntemplate classes.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (eval_op_rust_complement, eval_op_rust_array): No\n\tlonger static.  Add \"opcode\" parameter.\n\t(rust_evaluate_subexp): Update.\n\t* rust-exp.h: New file.",
    "tree": {
      "sha": "f392b67237130fa83e6b99751075e9fe2c39c1d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f392b67237130fa83e6b99751075e9fe2c39c1d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6fab435953629ec50e2c367a0fbe305e4e5abf3f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fab435953629ec50e2c367a0fbe305e4e5abf3f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6fab435953629ec50e2c367a0fbe305e4e5abf3f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fab435953629ec50e2c367a0fbe305e4e5abf3f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9dcd3e295774f93ec0cdcd687481c98e2d5e606c"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 63,
    "deletions": 5
  },
  "files": [
    {
      "sha": "06be5b918ad33f2008031e4407a424145e1c4b03",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6fab435953629ec50e2c367a0fbe305e4e5abf3f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6fab435953629ec50e2c367a0fbe305e4e5abf3f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6fab435953629ec50e2c367a0fbe305e4e5abf3f",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (eval_op_rust_complement, eval_op_rust_array): No\n+\tlonger static.  Add \"opcode\" parameter.\n+\t(rust_evaluate_subexp): Update.\n+\t* rust-exp.h: New file.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* f-lang.c (eval_op_f_abs, eval_op_f_mod, eval_op_f_ceil)"
    },
    {
      "sha": "cce1fd9a7d9fe0492741bf56d4316717bb7a1786",
      "filename": "gdb/rust-exp.h",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6fab435953629ec50e2c367a0fbe305e4e5abf3f/gdb/rust-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6fab435953629ec50e2c367a0fbe305e4e5abf3f/gdb/rust-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.h?ref=6fab435953629ec50e2c367a0fbe305e4e5abf3f",
      "patch": "@@ -0,0 +1,47 @@\n+/* Definitions for Rust expressions\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef RUST_EXP_H\n+#define RUST_EXP_H\n+\n+#include \"expop.h\"\n+\n+extern struct value *eval_op_rust_complement (struct type *expect_type,\n+\t\t\t\t\t      struct expression *exp,\n+\t\t\t\t\t      enum noside noside,\n+\t\t\t\t\t      enum exp_opcode opcode,\n+\t\t\t\t\t      struct value *value);\n+extern struct value *eval_op_rust_array (struct type *expect_type,\n+\t\t\t\t\t struct expression *exp,\n+\t\t\t\t\t enum noside noside,\n+\t\t\t\t\t enum exp_opcode opcode,\n+\t\t\t\t\t struct value *ncopies,\n+\t\t\t\t\t struct value *elt);\n+\n+namespace expr\n+{\n+\n+using rust_unop_compl_operation = unop_operation<UNOP_COMPLEMENT,\n+\t\t\t\t\t\t  eval_op_rust_complement>;\n+using rust_array_operation = binop_operation<OP_RUST_ARRAY,\n+\t\t\t\t\t     eval_op_rust_array>;\n+\n+} /* namespace expr */\n+\n+#endif /* RUST_EXP_H */"
    },
    {
      "sha": "63ea21b9e324e7d18e0961b347a425fdbbe36182",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6fab435953629ec50e2c367a0fbe305e4e5abf3f/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6fab435953629ec50e2c367a0fbe305e4e5abf3f/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=6fab435953629ec50e2c367a0fbe305e4e5abf3f",
      "patch": "@@ -39,6 +39,7 @@\n #include <vector>\n #include \"cli/cli-style.h\"\n #include \"parser-defs.h\"\n+#include \"rust-exp.h\"\n \n /* See rust-lang.h.  */\n \n@@ -1339,9 +1340,10 @@ eval_op_rust_ind (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_COMPLEMENT.  */\n \n-static struct value *\n+struct value *\n eval_op_rust_complement (struct type *expect_type, struct expression *exp,\n \t\t\t enum noside noside,\n+\t\t\t enum exp_opcode opcode,\n \t\t\t struct value *value)\n {\n   if (noside == EVAL_SKIP)\n@@ -1356,9 +1358,10 @@ eval_op_rust_complement (struct type *expect_type, struct expression *exp,\n \n /* A helper function for OP_ARRAY.  */\n \n-static struct value *\n+struct value *\n eval_op_rust_array (struct type *expect_type, struct expression *exp,\n \t\t    enum noside noside,\n+\t\t    enum exp_opcode opcode,\n \t\t    struct value *elt, struct value *ncopies)\n {\n   int copies = value_as_long (ncopies);\n@@ -1505,8 +1508,9 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \t\t      int *pos, enum noside noside)\n {\n   struct value *result;\n+  enum exp_opcode op = exp->elts[*pos].opcode;\n \n-  switch (exp->elts[*pos].opcode)\n+  switch (op)\n     {\n     case UNOP_IND:\n       {\n@@ -1528,7 +1532,7 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \n \t++*pos;\n \tvalue = evaluate_subexp (nullptr, exp, pos, noside);\n-\tresult = eval_op_rust_complement (expect_type, exp, noside, value);\n+\tresult = eval_op_rust_complement (expect_type, exp, noside, op, value);\n       }\n       break;\n \n@@ -1621,7 +1625,7 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \n \telt = rust_evaluate_subexp (NULL, exp, pos, noside);\n \tncopies = rust_evaluate_subexp (NULL, exp, pos, noside);\n-\treturn eval_op_rust_array (expect_type, exp, noside, elt, ncopies);\n+\treturn eval_op_rust_array (expect_type, exp, noside, op, elt, ncopies);\n       }\n       break;\n "
    }
  ]
}