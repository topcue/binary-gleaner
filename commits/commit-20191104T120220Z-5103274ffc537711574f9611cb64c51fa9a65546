{
  "sha": "5103274ffc537711574f9611cb64c51fa9a65546",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTEwMzI3NGZmYzUzNzcxMTU3NGY5NjExY2I2NGM1MWZhOWE2NTU0Ng==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-11-04T12:02:20Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-11-04T12:02:20Z"
    },
    "message": "Fix potential array overruns when disassembling corrupt v850 binaries.\n\n\t* v850-dis.c (get_v850_sreg_name): New function.  Returns the name\n\tof a v850 system register.  Move the v850_sreg_names array into\n\tthis function.\n\t(get_v850_reg_name): Likewise for ordinary register names.\n\t(get_v850_vreg_name): Likewise for vector register names.\n\t(get_v850_cc_name): Likewise for condition codes.\n\t* get_v850_float_cc_name): Likewise for floating point condition\n\tcodes.\n\t(get_v850_cacheop_name): Likewise for cache-ops.\n\t(get_v850_prefop_name): Likewise for pref-ops.\n\t(disassemble): Use the new accessor functions.",
    "tree": {
      "sha": "0edb06903916adcdee98f7f30ba471f894e36805",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0edb06903916adcdee98f7f30ba471f894e36805"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5103274ffc537711574f9611cb64c51fa9a65546",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5103274ffc537711574f9611cb64c51fa9a65546",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5103274ffc537711574f9611cb64c51fa9a65546",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5103274ffc537711574f9611cb64c51fa9a65546/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "64f52b3ec1853d14293d5a461d7abc8bde5e3f62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64f52b3ec1853d14293d5a461d7abc8bde5e3f62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/64f52b3ec1853d14293d5a461d7abc8bde5e3f62"
    }
  ],
  "stats": {
    "total": 189,
    "additions": 129,
    "deletions": 60
  },
  "files": [
    {
      "sha": "19f52ffad7b740c9cf9fbc3437510216ed1225ae",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5103274ffc537711574f9611cb64c51fa9a65546/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5103274ffc537711574f9611cb64c51fa9a65546/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=5103274ffc537711574f9611cb64c51fa9a65546",
      "patch": "@@ -1,3 +1,17 @@\n+2019-11-04  Nick Clifton  <nickc@redhat.com>\n+\n+\t* v850-dis.c (get_v850_sreg_name): New function.  Returns the name\n+\tof a v850 system register.  Move the v850_sreg_names array into\n+\tthis function.\n+\t(get_v850_reg_name): Likewise for ordinary register names.\n+\t(get_v850_vreg_name): Likewise for vector register names.\n+\t(get_v850_cc_name): Likewise for condition codes.\n+\t* get_v850_float_cc_name): Likewise for floating point condition\n+\tcodes.\n+\t(get_v850_cacheop_name): Likewise for cache-ops.\n+\t(get_v850_prefop_name): Likewise for pref-ops.\n+\t(disassemble): Use the new accessor functions.\n+\n 2019-10-30  Delia Burduv   <delia.burduv@arm.com>\n \n \t* aarch64-opc.c (print_immediate_offset_address): Don't print the"
    },
    {
      "sha": "f8b5d1c93f29b8e41ad46688e155476e1bddd6a7",
      "filename": "opcodes/v850-dis.c",
      "status": "modified",
      "additions": 115,
      "deletions": 60,
      "changes": 175,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5103274ffc537711574f9611cb64c51fa9a65546/opcodes/v850-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5103274ffc537711574f9611cb64c51fa9a65546/opcodes/v850-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/v850-dis.c?ref=5103274ffc537711574f9611cb64c51fa9a65546",
      "patch": "@@ -25,63 +25,14 @@\n #include \"opcode/v850.h\"\n #include \"disassemble.h\"\n #include \"opintl.h\"\n-\n-static const char *const v850_reg_names[] =\n-{\n-  \"r0\", \"r1\", \"r2\", \"sp\", \"gp\", \"r5\", \"r6\", \"r7\",\n-  \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\n-  \"r16\", \"r17\", \"r18\", \"r19\", \"r20\", \"r21\", \"r22\", \"r23\",\n-  \"r24\", \"r25\", \"r26\", \"r27\", \"r28\", \"r29\", \"ep\", \"lp\"\n-};\n-\n-static const char *const v850_sreg_names[] =\n-{\n-  \"eipc/vip/mpm\", \"eipsw/mpc\", \"fepc/tid\", \"fepsw/ppa\", \"ecr/vmecr\", \"psw/vmtid\",\n-  \"sr6/fpsr/vmadr/dcc\", \"sr7/fpepc/dc0\",\n-  \"sr8/fpst/vpecr/dcv1\", \"sr9/fpcc/vptid\", \"sr10/fpcfg/vpadr/spal\", \"sr11/spau\",\n-  \"sr12/vdecr/ipa0l\", \"eiic/vdtid/ipa0u\", \"feic/ipa1l\", \"dbic/ipa1u\",\n-  \"ctpc/ipa2l\", \"ctpsw/ipa2u\", \"dbpc/ipa3l\", \"dbpsw/ipa3u\", \"ctbp/dpa0l\",\n-  \"dir/dpa0u\", \"bpc/dpa0u\", \"asid/dpa1l\",\n-  \"bpav/dpa1u\", \"bpam/dpa2l\", \"bpdv/dpa2u\", \"bpdm/dpa3l\", \"eiwr/dpa3u\",\n-  \"fewr\", \"dbwr\", \"bsel\"\n-};\n-\n-static const char *const v850_cc_names[] =\n-{\n-  \"v\", \"c/l\", \"z\", \"nh\", \"s/n\", \"t\", \"lt\", \"le\",\n-  \"nv\", \"nc/nl\", \"nz\", \"h\", \"ns/p\", \"sa\", \"ge\", \"gt\"\n-};\n-\n-static const char *const v850_float_cc_names[] =\n-{\n-  \"f/t\", \"un/or\", \"eq/neq\", \"ueq/ogl\", \"olt/uge\", \"ult/oge\", \"ole/ugt\", \"ule/ogt\",\n-  \"sf/st\", \"ngle/gle\", \"seq/sne\", \"ngl/gl\", \"lt/nlt\", \"nge/ge\", \"le/nle\", \"ngt/gt\"\n-};\n-\n-\n-static const char *const v850_vreg_names[] =\n-{\n-  \"vr0\", \"vr1\", \"vr2\", \"vr3\", \"vr4\", \"vr5\", \"vr6\", \"vr7\", \"vr8\", \"vr9\",\n-  \"vr10\", \"vr11\", \"vr12\", \"vr13\", \"vr14\", \"vr15\", \"vr16\", \"vr17\", \"vr18\",\n-  \"vr19\", \"vr20\", \"vr21\", \"vr22\", \"vr23\", \"vr24\", \"vr25\", \"vr26\", \"vr27\",\n-  \"vr28\", \"vr29\", \"vr30\", \"vr31\"\n-};\n-\n-static const char *const v850_cacheop_names[] =\n-{\n-  \"chbii\", \"cibii\", \"cfali\", \"cisti\", \"cildi\", \"chbid\", \"chbiwbd\",\n-  \"chbwbd\", \"cibid\", \"cibiwbd\", \"cibwbd\", \"cfald\", \"cistd\", \"cildd\"\n-};\n+#include \"libiberty.h\"\n \n static const int v850_cacheop_codes[] =\n {\n   0x00, 0x20, 0x40, 0x60, 0x61, 0x04, 0x06,\n   0x07, 0x24, 0x26, 0x27, 0x44, 0x64, 0x65, -1\n };\n \n-static const char *const v850_prefop_names[] =\n-{ \"prefi\", \"prefd\" };\n-\n static const int v850_prefop_codes[] =\n { 0x00, 0x04, -1};\n \n@@ -217,6 +168,110 @@ get_operand_value (const struct v850_operand *operand,\n   return value;\n }\n \n+static const char *\n+get_v850_sreg_name (unsigned int reg)\n+{\n+  static const char *const v850_sreg_names[] =\n+    {\n+     \"eipc/vip/mpm\", \"eipsw/mpc\", \"fepc/tid\", \"fepsw/ppa\", \"ecr/vmecr\", \"psw/vmtid\",\n+     \"sr6/fpsr/vmadr/dcc\", \"sr7/fpepc/dc0\",\n+     \"sr8/fpst/vpecr/dcv1\", \"sr9/fpcc/vptid\", \"sr10/fpcfg/vpadr/spal\", \"sr11/spau\",\n+     \"sr12/vdecr/ipa0l\", \"eiic/vdtid/ipa0u\", \"feic/ipa1l\", \"dbic/ipa1u\",\n+     \"ctpc/ipa2l\", \"ctpsw/ipa2u\", \"dbpc/ipa3l\", \"dbpsw/ipa3u\", \"ctbp/dpa0l\",\n+     \"dir/dpa0u\", \"bpc/dpa0u\", \"asid/dpa1l\",\n+     \"bpav/dpa1u\", \"bpam/dpa2l\", \"bpdv/dpa2u\", \"bpdm/dpa3l\", \"eiwr/dpa3u\",\n+     \"fewr\", \"dbwr\", \"bsel\"\n+    };\n+\n+  if (reg < ARRAY_SIZE (v850_sreg_names))\n+    return v850_sreg_names[reg];\n+  return _(\"<invalid s-reg number>\");\n+}\n+\n+static const char *\n+get_v850_reg_name (unsigned int reg)\n+{\n+  static const char *const v850_reg_names[] =\n+    {\n+     \"r0\", \"r1\", \"r2\", \"sp\", \"gp\", \"r5\", \"r6\", \"r7\",\n+     \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\n+     \"r16\", \"r17\", \"r18\", \"r19\", \"r20\", \"r21\", \"r22\", \"r23\",\n+     \"r24\", \"r25\", \"r26\", \"r27\", \"r28\", \"r29\", \"ep\", \"lp\"\n+    };\n+\n+  if (reg < ARRAY_SIZE (v850_reg_names))\n+    return v850_reg_names[reg];\n+  return _(\"<invalid reg number>\");\n+}\n+\n+static const char *\n+get_v850_vreg_name (unsigned int reg)\n+{\n+  static const char *const v850_vreg_names[] =\n+    {\n+     \"vr0\", \"vr1\", \"vr2\", \"vr3\", \"vr4\", \"vr5\", \"vr6\", \"vr7\", \"vr8\", \"vr9\",\n+     \"vr10\", \"vr11\", \"vr12\", \"vr13\", \"vr14\", \"vr15\", \"vr16\", \"vr17\", \"vr18\",\n+     \"vr19\", \"vr20\", \"vr21\", \"vr22\", \"vr23\", \"vr24\", \"vr25\", \"vr26\", \"vr27\",\n+     \"vr28\", \"vr29\", \"vr30\", \"vr31\"\n+    };\n+\n+  if (reg < ARRAY_SIZE (v850_vreg_names))\n+    return v850_vreg_names[reg];\n+  return _(\"<invalid v-reg number>\");\n+}\n+\n+static const char *\n+get_v850_cc_name (unsigned int reg)\n+{\n+  static const char *const v850_cc_names[] =\n+    {\n+     \"v\", \"c/l\", \"z\", \"nh\", \"s/n\", \"t\", \"lt\", \"le\",\n+     \"nv\", \"nc/nl\", \"nz\", \"h\", \"ns/p\", \"sa\", \"ge\", \"gt\"\n+    };\n+\n+  if (reg < ARRAY_SIZE (v850_cc_names))\n+    return v850_cc_names[reg];\n+  return _(\"<invalid CC-reg number>\");\n+}\n+\n+static const char *\n+get_v850_float_cc_name (unsigned int reg)\n+{\n+  static const char *const v850_float_cc_names[] =\n+    {\n+     \"f/t\", \"un/or\", \"eq/neq\", \"ueq/ogl\", \"olt/uge\", \"ult/oge\", \"ole/ugt\", \"ule/ogt\",\n+     \"sf/st\", \"ngle/gle\", \"seq/sne\", \"ngl/gl\", \"lt/nlt\", \"nge/ge\", \"le/nle\", \"ngt/gt\"\n+    };\n+\n+  if (reg < ARRAY_SIZE (v850_float_cc_names))\n+    return v850_float_cc_names[reg];\n+  return _(\"<invalid float-CC-reg number>\");\n+}\n+\n+static const char *\n+get_v850_cacheop_name (unsigned int reg)\n+{\n+  static const char *const v850_cacheop_names[] =\n+    {\n+     \"chbii\", \"cibii\", \"cfali\", \"cisti\", \"cildi\", \"chbid\", \"chbiwbd\",\n+     \"chbwbd\", \"cibid\", \"cibiwbd\", \"cibwbd\", \"cfald\", \"cistd\", \"cildd\"\n+    };\n+\n+  if (reg < ARRAY_SIZE (v850_cacheop_names))\n+    return v850_cacheop_names[reg];\n+  return _(\"<invalid cacheop number>\");\n+}\n+\n+static const char *\n+get_v850_prefop_name (unsigned int reg)\n+{\n+  static const char *const v850_prefop_names[] =\n+    { \"prefi\", \"prefd\" };\n+\n+  if (reg < ARRAY_SIZE (v850_prefop_names))\n+    return v850_prefop_names[reg];\n+  return _(\"<invalid prefop number>\");\n+}\n \n static int\n disassemble (bfd_vma memaddr,\n@@ -425,16 +480,16 @@ disassemble (bfd_vma memaddr,\n \t      switch (flag)\n \t\t{\n \t\tcase V850_OPERAND_REG:\n-\t\t  info->fprintf_func (info->stream, \"%s\", v850_reg_names[value]);\n+\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_reg_name (value));\n \t\t  break;\n \t\tcase (V850_OPERAND_REG|V850_REG_EVEN):\n-\t\t  info->fprintf_func (info->stream, \"%s\", v850_reg_names[value * 2]);\n+\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_reg_name (value * 2));\n \t\t  break;\n \t\tcase V850_OPERAND_EP:\n \t\t  info->fprintf_func (info->stream, \"ep\");\n \t\t  break;\n \t\tcase V850_OPERAND_SRG:\n-\t\t  info->fprintf_func (info->stream, \"%s\", v850_sreg_names[value]);\n+\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_sreg_name (value));\n \t\t  break;\n \t\tcase V850E_OPERAND_REG_LIST:\n \t\t  {\n@@ -496,7 +551,7 @@ disassemble (bfd_vma memaddr,\n \t\t\t\t  else\n \t\t\t\t    shown_one = 1;\n \n-\t\t\t\t  info->fprintf_func (info->stream, \"%s\", v850_reg_names[first]);\n+\t\t\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_reg_name (first));\n \n \t\t\t\t  for (bit++; bit < 32; bit++)\n \t\t\t\t    if ((mask & (1 << bit)) == 0)\n@@ -506,7 +561,7 @@ disassemble (bfd_vma memaddr,\n \n \t\t\t\t  if (last > first + 1)\n \t\t\t\t    {\n-\t\t\t\t      info->fprintf_func (info->stream, \" - %s\", v850_reg_names[ last - 1 ]);\n+\t\t\t\t      info->fprintf_func (info->stream, \" - %s\", get_v850_reg_name (last - 1));\n \t\t\t\t    }\n \t\t\t\t}\n \t\t\t  }\n@@ -520,11 +575,11 @@ disassemble (bfd_vma memaddr,\n \t\t  break;\n \n \t\tcase V850_OPERAND_CC:\n-\t\t  info->fprintf_func (info->stream, \"%s\", v850_cc_names[value]);\n+\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_cc_name (value));\n \t\t  break;\n \n \t\tcase V850_OPERAND_FLOAT_CC:\n-\t\t  info->fprintf_func (info->stream, \"%s\", v850_float_cc_names[value]);\n+\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_float_cc_name (value));\n \t\t  break;\n \n \t\tcase V850_OPERAND_CACHEOP:\n@@ -536,7 +591,7 @@ disassemble (bfd_vma memaddr,\n \t\t\tif (value == v850_cacheop_codes[idx])\n \t\t\t  {\n \t\t\t    info->fprintf_func (info->stream, \"%s\",\n-\t\t\t\t\t\tv850_cacheop_names[idx]);\n+\t\t\t\t\t\tget_v850_cacheop_name (idx));\n \t\t\t    goto MATCH_CACHEOP_CODE;\n \t\t\t  }\n \t\t      }\n@@ -554,7 +609,7 @@ disassemble (bfd_vma memaddr,\n \t\t\tif (value == v850_prefop_codes[idx])\n \t\t\t  {\n \t\t\t    info->fprintf_func (info->stream, \"%s\",\n-\t\t\t      v850_prefop_names[idx]);\n+\t\t\t\t\t\tget_v850_prefop_name (idx));\n \t\t\t    goto MATCH_PREFOP_CODE;\n \t\t\t  }\n \t\t      }\n@@ -564,7 +619,7 @@ disassemble (bfd_vma memaddr,\n \t\t  break;\n \n \t\tcase V850_OPERAND_VREG:\n-\t\t  info->fprintf_func (info->stream, \"%s\", v850_vreg_names[value]);\n+\t\t  info->fprintf_func (info->stream, \"%s\", get_v850_vreg_name (value));\n \t\t  break;\n \n \t\tdefault:"
    }
  ]
}