{
  "sha": "1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWJkZDhmYWNmYmY2Zjk0ZmE5NjAzZjUyOGM3ZThiZGY5MWQ5MGJmZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T00:57:23Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T12:02:51Z"
    },
    "message": "PowerPC64, support medium model access to common symbols\n\nSome versions of clang apparently generate non-PIC on powerpc64le to\naccess common symbols.  Since a common symbol and a strong definition\nwith the same name should resolve to the strong definition we have the\npossibility of non-PIC attempting to access shared library variables.\nThis is really a clanger since powerpc64le is supposed to be PIC by\ndefault, but let's see if ld can cope by generating .dynbss copies.\n\n\t* elf64-ppc.c (must_be_dyn_reloc): Return 0 for TOC16 relocs.\n\t(ppc64_elf_check_relocs): Support dynamic/copy relocs for TOC16.\n\t(ppc64_elf_adjust_dynamic_symbol): Don't keep dynamic reloc when\n\tneeds_copy even if all relocs are in rw sections.\n\t(dec_dynrel_count): Handle TOC16 relocs.\n\t(ppc64_elf_relocate_section): Support dynamic relocs for TOC16.\n\t(ppc64_elf_finish_dynamic_symbol): Adjust to handle needs_copy\n\tsemantic change.",
    "tree": {
      "sha": "b307c6f67e8ee5779a734c7ff2a9b5048fc86b16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b307c6f67e8ee5779a734c7ff2a9b5048fc86b16"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a3d181d2e784d57ea04728ac2f8f747fa798e78a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a3d181d2e784d57ea04728ac2f8f747fa798e78a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a3d181d2e784d57ea04728ac2f8f747fa798e78a"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 48,
    "deletions": 7
  },
  "files": [
    {
      "sha": "4f48818ef3ea3ded529d38bfad6de501ee9f2b56",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
      "patch": "@@ -1,3 +1,14 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (must_be_dyn_reloc): Return 0 for TOC16 relocs.\n+\t(ppc64_elf_check_relocs): Support dynamic/copy relocs for TOC16.\n+\t(ppc64_elf_adjust_dynamic_symbol): Don't keep dynamic reloc when\n+\tneeds_copy even if all relocs are in rw sections.\n+\t(dec_dynrel_count): Handle TOC16 relocs.\n+\t(ppc64_elf_relocate_section): Support dynamic relocs for TOC16.\n+\t(ppc64_elf_finish_dynamic_symbol): Adjust to handle needs_copy\n+\tsemantic change.\n+\n 2019-09-16  Phil Blundell  <pb@pbcl.net>\n \n \t* version.m4: Set version to 2.33.50."
    },
    {
      "sha": "345710ee594d88f00447db3f3c729bc8eba28d6a",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 37,
      "deletions": 7,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
      "patch": "@@ -2745,6 +2745,12 @@ must_be_dyn_reloc (struct bfd_link_info *info,\n     case R_PPC64_REL32:\n     case R_PPC64_REL64:\n     case R_PPC64_REL30:\n+    case R_PPC64_TOC16:\n+    case R_PPC64_TOC16_DS:\n+    case R_PPC64_TOC16_LO:\n+    case R_PPC64_TOC16_HI:\n+    case R_PPC64_TOC16_HA:\n+    case R_PPC64_TOC16_LO_DS:\n       return 0;\n \n     case R_PPC64_TPREL16:\n@@ -4830,6 +4836,16 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_TOC16_HA:\n \tcase R_PPC64_TOC16_LO_DS:\n \t  sec->has_toc_reloc = 1;\n+\t  if (h != NULL && !bfd_link_pic (info))\n+\t    {\n+\t      /* We may need a copy reloc.  */\n+\t      h->non_got_ref = 1;\n+\t      /* Strongly prefer a copy reloc over a dynamic reloc.\n+\t\t glibc ld.so as of 2019-08 will error out if one of\n+\t\t these relocations is emitted.  */\n+\t      h->needs_copy = 1;\n+\t      goto dodyn;\n+\t    }\n \t  break;\n \n \t  /* Marker reloc.  */\n@@ -6425,7 +6441,9 @@ ppc64_elf_adjust_dynamic_symbol (struct bfd_link_info *info,\n \n       /* If we don't find any dynamic relocs in read-only sections, then\n \t we'll be keeping the dynamic relocs and avoiding the copy reloc.  */\n-      || (ELIMINATE_COPY_RELOCS && !alias_readonly_dynrelocs (h))\n+      || (ELIMINATE_COPY_RELOCS\n+\t  && !h->needs_copy\n+\t  && !alias_readonly_dynrelocs (h))\n \n       /* Protected variables do not work with .dynbss.  The copy in\n \t .dynbss won't be used by the shared library with the protected\n@@ -6813,6 +6831,16 @@ dec_dynrel_count (bfd_vma r_info,\n     default:\n       return TRUE;\n \n+    case R_PPC64_TOC16:\n+    case R_PPC64_TOC16_DS:\n+    case R_PPC64_TOC16_LO:\n+    case R_PPC64_TOC16_HI:\n+    case R_PPC64_TOC16_HA:\n+    case R_PPC64_TOC16_LO_DS:\n+      if (h == NULL)\n+\treturn TRUE;\n+      break;\n+\n     case R_PPC64_TPREL16:\n     case R_PPC64_TPREL16_LO:\n     case R_PPC64_TPREL16_HI:\n@@ -15801,6 +15829,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_TOC16_LO_DS:\n \tcase R_PPC64_TOC16_HA:\n \t  addend -= TOCstart + htab->sec_info[input_section->id].toc_off;\n+\t  if (h != NULL)\n+\t    goto dodyn;\n \t  break;\n \n \t  /* Relocate against the beginning of the section.  */\n@@ -16734,18 +16764,18 @@ ppc64_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t  break;\n \t}\n \n-  if (h->needs_copy)\n+  if (h->needs_copy\n+      && (h->root.type == bfd_link_hash_defined\n+\t  || h->root.type == bfd_link_hash_defweak)\n+      && (h->root.u.def.section == htab->elf.sdynbss\n+\t  || h->root.u.def.section == htab->elf.sdynrelro))\n     {\n       /* This symbol needs a copy reloc.  Set it up.  */\n       Elf_Internal_Rela rela;\n       asection *srel;\n       bfd_byte *loc;\n \n-      if (h->dynindx == -1\n-\t  || (h->root.type != bfd_link_hash_defined\n-\t      && h->root.type != bfd_link_hash_defweak)\n-\t  || htab->elf.srelbss == NULL\n-\t  || htab->elf.sreldynrelro == NULL)\n+      if (h->dynindx == -1)\n \tabort ();\n \n       rela.r_offset = (h->root.u.def.value"
    }
  ]
}