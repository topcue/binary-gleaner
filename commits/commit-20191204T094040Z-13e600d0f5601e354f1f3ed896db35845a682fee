{
  "sha": "13e600d0f5601e354f1f3ed896db35845a682fee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTNlNjAwZDBmNTYwMWUzNTRmMWYzZWQ4OTZkYjM1ODQ1YTY4MmZlZQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-12-04T09:40:40Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-12-04T09:40:40Z"
    },
    "message": "x86: make sure all PUSH/POP honor DefaultSize\n\nWhile segment registers are registers, their use doesn't allow sizing\nof insns without suffix / explicit operand size specifier. Prevent\nPUSH and POP of segment registers from entering that path, instead\nallowing them to observe the stackop_size setting just like other\nPUSH/POP and alike do.",
    "tree": {
      "sha": "0a66e700226c227eecf509ca406a3586b02a9e35",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0a66e700226c227eecf509ca406a3586b02a9e35"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13e600d0f5601e354f1f3ed896db35845a682fee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13e600d0f5601e354f1f3ed896db35845a682fee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13e600d0f5601e354f1f3ed896db35845a682fee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13e600d0f5601e354f1f3ed896db35845a682fee/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3036c8991964674ca2407c543645d841ad431267",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3036c8991964674ca2407c543645d841ad431267",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3036c8991964674ca2407c543645d841ad431267"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 40,
    "deletions": 8
  },
  "files": [
    {
      "sha": "411d66fd94d7f9726546b70dc644167c3c9c9b24",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e600d0f5601e354f1f3ed896db35845a682fee/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e600d0f5601e354f1f3ed896db35845a682fee/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=13e600d0f5601e354f1f3ed896db35845a682fee",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-04  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (process_suffix): Arrange for insns with a\n+\tsingle non-GPR register operand to not have its suffix guessed\n+\tfrom GPR operands. Extend DefaultSize handling to cover PUSH/POP\n+\tof segment registers.\n+\t* testsuite/gas/i386/general.s: Add PUSH/POP sreg to .code16gcc\n+\tset of insns.\n+\t* testsuite/gas/i386/general.l: Adjust expectations.\n+\n 2019-12-04  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (process_suffix): Exclude SYSRET alongside"
    },
    {
      "sha": "b8babed68ba0b96c6df9530582f47f8a4dffe1af",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e600d0f5601e354f1f3ed896db35845a682fee/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e600d0f5601e354f1f3ed896db35845a682fee/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=13e600d0f5601e354f1f3ed896db35845a682fee",
      "patch": "@@ -6207,10 +6207,11 @@ process_suffix (void)\n     i.suffix = LONG_MNEM_SUFFIX;\n   else if (i.tm.opcode_modifier.size == SIZE64)\n     i.suffix = QWORD_MNEM_SUFFIX;\n-  else if (i.reg_operands)\n+  else if (i.reg_operands\n+\t   && (i.operands > 1 || i.types[0].bitfield.class == Reg))\n     {\n       /* If there's no instruction mnemonic suffix we try to invent one\n-\t based on register operands.  */\n+\t based on GPR operands.  */\n       if (!i.suffix)\n \t{\n \t  /* We take i.suffix from the last register operand specified,\n@@ -6315,19 +6316,24 @@ process_suffix (void)\n \t   /* exclude sysret */\n \t   && i.tm.base_opcode != 0x0f07)\n     {\n-      if (stackop_size == LONG_MNEM_SUFFIX\n-\t  && i.tm.base_opcode == 0xcf)\n+      i.suffix = stackop_size;\n+      if (stackop_size == LONG_MNEM_SUFFIX)\n \t{\n \t  /* stackop_size is set to LONG_MNEM_SUFFIX for the\n \t     .code16gcc directive to support 16-bit mode with\n \t     32-bit address.  For IRET without a suffix, generate\n \t     16-bit IRET (opcode 0xcf) to return from an interrupt\n \t     handler.  */\n-\t  i.suffix = WORD_MNEM_SUFFIX;\n-\t  as_warn (_(\"generating 16-bit `iret' for .code16gcc directive\"));\n+\t  if (i.tm.base_opcode == 0xcf)\n+\t    {\n+\t      i.suffix = WORD_MNEM_SUFFIX;\n+\t      as_warn (_(\"generating 16-bit `iret' for .code16gcc directive\"));\n+\t    }\n+\t  /* Warn about changed behavior for segment register push/pop.  */\n+\t  else if ((i.tm.base_opcode | 1) == 0x07)\n+\t    as_warn (_(\"generating 32-bit `%s', unlike earlier gas versions\"),\n+\t\t     i.tm.name);\n \t}\n-      else\n-\ti.suffix = stackop_size;\n     }\n   else if (intel_syntax\n \t   && !i.suffix"
    },
    {
      "sha": "acd44403ee48dc4de8a33f83e584fe9db7801527",
      "filename": "gas/testsuite/gas/i386/general.l",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e600d0f5601e354f1f3ed896db35845a682fee/gas/testsuite/gas/i386/general.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e600d0f5601e354f1f3ed896db35845a682fee/gas/testsuite/gas/i386/general.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/general.l?ref=13e600d0f5601e354f1f3ed896db35845a682fee",
      "patch": "@@ -32,6 +32,10 @@\n .*:144: Warning:.*\n .*:178: Warning:.*\n .*:224: Warning:.*\n+.*:233: Warning:.*\n+.*:234: Warning:.*\n+.*:238: Warning:.*\n+.*:239: Warning:.*\n    1                       \t.psize 0\n    2                       \t.text\n    3                       \t#test jumps and calls\n@@ -298,9 +302,17 @@\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+666A00[ \t]+push\t\\$0\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+66683412 0000[ \t]+push\t\\$0x1234\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+66FF37[ \t]+push\t\\(%bx\\)\n+[ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+6606[ \t]+push\t%es\n+.*Warning:.*32-bit.*push.*\n+[ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+660FA0[ \t]+push\t%fs\n+.*Warning:.*32-bit.*push.*\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+6660[ \t]+pusha\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+669C[ \t]+pushf\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+668F07[ \t]+pop\t\\(%bx\\)\n+[ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+6607[ \t]+pop\t%es\n+.*Warning:.*32-bit.*pop.*\n+[ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+660FA1[ \t]+pop\t%fs\n+.*Warning:.*32-bit.*pop.*\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+6661[ \t]+popa\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+669D[ \t]+popf\n [ \t]*[1-9][0-9]*[ \t]+[0-9a-f]*[ \t]+66C3[ \t]+ret"
    },
    {
      "sha": "39bbfe3e0b57e2072537eddd65ee87ca97739433",
      "filename": "gas/testsuite/gas/i386/general.s",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13e600d0f5601e354f1f3ed896db35845a682fee/gas/testsuite/gas/i386/general.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13e600d0f5601e354f1f3ed896db35845a682fee/gas/testsuite/gas/i386/general.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/general.s?ref=13e600d0f5601e354f1f3ed896db35845a682fee",
      "patch": "@@ -230,9 +230,13 @@\n \tpush\t$0\n \tpush\t$0x1234\n \tpush\t(%bx)\n+\tpush\t%es\n+\tpush\t%fs\n \tpusha\n \tpushf\n \tpop\t(%bx)\n+\tpop\t%es\n+\tpop\t%fs\n \tpopa\n \tpopf\n \tret"
    }
  ]
}