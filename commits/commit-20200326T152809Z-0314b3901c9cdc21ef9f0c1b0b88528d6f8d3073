{
  "sha": "0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDMxNGIzOTAxYzljZGMyMWVmOWYwYzFiMGI4ODUyOGQ2ZjhkMzA3Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:09Z"
    },
    "message": "Add dwz.c and dwz_file::read_string\n\nThis changes read_indirect_string_from_dwz to be a method on the\ndwz_file, and adds a new dwarf2/dwz.c file.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_attribute_value): Update.\n\t(read_indirect_string_from_dwz): Move to dwz.c; change into\n\tmethod.\n\t(dwarf_decode_macro_bytes): Update.\n\t* dwarf2/dwz.h (struct dwz_file) <read_string>: Declare method.\n\t* dwarf2/dwz.c: New file.\n\t* Makefile.in (COMMON_SFILES): Add dwz.c.",
    "tree": {
      "sha": "510d3db9bc12b6ecdfa9128deb1256587ef6d813",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/510d3db9bc12b6ecdfa9128deb1256587ef6d813"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9fda78b61127cbcf718104b7e5a78cf137c07836",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fda78b61127cbcf718104b7e5a78cf137c07836",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9fda78b61127cbcf718104b7e5a78cf137c07836"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 60,
    "deletions": 32
  },
  "files": [
    {
      "sha": "e3d0c60fa73fec1af738b553402d47e5cbf2bcd2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_attribute_value): Update.\n+\t(read_indirect_string_from_dwz): Move to dwz.c; change into\n+\tmethod.\n+\t(dwarf_decode_macro_bytes): Update.\n+\t* dwarf2/dwz.h (struct dwz_file) <read_string>: Declare method.\n+\t* dwarf2/dwz.c: New file.\n+\t* Makefile.in (COMMON_SFILES): Add dwz.c.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.h (struct dwz_file): Move to dwz.h."
    },
    {
      "sha": "c9450ce7b52ce688b43d572aac5dd62a5dcef91d",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "patch": "@@ -1003,6 +1003,7 @@ COMMON_SFILES = \\\n \tdwarf2/abbrev.c \\\n \tdwarf2/attribute.c \\\n \tdwarf2/comp-unit.c \\\n+\tdwarf2/dwz.c \\\n \tdwarf2/expr.c \\\n \tdwarf2/frame-tailcall.c \\\n \tdwarf2/frame.c \\"
    },
    {
      "sha": "a7143738194b76e6fc0a86d72caa5d3aad0da295",
      "filename": "gdb/dwarf2/dwz.c",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/dwarf2/dwz.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/dwarf2/dwz.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/dwz.c?ref=0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "patch": "@@ -0,0 +1,40 @@\n+/* DWARF DWZ handling for GDB.\n+\n+   Copyright (C) 2003-2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"dwarf2/dwz.h\"\n+\n+const char *\n+dwz_file::read_string (struct objfile *objfile, LONGEST str_offset)\n+{\n+  str.read (objfile);\n+\n+  if (str.buffer == NULL)\n+    error (_(\"DW_FORM_GNU_strp_alt used without .debug_str \"\n+\t     \"section [in module %s]\"),\n+\t   bfd_get_filename (dwz_bfd.get ()));\n+  if (str_offset >= str.size)\n+    error (_(\"DW_FORM_GNU_strp_alt pointing outside of \"\n+\t     \".debug_str section [in module %s]\"),\n+\t   bfd_get_filename (dwz_bfd.get ()));\n+  gdb_assert (HOST_CHAR_BIT == 8);\n+  if (str.buffer[str_offset] == '\\0')\n+    return NULL;\n+  return (const char *) (str.buffer + str_offset);\n+}"
    },
    {
      "sha": "54e60612a3f5d9dcd6f4409e7e23dea49e892ffa",
      "filename": "gdb/dwarf2/dwz.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/dwarf2/dwz.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/dwarf2/dwz.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/dwz.h?ref=0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "patch": "@@ -53,6 +53,13 @@ struct dwz_file\n   /* If we loaded the index from an external file, this contains the\n      resources associated to the open file, memory mapping, etc.  */\n   std::unique_ptr<index_cache_resource> index_cache_res;\n+\n+  /* Read a string at offset STR_OFFSET in the .debug_str section from\n+     this dwz file.  Throw an error if the offset is too large.  If\n+     the string consists of a single NUL byte, return NULL; otherwise\n+     return a pointer to the string.  */\n+\n+  const char *read_string (struct objfile *objfile, LONGEST str_offset);\n };\n \n #endif /* GDB_DWARF2_DWZ_H */"
    },
    {
      "sha": "23b3fab1be5ad8ea31477a9bfb622aeccfb6fb63",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 32,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "patch": "@@ -1259,9 +1259,6 @@ static const char *read_indirect_string_at_offset\n   (struct dwarf2_per_objfile *dwarf2_per_objfile, bfd *abfd,\n    LONGEST str_offset);\n \n-static const char *read_indirect_string_from_dwz\n-  (struct objfile *objfile, struct dwz_file *, LONGEST);\n-\n static CORE_ADDR read_addr_index_from_leb128 (struct dwarf2_cu *,\n \t\t\t\t\t      const gdb_byte *,\n \t\t\t\t\t      unsigned int *);\n@@ -18585,8 +18582,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n \tLONGEST str_offset = cu_header->read_offset (abfd, info_ptr,\n \t\t\t\t\t\t     &bytes_read);\n \n-\tDW_STRING (attr) = read_indirect_string_from_dwz (objfile,\n-\t\t\t\t\t\t\t  dwz, str_offset);\n+\tDW_STRING (attr) = dwz->read_string (objfile, str_offset);\n \tDW_STRING_IS_CANONICAL (attr) = 0;\n \tinfo_ptr += bytes_read;\n       }\n@@ -18831,31 +18827,6 @@ read_indirect_line_string_at_offset (struct dwarf2_per_objfile *dwarf2_per_objfi\n \t\t\t\t\t      \".debug_line_str\");\n }\n \n-/* Read a string at offset STR_OFFSET in the .debug_str section from\n-   the .dwz file DWZ.  Throw an error if the offset is too large.  If\n-   the string consists of a single NUL byte, return NULL; otherwise\n-   return a pointer to the string.  */\n-\n-static const char *\n-read_indirect_string_from_dwz (struct objfile *objfile, struct dwz_file *dwz,\n-\t\t\t       LONGEST str_offset)\n-{\n-  dwz->str.read (objfile);\n-\n-  if (dwz->str.buffer == NULL)\n-    error (_(\"DW_FORM_GNU_strp_alt used without .debug_str \"\n-\t     \"section [in module %s]\"),\n-\t   bfd_get_filename (dwz->dwz_bfd.get ()));\n-  if (str_offset >= dwz->str.size)\n-    error (_(\"DW_FORM_GNU_strp_alt pointing outside of \"\n-\t     \".debug_str section [in module %s]\"),\n-\t   bfd_get_filename (dwz->dwz_bfd.get ()));\n-  gdb_assert (HOST_CHAR_BIT == 8);\n-  if (dwz->str.buffer[str_offset] == '\\0')\n-    return NULL;\n-  return (const char *) (dwz->str.buffer + str_offset);\n-}\n-\n /* Return pointer to string at .debug_str offset as read from BUF.\n    BUF is assumed to be in a compilation unit described by CU_HEADER.\n    Return *BYTES_READ_PTR count of bytes read from BUF.  */\n@@ -23584,8 +23555,7 @@ dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n \t\t    struct dwz_file *dwz\n \t\t      = dwarf2_get_dwz_file (dwarf2_per_objfile);\n \n-\t\t    body = read_indirect_string_from_dwz (objfile,\n-\t\t\t\t\t\t\t  dwz, str_offset);\n+\t\t    body = dwz->read_string (objfile, str_offset);\n \t\t  }\n \t\telse\n \t\t  body = read_indirect_string_at_offset (dwarf2_per_objfile,"
    }
  ]
}