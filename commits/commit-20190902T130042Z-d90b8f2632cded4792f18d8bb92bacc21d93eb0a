{
  "sha": "d90b8f2632cded4792f18d8bb92bacc21d93eb0a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDkwYjhmMjYzMmNkZWQ0NzkyZjE4ZDhiYjkyYmFjYzIxZDkzZWIwYQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-21T14:36:37Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-09-02T13:00:42Z"
    },
    "message": "Check arguments for all probes before using them\n\nThere is a long standing bug in the Arm toolchain where invalid\nstap probes get created due to the probes referring to symbols which\nhave been resolved away.\n\nMore details are here:\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1196181\n\nWhen these invalid probes are present, GDB will create the breakpoints\nand then fail to stop. The errors are only spotted the first time\nGDB stops, which is too late.\n\nThe solution is to ensure the arguments for all the probes are\nresolved before using them.\n\nThis fixes >100 timeouts when running break-interp.exp when using\nbad probes.\n\ngdb/ChangeLog:\n\n\t* solib-svr4.c (svr4_find_and_create_probe_breakpoints): Check all\n\tprobe arguments.",
    "tree": {
      "sha": "db5986705da30adea805e4f0fae61d0631458260",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/db5986705da30adea805e4f0fae61d0631458260"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d90b8f2632cded4792f18d8bb92bacc21d93eb0a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d90b8f2632cded4792f18d8bb92bacc21d93eb0a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d90b8f2632cded4792f18d8bb92bacc21d93eb0a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d90b8f2632cded4792f18d8bb92bacc21d93eb0a/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe01123efb30a273645dc194ae2100197f93a00a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe01123efb30a273645dc194ae2100197f93a00a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe01123efb30a273645dc194ae2100197f93a00a"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 19,
    "deletions": 4
  },
  "files": [
    {
      "sha": "08615f462e118842df233bf5d415c707c07f1dbe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d90b8f2632cded4792f18d8bb92bacc21d93eb0a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d90b8f2632cded4792f18d8bb92bacc21d93eb0a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d90b8f2632cded4792f18d8bb92bacc21d93eb0a",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-02  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* solib-svr4.c (svr4_find_and_create_probe_breakpoints): Check all\n+\tprobe arguments.\n+\n 2019-09-02  Alan Hayward  <alan.hayward@arm.com>\n \n \t* break-catch-throw.c (fetch_probe_arguments): Use gdbarch."
    },
    {
      "sha": "ffae26bfc5f08e503cb33b47d07ee39db56a51fe",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d90b8f2632cded4792f18d8bb92bacc21d93eb0a/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d90b8f2632cded4792f18d8bb92bacc21d93eb0a/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=d90b8f2632cded4792f18d8bb92bacc21d93eb0a",
      "patch": "@@ -2071,7 +2071,6 @@ svr4_find_and_create_probe_breakpoints (svr4_info *info,\n \t\t\t\t\tbool with_prefix)\n {\n   std::vector<probe *> probes[NUM_PROBES];\n-  bool checked_can_use_probe_arguments = false;\n \n   for (int i = 0; i < NUM_PROBES; i++)\n     {\n@@ -2102,12 +2101,23 @@ svr4_find_and_create_probe_breakpoints (svr4_info *info,\n \treturn false;\n \n       /* Ensure probe arguments can be evaluated.  */\n-      if (!checked_can_use_probe_arguments)\n+      for (probe *p : probes[i])\n \t{\n-\t  probe *p = probes[i][0];\n \t  if (!p->can_evaluate_arguments ())\n \t    return false;\n-\t  checked_can_use_probe_arguments = true;\n+\t  /* This will fail if the probe is invalid.  This has been seen on Arm\n+\t     due to references to symbols that have been resolved away.  */\n+\t  try\n+\t    {\n+\t      p->get_argument_count (gdbarch);\n+\t    }\n+\t  catch (const gdb_exception_error &ex)\n+\t    {\n+\t      exception_print (gdb_stderr, ex);\n+\t      warning (_(\"Initializing probes-based dynamic linker interface \"\n+\t\t\t \"failed.\\nReverting to original interface.\"));\n+\t      return false;\n+\t    }\n \t}\n     }\n "
    }
  ]
}