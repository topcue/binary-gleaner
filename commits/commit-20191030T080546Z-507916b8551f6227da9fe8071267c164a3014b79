{
  "sha": "507916b8551f6227da9fe8071267c164a3014b79",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTA3OTE2Yjg1NTFmNjIyN2RhOWZlODA3MTI2N2MxNjRhMzAxNGI3OQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-10-30T08:05:46Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-10-30T08:05:46Z"
    },
    "message": "x86: drop stray W\n\nThe flag is used to indicate opcodes which can be switched between byte\nand word/dword/qword forms (in a \"canonical\" way). Obviously it's quite\nodd then to see it on insns not allowing for byte operands in the first\nplace. As a result the opcode bytes need to be adjusted accordingly,\nwhich includes comparisons done in optimize_encoding().\n\nTo make re-introduction of such issues less likely have i386-gen\ndiagnose it (in a generally non-fatal way for now).",
    "tree": {
      "sha": "3c019d5339902332e6faca696ab8f9e60aad73e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3c019d5339902332e6faca696ab8f9e60aad73e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/507916b8551f6227da9fe8071267c164a3014b79",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/507916b8551f6227da9fe8071267c164a3014b79",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/507916b8551f6227da9fe8071267c164a3014b79",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/507916b8551f6227da9fe8071267c164a3014b79/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "74fb338f4689b1072a5933102fe1f08caab5bac6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/74fb338f4689b1072a5933102fe1f08caab5bac6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/74fb338f4689b1072a5933102fe1f08caab5bac6"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 65,
    "deletions": 24
  },
  "files": [
    {
      "sha": "4a2a30965af23a0326451f607a163a26e04a95db",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (optimize_encoding): Adjust opcodes compared\n+\tagainst. Adjust replacement opcode and clear .w.\n+\n 2019-10-29  Alan Modra  <amodra@gmail.com>\n \n \tPR 25125"
    },
    {
      "sha": "f26b17c9563d34f499f27fa4439c120cdd343ef0",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -3974,7 +3974,7 @@ optimize_encoding (void)\n \t\t&& i.reg_operands == 1\n \t\t&& i.imm_operands == 1\n \t\t&& i.op[0].imms->X_op == O_constant\n-\t\t&& ((i.tm.base_opcode == 0xb0\n+\t\t&& ((i.tm.base_opcode == 0xb8\n \t\t     && i.tm.extension_opcode == None\n \t\t     && fits_in_unsigned_long (i.op[0].imms->X_add_number))\n \t\t    || (fits_in_imm31 (i.op[0].imms->X_add_number)\n@@ -3984,7 +3984,7 @@ optimize_encoding (void)\n \t\t\t    || (i.tm.base_opcode == 0x80\n \t\t\t\t&& i.tm.extension_opcode == 0x4)\n \t\t\t    || ((i.tm.base_opcode == 0xf6\n-\t\t\t\t || i.tm.base_opcode == 0xc6)\n+\t\t\t\t || (i.tm.base_opcode | 1) == 0xc7)\n \t\t\t\t&& i.tm.extension_opcode == 0x0)))\n \t\t    || (fits_in_imm7 (i.op[0].imms->X_add_number)\n \t\t\t&& i.tm.base_opcode == 0x83\n@@ -4010,7 +4010,7 @@ optimize_encoding (void)\n \t   movq $imm32, %r64   -> movl $imm32, %r32\n         */\n       i.tm.opcode_modifier.norex64 = 1;\n-      if (i.tm.base_opcode == 0xb0 || i.tm.base_opcode == 0xc6)\n+      if (i.tm.base_opcode == 0xb8 || (i.tm.base_opcode | 1) == 0xc7)\n \t{\n \t  /* Handle\n \t       movq $imm31, %r64   -> movl $imm31, %r32\n@@ -4024,13 +4024,14 @@ optimize_encoding (void)\n \t  i.types[0].bitfield.imm64 = 0;\n \t  i.types[1].bitfield.dword = 1;\n \t  i.types[1].bitfield.qword = 0;\n-\t  if (i.tm.base_opcode == 0xc6)\n+\t  if ((i.tm.base_opcode | 1) == 0xc7)\n \t    {\n \t      /* Handle\n \t\t   movq $imm31, %r64   -> movl $imm31, %r32\n \t       */\n-\t      i.tm.base_opcode = 0xb0;\n+\t      i.tm.base_opcode = 0xb8;\n \t      i.tm.extension_opcode = None;\n+\t      i.tm.opcode_modifier.w = 0;\n \t      i.tm.opcode_modifier.shortform = 1;\n \t      i.tm.opcode_modifier.modrm = 0;\n \t    }"
    },
    {
      "sha": "fdafe62c6c5582669c906e3edfbcfe3e090357d3",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -1,3 +1,12 @@\n+2019-10-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (process_i386_opcode_modifier): Report bogus uses\n+\tof W.\n+\t* i386-opc.h (W): Extend comment.\n+\t* i386-opc.tbl (mov, movabs, movq): Drop W and adjust opcodes of\n+\tgeneral purpose variants not allowing for byte operands.\n+\t* i386-tbl.h: Re-generate.\n+\n 2019-10-29  Nick Clifton  <nickc@redhat.com>\n \n \t* tic30-dis.c (print_branch): Correct size of operand array."
    },
    {
      "sha": "1c5082ea0dcededd03a07f4624629090f63e0f65",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -1107,6 +1107,8 @@ process_i386_opcode_modifier (FILE *table, char *mod, char **opnd, int lineno)\n \n   if (strcmp (mod, \"0\"))\n     {\n+      unsigned int have_w = 0, bwlq_suf = 0xf;\n+\n       last = mod + strlen (mod);\n       for (next = mod; next && next < last; )\n \t{\n@@ -1120,8 +1122,30 @@ process_i386_opcode_modifier (FILE *table, char *mod, char **opnd, int lineno)\n \t\t\t  lineno);\n \t      if (strcasecmp(str, \"IsString\") == 0)\n \t\tactive_isstring = 1;\n+\n+\t      if (strcasecmp(str, \"W\") == 0)\n+\t\thave_w = 1;\n+\n+\t      if (strcasecmp(str, \"No_bSuf\") == 0)\n+\t\tbwlq_suf &= ~1;\n+\t      if (strcasecmp(str, \"No_wSuf\") == 0)\n+\t\tbwlq_suf &= ~2;\n+\t      if (strcasecmp(str, \"No_lSuf\") == 0)\n+\t\tbwlq_suf &= ~4;\n+\t      if (strcasecmp(str, \"No_qSuf\") == 0)\n+\t\tbwlq_suf &= ~8;\n \t    }\n \t}\n+\n+      if (have_w && !bwlq_suf)\n+\tfail (\"%s: %d: stray W modifier\\n\", filename, lineno);\n+      if (have_w && !(bwlq_suf & 1))\n+\tfprintf (stderr, \"%s: %d: W modifier without Byte operand(s)\\n\",\n+\t\t filename, lineno);\n+      if (have_w && !(bwlq_suf & ~1))\n+\tfprintf (stderr,\n+\t\t \"%s: %d: W modifier without Word/Dword/Qword operand(s)\\n\",\n+\t\t filename, lineno);\n     }\n   output_opcode_modifier (table, modifiers, ARRAY_SIZE (modifiers));\n }"
    },
    {
      "sha": "f0f00154c663d283d7b22fb125bcfad231bd0c32",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -387,7 +387,9 @@ enum\n {\n   /* has direction bit. */\n   D = 0,\n-  /* set if operands can be words or dwords encoded the canonical way */\n+  /* set if operands can be both bytes and words/dwords/qwords, encoded the\n+     canonical way; the base_opcode field should hold the encoding for byte\n+     operands  */\n   W,\n   /* load form instruction. Must be placed before store form.  */\n   Load,"
    },
    {
      "sha": "cf366b0ea142b02ddf0f4545629182916c218c00",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -60,7 +60,7 @@ mov, 2, 0x88, None, 1, 0, D|W|CheckRegSize|Modrm|No_sSuf|No_ldSuf|HLEPrefixOk=3,\n // 64bit value.\n mov, 2, 0xb0, None, 1, 0, W|ShortForm|No_sSuf|No_qSuf|No_ldSuf, { Imm8|Imm16|Imm32|Imm32S, Reg8|Reg16|Reg32 }\n mov, 2, 0xc6, 0x0, 1, 0, W|Modrm|No_sSuf|No_ldSuf|HLEPrefixOk=3|Optimize, { Imm8|Imm16|Imm32|Imm32S, Reg8|Reg16|Reg32|Reg64|Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n-mov, 2, 0xb0, None, 1, Cpu64, W|ShortForm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|Optimize, { Imm64, Reg64 }\n+mov, 2, 0xb8, None, 1, Cpu64, ShortForm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|Optimize, { Imm64, Reg64 }\n // The segment register moves accept WordReg so that a segment register\n // can be copied to a 32 bit register, and vice versa, without using a\n // size prefix.  When moving to a 32 bit register, the upper 16 bits\n@@ -77,7 +77,7 @@ mov, 2, 0xf21, None, 2, Cpu386|CpuNo64, D|RegMem|IgnoreSize|No_bSuf|No_wSuf|No_s\n mov, 2, 0xf21, None, 2, Cpu64, D|RegMem|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Debug, Reg64 }\n mov, 2, 0xf24, None, 2, Cpu386|CpuNo64, D|RegMem|IgnoreSize|No_bSuf|No_wSuf|No_sSuf|No_qSuf|No_ldSuf, { Test, Reg32 }\n movabs, 2, 0xa0, None, 1, Cpu64, D|W|No_sSuf|No_ldSuf, { Disp64|Unspecified|Byte|Word|Dword|Qword, Acc|Byte|Word|Dword|Qword }\n-movabs, 2, 0xb0, None, 1, Cpu64, W|ShortForm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf, { Imm64, Reg64 }\n+movabs, 2, 0xb8, None, 1, Cpu64, ShortForm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf, { Imm64, Reg64 }\n \n // Move after swapping the bytes\n movbe, 2, 0x0f38f0, None, 3, CpuMovbe, Modrm|No_bSuf|No_sSuf|No_ldSuf, { Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n@@ -974,10 +974,10 @@ movd, 2, 0xf6e, None, 2, CpuMMX|Cpu64, D|Modrm|IgnoreSize|No_bSuf|No_wSuf|No_lSu\n // In the 64bit mode the short form mov immediate is redefined to have\n // 64bit displacement value.  We put the 64bit displacement first and\n // we only mark constants larger than 32bit as Disp64.\n-movq, 2, 0xa0, None, 1, Cpu64, D|W|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp64|Unspecified|Qword, Acc|Qword }\n-movq, 2, 0x88, None, 1, Cpu64, D|W|Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|HLEPrefixOk=3, { Reg64, Reg64|Unspecified|Qword|BaseIndex }\n-movq, 2, 0xc6, 0x0, 1, Cpu64, W|Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|HLEPrefixOk=3|Optimize, { Imm32S, Reg64|Qword|Unspecified|BaseIndex }\n-movq, 2, 0xb0, None, 1, Cpu64, W|ShortForm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Optimize, { Imm64, Reg64 }\n+movq, 2, 0xa1, None, 1, Cpu64, D|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp64|Unspecified|Qword, Acc|Qword }\n+movq, 2, 0x89, None, 1, Cpu64, D|Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|HLEPrefixOk=3, { Reg64, Reg64|Unspecified|Qword|BaseIndex }\n+movq, 2, 0xc7, 0x0, 1, Cpu64, Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|HLEPrefixOk=3|Optimize, { Imm32S, Reg64|Qword|Unspecified|BaseIndex }\n+movq, 2, 0xb8, None, 1, Cpu64, ShortForm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Optimize, { Imm64, Reg64 }\n movq, 2, 0xf37e, None, 1, CpuAVX, Load|Modrm|Vex=1|VexOpcode=0|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64|SSE2AVX, { Qword|Unspecified|BaseIndex|RegXMM, RegXMM }\n movq, 2, 0x66d6, None, 1, CpuAVX, Modrm|Vex=1|VexOpcode=0|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64|SSE2AVX, { RegXMM, Qword|Unspecified|BaseIndex|RegXMM }\n movq, 2, 0x666e, None, 1, CpuAVX|Cpu64, D|Modrm|Vex=1|VexOpcode=0|VexW=2|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Size64|SSE2AVX, { Reg64|Unspecified|BaseIndex, RegXMM }"
    },
    {
      "sha": "46c43e02d04867919bd5454755ae85dc1b3f916a",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507916b8551f6227da9fe8071267c164a3014b79/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=507916b8551f6227da9fe8071267c164a3014b79",
      "patch": "@@ -97,14 +97,14 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n \t  0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0 } } } },\n-  { \"mov\", 2, 0xb0, None, 1,\n+  { \"mov\", 2, 0xb8, None, 1,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n+    { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0 },\n@@ -247,14 +247,14 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0 } },\n       { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } } } },\n-  { \"movabs\", 2, 0xb0, None, 1,\n+  { \"movabs\", 2, 0xb8, None, 1,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n+    { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0 },\n@@ -9636,59 +9636,59 @@ const insn_template i386_optab[] =\n \t  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },\n       { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } } } },\n-  { \"movq\", 2, 0xa0, None, 1,\n+  { \"movq\", 2, 0xa1, None, 1,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n+    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0 },\n     { { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n \t  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0 } },\n       { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } } } },\n-  { \"movq\", 2, 0x88, None, 1,\n+  { \"movq\", 2, 0x89, None, 1,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n+    { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0 },\n     { { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n \t  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0 } } } },\n-  { \"movq\", 2, 0xc6, 0x0, 1,\n+  { \"movq\", 2, 0xc7, 0x0, 1,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n+    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0 },\n     { { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n \t  0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0 } } } },\n-  { \"movq\", 2, 0xb0, None, 1,\n+  { \"movq\", 2, 0xb8, None, 1,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 1, 0, 0 } },\n-    { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n+    { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0 },"
    }
  ]
}