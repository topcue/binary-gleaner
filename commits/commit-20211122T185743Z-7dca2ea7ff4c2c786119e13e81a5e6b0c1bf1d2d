{
  "sha": "7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
  "node_id": "C_kwDOANOeidoAKDdkY2EyZWE3ZmY0YzJjNzg2MTE5ZTEzZTgxYTVlNmIwYzFiZjFkMmQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-22T16:27:29Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-22T18:57:43Z"
    },
    "message": "gdb: rename target_waitstatus_to_string to target_waitstatus::to_string\n\nMake target_waitstatus_to_string a \"to_string\" method of\ntarget_waitstatus, a bit like we have ptid_t::to_string already.  This\nwill save a bit of typing.\n\nChange-Id: Id261b7a09fa9fa3c738abac131c191a6f9c13905",
    "tree": {
      "sha": "11f65eb07e8a35b04dd4fda44eca976d8c6d9f23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/11f65eb07e8a35b04dd4fda44eca976d8c6d9f23"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a58577878b19cb2e6ebbfdbff557203c344955b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a58577878b19cb2e6ebbfdbff557203c344955b1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a58577878b19cb2e6ebbfdbff557203c344955b1"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 33,
    "deletions": 44
  },
  "files": [
    {
      "sha": "216d178424f3afa60d412ea219209253a2222ce2",
      "filename": "gdb/gnu-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/gnu-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/gnu-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.c?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -1619,7 +1619,7 @@ gnu_nat_target::wait (ptid_t ptid, struct target_waitstatus *status,\n \n   inf_debug (inf, \"returning ptid = %s, %s\",\n \t     target_pid_to_str (ptid).c_str (),\n-\t     target_waitstatus_to_string (status).c_str ());\n+\t     status->to_string ().c_str ());\n \n   return ptid;\n }"
    },
    {
      "sha": "dba4f33a327fc577c19a8306247fb65e1910a7b8",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -2214,7 +2214,7 @@ resume_1 (enum gdb_signal sig)\n \t(\"thread %s has pending wait \"\n \t \"status %s (currently_stepping=%d).\",\n \t tp->ptid.to_string ().c_str (),\n-\t target_waitstatus_to_string (&tp->pending_waitstatus ()).c_str (),\n+\t tp->pending_waitstatus ().to_string ().c_str (),\n \t currently_stepping (tp));\n \n       tp->inf->process_target ()->threads_executing = true;\n@@ -2632,7 +2632,7 @@ clear_proceed_status_thread (struct thread_info *tp)\n \t  infrun_debug_printf\n \t    (\"thread %s has pending wait status %s (currently_stepping=%d).\",\n \t     tp->ptid.to_string ().c_str (),\n-\t     target_waitstatus_to_string (&tp->pending_waitstatus ()).c_str (),\n+\t     tp->pending_waitstatus ().to_string ().c_str (),\n \t     currently_stepping (tp));\n \t}\n     }\n@@ -3478,7 +3478,7 @@ print_target_wait_results (ptid_t waiton_ptid, ptid_t result_ptid,\n   infrun_debug_printf (\"  %s [%s],\",\n \t\t       result_ptid.to_string ().c_str (),\n \t\t       target_pid_to_str (result_ptid).c_str ());\n-  infrun_debug_printf (\"  %s\", target_waitstatus_to_string (ws).c_str ());\n+  infrun_debug_printf (\"  %s\", ws->to_string ().c_str ());\n }\n \n /* Select a thread at random, out of those which are resumed and have\n@@ -3584,8 +3584,7 @@ do_target_wait_1 (inferior *inf, ptid_t ptid,\n   if (tp != NULL)\n     {\n       infrun_debug_printf (\"Using pending wait status %s for %s.\",\n-\t\t\t   target_waitstatus_to_string\n-\t\t\t     (&tp->pending_waitstatus ()).c_str (),\n+\t\t\t   tp->pending_waitstatus ().to_string ().c_str (),\n \t\t\t   tp->ptid.to_string ().c_str ());\n \n       /* Now that we've selected our final event LWP, un-adjust its PC\n@@ -4678,7 +4677,7 @@ static void\n save_waitstatus (struct thread_info *tp, const target_waitstatus *ws)\n {\n   infrun_debug_printf (\"saving status %s for %s\",\n-\t\t       target_waitstatus_to_string (ws).c_str (),\n+\t\t       ws->to_string ().c_str (),\n \t\t       tp->ptid.to_string ().c_str ());\n \n   /* Record for later.  */\n@@ -4769,7 +4768,7 @@ static bool\n handle_one (const wait_one_event &event)\n {\n   infrun_debug_printf\n-    (\"%s %s\", target_waitstatus_to_string (&event.ws).c_str (),\n+    (\"%s %s\", event.ws.to_string ().c_str (),\n      event.ptid.to_string ().c_str ());\n \n   if (event.ws.kind () == TARGET_WAITKIND_NO_RESUMED)\n@@ -4875,7 +4874,7 @@ handle_one (const wait_one_event &event)\n \n \t  infrun_debug_printf\n \t    (\"target_wait %s, saving status for %s\",\n-\t     target_waitstatus_to_string (&event.ws).c_str (),\n+\t     event.ws.to_string ().c_str (),\n \t     t->ptid.to_string ().c_str ());\n \n \t  /* Record for later.  */\n@@ -5181,7 +5180,7 @@ handle_inferior_event (struct execution_control_state *ecs)\n      end.  */\n   scoped_value_mark free_values;\n \n-  infrun_debug_printf (\"%s\", target_waitstatus_to_string (&ecs->ws).c_str ());\n+  infrun_debug_printf (\"%s\", ecs->ws.to_string ().c_str ());\n \n   if (ecs->ws.kind () == TARGET_WAITKIND_IGNORE)\n     {"
    },
    {
      "sha": "3fcfd6a4761c21b69c1465afa663b489db7b452c",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -2556,7 +2556,7 @@ record_btrace_target::wait (ptid_t ptid, struct target_waitstatus *status,\n       *status = btrace_step_no_resumed ();\n \n       DEBUG (\"wait ended by %s: %s\", target_pid_to_str (null_ptid).c_str (),\n-\t     target_waitstatus_to_string (status).c_str ());\n+\t     status->to_string ().c_str ());\n \n       return null_ptid;\n     }\n@@ -2647,7 +2647,7 @@ record_btrace_target::wait (ptid_t ptid, struct target_waitstatus *status,\n   DEBUG (\"wait ended by thread %s (%s): %s\",\n \t print_thread_id (eventing),\n \t target_pid_to_str (eventing->ptid).c_str (),\n-\t target_waitstatus_to_string (status).c_str ());\n+\t status->to_string ().c_str ());\n \n   return eventing->ptid;\n }"
    },
    {
      "sha": "c9bc68b78262794659a55c4a2fdb9e2ebeb0cce2",
      "filename": "gdb/target-debug.h",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/target-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/target-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-debug.h?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -180,9 +180,7 @@\n static void\n target_debug_print_struct_target_waitstatus_p (struct target_waitstatus *status)\n {\n-  std::string str = target_waitstatus_to_string (status);\n-\n-  fputs_unfiltered (str.c_str (), gdb_stdlog);\n+  fputs_unfiltered (status->to_string ().c_str (), gdb_stdlog);\n }\n \n \f"
    },
    {
      "sha": "2293d83230daaa7248370d145efc7f90856e8811",
      "filename": "gdb/target/waitstatus.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/target/waitstatus.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/target/waitstatus.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/waitstatus.c?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -23,40 +23,40 @@\n /* Return a pretty printed form of target_waitstatus.  */\n \n std::string\n-target_waitstatus_to_string (const struct target_waitstatus *ws)\n+target_waitstatus::to_string () const\n {\n   const char *kind_str = \"status->kind = \";\n \n-  switch (ws->kind ())\n+  switch (this->kind ())\n     {\n     case TARGET_WAITKIND_EXITED:\n       return string_printf (\"%sexited, status = %d\",\n-\t\t\t    kind_str, ws->exit_status ());\n+\t\t\t    kind_str, this->exit_status ());\n \n     case TARGET_WAITKIND_STOPPED:\n       return string_printf (\"%sstopped, signal = %s\",\n \t\t\t    kind_str,\n-\t\t\t    gdb_signal_to_symbol_string (ws->sig ()));\n+\t\t\t    gdb_signal_to_symbol_string (this->sig ()));\n \n     case TARGET_WAITKIND_SIGNALLED:\n       return string_printf (\"%ssignalled, signal = %s\",\n \t\t\t    kind_str,\n-\t\t\t    gdb_signal_to_symbol_string (ws->sig ()));\n+\t\t\t    gdb_signal_to_symbol_string (this->sig ()));\n \n     case TARGET_WAITKIND_LOADED:\n       return string_printf (\"%sloaded\", kind_str);\n \n     case TARGET_WAITKIND_FORKED:\n       return string_printf (\"%sforked, child_ptid = %s\", kind_str,\n-\t\t\t    ws->child_ptid ().to_string ().c_str ());\n+\t\t\t    this->child_ptid ().to_string ().c_str ());\n \n     case TARGET_WAITKIND_VFORKED:\n       return string_printf (\"%svforked, child_ptid = %s\", kind_str,\n-\t\t\t    ws->child_ptid ().to_string ().c_str ());\n+\t\t\t    this->child_ptid ().to_string ().c_str ());\n \n     case TARGET_WAITKIND_EXECD:\n       return string_printf (\"%sexecd, execd_pathname = %s\", kind_str,\n-\t\t\t    ws->execd_pathname ());\n+\t\t\t    this->execd_pathname ());\n \n     case TARGET_WAITKIND_VFORK_DONE:\n       return string_printf (\"%svfork-done\", kind_str);\n@@ -84,7 +84,7 @@ target_waitstatus_to_string (const struct target_waitstatus *ws)\n \n     case TARGET_WAITKIND_THREAD_EXITED:\n       return string_printf (\"%sthread exited, status = %d\",\n-\t\t\t    kind_str, ws->exit_status ());\n+\t\t\t    kind_str, this->exit_status ());\n \n     default:\n       return string_printf (\"%sunknown???\", kind_str);"
    },
    {
      "sha": "f5b050b8b82e9f2e4fb36cb2ef231f1c28fa0047",
      "filename": "gdb/target/waitstatus.h",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/target/waitstatus.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdb/target/waitstatus.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/waitstatus.h?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -321,6 +321,12 @@ struct target_waitstatus\n     return m_value.syscall_number;\n   }\n \n+  /* Return a pretty printed form of target_waitstatus.\n+\n+     This is only meant to be used in debug messages, not for user-visible\n+     messages.  */\n+  std::string to_string () const;\n+\n private:\n   /* Reset the wait status to its original state.  */\n   void reset ()\n@@ -371,9 +377,4 @@ enum target_stop_reason\n   TARGET_STOPPED_BY_SINGLE_STEP\n };\n \n-/* Prototypes */\n-\n-/* Return a pretty printed form of target_waitstatus.  */\n-std::string target_waitstatus_to_string (const struct target_waitstatus *);\n-\n #endif /* TARGET_WAITSTATUS_H */"
    },
    {
      "sha": "d214aff7051ef7210edefd1fcb739698dab9089d",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -3445,13 +3445,9 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n   if (debug_threads)\n     {\n       if (event_child->waitstatus.kind () != TARGET_WAITKIND_IGNORE)\n-\t{\n-\t  std::string str\n-\t    = target_waitstatus_to_string (&event_child->waitstatus);\n-\n-\t  debug_printf (\"LWP %ld: extended event with waitstatus %s\\n\",\n-\t\t\tlwpid_of (get_lwp_thread (event_child)), str.c_str ());\n-\t}\n+\tdebug_printf (\"LWP %ld: extended event with waitstatus %s\\n\",\n+\t\t      lwpid_of (get_lwp_thread (event_child)),\n+\t\t      event_child->waitstatus.to_string ().c_str ());\n       if (current_thread->last_resume_kind == resume_step)\n \t{\n \t  if (event_child->step_range_start == event_child->step_range_end)"
    },
    {
      "sha": "2807525d11cf73e073273dccc8c35dadae9a8941",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "patch": "@@ -3305,14 +3305,9 @@ queue_stop_reply_callback (thread_info *thread)\n       if (target_thread_stopped (thread))\n \t{\n \t  if (debug_threads)\n-\t    {\n-\t      std::string status_string\n-\t\t= target_waitstatus_to_string (&thread->last_status);\n-\n-\t      debug_printf (\"Reporting thread %s as already stopped with %s\\n\",\n-\t\t\t    target_pid_to_str (thread->id).c_str (),\n-\t\t\t    status_string.c_str ());\n-\t    }\n+\t    debug_printf (\"Reporting thread %s as already stopped with %s\\n\",\n+\t\t\t  target_pid_to_str (thread->id).c_str (),\n+\t\t\t  thread->last_status.to_string ().c_str ());\n \n \t  gdb_assert (thread->last_status.kind () != TARGET_WAITKIND_IGNORE);\n "
    }
  ]
}