{
  "sha": "2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmRiOTEyYmExYTllMWMyNDljYjQ3OTVmNzgxZmQ0ZWE5ZmU5ZTdmMg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-11T15:21:26Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:55Z"
    },
    "message": "libctf: add the object index and function index sections\n\nNo code handles these yet, but our latest GCC patches are generating\nthem, so we have to be ready for them or erroneously conclude that we\nhave file corruption.\n\n(This simultaneously fixes a longstanding bug, concealed because nothing\nwas generating anything in the object or function info sections, where\nthe end of the section was being tested against the wrong thing: it\nwould have walked over the entire contents of the variable section and\ntreated them as part of the function info section.  This had to change\nnow anyway because the new sections have landed in between.)\n\ninclude/\n\t* ctf.h: Add object index and function index sections.  Describe\n\tthem. Improve the description of the variable section and clarify\n\tthe constraints on backward-pointing type nodes.\n\t(ctf_header): Add cth_objtidxoff, cth_funcidxoff.\n\nlibctf/\n\t* ctf-open.c (init_symtab): Check for overflow against the right\n\tsection.\n\t(upgrade_header): Set cth_objtidxoff, cth_funcidxoff to zero-length.\n\t(upgrade_types_v1): Note that these sections are not checked.\n\t(flip_header): Endian-swap the header fields.\n\t(flip_ctf): Endian-swap the sections.\n\t(flip_objts): Update comment.\n\t(ctf_bufopen): Check header offsets and alignment for validity.",
    "tree": {
      "sha": "b2fbac05c35401a797365b1ce7f4f12f6cb70ff4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b2fbac05c35401a797365b1ce7f4f12f6cb70ff4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d5944fca682fe97f37e537f78b665ada2400f51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d5944fca682fe97f37e537f78b665ada2400f51",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d5944fca682fe97f37e537f78b665ada2400f51"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 66,
    "deletions": 15
  },
  "files": [
    {
      "sha": "c2e80315aa1d4988d3edc3a3bd94bd1d59355287",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-11  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf.h: Add object index and function index sections.  Describe\n+\tthem. Improve the description of the variable section and clarify\n+\tthe constraints on backward-pointing type nodes.\n+\t(ctf_header): Add cth_objtidxoff, cth_funcidxoff.\n+\n 2019-07-06  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ctf_cuname): New function."
    },
    {
      "sha": "f371cd73c9439483bc16af77ab19024880459e34",
      "filename": "include/ctf.h",
      "status": "modified",
      "additions": 26,
      "deletions": 6,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/include/ctf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/include/ctf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf.h?ref=2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
      "patch": "@@ -52,10 +52,15 @@ extern \"C\"\n \n    The CTF file or section itself has the following structure:\n \n-   +--------+--------+---------+----------+----------+-------+--------+\n-   |  file  |  type  |  data   | function | variable | data  | string |\n-   | header | labels | objects |   info   |   info   | types | table  |\n-   +--------+--------+---------+----------+----------+-------+--------+\n+   +--------+--------+---------+----------+--------+----------+...\n+   |  file  |  type  |  data   | function | object | function |...\n+   | header | labels | objects |   info   | index  |  index   |...\n+   +--------+--------+---------+----------+--------+----------+...\n+\n+   ...+----------+-------+--------+\n+   ...| variable | data  | string |\n+   ...|   info   | types | table  |\n+      +----------+-------+--------+\n \n    The file header stores a magic number and version information, encoding\n    flags, and the byte offset of each of the sections relative to the end of the\n@@ -74,14 +79,27 @@ extern \"C\"\n    For each data object, the type ID (a small integer) is recorded.  For each\n    function, the type ID of the return type and argument types is recorded.\n \n+   For situations in which the order of the symbols in the symtab is not known,\n+   a pair of optional indexes follow the data object and function info sections:\n+   each of these is an array of strtab indexes, mapped 1:1 to the corresponding\n+   data object / function info section, giving each entry in those sections a\n+   name so that the linker can correlate them with final symtab entries and\n+   reorder them accordingly (dropping the indexes in the process).\n+\n    Variable records (as distinct from data objects) provide a modicum of support\n    for non-ELF systems, mapping a variable name to a CTF type ID.  The variable\n-   names are sorted into ASCIIbetical order, permitting binary searching.\n+   names are sorted into ASCIIbetical order, permitting binary searching.  We do\n+   not define how the consumer maps these variable names to addresses or\n+   anything else, or indeed what these names represent: they might be names\n+   looked up at runtime via dlsym() or names extracted at runtime by a debugger\n+   or anything else the consumer likes.\n \n    The data types section is a list of variable size records that represent each\n    type, in order by their ID.  The types themselves form a directed graph,\n    where each node may contain one or more outgoing edges to other type nodes,\n-   denoted by their ID.\n+   denoted by their ID.  Most type nodes are standalone or point backwards to\n+   earlier nodes, but this is not required: nodes can point to later nodes,\n+   particularly structure and union members.\n \n    Strings are recorded as a string table ID (0 or 1) and a byte offset into the\n    string table.  String table 0 is the internal CTF string table.  String table\n@@ -149,6 +167,8 @@ typedef struct ctf_header\n   uint32_t cth_lbloff;\t\t/* Offset of label section.  */\n   uint32_t cth_objtoff;\t\t/* Offset of object section.  */\n   uint32_t cth_funcoff;\t\t/* Offset of function section.  */\n+  uint32_t cth_objtidxoff;\t/* Offset of object index section.  */\n+  uint32_t cth_funcidxoff;\t/* Offset of function index section.  */\n   uint32_t cth_varoff;\t\t/* Offset of variable section.  */\n   uint32_t cth_typeoff;\t\t/* Offset of type section.  */\n   uint32_t cth_stroff;\t\t/* Offset of string section.  */"
    },
    {
      "sha": "64d644f8a6c2daf557ba342638be70ea1f033c55",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
      "patch": "@@ -1,3 +1,14 @@\n+2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-open.c (init_symtab): Check for overflow against the right\n+\tsection.\n+\t(upgrade_header): Set cth_objtidxoff, cth_funcidxoff to zero-length.\n+\t(upgrade_types_v1): Note that these sections are not checked.\n+\t(flip_header): Endian-swap the header fields.\n+\t(flip_ctf): Endian-swap the sections.\n+\t(flip_objts): Update comment.\n+\t(ctf_bufopen): Check header offsets and alignment for validity.\n+\n 2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-open-bfd.c: Add <assert.h>."
    },
    {
      "sha": "c96bad7d796dad4d601236ed25da0768f96c5a07",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 22,
      "deletions": 9,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=2db912ba1a9e1c249cb4795f781fd4ea9fe9e7f2",
      "patch": "@@ -278,7 +278,7 @@ init_symtab (ctf_file_t *fp, const ctf_header_t *hp,\n \t  break;\n \n \tcase STT_FUNC:\n-\t  if (funcoff >= hp->cth_typeoff)\n+\t  if (funcoff >= hp->cth_objtidxoff)\n \t    {\n \t      *xp = -1u;\n \t      break;\n@@ -376,6 +376,8 @@ upgrade_header (ctf_header_t *hp)\n   hp->cth_stroff = oldhp->cth_stroff;\n   hp->cth_typeoff = oldhp->cth_typeoff;\n   hp->cth_varoff = oldhp->cth_varoff;\n+  hp->cth_funcidxoff = hp->cth_varoff;\t\t/* No index sections.  */\n+  hp->cth_objtidxoff = hp->cth_funcidxoff;\n   hp->cth_funcoff = oldhp->cth_funcoff;\n   hp->cth_objtoff = oldhp->cth_objtoff;\n   hp->cth_lbloff = oldhp->cth_lbloff;\n@@ -388,6 +390,9 @@ upgrade_header (ctf_header_t *hp)\n    The upgrade is not done in-place: the ctf_base is moved.  ctf_strptr() must\n    not be called before reallocation is complete.\n \n+   Sections not checked here due to nonexistence or nonpopulated state in older\n+   formats: objtidx, funcidx.\n+\n    Type kinds not checked here due to nonexistence in older formats:\n       CTF_K_SLICE.  */\n static int\n@@ -967,6 +972,8 @@ flip_header (ctf_header_t *cth)\n   swap_thing (cth->cth_cuname);\n   swap_thing (cth->cth_objtoff);\n   swap_thing (cth->cth_funcoff);\n+  swap_thing (cth->cth_objtidxoff);\n+  swap_thing (cth->cth_funcidxoff);\n   swap_thing (cth->cth_varoff);\n   swap_thing (cth->cth_typeoff);\n   swap_thing (cth->cth_stroff);\n@@ -987,10 +994,10 @@ flip_lbls (void *start, size_t len)\n     }\n }\n \n-/* Flip the endianness of the data-object or function sections, an array of\n-   uint32_t.  (The function section has more internal structure, but that\n-   structure is an array of uint32_t, so can be treated as one big array for\n-   byte-swapping.)  */\n+/* Flip the endianness of the data-object or function sections or their indexes,\n+   all arrays of uint32_t.  (The function section has more internal structure,\n+   but that structure is an array of uint32_t, so can be treated as one big\n+   array for byte-swapping.)  */\n \n static void\n flip_objts (void *start, size_t len)\n@@ -1176,7 +1183,9 @@ flip_ctf (ctf_header_t *cth, unsigned char *buf)\n {\n   flip_lbls (buf + cth->cth_lbloff, cth->cth_objtoff - cth->cth_lbloff);\n   flip_objts (buf + cth->cth_objtoff, cth->cth_funcoff - cth->cth_objtoff);\n-  flip_objts (buf + cth->cth_funcoff, cth->cth_varoff - cth->cth_funcoff);\n+  flip_objts (buf + cth->cth_funcoff, cth->cth_objtidxoff - cth->cth_funcoff);\n+  flip_objts (buf + cth->cth_objtidxoff, cth->cth_funcidxoff - cth->cth_objtidxoff);\n+  flip_objts (buf + cth->cth_funcidxoff, cth->cth_varoff - cth->cth_funcidxoff);\n   flip_vars (buf + cth->cth_varoff, cth->cth_typeoff - cth->cth_varoff);\n   return flip_types (buf + cth->cth_typeoff, cth->cth_stroff - cth->cth_typeoff);\n }\n@@ -1330,19 +1339,23 @@ ctf_bufopen (const ctf_sect_t *ctfsect, const ctf_sect_t *symsect,\n \t       (unsigned long) fp->ctf_size);\n \n   if (hp->cth_lbloff > fp->ctf_size || hp->cth_objtoff > fp->ctf_size\n-      || hp->cth_funcoff > fp->ctf_size || hp->cth_typeoff > fp->ctf_size\n+      || hp->cth_funcoff > fp->ctf_size || hp->cth_objtidxoff > fp->ctf_size\n+      || hp->cth_funcidxoff > fp->ctf_size || hp->cth_typeoff > fp->ctf_size\n       || hp->cth_stroff > fp->ctf_size)\n     return (ctf_set_open_errno (errp, ECTF_CORRUPT));\n \n   if (hp->cth_lbloff > hp->cth_objtoff\n       || hp->cth_objtoff > hp->cth_funcoff\n       || hp->cth_funcoff > hp->cth_typeoff\n-      || hp->cth_funcoff > hp->cth_varoff\n+      || hp->cth_funcoff > hp->cth_objtidxoff\n+      || hp->cth_objtidxoff > hp->cth_funcidxoff\n+      || hp->cth_funcidxoff > hp->cth_varoff\n       || hp->cth_varoff > hp->cth_typeoff || hp->cth_typeoff > hp->cth_stroff)\n     return (ctf_set_open_errno (errp, ECTF_CORRUPT));\n \n   if ((hp->cth_lbloff & 3) || (hp->cth_objtoff & 2)\n-      || (hp->cth_funcoff & 2) || (hp->cth_varoff & 3)\n+      || (hp->cth_funcoff & 2) || (hp->cth_objtidxoff & 2)\n+      || (hp->cth_funcidxoff & 2) || (hp->cth_varoff & 3)\n       || (hp->cth_typeoff & 3))\n     return (ctf_set_open_errno (errp, ECTF_CORRUPT));\n "
    }
  ]
}