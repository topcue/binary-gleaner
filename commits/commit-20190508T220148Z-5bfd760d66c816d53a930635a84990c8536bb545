{
  "sha": "5bfd760d66c816d53a930635a84990c8536bb545",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWJmZDc2MGQ2NmM4MTZkNTNhOTMwNjM1YTg0OTkwYzg1MzZiYjU0NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-21T18:32:47Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:48Z"
    },
    "message": "Convert dwarf2_per_objfile to type-safe registry API\n\nThis changes dwarf2_per_objfile to use the type-safe registry API.\nThis also changes dwarf2_per_objfile not to be allocated on an\nobstack.  It seemed clearer to me to simply allocate it on the heap;\nand I didn't see a drawback from doing so.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2read.h (struct dwarf2_per_objfile): Don't inherit from\n\tallocate_on_obstack.\n\t* dwarf2read.c (dwarf2_objfile_data_key): Change type.\n\t(get_dwarf2_per_objfile): Update.\n\t(set_dwarf2_per_objfile): Remove.\n\t(dwarf2_has_info, dwarf2_get_section_info): Update.\n\t(dwarf2_free_objfile): Remove.\n\t(_initialize_dwarf2_read): Update.",
    "tree": {
      "sha": "46b9f5765730b9ae35a80f562c1a81606bfe2ea3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/46b9f5765730b9ae35a80f562c1a81606bfe2ea3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5bfd760d66c816d53a930635a84990c8536bb545",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bfd760d66c816d53a930635a84990c8536bb545",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5bfd760d66c816d53a930635a84990c8536bb545",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bfd760d66c816d53a930635a84990c8536bb545/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e85e19b4d7d9b3b322f27684f8c0a3a9ac0e57ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e85e19b4d7d9b3b322f27684f8c0a3a9ac0e57ab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e85e19b4d7d9b3b322f27684f8c0a3a9ac0e57ab"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 18,
    "deletions": 38
  },
  "files": [
    {
      "sha": "cb763b7e453aba33726ff63676fdef3f3a82a1ca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bfd760d66c816d53a930635a84990c8536bb545/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bfd760d66c816d53a930635a84990c8536bb545/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5bfd760d66c816d53a930635a84990c8536bb545",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2read.h (struct dwarf2_per_objfile): Don't inherit from\n+\tallocate_on_obstack.\n+\t* dwarf2read.c (dwarf2_objfile_data_key): Change type.\n+\t(get_dwarf2_per_objfile): Update.\n+\t(set_dwarf2_per_objfile): Remove.\n+\t(dwarf2_has_info, dwarf2_get_section_info): Update.\n+\t(dwarf2_free_objfile): Remove.\n+\t(_initialize_dwarf2_read): Update.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* auto-load.c (struct auto_load_pspace_info): Add destructor and"
    },
    {
      "sha": "b29c089606db9c5a710aa6203d278374461e451a",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 37,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bfd760d66c816d53a930635a84990c8536bb545/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bfd760d66c816d53a930635a84990c8536bb545/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=5bfd760d66c816d53a930635a84990c8536bb545",
      "patch": "@@ -108,7 +108,7 @@ static int check_physname = 0;\n /* When non-zero, do not reject deprecated .gdb_index sections.  */\n static int use_deprecated_index_sections = 0;\n \n-static const struct objfile_data *dwarf2_objfile_data_key;\n+static const struct objfile_key<dwarf2_per_objfile> dwarf2_objfile_data_key;\n \n /* The \"aclass\" indices for various kinds of computed DWARF symbols.  */\n \n@@ -281,18 +281,7 @@ struct mapped_debug_names final : public mapped_index_base\n dwarf2_per_objfile *\n get_dwarf2_per_objfile (struct objfile *objfile)\n {\n-  return ((struct dwarf2_per_objfile *)\n-\t  objfile_data (objfile, dwarf2_objfile_data_key));\n-}\n-\n-/* Set the dwarf2_per_objfile associated to OBJFILE.  */\n-\n-void\n-set_dwarf2_per_objfile (struct objfile *objfile,\n-\t\t\tstruct dwarf2_per_objfile *dwarf2_per_objfile)\n-{\n-  gdb_assert (get_dwarf2_per_objfile (objfile) == NULL);\n-  set_objfile_data (objfile, dwarf2_objfile_data_key, dwarf2_per_objfile);\n+  return dwarf2_objfile_data_key.get (objfile);\n }\n \n /* Default names of the debugging sections.  */\n@@ -2251,13 +2240,9 @@ dwarf2_has_info (struct objfile *objfile,\n     = get_dwarf2_per_objfile (objfile);\n \n   if (dwarf2_per_objfile == NULL)\n-    {\n-      /* Initialize per-objfile state.  */\n-      dwarf2_per_objfile\n-\t= new (&objfile->objfile_obstack) struct dwarf2_per_objfile (objfile,\n-\t\t\t\t\t\t\t\t     names);\n-      set_dwarf2_per_objfile (objfile, dwarf2_per_objfile);\n-    }\n+    dwarf2_per_objfile = dwarf2_objfile_data_key.emplace (objfile, objfile,\n+\t\t\t\t\t\t\t  names);\n+\n   return (!dwarf2_per_objfile->info.is_virtual\n \t  && dwarf2_per_objfile->info.s.section != NULL\n \t  && !dwarf2_per_objfile->abbrev.is_virtual\n@@ -2589,9 +2574,7 @@ dwarf2_get_section_info (struct objfile *objfile,\n                          asection **sectp, const gdb_byte **bufp,\n                          bfd_size_type *sizep)\n {\n-  struct dwarf2_per_objfile *data\n-    = (struct dwarf2_per_objfile *) objfile_data (objfile,\n-\t\t\t\t\t\t  dwarf2_objfile_data_key);\n+  struct dwarf2_per_objfile *data = dwarf2_objfile_data_key.get (objfile);\n   struct dwarf2_section_info *info;\n \n   /* We may see an objfile without any DWARF, in which case we just\n@@ -25433,17 +25416,6 @@ free_one_cached_comp_unit (struct dwarf2_per_cu_data *target_per_cu)\n     }\n }\n \n-/* Cleanup function for the dwarf2_per_objfile data.  */\n-\n-static void\n-dwarf2_free_objfile (struct objfile *objfile, void *datum)\n-{\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = static_cast<struct dwarf2_per_objfile *> (datum);\n-\n-  delete dwarf2_per_objfile;\n-}\n-\n /* A set of CU \"per_cu\" pointer, DIE offset, and GDB type pointer.\n    We store these in a hash table separate from the DIEs, and preserve them\n    when the DIEs are flushed out of cache.\n@@ -25761,9 +25733,6 @@ show_check_physname (struct ui_file *file, int from_tty,\n void\n _initialize_dwarf2_read (void)\n {\n-  dwarf2_objfile_data_key\n-    = register_objfile_data_with_cleanup (nullptr, dwarf2_free_objfile);\n-\n   add_prefix_cmd (\"dwarf\", class_maintenance, set_dwarf_cmd, _(\"\\\n Set DWARF specific variables.\\n\\\n Configure DWARF variables such as the cache size\"),"
    },
    {
      "sha": "732654348a8305e5cb5b38c8e22ce36cbbdc596e",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bfd760d66c816d53a930635a84990c8536bb545/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bfd760d66c816d53a930635a84990c8536bb545/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=5bfd760d66c816d53a930635a84990c8536bb545",
      "patch": "@@ -102,7 +102,7 @@ typedef struct die_info *die_info_ptr;\n /* Collection of data recorded per objfile.\n    This hangs off of dwarf2_objfile_data_key.  */\n \n-struct dwarf2_per_objfile : public allocate_on_obstack\n+struct dwarf2_per_objfile\n {\n   /* Construct a dwarf2_per_objfile for OBJFILE.  NAMES points to the\n      dwarf2 section names, or is NULL if the standard ELF names are"
    }
  ]
}