{
  "sha": "986f078366b193ed9f5bd02af965f3af958ba859",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTg2ZjA3ODM2NmIxOTNlZDlmNWJkMDJhZjk2NWYzYWY5NThiYTg1OQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T02:42:00Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T02:42:00Z"
    },
    "message": "bfd_size_type to size_t\n\nbfd_size_type was invented a long time ago in the K&R days.  Many\nplaces in binutils ought to be using size_t instead (and there are\nlots of places that use long or unsigned long that really ought to use\nsize_t too).  Note that you can't change everything over to size_t: A\n32-bit host needs a larger type than size_t to support reading and\nprocessing of 64-bit ELF object files.  This patch just tidies some\nof the more obvious uses of bfd_size_type that could be size_t.  There\nno doubt are more lurking in the source.  Incidentally, practically\nall functions used for output of object files can use size_t and don't\nneed to worry about overflow of size expressions.  If you have\nsomething like\n  symcount * sizeof (void *)\nwhen symcount is counting symbols already in memory then you know that\nthis expression can't overflow since the size of a symbol in memory is\nlarger by far than that of a pointer.\n\n\t* aix386-core.c (aix386_core_file_p): Use size_t for \"amt\".\n\t* aout-target.h (object_p): Likewise.\n\t* aout-tic30.c (tic30_aout_object_p): Likewise.\n\t* aoutx.h (some_aout_object_p, mkobject, make_empty_symbol),\n\t(emit_stringtab, write_syms, link_hash_table_create),\n\t(aout_link_write_other_symbol): Likewise.\n\t* archive.c (_bfd_generic_mkarchive, bfd_generic_archive_p),\n\t(bfd_ar_hdr_from_filesystem, _bfd_write_archive_contents),\n\t(_bfd_compute_and_write_armap): Likewise.\n\t* archures.c (bfd_arch_list): Likewise.\n\t* bfd.c (bfd_record_phdr): Likewise.\n\t* binary.c (binary_canonicalize_symtab): Likewise.\n\t* cisco-core.c (cisco_core_file_validate): Likewise.\n\t* coff-arm.c (coff_arm_link_hash_table_create, find_thumb_glue),\n\t(find_arm_glue, record_arm_to_thumb_glue),\n\t(record_thumb_to_arm_glue): Likewise.\n\t* coff-ppc.c (ppc_coff_link_hash_table_create, record_toc),\n\t(ppc_allocate_toc_section): Likewise.\n\t* coff-rs6000.c (_bfd_xcoff_mkobject, _bfd_xcoff_archive_p): Likewise.\n\t* coff-sh.c (sh_relax_section): Likewise.\n\t* coff64-rs6000.c (xcoff64_archive_p): Likewise.\n\t* coffcode.h (handle_COMDAT, coff_new_section_hook),\n\t(coff_set_alignment_hook, coff_mkobject),\n\t(coff_compute_section_file_positions): Likewise.\n\t* coffgen.c (coff_make_empty_symbol, coff_bfd_make_debug_symbol),\n\t(coff_find_nearest_line_with_names),\n\t( bfd_coff_set_symbol_class): Likewise.\n\t* cofflink.c (_bfd_coff_link_hash_table_create),\n\t(_bfd_coff_link_input_bfd): Likewise.\n\t* dwarf1.c (alloc_dwarf1_unit, alloc_dwarf1_func): Likewise.\n\t* dwarf2.c (read_abbrevs, read_attribute_value, add_line_info),\n\t(build_line_info_table, sort_line_sequences),\n\t(line_info_add_include_dir, line_info_add_file_name),\n\t(decode_line_info, scan_unit_for_symbols, parse_comp_unit),\n\t(place_sections, _bfd_dwarf2_slurp_debug_info): Likewise.\n\t* ecoff.c (_bfd_ecoff_mkobject, _bfd_ecoff_make_empty_symbol),\n\t(_bfd_ecoff_find_nearest_line),\n\t(_bfd_ecoff_bfd_link_hash_table_create): Likewise.\n\t* ecofflink.c (bfd_ecoff_debug_init): Likewise.\n\t* elf-hppa.h (_bfd_elf_hppa_gen_reloc_type): Likewise.\n\t* elf-m10300.c (mn10300_elf_relax_section),\n\t(elf32_mn10300_link_hash_table_create): Likewise.\n\t* elf-strtab.c (_bfd_elf_strtab_init): Likewise.\n\t* elf.c (make_mapping, copy_elf_program_header): Likewise.\n\t* elf32-arm.c (elf32_arm_link_hash_table_create),\n\t(elf32_arm_setup_section_lists, elf32_arm_check_relocs),\n\t(elf32_arm_new_section_hook): Likewise.\n\t* elf32-avr.c (elf_avr_new_section_hook),\n\t(elf32_avr_link_hash_table_create, get_local_syms),\n\t(elf32_avr_setup_section_lists): Likewise.\n\t* elf32-bfin.c (bfinfdpic_elf_link_hash_table_create),\n\t(bfin_link_hash_table_create): Likewise.\n\t* elf32-cr16.c (elf32_cr16_link_hash_table_create): Likewise.\n\t* elf32-cris.c (elf_cris_link_hash_table_create): Likewise.\n\t* elf32-csky.c (csky_elf_link_hash_table_create),\n\t(csky_elf_check_relocs, elf32_csky_setup_section_lists): Likewise.\n\t* elf32-frv.c (frvfdpic_elf_link_hash_table_create): Likewise.\n\t* elf32-hppa.c (elf32_hppa_link_hash_table_create),\n\t(elf32_hppa_setup_section_lists, get_local_syms): Likewise.\n\t* elf32-i386.c (elf_i386_check_relocs): Likewise.\n\t* elf32-lm32.c (lm32_elf_link_hash_table_create): Likewise.\n\t* elf32-m32r.c (m32r_elf_link_hash_table_create),\n\t(m32r_elf_check_relocs): Likewise.\n\t* elf32-m68hc1x.c (m68hc11_elf_hash_table_create),\n\t(elf32_m68hc11_setup_section_lists),\n\t(elf32_m68hc11_size_stubs): Likewise.\n\t* elf32-m68k.c (elf_m68k_link_hash_table_create): Likewise.\n\t* elf32-metag.c (elf_metag_link_hash_table_create),\n\t(elf_metag_setup_section_lists): Likewise.\n\t* elf32-microblaze.c (microblaze_elf_link_hash_table_create),\n\t(microblaze_elf_check_relocs): Likewise.\n\t* elf32-nds32.c (nds32_elf_link_hash_table_create),\n\t(nds32_elf_check_relocs): Likewise.\n\t* elf32-nios2.c (nios2_elf32_setup_section_lists),\n\t(get_local_syms, nios2_elf32_check_relocs),\n\t(nios2_elf32_link_hash_table_create): Likewise.\n\t* elf32-or1k.c (or1k_elf_link_hash_table_create),\n\t(or1k_elf_check_relocs): Likewise.\n\t* elf32-ppc.c (ppc_elf_modify_segment_map, update_plt_info): Likewise.\n\t* elf32-pru.c (pru_elf32_link_hash_table_create): Likewise.\n\t* elf32-s390.c (elf_s390_link_hash_table_create),\n\t(elf_s390_check_relocs): Likewise.\n\t* elf32-score.c (score_elf_create_got_section),\n\t(s3_elf32_score_new_section_hook),\n\t(elf32_score_link_hash_table_create): Likewise.\n\t* elf32-score7.c (score_elf_create_got_section),\n\t(s7_elf32_score_new_section_hook): Likewise.\n\t* elf32-sh.c (sh_elf_link_hash_table_create),\n\t(sh_elf_check_relocs): Likewise.\n\t* elf32-tic6x.c (elf32_tic6x_link_hash_table_create),\n\t(elf32_tic6x_new_section_hook, elf32_tic6x_check_relocs): Likewise.\n\t* elf32-tilepro.c (tilepro_elf_link_hash_table_create),\n\t(tilepro_elf_check_relocs): Likewise.\n\t* elf32-v850.c (remember_hi16s_reloc): Likewise.\n\t* elf32-vax.c (elf_vax_link_hash_table_create): Likewise.\n\t* elf32-xtensa.c (elf_xtensa_link_hash_table_create),\n\t(elf_xtensa_new_section_hook): Likewise.\n\t* elf64-alpha.c (elf64_alpha_bfd_link_hash_table_create),\n\t(get_got_entry, elf64_alpha_check_relocs): Likewise.\n\t* elf64-hppa.c (elf64_hppa_hash_table_create): Likewise.\n\t* elf64-ia64-vms.c (elf64_ia64_object_p): Likewise.\n\t* elf64-mmix.c (mmix_elf_new_section_hook): Likewise.\n\t* elf64-ppc.c (ppc64_elf_new_section_hook),\n\t(ppc64_elf_link_hash_table_create, update_local_sym_info),\n\t(update_plt_info, ppc64_elf_check_relocs): Likewise.\n\t* elf64-s390.c (elf_s390_link_hash_table_create),\n\t(elf_s390_check_relocs): Likewise.\n\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n\t* elflink.c (bfd_elf_link_record_local_dynamic_symbol),\n\t(_bfd_elf_link_find_version_dependencies, elf_link_add_object_symbols),\n\t(elf_link_add_archive_symbols, compute_bucket_count),\n\t(bfd_elf_size_dynsym_hash_dynstr, _bfd_elf_link_hash_table_create),\n\t(bfd_elf_get_bfd_needed_list, elf_link_swap_symbols_out),\n\t(bfd_elf_final_link): Likewise.\n\t* elfnn-aarch64.c (elfNN_aarch64_link_hash_table_create),\n\t(elfNN_aarch64_setup_section_lists, elfNN_aarch64_check_relocs),\n\t(elfNN_aarch64_new_section_hook): Likewise.\n\t* elfnn-ia64.c (elfNN_ia64_object_p): Likewise.\n\t* elfnn-riscv.c (riscv_elf_link_hash_table_create),\n\t(riscv_elf_check_relocs): Likewise.\n\t* elfxx-mips.c (_bfd_mips_elf_new_section_hook),\n\t(_bfd_mips_elf_add_symbol_hook, _bfd_mips_elf_check_relocs),\n\t(_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_set_section_contents),\n\t(_bfd_mips_elf_link_hash_table_create): Likewise.\n\t* elfxx-sparc.c (_bfd_sparc_elf_link_hash_table_create),\n\t(_bfd_sparc_elf_check_relocs),\n\t(_bfd_sparc_elf_new_section_hook): Likewise.\n\t* elfxx-tilegx.c (tilegx_elf_link_hash_table_create),\n\t(tilegx_elf_check_relocs): Likewise.\n\t* elfxx-x86.c (_bfd_x86_elf_link_hash_table_create): Likewise.\n\t* format.c (bfd_check_format_matches): Likewise.\n\t* hash.c (_bfd_stringtab_init): Likewise.\n\t* ihex.c (ihex_scan): Likewise.\n\t* irix-core.c (irix_core_core_file_p): Likewise.\n\t* linker.c (bfd_wrapped_link_hash_lookup),\n\t(_bfd_generic_link_hash_table_create),\n\t(_bfd_generic_reloc_link_order): Likewise.\n\t* lynx-core.c (lynx_core_file_p): Likewise.\n\t* netbsd-core.c (netbsd_core_file_p): Likewise.\n\t* osf-core.c (osf_core_core_file_p): Likewise.\n\t* pdp11.c (some_aout_object_p, mkobject, make_empty_symbol),\n\t(link_hash_table_create, aout_link_write_other_symbol): Likewise.\n\t* peXXigen.c (_bfd_XX_bfd_copy_private_section_data): Likewise.\n\t* peicode.h (pe_mkobject): Likewise.\n\t* ppcboot.c (ppcboot_mkobject, ppcboot_canonicalize_symtab): Likewise.\n\t* ptrace-core.c (ptrace_unix_core_file_p): Likewise.\n\t* sco5-core.c (read_uarea): Likewise.\n\t* som.c (hppa_som_gen_reloc_type, som_object_p, som_prep_headers),\n\t(som_write_fixups, som_write_space_strings, som_write_symbol_strings),\n\t(som_finish_writing, som_canonicalize_symtab, som_new_section_hook),\n\t(som_bfd_copy_private_section_data, bfd_som_set_section_attributes),\n\t(bfd_som_attach_aux_hdr, som_write_armap): Likewise.\n\t* srec.c (srec_scan): Likewise.\n\t* syms.c (_bfd_generic_make_empty_symbol): Likewise.\n\t* targets.c (bfd_target_list): Likewise.\n\t* tekhex.c (first_phase, tekhex_sizeof_headers): Likewise.\n\t* trad-core.c (trad_unix_core_file_p): Likewise.\n\t* vms-alpha.c (vms_initialize, alpha_vms_bfd_link_hash_table_create),\n\t(vms_new_section_hook): Likewise.\n\t* wasm-module.c (wasm_make_empty_symbol): Likewise.\n\t* xcofflink.c (xcoff_get_section_contents),\n\t(_bfd_xcoff_bfd_link_hash_table_create, xcoff_set_import_path),\n\t(xcoff_find_function, bfd_xcoff_link_record_set, xcoff_build_ldsym),\n\t(bfd_xcoff_size_dynamic_sections, xcoff_link_input_bfd): Likewise.",
    "tree": {
      "sha": "5ee7354ad546ab17446d6cde51afbf29db6d6e51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5ee7354ad546ab17446d6cde51afbf29db6d6e51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/986f078366b193ed9f5bd02af965f3af958ba859",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/986f078366b193ed9f5bd02af965f3af958ba859",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/986f078366b193ed9f5bd02af965f3af958ba859",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/986f078366b193ed9f5bd02af965f3af958ba859/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2d0e121701a95e0f37af02bc622393b1ccd88c76",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2d0e121701a95e0f37af02bc622393b1ccd88c76",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2d0e121701a95e0f37af02bc622393b1ccd88c76"
    }
  ],
  "stats": {
    "total": 680,
    "additions": 420,
    "deletions": 260
  },
  "files": [
    {
      "sha": "4b2d8249b119967a739e07e2ce34e88f4bd14349",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 167,
      "deletions": 0,
      "changes": 167,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1,3 +1,170 @@\n+2020-02-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* aix386-core.c (aix386_core_file_p): Use size_t for \"amt\".\n+\t* aout-target.h (object_p): Likewise.\n+\t* aout-tic30.c (tic30_aout_object_p): Likewise.\n+\t* aoutx.h (some_aout_object_p, mkobject, make_empty_symbol),\n+\t(emit_stringtab, write_syms, link_hash_table_create),\n+\t(aout_link_write_other_symbol): Likewise.\n+\t* archive.c (_bfd_generic_mkarchive, bfd_generic_archive_p),\n+\t(bfd_ar_hdr_from_filesystem, _bfd_write_archive_contents),\n+\t(_bfd_compute_and_write_armap): Likewise.\n+\t* archures.c (bfd_arch_list): Likewise.\n+\t* bfd.c (bfd_record_phdr): Likewise.\n+\t* binary.c (binary_canonicalize_symtab): Likewise.\n+\t* cisco-core.c (cisco_core_file_validate): Likewise.\n+\t* coff-arm.c (coff_arm_link_hash_table_create, find_thumb_glue),\n+\t(find_arm_glue, record_arm_to_thumb_glue),\n+\t(record_thumb_to_arm_glue): Likewise.\n+\t* coff-ppc.c (ppc_coff_link_hash_table_create, record_toc),\n+\t(ppc_allocate_toc_section): Likewise.\n+\t* coff-rs6000.c (_bfd_xcoff_mkobject, _bfd_xcoff_archive_p): Likewise.\n+\t* coff-sh.c (sh_relax_section): Likewise.\n+\t* coff64-rs6000.c (xcoff64_archive_p): Likewise.\n+\t* coffcode.h (handle_COMDAT, coff_new_section_hook),\n+\t(coff_set_alignment_hook, coff_mkobject),\n+\t(coff_compute_section_file_positions): Likewise.\n+\t* coffgen.c (coff_make_empty_symbol, coff_bfd_make_debug_symbol),\n+\t(coff_find_nearest_line_with_names),\n+\t( bfd_coff_set_symbol_class): Likewise.\n+\t* cofflink.c (_bfd_coff_link_hash_table_create),\n+\t(_bfd_coff_link_input_bfd): Likewise.\n+\t* dwarf1.c (alloc_dwarf1_unit, alloc_dwarf1_func): Likewise.\n+\t* dwarf2.c (read_abbrevs, read_attribute_value, add_line_info),\n+\t(build_line_info_table, sort_line_sequences),\n+\t(line_info_add_include_dir, line_info_add_file_name),\n+\t(decode_line_info, scan_unit_for_symbols, parse_comp_unit),\n+\t(place_sections, _bfd_dwarf2_slurp_debug_info): Likewise.\n+\t* ecoff.c (_bfd_ecoff_mkobject, _bfd_ecoff_make_empty_symbol),\n+\t(_bfd_ecoff_find_nearest_line),\n+\t(_bfd_ecoff_bfd_link_hash_table_create): Likewise.\n+\t* ecofflink.c (bfd_ecoff_debug_init): Likewise.\n+\t* elf-hppa.h (_bfd_elf_hppa_gen_reloc_type): Likewise.\n+\t* elf-m10300.c (mn10300_elf_relax_section),\n+\t(elf32_mn10300_link_hash_table_create): Likewise.\n+\t* elf-strtab.c (_bfd_elf_strtab_init): Likewise.\n+\t* elf.c (make_mapping, copy_elf_program_header): Likewise.\n+\t* elf32-arm.c (elf32_arm_link_hash_table_create),\n+\t(elf32_arm_setup_section_lists, elf32_arm_check_relocs),\n+\t(elf32_arm_new_section_hook): Likewise.\n+\t* elf32-avr.c (elf_avr_new_section_hook),\n+\t(elf32_avr_link_hash_table_create, get_local_syms),\n+\t(elf32_avr_setup_section_lists): Likewise.\n+\t* elf32-bfin.c (bfinfdpic_elf_link_hash_table_create),\n+\t(bfin_link_hash_table_create): Likewise.\n+\t* elf32-cr16.c (elf32_cr16_link_hash_table_create): Likewise.\n+\t* elf32-cris.c (elf_cris_link_hash_table_create): Likewise.\n+\t* elf32-csky.c (csky_elf_link_hash_table_create),\n+\t(csky_elf_check_relocs, elf32_csky_setup_section_lists): Likewise.\n+\t* elf32-frv.c (frvfdpic_elf_link_hash_table_create): Likewise.\n+\t* elf32-hppa.c (elf32_hppa_link_hash_table_create),\n+\t(elf32_hppa_setup_section_lists, get_local_syms): Likewise.\n+\t* elf32-i386.c (elf_i386_check_relocs): Likewise.\n+\t* elf32-lm32.c (lm32_elf_link_hash_table_create): Likewise.\n+\t* elf32-m32r.c (m32r_elf_link_hash_table_create),\n+\t(m32r_elf_check_relocs): Likewise.\n+\t* elf32-m68hc1x.c (m68hc11_elf_hash_table_create),\n+\t(elf32_m68hc11_setup_section_lists),\n+\t(elf32_m68hc11_size_stubs): Likewise.\n+\t* elf32-m68k.c (elf_m68k_link_hash_table_create): Likewise.\n+\t* elf32-metag.c (elf_metag_link_hash_table_create),\n+\t(elf_metag_setup_section_lists): Likewise.\n+\t* elf32-microblaze.c (microblaze_elf_link_hash_table_create),\n+\t(microblaze_elf_check_relocs): Likewise.\n+\t* elf32-nds32.c (nds32_elf_link_hash_table_create),\n+\t(nds32_elf_check_relocs): Likewise.\n+\t* elf32-nios2.c (nios2_elf32_setup_section_lists),\n+\t(get_local_syms, nios2_elf32_check_relocs),\n+\t(nios2_elf32_link_hash_table_create): Likewise.\n+\t* elf32-or1k.c (or1k_elf_link_hash_table_create),\n+\t(or1k_elf_check_relocs): Likewise.\n+\t* elf32-ppc.c (ppc_elf_modify_segment_map, update_plt_info): Likewise.\n+\t* elf32-pru.c (pru_elf32_link_hash_table_create): Likewise.\n+\t* elf32-s390.c (elf_s390_link_hash_table_create),\n+\t(elf_s390_check_relocs): Likewise.\n+\t* elf32-score.c (score_elf_create_got_section),\n+\t(s3_elf32_score_new_section_hook),\n+\t(elf32_score_link_hash_table_create): Likewise.\n+\t* elf32-score7.c (score_elf_create_got_section),\n+\t(s7_elf32_score_new_section_hook): Likewise.\n+\t* elf32-sh.c (sh_elf_link_hash_table_create),\n+\t(sh_elf_check_relocs): Likewise.\n+\t* elf32-tic6x.c (elf32_tic6x_link_hash_table_create),\n+\t(elf32_tic6x_new_section_hook, elf32_tic6x_check_relocs): Likewise.\n+\t* elf32-tilepro.c (tilepro_elf_link_hash_table_create),\n+\t(tilepro_elf_check_relocs): Likewise.\n+\t* elf32-v850.c (remember_hi16s_reloc): Likewise.\n+\t* elf32-vax.c (elf_vax_link_hash_table_create): Likewise.\n+\t* elf32-xtensa.c (elf_xtensa_link_hash_table_create),\n+\t(elf_xtensa_new_section_hook): Likewise.\n+\t* elf64-alpha.c (elf64_alpha_bfd_link_hash_table_create),\n+\t(get_got_entry, elf64_alpha_check_relocs): Likewise.\n+\t* elf64-hppa.c (elf64_hppa_hash_table_create): Likewise.\n+\t* elf64-ia64-vms.c (elf64_ia64_object_p): Likewise.\n+\t* elf64-mmix.c (mmix_elf_new_section_hook): Likewise.\n+\t* elf64-ppc.c (ppc64_elf_new_section_hook),\n+\t(ppc64_elf_link_hash_table_create, update_local_sym_info),\n+\t(update_plt_info, ppc64_elf_check_relocs): Likewise.\n+\t* elf64-s390.c (elf_s390_link_hash_table_create),\n+\t(elf_s390_check_relocs): Likewise.\n+\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n+\t* elflink.c (bfd_elf_link_record_local_dynamic_symbol),\n+\t(_bfd_elf_link_find_version_dependencies, elf_link_add_object_symbols),\n+\t(elf_link_add_archive_symbols, compute_bucket_count),\n+\t(bfd_elf_size_dynsym_hash_dynstr, _bfd_elf_link_hash_table_create),\n+\t(bfd_elf_get_bfd_needed_list, elf_link_swap_symbols_out),\n+\t(bfd_elf_final_link): Likewise.\n+\t* elfnn-aarch64.c (elfNN_aarch64_link_hash_table_create),\n+\t(elfNN_aarch64_setup_section_lists, elfNN_aarch64_check_relocs),\n+\t(elfNN_aarch64_new_section_hook): Likewise.\n+\t* elfnn-ia64.c (elfNN_ia64_object_p): Likewise.\n+\t* elfnn-riscv.c (riscv_elf_link_hash_table_create),\n+\t(riscv_elf_check_relocs): Likewise.\n+\t* elfxx-mips.c (_bfd_mips_elf_new_section_hook),\n+\t(_bfd_mips_elf_add_symbol_hook, _bfd_mips_elf_check_relocs),\n+\t(_bfd_mips_elf_modify_segment_map, _bfd_mips_elf_set_section_contents),\n+\t(_bfd_mips_elf_link_hash_table_create): Likewise.\n+\t* elfxx-sparc.c (_bfd_sparc_elf_link_hash_table_create),\n+\t(_bfd_sparc_elf_check_relocs),\n+\t(_bfd_sparc_elf_new_section_hook): Likewise.\n+\t* elfxx-tilegx.c (tilegx_elf_link_hash_table_create),\n+\t(tilegx_elf_check_relocs): Likewise.\n+\t* elfxx-x86.c (_bfd_x86_elf_link_hash_table_create): Likewise.\n+\t* format.c (bfd_check_format_matches): Likewise.\n+\t* hash.c (_bfd_stringtab_init): Likewise.\n+\t* ihex.c (ihex_scan): Likewise.\n+\t* irix-core.c (irix_core_core_file_p): Likewise.\n+\t* linker.c (bfd_wrapped_link_hash_lookup),\n+\t(_bfd_generic_link_hash_table_create),\n+\t(_bfd_generic_reloc_link_order): Likewise.\n+\t* lynx-core.c (lynx_core_file_p): Likewise.\n+\t* netbsd-core.c (netbsd_core_file_p): Likewise.\n+\t* osf-core.c (osf_core_core_file_p): Likewise.\n+\t* pdp11.c (some_aout_object_p, mkobject, make_empty_symbol),\n+\t(link_hash_table_create, aout_link_write_other_symbol): Likewise.\n+\t* peXXigen.c (_bfd_XX_bfd_copy_private_section_data): Likewise.\n+\t* peicode.h (pe_mkobject): Likewise.\n+\t* ppcboot.c (ppcboot_mkobject, ppcboot_canonicalize_symtab): Likewise.\n+\t* ptrace-core.c (ptrace_unix_core_file_p): Likewise.\n+\t* sco5-core.c (read_uarea): Likewise.\n+\t* som.c (hppa_som_gen_reloc_type, som_object_p, som_prep_headers),\n+\t(som_write_fixups, som_write_space_strings, som_write_symbol_strings),\n+\t(som_finish_writing, som_canonicalize_symtab, som_new_section_hook),\n+\t(som_bfd_copy_private_section_data, bfd_som_set_section_attributes),\n+\t(bfd_som_attach_aux_hdr, som_write_armap): Likewise.\n+\t* srec.c (srec_scan): Likewise.\n+\t* syms.c (_bfd_generic_make_empty_symbol): Likewise.\n+\t* targets.c (bfd_target_list): Likewise.\n+\t* tekhex.c (first_phase, tekhex_sizeof_headers): Likewise.\n+\t* trad-core.c (trad_unix_core_file_p): Likewise.\n+\t* vms-alpha.c (vms_initialize, alpha_vms_bfd_link_hash_table_create),\n+\t(vms_new_section_hook): Likewise.\n+\t* wasm-module.c (wasm_make_empty_symbol): Likewise.\n+\t* xcofflink.c (xcoff_get_section_contents),\n+\t(_bfd_xcoff_bfd_link_hash_table_create, xcoff_set_import_path),\n+\t(xcoff_find_function, bfd_xcoff_link_record_set, xcoff_build_ldsym),\n+\t(bfd_xcoff_size_dynamic_sections, xcoff_link_input_bfd): Likewise.\n+\n 2020-02-19  Alan Modra  <amodra@gmail.com>\n \n \t* elfxx-riscv.c (riscv_multi_letter_ext_valid_p): Don't use C99."
    },
    {
      "sha": "c9ec756c4a19cd1fd03777342a9a643dd97dda96",
      "filename": "bfd/aix386-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aix386-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aix386-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aix386-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -71,7 +71,7 @@ aix386_core_file_p (bfd *abfd)\n   int i, n;\n   unsigned char longbuf[4];\t/* Raw bytes of various header fields */\n   bfd_size_type core_size = sizeof (struct corehdr);\n-  bfd_size_type amt;\n+  size_t amt;\n   struct corehdr *core;\n   struct mergem\n   {"
    },
    {
      "sha": "00024e6be284208ccddf51cea0c27bca461943bc",
      "filename": "bfd/aout-target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aout-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aout-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aout-target.h?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -134,7 +134,7 @@ MY (object_p) (bfd *abfd)\n   struct external_exec exec_bytes;\t/* Raw exec header from file.  */\n   struct internal_exec exec;\t\t/* Cleaned-up exec header.  */\n   const bfd_target *target;\n-  bfd_size_type amt = EXEC_BYTES_SIZE;\n+  size_t amt = EXEC_BYTES_SIZE;\n \n   if (bfd_bread ((void *) &exec_bytes, amt, abfd) != amt)\n     {"
    },
    {
      "sha": "06f401cc7e5effbd93406a4c4d0b8651c05b9564",
      "filename": "bfd/aout-tic30.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aout-tic30.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aout-tic30.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aout-tic30.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -553,7 +553,7 @@ tic30_aout_object_p (bfd *abfd)\n   struct external_exec exec_bytes;\t/* Raw exec header from file.  */\n   struct internal_exec exec;\t\t/* Cleaned-up exec header.  */\n   const bfd_target *target;\n-  bfd_size_type amt = EXEC_BYTES_SIZE;\n+  size_t amt = EXEC_BYTES_SIZE;\n \n   if (bfd_bread (& exec_bytes, amt, abfd) != amt)\n     {"
    },
    {
      "sha": "df04ab2644966398d8834d7c7c0b687ca8a092fe",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -459,7 +459,7 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n {\n   struct aout_data_struct *rawptr, *oldrawptr;\n   const bfd_target *result;\n-  bfd_size_type amt = sizeof (* rawptr);\n+  size_t amt = sizeof (* rawptr);\n \n   rawptr = (struct aout_data_struct *) bfd_zalloc (abfd, amt);\n   if (rawptr == NULL)\n@@ -671,7 +671,7 @@ bfd_boolean\n NAME (aout, mkobject) (bfd *abfd)\n {\n   struct aout_data_struct *rawptr;\n-  bfd_size_type amt = sizeof (* rawptr);\n+  size_t amt = sizeof (* rawptr);\n \n   bfd_set_error (bfd_error_system_call);\n \n@@ -1675,7 +1675,7 @@ translate_to_native_sym_flags (bfd *abfd,\n asymbol *\n NAME (aout, make_empty_symbol) (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (aout_symbol_type);\n+  size_t amt = sizeof (aout_symbol_type);\n \n   aout_symbol_type *new_symbol = (aout_symbol_type *) bfd_zalloc (abfd, amt);\n   if (!new_symbol)\n@@ -1852,7 +1852,7 @@ static bfd_boolean\n emit_stringtab (bfd *abfd, struct bfd_strtab_hash *tab)\n {\n   bfd_byte buffer[BYTES_IN_WORD];\n-  bfd_size_type amt = BYTES_IN_WORD;\n+  size_t amt = BYTES_IN_WORD;\n \n   /* The string table starts with the size.  */\n   PUT_WORD (abfd, _bfd_stringtab_size (tab) + BYTES_IN_WORD, buffer);\n@@ -1878,7 +1878,7 @@ NAME (aout, write_syms) (bfd *abfd)\n       asymbol *g = generic[count];\n       bfd_size_type indx;\n       struct external_nlist nsp;\n-      bfd_size_type amt;\n+      size_t amt;\n \n       indx = add_to_stringtab (abfd, strtab, g->name, FALSE);\n       if (indx == (bfd_size_type) -1)\n@@ -2980,7 +2980,7 @@ struct bfd_link_hash_table *\n NAME (aout, link_hash_table_create) (bfd *abfd)\n {\n   struct aout_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (* ret);\n+  size_t amt = sizeof (* ret);\n \n   ret = (struct aout_link_hash_table *) bfd_malloc (amt);\n   if (ret == NULL)\n@@ -3634,7 +3634,7 @@ aout_link_write_other_symbol (struct bfd_hash_entry *bh, void *data)\n   bfd_vma val;\n   struct external_nlist outsym;\n   bfd_size_type indx;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (h->root.type == bfd_link_hash_warning)\n     {\n@@ -3759,7 +3759,7 @@ aout_link_reloc_link_order (struct aout_final_link_info *flaginfo,\n   struct reloc_std_external srel;\n   struct reloc_ext_external erel;\n   void * rel_ptr;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   pr = p->u.reloc.p;\n "
    },
    {
      "sha": "67d1c9e1534b9794435e2c6e4e6e47568c2f3c45",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -212,7 +212,7 @@ _bfd_ar_sizepad (char *p, size_t n, bfd_size_type size)\n bfd_boolean\n _bfd_generic_mkarchive (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (struct artdata);\n+  size_t amt = sizeof (struct artdata);\n \n   abfd->tdata.aout_ar_data = (struct artdata *) bfd_zalloc (abfd, amt);\n   if (bfd_ardata (abfd) == NULL)\n@@ -847,7 +847,7 @@ bfd_generic_archive_p (bfd *abfd)\n {\n   struct artdata *tdata_hold;\n   char armag[SARMAG + 1];\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (bfd_bread (armag, SARMAG, abfd) != SARMAG)\n     {\n@@ -1837,7 +1837,7 @@ bfd_ar_hdr_from_filesystem (bfd *abfd, const char *filename, bfd *member)\n   struct stat status;\n   struct areltdata *ared;\n   struct ar_hdr *hdr;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (member && (member->flags & BFD_IN_MEMORY) != 0)\n     {\n@@ -2187,7 +2187,7 @@ _bfd_write_archive_contents (bfd *arch)\n \n       while (remaining)\n \t{\n-\t  unsigned int amt = DEFAULT_BUFFERSIZE;\n+\t  size_t amt = DEFAULT_BUFFERSIZE;\n \n \t  if (amt > remaining)\n \t    amt = remaining;\n@@ -2251,7 +2251,7 @@ _bfd_compute_and_write_armap (bfd *arch, unsigned int elength)\n   asymbol **syms = NULL;\n   long syms_max = 0;\n   bfd_boolean ret;\n-  bfd_size_type amt;\n+  size_t amt;\n   static bfd_boolean report_plugin_err = TRUE;\n \n   /* Dunno if this is the best place for this info...  */"
    },
    {
      "sha": "1544b7b483377849f29c8c6935f9c6d25f401220",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -853,7 +853,7 @@ bfd_arch_list (void)\n   const char **name_ptr;\n   const char **name_list;\n   const bfd_arch_info_type * const *app;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* Determine the number of architectures.  */\n   vec_length = 0;"
    },
    {
      "sha": "574cebd8de2531e4aebe3fd76e2264463eed1113",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2169,7 +2169,7 @@ bfd_record_phdr (bfd *abfd,\n \t\t asection **secs)\n {\n   struct elf_segment_map *m, **pm;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (bfd_get_flavour (abfd) != bfd_target_elf_flavour)\n     return TRUE;"
    },
    {
      "sha": "0683e414d6eb1c8008a7171f59d2396a87a03439",
      "filename": "bfd/binary.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/binary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/binary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/binary.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -151,7 +151,7 @@ binary_canonicalize_symtab (bfd *abfd, asymbol **alocation)\n   asection *sec = (asection *) abfd->tdata.any;\n   asymbol *syms;\n   unsigned int i;\n-  bfd_size_type amt = BIN_SYMS * sizeof (asymbol);\n+  size_t amt = BIN_SYMS * sizeof (asymbol);\n \n   syms = (asymbol *) bfd_alloc (abfd, amt);\n   if (syms == NULL)"
    },
    {
      "sha": "da18d2edbff385fb19d7fd9395af837cdd2c7682",
      "filename": "bfd/cisco-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/cisco-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/cisco-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cisco-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -92,7 +92,7 @@ cisco_core_file_validate (bfd *abfd, int crash_info_loc)\n   unsigned int rambase;\n   sec_ptr asect;\n   struct stat statbuf;\n-  bfd_size_type amt;\n+  size_t amt;\n   flagword flags;\n \n   if (bfd_seek (abfd, (file_ptr) crash_info_loc, SEEK_SET) != 0)"
    },
    {
      "sha": "b7ebe96a59ba1a7d3e029187a0012adf1796b75f",
      "filename": "bfd/coff-arm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-arm.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -924,7 +924,7 @@ static struct bfd_link_hash_table *\n coff_arm_link_hash_table_create (bfd * abfd)\n {\n   struct coff_arm_link_hash_table * ret;\n-  bfd_size_type amt = sizeof (struct coff_arm_link_hash_table);\n+  size_t amt = sizeof (struct coff_arm_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -1026,7 +1026,7 @@ find_thumb_glue (struct bfd_link_info *info,\n {\n   char *tmp_name;\n   struct coff_link_hash_entry *myh;\n-  bfd_size_type amt = strlen (name) + strlen (THUMB2ARM_GLUE_ENTRY_NAME) + 1;\n+  size_t amt = strlen (name) + strlen (THUMB2ARM_GLUE_ENTRY_NAME) + 1;\n \n   tmp_name = bfd_malloc (amt);\n \n@@ -1055,7 +1055,7 @@ find_arm_glue (struct bfd_link_info *info,\n {\n   char *tmp_name;\n   struct coff_link_hash_entry * myh;\n-  bfd_size_type amt = strlen (name) + strlen (ARM2THUMB_GLUE_ENTRY_NAME) + 1;\n+  size_t amt = strlen (name) + strlen (ARM2THUMB_GLUE_ENTRY_NAME) + 1;\n \n   tmp_name = bfd_malloc (amt);\n \n@@ -1840,7 +1840,7 @@ record_arm_to_thumb_glue (struct bfd_link_info *\tinfo,\n   struct bfd_link_hash_entry *\t    bh;\n   struct coff_arm_link_hash_table * globals;\n   bfd_vma val;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   globals = coff_arm_hash_table (info);\n \n@@ -1896,7 +1896,7 @@ record_thumb_to_arm_glue (struct bfd_link_info *\tinfo,\n   struct bfd_link_hash_entry *\t     bh;\n   struct coff_arm_link_hash_table *  globals;\n   bfd_vma val;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   globals = coff_arm_hash_table (info);\n "
    },
    {
      "sha": "bc7118fe051926bf2b63d3b17dc42f3f4eca7d22",
      "filename": "bfd/coff-ppc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-ppc.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -179,7 +179,7 @@ static struct bfd_link_hash_table *\n ppc_coff_link_hash_table_create (bfd *abfd)\n {\n   struct ppc_coff_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct ppc_coff_link_hash_table);\n+  size_t amt = sizeof (struct ppc_coff_link_hash_table);\n \n   ret = (struct ppc_coff_link_hash_table *) bfd_malloc (amt);\n   if (ret == NULL)\n@@ -771,7 +771,7 @@ record_toc (asection *toc_section,\n \t    const char *name)\n {\n   /* Add this entry to our toc addr-offset-name list.  */\n-  bfd_size_type amt = sizeof (struct list_ele);\n+  size_t amt = sizeof (struct list_ele);\n   struct list_ele *t = (struct list_ele *) bfd_malloc (amt);\n \n   if (t == NULL)\n@@ -1513,7 +1513,6 @@ ppc_allocate_toc_section (struct bfd_link_info *info ATTRIBUTE_UNUSED)\n {\n   asection *s;\n   bfd_byte *foo;\n-  bfd_size_type amt;\n   static char test_char = '1';\n \n   if ( global_toc_size == 0 ) /* FIXME: does this get me in trouble?  */\n@@ -1528,8 +1527,7 @@ ppc_allocate_toc_section (struct bfd_link_info *info ATTRIBUTE_UNUSED)\n     /* No toc section? Something is very wrong.  */\n     abort ();\n \n-  amt = global_toc_size;\n-  foo = (bfd_byte *) bfd_alloc (bfd_of_toc_owner, amt);\n+  foo = (bfd_byte *) bfd_alloc (bfd_of_toc_owner, global_toc_size);\n   memset(foo, test_char, (size_t) global_toc_size);\n \n   s->size = global_toc_size;"
    },
    {
      "sha": "86b4763a10fb0669be524b10875a05d44e853bea",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -323,7 +323,7 @@ bfd_boolean\n _bfd_xcoff_mkobject (bfd *abfd)\n {\n   coff_data_type *coff;\n-  bfd_size_type amt = sizeof (struct xcoff_tdata);\n+  size_t amt = sizeof (struct xcoff_tdata);\n \n   abfd->tdata.xcoff_obj_data = (struct xcoff_tdata *) bfd_zalloc (abfd, amt);\n   if (abfd->tdata.xcoff_obj_data == NULL)\n@@ -1389,7 +1389,7 @@ _bfd_xcoff_archive_p (bfd *abfd)\n {\n   struct artdata *tdata_hold;\n   char magic[SXCOFFARMAG];\n-  bfd_size_type amt = SXCOFFARMAG;\n+  size_t amt = SXCOFFARMAG;\n \n   if (bfd_bread (magic, amt, abfd) != amt)\n     {"
    },
    {
      "sha": "986cd4d1d04f33d0f61847e22689670f4a3dce3a",
      "filename": "bfd/coff-sh.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-sh.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -722,7 +722,7 @@ sh_relax_section (bfd *abfd,\n \n   if (coff_section_data (abfd, sec) == NULL)\n     {\n-      bfd_size_type amt = sizeof (struct coff_section_tdata);\n+      size_t amt = sizeof (struct coff_section_tdata);\n       sec->used_by_bfd = bfd_zalloc (abfd, amt);\n       if (sec->used_by_bfd == NULL)\n \treturn FALSE;"
    },
    {
      "sha": "d39fe4c590018a2ba4b2052d4497d316128f410f",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2000,7 +2000,7 @@ xcoff64_archive_p (bfd *abfd)\n   char magic[SXCOFFARMAG];\n   /* This is the new format.  */\n   struct xcoff_ar_file_hdr_big hdr;\n-  bfd_size_type amt = SXCOFFARMAG;\n+  size_t amt = SXCOFFARMAG;\n \n   if (bfd_bread (magic, amt, abfd) != amt)\n     {"
    },
    {
      "sha": "3311b9f813050b256c9db387839bb4fa317a2f7a",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1109,7 +1109,7 @@ handle_COMDAT (bfd * abfd,\n \t\t drop through from the above).  */\n \t      {\n \t\tchar *newname;\n-\t\tbfd_size_type amt;\n+\t\tsize_t amt;\n \n \t\t/* This must the second symbol with the\n \t\t   section #.  It is the actual symbol name.\n@@ -1752,7 +1752,7 @@ static bfd_boolean\n coff_new_section_hook (bfd * abfd, asection * section)\n {\n   combined_entry_type *native;\n-  bfd_size_type amt;\n+  size_t amt;\n   unsigned char sclass = C_STAT;\n \n   section->alignment_power = COFF_DEFAULT_SECTION_ALIGNMENT_POWER;\n@@ -1843,7 +1843,7 @@ coff_set_alignment_hook (bfd * abfd ATTRIBUTE_UNUSED,\n \t\t\t void * scnhdr)\n {\n   struct internal_scnhdr *hdr = (struct internal_scnhdr *) scnhdr;\n-  bfd_size_type amt;\n+  size_t amt;\n   unsigned int alignment_power_const\n     = hdr->s_flags & IMAGE_SCN_ALIGN_POWER_BIT_MASK;\n \n@@ -1972,7 +1972,7 @@ static bfd_boolean\n coff_mkobject (bfd * abfd)\n {\n   coff_data_type *coff;\n-  bfd_size_type amt = sizeof (coff_data_type);\n+  size_t amt = sizeof (coff_data_type);\n \n   abfd->tdata.coff_obj_data = bfd_zalloc (abfd, amt);\n   if (abfd->tdata.coff_obj_data == NULL)\n@@ -3088,15 +3088,15 @@ coff_compute_section_file_positions (bfd * abfd)\n \t page size too, and remember both sizes.  */\n       if (coff_section_data (abfd, current) == NULL)\n \t{\n-\t  bfd_size_type amt = sizeof (struct coff_section_tdata);\n+\t  size_t amt = sizeof (struct coff_section_tdata);\n \n \t  current->used_by_bfd = bfd_zalloc (abfd, amt);\n \t  if (current->used_by_bfd == NULL)\n \t    return FALSE;\n \t}\n       if (pei_section_data (abfd, current) == NULL)\n \t{\n-\t  bfd_size_type amt = sizeof (struct pei_section_tdata);\n+\t  size_t amt = sizeof (struct pei_section_tdata);\n \n \t  coff_section_data (abfd, current)->tdata = bfd_zalloc (abfd, amt);\n \t  if (coff_section_data (abfd, current)->tdata == NULL)"
    },
    {
      "sha": "cf115d48c85e80449c3b2d25061075fc549646c8",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2025,7 +2025,7 @@ coff_get_reloc_upper_bound (bfd *abfd, sec_ptr asect)\n asymbol *\n coff_make_empty_symbol (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (coff_symbol_type);\n+  size_t amt = sizeof (coff_symbol_type);\n   coff_symbol_type *new_symbol = (coff_symbol_type *) bfd_zalloc (abfd, amt);\n \n   if (new_symbol == NULL)\n@@ -2046,7 +2046,7 @@ coff_bfd_make_debug_symbol (bfd *abfd,\n \t\t\t    void * ptr ATTRIBUTE_UNUSED,\n \t\t\t    unsigned long sz ATTRIBUTE_UNUSED)\n {\n-  bfd_size_type amt = sizeof (coff_symbol_type);\n+  size_t amt = sizeof (coff_symbol_type);\n   coff_symbol_type *new_symbol = (coff_symbol_type *) bfd_alloc (abfd, amt);\n \n   if (new_symbol == NULL)\n@@ -2271,7 +2271,7 @@ coff_find_nearest_line_with_names (bfd *abfd,\n   combined_entry_type *pend;\n   alent *l;\n   struct coff_section_tdata *sec_data;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* Before looking through the symbol table, try to use a .stab\n      section to find the information.  */\n@@ -2594,7 +2594,7 @@ bfd_coff_set_symbol_class (bfd *\t abfd,\n \t coff_write_alien_symbol().  */\n \n       combined_entry_type * native;\n-      bfd_size_type amt = sizeof (* native);\n+      size_t amt = sizeof (* native);\n \n       native = (combined_entry_type *) bfd_zalloc (abfd, amt);\n       if (native == NULL)"
    },
    {
      "sha": "e52f543ee6e66ec8afd2724ffdb3e9690d2a1faf",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -109,7 +109,7 @@ struct bfd_link_hash_table *\n _bfd_coff_link_hash_table_create (bfd *abfd)\n {\n   struct coff_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct coff_link_hash_table);\n+  size_t amt = sizeof (struct coff_link_hash_table);\n \n   ret = (struct coff_link_hash_table *) bfd_malloc (amt);\n   if (ret == NULL)\n@@ -1647,7 +1647,7 @@ _bfd_coff_link_input_bfd (struct coff_final_link_info *flaginfo, bfd *input_bfd)\n \t  struct coff_debug_merge_element **epp;\n \t  bfd_byte *esl, *eslend;\n \t  struct internal_syment *islp;\n-\t  bfd_size_type amt;\n+\t  size_t amt;\n \n \t  name = _bfd_coff_internal_syment_name (input_bfd, &isym, buf);\n \t  if (name == NULL)"
    },
    {
      "sha": "7ff80f336a7ac409d77d3ca17e04f5bcffd573ab",
      "filename": "bfd/dwarf1.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/dwarf1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/dwarf1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf1.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -140,7 +140,7 @@ struct linenumber\n static struct dwarf1_unit*\n alloc_dwarf1_unit (struct dwarf1_debug* stash)\n {\n-  bfd_size_type amt = sizeof (struct dwarf1_unit);\n+  size_t amt = sizeof (struct dwarf1_unit);\n \n   struct dwarf1_unit* x = (struct dwarf1_unit *) bfd_zalloc (stash->abfd, amt);\n   if (x)\n@@ -158,7 +158,7 @@ alloc_dwarf1_unit (struct dwarf1_debug* stash)\n static struct dwarf1_func *\n alloc_dwarf1_func (struct dwarf1_debug* stash, struct dwarf1_unit* aUnit)\n {\n-  bfd_size_type amt = sizeof (struct dwarf1_func);\n+  size_t amt = sizeof (struct dwarf1_func);\n \n   struct dwarf1_func* x = (struct dwarf1_func *) bfd_zalloc (stash->abfd, amt);\n   if (x)"
    },
    {
      "sha": "cd7aa286eba53ba5180605ff6689cb4b67dfe0da",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 22,
      "deletions": 22,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -995,7 +995,7 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash,\n   struct abbrev_info *cur_abbrev;\n   unsigned int abbrev_number, bytes_read, abbrev_name;\n   unsigned int abbrev_form, hash_number;\n-  bfd_size_type amt;\n+  size_t amt;\n   void **slot;\n   struct abbrev_offset_entry ent = { offset, NULL };\n \n@@ -1158,7 +1158,7 @@ read_attribute_value (struct attribute *  attr,\n   bfd *abfd = unit->abfd;\n   unsigned int bytes_read;\n   struct dwarf_block *blk;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (info_ptr >= info_ptr_end && form != DW_FORM_flag_present)\n     {\n@@ -1513,7 +1513,7 @@ add_line_info (struct line_info_table *table,\n \t       unsigned int discriminator,\n \t       int end_sequence)\n {\n-  bfd_size_type amt = sizeof (struct line_info);\n+  size_t amt = sizeof (struct line_info);\n   struct line_sequence* seq = table->sequences;\n   struct line_info* info = (struct line_info *) bfd_alloc (table->abfd, amt);\n \n@@ -1782,11 +1782,11 @@ static bfd_boolean\n build_line_info_table (struct line_info_table *  table,\n \t\t       struct line_sequence *    seq)\n {\n-  bfd_size_type      amt;\n-  struct line_info** line_info_lookup;\n-  struct line_info*  each_line;\n-  unsigned int       num_lines;\n-  unsigned int       line_index;\n+  size_t amt;\n+  struct line_info **line_info_lookup;\n+  struct line_info *each_line;\n+  unsigned int num_lines;\n+  unsigned int line_index;\n \n   if (seq->line_info_lookup != NULL)\n     return TRUE;\n@@ -1824,12 +1824,12 @@ build_line_info_table (struct line_info_table *  table,\n static bfd_boolean\n sort_line_sequences (struct line_info_table* table)\n {\n-  bfd_size_type\t\t amt;\n-  struct line_sequence*\t sequences;\n-  struct line_sequence*\t seq;\n-  unsigned int\t\t n = 0;\n-  unsigned int\t\t num_sequences = table->num_sequences;\n-  bfd_vma\t\t last_high_pc;\n+  size_t amt;\n+  struct line_sequence *sequences;\n+  struct line_sequence *seq;\n+  unsigned int n = 0;\n+  unsigned int num_sequences = table->num_sequences;\n+  bfd_vma last_high_pc;\n \n   if (num_sequences == 0)\n     return TRUE;\n@@ -1897,7 +1897,7 @@ line_info_add_include_dir (struct line_info_table *table, char *cur_dir)\n   if ((table->num_dirs % DIR_ALLOC_CHUNK) == 0)\n     {\n       char **tmp;\n-      bfd_size_type amt;\n+      size_t amt;\n \n       amt = table->num_dirs + DIR_ALLOC_CHUNK;\n       amt *= sizeof (char *);\n@@ -1931,7 +1931,7 @@ line_info_add_file_name (struct line_info_table *table, char *cur_file,\n   if ((table->num_files % FILE_ALLOC_CHUNK) == 0)\n     {\n       struct fileinfo *tmp;\n-      bfd_size_type amt;\n+      size_t amt;\n \n       amt = table->num_files + FILE_ALLOC_CHUNK;\n       amt *= sizeof (struct fileinfo);\n@@ -2091,7 +2091,7 @@ decode_line_info (struct comp_unit *unit)\n   char *cur_file, *cur_dir;\n   unsigned char op_code, extended_op, adj_opcode;\n   unsigned int exop_len;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (unit->line_offset == 0 && file->line_table)\n     return file->line_table;\n@@ -3226,7 +3226,7 @@ scan_unit_for_symbols (struct comp_unit *unit)\n \t  || abbrev->tag == DW_TAG_entry_point\n \t  || abbrev->tag == DW_TAG_inlined_subroutine)\n \t{\n-\t  bfd_size_type amt = sizeof (struct funcinfo);\n+\t  size_t amt = sizeof (struct funcinfo);\n \t  func = (struct funcinfo *) bfd_zalloc (abfd, amt);\n \t  if (func == NULL)\n \t    goto fail;\n@@ -3250,7 +3250,7 @@ scan_unit_for_symbols (struct comp_unit *unit)\n \t  func = NULL;\n \t  if (abbrev->tag == DW_TAG_variable)\n \t    {\n-\t      bfd_size_type amt = sizeof (struct varinfo);\n+\t      size_t amt = sizeof (struct varinfo);\n \t      var = (struct varinfo *) bfd_zalloc (abfd, amt);\n \t      if (var == NULL)\n \t\tgoto fail;\n@@ -3469,7 +3469,7 @@ parse_comp_unit (struct dwarf2_debug *stash,\n   struct abbrev_info *abbrev;\n   struct attribute attr;\n   bfd_byte *end_ptr = info_ptr + unit_length;\n-  bfd_size_type amt;\n+  size_t amt;\n   bfd_vma low_pc = 0;\n   bfd_vma high_pc = 0;\n   bfd *abfd = file->bfd_ptr;\n@@ -4084,7 +4084,7 @@ place_sections (bfd *orig_bfd, struct dwarf2_debug *stash)\n   else\n     {\n       bfd_vma last_vma = 0, last_dwarf = 0;\n-      bfd_size_type amt = i * sizeof (struct adjusted_section);\n+      size_t amt = i * sizeof (struct adjusted_section);\n \n       p = (struct adjusted_section *) bfd_malloc (amt);\n       if (p == NULL)\n@@ -4452,7 +4452,7 @@ _bfd_dwarf2_slurp_debug_info (bfd *abfd, bfd *debug_bfd,\n \t\t\t      void **pinfo,\n \t\t\t      bfd_boolean do_place)\n {\n-  bfd_size_type amt = sizeof (struct dwarf2_debug);\n+  size_t amt = sizeof (struct dwarf2_debug);\n   bfd_size_type total_size;\n   asection *msec;\n   struct dwarf2_debug *stash = (struct dwarf2_debug *) *pinfo;"
    },
    {
      "sha": "e8ccbd45df7a55bbd4abd6c6083345b4db83007a",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -87,7 +87,7 @@ static asection bfd_debug_section =\n bfd_boolean\n _bfd_ecoff_mkobject (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (ecoff_data_type);\n+  size_t amt = sizeof (ecoff_data_type);\n \n   abfd->tdata.ecoff_obj_data = (struct ecoff_tdata *) bfd_zalloc (abfd, amt);\n   if (abfd->tdata.ecoff_obj_data == NULL)\n@@ -650,7 +650,7 @@ asymbol *\n _bfd_ecoff_make_empty_symbol (bfd *abfd)\n {\n   ecoff_symbol_type *new_symbol;\n-  bfd_size_type amt = sizeof (ecoff_symbol_type);\n+  size_t amt = sizeof (ecoff_symbol_type);\n \n   new_symbol = (ecoff_symbol_type *) bfd_zalloc (abfd, amt);\n   if (new_symbol == NULL)\n@@ -1762,7 +1762,7 @@ _bfd_ecoff_find_nearest_line (bfd *abfd,\n \n   if (ecoff_data (abfd)->find_line_info == NULL)\n     {\n-      bfd_size_type amt = sizeof (struct ecoff_find_line);\n+      size_t amt = sizeof (struct ecoff_find_line);\n \n       ecoff_data (abfd)->find_line_info =\n \t  (struct ecoff_find_line *) bfd_zalloc (abfd, amt);\n@@ -3230,7 +3230,7 @@ struct bfd_link_hash_table *\n _bfd_ecoff_bfd_link_hash_table_create (bfd *abfd)\n {\n   struct ecoff_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct ecoff_link_hash_table);\n+  size_t amt = sizeof (struct ecoff_link_hash_table);\n \n   ret = (struct ecoff_link_hash_table *) bfd_malloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "ba2bbbc868a78e095025725cc297e9c4df662d6d",
      "filename": "bfd/ecofflink.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ecofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ecofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecofflink.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -467,7 +467,7 @@ bfd_ecoff_debug_init (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t\t      struct bfd_link_info *info)\n {\n   struct accumulate *ainfo;\n-  bfd_size_type amt = sizeof (struct accumulate);\n+  size_t amt = sizeof (struct accumulate);\n \n   ainfo = (struct accumulate *) bfd_malloc (amt);\n   if (!ainfo)"
    },
    {
      "sha": "1e10c5c851285b99012e1e3fbde26b4cf1d33291",
      "filename": "bfd/elf-hppa.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf-hppa.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf-hppa.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-hppa.h?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -754,7 +754,7 @@ _bfd_elf_hppa_gen_reloc_type (bfd *abfd,\n {\n   elf_hppa_reloc_type *finaltype;\n   elf_hppa_reloc_type **final_types;\n-  bfd_size_type amt = sizeof (elf_hppa_reloc_type *) * 2;\n+  size_t amt = sizeof (elf_hppa_reloc_type *) * 2;\n \n   /* Allocate slots for the BFD relocation.  */\n   final_types = bfd_alloc (abfd, amt);"
    },
    {
      "sha": "b15af60b978525fa8c5e5504e54215d531f8d1af",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2743,7 +2743,7 @@ mn10300_elf_relax_section (bfd *abfd,\n \t\t\t  /* A local symbol.  */\n \t\t\t  Elf_Internal_Sym *isym;\n \t\t\t  struct elf_link_hash_table *elftab;\n-\t\t\t  bfd_size_type amt;\n+\t\t\t  size_t amt;\n \n \t\t\t  isym = isymbuf + r_index;\n \t\t\t  if (isym->st_shndx == SHN_UNDEF)\n@@ -2844,7 +2844,7 @@ mn10300_elf_relax_section (bfd *abfd,\n \t\t\t  && ELF_ST_TYPE (isym->st_info) == STT_FUNC)\n \t\t\t{\n \t\t\t  struct elf_link_hash_table *elftab;\n-\t\t\t  bfd_size_type amt;\n+\t\t\t  size_t amt;\n \t\t\t  struct elf_link_hash_entry **lhashes = hashes;\n \n \t\t\t  /* Skip a local symbol if it aliases a\n@@ -3069,7 +3069,7 @@ mn10300_elf_relax_section (bfd *abfd,\n \t\t  const char *sym_name;\n \t\t  char *new_name;\n \t\t  struct elf_link_hash_table *elftab;\n-\t\t  bfd_size_type amt;\n+\t\t  size_t amt;\n \n \t\t  if (isym->st_shndx != sec_shndx)\n \t\t    continue;\n@@ -4602,7 +4602,7 @@ static struct bfd_link_hash_table *\n elf32_mn10300_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_mn10300_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (* ret);\n+  size_t amt = sizeof (* ret);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "d3e50c76cf82597ded0c345c3d397949df56a024",
      "filename": "bfd/elf-strtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf-strtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf-strtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-strtab.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -95,7 +95,7 @@ struct elf_strtab_hash *\n _bfd_elf_strtab_init (void)\n {\n   struct elf_strtab_hash *table;\n-  bfd_size_type amt = sizeof (struct elf_strtab_hash);\n+  size_t amt = sizeof (struct elf_strtab_hash);\n \n   table = (struct elf_strtab_hash *) bfd_malloc (amt);\n   if (table == NULL)"
    },
    {
      "sha": "2e045a7f255d8ea390357bc9fb2ee205a0dc1141",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -4551,7 +4551,7 @@ make_mapping (bfd *abfd,\n   struct elf_segment_map *m;\n   unsigned int i;\n   asection **hdrpp;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   amt = sizeof (struct elf_segment_map) - sizeof (asection *);\n   amt += (to - from) * sizeof (asection *);\n@@ -7485,7 +7485,7 @@ copy_elf_program_header (bfd *ibfd, bfd *obfd)\n     {\n       asection *section;\n       unsigned int section_count;\n-      bfd_size_type amt;\n+      size_t amt;\n       Elf_Internal_Shdr *this_hdr;\n       asection *first_section = NULL;\n       asection *lowest_section;\n@@ -7507,7 +7507,7 @@ copy_elf_program_header (bfd *ibfd, bfd *obfd)\n       /* Allocate a segment map big enough to contain\n \t all of the sections we have selected.  */\n       amt = sizeof (struct elf_segment_map) - sizeof (asection *);\n-      amt += (bfd_size_type) section_count * sizeof (asection *);\n+      amt += section_count * sizeof (asection *);\n       map = (struct elf_segment_map *) bfd_zalloc (obfd, amt);\n       if (map == NULL)\n \treturn FALSE;"
    },
    {
      "sha": "a35dc9958d4bd8ca3a530f32acf6a574f0f0c546",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -4110,7 +4110,7 @@ static struct bfd_link_hash_table *\n elf32_arm_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_arm_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf32_arm_link_hash_table);\n+  size_t amt = sizeof (struct elf32_arm_link_hash_table);\n \n   ret = (struct elf32_arm_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -5304,7 +5304,7 @@ elf32_arm_setup_section_lists (bfd *output_bfd,\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf32_arm_link_hash_table *htab = elf32_arm_hash_table (info);\n \n   if (htab == NULL)\n@@ -15721,7 +15721,7 @@ elf32_arm_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  p = *head;\n \t  if (p == NULL || p->sec != sec)\n \t    {\n-\t      bfd_size_type amt = sizeof *p;\n+\t      size_t amt = sizeof *p;\n \n \t      p = (struct elf_dyn_relocs *) bfd_alloc (htab->root.dynobj, amt);\n \t      if (p == NULL)\n@@ -18577,7 +18577,7 @@ elf32_arm_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       _arm_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = (_arm_elf_section_data *) bfd_zalloc (abfd, amt);\n       if (sdata == NULL)"
    },
    {
      "sha": "2a6e743512d7d0e1123eed55b1dab88bff909060",
      "filename": "bfd/elf32-avr.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-avr.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -767,7 +767,7 @@ elf_avr_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       struct elf_avr_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)\n@@ -875,7 +875,7 @@ static struct bfd_link_hash_table *\n elf32_avr_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_avr_link_hash_table *htab;\n-  bfd_size_type amt = sizeof (*htab);\n+  size_t amt = sizeof (*htab);\n \n   htab = bfd_zmalloc (amt);\n   if (htab == NULL)\n@@ -3494,7 +3494,7 @@ elf32_avr_setup_section_lists (bfd *output_bfd,\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf32_avr_link_hash_table *htab = avr_link_hash_table (info);\n \n   if (htab == NULL || htab->no_stubs)\n@@ -3558,7 +3558,7 @@ get_local_syms (bfd *input_bfd, struct bfd_link_info *info)\n   unsigned int bfd_indx;\n   Elf_Internal_Sym *local_syms, **all_local_syms;\n   struct elf32_avr_link_hash_table *htab = avr_link_hash_table (info);\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (htab == NULL)\n     return -1;"
    },
    {
      "sha": "7ebd9192b663e19a14f88a519c97c1cc339dfd2d",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1728,7 +1728,7 @@ static struct bfd_link_hash_table *\n bfinfdpic_elf_link_hash_table_create (bfd *abfd)\n {\n   struct bfinfdpic_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct bfinfdpic_elf_link_hash_table);\n+  size_t amt = sizeof (struct bfinfdpic_elf_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -4842,7 +4842,7 @@ static struct bfd_link_hash_table *\n bfin_link_hash_table_create (bfd * abfd)\n {\n   struct bfin_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct bfin_link_hash_table);\n+  size_t amt = sizeof (struct bfin_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "6d1e66935c4c33dffe75ba1d7d972a7a60d54149",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1641,7 +1641,7 @@ static struct bfd_link_hash_table *\n elf32_cr16_link_hash_table_create (bfd *abfd)\n {\n   struct elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_link_hash_table);\n+  size_t amt = sizeof (struct elf_link_hash_table);\n \n   ret = (struct elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == (struct elf_link_hash_table *) NULL)"
    },
    {
      "sha": "bee7108684924e98b2fc5e83896cd43c06259b60",
      "filename": "bfd/elf32-cris.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cris.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -889,7 +889,7 @@ static struct bfd_link_hash_table *\n elf_cris_link_hash_table_create (bfd *abfd)\n {\n   struct elf_cris_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_cris_link_hash_table);\n+  size_t amt = sizeof (struct elf_cris_link_hash_table);\n \n   ret = ((struct elf_cris_link_hash_table *) bfd_zmalloc (amt));\n   if (ret == (struct elf_cris_link_hash_table *) NULL)"
    },
    {
      "sha": "f91d05bd60e62b3476b292c2de526d918b9d0369",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1500,7 +1500,7 @@ static struct bfd_link_hash_table *\n csky_elf_link_hash_table_create (bfd *abfd)\n {\n   struct csky_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct csky_elf_link_hash_table);\n+  size_t amt = sizeof (struct csky_elf_link_hash_table);\n \n   ret = (struct csky_elf_link_hash_table*) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -2712,7 +2712,7 @@ csky_elf_check_relocs (bfd * abfd,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));\n \t\t  if (p == NULL)\n@@ -3770,7 +3770,7 @@ elf32_csky_setup_section_lists (bfd *output_bfd,\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct csky_elf_link_hash_table *htab = csky_elf_hash_table (info);\n \n   if (!htab)"
    },
    {
      "sha": "056cc93055dac3d86a693b487b3d72b2bc9d4a6e",
      "filename": "bfd/elf32-frv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-frv.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -942,7 +942,7 @@ static struct bfd_link_hash_table *\n frvfdpic_elf_link_hash_table_create (bfd *abfd)\n {\n   struct frvfdpic_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct frvfdpic_elf_link_hash_table);\n+  size_t amt = sizeof (struct frvfdpic_elf_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "b1b0f8284c41f876e46bdc651f2bbe42bc07d76b",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -418,7 +418,7 @@ static struct bfd_link_hash_table *\n elf32_hppa_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_hppa_link_hash_table *htab;\n-  bfd_size_type amt = sizeof (*htab);\n+  size_t amt = sizeof (*htab);\n \n   htab = bfd_zmalloc (amt);\n   if (htab == NULL)\n@@ -2407,7 +2407,7 @@ elf32_hppa_setup_section_lists (bfd *output_bfd, struct bfd_link_info *info)\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf32_hppa_link_hash_table *htab = hppa_link_hash_table (info);\n \n   if (htab == NULL)\n@@ -2596,7 +2596,7 @@ get_local_syms (bfd *output_bfd, bfd *input_bfd, struct bfd_link_info *info)\n   /* We want to read in symbol extension records only once.  To do this\n      we need to read in the local symbols in parallel and save them for\n      later use; so hold pointers to the local symbols in an array.  */\n-  bfd_size_type amt = sizeof (Elf_Internal_Sym *) * htab->bfd_count;\n+  size_t amt = sizeof (Elf_Internal_Sym *) * htab->bfd_count;\n   all_local_syms = bfd_zmalloc (amt);\n   htab->all_local_syms = all_local_syms;\n   if (all_local_syms == NULL)"
    },
    {
      "sha": "88076b5a039044d64bb91a82a8f888895b8f0caf",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1875,7 +1875,7 @@ elf_i386_check_relocs (bfd *abfd,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = (struct elf_dyn_relocs *) bfd_alloc (htab->elf.dynobj,\n \t\t\t\t\t\t\t   amt);\n \t\t  if (p == NULL)"
    },
    {
      "sha": "82c4fa0eef7ec5e4d192d3aa3f20af7c7e6b8de9",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -132,7 +132,7 @@ static struct bfd_link_hash_table *\n lm32_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_lm32_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_lm32_link_hash_table);\n+  size_t amt = sizeof (struct elf_lm32_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "edc95b5d63a824edaae2c18400aedeb9c3eb0808",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1575,7 +1575,7 @@ static struct bfd_link_hash_table *\n m32r_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_m32r_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_m32r_link_hash_table);\n+  size_t amt = sizeof (struct elf_m32r_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -3775,7 +3775,7 @@ m32r_elf_check_relocs (bfd *abfd,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof (*p);\n+\t\t  size_t amt = sizeof (*p);\n \n \t\t  p = bfd_alloc (dynobj, amt);\n \t\t  if (p == NULL)"
    },
    {
      "sha": "56c5129577584adc587046763fb0106179b3636e",
      "filename": "bfd/elf32-m68hc1x.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-m68hc1x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-m68hc1x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc1x.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -77,7 +77,7 @@ struct m68hc11_elf_link_hash_table*\n m68hc11_elf_hash_table_create (bfd *abfd)\n {\n   struct m68hc11_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct m68hc11_elf_link_hash_table);\n+  size_t amt = sizeof (struct m68hc11_elf_link_hash_table);\n \n   ret = (struct m68hc11_elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == (struct m68hc11_elf_link_hash_table *) NULL)\n@@ -241,7 +241,7 @@ elf32_m68hc11_setup_section_lists (bfd *output_bfd, struct bfd_link_info *info)\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   asection *text_section;\n   struct m68hc11_elf_link_hash_table *htab;\n \n@@ -334,7 +334,7 @@ elf32_m68hc11_size_stubs (bfd *output_bfd, bfd *stub_bfd,\n   asection *section;\n   Elf_Internal_Sym *local_syms, **all_local_syms;\n   unsigned int bfd_indx, bfd_count;\n-  bfd_size_type amt;\n+  size_t amt;\n   asection *stub_sec;\n   struct m68hc11_elf_link_hash_table *htab = m68hc11_elf_hash_table (info);\n "
    },
    {
      "sha": "5ffede198223f3d4a35ae4da9fe60989c5b33507",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -971,7 +971,7 @@ static struct bfd_link_hash_table *\n elf_m68k_link_hash_table_create (bfd *abfd)\n {\n   struct elf_m68k_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_m68k_link_hash_table);\n+  size_t amt = sizeof (struct elf_m68k_link_hash_table);\n \n   ret = (struct elf_m68k_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == (struct elf_m68k_link_hash_table *) NULL)"
    },
    {
      "sha": "07e9856fa9060ffa33b2e473acc82f604df277c7",
      "filename": "bfd/elf32-metag.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-metag.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1021,7 +1021,7 @@ static struct bfd_link_hash_table *\n elf_metag_link_hash_table_create (bfd *abfd)\n {\n   struct elf_metag_link_hash_table *htab;\n-  bfd_size_type amt = sizeof (*htab);\n+  size_t amt = sizeof (*htab);\n \n   htab = bfd_zmalloc (amt);\n   if (htab == NULL)\n@@ -3562,7 +3562,7 @@ elf_metag_setup_section_lists (bfd *output_bfd, struct bfd_link_info *info)\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf_metag_link_hash_table *htab = metag_link_hash_table (info);\n \n   /* Count the number of input BFDs and find the top input section id.  */\n@@ -3741,7 +3741,7 @@ get_local_syms (bfd *output_bfd ATTRIBUTE_UNUSED, bfd *input_bfd,\n   /* We want to read in symbol extension records only once.  To do this\n      we need to read in the local symbols in parallel and save them for\n      later use; so hold pointers to the local symbols in an array.  */\n-  bfd_size_type amt = sizeof (Elf_Internal_Sym *) * htab->bfd_count;\n+  size_t amt = sizeof (Elf_Internal_Sym *) * htab->bfd_count;\n   all_local_syms = bfd_zmalloc (amt);\n   htab->all_local_syms = all_local_syms;\n   if (all_local_syms == NULL)"
    },
    {
      "sha": "bccb0afcf4fa70ccece75802571573dae74352ef",
      "filename": "bfd/elf32-microblaze.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-microblaze.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -803,7 +803,7 @@ static struct bfd_link_hash_table *\n microblaze_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_mb_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf32_mb_link_hash_table);\n+  size_t amt = sizeof (struct elf32_mb_link_hash_table);\n \n   ret = (struct elf32_mb_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -2551,7 +2551,7 @@ microblaze_elf_check_relocs (bfd * abfd,\n \t\tp = *head;\n \t\tif (p == NULL || p->sec != sec)\n \t\t  {\n-\t\t    bfd_size_type amt = sizeof *p;\n+\t\t    size_t amt = sizeof *p;\n \t\t    p = ((struct elf_dyn_relocs *)\n \t\t\t bfd_alloc (htab->elf.dynobj, amt));\n \t\t    if (p == NULL)"
    },
    {
      "sha": "2eaf0129156d7a1b8bcb5d88c310287327804b30",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -3684,7 +3684,7 @@ nds32_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_nds32_link_hash_table *ret;\n \n-  bfd_size_type amt = sizeof (struct elf_nds32_link_hash_table);\n+  size_t amt = sizeof (struct elf_nds32_link_hash_table);\n \n   ret = (struct elf_nds32_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -7442,7 +7442,7 @@ nds32_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof (*p);\n+\t\t  size_t amt = sizeof (*p);\n \t\t  p = (struct elf_dyn_relocs *) bfd_alloc (dynobj, amt);\n \t\t  if (p == NULL)\n \t\t    return FALSE;"
    },
    {
      "sha": "fd05fb0936122b3bcf5f836c81ad1bc20d88e2ed",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2228,7 +2228,7 @@ nios2_elf32_setup_section_lists (bfd *output_bfd, struct bfd_link_info *info)\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf32_nios2_link_hash_table *htab = elf32_nios2_hash_table (info);\n \n   /* Count the number of input BFDs and find the top input section id.  */\n@@ -2560,7 +2560,7 @@ get_local_syms (bfd *output_bfd ATTRIBUTE_UNUSED, bfd *input_bfd,\n   /* We want to read in symbol extension records only once.  To do this\n      we need to read in the local symbols in parallel and save them for\n      later use; so hold pointers to the local symbols in an array.  */\n-  bfd_size_type amt = sizeof (Elf_Internal_Sym *) * htab->bfd_count;\n+  size_t amt = sizeof (Elf_Internal_Sym *) * htab->bfd_count;\n   all_local_syms = bfd_zmalloc (amt);\n   htab->all_local_syms = all_local_syms;\n   if (all_local_syms == NULL)\n@@ -4943,7 +4943,7 @@ nios2_elf32_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->root.dynobj, amt));\n \t\t  if (p == NULL)\n@@ -5961,7 +5961,7 @@ static struct bfd_link_hash_table *\n nios2_elf32_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_nios2_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf32_nios2_link_hash_table);\n+  size_t amt = sizeof (struct elf32_nios2_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "41e61ac7e2fcec80071ce91415cf56883b16a696",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -970,7 +970,7 @@ static struct bfd_link_hash_table *\n or1k_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_or1k_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_or1k_link_hash_table);\n+  size_t amt = sizeof (struct elf_or1k_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -2118,7 +2118,7 @@ or1k_elf_check_relocs (bfd *abfd,\n \t\tp = *head;\n \t\tif (p == NULL || p->sec != sec)\n \t\t  {\n-\t\t    bfd_size_type amt = sizeof *p;\n+\t\t    size_t amt = sizeof *p;\n \t\t    p = ((struct elf_dyn_relocs *)\n \t\t\t bfd_alloc (htab->root.dynobj, amt));\n \t\t    if (p == NULL)"
    },
    {
      "sha": "3a42a4e10594f5a9b115af78b9a66b485102eafa",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1394,7 +1394,7 @@ ppc_elf_modify_segment_map (bfd *abfd,\n   for (m = elf_seg_map (abfd); m != NULL; m = m->next)\n     {\n       struct elf_segment_map *n;\n-      bfd_size_type amt;\n+      size_t amt;\n       unsigned int j, k;\n       unsigned int p_flags;\n \n@@ -2802,7 +2802,7 @@ update_plt_info (bfd *abfd, struct plt_entry **plist,\n       break;\n   if (ent == NULL)\n     {\n-      bfd_size_type amt = sizeof (*ent);\n+      size_t amt = sizeof (*ent);\n       ent = bfd_alloc (abfd, amt);\n       if (ent == NULL)\n \treturn FALSE;"
    },
    {
      "sha": "fdb28e71ecb1f219f6959305b7a21e8f4eaa9685",
      "filename": "bfd/elf32-pru.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pru.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1554,7 +1554,7 @@ static struct bfd_link_hash_table *\n pru_elf32_link_hash_table_create (bfd *abfd)\n {\n   struct elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_link_hash_table);\n+  size_t amt = sizeof (struct elf_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "9490b67b00b3dd38e9e6d5e82732f7d10ac90c4d",
      "filename": "bfd/elf32-s390.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-s390.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -803,7 +803,7 @@ static struct bfd_link_hash_table *\n elf_s390_link_hash_table_create (bfd *abfd)\n {\n   struct elf_s390_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_s390_link_hash_table);\n+  size_t amt = sizeof (struct elf_s390_link_hash_table);\n \n   ret = (struct elf_s390_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -1332,7 +1332,7 @@ elf_s390_check_relocs (bfd *abfd,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));"
    },
    {
      "sha": "8c2e3042ae84fb7566ddc14c71ee5e8de5233eff",
      "filename": "bfd/elf32-score.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1410,7 +1410,7 @@ score_elf_create_got_section (bfd *abfd,\n   struct elf_link_hash_entry *h;\n   struct bfd_link_hash_entry *bh;\n   struct score_got_info *g;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* This function may be called more than once.  */\n   s = score_elf_got_section (abfd, TRUE);\n@@ -4057,7 +4057,7 @@ static bfd_boolean\n s3_elf32_score_new_section_hook (bfd *abfd, asection *sec)\n {\n   struct _score_elf_section_data *sdata;\n-  bfd_size_type amt = sizeof (*sdata);\n+  size_t amt = sizeof (*sdata);\n \n   sdata = bfd_zalloc (abfd, amt);\n   if (sdata == NULL)\n@@ -4359,7 +4359,7 @@ static struct bfd_link_hash_table *\n elf32_score_link_hash_table_create (bfd *abfd)\n {\n   struct elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_link_hash_table);\n+  size_t amt = sizeof (struct elf_link_hash_table);\n \n   ret = (struct elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "752796c45be9037b4a52b2659259378dbe82f44a",
      "filename": "bfd/elf32-score7.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score7.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1268,7 +1268,7 @@ score_elf_create_got_section (bfd *abfd,\n   struct elf_link_hash_entry *h;\n   struct bfd_link_hash_entry *bh;\n   struct score_got_info *g;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* This function may be called more than once.  */\n   s = score_elf_got_section (abfd, TRUE);\n@@ -3862,7 +3862,7 @@ bfd_boolean\n s7_elf32_score_new_section_hook (bfd *abfd, asection *sec)\n {\n   struct _score_elf_section_data *sdata;\n-  bfd_size_type amt = sizeof (*sdata);\n+  size_t amt = sizeof (*sdata);\n \n   sdata = bfd_zalloc (abfd, amt);\n   if (sdata == NULL)"
    },
    {
      "sha": "9a00bde1d997b46011b3fb0b306a5d1ed2bc3f66",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2256,7 +2256,7 @@ static struct bfd_link_hash_table *\n sh_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_sh_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_sh_link_hash_table);\n+  size_t amt = sizeof (struct elf_sh_link_hash_table);\n \n   ret = (struct elf_sh_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == (struct elf_sh_link_hash_table *) NULL)\n@@ -5863,7 +5863,7 @@ sh_elf_check_relocs (bfd *abfd, struct bfd_link_info *info, asection *sec,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof (*p);\n+\t\t  size_t amt = sizeof (*p);\n \t\t  p = bfd_alloc (htab->root.dynobj, amt);\n \t\t  if (p == NULL)\n \t\t    return FALSE;"
    },
    {
      "sha": "95814d3abf1d40f57c5ad18f3193ed77615c7772",
      "filename": "bfd/elf32-tic6x.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-tic6x.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1595,7 +1595,7 @@ static struct bfd_link_hash_table *\n elf32_tic6x_link_hash_table_create (bfd *abfd)\n {\n   struct elf32_tic6x_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf32_tic6x_link_hash_table);\n+  size_t amt = sizeof (struct elf32_tic6x_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -2147,7 +2147,7 @@ elf32_tic6x_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       _tic6x_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = (_tic6x_elf_section_data *) bfd_zalloc (abfd, amt);\n       if (sdata == NULL)\n@@ -2945,7 +2945,7 @@ elf32_tic6x_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = bfd_alloc (htab->elf.dynobj, amt);\n \t\t  if (p == NULL)\n \t\t    return FALSE;"
    },
    {
      "sha": "f16f5851cf62f33f2311f0aa72209fcfe10bcc71",
      "filename": "bfd/elf32-tilepro.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-tilepro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-tilepro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-tilepro.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1189,7 +1189,7 @@ static struct bfd_link_hash_table *\n tilepro_elf_link_hash_table_create (bfd *abfd)\n {\n   struct tilepro_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct tilepro_elf_link_hash_table);\n+  size_t amt = sizeof (struct tilepro_elf_link_hash_table);\n \n   ret = (struct tilepro_elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -1788,7 +1788,7 @@ tilepro_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));\n \t\t  if (p == NULL)"
    },
    {
      "sha": "afebb2ab86f373fda5f7f93ff8339a0821dad612",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -230,7 +230,7 @@ static void\n remember_hi16s_reloc (bfd *abfd, bfd_vma addend, bfd_byte *address)\n {\n   hi16s_location * entry = NULL;\n-  bfd_size_type amt = sizeof (* free_hi16s);\n+  size_t amt = sizeof (* free_hi16s);\n \n   /* Find a free structure.  */\n   if (free_hi16s == NULL)"
    },
    {
      "sha": "fa84e0be19ae78349df667a2bffde8a0d8df0581",
      "filename": "bfd/elf32-vax.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-vax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-vax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-vax.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -470,7 +470,7 @@ static struct bfd_link_hash_table *\n elf_vax_link_hash_table_create (bfd *abfd)\n {\n   struct elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_link_hash_table);\n+  size_t amt = sizeof (struct elf_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "58927d620f3f0a5edfbcd55e2546c2d96df86771",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -686,7 +686,7 @@ elf_xtensa_link_hash_table_create (bfd *abfd)\n {\n   struct elf_link_hash_entry *tlsbase;\n   struct elf_xtensa_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_xtensa_link_hash_table);\n+  size_t amt = sizeof (struct elf_xtensa_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -6039,7 +6039,7 @@ elf_xtensa_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       struct elf_xtensa_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)"
    },
    {
      "sha": "96ce158b55adf6e53922727e9fef9ad50467085d",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -280,7 +280,7 @@ static struct bfd_link_hash_table *\n elf64_alpha_bfd_link_hash_table_create (bfd *abfd)\n {\n   struct alpha_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct alpha_elf_link_hash_table);\n+  size_t amt = sizeof (struct alpha_elf_link_hash_table);\n \n   ret = (struct alpha_elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == (struct alpha_elf_link_hash_table *) NULL)\n@@ -1724,7 +1724,7 @@ get_got_entry (bfd *abfd, struct alpha_elf_link_hash_entry *h,\n   if (!gotent)\n     {\n       int entry_size;\n-      bfd_size_type amt;\n+      size_t amt;\n \n       amt = sizeof (struct alpha_elf_got_entry);\n       gotent = (struct alpha_elf_got_entry *) bfd_alloc (abfd, amt);\n@@ -1787,7 +1787,6 @@ elf64_alpha_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   Elf_Internal_Shdr *symtab_hdr;\n   struct alpha_elf_link_hash_entry **sym_hashes;\n   const Elf_Internal_Rela *rel, *relend;\n-  bfd_size_type amt;\n \n   if (bfd_link_relocatable (info))\n     return TRUE;\n@@ -1990,7 +1989,7 @@ elf64_alpha_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t      if (!rent)\n \t\t{\n-\t\t  amt = sizeof (struct alpha_elf_reloc_entry);\n+\t\t  size_t amt = sizeof (struct alpha_elf_reloc_entry);\n \t\t  rent = (struct alpha_elf_reloc_entry *) bfd_alloc (abfd, amt);\n \t\t  if (!rent)\n \t\t    return FALSE;"
    },
    {
      "sha": "f0354438943f62f282053ed2c8ec8c9cbdcb7929",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -289,7 +289,7 @@ static struct bfd_link_hash_table*\n elf64_hppa_hash_table_create (bfd *abfd)\n {\n   struct elf64_hppa_link_hash_table *htab;\n-  bfd_size_type amt = sizeof (*htab);\n+  size_t amt = sizeof (*htab);\n \n   htab = bfd_zmalloc (amt);\n   if (htab == NULL)"
    },
    {
      "sha": "bdb038b23abc29f165a271d1be0a68130376d439",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -4374,7 +4374,7 @@ elf64_ia64_object_p (bfd *abfd)\n   flagword flags;\n   const char *name;\n   char *unwi_name, *unw_name;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (abfd->flags & DYNAMIC)\n     return TRUE;"
    },
    {
      "sha": "2c936badf541fab0d48b39d40e2c6827cd23959a",
      "filename": "bfd/elf64-mmix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mmix.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -831,7 +831,7 @@ mmix_elf_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       struct _mmix_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)"
    },
    {
      "sha": "1ea4c402e041c8c5b3a304a5b8c032a98eead42a",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2000,7 +2000,7 @@ ppc64_elf_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       struct _ppc64_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)\n@@ -3435,7 +3435,7 @@ static struct bfd_link_hash_table *\n ppc64_elf_link_hash_table_create (bfd *abfd)\n {\n   struct ppc_link_hash_table *htab;\n-  bfd_size_type amt = sizeof (struct ppc_link_hash_table);\n+  size_t amt = sizeof (struct ppc_link_hash_table);\n \n   htab = bfd_zmalloc (amt);\n   if (htab == NULL)\n@@ -4431,7 +4431,7 @@ update_local_sym_info (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n \t  break;\n       if (ent == NULL)\n \t{\n-\t  bfd_size_type amt = sizeof (*ent);\n+\t  size_t amt = sizeof (*ent);\n \t  ent = bfd_alloc (abfd, amt);\n \t  if (ent == NULL)\n \t    return FALSE;\n@@ -4463,7 +4463,7 @@ update_plt_info (bfd *abfd, struct plt_entry **plist, bfd_vma addend)\n       break;\n   if (ent == NULL)\n     {\n-      bfd_size_type amt = sizeof (*ent);\n+      size_t amt = sizeof (*ent);\n       ent = bfd_alloc (abfd, amt);\n       if (ent == NULL)\n \treturn FALSE;\n@@ -4741,7 +4741,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t  break;\n \t      if (ent == NULL)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof (*ent);\n+\t\t  size_t amt = sizeof (*ent);\n \t\t  ent = bfd_alloc (abfd, amt);\n \t\t  if (ent == NULL)\n \t\t    return FALSE;\n@@ -12216,7 +12216,7 @@ int\n ppc64_elf_setup_section_lists (struct bfd_link_info *info)\n {\n   unsigned int id;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct ppc_link_hash_table *htab = ppc_hash_table (info);\n \n   if (htab == NULL)"
    },
    {
      "sha": "70fb68a0a2d2fd45f095b4482aee918cd486613e",
      "filename": "bfd/elf64-s390.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-s390.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -722,7 +722,7 @@ static struct bfd_link_hash_table *\n elf_s390_link_hash_table_create (bfd *abfd)\n {\n   struct elf_s390_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_s390_link_hash_table);\n+  size_t amt = sizeof (struct elf_s390_link_hash_table);\n \n   ret = (struct elf_s390_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -1267,7 +1267,7 @@ elf_s390_check_relocs (bfd *abfd,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));\n \t\t  if (p == NULL)"
    },
    {
      "sha": "7776d0ec8a6a84652817d5c0645ba71f56eda8fc",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2294,7 +2294,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));"
    },
    {
      "sha": "f7b867ca7bee3f8ea87b05921cd7076ad2e349e4",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 19,
      "deletions": 23,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -747,7 +747,7 @@ bfd_elf_link_record_local_dynamic_symbol (struct bfd_link_info *info,\n \t\t\t\t\t  bfd *input_bfd,\n \t\t\t\t\t  long input_indx)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf_link_local_dynamic_entry *entry;\n   struct elf_link_hash_table *eht;\n   struct elf_strtab_hash *dynstr;\n@@ -2155,7 +2155,7 @@ _bfd_elf_link_find_version_dependencies (struct elf_link_hash_entry *h,\n   struct elf_find_verdep_info *rinfo = (struct elf_find_verdep_info *) data;\n   Elf_Internal_Verneed *t;\n   Elf_Internal_Vernaux *a;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* We only care about symbols defined in shared objects with version\n      information.  */\n@@ -3919,7 +3919,6 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n   const struct elf_backend_data *bed;\n   bfd_boolean add_needed;\n   struct elf_link_hash_table *htab;\n-  bfd_size_type amt;\n   void *alloc_mark = NULL;\n   struct bfd_hash_entry **old_table = NULL;\n   unsigned int old_size = 0;\n@@ -4127,8 +4126,8 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t  struct bfd_link_needed_list *n, **pn;\n \t\t  char *fnm, *anm;\n \t\t  unsigned int tagv = dyn.d_un.d_val;\n+\t\t  size_t amt = sizeof (struct bfd_link_needed_list);\n \n-\t\t  amt = sizeof (struct bfd_link_needed_list);\n \t\t  n = (struct bfd_link_needed_list *) bfd_alloc (abfd, amt);\n \t\t  fnm = bfd_elf_string_from_elf_section (abfd, shlink, tagv);\n \t\t  if (n == NULL || fnm == NULL)\n@@ -4150,8 +4149,8 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t  struct bfd_link_needed_list *n, **pn;\n \t\t  char *fnm, *anm;\n \t\t  unsigned int tagv = dyn.d_un.d_val;\n+\t\t  size_t amt = sizeof (struct bfd_link_needed_list);\n \n-\t\t  amt = sizeof (struct bfd_link_needed_list);\n \t\t  n = (struct bfd_link_needed_list *) bfd_alloc (abfd, amt);\n \t\t  fnm = bfd_elf_string_from_elf_section (abfd, shlink, tagv);\n \t\t  if (n == NULL || fnm == NULL)\n@@ -4176,8 +4175,8 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t  struct bfd_link_needed_list *n, **pn;\n \t\t  char *fnm, *anm;\n \t\t  unsigned int tagv = dyn.d_un.d_val;\n+\t\t  size_t amt = sizeof (struct bfd_link_needed_list);\n \n-\t\t  amt = sizeof (struct bfd_link_needed_list);\n \t\t  n = (struct bfd_link_needed_list *) bfd_alloc (abfd, amt);\n \t\t  fnm = bfd_elf_string_from_elf_section (abfd, shlink, tagv);\n \t\t  if (n == NULL || fnm == NULL)\n@@ -4311,8 +4310,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t{\n \t  /* We store a pointer to the hash table entry for each\n \t     external symbol.  */\n-\t  amt = extsymcount;\n-\t  amt *= sizeof (struct elf_link_hash_entry *);\n+\t  size_t amt = extsymcount * sizeof (struct elf_link_hash_entry *);\n \t  sym_hash = (struct elf_link_hash_entry **) bfd_zalloc (abfd, amt);\n \t  if (sym_hash == NULL)\n \t    goto error_free_sym;\n@@ -4331,17 +4329,16 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t to internal format.  */\n       if (elf_dynversym (abfd) != 0)\n \t{\n-\t  Elf_Internal_Shdr *versymhdr;\n+\t  Elf_Internal_Shdr *versymhdr = &elf_tdata (abfd)->dynversym_hdr;\n+\t  bfd_size_type amt = versymhdr->sh_size;\n \n-\t  versymhdr = &elf_tdata (abfd)->dynversym_hdr;\n-\t  amt = versymhdr->sh_size;\n \t  extversym = (Elf_External_Versym *) bfd_malloc (amt);\n \t  if (extversym == NULL)\n \t    goto error_free_sym;\n \t  if (bfd_seek (abfd, versymhdr->sh_offset, SEEK_SET) != 0\n \t      || bfd_bread (extversym, amt, abfd) != amt)\n \t    goto error_free_vers;\n-\t  extversym_end = extversym + (amt / sizeof (* extversym));\n+\t  extversym_end = extversym + amt / sizeof (*extversym);\n \t}\n     }\n \n@@ -5056,8 +5053,8 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t     aliases can be checked.  */\n \t\t  if (!nondeflt_vers)\n \t\t    {\n-\t\t      amt = ((isymend - isym + 1)\n-\t\t\t     * sizeof (struct elf_link_hash_entry *));\n+\t\t      size_t amt = ((isymend - isym + 1)\n+\t\t\t\t    * sizeof (struct elf_link_hash_entry *));\n \t\t      nondeflt_vers\n \t\t\t= (struct elf_link_hash_entry **) bfd_malloc (amt);\n \t\t      if (!nondeflt_vers)\n@@ -5312,6 +5309,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t{\n \t  struct elf_link_hash_entry *h = nondeflt_vers[cnt], *hi;\n \t  char *shortname, *p;\n+\t  size_t amt;\n \n \t  p = strchr (h->root.root.string, ELF_VER_CHR);\n \t  if (p == NULL\n@@ -5372,13 +5370,12 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n       struct elf_link_hash_entry **hppend;\n       struct elf_link_hash_entry **sorted_sym_hash;\n       struct elf_link_hash_entry *h;\n-      size_t sym_count;\n+      size_t sym_count, amt;\n \n       /* Since we have to search the whole symbol list for each weak\n \t defined symbol, search time for N weak defined symbols will be\n \t O(N^2). Binary search will cut it down to O(NlogN).  */\n-      amt = extsymcount;\n-      amt *= sizeof (*sorted_sym_hash);\n+      amt = extsymcount * sizeof (*sorted_sym_hash);\n       sorted_sym_hash = bfd_malloc (amt);\n       if (sorted_sym_hash == NULL)\n \tgoto error_return;\n@@ -5653,7 +5650,7 @@ elf_link_add_archive_symbols (bfd *abfd, struct bfd_link_info *info)\n   unsigned char *included = NULL;\n   carsym *symdefs;\n   bfd_boolean loop;\n-  bfd_size_type amt;\n+  size_t amt;\n   const struct elf_backend_data *bed;\n   struct elf_link_hash_entry * (*archive_symbol_lookup)\n     (bfd *, struct bfd_link_info *, const char *);\n@@ -5673,8 +5670,7 @@ elf_link_add_archive_symbols (bfd *abfd, struct bfd_link_info *info)\n   c = bfd_ardata (abfd)->symdef_count;\n   if (c == 0)\n     return TRUE;\n-  amt = c;\n-  amt *= sizeof (*included);\n+  amt = c * sizeof (*included);\n   included = (unsigned char *) bfd_zmalloc (amt);\n   if (included == NULL)\n     return FALSE;\n@@ -7692,7 +7688,7 @@ struct bfd_link_hash_table *\n _bfd_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_link_hash_table);\n+  size_t amt = sizeof (struct elf_link_hash_table);\n \n   ret = (struct elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -7846,7 +7842,7 @@ bfd_elf_get_bfd_needed_list (bfd *abfd,\n \t  const char *string;\n \t  struct bfd_link_needed_list *l;\n \t  unsigned int tagv = dyn.d_un.d_val;\n-\t  bfd_size_type amt;\n+\t  size_t amt;\n \n \t  string = bfd_elf_string_from_elf_section (abfd, shlink, tagv);\n \t  if (string == NULL)\n@@ -9548,7 +9544,7 @@ static bfd_boolean\n elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n {\n   struct elf_link_hash_table *hash_table = elf_hash_table (flinfo->info);\n-  bfd_size_type amt;\n+  size_t amt;\n   size_t i;\n   const struct elf_backend_data *bed;\n   bfd_byte *symbuf;"
    },
    {
      "sha": "2191b5d470dcdf2bf3b84c11a3f4f503ef838128",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2947,7 +2947,7 @@ static struct bfd_link_hash_table *\n elfNN_aarch64_link_hash_table_create (bfd *abfd)\n {\n   struct elf_aarch64_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct elf_aarch64_link_hash_table);\n+  size_t amt = sizeof (struct elf_aarch64_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -3456,7 +3456,7 @@ elfNN_aarch64_setup_section_lists (bfd *output_bfd,\n   unsigned int top_id, top_index;\n   asection *section;\n   asection **input_list, **list;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct elf_aarch64_link_hash_table *htab =\n     elf_aarch64_hash_table (info);\n \n@@ -7853,7 +7853,7 @@ elfNN_aarch64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    p = *head;\n \t    if (p == NULL || p->sec != sec)\n \t      {\n-\t\tbfd_size_type amt = sizeof *p;\n+\t\tsize_t amt = sizeof *p;\n \t\tp = ((struct elf_dyn_relocs *)\n \t\t     bfd_zalloc (htab->root.dynobj, amt));\n \t\tif (p == NULL)\n@@ -8419,7 +8419,7 @@ elfNN_aarch64_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       _aarch64_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)"
    },
    {
      "sha": "559889d87714f18a85537800d4b019313e5386d2",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -4883,7 +4883,7 @@ elfNN_ia64_object_p (bfd *abfd)\n   flagword flags;\n   const char *name;\n   char *unwi_name, *unw_name;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (abfd->flags & DYNAMIC)\n     return TRUE;"
    },
    {
      "sha": "d639501fc509ab7b65e28519f7343977c1d2108e",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -269,7 +269,7 @@ static struct bfd_link_hash_table *\n riscv_elf_link_hash_table_create (bfd *abfd)\n {\n   struct riscv_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct riscv_elf_link_hash_table);\n+  size_t amt = sizeof (struct riscv_elf_link_hash_table);\n \n   ret = (struct riscv_elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -724,7 +724,7 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));\n \t\t  if (p == NULL)"
    },
    {
      "sha": "a05c67154cff3ac54df54127113ac8280b8a7aef",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1374,7 +1374,7 @@ _bfd_mips_elf_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       struct _mips_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)\n@@ -7830,7 +7830,7 @@ _bfd_mips_elf_add_symbol_hook (bfd *abfd, struct bfd_link_info *info,\n \t{\n \t  asymbol *elf_text_symbol;\n \t  asection *elf_text_section;\n-\t  bfd_size_type amt = sizeof (asection);\n+\t  size_t amt = sizeof (asection);\n \n \t  elf_text_section = bfd_zalloc (abfd, amt);\n \t  if (elf_text_section == NULL)\n@@ -7871,7 +7871,7 @@ _bfd_mips_elf_add_symbol_hook (bfd *abfd, struct bfd_link_info *info,\n \t{\n \t  asymbol *elf_data_symbol;\n \t  asection *elf_data_section;\n-\t  bfd_size_type amt = sizeof (asection);\n+\t  size_t amt = sizeof (asection);\n \n \t  elf_data_section = bfd_zalloc (abfd, amt);\n \t  if (elf_data_section == NULL)\n@@ -12549,7 +12549,7 @@ _bfd_mips_elf_modify_segment_map (bfd *abfd,\n {\n   asection *s;\n   struct elf_segment_map *m, **pm;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* If there is a .reginfo section, we need a PT_MIPS_REGINFO\n      segment.  */\n@@ -12752,7 +12752,7 @@ _bfd_mips_elf_modify_segment_map (bfd *abfd,\n \t\t&& s->vma + s->size <= high)\n \t      ++c;\n \n-\t  amt = sizeof *n + (bfd_size_type) (c - 1) * sizeof (asection *);\n+\t  amt = sizeof *n - sizeof (asection *) + c * sizeof (asection *);\n \t  n = bfd_zalloc (abfd, amt);\n \t  if (n == NULL)\n \t    return FALSE;\n@@ -13203,7 +13203,7 @@ _bfd_mips_elf_set_section_contents (bfd *abfd, sec_ptr section,\n \n       if (elf_section_data (section) == NULL)\n \t{\n-\t  bfd_size_type amt = sizeof (struct bfd_elf_section_data);\n+\t  size_t amt = sizeof (struct bfd_elf_section_data);\n \t  section->used_by_bfd = bfd_zalloc (abfd, amt);\n \t  if (elf_section_data (section) == NULL)\n \t    return FALSE;\n@@ -14285,7 +14285,7 @@ struct bfd_link_hash_table *\n _bfd_mips_elf_link_hash_table_create (bfd *abfd)\n {\n   struct mips_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct mips_elf_link_hash_table);\n+  size_t amt = sizeof (struct mips_elf_link_hash_table);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "510e77cb66e176563c594716362c4e27a519712f",
      "filename": "bfd/elfxx-sparc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-sparc.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1136,7 +1136,7 @@ struct bfd_link_hash_table *\n _bfd_sparc_elf_link_hash_table_create (bfd *abfd)\n {\n   struct _bfd_sparc_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct _bfd_sparc_elf_link_hash_table);\n+  size_t amt = sizeof (struct _bfd_sparc_elf_link_hash_table);\n \n   ret = (struct _bfd_sparc_elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -1811,7 +1811,7 @@ _bfd_sparc_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));\n \t\t  if (p == NULL)\n@@ -2770,7 +2770,7 @@ _bfd_sparc_elf_new_section_hook (bfd *abfd, asection *sec)\n   if (!sec->used_by_bfd)\n     {\n       struct _bfd_sparc_elf_section_data *sdata;\n-      bfd_size_type amt = sizeof (*sdata);\n+      size_t amt = sizeof (*sdata);\n \n       sdata = bfd_zalloc (abfd, amt);\n       if (sdata == NULL)"
    },
    {
      "sha": "3f063d0929e4d0cb3a76faa86924240db4cb4574",
      "filename": "bfd/elfxx-tilegx.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-tilegx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-tilegx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-tilegx.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1369,7 +1369,7 @@ struct bfd_link_hash_table *\n tilegx_elf_link_hash_table_create (bfd *abfd)\n {\n   struct tilegx_elf_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct tilegx_elf_link_hash_table);\n+  size_t amt = sizeof (struct tilegx_elf_link_hash_table);\n \n   ret = (struct tilegx_elf_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -2031,7 +2031,7 @@ tilegx_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t      p = *head;\n \t      if (p == NULL || p->sec != sec)\n \t\t{\n-\t\t  bfd_size_type amt = sizeof *p;\n+\t\t  size_t amt = sizeof *p;\n \t\t  p = ((struct elf_dyn_relocs *)\n \t\t       bfd_alloc (htab->elf.dynobj, amt));\n \t\t  if (p == NULL)"
    },
    {
      "sha": "988e55747e36e786b364af053a13f6c4078e4f83",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -756,7 +756,7 @@ _bfd_x86_elf_link_hash_table_create (bfd *abfd)\n {\n   struct elf_x86_link_hash_table *ret;\n   const struct elf_backend_data *bed;\n-  bfd_size_type amt = sizeof (struct elf_x86_link_hash_table);\n+  size_t amt = sizeof (struct elf_x86_link_hash_table);\n \n   ret = (struct elf_x86_link_hash_table *) bfd_zmalloc (amt);\n   if (ret == NULL)"
    },
    {
      "sha": "659d407018b81e791dd1231ec38c39afbbd1c278",
      "filename": "bfd/format.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/format.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -236,7 +236,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \n   if (matching != NULL || *bfd_associated_vector != NULL)\n     {\n-      bfd_size_type amt;\n+      size_t amt;\n \n       amt = sizeof (*matching_vector) * 2 * _bfd_target_vector_entries;\n       matching_vector = (const bfd_target **) bfd_malloc (amt);"
    },
    {
      "sha": "56d18ac317945a8bdd2d17166cf32e7ec0c595bf",
      "filename": "bfd/hash.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/hash.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/hash.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/hash.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -762,7 +762,7 @@ struct bfd_strtab_hash *\n _bfd_stringtab_init (void)\n {\n   struct bfd_strtab_hash *table;\n-  bfd_size_type amt = sizeof (* table);\n+  size_t amt = sizeof (* table);\n \n   table = (struct bfd_strtab_hash *) bfd_malloc (amt);\n   if (table == NULL)"
    },
    {
      "sha": "958a84b50705899d7816161146238bd7064a41e5",
      "filename": "bfd/ihex.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ihex.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ihex.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ihex.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -357,7 +357,7 @@ ihex_scan (bfd *abfd)\n \t\t{\n \t\t  char secbuf[20];\n \t\t  char *secname;\n-\t\t  bfd_size_type amt;\n+\t\t  size_t amt;\n \t\t  flagword flags;\n \n \t\t  sprintf (secbuf, \".sec%d\", bfd_count_sections (abfd) + 1);"
    },
    {
      "sha": "7b214e0a0a3129ce19b0241ece61be35a1506efd",
      "filename": "bfd/irix-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/irix-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/irix-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/irix-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -172,7 +172,7 @@ irix_core_core_file_p (bfd *abfd)\n   int val;\n   struct coreout coreout;\n   struct idesc *idg, *idf, *ids;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   val = bfd_bread (&coreout, (bfd_size_type) sizeof coreout, abfd);\n   if (val != sizeof coreout)"
    },
    {
      "sha": "c523f8b5c649730c04cedbbe8cb8da0cd8805f86",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -536,7 +536,7 @@ bfd_wrapped_link_hash_lookup (bfd *abfd,\n \t\t\t      bfd_boolean copy,\n \t\t\t      bfd_boolean follow)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (info->wrap_hash != NULL)\n     {\n@@ -764,7 +764,7 @@ struct bfd_link_hash_table *\n _bfd_generic_link_hash_table_create (bfd *abfd)\n {\n   struct generic_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct generic_link_hash_table);\n+  size_t amt = sizeof (struct generic_link_hash_table);\n \n   ret = (struct generic_link_hash_table *) bfd_malloc (amt);\n   if (ret == NULL)\n@@ -2422,7 +2422,7 @@ _bfd_generic_reloc_link_order (bfd *abfd,\n struct bfd_link_order *\n bfd_new_link_order (bfd *abfd, asection *section)\n {\n-  bfd_size_type amt = sizeof (struct bfd_link_order);\n+  size_t amt = sizeof (struct bfd_link_order);\n   struct bfd_link_order *new_lo;\n \n   new_lo = (struct bfd_link_order *) bfd_zalloc (abfd, amt);"
    },
    {
      "sha": "ef47c8359c732de06799612924703bc0572f26b9",
      "filename": "bfd/lynx-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/lynx-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/lynx-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/lynx-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -94,7 +94,7 @@ lynx_core_file_p (bfd *abfd)\n   core_st_t *threadp;\n   int pagesize;\n   asection *newsect;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   pagesize = getpagesize ();\t/* Serious cross-target issue here...  This\n \t\t\t\t   really needs to come from a system-specific"
    },
    {
      "sha": "ae88fd6f74165017b92186e2e45f79a1ee6e0885",
      "filename": "bfd/netbsd-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/netbsd-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/netbsd-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/netbsd-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -60,7 +60,7 @@ netbsd_core_file_p (bfd *abfd)\n   asection *asect;\n   struct core core;\n   struct coreseg coreseg;\n-  bfd_size_type amt = sizeof core;\n+  size_t amt = sizeof core;\n \n   val = bfd_bread (&core, amt, abfd);\n   if (val != sizeof core)"
    },
    {
      "sha": "19cd4f2b75fbee8220c732aa3020abc5c3b4fbc2",
      "filename": "bfd/osf-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/osf-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/osf-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/osf-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -77,7 +77,7 @@ osf_core_core_file_p (bfd *abfd)\n   int i;\n   char *secname;\n   struct core_filehdr core_header;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   amt = sizeof core_header;\n   val = bfd_bread (& core_header, amt, abfd);"
    },
    {
      "sha": "cd14e87b962c39cfe651a4c4ce0f1dffe8d5faa3",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -459,7 +459,7 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n {\n   struct aout_data_struct *rawptr, *oldrawptr;\n   const bfd_target *result;\n-  bfd_size_type amt = sizeof (struct aout_data_struct);\n+  size_t amt = sizeof (struct aout_data_struct);\n \n   rawptr = bfd_zalloc (abfd, amt);\n   if (rawptr == NULL)\n@@ -647,7 +647,7 @@ bfd_boolean\n NAME (aout, mkobject) (bfd *abfd)\n {\n   struct aout_data_struct  *rawptr;\n-  bfd_size_type amt = sizeof (struct aout_data_struct);\n+  size_t amt = sizeof (struct aout_data_struct);\n \n   bfd_set_error (bfd_error_system_call);\n \n@@ -1413,7 +1413,7 @@ translate_to_native_sym_flags (bfd *abfd,\n asymbol *\n NAME (aout, make_empty_symbol) (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (aout_symbol_type);\n+  size_t amt = sizeof (aout_symbol_type);\n   aout_symbol_type *new_symbol_type = bfd_zalloc (abfd, amt);\n \n   if (!new_symbol_type)\n@@ -2443,7 +2443,7 @@ struct bfd_link_hash_table *\n NAME (aout, link_hash_table_create) (bfd *abfd)\n {\n   struct aout_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct aout_link_hash_table);\n+  size_t amt = sizeof (struct aout_link_hash_table);\n \n   ret = bfd_malloc (amt);\n   if (ret == NULL)\n@@ -2889,7 +2889,7 @@ aout_link_write_other_symbol (struct bfd_hash_entry *bh, void *data)\n   bfd_vma val;\n   struct external_nlist outsym;\n   bfd_size_type indx;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (h->root.type == bfd_link_hash_warning)\n     {"
    },
    {
      "sha": "e42d646552a0ca1e856e082256cd3d943b54ddf0",
      "filename": "bfd/peXXigen.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/peXXigen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/peXXigen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peXXigen.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -3138,15 +3138,15 @@ _bfd_XX_bfd_copy_private_section_data (bfd *ibfd,\n     {\n       if (coff_section_data (obfd, osec) == NULL)\n \t{\n-\t  bfd_size_type amt = sizeof (struct coff_section_tdata);\n+\t  size_t amt = sizeof (struct coff_section_tdata);\n \t  osec->used_by_bfd = bfd_zalloc (obfd, amt);\n \t  if (osec->used_by_bfd == NULL)\n \t    return FALSE;\n \t}\n \n       if (pei_section_data (obfd, osec) == NULL)\n \t{\n-\t  bfd_size_type amt = sizeof (struct pei_section_tdata);\n+\t  size_t amt = sizeof (struct pei_section_tdata);\n \t  coff_section_data (obfd, osec)->tdata = bfd_zalloc (obfd, amt);\n \t  if (coff_section_data (obfd, osec)->tdata == NULL)\n \t    return FALSE;"
    },
    {
      "sha": "c1bc81b169aae5fcdc0f5192ba2d8e478fb95bec",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -257,7 +257,7 @@ static bfd_boolean\n pe_mkobject (bfd * abfd)\n {\n   pe_data_type *pe;\n-  bfd_size_type amt = sizeof (pe_data_type);\n+  size_t amt = sizeof (pe_data_type);\n \n   abfd->tdata.pe_obj_data = (struct pe_tdata *) bfd_zalloc (abfd, amt);\n "
    },
    {
      "sha": "24f3e0655e523f3490fa7a16c9f72ebc3d64e250",
      "filename": "bfd/ppcboot.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ppcboot.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ppcboot.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ppcboot.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -102,7 +102,7 @@ ppcboot_mkobject (bfd *abfd)\n {\n   if (!ppcboot_get_tdata (abfd))\n     {\n-      bfd_size_type amt = sizeof (ppcboot_data_t);\n+      size_t amt = sizeof (ppcboot_data_t);\n       ppcboot_set_tdata (abfd, bfd_zalloc (abfd, amt));\n     }\n \n@@ -276,7 +276,7 @@ ppcboot_canonicalize_symtab (bfd *abfd, asymbol **alocation)\n   asection *sec = ppcboot_get_tdata (abfd)->sec;\n   asymbol *syms;\n   unsigned int i;\n-  bfd_size_type amt = PPCBOOT_SYMS * sizeof (asymbol);\n+  size_t amt = PPCBOOT_SYMS * sizeof (asymbol);\n \n   syms = (asymbol *) bfd_alloc (abfd, amt);\n   if (syms == NULL)"
    },
    {
      "sha": "48a9b1c669e9a02c4fc0cf9f673c0c8e75ee5603",
      "filename": "bfd/ptrace-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ptrace-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/ptrace-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ptrace-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -61,7 +61,7 @@ ptrace_unix_core_file_p (bfd *abfd)\n   int val;\n   struct ptrace_user u;\n   struct trad_core_struct *rawptr;\n-  bfd_size_type amt;\n+  size_t amt;\n   flagword flags;\n \n   val = bfd_bread ((void *)&u, (bfd_size_type) sizeof u, abfd);"
    },
    {
      "sha": "a9afbbacd9af3cf7467ed6627605211cd58d7424",
      "filename": "bfd/sco5-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/sco5-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/sco5-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/sco5-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -71,7 +71,7 @@ static struct user *\n read_uarea (bfd *abfd, int filepos)\n {\n   struct sco5_core_struct *rawptr;\n-  bfd_size_type amt = sizeof (struct sco5_core_struct);\n+  size_t amt = sizeof (struct sco5_core_struct);\n \n   rawptr = (struct sco5_core_struct *) bfd_zmalloc (amt);\n   if (rawptr == NULL)"
    },
    {
      "sha": "cbe970f59a066cfe8ec51e375f332df26a6babf9",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1425,7 +1425,7 @@ hppa_som_gen_reloc_type (bfd *abfd,\n       /* The difference of two symbols needs *very* special handling.  */\n       if (sym_diff)\n \t{\n-\t  bfd_size_type amt = sizeof (int);\n+\t  size_t amt = sizeof (int);\n \n \t  final_types[0] = bfd_alloc (abfd, amt);\n \t  final_types[1] = bfd_alloc (abfd, amt);\n@@ -1509,7 +1509,7 @@ hppa_som_gen_reloc_type (bfd *abfd,\n       /* The difference of two symbols needs *very* special handling.  */\n       if (sym_diff)\n \t{\n-\t  bfd_size_type amt = sizeof (int);\n+\t  size_t amt = sizeof (int);\n \n \t  final_types[0] = bfd_alloc (abfd, amt);\n \t  final_types[1] = bfd_alloc (abfd, amt);\n@@ -1548,7 +1548,7 @@ hppa_som_gen_reloc_type (bfd *abfd,\n \t/* If we have short and long pcrel modes, then generate the proper\n \t   mode selector, then the pcrel relocation.  Redundant selectors\n \t   will be eliminated as the relocs are sized and emitted.  */\n-\tbfd_size_type amt = sizeof (int);\n+\tsize_t amt = sizeof (int);\n \n \tfinal_types[0] = bfd_alloc (abfd, amt);\n \tif (!final_types[0])\n@@ -2393,7 +2393,7 @@ som_object_p (bfd *abfd)\n   unsigned long current_offset = 0;\n   struct som_external_lst_header ext_lst_header;\n   struct som_external_som_entry ext_som_entry;\n-  bfd_size_type amt;\n+  size_t amt;\n   unsigned int loc;\n #define ENTRY_SIZE sizeof (struct som_external_som_entry)\n \n@@ -2548,7 +2548,7 @@ som_prep_headers (bfd *abfd)\n {\n   struct som_header *file_hdr;\n   asection *section;\n-  bfd_size_type amt = sizeof (struct som_header);\n+  size_t amt = sizeof (struct som_header);\n \n   /* Make and attach a file header to the BFD.  */\n   file_hdr = bfd_zalloc (abfd, amt);\n@@ -2907,7 +2907,7 @@ som_write_fixups (bfd *abfd,\n   unsigned int subspace_reloc_size = 0;\n   unsigned int num_spaces = obj_som_file_hdr (abfd)->space_total;\n   asection *section = abfd->sections;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   memset (tmp_space, 0, SOM_TMP_BUFSIZE);\n   p = tmp_space;\n@@ -3313,7 +3313,7 @@ som_write_space_strings (bfd *abfd,\n   char *p = tmp_space;\n   unsigned int strings_size = 0;\n   asection *section;\n-  bfd_size_type amt;\n+  size_t amt;\n   bfd_size_type res;\n \n   if (tmp_space == NULL)\n@@ -3425,7 +3425,7 @@ som_write_symbol_strings (bfd *abfd,\n   char *tmp_space = bfd_malloc (tmp_space_size);\n   char *p = tmp_space;\n   unsigned int strings_size = 0;\n-  bfd_size_type amt;\n+  size_t amt;\n   bfd_size_type res;\n \n   if (tmp_space == NULL)\n@@ -3955,7 +3955,7 @@ som_finish_writing (bfd *abfd)\n   asection *section;\n   unsigned long current_offset;\n   unsigned int strings_size, total_reloc_size;\n-  bfd_size_type amt;\n+  size_t amt;\n   struct som_external_header ext_header;\n \n   /* We must set up the version identifier here as objcopy/strip copy\n@@ -4841,7 +4841,7 @@ som_canonicalize_symtab (bfd *abfd, asymbol **location)\n static asymbol *\n som_make_empty_symbol (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (som_symbol_type);\n+  size_t amt = sizeof (som_symbol_type);\n   som_symbol_type *new_symbol_type = bfd_zalloc (abfd, amt);\n \n   if (new_symbol_type == NULL)\n@@ -5371,7 +5371,7 @@ som_new_section_hook (bfd *abfd, asection *newsect)\n {\n   if (!newsect->used_by_bfd)\n     {\n-      bfd_size_type amt = sizeof (struct som_section_data_struct);\n+      size_t amt = sizeof (struct som_section_data_struct);\n \n       newsect->used_by_bfd = bfd_zalloc (abfd, amt);\n       if (!newsect->used_by_bfd)\n@@ -5417,7 +5417,7 @@ som_bfd_copy_private_section_data (bfd *ibfd,\n \t\t\t\t   bfd *obfd,\n \t\t\t\t   asection *osection)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* One day we may try to grok other private data.  */\n   if (ibfd->xvec->flavour != bfd_target_som_flavour\n@@ -5525,7 +5525,7 @@ bfd_som_set_section_attributes (asection *section,\n   /* Allocate memory to hold the magic information.  */\n   if (som_section_data (section)->copy_data == NULL)\n     {\n-      bfd_size_type amt = sizeof (struct som_copyable_section_data_struct);\n+      size_t amt = sizeof (struct som_copyable_section_data_struct);\n \n       som_section_data (section)->copy_data = bfd_zalloc (section->owner, amt);\n       if (som_section_data (section)->copy_data == NULL)\n@@ -5555,7 +5555,7 @@ bfd_som_set_subsection_attributes (asection *section,\n   /* Allocate memory to hold the magic information.  */\n   if (som_section_data (section)->copy_data == NULL)\n     {\n-      bfd_size_type amt = sizeof (struct som_copyable_section_data_struct);\n+      size_t amt = sizeof (struct som_copyable_section_data_struct);\n \n       som_section_data (section)->copy_data = bfd_zalloc (section->owner, amt);\n       if (som_section_data (section)->copy_data == NULL)\n@@ -5589,7 +5589,7 @@ bfd_som_set_symbol_type (asymbol *symbol, unsigned int type)\n bfd_boolean\n bfd_som_attach_aux_hdr (bfd *abfd, int type, char *string)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (type == VERSION_AUX_ID)\n     {\n@@ -6602,7 +6602,7 @@ som_write_armap (bfd *abfd,\n   struct ar_hdr hdr;\n   struct som_external_lst_header lst;\n   unsigned char *p;\n-  bfd_size_type amt;\n+  size_t amt;\n   unsigned int csum;\n   unsigned int module_count;\n "
    },
    {
      "sha": "266c2b19ebbcd82f25fa09bd6d8c08b40d3ea5f4",
      "filename": "bfd/srec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/srec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/srec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/srec.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -550,7 +550,7 @@ srec_scan (bfd *abfd)\n \t\t  {\n \t\t    char secbuf[20];\n \t\t    char *secname;\n-\t\t    bfd_size_type amt;\n+\t\t    size_t amt;\n \t\t    flagword flags;\n \n \t\t    sprintf (secbuf, \".sec%d\", bfd_count_sections (abfd) + 1);"
    },
    {
      "sha": "8a5c89767a88cac997678e984f1d5665d3938068",
      "filename": "bfd/syms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/syms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/syms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/syms.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -538,7 +538,7 @@ DESCRIPTION\n asymbol *\n _bfd_generic_make_empty_symbol (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (asymbol);\n+  size_t amt = sizeof (asymbol);\n   asymbol *new_symbol = (asymbol *) bfd_zalloc (abfd, amt);\n   if (new_symbol)\n     new_symbol->the_bfd = abfd;"
    },
    {
      "sha": "e7cd9a810cb0d1506f8413f565540cd2f8b29d07",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -1711,7 +1711,7 @@ const char **\n bfd_target_list (void)\n {\n   int vec_length = 0;\n-  bfd_size_type amt;\n+  size_t amt;\n   const bfd_target * const *target;\n   const  char **name_list, **name_ptr;\n "
    },
    {
      "sha": "aaaffa05c27819a6ad257fcafae94f8074e48e39",
      "filename": "bfd/tekhex.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/tekhex.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/tekhex.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/tekhex.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -428,7 +428,7 @@ first_phase (bfd *abfd, int type, char *src, char * src_end)\n \t    case '8':\n \t      /* Symbols, add to section.  */\n \t      {\n-\t\tbfd_size_type amt = sizeof (tekhex_symbol_type);\n+\t\tsize_t amt = sizeof (tekhex_symbol_type);\n \t\ttekhex_symbol_type *new_symbol = (tekhex_symbol_type *)\n \t\t    bfd_alloc (abfd, amt);\n \t\tchar stype = (*src);\n@@ -912,7 +912,7 @@ tekhex_sizeof_headers (bfd *abfd ATTRIBUTE_UNUSED,\n static asymbol *\n tekhex_make_empty_symbol (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (struct tekhex_symbol_struct);\n+  size_t amt = sizeof (struct tekhex_symbol_struct);\n   tekhex_symbol_type *new_symbol = (tekhex_symbol_type *) bfd_zalloc (abfd,\n \t\t\t\t\t\t\t\t      amt);\n "
    },
    {
      "sha": "10ab2521344bed8832a28f865c5632d1c03bfc67",
      "filename": "bfd/trad-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/trad-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/trad-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/trad-core.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -77,7 +77,7 @@ trad_unix_core_file_p (bfd *abfd)\n   int val;\n   struct user u;\n   struct trad_core_struct *rawptr;\n-  bfd_size_type amt;\n+  size_t amt;\n   flagword flags;\n \n #ifdef TRAD_CORE_USER_OFFSET"
    },
    {
      "sha": "b967243bebc1fbfab9785196cd220153a18e858c",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -2656,7 +2656,7 @@ _bfd_vms_slurp_object_records (bfd * abfd)\n static bfd_boolean\n vms_initialize (bfd * abfd)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n \n   amt = sizeof (struct vms_private_data_struct);\n   abfd->tdata.any = bfd_zalloc (abfd, amt);\n@@ -8457,7 +8457,7 @@ static struct bfd_link_hash_table *\n alpha_vms_bfd_link_hash_table_create (bfd *abfd)\n {\n   struct alpha_vms_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (struct alpha_vms_link_hash_table);\n+  size_t amt = sizeof (struct alpha_vms_link_hash_table);\n \n   ret = (struct alpha_vms_link_hash_table *) bfd_malloc (amt);\n   if (ret == NULL)\n@@ -9424,7 +9424,7 @@ vms_close_and_cleanup (bfd * abfd)\n static bfd_boolean\n vms_new_section_hook (bfd * abfd, asection *section)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n \n   vms_debug2 ((1, \"vms_new_section_hook (%p, [%u]%s)\\n\",\n \t       abfd, section->index, section->name));"
    },
    {
      "sha": "dfd3d873b22435a7077af69be448dcf04ebede3f",
      "filename": "bfd/wasm-module.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/wasm-module.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/wasm-module.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/wasm-module.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -688,7 +688,7 @@ wasm_canonicalize_symtab (bfd *abfd, asymbol **alocation)\n static asymbol *\n wasm_make_empty_symbol (bfd *abfd)\n {\n-  bfd_size_type amt = sizeof (asymbol);\n+  size_t amt = sizeof (asymbol);\n   asymbol *new_symbol = (asymbol *) bfd_zalloc (abfd, amt);\n \n   if (! new_symbol)"
    },
    {
      "sha": "ff4b483703254ace62b2009dc45c6ab1a9849873",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/986f078366b193ed9f5bd02af965f3af958ba859/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/986f078366b193ed9f5bd02af965f3af958ba859/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=986f078366b193ed9f5bd02af965f3af958ba859",
      "patch": "@@ -214,7 +214,7 @@ xcoff_get_section_contents (bfd *abfd, asection *sec)\n {\n   if (coff_section_data (abfd, sec) == NULL)\n     {\n-      bfd_size_type amt = sizeof (struct coff_section_tdata);\n+      size_t amt = sizeof (struct coff_section_tdata);\n \n       sec->used_by_bfd = bfd_zalloc (abfd, amt);\n       if (sec->used_by_bfd == NULL)\n@@ -593,7 +593,7 @@ struct bfd_link_hash_table *\n _bfd_xcoff_bfd_link_hash_table_create (bfd *abfd)\n {\n   struct xcoff_link_hash_table *ret;\n-  bfd_size_type amt = sizeof (* ret);\n+  size_t amt = sizeof (* ret);\n \n   ret = bfd_zmalloc (amt);\n   if (ret == NULL)\n@@ -764,7 +764,7 @@ xcoff_set_import_path (struct bfd_link_info *info,\n       if (*pp == NULL)\n \t{\n \t  struct xcoff_import_file *n;\n-\t  bfd_size_type amt = sizeof (* n);\n+\t  size_t amt = sizeof (*n);\n \n \t  n = bfd_alloc (info->output_bfd, amt);\n \t  if (n == NULL)\n@@ -2520,7 +2520,7 @@ xcoff_find_function (struct bfd_link_info *info,\n     {\n       char *fnname;\n       struct xcoff_link_hash_entry *hfn;\n-      bfd_size_type amt;\n+      size_t amt;\n \n       amt = strlen (h->root.root.string) + 2;\n       fnname = bfd_malloc (amt);\n@@ -3044,7 +3044,7 @@ bfd_xcoff_link_record_set (bfd *output_bfd,\n {\n   struct xcoff_link_hash_entry *h = (struct xcoff_link_hash_entry *) harg;\n   struct xcoff_link_size_list *n;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (bfd_get_flavour (output_bfd) != bfd_target_xcoff_flavour)\n     return TRUE;\n@@ -3292,7 +3292,7 @@ static bfd_boolean\n xcoff_build_ldsym (struct xcoff_loader_info *ldinfo,\n \t\t   struct xcoff_link_hash_entry *h)\n {\n-  bfd_size_type amt;\n+  size_t amt;\n \n   /* Warn if this symbol is exported but not defined.  */\n   if ((h->flags & XCOFF_EXPORT) != 0\n@@ -3640,7 +3640,7 @@ bfd_xcoff_size_dynamic_sections (bfd *output_bfd,\n   bfd *sub;\n   struct bfd_strtab_hash *debug_strtab;\n   bfd_byte *debug_contents = NULL;\n-  bfd_size_type amt;\n+  size_t amt;\n \n   if (bfd_get_flavour (output_bfd) != bfd_target_xcoff_flavour)\n     {\n@@ -4861,7 +4861,7 @@ xcoff_link_input_bfd (struct xcoff_final_link_info *flinfo,\n \t\t\t{\n \t\t\t  struct xcoff_toc_rel_hash *n;\n \t\t\t  struct xcoff_link_section_info *si;\n-\t\t\t  bfd_size_type amt;\n+\t\t\t  size_t amt;\n \n \t\t\t  amt = sizeof (* n);\n \t\t\t  n = bfd_alloc (flinfo->output_bfd, amt);"
    }
  ]
}