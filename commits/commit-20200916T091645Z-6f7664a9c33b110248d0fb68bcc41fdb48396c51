{
  "sha": "6f7664a9c33b110248d0fb68bcc41fdb48396c51",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmY3NjY0YTljMzNiMTEwMjQ4ZDBmYjY4YmNjNDFmZGI0ODM5NmM1MQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-23T19:07:09Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-16T09:16:45Z"
    },
    "message": "gdb: Convert la_name and la_natural_name to methods\n\nConvert the two language_data member variables la_name and\nla_natural_name to virtual methods in language_defn struct called name\nand natural_name respectively.\n\nThe virtual methods in the language_defn base class are pure virtual,\nas every language must implement these, and as every language has a\nunique name there's no sensible default here.\n\nGiven that every language must implement these methods I did wonder\nabout making this data passed into the base class constructor, but in\nthe end I went with the virtual method approach.  I'm open to changing\nthis approach if people prefer the constructor approach.\n\nDuring updating the calls to language_defn::name I found in\nadd_set_language_command a place where we took la_name and then\ncapitalised the first letter to create a language name that could be\nused in the documentation string.  I replaced this with a use of\nnatural_name instead as this seemed a better choice, in most cases\nthis will make no difference, as for most languages the natural_name\nis just the name with the first character in upper case, but for some\nlanguages, for example 'Open-CL' and 'Objective-C' this is not the\ncase.\n\nIn the case of asm_language the name is 'asm', while the natural_name\nwas previously 'assembly'.  I changed the natural name to 'Assembly',\nthis makes the documentation string case above cleaner, however, this\nwill change the MI output for -var-info-expression, where the 'lang'\nfield will change from 'assembly' to 'Assembly'.  It is possible this\ncould be a breaking change if a front-end is relying on the existing\nname.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(ada_language::name): New member function.\n\t(ada_language::natural_name): New member function.\n\t* c-lang.c (c_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(c_language::name): New member function.\n\t(c_language::natural_name): New member function.\n\t(cplus_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(cplus_language::name): New member function.\n\t(cplus_language::natural_name): New member function.\n\t(asm_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(asm_language::name): New member function.\n\t(asm_language::natural_name): New member function.\n\t(minimal_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(minimal_language::name): New member function.\n\t(minimal_language::natural_name): New member function.\n\t* compile/compile.c (compile_to_object): Update call to\n\tlanugage_defn::name.\n\t* d-lang.c (d_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(d_language::name): New member function.\n\t(d_language::natural_name): New member function.\n\t* expprint.c (print_subexp_standard): Update call to\n\tlanguage_defn::name.\n\t(dump_raw_expression): Likewise\n\t(dump_prefix_expression): Likewise.\n\t* f-lang.c (f_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(f_language::name): New member function.\n\t(f_language::natural_name): New member function.\n\t* go-lang.c (go_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(go_language::name): New member function.\n\t(go_language::natural_name): New member function.\n\t* language.c (show_language_command): Update call to\n\tlanguage_defn::name.\n\t(set_language_command): Likewise.\n\t(language_enum): Likewise.\n\t(language_str): Likewise.\n\t(add_set_language_command): Likewise, use\n\tlanguage_defn::natural_name in the doc string.\n\t(unknown_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(unknown_language::name): New member function.\n\t(unknown_language::natural_name): New member function.\n\t(auto_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(auto_language::name): New member function.\n\t(auto_language::natural_name): New member function.\n\t(language_lookup_primitive_type_as_symbol): Update call to\n\tlanguage_defn::name.\n\t* language.h (language_data): Remove la_name and la_natural_name\n\tmember variables.\n\t(language_defn::name): New member function.\n\t(language_defn::natural_name): New member function.\n\t* m2-lang.c (m2_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(m2_language::name): New member function.\n\t(m2_language::natural_name): New member function.\n\t* mi/mi-cmd-var.c (mi_cmd_var_info_expression): Update call to\n\tlanguage_defn::natural_name.\n\t* objc-lang.c (objc_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(objc_language::name): New member function.\n\t(objc_language::natural_name): New member function.\n\t* opencl-lang.c (opencl_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(opencl_language::name): New member function.\n\t(opencl_language::natural_name): New member function.\n\t* p-lang.c (pascal_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(pascal_language::name): New member function.\n\t(pascal_language::natural_name): New member function.\n\t* rust-lang.c (rust_language_data): Remove la_name and\n\tla_natural_name initializers.\n\t(rust_language::name): New member function.\n\t(rust_language::natural_name): New member function.\n\t* symtab.c (lookup_language_this): Update call to\n\tlanguage_defn::name.",
    "tree": {
      "sha": "fe43babfa27c4ee8bfe20dbb3bbf9f5725a5d4b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fe43babfa27c4ee8bfe20dbb3bbf9f5725a5d4b2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f7664a9c33b110248d0fb68bcc41fdb48396c51",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f7664a9c33b110248d0fb68bcc41fdb48396c51",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f7664a9c33b110248d0fb68bcc41fdb48396c51",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f7664a9c33b110248d0fb68bcc41fdb48396c51/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5bae7c4e048c69fe6eae96596c800a92b643f563",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bae7c4e048c69fe6eae96596c800a92b643f563",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5bae7c4e048c69fe6eae96596c800a92b643f563"
    }
  ],
  "stats": {
    "total": 323,
    "additions": 263,
    "deletions": 60
  },
  "files": [
    {
      "sha": "a58c490d2d937b729208280ac8e39bec05b49974",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -1,3 +1,89 @@\n+2020-09-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(ada_language::name): New member function.\n+\t(ada_language::natural_name): New member function.\n+\t* c-lang.c (c_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(c_language::name): New member function.\n+\t(c_language::natural_name): New member function.\n+\t(cplus_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(cplus_language::name): New member function.\n+\t(cplus_language::natural_name): New member function.\n+\t(asm_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(asm_language::name): New member function.\n+\t(asm_language::natural_name): New member function.\n+\t(minimal_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(minimal_language::name): New member function.\n+\t(minimal_language::natural_name): New member function.\n+\t* compile/compile.c (compile_to_object): Update call to\n+\tlanugage_defn::name.\n+\t* d-lang.c (d_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(d_language::name): New member function.\n+\t(d_language::natural_name): New member function.\n+\t* expprint.c (print_subexp_standard): Update call to\n+\tlanguage_defn::name.\n+\t(dump_raw_expression): Likewise\n+\t(dump_prefix_expression): Likewise.\n+\t* f-lang.c (f_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(f_language::name): New member function.\n+\t(f_language::natural_name): New member function.\n+\t* go-lang.c (go_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(go_language::name): New member function.\n+\t(go_language::natural_name): New member function.\n+\t* language.c (show_language_command): Update call to\n+\tlanguage_defn::name.\n+\t(set_language_command): Likewise.\n+\t(language_enum): Likewise.\n+\t(language_str): Likewise.\n+\t(add_set_language_command): Likewise, use\n+\tlanguage_defn::natural_name in the doc string.\n+\t(unknown_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(unknown_language::name): New member function.\n+\t(unknown_language::natural_name): New member function.\n+\t(auto_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(auto_language::name): New member function.\n+\t(auto_language::natural_name): New member function.\n+\t(language_lookup_primitive_type_as_symbol): Update call to\n+\tlanguage_defn::name.\n+\t* language.h (language_data): Remove la_name and la_natural_name\n+\tmember variables.\n+\t(language_defn::name): New member function.\n+\t(language_defn::natural_name): New member function.\n+\t* m2-lang.c (m2_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(m2_language::name): New member function.\n+\t(m2_language::natural_name): New member function.\n+\t* mi/mi-cmd-var.c (mi_cmd_var_info_expression): Update call to\n+\tlanguage_defn::natural_name.\n+\t* objc-lang.c (objc_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(objc_language::name): New member function.\n+\t(objc_language::natural_name): New member function.\n+\t* opencl-lang.c (opencl_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(opencl_language::name): New member function.\n+\t(opencl_language::natural_name): New member function.\n+\t* p-lang.c (pascal_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(pascal_language::name): New member function.\n+\t(pascal_language::natural_name): New member function.\n+\t* rust-lang.c (rust_language_data): Remove la_name and\n+\tla_natural_name initializers.\n+\t(rust_language::name): New member function.\n+\t(rust_language::natural_name): New member function.\n+\t* symtab.c (lookup_language_this): Update call to\n+\tlanguage_defn::name.\n+\n 2020-09-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Remove la_name_of_this"
    },
    {
      "sha": "fd9e6d32172c4d24954dce4e2be5e47c05648d60",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -13713,8 +13713,6 @@ static const char * const ada_extensions[] =\n \n extern const struct language_data ada_language_data =\n {\n-  \"ada\",                        /* Language name */\n-  \"Ada\",\n   language_ada,\n   range_check_off,\n   case_sensitive_on,            /* Yes, Ada is case-insensitive, but\n@@ -13739,6 +13737,16 @@ class ada_language : public language_defn\n     : language_defn (language_ada, ada_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"ada\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Ada\"; }\n+\n   /* Print an array element index using the Ada syntax.  */\n \n   void print_array_index (struct type *index_type,"
    },
    {
      "sha": "eb987f4dd25337a80f521e3c1103c15dbfcb82c0",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 40,
      "deletions": 8,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -880,8 +880,6 @@ static const char * const c_extensions[] =\n \n extern const struct language_data c_language_data =\n {\n-  \"c\",\t\t\t\t/* Language name */\n-  \"C\",\n   language_c,\n   range_check_off,\n   case_sensitive_on,\n@@ -905,6 +903,16 @@ class c_language : public language_defn\n     : language_defn (language_c, c_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"c\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"C\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override\n@@ -979,8 +987,6 @@ static const char * const cplus_extensions[] =\n \n extern const struct language_data cplus_language_data =\n {\n-  \"c++\",\t\t\t/* Language name */\n-  \"C++\",\n   language_cplus,\n   range_check_off,\n   case_sensitive_on,\n@@ -1006,6 +1012,16 @@ class cplus_language : public language_defn\n \n   /* See language.h.  */\n \n+  const char *name () const override\n+  { return \"c++\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"C++\"; }\n+\n+  /* See language.h.  */\n+\n   struct language_pass_by_ref_info pass_by_reference_info\n \t(struct type *type) const override\n   {\n@@ -1180,8 +1196,6 @@ static const char * const asm_extensions[] =\n \n extern const struct language_data asm_language_data =\n {\n-  \"asm\",\t\t\t/* Language name */\n-  \"assembly\",\n   language_asm,\n   range_check_off,\n   case_sensitive_on,\n@@ -1205,6 +1219,16 @@ class asm_language : public language_defn\n     : language_defn (language_asm, asm_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"asm\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Assembly\"; }\n+\n   /* See language.h.\n \n      FIXME: Should this have its own arch info method?  */\n@@ -1234,8 +1258,6 @@ static asm_language asm_language_defn;\n \n extern const struct language_data minimal_language_data =\n {\n-  \"minimal\",\t\t\t/* Language name */\n-  \"Minimal\",\n   language_minimal,\n   range_check_off,\n   case_sensitive_on,\n@@ -1259,6 +1281,16 @@ class minimal_language : public language_defn\n     : language_defn (language_minimal, minimal_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"minimal\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Minimal\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "8d8c2b14eba1097bfbc670062cd189906fd29a49",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -695,7 +695,7 @@ compile_to_object (struct command_line *cmd, const char *cmd_string,\n \t\t\t(current_language->get_compile_instance ());\n   if (compiler == nullptr)\n     error (_(\"No compiler support for language %s.\"),\n-\t   current_language->la_name);\n+\t   current_language->name ());\n   compiler->set_print_callback (print_callback, NULL);\n   compiler->set_scope (scope);\n   compiler->set_block (expr_block);"
    },
    {
      "sha": "ff2bdf0fe2e5d911f8fcd39436770cf6a9b3d94f",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -133,8 +133,6 @@ static const char * const d_extensions[] =\n \n extern const struct language_data d_language_data =\n {\n-  \"d\",\n-  \"D\",\n   language_d,\n   range_check_off,\n   case_sensitive_on,\n@@ -158,6 +156,16 @@ class d_language : public language_defn\n     : language_defn (language_d, d_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"d\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"D\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "36e18ea1a9f6c7ecc4db258547ded0d7a869f905",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -509,7 +509,7 @@ print_subexp_standard (struct expression *exp, int *pos,\n       else\n \tfprintf_styled (stream, metadata_style.style (),\n \t\t\t_(\"<language %s has no 'this'>\"),\n-\t\t\texp->language_defn->la_name);\n+\t\t\texp->language_defn->name ());\n       return;\n \n       /* Modula-2 ops */\n@@ -734,7 +734,7 @@ dump_raw_expression (struct expression *exp, struct ui_file *stream,\n   if (note)\n     fprintf_filtered (stream, \", %s:\", note);\n   fprintf_filtered (stream, \"\\n\\tLanguage %s, %d elements, %ld bytes each.\\n\",\n-\t\t    exp->language_defn->la_name, exp->nelts,\n+\t\t    exp->language_defn->name (), exp->nelts,\n \t\t    (long) sizeof (union exp_element));\n   fprintf_filtered (stream, \"\\t%5s  %20s  %16s  %s\\n\", \"Index\", \"Opcode\",\n \t\t    \"Hex Value\", \"String Value\");\n@@ -1159,7 +1159,7 @@ dump_prefix_expression (struct expression *exp, struct ui_file *stream)\n   fputs_filtered (\", after conversion to prefix form:\\nExpression: `\", stream);\n   print_expression (exp, stream);\n   fprintf_filtered (stream, \"'\\n\\tLanguage %s, %d elements, %ld bytes each.\\n\",\n-\t\t    exp->language_defn->la_name, exp->nelts,\n+\t\t    exp->language_defn->name (), exp->nelts,\n \t\t    (long) sizeof (union exp_element));\n   fputs_filtered (\"\\n\", stream);\n "
    },
    {
      "sha": "ace0c565ab2f8c3818c2f7d817b964f9f68d0562",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -493,8 +493,6 @@ static const struct exp_descriptor exp_descriptor_f =\n \n extern const struct language_data f_language_data =\n {\n-  \"fortran\",\n-  \"Fortran\",\n   language_fortran,\n   range_check_on,\n   case_sensitive_off,\n@@ -518,6 +516,16 @@ class f_language : public language_defn\n     : language_defn (language_fortran, f_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"fortran\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Fortran\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "6e9b487569668339082cc0ad05780cdcffd9262e",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -508,8 +508,6 @@ enum go_primitive_types {\n \n extern const struct language_data go_language_data =\n {\n-  \"go\",\n-  \"Go\",\n   language_go,\n   range_check_off,\n   case_sensitive_on,\n@@ -533,6 +531,16 @@ class go_language : public language_defn\n     : language_defn (language_go, go_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"go\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Go\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "0b1b4882038c87391646375d3bda37bfe00bde94",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 32,
      "deletions": 20,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -98,11 +98,11 @@ show_language_command (struct ui_file *file, int from_tty,\n     fprintf_filtered (gdb_stdout,\n \t\t      _(\"The current source language is \"\n \t\t\t\"\\\"auto; currently %s\\\".\\n\"),\n-\t\t      current_language->la_name);\n+\t\t      current_language->name ());\n   else\n     fprintf_filtered (gdb_stdout,\n \t\t      _(\"The current source language is \\\"%s\\\".\\n\"),\n-\t\t      current_language->la_name);\n+\t\t      current_language->name ());\n \n   if (has_stack_frames ())\n     {\n@@ -131,7 +131,7 @@ set_language_command (const char *ignore,\n   /* Search the list of languages for a match.  */\n   for (const auto &lang : language_defn::languages)\n     {\n-      if (strcmp (lang->la_name, language) == 0)\n+      if (strcmp (lang->name (), language) == 0)\n \t{\n \t  /* Found it!  Go into manual mode, and use this language.  */\n \t  if (lang->la_language == language_auto)\n@@ -442,7 +442,7 @@ enum language\n language_enum (const char *str)\n {\n   for (const auto &lang : language_defn::languages)\n-    if (strcmp (lang->la_name, str) == 0)\n+    if (strcmp (lang->name (), str) == 0)\n       return lang->la_language;\n \n   if (strcmp (str, \"local\") == 0)\n@@ -466,7 +466,7 @@ language_def (enum language lang)\n const char *\n language_str (enum language lang)\n {\n-  return language_def (lang)->la_name;\n+  return language_def (lang)->name ();\n }\n \n \f\n@@ -486,17 +486,17 @@ add_set_language_command ()\n   /* Display \"auto\", \"local\" and \"unknown\" first, and then the rest,\n      alpha sorted.  */\n   const char **language_names_p = language_names;\n-  *language_names_p++ = language_def (language_auto)->la_name;\n+  *language_names_p++ = language_def (language_auto)->name ();\n   *language_names_p++ = \"local\";\n-  *language_names_p++ = language_def (language_unknown)->la_name;\n+  *language_names_p++ = language_def (language_unknown)->name ();\n   const char **sort_begin = language_names_p;\n   for (const auto &lang : language_defn::languages)\n     {\n       /* Already handled above.  */\n       if (lang->la_language == language_auto\n \t  || lang->la_language == language_unknown)\n \tcontinue;\n-      *language_names_p++ = lang->la_name;\n+      *language_names_p++ = lang->name ();\n     }\n   *language_names_p = NULL;\n   std::sort (sort_begin, language_names_p, compare_cstrings);\n@@ -524,15 +524,11 @@ add_set_language_command ()\n \t  || lang->la_language == language_auto)\n \tcontinue;\n \n-      /* FIXME: i18n: for now assume that the human-readable name is\n-\t just a capitalization of the internal name.  */\n       /* Note that we add the newline at the front, so we don't wind\n \t up with a trailing newline.  */\n-      doc.printf (\"\\n%-16s Use the %c%s language\",\n-\t\t  lang->la_name,\n-\t\t  /* Capitalize first letter of language name.  */\n-\t\t  toupper (lang->la_name[0]),\n-\t\t  lang->la_name + 1);\n+      doc.printf (\"\\n%-16s Use the %s language\",\n+\t\t  lang->name (),\n+\t\t  lang->natural_name ());\n     }\n \n   add_setshow_enum_cmd (\"language\", class_support,\n@@ -783,8 +779,6 @@ unknown_language_arch_info (struct gdbarch *gdbarch,\n \n extern const struct language_data unknown_language_data =\n {\n-  \"unknown\",\n-  \"Unknown\",\n   language_unknown,\n   range_check_off,\n   case_sensitive_on,\n@@ -808,6 +802,16 @@ class unknown_language : public language_defn\n     : language_defn (language_unknown, unknown_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"unknown\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Unknown\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override\n@@ -912,8 +916,6 @@ static unknown_language unknown_language_defn;\n \n extern const struct language_data auto_language_data =\n {\n-  \"auto\",\n-  \"Auto\",\n   language_auto,\n   range_check_off,\n   case_sensitive_on,\n@@ -937,6 +939,16 @@ class auto_language : public language_defn\n     : language_defn (language_auto, auto_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"auto\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Auto\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override\n@@ -1209,7 +1221,7 @@ language_lookup_primitive_type_as_symbol (const struct language_defn *la,\n       fprintf_unfiltered (gdb_stdlog,\n \t\t\t  \"language_lookup_primitive_type_as_symbol\"\n \t\t\t  \" (%s, %s, %s)\",\n-\t\t\t  la->la_name, host_address_to_string (gdbarch), name);\n+\t\t\t  la->name (), host_address_to_string (gdbarch), name);\n     }\n \n   typep = language_lookup_primitive_type_1 (lai, name);"
    },
    {
      "sha": "980e3647af994469b753dc4bfa30fdc29d85d6ac",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -188,14 +188,6 @@ extern const char *default_word_break_characters (void);\n \n struct language_data\n   {\n-    /* Name of the language.  */\n-\n-    const char *la_name;\n-\n-    /* Natural or official name of the language.  */\n-\n-    const char *la_natural_name;\n-\n     /* its symtab language-enum (defs.h).  */\n \n     enum language la_language;\n@@ -275,6 +267,14 @@ struct language_defn : language_data\n     languages[lang] = this;\n   }\n \n+  /* Name of the language.  */\n+\n+  virtual const char *name () const = 0;\n+\n+  /* Natural or official name of the language.  */\n+\n+  virtual const char *natural_name () const = 0;\n+\n   /* Print the index of an element of an array.  This default\n      implementation prints using C99 syntax.  */\n "
    },
    {
      "sha": "9806caf6103dbf65d02c9a258bfaf878b110b458",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -199,8 +199,6 @@ const struct exp_descriptor exp_descriptor_modula2 =\n \n extern const struct language_data m2_language_data =\n {\n-  \"modula-2\",\n-  \"Modula-2\",\n   language_m2,\n   range_check_on,\n   case_sensitive_on,\n@@ -224,6 +222,16 @@ class m2_language : public language_defn\n     : language_defn (language_m2, m2_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"modula-2\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Modula-2\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "65a2ba146dd438ebdae5e3f194855d142badaf06",
      "filename": "gdb/mi/mi-cmd-var.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/mi/mi-cmd-var.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/mi/mi-cmd-var.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-var.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -458,7 +458,7 @@ mi_cmd_var_info_expression (const char *command, char **argv, int argc)\n \n   lang = varobj_get_language (var);\n \n-  uiout->field_string (\"lang\", lang->la_natural_name);\n+  uiout->field_string (\"lang\", lang->natural_name ());\n \n   std::string exp = varobj_get_expression (var);\n   uiout->field_string (\"exp\", exp.c_str ());"
    },
    {
      "sha": "e63b9927a1c3ca79773de1d6eb64aafc3f480999",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -328,8 +328,6 @@ static const char * const objc_extensions[] =\n \n extern const struct language_data objc_language_data =\n {\n-  \"objective-c\",\t\t/* Language name */\n-  \"Objective-C\",\n   language_objc,\n   range_check_off,\n   case_sensitive_on,\n@@ -353,6 +351,16 @@ class objc_language : public language_defn\n     : language_defn (language_objc, objc_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"objective-c\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Objective-C\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "9a311c1101b1ad0508db2916c7ce49989d0d6188",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -1006,8 +1006,6 @@ const struct exp_descriptor exp_descriptor_opencl =\n /* Constant data representing the OpenCL language.  */\n extern const struct language_data opencl_language_data =\n {\n-  \"opencl\",\t\t\t/* Language name */\n-  \"OpenCL C\",\n   language_opencl,\n   range_check_off,\n   case_sensitive_on,\n@@ -1031,6 +1029,16 @@ class opencl_language : public language_defn\n     : language_defn (language_opencl, opencl_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"opencl\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"OpenCL C\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "486e90654e6ea2e421b76dd1a63d892423a9e9c8",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -257,8 +257,6 @@ static const char * const p_extensions[] =\n \n extern const struct language_data pascal_language_data =\n {\n-  \"pascal\",\t\t\t/* Language name */\n-  \"Pascal\",\n   language_pascal,\n   range_check_on,\n   case_sensitive_on,\n@@ -282,6 +280,17 @@ class pascal_language : public language_defn\n     : language_defn (language_pascal, pascal_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"pascal\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Pascal\"; }\n+\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "971d60b410a33f4c97c2f052305a85d3ecf99f4f",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -1906,8 +1906,6 @@ static const char * const rust_extensions[] =\n \n extern const struct language_data rust_language_data =\n {\n-  \"rust\",\n-  \"Rust\",\n   language_rust,\n   range_check_on,\n   case_sensitive_on,\n@@ -1931,6 +1929,16 @@ class rust_language : public language_defn\n     : language_defn (language_rust, rust_language_data)\n   { /* Nothing.  */ }\n \n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"rust\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Rust\"; }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "61f96b2ab8c2a035812c9956a82f80491c26dd12",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f7664a9c33b110248d0fb68bcc41fdb48396c51/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "patch": "@@ -1921,7 +1921,7 @@ lookup_language_this (const struct language_defn *lang,\n \n       fprintf_unfiltered (gdb_stdlog,\n \t\t\t  \"lookup_language_this (%s, %s (objfile %s))\",\n-\t\t\t  lang->la_name, host_address_to_string (block),\n+\t\t\t  lang->name (), host_address_to_string (block),\n \t\t\t  objfile_debug_name (objfile));\n     }\n "
    }
  ]
}