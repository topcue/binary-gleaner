{
  "sha": "cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2I5NTliZDg5NTZmOWRmYzM5ZjdmOWE1ZWU1NmMxNjA2OTc5ZDMzZQ==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-07-20T03:42:09Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-07-20T10:04:44Z"
    },
    "message": "RISC-V: Minor updates for architecture parser.\n\n* Two add subset functions is redundant.  Keep the riscv_add_implicit_subset,\nand renamed it to riscv_add_subset.  Besides, if the subset is added in order,\nthen we just add it at the tail of the subset list.\n\n* Removed the \"-march:\" prefix from the error messages.  Since not only the\n-march= option will use the parser, but also the architecture elf attributes,\nthe default architecture setting and linker will use the same parser.\n\n* Use a function, riscv_parse_check_conflicts, to check the conflicts\nof extensions, including the rv64e and rv32q.\n\nThe rv32emc-elf/rv32i-elf/rv32gc-linux/rv64gc-elf/rv64gc-linux regressions\nare tested and passed.\n\nbfd/\n\t* elfxx-riscv.c (riscv_lookup_subset): Check the subset tail list\n\tfirst.  If the subset is added in order, then we can just add it to\n\tthe tail without searching the whole list.\n\t(riscv_add_subset): Replaced by riscv_add_implicit_subset.\n\t(riscv_add_implicit_subset): Renamed to riscv_add_subset.\n\t(riscv_parse_add_subset): Updated.\n\t(riscv_parsing_subset_version): Removed the \"-march:\" prefix from\n\tthe error message.\n\t(riscv_parse_prefixed_ext): Likewise.\n\t(riscv_parse_std_ext): Likewise.  And move the rv<xlen>e check\n\tto riscv_parse_check_conflicts.\n\t(riscv_parse_check_conflicts): New function used to check conflicts.\n\t(riscv_parse_subset): Updated.\ngas/\n\t* testsuite/gas/riscv/march-fail-base-02.l: Updated.\n\t* testsuite/gas/riscv/march-fail-unknown-std.l: Likewise.",
    "tree": {
      "sha": "735ea190d0e8420f46bd130bd98e40f670e77811",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/735ea190d0e8420f46bd130bd98e40f670e77811"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "c2a76217711775caf1e404e8fd1eeb3fbac4d2db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2a76217711775caf1e404e8fd1eeb3fbac4d2db",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c2a76217711775caf1e404e8fd1eeb3fbac4d2db"
    }
  ],
  "stats": {
    "total": 180,
    "additions": 84,
    "deletions": 96
  },
  "files": [
    {
      "sha": "2b8f60caf3286476ea698468e1230dd07836e412",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 82,
      "deletions": 94,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
      "patch": "@@ -1277,6 +1277,14 @@ riscv_lookup_subset (const riscv_subset_list_t *subset_list,\n {\n   riscv_subset_t *s, *pre_s = NULL;\n \n+  /* If the subset is added in order, then just add it at the tail.  */\n+  if (subset_list->tail != NULL\n+      && riscv_compare_subsets (subset_list->tail->name, subset) < 0)\n+    {\n+      *current = subset_list->tail;\n+      return false;\n+    }\n+\n   for (s = subset_list->head;\n        s != NULL;\n        pre_s = s, s = s->next)\n@@ -1291,40 +1299,18 @@ riscv_lookup_subset (const riscv_subset_list_t *subset_list,\n \tbreak;\n     }\n   *current = pre_s;\n+\n   return false;\n }\n \n-/* Add extension from ISA string to the last of the subset list.  */\n+/* Add the extension to the subset list.  Search the\n+   list first, and then find the right place to add.  */\n \n void\n riscv_add_subset (riscv_subset_list_t *subset_list,\n \t\t  const char *subset,\n \t\t  int major,\n \t\t  int minor)\n-{\n-  riscv_subset_t *s = xmalloc (sizeof *s);\n-\n-  if (subset_list->head == NULL)\n-    subset_list->head = s;\n-\n-  s->name = xstrdup (subset);\n-  s->major_version = major;\n-  s->minor_version = minor;\n-  s->next = NULL;\n-\n-  if (subset_list->tail != NULL)\n-    subset_list->tail->next = s;\n-  subset_list->tail = s;\n-}\n-\n-/* Add the implicit extension to the subset list.  Search the\n-   list first, and then find the right place to add.  */\n-\n-static void\n-riscv_add_implicit_subset (riscv_subset_list_t *subset_list,\n-\t\t\t   const char *subset,\n-\t\t\t   int major,\n-\t\t\t   int minor)\n {\n   riscv_subset_t *current, *new;\n \n@@ -1347,14 +1333,12 @@ riscv_add_implicit_subset (riscv_subset_list_t *subset_list,\n       new->next = subset_list->head;\n       subset_list->head = new;\n     }\n-}\n \n-/* We have to add all extensions from ISA string first, and then start to\n-   add their implicit extensions.  The extensions from ISA string must be\n-   set in order, so we can add them to the last of the subset list\n-   directly, without searching.\n+  if (new->next == NULL)\n+    subset_list->tail = new;\n+}\n \n-   Find the default versions for the extension before adding them to\n+/* Find the default versions for the extension before adding them to\n    the subset list, if their versions are RISCV_UNKNOWN_VERSION.\n    Afterwards, report errors if we can not find their default versions.  */\n \n@@ -1389,12 +1373,8 @@ riscv_parse_add_subset (riscv_parse_subset_t *rps,\n       return;\n     }\n \n-  if (!implicit)\n-    riscv_add_subset (rps->subset_list, subset,\n-\t\t      major_version, minor_version);\n-  else\n-    riscv_add_implicit_subset (rps->subset_list, subset,\n-\t\t\t       major_version, minor_version);\n+  riscv_add_subset (rps->subset_list, subset,\n+\t\t    major_version, minor_version);\n }\n \n /* Release subset list.  */\n@@ -1420,15 +1400,15 @@ riscv_release_subset_list (riscv_subset_list_t *subset_list)\n \n    Arguments:\n      `rps`: Hooks and status for parsing extensions.\n-     `march`: Full ISA string.\n+     `arch`: Full ISA string.\n      `p`: Curent parsing position.\n      `major_version`: Parsed major version.\n      `minor_version`: Parsed minor version.\n      `std_ext_p`: True if parsing standard extension.  */\n \n static const char *\n riscv_parsing_subset_version (riscv_parse_subset_t *rps,\n-\t\t\t      const char *march,\n+\t\t\t      const char *arch,\n \t\t\t      const char *p,\n \t\t\t      int *major_version,\n \t\t\t      int *minor_version,\n@@ -1458,8 +1438,8 @@ riscv_parsing_subset_version (riscv_parse_subset_t *rps,\n \t      else\n \t\t{\n \t\t  rps->error_handler\n-\t\t    (_(\"-march=%s: expect number after `%dp'\"),\n-\t\t     march, version);\n+\t\t    (_(\"%s: expect number after `%dp'\"),\n+\t\t     arch, version);\n \t\t  return NULL;\n \t\t}\n \t    }\n@@ -1505,12 +1485,12 @@ riscv_supported_std_ext (void)\n \n    Arguments:\n      `rps`: Hooks and status for parsing extensions.\n-     `march`: Full ISA string.\n+     `arch`: Full ISA string.\n      `p`: Curent parsing position.  */\n \n static const char *\n riscv_parse_std_ext (riscv_parse_subset_t *rps,\n-\t\t     const char *march,\n+\t\t     const char *arch,\n \t\t     const char *p)\n {\n   const char *all_std_exts = riscv_supported_std_ext ();\n@@ -1523,7 +1503,7 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n   switch (*p)\n     {\n       case 'i':\n-\tp = riscv_parsing_subset_version (rps, march, ++p,\n+\tp = riscv_parsing_subset_version (rps, arch, ++p,\n \t\t\t\t\t  &major_version,\n \t\t\t\t\t  &minor_version, true);\n \triscv_parse_add_subset (rps, \"i\",\n@@ -1532,23 +1512,16 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \tbreak;\n \n       case 'e':\n-\tp = riscv_parsing_subset_version (rps, march, ++p,\n+\tp = riscv_parsing_subset_version (rps, arch, ++p,\n \t\t\t\t\t  &major_version,\n \t\t\t\t\t  &minor_version, true);\n \triscv_parse_add_subset (rps, \"e\",\n \t\t\t\tmajor_version,\n \t\t\t\tminor_version, false);\n-\tif (*rps->xlen > 32)\n-\t  {\n-\t    rps->error_handler\n-\t      (_(\"-march=%s: rv%de is not a valid base ISA\"),\n-\t       march, *rps->xlen);\n-\t    return NULL;\n-\t  }\n \tbreak;\n \n       case 'g':\n-\tp = riscv_parsing_subset_version (rps, march, ++p,\n+\tp = riscv_parsing_subset_version (rps, arch, ++p,\n \t\t\t\t\t  &major_version,\n \t\t\t\t\t  &minor_version, true);\n \t/* Expand g to imafd.  */\n@@ -1570,8 +1543,8 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \n       default:\n \trps->error_handler\n-\t  (_(\"-march=%s: first ISA extension must be `e', `i' or `g'\"),\n-\t   march);\n+\t  (_(\"%s: first ISA extension must be `e', `i' or `g'\"),\n+\t   arch);\n \treturn NULL;\n     }\n \n@@ -1597,18 +1570,18 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \t{\n \t  if (riscv_ext_order[(std_ext - 'a')] == 0)\n \t    rps->error_handler\n-\t      (_(\"-march=%s: unknown standard and prefixed ISA \"\n-\t\t \"extension `%s'\"), march, p);\n+\t      (_(\"%s: unknown standard ISA extension `%c'\"),\n+\t       arch, std_ext);\n \t  else\n \t    rps->error_handler\n-\t      (_(\"-march=%s: standard ISA extension `%c' is not \"\n-\t\t \"in canonical order\"), march, std_ext);\n+\t      (_(\"%s: standard ISA extension `%c' is not \"\n+\t\t \"in canonical order\"), arch, std_ext);\n \t  return NULL;\n \t}\n \n       std_exts++;\n       subset[0] = std_ext;\n-      p = riscv_parsing_subset_version (rps, march, ++p,\n+      p = riscv_parsing_subset_version (rps, arch, ++p,\n \t\t\t\t\t&major_version,\n \t\t\t\t\t&minor_version, true);\n       riscv_parse_add_subset (rps, subset,\n@@ -1626,12 +1599,12 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \n    Arguments:\n      `rps`: Hooks and status for parsing extensions.\n-     `march`: Full ISA string.\n+     `arch`: Full ISA string.\n      `p`: Curent parsing position.  */\n \n static const char *\n riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n-\t\t\t  const char *march,\n+\t\t\t  const char *arch,\n \t\t\t  const char *p)\n {\n   int major_version;\n@@ -1651,8 +1624,8 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n       if (class == RV_ISA_CLASS_UNKNOWN)\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: unknown prefix class for the ISA extension `%s'\"),\n-\t     march, p);\n+\t    (_(\"%s: unknown prefix class for the ISA extension `%s'\"),\n+\t     arch, p);\n \t  return NULL;\n \t}\n \n@@ -1664,7 +1637,7 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \t;\n \n       end_of_version =\n-\triscv_parsing_subset_version (rps, march, q,\n+\triscv_parsing_subset_version (rps, arch, q,\n \t\t\t\t      &major_version,\n \t\t\t\t      &minor_version, false);\n       *q = '\\0';\n@@ -1685,8 +1658,8 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \t  && !riscv_valid_prefixed_ext (subset))\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: unknown prefixed ISA extension `%s'\"),\n-\t     march, subset);\n+\t    (_(\"%s: unknown prefixed ISA extension `%s'\"),\n+\t     arch, subset);\n \t  free (subset);\n \t  return NULL;\n \t}\n@@ -1696,8 +1669,8 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n       if (!strcasecmp (last_name, subset))\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: duplicate prefixed ISA extension `%s'\"),\n-\t     march, subset);\n+\t    (_(\"%s: duplicate prefixed ISA extension `%s'\"),\n+\t     arch, subset);\n \t  free (subset);\n \t  return NULL;\n \t}\n@@ -1706,9 +1679,9 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n       if (riscv_compare_subsets (last_name, subset) > 0)\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: prefixed ISA extension `%s' is not in expected \"\n+\t    (_(\"%s: prefixed ISA extension `%s' is not in expected \"\n \t       \"order.  It must come before `%s'\"),\n-\t     march, subset, last_name);\n+\t     arch, subset, last_name);\n \t  free (subset);\n \t  return NULL;\n \t}\n@@ -1722,8 +1695,8 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n       if (*p != '\\0' && *p != '_')\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: prefixed ISA extension must separate with _\"),\n-\t     march);\n+\t    (_(\"%s: prefixed ISA extension must separate with _\"),\n+\t     arch);\n \t  return NULL;\n \t}\n     }\n@@ -1748,6 +1721,39 @@ riscv_parse_add_implicit_subsets (riscv_parse_subset_t *rps)\n     }\n }\n \n+/* Check extensions conflicts.  */\n+\n+static bool\n+riscv_parse_check_conflicts (riscv_parse_subset_t *rps)\n+{\n+  riscv_subset_t *subset = NULL;\n+  int xlen = *rps->xlen;\n+  bool no_conflict = true;\n+\n+  if (riscv_lookup_subset (rps->subset_list, \"e\", &subset)\n+      && xlen > 32)\n+    {\n+      rps->error_handler\n+\t(_(\"rv%d does not support the `e' extension\"), xlen);\n+      no_conflict = false;\n+    }\n+  if (riscv_lookup_subset (rps->subset_list, \"q\", &subset)\n+      && xlen < 64)\n+    {\n+      rps->error_handler\n+        (_(\"rv%d does not support the `q' extension\"), xlen);\n+      no_conflict = false;\n+    }\n+  if (riscv_lookup_subset (rps->subset_list, \"e\", &subset)\n+      && riscv_lookup_subset (rps->subset_list, \"f\", &subset))\n+    {\n+      rps->error_handler\n+        (_(\"rv32e does not support the `f' extension\"));\n+      no_conflict = false;\n+    }\n+  return no_conflict;\n+}\n+\n /* Function for parsing ISA string.\n \n    Return Value:\n@@ -1761,16 +1767,14 @@ bool\n riscv_parse_subset (riscv_parse_subset_t *rps,\n \t\t    const char *arch)\n {\n-  riscv_subset_t *subset = NULL;\n   const char *p;\n-  bool no_conflict = true;\n \n   for (p = arch; *p != '\\0'; p++)\n     {\n       if (ISUPPER (*p))\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: ISA string cannot contain uppercase letters\"),\n+\t    (_(\"%s: ISA string cannot contain uppercase letters\"),\n \t     arch);\n \t  return false;\n \t}\n@@ -1796,7 +1800,7 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n \t not issue this error when the ISA string is empty.  */\n       if (strlen (arch))\n \trps->error_handler (\n-\t  _(\"-march=%s: ISA string must begin with rv32 or rv64\"),\n+\t  _(\"%s: ISA string must begin with rv32 or rv64\"),\n \t  arch);\n       return false;\n     }\n@@ -1825,23 +1829,7 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n   riscv_parse_add_implicit_subsets (rps);\n \n   /* Check the conflicts.  */\n-  if (riscv_lookup_subset (rps->subset_list, \"e\", &subset)\n-      && riscv_lookup_subset (rps->subset_list, \"f\", &subset))\n-    {\n-      rps->error_handler\n-\t(_(\"-march=%s: rv32e does not support the `f' extension\"),\n-\t arch);\n-      no_conflict = false;\n-    }\n-  if (riscv_lookup_subset (rps->subset_list, \"q\", &subset)\n-      && *rps->xlen < 64)\n-    {\n-      rps->error_handler\n-\t(_(\"-march=%s: rv32 does not support the `q' extension\"),\n-\t arch);\n-      no_conflict = false;\n-    }\n-  return no_conflict;\n+  return riscv_parse_check_conflicts (rps);\n }\n \n /* Return the number of digits for the input.  */"
    },
    {
      "sha": "52fee96af3689a88ebdbe2bf9f34c615dae4c3d2",
      "filename": "gas/testsuite/gas/riscv/march-fail-base-02.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/gas/testsuite/gas/riscv/march-fail-base-02.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/gas/testsuite/gas/riscv/march-fail-base-02.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-base-02.l?ref=cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
      "patch": "@@ -1,2 +1,2 @@\n .*Assembler messages:\n-.*Error: .*rv64e is not a valid base ISA\n+.*Error: rv64 does not support the `e' extension"
    },
    {
      "sha": "834a4857c58786b0474fc4c2e1b6adb6c0cc8c1a",
      "filename": "gas/testsuite/gas/riscv/march-fail-unknown-std.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/gas/testsuite/gas/riscv/march-fail-unknown-std.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb959bd8956f9dfc39f7f9a5ee56c1606979d33e/gas/testsuite/gas/riscv/march-fail-unknown-std.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-unknown-std.l?ref=cb959bd8956f9dfc39f7f9a5ee56c1606979d33e",
      "patch": "@@ -1,2 +1,2 @@\n .*Assembler messages:\n-.*Error: .*unknown standard and prefixed ISA extension `y'\n+.*Error: .*unknown standard ISA extension `y'"
    }
  ]
}