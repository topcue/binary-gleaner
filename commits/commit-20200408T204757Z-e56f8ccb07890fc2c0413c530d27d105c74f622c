{
  "sha": "e56f8ccb07890fc2c0413c530d27d105c74f622c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTU2ZjhjY2IwNzg5MGZjMmMwNDEzYzUzMGQyN2QxMDVjNzRmNjIyYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:57Z"
    },
    "message": "Rename win32_thread_info to windows_thread_info\n\nThis renames win32_thread_info to windows_thread_info in gdbserver.\nThis renaming helps make it possible to share some code between gdb\nand gdbserver.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.h (struct windows_thread_info): Rename from\n\twin32_thread_info.  Remove typedef.\n\t(struct win32_target_ops, win32_require_context): Update.\n\t* win32-low.c (win32_get_thread_context)\n\t(win32_set_thread_context, win32_prepare_to_resume)\n\t(win32_require_context, thread_rec, child_add_thread)\n\t(delete_thread_info, continue_one_thread)\n\t(child_fetch_inferior_registers, child_store_inferior_registers)\n\t(win32_resume, suspend_one_thread, win32_get_tib_address):\n\tUpdate.\n\t* win32-i386-low.c (update_debug_registers)\n\t(win32_get_current_dr, i386_get_thread_context)\n\t(i386_prepare_to_resume, i386_thread_added, i386_single_step)\n\t(i386_fetch_inferior_register, i386_store_inferior_register):\n\tUpdate.\n\t* win32-arm-low.c (arm_get_thread_context)\n\t(arm_fetch_inferior_register, arm_store_inferior_register):\n\tUpdate.",
    "tree": {
      "sha": "5fefedb7c02d7e92add01e26a03055653c59044f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5fefedb7c02d7e92add01e26a03055653c59044f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e56f8ccb07890fc2c0413c530d27d105c74f622c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e56f8ccb07890fc2c0413c530d27d105c74f622c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e56f8ccb07890fc2c0413c530d27d105c74f622c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e56f8ccb07890fc2c0413c530d27d105c74f622c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "93366324f5232374bc19d94d94b5ed6159326240",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93366324f5232374bc19d94d94b5ed6159326240",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/93366324f5232374bc19d94d94b5ed6159326240"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 58,
    "deletions": 37
  },
  "files": [
    {
      "sha": "234d842ae1c299efd76cf02ffd93b339786f74f7",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=e56f8ccb07890fc2c0413c530d27d105c74f622c",
      "patch": "@@ -1,3 +1,24 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.h (struct windows_thread_info): Rename from\n+\twin32_thread_info.  Remove typedef.\n+\t(struct win32_target_ops, win32_require_context): Update.\n+\t* win32-low.c (win32_get_thread_context)\n+\t(win32_set_thread_context, win32_prepare_to_resume)\n+\t(win32_require_context, thread_rec, child_add_thread)\n+\t(delete_thread_info, continue_one_thread)\n+\t(child_fetch_inferior_registers, child_store_inferior_registers)\n+\t(win32_resume, suspend_one_thread, win32_get_tib_address):\n+\tUpdate.\n+\t* win32-i386-low.c (update_debug_registers)\n+\t(win32_get_current_dr, i386_get_thread_context)\n+\t(i386_prepare_to_resume, i386_thread_added, i386_single_step)\n+\t(i386_fetch_inferior_register, i386_store_inferior_register):\n+\tUpdate.\n+\t* win32-arm-low.c (arm_get_thread_context)\n+\t(arm_fetch_inferior_register, arm_store_inferior_register):\n+\tUpdate.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* linux-low.h (struct linux_target_ops): Remove."
    },
    {
      "sha": "c50c5dfdbf2b7016d3374d7839ec0320b1cb497a",
      "filename": "gdbserver/win32-arm-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-arm-low.cc?ref=e56f8ccb07890fc2c0413c530d27d105c74f622c",
      "patch": "@@ -27,7 +27,7 @@ void init_registers_arm (void);\n extern const struct target_desc *tdesc_arm;\n \n static void\n-arm_get_thread_context (win32_thread_info *th)\n+arm_get_thread_context (windows_thread_info *th)\n {\n   th->context.ContextFlags = \\\n     CONTEXT_FULL | \\\n@@ -88,7 +88,7 @@ regptr (CONTEXT* c, int r)\n /* Fetch register from gdbserver regcache data.  */\n static void\n arm_fetch_inferior_register (struct regcache *regcache,\n-\t\t\t     win32_thread_info *th, int r)\n+\t\t\t     windows_thread_info *th, int r)\n {\n   char *context_offset = regptr (&th->context, r);\n   supply_register (regcache, r, context_offset);\n@@ -97,7 +97,7 @@ arm_fetch_inferior_register (struct regcache *regcache,\n /* Store a new register value into the thread context of TH.  */\n static void\n arm_store_inferior_register (struct regcache *regcache,\n-\t\t\t     win32_thread_info *th, int r)\n+\t\t\t     windows_thread_info *th, int r)\n {\n   collect_register (regcache, r, regptr (&th->context, r));\n }"
    },
    {
      "sha": "29ee49fcd03515f00505ceb7075809a379e875ee",
      "filename": "gdbserver/win32-i386-low.cc",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-i386-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-i386-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-i386-low.cc?ref=e56f8ccb07890fc2c0413c530d27d105c74f622c",
      "patch": "@@ -40,7 +40,7 @@ static struct x86_debug_reg_state debug_reg_state;\n static void\n update_debug_registers (thread_info *thread)\n {\n-  win32_thread_info *th = (win32_thread_info *) thread_target_data (thread);\n+  windows_thread_info *th = (windows_thread_info *) thread_target_data (thread);\n \n   /* The actual update is done later just before resuming the lwp,\n      we just mark that the registers need updating.  */\n@@ -73,8 +73,8 @@ x86_dr_low_set_control (unsigned long control)\n static DWORD64\n win32_get_current_dr (int dr)\n {\n-  win32_thread_info *th\n-    = (win32_thread_info *) thread_target_data (current_thread);\n+  windows_thread_info *th\n+    = (windows_thread_info *) thread_target_data (current_thread);\n \n   win32_require_context (th);\n \n@@ -210,7 +210,7 @@ i386_initial_stuff (void)\n }\n \n static void\n-i386_get_thread_context (win32_thread_info *th)\n+i386_get_thread_context (windows_thread_info *th)\n {\n   /* Requesting the CONTEXT_EXTENDED_REGISTERS register set fails if\n      the system doesn't support extended registers.  */\n@@ -237,7 +237,7 @@ i386_get_thread_context (win32_thread_info *th)\n }\n \n static void\n-i386_prepare_to_resume (win32_thread_info *th)\n+i386_prepare_to_resume (windows_thread_info *th)\n {\n   if (th->debug_registers_changed)\n     {\n@@ -258,13 +258,13 @@ i386_prepare_to_resume (win32_thread_info *th)\n }\n \n static void\n-i386_thread_added (win32_thread_info *th)\n+i386_thread_added (windows_thread_info *th)\n {\n   th->debug_registers_changed = 1;\n }\n \n static void\n-i386_single_step (win32_thread_info *th)\n+i386_single_step (windows_thread_info *th)\n {\n   th->context.EFlags |= FLAG_TRACE_BIT;\n }\n@@ -398,7 +398,7 @@ static const int mappings[] =\n /* Fetch register from gdbserver regcache data.  */\n static void\n i386_fetch_inferior_register (struct regcache *regcache,\n-\t\t\t      win32_thread_info *th, int r)\n+\t\t\t      windows_thread_info *th, int r)\n {\n   char *context_offset = (char *) &th->context + mappings[r];\n \n@@ -420,7 +420,7 @@ i386_fetch_inferior_register (struct regcache *regcache,\n /* Store a new register value into the thread context of TH.  */\n static void\n i386_store_inferior_register (struct regcache *regcache,\n-\t\t\t      win32_thread_info *th, int r)\n+\t\t\t      windows_thread_info *th, int r)\n {\n   char *context_offset = (char *) &th->context + mappings[r];\n   collect_register (regcache, r, context_offset);"
    },
    {
      "sha": "55e8322cebbe89d6ecc8467da3915b07440a90ae",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=e56f8ccb07890fc2c0413c530d27d105c74f622c",
      "patch": "@@ -125,7 +125,7 @@ debug_event_ptid (DEBUG_EVENT *event)\n /* Get the thread context of the thread associated with TH.  */\n \n static void\n-win32_get_thread_context (win32_thread_info *th)\n+win32_get_thread_context (windows_thread_info *th)\n {\n   memset (&th->context, 0, sizeof (CONTEXT));\n   (*the_low_target.get_thread_context) (th);\n@@ -137,7 +137,7 @@ win32_get_thread_context (win32_thread_info *th)\n /* Set the thread context of the thread associated with TH.  */\n \n static void\n-win32_set_thread_context (win32_thread_info *th)\n+win32_set_thread_context (windows_thread_info *th)\n {\n #ifdef _WIN32_WCE\n   /* Calling SuspendThread on a thread that is running kernel code\n@@ -158,7 +158,7 @@ win32_set_thread_context (win32_thread_info *th)\n /* Set the thread context of the thread associated with TH.  */\n \n static void\n-win32_prepare_to_resume (win32_thread_info *th)\n+win32_prepare_to_resume (windows_thread_info *th)\n {\n   if (the_low_target.prepare_to_resume != NULL)\n     (*the_low_target.prepare_to_resume) (th);\n@@ -167,7 +167,7 @@ win32_prepare_to_resume (win32_thread_info *th)\n /* See win32-low.h.  */\n \n void\n-win32_require_context (win32_thread_info *th)\n+win32_require_context (windows_thread_info *th)\n {\n   if (th->context.ContextFlags == 0)\n     {\n@@ -189,30 +189,30 @@ win32_require_context (win32_thread_info *th)\n \n /* Find a thread record given a thread id.  If GET_CONTEXT is set then\n    also retrieve the context for this thread.  */\n-static win32_thread_info *\n+static windows_thread_info *\n thread_rec (ptid_t ptid, int get_context)\n {\n   thread_info *thread = find_thread_ptid (ptid);\n   if (thread == NULL)\n     return NULL;\n \n-  win32_thread_info *th = (win32_thread_info *) thread_target_data (thread);\n+  windows_thread_info *th = (windows_thread_info *) thread_target_data (thread);\n   if (get_context)\n     win32_require_context (th);\n   return th;\n }\n \n /* Add a thread to the thread list.  */\n-static win32_thread_info *\n+static windows_thread_info *\n child_add_thread (DWORD pid, DWORD tid, HANDLE h, void *tlb)\n {\n-  win32_thread_info *th;\n+  windows_thread_info *th;\n   ptid_t ptid = ptid_t (pid, tid, 0);\n \n   if ((th = thread_rec (ptid, FALSE)))\n     return th;\n \n-  th = XCNEW (win32_thread_info);\n+  th = XCNEW (windows_thread_info);\n   th->tid = tid;\n   th->h = h;\n   th->thread_local_base = (CORE_ADDR) (uintptr_t) tlb;\n@@ -229,7 +229,7 @@ child_add_thread (DWORD pid, DWORD tid, HANDLE h, void *tlb)\n static void\n delete_thread_info (thread_info *thread)\n {\n-  win32_thread_info *th = (win32_thread_info *) thread_target_data (thread);\n+  windows_thread_info *th = (windows_thread_info *) thread_target_data (thread);\n \n   remove_thread (thread);\n   CloseHandle (th->h);\n@@ -424,7 +424,7 @@ do_initial_child_stuff (HANDLE proch, DWORD pid, int attached)\n static void\n continue_one_thread (thread_info *thread, int thread_id)\n {\n-  win32_thread_info *th = (win32_thread_info *) thread_target_data (thread);\n+  windows_thread_info *th = (windows_thread_info *) thread_target_data (thread);\n \n   if (thread_id == -1 || thread_id == th->tid)\n     {\n@@ -473,7 +473,7 @@ static void\n child_fetch_inferior_registers (struct regcache *regcache, int r)\n {\n   int regno;\n-  win32_thread_info *th = thread_rec (current_thread_ptid (), TRUE);\n+  windows_thread_info *th = thread_rec (current_thread_ptid (), TRUE);\n   if (r == -1 || r > NUM_REGS)\n     child_fetch_inferior_registers (regcache, NUM_REGS);\n   else\n@@ -487,7 +487,7 @@ static void\n child_store_inferior_registers (struct regcache *regcache, int r)\n {\n   int regno;\n-  win32_thread_info *th = thread_rec (current_thread_ptid (), TRUE);\n+  windows_thread_info *th = thread_rec (current_thread_ptid (), TRUE);\n   if (r == -1 || r == 0 || r > NUM_REGS)\n     child_store_inferior_registers (regcache, NUM_REGS);\n   else\n@@ -911,7 +911,7 @@ win32_process_target::resume (thread_resume *resume_info, size_t n)\n   DWORD tid;\n   enum gdb_signal sig;\n   int step;\n-  win32_thread_info *th;\n+  windows_thread_info *th;\n   DWORD continue_status = DBG_CONTINUE;\n   ptid_t ptid;\n \n@@ -1349,7 +1349,7 @@ handle_exception (struct target_waitstatus *ourstatus)\n static void\n suspend_one_thread (thread_info *thread)\n {\n-  win32_thread_info *th = (win32_thread_info *) thread_target_data (thread);\n+  windows_thread_info *th = (windows_thread_info *) thread_target_data (thread);\n \n   if (!th->suspended)\n     {\n@@ -1835,7 +1835,7 @@ win32_process_target::supports_get_tib_address ()\n int\n win32_process_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n {\n-  win32_thread_info *th;\n+  windows_thread_info *th;\n   th = thread_rec (ptid, 0);\n   if (th == NULL)\n     return 0;"
    },
    {
      "sha": "2bd94e85288288e2f5f37208cbeaa0ab74e2d090",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e56f8ccb07890fc2c0413c530d27d105c74f622c/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=e56f8ccb07890fc2c0413c530d27d105c74f622c",
      "patch": "@@ -29,7 +29,7 @@ extern const struct target_desc *win32_tdesc;\n \n /* Thread information structure used to track extra information about\n    each thread.  */\n-typedef struct win32_thread_info\n+struct windows_thread_info\n {\n   /* The Win32 thread identifier.  */\n   DWORD tid;\n@@ -54,7 +54,7 @@ typedef struct win32_thread_info\n   /* Whether debug registers changed since we last set CONTEXT back to\n      the thread.  */\n   int debug_registers_changed;\n-} win32_thread_info;\n+};\n \n struct win32_target_ops\n {\n@@ -68,23 +68,23 @@ struct win32_target_ops\n   void (*initial_stuff) (void);\n \n   /* Fetch the context from the inferior.  */\n-  void (*get_thread_context) (win32_thread_info *th);\n+  void (*get_thread_context) (windows_thread_info *th);\n \n   /* Called just before resuming the thread.  */\n-  void (*prepare_to_resume) (win32_thread_info *th);\n+  void (*prepare_to_resume) (windows_thread_info *th);\n \n   /* Called when a thread was added.  */\n-  void (*thread_added) (win32_thread_info *th);\n+  void (*thread_added) (windows_thread_info *th);\n \n   /* Fetch register from gdbserver regcache data.  */\n   void (*fetch_inferior_register) (struct regcache *regcache,\n-\t\t\t\t   win32_thread_info *th, int r);\n+\t\t\t\t   windows_thread_info *th, int r);\n \n   /* Store a new register value into the thread context of TH.  */\n   void (*store_inferior_register) (struct regcache *regcache,\n-\t\t\t\t   win32_thread_info *th, int r);\n+\t\t\t\t   windows_thread_info *th, int r);\n \n-  void (*single_step) (win32_thread_info *th);\n+  void (*single_step) (windows_thread_info *th);\n \n   const unsigned char *breakpoint;\n   int breakpoint_len;\n@@ -171,7 +171,7 @@ class win32_process_target : public process_stratum_target\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */\n-extern void win32_require_context (win32_thread_info *th);\n+extern void win32_require_context (windows_thread_info *th);\n \n /* Map the Windows error number in ERROR to a locale-dependent error\n    message string and return a pointer to it.  Typically, the values"
    }
  ]
}