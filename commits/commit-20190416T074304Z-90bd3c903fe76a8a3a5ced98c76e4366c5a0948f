{
  "sha": "90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTBiZDNjOTAzZmU3NmE4YTNhNWNlZDk4Yzc2ZTQzNjZjNWEwOTQ4Zg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-16T01:40:44Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-16T07:43:04Z"
    },
    "message": "Make fixup fx_where unsigned\n\nAnother field that only stores unsigned values.\n\n\t* write.h (struct fix <fx_where>): Make unsigned.\n\t(fix_new, fix_at_start, fix_new_exp): Adjust prototypes.\n\t* write.c (fix_new, fix_new_exp, fix_at_start): Make \"where\" and\n\t\"size\" parameters unsigned long.\n\t(fix_new_internal): Likewise.  Adjust error format string to suit.\n\t* config/tc-mips.c (md_convert_frag): Remove cast of fx_where.\n\t* config/tc-sparc.c (md_apply_fix): Likewise.\n\t* config/tc-score.c (s3_convert_frag): Adjust for unsigned fx_where.\n\t* config/tc-score7.c (s7_convert_frag): Likewise.",
    "tree": {
      "sha": "883b93e7f2f76a5fdd2e8eabe16e3a5ae831dc4f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/883b93e7f2f76a5fdd2e8eabe16e3a5ae831dc4f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "871a6bd2d852b0fb677386e1be78c3f4c6939b48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/871a6bd2d852b0fb677386e1be78c3f4c6939b48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/871a6bd2d852b0fb677386e1be78c3f4c6939b48"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 36,
    "deletions": 27
  },
  "files": [
    {
      "sha": "4a08de155cd16bf97916646b3b9d4f6be1ea414c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -1,3 +1,15 @@\n+2019-04-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* write.h (struct fix <fx_where>): Make unsigned.\n+\t(fix_new, fix_at_start, fix_new_exp): Adjust prototypes.\n+\t* write.c (fix_new, fix_new_exp, fix_at_start): Make \"where\" and\n+\t\"size\" parameters unsigned long.\n+\t(fix_new_internal): Likewise.  Adjust error format string to suit.\n+\t* config/tc-mips.c (md_convert_frag): Remove cast of fx_where.\n+\t* config/tc-sparc.c (md_apply_fix): Likewise.\n+\t* config/tc-score.c (s3_convert_frag): Adjust for unsigned fx_where.\n+\t* config/tc-score7.c (s7_convert_frag): Likewise.\n+\n 2019-04-16  Alan Modra  <amodra@gmail.com>\n \n \t* frags.h (struct frag <fr_fix>): Use unsigned type."
    },
    {
      "sha": "94141e937ea5ff9c3f3430d4beed62000ac059c3",
      "filename": "gas/config/tc-mips.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mips.c?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -19099,7 +19099,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec, fragS *fragp)\n \t sequence instead.  */\n       while (fixp\n \t     && fixp->fx_frag == fragp\n-\t     && (valueT) fixp->fx_where + second < fragp->fr_fix)\n+\t     && fixp->fx_where + second < fragp->fr_fix)\n \t{\n \t  if (subtype & RELAX_USE_SECOND)\n \t    fixp->fx_done = 1;"
    },
    {
      "sha": "4bbeeb025702b25adb5fbbc92ec70ae68bad36e6",
      "filename": "gas/config/tc-score.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-score.c?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -7011,8 +7011,8 @@ s3_relax_frag (asection * sec ATTRIBUTE_UNUSED, fragS * fragp, long stretch ATTR\n static void\n s3_convert_frag (bfd * abfd ATTRIBUTE_UNUSED, segT sec ATTRIBUTE_UNUSED, fragS * fragp)\n {\n-  int r_old;\n-  int r_new;\n+  unsigned int r_old;\n+  unsigned int r_new;\n   char backup[20];\n   fixS *fixp;\n "
    },
    {
      "sha": "f60ab494b882af6662bf191330ec1142cb6729b8",
      "filename": "gas/config/tc-score7.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-score7.c?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -6562,8 +6562,8 @@ s7_convert_frag (bfd * abfd ATTRIBUTE_UNUSED,\n \t\t segT sec ATTRIBUTE_UNUSED,\n \t\t fragS * fragp)\n {\n-  int r_old;\n-  int r_new;\n+  unsigned int r_old;\n+  unsigned int r_new;\n   char backup[20];\n   fixS *fixp;\n "
    },
    {
      "sha": "347db08173a8948ef1ecb970dbf36267ff8905ef",
      "filename": "gas/config/tc-sparc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/config/tc-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-sparc.c?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -3566,7 +3566,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT segment ATTRIBUTE_UNUSED)\n              can be completely resolved here, i.e. if no undefined\n              symbol is associated with it.  */\n \t  if (sparc_relax && fixP->fx_addsy == NULL\n-\t      && (valueT) fixP->fx_where + 8 <= fixP->fx_frag->fr_fix)\n+\t      && fixP->fx_where + 8 <= fixP->fx_frag->fr_fix)\n \t    {\n #define G0\t\t0\n #define O7\t\t15"
    },
    {
      "sha": "91767fbb36d181b0cd8ea97170a9c0fbddff7014",
      "filename": "gas/write.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.c?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -143,8 +143,8 @@ static int n_fixups;\n \n static fixS *\n fix_new_internal (fragS *frag,\t\t/* Which frag?  */\n-\t\t  int where,\t\t/* Where in that frag?  */\n-\t\t  int size,\t\t/* 1, 2, or 4 usually.  */\n+\t\t  unsigned long where,\t/* Where in that frag?  */\n+\t\t  unsigned long size,\t/* 1, 2, or 4 usually.  */\n \t\t  symbolS *add_symbol,\t/* X_add_symbol.  */\n \t\t  symbolS *sub_symbol,\t/* X_op_symbol.  */\n \t\t  offsetT offset,\t/* X_add_number.  */\n@@ -164,7 +164,7 @@ fix_new_internal (fragS *frag,\t\t/* Which frag?  */\n   /* We've made fx_size a narrow field; check that it's wide enough.  */\n   if (fixP->fx_size != size)\n     {\n-      as_bad (_(\"field fx_size too small to hold %d\"), size);\n+      as_bad (_(\"field fx_size too small to hold %lu\"), size);\n       abort ();\n     }\n   fixP->fx_addsy = add_symbol;\n@@ -228,10 +228,10 @@ fix_new_internal (fragS *frag,\t\t/* Which frag?  */\n /* Create a fixup relative to a symbol (plus a constant).  */\n \n fixS *\n-fix_new (fragS *frag,\t\t/* Which frag?  */\n-\t int where,\t\t\t/* Where in that frag?  */\n-\t int size,\t\t\t/* 1, 2, or 4 usually.  */\n-\t symbolS *add_symbol,\t/* X_add_symbol.  */\n+fix_new (fragS *frag,\t\t\t/* Which frag?  */\n+\t unsigned long where,\t\t/* Where in that frag?  */\n+\t unsigned long size,\t\t/* 1, 2, or 4 usually.  */\n+\t symbolS *add_symbol,\t\t/* X_add_symbol.  */\n \t offsetT offset,\t\t/* X_add_number.  */\n \t int pcrel,\t\t\t/* TRUE if PC-relative relocation.  */\n \t RELOC_ENUM r_type\t\t/* Relocation type.  */)\n@@ -246,8 +246,8 @@ fix_new (fragS *frag,\t\t/* Which frag?  */\n \n fixS *\n fix_new_exp (fragS *frag,\t\t/* Which frag?  */\n-\t     int where,\t\t\t/* Where in that frag?  */\n-\t     int size,\t\t\t/* 1, 2, or 4 usually.  */\n+\t     unsigned long where,\t/* Where in that frag?  */\n+\t     unsigned long size,\t/* 1, 2, or 4 usually.  */\n \t     expressionS *exp,\t\t/* Expression.  */\n \t     int pcrel,\t\t\t/* TRUE if PC-relative relocation.  */\n \t     RELOC_ENUM r_type\t\t/* Relocation type.  */)\n@@ -313,7 +313,7 @@ fix_new_exp (fragS *frag,\t\t/* Which frag?  */\n    as for fix_new, except that WHERE is implicitly 0.  */\n \n fixS *\n-fix_at_start (fragS *frag, int size, symbolS *add_symbol,\n+fix_at_start (fragS *frag, unsigned long size, symbolS *add_symbol,\n \t      offsetT offset, int pcrel, RELOC_ENUM r_type)\n {\n   return fix_new_internal (frag, 0, size, add_symbol,"
    },
    {
      "sha": "a69ec3cd17c5dc90e4c3e977d34435b56dfc04a4",
      "filename": "gas/write.h",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/write.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90bd3c903fe76a8a3a5ced98c76e4366c5a0948f/gas/write.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.h?ref=90bd3c903fe76a8a3a5ced98c76e4366c5a0948f",
      "patch": "@@ -84,8 +84,8 @@ struct fix\n   /* Which frag does this fix apply to?  */\n   fragS *fx_frag;\n \n-  /* Where is the first byte to fix up?  */\n-  long fx_where;\n+  /* The location within the frag where the fixup occurs.  */\n+  unsigned long fx_where;\n \n   /* NULL or Symbol whose value we add in.  */\n   symbolS *fx_addsy;\n@@ -183,15 +183,12 @@ extern long relax_frag (segT, fragS *, long);\n extern int relax_segment (struct frag *, segT, int);\n extern void number_to_chars_littleendian (char *, valueT, int);\n extern void number_to_chars_bigendian (char *, valueT, int);\n-extern fixS *fix_new\n-  (fragS * frag, int where, int size, symbolS * add_symbol,\n-   offsetT offset, int pcrel, bfd_reloc_code_real_type r_type);\n-extern fixS *fix_at_start\n-  (fragS * frag, int size, symbolS * add_symbol,\n-   offsetT offset, int pcrel, bfd_reloc_code_real_type r_type);\n-extern fixS *fix_new_exp\n-  (fragS * frag, int where, int size, expressionS *exp, int pcrel,\n-   bfd_reloc_code_real_type r_type);\n+extern fixS *fix_new (fragS *, unsigned long, unsigned long, symbolS *,\n+\t\t      offsetT, int, bfd_reloc_code_real_type);\n+extern fixS *fix_at_start (fragS *, unsigned long, symbolS *,\n+\t\t\t   offsetT, int, bfd_reloc_code_real_type);\n+extern fixS *fix_new_exp (fragS *, unsigned long, unsigned long,\n+\t\t\t  expressionS *, int, bfd_reloc_code_real_type);\n extern void write_print_statistics (FILE *);\n \n #endif /* __write_h__ */"
    }
  ]
}