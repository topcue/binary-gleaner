{
  "sha": "ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWMxYmJhY2ExMDY2NmZjODU1NzJhNmRlZWFhNmYxZGViY2Q0YzEyOQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:27Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:27Z"
    },
    "message": "gdbserver/linux-low: turn watchpoint ops into methods\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'stopped_by_watchpoint' and 'stopped_data_address' linux\n\ttarget ops into methods of linux_process_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the ops.\n\t(class linux_process_target) <check_stopped_by_watchpoint>\n\t<low_stopped_by_watchpoint>\n\t<low_stopped_data_address>: Declare.\n\t* linux-low.cc (check_stopped_by_watchpoint): Turn into...\n\t(linux_process_target::check_stopped_by_watchpoint): ...this.\n\t(linux_process_target::low_stopped_by_watchpoint): Define.\n\t(linux_process_target::low_stopped_data_address): Define.\n\t* linux-x86-low.cc (class x86_target) <low_stopped_by_watchpoint>\n\t<low_stopped_data_address>: Declare.\n\t(x86_stopped_by_watchpoint): Turn into...\n\t(x86_target::low_stopped_by_watchpoint): ...this.\n\t(x86_stopped_data_address): Turn into...\n\t(x86_target::low_stopped_data_address): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-aarch64-low.cc (class aarch64_target)\n\t<low_stopped_by_watchpoint>\n\t<low_stopped_data_address>: Declare.\n\t(aarch64_stopped_by_watchpoint): Turn into...\n\t(aarch64_target::low_stopped_by_watchpoint): ...this.\n\t(aarch64_stopped_data_address): Turn into...\n\t(aarch64_target::low_stopped_data_address): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-arm-low.cc (class arm_target) <low_stopped_by_watchpoint>\n\t<low_stopped_data_address>: Declare.\n\t(arm_stopped_by_watchpoint): Turn into...\n\t(arm_target::low_stopped_by_watchpoint): ...this.\n\t(arm_stopped_data_address): Turn into...\n\t(arm_target::low_stopped_data_address): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-crisv32-low.cc (class crisv32_target)\n\t<low_stopped_by_watchpoint>\n\t<low_stopped_data_address>: Declare.\n\t(cris_stopped_by_watchpoint): Turn into...\n\t(crisv32_target::low_stopped_by_watchpoint): ...this.\n\t(cris_stopped_data_address): Turn into...\n\t(crisv32_target::low_stopped_data_address): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-mips-low.cc (class mips_target) <low_stopped_by_watchpoint>\n\t<low_stopped_data_address>: Declare.\n\t(mips_stopped_by_watchpoint): Turn into...\n\t(mips_target::low_stopped_by_watchpoint): ...this.\n\t(mips_stopped_data_address): Turn into...\n\t(mips_target::low_stopped_data_address): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-bfin-low.cc (the_low_target): Remove the op fields.\n\t* linux-m32r-low.cc (the_low_target): Ditto.\n\t* linux-m68k-low.cc (the_low_target): Ditto.\n\t* linux-ppc-low.cc (the_low_target): Ditto.\n\t* linux-s390-low.cc (the_low_target): Ditto.\n\t* linux-sh-low.cc (the_low_target): Ditto.\n\t* linux-sparc-low.cc (the_low_target): Ditto.\n\t* linux-tic6x-low.cc (the_low_target): Ditto.\n\t* linux-tile-low.cc (the_low_target): Ditto.\n\t* linux-xtensa-low.cc (the_low_target): Ditto.",
    "tree": {
      "sha": "1e69bc95276e49e8fe0cbe442d97287e3fd603ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1e69bc95276e49e8fe0cbe442d97287e3fd603ef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9db9aa232ac37e4dca92733678748adc1bfc7ef0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9db9aa232ac37e4dca92733678748adc1bfc7ef0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9db9aa232ac37e4dca92733678748adc1bfc7ef0"
    }
  ],
  "stats": {
    "total": 263,
    "additions": 157,
    "deletions": 106
  },
  "files": [
    {
      "sha": "0b17ea5be2609bb6b736ed39afde12a081527b66",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -1,3 +1,64 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'stopped_by_watchpoint' and 'stopped_data_address' linux\n+\ttarget ops into methods of linux_process_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the ops.\n+\t(class linux_process_target) <check_stopped_by_watchpoint>\n+\t<low_stopped_by_watchpoint>\n+\t<low_stopped_data_address>: Declare.\n+\t* linux-low.cc (check_stopped_by_watchpoint): Turn into...\n+\t(linux_process_target::check_stopped_by_watchpoint): ...this.\n+\t(linux_process_target::low_stopped_by_watchpoint): Define.\n+\t(linux_process_target::low_stopped_data_address): Define.\n+\t* linux-x86-low.cc (class x86_target) <low_stopped_by_watchpoint>\n+\t<low_stopped_data_address>: Declare.\n+\t(x86_stopped_by_watchpoint): Turn into...\n+\t(x86_target::low_stopped_by_watchpoint): ...this.\n+\t(x86_stopped_data_address): Turn into...\n+\t(x86_target::low_stopped_data_address): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-aarch64-low.cc (class aarch64_target)\n+\t<low_stopped_by_watchpoint>\n+\t<low_stopped_data_address>: Declare.\n+\t(aarch64_stopped_by_watchpoint): Turn into...\n+\t(aarch64_target::low_stopped_by_watchpoint): ...this.\n+\t(aarch64_stopped_data_address): Turn into...\n+\t(aarch64_target::low_stopped_data_address): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-arm-low.cc (class arm_target) <low_stopped_by_watchpoint>\n+\t<low_stopped_data_address>: Declare.\n+\t(arm_stopped_by_watchpoint): Turn into...\n+\t(arm_target::low_stopped_by_watchpoint): ...this.\n+\t(arm_stopped_data_address): Turn into...\n+\t(arm_target::low_stopped_data_address): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-crisv32-low.cc (class crisv32_target)\n+\t<low_stopped_by_watchpoint>\n+\t<low_stopped_data_address>: Declare.\n+\t(cris_stopped_by_watchpoint): Turn into...\n+\t(crisv32_target::low_stopped_by_watchpoint): ...this.\n+\t(cris_stopped_data_address): Turn into...\n+\t(crisv32_target::low_stopped_data_address): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-mips-low.cc (class mips_target) <low_stopped_by_watchpoint>\n+\t<low_stopped_data_address>: Declare.\n+\t(mips_stopped_by_watchpoint): Turn into...\n+\t(mips_target::low_stopped_by_watchpoint): ...this.\n+\t(mips_stopped_data_address): Turn into...\n+\t(mips_target::low_stopped_data_address): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-bfin-low.cc (the_low_target): Remove the op fields.\n+\t* linux-m32r-low.cc (the_low_target): Ditto.\n+\t* linux-m68k-low.cc (the_low_target): Ditto.\n+\t* linux-ppc-low.cc (the_low_target): Ditto.\n+\t* linux-s390-low.cc (the_low_target): Ditto.\n+\t* linux-sh-low.cc (the_low_target): Ditto.\n+\t* linux-sparc-low.cc (the_low_target): Ditto.\n+\t* linux-tic6x-low.cc (the_low_target): Ditto.\n+\t* linux-tile-low.cc (the_low_target): Ditto.\n+\t* linux-xtensa-low.cc (the_low_target): Ditto.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn the 'insert_point' and 'remove_point' linux target ops into"
    },
    {
      "sha": "96f8f46d4ee000b08925bfa6bf5c92c38284e333",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -86,6 +86,10 @@ class aarch64_target : public linux_process_target\n \n   int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\tint size, raw_breakpoint *bp) override;\n+\n+  bool low_stopped_by_watchpoint () override;\n+\n+  CORE_ADDR low_stopped_data_address () override;\n };\n \n /* The singleton target ops object.  */\n@@ -409,10 +413,10 @@ aarch64_target::low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n   return ret;\n }\n \n-/* Implementation of linux_target_ops method \"stopped_data_address\".  */\n+/* Implementation of linux target ops method \"low_stopped_data_address\".  */\n \n-static CORE_ADDR\n-aarch64_stopped_data_address (void)\n+CORE_ADDR\n+aarch64_target::low_stopped_data_address ()\n {\n   siginfo_t siginfo;\n   int pid, i;\n@@ -471,15 +475,12 @@ aarch64_stopped_data_address (void)\n   return (CORE_ADDR) 0;\n }\n \n-/* Implementation of linux_target_ops method \"stopped_by_watchpoint\".  */\n+/* Implementation of linux target ops method \"low_stopped_by_watchpoint\".  */\n \n-static int\n-aarch64_stopped_by_watchpoint (void)\n+bool\n+aarch64_target::low_stopped_by_watchpoint ()\n {\n-  if (aarch64_stopped_data_address () != 0)\n-    return 1;\n-  else\n-    return 0;\n+  return (low_stopped_data_address () != 0);\n }\n \n /* Fetch the thread-local storage pointer for libthread_db.  */\n@@ -3112,8 +3113,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_stopped_by_watchpoint,\n-  aarch64_stopped_data_address,\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   aarch64_linux_siginfo_fixup,"
    },
    {
      "sha": "2593dfa0eeef26d205251b0fc76d2d5f390260c5",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -95,6 +95,10 @@ class arm_target : public linux_process_target\n \n   int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\tint size, raw_breakpoint *bp) override;\n+\n+  bool low_stopped_by_watchpoint () override;\n+\n+  CORE_ADDR low_stopped_data_address () override;\n };\n \n /* The singleton target ops object.  */\n@@ -672,43 +676,43 @@ arm_target::low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n }\n \n /* Return whether current thread is stopped due to a watchpoint.  */\n-static int\n-arm_stopped_by_watchpoint (void)\n+bool\n+arm_target::low_stopped_by_watchpoint ()\n {\n   struct lwp_info *lwp = get_thread_lwp (current_thread);\n   siginfo_t siginfo;\n \n   /* We must be able to set hardware watchpoints.  */\n   if (arm_linux_get_hw_watchpoint_count () == 0)\n-    return 0;\n+    return false;\n \n   /* Retrieve siginfo.  */\n   errno = 0;\n   ptrace (PTRACE_GETSIGINFO, lwpid_of (current_thread), 0, &siginfo);\n   if (errno != 0)\n-    return 0;\n+    return false;\n \n   /* This must be a hardware breakpoint.  */\n   if (siginfo.si_signo != SIGTRAP\n       || (siginfo.si_code & 0xffff) != 0x0004 /* TRAP_HWBKPT */)\n-    return 0;\n+    return false;\n \n   /* If we are in a positive slot then we're looking at a breakpoint and not\n      a watchpoint.  */\n   if (siginfo.si_errno >= 0)\n-    return 0;\n+    return false;\n \n   /* Cache stopped data address for use by arm_stopped_data_address.  */\n   lwp->arch_private->stopped_data_address\n     = (CORE_ADDR) (uintptr_t) siginfo.si_addr;\n \n-  return 1;\n+  return true;\n }\n \n /* Return data address that triggered watchpoint.  Called only if\n-   arm_stopped_by_watchpoint returned true.  */\n-static CORE_ADDR\n-arm_stopped_data_address (void)\n+   low_stopped_by_watchpoint returned true.  */\n+CORE_ADDR\n+arm_target::low_stopped_data_address ()\n {\n   struct lwp_info *lwp = get_thread_lwp (current_thread);\n   return lwp->arch_private->stopped_data_address;\n@@ -1101,8 +1105,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_stopped_by_watchpoint,\n-  arm_stopped_data_address,\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "bc3e312c18f64943af7ba3ea95c1f47313f08f32",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -171,8 +171,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "fd458350d5a5196a1492f5e3efc4ccf138a058e4",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -53,6 +53,10 @@ class crisv32_target : public linux_process_target\n \n   int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\tint size, raw_breakpoint *bp) override;\n+\n+  bool low_stopped_by_watchpoint () override;\n+\n+  CORE_ADDR low_stopped_data_address () override;\n };\n \n /* The singleton target ops object.  */\n@@ -355,8 +359,8 @@ crisv32_target::low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n   return 0;\n }\n \n-static int\n-cris_stopped_by_watchpoint (void)\n+bool\n+crisv32_target::low_stopped_by_watchpoint ()\n {\n   unsigned long exs;\n   struct regcache *regcache = get_thread_regcache (current_thread, 1);\n@@ -366,8 +370,8 @@ cris_stopped_by_watchpoint (void)\n   return (((exs & 0xff00) >> 8) == 0xc);\n }\n \n-static CORE_ADDR\n-cris_stopped_data_address (void)\n+CORE_ADDR\n+crisv32_target::low_stopped_data_address ()\n {\n   unsigned long eda;\n   struct regcache *regcache = get_thread_regcache (current_thread, 1);\n@@ -464,8 +468,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_stopped_by_watchpoint,\n-  cris_stopped_data_address,\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "998bd1d05953d82b77a3290ac97aa99897fedca7",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 21,
      "deletions": 36,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -786,8 +786,6 @@ get_syscall_trapinfo (struct lwp_info *lwp, int *sysno)\n   current_thread = saved_thread;\n }\n \n-static int check_stopped_by_watchpoint (struct lwp_info *child);\n-\n bool\n linux_process_target::save_stop_reason (lwp_info *lwp)\n {\n@@ -2245,46 +2243,33 @@ dequeue_one_deferred_signal (struct lwp_info *lwp, int *wstat)\n   return 0;\n }\n \n-/* Fetch the possibly triggered data watchpoint info and store it in\n-   CHILD.\n-\n-   On some archs, like x86, that use debug registers to set\n-   watchpoints, it's possible that the way to know which watched\n-   address trapped, is to check the register that is used to select\n-   which address to watch.  Problem is, between setting the watchpoint\n-   and reading back which data address trapped, the user may change\n-   the set of watchpoints, and, as a consequence, GDB changes the\n-   debug registers in the inferior.  To avoid reading back a stale\n-   stopped-data-address when that happens, we cache in LP the fact\n-   that a watchpoint trapped, and the corresponding data address, as\n-   soon as we see CHILD stop with a SIGTRAP.  If GDB changes the debug\n-   registers meanwhile, we have the cached data we can rely on.  */\n-\n-static int\n-check_stopped_by_watchpoint (struct lwp_info *child)\n+bool\n+linux_process_target::check_stopped_by_watchpoint (lwp_info *child)\n {\n-  if (the_low_target.stopped_by_watchpoint != NULL)\n-    {\n-      struct thread_info *saved_thread;\n+  struct thread_info *saved_thread = current_thread;\n+  current_thread = get_lwp_thread (child);\n \n-      saved_thread = current_thread;\n-      current_thread = get_lwp_thread (child);\n+  if (low_stopped_by_watchpoint ())\n+    {\n+      child->stop_reason = TARGET_STOPPED_BY_WATCHPOINT;\n+      child->stopped_data_address = low_stopped_data_address ();\n+    }\n \n-      if (the_low_target.stopped_by_watchpoint ())\n-\t{\n-\t  child->stop_reason = TARGET_STOPPED_BY_WATCHPOINT;\n+  current_thread = saved_thread;\n \n-\t  if (the_low_target.stopped_data_address != NULL)\n-\t    child->stopped_data_address\n-\t      = the_low_target.stopped_data_address ();\n-\t  else\n-\t    child->stopped_data_address = 0;\n-\t}\n+  return child->stop_reason == TARGET_STOPPED_BY_WATCHPOINT;\n+}\n \n-      current_thread = saved_thread;\n-    }\n+bool\n+linux_process_target::low_stopped_by_watchpoint ()\n+{\n+  return false;\n+}\n \n-  return child->stop_reason == TARGET_STOPPED_BY_WATCHPOINT;\n+CORE_ADDR\n+linux_process_target::low_stopped_data_address ()\n+{\n+  return 0;\n }\n \n /* Return the ptrace options that we want to try to enable.  */"
    },
    {
      "sha": "ee2fdb8e865b93e4658e6001cdfeccd226a8b000",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 20,
      "deletions": 3,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -131,9 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  int (*stopped_by_watchpoint) (void);\n-  CORE_ADDR (*stopped_data_address) (void);\n-\n   /* Hooks to reformat register data for PEEKUSR/POKEUSR (in particular\n      for registers smaller than an xfer unit).  */\n   void (*collect_ptrace_register) (struct regcache *regcache,\n@@ -622,6 +619,22 @@ class linux_process_target : public process_stratum_target\n   /* Install breakpoints for software single stepping.  */\n   void install_software_single_step_breakpoints (lwp_info *lwp);\n \n+  /* Fetch the possibly triggered data watchpoint info and store it in\n+     CHILD.\n+\n+     On some archs, like x86, that use debug registers to set\n+     watchpoints, it's possible that the way to know which watched\n+     address trapped, is to check the register that is used to select\n+     which address to watch.  Problem is, between setting the watchpoint\n+     and reading back which data address trapped, the user may change\n+     the set of watchpoints, and, as a consequence, GDB changes the\n+     debug registers in the inferior.  To avoid reading back a stale\n+     stopped-data-address when that happens, we cache in LP the fact\n+     that a watchpoint trapped, and the corresponding data address, as\n+     soon as we see CHILD stop with a SIGTRAP.  If GDB changes the debug\n+     registers meanwhile, we have the cached data we can rely on.  */\n+  bool check_stopped_by_watchpoint (lwp_info *child);\n+\n protected:\n   /* The architecture-specific \"low\" methods are listed below.  */\n \n@@ -665,6 +678,10 @@ class linux_process_target : public process_stratum_target\n   virtual int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\t\tint size, raw_breakpoint *bp);\n \n+  virtual bool low_stopped_by_watchpoint ();\n+\n+  virtual CORE_ADDR low_stopped_data_address ();\n+\n   /* How many bytes the PC should be decremented after a break.  */\n   virtual int low_decr_pc_after_break ();\n };"
    },
    {
      "sha": "14bb83797d9912b4e4f6d672d70a20bfb01c1791",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -161,8 +161,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "7cb80bc2af49b80621c1b46025e9c4ba65f2bb47",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -265,8 +265,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "3c2231bda303d86407d3ab1ac64c8e72f210b5b9",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -60,6 +60,10 @@ class mips_target : public linux_process_target\n \n   int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\tint size, raw_breakpoint *bp) override;\n+\n+  bool low_stopped_by_watchpoint () override;\n+\n+  CORE_ADDR low_stopped_data_address () override;\n };\n \n /* The singleton target ops object.  */\n@@ -608,12 +612,12 @@ mips_target::low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n   return 0;\n }\n \n-/* This is the implementation of linux_target_ops method\n-   stopped_by_watchpoint.  The watchhi R and W bits indicate\n+/* This is the implementation of linux target ops method\n+   low_stopped_by_watchpoint.  The watchhi R and W bits indicate\n    the watch register triggered. */\n \n-static int\n-mips_stopped_by_watchpoint (void)\n+bool\n+mips_target::low_stopped_by_watchpoint ()\n {\n   struct process_info *proc = current_process ();\n   struct arch_process_info *priv = proc->priv->arch_private;\n@@ -632,16 +636,16 @@ mips_stopped_by_watchpoint (void)\n   for (n = 0; n < MAX_DEBUG_REGISTER && n < num_valid; n++)\n     if (mips_linux_watch_get_watchhi (&priv->watch_readback, n)\n \t& (R_MASK | W_MASK))\n-      return 1;\n+      return true;\n \n-  return 0;\n+  return false;\n }\n \n-/* This is the implementation of linux_target_ops method\n-   stopped_data_address.  */\n+/* This is the implementation of linux target ops method\n+   low_stopped_data_address.  */\n \n-static CORE_ADDR\n-mips_stopped_data_address (void)\n+CORE_ADDR\n+mips_target::low_stopped_data_address ()\n {\n   struct process_info *proc = current_process ();\n   struct arch_process_info *priv = proc->priv->arch_private;\n@@ -976,8 +980,6 @@ mips_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  mips_stopped_by_watchpoint,\n-  mips_stopped_data_address,\n   mips_collect_ptrace_register,\n   mips_supply_ptrace_register,\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "deb2ef64f1270e906b4dcbe68e323d140fc5b680",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -3416,8 +3416,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL,\n-  NULL,\n   ppc_collect_ptrace_register,\n   ppc_supply_ptrace_register,\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "9e7db23e5d0325f1a33c5feb5f8bb189ad0f7355",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -2838,8 +2838,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL,\n-  NULL,\n   s390_collect_ptrace_register,\n   s390_supply_ptrace_register,\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "a2215ddb4bc92e3ddec5d64a06e8f8d720a9402f",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -192,8 +192,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "8d1b61b0631ef79cccb3a969ac60f498133f731f",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -341,7 +341,6 @@ sparc_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, NULL,\n   NULL, NULL\n };\n "
    },
    {
      "sha": "9ff23969c6c4433b4f4cd457643aeebd77731da3",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -423,8 +423,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "6efd7b2c8c37f8235ed8a1bcf3ec8de5699fc3e5",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -224,8 +224,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    },
    {
      "sha": "1c6e9b1d100273e4cfbe45e50570fee424917f3e",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -133,6 +133,10 @@ class x86_target : public linux_process_target\n \n   int low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n \t\t\tint size, raw_breakpoint *bp) override;\n+\n+  bool low_stopped_by_watchpoint () override;\n+\n+  CORE_ADDR low_stopped_data_address () override;\n };\n \n /* The singleton target ops object.  */\n@@ -661,15 +665,15 @@ x86_target::low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n     }\n }\n \n-static int\n-x86_stopped_by_watchpoint (void)\n+bool\n+x86_target::low_stopped_by_watchpoint ()\n {\n   struct process_info *proc = current_process ();\n   return x86_dr_stopped_by_watchpoint (&proc->priv->arch_private->debug_reg_state);\n }\n \n-static CORE_ADDR\n-x86_stopped_data_address (void)\n+CORE_ADDR\n+x86_target::low_stopped_data_address ()\n {\n   struct process_info *proc = current_process ();\n   CORE_ADDR addr;\n@@ -2918,8 +2922,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_stopped_by_watchpoint,\n-  x86_stopped_data_address,\n   /* collect_ptrace_register/supply_ptrace_register are not needed in the\n      native i386 case (no registers smaller than an xfer unit), and are not\n      used in the biarch case (HAVE_LINUX_USRREGS is not defined).  */"
    },
    {
      "sha": "7bc09e99629ab40f9abf2ede7fa9219f62a2664e",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac1bbaca10666fc85572a6deeaa6f1debcd4c129/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=ac1bbaca10666fc85572a6deeaa6f1debcd4c129",
      "patch": "@@ -329,8 +329,6 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* stopped_by_watchpoint */\n-  NULL, /* stopped_data_address */\n   NULL, /* collect_ptrace_register */\n   NULL, /* supply_ptrace_register */\n   NULL, /* siginfo_fixup */"
    }
  ]
}