{
  "sha": "bf84f7066626c78884436e1c39fb60f04c665f21",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY4NGY3MDY2NjI2Yzc4ODg0NDM2ZTFjMzlmYjYwZjA0YzY2NWYyMQ==",
  "commit": {
    "author": {
      "name": "Maciej W. Rozycki",
      "email": "macro@wdc.com",
      "date": "2020-02-19T01:24:37Z"
    },
    "committer": {
      "name": "Maciej W. Rozycki",
      "email": "macro@wdc.com",
      "date": "2020-02-19T01:24:37Z"
    },
    "message": "gdbserver: Add RISC-V/Linux support\n\nImplement RISC-V/Linux support for both RV64 and RV32 systems, including\nXML target description handling based on features determined, GPR and\nFPR regset support including dynamic sizing of the latter, and software\nbreakpoint handling.  Define two NT_FPREGSET regsets of a different size\nmatching the FPR sizes supported for generic `gdbserver' code to pick\nfrom according to what the OS supplies.\n\nAlso handle a glibc bug where ELF_NFPREG is defined in terms of NFPREG,\nhowever NFPREG is nowhere defined.\n\n2020-02-19  Maciej W. Rozycki  <macro@wdc.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\tgdb/\n\t* NEWS: Mention RISC-V GNU/Linux GDBserver support.\n\n\tgdbserver/\n\t* linux-riscv-low.cc: New file.\n\t* Makefile.in (SFILES): Add linux-riscv-low.cc, arch/riscv.c,\n\tand nat/riscv-linux-tdesc.c.\n\t* configure.srv <riscv*-*-linux*> (srv_tgtobj)\n\t(srv_linux_regsets, srv_linux_usrregs, srv_linux_thread_db):\n\tDefine.",
    "tree": {
      "sha": "c6b0acc4954d5f15eb4c299043cd28fd815e40e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c6b0acc4954d5f15eb4c299043cd28fd815e40e6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf84f7066626c78884436e1c39fb60f04c665f21",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf84f7066626c78884436e1c39fb60f04c665f21",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf84f7066626c78884436e1c39fb60f04c665f21",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf84f7066626c78884436e1c39fb60f04c665f21/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d1c9b20ff9eca75a6bc33105cb2a46cebc67c482",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1c9b20ff9eca75a6bc33105cb2a46cebc67c482",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d1c9b20ff9eca75a6bc33105cb2a46cebc67c482"
    }
  ],
  "stats": {
    "total": 311,
    "additions": 311,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0077a9824aa4410e11079e0a052a914ba2215558",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf84f7066626c78884436e1c39fb60f04c665f21/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf84f7066626c78884436e1c39fb60f04c665f21/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf84f7066626c78884436e1c39fb60f04c665f21",
      "patch": "@@ -1,3 +1,7 @@\n+2020-02-19  Maciej W. Rozycki  <macro@wdc.com>\n+\n+\t* NEWS: Mention RISC-V GNU/Linux GDBserver support.\n+\n 2020-02-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* arch/riscv.c (struct riscv_gdbarch_features_hasher): Only define"
    },
    {
      "sha": "91add18d6f591aff77049be5f484505040aed4f8",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf84f7066626c78884436e1c39fb60f04c665f21/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf84f7066626c78884436e1c39fb60f04c665f21/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=bf84f7066626c78884436e1c39fb60f04c665f21",
      "patch": "@@ -3,6 +3,10 @@\n \n *** Changes since GDB 9\n \n+* New features in the GDB remote stub, GDBserver\n+\n+  ** GDBserver is now supported on RISC-V GNU/Linux.\n+\n * Debugging MS-Windows processes now sets $_exitsignal when the\n   inferior is terminated by a signal, instead of setting $_exitcode.\n \n@@ -26,6 +30,10 @@ show exec-file-mismatch -- Show exec-file-mismatch handling (ask|warn|off).\n   whether to load the process executable file; if 'warn', just display\n   a warning; if 'off', don't attempt to detect a mismatch.\n \n+* New targets\n+\n+GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*\n+\n *** Changes in GDB 9\n \n * 'thread-exited' event is now available in the annotations interface."
    },
    {
      "sha": "4851002a7e5b33ff252ae129bedc034184188ad3",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=bf84f7066626c78884436e1c39fb60f04c665f21",
      "patch": "@@ -1,3 +1,13 @@\n+2020-02-19  Maciej W. Rozycki  <macro@wdc.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linux-riscv-low.cc: New file.\n+\t* Makefile.in (SFILES): Add linux-riscv-low.cc, arch/riscv.c,\n+\tand nat/riscv-linux-tdesc.c.\n+\t* configure.srv <riscv*-*-linux*> (srv_tgtobj)\n+\t(srv_linux_regsets, srv_linux_usrregs, srv_linux_thread_db):\n+\tDefine.\n+\n 2020-02-14  Tom Tromey  <tom@tromey.com>\n \n \t* acinclude.m4: Don't include acx_configure_dir.m4."
    },
    {
      "sha": "1baebba0f5616d8c14007ca4d7ab6fd9e96a20c6",
      "filename": "gdbserver/Makefile.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/Makefile.in?ref=bf84f7066626c78884436e1c39fb60f04c665f21",
      "patch": "@@ -177,6 +177,7 @@ SFILES = \\\n \t$(srcdir)/linux-mips-low.cc \\\n \t$(srcdir)/linux-nios2-low.cc \\\n \t$(srcdir)/linux-ppc-low.cc \\\n+\t$(srcdir)/linux-riscv-low.cc \\\n \t$(srcdir)/linux-s390-low.cc \\\n \t$(srcdir)/linux-sh-low.cc \\\n \t$(srcdir)/linux-sparc-low.cc \\\n@@ -203,6 +204,7 @@ SFILES = \\\n \t$(srcdir)/../gdb/arch/arm-get-next-pcs.c \\\n \t$(srcdir)/../gdb/arch/arm-linux.c \\\n \t$(srcdir)/../gdb/arch/ppc-linux-common.c \\\n+\t$(srcdir)/../gdb/arch/riscv.c \\\n \t$(srcdir)/../gdbsupport/btrace-common.cc \\\n \t$(srcdir)/../gdbsupport/buffer.cc \\\n \t$(srcdir)/../gdbsupport/cleanups.cc \\\n@@ -236,6 +238,7 @@ SFILES = \\\n \t$(srcdir)/../gdb/nat/linux-personality.c \\\n \t$(srcdir)/../gdb/nat/mips-linux-watch.c \\\n \t$(srcdir)/../gdb/nat/ppc-linux.c \\\n+\t$(srcdir)/../gdb/nat/riscv-linux-tdesc.c \\\n \t$(srcdir)/../gdb/nat/fork-inferior.c \\\n \t$(srcdir)/../gdb/target/waitstatus.c\n "
    },
    {
      "sha": "ecdd63a310afa032dbfc56a570871567e4f51a42",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=bf84f7066626c78884436e1c39fb60f04c665f21",
      "patch": "@@ -278,6 +278,13 @@ case \"${gdbserver_host}\" in\n \t\t\tsrv_xmlfiles=\"${srv_xmlfiles} rs6000/power-fpu.xml\"\n \t\t\tsrv_lynxos=yes\n \t\t\t;;\n+  riscv*-*-linux*)\tsrv_tgtobj=\"arch/riscv.o nat/riscv-linux-tdesc.o\"\n+\t\t\tsrv_tgtobj=\"${srv_tgtobj} linux-riscv-low.o\"\n+\t\t\tsrv_tgtobj=\"${srv_tgtobj} ${srv_linux_obj}\"\n+\t\t\tsrv_linux_regsets=yes\n+\t\t\tsrv_linux_usrregs=yes\n+\t\t\tsrv_linux_thread_db=yes\n+\t\t\t;;\n   s390*-*-linux*)\tsrv_regobj=\"s390-linux32.o\"\n \t\t\tsrv_regobj=\"${srv_regobj} s390-linux32v1.o\"\n \t\t\tsrv_regobj=\"${srv_regobj} s390-linux32v2.o\""
    },
    {
      "sha": "07ae6174ee38f3ee039d6402517f3c5a98dfe683",
      "filename": "gdbserver/linux-riscv-low.cc",
      "status": "added",
      "additions": 279,
      "deletions": 0,
      "changes": 279,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/linux-riscv-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf84f7066626c78884436e1c39fb60f04c665f21/gdbserver/linux-riscv-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-riscv-low.cc?ref=bf84f7066626c78884436e1c39fb60f04c665f21",
      "patch": "@@ -0,0 +1,279 @@\n+/* GNU/Linux/RISC-V specific low level interface, for the remote server\n+   for GDB.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"server.h\"\n+\n+#include \"linux-low.h\"\n+#include \"tdesc.h\"\n+#include \"elf/common.h\"\n+#include \"nat/riscv-linux-tdesc.h\"\n+#include \"opcode/riscv.h\"\n+\n+/* Work around glibc header breakage causing ELF_NFPREG not to be usable.  */\n+#ifndef NFPREG\n+# define NFPREG 33\n+#endif\n+\n+/* Implementation of linux_target_ops method \"arch_setup\".  */\n+\n+static void\n+riscv_arch_setup ()\n+{\n+  static const char *expedite_regs[] = { \"sp\", \"pc\", NULL };\n+\n+  const riscv_gdbarch_features features\n+    = riscv_linux_read_features (lwpid_of (current_thread));\n+  target_desc *tdesc = riscv_create_target_description (features);\n+\n+  if (!tdesc->expedite_regs)\n+    init_target_desc (tdesc, expedite_regs);\n+  current_process ()->tdesc = tdesc;\n+}\n+\n+/* Collect GPRs from REGCACHE into BUF.  */\n+\n+static void\n+riscv_fill_gregset (struct regcache *regcache, void *buf)\n+{\n+  const struct target_desc *tdesc = regcache->tdesc;\n+  elf_gregset_t *regset = (elf_gregset_t *) buf;\n+  int regno = find_regno (tdesc, \"zero\");\n+  int i;\n+\n+  collect_register_by_name (regcache, \"pc\", *regset);\n+  for (i = 1; i < ARRAY_SIZE (*regset); i++)\n+    collect_register (regcache, regno + i, *regset + i);\n+}\n+\n+/* Supply GPRs from BUF into REGCACHE.  */\n+\n+static void\n+riscv_store_gregset (struct regcache *regcache, const void *buf)\n+{\n+  const elf_gregset_t *regset = (const elf_gregset_t *) buf;\n+  const struct target_desc *tdesc = regcache->tdesc;\n+  int regno = find_regno (tdesc, \"zero\");\n+  int i;\n+\n+  supply_register_by_name (regcache, \"pc\", *regset);\n+  supply_register_zeroed (regcache, regno);\n+  for (i = 1; i < ARRAY_SIZE (*regset); i++)\n+    supply_register (regcache, regno + i, *regset + i);\n+}\n+\n+/* Collect FPRs from REGCACHE into BUF.  */\n+\n+static void\n+riscv_fill_fpregset (struct regcache *regcache, void *buf)\n+{\n+  const struct target_desc *tdesc = regcache->tdesc;\n+  int regno = find_regno (tdesc, \"ft0\");\n+  int flen = register_size (regcache->tdesc, regno);\n+  gdb_byte *regbuf = (gdb_byte *) buf;\n+  int i;\n+\n+  for (i = 0; i < ELF_NFPREG - 1; i++, regbuf += flen)\n+    collect_register (regcache, regno + i, regbuf);\n+  collect_register_by_name (regcache, \"fcsr\", regbuf);\n+}\n+\n+/* Supply FPRs from BUF into REGCACHE.  */\n+\n+static void\n+riscv_store_fpregset (struct regcache *regcache, const void *buf)\n+{\n+  const struct target_desc *tdesc = regcache->tdesc;\n+  int regno = find_regno (tdesc, \"ft0\");\n+  int flen = register_size (regcache->tdesc, regno);\n+  const gdb_byte *regbuf = (const gdb_byte *) buf;\n+  int i;\n+\n+  for (i = 0; i < ELF_NFPREG - 1; i++, regbuf += flen)\n+    supply_register (regcache, regno + i, regbuf);\n+  supply_register_by_name (regcache, \"fcsr\", regbuf);\n+}\n+\n+/* RISC-V/Linux regsets.  FPRs are optional and come in different sizes,\n+   so define multiple regsets for them marking them all as OPTIONAL_REGS\n+   rather than FP_REGS, so that \"regsets_fetch_inferior_registers\" picks\n+   the right one according to size.  */\n+static struct regset_info riscv_regsets[] = {\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_PRSTATUS,\n+    sizeof (elf_gregset_t), GENERAL_REGS,\n+    riscv_fill_gregset, riscv_store_gregset },\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_FPREGSET,\n+    sizeof (struct __riscv_mc_q_ext_state), OPTIONAL_REGS,\n+    riscv_fill_fpregset, riscv_store_fpregset },\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_FPREGSET,\n+    sizeof (struct __riscv_mc_d_ext_state), OPTIONAL_REGS,\n+    riscv_fill_fpregset, riscv_store_fpregset },\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_FPREGSET,\n+    sizeof (struct __riscv_mc_f_ext_state), OPTIONAL_REGS,\n+    riscv_fill_fpregset, riscv_store_fpregset },\n+  NULL_REGSET\n+};\n+\n+/* RISC-V/Linux regset information.  */\n+static struct regsets_info riscv_regsets_info =\n+  {\n+    riscv_regsets, /* regsets */\n+    0, /* num_regsets */\n+    NULL, /* disabled_regsets */\n+  };\n+\n+/* Definition of linux_target_ops data member \"regs_info\".  */\n+static struct regs_info riscv_regs =\n+  {\n+    NULL, /* regset_bitmap */\n+    NULL, /* usrregs */\n+    &riscv_regsets_info,\n+  };\n+\n+/* Implementation of linux_target_ops method \"regs_info\".  */\n+\n+static const struct regs_info *\n+riscv_regs_info ()\n+{\n+  return &riscv_regs;\n+}\n+\n+/* Implementation of linux_target_ops method \"fetch_register\".  */\n+\n+static int\n+riscv_fetch_register (struct regcache *regcache, int regno)\n+{\n+  const struct target_desc *tdesc = regcache->tdesc;\n+\n+  if (regno != find_regno (tdesc, \"zero\"))\n+    return 0;\n+  supply_register_zeroed (regcache, regno);\n+  return 1;\n+}\n+\n+/* Implementation of linux_target_ops method \"get_pc\".  */\n+\n+static CORE_ADDR\n+riscv_get_pc (struct regcache *regcache)\n+{\n+  elf_gregset_t regset;\n+\n+  if (sizeof (regset[0]) == 8)\n+    return linux_get_pc_64bit (regcache);\n+  else\n+    return linux_get_pc_32bit (regcache);\n+}\n+\n+/* Implementation of linux_target_ops method \"set_pc\".  */\n+\n+static void\n+riscv_set_pc (struct regcache *regcache, CORE_ADDR newpc)\n+{\n+  elf_gregset_t regset;\n+\n+  if (sizeof (regset[0]) == 8)\n+    linux_set_pc_64bit (regcache, newpc);\n+  else\n+    linux_set_pc_32bit (regcache, newpc);\n+}\n+\n+/* Correct in either endianness.  */\n+static const uint16_t riscv_ibreakpoint[] = { 0x0073, 0x0010 };\n+static const uint16_t riscv_cbreakpoint = 0x9002;\n+\n+/* Implementation of linux_target_ops method \"breakpoint_kind_from_pc\".  */\n+\n+static int\n+riscv_breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n+{\n+  union\n+    {\n+      gdb_byte bytes[2];\n+      uint16_t insn;\n+    }\n+  buf;\n+\n+  if (target_read_memory (*pcptr, buf.bytes, sizeof (buf.insn)) == 0\n+      && riscv_insn_length (buf.insn == sizeof (riscv_ibreakpoint)))\n+    return sizeof (riscv_ibreakpoint);\n+  else\n+    return sizeof (riscv_cbreakpoint);\n+}\n+\n+/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+\n+static const gdb_byte *\n+riscv_sw_breakpoint_from_kind (int kind, int *size)\n+{\n+  *size = kind;\n+  switch (kind)\n+    {\n+      case sizeof (riscv_ibreakpoint):\n+\treturn (const gdb_byte *) &riscv_ibreakpoint;\n+      default:\n+\treturn (const gdb_byte *) &riscv_cbreakpoint;\n+    }\n+}\n+\n+/* Implementation of linux_target_ops method \"breakpoint_at\".  */\n+\n+static int\n+riscv_breakpoint_at (CORE_ADDR pc)\n+{\n+  union\n+    {\n+      gdb_byte bytes[2];\n+      uint16_t insn;\n+    }\n+  buf;\n+\n+  if (target_read_memory (pc, buf.bytes, sizeof (buf.insn)) == 0\n+      && (buf.insn == riscv_cbreakpoint\n+\t  || (buf.insn == riscv_ibreakpoint[0]\n+\t      && target_read_memory (pc + sizeof (buf.insn), buf.bytes,\n+\t\t\t\t     sizeof (buf.insn)) == 0\n+\t      && buf.insn == riscv_ibreakpoint[1])))\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+/* RISC-V/Linux target operations.  */\n+struct linux_target_ops the_low_target =\n+{\n+  riscv_arch_setup,\n+  riscv_regs_info,\n+  NULL, /* cannot_fetch_register */\n+  NULL, /* cannot_store_register */\n+  riscv_fetch_register,\n+  riscv_get_pc,\n+  riscv_set_pc,\n+  riscv_breakpoint_kind_from_pc,\n+  riscv_sw_breakpoint_from_kind,\n+  NULL, /* get_next_pcs */\n+  0,    /* decr_pc_after_break */\n+  riscv_breakpoint_at,\n+};\n+\n+/* Initialize the RISC-V/Linux target.  */\n+\n+void\n+initialize_low_arch ()\n+{\n+  initialize_regsets_info (&riscv_regsets_info);\n+}"
    }
  ]
}