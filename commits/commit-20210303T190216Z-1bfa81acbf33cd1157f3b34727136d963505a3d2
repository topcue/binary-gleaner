{
  "sha": "1bfa81acbf33cd1157f3b34727136d963505a3d2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWJmYTgxYWNiZjMzY2QxMTU3ZjNiMzQ3MjcxMzZkOTYzNTA1YTNkMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-03T19:02:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-03T19:02:16Z"
    },
    "message": "Minor Ada-related cleanups\n\nThis patch addresses some review comments that I forgot to deal with\nin an earlier patch.  See the comments here:\n\nhttps://sourceware.org/pipermail/gdb-patches/2021-February/176278.html\n\nFor the most part this is fixing up comments, but it also includes\nadding a constructor and initializers to \"match_data\".\n\nRegression tested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-03-03  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (ada_resolve_function): Update comment.\n\t(is_nonfunction, add_symbols_from_enclosing_procs)\n\t(remove_extra_symbols): Likewise.\n\t(struct match_data): Add constructor, initializers.\n\t(add_nonlocal_symbols): Remove memset.\n\t(aux_add_nonlocal_symbols): Update comment.\n\t(ada_add_block_renamings, add_nonlocal_symbols)\n\t(ada_add_all_symbols): Likewise.\n\t* ada-exp.y (write_var_or_type): Clean up trailing whitespace.",
    "tree": {
      "sha": "f7a81b9977826a16eb5a4b8d0a7e0b440c99ce8b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f7a81b9977826a16eb5a4b8d0a7e0b440c99ce8b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1bfa81acbf33cd1157f3b34727136d963505a3d2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bfa81acbf33cd1157f3b34727136d963505a3d2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1bfa81acbf33cd1157f3b34727136d963505a3d2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bfa81acbf33cd1157f3b34727136d963505a3d2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75363b6d60eed4bb3eb4688fca75edc1f72ded9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75363b6d60eed4bb3eb4688fca75edc1f72ded9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75363b6d60eed4bb3eb4688fca75edc1f72ded9f"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 31,
    "deletions": 17
  },
  "files": [
    {
      "sha": "0587752cb5b2803deb416b33ce47df9a078902c8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bfa81acbf33cd1157f3b34727136d963505a3d2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bfa81acbf33cd1157f3b34727136d963505a3d2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1bfa81acbf33cd1157f3b34727136d963505a3d2",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-03  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (ada_resolve_function): Update comment.\n+\t(is_nonfunction, add_symbols_from_enclosing_procs)\n+\t(remove_extra_symbols): Likewise.\n+\t(struct match_data): Add constructor, initializers.\n+\t(add_nonlocal_symbols): Remove memset.\n+\t(aux_add_nonlocal_symbols): Update comment.\n+\t(ada_add_block_renamings, add_nonlocal_symbols)\n+\t(ada_add_all_symbols): Likewise.\n+\t* ada-exp.y (write_var_or_type): Clean up trailing whitespace.\n+\n 2021-03-02  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (cast_from_gnat_encoded_fixed_point_type)"
    },
    {
      "sha": "36375d9b8b30498a5c9a87f29e35ddf26812e85e",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bfa81acbf33cd1157f3b34727136d963505a3d2/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bfa81acbf33cd1157f3b34727136d963505a3d2/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=1bfa81acbf33cd1157f3b34727136d963505a3d2",
      "patch": "@@ -1297,7 +1297,7 @@ write_var_or_type (struct parser_state *par_state,\n \t      write_selectors (par_state, encoded_name + tail_index);\n \t      return NULL;\n \t    }\n-\t  else if (syms.empty ()) \n+\t  else if (syms.empty ())\n \t    {\n \t      struct bound_minimal_symbol msym\n \t\t= ada_lookup_simple_minsym (encoded_name);"
    },
    {
      "sha": "f8bf407fa6c072f8a646d60a6cc94168f11485bb",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bfa81acbf33cd1157f3b34727136d963505a3d2/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bfa81acbf33cd1157f3b34727136d963505a3d2/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=1bfa81acbf33cd1157f3b34727136d963505a3d2",
      "patch": "@@ -3903,7 +3903,7 @@ return_match (struct type *func_type, struct type *context_type)\n }\n \n \n-/* Returns the index in SYMS[0..NSYMS-1] that contains  the symbol for the\n+/* Returns the index in SYMS that contains the symbol for the\n    function (if any) that matches the types of the NARGS arguments in\n    ARGS.  If CONTEXT_TYPE is non-null and there is at least one match\n    that returns that type, then eliminate matches that don't.  If\n@@ -4684,7 +4684,7 @@ standard_lookup (const char *name, const struct block *block,\n \n \n /* Non-zero iff there is at least one non-function/non-enumeral symbol\n-   in the symbol fields of SYMS[0..N-1].  We treat enumerals as functions, \n+   in the symbol fields of SYMS.  We treat enumerals as functions, \n    since they contend in overloading in the same way.  */\n static int\n is_nonfunction (const std::vector<struct block_symbol> &syms)\n@@ -4838,7 +4838,7 @@ ada_lookup_simple_minsym (const char *name)\n \n /* For all subprograms that statically enclose the subprogram of the\n    selected frame, add symbols matching identifier NAME in DOMAIN\n-   and their blocks to the list of data in OBSTACKP, as for\n+   and their blocks to the list of data in RESULT, as for\n    ada_add_block_symbols (q.v.).   If WILD_MATCH_P, treat as NAME\n    with a wildcard prefix.  */\n \n@@ -4966,8 +4966,7 @@ symbols_are_identical_enums (const std::vector<struct block_symbol> &syms)\n    duplicate other symbols in the list (The only case I know of where\n    this happens is when object files containing stabs-in-ecoff are\n    linked with files containing ordinary ecoff debugging symbols (or no\n-   debugging symbols)).  Modifies SYMS to squeeze out deleted entries.\n-   Returns the number of items in the modified list.  */\n+   debugging symbols)).  Modifies SYMS to squeeze out deleted entries.  */\n \n static void\n remove_extra_symbols (std::vector<struct block_symbol> *syms)\n@@ -5291,15 +5290,21 @@ ada_add_local_symbols (std::vector<struct block_symbol> &result,\n \n struct match_data\n {\n-  struct objfile *objfile;\n+  explicit match_data (std::vector<struct block_symbol> *rp)\n+    : resultp (rp)\n+  {\n+  }\n+  DISABLE_COPY_AND_ASSIGN (match_data);\n+\n+  struct objfile *objfile = nullptr;\n   std::vector<struct block_symbol> *resultp;\n-  struct symbol *arg_sym;\n-  int found_sym;\n+  struct symbol *arg_sym = nullptr;\n+  int found_sym = 0;\n };\n \n /* A callback for add_nonlocal_symbols that adds symbol, found in BSYM,\n    to a list of symbols.  DATA is a pointer to a struct match_data *\n-   containing the obstack that collects the symbol list, the file that SYM\n+   containing the vector that collects the symbol list, the file that SYM\n    must come from, a flag indicating whether a non-argument symbol has\n    been found in the current block, and the last argument symbol\n    passed in SYM within the current block (if any).  When SYM is null,\n@@ -5341,7 +5346,7 @@ aux_add_nonlocal_symbols (struct block_symbol *bsym,\n \n /* Helper for add_nonlocal_symbols.  Find symbols in DOMAIN which are\n    targeted by renamings matching LOOKUP_NAME in BLOCK.  Add these\n-   symbols to OBSTACKP.  Return whether we found such symbols.  */\n+   symbols to RESULT.  Return whether we found such symbols.  */\n \n static int\n ada_add_block_renamings (std::vector<struct block_symbol> &result,\n@@ -5490,7 +5495,7 @@ ada_lookup_name (const lookup_name_info &lookup_name)\n   return lookup_name.ada ().lookup_name ().c_str ();\n }\n \n-/* Add to OBSTACKP all non-local symbols whose name and domain match\n+/* Add to RESULT all non-local symbols whose name and domain match\n    LOOKUP_NAME and DOMAIN respectively.  The search is performed on\n    GLOBAL_BLOCK symbols if GLOBAL is non-zero, or on STATIC_BLOCK\n    symbols otherwise.  */\n@@ -5500,10 +5505,7 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n \t\t      const lookup_name_info &lookup_name,\n \t\t      domain_enum domain, int global)\n {\n-  struct match_data data;\n-\n-  memset (&data, 0, sizeof data);\n-  data.resultp = &result;\n+  struct match_data data (&result);\n \n   bool is_wild_match = lookup_name.ada ().wild_match_p ();\n \n@@ -5552,7 +5554,7 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n \n /* Find symbols in DOMAIN matching LOOKUP_NAME, in BLOCK and, if\n    FULL_SEARCH is non-zero, enclosing scope and in global scopes,\n-   returning the number of matches.  Add these to OBSTACKP.\n+   returning the number of matches.  Add these to RESULT.\n \n    When FULL_SEARCH is non-zero, any non-function/non-enumeral\n    symbol match within the nest of blocks whose innermost member is BLOCK,"
    }
  ]
}