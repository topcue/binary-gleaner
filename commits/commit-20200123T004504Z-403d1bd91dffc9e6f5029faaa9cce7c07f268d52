{
  "sha": "403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDAzZDFiZDkxZGZmYzllNmY1MDI5ZmFhYTljY2U3YzA3ZjI2OGQ1Mg==",
  "commit": {
    "author": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2020-01-23T00:45:04Z"
    },
    "committer": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2020-01-23T00:45:04Z"
    },
    "message": "RISC-V: Change -march parsing.\n\n\tbfd/\n\t2020-01-22  Maxim Blinov  <maxim.blinov@embecosm.com>\n\t* bfd/elfnn-riscv.c (riscv_skip_prefix): New.\n\t(riscv_prefix_cmp): Likewise.\n\t(riscv_non_std_ext_p): Deleted.\n\t(riscv_std_sv_ext_p): Likewise.\n\t(riscv_non_std_sv_ext_p): Likewise.\n\t(riscv_merge_non_std_and_sv_ext): Rename to...\n\t(riscv_merge_multi_letter_ext): and modified to use riscv_prefix_cmp.\n\t(riscv_merge_arch_attr_info): Replace 3 calls to\n\triscv_merge_non_std_and_sv_ext with single call to\n\triscv_merge_multi_letter_ext.\n\t* bfd/elfxx-riscv.c (riscv_parse_std_ext): Break if we\n\tencounter a 'z' prefix.\n\t(riscv_get_prefix_class): New function, return prefix class based\n\ton first few characters of input string.\n\t(riscv_parse_config): New structure to factor out minor differences\n\tin extension class parsing behaviour.\n\t(riscv_parse_sv_or_non_std_ext): Rename to...\n\t(riscv_parse_prefixed_ext): and parameterise with\n\triscv_parse_config.\n\t(riscv_std_z_ext_strtab, riscv_std_s_ext_strtab): New.\n\t(riscv_multi_letter_ext_valid_p): New.\n\t(riscv_ext_x_valid_p, riscv_ext_z_valid_p, riscv_ext_s_valid_p): New.\n\t(riscv_parse_subset): Delegate all non-single-letter parsing work\n\tto riscv_parse_prefixed_ext.\n\t* bfd/elfxx-riscv.h (riscv_isa_ext_class): New type.\n\t(riscv_get_prefix_class): Declare.\n\n\tgas/\n\t2020-01-22  Maxim Blinov  <maxim.blinov@embecosm.com>\n\t* testsuite/gas/riscv/march-ok-s.d: sx is no longer valid and\n\ts exts must be known, so rename *ok* to *fail*.\n\t* testsuite/gas/riscv/march-ok-sx.d: Likewise.\n\t* testsuite/gas/riscv/march-ok-s-with-version: Likewise.\n\t* testsuite/gas/riscv/march-fail-s.l: Expected error messages for\n\tabove change.\n\t* testsuite/gas/riscv/march-fail-sx.l: Likewise.\n\t* testsuite/gas/riscv/march-fail-sx-with-version.l: Likewise.\n\nChange-Id: Ic4d91a13d055a10d30ab28752a380a669b59f29c",
    "tree": {
      "sha": "1a525aaec23a2bd690a82baaed978513c1e5261b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1a525aaec23a2bd690a82baaed978513c1e5261b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "3401347452ff7d23e148fdb07e4d49a57304ac14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3401347452ff7d23e148fdb07e4d49a57304ac14",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3401347452ff7d23e148fdb07e4d49a57304ac14"
    }
  ],
  "stats": {
    "total": 429,
    "additions": 324,
    "deletions": 105
  },
  "files": [
    {
      "sha": "635932462b8b48d32fdd2efba239e01893e8a70f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -1,3 +1,32 @@\n+2020-01-22  Maxim Blinov  <maxim.blinov@embecosm.com>\n+\n+\t* bfd/elfnn-riscv.c (riscv_skip_prefix): New.\n+\t(riscv_prefix_cmp): Likewise.\n+\t(riscv_non_std_ext_p): Deleted.\n+\t(riscv_std_sv_ext_p): Likewise.\n+\t(riscv_non_std_sv_ext_p): Likewise.\n+\t(riscv_merge_non_std_and_sv_ext): Rename to...\n+\t(riscv_merge_multi_letter_ext): and modified to use riscv_prefix_cmp.\n+\t(riscv_merge_arch_attr_info): Replace 3 calls to\n+\triscv_merge_non_std_and_sv_ext with single call to\n+\triscv_merge_multi_letter_ext.\n+\t* bfd/elfxx-riscv.c (riscv_parse_std_ext): Break if we\n+\tencounter a 'z' prefix.\n+\t(riscv_get_prefix_class): New function, return prefix class based\n+\ton first few characters of input string.\n+\t(riscv_parse_config): New structure to factor out minor differences\n+\tin extension class parsing behaviour.\n+\t(riscv_parse_sv_or_non_std_ext): Rename to...\n+\t(riscv_parse_prefixed_ext): and parameterise with\n+\triscv_parse_config.\n+\t(riscv_std_z_ext_strtab, riscv_std_s_ext_strtab): New.\n+\t(riscv_multi_letter_ext_valid_p): New.\n+\t(riscv_ext_x_valid_p, riscv_ext_z_valid_p, riscv_ext_s_valid_p): New.\n+\t(riscv_parse_subset): Delegate all non-single-letter parsing work\n+\tto riscv_parse_prefixed_ext.\n+\t* bfd/elfxx-riscv.h (riscv_isa_ext_class): New type.\n+\t(riscv_get_prefix_class): Declare.\n+\n 2020-01-22  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (struct ppc_link_hash_table): Add tga_group."
    },
    {
      "sha": "40d01a8e36d98a8f063d782ef393ad29fbec5381",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 83,
      "deletions": 63,
      "changes": 146,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -2736,30 +2736,6 @@ riscv_std_ext_p (const char *name)\n   return (strlen (name) == 1) && (name[0] != 'x') && (name[0] != 's');\n }\n \n-/* Predicator for non-standard extension.  */\n-\n-static bfd_boolean\n-riscv_non_std_ext_p (const char *name)\n-{\n-  return (strlen (name) >= 2) && (name[0] == 'x');\n-}\n-\n-/* Predicator for standard supervisor extension.  */\n-\n-static bfd_boolean\n-riscv_std_sv_ext_p (const char *name)\n-{\n-  return (strlen (name) >= 2) && (name[0] == 's') && (name[1] != 'x');\n-}\n-\n-/* Predicator for non-standard supervisor extension.  */\n-\n-static bfd_boolean\n-riscv_non_std_sv_ext_p (const char *name)\n-{\n-  return (strlen (name) >= 3) && (name[0] == 's') && (name[1] == 'x');\n-}\n-\n /* Error handler when version mis-match.  */\n \n static void\n@@ -2885,53 +2861,102 @@ riscv_merge_std_ext (bfd *ibfd,\n   return TRUE;\n }\n \n-/* Merge non-standard and supervisor extensions.\n-   Return Value:\n-     Return FALSE if failed to merge.\n+/* If C is a prefix class, then return the EXT string without the prefix.\n+   Otherwise return the entire EXT string.  */\n \n-   Arguments:\n-     `bfd`: bfd handler.\n-     `in_arch`: Raw arch string for input object.\n-     `out_arch`: Raw arch string for output object.\n-     `pin`: subset list for input object, and it'll skip all merged subset after\n-            merge.\n-     `pout`: Like `pin`, but for output object. */\n+static const char *\n+riscv_skip_prefix (const char *ext, riscv_isa_ext_class_t c)\n+{\n+  switch (c)\n+    {\n+    case RV_ISA_CLASS_X: return &ext[1];\n+    case RV_ISA_CLASS_S: return &ext[1];\n+    case RV_ISA_CLASS_Z: return &ext[1];\n+    default: return ext;\n+    }\n+}\n+\n+/* Compare prefixed extension names canonically.  */\n+\n+static int\n+riscv_prefix_cmp (const char *a, const char *b)\n+{\n+  riscv_isa_ext_class_t ca = riscv_get_prefix_class (a);\n+  riscv_isa_ext_class_t cb = riscv_get_prefix_class (b);\n+\n+  /* Extension name without prefix  */\n+  const char *anp = riscv_skip_prefix (a, ca);\n+  const char *bnp = riscv_skip_prefix (b, cb);\n+\n+  if (ca == cb)\n+    return strcasecmp (anp, bnp);\n+\n+  return (int)ca - (int)cb;\n+}\n+\n+/* Merge multi letter extensions.  PIN is a pointer to the head of the input\n+   object subset list.  Likewise for POUT and the output object.  Return TRUE\n+   on success and FALSE when a conflict is found.  */\n \n static bfd_boolean\n-riscv_merge_non_std_and_sv_ext (bfd *ibfd,\n-\t\t\t\triscv_subset_t **pin,\n-\t\t\t\triscv_subset_t **pout,\n-\t\t\t\tbfd_boolean (*predicate_func) (const char *))\n+riscv_merge_multi_letter_ext (bfd *ibfd,\n+\t\t\t      riscv_subset_t **pin,\n+\t\t\t      riscv_subset_t **pout)\n {\n   riscv_subset_t *in = *pin;\n   riscv_subset_t *out = *pout;\n+  riscv_subset_t *tail;\n \n-  for (in = *pin; in != NULL && predicate_func (in->name); in = in->next)\n-    riscv_add_subset (&merged_subsets, in->name, in->major_version,\n-\t\t      in->minor_version);\n+  int cmp;\n \n-  for (out = *pout; out != NULL && predicate_func (out->name); out = out->next)\n+  while (in && out)\n     {\n-      riscv_subset_t *find_ext =\n-\triscv_lookup_subset (&merged_subsets, out->name);\n-      if (find_ext != NULL)\n+      cmp = riscv_prefix_cmp (in->name, out->name);\n+\n+      if (cmp < 0)\n \t{\n-\t  /* Check version is same or not. */\n-\t  /* TODO: Allow different merge policy.  */\n-\t  if ((find_ext->major_version != out->major_version)\n-\t      || (find_ext->minor_version != out->minor_version))\n+\t  /* `in' comes before `out', append `in' and increment.  */\n+\t  riscv_add_subset (&merged_subsets, in->name, in->major_version,\n+\t\t\t    in->minor_version);\n+\t  in = in->next;\n+\t}\n+      else if (cmp > 0)\n+\t{\n+\t  /* `out' comes before `in', append `out' and increment.  */\n+\t  riscv_add_subset (&merged_subsets, out->name, out->major_version,\n+\t\t\t    out->minor_version);\n+\t  out = out->next;\n+\t}\n+      else\n+\t{\n+\t  /* Both present, check version and increment both.  */\n+\t  if ((in->major_version != out->major_version)\n+\t      || (in->minor_version != out->minor_version))\n \t    {\n-\t      riscv_version_mismatch (ibfd, find_ext, out);\n+\t      riscv_version_mismatch (ibfd, in, out);\n \t      return FALSE;\n \t    }\n+\n+\t  riscv_add_subset (&merged_subsets, out->name, out->major_version,\n+\t\t\t    out->minor_version);\n+\t  out = out->next;\n+\t  in = in->next;\n \t}\n-      else\n-\triscv_add_subset (&merged_subsets, out->name,\n-\t\t\t  out->major_version, out->minor_version);\n     }\n \n-  *pin = in;\n-  *pout = out;\n+  if (in || out) {\n+    /* If we're here, either `in' or `out' is running longer than\n+       the other. So, we need to append the corresponding tail.  */\n+    tail = in ? in : out;\n+\n+    while (tail)\n+      {\n+\triscv_add_subset (&merged_subsets, tail->name, tail->major_version,\n+\t\t\t  tail->minor_version);\n+\ttail = tail->next;\n+      }\n+  }\n+\n   return TRUE;\n }\n \n@@ -2990,14 +3015,9 @@ riscv_merge_arch_attr_info (bfd *ibfd, char *in_arch, char *out_arch)\n   /* Merge standard extension.  */\n   if (!riscv_merge_std_ext (ibfd, in_arch, out_arch, &in, &out))\n     return NULL;\n-  /* Merge non-standard extension.  */\n-  if (!riscv_merge_non_std_and_sv_ext (ibfd, &in, &out, riscv_non_std_ext_p))\n-    return NULL;\n-  /* Merge standard supervisor extension.  */\n-  if (!riscv_merge_non_std_and_sv_ext (ibfd, &in, &out, riscv_std_sv_ext_p))\n-    return NULL;\n-  /* Merge non-standard supervisor extension.  */\n-  if (!riscv_merge_non_std_and_sv_ext (ibfd, &in, &out, riscv_non_std_sv_ext_p))\n+\n+  /* Merge all non-single letter extensions with single call.  */\n+  if (!riscv_merge_multi_letter_ext (ibfd, &in, &out))\n     return NULL;\n \n   if (xlen_in != xlen_out)"
    },
    {
      "sha": "fdcf9028ab5c1d219d627cfe7bf9d5c2506e436e",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 172,
      "deletions": 41,
      "changes": 213,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -1193,7 +1193,7 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n     {\n       char subset[2] = {0, 0};\n \n-      if (*p == 'x' || *p == 's')\n+      if (*p == 'x' || *p == 's' || *p == 'z')\n \tbreak;\n \n       if (*p == '_')\n@@ -1237,28 +1237,58 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n   return p;\n }\n \n-/* Parsing function for non-standard and supervisor extensions.\n+/* Classify the argument 'arch' into one of riscv_isa_ext_class_t.  */\n \n-   Return Value:\n-     Points to the end of extensions.\n+riscv_isa_ext_class_t\n+riscv_get_prefix_class (const char *arch)\n+{\n+  switch (*arch)\n+    {\n+    case 's':\n+      return RV_ISA_CLASS_S;\n \n-   Arguments:\n-     `rps`: Hooks and status for parsing subset.\n-     `march`: Full arch string.\n-     `p`: Curent parsing position.\n-     `ext_type`: What kind of extensions, 'x', 's' or 'sx'.\n-     `ext_type_str`: Full name for kind of extension.  */\n+    case 'x': return RV_ISA_CLASS_X;\n+    case 'z': return RV_ISA_CLASS_Z;\n+    default: return RV_ISA_CLASS_UNKNOWN;\n+    }\n+}\n+\n+/* Structure describing parameters to use when parsing a particular\n+   riscv_isa_ext_class_t. One of these should be provided for each\n+   possible class, except RV_ISA_CLASS_UNKNOWN.  */\n+\n+typedef struct riscv_parse_config\n+{\n+  /* Class of the extension. */\n+  riscv_isa_ext_class_t class;\n+\n+  /* Lower-case prefix string for error printing\n+     and internal parser usage, e.g. \"z\", \"x\".  */\n+  const char *prefix;\n+\n+  /* Predicate which is used for checking whether\n+     this is a \"known\" extension. For 'x',\n+     it always returns true (since they are by\n+     definition non-standard and cannot be known.  */\n+  bfd_boolean (*ext_valid_p) (const char *);\n+} riscv_parse_config_t;\n+\n+/* Parse a generic prefixed extension.\n+   march: The full architecture string as passed in by \"-march=...\".\n+   p: Point from which to start parsing the -march string.\n+   config: What class of extensions to parse, predicate funcs,\n+   and strings to use in error reporting.  */\n \n static const char *\n-riscv_parse_sv_or_non_std_ext (riscv_parse_subset_t *rps,\n-\t\t\t       const char *march,\n-\t\t\t       const char *p,\n-\t\t\t       const char *ext_type,\n-\t\t\t       const char *ext_type_str)\n+riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n+\t\t\t  const char *march,\n+\t\t\t  const char *p,\n+\t\t\t  const riscv_parse_config_t *config)\n {\n   unsigned major_version = 0;\n   unsigned minor_version = 0;\n-  size_t ext_type_len = strlen (ext_type);\n+  const char *last_name;\n+  riscv_isa_ext_class_t class;\n \n   while (*p)\n     {\n@@ -1268,12 +1298,10 @@ riscv_parse_sv_or_non_std_ext (riscv_parse_subset_t *rps,\n \t  continue;\n \t}\n \n-      if (strncmp (p, ext_type, ext_type_len) != 0)\n-\tbreak;\n-\n-      /* It's non-standard supervisor extension if it prefix with sx.  */\n-      if ((ext_type[0] == 's') && (ext_type_len == 1)\n-\t  && (*(p + 1) == 'x'))\n+      /* Assert that the current extension specifier matches our parsing\n+\t class.  */\n+      class = riscv_get_prefix_class (p);\n+      if (class != config->class)\n \tbreak;\n \n       char *subset = xstrdup (p);\n@@ -1294,21 +1322,136 @@ riscv_parse_sv_or_non_std_ext (riscv_parse_subset_t *rps,\n \n       *q = '\\0';\n \n+      /* Check that the name is valid.\n+\t For 'x', anything goes but it cannot simply be 'x'.\n+\t For 'z', it must be known from a list and also cannot simply be 'z'.\n+\t For 's', it must be known from a list and also *can* simply be 's'.  */\n+\n+      /* Check that the extension name is well-formed.  */\n+      if (!config->ext_valid_p (subset))\n+\t{\n+\t  rps->error_handler\n+\t    (\"-march=%s: Invalid or unknown %s ISA extension: '%s'\",\n+\t     march, config->prefix, subset);\n+\t  free (subset);\n+\t  return NULL;\n+\t}\n+\n+      /* Check that the last item is not the same as this.  */\n+      last_name = rps->subset_list->tail->name;\n+\n+      if (!strcasecmp (last_name, subset))\n+\t{\n+\t  rps->error_handler (\"-march=%s: Duplicate %s ISA extension: \\'%s\\'\",\n+\t\t\t      march, config->prefix, subset);\n+\t  free (subset);\n+\t  return NULL;\n+\t}\n+\n+      /* Check that we are in alphabetical order within the subset.  */\n+      if (!strncasecmp (last_name, config->prefix, 1)\n+\t  && strcasecmp (last_name, subset) > 0)\n+\t{\n+\t  rps->error_handler (\"-march=%s: %s ISA extension not in alphabetical \"\n+\t\t\t      \"order: \\'%s\\' must come before \\'%s\\'.\",\n+\t\t\t      march, config->prefix, subset, last_name);\n+\t  free (subset);\n+\t  return NULL;\n+\t}\n+\n       riscv_add_subset (rps->subset_list, subset, major_version, minor_version);\n       free (subset);\n       p += end_of_version - subset;\n \n       if (*p != '\\0' && *p != '_')\n \t{\n \t  rps->error_handler (\"-march=%s: %s must separate with _\",\n-\t\t\t      march, ext_type_str);\n+\t\t\t      march, config->prefix);\n \t  return NULL;\n \t}\n     }\n \n   return p;\n }\n \n+/* List of Z-class extensions that binutils should know about.\n+   Whether or not a particular entry is in this list will\n+   dictate if gas/ld will accept its presence in the -march\n+   string.\n+\n+   Example: To add an extension called \"Zbb\" (bitmanip base extension),\n+   add \"zbb\" string to the list (all lowercase).\n+\n+   Keep this list alphabetically ordered.  */\n+\n+static const char * const riscv_std_z_ext_strtab[] =\n+  {\n+    NULL\n+  };\n+\n+/* Same as `riscv_std_z_ext_strtab', but for S-class extensions.  */\n+\n+static const char * const riscv_std_s_ext_strtab[] =\n+  {\n+    NULL\n+  };\n+\n+/* For the extension EXT, search through the list of known extensions\n+   KNOWN_EXTS for a match, and return TRUE if found.  */\n+\n+static bfd_boolean\n+riscv_multi_letter_ext_valid_p (const char *ext,\n+\t\t\t\tconst char *const *known_exts)\n+{\n+  for (size_t i = 0; known_exts[i]; ++i)\n+    {\n+      if (!strcmp (ext, known_exts[i]))\n+\treturn TRUE;\n+    }\n+\n+  return FALSE;\n+}\n+\n+/* Predicator function for x-prefixed extensions.\n+   Anything goes, except the literal 'x'.  */\n+\n+static bfd_boolean\n+riscv_ext_x_valid_p (const char *arg)\n+{\n+  if (!strcasecmp (arg, \"x\"))\n+    return FALSE;\n+\n+  return TRUE;\n+}\n+\n+/* Predicator functions for z-prefixed extensions.\n+   Only known z-extensions are permitted.  */\n+\n+static bfd_boolean\n+riscv_ext_z_valid_p (const char *arg)\n+{\n+  return riscv_multi_letter_ext_valid_p (arg, riscv_std_z_ext_strtab);\n+}\n+\n+/* Predicator function for 's' prefixed extensions.\n+   Must be either literal 's', or a known s-prefixed extension.  */\n+\n+static bfd_boolean\n+riscv_ext_s_valid_p (const char *arg)\n+{\n+  return riscv_multi_letter_ext_valid_p (arg, riscv_std_s_ext_strtab);\n+}\n+\n+/* Parsing order that is specified by the ISA manual.  */\n+\n+static const riscv_parse_config_t parse_config[] =\n+{\n+   {RV_ISA_CLASS_S, \"s\", riscv_ext_s_valid_p},\n+   {RV_ISA_CLASS_Z, \"z\", riscv_ext_z_valid_p},\n+   {RV_ISA_CLASS_X, \"x\", riscv_ext_x_valid_p},\n+   {RV_ISA_CLASS_UNKNOWN, NULL, NULL}\n+};\n+\n /* Function for parsing arch string.\n \n    Return Value:\n@@ -1347,26 +1490,14 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n   if (p == NULL)\n     return FALSE;\n \n-  /* Parsing non-standard extension.  */\n-  p = riscv_parse_sv_or_non_std_ext (\n-\trps, arch, p, \"x\", \"non-standard extension\");\n+  /* Parse the different classes of extensions in the specified order.  */\n \n-  if (p == NULL)\n-    return FALSE;\n+  for (size_t i = 0; i < ARRAY_SIZE (parse_config); ++i) {\n+    p = riscv_parse_prefixed_ext (rps, arch, p, &parse_config[i]);\n \n-  /* Parsing supervisor extension.  */\n-  p = riscv_parse_sv_or_non_std_ext (\n-\trps, arch, p, \"s\", \"supervisor extension\");\n-\n-  if (p == NULL)\n-    return FALSE;\n-\n-  /* Parsing non-standard supervisor extension.  */\n-  p = riscv_parse_sv_or_non_std_ext (\n-\trps, arch, p, \"sx\", \"non-standard supervisor extension\");\n-\n-  if (p == NULL)\n-    return FALSE;\n+    if (p == NULL)\n+      return FALSE;\n+  }\n \n   if (*p != '\\0')\n     {"
    },
    {
      "sha": "76ee27404cb3c7cc9809d3e82d679c7d5f99f647",
      "filename": "bfd/elfxx-riscv.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/elfxx-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/bfd/elfxx-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.h?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -86,3 +86,20 @@ riscv_release_subset_list (riscv_subset_list_t *);\n \n extern char *\n riscv_arch_str (unsigned, const riscv_subset_list_t *);\n+\n+/* ISA extension name class. E.g. \"zbb\" corresponds to RV_ISA_CLASS_Z,\n+   \"xargs\" corresponds to RV_ISA_CLASS_X, etc.  Order is important\n+   here.  */\n+\n+typedef enum riscv_isa_ext_class\n+  {\n+   RV_ISA_CLASS_S,\n+   RV_ISA_CLASS_Z,\n+   RV_ISA_CLASS_X,\n+   RV_ISA_CLASS_UNKNOWN\n+  } riscv_isa_ext_class_t;\n+\n+/* Classify the argument 'ext' into one of riscv_isa_ext_class_t.  */\n+\n+riscv_isa_ext_class_t\n+riscv_get_prefix_class (const char *);"
    },
    {
      "sha": "ad880aa2342e2bc181c14d62dc744f016f9dd4a7",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -1,3 +1,14 @@\n+2020-01-22  Maxim Blinov  <maxim.blinov@embecosm.com>\n+\n+\t* testsuite/gas/riscv/march-ok-s.d: sx is no longer valid and\n+\ts exts must be known, so rename *ok* to *fail*.\n+\t* testsuite/gas/riscv/march-ok-sx.d: Likewise.\n+\t* testsuite/gas/riscv/march-ok-s-with-version: Likewise.\n+\t* testsuite/gas/riscv/march-fail-s.l: Expected error messages for\n+\tabove change.\n+\t* testsuite/gas/riscv/march-fail-sx.l: Likewise.\n+\t* testsuite/gas/riscv/march-fail-sx-with-version.l: Likewise.\n+\n 2020-01-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/25438"
    },
    {
      "sha": "a514d4aec76ace617e20c9d3da9433523b71d6dc",
      "filename": "gas/testsuite/gas/riscv/march-fail-s-with-version",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s-with-version",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s-with-version",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-s-with-version?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -0,0 +1,2 @@\n+Assembler messages:\n+.*: Invalid or unknown s ISA extension: 'sfoo'\n\\ No newline at end of file"
    },
    {
      "sha": "9881c2a0e0e7720b7d70ece17dfd4e2d68773513",
      "filename": "gas/testsuite/gas/riscv/march-fail-s-with-version.d",
      "status": "renamed",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s-with-version.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s-with-version.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-s-with-version.d?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -1,5 +1,6 @@\n #as: -march=rv32isfoo3p4\n #objdump: -dr\n #source: empty.s\n+#error_output: march-fail-s-with-version.l\n \n .*:     file format elf32-littleriscv",
      "previous_filename": "gas/testsuite/gas/riscv/march-ok-s-with-version.d"
    },
    {
      "sha": "6b1f957276b582a6176a89eafc675ad8cbea9f2c",
      "filename": "gas/testsuite/gas/riscv/march-fail-s-with-version.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s-with-version.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s-with-version.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-s-with-version.l?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -0,0 +1,2 @@\n+Assembler messages:\n+.*: Invalid or unknown s ISA extension: 'sfoo'"
    },
    {
      "sha": "ebc8377aaf25f2234500ffceb877483c586bd92e",
      "filename": "gas/testsuite/gas/riscv/march-fail-s.d",
      "status": "renamed",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-s.d?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -1,5 +1,6 @@\n #as: -march=rv32isfoo\n #objdump: -dr\n #source: empty.s\n+#error_output: march-fail-s.l\n \n .*:     file format elf32-littleriscv",
      "previous_filename": "gas/testsuite/gas/riscv/march-ok-s.d"
    },
    {
      "sha": "6b1f957276b582a6176a89eafc675ad8cbea9f2c",
      "filename": "gas/testsuite/gas/riscv/march-fail-s.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-s.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-s.l?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -0,0 +1,2 @@\n+Assembler messages:\n+.*: Invalid or unknown s ISA extension: 'sfoo'"
    },
    {
      "sha": "144a85c2fb15028133cd3e2c59821ccb5ebac4a5",
      "filename": "gas/testsuite/gas/riscv/march-fail-sx.d",
      "status": "renamed",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-sx.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-sx.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-sx.d?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -1,5 +1,6 @@\n-#as: -march=rv32isfoo_sxbar\n+#as: -march=rv32i_sxbar\n #objdump: -dr\n #source: empty.s\n+#error_output: march-fail-sx.l\n \n .*:     file format elf32-littleriscv",
      "previous_filename": "gas/testsuite/gas/riscv/march-ok-sx.d"
    },
    {
      "sha": "b8ead71a3b59738f4e02b3258d128825a808d698",
      "filename": "gas/testsuite/gas/riscv/march-fail-sx.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-sx.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403d1bd91dffc9e6f5029faaa9cce7c07f268d52/gas/testsuite/gas/riscv/march-fail-sx.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-sx.l?ref=403d1bd91dffc9e6f5029faaa9cce7c07f268d52",
      "patch": "@@ -0,0 +1,2 @@\n+Assembler messages:\n+.*: Invalid or unknown s ISA extension: 'sxbar'"
    }
  ]
}