{
  "sha": "eb86c5e2e824787875187901b12fba52ef873278",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWI4NmM1ZTJlODI0Nzg3ODc1MTg3OTAxYjEyZmJhNTJlZjg3MzI3OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-09T17:05:59Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-22T09:43:02Z"
    },
    "message": "gdb: Improve output from \"info types\" commad\n\nThis commit makes two changes to the \"info types\" command:\n\nFirst, only use typedef_print for printing typedefs, and use\ntype_print for printing non-typedef scalar (non-struct) types.  The\nresult of this is the output for builtin types goes from this:\n\n    typedef double;\n    typedef float;\n    typedef int;\n\nto this:\n\n    double;\n    float;\n    int;\n\nwhich seems to make more sense.\n\nNext GDB no longer matches msymbols as possible type names.  When\nlooking for function symbols it makes sense to report matching\nmsymbols from the text sections, and for variables msymbols from the\ndata/bss sections, but when reporting types GDB would match msymbols\nof type absolute.  But I don't see why these are likely to indicate\ntype names.  As such I've updated the msymbol matching lists in\nsymtab.c:search_symbols so that when searching in the TYPES_DOMAIN, we\nnever match any msymbols.\n\ngdb/ChangeLog:\n\n\t* symtab.c (search_symbols): Adjust msymbol matching type arrays\n\tso that GDB doesn't match any msymbols when searching in the\n\tTYPES_DOMAIN.\n\t(print_symbol_info): Print using typedef_print or type_print based\n\ton the type of the symbol.  Add updated FIXME comment moved from...\n\t(_initialize_symtab): ... move and update FIXME comment to above.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/info-types.c: New file.\n\t* gdb.base/info-types.exp: New file.",
    "tree": {
      "sha": "e487127c6778dc3e325acb0d882552e46a2610ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e487127c6778dc3e325acb0d882552e46a2610ae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb86c5e2e824787875187901b12fba52ef873278",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb86c5e2e824787875187901b12fba52ef873278",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb86c5e2e824787875187901b12fba52ef873278",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb86c5e2e824787875187901b12fba52ef873278/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a8eab7c6d529ddd248ff5243bb22e9346196e376",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8eab7c6d529ddd248ff5243bb22e9346196e376",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a8eab7c6d529ddd248ff5243bb22e9346196e376"
    }
  ],
  "stats": {
    "total": 235,
    "additions": 222,
    "deletions": 13
  },
  "files": [
    {
      "sha": "f4e067bb7b4cc79953023e855786f7491cd1475d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb86c5e2e824787875187901b12fba52ef873278/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb86c5e2e824787875187901b12fba52ef873278/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=eb86c5e2e824787875187901b12fba52ef873278",
      "patch": "@@ -1,3 +1,12 @@\n+2019-07-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* symtab.c (search_symbols): Adjust msymbol matching type arrays\n+\tso that GDB doesn't match any msymbols when searching in the\n+\tTYPES_DOMAIN.\n+\t(print_symbol_info): Print using typedef_print or type_print based\n+\ton the type of the symbol.  Add updated FIXME comment moved from...\n+\t(_initialize_symtab): ... move and update FIXME comment to above.\n+\n 2019-07-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention adding -q option to \"info types\"."
    },
    {
      "sha": "5b8bfc1df7e44bcc8d04900748dec6466beabce1",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb86c5e2e824787875187901b12fba52ef873278/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb86c5e2e824787875187901b12fba52ef873278/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=eb86c5e2e824787875187901b12fba52ef873278",
      "patch": "@@ -4343,13 +4343,13 @@ search_symbols (const char *regexp, enum search_domain kind,\n   struct symbol *sym;\n   int found_misc = 0;\n   static const enum minimal_symbol_type types[]\n-    = {mst_data, mst_text, mst_abs};\n+    = {mst_data, mst_text, mst_unknown};\n   static const enum minimal_symbol_type types2[]\n-    = {mst_bss, mst_file_text, mst_abs};\n+    = {mst_bss, mst_file_text, mst_unknown};\n   static const enum minimal_symbol_type types3[]\n-    = {mst_file_data, mst_solib_trampoline, mst_abs};\n+    = {mst_file_data, mst_solib_trampoline, mst_unknown};\n   static const enum minimal_symbol_type types4[]\n-    = {mst_file_bss, mst_text_gnu_ifunc, mst_abs};\n+    = {mst_file_bss, mst_text_gnu_ifunc, mst_unknown};\n   enum minimal_symbol_type ourtype;\n   enum minimal_symbol_type ourtype2;\n   enum minimal_symbol_type ourtype3;\n@@ -4632,7 +4632,23 @@ print_symbol_info (enum search_domain kind,\n   /* Typedef that is not a C++ class.  */\n   if (kind == TYPES_DOMAIN\n       && SYMBOL_DOMAIN (sym) != STRUCT_DOMAIN)\n-    typedef_print (SYMBOL_TYPE (sym), sym, gdb_stdout);\n+    {\n+      /* FIXME: For C (and C++) we end up with a difference in output here\n+\t between how a typedef is printed, and non-typedefs are printed.\n+\t The TYPEDEF_PRINT code places a \";\" at the end in an attempt to\n+\t appear C-like, while TYPE_PRINT doesn't.\n+\n+\t For the struct printing case below, things are worse, we force\n+\t printing of the \";\" in this function, which is going to be wrong\n+\t for languages that don't require a \";\" between statements.  */\n+      if (TYPE_CODE (SYMBOL_TYPE (sym)) == TYPE_CODE_TYPEDEF)\n+\ttypedef_print (SYMBOL_TYPE (sym), sym, gdb_stdout);\n+      else\n+\t{\n+\t  type_print (SYMBOL_TYPE (sym), \"\", gdb_stdout, -1);\n+\t  printf_filtered (\"\\n\");\n+\t}\n+    }\n   /* variable, func, or typedef-that-is-c++-class.  */\n   else if (kind < TYPES_DOMAIN\n \t   || (kind == TYPES_DOMAIN\n@@ -6084,14 +6100,6 @@ Prints the functions.\\n\"),\n \t\t\t\t  _(\"functions\")));\n   set_cmd_completer_handle_brkchars (c, info_print_command_completer);\n \n-  /* FIXME:  This command has at least the following problems:\n-     1.  It prints builtin types (in a very strange and confusing fashion).\n-     2.  It doesn't print right, e.g. with\n-     typedef struct foo *FOO\n-     type_print prints \"FOO\" when we want to make it (in this situation)\n-     print \"struct foo *\".\n-     I also think \"ptype\" or \"whatis\" is more likely to be useful (but if\n-     there is much disagreement \"info types\" can be fixed).  */\n   c = add_info (\"types\", info_types_command, _(\"\\\n All type names, or those matching REGEXP.\\n\\\n Usage: info types [-q] [REGEXP]\\n\\"
    },
    {
      "sha": "864da179d9e86ef55f06fcbfda9c0af4d5261a4d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb86c5e2e824787875187901b12fba52ef873278/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb86c5e2e824787875187901b12fba52ef873278/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=eb86c5e2e824787875187901b12fba52ef873278",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/info-types.c: New file.\n+\t* gdb.base/info-types.exp: New file.\n+\n 2019-07-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.arch/riscv-bp-infcall.c: New file."
    },
    {
      "sha": "6746238801d69419e38cb3b3deaa5e0a04f7a45c",
      "filename": "gdb/testsuite/gdb.base/info-types.c",
      "status": "added",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb86c5e2e824787875187901b12fba52ef873278/gdb/testsuite/gdb.base/info-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb86c5e2e824787875187901b12fba52ef873278/gdb/testsuite/gdb.base/info-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/info-types.c?ref=eb86c5e2e824787875187901b12fba52ef873278",
      "patch": "@@ -0,0 +1,78 @@\n+/* Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+typedef int my_int_t;\n+typedef float my_float_t;\n+typedef my_int_t nested_int_t;\n+typedef my_float_t nested_float_t;\n+\n+struct baz_t\n+{\n+  float f;\n+  double d;\n+};\n+\n+typedef struct baz_t baz_t;\n+typedef struct baz_t baz;\n+typedef baz_t nested_baz_t;\n+typedef baz nested_baz;\n+typedef struct baz_t *baz_ptr;\n+\n+enum enum_t\n+{\n+ AA, BB, CC\n+};\n+\n+typedef enum enum_t my_enum_t;\n+typedef my_enum_t nested_enum_t;\n+\n+volatile int var_a;\n+volatile float var_b;\n+volatile my_int_t var_c;\n+volatile my_float_t var_d;\n+volatile nested_int_t var_e;\n+volatile nested_float_t var_f;\n+volatile struct baz_t var_g;\n+volatile baz_t var_h;\n+volatile baz var_i;\n+volatile nested_baz_t var_j;\n+volatile nested_baz var_k;\n+volatile baz_ptr var_l;\n+volatile enum enum_t var_m;\n+volatile my_enum_t var_n;\n+volatile nested_enum_t var_o;\n+\n+#ifdef __cplusplus\n+\n+class CL\n+{\n+  int a;\n+};\n+\n+typedef CL my_cl;\n+typedef CL *my_ptr;\n+\n+volatile CL var_cpp_a;\n+volatile my_cl var_cpp_b;\n+volatile my_ptr var_cpp_c;\n+\n+#endif /* __cplusplus */\n+\n+int\n+main ()\n+{\n+  asm (\"\" ::: \"memory\");\n+  return 0;\n+}"
    },
    {
      "sha": "a58084253980d3fe0b888e3b644ee463cc67b30b",
      "filename": "gdb/testsuite/gdb.base/info-types.exp",
      "status": "added",
      "additions": 109,
      "deletions": 0,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb86c5e2e824787875187901b12fba52ef873278/gdb/testsuite/gdb.base/info-types.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb86c5e2e824787875187901b12fba52ef873278/gdb/testsuite/gdb.base/info-types.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/info-types.exp?ref=eb86c5e2e824787875187901b12fba52ef873278",
      "patch": "@@ -0,0 +1,109 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check that 'info types' produces the expected output for an inferior\n+# containing a number of different types.\n+\n+# Only test C++ if we are able.  Always use C.\n+if { [skip_cplus_tests] || [get_compiler_info \"c++\"] } {\n+    set lang {c}\n+} else {\n+    set lang {c c++}\n+}\n+\n+foreach l $lang {\n+    set dir \"$l\"\n+    remote_exec host \"rm -rf [standard_output_file ${dir}]\"\n+    remote_exec host \"mkdir -p [standard_output_file ${dir}]\"\n+}\n+\n+# Run 'info types' test, compiling the test file for language LANG,\n+# which should be either 'c' or 'c++'.\n+proc run_test { lang } {\n+    global testfile\n+    global srcfile\n+    global binfile\n+    global subdir\n+    global srcdir\n+    global compile_flags\n+\n+    standard_testfile .c\n+\n+    if {[prepare_for_testing \"failed to prepare\" \\\n+\t     \"${lang}/${testfile}\" $srcfile \"debug $lang\"]} {\n+\treturn -1\n+    }\n+\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn 0\n+    }\n+\n+    if { $lang == \"c++\" } {\n+\tset output_re \\\n+\t    [multi_line \\\n+\t\t \"All defined types:\" \\\n+\t\t \"\" \\\n+\t\t \"File .*:\" \\\n+\t\t \"59:\\[\\t \\]+CL;\" \\\n+\t\t \"21:\\[\\t \\]+baz_t;\" \\\n+\t\t \"33:\\[\\t \\]+enum_t;\" \\\n+\t\t \"28:\\[\\t \\]+typedef baz_t baz;\" \\\n+\t\t \"31:\\[\\t \\]+typedef baz_t \\\\* baz_ptr;\" \\\n+\t\t \"27:\\[\\t \\]+typedef baz_t baz_t;\" \\\n+\t\t \"\\[\\t \\]+double\" \\\n+\t\t \"\\[\\t \\]+float\" \\\n+\t\t \"\\[\\t \\]+int\" \\\n+\t\t \"64:\\[\\t \\]+typedef CL my_cl;\" \\\n+\t\t \"38:\\[\\t \\]+typedef enum_t my_enum_t;\" \\\n+\t\t \"17:\\[\\t \\]+typedef float my_float_t;\" \\\n+\t\t \"16:\\[\\t \\]+typedef int my_int_t;\" \\\n+\t\t \"65:\\[\\t \\]+typedef CL \\\\* my_ptr;\" \\\n+\t\t \"30:\\[\\t \\]+typedef baz_t nested_baz;\" \\\n+\t\t \"29:\\[\\t \\]+typedef baz_t nested_baz_t;\" \\\n+\t\t \"39:\\[\\t \\]+typedef enum_t nested_enum_t;\" \\\n+\t\t \"19:\\[\\t \\]+typedef float nested_float_t;\" \\\n+\t\t \"18:\\[\\t \\]+typedef int nested_int_t;\" \\\n+\t\t \"\\[\\t \\]+unsigned int\"]\n+    } else {\n+\tset output_re \\\n+\t    [multi_line \\\n+\t\t \"All defined types:\" \\\n+\t\t \"\" \\\n+\t\t \"File .*:\" \\\n+\t\t \"28:\\[\\t \\]+typedef struct baz_t baz;\" \\\n+\t\t \"31:\\[\\t \\]+typedef struct baz_t \\\\* baz_ptr;\" \\\n+\t\t \"21:\\[\\t \\]+struct baz_t;\" \\\n+\t\t \"\\[\\t \\]+double\" \\\n+\t\t \"33:\\[\\t \\]+enum enum_t;\" \\\n+\t\t \"\\[\\t \\]+float\" \\\n+\t\t \"\\[\\t \\]+int\" \\\n+\t\t \"38:\\[\\t \\]+typedef enum enum_t my_enum_t;\" \\\n+\t\t \"17:\\[\\t \\]+typedef float my_float_t;\" \\\n+\t\t \"16:\\[\\t \\]+typedef int my_int_t;\" \\\n+\t\t \"30:\\[\\t \\]+typedef struct baz_t nested_baz;\" \\\n+\t\t \"29:\\[\\t \\]+typedef struct baz_t nested_baz_t;\" \\\n+\t\t \"39:\\[\\t \\]+typedef enum enum_t nested_enum_t;\" \\\n+\t\t \"19:\\[\\t \\]+typedef float nested_float_t;\" \\\n+\t\t \"18:\\[\\t \\]+typedef int nested_int_t;\" \\\n+\t\t \"\\[\\t \\]+unsigned int\" ]\n+    }\n+\n+    gdb_test \"info types\" $output_re\n+}\n+\n+foreach_with_prefix l $lang {\n+    run_test $l\n+}"
    }
  ]
}