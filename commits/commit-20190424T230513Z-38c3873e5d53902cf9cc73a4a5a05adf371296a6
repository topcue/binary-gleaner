{
  "sha": "38c3873e5d53902cf9cc73a4a5a05adf371296a6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzhjMzg3M2U1ZDUzOTAyY2Y5Y2M3M2E0YTVhMDVhZGYzNzEyOTZhNg==",
  "commit": {
    "author": {
      "name": "Alexandre Oliva",
      "email": "aoliva@redhat.com",
      "date": "2019-04-13T08:55:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-24T23:05:13Z"
    },
    "message": "Speed up locview resolution with relaxable frags\n\nTargets such as xtensa incur a much higher overhead to resolve\nlocation view numbers than e.g. x86, because the expressions used to\ncompute view numbers cannot be resolved soon enough.\n\nEach view number is computed by incrementing the previous view, if\nthey are both at the same address, or by resetting it to zero\notherwise.  If PV is the previous view number, PL is its location, and\nNL is the location of the next view, its number is computed by\nevaluating NV = !(NL > PL) * (PV + 1).\n\nset_or_check_view uses resolve_expression to decide whether portions\nof this expression can be simplified to constants.  The (NL > PL)\nsubexpression is one that can often be resolved to a constant,\nbreaking chains of view number computations at instructions of nonzero\nlength, but not after alignment that might be unnecessary.\n\nAlas, when nearly every frag ends with a relaxable instruction,\nfrag_offset_fixed_p will correctly fail to determine a known offset\nbetween two unresolved addresses in neighboring frags, so the\nunresolved symbolic operation will be constructed and used in the\ncomputation of most view numbers.  This results in very deep\nexpressions.\n\nAs view numbers get referenced in location view lists, each operand in\nthe list goes through symbol_clone_if_forward_ref, which recurses on\nevery subexpression.  If each view number were to be referenced, this\nwould exhibit O(n^2) behavior, where n is the depth of the view number\nexpressions, i.e., the length of view number sequences without an\nearly resolution that cuts the expression short.\n\nThis patch enables address compares used by view numbering to be\nresolved even when exact offsets are not known, using new logic to\ndetermine when the location either remained the same or changed for\nsure, even with the possibility of relaxation.  This enables most view\nnumber expressions to be resolved with a small, reasonable depth.\n\n\tPR gas/24444\n\t* frags.c (frag_gtoffset_p): New.\n\t* frags.h (frag_gtoffset_p): Declare it.\n\t* expr.c (resolve_expression): Use it.",
    "tree": {
      "sha": "c833fb3857be146bd9f1085b943b3a5acc31b842",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c833fb3857be146bd9f1085b943b3a5acc31b842"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/38c3873e5d53902cf9cc73a4a5a05adf371296a6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38c3873e5d53902cf9cc73a4a5a05adf371296a6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/38c3873e5d53902cf9cc73a4a5a05adf371296a6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38c3873e5d53902cf9cc73a4a5a05adf371296a6/comments",
  "author": null,
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1670072efb31e82d52d408940062860e2835d79c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1670072efb31e82d52d408940062860e2835d79c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1670072efb31e82d52d408940062860e2835d79c"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 69,
    "deletions": 1
  },
  "files": [
    {
      "sha": "8558ecd7b488d6cff6f6b6ed03569e9df3baef1d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=38c3873e5d53902cf9cc73a4a5a05adf371296a6",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-25  Alexandre Oliva  <aoliva@redhat.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\tPR gas/24444\n+\t* frags.c (frag_gtoffset_p): New.\n+\t* frags.h (frag_gtoffset_p): Declare it.\n+\t* expr.c (resolve_expression): Use it.\n+\n 2019-04-24  Alan Modra  <amodra@gmail.com>\n \n \tPR 24444"
    },
    {
      "sha": "3efde88cc0a2c1034022f14454c3fb36c147432c",
      "filename": "gas/expr.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.c?ref=38c3873e5d53902cf9cc73a4a5a05adf371296a6",
      "patch": "@@ -2179,7 +2179,10 @@ resolve_expression (expressionS *expressionP)\n \t\t|| op == O_lt || op == O_le || op == O_ge || op == O_gt)\n \t       && seg_left == seg_right\n \t       && (finalize_syms\n-\t\t   || frag_offset_fixed_p (frag_left, frag_right, &frag_off))\n+\t\t   || frag_offset_fixed_p (frag_left, frag_right, &frag_off)\n+\t\t   || (op == O_gt\n+\t\t       && frag_gtoffset_p (left, frag_left,\n+\t\t\t\t\t   right, frag_right, &frag_off)))\n \t       && (seg_left != reg_section || left == right)\n \t       && (seg_left != undefined_section || add_symbol == op_symbol)))\n \t{"
    },
    {
      "sha": "2f21b9db200d8301b300d0c0dd58fad13c467036",
      "filename": "gas/frags.c",
      "status": "modified",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/frags.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/frags.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/frags.c?ref=38c3873e5d53902cf9cc73a4a5a05adf371296a6",
      "patch": "@@ -462,3 +462,58 @@ frag_offset_fixed_p (const fragS *frag1, const fragS *frag2, offsetT *offset)\n \n   return FALSE;\n }\n+\n+/* Return TRUE if we can determine whether FRAG2 OFF2 appears after\n+   (strict >, not >=) FRAG1 OFF1, assuming it is not before.  Set\n+   *OFFSET so that resolve_expression will resolve an O_gt operation\n+   between them to false (0) if they are guaranteed to be at the same\n+   location, or to true (-1) if they are guaranteed to be at different\n+   locations.  Return FALSE conservatively, e.g. if neither result can\n+   be guaranteed (yet).\n+\n+   They are known to be in the same segment, and not the same frag\n+   (this is a fallback for frag_offset_fixed_p, that always takes care\n+   of this case), and it is expected (from the uses this is designed\n+   to simplify, namely location view increments) that frag2 is\n+   reachable from frag1 following the fr_next links, rather than the\n+   other way round.  */\n+\n+bfd_boolean\n+frag_gtoffset_p (valueT off2, const fragS *frag2,\n+\t\t valueT off1, const fragS *frag1, offsetT *offset)\n+{\n+  /* Insanity check.  */\n+  if (frag2 == frag1 || off1 > frag1->fr_fix)\n+    return FALSE;\n+\n+  /* If the first symbol offset is at the end of the first frag and\n+     the second symbol offset at the beginning of the second frag then\n+     it is possible they are at the same address.  Go looking for a\n+     non-zero fr_fix in any frag between these frags.  If found then\n+     we can say the O_gt result will be true.  If no such frag is\n+     found we assume that frag1 or any of the following frags might\n+     have a variable tail and thus the answer is unknown.  This isn't\n+     strictly true; some frags don't have a variable tail, but it\n+     doesn't seem worth optimizing for those cases.  */\n+  const fragS *frag = frag1;\n+  offsetT delta = off2 - off1;\n+  for (;;)\n+    {\n+      delta += frag->fr_fix;\n+      frag = frag->fr_next;\n+      if (frag == frag2)\n+\t{\n+\t  if (delta == 0)\n+\t    return FALSE;\n+\t  break;\n+\t}\n+      /* If we run off the end of the frag chain then we have a case\n+\t where frag2 is not after frag1, ie. an O_gt expression not\n+\t created for .loc view.  */\n+      if (frag == NULL)\n+\treturn FALSE;\n+    }\n+\n+  *offset = (off2 - off1 - delta) * OCTETS_PER_BYTE;\n+  return TRUE;\n+}"
    },
    {
      "sha": "6d84aaab3f66376488eebf6eb5efa611e6024cd5",
      "filename": "gas/frags.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/frags.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38c3873e5d53902cf9cc73a4a5a05adf371296a6/gas/frags.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/frags.h?ref=38c3873e5d53902cf9cc73a4a5a05adf371296a6",
      "patch": "@@ -154,6 +154,8 @@ char *frag_var (relax_stateT type,\n \t\tchar *opcode);\n \n bfd_boolean frag_offset_fixed_p (const fragS *, const fragS *, offsetT *);\n+bfd_boolean frag_gtoffset_p (valueT, const fragS *, valueT, const fragS *,\n+\t\t\t     offsetT *);\n \n int get_frag_count (void);\n void clear_frag_count (void);"
    }
  ]
}