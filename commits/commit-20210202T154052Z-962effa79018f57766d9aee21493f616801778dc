{
  "sha": "962effa79018f57766d9aee21493f616801778dc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTYyZWZmYTc5MDE4ZjU3NzY2ZDlhZWUyMTQ5M2Y2MTY4MDE3NzhkYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-02-02T15:40:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-02T15:40:52Z"
    },
    "message": "gdb/testsuite: add .debug_rnglists tests\n\nAdd tests for the various issues fixed in the previous patches.\n\nAdd a new \"rnglists\" procedure to the DWARF assembler, to allow\ngenerating .debug_rnglists sections.  A trivial change is required to\nsupport the DWARF 5 CU header layout.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/26813\n\t* lib/dwarf.exp (_handle_DW_FORM): Handle DW_FORM_rnglistx.\n\t(cu): Generate header for DWARF 5.\n\t(rnglists): New proc.\n\t* gdb.dwarf2/rnglists-multiple-cus.exp: New.\n\t* gdb.dwarf2/rnglists-sec-offset.exp: New.\n\nChange-Id: I5b297e59c370c60cf671dec19796a6c3b9a9f632",
    "tree": {
      "sha": "7ed2b2d492b4e7f3f48f7ac4b1df87fde6356109",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7ed2b2d492b4e7f3f48f7ac4b1df87fde6356109"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/962effa79018f57766d9aee21493f616801778dc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/962effa79018f57766d9aee21493f616801778dc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/962effa79018f57766d9aee21493f616801778dc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/962effa79018f57766d9aee21493f616801778dc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1c4010369aaa3ead33b7a5c248be9693d51b856",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1c4010369aaa3ead33b7a5c248be9693d51b856",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1c4010369aaa3ead33b7a5c248be9693d51b856"
    }
  ],
  "stats": {
    "total": 378,
    "additions": 375,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ec385e5df8d5393ac9b7e713213ea773e96144f0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=962effa79018f57766d9aee21493f616801778dc",
      "patch": "@@ -1,3 +1,12 @@\n+2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\tPR gdb/26813\n+\t* lib/dwarf.exp (_handle_DW_FORM): Handle DW_FORM_rnglistx.\n+\t(cu): Generate header for DWARF 5.\n+\t(rnglists): New proc.\n+\t* gdb.dwarf2/rnglists-multiple-cus.exp: New.\n+\t* gdb.dwarf2/rnglists-sec-offset.exp: New.\n+\n 2021-02-02  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/24620"
    },
    {
      "sha": "e09cd4e8fe731c6d5a8563db440f5623b7afdfd8",
      "filename": "gdb/testsuite/gdb.dwarf2/rnglists-multiple-cus.exp",
      "status": "added",
      "additions": 102,
      "deletions": 0,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/gdb.dwarf2/rnglists-multiple-cus.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/gdb.dwarf2/rnglists-multiple-cus.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/rnglists-multiple-cus.exp?ref=962effa79018f57766d9aee21493f616801778dc",
      "patch": "@@ -0,0 +1,102 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test to reproduce the crash described in PR 26813.\n+#\n+# When reading a list in any table in the .debug_rnglists section, GDB would\n+# read the header at offset 0 in the section (the header of the first table).\n+# When the index of the list we read was greater than the number of lists of\n+# the first table, GDB would erroneously report that the index is invalid.\n+#\n+# So this test creates a .debug_rnglists section with two tables.  The second\n+# table has more lists than the first one and we try to read a high index in\n+# the second table.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# Test with 32-bit and 64-bit DWARF.\n+foreach_with_prefix is_64 {false true} {\n+    if { $is_64 } {\n+\tstandard_testfile main.c -dw64.S\n+\tset testfile ${testfile}-dw64\n+    } else {\n+\tstandard_testfile main.c -dw32.S\n+\tset testfile ${testfile}-dw32\n+    }\n+\n+    set asm_file [standard_output_file $srcfile2]\n+    Dwarf::assemble $asm_file {\n+\tglobal is_64\n+\n+\t# The CU uses the DW_FORM_rnglistx form to refer to the .debug_rnglists\n+\t# section.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    DW_TAG_compile_unit {\n+\t\t{DW_AT_ranges 1 DW_FORM_rnglistx}\n+\t\t{DW_AT_rnglists_base cu_table DW_FORM_sec_offset}\n+\t    } {\n+\t\t# This tests a DW_AT_ranges attribute of form DW_FORM_rnglistx on a\n+\t\t# function, which was buggy at some point.\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"foo\"}\n+\t\t    {DW_AT_ranges 2 DW_FORM_rnglistx}\n+\t\t}\n+\t    }\n+\t}\n+\n+\trnglists -is-64 $is_64 {\n+\t    # This table is unused, but exists so that the used table is not at\n+\t    # the beginning of the section.\n+\t    table {\n+\t\tlist_ {\n+\t\t    start_end 0x1000 0x2000\n+\t\t}\n+\t    }\n+\n+\t    # The lists in this table are accessed by index (DW_FORM_rnglistx).\n+\t    table -post-header-label cu_table {\n+\t\t# This list is unused, but exists to offset the next ones.\n+\t\tlist_ {\n+\t\t    start_end 0x2000 0x3000\n+\t\t}\n+\n+\t\t# For the CU.\n+\t\tlist_ {\n+\t\t    start_end 0x3000 0x4000\n+\t\t}\n+\n+\t\t# For function foo.\n+\t\tlist_ {\n+\t\t    start_end 0x3000 0x3010\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t      [list $srcfile $asm_file] {nodebug}] } {\n+\treturn -1\n+    }\n+\n+    # Sanity checks to make sure GDB slurped the symbols correctly.\n+    gdb_test \"p/x &foo\" \" = 0x3000\"\n+}"
    },
    {
      "sha": "d898d11c0dc9c91d940eb7372c1cf6fcdf2b863b",
      "filename": "gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp",
      "status": "added",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp?ref=962effa79018f57766d9aee21493f616801778dc",
      "patch": "@@ -0,0 +1,80 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test DW_AT_ranges attributes referencing the .debug_rnglists section using the\n+# DW_FORM_sec_offset form.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+foreach_with_prefix is_64 {false true} {\n+    if { $is_64 } {\n+\tstandard_testfile main.c -dw64.S\n+\tset testfile ${testfile}-dw64\n+    } else {\n+\tstandard_testfile main.c -dw32.S\n+\tset testfile ${testfile}-dw32\n+    }\n+\n+    set asm_file [standard_output_file $srcfile2]\n+    Dwarf::assemble $asm_file {\n+\tglobal is_64\n+\n+\tdeclare_labels cu_range_list foo_range_list\n+\n+\t# This CU uses the DW_FORM_sec_offset form to refer to the .debug_rnglists\n+\t# section.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    DW_TAG_compile_unit {\n+\t\t{DW_AT_ranges $cu_range_list DW_FORM_sec_offset}\n+\t    } {\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"foo\"}\n+\t\t    {DW_AT_ranges $foo_range_list DW_FORM_sec_offset}\n+\t\t}\n+\t    }\n+\t}\n+\n+\trnglists -is-64 $is_64 {\n+\t    # The lists in this table are accessed by direct offset\n+\t    # (DW_FORM_sec_offset).\n+\t    table {\n+\t\t# For the CU.\n+\t\tcu_range_list: list_ {\n+\t\t    start_end 0x4000 0x5000\n+\t\t}\n+\n+\t\t# For function foo.\n+\t\tfoo_range_list: list_ {\n+\t\t    start_end 0x4000 0x4010\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t      [list $srcfile $asm_file] {nodebug}] } {\n+\treturn -1\n+    }\n+\n+    # Sanity checks to make sure GDB slurped the symbols correctly.\n+    gdb_test \"p/x &foo\" \" = 0x4000\"\n+}"
    },
    {
      "sha": "aba4afba2249341992955fc60e8ac7c5ae05e71a",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 184,
      "deletions": 3,
      "changes": 187,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/962effa79018f57766d9aee21493f616801778dc/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=962effa79018f57766d9aee21493f616801778dc",
      "patch": "@@ -473,7 +473,8 @@ namespace eval Dwarf {\n \t    }\n \n \t    DW_FORM_ref_udata -\n-\t    DW_FORM_udata {\n+\t    DW_FORM_udata -\n+\t    DW_FORM_rnglistx {\n \t\t_op .uleb128 $value\n \t    }\n \n@@ -1115,8 +1116,16 @@ namespace eval Dwarf {\n \t}\n \tdefine_label $start_label\n \t_op .2byte $_cu_version Version\n-\t_op .${_cu_offset_size}byte $my_abbrevs Abbrevs\n-\t_op .byte $_cu_addr_size \"Pointer size\"\n+\n+\t# The CU header for DWARF 4 and 5 are slightly different.\n+\tif { $_cu_version == 5 } {\n+\t    _op .byte 0x1 \"DW_UT_compile\"\n+\t    _op .byte $_cu_addr_size \"Pointer size\"\n+\t    _op .${_cu_offset_size}byte $my_abbrevs Abbrevs\n+\t} else {\n+\t    _op .${_cu_offset_size}byte $my_abbrevs Abbrevs\n+\t    _op .byte $_cu_addr_size \"Pointer size\"\n+\t}\n \n \t_defer_output $_abbrev_section {\n \t    define_label $my_abbrevs\n@@ -1306,6 +1315,178 @@ namespace eval Dwarf {\n \tuplevel $body\n     }\n \n+    # Emit a DWARF .debug_rnglists section.\n+    #\n+    # The target address size is based on the current target's address size.\n+    #\n+    # There is one mandatory positional argument, BODY, which must be Tcl code\n+    # that emits the content of the section.  It is evaluated in the caller's\n+    # context.\n+    #\n+    # The following option can be used:\n+    #\n+    #  - -is-64 true|false: Whether to use 64-bit DWARF instead of 32-bit DWARF.\n+    #                       The default is 32-bit.\n+\n+    proc rnglists { args } {\n+\tvariable _debug_rnglists_addr_size\n+\tvariable _debug_rnglists_offset_size\n+\tvariable _debug_rnglists_is_64_dwarf\n+\n+\tparse_args {{\"is-64\" \"false\"}}\n+\n+\tif { [llength $args] != 1 } {\n+\t    error \"rnglists proc expects one positional argument (body)\"\n+\t}\n+\n+\tlassign $args body\n+\n+\tif [is_64_target] {\n+\t    set _debug_rnglists_addr_size 8\n+\t} else {\n+\t    set _debug_rnglists_addr_size 4\n+\t}\n+\n+\tif { ${is-64} } {\n+\t    set _debug_rnglists_offset_size 8\n+\t    set _debug_rnglists_is_64_dwarf true\n+\t} else {\n+\t    set _debug_rnglists_offset_size 4\n+\t    set _debug_rnglists_is_64_dwarf false\n+\t}\n+\n+\t_section \".debug_rnglists\"\n+\n+\t# Count of tables in the section.\n+\tvariable _debug_rnglists_table_count 0\n+\n+\t# Compute the label name for list at index LIST_IDX, for the current\n+\t# table.\n+\n+\tproc _compute_list_label { list_idx } {\n+\t    variable _debug_rnglists_table_count\n+\n+\t    return \".Lrnglists_table_${_debug_rnglists_table_count}_list_${list_idx}\"\n+\t}\n+\n+\t# Generate one table (header + offset array + range lists).\n+\t#\n+\t# Accepts one positional argument, BODY.  BODY may call the LIST_\n+\t# procedure to generate rnglists.\n+\t#\n+\t# The -post-header-label option can be used to define a label just after\n+\t# the header of the table.  This is the label that a DW_AT_rnglists_base\n+\t# attribute will usually refer to.\n+\n+\tproc table { args } {\n+\t    variable _debug_rnglists_table_count\n+\t    variable _debug_rnglists_addr_size\n+\t    variable _debug_rnglists_offset_size\n+\t    variable _debug_rnglists_is_64_dwarf\n+\n+\t    parse_args {{post-header-label \"\"}}\n+\n+\t    if { [llength $args] != 1 } {\n+\t\terror \"table proc expects one positional argument (body)\"\n+\t    }\n+\n+\t    lassign $args body\n+\n+\t    # Generate one range list.\n+\t    #\n+\t    # BODY may call the various procs defined below to generate list entries.\n+\t    # They correspond to the range list entry kinds described in section 2.17.3\n+\t    # of the DWARF 5 spec.\n+\t    #\n+\t    # To define a label pointing to the beginning of the list, use\n+\t    # the conventional way of declaring and defining labels:\n+\t    #\n+\t    #   declare_labels the_list\n+\t    #\n+\t    #   the_list: list_ {\n+\t    #     ...\n+\t    #   }\n+\n+\t    proc list_ { body } {\n+\t\tvariable _debug_rnglists_list_count\n+\n+\t\t# Define a label for this list.  It is used to build the offset\n+\t\t# array later.\n+\t\tset list_label [_compute_list_label $_debug_rnglists_list_count]\n+\t\tdefine_label $list_label\n+\n+\t\t# Emit a DW_RLE_start_end entry.\n+\n+\t\tproc start_end { start end } {\n+\t\t    variable _debug_rnglists_addr_size\n+\n+\t\t    _op .byte 0x06 \"DW_RLE_start_end\"\n+\t\t    _op .${_debug_rnglists_addr_size}byte $start \"start\"\n+\t\t    _op .${_debug_rnglists_addr_size}byte $end \"end\"\n+\t\t}\n+\n+\t\tuplevel $body\n+\n+\t\t# Emit end of list.\n+\t\t_op .byte 0x00 \"DW_RLE_end_of_list\"\n+\n+\t\tincr _debug_rnglists_list_count\n+\t    }\n+\n+\t    # Count of lists in the table.\n+\t    variable _debug_rnglists_list_count 0\n+\n+\t    # Generate the lists ops first, because we need to know how many\n+\t    # lists there are to generate the header and offset table.\n+\t    set lists_ops [_defer_to_string {\n+\t\tuplevel $body\n+\t    }]\n+\n+\t    set post_unit_len_label \\\n+\t\t[_compute_label \"rnglists_table_${_debug_rnglists_table_count}_post_unit_len\"]\n+\t    set post_header_label \\\n+\t\t[_compute_label \"rnglists_table_${_debug_rnglists_table_count}_post_header\"]\n+\t    set table_end_label \\\n+\t\t[_compute_label \"rnglists_table_${_debug_rnglists_table_count}_end\"]\n+\n+\t    # Emit the table header.\n+\t    if { $_debug_rnglists_is_64_dwarf } {\n+\t\t_op .4byte 0xffffffff \"unit length 1/2\"\n+\t\t_op .8byte \"$table_end_label - $post_unit_len_label\" \"unit length 2/2\"\n+\t    } else {\n+\t\t_op .4byte \"$table_end_label - $post_unit_len_label\" \"unit length\"\n+\t    }\n+\n+\t    define_label $post_unit_len_label\n+\n+\t    _op .2byte 5 \"dwarf version\"\n+\t    _op .byte $_debug_rnglists_addr_size \"address size\"\n+\t    _op .byte 0 \"segment selector size\"\n+\t    _op .4byte \"$_debug_rnglists_list_count\" \"offset entry count\"\n+\n+\t    define_label $post_header_label\n+\n+\t    # Define the user post-header label, if provided.\n+\t    if { ${post-header-label} != \"\" } {\n+\t\tdefine_label ${post-header-label}\n+\t    }\n+\n+\t    # Emit the offset array.\n+\t    for {set list_idx 0} {$list_idx < $_debug_rnglists_list_count} {incr list_idx} {\n+\t\tset list_label [_compute_list_label $list_idx]\n+\t\t_op .${_debug_rnglists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t    }\n+\n+\t    # Emit the actual list data.\n+\t    _emit \"$lists_ops\"\n+\n+\t    define_label $table_end_label\n+\n+\t    incr _debug_rnglists_table_count\n+\t}\n+\n+\tuplevel $body\n+    }\n \n     # Emit a DWARF .debug_line unit.\n     # OPTIONS is a list with an even number of elements containing"
    }
  ]
}