{
  "sha": "81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODFiODZiOTcwMmI1YmU5ZDAyMmU5YjBjOTZjMWVlMmNlMzM5YjViOQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-03-02T17:28:14Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-03-02T17:28:47Z"
    },
    "message": "Fix arm-netbsd build error: convert from FPA to VFP\n\nThe floating point register interface has changed to this:\nhttps://github.com/NetBSD/src/blob/trunk/sys/arch/arm/include/reg.h\n\nIt now uses VFP instead of FPA registers. This patch updates\narm-nbsd-nat.c accordingly.\n\nAlso implements read_description so that these registers are correctly\nprinted by \"info registers\" et al.\n\nTested by compiling & running on arm-netbsd on qemu.\n\ngdb/ChangeLog:\n\n2020-03-02  Christian Biesinger  <cbiesinger@google.com>\n\n\t* arm-nbsd-nat.c (arm_supply_fparegset): Rename to...\n\t(arm_supply_vfpregset): ...this, and update to use VFP registers.\n\t(fetch_fp_register): Update.\n\t(fetch_fp_regs): Update.\n\t(store_fp_register): Update.\n\t(store_fp_regs): Update.\n\t(arm_netbsd_nat_target::read_description): New function.\n\t(fetch_elfcore_registers): Update.",
    "tree": {
      "sha": "157742e48f09ad3121ab8a4c368305a0090470d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/157742e48f09ad3121ab8a4c368305a0090470d0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "24ed6739b699f329c2c45aedee5f8c7d2f54e493",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24ed6739b699f329c2c45aedee5f8c7d2f54e493",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/24ed6739b699f329c2c45aedee5f8c7d2f54e493"
    }
  ],
  "stats": {
    "total": 132,
    "additions": 79,
    "deletions": 53
  },
  "files": [
    {
      "sha": "c997c358ef483822f0cea37c648836997067f05d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
      "patch": "@@ -1,3 +1,14 @@\n+2020-03-02  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* arm-nbsd-nat.c (arm_supply_fparegset): Rename to...\n+\t(arm_supply_vfpregset): ...this, and update to use VFP registers.\n+\t(fetch_fp_register): Update.\n+\t(fetch_fp_regs): Update.\n+\t(store_fp_register): Update.\n+\t(store_fp_regs): Update.\n+\t(arm_netbsd_nat_target::read_description): New function.\n+\t(fetch_elfcore_registers): Update.\n+\n 2020-03-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* remote.c (remote_target::remote_parse_stop_reply): Don't use the"
    },
    {
      "sha": "04fedd4be3af266523f2e7dacb14c876976d40a8",
      "filename": "gdb/arm-nbsd-nat.c",
      "status": "modified",
      "additions": 68,
      "deletions": 53,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9/gdb/arm-nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9/gdb/arm-nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-nat.c?ref=81b86b9702b5be9d022e9b0c96c1ee2ce339b5b9",
      "patch": "@@ -26,10 +26,12 @@\n #include \"target.h\"\n #include <sys/types.h>\n #include <sys/ptrace.h>\n+#include <sys/sysctl.h>\n #include <machine/reg.h>\n #include <machine/frame.h>\n \n #include \"arm-tdep.h\"\n+#include \"aarch32-tdep.h\"\n #include \"inf-ptrace.h\"\n \n class arm_netbsd_nat_target final : public inf_ptrace_target\n@@ -38,6 +40,7 @@ class arm_netbsd_nat_target final : public inf_ptrace_target\n   /* Add our register access methods.  */\n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n+  const struct target_desc *read_description () override;\n };\n \n static arm_netbsd_nat_target the_arm_netbsd_nat_target;\n@@ -65,15 +68,17 @@ arm_supply_gregset (struct regcache *regcache, struct reg *gregset)\n }\n \n static void\n-arm_supply_fparegset (struct regcache *regcache, struct fpreg *fparegset)\n+arm_supply_vfpregset (struct regcache *regcache, struct fpreg *fpregset)\n {\n-  int regno;\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  if (tdep->vfp_register_count == 0)\n+    return;\n \n-  for (regno = ARM_F0_REGNUM; regno <= ARM_F7_REGNUM; regno++)\n-    regcache->raw_supply (regno,\n-\t\t\t  (char *) &fparegset->fpr[regno - ARM_F0_REGNUM]);\n+  struct vfpreg &vfp = fpregset->fpr_vfp;\n+  for (int regno = 0; regno <= tdep->vfp_register_count; regno++)\n+    regcache->raw_supply (regno + ARM_D0_REGNUM, (char *) &vfp.vfp_regs[regno]);\n \n-  regcache->raw_supply (ARM_FPS_REGNUM, (char *) &fparegset->fpr_fpsr);\n+  regcache->raw_supply (ARM_FPSCR_REGNUM, (char *) &vfp.vfp_fpscr);\n }\n \n static void\n@@ -147,29 +152,28 @@ static void\n fetch_fp_register (struct regcache *regcache, int regno)\n {\n   struct fpreg inferior_fp_registers;\n-  int ret;\n+  int ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n+\t\t    (PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n \n-  ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+  struct vfpreg &vfp = inferior_fp_registers.fpr_vfp;\n \n   if (ret < 0)\n     {\n       warning (_(\"unable to fetch floating-point register\"));\n       return;\n     }\n \n-  switch (regno)\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  if (regno == ARM_FPSCR_REGNUM && tdep->vfp_register_count != 0)\n+    regcache->raw_supply (ARM_FPSCR_REGNUM, (char *) &vfp.vfp_fpscr);\n+  else if (regno >= ARM_D0_REGNUM\n+\t   && regno <= ARM_D0_REGNUM + tdep->vfp_register_count)\n     {\n-    case ARM_FPS_REGNUM:\n-      regcache->raw_supply (ARM_FPS_REGNUM,\n-\t\t\t    (char *) &inferior_fp_registers.fpr_fpsr);\n-      break;\n-\n-    default:\n-      regcache->raw_supply\n-\t(regno, (char *) &inferior_fp_registers.fpr[regno - ARM_F0_REGNUM]);\n-      break;\n+      regcache->raw_supply (regno,\n+\t\t\t    (char *) &vfp.vfp_regs[regno - ARM_D0_REGNUM]);\n     }\n+  else\n+    warning (_(\"Invalid register number.\"));\n }\n \n static void\n@@ -188,7 +192,7 @@ fetch_fp_regs (struct regcache *regcache)\n       return;\n     }\n \n-  arm_supply_fparegset (regcache, &inferior_fp_registers);\n+  arm_supply_vfpregset (regcache, &inferior_fp_registers);\n }\n \n void\n@@ -327,29 +331,27 @@ static void\n store_fp_register (const struct regcache *regcache, int regno)\n {\n   struct fpreg inferior_fp_registers;\n-  int ret;\n-\n-  ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+  int ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n+\t\t    (PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+  struct vfpreg &vfp = inferior_fp_registers.fpr_vfp;\n \n   if (ret < 0)\n     {\n       warning (_(\"unable to fetch floating-point registers\"));\n       return;\n     }\n \n-  switch (regno)\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  if (regno == ARM_FPSCR_REGNUM && tdep->vfp_register_count != 0)\n+    regcache->raw_collect (ARM_FPSCR_REGNUM, (char *) &vfp.vfp_fpscr);\n+  else if (regno >= ARM_D0_REGNUM\n+\t   && regno <= ARM_D0_REGNUM + tdep->vfp_register_count)\n     {\n-    case ARM_FPS_REGNUM:\n-      regcache->raw_collect (ARM_FPS_REGNUM,\n-\t\t\t     (char *) &inferior_fp_registers.fpr_fpsr);\n-      break;\n-\n-    default:\n-      regcache->raw_collect\n-\t(regno, (char *) &inferior_fp_registers.fpr[regno - ARM_F0_REGNUM]);\n-      break;\n+      regcache->raw_collect (regno,\n+\t\t\t     (char *) &vfp.vfp_regs[regno - ARM_D0_REGNUM]);\n     }\n+  else\n+    warning (_(\"Invalid register number.\"));\n \n   ret = ptrace (PT_SETFPREGS, regcache->ptid ().pid (),\n \t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n@@ -361,20 +363,20 @@ store_fp_register (const struct regcache *regcache, int regno)\n static void\n store_fp_regs (const struct regcache *regcache)\n {\n-  struct fpreg inferior_fp_registers;\n-  int ret;\n-  int regno;\n-\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  if (tdep->vfp_register_count == 0)\n+    return;\n \n-  for (regno = ARM_F0_REGNUM; regno <= ARM_F7_REGNUM; regno++)\n+  struct fpreg fpregs;\n+  for (int regno = 0; regno <= tdep->vfp_register_count; regno++)\n     regcache->raw_collect\n-      (regno, (char *) &inferior_fp_registers.fpr[regno - ARM_F0_REGNUM]);\n+      (regno + ARM_D0_REGNUM, (char *) &fpregs.fpr_vfp.vfp_regs[regno]);\n \n-  regcache->raw_collect (ARM_FPS_REGNUM,\n-\t\t\t (char *) &inferior_fp_registers.fpr_fpsr);\n+  regcache->raw_collect (ARM_FPSCR_REGNUM,\n+\t\t\t (char *) &fpregs.fpr_vfp.vfp_fpscr);\n \n-  ret = ptrace (PT_SETFPREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+  int ret = ptrace (PT_SETFPREGS, regcache->ptid ().pid (),\n+\t\t    (PTRACE_TYPE_ARG3) &fpregs, 0);\n \n   if (ret < 0)\n     warning (_(\"unable to store floating-point registers\"));\n@@ -397,6 +399,23 @@ arm_netbsd_nat_target::store_registers (struct regcache *regcache, int regno)\n     }\n }\n \n+const struct target_desc *\n+arm_netbsd_nat_target::read_description ()\n+{\n+  int flag;\n+  size_t len = sizeof (flag);\n+\n+  if (sysctlbyname(\"machdep.fpu_present\", &flag, &len, NULL, 0) != 0\n+      || !flag)\n+    return arm_read_description (ARM_FP_TYPE_NONE);\n+\n+  len = sizeof(flag);\n+  if (sysctlbyname(\"machdep.neon_present\", &flag, &len, NULL, 0) == 0 && flag)\n+    return aarch32_read_description ();\n+\n+  return arm_read_description (ARM_FP_TYPE_VFPV3);\n+}\n+\n static void\n fetch_elfcore_registers (struct regcache *regcache,\n \t\t\t gdb_byte *core_reg_sect, unsigned core_reg_size,\n@@ -420,15 +439,11 @@ fetch_elfcore_registers (struct regcache *regcache,\n       break;\n \n     case 2:\n-      if (core_reg_size != sizeof (struct fpreg))\n-\twarning (_(\"wrong size of FPA register set in core file\"));\n-      else\n-\t{\n-\t  /* The memcpy may be unnecessary, but we can't really be sure\n-\t     of the alignment of the data in the core file.  */\n-\t  memcpy (&fparegset, core_reg_sect, sizeof (fparegset));\n-\t  arm_supply_fparegset (regcache, &fparegset);\n-\t}\n+      /* cbiesinger/2020-02-12 -- as far as I can tell, ARM/NetBSD does\n+         not write any floating point registers into the core file (tested\n+\t with NetBSD 9.1_RC1).  When it does, this block will need to read them,\n+\t and the arm-netbsd gdbarch will need a core_read_description function\n+\t to return the right description for them.  */\n       break;\n \n     default:"
    }
  ]
}