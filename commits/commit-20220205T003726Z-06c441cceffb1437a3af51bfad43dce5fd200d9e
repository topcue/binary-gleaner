{
  "sha": "06c441cceffb1437a3af51bfad43dce5fd200d9e",
  "node_id": "C_kwDOANOeidoAKDA2YzQ0MWNjZWZmYjE0MzdhM2FmNTFiZmFkNDNkY2U1ZmQyMDBkOWU",
  "commit": {
    "author": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2022-02-02T10:17:25Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-02-05T00:37:26Z"
    },
    "message": "sim: mips: Add simulator support for mips32r6/mips64r6\n\n2022-02-01  Ali Lown  <ali.lown@imgtec.com>\n\t    Andrew Bennett  <andrew.bennett@imgtec.com>\n\t    Dragan Mladjenovic  <dragan.mladjenovic@rt-rk.com>\n\t    Faraz Shahbazker  <fshahbazker@wavecomp.com>\n\nsim/common/ChangeLog:\n\t* sim-bits.h (EXTEND9, EXTEND18 ,EXTEND19, EXTEND21,\n\tEXTEND26): New macros.\n\nsim/mips/ChangeLog:\n\t* Makefile.in (IGEN_INCLUDE): Add mips3264r6.igen.\n\t* configure: Regenerate.\n\t* configure.ac: Support mipsisa32r6 and mipsisa64r6.\n\t(sim_engine_run): Pick simulator model from processor specified\n\tin e_flags.\n\t* cp1.c (value_fpr): Handle fmt_dc32.\n\t(fp_unary, fp_binary): Zero initialize locals.\n\t(update_fcsr, fp_classify, fp_rint, fp_r6_cmp, inner_fmac,\n\tfp_fmac, fp_min, fp_max, fp_mina, fp_maxa, fp_fmadd, fp_fmsub):\n\tNew functions.\n\t(sim_fpu_class_mips_mapping): New.\n\t* cp1.h (fcsr_ABS2008_mask, fcsr_ABS2008_shift): New define.\n\t* interp.c (MIPSR6_P): New.\n\t(load_word): Allow unaligned memory access for MIPSR6.\n\t* micromips.igen (sc, scd): Adapt to new do_sc* helper signature.\n\t* mips.igen: Add *r6 models.\n\t(signal_if_cti, forbiddenslot32): New helpers.\n\t(delayslot32): Use signal_if_cti.\n\t(do_sc, do_scd); Add store_ll_bit parameter.\n\t(sc, scd): Adapt to previous change.\n\t(nal, beq, bal): New definitions for *r6.\n\t(sll): Split nop and ssnop cases into ...\n\t(nop, ssnop): New definitions.\n\t(loadstore_ea): Use the 32-bit compatibility adressing.\n\t(cache): Split logic into ...\n\t(do_cache): New helper.\n\t(check_fpu): Select IEEE 754-2008 mode for R6.\n\t(not_word_value, unpredictable, check_mt_hilo, check_mf_hilo,\n\tcheck_multi_hilo, check_div_hilo, check_u64, do_dmfc1b, add,\n\tli, addu, and, andi, bgez, bgtz, blez, bltz, bne, break, dadd,\n\tdaddiu, daddu, dror, dror32, drorv, dsll, dsll32, dsllv, dsra,\n\tdsra32, dsrav, dsrl, dsrl32, dsub, dsubu, j, jal, jalr,\n\tjalr.hb, lb, lbu, ld, lh, lhu, lui, lw, lwu, nor, or, ori, ror,\n\trorv, sb, sd, sh, sll, sllv, slt, slti, sltiu, sltu, sra, srav,\n\tsrl, srlv, sub, subu, sw, sync, syscall, teq, tge, tgeu, tlt,\n\ttltu, tne, xor, xori, check_fmt_p, do_load_double,\n\tdo_store_double, abs.FMT, add.FMT, ceil.l.FMT, ceil.w.FMT,\n\tcfc1, ctc1, cvt.d.FMT, cvt.l.FMT, cvt.w.FMT, div.FMT, dfmc1,\n\tdmtc1, floor.l.FMT, floor.w.FMT, ldc1, lwc1, mfc1, mov.FMT,\n\tmtc1, mul.FMT, recip.FMT, round.l.FMT, round.w.FMT, rsqrt.FMT,\n\tsdc1, sqrt.FMT, sub.FMT, swc1, trunc.l.FMT, trunc.w.FMT, bc0f,\n\tbc0fl, bc0t, bc0tl, dmfc0, dmtc0, eret, mfc0, mtc0, cop, tlbp,\n\ttlbr, tlbwi, tlbwr): Enable on *r6 models.\n\t* mips3264r2.igen (dext, dextm, dextu, di, dins, dinsm, dinsu,\n\tdsbh, dshd, ei, ext, mfhc1, mthc1, ins, seb, seh, synci, rdhwr,\n\twsbh): Likewise.\n\t* mips3264r6.igen: New file.\n\t* sim-main.h (FP_formats): Add fmt_dc32.\n\t(FORBIDDEN_SLOT): New macros.\n\t(simFORBIDDENSLOT, FP_R6CMP_*, FP_R6CLASS_*): New defines.\n\t(fp_r6_cmp, fp_classify, fp_rint, fp_min, fp_max, fp_mina,\n\tfp_maxa, fp_fmadd, fp_fmsub): New declarations.\n\t(R6Compare, Classify, RoundToIntegralExact, Min, Max, MinA,\n\tMaxA, FusedMultiplyAdd, FusedMultiplySub): New macros. Wrapping\n\tprevious declarations.\n\nsim/testsuite/mips/ChangeLog:\n\t* basic.exp: Add r6-*.s tests.\n\t(run_r6_removed_test): New function.\n\t(run_endian_tests): New function.\n\t* hilo-hazard-3.s: Skip for mips*r6.\n\t* r2-fpu.s: New test.\n\t* r6-64.s: New test.\n\t* r6-branch.s: New test.\n\t* r6-forbidden.s: New test.\n\t* r6-fpu.s: New test.\n\t* r6-llsc-dp.s: New test.\n\t* r6-llsc-wp.s: New test.\n\t* r6-removed.csv: New test.\n\t* r6-removed.s: New test.\n\t* r6.s: New test.\n\t* utils-r6.inc: New inc.",
    "tree": {
      "sha": "e9622ab76b867b2461991d00658703d630018703",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e9622ab76b867b2461991d00658703d630018703"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/06c441cceffb1437a3af51bfad43dce5fd200d9e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06c441cceffb1437a3af51bfad43dce5fd200d9e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/06c441cceffb1437a3af51bfad43dce5fd200d9e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06c441cceffb1437a3af51bfad43dce5fd200d9e/comments",
  "author": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc3c199facd60cc2facbfeee3e541e6aa6410f52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc3c199facd60cc2facbfeee3e541e6aa6410f52",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc3c199facd60cc2facbfeee3e541e6aa6410f52"
    }
  ],
  "stats": {
    "total": 3824,
    "additions": 3749,
    "deletions": 75
  },
  "files": [
    {
      "sha": "fab1dab478c4d93e40a26f0327e71d29e57a0b57",
      "filename": "sim/common/sim-bits.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/common/sim-bits.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/common/sim-bits.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-bits.h?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -500,12 +500,17 @@ INLINE_SIM_BITS(unsigned_word) MSINSERTED (unsigned_word val, int start, int sto\n #define EXTEND5(X)  (LSSEXT ((X), 4))\n #define EXTEND6(X)  (LSSEXT ((X), 5))\n #define EXTEND8(X)  ((signed_word)(int8_t)(X))\n+#define EXTEND9(X)  (LSSEXT ((X), 8))\n #define EXTEND11(X)  (LSSEXT ((X), 10))\n #define EXTEND12(X)  (LSSEXT ((X), 11))\n #define EXTEND15(X)  (LSSEXT ((X), 14))\n #define EXTEND16(X) ((signed_word)(int16_t)(X))\n+#define EXTEND18(X)  (LSSEXT ((X), 17))\n+#define EXTEND19(X)  (LSSEXT ((X), 18))\n+#define EXTEND21(X)  (LSSEXT ((X), 20))\n #define EXTEND24(X)  (LSSEXT ((X), 23))\n #define EXTEND25(X)  (LSSEXT ((X), 24))\n+#define EXTEND26(X)  (LSSEXT ((X), 25))\n #define EXTEND32(X) ((signed_word)(int32_t)(X))\n #define EXTEND64(X) ((signed_word)(int64_t)(X))\n "
    },
    {
      "sha": "75438be5a183d9bdcf1feed37975a76f0a732987",
      "filename": "sim/mips/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/Makefile.in?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -98,6 +98,7 @@ IGEN_INCLUDE=\\\n \t$(srcdir)/dsp.igen \\\n \t$(srcdir)/dsp2.igen \\\n \t$(srcdir)/mips3264r2.igen \\\n+\t$(srcdir)/mips3264r6.igen \\\n \n # NB:\tSince these can be built by a number of generators, care\n #\tmust be taken to ensure that they are only dependant on"
    },
    {
      "sha": "956b967a0b6c82962092aa6db1019b72ec634620",
      "filename": "sim/mips/configure",
      "status": "modified",
      "additions": 19,
      "deletions": 3,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/configure?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -1871,7 +1871,8 @@ case \"${target}\" in\n \t\t\tsim_gen=MULTI\n \t\t\tsim_multi_configs=\"\\\n \t\t\t  micromips:micromips64,micromipsdsp:32,64,f:mips_micromips\\\n-\t\t\t  mips64r2:mips64r2,mips3d,mips16,mips16e,mdmx,dsp,dsp2,smartmips:32,64,f:mipsisa64r2\"\n+\t\t\t  mipsisa64r2:mips64r2,mips16,mips16e,mdmx,dsp,dsp2,mips3d,smartmips:32,64,f:mipsisa32r2,mipsisa64r2,mipsisa32r5,mipsisa64r5\\\n+\t\t\t  mipsisa64r6:mips64r6:32,64,f:mipsisa32r6,mipsisa64r6\"\n \t\t\tsim_multi_default=mipsisa64r2\n \t\t\t;;\n   mips64*-*-*)\t\tsim_igen_filter=\"32,64,f\"\n@@ -1887,6 +1888,11 @@ case \"${target}\" in\n \t\t\t  mips32r2:mips32r2,mips3d,mips16,mips16e,mdmx,dsp,dsp2,smartmips:32,f:mipsisa32r2\"\n \t\t\tsim_multi_default=mipsisa32r2\n \t\t\t;;\n+  mipsisa32r6*-*-*)\tsim_gen=IGEN\n+\t\t\tsim_igen_machine=\"-M mips32r6\"\n+\t\t\tsim_igen_filter=\"32,f\"\n+\t\t\tsim_mach_default=\"mipsisa32r6\"\n+\t\t\t;;\n   mipsisa32*-*-*)\tsim_gen=M16\n \t\t\tsim_igen_machine=\"-M mips32,mips16,mips16e,smartmips\"\n \t\t\tsim_m16_machine=\"-M mips16,mips16e,mips32\"\n@@ -1899,6 +1905,11 @@ case \"${target}\" in\n \t\t\tsim_igen_filter=\"32,64,f\"\n \t\t\tsim_mach_default=\"mipsisa64r2\"\n \t\t\t;;\n+  mipsisa64r6*-*-*)\tsim_gen=IGEN\n+\t\t\tsim_igen_machine=\"-M mips64r6\"\n+\t\t\tsim_igen_filter=\"32,64,f\"\n+\t\t\tsim_mach_default=\"mipsisa64r6\"\n+\t\t\t;;\n   mipsisa64sb1*-*-*)\tsim_gen=IGEN\n \t\t\tsim_igen_machine=\"-M mips64,mips3d,sb1\"\n \t\t\tsim_igen_filter=\"32,64,f\"\n@@ -1963,7 +1974,7 @@ if test ${sim_gen} = MULTI; then\n \n   cat << __EOF__ > multi-run.c\n /* Main entry point for MULTI simulators.\n-   Copyright (C) 2003-2021 Free Software Foundation, Inc.\n+   Copyright (C) 2003-2022 Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -1985,6 +1996,7 @@ if test ${sim_gen} = MULTI; then\n #include \"sim-main.h\"\n #include \"multi-include.h\"\n #include \"elf-bfd.h\"\n+#include \"elfxx-mips.h\"\n #include \"elf/mips.h\"\n \n #define SD sd\n@@ -2004,7 +2016,11 @@ sim_engine_run (SIM_DESC sd,\n \t   & EF_MIPS_ARCH_ASE_MICROMIPS)\n     mach = bfd_mach_mips_micromips;\n   else\n-    mach = STATE_ARCHITECTURE (SD)->mach;\n+  {\n+     mach = _bfd_elf_mips_mach (elf_elfheader (STATE_PROG_BFD (sd))->e_flags);\n+     if (!mach)\n+       mach = STATE_ARCHITECTURE (SD)->mach;\n+  }\n \n   switch (mach)\n     {"
    },
    {
      "sha": "96806424958ca2526dcffa92d4ebc3b849712872",
      "filename": "sim/mips/configure.ac",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/configure.ac?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -102,7 +102,8 @@ case \"${target}\" in\n \t\t\tsim_gen=MULTI\n \t\t\tsim_multi_configs=\"\\\n \t\t\t  micromips:micromips64,micromipsdsp:32,64,f:mips_micromips\\\n-\t\t\t  mips64r2:mips64r2,mips3d,mips16,mips16e,mdmx,dsp,dsp2,smartmips:32,64,f:mipsisa64r2\"\n+\t\t\t  mipsisa64r2:mips64r2,mips16,mips16e,mdmx,dsp,dsp2,mips3d,smartmips:32,64,f:mipsisa32r2,mipsisa64r2,mipsisa32r5,mipsisa64r5\\\n+\t\t\t  mipsisa64r6:mips64r6:32,64,f:mipsisa32r6,mipsisa64r6\"\n \t\t\tsim_multi_default=mipsisa64r2\n \t\t\t;;\n   mips64*-*-*)\t\tsim_igen_filter=\"32,64,f\"\n@@ -118,6 +119,11 @@ case \"${target}\" in\n \t\t\t  mips32r2:mips32r2,mips3d,mips16,mips16e,mdmx,dsp,dsp2,smartmips:32,f:mipsisa32r2\"\n \t\t\tsim_multi_default=mipsisa32r2\n \t\t\t;;\n+  mipsisa32r6*-*-*)\tsim_gen=IGEN\n+\t\t\tsim_igen_machine=\"-M mips32r6\"\n+\t\t\tsim_igen_filter=\"32,f\"\n+\t\t\tsim_mach_default=\"mipsisa32r6\"\n+\t\t\t;;\n   mipsisa32*-*-*)\tsim_gen=M16\n \t\t\tsim_igen_machine=\"-M mips32,mips16,mips16e,smartmips\"\n \t\t\tsim_m16_machine=\"-M mips16,mips16e,mips32\"\n@@ -130,6 +136,11 @@ case \"${target}\" in\n \t\t\tsim_igen_filter=\"32,64,f\"\n \t\t\tsim_mach_default=\"mipsisa64r2\"\n \t\t\t;;\n+  mipsisa64r6*-*-*)\tsim_gen=IGEN\n+\t\t\tsim_igen_machine=\"-M mips64r6\"\n+\t\t\tsim_igen_filter=\"32,64,f\"\n+\t\t\tsim_mach_default=\"mipsisa64r6\"\n+\t\t\t;;\n   mipsisa64sb1*-*-*)\tsim_gen=IGEN\n \t\t\tsim_igen_machine=\"-M mips64,mips3d,sb1\"\n \t\t\tsim_igen_filter=\"32,64,f\"\n@@ -216,6 +227,7 @@ if test ${sim_gen} = MULTI; then\n #include \"sim-main.h\"\n #include \"multi-include.h\"\n #include \"elf-bfd.h\"\n+#include \"elfxx-mips.h\"\n #include \"elf/mips.h\"\n \n #define SD sd\n@@ -235,7 +247,11 @@ sim_engine_run (SIM_DESC sd,\n \t   & EF_MIPS_ARCH_ASE_MICROMIPS)\n     mach = bfd_mach_mips_micromips;\n   else\n-    mach = STATE_ARCHITECTURE (SD)->mach;\n+  {\n+     mach = _bfd_elf_mips_mach (elf_elfheader (STATE_PROG_BFD (sd))->e_flags);\n+     if (!mach)\n+       mach = STATE_ARCHITECTURE (SD)->mach;\n+  }\n \n   switch (mach)\n     {"
    },
    {
      "sha": "196173c0227db9100e007584b81318c4f860a502",
      "filename": "sim/mips/cp1.c",
      "status": "modified",
      "additions": 402,
      "deletions": 30,
      "changes": 432,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/cp1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/cp1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/cp1.c?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -100,6 +100,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #define FPQNaN_LONG     (UNSIGNED64 (0x7FFFFFFFFFFFFFFF))\n #define FPQNaN_PS       (FP_PS_cat (FPQNaN_SINGLE, FPQNaN_SINGLE))\n \n+static void update_fcsr (sim_cpu *, address_word, sim_fpu_status);\n+\n static const char *fpu_format_name (FP_formats fmt);\n #ifdef DEBUG\n static const char *fpu_rounding_mode_name (int rm);\n@@ -127,7 +129,7 @@ value_fpr (sim_cpu *cpu,\n     }\n \n   /* For values not yet accessed, set to the desired format.  */\n-  if (fmt < fmt_uninterpreted)\n+  if (fmt < fmt_uninterpreted && fmt != fmt_dc32)\n     {\n       if (FPR_STATE[fpr] == fmt_uninterpreted)\n \t{\n@@ -137,7 +139,10 @@ value_fpr (sim_cpu *cpu,\n \t\t  fpu_format_name (fmt));\n #endif /* DEBUG */\n \t}\n-      else if (fmt != FPR_STATE[fpr])\n+      else if (fmt != FPR_STATE[fpr]\n+\t       && !(fmt == fmt_single\n+\t\t    && FPR_STATE[fpr] == fmt_double\n+\t\t    && (FGR[fpr] == 0 || FGR[fpr] == 0xFFFFFFFF)))\n \t{\n \t  sim_io_eprintf (SD, \"FPR %d (format %s) being accessed with format %s - setting to unknown (PC = 0x%s)\\n\",\n \t\t\t  fpr, fpu_format_name (FPR_STATE[fpr]),\n@@ -166,6 +171,7 @@ value_fpr (sim_cpu *cpu,\n \tcase fmt_uninterpreted_32:\n \tcase fmt_single:\n \tcase fmt_word:\n+\tcase fmt_dc32:\n \t  value = (FGR[fpr] & 0xFFFFFFFF);\n \t  break;\n \n@@ -557,8 +563,8 @@ fp_test(uint64_t op1,\n \n   if (sim_fpu_is_nan (&wop1) || sim_fpu_is_nan (&wop2))\n     {\n-      if ((cond & (1 << 3)) ||\n-\t  sim_fpu_is_snan (&wop1) || sim_fpu_is_snan (&wop2))\n+      if ((cond & (1 << 3))\n+\t  || sim_fpu_is_snan (&wop1) || sim_fpu_is_snan (&wop2))\n \tstatus = sim_fpu_status_invalid_snan;\n       less = 0;\n       equal = 0;\n@@ -581,6 +587,109 @@ fp_test(uint64_t op1,\n   return status;\n }\n \n+static const int sim_fpu_class_mips_mapping[] = {\n+  FP_R6CLASS_SNAN, /* SIM_FPU_IS_SNAN = 1, Noisy not-a-number  */\n+  FP_R6CLASS_QNAN, /* SIM_FPU_IS_QNAN = 2, Quiet not-a-number  */\n+  FP_R6CLASS_NEGINF, /* SIM_FPU_IS_NINF = 3, -infinity  */\n+  FP_R6CLASS_POSINF, /* SIM_FPU_IS_PINF = 4, +infinity  */\n+  FP_R6CLASS_NEGNORM, /* SIM_FPU_IS_NNUMBER = 5, -num - [-MAX .. -MIN]  */\n+  FP_R6CLASS_POSNORM, /* SIM_FPU_IS_PNUMBER = 6, +num - [+MIN .. +MAX]  */\n+  FP_R6CLASS_NEGSUB, /* SIM_FPU_IS_NDENORM = 7, -denorm - (MIN .. 0)  */\n+  FP_R6CLASS_POSSUB, /* SIM_FPU_IS_PDENORM = 8, +denorm - (0 .. MIN)  */\n+  FP_R6CLASS_NEGZERO, /* SIM_FPU_IS_NZERO = 9, -0  */\n+  FP_R6CLASS_POSZERO /* SIM_FPU_IS_PZERO = 10, +0  */\n+};\n+\n+uint64_t\n+fp_classify (sim_cpu *cpu,\n+\t     address_word cia,\n+\t     uint64_t op,\n+\t     FP_formats fmt)\n+{\n+  sim_fpu wop;\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      sim_fpu_32to (&wop, op);\n+      break;\n+    case fmt_double:\n+      sim_fpu_64to (&wop, op);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+  return sim_fpu_class_mips_mapping[sim_fpu_classify (&wop) - 1];\n+}\n+\n+int\n+fp_rint (sim_cpu *cpu,\n+\t address_word cia,\n+\t uint64_t op,\n+\t uint64_t *ans,\n+\t FP_formats fmt)\n+{\n+  sim_fpu wop = {0}, wtemp = {0}, wmagic = {0}, wans = {0};\n+  int64_t intermediate;\n+  int status = 0;\n+  sim_fpu_round round = rounding_mode (GETRM());\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      sim_fpu_32to (&wop, op);\n+      sim_fpu_32to (&wmagic, 0x4b000000);\n+      break;\n+    case fmt_double:\n+      sim_fpu_64to (&wop, op);\n+      sim_fpu_64to (&wmagic, 0x4330000000000000);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  if (sim_fpu_is_nan (&wop) || sim_fpu_is_infinity (&wop))\n+    {\n+      status = sim_fpu_status_invalid_cvi;\n+      update_fcsr (cpu, cia, status);\n+      return status;\n+    }\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      if (sim_fpu_is_ge (&wop, &wmagic))\n+\twans = wop;\n+      else\n+\t{\n+\t  sim_fpu_add (&wtemp, &wop, &wmagic);\n+\t  sim_fpu_round_32 (&wtemp, round, sim_fpu_denorm_default);\n+\t  sim_fpu_sub (&wans, &wtemp, &wmagic);\n+\t}\n+      sim_fpu_to32 ((uint32_t *) ans, &wans);\n+      break;\n+    case fmt_double:\n+      if (sim_fpu_is_ge (&wop, &wmagic))\n+\twans = wop;\n+      else\n+\t{\n+\t  sim_fpu_add (&wtemp, &wop, &wmagic);\n+\t  sim_fpu_round_64 (&wtemp, round, sim_fpu_denorm_default);\n+\t  sim_fpu_sub (&wans, &wtemp, &wmagic);\n+\t}\n+      sim_fpu_to64 (ans, &wans);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  if (*ans != op && status == 0)\n+    status = sim_fpu_status_inexact;\n+\n+  update_fcsr (cpu, cia, status);\n+  return status;\n+}\n+\n void\n fp_cmp(sim_cpu *cpu,\n        address_word cia,\n@@ -620,11 +729,91 @@ fp_cmp(sim_cpu *cpu,\n \tbreak;\n       }\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n }\n \n+uint64_t\n+fp_r6_cmp (sim_cpu *cpu,\n+\t   address_word cia,\n+\t   uint64_t op1,\n+\t   uint64_t op2,\n+\t   FP_formats fmt,\n+\t   int cond)\n+{\n+  sim_fpu wop1, wop2;\n+  int result = 0;\n+  int signalling = cond & 0x8;\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      sim_fpu_32to (&wop1, op1);\n+      sim_fpu_32to (&wop2, op2);\n+      break;\n+    case fmt_double:\n+      sim_fpu_64to (&wop1, op1);\n+      sim_fpu_64to (&wop2, op2);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  switch (cond)\n+    {\n+    case FP_R6CMP_AF:\n+      result = 0;\n+      break;\n+    case FP_R6CMP_UN:\n+      result = sim_fpu_is_un (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_OR:\n+      result = sim_fpu_is_or (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_EQ:\n+      result = sim_fpu_is_eq (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_NE:\n+      result = sim_fpu_is_ne (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_LT:\n+      result = sim_fpu_is_lt (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_LE:\n+      result = sim_fpu_is_le (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_UEQ:\n+      result = sim_fpu_is_un (&wop1, &wop2) || sim_fpu_is_eq (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_UNE:\n+      result = sim_fpu_is_un (&wop1, &wop2) || sim_fpu_is_ne (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_ULT:\n+      result = sim_fpu_is_un (&wop1, &wop2) || sim_fpu_is_lt (&wop1, &wop2);\n+      break;\n+    case FP_R6CMP_ULE:\n+      result = sim_fpu_is_un (&wop1, &wop2) || sim_fpu_is_le (&wop1, &wop2);\n+      break;\n+    default:\n+      update_fcsr (cpu, cia, sim_fpu_status_invalid_cmp);\n+      break;\n+    }\n+\n+  if (result)\n+    {\n+      switch (fmt)\n+\t{\n+\tcase fmt_single:\n+\t  return 0xFFFFFFFF;\n+\tcase fmt_double:\n+\t  return 0xFFFFFFFFFFFFFFFF;\n+\tdefault:\n+\t  sim_io_error (SD, \"Bad switch\\n\");\n+\t}\n+     }\n+   else\n+     return 0;\n+}\n \n /* Basic arithmetic operations.  */\n \n@@ -635,7 +824,7 @@ fp_unary(sim_cpu *cpu,\n \t uint64_t op,\n \t FP_formats fmt)\n {\n-  sim_fpu wop;\n+  sim_fpu wop = {0};\n   sim_fpu ans;\n   sim_fpu_round round = rounding_mode (GETRM());\n   sim_fpu_denorm denorm = denorm_mode (cpu);\n@@ -680,8 +869,7 @@ fp_unary(sim_cpu *cpu,\n \tbreak;\n       }\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   update_fcsr (cpu, cia, status);\n@@ -696,9 +884,9 @@ fp_binary(sim_cpu *cpu,\n \t  uint64_t op2,\n \t  FP_formats fmt)\n {\n-  sim_fpu wop1;\n-  sim_fpu wop2;\n-  sim_fpu ans;\n+  sim_fpu wop1 = {0};\n+  sim_fpu wop2 = {0};\n+  sim_fpu ans  = {0};\n   sim_fpu_round round = rounding_mode (GETRM());\n   sim_fpu_denorm denorm = denorm_mode (cpu);\n   sim_fpu_status status = 0;\n@@ -746,8 +934,7 @@ fp_binary(sim_cpu *cpu,\n \tbreak;\n       }\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   update_fcsr (cpu, cia, status);\n@@ -786,7 +973,7 @@ inner_mac(int (*sim_fpu_op)(sim_fpu *, const sim_fpu *, const sim_fpu *),\n \t  ans.normal_exp += scale;\n \tstatus |= sim_fpu_round_32 (&ans, round, denorm);\n \twop1 = ans;\n-        op_status = 0;\n+\top_status = 0;\n \tsim_fpu_32to (&wop2, op3);\n \top_status |= (*sim_fpu_op) (&ans, &wop1, &wop2);\n \top_status |= sim_fpu_round_32 (&ans, round, denorm);\n@@ -812,7 +999,7 @@ inner_mac(int (*sim_fpu_op)(sim_fpu *, const sim_fpu *, const sim_fpu *),\n \t  ans.normal_exp += scale;\n \tstatus |= sim_fpu_round_64 (&ans, round, denorm);\n \twop1 = ans;\n-        op_status = 0;\n+\top_status = 0;\n \tsim_fpu_64to (&wop2, op3);\n \top_status |= (*sim_fpu_op) (&ans, &wop1, &wop2);\n \top_status |= sim_fpu_round_64 (&ans, round, denorm);\n@@ -881,8 +1068,89 @@ fp_mac(sim_cpu *cpu,\n \tbreak;\n       }\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  update_fcsr (cpu, cia, status);\n+  return result;\n+}\n+\n+/* Common FMAC code for .s, .d. Defers setting FCSR to caller.  */\n+static sim_fpu_status\n+inner_fmac (sim_cpu *cpu,\n+\t    int (*sim_fpu_op) (sim_fpu *, const sim_fpu *, const sim_fpu *),\n+\t    uint64_t op1,\n+\t    uint64_t op2,\n+\t    uint64_t op3,\n+\t    sim_fpu_round round,\n+\t    sim_fpu_denorm denorm,\n+\t    FP_formats fmt,\n+\t    uint64_t *result)\n+{\n+  sim_fpu wop1, wop2, ans;\n+  sim_fpu_status status = 0;\n+  sim_fpu_status op_status;\n+  uint32_t t32 = 0;\n+  uint64_t t64 = 0;\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      sim_fpu_32to (&wop1, op1);\n+      sim_fpu_32to (&wop2, op2);\n+      status |= sim_fpu_mul (&ans, &wop1, &wop2);\n+      wop1 = ans;\n+      op_status = 0;\n+      sim_fpu_32to (&wop2, op3);\n+      op_status |= (*sim_fpu_op) (&ans, &wop2, &wop1);\n+      op_status |= sim_fpu_round_32 (&ans, round, denorm);\n+      status |= op_status;\n+      sim_fpu_to32 (&t32, &ans);\n+      t64 = t32;\n+      break;\n+    case fmt_double:\n+      sim_fpu_64to (&wop1, op1);\n+      sim_fpu_64to (&wop2, op2);\n+      status |= sim_fpu_mul (&ans, &wop1, &wop2);\n+      wop1 = ans;\n+      op_status = 0;\n+      sim_fpu_64to (&wop2, op3);\n+      op_status |= (*sim_fpu_op) (&ans, &wop2, &wop1);\n+      op_status |= sim_fpu_round_64 (&ans, round, denorm);\n+      status |= op_status;\n+      sim_fpu_to64 (&t64, &ans);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  *result = t64;\n+  return status;\n+}\n+\n+static uint64_t\n+fp_fmac (sim_cpu *cpu,\n+\t address_word cia,\n+\t int (*sim_fpu_op) (sim_fpu *, const sim_fpu *, const sim_fpu *),\n+\t uint64_t op1,\n+\t uint64_t op2,\n+\t uint64_t op3,\n+\t FP_formats fmt)\n+{\n+  sim_fpu_round round = rounding_mode (GETRM());\n+  sim_fpu_denorm denorm = denorm_mode (cpu);\n+  sim_fpu_status status = 0;\n+  uint64_t result = 0;\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+    case fmt_double:\n+      status = inner_fmac (cpu, sim_fpu_op, op1, op2, op3,\n+\t\t\t   round, denorm, fmt, &result);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   update_fcsr (cpu, cia, status);\n@@ -972,8 +1240,7 @@ fp_inv_sqrt(sim_cpu *cpu,\n \tbreak;\n       }\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   update_fcsr (cpu, cia, status);\n@@ -1039,6 +1306,94 @@ fp_div(sim_cpu *cpu,\n   return fp_binary(cpu, cia, &sim_fpu_div, op1, op2, fmt);\n }\n \n+uint64_t\n+fp_min (sim_cpu *cpu,\n+\taddress_word cia,\n+\tuint64_t op1,\n+\tuint64_t op2,\n+\tFP_formats fmt)\n+{\n+  return fp_binary (cpu, cia, &sim_fpu_min, op1, op2, fmt);\n+}\n+\n+uint64_t\n+fp_max (sim_cpu *cpu,\n+\taddress_word cia,\n+\tuint64_t op1,\n+\tuint64_t op2,\n+\tFP_formats fmt)\n+{\n+  return fp_binary (cpu, cia, &sim_fpu_max, op1, op2, fmt);\n+}\n+\n+uint64_t\n+fp_mina (sim_cpu *cpu,\n+\t address_word cia,\n+\t uint64_t op1,\n+\t uint64_t op2,\n+\t FP_formats fmt)\n+{\n+  uint64_t ret;\n+  sim_fpu wop1 = {0}, wop2 = {0}, waop1, waop2, wans;\n+  sim_fpu_status status = 0;\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      sim_fpu_32to (&wop1, op1);\n+      sim_fpu_32to (&wop2, op2);\n+      break;\n+    case fmt_double:\n+      sim_fpu_64to (&wop1, op1);\n+      sim_fpu_64to (&wop2, op2);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  status |= sim_fpu_abs (&waop1, &wop1);\n+  status |= sim_fpu_abs (&waop2, &wop2);\n+  status |= sim_fpu_min (&wans, &waop1, &waop2);\n+  ret = (sim_fpu_is_eq (&wans, &waop1)) ? op1 : op2;\n+\n+  update_fcsr (cpu, cia, status);\n+  return ret;\n+}\n+\n+uint64_t\n+fp_maxa (sim_cpu *cpu,\n+\t address_word cia,\n+\t uint64_t op1,\n+\t uint64_t op2,\n+\t FP_formats fmt)\n+{\n+  uint64_t ret;\n+  sim_fpu wop1 = {0}, wop2 = {0}, waop1, waop2, wans;\n+  sim_fpu_status status = 0;\n+\n+  switch (fmt)\n+    {\n+    case fmt_single:\n+      sim_fpu_32to (&wop1, op1);\n+      sim_fpu_32to (&wop2, op2);\n+      break;\n+    case fmt_double:\n+      sim_fpu_64to (&wop1, op1);\n+      sim_fpu_64to (&wop2, op2);\n+      break;\n+    default:\n+      sim_io_error (SD, \"Bad switch\\n\");\n+    }\n+\n+  status |= sim_fpu_abs (&waop1, &wop1);\n+  status |= sim_fpu_abs (&waop2, &wop2);\n+  status |= sim_fpu_max (&wans, &waop1, &waop2);\n+  ret = (sim_fpu_is_eq (&wans, &waop1)) ? op1 : op2;\n+\n+  update_fcsr (cpu, cia, status);\n+  return ret;\n+}\n+\n uint64_t\n fp_recip(sim_cpu *cpu,\n          address_word cia,\n@@ -1088,6 +1443,28 @@ fp_msub(sim_cpu *cpu,\n   return fp_mac(cpu, cia, &sim_fpu_sub, op1, op2, op3, 0, 0, fmt);\n }\n \n+uint64_t\n+fp_fmadd (sim_cpu *cpu,\n+          address_word cia,\n+          uint64_t op1,\n+          uint64_t op2,\n+          uint64_t op3,\n+          FP_formats fmt)\n+{\n+  return fp_fmac (cpu, cia, &sim_fpu_add, op1, op2, op3, fmt);\n+}\n+\n+uint64_t\n+fp_fmsub (sim_cpu *cpu,\n+          address_word cia,\n+          uint64_t op1,\n+          uint64_t op2,\n+          uint64_t op3,\n+          FP_formats fmt)\n+{\n+  return fp_fmac (cpu, cia, &sim_fpu_sub, op1, op2, op3, fmt);\n+}\n+\n uint64_t\n fp_nmadd(sim_cpu *cpu,\n          address_word cia,\n@@ -1394,8 +1771,7 @@ convert (sim_cpu *cpu,\n       status = sim_fpu_i64to (&wop, op, round);\n       break;\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   /* Convert sim_fpu format into the output */\n@@ -1430,8 +1806,7 @@ convert (sim_cpu *cpu,\n       break;\n     default:\n       result64 = 0;\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   update_fcsr (cpu, cia, status);\n@@ -1481,8 +1856,7 @@ pack_ps(sim_cpu *cpu,\n \tbreak;\n       }\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   return result;\n@@ -1517,8 +1891,7 @@ convert_ps (sim_cpu *cpu,\n       sim_fpu_32to (&wop_l, FP_PS_lower(op));\n       break;\n     default:\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   /* Convert sim_fpu format into the output */\n@@ -1538,8 +1911,7 @@ convert_ps (sim_cpu *cpu,\n       break;\n     default:\n       result = 0;\n-      sim_io_eprintf (SD, \"Bad switch\\n\");\n-      abort ();\n+      sim_io_error (SD, \"Bad switch\\n\");\n     }\n \n   update_fcsr (cpu, cia, status_u | status_l);"
    },
    {
      "sha": "5622b9384d9dd7c09939983fe7fd005e4206d770",
      "filename": "sim/mips/cp1.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/cp1.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/cp1.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/cp1.h?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -43,6 +43,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n /* FCSR bits for IEEE754-2008 compliance.  */\n #define fcsr_NAN2008_mask       (0x00040000)\n #define fcsr_NAN2008_shift      (18)\n+#define fcsr_ABS2008_mask       (0x00080000)\n+#define fcsr_ABS2008_shift      (19)\n \n #define fenr_FS            (0x00000004)\n "
    },
    {
      "sha": "c5d0901428b945c5ea2783d53a62ec749992cba1",
      "filename": "sim/mips/interp.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/interp.c?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -1549,6 +1549,10 @@ store_word (SIM_DESC sd,\n     }\n }\n \n+#define MIPSR6_P(abfd) \\\n+  ((elf_elfheader (abfd)->e_flags & EF_MIPS_ARCH) == E_MIPS_ARCH_32R6 \\\n+    || (elf_elfheader (abfd)->e_flags & EF_MIPS_ARCH) == E_MIPS_ARCH_64R6)\n+\n /* Load a word from memory.  */\n \n static signed_word\n@@ -1557,7 +1561,7 @@ load_word (SIM_DESC sd,\n \t   address_word cia,\n \t   uword64 vaddr)\n {\n-  if ((vaddr & 3) != 0)\n+  if ((vaddr & 3) != 0 && !MIPSR6_P (STATE_PROG_BFD (sd)))\n     {\n       SIM_CORE_SIGNAL (SD, cpu, cia, read_map, AccessLength_WORD+1, vaddr, read_transfer, sim_core_unaligned_signal);\n     }"
    },
    {
      "sha": "bb61b3f26e69870eb22bcb753c1eb3104a006f6e",
      "filename": "sim/mips/micromips.igen",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/micromips.igen",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/micromips.igen",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/micromips.igen?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -1761,7 +1761,7 @@\n *micromips32:\n *micromips64:\n {\n-  do_sc (SD_, RT, EXTEND12 (IMMEDIATE), BASE, instruction_0);\n+  do_sc (SD_, RT, EXTEND12 (IMMEDIATE), BASE, instruction_0, 1);\n }\n \n \n@@ -3074,7 +3074,7 @@\n *micromips64:\n {\n   check_u64 (SD_, instruction_0);\n-  do_scd (SD_, RT, OFFSET, BASE);\n+  do_scd (SD_, RT, OFFSET, BASE, 1);\n }\n \n 110110,5.RT,5.BASE,16.OFFSET:MICROMIPS64:64::SD"
    },
    {
      "sha": "dfad422761558b2d11d03ef0368325200ae9615e",
      "filename": "sim/mips/mips.igen",
      "status": "modified",
      "additions": 359,
      "deletions": 21,
      "changes": 380,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/mips.igen",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/mips.igen",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/mips.igen?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -46,8 +46,10 @@\n :model:::mipsV:mipsisaV:\n :model:::mips32:mipsisa32:\n :model:::mips32r2:mipsisa32r2:\n+:model:::mips32r6:mipsisa32r6:\n :model:::mips64:mipsisa64:\n :model:::mips64r2:mipsisa64r2:\n+:model:::mips64r6:mipsisa64r6:\n \n //  Vendor ISAs:\n //\n@@ -102,7 +104,28 @@\n \n \n \n-// Helper:\n+// Helpers:\n+//\n+// Check if given instruction is CTI, if so signal\n+//\n+:function:::void:signal_if_cti:instruction_word instr\n+{\n+  uint32_t maj = (instr & 0xfc000000) >> 26;\n+  uint32_t special = instr & 0x3f;\n+  if ((maj & 0x3e) == 0x06 /* Branch/Jump */\n+      || ((maj & 0x38) == 0 && !((maj & 0x6) == 0))\n+      || maj == 0x18\n+      || (maj & 0x37) == 0x32\n+      || (maj & 0x37) == 0x36\n+      || ((maj == 0) && (special == 0x9))\n+      /* DERET/ERET/WAIT */\n+      || ((maj == 0x10) && (instr & 0x02000000)\n+\t  && (special == 0x1f || special == 0x18 || special == 0x20)))\n+    {\n+      SignalException (ReservedInstruction, instr);\n+    }\n+}\n+\n //\n // Simulate a 32 bit delayslot instruction\n //\n@@ -115,12 +138,34 @@\n   CIA = CIA + 4; /* NOTE not mips16 */\n   STATE |= simDELAYSLOT;\n   delay_insn = IMEM32 (CIA); /* NOTE not mips16 */\n+  signal_if_cti (SD_, delay_insn);\n   ENGINE_ISSUE_PREFIX_HOOK();\n   idecode_issue (CPU_, delay_insn, (CIA));\n   STATE &= ~simDELAYSLOT;\n   return target;\n }\n \n+//\n+// Simulate a 32 bit forbidden slot instruction\n+//\n+\n+:function:::address_word:forbiddenslot32:\n+*mips32r6:\n+*mips64r6:\n+{\n+  instruction_word delay_insn;\n+  sim_events_slip (SD, 1);\n+  DSPC = CIA;\n+  CIA = CIA + 4;\n+  STATE |= simFORBIDDENSLOT;\n+  delay_insn = IMEM32 (CIA);\n+  signal_if_cti (SD_, delay_insn);\n+  ENGINE_ISSUE_PREFIX_HOOK ();\n+  idecode_issue (CPU_, delay_insn, (CIA));\n+  STATE &= ~simFORBIDDENSLOT;\n+  return CIA + 4;\n+}\n+\n :function:::address_word:nullify_next_insn32:\n {\n   sim_events_slip (SD, 1);\n@@ -142,6 +187,7 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -154,6 +200,7 @@\n *mips64:\n *mips64r2:\n *micromips64:\n+*mips64r6:\n {\n #if 0 /* XXX FIXME: enable this only after some additional testing.  */\n   /* If in user mode and UX is not set, use 32-bit compatibility effective\n@@ -184,10 +231,12 @@\n *r3900:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n *micromips32:\n *micromips64:\n+*mips64r6:\n {\n #if WITH_TARGET_WORD_BITSIZE == 64\n   return value != (((value & 0xffffffff) ^ 0x80000000) - 0x80000000);\n@@ -219,10 +268,12 @@\n :function:::void:unpredictable:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n *micromips32:\n *micromips64:\n+*mips64r6:\n {\n   unpredictable_action (CPU, CIA);\n }\n@@ -311,8 +362,10 @@\n :function:::int:check_mt_hilo:hilo_history *history\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *r3900:\n *micromips32:\n *micromips64:\n@@ -337,8 +390,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -411,8 +466,10 @@\n :function:::int:check_mult_hilo:hilo_history *hi, hilo_history *lo\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *r3900:\n *micromips32:\n *micromips64:\n@@ -468,10 +525,12 @@\n :function:::int:check_div_hilo:hilo_history *hi, hilo_history *lo\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n *micromips32:\n *micromips64:\n+*mips64r6:\n {\n   int64_t time = sim_events_time (SD);\n   hi->op.timestamp = time;\n@@ -507,8 +566,10 @@\n *mips64r2:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *micromips64:\n *micromips32:\n+*mips64r6:\n {\n #if 0 /* XXX FIXME: enable this only after some additional testing.  */\n   if (UserMode && (SR & (status_UX|status_PX)) == 0)\n@@ -1081,7 +1142,7 @@\n   }\n }\n \n-:function:::void:do_sc:int rt, int offsetarg, int basereg, address_word instruction_0\n+:function:::void:do_sc:int rt, int offsetarg, int basereg, address_word instruction_0, int store_ll_bit\n {\n   uint32_t instruction = instruction_0;\n   address_word base = GPR[basereg];\n@@ -1111,12 +1172,13 @@\n \tif (LLBIT)\n \t  StoreMemory (AccessLength_WORD, memval, memval1, paddr, vaddr,\n \t\t        isREAL);\n-\tGPR[rt] = LLBIT;\n+\tif (store_ll_bit)\n+\t  GPR[rt] = LLBIT;\n       }\n   }\n }\n \n-:function:::void:do_scd:int rt, int roffset, int rbase\n+:function:::void:do_scd:int rt, int roffset, int rbase, int store_ll_bit\n {\n   address_word base = GPR[rbase];\n   address_word offset = EXTEND16 (roffset);\n@@ -1137,7 +1199,8 @@\n \tif (LLBIT)\n \t  StoreMemory (AccessLength_DOUBLEWORD, memval, memval1, paddr, vaddr,\n \t\t       isREAL);\n-\tGPR[rt] = LLBIT;\n+\tif (store_ll_bit)\n+\t  GPR[rt] = LLBIT;\n       }\n   }\n }\n@@ -1376,6 +1439,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1633,6 +1697,7 @@\n *mipsII:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *micromips32:\n {\n   check_fpu (SD_);\n@@ -1763,8 +1828,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1812,8 +1879,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1841,8 +1910,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1868,8 +1939,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1888,8 +1961,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1922,6 +1997,17 @@\n }\n \n \n+000100,5.RS,5.RT,16.OFFSET:R6:32::BEQ\n+\"beq r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  address_word offset = EXTEND16 (OFFSET) << 2;\n+  if (GPR[RS] == GPR[RT])\n+    DELAY_SLOT (NIA  + offset);\n+  else\n+    FORBIDDEN_SLOT ();\n+}\n \n 010100,5.RS,5.RT,16.OFFSET:NORMAL:32::BEQL\n \"beql r<RS>, r<RT>, <OFFSET>\"\n@@ -1957,8 +2043,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -1997,7 +2085,15 @@\n     }\n }\n \n-\n+000001,00000,10001,16.OFFSET:REGIMM:32::BAL\n+\"bal <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  address_word offset = EXTEND16 (OFFSET) << 2;\n+  RA = (CIA + 8);\n+  DELAY_SLOT (NIA + offset);\n+}\n \n 000001,5.RS!31,10011,16.OFFSET:REGIMM:32::BGEZALL\n \"bgezall r<RS>, <OFFSET>\"\n@@ -2063,8 +2159,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -2114,8 +2212,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -2165,8 +2265,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -2209,6 +2311,18 @@\n \n \n \n+000001,00000,10000,16.OFFSET:REGIMM:32::NAL\n+\"nal <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  address_word offset = EXTEND16 (OFFSET) << 2;\n+  RA = (CIA + 8);\n+  FORBIDDEN_SLOT ();\n+}\n+\n+\n+\n 000001,5.RS!31,10010,16.OFFSET:REGIMM:32::BLTZALL\n \"bltzall r<RS>, <OFFSET>\"\n *mipsII:\n@@ -2273,8 +2387,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -2322,8 +2438,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -2370,6 +2488,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2409,6 +2528,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2432,6 +2552,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2450,6 +2571,8 @@\n   if (RT != RD)\n     Unpredictable ();\n   check_u64 (SD_, instruction_0);\n+  if (RT != RD)\n+    Unpredictable ();\n   do_dclo (SD_, RD, RS);\n }\n \n@@ -2464,6 +2587,8 @@\n   if (RT != RD)\n     Unpredictable ();\n   check_u64 (SD_, instruction_0);\n+  if (RT != RD)\n+    Unpredictable ();\n   do_dclz (SD_, RD, RS);\n }\n \n@@ -2771,6 +2896,7 @@\n 000000,00001,5.RT,5.RD,5.SHIFT,111010::64::DROR\n \"dror r<RD>, r<RT>, <SHIFT>\"\n *mips64r2:\n+*mips64r6:\n *vr5400:\n *vr5500:\n {\n@@ -2781,6 +2907,7 @@\n 000000,00001,5.RT,5.RD,5.SHIFT,111110::64::DROR32\n \"dror32 r<RD>, r<RT>, <SHIFT>\"\n *mips64r2:\n+*mips64r6:\n *vr5400:\n *vr5500:\n {\n@@ -2791,6 +2918,7 @@\n 000000,5.RS,5.RT,5.RD,00001,010110::64::DRORV\n \"drorv r<RD>, r<RT>, r<RS>\"\n *mips64r2:\n+*mips64r6:\n *vr5400:\n *vr5500:\n {\n@@ -2813,6 +2941,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2828,6 +2957,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2850,6 +2980,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2872,6 +3003,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2887,6 +3019,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2910,6 +3043,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2932,6 +3066,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2947,6 +3082,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2972,6 +3108,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -2987,6 +3124,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -3009,6 +3147,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -3026,8 +3165,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3048,8 +3189,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3071,8 +3214,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3086,7 +3231,9 @@\n \"jalr.hb r<RS>\":RD == 31\n \"jalr.hb r<RD>, r<RS>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   address_word temp = GPR[RS];\n   GPR[RD] = CIA + 8;\n@@ -3102,8 +3249,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3114,7 +3263,9 @@\n 000000,5.RS,0000000000,10000,001000:SPECIAL:32::JR_HB\n \"jr.hb r<RS>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   DELAY_SLOT (GPR[RS]);\n }\n@@ -3232,8 +3383,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3251,8 +3404,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3268,6 +3423,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -3335,8 +3491,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3354,8 +3512,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3405,8 +3565,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3424,8 +3586,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3498,6 +3662,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -3882,8 +4047,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3908,8 +4075,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3935,8 +4104,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -3973,7 +4144,9 @@\n 000000,00001,5.RT,5.RD,5.SHIFT,000010::32::ROR\n \"ror r<RD>, r<RT>, <SHIFT>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n *smartmips:\n *vr5400:\n *vr5500:\n@@ -3984,7 +4157,9 @@\n 000000,5.RS,5.RT,5.RD,00001,000110::32::RORV\n \"rorv r<RD>, r<RT>, r<RS>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n *smartmips:\n *vr5400:\n *vr5500:\n@@ -4086,8 +4261,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4109,7 +4286,7 @@\n *vr4100:\n *vr5000:\n {\n-  do_sc (SD_, RT, OFFSET, BASE, instruction_0);\n+  do_sc (SD_, RT, OFFSET, BASE, instruction_0, 1);\n }\n \n \n@@ -4124,7 +4301,7 @@\n *vr5000:\n {\n   check_u64 (SD_, instruction_0);\n-  do_scd (SD_, RT, OFFSET, BASE);\n+  do_scd (SD_, RT, OFFSET, BASE, 1);\n }\n \n \n@@ -4135,6 +4312,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4200,8 +4378,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4239,16 +4419,16 @@\n 000000,00000,5.RT,5.RD,5.SHIFT,000000:SPECIAL:32::SLLb\n \"nop\":RD == 0 && RT == 0 && SHIFT == 0\n \"ssnop\":RD == 0 && RT == 0 && SHIFT == 1\n+\"ehb\":RD == 0 && RT == 0 && SHIFT == 3\n \"sll r<RD>, r<RT>, <SHIFT>\"\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n {\n-  /* Skip shift for NOP and SSNOP, so that there won't be lots of\n-     extraneous trace output.  */\n-  if (RD != 0 || RT != 0 || (SHIFT != 0 && SHIFT != 1))\n-    do_sll (SD_, RT, RD, SHIFT);\n+  do_sll (SD_, RT, RD, SHIFT);\n }\n \n \n@@ -4270,8 +4450,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4296,8 +4478,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4322,8 +4506,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4348,8 +4534,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4375,8 +4563,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4404,8 +4594,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4435,8 +4627,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4465,8 +4659,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4495,8 +4691,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4514,8 +4712,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4542,8 +4742,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4561,8 +4763,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *r3900:\n *vr5000:\n@@ -4637,8 +4841,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4656,8 +4862,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4674,8 +4882,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4708,8 +4918,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4759,8 +4971,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4776,8 +4990,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4827,8 +5043,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4844,8 +5062,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -4886,8 +5106,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4912,8 +5134,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -4996,6 +5220,8 @@\n *mipsIII:\n *mipsIV:\n *mips32:\n+*mips32r6:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5051,10 +5277,27 @@\n   if (! COP_Usable (1))\n     SignalExceptionCoProcessorUnusable (1);\n \n-  FCSR &= ~fcsr_NAN2008_mask;\n+  FCSR &= ~(fcsr_NAN2008_mask | fcsr_ABS2008_mask);\n   sim_fpu_quiet_nan_inverted = true;\n }\n \n+// Helper:\n+//\n+// Check that the FPU is currently usable, and signal a CoProcessorUnusable\n+// exception if not.\n+//\n+\n+:function:::void:check_fpu:\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (! COP_Usable (1))\n+    SignalExceptionCoProcessorUnusable (1);\n+\n+  FCSR |= (fcsr_NAN2008_mask | fcsr_ABS2008_mask);\n+  sim_fpu_quiet_nan_inverted = 0;\n+  sim_fpu_set_mode (sim_fpu_ieee754_2008);\n+}\n \n // Helper:\n //\n@@ -5067,6 +5310,7 @@\n *mipsII:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *micromips32:\n {\n   int bigendian = (BigEndianCPU ? ! ReverseEndian : ReverseEndian);\n@@ -5102,6 +5346,7 @@\n *mips32:\n *mips32r2:\n *micromips32:\n+ *mips32r6:\n {\n   int bigendian = (BigEndianCPU ? ! ReverseEndian : ReverseEndian);\n   address_word vaddr;\n@@ -5131,8 +5376,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5151,8 +5398,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5263,8 +5512,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5281,8 +5532,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5328,8 +5581,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n {\n   do_cfc1 (SD_, RT, FS);\n }\n@@ -5365,8 +5620,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n {\n   do_ctc1 (SD_, RT, FS);\n }\n@@ -5384,8 +5641,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5400,8 +5659,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5433,8 +5694,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5474,8 +5737,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5493,8 +5758,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5526,6 +5793,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5561,6 +5829,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5577,8 +5846,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5595,8 +5866,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5610,6 +5883,7 @@\n *mipsII:\n *mips32:\n *mips32r2:\n+*mips32r6:\n {\n   check_fpu (SD_);\n   COP_LD (1, FT, do_load_double (SD_, GPR[BASE], EXTEND16 (OFFSET)));\n@@ -5623,6 +5897,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5684,8 +5959,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5740,8 +6017,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5759,8 +6038,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5869,8 +6150,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5888,8 +6171,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -5907,8 +6192,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6005,8 +6292,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr5000:\n {\n   do_recip_fmt (SD_, FMT, FD, FS);\n@@ -6019,8 +6308,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6037,8 +6328,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6052,8 +6345,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr5000:\n {\n   do_rsqrt_fmt (SD_, FMT, FD, FS);\n@@ -6065,6 +6360,7 @@\n *mipsII:\n *mips32:\n *mips32r2:\n+*mips32r6:\n {\n   do_sdc1 (SD_, FT, OFFSET, BASE);\n }\n@@ -6077,6 +6373,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6088,7 +6385,7 @@\n \n 010011,5.BASE,5.INDEX,5.FS,00000001001:COP1X:32,f::SDXC1\n \"sdxc1 f<FS>, r<INDEX>(r<BASE>)\"\n-*mips32r2\n+*mips32r2:\n {\n   check_fpu (SD_);\n   do_store_double (SD_, GPR[BASE], GPR[INDEX], COP_SD (1, FS));\n@@ -6137,8 +6434,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6156,8 +6455,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6176,8 +6477,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6205,8 +6508,10 @@\n *mipsIV:\n *mipsV:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6223,8 +6528,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6249,8 +6556,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n@@ -6272,8 +6581,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n@@ -6287,8 +6598,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n \n \n@@ -6301,11 +6614,23 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n+:function:::void:do_cache:int op, int rbase, int roffset, address_word instruction_0\n+{\n+  address_word base = GPR[rbase];\n+  address_word offset = EXTEND16 (roffset);\n+  {\n+    address_word vaddr = loadstore_ea (SD_, base, offset);\n+    address_word paddr = vaddr;\n+    CacheOp(op, vaddr, paddr, instruction_0);\n+  }\n+}\n \n 101111,5.BASE,5.OP,16.OFFSET:NORMAL:32::CACHE\n \"cache <OP>, <OFFSET>(r<BASE>)\"\n@@ -6320,13 +6645,7 @@\n *vr5000:\n *r3900:\n {\n-  address_word base = GPR[BASE];\n-  address_word offset = EXTEND16 (OFFSET);\n-  {\n-    address_word vaddr = loadstore_ea (SD_, base, offset);\n-    address_word paddr = vaddr;\n-    CacheOp(OP, vaddr, paddr, instruction_0);\n-  }\n+  do_cache (SD_, OP, BASE, OFFSET, instruction_0);\n }\n \n \n@@ -6337,6 +6656,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   DecodeCoproc (instruction_0, 0, cp0_dmfc0, RT, RD, SEL);\n@@ -6350,6 +6670,7 @@\n *mipsV:\n *mips64:\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   DecodeCoproc (instruction_0, 0, cp0_dmtc0, RT, RD, SEL);\n@@ -6363,8 +6684,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n {\n@@ -6392,8 +6715,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6412,8 +6737,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n *r3900:\n@@ -6446,8 +6773,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *r3900:\n {\n@@ -6465,8 +6794,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n@@ -6480,8 +6811,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n@@ -6495,8 +6828,10 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n@@ -6510,13 +6845,16 @@\n *mipsV:\n *mips32:\n *mips32r2:\n+*mips32r6:\n *mips64:\n *mips64r2:\n+*mips64r6:\n *vr4100:\n *vr5000:\n \n \n :include:::mips3264r2.igen\n+:include:::mips3264r6.igen\n :include:::m16.igen\n :include:::m16e.igen\n :include:::mdmx.igen"
    },
    {
      "sha": "a28d9897f79e90b98d8da1c365fb9121ef1994bd",
      "filename": "sim/mips/mips3264r2.igen",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/mips3264r2.igen",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/mips3264r2.igen",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/mips3264r2.igen?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -193,6 +193,7 @@\n 011111,5.RS,5.RT,5.SIZE,5.LSB,000011::64::DEXT\n \"dext r<RT>, r<RS>, <LSB>, <SIZE+1>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dext (SD_, RT, RS, LSB, SIZE);\n@@ -201,6 +202,7 @@\n 011111,5.RS,5.RT,5.SIZE,5.LSB,000001::64::DEXTM\n \"dextm r<RT>, r<RS>, <LSB>, <SIZE+33>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dextm (SD_, RT, RS, LSB, SIZE);\n@@ -209,6 +211,7 @@\n 011111,5.RS,5.RT,5.SIZE,5.LSB,000010::64::DEXTU\n \"dextu r<RT>, r<RS>, <LSB+32>, <SIZE+1>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dextu (SD_, RT, RS, LSB, SIZE);\n@@ -219,7 +222,9 @@\n \"di\":RT == 0\n \"di r<RT>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_di (SD_, RT);\n }\n@@ -228,6 +233,7 @@\n 011111,5.RS,5.RT,5.MSB,5.LSB,000111::64::DINS\n \"dins r<RT>, r<RS>, <LSB>, <MSB-LSB+1>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dins (SD_, RT, RS, LSB, MSB);\n@@ -236,6 +242,7 @@\n 011111,5.RS,5.RT,5.MSB,5.LSB,000101::64::DINSM\n \"dinsm r<RT>, r<RS>, <LSB>, <MSB+32-LSB+1>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dinsm (SD_, RT, RS, LSB, MSB);\n@@ -244,6 +251,7 @@\n 011111,5.RS,5.RT,5.MSB,5.LSB,000110::64::DINSU\n \"dinsu r<RT>, r<RS>, <LSB+32>, <MSB-LSB+1>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dinsu (SD_, RT, RS, LSB, MSB);\n@@ -253,6 +261,7 @@\n 011111,00000,5.RT,5.RD,00010,100100::64::DSBH\n \"dsbh r<RD>, r<RT>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dsbh (SD_, RD, RT);\n@@ -261,6 +270,7 @@\n 011111,00000,5.RT,5.RD,00101,100100::64::DSHD\n \"dshd r<RD>, r<RT>\"\n *mips64r2:\n+*mips64r6:\n {\n   check_u64 (SD_, instruction_0);\n   do_dshd (SD_, RD, RT);\n@@ -270,7 +280,9 @@\n \"ei\":RT == 0\n \"ei r<RT>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_ei (SD_, RT);\n }\n@@ -279,7 +291,9 @@\n 011111,5.RS,5.RT,5.SIZE,5.LSB,000000::32::EXT\n \"ext r<RT>, r<RS>, <LSB>, <SIZE+1>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_ext (SD_, RT, RS, LSB, SIZE);\n }\n@@ -288,15 +302,19 @@\n 010001,00011,5.RT,5.FS,00000000000:COP1Sa:32,f::MFHC1\n \"mfhc1 r<RT>, f<FS>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_mfhc1 (SD_, RT, FS);\n }\n \n 010001,00111,5.RT,5.FS,00000000000:COP1Sa:32,f::MTHC1\n \"mthc1 r<RT>, f<FS>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_mthc1 (SD_, RT, FS);\n }\n@@ -305,7 +323,9 @@\n 011111,5.RS,5.RT,5.MSB,5.LSB,000100::32::INS\n \"ins r<RT>, r<RS>, <LSB>, <MSB-LSB+1>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_ins (SD_, RT, RS, LSB, MSB);\n }\n@@ -314,15 +334,19 @@\n 011111,00000,5.RT,5.RD,10000,100000::32::SEB\n \"seb r<RD>, r<RT>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_seb (SD_, RD, RT);\n }\n \n 011111,00000,5.RT,5.RD,11000,100000::32::SEH\n \"seh r<RD>, r<RT>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_seh (SD_, RD, RT);\n }\n@@ -331,7 +355,9 @@\n 000001,5.BASE,11111,16.OFFSET::32::SYNCI\n \"synci <OFFSET>(r<BASE>)\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   // sync i-cache - nothing to do currently\n }\n@@ -340,7 +366,9 @@\n 011111,00000,5.RT,5.RD,00000,111011::32::RDHWR\n \"rdhwr r<RT>, r<RD>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_rdhwr (SD_, RT, RD);\n }\n@@ -349,7 +377,9 @@\n 011111,00000,5.RT,5.RD,00010,100000::32::WSBH\n \"wsbh r<RD>, r<RT>\"\n *mips32r2:\n+*mips32r6:\n *mips64r2:\n+*mips64r6:\n {\n   do_wsbh (SD_, RD, RT);\n }"
    },
    {
      "sha": "b83c30980779f9105353a0a086d987c40c8d61f1",
      "filename": "sim/mips/mips3264r6.igen",
      "status": "added",
      "additions": 1226,
      "deletions": 0,
      "changes": 1226,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/mips3264r6.igen",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/mips3264r6.igen",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/mips3264r6.igen?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,1226 @@\n+110010,26.OFFSET:POOL32X:32::BC\n+\"bc <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  NIA = CIA + (EXTEND26 (OFFSET) << 2) + 4;\n+}\n+\n+111010,26.OFFSET:POOL32X:32::BALC\n+\"balc <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  RA = CIA + 4;\n+  NIA = CIA + (EXTEND26 (OFFSET) << 2) + 4;\n+}\n+\n+110110,5.RS!0,21.OFFSET:POOL32X:32::BEQZC\n+\"beqzc r<RS>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (GPR[RS] == 0)\n+    NIA = CIA + (EXTEND21 (OFFSET) << 2) + 4;\n+  else\n+    FORBIDDEN_SLOT ();\n+}\n+\n+110110,00000,5.RT,16.OFFSET:POOL32X:32::JIC\n+\"jic r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  NIA = GPR[RT] + (EXTEND16(OFFSET) << 2);\n+}\n+\n+111110,5.RS!0,21.OFFSET:POOL32X:32::BNEZC\n+\"bnezc r<RS>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (GPR[RS] != 0)\n+    NIA = CIA + (EXTEND21 (OFFSET) << 2) + 4;\n+  else\n+    FORBIDDEN_SLOT ();\n+}\n+\n+111110,00000,5.RT,16.OFFSET:POOL32X:32::JIALC\n+\"jialc r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  RA = CIA + 4;\n+  NIA = GPR[RT] + EXTEND16(OFFSET);\n+}\n+\n+010110,5.RS,5.RT,16.OFFSET:POOL32X:32::B1xxC\n+\"blezc r<RT>, <OFFSET>\": RS==0&&RT!=0\n+\"bgezc r<RT>, <OFFSET>\":RS!=0&&RS==RT\n+\"bgec r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (RS == 0 && RT != 0)\n+    {\n+      //BLEZC\n+      if ((signed_word)GPR[RT] <= 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else if (RS != 0 && RS == RT)\n+    {\n+      //BGEZC\n+      if ((signed_word)GPR[RT] >= 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else\n+    {\n+      //BGEC\n+      if ((signed_word) GPR[RS] >= (signed_word) GPR[RT])\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+}\n+\n+010111,5.RS,5.RT,16.OFFSET:POOL32X:32::B2xxC\n+\"bgtzc r<RT>, <OFFSET>\":RS==0&&RT!=0\n+\"bltzc r<RT>, <OFFSET>\":RS!=0&&RS==RT\n+\"bltc r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (RS == 0 && RT != 0)\n+    {\n+      //BGTZC\n+      if ((signed_word)GPR[RT] > 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else if (RS != 0 && RS == RT)\n+    {\n+      //BLTZC\n+      if ((signed_word)GPR[RT] < 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else\n+    {\n+      //BLTC\n+      if ((signed_word) GPR[RS] < (signed_word) GPR[RT])\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+}\n+\n+000110,5.RS,5.RT!0,16.OFFSET:POOL32X:32::B3xxC\n+\"blezalc r<RT>, <OFFSET>\":RS==0\n+\"bgezalc r<RT>, <OFFSET>\":RS!=0&&RS==RT\n+\"bgeuc r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (RS == 0 && RT != 0)\n+    {\n+      //BLEZALC\n+      RA = CIA + 4;\n+      if ((signed_word)GPR[RT] <= 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else if (RS != 0 && RS == RT)\n+    {\n+      //BGEZALC\n+      RA = CIA + 4;\n+      if ((signed_word)GPR[RT] >= 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else\n+    {\n+      //BGEUC\n+      if (GPR[RS] >= GPR[RT])\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+}\n+\n+000111,5.RS,5.RT!0,16.OFFSET:POOL32X:32::B4xxC\n+\"bgtzalc r<RT>, <OFFSET>\":RS==0\n+\"bltzalc r<RT>, <OFFSET>\":RS!=0&&RS==RT\n+\"bltuc r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (RS == 0 && RT != 0)\n+    {\n+      //BGTZALC\n+      RA = CIA + 4;\n+      if ((signed_word)GPR[RT] > 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else if (RS != 0 && RS == RT)\n+    {\n+      //BLTZALC\n+      RA = CIA + 4;\n+      if ((signed_word)GPR[RT] < 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else\n+    {\n+      //BLTUC\n+      if (GPR[RS] < GPR[RT])\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+}\n+\n+001000,5.RS,5.RT,16.OFFSET:POOL32X:32::BxxxC\n+\"bovc r<RS>, r<RT>, <OFFSET>\":RS>=RT\n+\"beqzalc r<RT>, <OFFSET>\":RS==0&&RT>RS\n+\"beqc r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (RS >= RT)\n+    {\n+      //BOVC\n+      ALU32_BEGIN (GPR[RS] & 0x0ffffffff);\n+      ALU32_ADD (GPR[RT] & 0x0ffffffff);\n+\n+      if (ALU32_HAD_OVERFLOW)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else if (RS == 0)\n+    {\n+      RA = CIA + 4;\n+      //BEQZALC\n+      if (GPR[RT] == 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else\n+    {\n+      //BEQC\n+      if (GPR[RS] == GPR[RT])\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+}\n+\n+011000,5.RS,5.RT,16.OFFSET:POOL32X:32::BNxxxC\n+\"bnvc r<RS>, r<RT>, <OFFSET>\":RS>=RT\n+\"bnezalc r<RT>, <OFFSET>\":RS==0&&RT>RS\n+\"bnec r<RS>, r<RT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  if (RS >= RT)\n+    {\n+      //BNVC\n+      ALU32_BEGIN (GPR[RS] & 0x0ffffffff);\n+      ALU32_ADD (GPR[RT] & 0x0ffffffff);\n+\n+      if (!ALU32_HAD_OVERFLOW)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else if (RS == 0 && RT > RS)\n+    {\n+      //BNEZALC\n+      RA = CIA + 4;\n+      if (GPR[RT] != 0)\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+  else\n+    {\n+      //BNEC\n+      if (GPR[RT] != GPR[RS])\n+\tNIA = CIA + (EXTEND16 (OFFSET) << 2) + 4;\n+      else\n+\tFORBIDDEN_SLOT ();\n+    }\n+}\n+\n+:%s::::R6COND:int r6cond\n+{\n+  switch (r6cond)\n+    {\n+    case FP_R6CMP_SAF:\n+      return \"SAF\";\n+    case FP_R6CMP_SUN:\n+      return \"SUN\";\n+    case FP_R6CMP_SOR:\n+      return \"SOR\";\n+    case FP_R6CMP_SEQ:\n+      return \"SEQ\";\n+    case FP_R6CMP_SUNE:\n+      return \"SUNE\";\n+    case FP_R6CMP_SUEQ:\n+      return \"SUEQ\";\n+    case FP_R6CMP_SNE:\n+      return \"SNE\";\n+    case FP_R6CMP_SLT:\n+      return \"SLT\";\n+    case FP_R6CMP_SULT:\n+      return \"SULT\";\n+    case FP_R6CMP_SLE:\n+      return \"SLE\";\n+    case FP_R6CMP_SULE:\n+      return \"SULE\";\n+    case FP_R6CMP_AF:\n+      return \"AF\";\n+    case FP_R6CMP_UN:\n+      return \"UN\";\n+    case FP_R6CMP_OR:\n+      return \"OR\";\n+    case FP_R6CMP_EQ:\n+      return \"EQ\";\n+    case FP_R6CMP_UNE:\n+      return \"UNE\";\n+    case FP_R6CMP_UEQ:\n+      return \"UEQ\";\n+    case FP_R6CMP_NE:\n+      return \"NE\";\n+    case FP_R6CMP_LT:\n+      return \"LT\";\n+    case FP_R6CMP_ULT:\n+      return \"ULT\";\n+    case FP_R6CMP_LE:\n+      return \"LE\";\n+    case FP_R6CMP_ULE:\n+      return \"ULE\";\n+    default:\n+      abort ();\n+    }\n+}\n+\n+010001,1010,1.FMT,5.FT,5.FS,5.FD,0,5.R6COND:POOL32X:32,f::CMP.cond.fmt\n+\"cmp.%s<R6COND>.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint64_t result;\n+  check_fpu (SD_);\n+  TRACE_ALU_INPUT2 (ValueFPR (FS, FMT), ValueFPR (FT, FMT));\n+\n+  result = R6Compare (ValueFPR (FS, FMT), ValueFPR (FT, FMT), FMT, R6COND);\n+  StoreFPR (FD, FMT, result);\n+  TRACE_ALU_RESULT (result);\n+}\n+\n+010001,01001,5.FT,16.OFFSET:POOL32X:32,f::BC1EQZ\n+\"bc1eqz f<FT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  address_word offset = EXTEND16 (OFFSET) << 2;\n+  check_fpu (SD_);\n+  TRACE_ALU_INPUT1 (FGR[FT]);\n+  if ((FGR[FT] & 0x01) == 0)\n+    DELAY_SLOT (NIA + offset);\n+}\n+\n+010001,01101,5.FT,16.OFFSET:POOL32X:32,f::BC1NEZ\n+\"bc1nez f<FT>, <OFFSET>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  address_word offset = EXTEND16 (OFFSET) << 2;\n+  check_fpu (SD_);\n+  TRACE_ALU_INPUT1 (FGR[FT]);\n+  if ((FGR[FT] & 0x01) != 0)\n+    DELAY_SLOT (NIA + offset);\n+}\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,011000:POOLX:32,f::MADDF.fmt\n+\"maddf.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT3 (FGR[FD], FGR[FS], FGR[FT]);\n+  StoreFPR (FD, fmt, FusedMultiplyAdd (ValueFPR (FS, fmt),\n+\t\t\t\t       ValueFPR (FT, fmt),\n+\t\t\t\t       ValueFPR (FD, fmt), fmt));\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,011001:POOLX:32,f::MSUBF.fmt\n+\"msubf.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT3 (FGR[FD], FGR[FS], FGR[FT]);\n+  StoreFPR (FD, fmt, FusedMultiplySub (ValueFPR (FS, fmt),\n+\t\t\t\t       ValueFPR (FT, fmt),\n+\t\t\t\t       ValueFPR (FD, fmt), fmt));\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,000,2.IMM,000101:SPECIAL:32::LSA\n+\"lsa r<RD>, r<RS>, r<RT>, <IMM + 1>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint32_t t = GPR[RS] << (IMM + 1);\n+  GPR[RD] = EXTEND32(GPR[RT] + t);\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,000,2.IMM,010101:SPECIAL:64::DLSA\n+\"dlsa r<RD>, r<RS>, r<RT>, <IMM + 1>\"\n+*mips64r6:\n+{\n+  uint64_t t = GPR[RS] << (IMM + 1);\n+  GPR[RD] = GPR[RT] + t;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+001111,5.RS!0,5.RT,16.IMMEDIATE:POOL32X:32::AUI\n+\"aui r<RS>, r<RT>, <IMMEDIATE>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT2 (GPR[RS], IMMEDIATE);\n+  GPR[RT] = EXTEND32 (GPR[RS] + (EXTEND16 (IMMEDIATE) << 16));\n+  TRACE_ALU_RESULT (GPR[RT]);\n+}\n+\n+011101,5.RS!0,5.RT,16.IMMEDIATE:POOL32X:64::DAUI\n+\"daui r<RS>, r<RT>, <IMMEDIATE>\"\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT2 (GPR[RS], IMMEDIATE);\n+  GPR[RT] = GPR[RS] + (EXTEND16 (IMMEDIATE) << 16);\n+  TRACE_ALU_RESULT (GPR[RT]);\n+}\n+\n+000001,5.RS,00110,16.IMMEDIATE:POOL32X:64::DAHI\n+\"dahi r<RS>, <IMMEDIATE>\"\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT2 (GPR[RS], IMMEDIATE);\n+  GPR[RS] = GPR[RS] + (EXTEND16 (IMMEDIATE) << 32);\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+000001,5.RS,11110,16.IMMEDIATE:POOL32X:64::DATI\n+\"dati r<RS>, <IMMEDIATE>\"\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT2 (GPR[RS], IMMEDIATE);\n+  GPR[RS] = GPR[RS] + (EXTEND16 (IMMEDIATE) << 48);\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+011111,5.RS,5.RT,5.RD,010,2.IMMEDIATE,100000:POOL32X:32::ALIGN\n+\"align r<RD>, r<RS>, r<RT>, <IMMEDIATE>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint32_t rs = GPR[RS];\n+  uint32_t rt = GPR[RT];\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  GPR[RD] = EXTEND32 (rs >> 8 * (4 - IMMEDIATE) | rt << 8 * IMMEDIATE);\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+011111,5.RS,5.RT,5.RD,01,3.IMMEDIATE,100100:POOL32X:64::DALIGN\n+\"dalign r<RD>, r<RS>, r<RT>, <IMMEDIATE>\"\n+*mips64r6:\n+{\n+  uint64_t rs = GPR[RS];\n+  uint64_t rt = GPR[RT];\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  GPR[RD] = rs >> 8 * (8 - IMMEDIATE) | rt << 8 * IMMEDIATE;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+011111,00000,5.RT,5.RD,00000,100000:POOL32X:32::BITSWAP\n+\"bitswap r<RD>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  /* Taken from: http://graphics.stanford.edu/~seander/bithacks.html */\n+  uint32_t v = GPR[RT];\n+\n+  TRACE_ALU_INPUT1 (v);\n+  v = ((v >> 1)  & 0x55555555) | ((v & 0x55555555) << 1);\n+  v = ((v >> 2)  & 0x33333333) | ((v & 0x33333333) << 2);\n+  v = ((v >> 4)  & 0x0F0F0F0F) | ((v & 0x0F0F0F0F) << 4);\n+  GPR[RD] = EXTEND32 (v);\n+  TRACE_ALU_RESULT(GPR[RD]);\n+}\n+\n+011111,00000,5.RT,5.RD,00000,100100:POOL32X:64::DBITSWAP\n+\"dbitswap r<RD>, r<RT>\"\n+*mips64r6:\n+{\n+  /* Taken from: http://graphics.stanford.edu/~seander/bithacks.html */\n+  uint64_t v = GPR[RT];\n+\n+  TRACE_ALU_INPUT1 (v);\n+  v = ((v >> 1)  & 0x5555555555555555) | ((v & 0x5555555555555555) << 1);\n+  v = ((v >> 2)  & 0x3333333333333333) | ((v & 0x3333333333333333) << 2);\n+  v = ((v >> 4)  & 0x0F0F0F0F0F0F0F0F) | ((v & 0x0F0F0F0F0F0F0F0F) << 4);\n+  TRACE_ALU_RESULT(v);\n+  GPR[RD] = v;\n+}\n+\n+111011,5.RS,00,19.IMMEDIATE:POOL32X:32::ADDIUPC\n+\"addiupc r<RS>, <IMMEDIATE>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT1 (IMMEDIATE);\n+  GPR[RS] = loadstore_ea (SD_, CIA, EXTEND19 (IMMEDIATE) << 2);\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+111011,5.RS,11110,16.IMMEDIATE:POOL32X:32::AUIPC\n+\"auipc r<RS>, <IMMEDIATE>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT1 (IMMEDIATE);\n+  GPR[RS] = loadstore_ea (SD_, CIA, EXTEND32 (IMMEDIATE << 16));\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+111011,5.RS,11111,16.IMMEDIATE:POOL32X:32::ALUIPC\n+\"aluipc r<RS>, <IMMEDIATE>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT1 (IMMEDIATE);\n+  GPR[RS] = ~0x0FFFF & loadstore_ea (SD_, CIA, EXTEND32 (IMMEDIATE << 16));\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+111011,5.RS,01,19.IMMEDIATE:POOL32X:32::LWPC\n+\"lwpc r<RS>, <IMMEDIATE>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint32_t offset = EXTEND19 (IMMEDIATE) << 2;\n+  TRACE_ALU_INPUT1 (IMMEDIATE);\n+  GPR[RS] = EXTEND32 (do_load (SD_, AccessLength_WORD, CIA, offset));\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+111011,5.RS,10,19.IMMEDIATE:POOL32X:64::LWUPC\n+\"lwupc r<RS>, <IMMEDIATE>\"\n+*mips64r6:\n+{\n+  uint32_t offset = EXTEND19 (IMMEDIATE) << 2;\n+  TRACE_ALU_INPUT1 (CIA + offset);\n+  GPR[RS] = do_load (SD_, AccessLength_WORD, CIA, offset);\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+\n+111011,5.RS,110,18.IMMEDIATE:POOL32X:64::LDPC\n+\"ldpc r<RS>, <IMMEDIATE>\"\n+*mips64r6:\n+{\n+  uint32_t offset = EXTEND18 (IMMEDIATE) << 3;\n+  TRACE_ALU_INPUT1 (IMMEDIATE);\n+  GPR[RS] = do_load (SD_, AccessLength_DOUBLEWORD, CIA, offset);\n+  TRACE_ALU_RESULT (GPR[RS]);\n+}\n+010001,1000,1.FMT,00000,5.FS,5.FD,011010::32,64,f::RINT.fmt\n+\"rint.%s<FMT> f<FD>, f<FS>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint64_t result;\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT1 (FGR[FS]);\n+  RoundToIntegralExact (ValueFPR (FS, fmt), &result, fmt);\n+  StoreFPR (FD, fmt, result);\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+\n+010001,1000,1.FMT,00000,5.FS,5.FD,011011::32,64,f::CLASS.fmt\n+\"class.%s<FMT> f<FD>, f<FS>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  StoreFPR (FD, fmt, Classify (ValueFPR (FS, fmt), fmt));\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,011100::32,64,f::MIN.fmt\n+\"min.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT2 (FGR[FS], FGR[FT]);\n+  StoreFPR (FD, fmt, Min (ValueFPR (FS, fmt), ValueFPR (FT, fmt), fmt));\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,011110::32,64,f::MAX.fmt\n+\"max.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT2 (FGR[FS], FGR[FT]);\n+  StoreFPR (FD, fmt, Max (ValueFPR (FS, fmt), ValueFPR (FT, fmt), fmt));\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,011101::32,64,f::MINA.fmt\n+\"mina.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT2 (FGR[FS], FGR[FT]);\n+  StoreFPR (FD, fmt, MinA (ValueFPR (FS, fmt), ValueFPR (FT, fmt), fmt));\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,011111::32,64,f::MAXA.fmt\n+\"maxa.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int fmt = FMT;\n+  check_fpu (SD_);\n+  check_u64 (SD_, instruction_0);\n+  check_fmt_p (SD_, fmt, instruction_0);\n+  TRACE_ALU_INPUT2 (FGR[FS], FGR[FT]);\n+  StoreFPR (FD, fmt, MaxA (ValueFPR (FS, fmt), ValueFPR (FT, fmt), fmt));\n+  TRACE_ALU_RESULT (FGR[FD]);\n+}\n+000000,5.RS,5.RT,5.RD,00010,011000:POOL32X:32::MUL\n+\"mul r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int64_t prod;\n+  if (NotWordValue (GPR[RS]) || NotWordValue (GPR[RT]))\n+    Unpredictable ();\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  prod = ((int64_t)(int32_t) GPR[RS])\n+    * ((int64_t)(int32_t) GPR[RT]);\n+  GPR[RD] = EXTEND32 (VL4_8 (prod));\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011000:POOL32X:32::MUH\n+\"muh r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int64_t prod;\n+  if (NotWordValue (GPR[RS]) || NotWordValue (GPR[RT]))\n+    Unpredictable ();\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  prod = ((int64_t)(int32_t) GPR[RS])\n+    * ((int64_t)(int32_t) GPR[RT]);\n+  GPR[RD] = EXTEND32 (VH4_8 (prod));\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011001:POOL32X:32::MULU\n+\"mulu r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint64_t prod;\n+  if (NotWordValue (GPR[RS]) || NotWordValue (GPR[RT]))\n+    Unpredictable ();\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  prod = ((uint64_t)(uint32_t) GPR[RS])\n+    * ((uint64_t)(uint32_t) GPR[RT]);\n+  GPR[RD] = EXTEND32 (VL4_8 (prod));\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011001:POOL32X:32::MUHU\n+\"muhu r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint64_t prod;\n+  if (NotWordValue (GPR[RS]) || NotWordValue (GPR[RT]))\n+    Unpredictable ();\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  prod = ((uint64_t)(uint32_t) GPR[RS])\n+    * ((uint64_t)(uint32_t) GPR[RT]);\n+  GPR[RD] = EXTEND32 (VH4_8 (prod));\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011010:POOL32X:32::DIV\n+\"div r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int32_t n = GPR[RS];\n+  int32_t d = GPR[RT];\n+  TRACE_ALU_INPUT2 (n,d);\n+  if (d == 0)\n+    GPR[RD] = EXTEND32 (0x80000000);\n+  else if (n == SIGNED32 (0x80000000) && d == -1)\n+    GPR[RD] = EXTEND32 (0x80000000);\n+  else\n+    GPR[RD] = EXTEND32 (n / d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011010:POOL32X:32::MOD\n+\"mod r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int32_t n = GPR[RS];\n+  int32_t d = GPR[RT];\n+  TRACE_ALU_INPUT2 (n,d);\n+  if (d == 0 || (n == SIGNED32 (0x80000000) && d == -1))\n+    GPR[RD] = EXTEND32 (0);\n+  else\n+    GPR[RD] = EXTEND32 (n % d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011011:POOL32X:32::DIVU\n+\"divu r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint32_t n = GPR[RS];\n+  uint32_t d = GPR[RT];\n+  TRACE_ALU_INPUT2 (n,d);\n+  if (d == 0)\n+    GPR[RD] = EXTEND32 (0x80000000);\n+  else\n+    GPR[RD] = EXTEND32 (n / d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011011:POOL32X:32::MODU\n+\"modu r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  uint32_t n = GPR[RS];\n+  uint32_t d = GPR[RT];\n+  TRACE_ALU_INPUT2 (n,d);\n+  if (d == 0)\n+    GPR[RD] = EXTEND32 (0);\n+  else\n+    GPR[RD] = EXTEND32 (n % d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011100:POOL32X:64::DMUL\n+\"dmul r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  uint64_t lo;\n+  uint64_t m00;\n+  uint64_t m01;\n+  uint64_t m10;\n+  uint64_t mid;\n+  int sign;\n+  uint64_t op1 = GPR[RS];\n+  uint64_t op2 = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (op1, op2);\n+  /* make signed multiply unsigned */\n+  sign = 0;\n+  if ((int64_t) op1 < 0)\n+    {\n+      op1 = - op1;\n+      ++sign;\n+    }\n+  if ((int64_t) op2 < 0)\n+    {\n+      op2 = - op2;\n+      ++sign;\n+    }\n+  /* multiply out the sub products */\n+  m00 = ((uint64_t) VL4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m10 = ((uint64_t) VH4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m01 = ((uint64_t) VL4_8 (op1) * (uint64_t) VH4_8 (op2));\n+  /* add the products */\n+  mid = ((uint64_t) VH4_8 (m00)\n+\t + (uint64_t) VL4_8 (m10)\n+\t + (uint64_t) VL4_8 (m01));\n+  lo = U8_4 (mid, m00);\n+  /* fix the sign */\n+  if (sign & 1)\n+    lo = -lo;\n+\n+  GPR[RD] = lo;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011100:POOL32X:64::DMUH\n+\"dmuh r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  uint64_t lo;\n+  uint64_t hi;\n+  uint64_t m00;\n+  uint64_t m01;\n+  uint64_t m10;\n+  uint64_t m11;\n+  uint64_t mid;\n+  int sign;\n+  uint64_t op1 = GPR[RS];\n+  uint64_t op2 = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (op1, op2);\n+  /* make signed multiply unsigned */\n+  sign = 0;\n+  if ((int64_t) op1 < 0)\n+    {\n+      op1 = - op1;\n+      ++sign;\n+    }\n+  if ((int64_t) op2 < 0)\n+    {\n+      op2 = - op2;\n+      ++sign;\n+    }\n+  /* multiply out the 4 sub products */\n+  m00 = ((uint64_t) VL4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m10 = ((uint64_t) VH4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m01 = ((uint64_t) VL4_8 (op1) * (uint64_t) VH4_8 (op2));\n+  m11 = ((uint64_t) VH4_8 (op1) * (uint64_t) VH4_8 (op2));\n+  /* add the products */\n+  mid = ((uint64_t) VH4_8 (m00)\n+\t + (uint64_t) VL4_8 (m10)\n+\t + (uint64_t) VL4_8 (m01));\n+  lo = U8_4 (mid, m00);\n+  hi = (m11\n+\t+ (uint64_t) VH4_8 (mid)\n+\t+ (uint64_t) VH4_8 (m01)\n+\t+ (uint64_t) VH4_8 (m10));\n+  /* fix the sign */\n+  if (sign & 1)\n+    {\n+      lo = -lo;\n+      if (lo == 0)\n+\thi = -hi;\n+      else\n+\thi = -hi - 1;\n+    }\n+\n+  GPR[RD] = hi;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011101:POOL32X:64::DMULU\n+\"dmulu r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  uint64_t lo;\n+  uint64_t m00;\n+  uint64_t m01;\n+  uint64_t m10;\n+  uint64_t mid;\n+  uint64_t op1 = GPR[RS];\n+  uint64_t op2 = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (op1, op2);\n+  /* multiply out the sub products */\n+  m00 = ((uint64_t) VL4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m10 = ((uint64_t) VH4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m01 = ((uint64_t) VL4_8 (op1) * (uint64_t) VH4_8 (op2));\n+  /* add the products */\n+  mid = ((uint64_t) VH4_8 (m00)\n+\t + (uint64_t) VL4_8 (m10)\n+\t + (uint64_t) VL4_8 (m01));\n+  lo = U8_4 (mid, m00);\n+\n+  GPR[RD] = lo;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011101:POOL32X:64::DMUHU\n+\"dmuhu r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  uint64_t lo;\n+  uint64_t hi;\n+  uint64_t m00;\n+  uint64_t m01;\n+  uint64_t m10;\n+  uint64_t m11;\n+  uint64_t mid;\n+  uint64_t op1 = GPR[RS];\n+  uint64_t op2 = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (op1, op2);\n+  /* multiply out the 4 sub products */\n+  m00 = ((uint64_t) VL4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m10 = ((uint64_t) VH4_8 (op1) * (uint64_t) VL4_8 (op2));\n+  m01 = ((uint64_t) VL4_8 (op1) * (uint64_t) VH4_8 (op2));\n+  m11 = ((uint64_t) VH4_8 (op1) * (uint64_t) VH4_8 (op2));\n+  /* add the products */\n+  mid = ((uint64_t) VH4_8 (m00)\n+\t + (uint64_t) VL4_8 (m10)\n+\t + (uint64_t) VL4_8 (m01));\n+  lo = U8_4 (mid, m00);\n+  hi = (m11\n+\t+ (uint64_t) VH4_8 (mid)\n+\t+ (uint64_t) VH4_8 (m01)\n+\t+ (uint64_t) VH4_8 (m10));\n+\n+  GPR[RD] = hi;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011110:POOL32X:64::DDIV\n+\"ddiv r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  int64_t n = GPR[RS];\n+  int64_t d = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (n, d);\n+  if (d == 0)\n+    GPR[RD] = SIGNED64 (0x8000000000000000);\n+  else if (d == -1 && n == SIGNED64 (0x8000000000000000))\n+    GPR[RD] = SIGNED64 (0x8000000000000000);\n+  else\n+    GPR[RD] = (n / d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011110:POOL32X:64::DMOD\n+\"dmod r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  int64_t n = GPR[RS];\n+  int64_t d = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (n, d);\n+  if (d == 0 || (d == -1 && n == SIGNED64 (0x8000000000000000)))\n+    GPR[RD] = SIGNED64 (0);\n+  else\n+    GPR[RD] = (n % d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00010,011111:POOL32X:64::DDIVU\n+\"ddivu r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  uint64_t n = GPR[RS];\n+  uint64_t d = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (n, d);\n+  if (d == 0)\n+    GPR[RD] = UNSIGNED64 (0x8000000000000000);\n+  else\n+    GPR[RD] = (n / d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00011,011111:POOL32X:64::DMODU\n+\"dmodu r<RD>, r<RS>, r<RT>\"\n+*mips64r6:\n+{\n+  uint64_t n = GPR[RS];\n+  uint64_t d = GPR[RT];\n+\n+  check_u64 (SD_, instruction_0);\n+  TRACE_ALU_INPUT2 (n, d);\n+  if (d == 0)\n+    GPR[RD] = UNSIGNED64 (0);\n+  else\n+    GPR[RD] = (n % d);\n+\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+011111,5.BASE,5.RT,9.OFFSET,0,110110:SPECIAL3:32::LL\n+\"ll r<RT>, <OFFSET>(r<BASE>)\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  do_ll (SD_, RT, EXTEND9 (OFFSET), BASE);\n+}\n+\n+011111,5.BASE,5.RT,5.RD,0000,1,110110:SPECIAL3:32::LLWP\n+\"llwp r<RT>, r<RD>, (r<BASE>)\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int first, second;\n+  int offset;\n+\n+  if (RT == BASE)\n+  {\n+    first = RD;\n+    second = RT;\n+    offset = BigEndianCPU ? 0 : 4;\n+  }\n+  else\n+  {\n+    first = RT;\n+    second = RD;\n+    offset = BigEndianCPU ? 4 : 0;\n+  }\n+\n+  do_ll (SD_, first, offset, BASE);\n+  do_ll (SD_, second, offset ^ 4, BASE);\n+}\n+\n+\n+011111,5.BASE,5.RT,9.OFFSET,0,100110:SPECIAL3:32::SC\n+\"sc r<RT>, <OFFSET>(r<BASE>)\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  do_sc (SD_, RT, EXTEND9 (OFFSET), BASE, instruction_0, 1);\n+}\n+\n+011111,5.BASE,5.RT,9.OFFSET,0,110111:SPECIAL3:64::LLD\n+\"lld r<RT>, <OFFSET>(r<BASE>)\"\n+*mips64r6:\n+{\n+  check_u64 (SD_, instruction_0);\n+  do_lld (SD_, RT, EXTEND9 (OFFSET), BASE);\n+}\n+\n+\n+011111,5.BASE,5.RT,5.RD,0000,1,100110:SPECIAL3:32::SCWP\n+\"scwp r<RT>, r<RD>, (r<BASE>)\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  int offset = BigEndianCPU ? 0 : 4;\n+\n+  do_sc (SD_, RD, offset, BASE, instruction_0, 0);\n+  do_sc (SD_, RT, offset ^ 4, BASE, instruction_0, 1);\n+}\n+\n+011111,5.BASE,5.RT,5.RD,0000,1,110111:SPECIAL3:64::LLDP\n+\"lldp r<RT>, r<RD>, (r<BASE>)\"\n+*mips64r6:\n+{\n+  int first, second;\n+  int offset;\n+\n+  check_u64 (SD_, instruction_0);\n+\n+  if (RT == BASE)\n+  {\n+    first = RD;\n+    second = RT;\n+    offset = BigEndianCPU ? 0 : 8;\n+  }\n+  else\n+  {\n+    first = RT;\n+    second = RD;\n+    offset = BigEndianCPU ? 8 : 0;\n+  }\n+\n+  do_lld (SD_, first, offset, BASE);\n+  do_lld (SD_, second, offset ^ 8, BASE);\n+}\n+\n+011111,5.BASE,5.RT,9.OFFSET,0,100111:SPECIAL3:64::SCD\n+\"scd r<RT>, <OFFSET>(r<BASE>)\"\n+*mips64r6:\n+{\n+  check_u64 (SD_, instruction_0);\n+  do_scd (SD_, RT, EXTEND9 (OFFSET), BASE, 1);\n+}\n+\n+011111,5.BASE,5.RT,5.RD,0000,1,100111:SPECIAL3:64::SCDP\n+\"scdp r<RT>, r<RD>, (r<BASE>)\"\n+*mips64r6:\n+{\n+  int offset = BigEndianCPU ? 0 : 8;\n+  check_u64 (SD_, instruction_0);\n+\n+  do_scd (SD_, RD, offset, BASE, 0);\n+  do_scd (SD_, RT, offset ^ 8, BASE, 1);\n+}\n+\n+011111,5.BASE,5.HINT,9.OFFSET,0,110101:SPECIAL3:32::PREF\n+\"pref <HINT>, <OFFSET>(r<BASE>)\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  do_pref (SD_, HINT, EXTEND9 (OFFSET), BASE);\n+}\n+\n+011111,5.BASE,5.HINT,9.OFFSET,0,100101:SPECIAL3:32::CACHE\n+\"cache <HINT>, <OFFSET>(r<BASE>)\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  do_cache (SD_, HINT, BASE, EXTEND9 (OFFSET), instruction_0);\n+}\n+\n+\n+000000,5.RS,00000,5.RD,00001,010000:POOL32X:32::CLZ\n+\"clz r<RD>, r<RS>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  do_clz (SD_, RD, RS);\n+}\n+\n+000000,5.RS,00000,5.RD,00001,010001:POOL32X:32::CLO\n+\"clo r<RD>, r<RS>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  do_clo (SD_, RD, RS);\n+}\n+\n+000000,5.RS,00000,5.RD,00001,010010:POOL32X:64::DCLZ\n+\"dclz r<RD>, r<RS>\"\n+*mips64r6:\n+{\n+  check_u64 (SD_, instruction_0);\n+  do_dclz (SD_, RD, RS);\n+}\n+\n+000000,5.RS,00000,5.RD,00001,010011:POOL32X:64::DCLO\n+\"dclo r<RD>, r<RS>\"\n+*mips64r6:\n+{\n+  check_u64 (SD_, instruction_0);\n+  do_dclo (SD_, RD, RS);\n+}\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,010000:POOL32X:32,f::SEL.fmt\n+\"sel.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  check_fpu (SD_);\n+  check_fmt_p (SD_, FMT, instruction_0);\n+  TRACE_ALU_INPUT3 (FGR[FD], ValueFPR(FS, FMT), ValueFPR(FT, FMT));\n+  if ((FGR[FD] & 0x01) != 0)\n+    StoreFPR (FD, FMT, ValueFPR (FT, FMT));\n+  else\n+    StoreFPR (FD, FMT, ValueFPR (FS, FMT));\n+  TRACE_ALU_RESULT (ValueFPR(FD, FMT));\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,010100:POOL32X:32,f::SELEQZ.fmt\n+\"seleqz.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  check_fpu (SD_);\n+  check_fmt_p (SD_, FMT, instruction_0);\n+  TRACE_ALU_INPUT2 (ValueFPR(FS, FMT), FGR[FT]);\n+  if ((FGR[FT] & 0x01) == 0)\n+    StoreFPR (FD, FMT, ValueFPR (FS, FMT));\n+  else\n+    StoreFPR (FD, FMT, 0);\n+  TRACE_ALU_RESULT (ValueFPR(FD, FMT));\n+}\n+\n+010001,1000,1.FMT,5.FT,5.FS,5.FD,010111:POOL32X:32,f::SELNEZ.fmt\n+\"selnez.%s<FMT> f<FD>, f<FS>, f<FT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  check_fpu (SD_);\n+  check_fmt_p (SD_, FMT, instruction_0);\n+  TRACE_ALU_INPUT2 (ValueFPR(FS, FMT), FGR[FT]);\n+  if ((FGR[FT] & 0x01) == 0)\n+    StoreFPR (FD, FMT, 0);\n+  else\n+    StoreFPR (FD, FMT, ValueFPR (FS, FMT));\n+  TRACE_ALU_RESULT (ValueFPR(FD, FMT));\n+}\n+\n+000000,5.RS,5.RT,5.RD,00000,110101:POOL32X:32::SELEQZ\n+\"seleqz r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  if (GPR[RT] != 0)\n+    GPR[RD] = 0;\n+  else\n+    GPR[RD] = GPR[RS];\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}\n+\n+000000,5.RS,5.RT,5.RD,00000,110111:POOL32X:32::SELNEZ\n+\"selnez r<RD>, r<RS>, r<RT>\"\n+*mips32r6:\n+*mips64r6:\n+{\n+  TRACE_ALU_INPUT2 (GPR[RS], GPR[RT]);\n+  if (GPR[RT] != 0)\n+    GPR[RD] = GPR[RS];\n+  else\n+    GPR[RD] = 0;\n+  TRACE_ALU_RESULT (GPR[RD]);\n+}"
    },
    {
      "sha": "418c65991189cc295c2ddbb6d92f9a9123d284ca",
      "filename": "sim/mips/sim-main.h",
      "status": "modified",
      "additions": 83,
      "deletions": 11,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/mips/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/sim-main.h?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -26,6 +26,8 @@ mips_core_signal ((SD), (CPU), (CIA), (MAP), (NR_BYTES), (ADDR), (TRANSFER), (ER\n #include \"sim-basics.h\"\n #include \"sim-base.h\"\n #include \"bfd.h\"\n+#include \"elf-bfd.h\"\n+#include \"elf/mips.h\"\n \n /* Deprecated macros and types for manipulating 64bit values.  Use\n    ../common/sim-bits.h and ../common/sim-endian.h macros instead. */\n@@ -72,6 +74,9 @@ typedef enum {\n  fmt_word    = 4,\n  fmt_long    = 5,\n  fmt_ps      = 6,\n+ /* The following is a special case for FP conditions where only\n+    the lower 32bits are considered.  This is a HACK.  */\n+ fmt_dc32    = 7,\n  /* The following are well outside the normal acceptable format\n     range, and are used in the register status vector. */\n  fmt_unknown       = 0x10000000,\n@@ -261,6 +266,7 @@ struct _sim_cpu {\n #define DSPC ((CPU)->dspc)\n \n #define DELAY_SLOT(TARGET) NIA = delayslot32 (SD_, (TARGET))\n+#define FORBIDDEN_SLOT() { NIA = forbiddenslot32 (SD_); }\n #define NULLIFY_NEXT_INSTRUCTION() NIA = nullify_next_insn32 (SD_)\n \n \n@@ -271,15 +277,16 @@ struct _sim_cpu {\n #define DSSTATE ((CPU)->dsstate)\n \n /* Flags in the \"state\" variable: */\n-#define simHALTEX       (1 << 2)  /* 0 = run; 1 = halt on exception */\n-#define simHALTIN       (1 << 3)  /* 0 = run; 1 = halt on interrupt */\n-#define simTRACE        (1 << 8)  /* 0 = do nothing; 1 = trace address activity */\n-#define simPCOC0        (1 << 17) /* COC[1] from current */\n-#define simPCOC1        (1 << 18) /* COC[1] from previous */\n-#define simDELAYSLOT    (1 << 24) /* 0 = do nothing; 1 = delay slot entry exists */\n-#define simSKIPNEXT     (1 << 25) /* 0 = do nothing; 1 = skip instruction */\n-#define simSIGINT\t(1 << 28)  /* 0 = do nothing; 1 = SIGINT has occured */\n-#define simJALDELAYSLOT\t(1 << 29) /* 1 = in jal delay slot */\n+#define simHALTEX        (1 << 2)  /* 0 = run; 1 = halt on exception */\n+#define simHALTIN        (1 << 3)  /* 0 = run; 1 = halt on interrupt */\n+#define simTRACE         (1 << 8)  /* 1 = trace address activity */\n+#define simPCOC0         (1 << 17) /* COC[1] from current */\n+#define simPCOC1         (1 << 18) /* COC[1] from previous */\n+#define simDELAYSLOT     (1 << 24) /* 1 = delay slot entry exists */\n+#define simSKIPNEXT      (1 << 25) /* 0 = do nothing; 1 = skip instruction */\n+#define simSIGINT        (1 << 28)  /* 0 = do nothing; 1 = SIGINT has occured */\n+#define simJALDELAYSLOT  (1 << 29) /* 1 = in jal delay slot */\n+#define simFORBIDDENSLOT (1 << 30) /* 1 = n forbidden slot */\n \n #ifndef ENGINE_ISSUE_PREFIX_HOOK\n #define ENGINE_ISSUE_PREFIX_HOOK() \\\n@@ -532,6 +539,10 @@ struct mips_sim_state {\n /* Bits reserved for implementations:  */\n #define status_SBX       (1 << 16)      /* Enable SiByte SB-1 extensions.  */\n \n+/* From R6 onwards, some instructions (e.g. ADDIUPC) change behaviour based\n+ * on the Status.UX bits to either sign extend, or act as full 64 bit. */\n+#define status_optional_EXTEND32(x) ((SR & status_UX) ? x : EXTEND32(x))\n+\n #define cause_BD ((unsigned)1 << 31)    /* L1 Exception in branch delay slot */\n #define cause_BD2         (1 << 30)     /* L2 Exception in branch delay slot */\n #define cause_CE_mask     0x30000000\t/* Coprocessor exception */\n@@ -719,8 +730,55 @@ void test_fcsr (SIM_STATE);\n \n \n /* FPU operations.  */\n-void fp_cmp (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt, int abs, int cond, int cc);\n-#define Compare(op1,op2,fmt,cond,cc) fp_cmp(SIM_ARGS, op1, op2, fmt, 0, cond, cc)\n+/* Non-signalling */\n+#define FP_R6CMP_AF  0x0\n+#define FP_R6CMP_EQ  0x2\n+#define FP_R6CMP_LE  0x6\n+#define FP_R6CMP_LT  0x4\n+#define FP_R6CMP_NE  0x13\n+#define FP_R6CMP_OR  0x11\n+#define FP_R6CMP_UEQ 0x3\n+#define FP_R6CMP_ULE 0x7\n+#define FP_R6CMP_ULT 0x5\n+#define FP_R6CMP_UN  0x1\n+#define FP_R6CMP_UNE 0x12\n+\n+/* Signalling */\n+#define FP_R6CMP_SAF  0x8\n+#define FP_R6CMP_SEQ  0xa\n+#define FP_R6CMP_SLE  0xe\n+#define FP_R6CMP_SLT  0xc\n+#define FP_R6CMP_SNE  0x1b\n+#define FP_R6CMP_SOR  0x19\n+#define FP_R6CMP_SUEQ 0xb\n+#define FP_R6CMP_SULE 0xf\n+#define FP_R6CMP_SULT 0xd\n+#define FP_R6CMP_SUN  0x9\n+#define FP_R6CMP_SUNE 0x1a\n+\n+/* FPU Class */\n+#define FP_R6CLASS_SNAN    (1<<0)\n+#define FP_R6CLASS_QNAN    (1<<1)\n+#define FP_R6CLASS_NEGINF  (1<<2)\n+#define FP_R6CLASS_NEGNORM (1<<3)\n+#define FP_R6CLASS_NEGSUB  (1<<4)\n+#define FP_R6CLASS_NEGZERO (1<<5)\n+#define FP_R6CLASS_POSINF  (1<<6)\n+#define FP_R6CLASS_POSNORM (1<<7)\n+#define FP_R6CLASS_POSSUB  (1<<8)\n+#define FP_R6CLASS_POSZERO (1<<9)\n+\n+void fp_cmp (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt,\n+\t     int abs, int cond, int cc);\n+#define Compare(op1,op2,fmt,cond,cc)  \\\n+  fp_cmp(SIM_ARGS, op1, op2, fmt, 0, cond, cc)\n+uint64_t fp_r6_cmp (SIM_STATE, uint64_t op1, uint64_t op2,\n+\t\t      FP_formats fmt, int cond);\n+#define R6Compare(op1,op2,fmt,cond) fp_r6_cmp(SIM_ARGS, op1, op2, fmt, cond)\n+uint64_t fp_classify(SIM_STATE, uint64_t op, FP_formats fmt);\n+#define Classify(op, fmt) fp_classify(SIM_ARGS, op, fmt)\n+int fp_rint(SIM_STATE, uint64_t op, uint64_t *ans, FP_formats fmt);\n+#define RoundToIntegralExact(op, ans, fmt) fp_rint(SIM_ARGS, op, ans, fmt)\n uint64_t fp_abs (SIM_STATE, uint64_t op, FP_formats fmt);\n #define AbsoluteValue(op,fmt) fp_abs(SIM_ARGS, op, fmt)\n uint64_t fp_neg (SIM_STATE, uint64_t op, FP_formats fmt);\n@@ -733,6 +791,14 @@ uint64_t fp_mul (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt);\n #define Multiply(op1,op2,fmt) fp_mul(SIM_ARGS, op1, op2, fmt)\n uint64_t fp_div (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt);\n #define Divide(op1,op2,fmt) fp_div(SIM_ARGS, op1, op2, fmt)\n+uint64_t fp_min (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt);\n+#define Min(op1,op2,fmt) fp_min(SIM_ARGS, op1, op2, fmt)\n+uint64_t fp_max (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt);\n+#define Max(op1,op2,fmt) fp_max(SIM_ARGS, op1, op2, fmt)\n+uint64_t fp_mina (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt);\n+#define MinA(op1,op2,fmt) fp_mina(SIM_ARGS, op1, op2, fmt)\n+uint64_t fp_maxa (SIM_STATE, uint64_t op1, uint64_t op2, FP_formats fmt);\n+#define MaxA(op1,op2,fmt) fp_maxa(SIM_ARGS, op1, op2, fmt)\n uint64_t fp_recip (SIM_STATE, uint64_t op, FP_formats fmt);\n #define Recip(op,fmt) fp_recip(SIM_ARGS, op, fmt)\n uint64_t fp_sqrt (SIM_STATE, uint64_t op, FP_formats fmt);\n@@ -741,6 +807,12 @@ uint64_t fp_rsqrt (SIM_STATE, uint64_t op, FP_formats fmt);\n #define RSquareRoot(op,fmt) fp_rsqrt(SIM_ARGS, op, fmt)\n uint64_t fp_madd (SIM_STATE, uint64_t op1, uint64_t op2,\n \t\t    uint64_t op3, FP_formats fmt);\n+#define FusedMultiplyAdd(op1,op2,op3,fmt) fp_fmadd(SIM_ARGS, op1, op2, op3, fmt)\n+uint64_t fp_fmadd (SIM_STATE, uint64_t op1, uint64_t op2,\n+\t\t     uint64_t op3, FP_formats fmt);\n+#define FusedMultiplySub(op1,op2,op3,fmt) fp_fmsub(SIM_ARGS, op1, op2, op3, fmt)\n+uint64_t fp_fmsub (SIM_STATE, uint64_t op1, uint64_t op2,\n+\t\t     uint64_t op3, FP_formats fmt);\n #define MultiplyAdd(op1,op2,op3,fmt) fp_madd(SIM_ARGS, op1, op2, op3, fmt)\n uint64_t fp_msub (SIM_STATE, uint64_t op1, uint64_t op2,\n \t\t    uint64_t op3, FP_formats fmt);"
    },
    {
      "sha": "db297121e933237bbfbe553ad1a9741e3ae33604",
      "filename": "sim/testsuite/mips/basic.exp",
      "status": "modified",
      "additions": 68,
      "deletions": 4,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/basic.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/basic.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/basic.exp?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -35,13 +35,61 @@ proc run_micromips_test { name requested_machs } {\n     unset ASFLAGS_FOR_TARGET\n }\n \n+# Runs endian tests\n+proc run_endian_tests { name requested_machs } {\n+    global ASFLAGS_FOR_TARGET\n+    global LDFLAGS_FOR_TARGET\n+    run_sim_test $name $requested_machs\n+    set ASFLAGS_FOR_TARGET \"-EL\"\n+    set LDFLAGS_FOR_TARGET \"-EL\"\n+    run_sim_test $name $requested_machs\n+    unset ASFLAGS_FOR_TARGET\n+    unset LDFLAGS_FOR_TARGET\n+}\n+\n # Runs all specified tests\n proc run_sim_tests { name requested_machs { requested_micromips_machs \"\" } } {\n     run_sim_test $name $requested_machs\n     run_micromips_test $name $requested_micromips_machs\n }\n \n+\n+# Runs the combination of instructions removed in R6 through the testsuite\n+proc run_r6_removed_test {testfile models} {\n+    global subdir srcdir\n+    set fd [open \"$srcdir/$subdir/r6-removed.csv\" r]\n+    set file_data [read $fd]\n+    close $fd\n+    set data [split $file_data \"\\n\"]\n+    foreach line $data {\n+        set line_contents [split $line \",\"]\n+        set mnemonic [lindex $line_contents 0]\n+        set insn [lindex $line_contents 1]\n+\n+        if {[string compare $insn \"\"] == 1} {\n+\n+            set contents \"\"\n+            append contents \".macro removed_instr\\n\"\n+            append contents \".word $insn\\n\"\n+            append contents \"nop\\n\"\n+            append contents \".endm\"\n+\n+            verbose -log \"r6-removed test: $mnemonic\\n$contents\"\n+            set file [open r6-removed.inc w]\n+            puts $file $contents\n+            close $file\n+\n+            run_sim_test $testfile $models\n+        }\n+    }\n+}\n+\n+\n if {[istarget *]} {\n+    # Used to locate the `run` program.\n+    global arch\n+    set arch \"mips\"\n+\n     set dspmodels \"\"\n     set mdmxmodels \"\"\n     set micromipsmodels \"\"\n@@ -51,18 +99,24 @@ if {[istarget *]} {\n \tset models \"sb1\"\n \tset submodels \"mips1 mips2 mips3 mips4 mips32 mips64\"\n \tappend mdmxmodels \" mips64\"\n+    } elseif {[istarget mipsisa64r6*-*-elf]} {\n+        set models \"mips32r6 mips64r6\"\n+        set submodels \"\"\n     } elseif {[istarget mipsisa64*-*-elf]} {\n \tset models \"mips32 mips64 mips32r2 mips64r2\"\n \tset submodels \"mips1 mips2 mips3 mips4\"\n \tappend dspmodels \" mips32r2 mips64r2\"\n \tappend mdmxmodels \" mips64 mips32r2 mips64r2\"\n     } elseif {[istarget mips*-sde-elf*] || [istarget mips*-mti-elf*]} {\n-\tset models \"mips32 mips64 mips32r2 mips64r2\"\n+\tset models \"mips32 mips64 mips32r2 mips64r2 mips32r6 mips64r6\"\n \tset submodels \"\"\n-\tappend dspmodels \" mips32r2 mips64r2\"\n-\tappend mdmxmodels \" mips64 mips32r2 mips64r2\"\n-\tappend micromipsmodels \" mips32r2\"\n+\tappend dspmodels \" mips32r2 mips64r2 mips32r6 mips64r6\"\n+\tappend mdmxmodels \" mips64 mips32r2 mips64r2 mips32r6 mips64r6\"\n+\tappend micromipsmodels \" mips32r2 mips64r2\"\n \tappend micromipsdspmodels \" mips32r2 mips64r2\"\n+    } elseif {[istarget mipsisa32r6*-*-elf]} {\n+        set models \"mips32r6\"\n+        set submodels \"\"\n     } elseif {[istarget mipsisa32*-*-elf]} {\n \tset models \"mips32 mips32r2\"\n \tset submodels \"mips1 mips2\"\n@@ -102,4 +156,14 @@ if {[istarget *]} {\n     run_sim_tests mips32-dsp.s $dspmodels $micromipsdspmodels\n     run_sim_tests mips32-dsp2.s $dspmodels $micromipsdspmodels\n \n+    run_sim_test r2-fpu.s $models\n+\n+    run_sim_test r6-fpu.s $models\n+    run_sim_test r6.s $models\n+    run_sim_test r6-forbidden.s $models\n+    run_r6_removed_test r6-removed.s $models\n+    run_sim_test r6-64.s $models\n+    run_sim_test r6-branch.s $models\n+    run_endian_tests r6-llsc-wp.s $models\n+    run_endian_tests r6-llsc-dp.s $models\n }"
    },
    {
      "sha": "9d50da2a07dd65781addf9e12f56e37823a30c42",
      "filename": "sim/testsuite/mips/hilo-hazard-3.s",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/hilo-hazard-3.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/hilo-hazard-3.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/hilo-hazard-3.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -1,6 +1,6 @@\n # Test for mf{hi,lo} -> mult/div/mt{hi,lo} with 2 nops inbetween.\n #\n-# mach:\t\tall\n+# mach:\t\t-mips32r6 -mips64r6 all\n # as:\t\t-mabi=eabi\n # ld:\t\t-N -Ttext=0x80010000\n # output:\tpass\\\\n"
    },
    {
      "sha": "1001f933c97398cfaea5b7ebf942dee7d9e664e5",
      "filename": "sim/testsuite/mips/r2-fpu.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r2-fpu.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r2-fpu.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r2-fpu.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,31 @@\n+# mips r2 fpu tests\n+# mach:   mips32r2 mips64r2\n+# as:     -mabi=eabi\n+# ld:     -N -Ttext=0x80010000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+\n+  setup\n+\n+  .set noreorder\n+\n+  .ent DIAG\n+\n+DIAG:\n+  writemsg \"[1] Test qNaN format is 754-1985\"\n+  li $6, 0x7fbfffff\n+  mtc1 $0, $f2\n+  mtc1 $0, $f4\n+  div.s $f6, $f2, $f4\n+  mfc1 $8, $f6\n+  beq $8, $6, L1\n+  nop\n+  fail\n+\n+  L1:\n+  #TODO: More tests?\n+\n+  pass\n+\n+  .end DIAG"
    },
    {
      "sha": "365f49f2f00a11d899c0d92a01d553e2dcefd6ad",
      "filename": "sim/testsuite/mips/r6-64.s",
      "status": "added",
      "additions": 157,
      "deletions": 0,
      "changes": 157,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-64.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,157 @@\n+# mips64 specific r6 tests (non FPU)\n+# mach:  mips64r6\n+# as:    -mabi=eabi\n+# ld:    -N -Ttext=0x80010000 -Tdata=0x80020000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+  .include \"utils-r6.inc\"\n+\n+  .data\n+d0:   .dword 0\n+dval: .dword 0xaa55bb66cc77dd88\n+d1:   .dword 0xaaaabbbbccccdddd\n+d2:   .dword 256\n+dlo:  .dword 0xaabbbbccccdddd00\n+dhi:  .dword 0xffffffffffffffaa\n+dhiu: .dword 0x00000000000000aa\n+d3:   .dword 0xffaaaabbbbccccde\n+d4:   .dword 0xffffffffffffffdd\n+d5:   .dword 0x00000000000000dd\n+d6:   .dword 0x00aaaabbbbccccdd\n+d7:   .dword 0xeeeeffff00001111\n+d8:   .dword 0xbbccccddddeeeeff\n+d9:   .dword 0x000000ddaaaabbbb\n+d10:  .dword 0x5555dddd3333bbbb\n+d11:  .dword 0x9999999999999999\n+d12:  .dword 56\n+d13:  .dword 8\n+d14:  .dword 57\n+d15:  .dword 0x000000ddaaaac98b\n+d16:  .dword 0xffffffffdead00dd\n+d17:  .dword 0xffffffffc0de0000\n+d18:  .dword 0x0000123400000000\n+d19:  .dword 0xffffabcddead00dd\n+d20:  .dword 0xc0de000000000000\n+d21:  .dword 0x8000abcddead00dd\n+dmask:.dword 0xffffffffffff0000\n+dval1: .word 0x1234abcd\n+dval2: .word 0xffee0000\n+dval3:\t.dword 0xffffffffffffffff\n+  .fill 240,1,0\n+dval4:\t.dword 0x5555555555555555\n+  .fill  264,1,0\n+dval5:\t.dword 0xaaaaaaaaaaaaaaaa\n+\n+  .text\n+\n+  setup\n+\n+  .set noreorder\n+\n+  .ent DIAG\n+DIAG:\n+\n+  writemsg \"[1] Test DMUL\"\n+  r6ck_2r dmul, 6, 5, 30\n+  r6ck_2r dmul, -7, 9, -63\n+  r6ck_2r dmul, -1, 1, -1\n+  r6ck_2dr dmul, d1, d2, dlo\n+\n+  writemsg \"[2] Test DMUH\"\n+  r6ck_2r dmuh, 6, 5, 0\n+  r6ck_2r dmuh, -7, 9, 0xffffffffffffffff\n+  r6ck_2r dmuh, -1, 1, -1\n+  r6ck_2dr dmuh, d1, d2, dhi\n+\n+  writemsg \"[3] Test DMULU\"\n+  r6ck_2r dmulu, 12, 10, 120\n+  r6ck_2r dmulu, -1, 1, -1\n+  r6ck_2dr dmulu, d1, d2, dlo\n+\n+  writemsg \"[4] Test DMUHU\"\n+  r6ck_2r dmuhu, 12, 10, 0\n+  r6ck_2r dmuhu, -1, 1, 0\n+  r6ck_2dr dmuhu, d1, d2, dhiu\n+\n+  writemsg \"[5] Test DDIV\"\n+  r6ck_2r ddiv, 10001, 10, 1000\n+  r6ck_2r ddiv, -123456, 560, -220\n+  r6ck_2dr ddiv, d1, d2, d3\n+\n+  writemsg \"[6] Test DMOD\"\n+  r6ck_2r dmod, 10001, 10, 1\n+  r6ck_2r dmod, -123456, 560, 0xffffffffffffff00\n+  r6ck_2dr dmod, d1, d2, d4\n+\n+  writemsg \"[7] Test DDIVU\"\n+  r6ck_2r ddivu, 9, 100, 0\n+  r6ck_2dr ddivu, d1, d2, d6\n+\n+  writemsg \"[8] Test DMODU\"\n+  r6ck_2r dmodu, 9, 100, 9\n+  r6ck_2dr dmodu, d1, d2, d5\n+\n+  writemsg \"[9] Test DALIGN\"\n+  r6ck_2dr1i dalign, d7, d1, 3, d8\n+  r6ck_2dr1i dalign, d1, d5, 4, d9\n+\n+  writemsg \"[10] Test DBITSWAP\"\n+  r6ck_1dr dbitswap, d1, d10\n+  r6ck_1dr dbitswap, d11, d11\n+\n+  writemsg \"[11] Test DCLZ\"\n+  r6ck_1dr dclz, d5, d12\n+  r6ck_1dr dclz, d6, d13\n+\n+  writemsg \"[12] Test DCLO\"\n+  r6ck_1dr dclo, d5, d0\n+  r6ck_1dr dclo, dhi, d14\n+\n+  writemsg \"[13] Test DLSA\"\n+  r6ck_2r1i dlsa, 0x82, 0x2000068, 4, 0x2000888\n+  r6ck_2dr1i dlsa, d5, d9, 4, d15\n+\n+  writemsg \"[14] Test DAUI\"\n+  r6ck_1dr1i daui, d5, 0xdead, d16\n+  r6ck_1dr1i daui, d0, 0xc0de, d17\n+\n+  writemsg \"[15] Test DAHI\"\n+  r6ck_0dr1i dahi, d0, 0x1234, d18\n+  r6ck_0dr1i dahi, d16, 0xabce, d19\n+\n+  writemsg \"[16] Test DATI\"\n+  r6ck_0dr1i dati, d0, 0xc0de, d20\n+  r6ck_0dr1i dati, d19, 0x8001, d21\n+\n+  writemsg \"[17] Test LDPC\"\n+  ld $5, dval\n+  nop\n+  ldpc $4, dval\n+  fp_assert $4, $5\n+\n+  writemsg \"[18] Test LWUPC\"\n+  lwu $5, dval1\n+  lwupc $4, dval1\n+  fp_assert $4, $5\n+  lwu $5, dval2\n+  lwupc $4, dval2\n+  fp_assert $4, $5\n+\n+  writemsg \"[19] Test LLD\"\n+  ld $5, dval3\n+  dla $3, dval4\n+  lld $4, -248($3)\n+  fp_assert $4, $5\n+\n+  writemsg \"[20] Test SCD\"\n+  lld $4, -248($3)\n+  dli $4, 0xafaf\n+  scd $4, -248($3)\n+  ld $5, dval3\n+  dli $4, 0xafaf\n+  fp_assert $4, $5\n+\n+  pass\n+\n+  .end DIAG"
    },
    {
      "sha": "2d905ba97e6ed8ce4819b90aa0949b603641add9",
      "filename": "sim/testsuite/mips/r6-branch.s",
      "status": "added",
      "additions": 291,
      "deletions": 0,
      "changes": 291,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-branch.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-branch.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-branch.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,291 @@\n+# mips r6 branch tests (non FPU)\n+# mach: mips32r6 mips64r6\n+# as:   -mabi=eabi\n+# ld:   -N -Ttext=0x80010000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+  .include \"utils-r6.inc\"\n+\n+  setup\n+\n+  .set noreorder\n+\n+  .ent DIAG\n+DIAG:\n+  li $14, 0xffffffff\n+  li $13, 0x123\n+  li $12, 0x45\n+  li $7, 0x45\n+  li $8, 0xfffffffe\n+  li $9, 2147483647\n+  li $11, 0\n+\n+  writemsg \"[1] Test BOVC\"\n+  bovc $12, $13, Lfail\n+  nop\n+  bovc $9, $13, L2\n+  nop\n+  fail\n+\n+L2:\n+  writemsg \"[2] Test BNVC\"\n+  bnvc $9, $13, Lfail\n+  nop\n+  bnvc $12, $13, L3\n+  nop\n+  fail\n+\n+L3:\n+  writemsg \"[3] Test BEQC\"\n+  beqc $12, $13, Lfail\n+  nop\n+  beqc $12, $7, L4\n+  nop\n+  fail\n+\n+L4:\n+  writemsg \"[4] Test BNEC\"\n+  bnec $12, $7, Lfail\n+  nop\n+  bnec $12, $13, L5\n+  nop\n+  fail\n+\n+L5:\n+  writemsg \"[5] Test BLTC\"\n+  bltc $13, $12, Lfail\n+  nop\n+  bltc $12, $13, L6\n+  nop\n+  fail\n+\n+L6:\n+#  writemsg \"[6] Test BLEC\"\n+#  blec $13, $12, Lfail\n+#  nop\n+#  blec $7, $12, L7\n+#  nop\n+#  fail\n+\n+L7:\n+  writemsg \"[7] Test BGEC\"\n+  bgec $12, $13, Lfail\n+  nop\n+  bgec $13, $12, L8\n+  nop\n+  fail\n+\n+L8:\n+#  writemsg \"[8] Test BGTC\"\n+#  bgtc $12, $13, Lfail\n+#  nop\n+#  bgtc $13, $12, L9\n+#  nop\n+#  fail\n+\n+\n+L9:\n+  writemsg \"[9] Test BLTUC\"\n+  bltuc $14, $13, Lfail\n+  nop\n+  bltuc $8, $14, L10\n+  nop\n+  fail\n+\n+L10:\n+#  writemsg \"[10] Test BLEUC\"\n+#  bleuc $14, $13, Lfail\n+#  nop\n+#  bleuc $8, $14, L11\n+#  nop\n+#  fail\n+\n+L11:\n+  writemsg \"[11] Test BGEUC\"\n+  bgeuc $13, $14, Lfail\n+  nop\n+  bgeuc $14, $8, L12\n+  nop\n+  fail\n+\n+L12:\n+#  writemsg \"[12] Test BGTUC\"\n+#  bgtuc $13, $14, Lfail\n+#  nop\n+#  bgtuc $14, $8, L13\n+#  nop\n+#  fail\n+\n+L13:\n+  writemsg \"[13] Test BLTZC\"\n+  bltzc $13, Lfail\n+  nop\n+  bltzc $11, Lfail\n+  nop\n+  bltzc $14, L14\n+  nop\n+  fail\n+\n+L14:\n+  writemsg \"[14] Test BLEZC\"\n+  blezc $13, Lfail\n+  nop\n+  blezc $11, L145\n+  nop\n+  fail\n+L145:\n+  blezc $14, L15\n+  nop\n+  fail\n+\n+L15:\n+  writemsg \"[15] Test BGEZC\"\n+  bgezc $8, Lfail\n+  nop\n+  bgezc $11, L155\n+  nop\n+  fail\n+L155:\n+  bgezc $13, L16\n+  nop\n+  fail\n+\n+L16:\n+  writemsg \"[16] Test BGTZC\"\n+  bgtzc $8, Lfail\n+  nop\n+  bgtzc $11, Lfail\n+  nop\n+  bgtzc $13, L17\n+  nop\n+  fail\n+\n+  li $10, 0\n+\n+L17:\n+  writemsg \"[17] Test BLEZALC\"\n+  blezalc $12, Lfail\n+  nop\n+  blezalc $11, Lret\n+  li $10, 1\n+  beqzc $10, L175\n+  nop\n+  fail\n+L175:\n+  blezalc $14, Lret\n+  li $10, 1\n+  beqzc $10, L18\n+  nop\n+  fail\n+\n+L18:\n+  writemsg \"[18] Test BGEZALC\"\n+  bgezalc $14, Lfail\n+  nop\n+  bgezalc $11, Lret\n+  li $10, 1\n+  beqzc $10, L185\n+  nop\n+  fail\n+L185:\n+  bgezalc $12, Lret\n+  li $10, 1\n+  beqzc $10, L19\n+  nop\n+  fail\n+\n+L19:\n+  writemsg \"[19] Test BGTZALC\"\n+  bgtzalc $14, Lfail\n+  nop\n+  bgtzalc $11, Lfail\n+  nop\n+  bgtzalc $12, Lret\n+  li $10, 1\n+  beqzc $10, L20\n+  nop\n+  fail\n+\n+L20:\n+  writemsg \"[20] Test BLTZALC\"\n+  bltzalc $12, Lfail\n+  nop\n+  bltzalc $11, Lfail\n+  nop\n+  bltzalc $14, Lret\n+  li $10, 1\n+  beqzc $10, L21\n+  nop\n+  fail\n+\n+L21:\n+  writemsg \"[21] Test BC\"\n+  bc L22\n+  fail\n+\n+L22:\n+  writemsg \"[22] Test BALC\"\n+  balc Lret\n+  li $10, 1\n+  beqzc $10, L23\n+  nop\n+  fail\n+\n+L23:\n+  writemsg \"[23] Test JIC\"\n+  jal GetPC\n+  nop\n+  jic $6, 4\n+  nop\n+  fail\n+\n+L24:\n+  writemsg \"[24] Test JIALC\"\n+  li $10, 1\n+  jal GetPC\n+  nop\n+  jialc $6, 20\n+  nop\n+  beqzc $10, L25\n+  nop\n+  fail\n+\n+LJIALCRET:\n+  li $10, 0\n+  jr $ra\n+  nop\n+\n+L25:\n+  writemsg \"[25] Test NAL\"\n+  jal GetPC\n+  nop\n+  move $11, $6\n+  nal\n+  nop\n+  addiu $11, 12\n+  beqc $11, $31, L26\n+  nop\n+  fail\n+\n+L26:\n+  writemsg \"[26] Test BAL\"\n+  balc Lret\n+  li $10, 1\n+  beqzc $10, Lend\n+  nop\n+  fail\n+\n+Lend:\n+  pass\n+\n+Lfail:\n+  fail\n+\n+  .end DIAG\n+\n+Lret:\n+  li $10, 0\n+  addiu $ra, 4\n+  jr $ra\n+  nop"
    },
    {
      "sha": "6ce56d392d9ceb1483b2ba0f4608889e36d2416c",
      "filename": "sim/testsuite/mips/r6-forbidden.s",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-forbidden.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-forbidden.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-forbidden.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,51 @@\n+# mips r6 test for forbidden slot behaviour\n+# mach: mips32r6 mips64r6\n+# as:   -mabi=eabi\n+# ld:   -N -Ttext=0x80010000\n+# output: *\\\\nReservedInstruction at PC = *\\\\nprogram stopped with signal 4 (Illegal instruction).\\\\n\n+# xerror:\n+\n+  .include \"testutils.inc\"\n+\n+  setup\n+\n+  .set noreorder\n+\n+  .ent DIAG\n+DIAG:\n+\n+  writemsg \"[1] Test if FS is ignored when branch is taken\"\n+  li $4, 0\n+  beqzalc $4, L1\n+  bc L2\n+\n+L2:\n+  fail\n+\n+L1:\n+  writemsg \"[2] Test if FS is used when branch is not taken\"\n+  li $4, 1\n+  blezc $4, L3\n+  addiu $4, $4, 1\n+  li $2, 2\n+  beq $4, $2, L4\n+\n+L3:\n+  nop\n+  fail\n+\n+L4:\n+  writemsg \"[3] Test if FS causes an error when it contains a branch\"\n+  li $4, 3\n+  beqzalc $4, L6\n+  bc L5\n+\n+L5:\n+  nop\n+  fail\n+\n+L6:\n+  #There is no passing condition here, all routes to the end indicate failure\n+  fail\n+\n+  .end DIAG"
    },
    {
      "sha": "14a2ea58f83c17d0455c084bc4ae6d15831b66cd",
      "filename": "sim/testsuite/mips/r6-fpu.s",
      "status": "added",
      "additions": 446,
      "deletions": 0,
      "changes": 446,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-fpu.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-fpu.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-fpu.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,446 @@\n+# mips r6 fpu test for FMADD/FMSUB etc.\n+# mach:  mips64r6\n+# as:    -mabi=eabi\n+# ld:    -N -Ttext=0x80010000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+  .include \"utils-r6.inc\"\n+\n+  setup\n+\n+  .set noreorder\n+\n+  .ent DIAG\n+DIAG:\n+\n+  writemsg \"[1] Test qNaN format is 754-2008\"\n+  li $4, 0x0\n+  li $5, 0x0\n+  li $6, 0x7fc00000\n+  mtc1 $4, $f2\n+  mtc1 $5, $f4\n+  div.s $f6, $f2, $f4\n+  mfc1 $8, $f6\n+  fp_assert $6, $8\n+\n+  writemsg \"[2] Test maddf.s\"\n+  r6ck_3s maddf.s, 0x0, 0x0, 0x0, 0x0\n+  r6ck_3s maddf.s, 0x3f800000, 0x3f800000, 0x3f800000, 0x40000000\n+  r6ck_3s maddf.s, 0xc0b1f5c3, 0x40490fd0, 0x402df854, 0x403e9f5d\n+\n+  writemsg \"[3] Test maddf.d\"\n+  r6ck_3d maddf.d, 0x0, 0x0, 0x0, 0x0\n+  r6ck_3d maddf.d, 0x3ff0000000000000, 0x3ff0000000000000, 0x3ff0000000000000, 0x4000000000000000\n+  r6ck_3d maddf.d, 0xc0163eb851eb851f, 0x400921f9f01b866e, 0x4005bf0a8b24919b,  0x4007d3ebc14f6cee\n+\n+  writemsg \"[4] Test msubf.s\"\n+  r6ck_3s msubf.s, 0x0, 0x0, 0x0, 0x0\n+  r6ck_3s msubf.s, 0x3f800000, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s msubf.s, 0xc0b1f5c3, 0x40490fd0, 0x402df854, 0xc1619d9a\n+\n+  writemsg \"[5] Test msubf.d\"\n+  r6ck_3d msubf.d, 0x0, 0x0, 0x0, 0x0\n+  r6ck_3d msubf.d, 0x3ff0000000000000, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d msubf.d, 0xc0163eb851eb851f, 0x400921f9f01b866e, 0x4005bf0a8b24919b,  0xc02c33b3423f605b\n+\n+  writemsg \"[6] Test CMP.af.s\"\n+  r6ck_3s cmp.af.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.af.s, 0x0, 0x00000000, 0x3f800000, 0x0\n+\n+  writemsg \"[7] Test CMP.af.d\"\n+  r6ck_3d cmp.af.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.af.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0x0\n+\n+  writemsg \"[8] Test CMP.eq.s\"\n+  r6ck_3s cmp.eq.s, 0x0, 0x3f800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.eq.s, 0x0, 0x00000000, 0x3f800000, 0x0\n+  r6ck_3s cmp.eq.s, 0x0, 0x80000000, 0x00000000, 0xffffffff\n+  r6ck_3s cmp.eq.s, 0x0, 0x7fc00000, 0x7fc00000, 0x0\n+  r6ck_3s cmp.eq.s, 0x0, 0x7fc00000, 0xffc00000, 0x0\n+  r6ck_3s cmp.eq.s, 0x0, 0x7fa00000, 0x7fa00000, 0x0\n+  r6ck_3s cmp.eq.s, 0x0, 0x7fa00000, 0x7fc00000, 0x0\n+  r6ck_3s cmp.eq.s, 0x0, 0x7f800000, 0x7f800000, 0xffffffff\n+  r6ck_3s cmp.eq.s, 0x0, 0xff800000, 0xff800000, 0xffffffff\n+\n+  writemsg \"[9] Test CMP.eq.d\"\n+  r6ck_3d cmp.eq.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.eq.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.eq.d, 0x0, 0x8000000000000000, 0x0000000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.eq.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0x0\n+  r6ck_3d cmp.eq.d, 0x0, 0x7ff8000000000000, 0xffc0000000000000, 0x0\n+  r6ck_3d cmp.eq.d, 0x0, 0x7fa0000000000000, 0x7fa0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.eq.d, 0x0, 0x7fa0000000000000, 0x7ff8000000000000, 0x0\n+  r6ck_3d cmp.eq.d, 0x0, 0x7ff0000000000000, 0x7ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.eq.d, 0x0, 0xfff0000000000000, 0xfff0000000000000, 0xffffffffffffffff\n+\n+  writemsg \"[10] Test CMP.ne.s\"\n+  r6ck_3s cmp.ne.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0x00000000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ne.s, 0x0, 0x80000000, 0x00000000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0x7fc00000, 0x7fc00000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0x7fc00000, 0xffc00000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0x7fa00000, 0x7fa00000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0x7fa00000, 0x7fc00000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0x7f800000, 0x7f800000, 0x0\n+  r6ck_3s cmp.ne.s, 0x0, 0xff800000, 0xff800000, 0x0\n+\n+  writemsg \"[11] Test CMP.ne.d\"\n+  r6ck_3d cmp.ne.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ne.d, 0x0, 0x8000000000000000, 0x0000000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0x7ff8000000000000, 0xffc0000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0x7fa0000000000000, 0x7fa0000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0x7fa0000000000000, 0x7ff8000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0x7ff0000000000000, 0x7ff0000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0xfff0000000000000, 0xfff0000000000000, 0x0\n+  r6ck_3d cmp.ne.d, 0x0, 0xab19546120965720, 0x92452014f194abc3, 0xffffffffffffffff\n+\n+  writemsg \"[12] Test CMP.lt.s\"\n+  r6ck_3s cmp.lt.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.lt.s, 0x0, 0x00000000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.lt.s, 0x0, 0xbf800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.lt.s, 0x0, 0x3f800000, 0xbf800000, 0x0\n+  r6ck_3s cmp.lt.s, 0x0, 0xff800000, 0xbf800000, 0xffffffff\n+  r6ck_3s cmp.lt.s, 0x0, 0xbf800000, 0x7f800000, 0xffffffff\n+  r6ck_3s cmp.lt.s, 0x0, 0xbf800000, 0xff800000, 0x0\n+  r6ck_3s cmp.lt.s, 0x0, 0x7f800000, 0xbf800000, 0x0\n+\n+  writemsg \"[13] Test CMP.lt.d\"\n+  r6ck_3d cmp.lt.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.lt.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.lt.d, 0x0, 0xbff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.lt.d, 0x0, 0x3ff0000000000000, 0xbff0000000000000, 0x0\n+  r6ck_3d cmp.lt.d, 0x0, 0xfff0000000000000, 0xbff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.lt.d, 0x0, 0xbff0000000000000, 0x7ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.lt.d, 0x0, 0xbff0000000000000, 0xfff0000000000000, 0x0\n+  r6ck_3d cmp.lt.d, 0x0, 0x7ff0000000000000, 0xbff0000000000000, 0x0\n+\n+  writemsg \"[14] Test CMP.le.s\"\n+  r6ck_3s cmp.le.s, 0x0, 0x3f800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.le.s, 0x0, 0x00000000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.le.s, 0x0, 0xbf800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.le.s, 0x0, 0x3f800000, 0xbf800000, 0x0\n+  r6ck_3s cmp.le.s, 0x0, 0xff800000, 0xbf800000, 0xffffffff\n+  r6ck_3s cmp.le.s, 0x0, 0xbf800000, 0x7f800000, 0xffffffff\n+  r6ck_3s cmp.le.s, 0x0, 0xbf800000, 0xff800000, 0x0\n+  r6ck_3s cmp.le.s, 0x0, 0x7f800000, 0xbf800000, 0x0\n+\n+  writemsg \"[15] Test CMP.le.d\"\n+  r6ck_3d cmp.le.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.le.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.le.d, 0x0, 0xbff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.le.d, 0x0, 0x3ff0000000000000, 0xbff0000000000000, 0x0\n+  r6ck_3d cmp.le.d, 0x0, 0xfff0000000000000, 0xbff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.le.d, 0x0, 0xbff0000000000000, 0x7ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.le.d, 0x0, 0xbff0000000000000, 0xfff0000000000000, 0x0\n+  r6ck_3d cmp.le.d, 0x0, 0x7ff0000000000000, 0xbff0000000000000, 0x0\n+\n+  writemsg \"[16] Test CMP.un.s\"\n+  r6ck_3s cmp.un.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.un.s, 0x0, 0x3f800000, 0xbf800000, 0x0\n+  r6ck_3s cmp.un.s, 0x0, 0x3f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.un.s, 0x0, 0x7fc01234, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.un.s, 0x0, 0x7fc00000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.un.s, 0x0, 0x3f800000, 0xff800000, 0x0\n+  r6ck_3s cmp.un.s, 0x0, 0x3f800000, 0x7f800000, 0x0\n+\n+  writemsg \"[17] Test CMP.un.d\"\n+  r6ck_3d cmp.un.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.un.d, 0x0, 0x3ff0000000000000, 0xbff0000000000000, 0x0\n+  r6ck_3d cmp.un.d, 0x0, 0x3ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.un.d, 0x0, 0x7fc0123400000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.un.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.un.d, 0x0, 0x3ff0000000000000, 0xfff0000000000000, 0x0\n+  r6ck_3d cmp.un.d, 0x0, 0x3ff0000000000000, 0x7ff0000000000000, 0x0\n+\n+  writemsg \"[18] Test CMP.or.s\"\n+  r6ck_3s cmp.or.s, 0x0, 0x3f800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.or.s, 0x0, 0xbf800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.or.s, 0x0, 0x3f800000, 0x7fc00000, 0x0\n+  r6ck_3s cmp.or.s, 0x0, 0x7fc00000, 0x3f800000, 0x0\n+  r6ck_3s cmp.or.s, 0x0, 0xffc00000, 0x3f800000, 0x0\n+  r6ck_3s cmp.or.s, 0x0, 0x7fc01234, 0x7fc00000, 0x0\n+  r6ck_3s cmp.or.s, 0x0, 0xff800000, 0x00000000, 0xffffffff\n+  r6ck_3s cmp.or.s, 0x0, 0x00000000, 0x7f800000, 0xffffffff\n+  r6ck_3s cmp.or.s, 0x0, 0x00000000, 0xff800000, 0xffffffff\n+  r6ck_3s cmp.or.s, 0x0, 0x7f800000, 0x00000000, 0xffffffff\n+  r6ck_3s cmp.or.s, 0x0, 0x7f800000, 0x00000000, 0xffffffff\n+\n+  writemsg \"[19] Test CMP.or.d\"\n+  r6ck_3d cmp.or.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.or.d, 0x0, 0xbff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.or.d, 0x0, 0x3ff0000000000000, 0x7ff8000000000000, 0x0\n+  r6ck_3d cmp.or.d, 0x0, 0x7ff8000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.or.d, 0x0, 0xfff8000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.or.d, 0x0, 0x7ff8123492134352, 0x7ff8000000000000, 0x0\n+  r6ck_3d cmp.or.d, 0x0, 0xfff0000000000000, 0x0000000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.or.d, 0x0, 0x0000000000000000, 0x7ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.or.d, 0x0, 0x0000000000000000, 0xfff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.or.d, 0x0, 0x7ff0000000000000, 0x0000000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.or.d, 0x0, 0x7ff0000000000000, 0x0000000000000000, 0xffffffffffffffff\n+\n+  writemsg \"[20] Test CMP.ueq.s\"\n+  r6ck_3s cmp.ueq.s, 0x0, 0x3f800000, 0x00000000, 0x0\n+  r6ck_3s cmp.ueq.s, 0x0, 0x3f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ueq.s, 0x0, 0x7fc00000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ueq.s, 0x0, 0x3f800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ueq.s, 0x0, 0x00000000, 0x3f800000, 0x0\n+  r6ck_3s cmp.ueq.s, 0x0, 0x80000000, 0x00000000, 0xffffffff\n+  r6ck_3s cmp.ueq.s, 0x0, 0x7f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ueq.s, 0x0, 0xff800000, 0xff800000, 0xffffffff\n+\n+  writemsg \"[21] Test CMP.ueq.d\"\n+  r6ck_3d cmp.ueq.d, 0x0, 0x3ff0000000000000, 0x0000000000000000, 0x0\n+  r6ck_3d cmp.ueq.d, 0x0, 0x3ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ueq.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ueq.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ueq.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.ueq.d, 0x0, 0x8000000000000000, 0x0000000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ueq.d, 0x0, 0x7ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ueq.d, 0x0, 0xfff0000000000000, 0xfff0000000000000, 0xffffffffffffffff\n+\n+  writemsg \"[22] Test CMP.une.s\"\n+  r6ck_3s cmp.une.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.une.s, 0x0, 0x3f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.une.s, 0x0, 0x7fc00000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.une.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.une.s, 0x0, 0x00000000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.une.s, 0x0, 0x80000000, 0x00000000, 0x0\n+  r6ck_3s cmp.une.s, 0x0, 0x7f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.une.s, 0x0, 0xff800000, 0xff800000, 0x0\n+\n+  writemsg \"[23] Test CMP.une.d\"\n+  r6ck_3d cmp.une.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.une.d, 0x0, 0x3ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.une.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.une.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.une.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.une.d, 0x0, 0x8000000000000000, 0x0000000000000000, 0x0\n+  r6ck_3d cmp.une.d, 0x0, 0x7ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.une.d, 0x0, 0xfff0000000000000, 0xfff0000000000000, 0x0\n+\n+  writemsg \"[24] Test CMP.ult.s\"\n+  r6ck_3s cmp.ult.s, 0x0, 0x3f800000, 0x3f800000, 0x0\n+  r6ck_3s cmp.ult.s, 0x0, 0x3f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ult.s, 0x0, 0x7fc00000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ult.s, 0x0, 0x00000000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ult.s, 0x0, 0xbf800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ult.s, 0x0, 0x3f800000, 0xbf800000, 0x0\n+\n+  writemsg \"[25] Test CMP.ult.d\"\n+  r6ck_3d cmp.ult.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0x0\n+  r6ck_3d cmp.ult.d, 0x0, 0x3ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ult.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ult.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ult.d, 0x0, 0xbff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ult.d, 0x0, 0x3ff0000000000000, 0xbff0000000000000, 0x0\n+\n+  writemsg \"[26] Test CMP.ule.s\"\n+  r6ck_3s cmp.ule.s, 0x0, 0x3f800000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ule.s, 0x0, 0x7fc00000, 0x7fc00000, 0xffffffff\n+  r6ck_3s cmp.ule.s, 0x0, 0x3f800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ule.s, 0x0, 0x00000000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ule.s, 0x0, 0xbf800000, 0x3f800000, 0xffffffff\n+  r6ck_3s cmp.ule.s, 0x0, 0x3f800000, 0xbf800000, 0x0\n+  r6ck_3s cmp.ule.s, 0x0, 0x3f800000, 0xff800000, 0x0\n+\n+  writemsg \"[27] Test CMP.ule.d\"\n+  r6ck_3d cmp.ule.d, 0x0, 0x3ff0000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ule.d, 0x0, 0x7ff8000000000000, 0x7ff8000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ule.d, 0x0, 0x3ff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ule.d, 0x0, 0x0000000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ule.d, 0x0, 0xbff0000000000000, 0x3ff0000000000000, 0xffffffffffffffff\n+  r6ck_3d cmp.ule.d, 0x0, 0x3ff0000000000000, 0xbff0000000000000, 0x0\n+  r6ck_3d cmp.ule.d, 0x0, 0x3ff0000000000000, 0xfff0000000000000, 0x0\n+\n+  writemsg \"[28] Test rint.s\"\n+  r6ck_2s rint.s, 0x0, 0x3fbf10cb, 0x3f800000\n+  r6ck_2s rint.s, 0x0, 0xb9011423, 0x0\n+  r6ck_2s rint.s, 0x0, 0x43fa4687, 0x43fa8000\n+  r6ck_2s rint.s, 0x0, 0x41380000, 0x41400000\n+  r6ck_2s rint.s, 0x0, 0x3ff33333, 0x40000000\n+\n+  writemsg \"[29] Test rint.d\"\n+  r6ck_2d rint.d, 0x0, 0x3ff1f9a6b50b0f28, 0x3ff0000000000000\n+  r6ck_2d rint.d, 0x0, 0xbf543bf727136a40, 0x0\n+  r6ck_2d rint.d, 0x0, 0x407f48d0e5604189, 0x407f500000000000\n+  r6ck_2d rint.d, 0x0, 0x5b7c2d43b93b0a8c, 0x5b7c2d43b93b0a8c,\n+\n+  writemsg \"[30] Test class.s\"\n+  r6ck_2s class.s, 0x0, 0x7f800010, 0x1\n+  r6ck_2s class.s, 0x0, 0x7fc00000, 0x2\n+  r6ck_2s class.s, 0x0, 0xff800000, 0x4\n+  r6ck_2s class.s, 0x0, 0xbf800000, 0x8\n+  r6ck_2s class.s, 0x0, 0x80000001, 0x10\n+  r6ck_2s class.s, 0x0, 0x80000000, 0x20\n+  r6ck_2s class.s, 0x0, 0x7f800000, 0x40\n+  r6ck_2s class.s, 0x0, 0x3f800000, 0x80\n+  r6ck_2s class.s, 0x0, 0x00000001, 0x100\n+  r6ck_2s class.s, 0x0, 0x00000000, 0x200\n+\n+  writemsg \"[31] Test class.d\"\n+  r6ck_2d class.d, 0x0, 0x7ff0000000000010, 0x1\n+  r6ck_2d class.d, 0x0, 0x7ff8000000000000, 0x2\n+  r6ck_2d class.d, 0x0, 0xfff0000000000000, 0x4\n+  r6ck_2d class.d, 0x0, 0xbff0000000000000, 0x8\n+  r6ck_2d class.d, 0x0, 0x8000000000000001, 0x10\n+  r6ck_2d class.d, 0x0, 0x8000000000000000, 0x20\n+  r6ck_2d class.d, 0x0, 0x7ff0000000000000, 0x40\n+  r6ck_2d class.d, 0x0, 0x3ff0000000000000, 0x80\n+  r6ck_2d class.d, 0x0, 0x0000000000000001, 0x100\n+  r6ck_2d class.d, 0x0, 0x0000000000000000, 0x200\n+\n+  writemsg \"[32] Test min.s\"\n+  r6ck_3s min.s, 0x0, 0x3f800000, 0x0, 0x0\n+  r6ck_3s min.s, 0x0, 0x0, 0x3f800000, 0x0\n+  r6ck_3s min.s, 0x0, 0x7f800000, 0x3f800000, 0x3f800000\n+  r6ck_3s min.s, 0x0, 0x3f800000, 0x7f800000, 0x3f800000\n+  r6ck_3s min.s, 0x0, 0xff800000, 0xbf800000, 0xff800000\n+  r6ck_3s min.s, 0x0, 0xbf800000, 0xff800000, 0xff800000\n+  r6ck_3s min.s, 0x0, 0x7fffffff, 0x3f800000, 0x3f800000\n+  r6ck_3s min.s, 0x0, 0x3f800000, 0x7fffffff, 0x3f800000\n+\n+  writemsg \"[33] Test min.d\"\n+  r6ck_3d min.d, 0x0, 0x3ff0000000000000, 0x0, 0x0\n+  r6ck_3d min.d, 0x0, 0x0, 0x3ff0000000000000, 0x0\n+  r6ck_3d min.d, 0x0, 0x7ff0000000000000, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d min.d, 0x0, 0x3ff0000000000000, 0x7ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d min.d, 0x0, 0xfff0000000000000, 0xbff0000000000000, 0xfff0000000000000\n+  r6ck_3d min.d, 0x0, 0xbff0000000000000, 0xfff0000000000000, 0xfff0000000000000\n+  r6ck_3d min.d, 0x0, 0x7fffffffffffffff, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d min.d, 0x0, 0x3ff0000000000000, 0x7fffffffffffffff, 0x3ff0000000000000\n+\n+  writemsg \"[34] Test max.s\"\n+  r6ck_3s max.s, 0x0, 0x3f800000, 0x0, 0x3f800000\n+  r6ck_3s max.s, 0x0, 0x0, 0x3f800000, 0x3f800000\n+  r6ck_3s max.s, 0x0, 0x7f800000, 0x3f800000, 0x7f800000\n+  r6ck_3s max.s, 0x0, 0x3f800000, 0x7f800000, 0x7f800000\n+  r6ck_3s max.s, 0x0, 0xff800000, 0xbf800000, 0xbf800000\n+  r6ck_3s max.s, 0x0, 0xbf800000, 0xff800000, 0xbf800000\n+  r6ck_3s max.s, 0x0, 0x7fffffff, 0x3f800000, 0x3f800000\n+  r6ck_3s max.s, 0x0, 0x3f800000, 0x7fffffff, 0x3f800000\n+\n+  writemsg \"[35] Test max.d\"\n+  r6ck_3d max.d, 0x0, 0x3ff0000000000000, 0x0, 0x3ff0000000000000\n+  r6ck_3d max.d, 0x0, 0x0, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d max.d, 0x0, 0x7ff0000000000000, 0x3ff0000000000000, 0x7ff0000000000000\n+  r6ck_3d max.d, 0x0, 0x3ff0000000000000, 0x7ff0000000000000, 0x7ff0000000000000\n+  r6ck_3d max.d, 0x0, 0xfff0000000000000, 0xbff0000000000000, 0xbff0000000000000\n+  r6ck_3d max.d, 0x0, 0xbff0000000000000, 0xfff0000000000000, 0xbff0000000000000\n+  r6ck_3d max.d, 0x0, 0x7fffffffffffffff, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d max.d, 0x0, 0x3ff0000000000000, 0x7fffffffffffffff, 0x3ff0000000000000\n+\n+  writemsg \"[36] Test mina.s\"\n+  r6ck_3s mina.s, 0x0, 0x3f800000, 0x0, 0x0\n+  r6ck_3s mina.s, 0x0, 0x0, 0x3f800000, 0x0\n+  r6ck_3s mina.s, 0x0, 0x7f800000, 0x3f800000, 0x3f800000\n+  r6ck_3s mina.s, 0x0, 0x3f800000, 0x7f800000, 0x3f800000\n+  r6ck_3s mina.s, 0x0, 0xff800000, 0xbf800000, 0xbf800000\n+  r6ck_3s mina.s, 0x0, 0xbf800000, 0xff800000, 0xbf800000\n+  r6ck_3s mina.s, 0x0, 0x7fffffff, 0x3f800000, 0x3f800000\n+  r6ck_3s mina.s, 0x0, 0x3f800000, 0x7fffffff, 0x3f800000\n+  r6ck_3s mina.s, 0x0, 0xc0000000, 0x3f800000, 0x3f800000\n+  r6ck_3s mina.s, 0x0, 0x3f800000, 0xc0000000, 0x3f800000\n+\n+  writemsg \"[37] Test mina.d\"\n+  r6ck_3d mina.d, 0x0, 0x3ff0000000000000, 0x0, 0x0\n+  r6ck_3d mina.d, 0x0, 0x0, 0x3ff0000000000000, 0x0\n+  r6ck_3d mina.d, 0x0, 0x7ff0000000000000, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d mina.d, 0x0, 0x3ff0000000000000, 0x7ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d mina.d, 0x0, 0xfff0000000000000, 0xbff0000000000000, 0xbff0000000000000\n+  r6ck_3d mina.d, 0x0, 0xbff0000000000000, 0xfff0000000000000, 0xbff0000000000000\n+  r6ck_3d mina.d, 0x0, 0x7fffffffffffffff, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d mina.d, 0x0, 0x3ff0000000000000, 0x7fffffffffffffff, 0x3ff0000000000000\n+  r6ck_3d mina.d, 0x0, 0xc000000000000000, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d mina.d, 0x0, 0x3ff0000000000000, 0xc000000000000000, 0x3ff0000000000000\n+\n+  writemsg \"[38] Test maxa.s\"\n+  r6ck_3s maxa.s, 0x0, 0x3f800000, 0x0, 0x3f800000\n+  r6ck_3s maxa.s, 0x0, 0x0, 0x3f800000, 0x3f800000\n+  r6ck_3s maxa.s, 0x0, 0x7f800000, 0x3f800000, 0x7f800000\n+  r6ck_3s maxa.s, 0x0, 0x3f800000, 0x7f800000, 0x7f800000\n+  r6ck_3s maxa.s, 0x0, 0xff800000, 0xbf800000, 0xff800000\n+  r6ck_3s maxa.s, 0x0, 0xbf800000, 0xff800000, 0xff800000\n+  r6ck_3s maxa.s, 0x0, 0x7fffffff, 0x3f800000, 0x3f800000\n+  r6ck_3s maxa.s, 0x0, 0x3f800000, 0x7fffffff, 0x3f800000\n+  r6ck_3s maxa.s, 0x0, 0xc0000000, 0x3f800000, 0xc0000000\n+  r6ck_3s maxa.s, 0x0, 0x3f800000, 0xc0000000, 0xc0000000\n+\n+  writemsg \"[39] Test maxa.d\"\n+  r6ck_3d maxa.d, 0x0, 0x3ff0000000000000, 0x0, 0x3ff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0x0, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0x7ff0000000000000, 0x3ff0000000000000, 0x7ff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0x3ff0000000000000, 0x7ff0000000000000, 0x7ff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0xfff0000000000000, 0xbff0000000000000, 0xfff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0xbff0000000000000, 0xfff0000000000000, 0xfff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0x7fffffffffffffff, 0x3ff0000000000000, 0x3ff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0x3ff0000000000000, 0x7fffffffffffffff, 0x3ff0000000000000\n+  r6ck_3d maxa.d, 0x0, 0xc000000000000000, 0x3ff0000000000000, 0xc000000000000000\n+  r6ck_3d maxa.d, 0x0, 0x3ff0000000000000, 0xc000000000000000, 0xc000000000000000\n+\n+  writemsg \"[40] Test sel.s\"\n+  r6ck_3s sel.s, 0x0, 0xabcdef12, 0x12345678, 0xabcdef12\n+  r6ck_3s sel.s, 0x1, 0xdeadbeef, 0xcafe1234, 0xcafe1234\n+  r6ck_3s sel.s, 0xfffffffe, 0xbadcafe0, 0x12345678, 0xbadcafe0\n+  r6ck_3s sel.s, 0xffffffff, 0xdeadbeef, 0xcadf00ab, 0xcadf00ab\n+\n+  writemsg \"[41] Test sel.d\"\n+  r6ck_3d sel.d, 0x0, 0xabcdef123456789, 0x12345678abcdefa, 0xabcdef123456789\n+  r6ck_3d sel.d, 0x1, 0xdeadbeef1534567, 0xcafe12340145279, 0xcafe12340145279\n+  r6ck_3d sel.d, 0xfffffffffffffffe, 0xbadcafe00efacdab, 0x1234567887654321, 0xbadcafe00efacdab\n+  r6ck_3d sel.d, 0xffffffffffffffff, 0xdeadbeeffeebdaed, 0xcadf00abba00fdac, 0xcadf00abba00fdac\n+\n+  writemsg \"[42] Test seleqz.s\"\n+  r6ck_3s seleqz.s, 0x0, 0x1234abcd, 0x0, 0x1234abcd\n+  r6ck_3s seleqz.s, 0x0, 0xabcdef01, 0x1, 0x0\n+  r6ck_3s seleqz.s, 0x0, 0xffeebbcc, 0xfffffffe, 0xffeebbcc\n+  r6ck_3s seleqz.s, 0x0, 0x12345678, 0xffffffff, 0\n+\n+  writemsg \"[43] Test seleqz.d\"\n+  r6ck_3d seleqz.d, 0x0, 0x1234abcddcba4321, 0x0, 0x1234abcddcba4321\n+  r6ck_3d seleqz.d, 0x0, 0xabcdef0110fedcba, 0x1, 0x0\n+  r6ck_3d seleqz.d, 0x0, 0xffeebbccccbbeeff, 0xfffffffffffffffe, 0xffeebbccccbbeeff\n+  r6ck_3d seleqz.d, 0x0, 0x1234567887654321, 0xffffffffffffffff, 0x0\n+\n+  writemsg \"[44] Test selnez.s\"\n+  r6ck_3s selnez.s, 0x0, 0x1234abcd, 0x0, 0x0\n+  r6ck_3s selnez.s, 0x0, 0xabcdef01, 0x1, 0xabcdef01\n+  r6ck_3s selnez.s, 0x0, 0xffeebbcc, 0xfffffffe, 0x0\n+  r6ck_3s selnez.s, 0x0, 0x12345678, 0xffffffff, 0x12345678\n+\n+  writemsg \"[45] Test selnez.d\"\n+  r6ck_3d selnez.d, 0x0, 0x1234abcddcba4321, 0x0, 0x0\n+  r6ck_3d selnez.d, 0x0, 0xabcdef0110fedcba, 0x1, 0xabcdef0110fedcba\n+  r6ck_3d selnez.d, 0x0, 0xffeebbccccbbeeff, 0xfffffffffffffffe, 0x0\n+  r6ck_3d selnez.d, 0x0, 0x1234567887654321, 0xffffffffffffffff, 0x1234567887654321\n+\n+  writemsg \"[46] Test bc1eqz\"\n+  li $10, 0x01\n+  mtc1 $10, $f2\n+  mtc1 $0, $f4\n+  bc1eqz $f2, L1\n+  nop\n+  bc1eqz $f4, L2\n+  nop\n+  fail\n+\n+L1:\n+  fail\n+\n+L2:\n+  writemsg \"[47] Test bc1nez\"\n+  bc1nez $f4, L3\n+  nop\n+  bc1nez $f2, L4\n+  nop\n+  fail\n+\n+L3:\n+  fail\n+\n+L4:\n+  pass\n+\n+  .end DIAG"
    },
    {
      "sha": "1eec3e4f05646d30add8e126883d86b6ba6c1f47",
      "filename": "sim/testsuite/mips/r6-llsc-dp.s",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-llsc-dp.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-llsc-dp.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-llsc-dp.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,57 @@\n+# mips64 specific r6 tests - paired LL/SC variants\n+# mach:  mips64r6\n+# as:    -mabi=eabi\n+# ld:    -N -Ttext=0x80010000 -Tdata=0x80020000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+  .include \"utils-r6.inc\"\n+\n+  .data\n+  .align 16\n+test_data:\n+\t.word 0xaaaaaaaa\n+\t.word 0xbbbbbbbb\n+\t.word 0xcccccccc\n+\t.word 0xdddddddd\n+end_check:\n+\t.byte 0\n+\t.byte 0\n+\t.byte 0\n+\t.byte 0x1\n+\n+  .text\n+\n+  setup\n+\n+  .ent DIAG\n+DIAG:\n+  writemsg \"[1] Test LLWP\"\n+  llwp\t$2, $3, test_data\n+  checkpair_dword $2, $3, test_data, end_check\n+\n+  sll $2, $2, 1\n+  srl $3, $3, 1\n+  move  $s0, $2\n+\n+  scwp\t$2, $3, test_data\n+  check32 $2, 1\n+  checkpair_dword $s0, $3, test_data, end_check\n+  writemsg \"[2] Test SCWP, done\"\n+\n+  writemsg \"[3] Test LLDP\"\n+  lldp\t$2, $3, test_data\n+  checkpair_qword $2, $3, test_data, end_check\n+\n+  dsll $2, $2, 1\n+  dsrl $3, $3, 1\n+  move\t$s0, $2\n+\n+  scdp\t$2, $3, test_data\n+  check32 $2, 1\n+  checkpair_qword $s0, $3, test_data, end_check\n+  writemsg \"[4] Test SCDP, done\"\n+\n+  pass\n+\n+  .end DIAG"
    },
    {
      "sha": "55ad9243fc8a7ecc529af3b719113f257f201041",
      "filename": "sim/testsuite/mips/r6-llsc-wp.s",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-llsc-wp.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-llsc-wp.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-llsc-wp.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,41 @@\n+# mips32 specific r6 tests - paired LL/SC variants\n+# mach:  mips32r6\n+# as:    -mabi=eabi\n+# ld:    -N -Ttext=0x80010000 -Tdata=0x80020000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+  .include \"utils-r6.inc\"\n+\n+  .data\n+  .align 8\n+test_data:\n+\t.word 0xaaaaaaaa\n+\t.word 0xbbbbbbbb\n+end_check:\n+\t.byte 0\n+\t.byte 0\n+\t.byte 0\n+\t.byte 0x1\n+  .text\n+\n+  setup\n+\n+  .ent DIAG\n+DIAG:\n+  writemsg \"[1] Test LLWP\"\n+  llwp\t$2, $3, test_data\n+  checkpair_dword $2, $3, test_data, end_check\n+\n+  sll $2, $2, 1\n+  srl $3, $3, 1\n+  move  $s0, $2\n+\n+  scwp\t$2, $3, test_data\n+  check32 $2, 1\n+  checkpair_dword $s0, $3, test_data, end_check\n+  writemsg \"[2] Test SCWP, done\"\n+\n+pass\n+\n+  .end DIAG"
    },
    {
      "sha": "5f2285c526e384779918553657ef49d2c7a2d8ee",
      "filename": "sim/testsuite/mips/r6-removed.csv",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-removed.csv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-removed.csv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-removed.csv?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,68 @@\n+BC1F,0x45000000\n+BEQL,0x50000000\n+BGEZAL,0x04310000\n+BGEZALL,0x04130000\n+BGEZL,0x04030000\n+BLTZALL,0x04120000\n+BLTZL,0x04020000\n+BNEL,0x54000000\n+C.DEQ.D,0x44000030\n+CACHE,0xbc000000\n+CVT.PS.S,0x46000026\n+CVT.S.PL,0x46c00028\n+CVT.S.PU,0x46c00020\n+DCLO,0x70000025\n+DCLZ,0x70000024\n+LDL,0x68000000\n+LDR,0x6c000000\n+LDXC1,0x4c000001\n+LL,0xc0000000\n+LLD,0xd0000000\n+LUXC1,0x4c000005\n+LWL,0x88000000\n+LWLE,0x7c000019\n+LWR,0x98000000\n+LWRE,0x7c00001a\n+LWXC1,0x4c000000\n+MADD,0x70000000\n+MADD.D,0x4c000020\n+MADDU,0x70000001\n+MOVF,0x00000001\n+MOVF.D,0x44000011\n+MOVN.D,0x44000013\n+MOVT,0x00010001\n+MOVT.D,0x44010011\n+MOVZ.D,0x44000012\n+MSUB,0x70000004\n+MSUB.D,0x4c000028\n+MSUBU,0x70000005\n+MUL,0x70000002\n+NEG.S,0x44000007\n+NMADD.D,0x4c000030\n+NMSUB.D,0x4c000038\n+PLL.PS,0x46c0002c\n+PLU.PS,0x46c0002d\n+PREF,0xcc000000\n+PREFX,0x4c00000f\n+PUL.PS,0x46c0005e\n+PUU.PS,0x46c0002f\n+RINT.fmt,0x4400001a\n+SC,0xe0000000\n+SCD,0xf0000000\n+SDBBP,0x7000003f\n+SDL,0xb0000000\n+SDR,0xb4000000\n+SDXC1,0x4c000009\n+SUB.D,0x44000001\n+SUXC1,0x4c00000d\n+SWL,0xa8000000\n+SWLE,0x7c000021\n+SWR,0xb8000000\n+SWRE,0x7c000022\n+SWXC1,0x4c000008\n+TEQI,0x040c0000\n+TGEI,0x04080000\n+TGEIU,0x04090000\n+TLTI,0x040a0000\n+TLTIU,0x040b0000\n+TNEI,0x040c0000"
    },
    {
      "sha": "4f2605fa6a7b637cbf89c2ff53618e9c3b860870",
      "filename": "sim/testsuite/mips/r6-removed.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-removed.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6-removed.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6-removed.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,18 @@\n+# Tests the instructions removed in R6 are correctly invalidated\n+# mach: mips32r6 mips64r6\n+# as:   -mabi=eabi\n+# ld:   -N -Ttext=0x80010000\n+# output: ReservedInstruction at PC = *\\nprogram stopped with signal 4 (Illegal instruction).\\n\n+# xerror:\n+\n+  .include \"testutils.inc\"\n+  .include \"r6-removed.inc\"\n+\n+  setup\n+\n+  .set noreorder\n+  .ent DIAG\n+DIAG:\n+  removed_instr\n+  fail\n+  .end DIAG"
    },
    {
      "sha": "d30ffffe13772dbafff8b8409c0a6e5c39322f94",
      "filename": "sim/testsuite/mips/r6.s",
      "status": "added",
      "additions": 163,
      "deletions": 0,
      "changes": 163,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/r6.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/r6.s?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,163 @@\n+# mips r6 tests (non FPU)\n+# mach:  mips32r6 mips64r6\n+# as:    -mabi=eabi\n+# ld:    -N -Ttext=0x80010000\n+# output: *\\\\npass\\\\n\n+\n+  .include \"testutils.inc\"\n+  .include \"utils-r6.inc\"\n+\n+  setup\n+\n+  .data\n+dval1:  .word 0xabcd1234\n+dval2: .word 0x1234eeff\n+  .fill 248,1,0\n+dval3:\t.word 0x55555555\n+  .fill  260,1,0\n+dval4:\t.word 0xaaaaaaaa\n+  .text\n+\n+  .set noreorder\n+\n+  .ent DIAG\n+DIAG:\n+\n+  writemsg \"[1] Test MUL\"\n+  r6ck_2r mul, 7, 9, 63\n+  r6ck_2r mul, -7, -9, 63\n+  r6ck_2r mul, 61, -11, -671\n+  r6ck_2r mul, 1001, 1234, 1235234\n+  r6ck_2r mul, 123456789, 999999, 0x7eb1e22b\n+  r6ck_2r mul, 0xaaaabbbb, 0xccccdddd, 0x56787f6f\n+\n+  writemsg \"[2] Test MUH\"\n+  r6ck_2r muh, 61, -11, 0xffffffff\n+  r6ck_2r muh, 1001, 1234, 0\n+  r6ck_2r muh, 123456789, 999999, 0x7048\n+  r6ck_2r muh, 0xaaaabbbb, 0xccccdddd, 0x111107f7\n+\n+  writemsg \"[3] Test MULU\"\n+  r6ck_2r mulu, 7, 9, 63\n+  r6ck_2r mulu, -7, -9, 63\n+  r6ck_2r mulu, 61, -11, -671\n+  r6ck_2r mulu, 1001, 1234, 1235234\n+  r6ck_2r mulu, 123456789, 999999, 0x7eb1e22b\n+  r6ck_2r mulu, 0xaaaabbbb, 0xccccdddd, 0x56787f6f\n+\n+  writemsg \"[4] Test MUHU\"\n+  r6ck_2r muhu, 1001, 1234, 0\n+  r6ck_2r muhu, 123456789, 999999, 0x7048\n+  r6ck_2r muhu, 0xaaaabbbb, 0xccccdddd, 0x8888a18f\n+  r6ck_2r muhu, 0xaaaabbbb, 0xccccdddd, 0x8888a18f\n+\n+  writemsg \"[5] Test DIV\"\n+  r6ck_2r div, 10001, 10, 1000\n+  r6ck_2r div, -123456, 560, -220\n+  r6ck_2r div, 9, 100, 0\n+\n+  writemsg \"[6] Test MOD\"\n+  r6ck_2r mod, 10001, 10, 1\n+  r6ck_2r mod, -123456, 560, 0xffffff00\n+  r6ck_2r mod, 9, 100, 9\n+\n+  writemsg \"[7] Test DIVU\"\n+  r6ck_2r divu, 10001, 10, 1000\n+  r6ck_2r divu, -123456, 560, 0x750674\n+  r6ck_2r divu, 9, 100, 0\n+  r6ck_2r divu, 0xaaaabbbb, 3, 0x38e393e9\n+\n+  writemsg \"[8] Test MODU\"\n+  r6ck_2r modu, 10001, 10, 1\n+  r6ck_2r modu, -123456, 560, 0\n+  r6ck_2r modu, 9, 100, 9\n+  r6ck_2r modu, 0xaaaabbbb, 5, 4\n+\n+  writemsg \"[9] Test LSA\"\n+  r6ck_2r1i lsa, 1, 2, 2, 6\n+  r6ck_2r1i lsa, 0x8000, 0xa000, 1, 0x1a000\n+  r6ck_2r1i lsa, 0x82, 0x2000068, 4, 0x2000888\n+\n+  writemsg \"[10] Test AUI\"\n+  r6ck_1r1i aui, 0x0000c0de, 0xdead, 0xdeadc0de\n+  r6ck_1r1i aui, 0x00005678, 0x1234, 0x12345678\n+  r6ck_1r1i aui, 0x0000eeff, 0xabab, 0xababeeff\n+\n+  writemsg \"[11] Test SELEQZ\"\n+  r6ck_2r seleqz, 0x1234, 0, 0x1234\n+  r6ck_2r seleqz, 0x1234, 4, 0\n+  r6ck_2r seleqz, 0x80010001, 0, 0x80010001\n+\n+  writemsg \"[12] Test SELNEZ\"\n+  r6ck_2r selnez, 0x1234, 0, 0\n+  r6ck_2r selnez, 0x1234, 1, 0x1234\n+  r6ck_2r selnez, 0x80010001, 0xffffffff, 0x80010001\n+\n+  writemsg \"[13] Test ALIGN\"\n+  r6ck_2r1i align, 0xaabbccdd, 0xeeff0011, 1, 0xff0011aa\n+  r6ck_2r1i align, 0xaabbccdd, 0xeeff0011, 3, 0x11aabbcc\n+\n+  writemsg \"[14] Test BITSWAP\"\n+  r6ck_1r bitswap, 0xaabbccdd, 0x55dd33bb\n+  r6ck_1r bitswap, 0x11884422, 0x88112244\n+\n+  writemsg \"[15] Test CLZ\"\n+  r6ck_1r clz, 0x00012340, 15\n+  r6ck_1r clz, 0x80012340, 0\n+  r6ck_1r clz, 0x40012340, 1\n+\n+  writemsg \"[16] Test CLO\"\n+  r6ck_1r clo, 0x00123050, 0\n+  r6ck_1r clo, 0xff123050, 8\n+  r6ck_1r clo, 0x8f123050, 1\n+\n+  writemsg \"[17] Test ADDIUPC\"\n+  jal GetPC\n+  nop\n+  addiu $4, $6, 8\n+  addiupc $5, 4\n+  fp_assert $4, $5\n+\n+  writemsg \"[18] Test AUIPC\"\n+  jal GetPC\n+  nop\n+  addiu $4, $6, 8\n+  aui $4, $4, 8\n+  auipc $5, 8\n+  fp_assert $4, $5\n+\n+  writemsg \"[19] Test ALUIPC\"\n+  jal GetPC\n+  nop\n+  addiu $4, $6, 16\n+  aui $4, $4, 8\n+  li $7, 0xffff0000\n+  and $4, $4, $7\n+  aluipc $5, 8\n+  fp_assert $4, $5\n+\n+  writemsg \"[20] Test LWPC\"\n+  lw $5, dval1\n+  lwpc $4, dval1\n+  fp_assert $4, $5\n+  lw $5, dval2\n+  lwpc $4, dval2\n+  fp_assert $4, $5\n+\n+  writemsg \"[21] Test LL\"\n+  lw $5, dval2\n+  la $3, dval3\n+  ll $4, -252($3)\n+  fp_assert $4, $5\n+\n+  writemsg \"[22] Test SC\"\n+  ll $4, -252($3)\n+  li $4, 0xafaf\n+  sc $4, -252($3)\n+  lw $5, dval2\n+  li $4, 0xafaf\n+  fp_assert $4, $5\n+\n+  pass\n+\n+  .end DIAG"
    },
    {
      "sha": "1f64ba766aa9e70fa08cba8914cf389ea4d643f8",
      "filename": "sim/testsuite/mips/testutils.inc",
      "status": "modified",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/testutils.inc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/testutils.inc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/testutils.inc?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -148,3 +148,58 @@ _dowrite:\n \tcheckreg \\reg, $1\n \t.set pop\n \t.endm\n+\n+\n+\t# Check hi-lo register pair against data stored at base+o1 and base+o2\n+\t# Clobbers $1 - $5\n+\t.macro checkpair lo, hi, base, w, o1, o2\n+\tmove  $2, \\lo\n+\tmove  $3, \\hi\n+\t.set noat\n+\tla   $1, \\base\n+\tl\\w\t$4, \\o1($1)\n+\tl\\w\t$5, \\o2($1)\n+\t.set at\n+\tcheckreg  $2, $4\n+\tcheckreg  $3, $5\n+\t.endm\n+\n+\t.macro checkpair_le_d lo, hi, base\n+\tcheckpair \\lo, \\hi, \\base, w, 0, 4\n+\t.endm\n+\n+\t.macro checkpair_be_d lo, hi, base\n+\tcheckpair \\lo, \\hi, \\base, w, 4, 0\n+\t.endm\n+\n+\t.macro checkpair_le_q lo, hi, base\n+\tcheckpair \\lo, \\hi, \\base, d, 0, 8\n+\t.endm\n+\n+\t.macro checkpair_be_q lo, hi, base\n+\tcheckpair \\lo, \\hi, \\base, d, 8, 0\n+\t.endm\n+\n+\t# Endian-ness for comparison is determined by reading a word at ec\n+\t.macro checkpair_xendian lo, hi, base, ec, w\n+\t.set noat\n+\tlw   $1, \\ec\n+\tandi $1, $1, 0x1\n+\t# check endianess\n+\tbeqz  $1, 2f\n+\t.set at\n+1: # big endian\n+\tcheckpair_be_\\w \\lo, \\hi, \\base\n+\tb 3f\n+2: # little endian\n+\tcheckpair_le_\\w \\lo, \\hi, \\base\n+3:\n+\t.endm\n+\n+\t.macro checkpair_qword lo, hi, base, oe\n+\tcheckpair_xendian \\lo, \\hi, \\base, \\oe, q\n+\t.endm\n+\n+\t.macro checkpair_dword lo, hi, base, oe\n+\tcheckpair_xendian \\lo, \\hi, \\base, \\oe, d\n+\t.endm"
    },
    {
      "sha": "b5c88e54bc703679a118220ef8cf4f3849131583",
      "filename": "sim/testsuite/mips/utils-r6.inc",
      "status": "added",
      "additions": 150,
      "deletions": 0,
      "changes": 150,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/utils-r6.inc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06c441cceffb1437a3af51bfad43dce5fd200d9e/sim/testsuite/mips/utils-r6.inc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/mips/utils-r6.inc?ref=06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "patch": "@@ -0,0 +1,150 @@\n+  .macro fp_assert a, b\n+  beq \\a, \\b, 1f\n+  nop\n+  j _fail\n+  nop\n+1:\n+  .endm\n+\n+  .macro r6ck_1r inst, a, ret\n+  li $4, \\a\n+  li $6, \\ret\n+  \\inst $7, $4\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_1dr inst, a, ret\n+  ld $4, \\a\n+  ld $6, \\ret\n+  \\inst $7, $4\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_2r inst, a, b, ret\n+  li $4, \\a\n+  li $5, \\b\n+  li $6, \\ret\n+  \\inst $7, $4, $5\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_2dr inst, a, b, ret\n+  ld $4, \\a\n+  ld $5, \\b\n+  ld $6, \\ret\n+  \\inst $7, $4, $5\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_2dr1i inst, a, b, imm, ret\n+  ld $4, \\a\n+  ld $5, \\b\n+  ld $6, \\ret\n+  \\inst $7, $4, $5, \\imm\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_1r1i inst, a, imm, ret\n+  li $4, \\a\n+  li $6, \\ret\n+  \\inst $7, $4, \\imm\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_1dr1i inst, a, imm, ret\n+  ld $4, \\a\n+  ld $6, \\ret\n+  \\inst $7, $4, \\imm\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_0dr1i inst, a, imm, ret\n+  ld $4, \\a\n+  ld $6, \\ret\n+  \\inst $4, $4, \\imm\n+  fp_assert $6, $4\n+  .endm\n+\n+  .macro r6ck_2r1i inst, a, b, imm, ret\n+  li $4, \\a\n+  li $5, \\b\n+  li $6, \\ret\n+  \\inst $7, $4, $5, \\imm\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_3s inst, a, b, c, ret\n+  li $4, \\a\n+  li $5, \\b\n+  li $6, \\c\n+  li $7, \\ret\n+  mtc1 $4, $f2\n+  mtc1 $5, $f4\n+  mtc1 $6, $f6\n+  \\inst $f2, $f4, $f6\n+  mfc1 $8, $f2\n+  fp_assert $7, $8\n+  .endm\n+\n+  .macro r6ck_2s inst, a, b, ret\n+  li $4, \\a\n+  li $5, \\b\n+  li $6, \\ret\n+  mtc1 $4, $f2\n+  mtc1 $5, $f4\n+  \\inst $f2, $f4\n+  mfc1 $7, $f2\n+  fp_assert $6, $7\n+  .endm\n+\n+  .macro r6ck_2d inst, a, b, ret\n+  .data\n+1: .dword \\a\n+2: .dword \\b\n+3: .dword \\ret\n+  .text\n+  la $4, 1b\n+  la $5, 2b\n+  la $6, 3b\n+  ldc1 $f2, 0($4)\n+  ldc1 $f4, 0($5)\n+  lw $7, 0($6)\n+  lw $8, 4($6)\n+  \\inst $f2, $f4\n+\n+  #simulate dmfc1\n+  mfhc1 $9, $f2\n+  mfc1 $10, $f2\n+  fp_assert $7, $9\n+  fp_assert $8, $10\n+  .endm\n+\n+  .macro r6ck_3d inst, a, b, c, ret\n+  .data\n+1: .dword \\a\n+2: .dword \\b\n+3: .dword \\c\n+4: .dword \\ret\n+  .text\n+  la $4, 1b\n+  la $5, 2b\n+  la $6, 3b\n+  la $2, 4b\n+  ldc1 $f2, 0($4)\n+  ldc1 $f4, 0($5)\n+  ldc1 $f6, 0($6)\n+  lw $7, 0($2)\n+  lw $8, 4($2)\n+  \\inst $f2, $f4, $f6\n+\n+  #simulate dmfc1\n+  mfhc1 $9, $f2\n+  mfc1 $10, $f2\n+  fp_assert $7, $9\n+  fp_assert $8, $10\n+  .endm\n+\n+.text\n+GetPC:\n+  move $6, $ra\n+  jr $ra"
    }
  ]
}