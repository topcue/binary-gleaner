{
  "sha": "80e55b132940813fa454da2592a31db6c8af85f1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODBlNTViMTMyOTQwODEzZmE0NTRkYTI1OTJhMzFkYjZjOGFmODVmMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-25T18:14:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-08T16:20:06Z"
    },
    "message": "Correctly handle non-C-style arrays in c_get_string\n\nA user here noticed that the Python Value.string method did not work\nfor Ada arrays.  I tracked this down to an oddity in value_as_address\n-- namely, it calls coerce_array, but that function will not force\narray coercion when the language has c_style_arrays=false, as Ada\ndoes.\n\nThis patch fixes the problem by changing c_get_string so that arrays\ntake the \"in GDB's memory\" branch.  The actual patch is somewhat more\ncomplicated than you might think, because the caller can request more\narray elements than the type allows.  This is normal when the type is\nusing the C struct hack.\n\nTested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tromey@adacore.com>\n\n\t* c-lang.c (c_get_string): Handle non-C-style arrays.\n\ngdb/testsuite/ChangeLog\n2019-05-08  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.python/py-value.exp (test_value_in_inferior): Add Ada test.",
    "tree": {
      "sha": "ebb1b1c183fa1bcec144be4479fd601864131352",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ebb1b1c183fa1bcec144be4479fd601864131352"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/80e55b132940813fa454da2592a31db6c8af85f1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80e55b132940813fa454da2592a31db6c8af85f1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/80e55b132940813fa454da2592a31db6c8af85f1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80e55b132940813fa454da2592a31db6c8af85f1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d3421afbb9f3cfc8e67366ba75ea12ed8f732a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d3421afbb9f3cfc8e67366ba75ea12ed8f732a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d3421afbb9f3cfc8e67366ba75ea12ed8f732a3"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 48,
    "deletions": 4
  },
  "files": [
    {
      "sha": "2d723cb991b00ac96e3ee54582f4678dfd0ce080",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80e55b132940813fa454da2592a31db6c8af85f1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80e55b132940813fa454da2592a31db6c8af85f1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=80e55b132940813fa454da2592a31db6c8af85f1",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* c-lang.c (c_get_string): Handle non-C-style arrays.\n+\n 2019-05-08  Tom Tromey  <tromey@adacore.com>\n \n \t* typeprint.c (print_offset_data::update): Print the bit offset,"
    },
    {
      "sha": "5bb771b864389458c7e94dd09b4e2f5185b33fdc",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80e55b132940813fa454da2592a31db6c8af85f1/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80e55b132940813fa454da2592a31db6c8af85f1/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=80e55b132940813fa454da2592a31db6c8af85f1",
      "patch": "@@ -279,10 +279,21 @@ c_get_string (struct value *value, gdb::unique_xmalloc_ptr<gdb_byte> *buffer,\n   /* If the string lives in GDB's memory instead of the inferior's,\n      then we just need to copy it to BUFFER.  Also, since such strings\n      are arrays with known size, FETCHLIMIT will hold the size of the\n-     array.  */\n+     array.\n+\n+     An array is assumed to live in GDB's memory, so we take this path\n+     here.\n+\n+     However, it's possible for the caller to request more array\n+     elements than apparently exist -- this can happen when using the\n+     C struct hack.  So, only do this if either no length was\n+     specified, or the length is within the existing bounds.  This\n+     avoids running off the end of the value's contents.  */\n   if ((VALUE_LVAL (value) == not_lval\n-       || VALUE_LVAL (value) == lval_internalvar)\n-      && fetchlimit != UINT_MAX)\n+       || VALUE_LVAL (value) == lval_internalvar\n+       || TYPE_CODE (type) == TYPE_CODE_ARRAY)\n+      && fetchlimit != UINT_MAX\n+      && (*length < 0 || *length <= fetchlimit))\n     {\n       int i;\n       const gdb_byte *contents = value_contents (value);\n@@ -306,7 +317,19 @@ c_get_string (struct value *value, gdb::unique_xmalloc_ptr<gdb_byte> *buffer,\n     }\n   else\n     {\n-      CORE_ADDR addr = value_as_address (value);\n+      /* value_as_address does not return an address for an array when\n+\t c_style_arrays is false, so we handle that specially\n+\t here.  */\n+      CORE_ADDR addr;\n+      if (TYPE_CODE (type) == TYPE_CODE_ARRAY)\n+\t{\n+\t  if (VALUE_LVAL (value) != lval_memory)\n+\t    error (_(\"Attempt to take address of value \"\n+\t\t     \"not located in memory.\"));\n+\t  addr = value_address (value);\n+\t}\n+      else\n+\taddr = value_as_address (value);\n \n       /* Prior to the fix for PR 16196 read_string would ignore fetchlimit\n \t if length > 0.  The old \"broken\" behaviour is the behaviour we want:"
    },
    {
      "sha": "817576c4fbd47d851f19a54a2ff47c50c255f9d9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80e55b132940813fa454da2592a31db6c8af85f1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80e55b132940813fa454da2592a31db6c8af85f1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=80e55b132940813fa454da2592a31db6c8af85f1",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.python/py-value.exp (test_value_in_inferior): Add Ada test.\n+\n 2019-05-08  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.base/ptype-offsets.exp: Update tests."
    },
    {
      "sha": "51edfa30958a056fcbd35f48603600cc3cc14533",
      "filename": "gdb/testsuite/gdb.python/py-value.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80e55b132940813fa454da2592a31db6c8af85f1/gdb/testsuite/gdb.python/py-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80e55b132940813fa454da2592a31db6c8af85f1/gdb/testsuite/gdb.python/py-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-value.exp?ref=80e55b132940813fa454da2592a31db6c8af85f1",
      "patch": "@@ -315,6 +315,13 @@ proc test_value_in_inferior {} {\n   gdb_test \"python print (\\\"---\\\"+st.string (length = 0)+\\\"---\\\")\" \"------\" \"test string (length = 0) is empty\"\n   gdb_test \"python print (len(st.string (length = 0)))\" \"0\" \"test length is 0\"\n \n+  # We choose Ada here to test a language where c_style_arrays is\n+  # false.\n+  gdb_test \"set lang ada\" \\\n+      \"Warning: the current language does not match this frame.\"\n+  gdb_test \"python print (st.string ())\"  \"divide et impera\"  \\\n+      \"Test string with no length in ada\"\n+  gdb_test_no_output \"set lang auto\"\n \n   # Fetch a string that has embedded nulls.\n   gdb_test \"print nullst\" \"\\\"divide\\\\\\\\000et\\\\\\\\000impera\\\".*\"\n@@ -330,6 +337,12 @@ proc test_value_in_inferior {} {\n   gdb_py_test_silent_cmd \"python xstr = gdb.parse_and_eval('xstr')\" \"get xstr\" 1\n   gdb_test \"python print(xstr\\['text'\\].string (length = xstr\\['length'\\]))\" \"x{100}\" \\\n     \"read string beyond declared size\"\n+\n+  # However it shouldn't be possible to fetch past the end of a\n+  # non-memory value.\n+  gdb_py_test_silent_cmd \"python str = '\\\"str\\\"'\" \"set up str variable\" 1\n+  gdb_test \"python print (gdb.parse_and_eval (str).string (length = 10))\" \\\n+      \"gdb.error: Attempt to take address of value not located in memory.\\r\\nError while executing Python code.\"\n }\n \n proc test_inferior_function_call {} {"
    }
  ]
}