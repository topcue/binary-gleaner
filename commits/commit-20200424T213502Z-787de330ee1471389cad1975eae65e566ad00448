{
  "sha": "787de330ee1471389cad1975eae65e566ad00448",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzg3ZGUzMzBlZTE0NzEzODljYWQxOTc1ZWFlNjVlNTY2YWQwMDQ0OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-24T21:35:01Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T21:35:02Z"
    },
    "message": "Move the rust \"{\" hack\n\nThe DWARF reader has a special case to work around a bug in some\nversions of the Rust compiler -- it ignores mangled names that contain\na \"{\" character.\n\nI noticed that this check should probably be in dw2_linkage_name\nrather than only in dwarf2_physname.  The former is called in some\ncases that the latter is not.\n\nAlso, I noticed that this work is not done for the partial DIE reader,\nso this patch adds the check there as well.\n\ngdb/ChangeLog\n2020-04-24  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dw2_linkage_name): Move Rust \"{\" hack here...\n\t(dwarf2_physname): ... from here.\n\t(partial_die_info::read): Add Rust \"{\" hack.",
    "tree": {
      "sha": "caac890fb1b06ec9faf8e15013c76bbbb2abc421",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/caac890fb1b06ec9faf8e15013c76bbbb2abc421"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/787de330ee1471389cad1975eae65e566ad00448",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/787de330ee1471389cad1975eae65e566ad00448",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/787de330ee1471389cad1975eae65e566ad00448",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/787de330ee1471389cad1975eae65e566ad00448/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ff985671077a60f82e3cd8bcceda3efa0f3fabe6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff985671077a60f82e3cd8bcceda3efa0f3fabe6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ff985671077a60f82e3cd8bcceda3efa0f3fabe6"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 17,
    "deletions": 6
  },
  "files": [
    {
      "sha": "6122e3173c09ca5e9ada44963fbfa97728a1ca8e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/787de330ee1471389cad1975eae65e566ad00448/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/787de330ee1471389cad1975eae65e566ad00448/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=787de330ee1471389cad1975eae65e566ad00448",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-24  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dw2_linkage_name): Move Rust \"{\" hack here...\n+\t(dwarf2_physname): ... from here.\n+\t(partial_die_info::read): Add Rust \"{\" hack.\n+\n 2020-04-24  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.h (struct general_symbol_info) <set_demangled_name>: New"
    },
    {
      "sha": "a22139480042d14213d73e7d097de522bfdcda6e",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/787de330ee1471389cad1975eae65e566ad00448/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/787de330ee1471389cad1975eae65e566ad00448/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=787de330ee1471389cad1975eae65e566ad00448",
      "patch": "@@ -10032,6 +10032,12 @@ dw2_linkage_name (struct die_info *die, struct dwarf2_cu *cu)\n   if (linkage_name == NULL)\n     linkage_name = dwarf2_string_attr (die, DW_AT_MIPS_linkage_name, cu);\n \n+  /* rustc emits invalid values for DW_AT_linkage_name.  Ignore these.\n+     See https://github.com/rust-lang/rust/issues/32925.  */\n+  if (cu->language == language_rust && linkage_name != NULL\n+      && strchr (linkage_name, '{') != NULL)\n+    linkage_name = NULL;\n+\n   return linkage_name;\n }\n \n@@ -10308,12 +10314,6 @@ dwarf2_physname (const char *name, struct die_info *die, struct dwarf2_cu *cu)\n \n   mangled = dw2_linkage_name (die, cu);\n \n-  /* rustc emits invalid values for DW_AT_linkage_name.  Ignore these.\n-     See https://github.com/rust-lang/rust/issues/32925.  */\n-  if (cu->language == language_rust && mangled != NULL\n-      && strchr (mangled, '{') != NULL)\n-    mangled = NULL;\n-\n   /* DW_AT_linkage_name is missing in some cases - depend on what GDB\n      has computed.  */\n   gdb::unique_xmalloc_ptr<char> demangled;\n@@ -18301,6 +18301,11 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t     assume they will be the same, and we only store the last\n \t     one we see.  */\n \t  linkage_name = DW_STRING (&attr);\n+\t  /* rustc emits invalid values for DW_AT_linkage_name.  Ignore these.\n+\t     See https://github.com/rust-lang/rust/issues/32925.  */\n+\t  if (cu->language == language_rust && linkage_name != NULL\n+\t      && strchr (linkage_name, '{') != NULL)\n+\t    linkage_name = NULL;\n \t  break;\n \tcase DW_AT_low_pc:\n \t  has_low_pc_attr = 1;"
    }
  ]
}