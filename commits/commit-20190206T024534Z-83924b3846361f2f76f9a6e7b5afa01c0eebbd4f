{
  "sha": "83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODM5MjRiMzg0NjM2MWYyZjc2ZjlhNmU3YjVhZmEwMWMwZWViYmQ0Zg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-02-06T02:45:23Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-02-06T02:45:34Z"
    },
    "message": "x86-64: Restore PIC check for PCREL reloc against protected symbol\n\ncommit bd7ab16b4537788ad53521c45469a1bdae84ad4a\nAuthor: H.J. Lu <hjl.tools@gmail.com>\nDate:   Tue Feb 13 07:34:22 2018 -0800\n\n    x86-64: Generate branch with PLT32 relocation\n\nremoved check R_X86_64_PC32 relocation against protected symbols in\nshared objects.  Since elf_x86_64_check_relocs is called after we\nhave seen all input files, we can check for PC-relative relocations in\nelf_x86_64_check_relocs.  We should not allow PC-relative relocations\nagainst protected symbols since address of protected function and\nlocation of protected data may not be in the shared object.\n\nbfd/\n\n\tPR ld/24151\n\t* elf64-x86-64.c (elf_x86_64_need_pic): Check\n\tSYMBOL_DEFINED_NON_SHARED_P instead of def_regular.\n\t(elf_x86_64_relocate_section): Move PIC check for PC-relative\n\trelocations to ...\n\t(elf_x86_64_check_relocs): Here.\n\t(elf_x86_64_finish_dynamic_symbol): Use SYMBOL_DEFINED_NON_SHARED_P\n\tto check if a symbol is defined in a non-shared object.\n\t* elfxx-x86.h (SYMBOL_DEFINED_NON_SHARED_P): New.\n\nld/\n\n\tPR ld/24151\n\t* testsuite/ld-x86-64/pr24151a-x32.d: New file.\n\t* testsuite/ld-x86-64/pr24151a.d: Likewise.\n\t* testsuite/ld-x86-64/pr24151a.s: Likewise.\n\t* testsuite/ld-x86-64/x86-64.exp: Run pr24151a and pr24151a-x32.",
    "tree": {
      "sha": "46f38366ea637c07bb5e61b3afdc8dc83f8458be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/46f38366ea637c07bb5e61b3afdc8dc83f8458be"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4e9ac437aaebb55624b54fc3d1cfb52acfe320dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e9ac437aaebb55624b54fc3d1cfb52acfe320dd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4e9ac437aaebb55624b54fc3d1cfb52acfe320dd"
    }
  ],
  "stats": {
    "total": 178,
    "additions": 124,
    "deletions": 54
  },
  "files": [
    {
      "sha": "22eab1effb616efe892a223a706c621123bd74af",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -1,3 +1,15 @@\n+2019-02-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/24151\n+\t* elf64-x86-64.c (elf_x86_64_need_pic): Check\n+\tSYMBOL_DEFINED_NON_SHARED_P instead of def_regular.\n+\t(elf_x86_64_relocate_section): Move PIC check for PC-relative\n+\trelocations to ...\n+\t(elf_x86_64_check_relocs): Here.\n+\t(elf_x86_64_finish_dynamic_symbol): Use SYMBOL_DEFINED_NON_SHARED_P\n+\tto check if a symbol is defined in a non-shared object.\n+\t* elfxx-x86.h (SYMBOL_DEFINED_NON_SHARED_P): New.\n+\n 2019-01-21  Sergio Durigan Junior  <sergiodj@redhat.com>\n \n \t* elf32-arm.c (elf32_arm_final_link_relocate): Use 'llabs' instead"
    },
    {
      "sha": "6a4b366fddacae313e73e77e5eed0596d51d2a98",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 79,
      "deletions": 54,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -1426,7 +1426,7 @@ elf_x86_64_need_pic (struct bfd_link_info *info,\n \t  break;\n \t}\n \n-      if (!h->def_regular && !h->def_dynamic)\n+      if (!SYMBOL_DEFINED_NON_SHARED_P (h) && !h->def_dynamic)\n \tund = _(\"undefined \");\n     }\n   else\n@@ -1855,6 +1855,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       const char *name;\n       bfd_boolean size_reloc;\n       bfd_boolean converted_reloc;\n+      bfd_boolean do_check_pic;\n \n       r_symndx = htab->r_sym (rel->r_info);\n       r_type = ELF32_R_TYPE (rel->r_info);\n@@ -2130,6 +2131,13 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  size_reloc = TRUE;\n \t  goto do_size;\n \n+\tcase R_X86_64_PC8:\n+\tcase R_X86_64_PC16:\n+\tcase R_X86_64_PC32:\n+\tcase R_X86_64_PC32_BND:\n+\t  do_check_pic = TRUE;\n+\t  goto check_pic;\n+\n \tcase R_X86_64_32:\n \t  if (!ABI_64_P (abfd))\n \t    goto pointer;\n@@ -2153,13 +2161,11 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t\t\t\t&x86_64_elf_howto_table[r_type]);\n \t  /* Fall through.  */\n \n-\tcase R_X86_64_PC8:\n-\tcase R_X86_64_PC16:\n-\tcase R_X86_64_PC32:\n-\tcase R_X86_64_PC32_BND:\n \tcase R_X86_64_PC64:\n \tcase R_X86_64_64:\n pointer:\n+\t  do_check_pic = FALSE;\n+check_pic:\n \t  if (eh != NULL && (sec->flags & SEC_CODE) != 0)\n \t    eh->zero_undefweak |= 0x2;\n \t  /* We are called after all symbols have been resolved.  Only\n@@ -2223,6 +2229,67 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t}\n \t    }\n \n+\t  if (do_check_pic)\n+\t    {\n+\t      /* Don't complain about -fPIC if the symbol is undefined\n+\t         when building executable unless it is unresolved weak\n+\t\t symbol, references a dynamic definition in PIE or\n+\t\t -z nocopyreloc is used.  */\n+\t      bfd_boolean no_copyreloc_p\n+\t\t= (info->nocopyreloc\n+\t\t   || (h != NULL\n+\t\t       && eh->def_protected\n+\t\t       && elf_has_no_copy_on_protected (h->root.u.def.section->owner)));\n+\t      if ((sec->flags & SEC_ALLOC) != 0\n+\t\t  && (sec->flags & SEC_READONLY) != 0\n+\t\t  && h != NULL\n+\t\t  && ((bfd_link_executable (info)\n+\t\t       && ((h->root.type == bfd_link_hash_undefweak\n+\t\t\t    && (eh == NULL\n+\t\t\t\t|| !UNDEFINED_WEAK_RESOLVED_TO_ZERO (info,\n+\t\t\t\t\t\t\t\t     eh)))\n+\t\t\t   || (bfd_link_pie (info)\n+\t\t\t       && !SYMBOL_DEFINED_NON_SHARED_P (h)\n+\t\t\t       && h->def_dynamic)\n+\t\t\t   || (no_copyreloc_p\n+\t\t\t       && h->def_dynamic\n+\t\t\t       && !(h->root.u.def.section->flags & SEC_CODE))))\n+\t\t      || bfd_link_dll (info)))\n+\t\t{\n+\t\t  bfd_boolean fail = FALSE;\n+\t\t  if (SYMBOL_REFERENCES_LOCAL_P (info, h))\n+\t\t    {\n+\t\t      /* Symbol is referenced locally.  Make sure it is\n+\t\t\t defined locally.  */\n+\t\t      fail = !SYMBOL_DEFINED_NON_SHARED_P (h);\n+\t\t    }\n+\t\t  else if (bfd_link_pie (info))\n+\t\t    {\n+\t\t      /* We can only use PC-relative relocations in PIE\n+\t\t\t from non-code sections.  */\n+\t\t      if (h->type == STT_FUNC\n+\t\t\t  && (sec->flags & SEC_CODE) != 0)\n+\t\t\tfail = TRUE;\n+\t\t    }\n+\t\t  else if (no_copyreloc_p || bfd_link_dll (info))\n+\t\t    {\n+\t\t      /* Symbol doesn't need copy reloc and isn't\n+\t\t\t referenced locally.  Don't allow PC-relative\n+\t\t\t relocations against default and protected\n+\t\t\t symbols since address of protected function\n+\t\t\t and location of protected data may not be in\n+\t\t\t the shared object.   */\n+\t\t      fail = (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n+\t\t\t      || ELF_ST_VISIBILITY (h->other) == STV_PROTECTED);\n+\t\t    }\n+\n+\t\t  if (fail)\n+\t\t    return elf_x86_64_need_pic (info, abfd, sec, h,\n+\t\t\t\t\t\tsymtab_hdr, isym,\n+\t\t\t\t\t\t&x86_64_elf_howto_table[r_type]);\n+\t\t}\n+\t    }\n+\n \t  size_reloc = FALSE;\n do_size:\n \t  if (NEED_DYNAMIC_RELOCATION_P (info, TRUE, h, sec, r_type,\n@@ -3065,56 +3132,14 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \tcase R_X86_64_PC16:\n \tcase R_X86_64_PC32:\n \tcase R_X86_64_PC32_BND:\n-\t  /* Don't complain about -fPIC if the symbol is undefined when\n-\t     building executable unless it is unresolved weak symbol,\n-\t     references a dynamic definition in PIE or -z nocopyreloc\n-\t     is used.  */\n-\t  if ((input_section->flags & SEC_ALLOC) != 0\n-\t      && (input_section->flags & SEC_READONLY) != 0\n-\t      && h != NULL\n-\t      && ((bfd_link_executable (info)\n-\t\t   && ((h->root.type == bfd_link_hash_undefweak\n-\t\t\t&& !resolved_to_zero)\n-\t\t       || (bfd_link_pie (info)\n-\t\t\t   && !h->def_regular\n-\t\t\t   && h->def_dynamic)\n-\t\t       || ((info->nocopyreloc\n-\t\t\t    || (eh->def_protected\n-\t\t\t\t&& elf_has_no_copy_on_protected (h->root.u.def.section->owner)))\n-\t\t\t   && h->def_dynamic\n-\t\t\t   && !(h->root.u.def.section->flags & SEC_CODE))))\n-\t\t  || bfd_link_dll (info)))\n-\t    {\n-\t      bfd_boolean fail = FALSE;\n-\t      if (SYMBOL_REFERENCES_LOCAL_P (info, h))\n-\t\t{\n-\t\t  /* Symbol is referenced locally.  Make sure it is\n-\t\t     defined locally.  */\n-\t\t  fail = !(h->def_regular || ELF_COMMON_DEF_P (h));\n-\t\t}\n-\t      else if (!(bfd_link_pie (info)\n-\t\t\t && (h->needs_copy || eh->needs_copy)))\n-\t\t{\n-\t\t  /* Symbol doesn't need copy reloc and isn't referenced\n-\t\t     locally.  Address of protected function may not be\n-\t\t     reachable at run-time.  */\n-\t\t  fail = (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n-\t\t\t  || (ELF_ST_VISIBILITY (h->other) == STV_PROTECTED\n-\t\t\t      && h->type == STT_FUNC));\n-\t\t}\n-\n-\t      if (fail)\n-\t\treturn elf_x86_64_need_pic (info, input_bfd, input_section,\n-\t\t\t\t\t    h, NULL, NULL, howto);\n-\t    }\n \t  /* Since x86-64 has PC-relative PLT, we can use PLT in PIE\n \t     as function address.  */\n-\t  else if (h != NULL\n-\t\t   && (input_section->flags & SEC_CODE) == 0\n-\t\t   && bfd_link_pie (info)\n-\t\t   && h->type == STT_FUNC\n-\t\t   && !h->def_regular\n-\t\t   && h->def_dynamic)\n+\t  if (h != NULL\n+\t      && (input_section->flags & SEC_CODE) == 0\n+\t      && bfd_link_pie (info)\n+\t      && h->type == STT_FUNC\n+\t      && !h->def_regular\n+\t      && h->def_dynamic)\n \t    goto use_plt;\n \t  /* Fall through.  */\n \n@@ -4271,7 +4296,7 @@ elf_x86_64_finish_dynamic_symbol (bfd *output_bfd,\n       else if (bfd_link_pic (info)\n \t       && SYMBOL_REFERENCES_LOCAL_P (info, h))\n \t{\n-\t  if (!(h->def_regular || ELF_COMMON_DEF_P (h)))\n+\t  if (!SYMBOL_DEFINED_NON_SHARED_P (h))\n \t    return FALSE;\n \t  BFD_ASSERT((h->got.offset & 1) != 0);\n \t  rela.r_info = htab->r_info (0, R_X86_64_RELATIVE);"
    },
    {
      "sha": "28d540b83b3fb9dbb6a6980b5c67cdd7998b4e00",
      "filename": "bfd/elfxx-x86.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/bfd/elfxx-x86.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/bfd/elfxx-x86.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.h?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -161,6 +161,13 @@\n        || (ELF_ST_VISIBILITY ((H)->other) \\\n \t   && (H)->root.type == bfd_link_hash_undefweak))\n \n+/* TRUE if this symbol isn't defined by a shared object.  */\n+#define SYMBOL_DEFINED_NON_SHARED_P(H) \\\n+  ((H)->def_regular \\\n+   || (H)->root.linker_def \\\n+   || (H)->root.ldscript_def \\\n+   || ELF_COMMON_DEF_P (H))\n+\n /* TRUE if relative relocation should be generated.  GOT reference to\n    global symbol in PIC will lead to dynamic symbol.  It becomes a\n    problem when \"time\" or \"times\" is defined as a variable in an"
    },
    {
      "sha": "262f7bf535882b116f0dc47cd92ea239c73924db",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -1,3 +1,11 @@\n+2019-02-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/24151\n+\t* testsuite/ld-x86-64/pr24151a-x32.d: New file.\n+\t* testsuite/ld-x86-64/pr24151a.d: Likewise.\n+\t* testsuite/ld-x86-64/pr24151a.s: Likewise.\n+\t* testsuite/ld-x86-64/x86-64.exp: Run pr24151a and pr24151a-x32.\n+\n 2019-01-31  Alan Modra  <amodra@gmail.com>\n \n \t* NEWS: Mention -t change."
    },
    {
      "sha": "130611ddf4933dc08a3492e67ce317761575ff6f",
      "filename": "ld/testsuite/ld-x86-64/pr24151a-x32.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/pr24151a-x32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/pr24151a-x32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24151a-x32.d?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -0,0 +1,4 @@\n+#source: pr24151a.s\n+#as: --x32\n+#ld: -shared -melf32_x86_64\n+#error: .*relocation R_X86_64_PC32 against protected symbol `foo' can not be used when making a shared object"
    },
    {
      "sha": "783b85a1a6fcd3a5fad812709ba00c77973f4890",
      "filename": "ld/testsuite/ld-x86-64/pr24151a.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/pr24151a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/pr24151a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24151a.d?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -0,0 +1,3 @@\n+#as: --64\n+#ld: -shared -melf_x86_64\n+#error: .*relocation R_X86_64_PC32 against protected symbol `foo' can not be used when making a shared object"
    },
    {
      "sha": "e4ec7c8ce4b2c7a9f17884996da1496f9ab7acc3",
      "filename": "ld/testsuite/ld-x86-64/pr24151a.s",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/pr24151a.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/pr24151a.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24151a.s?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -0,0 +1,9 @@\n+\t.text\n+\t.globl\tbar\n+\t.type\tbar,@function\n+bar:\n+\tmovl\t$30, foo(%rip)\n+\t.size\tbar, .-bar\n+\t.protected foo\n+\t.type\tfoo,@object\n+\t.comm\tfoo,4,4"
    },
    {
      "sha": "5eb556515faf395cc7b4369d274a73b9f458ccd8",
      "filename": "ld/testsuite/ld-x86-64/x86-64.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/x86-64.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83924b3846361f2f76f9a6e7b5afa01c0eebbd4f/ld/testsuite/ld-x86-64/x86-64.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/x86-64.exp?ref=83924b3846361f2f76f9a6e7b5afa01c0eebbd4f",
      "patch": "@@ -424,6 +424,8 @@ run_dump_test \"pr23486d-x32\"\n run_dump_test \"pr23854\"\n run_dump_test \"pr23930\"\n run_dump_test \"pr23930-x32\"\n+run_dump_test \"pr24151a\"\n+run_dump_test \"pr24151a-x32\"\n \n if { ![istarget \"x86_64-*-linux*\"] && ![istarget \"x86_64-*-nacl*\"]} {\n     return"
    }
  ]
}