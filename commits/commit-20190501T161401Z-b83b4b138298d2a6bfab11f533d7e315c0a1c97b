{
  "sha": "b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjgzYjRiMTM4Mjk4ZDJhNmJmYWIxMWY1MzNkN2UzMTVjMGExYzk3Yg==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-01T16:14:01Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-01T16:14:01Z"
    },
    "message": "[BINUTILS, AArch64] Enable Transactional Memory Extension\n\nThis patch enables the new Transactional Memory Extension added recently\nas part of Arm's new architecture technologies.\n\nWe introduce a new optional extension \"tme\" to enable this. The following\ninstructions are part of the extension:\n   * tstart <Xt>\n   * ttest <Xt>\n   * tcommit\n   * tcancel #<imm>\nThe ISA for the above can be found here:\nhttps://developer.arm.com/docs/ddi0602/latest/base-instructions-alphabetic-order\n\n*** gas/ChangeLog ***\n\n2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-aarch64.c (parse_operands): Add case for\n\tAARCH64_OPND_TME_UIMM16.\n\t(aarch64_features): Add \"tme\".\n\t* doc/c-aarch64.texi: Document the same.\n\t* testsuite/gas/aarch64/tme-invalid.d: New test.\n\t* testsuite/gas/aarch64/tme-invalid.l: New test.\n\t* testsuite/gas/aarch64/tme-invalid.s: New test.\n\t* testsuite/gas/aarch64/tme.d: New test.\n\t* testsuite/gas/aarch64/tme.s: New test.\n\n*** include/ChangeLog ***\n\n2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n\n\t* opcode/aarch64.h (AARCH64_FEATURE_TME): New.\n\t(enum aarch64_opnd): Add AARCH64_OPND_TME_UIMM16.\n\n*** opcodes/ChangeLog ***\n\n2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.\n\t* aarch64-opc.c (operand_general_constraint_met_p): Add case for\n\tAARCH64_OPND_TME_UIMM16.\n\t(aarch64_print_operand): Likewise.\n\t* aarch64-tbl.h (QL_IMM_NIL): New.\n\t(TME): New.\n\t(_TME_INSN): New.\n\t(struct aarch64_opcode): Add tstart, tcommit, ttest and tcancel.",
    "tree": {
      "sha": "78aa7ea03472fb0ee62aec2e1bcb7b5297ff42d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/78aa7ea03472fb0ee62aec2e1bcb7b5297ff42d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2ecde2b63245d4794a4967f318772e7166feb310",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ecde2b63245d4794a4967f318772e7166feb310",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2ecde2b63245d4794a4967f318772e7166feb310"
    }
  ],
  "stats": {
    "total": 2342,
    "additions": 1255,
    "deletions": 1087
  },
  "files": [
    {
      "sha": "2dd2cf38a46d7411c7d147f6f49771afd76a2de2",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -1,3 +1,15 @@\n+2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_operands): Add case for\n+\tAARCH64_OPND_TME_UIMM16.\n+\t(aarch64_features): Add \"tme\".\n+\t* doc/c-aarch64.texi: Document the same.\n+\t* testsuite/gas/aarch64/tme-invalid.d: New test.\n+\t* testsuite/gas/aarch64/tme-invalid.l: New test.\n+\t* testsuite/gas/aarch64/tme-invalid.s: New test.\n+\t* testsuite/gas/aarch64/tme.d: New test.\n+\t* testsuite/gas/aarch64/tme.s: New test.\n+\n 2019-04-29  John Darrington <john@darrington.wattle.id.au>\n \n         * testsuite/gas/s12z/truncated.d: New file."
    },
    {
      "sha": "7b5f1b1db9c14a4f23c602ec70ce4eb2f53968c6",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -5752,6 +5752,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_CCMP_IMM:\n \tcase AARCH64_OPND_SIMM5:\n \tcase AARCH64_OPND_FBITS:\n+\tcase AARCH64_OPND_TME_UIMM16:\n \tcase AARCH64_OPND_UIMM4:\n \tcase AARCH64_OPND_UIMM4_ADDG:\n \tcase AARCH64_OPND_UIMM10:\n@@ -8845,6 +8846,8 @@ static const struct aarch64_option_cpu_value_table aarch64_features[] = {\n \t\t\tAARCH64_FEATURE (AARCH64_FEATURE_F16\n \t\t\t\t\t | AARCH64_FEATURE_SIMD\n \t\t\t\t\t | AARCH64_FEATURE_COMPNUM, 0)},\n+  {\"tme\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_TME, 0),\n+\t\t\tAARCH64_ARCH_NONE},\n   {\"compnum\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_COMPNUM, 0),\n \t\t\tAARCH64_FEATURE (AARCH64_FEATURE_F16\n \t\t\t\t\t | AARCH64_FEATURE_SIMD, 0)},"
    },
    {
      "sha": "3614deb26be9455abbb44e1cf115354ab2908bf2",
      "filename": "gas/doc/c-aarch64.texi",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/doc/c-aarch64.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/doc/c-aarch64.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-aarch64.texi?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -194,6 +194,8 @@ automatically cause those extensions to be disabled.\n  @tab Enable Speculative Store Bypassing Safe state read and write.\n @item @code{memtag} @tab ARMv8.5-A @tab No\n  @tab Enable ARMv8.5-A Memory Tagging Extensions.\n+@item @code{tme} @tab ARMv8-A @tab No\n+ @tab Enable Transactional Memory Extensions.\n @end multitable\n \n @node AArch64 Syntax"
    },
    {
      "sha": "6ff73e9086195920f200e55390a88c0b6aa0fa99",
      "filename": "gas/testsuite/gas/aarch64/tme-invalid.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme-invalid.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme-invalid.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/tme-invalid.d?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid TME instructions\n+#as: -march=armv8-a+tme\n+#source: tme-invalid.s\n+#error_output: tme-invalid.l"
    },
    {
      "sha": "22f60c5b11767476278d85b26f60a6c11481b484",
      "filename": "gas/testsuite/gas/aarch64/tme-invalid.l",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme-invalid.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme-invalid.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/tme-invalid.l?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -0,0 +1,26 @@\n+[^:]*: Assembler messages:\n+.*: Error: immediate value out of range 0 to 65535 at operand 1 -- `tcancel -1'\n+.*: Error: immediate value out of range 0 to 65535 at operand 1 -- `tcancel 65536'\n+.*: Error: immediate value out of range 0 to 65535 at operand 1 -- `tcancel 0x10000'\n+.*: Error: constant expression required at operand 1 -- `tcancel 1b'\n+.*: Error: immediate operand required at operand 1 -- `tcancel w1'\n+.*: Error: immediate operand required at operand 1 -- `tcancel x1'\n+.*: Error: immediate operand required at operand 1 -- `tcancel w23'\n+.*: Error: immediate operand required at operand 1 -- `tcancel x23'\n+.*: Error: immediate operand required at operand 1 -- `tcancel wzr'\n+.*: Error: immediate operand required at operand 1 -- `tcancel xzr'\n+.*: Error: constant expression required at operand 1 -- `tcancel wsp'\n+.*: Error: constant expression required at operand 1 -- `tcancel xsp'\n+.*: Error: constant expression required at operand 1 -- `tcancel sp'\n+.*: Error: operand 1 must be an integer register -- `tstart'\n+.*: Error: operand mismatch -- `tstart w1'\n+.*: Info:    did you mean this\\?\n+.*: Info:    \ttstart x1\n+.*: Error: operand mismatch -- `tstart w17'\n+.*: Info:    did you mean this\\?\n+.*: Info:    \ttstart x17\n+.*: Error: operand mismatch -- `tstart wzr'\n+.*: Info:    did you mean this\\?\n+.*: Info:    \ttstart xzr\n+.*: Error: operand 1 must be an integer register -- `tstart wsp'\n+.*: Error: operand 1 must be an integer register -- `tstart xsp'"
    },
    {
      "sha": "13d8e3b425ab80936b45d52038d0948f505f66fd",
      "filename": "gas/testsuite/gas/aarch64/tme-invalid.s",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme-invalid.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme-invalid.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/tme-invalid.s?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -0,0 +1,28 @@\n+// Instructions in this file are invalid.\n+// Other files provide more extensive testing of valid instructions;\n+\n+# tcancel only accept 16bit unsigned constant immediate.\n+1:\n+\ttcancel\t-1\n+\ttcancel\t65536\n+\ttcancel\t0x10000\n+\ttcancel\t1b\n+\n+# tcancel doesn't accept any register.\n+\ttcancel w1\n+\ttcancel x1\n+\ttcancel w23\n+\ttcancel x23\n+\ttcancel wzr\n+\ttcancel xzr\n+\ttcancel wsp\n+\ttcancel xsp\n+\ttcancel sp\n+\n+# tstart must has one X register operand.\n+\ttstart\n+\ttstart w1\n+\ttstart w17\n+\ttstart wzr\n+\ttstart wsp\n+\ttstart xsp"
    },
    {
      "sha": "24d34ea956125f96e3b892bb3ef292554137db3e",
      "filename": "gas/testsuite/gas/aarch64/tme.d",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/tme.d?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -0,0 +1,22 @@\n+#as: -march=armv8-a+tme\n+#objdump: -dr\n+\n+.* file format .*\n+\n+Disassembly of section .*:\n+\n+.* <.*>:\n+.*:\td5233060 \ttstart\tx0\n+.*:\td5233060 \ttstart\tx0\n+.*:\td523306f \ttstart\tx15\n+.*:\td523306f \ttstart\tx15\n+.*:\td523307e \ttstart\tx30\n+.*:\td523307e \ttstart\tx30\n+.*:\td503307f \ttcommit\n+.*:\td503307f \ttcommit\n+.*:\td5233160 \tttest\tx0\n+.*:\td523317e \tttest\tx30\n+.*:\td4600000 \ttcancel\t#0\n+.*:\td47fffe0 \ttcancel\t#65535\n+.*:\td47fffe0 \ttcancel\t#65535\n+.*:\td4600140 \ttcancel\t#10"
    },
    {
      "sha": "45c861ed854b16fea61ef3955002820a3ca43dfe",
      "filename": "gas/testsuite/gas/aarch64/tme.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/gas/testsuite/gas/aarch64/tme.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/tme.s?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -0,0 +1,14 @@\n+\ttstart\tx0\n+\tTSTART\tX0\n+\ttstart\tx15\n+\tTSTART\tX15\n+\ttstart\tx30\n+\tTSTART\tX30\n+\ttcommit\n+\tTCOMMIT\n+\tttest\tx0\n+\tTTEST\tX30\n+\ttcancel\t0\n+\tTCANCEL\t65535\n+\ttcancel\t0xffff\n+\tTCANCEL\t0XA"
    },
    {
      "sha": "1aab82aca4ccc32337e11ebf7175bd1fa3701880",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -1,3 +1,8 @@\n+2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* opcode/aarch64.h (AARCH64_FEATURE_TME): New.\n+\t(enum aarch64_opnd): Add AARCH64_OPND_TME_UIMM16.\n+\n 2019-04-26  Andrew Bennett  <andrew.bennett@imgtec.com>\n \t    Faraz Shahbazker  <fshahbazker@wavecomp.com>\n "
    },
    {
      "sha": "c456f673c0789ef811d3ed43729d3a9278bad650",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -86,7 +86,8 @@ typedef uint32_t aarch64_insn;\n #define AARCH64_FEATURE_SSBS\t\t0x800000000000ULL\n /* Memory Tagging Extension.  */\n #define AARCH64_FEATURE_MEMTAG\t\t0x1000000000000ULL\n-\n+/* Transactional Memory Extension.  */\n+#define AARCH64_FEATURE_TME\t\t0x2000000000000ULL\n \n /* Architectures are the sum of the base and extensions.  */\n #define AARCH64_ARCH_V8\t\tAARCH64_FEATURE (AARCH64_FEATURE_V8, \\\n@@ -409,6 +410,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_ZnxN,\t/* SVE vector register list in Zn.  */\n   AARCH64_OPND_SVE_Zt,\t\t/* SVE vector register in Zt.  */\n   AARCH64_OPND_SVE_ZtxN,\t/* SVE vector register list in Zt.  */\n+  AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n };\n "
    },
    {
      "sha": "2328f18f5e2acbc3a5faca6df341c80838aea94e",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\t* aarch64-opc.c (operand_general_constraint_met_p): Add case for\n+\tAARCH64_OPND_TME_UIMM16.\n+\t(aarch64_print_operand): Likewise.\n+\t* aarch64-tbl.h (QL_IMM_NIL): New.\n+\t(TME): New.\n+\t(_TME_INSN): New.\n+\t(struct aarch64_opcode): Add tstart, tcommit, ttest and tcancel.\n+\n 2019-04-29  John Darrington  <john@darrington.wattle.id.au>\n \n         * s12z-opc.c (shift_discrim): Return OP_INVALID when reading fails."
    },
    {
      "sha": "c7f8e8b52a190c0fdbc767c985275e5a2b1e77f4",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 138,
      "deletions": 137,
      "changes": 275,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -426,165 +426,165 @@ aarch64_find_real_opcode (const aarch64_opcode *opcode)\n     case 1183:\t/* movz */\n       value = 1183;\t/* --> movz.  */\n       break;\n-    case 1230:\t/* autibsp */\n-    case 1229:\t/* autibz */\n-    case 1228:\t/* autiasp */\n-    case 1227:\t/* autiaz */\n-    case 1226:\t/* pacibsp */\n-    case 1225:\t/* pacibz */\n-    case 1224:\t/* paciasp */\n-    case 1223:\t/* paciaz */\n-    case 1204:\t/* psb */\n-    case 1203:\t/* esb */\n-    case 1202:\t/* autib1716 */\n-    case 1201:\t/* autia1716 */\n-    case 1200:\t/* pacib1716 */\n-    case 1199:\t/* pacia1716 */\n-    case 1198:\t/* xpaclri */\n-    case 1197:\t/* sevl */\n-    case 1196:\t/* sev */\n-    case 1195:\t/* wfi */\n-    case 1194:\t/* wfe */\n-    case 1193:\t/* yield */\n-    case 1192:\t/* bti */\n-    case 1191:\t/* csdb */\n-    case 1190:\t/* nop */\n-    case 1189:\t/* hint */\n-      value = 1189;\t/* --> hint.  */\n-      break;\n-    case 1208:\t/* pssbb */\n-    case 1207:\t/* ssbb */\n-    case 1206:\t/* dsb */\n-      value = 1206;\t/* --> dsb.  */\n-      break;\n-    case 1219:\t/* cpp */\n-    case 1218:\t/* dvp */\n-    case 1217:\t/* cfp */\n-    case 1216:\t/* tlbi */\n-    case 1215:\t/* ic */\n-    case 1214:\t/* dc */\n-    case 1213:\t/* at */\n-    case 1212:\t/* sys */\n-      value = 1212;\t/* --> sys.  */\n-      break;\n-    case 2028:\t/* bic */\n-    case 1278:\t/* and */\n-      value = 1278;\t/* --> and.  */\n+    case 1234:\t/* autibsp */\n+    case 1233:\t/* autibz */\n+    case 1232:\t/* autiasp */\n+    case 1231:\t/* autiaz */\n+    case 1230:\t/* pacibsp */\n+    case 1229:\t/* pacibz */\n+    case 1228:\t/* paciasp */\n+    case 1227:\t/* paciaz */\n+    case 1208:\t/* psb */\n+    case 1207:\t/* esb */\n+    case 1206:\t/* autib1716 */\n+    case 1205:\t/* autia1716 */\n+    case 1204:\t/* pacib1716 */\n+    case 1203:\t/* pacia1716 */\n+    case 1202:\t/* xpaclri */\n+    case 1201:\t/* sevl */\n+    case 1200:\t/* sev */\n+    case 1199:\t/* wfi */\n+    case 1198:\t/* wfe */\n+    case 1197:\t/* yield */\n+    case 1196:\t/* bti */\n+    case 1195:\t/* csdb */\n+    case 1194:\t/* nop */\n+    case 1193:\t/* hint */\n+      value = 1193;\t/* --> hint.  */\n+      break;\n+    case 1212:\t/* pssbb */\n+    case 1211:\t/* ssbb */\n+    case 1210:\t/* dsb */\n+      value = 1210;\t/* --> dsb.  */\n+      break;\n+    case 1223:\t/* cpp */\n+    case 1222:\t/* dvp */\n+    case 1221:\t/* cfp */\n+    case 1220:\t/* tlbi */\n+    case 1219:\t/* ic */\n+    case 1218:\t/* dc */\n+    case 1217:\t/* at */\n+    case 1216:\t/* sys */\n+      value = 1216;\t/* --> sys.  */\n+      break;\n+    case 2032:\t/* bic */\n+    case 1282:\t/* and */\n+      value = 1282;\t/* --> and.  */\n+      break;\n+    case 1265:\t/* mov */\n+    case 1284:\t/* and */\n+      value = 1284;\t/* --> and.  */\n+      break;\n+    case 1269:\t/* movs */\n+    case 1285:\t/* ands */\n+      value = 1285;\t/* --> ands.  */\n+      break;\n+    case 2033:\t/* cmple */\n+    case 1320:\t/* cmpge */\n+      value = 1320;\t/* --> cmpge.  */\n+      break;\n+    case 2036:\t/* cmplt */\n+    case 1323:\t/* cmpgt */\n+      value = 1323;\t/* --> cmpgt.  */\n+      break;\n+    case 2034:\t/* cmplo */\n+    case 1325:\t/* cmphi */\n+      value = 1325;\t/* --> cmphi.  */\n+      break;\n+    case 2035:\t/* cmpls */\n+    case 1328:\t/* cmphs */\n+      value = 1328;\t/* --> cmphs.  */\n       break;\n-    case 1261:\t/* mov */\n-    case 1280:\t/* and */\n-      value = 1280;\t/* --> and.  */\n-      break;\n-    case 1265:\t/* movs */\n-    case 1281:\t/* ands */\n-      value = 1281;\t/* --> ands.  */\n+    case 1262:\t/* mov */\n+    case 1350:\t/* cpy */\n+      value = 1350;\t/* --> cpy.  */\n       break;\n-    case 2029:\t/* cmple */\n-    case 1316:\t/* cmpge */\n-      value = 1316;\t/* --> cmpge.  */\n+    case 1264:\t/* mov */\n+    case 1351:\t/* cpy */\n+      value = 1351;\t/* --> cpy.  */\n       break;\n-    case 2032:\t/* cmplt */\n-    case 1319:\t/* cmpgt */\n-      value = 1319;\t/* --> cmpgt.  */\n+    case 2043:\t/* fmov */\n+    case 1267:\t/* mov */\n+    case 1352:\t/* cpy */\n+      value = 1352;\t/* --> cpy.  */\n       break;\n-    case 2030:\t/* cmplo */\n-    case 1321:\t/* cmphi */\n-      value = 1321;\t/* --> cmphi.  */\n+    case 1257:\t/* mov */\n+    case 1364:\t/* dup */\n+      value = 1364;\t/* --> dup.  */\n       break;\n-    case 2031:\t/* cmpls */\n-    case 1324:\t/* cmphs */\n-      value = 1324;\t/* --> cmphs.  */\n+    case 1259:\t/* mov */\n+    case 1256:\t/* mov */\n+    case 1365:\t/* dup */\n+      value = 1365;\t/* --> dup.  */\n       break;\n-    case 1258:\t/* mov */\n-    case 1346:\t/* cpy */\n-      value = 1346;\t/* --> cpy.  */\n+    case 2042:\t/* fmov */\n+    case 1261:\t/* mov */\n+    case 1366:\t/* dup */\n+      value = 1366;\t/* --> dup.  */\n       break;\n     case 1260:\t/* mov */\n-    case 1347:\t/* cpy */\n-      value = 1347;\t/* --> cpy.  */\n-      break;\n-    case 2039:\t/* fmov */\n-    case 1263:\t/* mov */\n-    case 1348:\t/* cpy */\n-      value = 1348;\t/* --> cpy.  */\n-      break;\n-    case 1253:\t/* mov */\n-    case 1360:\t/* dup */\n-      value = 1360;\t/* --> dup.  */\n-      break;\n-    case 1255:\t/* mov */\n-    case 1252:\t/* mov */\n-    case 1361:\t/* dup */\n-      value = 1361;\t/* --> dup.  */\n-      break;\n-    case 2038:\t/* fmov */\n-    case 1257:\t/* mov */\n-    case 1362:\t/* dup */\n-      value = 1362;\t/* --> dup.  */\n+    case 1367:\t/* dupm */\n+      value = 1367;\t/* --> dupm.  */\n       break;\n-    case 1256:\t/* mov */\n-    case 1363:\t/* dupm */\n-      value = 1363;\t/* --> dupm.  */\n-      break;\n-    case 2033:\t/* eon */\n-    case 1365:\t/* eor */\n-      value = 1365;\t/* --> eor.  */\n+    case 2037:\t/* eon */\n+    case 1369:\t/* eor */\n+      value = 1369;\t/* --> eor.  */\n       break;\n-    case 1266:\t/* not */\n-    case 1367:\t/* eor */\n-      value = 1367;\t/* --> eor.  */\n+    case 1270:\t/* not */\n+    case 1371:\t/* eor */\n+      value = 1371;\t/* --> eor.  */\n       break;\n-    case 1267:\t/* nots */\n-    case 1368:\t/* eors */\n-      value = 1368;\t/* --> eors.  */\n+    case 1271:\t/* nots */\n+    case 1372:\t/* eors */\n+      value = 1372;\t/* --> eors.  */\n       break;\n-    case 2034:\t/* facle */\n-    case 1373:\t/* facge */\n-      value = 1373;\t/* --> facge.  */\n+    case 2038:\t/* facle */\n+    case 1377:\t/* facge */\n+      value = 1377;\t/* --> facge.  */\n       break;\n-    case 2035:\t/* faclt */\n-    case 1374:\t/* facgt */\n-      value = 1374;\t/* --> facgt.  */\n+    case 2039:\t/* faclt */\n+    case 1378:\t/* facgt */\n+      value = 1378;\t/* --> facgt.  */\n       break;\n-    case 2036:\t/* fcmle */\n-    case 1387:\t/* fcmge */\n-      value = 1387;\t/* --> fcmge.  */\n+    case 2040:\t/* fcmle */\n+    case 1391:\t/* fcmge */\n+      value = 1391;\t/* --> fcmge.  */\n       break;\n-    case 2037:\t/* fcmlt */\n-    case 1389:\t/* fcmgt */\n-      value = 1389;\t/* --> fcmgt.  */\n+    case 2041:\t/* fcmlt */\n+    case 1393:\t/* fcmgt */\n+      value = 1393;\t/* --> fcmgt.  */\n       break;\n-    case 1250:\t/* fmov */\n-    case 1395:\t/* fcpy */\n-      value = 1395;\t/* --> fcpy.  */\n+    case 1254:\t/* fmov */\n+    case 1399:\t/* fcpy */\n+      value = 1399;\t/* --> fcpy.  */\n       break;\n-    case 1249:\t/* fmov */\n-    case 1418:\t/* fdup */\n-      value = 1418;\t/* --> fdup.  */\n+    case 1253:\t/* fmov */\n+    case 1422:\t/* fdup */\n+      value = 1422;\t/* --> fdup.  */\n       break;\n-    case 1251:\t/* mov */\n-    case 1749:\t/* orr */\n-      value = 1749;\t/* --> orr.  */\n+    case 1255:\t/* mov */\n+    case 1753:\t/* orr */\n+      value = 1753;\t/* --> orr.  */\n       break;\n-    case 2040:\t/* orn */\n-    case 1750:\t/* orr */\n-      value = 1750;\t/* --> orr.  */\n+    case 2044:\t/* orn */\n+    case 1754:\t/* orr */\n+      value = 1754;\t/* --> orr.  */\n       break;\n-    case 1254:\t/* mov */\n-    case 1752:\t/* orr */\n-      value = 1752;\t/* --> orr.  */\n+    case 1258:\t/* mov */\n+    case 1756:\t/* orr */\n+      value = 1756;\t/* --> orr.  */\n       break;\n-    case 1264:\t/* movs */\n-    case 1753:\t/* orrs */\n-      value = 1753;\t/* --> orrs.  */\n+    case 1268:\t/* movs */\n+    case 1757:\t/* orrs */\n+      value = 1757;\t/* --> orrs.  */\n       break;\n-    case 1259:\t/* mov */\n-    case 1815:\t/* sel */\n-      value = 1815;\t/* --> sel.  */\n+    case 1263:\t/* mov */\n+    case 1819:\t/* sel */\n+      value = 1819;\t/* --> sel.  */\n       break;\n-    case 1262:\t/* mov */\n-    case 1816:\t/* sel */\n-      value = 1816;\t/* --> sel.  */\n+    case 1266:\t/* mov */\n+    case 1820:\t/* sel */\n+      value = 1820;\t/* --> sel.  */\n       break;\n     default: return NULL;\n     }\n@@ -660,7 +660,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 199:\n+    case 200:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -704,6 +704,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 179:\n     case 180:\n     case 181:\n+    case 199:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:"
    },
    {
      "sha": "ee7dabcb4c92af59f1583415aab7cef67952f16f",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 955,
      "deletions": 940,
      "changes": 1895,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b"
    },
    {
      "sha": "96eedd72c7514203449805825e0293b41221f607",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -223,6 +223,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_ZnxN\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zn}, \"a list of SVE vector registers\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_Zt\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zt}, \"an SVE vector register\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_ZtxN\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zt}, \"a list of SVE vector registers\"},\n+  {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},\n   {AARCH64_OPND_CLASS_NIL, \"\", 0, {0}, \"DUMMY\"},\n };\n@@ -301,17 +302,17 @@ static const unsigned op_enum_table [] =\n   391,\n   413,\n   415,\n-  1254,\n-  1259,\n-  1252,\n-  1251,\n+  1258,\n+  1263,\n+  1256,\n   1255,\n-  1262,\n-  1264,\n-  1265,\n-  1261,\n-  1267,\n+  1259,\n   1266,\n+  1268,\n+  1269,\n+  1265,\n+  1271,\n+  1270,\n   131,\n };\n "
    },
    {
      "sha": "5be0d0f14181f063d69ff0b9aac8bfc0ca74a434",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -2125,6 +2125,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \tcase AARCH64_OPND_NZCV:\n \tcase AARCH64_OPND_CCMP_IMM:\n \tcase AARCH64_OPND_EXCEPTION:\n+\tcase AARCH64_OPND_TME_UIMM16:\n \tcase AARCH64_OPND_UIMM4:\n \tcase AARCH64_OPND_UIMM4_ADDG:\n \tcase AARCH64_OPND_UIMM7:\n@@ -3326,6 +3327,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_IMMR:\n     case AARCH64_OPND_IMMS:\n     case AARCH64_OPND_FBITS:\n+    case AARCH64_OPND_TME_UIMM16:\n     case AARCH64_OPND_SIMM5:\n     case AARCH64_OPND_SVE_SHLIMM_PRED:\n     case AARCH64_OPND_SVE_SHLIMM_UNPRED:"
    },
    {
      "sha": "9537ec51029b07502f44fc904df0e0f004fd9cac",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b83b4b138298d2a6bfab11f533d7e315c0a1c97b/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=b83b4b138298d2a6bfab11f533d7e315c0a1c97b",
      "patch": "@@ -74,6 +74,12 @@\n   QLF2(X,NIL),\t\t\t\\\n }\n \n+/* e.g. TCANCEL #<imm>.  */\n+#define QL_IMM_NIL\t\t\\\n+{\t\t\t\t\\\n+  QLF1(NIL),\t\t\t\\\n+}\n+\n /* e.g. B.<cond> <label>.  */\n #define QL_PCREL_NIL\t\t\\\n {\t\t\t\t\\\n@@ -2198,6 +2204,8 @@ static const aarch64_feature_set aarch64_feature_bti =\n   AARCH64_FEATURE (AARCH64_FEATURE_BTI, 0);\n static const aarch64_feature_set aarch64_feature_memtag =\n   AARCH64_FEATURE (AARCH64_FEATURE_V8_5 | AARCH64_FEATURE_MEMTAG, 0);\n+static const aarch64_feature_set aarch64_feature_tme =\n+  AARCH64_FEATURE (AARCH64_FEATURE_TME, 0);\n \n \n #define CORE\t\t&aarch64_feature_v8\n@@ -2233,6 +2241,7 @@ static const aarch64_feature_set aarch64_feature_memtag =\n #define PREDRES\t\t&aarch64_feature_predres\n #define BTI\t\t&aarch64_feature_bti\n #define MEMTAG\t\t&aarch64_feature_memtag\n+#define TME\t\t&aarch64_feature_tme\n \n #define CORE_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, OP, CORE, OPS, QUALS, FLAGS, 0, 0, NULL }\n@@ -2300,6 +2309,8 @@ static const aarch64_feature_set aarch64_feature_memtag =\n   { NAME, OPCODE, MASK, CLASS, 0, BTI, OPS, QUALS, FLAGS, 0, 0, NULL }\n #define MEMTAG_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, 0, MEMTAG, OPS, QUALS, FLAGS, 0, 0, NULL }\n+#define _TME_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS) \\\n+  { NAME, OPCODE, MASK, CLASS, OP, TME, OPS, QUALS, FLAGS, 0, 0, NULL }\n \n struct aarch64_opcode aarch64_opcode_table[] =\n {\n@@ -3564,6 +3575,11 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   /* PC-rel. addressing.  */\n   CORE_INSN (\"adr\",  0x10000000, 0x9f000000, pcreladdr, 0, OP2 (Rd, ADDR_PCREL21), QL_ADRP, 0),\n   CORE_INSN (\"adrp\", 0x90000000, 0x9f000000, pcreladdr, 0, OP2 (Rd, ADDR_ADRP), QL_ADRP, 0),\n+  /* TME Instructions.  */\n+  _TME_INSN (\"tstart\", 0xd5233060, 0xffffffe0, 0, 0, OP1 (Rd), QL_I1X, 0),\n+  _TME_INSN (\"tcommit\", 0xd503307f, 0xffffffff, 0, 0, OP0 (), {}, 0),\n+  _TME_INSN (\"ttest\", 0xd5233160, 0xffffffe0, 0, 0, OP1 (Rd), QL_I1X, 0),\n+  _TME_INSN (\"tcancel\", 0xd4600000, 0xffe0001f, 0, 0, OP1 (TME_UIMM16), QL_IMM_NIL, 0),\n   /* System.  */\n   CORE_INSN (\"msr\", 0xd500401f, 0xfff8f01f, ic_system, 0, OP2 (PSTATEFIELD, UIMM4), {}, F_SYS_WRITE),\n   CORE_INSN (\"hint\",0xd503201f, 0xfffff01f, ic_system, 0, OP1 (UIMM7), {}, F_HAS_ALIAS),\n@@ -4919,5 +4935,7 @@ struct aarch64_opcode aarch64_opcode_table[] =\n       \"an SVE vector register\")\t\t\t\t\t\t\\\n     Y(SVE_REG, sve_reglist, \"SVE_ZtxN\", 0, F(FLD_SVE_Zt),\t\t\\\n       \"a list of SVE vector registers\")\t\t\t\t\t\\\n+    Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\\n+      \"a 16-bit unsigned immediate for TME tcancel\")\t\t\t\\\n     Y(SIMD_ELEMENT, reglane, \"SM3_IMM2\", 0, F(FLD_SM3_imm2),\t\t\\\n       \"an indexed SM3 vector immediate\")"
    }
  ]
}