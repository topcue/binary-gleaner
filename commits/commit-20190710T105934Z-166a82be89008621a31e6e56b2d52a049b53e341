{
  "sha": "166a82be89008621a31e6e56b2d52a049b53e341",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTY2YTgyYmU4OTAwODYyMWEzMWU2ZTU2YjJkNTJhMDQ5YjUzZTM0MQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-06-25T10:04:59Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-07-10T10:59:34Z"
    },
    "message": "Arm: Minor style cleanups\n\n*When reading a target description, do the ptrace check before picking the\n target description.\n\n*In wmmxregset functions, declare the counter inside the for.\n\n*Call arm_linux_init_hwbp_cap from in arm_arch_setup - it doesn't belong in\n arm_read_description.\n\ngdb/ChangeLog:\n\n\t* arm-linux-nat.c (arm_linux_nat_target::read_description): Check\n\tptrace earlier,\n\ngdb/gdbserver/ChangeLog:\n\n\t* linux-arm-low.c (arm_fill_wmmxregset, arm_store_wmmxregset):\n\tMove counter inside for.\n\t(arm_read_description): Check ptrace earlier.\n\t(arm_arch_setup): Call arm_linux_init_hwbp_cap here.",
    "tree": {
      "sha": "485bbea510454c2f43adfbd8050f8d38c6a87fd4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/485bbea510454c2f43adfbd8050f8d38c6a87fd4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/166a82be89008621a31e6e56b2d52a049b53e341",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/166a82be89008621a31e6e56b2d52a049b53e341",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/166a82be89008621a31e6e56b2d52a049b53e341",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/166a82be89008621a31e6e56b2d52a049b53e341/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9fb4c7e9f00accbbf92fc0b0a53978fd50ff6bb0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fb4c7e9f00accbbf92fc0b0a53978fd50ff6bb0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9fb4c7e9f00accbbf92fc0b0a53978fd50ff6bb0"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 39,
    "deletions": 46
  },
  "files": [
    {
      "sha": "6686a14c4b9867a2b4c287ca2e3ce2124776739b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/166a82be89008621a31e6e56b2d52a049b53e341/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/166a82be89008621a31e6e56b2d52a049b53e341/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=166a82be89008621a31e6e56b2d52a049b53e341",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-10  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* arm-linux-nat.c (arm_linux_nat_target::read_description): Check\n+\tptrace earlier.\n+\n 2019-07-10  Alan Hayward  <alan.hayward@arm.com>\n \n \t* features/aarch64-pauth.c: Regenerate."
    },
    {
      "sha": "fe8a113a27064487ff81076db07c42829ceba486",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 10,
      "deletions": 17,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/166a82be89008621a31e6e56b2d52a049b53e341/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/166a82be89008621a31e6e56b2d52a049b53e341/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=166a82be89008621a31e6e56b2d52a049b53e341",
      "patch": "@@ -555,29 +555,22 @@ arm_linux_nat_target::read_description ()\n \n   if (arm_hwcap & HWCAP_VFP)\n     {\n-      int pid;\n-      char *buf;\n-      const struct target_desc * result = NULL;\n+      /* Make sure that the kernel supports reading VFP registers.  Support was\n+\t added in 2.6.30.  */\n+      int pid = inferior_ptid.lwp ();\n+      errno = 0;\n+      char *buf = (char *) alloca (ARM_VFP3_REGS_SIZE);\n+      if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0 && errno == EIO)\n+\treturn nullptr;\n \n       /* NEON implies VFPv3-D32 or no-VFP unit.  Say that we only support\n \t Neon with VFPv3-D32.  */\n       if (arm_hwcap & HWCAP_NEON)\n-\tresult = tdesc_arm_with_neon;\n+\treturn tdesc_arm_with_neon;\n       else if ((arm_hwcap & (HWCAP_VFPv3 | HWCAP_VFPv3D16)) == HWCAP_VFPv3)\n-\tresult = tdesc_arm_with_vfpv3;\n+\treturn tdesc_arm_with_vfpv3;\n       else\n-\tresult = tdesc_arm_with_vfpv2;\n-\n-      /* Now make sure that the kernel supports reading these\n-\t registers.  Support was added in 2.6.30.  */\n-      pid = inferior_ptid.lwp ();\n-      errno = 0;\n-      buf = (char *) alloca (ARM_VFP3_REGS_SIZE);\n-      if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0\n-\t  && errno == EIO)\n-\tresult = NULL;\n-\n-      return result;\n+\treturn tdesc_arm_with_vfpv2;\n     }\n \n   return this->beneath ()->read_description ();"
    },
    {
      "sha": "51aaa77ce12d77b9c853a2b45f4056cef03ddbca",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/166a82be89008621a31e6e56b2d52a049b53e341/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/166a82be89008621a31e6e56b2d52a049b53e341/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=166a82be89008621a31e6e56b2d52a049b53e341",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-10  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* linux-arm-low.c (arm_fill_wmmxregset, arm_store_wmmxregset):\n+\tMove counter inside for.\n+\t(arm_read_description): Check ptrace earlier.\n+\t(arm_arch_setup): Call arm_linux_init_hwbp_cap here.\n+\n 2019-07-09  Tom Tromey  <tom@tromey.com>\n \n \t* configure: Rebuild."
    },
    {
      "sha": "7d6c9d9dd9659ed9d43107107e627857e05b04d4",
      "filename": "gdb/gdbserver/linux-arm-low.c",
      "status": "modified",
      "additions": 17,
      "deletions": 29,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/166a82be89008621a31e6e56b2d52a049b53e341/gdb/gdbserver/linux-arm-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/166a82be89008621a31e6e56b2d52a049b53e341/gdb/gdbserver/linux-arm-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-arm-low.c?ref=166a82be89008621a31e6e56b2d52a049b53e341",
      "patch": "@@ -175,33 +175,29 @@ arm_cannot_fetch_register (int regno)\n static void\n arm_fill_wmmxregset (struct regcache *regcache, void *buf)\n {\n-  int i;\n-\n   if (regcache->tdesc != tdesc_arm_with_iwmmxt)\n     return;\n \n-  for (i = 0; i < 16; i++)\n+  for (int i = 0; i < 16; i++)\n     collect_register (regcache, arm_num_regs + i, (char *) buf + i * 8);\n \n   /* We only have access to wcssf, wcasf, and wcgr0-wcgr3.  */\n-  for (i = 0; i < 6; i++)\n+  for (int i = 0; i < 6; i++)\n     collect_register (regcache, arm_num_regs + i + 16,\n \t\t      (char *) buf + 16 * 8 + i * 4);\n }\n \n static void\n arm_store_wmmxregset (struct regcache *regcache, const void *buf)\n {\n-  int i;\n-\n   if (regcache->tdesc != tdesc_arm_with_iwmmxt)\n     return;\n \n-  for (i = 0; i < 16; i++)\n+  for (int i = 0; i < 16; i++)\n     supply_register (regcache, arm_num_regs + i, (char *) buf + i * 8);\n \n   /* We only have access to wcssf, wcasf, and wcgr0-wcgr3.  */\n-  for (i = 0; i < 6; i++)\n+  for (int i = 0; i < 6; i++)\n     supply_register (regcache, arm_num_regs + i + 16,\n \t\t     (char *) buf + 16 * 8 + i * 4);\n }\n@@ -850,40 +846,29 @@ get_next_pcs_syscall_next_pc (struct arm_get_next_pcs *self)\n static const struct target_desc *\n arm_read_description (void)\n {\n-  int pid = lwpid_of (current_thread);\n   unsigned long arm_hwcap = linux_get_hwcap (4);\n \n-  /* Query hardware watchpoint/breakpoint capabilities.  */\n-  arm_linux_init_hwbp_cap (pid);\n-\n   if (arm_hwcap & HWCAP_IWMMXT)\n     return tdesc_arm_with_iwmmxt;\n \n   if (arm_hwcap & HWCAP_VFP)\n     {\n-      const struct target_desc *result;\n-      char *buf;\n+      /* Make sure that the kernel supports reading VFP registers.  Support was\n+\t added in 2.6.30.  */\n+      int pid = lwpid_of (current_thread);\n+      errno = 0;\n+      char *buf = (char *) alloca (ARM_VFP3_REGS_SIZE);\n+      if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0 && errno == EIO)\n+\treturn tdesc_arm;\n \n       /* NEON implies either no VFP, or VFPv3-D32.  We only support\n \t it with VFP.  */\n       if (arm_hwcap & HWCAP_NEON)\n-\tresult = tdesc_arm_with_neon;\n+\treturn tdesc_arm_with_neon;\n       else if ((arm_hwcap & (HWCAP_VFPv3 | HWCAP_VFPv3D16)) == HWCAP_VFPv3)\n-\tresult = tdesc_arm_with_vfpv3;\n+\treturn tdesc_arm_with_vfpv3;\n       else\n-\tresult = tdesc_arm_with_vfpv2;\n-\n-      /* Now make sure that the kernel supports reading these\n-\t registers.  Support was added in 2.6.30.  */\n-      errno = 0;\n-      buf = (char *) xmalloc (ARM_VFP3_REGS_SIZE);\n-      if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0\n-\t  && errno == EIO)\n-\tresult = tdesc_arm;\n-\n-      free (buf);\n-\n-      return result;\n+\treturn tdesc_arm_with_vfpv2;\n     }\n \n   /* The default configuration uses legacy FPA registers, probably\n@@ -898,6 +883,9 @@ arm_arch_setup (void)\n   int gpregs[18];\n   struct iovec iov;\n \n+  /* Query hardware watchpoint/breakpoint capabilities.  */\n+  arm_linux_init_hwbp_cap (tid);\n+\n   current_process ()->tdesc = arm_read_description ();\n \n   iov.iov_base = gpregs;"
    }
  ]
}