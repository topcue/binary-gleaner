{
  "sha": "567238c956c4e5530bd143bfae9393c7ae5524cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTY3MjM4Yzk1NmM0ZTU1MzBiZDE0M2JmYWU5MzkzYzdhZTU1MjRjZA==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-07-04T00:32:21Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-07-27T20:26:46Z"
    },
    "message": "Prefer symtab symbol over minsym for function names in non-contiguous blocks\n\nThe discussion on gdb-patches which led to this patch may be found\nhere:\n\nhttps://www.sourceware.org/ml/gdb-patches/2019-05/msg00018.html\n\nHere's a brief synopsis/analysis:\n\nEli Zaretskii, while debugging a Windows emacs executable, found\nthat functions comprised of more than one (non-contiguous)\naddress range were not being displayed correctly in a backtrace.  This\nis the example that Eli provided:\n\n  (gdb) bt\n  #0  0x76a63227 in KERNELBASE!DebugBreak ()\n     from C:\\Windows\\syswow64\\KernelBase.dll\n  #1  0x012e7b89 in emacs_abort () at w32fns.c:10768\n  #2  0x012e1f3b in print_vectorlike.cold () at print.c:1824\n  #3  0x011d2dec in print_object (obj=<optimized out>, printcharfun=XIL(0),\n      escapeflag=true) at print.c:2150\n\nThe function print_vectorlike consists of two address ranges, one of\nwhich contains \"cold\" code which is expected to not execute very often.\nThere is a minimal symbol, print_vectorlike.cold.65, which is the address\nof the \"cold\" range.\n\nGDB is prefering this minsym over the the name provided by the\nDWARF info due to some really old code in GDB which handles\n\"certain pathological cases\".  This comment reads as follows:\n\n      /* In certain pathological cases, the symtabs give the wrong\n\t function (when we are in the first function in a file which\n\t is compiled without debugging symbols, the previous function\n\t is compiled with debugging symbols, and the \"foo.o\" symbol\n\t that is supposed to tell us where the file with debugging\n\t symbols ends has been truncated by ar because it is longer\n\t than 15 characters).  This also occurs if the user uses asm()\n\t to create a function but not stabs for it (in a file compiled\n\t with -g).\n\n\t So look in the minimal symbol tables as well, and if it comes\n\t up with a larger address for the function use that instead.\n\t I don't think this can ever cause any problems; there\n\t shouldn't be any minimal symbols in the middle of a function;\n\t if this is ever changed many parts of GDB will need to be\n\t changed (and we'll create a find_pc_minimal_function or some\n\t such).  */\n\nIn an earlier version of this patch, I had left the code for the\npathological case intact, but those who reviwed that patch recommended\nremoving it.  So that's what I've done - I've removed it.\n\ngdb/ChangeLog:\n\n\t* stack.c (find_frame_funname): Remove code which preferred\n\tminsym over symtab sym in \"certain pathological cases\".",
    "tree": {
      "sha": "f67329e470e8cbb13d7908bd738bb3c4d4e431b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f67329e470e8cbb13d7908bd738bb3c4d4e431b7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/567238c956c4e5530bd143bfae9393c7ae5524cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/567238c956c4e5530bd143bfae9393c7ae5524cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/567238c956c4e5530bd143bfae9393c7ae5524cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/567238c956c4e5530bd143bfae9393c7ae5524cd/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c89f9f2a528e490733ace16204752e9af945454e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c89f9f2a528e490733ace16204752e9af945454e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c89f9f2a528e490733ace16204752e9af945454e"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 20,
    "deletions": 56
  },
  "files": [
    {
      "sha": "7d6ef1aae2f425622998b9b448db7fcd3be7da1f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/567238c956c4e5530bd143bfae9393c7ae5524cd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/567238c956c4e5530bd143bfae9393c7ae5524cd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=567238c956c4e5530bd143bfae9393c7ae5524cd",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-27  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* stack.c (find_frame_funname): Remove code which preferred\n+\tminsym over symtab sym in \"certain pathological cases\".\n+\n 2019-07-26  Brian Callahan  <bcallah@openbsd.org>\n \n \tPR gdb/24839:"
    },
    {
      "sha": "06f10a1c3e90cf9aab99ff1bc3324dbb540e9b1b",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 15,
      "deletions": 56,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/567238c956c4e5530bd143bfae9393c7ae5524cd/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/567238c956c4e5530bd143bfae9393c7ae5524cd/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=567238c956c4e5530bd143bfae9393c7ae5524cd",
      "patch": "@@ -1135,66 +1135,25 @@ find_frame_funname (struct frame_info *frame, enum language *funlang,\n   func = get_frame_function (frame);\n   if (func)\n     {\n-      /* In certain pathological cases, the symtabs give the wrong\n-         function (when we are in the first function in a file which\n-         is compiled without debugging symbols, the previous function\n-         is compiled with debugging symbols, and the \"foo.o\" symbol\n-         that is supposed to tell us where the file with debugging\n-         symbols ends has been truncated by ar because it is longer\n-         than 15 characters).  This also occurs if the user uses asm()\n-         to create a function but not stabs for it (in a file compiled\n-         with -g).\n-\n-         So look in the minimal symbol tables as well, and if it comes\n-         up with a larger address for the function use that instead.\n-         I don't think this can ever cause any problems; there\n-         shouldn't be any minimal symbols in the middle of a function;\n-         if this is ever changed many parts of GDB will need to be\n-         changed (and we'll create a find_pc_minimal_function or some\n-         such).  */\n+      const char *print_name = SYMBOL_PRINT_NAME (func);\n \n-      struct bound_minimal_symbol msymbol;\n-\n-      /* Don't attempt to do this for inlined functions, which do not\n-\t have a corresponding minimal symbol.  */\n-      if (!block_inlined_p (SYMBOL_BLOCK_VALUE (func)))\n-\tmsymbol\n-\t  = lookup_minimal_symbol_by_pc (get_frame_address_in_block (frame));\n-      else\n-\tmemset (&msymbol, 0, sizeof (msymbol));\n-\n-      if (msymbol.minsym != NULL\n-\t  && (BMSYMBOL_VALUE_ADDRESS (msymbol)\n-\t      > BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (func))))\n+      *funlang = SYMBOL_LANGUAGE (func);\n+      if (funcp)\n+\t*funcp = func;\n+      if (*funlang == language_cplus)\n \t{\n-\t  /* We also don't know anything about the function besides\n-\t     its address and name.  */\n-\t  func = 0;\n-\t  funname.reset (xstrdup (MSYMBOL_PRINT_NAME (msymbol.minsym)));\n-\t  *funlang = MSYMBOL_LANGUAGE (msymbol.minsym);\n+\t  /* It seems appropriate to use SYMBOL_PRINT_NAME() here,\n+\t     to display the demangled name that we already have\n+\t     stored in the symbol table, but we stored a version\n+\t     with DMGL_PARAMS turned on, and here we don't want to\n+\t     display parameters.  So remove the parameters.  */\n+\t  funname = cp_remove_params (print_name);\n \t}\n-      else\n-\t{\n-\t  const char *print_name = SYMBOL_PRINT_NAME (func);\n \n-\t  *funlang = SYMBOL_LANGUAGE (func);\n-\t  if (funcp)\n-\t    *funcp = func;\n-\t  if (*funlang == language_cplus)\n-\t    {\n-\t      /* It seems appropriate to use SYMBOL_PRINT_NAME() here,\n-\t\t to display the demangled name that we already have\n-\t\t stored in the symbol table, but we stored a version\n-\t\t with DMGL_PARAMS turned on, and here we don't want to\n-\t\t display parameters.  So remove the parameters.  */\n-\t      funname = cp_remove_params (print_name);\n-\t    }\n-\n-\t  /* If we didn't hit the C++ case above, set *funname\n-\t     here.  */\n-\t  if (funname == NULL)\n-\t    funname.reset (xstrdup (print_name));\n-\t}\n+      /* If we didn't hit the C++ case above, set *funname\n+\t here.  */\n+      if (funname == NULL)\n+\tfunname.reset (xstrdup (print_name));\n     }\n   else\n     {"
    }
  ]
}