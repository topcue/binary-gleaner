{
  "sha": "02dd9d25682311f45e1bb9629cbe4f6727e245a8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDJkZDlkMjU2ODIzMTFmNDVlMWJiOTYyOWNiZTRmNjcyN2UyNDVhOA==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-10-07T03:48:22Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-10-16T02:11:18Z"
    },
    "message": "RISC-V: Support GNU indirect functions.\n\nGenerally, glibc dynamic linker should have two ways to deal with ifunc\n- one is to handle the IRELATIVE relocations for the non-preemtive ifunc\nsymbols, the other is to handle the R_RISCV_32/64 and R_RISCV_JUMP_SLOT\nrelocations with the STT_IFUNC preemtive symbols.  No matter which method\nis used, both of them should get the resolved ifunc symbols at runtime.\nTherefore, linker needs to generate the correct dynamic relocations for\nifunc to make sure the the dynamic linker works well.  For now, there are\nthirteen relocations are supported for ifunc in GNU ld,\n\n* R_RISCV_CALL and R_RISCV_CALL_PLT:\nThe RISC-V compiler won't generate R_RISCV_JAL directly to jump to an\nifunc.  Besides, we disable the relaxations for the relocation referenced\nto ifunc, so just handling the R_RISCV_CALL and R_RISCV_CALL_PLT should be\nenough.  Linker should generate a .plt entry and a .got.plt entry for it,\nand also needs to insert a dynamic IRELATIVE in the .got.plt enrty, or\ninsert a R_RISCV_JUMP_SLOT when generating shared library.\n\n* R_RISCV_PCREL_HI20 and R_RISCV_PCREL_LO12_I/S:\nLA/LLA pattern with local fPIC ifunc symbol, or any non-PIC ifunc symbol.\nThe PC-relative relocation.  The current linker will deal with them in\nthe same way as R_RISCV_CALL_PLT.\n\n* R_RISCV_GOT_HI20 and R_RISCV_PCREL_LO12_I/S:\nLA pattern with global PIC ifunc symbol.  Linker should insert a dynamic\nIRELATIVE in the .got entry, or insert a R_RISCV_32/64 when generating\nshared library.\n\n* R_RISCV_32 and R_RISCV_64:\nStore the ifunc symbol into the data section.  Linker should insert a\ndynamic IRELATIVE in the data section, or insert a R_RISCV_32/64 when\ngenerating shared library.\n\n* R_RISCV_HI20 and R_RISCV_LO12_I/S:\nThe LUI + ADDI/LW/SW patterns.  The absolute access relocation.  The\nmedlow model without the -fPIC compiler option should generate them.\nThe ld ifunc testsuites \"Build pr23169a\" and \"Build pr23169d\" need the\nrelocations, they are in the ld/testsuite/ld-ifunc/, and need compiler\nsupport.\n\nHowever, we also made some optimizations with reference to x86,\n\n* If GOT and PLT relocations refer to the same ifunc symbol when generating\npie, then they can actually share a .got entry without creating two entries\nto store the same value and relocation.\n\n* If GOT, PLT and DATA relocations refer to the same ifunc symbol when\ngenerating position dependency executable, then linker will fill the address\nof .plt entry into the corresponding .got entry and data section, without\ninsert any dynamic relocations for the GOT and DATA relocations.\n\nFor the ifunc testcases, there are three types of them,\n\n1. ifunc-reloc-*: Only check the single type of relocation refers to\nifunc symbol.\n* ifunc-reloc-call: R_RISCV_CALL and R_RISCV_CALL_PLT.\n* ifunc-reloc-data: R_RISCV_32 and R_RISCV_64.\n* ifunc-reloc-got: R_RISCV_GOT_HI20 and R_RISCV_PCREL_LO_I/S.\n* ifunc-reloc-pcrel: R_RISCV_PCREL_HI20 and R_RISCV_PCREL_LO_I/S.\n\n2. ifunc-[nonplt|plt]-*: If we don't have PLT relocs, then don't need to\ncreate the PLT and it's .plt entries.\n* ifunc-nonplt: Combine R_RISCV_GOT_HI20 and R_RISCV_32/64.\n* ifunc-plt: Combine all ifunc relocations.\n\n3. ifunc-seperate-*: If we link the ifunc caller and resolver into the\nsame module (link the objects), then the results are the same as the\nifunc-reloc-* and ifunc-[noplt|plt]-* testcases.  Consider the cases that\nthe ifunc callers and resolver are in the different modules, that is, we\ncompile the ifunc resolver to the shared library first, and then link it\nwith the ifunc callers.  The output of ifunc callers should be the same as\nthe normal STT_FUNC cases, and the shared ifunc resolver should define the\nsymbols as STT_IFUNC.\n\nThe R_RISCV_PCREL_HI20 reloc is special.  It should be linked and resolved\nlocally, so if the ifunc resolver is defined in other modules (other shared\nlibraries), then the R_RISCV_PCREL_HI20 is unresolvable, and linker should\nissue an unresolvable reloc error.\n\n\tbfd/\n\t* elfnn-riscv.c: Include \"objalloc.h\" since we need objalloc_alloc.\n\t(riscv_elf_link_hash_table): Add loc_hash_table and loc_hash_memory\n\tfor local STT_GNU_IFUNC symbols.\n\t(riscv_elf_got_plt_val): Removed.\n\t(riscv_elf_local_htab_hash, riscv_elf_local_htab_eq): New functions.\n\tUse to compare local hash entries.\n\t(riscv_elf_get_local_sym_hash): New function.  Find a hash entry for\n\tlocal symbol, and create a new one if needed.\n\t(riscv_elf_link_hash_table_free): New function.  Destroy an riscv\n\telf linker hash table.\n\t(riscv_elf_link_hash_table_create): Create hash table for local ifunc.\n\t(riscv_elf_check_relocs): Create a fake global symbol to track the\n\tlocal ifunc symbol.  Add support to check and handle the relocations\n\treference to ifunc symbols.\n\t(allocate_dynrelocs): Let allocate_ifunc_dynrelocs and\n\tallocate_local_ifunc_dynrelocs to handle the ifunc symbols if they\n\tare defined and referenced in a non-shared object.\n\t(allocate_ifunc_dynrelocs): New function.  Allocate space in .plt,\n\t.got and associated reloc sections for ifunc dynamic relocs.\n\t(allocate_local_ifunc_dynrelocs): Likewise, but for local ifunc\n\tdynamic relocs.\n\t(riscv_elf_relocate_section): Add support to handle the relocation\n\treferenced to ifunc symbols.\n\t(riscv_elf_size_dynamic_sections): Updated.\n\t(riscv_elf_adjust_dynamic_symbol): Updated.\n\t(riscv_elf_finish_dynamic_symbol): Finish up the ifunc handling,\n\tincluding fill the PLT and GOT entries for ifunc symbols.\n\t(riscv_elf_finish_local_dynamic_symbol): New function.  Called by\n\triscv_elf_finish_dynamic_symbol to handle the local ifunc symbols.\n\t(_bfd_riscv_relax_section): Don't do the relaxation for ifunc.\n\t* elfxx-riscv.c: Add R_RISCV_IRELATIVE.\n\t* configure.ac: Link elf-ifunc.lo to use the generic ifunc support.\n\t* configure: Regenerated.\n\n\tinclude/\n\t* elf/riscv.h: Add R_RISCV_IRELATIVE to 58.\n\n\tld/\n\t* emulparams/elf32lriscv-defs.sh: Add IREL_IN_PLT.\n\t* testsuite/ld-ifunc/ifunc.exp: Enable ifunc tests for RISC-V.\n\t* testsuite/ld-riscv-elf/ld-riscv-elf.exp (run_dump_test_ifunc):\n\tNew dump test for ifunc.  There are two arguments, 'target` and\n\t`output`.  The `target` is rv32 or rv64, and the `output` is used\n\tto choose which output you want to test (exe, pie or .so).\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01.s: New testcase.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-data.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-data.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-data-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-data-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-data-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-got.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-got.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-got-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-got-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-got-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-nonplt.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-nonplt.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-nonplt-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-nonplt-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-nonplt-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-01.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-01.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-01-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-01-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-01-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-02.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-02.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-02-exe.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-02-pic.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-plt-02-pie.rd: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-resolver.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-caller.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-exe.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-pic.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-pie.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-caller-pcrel.s: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pic.d: Likewise.\n\t* testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pie.d: Likewise.",
    "tree": {
      "sha": "a502756cbc8df40a0fbb1d3b30666e021868273d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a502756cbc8df40a0fbb1d3b30666e021868273d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/02dd9d25682311f45e1bb9629cbe4f6727e245a8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02dd9d25682311f45e1bb9629cbe4f6727e245a8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/02dd9d25682311f45e1bb9629cbe4f6727e245a8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02dd9d25682311f45e1bb9629cbe4f6727e245a8/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "e7f2f959e38e929ee04601abf97c4a637305771d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7f2f959e38e929ee04601abf97c4a637305771d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7f2f959e38e929ee04601abf97c4a637305771d"
    }
  ],
  "stats": {
    "total": 1576,
    "additions": 1523,
    "deletions": 53
  },
  "files": [
    {
      "sha": "b0cd8b8ec51e5cff2b4ea6b3422f8834ff9dc30c",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -1,3 +1,39 @@\n+2020-10-16  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfnn-riscv.c: Include \"objalloc.h\" since we need objalloc_alloc.\n+\t(riscv_elf_link_hash_table): Add loc_hash_table and loc_hash_memory\n+\tfor local STT_GNU_IFUNC symbols.\n+\t(riscv_elf_got_plt_val): Removed.\n+\t(riscv_elf_local_htab_hash, riscv_elf_local_htab_eq): New functions.\n+\tUse to compare local hash entries.\n+\t(riscv_elf_get_local_sym_hash): New function.  Find a hash entry for\n+\tlocal symbol, and create a new one if needed.\n+\t(riscv_elf_link_hash_table_free): New function.  Destroy an riscv\n+\telf linker hash table.\n+\t(riscv_elf_link_hash_table_create): Create hash table for local ifunc.\n+\t(riscv_elf_check_relocs): Create a fake global symbol to track the\n+\tlocal ifunc symbol.  Add support to check and handle the relocations\n+\treference to ifunc symbols.\n+\t(allocate_dynrelocs): Let allocate_ifunc_dynrelocs and\n+\tallocate_local_ifunc_dynrelocs to handle the ifunc symbols if they\n+\tare defined and referenced in a non-shared object.\n+\t(allocate_ifunc_dynrelocs): New function.  Allocate space in .plt,\n+\t.got and associated reloc sections for ifunc dynamic relocs.\n+\t(allocate_local_ifunc_dynrelocs): Likewise, but for local ifunc\n+\tdynamic relocs.\n+\t(riscv_elf_relocate_section): Add support to handle the relocation\n+\treferenced to ifunc symbols.\n+\t(riscv_elf_size_dynamic_sections): Updated.\n+\t(riscv_elf_adjust_dynamic_symbol): Updated.\n+\t(riscv_elf_finish_dynamic_symbol): Finish up the ifunc handling,\n+\tincluding fill the PLT and GOT entries for ifunc symbols.\n+\t(riscv_elf_finish_local_dynamic_symbol): New function.  Called by\n+\triscv_elf_finish_dynamic_symbol to handle the local ifunc symbols.\n+\t(_bfd_riscv_relax_section): Don't do the relaxation for ifunc.\n+\t* elfxx-riscv.c: Add R_RISCV_IRELATIVE.\n+\t* configure.ac: Link elf-ifunc.lo to use the generic ifunc support.\n+\t* configure: Regenerated.\n+\n 2020-10-16  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-arc.c (replace_func): Correct return type."
    },
    {
      "sha": "5d84aed069dc489c96d58a8784bf89a4d719f75a",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -14917,8 +14917,8 @@ do\n     powerpc_elf64_fbsd_le_vec)\t tb=\"$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf\" target_size=64 ;;\n     powerpc_xcoff_vec)\t\t tb=\"$tb coff-rs6000.lo $xcoff\" ;;\n     pru_elf32_vec)\t\t tb=\"$tb elf32-pru.lo elf32.lo $elf\" ;;\n-    riscv_elf32_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf32.lo $elf\" ;;\n-    riscv_elf64_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf32.lo $elf\"; target_size=64 ;;\n+    riscv_elf32_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\" ;;\n+    riscv_elf64_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\"; target_size=64 ;;\n     rl78_elf32_vec)\t\t tb=\"$tb elf32-rl78.lo elf32.lo $elf\" ;;\n     rs6000_xcoff64_vec)\t\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;\n     rs6000_xcoff64_aix_vec)\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;"
    },
    {
      "sha": "5ec4d4f0b48156914b1f85ca963b8d22727d4513",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -623,8 +623,8 @@ do\n     powerpc_elf64_fbsd_le_vec)\t tb=\"$tb elf64-ppc.lo elf64-gen.lo elf64.lo $elf\" target_size=64 ;;\n     powerpc_xcoff_vec)\t\t tb=\"$tb coff-rs6000.lo $xcoff\" ;;\n     pru_elf32_vec)\t\t tb=\"$tb elf32-pru.lo elf32.lo $elf\" ;;\n-    riscv_elf32_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf32.lo $elf\" ;;\n-    riscv_elf64_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf32.lo $elf\"; target_size=64 ;;\n+    riscv_elf32_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\" ;;\n+    riscv_elf64_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\"; target_size=64 ;;\n     rl78_elf32_vec)\t\t tb=\"$tb elf32-rl78.lo elf32.lo $elf\" ;;\n     rs6000_xcoff64_vec)\t\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;\n     rs6000_xcoff64_aix_vec)\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;"
    },
    {
      "sha": "a26cd3f2a6fbf010a2ce526f75c0772ff7386aea",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 678,
      "deletions": 47,
      "changes": 725,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -31,6 +31,7 @@\n #include \"elfxx-riscv.h\"\n #include \"elf/riscv.h\"\n #include \"opcode/riscv.h\"\n+#include \"objalloc.h\"\n \n /* Internal relocations used exclusively by the relaxation pass.  */\n #define R_RISCV_DELETE (R_RISCV_max + 1)\n@@ -115,6 +116,10 @@ struct riscv_elf_link_hash_table\n \n   /* The max alignment of output sections.  */\n   bfd_vma max_alignment;\n+\n+  /* Used by local STT_GNU_IFUNC symbols.  */\n+  htab_t loc_hash_table;\n+  void * loc_hash_memory;\n };\n \n \n@@ -153,17 +158,13 @@ riscv_elf_append_rela (bfd *abfd, asection *s, Elf_Internal_Rela *rel)\n \n #define GOT_ENTRY_SIZE RISCV_ELF_WORD_BYTES\n \n+/* Reserve two entries of GOTPLT for ld.so, one is used for PLT resolver,\n+   the other is used for link map.  Other targets also reserve one more\n+   entry used for runtime profile?  */\n #define GOTPLT_HEADER_SIZE (2 * GOT_ENTRY_SIZE)\n \n #define sec_addr(sec) ((sec)->output_section->vma + (sec)->output_offset)\n \n-static bfd_vma\n-riscv_elf_got_plt_val (bfd_vma plt_index, struct bfd_link_info *info)\n-{\n-  return sec_addr (riscv_elf_hash_table (info)->elf.sgotplt)\n-\t + GOTPLT_HEADER_SIZE + (plt_index * GOT_ENTRY_SIZE);\n-}\n-\n #if ARCH_SIZE == 32\n # define MATCH_LREG MATCH_LW\n #else\n@@ -265,6 +266,86 @@ link_hash_newfunc (struct bfd_hash_entry *entry,\n   return entry;\n }\n \n+/* Compute a hash of a local hash entry.  We use elf_link_hash_entry\n+  for local symbol so that we can handle local STT_GNU_IFUNC symbols\n+  as global symbol.  We reuse indx and dynstr_index for local symbol\n+  hash since they aren't used by global symbols in this backend.  */\n+\n+static hashval_t\n+riscv_elf_local_htab_hash (const void *ptr)\n+{\n+  struct elf_link_hash_entry *h = (struct elf_link_hash_entry *) ptr;\n+  return ELF_LOCAL_SYMBOL_HASH (h->indx, h->dynstr_index);\n+}\n+\n+/* Compare local hash entries.  */\n+\n+static int\n+riscv_elf_local_htab_eq (const void *ptr1, const void *ptr2)\n+{\n+  struct elf_link_hash_entry *h1 = (struct elf_link_hash_entry *) ptr1;\n+  struct elf_link_hash_entry *h2 = (struct elf_link_hash_entry *) ptr2;\n+\n+  return h1->indx == h2->indx && h1->dynstr_index == h2->dynstr_index;\n+}\n+\n+/* Find and/or create a hash entry for local symbol.  */\n+\n+static struct elf_link_hash_entry *\n+riscv_elf_get_local_sym_hash (struct riscv_elf_link_hash_table *htab,\n+\t\t\t      bfd *abfd, const Elf_Internal_Rela *rel,\n+\t\t\t      bfd_boolean create)\n+{\n+  struct riscv_elf_link_hash_entry eh, *ret;\n+  asection *sec = abfd->sections;\n+  hashval_t h = ELF_LOCAL_SYMBOL_HASH (sec->id,\n+\t\t\t\t       ELFNN_R_SYM (rel->r_info));\n+  void **slot;\n+\n+  eh.elf.indx = sec->id;\n+  eh.elf.dynstr_index = ELFNN_R_SYM (rel->r_info);\n+  slot = htab_find_slot_with_hash (htab->loc_hash_table, &eh, h,\n+\t\t\t\t   create ? INSERT : NO_INSERT);\n+\n+  if (!slot)\n+    return NULL;\n+\n+  if (*slot)\n+    {\n+      ret = (struct riscv_elf_link_hash_entry *) *slot;\n+      return &ret->elf;\n+    }\n+\n+  ret = (struct riscv_elf_link_hash_entry *)\n+\tobjalloc_alloc ((struct objalloc *) htab->loc_hash_memory,\n+\t\t\tsizeof (struct riscv_elf_link_hash_entry));\n+  if (ret)\n+    {\n+      memset (ret, 0, sizeof (*ret));\n+      ret->elf.indx = sec->id;\n+      ret->elf.dynstr_index = ELFNN_R_SYM (rel->r_info);\n+      ret->elf.dynindx = -1;\n+      *slot = ret;\n+    }\n+  return &ret->elf;\n+}\n+\n+/* Destroy a RISC-V elf linker hash table.  */\n+\n+static void\n+riscv_elf_link_hash_table_free (bfd *obfd)\n+{\n+  struct riscv_elf_link_hash_table *ret\n+    = (struct riscv_elf_link_hash_table *) obfd->link.hash;\n+\n+  if (ret->loc_hash_table)\n+    htab_delete (ret->loc_hash_table);\n+  if (ret->loc_hash_memory)\n+    objalloc_free ((struct objalloc *) ret->loc_hash_memory);\n+\n+  _bfd_elf_link_hash_table_free (obfd);\n+}\n+\n /* Create a RISC-V ELF linker hash table.  */\n \n static struct bfd_link_hash_table *\n@@ -286,6 +367,20 @@ riscv_elf_link_hash_table_create (bfd *abfd)\n     }\n \n   ret->max_alignment = (bfd_vma) -1;\n+\n+  /* Create hash table for local ifunc.  */\n+  ret->loc_hash_table = htab_try_create (1024,\n+\t\t\t\t\t riscv_elf_local_htab_hash,\n+\t\t\t\t\t riscv_elf_local_htab_eq,\n+\t\t\t\t\t NULL);\n+  ret->loc_hash_memory = objalloc_create ();\n+  if (!ret->loc_hash_table || !ret->loc_hash_memory)\n+    {\n+      riscv_elf_link_hash_table_free (abfd);\n+      return NULL;\n+    }\n+  ret->elf.root.hash_table_free = riscv_elf_link_hash_table_free;\n+\n   return &ret->elf.root;\n }\n \n@@ -477,6 +572,9 @@ bad_static_reloc (bfd *abfd, unsigned r_type, struct elf_link_hash_entry *h)\n {\n   reloc_howto_type * r = riscv_elf_rtype_to_howto (abfd, r_type);\n \n+  /* We propably can improve the information to tell users that they\n+     should be recompile the code with -fPIC or -fPIE, just like what\n+     x86 does.  */\n   (*_bfd_error_handler)\n     (_(\"%pB: relocation %s against `%s' can not be used when making a shared \"\n        \"object; recompile with -fPIC\"),\n@@ -526,7 +624,32 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t}\n \n       if (r_symndx < symtab_hdr->sh_info)\n-\th = NULL;\n+\t{\n+\t  /* A local symbol.  */\n+\t  Elf_Internal_Sym *isym = bfd_sym_from_r_symndx (&htab->elf.sym_cache,\n+\t\t\t\t\t\t\t  abfd, r_symndx);\n+\t  if (isym == NULL)\n+\t    return FALSE;\n+\n+\t  /* Check relocation against local STT_GNU_IFUNC symbol.  */\n+\t  if (ELF_ST_TYPE (isym->st_info) == STT_GNU_IFUNC)\n+\t    {\n+\t      h = riscv_elf_get_local_sym_hash (htab, abfd, rel, TRUE);\n+\t      if (h == NULL)\n+\t\treturn FALSE;\n+\n+\t      /* Fake STT_GNU_IFUNC global symbol.  */\n+\t      h->root.root.string = bfd_elf_sym_name (abfd, symtab_hdr,\n+\t\t\t\t\t\t      isym, NULL);\n+\t      h->type = STT_GNU_IFUNC;\n+\t      h->def_regular = 1;\n+\t      h->ref_regular = 1;\n+\t      h->forced_local = 1;\n+\t      h->root.type = bfd_link_hash_defined;\n+\t    }\n+\t  else\n+\t    h = NULL;\n+\t}\n       else\n \t{\n \t  h = sym_hashes[r_symndx - symtab_hdr->sh_info];\n@@ -535,6 +658,32 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    h = (struct elf_link_hash_entry *) h->root.u.i.link;\n \t}\n \n+      if (h != NULL)\n+\t{\n+\t  switch (r_type)\n+\t    {\n+\t    case R_RISCV_32:\n+\t    case R_RISCV_64:\n+\t    case R_RISCV_CALL:\n+\t    case R_RISCV_CALL_PLT:\n+\t    case R_RISCV_HI20:\n+\t    case R_RISCV_GOT_HI20:\n+\t    case R_RISCV_PCREL_HI20:\n+\t      /* Create the ifunc sections, iplt and ipltgot, for static\n+\t\t executables.  */\n+\t      if (h->type == STT_GNU_IFUNC\n+\t\t  && !_bfd_elf_create_ifunc_sections (htab->elf.dynobj, info))\n+\t\treturn FALSE;\n+\t      break;\n+\n+\t    default:\n+\t      break;\n+\t    }\n+\n+\t  /* It is referenced by a non-shared object.  */\n+\t  h->ref_regular = 1;\n+\t}\n+\n       switch (r_type)\n \t{\n \tcase R_RISCV_TLS_GD_HI20:\n@@ -574,12 +723,26 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  h->plt.refcount += 1;\n \t  break;\n \n+\tcase R_RISCV_PCREL_HI20:\n+\t  if (h != NULL\n+\t      && h->type == STT_GNU_IFUNC)\n+\t    {\n+\t      h->non_got_ref = 1;\n+\t      h->pointer_equality_needed = 1;\n+\n+\t      /* We don't use the PCREL_HI20 in the data section,\n+\t\t so we always need the plt when it refers to\n+\t\t ifunc symbol.  */\n+\t      h->plt.refcount += 1;\n+\t    }\n+\t  /* Fall through.  */\n+\n \tcase R_RISCV_JAL:\n \tcase R_RISCV_BRANCH:\n \tcase R_RISCV_RVC_BRANCH:\n \tcase R_RISCV_RVC_JUMP:\n-\tcase R_RISCV_PCREL_HI20:\n-\t  /* In shared libraries, these relocs are known to bind locally.  */\n+\t  /* In shared libraries and pie, these relocs are known\n+\t     to bind locally.  */\n \t  if (bfd_link_pic (info))\n \t    break;\n \t  goto static_reloc;\n@@ -604,15 +767,23 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  /* Fall through.  */\n \n \tstatic_reloc:\n-\t  /* This reloc might not bind locally.  */\n-\t  if (h != NULL)\n-\t    h->non_got_ref = 1;\n \n-\t  if (h != NULL && !bfd_link_pic (info))\n+\t  if (h != NULL\n+\t      && (!bfd_link_pic (info)\n+\t\t  || h->type == STT_GNU_IFUNC))\n \t    {\n-\t      /* We may need a .plt entry if the function this reloc\n-\t\t refers to is in a shared lib.  */\n-\t      h->plt.refcount += 1;\n+\t      /* This reloc might not bind locally.  */\n+\t      h->non_got_ref = 1;\n+\t      h->pointer_equality_needed = 1;\n+\n+\t      if (!h->def_regular\n+\t\t  || (sec->flags & (SEC_CODE | SEC_READONLY)) != 0)\n+\t\t{\n+\t\t  /* We may need a .plt entry if the symbol is a function\n+\t\t     defined in a shared lib or is a function referenced\n+\t\t     from the code or read-only section.  */\n+\t\t  h->plt.refcount += 1;\n+\t\t}\n \t    }\n \n \t  /* If we are creating a shared library, and this is a reloc\n@@ -635,21 +806,28 @@ riscv_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t     If on the other hand, we are creating an executable, we\n \t     may need to keep relocations for symbols satisfied by a\n \t     dynamic library if we manage to avoid copy relocs for the\n-\t     symbol.  */\n+\t     symbol.\n+\n+\t     Generate dynamic pointer relocation against STT_GNU_IFUNC\n+\t     symbol in the non-code section (R_RISCV_32/R_RISCV_64).  */\n \t  reloc_howto_type * r = riscv_elf_rtype_to_howto (abfd, r_type);\n \n \t  if ((bfd_link_pic (info)\n \t       && (sec->flags & SEC_ALLOC) != 0\n-\t       && ((r != NULL && ! r->pc_relative)\n+\t       && ((r != NULL && !r->pc_relative)\n \t\t   || (h != NULL\n-\t\t       && (! info->symbolic\n+\t\t       && (!info->symbolic\n \t\t\t   || h->root.type == bfd_link_hash_defweak\n \t\t\t   || !h->def_regular))))\n \t      || (!bfd_link_pic (info)\n \t\t  && (sec->flags & SEC_ALLOC) != 0\n \t\t  && h != NULL\n \t\t  && (h->root.type == bfd_link_hash_defweak\n-\t\t      || !h->def_regular)))\n+\t\t      || !h->def_regular))\n+\t      || (!bfd_link_pic (info)\n+\t\t  && h != NULL\n+\t\t  && h->type == STT_GNU_IFUNC\n+\t\t  && (sec->flags & SEC_CODE) == 0))\n \t    {\n \t      struct elf_dyn_relocs *p;\n \t      struct elf_dyn_relocs **head;\n@@ -786,9 +964,10 @@ riscv_elf_adjust_dynamic_symbol (struct bfd_link_info *info,\n   if (h->type == STT_FUNC || h->type == STT_GNU_IFUNC || h->needs_plt)\n     {\n       if (h->plt.refcount <= 0\n-\t  || SYMBOL_CALLS_LOCAL (info, h)\n-\t  || (ELF_ST_VISIBILITY (h->other) != STV_DEFAULT\n-\t      && h->root.type == bfd_link_hash_undefweak))\n+\t  || (h->type != STT_GNU_IFUNC\n+\t      && (SYMBOL_CALLS_LOCAL (info, h)\n+\t\t  || (ELF_ST_VISIBILITY (h->other) != STV_DEFAULT\n+\t\t      && h->root.type == bfd_link_hash_undefweak))))\n \t{\n \t  /* This case can occur if we saw a R_RISCV_CALL_PLT reloc in an\n \t     input file, but the symbol was never referred to by a dynamic\n@@ -901,8 +1080,14 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n   htab = riscv_elf_hash_table (info);\n   BFD_ASSERT (htab != NULL);\n \n-  if (htab->elf.dynamic_sections_created\n-      && h->plt.refcount > 0)\n+  /* Since STT_GNU_IFUNC symbols must go through PLT, we handle them\n+     in the allocate_ifunc_dynrelocs and allocate_local_ifunc_dynrelocs,\n+     if they are defined and referenced in a non-shared object.  */\n+  if (h->type == STT_GNU_IFUNC\n+      && h->def_regular)\n+    return TRUE;\n+  else if (htab->elf.dynamic_sections_created\n+\t   && h->plt.refcount > 0)\n     {\n       /* Make sure this symbol is output as a dynamic symbol.\n \t Undefined weak syms won't yet be marked as dynamic.  */\n@@ -1088,6 +1273,55 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n   return TRUE;\n }\n \n+/* Allocate space in .plt, .got and associated reloc sections for\n+   ifunc dynamic relocs.  */\n+\n+static bfd_boolean\n+allocate_ifunc_dynrelocs (struct elf_link_hash_entry *h,\n+\t\t\t  void *inf)\n+{\n+  struct bfd_link_info *info;\n+\n+  if (h->root.type == bfd_link_hash_indirect)\n+    return TRUE;\n+\n+  if (h->root.type == bfd_link_hash_warning)\n+    h = (struct elf_link_hash_entry *) h->root.u.i.link;\n+\n+  info = (struct bfd_link_info *) inf;\n+\n+  /* Since STT_GNU_IFUNC symbol must go through PLT, we handle it\n+     here if it is defined and referenced in a non-shared object.  */\n+  if (h->type == STT_GNU_IFUNC\n+      && h->def_regular)\n+    return _bfd_elf_allocate_ifunc_dyn_relocs (info, h,\n+\t\t\t\t\t       &h->dyn_relocs,\n+\t\t\t\t\t       PLT_ENTRY_SIZE,\n+\t\t\t\t\t       PLT_HEADER_SIZE,\n+\t\t\t\t\t       GOT_ENTRY_SIZE,\n+\t\t\t\t\t       TRUE);\n+  return TRUE;\n+}\n+\n+/* Allocate space in .plt, .got and associated reloc sections for\n+   local ifunc dynamic relocs.  */\n+\n+static bfd_boolean\n+allocate_local_ifunc_dynrelocs (void **slot, void *inf)\n+{\n+  struct elf_link_hash_entry *h\n+    = (struct elf_link_hash_entry *) *slot;\n+\n+  if (h->type != STT_GNU_IFUNC\n+      || !h->def_regular\n+      || !h->ref_regular\n+      || !h->forced_local\n+      || h->root.type != bfd_link_hash_defined)\n+    abort ();\n+\n+  return allocate_ifunc_dynrelocs (h, inf);\n+}\n+\n static bfd_boolean\n riscv_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n {\n@@ -1178,10 +1412,18 @@ riscv_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t}\n     }\n \n-  /* Allocate global sym .plt and .got entries, and space for global\n-     sym dynamic relocs.  */\n+  /* Allocate .plt and .got entries and space dynamic relocs for\n+     global symbols.  */\n   elf_link_hash_traverse (&htab->elf, allocate_dynrelocs, info);\n \n+  /* Allocate .plt and .got entries and space dynamic relocs for\n+     global ifunc symbols.  */\n+  elf_link_hash_traverse (&htab->elf, allocate_ifunc_dynrelocs, info);\n+\n+  /* Allocate .plt and .got entries and space dynamic relocs for\n+     local ifunc symbols.  */\n+  htab_traverse (htab->loc_hash_table, allocate_local_ifunc_dynrelocs, info);\n+\n   if (htab->elf.sgotplt)\n     {\n       struct elf_link_hash_entry *got;\n@@ -1213,6 +1455,8 @@ riscv_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n       if (s == htab->elf.splt\n \t  || s == htab->elf.sgot\n \t  || s == htab->elf.sgotplt\n+\t  || s == htab->elf.iplt\n+\t  || s == htab->elf.igotplt\n \t  || s == htab->elf.sdynbss\n \t  || s == htab->elf.sdynrelro\n \t  || s == htab->sdyntdata)\n@@ -1645,7 +1889,6 @@ riscv_elf_relocate_section (bfd *output_bfd,\n   Elf_Internal_Rela *relend;\n   riscv_pcrel_relocs pcrel_relocs;\n   bfd_boolean ret = FALSE;\n-  asection *sreloc = elf_section_data (input_section)->sreloc;\n   struct riscv_elf_link_hash_table *htab = riscv_elf_hash_table (info);\n   Elf_Internal_Shdr *symtab_hdr = &elf_symtab_hdr (input_bfd);\n   struct elf_link_hash_entry **sym_hashes = elf_sym_hashes (input_bfd);\n@@ -1664,7 +1907,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n       asection *sec;\n       bfd_vma relocation;\n       bfd_reloc_status_type r = bfd_reloc_ok;\n-      const char *name;\n+      const char *name = NULL;\n       bfd_vma off, ie_off;\n       bfd_boolean unresolved_reloc, is_ie = FALSE;\n       bfd_vma pc = sec_addr (input_section) + rel->r_offset;\n@@ -1689,6 +1932,19 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t  sym = local_syms + r_symndx;\n \t  sec = local_sections[r_symndx];\n \t  relocation = _bfd_elf_rela_local_sym (output_bfd, sym, &sec, rel);\n+\n+\t  /* Relocate against local STT_GNU_IFUNC symbol.  */\n+\t  if (!bfd_link_relocatable (info)\n+\t      && ELF_ST_TYPE (sym->st_info) == STT_GNU_IFUNC)\n+\t    {\n+\t      h = riscv_elf_get_local_sym_hash (htab, input_bfd, rel, FALSE);\n+\t      if (h == NULL)\n+\t\tabort ();\n+\n+\t      /* Set STT_GNU_IFUNC symbol value.  */\n+\t      h->root.u.def.value = sym->st_value;\n+\t      h->root.u.def.section = sec;\n+\t    }\n \t}\n       else\n \t{\n@@ -1717,6 +1973,235 @@ riscv_elf_relocate_section (bfd *output_bfd,\n       if (bfd_link_relocatable (info))\n \tcontinue;\n \n+      /* Since STT_GNU_IFUNC symbol must go through PLT, we handle\n+\t it here if it is defined in a non-shared object.  */\n+      if (h != NULL\n+\t  && h->type == STT_GNU_IFUNC\n+\t  && h->def_regular)\n+\t{\n+\t  asection *plt, *base_got;\n+\n+\t  if ((input_section->flags & SEC_ALLOC) == 0)\n+\t    {\n+\t      /* If this is a SHT_NOTE section without SHF_ALLOC, treat\n+\t\t STT_GNU_IFUNC symbol as STT_FUNC.  */\n+\t      if (elf_section_type (input_section) == SHT_NOTE)\n+\t\tgoto skip_ifunc;\n+\n+\t      /* Dynamic relocs are not propagated for SEC_DEBUGGING\n+\t\t sections because such sections are not SEC_ALLOC and\n+\t\t thus ld.so will not process them.  */\n+\t      if ((input_section->flags & SEC_DEBUGGING) != 0)\n+\t\tcontinue;\n+\n+\t      abort ();\n+\t    }\n+\t  else if (h->plt.offset == (bfd_vma) -1\n+\t\t   /* The following relocation may not need the .plt entries\n+\t\t      when all references to a STT_GNU_IFUNC symbols are done\n+\t\t      via GOT or static function pointers.  */\n+\t\t   && r_type != R_RISCV_32\n+\t\t   && r_type != R_RISCV_64\n+\t\t   && r_type != R_RISCV_HI20\n+\t\t   && r_type != R_RISCV_GOT_HI20\n+\t\t   && r_type != R_RISCV_LO12_I\n+\t\t   && r_type != R_RISCV_LO12_S)\n+\t    goto bad_ifunc_reloc;\n+\n+\t  /* STT_GNU_IFUNC symbol must go through PLT.  */\n+\t  plt = htab->elf.splt ? htab->elf.splt : htab->elf.iplt;\n+\t  relocation = plt->output_section->vma\n+\t\t       + plt->output_offset\n+\t\t       + h->plt.offset;\n+\n+\t  switch (r_type)\n+\t    {\n+\t    case R_RISCV_32:\n+\t    case R_RISCV_64:\n+\t      if (rel->r_addend != 0)\n+\t\t{\n+\t\t  if (h->root.root.string)\n+\t\t    name = h->root.root.string;\n+\t\t  else\n+\t\t    name = bfd_elf_sym_name (input_bfd, symtab_hdr, sym, NULL);\n+\n+\t\t  _bfd_error_handler\n+\t\t    /* xgettext:c-format */\n+\t\t    (_(\"%pB: relocation %s against STT_GNU_IFUNC \"\n+\t\t       \"symbol `%s' has non-zero addend: %\" PRId64),\n+\t\t     input_bfd, howto->name, name, (int64_t) rel->r_addend);\n+\t\t  bfd_set_error (bfd_error_bad_value);\n+\t\t  return FALSE;\n+\t\t}\n+\n+\t\t/* Generate dynamic relocation only when there is a non-GOT\n+\t\t   reference in a shared object or there is no PLT.  */\n+\t\tif ((bfd_link_pic (info) && h->non_got_ref)\n+\t\t    || h->plt.offset == (bfd_vma) -1)\n+\t\t  {\n+\t\t    Elf_Internal_Rela outrel;\n+\t\t    asection *sreloc;\n+\n+\t\t    /* Need a dynamic relocation to get the real function\n+\t\t       address.  */\n+\t\t    outrel.r_offset = _bfd_elf_section_offset (output_bfd,\n+\t\t\t\t\t\t\t       info,\n+\t\t\t\t\t\t\t       input_section,\n+\t\t\t\t\t\t\t       rel->r_offset);\n+\t\t    if (outrel.r_offset == (bfd_vma) -1\n+\t\t\t|| outrel.r_offset == (bfd_vma) -2)\n+\t\t      abort ();\n+\n+\t\t    outrel.r_offset += input_section->output_section->vma\n+\t\t\t\t       + input_section->output_offset;\n+\n+\t\t    if (h->dynindx == -1\n+\t\t\t|| h->forced_local\n+\t\t\t|| bfd_link_executable (info))\n+\t\t      {\n+\t\t\tinfo->callbacks->minfo\n+\t\t\t  (_(\"Local IFUNC function `%s' in %pB\\n\"),\n+\t\t\t   h->root.root.string,\n+\t\t\t   h->root.u.def.section->owner);\n+\n+\t\t\t/* This symbol is resolved locally.  */\n+\t\t\toutrel.r_info = ELFNN_R_INFO (0, R_RISCV_IRELATIVE);\n+\t\t\toutrel.r_addend = h->root.u.def.value\n+\t\t\t  + h->root.u.def.section->output_section->vma\n+\t\t\t  + h->root.u.def.section->output_offset;\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\toutrel.r_info = ELFNN_R_INFO (h->dynindx, r_type);\n+\t\t\toutrel.r_addend = 0;\n+\t\t      }\n+\n+\t\t    /* Dynamic relocations are stored in\n+\t\t       1. .rela.ifunc section in PIC object.\n+\t\t       2. .rela.got section in dynamic executable.\n+\t\t       3. .rela.iplt section in static executable.  */\n+\t\t    if (bfd_link_pic (info))\n+\t\t      sreloc = htab->elf.irelifunc;\n+\t\t    else if (htab->elf.splt != NULL)\n+\t\t      sreloc = htab->elf.srelgot;\n+\t\t    else\n+\t\t      sreloc = htab->elf.irelplt;\n+\n+\t\t    riscv_elf_append_rela (output_bfd, sreloc, &outrel);\n+\n+\t\t    /* If this reloc is against an external symbol, we\n+\t\t       do not want to fiddle with the addend.  Otherwise,\n+\t\t       we need to include the symbol value so that it\n+\t\t       becomes an addend for the dynamic reloc.  For an\n+\t\t       internal symbol, we have updated addend.  */\n+\t\t    continue;\n+\t\t  }\n+\t\tgoto do_relocation;\n+\n+\t      case R_RISCV_GOT_HI20:\n+\t\tbase_got = htab->elf.sgot;\n+\t\toff = h->got.offset;\n+\n+\t\tif (base_got == NULL)\n+\t\t  abort ();\n+\n+\t\tif (off == (bfd_vma) -1)\n+\t\t  {\n+\t\t    bfd_vma plt_idx;\n+\n+\t\t    /* We can't use h->got.offset here to save state, or\n+\t\t       even just remember the offset, as finish_dynamic_symbol\n+\t\t       would use that as offset into .got.  */\n+\n+\t\t    if (htab->elf.splt != NULL)\n+\t\t      {\n+\t\t\tplt_idx = (h->plt.offset - PLT_HEADER_SIZE)\n+\t\t\t\t  / PLT_ENTRY_SIZE;\n+\t\t\toff = GOTPLT_HEADER_SIZE + (plt_idx * GOT_ENTRY_SIZE);\n+\t\t\tbase_got = htab->elf.sgotplt;\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\tplt_idx = h->plt.offset / PLT_ENTRY_SIZE;\n+\t\t\toff = plt_idx * GOT_ENTRY_SIZE;\n+\t\t\tbase_got = htab->elf.igotplt;\n+\t\t      }\n+\n+\t\t    if (h->dynindx == -1\n+\t\t\t|| h->forced_local\n+\t\t\t|| info->symbolic)\n+\t\t      {\n+\t\t\t/* This references the local definition.  We must\n+\t\t\t   initialize this entry in the global offset table.\n+\t\t\t   Since the offset must always be a multiple of 8,\n+\t\t\t   we use the least significant bit to record\n+\t\t\t   whether we have initialized it already.\n+\n+\t\t\t   When doing a dynamic link, we create a .rela.got\n+\t\t\t   relocation entry to initialize the value.  This\n+\t\t\t   is done in the finish_dynamic_symbol routine.   */\n+\t\t\tif ((off & 1) != 0)\n+\t\t\t  off &= ~1;\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    bfd_put_NN (output_bfd, relocation,\n+\t\t\t\t\tbase_got->contents + off);\n+\t\t\t    /* Note that this is harmless for the case,\n+\t\t\t       as -1 | 1 still is -1.  */\n+\t\t\t    h->got.offset |= 1;\n+\t\t\t  }\n+\t\t      }\n+\t\t  }\n+\n+\t\trelocation = base_got->output_section->vma\n+\t\t\t     + base_got->output_offset + off;\n+\n+\t\tr_type = ELFNN_R_TYPE (rel->r_info);\n+\t\thowto = riscv_elf_rtype_to_howto (input_bfd, r_type);\n+\t\tif (howto == NULL)\n+\t\t  r = bfd_reloc_notsupported;\n+\t\telse if (!riscv_record_pcrel_hi_reloc (&pcrel_relocs, pc,\n+\t\t\t\t\t\t       relocation, FALSE))\n+\t\t  r = bfd_reloc_overflow;\n+\t\tgoto do_relocation;\n+\n+\t      case R_RISCV_CALL:\n+\t      case R_RISCV_CALL_PLT:\n+\t      case R_RISCV_HI20:\n+\t      case R_RISCV_LO12_I:\n+\t      case R_RISCV_LO12_S:\n+\t\tgoto do_relocation;\n+\n+\t      case R_RISCV_PCREL_HI20:\n+\t\tr_type = ELFNN_R_TYPE (rel->r_info);\n+\t\thowto = riscv_elf_rtype_to_howto (input_bfd, r_type);\n+\t\tif (howto == NULL)\n+\t\t  r = bfd_reloc_notsupported;\n+\t\telse if (!riscv_record_pcrel_hi_reloc (&pcrel_relocs, pc,\n+\t\t\t\t\t\t       relocation, FALSE))\n+\t\t  r = bfd_reloc_overflow;\n+\t\tgoto do_relocation;\n+\n+\t    default:\n+ bad_ifunc_reloc:\n+\t      if (h->root.root.string)\n+\t\tname = h->root.root.string;\n+\t      else\n+\t\t/* The entry of local ifunc is fake in global hash table,\n+\t\t   we should find the name by the original local symbol.  */\n+\t\tname = bfd_elf_sym_name (input_bfd, symtab_hdr, sym, NULL);\n+\n+\t      _bfd_error_handler\n+\t      /* xgettext:c-format */\n+\t      (_(\"%pB: relocation %s against STT_GNU_IFUNC \"\n+\t\t \"symbol `%s' isn't supported\"), input_bfd,\n+\t       howto->name, name);\n+\t      bfd_set_error (bfd_error_bad_value);\n+\t      return FALSE;\n+\t    }\n+\t}\n+\n+ skip_ifunc:\n       if (h != NULL)\n \tname = h->root.root.string;\n       else\n@@ -2013,6 +2498,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\t      || h->root.type == bfd_link_hash_undefined)))\n \t    {\n \t      Elf_Internal_Rela outrel;\n+\t      asection *sreloc;\n \t      bfd_boolean skip_static_relocation, skip_dynamic_relocation;\n \n \t      /* When generating a shared object, these relocations\n@@ -2042,6 +2528,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t\t  outrel.r_addend = relocation + rel->r_addend;\n \t\t}\n \n+\t      sreloc = elf_section_data (input_section)->sreloc;\n \t      riscv_elf_append_rela (output_bfd, sreloc, &outrel);\n \t      if (skip_static_relocation)\n \t\tcontinue;\n@@ -2216,6 +2703,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t  r = bfd_reloc_notsupported;\n \t}\n \n+ do_relocation:\n       if (r == bfd_reloc_ok)\n \tr = perform_relocation (howto, rel, relocation, input_section,\n \t\t\t\tinput_bfd, contents);\n@@ -2299,23 +2787,58 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n     {\n       /* We've decided to create a PLT entry for this symbol.  */\n       bfd_byte *loc;\n-      bfd_vma i, header_address, plt_idx, got_address;\n+      bfd_vma i, header_address, plt_idx, got_offset, got_address;\n       uint32_t plt_entry[PLT_ENTRY_INSNS];\n       Elf_Internal_Rela rela;\n-\n-      BFD_ASSERT (h->dynindx != -1);\n+      asection *plt, *gotplt, *relplt;\n+\n+      /* When building a static executable, use .iplt, .igot.plt and\n+\t .rela.iplt sections for STT_GNU_IFUNC symbols.  */\n+      if (htab->elf.splt != NULL)\n+        {\n+          plt = htab->elf.splt;\n+          gotplt = htab->elf.sgotplt;\n+          relplt = htab->elf.srelplt;\n+        }\n+      else\n+        {\n+          plt = htab->elf.iplt;\n+          gotplt = htab->elf.igotplt;\n+          relplt = htab->elf.irelplt;\n+        }\n+\n+      /* This symbol has an entry in the procedure linkage table.  Set\n+         it up.  */\n+      if ((h->dynindx == -1\n+\t   && !((h->forced_local || bfd_link_executable (info))\n+\t\t&& h->def_regular\n+\t\t&& h->type == STT_GNU_IFUNC))\n+\t  || plt == NULL\n+\t  || gotplt == NULL\n+\t  || relplt == NULL)\n+\treturn FALSE;\n \n       /* Calculate the address of the PLT header.  */\n-      header_address = sec_addr (htab->elf.splt);\n+      header_address = sec_addr (plt);\n \n-      /* Calculate the index of the entry.  */\n-      plt_idx = (h->plt.offset - PLT_HEADER_SIZE) / PLT_ENTRY_SIZE;\n+      /* Calculate the index of the entry and the offset of .got.plt entry.\n+\t For static executables, we don't reserve anything.  */\n+      if (plt == htab->elf.splt)\n+\t{\n+\t  plt_idx = (h->plt.offset - PLT_HEADER_SIZE) / PLT_ENTRY_SIZE;\n+\t  got_offset = GOTPLT_HEADER_SIZE + (plt_idx * GOT_ENTRY_SIZE);\n+\t}\n+      else\n+\t{\n+\t  plt_idx = h->plt.offset / PLT_ENTRY_SIZE;\n+\t  got_offset = plt_idx * GOT_ENTRY_SIZE;\n+\t}\n \n       /* Calculate the address of the .got.plt entry.  */\n-      got_address = riscv_elf_got_plt_val (plt_idx, info);\n+      got_address = sec_addr (gotplt) + got_offset;\n \n       /* Find out where the .plt entry should go.  */\n-      loc = htab->elf.splt->contents + h->plt.offset;\n+      loc = plt->contents + h->plt.offset;\n \n       /* Fill in the PLT entry itself.  */\n       if (! riscv_make_plt_entry (output_bfd, got_address,\n@@ -2327,16 +2850,37 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \tbfd_put_32 (output_bfd, plt_entry[i], loc + 4*i);\n \n       /* Fill in the initial value of the .got.plt entry.  */\n-      loc = htab->elf.sgotplt->contents\n-\t    + (got_address - sec_addr (htab->elf.sgotplt));\n-      bfd_put_NN (output_bfd, sec_addr (htab->elf.splt), loc);\n+      loc = gotplt->contents + (got_address - sec_addr (gotplt));\n+      bfd_put_NN (output_bfd, sec_addr (plt), loc);\n \n-      /* Fill in the entry in the .rela.plt section.  */\n       rela.r_offset = got_address;\n-      rela.r_addend = 0;\n-      rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_JUMP_SLOT);\n \n-      loc = htab->elf.srelplt->contents + plt_idx * sizeof (ElfNN_External_Rela);\n+      if (h->dynindx == -1\n+\t  || ((bfd_link_executable (info)\n+\t       || ELF_ST_VISIBILITY (h->other) != STV_DEFAULT)\n+\t      && h->def_regular\n+\t      && h->type == STT_GNU_IFUNC))\n+\t{\n+\t  info->callbacks->minfo (_(\"Local IFUNC function `%s' in %pB\\n\"),\n+\t\t\t\t  h->root.root.string,\n+\t\t\t\t  h->root.u.def.section->owner);\n+\n+\t  /* If an STT_GNU_IFUNC symbol is locally defined, generate\n+\t     R_RISCV_IRELATIVE instead of R_RISCV_JUMP_SLOT.  */\n+\t  asection *sec = h->root.u.def.section;\n+\t  rela.r_info = ELFNN_R_INFO (0, R_RISCV_IRELATIVE);\n+\t  rela.r_addend = h->root.u.def.value\n+\t\t\t  + sec->output_section->vma\n+\t\t\t  + sec->output_offset;\n+\t}\n+      else\n+\t{\n+\t  /* Fill in the entry in the .rela.plt section.  */\n+\t  rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_JUMP_SLOT);\n+\t  rela.r_addend = 0;\n+\t}\n+\n+      loc = relplt->contents + plt_idx * sizeof (ElfNN_External_Rela);\n       bed->s->swap_reloca_out (output_bfd, &rela, loc);\n \n       if (!h->def_regular)\n@@ -2369,13 +2913,73 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \n       rela.r_offset = sec_addr (sgot) + (h->got.offset &~ (bfd_vma) 1);\n \n+      /* Handle the ifunc symbol in GOT entry.  */\n+      if (h->def_regular\n+\t  && h->type == STT_GNU_IFUNC)\n+\t{\n+\t  if (h->plt.offset == (bfd_vma) -1)\n+\t    {\n+\t      /* STT_GNU_IFUNC is referenced without PLT.  */\n+\t      if (htab->elf.splt == NULL)\n+\t\t{\n+\t\t  /* use .rel[a].iplt section to store .got relocations\n+\t\t     in static executable.  */\n+\t\t  srela = htab->elf.irelplt;\n+\t\t}\n+\t      if (SYMBOL_REFERENCES_LOCAL (info, h))\n+\t\t{\n+\t\t  info->callbacks->minfo (_(\"Local IFUNC function `%s' in %pB\\n\"),\n+\t\t\t\t\t  h->root.root.string,\n+\t\t\t\t\t  h->root.u.def.section->owner);\n+\n+\t\t  rela.r_info = ELFNN_R_INFO (0, R_RISCV_IRELATIVE);\n+\t\t  rela.r_addend = (h->root.u.def.value\n+\t\t\t\t   + h->root.u.def.section->output_section->vma\n+\t\t\t\t   + h->root.u.def.section->output_offset);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Generate R_RISCV_NN.  */\n+\t\t  BFD_ASSERT((h->got.offset & 1) == 0);\n+\t\t  BFD_ASSERT (h->dynindx != -1);\n+\t\t  rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_NN);\n+\t\t  rela.r_addend = 0;\n+\t\t}\n+\t    }\n+\t  else if (bfd_link_pic (info))\n+\t    {\n+\t      /* Generate R_RISCV_NN.  */\n+\t      BFD_ASSERT((h->got.offset & 1) == 0);\n+\t      BFD_ASSERT (h->dynindx != -1);\n+\t      rela.r_info = ELFNN_R_INFO (h->dynindx, R_RISCV_NN);\n+\t      rela.r_addend = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      asection *plt;\n+\n+\t      if (!h->pointer_equality_needed)\n+\t\tabort ();\n+\n+\t      /* For non-shared object, we can't use .got.plt, which\n+\t\t contains the real function address if we need pointer\n+\t\t equality.  We load the GOT entry with the PLT entry.  */\n+\t      plt = htab->elf.splt ? htab->elf.splt : htab->elf.iplt;\n+\t      bfd_put_NN (output_bfd, (plt->output_section->vma\n+\t\t\t\t       + plt->output_offset\n+\t\t\t\t       + h->plt.offset),\n+\t\t\t  htab->elf.sgot->contents\n+\t\t\t  + (h->got.offset & ~(bfd_vma) 1));\n+\t      return TRUE;\n+\t    }\n+\t}\n       /* If this is a local symbol reference, we just want to emit a RELATIVE\n \t reloc.  This can happen if it is a -Bsymbolic link, or a pie link, or\n \t the symbol was forced to be local because of a version file.\n \t The entry in the global offset table will already have been\n \t initialized in the relocate_section function.  */\n-      if (bfd_link_pic (info)\n-\t  && SYMBOL_REFERENCES_LOCAL (info, h))\n+      else if (bfd_link_pic (info)\n+\t       && SYMBOL_REFERENCES_LOCAL (info, h))\n \t{\n \t  BFD_ASSERT((h->got.offset & 1) != 0);\n \t  asection *sec = h->root.u.def.section;\n@@ -2423,6 +3027,18 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n   return TRUE;\n }\n \n+/* Finish up local dynamic symbol handling.  We set the contents of\n+   various dynamic sections here.  */\n+\n+static bfd_boolean\n+riscv_elf_finish_local_dynamic_symbol (void **slot, void *inf)\n+{\n+  struct elf_link_hash_entry *h = (struct elf_link_hash_entry *) *slot;\n+  struct bfd_link_info *info = (struct bfd_link_info *) inf;\n+\n+  return riscv_elf_finish_dynamic_symbol (info->output_bfd, info, h, NULL);\n+}\n+\n /* Finish up the dynamic sections.  */\n \n static bfd_boolean\n@@ -2549,6 +3165,11 @@ riscv_elf_finish_dynamic_sections (bfd *output_bfd,\n       elf_section_data (output_section)->this_hdr.sh_entsize = GOT_ENTRY_SIZE;\n     }\n \n+  /* Fill PLT and GOT entries for local STT_GNU_IFUNC symbols.  */\n+  htab_traverse (htab->loc_hash_table,\n+\t\t riscv_elf_finish_local_dynamic_symbol,\n+\t\t info);\n+\n   return TRUE;\n }\n \n@@ -4052,6 +4673,12 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n \t  reserve_size = (isym->st_size - rel->r_addend) > isym->st_size\n \t    ? 0 : isym->st_size - rel->r_addend;\n \n+\t  /* Relocate against local STT_GNU_IFUNC symbol.  we have created\n+\t     a fake global symbol entry for this, so deal with the local ifunc\n+\t     as a global.  */\n+\t  if (ELF_ST_TYPE (isym->st_info) == STT_GNU_IFUNC)\n+\t    continue;\n+\n \t  if (isym->st_shndx == SHN_UNDEF)\n \t    sym_sec = sec, symval = rel->r_offset;\n \t  else\n@@ -4082,6 +4709,10 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n \t\t || h->root.type == bfd_link_hash_warning)\n \t    h = (struct elf_link_hash_entry *) h->root.u.i.link;\n \n+\t  /* Disable the relaxation for ifunc.  */\n+\t  if (h != NULL && h->type == STT_GNU_IFUNC)\n+\t    continue;\n+\n \t  if (h->root.type == bfd_link_hash_undefweak\n \t      && (relax_func == _bfd_riscv_relax_lui\n \t\t  || relax_func == _bfd_riscv_relax_pc))"
    },
    {
      "sha": "003df59841e0c57dc42cd69872da18e74117e415",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -854,6 +854,21 @@ static reloc_howto_type howto_table[] =\n \t 0,\t\t\t\t/* src_mask */\n \t 0xffffffff,\t\t\t/* dst_mask */\n \t FALSE),\t\t\t/* pcrel_offset */\n+\n+  /* Relocation against a local ifunc symbol in a shared object.  */\n+  HOWTO (R_RISCV_IRELATIVE,\t\t/* type */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t FALSE,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_RISCV_IRELATIVE\",\t\t/* name */\n+\t FALSE,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t FALSE),\t\t\t/* pcrel_offset */\n };\n \n /* A mapping from BFD reloc types to RISC-V ELF reloc types.  */"
    },
    {
      "sha": "5c1145aa5d5b8a99588c583a381f5905b82ebdec",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -1,3 +1,7 @@\n+2020-10-16  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elf/riscv.h: Add R_RISCV_IRELATIVE to 58.\n+\n 2020-10-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26703"
    },
    {
      "sha": "98c7ac63a9d0bbb35c21731b86a90654dc344eaa",
      "filename": "include/elf/riscv.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/include/elf/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/include/elf/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/riscv.h?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -88,6 +88,7 @@ START_RELOC_NUMBERS (elf_riscv_reloc_type)\n   RELOC_NUMBER (R_RISCV_SET16, 55)\n   RELOC_NUMBER (R_RISCV_SET32, 56)\n   RELOC_NUMBER (R_RISCV_32_PCREL, 57)\n+  RELOC_NUMBER (R_RISCV_IRELATIVE, 58)\n END_RELOC_NUMBERS (R_RISCV_max)\n \n /* Processor specific flags for the ELF header e_flags field.  */"
    },
    {
      "sha": "3a9d3810984556b9ab9cd4342bcc6a1f3abdf917",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -1,3 +1,60 @@\n+2020-10-16  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* emulparams/elf32lriscv-defs.sh: Add IREL_IN_PLT.\n+\t* testsuite/ld-ifunc/ifunc.exp: Enable ifunc tests for RISC-V.\n+\t* testsuite/ld-riscv-elf/ld-riscv-elf.exp (run_dump_test_ifunc):\n+\tNew dump test for ifunc.  There are two arguments, 'target` and\n+\t`output`.  The `target` is rv32 or rv64, and the `output` is used\n+\tto choose which output you want to test (exe, pie or .so).\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01.s: New testcase.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-01-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-call-02-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-data.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-data.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-data-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-data-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-data-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-got.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-got.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-got-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-got-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-got-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-nonplt.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-nonplt.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-nonplt-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-nonplt-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-nonplt-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-01.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-01.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-01-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-01-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-01-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-02.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-02.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-02-exe.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-02-pic.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-plt-02-pie.rd: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-resolver.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-caller.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-exe.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-pic.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-pie.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-caller-pcrel.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pic.d: Likewise.\n+\t* testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pie.d: Likewise.\n+\n 2020-10-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26703"
    },
    {
      "sha": "b823cedacab9be67b098891d49baa090629bb8f7",
      "filename": "ld/emulparams/elf32lriscv-defs.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/emulparams/elf32lriscv-defs.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/emulparams/elf32lriscv-defs.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf32lriscv-defs.sh?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -26,6 +26,7 @@ case \"$target\" in\n     ;;\n esac\n \n+IREL_IN_PLT=\n TEXT_START_ADDR=0x10000\n MAXPAGESIZE=\"CONSTANT (MAXPAGESIZE)\"\n COMMONPAGESIZE=\"CONSTANT (COMMONPAGESIZE)\""
    },
    {
      "sha": "9ed4bd7841a9ed66d959249b971fbc25d4f77499",
      "filename": "ld/testsuite/ld-ifunc/ifunc.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-ifunc/ifunc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-ifunc/ifunc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ifunc/ifunc.exp?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -39,7 +39,6 @@ if { ![is_elf_format] || ![supports_gnu_osabi]\n      || [istarget nds32*-*-*]\n      || [istarget nios2-*-*]\n      || [istarget or1k-*-*]\n-     || [istarget riscv*-*-*]\n      || [istarget score*-*-*]\n      || [istarget sh*-*-*]\n      || [istarget tic6x-*-*]\n@@ -736,7 +735,8 @@ run_ld_link_exec_tests [list \\\n if { [isnative]\n      && !([istarget \"powerpc-*-*\"]\n            || [istarget \"aarch64*-*-*\"]\n-           || [istarget \"sparc*-*-*\"]) } {\n+           || [istarget \"sparc*-*-*\"]\n+           || [istarget \"riscv*-*-*\"]) } {\n run_ld_link_exec_tests [list \\\n     [list \\\n \t\"Run pr23169a\" \\"
    },
    {
      "sha": "0de47a4009f403bb5426192d95f2f70870f4f19f",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-nonplt-exe.rd",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-nonplt-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,4 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "e2e7ad923a5888edd69983495f0b088cf8eb0807",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-nonplt-pic.rd",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-nonplt-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,7 @@\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.ifunc' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "f9fbd877c588d624a737f8f291a132e80c4b9b6f",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-nonplt-pie.rd",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-nonplt-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,7 @@\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*\n+#...\n+Relocation section '.rela.ifunc' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "e3517d3c654c7da9f6bd9703312c7fa98418a663",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-nonplt.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-nonplt.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,11 @@\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(_GLOBAL_OFFSET_TABLE_.*|.*)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(__DATA_BEGIN__|.*)>\n+#..."
    },
    {
      "sha": "ce6ca691fa7f06b4a41a5ef83c0ccd3e53951571",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-nonplt.s",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-nonplt.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-nonplt.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,39 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+.L1:\n+\tauipc\tx1, %got_pcrel_hi (foo)\n+.ifdef __64_bit__\n+\tld\tx1, %pcrel_lo (.L1) (x1)\n+.else\n+\tlw\tx1, %pcrel_lo (.L1) (x1)\n+.endif\n+\n+.L2:\n+\tauipc\tx2, %pcrel_hi (foo_addr)\n+.ifdef __64_bit__\n+\tld\tx2, %pcrel_lo (.L2) (x2)\n+.else\n+\tlw\tx2, %pcrel_lo (.L2) (x2)\n+.endif\n+\tret\n+\t.size\tbar, .-bar\n+\n+\t.data\n+foo_addr:\n+.ifdef __64_bit__\n+\t.quad\tfoo\n+.else\n+\t.long\tfoo\n+.endif"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-01-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-01-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "6f5218b967808ace1db175258e0e9e6e86a1a38a",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-01-pic.rd",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-01-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,7 @@\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-01-pie.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-01-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "bed9fe6795592fd6f0004c9e65964db51728e01b",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-01.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-01.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,19 @@\n+#...\n+Disassembly of section .plt:\n+#...\n+0+[0-9a-f]+ <(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>:\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(_GLOBAL_OFFSET_TABLE_.*|__DATA_BEGIN__.*|.*)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+#..."
    },
    {
      "sha": "65c65cdca57fdd5d6946845cdf00f9c1ce9ccba2",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-01.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-01.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-01.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,31 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+.L1:\n+\tauipc\tx1, %got_pcrel_hi (foo)\n+.ifdef __64_bit__\n+\tld\tx1, %pcrel_lo (.L1) (x1)\n+.else\n+\tlw\tx1, %pcrel_lo (.L1) (x1)\n+.endif\n+\n+.L2:\n+\tauipc\tx2, %pcrel_hi (foo)\n+\taddi\tx2, x2, %pcrel_lo (.L2)\n+\n+\tcall\tfoo\n+\tcall\tfoo@plt\n+\n+\tret\n+\t.size\tbar, .-bar"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-02-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-02-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "3299aa48f245e0380cb4526faf58e36388c512e4",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-02-pic.rd",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-02-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,11 @@\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.ifunc' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "28a3c992f4b414be34556ac7201025b789accf8f",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-02-pie.rd",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-02-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,7 @@\n+Relocation section '.rela.ifunc' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "b8638b963fdb2962bf602ca6ff9eae2a3a559983",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-02.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-02.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,21 @@\n+#...\n+Disassembly of section .plt:\n+#...\n+0+[0-9a-f]+ <(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>:\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(_GLOBAL_OFFSET_TABLE_.*|.*)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(__DATA_BEGIN__.*|.*)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+#..."
    },
    {
      "sha": "c3022be0e08e8238be8f3f328558cdb2b1d417df",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-plt-02.s",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-plt-02.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-plt-02.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,46 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+.L1:\n+\tauipc\tx1, %got_pcrel_hi (foo)\n+.ifdef __64_bit__\n+\tld\tx1, %pcrel_lo (.L1) (x1)\n+.else\n+\tlw\tx1, %pcrel_lo (.L1) (x1)\n+.endif\n+\n+.L2:\n+\tauipc\tx2, %pcrel_hi (foo_addr)\n+.ifdef __64_bit__\n+\tld\tx2, %pcrel_lo (.L2) (x2)\n+.else\n+\tlw\tx2, %pcrel_lo (.L2) (x2)\n+.endif\n+\n+.L3:\n+\tauipc\tx3, %pcrel_hi (foo)\n+\taddi\tx3, x3, %pcrel_lo (.L3)\n+\n+\tcall\tfoo\n+\tcall\tfoo@plt\n+\tret\n+\t.size\tbar, .-bar\n+\n+\t.data\n+foo_addr:\n+.ifdef __64_bit__\n+\t.quad\tfoo\n+.else\n+\t.long\tfoo\n+.endif"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "7bfaa2d266b48a7b74fc09e168d077989167221e",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pic.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pie.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "d4457c9be3cec3bd945277ee5287e9d7a255501e",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,13 @@\n+#...\n+Disassembly of section .plt:\n+#...\n+0+[0-9a-f]+ <(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>:\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+#..."
    },
    {
      "sha": "89e63260fe2eb8dc36a1083e79cdc81daaaeaaa4",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-01.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,17 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+\tcall\tfoo\n+\tret\n+\t.size\tbar, .-bar"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "7bfaa2d266b48a7b74fc09e168d077989167221e",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pic.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pie.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "40c0309ee2674ad28554a856f84b0677a4cf4663",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,15 @@\n+#...\n+Disassembly of section .plt:\n+#...\n+0+[0-9a-f]+ <(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>:\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+jalr[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+#..."
    },
    {
      "sha": "e493c47341a73c20684d46fbc2e48a520f7d3954",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-call-02.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,18 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+\tcall\tfoo@plt\n+\tcall\tfoo\n+\tret\n+\t.size\tbar, .-bar"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-data-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "9be346bd20e5ef8bdffb0385866ef05eab4f41c4",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pic.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.ifunc' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "e14b02ba75d1dd71baaa7815f3609f853f007ed6",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pie.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-data-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.ifunc' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "1956cc3e101b1bf2e52d82653b90a1125a25e187",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-data.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-data.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,9 @@\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(__DATA_BEGIN__.*|.*)>\n+#..."
    },
    {
      "sha": "b49bda1279dd89489718b2ce6e36b4b11544a213",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-data.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-data.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-data.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,31 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+.L1:\n+\tauipc\tx1, %pcrel_hi (foo_addr)\n+.ifdef __64_bit__\n+\tld\tx1, %pcrel_lo (.L1) (x1)\n+.else\n+\tlw\tx1, %pcrel_lo (.L1) (x1)\n+.endif\n+\tret\n+\t.size\tbar, .-bar\n+\n+\t.data\n+foo_addr:\n+.ifdef __64_bit__\n+\t.quad\tfoo\n+.else\n+\t.long\tfoo\n+.endif"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-got-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "41cbc0712c98796321884441e2ff0d345531c38d",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pic.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "cef1a77c4376716b095bbe79a2278a1cc9cfd1d8",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pie.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-got-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "3277e8f10bdf61db4f5b5d82e9439f30eddd73fc",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-got.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-got.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,9 @@\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(_GLOBAL_OFFSET_TABLE_.*|.*)>\n+#..."
    },
    {
      "sha": "eca16d52cfde56aa5862c7129e3099f8a87445d1",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-got.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-got.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-got.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,23 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+.L1:\n+\tauipc\tx1, %got_pcrel_hi (foo)\n+.ifdef __64_bit__\n+\tld\tx1, %pcrel_lo (.L1) (x1)\n+.else\n+\tlw\tx1, %pcrel_lo (.L1) (x1)\n+.endif\n+\tret\n+\t.size\tbar, .-bar"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-exe.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-exe.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-exe.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-exe.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "7bfaa2d266b48a7b74fc09e168d077989167221e",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pic.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pic.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pic.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pic.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+foo\\(\\)[ \t]+foo \\+ 0"
    },
    {
      "sha": "97461e43cccce662ca04f3f0de797df37572fb7c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pie.rd",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pie.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pie.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel-pie.rd?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,3 @@\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_IRELATIVE[ \t]+[0-9a-f]*"
    },
    {
      "sha": "bc947e3cf29e8e7c5dd5d160a65c25f8cd1df1a9",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,15 @@\n+#...\n+Disassembly of section .plt:\n+#...\n+0+[0-9a-f]+ <(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>:\n+#...\n+Disassembly of section .text:\n+#...\n+0+[0-9a-f]+ <foo_resolver>:\n+#...\n+0+[0-9a-f]+ <bar>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+(lw|ld)[ \t]+.*<(\\*ABS\\*\\+0x[0-9a-f]+@plt|foo@plt|.plt)>\n+#..."
    },
    {
      "sha": "7ea454cec587f2093d1252bb381ae98c45ddd928",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-reloc-pcrel.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,26 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver\n+\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+.L1:\n+\tauipc\tx1, %pcrel_hi (foo)\n+\taddi\tx1, x1, %pcrel_lo (.L1)\n+.L2:\n+\tauipc\tx2, %pcrel_hi (foo)\n+.ifdef __64_bit__\n+\tld\tx2, %pcrel_lo (.L2) (x2)\n+.else\n+\tlw\tx2, %pcrel_lo (.L2) (x2)\n+.endif\n+\tret\n+\t.size\tbar, .-bar"
    },
    {
      "sha": "23c7254ad5b00dc5fa408096e1188a2faf4e1f5c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-nonplt.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-nonplt.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-nonplt.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-nonplt.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,23 @@\n+\t.text\n+\n+\t# Call the IFUNC `foo` which is defined in the other modules.\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+\n+\t.globl\tmain\n+\t.type\tmain, @function\n+main:\n+.L1:\n+\tauipc\tx1, %got_pcrel_hi (foo)\n+\taddi\tx1, x1, %pcrel_lo (.L1)\n+\n+.L2:\n+\tauipc\tx2, %pcrel_hi (foo_addr)\n+\taddi\tx2, x2, %pcrel_lo (.L2)\n+\n+\tret\n+\t.size\tmain, .-main\n+\n+\t.data\n+foo_addr:\n+\t.long\tfoo"
    },
    {
      "sha": "2d29bcd121b0df63e6b6d727c8ee8bd0575c788c",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-pcrel.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-pcrel.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-pcrel.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-pcrel.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,14 @@\n+\t.text\n+\n+\t# Call the IFUNC `foo` which is defined in the other modules.\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+\n+\t.globl\tmain\n+\t.type\tmain, @function\n+main:\n+.L1:\n+\tauipc\tx1, %pcrel_hi (foo)\n+\taddi\tx1, x1, %pcrel_lo (.L1)\n+\tret\n+\t.size\tmain, .-main"
    },
    {
      "sha": "8aa640347065655d0d275b8ec504b5d5b15609bc",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-plt.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-plt.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-plt.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-caller-plt.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,26 @@\n+\t.text\n+\n+\t# Call the IFUNC `foo` which is defined in the other modules.\n+\t.globl\tfoo\n+\t.type\tfoo, %function\n+\n+\t.globl\tmain\n+\t.type\tmain, @function\n+main:\n+.L1:\n+\tauipc\tx1, %got_pcrel_hi (foo)\n+\taddi\tx1, x1, %pcrel_lo (.L1)\n+\n+.L2:\n+\tauipc\tx2, %pcrel_hi (foo_addr)\n+\taddi\tx2, x2, %pcrel_lo (.L2)\n+\n+\tcall\tfoo\n+\tcall\tfoo@plt\n+\n+\tret\n+\t.size\tmain, .-main\n+\n+\t.data\n+foo_addr:\n+\t.long\tfoo"
    },
    {
      "sha": "540a21bc0a331e14f6207f54b0b94c502ba24edc",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-exe.d",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-exe.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-exe.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-exe.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,14 @@\n+#name: Link shared ifunc resolver with non-PLT caller (exe)\n+#source: ifunc-seperate-caller-nonplt.s\n+#as:\n+#ld: -z nocombreloc tmpdir/ifunc-seperate-resolver.so\n+#warning: .*\n+#readelf: -rW\n+\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+[0-9a-f]+[ \t]+foo \\+ 0"
    },
    {
      "sha": "3ed1812cbf5aed7be1a4284c26b1df2136491d85",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pic.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pic.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pic.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pic.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,13 @@\n+#name: Link shared ifunc resolver with non-PLT caller (pic)\n+#source: ifunc-seperate-caller-nonplt.s\n+#as:\n+#ld: -z nocombreloc -shared tmpdir/ifunc-seperate-resolver.so\n+#readelf: -rW\n+\n+Relocation section '.rela.data' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0"
    },
    {
      "sha": "c9c9eabaeb08157c04933216b198a9a888baa42e",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pie.d",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pie.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pie.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-nonplt-pie.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,14 @@\n+#name: Link shared ifunc resolver with non-PLT caller (pie)\n+#source: ifunc-seperate-caller-nonplt.s\n+#as:\n+#ld: -z nocombreloc -pie tmpdir/ifunc-seperate-resolver.so\n+#warning: .*\n+#readelf: -rW\n+\n+Relocation section '.rela.data' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0"
    },
    {
      "sha": "1c11a2d15b24d1c1751a5cc25c9f8980f3f1fa44",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pic.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pic.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pic.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pic.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Link shared IFUNC resolver with PCREL caller (pic)\n+#source: ifunc-seperate-caller-pcrel.s\n+#as:\n+#ld: -z nocombreloc -shared tmpdir/ifunc-seperate-resolver.so\n+#error: .*unresolvable R_RISCV_PCREL_HI20 relocation.*"
    },
    {
      "sha": "0d0e3cc1c82427190e40ad900ca5d21632a88cdb",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pie.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pie.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pie.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-pcrel-pie.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Link shared IFUNC resolver with PCREL caller (pie)\n+#source: ifunc-seperate-caller-pcrel.s\n+#as:\n+#ld: -z nocombreloc -pie tmpdir/ifunc-seperate-resolver.so\n+#error: .*unresolvable R_RISCV_PCREL_HI20 relocation.*"
    },
    {
      "sha": "a5385641868a454f31d6642294f63e60ba54e365",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-exe.d",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-exe.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-exe.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-exe.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,14 @@\n+#name: Link shared ifunc resolver with PLT caller (exe)\n+#source: ifunc-seperate-caller-plt.s\n+#as:\n+#ld: -z nocombreloc tmpdir/ifunc-seperate-resolver.so\n+#warning: .*\n+#readelf: -rW\n+\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+[0-9a-f]+[ \t]+foo \\+ 0"
    },
    {
      "sha": "9efa244f04402672265f76790f949e0ee0a76faa",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pic.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pic.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pic.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pic.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,17 @@\n+#name: Link shared ifunc resolver with PLT caller (pic)\n+#source: ifunc-seperate-caller-plt.s\n+#as:\n+#ld: -z nocombreloc -shared tmpdir/ifunc-seperate-resolver.so\n+#readelf: -rW\n+\n+Relocation section '.rela.data' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+[0-9a-f]+[ \t]+foo \\+ 0"
    },
    {
      "sha": "8349e61ed48d057a59ccd450119b48721d4a11d8",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pie.d",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pie.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pie.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-plt-pie.d?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,18 @@\n+#name: Link shared ifunc resolver with PLT caller (pie)\n+#source: ifunc-seperate-caller-plt.s\n+#as:\n+#ld: -z nocombreloc -pie tmpdir/ifunc-seperate-resolver.so\n+#warning: .*\n+#readelf: -rW\n+\n+Relocation section '.rela.data' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.got' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_(32|64)[ \t]+[0-9a-f]+[ \t]+foo \\+ 0\n+#...\n+Relocation section '.rela.plt' at .*\n+[ ]+Offset[ ]+Info[ ]+Type[ ]+.*\n+[0-9a-f]+[ \t]+[0-9a-f]+[ \t]+R_RISCV_JUMP_SLOT[ \t]+[0-9a-f]+[ \t]+foo \\+ 0"
    },
    {
      "sha": "a2228473422f4b32549842a3b6692aba767c4f26",
      "filename": "ld/testsuite/ld-riscv-elf/ifunc-seperate-resolver.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-resolver.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ifunc-seperate-resolver.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ifunc-seperate-resolver.s?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -0,0 +1,11 @@\n+\t.text\n+\n+\t.type\tfoo_resolver, @function\n+foo_resolver:\n+\tret\n+\t.size\tfoo_resolver, .-foo_resolver\n+\n+\t# The ifunc `foo` is called by the ifunc-caller.\n+\t.globl\tfoo\n+\t.type\tfoo, %gnu_indirect_function\n+\t.set\tfoo, foo_resolver"
    },
    {
      "sha": "b82e0921afdc1adca82b96dd41949b7425712394",
      "filename": "ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "status": "modified",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02dd9d25682311f45e1bb9629cbe4f6727e245a8/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp?ref=02dd9d25682311f45e1bb9629cbe4f6727e245a8",
      "patch": "@@ -19,6 +19,47 @@\n # MA 02110-1301, USA.\n #\n \n+# target: rv32 or rv64.\n+# output: Which output you want?  (exe, pie, .so)\n+proc run_dump_test_ifunc { name target output} {\n+    set asflags \"\"\n+    set ldflags \"-z nocombreloc\"\n+\n+    switch -- $output {\n+\texe {\n+\t    set ext \"exe\"\n+\t}\n+\tpie {\n+\t    set ext \"pie\"\n+\t    set ldflags \"$ldflags -pie\"\n+\t}\n+\tpic {\n+\t    set ext \"so\"\n+\t    set ldflags \"$ldflags -shared\"\n+\t}\n+    }\n+\n+    switch -- $target {\n+\trv32 {\n+\t    set asflags \"$asflags -march=rv32i -mabi=ilp32\"\n+\t    set ldflags \"$ldflags -melf32lriscv\"\n+\t}\n+\trv64 {\n+\t    set asflags \"$asflags -march=rv64i -mabi=lp64 -defsym __64_bit__=1\"\n+\t    set ldflags \"$ldflags -melf64lriscv\"\n+\t}\n+    }\n+\n+    run_ld_link_tests [list \\\n+\t[list \"$name ($target-$output)\" \\\n+\t      \"$ldflags\" \"\" \\\n+\t      \"$asflags\" \\\n+\t      [list \"$name.s\"] \\\n+\t      [concat [list \"readelf -rW $name-$output.rd\"] \\\n+\t\t      [list \"objdump -dw $name.d\"]] \\\n+\t      \"$name-$target.$ext\"]]\n+}\n+\n if [istarget \"riscv*-*-*\"] {\n     run_dump_test \"call-relax\"\n     run_dump_test \"c-lui\"\n@@ -88,4 +129,74 @@ if [istarget \"riscv*-*-*\"] {\n \t    {} \"lib-nopic-01a.so\" }\n     }\n     run_dump_test \"lib-nopic-01b\"\n+\n+    # IFUNC testcases.\n+    # Check IFUNC by single type relocs.\n+    run_dump_test_ifunc \"ifunc-reloc-call-01\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-reloc-call-01\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-reloc-call-01\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-reloc-call-02\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-reloc-call-02\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-reloc-call-02\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-reloc-pcrel\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-reloc-pcrel\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-reloc-pcrel\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-reloc-data\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-reloc-data\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-reloc-data\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-reloc-got\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-reloc-got\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-reloc-got\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-reloc-pcrel\" rv64 exe\n+    run_dump_test_ifunc \"ifunc-reloc-pcrel\" rv64 pie\n+    run_dump_test_ifunc \"ifunc-reloc-pcrel\" rv64 pic\n+    run_dump_test_ifunc \"ifunc-reloc-data\" rv64 exe\n+    run_dump_test_ifunc \"ifunc-reloc-data\" rv64 pie\n+    run_dump_test_ifunc \"ifunc-reloc-data\" rv64 pic\n+    run_dump_test_ifunc \"ifunc-reloc-got\" rv64 exe\n+    run_dump_test_ifunc \"ifunc-reloc-got\" rv64 pie\n+    run_dump_test_ifunc \"ifunc-reloc-got\" rv64 pic\n+    # Check the IFUNC PLT and non-PLT relocs.\n+    run_dump_test_ifunc \"ifunc-nonplt\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-nonplt\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-nonplt\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-plt-01\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-plt-01\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-plt-01\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-plt-02\" rv32 exe\n+    run_dump_test_ifunc \"ifunc-plt-02\" rv32 pie\n+    run_dump_test_ifunc \"ifunc-plt-02\" rv32 pic\n+    run_dump_test_ifunc \"ifunc-nonplt\" rv64 exe\n+    run_dump_test_ifunc \"ifunc-nonplt\" rv64 pie\n+    run_dump_test_ifunc \"ifunc-nonplt\" rv64 pic\n+    run_dump_test_ifunc \"ifunc-plt-01\" rv64 exe\n+    run_dump_test_ifunc \"ifunc-plt-01\" rv64 pie\n+    run_dump_test_ifunc \"ifunc-plt-01\" rv64 pic\n+    run_dump_test_ifunc \"ifunc-plt-02\" rv64 exe\n+    run_dump_test_ifunc \"ifunc-plt-02\" rv64 pie\n+    run_dump_test_ifunc \"ifunc-plt-02\" rv64 pic\n+\n+    # Setup shared libraries.\n+    run_ld_link_tests {\n+       { \"Build shared library for IFUNC non-PLT caller\"\n+\t \"-shared\" \"\" \"\" {ifunc-seperate-caller-nonplt.s}\n+\t {} \"ifunc-seperate-caller.so\" }\n+       { \"Build shared library for IFUNC PLT caller\"\n+\t \"-shared\" \"\" \"\" {ifunc-seperate-caller-plt.s}\n+\t {} \"ifunc-seperate-caller.so\" }\n+       { \"Build shared library for IFUNC resolver\"\n+\t \"-shared\" \"\" \"\" {ifunc-seperate-resolver.s}\n+\t {} \"ifunc-seperate-resolver.so\" }\n+    }\n+    # The IFUNC resolver and caller are in the seperate modules.\n+    # If IFUNC resolver and caller are linked to the same module,\n+    # then the result are the same as the run_dump_test_ifunc.\n+    run_dump_test \"ifunc-seperate-nonplt-exe\"\n+    run_dump_test \"ifunc-seperate-nonplt-pie\"\n+    run_dump_test \"ifunc-seperate-nonplt-pic\"\n+    run_dump_test \"ifunc-seperate-plt-exe\"\n+    run_dump_test \"ifunc-seperate-plt-pie\"\n+    run_dump_test \"ifunc-seperate-plt-pic\"\n+    run_dump_test \"ifunc-seperate-pcrel-pie\"\n+    run_dump_test \"ifunc-seperate-pcrel-pic\"\n }"
    }
  ]
}