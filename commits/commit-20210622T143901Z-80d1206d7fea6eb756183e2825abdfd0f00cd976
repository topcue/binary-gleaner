{
  "sha": "80d1206d7fea6eb756183e2825abdfd0f00cd976",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODBkMTIwNmQ3ZmVhNmViNzU2MTgzZTI4MjVhYmRmZDBmMDBjZDk3Ng==",
  "commit": {
    "author": {
      "name": "Andreas Schwab",
      "email": "schwab@suse.de",
      "date": "2021-06-21T09:38:23Z"
    },
    "committer": {
      "name": "Andreas Schwab",
      "email": "schwab@suse.de",
      "date": "2021-06-22T14:39:01Z"
    },
    "message": "gdb: Support DW_LLE_start_end\n\nWithout that it is impossible to debug on riscv64.\n\ngdb/\n\tPR symtab/27999\n\t* dwarf2/loc.c (decode_debug_loclists_addresses): Support\n\tDW_LLE_start_end.\n\ngdb/testsuite/\n\tPR symtab/27999\n\t* lib/dwarf.exp (start_end): New proc inside loclists.\n\t* gdb.dwarf2/loclists-start-end.exp: New file.\n\t* gdb.dwarf2/loclists-start-end.c: New file.",
    "tree": {
      "sha": "08b044ad27f4205a4ca17d580ac2f3195e1918c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/08b044ad27f4205a4ca17d580ac2f3195e1918c1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/80d1206d7fea6eb756183e2825abdfd0f00cd976",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80d1206d7fea6eb756183e2825abdfd0f00cd976",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/80d1206d7fea6eb756183e2825abdfd0f00cd976",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80d1206d7fea6eb756183e2825abdfd0f00cd976/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "e5b771060e42232b6d70e9fce0e6907bc979ef21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5b771060e42232b6d70e9fce0e6907bc979ef21",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e5b771060e42232b6d70e9fce0e6907bc979ef21"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 235,
    "deletions": 1
  },
  "files": [
    {
      "sha": "d9e0a3a4f4da860f61529c2572e34eeb8e003db3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-22  Andreas Schwab  <schwab@suse.de>\n+\n+\tPR symtab/27999\n+\t* dwarf2/loc.c (decode_debug_loclists_addresses): Support\n+\tDW_LLE_start_end.\n+\n 2021-06-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* breakpoint.c (insert_bp_location): If we catch a"
    },
    {
      "sha": "d57cdc165ba19627400cf67bbb9aa3059baf5bce",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "patch": "@@ -255,9 +255,27 @@ decode_debug_loclists_addresses (dwarf2_per_cu_data *per_cu,\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_OFFSET_PAIR;\n \n+    case DW_LLE_start_end:\n+      if (loc_ptr + 2 * addr_size > buf_end)\n+\treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n+      if (signed_addr_p)\n+\t*low = extract_signed_integer (loc_ptr, addr_size, byte_order);\n+      else\n+\t*low = extract_unsigned_integer (loc_ptr, addr_size, byte_order);\n+\n+      loc_ptr += addr_size;\n+      if (signed_addr_p)\n+\t*high = extract_signed_integer (loc_ptr, addr_size, byte_order);\n+      else\n+\t*high = extract_unsigned_integer (loc_ptr, addr_size, byte_order);\n+\n+      loc_ptr += addr_size;\n+      *new_ptr = loc_ptr;\n+      return DEBUG_LOC_START_END;\n+\n     /* Following cases are not supported yet.  */\n     case DW_LLE_startx_endx:\n-    case DW_LLE_start_end:\n     case DW_LLE_default_location:\n     default:\n       return DEBUG_LOC_INVALID_ENTRY;"
    },
    {
      "sha": "19f780f83528471a01e0041633f5a86409783a47",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-22  Andreas Schwab  <schwab@suse.de>\n+\n+\tPR symtab/27999\n+\t* lib/dwarf.exp (start_end): New proc inside loclists.\n+\t* gdb.dwarf2/loclists-start-end.exp: New file.\n+\t* gdb.dwarf2/loclists-start-end.c: New file.\n+\n 2021-06-22  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.dwarf2/imported-unit-c.exp: New file."
    },
    {
      "sha": "2bffbf2ac4c038db814bd1a90a8da5312f50de2a",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-start-end.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/gdb.dwarf2/loclists-start-end.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/gdb.dwarf2/loclists-start-end.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-start-end.c?ref=80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+static int\n+func1 (void)\n+{\n+  asm (\"func1_label: .global func1_label\\n\");\n+  return 1;\n+}\n+\n+static int\n+func2 (void)\n+{\n+  asm (\"func2_label: .global func2_label\\n\");\n+  return 2;\n+}\n+\n+int\n+main (void)\n+{\n+  func1 ();\n+  func2 ();\n+}"
    },
    {
      "sha": "43ddefcf61de5fbc29e26a62f92e789a76179f3c",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-start-end.exp",
      "status": "added",
      "additions": 137,
      "deletions": 0,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/gdb.dwarf2/loclists-start-end.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/gdb.dwarf2/loclists-start-end.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-start-end.exp?ref=80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "patch": "@@ -0,0 +1,137 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test support for DW_LLE_start_end (PR symtab/27999).\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# Test with 32-bit and 64-bit DWARF.\n+foreach_with_prefix is_64 {false true} {\n+    if { $is_64 } {\n+\tstandard_testfile .c -dw64.S\n+\tset testfile ${testfile}-dw64\n+    } else {\n+\tstandard_testfile .c -dw32.S\n+\tset testfile ${testfile}-dw32\n+    }\n+\n+    # Get the addresses / lengths of func1 and func2.\n+    lassign [function_range func1 $srcdir/$subdir/$srcfile] func1_addr func1_len\n+    lassign [function_range func2 $srcdir/$subdir/$srcfile] func2_addr func2_len\n+\n+    set asm_file [standard_output_file $srcfile2]\n+    Dwarf::assemble $asm_file {\n+\tglobal func1_addr func1_len\n+\tglobal func2_addr func2_len\n+\tglobal is_64\n+\n+\t# The CU uses the DW_FORM_loclistx form to refer to the .debug_loclists\n+\t# section.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    declare_labels int_type\n+\n+\t    DW_TAG_compile_unit {\n+\t\t{DW_AT_loclists_base cu_table DW_FORM_sec_offset}\n+\t    } {\n+\t\tint_type: DW_TAG_base_type {\n+\t\t    {DW_AT_byte_size 4 DW_FORM_data1}\n+\t\t    {DW_AT_encoding @DW_ATE_signed}\n+\t\t    {DW_AT_name \"int\"}\n+\t\t}\n+\n+\t\tDW_TAG_variable {\n+\t\t    {DW_AT_name \"foo\"}\n+\t\t    {DW_AT_location 1 DW_FORM_loclistx}\n+\t\t    {DW_AT_type :$int_type}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func1\"}\n+\t\t    {DW_AT_low_pc $func1_addr}\n+\t\t    {DW_AT_high_pc $func1_len DW_FORM_udata}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func2\"}\n+\t\t    {DW_AT_low_pc $func2_addr}\n+\t\t    {DW_AT_high_pc $func2_len DW_FORM_udata}\n+\t\t}\n+\t    }\n+\t}\n+\n+\tloclists -is-64 $is_64 {\n+\t    # This table is unused, but exists so that the used table is not at\n+\t    # the beginning of the section.\n+\t    table {\n+\t\tlist_ {\n+\t\t    start_end 0x1000 0x2000 { DW_OP_addr 0x100000 }\n+\t\t}\n+\t    }\n+\n+\t    # The lists in this table are accessed by index (DW_FORM_rnglistx).\n+\t    table -post-header-label cu_table {\n+\t\t# This list is unused, but exists to offset the next ones.\n+\t\tlist_ {\n+\t\t    start_end 0x1000 0x2000 { DW_OP_addr 0x100000 }\n+\t\t}\n+\n+\t\t# For variable foo.\n+\t\tlist_ {\n+\t\t    # When in func1.\n+\t\t    start_end $func1_addr \"$func1_addr + $func1_len\" {\n+\t\t\tDW_OP_constu 0x123456\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\n+\t\t    # When in func2.\n+\t\t    start_end $func2_addr \"$func2_addr + $func2_len\" {\n+\t\t\tDW_OP_constu 0x234567\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t      [list $srcfile $asm_file] {nodebug}] } {\n+\treturn -1\n+    }\n+\n+    if { ![runto_main] } {\n+\tfail \"can't run to main\"\n+\treturn\n+    }\n+\n+    gdb_breakpoint \"func1\"\n+    gdb_breakpoint \"func2\"\n+\n+    gdb_continue_to_breakpoint \"func1\"\n+    with_test_prefix \"at func1\" {\n+\tgdb_test \"print /x foo\" \" = 0x123456\"\n+    }\n+\n+    gdb_continue_to_breakpoint \"func2\"\n+    with_test_prefix \"at func2\" {\n+\tgdb_test \"print /x foo\" \" = 0x234567\"\n+    }\n+}"
    },
    {
      "sha": "4e6879a2d3f564b6836b00d23b671aca33e1f466",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80d1206d7fea6eb756183e2825abdfd0f00cd976/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "patch": "@@ -1849,6 +1849,35 @@ namespace eval Dwarf {\n \t\t    incr _debug_loclists_locdesc_count\n \t\t}\n \n+\t\t# Emit a DW_LLE_start_end entry.\n+\n+\t\tproc start_end { start end locdesc } {\n+\t\t    variable _debug_loclists_is_64_dwarf\n+\t\t    variable _debug_loclists_addr_size\n+\t\t    variable _debug_loclists_offset_size\n+\t\t    variable _debug_loclists_table_count\n+\t\t    variable _debug_loclists_list_count\n+\t\t    variable _debug_loclists_locdesc_count\n+\n+\t\t    _op .byte 0x07 \"DW_LLE_start_end\"\n+\n+\t\t    # Start and end of the address range.\n+\t\t    _op .${_debug_loclists_addr_size}byte $start \"start\"\n+\t\t    _op .${_debug_loclists_addr_size}byte $end \"end\"\n+\n+\t\t    # Length of location description.\n+\t\t    set locdesc_start_label \".Lloclists_table_${_debug_loclists_table_count}_list_${_debug_loclists_list_count}_locdesc_${_debug_loclists_locdesc_count}_start\"\n+\t\t    set locdesc_end_label \".Lloclists_table_${_debug_loclists_table_count}_list_${_debug_loclists_list_count}_locdesc_${_debug_loclists_locdesc_count}_end\"\n+\t\t    _op .uleb128 \"$locdesc_end_label - $locdesc_start_label\" \"locdesc length\"\n+\n+\t\t    define_label $locdesc_start_label\n+\t\t    set dwarf_version 5\n+\t\t    _location $locdesc $dwarf_version $_debug_loclists_addr_size $_debug_loclists_offset_size\n+\t\t    define_label $locdesc_end_label\n+\n+\t\t    incr _debug_loclists_locdesc_count\n+\t\t}\n+\n \t\tuplevel $body\n \n \t\t# Emit end of list."
    }
  ]
}