{
  "sha": "c45ecc9d169436937d06491aa2bf175113e2d502",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzQ1ZWNjOWQxNjk0MzY5MzdkMDY0OTFhYTJiZjE3NTExM2UyZDUwMg==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-04-15T22:39:52Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-04-15T22:40:12Z"
    },
    "message": "gdb fbsd-nat: Use new-style debug macros\n\ngdb/ChangeLog:\n\n\t* fbsd-nat.c (fbsd_lwp_debug_printf, fbsd_nat_debug_printf): New,\n\tuse throughout file.",
    "tree": {
      "sha": "08d08a300e3fa4f8a59ef1ea95efb932bfcb0d03",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/08d08a300e3fa4f8a59ef1ea95efb932bfcb0d03"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c45ecc9d169436937d06491aa2bf175113e2d502",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c45ecc9d169436937d06491aa2bf175113e2d502",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c45ecc9d169436937d06491aa2bf175113e2d502",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c45ecc9d169436937d06491aa2bf175113e2d502/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fd5c30cde5f33c67798581960e60461dc6585a46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd5c30cde5f33c67798581960e60461dc6585a46",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fd5c30cde5f33c67798581960e60461dc6585a46"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 28,
    "deletions": 35
  },
  "files": [
    {
      "sha": "2a8ca58073ed5309e2669392eaef51a6d3eb1601",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c45ecc9d169436937d06491aa2bf175113e2d502/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c45ecc9d169436937d06491aa2bf175113e2d502/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c45ecc9d169436937d06491aa2bf175113e2d502",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-15  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* fbsd-nat.c (fbsd_lwp_debug_printf, fbsd_nat_debug_printf): New,\n+\tuse throughout file.\n+\n 2021-04-15  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-valprint.c (ada_value_print_array): Handle optimized-out"
    },
    {
      "sha": "581c04d5f83defca123c6e4587de98b97c576de3",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 23,
      "deletions": 35,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c45ecc9d169436937d06491aa2bf175113e2d502/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c45ecc9d169436937d06491aa2bf175113e2d502/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=c45ecc9d169436937d06491aa2bf175113e2d502",
      "patch": "@@ -721,6 +721,13 @@ show_fbsd_nat_debug (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n+#define fbsd_lwp_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_fbsd_lwp, \"fbsd-lwp\", fmt, ##__VA_ARGS__)\n+\n+#define fbsd_nat_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_fbsd_nat, \"fbsd-nat\", fmt, ##__VA_ARGS__)\n+\n+\n /*\n   FreeBSD's first thread support was via a \"reentrant\" version of libc\n   (libc_r) that first shipped in 2.2.7.  This library multiplexed all\n@@ -893,10 +900,7 @@ fbsd_add_threads (fbsd_nat_target *target, pid_t pid)\n \t  if (pl.pl_flags & PL_FLAG_EXITED)\n \t    continue;\n #endif\n-\t  if (debug_fbsd_lwp)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t\"FLWP: adding thread for LWP %u\\n\",\n-\t\t\t\tlwps[i]);\n+\t  fbsd_lwp_debug_printf (\"adding thread for LWP %u\", lwps[i]);\n \t  add_thread (target, ptid);\n \t}\n     }\n@@ -1037,11 +1041,8 @@ fbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n     return;\n #endif\n \n-  if (debug_fbsd_lwp)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"FLWP: fbsd_resume for ptid (%d, %ld, %ld)\\n\",\n-\t\t\tptid.pid (), ptid.lwp (),\n-\t\t\tptid.tid ());\n+  fbsd_lwp_debug_printf (\"ptid (%d, %ld, %ld)\", ptid.pid (), ptid.lwp (),\n+\t\t\t ptid.tid ());\n   if (ptid.lwp_p ())\n     {\n       /* If ptid is a specific LWP, suspend all other LWPs in the process.  */\n@@ -1129,9 +1130,7 @@ fbsd_handle_debug_trap (fbsd_nat_target *target, ptid_t ptid,\n      breakpoint.  */\n   if (pl.pl_siginfo.si_code == TRAP_TRACE)\n     {\n-      if (debug_fbsd_nat)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"FNAT: trace trap for LWP %ld\\n\", ptid.lwp ());\n+      fbsd_nat_debug_printf (\"trace trap for LWP %ld\", ptid.lwp ());\n       return true;\n     }\n \n@@ -1142,10 +1141,7 @@ fbsd_handle_debug_trap (fbsd_nat_target *target, ptid_t ptid,\n       struct gdbarch *gdbarch = regcache->arch ();\n       int decr_pc = gdbarch_decr_pc_after_break (gdbarch);\n \n-      if (debug_fbsd_nat)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    \"FNAT: sw breakpoint trap for LWP %ld\\n\",\n-\t\t\t    ptid.lwp ());\n+      fbsd_nat_debug_printf (\"sw breakpoint trap for LWP %ld\", ptid.lwp ());\n       if (decr_pc != 0)\n \t{\n \t  CORE_ADDR pc;\n@@ -1195,14 +1191,12 @@ fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \n \t  if (debug_fbsd_nat)\n \t    {\n-\t      fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t  \"FNAT: stop for LWP %u event %d flags %#x\\n\",\n-\t\t\t\t  pl.pl_lwpid, pl.pl_event, pl.pl_flags);\n+\t      fbsd_nat_debug_printf (\"stop for LWP %u event %d flags %#x\",\n+\t\t\t\t     pl.pl_lwpid, pl.pl_event, pl.pl_flags);\n \t      if (pl.pl_flags & PL_FLAG_SI)\n-\t\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t    \"FNAT: si_signo %u si_code %u\\n\",\n-\t\t\t\t    pl.pl_siginfo.si_signo,\n-\t\t\t\t    pl.pl_siginfo.si_code);\n+\t\tfbsd_nat_debug_printf (\"si_signo %u si_code %u\",\n+\t\t\t\t       pl.pl_siginfo.si_signo,\n+\t\t\t\t       pl.pl_siginfo.si_code);\n \t    }\n \n #ifdef PT_LWP_EVENTS\n@@ -1215,10 +1209,8 @@ fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t      thread_info *thr = find_thread_ptid (this, wptid);\n \t      if (thr != nullptr)\n \t\t{\n-\t\t  if (debug_fbsd_lwp)\n-\t\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t\t\"FLWP: deleting thread for LWP %u\\n\",\n-\t\t\t\t\tpl.pl_lwpid);\n+\t\t  fbsd_lwp_debug_printf (\"deleting thread for LWP %u\",\n+\t\t\t\t\t pl.pl_lwpid);\n \t\t  if (print_thread_events)\n \t\t    printf_unfiltered (_(\"[%s exited]\\n\"),\n \t\t\t\t       target_pid_to_str (wptid).c_str ());\n@@ -1238,10 +1230,8 @@ fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t     event.  */\n \t  if (in_thread_list (this, ptid_t (pid)))\n \t    {\n-\t      if (debug_fbsd_lwp)\n-\t\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t    \"FLWP: using LWP %u for first thread\\n\",\n-\t\t\t\t    pl.pl_lwpid);\n+\t      fbsd_lwp_debug_printf (\"using LWP %u for first thread\",\n+\t\t\t\t     pl.pl_lwpid);\n \t      thread_change_ptid (this, ptid_t (pid), wptid);\n \t    }\n \n@@ -1254,10 +1244,8 @@ fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t BORN events for an already-known LWP.  */\n \t      if (!in_thread_list (this, wptid))\n \t\t{\n-\t\t  if (debug_fbsd_lwp)\n-\t\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t\t\"FLWP: adding thread for LWP %u\\n\",\n-\t\t\t\t\tpl.pl_lwpid);\n+\t\t  fbsd_lwp_debug_printf (\"adding thread for LWP %u\",\n+\t\t\t\t\t pl.pl_lwpid);\n \t\t  add_thread (this, wptid);\n \t\t}\n \t      ourstatus->kind = TARGET_WAITKIND_SPURIOUS;"
    }
  ]
}