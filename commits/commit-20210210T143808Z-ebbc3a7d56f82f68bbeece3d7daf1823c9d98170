{
  "sha": "ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWJiYzNhN2Q1NmY4MmY2OGJiZWVjZTNkN2RhZjE4MjNjOWQ5ODE3MA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-05T22:01:48Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-10T14:38:08Z"
    },
    "message": "gdb: Delete SYMBOL_OBJ_SECTION and MSYMBOL_OBJ_SECTION\n\nReplace the two macros SYMBOL_OBJ_SECTION and MSYMBOL_OBJ_SECTION with\na member function on general_symbol_info.\n\nThere should be no user visible change after this commit.\n\ngdb/ChangeLog:\n\n\t* breakpoint.c (resolve_sal_pc): Replace SYMBOL_OBJ_SECTION and\n\tMSYMBOL_OBJ_SECTION.\n\t* findvar.c (language_defn::read_var_value): Likewise.\n\t* infcmd.c (jump_command): Likewise.\n\t* linespec.c (minsym_found): Likewise.\n\t* maint.c (maintenance_translate_address): Likewise.\n\t* minsyms.c (lookup_minimal_symbol_by_pc_section): Likewise.\n\t(minimal_symbol_upper_bound): Likewise.\n\t* parse.c (find_minsym_type_and_address): Likewise.\n\t(operator_check_standard): Likewise.\n\t* printcmd.c (info_address_command): Likewise.\n\t* symmisc.c (dump_msymbols): Likewise.\n\t(print_symbol): Likewise.\n\t* symtab.c (general_symbol_info::obj_section): Define new\n\tfunction.\n\t(fixup_symbol_section): Replace SYMBOL_OBJ_SECTION.\n\t(find_pc_sect_compunit_symtab): Likewise.\n\t(find_function_start_sal): Likewise.\n\t(skip_prologue_sal): Replace SYMBOL_OBJ_SECTION and\n\tMSYMBOL_OBJ_SECTION.\n\t* symtab.h (struct general_symbol_info) <obj_section>: Declare new\n\tfunction.\n\t(SYMBOL_OBJ_SECTION): Delete.\n\t(MSYMBOL_OBJ_SECTION): Delete.",
    "tree": {
      "sha": "07d4658bb23d7c55f074c9a2cf7fb0141f389948",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/07d4658bb23d7c55f074c9a2cf7fb0141f389948"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52ff20fe7ba8e8de2660339fff5308ed932e2b32",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52ff20fe7ba8e8de2660339fff5308ed932e2b32",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52ff20fe7ba8e8de2660339fff5308ed932e2b32"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 73,
    "deletions": 43
  },
  "files": [
    {
      "sha": "67c99801c60aea0ddf79fe3a22e85f0b7e449e95",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -1,3 +1,30 @@\n+2021-02-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* breakpoint.c (resolve_sal_pc): Replace SYMBOL_OBJ_SECTION and\n+\tMSYMBOL_OBJ_SECTION.\n+\t* findvar.c (language_defn::read_var_value): Likewise.\n+\t* infcmd.c (jump_command): Likewise.\n+\t* linespec.c (minsym_found): Likewise.\n+\t* maint.c (maintenance_translate_address): Likewise.\n+\t* minsyms.c (lookup_minimal_symbol_by_pc_section): Likewise.\n+\t(minimal_symbol_upper_bound): Likewise.\n+\t* parse.c (find_minsym_type_and_address): Likewise.\n+\t(operator_check_standard): Likewise.\n+\t* printcmd.c (info_address_command): Likewise.\n+\t* symmisc.c (dump_msymbols): Likewise.\n+\t(print_symbol): Likewise.\n+\t* symtab.c (general_symbol_info::obj_section): Define new\n+\tfunction.\n+\t(fixup_symbol_section): Replace SYMBOL_OBJ_SECTION.\n+\t(find_pc_sect_compunit_symtab): Likewise.\n+\t(find_function_start_sal): Likewise.\n+\t(skip_prologue_sal): Replace SYMBOL_OBJ_SECTION and\n+\tMSYMBOL_OBJ_SECTION.\n+\t* symtab.h (struct general_symbol_info) <obj_section>: Declare new\n+\tfunction.\n+\t(SYMBOL_OBJ_SECTION): Delete.\n+\t(MSYMBOL_OBJ_SECTION): Delete.\n+\n 2021-02-09  Tom Tromey  <tom@tromey.com>\n \n \t* stap-probe.c (stap_parse_argument_conditionally): Fix typo."
    },
    {
      "sha": "5f1914e0eb73f21dc30d0dc77178a3afc5594d99",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -9677,8 +9677,7 @@ resolve_sal_pc (struct symtab_and_line *sal)\n \t  if (sym != NULL)\n \t    {\n \t      fixup_symbol_section (sym, SYMTAB_OBJFILE (sal->symtab));\n-\t      sal->section = SYMBOL_OBJ_SECTION (SYMTAB_OBJFILE (sal->symtab),\n-\t\t\t\t\t\t sym);\n+\t      sal->section = sym->obj_section (SYMTAB_OBJFILE (sal->symtab));\n \t    }\n \t  else\n \t    {\n@@ -9692,7 +9691,7 @@ resolve_sal_pc (struct symtab_and_line *sal)\n \n \t      bound_minimal_symbol msym = lookup_minimal_symbol_by_pc (sal->pc);\n \t      if (msym.minsym)\n-\t\tsal->section = MSYMBOL_OBJ_SECTION (msym.objfile, msym.minsym);\n+\t\tsal->section = msym.minsym->obj_section (msym.objfile);\n \t    }\n \t}\n     }"
    },
    {
      "sha": "fcd97191c14543148db5697f71c5308095f1b6fb",
      "filename": "gdb/findvar.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/findvar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/findvar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/findvar.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -638,11 +638,9 @@ language_defn::read_var_value (struct symbol *var,\n       v = allocate_value (type);\n       if (overlay_debugging)\n \t{\n-\t  addr\n-\t    = symbol_overlayed_address (SYMBOL_VALUE_ADDRESS (var),\n-\t\t\t\t\tSYMBOL_OBJ_SECTION (symbol_objfile (var),\n-\t\t\t\t\t\t\t    var));\n-\n+\t  struct objfile *var_objfile = symbol_objfile (var);\n+\t  addr = symbol_overlayed_address (SYMBOL_VALUE_ADDRESS (var),\n+\t\t\t\t\t   var->obj_section (var_objfile));\n \t  store_typed_address (value_contents_raw (v), type, addr);\n \t}\n       else\n@@ -665,9 +663,9 @@ language_defn::read_var_value (struct symbol *var,\n \n     case LOC_STATIC:\n       if (overlay_debugging)\n-\taddr = symbol_overlayed_address (SYMBOL_VALUE_ADDRESS (var),\n-\t\t\t\t\t SYMBOL_OBJ_SECTION (symbol_objfile (var),\n-\t\t\t\t\t\t\t     var));\n+\taddr\n+\t  = symbol_overlayed_address (SYMBOL_VALUE_ADDRESS (var),\n+\t\t\t\t      var->obj_section (symbol_objfile (var)));\n       else\n \taddr = SYMBOL_VALUE_ADDRESS (var);\n       break;\n@@ -709,7 +707,7 @@ language_defn::read_var_value (struct symbol *var,\n       if (overlay_debugging)\n \taddr = symbol_overlayed_address\n \t  (BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (var)),\n-\t   SYMBOL_OBJ_SECTION (symbol_objfile (var), var));\n+\t   var->obj_section (symbol_objfile (var)));\n       else\n \taddr = BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (var));\n       break;\n@@ -777,7 +775,7 @@ language_defn::read_var_value (struct symbol *var,\n \t    error (_(\"Missing %s symbol \\\"%s\\\".\"),\n \t\t   flavour_name, var->linkage_name ());\n \t  }\n-\tobj_section = MSYMBOL_OBJ_SECTION (lookup_data.result.objfile, msym);\n+\tobj_section = msym->obj_section (lookup_data.result.objfile);\n \t/* Relocate address, unless there is no section or the variable is\n \t   a TLS variable. */\n \tif (obj_section == NULL"
    },
    {
      "sha": "80e6ad3048f6732c5a8285a95042023c4d42de32",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -1110,7 +1110,7 @@ jump_command (const char *arg, int from_tty)\n       struct obj_section *section;\n \n       fixup_symbol_section (sfn, 0);\n-      section = SYMBOL_OBJ_SECTION (symbol_objfile (sfn), sfn);\n+      section = sfn->obj_section (symbol_objfile (sfn));\n       if (section_is_overlay (section)\n \t  && !section_is_mapped (section))\n \t{"
    },
    {
      "sha": "9bfa159514ef19b32d2be9c67f5e2afabb674a1d",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -4258,7 +4258,7 @@ minsym_found (struct linespec_state *self, struct objfile *objfile,\n       sal.pspace = current_program_space;\n     }\n \n-  sal.section = MSYMBOL_OBJ_SECTION (objfile, msymbol);\n+  sal.section = msymbol->obj_section (objfile);\n \n   if (maybe_add_address (self->addr_set, objfile->pspace, sal.pc))\n     add_sal_to_sals (self, result, &sal, msymbol->natural_name (), 0);"
    },
    {
      "sha": "7495cab0ec0c61d703dc48076cd8f2c25854da37",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -509,7 +509,7 @@ maintenance_translate_address (const char *arg, int from_tty)\n       const char *symbol_offset\n \t= pulongest (address - BMSYMBOL_VALUE_ADDRESS (sym));\n \n-      sect = MSYMBOL_OBJ_SECTION(sym.objfile, sym.minsym);\n+      sect = sym.minsym->obj_section (sym.objfile);\n       if (sect != NULL)\n \t{\n \t  const char *section_name;"
    },
    {
      "sha": "b861f939fdb6ded0827b605df776292ccf065390",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -800,9 +800,9 @@ lookup_minimal_symbol_by_pc_section (CORE_ADDR pc_in, struct obj_section *sectio\n \t\t      /* Some types of debug info, such as COFF,\n \t\t\t don't fill the bfd_section member, so don't\n \t\t\t throw away symbols on those platforms.  */\n-\t\t      && MSYMBOL_OBJ_SECTION (objfile, &msymbol[hi]) != NULL\n+\t\t      && msymbol[hi].obj_section (objfile) != nullptr\n \t\t      && (!matching_obj_sections\n-\t\t\t  (MSYMBOL_OBJ_SECTION (objfile, &msymbol[hi]),\n+\t\t\t  (msymbol[hi].obj_section (objfile),\n \t\t\t   section)))\n \t\t    {\n \t\t      hi--;\n@@ -820,8 +820,8 @@ lookup_minimal_symbol_by_pc_section (CORE_ADDR pc_in, struct obj_section *sectio\n \t\t\t  == MSYMBOL_SIZE (&msymbol[hi - 1]))\n \t\t      && (MSYMBOL_VALUE_RAW_ADDRESS (&msymbol[hi])\n \t\t\t  == MSYMBOL_VALUE_RAW_ADDRESS (&msymbol[hi - 1]))\n-\t\t      && (MSYMBOL_OBJ_SECTION (objfile, &msymbol[hi])\n-\t\t\t  == MSYMBOL_OBJ_SECTION (objfile, &msymbol[hi - 1])))\n+\t\t      && (msymbol[hi].obj_section (objfile)\n+\t\t\t  == msymbol[hi - 1].obj_section (objfile)))\n \t\t    {\n \t\t      hi--;\n \t\t      continue;\n@@ -1560,7 +1560,7 @@ minimal_symbol_upper_bound (struct bound_minimal_symbol minsym)\n \tbreak;\n     }\n \n-  obj_section = MSYMBOL_OBJ_SECTION (minsym.objfile, minsym.minsym);\n+  obj_section = minsym.minsym->obj_section (minsym.objfile);\n   if (iter != past_the_end\n       && (MSYMBOL_VALUE_ADDRESS (minsym.objfile, iter)\n \t  < obj_section_endaddr (obj_section)))"
    },
    {
      "sha": "d634a4f736c2ef44c477b0560d2f9c3d83096ce1",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -416,7 +416,7 @@ find_minsym_type_and_address (minimal_symbol *msymbol,\n \t\t\t      CORE_ADDR *address_p)\n {\n   bound_minimal_symbol bound_msym = {msymbol, objfile};\n-  struct obj_section *section = MSYMBOL_OBJ_SECTION (objfile, msymbol);\n+  struct obj_section *section = msymbol->obj_section (objfile);\n   enum minimal_symbol_type type = MSYMBOL_TYPE (msymbol);\n \n   bool is_tls = (section != NULL\n@@ -1359,8 +1359,7 @@ operator_check_standard (struct expression *exp, int pos,\n \tconst struct block *const block = elts[pos + 1].block;\n \tconst struct symbol *const symbol = elts[pos + 2].symbol;\n \n-\t/* Check objfile where the variable itself is placed.\n-\t   SYMBOL_OBJ_SECTION (symbol) may be NULL.  */\n+\t/* Check objfile where the variable itself is placed.  */\n \tif ((*objfile_func) (symbol_objfile (symbol), data))\n \t  return 1;\n "
    },
    {
      "sha": "1e328a71160c059d1d594ac6565c4679a3417b3d",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -1534,7 +1534,7 @@ info_address_command (const char *exp, int from_tty)\n \t  fputs_styled (paddress (gdbarch, load_addr), address_style.style (),\n \t\t\tgdb_stdout);\n \t  printf_filtered (\" in a file compiled without debugging\");\n-\t  section = MSYMBOL_OBJ_SECTION (objfile, msymbol.minsym);\n+\t  section = msymbol.minsym->obj_section (objfile);\n \t  if (section_is_overlay (section))\n \t    {\n \t      load_addr = overlay_unmapped_address (load_addr, section);\n@@ -1558,7 +1558,7 @@ info_address_command (const char *exp, int from_tty)\n   printf_filtered (\"\\\" is \");\n   val = SYMBOL_VALUE (sym);\n   if (SYMBOL_OBJFILE_OWNED (sym))\n-    section = SYMBOL_OBJ_SECTION (symbol_objfile (sym), sym);\n+    section = sym->obj_section (symbol_objfile (sym));\n   else\n     section = NULL;\n   gdbarch = symbol_arch (sym);\n@@ -1678,7 +1678,7 @@ info_address_command (const char *exp, int from_tty)\n \t  printf_filtered (\"unresolved\");\n \telse\n \t  {\n-\t    section = MSYMBOL_OBJ_SECTION (msym.objfile, msym.minsym);\n+\t    section = msym.minsym->obj_section (msym.objfile);\n \n \t    if (section\n \t\t&& (section->the_bfd_section->flags & SEC_THREAD_LOCAL) != 0)"
    },
    {
      "sha": "ec4758c264e186531ffbb6c27e6e4d6ff7a21eeb",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -196,7 +196,7 @@ dump_msymbols (struct objfile *objfile, struct ui_file *outfile)\n   index = 0;\n   for (minimal_symbol *msymbol : objfile->msymbols ())\n     {\n-      struct obj_section *section = MSYMBOL_OBJ_SECTION (objfile, msymbol);\n+      struct obj_section *section = msymbol->obj_section (objfile);\n \n       switch (MSYMBOL_TYPE (msymbol))\n \t{\n@@ -543,7 +543,7 @@ print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n   struct obj_section *section;\n \n   if (SYMBOL_OBJFILE_OWNED (symbol))\n-    section = SYMBOL_OBJ_SECTION (symbol_objfile (symbol), symbol);\n+    section = symbol->obj_section (symbol_objfile (symbol));\n   else\n     section = NULL;\n "
    },
    {
      "sha": "9ad7c1f589d08aa82dcdbed6edfb219838d2cf97",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -1012,6 +1012,16 @@ general_symbol_info::search_name () const\n \n /* See symtab.h.  */\n \n+struct obj_section *\n+general_symbol_info::obj_section (const struct objfile *objfile) const\n+{\n+  if (section >= 0)\n+    return &objfile->sections[section];\n+  return nullptr;\n+}\n+\n+/* See symtab.h.  */\n+\n bool\n symbol_matches_search_name (const struct general_symbol_info *gsymbol,\n \t\t\t    const lookup_name_info &name)\n@@ -1730,7 +1740,7 @@ fixup_symbol_section (struct symbol *sym, struct objfile *objfile)\n   if (objfile == NULL)\n     objfile = symbol_objfile (sym);\n \n-  if (SYMBOL_OBJ_SECTION (objfile, sym))\n+  if (sym->obj_section (objfile) != nullptr)\n     return sym;\n \n   /* We should have an objfile by now.  */\n@@ -2972,8 +2982,7 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n \t\t  ALL_BLOCK_SYMBOLS (b, iter, sym)\n \t\t    {\n \t\t      fixup_symbol_section (sym, obj_file);\n-\t\t      if (matching_obj_sections (SYMBOL_OBJ_SECTION (obj_file,\n-\t\t\t\t\t\t\t\t     sym),\n+\t\t      if (matching_obj_sections (sym->obj_section (obj_file),\n \t\t\t\t\t\t section))\n \t\t\tbreak;\n \t\t    }\n@@ -3732,7 +3741,7 @@ find_function_start_sal (symbol *sym, bool funfirstline)\n   fixup_symbol_section (sym, NULL);\n   symtab_and_line sal\n     = find_function_start_sal_1 (BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (sym)),\n-\t\t\t\t SYMBOL_OBJ_SECTION (symbol_objfile (sym), sym),\n+\t\t\t\t sym->obj_section (symbol_objfile (sym)),\n \t\t\t\t funfirstline);\n   sal.symbol = sym;\n   return sal;\n@@ -3823,7 +3832,7 @@ skip_prologue_sal (struct symtab_and_line *sal)\n \n       objfile = symbol_objfile (sym);\n       pc = BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (sym));\n-      section = SYMBOL_OBJ_SECTION (objfile, sym);\n+      section = sym->obj_section (objfile);\n       name = sym->linkage_name ();\n     }\n   else\n@@ -3836,7 +3845,7 @@ skip_prologue_sal (struct symtab_and_line *sal)\n \n       objfile = msymbol.objfile;\n       pc = BMSYMBOL_VALUE_ADDRESS (msymbol);\n-      section = MSYMBOL_OBJ_SECTION (objfile, msymbol.minsym);\n+      section = msymbol.minsym->obj_section (objfile);\n       name = msymbol.minsym->linkage_name ();\n     }\n "
    },
    {
      "sha": "e85ae684c71c249e6726327f793be2e1f3016b1d",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "patch": "@@ -540,6 +540,12 @@ struct general_symbol_info\n      does not get relocated relative to a section.  */\n \n   short section;\n+\n+  /* Return the obj_section from OBJFILE for this symbol.  The symbol\n+     returned is based on the SECTION member variable, and can be nullptr\n+     if SECTION is negative.  */\n+\n+  struct obj_section *obj_section (const struct objfile *objfile) const;\n };\n \n extern CORE_ADDR symbol_overlayed_address (CORE_ADDR, struct obj_section *);\n@@ -565,10 +571,6 @@ extern CORE_ADDR get_symbol_address (const struct symbol *sym);\n #define SYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n #define SYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n #define SYMBOL_SECTION(symbol)\t\t(symbol)->section\n-#define SYMBOL_OBJ_SECTION(objfile, symbol)\t\t\t\\\n-  (((symbol)->section >= 0)\t\t\t\t\\\n-   ? (&(((objfile)->sections)[(symbol)->section]))\t\\\n-   : NULL)\n \n /* Try to determine the demangled name for a symbol, based on the\n    language of that symbol.  If the language is set to language_auto,\n@@ -763,10 +765,6 @@ extern CORE_ADDR get_msymbol_address (struct objfile *objf,\n #define MSYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n #define MSYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n #define MSYMBOL_SECTION(symbol)\t\t(symbol)->section\n-#define MSYMBOL_OBJ_SECTION(objfile, symbol)\t\t\t\\\n-  (((symbol)->section >= 0)\t\t\t\t\\\n-   ? (&(((objfile)->sections)[(symbol)->section]))\t\\\n-   : NULL)\n \n #include \"minsyms.h\"\n "
    }
  ]
}