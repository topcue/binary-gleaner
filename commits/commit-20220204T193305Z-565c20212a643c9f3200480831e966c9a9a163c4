{
  "sha": "565c20212a643c9f3200480831e966c9a9a163c4",
  "node_id": "C_kwDOANOeidoAKDU2NWMyMDIxMmE2NDNjOWYzMjAwNDgwODMxZTk2NmM5YTlhMTYzYzQ",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2022-02-04T19:33:05Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2022-02-04T19:33:05Z"
    },
    "message": "ld: Remove emultempl/armcoff.em\n\nRemove emultempl/armcoff.em which has been unused after\n\ncommit 2ac93be706418f3b2aebeb22159a328023faed52\nAuthor: Alan Modra <amodra@gmail.com>\nDate:   Mon Apr 16 20:33:36 2018 +0930\n\n    Remove arm-aout and arm-coff support\n\n    This also removes arm-netbsd (not arm-netbsdelf!), arm-openbsd, and\n    arm-riscix.  Those targets weren't on the obsolete list but they are\n    all aout, and it doesn't make all that much sense to remove arm-aout\n    without removing them too.\n\n\t* emultempl/armcoff.em: Removed.",
    "tree": {
      "sha": "7c54ae553bfb0ce2d87ba131720ee52ce8a7d11f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c54ae553bfb0ce2d87ba131720ee52ce8a7d11f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/565c20212a643c9f3200480831e966c9a9a163c4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/565c20212a643c9f3200480831e966c9a9a163c4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/565c20212a643c9f3200480831e966c9a9a163c4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/565c20212a643c9f3200480831e966c9a9a163c4/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a620b7e30fe58c3f53ad7a2044728e850b921d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a620b7e30fe58c3f53ad7a2044728e850b921d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a620b7e30fe58c3f53ad7a2044728e850b921d2"
    }
  ],
  "stats": {
    "total": 293,
    "additions": 0,
    "deletions": 293
  },
  "files": [
    {
      "sha": "b82855ae04f37d9ed54ef7815b54ce5a639f87ee",
      "filename": "ld/emultempl/armcoff.em",
      "status": "removed",
      "additions": 0,
      "deletions": 293,
      "changes": 293,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a620b7e30fe58c3f53ad7a2044728e850b921d2/ld/emultempl/armcoff.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a620b7e30fe58c3f53ad7a2044728e850b921d2/ld/emultempl/armcoff.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/armcoff.em?ref=4a620b7e30fe58c3f53ad7a2044728e850b921d2",
      "patch": "@@ -1,293 +0,0 @@\n-# This shell script emits a C file. -*- C -*-\n-# It does some substitutions.\n-fragment <<EOF\n-/* This file is is generated by a shell script.  DO NOT EDIT! */\n-\n-/* emulate the original gld for the given ${EMULATION_NAME}\n-   Copyright (C) 1991-2022 Free Software Foundation, Inc.\n-   Written by Steve Chamberlain steve@cygnus.com\n-\n-   This file is part of the GNU Binutils.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#define TARGET_IS_${EMULATION_NAME}\n-\n-#include \"sysdep.h\"\n-#include \"bfd.h\"\n-#include \"bfdlink.h\"\n-#include \"ctf-api.h\"\n-#include \"getopt.h\"\n-\n-#include \"ld.h\"\n-#include \"ldmain.h\"\n-#include \"ldmisc.h\"\n-\n-#include \"ldexp.h\"\n-#include \"ldlang.h\"\n-#include \"ldfile.h\"\n-#include \"ldemul.h\"\n-\n-/* If TRUE, then interworking stubs which support calls to old,\n-   non-interworking aware ARM code should be generated.  */\n-\n-static int support_old_code = 0;\n-static char * thumb_entry_symbol = NULL;\n-\n-#define OPTION_SUPPORT_OLD_CODE\t\t300\n-#define OPTION_THUMB_ENTRY\t\t301\n-\n-static void\n-gld${EMULATION_NAME}_add_options\n-  (int ns ATTRIBUTE_UNUSED, char **shortopts ATTRIBUTE_UNUSED, int nl,\n-   struct option **longopts, int nrl ATTRIBUTE_UNUSED,\n-   struct option **really_longopts ATTRIBUTE_UNUSED)\n-{\n-  static const struct option xtra_long[] = {\n-    {\"support-old-code\", no_argument, NULL, OPTION_SUPPORT_OLD_CODE},\n-    {\"thumb-entry\", required_argument, NULL, OPTION_THUMB_ENTRY},\n-    {NULL, no_argument, NULL, 0}\n-  };\n-\n-  *longopts = xrealloc (*longopts,\n-\t\t\tnl * sizeof (struct option) + sizeof (xtra_long));\n-  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));\n-}\n-\n-static void\n-gld${EMULATION_NAME}_list_options (FILE *file)\n-{\n-  fprintf (file, _(\"  --support-old-code          Support interworking with old code\\n\"));\n-  fprintf (file, _(\"  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>\\n\"));\n-}\n-\n-static bool\n-gld${EMULATION_NAME}_handle_option (int optc)\n-{\n-  switch (optc)\n-    {\n-    default:\n-      return false;\n-\n-    case OPTION_SUPPORT_OLD_CODE:\n-      support_old_code = 1;\n-      break;\n-\n-    case OPTION_THUMB_ENTRY:\n-      thumb_entry_symbol = optarg;\n-      break;\n-    }\n-\n-  return true;\n-}\n-\f\n-static void\n-gld${EMULATION_NAME}_before_parse (void)\n-{\n-#ifndef TARGET_\t\t\t/* I.e., if not generic.  */\n-  ldfile_set_output_arch (\"`echo ${ARCH}`\", bfd_arch_unknown);\n-#endif /* not TARGET_ */\n-}\n-\n-/* This is called after the sections have been attached to output\n-   sections, but before any sizes or addresses have been set.  */\n-\n-static void\n-gld${EMULATION_NAME}_before_allocation (void)\n-{\n-  /* we should be able to set the size of the interworking stub section */\n-\n-  /* Here we rummage through the found bfds to collect glue information */\n-  /* FIXME: should this be based on a command line option? krk@cygnus.com */\n-  {\n-    LANG_FOR_EACH_INPUT_STATEMENT (is)\n-      {\n-\tif (! bfd_arm_process_before_allocation\n-\t    (is->the_bfd, & link_info, support_old_code))\n-\t  {\n-\t    /* xgettext:c-format */\n-\t    einfo (_(\"%P: errors encountered processing file %s\\n\"),\n-\t\t   is->filename);\n-\t  }\n-      }\n-  }\n-\n-  /* We have seen it all. Allocate it, and carry on */\n-  bfd_arm_allocate_interworking_sections (& link_info);\n-\n-  before_allocation_default ();\n-}\n-\n-static void\n-gld${EMULATION_NAME}_after_open (void)\n-{\n-  after_open_default ();\n-\n-  if (strstr (bfd_get_target (link_info.output_bfd), \"arm\") == NULL)\n-    {\n-      /* The arm backend needs special fields in the output hash structure.\n-\t These will only be created if the output format is an arm format,\n-\t hence we do not support linking and changing output formats at the\n-\t same time.  Use a link followed by objcopy to change output formats.  */\n-      einfo (_(\"%F%P: error: cannot change output format \"\n-\t       \"whilst linking %s binaries\\n\"), \"ARM\");\n-      return;\n-    }\n-\n-  {\n-    LANG_FOR_EACH_INPUT_STATEMENT (is)\n-      {\n-\tif (bfd_arm_get_bfd_for_interworking (is->the_bfd, & link_info))\n-\t  break;\n-      }\n-  }\n-}\n-\n-static void\n-gld${EMULATION_NAME}_finish (void)\n-{\n-  if (thumb_entry_symbol != NULL)\n-    {\n-      struct bfd_link_hash_entry * h;\n-\n-      h = bfd_link_hash_lookup (link_info.hash, thumb_entry_symbol,\n-\t\t\t\tfalse, false, true);\n-\n-      if (h != (struct bfd_link_hash_entry *) NULL\n-\t  && (h->type == bfd_link_hash_defined\n-\t      || h->type == bfd_link_hash_defweak)\n-\t  && h->u.def.section->output_section != NULL)\n-\t{\n-\t  static char buffer[32];\n-\t  bfd_vma val;\n-\n-\t  /* Special procesing is required for a Thumb entry symbol.  The\n-\t     bottom bit of its address must be set.  */\n-\t  val = (h->u.def.value\n-\t\t + bfd_section_vma (h->u.def.section->output_section)\n-\t\t + h->u.def.section->output_offset);\n-\n-\t  val |= 1;\n-\n-\t  /* Now convert this value into a string and store it in entry_symbol\n-\t     where the lang_finish() function will pick it up.  */\n-\t  buffer[0] = '0';\n-\t  buffer[1] = 'x';\n-\n-\t  sprintf_vma (buffer + 2, val);\n-\n-\t  if (entry_symbol.name != NULL && entry_from_cmdline)\n-\t    einfo (_(\"%P: warning: '--thumb-entry %s' is overriding '-e %s'\\n\"),\n-\t\t   thumb_entry_symbol, entry_symbol.name);\n-\t  entry_symbol.name = buffer;\n-\t}\n-      else\n-\teinfo (_(\"%P: warning: cannot find thumb start symbol %s\\n\"),\n-\t       thumb_entry_symbol);\n-    }\n-\n-  finish_default ();\n-}\n-\n-static char *\n-gld${EMULATION_NAME}_get_script (int *isfile)\n-EOF\n-\n-if test x\"$COMPILE_IN\" = xyes\n-then\n-# Scripts compiled in.\n-\n-# sed commands to quote an ld script as a C string.\n-sc=\"-f stringify.sed\"\n-\n-fragment <<EOF\n-{\n-  *isfile = 0;\n-\n-  if (bfd_link_relocatable (&link_info) && config.build_constructors)\n-    return\n-EOF\n-sed $sc ldscripts/${EMULATION_NAME}.xu                 >> e${EMULATION_NAME}.c\n-echo '  ; else if (bfd_link_relocatable (&link_info)) return' >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.xr                 >> e${EMULATION_NAME}.c\n-echo '  ; else if (!config.text_read_only) return'     >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.xbn                >> e${EMULATION_NAME}.c\n-echo '  ; else if (!config.magic_demand_paged) return' >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.xn                 >> e${EMULATION_NAME}.c\n-echo '  ; else return'                                 >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.x                  >> e${EMULATION_NAME}.c\n-echo '; }'                                             >> e${EMULATION_NAME}.c\n-\n-else\n-# Scripts read from the filesystem.\n-\n-fragment <<EOF\n-{\n-  *isfile = 1;\n-\n-  if (bfd_link_relocatable (&link_info) && config.build_constructors)\n-    return \"ldscripts/${EMULATION_NAME}.xu\";\n-  else if (bfd_link_relocatable (&link_info))\n-    return \"ldscripts/${EMULATION_NAME}.xr\";\n-  else if (!config.text_read_only)\n-    return \"ldscripts/${EMULATION_NAME}.xbn\";\n-  else if (!config.magic_demand_paged)\n-    return \"ldscripts/${EMULATION_NAME}.xn\";\n-  else\n-    return \"ldscripts/${EMULATION_NAME}.x\";\n-}\n-EOF\n-\n-fi\n-\n-fragment <<EOF\n-\n-struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n-{\n-  gld${EMULATION_NAME}_before_parse,\n-  syslib_default,\n-  hll_default,\n-  after_parse_default,\n-  gld${EMULATION_NAME}_after_open,\n-  after_check_relocs_default,\n-  before_place_orphans_default,\n-  after_allocation_default,\n-  set_output_arch_default,\n-  ldemul_default_target,\n-  gld${EMULATION_NAME}_before_allocation,\n-  gld${EMULATION_NAME}_get_script,\n-  \"${EMULATION_NAME}\",\n-  \"${OUTPUT_FORMAT}\",\n-  gld${EMULATION_NAME}_finish,\n-  NULL,\t/* create output section statements */\n-  NULL,\t/* open dynamic archive */\n-  NULL,\t/* place orphan */\n-  NULL,\t/* set symbols */\n-  NULL, /* parse_args */\n-  gld${EMULATION_NAME}_add_options,\n-  gld${EMULATION_NAME}_handle_option,\n-  NULL,\t/* unrecognised file */\n-  gld${EMULATION_NAME}_list_options,\n-  NULL,\t/* recognized file */\n-  NULL,\t/* find_potential_libraries */\n-  NULL,\t/* new_vers_pattern */\n-  NULL,\t/* extra_map_file_text */\n-  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n-  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n-  ${LDEMUL_PRINT_SYMBOL-NULL}\n-};\n-EOF"
    }
  ]
}