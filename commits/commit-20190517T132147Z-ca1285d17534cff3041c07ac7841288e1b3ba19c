{
  "sha": "ca1285d17534cff3041c07ac7841288e1b3ba19c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2ExMjg1ZDE3NTM0Y2ZmMzA0MWMwN2FjNzg0MTI4OGUxYjNiYTE5Yw==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-05-17T13:15:01Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-05-17T13:21:47Z"
    },
    "message": "Add debug redirect option\n\nCurrently, when logging is enabled, output will be sent to both a\nlogfile and standard terminal output.  The redirect option sends output\nonly to the logfile.  This includes all debug output.\n\nAdd the option to redirect debug output seperately to normal\noutput, using the cli command:\n\n  set logging debugredirect on\n\nBy setting this and enabling logging, all output and debug will\nbe sent to the logfile.  The user will still see all output but\nno debug output.\n\nThis causes a change in behaviour for anyone currently using\nlogging redirect, as now only output will be redirected.  Users\nwill have to issue the additional command above to also redirect\ndebug.\n\nExpand ui-redirect.exp cover the changes.\n\ngdb/ChangeLog:\n\n\t* cli/cli-interp.c (struct saved_output_files): Add saved entry.\n\t(cli_interp_base::set_logging): Check debug_redirect.\n\t* cli/cli-interp.h (set_logging): Add debug_redirect parameter.\n\t* cli/cli-logging.c (debug_redirect): Add static variable.\n\t(pop_output_files): Add default param.\n\t(handle_redirections): Print debug setting.\n\t(show_logging_command): Likewise.\n\t(_initialize_cli_logging): Add debugredirect command.\n\t* interps.c (current_interp_set_logging): Add debug_redirect\n\tparameter.\n\t* interps.h (set_logging): Add debug_redirect parameter.\n\t(current_interp_set_logging): Likewise.\n\t* mi/mi-common.h: Likewise.\n\t* mi/mi-interp.c (mi_interp::set_logging): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/ui-redirect.exp: Add debug redirect tests.",
    "tree": {
      "sha": "5cc51bf559c3464bf1c43704e6fa94d93b1c0bc4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5cc51bf559c3464bf1c43704e6fa94d93b1c0bc4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca1285d17534cff3041c07ac7841288e1b3ba19c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca1285d17534cff3041c07ac7841288e1b3ba19c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca1285d17534cff3041c07ac7841288e1b3ba19c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca1285d17534cff3041c07ac7841288e1b3ba19c/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "334fe02b5f9cb1dd3abb0f79856ee1f4285f39c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/334fe02b5f9cb1dd3abb0f79856ee1f4285f39c1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/334fe02b5f9cb1dd3abb0f79856ee1f4285f39c1"
    }
  ],
  "stats": {
    "total": 173,
    "additions": 140,
    "deletions": 33
  },
  "files": [
    {
      "sha": "0e79bd0e6b44f00b896e08e6b8f604164e612d80",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -1,4 +1,21 @@\n-2019-05-14  Alan Hayward  <alan.hayward@arm.com>\n+2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* cli/cli-interp.c (struct saved_output_files): Add saved entry.\n+\t(cli_interp_base::set_logging): Check debug_redirect.\n+\t* cli/cli-interp.h (set_logging): Add debug_redirect parameter.\n+\t* cli/cli-logging.c (debug_redirect): Add static variable.\n+\t(pop_output_files): Add default param.\n+\t(handle_redirections): Print debug setting.\n+\t(show_logging_command): Likewise.\n+\t(_initialize_cli_logging): Add debugredirect command.\n+\t* interps.c (current_interp_set_logging): Add debug_redirect\n+\tparameter.\n+\t* interps.h (set_logging): Add debug_redirect parameter.\n+\t(current_interp_set_logging): Likewise.\n+\t* mi/mi-common.h: Likewise.\n+\t* mi/mi-interp.c (mi_interp::set_logging): Likewise.\n+\n+2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n \t    Tom Tromey  <tromey@adacore.com>\n \n \t* cli/cli-interp.c (cli_interp_base::set_logging): Create tee_file"
    },
    {
      "sha": "a8cf6172c1be0a7a226ab7a1d2688854ba7c1aa0",
      "filename": "gdb/cli/cli-interp.c",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/cli/cli-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/cli/cli-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-interp.c?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -395,13 +395,15 @@ struct saved_output_files\n   ui_file *log;\n   ui_file *targ;\n   ui_file *targerr;\n+  ui_file *file_to_delete;\n };\n static saved_output_files saved_output;\n \n /* See cli-interp.h.  */\n \n void\n-cli_interp_base::set_logging (ui_file_up logfile, bool logging_redirect)\n+cli_interp_base::set_logging (ui_file_up logfile, bool logging_redirect,\n+\t\t\t      bool debug_redirect)\n {\n   if (logfile != nullptr)\n     {\n@@ -411,28 +413,34 @@ cli_interp_base::set_logging (ui_file_up logfile, bool logging_redirect)\n       saved_output.targ = gdb_stdtarg;\n       saved_output.targerr = gdb_stdtargerr;\n \n-      /* If logging is being redirected, then grab logfile.  */\n+      /* If something is being redirected, then grab logfile.  */\n       ui_file *logfile_p = nullptr;\n-      if (logging_redirect)\n-\tlogfile_p = logfile.release ();\n+      if (logging_redirect || debug_redirect)\n+\t{\n+\t  logfile_p = logfile.get ();\n+\t  saved_output.file_to_delete = logfile_p;\n+\t}\n \n-      /* If logging is not being redirected, then a tee containing both the\n+      /* If something is not being redirected, then a tee containing both the\n \t logfile and stdout.  */\n       ui_file *tee = nullptr;\n-      if (!logging_redirect)\n-\ttee = new tee_file (gdb_stdout, std::move (logfile));\n+      if (!logging_redirect || !debug_redirect)\n+\t{\n+\t  tee = new tee_file (gdb_stdout, std::move (logfile));\n+\t  saved_output.file_to_delete = tee;\n+\t}\n \n       gdb_stdout = logging_redirect ? logfile_p : tee;\n-      gdb_stdlog = logging_redirect ? logfile_p : tee;\n+      gdb_stdlog = debug_redirect ? logfile_p : tee;\n       gdb_stderr = logging_redirect ? logfile_p : tee;\n       gdb_stdtarg = logging_redirect ? logfile_p : tee;\n       gdb_stdtargerr = logging_redirect ? logfile_p : tee;\n     }\n   else\n     {\n-      /* Only delete one of the files -- they are all set to the same\n-\t value.  */\n-      delete gdb_stdout;\n+      /* Delete the correct file.  If it's the tee then the logfile will also\n+\t be deleted.  */\n+      delete saved_output.file_to_delete;\n \n       gdb_stdout = saved_output.out;\n       gdb_stderr = saved_output.err;\n@@ -445,6 +453,7 @@ cli_interp_base::set_logging (ui_file_up logfile, bool logging_redirect)\n       saved_output.log = nullptr;\n       saved_output.targ = nullptr;\n       saved_output.targerr = nullptr;\n+      saved_output.file_to_delete = nullptr;\n     }\n }\n "
    },
    {
      "sha": "334a37accf8af2ce766301372a8631ca187a4bb0",
      "filename": "gdb/cli/cli-interp.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/cli/cli-interp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/cli/cli-interp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-interp.h?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -28,7 +28,8 @@ class cli_interp_base : public interp\n   explicit cli_interp_base (const char *name);\n   virtual ~cli_interp_base () = 0;\n \n-  void set_logging (ui_file_up logfile, bool logging_redirect) override;\n+  void set_logging (ui_file_up logfile, bool logging_redirect,\n+\t\t    bool debug_redirect) override;\n   void pre_command_loop () override;\n   bool supports_command_editing () override;\n };"
    },
    {
      "sha": "bef5f3939bd6655896591af3d089fa5b7dd0a486",
      "filename": "gdb/cli/cli-logging.c",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/cli/cli-logging.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/cli/cli-logging.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-logging.c?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -62,6 +62,7 @@ show_logging_overwrite (struct ui_file *file, int from_tty,\n \n /* Value as configured by the user.  */\n static int logging_redirect;\n+static int debug_redirect;\n \n static void\n set_logging_redirect (const char *args,\n@@ -81,7 +82,7 @@ show_logging_redirect (struct ui_file *file, int from_tty,\n static void\n pop_output_files (void)\n {\n-  current_interp_set_logging (NULL, false);\n+  current_interp_set_logging (NULL, false, false);\n \n   /* Stay consistent with handle_redirections.  */\n   if (!current_uiout->is_mi_like_p ())\n@@ -112,12 +113,20 @@ handle_redirections (int from_tty)\n       else\n \tfprintf_unfiltered (gdb_stdout, \"Redirecting output to %s.\\n\",\n \t\t\t    logging_filename);\n+\n+      if (!debug_redirect)\n+\tfprintf_unfiltered (gdb_stdout, \"Copying debug output to %s.\\n\",\n+\t\t\t    logging_filename);\n+      else\n+\tfprintf_unfiltered (gdb_stdout, \"Redirecting debug output to %s.\\n\",\n+\t\t\t    logging_filename);\n     }\n \n   saved_filename = xstrdup (logging_filename);\n \n   /* Let the interpreter do anything it needs.  */\n-  current_interp_set_logging (std::move (log), logging_redirect);\n+  current_interp_set_logging (std::move (log), logging_redirect,\n+\t\t\t      debug_redirect);\n \n   /* Redirect the current ui-out object's output to the log.  Use\n      gdb_stdout, not log, since the interpreter may have created a tee\n@@ -185,6 +194,11 @@ show_logging_command (const char *args, int from_tty)\n     printf_unfiltered (_(\"Output will be sent only to the log file.\\n\"));\n   else\n     printf_unfiltered (_(\"Output will be logged and displayed.\\n\"));\n+\n+  if (debug_redirect)\n+    printf_unfiltered (_(\"Debug output will be sent only to the log file.\\n\"));\n+  else\n+    printf_unfiltered (_(\"Debug output will be logged and displayed.\\n\"));\n }\n \n void\n@@ -213,6 +227,15 @@ If redirect is on, output will go only to the log file.\"),\n \t\t\t   set_logging_redirect,\n \t\t\t   show_logging_redirect,\n \t\t\t   &set_logging_cmdlist, &show_logging_cmdlist);\n+  add_setshow_boolean_cmd (\"debugredirect\", class_support,\n+\t\t\t   &debug_redirect, _(\"\\\n+Set the logging debug output mode.\"), _(\"\\\n+Show the logging debug output mode.\"), _(\"\\\n+If debug redirect is off, debug will go to both the screen and the log file.\\n\\\n+If debug redirect is on, debug will go only to the log file.\"),\n+\t\t\t   set_logging_redirect,\n+\t\t\t   show_logging_redirect,\n+\t\t\t   &set_logging_cmdlist, &show_logging_cmdlist);\n   add_setshow_filename_cmd (\"file\", class_support, &logging_filename, _(\"\\\n Set the current logfile.\"), _(\"\\\n Show the current logfile.\"), _(\"\\"
    },
    {
      "sha": "372bd73bf80b9702e6afa4d54ec0deec182dbb8c",
      "filename": "gdb/interps.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/interps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/interps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/interps.c?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -255,13 +255,13 @@ set_top_level_interpreter (const char *name)\n }\n \n void\n-current_interp_set_logging (ui_file_up logfile,\n-\t\t\t    bool logging_redirect)\n+current_interp_set_logging (ui_file_up logfile, bool logging_redirect,\n+\t\t\t    bool debug_redirect)\n {\n   struct ui_interp_info *ui_interp = get_current_interp_info ();\n   struct interp *interp = ui_interp->current_interpreter;\n \n-  interp->set_logging (std::move (logfile), logging_redirect);\n+  interp->set_logging (std::move (logfile), logging_redirect, debug_redirect);\n }\n \n /* Temporarily overrides the current interpreter.  */"
    },
    {
      "sha": "7cdb4d97e80d5de736c7e7850f1027ee567ecb74",
      "filename": "gdb/interps.h",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/interps.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/interps.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/interps.h?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -61,7 +61,8 @@ class interp\n   /* Provides a hook for interpreters to do any additional\n      setup/cleanup that they might need when logging is enabled or\n      disabled.  */\n-  virtual void set_logging (ui_file_up logfile, bool logging_redirect) = 0;\n+  virtual void set_logging (ui_file_up logfile, bool logging_redirect,\n+\t\t\t    bool debug_redirect) = 0;\n \n   /* Called before starting an event loop, to give the interpreter a\n      chance to e.g., print a prompt.  */\n@@ -141,9 +142,12 @@ extern int current_interp_named_p (const char *name);\n    interpreter should configure the output streams to send output only\n    to the logfile.  If false, the interpreter should configure the\n    output streams to send output to both the current output stream\n-   (i.e., the terminal) and the log file.  */\n+   (i.e., the terminal) and the log file.  DEBUG_REDIRECT is same as\n+   LOGGING_REDIRECT, but for the value of \"set logging debugredirect\"\n+   instead.  */\n extern void current_interp_set_logging (ui_file_up logfile,\n-\t\t\t\t\tbool logging_redirect);\n+\t\t\t\t\tbool logging_redirect,\n+\t\t\t\t\tbool debug_redirect);\n \n /* Returns the top-level interpreter.  */\n extern struct interp *top_level_interpreter (void);"
    },
    {
      "sha": "07b37b71441e75b9293402d1a3b2c2b713213162",
      "filename": "gdb/mi/mi-common.h",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/mi/mi-common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/mi/mi-common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-common.h?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -66,7 +66,8 @@ class mi_interp final : public interp\n   void suspend () override;\n   gdb_exception exec (const char *command_str) override;\n   ui_out *interp_ui_out () override;\n-  void set_logging (ui_file_up logfile, bool logging_redirect) override;\n+  void set_logging (ui_file_up logfile, bool logging_redirect,\n+\t\t    bool debug_redirect) override;\n   void pre_command_loop () override;\n \n   /* MI's output channels */\n@@ -79,9 +80,16 @@ class mi_interp final : public interp\n   /* Raw console output.  */\n   struct ui_file *raw_stdout;\n \n-  /* Save the original value of raw_stdout here when logging, so we\n-     can restore correctly when done.  */\n+  /* Raw logfile output.  */\n+  struct ui_file *raw_stdlog;\n+\n+  /* Save the original value of raw_stdout and raw_stdlog here when logging, and\n+     the file which we need to delete, so we can restore correctly when\n+     done.  */\n   struct ui_file *saved_raw_stdout;\n+  struct ui_file *saved_raw_stdlog;\n+  struct ui_file *saved_raw_file_to_delete;\n+\n \n   /* MI's builder.  */\n   struct ui_out *mi_uiout;"
    },
    {
      "sha": "ad1a06cae0bd2bba2cafc772c6e24c3a6231ed4e",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -1279,7 +1279,8 @@ mi_interp::interp_ui_out ()\n    the consoles to use the supplied ui-file(s).  */\n \n void\n-mi_interp::set_logging (ui_file_up logfile, bool logging_redirect)\n+mi_interp::set_logging (ui_file_up logfile, bool logging_redirect,\n+\t\t\tbool debug_redirect)\n {\n   struct mi_interp *mi = this;\n \n@@ -1289,22 +1290,30 @@ mi_interp::set_logging (ui_file_up logfile, bool logging_redirect)\n \n       /* If something is being redirected, then grab logfile.  */\n       ui_file *logfile_p = nullptr;\n-      if (logging_redirect)\n-\tlogfile_p = logfile.release ();\n+      if (logging_redirect || debug_redirect)\n+\t{\n+\t  logfile_p = logfile.get ();\n+\t  mi->saved_raw_file_to_delete = logfile_p;\n+\t}\n \n       /* If something is not being redirected, then a tee containing both the\n \t logfile and stdout.  */\n       ui_file *tee = nullptr;\n-      if (!logging_redirect)\n-\ttee = new tee_file (mi->raw_stdout, std::move (logfile));\n+      if (!logging_redirect || !debug_redirect)\n+\t{\n+\t  tee = new tee_file (mi->raw_stdout, std::move (logfile));\n+\t  mi->saved_raw_file_to_delete = tee;\n+\t}\n \n       mi->raw_stdout = logging_redirect ? logfile_p : tee;\n+      mi->raw_stdlog = debug_redirect ? logfile_p : tee;\n     }\n   else\n     {\n-      delete mi->raw_stdout;\n+      delete mi->saved_raw_file_to_delete;\n       mi->raw_stdout = mi->saved_raw_stdout;\n       mi->saved_raw_stdout = nullptr;\n+      mi->saved_raw_file_to_delete = nullptr;\n     }\n \n   mi->out->set_raw (mi->raw_stdout);"
    },
    {
      "sha": "50888236af670018082e35e49415ae18f5a13ac5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.base/ui-redirect.exp: Add debug redirect tests.\n+\n 2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n \n \t* gdb.base/ui-redirect.exp: Test redirection."
    },
    {
      "sha": "e62d5e8341c6ccc1b896c71763a098f548223025",
      "filename": "gdb/testsuite/gdb.base/ui-redirect.exp",
      "status": "modified",
      "additions": 35,
      "deletions": 3,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/testsuite/gdb.base/ui-redirect.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca1285d17534cff3041c07ac7841288e1b3ba19c/gdb/testsuite/gdb.base/ui-redirect.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ui-redirect.exp?ref=ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "patch": "@@ -34,28 +34,60 @@ gdb_test_multiple $test $test {\n }\n gdb_test_no_output \"end\"\n \n+if ![runto_main] {\n+    fail \"can't run to main\"\n+    return -1\n+}\n+gdb_breakpoint \"foo\"\n+gdb_breakpoint \"bar\"\n+\n with_test_prefix \"logging\" {\n     gdb_test_no_output \"set logging file /dev/null\"\n-    gdb_test \"set logging on\" \"Copying output to /dev/null\\\\.\"\n+    gdb_test \"set logging on\" \\\n+    \"Copying output to /dev/null.*Copying debug output to /dev/null\\\\.\"\n     gdb_test \"save breakpoints /dev/null\" \"Saved to file '/dev/null'\\\\.\"\n     gdb_test \"set logging off\" \"Done logging to /dev/null\\\\.\"\n     gdb_test \"help\" \"List of classes of commands:.*\"\n }\n \n with_test_prefix \"redirect\" {\n     gdb_test \"set logging redirect on\"\n-    gdb_test \"set logging on\" \"Redirecting output to /dev/null\\\\.\"\n+    gdb_test \"set logging on\" \\\n+    \"Redirecting output to /dev/null.*Copying debug output to /dev/null\\\\.\"\n     gdb_test_no_output \"save breakpoints /dev/null\"\n     gdb_test \"set logging off\" \"Done logging to /dev/null\\\\.\"\n     gdb_test \"help\" \"List of classes of commands:.*\"\n }\n \n with_test_prefix \"redirect while already logging\" {\n     gdb_test_no_output \"set logging redirect off\"\n-    gdb_test \"set logging on\" \"Copying output to /dev/null\\\\.\"\n+    gdb_test \"set logging on\" \\\n+    \"Copying output to /dev/null.*Copying debug output to /dev/null\\\\.\"\n     gdb_test \"set logging redirect on\" \\\n     \".*warning: Currently logging .*Turn the logging off and on to make the new setting effective.*\"\n     gdb_test \"save breakpoints /dev/null\" \"Saved to file '/dev/null'\\\\.\"\n     gdb_test \"set logging off\" \"Done logging to /dev/null\\\\.\"\n     gdb_test \"help\" \"List of classes of commands:.*\"\n+    gdb_test_no_output \"set logging redirect off\"\n+}\n+\n+with_test_prefix \"debugging\" {\n+    gdb_test \"set debug infrun 1\"\n+    gdb_test \"set logging on\" \\\n+    \"Copying output to /dev/null.*Copying debug output to /dev/null\\\\.\"\n+    gdb_test \"continue\" \"Continuing.*infrun:.*infrun:.*Breakpoint \\[0-9\\]+, foo.*\"\n+    gdb_test \"set debug infrun 0\"\n+    gdb_test \"set logging off\" \"Done logging to /dev/null\\\\.\"\n+    gdb_test \"help\" \"List of classes of commands:.*\"\n+}\n+\n+with_test_prefix \"redirect debugging\" {\n+    gdb_test_no_output \"set logging debugredirect on\"\n+    gdb_test \"set debug infrun 1\"\n+    gdb_test \"set logging on\" \\\n+    \"Copying output to /dev/null.*Redirecting debug output to /dev/null\\\\.\"\n+    gdb_test \"continue\" \"Continuing.*((?!infrun).).*Breakpoint \\[0-9\\]+, bar.*\"\n+    gdb_test \"set debug infrun 0\"\n+    gdb_test \"set logging off\" \"Done logging to /dev/null\\\\.\"\n+    gdb_test \"help\" \"List of classes of commands:.*\"\n }"
    }
  ]
}