{
  "sha": "a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTg4YzNjOGRkMzY0MjRjNDAwNzRiMGRkNmYzY2MxMjRmOWFkZWQzYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:31Z"
    },
    "message": "Implement OpenCL binary operations\n\nThis implements various OpenCL binary operations, adding a new\ntemplate class to do so.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* opencl-lang.c (opencl_relop, eval_opencl_assign): No longer\n\tstatic.  Change parameters.\n\t(eval_opencl_assign): No longer static.  Add \"op\" parameter.\n\t(evaluate_subexp_opencl): Update.\n\t* c-exp.h (opencl_binop_operation): New template class.\n\t(opencl_assign_operation, opencl_equal_operation)\n\t(opencl_notequal_operation, opencl_less_operation)\n\t(opencl_gtr_operation, opencl_geq_operation)\n\t(opencl_leq_operation): New typedefs.",
    "tree": {
      "sha": "5042c9d72bf4f27bbf0737f5b3110a92cf5a9412",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5042c9d72bf4f27bbf0737f5b3110a92cf5a9412"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e967770468cd029b0cf0da4099eea40106aa16a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e967770468cd029b0cf0da4099eea40106aa16a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e967770468cd029b0cf0da4099eea40106aa16a3"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 73,
    "deletions": 8
  },
  "files": [
    {
      "sha": "f463829b0cc8813198946bad5d27310e8b92fddb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* opencl-lang.c (opencl_relop, eval_opencl_assign): No longer\n+\tstatic.  Change parameters.\n+\t(eval_opencl_assign): No longer static.  Add \"op\" parameter.\n+\t(evaluate_subexp_opencl): Update.\n+\t* c-exp.h (opencl_binop_operation): New template class.\n+\t(opencl_assign_operation, opencl_equal_operation)\n+\t(opencl_notequal_operation, opencl_less_operation)\n+\t(opencl_gtr_operation, opencl_geq_operation)\n+\t(opencl_leq_operation): New typedefs.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* opencl-lang.c (opencl_value_cast): No longer static."
    },
    {
      "sha": "dc92e7a49a8a72ba7d80228f39cbf093f8e7b55a",
      "filename": "gdb/c-exp.h",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/gdb/c-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/gdb/c-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.h?ref=a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
      "patch": "@@ -28,6 +28,16 @@ extern struct value *eval_op_objc_selector (struct type *expect_type,\n \t\t\t\t\t    enum noside noside,\n \t\t\t\t\t    const char *sel);\n extern struct value *opencl_value_cast (struct type *type, struct value *arg);\n+extern struct value *eval_opencl_assign (struct type *expect_type,\n+\t\t\t\t\t struct expression *exp,\n+\t\t\t\t\t enum noside noside,\n+\t\t\t\t\t enum exp_opcode op,\n+\t\t\t\t\t struct value *arg1,\n+\t\t\t\t\t struct value *arg2);\n+extern struct value *opencl_relop (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside, enum exp_opcode op,\n+\t\t\t\t   struct value *arg1, struct value *arg2);\n \n namespace expr\n {\n@@ -110,6 +120,48 @@ class objc_msgcall_operation\n using opencl_cast_type_operation = cxx_cast_operation<UNOP_CAST_TYPE,\n \t\t\t\t\t\t      opencl_value_cast>;\n \n+/* Binary operations, as needed for OpenCL.  */\n+template<enum exp_opcode OP, binary_ftype FUNC,\n+\t typename BASE = maybe_constant_operation<operation_up, operation_up>>\n+class opencl_binop_operation\n+  : public BASE\n+{\n+public:\n+\n+  using BASE::BASE;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *lhs\n+      = std::get<0> (this->m_storage)->evaluate (nullptr, exp, noside);\n+    value *rhs\n+      = std::get<1> (this->m_storage)->evaluate (value_type (lhs), exp,\n+\t\t\t\t\t\t noside);\n+    return FUNC (expect_type, exp, noside, OP, lhs, rhs);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP; }\n+};\n+\n+using opencl_assign_operation = opencl_binop_operation<BINOP_ASSIGN,\n+\t\t\t\t\t\t       eval_opencl_assign,\n+\t\t\t\t\t\t       assign_operation>;\n+using opencl_equal_operation = opencl_binop_operation<BINOP_EQUAL,\n+\t\t\t\t\t\t      opencl_relop>;\n+using opencl_notequal_operation = opencl_binop_operation<BINOP_NOTEQUAL,\n+\t\t\t\t\t\t\t opencl_relop>;\n+using opencl_less_operation = opencl_binop_operation<BINOP_LESS,\n+\t\t\t\t\t\t     opencl_relop>;\n+using opencl_gtr_operation = opencl_binop_operation<BINOP_GTR,\n+\t\t\t\t\t\t    opencl_relop>;\n+using opencl_geq_operation = opencl_binop_operation<BINOP_GEQ,\n+\t\t\t\t\t\t    opencl_relop>;\n+using opencl_leq_operation = opencl_binop_operation<BINOP_LEQ,\n+\t\t\t\t\t\t    opencl_relop>;\n+\n }/* namespace expr */\n \n #endif /* C_EXP_H */"
    },
    {
      "sha": "01456055015c53bbafcc0a7fb2446412f1c21260",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a88c3c8dd36424c40074b0dd6f3cc124f9aded3c/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=a88c3c8dd36424c40074b0dd6f3cc124f9aded3c",
      "patch": "@@ -631,9 +631,10 @@ opencl_value_cast (struct type *type, struct value *arg)\n \n /* Perform a relational operation on two operands.  */\n \n-static struct value *\n-opencl_relop (struct expression *exp, struct value *arg1, struct value *arg2,\n-\t      enum exp_opcode op)\n+struct value *\n+opencl_relop (struct type *expect_type, struct expression *exp,\n+\t      enum noside noside, enum exp_opcode op,\n+\t      struct value *arg1, struct value *arg2)\n {\n   struct value *val;\n   struct type *type1 = check_typedef (value_type (arg1));\n@@ -673,9 +674,9 @@ opencl_relop (struct expression *exp, struct value *arg1, struct value *arg2,\n \n /* A helper function for BINOP_ASSIGN.  */\n \n-static struct value *\n+struct value *\n eval_opencl_assign (struct type *expect_type, struct expression *exp,\n-\t\t    enum noside noside,\n+\t\t    enum noside noside, enum exp_opcode op,\n \t\t    struct value *arg1, struct value *arg2)\n {\n   if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n@@ -712,7 +713,7 @@ evaluate_subexp_opencl (struct type *expect_type, struct expression *exp,\n       type1 = value_type (arg1);\n       arg2 = evaluate_subexp (type1, exp, pos, noside);\n \n-      return eval_opencl_assign (expect_type, exp, noside, arg1, arg2);\n+      return eval_opencl_assign (expect_type, exp, noside, op, arg1, arg2);\n \n     case UNOP_CAST:\n       type1 = exp->elts[*pos + 1].type;\n@@ -753,7 +754,7 @@ evaluate_subexp_opencl (struct type *expect_type, struct expression *exp,\n \treturn value_from_longest (builtin_type (exp->gdbarch)->\n \t\t\t\t   builtin_int, 1);\n \n-      return opencl_relop (exp, arg1, arg2, op);\n+      return opencl_relop (expect_type, exp, noside, op, arg1, arg2);\n \n     /* Handle the logical unary operator not(!).  */\n     case UNOP_LOGICAL_NOT:\n@@ -798,7 +799,7 @@ evaluate_subexp_opencl (struct type *expect_type, struct expression *exp,\n \t    {\n \t      arg2 = evaluate_subexp (nullptr, exp, pos, noside);\n \n-\t      return opencl_relop (exp, arg1, arg2, op);\n+\t      return opencl_relop (nullptr, exp, noside, op, arg1, arg2);\n \t    }\n \t  else\n \t    {"
    }
  ]
}