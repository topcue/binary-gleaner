{
  "sha": "6eac171f0624303d944ff1a1ae4d0e3b0a63c800",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmVhYzE3MWYwNjI0MzAzZDk0NGZmMWExYWU0ZDBlM2IwYTYzYzgwMA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-08-15T22:25:14Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-08-15T22:25:14Z"
    },
    "message": "[gdb] Make maint info sections print relocated addresses\n\nWhen running gdb.base/compare-sections.exp with -fPIE/-pie, we get:\n...\nprint /u *(unsigned char *) 0x00000238^M\nCannot access memory at address 0x238^M\n(gdb) FAIL: gdb.base/compare-sections.exp: read-only: get value of read-only section\n...\n\nThe problem is that that \"maint info sections\" prints an unrelocated address:\n...\n [0]     0x00000238->0x00000254 at 0x00000238: .interp ALLOC LOAD READONLY \\\n                                                       DATA HAS_CONTENTS\n...\nwhile the test expects a relocated address.\n\nGiven that the documentation states that the command displays \"the section\ninformation displayed by info files\", and that info files shows relocated\naddresses:\n...\n        0x0000555555554238 - 0x0000555555554254 is .interp\n...\nfix this by showing relocated addresses for maint info sections as\nwell.\n\nBuild and tested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2019-08-16  Tom de Vries  <tdevries@suse.de>\n\n\t* maint.c (maintenance_info_sections): Also handle !ALLOBJ case using\n\tprint_objfile_section_info.",
    "tree": {
      "sha": "5fa78253296625c7f54c30b84f67f9583563d3f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5fa78253296625c7f54c30b84f67f9583563d3f9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6eac171f0624303d944ff1a1ae4d0e3b0a63c800",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eac171f0624303d944ff1a1ae4d0e3b0a63c800",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6eac171f0624303d944ff1a1ae4d0e3b0a63c800",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eac171f0624303d944ff1a1ae4d0e3b0a63c800/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3df505f60eacd2c931092c7007f084d27583f9e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3df505f60eacd2c931092c7007f084d27583f9e5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3df505f60eacd2c931092c7007f084d27583f9e5"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 26,
    "deletions": 18
  },
  "files": [
    {
      "sha": "151f78f2b88f79180a3e869fe91fc93c97b494e7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eac171f0624303d944ff1a1ae4d0e3b0a63c800/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eac171f0624303d944ff1a1ae4d0e3b0a63c800/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6eac171f0624303d944ff1a1ae4d0e3b0a63c800",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-16  Tom de Vries  <tdevries@suse.de>\n+\n+\t* maint.c (maintenance_info_sections): Also handle !ALLOBJ case using\n+\tprint_objfile_section_info.\n+\n 2019-08-15  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-io.c (tui_puts_internal): Check TUI_CMD_WIN before"
    },
    {
      "sha": "837ed23cfb6b9217aacab4103b687eb7ba51ec15",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 21,
      "deletions": 18,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eac171f0624303d944ff1a1ae4d0e3b0a63c800/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eac171f0624303d944ff1a1ae4d0e3b0a63c800/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=6eac171f0624303d944ff1a1ae4d0e3b0a63c800",
      "patch": "@@ -329,33 +329,36 @@ maintenance_info_sections (const char *arg, int from_tty)\n {\n   if (exec_bfd)\n     {\n+      struct obj_section *osect;\n+      bool allobj = false;\n+\n       printf_filtered (_(\"Exec file:\\n\"));\n       printf_filtered (\"    `%s', \", bfd_get_filename (exec_bfd));\n       wrap_here (\"        \");\n       printf_filtered (_(\"file type %s.\\n\"), bfd_get_target (exec_bfd));\n-      if (arg && *arg && match_substring (arg, \"ALLOBJ\"))\n-\t{\n-\t  struct obj_section *osect;\n \n-\t  /* Only this function cares about the 'ALLOBJ' argument; \n-\t     if 'ALLOBJ' is the only argument, discard it rather than\n-\t     passing it down to print_objfile_section_info (which \n-\t     wouldn't know how to handle it).  */\n-\t  if (strcmp (arg, \"ALLOBJ\") == 0)\n-\t    arg = NULL;\n+      /* Only this function cares about the 'ALLOBJ' argument;\n+\t if 'ALLOBJ' is the only argument, discard it rather than\n+\t passing it down to print_objfile_section_info (which\n+\t wouldn't know how to handle it).  */\n+      if (arg && strcmp (arg, \"ALLOBJ\") == 0)\n+\t{\n+\t  arg = NULL;\n+\t  allobj = true;\n+\t}\n \n-\t  for (objfile *ofile : current_program_space->objfiles ())\n+      for (objfile *ofile : current_program_space->objfiles ())\n+\t{\n+\t  if (allobj)\n+\t    printf_filtered (_(\"  Object file: %s\\n\"),\n+\t\t\t     bfd_get_filename (ofile->obfd));\n+\t  ALL_OBJFILE_OSECTIONS (ofile, osect)\n \t    {\n-\t      printf_filtered (_(\"  Object file: %s\\n\"), \n-\t\t\t       bfd_get_filename (ofile->obfd));\n-\t      ALL_OBJFILE_OSECTIONS (ofile, osect)\n-\t\t{\n-\t\t  print_objfile_section_info (ofile->obfd, osect, arg);\n-\t\t}\n+\t      if (!allobj && ofile->obfd != exec_bfd)\n+\t\tcontinue;\n+\t      print_objfile_section_info (ofile->obfd, osect, arg);\n \t    }\n \t}\n-      else \n-\tbfd_map_over_sections (exec_bfd, print_bfd_section_info, (void *) arg);\n     }\n \n   if (core_bfd)"
    }
  ]
}