{
  "sha": "2c473def12b08100e6b56261f01112db7f6aeab5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM0NzNkZWYxMmIwODEwMGU2YjU2MjYxZjAxMTEyZGI3ZjZhZWFiNQ==",
  "commit": {
    "author": {
      "name": "Michael Weghorn",
      "email": "m.weghorn@posteo.de",
      "date": "2021-04-27T14:02:42Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-27T15:22:32Z"
    },
    "message": "gdb: do autoload before notifying Python side in new_objfile event\n\nWithout any explicit dependencies specified, the observers attached\nto the 'gdb::observers::new_objfile' observable are always notified\nin the order in which they have been attached.\n\nThe new_objfile observer callback to auto-load scripts is attached in\n'_initialize_auto_load'.\nThe new_objfile observer callback that propagates the new_objfile event\nto the Python side is attached in 'gdbpy_initialize_inferior', which is\ncalled via '_initialize_python'.\nWith '_initialize_python' happening before '_initialize_auto_load',\nthe consequence was that the new_objfile event was emitted on the Python\nside before autoloaded scripts had been executed when a new objfile was\nloaded.\nAs a result, trying to access the objfile's pretty printers (defined in\nthe autoloaded script) from a handler for the Python-side\n'new_objfile' event would fail. Those would only be initialized later on\n(when the 'auto_load_new_objfile' callback was called).\n\nTo make sure that the objfile passed to the Python event handler\nis properly initialized (including its 'pretty_printers' member),\nmake sure that the 'auto_load_new_objfile' observer is notified\nbefore the 'python_new_objfile' one that propagates the event\nto the Python side.\n\nTo do this, make use of the mechanism to explicitly specify\ndependencies between observers (introduced in a preparatory commit).\n\nAdd a corresponding testcase that involves a test library with an autoloaded\nPython script and a handler for the Python 'new_objfile' event.\n\n(The real world use case where I came across this issue was in an attempt\nto extend handling for GDB pretty printers for dynamically loaded\nobjfiles in the Qt Creator IDE, s. [1] and [2] for more background.)\n\n[1] https://bugreports.qt.io/browse/QTCREATORBUG-25339\n[2] https://codereview.qt-project.org/c/qt-creator/qt-creator/+/333857/1\n\nTested on x86_64-linux (Debian testing).\n\ngdb/ChangeLog:\n\n\t* gdb/auto-load.c (_initialize_auto_load): 'Specify token\n\twhen attaching the 'auto_load_new_objfile' observer, so\n\tother observers can specify it as a dependency.\n\t* gdb/auto-load.h (struct token): Declare\n\t'auto_load_new_objfile_observer_token' as token to be used\n\tfor the 'auto_load_new_objfile' observer.\n\t* gdb/python/py-inferior.c (gdbpy_initialize_inferior): Make\n\t'python_new_objfile' observer depend on 'auto_load_new_objfile'\n\tobserver, so it gets notified after the latter.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/libpy-autoloaded-pretty-printers-in-newobjfile-event.so-gdb.py: New test.\n\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.cc: New test.\n\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.h: New test.\n\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-main.cc: New test.\n\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.exp: New test.\n\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.py: New test.\n\nChange-Id: I8275b3f4c3bec32e56dd7892f9a59d89544edf89",
    "tree": {
      "sha": "5e2e9f80c07f26ac3f3de8cf509a2fd5db9d8478",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5e2e9f80c07f26ac3f3de8cf509a2fd5db9d8478"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c473def12b08100e6b56261f01112db7f6aeab5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c473def12b08100e6b56261f01112db7f6aeab5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c473def12b08100e6b56261f01112db7f6aeab5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c473def12b08100e6b56261f01112db7f6aeab5/comments",
  "author": {
    "login": "michaelweghorn",
    "id": 6560939,
    "node_id": "MDQ6VXNlcjY1NjA5Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6560939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelweghorn",
    "html_url": "https://github.com/michaelweghorn",
    "followers_url": "https://api.github.com/users/michaelweghorn/followers",
    "following_url": "https://api.github.com/users/michaelweghorn/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelweghorn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelweghorn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelweghorn/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelweghorn/orgs",
    "repos_url": "https://api.github.com/users/michaelweghorn/repos",
    "events_url": "https://api.github.com/users/michaelweghorn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelweghorn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a6e099f43a13efb0ee274002de689c2cb1b7e23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a6e099f43a13efb0ee274002de689c2cb1b7e23",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a6e099f43a13efb0ee274002de689c2cb1b7e23"
    }
  ],
  "stats": {
    "total": 306,
    "additions": 303,
    "deletions": 3
  },
  "files": [
    {
      "sha": "e8f7ce591701664ddae48961c1c884515578c994",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -1,3 +1,16 @@\n+2021-04-27  Michael Weghorn  <m.weghorn@posteo.de>\n+\t    Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb/auto-load.c (_initialize_auto_load): 'Specify token\n+\twhen attaching the 'auto_load_new_objfile' observer, so\n+\tother observers can specify it as a dependency.\n+\t* gdb/auto-load.h (struct token): Declare\n+\t'auto_load_new_objfile_observer_token' as token to be used\n+\tfor the 'auto_load_new_objfile' observer.\n+\t* gdb/python/py-inferior.c (gdbpy_initialize_inferior): Make\n+\t'python_new_objfile' observer depend on 'auto_load_new_objfile'\n+\tobserver, so it gets notified after the latter.\n+\n 2021-04-27  Michael Weghorn  <m.weghorn@posteo.de>\n \t    Simon Marchi  <simon.marchi@polymtl.ca>\n "
    },
    {
      "sha": "d1ae6deacee715fc1c1b0731d659783ecbdac546",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -1494,6 +1494,10 @@ found and/or loaded.\"),\n   return &retval;\n }\n \n+/* See auto-load.h.  */\n+\n+gdb::observers::token auto_load_new_objfile_observer_token;\n+\n void _initialize_auto_load ();\n void\n _initialize_auto_load ()\n@@ -1503,8 +1507,9 @@ _initialize_auto_load ()\n   char *guile_name_help;\n   const char *suffix;\n \n-  gdb::observers::new_objfile.attach (auto_load_new_objfile, \"auto-load\");\n-\n+  gdb::observers::new_objfile.attach (auto_load_new_objfile,\n+                                      auto_load_new_objfile_observer_token,\n+                                      \"auto-load\");\n   add_setshow_boolean_cmd (\"gdb-scripts\", class_support,\n \t\t\t   &auto_load_gdb_scripts, _(\"\\\n Enable or disable auto-loading of canned sequences of commands scripts.\"), _(\"\\"
    },
    {
      "sha": "4372ec4f4dd71c8f7b9fd8644bec3d8ad38ac1e2",
      "filename": "gdb/auto-load.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/auto-load.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/auto-load.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.h?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -25,6 +25,10 @@ struct program_space;\n struct auto_load_pspace_info;\n struct extension_language_defn;\n \n+namespace gdb::observers {\n+struct token;\n+}\n+\n /* Value of the 'set debug auto-load' configuration variable.  */\n \n extern bool debug_auto_load;\n@@ -40,6 +44,10 @@ extern bool auto_load_local_gdbinit;\n extern char *auto_load_local_gdbinit_pathname;\n extern bool auto_load_local_gdbinit_loaded;\n \n+/* Token used for the auto_load_new_objfile observer, so other observers can\n+   specify it as a dependency. */\n+extern gdb::observers::token auto_load_new_objfile_observer_token;\n+\n extern struct auto_load_pspace_info *\n   get_auto_load_pspace_data_for_loading (struct program_space *pspace);\n extern void auto_load_objfile_script (struct objfile *objfile,"
    },
    {
      "sha": "febd2a73ece34a1ba236ecb52fa283eb326a0e43",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -18,6 +18,7 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include \"auto-load.h\"\n #include \"gdbcore.h\"\n #include \"gdbthread.h\"\n #include \"inferior.h\"\n@@ -917,7 +918,11 @@ gdbpy_initialize_inferior (void)\n   gdb::observers::register_changed.attach (python_on_register_change,\n \t\t\t\t\t   \"py-inferior\");\n   gdb::observers::inferior_exit.attach (python_inferior_exit, \"py-inferior\");\n-  gdb::observers::new_objfile.attach (python_new_objfile, \"py-inferior\");\n+  /* Need to run after auto-load's new_objfile observer, so that\n+     auto-loaded pretty-printers are available.  */\n+  gdb::observers::new_objfile.attach\n+    (python_new_objfile, \"py-inferior\",\n+     { &auto_load_new_objfile_observer_token });\n   gdb::observers::inferior_added.attach (python_new_inferior, \"py-inferior\");\n   gdb::observers::inferior_removed.attach (python_inferior_deleted,\n \t\t\t\t\t   \"py-inferior\");"
    },
    {
      "sha": "10c77864fe60d816b8135dda78acdf70f1dc97df",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -1,3 +1,13 @@\n+2021-04-27  Michael Weghorn  <m.weghorn@posteo.de>\n+\t    Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb.python/libpy-autoloaded-pretty-printers-in-newobjfile-event.so-gdb.py: New test.\n+\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.cc: New test.\n+\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.h: New test.\n+\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-main.cc: New test.\n+\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.exp: New test.\n+\t* gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.py: New test.\n+\n 2021-04-26  Tom Tromey  <tromey@adacore.com>\n \n \tPR gdb/27743:"
    },
    {
      "sha": "aeb39a6c483a5f89de6af442909d284bda279c41",
      "filename": "gdb/testsuite/gdb.python/libpy-autoloaded-pretty-printers-in-newobjfile-event.so-gdb.py",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/libpy-autoloaded-pretty-printers-in-newobjfile-event.so-gdb.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/libpy-autoloaded-pretty-printers-in-newobjfile-event.so-gdb.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/libpy-autoloaded-pretty-printers-in-newobjfile-event.so-gdb.py?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -0,0 +1,43 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the GDB testsuite. It tests that python pretty\n+# printers defined in a python script that is autoloaded have been\n+# registered when a custom event handler for the new_objfile event\n+# is called.\n+\n+import gdb.printing\n+\n+\n+class MyClassTestLibPrinter(object):\n+    \"Print a MyClassTestLib\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        return \"MyClassTestLib object, id: {}\".format(self.val[\"id\"])\n+\n+    def display_hint(self):\n+        return \"string\"\n+\n+\n+def build_pretty_printer():\n+    pp = gdb.printing.RegexpCollectionPrettyPrinter(\"my_library\")\n+    pp.add_printer(\"MyClassTestLib\", \"^MyClassTestLib$\", MyClassTestLibPrinter)\n+    return pp\n+\n+\n+gdb.printing.register_pretty_printer(gdb.current_objfile(), build_pretty_printer())"
    },
    {
      "sha": "7f13cd2b741e363ea31cb189e545a159ea22d8f3",
      "filename": "gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.cc",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.cc?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -0,0 +1,28 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"py-autoloaded-pretty-printers-in-newobjfile-event-lib.h\"\n+\n+MyClassTestLib::MyClassTestLib (int theId)\n+{\n+  id = theId;\n+}\n+\n+int MyClassTestLib::getId ()\n+{\n+  return id;\n+}"
    },
    {
      "sha": "3714ecd2ef08a3c4dd1d2b314a886161e97495fc",
      "filename": "gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.h",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-lib.h?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -0,0 +1,31 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef TESTLIBRARY_H\n+#define TESTLIBRARY_H\n+\n+class MyClassTestLib\n+{\n+public:\n+  explicit MyClassTestLib (int theId);\n+  int getId ();\n+\n+private:\n+  int id;\n+};\n+\n+#endif /* TESTLIBRARY_H */"
    },
    {
      "sha": "2cc89a3befd5c0651a5fabcaf098991db42f83c2",
      "filename": "gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-main.cc",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-main.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-main.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event-main.cc?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -0,0 +1,27 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"py-autoloaded-pretty-printers-in-newobjfile-event-lib.h\"\n+\n+bool all_good = false;\n+\n+int\n+main ()\n+{\n+  MyClassTestLib test (1);\n+  return 0; /* break to inspect */\n+}"
    },
    {
      "sha": "96ae41b0752d9754da0e88393078d06b568caf8f",
      "filename": "gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.exp",
      "status": "added",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.exp?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -0,0 +1,80 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the GDB testsuite.  It tests that Python pretty-printers\n+# defined in a Python script that is autoloaded are registered when an event\n+# handler for the new_objfile event is called.\n+\n+load_lib gdb-python.exp\n+\n+standard_testfile -main.cc\n+\n+set srcfile_lib \"${testfile}-lib.cc\"\n+set python_event_handler_file \"${srcdir}/${subdir}/${testfile}.py\"\n+set libname \"lib${testfile}\"\n+set python_autoload_file \"${srcdir}/${subdir}/${libname}.so-gdb.py\"\n+set binfile_lib [standard_output_file \"${libname}.so\"]\n+\n+# Start GDB first - needed for skip_python_tests.\n+clean_restart\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+# Compile library.\n+if { [gdb_compile_shlib ${srcdir}/${subdir}/${srcfile_lib} ${binfile_lib} \\\n+      {debug c++}] != \"\" } {\n+    return -1\n+}\n+\n+# Compile main program.\n+if { [gdb_compile ${srcdir}/${subdir}/${srcfile} \\\n+      ${binfile} \\\n+      executable \\\n+      [list debug c++ shlib=$binfile_lib]] != \"\" } {\n+    return -1\n+}\n+\n+# Make the -gdb.py script available to gdb, it is automatically loaded by\n+# gdb if it is put in the same directory as the library.\n+set remote_python_autoload_file \\\n+    [gdb_remote_download host $python_autoload_file]\n+\n+gdb_test_no_output \\\n+    \"set auto-load safe-path ${remote_python_autoload_file}\" \\\n+    \"set auto-load safe-path\"\n+\n+# Load the Python file that defines a handler for the new_objfile event.\n+set remote_python_event_handler_file\\\n+    [gdb_remote_download host $python_event_handler_file]\n+gdb_test_no_output \"source ${remote_python_event_handler_file}\" \"load python file\"\n+\n+gdb_load ${binfile}\n+\n+gdb_test_no_output \"set print pretty on\"\n+\n+if { ![runto_main] } {\n+    fail \"failed to run to main\"\n+    return\n+}\n+\n+# Check that the new_objfile handler saw the pretty-printer.\n+gdb_test \"print all_good\" \" = true\"\n+\n+# Check that the pretty-printer actually works.\n+gdb_test \"info pretty-printer\" \"my_library.*MyClassTestLib.*\"\n+gdb_breakpoint [gdb_get_line_number \"break to inspect\"]\n+gdb_test \"continue\" \"Breakpoint $decimal, main .*\"\n+gdb_test \"print test\" \"MyClassTestLib object, id: 1.*\""
    },
    {
      "sha": "1d9c75bd461b835a0c8ae9f85b576ec586c832aa",
      "filename": "gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.py",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c473def12b08100e6b56261f01112db7f6aeab5/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-autoloaded-pretty-printers-in-newobjfile-event.py?ref=2c473def12b08100e6b56261f01112db7f6aeab5",
      "patch": "@@ -0,0 +1,50 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the GDB testsuite. It tests that python pretty\n+# printers defined in a python script that is autoloaded have been\n+# registered when a custom event handler for the new_objfile event\n+# is called.\n+\n+import gdb\n+import os\n+\n+\n+def new_objfile_handler(event):\n+    assert isinstance(event, gdb.NewObjFileEvent)\n+    objfile = event.new_objfile\n+\n+    # Only observe the custom test library.\n+    libname = \"libpy-autoloaded-pretty-printers-in-newobjfile-event\"\n+    if libname in os.path.basename(objfile.filename):\n+        # If everything went well and the pretty-printer auto-load happened\n+        # before notifying the Python listeners, we expect to see one pretty\n+        # printer, and it must be ours.\n+        all_good = (\n+            len(objfile.pretty_printers) == 1\n+            and objfile.pretty_printers[0].name == \"my_library\"\n+        )\n+\n+        if all_good:\n+            gdb.parse_and_eval(\"all_good = 1\")\n+        else:\n+            print(\"Oops, not all good:\")\n+            print(\"pretty printer count: {}\".format(len(objfile.pretty_printers)))\n+\n+            for pp in objfile.pretty_printers:\n+                print(\"  - {}\".format(pp.name))\n+\n+\n+gdb.events.new_objfile.connect(new_objfile_handler)"
    }
  ]
}