{
  "sha": "359c74415c2b78bf2b2be3bd3e013d78f298350d",
  "node_id": "C_kwDOANOeidoAKDM1OWM3NDQxNWMyYjc4YmYyYjJiZTNiZDNlMDEzZDc4ZjI5ODM1MGQ",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-03T04:20:18Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-03T05:13:23Z"
    },
    "message": "asan: assert (addr_ranges) <= (start)\n\nThat assert would be more obvious if it were reported as\n\"addr_ranges <= end_ranges\".  Fix that by using the obvious variable\nin the final loop.  Stop the assertion by using a signed comparison:\nIt's possible for the rounding up of the arange pointer to exceed the\nend of the block when the block size is fuzzed.\n\n\t* dwarf.c (display_debug_aranges): Use \"end_ranges\" in loop\n\tdisplaying ranges rather that \"start\".  Simplify rounding up\n\tto 2*address_size boundary.  Use signed comparison in loop.",
    "tree": {
      "sha": "cb7d3c792821f5529c44cced0e363ca1f8d7cf54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb7d3c792821f5529c44cced0e363ca1f8d7cf54"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/359c74415c2b78bf2b2be3bd3e013d78f298350d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/359c74415c2b78bf2b2be3bd3e013d78f298350d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/359c74415c2b78bf2b2be3bd3e013d78f298350d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/359c74415c2b78bf2b2be3bd3e013d78f298350d/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0a129eb19a773d930d60b084209570f663db2053",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a129eb19a773d930d60b084209570f663db2053",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0a129eb19a773d930d60b084209570f663db2053"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 9,
    "deletions": 10
  },
  "files": [
    {
      "sha": "a118c5b794ea7e30746109e5168aa25a12915b5b",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/359c74415c2b78bf2b2be3bd3e013d78f298350d/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/359c74415c2b78bf2b2be3bd3e013d78f298350d/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=359c74415c2b78bf2b2be3bd3e013d78f298350d",
      "patch": "@@ -7192,7 +7192,6 @@ display_debug_aranges (struct dwarf_section *section,\n       dwarf_vma address;\n       unsigned long sec_off;\n       unsigned char address_size;\n-      int excess;\n       unsigned int offset_size;\n       unsigned char *end_ranges;\n \n@@ -7277,22 +7276,22 @@ display_debug_aranges (struct dwarf_section *section,\n       addr_ranges = hdrptr;\n \n       /* Must pad to an alignment boundary that is twice the address size.  */\n-      excess = (hdrptr - start) % (2 * address_size);\n-      if (excess)\n-\taddr_ranges += (2 * address_size) - excess;\n+      addr_ranges += (2 * address_size - 1\n+\t\t      - (hdrptr - start - 1) % (2 * address_size));\n \n-      start = end_ranges;\n-\n-      while (2u * address_size <= (size_t) (start - addr_ranges))\n+      while (2 * address_size <= end_ranges - addr_ranges)\n \t{\n-\t  SAFE_BYTE_GET_AND_INC (address, addr_ranges, address_size, start);\n-\t  SAFE_BYTE_GET_AND_INC (length, addr_ranges, address_size, start);\n-\n+\t  SAFE_BYTE_GET_AND_INC (address, addr_ranges, address_size,\n+\t\t\t\t end_ranges);\n+\t  SAFE_BYTE_GET_AND_INC (length, addr_ranges, address_size,\n+\t\t\t\t end_ranges);\n \t  printf (\"    \");\n \t  print_dwarf_vma (address, address_size);\n \t  print_dwarf_vma (length, address_size);\n \t  putchar ('\\n');\n \t}\n+\n+      start = end_ranges;\n     }\n \n   printf (\"\\n\");"
    }
  ]
}