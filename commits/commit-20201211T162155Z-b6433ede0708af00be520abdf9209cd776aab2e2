{
  "sha": "b6433ede0708af00be520abdf9209cd776aab2e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjY0MzNlZGUwNzA4YWYwMGJlNTIwYWJkZjkyMDljZDc3NmFhYjJlMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:21:53Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:21:55Z"
    },
    "message": "Make bp_location derive from refcounted_object\n\nThis changes bp_location to derive from refcounted_object, introduces\na ref_ptr specialization for this type, and then changes\nbpstats::bp_location_at to use that specialization.  This removes some\nmanual reference counting and simplifies the code.\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* inline-frame.c (stopped_by_user_bp_inline_frame): Update.\n\t* ada-lang.c (check_status_exception): Update.\n\t* breakpoint.c (free_bp_location): Remove.\n\t(decref_bp_location): Use bp_location_ref_policy.\n\t(bpstats::bpstats): Don't call incref_bp_location.\n\t(bpstats::~bpstats): Remove.\n\t(bpstats::bpstats): Update.\n\t(bpstat_check_watchpoint, bpstat_check_breakpoint_conditions)\n\t(bp_location::bp_location): Update.\n\t(incref_bp_location): Remove.\n\t(bkpt_print_it): Update.\n\t* breakpoint.h (class bp_location): Derive from\n\trefcounted_object.\n\t(struct bpstats): Remove destructor.\n\t<bp_location_at>: Now a bp_location_ref_ptr.\n\t<refc>: Remove.\n\t(bp_location_ref_ptr): New typedef.\n\t(struct bp_location_ref_policy): New.",
    "tree": {
      "sha": "ccb678ca9bc5bdff0664d7c714c3f6ad7a6d00bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ccb678ca9bc5bdff0664d7c714c3f6ad7a6d00bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b6433ede0708af00be520abdf9209cd776aab2e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6433ede0708af00be520abdf9209cd776aab2e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b6433ede0708af00be520abdf9209cd776aab2e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6433ede0708af00be520abdf9209cd776aab2e2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bfcb9db853c41ffff74c77d338b8b1378781aa0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfcb9db853c41ffff74c77d338b8b1378781aa0e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bfcb9db853c41ffff74c77d338b8b1378781aa0e"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 53,
    "deletions": 45
  },
  "files": [
    {
      "sha": "61997f6e178d070d5830b3b07518b5329964285d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b6433ede0708af00be520abdf9209cd776aab2e2",
      "patch": "@@ -1,3 +1,24 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* inline-frame.c (stopped_by_user_bp_inline_frame): Update.\n+\t* ada-lang.c (check_status_exception): Update.\n+\t* breakpoint.c (free_bp_location): Remove.\n+\t(decref_bp_location): Use bp_location_ref_policy.\n+\t(bpstats::bpstats): Don't call incref_bp_location.\n+\t(bpstats::~bpstats): Remove.\n+\t(bpstats::bpstats): Update.\n+\t(bpstat_check_watchpoint, bpstat_check_breakpoint_conditions)\n+\t(bp_location::bp_location): Update.\n+\t(incref_bp_location): Remove.\n+\t(bkpt_print_it): Update.\n+\t* breakpoint.h (class bp_location): Derive from\n+\trefcounted_object.\n+\t(struct bpstats): Remove destructor.\n+\t<bp_location_at>: Now a bp_location_ref_ptr.\n+\t<refc>: Remove.\n+\t(bp_location_ref_ptr): New typedef.\n+\t(struct bp_location_ref_policy): New.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* thread.c (class scoped_inc_dec_ref): Remove."
    },
    {
      "sha": "b41d2bfc6145a5e44dcb2113b34ee974872d0e86",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=b6433ede0708af00be520abdf9209cd776aab2e2",
      "patch": "@@ -12255,7 +12255,7 @@ should_stop_exception (const struct bp_location *bl)\n static void\n check_status_exception (bpstat bs)\n {\n-  bs->stop = should_stop_exception (bs->bp_location_at);\n+  bs->stop = should_stop_exception (bs->bp_location_at.get ());\n }\n \n /* Implement the PRINT_IT method in the breakpoint_ops structure"
    },
    {
      "sha": "933fe90a7bbd5be9ab9f96dd0d72819a871ee97b",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 37,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=b6433ede0708af00be520abdf9209cd776aab2e2",
      "patch": "@@ -172,8 +172,6 @@ static int hw_watchpoint_used_count_others (struct breakpoint *except,\n static void enable_breakpoint_disp (struct breakpoint *, enum bpdisp,\n \t\t\t\t    int count);\n \n-static void free_bp_location (struct bp_location *loc);\n-static void incref_bp_location (struct bp_location *loc);\n static void decref_bp_location (struct bp_location **loc);\n \n static struct bp_location *allocate_bp_location (struct breakpoint *bpt);\n@@ -4242,15 +4240,6 @@ is_catchpoint (struct breakpoint *b)\n   return (b->type == bp_catchpoint);\n }\n \n-/* Frees any storage that is part of a bpstat.  Does not walk the\n-   'next' chain.  */\n-\n-bpstats::~bpstats ()\n-{\n-  if (bp_location_at != NULL)\n-    decref_bp_location (&bp_location_at);\n-}\n-\n /* Clear a bpstat so that it says we are not at any breakpoint.\n    Also free any storage that is part of a bpstat.  */\n \n@@ -4283,7 +4272,6 @@ bpstats::bpstats (const bpstats &other)\n {\n   if (other.old_val != NULL)\n     old_val = release_value (value_copy (other.old_val.get ()));\n-  incref_bp_location (bp_location_at);\n }\n \n /* Return a copy of a bpstat.  Like \"bs1 = bs2\" but all storage that\n@@ -4768,21 +4756,19 @@ breakpoint_cond_eval (expression *exp)\n \n bpstats::bpstats (struct bp_location *bl, bpstat **bs_link_pointer)\n   : next (NULL),\n-    bp_location_at (bl),\n+    bp_location_at (bp_location_ref_ptr::new_reference (bl)),\n     breakpoint_at (bl->owner),\n     commands (NULL),\n     print (0),\n     stop (0),\n     print_it (print_it_normal)\n {\n-  incref_bp_location (bl);\n   **bs_link_pointer = this;\n   *bs_link_pointer = &next;\n }\n \n bpstats::bpstats ()\n   : next (NULL),\n-    bp_location_at (NULL),\n     breakpoint_at (NULL),\n     commands (NULL),\n     print (0),\n@@ -5060,7 +5046,7 @@ bpstat_check_watchpoint (bpstat bs)\n   struct watchpoint *b;\n \n   /* BS is built for existing struct breakpoint.  */\n-  bl = bs->bp_location_at;\n+  bl = bs->bp_location_at.get ();\n   gdb_assert (bl != NULL);\n   b = (struct watchpoint *) bs->breakpoint_at;\n   gdb_assert (b != NULL);\n@@ -5236,7 +5222,7 @@ bpstat_check_breakpoint_conditions (bpstat bs, thread_info *thread)\n   gdb_assert (bs->stop);\n \n   /* BS is built for existing struct breakpoint.  */\n-  bl = bs->bp_location_at;\n+  bl = bs->bp_location_at.get ();\n   gdb_assert (bl != NULL);\n   b = bs->breakpoint_at;\n   gdb_assert (b != NULL);\n@@ -7101,7 +7087,7 @@ bp_location::bp_location (breakpoint *owner, bp_loc_type type)\n       || this->loc_type == bp_loc_hardware_breakpoint)\n     mark_breakpoint_location_modified (this);\n \n-  this->refc = 1;\n+  incref ();\n }\n \n bp_location::bp_location (breakpoint *owner)\n@@ -7118,30 +7104,13 @@ allocate_bp_location (struct breakpoint *bpt)\n   return bpt->ops->allocate_location (bpt);\n }\n \n-static void\n-free_bp_location (struct bp_location *loc)\n-{\n-  delete loc;\n-}\n-\n-/* Increment reference count.  */\n-\n-static void\n-incref_bp_location (struct bp_location *bl)\n-{\n-  ++bl->refc;\n-}\n-\n /* Decrement reference count.  If the reference count reaches 0,\n    destroy the bp_location.  Sets *BLP to NULL.  */\n \n static void\n decref_bp_location (struct bp_location **blp)\n {\n-  gdb_assert ((*blp)->refc > 0);\n-\n-  if (--(*blp)->refc == 0)\n-    free_bp_location (*blp);\n+  bp_location_ref_policy::decref (*blp);\n   *blp = NULL;\n }\n \n@@ -12680,7 +12649,7 @@ bkpt_print_it (bpstat bs)\n \n   gdb_assert (bs->bp_location_at != NULL);\n \n-  bl = bs->bp_location_at;\n+  bl = bs->bp_location_at.get ();\n   b = bs->breakpoint_at;\n \n   bp_temp = b->disposition == disp_del;"
    },
    {
      "sha": "2859552c529f5b28b81e61486a0841ca11a22b9f",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 24,
      "deletions": 6,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=b6433ede0708af00be520abdf9209cd776aab2e2",
      "patch": "@@ -29,6 +29,7 @@\n #include <vector>\n #include \"gdbsupport/array-view.h\"\n #include \"gdbsupport/function-view.h\"\n+#include \"gdbsupport/refcounted-object.h\"\n #include \"cli/cli-script.h\"\n \n struct block;\n@@ -311,7 +312,7 @@ enum bp_loc_type\n   bp_loc_other\t\t\t/* Miscellaneous...  */\n };\n \n-class bp_location\n+class bp_location : public refcounted_object\n {\n public:\n   bp_location () = default;\n@@ -329,9 +330,6 @@ class bp_location\n      the same parent breakpoint.  */\n   bp_location *next = NULL;\n \n-  /* The reference count.  */\n-  int refc = 0;\n-\n   /* Type of this breakpoint location.  */\n   bp_loc_type loc_type {};\n \n@@ -510,6 +508,27 @@ class bp_location\n   const struct objfile *objfile = NULL;\n };\n \n+/* A policy class for bp_location reference counting.  */\n+struct bp_location_ref_policy\n+{\n+  static void incref (bp_location *loc)\n+  {\n+    loc->incref ();\n+  }\n+\n+  static void decref (bp_location *loc)\n+  {\n+    gdb_assert (loc->refcount () > 0);\n+    loc->decref ();\n+    if (loc->refcount () == 0)\n+      delete loc;\n+  }\n+};\n+\n+/* A gdb::ref_ptr that has been specialized for bp_location.  */\n+typedef gdb::ref_ptr<bp_location, bp_location_ref_policy>\n+     bp_location_ref_ptr;\n+\n /* The possible return values for print_bpstat, print_it_normal,\n    print_it_done, print_it_noop.  */\n enum print_stop_action\n@@ -1130,7 +1149,6 @@ struct bpstats\n   {\n     bpstats ();\n     bpstats (struct bp_location *bl, bpstat **bs_link_pointer);\n-    ~bpstats ();\n \n     bpstats (const bpstats &);\n     bpstats &operator= (const bpstats &) = delete;\n@@ -1155,7 +1173,7 @@ struct bpstats\n        What this means is that we should not (in most cases) follow\n        the `bpstat->bp_location->owner' link, but instead use the\n        `breakpoint_at' field below.  */\n-    struct bp_location *bp_location_at;\n+    bp_location_ref_ptr bp_location_at;\n \n     /* Breakpoint that caused the stop.  This is nullified if the\n        breakpoint ends up being deleted.  See comments on"
    },
    {
      "sha": "439f3633fd6cc869d07a908dc863fcbe799f4c5f",
      "filename": "gdb/inline-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/inline-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6433ede0708af00be520abdf9209cd776aab2e2/gdb/inline-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inline-frame.c?ref=b6433ede0708af00be520abdf9209cd776aab2e2",
      "patch": "@@ -313,7 +313,7 @@ stopped_by_user_bp_inline_frame (const block *frame_block, bpstat stop_chain)\n       if (bpt != NULL\n \t  && (user_breakpoint_p (bpt) || bpt->type == bp_until))\n \t{\n-\t  bp_location *loc = s->bp_location_at;\n+\t  bp_location *loc = s->bp_location_at.get ();\n \t  enum bp_loc_type t = loc->loc_type;\n \n \t  if (t == bp_loc_software_breakpoint"
    }
  ]
}