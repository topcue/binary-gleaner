{
  "sha": "daa15dde7202d948da694bdfe0df9e5294c7ee9a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGFhMTVkZGU3MjAyZDk0OGRhNjk0YmRmZTBkZjllNTI5NGM3ZWU5YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-02T23:05:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-17T18:19:24Z"
    },
    "message": "Change make_invisible_and_set_new_height to be a method\n\nThis changes make_invisible_and_set_new_height to be a method on\ntui_win_info.  I felt that this was cleaner.\n\ngdb/ChangeLog\n2019-07-17  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-win.c (tui_resize_all)\n\t(tui_source_window_base::update_tab_width)\n\t(tui_adjust_win_heights): Update.\n\t(tui_win_info::make_invisible_and_set_new_height): Rename from\n\tmake_invisible_and_set_new_height.\n\t* tui/tui-data.h (struct tui_win_info)\n\t<make_invisible_and_set_new_height>: New method.",
    "tree": {
      "sha": "201e8bcc0d1d1d61da24f9a1ef66e4232813a09d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/201e8bcc0d1d1d61da24f9a1ef66e4232813a09d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/daa15dde7202d948da694bdfe0df9e5294c7ee9a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/daa15dde7202d948da694bdfe0df9e5294c7ee9a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/daa15dde7202d948da694bdfe0df9e5294c7ee9a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/daa15dde7202d948da694bdfe0df9e5294c7ee9a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bfad4537079109d9c41ecd86af9cf84b6825a192",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfad4537079109d9c41ecd86af9cf84b6825a192",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bfad4537079109d9c41ecd86af9cf84b6825a192"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 50,
    "deletions": 43
  },
  "files": [
    {
      "sha": "3c263816fd125bc2a8399e7aecbf1de40ecf6db1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/daa15dde7202d948da694bdfe0df9e5294c7ee9a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/daa15dde7202d948da694bdfe0df9e5294c7ee9a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=daa15dde7202d948da694bdfe0df9e5294c7ee9a",
      "patch": "@@ -1,3 +1,13 @@\n+2019-07-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-win.c (tui_resize_all)\n+\t(tui_source_window_base::update_tab_width)\n+\t(tui_adjust_win_heights): Update.\n+\t(tui_win_info::make_invisible_and_set_new_height): Rename from\n+\tmake_invisible_and_set_new_height.\n+\t* tui/tui-data.h (struct tui_win_info)\n+\t<make_invisible_and_set_new_height>: New method.\n+\n 2019-07-17  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui.c: Update."
    },
    {
      "sha": "5b436a19ceecd124dc38ba1c4a4c68d5f68c342f",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/daa15dde7202d948da694bdfe0df9e5294c7ee9a/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/daa15dde7202d948da694bdfe0df9e5294c7ee9a/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=daa15dde7202d948da694bdfe0df9e5294c7ee9a",
      "patch": "@@ -299,6 +299,11 @@ struct tui_win_info : public tui_gen_win_info\n   {\n   }\n \n+  /* Function make the target window (and auxiliary windows associated\n+     with the target) invisible, and set the new height and\n+     location.  */\n+  void make_invisible_and_set_new_height (int height);\n+\n   /* Make the window visible after the height has been changed.  */\n   void make_visible_with_new_height ();\n "
    },
    {
      "sha": "227ab94bdc70fcd33edaec32cac4d8eb02f1f9f2",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 35,
      "deletions": 43,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/daa15dde7202d948da694bdfe0df9e5294c7ee9a/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/daa15dde7202d948da694bdfe0df9e5294c7ee9a/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=daa15dde7202d948da694bdfe0df9e5294c7ee9a",
      "patch": "@@ -55,8 +55,6 @@\n /*******************************\n ** Static Local Decls\n ********************************/\n-static void make_invisible_and_set_new_height (struct tui_win_info *, \n-\t\t\t\t\t       int);\n static enum tui_status tui_adjust_win_heights (struct tui_win_info *, \n \t\t\t\t\t       int);\n static int new_height_ok (struct tui_win_info *, int);\n@@ -601,11 +599,11 @@ tui_resize_all (void)\n \t    new_height = first_win->height + split_diff;\n \n \t  locator->origin.y = new_height + 1;\n-\t  make_invisible_and_set_new_height (first_win, new_height);\n+\t  first_win->make_invisible_and_set_new_height (new_height);\n \t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n \t  TUI_CMD_WIN->width += width_diff;\n \t  new_height = screenheight - TUI_CMD_WIN->origin.y;\n-\t  make_invisible_and_set_new_height (TUI_CMD_WIN, new_height);\n+\t  TUI_CMD_WIN->make_invisible_and_set_new_height (new_height);\n \t  first_win->make_visible_with_new_height ();\n \t  TUI_CMD_WIN->make_visible_with_new_height ();\n \t  if (src_win->content.empty ())\n@@ -640,7 +638,7 @@ tui_resize_all (void)\n \t    new_height = MIN_WIN_HEIGHT;\n \t  else\n \t    new_height = first_win->height + split_diff;\n-\t  make_invisible_and_set_new_height (first_win, new_height);\n+\t  first_win->make_invisible_and_set_new_height (new_height);\n \n \t  locator->width += width_diff;\n \n@@ -663,13 +661,12 @@ tui_resize_all (void)\n \t  else\n \t    new_height = second_win->height + split_diff;\n \t  second_win->origin.y = first_win->height - 1;\n-\t  make_invisible_and_set_new_height (second_win, new_height);\n+\t  second_win->make_invisible_and_set_new_height (new_height);\n \n \t  /* Change the command window's height/width.  */\n \t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n-\t  make_invisible_and_set_new_height (TUI_CMD_WIN,\n-\t\t\t\t\t     TUI_CMD_WIN->height\n-\t\t\t\t\t     + cmd_split_diff);\n+\t  TUI_CMD_WIN->make_invisible_and_set_new_height (TUI_CMD_WIN->height\n+\t\t\t\t\t\t\t  + cmd_split_diff);\n \t  first_win->make_visible_with_new_height ();\n \t  second_win->make_visible_with_new_height ();\n \t  TUI_CMD_WIN->make_visible_with_new_height ();\n@@ -911,7 +908,7 @@ tui_source_window_base::update_tab_width ()\n      calling these 2 functions causes a complete regeneration\n      and redisplay of the window's contents, which will take\n      the new tab width into account.  */\n-  make_invisible_and_set_new_height (this, height);\n+  make_invisible_and_set_new_height (height);\n   make_visible_with_new_height ();\n }\n \n@@ -1081,7 +1078,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t    {\n \t      struct tui_win_info *src_win_info;\n \n-\t      make_invisible_and_set_new_height (primary_win_info, new_height);\n+\t      primary_win_info->make_invisible_and_set_new_height (new_height);\n \t      if (primary_win_info->type == CMD_WIN)\n \t\t{\n \t\t  win_info = tui_source_windows ()[0];\n@@ -1092,8 +1089,8 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t  win_info = tui_win_list[CMD_WIN];\n \t\t  src_win_info = primary_win_info;\n \t\t}\n-\t      make_invisible_and_set_new_height (win_info,\n-\t\t\t\t\t     win_info->height + diff);\n+\t      win_info->make_invisible_and_set_new_height\n+\t\t(win_info->height + diff);\n \t      TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n \t      win_info->make_visible_with_new_height ();\n \t      primary_win_info->make_visible_with_new_height ();\n@@ -1159,15 +1156,13 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t      second_split_diff++;\n \t\t      first_split_diff--;\n \t\t    }\n-\t\t  make_invisible_and_set_new_height (\n-\t\t\t\t\t\t  first_win,\n-\t\t\t\t first_win->height + first_split_diff);\n+\t\t  first_win->make_invisible_and_set_new_height\n+\t\t    (first_win->height + first_split_diff);\n \t\t  second_win->origin.y = first_win->height - 1;\n-\t\t  make_invisible_and_set_new_height (second_win,\n-\t\t\t\t\t\t     second_win->height\n-\t\t\t\t\t\t     + second_split_diff);\n+\t\t  second_win->make_invisible_and_set_new_height\n+\t\t    (second_win->height + second_split_diff);\n \t\t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n-\t\t  make_invisible_and_set_new_height (TUI_CMD_WIN, new_height);\n+\t\t  TUI_CMD_WIN->make_invisible_and_set_new_height (new_height);\n \t\t}\n \t      else\n \t\t{\n@@ -1188,23 +1183,22 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t\t}\n \t\t    }\n \t\t  if (primary_win_info == first_win)\n-\t\t    make_invisible_and_set_new_height (first_win, new_height);\n+\t\t    first_win->make_invisible_and_set_new_height (new_height);\n \t\t  else\n-\t\t    make_invisible_and_set_new_height (\n-\t\t\t\t\t\t    first_win,\n-\t\t\t\t\t\t  first_win->height);\n+\t\t    first_win->make_invisible_and_set_new_height\n+\t\t      (first_win->height);\n \t\t  second_win->origin.y = first_win->height - 1;\n \t\t  if (primary_win_info == second_win)\n-\t\t    make_invisible_and_set_new_height (second_win, new_height);\n+\t\t    second_win->make_invisible_and_set_new_height (new_height);\n \t\t  else\n-\t\t    make_invisible_and_set_new_height (\n-\t\t\t\t      second_win, second_win->height);\n+\t\t    second_win->make_invisible_and_set_new_height\n+\t\t      (second_win->height);\n \t\t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n \t\t  if ((TUI_CMD_WIN->height + diff) < 1)\n-\t\t    make_invisible_and_set_new_height (TUI_CMD_WIN, 1);\n+\t\t    TUI_CMD_WIN->make_invisible_and_set_new_height (1);\n \t\t  else\n-\t\t    make_invisible_and_set_new_height (TUI_CMD_WIN,\n-\t\t\t\t\t\t       TUI_CMD_WIN->height + diff);\n+\t\t    TUI_CMD_WIN->make_invisible_and_set_new_height\n+\t\t      (TUI_CMD_WIN->height + diff);\n \t\t}\n \t      TUI_CMD_WIN->make_visible_with_new_height ();\n \t      second_win->make_visible_with_new_height ();\n@@ -1243,24 +1237,22 @@ tui_source_window_base::set_new_height (int height)\n     }\n }\n \n-/* Function make the target window (and auxiliary windows associated\n-   with the targer) invisible, and set the new height and\n-   location.  */\n-static void\n-make_invisible_and_set_new_height (struct tui_win_info *win_info, \n-\t\t\t\t   int height)\n+/* See tui-data.h.  */\n+\n+void\n+tui_win_info::make_invisible_and_set_new_height (int height)\n {\n-  win_info->make_visible (false);\n-  win_info->height = height;\n+  make_visible (false);\n+  height = height;\n   if (height > 1)\n-    win_info->viewport_height = height - 1;\n+    viewport_height = height - 1;\n   else\n-    win_info->viewport_height = height;\n-  if (win_info != TUI_CMD_WIN)\n-    win_info->viewport_height--;\n+    viewport_height = height;\n+  if (this != TUI_CMD_WIN)\n+    viewport_height--;\n \n   /* Now deal with the auxiliary windows associated with win_info.  */\n-  win_info->set_new_height (height);\n+  set_new_height (height);\n }\n \n "
    }
  ]
}