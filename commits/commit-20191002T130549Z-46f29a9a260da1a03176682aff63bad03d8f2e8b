{
  "sha": "46f29a9a260da1a03176682aff63bad03d8f2e8b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDZmMjlhOWEyNjBkYTFhMDMxNzY2ODJhZmY2M2JhZDAzZDhmMmU4Yg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-16T13:12:27Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-02T13:05:49Z"
    },
    "message": "gdb: Remove a VEC from gdbsupport/btrace-common.h\n\nConverts a VEC into a std::vector in gdbsupport/btrace-common.h.  This\ncommit just performs a mechanical conversion and doesn't do any\nrefactoring.  One consequence of this is that the std::vector must\nactually be a pointer to std::vector as it is placed within a union.\nIt might be possible in future to refactor to a class hierarchy and\nremove the need for a union, but I'd rather have that be a separate\nchange to make it easier to see the evolution of the code.\n\ngdb/ChangeLog:\n\n\t* btrace.c (btrace_compute_ftrace_bts): Update for std::vector,\n\tmake accesses into the vector constant references.\n\t(btrace_add_pc): Update for std::vector.\n\t(btrace_stitch_bts): Likewise.\n\t(parse_xml_btrace_block): Likewise.\n\t(btrace_maint_update_packets): Likewise.\n\t(btrace_maint_print_packets): Likewise.\n\t(maint_info_btrace_cmd): Likewise.\n\t* gdbsupport/btrace-common.c (btrace_data::fini): Update for\n\tstd::vector.\n\t(btrace_data::empty): Likewise.\n\t(btrace_data_append): Likewise.\n\t* gdbsupport/btrace-common.h: Remove use of DEF_VEC_O.\n\t(typedef btrace_block_s): Delete.\n\t(struct btrace_block): Add constructor.\n\t(struct btrace_data_bts) <blocks>: Change to std::vector.\n\t* nat/linux-btrace.c (perf_event_read_bts): Update for\n\tstd::vector.\n\t(linux_read_bts): Likewise.\n\ngdb/gdbserver/ChangeLog:\n\n\t* linux-low.c (linux_low_read_btrace): Update for change to\n\tstd::vector.",
    "tree": {
      "sha": "4fd2bb40deed8e0e8b6745bd2c6f70bab02347d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4fd2bb40deed8e0e8b6745bd2c6f70bab02347d0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/46f29a9a260da1a03176682aff63bad03d8f2e8b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46f29a9a260da1a03176682aff63bad03d8f2e8b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/46f29a9a260da1a03176682aff63bad03d8f2e8b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46f29a9a260da1a03176682aff63bad03d8f2e8b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "de4859eacb74a440d9fd61e4a0f051e3737a05dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de4859eacb74a440d9fd61e4a0f051e3737a05dd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de4859eacb74a440d9fd61e4a0f051e3737a05dd"
    }
  ],
  "stats": {
    "total": 144,
    "additions": 79,
    "deletions": 65
  },
  "files": [
    {
      "sha": "a5a87df1f42c1a01de554901c7151cd4858e2f99",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -1,3 +1,25 @@\n+2019-10-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* btrace.c (btrace_compute_ftrace_bts): Update for std::vector,\n+\tmake accesses into the vector constant references.\n+\t(btrace_add_pc): Update for std::vector.\n+\t(btrace_stitch_bts): Likewise.\n+\t(parse_xml_btrace_block): Likewise.\n+\t(btrace_maint_update_packets): Likewise.\n+\t(btrace_maint_print_packets): Likewise.\n+\t(maint_info_btrace_cmd): Likewise.\n+\t* gdbsupport/btrace-common.c (btrace_data::fini): Update for\n+\tstd::vector.\n+\t(btrace_data::empty): Likewise.\n+\t(btrace_data_append): Likewise.\n+\t* gdbsupport/btrace-common.h: Remove use of DEF_VEC_O.\n+\t(typedef btrace_block_s): Delete.\n+\t(struct btrace_block): Add constructor.\n+\t(struct btrace_data_bts) <blocks>: Change to std::vector.\n+\t* nat/linux-btrace.c (perf_event_read_bts): Update for\n+\tstd::vector.\n+\t(linux_read_bts): Likewise.\n+\n 2019-10-01  Tom Tromey  <tom@tromey.com>\n \n \t* cli/cli-logging.c (show_logging_filename): Use styled_string."
    },
    {
      "sha": "b6a111364442fb22f34b60314112618b8c17cfb8",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 23,
      "deletions": 35,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -1059,7 +1059,7 @@ btrace_compute_ftrace_bts (struct thread_info *tp,\n \n   gdbarch = target_gdbarch ();\n   btinfo = &tp->btrace;\n-  blk = VEC_length (btrace_block_s, btrace->blocks);\n+  blk = btrace->blocks->size ();\n \n   if (btinfo->functions.empty ())\n     level = INT_MAX;\n@@ -1068,13 +1068,12 @@ btrace_compute_ftrace_bts (struct thread_info *tp,\n \n   while (blk != 0)\n     {\n-      btrace_block_s *block;\n       CORE_ADDR pc;\n \n       blk -= 1;\n \n-      block = VEC_index (btrace_block_s, btrace->blocks, blk);\n-      pc = block->begin;\n+      const btrace_block &block = btrace->blocks->at (blk);\n+      pc = block.begin;\n \n       for (;;)\n \t{\n@@ -1083,7 +1082,7 @@ btrace_compute_ftrace_bts (struct thread_info *tp,\n \t  int size;\n \n \t  /* We should hit the end of the block.  Warn if we went too far.  */\n-\t  if (block->end < pc)\n+\t  if (block.end < pc)\n \t    {\n \t      /* Indicate the gap in the trace.  */\n \t      bfun = ftrace_new_gap (btinfo, BDE_BTS_OVERFLOW, gaps);\n@@ -1119,7 +1118,7 @@ btrace_compute_ftrace_bts (struct thread_info *tp,\n \t  ftrace_update_insns (bfun, insn);\n \n \t  /* We're done once we pushed the instruction at the end.  */\n-\t  if (block->end == pc)\n+\t  if (block.end == pc)\n \t    break;\n \n \t  /* We can't continue if we fail to compute the size.  */\n@@ -1573,19 +1572,16 @@ static void\n btrace_add_pc (struct thread_info *tp)\n {\n   struct btrace_data btrace;\n-  struct btrace_block *block;\n   struct regcache *regcache;\n   CORE_ADDR pc;\n \n   regcache = get_thread_regcache (tp);\n   pc = regcache_read_pc (regcache);\n \n   btrace.format = BTRACE_FORMAT_BTS;\n-  btrace.variant.bts.blocks = NULL;\n+  btrace.variant.bts.blocks = new std::vector <btrace_block>;\n \n-  block = VEC_safe_push (btrace_block_s, btrace.variant.bts.blocks, NULL);\n-  block->begin = pc;\n-  block->end = pc;\n+  btrace.variant.bts.blocks->emplace_back (pc, pc);\n \n   btrace_compute_ftrace (tp, &btrace, NULL);\n }\n@@ -1692,11 +1688,11 @@ btrace_stitch_bts (struct btrace_data_bts *btrace, struct thread_info *tp)\n {\n   struct btrace_thread_info *btinfo;\n   struct btrace_function *last_bfun;\n-  btrace_block_s *first_new_block;\n+  btrace_block *first_new_block;\n \n   btinfo = &tp->btrace;\n   gdb_assert (!btinfo->functions.empty ());\n-  gdb_assert (!VEC_empty (btrace_block_s, btrace->blocks));\n+  gdb_assert (!btrace->blocks->empty ());\n \n   last_bfun = &btinfo->functions.back ();\n \n@@ -1705,14 +1701,14 @@ btrace_stitch_bts (struct btrace_data_bts *btrace, struct thread_info *tp)\n      of the new trace,  though, since we can't fill in the start address.*/\n   if (last_bfun->insn.empty ())\n     {\n-      VEC_pop (btrace_block_s, btrace->blocks);\n+      btrace->blocks->pop_back ();\n       return 0;\n     }\n \n   /* Beware that block trace starts with the most recent block, so the\n      chronologically first block in the new trace is the last block in\n      the new trace's block vector.  */\n-  first_new_block = VEC_last (btrace_block_s, btrace->blocks);\n+  first_new_block = &btrace->blocks->back ();\n   const btrace_insn &last_insn = last_bfun->insn.back ();\n \n   /* If the current PC at the end of the block is the same as in our current\n@@ -1723,10 +1719,9 @@ btrace_stitch_bts (struct btrace_data_bts *btrace, struct thread_info *tp)\n      entries.\n      In the second case, the delta trace vector should contain exactly one\n      entry for the partial block containing the current PC.  Remove it.  */\n-  if (first_new_block->end == last_insn.pc\n-      && VEC_length (btrace_block_s, btrace->blocks) == 1)\n+  if (first_new_block->end == last_insn.pc && btrace->blocks->size () == 1)\n     {\n-      VEC_pop (btrace_block_s, btrace->blocks);\n+      btrace->blocks->pop_back ();\n       return 0;\n     }\n \n@@ -2030,7 +2025,6 @@ parse_xml_btrace_block (struct gdb_xml_parser *parser,\n \t\t\tstd::vector<gdb_xml_value> &attributes)\n {\n   struct btrace_data *btrace;\n-  struct btrace_block *block;\n   ULONGEST *begin, *end;\n \n   btrace = (struct btrace_data *) user_data;\n@@ -2042,7 +2036,7 @@ parse_xml_btrace_block (struct gdb_xml_parser *parser,\n \n     case BTRACE_FORMAT_NONE:\n       btrace->format = BTRACE_FORMAT_BTS;\n-      btrace->variant.bts.blocks = NULL;\n+      btrace->variant.bts.blocks = new std::vector <btrace_block>;\n       break;\n \n     default:\n@@ -2051,10 +2045,7 @@ parse_xml_btrace_block (struct gdb_xml_parser *parser,\n \n   begin = (ULONGEST *) xml_find_attribute (attributes, \"begin\")->value.get ();\n   end = (ULONGEST *) xml_find_attribute (attributes, \"end\")->value.get ();\n-\n-  block = VEC_safe_push (btrace_block_s, btrace->variant.bts.blocks, NULL);\n-  block->begin = *begin;\n-  block->end = *end;\n+  btrace->variant.bts.blocks->emplace_back (*begin, *end);\n }\n \n /* Parse a \"raw\" xml record.  */\n@@ -3095,7 +3086,7 @@ btrace_maint_update_packets (struct btrace_thread_info *btinfo,\n     case BTRACE_FORMAT_BTS:\n       /* Nothing to do - we operate directly on BTINFO->DATA.  */\n       *begin = 0;\n-      *end = VEC_length (btrace_block_s, btinfo->data.variant.bts.blocks);\n+      *end = btinfo->data.variant.bts.blocks->size ();\n       *from = btinfo->maint.variant.bts.packet_history.begin;\n       *to = btinfo->maint.variant.bts.packet_history.end;\n       break;\n@@ -3128,19 +3119,17 @@ btrace_maint_print_packets (struct btrace_thread_info *btinfo,\n \n     case BTRACE_FORMAT_BTS:\n       {\n-\tVEC (btrace_block_s) *blocks;\n+\tconst std::vector <btrace_block> &blocks\n+\t  = *btinfo->data.variant.bts.blocks;\n \tunsigned int blk;\n \n-\tblocks = btinfo->data.variant.bts.blocks;\n \tfor (blk = begin; blk < end; ++blk)\n \t  {\n-\t    const btrace_block_s *block;\n-\n-\t    block = VEC_index (btrace_block_s, blocks, blk);\n+\t    const btrace_block &block = blocks.at (blk);\n \n \t    printf_unfiltered (\"%u\\tbegin: %s, end: %s\\n\", blk,\n-\t\t\t       core_addr_to_string_nz (block->begin),\n-\t\t\t       core_addr_to_string_nz (block->end));\n+\t\t\t       core_addr_to_string_nz (block.begin),\n+\t\t\t       core_addr_to_string_nz (block.end));\n \t  }\n \n \tbtinfo->maint.variant.bts.packet_history.begin = begin;\n@@ -3443,9 +3432,8 @@ maint_info_btrace_cmd (const char *args, int from_tty)\n       break;\n \n     case BTRACE_FORMAT_BTS:\n-      printf_unfiltered (_(\"Number of packets: %u.\\n\"),\n-\t\t\t VEC_length (btrace_block_s,\n-\t\t\t\t     btinfo->data.variant.bts.blocks));\n+      printf_unfiltered (_(\"Number of packets: %zu.\\n\"),\n+\t\t\t btinfo->data.variant.bts.blocks->size ());\n       break;\n \n #if defined (HAVE_LIBIPT)"
    },
    {
      "sha": "7eef2c54cba73cd64e1977f42cdbfd7bae2b7a72",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linux-low.c (linux_low_read_btrace): Update for change to\n+\tstd::vector.\n+\n 2019-09-20  Christian Biesinger  <cbiesinger@google.com>\n \n \t* debug.c (debug_threads): Remove comment in favor of the header."
    },
    {
      "sha": "0e4b14e36554d28c972b16dc202923655dddb3af",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -7115,9 +7115,7 @@ linux_low_read_btrace (struct btrace_target_info *tinfo, struct buffer *buffer,\n \t\t       enum btrace_read_type type)\n {\n   struct btrace_data btrace;\n-  struct btrace_block *block;\n   enum btrace_error err;\n-  int i;\n \n   err = linux_read_btrace (&btrace, tinfo, type);\n   if (err != BTRACE_ERR_NONE)\n@@ -7140,11 +7138,9 @@ linux_low_read_btrace (struct btrace_target_info *tinfo, struct buffer *buffer,\n       buffer_grow_str (buffer, \"<!DOCTYPE btrace SYSTEM \\\"btrace.dtd\\\">\\n\");\n       buffer_grow_str (buffer, \"<btrace version=\\\"1.0\\\">\\n\");\n \n-      for (i = 0;\n-\t   VEC_iterate (btrace_block_s, btrace.variant.bts.blocks, i, block);\n-\t   i++)\n+      for (const btrace_block &block : *btrace.variant.bts.blocks)\n \tbuffer_xml_printf (buffer, \"<block begin=\\\"0x%s\\\" end=\\\"0x%s\\\"/>\\n\",\n-\t\t\t   paddress (block->begin), paddress (block->end));\n+\t\t\t   paddress (block.begin), paddress (block.end));\n \n       buffer_grow_str0 (buffer, \"</btrace>\\n\");\n       break;"
    },
    {
      "sha": "d6d3ab50c9e7703fdcfedf693a58574d35b1d9c6",
      "filename": "gdb/gdbsupport/btrace-common.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbsupport/btrace-common.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbsupport/btrace-common.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/btrace-common.c?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -73,7 +73,8 @@ btrace_data::fini ()\n       return;\n \n     case BTRACE_FORMAT_BTS:\n-      VEC_free (btrace_block_s, variant.bts.blocks);\n+      delete variant.bts.blocks;\n+      variant.bts.blocks = nullptr;\n       return;\n \n     case BTRACE_FORMAT_PT:\n@@ -95,7 +96,7 @@ btrace_data::empty () const\n       return true;\n \n     case BTRACE_FORMAT_BTS:\n-      return VEC_empty (btrace_block_s, variant.bts.blocks);\n+      return variant.bts.blocks->empty ();\n \n     case BTRACE_FORMAT_PT:\n       return (variant.pt.size == 0);\n@@ -132,7 +133,7 @@ btrace_data_append (struct btrace_data *dst,\n \n \tcase BTRACE_FORMAT_NONE:\n \t  dst->format = BTRACE_FORMAT_BTS;\n-\t  dst->variant.bts.blocks = NULL;\n+\t  dst->variant.bts.blocks = new std::vector <btrace_block>;\n \n \t  /* Fall-through.  */\n \tcase BTRACE_FORMAT_BTS:\n@@ -141,15 +142,12 @@ btrace_data_append (struct btrace_data *dst,\n \n \t    /* We copy blocks in reverse order to have the oldest block at\n \t       index zero.  */\n-\t    blk = VEC_length (btrace_block_s, src->variant.bts.blocks);\n+\t    blk = src->variant.bts.blocks->size ();\n \t    while (blk != 0)\n \t      {\n-\t\tbtrace_block_s *block;\n-\n-\t\tblock = VEC_index (btrace_block_s, src->variant.bts.blocks,\n-\t\t\t\t   --blk);\n-\n-\t\tVEC_safe_push (btrace_block_s, dst->variant.bts.blocks, block);\n+\t\tconst btrace_block &block\n+\t\t  = src->variant.bts.blocks->at (--blk);\n+\t\tdst->variant.bts.blocks->push_back (block);\n \t      }\n \t  }\n \t}"
    },
    {
      "sha": "9c57645ffb162509089522fbbe1c9a3143c936b9",
      "filename": "gdb/gdbsupport/btrace-common.h",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbsupport/btrace-common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/gdbsupport/btrace-common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/btrace-common.h?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -43,11 +43,15 @@ struct btrace_block\n \n   /* The address of the first byte of the last instruction in the block.  */\n   CORE_ADDR end;\n-};\n \n-/* Define functions operating on a vector of branch trace blocks.  */\n-typedef struct btrace_block btrace_block_s;\n-DEF_VEC_O (btrace_block_s);\n+  /* Simple constructor.  */\n+  btrace_block (CORE_ADDR begin, CORE_ADDR end)\n+    : begin (begin),\n+      end (end)\n+  {\n+    /* Nothing.  */\n+  }\n+};\n \n /* Enumeration of btrace formats.  */\n \n@@ -137,8 +141,9 @@ struct btrace_config\n struct btrace_data_bts\n {\n   /* Branch trace is represented as a vector of branch trace blocks starting\n-     with the most recent block.  */\n-  VEC (btrace_block_s) *blocks;\n+     with the most recent block.  This needs to be a pointer as we place\n+     btrace_data_bts into a union.  */\n+  std::vector <btrace_block> *blocks;\n };\n \n /* Configuration information to go with the trace data.  */"
    },
    {
      "sha": "a63973d569d9e63a3d1536a4c35399f39951deef",
      "filename": "gdb/nat/linux-btrace.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/nat/linux-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f29a9a260da1a03176682aff63bad03d8f2e8b/gdb/nat/linux-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-btrace.c?ref=46f29a9a260da1a03176682aff63bad03d8f2e8b",
      "patch": "@@ -271,11 +271,11 @@ perf_event_sample_ok (const struct perf_event_sample *sample)\n    In case the buffer overflows during sampling, one sample may have its lower\n    part at the end and its upper part at the beginning of the buffer.  */\n \n-static VEC (btrace_block_s) *\n+static std::vector <btrace_block> *\n perf_event_read_bts (struct btrace_target_info* tinfo, const uint8_t *begin,\n \t\t     const uint8_t *end, const uint8_t *start, size_t size)\n {\n-  VEC (btrace_block_s) *btrace = NULL;\n+  std::vector <btrace_block> *btrace = new std::vector <btrace_block>;\n   struct perf_event_sample sample;\n   size_t read = 0;\n   struct btrace_block block = { 0, 0 };\n@@ -343,7 +343,7 @@ perf_event_read_bts (struct btrace_target_info* tinfo, const uint8_t *begin,\n       /* We found a valid sample, so we can complete the current block.  */\n       block.begin = psample->bts.to;\n \n-      VEC_safe_push (btrace_block_s, btrace, &block);\n+      btrace->push_back (block);\n \n       /* Start the next block.  */\n       block.end = psample->bts.from;\n@@ -354,7 +354,7 @@ perf_event_read_bts (struct btrace_target_info* tinfo, const uint8_t *begin,\n      reading delta trace, we can fill in the start address later on.\n      Otherwise we will prune it.  */\n   block.begin = 0;\n-  VEC_safe_push (btrace_block_s, btrace, &block);\n+  btrace->push_back (block);\n \n   return btrace;\n }\n@@ -785,7 +785,8 @@ linux_read_bts (struct btrace_data_bts *btrace,\n       data_head = *pevent->data_head;\n \n       /* Delete any leftover trace from the previous iteration.  */\n-      VEC_free (btrace_block_s, btrace->blocks);\n+      delete btrace->blocks;\n+      btrace->blocks = nullptr;\n \n       if (type == BTRACE_READ_DELTA)\n \t{\n@@ -843,9 +844,8 @@ linux_read_bts (struct btrace_data_bts *btrace,\n   /* Prune the incomplete last block (i.e. the first one of inferior execution)\n      if we're not doing a delta read.  There is no way of filling in its zeroed\n      BEGIN element.  */\n-  if (!VEC_empty (btrace_block_s, btrace->blocks)\n-      && type != BTRACE_READ_DELTA)\n-    VEC_pop (btrace_block_s, btrace->blocks);\n+  if (!btrace->blocks->empty () && type != BTRACE_READ_DELTA)\n+    btrace->blocks->pop_back ();\n \n   return BTRACE_ERR_NONE;\n }"
    }
  ]
}