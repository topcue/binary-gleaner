{
  "sha": "3e225074507540c866704f4de6b70eb0fcd37013",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2UyMjUwNzQ1MDc1NDBjODY2NzA0ZjRkZTZiNzBlYjBmY2QzNzAxMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:59Z"
    },
    "message": "Introduce die_info::has_children\n\nMany functions take a \"has_children\" parameter (either as an in- or\nout-parameter).  However, it seems to me that it makes more sense to\nhave \"has_children\" be an attribute of a DIE.  Making this change\nallows this parameter to be eliminated in many places.\n\ngdb/ChangeLog\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (struct die_info) <has_children>: New member.\n\t(dw2_get_file_names_reader): Remove has_children.\n\t(dw2_get_file_names): Update.\n\t(read_cutu_die_from_dwo): Remove has_children.\n\t(cutu_reader::init_tu_and_read_dwo_dies)\n\t(cutu_reader::cutu_reader): Update.\n\t(process_psymtab_comp_unit_reader, build_type_psymtabs_reader):\n\tRemove has_children.\n\t(build_type_psymtabs_1, process_skeletonless_type_unit)\n\t(load_partial_comp_unit, load_full_comp_unit): Update.\n\t(create_dwo_cu_reader): Remove has_children.\n\t(create_cus_hash_table, read_die_and_children): Update.\n\t(read_full_die_1,read_full_die): Remove has_children.\n\t(read_signatured_type): Update.\n\t(class cutu_reader) <has_children>: Remove.\n\nChange-Id: I0d3d51ae9379554a66032648d51124bba07f87b4",
    "tree": {
      "sha": "d339b6b1453ba69bfa189cd6e2b41c66284bb59c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d339b6b1453ba69bfa189cd6e2b41c66284bb59c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3e225074507540c866704f4de6b70eb0fcd37013",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e225074507540c866704f4de6b70eb0fcd37013",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3e225074507540c866704f4de6b70eb0fcd37013",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e225074507540c866704f4de6b70eb0fcd37013/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "82ca895718becbd1be898a86e4a6d1217fa496c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82ca895718becbd1be898a86e4a6d1217fa496c6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/82ca895718becbd1be898a86e4a6d1217fa496c6"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 52,
    "deletions": 48
  },
  "files": [
    {
      "sha": "b08ca9868a47cd71b21fe7034eedac7f42e443d2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e225074507540c866704f4de6b70eb0fcd37013/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e225074507540c866704f4de6b70eb0fcd37013/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3e225074507540c866704f4de6b70eb0fcd37013",
      "patch": "@@ -1,3 +1,21 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (struct die_info) <has_children>: New member.\n+\t(dw2_get_file_names_reader): Remove has_children.\n+\t(dw2_get_file_names): Update.\n+\t(read_cutu_die_from_dwo): Remove has_children.\n+\t(cutu_reader::init_tu_and_read_dwo_dies)\n+\t(cutu_reader::cutu_reader): Update.\n+\t(process_psymtab_comp_unit_reader, build_type_psymtabs_reader):\n+\tRemove has_children.\n+\t(build_type_psymtabs_1, process_skeletonless_type_unit)\n+\t(load_partial_comp_unit, load_full_comp_unit): Update.\n+\t(create_dwo_cu_reader): Remove has_children.\n+\t(create_cus_hash_table, read_die_and_children): Update.\n+\t(read_full_die_1,read_full_die): Remove has_children.\n+\t(read_signatured_type): Update.\n+\t(class cutu_reader) <has_children>: Remove.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/expr.c: Rename from dwarf2expr.c."
    },
    {
      "sha": "9a1f7957feb24eaf0e9d9348eed0b49de9405349",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 34,
      "deletions": 48,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e225074507540c866704f4de6b70eb0fcd37013/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e225074507540c866704f4de6b70eb0fcd37013/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=3e225074507540c866704f4de6b70eb0fcd37013",
      "patch": "@@ -929,7 +929,6 @@ class cutu_reader : public die_reader_specs\n \n   const gdb_byte *info_ptr = nullptr;\n   struct die_info *comp_unit_die = nullptr;\n-  int has_children = 0;\n   bool dummy_p = false;\n \n private:\n@@ -1247,6 +1246,9 @@ struct die_info\n     /* True if this die is in process.  PR 16581.  */\n     unsigned char in_process : 1;\n \n+    /* True if this DIE has children.  */\n+    unsigned char has_children : 1;\n+\n     /* Abbrev number */\n     unsigned int abbrev;\n \n@@ -1370,8 +1372,7 @@ static dwarf2_psymtab *create_partial_symtab\n \n static void build_type_psymtabs_reader (const struct die_reader_specs *reader,\n \t\t\t\t\tconst gdb_byte *info_ptr,\n-\t\t\t\t\tstruct die_info *type_unit_die,\n-\t\t\t\t\tint has_children);\n+\t\t\t\t\tstruct die_info *type_unit_die);\n \n static void dwarf2_build_psymtabs_hard\n   (struct dwarf2_per_objfile *dwarf2_per_objfile);\n@@ -1648,11 +1649,10 @@ static struct die_info *read_die_and_siblings (const struct die_reader_specs *,\n \n static const gdb_byte *read_full_die_1 (const struct die_reader_specs *,\n \t\t\t\t\tstruct die_info **, const gdb_byte *,\n-\t\t\t\t\tint *, int);\n+\t\t\t\t\tint);\n \n static const gdb_byte *read_full_die (const struct die_reader_specs *,\n-\t\t\t\t      struct die_info **, const gdb_byte *,\n-\t\t\t\t      int *);\n+\t\t\t\t      struct die_info **, const gdb_byte *);\n \n static void process_die (struct die_info *, struct dwarf2_cu *);\n \n@@ -3338,8 +3338,7 @@ dwarf2_read_gdb_index\n static void\n dw2_get_file_names_reader (const struct die_reader_specs *reader,\n \t\t\t   const gdb_byte *info_ptr,\n-\t\t\t   struct die_info *comp_unit_die,\n-\t\t\t   int has_children)\n+\t\t\t   struct die_info *comp_unit_die)\n {\n   struct dwarf2_cu *cu = reader->cu;\n   struct dwarf2_per_cu_data *this_cu = cu->per_cu;\n@@ -3437,8 +3436,7 @@ dw2_get_file_names (struct dwarf2_per_cu_data *this_cu)\n \n   cutu_reader reader (this_cu);\n   if (!reader.dummy_p)\n-    dw2_get_file_names_reader (&reader, reader.info_ptr, reader.comp_unit_die,\n-\t\t\t       reader.has_children);\n+    dw2_get_file_names_reader (&reader, reader.info_ptr, reader.comp_unit_die);\n \n   if (this_cu->v.quick->no_file_data)\n     return NULL;\n@@ -6925,7 +6923,7 @@ init_cu_die_reader (struct die_reader_specs *reader,\n    from the DWO file, bypassing the stub, it contains the DW_AT_comp_dir\n    attribute of the referencing CU.  At most one of STUB_COMP_UNIT_DIE and\n    STUB_COMP_DIR may be non-NULL.\n-   *RESULT_READER,*RESULT_INFO_PTR,*RESULT_COMP_UNIT_DIE,*RESULT_HAS_CHILDREN\n+   *RESULT_READER,*RESULT_INFO_PTR,*RESULT_COMP_UNIT_DIE\n    are filled in with the info of the DIE from the DWO file.\n    *RESULT_DWO_ABBREV_TABLE will be filled in with the abbrev table allocated\n    from the dwo.  Since *RESULT_READER references this abbrev table, it must be\n@@ -6941,7 +6939,6 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n \t\t\tstruct die_reader_specs *result_reader,\n \t\t\tconst gdb_byte **result_info_ptr,\n \t\t\tstruct die_info **result_comp_unit_die,\n-\t\t\tint *result_has_children,\n \t\t\tabbrev_table_up *result_dwo_abbrev_table)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile = this_cu->dwarf2_per_objfile;\n@@ -7065,7 +7062,7 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n \t\t     + (ranges != NULL)\n \t\t     + (comp_dir != NULL));\n   info_ptr = read_full_die_1 (result_reader, result_comp_unit_die, info_ptr,\n-\t\t\t      result_has_children, num_extra_attrs);\n+\t\t\t      num_extra_attrs);\n \n   /* Copy over the attributes from the stub to the DIE we just read in.  */\n   comp_unit_die = *result_comp_unit_die;\n@@ -7196,7 +7193,7 @@ cutu_reader::init_tu_and_read_dwo_dies (struct dwarf2_per_cu_data *this_cu,\n \t\t\t      NULL /* stub_comp_unit_die */,\n \t\t\t      sig_type->dwo_unit->dwo_file->comp_dir,\n \t\t\t      &reader, &info_ptr,\n-\t\t\t      &comp_unit_die, &has_children,\n+\t\t\t      &comp_unit_die,\n \t\t\t      &m_dwo_abbrev_table) == 0)\n     {\n       /* Dummy die.  */\n@@ -7355,7 +7352,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n \n   /* Read the top level CU/TU die.  */\n   init_cu_die_reader (this, cu, section, NULL, abbrev_table);\n-  info_ptr = read_full_die (this, &comp_unit_die, info_ptr, &has_children);\n+  info_ptr = read_full_die (this, &comp_unit_die, info_ptr);\n \n   if (skip_partial && comp_unit_die->tag == DW_TAG_partial_unit)\n     {\n@@ -7377,7 +7374,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n       struct dwo_unit *dwo_unit;\n       struct die_info *dwo_comp_unit_die;\n \n-      if (has_children)\n+      if (comp_unit_die->has_children)\n \t{\n \t  complaint (_(\"compilation unit with DW_AT_GNU_dwo_name\"\n \t\t       \" has children (offset %s) [in module %s]\"),\n@@ -7390,7 +7387,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n \t  if (read_cutu_die_from_dwo (this_cu, dwo_unit,\n \t\t\t\t      comp_unit_die, NULL,\n \t\t\t\t      this, &info_ptr,\n-\t\t\t\t      &dwo_comp_unit_die, &has_children,\n+\t\t\t\t      &dwo_comp_unit_die,\n \t\t\t\t      &m_dwo_abbrev_table) == 0)\n \t    {\n \t      /* Dummy die.  */\n@@ -7453,7 +7450,6 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n   bfd *abfd = section->get_bfd_owner ();\n   struct dwarf2_section_info *abbrev_section;\n   const gdb_byte *begin_info_ptr, *info_ptr;\n-  int has_children;\n \n   if (dwarf_die_debug)\n     fprintf_unfiltered (gdb_stdlog, \"Reading %s unit at offset %s\\n\",\n@@ -7500,7 +7496,7 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n \n   init_cu_die_reader (this, m_new_cu.get (), section, dwo_file,\n \t\t      m_abbrev_table_holder.get ());\n-  info_ptr = read_full_die (this, &comp_unit_die, info_ptr, &has_children);\n+  info_ptr = read_full_die (this, &comp_unit_die, info_ptr);\n }\n \n \f\n@@ -7685,7 +7681,6 @@ static void\n process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \t\t\t\t  const gdb_byte *info_ptr,\n \t\t\t\t  struct die_info *comp_unit_die,\n-\t\t\t\t  int has_children,\n \t\t\t\t  int want_partial_unit,\n \t\t\t\t  enum language pretend_language)\n {\n@@ -7741,7 +7736,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n   /* Check if comp unit has_children.\n      If so, read the rest of the partial symbols from this comp unit.\n      If not, there's no more debug_info for this comp unit.  */\n-  if (has_children)\n+  if (comp_unit_die->has_children)\n     {\n       struct partial_die_info *first_die;\n       CORE_ADDR lowpc, highpc;\n@@ -7833,12 +7828,11 @@ process_psymtab_comp_unit (struct dwarf2_per_cu_data *this_cu,\n       /* Nothing.  */\n     }\n   else if (this_cu->is_debug_types)\n-    build_type_psymtabs_reader (&reader, reader.info_ptr, reader.comp_unit_die,\n-\t\t\t\treader.has_children);\n+    build_type_psymtabs_reader (&reader, reader.info_ptr,\n+\t\t\t\treader.comp_unit_die);\n   else\n     process_psymtab_comp_unit_reader (&reader, reader.info_ptr,\n \t\t\t\t      reader.comp_unit_die,\n-\t\t\t\t      reader.has_children,\n \t\t\t\t      want_partial_unit,\n \t\t\t\t      pretend_language);\n \n@@ -7851,8 +7845,7 @@ process_psymtab_comp_unit (struct dwarf2_per_cu_data *this_cu,\n static void\n build_type_psymtabs_reader (const struct die_reader_specs *reader,\n \t\t\t    const gdb_byte *info_ptr,\n-\t\t\t    struct die_info *type_unit_die,\n-\t\t\t    int has_children)\n+\t\t\t    struct die_info *type_unit_die)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = reader->cu->per_cu->dwarf2_per_objfile;\n@@ -7869,7 +7862,7 @@ build_type_psymtabs_reader (const struct die_reader_specs *reader,\n   gdb_assert (per_cu->is_debug_types);\n   sig_type = (struct signatured_type *) per_cu;\n \n-  if (! has_children)\n+  if (! type_unit_die->has_children)\n     return;\n \n   attr = dwarf2_attr_no_follow (type_unit_die, DW_AT_stmt_list);\n@@ -8000,8 +7993,7 @@ build_type_psymtabs_1 (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \t\t\t  0, 0, false);\n       if (!reader.dummy_p)\n \tbuild_type_psymtabs_reader (&reader, reader.info_ptr,\n-\t\t\t\t    reader.comp_unit_die,\n-\t\t\t\t    reader.has_children);\n+\t\t\t\t    reader.comp_unit_die);\n     }\n }\n \n@@ -8109,7 +8101,7 @@ process_skeletonless_type_unit (void **slot, void *info)\n   cutu_reader reader (&entry->per_cu, NULL, 0, 0, false);\n   if (!reader.dummy_p)\n     build_type_psymtabs_reader (&reader, reader.info_ptr,\n-\t\t\t\treader.comp_unit_die, reader.has_children);\n+\t\t\t\treader.comp_unit_die);\n \n   return 1;\n }\n@@ -8247,7 +8239,7 @@ load_partial_comp_unit (struct dwarf2_per_cu_data *this_cu)\n       /* Check if comp unit has_children.\n \t If so, read the rest of the partial symbols from this comp unit.\n \t If not, there's no more debug_info for this comp unit.  */\n-      if (reader.has_children)\n+      if (reader.comp_unit_die->has_children)\n \tload_partial_dies (&reader, reader.info_ptr, 0);\n     }\n }\n@@ -9379,7 +9371,7 @@ load_full_comp_unit (struct dwarf2_per_cu_data *this_cu,\n \t\t\t  hashtab_obstack_allocate,\n \t\t\t  dummy_obstack_deallocate);\n \n-  if (reader.has_children)\n+  if (reader.comp_unit_die->has_children)\n     reader.comp_unit_die->child\n       = read_die_and_siblings (&reader, reader.info_ptr,\n \t\t\t       &info_ptr, reader.comp_unit_die);\n@@ -11535,7 +11527,6 @@ static void\n create_dwo_cu_reader (const struct die_reader_specs *reader,\n \t\t      const gdb_byte *info_ptr,\n \t\t      struct die_info *comp_unit_die,\n-\t\t      int has_children,\n \t\t      struct dwo_file *dwo_file,\n \t\t      struct dwo_unit *dwo_unit)\n {\n@@ -11606,7 +11597,7 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       cutu_reader reader (&per_cu, cu, &dwo_file);\n       if (!reader.dummy_p)\n \tcreate_dwo_cu_reader (&reader, reader.info_ptr, reader.comp_unit_die,\n-\t\t\t      reader.has_children, &dwo_file, &read_unit);\n+\t\t\t      &dwo_file, &read_unit);\n       info_ptr += per_cu.length;\n \n       // If the unit could not be parsed, skip it.\n@@ -17911,17 +17902,16 @@ read_die_and_children (const struct die_reader_specs *reader,\n {\n   struct die_info *die;\n   const gdb_byte *cur_ptr;\n-  int has_children;\n \n-  cur_ptr = read_full_die_1 (reader, &die, info_ptr, &has_children, 0);\n+  cur_ptr = read_full_die_1 (reader, &die, info_ptr, 0);\n   if (die == NULL)\n     {\n       *new_info_ptr = cur_ptr;\n       return NULL;\n     }\n   store_in_ref_table (die, reader->cu);\n \n-  if (has_children)\n+  if (die->has_children)\n     die->child = read_die_and_siblings_1 (reader, cur_ptr, new_info_ptr, die);\n   else\n     {\n@@ -18002,13 +17992,12 @@ read_die_and_siblings (const struct die_reader_specs *reader,\n    The caller is responsible for filling in the extra attributes\n    and updating (*DIEP)->num_attrs.\n    Set DIEP to point to a newly allocated die with its information,\n-   except for its child, sibling, and parent fields.\n-   Set HAS_CHILDREN to tell whether the die has children or not.  */\n+   except for its child, sibling, and parent fields.  */\n \n static const gdb_byte *\n read_full_die_1 (const struct die_reader_specs *reader,\n \t\t struct die_info **diep, const gdb_byte *info_ptr,\n-\t\t int *has_children, int num_extra_attrs)\n+\t\t int num_extra_attrs)\n {\n   unsigned int abbrev_number, bytes_read, i;\n   struct abbrev_info *abbrev;\n@@ -18022,7 +18011,6 @@ read_full_die_1 (const struct die_reader_specs *reader,\n   if (!abbrev_number)\n     {\n       *diep = NULL;\n-      *has_children = 0;\n       return info_ptr;\n     }\n \n@@ -18036,6 +18024,7 @@ read_full_die_1 (const struct die_reader_specs *reader,\n   die->sect_off = sect_off;\n   die->tag = abbrev->tag;\n   die->abbrev = abbrev_number;\n+  die->has_children = abbrev->has_children;\n \n   /* Make the result usable.\n      The caller needs to update num_attrs after adding the extra\n@@ -18063,23 +18052,20 @@ read_full_die_1 (const struct die_reader_specs *reader,\n   for (int index : indexes_that_need_reprocess)\n     read_attribute_reprocess (reader, &die->attrs[index]);\n   *diep = die;\n-  *has_children = abbrev->has_children;\n   return info_ptr;\n }\n \n /* Read a die and all its attributes.\n    Set DIEP to point to a newly allocated die with its information,\n-   except for its child, sibling, and parent fields.\n-   Set HAS_CHILDREN to tell whether the die has children or not.  */\n+   except for its child, sibling, and parent fields.  */\n \n static const gdb_byte *\n read_full_die (const struct die_reader_specs *reader,\n-\t       struct die_info **diep, const gdb_byte *info_ptr,\n-\t       int *has_children)\n+\t       struct die_info **diep, const gdb_byte *info_ptr)\n {\n   const gdb_byte *result;\n \n-  result = read_full_die_1 (reader, diep, info_ptr, has_children, 0);\n+  result = read_full_die_1 (reader, diep, info_ptr, 0);\n \n   if (dwarf_die_debug)\n     {\n@@ -23495,7 +23481,7 @@ read_signatured_type (struct signatured_type *sig_type)\n \t\t\t      hashtab_obstack_allocate,\n \t\t\t      dummy_obstack_deallocate);\n \n-      if (reader.has_children)\n+      if (reader.comp_unit_die->has_children)\n \treader.comp_unit_die->child\n \t  = read_die_and_siblings (&reader, info_ptr, &info_ptr,\n \t\t\t\t   reader.comp_unit_die);"
    }
  ]
}